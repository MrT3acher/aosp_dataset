diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/0-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/0-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/0-cfg.dot	2023-06-07 19:35:01.187387193 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/0-cfg.dot	2023-06-07 19:35:07.897386528 +0330
@@ -1,5 +1,241 @@
-digraph "anonymous_lambda_8" {  
-"3" [label = <(METHOD,anonymous_lambda_8)<SUB>108</SUB>> ]
-"5" [label = <(METHOD_RETURN,ANY)<SUB>108</SUB>> ]
-  "3" -> "5" 
+digraph "&lt;global&gt;" {  
+"65" [label = <(UNKNOWN,),))<SUB>133</SUB>> ]
+"66" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012  DCHECK_NE(field-&gt;GetTypeAsPrimitiveType(), Primitive::kPrimNot);,REQUIRES_SHARED(Locks::mutator_lock_) {\012  DCHECK_NE(field-&gt;GetTypeAsPrimitiveType(), Primitive::kPrimNot);)<SUB>134</SUB>> ]
+"68" [label = <(&lt;operator&gt;.assignment,* instrumentation = Runtime::Current()-&gt;GetInstrumentation())<SUB>136</SUB>> ]
+"77" [label = <(UNKNOWN,if (UNLIKELY(instrumentation-&gt;HasFieldWriteListeners())) {\012 Thread* self = Thread::Current();\012 ArtMethod* cur_method = self-&gt;GetCurrentMethod(/*dex_pc=*/ nullptr,\012 /*check_suspended=*/ true,\012 /*abort_on_error=*/ false);\012\012 if (cur_method == nullptr) {\012 // Set/Get Fields can be issued without a method during runtime startup/teardown. Ignore all\012 // of these changes.\012 return;\012 }\012    DCHECK(cur_method-&gt;IsNative());\012    instrumentation-&gt;FieldWriteEvent(self,\012                                     self-&gt;DecodeJObject(obj),\012                                     cur_method,\012 0, // dex_pc is always 0 since this is a native method.\012                                     field,\012                                     val);\012 },if (UNLIKELY(instrumentation-&gt;HasFieldWriteListeners())) {\012 Thread* self = Thread::Current();\012 ArtMethod* cur_method = self-&gt;GetCurrentMethod(/*dex_pc=*/ nullptr,\012 /*check_suspended=*/ true,\012 /*abort_on_error=*/ false);\012\012 if (cur_method == nullptr) {\012 // Set/Get Fields can be issued without a method during runtime startup/teardown. Ignore all\012 // of these changes.\012 return;\012 }\012    DCHECK(cur_method-&gt;IsNative());\012    instrumentation-&gt;FieldWriteEvent(self,\012                                     self-&gt;DecodeJObject(obj),\012                                     cur_method,\012 0, // dex_pc is always 0 since this is a native method.\012                                     field,\012                                     val);\012 })<SUB>137</SUB>> ]
+"78" [label = <(UNKNOWN,},})<SUB>156</SUB>> ]
+"85" [label = <(UNKNOWN,),))<SUB>158</SUB>> ]
+"86" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012  instrumentation::Instrumentation* instrumentation = Runtime::Current()-&gt;GetInstrumentation();,REQUIRES_SHARED(Locks::mutator_lock_) {\012  instrumentation::Instrumentation* instrumentation = Runtime::Current()-&gt;GetInstrumentation();)<SUB>159</SUB>> ]
+"87" [label = <(UNKNOWN,if (UNLIKELY(instrumentation-&gt;HasFieldReadListeners())) {\012 Thread* self = Thread::Current();\012 ArtMethod* cur_method = self-&gt;GetCurrentMethod(/*dex_pc=*/ nullptr,\012 /*check_suspended=*/ true,\012 /*abort_on_error=*/ false);\012\012 if (cur_method == nullptr) {\012 // Set/Get Fields can be issued without a method during runtime startup/teardown. Ignore all\012 // of these changes.\012 return;\012 }\012    DCHECK(cur_method-&gt;IsNative());\012    instrumentation-&gt;FieldReadEvent(self,\012                                    self-&gt;DecodeJObject(obj),\012                                    cur_method,\012 0, // dex_pc is always 0 since this is a native method.\012                                    field);\012 },if (UNLIKELY(instrumentation-&gt;HasFieldReadListeners())) {\012 Thread* self = Thread::Current();\012 ArtMethod* cur_method = self-&gt;GetCurrentMethod(/*dex_pc=*/ nullptr,\012 /*check_suspended=*/ true,\012 /*abort_on_error=*/ false);\012\012 if (cur_method == nullptr) {\012 // Set/Get Fields can be issued without a method during runtime startup/teardown. Ignore all\012 // of these changes.\012 return;\012 }\012    DCHECK(cur_method-&gt;IsNative());\012    instrumentation-&gt;FieldReadEvent(self,\012                                    self-&gt;DecodeJObject(obj),\012                                    cur_method,\012 0, // dex_pc is always 0 since this is a native method.\012                                    field);\012 })<SUB>161</SUB>> ]
+"88" [label = <(UNKNOWN,},})<SUB>179</SUB>> ]
+"163" [label = <(UNKNOWN,),))<SUB>208</SUB>> ]
+"164" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012  LOG(ERROR)\012 &lt;&lt; &quot;Failed to register native method in &quot; &lt;&lt; c-&gt;PrettyDescriptor()\012 &lt;&lt; &quot; in &quot; &lt;&lt; c-&gt;GetDexCache()-&gt;GetLocation()-&gt;ToModifiedUtf8()\012 &lt;&lt; &quot;: &quot; &lt;&lt; kind &lt;&lt; &quot; is null at index &quot; &lt;&lt; idx;,REQUIRES_SHARED(Locks::mutator_lock_) {\012  LOG(ERROR)\012 &lt;&lt; &quot;Failed to register native method in &quot; &lt;&lt; c-&gt;PrettyDescriptor()\012 &lt;&lt; &quot; in &quot; &lt;&lt; c-&gt;GetDexCache()-&gt;GetLocation()-&gt;ToModifiedUtf8()\012 &lt;&lt; &quot;: &quot; &lt;&lt; kind &lt;&lt; &quot; is null at index &quot; &lt;&lt; idx;)<SUB>209</SUB>> ]
+"165" [label = <(UNKNOWN,soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/NoSuchMethodError;&quot;,\012 &quot;%s is null at index %d&quot;,\012                                 kind,\012                                 idx);,soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/NoSuchMethodError;&quot;,\012 &quot;%s is null at index %d&quot;,\012                                 kind,\012                                 idx);)<SUB>214</SUB>> ]
+"166" [label = <(UNKNOWN,},})<SUB>218</SUB>> ]
+"176" [label = <(UNKNOWN,),))<SUB>222</SUB>> ]
+"177" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012 return jni::EncodeArtMethod&lt;kEnableIndexIds&gt;(FindMethodJNI(soa, jni_class, name, sig, is_static));,REQUIRES_SHARED(Locks::mutator_lock_) {\012 return jni::EncodeArtMethod&lt;kEnableIndexIds&gt;(FindMethodJNI(soa, jni_class, name, sig, is_static));)<SUB>223</SUB>> ]
+"178" [label = <(UNKNOWN,},})<SUB>225</SUB>> ]
+"184" [label = <(UNKNOWN,),))<SUB>228</SUB>> ]
+"185" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012 ArtMethod* method = soa.Self()-&gt;GetCurrentMethod(nullptr);,REQUIRES_SHARED(Locks::mutator_lock_) {\012 ArtMethod* method = soa.Self()-&gt;GetCurrentMethod(nullptr);)<SUB>229</SUB>> ]
+"186" [label = <(UNKNOWN,if (method ==\012      jni::DecodeArtMethod&lt;kEnableIndexIds&gt;(WellKnownClasses::java_lang_Runtime_nativeLoad)) {\012 return soa.Decode&lt;mirror::ClassLoader&gt;(soa.Self()-&gt;GetClassLoaderOverride());\012 },if (method ==\012      jni::DecodeArtMethod&lt;kEnableIndexIds&gt;(WellKnownClasses::java_lang_Runtime_nativeLoad)) {\012 return soa.Decode&lt;mirror::ClassLoader&gt;(soa.Self()-&gt;GetClassLoaderOverride());\012 })<SUB>232</SUB>> ]
+"187" [label = <(UNKNOWN,if (method != nullptr) {\012 return method-&gt;GetDeclaringClass()-&gt;GetClassLoader();\012 },if (method != nullptr) {\012 return method-&gt;GetDeclaringClass()-&gt;GetClassLoader();\012 })<SUB>237</SUB>> ]
+"189" [label = <(&lt;operator&gt;.assignment,class_loader =\012      soa.Decode&lt;mirror::ClassLoader&gt;(Runtime::Current()-&gt;GetSystemClassLoader()))<SUB>241</SUB>> ]
+"206" [label = <(UNKNOWN,if (class_loader != nullptr) {\012 return class_loader;\012 },if (class_loader != nullptr) {\012 return class_loader;\012 })<SUB>243</SUB>> ]
+"207" [label = <(UNKNOWN,class_loader = soa.Decode&lt;mirror::ClassLoader&gt;(soa.Self()-&gt;GetClassLoaderOverride());,class_loader = soa.Decode&lt;mirror::ClassLoader&gt;(soa.Self()-&gt;GetClassLoaderOverride());)<SUB>247</SUB>> ]
+"208" [label = <(UNKNOWN,if (class_loader != nullptr) {\012 // If so, CommonCompilerTest should have marked the runtime as a compiler not compiling an\012 // image.\012    CHECK(Runtime::Current()-&gt;IsAotCompiler());\012    CHECK(!Runtime::Current()-&gt;IsCompilingBootImage());\012 return class_loader;\012 },if (class_loader != nullptr) {\012 // If so, CommonCompilerTest should have marked the runtime as a compiler not compiling an\012 // image.\012    CHECK(Runtime::Current()-&gt;IsAotCompiler());\012    CHECK(!Runtime::Current()-&gt;IsCompilingBootImage());\012 return class_loader;\012 })<SUB>248</SUB>> ]
+"209" [label = <(UNKNOWN,return nullptr;,return nullptr;)<SUB>256</SUB>> ]
+"210" [label = <(UNKNOWN,},})<SUB>257</SUB>> ]
+"220" [label = <(UNKNOWN,),))<SUB>261</SUB>> ]
+"221" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012 return jni::EncodeArtField&lt;kEnableIndexIds&gt;(FindFieldJNI(soa, jni_class, name, sig, is_static));,REQUIRES_SHARED(Locks::mutator_lock_) {\012 return jni::EncodeArtField&lt;kEnableIndexIds&gt;(FindFieldJNI(soa, jni_class, name, sig, is_static));)<SUB>262</SUB>> ]
+"222" [label = <(UNKNOWN,},})<SUB>264</SUB>> ]
+"232" [label = <(UNKNOWN,),))<SUB>270</SUB>> ]
+"233" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012  std::string type(array-&gt;PrettyTypeOf());,REQUIRES_SHARED(Locks::mutator_lock_) {\012  std::string type(array-&gt;PrettyTypeOf());)<SUB>271</SUB>> ]
+"234" [label = <(UNKNOWN,soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/ArrayIndexOutOfBoundsException;&quot;,\012 &quot;%s offset=%d length=%d %s.length=%d&quot;,\012                                 type.c_str(), start, length, identifier, array-&gt;GetLength());,soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/ArrayIndexOutOfBoundsException;&quot;,\012 &quot;%s offset=%d length=%d %s.length=%d&quot;,\012                                 type.c_str(), start, length, identifier, array-&gt;GetLength());)<SUB>273</SUB>> ]
+"235" [label = <(UNKNOWN,},})<SUB>276</SUB>> ]
+"244" [label = <(UNKNOWN,),))<SUB>279</SUB>> ]
+"245" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012  soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/StringIndexOutOfBoundsException;&quot;,\012 &quot;offset=%d length=%d string.length()=%d&quot;, start, length,\012                                 array_length);,REQUIRES_SHARED(Locks::mutator_lock_) {\012  soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/StringIndexOutOfBoundsException;&quot;,\012 &quot;offset=%d length=%d string.length()=%d&quot;, start, length,\012                                 array_length);)<SUB>280</SUB>> ]
+"246" [label = <(UNKNOWN,},})<SUB>284</SUB>> ]
+"256" [label = <(UNKNOWN,),))<SUB>290</SUB>> ]
+"257" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012  std::string temp;,REQUIRES_SHARED(Locks::mutator_lock_) {\012  std::string temp;)<SUB>291</SUB>> ]
+"258" [label = <(UNKNOWN,soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/NoSuchMethodError;&quot;,\012 &quot;no %s method \&quot;%s.%s%s\&quot;&quot;,\012                                 kind,\012                                 c-&gt;GetDescriptor(&amp;temp),\012                                 name,\012                                 sig);,soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/NoSuchMethodError;&quot;,\012 &quot;no %s method \&quot;%s.%s%s\&quot;&quot;,\012                                 kind,\012                                 c-&gt;GetDescriptor(&amp;temp),\012                                 name,\012                                 sig);)<SUB>293</SUB>> ]
+"259" [label = <(UNKNOWN,},})<SUB>299</SUB>> ]
+"266" [label = <(UNKNOWN,),))<SUB>301</SUB>> ]
+"267" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012 if (LIKELY(klass-&gt;IsInitialized())) {\012 return klass;\012 },REQUIRES_SHARED(Locks::mutator_lock_) {\012 if (LIKELY(klass-&gt;IsInitialized())) {\012 return klass;\012 })<SUB>302</SUB>> ]
+"274" [label = <(h_klass,h_klass(hs.NewHandle(klass)))<SUB>307</SUB>> ]
+"280" [label = <(UNKNOWN,if (!Runtime::Current()-&gt;GetClassLinker()-&gt;EnsureInitialized(self, h_klass, true, true)) {\012 return nullptr;\012 },if (!Runtime::Current()-&gt;GetClassLinker()-&gt;EnsureInitialized(self, h_klass, true, true)) {\012 return nullptr;\012 })<SUB>308</SUB>> ]
+"281" [label = <(UNKNOWN,return h_klass.Get();,return h_klass.Get();)<SUB>311</SUB>> ]
+"282" [label = <(UNKNOWN,},})<SUB>312</SUB>> ]
+"716" [label = <(UNKNOWN,),))<SUB>397</SUB>> ]
+"717" [label = <(UNKNOWN,REQUIRES(!Locks::mutator_lock_) {\012 // Turn the const char* into a java.lang.String.\012 ScopedLocalRef&lt;jstring&gt; s(env, env-&gt;NewStringUTF(msg));\012 if (msg != nullptr &amp;&amp; s.get() == nullptr) {\012 return JNI_ERR;\012 }\012\012 // Choose an appropriate constructor and set up the arguments.\012  jvalue args[2];\012 const char* signature;\012 if (msg == nullptr &amp;&amp; cause == nullptr) {\012    signature = &quot;()V&quot;;\012 } else if (msg != nullptr &amp;&amp; cause == nullptr) {\012    signature = &quot;(Ljava/lang/String;)V&quot;;\012    args[0].l = s.get();\012 } else if (msg == nullptr &amp;&amp; cause != nullptr) {\012    signature = &quot;(Ljava/lang/Throwable;)V&quot;;\012    args[0].l = cause;\012 } else {\012    signature = &quot;(Ljava/lang/String;Ljava/lang/Throwable;)V&quot;;\012    args[0].l = s.get();\012    args[1].l = cause;\012 }\012  jmethodID mid = env-&gt;GetMethodID(exception_class, &quot;&lt;init&gt;&quot;, signature);\012 if (mid == nullptr) {\012 ScopedObjectAccess soa(env);\012    LOG(ERROR) &lt;&lt; &quot;No &lt;init&gt;&quot; &lt;&lt; signature &lt;&lt; &quot; in &quot;\012 &lt;&lt; mirror::Class::PrettyClass(soa.Decode&lt;mirror::Class&gt;(exception_class));\012 return JNI_ERR;\012 }\012\012 ScopedLocalRef&lt;jthrowable&gt; exception(\012      env, reinterpret_cast&lt;jthrowable&gt;(env-&gt;NewObjectA(exception_class, mid, args)));\012 if (exception.get() == nullptr) {\012 return JNI_ERR;\012 }\012 ScopedObjectAccess soa(env);\012  soa.Self()-&gt;SetException(soa.Decode&lt;mirror::Throwable&gt;(exception.get()));\012 return JNI_OK;\012},REQUIRES(!Locks::mutator_lock_) {\012 // Turn the const char* into a java.lang.String.\012 ScopedLocalRef&lt;jstring&gt; s(env, env-&gt;NewStringUTF(msg));\012 if (msg != nullptr &amp;&amp; s.get() == nullptr) {\012 return JNI_ERR;\012 }\012\012 // Choose an appropriate constructor and set up the arguments.\012  jvalue args[2];\012 const char* signature;\012 if (msg == nullptr &amp;&amp; cause == nullptr) {\012    signature = &quot;()V&quot;;\012 } else if (msg != nullptr &amp;&amp; cause == nullptr) {\012    signature = &quot;(Ljava/lang/String;)V&quot;;\012    args[0].l = s.get();\012 } else if (msg == nullptr &amp;&amp; cause != nullptr) {\012    signature = &quot;(Ljava/lang/Throwable;)V&quot;;\012    args[0].l = cause;\012 } else {\012    signature = &quot;(Ljava/lang/String;Ljava/lang/Throwable;)V&quot;;\012    args[0].l = s.get();\012    args[1].l = cause;\012 }\012  jmethodID mid = env-&gt;GetMethodID(exception_class, &quot;&lt;init&gt;&quot;, signature);\012 if (mid == nullptr) {\012 ScopedObjectAccess soa(env);\012    LOG(ERROR) &lt;&lt; &quot;No &lt;init&gt;&quot; &lt;&lt; signature &lt;&lt; &quot; in &quot;\012 &lt;&lt; mirror::Class::PrettyClass(soa.Decode&lt;mirror::Class&gt;(exception_class));\012 return JNI_ERR;\012 }\012\012 ScopedLocalRef&lt;jthrowable&gt; exception(\012      env, reinterpret_cast&lt;jthrowable&gt;(env-&gt;NewObjectA(exception_class, mid, args)));\012 if (exception.get() == nullptr) {\012 return JNI_ERR;\012 }\012 ScopedObjectAccess soa(env);\012  soa.Self()-&gt;SetException(soa.Decode&lt;mirror::Throwable&gt;(exception.get()));\012 return JNI_OK;\012})<SUB>398</SUB>> ]
+"737" [label = <(UNKNOWN,),))<SUB>470</SUB>> ]
+"738" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012 auto pointer_size = Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize();,REQUIRES_SHARED(Locks::mutator_lock_) {\012 auto pointer_size = Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize();)<SUB>471</SUB>> ]
+"739" [label = <(UNKNOWN,for (auto&amp; method : c-&gt;GetMethods(pointer_size)) {\012 if (kNative == method.IsNative() &amp;&amp; name == method.GetName() &amp;&amp; method.GetSignature() == sig) {\012 return &amp;method;\012 }\012 },for (auto&amp; method : c-&gt;GetMethods(pointer_size)) {\012 if (kNative == method.IsNative() &amp;&amp; name == method.GetName() &amp;&amp; method.GetSignature() == sig) {\012 return &amp;method;\012 }\012 })<SUB>473</SUB>> ]
+"740" [label = <(UNKNOWN,return nullptr;,return nullptr;)<SUB>478</SUB>> ]
+"741" [label = <(UNKNOWN,},})<SUB>479</SUB>> ]
+"13413" [label = <(UNKNOWN,},})<SUB>2570</SUB>> ]
+"13469" [label = <(UNKNOWN,),))<SUB>2587</SUB>> ]
+"13470" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012 ObjPtr&lt;ArtArrayT&gt; array = soa.Decode&lt;ArtArrayT&gt;(java_array);,REQUIRES_SHARED(Locks::mutator_lock_) {\012 ObjPtr&lt;ArtArrayT&gt; array = soa.Decode&lt;ArtArrayT&gt;(java_array);)<SUB>2588</SUB>> ]
+"13472" [label = <(&lt;operator&gt;.assignment,expected_array_class = GetClassRoot&lt;ArtArrayT&gt;())<SUB>2590</SUB>> ]
+"13475" [label = <(UNKNOWN,if (UNLIKELY(expected_array_class != array-&gt;GetClass())) {\012      soa.Vm()-&gt;JniAbortF(fn_name,\012 &quot;attempt to %s %s primitive array elements with an object of type %s&quot;,\012                          operation,\012                          mirror::Class::PrettyDescriptor(\012                              expected_array_class-&gt;GetComponentType()).c_str(),\012                          mirror::Class::PrettyDescriptor(array-&gt;GetClass()).c_str());\012 return nullptr;\012 },if (UNLIKELY(expected_array_class != array-&gt;GetClass())) {\012      soa.Vm()-&gt;JniAbortF(fn_name,\012 &quot;attempt to %s %s primitive array elements with an object of type %s&quot;,\012                          operation,\012                          mirror::Class::PrettyDescriptor(\012                              expected_array_class-&gt;GetComponentType()).c_str(),\012                          mirror::Class::PrettyDescriptor(array-&gt;GetClass()).c_str());\012 return nullptr;\012 })<SUB>2591</SUB>> ]
+"13476" [label = <(UNKNOWN,DCHECK_EQ(sizeof(ElementT), array-&gt;GetClass()-&gt;GetComponentSize());,DCHECK_EQ(sizeof(ElementT), array-&gt;GetClass()-&gt;GetComponentSize());)<SUB>2600</SUB>> ]
+"13477" [label = <(UNKNOWN,return array;,return array;)<SUB>2601</SUB>> ]
+"13478" [label = <(UNKNOWN,},})<SUB>2602</SUB>> ]
+"13651" [label = <(UNKNOWN,),))<SUB>2647</SUB>> ]
+"13652" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012 void* array_data = array-&gt;GetRawData(component_size, 0);,REQUIRES_SHARED(Locks::mutator_lock_) {\012 void* array_data = array-&gt;GetRawData(component_size, 0);)<SUB>2648</SUB>> ]
+"13654" [label = <(&lt;operator&gt;.assignment,* heap = Runtime::Current()-&gt;GetHeap())<SUB>2650</SUB>> ]
+"13664" [label = <(&lt;operator&gt;.assignment,is_copy = array_data != elements)<SUB>2651</SUB>> ]
+"13670" [label = <(&lt;operator&gt;.assignment,bytes = array-&gt;GetLength() * component_size)<SUB>2652</SUB>> ]
+"13678" [label = <(UNKNOWN,if (is_copy) {\012 // Sanity check: If elements is not the same as the java array's data, it better not be a\012 // heap address. TODO: This might be slow to check, may be worth keeping track of which\012 // copies we make?\012 if (heap-&gt;IsNonDiscontinuousSpaceHeapAddress(elements)) {\012        soa.Vm()-&gt;JniAbortF(&quot;ReleaseArrayElements&quot;,\012 &quot;invalid element pointer %p, array elements are %p&quot;,\012 reinterpret_cast&lt;void*&gt;(elements), array_data);\012 return;\012 }\012 if (mode != JNI_ABORT) {\012        memcpy(array_data, elements, bytes);\012 } else if (kWarnJniAbort &amp;&amp; memcmp(array_data, elements, bytes) != 0) {\012 // Warn if we have JNI_ABORT and the arrays don't match since this is usually an error.\012        LOG(WARNING) &lt;&lt; &quot;Possible incorrect JNI_ABORT in Release*ArrayElements&quot;;\012        soa.Self()-&gt;DumpJavaStack(LOG_STREAM(WARNING));\012 }\012 },if (is_copy) {\012 // Sanity check: If elements is not the same as the java array's data, it better not be a\012 // heap address. TODO: This might be slow to check, may be worth keeping track of which\012 // copies we make?\012 if (heap-&gt;IsNonDiscontinuousSpaceHeapAddress(elements)) {\012        soa.Vm()-&gt;JniAbortF(&quot;ReleaseArrayElements&quot;,\012 &quot;invalid element pointer %p, array elements are %p&quot;,\012 reinterpret_cast&lt;void*&gt;(elements), array_data);\012 return;\012 }\012 if (mode != JNI_ABORT) {\012        memcpy(array_data, elements, bytes);\012 } else if (kWarnJniAbort &amp;&amp; memcmp(array_data, elements, bytes) != 0) {\012 // Warn if we have JNI_ABORT and the arrays don't match since this is usually an error.\012        LOG(WARNING) &lt;&lt; &quot;Possible incorrect JNI_ABORT in Release*ArrayElements&quot;;\012        soa.Self()-&gt;DumpJavaStack(LOG_STREAM(WARNING));\012 }\012 })<SUB>2653</SUB>> ]
+"13679" [label = <(UNKNOWN,if (mode != JNI_COMMIT) {\012 if (is_copy) {\012 delete[] reinterpret_cast&lt;uint64_t*&gt;(elements);\012 } else if (heap-&gt;IsMovableObject(array)) {\012 // Non copy to a movable object must means that we had disabled the moving GC.\012 if (!kUseReadBarrier) {\012          heap-&gt;DecrementDisableMovingGC(soa.Self());\012 } else {\012          heap-&gt;DecrementDisableThreadFlip(soa.Self());\012 }\012 }\012 },if (mode != JNI_COMMIT) {\012 if (is_copy) {\012 delete[] reinterpret_cast&lt;uint64_t*&gt;(elements);\012 } else if (heap-&gt;IsMovableObject(array)) {\012 // Non copy to a movable object must means that we had disabled the moving GC.\012 if (!kUseReadBarrier) {\012          heap-&gt;DecrementDisableMovingGC(soa.Self());\012 } else {\012          heap-&gt;DecrementDisableThreadFlip(soa.Self());\012 }\012 }\012 })<SUB>2671</SUB>> ]
+"13680" [label = <(UNKNOWN,},})<SUB>2683</SUB>> ]
+"13893" [label = <(UNKNOWN,};,};)<SUB>2720</SUB>> ]
+"14624" [label = <(&lt;operator&gt;.assignment,(*gJniSleepForeverStub[])() = {\012 nullptr, // reserved0.\012 nullptr, // reserved1.\012 nullptr, // reserved2.\012 nullptr, // reserved3.\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012})<SUB>2971</SUB>> ]
+"14869" [label = <(UNKNOWN,},})<SUB>3211</SUB>> ]
+"34" [label = <(&lt;operator&gt;.assignment,kWarnJniAbort = false)<SUB>85</SUB>> ]
+"37" [label = <(UNKNOWN,template&lt;typename T&gt;\012ALWAYS_INLINE static bool ShouldDenyAccessToMember(T* member, Thread* self)\012    REQUIRES_SHARED(Locks::mutator_lock_) {\012 return hiddenapi::ShouldDenyAccessToMember(\012      member,\012 [&amp;]() REQUIRES_SHARED(Locks::mutator_lock_) {\012 // Construct AccessContext from the first calling class on stack.\012 // If the calling class cannot be determined, e.g. unattached threads,\012 // we conservatively assume the caller is trusted.\012 ObjPtr&lt;mirror::Class&gt; caller = GetCallingClass(self, /* num_frames */ 1);\012 return caller.IsNull() ? hiddenapi::AccessContext(/* is_trusted= */ true)\012 : hiddenapi::AccessContext(caller);\012 },\012      hiddenapi::AccessMethod::kJNI);\012},template&lt;typename T&gt;\012ALWAYS_INLINE static bool ShouldDenyAccessToMember(T* member, Thread* self)\012    REQUIRES_SHARED(Locks::mutator_lock_) {\012 return hiddenapi::ShouldDenyAccessToMember(\012      member,\012 [&amp;]() REQUIRES_SHARED(Locks::mutator_lock_) {\012 // Construct AccessContext from the first calling class on stack.\012 // If the calling class cannot be determined, e.g. unattached threads,\012 // we conservatively assume the caller is trusted.\012 ObjPtr&lt;mirror::Class&gt; caller = GetCallingClass(self, /* num_frames */ 1);\012 return caller.IsNull() ? hiddenapi::AccessContext(/* is_trusted= */ true)\012 : hiddenapi::AccessContext(caller);\012 },\012      hiddenapi::AccessMethod::kJNI);\012})<SUB>87</SUB>> ]
+"45" [label = <(UNKNOWN,),))<SUB>106</SUB>> ]
+"46" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012  DCHECK_EQ(field-&gt;GetTypeAsPrimitiveType(), Primitive::kPrimNot);,REQUIRES_SHARED(Locks::mutator_lock_) {\012  DCHECK_EQ(field-&gt;GetTypeAsPrimitiveType(), Primitive::kPrimNot);)<SUB>107</SUB>> ]
+"48" [label = <(&lt;operator&gt;.assignment,* instrumentation = Runtime::Current()-&gt;GetInstrumentation())<SUB>109</SUB>> ]
+"57" [label = <(UNKNOWN,if (UNLIKELY(instrumentation-&gt;HasFieldWriteListeners())) {\012 Thread* self = Thread::Current();\012 ArtMethod* cur_method = self-&gt;GetCurrentMethod(/*dex_pc=*/ nullptr,\012 /*check_suspended=*/ true,\012 /*abort_on_error=*/ false);\012\012 if (cur_method == nullptr) {\012 // Set/Get Fields can be issued without a method during runtime startup/teardown. Ignore all\012 // of these changes.\012 return;\012 }\012    DCHECK(cur_method-&gt;IsNative());\012 JValue val;\012    val.SetL(self-&gt;DecodeJObject(jval));\012    instrumentation-&gt;FieldWriteEvent(self,\012                                     self-&gt;DecodeJObject(obj),\012                                     cur_method,\012 0, // dex_pc is always 0 since this is a native method.\012                                     field,\012                                     val);\012 },if (UNLIKELY(instrumentation-&gt;HasFieldWriteListeners())) {\012 Thread* self = Thread::Current();\012 ArtMethod* cur_method = self-&gt;GetCurrentMethod(/*dex_pc=*/ nullptr,\012 /*check_suspended=*/ true,\012 /*abort_on_error=*/ false);\012\012 if (cur_method == nullptr) {\012 // Set/Get Fields can be issued without a method during runtime startup/teardown. Ignore all\012 // of these changes.\012 return;\012 }\012    DCHECK(cur_method-&gt;IsNative());\012 JValue val;\012    val.SetL(self-&gt;DecodeJObject(jval));\012    instrumentation-&gt;FieldWriteEvent(self,\012                                     self-&gt;DecodeJObject(obj),\012                                     cur_method,\012 0, // dex_pc is always 0 since this is a native method.\012                                     field,\012                                     val);\012 })<SUB>110</SUB>> ]
+"70" [label = <(GetInstrumentation,Runtime::Current()-&gt;GetInstrumentation())<SUB>136</SUB>> ]
+"191" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::ClassLoader&gt;(Runtime::Current()-&gt;GetSystemClassLoader()))<SUB>242</SUB>> ]
+"275" [label = <(NewHandle,hs.NewHandle(klass))<SUB>307</SUB>> ]
+"13474" [label = <(GetClassRoot&lt;ArtArrayT&gt;,GetClassRoot&lt;ArtArrayT&gt;())<SUB>2590</SUB>> ]
+"13656" [label = <(GetHeap,Runtime::Current()-&gt;GetHeap())<SUB>2650</SUB>> ]
+"13666" [label = <(&lt;operator&gt;.notEquals,array_data != elements)<SUB>2651</SUB>> ]
+"13672" [label = <(&lt;operator&gt;.multiplication,array-&gt;GetLength() * component_size)<SUB>2652</SUB>> ]
+"14626" [label = <(&lt;operator&gt;.arrayInitializer,{\012 nullptr, // reserved0.\012 nullptr, // reserved1.\012 nullptr, // reserved2.\012 nullptr, // reserved3.\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012})<SUB>2971</SUB>> ]
+"50" [label = <(GetInstrumentation,Runtime::Current()-&gt;GetInstrumentation())<SUB>109</SUB>> ]
+"71" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetInstrumentation)<SUB>136</SUB>> ]
+"192" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::ClassLoader)<SUB>242</SUB>> ]
+"199" [label = <(GetSystemClassLoader,Runtime::Current()-&gt;GetSystemClassLoader())<SUB>242</SUB>> ]
+"276" [label = <(&lt;operator&gt;.fieldAccess,hs.NewHandle)<SUB>307</SUB>> ]
+"13657" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetHeap)<SUB>2650</SUB>> ]
+"13673" [label = <(GetLength,array-&gt;GetLength())<SUB>2652</SUB>> ]
+"51" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetInstrumentation)<SUB>109</SUB>> ]
+"72" [label = <(Runtime::Current,Runtime::Current())<SUB>136</SUB>> ]
+"76" [label = <(FIELD_IDENTIFIER,GetInstrumentation,GetInstrumentation)<SUB>136</SUB>> ]
+"193" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>242</SUB>> ]
+"196" [label = <(&lt;operator&gt;.fieldAccess,mirror::ClassLoader)<SUB>242</SUB>> ]
+"200" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetSystemClassLoader)<SUB>242</SUB>> ]
+"278" [label = <(FIELD_IDENTIFIER,NewHandle,NewHandle)<SUB>307</SUB>> ]
+"13658" [label = <(Runtime::Current,Runtime::Current())<SUB>2650</SUB>> ]
+"13662" [label = <(FIELD_IDENTIFIER,GetHeap,GetHeap)<SUB>2650</SUB>> ]
+"13674" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetLength)<SUB>2652</SUB>> ]
+"52" [label = <(Runtime::Current,Runtime::Current())<SUB>109</SUB>> ]
+"56" [label = <(FIELD_IDENTIFIER,GetInstrumentation,GetInstrumentation)<SUB>109</SUB>> ]
+"73" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>136</SUB>> ]
+"195" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>242</SUB>> ]
+"198" [label = <(FIELD_IDENTIFIER,ClassLoader,ClassLoader)<SUB>242</SUB>> ]
+"201" [label = <(Runtime::Current,Runtime::Current())<SUB>242</SUB>> ]
+"205" [label = <(FIELD_IDENTIFIER,GetSystemClassLoader,GetSystemClassLoader)<SUB>242</SUB>> ]
+"13659" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>2650</SUB>> ]
+"13676" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>2652</SUB>> ]
+"53" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>109</SUB>> ]
+"75" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>136</SUB>> ]
+"202" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>242</SUB>> ]
+"13661" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>2650</SUB>> ]
+"55" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>109</SUB>> ]
+"204" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>242</SUB>> ]
+"5" [label = <(METHOD,&lt;global&gt;)<SUB>1</SUB>> ]
+"14919" [label = <(METHOD_RETURN,ANY)<SUB>1</SUB>> ]
+  "65" -> "66" 
+  "66" -> "75" 
+  "68" -> "77" 
+  "77" -> "78" 
+  "78" -> "85" 
+  "85" -> "86" 
+  "86" -> "87" 
+  "87" -> "88" 
+  "88" -> "163" 
+  "163" -> "164" 
+  "164" -> "165" 
+  "165" -> "166" 
+  "166" -> "176" 
+  "176" -> "177" 
+  "177" -> "178" 
+  "178" -> "184" 
+  "184" -> "185" 
+  "185" -> "186" 
+  "186" -> "187" 
+  "187" -> "195" 
+  "189" -> "206" 
+  "206" -> "207" 
+  "207" -> "208" 
+  "208" -> "209" 
+  "209" -> "210" 
+  "210" -> "220" 
+  "220" -> "221" 
+  "221" -> "222" 
+  "222" -> "232" 
+  "232" -> "233" 
+  "233" -> "234" 
+  "234" -> "235" 
+  "235" -> "244" 
+  "244" -> "245" 
+  "245" -> "246" 
+  "246" -> "256" 
+  "256" -> "257" 
+  "257" -> "258" 
+  "258" -> "259" 
+  "259" -> "266" 
+  "266" -> "267" 
+  "267" -> "278" 
+  "274" -> "280" 
+  "280" -> "281" 
+  "281" -> "282" 
+  "282" -> "716" 
+  "716" -> "717" 
+  "717" -> "737" 
+  "737" -> "738" 
+  "738" -> "739" 
+  "739" -> "740" 
+  "740" -> "741" 
+  "741" -> "13413" 
+  "13413" -> "13469" 
+  "13469" -> "13470" 
+  "13470" -> "13474" 
+  "13472" -> "13475" 
+  "13475" -> "13476" 
+  "13476" -> "13477" 
+  "13477" -> "13478" 
+  "13478" -> "13651" 
+  "13651" -> "13652" 
+  "13652" -> "13661" 
+  "13654" -> "13666" 
+  "13664" -> "13676" 
+  "13670" -> "13678" 
+  "13678" -> "13679" 
+  "13679" -> "13680" 
+  "13680" -> "13893" 
+  "13893" -> "14626" 
+  "14624" -> "14869" 
+  "14869" -> "14919" 
+  "34" -> "37" 
+  "37" -> "45" 
+  "45" -> "46" 
+  "46" -> "55" 
+  "48" -> "57" 
+  "57" -> "65" 
+  "70" -> "68" 
+  "191" -> "189" 
+  "275" -> "274" 
+  "13474" -> "13472" 
+  "13656" -> "13654" 
+  "13666" -> "13664" 
+  "13672" -> "13670" 
+  "14626" -> "14624" 
+  "50" -> "48" 
+  "71" -> "70" 
+  "192" -> "204" 
+  "199" -> "191" 
+  "276" -> "275" 
+  "13657" -> "13656" 
+  "13673" -> "13672" 
+  "51" -> "50" 
+  "72" -> "76" 
+  "76" -> "71" 
+  "193" -> "198" 
+  "196" -> "192" 
+  "200" -> "199" 
+  "278" -> "276" 
+  "13658" -> "13662" 
+  "13662" -> "13657" 
+  "13674" -> "13673" 
+  "52" -> "56" 
+  "56" -> "51" 
+  "73" -> "72" 
+  "195" -> "193" 
+  "198" -> "196" 
+  "201" -> "205" 
+  "205" -> "200" 
+  "13659" -> "13658" 
+  "13676" -> "13674" 
+  "53" -> "52" 
+  "75" -> "73" 
+  "202" -> "201" 
+  "13661" -> "13659" 
+  "55" -> "53" 
+  "204" -> "202" 
+  "5" -> "34" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/1-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/1-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/1-cfg.dot	2023-06-07 19:35:01.187387193 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/1-cfg.dot	2023-06-07 19:35:07.897386528 +0330
@@ -1,5 +1,5 @@
-digraph "anonymous_lambda_9" {  
-"8" [label = <(METHOD,anonymous_lambda_9)<SUB>1932</SUB>> ]
-"12" [label = <(METHOD_RETURN,ANY)<SUB>1932</SUB>> ]
-  "8" -> "12" 
+digraph "ScopedVAArgs" {  
+"9" [label = <(METHOD,ScopedVAArgs)<SUB>70</SUB>> ]
+"12" [label = <(METHOD_RETURN,ANY)<SUB>70</SUB>> ]
+  "9" -> "12" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/10-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/10-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/10-cfg.dot	2023-06-07 19:35:01.337387177 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/10-cfg.dot	2023-06-07 19:35:07.907386529 +0330
@@ -1,5 +1,5 @@
-digraph "NotifySetPrimitiveField" {  
-"252" [label = <(METHOD,NotifySetPrimitiveField)<SUB>211</SUB>> ]
-"257" [label = <(METHOD_RETURN,void)<SUB>211</SUB>> ]
-  "252" -> "257" 
+digraph "FindMethodID" {  
+"167" [label = <(METHOD,FindMethodID)<SUB>221</SUB>> ]
+"174" [label = <(METHOD_RETURN,jmethodID)<SUB>221</SUB>> ]
+  "167" -> "174" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/100-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/100-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/100-cfg.dot	2023-06-07 19:35:01.447387166 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/100-cfg.dot	2023-06-07 19:35:07.997386519 +0330
@@ -1,61 +1,53 @@
-digraph "CallNonvirtualCharMethod" {  
-"5333" [label = <(va_start,va_start(ap, mid))<SUB>1252</SUB>> ]
-"5337" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1253</SUB>> ]
-"5340" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1254</SUB>> ]
-"5358" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1255</SUB>> ]
-"5377" [label = <(soa,soa(env))<SUB>1256</SUB>> ]
-"5380" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, ap)))<SUB>1257</SUB>> ]
-"5386" [label = <(RETURN,return result.GetC();,return result.GetC();)<SUB>1258</SUB>> ]
-"5338" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1253</SUB>> ]
-"5381" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1257</SUB>> ]
-"5387" [label = <(GetC,result.GetC())<SUB>1258</SUB>> ]
-"5388" [label = <(&lt;operator&gt;.fieldAccess,result.GetC)<SUB>1258</SUB>> ]
-"5344" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1254</SUB>> ]
-"5362" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1255</SUB>> ]
-"5390" [label = <(FIELD_IDENTIFIER,GetC,GetC)<SUB>1258</SUB>> ]
-"5345" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1254</SUB>> ]
-"5349" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1254</SUB>> ]
-"5356" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1254</SUB>> ]
-"5363" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1255</SUB>> ]
-"5367" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1255</SUB>> ]
-"5374" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1255</SUB>> ]
-"5350" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1254</SUB>> ]
-"5368" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1255</SUB>> ]
-"5351" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1254</SUB>> ]
-"5353" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1254</SUB>> ]
-"5369" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1255</SUB>> ]
-"5371" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1255</SUB>> ]
-"5326" [label = <(METHOD,CallNonvirtualCharMethod)<SUB>1250</SUB>> ]
-"5391" [label = <(METHOD_RETURN,jchar)<SUB>1250</SUB>> ]
-  "5333" -> "5338" 
-  "5337" -> "5340" 
-  "5340" -> "5345" 
-  "5340" -> "5358" 
-  "5358" -> "5363" 
-  "5358" -> "5377" 
-  "5377" -> "5381" 
-  "5380" -> "5390" 
-  "5386" -> "5391" 
-  "5338" -> "5337" 
-  "5381" -> "5380" 
-  "5387" -> "5386" 
-  "5388" -> "5387" 
-  "5344" -> "5351" 
-  "5344" -> "5358" 
-  "5362" -> "5369" 
-  "5362" -> "5377" 
-  "5390" -> "5388" 
-  "5345" -> "5344" 
-  "5349" -> "5356" 
-  "5356" -> "5391" 
-  "5363" -> "5362" 
-  "5367" -> "5374" 
-  "5374" -> "5391" 
-  "5350" -> "5349" 
-  "5368" -> "5367" 
-  "5351" -> "5353" 
-  "5353" -> "5350" 
-  "5369" -> "5371" 
-  "5371" -> "5368" 
-  "5326" -> "5333" 
+digraph "CallNonvirtualShortMethodV" {  
+"5388" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1212</SUB>> ]
+"5406" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1213</SUB>> ]
+"5425" [label = <(soa,soa(env))<SUB>1214</SUB>> ]
+"5427" [label = <(RETURN,return InvokeWithVarArgs(soa, obj, mid, args).GetS();,return InvokeWithVarArgs(soa, obj, mid, args).GetS();)<SUB>1215</SUB>> ]
+"5428" [label = <(GetS,InvokeWithVarArgs(soa, obj, mid, args).GetS())<SUB>1215</SUB>> ]
+"5429" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, obj, mid, args).GetS)<SUB>1215</SUB>> ]
+"5392" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1212</SUB>> ]
+"5410" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1213</SUB>> ]
+"5430" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1215</SUB>> ]
+"5435" [label = <(FIELD_IDENTIFIER,GetS,GetS)<SUB>1215</SUB>> ]
+"5393" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1212</SUB>> ]
+"5397" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1212</SUB>> ]
+"5404" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1212</SUB>> ]
+"5411" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1213</SUB>> ]
+"5415" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1213</SUB>> ]
+"5422" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1213</SUB>> ]
+"5398" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1212</SUB>> ]
+"5416" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1213</SUB>> ]
+"5399" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1212</SUB>> ]
+"5401" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1212</SUB>> ]
+"5417" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1213</SUB>> ]
+"5419" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1213</SUB>> ]
+"5381" [label = <(METHOD,CallNonvirtualShortMethodV)<SUB>1210</SUB>> ]
+"5436" [label = <(METHOD_RETURN,jshort)<SUB>1210</SUB>> ]
+  "5388" -> "5393" 
+  "5388" -> "5406" 
+  "5406" -> "5411" 
+  "5406" -> "5425" 
+  "5425" -> "5430" 
+  "5427" -> "5436" 
+  "5428" -> "5427" 
+  "5429" -> "5428" 
+  "5392" -> "5399" 
+  "5392" -> "5406" 
+  "5410" -> "5417" 
+  "5410" -> "5425" 
+  "5430" -> "5435" 
+  "5435" -> "5429" 
+  "5393" -> "5392" 
+  "5397" -> "5404" 
+  "5404" -> "5436" 
+  "5411" -> "5410" 
+  "5415" -> "5422" 
+  "5422" -> "5436" 
+  "5398" -> "5397" 
+  "5416" -> "5415" 
+  "5399" -> "5401" 
+  "5401" -> "5398" 
+  "5417" -> "5419" 
+  "5419" -> "5416" 
+  "5381" -> "5388" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/101-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/101-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/101-cfg.dot	2023-06-07 19:35:01.447387166 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/101-cfg.dot	2023-06-07 19:35:07.997386519 +0330
@@ -1,53 +1,53 @@
-digraph "CallNonvirtualCharMethodV" {  
-"5400" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1263</SUB>> ]
-"5418" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1264</SUB>> ]
-"5437" [label = <(soa,soa(env))<SUB>1265</SUB>> ]
-"5439" [label = <(RETURN,return InvokeWithVarArgs(soa, obj, mid, args).GetC();,return InvokeWithVarArgs(soa, obj, mid, args).GetC();)<SUB>1266</SUB>> ]
-"5440" [label = <(GetC,InvokeWithVarArgs(soa, obj, mid, args).GetC())<SUB>1266</SUB>> ]
-"5441" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, obj, mid, args).GetC)<SUB>1266</SUB>> ]
-"5404" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1263</SUB>> ]
-"5422" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1264</SUB>> ]
-"5442" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1266</SUB>> ]
-"5447" [label = <(FIELD_IDENTIFIER,GetC,GetC)<SUB>1266</SUB>> ]
-"5405" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1263</SUB>> ]
-"5409" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1263</SUB>> ]
-"5416" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1263</SUB>> ]
-"5423" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1264</SUB>> ]
-"5427" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1264</SUB>> ]
-"5434" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1264</SUB>> ]
-"5410" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1263</SUB>> ]
-"5428" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1264</SUB>> ]
-"5411" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1263</SUB>> ]
-"5413" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1263</SUB>> ]
-"5429" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1264</SUB>> ]
-"5431" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1264</SUB>> ]
-"5393" [label = <(METHOD,CallNonvirtualCharMethodV)<SUB>1261</SUB>> ]
-"5448" [label = <(METHOD_RETURN,jchar)<SUB>1261</SUB>> ]
-  "5400" -> "5405" 
-  "5400" -> "5418" 
-  "5418" -> "5423" 
-  "5418" -> "5437" 
-  "5437" -> "5442" 
-  "5439" -> "5448" 
-  "5440" -> "5439" 
-  "5441" -> "5440" 
-  "5404" -> "5411" 
-  "5404" -> "5418" 
-  "5422" -> "5429" 
-  "5422" -> "5437" 
-  "5442" -> "5447" 
-  "5447" -> "5441" 
-  "5405" -> "5404" 
-  "5409" -> "5416" 
-  "5416" -> "5448" 
-  "5423" -> "5422" 
-  "5427" -> "5434" 
-  "5434" -> "5448" 
-  "5410" -> "5409" 
-  "5428" -> "5427" 
-  "5411" -> "5413" 
-  "5413" -> "5410" 
-  "5429" -> "5431" 
-  "5431" -> "5428" 
-  "5393" -> "5400" 
+digraph "CallNonvirtualShortMethodA" {  
+"5445" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1220</SUB>> ]
+"5463" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1221</SUB>> ]
+"5482" [label = <(soa,soa(env))<SUB>1222</SUB>> ]
+"5484" [label = <(RETURN,return InvokeWithJValues(soa, obj, mid, args).GetS();,return InvokeWithJValues(soa, obj, mid, args).GetS();)<SUB>1223</SUB>> ]
+"5485" [label = <(GetS,InvokeWithJValues(soa, obj, mid, args).GetS())<SUB>1223</SUB>> ]
+"5486" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, obj, mid, args).GetS)<SUB>1223</SUB>> ]
+"5449" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1220</SUB>> ]
+"5467" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1221</SUB>> ]
+"5487" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1223</SUB>> ]
+"5492" [label = <(FIELD_IDENTIFIER,GetS,GetS)<SUB>1223</SUB>> ]
+"5450" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1220</SUB>> ]
+"5454" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1220</SUB>> ]
+"5461" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1220</SUB>> ]
+"5468" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1221</SUB>> ]
+"5472" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1221</SUB>> ]
+"5479" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1221</SUB>> ]
+"5455" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1220</SUB>> ]
+"5473" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1221</SUB>> ]
+"5456" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1220</SUB>> ]
+"5458" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1220</SUB>> ]
+"5474" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1221</SUB>> ]
+"5476" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1221</SUB>> ]
+"5438" [label = <(METHOD,CallNonvirtualShortMethodA)<SUB>1218</SUB>> ]
+"5493" [label = <(METHOD_RETURN,jshort)<SUB>1218</SUB>> ]
+  "5445" -> "5450" 
+  "5445" -> "5463" 
+  "5463" -> "5468" 
+  "5463" -> "5482" 
+  "5482" -> "5487" 
+  "5484" -> "5493" 
+  "5485" -> "5484" 
+  "5486" -> "5485" 
+  "5449" -> "5456" 
+  "5449" -> "5463" 
+  "5467" -> "5474" 
+  "5467" -> "5482" 
+  "5487" -> "5492" 
+  "5492" -> "5486" 
+  "5450" -> "5449" 
+  "5454" -> "5461" 
+  "5461" -> "5493" 
+  "5468" -> "5467" 
+  "5472" -> "5479" 
+  "5479" -> "5493" 
+  "5455" -> "5454" 
+  "5473" -> "5472" 
+  "5456" -> "5458" 
+  "5458" -> "5455" 
+  "5474" -> "5476" 
+  "5476" -> "5473" 
+  "5438" -> "5445" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/102-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/102-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/102-cfg.dot	2023-06-07 19:35:01.447387166 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/102-cfg.dot	2023-06-07 19:35:07.997386519 +0330
@@ -1,53 +1,61 @@
-digraph "CallNonvirtualCharMethodA" {  
-"5457" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1271</SUB>> ]
-"5475" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1272</SUB>> ]
-"5494" [label = <(soa,soa(env))<SUB>1273</SUB>> ]
-"5496" [label = <(RETURN,return InvokeWithJValues(soa, obj, mid, args).GetC();,return InvokeWithJValues(soa, obj, mid, args).GetC();)<SUB>1274</SUB>> ]
-"5497" [label = <(GetC,InvokeWithJValues(soa, obj, mid, args).GetC())<SUB>1274</SUB>> ]
-"5498" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, obj, mid, args).GetC)<SUB>1274</SUB>> ]
-"5461" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1271</SUB>> ]
-"5479" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1272</SUB>> ]
-"5499" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1274</SUB>> ]
-"5504" [label = <(FIELD_IDENTIFIER,GetC,GetC)<SUB>1274</SUB>> ]
-"5462" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1271</SUB>> ]
-"5466" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1271</SUB>> ]
-"5473" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1271</SUB>> ]
-"5480" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1272</SUB>> ]
-"5484" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1272</SUB>> ]
-"5491" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1272</SUB>> ]
-"5467" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1271</SUB>> ]
-"5485" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1272</SUB>> ]
-"5468" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1271</SUB>> ]
-"5470" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1271</SUB>> ]
-"5486" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1272</SUB>> ]
-"5488" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1272</SUB>> ]
-"5450" [label = <(METHOD,CallNonvirtualCharMethodA)<SUB>1269</SUB>> ]
-"5505" [label = <(METHOD_RETURN,jchar)<SUB>1269</SUB>> ]
-  "5457" -> "5462" 
-  "5457" -> "5475" 
-  "5475" -> "5480" 
-  "5475" -> "5494" 
-  "5494" -> "5499" 
-  "5496" -> "5505" 
-  "5497" -> "5496" 
-  "5498" -> "5497" 
-  "5461" -> "5468" 
-  "5461" -> "5475" 
-  "5479" -> "5486" 
-  "5479" -> "5494" 
-  "5499" -> "5504" 
-  "5504" -> "5498" 
-  "5462" -> "5461" 
-  "5466" -> "5473" 
-  "5473" -> "5505" 
-  "5480" -> "5479" 
-  "5484" -> "5491" 
-  "5491" -> "5505" 
-  "5467" -> "5466" 
-  "5485" -> "5484" 
-  "5468" -> "5470" 
-  "5470" -> "5467" 
-  "5486" -> "5488" 
-  "5488" -> "5485" 
-  "5450" -> "5457" 
+digraph "CallNonvirtualIntMethod" {  
+"5502" [label = <(va_start,va_start(ap, mid))<SUB>1228</SUB>> ]
+"5506" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1229</SUB>> ]
+"5509" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1230</SUB>> ]
+"5527" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1231</SUB>> ]
+"5546" [label = <(soa,soa(env))<SUB>1232</SUB>> ]
+"5549" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, ap)))<SUB>1233</SUB>> ]
+"5555" [label = <(RETURN,return result.GetI();,return result.GetI();)<SUB>1234</SUB>> ]
+"5507" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1229</SUB>> ]
+"5550" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1233</SUB>> ]
+"5556" [label = <(GetI,result.GetI())<SUB>1234</SUB>> ]
+"5557" [label = <(&lt;operator&gt;.fieldAccess,result.GetI)<SUB>1234</SUB>> ]
+"5513" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1230</SUB>> ]
+"5531" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1231</SUB>> ]
+"5559" [label = <(FIELD_IDENTIFIER,GetI,GetI)<SUB>1234</SUB>> ]
+"5514" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1230</SUB>> ]
+"5518" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1230</SUB>> ]
+"5525" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1230</SUB>> ]
+"5532" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1231</SUB>> ]
+"5536" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1231</SUB>> ]
+"5543" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1231</SUB>> ]
+"5519" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1230</SUB>> ]
+"5537" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1231</SUB>> ]
+"5520" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1230</SUB>> ]
+"5522" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1230</SUB>> ]
+"5538" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1231</SUB>> ]
+"5540" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1231</SUB>> ]
+"5495" [label = <(METHOD,CallNonvirtualIntMethod)<SUB>1226</SUB>> ]
+"5560" [label = <(METHOD_RETURN,jint)<SUB>1226</SUB>> ]
+  "5502" -> "5507" 
+  "5506" -> "5509" 
+  "5509" -> "5514" 
+  "5509" -> "5527" 
+  "5527" -> "5532" 
+  "5527" -> "5546" 
+  "5546" -> "5550" 
+  "5549" -> "5559" 
+  "5555" -> "5560" 
+  "5507" -> "5506" 
+  "5550" -> "5549" 
+  "5556" -> "5555" 
+  "5557" -> "5556" 
+  "5513" -> "5520" 
+  "5513" -> "5527" 
+  "5531" -> "5538" 
+  "5531" -> "5546" 
+  "5559" -> "5557" 
+  "5514" -> "5513" 
+  "5518" -> "5525" 
+  "5525" -> "5560" 
+  "5532" -> "5531" 
+  "5536" -> "5543" 
+  "5543" -> "5560" 
+  "5519" -> "5518" 
+  "5537" -> "5536" 
+  "5520" -> "5522" 
+  "5522" -> "5519" 
+  "5538" -> "5540" 
+  "5540" -> "5537" 
+  "5495" -> "5502" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/103-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/103-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/103-cfg.dot	2023-06-07 19:35:01.447387166 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/103-cfg.dot	2023-06-07 19:35:07.997386519 +0330
@@ -1,61 +1,53 @@
-digraph "CallNonvirtualShortMethod" {  
-"5514" [label = <(va_start,va_start(ap, mid))<SUB>1279</SUB>> ]
-"5518" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1280</SUB>> ]
-"5521" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1281</SUB>> ]
-"5539" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1282</SUB>> ]
-"5558" [label = <(soa,soa(env))<SUB>1283</SUB>> ]
-"5561" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, ap)))<SUB>1284</SUB>> ]
-"5567" [label = <(RETURN,return result.GetS();,return result.GetS();)<SUB>1285</SUB>> ]
-"5519" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1280</SUB>> ]
-"5562" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1284</SUB>> ]
-"5568" [label = <(GetS,result.GetS())<SUB>1285</SUB>> ]
-"5569" [label = <(&lt;operator&gt;.fieldAccess,result.GetS)<SUB>1285</SUB>> ]
-"5525" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1281</SUB>> ]
-"5543" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1282</SUB>> ]
-"5571" [label = <(FIELD_IDENTIFIER,GetS,GetS)<SUB>1285</SUB>> ]
-"5526" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1281</SUB>> ]
-"5530" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1281</SUB>> ]
-"5537" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1281</SUB>> ]
-"5544" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1282</SUB>> ]
-"5548" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1282</SUB>> ]
-"5555" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1282</SUB>> ]
-"5531" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1281</SUB>> ]
-"5549" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1282</SUB>> ]
-"5532" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1281</SUB>> ]
-"5534" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1281</SUB>> ]
-"5550" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1282</SUB>> ]
-"5552" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1282</SUB>> ]
-"5507" [label = <(METHOD,CallNonvirtualShortMethod)<SUB>1277</SUB>> ]
-"5572" [label = <(METHOD_RETURN,jshort)<SUB>1277</SUB>> ]
-  "5514" -> "5519" 
-  "5518" -> "5521" 
-  "5521" -> "5526" 
-  "5521" -> "5539" 
-  "5539" -> "5544" 
-  "5539" -> "5558" 
-  "5558" -> "5562" 
-  "5561" -> "5571" 
-  "5567" -> "5572" 
-  "5519" -> "5518" 
-  "5562" -> "5561" 
-  "5568" -> "5567" 
-  "5569" -> "5568" 
-  "5525" -> "5532" 
-  "5525" -> "5539" 
-  "5543" -> "5550" 
-  "5543" -> "5558" 
-  "5571" -> "5569" 
-  "5526" -> "5525" 
-  "5530" -> "5537" 
-  "5537" -> "5572" 
-  "5544" -> "5543" 
-  "5548" -> "5555" 
-  "5555" -> "5572" 
-  "5531" -> "5530" 
-  "5549" -> "5548" 
-  "5532" -> "5534" 
-  "5534" -> "5531" 
-  "5550" -> "5552" 
-  "5552" -> "5549" 
-  "5507" -> "5514" 
+digraph "CallNonvirtualIntMethodV" {  
+"5569" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1239</SUB>> ]
+"5587" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1240</SUB>> ]
+"5606" [label = <(soa,soa(env))<SUB>1241</SUB>> ]
+"5608" [label = <(RETURN,return InvokeWithVarArgs(soa, obj, mid, args).GetI();,return InvokeWithVarArgs(soa, obj, mid, args).GetI();)<SUB>1242</SUB>> ]
+"5609" [label = <(GetI,InvokeWithVarArgs(soa, obj, mid, args).GetI())<SUB>1242</SUB>> ]
+"5610" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, obj, mid, args).GetI)<SUB>1242</SUB>> ]
+"5573" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1239</SUB>> ]
+"5591" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1240</SUB>> ]
+"5611" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1242</SUB>> ]
+"5616" [label = <(FIELD_IDENTIFIER,GetI,GetI)<SUB>1242</SUB>> ]
+"5574" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1239</SUB>> ]
+"5578" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1239</SUB>> ]
+"5585" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1239</SUB>> ]
+"5592" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1240</SUB>> ]
+"5596" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1240</SUB>> ]
+"5603" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1240</SUB>> ]
+"5579" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1239</SUB>> ]
+"5597" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1240</SUB>> ]
+"5580" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1239</SUB>> ]
+"5582" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1239</SUB>> ]
+"5598" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1240</SUB>> ]
+"5600" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1240</SUB>> ]
+"5562" [label = <(METHOD,CallNonvirtualIntMethodV)<SUB>1237</SUB>> ]
+"5617" [label = <(METHOD_RETURN,jint)<SUB>1237</SUB>> ]
+  "5569" -> "5574" 
+  "5569" -> "5587" 
+  "5587" -> "5592" 
+  "5587" -> "5606" 
+  "5606" -> "5611" 
+  "5608" -> "5617" 
+  "5609" -> "5608" 
+  "5610" -> "5609" 
+  "5573" -> "5580" 
+  "5573" -> "5587" 
+  "5591" -> "5598" 
+  "5591" -> "5606" 
+  "5611" -> "5616" 
+  "5616" -> "5610" 
+  "5574" -> "5573" 
+  "5578" -> "5585" 
+  "5585" -> "5617" 
+  "5592" -> "5591" 
+  "5596" -> "5603" 
+  "5603" -> "5617" 
+  "5579" -> "5578" 
+  "5597" -> "5596" 
+  "5580" -> "5582" 
+  "5582" -> "5579" 
+  "5598" -> "5600" 
+  "5600" -> "5597" 
+  "5562" -> "5569" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/104-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/104-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/104-cfg.dot	2023-06-07 19:35:01.447387166 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/104-cfg.dot	2023-06-07 19:35:07.997386519 +0330
@@ -1,53 +1,53 @@
-digraph "CallNonvirtualShortMethodV" {  
-"5581" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1290</SUB>> ]
-"5599" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1291</SUB>> ]
-"5618" [label = <(soa,soa(env))<SUB>1292</SUB>> ]
-"5620" [label = <(RETURN,return InvokeWithVarArgs(soa, obj, mid, args).GetS();,return InvokeWithVarArgs(soa, obj, mid, args).GetS();)<SUB>1293</SUB>> ]
-"5621" [label = <(GetS,InvokeWithVarArgs(soa, obj, mid, args).GetS())<SUB>1293</SUB>> ]
-"5622" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, obj, mid, args).GetS)<SUB>1293</SUB>> ]
-"5585" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1290</SUB>> ]
-"5603" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1291</SUB>> ]
-"5623" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1293</SUB>> ]
-"5628" [label = <(FIELD_IDENTIFIER,GetS,GetS)<SUB>1293</SUB>> ]
-"5586" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1290</SUB>> ]
-"5590" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1290</SUB>> ]
-"5597" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1290</SUB>> ]
-"5604" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1291</SUB>> ]
-"5608" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1291</SUB>> ]
-"5615" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1291</SUB>> ]
-"5591" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1290</SUB>> ]
-"5609" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1291</SUB>> ]
-"5592" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1290</SUB>> ]
-"5594" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1290</SUB>> ]
-"5610" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1291</SUB>> ]
-"5612" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1291</SUB>> ]
-"5574" [label = <(METHOD,CallNonvirtualShortMethodV)<SUB>1288</SUB>> ]
-"5629" [label = <(METHOD_RETURN,jshort)<SUB>1288</SUB>> ]
-  "5581" -> "5586" 
-  "5581" -> "5599" 
-  "5599" -> "5604" 
-  "5599" -> "5618" 
-  "5618" -> "5623" 
-  "5620" -> "5629" 
-  "5621" -> "5620" 
-  "5622" -> "5621" 
-  "5585" -> "5592" 
-  "5585" -> "5599" 
-  "5603" -> "5610" 
-  "5603" -> "5618" 
-  "5623" -> "5628" 
-  "5628" -> "5622" 
-  "5586" -> "5585" 
-  "5590" -> "5597" 
-  "5597" -> "5629" 
-  "5604" -> "5603" 
-  "5608" -> "5615" 
-  "5615" -> "5629" 
-  "5591" -> "5590" 
-  "5609" -> "5608" 
-  "5592" -> "5594" 
-  "5594" -> "5591" 
-  "5610" -> "5612" 
-  "5612" -> "5609" 
-  "5574" -> "5581" 
+digraph "CallNonvirtualIntMethodA" {  
+"5626" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1247</SUB>> ]
+"5644" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1248</SUB>> ]
+"5663" [label = <(soa,soa(env))<SUB>1249</SUB>> ]
+"5665" [label = <(RETURN,return InvokeWithJValues(soa, obj, mid, args).GetI();,return InvokeWithJValues(soa, obj, mid, args).GetI();)<SUB>1250</SUB>> ]
+"5666" [label = <(GetI,InvokeWithJValues(soa, obj, mid, args).GetI())<SUB>1250</SUB>> ]
+"5667" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, obj, mid, args).GetI)<SUB>1250</SUB>> ]
+"5630" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1247</SUB>> ]
+"5648" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1248</SUB>> ]
+"5668" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1250</SUB>> ]
+"5673" [label = <(FIELD_IDENTIFIER,GetI,GetI)<SUB>1250</SUB>> ]
+"5631" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1247</SUB>> ]
+"5635" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1247</SUB>> ]
+"5642" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1247</SUB>> ]
+"5649" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1248</SUB>> ]
+"5653" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1248</SUB>> ]
+"5660" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1248</SUB>> ]
+"5636" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1247</SUB>> ]
+"5654" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1248</SUB>> ]
+"5637" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1247</SUB>> ]
+"5639" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1247</SUB>> ]
+"5655" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1248</SUB>> ]
+"5657" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1248</SUB>> ]
+"5619" [label = <(METHOD,CallNonvirtualIntMethodA)<SUB>1245</SUB>> ]
+"5674" [label = <(METHOD_RETURN,jint)<SUB>1245</SUB>> ]
+  "5626" -> "5631" 
+  "5626" -> "5644" 
+  "5644" -> "5649" 
+  "5644" -> "5663" 
+  "5663" -> "5668" 
+  "5665" -> "5674" 
+  "5666" -> "5665" 
+  "5667" -> "5666" 
+  "5630" -> "5637" 
+  "5630" -> "5644" 
+  "5648" -> "5655" 
+  "5648" -> "5663" 
+  "5668" -> "5673" 
+  "5673" -> "5667" 
+  "5631" -> "5630" 
+  "5635" -> "5642" 
+  "5642" -> "5674" 
+  "5649" -> "5648" 
+  "5653" -> "5660" 
+  "5660" -> "5674" 
+  "5636" -> "5635" 
+  "5654" -> "5653" 
+  "5637" -> "5639" 
+  "5639" -> "5636" 
+  "5655" -> "5657" 
+  "5657" -> "5654" 
+  "5619" -> "5626" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/105-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/105-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/105-cfg.dot	2023-06-07 19:35:01.447387166 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/105-cfg.dot	2023-06-07 19:35:07.997386519 +0330
@@ -1,53 +1,61 @@
-digraph "CallNonvirtualShortMethodA" {  
-"5638" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1298</SUB>> ]
-"5656" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1299</SUB>> ]
-"5675" [label = <(soa,soa(env))<SUB>1300</SUB>> ]
-"5677" [label = <(RETURN,return InvokeWithJValues(soa, obj, mid, args).GetS();,return InvokeWithJValues(soa, obj, mid, args).GetS();)<SUB>1301</SUB>> ]
-"5678" [label = <(GetS,InvokeWithJValues(soa, obj, mid, args).GetS())<SUB>1301</SUB>> ]
-"5679" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, obj, mid, args).GetS)<SUB>1301</SUB>> ]
-"5642" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1298</SUB>> ]
-"5660" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1299</SUB>> ]
-"5680" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1301</SUB>> ]
-"5685" [label = <(FIELD_IDENTIFIER,GetS,GetS)<SUB>1301</SUB>> ]
-"5643" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1298</SUB>> ]
-"5647" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1298</SUB>> ]
-"5654" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1298</SUB>> ]
-"5661" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1299</SUB>> ]
-"5665" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1299</SUB>> ]
-"5672" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1299</SUB>> ]
-"5648" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1298</SUB>> ]
-"5666" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1299</SUB>> ]
-"5649" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1298</SUB>> ]
-"5651" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1298</SUB>> ]
-"5667" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1299</SUB>> ]
-"5669" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1299</SUB>> ]
-"5631" [label = <(METHOD,CallNonvirtualShortMethodA)<SUB>1296</SUB>> ]
-"5686" [label = <(METHOD_RETURN,jshort)<SUB>1296</SUB>> ]
-  "5638" -> "5643" 
-  "5638" -> "5656" 
-  "5656" -> "5661" 
-  "5656" -> "5675" 
-  "5675" -> "5680" 
-  "5677" -> "5686" 
-  "5678" -> "5677" 
-  "5679" -> "5678" 
-  "5642" -> "5649" 
-  "5642" -> "5656" 
-  "5660" -> "5667" 
-  "5660" -> "5675" 
-  "5680" -> "5685" 
-  "5685" -> "5679" 
-  "5643" -> "5642" 
-  "5647" -> "5654" 
-  "5654" -> "5686" 
-  "5661" -> "5660" 
-  "5665" -> "5672" 
-  "5672" -> "5686" 
-  "5648" -> "5647" 
-  "5666" -> "5665" 
-  "5649" -> "5651" 
-  "5651" -> "5648" 
-  "5667" -> "5669" 
-  "5669" -> "5666" 
-  "5631" -> "5638" 
+digraph "CallNonvirtualLongMethod" {  
+"5683" [label = <(va_start,va_start(ap, mid))<SUB>1255</SUB>> ]
+"5687" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1256</SUB>> ]
+"5690" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1257</SUB>> ]
+"5708" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1258</SUB>> ]
+"5727" [label = <(soa,soa(env))<SUB>1259</SUB>> ]
+"5730" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, ap)))<SUB>1260</SUB>> ]
+"5736" [label = <(RETURN,return result.GetJ();,return result.GetJ();)<SUB>1261</SUB>> ]
+"5688" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1256</SUB>> ]
+"5731" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1260</SUB>> ]
+"5737" [label = <(GetJ,result.GetJ())<SUB>1261</SUB>> ]
+"5738" [label = <(&lt;operator&gt;.fieldAccess,result.GetJ)<SUB>1261</SUB>> ]
+"5694" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1257</SUB>> ]
+"5712" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1258</SUB>> ]
+"5740" [label = <(FIELD_IDENTIFIER,GetJ,GetJ)<SUB>1261</SUB>> ]
+"5695" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1257</SUB>> ]
+"5699" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1257</SUB>> ]
+"5706" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1257</SUB>> ]
+"5713" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1258</SUB>> ]
+"5717" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1258</SUB>> ]
+"5724" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1258</SUB>> ]
+"5700" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1257</SUB>> ]
+"5718" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1258</SUB>> ]
+"5701" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1257</SUB>> ]
+"5703" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1257</SUB>> ]
+"5719" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1258</SUB>> ]
+"5721" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1258</SUB>> ]
+"5676" [label = <(METHOD,CallNonvirtualLongMethod)<SUB>1253</SUB>> ]
+"5741" [label = <(METHOD_RETURN,jlong)<SUB>1253</SUB>> ]
+  "5683" -> "5688" 
+  "5687" -> "5690" 
+  "5690" -> "5695" 
+  "5690" -> "5708" 
+  "5708" -> "5713" 
+  "5708" -> "5727" 
+  "5727" -> "5731" 
+  "5730" -> "5740" 
+  "5736" -> "5741" 
+  "5688" -> "5687" 
+  "5731" -> "5730" 
+  "5737" -> "5736" 
+  "5738" -> "5737" 
+  "5694" -> "5701" 
+  "5694" -> "5708" 
+  "5712" -> "5719" 
+  "5712" -> "5727" 
+  "5740" -> "5738" 
+  "5695" -> "5694" 
+  "5699" -> "5706" 
+  "5706" -> "5741" 
+  "5713" -> "5712" 
+  "5717" -> "5724" 
+  "5724" -> "5741" 
+  "5700" -> "5699" 
+  "5718" -> "5717" 
+  "5701" -> "5703" 
+  "5703" -> "5700" 
+  "5719" -> "5721" 
+  "5721" -> "5718" 
+  "5676" -> "5683" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/106-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/106-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/106-cfg.dot	2023-06-07 19:35:01.447387166 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/106-cfg.dot	2023-06-07 19:35:07.997386519 +0330
@@ -1,61 +1,53 @@
-digraph "CallNonvirtualIntMethod" {  
-"5695" [label = <(va_start,va_start(ap, mid))<SUB>1306</SUB>> ]
-"5699" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1307</SUB>> ]
-"5702" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1308</SUB>> ]
-"5720" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1309</SUB>> ]
-"5739" [label = <(soa,soa(env))<SUB>1310</SUB>> ]
-"5742" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, ap)))<SUB>1311</SUB>> ]
-"5748" [label = <(RETURN,return result.GetI();,return result.GetI();)<SUB>1312</SUB>> ]
-"5700" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1307</SUB>> ]
-"5743" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1311</SUB>> ]
-"5749" [label = <(GetI,result.GetI())<SUB>1312</SUB>> ]
-"5750" [label = <(&lt;operator&gt;.fieldAccess,result.GetI)<SUB>1312</SUB>> ]
-"5706" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1308</SUB>> ]
-"5724" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1309</SUB>> ]
-"5752" [label = <(FIELD_IDENTIFIER,GetI,GetI)<SUB>1312</SUB>> ]
-"5707" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1308</SUB>> ]
-"5711" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1308</SUB>> ]
-"5718" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1308</SUB>> ]
-"5725" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1309</SUB>> ]
-"5729" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1309</SUB>> ]
-"5736" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1309</SUB>> ]
-"5712" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1308</SUB>> ]
-"5730" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1309</SUB>> ]
-"5713" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1308</SUB>> ]
-"5715" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1308</SUB>> ]
-"5731" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1309</SUB>> ]
-"5733" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1309</SUB>> ]
-"5688" [label = <(METHOD,CallNonvirtualIntMethod)<SUB>1304</SUB>> ]
-"5753" [label = <(METHOD_RETURN,jint)<SUB>1304</SUB>> ]
-  "5695" -> "5700" 
-  "5699" -> "5702" 
-  "5702" -> "5707" 
-  "5702" -> "5720" 
-  "5720" -> "5725" 
-  "5720" -> "5739" 
-  "5739" -> "5743" 
-  "5742" -> "5752" 
-  "5748" -> "5753" 
-  "5700" -> "5699" 
-  "5743" -> "5742" 
-  "5749" -> "5748" 
-  "5750" -> "5749" 
-  "5706" -> "5713" 
-  "5706" -> "5720" 
-  "5724" -> "5731" 
-  "5724" -> "5739" 
-  "5752" -> "5750" 
-  "5707" -> "5706" 
-  "5711" -> "5718" 
-  "5718" -> "5753" 
-  "5725" -> "5724" 
-  "5729" -> "5736" 
-  "5736" -> "5753" 
-  "5712" -> "5711" 
-  "5730" -> "5729" 
-  "5713" -> "5715" 
-  "5715" -> "5712" 
-  "5731" -> "5733" 
-  "5733" -> "5730" 
-  "5688" -> "5695" 
+digraph "CallNonvirtualLongMethodV" {  
+"5750" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1266</SUB>> ]
+"5768" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1267</SUB>> ]
+"5787" [label = <(soa,soa(env))<SUB>1268</SUB>> ]
+"5789" [label = <(RETURN,return InvokeWithVarArgs(soa, obj, mid, args).GetJ();,return InvokeWithVarArgs(soa, obj, mid, args).GetJ();)<SUB>1269</SUB>> ]
+"5790" [label = <(GetJ,InvokeWithVarArgs(soa, obj, mid, args).GetJ())<SUB>1269</SUB>> ]
+"5791" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, obj, mid, args).GetJ)<SUB>1269</SUB>> ]
+"5754" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1266</SUB>> ]
+"5772" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1267</SUB>> ]
+"5792" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1269</SUB>> ]
+"5797" [label = <(FIELD_IDENTIFIER,GetJ,GetJ)<SUB>1269</SUB>> ]
+"5755" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1266</SUB>> ]
+"5759" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1266</SUB>> ]
+"5766" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1266</SUB>> ]
+"5773" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1267</SUB>> ]
+"5777" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1267</SUB>> ]
+"5784" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1267</SUB>> ]
+"5760" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1266</SUB>> ]
+"5778" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1267</SUB>> ]
+"5761" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1266</SUB>> ]
+"5763" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1266</SUB>> ]
+"5779" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1267</SUB>> ]
+"5781" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1267</SUB>> ]
+"5743" [label = <(METHOD,CallNonvirtualLongMethodV)<SUB>1264</SUB>> ]
+"5798" [label = <(METHOD_RETURN,jlong)<SUB>1264</SUB>> ]
+  "5750" -> "5755" 
+  "5750" -> "5768" 
+  "5768" -> "5773" 
+  "5768" -> "5787" 
+  "5787" -> "5792" 
+  "5789" -> "5798" 
+  "5790" -> "5789" 
+  "5791" -> "5790" 
+  "5754" -> "5761" 
+  "5754" -> "5768" 
+  "5772" -> "5779" 
+  "5772" -> "5787" 
+  "5792" -> "5797" 
+  "5797" -> "5791" 
+  "5755" -> "5754" 
+  "5759" -> "5766" 
+  "5766" -> "5798" 
+  "5773" -> "5772" 
+  "5777" -> "5784" 
+  "5784" -> "5798" 
+  "5760" -> "5759" 
+  "5778" -> "5777" 
+  "5761" -> "5763" 
+  "5763" -> "5760" 
+  "5779" -> "5781" 
+  "5781" -> "5778" 
+  "5743" -> "5750" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/107-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/107-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/107-cfg.dot	2023-06-07 19:35:01.447387166 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/107-cfg.dot	2023-06-07 19:35:07.997386519 +0330
@@ -1,53 +1,53 @@
-digraph "CallNonvirtualIntMethodV" {  
-"5762" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1317</SUB>> ]
-"5780" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1318</SUB>> ]
-"5799" [label = <(soa,soa(env))<SUB>1319</SUB>> ]
-"5801" [label = <(RETURN,return InvokeWithVarArgs(soa, obj, mid, args).GetI();,return InvokeWithVarArgs(soa, obj, mid, args).GetI();)<SUB>1320</SUB>> ]
-"5802" [label = <(GetI,InvokeWithVarArgs(soa, obj, mid, args).GetI())<SUB>1320</SUB>> ]
-"5803" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, obj, mid, args).GetI)<SUB>1320</SUB>> ]
-"5766" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1317</SUB>> ]
-"5784" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1318</SUB>> ]
-"5804" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1320</SUB>> ]
-"5809" [label = <(FIELD_IDENTIFIER,GetI,GetI)<SUB>1320</SUB>> ]
-"5767" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1317</SUB>> ]
-"5771" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1317</SUB>> ]
-"5778" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1317</SUB>> ]
-"5785" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1318</SUB>> ]
-"5789" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1318</SUB>> ]
-"5796" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1318</SUB>> ]
-"5772" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1317</SUB>> ]
-"5790" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1318</SUB>> ]
-"5773" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1317</SUB>> ]
-"5775" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1317</SUB>> ]
-"5791" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1318</SUB>> ]
-"5793" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1318</SUB>> ]
-"5755" [label = <(METHOD,CallNonvirtualIntMethodV)<SUB>1315</SUB>> ]
-"5810" [label = <(METHOD_RETURN,jint)<SUB>1315</SUB>> ]
-  "5762" -> "5767" 
-  "5762" -> "5780" 
-  "5780" -> "5785" 
-  "5780" -> "5799" 
-  "5799" -> "5804" 
-  "5801" -> "5810" 
-  "5802" -> "5801" 
-  "5803" -> "5802" 
-  "5766" -> "5773" 
-  "5766" -> "5780" 
-  "5784" -> "5791" 
-  "5784" -> "5799" 
-  "5804" -> "5809" 
-  "5809" -> "5803" 
-  "5767" -> "5766" 
-  "5771" -> "5778" 
-  "5778" -> "5810" 
-  "5785" -> "5784" 
-  "5789" -> "5796" 
-  "5796" -> "5810" 
-  "5772" -> "5771" 
-  "5790" -> "5789" 
-  "5773" -> "5775" 
-  "5775" -> "5772" 
-  "5791" -> "5793" 
-  "5793" -> "5790" 
-  "5755" -> "5762" 
+digraph "CallNonvirtualLongMethodA" {  
+"5807" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1274</SUB>> ]
+"5825" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1275</SUB>> ]
+"5844" [label = <(soa,soa(env))<SUB>1276</SUB>> ]
+"5846" [label = <(RETURN,return InvokeWithJValues(soa, obj, mid, args).GetJ();,return InvokeWithJValues(soa, obj, mid, args).GetJ();)<SUB>1277</SUB>> ]
+"5847" [label = <(GetJ,InvokeWithJValues(soa, obj, mid, args).GetJ())<SUB>1277</SUB>> ]
+"5848" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, obj, mid, args).GetJ)<SUB>1277</SUB>> ]
+"5811" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1274</SUB>> ]
+"5829" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1275</SUB>> ]
+"5849" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1277</SUB>> ]
+"5854" [label = <(FIELD_IDENTIFIER,GetJ,GetJ)<SUB>1277</SUB>> ]
+"5812" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1274</SUB>> ]
+"5816" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1274</SUB>> ]
+"5823" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1274</SUB>> ]
+"5830" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1275</SUB>> ]
+"5834" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1275</SUB>> ]
+"5841" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1275</SUB>> ]
+"5817" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1274</SUB>> ]
+"5835" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1275</SUB>> ]
+"5818" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1274</SUB>> ]
+"5820" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1274</SUB>> ]
+"5836" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1275</SUB>> ]
+"5838" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1275</SUB>> ]
+"5800" [label = <(METHOD,CallNonvirtualLongMethodA)<SUB>1272</SUB>> ]
+"5855" [label = <(METHOD_RETURN,jlong)<SUB>1272</SUB>> ]
+  "5807" -> "5812" 
+  "5807" -> "5825" 
+  "5825" -> "5830" 
+  "5825" -> "5844" 
+  "5844" -> "5849" 
+  "5846" -> "5855" 
+  "5847" -> "5846" 
+  "5848" -> "5847" 
+  "5811" -> "5818" 
+  "5811" -> "5825" 
+  "5829" -> "5836" 
+  "5829" -> "5844" 
+  "5849" -> "5854" 
+  "5854" -> "5848" 
+  "5812" -> "5811" 
+  "5816" -> "5823" 
+  "5823" -> "5855" 
+  "5830" -> "5829" 
+  "5834" -> "5841" 
+  "5841" -> "5855" 
+  "5817" -> "5816" 
+  "5835" -> "5834" 
+  "5818" -> "5820" 
+  "5820" -> "5817" 
+  "5836" -> "5838" 
+  "5838" -> "5835" 
+  "5800" -> "5807" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/108-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/108-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/108-cfg.dot	2023-06-07 19:35:01.447387166 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/108-cfg.dot	2023-06-07 19:35:07.997386519 +0330
@@ -1,53 +1,61 @@
-digraph "CallNonvirtualIntMethodA" {  
-"5819" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1325</SUB>> ]
-"5837" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1326</SUB>> ]
-"5856" [label = <(soa,soa(env))<SUB>1327</SUB>> ]
-"5858" [label = <(RETURN,return InvokeWithJValues(soa, obj, mid, args).GetI();,return InvokeWithJValues(soa, obj, mid, args).GetI();)<SUB>1328</SUB>> ]
-"5859" [label = <(GetI,InvokeWithJValues(soa, obj, mid, args).GetI())<SUB>1328</SUB>> ]
-"5860" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, obj, mid, args).GetI)<SUB>1328</SUB>> ]
-"5823" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1325</SUB>> ]
-"5841" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1326</SUB>> ]
-"5861" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1328</SUB>> ]
-"5866" [label = <(FIELD_IDENTIFIER,GetI,GetI)<SUB>1328</SUB>> ]
-"5824" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1325</SUB>> ]
-"5828" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1325</SUB>> ]
-"5835" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1325</SUB>> ]
-"5842" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1326</SUB>> ]
-"5846" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1326</SUB>> ]
-"5853" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1326</SUB>> ]
-"5829" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1325</SUB>> ]
-"5847" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1326</SUB>> ]
-"5830" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1325</SUB>> ]
-"5832" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1325</SUB>> ]
-"5848" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1326</SUB>> ]
-"5850" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1326</SUB>> ]
-"5812" [label = <(METHOD,CallNonvirtualIntMethodA)<SUB>1323</SUB>> ]
-"5867" [label = <(METHOD_RETURN,jint)<SUB>1323</SUB>> ]
-  "5819" -> "5824" 
-  "5819" -> "5837" 
-  "5837" -> "5842" 
-  "5837" -> "5856" 
-  "5856" -> "5861" 
-  "5858" -> "5867" 
-  "5859" -> "5858" 
-  "5860" -> "5859" 
-  "5823" -> "5830" 
-  "5823" -> "5837" 
-  "5841" -> "5848" 
-  "5841" -> "5856" 
-  "5861" -> "5866" 
-  "5866" -> "5860" 
-  "5824" -> "5823" 
-  "5828" -> "5835" 
-  "5835" -> "5867" 
-  "5842" -> "5841" 
-  "5846" -> "5853" 
-  "5853" -> "5867" 
-  "5829" -> "5828" 
-  "5847" -> "5846" 
-  "5830" -> "5832" 
-  "5832" -> "5829" 
-  "5848" -> "5850" 
-  "5850" -> "5847" 
-  "5812" -> "5819" 
+digraph "CallNonvirtualFloatMethod" {  
+"5864" [label = <(va_start,va_start(ap, mid))<SUB>1282</SUB>> ]
+"5868" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1283</SUB>> ]
+"5871" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1284</SUB>> ]
+"5889" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1285</SUB>> ]
+"5908" [label = <(soa,soa(env))<SUB>1286</SUB>> ]
+"5911" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, ap)))<SUB>1287</SUB>> ]
+"5917" [label = <(RETURN,return result.GetF();,return result.GetF();)<SUB>1288</SUB>> ]
+"5869" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1283</SUB>> ]
+"5912" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1287</SUB>> ]
+"5918" [label = <(GetF,result.GetF())<SUB>1288</SUB>> ]
+"5919" [label = <(&lt;operator&gt;.fieldAccess,result.GetF)<SUB>1288</SUB>> ]
+"5875" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1284</SUB>> ]
+"5893" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1285</SUB>> ]
+"5921" [label = <(FIELD_IDENTIFIER,GetF,GetF)<SUB>1288</SUB>> ]
+"5876" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1284</SUB>> ]
+"5880" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1284</SUB>> ]
+"5887" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1284</SUB>> ]
+"5894" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1285</SUB>> ]
+"5898" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1285</SUB>> ]
+"5905" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1285</SUB>> ]
+"5881" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1284</SUB>> ]
+"5899" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1285</SUB>> ]
+"5882" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1284</SUB>> ]
+"5884" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1284</SUB>> ]
+"5900" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1285</SUB>> ]
+"5902" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1285</SUB>> ]
+"5857" [label = <(METHOD,CallNonvirtualFloatMethod)<SUB>1280</SUB>> ]
+"5922" [label = <(METHOD_RETURN,jfloat)<SUB>1280</SUB>> ]
+  "5864" -> "5869" 
+  "5868" -> "5871" 
+  "5871" -> "5876" 
+  "5871" -> "5889" 
+  "5889" -> "5894" 
+  "5889" -> "5908" 
+  "5908" -> "5912" 
+  "5911" -> "5921" 
+  "5917" -> "5922" 
+  "5869" -> "5868" 
+  "5912" -> "5911" 
+  "5918" -> "5917" 
+  "5919" -> "5918" 
+  "5875" -> "5882" 
+  "5875" -> "5889" 
+  "5893" -> "5900" 
+  "5893" -> "5908" 
+  "5921" -> "5919" 
+  "5876" -> "5875" 
+  "5880" -> "5887" 
+  "5887" -> "5922" 
+  "5894" -> "5893" 
+  "5898" -> "5905" 
+  "5905" -> "5922" 
+  "5881" -> "5880" 
+  "5899" -> "5898" 
+  "5882" -> "5884" 
+  "5884" -> "5881" 
+  "5900" -> "5902" 
+  "5902" -> "5899" 
+  "5857" -> "5864" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/109-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/109-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/109-cfg.dot	2023-06-07 19:35:01.457387167 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/109-cfg.dot	2023-06-07 19:35:07.997386519 +0330
@@ -1,61 +1,53 @@
-digraph "CallNonvirtualLongMethod" {  
-"5876" [label = <(va_start,va_start(ap, mid))<SUB>1333</SUB>> ]
-"5880" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1334</SUB>> ]
-"5883" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1335</SUB>> ]
-"5901" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1336</SUB>> ]
-"5920" [label = <(soa,soa(env))<SUB>1337</SUB>> ]
-"5923" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, ap)))<SUB>1338</SUB>> ]
-"5929" [label = <(RETURN,return result.GetJ();,return result.GetJ();)<SUB>1339</SUB>> ]
-"5881" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1334</SUB>> ]
-"5924" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1338</SUB>> ]
-"5930" [label = <(GetJ,result.GetJ())<SUB>1339</SUB>> ]
-"5931" [label = <(&lt;operator&gt;.fieldAccess,result.GetJ)<SUB>1339</SUB>> ]
-"5887" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1335</SUB>> ]
-"5905" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1336</SUB>> ]
-"5933" [label = <(FIELD_IDENTIFIER,GetJ,GetJ)<SUB>1339</SUB>> ]
-"5888" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1335</SUB>> ]
-"5892" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1335</SUB>> ]
-"5899" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1335</SUB>> ]
-"5906" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1336</SUB>> ]
-"5910" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1336</SUB>> ]
-"5917" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1336</SUB>> ]
-"5893" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1335</SUB>> ]
-"5911" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1336</SUB>> ]
-"5894" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1335</SUB>> ]
-"5896" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1335</SUB>> ]
-"5912" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1336</SUB>> ]
-"5914" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1336</SUB>> ]
-"5869" [label = <(METHOD,CallNonvirtualLongMethod)<SUB>1331</SUB>> ]
-"5934" [label = <(METHOD_RETURN,jlong)<SUB>1331</SUB>> ]
-  "5876" -> "5881" 
-  "5880" -> "5883" 
-  "5883" -> "5888" 
-  "5883" -> "5901" 
-  "5901" -> "5906" 
-  "5901" -> "5920" 
-  "5920" -> "5924" 
-  "5923" -> "5933" 
-  "5929" -> "5934" 
-  "5881" -> "5880" 
-  "5924" -> "5923" 
-  "5930" -> "5929" 
-  "5931" -> "5930" 
-  "5887" -> "5894" 
-  "5887" -> "5901" 
-  "5905" -> "5912" 
-  "5905" -> "5920" 
-  "5933" -> "5931" 
-  "5888" -> "5887" 
-  "5892" -> "5899" 
-  "5899" -> "5934" 
-  "5906" -> "5905" 
-  "5910" -> "5917" 
-  "5917" -> "5934" 
-  "5893" -> "5892" 
-  "5911" -> "5910" 
-  "5894" -> "5896" 
-  "5896" -> "5893" 
-  "5912" -> "5914" 
-  "5914" -> "5911" 
-  "5869" -> "5876" 
+digraph "CallNonvirtualFloatMethodV" {  
+"5931" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1293</SUB>> ]
+"5949" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1294</SUB>> ]
+"5968" [label = <(soa,soa(env))<SUB>1295</SUB>> ]
+"5970" [label = <(RETURN,return InvokeWithVarArgs(soa, obj, mid, args).GetF();,return InvokeWithVarArgs(soa, obj, mid, args).GetF();)<SUB>1296</SUB>> ]
+"5971" [label = <(GetF,InvokeWithVarArgs(soa, obj, mid, args).GetF())<SUB>1296</SUB>> ]
+"5972" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, obj, mid, args).GetF)<SUB>1296</SUB>> ]
+"5935" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1293</SUB>> ]
+"5953" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1294</SUB>> ]
+"5973" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1296</SUB>> ]
+"5978" [label = <(FIELD_IDENTIFIER,GetF,GetF)<SUB>1296</SUB>> ]
+"5936" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1293</SUB>> ]
+"5940" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1293</SUB>> ]
+"5947" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1293</SUB>> ]
+"5954" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1294</SUB>> ]
+"5958" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1294</SUB>> ]
+"5965" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1294</SUB>> ]
+"5941" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1293</SUB>> ]
+"5959" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1294</SUB>> ]
+"5942" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1293</SUB>> ]
+"5944" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1293</SUB>> ]
+"5960" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1294</SUB>> ]
+"5962" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1294</SUB>> ]
+"5924" [label = <(METHOD,CallNonvirtualFloatMethodV)<SUB>1291</SUB>> ]
+"5979" [label = <(METHOD_RETURN,jfloat)<SUB>1291</SUB>> ]
+  "5931" -> "5936" 
+  "5931" -> "5949" 
+  "5949" -> "5954" 
+  "5949" -> "5968" 
+  "5968" -> "5973" 
+  "5970" -> "5979" 
+  "5971" -> "5970" 
+  "5972" -> "5971" 
+  "5935" -> "5942" 
+  "5935" -> "5949" 
+  "5953" -> "5960" 
+  "5953" -> "5968" 
+  "5973" -> "5978" 
+  "5978" -> "5972" 
+  "5936" -> "5935" 
+  "5940" -> "5947" 
+  "5947" -> "5979" 
+  "5954" -> "5953" 
+  "5958" -> "5965" 
+  "5965" -> "5979" 
+  "5941" -> "5940" 
+  "5959" -> "5958" 
+  "5942" -> "5944" 
+  "5944" -> "5941" 
+  "5960" -> "5962" 
+  "5962" -> "5959" 
+  "5924" -> "5931" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/11-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/11-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/11-cfg.dot	2023-06-07 19:35:01.337387177 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/11-cfg.dot	2023-06-07 19:35:07.907386529 +0330
@@ -1,5 +1,5 @@
-digraph "NotifyGetField" {  
-"273" [label = <(METHOD,NotifyGetField)<SUB>236</SUB>> ]
-"277" [label = <(METHOD_RETURN,void)<SUB>236</SUB>> ]
-  "273" -> "277" 
+digraph "GetClassLoader" {  
+"179" [label = <(METHOD,GetClassLoader)<SUB>228</SUB>> ]
+"182" [label = <(METHOD_RETURN,ANY)<SUB>228</SUB>> ]
+  "179" -> "182" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/110-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/110-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/110-cfg.dot	2023-06-07 19:35:01.457387167 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/110-cfg.dot	2023-06-07 19:35:07.997386519 +0330
@@ -1,53 +1,53 @@
-digraph "CallNonvirtualLongMethodV" {  
-"5943" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1344</SUB>> ]
-"5961" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1345</SUB>> ]
-"5980" [label = <(soa,soa(env))<SUB>1346</SUB>> ]
-"5982" [label = <(RETURN,return InvokeWithVarArgs(soa, obj, mid, args).GetJ();,return InvokeWithVarArgs(soa, obj, mid, args).GetJ();)<SUB>1347</SUB>> ]
-"5983" [label = <(GetJ,InvokeWithVarArgs(soa, obj, mid, args).GetJ())<SUB>1347</SUB>> ]
-"5984" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, obj, mid, args).GetJ)<SUB>1347</SUB>> ]
-"5947" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1344</SUB>> ]
-"5965" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1345</SUB>> ]
-"5985" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1347</SUB>> ]
-"5990" [label = <(FIELD_IDENTIFIER,GetJ,GetJ)<SUB>1347</SUB>> ]
-"5948" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1344</SUB>> ]
-"5952" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1344</SUB>> ]
-"5959" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1344</SUB>> ]
-"5966" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1345</SUB>> ]
-"5970" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1345</SUB>> ]
-"5977" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1345</SUB>> ]
-"5953" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1344</SUB>> ]
-"5971" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1345</SUB>> ]
-"5954" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1344</SUB>> ]
-"5956" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1344</SUB>> ]
-"5972" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1345</SUB>> ]
-"5974" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1345</SUB>> ]
-"5936" [label = <(METHOD,CallNonvirtualLongMethodV)<SUB>1342</SUB>> ]
-"5991" [label = <(METHOD_RETURN,jlong)<SUB>1342</SUB>> ]
-  "5943" -> "5948" 
-  "5943" -> "5961" 
-  "5961" -> "5966" 
-  "5961" -> "5980" 
-  "5980" -> "5985" 
-  "5982" -> "5991" 
-  "5983" -> "5982" 
-  "5984" -> "5983" 
-  "5947" -> "5954" 
-  "5947" -> "5961" 
-  "5965" -> "5972" 
-  "5965" -> "5980" 
-  "5985" -> "5990" 
-  "5990" -> "5984" 
-  "5948" -> "5947" 
-  "5952" -> "5959" 
-  "5959" -> "5991" 
-  "5966" -> "5965" 
-  "5970" -> "5977" 
-  "5977" -> "5991" 
-  "5953" -> "5952" 
-  "5971" -> "5970" 
-  "5954" -> "5956" 
-  "5956" -> "5953" 
-  "5972" -> "5974" 
-  "5974" -> "5971" 
-  "5936" -> "5943" 
+digraph "CallNonvirtualFloatMethodA" {  
+"5988" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1301</SUB>> ]
+"6006" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1302</SUB>> ]
+"6025" [label = <(soa,soa(env))<SUB>1303</SUB>> ]
+"6027" [label = <(RETURN,return InvokeWithJValues(soa, obj, mid, args).GetF();,return InvokeWithJValues(soa, obj, mid, args).GetF();)<SUB>1304</SUB>> ]
+"6028" [label = <(GetF,InvokeWithJValues(soa, obj, mid, args).GetF())<SUB>1304</SUB>> ]
+"6029" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, obj, mid, args).GetF)<SUB>1304</SUB>> ]
+"5992" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1301</SUB>> ]
+"6010" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1302</SUB>> ]
+"6030" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1304</SUB>> ]
+"6035" [label = <(FIELD_IDENTIFIER,GetF,GetF)<SUB>1304</SUB>> ]
+"5993" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1301</SUB>> ]
+"5997" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1301</SUB>> ]
+"6004" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1301</SUB>> ]
+"6011" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1302</SUB>> ]
+"6015" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1302</SUB>> ]
+"6022" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1302</SUB>> ]
+"5998" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1301</SUB>> ]
+"6016" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1302</SUB>> ]
+"5999" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1301</SUB>> ]
+"6001" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1301</SUB>> ]
+"6017" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1302</SUB>> ]
+"6019" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1302</SUB>> ]
+"5981" [label = <(METHOD,CallNonvirtualFloatMethodA)<SUB>1299</SUB>> ]
+"6036" [label = <(METHOD_RETURN,jfloat)<SUB>1299</SUB>> ]
+  "5988" -> "5993" 
+  "5988" -> "6006" 
+  "6006" -> "6011" 
+  "6006" -> "6025" 
+  "6025" -> "6030" 
+  "6027" -> "6036" 
+  "6028" -> "6027" 
+  "6029" -> "6028" 
+  "5992" -> "5999" 
+  "5992" -> "6006" 
+  "6010" -> "6017" 
+  "6010" -> "6025" 
+  "6030" -> "6035" 
+  "6035" -> "6029" 
+  "5993" -> "5992" 
+  "5997" -> "6004" 
+  "6004" -> "6036" 
+  "6011" -> "6010" 
+  "6015" -> "6022" 
+  "6022" -> "6036" 
+  "5998" -> "5997" 
+  "6016" -> "6015" 
+  "5999" -> "6001" 
+  "6001" -> "5998" 
+  "6017" -> "6019" 
+  "6019" -> "6016" 
+  "5981" -> "5988" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/111-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/111-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/111-cfg.dot	2023-06-07 19:35:01.457387167 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/111-cfg.dot	2023-06-07 19:35:07.997386519 +0330
@@ -1,53 +1,61 @@
-digraph "CallNonvirtualLongMethodA" {  
-"6000" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1352</SUB>> ]
-"6018" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1353</SUB>> ]
-"6037" [label = <(soa,soa(env))<SUB>1354</SUB>> ]
-"6039" [label = <(RETURN,return InvokeWithJValues(soa, obj, mid, args).GetJ();,return InvokeWithJValues(soa, obj, mid, args).GetJ();)<SUB>1355</SUB>> ]
-"6040" [label = <(GetJ,InvokeWithJValues(soa, obj, mid, args).GetJ())<SUB>1355</SUB>> ]
-"6041" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, obj, mid, args).GetJ)<SUB>1355</SUB>> ]
-"6004" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1352</SUB>> ]
-"6022" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1353</SUB>> ]
-"6042" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1355</SUB>> ]
-"6047" [label = <(FIELD_IDENTIFIER,GetJ,GetJ)<SUB>1355</SUB>> ]
-"6005" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1352</SUB>> ]
-"6009" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1352</SUB>> ]
-"6016" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1352</SUB>> ]
-"6023" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1353</SUB>> ]
-"6027" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1353</SUB>> ]
-"6034" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1353</SUB>> ]
-"6010" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1352</SUB>> ]
-"6028" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1353</SUB>> ]
-"6011" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1352</SUB>> ]
-"6013" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1352</SUB>> ]
-"6029" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1353</SUB>> ]
-"6031" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1353</SUB>> ]
-"5993" [label = <(METHOD,CallNonvirtualLongMethodA)<SUB>1350</SUB>> ]
-"6048" [label = <(METHOD_RETURN,jlong)<SUB>1350</SUB>> ]
-  "6000" -> "6005" 
-  "6000" -> "6018" 
-  "6018" -> "6023" 
-  "6018" -> "6037" 
-  "6037" -> "6042" 
-  "6039" -> "6048" 
-  "6040" -> "6039" 
-  "6041" -> "6040" 
-  "6004" -> "6011" 
-  "6004" -> "6018" 
-  "6022" -> "6029" 
-  "6022" -> "6037" 
-  "6042" -> "6047" 
-  "6047" -> "6041" 
-  "6005" -> "6004" 
-  "6009" -> "6016" 
-  "6016" -> "6048" 
-  "6023" -> "6022" 
-  "6027" -> "6034" 
-  "6034" -> "6048" 
-  "6010" -> "6009" 
-  "6028" -> "6027" 
-  "6011" -> "6013" 
-  "6013" -> "6010" 
-  "6029" -> "6031" 
-  "6031" -> "6028" 
-  "5993" -> "6000" 
+digraph "CallNonvirtualDoubleMethod" {  
+"6045" [label = <(va_start,va_start(ap, mid))<SUB>1309</SUB>> ]
+"6049" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1310</SUB>> ]
+"6052" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1311</SUB>> ]
+"6070" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1312</SUB>> ]
+"6089" [label = <(soa,soa(env))<SUB>1313</SUB>> ]
+"6092" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, ap)))<SUB>1314</SUB>> ]
+"6098" [label = <(RETURN,return result.GetD();,return result.GetD();)<SUB>1315</SUB>> ]
+"6050" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1310</SUB>> ]
+"6093" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1314</SUB>> ]
+"6099" [label = <(GetD,result.GetD())<SUB>1315</SUB>> ]
+"6100" [label = <(&lt;operator&gt;.fieldAccess,result.GetD)<SUB>1315</SUB>> ]
+"6056" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1311</SUB>> ]
+"6074" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1312</SUB>> ]
+"6102" [label = <(FIELD_IDENTIFIER,GetD,GetD)<SUB>1315</SUB>> ]
+"6057" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1311</SUB>> ]
+"6061" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1311</SUB>> ]
+"6068" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1311</SUB>> ]
+"6075" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1312</SUB>> ]
+"6079" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1312</SUB>> ]
+"6086" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1312</SUB>> ]
+"6062" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1311</SUB>> ]
+"6080" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1312</SUB>> ]
+"6063" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1311</SUB>> ]
+"6065" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1311</SUB>> ]
+"6081" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1312</SUB>> ]
+"6083" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1312</SUB>> ]
+"6038" [label = <(METHOD,CallNonvirtualDoubleMethod)<SUB>1307</SUB>> ]
+"6103" [label = <(METHOD_RETURN,jdouble)<SUB>1307</SUB>> ]
+  "6045" -> "6050" 
+  "6049" -> "6052" 
+  "6052" -> "6057" 
+  "6052" -> "6070" 
+  "6070" -> "6075" 
+  "6070" -> "6089" 
+  "6089" -> "6093" 
+  "6092" -> "6102" 
+  "6098" -> "6103" 
+  "6050" -> "6049" 
+  "6093" -> "6092" 
+  "6099" -> "6098" 
+  "6100" -> "6099" 
+  "6056" -> "6063" 
+  "6056" -> "6070" 
+  "6074" -> "6081" 
+  "6074" -> "6089" 
+  "6102" -> "6100" 
+  "6057" -> "6056" 
+  "6061" -> "6068" 
+  "6068" -> "6103" 
+  "6075" -> "6074" 
+  "6079" -> "6086" 
+  "6086" -> "6103" 
+  "6062" -> "6061" 
+  "6080" -> "6079" 
+  "6063" -> "6065" 
+  "6065" -> "6062" 
+  "6081" -> "6083" 
+  "6083" -> "6080" 
+  "6038" -> "6045" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/112-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/112-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/112-cfg.dot	2023-06-07 19:35:01.457387167 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/112-cfg.dot	2023-06-07 19:35:07.997386519 +0330
@@ -1,61 +1,53 @@
-digraph "CallNonvirtualFloatMethod" {  
-"6057" [label = <(va_start,va_start(ap, mid))<SUB>1360</SUB>> ]
-"6061" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1361</SUB>> ]
-"6064" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1362</SUB>> ]
-"6082" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1363</SUB>> ]
-"6101" [label = <(soa,soa(env))<SUB>1364</SUB>> ]
-"6104" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, ap)))<SUB>1365</SUB>> ]
-"6110" [label = <(RETURN,return result.GetF();,return result.GetF();)<SUB>1366</SUB>> ]
-"6062" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1361</SUB>> ]
-"6105" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1365</SUB>> ]
-"6111" [label = <(GetF,result.GetF())<SUB>1366</SUB>> ]
-"6112" [label = <(&lt;operator&gt;.fieldAccess,result.GetF)<SUB>1366</SUB>> ]
-"6068" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1362</SUB>> ]
-"6086" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1363</SUB>> ]
-"6114" [label = <(FIELD_IDENTIFIER,GetF,GetF)<SUB>1366</SUB>> ]
-"6069" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1362</SUB>> ]
-"6073" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1362</SUB>> ]
-"6080" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1362</SUB>> ]
-"6087" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1363</SUB>> ]
-"6091" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1363</SUB>> ]
-"6098" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1363</SUB>> ]
-"6074" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1362</SUB>> ]
-"6092" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1363</SUB>> ]
-"6075" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1362</SUB>> ]
-"6077" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1362</SUB>> ]
-"6093" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1363</SUB>> ]
-"6095" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1363</SUB>> ]
-"6050" [label = <(METHOD,CallNonvirtualFloatMethod)<SUB>1358</SUB>> ]
-"6115" [label = <(METHOD_RETURN,jfloat)<SUB>1358</SUB>> ]
-  "6057" -> "6062" 
-  "6061" -> "6064" 
-  "6064" -> "6069" 
-  "6064" -> "6082" 
-  "6082" -> "6087" 
-  "6082" -> "6101" 
-  "6101" -> "6105" 
-  "6104" -> "6114" 
-  "6110" -> "6115" 
-  "6062" -> "6061" 
-  "6105" -> "6104" 
-  "6111" -> "6110" 
-  "6112" -> "6111" 
-  "6068" -> "6075" 
-  "6068" -> "6082" 
-  "6086" -> "6093" 
-  "6086" -> "6101" 
-  "6114" -> "6112" 
-  "6069" -> "6068" 
-  "6073" -> "6080" 
-  "6080" -> "6115" 
-  "6087" -> "6086" 
-  "6091" -> "6098" 
-  "6098" -> "6115" 
-  "6074" -> "6073" 
-  "6092" -> "6091" 
-  "6075" -> "6077" 
-  "6077" -> "6074" 
-  "6093" -> "6095" 
-  "6095" -> "6092" 
-  "6050" -> "6057" 
+digraph "CallNonvirtualDoubleMethodV" {  
+"6112" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1320</SUB>> ]
+"6130" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1321</SUB>> ]
+"6149" [label = <(soa,soa(env))<SUB>1322</SUB>> ]
+"6151" [label = <(RETURN,return InvokeWithVarArgs(soa, obj, mid, args).GetD();,return InvokeWithVarArgs(soa, obj, mid, args).GetD();)<SUB>1323</SUB>> ]
+"6152" [label = <(GetD,InvokeWithVarArgs(soa, obj, mid, args).GetD())<SUB>1323</SUB>> ]
+"6153" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, obj, mid, args).GetD)<SUB>1323</SUB>> ]
+"6116" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1320</SUB>> ]
+"6134" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1321</SUB>> ]
+"6154" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1323</SUB>> ]
+"6159" [label = <(FIELD_IDENTIFIER,GetD,GetD)<SUB>1323</SUB>> ]
+"6117" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1320</SUB>> ]
+"6121" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1320</SUB>> ]
+"6128" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1320</SUB>> ]
+"6135" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1321</SUB>> ]
+"6139" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1321</SUB>> ]
+"6146" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1321</SUB>> ]
+"6122" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1320</SUB>> ]
+"6140" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1321</SUB>> ]
+"6123" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1320</SUB>> ]
+"6125" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1320</SUB>> ]
+"6141" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1321</SUB>> ]
+"6143" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1321</SUB>> ]
+"6105" [label = <(METHOD,CallNonvirtualDoubleMethodV)<SUB>1318</SUB>> ]
+"6160" [label = <(METHOD_RETURN,jdouble)<SUB>1318</SUB>> ]
+  "6112" -> "6117" 
+  "6112" -> "6130" 
+  "6130" -> "6135" 
+  "6130" -> "6149" 
+  "6149" -> "6154" 
+  "6151" -> "6160" 
+  "6152" -> "6151" 
+  "6153" -> "6152" 
+  "6116" -> "6123" 
+  "6116" -> "6130" 
+  "6134" -> "6141" 
+  "6134" -> "6149" 
+  "6154" -> "6159" 
+  "6159" -> "6153" 
+  "6117" -> "6116" 
+  "6121" -> "6128" 
+  "6128" -> "6160" 
+  "6135" -> "6134" 
+  "6139" -> "6146" 
+  "6146" -> "6160" 
+  "6122" -> "6121" 
+  "6140" -> "6139" 
+  "6123" -> "6125" 
+  "6125" -> "6122" 
+  "6141" -> "6143" 
+  "6143" -> "6140" 
+  "6105" -> "6112" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/113-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/113-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/113-cfg.dot	2023-06-07 19:35:01.457387167 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/113-cfg.dot	2023-06-07 19:35:07.997386519 +0330
@@ -1,53 +1,53 @@
-digraph "CallNonvirtualFloatMethodV" {  
-"6124" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1371</SUB>> ]
-"6142" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1372</SUB>> ]
-"6161" [label = <(soa,soa(env))<SUB>1373</SUB>> ]
-"6163" [label = <(RETURN,return InvokeWithVarArgs(soa, obj, mid, args).GetF();,return InvokeWithVarArgs(soa, obj, mid, args).GetF();)<SUB>1374</SUB>> ]
-"6164" [label = <(GetF,InvokeWithVarArgs(soa, obj, mid, args).GetF())<SUB>1374</SUB>> ]
-"6165" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, obj, mid, args).GetF)<SUB>1374</SUB>> ]
-"6128" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1371</SUB>> ]
-"6146" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1372</SUB>> ]
-"6166" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1374</SUB>> ]
-"6171" [label = <(FIELD_IDENTIFIER,GetF,GetF)<SUB>1374</SUB>> ]
-"6129" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1371</SUB>> ]
-"6133" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1371</SUB>> ]
-"6140" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1371</SUB>> ]
-"6147" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1372</SUB>> ]
-"6151" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1372</SUB>> ]
-"6158" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1372</SUB>> ]
-"6134" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1371</SUB>> ]
-"6152" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1372</SUB>> ]
-"6135" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1371</SUB>> ]
-"6137" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1371</SUB>> ]
-"6153" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1372</SUB>> ]
-"6155" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1372</SUB>> ]
-"6117" [label = <(METHOD,CallNonvirtualFloatMethodV)<SUB>1369</SUB>> ]
-"6172" [label = <(METHOD_RETURN,jfloat)<SUB>1369</SUB>> ]
-  "6124" -> "6129" 
-  "6124" -> "6142" 
-  "6142" -> "6147" 
-  "6142" -> "6161" 
-  "6161" -> "6166" 
-  "6163" -> "6172" 
-  "6164" -> "6163" 
-  "6165" -> "6164" 
-  "6128" -> "6135" 
-  "6128" -> "6142" 
-  "6146" -> "6153" 
-  "6146" -> "6161" 
-  "6166" -> "6171" 
-  "6171" -> "6165" 
-  "6129" -> "6128" 
-  "6133" -> "6140" 
-  "6140" -> "6172" 
-  "6147" -> "6146" 
-  "6151" -> "6158" 
-  "6158" -> "6172" 
-  "6134" -> "6133" 
-  "6152" -> "6151" 
-  "6135" -> "6137" 
-  "6137" -> "6134" 
-  "6153" -> "6155" 
-  "6155" -> "6152" 
-  "6117" -> "6124" 
+digraph "CallNonvirtualDoubleMethodA" {  
+"6169" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1328</SUB>> ]
+"6187" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1329</SUB>> ]
+"6206" [label = <(soa,soa(env))<SUB>1330</SUB>> ]
+"6208" [label = <(RETURN,return InvokeWithJValues(soa, obj, mid, args).GetD();,return InvokeWithJValues(soa, obj, mid, args).GetD();)<SUB>1331</SUB>> ]
+"6209" [label = <(GetD,InvokeWithJValues(soa, obj, mid, args).GetD())<SUB>1331</SUB>> ]
+"6210" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, obj, mid, args).GetD)<SUB>1331</SUB>> ]
+"6173" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1328</SUB>> ]
+"6191" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1329</SUB>> ]
+"6211" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1331</SUB>> ]
+"6216" [label = <(FIELD_IDENTIFIER,GetD,GetD)<SUB>1331</SUB>> ]
+"6174" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1328</SUB>> ]
+"6178" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1328</SUB>> ]
+"6185" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1328</SUB>> ]
+"6192" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1329</SUB>> ]
+"6196" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1329</SUB>> ]
+"6203" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1329</SUB>> ]
+"6179" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1328</SUB>> ]
+"6197" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1329</SUB>> ]
+"6180" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1328</SUB>> ]
+"6182" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1328</SUB>> ]
+"6198" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1329</SUB>> ]
+"6200" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1329</SUB>> ]
+"6162" [label = <(METHOD,CallNonvirtualDoubleMethodA)<SUB>1326</SUB>> ]
+"6217" [label = <(METHOD_RETURN,jdouble)<SUB>1326</SUB>> ]
+  "6169" -> "6174" 
+  "6169" -> "6187" 
+  "6187" -> "6192" 
+  "6187" -> "6206" 
+  "6206" -> "6211" 
+  "6208" -> "6217" 
+  "6209" -> "6208" 
+  "6210" -> "6209" 
+  "6173" -> "6180" 
+  "6173" -> "6187" 
+  "6191" -> "6198" 
+  "6191" -> "6206" 
+  "6211" -> "6216" 
+  "6216" -> "6210" 
+  "6174" -> "6173" 
+  "6178" -> "6185" 
+  "6185" -> "6217" 
+  "6192" -> "6191" 
+  "6196" -> "6203" 
+  "6203" -> "6217" 
+  "6179" -> "6178" 
+  "6197" -> "6196" 
+  "6180" -> "6182" 
+  "6182" -> "6179" 
+  "6198" -> "6200" 
+  "6200" -> "6197" 
+  "6162" -> "6169" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/114-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/114-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/114-cfg.dot	2023-06-07 19:35:01.457387167 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/114-cfg.dot	2023-06-07 19:35:08.007386517 +0330
@@ -1,53 +1,51 @@
-digraph "CallNonvirtualFloatMethodA" {  
-"6181" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1379</SUB>> ]
-"6199" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1380</SUB>> ]
-"6218" [label = <(soa,soa(env))<SUB>1381</SUB>> ]
-"6220" [label = <(RETURN,return InvokeWithJValues(soa, obj, mid, args).GetF();,return InvokeWithJValues(soa, obj, mid, args).GetF();)<SUB>1382</SUB>> ]
-"6221" [label = <(GetF,InvokeWithJValues(soa, obj, mid, args).GetF())<SUB>1382</SUB>> ]
-"6222" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, obj, mid, args).GetF)<SUB>1382</SUB>> ]
-"6185" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1379</SUB>> ]
-"6203" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1380</SUB>> ]
-"6223" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1382</SUB>> ]
-"6228" [label = <(FIELD_IDENTIFIER,GetF,GetF)<SUB>1382</SUB>> ]
-"6186" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1379</SUB>> ]
-"6190" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1379</SUB>> ]
-"6197" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1379</SUB>> ]
-"6204" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1380</SUB>> ]
-"6208" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1380</SUB>> ]
-"6215" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1380</SUB>> ]
-"6191" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1379</SUB>> ]
-"6209" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1380</SUB>> ]
-"6192" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1379</SUB>> ]
-"6194" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1379</SUB>> ]
-"6210" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1380</SUB>> ]
-"6212" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1380</SUB>> ]
-"6174" [label = <(METHOD,CallNonvirtualFloatMethodA)<SUB>1377</SUB>> ]
-"6229" [label = <(METHOD_RETURN,jfloat)<SUB>1377</SUB>> ]
-  "6181" -> "6186" 
-  "6181" -> "6199" 
-  "6199" -> "6204" 
-  "6199" -> "6218" 
-  "6218" -> "6223" 
-  "6220" -> "6229" 
-  "6221" -> "6220" 
-  "6222" -> "6221" 
-  "6185" -> "6192" 
-  "6185" -> "6199" 
-  "6203" -> "6210" 
-  "6203" -> "6218" 
-  "6223" -> "6228" 
-  "6228" -> "6222" 
-  "6186" -> "6185" 
-  "6190" -> "6197" 
-  "6197" -> "6229" 
-  "6204" -> "6203" 
-  "6208" -> "6215" 
-  "6215" -> "6229" 
-  "6191" -> "6190" 
-  "6209" -> "6208" 
-  "6192" -> "6194" 
-  "6194" -> "6191" 
-  "6210" -> "6212" 
-  "6212" -> "6209" 
-  "6174" -> "6181" 
+digraph "CallNonvirtualVoidMethod" {  
+"6226" [label = <(va_start,va_start(ap, mid))<SUB>1336</SUB>> ]
+"6230" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1337</SUB>> ]
+"6233" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1338</SUB>> ]
+"6250" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1339</SUB>> ]
+"6268" [label = <(soa,soa(env))<SUB>1340</SUB>> ]
+"6270" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1341</SUB>> ]
+"6231" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1337</SUB>> ]
+"6237" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1338</SUB>> ]
+"6254" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1339</SUB>> ]
+"6238" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1338</SUB>> ]
+"6242" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1338</SUB>> ]
+"6249" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1338</SUB>> ]
+"6255" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1339</SUB>> ]
+"6259" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1339</SUB>> ]
+"6266" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1339</SUB>> ]
+"6243" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1338</SUB>> ]
+"6260" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1339</SUB>> ]
+"6244" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1338</SUB>> ]
+"6246" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1338</SUB>> ]
+"6261" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1339</SUB>> ]
+"6263" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1339</SUB>> ]
+"6219" [label = <(METHOD,CallNonvirtualVoidMethod)<SUB>1334</SUB>> ]
+"6275" [label = <(METHOD_RETURN,void)<SUB>1334</SUB>> ]
+  "6226" -> "6231" 
+  "6230" -> "6233" 
+  "6233" -> "6238" 
+  "6233" -> "6250" 
+  "6250" -> "6255" 
+  "6250" -> "6268" 
+  "6268" -> "6270" 
+  "6270" -> "6275" 
+  "6231" -> "6230" 
+  "6237" -> "6244" 
+  "6237" -> "6250" 
+  "6254" -> "6261" 
+  "6254" -> "6268" 
+  "6238" -> "6237" 
+  "6242" -> "6249" 
+  "6249" -> "6275" 
+  "6255" -> "6254" 
+  "6259" -> "6266" 
+  "6266" -> "6275" 
+  "6243" -> "6242" 
+  "6260" -> "6259" 
+  "6244" -> "6246" 
+  "6246" -> "6243" 
+  "6261" -> "6263" 
+  "6263" -> "6260" 
+  "6219" -> "6226" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/115-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/115-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/115-cfg.dot	2023-06-07 19:35:01.457387167 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/115-cfg.dot	2023-06-07 19:35:08.007386517 +0330
@@ -1,61 +1,45 @@
-digraph "CallNonvirtualDoubleMethod" {  
-"6238" [label = <(va_start,va_start(ap, mid))<SUB>1387</SUB>> ]
-"6242" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1388</SUB>> ]
-"6245" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1389</SUB>> ]
-"6263" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1390</SUB>> ]
-"6282" [label = <(soa,soa(env))<SUB>1391</SUB>> ]
-"6285" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, ap)))<SUB>1392</SUB>> ]
-"6291" [label = <(RETURN,return result.GetD();,return result.GetD();)<SUB>1393</SUB>> ]
-"6243" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1388</SUB>> ]
-"6286" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1392</SUB>> ]
-"6292" [label = <(GetD,result.GetD())<SUB>1393</SUB>> ]
-"6293" [label = <(&lt;operator&gt;.fieldAccess,result.GetD)<SUB>1393</SUB>> ]
-"6249" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1389</SUB>> ]
-"6267" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1390</SUB>> ]
-"6295" [label = <(FIELD_IDENTIFIER,GetD,GetD)<SUB>1393</SUB>> ]
-"6250" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1389</SUB>> ]
-"6254" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1389</SUB>> ]
-"6261" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1389</SUB>> ]
-"6268" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1390</SUB>> ]
-"6272" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1390</SUB>> ]
-"6279" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1390</SUB>> ]
-"6255" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1389</SUB>> ]
-"6273" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1390</SUB>> ]
-"6256" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1389</SUB>> ]
-"6258" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1389</SUB>> ]
-"6274" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1390</SUB>> ]
-"6276" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1390</SUB>> ]
-"6231" [label = <(METHOD,CallNonvirtualDoubleMethod)<SUB>1385</SUB>> ]
-"6296" [label = <(METHOD_RETURN,jdouble)<SUB>1385</SUB>> ]
-  "6238" -> "6243" 
-  "6242" -> "6245" 
-  "6245" -> "6250" 
-  "6245" -> "6263" 
-  "6263" -> "6268" 
-  "6263" -> "6282" 
-  "6282" -> "6286" 
-  "6285" -> "6295" 
-  "6291" -> "6296" 
-  "6243" -> "6242" 
-  "6286" -> "6285" 
-  "6292" -> "6291" 
-  "6293" -> "6292" 
-  "6249" -> "6256" 
-  "6249" -> "6263" 
-  "6267" -> "6274" 
-  "6267" -> "6282" 
-  "6295" -> "6293" 
-  "6250" -> "6249" 
-  "6254" -> "6261" 
-  "6261" -> "6296" 
-  "6268" -> "6267" 
-  "6272" -> "6279" 
-  "6279" -> "6296" 
-  "6255" -> "6254" 
-  "6273" -> "6272" 
-  "6256" -> "6258" 
-  "6258" -> "6255" 
-  "6274" -> "6276" 
-  "6276" -> "6273" 
-  "6231" -> "6238" 
+digraph "CallNonvirtualVoidMethodV" {  
+"6284" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1346</SUB>> ]
+"6301" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1347</SUB>> ]
+"6319" [label = <(soa,soa(env))<SUB>1348</SUB>> ]
+"6321" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1349</SUB>> ]
+"6288" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1346</SUB>> ]
+"6305" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1347</SUB>> ]
+"6289" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1346</SUB>> ]
+"6293" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1346</SUB>> ]
+"6300" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1346</SUB>> ]
+"6306" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1347</SUB>> ]
+"6310" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1347</SUB>> ]
+"6317" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1347</SUB>> ]
+"6294" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1346</SUB>> ]
+"6311" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1347</SUB>> ]
+"6295" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1346</SUB>> ]
+"6297" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1346</SUB>> ]
+"6312" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1347</SUB>> ]
+"6314" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1347</SUB>> ]
+"6277" [label = <(METHOD,CallNonvirtualVoidMethodV)<SUB>1344</SUB>> ]
+"6326" [label = <(METHOD_RETURN,void)<SUB>1344</SUB>> ]
+  "6284" -> "6289" 
+  "6284" -> "6301" 
+  "6301" -> "6306" 
+  "6301" -> "6319" 
+  "6319" -> "6321" 
+  "6321" -> "6326" 
+  "6288" -> "6295" 
+  "6288" -> "6301" 
+  "6305" -> "6312" 
+  "6305" -> "6319" 
+  "6289" -> "6288" 
+  "6293" -> "6300" 
+  "6300" -> "6326" 
+  "6306" -> "6305" 
+  "6310" -> "6317" 
+  "6317" -> "6326" 
+  "6294" -> "6293" 
+  "6311" -> "6310" 
+  "6295" -> "6297" 
+  "6297" -> "6294" 
+  "6312" -> "6314" 
+  "6314" -> "6311" 
+  "6277" -> "6284" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/116-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/116-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/116-cfg.dot	2023-06-07 19:35:01.457387167 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/116-cfg.dot	2023-06-07 19:35:08.007386517 +0330
@@ -1,53 +1,45 @@
-digraph "CallNonvirtualDoubleMethodV" {  
-"6305" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1398</SUB>> ]
-"6323" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1399</SUB>> ]
-"6342" [label = <(soa,soa(env))<SUB>1400</SUB>> ]
-"6344" [label = <(RETURN,return InvokeWithVarArgs(soa, obj, mid, args).GetD();,return InvokeWithVarArgs(soa, obj, mid, args).GetD();)<SUB>1401</SUB>> ]
-"6345" [label = <(GetD,InvokeWithVarArgs(soa, obj, mid, args).GetD())<SUB>1401</SUB>> ]
-"6346" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, obj, mid, args).GetD)<SUB>1401</SUB>> ]
-"6309" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1398</SUB>> ]
-"6327" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1399</SUB>> ]
-"6347" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1401</SUB>> ]
-"6352" [label = <(FIELD_IDENTIFIER,GetD,GetD)<SUB>1401</SUB>> ]
-"6310" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1398</SUB>> ]
-"6314" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1398</SUB>> ]
-"6321" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1398</SUB>> ]
-"6328" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1399</SUB>> ]
-"6332" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1399</SUB>> ]
-"6339" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1399</SUB>> ]
-"6315" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1398</SUB>> ]
-"6333" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1399</SUB>> ]
-"6316" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1398</SUB>> ]
-"6318" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1398</SUB>> ]
-"6334" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1399</SUB>> ]
-"6336" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1399</SUB>> ]
-"6298" [label = <(METHOD,CallNonvirtualDoubleMethodV)<SUB>1396</SUB>> ]
-"6353" [label = <(METHOD_RETURN,jdouble)<SUB>1396</SUB>> ]
-  "6305" -> "6310" 
-  "6305" -> "6323" 
-  "6323" -> "6328" 
-  "6323" -> "6342" 
-  "6342" -> "6347" 
-  "6344" -> "6353" 
+digraph "CallNonvirtualVoidMethodA" {  
+"6335" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1354</SUB>> ]
+"6352" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1355</SUB>> ]
+"6370" [label = <(soa,soa(env))<SUB>1356</SUB>> ]
+"6372" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1357</SUB>> ]
+"6339" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1354</SUB>> ]
+"6356" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1355</SUB>> ]
+"6340" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1354</SUB>> ]
+"6344" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1354</SUB>> ]
+"6351" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1354</SUB>> ]
+"6357" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1355</SUB>> ]
+"6361" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1355</SUB>> ]
+"6368" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1355</SUB>> ]
+"6345" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1354</SUB>> ]
+"6362" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1355</SUB>> ]
+"6346" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1354</SUB>> ]
+"6348" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1354</SUB>> ]
+"6363" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1355</SUB>> ]
+"6365" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1355</SUB>> ]
+"6328" [label = <(METHOD,CallNonvirtualVoidMethodA)<SUB>1352</SUB>> ]
+"6377" [label = <(METHOD_RETURN,void)<SUB>1352</SUB>> ]
+  "6335" -> "6340" 
+  "6335" -> "6352" 
+  "6352" -> "6357" 
+  "6352" -> "6370" 
+  "6370" -> "6372" 
+  "6372" -> "6377" 
+  "6339" -> "6346" 
+  "6339" -> "6352" 
+  "6356" -> "6363" 
+  "6356" -> "6370" 
+  "6340" -> "6339" 
+  "6344" -> "6351" 
+  "6351" -> "6377" 
+  "6357" -> "6356" 
+  "6361" -> "6368" 
+  "6368" -> "6377" 
   "6345" -> "6344" 
-  "6346" -> "6345" 
-  "6309" -> "6316" 
-  "6309" -> "6323" 
-  "6327" -> "6334" 
-  "6327" -> "6342" 
-  "6347" -> "6352" 
-  "6352" -> "6346" 
-  "6310" -> "6309" 
-  "6314" -> "6321" 
-  "6321" -> "6353" 
-  "6328" -> "6327" 
-  "6332" -> "6339" 
-  "6339" -> "6353" 
-  "6315" -> "6314" 
-  "6333" -> "6332" 
-  "6316" -> "6318" 
-  "6318" -> "6315" 
-  "6334" -> "6336" 
-  "6336" -> "6333" 
-  "6298" -> "6305" 
+  "6362" -> "6361" 
+  "6346" -> "6348" 
+  "6348" -> "6345" 
+  "6363" -> "6365" 
+  "6365" -> "6362" 
+  "6328" -> "6335" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/117-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/117-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/117-cfg.dot	2023-06-07 19:35:01.457387167 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/117-cfg.dot	2023-06-07 19:35:08.007386517 +0330
@@ -1,53 +1,71 @@
-digraph "CallNonvirtualDoubleMethodA" {  
-"6362" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1406</SUB>> ]
-"6380" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1407</SUB>> ]
-"6399" [label = <(soa,soa(env))<SUB>1408</SUB>> ]
-"6401" [label = <(RETURN,return InvokeWithJValues(soa, obj, mid, args).GetD();,return InvokeWithJValues(soa, obj, mid, args).GetD();)<SUB>1409</SUB>> ]
-"6402" [label = <(GetD,InvokeWithJValues(soa, obj, mid, args).GetD())<SUB>1409</SUB>> ]
-"6403" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, obj, mid, args).GetD)<SUB>1409</SUB>> ]
-"6366" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1406</SUB>> ]
-"6384" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1407</SUB>> ]
-"6404" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1409</SUB>> ]
-"6409" [label = <(FIELD_IDENTIFIER,GetD,GetD)<SUB>1409</SUB>> ]
-"6367" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1406</SUB>> ]
-"6371" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1406</SUB>> ]
-"6378" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1406</SUB>> ]
-"6385" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1407</SUB>> ]
-"6389" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1407</SUB>> ]
-"6396" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1407</SUB>> ]
-"6372" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1406</SUB>> ]
-"6390" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1407</SUB>> ]
-"6373" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1406</SUB>> ]
-"6375" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1406</SUB>> ]
-"6391" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1407</SUB>> ]
-"6393" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1407</SUB>> ]
-"6355" [label = <(METHOD,CallNonvirtualDoubleMethodA)<SUB>1404</SUB>> ]
-"6410" [label = <(METHOD_RETURN,jdouble)<SUB>1404</SUB>> ]
-  "6362" -> "6367" 
-  "6362" -> "6380" 
-  "6380" -> "6385" 
-  "6380" -> "6399" 
-  "6399" -> "6404" 
-  "6401" -> "6410" 
-  "6402" -> "6401" 
-  "6403" -> "6402" 
-  "6366" -> "6373" 
-  "6366" -> "6380" 
-  "6384" -> "6391" 
-  "6384" -> "6399" 
-  "6404" -> "6409" 
-  "6409" -> "6403" 
-  "6367" -> "6366" 
-  "6371" -> "6378" 
-  "6378" -> "6410" 
-  "6385" -> "6384" 
+digraph "GetFieldID" {  
+"6385" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_class))<SUB>1361</SUB>> ]
+"6403" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(name))<SUB>1362</SUB>> ]
+"6421" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(sig))<SUB>1363</SUB>> ]
+"6440" [label = <(soa,soa(env))<SUB>1364</SUB>> ]
+"6442" [label = <(RETURN,return FindFieldID&lt;kEnableIndexIds&gt;(soa, java_class, name, sig, false);,return FindFieldID&lt;kEnableIndexIds&gt;(soa, java_class, name, sig, false);)<SUB>1365</SUB>> ]
+"6443" [label = <(&lt;operator&gt;.greaterThan,FindFieldID&lt;kEnableIndexIds&gt;(soa, java_class, name, sig, false))<SUB>1365</SUB>> ]
+"6444" [label = <(&lt;operator&gt;.lessThan,FindFieldID&lt;kEnableIndexIds)<SUB>1365</SUB>> ]
+"6447" [label = <(&lt;operator&gt;.bracketedPrimary,(soa, java_class, name, sig, false))<SUB>1365</SUB>> ]
+"6389" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>1361</SUB>> ]
+"6407" [label = <(UNLIKELY,UNLIKELY((name) == nullptr))<SUB>1362</SUB>> ]
+"6425" [label = <(UNLIKELY,UNLIKELY((sig) == nullptr))<SUB>1363</SUB>> ]
+"6448" [label = <(&lt;operator&gt;.expressionList,soa, java_class, name, sig, false)<SUB>1365</SUB>> ]
+"6390" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>1361</SUB>> ]
+"6394" [label = <(CHECK_NON_NULL_ARGUMENT(java_class),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class == null&quot;))<SUB>1361</SUB>> ]
+"6401" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_class),CHECK_NON_NULL_ARGUMENT(java_class))<SUB>1361</SUB>> ]
+"6408" [label = <(&lt;operator&gt;.equals,(name) == nullptr)<SUB>1362</SUB>> ]
+"6412" [label = <(CHECK_NON_NULL_ARGUMENT(name),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;name == null&quot;))<SUB>1362</SUB>> ]
+"6419" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(name),CHECK_NON_NULL_ARGUMENT(name))<SUB>1362</SUB>> ]
+"6426" [label = <(&lt;operator&gt;.equals,(sig) == nullptr)<SUB>1363</SUB>> ]
+"6430" [label = <(CHECK_NON_NULL_ARGUMENT(sig),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;sig == null&quot;))<SUB>1363</SUB>> ]
+"6437" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(sig),CHECK_NON_NULL_ARGUMENT(sig))<SUB>1363</SUB>> ]
+"6395" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1361</SUB>> ]
+"6413" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1362</SUB>> ]
+"6431" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1363</SUB>> ]
+"6396" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1361</SUB>> ]
+"6398" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1361</SUB>> ]
+"6414" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1362</SUB>> ]
+"6416" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1362</SUB>> ]
+"6432" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1363</SUB>> ]
+"6434" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1363</SUB>> ]
+"6379" [label = <(METHOD,GetFieldID)<SUB>1360</SUB>> ]
+"6454" [label = <(METHOD_RETURN,jfieldID)<SUB>1360</SUB>> ]
+  "6385" -> "6390" 
+  "6385" -> "6403" 
+  "6403" -> "6408" 
+  "6403" -> "6421" 
+  "6421" -> "6426" 
+  "6421" -> "6440" 
+  "6440" -> "6444" 
+  "6442" -> "6454" 
+  "6443" -> "6442" 
+  "6444" -> "6448" 
+  "6447" -> "6443" 
   "6389" -> "6396" 
-  "6396" -> "6410" 
-  "6372" -> "6371" 
+  "6389" -> "6403" 
+  "6407" -> "6414" 
+  "6407" -> "6421" 
+  "6425" -> "6432" 
+  "6425" -> "6440" 
+  "6448" -> "6447" 
   "6390" -> "6389" 
-  "6373" -> "6375" 
-  "6375" -> "6372" 
-  "6391" -> "6393" 
-  "6393" -> "6390" 
-  "6355" -> "6362" 
+  "6394" -> "6401" 
+  "6401" -> "6454" 
+  "6408" -> "6407" 
+  "6412" -> "6419" 
+  "6419" -> "6454" 
+  "6426" -> "6425" 
+  "6430" -> "6437" 
+  "6437" -> "6454" 
+  "6395" -> "6394" 
+  "6413" -> "6412" 
+  "6431" -> "6430" 
+  "6396" -> "6398" 
+  "6398" -> "6395" 
+  "6414" -> "6416" 
+  "6416" -> "6413" 
+  "6432" -> "6434" 
+  "6434" -> "6431" 
+  "6379" -> "6385" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/118-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/118-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/118-cfg.dot	2023-06-07 19:35:01.457387167 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/118-cfg.dot	2023-06-07 19:35:08.007386517 +0330
@@ -1,51 +1,71 @@
-digraph "CallNonvirtualVoidMethod" {  
-"6419" [label = <(va_start,va_start(ap, mid))<SUB>1414</SUB>> ]
-"6423" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1415</SUB>> ]
-"6426" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1416</SUB>> ]
-"6443" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1417</SUB>> ]
-"6461" [label = <(soa,soa(env))<SUB>1418</SUB>> ]
-"6463" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1419</SUB>> ]
-"6424" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1415</SUB>> ]
-"6430" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1416</SUB>> ]
-"6447" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1417</SUB>> ]
-"6431" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1416</SUB>> ]
-"6435" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1416</SUB>> ]
-"6442" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1416</SUB>> ]
-"6448" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1417</SUB>> ]
-"6452" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1417</SUB>> ]
-"6459" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1417</SUB>> ]
-"6436" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1416</SUB>> ]
-"6453" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1417</SUB>> ]
-"6437" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1416</SUB>> ]
-"6439" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1416</SUB>> ]
-"6454" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1417</SUB>> ]
-"6456" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1417</SUB>> ]
-"6412" [label = <(METHOD,CallNonvirtualVoidMethod)<SUB>1412</SUB>> ]
-"6468" [label = <(METHOD_RETURN,void)<SUB>1412</SUB>> ]
-  "6419" -> "6424" 
-  "6423" -> "6426" 
-  "6426" -> "6431" 
-  "6426" -> "6443" 
-  "6443" -> "6448" 
-  "6443" -> "6461" 
-  "6461" -> "6463" 
-  "6463" -> "6468" 
-  "6424" -> "6423" 
-  "6430" -> "6437" 
-  "6430" -> "6443" 
-  "6447" -> "6454" 
-  "6447" -> "6461" 
-  "6431" -> "6430" 
-  "6435" -> "6442" 
-  "6442" -> "6468" 
-  "6448" -> "6447" 
-  "6452" -> "6459" 
-  "6459" -> "6468" 
-  "6436" -> "6435" 
-  "6453" -> "6452" 
-  "6437" -> "6439" 
-  "6439" -> "6436" 
-  "6454" -> "6456" 
-  "6456" -> "6453" 
-  "6412" -> "6419" 
+digraph "GetStaticFieldID" {  
+"6462" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_class))<SUB>1370</SUB>> ]
+"6480" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(name))<SUB>1371</SUB>> ]
+"6498" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(sig))<SUB>1372</SUB>> ]
+"6517" [label = <(soa,soa(env))<SUB>1373</SUB>> ]
+"6519" [label = <(RETURN,return FindFieldID&lt;kEnableIndexIds&gt;(soa, java_class, name, sig, true);,return FindFieldID&lt;kEnableIndexIds&gt;(soa, java_class, name, sig, true);)<SUB>1374</SUB>> ]
+"6520" [label = <(&lt;operator&gt;.greaterThan,FindFieldID&lt;kEnableIndexIds&gt;(soa, java_class, name, sig, true))<SUB>1374</SUB>> ]
+"6521" [label = <(&lt;operator&gt;.lessThan,FindFieldID&lt;kEnableIndexIds)<SUB>1374</SUB>> ]
+"6524" [label = <(&lt;operator&gt;.bracketedPrimary,(soa, java_class, name, sig, true))<SUB>1374</SUB>> ]
+"6466" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>1370</SUB>> ]
+"6484" [label = <(UNLIKELY,UNLIKELY((name) == nullptr))<SUB>1371</SUB>> ]
+"6502" [label = <(UNLIKELY,UNLIKELY((sig) == nullptr))<SUB>1372</SUB>> ]
+"6525" [label = <(&lt;operator&gt;.expressionList,soa, java_class, name, sig, true)<SUB>1374</SUB>> ]
+"6467" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>1370</SUB>> ]
+"6471" [label = <(CHECK_NON_NULL_ARGUMENT(java_class),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class == null&quot;))<SUB>1370</SUB>> ]
+"6478" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_class),CHECK_NON_NULL_ARGUMENT(java_class))<SUB>1370</SUB>> ]
+"6485" [label = <(&lt;operator&gt;.equals,(name) == nullptr)<SUB>1371</SUB>> ]
+"6489" [label = <(CHECK_NON_NULL_ARGUMENT(name),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;name == null&quot;))<SUB>1371</SUB>> ]
+"6496" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(name),CHECK_NON_NULL_ARGUMENT(name))<SUB>1371</SUB>> ]
+"6503" [label = <(&lt;operator&gt;.equals,(sig) == nullptr)<SUB>1372</SUB>> ]
+"6507" [label = <(CHECK_NON_NULL_ARGUMENT(sig),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;sig == null&quot;))<SUB>1372</SUB>> ]
+"6514" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(sig),CHECK_NON_NULL_ARGUMENT(sig))<SUB>1372</SUB>> ]
+"6472" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1370</SUB>> ]
+"6490" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1371</SUB>> ]
+"6508" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1372</SUB>> ]
+"6473" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1370</SUB>> ]
+"6475" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1370</SUB>> ]
+"6491" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1371</SUB>> ]
+"6493" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1371</SUB>> ]
+"6509" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1372</SUB>> ]
+"6511" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1372</SUB>> ]
+"6456" [label = <(METHOD,GetStaticFieldID)<SUB>1368</SUB>> ]
+"6531" [label = <(METHOD_RETURN,jfieldID)<SUB>1368</SUB>> ]
+  "6462" -> "6467" 
+  "6462" -> "6480" 
+  "6480" -> "6485" 
+  "6480" -> "6498" 
+  "6498" -> "6503" 
+  "6498" -> "6517" 
+  "6517" -> "6521" 
+  "6519" -> "6531" 
+  "6520" -> "6519" 
+  "6521" -> "6525" 
+  "6524" -> "6520" 
+  "6466" -> "6473" 
+  "6466" -> "6480" 
+  "6484" -> "6491" 
+  "6484" -> "6498" 
+  "6502" -> "6509" 
+  "6502" -> "6517" 
+  "6525" -> "6524" 
+  "6467" -> "6466" 
+  "6471" -> "6478" 
+  "6478" -> "6531" 
+  "6485" -> "6484" 
+  "6489" -> "6496" 
+  "6496" -> "6531" 
+  "6503" -> "6502" 
+  "6507" -> "6514" 
+  "6514" -> "6531" 
+  "6472" -> "6471" 
+  "6490" -> "6489" 
+  "6508" -> "6507" 
+  "6473" -> "6475" 
+  "6475" -> "6472" 
+  "6491" -> "6493" 
+  "6493" -> "6490" 
+  "6509" -> "6511" 
+  "6511" -> "6508" 
+  "6456" -> "6462" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/119-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/119-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/119-cfg.dot	2023-06-07 19:35:01.457387167 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/119-cfg.dot	2023-06-07 19:35:08.007386517 +0330
@@ -1,45 +1,93 @@
-digraph "CallNonvirtualVoidMethodV" {  
-"6477" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1424</SUB>> ]
-"6494" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1425</SUB>> ]
-"6512" [label = <(soa,soa(env))<SUB>1426</SUB>> ]
-"6514" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1427</SUB>> ]
-"6481" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1424</SUB>> ]
-"6498" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1425</SUB>> ]
-"6482" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1424</SUB>> ]
-"6486" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1424</SUB>> ]
-"6493" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1424</SUB>> ]
-"6499" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1425</SUB>> ]
-"6503" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1425</SUB>> ]
-"6510" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1425</SUB>> ]
-"6487" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1424</SUB>> ]
-"6504" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1425</SUB>> ]
-"6488" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1424</SUB>> ]
-"6490" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1424</SUB>> ]
-"6505" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1425</SUB>> ]
-"6507" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1425</SUB>> ]
-"6470" [label = <(METHOD,CallNonvirtualVoidMethodV)<SUB>1422</SUB>> ]
-"6519" [label = <(METHOD_RETURN,void)<SUB>1422</SUB>> ]
-  "6477" -> "6482" 
-  "6477" -> "6494" 
-  "6494" -> "6499" 
-  "6494" -> "6512" 
-  "6512" -> "6514" 
-  "6514" -> "6519" 
-  "6481" -> "6488" 
-  "6481" -> "6494" 
-  "6498" -> "6505" 
-  "6498" -> "6512" 
-  "6482" -> "6481" 
-  "6486" -> "6493" 
-  "6493" -> "6519" 
-  "6499" -> "6498" 
-  "6503" -> "6510" 
-  "6510" -> "6519" 
-  "6487" -> "6486" 
-  "6504" -> "6503" 
-  "6488" -> "6490" 
-  "6490" -> "6487" 
-  "6505" -> "6507" 
-  "6507" -> "6504" 
-  "6470" -> "6477" 
+digraph "GetObjectField" {  
+"6538" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(obj))<SUB>1378</SUB>> ]
+"6556" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(fid))<SUB>1379</SUB>> ]
+"6575" [label = <(soa,soa(env))<SUB>1380</SUB>> ]
+"6578" [label = <(&lt;operator&gt;.assignment,* f = jni::DecodeArtField&lt;kEnableIndexIds&gt;(fid))<SUB>1381</SUB>> ]
+"6587" [label = <(NotifyGetField,NotifyGetField(f, obj))<SUB>1382</SUB>> ]
+"6590" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; o = soa.Decode&lt;mirror::Object&gt;(obj))<SUB>1383</SUB>> ]
+"6607" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(f-&gt;GetObject(o));,return soa.AddLocalReference&lt;jobject&gt;(f-&gt;GetObject(o));)<SUB>1384</SUB>> ]
+"6580" [label = <(&lt;operator&gt;.greaterThan,jni::DecodeArtField&lt;kEnableIndexIds&gt;(fid))<SUB>1381</SUB>> ]
+"6591" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; o)<SUB>1383</SUB>> ]
+"6598" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(obj))<SUB>1383</SUB>> ]
+"6608" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(f-&gt;GetObject(o)))<SUB>1384</SUB>> ]
+"6581" [label = <(&lt;operator&gt;.lessThan,jni::DecodeArtField&lt;kEnableIndexIds)<SUB>1381</SUB>> ]
+"6592" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>1383</SUB>> ]
+"6599" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>1383</SUB>> ]
+"6609" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>1384</SUB>> ]
+"6614" [label = <(GetObject,f-&gt;GetObject(o))<SUB>1384</SUB>> ]
+"6542" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1378</SUB>> ]
+"6560" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1379</SUB>> ]
+"6582" [label = <(&lt;operator&gt;.fieldAccess,jni::DecodeArtField)<SUB>1381</SUB>> ]
+"6594" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1383</SUB>> ]
+"6600" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1383</SUB>> ]
+"6603" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1383</SUB>> ]
+"6610" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1384</SUB>> ]
+"6615" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetObject)<SUB>1384</SUB>> ]
+"6543" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1378</SUB>> ]
+"6547" [label = <(CHECK_NON_NULL_ARGUMENT(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1378</SUB>> ]
+"6554" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(obj),CHECK_NON_NULL_ARGUMENT(obj))<SUB>1378</SUB>> ]
+"6561" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1379</SUB>> ]
+"6565" [label = <(CHECK_NON_NULL_ARGUMENT(fid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1379</SUB>> ]
+"6572" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(fid),CHECK_NON_NULL_ARGUMENT(fid))<SUB>1379</SUB>> ]
+"6584" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1381</SUB>> ]
+"6596" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1383</SUB>> ]
+"6602" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1383</SUB>> ]
+"6605" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1383</SUB>> ]
+"6612" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1384</SUB>> ]
+"6617" [label = <(FIELD_IDENTIFIER,GetObject,GetObject)<SUB>1384</SUB>> ]
+"6548" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1378</SUB>> ]
+"6566" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1379</SUB>> ]
+"6549" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1378</SUB>> ]
+"6551" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1378</SUB>> ]
+"6567" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1379</SUB>> ]
+"6569" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1379</SUB>> ]
+"6533" [label = <(METHOD,GetObjectField)<SUB>1377</SUB>> ]
+"6619" [label = <(METHOD_RETURN,jobject)<SUB>1377</SUB>> ]
+  "6538" -> "6543" 
+  "6538" -> "6556" 
+  "6556" -> "6561" 
+  "6556" -> "6575" 
+  "6575" -> "6584" 
+  "6578" -> "6587" 
+  "6587" -> "6596" 
+  "6590" -> "6612" 
+  "6607" -> "6619" 
+  "6580" -> "6578" 
+  "6591" -> "6602" 
+  "6598" -> "6590" 
+  "6608" -> "6607" 
+  "6581" -> "6580" 
+  "6592" -> "6591" 
+  "6599" -> "6598" 
+  "6609" -> "6617" 
+  "6614" -> "6608" 
+  "6542" -> "6549" 
+  "6542" -> "6556" 
+  "6560" -> "6567" 
+  "6560" -> "6575" 
+  "6582" -> "6581" 
+  "6594" -> "6592" 
+  "6600" -> "6605" 
+  "6603" -> "6599" 
+  "6610" -> "6609" 
+  "6615" -> "6614" 
+  "6543" -> "6542" 
+  "6547" -> "6554" 
+  "6554" -> "6619" 
+  "6561" -> "6560" 
+  "6565" -> "6572" 
+  "6572" -> "6619" 
+  "6584" -> "6582" 
+  "6596" -> "6594" 
+  "6602" -> "6600" 
+  "6605" -> "6603" 
+  "6612" -> "6610" 
+  "6617" -> "6615" 
+  "6548" -> "6547" 
+  "6566" -> "6565" 
+  "6549" -> "6551" 
+  "6551" -> "6548" 
+  "6567" -> "6569" 
+  "6569" -> "6566" 
+  "6533" -> "6538" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/12-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/12-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/12-cfg.dot	2023-06-07 19:35:01.337387177 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/12-cfg.dot	2023-06-07 19:35:07.907386529 +0330
@@ -1,63 +1,5 @@
-digraph "NormalizeJniClassDescriptor" {  
-"345" [label = <(RETURN,return result;,return result;)<SUB>280</SUB>> ]
-"288" [label = <(&lt;operator&gt;.equals,name[0] == '[')<SUB>267</SUB>> ]
-"309" [label = <(&lt;operator&gt;.notEquals,result.find('.') != std::string::npos)<SUB>275</SUB>> ]
-"289" [label = <(&lt;operator&gt;.indirectIndexAccess,name[0])<SUB>267</SUB>> ]
-"294" [label = <(&lt;operator&gt;.assignment,result = name)<SUB>268</SUB>> ]
-"310" [label = <(find,result.find('.'))<SUB>275</SUB>> ]
-"315" [label = <(&lt;operator&gt;.fieldAccess,std::string::npos)<SUB>275</SUB>> ]
-"321" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;Call to JNI FindClass with dots in name: &quot;\012 &lt;&lt; &quot;\&quot;&quot; &lt;&lt; name &lt;&lt; &quot;\&quot;&quot;)<SUB>276</SUB>> ]
-"331" [label = <(std::replace,std::replace(result.begin(), result.end(), '.', '/'))<SUB>278</SUB>> ]
-"299" [label = <(&lt;operator&gt;.assignmentPlus,result += 'L')<SUB>270</SUB>> ]
-"302" [label = <(&lt;operator&gt;.assignmentPlus,result += name)<SUB>271</SUB>> ]
-"305" [label = <(&lt;operator&gt;.assignmentPlus,result += ';')<SUB>272</SUB>> ]
-"311" [label = <(&lt;operator&gt;.fieldAccess,result.find)<SUB>275</SUB>> ]
-"316" [label = <(&lt;operator&gt;.fieldAccess,std::string)<SUB>275</SUB>> ]
-"319" [label = <(FIELD_IDENTIFIER,npos,npos)<SUB>275</SUB>> ]
-"322" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;Call to JNI FindClass with dots in name: &quot;\012 &lt;&lt; &quot;\&quot;&quot; &lt;&lt; name)<SUB>276</SUB>> ]
-"332" [label = <(&lt;operator&gt;.fieldAccess,std::replace)<SUB>278</SUB>> ]
-"335" [label = <(begin,result.begin())<SUB>278</SUB>> ]
-"339" [label = <(end,result.end())<SUB>278</SUB>> ]
-"313" [label = <(FIELD_IDENTIFIER,find,find)<SUB>275</SUB>> ]
-"323" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;Call to JNI FindClass with dots in name: &quot;\012 &lt;&lt; &quot;\&quot;&quot;)<SUB>276</SUB>> ]
-"334" [label = <(FIELD_IDENTIFIER,replace,replace)<SUB>278</SUB>> ]
-"336" [label = <(&lt;operator&gt;.fieldAccess,result.begin)<SUB>278</SUB>> ]
-"340" [label = <(&lt;operator&gt;.fieldAccess,result.end)<SUB>278</SUB>> ]
-"324" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;Call to JNI FindClass with dots in name: &quot;)<SUB>276</SUB>> ]
-"338" [label = <(FIELD_IDENTIFIER,begin,begin)<SUB>278</SUB>> ]
-"342" [label = <(FIELD_IDENTIFIER,end,end)<SUB>278</SUB>> ]
-"325" [label = <(LOG,LOG(WARNING))<SUB>276</SUB>> ]
-"283" [label = <(METHOD,NormalizeJniClassDescriptor)<SUB>264</SUB>> ]
-"347" [label = <(METHOD_RETURN,string)<SUB>264</SUB>> ]
-  "345" -> "347" 
-  "288" -> "294" 
-  "288" -> "299" 
-  "309" -> "325" 
-  "309" -> "345" 
-  "289" -> "288" 
-  "294" -> "313" 
-  "310" -> "316" 
-  "315" -> "309" 
-  "321" -> "334" 
-  "331" -> "345" 
-  "299" -> "302" 
-  "302" -> "305" 
-  "305" -> "313" 
-  "311" -> "310" 
-  "316" -> "319" 
-  "319" -> "315" 
-  "322" -> "321" 
-  "332" -> "338" 
-  "335" -> "342" 
-  "339" -> "331" 
-  "313" -> "311" 
-  "323" -> "322" 
-  "334" -> "332" 
-  "336" -> "335" 
-  "340" -> "339" 
-  "324" -> "323" 
-  "338" -> "336" 
-  "342" -> "340" 
-  "325" -> "324" 
-  "283" -> "289" 
+digraph "FindFieldID" {  
+"211" [label = <(METHOD,FindFieldID)<SUB>260</SUB>> ]
+"218" [label = <(METHOD_RETURN,jfieldID)<SUB>260</SUB>> ]
+  "211" -> "218" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/120-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/120-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/120-cfg.dot	2023-06-07 19:35:01.457387167 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/120-cfg.dot	2023-06-07 19:35:08.007386517 +0330
@@ -1,45 +1,59 @@
-digraph "CallNonvirtualVoidMethodA" {  
-"6528" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1432</SUB>> ]
-"6545" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1433</SUB>> ]
-"6563" [label = <(soa,soa(env))<SUB>1434</SUB>> ]
-"6565" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1435</SUB>> ]
-"6532" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1432</SUB>> ]
-"6549" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1433</SUB>> ]
-"6533" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1432</SUB>> ]
-"6537" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1432</SUB>> ]
-"6544" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1432</SUB>> ]
-"6550" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1433</SUB>> ]
-"6554" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1433</SUB>> ]
-"6561" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1433</SUB>> ]
-"6538" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1432</SUB>> ]
-"6555" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1433</SUB>> ]
-"6539" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1432</SUB>> ]
-"6541" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1432</SUB>> ]
-"6556" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1433</SUB>> ]
-"6558" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1433</SUB>> ]
-"6521" [label = <(METHOD,CallNonvirtualVoidMethodA)<SUB>1430</SUB>> ]
-"6570" [label = <(METHOD_RETURN,void)<SUB>1430</SUB>> ]
-  "6528" -> "6533" 
-  "6528" -> "6545" 
-  "6545" -> "6550" 
-  "6545" -> "6563" 
-  "6563" -> "6565" 
-  "6565" -> "6570" 
-  "6532" -> "6539" 
-  "6532" -> "6545" 
-  "6549" -> "6556" 
-  "6549" -> "6563" 
-  "6533" -> "6532" 
-  "6537" -> "6544" 
-  "6544" -> "6570" 
-  "6550" -> "6549" 
-  "6554" -> "6561" 
-  "6561" -> "6570" 
-  "6538" -> "6537" 
-  "6555" -> "6554" 
-  "6539" -> "6541" 
-  "6541" -> "6538" 
-  "6556" -> "6558" 
-  "6558" -> "6555" 
-  "6521" -> "6528" 
+digraph "GetStaticObjectField" {  
+"6626" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(fid))<SUB>1388</SUB>> ]
+"6645" [label = <(soa,soa(env))<SUB>1389</SUB>> ]
+"6648" [label = <(&lt;operator&gt;.assignment,* f = jni::DecodeArtField&lt;kEnableIndexIds&gt;(fid))<SUB>1390</SUB>> ]
+"6657" [label = <(NotifyGetField,NotifyGetField(f, nullptr))<SUB>1391</SUB>> ]
+"6660" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(f-&gt;GetObject(f-&gt;GetDeclaringClass()));,return soa.AddLocalReference&lt;jobject&gt;(f-&gt;GetObject(f-&gt;GetDeclaringClass()));)<SUB>1392</SUB>> ]
+"6650" [label = <(&lt;operator&gt;.greaterThan,jni::DecodeArtField&lt;kEnableIndexIds&gt;(fid))<SUB>1390</SUB>> ]
+"6661" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(f-&gt;GetObject(f-&gt;GetDeclaringClass())))<SUB>1392</SUB>> ]
+"6651" [label = <(&lt;operator&gt;.lessThan,jni::DecodeArtField&lt;kEnableIndexIds)<SUB>1390</SUB>> ]
+"6662" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>1392</SUB>> ]
+"6667" [label = <(GetObject,f-&gt;GetObject(f-&gt;GetDeclaringClass()))<SUB>1392</SUB>> ]
+"6630" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1388</SUB>> ]
+"6652" [label = <(&lt;operator&gt;.fieldAccess,jni::DecodeArtField)<SUB>1390</SUB>> ]
+"6663" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1392</SUB>> ]
+"6668" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetObject)<SUB>1392</SUB>> ]
+"6671" [label = <(GetDeclaringClass,f-&gt;GetDeclaringClass())<SUB>1392</SUB>> ]
+"6631" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1388</SUB>> ]
+"6635" [label = <(CHECK_NON_NULL_ARGUMENT(fid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1388</SUB>> ]
+"6642" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(fid),CHECK_NON_NULL_ARGUMENT(fid))<SUB>1388</SUB>> ]
+"6654" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1390</SUB>> ]
+"6665" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1392</SUB>> ]
+"6670" [label = <(FIELD_IDENTIFIER,GetObject,GetObject)<SUB>1392</SUB>> ]
+"6672" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1392</SUB>> ]
+"6636" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1388</SUB>> ]
+"6674" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1392</SUB>> ]
+"6637" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1388</SUB>> ]
+"6639" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1388</SUB>> ]
+"6621" [label = <(METHOD,GetStaticObjectField)<SUB>1387</SUB>> ]
+"6675" [label = <(METHOD_RETURN,jobject)<SUB>1387</SUB>> ]
+  "6626" -> "6631" 
+  "6626" -> "6645" 
+  "6645" -> "6654" 
+  "6648" -> "6657" 
+  "6657" -> "6665" 
+  "6660" -> "6675" 
+  "6650" -> "6648" 
+  "6661" -> "6660" 
+  "6651" -> "6650" 
+  "6662" -> "6670" 
+  "6667" -> "6661" 
+  "6630" -> "6637" 
+  "6630" -> "6645" 
+  "6652" -> "6651" 
+  "6663" -> "6662" 
+  "6668" -> "6674" 
+  "6671" -> "6667" 
+  "6631" -> "6630" 
+  "6635" -> "6642" 
+  "6642" -> "6675" 
+  "6654" -> "6652" 
+  "6665" -> "6663" 
+  "6670" -> "6668" 
+  "6672" -> "6671" 
+  "6636" -> "6635" 
+  "6674" -> "6672" 
+  "6637" -> "6639" 
+  "6639" -> "6636" 
+  "6621" -> "6626" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/121-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/121-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/121-cfg.dot	2023-06-07 19:35:01.467387165 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/121-cfg.dot	2023-06-07 19:35:08.007386517 +0330
@@ -1,71 +1,111 @@
-digraph "GetFieldID" {  
-"6578" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_class))<SUB>1439</SUB>> ]
-"6596" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(name))<SUB>1440</SUB>> ]
-"6614" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(sig))<SUB>1441</SUB>> ]
-"6633" [label = <(soa,soa(env))<SUB>1442</SUB>> ]
-"6635" [label = <(RETURN,return FindFieldID&lt;kEnableIndexIds&gt;(soa, java_class, name, sig, false);,return FindFieldID&lt;kEnableIndexIds&gt;(soa, java_class, name, sig, false);)<SUB>1443</SUB>> ]
-"6636" [label = <(&lt;operator&gt;.greaterThan,FindFieldID&lt;kEnableIndexIds&gt;(soa, java_class, name, sig, false))<SUB>1443</SUB>> ]
-"6637" [label = <(&lt;operator&gt;.lessThan,FindFieldID&lt;kEnableIndexIds)<SUB>1443</SUB>> ]
-"6640" [label = <(&lt;operator&gt;.bracketedPrimary,(soa, java_class, name, sig, false))<SUB>1443</SUB>> ]
-"6582" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>1439</SUB>> ]
-"6600" [label = <(UNLIKELY,UNLIKELY((name) == nullptr))<SUB>1440</SUB>> ]
-"6618" [label = <(UNLIKELY,UNLIKELY((sig) == nullptr))<SUB>1441</SUB>> ]
-"6641" [label = <(&lt;operator&gt;.expressionList,soa, java_class, name, sig, false)<SUB>1443</SUB>> ]
-"6583" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>1439</SUB>> ]
-"6587" [label = <(CHECK_NON_NULL_ARGUMENT(java_class),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class == null&quot;))<SUB>1439</SUB>> ]
-"6594" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_class),CHECK_NON_NULL_ARGUMENT(java_class))<SUB>1439</SUB>> ]
-"6601" [label = <(&lt;operator&gt;.equals,(name) == nullptr)<SUB>1440</SUB>> ]
-"6605" [label = <(CHECK_NON_NULL_ARGUMENT(name),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;name == null&quot;))<SUB>1440</SUB>> ]
-"6612" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(name),CHECK_NON_NULL_ARGUMENT(name))<SUB>1440</SUB>> ]
-"6619" [label = <(&lt;operator&gt;.equals,(sig) == nullptr)<SUB>1441</SUB>> ]
-"6623" [label = <(CHECK_NON_NULL_ARGUMENT(sig),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;sig == null&quot;))<SUB>1441</SUB>> ]
-"6630" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(sig),CHECK_NON_NULL_ARGUMENT(sig))<SUB>1441</SUB>> ]
-"6588" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1439</SUB>> ]
-"6606" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1440</SUB>> ]
-"6624" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1441</SUB>> ]
-"6589" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1439</SUB>> ]
-"6591" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1439</SUB>> ]
-"6607" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1440</SUB>> ]
-"6609" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1440</SUB>> ]
-"6625" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1441</SUB>> ]
-"6627" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1441</SUB>> ]
-"6572" [label = <(METHOD,GetFieldID)<SUB>1438</SUB>> ]
-"6647" [label = <(METHOD_RETURN,jfieldID)<SUB>1438</SUB>> ]
-  "6578" -> "6583" 
-  "6578" -> "6596" 
-  "6596" -> "6601" 
-  "6596" -> "6614" 
-  "6614" -> "6619" 
-  "6614" -> "6633" 
-  "6633" -> "6637" 
-  "6635" -> "6647" 
-  "6636" -> "6635" 
-  "6637" -> "6641" 
-  "6640" -> "6636" 
-  "6582" -> "6589" 
-  "6582" -> "6596" 
-  "6600" -> "6607" 
-  "6600" -> "6614" 
-  "6618" -> "6625" 
-  "6618" -> "6633" 
-  "6641" -> "6640" 
-  "6583" -> "6582" 
-  "6587" -> "6594" 
-  "6594" -> "6647" 
-  "6601" -> "6600" 
-  "6605" -> "6612" 
-  "6612" -> "6647" 
-  "6619" -> "6618" 
-  "6623" -> "6630" 
-  "6630" -> "6647" 
-  "6588" -> "6587" 
-  "6606" -> "6605" 
-  "6624" -> "6623" 
-  "6589" -> "6591" 
-  "6591" -> "6588" 
-  "6607" -> "6609" 
-  "6609" -> "6606" 
-  "6625" -> "6627" 
-  "6627" -> "6624" 
-  "6572" -> "6578" 
+digraph "SetObjectField" {  
+"6683" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_object))<SUB>1396</SUB>> ]
+"6700" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid))<SUB>1397</SUB>> ]
+"6718" [label = <(soa,soa(env))<SUB>1398</SUB>> ]
+"6721" [label = <(&lt;operator&gt;.assignment,* f = jni::DecodeArtField&lt;kEnableIndexIds&gt;(fid))<SUB>1399</SUB>> ]
+"6730" [label = <(NotifySetObjectField,NotifySetObjectField(f, java_object, java_value))<SUB>1400</SUB>> ]
+"6734" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; o = soa.Decode&lt;mirror::Object&gt;(java_object))<SUB>1401</SUB>> ]
+"6751" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; v = soa.Decode&lt;mirror::Object&gt;(java_value))<SUB>1402</SUB>> ]
+"6768" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetObject&lt;false&gt;(o, v))<SUB>1403</SUB>> ]
+"6723" [label = <(&lt;operator&gt;.greaterThan,jni::DecodeArtField&lt;kEnableIndexIds&gt;(fid))<SUB>1399</SUB>> ]
+"6735" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; o)<SUB>1401</SUB>> ]
+"6742" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(java_object))<SUB>1401</SUB>> ]
+"6752" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; v)<SUB>1402</SUB>> ]
+"6759" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(java_value))<SUB>1402</SUB>> ]
+"6769" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetObject&lt;false)<SUB>1403</SUB>> ]
+"6774" [label = <(&lt;operator&gt;.bracketedPrimary,(o, v))<SUB>1403</SUB>> ]
+"6724" [label = <(&lt;operator&gt;.lessThan,jni::DecodeArtField&lt;kEnableIndexIds)<SUB>1399</SUB>> ]
+"6736" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>1401</SUB>> ]
+"6743" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>1401</SUB>> ]
+"6753" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>1402</SUB>> ]
+"6760" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>1402</SUB>> ]
+"6770" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetObject)<SUB>1403</SUB>> ]
+"6775" [label = <(&lt;operator&gt;.expressionList,o, v)<SUB>1403</SUB>> ]
+"6687" [label = <(UNLIKELY,UNLIKELY((java_object) == nullptr))<SUB>1396</SUB>> ]
+"6704" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1397</SUB>> ]
+"6725" [label = <(&lt;operator&gt;.fieldAccess,jni::DecodeArtField)<SUB>1399</SUB>> ]
+"6738" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1401</SUB>> ]
+"6744" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1401</SUB>> ]
+"6747" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1401</SUB>> ]
+"6755" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1402</SUB>> ]
+"6761" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1402</SUB>> ]
+"6764" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1402</SUB>> ]
+"6772" [label = <(FIELD_IDENTIFIER,SetObject,SetObject)<SUB>1403</SUB>> ]
+"6688" [label = <(&lt;operator&gt;.equals,(java_object) == nullptr)<SUB>1396</SUB>> ]
+"6692" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_object),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_object == null&quot;))<SUB>1396</SUB>> ]
+"6699" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_object),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_object))<SUB>1396</SUB>> ]
+"6705" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1397</SUB>> ]
+"6709" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1397</SUB>> ]
+"6716" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid))<SUB>1397</SUB>> ]
+"6727" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1399</SUB>> ]
+"6740" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1401</SUB>> ]
+"6746" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1401</SUB>> ]
+"6749" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1401</SUB>> ]
+"6757" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1402</SUB>> ]
+"6763" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1402</SUB>> ]
+"6766" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1402</SUB>> ]
+"6693" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1396</SUB>> ]
+"6710" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1397</SUB>> ]
+"6694" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1396</SUB>> ]
+"6696" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1396</SUB>> ]
+"6711" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1397</SUB>> ]
+"6713" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1397</SUB>> ]
+"6677" [label = <(METHOD,SetObjectField)<SUB>1395</SUB>> ]
+"6778" [label = <(METHOD_RETURN,void)<SUB>1395</SUB>> ]
+  "6683" -> "6688" 
+  "6683" -> "6700" 
+  "6700" -> "6705" 
+  "6700" -> "6718" 
+  "6718" -> "6727" 
+  "6721" -> "6730" 
+  "6730" -> "6740" 
+  "6734" -> "6757" 
+  "6751" -> "6772" 
+  "6768" -> "6778" 
+  "6723" -> "6721" 
+  "6735" -> "6746" 
+  "6742" -> "6734" 
+  "6752" -> "6763" 
+  "6759" -> "6751" 
+  "6769" -> "6775" 
+  "6774" -> "6768" 
+  "6724" -> "6723" 
+  "6736" -> "6735" 
+  "6743" -> "6742" 
+  "6753" -> "6752" 
+  "6760" -> "6759" 
+  "6770" -> "6769" 
+  "6775" -> "6774" 
+  "6687" -> "6694" 
+  "6687" -> "6700" 
+  "6704" -> "6711" 
+  "6704" -> "6718" 
+  "6725" -> "6724" 
+  "6738" -> "6736" 
+  "6744" -> "6749" 
+  "6747" -> "6743" 
+  "6755" -> "6753" 
+  "6761" -> "6766" 
+  "6764" -> "6760" 
+  "6772" -> "6770" 
+  "6688" -> "6687" 
+  "6692" -> "6699" 
+  "6699" -> "6778" 
+  "6705" -> "6704" 
+  "6709" -> "6716" 
+  "6716" -> "6778" 
+  "6727" -> "6725" 
+  "6740" -> "6738" 
+  "6746" -> "6744" 
+  "6749" -> "6747" 
+  "6757" -> "6755" 
+  "6763" -> "6761" 
+  "6766" -> "6764" 
+  "6693" -> "6692" 
+  "6710" -> "6709" 
+  "6694" -> "6696" 
+  "6696" -> "6693" 
+  "6711" -> "6713" 
+  "6713" -> "6710" 
+  "6677" -> "6683" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/122-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/122-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/122-cfg.dot	2023-06-07 19:35:01.467387165 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/122-cfg.dot	2023-06-07 19:35:08.007386517 +0330
@@ -1,71 +1,77 @@
-digraph "GetStaticFieldID" {  
-"6655" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_class))<SUB>1448</SUB>> ]
-"6673" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(name))<SUB>1449</SUB>> ]
-"6691" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(sig))<SUB>1450</SUB>> ]
-"6710" [label = <(soa,soa(env))<SUB>1451</SUB>> ]
-"6712" [label = <(RETURN,return FindFieldID&lt;kEnableIndexIds&gt;(soa, java_class, name, sig, true);,return FindFieldID&lt;kEnableIndexIds&gt;(soa, java_class, name, sig, true);)<SUB>1452</SUB>> ]
-"6713" [label = <(&lt;operator&gt;.greaterThan,FindFieldID&lt;kEnableIndexIds&gt;(soa, java_class, name, sig, true))<SUB>1452</SUB>> ]
-"6714" [label = <(&lt;operator&gt;.lessThan,FindFieldID&lt;kEnableIndexIds)<SUB>1452</SUB>> ]
-"6717" [label = <(&lt;operator&gt;.bracketedPrimary,(soa, java_class, name, sig, true))<SUB>1452</SUB>> ]
-"6659" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>1448</SUB>> ]
-"6677" [label = <(UNLIKELY,UNLIKELY((name) == nullptr))<SUB>1449</SUB>> ]
-"6695" [label = <(UNLIKELY,UNLIKELY((sig) == nullptr))<SUB>1450</SUB>> ]
-"6718" [label = <(&lt;operator&gt;.expressionList,soa, java_class, name, sig, true)<SUB>1452</SUB>> ]
-"6660" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>1448</SUB>> ]
-"6664" [label = <(CHECK_NON_NULL_ARGUMENT(java_class),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class == null&quot;))<SUB>1448</SUB>> ]
-"6671" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_class),CHECK_NON_NULL_ARGUMENT(java_class))<SUB>1448</SUB>> ]
-"6678" [label = <(&lt;operator&gt;.equals,(name) == nullptr)<SUB>1449</SUB>> ]
-"6682" [label = <(CHECK_NON_NULL_ARGUMENT(name),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;name == null&quot;))<SUB>1449</SUB>> ]
-"6689" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(name),CHECK_NON_NULL_ARGUMENT(name))<SUB>1449</SUB>> ]
-"6696" [label = <(&lt;operator&gt;.equals,(sig) == nullptr)<SUB>1450</SUB>> ]
-"6700" [label = <(CHECK_NON_NULL_ARGUMENT(sig),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;sig == null&quot;))<SUB>1450</SUB>> ]
-"6707" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(sig),CHECK_NON_NULL_ARGUMENT(sig))<SUB>1450</SUB>> ]
-"6665" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1448</SUB>> ]
-"6683" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1449</SUB>> ]
-"6701" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1450</SUB>> ]
-"6666" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1448</SUB>> ]
-"6668" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1448</SUB>> ]
-"6684" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1449</SUB>> ]
-"6686" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1449</SUB>> ]
-"6702" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1450</SUB>> ]
-"6704" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1450</SUB>> ]
-"6649" [label = <(METHOD,GetStaticFieldID)<SUB>1446</SUB>> ]
-"6724" [label = <(METHOD_RETURN,jfieldID)<SUB>1446</SUB>> ]
-  "6655" -> "6660" 
-  "6655" -> "6673" 
-  "6673" -> "6678" 
-  "6673" -> "6691" 
-  "6691" -> "6696" 
-  "6691" -> "6710" 
-  "6710" -> "6714" 
-  "6712" -> "6724" 
-  "6713" -> "6712" 
-  "6714" -> "6718" 
-  "6717" -> "6713" 
-  "6659" -> "6666" 
-  "6659" -> "6673" 
-  "6677" -> "6684" 
-  "6677" -> "6691" 
-  "6695" -> "6702" 
-  "6695" -> "6710" 
-  "6718" -> "6717" 
-  "6660" -> "6659" 
-  "6664" -> "6671" 
-  "6671" -> "6724" 
-  "6678" -> "6677" 
-  "6682" -> "6689" 
-  "6689" -> "6724" 
-  "6696" -> "6695" 
-  "6700" -> "6707" 
-  "6707" -> "6724" 
-  "6665" -> "6664" 
-  "6683" -> "6682" 
-  "6701" -> "6700" 
-  "6666" -> "6668" 
-  "6668" -> "6665" 
-  "6684" -> "6686" 
-  "6686" -> "6683" 
-  "6702" -> "6704" 
-  "6704" -> "6701" 
-  "6649" -> "6655" 
+digraph "SetStaticObjectField" {  
+"6786" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid))<SUB>1407</SUB>> ]
+"6804" [label = <(soa,soa(env))<SUB>1408</SUB>> ]
+"6807" [label = <(&lt;operator&gt;.assignment,* f = jni::DecodeArtField&lt;kEnableIndexIds&gt;(fid))<SUB>1409</SUB>> ]
+"6816" [label = <(NotifySetObjectField,NotifySetObjectField(f, nullptr, java_value))<SUB>1410</SUB>> ]
+"6820" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; v = soa.Decode&lt;mirror::Object&gt;(java_value))<SUB>1411</SUB>> ]
+"6837" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetObject&lt;false&gt;(f-&gt;GetDeclaringClass(), v))<SUB>1412</SUB>> ]
+"6809" [label = <(&lt;operator&gt;.greaterThan,jni::DecodeArtField&lt;kEnableIndexIds&gt;(fid))<SUB>1409</SUB>> ]
+"6821" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; v)<SUB>1411</SUB>> ]
+"6828" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(java_value))<SUB>1411</SUB>> ]
+"6838" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetObject&lt;false)<SUB>1412</SUB>> ]
+"6843" [label = <(&lt;operator&gt;.bracketedPrimary,(f-&gt;GetDeclaringClass(), v))<SUB>1412</SUB>> ]
+"6810" [label = <(&lt;operator&gt;.lessThan,jni::DecodeArtField&lt;kEnableIndexIds)<SUB>1409</SUB>> ]
+"6822" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>1411</SUB>> ]
+"6829" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>1411</SUB>> ]
+"6839" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetObject)<SUB>1412</SUB>> ]
+"6844" [label = <(&lt;operator&gt;.expressionList,f-&gt;GetDeclaringClass(), v)<SUB>1412</SUB>> ]
+"6790" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1407</SUB>> ]
+"6811" [label = <(&lt;operator&gt;.fieldAccess,jni::DecodeArtField)<SUB>1409</SUB>> ]
+"6824" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1411</SUB>> ]
+"6830" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1411</SUB>> ]
+"6833" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1411</SUB>> ]
+"6841" [label = <(FIELD_IDENTIFIER,SetObject,SetObject)<SUB>1412</SUB>> ]
+"6845" [label = <(GetDeclaringClass,f-&gt;GetDeclaringClass())<SUB>1412</SUB>> ]
+"6791" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1407</SUB>> ]
+"6795" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1407</SUB>> ]
+"6802" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid))<SUB>1407</SUB>> ]
+"6813" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1409</SUB>> ]
+"6826" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1411</SUB>> ]
+"6832" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1411</SUB>> ]
+"6835" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1411</SUB>> ]
+"6846" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1412</SUB>> ]
+"6796" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1407</SUB>> ]
+"6848" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1412</SUB>> ]
+"6797" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1407</SUB>> ]
+"6799" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1407</SUB>> ]
+"6780" [label = <(METHOD,SetStaticObjectField)<SUB>1406</SUB>> ]
+"6850" [label = <(METHOD_RETURN,void)<SUB>1406</SUB>> ]
+  "6786" -> "6791" 
+  "6786" -> "6804" 
+  "6804" -> "6813" 
+  "6807" -> "6816" 
+  "6816" -> "6826" 
+  "6820" -> "6841" 
+  "6837" -> "6850" 
+  "6809" -> "6807" 
+  "6821" -> "6832" 
+  "6828" -> "6820" 
+  "6838" -> "6848" 
+  "6843" -> "6837" 
+  "6810" -> "6809" 
+  "6822" -> "6821" 
+  "6829" -> "6828" 
+  "6839" -> "6838" 
+  "6844" -> "6843" 
+  "6790" -> "6797" 
+  "6790" -> "6804" 
+  "6811" -> "6810" 
+  "6824" -> "6822" 
+  "6830" -> "6835" 
+  "6833" -> "6829" 
+  "6841" -> "6839" 
+  "6845" -> "6844" 
+  "6791" -> "6790" 
+  "6795" -> "6802" 
+  "6802" -> "6850" 
+  "6813" -> "6811" 
+  "6826" -> "6824" 
+  "6832" -> "6830" 
+  "6835" -> "6833" 
+  "6846" -> "6845" 
+  "6796" -> "6795" 
+  "6848" -> "6846" 
+  "6797" -> "6799" 
+  "6799" -> "6796" 
+  "6780" -> "6786" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/123-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/123-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/123-cfg.dot	2023-06-07 19:35:01.467387165 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/123-cfg.dot	2023-06-07 19:35:08.007386517 +0330
@@ -1,93 +1,82 @@
-digraph "GetObjectField" {  
-"6731" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(obj))<SUB>1456</SUB>> ]
-"6749" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(fid))<SUB>1457</SUB>> ]
-"6768" [label = <(soa,soa(env))<SUB>1458</SUB>> ]
-"6771" [label = <(&lt;operator&gt;.assignment,* f = jni::DecodeArtField&lt;kEnableIndexIds&gt;(fid))<SUB>1459</SUB>> ]
-"6780" [label = <(NotifyGetField,NotifyGetField(f, obj))<SUB>1460</SUB>> ]
-"6783" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; o = soa.Decode&lt;mirror::Object&gt;(obj))<SUB>1461</SUB>> ]
-"6800" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(f-&gt;GetObject(o));,return soa.AddLocalReference&lt;jobject&gt;(f-&gt;GetObject(o));)<SUB>1462</SUB>> ]
-"6773" [label = <(&lt;operator&gt;.greaterThan,jni::DecodeArtField&lt;kEnableIndexIds&gt;(fid))<SUB>1459</SUB>> ]
-"6784" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; o)<SUB>1461</SUB>> ]
-"6791" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(obj))<SUB>1461</SUB>> ]
-"6801" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(f-&gt;GetObject(o)))<SUB>1462</SUB>> ]
-"6774" [label = <(&lt;operator&gt;.lessThan,jni::DecodeArtField&lt;kEnableIndexIds)<SUB>1459</SUB>> ]
-"6785" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>1461</SUB>> ]
-"6792" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>1461</SUB>> ]
-"6802" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>1462</SUB>> ]
-"6807" [label = <(GetObject,f-&gt;GetObject(o))<SUB>1462</SUB>> ]
-"6735" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1456</SUB>> ]
-"6753" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1457</SUB>> ]
-"6775" [label = <(&lt;operator&gt;.fieldAccess,jni::DecodeArtField)<SUB>1459</SUB>> ]
-"6787" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1461</SUB>> ]
-"6793" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1461</SUB>> ]
-"6796" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1461</SUB>> ]
-"6803" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1462</SUB>> ]
-"6808" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetObject)<SUB>1462</SUB>> ]
-"6736" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1456</SUB>> ]
-"6740" [label = <(CHECK_NON_NULL_ARGUMENT(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1456</SUB>> ]
-"6747" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(obj),CHECK_NON_NULL_ARGUMENT(obj))<SUB>1456</SUB>> ]
-"6754" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1457</SUB>> ]
-"6758" [label = <(CHECK_NON_NULL_ARGUMENT(fid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1457</SUB>> ]
-"6765" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(fid),CHECK_NON_NULL_ARGUMENT(fid))<SUB>1457</SUB>> ]
-"6777" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1459</SUB>> ]
-"6789" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1461</SUB>> ]
-"6795" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1461</SUB>> ]
-"6798" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1461</SUB>> ]
-"6805" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1462</SUB>> ]
-"6810" [label = <(FIELD_IDENTIFIER,GetObject,GetObject)<SUB>1462</SUB>> ]
-"6741" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1456</SUB>> ]
-"6759" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1457</SUB>> ]
-"6742" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1456</SUB>> ]
-"6744" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1456</SUB>> ]
-"6760" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1457</SUB>> ]
-"6762" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1457</SUB>> ]
-"6726" [label = <(METHOD,GetObjectField)<SUB>1455</SUB>> ]
-"6812" [label = <(METHOD_RETURN,jobject)<SUB>1455</SUB>> ]
-  "6731" -> "6736" 
-  "6731" -> "6749" 
-  "6749" -> "6754" 
-  "6749" -> "6768" 
-  "6768" -> "6777" 
-  "6771" -> "6780" 
-  "6780" -> "6789" 
-  "6783" -> "6805" 
-  "6800" -> "6812" 
-  "6773" -> "6771" 
-  "6784" -> "6795" 
-  "6791" -> "6783" 
-  "6801" -> "6800" 
-  "6774" -> "6773" 
-  "6785" -> "6784" 
-  "6792" -> "6791" 
-  "6802" -> "6810" 
-  "6807" -> "6801" 
-  "6735" -> "6742" 
-  "6735" -> "6749" 
-  "6753" -> "6760" 
-  "6753" -> "6768" 
-  "6775" -> "6774" 
-  "6787" -> "6785" 
-  "6793" -> "6798" 
-  "6796" -> "6792" 
-  "6803" -> "6802" 
-  "6808" -> "6807" 
-  "6736" -> "6735" 
-  "6740" -> "6747" 
-  "6747" -> "6812" 
-  "6754" -> "6753" 
-  "6758" -> "6765" 
-  "6765" -> "6812" 
-  "6777" -> "6775" 
-  "6789" -> "6787" 
-  "6795" -> "6793" 
-  "6798" -> "6796" 
-  "6805" -> "6803" 
-  "6810" -> "6808" 
-  "6741" -> "6740" 
-  "6759" -> "6758" 
-  "6742" -> "6744" 
-  "6744" -> "6741" 
-  "6760" -> "6762" 
-  "6762" -> "6759" 
-  "6726" -> "6731" 
+digraph "GetBooleanField" {  
+"6857" [label = <(GET_PRIMITIVE_FIELD,GET_PRIMITIVE_FIELD(Boolean, obj))<SUB>1448</SUB>> ]
+"6891" [label = <(soa,ScopedObjectAccess)<SUB>1448</SUB>> ]
+"6894" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1448</SUB>> ]
+"6903" [label = <(NotifyGetField,NotifyGetField(f, obj))<SUB>1448</SUB>> ]
+"6906" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1448</SUB>> ]
+"6923" [label = <(RETURN,GET_PRIMITIVE_FIELD(Boolean, obj);,GET_PRIMITIVE_FIELD(Boolean, obj);)<SUB>1448</SUB>> ]
+"6876" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1448</SUB>> ]
+"6896" [label = <(&lt;operator&gt;.greaterThan,jni::DecodeArtField &lt; kEnableIndexIds &gt; (fid))<SUB>1448</SUB>> ]
+"6907" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1448</SUB>> ]
+"6914" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1448</SUB>> ]
+"6924" [label = <(GET_PRIMITIVE_FIELD(Boolean, obj),f-&gt;GetBoolean(o))<SUB>1448</SUB>> ]
+"6877" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1448</SUB>> ]
+"6881" [label = <(GET_PRIMITIVE_FIELD(Boolean, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1448</SUB>> ]
+"6888" [label = <(RETURN,GET_PRIMITIVE_FIELD(Boolean, obj),GET_PRIMITIVE_FIELD(Boolean, obj))<SUB>1448</SUB>> ]
+"6897" [label = <(&lt;operator&gt;.lessThan,jni::DecodeArtField &lt; kEnableIndexIds)<SUB>1448</SUB>> ]
+"6908" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1448</SUB>> ]
+"6915" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1448</SUB>> ]
+"6925" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetBoolean)<SUB>1448</SUB>> ]
+"6861" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1448</SUB>> ]
+"6882" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1448</SUB>> ]
+"6898" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Boolean, obj))<SUB>1448</SUB>> ]
+"6910" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Boolean, obj))<SUB>1448</SUB>> ]
+"6916" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1448</SUB>> ]
+"6919" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Boolean, obj))<SUB>1448</SUB>> ]
+"6927" [label = <(FIELD_IDENTIFIER,GetBoolean,GetBoolean)<SUB>1448</SUB>> ]
+"6862" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1448</SUB>> ]
+"6866" [label = <(GET_PRIMITIVE_FIELD(Boolean, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1448</SUB>> ]
+"6873" [label = <(RETURN,GET_PRIMITIVE_FIELD(Boolean, obj),GET_PRIMITIVE_FIELD(Boolean, obj))<SUB>1448</SUB>> ]
+"6883" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1448</SUB>> ]
+"6885" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1448</SUB>> ]
+"6900" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1448</SUB>> ]
+"6912" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1448</SUB>> ]
+"6918" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1448</SUB>> ]
+"6921" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1448</SUB>> ]
+"6867" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1448</SUB>> ]
+"6868" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1448</SUB>> ]
+"6870" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1448</SUB>> ]
+"6852" [label = <(METHOD,GetBooleanField)<SUB>1447</SUB>> ]
+"6929" [label = <(METHOD_RETURN,jboolean)<SUB>1447</SUB>> ]
+  "6857" -> "6862" 
+  "6857" -> "6877" 
+  "6891" -> "6900" 
+  "6894" -> "6903" 
+  "6903" -> "6912" 
+  "6906" -> "6927" 
+  "6923" -> "6929" 
+  "6876" -> "6883" 
+  "6876" -> "6891" 
+  "6896" -> "6894" 
+  "6907" -> "6918" 
+  "6914" -> "6906" 
+  "6924" -> "6923" 
+  "6877" -> "6876" 
+  "6881" -> "6888" 
+  "6888" -> "6929" 
+  "6897" -> "6896" 
+  "6908" -> "6907" 
+  "6915" -> "6914" 
+  "6925" -> "6924" 
+  "6861" -> "6868" 
+  "6861" -> "6877" 
+  "6882" -> "6881" 
+  "6898" -> "6897" 
+  "6910" -> "6908" 
+  "6916" -> "6921" 
+  "6919" -> "6915" 
+  "6927" -> "6925" 
+  "6862" -> "6861" 
+  "6866" -> "6873" 
+  "6873" -> "6929" 
+  "6883" -> "6885" 
+  "6885" -> "6882" 
+  "6900" -> "6898" 
+  "6912" -> "6910" 
+  "6918" -> "6916" 
+  "6921" -> "6919" 
+  "6867" -> "6866" 
+  "6868" -> "6870" 
+  "6870" -> "6867" 
+  "6852" -> "6857" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/124-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/124-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/124-cfg.dot	2023-06-07 19:35:01.467387165 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/124-cfg.dot	2023-06-07 19:35:08.017386518 +0330
@@ -1,59 +1,82 @@
-digraph "GetStaticObjectField" {  
-"6819" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(fid))<SUB>1466</SUB>> ]
-"6838" [label = <(soa,soa(env))<SUB>1467</SUB>> ]
-"6841" [label = <(&lt;operator&gt;.assignment,* f = jni::DecodeArtField&lt;kEnableIndexIds&gt;(fid))<SUB>1468</SUB>> ]
-"6850" [label = <(NotifyGetField,NotifyGetField(f, nullptr))<SUB>1469</SUB>> ]
-"6853" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(f-&gt;GetObject(f-&gt;GetDeclaringClass()));,return soa.AddLocalReference&lt;jobject&gt;(f-&gt;GetObject(f-&gt;GetDeclaringClass()));)<SUB>1470</SUB>> ]
-"6843" [label = <(&lt;operator&gt;.greaterThan,jni::DecodeArtField&lt;kEnableIndexIds&gt;(fid))<SUB>1468</SUB>> ]
-"6854" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(f-&gt;GetObject(f-&gt;GetDeclaringClass())))<SUB>1470</SUB>> ]
-"6844" [label = <(&lt;operator&gt;.lessThan,jni::DecodeArtField&lt;kEnableIndexIds)<SUB>1468</SUB>> ]
-"6855" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>1470</SUB>> ]
-"6860" [label = <(GetObject,f-&gt;GetObject(f-&gt;GetDeclaringClass()))<SUB>1470</SUB>> ]
-"6823" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1466</SUB>> ]
-"6845" [label = <(&lt;operator&gt;.fieldAccess,jni::DecodeArtField)<SUB>1468</SUB>> ]
-"6856" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1470</SUB>> ]
-"6861" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetObject)<SUB>1470</SUB>> ]
-"6864" [label = <(GetDeclaringClass,f-&gt;GetDeclaringClass())<SUB>1470</SUB>> ]
-"6824" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1466</SUB>> ]
-"6828" [label = <(CHECK_NON_NULL_ARGUMENT(fid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1466</SUB>> ]
-"6835" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(fid),CHECK_NON_NULL_ARGUMENT(fid))<SUB>1466</SUB>> ]
-"6847" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1468</SUB>> ]
-"6858" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1470</SUB>> ]
-"6863" [label = <(FIELD_IDENTIFIER,GetObject,GetObject)<SUB>1470</SUB>> ]
-"6865" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1470</SUB>> ]
-"6829" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1466</SUB>> ]
-"6867" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1470</SUB>> ]
-"6830" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1466</SUB>> ]
-"6832" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1466</SUB>> ]
-"6814" [label = <(METHOD,GetStaticObjectField)<SUB>1465</SUB>> ]
-"6868" [label = <(METHOD_RETURN,jobject)<SUB>1465</SUB>> ]
-  "6819" -> "6824" 
-  "6819" -> "6838" 
-  "6838" -> "6847" 
-  "6841" -> "6850" 
-  "6850" -> "6858" 
-  "6853" -> "6868" 
-  "6843" -> "6841" 
-  "6854" -> "6853" 
-  "6844" -> "6843" 
-  "6855" -> "6863" 
-  "6860" -> "6854" 
-  "6823" -> "6830" 
-  "6823" -> "6838" 
-  "6845" -> "6844" 
-  "6856" -> "6855" 
-  "6861" -> "6867" 
-  "6864" -> "6860" 
-  "6824" -> "6823" 
-  "6828" -> "6835" 
-  "6835" -> "6868" 
-  "6847" -> "6845" 
-  "6858" -> "6856" 
-  "6863" -> "6861" 
-  "6865" -> "6864" 
-  "6829" -> "6828" 
-  "6867" -> "6865" 
-  "6830" -> "6832" 
-  "6832" -> "6829" 
-  "6814" -> "6819" 
+digraph "GetByteField" {  
+"6936" [label = <(GET_PRIMITIVE_FIELD,GET_PRIMITIVE_FIELD(Byte, obj))<SUB>1452</SUB>> ]
+"6970" [label = <(soa,ScopedObjectAccess)<SUB>1452</SUB>> ]
+"6973" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1452</SUB>> ]
+"6982" [label = <(NotifyGetField,NotifyGetField(f, obj))<SUB>1452</SUB>> ]
+"6985" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1452</SUB>> ]
+"7002" [label = <(RETURN,GET_PRIMITIVE_FIELD(Byte, obj);,GET_PRIMITIVE_FIELD(Byte, obj);)<SUB>1452</SUB>> ]
+"6955" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1452</SUB>> ]
+"6975" [label = <(&lt;operator&gt;.greaterThan,jni::DecodeArtField &lt; kEnableIndexIds &gt; (fid))<SUB>1452</SUB>> ]
+"6986" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1452</SUB>> ]
+"6993" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1452</SUB>> ]
+"7003" [label = <(GET_PRIMITIVE_FIELD(Byte, obj),f-&gt;GetByte(o))<SUB>1452</SUB>> ]
+"6956" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1452</SUB>> ]
+"6960" [label = <(GET_PRIMITIVE_FIELD(Byte, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1452</SUB>> ]
+"6967" [label = <(RETURN,GET_PRIMITIVE_FIELD(Byte, obj),GET_PRIMITIVE_FIELD(Byte, obj))<SUB>1452</SUB>> ]
+"6976" [label = <(&lt;operator&gt;.lessThan,jni::DecodeArtField &lt; kEnableIndexIds)<SUB>1452</SUB>> ]
+"6987" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1452</SUB>> ]
+"6994" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1452</SUB>> ]
+"7004" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetByte)<SUB>1452</SUB>> ]
+"6940" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1452</SUB>> ]
+"6961" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1452</SUB>> ]
+"6977" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Byte, obj))<SUB>1452</SUB>> ]
+"6989" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Byte, obj))<SUB>1452</SUB>> ]
+"6995" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1452</SUB>> ]
+"6998" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Byte, obj))<SUB>1452</SUB>> ]
+"7006" [label = <(FIELD_IDENTIFIER,GetByte,GetByte)<SUB>1452</SUB>> ]
+"6941" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1452</SUB>> ]
+"6945" [label = <(GET_PRIMITIVE_FIELD(Byte, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1452</SUB>> ]
+"6952" [label = <(RETURN,GET_PRIMITIVE_FIELD(Byte, obj),GET_PRIMITIVE_FIELD(Byte, obj))<SUB>1452</SUB>> ]
+"6962" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1452</SUB>> ]
+"6964" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1452</SUB>> ]
+"6979" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1452</SUB>> ]
+"6991" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1452</SUB>> ]
+"6997" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1452</SUB>> ]
+"7000" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1452</SUB>> ]
+"6946" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1452</SUB>> ]
+"6947" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1452</SUB>> ]
+"6949" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1452</SUB>> ]
+"6931" [label = <(METHOD,GetByteField)<SUB>1451</SUB>> ]
+"7008" [label = <(METHOD_RETURN,jbyte)<SUB>1451</SUB>> ]
+  "6936" -> "6941" 
+  "6936" -> "6956" 
+  "6970" -> "6979" 
+  "6973" -> "6982" 
+  "6982" -> "6991" 
+  "6985" -> "7006" 
+  "7002" -> "7008" 
+  "6955" -> "6962" 
+  "6955" -> "6970" 
+  "6975" -> "6973" 
+  "6986" -> "6997" 
+  "6993" -> "6985" 
+  "7003" -> "7002" 
+  "6956" -> "6955" 
+  "6960" -> "6967" 
+  "6967" -> "7008" 
+  "6976" -> "6975" 
+  "6987" -> "6986" 
+  "6994" -> "6993" 
+  "7004" -> "7003" 
+  "6940" -> "6947" 
+  "6940" -> "6956" 
+  "6961" -> "6960" 
+  "6977" -> "6976" 
+  "6989" -> "6987" 
+  "6995" -> "7000" 
+  "6998" -> "6994" 
+  "7006" -> "7004" 
+  "6941" -> "6940" 
+  "6945" -> "6952" 
+  "6952" -> "7008" 
+  "6962" -> "6964" 
+  "6964" -> "6961" 
+  "6979" -> "6977" 
+  "6991" -> "6989" 
+  "6997" -> "6995" 
+  "7000" -> "6998" 
+  "6946" -> "6945" 
+  "6947" -> "6949" 
+  "6949" -> "6946" 
+  "6931" -> "6936" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/125-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/125-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/125-cfg.dot	2023-06-07 19:35:01.467387165 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/125-cfg.dot	2023-06-07 19:35:08.017386518 +0330
@@ -1,111 +1,82 @@
-digraph "SetObjectField" {  
-"6876" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_object))<SUB>1474</SUB>> ]
-"6893" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid))<SUB>1475</SUB>> ]
-"6911" [label = <(soa,soa(env))<SUB>1476</SUB>> ]
-"6914" [label = <(&lt;operator&gt;.assignment,* f = jni::DecodeArtField&lt;kEnableIndexIds&gt;(fid))<SUB>1477</SUB>> ]
-"6923" [label = <(NotifySetObjectField,NotifySetObjectField(f, java_object, java_value))<SUB>1478</SUB>> ]
-"6927" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; o = soa.Decode&lt;mirror::Object&gt;(java_object))<SUB>1479</SUB>> ]
-"6944" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; v = soa.Decode&lt;mirror::Object&gt;(java_value))<SUB>1480</SUB>> ]
-"6961" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetObject&lt;false&gt;(o, v))<SUB>1481</SUB>> ]
-"6916" [label = <(&lt;operator&gt;.greaterThan,jni::DecodeArtField&lt;kEnableIndexIds&gt;(fid))<SUB>1477</SUB>> ]
-"6928" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; o)<SUB>1479</SUB>> ]
-"6935" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(java_object))<SUB>1479</SUB>> ]
-"6945" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; v)<SUB>1480</SUB>> ]
-"6952" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(java_value))<SUB>1480</SUB>> ]
-"6962" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetObject&lt;false)<SUB>1481</SUB>> ]
-"6967" [label = <(&lt;operator&gt;.bracketedPrimary,(o, v))<SUB>1481</SUB>> ]
-"6917" [label = <(&lt;operator&gt;.lessThan,jni::DecodeArtField&lt;kEnableIndexIds)<SUB>1477</SUB>> ]
-"6929" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>1479</SUB>> ]
-"6936" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>1479</SUB>> ]
-"6946" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>1480</SUB>> ]
-"6953" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>1480</SUB>> ]
-"6963" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetObject)<SUB>1481</SUB>> ]
-"6968" [label = <(&lt;operator&gt;.expressionList,o, v)<SUB>1481</SUB>> ]
-"6880" [label = <(UNLIKELY,UNLIKELY((java_object) == nullptr))<SUB>1474</SUB>> ]
-"6897" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1475</SUB>> ]
-"6918" [label = <(&lt;operator&gt;.fieldAccess,jni::DecodeArtField)<SUB>1477</SUB>> ]
-"6931" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1479</SUB>> ]
-"6937" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1479</SUB>> ]
-"6940" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1479</SUB>> ]
-"6948" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1480</SUB>> ]
-"6954" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1480</SUB>> ]
-"6957" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1480</SUB>> ]
-"6965" [label = <(FIELD_IDENTIFIER,SetObject,SetObject)<SUB>1481</SUB>> ]
-"6881" [label = <(&lt;operator&gt;.equals,(java_object) == nullptr)<SUB>1474</SUB>> ]
-"6885" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_object),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_object == null&quot;))<SUB>1474</SUB>> ]
-"6892" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_object),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_object))<SUB>1474</SUB>> ]
-"6898" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1475</SUB>> ]
-"6902" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1475</SUB>> ]
-"6909" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid))<SUB>1475</SUB>> ]
-"6920" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1477</SUB>> ]
-"6933" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1479</SUB>> ]
-"6939" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1479</SUB>> ]
-"6942" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1479</SUB>> ]
-"6950" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1480</SUB>> ]
-"6956" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1480</SUB>> ]
-"6959" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1480</SUB>> ]
-"6886" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1474</SUB>> ]
-"6903" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1475</SUB>> ]
-"6887" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1474</SUB>> ]
-"6889" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1474</SUB>> ]
-"6904" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1475</SUB>> ]
-"6906" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1475</SUB>> ]
-"6870" [label = <(METHOD,SetObjectField)<SUB>1473</SUB>> ]
-"6971" [label = <(METHOD_RETURN,void)<SUB>1473</SUB>> ]
-  "6876" -> "6881" 
-  "6876" -> "6893" 
-  "6893" -> "6898" 
-  "6893" -> "6911" 
-  "6911" -> "6920" 
-  "6914" -> "6923" 
-  "6923" -> "6933" 
-  "6927" -> "6950" 
-  "6944" -> "6965" 
-  "6961" -> "6971" 
-  "6916" -> "6914" 
-  "6928" -> "6939" 
-  "6935" -> "6927" 
-  "6945" -> "6956" 
-  "6952" -> "6944" 
-  "6962" -> "6968" 
-  "6967" -> "6961" 
-  "6917" -> "6916" 
-  "6929" -> "6928" 
-  "6936" -> "6935" 
-  "6946" -> "6945" 
-  "6953" -> "6952" 
-  "6963" -> "6962" 
-  "6968" -> "6967" 
-  "6880" -> "6887" 
-  "6880" -> "6893" 
-  "6897" -> "6904" 
-  "6897" -> "6911" 
-  "6918" -> "6917" 
-  "6931" -> "6929" 
-  "6937" -> "6942" 
-  "6940" -> "6936" 
-  "6948" -> "6946" 
-  "6954" -> "6959" 
-  "6957" -> "6953" 
-  "6965" -> "6963" 
-  "6881" -> "6880" 
-  "6885" -> "6892" 
-  "6892" -> "6971" 
-  "6898" -> "6897" 
-  "6902" -> "6909" 
-  "6909" -> "6971" 
-  "6920" -> "6918" 
-  "6933" -> "6931" 
-  "6939" -> "6937" 
-  "6942" -> "6940" 
-  "6950" -> "6948" 
-  "6956" -> "6954" 
-  "6959" -> "6957" 
-  "6886" -> "6885" 
-  "6903" -> "6902" 
-  "6887" -> "6889" 
-  "6889" -> "6886" 
-  "6904" -> "6906" 
-  "6906" -> "6903" 
-  "6870" -> "6876" 
+digraph "GetCharField" {  
+"7015" [label = <(GET_PRIMITIVE_FIELD,GET_PRIMITIVE_FIELD(Char, obj))<SUB>1456</SUB>> ]
+"7049" [label = <(soa,ScopedObjectAccess)<SUB>1456</SUB>> ]
+"7052" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1456</SUB>> ]
+"7061" [label = <(NotifyGetField,NotifyGetField(f, obj))<SUB>1456</SUB>> ]
+"7064" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1456</SUB>> ]
+"7081" [label = <(RETURN,GET_PRIMITIVE_FIELD(Char, obj);,GET_PRIMITIVE_FIELD(Char, obj);)<SUB>1456</SUB>> ]
+"7034" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1456</SUB>> ]
+"7054" [label = <(&lt;operator&gt;.greaterThan,jni::DecodeArtField &lt; kEnableIndexIds &gt; (fid))<SUB>1456</SUB>> ]
+"7065" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1456</SUB>> ]
+"7072" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1456</SUB>> ]
+"7082" [label = <(GET_PRIMITIVE_FIELD(Char, obj),f-&gt;GetChar(o))<SUB>1456</SUB>> ]
+"7035" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1456</SUB>> ]
+"7039" [label = <(GET_PRIMITIVE_FIELD(Char, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1456</SUB>> ]
+"7046" [label = <(RETURN,GET_PRIMITIVE_FIELD(Char, obj),GET_PRIMITIVE_FIELD(Char, obj))<SUB>1456</SUB>> ]
+"7055" [label = <(&lt;operator&gt;.lessThan,jni::DecodeArtField &lt; kEnableIndexIds)<SUB>1456</SUB>> ]
+"7066" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1456</SUB>> ]
+"7073" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1456</SUB>> ]
+"7083" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetChar)<SUB>1456</SUB>> ]
+"7019" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1456</SUB>> ]
+"7040" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1456</SUB>> ]
+"7056" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Char, obj))<SUB>1456</SUB>> ]
+"7068" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Char, obj))<SUB>1456</SUB>> ]
+"7074" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1456</SUB>> ]
+"7077" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Char, obj))<SUB>1456</SUB>> ]
+"7085" [label = <(FIELD_IDENTIFIER,GetChar,GetChar)<SUB>1456</SUB>> ]
+"7020" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1456</SUB>> ]
+"7024" [label = <(GET_PRIMITIVE_FIELD(Char, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1456</SUB>> ]
+"7031" [label = <(RETURN,GET_PRIMITIVE_FIELD(Char, obj),GET_PRIMITIVE_FIELD(Char, obj))<SUB>1456</SUB>> ]
+"7041" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1456</SUB>> ]
+"7043" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1456</SUB>> ]
+"7058" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1456</SUB>> ]
+"7070" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1456</SUB>> ]
+"7076" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1456</SUB>> ]
+"7079" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1456</SUB>> ]
+"7025" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1456</SUB>> ]
+"7026" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1456</SUB>> ]
+"7028" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1456</SUB>> ]
+"7010" [label = <(METHOD,GetCharField)<SUB>1455</SUB>> ]
+"7087" [label = <(METHOD_RETURN,jchar)<SUB>1455</SUB>> ]
+  "7015" -> "7020" 
+  "7015" -> "7035" 
+  "7049" -> "7058" 
+  "7052" -> "7061" 
+  "7061" -> "7070" 
+  "7064" -> "7085" 
+  "7081" -> "7087" 
+  "7034" -> "7041" 
+  "7034" -> "7049" 
+  "7054" -> "7052" 
+  "7065" -> "7076" 
+  "7072" -> "7064" 
+  "7082" -> "7081" 
+  "7035" -> "7034" 
+  "7039" -> "7046" 
+  "7046" -> "7087" 
+  "7055" -> "7054" 
+  "7066" -> "7065" 
+  "7073" -> "7072" 
+  "7083" -> "7082" 
+  "7019" -> "7026" 
+  "7019" -> "7035" 
+  "7040" -> "7039" 
+  "7056" -> "7055" 
+  "7068" -> "7066" 
+  "7074" -> "7079" 
+  "7077" -> "7073" 
+  "7085" -> "7083" 
+  "7020" -> "7019" 
+  "7024" -> "7031" 
+  "7031" -> "7087" 
+  "7041" -> "7043" 
+  "7043" -> "7040" 
+  "7058" -> "7056" 
+  "7070" -> "7068" 
+  "7076" -> "7074" 
+  "7079" -> "7077" 
+  "7025" -> "7024" 
+  "7026" -> "7028" 
+  "7028" -> "7025" 
+  "7010" -> "7015" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/126-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/126-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/126-cfg.dot	2023-06-07 19:35:01.467387165 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/126-cfg.dot	2023-06-07 19:35:08.017386518 +0330
@@ -1,77 +1,82 @@
-digraph "SetStaticObjectField" {  
-"6979" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid))<SUB>1485</SUB>> ]
-"6997" [label = <(soa,soa(env))<SUB>1486</SUB>> ]
-"7000" [label = <(&lt;operator&gt;.assignment,* f = jni::DecodeArtField&lt;kEnableIndexIds&gt;(fid))<SUB>1487</SUB>> ]
-"7009" [label = <(NotifySetObjectField,NotifySetObjectField(f, nullptr, java_value))<SUB>1488</SUB>> ]
-"7013" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; v = soa.Decode&lt;mirror::Object&gt;(java_value))<SUB>1489</SUB>> ]
-"7030" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetObject&lt;false&gt;(f-&gt;GetDeclaringClass(), v))<SUB>1490</SUB>> ]
-"7002" [label = <(&lt;operator&gt;.greaterThan,jni::DecodeArtField&lt;kEnableIndexIds&gt;(fid))<SUB>1487</SUB>> ]
-"7014" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; v)<SUB>1489</SUB>> ]
-"7021" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(java_value))<SUB>1489</SUB>> ]
-"7031" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetObject&lt;false)<SUB>1490</SUB>> ]
-"7036" [label = <(&lt;operator&gt;.bracketedPrimary,(f-&gt;GetDeclaringClass(), v))<SUB>1490</SUB>> ]
-"7003" [label = <(&lt;operator&gt;.lessThan,jni::DecodeArtField&lt;kEnableIndexIds)<SUB>1487</SUB>> ]
-"7015" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>1489</SUB>> ]
-"7022" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>1489</SUB>> ]
-"7032" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetObject)<SUB>1490</SUB>> ]
-"7037" [label = <(&lt;operator&gt;.expressionList,f-&gt;GetDeclaringClass(), v)<SUB>1490</SUB>> ]
-"6983" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1485</SUB>> ]
-"7004" [label = <(&lt;operator&gt;.fieldAccess,jni::DecodeArtField)<SUB>1487</SUB>> ]
-"7017" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1489</SUB>> ]
-"7023" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1489</SUB>> ]
-"7026" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1489</SUB>> ]
-"7034" [label = <(FIELD_IDENTIFIER,SetObject,SetObject)<SUB>1490</SUB>> ]
-"7038" [label = <(GetDeclaringClass,f-&gt;GetDeclaringClass())<SUB>1490</SUB>> ]
-"6984" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1485</SUB>> ]
-"6988" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1485</SUB>> ]
-"6995" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid))<SUB>1485</SUB>> ]
-"7006" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1487</SUB>> ]
-"7019" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1489</SUB>> ]
-"7025" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1489</SUB>> ]
-"7028" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1489</SUB>> ]
-"7039" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1490</SUB>> ]
-"6989" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1485</SUB>> ]
-"7041" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1490</SUB>> ]
-"6990" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1485</SUB>> ]
-"6992" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1485</SUB>> ]
-"6973" [label = <(METHOD,SetStaticObjectField)<SUB>1484</SUB>> ]
-"7043" [label = <(METHOD_RETURN,void)<SUB>1484</SUB>> ]
-  "6979" -> "6984" 
-  "6979" -> "6997" 
-  "6997" -> "7006" 
-  "7000" -> "7009" 
-  "7009" -> "7019" 
-  "7013" -> "7034" 
-  "7030" -> "7043" 
-  "7002" -> "7000" 
-  "7014" -> "7025" 
-  "7021" -> "7013" 
-  "7031" -> "7041" 
-  "7036" -> "7030" 
-  "7003" -> "7002" 
-  "7015" -> "7014" 
-  "7022" -> "7021" 
-  "7032" -> "7031" 
-  "7037" -> "7036" 
-  "6983" -> "6990" 
-  "6983" -> "6997" 
-  "7004" -> "7003" 
-  "7017" -> "7015" 
-  "7023" -> "7028" 
-  "7026" -> "7022" 
-  "7034" -> "7032" 
-  "7038" -> "7037" 
-  "6984" -> "6983" 
-  "6988" -> "6995" 
-  "6995" -> "7043" 
-  "7006" -> "7004" 
-  "7019" -> "7017" 
-  "7025" -> "7023" 
-  "7028" -> "7026" 
-  "7039" -> "7038" 
-  "6989" -> "6988" 
-  "7041" -> "7039" 
-  "6990" -> "6992" 
-  "6992" -> "6989" 
-  "6973" -> "6979" 
+digraph "GetShortField" {  
+"7094" [label = <(GET_PRIMITIVE_FIELD,GET_PRIMITIVE_FIELD(Short, obj))<SUB>1460</SUB>> ]
+"7128" [label = <(soa,ScopedObjectAccess)<SUB>1460</SUB>> ]
+"7131" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1460</SUB>> ]
+"7140" [label = <(NotifyGetField,NotifyGetField(f, obj))<SUB>1460</SUB>> ]
+"7143" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1460</SUB>> ]
+"7160" [label = <(RETURN,GET_PRIMITIVE_FIELD(Short, obj);,GET_PRIMITIVE_FIELD(Short, obj);)<SUB>1460</SUB>> ]
+"7113" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1460</SUB>> ]
+"7133" [label = <(&lt;operator&gt;.greaterThan,jni::DecodeArtField &lt; kEnableIndexIds &gt; (fid))<SUB>1460</SUB>> ]
+"7144" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1460</SUB>> ]
+"7151" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1460</SUB>> ]
+"7161" [label = <(GET_PRIMITIVE_FIELD(Short, obj),f-&gt;GetShort(o))<SUB>1460</SUB>> ]
+"7114" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1460</SUB>> ]
+"7118" [label = <(GET_PRIMITIVE_FIELD(Short, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1460</SUB>> ]
+"7125" [label = <(RETURN,GET_PRIMITIVE_FIELD(Short, obj),GET_PRIMITIVE_FIELD(Short, obj))<SUB>1460</SUB>> ]
+"7134" [label = <(&lt;operator&gt;.lessThan,jni::DecodeArtField &lt; kEnableIndexIds)<SUB>1460</SUB>> ]
+"7145" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1460</SUB>> ]
+"7152" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1460</SUB>> ]
+"7162" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetShort)<SUB>1460</SUB>> ]
+"7098" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1460</SUB>> ]
+"7119" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1460</SUB>> ]
+"7135" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Short, obj))<SUB>1460</SUB>> ]
+"7147" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Short, obj))<SUB>1460</SUB>> ]
+"7153" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1460</SUB>> ]
+"7156" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Short, obj))<SUB>1460</SUB>> ]
+"7164" [label = <(FIELD_IDENTIFIER,GetShort,GetShort)<SUB>1460</SUB>> ]
+"7099" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1460</SUB>> ]
+"7103" [label = <(GET_PRIMITIVE_FIELD(Short, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1460</SUB>> ]
+"7110" [label = <(RETURN,GET_PRIMITIVE_FIELD(Short, obj),GET_PRIMITIVE_FIELD(Short, obj))<SUB>1460</SUB>> ]
+"7120" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1460</SUB>> ]
+"7122" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1460</SUB>> ]
+"7137" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1460</SUB>> ]
+"7149" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1460</SUB>> ]
+"7155" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1460</SUB>> ]
+"7158" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1460</SUB>> ]
+"7104" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1460</SUB>> ]
+"7105" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1460</SUB>> ]
+"7107" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1460</SUB>> ]
+"7089" [label = <(METHOD,GetShortField)<SUB>1459</SUB>> ]
+"7166" [label = <(METHOD_RETURN,jshort)<SUB>1459</SUB>> ]
+  "7094" -> "7099" 
+  "7094" -> "7114" 
+  "7128" -> "7137" 
+  "7131" -> "7140" 
+  "7140" -> "7149" 
+  "7143" -> "7164" 
+  "7160" -> "7166" 
+  "7113" -> "7120" 
+  "7113" -> "7128" 
+  "7133" -> "7131" 
+  "7144" -> "7155" 
+  "7151" -> "7143" 
+  "7161" -> "7160" 
+  "7114" -> "7113" 
+  "7118" -> "7125" 
+  "7125" -> "7166" 
+  "7134" -> "7133" 
+  "7145" -> "7144" 
+  "7152" -> "7151" 
+  "7162" -> "7161" 
+  "7098" -> "7105" 
+  "7098" -> "7114" 
+  "7119" -> "7118" 
+  "7135" -> "7134" 
+  "7147" -> "7145" 
+  "7153" -> "7158" 
+  "7156" -> "7152" 
+  "7164" -> "7162" 
+  "7099" -> "7098" 
+  "7103" -> "7110" 
+  "7110" -> "7166" 
+  "7120" -> "7122" 
+  "7122" -> "7119" 
+  "7137" -> "7135" 
+  "7149" -> "7147" 
+  "7155" -> "7153" 
+  "7158" -> "7156" 
+  "7104" -> "7103" 
+  "7105" -> "7107" 
+  "7107" -> "7104" 
+  "7089" -> "7094" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/127-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/127-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/127-cfg.dot	2023-06-07 19:35:01.467387165 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/127-cfg.dot	2023-06-07 19:35:08.017386518 +0330
@@ -1,82 +1,82 @@
-digraph "GetBooleanField" {  
-"7050" [label = <(GET_PRIMITIVE_FIELD,GET_PRIMITIVE_FIELD(Boolean, obj))<SUB>1526</SUB>> ]
-"7084" [label = <(soa,ScopedObjectAccess)<SUB>1526</SUB>> ]
-"7087" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1526</SUB>> ]
-"7096" [label = <(NotifyGetField,NotifyGetField(f, obj))<SUB>1526</SUB>> ]
-"7099" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1526</SUB>> ]
-"7116" [label = <(RETURN,GET_PRIMITIVE_FIELD(Boolean, obj);,GET_PRIMITIVE_FIELD(Boolean, obj);)<SUB>1526</SUB>> ]
-"7069" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1526</SUB>> ]
-"7089" [label = <(&lt;operator&gt;.greaterThan,jni::DecodeArtField &lt; kEnableIndexIds &gt; (fid))<SUB>1526</SUB>> ]
-"7100" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1526</SUB>> ]
-"7107" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1526</SUB>> ]
-"7117" [label = <(GET_PRIMITIVE_FIELD(Boolean, obj),f-&gt;GetBoolean(o))<SUB>1526</SUB>> ]
-"7070" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1526</SUB>> ]
-"7074" [label = <(GET_PRIMITIVE_FIELD(Boolean, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1526</SUB>> ]
-"7081" [label = <(RETURN,GET_PRIMITIVE_FIELD(Boolean, obj),GET_PRIMITIVE_FIELD(Boolean, obj))<SUB>1526</SUB>> ]
-"7090" [label = <(&lt;operator&gt;.lessThan,jni::DecodeArtField &lt; kEnableIndexIds)<SUB>1526</SUB>> ]
-"7101" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1526</SUB>> ]
-"7108" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1526</SUB>> ]
-"7118" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetBoolean)<SUB>1526</SUB>> ]
-"7054" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1526</SUB>> ]
-"7075" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1526</SUB>> ]
-"7091" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Boolean, obj))<SUB>1526</SUB>> ]
-"7103" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Boolean, obj))<SUB>1526</SUB>> ]
-"7109" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1526</SUB>> ]
-"7112" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Boolean, obj))<SUB>1526</SUB>> ]
-"7120" [label = <(FIELD_IDENTIFIER,GetBoolean,GetBoolean)<SUB>1526</SUB>> ]
-"7055" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1526</SUB>> ]
-"7059" [label = <(GET_PRIMITIVE_FIELD(Boolean, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1526</SUB>> ]
-"7066" [label = <(RETURN,GET_PRIMITIVE_FIELD(Boolean, obj),GET_PRIMITIVE_FIELD(Boolean, obj))<SUB>1526</SUB>> ]
-"7076" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1526</SUB>> ]
-"7078" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1526</SUB>> ]
-"7093" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1526</SUB>> ]
-"7105" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1526</SUB>> ]
-"7111" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1526</SUB>> ]
-"7114" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1526</SUB>> ]
-"7060" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1526</SUB>> ]
-"7061" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1526</SUB>> ]
-"7063" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1526</SUB>> ]
-"7045" [label = <(METHOD,GetBooleanField)<SUB>1525</SUB>> ]
-"7122" [label = <(METHOD_RETURN,jboolean)<SUB>1525</SUB>> ]
-  "7050" -> "7055" 
-  "7050" -> "7070" 
-  "7084" -> "7093" 
-  "7087" -> "7096" 
-  "7096" -> "7105" 
-  "7099" -> "7120" 
-  "7116" -> "7122" 
-  "7069" -> "7076" 
-  "7069" -> "7084" 
-  "7089" -> "7087" 
-  "7100" -> "7111" 
-  "7107" -> "7099" 
-  "7117" -> "7116" 
-  "7070" -> "7069" 
-  "7074" -> "7081" 
-  "7081" -> "7122" 
-  "7090" -> "7089" 
-  "7101" -> "7100" 
-  "7108" -> "7107" 
-  "7118" -> "7117" 
-  "7054" -> "7061" 
-  "7054" -> "7070" 
-  "7075" -> "7074" 
-  "7091" -> "7090" 
-  "7103" -> "7101" 
-  "7109" -> "7114" 
-  "7112" -> "7108" 
-  "7120" -> "7118" 
-  "7055" -> "7054" 
-  "7059" -> "7066" 
-  "7066" -> "7122" 
-  "7076" -> "7078" 
-  "7078" -> "7075" 
-  "7093" -> "7091" 
-  "7105" -> "7103" 
-  "7111" -> "7109" 
-  "7114" -> "7112" 
-  "7060" -> "7059" 
-  "7061" -> "7063" 
-  "7063" -> "7060" 
-  "7045" -> "7050" 
+digraph "GetIntField" {  
+"7173" [label = <(GET_PRIMITIVE_FIELD,GET_PRIMITIVE_FIELD(Int, obj))<SUB>1464</SUB>> ]
+"7207" [label = <(soa,ScopedObjectAccess)<SUB>1464</SUB>> ]
+"7210" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1464</SUB>> ]
+"7219" [label = <(NotifyGetField,NotifyGetField(f, obj))<SUB>1464</SUB>> ]
+"7222" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1464</SUB>> ]
+"7239" [label = <(RETURN,GET_PRIMITIVE_FIELD(Int, obj);,GET_PRIMITIVE_FIELD(Int, obj);)<SUB>1464</SUB>> ]
+"7192" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1464</SUB>> ]
+"7212" [label = <(&lt;operator&gt;.greaterThan,jni::DecodeArtField &lt; kEnableIndexIds &gt; (fid))<SUB>1464</SUB>> ]
+"7223" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1464</SUB>> ]
+"7230" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1464</SUB>> ]
+"7240" [label = <(GET_PRIMITIVE_FIELD(Int, obj),f-&gt;GetInt(o))<SUB>1464</SUB>> ]
+"7193" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1464</SUB>> ]
+"7197" [label = <(GET_PRIMITIVE_FIELD(Int, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1464</SUB>> ]
+"7204" [label = <(RETURN,GET_PRIMITIVE_FIELD(Int, obj),GET_PRIMITIVE_FIELD(Int, obj))<SUB>1464</SUB>> ]
+"7213" [label = <(&lt;operator&gt;.lessThan,jni::DecodeArtField &lt; kEnableIndexIds)<SUB>1464</SUB>> ]
+"7224" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1464</SUB>> ]
+"7231" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1464</SUB>> ]
+"7241" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetInt)<SUB>1464</SUB>> ]
+"7177" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1464</SUB>> ]
+"7198" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1464</SUB>> ]
+"7214" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Int, obj))<SUB>1464</SUB>> ]
+"7226" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Int, obj))<SUB>1464</SUB>> ]
+"7232" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1464</SUB>> ]
+"7235" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Int, obj))<SUB>1464</SUB>> ]
+"7243" [label = <(FIELD_IDENTIFIER,GetInt,GetInt)<SUB>1464</SUB>> ]
+"7178" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1464</SUB>> ]
+"7182" [label = <(GET_PRIMITIVE_FIELD(Int, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1464</SUB>> ]
+"7189" [label = <(RETURN,GET_PRIMITIVE_FIELD(Int, obj),GET_PRIMITIVE_FIELD(Int, obj))<SUB>1464</SUB>> ]
+"7199" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1464</SUB>> ]
+"7201" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1464</SUB>> ]
+"7216" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1464</SUB>> ]
+"7228" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1464</SUB>> ]
+"7234" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1464</SUB>> ]
+"7237" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1464</SUB>> ]
+"7183" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1464</SUB>> ]
+"7184" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1464</SUB>> ]
+"7186" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1464</SUB>> ]
+"7168" [label = <(METHOD,GetIntField)<SUB>1463</SUB>> ]
+"7245" [label = <(METHOD_RETURN,jint)<SUB>1463</SUB>> ]
+  "7173" -> "7178" 
+  "7173" -> "7193" 
+  "7207" -> "7216" 
+  "7210" -> "7219" 
+  "7219" -> "7228" 
+  "7222" -> "7243" 
+  "7239" -> "7245" 
+  "7192" -> "7199" 
+  "7192" -> "7207" 
+  "7212" -> "7210" 
+  "7223" -> "7234" 
+  "7230" -> "7222" 
+  "7240" -> "7239" 
+  "7193" -> "7192" 
+  "7197" -> "7204" 
+  "7204" -> "7245" 
+  "7213" -> "7212" 
+  "7224" -> "7223" 
+  "7231" -> "7230" 
+  "7241" -> "7240" 
+  "7177" -> "7184" 
+  "7177" -> "7193" 
+  "7198" -> "7197" 
+  "7214" -> "7213" 
+  "7226" -> "7224" 
+  "7232" -> "7237" 
+  "7235" -> "7231" 
+  "7243" -> "7241" 
+  "7178" -> "7177" 
+  "7182" -> "7189" 
+  "7189" -> "7245" 
+  "7199" -> "7201" 
+  "7201" -> "7198" 
+  "7216" -> "7214" 
+  "7228" -> "7226" 
+  "7234" -> "7232" 
+  "7237" -> "7235" 
+  "7183" -> "7182" 
+  "7184" -> "7186" 
+  "7186" -> "7183" 
+  "7168" -> "7173" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/128-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/128-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/128-cfg.dot	2023-06-07 19:35:01.467387165 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/128-cfg.dot	2023-06-07 19:35:08.017386518 +0330
@@ -1,82 +1,82 @@
-digraph "GetByteField" {  
-"7129" [label = <(GET_PRIMITIVE_FIELD,GET_PRIMITIVE_FIELD(Byte, obj))<SUB>1530</SUB>> ]
-"7163" [label = <(soa,ScopedObjectAccess)<SUB>1530</SUB>> ]
-"7166" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1530</SUB>> ]
-"7175" [label = <(NotifyGetField,NotifyGetField(f, obj))<SUB>1530</SUB>> ]
-"7178" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1530</SUB>> ]
-"7195" [label = <(RETURN,GET_PRIMITIVE_FIELD(Byte, obj);,GET_PRIMITIVE_FIELD(Byte, obj);)<SUB>1530</SUB>> ]
-"7148" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1530</SUB>> ]
-"7168" [label = <(&lt;operator&gt;.greaterThan,jni::DecodeArtField &lt; kEnableIndexIds &gt; (fid))<SUB>1530</SUB>> ]
-"7179" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1530</SUB>> ]
-"7186" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1530</SUB>> ]
-"7196" [label = <(GET_PRIMITIVE_FIELD(Byte, obj),f-&gt;GetByte(o))<SUB>1530</SUB>> ]
-"7149" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1530</SUB>> ]
-"7153" [label = <(GET_PRIMITIVE_FIELD(Byte, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1530</SUB>> ]
-"7160" [label = <(RETURN,GET_PRIMITIVE_FIELD(Byte, obj),GET_PRIMITIVE_FIELD(Byte, obj))<SUB>1530</SUB>> ]
-"7169" [label = <(&lt;operator&gt;.lessThan,jni::DecodeArtField &lt; kEnableIndexIds)<SUB>1530</SUB>> ]
-"7180" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1530</SUB>> ]
-"7187" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1530</SUB>> ]
-"7197" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetByte)<SUB>1530</SUB>> ]
-"7133" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1530</SUB>> ]
-"7154" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1530</SUB>> ]
-"7170" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Byte, obj))<SUB>1530</SUB>> ]
-"7182" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Byte, obj))<SUB>1530</SUB>> ]
-"7188" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1530</SUB>> ]
-"7191" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Byte, obj))<SUB>1530</SUB>> ]
-"7199" [label = <(FIELD_IDENTIFIER,GetByte,GetByte)<SUB>1530</SUB>> ]
-"7134" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1530</SUB>> ]
-"7138" [label = <(GET_PRIMITIVE_FIELD(Byte, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1530</SUB>> ]
-"7145" [label = <(RETURN,GET_PRIMITIVE_FIELD(Byte, obj),GET_PRIMITIVE_FIELD(Byte, obj))<SUB>1530</SUB>> ]
-"7155" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1530</SUB>> ]
-"7157" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1530</SUB>> ]
-"7172" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1530</SUB>> ]
-"7184" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1530</SUB>> ]
-"7190" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1530</SUB>> ]
-"7193" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1530</SUB>> ]
-"7139" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1530</SUB>> ]
-"7140" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1530</SUB>> ]
-"7142" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1530</SUB>> ]
-"7124" [label = <(METHOD,GetByteField)<SUB>1529</SUB>> ]
-"7201" [label = <(METHOD_RETURN,jbyte)<SUB>1529</SUB>> ]
-  "7129" -> "7134" 
-  "7129" -> "7149" 
-  "7163" -> "7172" 
-  "7166" -> "7175" 
-  "7175" -> "7184" 
-  "7178" -> "7199" 
-  "7195" -> "7201" 
-  "7148" -> "7155" 
-  "7148" -> "7163" 
-  "7168" -> "7166" 
-  "7179" -> "7190" 
-  "7186" -> "7178" 
-  "7196" -> "7195" 
-  "7149" -> "7148" 
-  "7153" -> "7160" 
-  "7160" -> "7201" 
-  "7169" -> "7168" 
-  "7180" -> "7179" 
-  "7187" -> "7186" 
-  "7197" -> "7196" 
-  "7133" -> "7140" 
-  "7133" -> "7149" 
-  "7154" -> "7153" 
-  "7170" -> "7169" 
-  "7182" -> "7180" 
-  "7188" -> "7193" 
-  "7191" -> "7187" 
-  "7199" -> "7197" 
-  "7134" -> "7133" 
-  "7138" -> "7145" 
-  "7145" -> "7201" 
-  "7155" -> "7157" 
-  "7157" -> "7154" 
-  "7172" -> "7170" 
-  "7184" -> "7182" 
-  "7190" -> "7188" 
-  "7193" -> "7191" 
-  "7139" -> "7138" 
-  "7140" -> "7142" 
-  "7142" -> "7139" 
-  "7124" -> "7129" 
+digraph "GetLongField" {  
+"7252" [label = <(GET_PRIMITIVE_FIELD,GET_PRIMITIVE_FIELD(Long, obj))<SUB>1468</SUB>> ]
+"7286" [label = <(soa,ScopedObjectAccess)<SUB>1468</SUB>> ]
+"7289" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1468</SUB>> ]
+"7298" [label = <(NotifyGetField,NotifyGetField(f, obj))<SUB>1468</SUB>> ]
+"7301" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1468</SUB>> ]
+"7318" [label = <(RETURN,GET_PRIMITIVE_FIELD(Long, obj);,GET_PRIMITIVE_FIELD(Long, obj);)<SUB>1468</SUB>> ]
+"7271" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1468</SUB>> ]
+"7291" [label = <(&lt;operator&gt;.greaterThan,jni::DecodeArtField &lt; kEnableIndexIds &gt; (fid))<SUB>1468</SUB>> ]
+"7302" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1468</SUB>> ]
+"7309" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1468</SUB>> ]
+"7319" [label = <(GET_PRIMITIVE_FIELD(Long, obj),f-&gt;GetLong(o))<SUB>1468</SUB>> ]
+"7272" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1468</SUB>> ]
+"7276" [label = <(GET_PRIMITIVE_FIELD(Long, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1468</SUB>> ]
+"7283" [label = <(RETURN,GET_PRIMITIVE_FIELD(Long, obj),GET_PRIMITIVE_FIELD(Long, obj))<SUB>1468</SUB>> ]
+"7292" [label = <(&lt;operator&gt;.lessThan,jni::DecodeArtField &lt; kEnableIndexIds)<SUB>1468</SUB>> ]
+"7303" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1468</SUB>> ]
+"7310" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1468</SUB>> ]
+"7320" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetLong)<SUB>1468</SUB>> ]
+"7256" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1468</SUB>> ]
+"7277" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1468</SUB>> ]
+"7293" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Long, obj))<SUB>1468</SUB>> ]
+"7305" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Long, obj))<SUB>1468</SUB>> ]
+"7311" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1468</SUB>> ]
+"7314" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Long, obj))<SUB>1468</SUB>> ]
+"7322" [label = <(FIELD_IDENTIFIER,GetLong,GetLong)<SUB>1468</SUB>> ]
+"7257" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1468</SUB>> ]
+"7261" [label = <(GET_PRIMITIVE_FIELD(Long, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1468</SUB>> ]
+"7268" [label = <(RETURN,GET_PRIMITIVE_FIELD(Long, obj),GET_PRIMITIVE_FIELD(Long, obj))<SUB>1468</SUB>> ]
+"7278" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1468</SUB>> ]
+"7280" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1468</SUB>> ]
+"7295" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1468</SUB>> ]
+"7307" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1468</SUB>> ]
+"7313" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1468</SUB>> ]
+"7316" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1468</SUB>> ]
+"7262" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1468</SUB>> ]
+"7263" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1468</SUB>> ]
+"7265" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1468</SUB>> ]
+"7247" [label = <(METHOD,GetLongField)<SUB>1467</SUB>> ]
+"7324" [label = <(METHOD_RETURN,jlong)<SUB>1467</SUB>> ]
+  "7252" -> "7257" 
+  "7252" -> "7272" 
+  "7286" -> "7295" 
+  "7289" -> "7298" 
+  "7298" -> "7307" 
+  "7301" -> "7322" 
+  "7318" -> "7324" 
+  "7271" -> "7278" 
+  "7271" -> "7286" 
+  "7291" -> "7289" 
+  "7302" -> "7313" 
+  "7309" -> "7301" 
+  "7319" -> "7318" 
+  "7272" -> "7271" 
+  "7276" -> "7283" 
+  "7283" -> "7324" 
+  "7292" -> "7291" 
+  "7303" -> "7302" 
+  "7310" -> "7309" 
+  "7320" -> "7319" 
+  "7256" -> "7263" 
+  "7256" -> "7272" 
+  "7277" -> "7276" 
+  "7293" -> "7292" 
+  "7305" -> "7303" 
+  "7311" -> "7316" 
+  "7314" -> "7310" 
+  "7322" -> "7320" 
+  "7257" -> "7256" 
+  "7261" -> "7268" 
+  "7268" -> "7324" 
+  "7278" -> "7280" 
+  "7280" -> "7277" 
+  "7295" -> "7293" 
+  "7307" -> "7305" 
+  "7313" -> "7311" 
+  "7316" -> "7314" 
+  "7262" -> "7261" 
+  "7263" -> "7265" 
+  "7265" -> "7262" 
+  "7247" -> "7252" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/129-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/129-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/129-cfg.dot	2023-06-07 19:35:01.477387164 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/129-cfg.dot	2023-06-07 19:35:08.017386518 +0330
@@ -1,82 +1,82 @@
-digraph "GetCharField" {  
-"7208" [label = <(GET_PRIMITIVE_FIELD,GET_PRIMITIVE_FIELD(Char, obj))<SUB>1534</SUB>> ]
-"7242" [label = <(soa,ScopedObjectAccess)<SUB>1534</SUB>> ]
-"7245" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1534</SUB>> ]
-"7254" [label = <(NotifyGetField,NotifyGetField(f, obj))<SUB>1534</SUB>> ]
-"7257" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1534</SUB>> ]
-"7274" [label = <(RETURN,GET_PRIMITIVE_FIELD(Char, obj);,GET_PRIMITIVE_FIELD(Char, obj);)<SUB>1534</SUB>> ]
-"7227" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1534</SUB>> ]
-"7247" [label = <(&lt;operator&gt;.greaterThan,jni::DecodeArtField &lt; kEnableIndexIds &gt; (fid))<SUB>1534</SUB>> ]
-"7258" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1534</SUB>> ]
-"7265" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1534</SUB>> ]
-"7275" [label = <(GET_PRIMITIVE_FIELD(Char, obj),f-&gt;GetChar(o))<SUB>1534</SUB>> ]
-"7228" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1534</SUB>> ]
-"7232" [label = <(GET_PRIMITIVE_FIELD(Char, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1534</SUB>> ]
-"7239" [label = <(RETURN,GET_PRIMITIVE_FIELD(Char, obj),GET_PRIMITIVE_FIELD(Char, obj))<SUB>1534</SUB>> ]
-"7248" [label = <(&lt;operator&gt;.lessThan,jni::DecodeArtField &lt; kEnableIndexIds)<SUB>1534</SUB>> ]
-"7259" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1534</SUB>> ]
-"7266" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1534</SUB>> ]
-"7276" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetChar)<SUB>1534</SUB>> ]
-"7212" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1534</SUB>> ]
-"7233" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1534</SUB>> ]
-"7249" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Char, obj))<SUB>1534</SUB>> ]
-"7261" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Char, obj))<SUB>1534</SUB>> ]
-"7267" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1534</SUB>> ]
-"7270" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Char, obj))<SUB>1534</SUB>> ]
-"7278" [label = <(FIELD_IDENTIFIER,GetChar,GetChar)<SUB>1534</SUB>> ]
-"7213" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1534</SUB>> ]
-"7217" [label = <(GET_PRIMITIVE_FIELD(Char, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1534</SUB>> ]
-"7224" [label = <(RETURN,GET_PRIMITIVE_FIELD(Char, obj),GET_PRIMITIVE_FIELD(Char, obj))<SUB>1534</SUB>> ]
-"7234" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1534</SUB>> ]
-"7236" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1534</SUB>> ]
-"7251" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1534</SUB>> ]
-"7263" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1534</SUB>> ]
-"7269" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1534</SUB>> ]
-"7272" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1534</SUB>> ]
-"7218" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1534</SUB>> ]
-"7219" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1534</SUB>> ]
-"7221" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1534</SUB>> ]
-"7203" [label = <(METHOD,GetCharField)<SUB>1533</SUB>> ]
-"7280" [label = <(METHOD_RETURN,jchar)<SUB>1533</SUB>> ]
-  "7208" -> "7213" 
-  "7208" -> "7228" 
-  "7242" -> "7251" 
-  "7245" -> "7254" 
-  "7254" -> "7263" 
-  "7257" -> "7278" 
-  "7274" -> "7280" 
-  "7227" -> "7234" 
-  "7227" -> "7242" 
-  "7247" -> "7245" 
-  "7258" -> "7269" 
-  "7265" -> "7257" 
-  "7275" -> "7274" 
-  "7228" -> "7227" 
-  "7232" -> "7239" 
-  "7239" -> "7280" 
-  "7248" -> "7247" 
-  "7259" -> "7258" 
-  "7266" -> "7265" 
-  "7276" -> "7275" 
-  "7212" -> "7219" 
-  "7212" -> "7228" 
-  "7233" -> "7232" 
-  "7249" -> "7248" 
-  "7261" -> "7259" 
-  "7267" -> "7272" 
-  "7270" -> "7266" 
-  "7278" -> "7276" 
-  "7213" -> "7212" 
-  "7217" -> "7224" 
-  "7224" -> "7280" 
-  "7234" -> "7236" 
-  "7236" -> "7233" 
-  "7251" -> "7249" 
-  "7263" -> "7261" 
-  "7269" -> "7267" 
-  "7272" -> "7270" 
-  "7218" -> "7217" 
-  "7219" -> "7221" 
-  "7221" -> "7218" 
-  "7203" -> "7208" 
+digraph "GetFloatField" {  
+"7331" [label = <(GET_PRIMITIVE_FIELD,GET_PRIMITIVE_FIELD(Float, obj))<SUB>1472</SUB>> ]
+"7365" [label = <(soa,ScopedObjectAccess)<SUB>1472</SUB>> ]
+"7368" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1472</SUB>> ]
+"7377" [label = <(NotifyGetField,NotifyGetField(f, obj))<SUB>1472</SUB>> ]
+"7380" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1472</SUB>> ]
+"7397" [label = <(RETURN,GET_PRIMITIVE_FIELD(Float, obj);,GET_PRIMITIVE_FIELD(Float, obj);)<SUB>1472</SUB>> ]
+"7350" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1472</SUB>> ]
+"7370" [label = <(&lt;operator&gt;.greaterThan,jni::DecodeArtField &lt; kEnableIndexIds &gt; (fid))<SUB>1472</SUB>> ]
+"7381" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1472</SUB>> ]
+"7388" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1472</SUB>> ]
+"7398" [label = <(GET_PRIMITIVE_FIELD(Float, obj),f-&gt;GetFloat(o))<SUB>1472</SUB>> ]
+"7351" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1472</SUB>> ]
+"7355" [label = <(GET_PRIMITIVE_FIELD(Float, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1472</SUB>> ]
+"7362" [label = <(RETURN,GET_PRIMITIVE_FIELD(Float, obj),GET_PRIMITIVE_FIELD(Float, obj))<SUB>1472</SUB>> ]
+"7371" [label = <(&lt;operator&gt;.lessThan,jni::DecodeArtField &lt; kEnableIndexIds)<SUB>1472</SUB>> ]
+"7382" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1472</SUB>> ]
+"7389" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1472</SUB>> ]
+"7399" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetFloat)<SUB>1472</SUB>> ]
+"7335" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1472</SUB>> ]
+"7356" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1472</SUB>> ]
+"7372" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Float, obj))<SUB>1472</SUB>> ]
+"7384" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Float, obj))<SUB>1472</SUB>> ]
+"7390" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1472</SUB>> ]
+"7393" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Float, obj))<SUB>1472</SUB>> ]
+"7401" [label = <(FIELD_IDENTIFIER,GetFloat,GetFloat)<SUB>1472</SUB>> ]
+"7336" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1472</SUB>> ]
+"7340" [label = <(GET_PRIMITIVE_FIELD(Float, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1472</SUB>> ]
+"7347" [label = <(RETURN,GET_PRIMITIVE_FIELD(Float, obj),GET_PRIMITIVE_FIELD(Float, obj))<SUB>1472</SUB>> ]
+"7357" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1472</SUB>> ]
+"7359" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1472</SUB>> ]
+"7374" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1472</SUB>> ]
+"7386" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1472</SUB>> ]
+"7392" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1472</SUB>> ]
+"7395" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1472</SUB>> ]
+"7341" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1472</SUB>> ]
+"7342" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1472</SUB>> ]
+"7344" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1472</SUB>> ]
+"7326" [label = <(METHOD,GetFloatField)<SUB>1471</SUB>> ]
+"7403" [label = <(METHOD_RETURN,jfloat)<SUB>1471</SUB>> ]
+  "7331" -> "7336" 
+  "7331" -> "7351" 
+  "7365" -> "7374" 
+  "7368" -> "7377" 
+  "7377" -> "7386" 
+  "7380" -> "7401" 
+  "7397" -> "7403" 
+  "7350" -> "7357" 
+  "7350" -> "7365" 
+  "7370" -> "7368" 
+  "7381" -> "7392" 
+  "7388" -> "7380" 
+  "7398" -> "7397" 
+  "7351" -> "7350" 
+  "7355" -> "7362" 
+  "7362" -> "7403" 
+  "7371" -> "7370" 
+  "7382" -> "7381" 
+  "7389" -> "7388" 
+  "7399" -> "7398" 
+  "7335" -> "7342" 
+  "7335" -> "7351" 
+  "7356" -> "7355" 
+  "7372" -> "7371" 
+  "7384" -> "7382" 
+  "7390" -> "7395" 
+  "7393" -> "7389" 
+  "7401" -> "7399" 
+  "7336" -> "7335" 
+  "7340" -> "7347" 
+  "7347" -> "7403" 
+  "7357" -> "7359" 
+  "7359" -> "7356" 
+  "7374" -> "7372" 
+  "7386" -> "7384" 
+  "7392" -> "7390" 
+  "7395" -> "7393" 
+  "7341" -> "7340" 
+  "7342" -> "7344" 
+  "7344" -> "7341" 
+  "7326" -> "7331" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/13-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/13-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/13-cfg.dot	2023-06-07 19:35:01.337387177 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/13-cfg.dot	2023-06-07 19:35:07.907386529 +0330
@@ -1,5 +1,5 @@
-digraph "ReportInvalidJNINativeMethod" {  
-"349" [label = <(METHOD,ReportInvalidJNINativeMethod)<SUB>283</SUB>> ]
-"355" [label = <(METHOD_RETURN,void)<SUB>283</SUB>> ]
-  "349" -> "355" 
+digraph "ThrowAIOOBE" {  
+"223" [label = <(METHOD,ThrowAIOOBE)<SUB>266</SUB>> ]
+"230" [label = <(METHOD_RETURN,void)<SUB>266</SUB>> ]
+  "223" -> "230" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/130-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/130-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/130-cfg.dot	2023-06-07 19:35:01.477387164 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/130-cfg.dot	2023-06-07 19:35:08.017386518 +0330
@@ -1,82 +1,82 @@
-digraph "GetShortField" {  
-"7287" [label = <(GET_PRIMITIVE_FIELD,GET_PRIMITIVE_FIELD(Short, obj))<SUB>1538</SUB>> ]
-"7321" [label = <(soa,ScopedObjectAccess)<SUB>1538</SUB>> ]
-"7324" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1538</SUB>> ]
-"7333" [label = <(NotifyGetField,NotifyGetField(f, obj))<SUB>1538</SUB>> ]
-"7336" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1538</SUB>> ]
-"7353" [label = <(RETURN,GET_PRIMITIVE_FIELD(Short, obj);,GET_PRIMITIVE_FIELD(Short, obj);)<SUB>1538</SUB>> ]
-"7306" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1538</SUB>> ]
-"7326" [label = <(&lt;operator&gt;.greaterThan,jni::DecodeArtField &lt; kEnableIndexIds &gt; (fid))<SUB>1538</SUB>> ]
-"7337" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1538</SUB>> ]
-"7344" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1538</SUB>> ]
-"7354" [label = <(GET_PRIMITIVE_FIELD(Short, obj),f-&gt;GetShort(o))<SUB>1538</SUB>> ]
-"7307" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1538</SUB>> ]
-"7311" [label = <(GET_PRIMITIVE_FIELD(Short, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1538</SUB>> ]
-"7318" [label = <(RETURN,GET_PRIMITIVE_FIELD(Short, obj),GET_PRIMITIVE_FIELD(Short, obj))<SUB>1538</SUB>> ]
-"7327" [label = <(&lt;operator&gt;.lessThan,jni::DecodeArtField &lt; kEnableIndexIds)<SUB>1538</SUB>> ]
-"7338" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1538</SUB>> ]
-"7345" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1538</SUB>> ]
-"7355" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetShort)<SUB>1538</SUB>> ]
-"7291" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1538</SUB>> ]
-"7312" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1538</SUB>> ]
-"7328" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Short, obj))<SUB>1538</SUB>> ]
-"7340" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Short, obj))<SUB>1538</SUB>> ]
-"7346" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1538</SUB>> ]
-"7349" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Short, obj))<SUB>1538</SUB>> ]
-"7357" [label = <(FIELD_IDENTIFIER,GetShort,GetShort)<SUB>1538</SUB>> ]
-"7292" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1538</SUB>> ]
-"7296" [label = <(GET_PRIMITIVE_FIELD(Short, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1538</SUB>> ]
-"7303" [label = <(RETURN,GET_PRIMITIVE_FIELD(Short, obj),GET_PRIMITIVE_FIELD(Short, obj))<SUB>1538</SUB>> ]
-"7313" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1538</SUB>> ]
-"7315" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1538</SUB>> ]
-"7330" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1538</SUB>> ]
-"7342" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1538</SUB>> ]
-"7348" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1538</SUB>> ]
-"7351" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1538</SUB>> ]
-"7297" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1538</SUB>> ]
-"7298" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1538</SUB>> ]
-"7300" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1538</SUB>> ]
-"7282" [label = <(METHOD,GetShortField)<SUB>1537</SUB>> ]
-"7359" [label = <(METHOD_RETURN,jshort)<SUB>1537</SUB>> ]
-  "7287" -> "7292" 
-  "7287" -> "7307" 
-  "7321" -> "7330" 
-  "7324" -> "7333" 
-  "7333" -> "7342" 
-  "7336" -> "7357" 
-  "7353" -> "7359" 
-  "7306" -> "7313" 
-  "7306" -> "7321" 
-  "7326" -> "7324" 
-  "7337" -> "7348" 
-  "7344" -> "7336" 
-  "7354" -> "7353" 
-  "7307" -> "7306" 
-  "7311" -> "7318" 
-  "7318" -> "7359" 
-  "7327" -> "7326" 
-  "7338" -> "7337" 
-  "7345" -> "7344" 
-  "7355" -> "7354" 
-  "7291" -> "7298" 
-  "7291" -> "7307" 
-  "7312" -> "7311" 
-  "7328" -> "7327" 
-  "7340" -> "7338" 
-  "7346" -> "7351" 
-  "7349" -> "7345" 
-  "7357" -> "7355" 
-  "7292" -> "7291" 
-  "7296" -> "7303" 
-  "7303" -> "7359" 
-  "7313" -> "7315" 
-  "7315" -> "7312" 
-  "7330" -> "7328" 
-  "7342" -> "7340" 
-  "7348" -> "7346" 
-  "7351" -> "7349" 
-  "7297" -> "7296" 
-  "7298" -> "7300" 
-  "7300" -> "7297" 
-  "7282" -> "7287" 
+digraph "GetDoubleField" {  
+"7410" [label = <(GET_PRIMITIVE_FIELD,GET_PRIMITIVE_FIELD(Double, obj))<SUB>1476</SUB>> ]
+"7444" [label = <(soa,ScopedObjectAccess)<SUB>1476</SUB>> ]
+"7447" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1476</SUB>> ]
+"7456" [label = <(NotifyGetField,NotifyGetField(f, obj))<SUB>1476</SUB>> ]
+"7459" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1476</SUB>> ]
+"7476" [label = <(RETURN,GET_PRIMITIVE_FIELD(Double, obj);,GET_PRIMITIVE_FIELD(Double, obj);)<SUB>1476</SUB>> ]
+"7429" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1476</SUB>> ]
+"7449" [label = <(&lt;operator&gt;.greaterThan,jni::DecodeArtField &lt; kEnableIndexIds &gt; (fid))<SUB>1476</SUB>> ]
+"7460" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1476</SUB>> ]
+"7467" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1476</SUB>> ]
+"7477" [label = <(GET_PRIMITIVE_FIELD(Double, obj),f-&gt;GetDouble(o))<SUB>1476</SUB>> ]
+"7430" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1476</SUB>> ]
+"7434" [label = <(GET_PRIMITIVE_FIELD(Double, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1476</SUB>> ]
+"7441" [label = <(RETURN,GET_PRIMITIVE_FIELD(Double, obj),GET_PRIMITIVE_FIELD(Double, obj))<SUB>1476</SUB>> ]
+"7450" [label = <(&lt;operator&gt;.lessThan,jni::DecodeArtField &lt; kEnableIndexIds)<SUB>1476</SUB>> ]
+"7461" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1476</SUB>> ]
+"7468" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1476</SUB>> ]
+"7478" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDouble)<SUB>1476</SUB>> ]
+"7414" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1476</SUB>> ]
+"7435" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1476</SUB>> ]
+"7451" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Double, obj))<SUB>1476</SUB>> ]
+"7463" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Double, obj))<SUB>1476</SUB>> ]
+"7469" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1476</SUB>> ]
+"7472" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Double, obj))<SUB>1476</SUB>> ]
+"7480" [label = <(FIELD_IDENTIFIER,GetDouble,GetDouble)<SUB>1476</SUB>> ]
+"7415" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1476</SUB>> ]
+"7419" [label = <(GET_PRIMITIVE_FIELD(Double, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1476</SUB>> ]
+"7426" [label = <(RETURN,GET_PRIMITIVE_FIELD(Double, obj),GET_PRIMITIVE_FIELD(Double, obj))<SUB>1476</SUB>> ]
+"7436" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1476</SUB>> ]
+"7438" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1476</SUB>> ]
+"7453" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1476</SUB>> ]
+"7465" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1476</SUB>> ]
+"7471" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1476</SUB>> ]
+"7474" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1476</SUB>> ]
+"7420" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1476</SUB>> ]
+"7421" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1476</SUB>> ]
+"7423" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1476</SUB>> ]
+"7405" [label = <(METHOD,GetDoubleField)<SUB>1475</SUB>> ]
+"7482" [label = <(METHOD_RETURN,jdouble)<SUB>1475</SUB>> ]
+  "7410" -> "7415" 
+  "7410" -> "7430" 
+  "7444" -> "7453" 
+  "7447" -> "7456" 
+  "7456" -> "7465" 
+  "7459" -> "7480" 
+  "7476" -> "7482" 
+  "7429" -> "7436" 
+  "7429" -> "7444" 
+  "7449" -> "7447" 
+  "7460" -> "7471" 
+  "7467" -> "7459" 
+  "7477" -> "7476" 
+  "7430" -> "7429" 
+  "7434" -> "7441" 
+  "7441" -> "7482" 
+  "7450" -> "7449" 
+  "7461" -> "7460" 
+  "7468" -> "7467" 
+  "7478" -> "7477" 
+  "7414" -> "7421" 
+  "7414" -> "7430" 
+  "7435" -> "7434" 
+  "7451" -> "7450" 
+  "7463" -> "7461" 
+  "7469" -> "7474" 
+  "7472" -> "7468" 
+  "7480" -> "7478" 
+  "7415" -> "7414" 
+  "7419" -> "7426" 
+  "7426" -> "7482" 
+  "7436" -> "7438" 
+  "7438" -> "7435" 
+  "7453" -> "7451" 
+  "7465" -> "7463" 
+  "7471" -> "7469" 
+  "7474" -> "7472" 
+  "7420" -> "7419" 
+  "7421" -> "7423" 
+  "7423" -> "7420" 
+  "7405" -> "7410" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/131-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/131-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/131-cfg.dot	2023-06-07 19:35:01.477387164 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/131-cfg.dot	2023-06-07 19:35:08.017386518 +0330
@@ -1,82 +1,51 @@
-digraph "GetIntField" {  
-"7366" [label = <(GET_PRIMITIVE_FIELD,GET_PRIMITIVE_FIELD(Int, obj))<SUB>1542</SUB>> ]
-"7400" [label = <(soa,ScopedObjectAccess)<SUB>1542</SUB>> ]
-"7403" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1542</SUB>> ]
-"7412" [label = <(NotifyGetField,NotifyGetField(f, obj))<SUB>1542</SUB>> ]
-"7415" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1542</SUB>> ]
-"7432" [label = <(RETURN,GET_PRIMITIVE_FIELD(Int, obj);,GET_PRIMITIVE_FIELD(Int, obj);)<SUB>1542</SUB>> ]
-"7385" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1542</SUB>> ]
-"7405" [label = <(&lt;operator&gt;.greaterThan,jni::DecodeArtField &lt; kEnableIndexIds &gt; (fid))<SUB>1542</SUB>> ]
-"7416" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1542</SUB>> ]
-"7423" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1542</SUB>> ]
-"7433" [label = <(GET_PRIMITIVE_FIELD(Int, obj),f-&gt;GetInt(o))<SUB>1542</SUB>> ]
-"7386" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1542</SUB>> ]
-"7390" [label = <(GET_PRIMITIVE_FIELD(Int, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1542</SUB>> ]
-"7397" [label = <(RETURN,GET_PRIMITIVE_FIELD(Int, obj),GET_PRIMITIVE_FIELD(Int, obj))<SUB>1542</SUB>> ]
-"7406" [label = <(&lt;operator&gt;.lessThan,jni::DecodeArtField &lt; kEnableIndexIds)<SUB>1542</SUB>> ]
-"7417" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1542</SUB>> ]
-"7424" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1542</SUB>> ]
-"7434" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetInt)<SUB>1542</SUB>> ]
-"7370" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1542</SUB>> ]
-"7391" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1542</SUB>> ]
-"7407" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Int, obj))<SUB>1542</SUB>> ]
-"7419" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Int, obj))<SUB>1542</SUB>> ]
-"7425" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1542</SUB>> ]
-"7428" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Int, obj))<SUB>1542</SUB>> ]
-"7436" [label = <(FIELD_IDENTIFIER,GetInt,GetInt)<SUB>1542</SUB>> ]
-"7371" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1542</SUB>> ]
-"7375" [label = <(GET_PRIMITIVE_FIELD(Int, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1542</SUB>> ]
-"7382" [label = <(RETURN,GET_PRIMITIVE_FIELD(Int, obj),GET_PRIMITIVE_FIELD(Int, obj))<SUB>1542</SUB>> ]
-"7392" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1542</SUB>> ]
-"7394" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1542</SUB>> ]
-"7409" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1542</SUB>> ]
-"7421" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1542</SUB>> ]
-"7427" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1542</SUB>> ]
-"7430" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1542</SUB>> ]
-"7376" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1542</SUB>> ]
-"7377" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1542</SUB>> ]
-"7379" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1542</SUB>> ]
-"7361" [label = <(METHOD,GetIntField)<SUB>1541</SUB>> ]
-"7438" [label = <(METHOD_RETURN,jint)<SUB>1541</SUB>> ]
-  "7366" -> "7371" 
-  "7366" -> "7386" 
-  "7400" -> "7409" 
-  "7403" -> "7412" 
-  "7412" -> "7421" 
-  "7415" -> "7436" 
-  "7432" -> "7438" 
-  "7385" -> "7392" 
-  "7385" -> "7400" 
-  "7405" -> "7403" 
-  "7416" -> "7427" 
-  "7423" -> "7415" 
-  "7433" -> "7432" 
-  "7386" -> "7385" 
-  "7390" -> "7397" 
-  "7397" -> "7438" 
-  "7406" -> "7405" 
-  "7417" -> "7416" 
-  "7424" -> "7423" 
-  "7434" -> "7433" 
-  "7370" -> "7377" 
-  "7370" -> "7386" 
-  "7391" -> "7390" 
-  "7407" -> "7406" 
-  "7419" -> "7417" 
-  "7425" -> "7430" 
-  "7428" -> "7424" 
-  "7436" -> "7434" 
-  "7371" -> "7370" 
-  "7375" -> "7382" 
-  "7382" -> "7438" 
-  "7392" -> "7394" 
-  "7394" -> "7391" 
-  "7409" -> "7407" 
-  "7421" -> "7419" 
-  "7427" -> "7425" 
-  "7430" -> "7428" 
-  "7376" -> "7375" 
-  "7377" -> "7379" 
-  "7379" -> "7376" 
-  "7361" -> "7366" 
+digraph "GetStaticBooleanField" {  
+"7489" [label = <(GET_STATIC_PRIMITIVE_FIELD,GET_STATIC_PRIMITIVE_FIELD(Boolean))<SUB>1480</SUB>> ]
+"7507" [label = <(soa,ScopedObjectAccess)<SUB>1480</SUB>> ]
+"7510" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1480</SUB>> ]
+"7519" [label = <(NotifyGetField,NotifyGetField(f, nullptr))<SUB>1480</SUB>> ]
+"7522" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Boolean);,GET_STATIC_PRIMITIVE_FIELD(Boolean);)<SUB>1480</SUB>> ]
+"7512" [label = <(&lt;operator&gt;.greaterThan,jni::DecodeArtField &lt; kEnableIndexIds &gt; (fid))<SUB>1480</SUB>> ]
+"7523" [label = <(GET_STATIC_PRIMITIVE_FIELD(Boolean),f-&gt;GetBoolean(f-&gt;GetDeclaringClass()))<SUB>1480</SUB>> ]
+"7513" [label = <(&lt;operator&gt;.lessThan,jni::DecodeArtField &lt; kEnableIndexIds)<SUB>1480</SUB>> ]
+"7524" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetBoolean)<SUB>1480</SUB>> ]
+"7527" [label = <(GET_STATIC_PRIMITIVE_FIELD(Boolean),f-&gt;GetDeclaringClass())<SUB>1480</SUB>> ]
+"7492" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1480</SUB>> ]
+"7514" [label = <(&lt;operator&gt;.fieldAccess,GET_STATIC_PRIMITIVE_FIELD(Boolean))<SUB>1480</SUB>> ]
+"7526" [label = <(FIELD_IDENTIFIER,GetBoolean,GetBoolean)<SUB>1480</SUB>> ]
+"7528" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1480</SUB>> ]
+"7493" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1480</SUB>> ]
+"7497" [label = <(GET_STATIC_PRIMITIVE_FIELD(Boolean),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1480</SUB>> ]
+"7504" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Boolean),GET_STATIC_PRIMITIVE_FIELD(Boolean))<SUB>1480</SUB>> ]
+"7516" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1480</SUB>> ]
+"7530" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1480</SUB>> ]
+"7498" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1480</SUB>> ]
+"7499" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1480</SUB>> ]
+"7501" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1480</SUB>> ]
+"7484" [label = <(METHOD,GetStaticBooleanField)<SUB>1479</SUB>> ]
+"7531" [label = <(METHOD_RETURN,jboolean)<SUB>1479</SUB>> ]
+  "7489" -> "7493" 
+  "7489" -> "7507" 
+  "7507" -> "7516" 
+  "7510" -> "7519" 
+  "7519" -> "7526" 
+  "7522" -> "7531" 
+  "7512" -> "7510" 
+  "7523" -> "7522" 
+  "7513" -> "7512" 
+  "7524" -> "7530" 
+  "7527" -> "7523" 
+  "7492" -> "7499" 
+  "7492" -> "7507" 
+  "7514" -> "7513" 
+  "7526" -> "7524" 
+  "7528" -> "7527" 
+  "7493" -> "7492" 
+  "7497" -> "7504" 
+  "7504" -> "7531" 
+  "7516" -> "7514" 
+  "7530" -> "7528" 
+  "7498" -> "7497" 
+  "7499" -> "7501" 
+  "7501" -> "7498" 
+  "7484" -> "7489" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/132-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/132-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/132-cfg.dot	2023-06-07 19:35:01.477387164 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/132-cfg.dot	2023-06-07 19:35:08.017386518 +0330
@@ -1,82 +1,51 @@
-digraph "GetLongField" {  
-"7445" [label = <(GET_PRIMITIVE_FIELD,GET_PRIMITIVE_FIELD(Long, obj))<SUB>1546</SUB>> ]
-"7479" [label = <(soa,ScopedObjectAccess)<SUB>1546</SUB>> ]
-"7482" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1546</SUB>> ]
-"7491" [label = <(NotifyGetField,NotifyGetField(f, obj))<SUB>1546</SUB>> ]
-"7494" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1546</SUB>> ]
-"7511" [label = <(RETURN,GET_PRIMITIVE_FIELD(Long, obj);,GET_PRIMITIVE_FIELD(Long, obj);)<SUB>1546</SUB>> ]
-"7464" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1546</SUB>> ]
-"7484" [label = <(&lt;operator&gt;.greaterThan,jni::DecodeArtField &lt; kEnableIndexIds &gt; (fid))<SUB>1546</SUB>> ]
-"7495" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1546</SUB>> ]
-"7502" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1546</SUB>> ]
-"7512" [label = <(GET_PRIMITIVE_FIELD(Long, obj),f-&gt;GetLong(o))<SUB>1546</SUB>> ]
-"7465" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1546</SUB>> ]
-"7469" [label = <(GET_PRIMITIVE_FIELD(Long, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1546</SUB>> ]
-"7476" [label = <(RETURN,GET_PRIMITIVE_FIELD(Long, obj),GET_PRIMITIVE_FIELD(Long, obj))<SUB>1546</SUB>> ]
-"7485" [label = <(&lt;operator&gt;.lessThan,jni::DecodeArtField &lt; kEnableIndexIds)<SUB>1546</SUB>> ]
-"7496" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1546</SUB>> ]
-"7503" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1546</SUB>> ]
-"7513" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetLong)<SUB>1546</SUB>> ]
-"7449" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1546</SUB>> ]
-"7470" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1546</SUB>> ]
-"7486" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Long, obj))<SUB>1546</SUB>> ]
-"7498" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Long, obj))<SUB>1546</SUB>> ]
-"7504" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1546</SUB>> ]
-"7507" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Long, obj))<SUB>1546</SUB>> ]
-"7515" [label = <(FIELD_IDENTIFIER,GetLong,GetLong)<SUB>1546</SUB>> ]
-"7450" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1546</SUB>> ]
-"7454" [label = <(GET_PRIMITIVE_FIELD(Long, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1546</SUB>> ]
-"7461" [label = <(RETURN,GET_PRIMITIVE_FIELD(Long, obj),GET_PRIMITIVE_FIELD(Long, obj))<SUB>1546</SUB>> ]
-"7471" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1546</SUB>> ]
-"7473" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1546</SUB>> ]
-"7488" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1546</SUB>> ]
-"7500" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1546</SUB>> ]
-"7506" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1546</SUB>> ]
-"7509" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1546</SUB>> ]
-"7455" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1546</SUB>> ]
-"7456" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1546</SUB>> ]
-"7458" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1546</SUB>> ]
-"7440" [label = <(METHOD,GetLongField)<SUB>1545</SUB>> ]
-"7517" [label = <(METHOD_RETURN,jlong)<SUB>1545</SUB>> ]
-  "7445" -> "7450" 
-  "7445" -> "7465" 
-  "7479" -> "7488" 
-  "7482" -> "7491" 
-  "7491" -> "7500" 
-  "7494" -> "7515" 
-  "7511" -> "7517" 
-  "7464" -> "7471" 
-  "7464" -> "7479" 
-  "7484" -> "7482" 
-  "7495" -> "7506" 
-  "7502" -> "7494" 
-  "7512" -> "7511" 
-  "7465" -> "7464" 
-  "7469" -> "7476" 
-  "7476" -> "7517" 
-  "7485" -> "7484" 
-  "7496" -> "7495" 
-  "7503" -> "7502" 
-  "7513" -> "7512" 
-  "7449" -> "7456" 
-  "7449" -> "7465" 
-  "7470" -> "7469" 
-  "7486" -> "7485" 
-  "7498" -> "7496" 
-  "7504" -> "7509" 
-  "7507" -> "7503" 
-  "7515" -> "7513" 
-  "7450" -> "7449" 
-  "7454" -> "7461" 
-  "7461" -> "7517" 
-  "7471" -> "7473" 
-  "7473" -> "7470" 
-  "7488" -> "7486" 
-  "7500" -> "7498" 
-  "7506" -> "7504" 
-  "7509" -> "7507" 
-  "7455" -> "7454" 
-  "7456" -> "7458" 
-  "7458" -> "7455" 
-  "7440" -> "7445" 
+digraph "GetStaticByteField" {  
+"7538" [label = <(GET_STATIC_PRIMITIVE_FIELD,GET_STATIC_PRIMITIVE_FIELD(Byte))<SUB>1484</SUB>> ]
+"7556" [label = <(soa,ScopedObjectAccess)<SUB>1484</SUB>> ]
+"7559" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1484</SUB>> ]
+"7568" [label = <(NotifyGetField,NotifyGetField(f, nullptr))<SUB>1484</SUB>> ]
+"7571" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Byte);,GET_STATIC_PRIMITIVE_FIELD(Byte);)<SUB>1484</SUB>> ]
+"7561" [label = <(&lt;operator&gt;.greaterThan,jni::DecodeArtField &lt; kEnableIndexIds &gt; (fid))<SUB>1484</SUB>> ]
+"7572" [label = <(GET_STATIC_PRIMITIVE_FIELD(Byte),f-&gt;GetByte(f-&gt;GetDeclaringClass()))<SUB>1484</SUB>> ]
+"7562" [label = <(&lt;operator&gt;.lessThan,jni::DecodeArtField &lt; kEnableIndexIds)<SUB>1484</SUB>> ]
+"7573" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetByte)<SUB>1484</SUB>> ]
+"7576" [label = <(GET_STATIC_PRIMITIVE_FIELD(Byte),f-&gt;GetDeclaringClass())<SUB>1484</SUB>> ]
+"7541" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1484</SUB>> ]
+"7563" [label = <(&lt;operator&gt;.fieldAccess,GET_STATIC_PRIMITIVE_FIELD(Byte))<SUB>1484</SUB>> ]
+"7575" [label = <(FIELD_IDENTIFIER,GetByte,GetByte)<SUB>1484</SUB>> ]
+"7577" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1484</SUB>> ]
+"7542" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1484</SUB>> ]
+"7546" [label = <(GET_STATIC_PRIMITIVE_FIELD(Byte),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1484</SUB>> ]
+"7553" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Byte),GET_STATIC_PRIMITIVE_FIELD(Byte))<SUB>1484</SUB>> ]
+"7565" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1484</SUB>> ]
+"7579" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1484</SUB>> ]
+"7547" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1484</SUB>> ]
+"7548" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1484</SUB>> ]
+"7550" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1484</SUB>> ]
+"7533" [label = <(METHOD,GetStaticByteField)<SUB>1483</SUB>> ]
+"7580" [label = <(METHOD_RETURN,jbyte)<SUB>1483</SUB>> ]
+  "7538" -> "7542" 
+  "7538" -> "7556" 
+  "7556" -> "7565" 
+  "7559" -> "7568" 
+  "7568" -> "7575" 
+  "7571" -> "7580" 
+  "7561" -> "7559" 
+  "7572" -> "7571" 
+  "7562" -> "7561" 
+  "7573" -> "7579" 
+  "7576" -> "7572" 
+  "7541" -> "7548" 
+  "7541" -> "7556" 
+  "7563" -> "7562" 
+  "7575" -> "7573" 
+  "7577" -> "7576" 
+  "7542" -> "7541" 
+  "7546" -> "7553" 
+  "7553" -> "7580" 
+  "7565" -> "7563" 
+  "7579" -> "7577" 
+  "7547" -> "7546" 
+  "7548" -> "7550" 
+  "7550" -> "7547" 
+  "7533" -> "7538" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/133-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/133-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/133-cfg.dot	2023-06-07 19:35:01.477387164 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/133-cfg.dot	2023-06-07 19:35:08.017386518 +0330
@@ -1,82 +1,51 @@
-digraph "GetFloatField" {  
-"7524" [label = <(GET_PRIMITIVE_FIELD,GET_PRIMITIVE_FIELD(Float, obj))<SUB>1550</SUB>> ]
-"7558" [label = <(soa,ScopedObjectAccess)<SUB>1550</SUB>> ]
-"7561" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1550</SUB>> ]
-"7570" [label = <(NotifyGetField,NotifyGetField(f, obj))<SUB>1550</SUB>> ]
-"7573" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1550</SUB>> ]
-"7590" [label = <(RETURN,GET_PRIMITIVE_FIELD(Float, obj);,GET_PRIMITIVE_FIELD(Float, obj);)<SUB>1550</SUB>> ]
-"7543" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1550</SUB>> ]
-"7563" [label = <(&lt;operator&gt;.greaterThan,jni::DecodeArtField &lt; kEnableIndexIds &gt; (fid))<SUB>1550</SUB>> ]
-"7574" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1550</SUB>> ]
-"7581" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1550</SUB>> ]
-"7591" [label = <(GET_PRIMITIVE_FIELD(Float, obj),f-&gt;GetFloat(o))<SUB>1550</SUB>> ]
-"7544" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1550</SUB>> ]
-"7548" [label = <(GET_PRIMITIVE_FIELD(Float, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1550</SUB>> ]
-"7555" [label = <(RETURN,GET_PRIMITIVE_FIELD(Float, obj),GET_PRIMITIVE_FIELD(Float, obj))<SUB>1550</SUB>> ]
-"7564" [label = <(&lt;operator&gt;.lessThan,jni::DecodeArtField &lt; kEnableIndexIds)<SUB>1550</SUB>> ]
-"7575" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1550</SUB>> ]
-"7582" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1550</SUB>> ]
-"7592" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetFloat)<SUB>1550</SUB>> ]
-"7528" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1550</SUB>> ]
-"7549" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1550</SUB>> ]
-"7565" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Float, obj))<SUB>1550</SUB>> ]
-"7577" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Float, obj))<SUB>1550</SUB>> ]
-"7583" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1550</SUB>> ]
-"7586" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Float, obj))<SUB>1550</SUB>> ]
-"7594" [label = <(FIELD_IDENTIFIER,GetFloat,GetFloat)<SUB>1550</SUB>> ]
-"7529" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1550</SUB>> ]
-"7533" [label = <(GET_PRIMITIVE_FIELD(Float, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1550</SUB>> ]
-"7540" [label = <(RETURN,GET_PRIMITIVE_FIELD(Float, obj),GET_PRIMITIVE_FIELD(Float, obj))<SUB>1550</SUB>> ]
-"7550" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1550</SUB>> ]
-"7552" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1550</SUB>> ]
-"7567" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1550</SUB>> ]
-"7579" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1550</SUB>> ]
-"7585" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1550</SUB>> ]
-"7588" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1550</SUB>> ]
-"7534" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1550</SUB>> ]
-"7535" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1550</SUB>> ]
-"7537" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1550</SUB>> ]
-"7519" [label = <(METHOD,GetFloatField)<SUB>1549</SUB>> ]
-"7596" [label = <(METHOD_RETURN,jfloat)<SUB>1549</SUB>> ]
-  "7524" -> "7529" 
-  "7524" -> "7544" 
-  "7558" -> "7567" 
-  "7561" -> "7570" 
-  "7570" -> "7579" 
-  "7573" -> "7594" 
-  "7590" -> "7596" 
-  "7543" -> "7550" 
-  "7543" -> "7558" 
-  "7563" -> "7561" 
-  "7574" -> "7585" 
-  "7581" -> "7573" 
+digraph "GetStaticCharField" {  
+"7587" [label = <(GET_STATIC_PRIMITIVE_FIELD,GET_STATIC_PRIMITIVE_FIELD(Char))<SUB>1488</SUB>> ]
+"7605" [label = <(soa,ScopedObjectAccess)<SUB>1488</SUB>> ]
+"7608" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1488</SUB>> ]
+"7617" [label = <(NotifyGetField,NotifyGetField(f, nullptr))<SUB>1488</SUB>> ]
+"7620" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Char);,GET_STATIC_PRIMITIVE_FIELD(Char);)<SUB>1488</SUB>> ]
+"7610" [label = <(&lt;operator&gt;.greaterThan,jni::DecodeArtField &lt; kEnableIndexIds &gt; (fid))<SUB>1488</SUB>> ]
+"7621" [label = <(GET_STATIC_PRIMITIVE_FIELD(Char),f-&gt;GetChar(f-&gt;GetDeclaringClass()))<SUB>1488</SUB>> ]
+"7611" [label = <(&lt;operator&gt;.lessThan,jni::DecodeArtField &lt; kEnableIndexIds)<SUB>1488</SUB>> ]
+"7622" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetChar)<SUB>1488</SUB>> ]
+"7625" [label = <(GET_STATIC_PRIMITIVE_FIELD(Char),f-&gt;GetDeclaringClass())<SUB>1488</SUB>> ]
+"7590" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1488</SUB>> ]
+"7612" [label = <(&lt;operator&gt;.fieldAccess,GET_STATIC_PRIMITIVE_FIELD(Char))<SUB>1488</SUB>> ]
+"7624" [label = <(FIELD_IDENTIFIER,GetChar,GetChar)<SUB>1488</SUB>> ]
+"7626" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1488</SUB>> ]
+"7591" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1488</SUB>> ]
+"7595" [label = <(GET_STATIC_PRIMITIVE_FIELD(Char),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1488</SUB>> ]
+"7602" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Char),GET_STATIC_PRIMITIVE_FIELD(Char))<SUB>1488</SUB>> ]
+"7614" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1488</SUB>> ]
+"7628" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1488</SUB>> ]
+"7596" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1488</SUB>> ]
+"7597" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1488</SUB>> ]
+"7599" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1488</SUB>> ]
+"7582" [label = <(METHOD,GetStaticCharField)<SUB>1487</SUB>> ]
+"7629" [label = <(METHOD_RETURN,jchar)<SUB>1487</SUB>> ]
+  "7587" -> "7591" 
+  "7587" -> "7605" 
+  "7605" -> "7614" 
+  "7608" -> "7617" 
+  "7617" -> "7624" 
+  "7620" -> "7629" 
+  "7610" -> "7608" 
+  "7621" -> "7620" 
+  "7611" -> "7610" 
+  "7622" -> "7628" 
+  "7625" -> "7621" 
+  "7590" -> "7597" 
+  "7590" -> "7605" 
+  "7612" -> "7611" 
+  "7624" -> "7622" 
+  "7626" -> "7625" 
   "7591" -> "7590" 
-  "7544" -> "7543" 
-  "7548" -> "7555" 
-  "7555" -> "7596" 
-  "7564" -> "7563" 
-  "7575" -> "7574" 
-  "7582" -> "7581" 
-  "7592" -> "7591" 
-  "7528" -> "7535" 
-  "7528" -> "7544" 
-  "7549" -> "7548" 
-  "7565" -> "7564" 
-  "7577" -> "7575" 
-  "7583" -> "7588" 
-  "7586" -> "7582" 
-  "7594" -> "7592" 
-  "7529" -> "7528" 
-  "7533" -> "7540" 
-  "7540" -> "7596" 
-  "7550" -> "7552" 
-  "7552" -> "7549" 
-  "7567" -> "7565" 
-  "7579" -> "7577" 
-  "7585" -> "7583" 
-  "7588" -> "7586" 
-  "7534" -> "7533" 
-  "7535" -> "7537" 
-  "7537" -> "7534" 
-  "7519" -> "7524" 
+  "7595" -> "7602" 
+  "7602" -> "7629" 
+  "7614" -> "7612" 
+  "7628" -> "7626" 
+  "7596" -> "7595" 
+  "7597" -> "7599" 
+  "7599" -> "7596" 
+  "7582" -> "7587" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/134-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/134-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/134-cfg.dot	2023-06-07 19:35:01.477387164 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/134-cfg.dot	2023-06-07 19:35:08.017386518 +0330
@@ -1,82 +1,51 @@
-digraph "GetDoubleField" {  
-"7603" [label = <(GET_PRIMITIVE_FIELD,GET_PRIMITIVE_FIELD(Double, obj))<SUB>1554</SUB>> ]
-"7637" [label = <(soa,ScopedObjectAccess)<SUB>1554</SUB>> ]
-"7640" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1554</SUB>> ]
-"7649" [label = <(NotifyGetField,NotifyGetField(f, obj))<SUB>1554</SUB>> ]
-"7652" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1554</SUB>> ]
-"7669" [label = <(RETURN,GET_PRIMITIVE_FIELD(Double, obj);,GET_PRIMITIVE_FIELD(Double, obj);)<SUB>1554</SUB>> ]
-"7622" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1554</SUB>> ]
-"7642" [label = <(&lt;operator&gt;.greaterThan,jni::DecodeArtField &lt; kEnableIndexIds &gt; (fid))<SUB>1554</SUB>> ]
-"7653" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1554</SUB>> ]
-"7660" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1554</SUB>> ]
-"7670" [label = <(GET_PRIMITIVE_FIELD(Double, obj),f-&gt;GetDouble(o))<SUB>1554</SUB>> ]
-"7623" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1554</SUB>> ]
-"7627" [label = <(GET_PRIMITIVE_FIELD(Double, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1554</SUB>> ]
-"7634" [label = <(RETURN,GET_PRIMITIVE_FIELD(Double, obj),GET_PRIMITIVE_FIELD(Double, obj))<SUB>1554</SUB>> ]
-"7643" [label = <(&lt;operator&gt;.lessThan,jni::DecodeArtField &lt; kEnableIndexIds)<SUB>1554</SUB>> ]
-"7654" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1554</SUB>> ]
-"7661" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1554</SUB>> ]
-"7671" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDouble)<SUB>1554</SUB>> ]
-"7607" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1554</SUB>> ]
-"7628" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1554</SUB>> ]
-"7644" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Double, obj))<SUB>1554</SUB>> ]
-"7656" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Double, obj))<SUB>1554</SUB>> ]
-"7662" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1554</SUB>> ]
-"7665" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Double, obj))<SUB>1554</SUB>> ]
-"7673" [label = <(FIELD_IDENTIFIER,GetDouble,GetDouble)<SUB>1554</SUB>> ]
-"7608" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1554</SUB>> ]
-"7612" [label = <(GET_PRIMITIVE_FIELD(Double, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1554</SUB>> ]
-"7619" [label = <(RETURN,GET_PRIMITIVE_FIELD(Double, obj),GET_PRIMITIVE_FIELD(Double, obj))<SUB>1554</SUB>> ]
-"7629" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1554</SUB>> ]
-"7631" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1554</SUB>> ]
-"7646" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1554</SUB>> ]
-"7658" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1554</SUB>> ]
-"7664" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1554</SUB>> ]
-"7667" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1554</SUB>> ]
-"7613" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1554</SUB>> ]
-"7614" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1554</SUB>> ]
-"7616" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1554</SUB>> ]
-"7598" [label = <(METHOD,GetDoubleField)<SUB>1553</SUB>> ]
-"7675" [label = <(METHOD_RETURN,jdouble)<SUB>1553</SUB>> ]
-  "7603" -> "7608" 
-  "7603" -> "7623" 
-  "7637" -> "7646" 
-  "7640" -> "7649" 
-  "7649" -> "7658" 
-  "7652" -> "7673" 
-  "7669" -> "7675" 
-  "7622" -> "7629" 
-  "7622" -> "7637" 
-  "7642" -> "7640" 
-  "7653" -> "7664" 
-  "7660" -> "7652" 
+digraph "GetStaticShortField" {  
+"7636" [label = <(GET_STATIC_PRIMITIVE_FIELD,GET_STATIC_PRIMITIVE_FIELD(Short))<SUB>1492</SUB>> ]
+"7654" [label = <(soa,ScopedObjectAccess)<SUB>1492</SUB>> ]
+"7657" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1492</SUB>> ]
+"7666" [label = <(NotifyGetField,NotifyGetField(f, nullptr))<SUB>1492</SUB>> ]
+"7669" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Short);,GET_STATIC_PRIMITIVE_FIELD(Short);)<SUB>1492</SUB>> ]
+"7659" [label = <(&lt;operator&gt;.greaterThan,jni::DecodeArtField &lt; kEnableIndexIds &gt; (fid))<SUB>1492</SUB>> ]
+"7670" [label = <(GET_STATIC_PRIMITIVE_FIELD(Short),f-&gt;GetShort(f-&gt;GetDeclaringClass()))<SUB>1492</SUB>> ]
+"7660" [label = <(&lt;operator&gt;.lessThan,jni::DecodeArtField &lt; kEnableIndexIds)<SUB>1492</SUB>> ]
+"7671" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetShort)<SUB>1492</SUB>> ]
+"7674" [label = <(GET_STATIC_PRIMITIVE_FIELD(Short),f-&gt;GetDeclaringClass())<SUB>1492</SUB>> ]
+"7639" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1492</SUB>> ]
+"7661" [label = <(&lt;operator&gt;.fieldAccess,GET_STATIC_PRIMITIVE_FIELD(Short))<SUB>1492</SUB>> ]
+"7673" [label = <(FIELD_IDENTIFIER,GetShort,GetShort)<SUB>1492</SUB>> ]
+"7675" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1492</SUB>> ]
+"7640" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1492</SUB>> ]
+"7644" [label = <(GET_STATIC_PRIMITIVE_FIELD(Short),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1492</SUB>> ]
+"7651" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Short),GET_STATIC_PRIMITIVE_FIELD(Short))<SUB>1492</SUB>> ]
+"7663" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1492</SUB>> ]
+"7677" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1492</SUB>> ]
+"7645" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1492</SUB>> ]
+"7646" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1492</SUB>> ]
+"7648" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1492</SUB>> ]
+"7631" [label = <(METHOD,GetStaticShortField)<SUB>1491</SUB>> ]
+"7678" [label = <(METHOD_RETURN,jshort)<SUB>1491</SUB>> ]
+  "7636" -> "7640" 
+  "7636" -> "7654" 
+  "7654" -> "7663" 
+  "7657" -> "7666" 
+  "7666" -> "7673" 
+  "7669" -> "7678" 
+  "7659" -> "7657" 
   "7670" -> "7669" 
-  "7623" -> "7622" 
-  "7627" -> "7634" 
-  "7634" -> "7675" 
-  "7643" -> "7642" 
-  "7654" -> "7653" 
+  "7660" -> "7659" 
+  "7671" -> "7677" 
+  "7674" -> "7670" 
+  "7639" -> "7646" 
+  "7639" -> "7654" 
   "7661" -> "7660" 
-  "7671" -> "7670" 
-  "7607" -> "7614" 
-  "7607" -> "7623" 
-  "7628" -> "7627" 
-  "7644" -> "7643" 
-  "7656" -> "7654" 
-  "7662" -> "7667" 
-  "7665" -> "7661" 
   "7673" -> "7671" 
-  "7608" -> "7607" 
-  "7612" -> "7619" 
-  "7619" -> "7675" 
-  "7629" -> "7631" 
-  "7631" -> "7628" 
-  "7646" -> "7644" 
-  "7658" -> "7656" 
-  "7664" -> "7662" 
-  "7667" -> "7665" 
-  "7613" -> "7612" 
-  "7614" -> "7616" 
-  "7616" -> "7613" 
-  "7598" -> "7603" 
+  "7675" -> "7674" 
+  "7640" -> "7639" 
+  "7644" -> "7651" 
+  "7651" -> "7678" 
+  "7663" -> "7661" 
+  "7677" -> "7675" 
+  "7645" -> "7644" 
+  "7646" -> "7648" 
+  "7648" -> "7645" 
+  "7631" -> "7636" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/135-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/135-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/135-cfg.dot	2023-06-07 19:35:01.477387164 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/135-cfg.dot	2023-06-07 19:35:08.027386516 +0330
@@ -1,51 +1,51 @@
-digraph "GetStaticBooleanField" {  
-"7682" [label = <(GET_STATIC_PRIMITIVE_FIELD,GET_STATIC_PRIMITIVE_FIELD(Boolean))<SUB>1558</SUB>> ]
-"7700" [label = <(soa,ScopedObjectAccess)<SUB>1558</SUB>> ]
-"7703" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1558</SUB>> ]
-"7712" [label = <(NotifyGetField,NotifyGetField(f, nullptr))<SUB>1558</SUB>> ]
-"7715" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Boolean);,GET_STATIC_PRIMITIVE_FIELD(Boolean);)<SUB>1558</SUB>> ]
-"7705" [label = <(&lt;operator&gt;.greaterThan,jni::DecodeArtField &lt; kEnableIndexIds &gt; (fid))<SUB>1558</SUB>> ]
-"7716" [label = <(GET_STATIC_PRIMITIVE_FIELD(Boolean),f-&gt;GetBoolean(f-&gt;GetDeclaringClass()))<SUB>1558</SUB>> ]
-"7706" [label = <(&lt;operator&gt;.lessThan,jni::DecodeArtField &lt; kEnableIndexIds)<SUB>1558</SUB>> ]
-"7717" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetBoolean)<SUB>1558</SUB>> ]
-"7720" [label = <(GET_STATIC_PRIMITIVE_FIELD(Boolean),f-&gt;GetDeclaringClass())<SUB>1558</SUB>> ]
-"7685" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1558</SUB>> ]
-"7707" [label = <(&lt;operator&gt;.fieldAccess,GET_STATIC_PRIMITIVE_FIELD(Boolean))<SUB>1558</SUB>> ]
-"7719" [label = <(FIELD_IDENTIFIER,GetBoolean,GetBoolean)<SUB>1558</SUB>> ]
-"7721" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1558</SUB>> ]
-"7686" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1558</SUB>> ]
-"7690" [label = <(GET_STATIC_PRIMITIVE_FIELD(Boolean),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1558</SUB>> ]
-"7697" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Boolean),GET_STATIC_PRIMITIVE_FIELD(Boolean))<SUB>1558</SUB>> ]
-"7709" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1558</SUB>> ]
-"7723" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1558</SUB>> ]
-"7691" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1558</SUB>> ]
-"7692" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1558</SUB>> ]
-"7694" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1558</SUB>> ]
-"7677" [label = <(METHOD,GetStaticBooleanField)<SUB>1557</SUB>> ]
-"7724" [label = <(METHOD_RETURN,jboolean)<SUB>1557</SUB>> ]
-  "7682" -> "7686" 
-  "7682" -> "7700" 
-  "7700" -> "7709" 
+digraph "GetStaticIntField" {  
+"7685" [label = <(GET_STATIC_PRIMITIVE_FIELD,GET_STATIC_PRIMITIVE_FIELD(Int))<SUB>1496</SUB>> ]
+"7703" [label = <(soa,ScopedObjectAccess)<SUB>1496</SUB>> ]
+"7706" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1496</SUB>> ]
+"7715" [label = <(NotifyGetField,NotifyGetField(f, nullptr))<SUB>1496</SUB>> ]
+"7718" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Int);,GET_STATIC_PRIMITIVE_FIELD(Int);)<SUB>1496</SUB>> ]
+"7708" [label = <(&lt;operator&gt;.greaterThan,jni::DecodeArtField &lt; kEnableIndexIds &gt; (fid))<SUB>1496</SUB>> ]
+"7719" [label = <(GET_STATIC_PRIMITIVE_FIELD(Int),f-&gt;GetInt(f-&gt;GetDeclaringClass()))<SUB>1496</SUB>> ]
+"7709" [label = <(&lt;operator&gt;.lessThan,jni::DecodeArtField &lt; kEnableIndexIds)<SUB>1496</SUB>> ]
+"7720" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetInt)<SUB>1496</SUB>> ]
+"7723" [label = <(GET_STATIC_PRIMITIVE_FIELD(Int),f-&gt;GetDeclaringClass())<SUB>1496</SUB>> ]
+"7688" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1496</SUB>> ]
+"7710" [label = <(&lt;operator&gt;.fieldAccess,GET_STATIC_PRIMITIVE_FIELD(Int))<SUB>1496</SUB>> ]
+"7722" [label = <(FIELD_IDENTIFIER,GetInt,GetInt)<SUB>1496</SUB>> ]
+"7724" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1496</SUB>> ]
+"7689" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1496</SUB>> ]
+"7693" [label = <(GET_STATIC_PRIMITIVE_FIELD(Int),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1496</SUB>> ]
+"7700" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Int),GET_STATIC_PRIMITIVE_FIELD(Int))<SUB>1496</SUB>> ]
+"7712" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1496</SUB>> ]
+"7726" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1496</SUB>> ]
+"7694" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1496</SUB>> ]
+"7695" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1496</SUB>> ]
+"7697" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1496</SUB>> ]
+"7680" [label = <(METHOD,GetStaticIntField)<SUB>1495</SUB>> ]
+"7727" [label = <(METHOD_RETURN,jint)<SUB>1495</SUB>> ]
+  "7685" -> "7689" 
+  "7685" -> "7703" 
   "7703" -> "7712" 
-  "7712" -> "7719" 
-  "7715" -> "7724" 
-  "7705" -> "7703" 
-  "7716" -> "7715" 
-  "7706" -> "7705" 
-  "7717" -> "7723" 
-  "7720" -> "7716" 
-  "7685" -> "7692" 
-  "7685" -> "7700" 
-  "7707" -> "7706" 
-  "7719" -> "7717" 
-  "7721" -> "7720" 
-  "7686" -> "7685" 
-  "7690" -> "7697" 
-  "7697" -> "7724" 
-  "7709" -> "7707" 
-  "7723" -> "7721" 
-  "7691" -> "7690" 
-  "7692" -> "7694" 
-  "7694" -> "7691" 
-  "7677" -> "7682" 
+  "7706" -> "7715" 
+  "7715" -> "7722" 
+  "7718" -> "7727" 
+  "7708" -> "7706" 
+  "7719" -> "7718" 
+  "7709" -> "7708" 
+  "7720" -> "7726" 
+  "7723" -> "7719" 
+  "7688" -> "7695" 
+  "7688" -> "7703" 
+  "7710" -> "7709" 
+  "7722" -> "7720" 
+  "7724" -> "7723" 
+  "7689" -> "7688" 
+  "7693" -> "7700" 
+  "7700" -> "7727" 
+  "7712" -> "7710" 
+  "7726" -> "7724" 
+  "7694" -> "7693" 
+  "7695" -> "7697" 
+  "7697" -> "7694" 
+  "7680" -> "7685" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/136-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/136-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/136-cfg.dot	2023-06-07 19:35:01.477387164 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/136-cfg.dot	2023-06-07 19:35:08.027386516 +0330
@@ -1,51 +1,51 @@
-digraph "GetStaticByteField" {  
-"7731" [label = <(GET_STATIC_PRIMITIVE_FIELD,GET_STATIC_PRIMITIVE_FIELD(Byte))<SUB>1562</SUB>> ]
-"7749" [label = <(soa,ScopedObjectAccess)<SUB>1562</SUB>> ]
-"7752" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1562</SUB>> ]
-"7761" [label = <(NotifyGetField,NotifyGetField(f, nullptr))<SUB>1562</SUB>> ]
-"7764" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Byte);,GET_STATIC_PRIMITIVE_FIELD(Byte);)<SUB>1562</SUB>> ]
-"7754" [label = <(&lt;operator&gt;.greaterThan,jni::DecodeArtField &lt; kEnableIndexIds &gt; (fid))<SUB>1562</SUB>> ]
-"7765" [label = <(GET_STATIC_PRIMITIVE_FIELD(Byte),f-&gt;GetByte(f-&gt;GetDeclaringClass()))<SUB>1562</SUB>> ]
-"7755" [label = <(&lt;operator&gt;.lessThan,jni::DecodeArtField &lt; kEnableIndexIds)<SUB>1562</SUB>> ]
-"7766" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetByte)<SUB>1562</SUB>> ]
-"7769" [label = <(GET_STATIC_PRIMITIVE_FIELD(Byte),f-&gt;GetDeclaringClass())<SUB>1562</SUB>> ]
-"7734" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1562</SUB>> ]
-"7756" [label = <(&lt;operator&gt;.fieldAccess,GET_STATIC_PRIMITIVE_FIELD(Byte))<SUB>1562</SUB>> ]
-"7768" [label = <(FIELD_IDENTIFIER,GetByte,GetByte)<SUB>1562</SUB>> ]
-"7770" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1562</SUB>> ]
-"7735" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1562</SUB>> ]
-"7739" [label = <(GET_STATIC_PRIMITIVE_FIELD(Byte),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1562</SUB>> ]
-"7746" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Byte),GET_STATIC_PRIMITIVE_FIELD(Byte))<SUB>1562</SUB>> ]
-"7758" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1562</SUB>> ]
-"7772" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1562</SUB>> ]
-"7740" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1562</SUB>> ]
-"7741" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1562</SUB>> ]
-"7743" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1562</SUB>> ]
-"7726" [label = <(METHOD,GetStaticByteField)<SUB>1561</SUB>> ]
-"7773" [label = <(METHOD_RETURN,jbyte)<SUB>1561</SUB>> ]
-  "7731" -> "7735" 
-  "7731" -> "7749" 
-  "7749" -> "7758" 
+digraph "GetStaticLongField" {  
+"7734" [label = <(GET_STATIC_PRIMITIVE_FIELD,GET_STATIC_PRIMITIVE_FIELD(Long))<SUB>1500</SUB>> ]
+"7752" [label = <(soa,ScopedObjectAccess)<SUB>1500</SUB>> ]
+"7755" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1500</SUB>> ]
+"7764" [label = <(NotifyGetField,NotifyGetField(f, nullptr))<SUB>1500</SUB>> ]
+"7767" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Long);,GET_STATIC_PRIMITIVE_FIELD(Long);)<SUB>1500</SUB>> ]
+"7757" [label = <(&lt;operator&gt;.greaterThan,jni::DecodeArtField &lt; kEnableIndexIds &gt; (fid))<SUB>1500</SUB>> ]
+"7768" [label = <(GET_STATIC_PRIMITIVE_FIELD(Long),f-&gt;GetLong(f-&gt;GetDeclaringClass()))<SUB>1500</SUB>> ]
+"7758" [label = <(&lt;operator&gt;.lessThan,jni::DecodeArtField &lt; kEnableIndexIds)<SUB>1500</SUB>> ]
+"7769" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetLong)<SUB>1500</SUB>> ]
+"7772" [label = <(GET_STATIC_PRIMITIVE_FIELD(Long),f-&gt;GetDeclaringClass())<SUB>1500</SUB>> ]
+"7737" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1500</SUB>> ]
+"7759" [label = <(&lt;operator&gt;.fieldAccess,GET_STATIC_PRIMITIVE_FIELD(Long))<SUB>1500</SUB>> ]
+"7771" [label = <(FIELD_IDENTIFIER,GetLong,GetLong)<SUB>1500</SUB>> ]
+"7773" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1500</SUB>> ]
+"7738" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1500</SUB>> ]
+"7742" [label = <(GET_STATIC_PRIMITIVE_FIELD(Long),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1500</SUB>> ]
+"7749" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Long),GET_STATIC_PRIMITIVE_FIELD(Long))<SUB>1500</SUB>> ]
+"7761" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1500</SUB>> ]
+"7775" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1500</SUB>> ]
+"7743" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1500</SUB>> ]
+"7744" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1500</SUB>> ]
+"7746" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1500</SUB>> ]
+"7729" [label = <(METHOD,GetStaticLongField)<SUB>1499</SUB>> ]
+"7776" [label = <(METHOD_RETURN,jlong)<SUB>1499</SUB>> ]
+  "7734" -> "7738" 
+  "7734" -> "7752" 
   "7752" -> "7761" 
-  "7761" -> "7768" 
-  "7764" -> "7773" 
-  "7754" -> "7752" 
-  "7765" -> "7764" 
-  "7755" -> "7754" 
-  "7766" -> "7772" 
-  "7769" -> "7765" 
-  "7734" -> "7741" 
-  "7734" -> "7749" 
-  "7756" -> "7755" 
-  "7768" -> "7766" 
-  "7770" -> "7769" 
-  "7735" -> "7734" 
-  "7739" -> "7746" 
-  "7746" -> "7773" 
-  "7758" -> "7756" 
-  "7772" -> "7770" 
-  "7740" -> "7739" 
-  "7741" -> "7743" 
-  "7743" -> "7740" 
-  "7726" -> "7731" 
+  "7755" -> "7764" 
+  "7764" -> "7771" 
+  "7767" -> "7776" 
+  "7757" -> "7755" 
+  "7768" -> "7767" 
+  "7758" -> "7757" 
+  "7769" -> "7775" 
+  "7772" -> "7768" 
+  "7737" -> "7744" 
+  "7737" -> "7752" 
+  "7759" -> "7758" 
+  "7771" -> "7769" 
+  "7773" -> "7772" 
+  "7738" -> "7737" 
+  "7742" -> "7749" 
+  "7749" -> "7776" 
+  "7761" -> "7759" 
+  "7775" -> "7773" 
+  "7743" -> "7742" 
+  "7744" -> "7746" 
+  "7746" -> "7743" 
+  "7729" -> "7734" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/137-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/137-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/137-cfg.dot	2023-06-07 19:35:01.477387164 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/137-cfg.dot	2023-06-07 19:35:08.027386516 +0330
@@ -1,51 +1,51 @@
-digraph "GetStaticCharField" {  
-"7780" [label = <(GET_STATIC_PRIMITIVE_FIELD,GET_STATIC_PRIMITIVE_FIELD(Char))<SUB>1566</SUB>> ]
-"7798" [label = <(soa,ScopedObjectAccess)<SUB>1566</SUB>> ]
-"7801" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1566</SUB>> ]
-"7810" [label = <(NotifyGetField,NotifyGetField(f, nullptr))<SUB>1566</SUB>> ]
-"7813" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Char);,GET_STATIC_PRIMITIVE_FIELD(Char);)<SUB>1566</SUB>> ]
-"7803" [label = <(&lt;operator&gt;.greaterThan,jni::DecodeArtField &lt; kEnableIndexIds &gt; (fid))<SUB>1566</SUB>> ]
-"7814" [label = <(GET_STATIC_PRIMITIVE_FIELD(Char),f-&gt;GetChar(f-&gt;GetDeclaringClass()))<SUB>1566</SUB>> ]
-"7804" [label = <(&lt;operator&gt;.lessThan,jni::DecodeArtField &lt; kEnableIndexIds)<SUB>1566</SUB>> ]
-"7815" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetChar)<SUB>1566</SUB>> ]
-"7818" [label = <(GET_STATIC_PRIMITIVE_FIELD(Char),f-&gt;GetDeclaringClass())<SUB>1566</SUB>> ]
-"7783" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1566</SUB>> ]
-"7805" [label = <(&lt;operator&gt;.fieldAccess,GET_STATIC_PRIMITIVE_FIELD(Char))<SUB>1566</SUB>> ]
-"7817" [label = <(FIELD_IDENTIFIER,GetChar,GetChar)<SUB>1566</SUB>> ]
-"7819" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1566</SUB>> ]
-"7784" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1566</SUB>> ]
-"7788" [label = <(GET_STATIC_PRIMITIVE_FIELD(Char),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1566</SUB>> ]
-"7795" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Char),GET_STATIC_PRIMITIVE_FIELD(Char))<SUB>1566</SUB>> ]
-"7807" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1566</SUB>> ]
-"7821" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1566</SUB>> ]
-"7789" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1566</SUB>> ]
-"7790" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1566</SUB>> ]
-"7792" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1566</SUB>> ]
-"7775" [label = <(METHOD,GetStaticCharField)<SUB>1565</SUB>> ]
-"7822" [label = <(METHOD_RETURN,jchar)<SUB>1565</SUB>> ]
-  "7780" -> "7784" 
-  "7780" -> "7798" 
-  "7798" -> "7807" 
+digraph "GetStaticFloatField" {  
+"7783" [label = <(GET_STATIC_PRIMITIVE_FIELD,GET_STATIC_PRIMITIVE_FIELD(Float))<SUB>1504</SUB>> ]
+"7801" [label = <(soa,ScopedObjectAccess)<SUB>1504</SUB>> ]
+"7804" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1504</SUB>> ]
+"7813" [label = <(NotifyGetField,NotifyGetField(f, nullptr))<SUB>1504</SUB>> ]
+"7816" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Float);,GET_STATIC_PRIMITIVE_FIELD(Float);)<SUB>1504</SUB>> ]
+"7806" [label = <(&lt;operator&gt;.greaterThan,jni::DecodeArtField &lt; kEnableIndexIds &gt; (fid))<SUB>1504</SUB>> ]
+"7817" [label = <(GET_STATIC_PRIMITIVE_FIELD(Float),f-&gt;GetFloat(f-&gt;GetDeclaringClass()))<SUB>1504</SUB>> ]
+"7807" [label = <(&lt;operator&gt;.lessThan,jni::DecodeArtField &lt; kEnableIndexIds)<SUB>1504</SUB>> ]
+"7818" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetFloat)<SUB>1504</SUB>> ]
+"7821" [label = <(GET_STATIC_PRIMITIVE_FIELD(Float),f-&gt;GetDeclaringClass())<SUB>1504</SUB>> ]
+"7786" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1504</SUB>> ]
+"7808" [label = <(&lt;operator&gt;.fieldAccess,GET_STATIC_PRIMITIVE_FIELD(Float))<SUB>1504</SUB>> ]
+"7820" [label = <(FIELD_IDENTIFIER,GetFloat,GetFloat)<SUB>1504</SUB>> ]
+"7822" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1504</SUB>> ]
+"7787" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1504</SUB>> ]
+"7791" [label = <(GET_STATIC_PRIMITIVE_FIELD(Float),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1504</SUB>> ]
+"7798" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Float),GET_STATIC_PRIMITIVE_FIELD(Float))<SUB>1504</SUB>> ]
+"7810" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1504</SUB>> ]
+"7824" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1504</SUB>> ]
+"7792" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1504</SUB>> ]
+"7793" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1504</SUB>> ]
+"7795" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1504</SUB>> ]
+"7778" [label = <(METHOD,GetStaticFloatField)<SUB>1503</SUB>> ]
+"7825" [label = <(METHOD_RETURN,jfloat)<SUB>1503</SUB>> ]
+  "7783" -> "7787" 
+  "7783" -> "7801" 
   "7801" -> "7810" 
-  "7810" -> "7817" 
-  "7813" -> "7822" 
-  "7803" -> "7801" 
-  "7814" -> "7813" 
-  "7804" -> "7803" 
-  "7815" -> "7821" 
-  "7818" -> "7814" 
-  "7783" -> "7790" 
-  "7783" -> "7798" 
-  "7805" -> "7804" 
-  "7817" -> "7815" 
-  "7819" -> "7818" 
-  "7784" -> "7783" 
-  "7788" -> "7795" 
-  "7795" -> "7822" 
-  "7807" -> "7805" 
-  "7821" -> "7819" 
-  "7789" -> "7788" 
-  "7790" -> "7792" 
-  "7792" -> "7789" 
-  "7775" -> "7780" 
+  "7804" -> "7813" 
+  "7813" -> "7820" 
+  "7816" -> "7825" 
+  "7806" -> "7804" 
+  "7817" -> "7816" 
+  "7807" -> "7806" 
+  "7818" -> "7824" 
+  "7821" -> "7817" 
+  "7786" -> "7793" 
+  "7786" -> "7801" 
+  "7808" -> "7807" 
+  "7820" -> "7818" 
+  "7822" -> "7821" 
+  "7787" -> "7786" 
+  "7791" -> "7798" 
+  "7798" -> "7825" 
+  "7810" -> "7808" 
+  "7824" -> "7822" 
+  "7792" -> "7791" 
+  "7793" -> "7795" 
+  "7795" -> "7792" 
+  "7778" -> "7783" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/138-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/138-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/138-cfg.dot	2023-06-07 19:35:01.477387164 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/138-cfg.dot	2023-06-07 19:35:08.027386516 +0330
@@ -1,51 +1,51 @@
-digraph "GetStaticShortField" {  
-"7829" [label = <(GET_STATIC_PRIMITIVE_FIELD,GET_STATIC_PRIMITIVE_FIELD(Short))<SUB>1570</SUB>> ]
-"7847" [label = <(soa,ScopedObjectAccess)<SUB>1570</SUB>> ]
-"7850" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1570</SUB>> ]
-"7859" [label = <(NotifyGetField,NotifyGetField(f, nullptr))<SUB>1570</SUB>> ]
-"7862" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Short);,GET_STATIC_PRIMITIVE_FIELD(Short);)<SUB>1570</SUB>> ]
-"7852" [label = <(&lt;operator&gt;.greaterThan,jni::DecodeArtField &lt; kEnableIndexIds &gt; (fid))<SUB>1570</SUB>> ]
-"7863" [label = <(GET_STATIC_PRIMITIVE_FIELD(Short),f-&gt;GetShort(f-&gt;GetDeclaringClass()))<SUB>1570</SUB>> ]
-"7853" [label = <(&lt;operator&gt;.lessThan,jni::DecodeArtField &lt; kEnableIndexIds)<SUB>1570</SUB>> ]
-"7864" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetShort)<SUB>1570</SUB>> ]
-"7867" [label = <(GET_STATIC_PRIMITIVE_FIELD(Short),f-&gt;GetDeclaringClass())<SUB>1570</SUB>> ]
-"7832" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1570</SUB>> ]
-"7854" [label = <(&lt;operator&gt;.fieldAccess,GET_STATIC_PRIMITIVE_FIELD(Short))<SUB>1570</SUB>> ]
-"7866" [label = <(FIELD_IDENTIFIER,GetShort,GetShort)<SUB>1570</SUB>> ]
-"7868" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1570</SUB>> ]
-"7833" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1570</SUB>> ]
-"7837" [label = <(GET_STATIC_PRIMITIVE_FIELD(Short),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1570</SUB>> ]
-"7844" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Short),GET_STATIC_PRIMITIVE_FIELD(Short))<SUB>1570</SUB>> ]
-"7856" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1570</SUB>> ]
-"7870" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1570</SUB>> ]
-"7838" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1570</SUB>> ]
-"7839" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1570</SUB>> ]
-"7841" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1570</SUB>> ]
-"7824" [label = <(METHOD,GetStaticShortField)<SUB>1569</SUB>> ]
-"7871" [label = <(METHOD_RETURN,jshort)<SUB>1569</SUB>> ]
-  "7829" -> "7833" 
-  "7829" -> "7847" 
-  "7847" -> "7856" 
+digraph "GetStaticDoubleField" {  
+"7832" [label = <(GET_STATIC_PRIMITIVE_FIELD,GET_STATIC_PRIMITIVE_FIELD(Double))<SUB>1508</SUB>> ]
+"7850" [label = <(soa,ScopedObjectAccess)<SUB>1508</SUB>> ]
+"7853" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1508</SUB>> ]
+"7862" [label = <(NotifyGetField,NotifyGetField(f, nullptr))<SUB>1508</SUB>> ]
+"7865" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Double);,GET_STATIC_PRIMITIVE_FIELD(Double);)<SUB>1508</SUB>> ]
+"7855" [label = <(&lt;operator&gt;.greaterThan,jni::DecodeArtField &lt; kEnableIndexIds &gt; (fid))<SUB>1508</SUB>> ]
+"7866" [label = <(GET_STATIC_PRIMITIVE_FIELD(Double),f-&gt;GetDouble(f-&gt;GetDeclaringClass()))<SUB>1508</SUB>> ]
+"7856" [label = <(&lt;operator&gt;.lessThan,jni::DecodeArtField &lt; kEnableIndexIds)<SUB>1508</SUB>> ]
+"7867" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDouble)<SUB>1508</SUB>> ]
+"7870" [label = <(GET_STATIC_PRIMITIVE_FIELD(Double),f-&gt;GetDeclaringClass())<SUB>1508</SUB>> ]
+"7835" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1508</SUB>> ]
+"7857" [label = <(&lt;operator&gt;.fieldAccess,GET_STATIC_PRIMITIVE_FIELD(Double))<SUB>1508</SUB>> ]
+"7869" [label = <(FIELD_IDENTIFIER,GetDouble,GetDouble)<SUB>1508</SUB>> ]
+"7871" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1508</SUB>> ]
+"7836" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1508</SUB>> ]
+"7840" [label = <(GET_STATIC_PRIMITIVE_FIELD(Double),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1508</SUB>> ]
+"7847" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Double),GET_STATIC_PRIMITIVE_FIELD(Double))<SUB>1508</SUB>> ]
+"7859" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1508</SUB>> ]
+"7873" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1508</SUB>> ]
+"7841" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1508</SUB>> ]
+"7842" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1508</SUB>> ]
+"7844" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1508</SUB>> ]
+"7827" [label = <(METHOD,GetStaticDoubleField)<SUB>1507</SUB>> ]
+"7874" [label = <(METHOD_RETURN,jdouble)<SUB>1507</SUB>> ]
+  "7832" -> "7836" 
+  "7832" -> "7850" 
   "7850" -> "7859" 
-  "7859" -> "7866" 
-  "7862" -> "7871" 
-  "7852" -> "7850" 
-  "7863" -> "7862" 
-  "7853" -> "7852" 
-  "7864" -> "7870" 
-  "7867" -> "7863" 
-  "7832" -> "7839" 
-  "7832" -> "7847" 
-  "7854" -> "7853" 
-  "7866" -> "7864" 
-  "7868" -> "7867" 
-  "7833" -> "7832" 
-  "7837" -> "7844" 
-  "7844" -> "7871" 
-  "7856" -> "7854" 
-  "7870" -> "7868" 
-  "7838" -> "7837" 
-  "7839" -> "7841" 
-  "7841" -> "7838" 
-  "7824" -> "7829" 
+  "7853" -> "7862" 
+  "7862" -> "7869" 
+  "7865" -> "7874" 
+  "7855" -> "7853" 
+  "7866" -> "7865" 
+  "7856" -> "7855" 
+  "7867" -> "7873" 
+  "7870" -> "7866" 
+  "7835" -> "7842" 
+  "7835" -> "7850" 
+  "7857" -> "7856" 
+  "7869" -> "7867" 
+  "7871" -> "7870" 
+  "7836" -> "7835" 
+  "7840" -> "7847" 
+  "7847" -> "7874" 
+  "7859" -> "7857" 
+  "7873" -> "7871" 
+  "7841" -> "7840" 
+  "7842" -> "7844" 
+  "7844" -> "7841" 
+  "7827" -> "7832" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/139-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/139-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/139-cfg.dot	2023-06-07 19:35:01.477387164 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/139-cfg.dot	2023-06-07 19:35:08.027386516 +0330
@@ -1,51 +1,92 @@
-digraph "GetStaticIntField" {  
-"7878" [label = <(GET_STATIC_PRIMITIVE_FIELD,GET_STATIC_PRIMITIVE_FIELD(Int))<SUB>1574</SUB>> ]
-"7896" [label = <(soa,ScopedObjectAccess)<SUB>1574</SUB>> ]
-"7899" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1574</SUB>> ]
-"7908" [label = <(NotifyGetField,NotifyGetField(f, nullptr))<SUB>1574</SUB>> ]
-"7911" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Int);,GET_STATIC_PRIMITIVE_FIELD(Int);)<SUB>1574</SUB>> ]
-"7901" [label = <(&lt;operator&gt;.greaterThan,jni::DecodeArtField &lt; kEnableIndexIds &gt; (fid))<SUB>1574</SUB>> ]
-"7912" [label = <(GET_STATIC_PRIMITIVE_FIELD(Int),f-&gt;GetInt(f-&gt;GetDeclaringClass()))<SUB>1574</SUB>> ]
-"7902" [label = <(&lt;operator&gt;.lessThan,jni::DecodeArtField &lt; kEnableIndexIds)<SUB>1574</SUB>> ]
-"7913" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetInt)<SUB>1574</SUB>> ]
-"7916" [label = <(GET_STATIC_PRIMITIVE_FIELD(Int),f-&gt;GetDeclaringClass())<SUB>1574</SUB>> ]
-"7881" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1574</SUB>> ]
-"7903" [label = <(&lt;operator&gt;.fieldAccess,GET_STATIC_PRIMITIVE_FIELD(Int))<SUB>1574</SUB>> ]
-"7915" [label = <(FIELD_IDENTIFIER,GetInt,GetInt)<SUB>1574</SUB>> ]
-"7917" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1574</SUB>> ]
-"7882" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1574</SUB>> ]
-"7886" [label = <(GET_STATIC_PRIMITIVE_FIELD(Int),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1574</SUB>> ]
-"7893" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Int),GET_STATIC_PRIMITIVE_FIELD(Int))<SUB>1574</SUB>> ]
-"7905" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1574</SUB>> ]
-"7919" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1574</SUB>> ]
-"7887" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1574</SUB>> ]
-"7888" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1574</SUB>> ]
-"7890" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1574</SUB>> ]
-"7873" [label = <(METHOD,GetStaticIntField)<SUB>1573</SUB>> ]
-"7920" [label = <(METHOD_RETURN,jint)<SUB>1573</SUB>> ]
-  "7878" -> "7882" 
-  "7878" -> "7896" 
-  "7896" -> "7905" 
-  "7899" -> "7908" 
-  "7908" -> "7915" 
-  "7911" -> "7920" 
-  "7901" -> "7899" 
-  "7912" -> "7911" 
-  "7902" -> "7901" 
-  "7913" -> "7919" 
-  "7916" -> "7912" 
-  "7881" -> "7888" 
-  "7881" -> "7896" 
-  "7903" -> "7902" 
-  "7915" -> "7913" 
-  "7917" -> "7916" 
-  "7882" -> "7881" 
-  "7886" -> "7893" 
-  "7893" -> "7920" 
-  "7905" -> "7903" 
+digraph "SetBooleanField" {  
+"7882" [label = <(SET_PRIMITIVE_FIELD,SET_PRIMITIVE_FIELD(Boolean, obj, v))<SUB>1512</SUB>> ]
+"7914" [label = <(soa,ScopedObjectAccess)<SUB>1512</SUB>> ]
+"7917" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1512</SUB>> ]
+"7926" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, obj, JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Boolean, obj, v)&gt;(v)))<SUB>1512</SUB>> ]
+"7934" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1512</SUB>> ]
+"7951" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetBoolean &lt; false &gt; (o, v))<SUB>1512</SUB>> ]
+"7900" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1512</SUB>> ]
+"7919" [label = <(&lt;operator&gt;.greaterThan,jni::DecodeArtField &lt; kEnableIndexIds &gt; (fid))<SUB>1512</SUB>> ]
+"7929" [label = <(SET_PRIMITIVE_FIELD(Boolean, obj, v),JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Boolean, obj, v)&gt;(v))<SUB>1512</SUB>> ]
+"7935" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1512</SUB>> ]
+"7942" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1512</SUB>> ]
+"7952" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetBoolean &lt; false)<SUB>1512</SUB>> ]
+"7957" [label = <(&lt;operator&gt;.bracketedPrimary,(o, v))<SUB>1512</SUB>> ]
+"7901" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1512</SUB>> ]
+"7905" [label = <(SET_PRIMITIVE_FIELD(Boolean, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1512</SUB>> ]
+"7912" [label = <(RETURN,SET_PRIMITIVE_FIELD(Boolean, obj, v),SET_PRIMITIVE_FIELD(Boolean, obj, v))<SUB>1512</SUB>> ]
+"7920" [label = <(&lt;operator&gt;.lessThan,jni::DecodeArtField &lt; kEnableIndexIds)<SUB>1512</SUB>> ]
+"7930" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Boolean, obj, v))<SUB>1512</SUB>> ]
+"7936" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1512</SUB>> ]
+"7943" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1512</SUB>> ]
+"7953" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetBoolean)<SUB>1512</SUB>> ]
+"7958" [label = <(&lt;operator&gt;.expressionList,o, v)<SUB>1512</SUB>> ]
+"7886" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1512</SUB>> ]
+"7906" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1512</SUB>> ]
+"7921" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Boolean, obj, v))<SUB>1512</SUB>> ]
+"7932" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Boolean, obj, v)&gt;,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Boolean, obj, v)&gt;)<SUB>1512</SUB>> ]
+"7938" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Boolean, obj, v))<SUB>1512</SUB>> ]
+"7944" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1512</SUB>> ]
+"7947" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Boolean, obj, v))<SUB>1512</SUB>> ]
+"7955" [label = <(FIELD_IDENTIFIER,SetBoolean,SetBoolean)<SUB>1512</SUB>> ]
+"7887" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1512</SUB>> ]
+"7891" [label = <(SET_PRIMITIVE_FIELD(Boolean, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1512</SUB>> ]
+"7898" [label = <(RETURN,SET_PRIMITIVE_FIELD(Boolean, obj, v),SET_PRIMITIVE_FIELD(Boolean, obj, v))<SUB>1512</SUB>> ]
+"7907" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1512</SUB>> ]
+"7909" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1512</SUB>> ]
+"7923" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1512</SUB>> ]
+"7940" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1512</SUB>> ]
+"7946" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1512</SUB>> ]
+"7949" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1512</SUB>> ]
+"7892" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1512</SUB>> ]
+"7893" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1512</SUB>> ]
+"7895" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1512</SUB>> ]
+"7876" [label = <(METHOD,SetBooleanField)<SUB>1511</SUB>> ]
+"7961" [label = <(METHOD_RETURN,void)<SUB>1511</SUB>> ]
+  "7882" -> "7887" 
+  "7882" -> "7901" 
+  "7914" -> "7923" 
+  "7917" -> "7932" 
+  "7926" -> "7940" 
+  "7934" -> "7955" 
+  "7951" -> "7961" 
+  "7900" -> "7907" 
+  "7900" -> "7914" 
   "7919" -> "7917" 
+  "7929" -> "7926" 
+  "7935" -> "7946" 
+  "7942" -> "7934" 
+  "7952" -> "7958" 
+  "7957" -> "7951" 
+  "7901" -> "7900" 
+  "7905" -> "7912" 
+  "7912" -> "7961" 
+  "7920" -> "7919" 
+  "7930" -> "7929" 
+  "7936" -> "7935" 
+  "7943" -> "7942" 
+  "7953" -> "7952" 
+  "7958" -> "7957" 
+  "7886" -> "7893" 
+  "7886" -> "7901" 
+  "7906" -> "7905" 
+  "7921" -> "7920" 
+  "7932" -> "7930" 
+  "7938" -> "7936" 
+  "7944" -> "7949" 
+  "7947" -> "7943" 
+  "7955" -> "7953" 
   "7887" -> "7886" 
-  "7888" -> "7890" 
-  "7890" -> "7887" 
-  "7873" -> "7878" 
+  "7891" -> "7898" 
+  "7898" -> "7961" 
+  "7907" -> "7909" 
+  "7909" -> "7906" 
+  "7923" -> "7921" 
+  "7940" -> "7938" 
+  "7946" -> "7944" 
+  "7949" -> "7947" 
+  "7892" -> "7891" 
+  "7893" -> "7895" 
+  "7895" -> "7892" 
+  "7876" -> "7882" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/14-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/14-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/14-cfg.dot	2023-06-07 19:35:01.337387177 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/14-cfg.dot	2023-06-07 19:35:07.907386529 +0330
@@ -1,5 +1,5 @@
-digraph "FindMethodID" {  
-"361" [label = <(METHOD,FindMethodID)<SUB>299</SUB>> ]
-"368" [label = <(METHOD_RETURN,jmethodID)<SUB>299</SUB>> ]
-  "361" -> "368" 
+digraph "ThrowSIOOBE" {  
+"236" [label = <(METHOD,ThrowSIOOBE)<SUB>278</SUB>> ]
+"242" [label = <(METHOD_RETURN,void)<SUB>278</SUB>> ]
+  "236" -> "242" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/140-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/140-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/140-cfg.dot	2023-06-07 19:35:01.477387164 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/140-cfg.dot	2023-06-07 19:35:08.027386516 +0330
@@ -1,51 +1,92 @@
-digraph "GetStaticLongField" {  
-"7927" [label = <(GET_STATIC_PRIMITIVE_FIELD,GET_STATIC_PRIMITIVE_FIELD(Long))<SUB>1578</SUB>> ]
-"7945" [label = <(soa,ScopedObjectAccess)<SUB>1578</SUB>> ]
-"7948" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1578</SUB>> ]
-"7957" [label = <(NotifyGetField,NotifyGetField(f, nullptr))<SUB>1578</SUB>> ]
-"7960" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Long);,GET_STATIC_PRIMITIVE_FIELD(Long);)<SUB>1578</SUB>> ]
-"7950" [label = <(&lt;operator&gt;.greaterThan,jni::DecodeArtField &lt; kEnableIndexIds &gt; (fid))<SUB>1578</SUB>> ]
-"7961" [label = <(GET_STATIC_PRIMITIVE_FIELD(Long),f-&gt;GetLong(f-&gt;GetDeclaringClass()))<SUB>1578</SUB>> ]
-"7951" [label = <(&lt;operator&gt;.lessThan,jni::DecodeArtField &lt; kEnableIndexIds)<SUB>1578</SUB>> ]
-"7962" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetLong)<SUB>1578</SUB>> ]
-"7965" [label = <(GET_STATIC_PRIMITIVE_FIELD(Long),f-&gt;GetDeclaringClass())<SUB>1578</SUB>> ]
-"7930" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1578</SUB>> ]
-"7952" [label = <(&lt;operator&gt;.fieldAccess,GET_STATIC_PRIMITIVE_FIELD(Long))<SUB>1578</SUB>> ]
-"7964" [label = <(FIELD_IDENTIFIER,GetLong,GetLong)<SUB>1578</SUB>> ]
-"7966" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1578</SUB>> ]
-"7931" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1578</SUB>> ]
-"7935" [label = <(GET_STATIC_PRIMITIVE_FIELD(Long),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1578</SUB>> ]
-"7942" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Long),GET_STATIC_PRIMITIVE_FIELD(Long))<SUB>1578</SUB>> ]
-"7954" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1578</SUB>> ]
-"7968" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1578</SUB>> ]
-"7936" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1578</SUB>> ]
-"7937" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1578</SUB>> ]
-"7939" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1578</SUB>> ]
-"7922" [label = <(METHOD,GetStaticLongField)<SUB>1577</SUB>> ]
-"7969" [label = <(METHOD_RETURN,jlong)<SUB>1577</SUB>> ]
-  "7927" -> "7931" 
-  "7927" -> "7945" 
-  "7945" -> "7954" 
-  "7948" -> "7957" 
-  "7957" -> "7964" 
-  "7960" -> "7969" 
-  "7950" -> "7948" 
-  "7961" -> "7960" 
-  "7951" -> "7950" 
-  "7962" -> "7968" 
-  "7965" -> "7961" 
-  "7930" -> "7937" 
-  "7930" -> "7945" 
-  "7952" -> "7951" 
-  "7964" -> "7962" 
-  "7966" -> "7965" 
-  "7931" -> "7930" 
-  "7935" -> "7942" 
-  "7942" -> "7969" 
-  "7954" -> "7952" 
-  "7968" -> "7966" 
-  "7936" -> "7935" 
-  "7937" -> "7939" 
-  "7939" -> "7936" 
-  "7922" -> "7927" 
+digraph "SetByteField" {  
+"7969" [label = <(SET_PRIMITIVE_FIELD,SET_PRIMITIVE_FIELD(Byte, obj, v))<SUB>1516</SUB>> ]
+"8001" [label = <(soa,ScopedObjectAccess)<SUB>1516</SUB>> ]
+"8004" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1516</SUB>> ]
+"8013" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, obj, JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Byte, obj, v)&gt;(v)))<SUB>1516</SUB>> ]
+"8021" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1516</SUB>> ]
+"8038" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetByte &lt; false &gt; (o, v))<SUB>1516</SUB>> ]
+"7987" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1516</SUB>> ]
+"8006" [label = <(&lt;operator&gt;.greaterThan,jni::DecodeArtField &lt; kEnableIndexIds &gt; (fid))<SUB>1516</SUB>> ]
+"8016" [label = <(SET_PRIMITIVE_FIELD(Byte, obj, v),JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Byte, obj, v)&gt;(v))<SUB>1516</SUB>> ]
+"8022" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1516</SUB>> ]
+"8029" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1516</SUB>> ]
+"8039" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetByte &lt; false)<SUB>1516</SUB>> ]
+"8044" [label = <(&lt;operator&gt;.bracketedPrimary,(o, v))<SUB>1516</SUB>> ]
+"7988" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1516</SUB>> ]
+"7992" [label = <(SET_PRIMITIVE_FIELD(Byte, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1516</SUB>> ]
+"7999" [label = <(RETURN,SET_PRIMITIVE_FIELD(Byte, obj, v),SET_PRIMITIVE_FIELD(Byte, obj, v))<SUB>1516</SUB>> ]
+"8007" [label = <(&lt;operator&gt;.lessThan,jni::DecodeArtField &lt; kEnableIndexIds)<SUB>1516</SUB>> ]
+"8017" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Byte, obj, v))<SUB>1516</SUB>> ]
+"8023" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1516</SUB>> ]
+"8030" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1516</SUB>> ]
+"8040" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetByte)<SUB>1516</SUB>> ]
+"8045" [label = <(&lt;operator&gt;.expressionList,o, v)<SUB>1516</SUB>> ]
+"7973" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1516</SUB>> ]
+"7993" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1516</SUB>> ]
+"8008" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Byte, obj, v))<SUB>1516</SUB>> ]
+"8019" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Byte, obj, v)&gt;,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Byte, obj, v)&gt;)<SUB>1516</SUB>> ]
+"8025" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Byte, obj, v))<SUB>1516</SUB>> ]
+"8031" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1516</SUB>> ]
+"8034" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Byte, obj, v))<SUB>1516</SUB>> ]
+"8042" [label = <(FIELD_IDENTIFIER,SetByte,SetByte)<SUB>1516</SUB>> ]
+"7974" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1516</SUB>> ]
+"7978" [label = <(SET_PRIMITIVE_FIELD(Byte, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1516</SUB>> ]
+"7985" [label = <(RETURN,SET_PRIMITIVE_FIELD(Byte, obj, v),SET_PRIMITIVE_FIELD(Byte, obj, v))<SUB>1516</SUB>> ]
+"7994" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1516</SUB>> ]
+"7996" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1516</SUB>> ]
+"8010" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1516</SUB>> ]
+"8027" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1516</SUB>> ]
+"8033" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1516</SUB>> ]
+"8036" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1516</SUB>> ]
+"7979" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1516</SUB>> ]
+"7980" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1516</SUB>> ]
+"7982" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1516</SUB>> ]
+"7963" [label = <(METHOD,SetByteField)<SUB>1515</SUB>> ]
+"8048" [label = <(METHOD_RETURN,void)<SUB>1515</SUB>> ]
+  "7969" -> "7974" 
+  "7969" -> "7988" 
+  "8001" -> "8010" 
+  "8004" -> "8019" 
+  "8013" -> "8027" 
+  "8021" -> "8042" 
+  "8038" -> "8048" 
+  "7987" -> "7994" 
+  "7987" -> "8001" 
+  "8006" -> "8004" 
+  "8016" -> "8013" 
+  "8022" -> "8033" 
+  "8029" -> "8021" 
+  "8039" -> "8045" 
+  "8044" -> "8038" 
+  "7988" -> "7987" 
+  "7992" -> "7999" 
+  "7999" -> "8048" 
+  "8007" -> "8006" 
+  "8017" -> "8016" 
+  "8023" -> "8022" 
+  "8030" -> "8029" 
+  "8040" -> "8039" 
+  "8045" -> "8044" 
+  "7973" -> "7980" 
+  "7973" -> "7988" 
+  "7993" -> "7992" 
+  "8008" -> "8007" 
+  "8019" -> "8017" 
+  "8025" -> "8023" 
+  "8031" -> "8036" 
+  "8034" -> "8030" 
+  "8042" -> "8040" 
+  "7974" -> "7973" 
+  "7978" -> "7985" 
+  "7985" -> "8048" 
+  "7994" -> "7996" 
+  "7996" -> "7993" 
+  "8010" -> "8008" 
+  "8027" -> "8025" 
+  "8033" -> "8031" 
+  "8036" -> "8034" 
+  "7979" -> "7978" 
+  "7980" -> "7982" 
+  "7982" -> "7979" 
+  "7963" -> "7969" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/141-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/141-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/141-cfg.dot	2023-06-07 19:35:01.487387161 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/141-cfg.dot	2023-06-07 19:35:08.027386516 +0330
@@ -1,51 +1,92 @@
-digraph "GetStaticFloatField" {  
-"7976" [label = <(GET_STATIC_PRIMITIVE_FIELD,GET_STATIC_PRIMITIVE_FIELD(Float))<SUB>1582</SUB>> ]
-"7994" [label = <(soa,ScopedObjectAccess)<SUB>1582</SUB>> ]
-"7997" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1582</SUB>> ]
-"8006" [label = <(NotifyGetField,NotifyGetField(f, nullptr))<SUB>1582</SUB>> ]
-"8009" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Float);,GET_STATIC_PRIMITIVE_FIELD(Float);)<SUB>1582</SUB>> ]
-"7999" [label = <(&lt;operator&gt;.greaterThan,jni::DecodeArtField &lt; kEnableIndexIds &gt; (fid))<SUB>1582</SUB>> ]
-"8010" [label = <(GET_STATIC_PRIMITIVE_FIELD(Float),f-&gt;GetFloat(f-&gt;GetDeclaringClass()))<SUB>1582</SUB>> ]
-"8000" [label = <(&lt;operator&gt;.lessThan,jni::DecodeArtField &lt; kEnableIndexIds)<SUB>1582</SUB>> ]
-"8011" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetFloat)<SUB>1582</SUB>> ]
-"8014" [label = <(GET_STATIC_PRIMITIVE_FIELD(Float),f-&gt;GetDeclaringClass())<SUB>1582</SUB>> ]
-"7979" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1582</SUB>> ]
-"8001" [label = <(&lt;operator&gt;.fieldAccess,GET_STATIC_PRIMITIVE_FIELD(Float))<SUB>1582</SUB>> ]
-"8013" [label = <(FIELD_IDENTIFIER,GetFloat,GetFloat)<SUB>1582</SUB>> ]
-"8015" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1582</SUB>> ]
-"7980" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1582</SUB>> ]
-"7984" [label = <(GET_STATIC_PRIMITIVE_FIELD(Float),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1582</SUB>> ]
-"7991" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Float),GET_STATIC_PRIMITIVE_FIELD(Float))<SUB>1582</SUB>> ]
-"8003" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1582</SUB>> ]
-"8017" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1582</SUB>> ]
-"7985" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1582</SUB>> ]
-"7986" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1582</SUB>> ]
-"7988" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1582</SUB>> ]
-"7971" [label = <(METHOD,GetStaticFloatField)<SUB>1581</SUB>> ]
-"8018" [label = <(METHOD_RETURN,jfloat)<SUB>1581</SUB>> ]
-  "7976" -> "7980" 
-  "7976" -> "7994" 
-  "7994" -> "8003" 
-  "7997" -> "8006" 
-  "8006" -> "8013" 
-  "8009" -> "8018" 
-  "7999" -> "7997" 
-  "8010" -> "8009" 
-  "8000" -> "7999" 
-  "8011" -> "8017" 
-  "8014" -> "8010" 
-  "7979" -> "7986" 
-  "7979" -> "7994" 
-  "8001" -> "8000" 
-  "8013" -> "8011" 
-  "8015" -> "8014" 
-  "7980" -> "7979" 
-  "7984" -> "7991" 
-  "7991" -> "8018" 
-  "8003" -> "8001" 
-  "8017" -> "8015" 
-  "7985" -> "7984" 
-  "7986" -> "7988" 
-  "7988" -> "7985" 
-  "7971" -> "7976" 
+digraph "SetCharField" {  
+"8056" [label = <(SET_PRIMITIVE_FIELD,SET_PRIMITIVE_FIELD(Char, obj, v))<SUB>1520</SUB>> ]
+"8088" [label = <(soa,ScopedObjectAccess)<SUB>1520</SUB>> ]
+"8091" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1520</SUB>> ]
+"8100" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, obj, JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Char, obj, v)&gt;(v)))<SUB>1520</SUB>> ]
+"8108" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1520</SUB>> ]
+"8125" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetChar &lt; false &gt; (o, v))<SUB>1520</SUB>> ]
+"8074" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1520</SUB>> ]
+"8093" [label = <(&lt;operator&gt;.greaterThan,jni::DecodeArtField &lt; kEnableIndexIds &gt; (fid))<SUB>1520</SUB>> ]
+"8103" [label = <(SET_PRIMITIVE_FIELD(Char, obj, v),JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Char, obj, v)&gt;(v))<SUB>1520</SUB>> ]
+"8109" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1520</SUB>> ]
+"8116" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1520</SUB>> ]
+"8126" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetChar &lt; false)<SUB>1520</SUB>> ]
+"8131" [label = <(&lt;operator&gt;.bracketedPrimary,(o, v))<SUB>1520</SUB>> ]
+"8075" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1520</SUB>> ]
+"8079" [label = <(SET_PRIMITIVE_FIELD(Char, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1520</SUB>> ]
+"8086" [label = <(RETURN,SET_PRIMITIVE_FIELD(Char, obj, v),SET_PRIMITIVE_FIELD(Char, obj, v))<SUB>1520</SUB>> ]
+"8094" [label = <(&lt;operator&gt;.lessThan,jni::DecodeArtField &lt; kEnableIndexIds)<SUB>1520</SUB>> ]
+"8104" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Char, obj, v))<SUB>1520</SUB>> ]
+"8110" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1520</SUB>> ]
+"8117" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1520</SUB>> ]
+"8127" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetChar)<SUB>1520</SUB>> ]
+"8132" [label = <(&lt;operator&gt;.expressionList,o, v)<SUB>1520</SUB>> ]
+"8060" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1520</SUB>> ]
+"8080" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1520</SUB>> ]
+"8095" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Char, obj, v))<SUB>1520</SUB>> ]
+"8106" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Char, obj, v)&gt;,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Char, obj, v)&gt;)<SUB>1520</SUB>> ]
+"8112" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Char, obj, v))<SUB>1520</SUB>> ]
+"8118" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1520</SUB>> ]
+"8121" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Char, obj, v))<SUB>1520</SUB>> ]
+"8129" [label = <(FIELD_IDENTIFIER,SetChar,SetChar)<SUB>1520</SUB>> ]
+"8061" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1520</SUB>> ]
+"8065" [label = <(SET_PRIMITIVE_FIELD(Char, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1520</SUB>> ]
+"8072" [label = <(RETURN,SET_PRIMITIVE_FIELD(Char, obj, v),SET_PRIMITIVE_FIELD(Char, obj, v))<SUB>1520</SUB>> ]
+"8081" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1520</SUB>> ]
+"8083" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1520</SUB>> ]
+"8097" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1520</SUB>> ]
+"8114" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1520</SUB>> ]
+"8120" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1520</SUB>> ]
+"8123" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1520</SUB>> ]
+"8066" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1520</SUB>> ]
+"8067" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1520</SUB>> ]
+"8069" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1520</SUB>> ]
+"8050" [label = <(METHOD,SetCharField)<SUB>1519</SUB>> ]
+"8135" [label = <(METHOD_RETURN,void)<SUB>1519</SUB>> ]
+  "8056" -> "8061" 
+  "8056" -> "8075" 
+  "8088" -> "8097" 
+  "8091" -> "8106" 
+  "8100" -> "8114" 
+  "8108" -> "8129" 
+  "8125" -> "8135" 
+  "8074" -> "8081" 
+  "8074" -> "8088" 
+  "8093" -> "8091" 
+  "8103" -> "8100" 
+  "8109" -> "8120" 
+  "8116" -> "8108" 
+  "8126" -> "8132" 
+  "8131" -> "8125" 
+  "8075" -> "8074" 
+  "8079" -> "8086" 
+  "8086" -> "8135" 
+  "8094" -> "8093" 
+  "8104" -> "8103" 
+  "8110" -> "8109" 
+  "8117" -> "8116" 
+  "8127" -> "8126" 
+  "8132" -> "8131" 
+  "8060" -> "8067" 
+  "8060" -> "8075" 
+  "8080" -> "8079" 
+  "8095" -> "8094" 
+  "8106" -> "8104" 
+  "8112" -> "8110" 
+  "8118" -> "8123" 
+  "8121" -> "8117" 
+  "8129" -> "8127" 
+  "8061" -> "8060" 
+  "8065" -> "8072" 
+  "8072" -> "8135" 
+  "8081" -> "8083" 
+  "8083" -> "8080" 
+  "8097" -> "8095" 
+  "8114" -> "8112" 
+  "8120" -> "8118" 
+  "8123" -> "8121" 
+  "8066" -> "8065" 
+  "8067" -> "8069" 
+  "8069" -> "8066" 
+  "8050" -> "8056" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/142-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/142-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/142-cfg.dot	2023-06-07 19:35:01.487387161 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/142-cfg.dot	2023-06-07 19:35:08.027386516 +0330
@@ -1,51 +1,92 @@
-digraph "GetStaticDoubleField" {  
-"8025" [label = <(GET_STATIC_PRIMITIVE_FIELD,GET_STATIC_PRIMITIVE_FIELD(Double))<SUB>1586</SUB>> ]
-"8043" [label = <(soa,ScopedObjectAccess)<SUB>1586</SUB>> ]
-"8046" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1586</SUB>> ]
-"8055" [label = <(NotifyGetField,NotifyGetField(f, nullptr))<SUB>1586</SUB>> ]
-"8058" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Double);,GET_STATIC_PRIMITIVE_FIELD(Double);)<SUB>1586</SUB>> ]
-"8048" [label = <(&lt;operator&gt;.greaterThan,jni::DecodeArtField &lt; kEnableIndexIds &gt; (fid))<SUB>1586</SUB>> ]
-"8059" [label = <(GET_STATIC_PRIMITIVE_FIELD(Double),f-&gt;GetDouble(f-&gt;GetDeclaringClass()))<SUB>1586</SUB>> ]
-"8049" [label = <(&lt;operator&gt;.lessThan,jni::DecodeArtField &lt; kEnableIndexIds)<SUB>1586</SUB>> ]
-"8060" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDouble)<SUB>1586</SUB>> ]
-"8063" [label = <(GET_STATIC_PRIMITIVE_FIELD(Double),f-&gt;GetDeclaringClass())<SUB>1586</SUB>> ]
-"8028" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1586</SUB>> ]
-"8050" [label = <(&lt;operator&gt;.fieldAccess,GET_STATIC_PRIMITIVE_FIELD(Double))<SUB>1586</SUB>> ]
-"8062" [label = <(FIELD_IDENTIFIER,GetDouble,GetDouble)<SUB>1586</SUB>> ]
-"8064" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1586</SUB>> ]
-"8029" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1586</SUB>> ]
-"8033" [label = <(GET_STATIC_PRIMITIVE_FIELD(Double),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1586</SUB>> ]
-"8040" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Double),GET_STATIC_PRIMITIVE_FIELD(Double))<SUB>1586</SUB>> ]
-"8052" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1586</SUB>> ]
-"8066" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1586</SUB>> ]
-"8034" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1586</SUB>> ]
-"8035" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1586</SUB>> ]
-"8037" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1586</SUB>> ]
-"8020" [label = <(METHOD,GetStaticDoubleField)<SUB>1585</SUB>> ]
-"8067" [label = <(METHOD_RETURN,jdouble)<SUB>1585</SUB>> ]
-  "8025" -> "8029" 
-  "8025" -> "8043" 
-  "8043" -> "8052" 
-  "8046" -> "8055" 
-  "8055" -> "8062" 
-  "8058" -> "8067" 
-  "8048" -> "8046" 
-  "8059" -> "8058" 
-  "8049" -> "8048" 
-  "8060" -> "8066" 
-  "8063" -> "8059" 
-  "8028" -> "8035" 
-  "8028" -> "8043" 
-  "8050" -> "8049" 
-  "8062" -> "8060" 
-  "8064" -> "8063" 
-  "8029" -> "8028" 
-  "8033" -> "8040" 
-  "8040" -> "8067" 
-  "8052" -> "8050" 
-  "8066" -> "8064" 
-  "8034" -> "8033" 
-  "8035" -> "8037" 
-  "8037" -> "8034" 
-  "8020" -> "8025" 
+digraph "SetFloatField" {  
+"8143" [label = <(SET_PRIMITIVE_FIELD,SET_PRIMITIVE_FIELD(Float, obj, v))<SUB>1524</SUB>> ]
+"8175" [label = <(soa,ScopedObjectAccess)<SUB>1524</SUB>> ]
+"8178" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1524</SUB>> ]
+"8187" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, obj, JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Float, obj, v)&gt;(v)))<SUB>1524</SUB>> ]
+"8195" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1524</SUB>> ]
+"8212" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetFloat &lt; false &gt; (o, v))<SUB>1524</SUB>> ]
+"8161" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1524</SUB>> ]
+"8180" [label = <(&lt;operator&gt;.greaterThan,jni::DecodeArtField &lt; kEnableIndexIds &gt; (fid))<SUB>1524</SUB>> ]
+"8190" [label = <(SET_PRIMITIVE_FIELD(Float, obj, v),JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Float, obj, v)&gt;(v))<SUB>1524</SUB>> ]
+"8196" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1524</SUB>> ]
+"8203" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1524</SUB>> ]
+"8213" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetFloat &lt; false)<SUB>1524</SUB>> ]
+"8218" [label = <(&lt;operator&gt;.bracketedPrimary,(o, v))<SUB>1524</SUB>> ]
+"8162" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1524</SUB>> ]
+"8166" [label = <(SET_PRIMITIVE_FIELD(Float, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1524</SUB>> ]
+"8173" [label = <(RETURN,SET_PRIMITIVE_FIELD(Float, obj, v),SET_PRIMITIVE_FIELD(Float, obj, v))<SUB>1524</SUB>> ]
+"8181" [label = <(&lt;operator&gt;.lessThan,jni::DecodeArtField &lt; kEnableIndexIds)<SUB>1524</SUB>> ]
+"8191" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Float, obj, v))<SUB>1524</SUB>> ]
+"8197" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1524</SUB>> ]
+"8204" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1524</SUB>> ]
+"8214" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetFloat)<SUB>1524</SUB>> ]
+"8219" [label = <(&lt;operator&gt;.expressionList,o, v)<SUB>1524</SUB>> ]
+"8147" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1524</SUB>> ]
+"8167" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1524</SUB>> ]
+"8182" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Float, obj, v))<SUB>1524</SUB>> ]
+"8193" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Float, obj, v)&gt;,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Float, obj, v)&gt;)<SUB>1524</SUB>> ]
+"8199" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Float, obj, v))<SUB>1524</SUB>> ]
+"8205" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1524</SUB>> ]
+"8208" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Float, obj, v))<SUB>1524</SUB>> ]
+"8216" [label = <(FIELD_IDENTIFIER,SetFloat,SetFloat)<SUB>1524</SUB>> ]
+"8148" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1524</SUB>> ]
+"8152" [label = <(SET_PRIMITIVE_FIELD(Float, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1524</SUB>> ]
+"8159" [label = <(RETURN,SET_PRIMITIVE_FIELD(Float, obj, v),SET_PRIMITIVE_FIELD(Float, obj, v))<SUB>1524</SUB>> ]
+"8168" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1524</SUB>> ]
+"8170" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1524</SUB>> ]
+"8184" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1524</SUB>> ]
+"8201" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1524</SUB>> ]
+"8207" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1524</SUB>> ]
+"8210" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1524</SUB>> ]
+"8153" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1524</SUB>> ]
+"8154" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1524</SUB>> ]
+"8156" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1524</SUB>> ]
+"8137" [label = <(METHOD,SetFloatField)<SUB>1523</SUB>> ]
+"8222" [label = <(METHOD_RETURN,void)<SUB>1523</SUB>> ]
+  "8143" -> "8148" 
+  "8143" -> "8162" 
+  "8175" -> "8184" 
+  "8178" -> "8193" 
+  "8187" -> "8201" 
+  "8195" -> "8216" 
+  "8212" -> "8222" 
+  "8161" -> "8168" 
+  "8161" -> "8175" 
+  "8180" -> "8178" 
+  "8190" -> "8187" 
+  "8196" -> "8207" 
+  "8203" -> "8195" 
+  "8213" -> "8219" 
+  "8218" -> "8212" 
+  "8162" -> "8161" 
+  "8166" -> "8173" 
+  "8173" -> "8222" 
+  "8181" -> "8180" 
+  "8191" -> "8190" 
+  "8197" -> "8196" 
+  "8204" -> "8203" 
+  "8214" -> "8213" 
+  "8219" -> "8218" 
+  "8147" -> "8154" 
+  "8147" -> "8162" 
+  "8167" -> "8166" 
+  "8182" -> "8181" 
+  "8193" -> "8191" 
+  "8199" -> "8197" 
+  "8205" -> "8210" 
+  "8208" -> "8204" 
+  "8216" -> "8214" 
+  "8148" -> "8147" 
+  "8152" -> "8159" 
+  "8159" -> "8222" 
+  "8168" -> "8170" 
+  "8170" -> "8167" 
+  "8184" -> "8182" 
+  "8201" -> "8199" 
+  "8207" -> "8205" 
+  "8210" -> "8208" 
+  "8153" -> "8152" 
+  "8154" -> "8156" 
+  "8156" -> "8153" 
+  "8137" -> "8143" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/143-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/143-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/143-cfg.dot	2023-06-07 19:35:01.487387161 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/143-cfg.dot	2023-06-07 19:35:08.027386516 +0330
@@ -1,92 +1,92 @@
-digraph "SetBooleanField" {  
-"8075" [label = <(SET_PRIMITIVE_FIELD,SET_PRIMITIVE_FIELD(Boolean, obj, v))<SUB>1590</SUB>> ]
-"8107" [label = <(soa,ScopedObjectAccess)<SUB>1590</SUB>> ]
-"8110" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1590</SUB>> ]
-"8119" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, obj, JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Boolean, obj, v)&gt;(v)))<SUB>1590</SUB>> ]
-"8127" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1590</SUB>> ]
-"8144" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetBoolean &lt; false &gt; (o, v))<SUB>1590</SUB>> ]
-"8093" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1590</SUB>> ]
-"8112" [label = <(&lt;operator&gt;.greaterThan,jni::DecodeArtField &lt; kEnableIndexIds &gt; (fid))<SUB>1590</SUB>> ]
-"8122" [label = <(SET_PRIMITIVE_FIELD(Boolean, obj, v),JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Boolean, obj, v)&gt;(v))<SUB>1590</SUB>> ]
-"8128" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1590</SUB>> ]
-"8135" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1590</SUB>> ]
-"8145" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetBoolean &lt; false)<SUB>1590</SUB>> ]
-"8150" [label = <(&lt;operator&gt;.bracketedPrimary,(o, v))<SUB>1590</SUB>> ]
-"8094" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1590</SUB>> ]
-"8098" [label = <(SET_PRIMITIVE_FIELD(Boolean, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1590</SUB>> ]
-"8105" [label = <(RETURN,SET_PRIMITIVE_FIELD(Boolean, obj, v),SET_PRIMITIVE_FIELD(Boolean, obj, v))<SUB>1590</SUB>> ]
-"8113" [label = <(&lt;operator&gt;.lessThan,jni::DecodeArtField &lt; kEnableIndexIds)<SUB>1590</SUB>> ]
-"8123" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Boolean, obj, v))<SUB>1590</SUB>> ]
-"8129" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1590</SUB>> ]
-"8136" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1590</SUB>> ]
-"8146" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetBoolean)<SUB>1590</SUB>> ]
-"8151" [label = <(&lt;operator&gt;.expressionList,o, v)<SUB>1590</SUB>> ]
-"8079" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1590</SUB>> ]
-"8099" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1590</SUB>> ]
-"8114" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Boolean, obj, v))<SUB>1590</SUB>> ]
-"8125" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Boolean, obj, v)&gt;,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Boolean, obj, v)&gt;)<SUB>1590</SUB>> ]
-"8131" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Boolean, obj, v))<SUB>1590</SUB>> ]
-"8137" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1590</SUB>> ]
-"8140" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Boolean, obj, v))<SUB>1590</SUB>> ]
-"8148" [label = <(FIELD_IDENTIFIER,SetBoolean,SetBoolean)<SUB>1590</SUB>> ]
-"8080" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1590</SUB>> ]
-"8084" [label = <(SET_PRIMITIVE_FIELD(Boolean, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1590</SUB>> ]
-"8091" [label = <(RETURN,SET_PRIMITIVE_FIELD(Boolean, obj, v),SET_PRIMITIVE_FIELD(Boolean, obj, v))<SUB>1590</SUB>> ]
-"8100" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1590</SUB>> ]
-"8102" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1590</SUB>> ]
-"8116" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1590</SUB>> ]
-"8133" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1590</SUB>> ]
-"8139" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1590</SUB>> ]
-"8142" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1590</SUB>> ]
-"8085" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1590</SUB>> ]
-"8086" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1590</SUB>> ]
-"8088" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1590</SUB>> ]
-"8069" [label = <(METHOD,SetBooleanField)<SUB>1589</SUB>> ]
-"8154" [label = <(METHOD_RETURN,void)<SUB>1589</SUB>> ]
-  "8075" -> "8080" 
-  "8075" -> "8094" 
-  "8107" -> "8116" 
-  "8110" -> "8125" 
-  "8119" -> "8133" 
-  "8127" -> "8148" 
-  "8144" -> "8154" 
-  "8093" -> "8100" 
-  "8093" -> "8107" 
-  "8112" -> "8110" 
-  "8122" -> "8119" 
-  "8128" -> "8139" 
-  "8135" -> "8127" 
-  "8145" -> "8151" 
-  "8150" -> "8144" 
-  "8094" -> "8093" 
-  "8098" -> "8105" 
-  "8105" -> "8154" 
-  "8113" -> "8112" 
-  "8123" -> "8122" 
-  "8129" -> "8128" 
-  "8136" -> "8135" 
-  "8146" -> "8145" 
-  "8151" -> "8150" 
-  "8079" -> "8086" 
-  "8079" -> "8094" 
-  "8099" -> "8098" 
-  "8114" -> "8113" 
-  "8125" -> "8123" 
-  "8131" -> "8129" 
-  "8137" -> "8142" 
-  "8140" -> "8136" 
-  "8148" -> "8146" 
-  "8080" -> "8079" 
-  "8084" -> "8091" 
-  "8091" -> "8154" 
-  "8100" -> "8102" 
-  "8102" -> "8099" 
-  "8116" -> "8114" 
-  "8133" -> "8131" 
-  "8139" -> "8137" 
-  "8142" -> "8140" 
-  "8085" -> "8084" 
-  "8086" -> "8088" 
-  "8088" -> "8085" 
-  "8069" -> "8075" 
+digraph "SetDoubleField" {  
+"8230" [label = <(SET_PRIMITIVE_FIELD,SET_PRIMITIVE_FIELD(Double, obj, v))<SUB>1528</SUB>> ]
+"8262" [label = <(soa,ScopedObjectAccess)<SUB>1528</SUB>> ]
+"8265" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1528</SUB>> ]
+"8274" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, obj, JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Double, obj, v)&gt;(v)))<SUB>1528</SUB>> ]
+"8282" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1528</SUB>> ]
+"8299" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetDouble &lt; false &gt; (o, v))<SUB>1528</SUB>> ]
+"8248" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1528</SUB>> ]
+"8267" [label = <(&lt;operator&gt;.greaterThan,jni::DecodeArtField &lt; kEnableIndexIds &gt; (fid))<SUB>1528</SUB>> ]
+"8277" [label = <(SET_PRIMITIVE_FIELD(Double, obj, v),JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Double, obj, v)&gt;(v))<SUB>1528</SUB>> ]
+"8283" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1528</SUB>> ]
+"8290" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1528</SUB>> ]
+"8300" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetDouble &lt; false)<SUB>1528</SUB>> ]
+"8305" [label = <(&lt;operator&gt;.bracketedPrimary,(o, v))<SUB>1528</SUB>> ]
+"8249" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1528</SUB>> ]
+"8253" [label = <(SET_PRIMITIVE_FIELD(Double, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1528</SUB>> ]
+"8260" [label = <(RETURN,SET_PRIMITIVE_FIELD(Double, obj, v),SET_PRIMITIVE_FIELD(Double, obj, v))<SUB>1528</SUB>> ]
+"8268" [label = <(&lt;operator&gt;.lessThan,jni::DecodeArtField &lt; kEnableIndexIds)<SUB>1528</SUB>> ]
+"8278" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Double, obj, v))<SUB>1528</SUB>> ]
+"8284" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1528</SUB>> ]
+"8291" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1528</SUB>> ]
+"8301" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetDouble)<SUB>1528</SUB>> ]
+"8306" [label = <(&lt;operator&gt;.expressionList,o, v)<SUB>1528</SUB>> ]
+"8234" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1528</SUB>> ]
+"8254" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1528</SUB>> ]
+"8269" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Double, obj, v))<SUB>1528</SUB>> ]
+"8280" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Double, obj, v)&gt;,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Double, obj, v)&gt;)<SUB>1528</SUB>> ]
+"8286" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Double, obj, v))<SUB>1528</SUB>> ]
+"8292" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1528</SUB>> ]
+"8295" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Double, obj, v))<SUB>1528</SUB>> ]
+"8303" [label = <(FIELD_IDENTIFIER,SetDouble,SetDouble)<SUB>1528</SUB>> ]
+"8235" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1528</SUB>> ]
+"8239" [label = <(SET_PRIMITIVE_FIELD(Double, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1528</SUB>> ]
+"8246" [label = <(RETURN,SET_PRIMITIVE_FIELD(Double, obj, v),SET_PRIMITIVE_FIELD(Double, obj, v))<SUB>1528</SUB>> ]
+"8255" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1528</SUB>> ]
+"8257" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1528</SUB>> ]
+"8271" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1528</SUB>> ]
+"8288" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1528</SUB>> ]
+"8294" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1528</SUB>> ]
+"8297" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1528</SUB>> ]
+"8240" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1528</SUB>> ]
+"8241" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1528</SUB>> ]
+"8243" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1528</SUB>> ]
+"8224" [label = <(METHOD,SetDoubleField)<SUB>1527</SUB>> ]
+"8309" [label = <(METHOD_RETURN,void)<SUB>1527</SUB>> ]
+  "8230" -> "8235" 
+  "8230" -> "8249" 
+  "8262" -> "8271" 
+  "8265" -> "8280" 
+  "8274" -> "8288" 
+  "8282" -> "8303" 
+  "8299" -> "8309" 
+  "8248" -> "8255" 
+  "8248" -> "8262" 
+  "8267" -> "8265" 
+  "8277" -> "8274" 
+  "8283" -> "8294" 
+  "8290" -> "8282" 
+  "8300" -> "8306" 
+  "8305" -> "8299" 
+  "8249" -> "8248" 
+  "8253" -> "8260" 
+  "8260" -> "8309" 
+  "8268" -> "8267" 
+  "8278" -> "8277" 
+  "8284" -> "8283" 
+  "8291" -> "8290" 
+  "8301" -> "8300" 
+  "8306" -> "8305" 
+  "8234" -> "8241" 
+  "8234" -> "8249" 
+  "8254" -> "8253" 
+  "8269" -> "8268" 
+  "8280" -> "8278" 
+  "8286" -> "8284" 
+  "8292" -> "8297" 
+  "8295" -> "8291" 
+  "8303" -> "8301" 
+  "8235" -> "8234" 
+  "8239" -> "8246" 
+  "8246" -> "8309" 
+  "8255" -> "8257" 
+  "8257" -> "8254" 
+  "8271" -> "8269" 
+  "8288" -> "8286" 
+  "8294" -> "8292" 
+  "8297" -> "8295" 
+  "8240" -> "8239" 
+  "8241" -> "8243" 
+  "8243" -> "8240" 
+  "8224" -> "8230" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/144-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/144-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/144-cfg.dot	2023-06-07 19:35:01.487387161 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/144-cfg.dot	2023-06-07 19:35:08.027386516 +0330
@@ -1,92 +1,92 @@
-digraph "SetByteField" {  
-"8162" [label = <(SET_PRIMITIVE_FIELD,SET_PRIMITIVE_FIELD(Byte, obj, v))<SUB>1594</SUB>> ]
-"8194" [label = <(soa,ScopedObjectAccess)<SUB>1594</SUB>> ]
-"8197" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1594</SUB>> ]
-"8206" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, obj, JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Byte, obj, v)&gt;(v)))<SUB>1594</SUB>> ]
-"8214" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1594</SUB>> ]
-"8231" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetByte &lt; false &gt; (o, v))<SUB>1594</SUB>> ]
-"8180" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1594</SUB>> ]
-"8199" [label = <(&lt;operator&gt;.greaterThan,jni::DecodeArtField &lt; kEnableIndexIds &gt; (fid))<SUB>1594</SUB>> ]
-"8209" [label = <(SET_PRIMITIVE_FIELD(Byte, obj, v),JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Byte, obj, v)&gt;(v))<SUB>1594</SUB>> ]
-"8215" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1594</SUB>> ]
-"8222" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1594</SUB>> ]
-"8232" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetByte &lt; false)<SUB>1594</SUB>> ]
-"8237" [label = <(&lt;operator&gt;.bracketedPrimary,(o, v))<SUB>1594</SUB>> ]
-"8181" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1594</SUB>> ]
-"8185" [label = <(SET_PRIMITIVE_FIELD(Byte, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1594</SUB>> ]
-"8192" [label = <(RETURN,SET_PRIMITIVE_FIELD(Byte, obj, v),SET_PRIMITIVE_FIELD(Byte, obj, v))<SUB>1594</SUB>> ]
-"8200" [label = <(&lt;operator&gt;.lessThan,jni::DecodeArtField &lt; kEnableIndexIds)<SUB>1594</SUB>> ]
-"8210" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Byte, obj, v))<SUB>1594</SUB>> ]
-"8216" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1594</SUB>> ]
-"8223" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1594</SUB>> ]
-"8233" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetByte)<SUB>1594</SUB>> ]
-"8238" [label = <(&lt;operator&gt;.expressionList,o, v)<SUB>1594</SUB>> ]
-"8166" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1594</SUB>> ]
-"8186" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1594</SUB>> ]
-"8201" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Byte, obj, v))<SUB>1594</SUB>> ]
-"8212" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Byte, obj, v)&gt;,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Byte, obj, v)&gt;)<SUB>1594</SUB>> ]
-"8218" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Byte, obj, v))<SUB>1594</SUB>> ]
-"8224" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1594</SUB>> ]
-"8227" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Byte, obj, v))<SUB>1594</SUB>> ]
-"8235" [label = <(FIELD_IDENTIFIER,SetByte,SetByte)<SUB>1594</SUB>> ]
-"8167" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1594</SUB>> ]
-"8171" [label = <(SET_PRIMITIVE_FIELD(Byte, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1594</SUB>> ]
-"8178" [label = <(RETURN,SET_PRIMITIVE_FIELD(Byte, obj, v),SET_PRIMITIVE_FIELD(Byte, obj, v))<SUB>1594</SUB>> ]
-"8187" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1594</SUB>> ]
-"8189" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1594</SUB>> ]
-"8203" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1594</SUB>> ]
-"8220" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1594</SUB>> ]
-"8226" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1594</SUB>> ]
-"8229" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1594</SUB>> ]
-"8172" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1594</SUB>> ]
-"8173" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1594</SUB>> ]
-"8175" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1594</SUB>> ]
-"8156" [label = <(METHOD,SetByteField)<SUB>1593</SUB>> ]
-"8241" [label = <(METHOD_RETURN,void)<SUB>1593</SUB>> ]
-  "8162" -> "8167" 
-  "8162" -> "8181" 
-  "8194" -> "8203" 
-  "8197" -> "8212" 
-  "8206" -> "8220" 
-  "8214" -> "8235" 
-  "8231" -> "8241" 
-  "8180" -> "8187" 
-  "8180" -> "8194" 
-  "8199" -> "8197" 
-  "8209" -> "8206" 
-  "8215" -> "8226" 
-  "8222" -> "8214" 
-  "8232" -> "8238" 
-  "8237" -> "8231" 
-  "8181" -> "8180" 
-  "8185" -> "8192" 
-  "8192" -> "8241" 
-  "8200" -> "8199" 
-  "8210" -> "8209" 
-  "8216" -> "8215" 
-  "8223" -> "8222" 
-  "8233" -> "8232" 
-  "8238" -> "8237" 
-  "8166" -> "8173" 
-  "8166" -> "8181" 
-  "8186" -> "8185" 
-  "8201" -> "8200" 
-  "8212" -> "8210" 
-  "8218" -> "8216" 
-  "8224" -> "8229" 
-  "8227" -> "8223" 
-  "8235" -> "8233" 
-  "8167" -> "8166" 
-  "8171" -> "8178" 
-  "8178" -> "8241" 
-  "8187" -> "8189" 
-  "8189" -> "8186" 
-  "8203" -> "8201" 
-  "8220" -> "8218" 
-  "8226" -> "8224" 
-  "8229" -> "8227" 
-  "8172" -> "8171" 
-  "8173" -> "8175" 
-  "8175" -> "8172" 
-  "8156" -> "8162" 
+digraph "SetIntField" {  
+"8317" [label = <(SET_PRIMITIVE_FIELD,SET_PRIMITIVE_FIELD(Int, obj, v))<SUB>1532</SUB>> ]
+"8349" [label = <(soa,ScopedObjectAccess)<SUB>1532</SUB>> ]
+"8352" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1532</SUB>> ]
+"8361" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, obj, JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Int, obj, v)&gt;(v)))<SUB>1532</SUB>> ]
+"8369" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1532</SUB>> ]
+"8386" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetInt &lt; false &gt; (o, v))<SUB>1532</SUB>> ]
+"8335" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1532</SUB>> ]
+"8354" [label = <(&lt;operator&gt;.greaterThan,jni::DecodeArtField &lt; kEnableIndexIds &gt; (fid))<SUB>1532</SUB>> ]
+"8364" [label = <(SET_PRIMITIVE_FIELD(Int, obj, v),JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Int, obj, v)&gt;(v))<SUB>1532</SUB>> ]
+"8370" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1532</SUB>> ]
+"8377" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1532</SUB>> ]
+"8387" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetInt &lt; false)<SUB>1532</SUB>> ]
+"8392" [label = <(&lt;operator&gt;.bracketedPrimary,(o, v))<SUB>1532</SUB>> ]
+"8336" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1532</SUB>> ]
+"8340" [label = <(SET_PRIMITIVE_FIELD(Int, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1532</SUB>> ]
+"8347" [label = <(RETURN,SET_PRIMITIVE_FIELD(Int, obj, v),SET_PRIMITIVE_FIELD(Int, obj, v))<SUB>1532</SUB>> ]
+"8355" [label = <(&lt;operator&gt;.lessThan,jni::DecodeArtField &lt; kEnableIndexIds)<SUB>1532</SUB>> ]
+"8365" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Int, obj, v))<SUB>1532</SUB>> ]
+"8371" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1532</SUB>> ]
+"8378" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1532</SUB>> ]
+"8388" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetInt)<SUB>1532</SUB>> ]
+"8393" [label = <(&lt;operator&gt;.expressionList,o, v)<SUB>1532</SUB>> ]
+"8321" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1532</SUB>> ]
+"8341" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1532</SUB>> ]
+"8356" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Int, obj, v))<SUB>1532</SUB>> ]
+"8367" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Int, obj, v)&gt;,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Int, obj, v)&gt;)<SUB>1532</SUB>> ]
+"8373" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Int, obj, v))<SUB>1532</SUB>> ]
+"8379" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1532</SUB>> ]
+"8382" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Int, obj, v))<SUB>1532</SUB>> ]
+"8390" [label = <(FIELD_IDENTIFIER,SetInt,SetInt)<SUB>1532</SUB>> ]
+"8322" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1532</SUB>> ]
+"8326" [label = <(SET_PRIMITIVE_FIELD(Int, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1532</SUB>> ]
+"8333" [label = <(RETURN,SET_PRIMITIVE_FIELD(Int, obj, v),SET_PRIMITIVE_FIELD(Int, obj, v))<SUB>1532</SUB>> ]
+"8342" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1532</SUB>> ]
+"8344" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1532</SUB>> ]
+"8358" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1532</SUB>> ]
+"8375" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1532</SUB>> ]
+"8381" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1532</SUB>> ]
+"8384" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1532</SUB>> ]
+"8327" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1532</SUB>> ]
+"8328" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1532</SUB>> ]
+"8330" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1532</SUB>> ]
+"8311" [label = <(METHOD,SetIntField)<SUB>1531</SUB>> ]
+"8396" [label = <(METHOD_RETURN,void)<SUB>1531</SUB>> ]
+  "8317" -> "8322" 
+  "8317" -> "8336" 
+  "8349" -> "8358" 
+  "8352" -> "8367" 
+  "8361" -> "8375" 
+  "8369" -> "8390" 
+  "8386" -> "8396" 
+  "8335" -> "8342" 
+  "8335" -> "8349" 
+  "8354" -> "8352" 
+  "8364" -> "8361" 
+  "8370" -> "8381" 
+  "8377" -> "8369" 
+  "8387" -> "8393" 
+  "8392" -> "8386" 
+  "8336" -> "8335" 
+  "8340" -> "8347" 
+  "8347" -> "8396" 
+  "8355" -> "8354" 
+  "8365" -> "8364" 
+  "8371" -> "8370" 
+  "8378" -> "8377" 
+  "8388" -> "8387" 
+  "8393" -> "8392" 
+  "8321" -> "8328" 
+  "8321" -> "8336" 
+  "8341" -> "8340" 
+  "8356" -> "8355" 
+  "8367" -> "8365" 
+  "8373" -> "8371" 
+  "8379" -> "8384" 
+  "8382" -> "8378" 
+  "8390" -> "8388" 
+  "8322" -> "8321" 
+  "8326" -> "8333" 
+  "8333" -> "8396" 
+  "8342" -> "8344" 
+  "8344" -> "8341" 
+  "8358" -> "8356" 
+  "8375" -> "8373" 
+  "8381" -> "8379" 
+  "8384" -> "8382" 
+  "8327" -> "8326" 
+  "8328" -> "8330" 
+  "8330" -> "8327" 
+  "8311" -> "8317" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/145-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/145-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/145-cfg.dot	2023-06-07 19:35:01.487387161 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/145-cfg.dot	2023-06-07 19:35:08.027386516 +0330
@@ -1,92 +1,92 @@
-digraph "SetCharField" {  
-"8249" [label = <(SET_PRIMITIVE_FIELD,SET_PRIMITIVE_FIELD(Char, obj, v))<SUB>1598</SUB>> ]
-"8281" [label = <(soa,ScopedObjectAccess)<SUB>1598</SUB>> ]
-"8284" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1598</SUB>> ]
-"8293" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, obj, JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Char, obj, v)&gt;(v)))<SUB>1598</SUB>> ]
-"8301" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1598</SUB>> ]
-"8318" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetChar &lt; false &gt; (o, v))<SUB>1598</SUB>> ]
-"8267" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1598</SUB>> ]
-"8286" [label = <(&lt;operator&gt;.greaterThan,jni::DecodeArtField &lt; kEnableIndexIds &gt; (fid))<SUB>1598</SUB>> ]
-"8296" [label = <(SET_PRIMITIVE_FIELD(Char, obj, v),JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Char, obj, v)&gt;(v))<SUB>1598</SUB>> ]
-"8302" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1598</SUB>> ]
-"8309" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1598</SUB>> ]
-"8319" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetChar &lt; false)<SUB>1598</SUB>> ]
-"8324" [label = <(&lt;operator&gt;.bracketedPrimary,(o, v))<SUB>1598</SUB>> ]
-"8268" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1598</SUB>> ]
-"8272" [label = <(SET_PRIMITIVE_FIELD(Char, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1598</SUB>> ]
-"8279" [label = <(RETURN,SET_PRIMITIVE_FIELD(Char, obj, v),SET_PRIMITIVE_FIELD(Char, obj, v))<SUB>1598</SUB>> ]
-"8287" [label = <(&lt;operator&gt;.lessThan,jni::DecodeArtField &lt; kEnableIndexIds)<SUB>1598</SUB>> ]
-"8297" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Char, obj, v))<SUB>1598</SUB>> ]
-"8303" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1598</SUB>> ]
-"8310" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1598</SUB>> ]
-"8320" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetChar)<SUB>1598</SUB>> ]
-"8325" [label = <(&lt;operator&gt;.expressionList,o, v)<SUB>1598</SUB>> ]
-"8253" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1598</SUB>> ]
-"8273" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1598</SUB>> ]
-"8288" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Char, obj, v))<SUB>1598</SUB>> ]
-"8299" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Char, obj, v)&gt;,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Char, obj, v)&gt;)<SUB>1598</SUB>> ]
-"8305" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Char, obj, v))<SUB>1598</SUB>> ]
-"8311" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1598</SUB>> ]
-"8314" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Char, obj, v))<SUB>1598</SUB>> ]
-"8322" [label = <(FIELD_IDENTIFIER,SetChar,SetChar)<SUB>1598</SUB>> ]
-"8254" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1598</SUB>> ]
-"8258" [label = <(SET_PRIMITIVE_FIELD(Char, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1598</SUB>> ]
-"8265" [label = <(RETURN,SET_PRIMITIVE_FIELD(Char, obj, v),SET_PRIMITIVE_FIELD(Char, obj, v))<SUB>1598</SUB>> ]
-"8274" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1598</SUB>> ]
-"8276" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1598</SUB>> ]
-"8290" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1598</SUB>> ]
-"8307" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1598</SUB>> ]
-"8313" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1598</SUB>> ]
-"8316" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1598</SUB>> ]
-"8259" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1598</SUB>> ]
-"8260" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1598</SUB>> ]
-"8262" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1598</SUB>> ]
-"8243" [label = <(METHOD,SetCharField)<SUB>1597</SUB>> ]
-"8328" [label = <(METHOD_RETURN,void)<SUB>1597</SUB>> ]
-  "8249" -> "8254" 
-  "8249" -> "8268" 
-  "8281" -> "8290" 
-  "8284" -> "8299" 
-  "8293" -> "8307" 
-  "8301" -> "8322" 
-  "8318" -> "8328" 
-  "8267" -> "8274" 
-  "8267" -> "8281" 
-  "8286" -> "8284" 
-  "8296" -> "8293" 
-  "8302" -> "8313" 
-  "8309" -> "8301" 
-  "8319" -> "8325" 
-  "8324" -> "8318" 
-  "8268" -> "8267" 
-  "8272" -> "8279" 
-  "8279" -> "8328" 
-  "8287" -> "8286" 
-  "8297" -> "8296" 
-  "8303" -> "8302" 
-  "8310" -> "8309" 
-  "8320" -> "8319" 
-  "8325" -> "8324" 
-  "8253" -> "8260" 
-  "8253" -> "8268" 
-  "8273" -> "8272" 
-  "8288" -> "8287" 
-  "8299" -> "8297" 
-  "8305" -> "8303" 
-  "8311" -> "8316" 
-  "8314" -> "8310" 
-  "8322" -> "8320" 
-  "8254" -> "8253" 
-  "8258" -> "8265" 
-  "8265" -> "8328" 
-  "8274" -> "8276" 
-  "8276" -> "8273" 
-  "8290" -> "8288" 
-  "8307" -> "8305" 
-  "8313" -> "8311" 
-  "8316" -> "8314" 
-  "8259" -> "8258" 
-  "8260" -> "8262" 
-  "8262" -> "8259" 
-  "8243" -> "8249" 
+digraph "SetLongField" {  
+"8404" [label = <(SET_PRIMITIVE_FIELD,SET_PRIMITIVE_FIELD(Long, obj, v))<SUB>1536</SUB>> ]
+"8436" [label = <(soa,ScopedObjectAccess)<SUB>1536</SUB>> ]
+"8439" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1536</SUB>> ]
+"8448" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, obj, JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Long, obj, v)&gt;(v)))<SUB>1536</SUB>> ]
+"8456" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1536</SUB>> ]
+"8473" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetLong &lt; false &gt; (o, v))<SUB>1536</SUB>> ]
+"8422" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1536</SUB>> ]
+"8441" [label = <(&lt;operator&gt;.greaterThan,jni::DecodeArtField &lt; kEnableIndexIds &gt; (fid))<SUB>1536</SUB>> ]
+"8451" [label = <(SET_PRIMITIVE_FIELD(Long, obj, v),JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Long, obj, v)&gt;(v))<SUB>1536</SUB>> ]
+"8457" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1536</SUB>> ]
+"8464" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1536</SUB>> ]
+"8474" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetLong &lt; false)<SUB>1536</SUB>> ]
+"8479" [label = <(&lt;operator&gt;.bracketedPrimary,(o, v))<SUB>1536</SUB>> ]
+"8423" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1536</SUB>> ]
+"8427" [label = <(SET_PRIMITIVE_FIELD(Long, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1536</SUB>> ]
+"8434" [label = <(RETURN,SET_PRIMITIVE_FIELD(Long, obj, v),SET_PRIMITIVE_FIELD(Long, obj, v))<SUB>1536</SUB>> ]
+"8442" [label = <(&lt;operator&gt;.lessThan,jni::DecodeArtField &lt; kEnableIndexIds)<SUB>1536</SUB>> ]
+"8452" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Long, obj, v))<SUB>1536</SUB>> ]
+"8458" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1536</SUB>> ]
+"8465" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1536</SUB>> ]
+"8475" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetLong)<SUB>1536</SUB>> ]
+"8480" [label = <(&lt;operator&gt;.expressionList,o, v)<SUB>1536</SUB>> ]
+"8408" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1536</SUB>> ]
+"8428" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1536</SUB>> ]
+"8443" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Long, obj, v))<SUB>1536</SUB>> ]
+"8454" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Long, obj, v)&gt;,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Long, obj, v)&gt;)<SUB>1536</SUB>> ]
+"8460" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Long, obj, v))<SUB>1536</SUB>> ]
+"8466" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1536</SUB>> ]
+"8469" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Long, obj, v))<SUB>1536</SUB>> ]
+"8477" [label = <(FIELD_IDENTIFIER,SetLong,SetLong)<SUB>1536</SUB>> ]
+"8409" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1536</SUB>> ]
+"8413" [label = <(SET_PRIMITIVE_FIELD(Long, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1536</SUB>> ]
+"8420" [label = <(RETURN,SET_PRIMITIVE_FIELD(Long, obj, v),SET_PRIMITIVE_FIELD(Long, obj, v))<SUB>1536</SUB>> ]
+"8429" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1536</SUB>> ]
+"8431" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1536</SUB>> ]
+"8445" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1536</SUB>> ]
+"8462" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1536</SUB>> ]
+"8468" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1536</SUB>> ]
+"8471" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1536</SUB>> ]
+"8414" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1536</SUB>> ]
+"8415" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1536</SUB>> ]
+"8417" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1536</SUB>> ]
+"8398" [label = <(METHOD,SetLongField)<SUB>1535</SUB>> ]
+"8483" [label = <(METHOD_RETURN,void)<SUB>1535</SUB>> ]
+  "8404" -> "8409" 
+  "8404" -> "8423" 
+  "8436" -> "8445" 
+  "8439" -> "8454" 
+  "8448" -> "8462" 
+  "8456" -> "8477" 
+  "8473" -> "8483" 
+  "8422" -> "8429" 
+  "8422" -> "8436" 
+  "8441" -> "8439" 
+  "8451" -> "8448" 
+  "8457" -> "8468" 
+  "8464" -> "8456" 
+  "8474" -> "8480" 
+  "8479" -> "8473" 
+  "8423" -> "8422" 
+  "8427" -> "8434" 
+  "8434" -> "8483" 
+  "8442" -> "8441" 
+  "8452" -> "8451" 
+  "8458" -> "8457" 
+  "8465" -> "8464" 
+  "8475" -> "8474" 
+  "8480" -> "8479" 
+  "8408" -> "8415" 
+  "8408" -> "8423" 
+  "8428" -> "8427" 
+  "8443" -> "8442" 
+  "8454" -> "8452" 
+  "8460" -> "8458" 
+  "8466" -> "8471" 
+  "8469" -> "8465" 
+  "8477" -> "8475" 
+  "8409" -> "8408" 
+  "8413" -> "8420" 
+  "8420" -> "8483" 
+  "8429" -> "8431" 
+  "8431" -> "8428" 
+  "8445" -> "8443" 
+  "8462" -> "8460" 
+  "8468" -> "8466" 
+  "8471" -> "8469" 
+  "8414" -> "8413" 
+  "8415" -> "8417" 
+  "8417" -> "8414" 
+  "8398" -> "8404" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/146-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/146-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/146-cfg.dot	2023-06-07 19:35:01.487387161 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/146-cfg.dot	2023-06-07 19:35:08.027386516 +0330
@@ -1,92 +1,92 @@
-digraph "SetFloatField" {  
-"8336" [label = <(SET_PRIMITIVE_FIELD,SET_PRIMITIVE_FIELD(Float, obj, v))<SUB>1602</SUB>> ]
-"8368" [label = <(soa,ScopedObjectAccess)<SUB>1602</SUB>> ]
-"8371" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1602</SUB>> ]
-"8380" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, obj, JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Float, obj, v)&gt;(v)))<SUB>1602</SUB>> ]
-"8388" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1602</SUB>> ]
-"8405" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetFloat &lt; false &gt; (o, v))<SUB>1602</SUB>> ]
-"8354" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1602</SUB>> ]
-"8373" [label = <(&lt;operator&gt;.greaterThan,jni::DecodeArtField &lt; kEnableIndexIds &gt; (fid))<SUB>1602</SUB>> ]
-"8383" [label = <(SET_PRIMITIVE_FIELD(Float, obj, v),JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Float, obj, v)&gt;(v))<SUB>1602</SUB>> ]
-"8389" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1602</SUB>> ]
-"8396" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1602</SUB>> ]
-"8406" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetFloat &lt; false)<SUB>1602</SUB>> ]
-"8411" [label = <(&lt;operator&gt;.bracketedPrimary,(o, v))<SUB>1602</SUB>> ]
-"8355" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1602</SUB>> ]
-"8359" [label = <(SET_PRIMITIVE_FIELD(Float, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1602</SUB>> ]
-"8366" [label = <(RETURN,SET_PRIMITIVE_FIELD(Float, obj, v),SET_PRIMITIVE_FIELD(Float, obj, v))<SUB>1602</SUB>> ]
-"8374" [label = <(&lt;operator&gt;.lessThan,jni::DecodeArtField &lt; kEnableIndexIds)<SUB>1602</SUB>> ]
-"8384" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Float, obj, v))<SUB>1602</SUB>> ]
-"8390" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1602</SUB>> ]
-"8397" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1602</SUB>> ]
-"8407" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetFloat)<SUB>1602</SUB>> ]
-"8412" [label = <(&lt;operator&gt;.expressionList,o, v)<SUB>1602</SUB>> ]
-"8340" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1602</SUB>> ]
-"8360" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1602</SUB>> ]
-"8375" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Float, obj, v))<SUB>1602</SUB>> ]
-"8386" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Float, obj, v)&gt;,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Float, obj, v)&gt;)<SUB>1602</SUB>> ]
-"8392" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Float, obj, v))<SUB>1602</SUB>> ]
-"8398" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1602</SUB>> ]
-"8401" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Float, obj, v))<SUB>1602</SUB>> ]
-"8409" [label = <(FIELD_IDENTIFIER,SetFloat,SetFloat)<SUB>1602</SUB>> ]
-"8341" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1602</SUB>> ]
-"8345" [label = <(SET_PRIMITIVE_FIELD(Float, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1602</SUB>> ]
-"8352" [label = <(RETURN,SET_PRIMITIVE_FIELD(Float, obj, v),SET_PRIMITIVE_FIELD(Float, obj, v))<SUB>1602</SUB>> ]
-"8361" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1602</SUB>> ]
-"8363" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1602</SUB>> ]
-"8377" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1602</SUB>> ]
-"8394" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1602</SUB>> ]
-"8400" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1602</SUB>> ]
-"8403" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1602</SUB>> ]
-"8346" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1602</SUB>> ]
-"8347" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1602</SUB>> ]
-"8349" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1602</SUB>> ]
-"8330" [label = <(METHOD,SetFloatField)<SUB>1601</SUB>> ]
-"8415" [label = <(METHOD_RETURN,void)<SUB>1601</SUB>> ]
-  "8336" -> "8341" 
-  "8336" -> "8355" 
-  "8368" -> "8377" 
-  "8371" -> "8386" 
-  "8380" -> "8394" 
-  "8388" -> "8409" 
-  "8405" -> "8415" 
-  "8354" -> "8361" 
-  "8354" -> "8368" 
-  "8373" -> "8371" 
-  "8383" -> "8380" 
-  "8389" -> "8400" 
-  "8396" -> "8388" 
-  "8406" -> "8412" 
-  "8411" -> "8405" 
-  "8355" -> "8354" 
-  "8359" -> "8366" 
-  "8366" -> "8415" 
-  "8374" -> "8373" 
-  "8384" -> "8383" 
-  "8390" -> "8389" 
-  "8397" -> "8396" 
-  "8407" -> "8406" 
-  "8412" -> "8411" 
-  "8340" -> "8347" 
-  "8340" -> "8355" 
-  "8360" -> "8359" 
-  "8375" -> "8374" 
-  "8386" -> "8384" 
-  "8392" -> "8390" 
-  "8398" -> "8403" 
-  "8401" -> "8397" 
-  "8409" -> "8407" 
-  "8341" -> "8340" 
-  "8345" -> "8352" 
-  "8352" -> "8415" 
-  "8361" -> "8363" 
-  "8363" -> "8360" 
-  "8377" -> "8375" 
-  "8394" -> "8392" 
-  "8400" -> "8398" 
-  "8403" -> "8401" 
-  "8346" -> "8345" 
-  "8347" -> "8349" 
-  "8349" -> "8346" 
-  "8330" -> "8336" 
+digraph "SetShortField" {  
+"8491" [label = <(SET_PRIMITIVE_FIELD,SET_PRIMITIVE_FIELD(Short, obj, v))<SUB>1540</SUB>> ]
+"8523" [label = <(soa,ScopedObjectAccess)<SUB>1540</SUB>> ]
+"8526" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1540</SUB>> ]
+"8535" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, obj, JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Short, obj, v)&gt;(v)))<SUB>1540</SUB>> ]
+"8543" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1540</SUB>> ]
+"8560" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetShort &lt; false &gt; (o, v))<SUB>1540</SUB>> ]
+"8509" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1540</SUB>> ]
+"8528" [label = <(&lt;operator&gt;.greaterThan,jni::DecodeArtField &lt; kEnableIndexIds &gt; (fid))<SUB>1540</SUB>> ]
+"8538" [label = <(SET_PRIMITIVE_FIELD(Short, obj, v),JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Short, obj, v)&gt;(v))<SUB>1540</SUB>> ]
+"8544" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1540</SUB>> ]
+"8551" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1540</SUB>> ]
+"8561" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetShort &lt; false)<SUB>1540</SUB>> ]
+"8566" [label = <(&lt;operator&gt;.bracketedPrimary,(o, v))<SUB>1540</SUB>> ]
+"8510" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1540</SUB>> ]
+"8514" [label = <(SET_PRIMITIVE_FIELD(Short, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1540</SUB>> ]
+"8521" [label = <(RETURN,SET_PRIMITIVE_FIELD(Short, obj, v),SET_PRIMITIVE_FIELD(Short, obj, v))<SUB>1540</SUB>> ]
+"8529" [label = <(&lt;operator&gt;.lessThan,jni::DecodeArtField &lt; kEnableIndexIds)<SUB>1540</SUB>> ]
+"8539" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Short, obj, v))<SUB>1540</SUB>> ]
+"8545" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1540</SUB>> ]
+"8552" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1540</SUB>> ]
+"8562" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetShort)<SUB>1540</SUB>> ]
+"8567" [label = <(&lt;operator&gt;.expressionList,o, v)<SUB>1540</SUB>> ]
+"8495" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1540</SUB>> ]
+"8515" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1540</SUB>> ]
+"8530" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Short, obj, v))<SUB>1540</SUB>> ]
+"8541" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Short, obj, v)&gt;,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Short, obj, v)&gt;)<SUB>1540</SUB>> ]
+"8547" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Short, obj, v))<SUB>1540</SUB>> ]
+"8553" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1540</SUB>> ]
+"8556" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Short, obj, v))<SUB>1540</SUB>> ]
+"8564" [label = <(FIELD_IDENTIFIER,SetShort,SetShort)<SUB>1540</SUB>> ]
+"8496" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1540</SUB>> ]
+"8500" [label = <(SET_PRIMITIVE_FIELD(Short, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1540</SUB>> ]
+"8507" [label = <(RETURN,SET_PRIMITIVE_FIELD(Short, obj, v),SET_PRIMITIVE_FIELD(Short, obj, v))<SUB>1540</SUB>> ]
+"8516" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1540</SUB>> ]
+"8518" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1540</SUB>> ]
+"8532" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1540</SUB>> ]
+"8549" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1540</SUB>> ]
+"8555" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1540</SUB>> ]
+"8558" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1540</SUB>> ]
+"8501" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1540</SUB>> ]
+"8502" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1540</SUB>> ]
+"8504" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1540</SUB>> ]
+"8485" [label = <(METHOD,SetShortField)<SUB>1539</SUB>> ]
+"8570" [label = <(METHOD_RETURN,void)<SUB>1539</SUB>> ]
+  "8491" -> "8496" 
+  "8491" -> "8510" 
+  "8523" -> "8532" 
+  "8526" -> "8541" 
+  "8535" -> "8549" 
+  "8543" -> "8564" 
+  "8560" -> "8570" 
+  "8509" -> "8516" 
+  "8509" -> "8523" 
+  "8528" -> "8526" 
+  "8538" -> "8535" 
+  "8544" -> "8555" 
+  "8551" -> "8543" 
+  "8561" -> "8567" 
+  "8566" -> "8560" 
+  "8510" -> "8509" 
+  "8514" -> "8521" 
+  "8521" -> "8570" 
+  "8529" -> "8528" 
+  "8539" -> "8538" 
+  "8545" -> "8544" 
+  "8552" -> "8551" 
+  "8562" -> "8561" 
+  "8567" -> "8566" 
+  "8495" -> "8502" 
+  "8495" -> "8510" 
+  "8515" -> "8514" 
+  "8530" -> "8529" 
+  "8541" -> "8539" 
+  "8547" -> "8545" 
+  "8553" -> "8558" 
+  "8556" -> "8552" 
+  "8564" -> "8562" 
+  "8496" -> "8495" 
+  "8500" -> "8507" 
+  "8507" -> "8570" 
+  "8516" -> "8518" 
+  "8518" -> "8515" 
+  "8532" -> "8530" 
+  "8549" -> "8547" 
+  "8555" -> "8553" 
+  "8558" -> "8556" 
+  "8501" -> "8500" 
+  "8502" -> "8504" 
+  "8504" -> "8501" 
+  "8485" -> "8491" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/147-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/147-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/147-cfg.dot	2023-06-07 19:35:01.487387161 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/147-cfg.dot	2023-06-07 19:35:08.027386516 +0330
@@ -1,92 +1,61 @@
-digraph "SetDoubleField" {  
-"8423" [label = <(SET_PRIMITIVE_FIELD,SET_PRIMITIVE_FIELD(Double, obj, v))<SUB>1606</SUB>> ]
-"8455" [label = <(soa,ScopedObjectAccess)<SUB>1606</SUB>> ]
-"8458" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1606</SUB>> ]
-"8467" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, obj, JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Double, obj, v)&gt;(v)))<SUB>1606</SUB>> ]
-"8475" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1606</SUB>> ]
-"8492" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetDouble &lt; false &gt; (o, v))<SUB>1606</SUB>> ]
-"8441" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1606</SUB>> ]
-"8460" [label = <(&lt;operator&gt;.greaterThan,jni::DecodeArtField &lt; kEnableIndexIds &gt; (fid))<SUB>1606</SUB>> ]
-"8470" [label = <(SET_PRIMITIVE_FIELD(Double, obj, v),JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Double, obj, v)&gt;(v))<SUB>1606</SUB>> ]
-"8476" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1606</SUB>> ]
-"8483" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1606</SUB>> ]
-"8493" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetDouble &lt; false)<SUB>1606</SUB>> ]
-"8498" [label = <(&lt;operator&gt;.bracketedPrimary,(o, v))<SUB>1606</SUB>> ]
-"8442" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1606</SUB>> ]
-"8446" [label = <(SET_PRIMITIVE_FIELD(Double, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1606</SUB>> ]
-"8453" [label = <(RETURN,SET_PRIMITIVE_FIELD(Double, obj, v),SET_PRIMITIVE_FIELD(Double, obj, v))<SUB>1606</SUB>> ]
-"8461" [label = <(&lt;operator&gt;.lessThan,jni::DecodeArtField &lt; kEnableIndexIds)<SUB>1606</SUB>> ]
-"8471" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Double, obj, v))<SUB>1606</SUB>> ]
-"8477" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1606</SUB>> ]
-"8484" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1606</SUB>> ]
-"8494" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetDouble)<SUB>1606</SUB>> ]
-"8499" [label = <(&lt;operator&gt;.expressionList,o, v)<SUB>1606</SUB>> ]
-"8427" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1606</SUB>> ]
-"8447" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1606</SUB>> ]
-"8462" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Double, obj, v))<SUB>1606</SUB>> ]
-"8473" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Double, obj, v)&gt;,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Double, obj, v)&gt;)<SUB>1606</SUB>> ]
-"8479" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Double, obj, v))<SUB>1606</SUB>> ]
-"8485" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1606</SUB>> ]
-"8488" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Double, obj, v))<SUB>1606</SUB>> ]
-"8496" [label = <(FIELD_IDENTIFIER,SetDouble,SetDouble)<SUB>1606</SUB>> ]
-"8428" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1606</SUB>> ]
-"8432" [label = <(SET_PRIMITIVE_FIELD(Double, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1606</SUB>> ]
-"8439" [label = <(RETURN,SET_PRIMITIVE_FIELD(Double, obj, v),SET_PRIMITIVE_FIELD(Double, obj, v))<SUB>1606</SUB>> ]
-"8448" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1606</SUB>> ]
-"8450" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1606</SUB>> ]
-"8464" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1606</SUB>> ]
-"8481" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1606</SUB>> ]
-"8487" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1606</SUB>> ]
-"8490" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1606</SUB>> ]
-"8433" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1606</SUB>> ]
-"8434" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1606</SUB>> ]
-"8436" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1606</SUB>> ]
-"8417" [label = <(METHOD,SetDoubleField)<SUB>1605</SUB>> ]
-"8502" [label = <(METHOD_RETURN,void)<SUB>1605</SUB>> ]
-  "8423" -> "8428" 
-  "8423" -> "8442" 
-  "8455" -> "8464" 
-  "8458" -> "8473" 
-  "8467" -> "8481" 
-  "8475" -> "8496" 
-  "8492" -> "8502" 
-  "8441" -> "8448" 
-  "8441" -> "8455" 
-  "8460" -> "8458" 
-  "8470" -> "8467" 
-  "8476" -> "8487" 
-  "8483" -> "8475" 
-  "8493" -> "8499" 
-  "8498" -> "8492" 
-  "8442" -> "8441" 
-  "8446" -> "8453" 
-  "8453" -> "8502" 
-  "8461" -> "8460" 
-  "8471" -> "8470" 
-  "8477" -> "8476" 
-  "8484" -> "8483" 
-  "8494" -> "8493" 
-  "8499" -> "8498" 
-  "8427" -> "8434" 
-  "8427" -> "8442" 
-  "8447" -> "8446" 
-  "8462" -> "8461" 
-  "8473" -> "8471" 
-  "8479" -> "8477" 
-  "8485" -> "8490" 
-  "8488" -> "8484" 
-  "8496" -> "8494" 
-  "8428" -> "8427" 
-  "8432" -> "8439" 
-  "8439" -> "8502" 
-  "8448" -> "8450" 
-  "8450" -> "8447" 
-  "8464" -> "8462" 
-  "8481" -> "8479" 
-  "8487" -> "8485" 
-  "8490" -> "8488" 
-  "8433" -> "8432" 
-  "8434" -> "8436" 
-  "8436" -> "8433" 
-  "8417" -> "8423" 
+digraph "SetStaticBooleanField" {  
+"8578" [label = <(SET_STATIC_PRIMITIVE_FIELD,SET_STATIC_PRIMITIVE_FIELD(Boolean, v))<SUB>1544</SUB>> ]
+"8595" [label = <(soa,ScopedObjectAccess)<SUB>1544</SUB>> ]
+"8598" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1544</SUB>> ]
+"8607" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, nullptr, JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Boolean, v)&gt;(v)))<SUB>1544</SUB>> ]
+"8615" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetBoolean &lt; false &gt; (f-&gt;GetDeclaringClass(), v))<SUB>1544</SUB>> ]
+"8600" [label = <(&lt;operator&gt;.greaterThan,jni::DecodeArtField &lt; kEnableIndexIds &gt; (fid))<SUB>1544</SUB>> ]
+"8610" [label = <(SET_STATIC_PRIMITIVE_FIELD(Boolean, v),JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Boolean, v)&gt;(v))<SUB>1544</SUB>> ]
+"8616" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetBoolean &lt; false)<SUB>1544</SUB>> ]
+"8621" [label = <(&lt;operator&gt;.bracketedPrimary,(f-&gt;GetDeclaringClass(), v))<SUB>1544</SUB>> ]
+"8601" [label = <(&lt;operator&gt;.lessThan,jni::DecodeArtField &lt; kEnableIndexIds)<SUB>1544</SUB>> ]
+"8611" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Boolean, v))<SUB>1544</SUB>> ]
+"8617" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetBoolean)<SUB>1544</SUB>> ]
+"8622" [label = <(&lt;operator&gt;.expressionList,f-&gt;GetDeclaringClass(), v)<SUB>1544</SUB>> ]
+"8581" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1544</SUB>> ]
+"8602" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Boolean, v))<SUB>1544</SUB>> ]
+"8613" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Boolean, v)&gt;,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Boolean, v)&gt;)<SUB>1544</SUB>> ]
+"8619" [label = <(FIELD_IDENTIFIER,SetBoolean,SetBoolean)<SUB>1544</SUB>> ]
+"8623" [label = <(SET_STATIC_PRIMITIVE_FIELD(Boolean, v),f-&gt;GetDeclaringClass())<SUB>1544</SUB>> ]
+"8582" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1544</SUB>> ]
+"8586" [label = <(SET_STATIC_PRIMITIVE_FIELD(Boolean, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1544</SUB>> ]
+"8593" [label = <(RETURN,SET_STATIC_PRIMITIVE_FIELD(Boolean, v),SET_STATIC_PRIMITIVE_FIELD(Boolean, v))<SUB>1544</SUB>> ]
+"8604" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1544</SUB>> ]
+"8624" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1544</SUB>> ]
+"8587" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1544</SUB>> ]
+"8626" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1544</SUB>> ]
+"8588" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1544</SUB>> ]
+"8590" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1544</SUB>> ]
+"8572" [label = <(METHOD,SetStaticBooleanField)<SUB>1543</SUB>> ]
+"8628" [label = <(METHOD_RETURN,void)<SUB>1543</SUB>> ]
+  "8578" -> "8582" 
+  "8578" -> "8595" 
+  "8595" -> "8604" 
+  "8598" -> "8613" 
+  "8607" -> "8619" 
+  "8615" -> "8628" 
+  "8600" -> "8598" 
+  "8610" -> "8607" 
+  "8616" -> "8626" 
+  "8621" -> "8615" 
+  "8601" -> "8600" 
+  "8611" -> "8610" 
+  "8617" -> "8616" 
+  "8622" -> "8621" 
+  "8581" -> "8588" 
+  "8581" -> "8595" 
+  "8602" -> "8601" 
+  "8613" -> "8611" 
+  "8619" -> "8617" 
+  "8623" -> "8622" 
+  "8582" -> "8581" 
+  "8586" -> "8593" 
+  "8593" -> "8628" 
+  "8604" -> "8602" 
+  "8624" -> "8623" 
+  "8587" -> "8586" 
+  "8626" -> "8624" 
+  "8588" -> "8590" 
+  "8590" -> "8587" 
+  "8572" -> "8578" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/148-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/148-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/148-cfg.dot	2023-06-07 19:35:01.487387161 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/148-cfg.dot	2023-06-07 19:35:08.027386516 +0330
@@ -1,92 +1,61 @@
-digraph "SetIntField" {  
-"8510" [label = <(SET_PRIMITIVE_FIELD,SET_PRIMITIVE_FIELD(Int, obj, v))<SUB>1610</SUB>> ]
-"8542" [label = <(soa,ScopedObjectAccess)<SUB>1610</SUB>> ]
-"8545" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1610</SUB>> ]
-"8554" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, obj, JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Int, obj, v)&gt;(v)))<SUB>1610</SUB>> ]
-"8562" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1610</SUB>> ]
-"8579" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetInt &lt; false &gt; (o, v))<SUB>1610</SUB>> ]
-"8528" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1610</SUB>> ]
-"8547" [label = <(&lt;operator&gt;.greaterThan,jni::DecodeArtField &lt; kEnableIndexIds &gt; (fid))<SUB>1610</SUB>> ]
-"8557" [label = <(SET_PRIMITIVE_FIELD(Int, obj, v),JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Int, obj, v)&gt;(v))<SUB>1610</SUB>> ]
-"8563" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1610</SUB>> ]
-"8570" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1610</SUB>> ]
-"8580" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetInt &lt; false)<SUB>1610</SUB>> ]
-"8585" [label = <(&lt;operator&gt;.bracketedPrimary,(o, v))<SUB>1610</SUB>> ]
-"8529" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1610</SUB>> ]
-"8533" [label = <(SET_PRIMITIVE_FIELD(Int, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1610</SUB>> ]
-"8540" [label = <(RETURN,SET_PRIMITIVE_FIELD(Int, obj, v),SET_PRIMITIVE_FIELD(Int, obj, v))<SUB>1610</SUB>> ]
-"8548" [label = <(&lt;operator&gt;.lessThan,jni::DecodeArtField &lt; kEnableIndexIds)<SUB>1610</SUB>> ]
-"8558" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Int, obj, v))<SUB>1610</SUB>> ]
-"8564" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1610</SUB>> ]
-"8571" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1610</SUB>> ]
-"8581" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetInt)<SUB>1610</SUB>> ]
-"8586" [label = <(&lt;operator&gt;.expressionList,o, v)<SUB>1610</SUB>> ]
-"8514" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1610</SUB>> ]
-"8534" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1610</SUB>> ]
-"8549" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Int, obj, v))<SUB>1610</SUB>> ]
-"8560" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Int, obj, v)&gt;,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Int, obj, v)&gt;)<SUB>1610</SUB>> ]
-"8566" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Int, obj, v))<SUB>1610</SUB>> ]
-"8572" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1610</SUB>> ]
-"8575" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Int, obj, v))<SUB>1610</SUB>> ]
-"8583" [label = <(FIELD_IDENTIFIER,SetInt,SetInt)<SUB>1610</SUB>> ]
-"8515" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1610</SUB>> ]
-"8519" [label = <(SET_PRIMITIVE_FIELD(Int, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1610</SUB>> ]
-"8526" [label = <(RETURN,SET_PRIMITIVE_FIELD(Int, obj, v),SET_PRIMITIVE_FIELD(Int, obj, v))<SUB>1610</SUB>> ]
-"8535" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1610</SUB>> ]
-"8537" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1610</SUB>> ]
-"8551" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1610</SUB>> ]
-"8568" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1610</SUB>> ]
-"8574" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1610</SUB>> ]
-"8577" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1610</SUB>> ]
-"8520" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1610</SUB>> ]
-"8521" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1610</SUB>> ]
-"8523" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1610</SUB>> ]
-"8504" [label = <(METHOD,SetIntField)<SUB>1609</SUB>> ]
-"8589" [label = <(METHOD_RETURN,void)<SUB>1609</SUB>> ]
-  "8510" -> "8515" 
-  "8510" -> "8529" 
-  "8542" -> "8551" 
-  "8545" -> "8560" 
-  "8554" -> "8568" 
-  "8562" -> "8583" 
-  "8579" -> "8589" 
-  "8528" -> "8535" 
-  "8528" -> "8542" 
-  "8547" -> "8545" 
-  "8557" -> "8554" 
-  "8563" -> "8574" 
-  "8570" -> "8562" 
-  "8580" -> "8586" 
-  "8585" -> "8579" 
-  "8529" -> "8528" 
-  "8533" -> "8540" 
-  "8540" -> "8589" 
-  "8548" -> "8547" 
-  "8558" -> "8557" 
-  "8564" -> "8563" 
-  "8571" -> "8570" 
-  "8581" -> "8580" 
-  "8586" -> "8585" 
-  "8514" -> "8521" 
-  "8514" -> "8529" 
-  "8534" -> "8533" 
-  "8549" -> "8548" 
-  "8560" -> "8558" 
-  "8566" -> "8564" 
-  "8572" -> "8577" 
-  "8575" -> "8571" 
-  "8583" -> "8581" 
-  "8515" -> "8514" 
-  "8519" -> "8526" 
-  "8526" -> "8589" 
-  "8535" -> "8537" 
-  "8537" -> "8534" 
-  "8551" -> "8549" 
-  "8568" -> "8566" 
-  "8574" -> "8572" 
-  "8577" -> "8575" 
-  "8520" -> "8519" 
-  "8521" -> "8523" 
-  "8523" -> "8520" 
-  "8504" -> "8510" 
+digraph "SetStaticByteField" {  
+"8636" [label = <(SET_STATIC_PRIMITIVE_FIELD,SET_STATIC_PRIMITIVE_FIELD(Byte, v))<SUB>1548</SUB>> ]
+"8653" [label = <(soa,ScopedObjectAccess)<SUB>1548</SUB>> ]
+"8656" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1548</SUB>> ]
+"8665" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, nullptr, JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Byte, v)&gt;(v)))<SUB>1548</SUB>> ]
+"8673" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetByte &lt; false &gt; (f-&gt;GetDeclaringClass(), v))<SUB>1548</SUB>> ]
+"8658" [label = <(&lt;operator&gt;.greaterThan,jni::DecodeArtField &lt; kEnableIndexIds &gt; (fid))<SUB>1548</SUB>> ]
+"8668" [label = <(SET_STATIC_PRIMITIVE_FIELD(Byte, v),JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Byte, v)&gt;(v))<SUB>1548</SUB>> ]
+"8674" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetByte &lt; false)<SUB>1548</SUB>> ]
+"8679" [label = <(&lt;operator&gt;.bracketedPrimary,(f-&gt;GetDeclaringClass(), v))<SUB>1548</SUB>> ]
+"8659" [label = <(&lt;operator&gt;.lessThan,jni::DecodeArtField &lt; kEnableIndexIds)<SUB>1548</SUB>> ]
+"8669" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Byte, v))<SUB>1548</SUB>> ]
+"8675" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetByte)<SUB>1548</SUB>> ]
+"8680" [label = <(&lt;operator&gt;.expressionList,f-&gt;GetDeclaringClass(), v)<SUB>1548</SUB>> ]
+"8639" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1548</SUB>> ]
+"8660" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Byte, v))<SUB>1548</SUB>> ]
+"8671" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Byte, v)&gt;,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Byte, v)&gt;)<SUB>1548</SUB>> ]
+"8677" [label = <(FIELD_IDENTIFIER,SetByte,SetByte)<SUB>1548</SUB>> ]
+"8681" [label = <(SET_STATIC_PRIMITIVE_FIELD(Byte, v),f-&gt;GetDeclaringClass())<SUB>1548</SUB>> ]
+"8640" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1548</SUB>> ]
+"8644" [label = <(SET_STATIC_PRIMITIVE_FIELD(Byte, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1548</SUB>> ]
+"8651" [label = <(RETURN,SET_STATIC_PRIMITIVE_FIELD(Byte, v),SET_STATIC_PRIMITIVE_FIELD(Byte, v))<SUB>1548</SUB>> ]
+"8662" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1548</SUB>> ]
+"8682" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1548</SUB>> ]
+"8645" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1548</SUB>> ]
+"8684" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1548</SUB>> ]
+"8646" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1548</SUB>> ]
+"8648" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1548</SUB>> ]
+"8630" [label = <(METHOD,SetStaticByteField)<SUB>1547</SUB>> ]
+"8686" [label = <(METHOD_RETURN,void)<SUB>1547</SUB>> ]
+  "8636" -> "8640" 
+  "8636" -> "8653" 
+  "8653" -> "8662" 
+  "8656" -> "8671" 
+  "8665" -> "8677" 
+  "8673" -> "8686" 
+  "8658" -> "8656" 
+  "8668" -> "8665" 
+  "8674" -> "8684" 
+  "8679" -> "8673" 
+  "8659" -> "8658" 
+  "8669" -> "8668" 
+  "8675" -> "8674" 
+  "8680" -> "8679" 
+  "8639" -> "8646" 
+  "8639" -> "8653" 
+  "8660" -> "8659" 
+  "8671" -> "8669" 
+  "8677" -> "8675" 
+  "8681" -> "8680" 
+  "8640" -> "8639" 
+  "8644" -> "8651" 
+  "8651" -> "8686" 
+  "8662" -> "8660" 
+  "8682" -> "8681" 
+  "8645" -> "8644" 
+  "8684" -> "8682" 
+  "8646" -> "8648" 
+  "8648" -> "8645" 
+  "8630" -> "8636" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/149-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/149-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/149-cfg.dot	2023-06-07 19:35:01.487387161 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/149-cfg.dot	2023-06-07 19:35:08.027386516 +0330
@@ -1,92 +1,61 @@
-digraph "SetLongField" {  
-"8597" [label = <(SET_PRIMITIVE_FIELD,SET_PRIMITIVE_FIELD(Long, obj, v))<SUB>1614</SUB>> ]
-"8629" [label = <(soa,ScopedObjectAccess)<SUB>1614</SUB>> ]
-"8632" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1614</SUB>> ]
-"8641" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, obj, JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Long, obj, v)&gt;(v)))<SUB>1614</SUB>> ]
-"8649" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1614</SUB>> ]
-"8666" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetLong &lt; false &gt; (o, v))<SUB>1614</SUB>> ]
-"8615" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1614</SUB>> ]
-"8634" [label = <(&lt;operator&gt;.greaterThan,jni::DecodeArtField &lt; kEnableIndexIds &gt; (fid))<SUB>1614</SUB>> ]
-"8644" [label = <(SET_PRIMITIVE_FIELD(Long, obj, v),JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Long, obj, v)&gt;(v))<SUB>1614</SUB>> ]
-"8650" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1614</SUB>> ]
-"8657" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1614</SUB>> ]
-"8667" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetLong &lt; false)<SUB>1614</SUB>> ]
-"8672" [label = <(&lt;operator&gt;.bracketedPrimary,(o, v))<SUB>1614</SUB>> ]
-"8616" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1614</SUB>> ]
-"8620" [label = <(SET_PRIMITIVE_FIELD(Long, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1614</SUB>> ]
-"8627" [label = <(RETURN,SET_PRIMITIVE_FIELD(Long, obj, v),SET_PRIMITIVE_FIELD(Long, obj, v))<SUB>1614</SUB>> ]
-"8635" [label = <(&lt;operator&gt;.lessThan,jni::DecodeArtField &lt; kEnableIndexIds)<SUB>1614</SUB>> ]
-"8645" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Long, obj, v))<SUB>1614</SUB>> ]
-"8651" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1614</SUB>> ]
-"8658" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1614</SUB>> ]
-"8668" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetLong)<SUB>1614</SUB>> ]
-"8673" [label = <(&lt;operator&gt;.expressionList,o, v)<SUB>1614</SUB>> ]
-"8601" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1614</SUB>> ]
-"8621" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1614</SUB>> ]
-"8636" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Long, obj, v))<SUB>1614</SUB>> ]
-"8647" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Long, obj, v)&gt;,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Long, obj, v)&gt;)<SUB>1614</SUB>> ]
-"8653" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Long, obj, v))<SUB>1614</SUB>> ]
-"8659" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1614</SUB>> ]
-"8662" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Long, obj, v))<SUB>1614</SUB>> ]
-"8670" [label = <(FIELD_IDENTIFIER,SetLong,SetLong)<SUB>1614</SUB>> ]
-"8602" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1614</SUB>> ]
-"8606" [label = <(SET_PRIMITIVE_FIELD(Long, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1614</SUB>> ]
-"8613" [label = <(RETURN,SET_PRIMITIVE_FIELD(Long, obj, v),SET_PRIMITIVE_FIELD(Long, obj, v))<SUB>1614</SUB>> ]
-"8622" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1614</SUB>> ]
-"8624" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1614</SUB>> ]
-"8638" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1614</SUB>> ]
-"8655" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1614</SUB>> ]
-"8661" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1614</SUB>> ]
-"8664" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1614</SUB>> ]
-"8607" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1614</SUB>> ]
-"8608" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1614</SUB>> ]
-"8610" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1614</SUB>> ]
-"8591" [label = <(METHOD,SetLongField)<SUB>1613</SUB>> ]
-"8676" [label = <(METHOD_RETURN,void)<SUB>1613</SUB>> ]
-  "8597" -> "8602" 
-  "8597" -> "8616" 
-  "8629" -> "8638" 
-  "8632" -> "8647" 
-  "8641" -> "8655" 
-  "8649" -> "8670" 
-  "8666" -> "8676" 
-  "8615" -> "8622" 
-  "8615" -> "8629" 
-  "8634" -> "8632" 
-  "8644" -> "8641" 
-  "8650" -> "8661" 
-  "8657" -> "8649" 
-  "8667" -> "8673" 
-  "8672" -> "8666" 
-  "8616" -> "8615" 
-  "8620" -> "8627" 
-  "8627" -> "8676" 
-  "8635" -> "8634" 
-  "8645" -> "8644" 
-  "8651" -> "8650" 
-  "8658" -> "8657" 
-  "8668" -> "8667" 
-  "8673" -> "8672" 
-  "8601" -> "8608" 
-  "8601" -> "8616" 
-  "8621" -> "8620" 
-  "8636" -> "8635" 
-  "8647" -> "8645" 
-  "8653" -> "8651" 
-  "8659" -> "8664" 
-  "8662" -> "8658" 
-  "8670" -> "8668" 
-  "8602" -> "8601" 
-  "8606" -> "8613" 
-  "8613" -> "8676" 
-  "8622" -> "8624" 
-  "8624" -> "8621" 
-  "8638" -> "8636" 
-  "8655" -> "8653" 
-  "8661" -> "8659" 
-  "8664" -> "8662" 
-  "8607" -> "8606" 
-  "8608" -> "8610" 
-  "8610" -> "8607" 
-  "8591" -> "8597" 
+digraph "SetStaticCharField" {  
+"8694" [label = <(SET_STATIC_PRIMITIVE_FIELD,SET_STATIC_PRIMITIVE_FIELD(Char, v))<SUB>1552</SUB>> ]
+"8711" [label = <(soa,ScopedObjectAccess)<SUB>1552</SUB>> ]
+"8714" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1552</SUB>> ]
+"8723" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, nullptr, JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Char, v)&gt;(v)))<SUB>1552</SUB>> ]
+"8731" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetChar &lt; false &gt; (f-&gt;GetDeclaringClass(), v))<SUB>1552</SUB>> ]
+"8716" [label = <(&lt;operator&gt;.greaterThan,jni::DecodeArtField &lt; kEnableIndexIds &gt; (fid))<SUB>1552</SUB>> ]
+"8726" [label = <(SET_STATIC_PRIMITIVE_FIELD(Char, v),JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Char, v)&gt;(v))<SUB>1552</SUB>> ]
+"8732" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetChar &lt; false)<SUB>1552</SUB>> ]
+"8737" [label = <(&lt;operator&gt;.bracketedPrimary,(f-&gt;GetDeclaringClass(), v))<SUB>1552</SUB>> ]
+"8717" [label = <(&lt;operator&gt;.lessThan,jni::DecodeArtField &lt; kEnableIndexIds)<SUB>1552</SUB>> ]
+"8727" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Char, v))<SUB>1552</SUB>> ]
+"8733" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetChar)<SUB>1552</SUB>> ]
+"8738" [label = <(&lt;operator&gt;.expressionList,f-&gt;GetDeclaringClass(), v)<SUB>1552</SUB>> ]
+"8697" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1552</SUB>> ]
+"8718" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Char, v))<SUB>1552</SUB>> ]
+"8729" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Char, v)&gt;,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Char, v)&gt;)<SUB>1552</SUB>> ]
+"8735" [label = <(FIELD_IDENTIFIER,SetChar,SetChar)<SUB>1552</SUB>> ]
+"8739" [label = <(SET_STATIC_PRIMITIVE_FIELD(Char, v),f-&gt;GetDeclaringClass())<SUB>1552</SUB>> ]
+"8698" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1552</SUB>> ]
+"8702" [label = <(SET_STATIC_PRIMITIVE_FIELD(Char, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1552</SUB>> ]
+"8709" [label = <(RETURN,SET_STATIC_PRIMITIVE_FIELD(Char, v),SET_STATIC_PRIMITIVE_FIELD(Char, v))<SUB>1552</SUB>> ]
+"8720" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1552</SUB>> ]
+"8740" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1552</SUB>> ]
+"8703" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1552</SUB>> ]
+"8742" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1552</SUB>> ]
+"8704" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1552</SUB>> ]
+"8706" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1552</SUB>> ]
+"8688" [label = <(METHOD,SetStaticCharField)<SUB>1551</SUB>> ]
+"8744" [label = <(METHOD_RETURN,void)<SUB>1551</SUB>> ]
+  "8694" -> "8698" 
+  "8694" -> "8711" 
+  "8711" -> "8720" 
+  "8714" -> "8729" 
+  "8723" -> "8735" 
+  "8731" -> "8744" 
+  "8716" -> "8714" 
+  "8726" -> "8723" 
+  "8732" -> "8742" 
+  "8737" -> "8731" 
+  "8717" -> "8716" 
+  "8727" -> "8726" 
+  "8733" -> "8732" 
+  "8738" -> "8737" 
+  "8697" -> "8704" 
+  "8697" -> "8711" 
+  "8718" -> "8717" 
+  "8729" -> "8727" 
+  "8735" -> "8733" 
+  "8739" -> "8738" 
+  "8698" -> "8697" 
+  "8702" -> "8709" 
+  "8709" -> "8744" 
+  "8720" -> "8718" 
+  "8740" -> "8739" 
+  "8703" -> "8702" 
+  "8742" -> "8740" 
+  "8704" -> "8706" 
+  "8706" -> "8703" 
+  "8688" -> "8694" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/15-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/15-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/15-cfg.dot	2023-06-07 19:35:01.337387177 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/15-cfg.dot	2023-06-07 19:35:07.907386529 +0330
@@ -1,5 +1,5 @@
-digraph "GetClassLoader" {  
-"373" [label = <(METHOD,GetClassLoader)<SUB>306</SUB>> ]
-"376" [label = <(METHOD_RETURN,ANY)<SUB>306</SUB>> ]
-  "373" -> "376" 
+digraph "ThrowNoSuchMethodError" {  
+"247" [label = <(METHOD,ThrowNoSuchMethodError)<SUB>286</SUB>> ]
+"254" [label = <(METHOD_RETURN,void)<SUB>286</SUB>> ]
+  "247" -> "254" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/150-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/150-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/150-cfg.dot	2023-06-07 19:35:01.497387162 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/150-cfg.dot	2023-06-07 19:35:08.037386514 +0330
@@ -1,92 +1,61 @@
-digraph "SetShortField" {  
-"8684" [label = <(SET_PRIMITIVE_FIELD,SET_PRIMITIVE_FIELD(Short, obj, v))<SUB>1618</SUB>> ]
-"8716" [label = <(soa,ScopedObjectAccess)<SUB>1618</SUB>> ]
-"8719" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1618</SUB>> ]
-"8728" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, obj, JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Short, obj, v)&gt;(v)))<SUB>1618</SUB>> ]
-"8736" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1618</SUB>> ]
-"8753" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetShort &lt; false &gt; (o, v))<SUB>1618</SUB>> ]
-"8702" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1618</SUB>> ]
-"8721" [label = <(&lt;operator&gt;.greaterThan,jni::DecodeArtField &lt; kEnableIndexIds &gt; (fid))<SUB>1618</SUB>> ]
-"8731" [label = <(SET_PRIMITIVE_FIELD(Short, obj, v),JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Short, obj, v)&gt;(v))<SUB>1618</SUB>> ]
-"8737" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1618</SUB>> ]
-"8744" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1618</SUB>> ]
-"8754" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetShort &lt; false)<SUB>1618</SUB>> ]
-"8759" [label = <(&lt;operator&gt;.bracketedPrimary,(o, v))<SUB>1618</SUB>> ]
-"8703" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1618</SUB>> ]
-"8707" [label = <(SET_PRIMITIVE_FIELD(Short, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1618</SUB>> ]
-"8714" [label = <(RETURN,SET_PRIMITIVE_FIELD(Short, obj, v),SET_PRIMITIVE_FIELD(Short, obj, v))<SUB>1618</SUB>> ]
-"8722" [label = <(&lt;operator&gt;.lessThan,jni::DecodeArtField &lt; kEnableIndexIds)<SUB>1618</SUB>> ]
-"8732" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Short, obj, v))<SUB>1618</SUB>> ]
-"8738" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1618</SUB>> ]
-"8745" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1618</SUB>> ]
-"8755" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetShort)<SUB>1618</SUB>> ]
-"8760" [label = <(&lt;operator&gt;.expressionList,o, v)<SUB>1618</SUB>> ]
-"8688" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1618</SUB>> ]
-"8708" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1618</SUB>> ]
-"8723" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Short, obj, v))<SUB>1618</SUB>> ]
-"8734" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Short, obj, v)&gt;,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Short, obj, v)&gt;)<SUB>1618</SUB>> ]
-"8740" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Short, obj, v))<SUB>1618</SUB>> ]
-"8746" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1618</SUB>> ]
-"8749" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Short, obj, v))<SUB>1618</SUB>> ]
-"8757" [label = <(FIELD_IDENTIFIER,SetShort,SetShort)<SUB>1618</SUB>> ]
-"8689" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1618</SUB>> ]
-"8693" [label = <(SET_PRIMITIVE_FIELD(Short, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1618</SUB>> ]
-"8700" [label = <(RETURN,SET_PRIMITIVE_FIELD(Short, obj, v),SET_PRIMITIVE_FIELD(Short, obj, v))<SUB>1618</SUB>> ]
-"8709" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1618</SUB>> ]
-"8711" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1618</SUB>> ]
-"8725" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1618</SUB>> ]
-"8742" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1618</SUB>> ]
-"8748" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1618</SUB>> ]
-"8751" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1618</SUB>> ]
-"8694" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1618</SUB>> ]
-"8695" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1618</SUB>> ]
-"8697" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1618</SUB>> ]
-"8678" [label = <(METHOD,SetShortField)<SUB>1617</SUB>> ]
-"8763" [label = <(METHOD_RETURN,void)<SUB>1617</SUB>> ]
-  "8684" -> "8689" 
-  "8684" -> "8703" 
-  "8716" -> "8725" 
-  "8719" -> "8734" 
-  "8728" -> "8742" 
-  "8736" -> "8757" 
-  "8753" -> "8763" 
-  "8702" -> "8709" 
-  "8702" -> "8716" 
-  "8721" -> "8719" 
-  "8731" -> "8728" 
-  "8737" -> "8748" 
-  "8744" -> "8736" 
-  "8754" -> "8760" 
-  "8759" -> "8753" 
-  "8703" -> "8702" 
-  "8707" -> "8714" 
-  "8714" -> "8763" 
-  "8722" -> "8721" 
-  "8732" -> "8731" 
-  "8738" -> "8737" 
-  "8745" -> "8744" 
-  "8755" -> "8754" 
-  "8760" -> "8759" 
-  "8688" -> "8695" 
-  "8688" -> "8703" 
-  "8708" -> "8707" 
-  "8723" -> "8722" 
-  "8734" -> "8732" 
-  "8740" -> "8738" 
-  "8746" -> "8751" 
-  "8749" -> "8745" 
-  "8757" -> "8755" 
-  "8689" -> "8688" 
-  "8693" -> "8700" 
-  "8700" -> "8763" 
-  "8709" -> "8711" 
-  "8711" -> "8708" 
-  "8725" -> "8723" 
-  "8742" -> "8740" 
-  "8748" -> "8746" 
-  "8751" -> "8749" 
-  "8694" -> "8693" 
-  "8695" -> "8697" 
-  "8697" -> "8694" 
-  "8678" -> "8684" 
+digraph "SetStaticFloatField" {  
+"8752" [label = <(SET_STATIC_PRIMITIVE_FIELD,SET_STATIC_PRIMITIVE_FIELD(Float, v))<SUB>1556</SUB>> ]
+"8769" [label = <(soa,ScopedObjectAccess)<SUB>1556</SUB>> ]
+"8772" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1556</SUB>> ]
+"8781" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, nullptr, JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Float, v)&gt;(v)))<SUB>1556</SUB>> ]
+"8789" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetFloat &lt; false &gt; (f-&gt;GetDeclaringClass(), v))<SUB>1556</SUB>> ]
+"8774" [label = <(&lt;operator&gt;.greaterThan,jni::DecodeArtField &lt; kEnableIndexIds &gt; (fid))<SUB>1556</SUB>> ]
+"8784" [label = <(SET_STATIC_PRIMITIVE_FIELD(Float, v),JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Float, v)&gt;(v))<SUB>1556</SUB>> ]
+"8790" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetFloat &lt; false)<SUB>1556</SUB>> ]
+"8795" [label = <(&lt;operator&gt;.bracketedPrimary,(f-&gt;GetDeclaringClass(), v))<SUB>1556</SUB>> ]
+"8775" [label = <(&lt;operator&gt;.lessThan,jni::DecodeArtField &lt; kEnableIndexIds)<SUB>1556</SUB>> ]
+"8785" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Float, v))<SUB>1556</SUB>> ]
+"8791" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetFloat)<SUB>1556</SUB>> ]
+"8796" [label = <(&lt;operator&gt;.expressionList,f-&gt;GetDeclaringClass(), v)<SUB>1556</SUB>> ]
+"8755" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1556</SUB>> ]
+"8776" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Float, v))<SUB>1556</SUB>> ]
+"8787" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Float, v)&gt;,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Float, v)&gt;)<SUB>1556</SUB>> ]
+"8793" [label = <(FIELD_IDENTIFIER,SetFloat,SetFloat)<SUB>1556</SUB>> ]
+"8797" [label = <(SET_STATIC_PRIMITIVE_FIELD(Float, v),f-&gt;GetDeclaringClass())<SUB>1556</SUB>> ]
+"8756" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1556</SUB>> ]
+"8760" [label = <(SET_STATIC_PRIMITIVE_FIELD(Float, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1556</SUB>> ]
+"8767" [label = <(RETURN,SET_STATIC_PRIMITIVE_FIELD(Float, v),SET_STATIC_PRIMITIVE_FIELD(Float, v))<SUB>1556</SUB>> ]
+"8778" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1556</SUB>> ]
+"8798" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1556</SUB>> ]
+"8761" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1556</SUB>> ]
+"8800" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1556</SUB>> ]
+"8762" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1556</SUB>> ]
+"8764" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1556</SUB>> ]
+"8746" [label = <(METHOD,SetStaticFloatField)<SUB>1555</SUB>> ]
+"8802" [label = <(METHOD_RETURN,void)<SUB>1555</SUB>> ]
+  "8752" -> "8756" 
+  "8752" -> "8769" 
+  "8769" -> "8778" 
+  "8772" -> "8787" 
+  "8781" -> "8793" 
+  "8789" -> "8802" 
+  "8774" -> "8772" 
+  "8784" -> "8781" 
+  "8790" -> "8800" 
+  "8795" -> "8789" 
+  "8775" -> "8774" 
+  "8785" -> "8784" 
+  "8791" -> "8790" 
+  "8796" -> "8795" 
+  "8755" -> "8762" 
+  "8755" -> "8769" 
+  "8776" -> "8775" 
+  "8787" -> "8785" 
+  "8793" -> "8791" 
+  "8797" -> "8796" 
+  "8756" -> "8755" 
+  "8760" -> "8767" 
+  "8767" -> "8802" 
+  "8778" -> "8776" 
+  "8798" -> "8797" 
+  "8761" -> "8760" 
+  "8800" -> "8798" 
+  "8762" -> "8764" 
+  "8764" -> "8761" 
+  "8746" -> "8752" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/151-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/151-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/151-cfg.dot	2023-06-07 19:35:01.497387162 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/151-cfg.dot	2023-06-07 19:35:08.037386514 +0330
@@ -1,61 +1,61 @@
-digraph "SetStaticBooleanField" {  
-"8771" [label = <(SET_STATIC_PRIMITIVE_FIELD,SET_STATIC_PRIMITIVE_FIELD(Boolean, v))<SUB>1622</SUB>> ]
-"8788" [label = <(soa,ScopedObjectAccess)<SUB>1622</SUB>> ]
-"8791" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1622</SUB>> ]
-"8800" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, nullptr, JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Boolean, v)&gt;(v)))<SUB>1622</SUB>> ]
-"8808" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetBoolean &lt; false &gt; (f-&gt;GetDeclaringClass(), v))<SUB>1622</SUB>> ]
-"8793" [label = <(&lt;operator&gt;.greaterThan,jni::DecodeArtField &lt; kEnableIndexIds &gt; (fid))<SUB>1622</SUB>> ]
-"8803" [label = <(SET_STATIC_PRIMITIVE_FIELD(Boolean, v),JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Boolean, v)&gt;(v))<SUB>1622</SUB>> ]
-"8809" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetBoolean &lt; false)<SUB>1622</SUB>> ]
-"8814" [label = <(&lt;operator&gt;.bracketedPrimary,(f-&gt;GetDeclaringClass(), v))<SUB>1622</SUB>> ]
-"8794" [label = <(&lt;operator&gt;.lessThan,jni::DecodeArtField &lt; kEnableIndexIds)<SUB>1622</SUB>> ]
-"8804" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Boolean, v))<SUB>1622</SUB>> ]
-"8810" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetBoolean)<SUB>1622</SUB>> ]
-"8815" [label = <(&lt;operator&gt;.expressionList,f-&gt;GetDeclaringClass(), v)<SUB>1622</SUB>> ]
-"8774" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1622</SUB>> ]
-"8795" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Boolean, v))<SUB>1622</SUB>> ]
-"8806" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Boolean, v)&gt;,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Boolean, v)&gt;)<SUB>1622</SUB>> ]
-"8812" [label = <(FIELD_IDENTIFIER,SetBoolean,SetBoolean)<SUB>1622</SUB>> ]
-"8816" [label = <(SET_STATIC_PRIMITIVE_FIELD(Boolean, v),f-&gt;GetDeclaringClass())<SUB>1622</SUB>> ]
-"8775" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1622</SUB>> ]
-"8779" [label = <(SET_STATIC_PRIMITIVE_FIELD(Boolean, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1622</SUB>> ]
-"8786" [label = <(RETURN,SET_STATIC_PRIMITIVE_FIELD(Boolean, v),SET_STATIC_PRIMITIVE_FIELD(Boolean, v))<SUB>1622</SUB>> ]
-"8797" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1622</SUB>> ]
-"8817" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1622</SUB>> ]
-"8780" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1622</SUB>> ]
-"8819" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1622</SUB>> ]
-"8781" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1622</SUB>> ]
-"8783" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1622</SUB>> ]
-"8765" [label = <(METHOD,SetStaticBooleanField)<SUB>1621</SUB>> ]
-"8821" [label = <(METHOD_RETURN,void)<SUB>1621</SUB>> ]
-  "8771" -> "8775" 
-  "8771" -> "8788" 
-  "8788" -> "8797" 
-  "8791" -> "8806" 
-  "8800" -> "8812" 
-  "8808" -> "8821" 
-  "8793" -> "8791" 
-  "8803" -> "8800" 
-  "8809" -> "8819" 
-  "8814" -> "8808" 
-  "8794" -> "8793" 
-  "8804" -> "8803" 
-  "8810" -> "8809" 
-  "8815" -> "8814" 
-  "8774" -> "8781" 
-  "8774" -> "8788" 
-  "8795" -> "8794" 
-  "8806" -> "8804" 
-  "8812" -> "8810" 
-  "8816" -> "8815" 
-  "8775" -> "8774" 
-  "8779" -> "8786" 
-  "8786" -> "8821" 
-  "8797" -> "8795" 
-  "8817" -> "8816" 
-  "8780" -> "8779" 
-  "8819" -> "8817" 
-  "8781" -> "8783" 
-  "8783" -> "8780" 
-  "8765" -> "8771" 
+digraph "SetStaticDoubleField" {  
+"8810" [label = <(SET_STATIC_PRIMITIVE_FIELD,SET_STATIC_PRIMITIVE_FIELD(Double, v))<SUB>1560</SUB>> ]
+"8827" [label = <(soa,ScopedObjectAccess)<SUB>1560</SUB>> ]
+"8830" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1560</SUB>> ]
+"8839" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, nullptr, JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Double, v)&gt;(v)))<SUB>1560</SUB>> ]
+"8847" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetDouble &lt; false &gt; (f-&gt;GetDeclaringClass(), v))<SUB>1560</SUB>> ]
+"8832" [label = <(&lt;operator&gt;.greaterThan,jni::DecodeArtField &lt; kEnableIndexIds &gt; (fid))<SUB>1560</SUB>> ]
+"8842" [label = <(SET_STATIC_PRIMITIVE_FIELD(Double, v),JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Double, v)&gt;(v))<SUB>1560</SUB>> ]
+"8848" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetDouble &lt; false)<SUB>1560</SUB>> ]
+"8853" [label = <(&lt;operator&gt;.bracketedPrimary,(f-&gt;GetDeclaringClass(), v))<SUB>1560</SUB>> ]
+"8833" [label = <(&lt;operator&gt;.lessThan,jni::DecodeArtField &lt; kEnableIndexIds)<SUB>1560</SUB>> ]
+"8843" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Double, v))<SUB>1560</SUB>> ]
+"8849" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetDouble)<SUB>1560</SUB>> ]
+"8854" [label = <(&lt;operator&gt;.expressionList,f-&gt;GetDeclaringClass(), v)<SUB>1560</SUB>> ]
+"8813" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1560</SUB>> ]
+"8834" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Double, v))<SUB>1560</SUB>> ]
+"8845" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Double, v)&gt;,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Double, v)&gt;)<SUB>1560</SUB>> ]
+"8851" [label = <(FIELD_IDENTIFIER,SetDouble,SetDouble)<SUB>1560</SUB>> ]
+"8855" [label = <(SET_STATIC_PRIMITIVE_FIELD(Double, v),f-&gt;GetDeclaringClass())<SUB>1560</SUB>> ]
+"8814" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1560</SUB>> ]
+"8818" [label = <(SET_STATIC_PRIMITIVE_FIELD(Double, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1560</SUB>> ]
+"8825" [label = <(RETURN,SET_STATIC_PRIMITIVE_FIELD(Double, v),SET_STATIC_PRIMITIVE_FIELD(Double, v))<SUB>1560</SUB>> ]
+"8836" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1560</SUB>> ]
+"8856" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1560</SUB>> ]
+"8819" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1560</SUB>> ]
+"8858" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1560</SUB>> ]
+"8820" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1560</SUB>> ]
+"8822" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1560</SUB>> ]
+"8804" [label = <(METHOD,SetStaticDoubleField)<SUB>1559</SUB>> ]
+"8860" [label = <(METHOD_RETURN,void)<SUB>1559</SUB>> ]
+  "8810" -> "8814" 
+  "8810" -> "8827" 
+  "8827" -> "8836" 
+  "8830" -> "8845" 
+  "8839" -> "8851" 
+  "8847" -> "8860" 
+  "8832" -> "8830" 
+  "8842" -> "8839" 
+  "8848" -> "8858" 
+  "8853" -> "8847" 
+  "8833" -> "8832" 
+  "8843" -> "8842" 
+  "8849" -> "8848" 
+  "8854" -> "8853" 
+  "8813" -> "8820" 
+  "8813" -> "8827" 
+  "8834" -> "8833" 
+  "8845" -> "8843" 
+  "8851" -> "8849" 
+  "8855" -> "8854" 
+  "8814" -> "8813" 
+  "8818" -> "8825" 
+  "8825" -> "8860" 
+  "8836" -> "8834" 
+  "8856" -> "8855" 
+  "8819" -> "8818" 
+  "8858" -> "8856" 
+  "8820" -> "8822" 
+  "8822" -> "8819" 
+  "8804" -> "8810" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/152-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/152-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/152-cfg.dot	2023-06-07 19:35:01.497387162 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/152-cfg.dot	2023-06-07 19:35:08.037386514 +0330
@@ -1,61 +1,61 @@
-digraph "SetStaticByteField" {  
-"8829" [label = <(SET_STATIC_PRIMITIVE_FIELD,SET_STATIC_PRIMITIVE_FIELD(Byte, v))<SUB>1626</SUB>> ]
-"8846" [label = <(soa,ScopedObjectAccess)<SUB>1626</SUB>> ]
-"8849" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1626</SUB>> ]
-"8858" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, nullptr, JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Byte, v)&gt;(v)))<SUB>1626</SUB>> ]
-"8866" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetByte &lt; false &gt; (f-&gt;GetDeclaringClass(), v))<SUB>1626</SUB>> ]
-"8851" [label = <(&lt;operator&gt;.greaterThan,jni::DecodeArtField &lt; kEnableIndexIds &gt; (fid))<SUB>1626</SUB>> ]
-"8861" [label = <(SET_STATIC_PRIMITIVE_FIELD(Byte, v),JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Byte, v)&gt;(v))<SUB>1626</SUB>> ]
-"8867" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetByte &lt; false)<SUB>1626</SUB>> ]
-"8872" [label = <(&lt;operator&gt;.bracketedPrimary,(f-&gt;GetDeclaringClass(), v))<SUB>1626</SUB>> ]
-"8852" [label = <(&lt;operator&gt;.lessThan,jni::DecodeArtField &lt; kEnableIndexIds)<SUB>1626</SUB>> ]
-"8862" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Byte, v))<SUB>1626</SUB>> ]
-"8868" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetByte)<SUB>1626</SUB>> ]
-"8873" [label = <(&lt;operator&gt;.expressionList,f-&gt;GetDeclaringClass(), v)<SUB>1626</SUB>> ]
-"8832" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1626</SUB>> ]
-"8853" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Byte, v))<SUB>1626</SUB>> ]
-"8864" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Byte, v)&gt;,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Byte, v)&gt;)<SUB>1626</SUB>> ]
-"8870" [label = <(FIELD_IDENTIFIER,SetByte,SetByte)<SUB>1626</SUB>> ]
-"8874" [label = <(SET_STATIC_PRIMITIVE_FIELD(Byte, v),f-&gt;GetDeclaringClass())<SUB>1626</SUB>> ]
-"8833" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1626</SUB>> ]
-"8837" [label = <(SET_STATIC_PRIMITIVE_FIELD(Byte, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1626</SUB>> ]
-"8844" [label = <(RETURN,SET_STATIC_PRIMITIVE_FIELD(Byte, v),SET_STATIC_PRIMITIVE_FIELD(Byte, v))<SUB>1626</SUB>> ]
-"8855" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1626</SUB>> ]
-"8875" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1626</SUB>> ]
-"8838" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1626</SUB>> ]
-"8877" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1626</SUB>> ]
-"8839" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1626</SUB>> ]
-"8841" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1626</SUB>> ]
-"8823" [label = <(METHOD,SetStaticByteField)<SUB>1625</SUB>> ]
-"8879" [label = <(METHOD_RETURN,void)<SUB>1625</SUB>> ]
-  "8829" -> "8833" 
-  "8829" -> "8846" 
-  "8846" -> "8855" 
-  "8849" -> "8864" 
-  "8858" -> "8870" 
-  "8866" -> "8879" 
-  "8851" -> "8849" 
-  "8861" -> "8858" 
-  "8867" -> "8877" 
-  "8872" -> "8866" 
-  "8852" -> "8851" 
-  "8862" -> "8861" 
-  "8868" -> "8867" 
-  "8873" -> "8872" 
-  "8832" -> "8839" 
-  "8832" -> "8846" 
-  "8853" -> "8852" 
-  "8864" -> "8862" 
-  "8870" -> "8868" 
-  "8874" -> "8873" 
-  "8833" -> "8832" 
-  "8837" -> "8844" 
-  "8844" -> "8879" 
-  "8855" -> "8853" 
-  "8875" -> "8874" 
-  "8838" -> "8837" 
-  "8877" -> "8875" 
-  "8839" -> "8841" 
-  "8841" -> "8838" 
-  "8823" -> "8829" 
+digraph "SetStaticIntField" {  
+"8868" [label = <(SET_STATIC_PRIMITIVE_FIELD,SET_STATIC_PRIMITIVE_FIELD(Int, v))<SUB>1564</SUB>> ]
+"8885" [label = <(soa,ScopedObjectAccess)<SUB>1564</SUB>> ]
+"8888" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1564</SUB>> ]
+"8897" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, nullptr, JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Int, v)&gt;(v)))<SUB>1564</SUB>> ]
+"8905" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetInt &lt; false &gt; (f-&gt;GetDeclaringClass(), v))<SUB>1564</SUB>> ]
+"8890" [label = <(&lt;operator&gt;.greaterThan,jni::DecodeArtField &lt; kEnableIndexIds &gt; (fid))<SUB>1564</SUB>> ]
+"8900" [label = <(SET_STATIC_PRIMITIVE_FIELD(Int, v),JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Int, v)&gt;(v))<SUB>1564</SUB>> ]
+"8906" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetInt &lt; false)<SUB>1564</SUB>> ]
+"8911" [label = <(&lt;operator&gt;.bracketedPrimary,(f-&gt;GetDeclaringClass(), v))<SUB>1564</SUB>> ]
+"8891" [label = <(&lt;operator&gt;.lessThan,jni::DecodeArtField &lt; kEnableIndexIds)<SUB>1564</SUB>> ]
+"8901" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Int, v))<SUB>1564</SUB>> ]
+"8907" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetInt)<SUB>1564</SUB>> ]
+"8912" [label = <(&lt;operator&gt;.expressionList,f-&gt;GetDeclaringClass(), v)<SUB>1564</SUB>> ]
+"8871" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1564</SUB>> ]
+"8892" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Int, v))<SUB>1564</SUB>> ]
+"8903" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Int, v)&gt;,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Int, v)&gt;)<SUB>1564</SUB>> ]
+"8909" [label = <(FIELD_IDENTIFIER,SetInt,SetInt)<SUB>1564</SUB>> ]
+"8913" [label = <(SET_STATIC_PRIMITIVE_FIELD(Int, v),f-&gt;GetDeclaringClass())<SUB>1564</SUB>> ]
+"8872" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1564</SUB>> ]
+"8876" [label = <(SET_STATIC_PRIMITIVE_FIELD(Int, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1564</SUB>> ]
+"8883" [label = <(RETURN,SET_STATIC_PRIMITIVE_FIELD(Int, v),SET_STATIC_PRIMITIVE_FIELD(Int, v))<SUB>1564</SUB>> ]
+"8894" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1564</SUB>> ]
+"8914" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1564</SUB>> ]
+"8877" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1564</SUB>> ]
+"8916" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1564</SUB>> ]
+"8878" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1564</SUB>> ]
+"8880" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1564</SUB>> ]
+"8862" [label = <(METHOD,SetStaticIntField)<SUB>1563</SUB>> ]
+"8918" [label = <(METHOD_RETURN,void)<SUB>1563</SUB>> ]
+  "8868" -> "8872" 
+  "8868" -> "8885" 
+  "8885" -> "8894" 
+  "8888" -> "8903" 
+  "8897" -> "8909" 
+  "8905" -> "8918" 
+  "8890" -> "8888" 
+  "8900" -> "8897" 
+  "8906" -> "8916" 
+  "8911" -> "8905" 
+  "8891" -> "8890" 
+  "8901" -> "8900" 
+  "8907" -> "8906" 
+  "8912" -> "8911" 
+  "8871" -> "8878" 
+  "8871" -> "8885" 
+  "8892" -> "8891" 
+  "8903" -> "8901" 
+  "8909" -> "8907" 
+  "8913" -> "8912" 
+  "8872" -> "8871" 
+  "8876" -> "8883" 
+  "8883" -> "8918" 
+  "8894" -> "8892" 
+  "8914" -> "8913" 
+  "8877" -> "8876" 
+  "8916" -> "8914" 
+  "8878" -> "8880" 
+  "8880" -> "8877" 
+  "8862" -> "8868" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/153-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/153-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/153-cfg.dot	2023-06-07 19:35:01.497387162 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/153-cfg.dot	2023-06-07 19:35:08.037386514 +0330
@@ -1,61 +1,61 @@
-digraph "SetStaticCharField" {  
-"8887" [label = <(SET_STATIC_PRIMITIVE_FIELD,SET_STATIC_PRIMITIVE_FIELD(Char, v))<SUB>1630</SUB>> ]
-"8904" [label = <(soa,ScopedObjectAccess)<SUB>1630</SUB>> ]
-"8907" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1630</SUB>> ]
-"8916" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, nullptr, JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Char, v)&gt;(v)))<SUB>1630</SUB>> ]
-"8924" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetChar &lt; false &gt; (f-&gt;GetDeclaringClass(), v))<SUB>1630</SUB>> ]
-"8909" [label = <(&lt;operator&gt;.greaterThan,jni::DecodeArtField &lt; kEnableIndexIds &gt; (fid))<SUB>1630</SUB>> ]
-"8919" [label = <(SET_STATIC_PRIMITIVE_FIELD(Char, v),JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Char, v)&gt;(v))<SUB>1630</SUB>> ]
-"8925" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetChar &lt; false)<SUB>1630</SUB>> ]
-"8930" [label = <(&lt;operator&gt;.bracketedPrimary,(f-&gt;GetDeclaringClass(), v))<SUB>1630</SUB>> ]
-"8910" [label = <(&lt;operator&gt;.lessThan,jni::DecodeArtField &lt; kEnableIndexIds)<SUB>1630</SUB>> ]
-"8920" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Char, v))<SUB>1630</SUB>> ]
-"8926" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetChar)<SUB>1630</SUB>> ]
-"8931" [label = <(&lt;operator&gt;.expressionList,f-&gt;GetDeclaringClass(), v)<SUB>1630</SUB>> ]
-"8890" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1630</SUB>> ]
-"8911" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Char, v))<SUB>1630</SUB>> ]
-"8922" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Char, v)&gt;,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Char, v)&gt;)<SUB>1630</SUB>> ]
-"8928" [label = <(FIELD_IDENTIFIER,SetChar,SetChar)<SUB>1630</SUB>> ]
-"8932" [label = <(SET_STATIC_PRIMITIVE_FIELD(Char, v),f-&gt;GetDeclaringClass())<SUB>1630</SUB>> ]
-"8891" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1630</SUB>> ]
-"8895" [label = <(SET_STATIC_PRIMITIVE_FIELD(Char, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1630</SUB>> ]
-"8902" [label = <(RETURN,SET_STATIC_PRIMITIVE_FIELD(Char, v),SET_STATIC_PRIMITIVE_FIELD(Char, v))<SUB>1630</SUB>> ]
-"8913" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1630</SUB>> ]
-"8933" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1630</SUB>> ]
-"8896" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1630</SUB>> ]
-"8935" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1630</SUB>> ]
-"8897" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1630</SUB>> ]
-"8899" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1630</SUB>> ]
-"8881" [label = <(METHOD,SetStaticCharField)<SUB>1629</SUB>> ]
-"8937" [label = <(METHOD_RETURN,void)<SUB>1629</SUB>> ]
-  "8887" -> "8891" 
-  "8887" -> "8904" 
-  "8904" -> "8913" 
-  "8907" -> "8922" 
-  "8916" -> "8928" 
-  "8924" -> "8937" 
-  "8909" -> "8907" 
-  "8919" -> "8916" 
-  "8925" -> "8935" 
-  "8930" -> "8924" 
-  "8910" -> "8909" 
-  "8920" -> "8919" 
-  "8926" -> "8925" 
-  "8931" -> "8930" 
-  "8890" -> "8897" 
-  "8890" -> "8904" 
-  "8911" -> "8910" 
-  "8922" -> "8920" 
-  "8928" -> "8926" 
-  "8932" -> "8931" 
-  "8891" -> "8890" 
-  "8895" -> "8902" 
-  "8902" -> "8937" 
-  "8913" -> "8911" 
-  "8933" -> "8932" 
-  "8896" -> "8895" 
-  "8935" -> "8933" 
-  "8897" -> "8899" 
-  "8899" -> "8896" 
-  "8881" -> "8887" 
+digraph "SetStaticLongField" {  
+"8926" [label = <(SET_STATIC_PRIMITIVE_FIELD,SET_STATIC_PRIMITIVE_FIELD(Long, v))<SUB>1568</SUB>> ]
+"8943" [label = <(soa,ScopedObjectAccess)<SUB>1568</SUB>> ]
+"8946" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1568</SUB>> ]
+"8955" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, nullptr, JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Long, v)&gt;(v)))<SUB>1568</SUB>> ]
+"8963" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetLong &lt; false &gt; (f-&gt;GetDeclaringClass(), v))<SUB>1568</SUB>> ]
+"8948" [label = <(&lt;operator&gt;.greaterThan,jni::DecodeArtField &lt; kEnableIndexIds &gt; (fid))<SUB>1568</SUB>> ]
+"8958" [label = <(SET_STATIC_PRIMITIVE_FIELD(Long, v),JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Long, v)&gt;(v))<SUB>1568</SUB>> ]
+"8964" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetLong &lt; false)<SUB>1568</SUB>> ]
+"8969" [label = <(&lt;operator&gt;.bracketedPrimary,(f-&gt;GetDeclaringClass(), v))<SUB>1568</SUB>> ]
+"8949" [label = <(&lt;operator&gt;.lessThan,jni::DecodeArtField &lt; kEnableIndexIds)<SUB>1568</SUB>> ]
+"8959" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Long, v))<SUB>1568</SUB>> ]
+"8965" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetLong)<SUB>1568</SUB>> ]
+"8970" [label = <(&lt;operator&gt;.expressionList,f-&gt;GetDeclaringClass(), v)<SUB>1568</SUB>> ]
+"8929" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1568</SUB>> ]
+"8950" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Long, v))<SUB>1568</SUB>> ]
+"8961" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Long, v)&gt;,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Long, v)&gt;)<SUB>1568</SUB>> ]
+"8967" [label = <(FIELD_IDENTIFIER,SetLong,SetLong)<SUB>1568</SUB>> ]
+"8971" [label = <(SET_STATIC_PRIMITIVE_FIELD(Long, v),f-&gt;GetDeclaringClass())<SUB>1568</SUB>> ]
+"8930" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1568</SUB>> ]
+"8934" [label = <(SET_STATIC_PRIMITIVE_FIELD(Long, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1568</SUB>> ]
+"8941" [label = <(RETURN,SET_STATIC_PRIMITIVE_FIELD(Long, v),SET_STATIC_PRIMITIVE_FIELD(Long, v))<SUB>1568</SUB>> ]
+"8952" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1568</SUB>> ]
+"8972" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1568</SUB>> ]
+"8935" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1568</SUB>> ]
+"8974" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1568</SUB>> ]
+"8936" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1568</SUB>> ]
+"8938" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1568</SUB>> ]
+"8920" [label = <(METHOD,SetStaticLongField)<SUB>1567</SUB>> ]
+"8976" [label = <(METHOD_RETURN,void)<SUB>1567</SUB>> ]
+  "8926" -> "8930" 
+  "8926" -> "8943" 
+  "8943" -> "8952" 
+  "8946" -> "8961" 
+  "8955" -> "8967" 
+  "8963" -> "8976" 
+  "8948" -> "8946" 
+  "8958" -> "8955" 
+  "8964" -> "8974" 
+  "8969" -> "8963" 
+  "8949" -> "8948" 
+  "8959" -> "8958" 
+  "8965" -> "8964" 
+  "8970" -> "8969" 
+  "8929" -> "8936" 
+  "8929" -> "8943" 
+  "8950" -> "8949" 
+  "8961" -> "8959" 
+  "8967" -> "8965" 
+  "8971" -> "8970" 
+  "8930" -> "8929" 
+  "8934" -> "8941" 
+  "8941" -> "8976" 
+  "8952" -> "8950" 
+  "8972" -> "8971" 
+  "8935" -> "8934" 
+  "8974" -> "8972" 
+  "8936" -> "8938" 
+  "8938" -> "8935" 
+  "8920" -> "8926" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/154-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/154-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/154-cfg.dot	2023-06-07 19:35:01.497387162 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/154-cfg.dot	2023-06-07 19:35:08.037386514 +0330
@@ -1,61 +1,61 @@
-digraph "SetStaticFloatField" {  
-"8945" [label = <(SET_STATIC_PRIMITIVE_FIELD,SET_STATIC_PRIMITIVE_FIELD(Float, v))<SUB>1634</SUB>> ]
-"8962" [label = <(soa,ScopedObjectAccess)<SUB>1634</SUB>> ]
-"8965" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1634</SUB>> ]
-"8974" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, nullptr, JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Float, v)&gt;(v)))<SUB>1634</SUB>> ]
-"8982" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetFloat &lt; false &gt; (f-&gt;GetDeclaringClass(), v))<SUB>1634</SUB>> ]
-"8967" [label = <(&lt;operator&gt;.greaterThan,jni::DecodeArtField &lt; kEnableIndexIds &gt; (fid))<SUB>1634</SUB>> ]
-"8977" [label = <(SET_STATIC_PRIMITIVE_FIELD(Float, v),JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Float, v)&gt;(v))<SUB>1634</SUB>> ]
-"8983" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetFloat &lt; false)<SUB>1634</SUB>> ]
-"8988" [label = <(&lt;operator&gt;.bracketedPrimary,(f-&gt;GetDeclaringClass(), v))<SUB>1634</SUB>> ]
-"8968" [label = <(&lt;operator&gt;.lessThan,jni::DecodeArtField &lt; kEnableIndexIds)<SUB>1634</SUB>> ]
-"8978" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Float, v))<SUB>1634</SUB>> ]
-"8984" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetFloat)<SUB>1634</SUB>> ]
-"8989" [label = <(&lt;operator&gt;.expressionList,f-&gt;GetDeclaringClass(), v)<SUB>1634</SUB>> ]
-"8948" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1634</SUB>> ]
-"8969" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Float, v))<SUB>1634</SUB>> ]
-"8980" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Float, v)&gt;,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Float, v)&gt;)<SUB>1634</SUB>> ]
-"8986" [label = <(FIELD_IDENTIFIER,SetFloat,SetFloat)<SUB>1634</SUB>> ]
-"8990" [label = <(SET_STATIC_PRIMITIVE_FIELD(Float, v),f-&gt;GetDeclaringClass())<SUB>1634</SUB>> ]
-"8949" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1634</SUB>> ]
-"8953" [label = <(SET_STATIC_PRIMITIVE_FIELD(Float, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1634</SUB>> ]
-"8960" [label = <(RETURN,SET_STATIC_PRIMITIVE_FIELD(Float, v),SET_STATIC_PRIMITIVE_FIELD(Float, v))<SUB>1634</SUB>> ]
-"8971" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1634</SUB>> ]
-"8991" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1634</SUB>> ]
-"8954" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1634</SUB>> ]
-"8993" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1634</SUB>> ]
-"8955" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1634</SUB>> ]
-"8957" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1634</SUB>> ]
-"8939" [label = <(METHOD,SetStaticFloatField)<SUB>1633</SUB>> ]
-"8995" [label = <(METHOD_RETURN,void)<SUB>1633</SUB>> ]
-  "8945" -> "8949" 
-  "8945" -> "8962" 
-  "8962" -> "8971" 
-  "8965" -> "8980" 
-  "8974" -> "8986" 
-  "8982" -> "8995" 
-  "8967" -> "8965" 
-  "8977" -> "8974" 
-  "8983" -> "8993" 
-  "8988" -> "8982" 
-  "8968" -> "8967" 
-  "8978" -> "8977" 
-  "8984" -> "8983" 
-  "8989" -> "8988" 
-  "8948" -> "8955" 
-  "8948" -> "8962" 
-  "8969" -> "8968" 
-  "8980" -> "8978" 
-  "8986" -> "8984" 
-  "8990" -> "8989" 
-  "8949" -> "8948" 
-  "8953" -> "8960" 
-  "8960" -> "8995" 
-  "8971" -> "8969" 
-  "8991" -> "8990" 
-  "8954" -> "8953" 
-  "8993" -> "8991" 
-  "8955" -> "8957" 
-  "8957" -> "8954" 
-  "8939" -> "8945" 
+digraph "SetStaticShortField" {  
+"8984" [label = <(SET_STATIC_PRIMITIVE_FIELD,SET_STATIC_PRIMITIVE_FIELD(Short, v))<SUB>1572</SUB>> ]
+"9001" [label = <(soa,ScopedObjectAccess)<SUB>1572</SUB>> ]
+"9004" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1572</SUB>> ]
+"9013" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, nullptr, JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Short, v)&gt;(v)))<SUB>1572</SUB>> ]
+"9021" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetShort &lt; false &gt; (f-&gt;GetDeclaringClass(), v))<SUB>1572</SUB>> ]
+"9006" [label = <(&lt;operator&gt;.greaterThan,jni::DecodeArtField &lt; kEnableIndexIds &gt; (fid))<SUB>1572</SUB>> ]
+"9016" [label = <(SET_STATIC_PRIMITIVE_FIELD(Short, v),JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Short, v)&gt;(v))<SUB>1572</SUB>> ]
+"9022" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetShort &lt; false)<SUB>1572</SUB>> ]
+"9027" [label = <(&lt;operator&gt;.bracketedPrimary,(f-&gt;GetDeclaringClass(), v))<SUB>1572</SUB>> ]
+"9007" [label = <(&lt;operator&gt;.lessThan,jni::DecodeArtField &lt; kEnableIndexIds)<SUB>1572</SUB>> ]
+"9017" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Short, v))<SUB>1572</SUB>> ]
+"9023" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetShort)<SUB>1572</SUB>> ]
+"9028" [label = <(&lt;operator&gt;.expressionList,f-&gt;GetDeclaringClass(), v)<SUB>1572</SUB>> ]
+"8987" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1572</SUB>> ]
+"9008" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Short, v))<SUB>1572</SUB>> ]
+"9019" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Short, v)&gt;,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Short, v)&gt;)<SUB>1572</SUB>> ]
+"9025" [label = <(FIELD_IDENTIFIER,SetShort,SetShort)<SUB>1572</SUB>> ]
+"9029" [label = <(SET_STATIC_PRIMITIVE_FIELD(Short, v),f-&gt;GetDeclaringClass())<SUB>1572</SUB>> ]
+"8988" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1572</SUB>> ]
+"8992" [label = <(SET_STATIC_PRIMITIVE_FIELD(Short, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1572</SUB>> ]
+"8999" [label = <(RETURN,SET_STATIC_PRIMITIVE_FIELD(Short, v),SET_STATIC_PRIMITIVE_FIELD(Short, v))<SUB>1572</SUB>> ]
+"9010" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1572</SUB>> ]
+"9030" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1572</SUB>> ]
+"8993" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1572</SUB>> ]
+"9032" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1572</SUB>> ]
+"8994" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1572</SUB>> ]
+"8996" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1572</SUB>> ]
+"8978" [label = <(METHOD,SetStaticShortField)<SUB>1571</SUB>> ]
+"9034" [label = <(METHOD_RETURN,void)<SUB>1571</SUB>> ]
+  "8984" -> "8988" 
+  "8984" -> "9001" 
+  "9001" -> "9010" 
+  "9004" -> "9019" 
+  "9013" -> "9025" 
+  "9021" -> "9034" 
+  "9006" -> "9004" 
+  "9016" -> "9013" 
+  "9022" -> "9032" 
+  "9027" -> "9021" 
+  "9007" -> "9006" 
+  "9017" -> "9016" 
+  "9023" -> "9022" 
+  "9028" -> "9027" 
+  "8987" -> "8994" 
+  "8987" -> "9001" 
+  "9008" -> "9007" 
+  "9019" -> "9017" 
+  "9025" -> "9023" 
+  "9029" -> "9028" 
+  "8988" -> "8987" 
+  "8992" -> "8999" 
+  "8999" -> "9034" 
+  "9010" -> "9008" 
+  "9030" -> "9029" 
+  "8993" -> "8992" 
+  "9032" -> "9030" 
+  "8994" -> "8996" 
+  "8996" -> "8993" 
+  "8978" -> "8984" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/155-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/155-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/155-cfg.dot	2023-06-07 19:35:01.497387162 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/155-cfg.dot	2023-06-07 19:35:08.037386514 +0330
@@ -1,61 +1,53 @@
-digraph "SetStaticDoubleField" {  
-"9003" [label = <(SET_STATIC_PRIMITIVE_FIELD,SET_STATIC_PRIMITIVE_FIELD(Double, v))<SUB>1638</SUB>> ]
-"9020" [label = <(soa,ScopedObjectAccess)<SUB>1638</SUB>> ]
-"9023" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1638</SUB>> ]
-"9032" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, nullptr, JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Double, v)&gt;(v)))<SUB>1638</SUB>> ]
-"9040" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetDouble &lt; false &gt; (f-&gt;GetDeclaringClass(), v))<SUB>1638</SUB>> ]
-"9025" [label = <(&lt;operator&gt;.greaterThan,jni::DecodeArtField &lt; kEnableIndexIds &gt; (fid))<SUB>1638</SUB>> ]
-"9035" [label = <(SET_STATIC_PRIMITIVE_FIELD(Double, v),JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Double, v)&gt;(v))<SUB>1638</SUB>> ]
-"9041" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetDouble &lt; false)<SUB>1638</SUB>> ]
-"9046" [label = <(&lt;operator&gt;.bracketedPrimary,(f-&gt;GetDeclaringClass(), v))<SUB>1638</SUB>> ]
-"9026" [label = <(&lt;operator&gt;.lessThan,jni::DecodeArtField &lt; kEnableIndexIds)<SUB>1638</SUB>> ]
-"9036" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Double, v))<SUB>1638</SUB>> ]
-"9042" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetDouble)<SUB>1638</SUB>> ]
-"9047" [label = <(&lt;operator&gt;.expressionList,f-&gt;GetDeclaringClass(), v)<SUB>1638</SUB>> ]
-"9006" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1638</SUB>> ]
-"9027" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Double, v))<SUB>1638</SUB>> ]
-"9038" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Double, v)&gt;,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Double, v)&gt;)<SUB>1638</SUB>> ]
-"9044" [label = <(FIELD_IDENTIFIER,SetDouble,SetDouble)<SUB>1638</SUB>> ]
-"9048" [label = <(SET_STATIC_PRIMITIVE_FIELD(Double, v),f-&gt;GetDeclaringClass())<SUB>1638</SUB>> ]
-"9007" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1638</SUB>> ]
-"9011" [label = <(SET_STATIC_PRIMITIVE_FIELD(Double, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1638</SUB>> ]
-"9018" [label = <(RETURN,SET_STATIC_PRIMITIVE_FIELD(Double, v),SET_STATIC_PRIMITIVE_FIELD(Double, v))<SUB>1638</SUB>> ]
-"9029" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1638</SUB>> ]
-"9049" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1638</SUB>> ]
-"9012" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1638</SUB>> ]
-"9051" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1638</SUB>> ]
-"9013" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1638</SUB>> ]
-"9015" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1638</SUB>> ]
-"8997" [label = <(METHOD,SetStaticDoubleField)<SUB>1637</SUB>> ]
-"9053" [label = <(METHOD_RETURN,void)<SUB>1637</SUB>> ]
-  "9003" -> "9007" 
-  "9003" -> "9020" 
-  "9020" -> "9029" 
-  "9023" -> "9038" 
-  "9032" -> "9044" 
-  "9040" -> "9053" 
-  "9025" -> "9023" 
-  "9035" -> "9032" 
-  "9041" -> "9051" 
-  "9046" -> "9040" 
-  "9026" -> "9025" 
-  "9036" -> "9035" 
-  "9042" -> "9041" 
+digraph "CallStaticObjectMethod" {  
+"9042" [label = <(va_start,va_start(ap, mid))<SUB>1577</SUB>> ]
+"9046" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1578</SUB>> ]
+"9049" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>1579</SUB>> ]
+"9068" [label = <(soa,soa(env))<SUB>1580</SUB>> ]
+"9071" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, ap)))<SUB>1581</SUB>> ]
+"9078" [label = <(&lt;operator&gt;.assignment,local_result = soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>1582</SUB>> ]
+"9090" [label = <(RETURN,return local_result;,return local_result;)<SUB>1583</SUB>> ]
+"9047" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1578</SUB>> ]
+"9072" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1581</SUB>> ]
+"9080" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>1582</SUB>> ]
+"9081" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>1582</SUB>> ]
+"9086" [label = <(GetL,result.GetL())<SUB>1582</SUB>> ]
+"9053" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1579</SUB>> ]
+"9082" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1582</SUB>> ]
+"9087" [label = <(&lt;operator&gt;.fieldAccess,result.GetL)<SUB>1582</SUB>> ]
+"9054" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1579</SUB>> ]
+"9058" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1579</SUB>> ]
+"9065" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>1579</SUB>> ]
+"9084" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1582</SUB>> ]
+"9089" [label = <(FIELD_IDENTIFIER,GetL,GetL)<SUB>1582</SUB>> ]
+"9059" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1579</SUB>> ]
+"9060" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1579</SUB>> ]
+"9062" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1579</SUB>> ]
+"9036" [label = <(METHOD,CallStaticObjectMethod)<SUB>1575</SUB>> ]
+"9092" [label = <(METHOD_RETURN,jobject)<SUB>1575</SUB>> ]
+  "9042" -> "9047" 
+  "9046" -> "9049" 
+  "9049" -> "9054" 
+  "9049" -> "9068" 
+  "9068" -> "9072" 
+  "9071" -> "9084" 
+  "9078" -> "9090" 
+  "9090" -> "9092" 
   "9047" -> "9046" 
-  "9006" -> "9013" 
-  "9006" -> "9020" 
-  "9027" -> "9026" 
-  "9038" -> "9036" 
-  "9044" -> "9042" 
-  "9048" -> "9047" 
-  "9007" -> "9006" 
-  "9011" -> "9018" 
-  "9018" -> "9053" 
-  "9029" -> "9027" 
-  "9049" -> "9048" 
-  "9012" -> "9011" 
-  "9051" -> "9049" 
-  "9013" -> "9015" 
-  "9015" -> "9012" 
-  "8997" -> "9003" 
+  "9072" -> "9071" 
+  "9080" -> "9078" 
+  "9081" -> "9089" 
+  "9086" -> "9080" 
+  "9053" -> "9060" 
+  "9053" -> "9068" 
+  "9082" -> "9081" 
+  "9087" -> "9086" 
+  "9054" -> "9053" 
+  "9058" -> "9065" 
+  "9065" -> "9092" 
+  "9084" -> "9082" 
+  "9089" -> "9087" 
+  "9059" -> "9058" 
+  "9060" -> "9062" 
+  "9062" -> "9059" 
+  "9036" -> "9042" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/156-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/156-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/156-cfg.dot	2023-06-07 19:35:01.497387162 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/156-cfg.dot	2023-06-07 19:35:08.037386514 +0330
@@ -1,61 +1,45 @@
-digraph "SetStaticIntField" {  
-"9061" [label = <(SET_STATIC_PRIMITIVE_FIELD,SET_STATIC_PRIMITIVE_FIELD(Int, v))<SUB>1642</SUB>> ]
-"9078" [label = <(soa,ScopedObjectAccess)<SUB>1642</SUB>> ]
-"9081" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1642</SUB>> ]
-"9090" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, nullptr, JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Int, v)&gt;(v)))<SUB>1642</SUB>> ]
-"9098" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetInt &lt; false &gt; (f-&gt;GetDeclaringClass(), v))<SUB>1642</SUB>> ]
-"9083" [label = <(&lt;operator&gt;.greaterThan,jni::DecodeArtField &lt; kEnableIndexIds &gt; (fid))<SUB>1642</SUB>> ]
-"9093" [label = <(SET_STATIC_PRIMITIVE_FIELD(Int, v),JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Int, v)&gt;(v))<SUB>1642</SUB>> ]
-"9099" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetInt &lt; false)<SUB>1642</SUB>> ]
-"9104" [label = <(&lt;operator&gt;.bracketedPrimary,(f-&gt;GetDeclaringClass(), v))<SUB>1642</SUB>> ]
-"9084" [label = <(&lt;operator&gt;.lessThan,jni::DecodeArtField &lt; kEnableIndexIds)<SUB>1642</SUB>> ]
-"9094" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Int, v))<SUB>1642</SUB>> ]
-"9100" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetInt)<SUB>1642</SUB>> ]
-"9105" [label = <(&lt;operator&gt;.expressionList,f-&gt;GetDeclaringClass(), v)<SUB>1642</SUB>> ]
-"9064" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1642</SUB>> ]
-"9085" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Int, v))<SUB>1642</SUB>> ]
-"9096" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Int, v)&gt;,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Int, v)&gt;)<SUB>1642</SUB>> ]
-"9102" [label = <(FIELD_IDENTIFIER,SetInt,SetInt)<SUB>1642</SUB>> ]
-"9106" [label = <(SET_STATIC_PRIMITIVE_FIELD(Int, v),f-&gt;GetDeclaringClass())<SUB>1642</SUB>> ]
-"9065" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1642</SUB>> ]
-"9069" [label = <(SET_STATIC_PRIMITIVE_FIELD(Int, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1642</SUB>> ]
-"9076" [label = <(RETURN,SET_STATIC_PRIMITIVE_FIELD(Int, v),SET_STATIC_PRIMITIVE_FIELD(Int, v))<SUB>1642</SUB>> ]
-"9087" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1642</SUB>> ]
-"9107" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1642</SUB>> ]
-"9070" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1642</SUB>> ]
-"9109" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1642</SUB>> ]
-"9071" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1642</SUB>> ]
-"9073" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1642</SUB>> ]
-"9055" [label = <(METHOD,SetStaticIntField)<SUB>1641</SUB>> ]
-"9111" [label = <(METHOD_RETURN,void)<SUB>1641</SUB>> ]
-  "9061" -> "9065" 
-  "9061" -> "9078" 
-  "9078" -> "9087" 
-  "9081" -> "9096" 
-  "9090" -> "9102" 
-  "9098" -> "9111" 
-  "9083" -> "9081" 
-  "9093" -> "9090" 
-  "9099" -> "9109" 
-  "9104" -> "9098" 
-  "9084" -> "9083" 
-  "9094" -> "9093" 
-  "9100" -> "9099" 
+digraph "CallStaticObjectMethodV" {  
+"9100" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>1587</SUB>> ]
+"9119" [label = <(soa,soa(env))<SUB>1588</SUB>> ]
+"9122" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, args)))<SUB>1589</SUB>> ]
+"9128" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());)<SUB>1590</SUB>> ]
+"9123" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1589</SUB>> ]
+"9129" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>1590</SUB>> ]
+"9130" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>1590</SUB>> ]
+"9135" [label = <(GetL,result.GetL())<SUB>1590</SUB>> ]
+"9104" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1587</SUB>> ]
+"9131" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1590</SUB>> ]
+"9136" [label = <(&lt;operator&gt;.fieldAccess,result.GetL)<SUB>1590</SUB>> ]
+"9105" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1587</SUB>> ]
+"9109" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1587</SUB>> ]
+"9116" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>1587</SUB>> ]
+"9133" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1590</SUB>> ]
+"9138" [label = <(FIELD_IDENTIFIER,GetL,GetL)<SUB>1590</SUB>> ]
+"9110" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1587</SUB>> ]
+"9111" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1587</SUB>> ]
+"9113" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1587</SUB>> ]
+"9094" [label = <(METHOD,CallStaticObjectMethodV)<SUB>1586</SUB>> ]
+"9139" [label = <(METHOD_RETURN,jobject)<SUB>1586</SUB>> ]
+  "9100" -> "9105" 
+  "9100" -> "9119" 
+  "9119" -> "9123" 
+  "9122" -> "9133" 
+  "9128" -> "9139" 
+  "9123" -> "9122" 
+  "9129" -> "9128" 
+  "9130" -> "9138" 
+  "9135" -> "9129" 
+  "9104" -> "9111" 
+  "9104" -> "9119" 
+  "9131" -> "9130" 
+  "9136" -> "9135" 
   "9105" -> "9104" 
-  "9064" -> "9071" 
-  "9064" -> "9078" 
-  "9085" -> "9084" 
-  "9096" -> "9094" 
-  "9102" -> "9100" 
-  "9106" -> "9105" 
-  "9065" -> "9064" 
-  "9069" -> "9076" 
-  "9076" -> "9111" 
-  "9087" -> "9085" 
-  "9107" -> "9106" 
-  "9070" -> "9069" 
-  "9109" -> "9107" 
-  "9071" -> "9073" 
-  "9073" -> "9070" 
-  "9055" -> "9061" 
+  "9109" -> "9116" 
+  "9116" -> "9139" 
+  "9133" -> "9131" 
+  "9138" -> "9136" 
+  "9110" -> "9109" 
+  "9111" -> "9113" 
+  "9113" -> "9110" 
+  "9094" -> "9100" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/157-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/157-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/157-cfg.dot	2023-06-07 19:35:01.497387162 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/157-cfg.dot	2023-06-07 19:35:08.037386514 +0330
@@ -1,61 +1,45 @@
-digraph "SetStaticLongField" {  
-"9119" [label = <(SET_STATIC_PRIMITIVE_FIELD,SET_STATIC_PRIMITIVE_FIELD(Long, v))<SUB>1646</SUB>> ]
-"9136" [label = <(soa,ScopedObjectAccess)<SUB>1646</SUB>> ]
-"9139" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1646</SUB>> ]
-"9148" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, nullptr, JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Long, v)&gt;(v)))<SUB>1646</SUB>> ]
-"9156" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetLong &lt; false &gt; (f-&gt;GetDeclaringClass(), v))<SUB>1646</SUB>> ]
-"9141" [label = <(&lt;operator&gt;.greaterThan,jni::DecodeArtField &lt; kEnableIndexIds &gt; (fid))<SUB>1646</SUB>> ]
-"9151" [label = <(SET_STATIC_PRIMITIVE_FIELD(Long, v),JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Long, v)&gt;(v))<SUB>1646</SUB>> ]
-"9157" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetLong &lt; false)<SUB>1646</SUB>> ]
-"9162" [label = <(&lt;operator&gt;.bracketedPrimary,(f-&gt;GetDeclaringClass(), v))<SUB>1646</SUB>> ]
-"9142" [label = <(&lt;operator&gt;.lessThan,jni::DecodeArtField &lt; kEnableIndexIds)<SUB>1646</SUB>> ]
-"9152" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Long, v))<SUB>1646</SUB>> ]
-"9158" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetLong)<SUB>1646</SUB>> ]
-"9163" [label = <(&lt;operator&gt;.expressionList,f-&gt;GetDeclaringClass(), v)<SUB>1646</SUB>> ]
-"9122" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1646</SUB>> ]
-"9143" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Long, v))<SUB>1646</SUB>> ]
-"9154" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Long, v)&gt;,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Long, v)&gt;)<SUB>1646</SUB>> ]
-"9160" [label = <(FIELD_IDENTIFIER,SetLong,SetLong)<SUB>1646</SUB>> ]
-"9164" [label = <(SET_STATIC_PRIMITIVE_FIELD(Long, v),f-&gt;GetDeclaringClass())<SUB>1646</SUB>> ]
-"9123" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1646</SUB>> ]
-"9127" [label = <(SET_STATIC_PRIMITIVE_FIELD(Long, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1646</SUB>> ]
-"9134" [label = <(RETURN,SET_STATIC_PRIMITIVE_FIELD(Long, v),SET_STATIC_PRIMITIVE_FIELD(Long, v))<SUB>1646</SUB>> ]
-"9145" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1646</SUB>> ]
-"9165" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1646</SUB>> ]
-"9128" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1646</SUB>> ]
-"9167" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1646</SUB>> ]
-"9129" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1646</SUB>> ]
-"9131" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1646</SUB>> ]
-"9113" [label = <(METHOD,SetStaticLongField)<SUB>1645</SUB>> ]
-"9169" [label = <(METHOD_RETURN,void)<SUB>1645</SUB>> ]
-  "9119" -> "9123" 
-  "9119" -> "9136" 
-  "9136" -> "9145" 
-  "9139" -> "9154" 
-  "9148" -> "9160" 
-  "9156" -> "9169" 
-  "9141" -> "9139" 
-  "9151" -> "9148" 
-  "9157" -> "9167" 
-  "9162" -> "9156" 
-  "9142" -> "9141" 
+digraph "CallStaticObjectMethodA" {  
+"9147" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>1594</SUB>> ]
+"9166" [label = <(soa,soa(env))<SUB>1595</SUB>> ]
+"9169" [label = <(result,result(InvokeWithJValues(soa, nullptr, mid, args)))<SUB>1596</SUB>> ]
+"9175" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());)<SUB>1597</SUB>> ]
+"9170" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1596</SUB>> ]
+"9176" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>1597</SUB>> ]
+"9177" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>1597</SUB>> ]
+"9182" [label = <(GetL,result.GetL())<SUB>1597</SUB>> ]
+"9151" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1594</SUB>> ]
+"9178" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1597</SUB>> ]
+"9183" [label = <(&lt;operator&gt;.fieldAccess,result.GetL)<SUB>1597</SUB>> ]
+"9152" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1594</SUB>> ]
+"9156" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1594</SUB>> ]
+"9163" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>1594</SUB>> ]
+"9180" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1597</SUB>> ]
+"9185" [label = <(FIELD_IDENTIFIER,GetL,GetL)<SUB>1597</SUB>> ]
+"9157" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1594</SUB>> ]
+"9158" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1594</SUB>> ]
+"9160" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1594</SUB>> ]
+"9141" [label = <(METHOD,CallStaticObjectMethodA)<SUB>1593</SUB>> ]
+"9186" [label = <(METHOD_RETURN,jobject)<SUB>1593</SUB>> ]
+  "9147" -> "9152" 
+  "9147" -> "9166" 
+  "9166" -> "9170" 
+  "9169" -> "9180" 
+  "9175" -> "9186" 
+  "9170" -> "9169" 
+  "9176" -> "9175" 
+  "9177" -> "9185" 
+  "9182" -> "9176" 
+  "9151" -> "9158" 
+  "9151" -> "9166" 
+  "9178" -> "9177" 
+  "9183" -> "9182" 
   "9152" -> "9151" 
-  "9158" -> "9157" 
-  "9163" -> "9162" 
-  "9122" -> "9129" 
-  "9122" -> "9136" 
-  "9143" -> "9142" 
-  "9154" -> "9152" 
-  "9160" -> "9158" 
-  "9164" -> "9163" 
-  "9123" -> "9122" 
-  "9127" -> "9134" 
-  "9134" -> "9169" 
-  "9145" -> "9143" 
-  "9165" -> "9164" 
-  "9128" -> "9127" 
-  "9167" -> "9165" 
-  "9129" -> "9131" 
-  "9131" -> "9128" 
-  "9113" -> "9119" 
+  "9156" -> "9163" 
+  "9163" -> "9186" 
+  "9180" -> "9178" 
+  "9185" -> "9183" 
+  "9157" -> "9156" 
+  "9158" -> "9160" 
+  "9160" -> "9157" 
+  "9141" -> "9147" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/158-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/158-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/158-cfg.dot	2023-06-07 19:35:01.497387162 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/158-cfg.dot	2023-06-07 19:35:08.037386514 +0330
@@ -1,61 +1,43 @@
-digraph "SetStaticShortField" {  
-"9177" [label = <(SET_STATIC_PRIMITIVE_FIELD,SET_STATIC_PRIMITIVE_FIELD(Short, v))<SUB>1650</SUB>> ]
-"9194" [label = <(soa,ScopedObjectAccess)<SUB>1650</SUB>> ]
-"9197" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1650</SUB>> ]
-"9206" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, nullptr, JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Short, v)&gt;(v)))<SUB>1650</SUB>> ]
-"9214" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetShort &lt; false &gt; (f-&gt;GetDeclaringClass(), v))<SUB>1650</SUB>> ]
-"9199" [label = <(&lt;operator&gt;.greaterThan,jni::DecodeArtField &lt; kEnableIndexIds &gt; (fid))<SUB>1650</SUB>> ]
-"9209" [label = <(SET_STATIC_PRIMITIVE_FIELD(Short, v),JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Short, v)&gt;(v))<SUB>1650</SUB>> ]
-"9215" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetShort &lt; false)<SUB>1650</SUB>> ]
-"9220" [label = <(&lt;operator&gt;.bracketedPrimary,(f-&gt;GetDeclaringClass(), v))<SUB>1650</SUB>> ]
-"9200" [label = <(&lt;operator&gt;.lessThan,jni::DecodeArtField &lt; kEnableIndexIds)<SUB>1650</SUB>> ]
-"9210" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Short, v))<SUB>1650</SUB>> ]
-"9216" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetShort)<SUB>1650</SUB>> ]
-"9221" [label = <(&lt;operator&gt;.expressionList,f-&gt;GetDeclaringClass(), v)<SUB>1650</SUB>> ]
-"9180" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1650</SUB>> ]
-"9201" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Short, v))<SUB>1650</SUB>> ]
-"9212" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Short, v)&gt;,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Short, v)&gt;)<SUB>1650</SUB>> ]
-"9218" [label = <(FIELD_IDENTIFIER,SetShort,SetShort)<SUB>1650</SUB>> ]
-"9222" [label = <(SET_STATIC_PRIMITIVE_FIELD(Short, v),f-&gt;GetDeclaringClass())<SUB>1650</SUB>> ]
-"9181" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1650</SUB>> ]
-"9185" [label = <(SET_STATIC_PRIMITIVE_FIELD(Short, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1650</SUB>> ]
-"9192" [label = <(RETURN,SET_STATIC_PRIMITIVE_FIELD(Short, v),SET_STATIC_PRIMITIVE_FIELD(Short, v))<SUB>1650</SUB>> ]
-"9203" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1650</SUB>> ]
-"9223" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1650</SUB>> ]
-"9186" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1650</SUB>> ]
-"9225" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1650</SUB>> ]
-"9187" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1650</SUB>> ]
-"9189" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1650</SUB>> ]
-"9171" [label = <(METHOD,SetStaticShortField)<SUB>1649</SUB>> ]
-"9227" [label = <(METHOD_RETURN,void)<SUB>1649</SUB>> ]
-  "9177" -> "9181" 
-  "9177" -> "9194" 
-  "9194" -> "9203" 
-  "9197" -> "9212" 
-  "9206" -> "9218" 
-  "9214" -> "9227" 
-  "9199" -> "9197" 
-  "9209" -> "9206" 
-  "9215" -> "9225" 
-  "9220" -> "9214" 
-  "9200" -> "9199" 
-  "9210" -> "9209" 
-  "9216" -> "9215" 
-  "9221" -> "9220" 
-  "9180" -> "9187" 
-  "9180" -> "9194" 
-  "9201" -> "9200" 
-  "9212" -> "9210" 
-  "9218" -> "9216" 
-  "9222" -> "9221" 
-  "9181" -> "9180" 
-  "9185" -> "9192" 
-  "9192" -> "9227" 
-  "9203" -> "9201" 
-  "9223" -> "9222" 
-  "9186" -> "9185" 
-  "9225" -> "9223" 
-  "9187" -> "9189" 
-  "9189" -> "9186" 
-  "9171" -> "9177" 
+digraph "CallStaticBooleanMethod" {  
+"9194" [label = <(va_start,va_start(ap, mid))<SUB>1602</SUB>> ]
+"9198" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1603</SUB>> ]
+"9201" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1604</SUB>> ]
+"9220" [label = <(soa,soa(env))<SUB>1605</SUB>> ]
+"9223" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, ap)))<SUB>1606</SUB>> ]
+"9229" [label = <(RETURN,return result.GetZ();,return result.GetZ();)<SUB>1607</SUB>> ]
+"9199" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1603</SUB>> ]
+"9224" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1606</SUB>> ]
+"9230" [label = <(GetZ,result.GetZ())<SUB>1607</SUB>> ]
+"9231" [label = <(&lt;operator&gt;.fieldAccess,result.GetZ)<SUB>1607</SUB>> ]
+"9205" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1604</SUB>> ]
+"9233" [label = <(FIELD_IDENTIFIER,GetZ,GetZ)<SUB>1607</SUB>> ]
+"9206" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1604</SUB>> ]
+"9210" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1604</SUB>> ]
+"9217" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1604</SUB>> ]
+"9211" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1604</SUB>> ]
+"9212" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1604</SUB>> ]
+"9214" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1604</SUB>> ]
+"9188" [label = <(METHOD,CallStaticBooleanMethod)<SUB>1600</SUB>> ]
+"9234" [label = <(METHOD_RETURN,jboolean)<SUB>1600</SUB>> ]
+  "9194" -> "9199" 
+  "9198" -> "9201" 
+  "9201" -> "9206" 
+  "9201" -> "9220" 
+  "9220" -> "9224" 
+  "9223" -> "9233" 
+  "9229" -> "9234" 
+  "9199" -> "9198" 
+  "9224" -> "9223" 
+  "9230" -> "9229" 
+  "9231" -> "9230" 
+  "9205" -> "9212" 
+  "9205" -> "9220" 
+  "9233" -> "9231" 
+  "9206" -> "9205" 
+  "9210" -> "9217" 
+  "9217" -> "9234" 
+  "9211" -> "9210" 
+  "9212" -> "9214" 
+  "9214" -> "9211" 
+  "9188" -> "9194" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/159-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/159-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/159-cfg.dot	2023-06-07 19:35:01.497387162 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/159-cfg.dot	2023-06-07 19:35:08.037386514 +0330
@@ -1,53 +1,35 @@
-digraph "CallStaticObjectMethod" {  
-"9235" [label = <(va_start,va_start(ap, mid))<SUB>1655</SUB>> ]
-"9239" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1656</SUB>> ]
-"9242" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>1657</SUB>> ]
-"9261" [label = <(soa,soa(env))<SUB>1658</SUB>> ]
-"9264" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, ap)))<SUB>1659</SUB>> ]
-"9271" [label = <(&lt;operator&gt;.assignment,local_result = soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>1660</SUB>> ]
-"9283" [label = <(RETURN,return local_result;,return local_result;)<SUB>1661</SUB>> ]
-"9240" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1656</SUB>> ]
-"9265" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1659</SUB>> ]
-"9273" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>1660</SUB>> ]
-"9274" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>1660</SUB>> ]
-"9279" [label = <(GetL,result.GetL())<SUB>1660</SUB>> ]
-"9246" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1657</SUB>> ]
-"9275" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1660</SUB>> ]
-"9280" [label = <(&lt;operator&gt;.fieldAccess,result.GetL)<SUB>1660</SUB>> ]
-"9247" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1657</SUB>> ]
-"9251" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1657</SUB>> ]
-"9258" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>1657</SUB>> ]
-"9277" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1660</SUB>> ]
-"9282" [label = <(FIELD_IDENTIFIER,GetL,GetL)<SUB>1660</SUB>> ]
-"9252" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1657</SUB>> ]
-"9253" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1657</SUB>> ]
-"9255" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1657</SUB>> ]
-"9229" [label = <(METHOD,CallStaticObjectMethod)<SUB>1653</SUB>> ]
-"9285" [label = <(METHOD_RETURN,jobject)<SUB>1653</SUB>> ]
-  "9235" -> "9240" 
-  "9239" -> "9242" 
+digraph "CallStaticBooleanMethodV" {  
+"9242" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1611</SUB>> ]
+"9261" [label = <(soa,soa(env))<SUB>1612</SUB>> ]
+"9263" [label = <(RETURN,return InvokeWithVarArgs(soa, nullptr, mid, args).GetZ();,return InvokeWithVarArgs(soa, nullptr, mid, args).GetZ();)<SUB>1613</SUB>> ]
+"9264" [label = <(GetZ,InvokeWithVarArgs(soa, nullptr, mid, args).GetZ())<SUB>1613</SUB>> ]
+"9265" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, nullptr, mid, args).GetZ)<SUB>1613</SUB>> ]
+"9246" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1611</SUB>> ]
+"9266" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1613</SUB>> ]
+"9271" [label = <(FIELD_IDENTIFIER,GetZ,GetZ)<SUB>1613</SUB>> ]
+"9247" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1611</SUB>> ]
+"9251" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1611</SUB>> ]
+"9258" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1611</SUB>> ]
+"9252" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1611</SUB>> ]
+"9253" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1611</SUB>> ]
+"9255" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1611</SUB>> ]
+"9236" [label = <(METHOD,CallStaticBooleanMethodV)<SUB>1610</SUB>> ]
+"9272" [label = <(METHOD_RETURN,jboolean)<SUB>1610</SUB>> ]
   "9242" -> "9247" 
   "9242" -> "9261" 
-  "9261" -> "9265" 
-  "9264" -> "9277" 
-  "9271" -> "9283" 
-  "9283" -> "9285" 
-  "9240" -> "9239" 
+  "9261" -> "9266" 
+  "9263" -> "9272" 
+  "9264" -> "9263" 
   "9265" -> "9264" 
-  "9273" -> "9271" 
-  "9274" -> "9282" 
-  "9279" -> "9273" 
   "9246" -> "9253" 
   "9246" -> "9261" 
-  "9275" -> "9274" 
-  "9280" -> "9279" 
+  "9266" -> "9271" 
+  "9271" -> "9265" 
   "9247" -> "9246" 
   "9251" -> "9258" 
-  "9258" -> "9285" 
-  "9277" -> "9275" 
-  "9282" -> "9280" 
+  "9258" -> "9272" 
   "9252" -> "9251" 
   "9253" -> "9255" 
   "9255" -> "9252" 
-  "9229" -> "9235" 
+  "9236" -> "9242" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/16-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/16-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/16-cfg.dot	2023-06-07 19:35:01.337387177 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/16-cfg.dot	2023-06-07 19:35:07.907386529 +0330
@@ -1,5 +1,5 @@
-digraph "FindFieldID" {  
-"405" [label = <(METHOD,FindFieldID)<SUB>338</SUB>> ]
-"412" [label = <(METHOD_RETURN,jfieldID)<SUB>338</SUB>> ]
-  "405" -> "412" 
+digraph "EnsureInitialized" {  
+"260" [label = <(METHOD,EnsureInitialized)<SUB>301</SUB>> ]
+"264" [label = <(METHOD_RETURN,ANY)<SUB>301</SUB>> ]
+  "260" -> "264" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/160-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/160-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/160-cfg.dot	2023-06-07 19:35:01.497387162 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/160-cfg.dot	2023-06-07 19:35:08.037386514 +0330
@@ -1,45 +1,35 @@
-digraph "CallStaticObjectMethodV" {  
-"9293" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>1665</SUB>> ]
-"9312" [label = <(soa,soa(env))<SUB>1666</SUB>> ]
-"9315" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, args)))<SUB>1667</SUB>> ]
-"9321" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());)<SUB>1668</SUB>> ]
-"9316" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1667</SUB>> ]
-"9322" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>1668</SUB>> ]
-"9323" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>1668</SUB>> ]
-"9328" [label = <(GetL,result.GetL())<SUB>1668</SUB>> ]
-"9297" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1665</SUB>> ]
-"9324" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1668</SUB>> ]
-"9329" [label = <(&lt;operator&gt;.fieldAccess,result.GetL)<SUB>1668</SUB>> ]
-"9298" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1665</SUB>> ]
-"9302" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1665</SUB>> ]
-"9309" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>1665</SUB>> ]
-"9326" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1668</SUB>> ]
-"9331" [label = <(FIELD_IDENTIFIER,GetL,GetL)<SUB>1668</SUB>> ]
-"9303" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1665</SUB>> ]
-"9304" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1665</SUB>> ]
-"9306" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1665</SUB>> ]
-"9287" [label = <(METHOD,CallStaticObjectMethodV)<SUB>1664</SUB>> ]
-"9332" [label = <(METHOD_RETURN,jobject)<SUB>1664</SUB>> ]
-  "9293" -> "9298" 
-  "9293" -> "9312" 
-  "9312" -> "9316" 
-  "9315" -> "9326" 
-  "9321" -> "9332" 
-  "9316" -> "9315" 
-  "9322" -> "9321" 
-  "9323" -> "9331" 
-  "9328" -> "9322" 
-  "9297" -> "9304" 
-  "9297" -> "9312" 
-  "9324" -> "9323" 
-  "9329" -> "9328" 
-  "9298" -> "9297" 
-  "9302" -> "9309" 
-  "9309" -> "9332" 
-  "9326" -> "9324" 
-  "9331" -> "9329" 
+digraph "CallStaticBooleanMethodA" {  
+"9280" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1617</SUB>> ]
+"9299" [label = <(soa,soa(env))<SUB>1618</SUB>> ]
+"9301" [label = <(RETURN,return InvokeWithJValues(soa, nullptr, mid, args).GetZ();,return InvokeWithJValues(soa, nullptr, mid, args).GetZ();)<SUB>1619</SUB>> ]
+"9302" [label = <(GetZ,InvokeWithJValues(soa, nullptr, mid, args).GetZ())<SUB>1619</SUB>> ]
+"9303" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, nullptr, mid, args).GetZ)<SUB>1619</SUB>> ]
+"9284" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1617</SUB>> ]
+"9304" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1619</SUB>> ]
+"9309" [label = <(FIELD_IDENTIFIER,GetZ,GetZ)<SUB>1619</SUB>> ]
+"9285" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1617</SUB>> ]
+"9289" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1617</SUB>> ]
+"9296" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1617</SUB>> ]
+"9290" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1617</SUB>> ]
+"9291" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1617</SUB>> ]
+"9293" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1617</SUB>> ]
+"9274" [label = <(METHOD,CallStaticBooleanMethodA)<SUB>1616</SUB>> ]
+"9310" [label = <(METHOD_RETURN,jboolean)<SUB>1616</SUB>> ]
+  "9280" -> "9285" 
+  "9280" -> "9299" 
+  "9299" -> "9304" 
+  "9301" -> "9310" 
+  "9302" -> "9301" 
   "9303" -> "9302" 
-  "9304" -> "9306" 
-  "9306" -> "9303" 
-  "9287" -> "9293" 
+  "9284" -> "9291" 
+  "9284" -> "9299" 
+  "9304" -> "9309" 
+  "9309" -> "9303" 
+  "9285" -> "9284" 
+  "9289" -> "9296" 
+  "9296" -> "9310" 
+  "9290" -> "9289" 
+  "9291" -> "9293" 
+  "9293" -> "9290" 
+  "9274" -> "9280" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/161-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/161-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/161-cfg.dot	2023-06-07 19:35:01.497387162 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/161-cfg.dot	2023-06-07 19:35:08.037386514 +0330
@@ -1,45 +1,43 @@
-digraph "CallStaticObjectMethodA" {  
-"9340" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>1672</SUB>> ]
-"9359" [label = <(soa,soa(env))<SUB>1673</SUB>> ]
-"9362" [label = <(result,result(InvokeWithJValues(soa, nullptr, mid, args)))<SUB>1674</SUB>> ]
-"9368" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());)<SUB>1675</SUB>> ]
-"9363" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1674</SUB>> ]
-"9369" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>1675</SUB>> ]
-"9370" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>1675</SUB>> ]
-"9375" [label = <(GetL,result.GetL())<SUB>1675</SUB>> ]
-"9344" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1672</SUB>> ]
-"9371" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1675</SUB>> ]
-"9376" [label = <(&lt;operator&gt;.fieldAccess,result.GetL)<SUB>1675</SUB>> ]
-"9345" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1672</SUB>> ]
-"9349" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1672</SUB>> ]
-"9356" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>1672</SUB>> ]
-"9373" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1675</SUB>> ]
-"9378" [label = <(FIELD_IDENTIFIER,GetL,GetL)<SUB>1675</SUB>> ]
-"9350" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1672</SUB>> ]
-"9351" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1672</SUB>> ]
-"9353" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1672</SUB>> ]
-"9334" [label = <(METHOD,CallStaticObjectMethodA)<SUB>1671</SUB>> ]
-"9379" [label = <(METHOD_RETURN,jobject)<SUB>1671</SUB>> ]
-  "9340" -> "9345" 
-  "9340" -> "9359" 
-  "9359" -> "9363" 
-  "9362" -> "9373" 
-  "9368" -> "9379" 
-  "9363" -> "9362" 
-  "9369" -> "9368" 
-  "9370" -> "9378" 
-  "9375" -> "9369" 
-  "9344" -> "9351" 
-  "9344" -> "9359" 
-  "9371" -> "9370" 
-  "9376" -> "9375" 
-  "9345" -> "9344" 
-  "9349" -> "9356" 
-  "9356" -> "9379" 
-  "9373" -> "9371" 
-  "9378" -> "9376" 
-  "9350" -> "9349" 
-  "9351" -> "9353" 
-  "9353" -> "9350" 
-  "9334" -> "9340" 
+digraph "CallStaticByteMethod" {  
+"9318" [label = <(va_start,va_start(ap, mid))<SUB>1624</SUB>> ]
+"9322" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1625</SUB>> ]
+"9325" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1626</SUB>> ]
+"9344" [label = <(soa,soa(env))<SUB>1627</SUB>> ]
+"9347" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, ap)))<SUB>1628</SUB>> ]
+"9353" [label = <(RETURN,return result.GetB();,return result.GetB();)<SUB>1629</SUB>> ]
+"9323" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1625</SUB>> ]
+"9348" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1628</SUB>> ]
+"9354" [label = <(GetB,result.GetB())<SUB>1629</SUB>> ]
+"9355" [label = <(&lt;operator&gt;.fieldAccess,result.GetB)<SUB>1629</SUB>> ]
+"9329" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1626</SUB>> ]
+"9357" [label = <(FIELD_IDENTIFIER,GetB,GetB)<SUB>1629</SUB>> ]
+"9330" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1626</SUB>> ]
+"9334" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1626</SUB>> ]
+"9341" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1626</SUB>> ]
+"9335" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1626</SUB>> ]
+"9336" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1626</SUB>> ]
+"9338" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1626</SUB>> ]
+"9312" [label = <(METHOD,CallStaticByteMethod)<SUB>1622</SUB>> ]
+"9358" [label = <(METHOD_RETURN,jbyte)<SUB>1622</SUB>> ]
+  "9318" -> "9323" 
+  "9322" -> "9325" 
+  "9325" -> "9330" 
+  "9325" -> "9344" 
+  "9344" -> "9348" 
+  "9347" -> "9357" 
+  "9353" -> "9358" 
+  "9323" -> "9322" 
+  "9348" -> "9347" 
+  "9354" -> "9353" 
+  "9355" -> "9354" 
+  "9329" -> "9336" 
+  "9329" -> "9344" 
+  "9357" -> "9355" 
+  "9330" -> "9329" 
+  "9334" -> "9341" 
+  "9341" -> "9358" 
+  "9335" -> "9334" 
+  "9336" -> "9338" 
+  "9338" -> "9335" 
+  "9312" -> "9318" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/162-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/162-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/162-cfg.dot	2023-06-07 19:35:01.497387162 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/162-cfg.dot	2023-06-07 19:35:08.037386514 +0330
@@ -1,43 +1,35 @@
-digraph "CallStaticBooleanMethod" {  
-"9387" [label = <(va_start,va_start(ap, mid))<SUB>1680</SUB>> ]
-"9391" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1681</SUB>> ]
-"9394" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1682</SUB>> ]
-"9413" [label = <(soa,soa(env))<SUB>1683</SUB>> ]
-"9416" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, ap)))<SUB>1684</SUB>> ]
-"9422" [label = <(RETURN,return result.GetZ();,return result.GetZ();)<SUB>1685</SUB>> ]
-"9392" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1681</SUB>> ]
-"9417" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1684</SUB>> ]
-"9423" [label = <(GetZ,result.GetZ())<SUB>1685</SUB>> ]
-"9424" [label = <(&lt;operator&gt;.fieldAccess,result.GetZ)<SUB>1685</SUB>> ]
-"9398" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1682</SUB>> ]
-"9426" [label = <(FIELD_IDENTIFIER,GetZ,GetZ)<SUB>1685</SUB>> ]
-"9399" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1682</SUB>> ]
-"9403" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1682</SUB>> ]
-"9410" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1682</SUB>> ]
-"9404" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1682</SUB>> ]
-"9405" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1682</SUB>> ]
-"9407" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1682</SUB>> ]
-"9381" [label = <(METHOD,CallStaticBooleanMethod)<SUB>1678</SUB>> ]
-"9427" [label = <(METHOD_RETURN,jboolean)<SUB>1678</SUB>> ]
-  "9387" -> "9392" 
-  "9391" -> "9394" 
-  "9394" -> "9399" 
-  "9394" -> "9413" 
-  "9413" -> "9417" 
-  "9416" -> "9426" 
-  "9422" -> "9427" 
-  "9392" -> "9391" 
-  "9417" -> "9416" 
-  "9423" -> "9422" 
-  "9424" -> "9423" 
-  "9398" -> "9405" 
-  "9398" -> "9413" 
-  "9426" -> "9424" 
-  "9399" -> "9398" 
-  "9403" -> "9410" 
-  "9410" -> "9427" 
-  "9404" -> "9403" 
-  "9405" -> "9407" 
-  "9407" -> "9404" 
-  "9381" -> "9387" 
+digraph "CallStaticByteMethodV" {  
+"9366" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1633</SUB>> ]
+"9385" [label = <(soa,soa(env))<SUB>1634</SUB>> ]
+"9387" [label = <(RETURN,return InvokeWithVarArgs(soa, nullptr, mid, args).GetB();,return InvokeWithVarArgs(soa, nullptr, mid, args).GetB();)<SUB>1635</SUB>> ]
+"9388" [label = <(GetB,InvokeWithVarArgs(soa, nullptr, mid, args).GetB())<SUB>1635</SUB>> ]
+"9389" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, nullptr, mid, args).GetB)<SUB>1635</SUB>> ]
+"9370" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1633</SUB>> ]
+"9390" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1635</SUB>> ]
+"9395" [label = <(FIELD_IDENTIFIER,GetB,GetB)<SUB>1635</SUB>> ]
+"9371" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1633</SUB>> ]
+"9375" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1633</SUB>> ]
+"9382" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1633</SUB>> ]
+"9376" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1633</SUB>> ]
+"9377" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1633</SUB>> ]
+"9379" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1633</SUB>> ]
+"9360" [label = <(METHOD,CallStaticByteMethodV)<SUB>1632</SUB>> ]
+"9396" [label = <(METHOD_RETURN,jbyte)<SUB>1632</SUB>> ]
+  "9366" -> "9371" 
+  "9366" -> "9385" 
+  "9385" -> "9390" 
+  "9387" -> "9396" 
+  "9388" -> "9387" 
+  "9389" -> "9388" 
+  "9370" -> "9377" 
+  "9370" -> "9385" 
+  "9390" -> "9395" 
+  "9395" -> "9389" 
+  "9371" -> "9370" 
+  "9375" -> "9382" 
+  "9382" -> "9396" 
+  "9376" -> "9375" 
+  "9377" -> "9379" 
+  "9379" -> "9376" 
+  "9360" -> "9366" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/163-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/163-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/163-cfg.dot	2023-06-07 19:35:01.497387162 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/163-cfg.dot	2023-06-07 19:35:08.037386514 +0330
@@ -1,35 +1,35 @@
-digraph "CallStaticBooleanMethodV" {  
-"9435" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1689</SUB>> ]
-"9454" [label = <(soa,soa(env))<SUB>1690</SUB>> ]
-"9456" [label = <(RETURN,return InvokeWithVarArgs(soa, nullptr, mid, args).GetZ();,return InvokeWithVarArgs(soa, nullptr, mid, args).GetZ();)<SUB>1691</SUB>> ]
-"9457" [label = <(GetZ,InvokeWithVarArgs(soa, nullptr, mid, args).GetZ())<SUB>1691</SUB>> ]
-"9458" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, nullptr, mid, args).GetZ)<SUB>1691</SUB>> ]
-"9439" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1689</SUB>> ]
-"9459" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1691</SUB>> ]
-"9464" [label = <(FIELD_IDENTIFIER,GetZ,GetZ)<SUB>1691</SUB>> ]
-"9440" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1689</SUB>> ]
-"9444" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1689</SUB>> ]
-"9451" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1689</SUB>> ]
-"9445" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1689</SUB>> ]
-"9446" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1689</SUB>> ]
-"9448" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1689</SUB>> ]
-"9429" [label = <(METHOD,CallStaticBooleanMethodV)<SUB>1688</SUB>> ]
-"9465" [label = <(METHOD_RETURN,jboolean)<SUB>1688</SUB>> ]
-  "9435" -> "9440" 
-  "9435" -> "9454" 
-  "9454" -> "9459" 
-  "9456" -> "9465" 
-  "9457" -> "9456" 
-  "9458" -> "9457" 
-  "9439" -> "9446" 
-  "9439" -> "9454" 
-  "9459" -> "9464" 
-  "9464" -> "9458" 
-  "9440" -> "9439" 
-  "9444" -> "9451" 
-  "9451" -> "9465" 
-  "9445" -> "9444" 
-  "9446" -> "9448" 
-  "9448" -> "9445" 
-  "9429" -> "9435" 
+digraph "CallStaticByteMethodA" {  
+"9404" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1639</SUB>> ]
+"9423" [label = <(soa,soa(env))<SUB>1640</SUB>> ]
+"9425" [label = <(RETURN,return InvokeWithJValues(soa, nullptr, mid, args).GetB();,return InvokeWithJValues(soa, nullptr, mid, args).GetB();)<SUB>1641</SUB>> ]
+"9426" [label = <(GetB,InvokeWithJValues(soa, nullptr, mid, args).GetB())<SUB>1641</SUB>> ]
+"9427" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, nullptr, mid, args).GetB)<SUB>1641</SUB>> ]
+"9408" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1639</SUB>> ]
+"9428" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1641</SUB>> ]
+"9433" [label = <(FIELD_IDENTIFIER,GetB,GetB)<SUB>1641</SUB>> ]
+"9409" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1639</SUB>> ]
+"9413" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1639</SUB>> ]
+"9420" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1639</SUB>> ]
+"9414" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1639</SUB>> ]
+"9415" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1639</SUB>> ]
+"9417" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1639</SUB>> ]
+"9398" [label = <(METHOD,CallStaticByteMethodA)<SUB>1638</SUB>> ]
+"9434" [label = <(METHOD_RETURN,jbyte)<SUB>1638</SUB>> ]
+  "9404" -> "9409" 
+  "9404" -> "9423" 
+  "9423" -> "9428" 
+  "9425" -> "9434" 
+  "9426" -> "9425" 
+  "9427" -> "9426" 
+  "9408" -> "9415" 
+  "9408" -> "9423" 
+  "9428" -> "9433" 
+  "9433" -> "9427" 
+  "9409" -> "9408" 
+  "9413" -> "9420" 
+  "9420" -> "9434" 
+  "9414" -> "9413" 
+  "9415" -> "9417" 
+  "9417" -> "9414" 
+  "9398" -> "9404" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/164-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/164-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/164-cfg.dot	2023-06-07 19:35:01.497387162 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/164-cfg.dot	2023-06-07 19:35:08.037386514 +0330
@@ -1,35 +1,43 @@
-digraph "CallStaticBooleanMethodA" {  
-"9473" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1695</SUB>> ]
-"9492" [label = <(soa,soa(env))<SUB>1696</SUB>> ]
-"9494" [label = <(RETURN,return InvokeWithJValues(soa, nullptr, mid, args).GetZ();,return InvokeWithJValues(soa, nullptr, mid, args).GetZ();)<SUB>1697</SUB>> ]
-"9495" [label = <(GetZ,InvokeWithJValues(soa, nullptr, mid, args).GetZ())<SUB>1697</SUB>> ]
-"9496" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, nullptr, mid, args).GetZ)<SUB>1697</SUB>> ]
-"9477" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1695</SUB>> ]
-"9497" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1697</SUB>> ]
-"9502" [label = <(FIELD_IDENTIFIER,GetZ,GetZ)<SUB>1697</SUB>> ]
-"9478" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1695</SUB>> ]
-"9482" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1695</SUB>> ]
-"9489" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1695</SUB>> ]
-"9483" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1695</SUB>> ]
-"9484" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1695</SUB>> ]
-"9486" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1695</SUB>> ]
-"9467" [label = <(METHOD,CallStaticBooleanMethodA)<SUB>1694</SUB>> ]
-"9503" [label = <(METHOD_RETURN,jboolean)<SUB>1694</SUB>> ]
-  "9473" -> "9478" 
-  "9473" -> "9492" 
-  "9492" -> "9497" 
-  "9494" -> "9503" 
-  "9495" -> "9494" 
-  "9496" -> "9495" 
-  "9477" -> "9484" 
-  "9477" -> "9492" 
-  "9497" -> "9502" 
-  "9502" -> "9496" 
+digraph "CallStaticCharMethod" {  
+"9442" [label = <(va_start,va_start(ap, mid))<SUB>1646</SUB>> ]
+"9446" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1647</SUB>> ]
+"9449" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1648</SUB>> ]
+"9468" [label = <(soa,soa(env))<SUB>1649</SUB>> ]
+"9471" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, ap)))<SUB>1650</SUB>> ]
+"9477" [label = <(RETURN,return result.GetC();,return result.GetC();)<SUB>1651</SUB>> ]
+"9447" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1647</SUB>> ]
+"9472" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1650</SUB>> ]
+"9478" [label = <(GetC,result.GetC())<SUB>1651</SUB>> ]
+"9479" [label = <(&lt;operator&gt;.fieldAccess,result.GetC)<SUB>1651</SUB>> ]
+"9453" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1648</SUB>> ]
+"9481" [label = <(FIELD_IDENTIFIER,GetC,GetC)<SUB>1651</SUB>> ]
+"9454" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1648</SUB>> ]
+"9458" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1648</SUB>> ]
+"9465" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1648</SUB>> ]
+"9459" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1648</SUB>> ]
+"9460" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1648</SUB>> ]
+"9462" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1648</SUB>> ]
+"9436" [label = <(METHOD,CallStaticCharMethod)<SUB>1644</SUB>> ]
+"9482" [label = <(METHOD_RETURN,jchar)<SUB>1644</SUB>> ]
+  "9442" -> "9447" 
+  "9446" -> "9449" 
+  "9449" -> "9454" 
+  "9449" -> "9468" 
+  "9468" -> "9472" 
+  "9471" -> "9481" 
+  "9477" -> "9482" 
+  "9447" -> "9446" 
+  "9472" -> "9471" 
   "9478" -> "9477" 
-  "9482" -> "9489" 
-  "9489" -> "9503" 
-  "9483" -> "9482" 
-  "9484" -> "9486" 
-  "9486" -> "9483" 
-  "9467" -> "9473" 
+  "9479" -> "9478" 
+  "9453" -> "9460" 
+  "9453" -> "9468" 
+  "9481" -> "9479" 
+  "9454" -> "9453" 
+  "9458" -> "9465" 
+  "9465" -> "9482" 
+  "9459" -> "9458" 
+  "9460" -> "9462" 
+  "9462" -> "9459" 
+  "9436" -> "9442" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/165-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/165-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/165-cfg.dot	2023-06-07 19:35:01.507387161 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/165-cfg.dot	2023-06-07 19:35:08.037386514 +0330
@@ -1,43 +1,35 @@
-digraph "CallStaticByteMethod" {  
-"9511" [label = <(va_start,va_start(ap, mid))<SUB>1702</SUB>> ]
-"9515" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1703</SUB>> ]
-"9518" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1704</SUB>> ]
-"9537" [label = <(soa,soa(env))<SUB>1705</SUB>> ]
-"9540" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, ap)))<SUB>1706</SUB>> ]
-"9546" [label = <(RETURN,return result.GetB();,return result.GetB();)<SUB>1707</SUB>> ]
-"9516" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1703</SUB>> ]
-"9541" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1706</SUB>> ]
-"9547" [label = <(GetB,result.GetB())<SUB>1707</SUB>> ]
-"9548" [label = <(&lt;operator&gt;.fieldAccess,result.GetB)<SUB>1707</SUB>> ]
-"9522" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1704</SUB>> ]
-"9550" [label = <(FIELD_IDENTIFIER,GetB,GetB)<SUB>1707</SUB>> ]
-"9523" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1704</SUB>> ]
-"9527" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1704</SUB>> ]
-"9534" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1704</SUB>> ]
-"9528" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1704</SUB>> ]
-"9529" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1704</SUB>> ]
-"9531" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1704</SUB>> ]
-"9505" [label = <(METHOD,CallStaticByteMethod)<SUB>1700</SUB>> ]
-"9551" [label = <(METHOD_RETURN,jbyte)<SUB>1700</SUB>> ]
-  "9511" -> "9516" 
-  "9515" -> "9518" 
-  "9518" -> "9523" 
-  "9518" -> "9537" 
-  "9537" -> "9541" 
-  "9540" -> "9550" 
-  "9546" -> "9551" 
-  "9516" -> "9515" 
-  "9541" -> "9540" 
-  "9547" -> "9546" 
-  "9548" -> "9547" 
-  "9522" -> "9529" 
-  "9522" -> "9537" 
-  "9550" -> "9548" 
-  "9523" -> "9522" 
-  "9527" -> "9534" 
-  "9534" -> "9551" 
-  "9528" -> "9527" 
-  "9529" -> "9531" 
-  "9531" -> "9528" 
-  "9505" -> "9511" 
+digraph "CallStaticCharMethodV" {  
+"9490" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1655</SUB>> ]
+"9509" [label = <(soa,soa(env))<SUB>1656</SUB>> ]
+"9511" [label = <(RETURN,return InvokeWithVarArgs(soa, nullptr, mid, args).GetC();,return InvokeWithVarArgs(soa, nullptr, mid, args).GetC();)<SUB>1657</SUB>> ]
+"9512" [label = <(GetC,InvokeWithVarArgs(soa, nullptr, mid, args).GetC())<SUB>1657</SUB>> ]
+"9513" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, nullptr, mid, args).GetC)<SUB>1657</SUB>> ]
+"9494" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1655</SUB>> ]
+"9514" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1657</SUB>> ]
+"9519" [label = <(FIELD_IDENTIFIER,GetC,GetC)<SUB>1657</SUB>> ]
+"9495" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1655</SUB>> ]
+"9499" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1655</SUB>> ]
+"9506" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1655</SUB>> ]
+"9500" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1655</SUB>> ]
+"9501" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1655</SUB>> ]
+"9503" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1655</SUB>> ]
+"9484" [label = <(METHOD,CallStaticCharMethodV)<SUB>1654</SUB>> ]
+"9520" [label = <(METHOD_RETURN,jchar)<SUB>1654</SUB>> ]
+  "9490" -> "9495" 
+  "9490" -> "9509" 
+  "9509" -> "9514" 
+  "9511" -> "9520" 
+  "9512" -> "9511" 
+  "9513" -> "9512" 
+  "9494" -> "9501" 
+  "9494" -> "9509" 
+  "9514" -> "9519" 
+  "9519" -> "9513" 
+  "9495" -> "9494" 
+  "9499" -> "9506" 
+  "9506" -> "9520" 
+  "9500" -> "9499" 
+  "9501" -> "9503" 
+  "9503" -> "9500" 
+  "9484" -> "9490" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/166-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/166-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/166-cfg.dot	2023-06-07 19:35:01.507387161 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/166-cfg.dot	2023-06-07 19:35:08.037386514 +0330
@@ -1,35 +1,35 @@
-digraph "CallStaticByteMethodV" {  
-"9559" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1711</SUB>> ]
-"9578" [label = <(soa,soa(env))<SUB>1712</SUB>> ]
-"9580" [label = <(RETURN,return InvokeWithVarArgs(soa, nullptr, mid, args).GetB();,return InvokeWithVarArgs(soa, nullptr, mid, args).GetB();)<SUB>1713</SUB>> ]
-"9581" [label = <(GetB,InvokeWithVarArgs(soa, nullptr, mid, args).GetB())<SUB>1713</SUB>> ]
-"9582" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, nullptr, mid, args).GetB)<SUB>1713</SUB>> ]
-"9563" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1711</SUB>> ]
-"9583" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1713</SUB>> ]
-"9588" [label = <(FIELD_IDENTIFIER,GetB,GetB)<SUB>1713</SUB>> ]
-"9564" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1711</SUB>> ]
-"9568" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1711</SUB>> ]
-"9575" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1711</SUB>> ]
-"9569" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1711</SUB>> ]
-"9570" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1711</SUB>> ]
-"9572" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1711</SUB>> ]
-"9553" [label = <(METHOD,CallStaticByteMethodV)<SUB>1710</SUB>> ]
-"9589" [label = <(METHOD_RETURN,jbyte)<SUB>1710</SUB>> ]
-  "9559" -> "9564" 
-  "9559" -> "9578" 
-  "9578" -> "9583" 
-  "9580" -> "9589" 
-  "9581" -> "9580" 
-  "9582" -> "9581" 
-  "9563" -> "9570" 
-  "9563" -> "9578" 
-  "9583" -> "9588" 
-  "9588" -> "9582" 
-  "9564" -> "9563" 
-  "9568" -> "9575" 
-  "9575" -> "9589" 
-  "9569" -> "9568" 
-  "9570" -> "9572" 
-  "9572" -> "9569" 
-  "9553" -> "9559" 
+digraph "CallStaticCharMethodA" {  
+"9528" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1661</SUB>> ]
+"9547" [label = <(soa,soa(env))<SUB>1662</SUB>> ]
+"9549" [label = <(RETURN,return InvokeWithJValues(soa, nullptr, mid, args).GetC();,return InvokeWithJValues(soa, nullptr, mid, args).GetC();)<SUB>1663</SUB>> ]
+"9550" [label = <(GetC,InvokeWithJValues(soa, nullptr, mid, args).GetC())<SUB>1663</SUB>> ]
+"9551" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, nullptr, mid, args).GetC)<SUB>1663</SUB>> ]
+"9532" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1661</SUB>> ]
+"9552" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1663</SUB>> ]
+"9557" [label = <(FIELD_IDENTIFIER,GetC,GetC)<SUB>1663</SUB>> ]
+"9533" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1661</SUB>> ]
+"9537" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1661</SUB>> ]
+"9544" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1661</SUB>> ]
+"9538" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1661</SUB>> ]
+"9539" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1661</SUB>> ]
+"9541" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1661</SUB>> ]
+"9522" [label = <(METHOD,CallStaticCharMethodA)<SUB>1660</SUB>> ]
+"9558" [label = <(METHOD_RETURN,jchar)<SUB>1660</SUB>> ]
+  "9528" -> "9533" 
+  "9528" -> "9547" 
+  "9547" -> "9552" 
+  "9549" -> "9558" 
+  "9550" -> "9549" 
+  "9551" -> "9550" 
+  "9532" -> "9539" 
+  "9532" -> "9547" 
+  "9552" -> "9557" 
+  "9557" -> "9551" 
+  "9533" -> "9532" 
+  "9537" -> "9544" 
+  "9544" -> "9558" 
+  "9538" -> "9537" 
+  "9539" -> "9541" 
+  "9541" -> "9538" 
+  "9522" -> "9528" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/167-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/167-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/167-cfg.dot	2023-06-07 19:35:01.507387161 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/167-cfg.dot	2023-06-07 19:35:08.037386514 +0330
@@ -1,35 +1,43 @@
-digraph "CallStaticByteMethodA" {  
-"9597" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1717</SUB>> ]
-"9616" [label = <(soa,soa(env))<SUB>1718</SUB>> ]
-"9618" [label = <(RETURN,return InvokeWithJValues(soa, nullptr, mid, args).GetB();,return InvokeWithJValues(soa, nullptr, mid, args).GetB();)<SUB>1719</SUB>> ]
-"9619" [label = <(GetB,InvokeWithJValues(soa, nullptr, mid, args).GetB())<SUB>1719</SUB>> ]
-"9620" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, nullptr, mid, args).GetB)<SUB>1719</SUB>> ]
-"9601" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1717</SUB>> ]
-"9621" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1719</SUB>> ]
-"9626" [label = <(FIELD_IDENTIFIER,GetB,GetB)<SUB>1719</SUB>> ]
-"9602" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1717</SUB>> ]
-"9606" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1717</SUB>> ]
-"9613" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1717</SUB>> ]
-"9607" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1717</SUB>> ]
-"9608" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1717</SUB>> ]
-"9610" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1717</SUB>> ]
-"9591" [label = <(METHOD,CallStaticByteMethodA)<SUB>1716</SUB>> ]
-"9627" [label = <(METHOD_RETURN,jbyte)<SUB>1716</SUB>> ]
-  "9597" -> "9602" 
-  "9597" -> "9616" 
-  "9616" -> "9621" 
-  "9618" -> "9627" 
-  "9619" -> "9618" 
-  "9620" -> "9619" 
-  "9601" -> "9608" 
-  "9601" -> "9616" 
-  "9621" -> "9626" 
-  "9626" -> "9620" 
+digraph "CallStaticShortMethod" {  
+"9566" [label = <(va_start,va_start(ap, mid))<SUB>1668</SUB>> ]
+"9570" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1669</SUB>> ]
+"9573" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1670</SUB>> ]
+"9592" [label = <(soa,soa(env))<SUB>1671</SUB>> ]
+"9595" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, ap)))<SUB>1672</SUB>> ]
+"9601" [label = <(RETURN,return result.GetS();,return result.GetS();)<SUB>1673</SUB>> ]
+"9571" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1669</SUB>> ]
+"9596" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1672</SUB>> ]
+"9602" [label = <(GetS,result.GetS())<SUB>1673</SUB>> ]
+"9603" [label = <(&lt;operator&gt;.fieldAccess,result.GetS)<SUB>1673</SUB>> ]
+"9577" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1670</SUB>> ]
+"9605" [label = <(FIELD_IDENTIFIER,GetS,GetS)<SUB>1673</SUB>> ]
+"9578" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1670</SUB>> ]
+"9582" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1670</SUB>> ]
+"9589" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1670</SUB>> ]
+"9583" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1670</SUB>> ]
+"9584" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1670</SUB>> ]
+"9586" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1670</SUB>> ]
+"9560" [label = <(METHOD,CallStaticShortMethod)<SUB>1666</SUB>> ]
+"9606" [label = <(METHOD_RETURN,jshort)<SUB>1666</SUB>> ]
+  "9566" -> "9571" 
+  "9570" -> "9573" 
+  "9573" -> "9578" 
+  "9573" -> "9592" 
+  "9592" -> "9596" 
+  "9595" -> "9605" 
+  "9601" -> "9606" 
+  "9571" -> "9570" 
+  "9596" -> "9595" 
   "9602" -> "9601" 
-  "9606" -> "9613" 
-  "9613" -> "9627" 
-  "9607" -> "9606" 
-  "9608" -> "9610" 
-  "9610" -> "9607" 
-  "9591" -> "9597" 
+  "9603" -> "9602" 
+  "9577" -> "9584" 
+  "9577" -> "9592" 
+  "9605" -> "9603" 
+  "9578" -> "9577" 
+  "9582" -> "9589" 
+  "9589" -> "9606" 
+  "9583" -> "9582" 
+  "9584" -> "9586" 
+  "9586" -> "9583" 
+  "9560" -> "9566" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/168-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/168-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/168-cfg.dot	2023-06-07 19:35:01.507387161 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/168-cfg.dot	2023-06-07 19:35:08.037386514 +0330
@@ -1,43 +1,35 @@
-digraph "CallStaticCharMethod" {  
-"9635" [label = <(va_start,va_start(ap, mid))<SUB>1724</SUB>> ]
-"9639" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1725</SUB>> ]
-"9642" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1726</SUB>> ]
-"9661" [label = <(soa,soa(env))<SUB>1727</SUB>> ]
-"9664" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, ap)))<SUB>1728</SUB>> ]
-"9670" [label = <(RETURN,return result.GetC();,return result.GetC();)<SUB>1729</SUB>> ]
-"9640" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1725</SUB>> ]
-"9665" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1728</SUB>> ]
-"9671" [label = <(GetC,result.GetC())<SUB>1729</SUB>> ]
-"9672" [label = <(&lt;operator&gt;.fieldAccess,result.GetC)<SUB>1729</SUB>> ]
-"9646" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1726</SUB>> ]
-"9674" [label = <(FIELD_IDENTIFIER,GetC,GetC)<SUB>1729</SUB>> ]
-"9647" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1726</SUB>> ]
-"9651" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1726</SUB>> ]
-"9658" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1726</SUB>> ]
-"9652" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1726</SUB>> ]
-"9653" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1726</SUB>> ]
-"9655" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1726</SUB>> ]
-"9629" [label = <(METHOD,CallStaticCharMethod)<SUB>1722</SUB>> ]
-"9675" [label = <(METHOD_RETURN,jchar)<SUB>1722</SUB>> ]
-  "9635" -> "9640" 
-  "9639" -> "9642" 
-  "9642" -> "9647" 
-  "9642" -> "9661" 
-  "9661" -> "9665" 
-  "9664" -> "9674" 
-  "9670" -> "9675" 
-  "9640" -> "9639" 
-  "9665" -> "9664" 
-  "9671" -> "9670" 
-  "9672" -> "9671" 
-  "9646" -> "9653" 
-  "9646" -> "9661" 
-  "9674" -> "9672" 
-  "9647" -> "9646" 
-  "9651" -> "9658" 
-  "9658" -> "9675" 
-  "9652" -> "9651" 
-  "9653" -> "9655" 
-  "9655" -> "9652" 
-  "9629" -> "9635" 
+digraph "CallStaticShortMethodV" {  
+"9614" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1677</SUB>> ]
+"9633" [label = <(soa,soa(env))<SUB>1678</SUB>> ]
+"9635" [label = <(RETURN,return InvokeWithVarArgs(soa, nullptr, mid, args).GetS();,return InvokeWithVarArgs(soa, nullptr, mid, args).GetS();)<SUB>1679</SUB>> ]
+"9636" [label = <(GetS,InvokeWithVarArgs(soa, nullptr, mid, args).GetS())<SUB>1679</SUB>> ]
+"9637" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, nullptr, mid, args).GetS)<SUB>1679</SUB>> ]
+"9618" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1677</SUB>> ]
+"9638" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1679</SUB>> ]
+"9643" [label = <(FIELD_IDENTIFIER,GetS,GetS)<SUB>1679</SUB>> ]
+"9619" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1677</SUB>> ]
+"9623" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1677</SUB>> ]
+"9630" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1677</SUB>> ]
+"9624" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1677</SUB>> ]
+"9625" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1677</SUB>> ]
+"9627" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1677</SUB>> ]
+"9608" [label = <(METHOD,CallStaticShortMethodV)<SUB>1676</SUB>> ]
+"9644" [label = <(METHOD_RETURN,jshort)<SUB>1676</SUB>> ]
+  "9614" -> "9619" 
+  "9614" -> "9633" 
+  "9633" -> "9638" 
+  "9635" -> "9644" 
+  "9636" -> "9635" 
+  "9637" -> "9636" 
+  "9618" -> "9625" 
+  "9618" -> "9633" 
+  "9638" -> "9643" 
+  "9643" -> "9637" 
+  "9619" -> "9618" 
+  "9623" -> "9630" 
+  "9630" -> "9644" 
+  "9624" -> "9623" 
+  "9625" -> "9627" 
+  "9627" -> "9624" 
+  "9608" -> "9614" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/169-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/169-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/169-cfg.dot	2023-06-07 19:35:01.507387161 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/169-cfg.dot	2023-06-07 19:35:08.037386514 +0330
@@ -1,35 +1,35 @@
-digraph "CallStaticCharMethodV" {  
-"9683" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1733</SUB>> ]
-"9702" [label = <(soa,soa(env))<SUB>1734</SUB>> ]
-"9704" [label = <(RETURN,return InvokeWithVarArgs(soa, nullptr, mid, args).GetC();,return InvokeWithVarArgs(soa, nullptr, mid, args).GetC();)<SUB>1735</SUB>> ]
-"9705" [label = <(GetC,InvokeWithVarArgs(soa, nullptr, mid, args).GetC())<SUB>1735</SUB>> ]
-"9706" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, nullptr, mid, args).GetC)<SUB>1735</SUB>> ]
-"9687" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1733</SUB>> ]
-"9707" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1735</SUB>> ]
-"9712" [label = <(FIELD_IDENTIFIER,GetC,GetC)<SUB>1735</SUB>> ]
-"9688" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1733</SUB>> ]
-"9692" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1733</SUB>> ]
-"9699" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1733</SUB>> ]
-"9693" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1733</SUB>> ]
-"9694" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1733</SUB>> ]
-"9696" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1733</SUB>> ]
-"9677" [label = <(METHOD,CallStaticCharMethodV)<SUB>1732</SUB>> ]
-"9713" [label = <(METHOD_RETURN,jchar)<SUB>1732</SUB>> ]
-  "9683" -> "9688" 
-  "9683" -> "9702" 
-  "9702" -> "9707" 
-  "9704" -> "9713" 
-  "9705" -> "9704" 
-  "9706" -> "9705" 
-  "9687" -> "9694" 
-  "9687" -> "9702" 
-  "9707" -> "9712" 
-  "9712" -> "9706" 
-  "9688" -> "9687" 
-  "9692" -> "9699" 
-  "9699" -> "9713" 
-  "9693" -> "9692" 
-  "9694" -> "9696" 
-  "9696" -> "9693" 
-  "9677" -> "9683" 
+digraph "CallStaticShortMethodA" {  
+"9652" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1683</SUB>> ]
+"9671" [label = <(soa,soa(env))<SUB>1684</SUB>> ]
+"9673" [label = <(RETURN,return InvokeWithJValues(soa, nullptr, mid, args).GetS();,return InvokeWithJValues(soa, nullptr, mid, args).GetS();)<SUB>1685</SUB>> ]
+"9674" [label = <(GetS,InvokeWithJValues(soa, nullptr, mid, args).GetS())<SUB>1685</SUB>> ]
+"9675" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, nullptr, mid, args).GetS)<SUB>1685</SUB>> ]
+"9656" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1683</SUB>> ]
+"9676" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1685</SUB>> ]
+"9681" [label = <(FIELD_IDENTIFIER,GetS,GetS)<SUB>1685</SUB>> ]
+"9657" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1683</SUB>> ]
+"9661" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1683</SUB>> ]
+"9668" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1683</SUB>> ]
+"9662" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1683</SUB>> ]
+"9663" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1683</SUB>> ]
+"9665" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1683</SUB>> ]
+"9646" [label = <(METHOD,CallStaticShortMethodA)<SUB>1682</SUB>> ]
+"9682" [label = <(METHOD_RETURN,jshort)<SUB>1682</SUB>> ]
+  "9652" -> "9657" 
+  "9652" -> "9671" 
+  "9671" -> "9676" 
+  "9673" -> "9682" 
+  "9674" -> "9673" 
+  "9675" -> "9674" 
+  "9656" -> "9663" 
+  "9656" -> "9671" 
+  "9676" -> "9681" 
+  "9681" -> "9675" 
+  "9657" -> "9656" 
+  "9661" -> "9668" 
+  "9668" -> "9682" 
+  "9662" -> "9661" 
+  "9663" -> "9665" 
+  "9665" -> "9662" 
+  "9646" -> "9652" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/17-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/17-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/17-cfg.dot	2023-06-07 19:35:01.337387177 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/17-cfg.dot	2023-06-07 19:35:07.907386529 +0330
@@ -1,5 +1,5 @@
-digraph "ThrowAIOOBE" {  
-"417" [label = <(METHOD,ThrowAIOOBE)<SUB>344</SUB>> ]
-"424" [label = <(METHOD_RETURN,void)<SUB>344</SUB>> ]
-  "417" -> "424" 
+digraph "hs" {  
+"268" [label = <(METHOD,hs)<SUB>306</SUB>> ]
+"271" [label = <(METHOD_RETURN,StackHandleScope&lt;1&gt;)<SUB>306</SUB>> ]
+  "268" -> "271" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/170-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/170-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/170-cfg.dot	2023-06-07 19:35:01.507387161 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/170-cfg.dot	2023-06-07 19:35:08.037386514 +0330
@@ -1,35 +1,43 @@
-digraph "CallStaticCharMethodA" {  
-"9721" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1739</SUB>> ]
-"9740" [label = <(soa,soa(env))<SUB>1740</SUB>> ]
-"9742" [label = <(RETURN,return InvokeWithJValues(soa, nullptr, mid, args).GetC();,return InvokeWithJValues(soa, nullptr, mid, args).GetC();)<SUB>1741</SUB>> ]
-"9743" [label = <(GetC,InvokeWithJValues(soa, nullptr, mid, args).GetC())<SUB>1741</SUB>> ]
-"9744" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, nullptr, mid, args).GetC)<SUB>1741</SUB>> ]
-"9725" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1739</SUB>> ]
-"9745" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1741</SUB>> ]
-"9750" [label = <(FIELD_IDENTIFIER,GetC,GetC)<SUB>1741</SUB>> ]
-"9726" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1739</SUB>> ]
-"9730" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1739</SUB>> ]
-"9737" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1739</SUB>> ]
-"9731" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1739</SUB>> ]
-"9732" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1739</SUB>> ]
-"9734" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1739</SUB>> ]
-"9715" [label = <(METHOD,CallStaticCharMethodA)<SUB>1738</SUB>> ]
-"9751" [label = <(METHOD_RETURN,jchar)<SUB>1738</SUB>> ]
-  "9721" -> "9726" 
-  "9721" -> "9740" 
-  "9740" -> "9745" 
-  "9742" -> "9751" 
-  "9743" -> "9742" 
-  "9744" -> "9743" 
-  "9725" -> "9732" 
-  "9725" -> "9740" 
-  "9745" -> "9750" 
-  "9750" -> "9744" 
+digraph "CallStaticIntMethod" {  
+"9690" [label = <(va_start,va_start(ap, mid))<SUB>1690</SUB>> ]
+"9694" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1691</SUB>> ]
+"9697" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1692</SUB>> ]
+"9716" [label = <(soa,soa(env))<SUB>1693</SUB>> ]
+"9719" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, ap)))<SUB>1694</SUB>> ]
+"9725" [label = <(RETURN,return result.GetI();,return result.GetI();)<SUB>1695</SUB>> ]
+"9695" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1691</SUB>> ]
+"9720" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1694</SUB>> ]
+"9726" [label = <(GetI,result.GetI())<SUB>1695</SUB>> ]
+"9727" [label = <(&lt;operator&gt;.fieldAccess,result.GetI)<SUB>1695</SUB>> ]
+"9701" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1692</SUB>> ]
+"9729" [label = <(FIELD_IDENTIFIER,GetI,GetI)<SUB>1695</SUB>> ]
+"9702" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1692</SUB>> ]
+"9706" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1692</SUB>> ]
+"9713" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1692</SUB>> ]
+"9707" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1692</SUB>> ]
+"9708" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1692</SUB>> ]
+"9710" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1692</SUB>> ]
+"9684" [label = <(METHOD,CallStaticIntMethod)<SUB>1688</SUB>> ]
+"9730" [label = <(METHOD_RETURN,jint)<SUB>1688</SUB>> ]
+  "9690" -> "9695" 
+  "9694" -> "9697" 
+  "9697" -> "9702" 
+  "9697" -> "9716" 
+  "9716" -> "9720" 
+  "9719" -> "9729" 
+  "9725" -> "9730" 
+  "9695" -> "9694" 
+  "9720" -> "9719" 
   "9726" -> "9725" 
-  "9730" -> "9737" 
-  "9737" -> "9751" 
-  "9731" -> "9730" 
-  "9732" -> "9734" 
-  "9734" -> "9731" 
-  "9715" -> "9721" 
+  "9727" -> "9726" 
+  "9701" -> "9708" 
+  "9701" -> "9716" 
+  "9729" -> "9727" 
+  "9702" -> "9701" 
+  "9706" -> "9713" 
+  "9713" -> "9730" 
+  "9707" -> "9706" 
+  "9708" -> "9710" 
+  "9710" -> "9707" 
+  "9684" -> "9690" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/171-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/171-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/171-cfg.dot	2023-06-07 19:35:01.507387161 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/171-cfg.dot	2023-06-07 19:35:08.047386515 +0330
@@ -1,43 +1,35 @@
-digraph "CallStaticShortMethod" {  
-"9759" [label = <(va_start,va_start(ap, mid))<SUB>1746</SUB>> ]
-"9763" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1747</SUB>> ]
-"9766" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1748</SUB>> ]
-"9785" [label = <(soa,soa(env))<SUB>1749</SUB>> ]
-"9788" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, ap)))<SUB>1750</SUB>> ]
-"9794" [label = <(RETURN,return result.GetS();,return result.GetS();)<SUB>1751</SUB>> ]
-"9764" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1747</SUB>> ]
-"9789" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1750</SUB>> ]
-"9795" [label = <(GetS,result.GetS())<SUB>1751</SUB>> ]
-"9796" [label = <(&lt;operator&gt;.fieldAccess,result.GetS)<SUB>1751</SUB>> ]
-"9770" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1748</SUB>> ]
-"9798" [label = <(FIELD_IDENTIFIER,GetS,GetS)<SUB>1751</SUB>> ]
-"9771" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1748</SUB>> ]
-"9775" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1748</SUB>> ]
-"9782" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1748</SUB>> ]
-"9776" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1748</SUB>> ]
-"9777" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1748</SUB>> ]
-"9779" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1748</SUB>> ]
-"9753" [label = <(METHOD,CallStaticShortMethod)<SUB>1744</SUB>> ]
-"9799" [label = <(METHOD_RETURN,jshort)<SUB>1744</SUB>> ]
-  "9759" -> "9764" 
-  "9763" -> "9766" 
-  "9766" -> "9771" 
-  "9766" -> "9785" 
-  "9785" -> "9789" 
-  "9788" -> "9798" 
-  "9794" -> "9799" 
-  "9764" -> "9763" 
-  "9789" -> "9788" 
-  "9795" -> "9794" 
-  "9796" -> "9795" 
-  "9770" -> "9777" 
-  "9770" -> "9785" 
-  "9798" -> "9796" 
-  "9771" -> "9770" 
-  "9775" -> "9782" 
-  "9782" -> "9799" 
-  "9776" -> "9775" 
-  "9777" -> "9779" 
-  "9779" -> "9776" 
-  "9753" -> "9759" 
+digraph "CallStaticIntMethodV" {  
+"9738" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1699</SUB>> ]
+"9757" [label = <(soa,soa(env))<SUB>1700</SUB>> ]
+"9759" [label = <(RETURN,return InvokeWithVarArgs(soa, nullptr, mid, args).GetI();,return InvokeWithVarArgs(soa, nullptr, mid, args).GetI();)<SUB>1701</SUB>> ]
+"9760" [label = <(GetI,InvokeWithVarArgs(soa, nullptr, mid, args).GetI())<SUB>1701</SUB>> ]
+"9761" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, nullptr, mid, args).GetI)<SUB>1701</SUB>> ]
+"9742" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1699</SUB>> ]
+"9762" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1701</SUB>> ]
+"9767" [label = <(FIELD_IDENTIFIER,GetI,GetI)<SUB>1701</SUB>> ]
+"9743" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1699</SUB>> ]
+"9747" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1699</SUB>> ]
+"9754" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1699</SUB>> ]
+"9748" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1699</SUB>> ]
+"9749" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1699</SUB>> ]
+"9751" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1699</SUB>> ]
+"9732" [label = <(METHOD,CallStaticIntMethodV)<SUB>1698</SUB>> ]
+"9768" [label = <(METHOD_RETURN,jint)<SUB>1698</SUB>> ]
+  "9738" -> "9743" 
+  "9738" -> "9757" 
+  "9757" -> "9762" 
+  "9759" -> "9768" 
+  "9760" -> "9759" 
+  "9761" -> "9760" 
+  "9742" -> "9749" 
+  "9742" -> "9757" 
+  "9762" -> "9767" 
+  "9767" -> "9761" 
+  "9743" -> "9742" 
+  "9747" -> "9754" 
+  "9754" -> "9768" 
+  "9748" -> "9747" 
+  "9749" -> "9751" 
+  "9751" -> "9748" 
+  "9732" -> "9738" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/172-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/172-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/172-cfg.dot	2023-06-07 19:35:01.507387161 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/172-cfg.dot	2023-06-07 19:35:08.047386515 +0330
@@ -1,35 +1,35 @@
-digraph "CallStaticShortMethodV" {  
-"9807" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1755</SUB>> ]
-"9826" [label = <(soa,soa(env))<SUB>1756</SUB>> ]
-"9828" [label = <(RETURN,return InvokeWithVarArgs(soa, nullptr, mid, args).GetS();,return InvokeWithVarArgs(soa, nullptr, mid, args).GetS();)<SUB>1757</SUB>> ]
-"9829" [label = <(GetS,InvokeWithVarArgs(soa, nullptr, mid, args).GetS())<SUB>1757</SUB>> ]
-"9830" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, nullptr, mid, args).GetS)<SUB>1757</SUB>> ]
-"9811" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1755</SUB>> ]
-"9831" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1757</SUB>> ]
-"9836" [label = <(FIELD_IDENTIFIER,GetS,GetS)<SUB>1757</SUB>> ]
-"9812" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1755</SUB>> ]
-"9816" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1755</SUB>> ]
-"9823" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1755</SUB>> ]
-"9817" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1755</SUB>> ]
-"9818" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1755</SUB>> ]
-"9820" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1755</SUB>> ]
-"9801" [label = <(METHOD,CallStaticShortMethodV)<SUB>1754</SUB>> ]
-"9837" [label = <(METHOD_RETURN,jshort)<SUB>1754</SUB>> ]
-  "9807" -> "9812" 
-  "9807" -> "9826" 
-  "9826" -> "9831" 
-  "9828" -> "9837" 
-  "9829" -> "9828" 
-  "9830" -> "9829" 
-  "9811" -> "9818" 
-  "9811" -> "9826" 
-  "9831" -> "9836" 
-  "9836" -> "9830" 
-  "9812" -> "9811" 
-  "9816" -> "9823" 
-  "9823" -> "9837" 
-  "9817" -> "9816" 
-  "9818" -> "9820" 
-  "9820" -> "9817" 
-  "9801" -> "9807" 
+digraph "CallStaticIntMethodA" {  
+"9776" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1705</SUB>> ]
+"9795" [label = <(soa,soa(env))<SUB>1706</SUB>> ]
+"9797" [label = <(RETURN,return InvokeWithJValues(soa, nullptr, mid, args).GetI();,return InvokeWithJValues(soa, nullptr, mid, args).GetI();)<SUB>1707</SUB>> ]
+"9798" [label = <(GetI,InvokeWithJValues(soa, nullptr, mid, args).GetI())<SUB>1707</SUB>> ]
+"9799" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, nullptr, mid, args).GetI)<SUB>1707</SUB>> ]
+"9780" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1705</SUB>> ]
+"9800" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1707</SUB>> ]
+"9805" [label = <(FIELD_IDENTIFIER,GetI,GetI)<SUB>1707</SUB>> ]
+"9781" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1705</SUB>> ]
+"9785" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1705</SUB>> ]
+"9792" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1705</SUB>> ]
+"9786" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1705</SUB>> ]
+"9787" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1705</SUB>> ]
+"9789" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1705</SUB>> ]
+"9770" [label = <(METHOD,CallStaticIntMethodA)<SUB>1704</SUB>> ]
+"9806" [label = <(METHOD_RETURN,jint)<SUB>1704</SUB>> ]
+  "9776" -> "9781" 
+  "9776" -> "9795" 
+  "9795" -> "9800" 
+  "9797" -> "9806" 
+  "9798" -> "9797" 
+  "9799" -> "9798" 
+  "9780" -> "9787" 
+  "9780" -> "9795" 
+  "9800" -> "9805" 
+  "9805" -> "9799" 
+  "9781" -> "9780" 
+  "9785" -> "9792" 
+  "9792" -> "9806" 
+  "9786" -> "9785" 
+  "9787" -> "9789" 
+  "9789" -> "9786" 
+  "9770" -> "9776" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/173-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/173-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/173-cfg.dot	2023-06-07 19:35:01.507387161 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/173-cfg.dot	2023-06-07 19:35:08.047386515 +0330
@@ -1,35 +1,43 @@
-digraph "CallStaticShortMethodA" {  
-"9845" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1761</SUB>> ]
-"9864" [label = <(soa,soa(env))<SUB>1762</SUB>> ]
-"9866" [label = <(RETURN,return InvokeWithJValues(soa, nullptr, mid, args).GetS();,return InvokeWithJValues(soa, nullptr, mid, args).GetS();)<SUB>1763</SUB>> ]
-"9867" [label = <(GetS,InvokeWithJValues(soa, nullptr, mid, args).GetS())<SUB>1763</SUB>> ]
-"9868" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, nullptr, mid, args).GetS)<SUB>1763</SUB>> ]
-"9849" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1761</SUB>> ]
-"9869" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1763</SUB>> ]
-"9874" [label = <(FIELD_IDENTIFIER,GetS,GetS)<SUB>1763</SUB>> ]
-"9850" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1761</SUB>> ]
-"9854" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1761</SUB>> ]
-"9861" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1761</SUB>> ]
-"9855" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1761</SUB>> ]
-"9856" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1761</SUB>> ]
-"9858" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1761</SUB>> ]
-"9839" [label = <(METHOD,CallStaticShortMethodA)<SUB>1760</SUB>> ]
-"9875" [label = <(METHOD_RETURN,jshort)<SUB>1760</SUB>> ]
-  "9845" -> "9850" 
-  "9845" -> "9864" 
-  "9864" -> "9869" 
-  "9866" -> "9875" 
-  "9867" -> "9866" 
-  "9868" -> "9867" 
-  "9849" -> "9856" 
-  "9849" -> "9864" 
-  "9869" -> "9874" 
-  "9874" -> "9868" 
+digraph "CallStaticLongMethod" {  
+"9814" [label = <(va_start,va_start(ap, mid))<SUB>1712</SUB>> ]
+"9818" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1713</SUB>> ]
+"9821" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1714</SUB>> ]
+"9840" [label = <(soa,soa(env))<SUB>1715</SUB>> ]
+"9843" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, ap)))<SUB>1716</SUB>> ]
+"9849" [label = <(RETURN,return result.GetJ();,return result.GetJ();)<SUB>1717</SUB>> ]
+"9819" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1713</SUB>> ]
+"9844" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1716</SUB>> ]
+"9850" [label = <(GetJ,result.GetJ())<SUB>1717</SUB>> ]
+"9851" [label = <(&lt;operator&gt;.fieldAccess,result.GetJ)<SUB>1717</SUB>> ]
+"9825" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1714</SUB>> ]
+"9853" [label = <(FIELD_IDENTIFIER,GetJ,GetJ)<SUB>1717</SUB>> ]
+"9826" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1714</SUB>> ]
+"9830" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1714</SUB>> ]
+"9837" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1714</SUB>> ]
+"9831" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1714</SUB>> ]
+"9832" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1714</SUB>> ]
+"9834" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1714</SUB>> ]
+"9808" [label = <(METHOD,CallStaticLongMethod)<SUB>1710</SUB>> ]
+"9854" [label = <(METHOD_RETURN,jlong)<SUB>1710</SUB>> ]
+  "9814" -> "9819" 
+  "9818" -> "9821" 
+  "9821" -> "9826" 
+  "9821" -> "9840" 
+  "9840" -> "9844" 
+  "9843" -> "9853" 
+  "9849" -> "9854" 
+  "9819" -> "9818" 
+  "9844" -> "9843" 
   "9850" -> "9849" 
-  "9854" -> "9861" 
-  "9861" -> "9875" 
-  "9855" -> "9854" 
-  "9856" -> "9858" 
-  "9858" -> "9855" 
-  "9839" -> "9845" 
+  "9851" -> "9850" 
+  "9825" -> "9832" 
+  "9825" -> "9840" 
+  "9853" -> "9851" 
+  "9826" -> "9825" 
+  "9830" -> "9837" 
+  "9837" -> "9854" 
+  "9831" -> "9830" 
+  "9832" -> "9834" 
+  "9834" -> "9831" 
+  "9808" -> "9814" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/174-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/174-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/174-cfg.dot	2023-06-07 19:35:01.507387161 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/174-cfg.dot	2023-06-07 19:35:08.047386515 +0330
@@ -1,43 +1,35 @@
-digraph "CallStaticIntMethod" {  
-"9883" [label = <(va_start,va_start(ap, mid))<SUB>1768</SUB>> ]
-"9887" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1769</SUB>> ]
-"9890" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1770</SUB>> ]
-"9909" [label = <(soa,soa(env))<SUB>1771</SUB>> ]
-"9912" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, ap)))<SUB>1772</SUB>> ]
-"9918" [label = <(RETURN,return result.GetI();,return result.GetI();)<SUB>1773</SUB>> ]
-"9888" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1769</SUB>> ]
-"9913" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1772</SUB>> ]
-"9919" [label = <(GetI,result.GetI())<SUB>1773</SUB>> ]
-"9920" [label = <(&lt;operator&gt;.fieldAccess,result.GetI)<SUB>1773</SUB>> ]
-"9894" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1770</SUB>> ]
-"9922" [label = <(FIELD_IDENTIFIER,GetI,GetI)<SUB>1773</SUB>> ]
-"9895" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1770</SUB>> ]
-"9899" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1770</SUB>> ]
-"9906" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1770</SUB>> ]
-"9900" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1770</SUB>> ]
-"9901" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1770</SUB>> ]
-"9903" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1770</SUB>> ]
-"9877" [label = <(METHOD,CallStaticIntMethod)<SUB>1766</SUB>> ]
-"9923" [label = <(METHOD_RETURN,jint)<SUB>1766</SUB>> ]
-  "9883" -> "9888" 
-  "9887" -> "9890" 
-  "9890" -> "9895" 
-  "9890" -> "9909" 
-  "9909" -> "9913" 
-  "9912" -> "9922" 
-  "9918" -> "9923" 
-  "9888" -> "9887" 
-  "9913" -> "9912" 
-  "9919" -> "9918" 
-  "9920" -> "9919" 
-  "9894" -> "9901" 
-  "9894" -> "9909" 
-  "9922" -> "9920" 
-  "9895" -> "9894" 
-  "9899" -> "9906" 
-  "9906" -> "9923" 
-  "9900" -> "9899" 
-  "9901" -> "9903" 
-  "9903" -> "9900" 
-  "9877" -> "9883" 
+digraph "CallStaticLongMethodV" {  
+"9862" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1721</SUB>> ]
+"9881" [label = <(soa,soa(env))<SUB>1722</SUB>> ]
+"9883" [label = <(RETURN,return InvokeWithVarArgs(soa, nullptr, mid, args).GetJ();,return InvokeWithVarArgs(soa, nullptr, mid, args).GetJ();)<SUB>1723</SUB>> ]
+"9884" [label = <(GetJ,InvokeWithVarArgs(soa, nullptr, mid, args).GetJ())<SUB>1723</SUB>> ]
+"9885" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, nullptr, mid, args).GetJ)<SUB>1723</SUB>> ]
+"9866" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1721</SUB>> ]
+"9886" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1723</SUB>> ]
+"9891" [label = <(FIELD_IDENTIFIER,GetJ,GetJ)<SUB>1723</SUB>> ]
+"9867" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1721</SUB>> ]
+"9871" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1721</SUB>> ]
+"9878" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1721</SUB>> ]
+"9872" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1721</SUB>> ]
+"9873" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1721</SUB>> ]
+"9875" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1721</SUB>> ]
+"9856" [label = <(METHOD,CallStaticLongMethodV)<SUB>1720</SUB>> ]
+"9892" [label = <(METHOD_RETURN,jlong)<SUB>1720</SUB>> ]
+  "9862" -> "9867" 
+  "9862" -> "9881" 
+  "9881" -> "9886" 
+  "9883" -> "9892" 
+  "9884" -> "9883" 
+  "9885" -> "9884" 
+  "9866" -> "9873" 
+  "9866" -> "9881" 
+  "9886" -> "9891" 
+  "9891" -> "9885" 
+  "9867" -> "9866" 
+  "9871" -> "9878" 
+  "9878" -> "9892" 
+  "9872" -> "9871" 
+  "9873" -> "9875" 
+  "9875" -> "9872" 
+  "9856" -> "9862" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/175-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/175-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/175-cfg.dot	2023-06-07 19:35:01.507387161 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/175-cfg.dot	2023-06-07 19:35:08.047386515 +0330
@@ -1,35 +1,35 @@
-digraph "CallStaticIntMethodV" {  
-"9931" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1777</SUB>> ]
-"9950" [label = <(soa,soa(env))<SUB>1778</SUB>> ]
-"9952" [label = <(RETURN,return InvokeWithVarArgs(soa, nullptr, mid, args).GetI();,return InvokeWithVarArgs(soa, nullptr, mid, args).GetI();)<SUB>1779</SUB>> ]
-"9953" [label = <(GetI,InvokeWithVarArgs(soa, nullptr, mid, args).GetI())<SUB>1779</SUB>> ]
-"9954" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, nullptr, mid, args).GetI)<SUB>1779</SUB>> ]
-"9935" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1777</SUB>> ]
-"9955" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1779</SUB>> ]
-"9960" [label = <(FIELD_IDENTIFIER,GetI,GetI)<SUB>1779</SUB>> ]
-"9936" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1777</SUB>> ]
-"9940" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1777</SUB>> ]
-"9947" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1777</SUB>> ]
-"9941" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1777</SUB>> ]
-"9942" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1777</SUB>> ]
-"9944" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1777</SUB>> ]
-"9925" [label = <(METHOD,CallStaticIntMethodV)<SUB>1776</SUB>> ]
-"9961" [label = <(METHOD_RETURN,jint)<SUB>1776</SUB>> ]
-  "9931" -> "9936" 
-  "9931" -> "9950" 
-  "9950" -> "9955" 
-  "9952" -> "9961" 
-  "9953" -> "9952" 
-  "9954" -> "9953" 
-  "9935" -> "9942" 
-  "9935" -> "9950" 
-  "9955" -> "9960" 
-  "9960" -> "9954" 
-  "9936" -> "9935" 
-  "9940" -> "9947" 
-  "9947" -> "9961" 
-  "9941" -> "9940" 
-  "9942" -> "9944" 
-  "9944" -> "9941" 
-  "9925" -> "9931" 
+digraph "CallStaticLongMethodA" {  
+"9900" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1727</SUB>> ]
+"9919" [label = <(soa,soa(env))<SUB>1728</SUB>> ]
+"9921" [label = <(RETURN,return InvokeWithJValues(soa, nullptr, mid, args).GetJ();,return InvokeWithJValues(soa, nullptr, mid, args).GetJ();)<SUB>1729</SUB>> ]
+"9922" [label = <(GetJ,InvokeWithJValues(soa, nullptr, mid, args).GetJ())<SUB>1729</SUB>> ]
+"9923" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, nullptr, mid, args).GetJ)<SUB>1729</SUB>> ]
+"9904" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1727</SUB>> ]
+"9924" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1729</SUB>> ]
+"9929" [label = <(FIELD_IDENTIFIER,GetJ,GetJ)<SUB>1729</SUB>> ]
+"9905" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1727</SUB>> ]
+"9909" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1727</SUB>> ]
+"9916" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1727</SUB>> ]
+"9910" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1727</SUB>> ]
+"9911" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1727</SUB>> ]
+"9913" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1727</SUB>> ]
+"9894" [label = <(METHOD,CallStaticLongMethodA)<SUB>1726</SUB>> ]
+"9930" [label = <(METHOD_RETURN,jlong)<SUB>1726</SUB>> ]
+  "9900" -> "9905" 
+  "9900" -> "9919" 
+  "9919" -> "9924" 
+  "9921" -> "9930" 
+  "9922" -> "9921" 
+  "9923" -> "9922" 
+  "9904" -> "9911" 
+  "9904" -> "9919" 
+  "9924" -> "9929" 
+  "9929" -> "9923" 
+  "9905" -> "9904" 
+  "9909" -> "9916" 
+  "9916" -> "9930" 
+  "9910" -> "9909" 
+  "9911" -> "9913" 
+  "9913" -> "9910" 
+  "9894" -> "9900" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/176-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/176-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/176-cfg.dot	2023-06-07 19:35:01.507387161 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/176-cfg.dot	2023-06-07 19:35:08.047386515 +0330
@@ -1,35 +1,43 @@
-digraph "CallStaticIntMethodA" {  
-"9969" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1783</SUB>> ]
-"9988" [label = <(soa,soa(env))<SUB>1784</SUB>> ]
-"9990" [label = <(RETURN,return InvokeWithJValues(soa, nullptr, mid, args).GetI();,return InvokeWithJValues(soa, nullptr, mid, args).GetI();)<SUB>1785</SUB>> ]
-"9991" [label = <(GetI,InvokeWithJValues(soa, nullptr, mid, args).GetI())<SUB>1785</SUB>> ]
-"9992" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, nullptr, mid, args).GetI)<SUB>1785</SUB>> ]
-"9973" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1783</SUB>> ]
-"9993" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1785</SUB>> ]
-"9998" [label = <(FIELD_IDENTIFIER,GetI,GetI)<SUB>1785</SUB>> ]
-"9974" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1783</SUB>> ]
-"9978" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1783</SUB>> ]
-"9985" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1783</SUB>> ]
-"9979" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1783</SUB>> ]
-"9980" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1783</SUB>> ]
-"9982" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1783</SUB>> ]
-"9963" [label = <(METHOD,CallStaticIntMethodA)<SUB>1782</SUB>> ]
-"9999" [label = <(METHOD_RETURN,jint)<SUB>1782</SUB>> ]
-  "9969" -> "9974" 
-  "9969" -> "9988" 
-  "9988" -> "9993" 
-  "9990" -> "9999" 
-  "9991" -> "9990" 
-  "9992" -> "9991" 
-  "9973" -> "9980" 
-  "9973" -> "9988" 
-  "9993" -> "9998" 
-  "9998" -> "9992" 
+digraph "CallStaticFloatMethod" {  
+"9938" [label = <(va_start,va_start(ap, mid))<SUB>1734</SUB>> ]
+"9942" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1735</SUB>> ]
+"9945" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1736</SUB>> ]
+"9964" [label = <(soa,soa(env))<SUB>1737</SUB>> ]
+"9967" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, ap)))<SUB>1738</SUB>> ]
+"9973" [label = <(RETURN,return result.GetF();,return result.GetF();)<SUB>1739</SUB>> ]
+"9943" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1735</SUB>> ]
+"9968" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1738</SUB>> ]
+"9974" [label = <(GetF,result.GetF())<SUB>1739</SUB>> ]
+"9975" [label = <(&lt;operator&gt;.fieldAccess,result.GetF)<SUB>1739</SUB>> ]
+"9949" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1736</SUB>> ]
+"9977" [label = <(FIELD_IDENTIFIER,GetF,GetF)<SUB>1739</SUB>> ]
+"9950" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1736</SUB>> ]
+"9954" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1736</SUB>> ]
+"9961" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1736</SUB>> ]
+"9955" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1736</SUB>> ]
+"9956" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1736</SUB>> ]
+"9958" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1736</SUB>> ]
+"9932" [label = <(METHOD,CallStaticFloatMethod)<SUB>1732</SUB>> ]
+"9978" [label = <(METHOD_RETURN,jfloat)<SUB>1732</SUB>> ]
+  "9938" -> "9943" 
+  "9942" -> "9945" 
+  "9945" -> "9950" 
+  "9945" -> "9964" 
+  "9964" -> "9968" 
+  "9967" -> "9977" 
+  "9973" -> "9978" 
+  "9943" -> "9942" 
+  "9968" -> "9967" 
   "9974" -> "9973" 
-  "9978" -> "9985" 
-  "9985" -> "9999" 
-  "9979" -> "9978" 
-  "9980" -> "9982" 
-  "9982" -> "9979" 
-  "9963" -> "9969" 
+  "9975" -> "9974" 
+  "9949" -> "9956" 
+  "9949" -> "9964" 
+  "9977" -> "9975" 
+  "9950" -> "9949" 
+  "9954" -> "9961" 
+  "9961" -> "9978" 
+  "9955" -> "9954" 
+  "9956" -> "9958" 
+  "9958" -> "9955" 
+  "9932" -> "9938" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/177-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/177-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/177-cfg.dot	2023-06-07 19:35:01.507387161 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/177-cfg.dot	2023-06-07 19:35:08.047386515 +0330
@@ -1,43 +1,35 @@
-digraph "CallStaticLongMethod" {  
-"10007" [label = <(va_start,va_start(ap, mid))<SUB>1790</SUB>> ]
-"10011" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1791</SUB>> ]
-"10014" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1792</SUB>> ]
-"10033" [label = <(soa,soa(env))<SUB>1793</SUB>> ]
-"10036" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, ap)))<SUB>1794</SUB>> ]
-"10042" [label = <(RETURN,return result.GetJ();,return result.GetJ();)<SUB>1795</SUB>> ]
-"10012" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1791</SUB>> ]
-"10037" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1794</SUB>> ]
-"10043" [label = <(GetJ,result.GetJ())<SUB>1795</SUB>> ]
-"10044" [label = <(&lt;operator&gt;.fieldAccess,result.GetJ)<SUB>1795</SUB>> ]
-"10018" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1792</SUB>> ]
-"10046" [label = <(FIELD_IDENTIFIER,GetJ,GetJ)<SUB>1795</SUB>> ]
-"10019" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1792</SUB>> ]
-"10023" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1792</SUB>> ]
-"10030" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1792</SUB>> ]
-"10024" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1792</SUB>> ]
-"10025" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1792</SUB>> ]
-"10027" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1792</SUB>> ]
-"10001" [label = <(METHOD,CallStaticLongMethod)<SUB>1788</SUB>> ]
-"10047" [label = <(METHOD_RETURN,jlong)<SUB>1788</SUB>> ]
-  "10007" -> "10012" 
-  "10011" -> "10014" 
-  "10014" -> "10019" 
-  "10014" -> "10033" 
-  "10033" -> "10037" 
-  "10036" -> "10046" 
-  "10042" -> "10047" 
-  "10012" -> "10011" 
-  "10037" -> "10036" 
-  "10043" -> "10042" 
-  "10044" -> "10043" 
-  "10018" -> "10025" 
-  "10018" -> "10033" 
-  "10046" -> "10044" 
-  "10019" -> "10018" 
-  "10023" -> "10030" 
-  "10030" -> "10047" 
-  "10024" -> "10023" 
-  "10025" -> "10027" 
-  "10027" -> "10024" 
-  "10001" -> "10007" 
+digraph "CallStaticFloatMethodV" {  
+"9986" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1743</SUB>> ]
+"10005" [label = <(soa,soa(env))<SUB>1744</SUB>> ]
+"10007" [label = <(RETURN,return InvokeWithVarArgs(soa, nullptr, mid, args).GetF();,return InvokeWithVarArgs(soa, nullptr, mid, args).GetF();)<SUB>1745</SUB>> ]
+"10008" [label = <(GetF,InvokeWithVarArgs(soa, nullptr, mid, args).GetF())<SUB>1745</SUB>> ]
+"10009" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, nullptr, mid, args).GetF)<SUB>1745</SUB>> ]
+"9990" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1743</SUB>> ]
+"10010" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1745</SUB>> ]
+"10015" [label = <(FIELD_IDENTIFIER,GetF,GetF)<SUB>1745</SUB>> ]
+"9991" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1743</SUB>> ]
+"9995" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1743</SUB>> ]
+"10002" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1743</SUB>> ]
+"9996" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1743</SUB>> ]
+"9997" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1743</SUB>> ]
+"9999" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1743</SUB>> ]
+"9980" [label = <(METHOD,CallStaticFloatMethodV)<SUB>1742</SUB>> ]
+"10016" [label = <(METHOD_RETURN,jfloat)<SUB>1742</SUB>> ]
+  "9986" -> "9991" 
+  "9986" -> "10005" 
+  "10005" -> "10010" 
+  "10007" -> "10016" 
+  "10008" -> "10007" 
+  "10009" -> "10008" 
+  "9990" -> "9997" 
+  "9990" -> "10005" 
+  "10010" -> "10015" 
+  "10015" -> "10009" 
+  "9991" -> "9990" 
+  "9995" -> "10002" 
+  "10002" -> "10016" 
+  "9996" -> "9995" 
+  "9997" -> "9999" 
+  "9999" -> "9996" 
+  "9980" -> "9986" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/178-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/178-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/178-cfg.dot	2023-06-07 19:35:01.507387161 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/178-cfg.dot	2023-06-07 19:35:08.047386515 +0330
@@ -1,35 +1,35 @@
-digraph "CallStaticLongMethodV" {  
-"10055" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1799</SUB>> ]
-"10074" [label = <(soa,soa(env))<SUB>1800</SUB>> ]
-"10076" [label = <(RETURN,return InvokeWithVarArgs(soa, nullptr, mid, args).GetJ();,return InvokeWithVarArgs(soa, nullptr, mid, args).GetJ();)<SUB>1801</SUB>> ]
-"10077" [label = <(GetJ,InvokeWithVarArgs(soa, nullptr, mid, args).GetJ())<SUB>1801</SUB>> ]
-"10078" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, nullptr, mid, args).GetJ)<SUB>1801</SUB>> ]
-"10059" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1799</SUB>> ]
-"10079" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1801</SUB>> ]
-"10084" [label = <(FIELD_IDENTIFIER,GetJ,GetJ)<SUB>1801</SUB>> ]
-"10060" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1799</SUB>> ]
-"10064" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1799</SUB>> ]
-"10071" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1799</SUB>> ]
-"10065" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1799</SUB>> ]
-"10066" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1799</SUB>> ]
-"10068" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1799</SUB>> ]
-"10049" [label = <(METHOD,CallStaticLongMethodV)<SUB>1798</SUB>> ]
-"10085" [label = <(METHOD_RETURN,jlong)<SUB>1798</SUB>> ]
-  "10055" -> "10060" 
-  "10055" -> "10074" 
-  "10074" -> "10079" 
-  "10076" -> "10085" 
-  "10077" -> "10076" 
-  "10078" -> "10077" 
-  "10059" -> "10066" 
-  "10059" -> "10074" 
-  "10079" -> "10084" 
-  "10084" -> "10078" 
-  "10060" -> "10059" 
-  "10064" -> "10071" 
-  "10071" -> "10085" 
-  "10065" -> "10064" 
-  "10066" -> "10068" 
-  "10068" -> "10065" 
-  "10049" -> "10055" 
+digraph "CallStaticFloatMethodA" {  
+"10024" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1749</SUB>> ]
+"10043" [label = <(soa,soa(env))<SUB>1750</SUB>> ]
+"10045" [label = <(RETURN,return InvokeWithJValues(soa, nullptr, mid, args).GetF();,return InvokeWithJValues(soa, nullptr, mid, args).GetF();)<SUB>1751</SUB>> ]
+"10046" [label = <(GetF,InvokeWithJValues(soa, nullptr, mid, args).GetF())<SUB>1751</SUB>> ]
+"10047" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, nullptr, mid, args).GetF)<SUB>1751</SUB>> ]
+"10028" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1749</SUB>> ]
+"10048" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1751</SUB>> ]
+"10053" [label = <(FIELD_IDENTIFIER,GetF,GetF)<SUB>1751</SUB>> ]
+"10029" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1749</SUB>> ]
+"10033" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1749</SUB>> ]
+"10040" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1749</SUB>> ]
+"10034" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1749</SUB>> ]
+"10035" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1749</SUB>> ]
+"10037" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1749</SUB>> ]
+"10018" [label = <(METHOD,CallStaticFloatMethodA)<SUB>1748</SUB>> ]
+"10054" [label = <(METHOD_RETURN,jfloat)<SUB>1748</SUB>> ]
+  "10024" -> "10029" 
+  "10024" -> "10043" 
+  "10043" -> "10048" 
+  "10045" -> "10054" 
+  "10046" -> "10045" 
+  "10047" -> "10046" 
+  "10028" -> "10035" 
+  "10028" -> "10043" 
+  "10048" -> "10053" 
+  "10053" -> "10047" 
+  "10029" -> "10028" 
+  "10033" -> "10040" 
+  "10040" -> "10054" 
+  "10034" -> "10033" 
+  "10035" -> "10037" 
+  "10037" -> "10034" 
+  "10018" -> "10024" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/179-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/179-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/179-cfg.dot	2023-06-07 19:35:01.507387161 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/179-cfg.dot	2023-06-07 19:35:08.047386515 +0330
@@ -1,35 +1,43 @@
-digraph "CallStaticLongMethodA" {  
-"10093" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1805</SUB>> ]
-"10112" [label = <(soa,soa(env))<SUB>1806</SUB>> ]
-"10114" [label = <(RETURN,return InvokeWithJValues(soa, nullptr, mid, args).GetJ();,return InvokeWithJValues(soa, nullptr, mid, args).GetJ();)<SUB>1807</SUB>> ]
-"10115" [label = <(GetJ,InvokeWithJValues(soa, nullptr, mid, args).GetJ())<SUB>1807</SUB>> ]
-"10116" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, nullptr, mid, args).GetJ)<SUB>1807</SUB>> ]
-"10097" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1805</SUB>> ]
-"10117" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1807</SUB>> ]
-"10122" [label = <(FIELD_IDENTIFIER,GetJ,GetJ)<SUB>1807</SUB>> ]
-"10098" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1805</SUB>> ]
-"10102" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1805</SUB>> ]
-"10109" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1805</SUB>> ]
-"10103" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1805</SUB>> ]
-"10104" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1805</SUB>> ]
-"10106" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1805</SUB>> ]
-"10087" [label = <(METHOD,CallStaticLongMethodA)<SUB>1804</SUB>> ]
-"10123" [label = <(METHOD_RETURN,jlong)<SUB>1804</SUB>> ]
-  "10093" -> "10098" 
-  "10093" -> "10112" 
-  "10112" -> "10117" 
-  "10114" -> "10123" 
-  "10115" -> "10114" 
-  "10116" -> "10115" 
-  "10097" -> "10104" 
-  "10097" -> "10112" 
-  "10117" -> "10122" 
-  "10122" -> "10116" 
+digraph "CallStaticDoubleMethod" {  
+"10062" [label = <(va_start,va_start(ap, mid))<SUB>1756</SUB>> ]
+"10066" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1757</SUB>> ]
+"10069" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1758</SUB>> ]
+"10088" [label = <(soa,soa(env))<SUB>1759</SUB>> ]
+"10091" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, ap)))<SUB>1760</SUB>> ]
+"10097" [label = <(RETURN,return result.GetD();,return result.GetD();)<SUB>1761</SUB>> ]
+"10067" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1757</SUB>> ]
+"10092" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1760</SUB>> ]
+"10098" [label = <(GetD,result.GetD())<SUB>1761</SUB>> ]
+"10099" [label = <(&lt;operator&gt;.fieldAccess,result.GetD)<SUB>1761</SUB>> ]
+"10073" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1758</SUB>> ]
+"10101" [label = <(FIELD_IDENTIFIER,GetD,GetD)<SUB>1761</SUB>> ]
+"10074" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1758</SUB>> ]
+"10078" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1758</SUB>> ]
+"10085" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1758</SUB>> ]
+"10079" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1758</SUB>> ]
+"10080" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1758</SUB>> ]
+"10082" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1758</SUB>> ]
+"10056" [label = <(METHOD,CallStaticDoubleMethod)<SUB>1754</SUB>> ]
+"10102" [label = <(METHOD_RETURN,jdouble)<SUB>1754</SUB>> ]
+  "10062" -> "10067" 
+  "10066" -> "10069" 
+  "10069" -> "10074" 
+  "10069" -> "10088" 
+  "10088" -> "10092" 
+  "10091" -> "10101" 
+  "10097" -> "10102" 
+  "10067" -> "10066" 
+  "10092" -> "10091" 
   "10098" -> "10097" 
-  "10102" -> "10109" 
-  "10109" -> "10123" 
-  "10103" -> "10102" 
-  "10104" -> "10106" 
-  "10106" -> "10103" 
-  "10087" -> "10093" 
+  "10099" -> "10098" 
+  "10073" -> "10080" 
+  "10073" -> "10088" 
+  "10101" -> "10099" 
+  "10074" -> "10073" 
+  "10078" -> "10085" 
+  "10085" -> "10102" 
+  "10079" -> "10078" 
+  "10080" -> "10082" 
+  "10082" -> "10079" 
+  "10056" -> "10062" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/18-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/18-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/18-cfg.dot	2023-06-07 19:35:01.337387177 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/18-cfg.dot	2023-06-07 19:35:07.907386529 +0330
@@ -1,5 +1,123 @@
-digraph "ThrowSIOOBE" {  
-"430" [label = <(METHOD,ThrowSIOOBE)<SUB>356</SUB>> ]
-"436" [label = <(METHOD_RETURN,void)<SUB>356</SUB>> ]
-  "430" -> "436" 
+digraph "FindMethodJNI" {  
+"290" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c = EnsureInitialized(soa.Self(), soa.Decode&lt;mirror::Class&gt;(jni_class)))<SUB>319</SUB>> ]
+"320" [label = <(&lt;operator&gt;.assignment,* method = nullptr)<SUB>323</SUB>> ]
+"324" [label = <(&lt;operator&gt;.assignment,pointer_size = Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize())<SUB>324</SUB>> ]
+"400" [label = <(RETURN,return method;,return method;)<SUB>337</SUB>> ]
+"291" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c)<SUB>319</SUB>> ]
+"298" [label = <(EnsureInitialized,EnsureInitialized(soa.Self(), soa.Decode&lt;mirror::Class&gt;(jni_class)))<SUB>319</SUB>> ]
+"313" [label = <(&lt;operator&gt;.equals,c == nullptr)<SUB>320</SUB>> ]
+"326" [label = <(GetImagePointerSize,Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize())<SUB>324</SUB>> ]
+"337" [label = <(IsInterface,c-&gt;IsInterface())<SUB>325</SUB>> ]
+"363" [label = <(&lt;operator&gt;.logicalAnd,method != nullptr &amp;&amp; ShouldDenyAccessToMember(method, soa.Self()))<SUB>330</SUB>> ]
+"378" [label = <(&lt;operator&gt;.logicalOr,method == nullptr || method-&gt;IsStatic() != is_static)<SUB>333</SUB>> ]
+"292" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>319</SUB>> ]
+"299" [label = <(Self,soa.Self())<SUB>319</SUB>> ]
+"303" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(jni_class))<SUB>319</SUB>> ]
+"317" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>321</SUB>> ]
+"327" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize)<SUB>324</SUB>> ]
+"338" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;IsInterface)<SUB>325</SUB>> ]
+"342" [label = <(&lt;operator&gt;.assignment,method = c-&gt;FindInterfaceMethod(name, sig, pointer_size))<SUB>326</SUB>> ]
+"364" [label = <(&lt;operator&gt;.notEquals,method != nullptr)<SUB>330</SUB>> ]
+"367" [label = <(ShouldDenyAccessToMember,ShouldDenyAccessToMember(method, soa.Self()))<SUB>330</SUB>> ]
+"374" [label = <(&lt;operator&gt;.assignment,method = nullptr)<SUB>331</SUB>> ]
+"379" [label = <(&lt;operator&gt;.equals,method == nullptr)<SUB>333</SUB>> ]
+"382" [label = <(&lt;operator&gt;.notEquals,method-&gt;IsStatic() != is_static)<SUB>333</SUB>> ]
+"389" [label = <(ThrowNoSuchMethodError,ThrowNoSuchMethodError(soa, c, name, sig, is_static ? &quot;static&quot; : &quot;non-static&quot;))<SUB>334</SUB>> ]
+"398" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>335</SUB>> ]
+"294" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>319</SUB>> ]
+"300" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>319</SUB>> ]
+"304" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>319</SUB>> ]
+"328" [label = <(GetClassLinker,Runtime::Current()-&gt;GetClassLinker())<SUB>324</SUB>> ]
+"335" [label = <(FIELD_IDENTIFIER,GetImagePointerSize,GetImagePointerSize)<SUB>324</SUB>> ]
+"340" [label = <(FIELD_IDENTIFIER,IsInterface,IsInterface)<SUB>325</SUB>> ]
+"344" [label = <(FindInterfaceMethod,c-&gt;FindInterfaceMethod(name, sig, pointer_size))<SUB>326</SUB>> ]
+"353" [label = <(&lt;operator&gt;.assignment,method = c-&gt;FindClassMethod(name, sig, pointer_size))<SUB>328</SUB>> ]
+"369" [label = <(Self,soa.Self())<SUB>330</SUB>> ]
+"383" [label = <(IsStatic,method-&gt;IsStatic())<SUB>333</SUB>> ]
+"394" [label = <(&lt;operator&gt;.conditional,is_static ? &quot;static&quot; : &quot;non-static&quot;)<SUB>334</SUB>> ]
+"296" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>319</SUB>> ]
+"302" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>319</SUB>> ]
+"305" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>319</SUB>> ]
+"308" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>319</SUB>> ]
+"329" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetClassLinker)<SUB>324</SUB>> ]
+"345" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;FindInterfaceMethod)<SUB>326</SUB>> ]
+"355" [label = <(FindClassMethod,c-&gt;FindClassMethod(name, sig, pointer_size))<SUB>328</SUB>> ]
+"370" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>330</SUB>> ]
+"384" [label = <(&lt;operator&gt;.indirectFieldAccess,method-&gt;IsStatic)<SUB>333</SUB>> ]
+"307" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>319</SUB>> ]
+"310" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>319</SUB>> ]
+"330" [label = <(Runtime::Current,Runtime::Current())<SUB>324</SUB>> ]
+"334" [label = <(FIELD_IDENTIFIER,GetClassLinker,GetClassLinker)<SUB>324</SUB>> ]
+"347" [label = <(FIELD_IDENTIFIER,FindInterfaceMethod,FindInterfaceMethod)<SUB>326</SUB>> ]
+"356" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;FindClassMethod)<SUB>328</SUB>> ]
+"372" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>330</SUB>> ]
+"386" [label = <(FIELD_IDENTIFIER,IsStatic,IsStatic)<SUB>333</SUB>> ]
+"331" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>324</SUB>> ]
+"358" [label = <(FIELD_IDENTIFIER,FindClassMethod,FindClassMethod)<SUB>328</SUB>> ]
+"333" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>324</SUB>> ]
+"283" [label = <(METHOD,FindMethodJNI)<SUB>314</SUB>> ]
+"402" [label = <(METHOD_RETURN,ArtMethod)<SUB>314</SUB>> ]
+  "290" -> "313" 
+  "320" -> "333" 
+  "324" -> "340" 
+  "400" -> "402" 
+  "291" -> "302" 
+  "298" -> "290" 
+  "313" -> "317" 
+  "313" -> "320" 
+  "326" -> "324" 
+  "337" -> "347" 
+  "337" -> "358" 
+  "363" -> "374" 
+  "363" -> "379" 
+  "378" -> "394" 
+  "378" -> "400" 
+  "292" -> "291" 
+  "299" -> "307" 
+  "303" -> "298" 
+  "317" -> "402" 
+  "327" -> "326" 
+  "338" -> "337" 
+  "342" -> "364" 
+  "364" -> "363" 
+  "364" -> "372" 
+  "367" -> "363" 
+  "374" -> "379" 
+  "379" -> "378" 
+  "379" -> "386" 
+  "382" -> "378" 
+  "389" -> "398" 
+  "398" -> "402" 
+  "294" -> "292" 
+  "300" -> "299" 
+  "304" -> "303" 
+  "328" -> "335" 
+  "335" -> "327" 
+  "340" -> "338" 
+  "344" -> "342" 
+  "353" -> "364" 
+  "369" -> "367" 
+  "383" -> "382" 
+  "394" -> "389" 
+  "296" -> "294" 
+  "302" -> "300" 
+  "305" -> "310" 
+  "308" -> "304" 
+  "329" -> "328" 
+  "345" -> "344" 
+  "355" -> "353" 
+  "370" -> "369" 
+  "384" -> "383" 
+  "307" -> "305" 
+  "310" -> "308" 
+  "330" -> "334" 
+  "334" -> "329" 
+  "347" -> "345" 
+  "356" -> "355" 
+  "372" -> "370" 
+  "386" -> "384" 
+  "331" -> "330" 
+  "358" -> "356" 
+  "333" -> "331" 
+  "283" -> "296" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/180-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/180-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/180-cfg.dot	2023-06-07 19:35:01.507387161 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/180-cfg.dot	2023-06-07 19:35:08.047386515 +0330
@@ -1,43 +1,35 @@
-digraph "CallStaticFloatMethod" {  
-"10131" [label = <(va_start,va_start(ap, mid))<SUB>1812</SUB>> ]
-"10135" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1813</SUB>> ]
-"10138" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1814</SUB>> ]
-"10157" [label = <(soa,soa(env))<SUB>1815</SUB>> ]
-"10160" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, ap)))<SUB>1816</SUB>> ]
-"10166" [label = <(RETURN,return result.GetF();,return result.GetF();)<SUB>1817</SUB>> ]
-"10136" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1813</SUB>> ]
-"10161" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1816</SUB>> ]
-"10167" [label = <(GetF,result.GetF())<SUB>1817</SUB>> ]
-"10168" [label = <(&lt;operator&gt;.fieldAccess,result.GetF)<SUB>1817</SUB>> ]
-"10142" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1814</SUB>> ]
-"10170" [label = <(FIELD_IDENTIFIER,GetF,GetF)<SUB>1817</SUB>> ]
-"10143" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1814</SUB>> ]
-"10147" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1814</SUB>> ]
-"10154" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1814</SUB>> ]
-"10148" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1814</SUB>> ]
-"10149" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1814</SUB>> ]
-"10151" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1814</SUB>> ]
-"10125" [label = <(METHOD,CallStaticFloatMethod)<SUB>1810</SUB>> ]
-"10171" [label = <(METHOD_RETURN,jfloat)<SUB>1810</SUB>> ]
-  "10131" -> "10136" 
-  "10135" -> "10138" 
-  "10138" -> "10143" 
-  "10138" -> "10157" 
-  "10157" -> "10161" 
-  "10160" -> "10170" 
-  "10166" -> "10171" 
-  "10136" -> "10135" 
-  "10161" -> "10160" 
-  "10167" -> "10166" 
-  "10168" -> "10167" 
-  "10142" -> "10149" 
-  "10142" -> "10157" 
-  "10170" -> "10168" 
-  "10143" -> "10142" 
-  "10147" -> "10154" 
-  "10154" -> "10171" 
-  "10148" -> "10147" 
-  "10149" -> "10151" 
-  "10151" -> "10148" 
-  "10125" -> "10131" 
+digraph "CallStaticDoubleMethodV" {  
+"10110" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1765</SUB>> ]
+"10129" [label = <(soa,soa(env))<SUB>1766</SUB>> ]
+"10131" [label = <(RETURN,return InvokeWithVarArgs(soa, nullptr, mid, args).GetD();,return InvokeWithVarArgs(soa, nullptr, mid, args).GetD();)<SUB>1767</SUB>> ]
+"10132" [label = <(GetD,InvokeWithVarArgs(soa, nullptr, mid, args).GetD())<SUB>1767</SUB>> ]
+"10133" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, nullptr, mid, args).GetD)<SUB>1767</SUB>> ]
+"10114" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1765</SUB>> ]
+"10134" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1767</SUB>> ]
+"10139" [label = <(FIELD_IDENTIFIER,GetD,GetD)<SUB>1767</SUB>> ]
+"10115" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1765</SUB>> ]
+"10119" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1765</SUB>> ]
+"10126" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1765</SUB>> ]
+"10120" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1765</SUB>> ]
+"10121" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1765</SUB>> ]
+"10123" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1765</SUB>> ]
+"10104" [label = <(METHOD,CallStaticDoubleMethodV)<SUB>1764</SUB>> ]
+"10140" [label = <(METHOD_RETURN,jdouble)<SUB>1764</SUB>> ]
+  "10110" -> "10115" 
+  "10110" -> "10129" 
+  "10129" -> "10134" 
+  "10131" -> "10140" 
+  "10132" -> "10131" 
+  "10133" -> "10132" 
+  "10114" -> "10121" 
+  "10114" -> "10129" 
+  "10134" -> "10139" 
+  "10139" -> "10133" 
+  "10115" -> "10114" 
+  "10119" -> "10126" 
+  "10126" -> "10140" 
+  "10120" -> "10119" 
+  "10121" -> "10123" 
+  "10123" -> "10120" 
+  "10104" -> "10110" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/181-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/181-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/181-cfg.dot	2023-06-07 19:35:01.507387161 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/181-cfg.dot	2023-06-07 19:35:08.047386515 +0330
@@ -1,35 +1,35 @@
-digraph "CallStaticFloatMethodV" {  
-"10179" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1821</SUB>> ]
-"10198" [label = <(soa,soa(env))<SUB>1822</SUB>> ]
-"10200" [label = <(RETURN,return InvokeWithVarArgs(soa, nullptr, mid, args).GetF();,return InvokeWithVarArgs(soa, nullptr, mid, args).GetF();)<SUB>1823</SUB>> ]
-"10201" [label = <(GetF,InvokeWithVarArgs(soa, nullptr, mid, args).GetF())<SUB>1823</SUB>> ]
-"10202" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, nullptr, mid, args).GetF)<SUB>1823</SUB>> ]
-"10183" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1821</SUB>> ]
-"10203" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1823</SUB>> ]
-"10208" [label = <(FIELD_IDENTIFIER,GetF,GetF)<SUB>1823</SUB>> ]
-"10184" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1821</SUB>> ]
-"10188" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1821</SUB>> ]
-"10195" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1821</SUB>> ]
-"10189" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1821</SUB>> ]
-"10190" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1821</SUB>> ]
-"10192" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1821</SUB>> ]
-"10173" [label = <(METHOD,CallStaticFloatMethodV)<SUB>1820</SUB>> ]
-"10209" [label = <(METHOD_RETURN,jfloat)<SUB>1820</SUB>> ]
-  "10179" -> "10184" 
-  "10179" -> "10198" 
-  "10198" -> "10203" 
-  "10200" -> "10209" 
-  "10201" -> "10200" 
-  "10202" -> "10201" 
-  "10183" -> "10190" 
-  "10183" -> "10198" 
-  "10203" -> "10208" 
-  "10208" -> "10202" 
-  "10184" -> "10183" 
-  "10188" -> "10195" 
-  "10195" -> "10209" 
-  "10189" -> "10188" 
-  "10190" -> "10192" 
-  "10192" -> "10189" 
-  "10173" -> "10179" 
+digraph "CallStaticDoubleMethodA" {  
+"10148" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1771</SUB>> ]
+"10167" [label = <(soa,soa(env))<SUB>1772</SUB>> ]
+"10169" [label = <(RETURN,return InvokeWithJValues(soa, nullptr, mid, args).GetD();,return InvokeWithJValues(soa, nullptr, mid, args).GetD();)<SUB>1773</SUB>> ]
+"10170" [label = <(GetD,InvokeWithJValues(soa, nullptr, mid, args).GetD())<SUB>1773</SUB>> ]
+"10171" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, nullptr, mid, args).GetD)<SUB>1773</SUB>> ]
+"10152" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1771</SUB>> ]
+"10172" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1773</SUB>> ]
+"10177" [label = <(FIELD_IDENTIFIER,GetD,GetD)<SUB>1773</SUB>> ]
+"10153" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1771</SUB>> ]
+"10157" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1771</SUB>> ]
+"10164" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1771</SUB>> ]
+"10158" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1771</SUB>> ]
+"10159" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1771</SUB>> ]
+"10161" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1771</SUB>> ]
+"10142" [label = <(METHOD,CallStaticDoubleMethodA)<SUB>1770</SUB>> ]
+"10178" [label = <(METHOD_RETURN,jdouble)<SUB>1770</SUB>> ]
+  "10148" -> "10153" 
+  "10148" -> "10167" 
+  "10167" -> "10172" 
+  "10169" -> "10178" 
+  "10170" -> "10169" 
+  "10171" -> "10170" 
+  "10152" -> "10159" 
+  "10152" -> "10167" 
+  "10172" -> "10177" 
+  "10177" -> "10171" 
+  "10153" -> "10152" 
+  "10157" -> "10164" 
+  "10164" -> "10178" 
+  "10158" -> "10157" 
+  "10159" -> "10161" 
+  "10161" -> "10158" 
+  "10142" -> "10148" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/182-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/182-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/182-cfg.dot	2023-06-07 19:35:01.507387161 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/182-cfg.dot	2023-06-07 19:35:08.047386515 +0330
@@ -1,35 +1,33 @@
-digraph "CallStaticFloatMethodA" {  
-"10217" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1827</SUB>> ]
-"10236" [label = <(soa,soa(env))<SUB>1828</SUB>> ]
-"10238" [label = <(RETURN,return InvokeWithJValues(soa, nullptr, mid, args).GetF();,return InvokeWithJValues(soa, nullptr, mid, args).GetF();)<SUB>1829</SUB>> ]
-"10239" [label = <(GetF,InvokeWithJValues(soa, nullptr, mid, args).GetF())<SUB>1829</SUB>> ]
-"10240" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, nullptr, mid, args).GetF)<SUB>1829</SUB>> ]
-"10221" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1827</SUB>> ]
-"10241" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1829</SUB>> ]
-"10246" [label = <(FIELD_IDENTIFIER,GetF,GetF)<SUB>1829</SUB>> ]
-"10222" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1827</SUB>> ]
-"10226" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1827</SUB>> ]
-"10233" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1827</SUB>> ]
-"10227" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1827</SUB>> ]
-"10228" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1827</SUB>> ]
-"10230" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1827</SUB>> ]
-"10211" [label = <(METHOD,CallStaticFloatMethodA)<SUB>1826</SUB>> ]
-"10247" [label = <(METHOD_RETURN,jfloat)<SUB>1826</SUB>> ]
-  "10217" -> "10222" 
-  "10217" -> "10236" 
-  "10236" -> "10241" 
-  "10238" -> "10247" 
-  "10239" -> "10238" 
-  "10240" -> "10239" 
-  "10221" -> "10228" 
-  "10221" -> "10236" 
-  "10241" -> "10246" 
-  "10246" -> "10240" 
-  "10222" -> "10221" 
-  "10226" -> "10233" 
-  "10233" -> "10247" 
-  "10227" -> "10226" 
-  "10228" -> "10230" 
-  "10230" -> "10227" 
-  "10211" -> "10217" 
+digraph "CallStaticVoidMethod" {  
+"10186" [label = <(va_start,va_start(ap, mid))<SUB>1778</SUB>> ]
+"10190" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1779</SUB>> ]
+"10193" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1780</SUB>> ]
+"10211" [label = <(soa,soa(env))<SUB>1781</SUB>> ]
+"10213" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1782</SUB>> ]
+"10191" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1779</SUB>> ]
+"10197" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1780</SUB>> ]
+"10198" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1780</SUB>> ]
+"10202" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1780</SUB>> ]
+"10209" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1780</SUB>> ]
+"10203" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1780</SUB>> ]
+"10204" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1780</SUB>> ]
+"10206" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1780</SUB>> ]
+"10180" [label = <(METHOD,CallStaticVoidMethod)<SUB>1776</SUB>> ]
+"10218" [label = <(METHOD_RETURN,void)<SUB>1776</SUB>> ]
+  "10186" -> "10191" 
+  "10190" -> "10193" 
+  "10193" -> "10198" 
+  "10193" -> "10211" 
+  "10211" -> "10213" 
+  "10213" -> "10218" 
+  "10191" -> "10190" 
+  "10197" -> "10204" 
+  "10197" -> "10211" 
+  "10198" -> "10197" 
+  "10202" -> "10209" 
+  "10209" -> "10218" 
+  "10203" -> "10202" 
+  "10204" -> "10206" 
+  "10206" -> "10203" 
+  "10180" -> "10186" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/183-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/183-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/183-cfg.dot	2023-06-07 19:35:01.517387159 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/183-cfg.dot	2023-06-07 19:35:08.047386515 +0330
@@ -1,43 +1,27 @@
-digraph "CallStaticDoubleMethod" {  
-"10255" [label = <(va_start,va_start(ap, mid))<SUB>1834</SUB>> ]
-"10259" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1835</SUB>> ]
-"10262" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1836</SUB>> ]
-"10281" [label = <(soa,soa(env))<SUB>1837</SUB>> ]
-"10284" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, ap)))<SUB>1838</SUB>> ]
-"10290" [label = <(RETURN,return result.GetD();,return result.GetD();)<SUB>1839</SUB>> ]
-"10260" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1835</SUB>> ]
-"10285" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1838</SUB>> ]
-"10291" [label = <(GetD,result.GetD())<SUB>1839</SUB>> ]
-"10292" [label = <(&lt;operator&gt;.fieldAccess,result.GetD)<SUB>1839</SUB>> ]
-"10266" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1836</SUB>> ]
-"10294" [label = <(FIELD_IDENTIFIER,GetD,GetD)<SUB>1839</SUB>> ]
-"10267" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1836</SUB>> ]
-"10271" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1836</SUB>> ]
-"10278" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1836</SUB>> ]
-"10272" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1836</SUB>> ]
-"10273" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1836</SUB>> ]
-"10275" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1836</SUB>> ]
-"10249" [label = <(METHOD,CallStaticDoubleMethod)<SUB>1832</SUB>> ]
-"10295" [label = <(METHOD_RETURN,jdouble)<SUB>1832</SUB>> ]
-  "10255" -> "10260" 
-  "10259" -> "10262" 
-  "10262" -> "10267" 
-  "10262" -> "10281" 
-  "10281" -> "10285" 
-  "10284" -> "10294" 
-  "10290" -> "10295" 
-  "10260" -> "10259" 
-  "10285" -> "10284" 
-  "10291" -> "10290" 
-  "10292" -> "10291" 
-  "10266" -> "10273" 
-  "10266" -> "10281" 
-  "10294" -> "10292" 
-  "10267" -> "10266" 
-  "10271" -> "10278" 
-  "10278" -> "10295" 
-  "10272" -> "10271" 
-  "10273" -> "10275" 
-  "10275" -> "10272" 
-  "10249" -> "10255" 
+digraph "CallStaticVoidMethodV" {  
+"10226" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1786</SUB>> ]
+"10244" [label = <(soa,soa(env))<SUB>1787</SUB>> ]
+"10246" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1788</SUB>> ]
+"10230" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1786</SUB>> ]
+"10231" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1786</SUB>> ]
+"10235" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1786</SUB>> ]
+"10242" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1786</SUB>> ]
+"10236" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1786</SUB>> ]
+"10237" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1786</SUB>> ]
+"10239" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1786</SUB>> ]
+"10220" [label = <(METHOD,CallStaticVoidMethodV)<SUB>1785</SUB>> ]
+"10251" [label = <(METHOD_RETURN,void)<SUB>1785</SUB>> ]
+  "10226" -> "10231" 
+  "10226" -> "10244" 
+  "10244" -> "10246" 
+  "10246" -> "10251" 
+  "10230" -> "10237" 
+  "10230" -> "10244" 
+  "10231" -> "10230" 
+  "10235" -> "10242" 
+  "10242" -> "10251" 
+  "10236" -> "10235" 
+  "10237" -> "10239" 
+  "10239" -> "10236" 
+  "10220" -> "10226" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/184-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/184-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/184-cfg.dot	2023-06-07 19:35:01.517387159 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/184-cfg.dot	2023-06-07 19:35:08.047386515 +0330
@@ -1,35 +1,27 @@
-digraph "CallStaticDoubleMethodV" {  
-"10303" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1843</SUB>> ]
-"10322" [label = <(soa,soa(env))<SUB>1844</SUB>> ]
-"10324" [label = <(RETURN,return InvokeWithVarArgs(soa, nullptr, mid, args).GetD();,return InvokeWithVarArgs(soa, nullptr, mid, args).GetD();)<SUB>1845</SUB>> ]
-"10325" [label = <(GetD,InvokeWithVarArgs(soa, nullptr, mid, args).GetD())<SUB>1845</SUB>> ]
-"10326" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, nullptr, mid, args).GetD)<SUB>1845</SUB>> ]
-"10307" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1843</SUB>> ]
-"10327" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1845</SUB>> ]
-"10332" [label = <(FIELD_IDENTIFIER,GetD,GetD)<SUB>1845</SUB>> ]
-"10308" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1843</SUB>> ]
-"10312" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1843</SUB>> ]
-"10319" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1843</SUB>> ]
-"10313" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1843</SUB>> ]
-"10314" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1843</SUB>> ]
-"10316" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1843</SUB>> ]
-"10297" [label = <(METHOD,CallStaticDoubleMethodV)<SUB>1842</SUB>> ]
-"10333" [label = <(METHOD_RETURN,jdouble)<SUB>1842</SUB>> ]
-  "10303" -> "10308" 
-  "10303" -> "10322" 
-  "10322" -> "10327" 
-  "10324" -> "10333" 
-  "10325" -> "10324" 
-  "10326" -> "10325" 
-  "10307" -> "10314" 
-  "10307" -> "10322" 
-  "10327" -> "10332" 
-  "10332" -> "10326" 
-  "10308" -> "10307" 
-  "10312" -> "10319" 
-  "10319" -> "10333" 
-  "10313" -> "10312" 
-  "10314" -> "10316" 
-  "10316" -> "10313" 
-  "10297" -> "10303" 
+digraph "CallStaticVoidMethodA" {  
+"10259" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1792</SUB>> ]
+"10277" [label = <(soa,soa(env))<SUB>1793</SUB>> ]
+"10279" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1794</SUB>> ]
+"10263" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1792</SUB>> ]
+"10264" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1792</SUB>> ]
+"10268" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1792</SUB>> ]
+"10275" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1792</SUB>> ]
+"10269" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1792</SUB>> ]
+"10270" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1792</SUB>> ]
+"10272" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1792</SUB>> ]
+"10253" [label = <(METHOD,CallStaticVoidMethodA)<SUB>1791</SUB>> ]
+"10284" [label = <(METHOD_RETURN,void)<SUB>1791</SUB>> ]
+  "10259" -> "10264" 
+  "10259" -> "10277" 
+  "10277" -> "10279" 
+  "10279" -> "10284" 
+  "10263" -> "10270" 
+  "10263" -> "10277" 
+  "10264" -> "10263" 
+  "10268" -> "10275" 
+  "10275" -> "10284" 
+  "10269" -> "10268" 
+  "10270" -> "10272" 
+  "10272" -> "10269" 
+  "10253" -> "10259" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/185-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/185-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/185-cfg.dot	2023-06-07 19:35:01.517387159 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/185-cfg.dot	2023-06-07 19:35:08.047386515 +0330
@@ -1,35 +1,76 @@
-digraph "CallStaticDoubleMethodA" {  
-"10341" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1849</SUB>> ]
-"10360" [label = <(soa,soa(env))<SUB>1850</SUB>> ]
-"10362" [label = <(RETURN,return InvokeWithJValues(soa, nullptr, mid, args).GetD();,return InvokeWithJValues(soa, nullptr, mid, args).GetD();)<SUB>1851</SUB>> ]
-"10363" [label = <(GetD,InvokeWithJValues(soa, nullptr, mid, args).GetD())<SUB>1851</SUB>> ]
-"10364" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, nullptr, mid, args).GetD)<SUB>1851</SUB>> ]
-"10345" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1849</SUB>> ]
-"10365" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1851</SUB>> ]
-"10370" [label = <(FIELD_IDENTIFIER,GetD,GetD)<SUB>1851</SUB>> ]
-"10346" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1849</SUB>> ]
-"10350" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1849</SUB>> ]
-"10357" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1849</SUB>> ]
-"10351" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1849</SUB>> ]
-"10352" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1849</SUB>> ]
-"10354" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1849</SUB>> ]
-"10335" [label = <(METHOD,CallStaticDoubleMethodA)<SUB>1848</SUB>> ]
-"10371" [label = <(METHOD_RETURN,jdouble)<SUB>1848</SUB>> ]
-  "10341" -> "10346" 
-  "10341" -> "10360" 
-  "10360" -> "10365" 
-  "10362" -> "10371" 
-  "10363" -> "10362" 
-  "10364" -> "10363" 
-  "10345" -> "10352" 
-  "10345" -> "10360" 
-  "10365" -> "10370" 
-  "10370" -> "10364" 
-  "10346" -> "10345" 
-  "10350" -> "10357" 
-  "10357" -> "10371" 
+digraph "NewString" {  
+"10327" [label = <(soa,soa(env))<SUB>1806</SUB>> ]
+"10329" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::String&gt; result = mirror::String::AllocFromUtf16(soa.Self(), char_count, chars))<SUB>1807</SUB>> ]
+"10349" [label = <(RETURN,return soa.AddLocalReference&lt;jstring&gt;(result);,return soa.AddLocalReference&lt;jstring&gt;(result);)<SUB>1808</SUB>> ]
+"10292" [label = <(UNLIKELY,UNLIKELY(char_count &lt; 0))<SUB>1798</SUB>> ]
+"10308" [label = <(UNLIKELY,UNLIKELY(chars == nullptr &amp;&amp; char_count &gt; 0))<SUB>1802</SUB>> ]
+"10330" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::String&gt; result)<SUB>1807</SUB>> ]
+"10337" [label = <(mirror::String::AllocFromUtf16,mirror::String::AllocFromUtf16(soa.Self(), char_count, chars))<SUB>1807</SUB>> ]
+"10350" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jstring&gt;(result))<SUB>1808</SUB>> ]
+"10293" [label = <(&lt;operator&gt;.lessThan,char_count &lt; 0)<SUB>1798</SUB>> ]
+"10297" [label = <(JniAbortF,JavaVmExtFromEnv(env)-&gt;JniAbortF(&quot;NewString&quot;, &quot;char_count &lt; 0: %d&quot;, char_count))<SUB>1799</SUB>> ]
+"10305" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>1800</SUB>> ]
+"10309" [label = <(&lt;operator&gt;.logicalAnd,chars == nullptr &amp;&amp; char_count &gt; 0)<SUB>1802</SUB>> ]
+"10317" [label = <(JniAbortF,JavaVmExtFromEnv(env)-&gt;JniAbortF(&quot;NewString&quot;, &quot;chars == null &amp;&amp; char_count &gt; 0&quot;))<SUB>1803</SUB>> ]
+"10324" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>1804</SUB>> ]
+"10331" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::String)<SUB>1807</SUB>> ]
+"10338" [label = <(&lt;operator&gt;.fieldAccess,mirror::String::AllocFromUtf16)<SUB>1807</SUB>> ]
+"10343" [label = <(Self,soa.Self())<SUB>1807</SUB>> ]
+"10351" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jstring)<SUB>1808</SUB>> ]
+"10298" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1799</SUB>> ]
+"10310" [label = <(&lt;operator&gt;.equals,chars == nullptr)<SUB>1802</SUB>> ]
+"10313" [label = <(&lt;operator&gt;.greaterThan,char_count &gt; 0)<SUB>1802</SUB>> ]
+"10318" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1803</SUB>> ]
+"10333" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1807</SUB>> ]
+"10339" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1807</SUB>> ]
+"10342" [label = <(FIELD_IDENTIFIER,AllocFromUtf16,AllocFromUtf16)<SUB>1807</SUB>> ]
+"10344" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>1807</SUB>> ]
+"10352" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1808</SUB>> ]
+"10299" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1799</SUB>> ]
+"10301" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1799</SUB>> ]
+"10319" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1803</SUB>> ]
+"10321" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1803</SUB>> ]
+"10335" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1807</SUB>> ]
+"10346" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>1807</SUB>> ]
+"10354" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1808</SUB>> ]
+"10286" [label = <(METHOD,NewString)<SUB>1797</SUB>> ]
+"10357" [label = <(METHOD_RETURN,jstring)<SUB>1797</SUB>> ]
+  "10327" -> "10335" 
+  "10329" -> "10354" 
+  "10349" -> "10357" 
+  "10292" -> "10299" 
+  "10292" -> "10310" 
+  "10308" -> "10319" 
+  "10308" -> "10327" 
+  "10330" -> "10339" 
+  "10337" -> "10329" 
+  "10350" -> "10349" 
+  "10293" -> "10292" 
+  "10297" -> "10305" 
+  "10305" -> "10357" 
+  "10309" -> "10308" 
+  "10317" -> "10324" 
+  "10324" -> "10357" 
+  "10331" -> "10330" 
+  "10338" -> "10346" 
+  "10343" -> "10337" 
   "10351" -> "10350" 
-  "10352" -> "10354" 
-  "10354" -> "10351" 
-  "10335" -> "10341" 
+  "10298" -> "10297" 
+  "10310" -> "10309" 
+  "10310" -> "10313" 
+  "10313" -> "10309" 
+  "10318" -> "10317" 
+  "10333" -> "10331" 
+  "10339" -> "10342" 
+  "10342" -> "10338" 
+  "10344" -> "10343" 
+  "10352" -> "10351" 
+  "10299" -> "10301" 
+  "10301" -> "10298" 
+  "10319" -> "10321" 
+  "10321" -> "10318" 
+  "10335" -> "10333" 
+  "10346" -> "10344" 
+  "10354" -> "10352" 
+  "10286" -> "10293" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/186-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/186-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/186-cfg.dot	2023-06-07 19:35:01.517387159 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/186-cfg.dot	2023-06-07 19:35:08.047386515 +0330
@@ -1,33 +1,46 @@
-digraph "CallStaticVoidMethod" {  
-"10379" [label = <(va_start,va_start(ap, mid))<SUB>1856</SUB>> ]
-"10383" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1857</SUB>> ]
-"10386" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1858</SUB>> ]
-"10404" [label = <(soa,soa(env))<SUB>1859</SUB>> ]
-"10406" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1860</SUB>> ]
-"10384" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1857</SUB>> ]
-"10390" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1858</SUB>> ]
-"10391" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1858</SUB>> ]
-"10395" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1858</SUB>> ]
-"10402" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1858</SUB>> ]
-"10396" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1858</SUB>> ]
-"10397" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1858</SUB>> ]
-"10399" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1858</SUB>> ]
-"10373" [label = <(METHOD,CallStaticVoidMethod)<SUB>1854</SUB>> ]
-"10411" [label = <(METHOD_RETURN,void)<SUB>1854</SUB>> ]
-  "10379" -> "10384" 
+digraph "NewStringUTF" {  
+"10371" [label = <(soa,soa(env))<SUB>1815</SUB>> ]
+"10373" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::String&gt; result = mirror::String::AllocFromModifiedUtf8(soa.Self(), utf))<SUB>1816</SUB>> ]
+"10392" [label = <(RETURN,return soa.AddLocalReference&lt;jstring&gt;(result);,return soa.AddLocalReference&lt;jstring&gt;(result);)<SUB>1817</SUB>> ]
+"10364" [label = <(&lt;operator&gt;.equals,utf == nullptr)<SUB>1812</SUB>> ]
+"10374" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::String&gt; result)<SUB>1816</SUB>> ]
+"10381" [label = <(mirror::String::AllocFromModifiedUtf8,mirror::String::AllocFromModifiedUtf8(soa.Self(), utf))<SUB>1816</SUB>> ]
+"10393" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jstring&gt;(result))<SUB>1817</SUB>> ]
+"10368" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>1813</SUB>> ]
+"10375" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::String)<SUB>1816</SUB>> ]
+"10382" [label = <(&lt;operator&gt;.fieldAccess,mirror::String::AllocFromModifiedUtf8)<SUB>1816</SUB>> ]
+"10387" [label = <(Self,soa.Self())<SUB>1816</SUB>> ]
+"10394" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jstring)<SUB>1817</SUB>> ]
+"10377" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1816</SUB>> ]
+"10383" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1816</SUB>> ]
+"10386" [label = <(FIELD_IDENTIFIER,AllocFromModifiedUtf8,AllocFromModifiedUtf8)<SUB>1816</SUB>> ]
+"10388" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>1816</SUB>> ]
+"10395" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1817</SUB>> ]
+"10379" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1816</SUB>> ]
+"10390" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>1816</SUB>> ]
+"10397" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1817</SUB>> ]
+"10359" [label = <(METHOD,NewStringUTF)<SUB>1811</SUB>> ]
+"10400" [label = <(METHOD_RETURN,jstring)<SUB>1811</SUB>> ]
+  "10371" -> "10379" 
+  "10373" -> "10397" 
+  "10392" -> "10400" 
+  "10364" -> "10368" 
+  "10364" -> "10371" 
+  "10374" -> "10383" 
+  "10381" -> "10373" 
+  "10393" -> "10392" 
+  "10368" -> "10400" 
+  "10375" -> "10374" 
+  "10382" -> "10390" 
+  "10387" -> "10381" 
+  "10394" -> "10393" 
+  "10377" -> "10375" 
   "10383" -> "10386" 
-  "10386" -> "10391" 
-  "10386" -> "10404" 
-  "10404" -> "10406" 
-  "10406" -> "10411" 
-  "10384" -> "10383" 
-  "10390" -> "10397" 
-  "10390" -> "10404" 
-  "10391" -> "10390" 
-  "10395" -> "10402" 
-  "10402" -> "10411" 
-  "10396" -> "10395" 
-  "10397" -> "10399" 
-  "10399" -> "10396" 
-  "10373" -> "10379" 
+  "10386" -> "10382" 
+  "10388" -> "10387" 
+  "10395" -> "10394" 
+  "10379" -> "10377" 
+  "10390" -> "10388" 
+  "10397" -> "10395" 
+  "10359" -> "10364" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/187-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/187-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/187-cfg.dot	2023-06-07 19:35:01.517387159 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/187-cfg.dot	2023-06-07 19:35:08.047386515 +0330
@@ -1,27 +1,45 @@
-digraph "CallStaticVoidMethodV" {  
-"10419" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1864</SUB>> ]
-"10437" [label = <(soa,soa(env))<SUB>1865</SUB>> ]
-"10439" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1866</SUB>> ]
-"10423" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1864</SUB>> ]
-"10424" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1864</SUB>> ]
-"10428" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1864</SUB>> ]
-"10435" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1864</SUB>> ]
-"10429" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1864</SUB>> ]
-"10430" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1864</SUB>> ]
-"10432" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1864</SUB>> ]
-"10413" [label = <(METHOD,CallStaticVoidMethodV)<SUB>1863</SUB>> ]
-"10444" [label = <(METHOD_RETURN,void)<SUB>1863</SUB>> ]
-  "10419" -> "10424" 
-  "10419" -> "10437" 
-  "10437" -> "10439" 
-  "10439" -> "10444" 
-  "10423" -> "10430" 
-  "10423" -> "10437" 
-  "10424" -> "10423" 
-  "10428" -> "10435" 
-  "10435" -> "10444" 
-  "10429" -> "10428" 
-  "10430" -> "10432" 
-  "10432" -> "10429" 
-  "10413" -> "10419" 
+digraph "GetStringLength" {  
+"10406" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string))<SUB>1821</SUB>> ]
+"10425" [label = <(soa,soa(env))<SUB>1822</SUB>> ]
+"10427" [label = <(RETURN,return soa.Decode&lt;mirror::String&gt;(java_string)-&gt;GetLength();,return soa.Decode&lt;mirror::String&gt;(java_string)-&gt;GetLength();)<SUB>1823</SUB>> ]
+"10428" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::String&gt;(java_string)-&gt;GetLength())<SUB>1823</SUB>> ]
+"10429" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::String)<SUB>1823</SUB>> ]
+"10436" [label = <(GetLength,(java_string)-&gt;GetLength())<SUB>1823</SUB>> ]
+"10410" [label = <(UNLIKELY,UNLIKELY((java_string) == nullptr))<SUB>1821</SUB>> ]
+"10430" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1823</SUB>> ]
+"10433" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1823</SUB>> ]
+"10437" [label = <(&lt;operator&gt;.indirectFieldAccess,(java_string)-&gt;GetLength)<SUB>1823</SUB>> ]
+"10411" [label = <(&lt;operator&gt;.equals,(java_string) == nullptr)<SUB>1821</SUB>> ]
+"10415" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_string == null&quot;))<SUB>1821</SUB>> ]
+"10422" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string))<SUB>1821</SUB>> ]
+"10432" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1823</SUB>> ]
+"10435" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1823</SUB>> ]
+"10439" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>1823</SUB>> ]
+"10416" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1821</SUB>> ]
+"10417" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1821</SUB>> ]
+"10419" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1821</SUB>> ]
+"10402" [label = <(METHOD,GetStringLength)<SUB>1820</SUB>> ]
+"10440" [label = <(METHOD_RETURN,jsize)<SUB>1820</SUB>> ]
+  "10406" -> "10411" 
+  "10406" -> "10425" 
+  "10425" -> "10432" 
+  "10427" -> "10440" 
+  "10428" -> "10427" 
+  "10429" -> "10439" 
+  "10436" -> "10428" 
+  "10410" -> "10417" 
+  "10410" -> "10425" 
+  "10430" -> "10435" 
+  "10433" -> "10429" 
+  "10437" -> "10436" 
+  "10411" -> "10410" 
+  "10415" -> "10422" 
+  "10422" -> "10440" 
+  "10432" -> "10430" 
+  "10435" -> "10433" 
+  "10439" -> "10437" 
+  "10416" -> "10415" 
+  "10417" -> "10419" 
+  "10419" -> "10416" 
+  "10402" -> "10406" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/188-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/188-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/188-cfg.dot	2023-06-07 19:35:01.517387159 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/188-cfg.dot	2023-06-07 19:35:08.047386515 +0330
@@ -1,27 +1,45 @@
-digraph "CallStaticVoidMethodA" {  
-"10452" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1870</SUB>> ]
-"10470" [label = <(soa,soa(env))<SUB>1871</SUB>> ]
-"10472" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1872</SUB>> ]
-"10456" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1870</SUB>> ]
-"10457" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1870</SUB>> ]
-"10461" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1870</SUB>> ]
-"10468" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1870</SUB>> ]
-"10462" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1870</SUB>> ]
-"10463" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1870</SUB>> ]
-"10465" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1870</SUB>> ]
-"10446" [label = <(METHOD,CallStaticVoidMethodA)<SUB>1869</SUB>> ]
-"10477" [label = <(METHOD_RETURN,void)<SUB>1869</SUB>> ]
-  "10452" -> "10457" 
-  "10452" -> "10470" 
-  "10470" -> "10472" 
-  "10472" -> "10477" 
-  "10456" -> "10463" 
-  "10456" -> "10470" 
-  "10457" -> "10456" 
-  "10461" -> "10468" 
-  "10468" -> "10477" 
-  "10462" -> "10461" 
-  "10463" -> "10465" 
-  "10465" -> "10462" 
-  "10446" -> "10452" 
+digraph "GetStringUTFLength" {  
+"10446" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string))<SUB>1827</SUB>> ]
+"10465" [label = <(soa,soa(env))<SUB>1828</SUB>> ]
+"10467" [label = <(RETURN,return soa.Decode&lt;mirror::String&gt;(java_string)-&gt;GetUtfLength();,return soa.Decode&lt;mirror::String&gt;(java_string)-&gt;GetUtfLength();)<SUB>1829</SUB>> ]
+"10468" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::String&gt;(java_string)-&gt;GetUtfLength())<SUB>1829</SUB>> ]
+"10469" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::String)<SUB>1829</SUB>> ]
+"10476" [label = <(GetUtfLength,(java_string)-&gt;GetUtfLength())<SUB>1829</SUB>> ]
+"10450" [label = <(UNLIKELY,UNLIKELY((java_string) == nullptr))<SUB>1827</SUB>> ]
+"10470" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1829</SUB>> ]
+"10473" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1829</SUB>> ]
+"10477" [label = <(&lt;operator&gt;.indirectFieldAccess,(java_string)-&gt;GetUtfLength)<SUB>1829</SUB>> ]
+"10451" [label = <(&lt;operator&gt;.equals,(java_string) == nullptr)<SUB>1827</SUB>> ]
+"10455" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_string == null&quot;))<SUB>1827</SUB>> ]
+"10462" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string))<SUB>1827</SUB>> ]
+"10472" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1829</SUB>> ]
+"10475" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1829</SUB>> ]
+"10479" [label = <(FIELD_IDENTIFIER,GetUtfLength,GetUtfLength)<SUB>1829</SUB>> ]
+"10456" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1827</SUB>> ]
+"10457" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1827</SUB>> ]
+"10459" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1827</SUB>> ]
+"10442" [label = <(METHOD,GetStringUTFLength)<SUB>1826</SUB>> ]
+"10480" [label = <(METHOD_RETURN,jsize)<SUB>1826</SUB>> ]
+  "10446" -> "10451" 
+  "10446" -> "10465" 
+  "10465" -> "10472" 
+  "10467" -> "10480" 
+  "10468" -> "10467" 
+  "10469" -> "10479" 
+  "10476" -> "10468" 
+  "10450" -> "10457" 
+  "10450" -> "10465" 
+  "10470" -> "10475" 
+  "10473" -> "10469" 
+  "10477" -> "10476" 
+  "10451" -> "10450" 
+  "10455" -> "10462" 
+  "10462" -> "10480" 
+  "10472" -> "10470" 
+  "10475" -> "10473" 
+  "10479" -> "10477" 
+  "10456" -> "10455" 
+  "10457" -> "10459" 
+  "10459" -> "10456" 
+  "10442" -> "10446" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/189-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/189-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/189-cfg.dot	2023-06-07 19:35:01.517387159 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/189-cfg.dot	2023-06-07 19:35:08.047386515 +0330
@@ -1,76 +1,149 @@
-digraph "NewString" {  
-"10520" [label = <(soa,soa(env))<SUB>1884</SUB>> ]
-"10522" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::String&gt; result = mirror::String::AllocFromUtf16(soa.Self(), char_count, chars))<SUB>1885</SUB>> ]
-"10542" [label = <(RETURN,return soa.AddLocalReference&lt;jstring&gt;(result);,return soa.AddLocalReference&lt;jstring&gt;(result);)<SUB>1886</SUB>> ]
-"10485" [label = <(UNLIKELY,UNLIKELY(char_count &lt; 0))<SUB>1876</SUB>> ]
-"10501" [label = <(UNLIKELY,UNLIKELY(chars == nullptr &amp;&amp; char_count &gt; 0))<SUB>1880</SUB>> ]
-"10523" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::String&gt; result)<SUB>1885</SUB>> ]
-"10530" [label = <(mirror::String::AllocFromUtf16,mirror::String::AllocFromUtf16(soa.Self(), char_count, chars))<SUB>1885</SUB>> ]
-"10543" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jstring&gt;(result))<SUB>1886</SUB>> ]
-"10486" [label = <(&lt;operator&gt;.lessThan,char_count &lt; 0)<SUB>1876</SUB>> ]
-"10490" [label = <(JniAbortF,JavaVmExtFromEnv(env)-&gt;JniAbortF(&quot;NewString&quot;, &quot;char_count &lt; 0: %d&quot;, char_count))<SUB>1877</SUB>> ]
-"10498" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>1878</SUB>> ]
-"10502" [label = <(&lt;operator&gt;.logicalAnd,chars == nullptr &amp;&amp; char_count &gt; 0)<SUB>1880</SUB>> ]
-"10510" [label = <(JniAbortF,JavaVmExtFromEnv(env)-&gt;JniAbortF(&quot;NewString&quot;, &quot;chars == null &amp;&amp; char_count &gt; 0&quot;))<SUB>1881</SUB>> ]
-"10517" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>1882</SUB>> ]
-"10524" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::String)<SUB>1885</SUB>> ]
-"10531" [label = <(&lt;operator&gt;.fieldAccess,mirror::String::AllocFromUtf16)<SUB>1885</SUB>> ]
-"10536" [label = <(Self,soa.Self())<SUB>1885</SUB>> ]
-"10544" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jstring)<SUB>1886</SUB>> ]
-"10491" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1877</SUB>> ]
-"10503" [label = <(&lt;operator&gt;.equals,chars == nullptr)<SUB>1880</SUB>> ]
-"10506" [label = <(&lt;operator&gt;.greaterThan,char_count &gt; 0)<SUB>1880</SUB>> ]
-"10511" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1881</SUB>> ]
-"10526" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1885</SUB>> ]
-"10532" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1885</SUB>> ]
-"10535" [label = <(FIELD_IDENTIFIER,AllocFromUtf16,AllocFromUtf16)<SUB>1885</SUB>> ]
-"10537" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>1885</SUB>> ]
-"10545" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1886</SUB>> ]
-"10492" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1877</SUB>> ]
-"10494" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1877</SUB>> ]
-"10512" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1881</SUB>> ]
-"10514" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1881</SUB>> ]
-"10528" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1885</SUB>> ]
-"10539" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>1885</SUB>> ]
-"10547" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1886</SUB>> ]
-"10479" [label = <(METHOD,NewString)<SUB>1875</SUB>> ]
-"10550" [label = <(METHOD_RETURN,jstring)<SUB>1875</SUB>> ]
-  "10520" -> "10528" 
-  "10522" -> "10547" 
-  "10542" -> "10550" 
-  "10485" -> "10492" 
-  "10485" -> "10503" 
-  "10501" -> "10512" 
-  "10501" -> "10520" 
-  "10523" -> "10532" 
-  "10530" -> "10522" 
-  "10543" -> "10542" 
-  "10486" -> "10485" 
-  "10490" -> "10498" 
-  "10498" -> "10550" 
-  "10502" -> "10501" 
-  "10510" -> "10517" 
-  "10517" -> "10550" 
-  "10524" -> "10523" 
-  "10531" -> "10539" 
-  "10536" -> "10530" 
-  "10544" -> "10543" 
-  "10491" -> "10490" 
-  "10503" -> "10502" 
-  "10503" -> "10506" 
-  "10506" -> "10502" 
+digraph "GetStringRegion" {  
+"10489" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string))<SUB>1834</SUB>> ]
+"10507" [label = <(soa,soa(env))<SUB>1835</SUB>> ]
+"10509" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::String&gt; s = soa.Decode&lt;mirror::String&gt;(java_string))<SUB>1836</SUB>> ]
+"10510" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::String&gt; s)<SUB>1836</SUB>> ]
+"10517" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::String&gt;(java_string))<SUB>1836</SUB>> ]
+"10527" [label = <(&lt;operator&gt;.logicalOr,start &lt; 0 || length &lt; 0 || length &gt; s-&gt;GetLength() - start)<SUB>1837</SUB>> ]
+"10511" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::String)<SUB>1836</SUB>> ]
+"10518" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::String)<SUB>1836</SUB>> ]
+"10528" [label = <(&lt;operator&gt;.logicalOr,start &lt; 0 || length &lt; 0)<SUB>1837</SUB>> ]
+"10535" [label = <(&lt;operator&gt;.greaterThan,length &gt; s-&gt;GetLength() - start)<SUB>1837</SUB>> ]
+"10544" [label = <(ThrowSIOOBE,ThrowSIOOBE(soa, start, length, s-&gt;GetLength()))<SUB>1838</SUB>> ]
+"10493" [label = <(UNLIKELY,UNLIKELY((java_string) == nullptr))<SUB>1834</SUB>> ]
+"10513" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1836</SUB>> ]
+"10519" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1836</SUB>> ]
+"10522" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1836</SUB>> ]
+"10529" [label = <(&lt;operator&gt;.lessThan,start &lt; 0)<SUB>1837</SUB>> ]
+"10532" [label = <(&lt;operator&gt;.lessThan,length &lt; 0)<SUB>1837</SUB>> ]
+"10537" [label = <(&lt;operator&gt;.subtraction,s-&gt;GetLength() - start)<SUB>1837</SUB>> ]
+"10548" [label = <(GetLength,s-&gt;GetLength())<SUB>1838</SUB>> ]
+"10554" [label = <(CHECK_NON_NULL_MEMCPY_ARGUMENT,CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf))<SUB>1840</SUB>> ]
+"10494" [label = <(&lt;operator&gt;.equals,(java_string) == nullptr)<SUB>1834</SUB>> ]
+"10498" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_string == null&quot;))<SUB>1834</SUB>> ]
+"10505" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string))<SUB>1834</SUB>> ]
+"10515" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1836</SUB>> ]
+"10521" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1836</SUB>> ]
+"10524" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1836</SUB>> ]
+"10538" [label = <(GetLength,s-&gt;GetLength())<SUB>1837</SUB>> ]
+"10549" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetLength)<SUB>1838</SUB>> ]
+"10577" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>1841</SUB>> ]
+"10499" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1834</SUB>> ]
+"10539" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetLength)<SUB>1837</SUB>> ]
+"10551" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>1838</SUB>> ]
+"10578" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>1841</SUB>> ]
+"10500" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1834</SUB>> ]
+"10502" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1834</SUB>> ]
+"10541" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>1837</SUB>> ]
+"10559" [label = <(UNLIKELY,UNLIKELY((length) != 0 &amp;&amp; (buf) == nullptr))<SUB>1840</SUB>> ]
+"10580" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>1841</SUB>> ]
+"10588" [label = <(&lt;operator&gt;.lessThan,i &lt; length)<SUB>1842</SUB>> ]
+"10591" [label = <(&lt;operator&gt;.preIncrement,++i)<SUB>1842</SUB>> ]
+"10610" [label = <(&lt;operator&gt;.assignment,* chars = static_cast&lt;jchar*&gt;(s-&gt;GetValue()))<SUB>1846</SUB>> ]
+"10618" [label = <(memcpy,memcpy(buf, chars + start, length * sizeof(jchar)))<SUB>1847</SUB>> ]
+"10560" [label = <(&lt;operator&gt;.logicalAnd,(length) != 0 &amp;&amp; (buf) == nullptr)<SUB>1840</SUB>> ]
+"10568" [label = <(CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;buf == null&quot;))<SUB>1840</SUB>> ]
+"10575" [label = <(RETURN,CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf),CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf))<SUB>1840</SUB>> ]
+"10585" [label = <(&lt;operator&gt;.assignment,i = 0)<SUB>1842</SUB>> ]
+"10594" [label = <(&lt;operator&gt;.assignment,buf[i] = static_cast&lt;jchar&gt;(s-&gt;CharAt(start+i)))<SUB>1843</SUB>> ]
+"10612" [label = <(&lt;operator&gt;.cast,static_cast&lt;jchar*&gt;(s-&gt;GetValue()))<SUB>1846</SUB>> ]
+"10620" [label = <(&lt;operator&gt;.addition,chars + start)<SUB>1847</SUB>> ]
+"10623" [label = <(&lt;operator&gt;.multiplication,length * sizeof(jchar))<SUB>1847</SUB>> ]
+"10561" [label = <(&lt;operator&gt;.notEquals,(length) != 0)<SUB>1840</SUB>> ]
+"10564" [label = <(&lt;operator&gt;.equals,(buf) == nullptr)<SUB>1840</SUB>> ]
+"10569" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1840</SUB>> ]
+"10595" [label = <(&lt;operator&gt;.indirectIndexAccess,buf[i])<SUB>1843</SUB>> ]
+"10598" [label = <(&lt;operator&gt;.cast,static_cast&lt;jchar&gt;(s-&gt;CharAt(start+i)))<SUB>1843</SUB>> ]
+"10613" [label = <(UNKNOWN,jchar*,jchar*)<SUB>1846</SUB>> ]
+"10614" [label = <(GetValue,s-&gt;GetValue())<SUB>1846</SUB>> ]
+"10625" [label = <(&lt;operator&gt;.sizeOf,sizeof(jchar))<SUB>1847</SUB>> ]
+"10570" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1840</SUB>> ]
+"10572" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1840</SUB>> ]
+"10599" [label = <(UNKNOWN,jchar,jchar)<SUB>1843</SUB>> ]
+"10600" [label = <(CharAt,s-&gt;CharAt(start+i))<SUB>1843</SUB>> ]
+"10615" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetValue)<SUB>1846</SUB>> ]
+"10601" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;CharAt)<SUB>1843</SUB>> ]
+"10604" [label = <(&lt;operator&gt;.addition,start+i)<SUB>1843</SUB>> ]
+"10617" [label = <(FIELD_IDENTIFIER,GetValue,GetValue)<SUB>1846</SUB>> ]
+"10603" [label = <(FIELD_IDENTIFIER,CharAt,CharAt)<SUB>1843</SUB>> ]
+"10482" [label = <(METHOD,GetStringRegion)<SUB>1832</SUB>> ]
+"10627" [label = <(METHOD_RETURN,void)<SUB>1832</SUB>> ]
+  "10489" -> "10494" 
+  "10489" -> "10507" 
+  "10507" -> "10515" 
+  "10509" -> "10529" 
+  "10510" -> "10521" 
+  "10517" -> "10509" 
+  "10527" -> "10551" 
+  "10527" -> "10554" 
   "10511" -> "10510" 
-  "10526" -> "10524" 
-  "10532" -> "10535" 
-  "10535" -> "10531" 
-  "10537" -> "10536" 
-  "10545" -> "10544" 
-  "10492" -> "10494" 
-  "10494" -> "10491" 
-  "10512" -> "10514" 
-  "10514" -> "10511" 
-  "10528" -> "10526" 
-  "10539" -> "10537" 
-  "10547" -> "10545" 
-  "10479" -> "10486" 
+  "10518" -> "10517" 
+  "10528" -> "10527" 
+  "10528" -> "10541" 
+  "10535" -> "10527" 
+  "10544" -> "10627" 
+  "10493" -> "10500" 
+  "10493" -> "10507" 
+  "10513" -> "10511" 
+  "10519" -> "10524" 
+  "10522" -> "10518" 
+  "10529" -> "10528" 
+  "10529" -> "10532" 
+  "10532" -> "10528" 
+  "10537" -> "10535" 
+  "10548" -> "10544" 
+  "10554" -> "10561" 
+  "10554" -> "10580" 
+  "10494" -> "10493" 
+  "10498" -> "10505" 
+  "10505" -> "10627" 
+  "10515" -> "10513" 
+  "10521" -> "10519" 
+  "10524" -> "10522" 
+  "10538" -> "10537" 
+  "10549" -> "10548" 
+  "10577" -> "10585" 
+  "10577" -> "10613" 
+  "10499" -> "10498" 
+  "10539" -> "10538" 
+  "10551" -> "10549" 
+  "10578" -> "10577" 
+  "10500" -> "10502" 
+  "10502" -> "10499" 
+  "10541" -> "10539" 
+  "10559" -> "10570" 
+  "10559" -> "10580" 
+  "10580" -> "10578" 
+  "10588" -> "10627" 
+  "10588" -> "10595" 
+  "10591" -> "10588" 
+  "10610" -> "10620" 
+  "10618" -> "10627" 
+  "10560" -> "10559" 
+  "10568" -> "10575" 
+  "10575" -> "10627" 
+  "10585" -> "10588" 
+  "10594" -> "10591" 
+  "10612" -> "10610" 
+  "10620" -> "10625" 
+  "10623" -> "10618" 
+  "10561" -> "10560" 
+  "10561" -> "10564" 
+  "10564" -> "10560" 
+  "10569" -> "10568" 
+  "10595" -> "10599" 
+  "10598" -> "10594" 
+  "10613" -> "10617" 
+  "10614" -> "10612" 
+  "10625" -> "10623" 
+  "10570" -> "10572" 
+  "10572" -> "10569" 
+  "10599" -> "10603" 
+  "10600" -> "10598" 
+  "10615" -> "10614" 
+  "10601" -> "10604" 
+  "10604" -> "10600" 
+  "10617" -> "10615" 
+  "10603" -> "10601" 
+  "10482" -> "10489" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/19-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/19-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/19-cfg.dot	2023-06-07 19:35:01.337387177 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/19-cfg.dot	2023-06-07 19:35:07.917386527 +0330
@@ -1,5 +1,359 @@
-digraph "ThrowNoSuchMethodError" {  
-"441" [label = <(METHOD,ThrowNoSuchMethodError)<SUB>364</SUB>> ]
-"448" [label = <(METHOD_RETURN,void)<SUB>364</SUB>> ]
-  "441" -> "448" 
+digraph "FindFieldJNI" {  
+"411" [label = <(&lt;operator&gt;.greaterThan,StackHandleScope&lt;2&gt; hs(soa.Self()))<SUB>345</SUB>> ]
+"420" [label = <(&lt;operator&gt;.greaterThan,Handle&lt;mirror::Class&gt; c(\012      hs.NewHandle(EnsureInitialized(soa.Self(), soa.Decode&lt;mirror::Class&gt;(jni_class)))))<SUB>346</SUB>> ]
+"453" [label = <(&lt;operator&gt;.assignment,* field = nullptr)<SUB>351</SUB>> ]
+"456" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; field_type)<SUB>352</SUB>> ]
+"464" [label = <(&lt;operator&gt;.assignment,* class_linker = Runtime::Current()-&gt;GetClassLinker())<SUB>353</SUB>> ]
+"704" [label = <(RETURN,return field;,return field;)<SUB>394</SUB>> ]
+"412" [label = <(&lt;operator&gt;.lessThan,StackHandleScope&lt;2)<SUB>345</SUB>> ]
+"415" [label = <(hs,hs(soa.Self()))<SUB>345</SUB>> ]
+"421" [label = <(&lt;operator&gt;.lessThan,Handle&lt;mirror::Class)<SUB>346</SUB>> ]
+"426" [label = <(c,c(\012      hs.NewHandle(EnsureInitialized(soa.Self(), soa.Decode&lt;mirror::Class&gt;(jni_class)))))<SUB>346</SUB>> ]
+"446" [label = <(&lt;operator&gt;.equals,c == nullptr)<SUB>348</SUB>> ]
+"457" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>352</SUB>> ]
+"466" [label = <(GetClassLinker,Runtime::Current()-&gt;GetClassLinker())<SUB>353</SUB>> ]
+"474" [label = <(UNLIKELY,UNLIKELY(sig[0] == '\0'))<SUB>354</SUB>> ]
+"532" [label = <(&lt;operator&gt;.equals,field_type == nullptr)<SUB>362</SUB>> ]
+"666" [label = <(&lt;operator&gt;.logicalAnd,field != nullptr &amp;&amp; ShouldDenyAccessToMember(field, soa.Self()))<SUB>385</SUB>> ]
+"681" [label = <(&lt;operator&gt;.equals,field == nullptr)<SUB>388</SUB>> ]
+"416" [label = <(Self,soa.Self())<SUB>345</SUB>> ]
+"423" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>346</SUB>> ]
+"427" [label = <(NewHandle,hs.NewHandle(EnsureInitialized(soa.Self(), soa.Decode&lt;mirror::Class&gt;(jni_class))))<SUB>347</SUB>> ]
+"450" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>349</SUB>> ]
+"459" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>352</SUB>> ]
+"467" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetClassLinker)<SUB>353</SUB>> ]
+"475" [label = <(&lt;operator&gt;.equals,sig[0] == '\0')<SUB>354</SUB>> ]
+"481" [label = <(DCHECK,DCHECK(field == nullptr))<SUB>355</SUB>> ]
+"536" [label = <(DCHECK,DCHECK(sig[0] == '\0' || soa.Self()-&gt;IsExceptionPending()))<SUB>364</SUB>> ]
+"550" [label = <(&lt;operator&gt;.greaterThan,StackHandleScope&lt;1&gt; hs2(soa.Self()))<SUB>365</SUB>> ]
+"559" [label = <(&lt;operator&gt;.greaterThan,Handle&lt;mirror::Throwable&gt; cause(hs2.NewHandle(soa.Self()-&gt;GetException())))<SUB>366</SUB>> ]
+"577" [label = <(ClearException,soa.Self()-&gt;ClearException())<SUB>367</SUB>> ]
+"585" [label = <(ThrowNewExceptionF,soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/NoSuchFieldError;&quot;,\012 &quot;no type \&quot;%s\&quot; found and so no field \&quot;%s\&quot; &quot;\012 &quot;could be found in class \&quot;%s\&quot; or its superclasses&quot;, sig, name,\012                                   c-&gt;GetDescriptor(&amp;temp)))<SUB>369</SUB>> ]
+"621" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>376</SUB>> ]
+"627" [label = <(&lt;operator&gt;.assignment,field = mirror::Class::FindStaticField(\012        soa.Self(), c.Get(), name, field_type-&gt;GetDescriptor(&amp;temp)))<SUB>380</SUB>> ]
+"667" [label = <(&lt;operator&gt;.notEquals,field != nullptr)<SUB>385</SUB>> ]
+"670" [label = <(ShouldDenyAccessToMember,ShouldDenyAccessToMember(field, soa.Self()))<SUB>385</SUB>> ]
+"677" [label = <(&lt;operator&gt;.assignment,field = nullptr)<SUB>386</SUB>> ]
+"685" [label = <(ThrowNewExceptionF,soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/NoSuchFieldError;&quot;,\012 &quot;no \&quot;%s\&quot; field \&quot;%s\&quot; in class \&quot;%s\&quot; or its superclasses&quot;,\012                                   sig, name, c-&gt;GetDescriptor(&amp;temp)))<SUB>389</SUB>> ]
+"702" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>392</SUB>> ]
+"417" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>345</SUB>> ]
+"425" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>346</SUB>> ]
+"428" [label = <(&lt;operator&gt;.fieldAccess,hs.NewHandle)<SUB>347</SUB>> ]
+"431" [label = <(EnsureInitialized,EnsureInitialized(soa.Self(), soa.Decode&lt;mirror::Class&gt;(jni_class)))<SUB>347</SUB>> ]
+"461" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>352</SUB>> ]
+"468" [label = <(Runtime::Current,Runtime::Current())<SUB>353</SUB>> ]
+"472" [label = <(FIELD_IDENTIFIER,GetClassLinker,GetClassLinker)<SUB>353</SUB>> ]
+"476" [label = <(&lt;operator&gt;.indirectIndexAccess,sig[0])<SUB>354</SUB>> ]
+"482" [label = <(&lt;operator&gt;.equals,field == nullptr)<SUB>355</SUB>> ]
+"537" [label = <(&lt;operator&gt;.logicalOr,sig[0] == '\0' || soa.Self()-&gt;IsExceptionPending())<SUB>364</SUB>> ]
+"551" [label = <(&lt;operator&gt;.lessThan,StackHandleScope&lt;1)<SUB>365</SUB>> ]
+"554" [label = <(hs2,hs2(soa.Self()))<SUB>365</SUB>> ]
+"560" [label = <(&lt;operator&gt;.lessThan,Handle&lt;mirror::Throwable)<SUB>366</SUB>> ]
+"565" [label = <(cause,cause(hs2.NewHandle(soa.Self()-&gt;GetException())))<SUB>366</SUB>> ]
+"578" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;ClearException)<SUB>367</SUB>> ]
+"586" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;ThrowNewExceptionF)<SUB>369</SUB>> ]
+"596" [label = <(GetDescriptor,c-&gt;GetDescriptor(&amp;temp))<SUB>372</SUB>> ]
+"603" [label = <(&lt;operator&gt;.notEquals,cause != nullptr)<SUB>373</SUB>> ]
+"629" [label = <(mirror::Class::FindStaticField,mirror::Class::FindStaticField(\012        soa.Self(), c.Get(), name, field_type-&gt;GetDescriptor(&amp;temp)))<SUB>380</SUB>> ]
+"652" [label = <(&lt;operator&gt;.assignment,field = c-&gt;FindInstanceField(name, field_type-&gt;GetDescriptor(&amp;temp)))<SUB>383</SUB>> ]
+"672" [label = <(Self,soa.Self())<SUB>385</SUB>> ]
+"686" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;ThrowNewExceptionF)<SUB>389</SUB>> ]
+"696" [label = <(GetDescriptor,c-&gt;GetDescriptor(&amp;temp))<SUB>391</SUB>> ]
+"419" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>345</SUB>> ]
+"430" [label = <(FIELD_IDENTIFIER,NewHandle,NewHandle)<SUB>347</SUB>> ]
+"432" [label = <(Self,soa.Self())<SUB>347</SUB>> ]
+"436" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(jni_class))<SUB>347</SUB>> ]
+"469" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>353</SUB>> ]
+"488" [label = <(&lt;operator&gt;.notEquals,sig[1] != '\0')<SUB>356</SUB>> ]
+"538" [label = <(&lt;operator&gt;.equals,sig[0] == '\0')<SUB>364</SUB>> ]
+"543" [label = <(IsExceptionPending,soa.Self()-&gt;IsExceptionPending())<SUB>364</SUB>> ]
+"555" [label = <(Self,soa.Self())<SUB>365</SUB>> ]
+"562" [label = <(&lt;operator&gt;.fieldAccess,mirror::Throwable)<SUB>366</SUB>> ]
+"566" [label = <(NewHandle,hs2.NewHandle(soa.Self()-&gt;GetException()))<SUB>366</SUB>> ]
+"579" [label = <(Self,soa.Self())<SUB>367</SUB>> ]
+"583" [label = <(FIELD_IDENTIFIER,ClearException,ClearException)<SUB>367</SUB>> ]
+"587" [label = <(Self,soa.Self())<SUB>369</SUB>> ]
+"591" [label = <(FIELD_IDENTIFIER,ThrowNewExceptionF,ThrowNewExceptionF)<SUB>369</SUB>> ]
+"597" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;GetDescriptor)<SUB>372</SUB>> ]
+"600" [label = <(&lt;operator&gt;.addressOf,&amp;temp)<SUB>372</SUB>> ]
+"607" [label = <(SetCause,soa.Self()-&gt;GetException()-&gt;SetCause(cause.Get()))<SUB>374</SUB>> ]
+"630" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class::FindStaticField)<SUB>380</SUB>> ]
+"635" [label = <(Self,soa.Self())<SUB>381</SUB>> ]
+"639" [label = <(Get,c.Get())<SUB>381</SUB>> ]
+"644" [label = <(GetDescriptor,field_type-&gt;GetDescriptor(&amp;temp))<SUB>381</SUB>> ]
+"654" [label = <(FindInstanceField,c-&gt;FindInstanceField(name, field_type-&gt;GetDescriptor(&amp;temp)))<SUB>383</SUB>> ]
+"673" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>385</SUB>> ]
+"687" [label = <(Self,soa.Self())<SUB>389</SUB>> ]
+"691" [label = <(FIELD_IDENTIFIER,ThrowNewExceptionF,ThrowNewExceptionF)<SUB>389</SUB>> ]
+"697" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;GetDescriptor)<SUB>391</SUB>> ]
+"700" [label = <(&lt;operator&gt;.addressOf,&amp;temp)<SUB>391</SUB>> ]
+"433" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>347</SUB>> ]
+"437" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>347</SUB>> ]
+"471" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>353</SUB>> ]
+"489" [label = <(&lt;operator&gt;.indirectIndexAccess,sig[1])<SUB>356</SUB>> ]
+"494" [label = <(&lt;operator&gt;.greaterThan,Handle&lt;mirror::ClassLoader&gt; class_loader(hs.NewHandle(c-&gt;GetClassLoader())))<SUB>357</SUB>> ]
+"509" [label = <(&lt;operator&gt;.assignment,field_type = class_linker-&gt;FindClass(soa.Self(), sig, class_loader))<SUB>358</SUB>> ]
+"539" [label = <(&lt;operator&gt;.indirectIndexAccess,sig[0])<SUB>364</SUB>> ]
+"544" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;IsExceptionPending)<SUB>364</SUB>> ]
+"556" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>365</SUB>> ]
+"564" [label = <(FIELD_IDENTIFIER,Throwable,Throwable)<SUB>366</SUB>> ]
+"567" [label = <(&lt;operator&gt;.fieldAccess,hs2.NewHandle)<SUB>366</SUB>> ]
+"570" [label = <(GetException,soa.Self()-&gt;GetException())<SUB>366</SUB>> ]
+"580" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>367</SUB>> ]
+"588" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>369</SUB>> ]
+"599" [label = <(FIELD_IDENTIFIER,GetDescriptor,GetDescriptor)<SUB>372</SUB>> ]
+"608" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;GetException()-&gt;SetCause)<SUB>374</SUB>> ]
+"617" [label = <(Get,cause.Get())<SUB>374</SUB>> ]
+"631" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>380</SUB>> ]
+"634" [label = <(FIELD_IDENTIFIER,FindStaticField,FindStaticField)<SUB>380</SUB>> ]
+"636" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>381</SUB>> ]
+"640" [label = <(&lt;operator&gt;.fieldAccess,c.Get)<SUB>381</SUB>> ]
+"645" [label = <(&lt;operator&gt;.indirectFieldAccess,field_type-&gt;GetDescriptor)<SUB>381</SUB>> ]
+"648" [label = <(&lt;operator&gt;.addressOf,&amp;temp)<SUB>381</SUB>> ]
+"655" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;FindInstanceField)<SUB>383</SUB>> ]
+"659" [label = <(GetDescriptor,field_type-&gt;GetDescriptor(&amp;temp))<SUB>383</SUB>> ]
+"675" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>385</SUB>> ]
+"688" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>389</SUB>> ]
+"699" [label = <(FIELD_IDENTIFIER,GetDescriptor,GetDescriptor)<SUB>391</SUB>> ]
+"435" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>347</SUB>> ]
+"438" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>347</SUB>> ]
+"441" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>347</SUB>> ]
+"495" [label = <(&lt;operator&gt;.lessThan,Handle&lt;mirror::ClassLoader)<SUB>357</SUB>> ]
+"500" [label = <(class_loader,class_loader(hs.NewHandle(c-&gt;GetClassLoader())))<SUB>357</SUB>> ]
+"511" [label = <(FindClass,class_linker-&gt;FindClass(soa.Self(), sig, class_loader))<SUB>358</SUB>> ]
+"523" [label = <(&lt;operator&gt;.assignment,field_type = class_linker-&gt;FindPrimitiveClass(*sig))<SUB>360</SUB>> ]
+"545" [label = <(Self,soa.Self())<SUB>364</SUB>> ]
+"549" [label = <(FIELD_IDENTIFIER,IsExceptionPending,IsExceptionPending)<SUB>364</SUB>> ]
+"558" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>365</SUB>> ]
+"569" [label = <(FIELD_IDENTIFIER,NewHandle,NewHandle)<SUB>366</SUB>> ]
+"571" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;GetException)<SUB>366</SUB>> ]
+"582" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>367</SUB>> ]
+"590" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>369</SUB>> ]
+"609" [label = <(GetException,soa.Self()-&gt;GetException())<SUB>374</SUB>> ]
+"616" [label = <(FIELD_IDENTIFIER,SetCause,SetCause)<SUB>374</SUB>> ]
+"618" [label = <(&lt;operator&gt;.fieldAccess,cause.Get)<SUB>374</SUB>> ]
+"638" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>381</SUB>> ]
+"642" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>381</SUB>> ]
+"647" [label = <(FIELD_IDENTIFIER,GetDescriptor,GetDescriptor)<SUB>381</SUB>> ]
+"657" [label = <(FIELD_IDENTIFIER,FindInstanceField,FindInstanceField)<SUB>383</SUB>> ]
+"660" [label = <(&lt;operator&gt;.indirectFieldAccess,field_type-&gt;GetDescriptor)<SUB>383</SUB>> ]
+"663" [label = <(&lt;operator&gt;.addressOf,&amp;temp)<SUB>383</SUB>> ]
+"690" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>389</SUB>> ]
+"440" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>347</SUB>> ]
+"443" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>347</SUB>> ]
+"497" [label = <(&lt;operator&gt;.fieldAccess,mirror::ClassLoader)<SUB>357</SUB>> ]
+"501" [label = <(NewHandle,hs.NewHandle(c-&gt;GetClassLoader()))<SUB>357</SUB>> ]
+"512" [label = <(&lt;operator&gt;.indirectFieldAccess,class_linker-&gt;FindClass)<SUB>358</SUB>> ]
+"515" [label = <(Self,soa.Self())<SUB>358</SUB>> ]
+"525" [label = <(FindPrimitiveClass,class_linker-&gt;FindPrimitiveClass(*sig))<SUB>360</SUB>> ]
+"546" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>364</SUB>> ]
+"572" [label = <(Self,soa.Self())<SUB>366</SUB>> ]
+"576" [label = <(FIELD_IDENTIFIER,GetException,GetException)<SUB>366</SUB>> ]
+"610" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;GetException)<SUB>374</SUB>> ]
+"620" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>374</SUB>> ]
+"662" [label = <(FIELD_IDENTIFIER,GetDescriptor,GetDescriptor)<SUB>383</SUB>> ]
+"499" [label = <(FIELD_IDENTIFIER,ClassLoader,ClassLoader)<SUB>357</SUB>> ]
+"502" [label = <(&lt;operator&gt;.fieldAccess,hs.NewHandle)<SUB>357</SUB>> ]
+"505" [label = <(GetClassLoader,c-&gt;GetClassLoader())<SUB>357</SUB>> ]
+"514" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>358</SUB>> ]
+"516" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>358</SUB>> ]
+"526" [label = <(&lt;operator&gt;.indirectFieldAccess,class_linker-&gt;FindPrimitiveClass)<SUB>360</SUB>> ]
+"529" [label = <(&lt;operator&gt;.indirection,*sig)<SUB>360</SUB>> ]
+"548" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>364</SUB>> ]
+"573" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>366</SUB>> ]
+"611" [label = <(Self,soa.Self())<SUB>374</SUB>> ]
+"615" [label = <(FIELD_IDENTIFIER,GetException,GetException)<SUB>374</SUB>> ]
+"504" [label = <(FIELD_IDENTIFIER,NewHandle,NewHandle)<SUB>357</SUB>> ]
+"506" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;GetClassLoader)<SUB>357</SUB>> ]
+"518" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>358</SUB>> ]
+"528" [label = <(FIELD_IDENTIFIER,FindPrimitiveClass,FindPrimitiveClass)<SUB>360</SUB>> ]
+"575" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>366</SUB>> ]
+"612" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>374</SUB>> ]
+"508" [label = <(FIELD_IDENTIFIER,GetClassLoader,GetClassLoader)<SUB>357</SUB>> ]
+"614" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>374</SUB>> ]
+"404" [label = <(METHOD,FindFieldJNI)<SUB>340</SUB>> ]
+"706" [label = <(METHOD_RETURN,ArtField)<SUB>340</SUB>> ]
+  "411" -> "425" 
+  "420" -> "446" 
+  "453" -> "461" 
+  "456" -> "471" 
+  "464" -> "476" 
+  "704" -> "706" 
+  "412" -> "419" 
+  "415" -> "411" 
+  "421" -> "430" 
+  "426" -> "420" 
+  "446" -> "450" 
+  "446" -> "453" 
+  "457" -> "456" 
+  "466" -> "464" 
+  "474" -> "482" 
+  "474" -> "489" 
+  "532" -> "539" 
+  "532" -> "631" 
+  "532" -> "657" 
+  "666" -> "677" 
+  "666" -> "681" 
+  "681" -> "690" 
+  "681" -> "704" 
+  "416" -> "415" 
+  "423" -> "421" 
+  "427" -> "426" 
+  "450" -> "706" 
+  "459" -> "457" 
+  "467" -> "466" 
+  "475" -> "474" 
+  "481" -> "532" 
+  "536" -> "551" 
+  "550" -> "564" 
+  "559" -> "582" 
+  "577" -> "590" 
+  "585" -> "603" 
+  "621" -> "706" 
+  "627" -> "667" 
+  "667" -> "666" 
+  "667" -> "675" 
+  "670" -> "666" 
+  "677" -> "681" 
+  "685" -> "702" 
+  "702" -> "706" 
+  "417" -> "416" 
+  "425" -> "423" 
+  "428" -> "435" 
+  "431" -> "427" 
+  "461" -> "459" 
+  "468" -> "472" 
+  "472" -> "467" 
+  "476" -> "475" 
+  "482" -> "481" 
+  "537" -> "536" 
+  "551" -> "558" 
+  "554" -> "550" 
+  "560" -> "569" 
+  "565" -> "559" 
+  "578" -> "577" 
+  "586" -> "599" 
+  "596" -> "585" 
+  "603" -> "614" 
+  "603" -> "621" 
+  "629" -> "627" 
+  "652" -> "667" 
+  "672" -> "670" 
+  "686" -> "699" 
+  "696" -> "685" 
+  "419" -> "417" 
+  "430" -> "428" 
+  "432" -> "440" 
+  "436" -> "431" 
+  "469" -> "468" 
+  "488" -> "499" 
+  "488" -> "528" 
+  "538" -> "537" 
+  "538" -> "548" 
+  "543" -> "537" 
+  "555" -> "554" 
+  "562" -> "560" 
+  "566" -> "565" 
+  "579" -> "583" 
+  "583" -> "578" 
+  "587" -> "591" 
+  "591" -> "586" 
+  "597" -> "600" 
+  "600" -> "596" 
+  "607" -> "621" 
+  "630" -> "638" 
+  "635" -> "642" 
+  "639" -> "647" 
+  "644" -> "629" 
+  "654" -> "652" 
+  "673" -> "672" 
+  "687" -> "691" 
+  "691" -> "686" 
+  "697" -> "700" 
+  "700" -> "696" 
+  "433" -> "432" 
+  "437" -> "436" 
+  "471" -> "469" 
+  "489" -> "488" 
+  "494" -> "514" 
+  "509" -> "532" 
+  "539" -> "538" 
+  "544" -> "543" 
+  "556" -> "555" 
+  "564" -> "562" 
+  "567" -> "575" 
+  "570" -> "566" 
+  "580" -> "579" 
+  "588" -> "587" 
+  "599" -> "597" 
+  "608" -> "620" 
+  "617" -> "607" 
+  "631" -> "634" 
+  "634" -> "630" 
+  "636" -> "635" 
+  "640" -> "639" 
+  "645" -> "648" 
+  "648" -> "644" 
+  "655" -> "662" 
+  "659" -> "654" 
+  "675" -> "673" 
+  "688" -> "687" 
+  "699" -> "697" 
+  "435" -> "433" 
+  "438" -> "443" 
+  "441" -> "437" 
+  "495" -> "504" 
+  "500" -> "494" 
+  "511" -> "509" 
+  "523" -> "532" 
+  "545" -> "549" 
+  "549" -> "544" 
+  "558" -> "556" 
+  "569" -> "567" 
+  "571" -> "570" 
+  "582" -> "580" 
+  "590" -> "588" 
+  "609" -> "616" 
+  "616" -> "608" 
+  "618" -> "617" 
+  "638" -> "636" 
+  "642" -> "640" 
+  "647" -> "645" 
+  "657" -> "655" 
+  "660" -> "663" 
+  "663" -> "659" 
+  "690" -> "688" 
+  "440" -> "438" 
+  "443" -> "441" 
+  "497" -> "495" 
+  "501" -> "500" 
+  "512" -> "518" 
+  "515" -> "511" 
+  "525" -> "523" 
+  "546" -> "545" 
+  "572" -> "576" 
+  "576" -> "571" 
+  "610" -> "609" 
+  "620" -> "618" 
+  "662" -> "660" 
+  "499" -> "497" 
+  "502" -> "508" 
+  "505" -> "501" 
+  "514" -> "512" 
+  "516" -> "515" 
+  "526" -> "529" 
+  "529" -> "525" 
+  "548" -> "546" 
+  "573" -> "572" 
+  "611" -> "615" 
+  "615" -> "610" 
+  "504" -> "502" 
+  "506" -> "505" 
+  "518" -> "516" 
+  "528" -> "526" 
+  "575" -> "573" 
+  "612" -> "611" 
+  "508" -> "506" 
+  "614" -> "612" 
+  "404" -> "412" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/190-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/190-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/190-cfg.dot	2023-06-07 19:35:01.517387159 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/190-cfg.dot	2023-06-07 19:35:08.057386514 +0330
@@ -1,244 +1,143 @@
-digraph "NewStringUTF" {  
-"10564" [label = <(&lt;operator&gt;.assignment,utf8_length = strlen(utf))<SUB>1898</SUB>> ]
-"10612" [label = <(&lt;operator&gt;.greaterThan,std::optional&lt;std::string&gt; replacement_utf)<SUB>1909</SUB>> ]
-"10622" [label = <(UNKNOWN,t,t)<SUB>1910</SUB>> ]
-"10623" [label = <(UNKNOWN,utf16_length = VisitModifiedUtf8Chars(\012        utf,\012        utf8_length,\012 /*good=*/ [](const char* ptr ATTRIBUTE_UNUSED, size_t length ATTRIBUTE_UNUSED) {},utf16_length = VisitModifiedUtf8Chars(\012        utf,\012        utf8_length,\012 /*good=*/ [](const char* ptr ATTRIBUTE_UNUSED, size_t length ATTRIBUTE_UNUSED) {})<SUB>1910</SUB>> ]
-"10624" [label = <(UNKNOWN,,\012 /*bad=*/ []() { return true; },,\012 /*bad=*/ []() { return true; })<SUB>1913</SUB>> ]
-"10625" [label = <(UNKNOWN,);,);)<SUB>1914</SUB>> ]
-"10712" [label = <(DCHECK_LE,DCHECK_LE(utf16_length, utf8_length))<SUB>1942</SUB>> ]
-"10715" [label = <(DCHECK_LE,DCHECK_LE(utf8_length, static_cast&lt;uint32_t&gt;(std::numeric_limits&lt;int32_t&gt;::max())))<SUB>1943</SUB>> ]
-"10730" [label = <(soa,soa(env))<SUB>1945</SUB>> ]
-"10732" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::String&gt; result =\012        mirror::String::AllocFromModifiedUtf8(soa.Self(), utf16_length, utf, utf8_length))<SUB>1946</SUB>> ]
-"10753" [label = <(RETURN,return soa.AddLocalReference&lt;jstring&gt;(result);,return soa.AddLocalReference&lt;jstring&gt;(result);)<SUB>1948</SUB>> ]
-"10557" [label = <(&lt;operator&gt;.equals,utf == nullptr)<SUB>1890</SUB>> ]
-"10566" [label = <(strlen,strlen(utf))<SUB>1898</SUB>> ]
-"10569" [label = <(UNLIKELY,UNLIKELY(utf8_length &gt; static_cast&lt;uint32_t&gt;(std::numeric_limits&lt;int32_t&gt;::max())))<SUB>1899</SUB>> ]
-"10613" [label = <(&lt;operator&gt;.lessThan,std::optional&lt;std::string)<SUB>1909</SUB>> ]
-"10627" [label = <(UNLIKELY,UNLIKELY(utf8_length != 0u &amp;&amp; utf16_length == 0u))<SUB>1915</SUB>> ]
-"10717" [label = <(&lt;operator&gt;.cast,static_cast&lt;uint32_t&gt;(std::numeric_limits&lt;int32_t&gt;::max()))<SUB>1943</SUB>> ]
-"10733" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::String&gt; result)<SUB>1946</SUB>> ]
-"10740" [label = <(mirror::String::AllocFromModifiedUtf8,mirror::String::AllocFromModifiedUtf8(soa.Self(), utf16_length, utf, utf8_length))<SUB>1947</SUB>> ]
-"10754" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jstring&gt;(result))<SUB>1948</SUB>> ]
-"10561" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>1891</SUB>> ]
-"10570" [label = <(&lt;operator&gt;.greaterThan,utf8_length &gt; static_cast&lt;uint32_t&gt;(std::numeric_limits&lt;int32_t&gt;::max()))<SUB>1899</SUB>> ]
-"10586" [label = <(&lt;operator&gt;.assignment,error =\012          android::base::StringPrintf(&quot;NewStringUTF input is 2 GiB or more: %zu&quot;, utf8_length))<SUB>1903</SUB>> ]
-"10597" [label = <(soa,soa(env))<SUB>1905</SUB>> ]
-"10599" [label = <(ThrowOutOfMemoryError,soa.Self()-&gt;ThrowOutOfMemoryError(error.c_str()))<SUB>1906</SUB>> ]
-"10610" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>1907</SUB>> ]
-"10614" [label = <(&lt;operator&gt;.fieldAccess,std::optional)<SUB>1909</SUB>> ]
-"10617" [label = <(&lt;operator&gt;.fieldAccess,std::string)<SUB>1909</SUB>> ]
-"10628" [label = <(&lt;operator&gt;.logicalAnd,utf8_length != 0u &amp;&amp; utf16_length == 0u)<SUB>1915</SUB>> ]
-"10637" [label = <(&lt;operator&gt;.assignment,kMinDelay = UINT64_C(10000000000))<SUB>1918</SUB>> ]
-"10642" [label = <(prev_bad_input_time,prev_bad_input_time(UINT64_C(0)))<SUB>1919</SUB>> ]
-"10646" [label = <(&lt;operator&gt;.assignment,prev_time = prev_bad_input_time.load(std::memory_order_relaxed))<SUB>1920</SUB>> ]
-"10656" [label = <(&lt;operator&gt;.assignment,now = NanoTime())<SUB>1921</SUB>> ]
-"10684" [label = <(emplace,replacement_utf.emplace())<SUB>1927</SUB>> ]
-"10688" [label = <(reserve,replacement_utf-&gt;reserve(utf8_length))<SUB>1928</SUB>> ]
-"10693" [label = <(&lt;operator&gt;.assignment,utf16_length = VisitModifiedUtf8Chars(\012          utf,\012          utf8_length,\012 /*good=*/ [&amp;](const char* ptr, size_t length) {\012            replacement_utf-&gt;append(ptr, length);\012 },\012 /*bad=*/ [&amp;]() {\012            replacement_utf-&gt;append(kBadUtf8ReplacementChar, sizeof(kBadUtf8ReplacementChar) - 1u);\012 return false; // Continue processing.\012 }))<SUB>1929</SUB>> ]
-"10700" [label = <(&lt;operator&gt;.assignment,utf = replacement_utf-&gt;c_str())<SUB>1939</SUB>> ]
-"10706" [label = <(&lt;operator&gt;.assignment,utf8_length = replacement_utf-&gt;length())<SUB>1940</SUB>> ]
-"10718" [label = <(UNKNOWN,uint32_t,uint32_t)<SUB>1943</SUB>> ]
-"10719" [label = <(&lt;operator&gt;.greaterThan,std::numeric_limits&lt;int32_t&gt;::max())<SUB>1943</SUB>> ]
-"10734" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::String)<SUB>1946</SUB>> ]
-"10741" [label = <(&lt;operator&gt;.fieldAccess,mirror::String::AllocFromModifiedUtf8)<SUB>1947</SUB>> ]
-"10746" [label = <(Self,soa.Self())<SUB>1947</SUB>> ]
-"10755" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jstring)<SUB>1948</SUB>> ]
-"10572" [label = <(&lt;operator&gt;.cast,static_cast&lt;uint32_t&gt;(std::numeric_limits&lt;int32_t&gt;::max()))<SUB>1899</SUB>> ]
-"10588" [label = <(android::base::StringPrintf,android::base::StringPrintf(&quot;NewStringUTF input is 2 GiB or more: %zu&quot;, utf8_length))<SUB>1904</SUB>> ]
-"10600" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;ThrowOutOfMemoryError)<SUB>1906</SUB>> ]
-"10606" [label = <(c_str,error.c_str())<SUB>1906</SUB>> ]
-"10616" [label = <(FIELD_IDENTIFIER,optional,optional)<SUB>1909</SUB>> ]
-"10619" [label = <(FIELD_IDENTIFIER,string,string)<SUB>1909</SUB>> ]
-"10629" [label = <(&lt;operator&gt;.notEquals,utf8_length != 0u)<SUB>1915</SUB>> ]
-"10632" [label = <(&lt;operator&gt;.equals,utf16_length == 0u)<SUB>1915</SUB>> ]
-"10639" [label = <(UINT64_C,UINT64_C(10000000000))<SUB>1918</SUB>> ]
-"10643" [label = <(UINT64_C,UINT64_C(0))<SUB>1919</SUB>> ]
-"10648" [label = <(load,prev_bad_input_time.load(std::memory_order_relaxed))<SUB>1920</SUB>> ]
-"10658" [label = <(NanoTime,NanoTime())<SUB>1921</SUB>> ]
-"10660" [label = <(&lt;operator&gt;.logicalAnd,(prev_time == 0u || now - prev_time &gt;= kMinDelay) &amp;&amp;\012          prev_bad_input_time.compare_exchange_strong(prev_time, now, std::memory_order_relaxed))<SUB>1922</SUB>> ]
-"10685" [label = <(&lt;operator&gt;.fieldAccess,replacement_utf.emplace)<SUB>1927</SUB>> ]
-"10689" [label = <(&lt;operator&gt;.indirectFieldAccess,replacement_utf-&gt;reserve)<SUB>1928</SUB>> ]
-"10695" [label = <(VisitModifiedUtf8Chars,VisitModifiedUtf8Chars(\012          utf,\012          utf8_length,\012 /*good=*/ [&amp;](const char* ptr, size_t length) {\012            replacement_utf-&gt;append(ptr, length);\012 },\012 /*bad=*/ [&amp;]() {\012            replacement_utf-&gt;append(kBadUtf8ReplacementChar, sizeof(kBadUtf8ReplacementChar) - 1u);\012 return false; // Continue processing.\012 }))<SUB>1929</SUB>> ]
-"10702" [label = <(c_str,replacement_utf-&gt;c_str())<SUB>1939</SUB>> ]
-"10708" [label = <(length,replacement_utf-&gt;length())<SUB>1940</SUB>> ]
-"10720" [label = <(&lt;operator&gt;.lessThan,std::numeric_limits&lt;int32_t)<SUB>1943</SUB>> ]
-"10725" [label = <(::max,::max())<SUB>1943</SUB>> ]
-"10736" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1946</SUB>> ]
-"10742" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1947</SUB>> ]
-"10745" [label = <(FIELD_IDENTIFIER,AllocFromModifiedUtf8,AllocFromModifiedUtf8)<SUB>1947</SUB>> ]
-"10747" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>1947</SUB>> ]
-"10756" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1948</SUB>> ]
-"10573" [label = <(UNKNOWN,uint32_t,uint32_t)<SUB>1899</SUB>> ]
-"10574" [label = <(&lt;operator&gt;.greaterThan,std::numeric_limits&lt;int32_t&gt;::max())<SUB>1899</SUB>> ]
-"10589" [label = <(&lt;operator&gt;.fieldAccess,android::base::StringPrintf)<SUB>1904</SUB>> ]
-"10601" [label = <(Self,soa.Self())<SUB>1906</SUB>> ]
-"10605" [label = <(FIELD_IDENTIFIER,ThrowOutOfMemoryError,ThrowOutOfMemoryError)<SUB>1906</SUB>> ]
-"10607" [label = <(&lt;operator&gt;.fieldAccess,error.c_str)<SUB>1906</SUB>> ]
-"10649" [label = <(&lt;operator&gt;.fieldAccess,prev_bad_input_time.load)<SUB>1920</SUB>> ]
-"10652" [label = <(&lt;operator&gt;.fieldAccess,std::memory_order_relaxed)<SUB>1920</SUB>> ]
-"10661" [label = <(&lt;operator&gt;.logicalOr,prev_time == 0u || now - prev_time &gt;= kMinDelay)<SUB>1922</SUB>> ]
-"10670" [label = <(compare_exchange_strong,prev_bad_input_time.compare_exchange_strong(prev_time, now, std::memory_order_relaxed))<SUB>1923</SUB>> ]
-"10680" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR) &lt;&lt; &quot;Invalid UTF-8 input to JNI::NewStringUTF()&quot;)<SUB>1924</SUB>> ]
-"10687" [label = <(FIELD_IDENTIFIER,emplace,emplace)<SUB>1927</SUB>> ]
-"10691" [label = <(FIELD_IDENTIFIER,reserve,reserve)<SUB>1928</SUB>> ]
-"10698" [label = <(METHOD_REF,ANY anonymous_lambda_9 (const char* ptr,size_t length),VisitModifiedUtf8Chars(\012          utf,\012          utf8_length,\012 /*good=*/ [&amp;](const char* ptr, size_t length) {\012            replacement_utf-&gt;append(ptr, length);\012 },\012 /*bad=*/ [&amp;]() {\012            replacement_utf-&gt;append(kBadUtf8ReplacementChar, sizeof(kBadUtf8ReplacementChar) - 1u);\012 return false; // Continue processing.\012 }))<SUB>1932</SUB>> ]
-"10699" [label = <(METHOD_REF,ANY anonymous_lambda_10 (),VisitModifiedUtf8Chars(\012          utf,\012          utf8_length,\012 /*good=*/ [&amp;](const char* ptr, size_t length) {\012            replacement_utf-&gt;append(ptr, length);\012 },\012 /*bad=*/ [&amp;]() {\012            replacement_utf-&gt;append(kBadUtf8ReplacementChar, sizeof(kBadUtf8ReplacementChar) - 1u);\012 return false; // Continue processing.\012 }))<SUB>1935</SUB>> ]
-"10703" [label = <(&lt;operator&gt;.indirectFieldAccess,replacement_utf-&gt;c_str)<SUB>1939</SUB>> ]
-"10709" [label = <(&lt;operator&gt;.indirectFieldAccess,replacement_utf-&gt;length)<SUB>1940</SUB>> ]
-"10721" [label = <(&lt;operator&gt;.fieldAccess,std::numeric_limits)<SUB>1943</SUB>> ]
-"10726" [label = <(&lt;operator&gt;.fieldAccess,::max)<SUB>1943</SUB>> ]
-"10738" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1946</SUB>> ]
-"10749" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>1947</SUB>> ]
-"10758" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1948</SUB>> ]
-"10575" [label = <(&lt;operator&gt;.lessThan,std::numeric_limits&lt;int32_t)<SUB>1899</SUB>> ]
-"10580" [label = <(::max,::max())<SUB>1899</SUB>> ]
-"10590" [label = <(&lt;operator&gt;.fieldAccess,android::base)<SUB>1904</SUB>> ]
-"10593" [label = <(FIELD_IDENTIFIER,StringPrintf,StringPrintf)<SUB>1904</SUB>> ]
-"10602" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>1906</SUB>> ]
-"10609" [label = <(FIELD_IDENTIFIER,c_str,c_str)<SUB>1906</SUB>> ]
-"10651" [label = <(FIELD_IDENTIFIER,load,load)<SUB>1920</SUB>> ]
-"10654" [label = <(FIELD_IDENTIFIER,memory_order_relaxed,memory_order_relaxed)<SUB>1920</SUB>> ]
-"10662" [label = <(&lt;operator&gt;.equals,prev_time == 0u)<SUB>1922</SUB>> ]
-"10665" [label = <(&lt;operator&gt;.greaterEqualsThan,now - prev_time &gt;= kMinDelay)<SUB>1922</SUB>> ]
-"10671" [label = <(&lt;operator&gt;.fieldAccess,prev_bad_input_time.compare_exchange_strong)<SUB>1923</SUB>> ]
-"10676" [label = <(&lt;operator&gt;.fieldAccess,std::memory_order_relaxed)<SUB>1923</SUB>> ]
-"10681" [label = <(LOG,LOG(ERROR))<SUB>1924</SUB>> ]
-"10705" [label = <(FIELD_IDENTIFIER,c_str,c_str)<SUB>1939</SUB>> ]
-"10711" [label = <(FIELD_IDENTIFIER,length,length)<SUB>1940</SUB>> ]
-"10723" [label = <(FIELD_IDENTIFIER,numeric_limits,numeric_limits)<SUB>1943</SUB>> ]
-"10728" [label = <(FIELD_IDENTIFIER,max,max)<SUB>1943</SUB>> ]
-"10576" [label = <(&lt;operator&gt;.fieldAccess,std::numeric_limits)<SUB>1899</SUB>> ]
-"10581" [label = <(&lt;operator&gt;.fieldAccess,::max)<SUB>1899</SUB>> ]
-"10604" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>1906</SUB>> ]
-"10666" [label = <(&lt;operator&gt;.subtraction,now - prev_time)<SUB>1922</SUB>> ]
-"10673" [label = <(FIELD_IDENTIFIER,compare_exchange_strong,compare_exchange_strong)<SUB>1923</SUB>> ]
-"10678" [label = <(FIELD_IDENTIFIER,memory_order_relaxed,memory_order_relaxed)<SUB>1923</SUB>> ]
-"10578" [label = <(FIELD_IDENTIFIER,numeric_limits,numeric_limits)<SUB>1899</SUB>> ]
-"10583" [label = <(FIELD_IDENTIFIER,max,max)<SUB>1899</SUB>> ]
-"10552" [label = <(METHOD,NewStringUTF)<SUB>1889</SUB>> ]
-"10761" [label = <(METHOD_RETURN,jstring)<SUB>1889</SUB>> ]
-  "10564" -> "10573" 
-  "10612" -> "10622" 
-  "10622" -> "10623" 
-  "10623" -> "10624" 
-  "10624" -> "10625" 
-  "10625" -> "10629" 
-  "10712" -> "10718" 
-  "10715" -> "10730" 
-  "10730" -> "10738" 
-  "10732" -> "10758" 
-  "10753" -> "10761" 
-  "10557" -> "10561" 
-  "10557" -> "10566" 
-  "10566" -> "10564" 
-  "10569" -> "10590" 
-  "10569" -> "10616" 
-  "10613" -> "10612" 
-  "10627" -> "10639" 
-  "10627" -> "10712" 
-  "10717" -> "10715" 
-  "10733" -> "10742" 
-  "10740" -> "10732" 
-  "10754" -> "10753" 
-  "10561" -> "10761" 
-  "10570" -> "10569" 
-  "10586" -> "10597" 
-  "10597" -> "10604" 
-  "10599" -> "10610" 
-  "10610" -> "10761" 
-  "10614" -> "10619" 
-  "10617" -> "10613" 
-  "10628" -> "10627" 
-  "10637" -> "10643" 
-  "10642" -> "10651" 
-  "10646" -> "10658" 
-  "10656" -> "10662" 
-  "10684" -> "10691" 
-  "10688" -> "10698" 
-  "10693" -> "10705" 
-  "10700" -> "10711" 
-  "10706" -> "10712" 
-  "10718" -> "10723" 
-  "10719" -> "10717" 
-  "10734" -> "10733" 
-  "10741" -> "10749" 
-  "10746" -> "10740" 
-  "10755" -> "10754" 
-  "10572" -> "10570" 
-  "10588" -> "10586" 
-  "10600" -> "10609" 
-  "10606" -> "10599" 
-  "10616" -> "10614" 
-  "10619" -> "10617" 
-  "10629" -> "10628" 
-  "10629" -> "10632" 
-  "10632" -> "10628" 
-  "10639" -> "10637" 
-  "10643" -> "10642" 
-  "10648" -> "10646" 
-  "10658" -> "10656" 
-  "10660" -> "10681" 
-  "10660" -> "10687" 
+digraph "GetStringUTFRegion" {  
+"10636" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string))<SUB>1854</SUB>> ]
+"10654" [label = <(soa,soa(env))<SUB>1855</SUB>> ]
+"10656" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::String&gt; s = soa.Decode&lt;mirror::String&gt;(java_string))<SUB>1856</SUB>> ]
+"10657" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::String&gt; s)<SUB>1856</SUB>> ]
+"10664" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::String&gt;(java_string))<SUB>1856</SUB>> ]
+"10674" [label = <(&lt;operator&gt;.logicalOr,start &lt; 0 || length &lt; 0 || length &gt; s-&gt;GetLength() - start)<SUB>1857</SUB>> ]
+"10658" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::String)<SUB>1856</SUB>> ]
+"10665" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::String)<SUB>1856</SUB>> ]
+"10675" [label = <(&lt;operator&gt;.logicalOr,start &lt; 0 || length &lt; 0)<SUB>1857</SUB>> ]
+"10682" [label = <(&lt;operator&gt;.greaterThan,length &gt; s-&gt;GetLength() - start)<SUB>1857</SUB>> ]
+"10691" [label = <(ThrowSIOOBE,ThrowSIOOBE(soa, start, length, s-&gt;GetLength()))<SUB>1858</SUB>> ]
+"10640" [label = <(UNLIKELY,UNLIKELY((java_string) == nullptr))<SUB>1854</SUB>> ]
+"10660" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1856</SUB>> ]
+"10666" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1856</SUB>> ]
+"10669" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1856</SUB>> ]
+"10676" [label = <(&lt;operator&gt;.lessThan,start &lt; 0)<SUB>1857</SUB>> ]
+"10679" [label = <(&lt;operator&gt;.lessThan,length &lt; 0)<SUB>1857</SUB>> ]
+"10684" [label = <(&lt;operator&gt;.subtraction,s-&gt;GetLength() - start)<SUB>1857</SUB>> ]
+"10695" [label = <(GetLength,s-&gt;GetLength())<SUB>1858</SUB>> ]
+"10701" [label = <(CHECK_NON_NULL_MEMCPY_ARGUMENT,CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf))<SUB>1860</SUB>> ]
+"10641" [label = <(&lt;operator&gt;.equals,(java_string) == nullptr)<SUB>1854</SUB>> ]
+"10645" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_string == null&quot;))<SUB>1854</SUB>> ]
+"10652" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string))<SUB>1854</SUB>> ]
+"10662" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1856</SUB>> ]
+"10668" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1856</SUB>> ]
+"10671" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1856</SUB>> ]
+"10685" [label = <(GetLength,s-&gt;GetLength())<SUB>1857</SUB>> ]
+"10696" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetLength)<SUB>1858</SUB>> ]
+"10724" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>1861</SUB>> ]
+"10646" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1854</SUB>> ]
+"10686" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetLength)<SUB>1857</SUB>> ]
+"10698" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>1858</SUB>> ]
+"10725" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>1861</SUB>> ]
+"10647" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1854</SUB>> ]
+"10649" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1854</SUB>> ]
+"10688" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>1857</SUB>> ]
+"10706" [label = <(UNLIKELY,UNLIKELY((length) != 0 &amp;&amp; (buf) == nullptr))<SUB>1860</SUB>> ]
+"10727" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>1861</SUB>> ]
+"10735" [label = <(&lt;operator&gt;.lessThan,i &lt; length)<SUB>1862</SUB>> ]
+"10738" [label = <(&lt;operator&gt;.preIncrement,++i)<SUB>1862</SUB>> ]
+"10755" [label = <(&lt;operator&gt;.assignment,* chars = s-&gt;GetValue())<SUB>1866</SUB>> ]
+"10762" [label = <(&lt;operator&gt;.assignment,bytes = CountUtf8Bytes(chars + start, length))<SUB>1867</SUB>> ]
+"10769" [label = <(ConvertUtf16ToModifiedUtf8,ConvertUtf16ToModifiedUtf8(buf, bytes, chars + start, length))<SUB>1868</SUB>> ]
+"10707" [label = <(&lt;operator&gt;.logicalAnd,(length) != 0 &amp;&amp; (buf) == nullptr)<SUB>1860</SUB>> ]
+"10715" [label = <(CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;buf == null&quot;))<SUB>1860</SUB>> ]
+"10722" [label = <(RETURN,CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf),CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf))<SUB>1860</SUB>> ]
+"10732" [label = <(&lt;operator&gt;.assignment,i = 0)<SUB>1862</SUB>> ]
+"10741" [label = <(&lt;operator&gt;.assignment,buf[i] = s-&gt;CharAt(start+i))<SUB>1863</SUB>> ]
+"10757" [label = <(GetValue,s-&gt;GetValue())<SUB>1866</SUB>> ]
+"10764" [label = <(CountUtf8Bytes,CountUtf8Bytes(chars + start, length))<SUB>1867</SUB>> ]
+"10772" [label = <(&lt;operator&gt;.addition,chars + start)<SUB>1868</SUB>> ]
+"10708" [label = <(&lt;operator&gt;.notEquals,(length) != 0)<SUB>1860</SUB>> ]
+"10711" [label = <(&lt;operator&gt;.equals,(buf) == nullptr)<SUB>1860</SUB>> ]
+"10716" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1860</SUB>> ]
+"10742" [label = <(&lt;operator&gt;.indirectIndexAccess,buf[i])<SUB>1863</SUB>> ]
+"10745" [label = <(CharAt,s-&gt;CharAt(start+i))<SUB>1863</SUB>> ]
+"10758" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetValue)<SUB>1866</SUB>> ]
+"10765" [label = <(&lt;operator&gt;.addition,chars + start)<SUB>1867</SUB>> ]
+"10717" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1860</SUB>> ]
+"10719" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1860</SUB>> ]
+"10746" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;CharAt)<SUB>1863</SUB>> ]
+"10749" [label = <(&lt;operator&gt;.addition,start+i)<SUB>1863</SUB>> ]
+"10760" [label = <(FIELD_IDENTIFIER,GetValue,GetValue)<SUB>1866</SUB>> ]
+"10748" [label = <(FIELD_IDENTIFIER,CharAt,CharAt)<SUB>1863</SUB>> ]
+"10629" [label = <(METHOD,GetStringUTFRegion)<SUB>1852</SUB>> ]
+"10776" [label = <(METHOD_RETURN,void)<SUB>1852</SUB>> ]
+  "10636" -> "10641" 
+  "10636" -> "10654" 
+  "10654" -> "10662" 
+  "10656" -> "10676" 
+  "10657" -> "10668" 
+  "10664" -> "10656" 
+  "10674" -> "10698" 
+  "10674" -> "10701" 
+  "10658" -> "10657" 
+  "10665" -> "10664" 
+  "10675" -> "10674" 
+  "10675" -> "10688" 
+  "10682" -> "10674" 
+  "10691" -> "10776" 
+  "10640" -> "10647" 
+  "10640" -> "10654" 
+  "10660" -> "10658" 
+  "10666" -> "10671" 
+  "10669" -> "10665" 
+  "10676" -> "10675" 
+  "10676" -> "10679" 
+  "10679" -> "10675" 
+  "10684" -> "10682" 
+  "10695" -> "10691" 
+  "10701" -> "10708" 
+  "10701" -> "10727" 
+  "10641" -> "10640" 
+  "10645" -> "10652" 
+  "10652" -> "10776" 
+  "10662" -> "10660" 
+  "10668" -> "10666" 
+  "10671" -> "10669" 
   "10685" -> "10684" 
-  "10689" -> "10688" 
-  "10695" -> "10693" 
-  "10702" -> "10700" 
-  "10708" -> "10706" 
-  "10720" -> "10728" 
-  "10725" -> "10719" 
-  "10736" -> "10734" 
-  "10742" -> "10745" 
+  "10696" -> "10695" 
+  "10724" -> "10732" 
+  "10724" -> "10760" 
+  "10646" -> "10645" 
+  "10686" -> "10685" 
+  "10698" -> "10696" 
+  "10725" -> "10724" 
+  "10647" -> "10649" 
+  "10649" -> "10646" 
+  "10688" -> "10686" 
+  "10706" -> "10717" 
+  "10706" -> "10727" 
+  "10727" -> "10725" 
+  "10735" -> "10776" 
+  "10735" -> "10742" 
+  "10738" -> "10735" 
+  "10755" -> "10765" 
+  "10762" -> "10772" 
+  "10769" -> "10776" 
+  "10707" -> "10706" 
+  "10715" -> "10722" 
+  "10722" -> "10776" 
+  "10732" -> "10735" 
+  "10741" -> "10738" 
+  "10757" -> "10755" 
+  "10764" -> "10762" 
+  "10772" -> "10769" 
+  "10708" -> "10707" 
+  "10708" -> "10711" 
+  "10711" -> "10707" 
+  "10716" -> "10715" 
+  "10742" -> "10748" 
   "10745" -> "10741" 
-  "10747" -> "10746" 
-  "10756" -> "10755" 
-  "10573" -> "10578" 
-  "10574" -> "10572" 
-  "10589" -> "10588" 
-  "10601" -> "10605" 
-  "10605" -> "10600" 
-  "10607" -> "10606" 
-  "10649" -> "10654" 
-  "10652" -> "10648" 
-  "10661" -> "10660" 
-  "10661" -> "10673" 
-  "10670" -> "10660" 
-  "10680" -> "10687" 
-  "10687" -> "10685" 
-  "10691" -> "10689" 
-  "10698" -> "10699" 
-  "10699" -> "10695" 
-  "10703" -> "10702" 
-  "10709" -> "10708" 
-  "10721" -> "10720" 
-  "10726" -> "10725" 
-  "10738" -> "10736" 
-  "10749" -> "10747" 
-  "10758" -> "10756" 
-  "10575" -> "10583" 
-  "10580" -> "10574" 
-  "10590" -> "10593" 
-  "10593" -> "10589" 
-  "10602" -> "10601" 
-  "10609" -> "10607" 
-  "10651" -> "10649" 
-  "10654" -> "10652" 
-  "10662" -> "10661" 
-  "10662" -> "10666" 
-  "10665" -> "10661" 
-  "10671" -> "10678" 
-  "10676" -> "10670" 
-  "10681" -> "10680" 
-  "10705" -> "10703" 
-  "10711" -> "10709" 
-  "10723" -> "10721" 
-  "10728" -> "10726" 
-  "10576" -> "10575" 
-  "10581" -> "10580" 
-  "10604" -> "10602" 
-  "10666" -> "10665" 
-  "10673" -> "10671" 
-  "10678" -> "10676" 
-  "10578" -> "10576" 
-  "10583" -> "10581" 
-  "10552" -> "10557" 
+  "10758" -> "10757" 
+  "10765" -> "10764" 
+  "10717" -> "10719" 
+  "10719" -> "10716" 
+  "10746" -> "10749" 
+  "10749" -> "10745" 
+  "10760" -> "10758" 
+  "10748" -> "10746" 
+  "10629" -> "10636" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/191-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/191-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/191-cfg.dot	2023-06-07 19:35:01.517387159 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/191-cfg.dot	2023-06-07 19:35:08.057386514 +0330
@@ -1,45 +1,159 @@
-digraph "GetStringLength" {  
-"10767" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string))<SUB>1952</SUB>> ]
-"10786" [label = <(soa,soa(env))<SUB>1953</SUB>> ]
-"10788" [label = <(RETURN,return soa.Decode&lt;mirror::String&gt;(java_string)-&gt;GetLength();,return soa.Decode&lt;mirror::String&gt;(java_string)-&gt;GetLength();)<SUB>1954</SUB>> ]
-"10789" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::String&gt;(java_string)-&gt;GetLength())<SUB>1954</SUB>> ]
-"10790" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::String)<SUB>1954</SUB>> ]
-"10797" [label = <(GetLength,(java_string)-&gt;GetLength())<SUB>1954</SUB>> ]
-"10771" [label = <(UNLIKELY,UNLIKELY((java_string) == nullptr))<SUB>1952</SUB>> ]
-"10791" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1954</SUB>> ]
-"10794" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1954</SUB>> ]
-"10798" [label = <(&lt;operator&gt;.indirectFieldAccess,(java_string)-&gt;GetLength)<SUB>1954</SUB>> ]
-"10772" [label = <(&lt;operator&gt;.equals,(java_string) == nullptr)<SUB>1952</SUB>> ]
-"10776" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_string == null&quot;))<SUB>1952</SUB>> ]
-"10783" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string))<SUB>1952</SUB>> ]
-"10793" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1954</SUB>> ]
-"10796" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1954</SUB>> ]
-"10800" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>1954</SUB>> ]
-"10777" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1952</SUB>> ]
-"10778" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1952</SUB>> ]
-"10780" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1952</SUB>> ]
-"10763" [label = <(METHOD,GetStringLength)<SUB>1951</SUB>> ]
-"10801" [label = <(METHOD_RETURN,jsize)<SUB>1951</SUB>> ]
-  "10767" -> "10772" 
-  "10767" -> "10786" 
-  "10786" -> "10793" 
-  "10788" -> "10801" 
-  "10789" -> "10788" 
-  "10790" -> "10800" 
-  "10797" -> "10789" 
-  "10771" -> "10778" 
-  "10771" -> "10786" 
-  "10791" -> "10796" 
-  "10794" -> "10790" 
-  "10798" -> "10797" 
-  "10772" -> "10771" 
-  "10776" -> "10783" 
-  "10783" -> "10801" 
-  "10793" -> "10791" 
-  "10796" -> "10794" 
-  "10800" -> "10798" 
-  "10777" -> "10776" 
-  "10778" -> "10780" 
-  "10780" -> "10777" 
-  "10763" -> "10767" 
+digraph "GetStringChars" {  
+"10783" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_string))<SUB>1874</SUB>> ]
+"10802" [label = <(soa,soa(env))<SUB>1875</SUB>> ]
+"10804" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::String&gt; s = soa.Decode&lt;mirror::String&gt;(java_string))<SUB>1876</SUB>> ]
+"10822" [label = <(&lt;operator&gt;.assignment,* heap = Runtime::Current()-&gt;GetHeap())<SUB>1877</SUB>> ]
+"10917" [label = <(RETURN,return static_cast&lt;jchar*&gt;(s-&gt;GetValue());,return static_cast&lt;jchar*&gt;(s-&gt;GetValue());)<SUB>1896</SUB>> ]
+"10805" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::String&gt; s)<SUB>1876</SUB>> ]
+"10812" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::String&gt;(java_string))<SUB>1876</SUB>> ]
+"10824" [label = <(GetHeap,Runtime::Current()-&gt;GetHeap())<SUB>1877</SUB>> ]
+"10832" [label = <(&lt;operator&gt;.logicalOr,heap-&gt;IsMovableObject(s) || s-&gt;IsCompressed())<SUB>1878</SUB>> ]
+"10909" [label = <(&lt;operator&gt;.notEquals,is_copy != nullptr)<SUB>1893</SUB>> ]
+"10918" [label = <(&lt;operator&gt;.cast,static_cast&lt;jchar*&gt;(s-&gt;GetValue()))<SUB>1896</SUB>> ]
+"10806" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::String)<SUB>1876</SUB>> ]
+"10813" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::String)<SUB>1876</SUB>> ]
+"10825" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetHeap)<SUB>1877</SUB>> ]
+"10833" [label = <(IsMovableObject,heap-&gt;IsMovableObject(s))<SUB>1878</SUB>> ]
+"10838" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>1878</SUB>> ]
+"10844" [label = <(&lt;operator&gt;.assignment,* chars = new jchar[s-&gt;GetLength()])<SUB>1879</SUB>> ]
+"10906" [label = <(RETURN,return chars;,return chars;)<SUB>1891</SUB>> ]
+"10913" [label = <(&lt;operator&gt;.assignment,*is_copy = JNI_FALSE)<SUB>1894</SUB>> ]
+"10919" [label = <(UNKNOWN,jchar*,jchar*)<SUB>1896</SUB>> ]
+"10920" [label = <(GetValue,s-&gt;GetValue())<SUB>1896</SUB>> ]
+"10787" [label = <(UNLIKELY,UNLIKELY((java_string) == nullptr))<SUB>1874</SUB>> ]
+"10808" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1876</SUB>> ]
+"10814" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1876</SUB>> ]
+"10817" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1876</SUB>> ]
+"10826" [label = <(Runtime::Current,Runtime::Current())<SUB>1877</SUB>> ]
+"10830" [label = <(FIELD_IDENTIFIER,GetHeap,GetHeap)<SUB>1877</SUB>> ]
+"10834" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;IsMovableObject)<SUB>1878</SUB>> ]
+"10839" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>1878</SUB>> ]
+"10846" [label = <(&lt;operator&gt;.new,new jchar[s-&gt;GetLength()])<SUB>1879</SUB>> ]
+"10849" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>1880</SUB>> ]
+"10898" [label = <(&lt;operator&gt;.notEquals,is_copy != nullptr)<SUB>1888</SUB>> ]
+"10914" [label = <(&lt;operator&gt;.indirection,*is_copy)<SUB>1894</SUB>> ]
+"10921" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetValue)<SUB>1896</SUB>> ]
+"10788" [label = <(&lt;operator&gt;.equals,(java_string) == nullptr)<SUB>1874</SUB>> ]
+"10792" [label = <(CHECK_NON_NULL_ARGUMENT(java_string),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_string == null&quot;))<SUB>1874</SUB>> ]
+"10799" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_string),CHECK_NON_NULL_ARGUMENT(java_string))<SUB>1874</SUB>> ]
+"10810" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1876</SUB>> ]
+"10816" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1876</SUB>> ]
+"10819" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1876</SUB>> ]
+"10827" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>1877</SUB>> ]
+"10836" [label = <(FIELD_IDENTIFIER,IsMovableObject,IsMovableObject)<SUB>1878</SUB>> ]
+"10841" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>1878</SUB>> ]
+"10850" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>1880</SUB>> ]
+"10855" [label = <(&lt;operator&gt;.assignment,length = s-&gt;GetLength())<SUB>1881</SUB>> ]
+"10902" [label = <(&lt;operator&gt;.assignment,*is_copy = JNI_TRUE)<SUB>1889</SUB>> ]
+"10923" [label = <(FIELD_IDENTIFIER,GetValue,GetValue)<SUB>1896</SUB>> ]
+"10793" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1874</SUB>> ]
+"10829" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>1877</SUB>> ]
+"10852" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>1880</SUB>> ]
+"10857" [label = <(GetLength,s-&gt;GetLength())<SUB>1881</SUB>> ]
+"10867" [label = <(&lt;operator&gt;.lessThan,i &lt; length)<SUB>1882</SUB>> ]
+"10870" [label = <(&lt;operator&gt;.preIncrement,++i)<SUB>1882</SUB>> ]
+"10884" [label = <(memcpy,memcpy(chars, s-&gt;GetValue(), sizeof(jchar) * s-&gt;GetLength()))<SUB>1886</SUB>> ]
+"10903" [label = <(&lt;operator&gt;.indirection,*is_copy)<SUB>1889</SUB>> ]
+"10794" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1874</SUB>> ]
+"10796" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1874</SUB>> ]
+"10858" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetLength)<SUB>1881</SUB>> ]
+"10864" [label = <(&lt;operator&gt;.assignment,i = 0)<SUB>1882</SUB>> ]
+"10873" [label = <(&lt;operator&gt;.assignment,chars[i] = s-&gt;CharAt(i))<SUB>1883</SUB>> ]
+"10886" [label = <(GetValue,s-&gt;GetValue())<SUB>1886</SUB>> ]
+"10890" [label = <(&lt;operator&gt;.multiplication,sizeof(jchar) * s-&gt;GetLength())<SUB>1886</SUB>> ]
+"10860" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>1881</SUB>> ]
+"10874" [label = <(&lt;operator&gt;.indirectIndexAccess,chars[i])<SUB>1883</SUB>> ]
+"10877" [label = <(CharAt,s-&gt;CharAt(i))<SUB>1883</SUB>> ]
+"10887" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetValue)<SUB>1886</SUB>> ]
+"10891" [label = <(&lt;operator&gt;.sizeOf,sizeof(jchar))<SUB>1886</SUB>> ]
+"10893" [label = <(GetLength,s-&gt;GetLength())<SUB>1886</SUB>> ]
+"10878" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;CharAt)<SUB>1883</SUB>> ]
+"10889" [label = <(FIELD_IDENTIFIER,GetValue,GetValue)<SUB>1886</SUB>> ]
+"10894" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetLength)<SUB>1886</SUB>> ]
+"10880" [label = <(FIELD_IDENTIFIER,CharAt,CharAt)<SUB>1883</SUB>> ]
+"10896" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>1886</SUB>> ]
+"10778" [label = <(METHOD,GetStringChars)<SUB>1873</SUB>> ]
+"10924" [label = <(METHOD_RETURN,jchar)<SUB>1873</SUB>> ]
+  "10783" -> "10788" 
+  "10783" -> "10802" 
+  "10802" -> "10810" 
+  "10804" -> "10829" 
+  "10822" -> "10836" 
+  "10917" -> "10924" 
+  "10805" -> "10816" 
+  "10812" -> "10804" 
+  "10824" -> "10822" 
+  "10832" -> "10846" 
+  "10832" -> "10909" 
+  "10909" -> "10919" 
+  "10909" -> "10914" 
+  "10918" -> "10917" 
+  "10806" -> "10805" 
+  "10813" -> "10812" 
+  "10825" -> "10824" 
+  "10833" -> "10832" 
+  "10833" -> "10841" 
+  "10838" -> "10832" 
+  "10844" -> "10852" 
+  "10906" -> "10924" 
+  "10913" -> "10919" 
+  "10919" -> "10923" 
+  "10920" -> "10918" 
+  "10787" -> "10794" 
+  "10787" -> "10802" 
+  "10808" -> "10806" 
+  "10814" -> "10819" 
+  "10817" -> "10813" 
+  "10826" -> "10830" 
+  "10830" -> "10825" 
+  "10834" -> "10833" 
+  "10839" -> "10838" 
+  "10846" -> "10844" 
+  "10849" -> "10860" 
+  "10849" -> "10889" 
+  "10898" -> "10903" 
+  "10898" -> "10906" 
+  "10914" -> "10913" 
+  "10921" -> "10920" 
+  "10788" -> "10787" 
+  "10792" -> "10799" 
+  "10799" -> "10924" 
+  "10810" -> "10808" 
+  "10816" -> "10814" 
+  "10819" -> "10817" 
+  "10827" -> "10826" 
+  "10836" -> "10834" 
+  "10841" -> "10839" 
+  "10850" -> "10849" 
+  "10855" -> "10864" 
+  "10902" -> "10906" 
+  "10923" -> "10921" 
+  "10793" -> "10792" 
+  "10829" -> "10827" 
+  "10852" -> "10850" 
+  "10857" -> "10855" 
+  "10867" -> "10874" 
+  "10867" -> "10898" 
+  "10870" -> "10867" 
+  "10884" -> "10898" 
+  "10903" -> "10902" 
+  "10794" -> "10796" 
+  "10796" -> "10793" 
+  "10858" -> "10857" 
+  "10864" -> "10867" 
+  "10873" -> "10870" 
+  "10886" -> "10891" 
+  "10890" -> "10884" 
+  "10860" -> "10858" 
+  "10874" -> "10880" 
+  "10877" -> "10873" 
+  "10887" -> "10886" 
+  "10891" -> "10896" 
+  "10893" -> "10890" 
+  "10878" -> "10877" 
+  "10889" -> "10887" 
+  "10894" -> "10893" 
+  "10880" -> "10878" 
+  "10896" -> "10894" 
+  "10778" -> "10783" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/192-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/192-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/192-cfg.dot	2023-06-07 19:35:01.517387159 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/192-cfg.dot	2023-06-07 19:35:08.057386514 +0330
@@ -1,45 +1,78 @@
-digraph "GetStringUTFLength" {  
-"10807" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string))<SUB>1958</SUB>> ]
-"10826" [label = <(soa,soa(env))<SUB>1959</SUB>> ]
-"10828" [label = <(RETURN,return soa.Decode&lt;mirror::String&gt;(java_string)-&gt;GetUtfLength();,return soa.Decode&lt;mirror::String&gt;(java_string)-&gt;GetUtfLength();)<SUB>1960</SUB>> ]
-"10829" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::String&gt;(java_string)-&gt;GetUtfLength())<SUB>1960</SUB>> ]
-"10830" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::String)<SUB>1960</SUB>> ]
-"10837" [label = <(GetUtfLength,(java_string)-&gt;GetUtfLength())<SUB>1960</SUB>> ]
-"10811" [label = <(UNLIKELY,UNLIKELY((java_string) == nullptr))<SUB>1958</SUB>> ]
-"10831" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1960</SUB>> ]
-"10834" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1960</SUB>> ]
-"10838" [label = <(&lt;operator&gt;.indirectFieldAccess,(java_string)-&gt;GetUtfLength)<SUB>1960</SUB>> ]
-"10812" [label = <(&lt;operator&gt;.equals,(java_string) == nullptr)<SUB>1958</SUB>> ]
-"10816" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_string == null&quot;))<SUB>1958</SUB>> ]
-"10823" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string))<SUB>1958</SUB>> ]
-"10833" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1960</SUB>> ]
-"10836" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1960</SUB>> ]
-"10840" [label = <(FIELD_IDENTIFIER,GetUtfLength,GetUtfLength)<SUB>1960</SUB>> ]
-"10817" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1958</SUB>> ]
-"10818" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1958</SUB>> ]
-"10820" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1958</SUB>> ]
-"10803" [label = <(METHOD,GetStringUTFLength)<SUB>1957</SUB>> ]
-"10841" [label = <(METHOD_RETURN,jsize)<SUB>1957</SUB>> ]
-  "10807" -> "10812" 
-  "10807" -> "10826" 
-  "10826" -> "10833" 
-  "10828" -> "10841" 
-  "10829" -> "10828" 
-  "10830" -> "10840" 
-  "10837" -> "10829" 
-  "10811" -> "10818" 
-  "10811" -> "10826" 
-  "10831" -> "10836" 
-  "10834" -> "10830" 
-  "10838" -> "10837" 
-  "10812" -> "10811" 
-  "10816" -> "10823" 
-  "10823" -> "10841" 
-  "10833" -> "10831" 
-  "10836" -> "10834" 
-  "10840" -> "10838" 
-  "10817" -> "10816" 
-  "10818" -> "10820" 
-  "10820" -> "10817" 
-  "10803" -> "10807" 
+digraph "ReleaseStringChars" {  
+"10931" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string))<SUB>1900</SUB>> ]
+"10949" [label = <(soa,soa(env))<SUB>1901</SUB>> ]
+"10951" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::String&gt; s = soa.Decode&lt;mirror::String&gt;(java_string))<SUB>1902</SUB>> ]
+"10952" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::String&gt; s)<SUB>1902</SUB>> ]
+"10959" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::String&gt;(java_string))<SUB>1902</SUB>> ]
+"10969" [label = <(&lt;operator&gt;.logicalOr,s-&gt;IsCompressed() || (s-&gt;IsCompressed() == false &amp;&amp; chars != s-&gt;GetValue()))<SUB>1903</SUB>> ]
+"10953" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::String)<SUB>1902</SUB>> ]
+"10960" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::String)<SUB>1902</SUB>> ]
+"10970" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>1903</SUB>> ]
+"10974" [label = <(&lt;operator&gt;.logicalAnd,s-&gt;IsCompressed() == false &amp;&amp; chars != s-&gt;GetValue())<SUB>1903</SUB>> ]
+"10988" [label = <(&lt;operator&gt;.delete,delete[] chars)<SUB>1904</SUB>> ]
+"10935" [label = <(UNLIKELY,UNLIKELY((java_string) == nullptr))<SUB>1900</SUB>> ]
+"10955" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1902</SUB>> ]
+"10961" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1902</SUB>> ]
+"10964" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1902</SUB>> ]
+"10971" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>1903</SUB>> ]
+"10975" [label = <(&lt;operator&gt;.equals,s-&gt;IsCompressed() == false)<SUB>1903</SUB>> ]
+"10981" [label = <(&lt;operator&gt;.notEquals,chars != s-&gt;GetValue())<SUB>1903</SUB>> ]
+"10936" [label = <(&lt;operator&gt;.equals,(java_string) == nullptr)<SUB>1900</SUB>> ]
+"10940" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_string == null&quot;))<SUB>1900</SUB>> ]
+"10947" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string))<SUB>1900</SUB>> ]
+"10957" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1902</SUB>> ]
+"10963" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1902</SUB>> ]
+"10966" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1902</SUB>> ]
+"10973" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>1903</SUB>> ]
+"10976" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>1903</SUB>> ]
+"10983" [label = <(GetValue,s-&gt;GetValue())<SUB>1903</SUB>> ]
+"10941" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1900</SUB>> ]
+"10977" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>1903</SUB>> ]
+"10984" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetValue)<SUB>1903</SUB>> ]
+"10942" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1900</SUB>> ]
+"10944" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1900</SUB>> ]
+"10979" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>1903</SUB>> ]
+"10986" [label = <(FIELD_IDENTIFIER,GetValue,GetValue)<SUB>1903</SUB>> ]
+"10926" [label = <(METHOD,ReleaseStringChars)<SUB>1899</SUB>> ]
+"10990" [label = <(METHOD_RETURN,void)<SUB>1899</SUB>> ]
+  "10931" -> "10936" 
+  "10931" -> "10949" 
+  "10949" -> "10957" 
+  "10951" -> "10973" 
+  "10952" -> "10963" 
+  "10959" -> "10951" 
+  "10969" -> "10990" 
+  "10969" -> "10988" 
+  "10953" -> "10952" 
+  "10960" -> "10959" 
+  "10970" -> "10969" 
+  "10970" -> "10979" 
+  "10974" -> "10969" 
+  "10988" -> "10990" 
+  "10935" -> "10942" 
+  "10935" -> "10949" 
+  "10955" -> "10953" 
+  "10961" -> "10966" 
+  "10964" -> "10960" 
+  "10971" -> "10970" 
+  "10975" -> "10974" 
+  "10975" -> "10986" 
+  "10981" -> "10974" 
+  "10936" -> "10935" 
+  "10940" -> "10947" 
+  "10947" -> "10990" 
+  "10957" -> "10955" 
+  "10963" -> "10961" 
+  "10966" -> "10964" 
+  "10973" -> "10971" 
+  "10976" -> "10975" 
+  "10983" -> "10981" 
+  "10941" -> "10940" 
+  "10977" -> "10976" 
+  "10984" -> "10983" 
+  "10942" -> "10944" 
+  "10944" -> "10941" 
+  "10979" -> "10977" 
+  "10986" -> "10984" 
+  "10926" -> "10931" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/193-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/193-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/193-cfg.dot	2023-06-07 19:35:01.517387159 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/193-cfg.dot	2023-06-07 19:35:08.057386514 +0330
@@ -1,149 +1,189 @@
-digraph "GetStringRegion" {  
-"10850" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string))<SUB>1965</SUB>> ]
-"10868" [label = <(soa,soa(env))<SUB>1966</SUB>> ]
-"10870" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::String&gt; s = soa.Decode&lt;mirror::String&gt;(java_string))<SUB>1967</SUB>> ]
-"10871" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::String&gt; s)<SUB>1967</SUB>> ]
-"10878" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::String&gt;(java_string))<SUB>1967</SUB>> ]
-"10888" [label = <(&lt;operator&gt;.logicalOr,start &lt; 0 || length &lt; 0 || length &gt; s-&gt;GetLength() - start)<SUB>1968</SUB>> ]
-"10872" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::String)<SUB>1967</SUB>> ]
-"10879" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::String)<SUB>1967</SUB>> ]
-"10889" [label = <(&lt;operator&gt;.logicalOr,start &lt; 0 || length &lt; 0)<SUB>1968</SUB>> ]
-"10896" [label = <(&lt;operator&gt;.greaterThan,length &gt; s-&gt;GetLength() - start)<SUB>1968</SUB>> ]
-"10905" [label = <(ThrowSIOOBE,ThrowSIOOBE(soa, start, length, s-&gt;GetLength()))<SUB>1969</SUB>> ]
-"10854" [label = <(UNLIKELY,UNLIKELY((java_string) == nullptr))<SUB>1965</SUB>> ]
-"10874" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1967</SUB>> ]
-"10880" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1967</SUB>> ]
-"10883" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1967</SUB>> ]
-"10890" [label = <(&lt;operator&gt;.lessThan,start &lt; 0)<SUB>1968</SUB>> ]
-"10893" [label = <(&lt;operator&gt;.lessThan,length &lt; 0)<SUB>1968</SUB>> ]
-"10898" [label = <(&lt;operator&gt;.subtraction,s-&gt;GetLength() - start)<SUB>1968</SUB>> ]
-"10909" [label = <(GetLength,s-&gt;GetLength())<SUB>1969</SUB>> ]
-"10915" [label = <(CHECK_NON_NULL_MEMCPY_ARGUMENT,CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf))<SUB>1971</SUB>> ]
-"10855" [label = <(&lt;operator&gt;.equals,(java_string) == nullptr)<SUB>1965</SUB>> ]
-"10859" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_string == null&quot;))<SUB>1965</SUB>> ]
-"10866" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string))<SUB>1965</SUB>> ]
-"10876" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1967</SUB>> ]
-"10882" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1967</SUB>> ]
-"10885" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1967</SUB>> ]
-"10899" [label = <(GetLength,s-&gt;GetLength())<SUB>1968</SUB>> ]
-"10910" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetLength)<SUB>1969</SUB>> ]
-"10938" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>1972</SUB>> ]
-"10860" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1965</SUB>> ]
-"10900" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetLength)<SUB>1968</SUB>> ]
-"10912" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>1969</SUB>> ]
-"10939" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>1972</SUB>> ]
-"10861" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1965</SUB>> ]
-"10863" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1965</SUB>> ]
-"10902" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>1968</SUB>> ]
-"10920" [label = <(UNLIKELY,UNLIKELY((length) != 0 &amp;&amp; (buf) == nullptr))<SUB>1971</SUB>> ]
-"10941" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>1972</SUB>> ]
-"10949" [label = <(&lt;operator&gt;.lessThan,i &lt; length)<SUB>1973</SUB>> ]
-"10952" [label = <(&lt;operator&gt;.preIncrement,++i)<SUB>1973</SUB>> ]
-"10971" [label = <(&lt;operator&gt;.assignment,* chars = static_cast&lt;jchar*&gt;(s-&gt;GetValue()))<SUB>1977</SUB>> ]
-"10979" [label = <(memcpy,memcpy(buf, chars + start, length * sizeof(jchar)))<SUB>1978</SUB>> ]
-"10921" [label = <(&lt;operator&gt;.logicalAnd,(length) != 0 &amp;&amp; (buf) == nullptr)<SUB>1971</SUB>> ]
-"10929" [label = <(CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;buf == null&quot;))<SUB>1971</SUB>> ]
-"10936" [label = <(RETURN,CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf),CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf))<SUB>1971</SUB>> ]
-"10946" [label = <(&lt;operator&gt;.assignment,i = 0)<SUB>1973</SUB>> ]
-"10955" [label = <(&lt;operator&gt;.assignment,buf[i] = static_cast&lt;jchar&gt;(s-&gt;CharAt(start+i)))<SUB>1974</SUB>> ]
-"10973" [label = <(&lt;operator&gt;.cast,static_cast&lt;jchar*&gt;(s-&gt;GetValue()))<SUB>1977</SUB>> ]
-"10981" [label = <(&lt;operator&gt;.addition,chars + start)<SUB>1978</SUB>> ]
-"10984" [label = <(&lt;operator&gt;.multiplication,length * sizeof(jchar))<SUB>1978</SUB>> ]
-"10922" [label = <(&lt;operator&gt;.notEquals,(length) != 0)<SUB>1971</SUB>> ]
-"10925" [label = <(&lt;operator&gt;.equals,(buf) == nullptr)<SUB>1971</SUB>> ]
-"10930" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1971</SUB>> ]
-"10956" [label = <(&lt;operator&gt;.indirectIndexAccess,buf[i])<SUB>1974</SUB>> ]
-"10959" [label = <(&lt;operator&gt;.cast,static_cast&lt;jchar&gt;(s-&gt;CharAt(start+i)))<SUB>1974</SUB>> ]
-"10974" [label = <(UNKNOWN,jchar*,jchar*)<SUB>1977</SUB>> ]
-"10975" [label = <(GetValue,s-&gt;GetValue())<SUB>1977</SUB>> ]
-"10986" [label = <(&lt;operator&gt;.sizeOf,sizeof(jchar))<SUB>1978</SUB>> ]
-"10931" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1971</SUB>> ]
-"10933" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1971</SUB>> ]
-"10960" [label = <(UNKNOWN,jchar,jchar)<SUB>1974</SUB>> ]
-"10961" [label = <(CharAt,s-&gt;CharAt(start+i))<SUB>1974</SUB>> ]
-"10976" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetValue)<SUB>1977</SUB>> ]
-"10962" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;CharAt)<SUB>1974</SUB>> ]
-"10965" [label = <(&lt;operator&gt;.addition,start+i)<SUB>1974</SUB>> ]
-"10978" [label = <(FIELD_IDENTIFIER,GetValue,GetValue)<SUB>1977</SUB>> ]
-"10964" [label = <(FIELD_IDENTIFIER,CharAt,CharAt)<SUB>1974</SUB>> ]
-"10843" [label = <(METHOD,GetStringRegion)<SUB>1963</SUB>> ]
-"10988" [label = <(METHOD_RETURN,void)<SUB>1963</SUB>> ]
-  "10850" -> "10855" 
-  "10850" -> "10868" 
-  "10868" -> "10876" 
-  "10870" -> "10890" 
-  "10871" -> "10882" 
-  "10878" -> "10870" 
-  "10888" -> "10912" 
-  "10888" -> "10915" 
-  "10872" -> "10871" 
-  "10879" -> "10878" 
-  "10889" -> "10888" 
-  "10889" -> "10902" 
-  "10896" -> "10888" 
-  "10905" -> "10988" 
-  "10854" -> "10861" 
-  "10854" -> "10868" 
-  "10874" -> "10872" 
-  "10880" -> "10885" 
-  "10883" -> "10879" 
-  "10890" -> "10889" 
-  "10890" -> "10893" 
-  "10893" -> "10889" 
-  "10898" -> "10896" 
-  "10909" -> "10905" 
-  "10915" -> "10922" 
-  "10915" -> "10941" 
-  "10855" -> "10854" 
-  "10859" -> "10866" 
-  "10866" -> "10988" 
-  "10876" -> "10874" 
-  "10882" -> "10880" 
-  "10885" -> "10883" 
-  "10899" -> "10898" 
-  "10910" -> "10909" 
-  "10938" -> "10946" 
-  "10938" -> "10974" 
-  "10860" -> "10859" 
-  "10900" -> "10899" 
-  "10912" -> "10910" 
-  "10939" -> "10938" 
-  "10861" -> "10863" 
-  "10863" -> "10860" 
-  "10902" -> "10900" 
-  "10920" -> "10931" 
-  "10920" -> "10941" 
-  "10941" -> "10939" 
-  "10949" -> "10988" 
-  "10949" -> "10956" 
-  "10952" -> "10949" 
-  "10971" -> "10981" 
-  "10979" -> "10988" 
-  "10921" -> "10920" 
-  "10929" -> "10936" 
-  "10936" -> "10988" 
-  "10946" -> "10949" 
-  "10955" -> "10952" 
-  "10973" -> "10971" 
-  "10981" -> "10986" 
-  "10984" -> "10979" 
-  "10922" -> "10921" 
-  "10922" -> "10925" 
-  "10925" -> "10921" 
-  "10930" -> "10929" 
-  "10956" -> "10960" 
-  "10959" -> "10955" 
-  "10974" -> "10978" 
-  "10975" -> "10973" 
-  "10986" -> "10984" 
-  "10931" -> "10933" 
-  "10933" -> "10930" 
-  "10960" -> "10964" 
-  "10961" -> "10959" 
-  "10976" -> "10975" 
-  "10962" -> "10965" 
-  "10965" -> "10961" 
-  "10978" -> "10976" 
-  "10964" -> "10962" 
-  "10843" -> "10850" 
+digraph "GetStringCritical" {  
+"10997" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_string))<SUB>1909</SUB>> ]
+"11016" [label = <(soa,soa(env))<SUB>1910</SUB>> ]
+"11018" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::String&gt; s = soa.Decode&lt;mirror::String&gt;(java_string))<SUB>1911</SUB>> ]
+"11036" [label = <(&lt;operator&gt;.assignment,* heap = Runtime::Current()-&gt;GetHeap())<SUB>1912</SUB>> ]
+"11019" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::String&gt; s)<SUB>1911</SUB>> ]
+"11026" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::String&gt;(java_string))<SUB>1911</SUB>> ]
+"11038" [label = <(GetHeap,Runtime::Current()-&gt;GetHeap())<SUB>1912</SUB>> ]
+"11046" [label = <(IsMovableObject,heap-&gt;IsMovableObject(s))<SUB>1913</SUB>> ]
+"11097" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>1924</SUB>> ]
+"11020" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::String)<SUB>1911</SUB>> ]
+"11027" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::String)<SUB>1911</SUB>> ]
+"11039" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetHeap)<SUB>1912</SUB>> ]
+"11047" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;IsMovableObject)<SUB>1913</SUB>> ]
+"11052" [label = <(&lt;operator&gt;.greaterThan,StackHandleScope&lt;1&gt; hs(soa.Self()))<SUB>1914</SUB>> ]
+"11061" [label = <(&lt;operator&gt;.greaterThan,HandleWrapperObjPtr&lt;mirror::String&gt; h(hs.NewHandleWrapper(&amp;s)))<SUB>1915</SUB>> ]
+"11098" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>1924</SUB>> ]
+"11112" [label = <(&lt;operator&gt;.assignment,length = s-&gt;GetLength())<SUB>1928</SUB>> ]
+"11119" [label = <(&lt;operator&gt;.assignment,* chars = new jchar[length])<SUB>1929</SUB>> ]
+"11144" [label = <(RETURN,return chars;,return chars;)<SUB>1933</SUB>> ]
+"11001" [label = <(UNLIKELY,UNLIKELY((java_string) == nullptr))<SUB>1909</SUB>> ]
+"11022" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1911</SUB>> ]
+"11028" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1911</SUB>> ]
+"11031" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1911</SUB>> ]
+"11040" [label = <(Runtime::Current,Runtime::Current())<SUB>1912</SUB>> ]
+"11044" [label = <(FIELD_IDENTIFIER,GetHeap,GetHeap)<SUB>1912</SUB>> ]
+"11049" [label = <(FIELD_IDENTIFIER,IsMovableObject,IsMovableObject)<SUB>1913</SUB>> ]
+"11053" [label = <(&lt;operator&gt;.lessThan,StackHandleScope&lt;1)<SUB>1914</SUB>> ]
+"11056" [label = <(hs,hs(soa.Self()))<SUB>1914</SUB>> ]
+"11062" [label = <(&lt;operator&gt;.lessThan,HandleWrapperObjPtr&lt;mirror::String)<SUB>1915</SUB>> ]
+"11067" [label = <(h,h(hs.NewHandleWrapper(&amp;s)))<SUB>1915</SUB>> ]
+"11075" [label = <(&lt;operator&gt;.logicalNot,!kUseReadBarrier)<SUB>1916</SUB>> ]
+"11100" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>1924</SUB>> ]
+"11103" [label = <(&lt;operator&gt;.notEquals,is_copy != nullptr)<SUB>1925</SUB>> ]
+"11114" [label = <(GetLength,s-&gt;GetLength())<SUB>1928</SUB>> ]
+"11121" [label = <(&lt;operator&gt;.new,new jchar[length])<SUB>1929</SUB>> ]
+"11129" [label = <(&lt;operator&gt;.lessThan,i &lt; length)<SUB>1930</SUB>> ]
+"11132" [label = <(&lt;operator&gt;.preIncrement,++i)<SUB>1930</SUB>> ]
+"11157" [label = <(RETURN,return static_cast&lt;jchar*&gt;(s-&gt;GetValue());,return static_cast&lt;jchar*&gt;(s-&gt;GetValue());)<SUB>1938</SUB>> ]
+"11002" [label = <(&lt;operator&gt;.equals,(java_string) == nullptr)<SUB>1909</SUB>> ]
+"11006" [label = <(CHECK_NON_NULL_ARGUMENT(java_string),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_string == null&quot;))<SUB>1909</SUB>> ]
+"11013" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_string),CHECK_NON_NULL_ARGUMENT(java_string))<SUB>1909</SUB>> ]
+"11024" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1911</SUB>> ]
+"11030" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1911</SUB>> ]
+"11033" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1911</SUB>> ]
+"11041" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>1912</SUB>> ]
+"11057" [label = <(Self,soa.Self())<SUB>1914</SUB>> ]
+"11064" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1915</SUB>> ]
+"11068" [label = <(NewHandleWrapper,hs.NewHandleWrapper(&amp;s))<SUB>1915</SUB>> ]
+"11078" [label = <(IncrementDisableMovingGC,heap-&gt;IncrementDisableMovingGC(soa.Self()))<SUB>1917</SUB>> ]
+"11107" [label = <(&lt;operator&gt;.assignment,*is_copy = JNI_TRUE)<SUB>1926</SUB>> ]
+"11115" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetLength)<SUB>1928</SUB>> ]
+"11126" [label = <(&lt;operator&gt;.assignment,i = 0)<SUB>1930</SUB>> ]
+"11135" [label = <(&lt;operator&gt;.assignment,chars[i] = s-&gt;CharAt(i))<SUB>1931</SUB>> ]
+"11149" [label = <(&lt;operator&gt;.notEquals,is_copy != nullptr)<SUB>1935</SUB>> ]
+"11158" [label = <(&lt;operator&gt;.cast,static_cast&lt;jchar*&gt;(s-&gt;GetValue()))<SUB>1938</SUB>> ]
+"11007" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1909</SUB>> ]
+"11043" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>1912</SUB>> ]
+"11058" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>1914</SUB>> ]
+"11066" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1915</SUB>> ]
+"11069" [label = <(&lt;operator&gt;.fieldAccess,hs.NewHandleWrapper)<SUB>1915</SUB>> ]
+"11072" [label = <(&lt;operator&gt;.addressOf,&amp;s)<SUB>1915</SUB>> ]
+"11079" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;IncrementDisableMovingGC)<SUB>1917</SUB>> ]
+"11082" [label = <(Self,soa.Self())<SUB>1917</SUB>> ]
+"11088" [label = <(IncrementDisableThreadFlip,heap-&gt;IncrementDisableThreadFlip(soa.Self()))<SUB>1921</SUB>> ]
+"11108" [label = <(&lt;operator&gt;.indirection,*is_copy)<SUB>1926</SUB>> ]
+"11117" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>1928</SUB>> ]
+"11136" [label = <(&lt;operator&gt;.indirectIndexAccess,chars[i])<SUB>1931</SUB>> ]
+"11139" [label = <(CharAt,s-&gt;CharAt(i))<SUB>1931</SUB>> ]
+"11153" [label = <(&lt;operator&gt;.assignment,*is_copy = JNI_FALSE)<SUB>1936</SUB>> ]
+"11159" [label = <(UNKNOWN,jchar*,jchar*)<SUB>1938</SUB>> ]
+"11160" [label = <(GetValue,s-&gt;GetValue())<SUB>1938</SUB>> ]
+"11008" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1909</SUB>> ]
+"11010" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1909</SUB>> ]
+"11060" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>1914</SUB>> ]
+"11071" [label = <(FIELD_IDENTIFIER,NewHandleWrapper,NewHandleWrapper)<SUB>1915</SUB>> ]
+"11081" [label = <(FIELD_IDENTIFIER,IncrementDisableMovingGC,IncrementDisableMovingGC)<SUB>1917</SUB>> ]
+"11083" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>1917</SUB>> ]
+"11089" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;IncrementDisableThreadFlip)<SUB>1921</SUB>> ]
+"11092" [label = <(Self,soa.Self())<SUB>1921</SUB>> ]
+"11140" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;CharAt)<SUB>1931</SUB>> ]
+"11154" [label = <(&lt;operator&gt;.indirection,*is_copy)<SUB>1936</SUB>> ]
+"11161" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetValue)<SUB>1938</SUB>> ]
+"11085" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>1917</SUB>> ]
+"11091" [label = <(FIELD_IDENTIFIER,IncrementDisableThreadFlip,IncrementDisableThreadFlip)<SUB>1921</SUB>> ]
+"11093" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>1921</SUB>> ]
+"11142" [label = <(FIELD_IDENTIFIER,CharAt,CharAt)<SUB>1931</SUB>> ]
+"11163" [label = <(FIELD_IDENTIFIER,GetValue,GetValue)<SUB>1938</SUB>> ]
+"11095" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>1921</SUB>> ]
+"10992" [label = <(METHOD,GetStringCritical)<SUB>1908</SUB>> ]
+"11164" [label = <(METHOD_RETURN,jchar)<SUB>1908</SUB>> ]
+  "10997" -> "11002" 
+  "10997" -> "11016" 
+  "11016" -> "11024" 
+  "11018" -> "11043" 
+  "11036" -> "11049" 
+  "11019" -> "11030" 
+  "11026" -> "11018" 
+  "11038" -> "11036" 
+  "11046" -> "11053" 
+  "11046" -> "11100" 
+  "11097" -> "11103" 
+  "11097" -> "11149" 
+  "11020" -> "11019" 
+  "11027" -> "11026" 
+  "11039" -> "11038" 
+  "11047" -> "11046" 
+  "11052" -> "11066" 
+  "11061" -> "11075" 
+  "11098" -> "11097" 
+  "11112" -> "11121" 
+  "11119" -> "11126" 
+  "11144" -> "11164" 
+  "11001" -> "11008" 
+  "11001" -> "11016" 
+  "11022" -> "11020" 
+  "11028" -> "11033" 
+  "11031" -> "11027" 
+  "11040" -> "11044" 
+  "11044" -> "11039" 
+  "11049" -> "11047" 
+  "11053" -> "11060" 
+  "11056" -> "11052" 
+  "11062" -> "11071" 
+  "11067" -> "11061" 
+  "11075" -> "11081" 
+  "11075" -> "11091" 
+  "11100" -> "11098" 
+  "11103" -> "11108" 
+  "11103" -> "11117" 
+  "11114" -> "11112" 
+  "11121" -> "11119" 
+  "11129" -> "11136" 
+  "11129" -> "11144" 
+  "11132" -> "11129" 
+  "11157" -> "11164" 
+  "11002" -> "11001" 
+  "11006" -> "11013" 
+  "11013" -> "11164" 
+  "11024" -> "11022" 
+  "11030" -> "11028" 
+  "11033" -> "11031" 
+  "11041" -> "11040" 
+  "11057" -> "11056" 
+  "11064" -> "11062" 
+  "11068" -> "11067" 
+  "11078" -> "11100" 
+  "11107" -> "11117" 
+  "11115" -> "11114" 
+  "11126" -> "11129" 
+  "11135" -> "11132" 
+  "11149" -> "11159" 
+  "11149" -> "11154" 
+  "11158" -> "11157" 
+  "11007" -> "11006" 
+  "11043" -> "11041" 
+  "11058" -> "11057" 
+  "11066" -> "11064" 
+  "11069" -> "11072" 
+  "11072" -> "11068" 
+  "11079" -> "11085" 
+  "11082" -> "11078" 
+  "11088" -> "11100" 
+  "11108" -> "11107" 
+  "11117" -> "11115" 
+  "11136" -> "11142" 
+  "11139" -> "11135" 
+  "11153" -> "11159" 
+  "11159" -> "11163" 
+  "11160" -> "11158" 
+  "11008" -> "11010" 
+  "11010" -> "11007" 
+  "11060" -> "11058" 
+  "11071" -> "11069" 
+  "11081" -> "11079" 
+  "11083" -> "11082" 
+  "11089" -> "11095" 
+  "11092" -> "11088" 
+  "11140" -> "11139" 
+  "11154" -> "11153" 
+  "11161" -> "11160" 
+  "11085" -> "11083" 
+  "11091" -> "11089" 
+  "11093" -> "11092" 
+  "11142" -> "11140" 
+  "11163" -> "11161" 
+  "11095" -> "11093" 
+  "10992" -> "10997" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/194-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/194-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/194-cfg.dot	2023-06-07 19:35:01.517387159 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/194-cfg.dot	2023-06-07 19:35:08.057386514 +0330
@@ -1,143 +1,126 @@
-digraph "GetStringUTFRegion" {  
-"10997" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string))<SUB>1985</SUB>> ]
-"11015" [label = <(soa,soa(env))<SUB>1986</SUB>> ]
-"11017" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::String&gt; s = soa.Decode&lt;mirror::String&gt;(java_string))<SUB>1987</SUB>> ]
-"11018" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::String&gt; s)<SUB>1987</SUB>> ]
-"11025" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::String&gt;(java_string))<SUB>1987</SUB>> ]
-"11035" [label = <(&lt;operator&gt;.logicalOr,start &lt; 0 || length &lt; 0 || length &gt; s-&gt;GetLength() - start)<SUB>1988</SUB>> ]
-"11019" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::String)<SUB>1987</SUB>> ]
-"11026" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::String)<SUB>1987</SUB>> ]
-"11036" [label = <(&lt;operator&gt;.logicalOr,start &lt; 0 || length &lt; 0)<SUB>1988</SUB>> ]
-"11043" [label = <(&lt;operator&gt;.greaterThan,length &gt; s-&gt;GetLength() - start)<SUB>1988</SUB>> ]
-"11052" [label = <(ThrowSIOOBE,ThrowSIOOBE(soa, start, length, s-&gt;GetLength()))<SUB>1989</SUB>> ]
-"11001" [label = <(UNLIKELY,UNLIKELY((java_string) == nullptr))<SUB>1985</SUB>> ]
-"11021" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1987</SUB>> ]
-"11027" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1987</SUB>> ]
-"11030" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1987</SUB>> ]
-"11037" [label = <(&lt;operator&gt;.lessThan,start &lt; 0)<SUB>1988</SUB>> ]
-"11040" [label = <(&lt;operator&gt;.lessThan,length &lt; 0)<SUB>1988</SUB>> ]
-"11045" [label = <(&lt;operator&gt;.subtraction,s-&gt;GetLength() - start)<SUB>1988</SUB>> ]
-"11056" [label = <(GetLength,s-&gt;GetLength())<SUB>1989</SUB>> ]
-"11062" [label = <(CHECK_NON_NULL_MEMCPY_ARGUMENT,CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf))<SUB>1991</SUB>> ]
-"11002" [label = <(&lt;operator&gt;.equals,(java_string) == nullptr)<SUB>1985</SUB>> ]
-"11006" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_string == null&quot;))<SUB>1985</SUB>> ]
-"11013" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string))<SUB>1985</SUB>> ]
-"11023" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1987</SUB>> ]
-"11029" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1987</SUB>> ]
-"11032" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1987</SUB>> ]
-"11046" [label = <(GetLength,s-&gt;GetLength())<SUB>1988</SUB>> ]
-"11057" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetLength)<SUB>1989</SUB>> ]
-"11085" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>1992</SUB>> ]
-"11007" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1985</SUB>> ]
-"11047" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetLength)<SUB>1988</SUB>> ]
-"11059" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>1989</SUB>> ]
-"11086" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>1992</SUB>> ]
-"11008" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1985</SUB>> ]
-"11010" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1985</SUB>> ]
-"11049" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>1988</SUB>> ]
-"11067" [label = <(UNLIKELY,UNLIKELY((length) != 0 &amp;&amp; (buf) == nullptr))<SUB>1991</SUB>> ]
-"11088" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>1992</SUB>> ]
-"11096" [label = <(&lt;operator&gt;.lessThan,i &lt; length)<SUB>1993</SUB>> ]
-"11099" [label = <(&lt;operator&gt;.preIncrement,++i)<SUB>1993</SUB>> ]
-"11116" [label = <(&lt;operator&gt;.assignment,* chars = s-&gt;GetValue())<SUB>1997</SUB>> ]
-"11123" [label = <(&lt;operator&gt;.assignment,bytes = CountUtf8Bytes(chars + start, length))<SUB>1998</SUB>> ]
-"11130" [label = <(ConvertUtf16ToModifiedUtf8,ConvertUtf16ToModifiedUtf8(buf, bytes, chars + start, length))<SUB>1999</SUB>> ]
-"11068" [label = <(&lt;operator&gt;.logicalAnd,(length) != 0 &amp;&amp; (buf) == nullptr)<SUB>1991</SUB>> ]
-"11076" [label = <(CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;buf == null&quot;))<SUB>1991</SUB>> ]
-"11083" [label = <(RETURN,CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf),CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf))<SUB>1991</SUB>> ]
-"11093" [label = <(&lt;operator&gt;.assignment,i = 0)<SUB>1993</SUB>> ]
-"11102" [label = <(&lt;operator&gt;.assignment,buf[i] = s-&gt;CharAt(start+i))<SUB>1994</SUB>> ]
-"11118" [label = <(GetValue,s-&gt;GetValue())<SUB>1997</SUB>> ]
-"11125" [label = <(CountUtf8Bytes,CountUtf8Bytes(chars + start, length))<SUB>1998</SUB>> ]
-"11133" [label = <(&lt;operator&gt;.addition,chars + start)<SUB>1999</SUB>> ]
-"11069" [label = <(&lt;operator&gt;.notEquals,(length) != 0)<SUB>1991</SUB>> ]
-"11072" [label = <(&lt;operator&gt;.equals,(buf) == nullptr)<SUB>1991</SUB>> ]
-"11077" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1991</SUB>> ]
-"11103" [label = <(&lt;operator&gt;.indirectIndexAccess,buf[i])<SUB>1994</SUB>> ]
-"11106" [label = <(CharAt,s-&gt;CharAt(start+i))<SUB>1994</SUB>> ]
-"11119" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetValue)<SUB>1997</SUB>> ]
-"11126" [label = <(&lt;operator&gt;.addition,chars + start)<SUB>1998</SUB>> ]
-"11078" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1991</SUB>> ]
-"11080" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1991</SUB>> ]
-"11107" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;CharAt)<SUB>1994</SUB>> ]
-"11110" [label = <(&lt;operator&gt;.addition,start+i)<SUB>1994</SUB>> ]
-"11121" [label = <(FIELD_IDENTIFIER,GetValue,GetValue)<SUB>1997</SUB>> ]
-"11109" [label = <(FIELD_IDENTIFIER,CharAt,CharAt)<SUB>1994</SUB>> ]
-"10990" [label = <(METHOD,GetStringUTFRegion)<SUB>1983</SUB>> ]
-"11137" [label = <(METHOD_RETURN,void)<SUB>1983</SUB>> ]
-  "10997" -> "11002" 
-  "10997" -> "11015" 
-  "11015" -> "11023" 
-  "11017" -> "11037" 
-  "11018" -> "11029" 
-  "11025" -> "11017" 
-  "11035" -> "11059" 
-  "11035" -> "11062" 
-  "11019" -> "11018" 
-  "11026" -> "11025" 
-  "11036" -> "11035" 
-  "11036" -> "11049" 
-  "11043" -> "11035" 
-  "11052" -> "11137" 
-  "11001" -> "11008" 
-  "11001" -> "11015" 
-  "11021" -> "11019" 
-  "11027" -> "11032" 
-  "11030" -> "11026" 
-  "11037" -> "11036" 
-  "11037" -> "11040" 
-  "11040" -> "11036" 
-  "11045" -> "11043" 
-  "11056" -> "11052" 
-  "11062" -> "11069" 
-  "11062" -> "11088" 
-  "11002" -> "11001" 
-  "11006" -> "11013" 
-  "11013" -> "11137" 
-  "11023" -> "11021" 
-  "11029" -> "11027" 
-  "11032" -> "11030" 
-  "11046" -> "11045" 
-  "11057" -> "11056" 
-  "11085" -> "11093" 
-  "11085" -> "11121" 
-  "11007" -> "11006" 
-  "11047" -> "11046" 
-  "11059" -> "11057" 
-  "11086" -> "11085" 
-  "11008" -> "11010" 
-  "11010" -> "11007" 
-  "11049" -> "11047" 
-  "11067" -> "11078" 
-  "11067" -> "11088" 
-  "11088" -> "11086" 
-  "11096" -> "11137" 
-  "11096" -> "11103" 
-  "11099" -> "11096" 
-  "11116" -> "11126" 
-  "11123" -> "11133" 
-  "11130" -> "11137" 
-  "11068" -> "11067" 
-  "11076" -> "11083" 
-  "11083" -> "11137" 
-  "11093" -> "11096" 
-  "11102" -> "11099" 
-  "11118" -> "11116" 
-  "11125" -> "11123" 
-  "11133" -> "11130" 
-  "11069" -> "11068" 
-  "11069" -> "11072" 
-  "11072" -> "11068" 
-  "11077" -> "11076" 
-  "11103" -> "11109" 
-  "11106" -> "11102" 
-  "11119" -> "11118" 
-  "11126" -> "11125" 
-  "11078" -> "11080" 
-  "11080" -> "11077" 
-  "11107" -> "11110" 
-  "11110" -> "11106" 
-  "11121" -> "11119" 
-  "11109" -> "11107" 
-  "10990" -> "10997" 
+digraph "ReleaseStringCritical" {  
+"11171" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string))<SUB>1945</SUB>> ]
+"11189" [label = <(soa,soa(env))<SUB>1946</SUB>> ]
+"11192" [label = <(&lt;operator&gt;.assignment,* heap = Runtime::Current()-&gt;GetHeap())<SUB>1947</SUB>> ]
+"11201" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::String&gt; s = soa.Decode&lt;mirror::String&gt;(java_string))<SUB>1948</SUB>> ]
+"11194" [label = <(GetHeap,Runtime::Current()-&gt;GetHeap())<SUB>1947</SUB>> ]
+"11202" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::String&gt; s)<SUB>1948</SUB>> ]
+"11209" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::String&gt;(java_string))<SUB>1948</SUB>> ]
+"11219" [label = <(IsMovableObject,heap-&gt;IsMovableObject(s))<SUB>1949</SUB>> ]
+"11248" [label = <(&lt;operator&gt;.logicalOr,s-&gt;IsCompressed() || (s-&gt;IsCompressed() == false &amp;&amp; s-&gt;GetValue() != chars))<SUB>1956</SUB>> ]
+"11195" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetHeap)<SUB>1947</SUB>> ]
+"11203" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::String)<SUB>1948</SUB>> ]
+"11210" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::String)<SUB>1948</SUB>> ]
+"11220" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;IsMovableObject)<SUB>1949</SUB>> ]
+"11249" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>1956</SUB>> ]
+"11253" [label = <(&lt;operator&gt;.logicalAnd,s-&gt;IsCompressed() == false &amp;&amp; s-&gt;GetValue() != chars)<SUB>1956</SUB>> ]
+"11267" [label = <(&lt;operator&gt;.delete,delete[] chars)<SUB>1957</SUB>> ]
+"11175" [label = <(UNLIKELY,UNLIKELY((java_string) == nullptr))<SUB>1945</SUB>> ]
+"11196" [label = <(Runtime::Current,Runtime::Current())<SUB>1947</SUB>> ]
+"11200" [label = <(FIELD_IDENTIFIER,GetHeap,GetHeap)<SUB>1947</SUB>> ]
+"11205" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1948</SUB>> ]
+"11211" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1948</SUB>> ]
+"11214" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1948</SUB>> ]
+"11222" [label = <(FIELD_IDENTIFIER,IsMovableObject,IsMovableObject)<SUB>1949</SUB>> ]
+"11226" [label = <(&lt;operator&gt;.logicalNot,!kUseReadBarrier)<SUB>1950</SUB>> ]
+"11250" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>1956</SUB>> ]
+"11254" [label = <(&lt;operator&gt;.equals,s-&gt;IsCompressed() == false)<SUB>1956</SUB>> ]
+"11260" [label = <(&lt;operator&gt;.notEquals,s-&gt;GetValue() != chars)<SUB>1956</SUB>> ]
+"11176" [label = <(&lt;operator&gt;.equals,(java_string) == nullptr)<SUB>1945</SUB>> ]
+"11180" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_string == null&quot;))<SUB>1945</SUB>> ]
+"11187" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string))<SUB>1945</SUB>> ]
+"11197" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>1947</SUB>> ]
+"11207" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1948</SUB>> ]
+"11213" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1948</SUB>> ]
+"11216" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1948</SUB>> ]
+"11229" [label = <(DecrementDisableMovingGC,heap-&gt;DecrementDisableMovingGC(soa.Self()))<SUB>1951</SUB>> ]
+"11252" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>1956</SUB>> ]
+"11255" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>1956</SUB>> ]
+"11261" [label = <(GetValue,s-&gt;GetValue())<SUB>1956</SUB>> ]
+"11181" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1945</SUB>> ]
+"11199" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>1947</SUB>> ]
+"11230" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;DecrementDisableMovingGC)<SUB>1951</SUB>> ]
+"11233" [label = <(Self,soa.Self())<SUB>1951</SUB>> ]
+"11239" [label = <(DecrementDisableThreadFlip,heap-&gt;DecrementDisableThreadFlip(soa.Self()))<SUB>1953</SUB>> ]
+"11256" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>1956</SUB>> ]
+"11262" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetValue)<SUB>1956</SUB>> ]
+"11182" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1945</SUB>> ]
+"11184" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1945</SUB>> ]
+"11232" [label = <(FIELD_IDENTIFIER,DecrementDisableMovingGC,DecrementDisableMovingGC)<SUB>1951</SUB>> ]
+"11234" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>1951</SUB>> ]
+"11240" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;DecrementDisableThreadFlip)<SUB>1953</SUB>> ]
+"11243" [label = <(Self,soa.Self())<SUB>1953</SUB>> ]
+"11258" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>1956</SUB>> ]
+"11264" [label = <(FIELD_IDENTIFIER,GetValue,GetValue)<SUB>1956</SUB>> ]
+"11236" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>1951</SUB>> ]
+"11242" [label = <(FIELD_IDENTIFIER,DecrementDisableThreadFlip,DecrementDisableThreadFlip)<SUB>1953</SUB>> ]
+"11244" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>1953</SUB>> ]
+"11246" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>1953</SUB>> ]
+"11166" [label = <(METHOD,ReleaseStringCritical)<SUB>1942</SUB>> ]
+"11269" [label = <(METHOD_RETURN,void)<SUB>1942</SUB>> ]
+  "11171" -> "11176" 
+  "11171" -> "11189" 
+  "11189" -> "11199" 
+  "11192" -> "11207" 
+  "11201" -> "11222" 
+  "11194" -> "11192" 
+  "11202" -> "11213" 
+  "11209" -> "11201" 
+  "11219" -> "11226" 
+  "11219" -> "11252" 
+  "11248" -> "11269" 
+  "11248" -> "11267" 
+  "11195" -> "11194" 
+  "11203" -> "11202" 
+  "11210" -> "11209" 
+  "11220" -> "11219" 
+  "11249" -> "11248" 
+  "11249" -> "11258" 
+  "11253" -> "11248" 
+  "11267" -> "11269" 
+  "11175" -> "11182" 
+  "11175" -> "11189" 
+  "11196" -> "11200" 
+  "11200" -> "11195" 
+  "11205" -> "11203" 
+  "11211" -> "11216" 
+  "11214" -> "11210" 
+  "11222" -> "11220" 
+  "11226" -> "11232" 
+  "11226" -> "11242" 
+  "11250" -> "11249" 
+  "11254" -> "11253" 
+  "11254" -> "11264" 
+  "11260" -> "11253" 
+  "11176" -> "11175" 
+  "11180" -> "11187" 
+  "11187" -> "11269" 
+  "11197" -> "11196" 
+  "11207" -> "11205" 
+  "11213" -> "11211" 
+  "11216" -> "11214" 
+  "11229" -> "11252" 
+  "11252" -> "11250" 
+  "11255" -> "11254" 
+  "11261" -> "11260" 
+  "11181" -> "11180" 
+  "11199" -> "11197" 
+  "11230" -> "11236" 
+  "11233" -> "11229" 
+  "11239" -> "11252" 
+  "11256" -> "11255" 
+  "11262" -> "11261" 
+  "11182" -> "11184" 
+  "11184" -> "11181" 
+  "11232" -> "11230" 
+  "11234" -> "11233" 
+  "11240" -> "11246" 
+  "11243" -> "11239" 
+  "11258" -> "11256" 
+  "11264" -> "11262" 
+  "11236" -> "11234" 
+  "11242" -> "11240" 
+  "11244" -> "11243" 
+  "11246" -> "11244" 
+  "11166" -> "11171" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/195-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/195-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/195-cfg.dot	2023-06-07 19:35:01.527387160 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/195-cfg.dot	2023-06-07 19:35:08.057386514 +0330
@@ -1,159 +1,103 @@
-digraph "GetStringChars" {  
-"11144" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_string))<SUB>2005</SUB>> ]
-"11163" [label = <(soa,soa(env))<SUB>2006</SUB>> ]
-"11165" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::String&gt; s = soa.Decode&lt;mirror::String&gt;(java_string))<SUB>2007</SUB>> ]
-"11183" [label = <(&lt;operator&gt;.assignment,* heap = Runtime::Current()-&gt;GetHeap())<SUB>2008</SUB>> ]
-"11278" [label = <(RETURN,return static_cast&lt;jchar*&gt;(s-&gt;GetValue());,return static_cast&lt;jchar*&gt;(s-&gt;GetValue());)<SUB>2027</SUB>> ]
-"11166" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::String&gt; s)<SUB>2007</SUB>> ]
-"11173" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::String&gt;(java_string))<SUB>2007</SUB>> ]
-"11185" [label = <(GetHeap,Runtime::Current()-&gt;GetHeap())<SUB>2008</SUB>> ]
-"11193" [label = <(&lt;operator&gt;.logicalOr,heap-&gt;IsMovableObject(s) || s-&gt;IsCompressed())<SUB>2009</SUB>> ]
-"11270" [label = <(&lt;operator&gt;.notEquals,is_copy != nullptr)<SUB>2024</SUB>> ]
-"11279" [label = <(&lt;operator&gt;.cast,static_cast&lt;jchar*&gt;(s-&gt;GetValue()))<SUB>2027</SUB>> ]
-"11167" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::String)<SUB>2007</SUB>> ]
-"11174" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::String)<SUB>2007</SUB>> ]
-"11186" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetHeap)<SUB>2008</SUB>> ]
-"11194" [label = <(IsMovableObject,heap-&gt;IsMovableObject(s))<SUB>2009</SUB>> ]
-"11199" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>2009</SUB>> ]
-"11205" [label = <(&lt;operator&gt;.assignment,* chars = new jchar[s-&gt;GetLength()])<SUB>2010</SUB>> ]
-"11267" [label = <(RETURN,return chars;,return chars;)<SUB>2022</SUB>> ]
-"11274" [label = <(&lt;operator&gt;.assignment,*is_copy = JNI_FALSE)<SUB>2025</SUB>> ]
-"11280" [label = <(UNKNOWN,jchar*,jchar*)<SUB>2027</SUB>> ]
-"11281" [label = <(GetValue,s-&gt;GetValue())<SUB>2027</SUB>> ]
-"11148" [label = <(UNLIKELY,UNLIKELY((java_string) == nullptr))<SUB>2005</SUB>> ]
-"11169" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>2007</SUB>> ]
-"11175" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2007</SUB>> ]
-"11178" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>2007</SUB>> ]
-"11187" [label = <(Runtime::Current,Runtime::Current())<SUB>2008</SUB>> ]
-"11191" [label = <(FIELD_IDENTIFIER,GetHeap,GetHeap)<SUB>2008</SUB>> ]
-"11195" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;IsMovableObject)<SUB>2009</SUB>> ]
-"11200" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>2009</SUB>> ]
-"11207" [label = <(&lt;operator&gt;.new,new jchar[s-&gt;GetLength()])<SUB>2010</SUB>> ]
-"11210" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>2011</SUB>> ]
-"11259" [label = <(&lt;operator&gt;.notEquals,is_copy != nullptr)<SUB>2019</SUB>> ]
-"11275" [label = <(&lt;operator&gt;.indirection,*is_copy)<SUB>2025</SUB>> ]
-"11282" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetValue)<SUB>2027</SUB>> ]
-"11149" [label = <(&lt;operator&gt;.equals,(java_string) == nullptr)<SUB>2005</SUB>> ]
-"11153" [label = <(CHECK_NON_NULL_ARGUMENT(java_string),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_string == null&quot;))<SUB>2005</SUB>> ]
-"11160" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_string),CHECK_NON_NULL_ARGUMENT(java_string))<SUB>2005</SUB>> ]
-"11171" [label = <(FIELD_IDENTIFIER,String,String)<SUB>2007</SUB>> ]
-"11177" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2007</SUB>> ]
-"11180" [label = <(FIELD_IDENTIFIER,String,String)<SUB>2007</SUB>> ]
-"11188" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>2008</SUB>> ]
-"11197" [label = <(FIELD_IDENTIFIER,IsMovableObject,IsMovableObject)<SUB>2009</SUB>> ]
-"11202" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>2009</SUB>> ]
-"11211" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>2011</SUB>> ]
-"11216" [label = <(&lt;operator&gt;.assignment,length = s-&gt;GetLength())<SUB>2012</SUB>> ]
-"11263" [label = <(&lt;operator&gt;.assignment,*is_copy = JNI_TRUE)<SUB>2020</SUB>> ]
-"11284" [label = <(FIELD_IDENTIFIER,GetValue,GetValue)<SUB>2027</SUB>> ]
-"11154" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2005</SUB>> ]
-"11190" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>2008</SUB>> ]
-"11213" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>2011</SUB>> ]
-"11218" [label = <(GetLength,s-&gt;GetLength())<SUB>2012</SUB>> ]
-"11228" [label = <(&lt;operator&gt;.lessThan,i &lt; length)<SUB>2013</SUB>> ]
-"11231" [label = <(&lt;operator&gt;.preIncrement,++i)<SUB>2013</SUB>> ]
-"11245" [label = <(memcpy,memcpy(chars, s-&gt;GetValue(), sizeof(jchar) * s-&gt;GetLength()))<SUB>2017</SUB>> ]
-"11264" [label = <(&lt;operator&gt;.indirection,*is_copy)<SUB>2020</SUB>> ]
-"11155" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2005</SUB>> ]
-"11157" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2005</SUB>> ]
-"11219" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetLength)<SUB>2012</SUB>> ]
-"11225" [label = <(&lt;operator&gt;.assignment,i = 0)<SUB>2013</SUB>> ]
-"11234" [label = <(&lt;operator&gt;.assignment,chars[i] = s-&gt;CharAt(i))<SUB>2014</SUB>> ]
-"11247" [label = <(GetValue,s-&gt;GetValue())<SUB>2017</SUB>> ]
-"11251" [label = <(&lt;operator&gt;.multiplication,sizeof(jchar) * s-&gt;GetLength())<SUB>2017</SUB>> ]
-"11221" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>2012</SUB>> ]
-"11235" [label = <(&lt;operator&gt;.indirectIndexAccess,chars[i])<SUB>2014</SUB>> ]
-"11238" [label = <(CharAt,s-&gt;CharAt(i))<SUB>2014</SUB>> ]
-"11248" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetValue)<SUB>2017</SUB>> ]
-"11252" [label = <(&lt;operator&gt;.sizeOf,sizeof(jchar))<SUB>2017</SUB>> ]
-"11254" [label = <(GetLength,s-&gt;GetLength())<SUB>2017</SUB>> ]
-"11239" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;CharAt)<SUB>2014</SUB>> ]
-"11250" [label = <(FIELD_IDENTIFIER,GetValue,GetValue)<SUB>2017</SUB>> ]
-"11255" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetLength)<SUB>2017</SUB>> ]
-"11241" [label = <(FIELD_IDENTIFIER,CharAt,CharAt)<SUB>2014</SUB>> ]
-"11257" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>2017</SUB>> ]
-"11139" [label = <(METHOD,GetStringChars)<SUB>2004</SUB>> ]
-"11285" [label = <(METHOD_RETURN,jchar)<SUB>2004</SUB>> ]
-  "11144" -> "11149" 
-  "11144" -> "11163" 
-  "11163" -> "11171" 
-  "11165" -> "11190" 
-  "11183" -> "11197" 
-  "11278" -> "11285" 
-  "11166" -> "11177" 
-  "11173" -> "11165" 
-  "11185" -> "11183" 
-  "11193" -> "11207" 
-  "11193" -> "11270" 
-  "11270" -> "11280" 
-  "11270" -> "11275" 
-  "11279" -> "11278" 
-  "11167" -> "11166" 
-  "11174" -> "11173" 
-  "11186" -> "11185" 
-  "11194" -> "11193" 
-  "11194" -> "11202" 
-  "11199" -> "11193" 
-  "11205" -> "11213" 
-  "11267" -> "11285" 
-  "11274" -> "11280" 
-  "11280" -> "11284" 
-  "11281" -> "11279" 
-  "11148" -> "11155" 
-  "11148" -> "11163" 
-  "11169" -> "11167" 
-  "11175" -> "11180" 
-  "11178" -> "11174" 
-  "11187" -> "11191" 
-  "11191" -> "11186" 
-  "11195" -> "11194" 
-  "11200" -> "11199" 
-  "11207" -> "11205" 
-  "11210" -> "11221" 
-  "11210" -> "11250" 
-  "11259" -> "11264" 
-  "11259" -> "11267" 
-  "11275" -> "11274" 
-  "11282" -> "11281" 
-  "11149" -> "11148" 
-  "11153" -> "11160" 
-  "11160" -> "11285" 
-  "11171" -> "11169" 
-  "11177" -> "11175" 
-  "11180" -> "11178" 
-  "11188" -> "11187" 
-  "11197" -> "11195" 
-  "11202" -> "11200" 
-  "11211" -> "11210" 
-  "11216" -> "11225" 
-  "11263" -> "11267" 
-  "11284" -> "11282" 
-  "11154" -> "11153" 
-  "11190" -> "11188" 
-  "11213" -> "11211" 
-  "11218" -> "11216" 
-  "11228" -> "11235" 
-  "11228" -> "11259" 
-  "11231" -> "11228" 
-  "11245" -> "11259" 
-  "11264" -> "11263" 
-  "11155" -> "11157" 
-  "11157" -> "11154" 
-  "11219" -> "11218" 
-  "11225" -> "11228" 
-  "11234" -> "11231" 
-  "11247" -> "11252" 
-  "11251" -> "11245" 
-  "11221" -> "11219" 
-  "11235" -> "11241" 
-  "11238" -> "11234" 
-  "11248" -> "11247" 
-  "11252" -> "11257" 
-  "11254" -> "11251" 
-  "11239" -> "11238" 
-  "11250" -> "11248" 
-  "11255" -> "11254" 
-  "11241" -> "11239" 
-  "11257" -> "11255" 
-  "11139" -> "11144" 
+digraph "GetStringUTFChars" {  
+"11293" [label = <(soa,soa(env))<SUB>1968</SUB>> ]
+"11295" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::String&gt; s = soa.Decode&lt;mirror::String&gt;(java_string))<SUB>1969</SUB>> ]
+"11313" [label = <(&lt;operator&gt;.assignment,byte_count = s-&gt;GetUtfLength())<SUB>1970</SUB>> ]
+"11320" [label = <(&lt;operator&gt;.assignment,* bytes = new char[byte_count + 1])<SUB>1971</SUB>> ]
+"11324" [label = <(CHECK,CHECK(bytes != nullptr))<SUB>1972</SUB>> ]
+"11372" [label = <(&lt;operator&gt;.assignment,bytes[byte_count] = '\0')<SUB>1981</SUB>> ]
+"11377" [label = <(RETURN,return bytes;,return bytes;)<SUB>1982</SUB>> ]
+"11277" [label = <(&lt;operator&gt;.equals,java_string == nullptr)<SUB>1962</SUB>> ]
+"11284" [label = <(&lt;operator&gt;.notEquals,is_copy != nullptr)<SUB>1965</SUB>> ]
+"11296" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::String&gt; s)<SUB>1969</SUB>> ]
+"11303" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::String&gt;(java_string))<SUB>1969</SUB>> ]
+"11315" [label = <(GetUtfLength,s-&gt;GetUtfLength())<SUB>1970</SUB>> ]
+"11322" [label = <(&lt;operator&gt;.new,new char[byte_count + 1])<SUB>1971</SUB>> ]
+"11325" [label = <(&lt;operator&gt;.notEquals,bytes != nullptr)<SUB>1972</SUB>> ]
+"11329" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>1973</SUB>> ]
+"11373" [label = <(&lt;operator&gt;.indirectIndexAccess,bytes[byte_count])<SUB>1981</SUB>> ]
+"11281" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>1963</SUB>> ]
+"11288" [label = <(&lt;operator&gt;.assignment,*is_copy = JNI_TRUE)<SUB>1966</SUB>> ]
+"11297" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::String)<SUB>1969</SUB>> ]
+"11304" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::String)<SUB>1969</SUB>> ]
+"11316" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetUtfLength)<SUB>1970</SUB>> ]
+"11330" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>1973</SUB>> ]
+"11289" [label = <(&lt;operator&gt;.indirection,*is_copy)<SUB>1966</SUB>> ]
+"11299" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1969</SUB>> ]
+"11305" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1969</SUB>> ]
+"11308" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1969</SUB>> ]
+"11318" [label = <(FIELD_IDENTIFIER,GetUtfLength,GetUtfLength)<SUB>1970</SUB>> ]
+"11332" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>1973</SUB>> ]
+"11340" [label = <(&lt;operator&gt;.lessThan,i &lt; byte_count)<SUB>1974</SUB>> ]
+"11343" [label = <(&lt;operator&gt;.preIncrement,++i)<SUB>1974</SUB>> ]
+"11358" [label = <(&lt;operator&gt;.assignment,* chars = s-&gt;GetValue())<SUB>1978</SUB>> ]
+"11364" [label = <(ConvertUtf16ToModifiedUtf8,ConvertUtf16ToModifiedUtf8(bytes, byte_count, chars, s-&gt;GetLength()))<SUB>1979</SUB>> ]
+"11301" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1969</SUB>> ]
+"11307" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1969</SUB>> ]
+"11310" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1969</SUB>> ]
+"11337" [label = <(&lt;operator&gt;.assignment,i = 0)<SUB>1974</SUB>> ]
+"11346" [label = <(&lt;operator&gt;.assignment,bytes[i] = s-&gt;CharAt(i))<SUB>1975</SUB>> ]
+"11360" [label = <(GetValue,s-&gt;GetValue())<SUB>1978</SUB>> ]
+"11368" [label = <(GetLength,s-&gt;GetLength())<SUB>1979</SUB>> ]
+"11347" [label = <(&lt;operator&gt;.indirectIndexAccess,bytes[i])<SUB>1975</SUB>> ]
+"11350" [label = <(CharAt,s-&gt;CharAt(i))<SUB>1975</SUB>> ]
+"11361" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetValue)<SUB>1978</SUB>> ]
+"11369" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetLength)<SUB>1979</SUB>> ]
+"11351" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;CharAt)<SUB>1975</SUB>> ]
+"11363" [label = <(FIELD_IDENTIFIER,GetValue,GetValue)<SUB>1978</SUB>> ]
+"11371" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>1979</SUB>> ]
+"11353" [label = <(FIELD_IDENTIFIER,CharAt,CharAt)<SUB>1975</SUB>> ]
+"11271" [label = <(METHOD,GetStringUTFChars)<SUB>1961</SUB>> ]
+"11379" [label = <(METHOD_RETURN,const char*)<SUB>1961</SUB>> ]
+  "11293" -> "11301" 
+  "11295" -> "11318" 
+  "11313" -> "11322" 
+  "11320" -> "11325" 
+  "11324" -> "11332" 
+  "11372" -> "11377" 
+  "11377" -> "11379" 
+  "11277" -> "11281" 
+  "11277" -> "11284" 
+  "11284" -> "11289" 
+  "11284" -> "11293" 
+  "11296" -> "11307" 
+  "11303" -> "11295" 
+  "11315" -> "11313" 
+  "11322" -> "11320" 
+  "11325" -> "11324" 
+  "11329" -> "11337" 
+  "11329" -> "11363" 
+  "11373" -> "11372" 
+  "11281" -> "11379" 
+  "11288" -> "11293" 
+  "11297" -> "11296" 
+  "11304" -> "11303" 
+  "11316" -> "11315" 
+  "11330" -> "11329" 
+  "11289" -> "11288" 
+  "11299" -> "11297" 
+  "11305" -> "11310" 
+  "11308" -> "11304" 
+  "11318" -> "11316" 
+  "11332" -> "11330" 
+  "11340" -> "11347" 
+  "11340" -> "11373" 
+  "11343" -> "11340" 
+  "11358" -> "11371" 
+  "11364" -> "11373" 
+  "11301" -> "11299" 
+  "11307" -> "11305" 
+  "11310" -> "11308" 
+  "11337" -> "11340" 
+  "11346" -> "11343" 
+  "11360" -> "11358" 
+  "11368" -> "11364" 
+  "11347" -> "11353" 
+  "11350" -> "11346" 
+  "11361" -> "11360" 
+  "11369" -> "11368" 
+  "11351" -> "11350" 
+  "11363" -> "11361" 
+  "11371" -> "11369" 
+  "11353" -> "11351" 
+  "11271" -> "11277" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/196-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/196-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/196-cfg.dot	2023-06-07 19:35:01.527387160 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/196-cfg.dot	2023-06-07 19:35:08.057386514 +0330
@@ -1,78 +1,7 @@
-digraph "ReleaseStringChars" {  
-"11292" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string))<SUB>2031</SUB>> ]
-"11310" [label = <(soa,soa(env))<SUB>2032</SUB>> ]
-"11312" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::String&gt; s = soa.Decode&lt;mirror::String&gt;(java_string))<SUB>2033</SUB>> ]
-"11313" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::String&gt; s)<SUB>2033</SUB>> ]
-"11320" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::String&gt;(java_string))<SUB>2033</SUB>> ]
-"11330" [label = <(&lt;operator&gt;.logicalOr,s-&gt;IsCompressed() || (s-&gt;IsCompressed() == false &amp;&amp; chars != s-&gt;GetValue()))<SUB>2034</SUB>> ]
-"11314" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::String)<SUB>2033</SUB>> ]
-"11321" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::String)<SUB>2033</SUB>> ]
-"11331" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>2034</SUB>> ]
-"11335" [label = <(&lt;operator&gt;.logicalAnd,s-&gt;IsCompressed() == false &amp;&amp; chars != s-&gt;GetValue())<SUB>2034</SUB>> ]
-"11349" [label = <(&lt;operator&gt;.delete,delete[] chars)<SUB>2035</SUB>> ]
-"11296" [label = <(UNLIKELY,UNLIKELY((java_string) == nullptr))<SUB>2031</SUB>> ]
-"11316" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>2033</SUB>> ]
-"11322" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2033</SUB>> ]
-"11325" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>2033</SUB>> ]
-"11332" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>2034</SUB>> ]
-"11336" [label = <(&lt;operator&gt;.equals,s-&gt;IsCompressed() == false)<SUB>2034</SUB>> ]
-"11342" [label = <(&lt;operator&gt;.notEquals,chars != s-&gt;GetValue())<SUB>2034</SUB>> ]
-"11297" [label = <(&lt;operator&gt;.equals,(java_string) == nullptr)<SUB>2031</SUB>> ]
-"11301" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_string == null&quot;))<SUB>2031</SUB>> ]
-"11308" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string))<SUB>2031</SUB>> ]
-"11318" [label = <(FIELD_IDENTIFIER,String,String)<SUB>2033</SUB>> ]
-"11324" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2033</SUB>> ]
-"11327" [label = <(FIELD_IDENTIFIER,String,String)<SUB>2033</SUB>> ]
-"11334" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>2034</SUB>> ]
-"11337" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>2034</SUB>> ]
-"11344" [label = <(GetValue,s-&gt;GetValue())<SUB>2034</SUB>> ]
-"11302" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2031</SUB>> ]
-"11338" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>2034</SUB>> ]
-"11345" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetValue)<SUB>2034</SUB>> ]
-"11303" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2031</SUB>> ]
-"11305" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2031</SUB>> ]
-"11340" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>2034</SUB>> ]
-"11347" [label = <(FIELD_IDENTIFIER,GetValue,GetValue)<SUB>2034</SUB>> ]
-"11287" [label = <(METHOD,ReleaseStringChars)<SUB>2030</SUB>> ]
-"11351" [label = <(METHOD_RETURN,void)<SUB>2030</SUB>> ]
-  "11292" -> "11297" 
-  "11292" -> "11310" 
-  "11310" -> "11318" 
-  "11312" -> "11334" 
-  "11313" -> "11324" 
-  "11320" -> "11312" 
-  "11330" -> "11351" 
-  "11330" -> "11349" 
-  "11314" -> "11313" 
-  "11321" -> "11320" 
-  "11331" -> "11330" 
-  "11331" -> "11340" 
-  "11335" -> "11330" 
-  "11349" -> "11351" 
-  "11296" -> "11303" 
-  "11296" -> "11310" 
-  "11316" -> "11314" 
-  "11322" -> "11327" 
-  "11325" -> "11321" 
-  "11332" -> "11331" 
-  "11336" -> "11335" 
-  "11336" -> "11347" 
-  "11342" -> "11335" 
-  "11297" -> "11296" 
-  "11301" -> "11308" 
-  "11308" -> "11351" 
-  "11318" -> "11316" 
-  "11324" -> "11322" 
-  "11327" -> "11325" 
-  "11334" -> "11332" 
-  "11337" -> "11336" 
-  "11344" -> "11342" 
-  "11302" -> "11301" 
-  "11338" -> "11337" 
-  "11345" -> "11344" 
-  "11303" -> "11305" 
-  "11305" -> "11302" 
-  "11340" -> "11338" 
-  "11347" -> "11345" 
-  "11287" -> "11292" 
+digraph "ReleaseStringUTFChars" {  
+"11386" [label = <(&lt;operator&gt;.delete,delete[] chars)<SUB>1986</SUB>> ]
+"11381" [label = <(METHOD,ReleaseStringUTFChars)<SUB>1985</SUB>> ]
+"11388" [label = <(METHOD_RETURN,void)<SUB>1985</SUB>> ]
+  "11386" -> "11388" 
+  "11381" -> "11386" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/197-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/197-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/197-cfg.dot	2023-06-07 19:35:01.527387160 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/197-cfg.dot	2023-06-07 19:35:08.057386514 +0330
@@ -1,189 +1,108 @@
-digraph "GetStringCritical" {  
-"11358" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_string))<SUB>2040</SUB>> ]
-"11377" [label = <(soa,soa(env))<SUB>2041</SUB>> ]
-"11379" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::String&gt; s = soa.Decode&lt;mirror::String&gt;(java_string))<SUB>2042</SUB>> ]
-"11397" [label = <(&lt;operator&gt;.assignment,* heap = Runtime::Current()-&gt;GetHeap())<SUB>2043</SUB>> ]
-"11380" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::String&gt; s)<SUB>2042</SUB>> ]
-"11387" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::String&gt;(java_string))<SUB>2042</SUB>> ]
-"11399" [label = <(GetHeap,Runtime::Current()-&gt;GetHeap())<SUB>2043</SUB>> ]
-"11407" [label = <(IsMovableObject,heap-&gt;IsMovableObject(s))<SUB>2044</SUB>> ]
-"11458" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>2055</SUB>> ]
-"11381" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::String)<SUB>2042</SUB>> ]
-"11388" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::String)<SUB>2042</SUB>> ]
-"11400" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetHeap)<SUB>2043</SUB>> ]
-"11408" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;IsMovableObject)<SUB>2044</SUB>> ]
-"11413" [label = <(&lt;operator&gt;.greaterThan,StackHandleScope&lt;1&gt; hs(soa.Self()))<SUB>2045</SUB>> ]
-"11422" [label = <(&lt;operator&gt;.greaterThan,HandleWrapperObjPtr&lt;mirror::String&gt; h(hs.NewHandleWrapper(&amp;s)))<SUB>2046</SUB>> ]
-"11459" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>2055</SUB>> ]
-"11473" [label = <(&lt;operator&gt;.assignment,length = s-&gt;GetLength())<SUB>2059</SUB>> ]
-"11480" [label = <(&lt;operator&gt;.assignment,* chars = new jchar[length])<SUB>2060</SUB>> ]
-"11505" [label = <(RETURN,return chars;,return chars;)<SUB>2064</SUB>> ]
-"11362" [label = <(UNLIKELY,UNLIKELY((java_string) == nullptr))<SUB>2040</SUB>> ]
-"11383" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>2042</SUB>> ]
-"11389" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2042</SUB>> ]
-"11392" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>2042</SUB>> ]
-"11401" [label = <(Runtime::Current,Runtime::Current())<SUB>2043</SUB>> ]
-"11405" [label = <(FIELD_IDENTIFIER,GetHeap,GetHeap)<SUB>2043</SUB>> ]
-"11410" [label = <(FIELD_IDENTIFIER,IsMovableObject,IsMovableObject)<SUB>2044</SUB>> ]
-"11414" [label = <(&lt;operator&gt;.lessThan,StackHandleScope&lt;1)<SUB>2045</SUB>> ]
-"11417" [label = <(hs,hs(soa.Self()))<SUB>2045</SUB>> ]
-"11423" [label = <(&lt;operator&gt;.lessThan,HandleWrapperObjPtr&lt;mirror::String)<SUB>2046</SUB>> ]
-"11428" [label = <(h,h(hs.NewHandleWrapper(&amp;s)))<SUB>2046</SUB>> ]
-"11436" [label = <(&lt;operator&gt;.logicalNot,!kUseReadBarrier)<SUB>2047</SUB>> ]
-"11461" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>2055</SUB>> ]
-"11464" [label = <(&lt;operator&gt;.notEquals,is_copy != nullptr)<SUB>2056</SUB>> ]
-"11475" [label = <(GetLength,s-&gt;GetLength())<SUB>2059</SUB>> ]
-"11482" [label = <(&lt;operator&gt;.new,new jchar[length])<SUB>2060</SUB>> ]
-"11490" [label = <(&lt;operator&gt;.lessThan,i &lt; length)<SUB>2061</SUB>> ]
-"11493" [label = <(&lt;operator&gt;.preIncrement,++i)<SUB>2061</SUB>> ]
-"11518" [label = <(RETURN,return static_cast&lt;jchar*&gt;(s-&gt;GetValue());,return static_cast&lt;jchar*&gt;(s-&gt;GetValue());)<SUB>2069</SUB>> ]
-"11363" [label = <(&lt;operator&gt;.equals,(java_string) == nullptr)<SUB>2040</SUB>> ]
-"11367" [label = <(CHECK_NON_NULL_ARGUMENT(java_string),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_string == null&quot;))<SUB>2040</SUB>> ]
-"11374" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_string),CHECK_NON_NULL_ARGUMENT(java_string))<SUB>2040</SUB>> ]
-"11385" [label = <(FIELD_IDENTIFIER,String,String)<SUB>2042</SUB>> ]
-"11391" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2042</SUB>> ]
-"11394" [label = <(FIELD_IDENTIFIER,String,String)<SUB>2042</SUB>> ]
-"11402" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>2043</SUB>> ]
-"11418" [label = <(Self,soa.Self())<SUB>2045</SUB>> ]
-"11425" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>2046</SUB>> ]
-"11429" [label = <(NewHandleWrapper,hs.NewHandleWrapper(&amp;s))<SUB>2046</SUB>> ]
-"11439" [label = <(IncrementDisableMovingGC,heap-&gt;IncrementDisableMovingGC(soa.Self()))<SUB>2048</SUB>> ]
-"11468" [label = <(&lt;operator&gt;.assignment,*is_copy = JNI_TRUE)<SUB>2057</SUB>> ]
-"11476" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetLength)<SUB>2059</SUB>> ]
-"11487" [label = <(&lt;operator&gt;.assignment,i = 0)<SUB>2061</SUB>> ]
-"11496" [label = <(&lt;operator&gt;.assignment,chars[i] = s-&gt;CharAt(i))<SUB>2062</SUB>> ]
-"11510" [label = <(&lt;operator&gt;.notEquals,is_copy != nullptr)<SUB>2066</SUB>> ]
-"11519" [label = <(&lt;operator&gt;.cast,static_cast&lt;jchar*&gt;(s-&gt;GetValue()))<SUB>2069</SUB>> ]
-"11368" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2040</SUB>> ]
-"11404" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>2043</SUB>> ]
-"11419" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>2045</SUB>> ]
-"11427" [label = <(FIELD_IDENTIFIER,String,String)<SUB>2046</SUB>> ]
-"11430" [label = <(&lt;operator&gt;.fieldAccess,hs.NewHandleWrapper)<SUB>2046</SUB>> ]
-"11433" [label = <(&lt;operator&gt;.addressOf,&amp;s)<SUB>2046</SUB>> ]
-"11440" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;IncrementDisableMovingGC)<SUB>2048</SUB>> ]
-"11443" [label = <(Self,soa.Self())<SUB>2048</SUB>> ]
-"11449" [label = <(IncrementDisableThreadFlip,heap-&gt;IncrementDisableThreadFlip(soa.Self()))<SUB>2052</SUB>> ]
-"11469" [label = <(&lt;operator&gt;.indirection,*is_copy)<SUB>2057</SUB>> ]
-"11478" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>2059</SUB>> ]
-"11497" [label = <(&lt;operator&gt;.indirectIndexAccess,chars[i])<SUB>2062</SUB>> ]
-"11500" [label = <(CharAt,s-&gt;CharAt(i))<SUB>2062</SUB>> ]
-"11514" [label = <(&lt;operator&gt;.assignment,*is_copy = JNI_FALSE)<SUB>2067</SUB>> ]
-"11520" [label = <(UNKNOWN,jchar*,jchar*)<SUB>2069</SUB>> ]
-"11521" [label = <(GetValue,s-&gt;GetValue())<SUB>2069</SUB>> ]
-"11369" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2040</SUB>> ]
-"11371" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2040</SUB>> ]
-"11421" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>2045</SUB>> ]
-"11432" [label = <(FIELD_IDENTIFIER,NewHandleWrapper,NewHandleWrapper)<SUB>2046</SUB>> ]
-"11442" [label = <(FIELD_IDENTIFIER,IncrementDisableMovingGC,IncrementDisableMovingGC)<SUB>2048</SUB>> ]
-"11444" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>2048</SUB>> ]
-"11450" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;IncrementDisableThreadFlip)<SUB>2052</SUB>> ]
-"11453" [label = <(Self,soa.Self())<SUB>2052</SUB>> ]
-"11501" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;CharAt)<SUB>2062</SUB>> ]
-"11515" [label = <(&lt;operator&gt;.indirection,*is_copy)<SUB>2067</SUB>> ]
-"11522" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetValue)<SUB>2069</SUB>> ]
-"11446" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>2048</SUB>> ]
-"11452" [label = <(FIELD_IDENTIFIER,IncrementDisableThreadFlip,IncrementDisableThreadFlip)<SUB>2052</SUB>> ]
-"11454" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>2052</SUB>> ]
-"11503" [label = <(FIELD_IDENTIFIER,CharAt,CharAt)<SUB>2062</SUB>> ]
-"11524" [label = <(FIELD_IDENTIFIER,GetValue,GetValue)<SUB>2069</SUB>> ]
-"11456" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>2052</SUB>> ]
-"11353" [label = <(METHOD,GetStringCritical)<SUB>2039</SUB>> ]
-"11525" [label = <(METHOD_RETURN,jchar)<SUB>2039</SUB>> ]
-  "11358" -> "11363" 
-  "11358" -> "11377" 
-  "11377" -> "11385" 
-  "11379" -> "11404" 
-  "11397" -> "11410" 
-  "11380" -> "11391" 
-  "11387" -> "11379" 
-  "11399" -> "11397" 
-  "11407" -> "11414" 
-  "11407" -> "11461" 
-  "11458" -> "11464" 
-  "11458" -> "11510" 
-  "11381" -> "11380" 
-  "11388" -> "11387" 
-  "11400" -> "11399" 
-  "11408" -> "11407" 
-  "11413" -> "11427" 
-  "11422" -> "11436" 
-  "11459" -> "11458" 
-  "11473" -> "11482" 
-  "11480" -> "11487" 
-  "11505" -> "11525" 
-  "11362" -> "11369" 
-  "11362" -> "11377" 
-  "11383" -> "11381" 
-  "11389" -> "11394" 
-  "11392" -> "11388" 
-  "11401" -> "11405" 
-  "11405" -> "11400" 
-  "11410" -> "11408" 
-  "11414" -> "11421" 
-  "11417" -> "11413" 
-  "11423" -> "11432" 
-  "11428" -> "11422" 
-  "11436" -> "11442" 
-  "11436" -> "11452" 
-  "11461" -> "11459" 
-  "11464" -> "11469" 
-  "11464" -> "11478" 
-  "11475" -> "11473" 
-  "11482" -> "11480" 
-  "11490" -> "11497" 
-  "11490" -> "11505" 
-  "11493" -> "11490" 
-  "11518" -> "11525" 
-  "11363" -> "11362" 
-  "11367" -> "11374" 
-  "11374" -> "11525" 
-  "11385" -> "11383" 
-  "11391" -> "11389" 
-  "11394" -> "11392" 
-  "11402" -> "11401" 
-  "11418" -> "11417" 
-  "11425" -> "11423" 
-  "11429" -> "11428" 
-  "11439" -> "11461" 
-  "11468" -> "11478" 
-  "11476" -> "11475" 
-  "11487" -> "11490" 
-  "11496" -> "11493" 
-  "11510" -> "11520" 
-  "11510" -> "11515" 
-  "11519" -> "11518" 
-  "11368" -> "11367" 
-  "11404" -> "11402" 
-  "11419" -> "11418" 
-  "11427" -> "11425" 
-  "11430" -> "11433" 
-  "11433" -> "11429" 
-  "11440" -> "11446" 
-  "11443" -> "11439" 
-  "11449" -> "11461" 
-  "11469" -> "11468" 
-  "11478" -> "11476" 
-  "11497" -> "11503" 
-  "11500" -> "11496" 
-  "11514" -> "11520" 
-  "11520" -> "11524" 
-  "11521" -> "11519" 
-  "11369" -> "11371" 
-  "11371" -> "11368" 
+digraph "GetArrayLength" {  
+"11394" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_array))<SUB>1990</SUB>> ]
+"11413" [label = <(soa,soa(env))<SUB>1991</SUB>> ]
+"11415" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; obj = soa.Decode&lt;mirror::Object&gt;(java_array))<SUB>1992</SUB>> ]
+"11458" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Array&gt; array = obj-&gt;AsArray())<SUB>1997</SUB>> ]
+"11470" [label = <(RETURN,return array-&gt;GetLength();,return array-&gt;GetLength();)<SUB>1998</SUB>> ]
+"11416" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; obj)<SUB>1992</SUB>> ]
+"11423" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(java_array))<SUB>1992</SUB>> ]
+"11433" [label = <(UNLIKELY,UNLIKELY(!obj-&gt;IsArrayInstance()))<SUB>1993</SUB>> ]
+"11459" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Array&gt; array)<SUB>1997</SUB>> ]
+"11466" [label = <(AsArray,obj-&gt;AsArray())<SUB>1997</SUB>> ]
+"11471" [label = <(GetLength,array-&gt;GetLength())<SUB>1998</SUB>> ]
+"11417" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>1992</SUB>> ]
+"11424" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>1992</SUB>> ]
+"11434" [label = <(&lt;operator&gt;.logicalNot,!obj-&gt;IsArrayInstance())<SUB>1993</SUB>> ]
+"11440" [label = <(JniAbortF,soa.Vm()-&gt;JniAbortF(&quot;GetArrayLength&quot;, &quot;not an array: %s&quot;, obj-&gt;PrettyTypeOf().c_str()))<SUB>1994</SUB>> ]
+"11456" [label = <(RETURN,return 0;,return 0;)<SUB>1995</SUB>> ]
+"11460" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Array)<SUB>1997</SUB>> ]
+"11467" [label = <(&lt;operator&gt;.indirectFieldAccess,obj-&gt;AsArray)<SUB>1997</SUB>> ]
+"11472" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetLength)<SUB>1998</SUB>> ]
+"11398" [label = <(UNLIKELY,UNLIKELY((java_array) == nullptr))<SUB>1990</SUB>> ]
+"11419" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1992</SUB>> ]
+"11425" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1992</SUB>> ]
+"11428" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1992</SUB>> ]
+"11435" [label = <(IsArrayInstance,obj-&gt;IsArrayInstance())<SUB>1993</SUB>> ]
+"11441" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Vm()-&gt;JniAbortF)<SUB>1994</SUB>> ]
+"11449" [label = <(c_str,obj-&gt;PrettyTypeOf().c_str())<SUB>1994</SUB>> ]
+"11462" [label = <(&lt;operator&gt;.fieldAccess,mirror::Array)<SUB>1997</SUB>> ]
+"11469" [label = <(FIELD_IDENTIFIER,AsArray,AsArray)<SUB>1997</SUB>> ]
+"11474" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>1998</SUB>> ]
+"11399" [label = <(&lt;operator&gt;.equals,(java_array) == nullptr)<SUB>1990</SUB>> ]
+"11403" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_array),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_array == null&quot;))<SUB>1990</SUB>> ]
+"11410" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_array),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_array))<SUB>1990</SUB>> ]
+"11421" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1992</SUB>> ]
+"11427" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1992</SUB>> ]
+"11430" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1992</SUB>> ]
+"11436" [label = <(&lt;operator&gt;.indirectFieldAccess,obj-&gt;IsArrayInstance)<SUB>1993</SUB>> ]
+"11442" [label = <(Vm,soa.Vm())<SUB>1994</SUB>> ]
+"11446" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1994</SUB>> ]
+"11450" [label = <(&lt;operator&gt;.fieldAccess,obj-&gt;PrettyTypeOf().c_str)<SUB>1994</SUB>> ]
+"11464" [label = <(FIELD_IDENTIFIER,Array,Array)<SUB>1997</SUB>> ]
+"11404" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1990</SUB>> ]
+"11438" [label = <(FIELD_IDENTIFIER,IsArrayInstance,IsArrayInstance)<SUB>1993</SUB>> ]
+"11443" [label = <(&lt;operator&gt;.fieldAccess,soa.Vm)<SUB>1994</SUB>> ]
+"11451" [label = <(PrettyTypeOf,obj-&gt;PrettyTypeOf())<SUB>1994</SUB>> ]
+"11455" [label = <(FIELD_IDENTIFIER,c_str,c_str)<SUB>1994</SUB>> ]
+"11405" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1990</SUB>> ]
+"11407" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1990</SUB>> ]
+"11445" [label = <(FIELD_IDENTIFIER,Vm,Vm)<SUB>1994</SUB>> ]
+"11452" [label = <(&lt;operator&gt;.indirectFieldAccess,obj-&gt;PrettyTypeOf)<SUB>1994</SUB>> ]
+"11454" [label = <(FIELD_IDENTIFIER,PrettyTypeOf,PrettyTypeOf)<SUB>1994</SUB>> ]
+"11390" [label = <(METHOD,GetArrayLength)<SUB>1989</SUB>> ]
+"11475" [label = <(METHOD_RETURN,jsize)<SUB>1989</SUB>> ]
+  "11394" -> "11399" 
+  "11394" -> "11413" 
+  "11413" -> "11421" 
+  "11415" -> "11438" 
+  "11458" -> "11474" 
+  "11470" -> "11475" 
+  "11416" -> "11427" 
+  "11423" -> "11415" 
+  "11433" -> "11445" 
+  "11433" -> "11464" 
+  "11459" -> "11469" 
+  "11466" -> "11458" 
+  "11471" -> "11470" 
+  "11417" -> "11416" 
+  "11424" -> "11423" 
+  "11434" -> "11433" 
+  "11440" -> "11456" 
+  "11456" -> "11475" 
+  "11460" -> "11459" 
+  "11467" -> "11466" 
+  "11472" -> "11471" 
+  "11398" -> "11405" 
+  "11398" -> "11413" 
+  "11419" -> "11417" 
+  "11425" -> "11430" 
+  "11428" -> "11424" 
+  "11435" -> "11434" 
+  "11441" -> "11454" 
+  "11449" -> "11440" 
+  "11462" -> "11460" 
+  "11469" -> "11467" 
+  "11474" -> "11472" 
+  "11399" -> "11398" 
+  "11403" -> "11410" 
+  "11410" -> "11475" 
   "11421" -> "11419" 
-  "11432" -> "11430" 
-  "11442" -> "11440" 
-  "11444" -> "11443" 
-  "11450" -> "11456" 
-  "11453" -> "11449" 
-  "11501" -> "11500" 
-  "11515" -> "11514" 
-  "11522" -> "11521" 
-  "11446" -> "11444" 
-  "11452" -> "11450" 
-  "11454" -> "11453" 
-  "11503" -> "11501" 
-  "11524" -> "11522" 
-  "11456" -> "11454" 
-  "11353" -> "11358" 
+  "11427" -> "11425" 
+  "11430" -> "11428" 
+  "11436" -> "11435" 
+  "11442" -> "11446" 
+  "11446" -> "11441" 
+  "11450" -> "11449" 
+  "11464" -> "11462" 
+  "11404" -> "11403" 
+  "11438" -> "11436" 
+  "11443" -> "11442" 
+  "11451" -> "11455" 
+  "11455" -> "11450" 
+  "11405" -> "11407" 
+  "11407" -> "11404" 
+  "11445" -> "11443" 
+  "11452" -> "11451" 
+  "11454" -> "11452" 
+  "11390" -> "11394" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/198-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/198-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/198-cfg.dot	2023-06-07 19:35:01.527387160 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/198-cfg.dot	2023-06-07 19:35:08.057386514 +0330
@@ -1,126 +1,75 @@
-digraph "ReleaseStringCritical" {  
-"11532" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string))<SUB>2076</SUB>> ]
-"11550" [label = <(soa,soa(env))<SUB>2077</SUB>> ]
-"11553" [label = <(&lt;operator&gt;.assignment,* heap = Runtime::Current()-&gt;GetHeap())<SUB>2078</SUB>> ]
-"11562" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::String&gt; s = soa.Decode&lt;mirror::String&gt;(java_string))<SUB>2079</SUB>> ]
-"11555" [label = <(GetHeap,Runtime::Current()-&gt;GetHeap())<SUB>2078</SUB>> ]
-"11563" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::String&gt; s)<SUB>2079</SUB>> ]
-"11570" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::String&gt;(java_string))<SUB>2079</SUB>> ]
-"11580" [label = <(IsMovableObject,heap-&gt;IsMovableObject(s))<SUB>2080</SUB>> ]
-"11609" [label = <(&lt;operator&gt;.logicalOr,s-&gt;IsCompressed() || (s-&gt;IsCompressed() == false &amp;&amp; s-&gt;GetValue() != chars))<SUB>2087</SUB>> ]
-"11556" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetHeap)<SUB>2078</SUB>> ]
-"11564" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::String)<SUB>2079</SUB>> ]
-"11571" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::String)<SUB>2079</SUB>> ]
-"11581" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;IsMovableObject)<SUB>2080</SUB>> ]
-"11610" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>2087</SUB>> ]
-"11614" [label = <(&lt;operator&gt;.logicalAnd,s-&gt;IsCompressed() == false &amp;&amp; s-&gt;GetValue() != chars)<SUB>2087</SUB>> ]
-"11628" [label = <(&lt;operator&gt;.delete,delete[] chars)<SUB>2088</SUB>> ]
-"11536" [label = <(UNLIKELY,UNLIKELY((java_string) == nullptr))<SUB>2076</SUB>> ]
-"11557" [label = <(Runtime::Current,Runtime::Current())<SUB>2078</SUB>> ]
-"11561" [label = <(FIELD_IDENTIFIER,GetHeap,GetHeap)<SUB>2078</SUB>> ]
-"11566" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>2079</SUB>> ]
-"11572" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2079</SUB>> ]
-"11575" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>2079</SUB>> ]
-"11583" [label = <(FIELD_IDENTIFIER,IsMovableObject,IsMovableObject)<SUB>2080</SUB>> ]
-"11587" [label = <(&lt;operator&gt;.logicalNot,!kUseReadBarrier)<SUB>2081</SUB>> ]
-"11611" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>2087</SUB>> ]
-"11615" [label = <(&lt;operator&gt;.equals,s-&gt;IsCompressed() == false)<SUB>2087</SUB>> ]
-"11621" [label = <(&lt;operator&gt;.notEquals,s-&gt;GetValue() != chars)<SUB>2087</SUB>> ]
-"11537" [label = <(&lt;operator&gt;.equals,(java_string) == nullptr)<SUB>2076</SUB>> ]
-"11541" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_string == null&quot;))<SUB>2076</SUB>> ]
-"11548" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string))<SUB>2076</SUB>> ]
-"11558" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>2078</SUB>> ]
-"11568" [label = <(FIELD_IDENTIFIER,String,String)<SUB>2079</SUB>> ]
-"11574" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2079</SUB>> ]
-"11577" [label = <(FIELD_IDENTIFIER,String,String)<SUB>2079</SUB>> ]
-"11590" [label = <(DecrementDisableMovingGC,heap-&gt;DecrementDisableMovingGC(soa.Self()))<SUB>2082</SUB>> ]
-"11613" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>2087</SUB>> ]
-"11616" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>2087</SUB>> ]
-"11622" [label = <(GetValue,s-&gt;GetValue())<SUB>2087</SUB>> ]
-"11542" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2076</SUB>> ]
-"11560" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>2078</SUB>> ]
-"11591" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;DecrementDisableMovingGC)<SUB>2082</SUB>> ]
-"11594" [label = <(Self,soa.Self())<SUB>2082</SUB>> ]
-"11600" [label = <(DecrementDisableThreadFlip,heap-&gt;DecrementDisableThreadFlip(soa.Self()))<SUB>2084</SUB>> ]
-"11617" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>2087</SUB>> ]
-"11623" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetValue)<SUB>2087</SUB>> ]
-"11543" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2076</SUB>> ]
-"11545" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2076</SUB>> ]
-"11593" [label = <(FIELD_IDENTIFIER,DecrementDisableMovingGC,DecrementDisableMovingGC)<SUB>2082</SUB>> ]
-"11595" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>2082</SUB>> ]
-"11601" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;DecrementDisableThreadFlip)<SUB>2084</SUB>> ]
-"11604" [label = <(Self,soa.Self())<SUB>2084</SUB>> ]
-"11619" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>2087</SUB>> ]
-"11625" [label = <(FIELD_IDENTIFIER,GetValue,GetValue)<SUB>2087</SUB>> ]
-"11597" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>2082</SUB>> ]
-"11603" [label = <(FIELD_IDENTIFIER,DecrementDisableThreadFlip,DecrementDisableThreadFlip)<SUB>2084</SUB>> ]
-"11605" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>2084</SUB>> ]
-"11607" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>2084</SUB>> ]
-"11527" [label = <(METHOD,ReleaseStringCritical)<SUB>2073</SUB>> ]
-"11630" [label = <(METHOD_RETURN,void)<SUB>2073</SUB>> ]
-  "11532" -> "11537" 
-  "11532" -> "11550" 
-  "11550" -> "11560" 
-  "11553" -> "11568" 
-  "11562" -> "11583" 
-  "11555" -> "11553" 
-  "11563" -> "11574" 
-  "11570" -> "11562" 
-  "11580" -> "11587" 
-  "11580" -> "11613" 
-  "11609" -> "11630" 
-  "11609" -> "11628" 
-  "11556" -> "11555" 
-  "11564" -> "11563" 
-  "11571" -> "11570" 
-  "11581" -> "11580" 
-  "11610" -> "11609" 
-  "11610" -> "11619" 
-  "11614" -> "11609" 
-  "11628" -> "11630" 
-  "11536" -> "11543" 
-  "11536" -> "11550" 
-  "11557" -> "11561" 
-  "11561" -> "11556" 
-  "11566" -> "11564" 
-  "11572" -> "11577" 
-  "11575" -> "11571" 
-  "11583" -> "11581" 
-  "11587" -> "11593" 
-  "11587" -> "11603" 
-  "11611" -> "11610" 
-  "11615" -> "11614" 
-  "11615" -> "11625" 
-  "11621" -> "11614" 
-  "11537" -> "11536" 
-  "11541" -> "11548" 
-  "11548" -> "11630" 
-  "11558" -> "11557" 
-  "11568" -> "11566" 
-  "11574" -> "11572" 
-  "11577" -> "11575" 
-  "11590" -> "11613" 
-  "11613" -> "11611" 
-  "11616" -> "11615" 
-  "11622" -> "11621" 
-  "11542" -> "11541" 
-  "11560" -> "11558" 
-  "11591" -> "11597" 
-  "11594" -> "11590" 
-  "11600" -> "11613" 
-  "11617" -> "11616" 
-  "11623" -> "11622" 
-  "11543" -> "11545" 
-  "11545" -> "11542" 
-  "11593" -> "11591" 
-  "11595" -> "11594" 
-  "11601" -> "11607" 
-  "11604" -> "11600" 
-  "11619" -> "11617" 
-  "11625" -> "11623" 
-  "11597" -> "11595" 
-  "11603" -> "11601" 
-  "11605" -> "11604" 
-  "11607" -> "11605" 
-  "11527" -> "11532" 
+digraph "GetObjectArrayElement" {  
+"11482" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_array))<SUB>2002</SUB>> ]
+"11501" [label = <(soa,soa(env))<SUB>2003</SUB>> ]
+"11503" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::ObjectArray&lt;mirror::Object&gt;&gt; array =\012        soa.Decode&lt;mirror::ObjectArray&lt;mirror::Object&gt;&gt;(java_array))<SUB>2004</SUB>> ]
+"11528" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(array-&gt;Get(index));,return soa.AddLocalReference&lt;jobject&gt;(array-&gt;Get(index));)<SUB>2006</SUB>> ]
+"11504" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::ObjectArray&lt;mirror::Object&gt;&gt; array)<SUB>2004</SUB>> ]
+"11515" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::ObjectArray&lt;mirror::Object&gt;&gt;(java_array))<SUB>2005</SUB>> ]
+"11529" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(array-&gt;Get(index)))<SUB>2006</SUB>> ]
+"11505" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::ObjectArray)<SUB>2004</SUB>> ]
+"11510" [label = <(&lt;operator&gt;.arithmeticShiftRight,mirror::Object&gt;&gt; array)<SUB>2004</SUB>> ]
+"11516" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::ObjectArray)<SUB>2005</SUB>> ]
+"11523" [label = <(&lt;operator&gt;.arithmeticShiftRight,mirror::Object&gt;&gt;(java_array))<SUB>2005</SUB>> ]
+"11530" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>2006</SUB>> ]
+"11535" [label = <(Get,array-&gt;Get(index))<SUB>2006</SUB>> ]
+"11486" [label = <(UNLIKELY,UNLIKELY((java_array) == nullptr))<SUB>2002</SUB>> ]
+"11507" [label = <(&lt;operator&gt;.fieldAccess,mirror::ObjectArray)<SUB>2004</SUB>> ]
+"11511" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2004</SUB>> ]
+"11517" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2005</SUB>> ]
+"11520" [label = <(&lt;operator&gt;.fieldAccess,mirror::ObjectArray)<SUB>2005</SUB>> ]
+"11524" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2005</SUB>> ]
+"11531" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>2006</SUB>> ]
+"11536" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;Get)<SUB>2006</SUB>> ]
+"11487" [label = <(&lt;operator&gt;.equals,(java_array) == nullptr)<SUB>2002</SUB>> ]
+"11491" [label = <(CHECK_NON_NULL_ARGUMENT(java_array),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_array == null&quot;))<SUB>2002</SUB>> ]
+"11498" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_array),CHECK_NON_NULL_ARGUMENT(java_array))<SUB>2002</SUB>> ]
+"11509" [label = <(FIELD_IDENTIFIER,ObjectArray,ObjectArray)<SUB>2004</SUB>> ]
+"11513" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2004</SUB>> ]
+"11519" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2005</SUB>> ]
+"11522" [label = <(FIELD_IDENTIFIER,ObjectArray,ObjectArray)<SUB>2005</SUB>> ]
+"11526" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2005</SUB>> ]
+"11533" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>2006</SUB>> ]
+"11538" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>2006</SUB>> ]
+"11492" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2002</SUB>> ]
+"11493" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2002</SUB>> ]
+"11495" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2002</SUB>> ]
+"11477" [label = <(METHOD,GetObjectArrayElement)<SUB>2001</SUB>> ]
+"11540" [label = <(METHOD_RETURN,jobject)<SUB>2001</SUB>> ]
+  "11482" -> "11487" 
+  "11482" -> "11501" 
+  "11501" -> "11509" 
+  "11503" -> "11533" 
+  "11528" -> "11540" 
+  "11504" -> "11519" 
+  "11515" -> "11503" 
+  "11529" -> "11528" 
+  "11505" -> "11513" 
+  "11510" -> "11504" 
+  "11516" -> "11526" 
+  "11523" -> "11515" 
+  "11530" -> "11538" 
+  "11535" -> "11529" 
+  "11486" -> "11493" 
+  "11486" -> "11501" 
+  "11507" -> "11505" 
+  "11511" -> "11510" 
+  "11517" -> "11522" 
+  "11520" -> "11516" 
+  "11524" -> "11523" 
+  "11531" -> "11530" 
+  "11536" -> "11535" 
+  "11487" -> "11486" 
+  "11491" -> "11498" 
+  "11498" -> "11540" 
+  "11509" -> "11507" 
+  "11513" -> "11511" 
+  "11519" -> "11517" 
+  "11522" -> "11520" 
+  "11526" -> "11524" 
+  "11533" -> "11531" 
+  "11538" -> "11536" 
+  "11492" -> "11491" 
+  "11493" -> "11495" 
+  "11495" -> "11492" 
+  "11477" -> "11482" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/199-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/199-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/199-cfg.dot	2023-06-07 19:35:01.527387160 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/199-cfg.dot	2023-06-07 19:35:08.057386514 +0330
@@ -1,103 +1,93 @@
-digraph "GetStringUTFChars" {  
-"11654" [label = <(soa,soa(env))<SUB>2099</SUB>> ]
-"11656" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::String&gt; s = soa.Decode&lt;mirror::String&gt;(java_string))<SUB>2100</SUB>> ]
-"11674" [label = <(&lt;operator&gt;.assignment,byte_count = s-&gt;GetUtfLength())<SUB>2101</SUB>> ]
-"11681" [label = <(&lt;operator&gt;.assignment,* bytes = new char[byte_count + 1])<SUB>2102</SUB>> ]
-"11685" [label = <(CHECK,CHECK(bytes != nullptr))<SUB>2103</SUB>> ]
-"11733" [label = <(&lt;operator&gt;.assignment,bytes[byte_count] = '\0')<SUB>2112</SUB>> ]
-"11738" [label = <(RETURN,return bytes;,return bytes;)<SUB>2113</SUB>> ]
-"11638" [label = <(&lt;operator&gt;.equals,java_string == nullptr)<SUB>2093</SUB>> ]
-"11645" [label = <(&lt;operator&gt;.notEquals,is_copy != nullptr)<SUB>2096</SUB>> ]
-"11657" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::String&gt; s)<SUB>2100</SUB>> ]
-"11664" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::String&gt;(java_string))<SUB>2100</SUB>> ]
-"11676" [label = <(GetUtfLength,s-&gt;GetUtfLength())<SUB>2101</SUB>> ]
-"11683" [label = <(&lt;operator&gt;.new,new char[byte_count + 1])<SUB>2102</SUB>> ]
-"11686" [label = <(&lt;operator&gt;.notEquals,bytes != nullptr)<SUB>2103</SUB>> ]
-"11690" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>2104</SUB>> ]
-"11734" [label = <(&lt;operator&gt;.indirectIndexAccess,bytes[byte_count])<SUB>2112</SUB>> ]
-"11642" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2094</SUB>> ]
-"11649" [label = <(&lt;operator&gt;.assignment,*is_copy = JNI_TRUE)<SUB>2097</SUB>> ]
-"11658" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::String)<SUB>2100</SUB>> ]
-"11665" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::String)<SUB>2100</SUB>> ]
-"11677" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetUtfLength)<SUB>2101</SUB>> ]
-"11691" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>2104</SUB>> ]
-"11650" [label = <(&lt;operator&gt;.indirection,*is_copy)<SUB>2097</SUB>> ]
-"11660" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>2100</SUB>> ]
-"11666" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2100</SUB>> ]
-"11669" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>2100</SUB>> ]
-"11679" [label = <(FIELD_IDENTIFIER,GetUtfLength,GetUtfLength)<SUB>2101</SUB>> ]
-"11693" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>2104</SUB>> ]
-"11701" [label = <(&lt;operator&gt;.lessThan,i &lt; byte_count)<SUB>2105</SUB>> ]
-"11704" [label = <(&lt;operator&gt;.preIncrement,++i)<SUB>2105</SUB>> ]
-"11719" [label = <(&lt;operator&gt;.assignment,* chars = s-&gt;GetValue())<SUB>2109</SUB>> ]
-"11725" [label = <(ConvertUtf16ToModifiedUtf8,ConvertUtf16ToModifiedUtf8(bytes, byte_count, chars, s-&gt;GetLength()))<SUB>2110</SUB>> ]
-"11662" [label = <(FIELD_IDENTIFIER,String,String)<SUB>2100</SUB>> ]
-"11668" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2100</SUB>> ]
-"11671" [label = <(FIELD_IDENTIFIER,String,String)<SUB>2100</SUB>> ]
-"11698" [label = <(&lt;operator&gt;.assignment,i = 0)<SUB>2105</SUB>> ]
-"11707" [label = <(&lt;operator&gt;.assignment,bytes[i] = s-&gt;CharAt(i))<SUB>2106</SUB>> ]
-"11721" [label = <(GetValue,s-&gt;GetValue())<SUB>2109</SUB>> ]
-"11729" [label = <(GetLength,s-&gt;GetLength())<SUB>2110</SUB>> ]
-"11708" [label = <(&lt;operator&gt;.indirectIndexAccess,bytes[i])<SUB>2106</SUB>> ]
-"11711" [label = <(CharAt,s-&gt;CharAt(i))<SUB>2106</SUB>> ]
-"11722" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetValue)<SUB>2109</SUB>> ]
-"11730" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetLength)<SUB>2110</SUB>> ]
-"11712" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;CharAt)<SUB>2106</SUB>> ]
-"11724" [label = <(FIELD_IDENTIFIER,GetValue,GetValue)<SUB>2109</SUB>> ]
-"11732" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>2110</SUB>> ]
-"11714" [label = <(FIELD_IDENTIFIER,CharAt,CharAt)<SUB>2106</SUB>> ]
-"11632" [label = <(METHOD,GetStringUTFChars)<SUB>2092</SUB>> ]
-"11740" [label = <(METHOD_RETURN,const char*)<SUB>2092</SUB>> ]
-  "11654" -> "11662" 
-  "11656" -> "11679" 
-  "11674" -> "11683" 
-  "11681" -> "11686" 
-  "11685" -> "11693" 
-  "11733" -> "11738" 
-  "11738" -> "11740" 
-  "11638" -> "11642" 
-  "11638" -> "11645" 
-  "11645" -> "11650" 
-  "11645" -> "11654" 
-  "11657" -> "11668" 
-  "11664" -> "11656" 
-  "11676" -> "11674" 
-  "11683" -> "11681" 
-  "11686" -> "11685" 
-  "11690" -> "11698" 
-  "11690" -> "11724" 
-  "11734" -> "11733" 
-  "11642" -> "11740" 
-  "11649" -> "11654" 
-  "11658" -> "11657" 
-  "11665" -> "11664" 
-  "11677" -> "11676" 
-  "11691" -> "11690" 
-  "11650" -> "11649" 
-  "11660" -> "11658" 
-  "11666" -> "11671" 
-  "11669" -> "11665" 
-  "11679" -> "11677" 
-  "11693" -> "11691" 
-  "11701" -> "11708" 
-  "11701" -> "11734" 
-  "11704" -> "11701" 
-  "11719" -> "11732" 
-  "11725" -> "11734" 
-  "11662" -> "11660" 
-  "11668" -> "11666" 
-  "11671" -> "11669" 
-  "11698" -> "11701" 
-  "11707" -> "11704" 
-  "11721" -> "11719" 
-  "11729" -> "11725" 
-  "11708" -> "11714" 
-  "11711" -> "11707" 
-  "11722" -> "11721" 
-  "11730" -> "11729" 
-  "11712" -> "11711" 
-  "11724" -> "11722" 
-  "11732" -> "11730" 
-  "11714" -> "11712" 
-  "11632" -> "11638" 
+digraph "SetObjectArrayElement" {  
+"11548" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>2011</SUB>> ]
+"11566" [label = <(soa,soa(env))<SUB>2012</SUB>> ]
+"11568" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::ObjectArray&lt;mirror::Object&gt;&gt; array =\012        soa.Decode&lt;mirror::ObjectArray&lt;mirror::Object&gt;&gt;(java_array))<SUB>2013</SUB>> ]
+"11593" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; value = soa.Decode&lt;mirror::Object&gt;(java_value))<SUB>2015</SUB>> ]
+"11610" [label = <(&lt;operator&gt;.greaterThan,array-&gt;Set&lt;false&gt;(index, value))<SUB>2016</SUB>> ]
+"11569" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::ObjectArray&lt;mirror::Object&gt;&gt; array)<SUB>2013</SUB>> ]
+"11580" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::ObjectArray&lt;mirror::Object&gt;&gt;(java_array))<SUB>2014</SUB>> ]
+"11594" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; value)<SUB>2015</SUB>> ]
+"11601" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(java_value))<SUB>2015</SUB>> ]
+"11611" [label = <(&lt;operator&gt;.lessThan,array-&gt;Set&lt;false)<SUB>2016</SUB>> ]
+"11616" [label = <(&lt;operator&gt;.bracketedPrimary,(index, value))<SUB>2016</SUB>> ]
+"11570" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::ObjectArray)<SUB>2013</SUB>> ]
+"11575" [label = <(&lt;operator&gt;.arithmeticShiftRight,mirror::Object&gt;&gt; array)<SUB>2013</SUB>> ]
+"11581" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::ObjectArray)<SUB>2014</SUB>> ]
+"11588" [label = <(&lt;operator&gt;.arithmeticShiftRight,mirror::Object&gt;&gt;(java_array))<SUB>2014</SUB>> ]
+"11595" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>2015</SUB>> ]
+"11602" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>2015</SUB>> ]
+"11612" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;Set)<SUB>2016</SUB>> ]
+"11617" [label = <(&lt;operator&gt;.expressionList,index, value)<SUB>2016</SUB>> ]
+"11552" [label = <(UNLIKELY,UNLIKELY((java_array) == nullptr))<SUB>2011</SUB>> ]
+"11572" [label = <(&lt;operator&gt;.fieldAccess,mirror::ObjectArray)<SUB>2013</SUB>> ]
+"11576" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2013</SUB>> ]
+"11582" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2014</SUB>> ]
+"11585" [label = <(&lt;operator&gt;.fieldAccess,mirror::ObjectArray)<SUB>2014</SUB>> ]
+"11589" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2014</SUB>> ]
+"11597" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2015</SUB>> ]
+"11603" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2015</SUB>> ]
+"11606" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2015</SUB>> ]
+"11614" [label = <(FIELD_IDENTIFIER,Set,Set)<SUB>2016</SUB>> ]
+"11553" [label = <(&lt;operator&gt;.equals,(java_array) == nullptr)<SUB>2011</SUB>> ]
+"11557" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_array == null&quot;))<SUB>2011</SUB>> ]
+"11564" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>2011</SUB>> ]
+"11574" [label = <(FIELD_IDENTIFIER,ObjectArray,ObjectArray)<SUB>2013</SUB>> ]
+"11578" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2013</SUB>> ]
+"11584" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2014</SUB>> ]
+"11587" [label = <(FIELD_IDENTIFIER,ObjectArray,ObjectArray)<SUB>2014</SUB>> ]
+"11591" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2014</SUB>> ]
+"11599" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2015</SUB>> ]
+"11605" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2015</SUB>> ]
+"11608" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2015</SUB>> ]
+"11558" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2011</SUB>> ]
+"11559" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2011</SUB>> ]
+"11561" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2011</SUB>> ]
+"11542" [label = <(METHOD,SetObjectArrayElement)<SUB>2009</SUB>> ]
+"11620" [label = <(METHOD_RETURN,void)<SUB>2009</SUB>> ]
+  "11548" -> "11553" 
+  "11548" -> "11566" 
+  "11566" -> "11574" 
+  "11568" -> "11599" 
+  "11593" -> "11614" 
+  "11610" -> "11620" 
+  "11569" -> "11584" 
+  "11580" -> "11568" 
+  "11594" -> "11605" 
+  "11601" -> "11593" 
+  "11611" -> "11617" 
+  "11616" -> "11610" 
+  "11570" -> "11578" 
+  "11575" -> "11569" 
+  "11581" -> "11591" 
+  "11588" -> "11580" 
+  "11595" -> "11594" 
+  "11602" -> "11601" 
+  "11612" -> "11611" 
+  "11617" -> "11616" 
+  "11552" -> "11559" 
+  "11552" -> "11566" 
+  "11572" -> "11570" 
+  "11576" -> "11575" 
+  "11582" -> "11587" 
+  "11585" -> "11581" 
+  "11589" -> "11588" 
+  "11597" -> "11595" 
+  "11603" -> "11608" 
+  "11606" -> "11602" 
+  "11614" -> "11612" 
+  "11553" -> "11552" 
+  "11557" -> "11564" 
+  "11564" -> "11620" 
+  "11574" -> "11572" 
+  "11578" -> "11576" 
+  "11584" -> "11582" 
+  "11587" -> "11585" 
+  "11591" -> "11589" 
+  "11599" -> "11597" 
+  "11605" -> "11603" 
+  "11608" -> "11606" 
+  "11558" -> "11557" 
+  "11559" -> "11561" 
+  "11561" -> "11558" 
+  "11542" -> "11548" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/2-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/2-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/2-cfg.dot	2023-06-07 19:35:01.197387190 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/2-cfg.dot	2023-06-07 19:35:07.897386528 +0330
@@ -1,5 +1,5 @@
-digraph "anonymous_lambda_10" {  
-"15" [label = <(METHOD,anonymous_lambda_10)<SUB>1935</SUB>> ]
-"17" [label = <(METHOD_RETURN,ANY)<SUB>1935</SUB>> ]
-  "15" -> "17" 
+digraph "ScopedVAArgs" {  
+"14" [label = <(METHOD,ScopedVAArgs)<SUB>71</SUB>> ]
+"17" [label = <(METHOD_RETURN,ANY)<SUB>71</SUB>> ]
+  "14" -> "17" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/20-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/20-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/20-cfg.dot	2023-06-07 19:35:01.337387177 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/20-cfg.dot	2023-06-07 19:35:07.917386527 +0330
@@ -1,5 +1,5 @@
-digraph "EnsureInitialized" {  
-"454" [label = <(METHOD,EnsureInitialized)<SUB>379</SUB>> ]
-"458" [label = <(METHOD_RETURN,ANY)<SUB>379</SUB>> ]
-  "454" -> "458" 
+digraph "ThrowNewException" {  
+"708" [label = <(METHOD,ThrowNewException)<SUB>397</SUB>> ]
+"714" [label = <(METHOD_RETURN,int)<SUB>397</SUB>> ]
+  "708" -> "714" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/200-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/200-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/200-cfg.dot	2023-06-07 19:35:01.527387160 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/200-cfg.dot	2023-06-07 19:35:08.067386512 +0330
@@ -1,7 +1,9 @@
-digraph "ReleaseStringUTFChars" {  
-"11747" [label = <(&lt;operator&gt;.delete,delete[] chars)<SUB>2117</SUB>> ]
-"11742" [label = <(METHOD,ReleaseStringUTFChars)<SUB>2116</SUB>> ]
-"11749" [label = <(METHOD_RETURN,void)<SUB>2116</SUB>> ]
-  "11747" -> "11749" 
-  "11742" -> "11747" 
+digraph "NewBooleanArray" {  
+"11626" [label = <(RETURN,return NewPrimitiveArray&lt;jbooleanArray, mirror::BooleanArray&gt;(env, length);,return NewPrimitiveArray&lt;jbooleanArray, mirror::BooleanArray&gt;(env, length);)<SUB>2020</SUB>> ]
+"11627" [label = <(NewPrimitiveArray&lt;jbooleanArray,mirror::BooleanArray&gt;,NewPrimitiveArray&lt;jbooleanArray, mirror::BooleanArray&gt;(env, length))<SUB>2020</SUB>> ]
+"11622" [label = <(METHOD,NewBooleanArray)<SUB>2019</SUB>> ]
+"11630" [label = <(METHOD_RETURN,jbooleanArray)<SUB>2019</SUB>> ]
+  "11626" -> "11630" 
+  "11627" -> "11626" 
+  "11622" -> "11627" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/201-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/201-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/201-cfg.dot	2023-06-07 19:35:01.527387160 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/201-cfg.dot	2023-06-07 19:35:08.067386512 +0330
@@ -1,108 +1,9 @@
-digraph "GetArrayLength" {  
-"11755" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_array))<SUB>2121</SUB>> ]
-"11774" [label = <(soa,soa(env))<SUB>2122</SUB>> ]
-"11776" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; obj = soa.Decode&lt;mirror::Object&gt;(java_array))<SUB>2123</SUB>> ]
-"11819" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Array&gt; array = obj-&gt;AsArray())<SUB>2128</SUB>> ]
-"11831" [label = <(RETURN,return array-&gt;GetLength();,return array-&gt;GetLength();)<SUB>2129</SUB>> ]
-"11777" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; obj)<SUB>2123</SUB>> ]
-"11784" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(java_array))<SUB>2123</SUB>> ]
-"11794" [label = <(UNLIKELY,UNLIKELY(!obj-&gt;IsArrayInstance()))<SUB>2124</SUB>> ]
-"11820" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Array&gt; array)<SUB>2128</SUB>> ]
-"11827" [label = <(AsArray,obj-&gt;AsArray())<SUB>2128</SUB>> ]
-"11832" [label = <(GetLength,array-&gt;GetLength())<SUB>2129</SUB>> ]
-"11778" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>2123</SUB>> ]
-"11785" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>2123</SUB>> ]
-"11795" [label = <(&lt;operator&gt;.logicalNot,!obj-&gt;IsArrayInstance())<SUB>2124</SUB>> ]
-"11801" [label = <(JniAbortF,soa.Vm()-&gt;JniAbortF(&quot;GetArrayLength&quot;, &quot;not an array: %s&quot;, obj-&gt;PrettyTypeOf().c_str()))<SUB>2125</SUB>> ]
-"11817" [label = <(RETURN,return 0;,return 0;)<SUB>2126</SUB>> ]
-"11821" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Array)<SUB>2128</SUB>> ]
-"11828" [label = <(&lt;operator&gt;.indirectFieldAccess,obj-&gt;AsArray)<SUB>2128</SUB>> ]
-"11833" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetLength)<SUB>2129</SUB>> ]
-"11759" [label = <(UNLIKELY,UNLIKELY((java_array) == nullptr))<SUB>2121</SUB>> ]
-"11780" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2123</SUB>> ]
-"11786" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2123</SUB>> ]
-"11789" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2123</SUB>> ]
-"11796" [label = <(IsArrayInstance,obj-&gt;IsArrayInstance())<SUB>2124</SUB>> ]
-"11802" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Vm()-&gt;JniAbortF)<SUB>2125</SUB>> ]
-"11810" [label = <(c_str,obj-&gt;PrettyTypeOf().c_str())<SUB>2125</SUB>> ]
-"11823" [label = <(&lt;operator&gt;.fieldAccess,mirror::Array)<SUB>2128</SUB>> ]
-"11830" [label = <(FIELD_IDENTIFIER,AsArray,AsArray)<SUB>2128</SUB>> ]
-"11835" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>2129</SUB>> ]
-"11760" [label = <(&lt;operator&gt;.equals,(java_array) == nullptr)<SUB>2121</SUB>> ]
-"11764" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_array),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_array == null&quot;))<SUB>2121</SUB>> ]
-"11771" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_array),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_array))<SUB>2121</SUB>> ]
-"11782" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2123</SUB>> ]
-"11788" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2123</SUB>> ]
-"11791" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2123</SUB>> ]
-"11797" [label = <(&lt;operator&gt;.indirectFieldAccess,obj-&gt;IsArrayInstance)<SUB>2124</SUB>> ]
-"11803" [label = <(Vm,soa.Vm())<SUB>2125</SUB>> ]
-"11807" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2125</SUB>> ]
-"11811" [label = <(&lt;operator&gt;.fieldAccess,obj-&gt;PrettyTypeOf().c_str)<SUB>2125</SUB>> ]
-"11825" [label = <(FIELD_IDENTIFIER,Array,Array)<SUB>2128</SUB>> ]
-"11765" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2121</SUB>> ]
-"11799" [label = <(FIELD_IDENTIFIER,IsArrayInstance,IsArrayInstance)<SUB>2124</SUB>> ]
-"11804" [label = <(&lt;operator&gt;.fieldAccess,soa.Vm)<SUB>2125</SUB>> ]
-"11812" [label = <(PrettyTypeOf,obj-&gt;PrettyTypeOf())<SUB>2125</SUB>> ]
-"11816" [label = <(FIELD_IDENTIFIER,c_str,c_str)<SUB>2125</SUB>> ]
-"11766" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2121</SUB>> ]
-"11768" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2121</SUB>> ]
-"11806" [label = <(FIELD_IDENTIFIER,Vm,Vm)<SUB>2125</SUB>> ]
-"11813" [label = <(&lt;operator&gt;.indirectFieldAccess,obj-&gt;PrettyTypeOf)<SUB>2125</SUB>> ]
-"11815" [label = <(FIELD_IDENTIFIER,PrettyTypeOf,PrettyTypeOf)<SUB>2125</SUB>> ]
-"11751" [label = <(METHOD,GetArrayLength)<SUB>2120</SUB>> ]
-"11836" [label = <(METHOD_RETURN,jsize)<SUB>2120</SUB>> ]
-  "11755" -> "11760" 
-  "11755" -> "11774" 
-  "11774" -> "11782" 
-  "11776" -> "11799" 
-  "11819" -> "11835" 
-  "11831" -> "11836" 
-  "11777" -> "11788" 
-  "11784" -> "11776" 
-  "11794" -> "11806" 
-  "11794" -> "11825" 
-  "11820" -> "11830" 
-  "11827" -> "11819" 
-  "11832" -> "11831" 
-  "11778" -> "11777" 
-  "11785" -> "11784" 
-  "11795" -> "11794" 
-  "11801" -> "11817" 
-  "11817" -> "11836" 
-  "11821" -> "11820" 
-  "11828" -> "11827" 
-  "11833" -> "11832" 
-  "11759" -> "11766" 
-  "11759" -> "11774" 
-  "11780" -> "11778" 
-  "11786" -> "11791" 
-  "11789" -> "11785" 
-  "11796" -> "11795" 
-  "11802" -> "11815" 
-  "11810" -> "11801" 
-  "11823" -> "11821" 
-  "11830" -> "11828" 
-  "11835" -> "11833" 
-  "11760" -> "11759" 
-  "11764" -> "11771" 
-  "11771" -> "11836" 
-  "11782" -> "11780" 
-  "11788" -> "11786" 
-  "11791" -> "11789" 
-  "11797" -> "11796" 
-  "11803" -> "11807" 
-  "11807" -> "11802" 
-  "11811" -> "11810" 
-  "11825" -> "11823" 
-  "11765" -> "11764" 
-  "11799" -> "11797" 
-  "11804" -> "11803" 
-  "11812" -> "11816" 
-  "11816" -> "11811" 
-  "11766" -> "11768" 
-  "11768" -> "11765" 
-  "11806" -> "11804" 
-  "11813" -> "11812" 
-  "11815" -> "11813" 
-  "11751" -> "11755" 
+digraph "NewByteArray" {  
+"11636" [label = <(RETURN,return NewPrimitiveArray&lt;jbyteArray, mirror::ByteArray&gt;(env, length);,return NewPrimitiveArray&lt;jbyteArray, mirror::ByteArray&gt;(env, length);)<SUB>2024</SUB>> ]
+"11637" [label = <(NewPrimitiveArray&lt;jbyteArray,mirror::ByteArray&gt;,NewPrimitiveArray&lt;jbyteArray, mirror::ByteArray&gt;(env, length))<SUB>2024</SUB>> ]
+"11632" [label = <(METHOD,NewByteArray)<SUB>2023</SUB>> ]
+"11640" [label = <(METHOD_RETURN,jbyteArray)<SUB>2023</SUB>> ]
+  "11636" -> "11640" 
+  "11637" -> "11636" 
+  "11632" -> "11637" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/202-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/202-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/202-cfg.dot	2023-06-07 19:35:01.527387160 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/202-cfg.dot	2023-06-07 19:35:08.067386512 +0330
@@ -1,75 +1,9 @@
-digraph "GetObjectArrayElement" {  
-"11843" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_array))<SUB>2133</SUB>> ]
-"11862" [label = <(soa,soa(env))<SUB>2134</SUB>> ]
-"11864" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::ObjectArray&lt;mirror::Object&gt;&gt; array =\012        soa.Decode&lt;mirror::ObjectArray&lt;mirror::Object&gt;&gt;(java_array))<SUB>2135</SUB>> ]
-"11889" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(array-&gt;Get(index));,return soa.AddLocalReference&lt;jobject&gt;(array-&gt;Get(index));)<SUB>2137</SUB>> ]
-"11865" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::ObjectArray&lt;mirror::Object&gt;&gt; array)<SUB>2135</SUB>> ]
-"11876" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::ObjectArray&lt;mirror::Object&gt;&gt;(java_array))<SUB>2136</SUB>> ]
-"11890" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(array-&gt;Get(index)))<SUB>2137</SUB>> ]
-"11866" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::ObjectArray)<SUB>2135</SUB>> ]
-"11871" [label = <(&lt;operator&gt;.arithmeticShiftRight,mirror::Object&gt;&gt; array)<SUB>2135</SUB>> ]
-"11877" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::ObjectArray)<SUB>2136</SUB>> ]
-"11884" [label = <(&lt;operator&gt;.arithmeticShiftRight,mirror::Object&gt;&gt;(java_array))<SUB>2136</SUB>> ]
-"11891" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>2137</SUB>> ]
-"11896" [label = <(Get,array-&gt;Get(index))<SUB>2137</SUB>> ]
-"11847" [label = <(UNLIKELY,UNLIKELY((java_array) == nullptr))<SUB>2133</SUB>> ]
-"11868" [label = <(&lt;operator&gt;.fieldAccess,mirror::ObjectArray)<SUB>2135</SUB>> ]
-"11872" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2135</SUB>> ]
-"11878" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2136</SUB>> ]
-"11881" [label = <(&lt;operator&gt;.fieldAccess,mirror::ObjectArray)<SUB>2136</SUB>> ]
-"11885" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2136</SUB>> ]
-"11892" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>2137</SUB>> ]
-"11897" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;Get)<SUB>2137</SUB>> ]
-"11848" [label = <(&lt;operator&gt;.equals,(java_array) == nullptr)<SUB>2133</SUB>> ]
-"11852" [label = <(CHECK_NON_NULL_ARGUMENT(java_array),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_array == null&quot;))<SUB>2133</SUB>> ]
-"11859" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_array),CHECK_NON_NULL_ARGUMENT(java_array))<SUB>2133</SUB>> ]
-"11870" [label = <(FIELD_IDENTIFIER,ObjectArray,ObjectArray)<SUB>2135</SUB>> ]
-"11874" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2135</SUB>> ]
-"11880" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2136</SUB>> ]
-"11883" [label = <(FIELD_IDENTIFIER,ObjectArray,ObjectArray)<SUB>2136</SUB>> ]
-"11887" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2136</SUB>> ]
-"11894" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>2137</SUB>> ]
-"11899" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>2137</SUB>> ]
-"11853" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2133</SUB>> ]
-"11854" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2133</SUB>> ]
-"11856" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2133</SUB>> ]
-"11838" [label = <(METHOD,GetObjectArrayElement)<SUB>2132</SUB>> ]
-"11901" [label = <(METHOD_RETURN,jobject)<SUB>2132</SUB>> ]
-  "11843" -> "11848" 
-  "11843" -> "11862" 
-  "11862" -> "11870" 
-  "11864" -> "11894" 
-  "11889" -> "11901" 
-  "11865" -> "11880" 
-  "11876" -> "11864" 
-  "11890" -> "11889" 
-  "11866" -> "11874" 
-  "11871" -> "11865" 
-  "11877" -> "11887" 
-  "11884" -> "11876" 
-  "11891" -> "11899" 
-  "11896" -> "11890" 
-  "11847" -> "11854" 
-  "11847" -> "11862" 
-  "11868" -> "11866" 
-  "11872" -> "11871" 
-  "11878" -> "11883" 
-  "11881" -> "11877" 
-  "11885" -> "11884" 
-  "11892" -> "11891" 
-  "11897" -> "11896" 
-  "11848" -> "11847" 
-  "11852" -> "11859" 
-  "11859" -> "11901" 
-  "11870" -> "11868" 
-  "11874" -> "11872" 
-  "11880" -> "11878" 
-  "11883" -> "11881" 
-  "11887" -> "11885" 
-  "11894" -> "11892" 
-  "11899" -> "11897" 
-  "11853" -> "11852" 
-  "11854" -> "11856" 
-  "11856" -> "11853" 
-  "11838" -> "11843" 
+digraph "NewCharArray" {  
+"11646" [label = <(RETURN,return NewPrimitiveArray&lt;jcharArray, mirror::CharArray&gt;(env, length);,return NewPrimitiveArray&lt;jcharArray, mirror::CharArray&gt;(env, length);)<SUB>2028</SUB>> ]
+"11647" [label = <(NewPrimitiveArray&lt;jcharArray,mirror::CharArray&gt;,NewPrimitiveArray&lt;jcharArray, mirror::CharArray&gt;(env, length))<SUB>2028</SUB>> ]
+"11642" [label = <(METHOD,NewCharArray)<SUB>2027</SUB>> ]
+"11650" [label = <(METHOD_RETURN,jcharArray)<SUB>2027</SUB>> ]
+  "11646" -> "11650" 
+  "11647" -> "11646" 
+  "11642" -> "11647" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/203-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/203-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/203-cfg.dot	2023-06-07 19:35:01.527387160 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/203-cfg.dot	2023-06-07 19:35:08.067386512 +0330
@@ -1,93 +1,9 @@
-digraph "SetObjectArrayElement" {  
-"11909" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>2142</SUB>> ]
-"11927" [label = <(soa,soa(env))<SUB>2143</SUB>> ]
-"11929" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::ObjectArray&lt;mirror::Object&gt;&gt; array =\012        soa.Decode&lt;mirror::ObjectArray&lt;mirror::Object&gt;&gt;(java_array))<SUB>2144</SUB>> ]
-"11954" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; value = soa.Decode&lt;mirror::Object&gt;(java_value))<SUB>2146</SUB>> ]
-"11971" [label = <(&lt;operator&gt;.greaterThan,array-&gt;Set&lt;false&gt;(index, value))<SUB>2147</SUB>> ]
-"11930" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::ObjectArray&lt;mirror::Object&gt;&gt; array)<SUB>2144</SUB>> ]
-"11941" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::ObjectArray&lt;mirror::Object&gt;&gt;(java_array))<SUB>2145</SUB>> ]
-"11955" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; value)<SUB>2146</SUB>> ]
-"11962" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(java_value))<SUB>2146</SUB>> ]
-"11972" [label = <(&lt;operator&gt;.lessThan,array-&gt;Set&lt;false)<SUB>2147</SUB>> ]
-"11977" [label = <(&lt;operator&gt;.bracketedPrimary,(index, value))<SUB>2147</SUB>> ]
-"11931" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::ObjectArray)<SUB>2144</SUB>> ]
-"11936" [label = <(&lt;operator&gt;.arithmeticShiftRight,mirror::Object&gt;&gt; array)<SUB>2144</SUB>> ]
-"11942" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::ObjectArray)<SUB>2145</SUB>> ]
-"11949" [label = <(&lt;operator&gt;.arithmeticShiftRight,mirror::Object&gt;&gt;(java_array))<SUB>2145</SUB>> ]
-"11956" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>2146</SUB>> ]
-"11963" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>2146</SUB>> ]
-"11973" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;Set)<SUB>2147</SUB>> ]
-"11978" [label = <(&lt;operator&gt;.expressionList,index, value)<SUB>2147</SUB>> ]
-"11913" [label = <(UNLIKELY,UNLIKELY((java_array) == nullptr))<SUB>2142</SUB>> ]
-"11933" [label = <(&lt;operator&gt;.fieldAccess,mirror::ObjectArray)<SUB>2144</SUB>> ]
-"11937" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2144</SUB>> ]
-"11943" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2145</SUB>> ]
-"11946" [label = <(&lt;operator&gt;.fieldAccess,mirror::ObjectArray)<SUB>2145</SUB>> ]
-"11950" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2145</SUB>> ]
-"11958" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2146</SUB>> ]
-"11964" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2146</SUB>> ]
-"11967" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2146</SUB>> ]
-"11975" [label = <(FIELD_IDENTIFIER,Set,Set)<SUB>2147</SUB>> ]
-"11914" [label = <(&lt;operator&gt;.equals,(java_array) == nullptr)<SUB>2142</SUB>> ]
-"11918" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_array == null&quot;))<SUB>2142</SUB>> ]
-"11925" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>2142</SUB>> ]
-"11935" [label = <(FIELD_IDENTIFIER,ObjectArray,ObjectArray)<SUB>2144</SUB>> ]
-"11939" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2144</SUB>> ]
-"11945" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2145</SUB>> ]
-"11948" [label = <(FIELD_IDENTIFIER,ObjectArray,ObjectArray)<SUB>2145</SUB>> ]
-"11952" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2145</SUB>> ]
-"11960" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2146</SUB>> ]
-"11966" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2146</SUB>> ]
-"11969" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2146</SUB>> ]
-"11919" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2142</SUB>> ]
-"11920" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2142</SUB>> ]
-"11922" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2142</SUB>> ]
-"11903" [label = <(METHOD,SetObjectArrayElement)<SUB>2140</SUB>> ]
-"11981" [label = <(METHOD_RETURN,void)<SUB>2140</SUB>> ]
-  "11909" -> "11914" 
-  "11909" -> "11927" 
-  "11927" -> "11935" 
-  "11929" -> "11960" 
-  "11954" -> "11975" 
-  "11971" -> "11981" 
-  "11930" -> "11945" 
-  "11941" -> "11929" 
-  "11955" -> "11966" 
-  "11962" -> "11954" 
-  "11972" -> "11978" 
-  "11977" -> "11971" 
-  "11931" -> "11939" 
-  "11936" -> "11930" 
-  "11942" -> "11952" 
-  "11949" -> "11941" 
-  "11956" -> "11955" 
-  "11963" -> "11962" 
-  "11973" -> "11972" 
-  "11978" -> "11977" 
-  "11913" -> "11920" 
-  "11913" -> "11927" 
-  "11933" -> "11931" 
-  "11937" -> "11936" 
-  "11943" -> "11948" 
-  "11946" -> "11942" 
-  "11950" -> "11949" 
-  "11958" -> "11956" 
-  "11964" -> "11969" 
-  "11967" -> "11963" 
-  "11975" -> "11973" 
-  "11914" -> "11913" 
-  "11918" -> "11925" 
-  "11925" -> "11981" 
-  "11935" -> "11933" 
-  "11939" -> "11937" 
-  "11945" -> "11943" 
-  "11948" -> "11946" 
-  "11952" -> "11950" 
-  "11960" -> "11958" 
-  "11966" -> "11964" 
-  "11969" -> "11967" 
-  "11919" -> "11918" 
-  "11920" -> "11922" 
-  "11922" -> "11919" 
-  "11903" -> "11909" 
+digraph "NewDoubleArray" {  
+"11656" [label = <(RETURN,return NewPrimitiveArray&lt;jdoubleArray, mirror::DoubleArray&gt;(env, length);,return NewPrimitiveArray&lt;jdoubleArray, mirror::DoubleArray&gt;(env, length);)<SUB>2032</SUB>> ]
+"11657" [label = <(NewPrimitiveArray&lt;jdoubleArray,mirror::DoubleArray&gt;,NewPrimitiveArray&lt;jdoubleArray, mirror::DoubleArray&gt;(env, length))<SUB>2032</SUB>> ]
+"11652" [label = <(METHOD,NewDoubleArray)<SUB>2031</SUB>> ]
+"11660" [label = <(METHOD_RETURN,jdoubleArray)<SUB>2031</SUB>> ]
+  "11656" -> "11660" 
+  "11657" -> "11656" 
+  "11652" -> "11657" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/204-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/204-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/204-cfg.dot	2023-06-07 19:35:01.527387160 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/204-cfg.dot	2023-06-07 19:35:08.067386512 +0330
@@ -1,9 +1,9 @@
-digraph "NewBooleanArray" {  
-"11987" [label = <(RETURN,return NewPrimitiveArray&lt;jbooleanArray, mirror::BooleanArray&gt;(env, length);,return NewPrimitiveArray&lt;jbooleanArray, mirror::BooleanArray&gt;(env, length);)<SUB>2151</SUB>> ]
-"11988" [label = <(NewPrimitiveArray&lt;jbooleanArray,mirror::BooleanArray&gt;,NewPrimitiveArray&lt;jbooleanArray, mirror::BooleanArray&gt;(env, length))<SUB>2151</SUB>> ]
-"11983" [label = <(METHOD,NewBooleanArray)<SUB>2150</SUB>> ]
-"11991" [label = <(METHOD_RETURN,jbooleanArray)<SUB>2150</SUB>> ]
-  "11987" -> "11991" 
-  "11988" -> "11987" 
-  "11983" -> "11988" 
+digraph "NewFloatArray" {  
+"11666" [label = <(RETURN,return NewPrimitiveArray&lt;jfloatArray, mirror::FloatArray&gt;(env, length);,return NewPrimitiveArray&lt;jfloatArray, mirror::FloatArray&gt;(env, length);)<SUB>2036</SUB>> ]
+"11667" [label = <(NewPrimitiveArray&lt;jfloatArray,mirror::FloatArray&gt;,NewPrimitiveArray&lt;jfloatArray, mirror::FloatArray&gt;(env, length))<SUB>2036</SUB>> ]
+"11662" [label = <(METHOD,NewFloatArray)<SUB>2035</SUB>> ]
+"11670" [label = <(METHOD_RETURN,jfloatArray)<SUB>2035</SUB>> ]
+  "11666" -> "11670" 
+  "11667" -> "11666" 
+  "11662" -> "11667" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/205-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/205-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/205-cfg.dot	2023-06-07 19:35:01.527387160 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/205-cfg.dot	2023-06-07 19:35:08.067386512 +0330
@@ -1,9 +1,9 @@
-digraph "NewByteArray" {  
-"11997" [label = <(RETURN,return NewPrimitiveArray&lt;jbyteArray, mirror::ByteArray&gt;(env, length);,return NewPrimitiveArray&lt;jbyteArray, mirror::ByteArray&gt;(env, length);)<SUB>2155</SUB>> ]
-"11998" [label = <(NewPrimitiveArray&lt;jbyteArray,mirror::ByteArray&gt;,NewPrimitiveArray&lt;jbyteArray, mirror::ByteArray&gt;(env, length))<SUB>2155</SUB>> ]
-"11993" [label = <(METHOD,NewByteArray)<SUB>2154</SUB>> ]
-"12001" [label = <(METHOD_RETURN,jbyteArray)<SUB>2154</SUB>> ]
-  "11997" -> "12001" 
-  "11998" -> "11997" 
-  "11993" -> "11998" 
+digraph "NewIntArray" {  
+"11676" [label = <(RETURN,return NewPrimitiveArray&lt;jintArray, mirror::IntArray&gt;(env, length);,return NewPrimitiveArray&lt;jintArray, mirror::IntArray&gt;(env, length);)<SUB>2040</SUB>> ]
+"11677" [label = <(NewPrimitiveArray&lt;jintArray,mirror::IntArray&gt;,NewPrimitiveArray&lt;jintArray, mirror::IntArray&gt;(env, length))<SUB>2040</SUB>> ]
+"11672" [label = <(METHOD,NewIntArray)<SUB>2039</SUB>> ]
+"11680" [label = <(METHOD_RETURN,jintArray)<SUB>2039</SUB>> ]
+  "11676" -> "11680" 
+  "11677" -> "11676" 
+  "11672" -> "11677" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/206-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/206-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/206-cfg.dot	2023-06-07 19:35:01.527387160 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/206-cfg.dot	2023-06-07 19:35:08.067386512 +0330
@@ -1,9 +1,9 @@
-digraph "NewCharArray" {  
-"12007" [label = <(RETURN,return NewPrimitiveArray&lt;jcharArray, mirror::CharArray&gt;(env, length);,return NewPrimitiveArray&lt;jcharArray, mirror::CharArray&gt;(env, length);)<SUB>2159</SUB>> ]
-"12008" [label = <(NewPrimitiveArray&lt;jcharArray,mirror::CharArray&gt;,NewPrimitiveArray&lt;jcharArray, mirror::CharArray&gt;(env, length))<SUB>2159</SUB>> ]
-"12003" [label = <(METHOD,NewCharArray)<SUB>2158</SUB>> ]
-"12011" [label = <(METHOD_RETURN,jcharArray)<SUB>2158</SUB>> ]
-  "12007" -> "12011" 
-  "12008" -> "12007" 
-  "12003" -> "12008" 
+digraph "NewLongArray" {  
+"11686" [label = <(RETURN,return NewPrimitiveArray&lt;jlongArray, mirror::LongArray&gt;(env, length);,return NewPrimitiveArray&lt;jlongArray, mirror::LongArray&gt;(env, length);)<SUB>2044</SUB>> ]
+"11687" [label = <(NewPrimitiveArray&lt;jlongArray,mirror::LongArray&gt;,NewPrimitiveArray&lt;jlongArray, mirror::LongArray&gt;(env, length))<SUB>2044</SUB>> ]
+"11682" [label = <(METHOD,NewLongArray)<SUB>2043</SUB>> ]
+"11690" [label = <(METHOD_RETURN,jlongArray)<SUB>2043</SUB>> ]
+  "11686" -> "11690" 
+  "11687" -> "11686" 
+  "11682" -> "11687" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/207-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/207-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/207-cfg.dot	2023-06-07 19:35:01.527387160 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/207-cfg.dot	2023-06-07 19:35:08.067386512 +0330
@@ -1,9 +1,327 @@
-digraph "NewDoubleArray" {  
-"12017" [label = <(RETURN,return NewPrimitiveArray&lt;jdoubleArray, mirror::DoubleArray&gt;(env, length);,return NewPrimitiveArray&lt;jdoubleArray, mirror::DoubleArray&gt;(env, length);)<SUB>2163</SUB>> ]
-"12018" [label = <(NewPrimitiveArray&lt;jdoubleArray,mirror::DoubleArray&gt;,NewPrimitiveArray&lt;jdoubleArray, mirror::DoubleArray&gt;(env, length))<SUB>2163</SUB>> ]
-"12013" [label = <(METHOD,NewDoubleArray)<SUB>2162</SUB>> ]
-"12021" [label = <(METHOD_RETURN,jdoubleArray)<SUB>2162</SUB>> ]
-  "12017" -> "12021" 
-  "12018" -> "12017" 
-  "12013" -> "12018" 
+digraph "NewObjectArray" {  
+"11714" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(element_jclass))<SUB>2053</SUB>> ]
+"11733" [label = <(soa,soa(env))<SUB>2056</SUB>> ]
+"11735" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; array_class)<SUB>2057</SUB>> ]
+"11814" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::ObjectArray&lt;mirror::Object&gt;&gt; result =\012        mirror::ObjectArray&lt;mirror::Object&gt;::Alloc(soa.Self(), array_class, length))<SUB>2074</SUB>> ]
+"11957" [label = <(RETURN,return soa.AddLocalReference&lt;jobjectArray&gt;(result);,return soa.AddLocalReference&lt;jobjectArray&gt;(result);)<SUB>2093</SUB>> ]
+"11699" [label = <(UNLIKELY,UNLIKELY(length &lt; 0))<SUB>2049</SUB>> ]
+"11736" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>2057</SUB>> ]
+"11743" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; element_class = soa.Decode&lt;mirror::Class&gt;(element_jclass))<SUB>2059</SUB>> ]
+"11786" [label = <(&lt;operator&gt;.assignment,* class_linker = Runtime::Current()-&gt;GetClassLinker())<SUB>2066</SUB>> ]
+"11795" [label = <(&lt;operator&gt;.assignment,array_class = class_linker-&gt;FindArrayClass(soa.Self(), element_class))<SUB>2067</SUB>> ]
+"11815" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::ObjectArray&lt;mirror::Object&gt;&gt; result)<SUB>2074</SUB>> ]
+"11826" [label = <(&lt;operator&gt;.greaterThan,mirror::ObjectArray&lt;mirror::Object&gt;::Alloc(soa.Self(), array_class, length))<SUB>2075</SUB>> ]
+"11845" [label = <(&lt;operator&gt;.logicalAnd,result != nullptr &amp;&amp; initial_element != nullptr)<SUB>2076</SUB>> ]
+"11958" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobjectArray&gt;(result))<SUB>2093</SUB>> ]
+"11700" [label = <(&lt;operator&gt;.lessThan,length &lt; 0)<SUB>2049</SUB>> ]
+"11704" [label = <(JniAbortF,JavaVmExtFromEnv(env)-&gt;JniAbortF(&quot;NewObjectArray&quot;, &quot;negative array length: %d&quot;, length))<SUB>2050</SUB>> ]
+"11712" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2051</SUB>> ]
+"11738" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2057</SUB>> ]
+"11744" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; element_class)<SUB>2059</SUB>> ]
+"11751" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(element_jclass))<SUB>2059</SUB>> ]
+"11761" [label = <(UNLIKELY,UNLIKELY(element_class-&gt;IsPrimitive()))<SUB>2060</SUB>> ]
+"11788" [label = <(GetClassLinker,Runtime::Current()-&gt;GetClassLinker())<SUB>2066</SUB>> ]
+"11797" [label = <(FindArrayClass,class_linker-&gt;FindArrayClass(soa.Self(), element_class))<SUB>2067</SUB>> ]
+"11807" [label = <(UNLIKELY,UNLIKELY(array_class == nullptr))<SUB>2068</SUB>> ]
+"11816" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::ObjectArray)<SUB>2074</SUB>> ]
+"11821" [label = <(&lt;operator&gt;.arithmeticShiftRight,mirror::Object&gt;&gt; result)<SUB>2074</SUB>> ]
+"11827" [label = <(&lt;operator&gt;.lessThan,mirror::ObjectArray&lt;mirror::Object)<SUB>2075</SUB>> ]
+"11834" [label = <(::Alloc,::Alloc(soa.Self(), array_class, length))<SUB>2075</SUB>> ]
+"11846" [label = <(&lt;operator&gt;.notEquals,result != nullptr)<SUB>2076</SUB>> ]
+"11849" [label = <(&lt;operator&gt;.notEquals,initial_element != nullptr)<SUB>2076</SUB>> ]
+"11853" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; initial_object = soa.Decode&lt;mirror::Object&gt;(initial_element))<SUB>2077</SUB>> ]
+"11959" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobjectArray)<SUB>2093</SUB>> ]
+"11705" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>2050</SUB>> ]
+"11718" [label = <(UNLIKELY,UNLIKELY((element_jclass) == nullptr))<SUB>2053</SUB>> ]
+"11740" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>2057</SUB>> ]
+"11745" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>2059</SUB>> ]
+"11752" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>2059</SUB>> ]
+"11762" [label = <(IsPrimitive,element_class-&gt;IsPrimitive())<SUB>2060</SUB>> ]
+"11767" [label = <(JniAbortF,soa.Vm()-&gt;JniAbortF(&quot;NewObjectArray&quot;,\012 &quot;not an object type: %s&quot;,\012                            element_class-&gt;PrettyDescriptor().c_str()))<SUB>2061</SUB>> ]
+"11783" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2064</SUB>> ]
+"11789" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetClassLinker)<SUB>2066</SUB>> ]
+"11798" [label = <(&lt;operator&gt;.indirectFieldAccess,class_linker-&gt;FindArrayClass)<SUB>2067</SUB>> ]
+"11801" [label = <(Self,soa.Self())<SUB>2067</SUB>> ]
+"11808" [label = <(&lt;operator&gt;.equals,array_class == nullptr)<SUB>2068</SUB>> ]
+"11812" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2069</SUB>> ]
+"11818" [label = <(&lt;operator&gt;.fieldAccess,mirror::ObjectArray)<SUB>2074</SUB>> ]
+"11822" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2074</SUB>> ]
+"11828" [label = <(&lt;operator&gt;.fieldAccess,mirror::ObjectArray)<SUB>2075</SUB>> ]
+"11831" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2075</SUB>> ]
+"11835" [label = <(&lt;operator&gt;.fieldAccess,::Alloc)<SUB>2075</SUB>> ]
+"11838" [label = <(Self,soa.Self())<SUB>2075</SUB>> ]
+"11854" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; initial_object)<SUB>2077</SUB>> ]
+"11861" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(initial_element))<SUB>2077</SUB>> ]
+"11871" [label = <(&lt;operator&gt;.notEquals,initial_object != nullptr)<SUB>2078</SUB>> ]
+"11960" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>2093</SUB>> ]
+"11706" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2050</SUB>> ]
+"11708" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2050</SUB>> ]
+"11719" [label = <(&lt;operator&gt;.equals,(element_jclass) == nullptr)<SUB>2053</SUB>> ]
+"11723" [label = <(CHECK_NON_NULL_ARGUMENT(element_jclass),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;element_jclass == null&quot;))<SUB>2053</SUB>> ]
+"11730" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(element_jclass),CHECK_NON_NULL_ARGUMENT(element_jclass))<SUB>2053</SUB>> ]
+"11747" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2059</SUB>> ]
+"11753" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2059</SUB>> ]
+"11756" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2059</SUB>> ]
+"11763" [label = <(&lt;operator&gt;.indirectFieldAccess,element_class-&gt;IsPrimitive)<SUB>2060</SUB>> ]
+"11768" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Vm()-&gt;JniAbortF)<SUB>2061</SUB>> ]
+"11776" [label = <(c_str,element_class-&gt;PrettyDescriptor().c_str())<SUB>2063</SUB>> ]
+"11790" [label = <(Runtime::Current,Runtime::Current())<SUB>2066</SUB>> ]
+"11794" [label = <(FIELD_IDENTIFIER,GetClassLinker,GetClassLinker)<SUB>2066</SUB>> ]
+"11800" [label = <(FIELD_IDENTIFIER,FindArrayClass,FindArrayClass)<SUB>2067</SUB>> ]
+"11802" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>2067</SUB>> ]
+"11820" [label = <(FIELD_IDENTIFIER,ObjectArray,ObjectArray)<SUB>2074</SUB>> ]
+"11824" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2074</SUB>> ]
+"11830" [label = <(FIELD_IDENTIFIER,ObjectArray,ObjectArray)<SUB>2075</SUB>> ]
+"11833" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2075</SUB>> ]
+"11837" [label = <(FIELD_IDENTIFIER,Alloc,Alloc)<SUB>2075</SUB>> ]
+"11839" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>2075</SUB>> ]
+"11855" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>2077</SUB>> ]
+"11862" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>2077</SUB>> ]
+"11875" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; element_class = result-&gt;GetClass()-&gt;GetComponentType())<SUB>2079</SUB>> ]
+"11962" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>2093</SUB>> ]
+"11724" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2053</SUB>> ]
+"11749" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>2059</SUB>> ]
+"11755" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2059</SUB>> ]
+"11758" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>2059</SUB>> ]
+"11765" [label = <(FIELD_IDENTIFIER,IsPrimitive,IsPrimitive)<SUB>2060</SUB>> ]
+"11769" [label = <(Vm,soa.Vm())<SUB>2061</SUB>> ]
+"11773" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2061</SUB>> ]
+"11777" [label = <(&lt;operator&gt;.fieldAccess,element_class-&gt;PrettyDescriptor().c_str)<SUB>2063</SUB>> ]
+"11791" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>2066</SUB>> ]
+"11804" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>2067</SUB>> ]
+"11841" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>2075</SUB>> ]
+"11857" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2077</SUB>> ]
+"11863" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2077</SUB>> ]
+"11866" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2077</SUB>> ]
+"11876" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; element_class)<SUB>2079</SUB>> ]
+"11883" [label = <(GetComponentType,result-&gt;GetClass()-&gt;GetComponentType())<SUB>2079</SUB>> ]
+"11891" [label = <(UNLIKELY,UNLIKELY(!element_class-&gt;IsAssignableFrom(initial_object-&gt;GetClass())))<SUB>2080</SUB>> ]
+"11725" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2053</SUB>> ]
+"11727" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2053</SUB>> ]
+"11770" [label = <(&lt;operator&gt;.fieldAccess,soa.Vm)<SUB>2061</SUB>> ]
+"11778" [label = <(PrettyDescriptor,element_class-&gt;PrettyDescriptor())<SUB>2063</SUB>> ]
+"11782" [label = <(FIELD_IDENTIFIER,c_str,c_str)<SUB>2063</SUB>> ]
+"11793" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>2066</SUB>> ]
+"11859" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2077</SUB>> ]
+"11865" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2077</SUB>> ]
+"11868" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2077</SUB>> ]
+"11877" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>2079</SUB>> ]
+"11884" [label = <(&lt;operator&gt;.indirectFieldAccess,result-&gt;GetClass()-&gt;GetComponentType)<SUB>2079</SUB>> ]
+"11892" [label = <(&lt;operator&gt;.logicalNot,!element_class-&gt;IsAssignableFrom(initial_object-&gt;GetClass()))<SUB>2080</SUB>> ]
+"11902" [label = <(JniAbortF,soa.Vm()-&gt;JniAbortF(&quot;NewObjectArray&quot;, &quot;cannot assign object of type '%s' to array with &quot;\012 &quot;element type of '%s'&quot;,\012                              mirror::Class::PrettyDescriptor(initial_object-&gt;GetClass()).c_str(),\012                              element_class-&gt;PrettyDescriptor().c_str()))<SUB>2081</SUB>> ]
+"11931" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2085</SUB>> ]
+"11772" [label = <(FIELD_IDENTIFIER,Vm,Vm)<SUB>2061</SUB>> ]
+"11779" [label = <(&lt;operator&gt;.indirectFieldAccess,element_class-&gt;PrettyDescriptor)<SUB>2063</SUB>> ]
+"11879" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2079</SUB>> ]
+"11885" [label = <(GetClass,result-&gt;GetClass())<SUB>2079</SUB>> ]
+"11889" [label = <(FIELD_IDENTIFIER,GetComponentType,GetComponentType)<SUB>2079</SUB>> ]
+"11893" [label = <(IsAssignableFrom,element_class-&gt;IsAssignableFrom(initial_object-&gt;GetClass()))<SUB>2080</SUB>> ]
+"11903" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Vm()-&gt;JniAbortF)<SUB>2081</SUB>> ]
+"11911" [label = <(c_str,mirror::Class::PrettyDescriptor(initial_object-&gt;GetClass()).c_str())<SUB>2083</SUB>> ]
+"11924" [label = <(c_str,element_class-&gt;PrettyDescriptor().c_str())<SUB>2084</SUB>> ]
+"11781" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>2063</SUB>> ]
+"11881" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>2079</SUB>> ]
+"11886" [label = <(&lt;operator&gt;.indirectFieldAccess,result-&gt;GetClass)<SUB>2079</SUB>> ]
+"11894" [label = <(&lt;operator&gt;.indirectFieldAccess,element_class-&gt;IsAssignableFrom)<SUB>2080</SUB>> ]
+"11897" [label = <(GetClass,initial_object-&gt;GetClass())<SUB>2080</SUB>> ]
+"11904" [label = <(Vm,soa.Vm())<SUB>2081</SUB>> ]
+"11908" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2081</SUB>> ]
+"11912" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class::PrettyDescriptor(initial_object-&gt;GetClass()).c_str)<SUB>2083</SUB>> ]
+"11925" [label = <(&lt;operator&gt;.fieldAccess,element_class-&gt;PrettyDescriptor().c_str)<SUB>2084</SUB>> ]
+"11941" [label = <(&lt;operator&gt;.lessThan,i &lt; length)<SUB>2087</SUB>> ]
+"11944" [label = <(&lt;operator&gt;.preIncrement,++i)<SUB>2087</SUB>> ]
+"11888" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>2079</SUB>> ]
+"11896" [label = <(FIELD_IDENTIFIER,IsAssignableFrom,IsAssignableFrom)<SUB>2080</SUB>> ]
+"11898" [label = <(&lt;operator&gt;.indirectFieldAccess,initial_object-&gt;GetClass)<SUB>2080</SUB>> ]
+"11905" [label = <(&lt;operator&gt;.fieldAccess,soa.Vm)<SUB>2081</SUB>> ]
+"11913" [label = <(mirror::Class::PrettyDescriptor,mirror::Class::PrettyDescriptor(initial_object-&gt;GetClass()))<SUB>2083</SUB>> ]
+"11923" [label = <(FIELD_IDENTIFIER,c_str,c_str)<SUB>2083</SUB>> ]
+"11926" [label = <(PrettyDescriptor,element_class-&gt;PrettyDescriptor())<SUB>2084</SUB>> ]
+"11930" [label = <(FIELD_IDENTIFIER,c_str,c_str)<SUB>2084</SUB>> ]
+"11938" [label = <(&lt;operator&gt;.assignment,i = 0)<SUB>2087</SUB>> ]
+"11947" [label = <(&lt;operator&gt;.greaterThan,result-&gt;SetWithoutChecks&lt;false&gt;(i, initial_object))<SUB>2088</SUB>> ]
+"11900" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>2080</SUB>> ]
+"11907" [label = <(FIELD_IDENTIFIER,Vm,Vm)<SUB>2081</SUB>> ]
+"11914" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class::PrettyDescriptor)<SUB>2083</SUB>> ]
+"11919" [label = <(GetClass,initial_object-&gt;GetClass())<SUB>2083</SUB>> ]
+"11927" [label = <(&lt;operator&gt;.indirectFieldAccess,element_class-&gt;PrettyDescriptor)<SUB>2084</SUB>> ]
+"11948" [label = <(&lt;operator&gt;.lessThan,result-&gt;SetWithoutChecks&lt;false)<SUB>2088</SUB>> ]
+"11953" [label = <(&lt;operator&gt;.bracketedPrimary,(i, initial_object))<SUB>2088</SUB>> ]
+"11915" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2083</SUB>> ]
+"11918" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>2083</SUB>> ]
+"11920" [label = <(&lt;operator&gt;.indirectFieldAccess,initial_object-&gt;GetClass)<SUB>2083</SUB>> ]
+"11929" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>2084</SUB>> ]
+"11949" [label = <(&lt;operator&gt;.indirectFieldAccess,result-&gt;SetWithoutChecks)<SUB>2088</SUB>> ]
+"11954" [label = <(&lt;operator&gt;.expressionList,i, initial_object)<SUB>2088</SUB>> ]
+"11922" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>2083</SUB>> ]
+"11951" [label = <(FIELD_IDENTIFIER,SetWithoutChecks,SetWithoutChecks)<SUB>2088</SUB>> ]
+"11692" [label = <(METHOD,NewObjectArray)<SUB>2047</SUB>> ]
+"11965" [label = <(METHOD_RETURN,jobjectArray)<SUB>2047</SUB>> ]
+  "11714" -> "11719" 
+  "11714" -> "11733" 
+  "11733" -> "11740" 
+  "11735" -> "11749" 
+  "11814" -> "11846" 
+  "11957" -> "11965" 
+  "11699" -> "11706" 
+  "11699" -> "11714" 
+  "11736" -> "11735" 
+  "11743" -> "11765" 
+  "11786" -> "11800" 
+  "11795" -> "11808" 
+  "11815" -> "11830" 
+  "11826" -> "11814" 
+  "11845" -> "11859" 
+  "11845" -> "11962" 
+  "11958" -> "11957" 
+  "11700" -> "11699" 
+  "11704" -> "11712" 
+  "11712" -> "11965" 
+  "11738" -> "11736" 
+  "11744" -> "11755" 
+  "11751" -> "11743" 
+  "11761" -> "11772" 
+  "11761" -> "11793" 
+  "11788" -> "11786" 
+  "11797" -> "11795" 
+  "11807" -> "11812" 
+  "11807" -> "11820" 
+  "11816" -> "11824" 
+  "11821" -> "11815" 
+  "11827" -> "11837" 
+  "11834" -> "11826" 
+  "11846" -> "11845" 
+  "11846" -> "11849" 
+  "11849" -> "11845" 
+  "11853" -> "11871" 
+  "11959" -> "11958" 
+  "11705" -> "11704" 
+  "11718" -> "11725" 
+  "11718" -> "11733" 
+  "11740" -> "11738" 
+  "11745" -> "11744" 
+  "11752" -> "11751" 
+  "11762" -> "11761" 
+  "11767" -> "11783" 
+  "11783" -> "11965" 
+  "11789" -> "11788" 
+  "11798" -> "11804" 
+  "11801" -> "11797" 
+  "11808" -> "11807" 
+  "11812" -> "11965" 
+  "11818" -> "11816" 
+  "11822" -> "11821" 
+  "11828" -> "11833" 
+  "11831" -> "11827" 
+  "11835" -> "11841" 
+  "11838" -> "11834" 
+  "11854" -> "11865" 
+  "11861" -> "11853" 
+  "11871" -> "11881" 
+  "11871" -> "11962" 
+  "11960" -> "11959" 
+  "11706" -> "11708" 
+  "11708" -> "11705" 
+  "11719" -> "11718" 
+  "11723" -> "11730" 
+  "11730" -> "11965" 
+  "11747" -> "11745" 
+  "11753" -> "11758" 
+  "11756" -> "11752" 
+  "11763" -> "11762" 
+  "11768" -> "11781" 
+  "11776" -> "11767" 
+  "11790" -> "11794" 
+  "11794" -> "11789" 
+  "11800" -> "11798" 
+  "11802" -> "11801" 
+  "11820" -> "11818" 
+  "11824" -> "11822" 
+  "11830" -> "11828" 
+  "11833" -> "11831" 
+  "11837" -> "11835" 
+  "11839" -> "11838" 
+  "11855" -> "11854" 
+  "11862" -> "11861" 
+  "11875" -> "11896" 
+  "11962" -> "11960" 
+  "11724" -> "11723" 
+  "11749" -> "11747" 
+  "11755" -> "11753" 
+  "11758" -> "11756" 
+  "11765" -> "11763" 
+  "11769" -> "11773" 
+  "11773" -> "11768" 
+  "11777" -> "11776" 
+  "11791" -> "11790" 
+  "11804" -> "11802" 
+  "11841" -> "11839" 
+  "11857" -> "11855" 
+  "11863" -> "11868" 
+  "11866" -> "11862" 
+  "11876" -> "11888" 
+  "11883" -> "11875" 
+  "11891" -> "11907" 
+  "11891" -> "11938" 
+  "11725" -> "11727" 
+  "11727" -> "11724" 
+  "11770" -> "11769" 
+  "11778" -> "11782" 
+  "11782" -> "11777" 
+  "11793" -> "11791" 
+  "11859" -> "11857" 
+  "11865" -> "11863" 
+  "11868" -> "11866" 
+  "11877" -> "11876" 
+  "11884" -> "11883" 
+  "11892" -> "11891" 
+  "11902" -> "11931" 
+  "11931" -> "11965" 
+  "11772" -> "11770" 
+  "11779" -> "11778" 
+  "11879" -> "11877" 
+  "11885" -> "11889" 
+  "11889" -> "11884" 
+  "11893" -> "11892" 
+  "11903" -> "11915" 
+  "11911" -> "11929" 
+  "11924" -> "11902" 
+  "11781" -> "11779" 
+  "11881" -> "11879" 
+  "11886" -> "11885" 
+  "11894" -> "11900" 
+  "11897" -> "11893" 
+  "11904" -> "11908" 
+  "11908" -> "11903" 
+  "11912" -> "11911" 
+  "11925" -> "11924" 
+  "11941" -> "11951" 
+  "11941" -> "11962" 
+  "11944" -> "11941" 
+  "11888" -> "11886" 
+  "11896" -> "11894" 
+  "11898" -> "11897" 
+  "11905" -> "11904" 
+  "11913" -> "11923" 
+  "11923" -> "11912" 
+  "11926" -> "11930" 
+  "11930" -> "11925" 
+  "11938" -> "11941" 
+  "11947" -> "11944" 
+  "11900" -> "11898" 
+  "11907" -> "11905" 
+  "11914" -> "11922" 
+  "11919" -> "11913" 
+  "11927" -> "11926" 
+  "11948" -> "11954" 
+  "11953" -> "11947" 
+  "11915" -> "11918" 
+  "11918" -> "11914" 
+  "11920" -> "11919" 
+  "11929" -> "11927" 
+  "11949" -> "11948" 
+  "11954" -> "11953" 
+  "11922" -> "11920" 
+  "11951" -> "11949" 
+  "11692" -> "11700" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/208-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/208-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/208-cfg.dot	2023-06-07 19:35:01.527387160 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/208-cfg.dot	2023-06-07 19:35:08.067386512 +0330
@@ -1,9 +1,9 @@
-digraph "NewFloatArray" {  
-"12027" [label = <(RETURN,return NewPrimitiveArray&lt;jfloatArray, mirror::FloatArray&gt;(env, length);,return NewPrimitiveArray&lt;jfloatArray, mirror::FloatArray&gt;(env, length);)<SUB>2167</SUB>> ]
-"12028" [label = <(NewPrimitiveArray&lt;jfloatArray,mirror::FloatArray&gt;,NewPrimitiveArray&lt;jfloatArray, mirror::FloatArray&gt;(env, length))<SUB>2167</SUB>> ]
-"12023" [label = <(METHOD,NewFloatArray)<SUB>2166</SUB>> ]
-"12031" [label = <(METHOD_RETURN,jfloatArray)<SUB>2166</SUB>> ]
-  "12027" -> "12031" 
-  "12028" -> "12027" 
-  "12023" -> "12028" 
+digraph "NewShortArray" {  
+"11971" [label = <(RETURN,return NewPrimitiveArray&lt;jshortArray, mirror::ShortArray&gt;(env, length);,return NewPrimitiveArray&lt;jshortArray, mirror::ShortArray&gt;(env, length);)<SUB>2097</SUB>> ]
+"11972" [label = <(NewPrimitiveArray&lt;jshortArray,mirror::ShortArray&gt;,NewPrimitiveArray&lt;jshortArray, mirror::ShortArray&gt;(env, length))<SUB>2097</SUB>> ]
+"11967" [label = <(METHOD,NewShortArray)<SUB>2096</SUB>> ]
+"11975" [label = <(METHOD_RETURN,jshortArray)<SUB>2096</SUB>> ]
+  "11971" -> "11975" 
+  "11972" -> "11971" 
+  "11967" -> "11972" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/209-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/209-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/209-cfg.dot	2023-06-07 19:35:01.537387158 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/209-cfg.dot	2023-06-07 19:35:08.067386512 +0330
@@ -1,9 +1,185 @@
-digraph "NewIntArray" {  
-"12037" [label = <(RETURN,return NewPrimitiveArray&lt;jintArray, mirror::IntArray&gt;(env, length);,return NewPrimitiveArray&lt;jintArray, mirror::IntArray&gt;(env, length);)<SUB>2171</SUB>> ]
-"12038" [label = <(NewPrimitiveArray&lt;jintArray,mirror::IntArray&gt;,NewPrimitiveArray&lt;jintArray, mirror::IntArray&gt;(env, length))<SUB>2171</SUB>> ]
-"12033" [label = <(METHOD,NewIntArray)<SUB>2170</SUB>> ]
-"12041" [label = <(METHOD_RETURN,jintArray)<SUB>2170</SUB>> ]
-  "12037" -> "12041" 
-  "12038" -> "12037" 
-  "12033" -> "12038" 
+digraph "GetPrimitiveArrayCritical" {  
+"11982" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_array))<SUB>2101</SUB>> ]
+"12001" [label = <(soa,soa(env))<SUB>2102</SUB>> ]
+"12003" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Array&gt; array = soa.Decode&lt;mirror::Array&gt;(java_array))<SUB>2103</SUB>> ]
+"12053" [label = <(&lt;operator&gt;.assignment,* heap = Runtime::Current()-&gt;GetHeap())<SUB>2109</SUB>> ]
+"12111" [label = <(RETURN,return array-&gt;GetRawData(array-&gt;GetClass()-&gt;GetComponentSize(), 0);,return array-&gt;GetRawData(array-&gt;GetClass()-&gt;GetComponentSize(), 0);)<SUB>2124</SUB>> ]
+"12004" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Array&gt; array)<SUB>2103</SUB>> ]
+"12011" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Array&gt;(java_array))<SUB>2103</SUB>> ]
+"12021" [label = <(UNLIKELY,UNLIKELY(!array-&gt;GetClass()-&gt;IsPrimitiveArray()))<SUB>2104</SUB>> ]
+"12055" [label = <(GetHeap,Runtime::Current()-&gt;GetHeap())<SUB>2109</SUB>> ]
+"12063" [label = <(IsMovableObject,heap-&gt;IsMovableObject(array))<SUB>2110</SUB>> ]
+"12103" [label = <(&lt;operator&gt;.notEquals,is_copy != nullptr)<SUB>2121</SUB>> ]
+"12112" [label = <(GetRawData,array-&gt;GetRawData(array-&gt;GetClass()-&gt;GetComponentSize(), 0))<SUB>2124</SUB>> ]
+"12005" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Array)<SUB>2103</SUB>> ]
+"12012" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Array)<SUB>2103</SUB>> ]
+"12022" [label = <(&lt;operator&gt;.logicalNot,!array-&gt;GetClass()-&gt;IsPrimitiveArray())<SUB>2104</SUB>> ]
+"12031" [label = <(JniAbortF,soa.Vm()-&gt;JniAbortF(&quot;GetPrimitiveArrayCritical&quot;, &quot;expected primitive array, given %s&quot;,\012                          array-&gt;GetClass()-&gt;PrettyDescriptor().c_str()))<SUB>2105</SUB>> ]
+"12050" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2107</SUB>> ]
+"12056" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetHeap)<SUB>2109</SUB>> ]
+"12064" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;IsMovableObject)<SUB>2110</SUB>> ]
+"12091" [label = <(&lt;operator&gt;.assignment,array = soa.Decode&lt;mirror::Array&gt;(java_array))<SUB>2119</SUB>> ]
+"12107" [label = <(&lt;operator&gt;.assignment,*is_copy = JNI_FALSE)<SUB>2122</SUB>> ]
+"12113" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetRawData)<SUB>2124</SUB>> ]
+"12116" [label = <(GetComponentSize,array-&gt;GetClass()-&gt;GetComponentSize())<SUB>2124</SUB>> ]
+"11986" [label = <(UNLIKELY,UNLIKELY((java_array) == nullptr))<SUB>2101</SUB>> ]
+"12007" [label = <(&lt;operator&gt;.fieldAccess,mirror::Array)<SUB>2103</SUB>> ]
+"12013" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2103</SUB>> ]
+"12016" [label = <(&lt;operator&gt;.fieldAccess,mirror::Array)<SUB>2103</SUB>> ]
+"12023" [label = <(IsPrimitiveArray,array-&gt;GetClass()-&gt;IsPrimitiveArray())<SUB>2104</SUB>> ]
+"12032" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Vm()-&gt;JniAbortF)<SUB>2105</SUB>> ]
+"12040" [label = <(c_str,array-&gt;GetClass()-&gt;PrettyDescriptor().c_str())<SUB>2106</SUB>> ]
+"12057" [label = <(Runtime::Current,Runtime::Current())<SUB>2109</SUB>> ]
+"12061" [label = <(FIELD_IDENTIFIER,GetHeap,GetHeap)<SUB>2109</SUB>> ]
+"12066" [label = <(FIELD_IDENTIFIER,IsMovableObject,IsMovableObject)<SUB>2110</SUB>> ]
+"12070" [label = <(&lt;operator&gt;.logicalNot,!kUseReadBarrier)<SUB>2111</SUB>> ]
+"12093" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Array&gt;(java_array))<SUB>2119</SUB>> ]
+"12108" [label = <(&lt;operator&gt;.indirection,*is_copy)<SUB>2122</SUB>> ]
+"12115" [label = <(FIELD_IDENTIFIER,GetRawData,GetRawData)<SUB>2124</SUB>> ]
+"12117" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass()-&gt;GetComponentSize)<SUB>2124</SUB>> ]
+"11987" [label = <(&lt;operator&gt;.equals,(java_array) == nullptr)<SUB>2101</SUB>> ]
+"11991" [label = <(CHECK_NON_NULL_ARGUMENT(java_array),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_array == null&quot;))<SUB>2101</SUB>> ]
+"11998" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_array),CHECK_NON_NULL_ARGUMENT(java_array))<SUB>2101</SUB>> ]
+"12009" [label = <(FIELD_IDENTIFIER,Array,Array)<SUB>2103</SUB>> ]
+"12015" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2103</SUB>> ]
+"12018" [label = <(FIELD_IDENTIFIER,Array,Array)<SUB>2103</SUB>> ]
+"12024" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass()-&gt;IsPrimitiveArray)<SUB>2104</SUB>> ]
+"12033" [label = <(Vm,soa.Vm())<SUB>2105</SUB>> ]
+"12037" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2105</SUB>> ]
+"12041" [label = <(&lt;operator&gt;.fieldAccess,array-&gt;GetClass()-&gt;PrettyDescriptor().c_str)<SUB>2106</SUB>> ]
+"12058" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>2109</SUB>> ]
+"12073" [label = <(IncrementDisableMovingGC,heap-&gt;IncrementDisableMovingGC(soa.Self()))<SUB>2112</SUB>> ]
+"12094" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Array)<SUB>2119</SUB>> ]
+"12118" [label = <(GetClass,array-&gt;GetClass())<SUB>2124</SUB>> ]
+"12122" [label = <(FIELD_IDENTIFIER,GetComponentSize,GetComponentSize)<SUB>2124</SUB>> ]
+"11992" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2101</SUB>> ]
+"12025" [label = <(GetClass,array-&gt;GetClass())<SUB>2104</SUB>> ]
+"12029" [label = <(FIELD_IDENTIFIER,IsPrimitiveArray,IsPrimitiveArray)<SUB>2104</SUB>> ]
+"12034" [label = <(&lt;operator&gt;.fieldAccess,soa.Vm)<SUB>2105</SUB>> ]
+"12042" [label = <(PrettyDescriptor,array-&gt;GetClass()-&gt;PrettyDescriptor())<SUB>2106</SUB>> ]
+"12049" [label = <(FIELD_IDENTIFIER,c_str,c_str)<SUB>2106</SUB>> ]
+"12060" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>2109</SUB>> ]
+"12074" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;IncrementDisableMovingGC)<SUB>2112</SUB>> ]
+"12077" [label = <(Self,soa.Self())<SUB>2112</SUB>> ]
+"12083" [label = <(IncrementDisableThreadFlip,heap-&gt;IncrementDisableThreadFlip(soa.Self()))<SUB>2116</SUB>> ]
+"12095" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2119</SUB>> ]
+"12098" [label = <(&lt;operator&gt;.fieldAccess,mirror::Array)<SUB>2119</SUB>> ]
+"12119" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass)<SUB>2124</SUB>> ]
+"11993" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2101</SUB>> ]
+"11995" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2101</SUB>> ]
+"12026" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass)<SUB>2104</SUB>> ]
+"12036" [label = <(FIELD_IDENTIFIER,Vm,Vm)<SUB>2105</SUB>> ]
+"12043" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass()-&gt;PrettyDescriptor)<SUB>2106</SUB>> ]
+"12076" [label = <(FIELD_IDENTIFIER,IncrementDisableMovingGC,IncrementDisableMovingGC)<SUB>2112</SUB>> ]
+"12078" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>2112</SUB>> ]
+"12084" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;IncrementDisableThreadFlip)<SUB>2116</SUB>> ]
+"12087" [label = <(Self,soa.Self())<SUB>2116</SUB>> ]
+"12097" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2119</SUB>> ]
+"12100" [label = <(FIELD_IDENTIFIER,Array,Array)<SUB>2119</SUB>> ]
+"12121" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>2124</SUB>> ]
+"12028" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>2104</SUB>> ]
+"12044" [label = <(GetClass,array-&gt;GetClass())<SUB>2106</SUB>> ]
+"12048" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>2106</SUB>> ]
+"12080" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>2112</SUB>> ]
+"12086" [label = <(FIELD_IDENTIFIER,IncrementDisableThreadFlip,IncrementDisableThreadFlip)<SUB>2116</SUB>> ]
+"12088" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>2116</SUB>> ]
+"12045" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass)<SUB>2106</SUB>> ]
+"12090" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>2116</SUB>> ]
+"12047" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>2106</SUB>> ]
+"11977" [label = <(METHOD,GetPrimitiveArrayCritical)<SUB>2100</SUB>> ]
+"12124" [label = <(METHOD_RETURN,void*)<SUB>2100</SUB>> ]
+  "11982" -> "11987" 
+  "11982" -> "12001" 
+  "12001" -> "12009" 
+  "12003" -> "12028" 
+  "12053" -> "12066" 
+  "12111" -> "12124" 
+  "12004" -> "12015" 
+  "12011" -> "12003" 
+  "12021" -> "12036" 
+  "12021" -> "12060" 
+  "12055" -> "12053" 
+  "12063" -> "12070" 
+  "12063" -> "12103" 
+  "12103" -> "12108" 
+  "12103" -> "12115" 
+  "12112" -> "12111" 
+  "12005" -> "12004" 
+  "12012" -> "12011" 
+  "12022" -> "12021" 
+  "12031" -> "12050" 
+  "12050" -> "12124" 
+  "12056" -> "12055" 
+  "12064" -> "12063" 
+  "12091" -> "12103" 
+  "12107" -> "12115" 
+  "12113" -> "12121" 
+  "12116" -> "12112" 
+  "11986" -> "11993" 
+  "11986" -> "12001" 
+  "12007" -> "12005" 
+  "12013" -> "12018" 
+  "12016" -> "12012" 
+  "12023" -> "12022" 
+  "12032" -> "12047" 
+  "12040" -> "12031" 
+  "12057" -> "12061" 
+  "12061" -> "12056" 
+  "12066" -> "12064" 
+  "12070" -> "12076" 
+  "12070" -> "12086" 
+  "12093" -> "12091" 
+  "12108" -> "12107" 
+  "12115" -> "12113" 
+  "12117" -> "12116" 
+  "11987" -> "11986" 
+  "11991" -> "11998" 
+  "11998" -> "12124" 
+  "12009" -> "12007" 
+  "12015" -> "12013" 
+  "12018" -> "12016" 
+  "12024" -> "12023" 
+  "12033" -> "12037" 
+  "12037" -> "12032" 
+  "12041" -> "12040" 
+  "12058" -> "12057" 
+  "12073" -> "12097" 
+  "12094" -> "12093" 
+  "12118" -> "12122" 
+  "12122" -> "12117" 
+  "11992" -> "11991" 
+  "12025" -> "12029" 
+  "12029" -> "12024" 
+  "12034" -> "12033" 
+  "12042" -> "12049" 
+  "12049" -> "12041" 
+  "12060" -> "12058" 
+  "12074" -> "12080" 
+  "12077" -> "12073" 
+  "12083" -> "12097" 
+  "12095" -> "12100" 
+  "12098" -> "12094" 
+  "12119" -> "12118" 
+  "11993" -> "11995" 
+  "11995" -> "11992" 
+  "12026" -> "12025" 
+  "12036" -> "12034" 
+  "12043" -> "12042" 
+  "12076" -> "12074" 
+  "12078" -> "12077" 
+  "12084" -> "12090" 
+  "12087" -> "12083" 
+  "12097" -> "12095" 
+  "12100" -> "12098" 
+  "12121" -> "12119" 
+  "12028" -> "12026" 
+  "12044" -> "12048" 
+  "12048" -> "12043" 
+  "12080" -> "12078" 
+  "12086" -> "12084" 
+  "12088" -> "12087" 
+  "12045" -> "12044" 
+  "12090" -> "12088" 
+  "12047" -> "12045" 
+  "11977" -> "11982" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/21-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/21-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/21-cfg.dot	2023-06-07 19:35:01.337387177 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/21-cfg.dot	2023-06-07 19:35:07.917386527 +0330
@@ -1,5 +1,17 @@
-digraph "hs" {  
-"462" [label = <(METHOD,hs)<SUB>384</SUB>> ]
-"465" [label = <(METHOD_RETURN,StackHandleScope&lt;1&gt;)<SUB>384</SUB>> ]
-  "462" -> "465" 
+digraph "JavaVmExtFromEnv" {  
+"721" [label = <(RETURN,return reinterpret_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm();,return reinterpret_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm();)<SUB>440</SUB>> ]
+"722" [label = <(GetVm,reinterpret_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm())<SUB>440</SUB>> ]
+"723" [label = <(&lt;operator&gt;.indirectFieldAccess,reinterpret_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm)<SUB>440</SUB>> ]
+"724" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;JNIEnvExt*&gt;(env))<SUB>440</SUB>> ]
+"727" [label = <(FIELD_IDENTIFIER,GetVm,GetVm)<SUB>440</SUB>> ]
+"725" [label = <(UNKNOWN,JNIEnvExt*,JNIEnvExt*)<SUB>440</SUB>> ]
+"718" [label = <(METHOD,JavaVmExtFromEnv)<SUB>439</SUB>> ]
+"728" [label = <(METHOD_RETURN,JavaVMExt)<SUB>439</SUB>> ]
+  "721" -> "728" 
+  "722" -> "721" 
+  "723" -> "722" 
+  "724" -> "727" 
+  "727" -> "723" 
+  "725" -> "724" 
+  "718" -> "725" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/210-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/210-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/210-cfg.dot	2023-06-07 19:35:01.537387158 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/210-cfg.dot	2023-06-07 19:35:08.067386512 +0330
@@ -1,9 +1,112 @@
-digraph "NewLongArray" {  
-"12047" [label = <(RETURN,return NewPrimitiveArray&lt;jlongArray, mirror::LongArray&gt;(env, length);,return NewPrimitiveArray&lt;jlongArray, mirror::LongArray&gt;(env, length);)<SUB>2175</SUB>> ]
-"12048" [label = <(NewPrimitiveArray&lt;jlongArray,mirror::LongArray&gt;,NewPrimitiveArray&lt;jlongArray, mirror::LongArray&gt;(env, length))<SUB>2175</SUB>> ]
-"12043" [label = <(METHOD,NewLongArray)<SUB>2174</SUB>> ]
-"12051" [label = <(METHOD_RETURN,jlongArray)<SUB>2174</SUB>> ]
-  "12047" -> "12051" 
-  "12048" -> "12047" 
-  "12043" -> "12048" 
+digraph "ReleasePrimitiveArrayCritical" {  
+"12132" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>2129</SUB>> ]
+"12150" [label = <(soa,soa(env))<SUB>2130</SUB>> ]
+"12152" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Array&gt; array = soa.Decode&lt;mirror::Array&gt;(java_array))<SUB>2131</SUB>> ]
+"12201" [label = <(&lt;operator&gt;.assignment,component_size = array-&gt;GetClass()-&gt;GetComponentSize())<SUB>2137</SUB>> ]
+"12210" [label = <(ReleasePrimitiveArray,ReleasePrimitiveArray(soa, array, component_size, elements, mode))<SUB>2138</SUB>> ]
+"12153" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Array&gt; array)<SUB>2131</SUB>> ]
+"12160" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Array&gt;(java_array))<SUB>2131</SUB>> ]
+"12170" [label = <(UNLIKELY,UNLIKELY(!array-&gt;GetClass()-&gt;IsPrimitiveArray()))<SUB>2132</SUB>> ]
+"12203" [label = <(GetComponentSize,array-&gt;GetClass()-&gt;GetComponentSize())<SUB>2137</SUB>> ]
+"12154" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Array)<SUB>2131</SUB>> ]
+"12161" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Array)<SUB>2131</SUB>> ]
+"12171" [label = <(&lt;operator&gt;.logicalNot,!array-&gt;GetClass()-&gt;IsPrimitiveArray())<SUB>2132</SUB>> ]
+"12180" [label = <(JniAbortF,soa.Vm()-&gt;JniAbortF(&quot;ReleasePrimitiveArrayCritical&quot;, &quot;expected primitive array, given %s&quot;,\012                          array-&gt;GetClass()-&gt;PrettyDescriptor().c_str()))<SUB>2133</SUB>> ]
+"12199" [label = <(RETURN,return;,return;)<SUB>2135</SUB>> ]
+"12204" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass()-&gt;GetComponentSize)<SUB>2137</SUB>> ]
+"12136" [label = <(UNLIKELY,UNLIKELY((java_array) == nullptr))<SUB>2129</SUB>> ]
+"12156" [label = <(&lt;operator&gt;.fieldAccess,mirror::Array)<SUB>2131</SUB>> ]
+"12162" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2131</SUB>> ]
+"12165" [label = <(&lt;operator&gt;.fieldAccess,mirror::Array)<SUB>2131</SUB>> ]
+"12172" [label = <(IsPrimitiveArray,array-&gt;GetClass()-&gt;IsPrimitiveArray())<SUB>2132</SUB>> ]
+"12181" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Vm()-&gt;JniAbortF)<SUB>2133</SUB>> ]
+"12189" [label = <(c_str,array-&gt;GetClass()-&gt;PrettyDescriptor().c_str())<SUB>2134</SUB>> ]
+"12205" [label = <(GetClass,array-&gt;GetClass())<SUB>2137</SUB>> ]
+"12209" [label = <(FIELD_IDENTIFIER,GetComponentSize,GetComponentSize)<SUB>2137</SUB>> ]
+"12137" [label = <(&lt;operator&gt;.equals,(java_array) == nullptr)<SUB>2129</SUB>> ]
+"12141" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_array == null&quot;))<SUB>2129</SUB>> ]
+"12148" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>2129</SUB>> ]
+"12158" [label = <(FIELD_IDENTIFIER,Array,Array)<SUB>2131</SUB>> ]
+"12164" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2131</SUB>> ]
+"12167" [label = <(FIELD_IDENTIFIER,Array,Array)<SUB>2131</SUB>> ]
+"12173" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass()-&gt;IsPrimitiveArray)<SUB>2132</SUB>> ]
+"12182" [label = <(Vm,soa.Vm())<SUB>2133</SUB>> ]
+"12186" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2133</SUB>> ]
+"12190" [label = <(&lt;operator&gt;.fieldAccess,array-&gt;GetClass()-&gt;PrettyDescriptor().c_str)<SUB>2134</SUB>> ]
+"12206" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass)<SUB>2137</SUB>> ]
+"12142" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2129</SUB>> ]
+"12174" [label = <(GetClass,array-&gt;GetClass())<SUB>2132</SUB>> ]
+"12178" [label = <(FIELD_IDENTIFIER,IsPrimitiveArray,IsPrimitiveArray)<SUB>2132</SUB>> ]
+"12183" [label = <(&lt;operator&gt;.fieldAccess,soa.Vm)<SUB>2133</SUB>> ]
+"12191" [label = <(PrettyDescriptor,array-&gt;GetClass()-&gt;PrettyDescriptor())<SUB>2134</SUB>> ]
+"12198" [label = <(FIELD_IDENTIFIER,c_str,c_str)<SUB>2134</SUB>> ]
+"12208" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>2137</SUB>> ]
+"12143" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2129</SUB>> ]
+"12145" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2129</SUB>> ]
+"12175" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass)<SUB>2132</SUB>> ]
+"12185" [label = <(FIELD_IDENTIFIER,Vm,Vm)<SUB>2133</SUB>> ]
+"12192" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass()-&gt;PrettyDescriptor)<SUB>2134</SUB>> ]
+"12177" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>2132</SUB>> ]
+"12193" [label = <(GetClass,array-&gt;GetClass())<SUB>2134</SUB>> ]
+"12197" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>2134</SUB>> ]
+"12194" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass)<SUB>2134</SUB>> ]
+"12196" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>2134</SUB>> ]
+"12126" [label = <(METHOD,ReleasePrimitiveArrayCritical)<SUB>2127</SUB>> ]
+"12216" [label = <(METHOD_RETURN,void)<SUB>2127</SUB>> ]
+  "12132" -> "12137" 
+  "12132" -> "12150" 
+  "12150" -> "12158" 
+  "12152" -> "12177" 
+  "12201" -> "12210" 
+  "12210" -> "12216" 
+  "12153" -> "12164" 
+  "12160" -> "12152" 
+  "12170" -> "12185" 
+  "12170" -> "12208" 
+  "12203" -> "12201" 
+  "12154" -> "12153" 
+  "12161" -> "12160" 
+  "12171" -> "12170" 
+  "12180" -> "12199" 
+  "12199" -> "12216" 
+  "12204" -> "12203" 
+  "12136" -> "12143" 
+  "12136" -> "12150" 
+  "12156" -> "12154" 
+  "12162" -> "12167" 
+  "12165" -> "12161" 
+  "12172" -> "12171" 
+  "12181" -> "12196" 
+  "12189" -> "12180" 
+  "12205" -> "12209" 
+  "12209" -> "12204" 
+  "12137" -> "12136" 
+  "12141" -> "12148" 
+  "12148" -> "12216" 
+  "12158" -> "12156" 
+  "12164" -> "12162" 
+  "12167" -> "12165" 
+  "12173" -> "12172" 
+  "12182" -> "12186" 
+  "12186" -> "12181" 
+  "12190" -> "12189" 
+  "12206" -> "12205" 
+  "12142" -> "12141" 
+  "12174" -> "12178" 
+  "12178" -> "12173" 
+  "12183" -> "12182" 
+  "12191" -> "12198" 
+  "12198" -> "12190" 
+  "12208" -> "12206" 
+  "12143" -> "12145" 
+  "12145" -> "12142" 
+  "12175" -> "12174" 
+  "12185" -> "12183" 
+  "12192" -> "12191" 
+  "12177" -> "12175" 
+  "12193" -> "12197" 
+  "12197" -> "12192" 
+  "12194" -> "12193" 
+  "12196" -> "12194" 
+  "12126" -> "12132" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/211-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/211-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/211-cfg.dot	2023-06-07 19:35:01.537387158 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/211-cfg.dot	2023-06-07 19:35:08.067386512 +0330
@@ -1,327 +1,9 @@
-digraph "NewObjectArray" {  
-"12075" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(element_jclass))<SUB>2184</SUB>> ]
-"12094" [label = <(soa,soa(env))<SUB>2187</SUB>> ]
-"12096" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; array_class)<SUB>2188</SUB>> ]
-"12175" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::ObjectArray&lt;mirror::Object&gt;&gt; result =\012        mirror::ObjectArray&lt;mirror::Object&gt;::Alloc(soa.Self(), array_class, length))<SUB>2205</SUB>> ]
-"12318" [label = <(RETURN,return soa.AddLocalReference&lt;jobjectArray&gt;(result);,return soa.AddLocalReference&lt;jobjectArray&gt;(result);)<SUB>2224</SUB>> ]
-"12060" [label = <(UNLIKELY,UNLIKELY(length &lt; 0))<SUB>2180</SUB>> ]
-"12097" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>2188</SUB>> ]
-"12104" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; element_class = soa.Decode&lt;mirror::Class&gt;(element_jclass))<SUB>2190</SUB>> ]
-"12147" [label = <(&lt;operator&gt;.assignment,* class_linker = Runtime::Current()-&gt;GetClassLinker())<SUB>2197</SUB>> ]
-"12156" [label = <(&lt;operator&gt;.assignment,array_class = class_linker-&gt;FindArrayClass(soa.Self(), element_class))<SUB>2198</SUB>> ]
-"12176" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::ObjectArray&lt;mirror::Object&gt;&gt; result)<SUB>2205</SUB>> ]
-"12187" [label = <(&lt;operator&gt;.greaterThan,mirror::ObjectArray&lt;mirror::Object&gt;::Alloc(soa.Self(), array_class, length))<SUB>2206</SUB>> ]
-"12206" [label = <(&lt;operator&gt;.logicalAnd,result != nullptr &amp;&amp; initial_element != nullptr)<SUB>2207</SUB>> ]
-"12319" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobjectArray&gt;(result))<SUB>2224</SUB>> ]
-"12061" [label = <(&lt;operator&gt;.lessThan,length &lt; 0)<SUB>2180</SUB>> ]
-"12065" [label = <(JniAbortF,JavaVmExtFromEnv(env)-&gt;JniAbortF(&quot;NewObjectArray&quot;, &quot;negative array length: %d&quot;, length))<SUB>2181</SUB>> ]
-"12073" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2182</SUB>> ]
-"12099" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2188</SUB>> ]
-"12105" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; element_class)<SUB>2190</SUB>> ]
-"12112" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(element_jclass))<SUB>2190</SUB>> ]
-"12122" [label = <(UNLIKELY,UNLIKELY(element_class-&gt;IsPrimitive()))<SUB>2191</SUB>> ]
-"12149" [label = <(GetClassLinker,Runtime::Current()-&gt;GetClassLinker())<SUB>2197</SUB>> ]
-"12158" [label = <(FindArrayClass,class_linker-&gt;FindArrayClass(soa.Self(), element_class))<SUB>2198</SUB>> ]
-"12168" [label = <(UNLIKELY,UNLIKELY(array_class == nullptr))<SUB>2199</SUB>> ]
-"12177" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::ObjectArray)<SUB>2205</SUB>> ]
-"12182" [label = <(&lt;operator&gt;.arithmeticShiftRight,mirror::Object&gt;&gt; result)<SUB>2205</SUB>> ]
-"12188" [label = <(&lt;operator&gt;.lessThan,mirror::ObjectArray&lt;mirror::Object)<SUB>2206</SUB>> ]
-"12195" [label = <(::Alloc,::Alloc(soa.Self(), array_class, length))<SUB>2206</SUB>> ]
-"12207" [label = <(&lt;operator&gt;.notEquals,result != nullptr)<SUB>2207</SUB>> ]
-"12210" [label = <(&lt;operator&gt;.notEquals,initial_element != nullptr)<SUB>2207</SUB>> ]
-"12214" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; initial_object = soa.Decode&lt;mirror::Object&gt;(initial_element))<SUB>2208</SUB>> ]
-"12320" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobjectArray)<SUB>2224</SUB>> ]
-"12066" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>2181</SUB>> ]
-"12079" [label = <(UNLIKELY,UNLIKELY((element_jclass) == nullptr))<SUB>2184</SUB>> ]
-"12101" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>2188</SUB>> ]
-"12106" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>2190</SUB>> ]
-"12113" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>2190</SUB>> ]
-"12123" [label = <(IsPrimitive,element_class-&gt;IsPrimitive())<SUB>2191</SUB>> ]
-"12128" [label = <(JniAbortF,soa.Vm()-&gt;JniAbortF(&quot;NewObjectArray&quot;,\012 &quot;not an object type: %s&quot;,\012                            element_class-&gt;PrettyDescriptor().c_str()))<SUB>2192</SUB>> ]
-"12144" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2195</SUB>> ]
-"12150" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetClassLinker)<SUB>2197</SUB>> ]
-"12159" [label = <(&lt;operator&gt;.indirectFieldAccess,class_linker-&gt;FindArrayClass)<SUB>2198</SUB>> ]
-"12162" [label = <(Self,soa.Self())<SUB>2198</SUB>> ]
-"12169" [label = <(&lt;operator&gt;.equals,array_class == nullptr)<SUB>2199</SUB>> ]
-"12173" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2200</SUB>> ]
-"12179" [label = <(&lt;operator&gt;.fieldAccess,mirror::ObjectArray)<SUB>2205</SUB>> ]
-"12183" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2205</SUB>> ]
-"12189" [label = <(&lt;operator&gt;.fieldAccess,mirror::ObjectArray)<SUB>2206</SUB>> ]
-"12192" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2206</SUB>> ]
-"12196" [label = <(&lt;operator&gt;.fieldAccess,::Alloc)<SUB>2206</SUB>> ]
-"12199" [label = <(Self,soa.Self())<SUB>2206</SUB>> ]
-"12215" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; initial_object)<SUB>2208</SUB>> ]
-"12222" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(initial_element))<SUB>2208</SUB>> ]
-"12232" [label = <(&lt;operator&gt;.notEquals,initial_object != nullptr)<SUB>2209</SUB>> ]
-"12321" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>2224</SUB>> ]
-"12067" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2181</SUB>> ]
-"12069" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2181</SUB>> ]
-"12080" [label = <(&lt;operator&gt;.equals,(element_jclass) == nullptr)<SUB>2184</SUB>> ]
-"12084" [label = <(CHECK_NON_NULL_ARGUMENT(element_jclass),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;element_jclass == null&quot;))<SUB>2184</SUB>> ]
-"12091" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(element_jclass),CHECK_NON_NULL_ARGUMENT(element_jclass))<SUB>2184</SUB>> ]
-"12108" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2190</SUB>> ]
-"12114" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2190</SUB>> ]
-"12117" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2190</SUB>> ]
-"12124" [label = <(&lt;operator&gt;.indirectFieldAccess,element_class-&gt;IsPrimitive)<SUB>2191</SUB>> ]
-"12129" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Vm()-&gt;JniAbortF)<SUB>2192</SUB>> ]
-"12137" [label = <(c_str,element_class-&gt;PrettyDescriptor().c_str())<SUB>2194</SUB>> ]
-"12151" [label = <(Runtime::Current,Runtime::Current())<SUB>2197</SUB>> ]
-"12155" [label = <(FIELD_IDENTIFIER,GetClassLinker,GetClassLinker)<SUB>2197</SUB>> ]
-"12161" [label = <(FIELD_IDENTIFIER,FindArrayClass,FindArrayClass)<SUB>2198</SUB>> ]
-"12163" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>2198</SUB>> ]
-"12181" [label = <(FIELD_IDENTIFIER,ObjectArray,ObjectArray)<SUB>2205</SUB>> ]
-"12185" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2205</SUB>> ]
-"12191" [label = <(FIELD_IDENTIFIER,ObjectArray,ObjectArray)<SUB>2206</SUB>> ]
-"12194" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2206</SUB>> ]
-"12198" [label = <(FIELD_IDENTIFIER,Alloc,Alloc)<SUB>2206</SUB>> ]
-"12200" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>2206</SUB>> ]
-"12216" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>2208</SUB>> ]
-"12223" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>2208</SUB>> ]
-"12236" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; element_class = result-&gt;GetClass()-&gt;GetComponentType())<SUB>2210</SUB>> ]
-"12323" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>2224</SUB>> ]
-"12085" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2184</SUB>> ]
-"12110" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>2190</SUB>> ]
-"12116" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2190</SUB>> ]
-"12119" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>2190</SUB>> ]
-"12126" [label = <(FIELD_IDENTIFIER,IsPrimitive,IsPrimitive)<SUB>2191</SUB>> ]
-"12130" [label = <(Vm,soa.Vm())<SUB>2192</SUB>> ]
-"12134" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2192</SUB>> ]
-"12138" [label = <(&lt;operator&gt;.fieldAccess,element_class-&gt;PrettyDescriptor().c_str)<SUB>2194</SUB>> ]
-"12152" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>2197</SUB>> ]
-"12165" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>2198</SUB>> ]
-"12202" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>2206</SUB>> ]
-"12218" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2208</SUB>> ]
-"12224" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2208</SUB>> ]
-"12227" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2208</SUB>> ]
-"12237" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; element_class)<SUB>2210</SUB>> ]
-"12244" [label = <(GetComponentType,result-&gt;GetClass()-&gt;GetComponentType())<SUB>2210</SUB>> ]
-"12252" [label = <(UNLIKELY,UNLIKELY(!element_class-&gt;IsAssignableFrom(initial_object-&gt;GetClass())))<SUB>2211</SUB>> ]
-"12086" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2184</SUB>> ]
-"12088" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2184</SUB>> ]
-"12131" [label = <(&lt;operator&gt;.fieldAccess,soa.Vm)<SUB>2192</SUB>> ]
-"12139" [label = <(PrettyDescriptor,element_class-&gt;PrettyDescriptor())<SUB>2194</SUB>> ]
-"12143" [label = <(FIELD_IDENTIFIER,c_str,c_str)<SUB>2194</SUB>> ]
-"12154" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>2197</SUB>> ]
-"12220" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2208</SUB>> ]
-"12226" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2208</SUB>> ]
-"12229" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2208</SUB>> ]
-"12238" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>2210</SUB>> ]
-"12245" [label = <(&lt;operator&gt;.indirectFieldAccess,result-&gt;GetClass()-&gt;GetComponentType)<SUB>2210</SUB>> ]
-"12253" [label = <(&lt;operator&gt;.logicalNot,!element_class-&gt;IsAssignableFrom(initial_object-&gt;GetClass()))<SUB>2211</SUB>> ]
-"12263" [label = <(JniAbortF,soa.Vm()-&gt;JniAbortF(&quot;NewObjectArray&quot;, &quot;cannot assign object of type '%s' to array with &quot;\012 &quot;element type of '%s'&quot;,\012                              mirror::Class::PrettyDescriptor(initial_object-&gt;GetClass()).c_str(),\012                              element_class-&gt;PrettyDescriptor().c_str()))<SUB>2212</SUB>> ]
-"12292" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2216</SUB>> ]
-"12133" [label = <(FIELD_IDENTIFIER,Vm,Vm)<SUB>2192</SUB>> ]
-"12140" [label = <(&lt;operator&gt;.indirectFieldAccess,element_class-&gt;PrettyDescriptor)<SUB>2194</SUB>> ]
-"12240" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2210</SUB>> ]
-"12246" [label = <(GetClass,result-&gt;GetClass())<SUB>2210</SUB>> ]
-"12250" [label = <(FIELD_IDENTIFIER,GetComponentType,GetComponentType)<SUB>2210</SUB>> ]
-"12254" [label = <(IsAssignableFrom,element_class-&gt;IsAssignableFrom(initial_object-&gt;GetClass()))<SUB>2211</SUB>> ]
-"12264" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Vm()-&gt;JniAbortF)<SUB>2212</SUB>> ]
-"12272" [label = <(c_str,mirror::Class::PrettyDescriptor(initial_object-&gt;GetClass()).c_str())<SUB>2214</SUB>> ]
-"12285" [label = <(c_str,element_class-&gt;PrettyDescriptor().c_str())<SUB>2215</SUB>> ]
-"12142" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>2194</SUB>> ]
-"12242" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>2210</SUB>> ]
-"12247" [label = <(&lt;operator&gt;.indirectFieldAccess,result-&gt;GetClass)<SUB>2210</SUB>> ]
-"12255" [label = <(&lt;operator&gt;.indirectFieldAccess,element_class-&gt;IsAssignableFrom)<SUB>2211</SUB>> ]
-"12258" [label = <(GetClass,initial_object-&gt;GetClass())<SUB>2211</SUB>> ]
-"12265" [label = <(Vm,soa.Vm())<SUB>2212</SUB>> ]
-"12269" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2212</SUB>> ]
-"12273" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class::PrettyDescriptor(initial_object-&gt;GetClass()).c_str)<SUB>2214</SUB>> ]
-"12286" [label = <(&lt;operator&gt;.fieldAccess,element_class-&gt;PrettyDescriptor().c_str)<SUB>2215</SUB>> ]
-"12302" [label = <(&lt;operator&gt;.lessThan,i &lt; length)<SUB>2218</SUB>> ]
-"12305" [label = <(&lt;operator&gt;.preIncrement,++i)<SUB>2218</SUB>> ]
-"12249" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>2210</SUB>> ]
-"12257" [label = <(FIELD_IDENTIFIER,IsAssignableFrom,IsAssignableFrom)<SUB>2211</SUB>> ]
-"12259" [label = <(&lt;operator&gt;.indirectFieldAccess,initial_object-&gt;GetClass)<SUB>2211</SUB>> ]
-"12266" [label = <(&lt;operator&gt;.fieldAccess,soa.Vm)<SUB>2212</SUB>> ]
-"12274" [label = <(mirror::Class::PrettyDescriptor,mirror::Class::PrettyDescriptor(initial_object-&gt;GetClass()))<SUB>2214</SUB>> ]
-"12284" [label = <(FIELD_IDENTIFIER,c_str,c_str)<SUB>2214</SUB>> ]
-"12287" [label = <(PrettyDescriptor,element_class-&gt;PrettyDescriptor())<SUB>2215</SUB>> ]
-"12291" [label = <(FIELD_IDENTIFIER,c_str,c_str)<SUB>2215</SUB>> ]
-"12299" [label = <(&lt;operator&gt;.assignment,i = 0)<SUB>2218</SUB>> ]
-"12308" [label = <(&lt;operator&gt;.greaterThan,result-&gt;SetWithoutChecks&lt;false&gt;(i, initial_object))<SUB>2219</SUB>> ]
-"12261" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>2211</SUB>> ]
-"12268" [label = <(FIELD_IDENTIFIER,Vm,Vm)<SUB>2212</SUB>> ]
-"12275" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class::PrettyDescriptor)<SUB>2214</SUB>> ]
-"12280" [label = <(GetClass,initial_object-&gt;GetClass())<SUB>2214</SUB>> ]
-"12288" [label = <(&lt;operator&gt;.indirectFieldAccess,element_class-&gt;PrettyDescriptor)<SUB>2215</SUB>> ]
-"12309" [label = <(&lt;operator&gt;.lessThan,result-&gt;SetWithoutChecks&lt;false)<SUB>2219</SUB>> ]
-"12314" [label = <(&lt;operator&gt;.bracketedPrimary,(i, initial_object))<SUB>2219</SUB>> ]
-"12276" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2214</SUB>> ]
-"12279" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>2214</SUB>> ]
-"12281" [label = <(&lt;operator&gt;.indirectFieldAccess,initial_object-&gt;GetClass)<SUB>2214</SUB>> ]
-"12290" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>2215</SUB>> ]
-"12310" [label = <(&lt;operator&gt;.indirectFieldAccess,result-&gt;SetWithoutChecks)<SUB>2219</SUB>> ]
-"12315" [label = <(&lt;operator&gt;.expressionList,i, initial_object)<SUB>2219</SUB>> ]
-"12283" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>2214</SUB>> ]
-"12312" [label = <(FIELD_IDENTIFIER,SetWithoutChecks,SetWithoutChecks)<SUB>2219</SUB>> ]
-"12053" [label = <(METHOD,NewObjectArray)<SUB>2178</SUB>> ]
-"12326" [label = <(METHOD_RETURN,jobjectArray)<SUB>2178</SUB>> ]
-  "12075" -> "12080" 
-  "12075" -> "12094" 
-  "12094" -> "12101" 
-  "12096" -> "12110" 
-  "12175" -> "12207" 
-  "12318" -> "12326" 
-  "12060" -> "12067" 
-  "12060" -> "12075" 
-  "12097" -> "12096" 
-  "12104" -> "12126" 
-  "12147" -> "12161" 
-  "12156" -> "12169" 
-  "12176" -> "12191" 
-  "12187" -> "12175" 
-  "12206" -> "12220" 
-  "12206" -> "12323" 
-  "12319" -> "12318" 
-  "12061" -> "12060" 
-  "12065" -> "12073" 
-  "12073" -> "12326" 
-  "12099" -> "12097" 
-  "12105" -> "12116" 
-  "12112" -> "12104" 
-  "12122" -> "12133" 
-  "12122" -> "12154" 
-  "12149" -> "12147" 
-  "12158" -> "12156" 
-  "12168" -> "12173" 
-  "12168" -> "12181" 
-  "12177" -> "12185" 
-  "12182" -> "12176" 
-  "12188" -> "12198" 
-  "12195" -> "12187" 
-  "12207" -> "12206" 
-  "12207" -> "12210" 
-  "12210" -> "12206" 
-  "12214" -> "12232" 
-  "12320" -> "12319" 
-  "12066" -> "12065" 
-  "12079" -> "12086" 
-  "12079" -> "12094" 
-  "12101" -> "12099" 
-  "12106" -> "12105" 
-  "12113" -> "12112" 
-  "12123" -> "12122" 
-  "12128" -> "12144" 
-  "12144" -> "12326" 
-  "12150" -> "12149" 
-  "12159" -> "12165" 
-  "12162" -> "12158" 
-  "12169" -> "12168" 
-  "12173" -> "12326" 
-  "12179" -> "12177" 
-  "12183" -> "12182" 
-  "12189" -> "12194" 
-  "12192" -> "12188" 
-  "12196" -> "12202" 
-  "12199" -> "12195" 
-  "12215" -> "12226" 
-  "12222" -> "12214" 
-  "12232" -> "12242" 
-  "12232" -> "12323" 
-  "12321" -> "12320" 
-  "12067" -> "12069" 
-  "12069" -> "12066" 
-  "12080" -> "12079" 
-  "12084" -> "12091" 
-  "12091" -> "12326" 
-  "12108" -> "12106" 
-  "12114" -> "12119" 
-  "12117" -> "12113" 
-  "12124" -> "12123" 
-  "12129" -> "12142" 
-  "12137" -> "12128" 
-  "12151" -> "12155" 
-  "12155" -> "12150" 
-  "12161" -> "12159" 
-  "12163" -> "12162" 
-  "12181" -> "12179" 
-  "12185" -> "12183" 
-  "12191" -> "12189" 
-  "12194" -> "12192" 
-  "12198" -> "12196" 
-  "12200" -> "12199" 
-  "12216" -> "12215" 
-  "12223" -> "12222" 
-  "12236" -> "12257" 
-  "12323" -> "12321" 
-  "12085" -> "12084" 
-  "12110" -> "12108" 
-  "12116" -> "12114" 
-  "12119" -> "12117" 
-  "12126" -> "12124" 
-  "12130" -> "12134" 
-  "12134" -> "12129" 
-  "12138" -> "12137" 
-  "12152" -> "12151" 
-  "12165" -> "12163" 
-  "12202" -> "12200" 
-  "12218" -> "12216" 
-  "12224" -> "12229" 
-  "12227" -> "12223" 
-  "12237" -> "12249" 
-  "12244" -> "12236" 
-  "12252" -> "12268" 
-  "12252" -> "12299" 
-  "12086" -> "12088" 
-  "12088" -> "12085" 
-  "12131" -> "12130" 
-  "12139" -> "12143" 
-  "12143" -> "12138" 
-  "12154" -> "12152" 
-  "12220" -> "12218" 
-  "12226" -> "12224" 
-  "12229" -> "12227" 
-  "12238" -> "12237" 
-  "12245" -> "12244" 
-  "12253" -> "12252" 
-  "12263" -> "12292" 
-  "12292" -> "12326" 
-  "12133" -> "12131" 
-  "12140" -> "12139" 
-  "12240" -> "12238" 
-  "12246" -> "12250" 
-  "12250" -> "12245" 
-  "12254" -> "12253" 
-  "12264" -> "12276" 
-  "12272" -> "12290" 
-  "12285" -> "12263" 
-  "12142" -> "12140" 
-  "12242" -> "12240" 
-  "12247" -> "12246" 
-  "12255" -> "12261" 
-  "12258" -> "12254" 
-  "12265" -> "12269" 
-  "12269" -> "12264" 
-  "12273" -> "12272" 
-  "12286" -> "12285" 
-  "12302" -> "12312" 
-  "12302" -> "12323" 
-  "12305" -> "12302" 
-  "12249" -> "12247" 
-  "12257" -> "12255" 
-  "12259" -> "12258" 
-  "12266" -> "12265" 
-  "12274" -> "12284" 
-  "12284" -> "12273" 
-  "12287" -> "12291" 
-  "12291" -> "12286" 
-  "12299" -> "12302" 
-  "12308" -> "12305" 
-  "12261" -> "12259" 
-  "12268" -> "12266" 
-  "12275" -> "12283" 
-  "12280" -> "12274" 
-  "12288" -> "12287" 
-  "12309" -> "12315" 
-  "12314" -> "12308" 
-  "12276" -> "12279" 
-  "12279" -> "12275" 
-  "12281" -> "12280" 
-  "12290" -> "12288" 
-  "12310" -> "12309" 
-  "12315" -> "12314" 
-  "12283" -> "12281" 
-  "12312" -> "12310" 
-  "12053" -> "12061" 
+digraph "GetBooleanArrayElements" {  
+"12223" [label = <(RETURN,return GetPrimitiveArray&lt;jbooleanArray, jboolean, mirror::BooleanArray&gt;(env, array, is_copy);,return GetPrimitiveArray&lt;jbooleanArray, jboolean, mirror::BooleanArray&gt;(env, array, is_copy);)<SUB>2142</SUB>> ]
+"12224" [label = <(GetPrimitiveArray&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;,GetPrimitiveArray&lt;jbooleanArray, jboolean, mirror::BooleanArray&gt;(env, array, is_copy))<SUB>2142</SUB>> ]
+"12218" [label = <(METHOD,GetBooleanArrayElements)<SUB>2141</SUB>> ]
+"12228" [label = <(METHOD_RETURN,jboolean)<SUB>2141</SUB>> ]
+  "12223" -> "12228" 
+  "12224" -> "12223" 
+  "12218" -> "12224" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/212-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/212-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/212-cfg.dot	2023-06-07 19:35:01.537387158 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/212-cfg.dot	2023-06-07 19:35:08.067386512 +0330
@@ -1,9 +1,9 @@
-digraph "NewShortArray" {  
-"12332" [label = <(RETURN,return NewPrimitiveArray&lt;jshortArray, mirror::ShortArray&gt;(env, length);,return NewPrimitiveArray&lt;jshortArray, mirror::ShortArray&gt;(env, length);)<SUB>2228</SUB>> ]
-"12333" [label = <(NewPrimitiveArray&lt;jshortArray,mirror::ShortArray&gt;,NewPrimitiveArray&lt;jshortArray, mirror::ShortArray&gt;(env, length))<SUB>2228</SUB>> ]
-"12328" [label = <(METHOD,NewShortArray)<SUB>2227</SUB>> ]
-"12336" [label = <(METHOD_RETURN,jshortArray)<SUB>2227</SUB>> ]
-  "12332" -> "12336" 
-  "12333" -> "12332" 
-  "12328" -> "12333" 
+digraph "GetByteArrayElements" {  
+"12235" [label = <(RETURN,return GetPrimitiveArray&lt;jbyteArray, jbyte, mirror::ByteArray&gt;(env, array, is_copy);,return GetPrimitiveArray&lt;jbyteArray, jbyte, mirror::ByteArray&gt;(env, array, is_copy);)<SUB>2146</SUB>> ]
+"12236" [label = <(GetPrimitiveArray&lt;jbyteArray,jbyte,mirror::ByteArray&gt;,GetPrimitiveArray&lt;jbyteArray, jbyte, mirror::ByteArray&gt;(env, array, is_copy))<SUB>2146</SUB>> ]
+"12230" [label = <(METHOD,GetByteArrayElements)<SUB>2145</SUB>> ]
+"12240" [label = <(METHOD_RETURN,jbyte)<SUB>2145</SUB>> ]
+  "12235" -> "12240" 
+  "12236" -> "12235" 
+  "12230" -> "12236" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/213-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/213-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/213-cfg.dot	2023-06-07 19:35:01.537387158 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/213-cfg.dot	2023-06-07 19:35:08.077386510 +0330
@@ -1,185 +1,9 @@
-digraph "GetPrimitiveArrayCritical" {  
-"12343" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_array))<SUB>2232</SUB>> ]
-"12362" [label = <(soa,soa(env))<SUB>2233</SUB>> ]
-"12364" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Array&gt; array = soa.Decode&lt;mirror::Array&gt;(java_array))<SUB>2234</SUB>> ]
-"12414" [label = <(&lt;operator&gt;.assignment,* heap = Runtime::Current()-&gt;GetHeap())<SUB>2240</SUB>> ]
-"12472" [label = <(RETURN,return array-&gt;GetRawData(array-&gt;GetClass()-&gt;GetComponentSize(), 0);,return array-&gt;GetRawData(array-&gt;GetClass()-&gt;GetComponentSize(), 0);)<SUB>2255</SUB>> ]
-"12365" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Array&gt; array)<SUB>2234</SUB>> ]
-"12372" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Array&gt;(java_array))<SUB>2234</SUB>> ]
-"12382" [label = <(UNLIKELY,UNLIKELY(!array-&gt;GetClass()-&gt;IsPrimitiveArray()))<SUB>2235</SUB>> ]
-"12416" [label = <(GetHeap,Runtime::Current()-&gt;GetHeap())<SUB>2240</SUB>> ]
-"12424" [label = <(IsMovableObject,heap-&gt;IsMovableObject(array))<SUB>2241</SUB>> ]
-"12464" [label = <(&lt;operator&gt;.notEquals,is_copy != nullptr)<SUB>2252</SUB>> ]
-"12473" [label = <(GetRawData,array-&gt;GetRawData(array-&gt;GetClass()-&gt;GetComponentSize(), 0))<SUB>2255</SUB>> ]
-"12366" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Array)<SUB>2234</SUB>> ]
-"12373" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Array)<SUB>2234</SUB>> ]
-"12383" [label = <(&lt;operator&gt;.logicalNot,!array-&gt;GetClass()-&gt;IsPrimitiveArray())<SUB>2235</SUB>> ]
-"12392" [label = <(JniAbortF,soa.Vm()-&gt;JniAbortF(&quot;GetPrimitiveArrayCritical&quot;, &quot;expected primitive array, given %s&quot;,\012                          array-&gt;GetClass()-&gt;PrettyDescriptor().c_str()))<SUB>2236</SUB>> ]
-"12411" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2238</SUB>> ]
-"12417" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetHeap)<SUB>2240</SUB>> ]
-"12425" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;IsMovableObject)<SUB>2241</SUB>> ]
-"12452" [label = <(&lt;operator&gt;.assignment,array = soa.Decode&lt;mirror::Array&gt;(java_array))<SUB>2250</SUB>> ]
-"12468" [label = <(&lt;operator&gt;.assignment,*is_copy = JNI_FALSE)<SUB>2253</SUB>> ]
-"12474" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetRawData)<SUB>2255</SUB>> ]
-"12477" [label = <(GetComponentSize,array-&gt;GetClass()-&gt;GetComponentSize())<SUB>2255</SUB>> ]
-"12347" [label = <(UNLIKELY,UNLIKELY((java_array) == nullptr))<SUB>2232</SUB>> ]
-"12368" [label = <(&lt;operator&gt;.fieldAccess,mirror::Array)<SUB>2234</SUB>> ]
-"12374" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2234</SUB>> ]
-"12377" [label = <(&lt;operator&gt;.fieldAccess,mirror::Array)<SUB>2234</SUB>> ]
-"12384" [label = <(IsPrimitiveArray,array-&gt;GetClass()-&gt;IsPrimitiveArray())<SUB>2235</SUB>> ]
-"12393" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Vm()-&gt;JniAbortF)<SUB>2236</SUB>> ]
-"12401" [label = <(c_str,array-&gt;GetClass()-&gt;PrettyDescriptor().c_str())<SUB>2237</SUB>> ]
-"12418" [label = <(Runtime::Current,Runtime::Current())<SUB>2240</SUB>> ]
-"12422" [label = <(FIELD_IDENTIFIER,GetHeap,GetHeap)<SUB>2240</SUB>> ]
-"12427" [label = <(FIELD_IDENTIFIER,IsMovableObject,IsMovableObject)<SUB>2241</SUB>> ]
-"12431" [label = <(&lt;operator&gt;.logicalNot,!kUseReadBarrier)<SUB>2242</SUB>> ]
-"12454" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Array&gt;(java_array))<SUB>2250</SUB>> ]
-"12469" [label = <(&lt;operator&gt;.indirection,*is_copy)<SUB>2253</SUB>> ]
-"12476" [label = <(FIELD_IDENTIFIER,GetRawData,GetRawData)<SUB>2255</SUB>> ]
-"12478" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass()-&gt;GetComponentSize)<SUB>2255</SUB>> ]
-"12348" [label = <(&lt;operator&gt;.equals,(java_array) == nullptr)<SUB>2232</SUB>> ]
-"12352" [label = <(CHECK_NON_NULL_ARGUMENT(java_array),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_array == null&quot;))<SUB>2232</SUB>> ]
-"12359" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_array),CHECK_NON_NULL_ARGUMENT(java_array))<SUB>2232</SUB>> ]
-"12370" [label = <(FIELD_IDENTIFIER,Array,Array)<SUB>2234</SUB>> ]
-"12376" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2234</SUB>> ]
-"12379" [label = <(FIELD_IDENTIFIER,Array,Array)<SUB>2234</SUB>> ]
-"12385" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass()-&gt;IsPrimitiveArray)<SUB>2235</SUB>> ]
-"12394" [label = <(Vm,soa.Vm())<SUB>2236</SUB>> ]
-"12398" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2236</SUB>> ]
-"12402" [label = <(&lt;operator&gt;.fieldAccess,array-&gt;GetClass()-&gt;PrettyDescriptor().c_str)<SUB>2237</SUB>> ]
-"12419" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>2240</SUB>> ]
-"12434" [label = <(IncrementDisableMovingGC,heap-&gt;IncrementDisableMovingGC(soa.Self()))<SUB>2243</SUB>> ]
-"12455" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Array)<SUB>2250</SUB>> ]
-"12479" [label = <(GetClass,array-&gt;GetClass())<SUB>2255</SUB>> ]
-"12483" [label = <(FIELD_IDENTIFIER,GetComponentSize,GetComponentSize)<SUB>2255</SUB>> ]
-"12353" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2232</SUB>> ]
-"12386" [label = <(GetClass,array-&gt;GetClass())<SUB>2235</SUB>> ]
-"12390" [label = <(FIELD_IDENTIFIER,IsPrimitiveArray,IsPrimitiveArray)<SUB>2235</SUB>> ]
-"12395" [label = <(&lt;operator&gt;.fieldAccess,soa.Vm)<SUB>2236</SUB>> ]
-"12403" [label = <(PrettyDescriptor,array-&gt;GetClass()-&gt;PrettyDescriptor())<SUB>2237</SUB>> ]
-"12410" [label = <(FIELD_IDENTIFIER,c_str,c_str)<SUB>2237</SUB>> ]
-"12421" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>2240</SUB>> ]
-"12435" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;IncrementDisableMovingGC)<SUB>2243</SUB>> ]
-"12438" [label = <(Self,soa.Self())<SUB>2243</SUB>> ]
-"12444" [label = <(IncrementDisableThreadFlip,heap-&gt;IncrementDisableThreadFlip(soa.Self()))<SUB>2247</SUB>> ]
-"12456" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2250</SUB>> ]
-"12459" [label = <(&lt;operator&gt;.fieldAccess,mirror::Array)<SUB>2250</SUB>> ]
-"12480" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass)<SUB>2255</SUB>> ]
-"12354" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2232</SUB>> ]
-"12356" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2232</SUB>> ]
-"12387" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass)<SUB>2235</SUB>> ]
-"12397" [label = <(FIELD_IDENTIFIER,Vm,Vm)<SUB>2236</SUB>> ]
-"12404" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass()-&gt;PrettyDescriptor)<SUB>2237</SUB>> ]
-"12437" [label = <(FIELD_IDENTIFIER,IncrementDisableMovingGC,IncrementDisableMovingGC)<SUB>2243</SUB>> ]
-"12439" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>2243</SUB>> ]
-"12445" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;IncrementDisableThreadFlip)<SUB>2247</SUB>> ]
-"12448" [label = <(Self,soa.Self())<SUB>2247</SUB>> ]
-"12458" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2250</SUB>> ]
-"12461" [label = <(FIELD_IDENTIFIER,Array,Array)<SUB>2250</SUB>> ]
-"12482" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>2255</SUB>> ]
-"12389" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>2235</SUB>> ]
-"12405" [label = <(GetClass,array-&gt;GetClass())<SUB>2237</SUB>> ]
-"12409" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>2237</SUB>> ]
-"12441" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>2243</SUB>> ]
-"12447" [label = <(FIELD_IDENTIFIER,IncrementDisableThreadFlip,IncrementDisableThreadFlip)<SUB>2247</SUB>> ]
-"12449" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>2247</SUB>> ]
-"12406" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass)<SUB>2237</SUB>> ]
-"12451" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>2247</SUB>> ]
-"12408" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>2237</SUB>> ]
-"12338" [label = <(METHOD,GetPrimitiveArrayCritical)<SUB>2231</SUB>> ]
-"12485" [label = <(METHOD_RETURN,void*)<SUB>2231</SUB>> ]
-  "12343" -> "12348" 
-  "12343" -> "12362" 
-  "12362" -> "12370" 
-  "12364" -> "12389" 
-  "12414" -> "12427" 
-  "12472" -> "12485" 
-  "12365" -> "12376" 
-  "12372" -> "12364" 
-  "12382" -> "12397" 
-  "12382" -> "12421" 
-  "12416" -> "12414" 
-  "12424" -> "12431" 
-  "12424" -> "12464" 
-  "12464" -> "12469" 
-  "12464" -> "12476" 
-  "12473" -> "12472" 
-  "12366" -> "12365" 
-  "12373" -> "12372" 
-  "12383" -> "12382" 
-  "12392" -> "12411" 
-  "12411" -> "12485" 
-  "12417" -> "12416" 
-  "12425" -> "12424" 
-  "12452" -> "12464" 
-  "12468" -> "12476" 
-  "12474" -> "12482" 
-  "12477" -> "12473" 
-  "12347" -> "12354" 
-  "12347" -> "12362" 
-  "12368" -> "12366" 
-  "12374" -> "12379" 
-  "12377" -> "12373" 
-  "12384" -> "12383" 
-  "12393" -> "12408" 
-  "12401" -> "12392" 
-  "12418" -> "12422" 
-  "12422" -> "12417" 
-  "12427" -> "12425" 
-  "12431" -> "12437" 
-  "12431" -> "12447" 
-  "12454" -> "12452" 
-  "12469" -> "12468" 
-  "12476" -> "12474" 
-  "12478" -> "12477" 
-  "12348" -> "12347" 
-  "12352" -> "12359" 
-  "12359" -> "12485" 
-  "12370" -> "12368" 
-  "12376" -> "12374" 
-  "12379" -> "12377" 
-  "12385" -> "12384" 
-  "12394" -> "12398" 
-  "12398" -> "12393" 
-  "12402" -> "12401" 
-  "12419" -> "12418" 
-  "12434" -> "12458" 
-  "12455" -> "12454" 
-  "12479" -> "12483" 
-  "12483" -> "12478" 
-  "12353" -> "12352" 
-  "12386" -> "12390" 
-  "12390" -> "12385" 
-  "12395" -> "12394" 
-  "12403" -> "12410" 
-  "12410" -> "12402" 
-  "12421" -> "12419" 
-  "12435" -> "12441" 
-  "12438" -> "12434" 
-  "12444" -> "12458" 
-  "12456" -> "12461" 
-  "12459" -> "12455" 
-  "12480" -> "12479" 
-  "12354" -> "12356" 
-  "12356" -> "12353" 
-  "12387" -> "12386" 
-  "12397" -> "12395" 
-  "12404" -> "12403" 
-  "12437" -> "12435" 
-  "12439" -> "12438" 
-  "12445" -> "12451" 
-  "12448" -> "12444" 
-  "12458" -> "12456" 
-  "12461" -> "12459" 
-  "12482" -> "12480" 
-  "12389" -> "12387" 
-  "12405" -> "12409" 
-  "12409" -> "12404" 
-  "12441" -> "12439" 
-  "12447" -> "12445" 
-  "12449" -> "12448" 
-  "12406" -> "12405" 
-  "12451" -> "12449" 
-  "12408" -> "12406" 
-  "12338" -> "12343" 
+digraph "GetCharArrayElements" {  
+"12247" [label = <(RETURN,return GetPrimitiveArray&lt;jcharArray, jchar, mirror::CharArray&gt;(env, array, is_copy);,return GetPrimitiveArray&lt;jcharArray, jchar, mirror::CharArray&gt;(env, array, is_copy);)<SUB>2150</SUB>> ]
+"12248" [label = <(GetPrimitiveArray&lt;jcharArray,jchar,mirror::CharArray&gt;,GetPrimitiveArray&lt;jcharArray, jchar, mirror::CharArray&gt;(env, array, is_copy))<SUB>2150</SUB>> ]
+"12242" [label = <(METHOD,GetCharArrayElements)<SUB>2149</SUB>> ]
+"12252" [label = <(METHOD_RETURN,jchar)<SUB>2149</SUB>> ]
+  "12247" -> "12252" 
+  "12248" -> "12247" 
+  "12242" -> "12248" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/214-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/214-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/214-cfg.dot	2023-06-07 19:35:01.537387158 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/214-cfg.dot	2023-06-07 19:35:08.077386510 +0330
@@ -1,112 +1,9 @@
-digraph "ReleasePrimitiveArrayCritical" {  
-"12493" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>2260</SUB>> ]
-"12511" [label = <(soa,soa(env))<SUB>2261</SUB>> ]
-"12513" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Array&gt; array = soa.Decode&lt;mirror::Array&gt;(java_array))<SUB>2262</SUB>> ]
-"12562" [label = <(&lt;operator&gt;.assignment,component_size = array-&gt;GetClass()-&gt;GetComponentSize())<SUB>2268</SUB>> ]
-"12571" [label = <(ReleasePrimitiveArray,ReleasePrimitiveArray(soa, array, component_size, elements, mode))<SUB>2269</SUB>> ]
-"12514" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Array&gt; array)<SUB>2262</SUB>> ]
-"12521" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Array&gt;(java_array))<SUB>2262</SUB>> ]
-"12531" [label = <(UNLIKELY,UNLIKELY(!array-&gt;GetClass()-&gt;IsPrimitiveArray()))<SUB>2263</SUB>> ]
-"12564" [label = <(GetComponentSize,array-&gt;GetClass()-&gt;GetComponentSize())<SUB>2268</SUB>> ]
-"12515" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Array)<SUB>2262</SUB>> ]
-"12522" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Array)<SUB>2262</SUB>> ]
-"12532" [label = <(&lt;operator&gt;.logicalNot,!array-&gt;GetClass()-&gt;IsPrimitiveArray())<SUB>2263</SUB>> ]
-"12541" [label = <(JniAbortF,soa.Vm()-&gt;JniAbortF(&quot;ReleasePrimitiveArrayCritical&quot;, &quot;expected primitive array, given %s&quot;,\012                          array-&gt;GetClass()-&gt;PrettyDescriptor().c_str()))<SUB>2264</SUB>> ]
-"12560" [label = <(RETURN,return;,return;)<SUB>2266</SUB>> ]
-"12565" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass()-&gt;GetComponentSize)<SUB>2268</SUB>> ]
-"12497" [label = <(UNLIKELY,UNLIKELY((java_array) == nullptr))<SUB>2260</SUB>> ]
-"12517" [label = <(&lt;operator&gt;.fieldAccess,mirror::Array)<SUB>2262</SUB>> ]
-"12523" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2262</SUB>> ]
-"12526" [label = <(&lt;operator&gt;.fieldAccess,mirror::Array)<SUB>2262</SUB>> ]
-"12533" [label = <(IsPrimitiveArray,array-&gt;GetClass()-&gt;IsPrimitiveArray())<SUB>2263</SUB>> ]
-"12542" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Vm()-&gt;JniAbortF)<SUB>2264</SUB>> ]
-"12550" [label = <(c_str,array-&gt;GetClass()-&gt;PrettyDescriptor().c_str())<SUB>2265</SUB>> ]
-"12566" [label = <(GetClass,array-&gt;GetClass())<SUB>2268</SUB>> ]
-"12570" [label = <(FIELD_IDENTIFIER,GetComponentSize,GetComponentSize)<SUB>2268</SUB>> ]
-"12498" [label = <(&lt;operator&gt;.equals,(java_array) == nullptr)<SUB>2260</SUB>> ]
-"12502" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_array == null&quot;))<SUB>2260</SUB>> ]
-"12509" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>2260</SUB>> ]
-"12519" [label = <(FIELD_IDENTIFIER,Array,Array)<SUB>2262</SUB>> ]
-"12525" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2262</SUB>> ]
-"12528" [label = <(FIELD_IDENTIFIER,Array,Array)<SUB>2262</SUB>> ]
-"12534" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass()-&gt;IsPrimitiveArray)<SUB>2263</SUB>> ]
-"12543" [label = <(Vm,soa.Vm())<SUB>2264</SUB>> ]
-"12547" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2264</SUB>> ]
-"12551" [label = <(&lt;operator&gt;.fieldAccess,array-&gt;GetClass()-&gt;PrettyDescriptor().c_str)<SUB>2265</SUB>> ]
-"12567" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass)<SUB>2268</SUB>> ]
-"12503" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2260</SUB>> ]
-"12535" [label = <(GetClass,array-&gt;GetClass())<SUB>2263</SUB>> ]
-"12539" [label = <(FIELD_IDENTIFIER,IsPrimitiveArray,IsPrimitiveArray)<SUB>2263</SUB>> ]
-"12544" [label = <(&lt;operator&gt;.fieldAccess,soa.Vm)<SUB>2264</SUB>> ]
-"12552" [label = <(PrettyDescriptor,array-&gt;GetClass()-&gt;PrettyDescriptor())<SUB>2265</SUB>> ]
-"12559" [label = <(FIELD_IDENTIFIER,c_str,c_str)<SUB>2265</SUB>> ]
-"12569" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>2268</SUB>> ]
-"12504" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2260</SUB>> ]
-"12506" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2260</SUB>> ]
-"12536" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass)<SUB>2263</SUB>> ]
-"12546" [label = <(FIELD_IDENTIFIER,Vm,Vm)<SUB>2264</SUB>> ]
-"12553" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass()-&gt;PrettyDescriptor)<SUB>2265</SUB>> ]
-"12538" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>2263</SUB>> ]
-"12554" [label = <(GetClass,array-&gt;GetClass())<SUB>2265</SUB>> ]
-"12558" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>2265</SUB>> ]
-"12555" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass)<SUB>2265</SUB>> ]
-"12557" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>2265</SUB>> ]
-"12487" [label = <(METHOD,ReleasePrimitiveArrayCritical)<SUB>2258</SUB>> ]
-"12577" [label = <(METHOD_RETURN,void)<SUB>2258</SUB>> ]
-  "12493" -> "12498" 
-  "12493" -> "12511" 
-  "12511" -> "12519" 
-  "12513" -> "12538" 
-  "12562" -> "12571" 
-  "12571" -> "12577" 
-  "12514" -> "12525" 
-  "12521" -> "12513" 
-  "12531" -> "12546" 
-  "12531" -> "12569" 
-  "12564" -> "12562" 
-  "12515" -> "12514" 
-  "12522" -> "12521" 
-  "12532" -> "12531" 
-  "12541" -> "12560" 
-  "12560" -> "12577" 
-  "12565" -> "12564" 
-  "12497" -> "12504" 
-  "12497" -> "12511" 
-  "12517" -> "12515" 
-  "12523" -> "12528" 
-  "12526" -> "12522" 
-  "12533" -> "12532" 
-  "12542" -> "12557" 
-  "12550" -> "12541" 
-  "12566" -> "12570" 
-  "12570" -> "12565" 
-  "12498" -> "12497" 
-  "12502" -> "12509" 
-  "12509" -> "12577" 
-  "12519" -> "12517" 
-  "12525" -> "12523" 
-  "12528" -> "12526" 
-  "12534" -> "12533" 
-  "12543" -> "12547" 
-  "12547" -> "12542" 
-  "12551" -> "12550" 
-  "12567" -> "12566" 
-  "12503" -> "12502" 
-  "12535" -> "12539" 
-  "12539" -> "12534" 
-  "12544" -> "12543" 
-  "12552" -> "12559" 
-  "12559" -> "12551" 
-  "12569" -> "12567" 
-  "12504" -> "12506" 
-  "12506" -> "12503" 
-  "12536" -> "12535" 
-  "12546" -> "12544" 
-  "12553" -> "12552" 
-  "12538" -> "12536" 
-  "12554" -> "12558" 
-  "12558" -> "12553" 
-  "12555" -> "12554" 
-  "12557" -> "12555" 
-  "12487" -> "12493" 
+digraph "GetDoubleArrayElements" {  
+"12259" [label = <(RETURN,return GetPrimitiveArray&lt;jdoubleArray, jdouble, mirror::DoubleArray&gt;(env, array, is_copy);,return GetPrimitiveArray&lt;jdoubleArray, jdouble, mirror::DoubleArray&gt;(env, array, is_copy);)<SUB>2154</SUB>> ]
+"12260" [label = <(GetPrimitiveArray&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;,GetPrimitiveArray&lt;jdoubleArray, jdouble, mirror::DoubleArray&gt;(env, array, is_copy))<SUB>2154</SUB>> ]
+"12254" [label = <(METHOD,GetDoubleArrayElements)<SUB>2153</SUB>> ]
+"12264" [label = <(METHOD_RETURN,jdouble)<SUB>2153</SUB>> ]
+  "12259" -> "12264" 
+  "12260" -> "12259" 
+  "12254" -> "12260" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/215-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/215-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/215-cfg.dot	2023-06-07 19:35:01.537387158 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/215-cfg.dot	2023-06-07 19:35:08.077386510 +0330
@@ -1,9 +1,9 @@
-digraph "GetBooleanArrayElements" {  
-"12584" [label = <(RETURN,return GetPrimitiveArray&lt;jbooleanArray, jboolean, mirror::BooleanArray&gt;(env, array, is_copy);,return GetPrimitiveArray&lt;jbooleanArray, jboolean, mirror::BooleanArray&gt;(env, array, is_copy);)<SUB>2273</SUB>> ]
-"12585" [label = <(GetPrimitiveArray&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;,GetPrimitiveArray&lt;jbooleanArray, jboolean, mirror::BooleanArray&gt;(env, array, is_copy))<SUB>2273</SUB>> ]
-"12579" [label = <(METHOD,GetBooleanArrayElements)<SUB>2272</SUB>> ]
-"12589" [label = <(METHOD_RETURN,jboolean)<SUB>2272</SUB>> ]
-  "12584" -> "12589" 
-  "12585" -> "12584" 
-  "12579" -> "12585" 
+digraph "GetFloatArrayElements" {  
+"12271" [label = <(RETURN,return GetPrimitiveArray&lt;jfloatArray, jfloat, mirror::FloatArray&gt;(env, array, is_copy);,return GetPrimitiveArray&lt;jfloatArray, jfloat, mirror::FloatArray&gt;(env, array, is_copy);)<SUB>2158</SUB>> ]
+"12272" [label = <(GetPrimitiveArray&lt;jfloatArray,jfloat,mirror::FloatArray&gt;,GetPrimitiveArray&lt;jfloatArray, jfloat, mirror::FloatArray&gt;(env, array, is_copy))<SUB>2158</SUB>> ]
+"12266" [label = <(METHOD,GetFloatArrayElements)<SUB>2157</SUB>> ]
+"12276" [label = <(METHOD_RETURN,jfloat)<SUB>2157</SUB>> ]
+  "12271" -> "12276" 
+  "12272" -> "12271" 
+  "12266" -> "12272" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/216-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/216-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/216-cfg.dot	2023-06-07 19:35:01.537387158 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/216-cfg.dot	2023-06-07 19:35:08.077386510 +0330
@@ -1,9 +1,9 @@
-digraph "GetByteArrayElements" {  
-"12596" [label = <(RETURN,return GetPrimitiveArray&lt;jbyteArray, jbyte, mirror::ByteArray&gt;(env, array, is_copy);,return GetPrimitiveArray&lt;jbyteArray, jbyte, mirror::ByteArray&gt;(env, array, is_copy);)<SUB>2277</SUB>> ]
-"12597" [label = <(GetPrimitiveArray&lt;jbyteArray,jbyte,mirror::ByteArray&gt;,GetPrimitiveArray&lt;jbyteArray, jbyte, mirror::ByteArray&gt;(env, array, is_copy))<SUB>2277</SUB>> ]
-"12591" [label = <(METHOD,GetByteArrayElements)<SUB>2276</SUB>> ]
-"12601" [label = <(METHOD_RETURN,jbyte)<SUB>2276</SUB>> ]
-  "12596" -> "12601" 
-  "12597" -> "12596" 
-  "12591" -> "12597" 
+digraph "GetIntArrayElements" {  
+"12283" [label = <(RETURN,return GetPrimitiveArray&lt;jintArray, jint, mirror::IntArray&gt;(env, array, is_copy);,return GetPrimitiveArray&lt;jintArray, jint, mirror::IntArray&gt;(env, array, is_copy);)<SUB>2162</SUB>> ]
+"12284" [label = <(GetPrimitiveArray&lt;jintArray,jint,mirror::IntArray&gt;,GetPrimitiveArray&lt;jintArray, jint, mirror::IntArray&gt;(env, array, is_copy))<SUB>2162</SUB>> ]
+"12278" [label = <(METHOD,GetIntArrayElements)<SUB>2161</SUB>> ]
+"12288" [label = <(METHOD_RETURN,jint)<SUB>2161</SUB>> ]
+  "12283" -> "12288" 
+  "12284" -> "12283" 
+  "12278" -> "12284" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/217-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/217-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/217-cfg.dot	2023-06-07 19:35:01.537387158 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/217-cfg.dot	2023-06-07 19:35:08.077386510 +0330
@@ -1,9 +1,9 @@
-digraph "GetCharArrayElements" {  
-"12608" [label = <(RETURN,return GetPrimitiveArray&lt;jcharArray, jchar, mirror::CharArray&gt;(env, array, is_copy);,return GetPrimitiveArray&lt;jcharArray, jchar, mirror::CharArray&gt;(env, array, is_copy);)<SUB>2281</SUB>> ]
-"12609" [label = <(GetPrimitiveArray&lt;jcharArray,jchar,mirror::CharArray&gt;,GetPrimitiveArray&lt;jcharArray, jchar, mirror::CharArray&gt;(env, array, is_copy))<SUB>2281</SUB>> ]
-"12603" [label = <(METHOD,GetCharArrayElements)<SUB>2280</SUB>> ]
-"12613" [label = <(METHOD_RETURN,jchar)<SUB>2280</SUB>> ]
-  "12608" -> "12613" 
-  "12609" -> "12608" 
-  "12603" -> "12609" 
+digraph "GetLongArrayElements" {  
+"12295" [label = <(RETURN,return GetPrimitiveArray&lt;jlongArray, jlong, mirror::LongArray&gt;(env, array, is_copy);,return GetPrimitiveArray&lt;jlongArray, jlong, mirror::LongArray&gt;(env, array, is_copy);)<SUB>2166</SUB>> ]
+"12296" [label = <(GetPrimitiveArray&lt;jlongArray,jlong,mirror::LongArray&gt;,GetPrimitiveArray&lt;jlongArray, jlong, mirror::LongArray&gt;(env, array, is_copy))<SUB>2166</SUB>> ]
+"12290" [label = <(METHOD,GetLongArrayElements)<SUB>2165</SUB>> ]
+"12300" [label = <(METHOD_RETURN,jlong)<SUB>2165</SUB>> ]
+  "12295" -> "12300" 
+  "12296" -> "12295" 
+  "12290" -> "12296" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/218-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/218-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/218-cfg.dot	2023-06-07 19:35:01.537387158 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/218-cfg.dot	2023-06-07 19:35:08.077386510 +0330
@@ -1,9 +1,9 @@
-digraph "GetDoubleArrayElements" {  
-"12620" [label = <(RETURN,return GetPrimitiveArray&lt;jdoubleArray, jdouble, mirror::DoubleArray&gt;(env, array, is_copy);,return GetPrimitiveArray&lt;jdoubleArray, jdouble, mirror::DoubleArray&gt;(env, array, is_copy);)<SUB>2285</SUB>> ]
-"12621" [label = <(GetPrimitiveArray&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;,GetPrimitiveArray&lt;jdoubleArray, jdouble, mirror::DoubleArray&gt;(env, array, is_copy))<SUB>2285</SUB>> ]
-"12615" [label = <(METHOD,GetDoubleArrayElements)<SUB>2284</SUB>> ]
-"12625" [label = <(METHOD_RETURN,jdouble)<SUB>2284</SUB>> ]
-  "12620" -> "12625" 
-  "12621" -> "12620" 
-  "12615" -> "12621" 
+digraph "GetShortArrayElements" {  
+"12307" [label = <(RETURN,return GetPrimitiveArray&lt;jshortArray, jshort, mirror::ShortArray&gt;(env, array, is_copy);,return GetPrimitiveArray&lt;jshortArray, jshort, mirror::ShortArray&gt;(env, array, is_copy);)<SUB>2170</SUB>> ]
+"12308" [label = <(GetPrimitiveArray&lt;jshortArray,jshort,mirror::ShortArray&gt;,GetPrimitiveArray&lt;jshortArray, jshort, mirror::ShortArray&gt;(env, array, is_copy))<SUB>2170</SUB>> ]
+"12302" [label = <(METHOD,GetShortArrayElements)<SUB>2169</SUB>> ]
+"12312" [label = <(METHOD_RETURN,jshort)<SUB>2169</SUB>> ]
+  "12307" -> "12312" 
+  "12308" -> "12307" 
+  "12302" -> "12308" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/219-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/219-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/219-cfg.dot	2023-06-07 19:35:01.537387158 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/219-cfg.dot	2023-06-07 19:35:08.077386510 +0330
@@ -1,9 +1,7 @@
-digraph "GetFloatArrayElements" {  
-"12632" [label = <(RETURN,return GetPrimitiveArray&lt;jfloatArray, jfloat, mirror::FloatArray&gt;(env, array, is_copy);,return GetPrimitiveArray&lt;jfloatArray, jfloat, mirror::FloatArray&gt;(env, array, is_copy);)<SUB>2289</SUB>> ]
-"12633" [label = <(GetPrimitiveArray&lt;jfloatArray,jfloat,mirror::FloatArray&gt;,GetPrimitiveArray&lt;jfloatArray, jfloat, mirror::FloatArray&gt;(env, array, is_copy))<SUB>2289</SUB>> ]
-"12627" [label = <(METHOD,GetFloatArrayElements)<SUB>2288</SUB>> ]
-"12637" [label = <(METHOD_RETURN,jfloat)<SUB>2288</SUB>> ]
-  "12632" -> "12637" 
-  "12633" -> "12632" 
-  "12627" -> "12633" 
+digraph "ReleaseBooleanArrayElements" {  
+"12320" [label = <(ReleasePrimitiveArray&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;,ReleasePrimitiveArray&lt;jbooleanArray, jboolean, mirror::BooleanArray&gt;(env, array, elements,\012                                                                         mode))<SUB>2175</SUB>> ]
+"12314" [label = <(METHOD,ReleaseBooleanArrayElements)<SUB>2173</SUB>> ]
+"12325" [label = <(METHOD_RETURN,void)<SUB>2173</SUB>> ]
+  "12320" -> "12325" 
+  "12314" -> "12320" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/22-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/22-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/22-cfg.dot	2023-06-07 19:35:01.347387178 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/22-cfg.dot	2023-06-07 19:35:07.917386527 +0330
@@ -1,123 +1,5 @@
-digraph "FindMethodJNI" {  
-"484" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c = EnsureInitialized(soa.Self(), soa.Decode&lt;mirror::Class&gt;(jni_class)))<SUB>397</SUB>> ]
-"514" [label = <(&lt;operator&gt;.assignment,* method = nullptr)<SUB>401</SUB>> ]
-"518" [label = <(&lt;operator&gt;.assignment,pointer_size = Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize())<SUB>402</SUB>> ]
-"594" [label = <(RETURN,return method;,return method;)<SUB>415</SUB>> ]
-"485" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c)<SUB>397</SUB>> ]
-"492" [label = <(EnsureInitialized,EnsureInitialized(soa.Self(), soa.Decode&lt;mirror::Class&gt;(jni_class)))<SUB>397</SUB>> ]
-"507" [label = <(&lt;operator&gt;.equals,c == nullptr)<SUB>398</SUB>> ]
-"520" [label = <(GetImagePointerSize,Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize())<SUB>402</SUB>> ]
-"531" [label = <(IsInterface,c-&gt;IsInterface())<SUB>403</SUB>> ]
-"557" [label = <(&lt;operator&gt;.logicalAnd,method != nullptr &amp;&amp; ShouldDenyAccessToMember(method, soa.Self()))<SUB>408</SUB>> ]
-"572" [label = <(&lt;operator&gt;.logicalOr,method == nullptr || method-&gt;IsStatic() != is_static)<SUB>411</SUB>> ]
-"486" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>397</SUB>> ]
-"493" [label = <(Self,soa.Self())<SUB>397</SUB>> ]
-"497" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(jni_class))<SUB>397</SUB>> ]
-"511" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>399</SUB>> ]
-"521" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize)<SUB>402</SUB>> ]
-"532" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;IsInterface)<SUB>403</SUB>> ]
-"536" [label = <(&lt;operator&gt;.assignment,method = c-&gt;FindInterfaceMethod(name, sig, pointer_size))<SUB>404</SUB>> ]
-"558" [label = <(&lt;operator&gt;.notEquals,method != nullptr)<SUB>408</SUB>> ]
-"561" [label = <(ShouldDenyAccessToMember,ShouldDenyAccessToMember(method, soa.Self()))<SUB>408</SUB>> ]
-"568" [label = <(&lt;operator&gt;.assignment,method = nullptr)<SUB>409</SUB>> ]
-"573" [label = <(&lt;operator&gt;.equals,method == nullptr)<SUB>411</SUB>> ]
-"576" [label = <(&lt;operator&gt;.notEquals,method-&gt;IsStatic() != is_static)<SUB>411</SUB>> ]
-"583" [label = <(ThrowNoSuchMethodError,ThrowNoSuchMethodError(soa, c, name, sig, is_static ? &quot;static&quot; : &quot;non-static&quot;))<SUB>412</SUB>> ]
-"592" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>413</SUB>> ]
-"488" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>397</SUB>> ]
-"494" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>397</SUB>> ]
-"498" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>397</SUB>> ]
-"522" [label = <(GetClassLinker,Runtime::Current()-&gt;GetClassLinker())<SUB>402</SUB>> ]
-"529" [label = <(FIELD_IDENTIFIER,GetImagePointerSize,GetImagePointerSize)<SUB>402</SUB>> ]
-"534" [label = <(FIELD_IDENTIFIER,IsInterface,IsInterface)<SUB>403</SUB>> ]
-"538" [label = <(FindInterfaceMethod,c-&gt;FindInterfaceMethod(name, sig, pointer_size))<SUB>404</SUB>> ]
-"547" [label = <(&lt;operator&gt;.assignment,method = c-&gt;FindClassMethod(name, sig, pointer_size))<SUB>406</SUB>> ]
-"563" [label = <(Self,soa.Self())<SUB>408</SUB>> ]
-"577" [label = <(IsStatic,method-&gt;IsStatic())<SUB>411</SUB>> ]
-"588" [label = <(&lt;operator&gt;.conditional,is_static ? &quot;static&quot; : &quot;non-static&quot;)<SUB>412</SUB>> ]
-"490" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>397</SUB>> ]
-"496" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>397</SUB>> ]
-"499" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>397</SUB>> ]
-"502" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>397</SUB>> ]
-"523" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetClassLinker)<SUB>402</SUB>> ]
-"539" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;FindInterfaceMethod)<SUB>404</SUB>> ]
-"549" [label = <(FindClassMethod,c-&gt;FindClassMethod(name, sig, pointer_size))<SUB>406</SUB>> ]
-"564" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>408</SUB>> ]
-"578" [label = <(&lt;operator&gt;.indirectFieldAccess,method-&gt;IsStatic)<SUB>411</SUB>> ]
-"501" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>397</SUB>> ]
-"504" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>397</SUB>> ]
-"524" [label = <(Runtime::Current,Runtime::Current())<SUB>402</SUB>> ]
-"528" [label = <(FIELD_IDENTIFIER,GetClassLinker,GetClassLinker)<SUB>402</SUB>> ]
-"541" [label = <(FIELD_IDENTIFIER,FindInterfaceMethod,FindInterfaceMethod)<SUB>404</SUB>> ]
-"550" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;FindClassMethod)<SUB>406</SUB>> ]
-"566" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>408</SUB>> ]
-"580" [label = <(FIELD_IDENTIFIER,IsStatic,IsStatic)<SUB>411</SUB>> ]
-"525" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>402</SUB>> ]
-"552" [label = <(FIELD_IDENTIFIER,FindClassMethod,FindClassMethod)<SUB>406</SUB>> ]
-"527" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>402</SUB>> ]
-"477" [label = <(METHOD,FindMethodJNI)<SUB>392</SUB>> ]
-"596" [label = <(METHOD_RETURN,ArtMethod)<SUB>392</SUB>> ]
-  "484" -> "507" 
-  "514" -> "527" 
-  "518" -> "534" 
-  "594" -> "596" 
-  "485" -> "496" 
-  "492" -> "484" 
-  "507" -> "511" 
-  "507" -> "514" 
-  "520" -> "518" 
-  "531" -> "541" 
-  "531" -> "552" 
-  "557" -> "568" 
-  "557" -> "573" 
-  "572" -> "588" 
-  "572" -> "594" 
-  "486" -> "485" 
-  "493" -> "501" 
-  "497" -> "492" 
-  "511" -> "596" 
-  "521" -> "520" 
-  "532" -> "531" 
-  "536" -> "558" 
-  "558" -> "557" 
-  "558" -> "566" 
-  "561" -> "557" 
-  "568" -> "573" 
-  "573" -> "572" 
-  "573" -> "580" 
-  "576" -> "572" 
-  "583" -> "592" 
-  "592" -> "596" 
-  "488" -> "486" 
-  "494" -> "493" 
-  "498" -> "497" 
-  "522" -> "529" 
-  "529" -> "521" 
-  "534" -> "532" 
-  "538" -> "536" 
-  "547" -> "558" 
-  "563" -> "561" 
-  "577" -> "576" 
-  "588" -> "583" 
-  "490" -> "488" 
-  "496" -> "494" 
-  "499" -> "504" 
-  "502" -> "498" 
-  "523" -> "522" 
-  "539" -> "538" 
-  "549" -> "547" 
-  "564" -> "563" 
-  "578" -> "577" 
-  "501" -> "499" 
-  "504" -> "502" 
-  "524" -> "528" 
-  "528" -> "523" 
-  "541" -> "539" 
-  "550" -> "549" 
-  "566" -> "564" 
-  "580" -> "578" 
-  "525" -> "524" 
-  "552" -> "550" 
-  "527" -> "525" 
-  "477" -> "490" 
+digraph "FindMethod" {  
+"730" [label = <(METHOD,FindMethod)<SUB>468</SUB>> ]
+"735" [label = <(METHOD_RETURN,ArtMethod*)<SUB>468</SUB>> ]
+  "730" -> "735" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/220-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/220-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/220-cfg.dot	2023-06-07 19:35:01.537387158 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/220-cfg.dot	2023-06-07 19:35:08.077386510 +0330
@@ -1,9 +1,7 @@
-digraph "GetIntArrayElements" {  
-"12644" [label = <(RETURN,return GetPrimitiveArray&lt;jintArray, jint, mirror::IntArray&gt;(env, array, is_copy);,return GetPrimitiveArray&lt;jintArray, jint, mirror::IntArray&gt;(env, array, is_copy);)<SUB>2293</SUB>> ]
-"12645" [label = <(GetPrimitiveArray&lt;jintArray,jint,mirror::IntArray&gt;,GetPrimitiveArray&lt;jintArray, jint, mirror::IntArray&gt;(env, array, is_copy))<SUB>2293</SUB>> ]
-"12639" [label = <(METHOD,GetIntArrayElements)<SUB>2292</SUB>> ]
-"12649" [label = <(METHOD_RETURN,jint)<SUB>2292</SUB>> ]
-  "12644" -> "12649" 
-  "12645" -> "12644" 
-  "12639" -> "12645" 
+digraph "ReleaseByteArrayElements" {  
+"12333" [label = <(ReleasePrimitiveArray&lt;jbyteArray,jbyte,mirror::ByteArray&gt;,ReleasePrimitiveArray&lt;jbyteArray, jbyte, mirror::ByteArray&gt;(env, array, elements, mode))<SUB>2180</SUB>> ]
+"12327" [label = <(METHOD,ReleaseByteArrayElements)<SUB>2179</SUB>> ]
+"12338" [label = <(METHOD_RETURN,void)<SUB>2179</SUB>> ]
+  "12333" -> "12338" 
+  "12327" -> "12333" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/221-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/221-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/221-cfg.dot	2023-06-07 19:35:01.537387158 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/221-cfg.dot	2023-06-07 19:35:08.077386510 +0330
@@ -1,9 +1,7 @@
-digraph "GetLongArrayElements" {  
-"12656" [label = <(RETURN,return GetPrimitiveArray&lt;jlongArray, jlong, mirror::LongArray&gt;(env, array, is_copy);,return GetPrimitiveArray&lt;jlongArray, jlong, mirror::LongArray&gt;(env, array, is_copy);)<SUB>2297</SUB>> ]
-"12657" [label = <(GetPrimitiveArray&lt;jlongArray,jlong,mirror::LongArray&gt;,GetPrimitiveArray&lt;jlongArray, jlong, mirror::LongArray&gt;(env, array, is_copy))<SUB>2297</SUB>> ]
-"12651" [label = <(METHOD,GetLongArrayElements)<SUB>2296</SUB>> ]
-"12661" [label = <(METHOD_RETURN,jlong)<SUB>2296</SUB>> ]
-  "12656" -> "12661" 
-  "12657" -> "12656" 
-  "12651" -> "12657" 
+digraph "ReleaseCharArrayElements" {  
+"12346" [label = <(ReleasePrimitiveArray&lt;jcharArray,jchar,mirror::CharArray&gt;,ReleasePrimitiveArray&lt;jcharArray, jchar, mirror::CharArray&gt;(env, array, elements, mode))<SUB>2184</SUB>> ]
+"12340" [label = <(METHOD,ReleaseCharArrayElements)<SUB>2183</SUB>> ]
+"12351" [label = <(METHOD_RETURN,void)<SUB>2183</SUB>> ]
+  "12346" -> "12351" 
+  "12340" -> "12346" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/222-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/222-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/222-cfg.dot	2023-06-07 19:35:01.537387158 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/222-cfg.dot	2023-06-07 19:35:08.077386510 +0330
@@ -1,9 +1,7 @@
-digraph "GetShortArrayElements" {  
-"12668" [label = <(RETURN,return GetPrimitiveArray&lt;jshortArray, jshort, mirror::ShortArray&gt;(env, array, is_copy);,return GetPrimitiveArray&lt;jshortArray, jshort, mirror::ShortArray&gt;(env, array, is_copy);)<SUB>2301</SUB>> ]
-"12669" [label = <(GetPrimitiveArray&lt;jshortArray,jshort,mirror::ShortArray&gt;,GetPrimitiveArray&lt;jshortArray, jshort, mirror::ShortArray&gt;(env, array, is_copy))<SUB>2301</SUB>> ]
-"12663" [label = <(METHOD,GetShortArrayElements)<SUB>2300</SUB>> ]
-"12673" [label = <(METHOD_RETURN,jshort)<SUB>2300</SUB>> ]
-  "12668" -> "12673" 
-  "12669" -> "12668" 
-  "12663" -> "12669" 
+digraph "ReleaseDoubleArrayElements" {  
+"12359" [label = <(ReleasePrimitiveArray&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;,ReleasePrimitiveArray&lt;jdoubleArray, jdouble, mirror::DoubleArray&gt;(env, array, elements, mode))<SUB>2189</SUB>> ]
+"12353" [label = <(METHOD,ReleaseDoubleArrayElements)<SUB>2187</SUB>> ]
+"12364" [label = <(METHOD_RETURN,void)<SUB>2187</SUB>> ]
+  "12359" -> "12364" 
+  "12353" -> "12359" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/223-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/223-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/223-cfg.dot	2023-06-07 19:35:01.547387157 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/223-cfg.dot	2023-06-07 19:35:08.077386510 +0330
@@ -1,7 +1,7 @@
-digraph "ReleaseBooleanArrayElements" {  
-"12681" [label = <(ReleasePrimitiveArray&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;,ReleasePrimitiveArray&lt;jbooleanArray, jboolean, mirror::BooleanArray&gt;(env, array, elements,\012                                                                         mode))<SUB>2306</SUB>> ]
-"12675" [label = <(METHOD,ReleaseBooleanArrayElements)<SUB>2304</SUB>> ]
-"12686" [label = <(METHOD_RETURN,void)<SUB>2304</SUB>> ]
-  "12681" -> "12686" 
-  "12675" -> "12681" 
+digraph "ReleaseFloatArrayElements" {  
+"12372" [label = <(ReleasePrimitiveArray&lt;jfloatArray,jfloat,mirror::FloatArray&gt;,ReleasePrimitiveArray&lt;jfloatArray, jfloat, mirror::FloatArray&gt;(env, array, elements, mode))<SUB>2194</SUB>> ]
+"12366" [label = <(METHOD,ReleaseFloatArrayElements)<SUB>2192</SUB>> ]
+"12377" [label = <(METHOD_RETURN,void)<SUB>2192</SUB>> ]
+  "12372" -> "12377" 
+  "12366" -> "12372" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/224-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/224-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/224-cfg.dot	2023-06-07 19:35:01.547387157 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/224-cfg.dot	2023-06-07 19:35:08.077386510 +0330
@@ -1,7 +1,7 @@
-digraph "ReleaseByteArrayElements" {  
-"12694" [label = <(ReleasePrimitiveArray&lt;jbyteArray,jbyte,mirror::ByteArray&gt;,ReleasePrimitiveArray&lt;jbyteArray, jbyte, mirror::ByteArray&gt;(env, array, elements, mode))<SUB>2311</SUB>> ]
-"12688" [label = <(METHOD,ReleaseByteArrayElements)<SUB>2310</SUB>> ]
-"12699" [label = <(METHOD_RETURN,void)<SUB>2310</SUB>> ]
-  "12694" -> "12699" 
-  "12688" -> "12694" 
+digraph "ReleaseIntArrayElements" {  
+"12385" [label = <(ReleasePrimitiveArray&lt;jintArray,jint,mirror::IntArray&gt;,ReleasePrimitiveArray&lt;jintArray, jint, mirror::IntArray&gt;(env, array, elements, mode))<SUB>2198</SUB>> ]
+"12379" [label = <(METHOD,ReleaseIntArrayElements)<SUB>2197</SUB>> ]
+"12390" [label = <(METHOD_RETURN,void)<SUB>2197</SUB>> ]
+  "12385" -> "12390" 
+  "12379" -> "12385" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/225-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/225-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/225-cfg.dot	2023-06-07 19:35:01.547387157 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/225-cfg.dot	2023-06-07 19:35:08.077386510 +0330
@@ -1,7 +1,7 @@
-digraph "ReleaseCharArrayElements" {  
-"12707" [label = <(ReleasePrimitiveArray&lt;jcharArray,jchar,mirror::CharArray&gt;,ReleasePrimitiveArray&lt;jcharArray, jchar, mirror::CharArray&gt;(env, array, elements, mode))<SUB>2315</SUB>> ]
-"12701" [label = <(METHOD,ReleaseCharArrayElements)<SUB>2314</SUB>> ]
-"12712" [label = <(METHOD_RETURN,void)<SUB>2314</SUB>> ]
-  "12707" -> "12712" 
-  "12701" -> "12707" 
+digraph "ReleaseLongArrayElements" {  
+"12398" [label = <(ReleasePrimitiveArray&lt;jlongArray,jlong,mirror::LongArray&gt;,ReleasePrimitiveArray&lt;jlongArray, jlong, mirror::LongArray&gt;(env, array, elements, mode))<SUB>2202</SUB>> ]
+"12392" [label = <(METHOD,ReleaseLongArrayElements)<SUB>2201</SUB>> ]
+"12403" [label = <(METHOD_RETURN,void)<SUB>2201</SUB>> ]
+  "12398" -> "12403" 
+  "12392" -> "12398" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/226-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/226-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/226-cfg.dot	2023-06-07 19:35:01.547387157 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/226-cfg.dot	2023-06-07 19:35:08.077386510 +0330
@@ -1,7 +1,7 @@
-digraph "ReleaseDoubleArrayElements" {  
-"12720" [label = <(ReleasePrimitiveArray&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;,ReleasePrimitiveArray&lt;jdoubleArray, jdouble, mirror::DoubleArray&gt;(env, array, elements, mode))<SUB>2320</SUB>> ]
-"12714" [label = <(METHOD,ReleaseDoubleArrayElements)<SUB>2318</SUB>> ]
-"12725" [label = <(METHOD_RETURN,void)<SUB>2318</SUB>> ]
-  "12720" -> "12725" 
-  "12714" -> "12720" 
+digraph "ReleaseShortArrayElements" {  
+"12411" [label = <(ReleasePrimitiveArray&lt;jshortArray,jshort,mirror::ShortArray&gt;,ReleasePrimitiveArray&lt;jshortArray, jshort, mirror::ShortArray&gt;(env, array, elements, mode))<SUB>2207</SUB>> ]
+"12405" [label = <(METHOD,ReleaseShortArrayElements)<SUB>2205</SUB>> ]
+"12416" [label = <(METHOD_RETURN,void)<SUB>2205</SUB>> ]
+  "12411" -> "12416" 
+  "12405" -> "12411" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/227-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/227-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/227-cfg.dot	2023-06-07 19:35:01.547387157 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/227-cfg.dot	2023-06-07 19:35:08.077386510 +0330
@@ -1,7 +1,7 @@
-digraph "ReleaseFloatArrayElements" {  
-"12733" [label = <(ReleasePrimitiveArray&lt;jfloatArray,jfloat,mirror::FloatArray&gt;,ReleasePrimitiveArray&lt;jfloatArray, jfloat, mirror::FloatArray&gt;(env, array, elements, mode))<SUB>2325</SUB>> ]
-"12727" [label = <(METHOD,ReleaseFloatArrayElements)<SUB>2323</SUB>> ]
-"12738" [label = <(METHOD_RETURN,void)<SUB>2323</SUB>> ]
-  "12733" -> "12738" 
-  "12727" -> "12733" 
+digraph "GetBooleanArrayRegion" {  
+"12425" [label = <(GetPrimitiveArrayRegion&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;,GetPrimitiveArrayRegion&lt;jbooleanArray, jboolean, mirror::BooleanArray&gt;(env, array, start,\012                                                                           length, buf))<SUB>2212</SUB>> ]
+"12418" [label = <(METHOD,GetBooleanArrayRegion)<SUB>2210</SUB>> ]
+"12431" [label = <(METHOD_RETURN,void)<SUB>2210</SUB>> ]
+  "12425" -> "12431" 
+  "12418" -> "12425" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/228-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/228-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/228-cfg.dot	2023-06-07 19:35:01.547387157 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/228-cfg.dot	2023-06-07 19:35:08.077386510 +0330
@@ -1,7 +1,7 @@
-digraph "ReleaseIntArrayElements" {  
-"12746" [label = <(ReleasePrimitiveArray&lt;jintArray,jint,mirror::IntArray&gt;,ReleasePrimitiveArray&lt;jintArray, jint, mirror::IntArray&gt;(env, array, elements, mode))<SUB>2329</SUB>> ]
-"12740" [label = <(METHOD,ReleaseIntArrayElements)<SUB>2328</SUB>> ]
-"12751" [label = <(METHOD_RETURN,void)<SUB>2328</SUB>> ]
-  "12746" -> "12751" 
-  "12740" -> "12746" 
+digraph "GetByteArrayRegion" {  
+"12440" [label = <(GetPrimitiveArrayRegion&lt;jbyteArray,jbyte,mirror::ByteArray&gt;,GetPrimitiveArrayRegion&lt;jbyteArray, jbyte, mirror::ByteArray&gt;(env, array, start, length, buf))<SUB>2218</SUB>> ]
+"12433" [label = <(METHOD,GetByteArrayRegion)<SUB>2216</SUB>> ]
+"12446" [label = <(METHOD_RETURN,void)<SUB>2216</SUB>> ]
+  "12440" -> "12446" 
+  "12433" -> "12440" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/229-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/229-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/229-cfg.dot	2023-06-07 19:35:01.547387157 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/229-cfg.dot	2023-06-07 19:35:08.077386510 +0330
@@ -1,7 +1,7 @@
-digraph "ReleaseLongArrayElements" {  
-"12759" [label = <(ReleasePrimitiveArray&lt;jlongArray,jlong,mirror::LongArray&gt;,ReleasePrimitiveArray&lt;jlongArray, jlong, mirror::LongArray&gt;(env, array, elements, mode))<SUB>2333</SUB>> ]
-"12753" [label = <(METHOD,ReleaseLongArrayElements)<SUB>2332</SUB>> ]
-"12764" [label = <(METHOD_RETURN,void)<SUB>2332</SUB>> ]
-  "12759" -> "12764" 
-  "12753" -> "12759" 
+digraph "GetCharArrayRegion" {  
+"12455" [label = <(GetPrimitiveArrayRegion&lt;jcharArray,jchar,mirror::CharArray&gt;,GetPrimitiveArrayRegion&lt;jcharArray, jchar, mirror::CharArray&gt;(env, array, start, length, buf))<SUB>2223</SUB>> ]
+"12448" [label = <(METHOD,GetCharArrayRegion)<SUB>2221</SUB>> ]
+"12461" [label = <(METHOD_RETURN,void)<SUB>2221</SUB>> ]
+  "12455" -> "12461" 
+  "12448" -> "12455" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/23-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/23-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/23-cfg.dot	2023-06-07 19:35:01.347387178 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/23-cfg.dot	2023-06-07 19:35:07.917386527 +0330
@@ -1,359 +1,7 @@
-digraph "FindFieldJNI" {  
-"605" [label = <(&lt;operator&gt;.greaterThan,StackHandleScope&lt;2&gt; hs(soa.Self()))<SUB>423</SUB>> ]
-"614" [label = <(&lt;operator&gt;.greaterThan,Handle&lt;mirror::Class&gt; c(\012      hs.NewHandle(EnsureInitialized(soa.Self(), soa.Decode&lt;mirror::Class&gt;(jni_class)))))<SUB>424</SUB>> ]
-"647" [label = <(&lt;operator&gt;.assignment,* field = nullptr)<SUB>429</SUB>> ]
-"650" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; field_type)<SUB>430</SUB>> ]
-"658" [label = <(&lt;operator&gt;.assignment,* class_linker = Runtime::Current()-&gt;GetClassLinker())<SUB>431</SUB>> ]
-"898" [label = <(RETURN,return field;,return field;)<SUB>472</SUB>> ]
-"606" [label = <(&lt;operator&gt;.lessThan,StackHandleScope&lt;2)<SUB>423</SUB>> ]
-"609" [label = <(hs,hs(soa.Self()))<SUB>423</SUB>> ]
-"615" [label = <(&lt;operator&gt;.lessThan,Handle&lt;mirror::Class)<SUB>424</SUB>> ]
-"620" [label = <(c,c(\012      hs.NewHandle(EnsureInitialized(soa.Self(), soa.Decode&lt;mirror::Class&gt;(jni_class)))))<SUB>424</SUB>> ]
-"640" [label = <(&lt;operator&gt;.equals,c == nullptr)<SUB>426</SUB>> ]
-"651" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>430</SUB>> ]
-"660" [label = <(GetClassLinker,Runtime::Current()-&gt;GetClassLinker())<SUB>431</SUB>> ]
-"668" [label = <(UNLIKELY,UNLIKELY(sig[0] == '\0'))<SUB>432</SUB>> ]
-"726" [label = <(&lt;operator&gt;.equals,field_type == nullptr)<SUB>440</SUB>> ]
-"860" [label = <(&lt;operator&gt;.logicalAnd,field != nullptr &amp;&amp; ShouldDenyAccessToMember(field, soa.Self()))<SUB>463</SUB>> ]
-"875" [label = <(&lt;operator&gt;.equals,field == nullptr)<SUB>466</SUB>> ]
-"610" [label = <(Self,soa.Self())<SUB>423</SUB>> ]
-"617" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>424</SUB>> ]
-"621" [label = <(NewHandle,hs.NewHandle(EnsureInitialized(soa.Self(), soa.Decode&lt;mirror::Class&gt;(jni_class))))<SUB>425</SUB>> ]
-"644" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>427</SUB>> ]
-"653" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>430</SUB>> ]
-"661" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetClassLinker)<SUB>431</SUB>> ]
-"669" [label = <(&lt;operator&gt;.equals,sig[0] == '\0')<SUB>432</SUB>> ]
-"675" [label = <(DCHECK,DCHECK(field == nullptr))<SUB>433</SUB>> ]
-"730" [label = <(DCHECK,DCHECK(sig[0] == '\0' || soa.Self()-&gt;IsExceptionPending()))<SUB>442</SUB>> ]
-"744" [label = <(&lt;operator&gt;.greaterThan,StackHandleScope&lt;1&gt; hs2(soa.Self()))<SUB>443</SUB>> ]
-"753" [label = <(&lt;operator&gt;.greaterThan,Handle&lt;mirror::Throwable&gt; cause(hs2.NewHandle(soa.Self()-&gt;GetException())))<SUB>444</SUB>> ]
-"771" [label = <(ClearException,soa.Self()-&gt;ClearException())<SUB>445</SUB>> ]
-"779" [label = <(ThrowNewExceptionF,soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/NoSuchFieldError;&quot;,\012 &quot;no type \&quot;%s\&quot; found and so no field \&quot;%s\&quot; &quot;\012 &quot;could be found in class \&quot;%s\&quot; or its superclasses&quot;, sig, name,\012                                   c-&gt;GetDescriptor(&amp;temp)))<SUB>447</SUB>> ]
-"815" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>454</SUB>> ]
-"821" [label = <(&lt;operator&gt;.assignment,field = mirror::Class::FindStaticField(\012        soa.Self(), c.Get(), name, field_type-&gt;GetDescriptor(&amp;temp)))<SUB>458</SUB>> ]
-"861" [label = <(&lt;operator&gt;.notEquals,field != nullptr)<SUB>463</SUB>> ]
-"864" [label = <(ShouldDenyAccessToMember,ShouldDenyAccessToMember(field, soa.Self()))<SUB>463</SUB>> ]
-"871" [label = <(&lt;operator&gt;.assignment,field = nullptr)<SUB>464</SUB>> ]
-"879" [label = <(ThrowNewExceptionF,soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/NoSuchFieldError;&quot;,\012 &quot;no \&quot;%s\&quot; field \&quot;%s\&quot; in class \&quot;%s\&quot; or its superclasses&quot;,\012                                   sig, name, c-&gt;GetDescriptor(&amp;temp)))<SUB>467</SUB>> ]
-"896" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>470</SUB>> ]
-"611" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>423</SUB>> ]
-"619" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>424</SUB>> ]
-"622" [label = <(&lt;operator&gt;.fieldAccess,hs.NewHandle)<SUB>425</SUB>> ]
-"625" [label = <(EnsureInitialized,EnsureInitialized(soa.Self(), soa.Decode&lt;mirror::Class&gt;(jni_class)))<SUB>425</SUB>> ]
-"655" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>430</SUB>> ]
-"662" [label = <(Runtime::Current,Runtime::Current())<SUB>431</SUB>> ]
-"666" [label = <(FIELD_IDENTIFIER,GetClassLinker,GetClassLinker)<SUB>431</SUB>> ]
-"670" [label = <(&lt;operator&gt;.indirectIndexAccess,sig[0])<SUB>432</SUB>> ]
-"676" [label = <(&lt;operator&gt;.equals,field == nullptr)<SUB>433</SUB>> ]
-"731" [label = <(&lt;operator&gt;.logicalOr,sig[0] == '\0' || soa.Self()-&gt;IsExceptionPending())<SUB>442</SUB>> ]
-"745" [label = <(&lt;operator&gt;.lessThan,StackHandleScope&lt;1)<SUB>443</SUB>> ]
-"748" [label = <(hs2,hs2(soa.Self()))<SUB>443</SUB>> ]
-"754" [label = <(&lt;operator&gt;.lessThan,Handle&lt;mirror::Throwable)<SUB>444</SUB>> ]
-"759" [label = <(cause,cause(hs2.NewHandle(soa.Self()-&gt;GetException())))<SUB>444</SUB>> ]
-"772" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;ClearException)<SUB>445</SUB>> ]
-"780" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;ThrowNewExceptionF)<SUB>447</SUB>> ]
-"790" [label = <(GetDescriptor,c-&gt;GetDescriptor(&amp;temp))<SUB>450</SUB>> ]
-"797" [label = <(&lt;operator&gt;.notEquals,cause != nullptr)<SUB>451</SUB>> ]
-"823" [label = <(mirror::Class::FindStaticField,mirror::Class::FindStaticField(\012        soa.Self(), c.Get(), name, field_type-&gt;GetDescriptor(&amp;temp)))<SUB>458</SUB>> ]
-"846" [label = <(&lt;operator&gt;.assignment,field = c-&gt;FindInstanceField(name, field_type-&gt;GetDescriptor(&amp;temp)))<SUB>461</SUB>> ]
-"866" [label = <(Self,soa.Self())<SUB>463</SUB>> ]
-"880" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;ThrowNewExceptionF)<SUB>467</SUB>> ]
-"890" [label = <(GetDescriptor,c-&gt;GetDescriptor(&amp;temp))<SUB>469</SUB>> ]
-"613" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>423</SUB>> ]
-"624" [label = <(FIELD_IDENTIFIER,NewHandle,NewHandle)<SUB>425</SUB>> ]
-"626" [label = <(Self,soa.Self())<SUB>425</SUB>> ]
-"630" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(jni_class))<SUB>425</SUB>> ]
-"663" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>431</SUB>> ]
-"682" [label = <(&lt;operator&gt;.notEquals,sig[1] != '\0')<SUB>434</SUB>> ]
-"732" [label = <(&lt;operator&gt;.equals,sig[0] == '\0')<SUB>442</SUB>> ]
-"737" [label = <(IsExceptionPending,soa.Self()-&gt;IsExceptionPending())<SUB>442</SUB>> ]
-"749" [label = <(Self,soa.Self())<SUB>443</SUB>> ]
-"756" [label = <(&lt;operator&gt;.fieldAccess,mirror::Throwable)<SUB>444</SUB>> ]
-"760" [label = <(NewHandle,hs2.NewHandle(soa.Self()-&gt;GetException()))<SUB>444</SUB>> ]
-"773" [label = <(Self,soa.Self())<SUB>445</SUB>> ]
-"777" [label = <(FIELD_IDENTIFIER,ClearException,ClearException)<SUB>445</SUB>> ]
-"781" [label = <(Self,soa.Self())<SUB>447</SUB>> ]
-"785" [label = <(FIELD_IDENTIFIER,ThrowNewExceptionF,ThrowNewExceptionF)<SUB>447</SUB>> ]
-"791" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;GetDescriptor)<SUB>450</SUB>> ]
-"794" [label = <(&lt;operator&gt;.addressOf,&amp;temp)<SUB>450</SUB>> ]
-"801" [label = <(SetCause,soa.Self()-&gt;GetException()-&gt;SetCause(cause.Get()))<SUB>452</SUB>> ]
-"824" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class::FindStaticField)<SUB>458</SUB>> ]
-"829" [label = <(Self,soa.Self())<SUB>459</SUB>> ]
-"833" [label = <(Get,c.Get())<SUB>459</SUB>> ]
-"838" [label = <(GetDescriptor,field_type-&gt;GetDescriptor(&amp;temp))<SUB>459</SUB>> ]
-"848" [label = <(FindInstanceField,c-&gt;FindInstanceField(name, field_type-&gt;GetDescriptor(&amp;temp)))<SUB>461</SUB>> ]
-"867" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>463</SUB>> ]
-"881" [label = <(Self,soa.Self())<SUB>467</SUB>> ]
-"885" [label = <(FIELD_IDENTIFIER,ThrowNewExceptionF,ThrowNewExceptionF)<SUB>467</SUB>> ]
-"891" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;GetDescriptor)<SUB>469</SUB>> ]
-"894" [label = <(&lt;operator&gt;.addressOf,&amp;temp)<SUB>469</SUB>> ]
-"627" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>425</SUB>> ]
-"631" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>425</SUB>> ]
-"665" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>431</SUB>> ]
-"683" [label = <(&lt;operator&gt;.indirectIndexAccess,sig[1])<SUB>434</SUB>> ]
-"688" [label = <(&lt;operator&gt;.greaterThan,Handle&lt;mirror::ClassLoader&gt; class_loader(hs.NewHandle(c-&gt;GetClassLoader())))<SUB>435</SUB>> ]
-"703" [label = <(&lt;operator&gt;.assignment,field_type = class_linker-&gt;FindClass(soa.Self(), sig, class_loader))<SUB>436</SUB>> ]
-"733" [label = <(&lt;operator&gt;.indirectIndexAccess,sig[0])<SUB>442</SUB>> ]
-"738" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;IsExceptionPending)<SUB>442</SUB>> ]
-"750" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>443</SUB>> ]
-"758" [label = <(FIELD_IDENTIFIER,Throwable,Throwable)<SUB>444</SUB>> ]
-"761" [label = <(&lt;operator&gt;.fieldAccess,hs2.NewHandle)<SUB>444</SUB>> ]
-"764" [label = <(GetException,soa.Self()-&gt;GetException())<SUB>444</SUB>> ]
-"774" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>445</SUB>> ]
-"782" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>447</SUB>> ]
-"793" [label = <(FIELD_IDENTIFIER,GetDescriptor,GetDescriptor)<SUB>450</SUB>> ]
-"802" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;GetException()-&gt;SetCause)<SUB>452</SUB>> ]
-"811" [label = <(Get,cause.Get())<SUB>452</SUB>> ]
-"825" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>458</SUB>> ]
-"828" [label = <(FIELD_IDENTIFIER,FindStaticField,FindStaticField)<SUB>458</SUB>> ]
-"830" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>459</SUB>> ]
-"834" [label = <(&lt;operator&gt;.fieldAccess,c.Get)<SUB>459</SUB>> ]
-"839" [label = <(&lt;operator&gt;.indirectFieldAccess,field_type-&gt;GetDescriptor)<SUB>459</SUB>> ]
-"842" [label = <(&lt;operator&gt;.addressOf,&amp;temp)<SUB>459</SUB>> ]
-"849" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;FindInstanceField)<SUB>461</SUB>> ]
-"853" [label = <(GetDescriptor,field_type-&gt;GetDescriptor(&amp;temp))<SUB>461</SUB>> ]
-"869" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>463</SUB>> ]
-"882" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>467</SUB>> ]
-"893" [label = <(FIELD_IDENTIFIER,GetDescriptor,GetDescriptor)<SUB>469</SUB>> ]
-"629" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>425</SUB>> ]
-"632" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>425</SUB>> ]
-"635" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>425</SUB>> ]
-"689" [label = <(&lt;operator&gt;.lessThan,Handle&lt;mirror::ClassLoader)<SUB>435</SUB>> ]
-"694" [label = <(class_loader,class_loader(hs.NewHandle(c-&gt;GetClassLoader())))<SUB>435</SUB>> ]
-"705" [label = <(FindClass,class_linker-&gt;FindClass(soa.Self(), sig, class_loader))<SUB>436</SUB>> ]
-"717" [label = <(&lt;operator&gt;.assignment,field_type = class_linker-&gt;FindPrimitiveClass(*sig))<SUB>438</SUB>> ]
-"739" [label = <(Self,soa.Self())<SUB>442</SUB>> ]
-"743" [label = <(FIELD_IDENTIFIER,IsExceptionPending,IsExceptionPending)<SUB>442</SUB>> ]
-"752" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>443</SUB>> ]
-"763" [label = <(FIELD_IDENTIFIER,NewHandle,NewHandle)<SUB>444</SUB>> ]
-"765" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;GetException)<SUB>444</SUB>> ]
-"776" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>445</SUB>> ]
-"784" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>447</SUB>> ]
-"803" [label = <(GetException,soa.Self()-&gt;GetException())<SUB>452</SUB>> ]
-"810" [label = <(FIELD_IDENTIFIER,SetCause,SetCause)<SUB>452</SUB>> ]
-"812" [label = <(&lt;operator&gt;.fieldAccess,cause.Get)<SUB>452</SUB>> ]
-"832" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>459</SUB>> ]
-"836" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>459</SUB>> ]
-"841" [label = <(FIELD_IDENTIFIER,GetDescriptor,GetDescriptor)<SUB>459</SUB>> ]
-"851" [label = <(FIELD_IDENTIFIER,FindInstanceField,FindInstanceField)<SUB>461</SUB>> ]
-"854" [label = <(&lt;operator&gt;.indirectFieldAccess,field_type-&gt;GetDescriptor)<SUB>461</SUB>> ]
-"857" [label = <(&lt;operator&gt;.addressOf,&amp;temp)<SUB>461</SUB>> ]
-"884" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>467</SUB>> ]
-"634" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>425</SUB>> ]
-"637" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>425</SUB>> ]
-"691" [label = <(&lt;operator&gt;.fieldAccess,mirror::ClassLoader)<SUB>435</SUB>> ]
-"695" [label = <(NewHandle,hs.NewHandle(c-&gt;GetClassLoader()))<SUB>435</SUB>> ]
-"706" [label = <(&lt;operator&gt;.indirectFieldAccess,class_linker-&gt;FindClass)<SUB>436</SUB>> ]
-"709" [label = <(Self,soa.Self())<SUB>436</SUB>> ]
-"719" [label = <(FindPrimitiveClass,class_linker-&gt;FindPrimitiveClass(*sig))<SUB>438</SUB>> ]
-"740" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>442</SUB>> ]
-"766" [label = <(Self,soa.Self())<SUB>444</SUB>> ]
-"770" [label = <(FIELD_IDENTIFIER,GetException,GetException)<SUB>444</SUB>> ]
-"804" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;GetException)<SUB>452</SUB>> ]
-"814" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>452</SUB>> ]
-"856" [label = <(FIELD_IDENTIFIER,GetDescriptor,GetDescriptor)<SUB>461</SUB>> ]
-"693" [label = <(FIELD_IDENTIFIER,ClassLoader,ClassLoader)<SUB>435</SUB>> ]
-"696" [label = <(&lt;operator&gt;.fieldAccess,hs.NewHandle)<SUB>435</SUB>> ]
-"699" [label = <(GetClassLoader,c-&gt;GetClassLoader())<SUB>435</SUB>> ]
-"708" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>436</SUB>> ]
-"710" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>436</SUB>> ]
-"720" [label = <(&lt;operator&gt;.indirectFieldAccess,class_linker-&gt;FindPrimitiveClass)<SUB>438</SUB>> ]
-"723" [label = <(&lt;operator&gt;.indirection,*sig)<SUB>438</SUB>> ]
-"742" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>442</SUB>> ]
-"767" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>444</SUB>> ]
-"805" [label = <(Self,soa.Self())<SUB>452</SUB>> ]
-"809" [label = <(FIELD_IDENTIFIER,GetException,GetException)<SUB>452</SUB>> ]
-"698" [label = <(FIELD_IDENTIFIER,NewHandle,NewHandle)<SUB>435</SUB>> ]
-"700" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;GetClassLoader)<SUB>435</SUB>> ]
-"712" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>436</SUB>> ]
-"722" [label = <(FIELD_IDENTIFIER,FindPrimitiveClass,FindPrimitiveClass)<SUB>438</SUB>> ]
-"769" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>444</SUB>> ]
-"806" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>452</SUB>> ]
-"702" [label = <(FIELD_IDENTIFIER,GetClassLoader,GetClassLoader)<SUB>435</SUB>> ]
-"808" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>452</SUB>> ]
-"598" [label = <(METHOD,FindFieldJNI)<SUB>418</SUB>> ]
-"900" [label = <(METHOD_RETURN,ArtField)<SUB>418</SUB>> ]
-  "605" -> "619" 
-  "614" -> "640" 
-  "647" -> "655" 
-  "650" -> "665" 
-  "658" -> "670" 
-  "898" -> "900" 
-  "606" -> "613" 
-  "609" -> "605" 
-  "615" -> "624" 
-  "620" -> "614" 
-  "640" -> "644" 
-  "640" -> "647" 
-  "651" -> "650" 
-  "660" -> "658" 
-  "668" -> "676" 
-  "668" -> "683" 
-  "726" -> "733" 
-  "726" -> "825" 
-  "726" -> "851" 
-  "860" -> "871" 
-  "860" -> "875" 
-  "875" -> "884" 
-  "875" -> "898" 
-  "610" -> "609" 
-  "617" -> "615" 
-  "621" -> "620" 
-  "644" -> "900" 
-  "653" -> "651" 
-  "661" -> "660" 
-  "669" -> "668" 
-  "675" -> "726" 
-  "730" -> "745" 
-  "744" -> "758" 
-  "753" -> "776" 
-  "771" -> "784" 
-  "779" -> "797" 
-  "815" -> "900" 
-  "821" -> "861" 
-  "861" -> "860" 
-  "861" -> "869" 
-  "864" -> "860" 
-  "871" -> "875" 
-  "879" -> "896" 
-  "896" -> "900" 
-  "611" -> "610" 
-  "619" -> "617" 
-  "622" -> "629" 
-  "625" -> "621" 
-  "655" -> "653" 
-  "662" -> "666" 
-  "666" -> "661" 
-  "670" -> "669" 
-  "676" -> "675" 
-  "731" -> "730" 
-  "745" -> "752" 
-  "748" -> "744" 
-  "754" -> "763" 
-  "759" -> "753" 
-  "772" -> "771" 
-  "780" -> "793" 
-  "790" -> "779" 
-  "797" -> "808" 
-  "797" -> "815" 
-  "823" -> "821" 
-  "846" -> "861" 
-  "866" -> "864" 
-  "880" -> "893" 
-  "890" -> "879" 
-  "613" -> "611" 
-  "624" -> "622" 
-  "626" -> "634" 
-  "630" -> "625" 
-  "663" -> "662" 
-  "682" -> "693" 
-  "682" -> "722" 
-  "732" -> "731" 
-  "732" -> "742" 
-  "737" -> "731" 
-  "749" -> "748" 
-  "756" -> "754" 
-  "760" -> "759" 
-  "773" -> "777" 
-  "777" -> "772" 
-  "781" -> "785" 
-  "785" -> "780" 
-  "791" -> "794" 
-  "794" -> "790" 
-  "801" -> "815" 
-  "824" -> "832" 
-  "829" -> "836" 
-  "833" -> "841" 
-  "838" -> "823" 
-  "848" -> "846" 
-  "867" -> "866" 
-  "881" -> "885" 
-  "885" -> "880" 
-  "891" -> "894" 
-  "894" -> "890" 
-  "627" -> "626" 
-  "631" -> "630" 
-  "665" -> "663" 
-  "683" -> "682" 
-  "688" -> "708" 
-  "703" -> "726" 
-  "733" -> "732" 
-  "738" -> "737" 
-  "750" -> "749" 
-  "758" -> "756" 
-  "761" -> "769" 
-  "764" -> "760" 
-  "774" -> "773" 
-  "782" -> "781" 
-  "793" -> "791" 
-  "802" -> "814" 
-  "811" -> "801" 
-  "825" -> "828" 
-  "828" -> "824" 
-  "830" -> "829" 
-  "834" -> "833" 
-  "839" -> "842" 
-  "842" -> "838" 
-  "849" -> "856" 
-  "853" -> "848" 
-  "869" -> "867" 
-  "882" -> "881" 
-  "893" -> "891" 
-  "629" -> "627" 
-  "632" -> "637" 
-  "635" -> "631" 
-  "689" -> "698" 
-  "694" -> "688" 
-  "705" -> "703" 
-  "717" -> "726" 
-  "739" -> "743" 
-  "743" -> "738" 
-  "752" -> "750" 
-  "763" -> "761" 
-  "765" -> "764" 
-  "776" -> "774" 
-  "784" -> "782" 
-  "803" -> "810" 
-  "810" -> "802" 
-  "812" -> "811" 
-  "832" -> "830" 
-  "836" -> "834" 
-  "841" -> "839" 
-  "851" -> "849" 
-  "854" -> "857" 
-  "857" -> "853" 
-  "884" -> "882" 
-  "634" -> "632" 
-  "637" -> "635" 
-  "691" -> "689" 
-  "695" -> "694" 
-  "706" -> "712" 
-  "709" -> "705" 
-  "719" -> "717" 
-  "740" -> "739" 
-  "766" -> "770" 
-  "770" -> "765" 
-  "804" -> "803" 
-  "814" -> "812" 
-  "856" -> "854" 
-  "693" -> "691" 
-  "696" -> "702" 
-  "699" -> "695" 
-  "708" -> "706" 
-  "710" -> "709" 
-  "720" -> "723" 
-  "723" -> "719" 
-  "742" -> "740" 
-  "767" -> "766" 
-  "805" -> "809" 
-  "809" -> "804" 
-  "698" -> "696" 
-  "700" -> "699" 
-  "712" -> "710" 
-  "722" -> "720" 
-  "769" -> "767" 
-  "806" -> "805" 
-  "702" -> "700" 
-  "808" -> "806" 
-  "598" -> "606" 
+digraph "GetVersion" {  
+"746" [label = <(RETURN,return JNI_VERSION_1_6;,return JNI_VERSION_1_6;)<SUB>485</SUB>> ]
+"743" [label = <(METHOD,GetVersion)<SUB>484</SUB>> ]
+"748" [label = <(METHOD_RETURN,jint)<SUB>484</SUB>> ]
+  "746" -> "748" 
+  "743" -> "746" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/230-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/230-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/230-cfg.dot	2023-06-07 19:35:01.547387157 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/230-cfg.dot	2023-06-07 19:35:08.077386510 +0330
@@ -1,7 +1,7 @@
-digraph "ReleaseShortArrayElements" {  
-"12772" [label = <(ReleasePrimitiveArray&lt;jshortArray,jshort,mirror::ShortArray&gt;,ReleasePrimitiveArray&lt;jshortArray, jshort, mirror::ShortArray&gt;(env, array, elements, mode))<SUB>2338</SUB>> ]
-"12766" [label = <(METHOD,ReleaseShortArrayElements)<SUB>2336</SUB>> ]
-"12777" [label = <(METHOD_RETURN,void)<SUB>2336</SUB>> ]
-  "12772" -> "12777" 
-  "12766" -> "12772" 
+digraph "GetDoubleArrayRegion" {  
+"12470" [label = <(GetPrimitiveArrayRegion&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;,GetPrimitiveArrayRegion&lt;jdoubleArray, jdouble, mirror::DoubleArray&gt;(env, array, start, length,\012                                                                        buf))<SUB>2228</SUB>> ]
+"12463" [label = <(METHOD,GetDoubleArrayRegion)<SUB>2226</SUB>> ]
+"12476" [label = <(METHOD_RETURN,void)<SUB>2226</SUB>> ]
+  "12470" -> "12476" 
+  "12463" -> "12470" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/231-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/231-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/231-cfg.dot	2023-06-07 19:35:01.547387157 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/231-cfg.dot	2023-06-07 19:35:08.077386510 +0330
@@ -1,7 +1,7 @@
-digraph "GetBooleanArrayRegion" {  
-"12786" [label = <(GetPrimitiveArrayRegion&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;,GetPrimitiveArrayRegion&lt;jbooleanArray, jboolean, mirror::BooleanArray&gt;(env, array, start,\012                                                                           length, buf))<SUB>2343</SUB>> ]
-"12779" [label = <(METHOD,GetBooleanArrayRegion)<SUB>2341</SUB>> ]
-"12792" [label = <(METHOD_RETURN,void)<SUB>2341</SUB>> ]
-  "12786" -> "12792" 
-  "12779" -> "12786" 
+digraph "GetFloatArrayRegion" {  
+"12485" [label = <(GetPrimitiveArrayRegion&lt;jfloatArray,jfloat,mirror::FloatArray&gt;,GetPrimitiveArrayRegion&lt;jfloatArray, jfloat, mirror::FloatArray&gt;(env, array, start, length,\012                                                                     buf))<SUB>2234</SUB>> ]
+"12478" [label = <(METHOD,GetFloatArrayRegion)<SUB>2232</SUB>> ]
+"12491" [label = <(METHOD_RETURN,void)<SUB>2232</SUB>> ]
+  "12485" -> "12491" 
+  "12478" -> "12485" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/232-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/232-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/232-cfg.dot	2023-06-07 19:35:01.547387157 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/232-cfg.dot	2023-06-07 19:35:08.077386510 +0330
@@ -1,7 +1,7 @@
-digraph "GetByteArrayRegion" {  
-"12801" [label = <(GetPrimitiveArrayRegion&lt;jbyteArray,jbyte,mirror::ByteArray&gt;,GetPrimitiveArrayRegion&lt;jbyteArray, jbyte, mirror::ByteArray&gt;(env, array, start, length, buf))<SUB>2349</SUB>> ]
-"12794" [label = <(METHOD,GetByteArrayRegion)<SUB>2347</SUB>> ]
-"12807" [label = <(METHOD_RETURN,void)<SUB>2347</SUB>> ]
-  "12801" -> "12807" 
-  "12794" -> "12801" 
+digraph "GetIntArrayRegion" {  
+"12500" [label = <(GetPrimitiveArrayRegion&lt;jintArray,jint,mirror::IntArray&gt;,GetPrimitiveArrayRegion&lt;jintArray, jint, mirror::IntArray&gt;(env, array, start, length, buf))<SUB>2240</SUB>> ]
+"12493" [label = <(METHOD,GetIntArrayRegion)<SUB>2238</SUB>> ]
+"12506" [label = <(METHOD_RETURN,void)<SUB>2238</SUB>> ]
+  "12500" -> "12506" 
+  "12493" -> "12500" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/233-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/233-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/233-cfg.dot	2023-06-07 19:35:01.547387157 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/233-cfg.dot	2023-06-07 19:35:08.077386510 +0330
@@ -1,7 +1,7 @@
-digraph "GetCharArrayRegion" {  
-"12816" [label = <(GetPrimitiveArrayRegion&lt;jcharArray,jchar,mirror::CharArray&gt;,GetPrimitiveArrayRegion&lt;jcharArray, jchar, mirror::CharArray&gt;(env, array, start, length, buf))<SUB>2354</SUB>> ]
-"12809" [label = <(METHOD,GetCharArrayRegion)<SUB>2352</SUB>> ]
-"12822" [label = <(METHOD_RETURN,void)<SUB>2352</SUB>> ]
-  "12816" -> "12822" 
-  "12809" -> "12816" 
+digraph "GetLongArrayRegion" {  
+"12515" [label = <(GetPrimitiveArrayRegion&lt;jlongArray,jlong,mirror::LongArray&gt;,GetPrimitiveArrayRegion&lt;jlongArray, jlong, mirror::LongArray&gt;(env, array, start, length, buf))<SUB>2245</SUB>> ]
+"12508" [label = <(METHOD,GetLongArrayRegion)<SUB>2243</SUB>> ]
+"12521" [label = <(METHOD_RETURN,void)<SUB>2243</SUB>> ]
+  "12515" -> "12521" 
+  "12508" -> "12515" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/234-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/234-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/234-cfg.dot	2023-06-07 19:35:01.547387157 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/234-cfg.dot	2023-06-07 19:35:08.077386510 +0330
@@ -1,7 +1,7 @@
-digraph "GetDoubleArrayRegion" {  
-"12831" [label = <(GetPrimitiveArrayRegion&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;,GetPrimitiveArrayRegion&lt;jdoubleArray, jdouble, mirror::DoubleArray&gt;(env, array, start, length,\012                                                                        buf))<SUB>2359</SUB>> ]
-"12824" [label = <(METHOD,GetDoubleArrayRegion)<SUB>2357</SUB>> ]
-"12837" [label = <(METHOD_RETURN,void)<SUB>2357</SUB>> ]
-  "12831" -> "12837" 
-  "12824" -> "12831" 
+digraph "GetShortArrayRegion" {  
+"12530" [label = <(GetPrimitiveArrayRegion&lt;jshortArray,jshort,mirror::ShortArray&gt;,GetPrimitiveArrayRegion&lt;jshortArray, jshort, mirror::ShortArray&gt;(env, array, start, length,\012                                                                     buf))<SUB>2250</SUB>> ]
+"12523" [label = <(METHOD,GetShortArrayRegion)<SUB>2248</SUB>> ]
+"12536" [label = <(METHOD_RETURN,void)<SUB>2248</SUB>> ]
+  "12530" -> "12536" 
+  "12523" -> "12530" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/235-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/235-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/235-cfg.dot	2023-06-07 19:35:01.547387157 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/235-cfg.dot	2023-06-07 19:35:08.077386510 +0330
@@ -1,7 +1,7 @@
-digraph "GetFloatArrayRegion" {  
-"12846" [label = <(GetPrimitiveArrayRegion&lt;jfloatArray,jfloat,mirror::FloatArray&gt;,GetPrimitiveArrayRegion&lt;jfloatArray, jfloat, mirror::FloatArray&gt;(env, array, start, length,\012                                                                     buf))<SUB>2365</SUB>> ]
-"12839" [label = <(METHOD,GetFloatArrayRegion)<SUB>2363</SUB>> ]
-"12852" [label = <(METHOD_RETURN,void)<SUB>2363</SUB>> ]
-  "12846" -> "12852" 
-  "12839" -> "12846" 
+digraph "SetBooleanArrayRegion" {  
+"12545" [label = <(SetPrimitiveArrayRegion&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;,SetPrimitiveArrayRegion&lt;jbooleanArray, jboolean, mirror::BooleanArray&gt;(env, array, start,\012                                                                           length, buf))<SUB>2256</SUB>> ]
+"12538" [label = <(METHOD,SetBooleanArrayRegion)<SUB>2254</SUB>> ]
+"12551" [label = <(METHOD_RETURN,void)<SUB>2254</SUB>> ]
+  "12545" -> "12551" 
+  "12538" -> "12545" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/236-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/236-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/236-cfg.dot	2023-06-07 19:35:01.547387157 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/236-cfg.dot	2023-06-07 19:35:08.077386510 +0330
@@ -1,7 +1,7 @@
-digraph "GetIntArrayRegion" {  
-"12861" [label = <(GetPrimitiveArrayRegion&lt;jintArray,jint,mirror::IntArray&gt;,GetPrimitiveArrayRegion&lt;jintArray, jint, mirror::IntArray&gt;(env, array, start, length, buf))<SUB>2371</SUB>> ]
-"12854" [label = <(METHOD,GetIntArrayRegion)<SUB>2369</SUB>> ]
-"12867" [label = <(METHOD_RETURN,void)<SUB>2369</SUB>> ]
-  "12861" -> "12867" 
-  "12854" -> "12861" 
+digraph "SetByteArrayRegion" {  
+"12560" [label = <(SetPrimitiveArrayRegion&lt;jbyteArray,jbyte,mirror::ByteArray&gt;,SetPrimitiveArrayRegion&lt;jbyteArray, jbyte, mirror::ByteArray&gt;(env, array, start, length, buf))<SUB>2262</SUB>> ]
+"12553" [label = <(METHOD,SetByteArrayRegion)<SUB>2260</SUB>> ]
+"12566" [label = <(METHOD_RETURN,void)<SUB>2260</SUB>> ]
+  "12560" -> "12566" 
+  "12553" -> "12560" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/237-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/237-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/237-cfg.dot	2023-06-07 19:35:01.547387157 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/237-cfg.dot	2023-06-07 19:35:08.077386510 +0330
@@ -1,7 +1,7 @@
-digraph "GetLongArrayRegion" {  
-"12876" [label = <(GetPrimitiveArrayRegion&lt;jlongArray,jlong,mirror::LongArray&gt;,GetPrimitiveArrayRegion&lt;jlongArray, jlong, mirror::LongArray&gt;(env, array, start, length, buf))<SUB>2376</SUB>> ]
-"12869" [label = <(METHOD,GetLongArrayRegion)<SUB>2374</SUB>> ]
-"12882" [label = <(METHOD_RETURN,void)<SUB>2374</SUB>> ]
-  "12876" -> "12882" 
-  "12869" -> "12876" 
+digraph "SetCharArrayRegion" {  
+"12575" [label = <(SetPrimitiveArrayRegion&lt;jcharArray,jchar,mirror::CharArray&gt;,SetPrimitiveArrayRegion&lt;jcharArray, jchar, mirror::CharArray&gt;(env, array, start, length, buf))<SUB>2267</SUB>> ]
+"12568" [label = <(METHOD,SetCharArrayRegion)<SUB>2265</SUB>> ]
+"12581" [label = <(METHOD_RETURN,void)<SUB>2265</SUB>> ]
+  "12575" -> "12581" 
+  "12568" -> "12575" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/238-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/238-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/238-cfg.dot	2023-06-07 19:35:01.547387157 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/238-cfg.dot	2023-06-07 19:35:08.077386510 +0330
@@ -1,7 +1,7 @@
-digraph "GetShortArrayRegion" {  
-"12891" [label = <(GetPrimitiveArrayRegion&lt;jshortArray,jshort,mirror::ShortArray&gt;,GetPrimitiveArrayRegion&lt;jshortArray, jshort, mirror::ShortArray&gt;(env, array, start, length,\012                                                                     buf))<SUB>2381</SUB>> ]
-"12884" [label = <(METHOD,GetShortArrayRegion)<SUB>2379</SUB>> ]
-"12897" [label = <(METHOD_RETURN,void)<SUB>2379</SUB>> ]
-  "12891" -> "12897" 
-  "12884" -> "12891" 
+digraph "SetDoubleArrayRegion" {  
+"12590" [label = <(SetPrimitiveArrayRegion&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;,SetPrimitiveArrayRegion&lt;jdoubleArray, jdouble, mirror::DoubleArray&gt;(env, array, start, length,\012                                                                        buf))<SUB>2272</SUB>> ]
+"12583" [label = <(METHOD,SetDoubleArrayRegion)<SUB>2270</SUB>> ]
+"12596" [label = <(METHOD_RETURN,void)<SUB>2270</SUB>> ]
+  "12590" -> "12596" 
+  "12583" -> "12590" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/239-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/239-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/239-cfg.dot	2023-06-07 19:35:01.547387157 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/239-cfg.dot	2023-06-07 19:35:08.077386510 +0330
@@ -1,7 +1,7 @@
-digraph "SetBooleanArrayRegion" {  
-"12906" [label = <(SetPrimitiveArrayRegion&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;,SetPrimitiveArrayRegion&lt;jbooleanArray, jboolean, mirror::BooleanArray&gt;(env, array, start,\012                                                                           length, buf))<SUB>2387</SUB>> ]
-"12899" [label = <(METHOD,SetBooleanArrayRegion)<SUB>2385</SUB>> ]
-"12912" [label = <(METHOD_RETURN,void)<SUB>2385</SUB>> ]
-  "12906" -> "12912" 
-  "12899" -> "12906" 
+digraph "SetFloatArrayRegion" {  
+"12605" [label = <(SetPrimitiveArrayRegion&lt;jfloatArray,jfloat,mirror::FloatArray&gt;,SetPrimitiveArrayRegion&lt;jfloatArray, jfloat, mirror::FloatArray&gt;(env, array, start, length,\012                                                                     buf))<SUB>2278</SUB>> ]
+"12598" [label = <(METHOD,SetFloatArrayRegion)<SUB>2276</SUB>> ]
+"12611" [label = <(METHOD_RETURN,void)<SUB>2276</SUB>> ]
+  "12605" -> "12611" 
+  "12598" -> "12605" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/24-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/24-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/24-cfg.dot	2023-06-07 19:35:01.347387178 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/24-cfg.dot	2023-06-07 19:35:07.927386526 +0330
@@ -1,5 +1,11 @@
-digraph "ThrowNewException" {  
-"902" [label = <(METHOD,ThrowNewException)<SUB>475</SUB>> ]
-"908" [label = <(METHOD_RETURN,int)<SUB>475</SUB>> ]
-  "902" -> "908" 
+digraph "DefineClass" {  
+"757" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI DefineClass is not supported&quot;)<SUB>489</SUB>> ]
+"761" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>490</SUB>> ]
+"758" [label = <(LOG,LOG(WARNING))<SUB>489</SUB>> ]
+"750" [label = <(METHOD,DefineClass)<SUB>488</SUB>> ]
+"763" [label = <(METHOD_RETURN,jclass)<SUB>488</SUB>> ]
+  "757" -> "761" 
+  "761" -> "763" 
+  "758" -> "757" 
+  "750" -> "758" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/240-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/240-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/240-cfg.dot	2023-06-07 19:35:01.547387157 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/240-cfg.dot	2023-06-07 19:35:08.077386510 +0330
@@ -1,7 +1,7 @@
-digraph "SetByteArrayRegion" {  
-"12921" [label = <(SetPrimitiveArrayRegion&lt;jbyteArray,jbyte,mirror::ByteArray&gt;,SetPrimitiveArrayRegion&lt;jbyteArray, jbyte, mirror::ByteArray&gt;(env, array, start, length, buf))<SUB>2393</SUB>> ]
-"12914" [label = <(METHOD,SetByteArrayRegion)<SUB>2391</SUB>> ]
-"12927" [label = <(METHOD_RETURN,void)<SUB>2391</SUB>> ]
-  "12921" -> "12927" 
-  "12914" -> "12921" 
+digraph "SetIntArrayRegion" {  
+"12620" [label = <(SetPrimitiveArrayRegion&lt;jintArray,jint,mirror::IntArray&gt;,SetPrimitiveArrayRegion&lt;jintArray, jint, mirror::IntArray&gt;(env, array, start, length, buf))<SUB>2284</SUB>> ]
+"12613" [label = <(METHOD,SetIntArrayRegion)<SUB>2282</SUB>> ]
+"12626" [label = <(METHOD_RETURN,void)<SUB>2282</SUB>> ]
+  "12620" -> "12626" 
+  "12613" -> "12620" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/241-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/241-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/241-cfg.dot	2023-06-07 19:35:01.547387157 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/241-cfg.dot	2023-06-07 19:35:08.077386510 +0330
@@ -1,7 +1,7 @@
-digraph "SetCharArrayRegion" {  
-"12936" [label = <(SetPrimitiveArrayRegion&lt;jcharArray,jchar,mirror::CharArray&gt;,SetPrimitiveArrayRegion&lt;jcharArray, jchar, mirror::CharArray&gt;(env, array, start, length, buf))<SUB>2398</SUB>> ]
-"12929" [label = <(METHOD,SetCharArrayRegion)<SUB>2396</SUB>> ]
-"12942" [label = <(METHOD_RETURN,void)<SUB>2396</SUB>> ]
-  "12936" -> "12942" 
-  "12929" -> "12936" 
+digraph "SetLongArrayRegion" {  
+"12635" [label = <(SetPrimitiveArrayRegion&lt;jlongArray,jlong,mirror::LongArray&gt;,SetPrimitiveArrayRegion&lt;jlongArray, jlong, mirror::LongArray&gt;(env, array, start, length, buf))<SUB>2289</SUB>> ]
+"12628" [label = <(METHOD,SetLongArrayRegion)<SUB>2287</SUB>> ]
+"12641" [label = <(METHOD_RETURN,void)<SUB>2287</SUB>> ]
+  "12635" -> "12641" 
+  "12628" -> "12635" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/242-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/242-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/242-cfg.dot	2023-06-07 19:35:01.547387157 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/242-cfg.dot	2023-06-07 19:35:08.077386510 +0330
@@ -1,7 +1,7 @@
-digraph "SetDoubleArrayRegion" {  
-"12951" [label = <(SetPrimitiveArrayRegion&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;,SetPrimitiveArrayRegion&lt;jdoubleArray, jdouble, mirror::DoubleArray&gt;(env, array, start, length,\012                                                                        buf))<SUB>2403</SUB>> ]
-"12944" [label = <(METHOD,SetDoubleArrayRegion)<SUB>2401</SUB>> ]
-"12957" [label = <(METHOD_RETURN,void)<SUB>2401</SUB>> ]
-  "12951" -> "12957" 
-  "12944" -> "12951" 
+digraph "SetShortArrayRegion" {  
+"12650" [label = <(SetPrimitiveArrayRegion&lt;jshortArray,jshort,mirror::ShortArray&gt;,SetPrimitiveArrayRegion&lt;jshortArray, jshort, mirror::ShortArray&gt;(env, array, start, length,\012                                                                     buf))<SUB>2294</SUB>> ]
+"12643" [label = <(METHOD,SetShortArrayRegion)<SUB>2292</SUB>> ]
+"12656" [label = <(METHOD_RETURN,void)<SUB>2292</SUB>> ]
+  "12650" -> "12656" 
+  "12643" -> "12650" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/243-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/243-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/243-cfg.dot	2023-06-07 19:35:01.547387157 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/243-cfg.dot	2023-06-07 19:35:08.087386511 +0330
@@ -1,7 +1,437 @@
-digraph "SetFloatArrayRegion" {  
-"12966" [label = <(SetPrimitiveArrayRegion&lt;jfloatArray,jfloat,mirror::FloatArray&gt;,SetPrimitiveArrayRegion&lt;jfloatArray, jfloat, mirror::FloatArray&gt;(env, array, start, length,\012                                                                     buf))<SUB>2409</SUB>> ]
-"12959" [label = <(METHOD,SetFloatArrayRegion)<SUB>2407</SUB>> ]
-"12972" [label = <(METHOD_RETURN,void)<SUB>2407</SUB>> ]
-  "12966" -> "12972" 
-  "12959" -> "12966" 
+digraph "RegisterNatives" {  
+"12680" [label = <(CHECK_NON_NULL_ARGUMENT_FN_NAME,CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, java_class, JNI_ERR))<SUB>2307</SUB>> ]
+"12701" [label = <(soa,soa(env))<SUB>2308</SUB>> ]
+"12703" [label = <(&lt;operator&gt;.greaterThan,StackHandleScope&lt;1&gt; hs(soa.Self()))<SUB>2309</SUB>> ]
+"12712" [label = <(&lt;operator&gt;.assignment,Handle&lt;mirror::Class&gt; c = hs.NewHandle(soa.Decode&lt;mirror::Class&gt;(java_class)))<SUB>2310</SUB>> ]
+"12750" [label = <(CHECK_NON_NULL_ARGUMENT_FN_NAME,CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, methods, JNI_ERR))<SUB>2316</SUB>> ]
+"13091" [label = <(RETURN,return JNI_OK;,return JNI_OK;)<SUB>2427</SUB>> ]
+"12665" [label = <(UNLIKELY,UNLIKELY(method_count &lt; 0))<SUB>2302</SUB>> ]
+"12704" [label = <(&lt;operator&gt;.lessThan,StackHandleScope&lt;1)<SUB>2309</SUB>> ]
+"12707" [label = <(hs,hs(soa.Self()))<SUB>2309</SUB>> ]
+"12713" [label = <(&lt;operator&gt;.greaterThan,Handle&lt;mirror::Class&gt; c)<SUB>2310</SUB>> ]
+"12720" [label = <(NewHandle,hs.NewHandle(soa.Decode&lt;mirror::Class&gt;(java_class)))<SUB>2310</SUB>> ]
+"12734" [label = <(UNLIKELY,UNLIKELY(method_count == 0))<SUB>2311</SUB>> ]
+"12776" [label = <(&lt;operator&gt;.lessThan,i &lt; method_count)<SUB>2317</SUB>> ]
+"12779" [label = <(&lt;operator&gt;.preIncrement,++i)<SUB>2317</SUB>> ]
+"12666" [label = <(&lt;operator&gt;.lessThan,method_count &lt; 0)<SUB>2302</SUB>> ]
+"12670" [label = <(JniAbortF,JavaVmExtFromEnv(env)-&gt;JniAbortF(&quot;RegisterNatives&quot;, &quot;negative method count: %d&quot;,\012                                       method_count))<SUB>2303</SUB>> ]
+"12678" [label = <(RETURN,return JNI_ERR;,return JNI_ERR;)<SUB>2305</SUB>> ]
+"12708" [label = <(Self,soa.Self())<SUB>2309</SUB>> ]
+"12714" [label = <(&lt;operator&gt;.lessThan,Handle&lt;mirror::Class)<SUB>2310</SUB>> ]
+"12721" [label = <(&lt;operator&gt;.fieldAccess,hs.NewHandle)<SUB>2310</SUB>> ]
+"12724" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>2310</SUB>> ]
+"12735" [label = <(&lt;operator&gt;.equals,method_count == 0)<SUB>2311</SUB>> ]
+"12739" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI RegisterNativeMethods: attempt to register 0 native methods for &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor())<SUB>2312</SUB>> ]
+"12748" [label = <(RETURN,return JNI_OK;,return JNI_OK;)<SUB>2314</SUB>> ]
+"12773" [label = <(&lt;operator&gt;.assignment,i = 0)<SUB>2317</SUB>> ]
+"12783" [label = <(&lt;operator&gt;.assignment,* name = methods[i].name)<SUB>2318</SUB>> ]
+"12791" [label = <(&lt;operator&gt;.assignment,* sig = methods[i].signature)<SUB>2319</SUB>> ]
+"12799" [label = <(&lt;operator&gt;.assignment,* fnPtr = methods[i].fnPtr)<SUB>2320</SUB>> ]
+"12859" [label = <(&lt;operator&gt;.assignment,is_fast = false)<SUB>2331</SUB>> ]
+"12874" [label = <(&lt;operator&gt;.assignment,* m = nullptr)<SUB>2369</SUB>> ]
+"12878" [label = <(&lt;operator&gt;.assignment,warn_on_going_to_parent = down_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm()-&gt;IsCheckJniEnabled())<SUB>2370</SUB>> ]
+"13054" [label = <(&lt;operator&gt;.shiftLeft,VLOG(jni) &lt;&lt; &quot;[Registering JNI native method &quot; &lt;&lt; m-&gt;PrettyMethod() &lt;&lt; &quot;]&quot;)<SUB>2410</SUB>> ]
+"13082" [label = <(&lt;operator&gt;.assignment,* final_function_ptr = m-&gt;RegisterNative(fnPtr))<SUB>2424</SUB>> ]
+"13089" [label = <(UNUSED,UNUSED(final_function_ptr))<SUB>2425</SUB>> ]
+"12671" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>2303</SUB>> ]
+"12686" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>2307</SUB>> ]
+"12709" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>2309</SUB>> ]
+"12716" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2310</SUB>> ]
+"12723" [label = <(FIELD_IDENTIFIER,NewHandle,NewHandle)<SUB>2310</SUB>> ]
+"12725" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>2310</SUB>> ]
+"12740" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI RegisterNativeMethods: attempt to register 0 native methods for &quot;)<SUB>2312</SUB>> ]
+"12744" [label = <(PrettyDescriptor,c-&gt;PrettyDescriptor())<SUB>2313</SUB>> ]
+"12756" [label = <(UNLIKELY,UNLIKELY((methods) == nullptr))<SUB>2316</SUB>> ]
+"12785" [label = <(&lt;operator&gt;.fieldAccess,methods[i].name)<SUB>2318</SUB>> ]
+"12793" [label = <(&lt;operator&gt;.fieldAccess,methods[i].signature)<SUB>2319</SUB>> ]
+"12801" [label = <(&lt;operator&gt;.fieldAccess,methods[i].fnPtr)<SUB>2320</SUB>> ]
+"12807" [label = <(UNLIKELY,UNLIKELY(name == nullptr))<SUB>2321</SUB>> ]
+"12863" [label = <(&lt;operator&gt;.equals,*sig == '!')<SUB>2361</SUB>> ]
+"12880" [label = <(IsCheckJniEnabled,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm()-&gt;IsCheckJniEnabled())<SUB>2370</SUB>> ]
+"12902" [label = <(&lt;operator&gt;.notEquals,current_class != nullptr)<SUB>2372</SUB>> ]
+"12905" [label = <(&lt;operator&gt;.assignment,current_class = current_class-&gt;GetSuperClass())<SUB>2373</SUB>> ]
+"12963" [label = <(&lt;operator&gt;.equals,m == nullptr)<SUB>2393</SUB>> ]
+"13055" [label = <(&lt;operator&gt;.shiftLeft,VLOG(jni) &lt;&lt; &quot;[Registering JNI native method &quot; &lt;&lt; m-&gt;PrettyMethod())<SUB>2410</SUB>> ]
+"13066" [label = <(UNLIKELY,UNLIKELY(is_fast))<SUB>2412</SUB>> ]
+"13084" [label = <(RegisterNative,m-&gt;RegisterNative(fnPtr))<SUB>2424</SUB>> ]
+"12672" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2303</SUB>> ]
+"12674" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2303</SUB>> ]
+"12687" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>2307</SUB>> ]
+"12691" [label = <(CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, java_class, JNI_ERR),JavaVmExtFromEnv(env)-&gt;JniAbort(&quot;RegisterNatives&quot;, &quot;java_class == null&quot;))<SUB>2307</SUB>> ]
+"12698" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, java_class, JNI_ERR),CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, java_class, JNI_ERR))<SUB>2307</SUB>> ]
+"12711" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>2309</SUB>> ]
+"12718" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>2310</SUB>> ]
+"12726" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2310</SUB>> ]
+"12729" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2310</SUB>> ]
+"12741" [label = <(LOG,LOG(WARNING))<SUB>2312</SUB>> ]
+"12745" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;PrettyDescriptor)<SUB>2313</SUB>> ]
+"12757" [label = <(&lt;operator&gt;.equals,(methods) == nullptr)<SUB>2316</SUB>> ]
+"12761" [label = <(CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, methods, JNI_ERR),JavaVmExtFromEnv(env)-&gt;JniAbort(&quot;RegisterNatives&quot;, &quot;methods == null&quot;))<SUB>2316</SUB>> ]
+"12768" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, methods, JNI_ERR),CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, methods, JNI_ERR))<SUB>2316</SUB>> ]
+"12786" [label = <(&lt;operator&gt;.indirectIndexAccess,methods[i])<SUB>2318</SUB>> ]
+"12789" [label = <(FIELD_IDENTIFIER,name,name)<SUB>2318</SUB>> ]
+"12794" [label = <(&lt;operator&gt;.indirectIndexAccess,methods[i])<SUB>2319</SUB>> ]
+"12797" [label = <(FIELD_IDENTIFIER,signature,signature)<SUB>2319</SUB>> ]
+"12802" [label = <(&lt;operator&gt;.indirectIndexAccess,methods[i])<SUB>2320</SUB>> ]
+"12805" [label = <(FIELD_IDENTIFIER,fnPtr,fnPtr)<SUB>2320</SUB>> ]
+"12808" [label = <(&lt;operator&gt;.equals,name == nullptr)<SUB>2321</SUB>> ]
+"12812" [label = <(ReportInvalidJNINativeMethod,ReportInvalidJNINativeMethod(soa, c.Get(), &quot;method name&quot;, i))<SUB>2322</SUB>> ]
+"12820" [label = <(RETURN,return JNI_ERR;,return JNI_ERR;)<SUB>2323</SUB>> ]
+"12864" [label = <(&lt;operator&gt;.indirection,*sig)<SUB>2361</SUB>> ]
+"12868" [label = <(&lt;operator&gt;.assignment,is_fast = true)<SUB>2362</SUB>> ]
+"12871" [label = <(&lt;operator&gt;.preIncrement,++sig)<SUB>2363</SUB>> ]
+"12881" [label = <(&lt;operator&gt;.indirectFieldAccess,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm()-&gt;IsCheckJniEnabled)<SUB>2370</SUB>> ]
+"12890" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; current_class = c.Get())<SUB>2371</SUB>> ]
+"12907" [label = <(GetSuperClass,current_class-&gt;GetSuperClass())<SUB>2373</SUB>> ]
+"12912" [label = <(&lt;operator&gt;.assignment,m = FindMethod&lt;true&gt;(current_class, name, sig))<SUB>2375</SUB>> ]
+"12929" [label = <(&lt;operator&gt;.assignment,m = FindMethod&lt;false&gt;(current_class, name, sig))<SUB>2381</SUB>> ]
+"12967" [label = <(DumpClass,c-&gt;DumpClass(LOG_STREAM(ERROR), mirror::Class::kDumpClassFullDetail))<SUB>2394</SUB>> ]
+"12978" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor() &lt;&lt; &quot;.&quot; &lt;&lt; name &lt;&lt; sig &lt;&lt; &quot; in &quot;\012 &lt;&lt; c-&gt;GetDexCache()-&gt;GetLocation()-&gt;ToModifiedUtf8())<SUB>2395</SUB>> ]
+"13006" [label = <(ThrowNoSuchMethodError,ThrowNoSuchMethodError(soa, c.Get(), name, sig, &quot;static or non-static&quot;))<SUB>2399</SUB>> ]
+"13015" [label = <(RETURN,return JNI_ERR;,return JNI_ERR;)<SUB>2400</SUB>> ]
+"13056" [label = <(&lt;operator&gt;.shiftLeft,VLOG(jni) &lt;&lt; &quot;[Registering JNI native method &quot;)<SUB>2410</SUB>> ]
+"13060" [label = <(PrettyMethod,m-&gt;PrettyMethod())<SUB>2410</SUB>> ]
+"13069" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;!bang JNI is deprecated. Switch to @FastNative for &quot; &lt;&lt; m-&gt;PrettyMethod())<SUB>2419</SUB>> ]
+"13078" [label = <(&lt;operator&gt;.assignment,is_fast = false)<SUB>2420</SUB>> ]
+"13085" [label = <(&lt;operator&gt;.indirectFieldAccess,m-&gt;RegisterNative)<SUB>2424</SUB>> ]
+"12692" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2307</SUB>> ]
+"12728" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2310</SUB>> ]
+"12731" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>2310</SUB>> ]
+"12747" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>2313</SUB>> ]
+"12762" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2316</SUB>> ]
+"12814" [label = <(Get,c.Get())<SUB>2322</SUB>> ]
+"12882" [label = <(GetVm,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm())<SUB>2370</SUB>> ]
+"12887" [label = <(FIELD_IDENTIFIER,IsCheckJniEnabled,IsCheckJniEnabled)<SUB>2370</SUB>> ]
+"12891" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; current_class)<SUB>2371</SUB>> ]
+"12898" [label = <(Get,c.Get())<SUB>2371</SUB>> ]
+"12908" [label = <(&lt;operator&gt;.indirectFieldAccess,current_class-&gt;GetSuperClass)<SUB>2373</SUB>> ]
+"12914" [label = <(&lt;operator&gt;.greaterThan,FindMethod&lt;true&gt;(current_class, name, sig))<SUB>2375</SUB>> ]
+"12924" [label = <(&lt;operator&gt;.notEquals,m != nullptr)<SUB>2376</SUB>> ]
+"12931" [label = <(&lt;operator&gt;.greaterThan,FindMethod&lt;false&gt;(current_class, name, sig))<SUB>2381</SUB>> ]
+"12941" [label = <(&lt;operator&gt;.notEquals,m != nullptr)<SUB>2382</SUB>> ]
+"12968" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;DumpClass)<SUB>2394</SUB>> ]
+"12971" [label = <(LOG_STREAM,LOG_STREAM(ERROR))<SUB>2394</SUB>> ]
+"12973" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class::kDumpClassFullDetail)<SUB>2394</SUB>> ]
+"12979" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor() &lt;&lt; &quot;.&quot; &lt;&lt; name &lt;&lt; sig &lt;&lt; &quot; in &quot;)<SUB>2395</SUB>> ]
+"12996" [label = <(ToModifiedUtf8,c-&gt;GetDexCache()-&gt;GetLocation()-&gt;ToModifiedUtf8())<SUB>2398</SUB>> ]
+"13008" [label = <(Get,c.Get())<SUB>2399</SUB>> ]
+"13057" [label = <(VLOG,VLOG(jni))<SUB>2410</SUB>> ]
+"13061" [label = <(&lt;operator&gt;.indirectFieldAccess,m-&gt;PrettyMethod)<SUB>2410</SUB>> ]
+"13070" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;!bang JNI is deprecated. Switch to @FastNative for &quot;)<SUB>2419</SUB>> ]
+"13074" [label = <(PrettyMethod,m-&gt;PrettyMethod())<SUB>2419</SUB>> ]
+"13087" [label = <(FIELD_IDENTIFIER,RegisterNative,RegisterNative)<SUB>2424</SUB>> ]
+"12693" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2307</SUB>> ]
+"12695" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2307</SUB>> ]
+"12763" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2316</SUB>> ]
+"12765" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2316</SUB>> ]
+"12815" [label = <(&lt;operator&gt;.fieldAccess,c.Get)<SUB>2322</SUB>> ]
+"12825" [label = <(UNLIKELY,UNLIKELY(sig == nullptr))<SUB>2324</SUB>> ]
+"12883" [label = <(&lt;operator&gt;.indirectFieldAccess,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm)<SUB>2370</SUB>> ]
+"12892" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>2371</SUB>> ]
+"12899" [label = <(&lt;operator&gt;.fieldAccess,c.Get)<SUB>2371</SUB>> ]
+"12910" [label = <(FIELD_IDENTIFIER,GetSuperClass,GetSuperClass)<SUB>2373</SUB>> ]
+"12915" [label = <(&lt;operator&gt;.lessThan,FindMethod&lt;true)<SUB>2375</SUB>> ]
+"12918" [label = <(&lt;operator&gt;.bracketedPrimary,(current_class, name, sig))<SUB>2375</SUB>> ]
+"12932" [label = <(&lt;operator&gt;.lessThan,FindMethod&lt;false)<SUB>2381</SUB>> ]
+"12935" [label = <(&lt;operator&gt;.bracketedPrimary,(current_class, name, sig))<SUB>2381</SUB>> ]
+"12949" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;CheckJNI: method to register \&quot;&quot; &lt;&lt; name &lt;&lt; &quot;\&quot; not in the given class. &quot;\012 &lt;&lt; &quot;This is slow, consider changing your RegisterNatives calls.&quot;)<SUB>2387</SUB>> ]
+"12959" [label = <(&lt;operator&gt;.assignment,warn_on_going_to_parent = false)<SUB>2389</SUB>> ]
+"12970" [label = <(FIELD_IDENTIFIER,DumpClass,DumpClass)<SUB>2394</SUB>> ]
+"12974" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2394</SUB>> ]
+"12977" [label = <(FIELD_IDENTIFIER,kDumpClassFullDetail,kDumpClassFullDetail)<SUB>2394</SUB>> ]
+"12980" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor() &lt;&lt; &quot;.&quot; &lt;&lt; name &lt;&lt; sig)<SUB>2395</SUB>> ]
+"12997" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;GetDexCache()-&gt;GetLocation()-&gt;ToModifiedUtf8)<SUB>2398</SUB>> ]
+"13009" [label = <(&lt;operator&gt;.fieldAccess,c.Get)<SUB>2399</SUB>> ]
+"13020" [label = <(&lt;operator&gt;.logicalNot,!m-&gt;IsNative())<SUB>2401</SUB>> ]
+"13063" [label = <(FIELD_IDENTIFIER,PrettyMethod,PrettyMethod)<SUB>2410</SUB>> ]
+"13071" [label = <(LOG,LOG(WARNING))<SUB>2419</SUB>> ]
+"13075" [label = <(&lt;operator&gt;.indirectFieldAccess,m-&gt;PrettyMethod)<SUB>2419</SUB>> ]
+"12817" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>2322</SUB>> ]
+"12826" [label = <(&lt;operator&gt;.equals,sig == nullptr)<SUB>2324</SUB>> ]
+"12830" [label = <(ReportInvalidJNINativeMethod,ReportInvalidJNINativeMethod(soa, c.Get(), &quot;method signature&quot;, i))<SUB>2325</SUB>> ]
+"12838" [label = <(RETURN,return JNI_ERR;,return JNI_ERR;)<SUB>2326</SUB>> ]
+"12884" [label = <(down_cast&lt;JNIEnvExt*&gt;,down_cast&lt;JNIEnvExt*&gt;(env))<SUB>2370</SUB>> ]
+"12886" [label = <(FIELD_IDENTIFIER,GetVm,GetVm)<SUB>2370</SUB>> ]
+"12894" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2371</SUB>> ]
+"12901" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>2371</SUB>> ]
+"12919" [label = <(&lt;operator&gt;.expressionList,current_class, name, sig)<SUB>2375</SUB>> ]
+"12936" [label = <(&lt;operator&gt;.expressionList,current_class, name, sig)<SUB>2381</SUB>> ]
+"12950" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;CheckJNI: method to register \&quot;&quot; &lt;&lt; name &lt;&lt; &quot;\&quot; not in the given class. &quot;)<SUB>2387</SUB>> ]
+"12981" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor() &lt;&lt; &quot;.&quot; &lt;&lt; name)<SUB>2395</SUB>> ]
+"12998" [label = <(GetLocation,c-&gt;GetDexCache()-&gt;GetLocation())<SUB>2398</SUB>> ]
+"13005" [label = <(FIELD_IDENTIFIER,ToModifiedUtf8,ToModifiedUtf8)<SUB>2398</SUB>> ]
+"13011" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>2399</SUB>> ]
+"13021" [label = <(IsNative,m-&gt;IsNative())<SUB>2401</SUB>> ]
+"13026" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register non-native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor() &lt;&lt; &quot;.&quot; &lt;&lt; name &lt;&lt; sig\012 &lt;&lt; &quot; as native&quot;)<SUB>2402</SUB>> ]
+"13043" [label = <(ThrowNoSuchMethodError,ThrowNoSuchMethodError(soa, c.Get(), name, sig, &quot;native&quot;))<SUB>2406</SUB>> ]
+"13052" [label = <(RETURN,return JNI_ERR;,return JNI_ERR;)<SUB>2407</SUB>> ]
+"13077" [label = <(FIELD_IDENTIFIER,PrettyMethod,PrettyMethod)<SUB>2419</SUB>> ]
+"12832" [label = <(Get,c.Get())<SUB>2325</SUB>> ]
+"12896" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>2371</SUB>> ]
+"12951" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;CheckJNI: method to register \&quot;&quot; &lt;&lt; name)<SUB>2387</SUB>> ]
+"12982" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor() &lt;&lt; &quot;.&quot;)<SUB>2395</SUB>> ]
+"12999" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;GetDexCache()-&gt;GetLocation)<SUB>2398</SUB>> ]
+"13022" [label = <(&lt;operator&gt;.indirectFieldAccess,m-&gt;IsNative)<SUB>2401</SUB>> ]
+"13027" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register non-native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor() &lt;&lt; &quot;.&quot; &lt;&lt; name &lt;&lt; sig)<SUB>2402</SUB>> ]
+"13045" [label = <(Get,c.Get())<SUB>2406</SUB>> ]
+"12833" [label = <(&lt;operator&gt;.fieldAccess,c.Get)<SUB>2325</SUB>> ]
+"12843" [label = <(UNLIKELY,UNLIKELY(fnPtr == nullptr))<SUB>2327</SUB>> ]
+"12952" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;CheckJNI: method to register \&quot;&quot;)<SUB>2387</SUB>> ]
+"12983" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor())<SUB>2395</SUB>> ]
+"13000" [label = <(GetDexCache,c-&gt;GetDexCache())<SUB>2398</SUB>> ]
+"13004" [label = <(FIELD_IDENTIFIER,GetLocation,GetLocation)<SUB>2398</SUB>> ]
+"13024" [label = <(FIELD_IDENTIFIER,IsNative,IsNative)<SUB>2401</SUB>> ]
+"13028" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register non-native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor() &lt;&lt; &quot;.&quot; &lt;&lt; name)<SUB>2402</SUB>> ]
+"13046" [label = <(&lt;operator&gt;.fieldAccess,c.Get)<SUB>2406</SUB>> ]
+"12835" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>2325</SUB>> ]
+"12844" [label = <(&lt;operator&gt;.equals,fnPtr == nullptr)<SUB>2327</SUB>> ]
+"12848" [label = <(ReportInvalidJNINativeMethod,ReportInvalidJNINativeMethod(soa, c.Get(), &quot;native function&quot;, i))<SUB>2328</SUB>> ]
+"12856" [label = <(RETURN,return JNI_ERR;,return JNI_ERR;)<SUB>2329</SUB>> ]
+"12953" [label = <(LOG,LOG(WARNING))<SUB>2387</SUB>> ]
+"12984" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register native method &quot;)<SUB>2395</SUB>> ]
+"12988" [label = <(PrettyDescriptor,c-&gt;PrettyDescriptor())<SUB>2397</SUB>> ]
+"13001" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;GetDexCache)<SUB>2398</SUB>> ]
+"13029" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register non-native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor() &lt;&lt; &quot;.&quot;)<SUB>2402</SUB>> ]
+"13048" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>2406</SUB>> ]
+"12850" [label = <(Get,c.Get())<SUB>2328</SUB>> ]
+"12985" [label = <(LOG,LOG(ERROR))<SUB>2395</SUB>> ]
+"12989" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;PrettyDescriptor)<SUB>2397</SUB>> ]
+"13003" [label = <(FIELD_IDENTIFIER,GetDexCache,GetDexCache)<SUB>2398</SUB>> ]
+"13030" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register non-native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor())<SUB>2402</SUB>> ]
+"12851" [label = <(&lt;operator&gt;.fieldAccess,c.Get)<SUB>2328</SUB>> ]
+"12991" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>2397</SUB>> ]
+"13031" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register non-native method &quot;)<SUB>2402</SUB>> ]
+"13035" [label = <(PrettyDescriptor,c-&gt;PrettyDescriptor())<SUB>2404</SUB>> ]
+"12853" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>2328</SUB>> ]
+"13032" [label = <(LOG,LOG(ERROR))<SUB>2402</SUB>> ]
+"13036" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;PrettyDescriptor)<SUB>2404</SUB>> ]
+"13038" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>2404</SUB>> ]
+"12658" [label = <(METHOD,RegisterNatives)<SUB>2298</SUB>> ]
+"13093" [label = <(METHOD_RETURN,jint)<SUB>2298</SUB>> ]
+  "12680" -> "12687" 
+  "12680" -> "12701" 
+  "12701" -> "12704" 
+  "12703" -> "12718" 
+  "12712" -> "12735" 
+  "12750" -> "12757" 
+  "12750" -> "12773" 
+  "13091" -> "13093" 
+  "12665" -> "12672" 
+  "12665" -> "12680" 
+  "12704" -> "12711" 
+  "12707" -> "12703" 
+  "12713" -> "12723" 
+  "12720" -> "12712" 
+  "12734" -> "12741" 
+  "12734" -> "12750" 
+  "12776" -> "12786" 
+  "12776" -> "13091" 
+  "12779" -> "12776" 
+  "12666" -> "12665" 
+  "12670" -> "12678" 
+  "12678" -> "13093" 
+  "12708" -> "12707" 
+  "12714" -> "12713" 
+  "12721" -> "12728" 
+  "12724" -> "12720" 
+  "12735" -> "12734" 
+  "12739" -> "12748" 
+  "12748" -> "13093" 
+  "12773" -> "12776" 
+  "12783" -> "12794" 
+  "12791" -> "12802" 
+  "12799" -> "12808" 
+  "12859" -> "12864" 
+  "12874" -> "12884" 
+  "12878" -> "12896" 
+  "13054" -> "13066" 
+  "13082" -> "13089" 
+  "13089" -> "12779" 
+  "12671" -> "12670" 
+  "12686" -> "12693" 
+  "12686" -> "12701" 
+  "12709" -> "12708" 
+  "12716" -> "12714" 
+  "12723" -> "12721" 
+  "12725" -> "12724" 
+  "12740" -> "12747" 
+  "12744" -> "12739" 
+  "12756" -> "12763" 
+  "12756" -> "12773" 
+  "12785" -> "12783" 
+  "12793" -> "12791" 
+  "12801" -> "12799" 
+  "12807" -> "12817" 
+  "12807" -> "12826" 
+  "12863" -> "12868" 
+  "12863" -> "12874" 
+  "12880" -> "12878" 
+  "12902" -> "12915" 
+  "12902" -> "12963" 
+  "12905" -> "12902" 
+  "12963" -> "12970" 
+  "12963" -> "13024" 
+  "13055" -> "13054" 
+  "13066" -> "13071" 
+  "13066" -> "13087" 
+  "13084" -> "13082" 
+  "12672" -> "12674" 
+  "12674" -> "12671" 
+  "12687" -> "12686" 
+  "12691" -> "12698" 
+  "12698" -> "13093" 
+  "12711" -> "12709" 
+  "12718" -> "12716" 
+  "12726" -> "12731" 
+  "12729" -> "12725" 
+  "12741" -> "12740" 
+  "12745" -> "12744" 
+  "12757" -> "12756" 
+  "12761" -> "12768" 
+  "12768" -> "13093" 
+  "12786" -> "12789" 
+  "12789" -> "12785" 
+  "12794" -> "12797" 
+  "12797" -> "12793" 
+  "12802" -> "12805" 
+  "12805" -> "12801" 
+  "12808" -> "12807" 
+  "12812" -> "12820" 
+  "12820" -> "13093" 
+  "12864" -> "12863" 
+  "12868" -> "12871" 
+  "12871" -> "12874" 
+  "12881" -> "12880" 
+  "12890" -> "12902" 
+  "12907" -> "12905" 
+  "12912" -> "12924" 
+  "12929" -> "12941" 
+  "12967" -> "12985" 
+  "12978" -> "13011" 
+  "13006" -> "13015" 
+  "13015" -> "13093" 
+  "13056" -> "13063" 
+  "13060" -> "13055" 
+  "13069" -> "13078" 
+  "13078" -> "13087" 
+  "13085" -> "13084" 
+  "12692" -> "12691" 
+  "12728" -> "12726" 
+  "12731" -> "12729" 
+  "12747" -> "12745" 
+  "12762" -> "12761" 
+  "12814" -> "12812" 
+  "12882" -> "12887" 
+  "12887" -> "12881" 
+  "12891" -> "12901" 
+  "12898" -> "12890" 
+  "12908" -> "12907" 
+  "12914" -> "12912" 
+  "12924" -> "12963" 
+  "12924" -> "12932" 
+  "12931" -> "12929" 
+  "12941" -> "12963" 
+  "12941" -> "12953" 
+  "12941" -> "12910" 
+  "12968" -> "12971" 
+  "12971" -> "12974" 
+  "12973" -> "12967" 
+  "12979" -> "13003" 
+  "12996" -> "12978" 
+  "13008" -> "13006" 
+  "13057" -> "13056" 
+  "13061" -> "13060" 
+  "13070" -> "13077" 
+  "13074" -> "13069" 
+  "13087" -> "13085" 
+  "12693" -> "12695" 
+  "12695" -> "12692" 
+  "12763" -> "12765" 
+  "12765" -> "12762" 
+  "12815" -> "12814" 
+  "12825" -> "12835" 
+  "12825" -> "12844" 
+  "12883" -> "12882" 
+  "12892" -> "12891" 
+  "12899" -> "12898" 
+  "12910" -> "12908" 
+  "12915" -> "12919" 
+  "12918" -> "12914" 
+  "12932" -> "12936" 
+  "12935" -> "12931" 
+  "12949" -> "12959" 
+  "12959" -> "12910" 
+  "12970" -> "12968" 
+  "12974" -> "12977" 
+  "12977" -> "12973" 
+  "12980" -> "12979" 
+  "12997" -> "12996" 
+  "13009" -> "13008" 
+  "13020" -> "13032" 
+  "13020" -> "13057" 
+  "13063" -> "13061" 
+  "13071" -> "13070" 
+  "13075" -> "13074" 
+  "12817" -> "12815" 
+  "12826" -> "12825" 
+  "12830" -> "12838" 
+  "12838" -> "13093" 
+  "12884" -> "12886" 
+  "12886" -> "12883" 
+  "12894" -> "12892" 
+  "12901" -> "12899" 
+  "12919" -> "12918" 
+  "12936" -> "12935" 
+  "12950" -> "12949" 
+  "12981" -> "12980" 
+  "12998" -> "13005" 
+  "13005" -> "12997" 
+  "13011" -> "13009" 
+  "13021" -> "13020" 
+  "13026" -> "13048" 
+  "13043" -> "13052" 
+  "13052" -> "13093" 
+  "13077" -> "13075" 
+  "12832" -> "12830" 
+  "12896" -> "12894" 
+  "12951" -> "12950" 
+  "12982" -> "12981" 
+  "12999" -> "12998" 
+  "13022" -> "13021" 
+  "13027" -> "13026" 
+  "13045" -> "13043" 
+  "12833" -> "12832" 
+  "12843" -> "12853" 
+  "12843" -> "12859" 
+  "12952" -> "12951" 
+  "12983" -> "12982" 
+  "13000" -> "13004" 
+  "13004" -> "12999" 
+  "13024" -> "13022" 
+  "13028" -> "13027" 
+  "13046" -> "13045" 
+  "12835" -> "12833" 
+  "12844" -> "12843" 
+  "12848" -> "12856" 
+  "12856" -> "13093" 
+  "12953" -> "12952" 
+  "12984" -> "12991" 
+  "12988" -> "12983" 
+  "13001" -> "13000" 
+  "13029" -> "13028" 
+  "13048" -> "13046" 
+  "12850" -> "12848" 
+  "12985" -> "12984" 
+  "12989" -> "12988" 
+  "13003" -> "13001" 
+  "13030" -> "13029" 
+  "12851" -> "12850" 
+  "12991" -> "12989" 
+  "13031" -> "13038" 
+  "13035" -> "13030" 
+  "12853" -> "12851" 
+  "13032" -> "13031" 
+  "13036" -> "13035" 
+  "13038" -> "13036" 
+  "12658" -> "12666" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/244-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/244-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/244-cfg.dot	2023-06-07 19:35:01.547387157 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/244-cfg.dot	2023-06-07 19:35:08.087386511 +0330
@@ -1,7 +1,123 @@
-digraph "SetIntArrayRegion" {  
-"12981" [label = <(SetPrimitiveArrayRegion&lt;jintArray,jint,mirror::IntArray&gt;,SetPrimitiveArrayRegion&lt;jintArray, jint, mirror::IntArray&gt;(env, array, start, length, buf))<SUB>2415</SUB>> ]
-"12974" [label = <(METHOD,SetIntArrayRegion)<SUB>2413</SUB>> ]
-"12987" [label = <(METHOD_RETURN,void)<SUB>2413</SUB>> ]
-  "12981" -> "12987" 
-  "12974" -> "12981" 
+digraph "UnregisterNatives" {  
+"13099" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_ERR))<SUB>2431</SUB>> ]
+"13119" [label = <(soa,soa(env))<SUB>2432</SUB>> ]
+"13121" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c = soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>2433</SUB>> ]
+"13138" [label = <(&lt;operator&gt;.shiftLeft,VLOG(jni) &lt;&lt; &quot;[Unregistering JNI native methods for &quot; &lt;&lt; mirror::Class::PrettyClass(c) &lt;&lt; &quot;]&quot;)<SUB>2435</SUB>> ]
+"13153" [label = <(&lt;operator&gt;.assignment,unregistered_count = 0)<SUB>2437</SUB>> ]
+"13157" [label = <(&lt;operator&gt;.assignment,pointer_size = Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize())<SUB>2438</SUB>> ]
+"13208" [label = <(RETURN,return JNI_OK;,return JNI_OK;)<SUB>2450</SUB>> ]
+"13122" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c)<SUB>2433</SUB>> ]
+"13129" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>2433</SUB>> ]
+"13139" [label = <(&lt;operator&gt;.shiftLeft,VLOG(jni) &lt;&lt; &quot;[Unregistering JNI native methods for &quot; &lt;&lt; mirror::Class::PrettyClass(c))<SUB>2435</SUB>> ]
+"13159" [label = <(GetImagePointerSize,Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize())<SUB>2438</SUB>> ]
+"13190" [label = <(&lt;operator&gt;.equals,unregistered_count == 0)<SUB>2446</SUB>> ]
+"13123" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>2433</SUB>> ]
+"13130" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>2433</SUB>> ]
+"13140" [label = <(&lt;operator&gt;.shiftLeft,VLOG(jni) &lt;&lt; &quot;[Unregistering JNI native methods for &quot;)<SUB>2435</SUB>> ]
+"13144" [label = <(mirror::Class::PrettyClass,mirror::Class::PrettyClass(c))<SUB>2435</SUB>> ]
+"13160" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize)<SUB>2438</SUB>> ]
+"13194" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI UnregisterNatives: attempt to unregister native methods of class '&quot;\012 &lt;&lt; mirror::Class::PrettyDescriptor(c) &lt;&lt; &quot;' that contains no native methods&quot;)<SUB>2447</SUB>> ]
+"13104" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>2431</SUB>> ]
+"13125" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2433</SUB>> ]
+"13131" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2433</SUB>> ]
+"13134" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2433</SUB>> ]
+"13141" [label = <(VLOG,VLOG(jni))<SUB>2435</SUB>> ]
+"13145" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class::PrettyClass)<SUB>2435</SUB>> ]
+"13161" [label = <(GetClassLinker,Runtime::Current()-&gt;GetClassLinker())<SUB>2438</SUB>> ]
+"13168" [label = <(FIELD_IDENTIFIER,GetImagePointerSize,GetImagePointerSize)<SUB>2438</SUB>> ]
+"13178" [label = <(IsNative,m.IsNative())<SUB>2440</SUB>> ]
+"13195" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI UnregisterNatives: attempt to unregister native methods of class '&quot;\012 &lt;&lt; mirror::Class::PrettyDescriptor(c))<SUB>2447</SUB>> ]
+"13105" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>2431</SUB>> ]
+"13109" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_ERR),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class == null&quot;))<SUB>2431</SUB>> ]
+"13116" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_ERR),CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_ERR))<SUB>2431</SUB>> ]
+"13127" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>2433</SUB>> ]
+"13133" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2433</SUB>> ]
+"13136" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>2433</SUB>> ]
+"13146" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2435</SUB>> ]
+"13149" [label = <(FIELD_IDENTIFIER,PrettyClass,PrettyClass)<SUB>2435</SUB>> ]
+"13162" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetClassLinker)<SUB>2438</SUB>> ]
+"13179" [label = <(&lt;operator&gt;.fieldAccess,m.IsNative)<SUB>2440</SUB>> ]
+"13183" [label = <(UnregisterNative,m.UnregisterNative())<SUB>2441</SUB>> ]
+"13187" [label = <(&lt;operator&gt;.postIncrement,unregistered_count++)<SUB>2442</SUB>> ]
+"13196" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI UnregisterNatives: attempt to unregister native methods of class '&quot;)<SUB>2447</SUB>> ]
+"13200" [label = <(mirror::Class::PrettyDescriptor,mirror::Class::PrettyDescriptor(c))<SUB>2448</SUB>> ]
+"13110" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2431</SUB>> ]
+"13163" [label = <(Runtime::Current,Runtime::Current())<SUB>2438</SUB>> ]
+"13167" [label = <(FIELD_IDENTIFIER,GetClassLinker,GetClassLinker)<SUB>2438</SUB>> ]
+"13181" [label = <(FIELD_IDENTIFIER,IsNative,IsNative)<SUB>2440</SUB>> ]
+"13184" [label = <(&lt;operator&gt;.fieldAccess,m.UnregisterNative)<SUB>2441</SUB>> ]
+"13197" [label = <(LOG,LOG(WARNING))<SUB>2447</SUB>> ]
+"13201" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class::PrettyDescriptor)<SUB>2448</SUB>> ]
+"13111" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2431</SUB>> ]
+"13113" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2431</SUB>> ]
+"13164" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>2438</SUB>> ]
+"13186" [label = <(FIELD_IDENTIFIER,UnregisterNative,UnregisterNative)<SUB>2441</SUB>> ]
+"13202" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2448</SUB>> ]
+"13205" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>2448</SUB>> ]
+"13166" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>2438</SUB>> ]
+"13095" [label = <(METHOD,UnregisterNatives)<SUB>2430</SUB>> ]
+"13210" [label = <(METHOD_RETURN,jint)<SUB>2430</SUB>> ]
+  "13099" -> "13105" 
+  "13099" -> "13119" 
+  "13119" -> "13127" 
+  "13121" -> "13141" 
+  "13138" -> "13153" 
+  "13153" -> "13166" 
+  "13157" -> "13181" 
+  "13208" -> "13210" 
+  "13122" -> "13133" 
+  "13129" -> "13121" 
+  "13139" -> "13138" 
+  "13159" -> "13157" 
+  "13190" -> "13197" 
+  "13190" -> "13208" 
+  "13123" -> "13122" 
+  "13130" -> "13129" 
+  "13140" -> "13146" 
+  "13144" -> "13139" 
+  "13160" -> "13159" 
+  "13194" -> "13208" 
+  "13104" -> "13111" 
+  "13104" -> "13119" 
+  "13125" -> "13123" 
+  "13131" -> "13136" 
+  "13134" -> "13130" 
+  "13141" -> "13140" 
+  "13145" -> "13144" 
+  "13161" -> "13168" 
+  "13168" -> "13160" 
+  "13178" -> "13181" 
+  "13178" -> "13186" 
+  "13178" -> "13190" 
+  "13195" -> "13194" 
+  "13105" -> "13104" 
+  "13109" -> "13116" 
+  "13116" -> "13210" 
+  "13127" -> "13125" 
+  "13133" -> "13131" 
+  "13136" -> "13134" 
+  "13146" -> "13149" 
+  "13149" -> "13145" 
+  "13162" -> "13161" 
+  "13179" -> "13178" 
+  "13183" -> "13187" 
+  "13187" -> "13181" 
+  "13187" -> "13190" 
+  "13196" -> "13202" 
+  "13200" -> "13195" 
+  "13110" -> "13109" 
+  "13163" -> "13167" 
+  "13167" -> "13162" 
+  "13181" -> "13179" 
+  "13184" -> "13183" 
+  "13197" -> "13196" 
+  "13201" -> "13200" 
+  "13111" -> "13113" 
+  "13113" -> "13110" 
+  "13164" -> "13163" 
+  "13186" -> "13184" 
+  "13202" -> "13205" 
+  "13205" -> "13201" 
+  "13166" -> "13164" 
+  "13095" -> "13099" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/245-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/245-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/245-cfg.dot	2023-06-07 19:35:01.547387157 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/245-cfg.dot	2023-06-07 19:35:08.087386511 +0330
@@ -1,7 +1,5 @@
-digraph "SetLongArrayRegion" {  
-"12996" [label = <(SetPrimitiveArrayRegion&lt;jlongArray,jlong,mirror::LongArray&gt;,SetPrimitiveArrayRegion&lt;jlongArray, jlong, mirror::LongArray&gt;(env, array, start, length, buf))<SUB>2420</SUB>> ]
-"12989" [label = <(METHOD,SetLongArrayRegion)<SUB>2418</SUB>> ]
-"13002" [label = <(METHOD_RETURN,void)<SUB>2418</SUB>> ]
-  "12996" -> "13002" 
-  "12989" -> "12996" 
+digraph "MonitorEnter" {  
+"13212" [label = <(METHOD,MonitorEnter)<SUB>2453</SUB>> ]
+"13216" [label = <(METHOD_RETURN,jint)<SUB>2453</SUB>> ]
+  "13212" -> "13216" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/246-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/246-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/246-cfg.dot	2023-06-07 19:35:01.547387157 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/246-cfg.dot	2023-06-07 19:35:08.087386511 +0330
@@ -1,7 +1,5 @@
-digraph "SetShortArrayRegion" {  
-"13011" [label = <(SetPrimitiveArrayRegion&lt;jshortArray,jshort,mirror::ShortArray&gt;,SetPrimitiveArrayRegion&lt;jshortArray, jshort, mirror::ShortArray&gt;(env, array, start, length,\012                                                                     buf))<SUB>2425</SUB>> ]
-"13004" [label = <(METHOD,SetShortArrayRegion)<SUB>2423</SUB>> ]
-"13017" [label = <(METHOD_RETURN,void)<SUB>2423</SUB>> ]
-  "13011" -> "13017" 
-  "13004" -> "13011" 
+digraph "MonitorExit" {  
+"13220" [label = <(METHOD,MonitorExit)<SUB>2467</SUB>> ]
+"13224" [label = <(METHOD_RETURN,jint)<SUB>2467</SUB>> ]
+  "13220" -> "13224" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/247-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/247-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/247-cfg.dot	2023-06-07 19:35:01.557387154 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/247-cfg.dot	2023-06-07 19:35:08.087386511 +0330
@@ -1,437 +1,56 @@
-digraph "RegisterNatives" {  
-"13041" [label = <(CHECK_NON_NULL_ARGUMENT_FN_NAME,CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, java_class, JNI_ERR))<SUB>2438</SUB>> ]
-"13062" [label = <(soa,soa(env))<SUB>2439</SUB>> ]
-"13064" [label = <(&lt;operator&gt;.greaterThan,StackHandleScope&lt;1&gt; hs(soa.Self()))<SUB>2440</SUB>> ]
-"13073" [label = <(&lt;operator&gt;.assignment,Handle&lt;mirror::Class&gt; c = hs.NewHandle(soa.Decode&lt;mirror::Class&gt;(java_class)))<SUB>2441</SUB>> ]
-"13111" [label = <(CHECK_NON_NULL_ARGUMENT_FN_NAME,CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, methods, JNI_ERR))<SUB>2447</SUB>> ]
-"13452" [label = <(RETURN,return JNI_OK;,return JNI_OK;)<SUB>2558</SUB>> ]
-"13026" [label = <(UNLIKELY,UNLIKELY(method_count &lt; 0))<SUB>2433</SUB>> ]
-"13065" [label = <(&lt;operator&gt;.lessThan,StackHandleScope&lt;1)<SUB>2440</SUB>> ]
-"13068" [label = <(hs,hs(soa.Self()))<SUB>2440</SUB>> ]
-"13074" [label = <(&lt;operator&gt;.greaterThan,Handle&lt;mirror::Class&gt; c)<SUB>2441</SUB>> ]
-"13081" [label = <(NewHandle,hs.NewHandle(soa.Decode&lt;mirror::Class&gt;(java_class)))<SUB>2441</SUB>> ]
-"13095" [label = <(UNLIKELY,UNLIKELY(method_count == 0))<SUB>2442</SUB>> ]
-"13137" [label = <(&lt;operator&gt;.lessThan,i &lt; method_count)<SUB>2448</SUB>> ]
-"13140" [label = <(&lt;operator&gt;.preIncrement,++i)<SUB>2448</SUB>> ]
-"13027" [label = <(&lt;operator&gt;.lessThan,method_count &lt; 0)<SUB>2433</SUB>> ]
-"13031" [label = <(JniAbortF,JavaVmExtFromEnv(env)-&gt;JniAbortF(&quot;RegisterNatives&quot;, &quot;negative method count: %d&quot;,\012                                       method_count))<SUB>2434</SUB>> ]
-"13039" [label = <(RETURN,return JNI_ERR;,return JNI_ERR;)<SUB>2436</SUB>> ]
-"13069" [label = <(Self,soa.Self())<SUB>2440</SUB>> ]
-"13075" [label = <(&lt;operator&gt;.lessThan,Handle&lt;mirror::Class)<SUB>2441</SUB>> ]
-"13082" [label = <(&lt;operator&gt;.fieldAccess,hs.NewHandle)<SUB>2441</SUB>> ]
-"13085" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>2441</SUB>> ]
-"13096" [label = <(&lt;operator&gt;.equals,method_count == 0)<SUB>2442</SUB>> ]
-"13100" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI RegisterNativeMethods: attempt to register 0 native methods for &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor())<SUB>2443</SUB>> ]
-"13109" [label = <(RETURN,return JNI_OK;,return JNI_OK;)<SUB>2445</SUB>> ]
-"13134" [label = <(&lt;operator&gt;.assignment,i = 0)<SUB>2448</SUB>> ]
-"13144" [label = <(&lt;operator&gt;.assignment,* name = methods[i].name)<SUB>2449</SUB>> ]
-"13152" [label = <(&lt;operator&gt;.assignment,* sig = methods[i].signature)<SUB>2450</SUB>> ]
-"13160" [label = <(&lt;operator&gt;.assignment,* fnPtr = methods[i].fnPtr)<SUB>2451</SUB>> ]
-"13220" [label = <(&lt;operator&gt;.assignment,is_fast = false)<SUB>2462</SUB>> ]
-"13235" [label = <(&lt;operator&gt;.assignment,* m = nullptr)<SUB>2500</SUB>> ]
-"13239" [label = <(&lt;operator&gt;.assignment,warn_on_going_to_parent = down_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm()-&gt;IsCheckJniEnabled())<SUB>2501</SUB>> ]
-"13415" [label = <(&lt;operator&gt;.shiftLeft,VLOG(jni) &lt;&lt; &quot;[Registering JNI native method &quot; &lt;&lt; m-&gt;PrettyMethod() &lt;&lt; &quot;]&quot;)<SUB>2541</SUB>> ]
-"13443" [label = <(&lt;operator&gt;.assignment,* final_function_ptr = m-&gt;RegisterNative(fnPtr))<SUB>2555</SUB>> ]
-"13450" [label = <(UNUSED,UNUSED(final_function_ptr))<SUB>2556</SUB>> ]
-"13032" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>2434</SUB>> ]
-"13047" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>2438</SUB>> ]
-"13070" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>2440</SUB>> ]
-"13077" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2441</SUB>> ]
-"13084" [label = <(FIELD_IDENTIFIER,NewHandle,NewHandle)<SUB>2441</SUB>> ]
-"13086" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>2441</SUB>> ]
-"13101" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI RegisterNativeMethods: attempt to register 0 native methods for &quot;)<SUB>2443</SUB>> ]
-"13105" [label = <(PrettyDescriptor,c-&gt;PrettyDescriptor())<SUB>2444</SUB>> ]
-"13117" [label = <(UNLIKELY,UNLIKELY((methods) == nullptr))<SUB>2447</SUB>> ]
-"13146" [label = <(&lt;operator&gt;.fieldAccess,methods[i].name)<SUB>2449</SUB>> ]
-"13154" [label = <(&lt;operator&gt;.fieldAccess,methods[i].signature)<SUB>2450</SUB>> ]
-"13162" [label = <(&lt;operator&gt;.fieldAccess,methods[i].fnPtr)<SUB>2451</SUB>> ]
-"13168" [label = <(UNLIKELY,UNLIKELY(name == nullptr))<SUB>2452</SUB>> ]
-"13224" [label = <(&lt;operator&gt;.equals,*sig == '!')<SUB>2492</SUB>> ]
-"13241" [label = <(IsCheckJniEnabled,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm()-&gt;IsCheckJniEnabled())<SUB>2501</SUB>> ]
-"13263" [label = <(&lt;operator&gt;.notEquals,current_class != nullptr)<SUB>2503</SUB>> ]
-"13266" [label = <(&lt;operator&gt;.assignment,current_class = current_class-&gt;GetSuperClass())<SUB>2504</SUB>> ]
-"13324" [label = <(&lt;operator&gt;.equals,m == nullptr)<SUB>2524</SUB>> ]
-"13416" [label = <(&lt;operator&gt;.shiftLeft,VLOG(jni) &lt;&lt; &quot;[Registering JNI native method &quot; &lt;&lt; m-&gt;PrettyMethod())<SUB>2541</SUB>> ]
-"13427" [label = <(UNLIKELY,UNLIKELY(is_fast))<SUB>2543</SUB>> ]
-"13445" [label = <(RegisterNative,m-&gt;RegisterNative(fnPtr))<SUB>2555</SUB>> ]
-"13033" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2434</SUB>> ]
-"13035" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2434</SUB>> ]
-"13048" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>2438</SUB>> ]
-"13052" [label = <(CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, java_class, JNI_ERR),JavaVmExtFromEnv(env)-&gt;JniAbort(&quot;RegisterNatives&quot;, &quot;java_class == null&quot;))<SUB>2438</SUB>> ]
-"13059" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, java_class, JNI_ERR),CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, java_class, JNI_ERR))<SUB>2438</SUB>> ]
-"13072" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>2440</SUB>> ]
-"13079" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>2441</SUB>> ]
-"13087" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2441</SUB>> ]
-"13090" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2441</SUB>> ]
-"13102" [label = <(LOG,LOG(WARNING))<SUB>2443</SUB>> ]
-"13106" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;PrettyDescriptor)<SUB>2444</SUB>> ]
-"13118" [label = <(&lt;operator&gt;.equals,(methods) == nullptr)<SUB>2447</SUB>> ]
-"13122" [label = <(CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, methods, JNI_ERR),JavaVmExtFromEnv(env)-&gt;JniAbort(&quot;RegisterNatives&quot;, &quot;methods == null&quot;))<SUB>2447</SUB>> ]
-"13129" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, methods, JNI_ERR),CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, methods, JNI_ERR))<SUB>2447</SUB>> ]
-"13147" [label = <(&lt;operator&gt;.indirectIndexAccess,methods[i])<SUB>2449</SUB>> ]
-"13150" [label = <(FIELD_IDENTIFIER,name,name)<SUB>2449</SUB>> ]
-"13155" [label = <(&lt;operator&gt;.indirectIndexAccess,methods[i])<SUB>2450</SUB>> ]
-"13158" [label = <(FIELD_IDENTIFIER,signature,signature)<SUB>2450</SUB>> ]
-"13163" [label = <(&lt;operator&gt;.indirectIndexAccess,methods[i])<SUB>2451</SUB>> ]
-"13166" [label = <(FIELD_IDENTIFIER,fnPtr,fnPtr)<SUB>2451</SUB>> ]
-"13169" [label = <(&lt;operator&gt;.equals,name == nullptr)<SUB>2452</SUB>> ]
-"13173" [label = <(ReportInvalidJNINativeMethod,ReportInvalidJNINativeMethod(soa, c.Get(), &quot;method name&quot;, i))<SUB>2453</SUB>> ]
-"13181" [label = <(RETURN,return JNI_ERR;,return JNI_ERR;)<SUB>2454</SUB>> ]
-"13225" [label = <(&lt;operator&gt;.indirection,*sig)<SUB>2492</SUB>> ]
-"13229" [label = <(&lt;operator&gt;.assignment,is_fast = true)<SUB>2493</SUB>> ]
-"13232" [label = <(&lt;operator&gt;.preIncrement,++sig)<SUB>2494</SUB>> ]
-"13242" [label = <(&lt;operator&gt;.indirectFieldAccess,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm()-&gt;IsCheckJniEnabled)<SUB>2501</SUB>> ]
-"13251" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; current_class = c.Get())<SUB>2502</SUB>> ]
-"13268" [label = <(GetSuperClass,current_class-&gt;GetSuperClass())<SUB>2504</SUB>> ]
-"13273" [label = <(&lt;operator&gt;.assignment,m = FindMethod&lt;true&gt;(current_class, name, sig))<SUB>2506</SUB>> ]
-"13290" [label = <(&lt;operator&gt;.assignment,m = FindMethod&lt;false&gt;(current_class, name, sig))<SUB>2512</SUB>> ]
-"13328" [label = <(DumpClass,c-&gt;DumpClass(LOG_STREAM(ERROR), mirror::Class::kDumpClassFullDetail))<SUB>2525</SUB>> ]
-"13339" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor() &lt;&lt; &quot;.&quot; &lt;&lt; name &lt;&lt; sig &lt;&lt; &quot; in &quot;\012 &lt;&lt; c-&gt;GetDexCache()-&gt;GetLocation()-&gt;ToModifiedUtf8())<SUB>2526</SUB>> ]
-"13367" [label = <(ThrowNoSuchMethodError,ThrowNoSuchMethodError(soa, c.Get(), name, sig, &quot;static or non-static&quot;))<SUB>2530</SUB>> ]
-"13376" [label = <(RETURN,return JNI_ERR;,return JNI_ERR;)<SUB>2531</SUB>> ]
-"13417" [label = <(&lt;operator&gt;.shiftLeft,VLOG(jni) &lt;&lt; &quot;[Registering JNI native method &quot;)<SUB>2541</SUB>> ]
-"13421" [label = <(PrettyMethod,m-&gt;PrettyMethod())<SUB>2541</SUB>> ]
-"13430" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;!bang JNI is deprecated. Switch to @FastNative for &quot; &lt;&lt; m-&gt;PrettyMethod())<SUB>2550</SUB>> ]
-"13439" [label = <(&lt;operator&gt;.assignment,is_fast = false)<SUB>2551</SUB>> ]
-"13446" [label = <(&lt;operator&gt;.indirectFieldAccess,m-&gt;RegisterNative)<SUB>2555</SUB>> ]
-"13053" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2438</SUB>> ]
-"13089" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2441</SUB>> ]
-"13092" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>2441</SUB>> ]
-"13108" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>2444</SUB>> ]
-"13123" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2447</SUB>> ]
-"13175" [label = <(Get,c.Get())<SUB>2453</SUB>> ]
-"13243" [label = <(GetVm,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm())<SUB>2501</SUB>> ]
-"13248" [label = <(FIELD_IDENTIFIER,IsCheckJniEnabled,IsCheckJniEnabled)<SUB>2501</SUB>> ]
-"13252" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; current_class)<SUB>2502</SUB>> ]
-"13259" [label = <(Get,c.Get())<SUB>2502</SUB>> ]
-"13269" [label = <(&lt;operator&gt;.indirectFieldAccess,current_class-&gt;GetSuperClass)<SUB>2504</SUB>> ]
-"13275" [label = <(&lt;operator&gt;.greaterThan,FindMethod&lt;true&gt;(current_class, name, sig))<SUB>2506</SUB>> ]
-"13285" [label = <(&lt;operator&gt;.notEquals,m != nullptr)<SUB>2507</SUB>> ]
-"13292" [label = <(&lt;operator&gt;.greaterThan,FindMethod&lt;false&gt;(current_class, name, sig))<SUB>2512</SUB>> ]
-"13302" [label = <(&lt;operator&gt;.notEquals,m != nullptr)<SUB>2513</SUB>> ]
-"13329" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;DumpClass)<SUB>2525</SUB>> ]
-"13332" [label = <(LOG_STREAM,LOG_STREAM(ERROR))<SUB>2525</SUB>> ]
-"13334" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class::kDumpClassFullDetail)<SUB>2525</SUB>> ]
-"13340" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor() &lt;&lt; &quot;.&quot; &lt;&lt; name &lt;&lt; sig &lt;&lt; &quot; in &quot;)<SUB>2526</SUB>> ]
-"13357" [label = <(ToModifiedUtf8,c-&gt;GetDexCache()-&gt;GetLocation()-&gt;ToModifiedUtf8())<SUB>2529</SUB>> ]
-"13369" [label = <(Get,c.Get())<SUB>2530</SUB>> ]
-"13418" [label = <(VLOG,VLOG(jni))<SUB>2541</SUB>> ]
-"13422" [label = <(&lt;operator&gt;.indirectFieldAccess,m-&gt;PrettyMethod)<SUB>2541</SUB>> ]
-"13431" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;!bang JNI is deprecated. Switch to @FastNative for &quot;)<SUB>2550</SUB>> ]
-"13435" [label = <(PrettyMethod,m-&gt;PrettyMethod())<SUB>2550</SUB>> ]
-"13448" [label = <(FIELD_IDENTIFIER,RegisterNative,RegisterNative)<SUB>2555</SUB>> ]
-"13054" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2438</SUB>> ]
-"13056" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2438</SUB>> ]
-"13124" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2447</SUB>> ]
-"13126" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2447</SUB>> ]
-"13176" [label = <(&lt;operator&gt;.fieldAccess,c.Get)<SUB>2453</SUB>> ]
-"13186" [label = <(UNLIKELY,UNLIKELY(sig == nullptr))<SUB>2455</SUB>> ]
-"13244" [label = <(&lt;operator&gt;.indirectFieldAccess,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm)<SUB>2501</SUB>> ]
-"13253" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>2502</SUB>> ]
-"13260" [label = <(&lt;operator&gt;.fieldAccess,c.Get)<SUB>2502</SUB>> ]
-"13271" [label = <(FIELD_IDENTIFIER,GetSuperClass,GetSuperClass)<SUB>2504</SUB>> ]
-"13276" [label = <(&lt;operator&gt;.lessThan,FindMethod&lt;true)<SUB>2506</SUB>> ]
-"13279" [label = <(&lt;operator&gt;.bracketedPrimary,(current_class, name, sig))<SUB>2506</SUB>> ]
-"13293" [label = <(&lt;operator&gt;.lessThan,FindMethod&lt;false)<SUB>2512</SUB>> ]
-"13296" [label = <(&lt;operator&gt;.bracketedPrimary,(current_class, name, sig))<SUB>2512</SUB>> ]
-"13310" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;CheckJNI: method to register \&quot;&quot; &lt;&lt; name &lt;&lt; &quot;\&quot; not in the given class. &quot;\012 &lt;&lt; &quot;This is slow, consider changing your RegisterNatives calls.&quot;)<SUB>2518</SUB>> ]
-"13320" [label = <(&lt;operator&gt;.assignment,warn_on_going_to_parent = false)<SUB>2520</SUB>> ]
-"13331" [label = <(FIELD_IDENTIFIER,DumpClass,DumpClass)<SUB>2525</SUB>> ]
-"13335" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2525</SUB>> ]
-"13338" [label = <(FIELD_IDENTIFIER,kDumpClassFullDetail,kDumpClassFullDetail)<SUB>2525</SUB>> ]
-"13341" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor() &lt;&lt; &quot;.&quot; &lt;&lt; name &lt;&lt; sig)<SUB>2526</SUB>> ]
-"13358" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;GetDexCache()-&gt;GetLocation()-&gt;ToModifiedUtf8)<SUB>2529</SUB>> ]
-"13370" [label = <(&lt;operator&gt;.fieldAccess,c.Get)<SUB>2530</SUB>> ]
-"13381" [label = <(&lt;operator&gt;.logicalNot,!m-&gt;IsNative())<SUB>2532</SUB>> ]
-"13424" [label = <(FIELD_IDENTIFIER,PrettyMethod,PrettyMethod)<SUB>2541</SUB>> ]
-"13432" [label = <(LOG,LOG(WARNING))<SUB>2550</SUB>> ]
-"13436" [label = <(&lt;operator&gt;.indirectFieldAccess,m-&gt;PrettyMethod)<SUB>2550</SUB>> ]
-"13178" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>2453</SUB>> ]
-"13187" [label = <(&lt;operator&gt;.equals,sig == nullptr)<SUB>2455</SUB>> ]
-"13191" [label = <(ReportInvalidJNINativeMethod,ReportInvalidJNINativeMethod(soa, c.Get(), &quot;method signature&quot;, i))<SUB>2456</SUB>> ]
-"13199" [label = <(RETURN,return JNI_ERR;,return JNI_ERR;)<SUB>2457</SUB>> ]
-"13245" [label = <(down_cast&lt;JNIEnvExt*&gt;,down_cast&lt;JNIEnvExt*&gt;(env))<SUB>2501</SUB>> ]
-"13247" [label = <(FIELD_IDENTIFIER,GetVm,GetVm)<SUB>2501</SUB>> ]
-"13255" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2502</SUB>> ]
-"13262" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>2502</SUB>> ]
-"13280" [label = <(&lt;operator&gt;.expressionList,current_class, name, sig)<SUB>2506</SUB>> ]
-"13297" [label = <(&lt;operator&gt;.expressionList,current_class, name, sig)<SUB>2512</SUB>> ]
-"13311" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;CheckJNI: method to register \&quot;&quot; &lt;&lt; name &lt;&lt; &quot;\&quot; not in the given class. &quot;)<SUB>2518</SUB>> ]
-"13342" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor() &lt;&lt; &quot;.&quot; &lt;&lt; name)<SUB>2526</SUB>> ]
-"13359" [label = <(GetLocation,c-&gt;GetDexCache()-&gt;GetLocation())<SUB>2529</SUB>> ]
-"13366" [label = <(FIELD_IDENTIFIER,ToModifiedUtf8,ToModifiedUtf8)<SUB>2529</SUB>> ]
-"13372" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>2530</SUB>> ]
-"13382" [label = <(IsNative,m-&gt;IsNative())<SUB>2532</SUB>> ]
-"13387" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register non-native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor() &lt;&lt; &quot;.&quot; &lt;&lt; name &lt;&lt; sig\012 &lt;&lt; &quot; as native&quot;)<SUB>2533</SUB>> ]
-"13404" [label = <(ThrowNoSuchMethodError,ThrowNoSuchMethodError(soa, c.Get(), name, sig, &quot;native&quot;))<SUB>2537</SUB>> ]
-"13413" [label = <(RETURN,return JNI_ERR;,return JNI_ERR;)<SUB>2538</SUB>> ]
-"13438" [label = <(FIELD_IDENTIFIER,PrettyMethod,PrettyMethod)<SUB>2550</SUB>> ]
-"13193" [label = <(Get,c.Get())<SUB>2456</SUB>> ]
-"13257" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>2502</SUB>> ]
-"13312" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;CheckJNI: method to register \&quot;&quot; &lt;&lt; name)<SUB>2518</SUB>> ]
-"13343" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor() &lt;&lt; &quot;.&quot;)<SUB>2526</SUB>> ]
-"13360" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;GetDexCache()-&gt;GetLocation)<SUB>2529</SUB>> ]
-"13383" [label = <(&lt;operator&gt;.indirectFieldAccess,m-&gt;IsNative)<SUB>2532</SUB>> ]
-"13388" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register non-native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor() &lt;&lt; &quot;.&quot; &lt;&lt; name &lt;&lt; sig)<SUB>2533</SUB>> ]
-"13406" [label = <(Get,c.Get())<SUB>2537</SUB>> ]
-"13194" [label = <(&lt;operator&gt;.fieldAccess,c.Get)<SUB>2456</SUB>> ]
-"13204" [label = <(UNLIKELY,UNLIKELY(fnPtr == nullptr))<SUB>2458</SUB>> ]
-"13313" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;CheckJNI: method to register \&quot;&quot;)<SUB>2518</SUB>> ]
-"13344" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor())<SUB>2526</SUB>> ]
-"13361" [label = <(GetDexCache,c-&gt;GetDexCache())<SUB>2529</SUB>> ]
-"13365" [label = <(FIELD_IDENTIFIER,GetLocation,GetLocation)<SUB>2529</SUB>> ]
-"13385" [label = <(FIELD_IDENTIFIER,IsNative,IsNative)<SUB>2532</SUB>> ]
-"13389" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register non-native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor() &lt;&lt; &quot;.&quot; &lt;&lt; name)<SUB>2533</SUB>> ]
-"13407" [label = <(&lt;operator&gt;.fieldAccess,c.Get)<SUB>2537</SUB>> ]
-"13196" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>2456</SUB>> ]
-"13205" [label = <(&lt;operator&gt;.equals,fnPtr == nullptr)<SUB>2458</SUB>> ]
-"13209" [label = <(ReportInvalidJNINativeMethod,ReportInvalidJNINativeMethod(soa, c.Get(), &quot;native function&quot;, i))<SUB>2459</SUB>> ]
-"13217" [label = <(RETURN,return JNI_ERR;,return JNI_ERR;)<SUB>2460</SUB>> ]
-"13314" [label = <(LOG,LOG(WARNING))<SUB>2518</SUB>> ]
-"13345" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register native method &quot;)<SUB>2526</SUB>> ]
-"13349" [label = <(PrettyDescriptor,c-&gt;PrettyDescriptor())<SUB>2528</SUB>> ]
-"13362" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;GetDexCache)<SUB>2529</SUB>> ]
-"13390" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register non-native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor() &lt;&lt; &quot;.&quot;)<SUB>2533</SUB>> ]
-"13409" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>2537</SUB>> ]
-"13211" [label = <(Get,c.Get())<SUB>2459</SUB>> ]
-"13346" [label = <(LOG,LOG(ERROR))<SUB>2526</SUB>> ]
-"13350" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;PrettyDescriptor)<SUB>2528</SUB>> ]
-"13364" [label = <(FIELD_IDENTIFIER,GetDexCache,GetDexCache)<SUB>2529</SUB>> ]
-"13391" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register non-native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor())<SUB>2533</SUB>> ]
-"13212" [label = <(&lt;operator&gt;.fieldAccess,c.Get)<SUB>2459</SUB>> ]
-"13352" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>2528</SUB>> ]
-"13392" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register non-native method &quot;)<SUB>2533</SUB>> ]
-"13396" [label = <(PrettyDescriptor,c-&gt;PrettyDescriptor())<SUB>2535</SUB>> ]
-"13214" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>2459</SUB>> ]
-"13393" [label = <(LOG,LOG(ERROR))<SUB>2533</SUB>> ]
-"13397" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;PrettyDescriptor)<SUB>2535</SUB>> ]
-"13399" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>2535</SUB>> ]
-"13019" [label = <(METHOD,RegisterNatives)<SUB>2429</SUB>> ]
-"13454" [label = <(METHOD_RETURN,jint)<SUB>2429</SUB>> ]
-  "13041" -> "13048" 
-  "13041" -> "13062" 
-  "13062" -> "13065" 
-  "13064" -> "13079" 
-  "13073" -> "13096" 
-  "13111" -> "13118" 
-  "13111" -> "13134" 
-  "13452" -> "13454" 
-  "13026" -> "13033" 
-  "13026" -> "13041" 
-  "13065" -> "13072" 
-  "13068" -> "13064" 
-  "13074" -> "13084" 
-  "13081" -> "13073" 
-  "13095" -> "13102" 
-  "13095" -> "13111" 
-  "13137" -> "13147" 
-  "13137" -> "13452" 
-  "13140" -> "13137" 
-  "13027" -> "13026" 
-  "13031" -> "13039" 
-  "13039" -> "13454" 
-  "13069" -> "13068" 
-  "13075" -> "13074" 
-  "13082" -> "13089" 
-  "13085" -> "13081" 
-  "13096" -> "13095" 
-  "13100" -> "13109" 
-  "13109" -> "13454" 
-  "13134" -> "13137" 
-  "13144" -> "13155" 
-  "13152" -> "13163" 
-  "13160" -> "13169" 
-  "13220" -> "13225" 
-  "13235" -> "13245" 
-  "13239" -> "13257" 
-  "13415" -> "13427" 
-  "13443" -> "13450" 
-  "13450" -> "13140" 
-  "13032" -> "13031" 
-  "13047" -> "13054" 
-  "13047" -> "13062" 
-  "13070" -> "13069" 
-  "13077" -> "13075" 
-  "13084" -> "13082" 
-  "13086" -> "13085" 
-  "13101" -> "13108" 
-  "13105" -> "13100" 
-  "13117" -> "13124" 
-  "13117" -> "13134" 
-  "13146" -> "13144" 
-  "13154" -> "13152" 
-  "13162" -> "13160" 
-  "13168" -> "13178" 
-  "13168" -> "13187" 
-  "13224" -> "13229" 
-  "13224" -> "13235" 
-  "13241" -> "13239" 
-  "13263" -> "13276" 
-  "13263" -> "13324" 
-  "13266" -> "13263" 
-  "13324" -> "13331" 
-  "13324" -> "13385" 
-  "13416" -> "13415" 
-  "13427" -> "13432" 
-  "13427" -> "13448" 
-  "13445" -> "13443" 
-  "13033" -> "13035" 
-  "13035" -> "13032" 
-  "13048" -> "13047" 
-  "13052" -> "13059" 
-  "13059" -> "13454" 
-  "13072" -> "13070" 
-  "13079" -> "13077" 
-  "13087" -> "13092" 
-  "13090" -> "13086" 
-  "13102" -> "13101" 
-  "13106" -> "13105" 
-  "13118" -> "13117" 
-  "13122" -> "13129" 
-  "13129" -> "13454" 
-  "13147" -> "13150" 
-  "13150" -> "13146" 
-  "13155" -> "13158" 
-  "13158" -> "13154" 
-  "13163" -> "13166" 
-  "13166" -> "13162" 
-  "13169" -> "13168" 
-  "13173" -> "13181" 
-  "13181" -> "13454" 
-  "13225" -> "13224" 
-  "13229" -> "13232" 
-  "13232" -> "13235" 
-  "13242" -> "13241" 
-  "13251" -> "13263" 
-  "13268" -> "13266" 
-  "13273" -> "13285" 
-  "13290" -> "13302" 
-  "13328" -> "13346" 
-  "13339" -> "13372" 
-  "13367" -> "13376" 
-  "13376" -> "13454" 
-  "13417" -> "13424" 
-  "13421" -> "13416" 
-  "13430" -> "13439" 
-  "13439" -> "13448" 
-  "13446" -> "13445" 
-  "13053" -> "13052" 
-  "13089" -> "13087" 
-  "13092" -> "13090" 
-  "13108" -> "13106" 
-  "13123" -> "13122" 
-  "13175" -> "13173" 
-  "13243" -> "13248" 
-  "13248" -> "13242" 
-  "13252" -> "13262" 
-  "13259" -> "13251" 
-  "13269" -> "13268" 
-  "13275" -> "13273" 
-  "13285" -> "13324" 
-  "13285" -> "13293" 
-  "13292" -> "13290" 
-  "13302" -> "13324" 
-  "13302" -> "13314" 
-  "13302" -> "13271" 
-  "13329" -> "13332" 
-  "13332" -> "13335" 
-  "13334" -> "13328" 
-  "13340" -> "13364" 
-  "13357" -> "13339" 
-  "13369" -> "13367" 
-  "13418" -> "13417" 
-  "13422" -> "13421" 
-  "13431" -> "13438" 
-  "13435" -> "13430" 
-  "13448" -> "13446" 
-  "13054" -> "13056" 
-  "13056" -> "13053" 
-  "13124" -> "13126" 
-  "13126" -> "13123" 
-  "13176" -> "13175" 
-  "13186" -> "13196" 
-  "13186" -> "13205" 
-  "13244" -> "13243" 
-  "13253" -> "13252" 
-  "13260" -> "13259" 
-  "13271" -> "13269" 
-  "13276" -> "13280" 
-  "13279" -> "13275" 
-  "13293" -> "13297" 
-  "13296" -> "13292" 
-  "13310" -> "13320" 
-  "13320" -> "13271" 
-  "13331" -> "13329" 
-  "13335" -> "13338" 
-  "13338" -> "13334" 
-  "13341" -> "13340" 
-  "13358" -> "13357" 
-  "13370" -> "13369" 
-  "13381" -> "13393" 
-  "13381" -> "13418" 
-  "13424" -> "13422" 
-  "13432" -> "13431" 
-  "13436" -> "13435" 
-  "13178" -> "13176" 
-  "13187" -> "13186" 
-  "13191" -> "13199" 
-  "13199" -> "13454" 
-  "13245" -> "13247" 
-  "13247" -> "13244" 
-  "13255" -> "13253" 
-  "13262" -> "13260" 
-  "13280" -> "13279" 
-  "13297" -> "13296" 
-  "13311" -> "13310" 
-  "13342" -> "13341" 
-  "13359" -> "13366" 
-  "13366" -> "13358" 
-  "13372" -> "13370" 
-  "13382" -> "13381" 
-  "13387" -> "13409" 
-  "13404" -> "13413" 
-  "13413" -> "13454" 
-  "13438" -> "13436" 
-  "13193" -> "13191" 
+digraph "GetJavaVM" {  
+"13232" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(vm, JNI_ERR))<SUB>2483</SUB>> ]
+"13252" [label = <(&lt;operator&gt;.assignment,* runtime = Runtime::Current())<SUB>2484</SUB>> ]
+"13276" [label = <(RETURN,return (*vm != nullptr) ? JNI_OK : JNI_ERR;,return (*vm != nullptr) ? JNI_OK : JNI_ERR;)<SUB>2490</SUB>> ]
+"13254" [label = <(Runtime::Current,Runtime::Current())<SUB>2484</SUB>> ]
+"13259" [label = <(&lt;operator&gt;.notEquals,runtime != nullptr)<SUB>2485</SUB>> ]
+"13277" [label = <(&lt;operator&gt;.conditional,(*vm != nullptr) ? JNI_OK : JNI_ERR)<SUB>2490</SUB>> ]
+"13255" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>2484</SUB>> ]
+"13263" [label = <(&lt;operator&gt;.assignment,*vm = runtime-&gt;GetJavaVM())<SUB>2486</SUB>> ]
+"13278" [label = <(&lt;operator&gt;.notEquals,*vm != nullptr)<SUB>2490</SUB>> ]
+"13237" [label = <(UNLIKELY,UNLIKELY((vm) == nullptr))<SUB>2483</SUB>> ]
+"13257" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>2484</SUB>> ]
+"13264" [label = <(&lt;operator&gt;.indirection,*vm)<SUB>2486</SUB>> ]
+"13266" [label = <(GetJavaVM,runtime-&gt;GetJavaVM())<SUB>2486</SUB>> ]
+"13272" [label = <(&lt;operator&gt;.assignment,*vm = nullptr)<SUB>2488</SUB>> ]
+"13279" [label = <(&lt;operator&gt;.indirection,*vm)<SUB>2490</SUB>> ]
+"13238" [label = <(&lt;operator&gt;.equals,(vm) == nullptr)<SUB>2483</SUB>> ]
+"13242" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN(vm, JNI_ERR),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;vm == null&quot;))<SUB>2483</SUB>> ]
+"13249" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(vm, JNI_ERR),CHECK_NON_NULL_ARGUMENT_RETURN(vm, JNI_ERR))<SUB>2483</SUB>> ]
+"13267" [label = <(&lt;operator&gt;.indirectFieldAccess,runtime-&gt;GetJavaVM)<SUB>2486</SUB>> ]
+"13273" [label = <(&lt;operator&gt;.indirection,*vm)<SUB>2488</SUB>> ]
+"13243" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2483</SUB>> ]
+"13269" [label = <(FIELD_IDENTIFIER,GetJavaVM,GetJavaVM)<SUB>2486</SUB>> ]
+"13244" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2483</SUB>> ]
+"13246" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2483</SUB>> ]
+"13228" [label = <(METHOD,GetJavaVM)<SUB>2482</SUB>> ]
+"13284" [label = <(METHOD_RETURN,jint)<SUB>2482</SUB>> ]
+  "13232" -> "13238" 
+  "13232" -> "13257" 
+  "13252" -> "13259" 
+  "13276" -> "13284" 
+  "13254" -> "13252" 
+  "13259" -> "13264" 
+  "13259" -> "13273" 
+  "13277" -> "13276" 
+  "13255" -> "13254" 
+  "13263" -> "13279" 
+  "13278" -> "13277" 
+  "13237" -> "13244" 
+  "13237" -> "13257" 
   "13257" -> "13255" 
-  "13312" -> "13311" 
-  "13343" -> "13342" 
-  "13360" -> "13359" 
-  "13383" -> "13382" 
-  "13388" -> "13387" 
-  "13406" -> "13404" 
-  "13194" -> "13193" 
-  "13204" -> "13214" 
-  "13204" -> "13220" 
-  "13313" -> "13312" 
-  "13344" -> "13343" 
-  "13361" -> "13365" 
-  "13365" -> "13360" 
-  "13385" -> "13383" 
-  "13389" -> "13388" 
-  "13407" -> "13406" 
-  "13196" -> "13194" 
-  "13205" -> "13204" 
-  "13209" -> "13217" 
-  "13217" -> "13454" 
-  "13314" -> "13313" 
-  "13345" -> "13352" 
-  "13349" -> "13344" 
-  "13362" -> "13361" 
-  "13390" -> "13389" 
-  "13409" -> "13407" 
-  "13211" -> "13209" 
-  "13346" -> "13345" 
-  "13350" -> "13349" 
-  "13364" -> "13362" 
-  "13391" -> "13390" 
-  "13212" -> "13211" 
-  "13352" -> "13350" 
-  "13392" -> "13399" 
-  "13396" -> "13391" 
-  "13214" -> "13212" 
-  "13393" -> "13392" 
-  "13397" -> "13396" 
-  "13399" -> "13397" 
-  "13019" -> "13027" 
+  "13264" -> "13269" 
+  "13266" -> "13263" 
+  "13272" -> "13279" 
+  "13279" -> "13278" 
+  "13238" -> "13237" 
+  "13242" -> "13249" 
+  "13249" -> "13284" 
+  "13267" -> "13266" 
+  "13273" -> "13272" 
+  "13243" -> "13242" 
+  "13269" -> "13267" 
+  "13244" -> "13246" 
+  "13246" -> "13243" 
+  "13228" -> "13232" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/248-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/248-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/248-cfg.dot	2023-06-07 19:35:01.557387154 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/248-cfg.dot	2023-06-07 19:35:08.087386511 +0330
@@ -1,123 +1,83 @@
-digraph "UnregisterNatives" {  
-"13460" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_ERR))<SUB>2562</SUB>> ]
-"13480" [label = <(soa,soa(env))<SUB>2563</SUB>> ]
-"13482" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c = soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>2564</SUB>> ]
-"13499" [label = <(&lt;operator&gt;.shiftLeft,VLOG(jni) &lt;&lt; &quot;[Unregistering JNI native methods for &quot; &lt;&lt; mirror::Class::PrettyClass(c) &lt;&lt; &quot;]&quot;)<SUB>2566</SUB>> ]
-"13514" [label = <(&lt;operator&gt;.assignment,unregistered_count = 0)<SUB>2568</SUB>> ]
-"13518" [label = <(&lt;operator&gt;.assignment,pointer_size = Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize())<SUB>2569</SUB>> ]
-"13569" [label = <(RETURN,return JNI_OK;,return JNI_OK;)<SUB>2581</SUB>> ]
-"13483" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c)<SUB>2564</SUB>> ]
-"13490" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>2564</SUB>> ]
-"13500" [label = <(&lt;operator&gt;.shiftLeft,VLOG(jni) &lt;&lt; &quot;[Unregistering JNI native methods for &quot; &lt;&lt; mirror::Class::PrettyClass(c))<SUB>2566</SUB>> ]
-"13520" [label = <(GetImagePointerSize,Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize())<SUB>2569</SUB>> ]
-"13551" [label = <(&lt;operator&gt;.equals,unregistered_count == 0)<SUB>2577</SUB>> ]
-"13484" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>2564</SUB>> ]
-"13491" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>2564</SUB>> ]
-"13501" [label = <(&lt;operator&gt;.shiftLeft,VLOG(jni) &lt;&lt; &quot;[Unregistering JNI native methods for &quot;)<SUB>2566</SUB>> ]
-"13505" [label = <(mirror::Class::PrettyClass,mirror::Class::PrettyClass(c))<SUB>2566</SUB>> ]
-"13521" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize)<SUB>2569</SUB>> ]
-"13555" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI UnregisterNatives: attempt to unregister native methods of class '&quot;\012 &lt;&lt; mirror::Class::PrettyDescriptor(c) &lt;&lt; &quot;' that contains no native methods&quot;)<SUB>2578</SUB>> ]
-"13465" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>2562</SUB>> ]
-"13486" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2564</SUB>> ]
-"13492" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2564</SUB>> ]
-"13495" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2564</SUB>> ]
-"13502" [label = <(VLOG,VLOG(jni))<SUB>2566</SUB>> ]
-"13506" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class::PrettyClass)<SUB>2566</SUB>> ]
-"13522" [label = <(GetClassLinker,Runtime::Current()-&gt;GetClassLinker())<SUB>2569</SUB>> ]
-"13529" [label = <(FIELD_IDENTIFIER,GetImagePointerSize,GetImagePointerSize)<SUB>2569</SUB>> ]
-"13539" [label = <(IsNative,m.IsNative())<SUB>2571</SUB>> ]
-"13556" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI UnregisterNatives: attempt to unregister native methods of class '&quot;\012 &lt;&lt; mirror::Class::PrettyDescriptor(c))<SUB>2578</SUB>> ]
-"13466" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>2562</SUB>> ]
-"13470" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_ERR),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class == null&quot;))<SUB>2562</SUB>> ]
-"13477" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_ERR),CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_ERR))<SUB>2562</SUB>> ]
-"13488" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>2564</SUB>> ]
-"13494" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2564</SUB>> ]
-"13497" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>2564</SUB>> ]
-"13507" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2566</SUB>> ]
-"13510" [label = <(FIELD_IDENTIFIER,PrettyClass,PrettyClass)<SUB>2566</SUB>> ]
-"13523" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetClassLinker)<SUB>2569</SUB>> ]
-"13540" [label = <(&lt;operator&gt;.fieldAccess,m.IsNative)<SUB>2571</SUB>> ]
-"13544" [label = <(UnregisterNative,m.UnregisterNative())<SUB>2572</SUB>> ]
-"13548" [label = <(&lt;operator&gt;.postIncrement,unregistered_count++)<SUB>2573</SUB>> ]
-"13557" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI UnregisterNatives: attempt to unregister native methods of class '&quot;)<SUB>2578</SUB>> ]
-"13561" [label = <(mirror::Class::PrettyDescriptor,mirror::Class::PrettyDescriptor(c))<SUB>2579</SUB>> ]
-"13471" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2562</SUB>> ]
-"13524" [label = <(Runtime::Current,Runtime::Current())<SUB>2569</SUB>> ]
-"13528" [label = <(FIELD_IDENTIFIER,GetClassLinker,GetClassLinker)<SUB>2569</SUB>> ]
-"13542" [label = <(FIELD_IDENTIFIER,IsNative,IsNative)<SUB>2571</SUB>> ]
-"13545" [label = <(&lt;operator&gt;.fieldAccess,m.UnregisterNative)<SUB>2572</SUB>> ]
-"13558" [label = <(LOG,LOG(WARNING))<SUB>2578</SUB>> ]
-"13562" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class::PrettyDescriptor)<SUB>2579</SUB>> ]
-"13472" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2562</SUB>> ]
-"13474" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2562</SUB>> ]
-"13525" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>2569</SUB>> ]
-"13547" [label = <(FIELD_IDENTIFIER,UnregisterNative,UnregisterNative)<SUB>2572</SUB>> ]
-"13563" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2579</SUB>> ]
-"13566" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>2579</SUB>> ]
-"13527" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>2569</SUB>> ]
-"13456" [label = <(METHOD,UnregisterNatives)<SUB>2561</SUB>> ]
-"13571" [label = <(METHOD_RETURN,jint)<SUB>2561</SUB>> ]
-  "13460" -> "13466" 
-  "13460" -> "13480" 
-  "13480" -> "13488" 
-  "13482" -> "13502" 
-  "13499" -> "13514" 
-  "13514" -> "13527" 
-  "13518" -> "13542" 
-  "13569" -> "13571" 
-  "13483" -> "13494" 
-  "13490" -> "13482" 
-  "13500" -> "13499" 
-  "13520" -> "13518" 
-  "13551" -> "13558" 
-  "13551" -> "13569" 
-  "13484" -> "13483" 
-  "13491" -> "13490" 
-  "13501" -> "13507" 
-  "13505" -> "13500" 
-  "13521" -> "13520" 
-  "13555" -> "13569" 
-  "13465" -> "13472" 
-  "13465" -> "13480" 
-  "13486" -> "13484" 
-  "13492" -> "13497" 
-  "13495" -> "13491" 
-  "13502" -> "13501" 
-  "13506" -> "13505" 
-  "13522" -> "13529" 
-  "13529" -> "13521" 
-  "13539" -> "13542" 
-  "13539" -> "13547" 
-  "13539" -> "13551" 
-  "13556" -> "13555" 
-  "13466" -> "13465" 
-  "13470" -> "13477" 
-  "13477" -> "13571" 
-  "13488" -> "13486" 
-  "13494" -> "13492" 
-  "13497" -> "13495" 
-  "13507" -> "13510" 
-  "13510" -> "13506" 
-  "13523" -> "13522" 
-  "13540" -> "13539" 
-  "13544" -> "13548" 
-  "13548" -> "13542" 
-  "13548" -> "13551" 
-  "13557" -> "13563" 
-  "13561" -> "13556" 
-  "13471" -> "13470" 
-  "13524" -> "13528" 
-  "13528" -> "13523" 
-  "13542" -> "13540" 
-  "13545" -> "13544" 
-  "13558" -> "13557" 
-  "13562" -> "13561" 
-  "13472" -> "13474" 
-  "13474" -> "13471" 
-  "13525" -> "13524" 
-  "13547" -> "13545" 
-  "13563" -> "13566" 
-  "13566" -> "13562" 
-  "13527" -> "13525" 
-  "13456" -> "13460" 
+digraph "NewDirectByteBuffer" {  
+"13326" [label = <(&lt;operator&gt;.assignment,address_arg = reinterpret_cast&lt;jlong&gt;(address))<SUB>2512</SUB>> ]
+"13332" [label = <(&lt;operator&gt;.assignment,capacity_arg = static_cast&lt;jint&gt;(capacity))<SUB>2513</SUB>> ]
+"13338" [label = <(&lt;operator&gt;.assignment,result = env-&gt;NewObject(WellKnownClasses::java_nio_DirectByteBuffer,\012 WellKnownClasses::java_nio_DirectByteBuffer_init,\012                                    address_arg, capacity_arg))<SUB>2515</SUB>> ]
+"13352" [label = <(RETURN,return static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_-&gt;IsExceptionPending() ? nullptr : result;,return static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_-&gt;IsExceptionPending() ? nullptr : result;)<SUB>2518</SUB>> ]
+"13292" [label = <(&lt;operator&gt;.lessThan,capacity &lt; 0)<SUB>2494</SUB>> ]
+"13302" [label = <(&lt;operator&gt;.logicalAnd,address == nullptr &amp;&amp; capacity != 0)<SUB>2499</SUB>> ]
+"13316" [label = <(&lt;operator&gt;.greaterThan,capacity &gt; INT_MAX)<SUB>2506</SUB>> ]
+"13328" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jlong&gt;(address))<SUB>2512</SUB>> ]
+"13334" [label = <(&lt;operator&gt;.cast,static_cast&lt;jint&gt;(capacity))<SUB>2513</SUB>> ]
+"13340" [label = <(NewObject,env-&gt;NewObject(WellKnownClasses::java_nio_DirectByteBuffer,\012 WellKnownClasses::java_nio_DirectByteBuffer_init,\012                                    address_arg, capacity_arg))<SUB>2515</SUB>> ]
+"13353" [label = <(&lt;operator&gt;.conditional,static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_-&gt;IsExceptionPending() ? nullptr : result)<SUB>2518</SUB>> ]
+"13297" [label = <(UNKNOWN,),))<SUB>2495</SUB>> ]
+"13298" [label = <(UNKNOWN,-&gt;JniAbortF(&quot;NewDirectByteBuffer&quot;, &quot;negative buffer capacity: %&quot; PRId64,\012                                       capacity);,-&gt;JniAbortF(&quot;NewDirectByteBuffer&quot;, &quot;negative buffer capacity: %&quot; PRId64,\012                                       capacity);)<SUB>2495</SUB>> ]
+"13299" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2497</SUB>> ]
+"13303" [label = <(&lt;operator&gt;.equals,address == nullptr)<SUB>2499</SUB>> ]
+"13306" [label = <(&lt;operator&gt;.notEquals,capacity != 0)<SUB>2499</SUB>> ]
+"13311" [label = <(UNKNOWN,),))<SUB>2500</SUB>> ]
+"13312" [label = <(UNKNOWN,-&gt;JniAbortF(&quot;NewDirectByteBuffer&quot;,\012 &quot;non-zero capacity for nullptr pointer: %&quot; PRId64, capacity);,-&gt;JniAbortF(&quot;NewDirectByteBuffer&quot;,\012 &quot;non-zero capacity for nullptr pointer: %&quot; PRId64, capacity);)<SUB>2500</SUB>> ]
+"13313" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2502</SUB>> ]
+"13321" [label = <(UNKNOWN,),))<SUB>2507</SUB>> ]
+"13322" [label = <(UNKNOWN,-&gt;JniAbortF(&quot;NewDirectByteBuffer&quot;,\012 &quot;buffer capacity greater than maximum jint: %&quot; PRId64,\012                                       capacity);,-&gt;JniAbortF(&quot;NewDirectByteBuffer&quot;,\012 &quot;buffer capacity greater than maximum jint: %&quot; PRId64,\012                                       capacity);)<SUB>2507</SUB>> ]
+"13323" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2510</SUB>> ]
+"13329" [label = <(UNKNOWN,jlong,jlong)<SUB>2512</SUB>> ]
+"13335" [label = <(UNKNOWN,jint,jint)<SUB>2513</SUB>> ]
+"13341" [label = <(&lt;operator&gt;.indirectFieldAccess,env-&gt;NewObject)<SUB>2515</SUB>> ]
+"13344" [label = <(&lt;operator&gt;.fieldAccess,WellKnownClasses::java_nio_DirectByteBuffer)<SUB>2515</SUB>> ]
+"13347" [label = <(&lt;operator&gt;.fieldAccess,WellKnownClasses::java_nio_DirectByteBuffer_init)<SUB>2516</SUB>> ]
+"13354" [label = <(IsExceptionPending,static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_-&gt;IsExceptionPending())<SUB>2518</SUB>> ]
+"13343" [label = <(FIELD_IDENTIFIER,NewObject,NewObject)<SUB>2515</SUB>> ]
+"13346" [label = <(FIELD_IDENTIFIER,java_nio_DirectByteBuffer,java_nio_DirectByteBuffer)<SUB>2515</SUB>> ]
+"13349" [label = <(FIELD_IDENTIFIER,java_nio_DirectByteBuffer_init,java_nio_DirectByteBuffer_init)<SUB>2516</SUB>> ]
+"13355" [label = <(&lt;operator&gt;.indirectFieldAccess,static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_-&gt;IsExceptionPending)<SUB>2518</SUB>> ]
+"13356" [label = <(&lt;operator&gt;.indirectFieldAccess,static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_)<SUB>2518</SUB>> ]
+"13361" [label = <(FIELD_IDENTIFIER,IsExceptionPending,IsExceptionPending)<SUB>2518</SUB>> ]
+"13357" [label = <(&lt;operator&gt;.cast,static_cast&lt;JNIEnvExt*&gt;(env))<SUB>2518</SUB>> ]
+"13360" [label = <(FIELD_IDENTIFIER,self_,self_)<SUB>2518</SUB>> ]
+"13358" [label = <(UNKNOWN,JNIEnvExt*,JNIEnvExt*)<SUB>2518</SUB>> ]
+"13286" [label = <(METHOD,NewDirectByteBuffer)<SUB>2493</SUB>> ]
+"13364" [label = <(METHOD_RETURN,jobject)<SUB>2493</SUB>> ]
+  "13326" -> "13335" 
+  "13332" -> "13343" 
+  "13338" -> "13358" 
+  "13352" -> "13364" 
+  "13292" -> "13297" 
+  "13292" -> "13303" 
+  "13302" -> "13311" 
+  "13302" -> "13316" 
+  "13316" -> "13321" 
+  "13316" -> "13329" 
+  "13328" -> "13326" 
+  "13334" -> "13332" 
+  "13340" -> "13338" 
+  "13353" -> "13352" 
+  "13297" -> "13298" 
+  "13298" -> "13299" 
+  "13299" -> "13364" 
+  "13303" -> "13302" 
+  "13303" -> "13306" 
+  "13306" -> "13302" 
+  "13311" -> "13312" 
+  "13312" -> "13313" 
+  "13313" -> "13364" 
+  "13321" -> "13322" 
+  "13322" -> "13323" 
+  "13323" -> "13364" 
+  "13329" -> "13328" 
+  "13335" -> "13334" 
+  "13341" -> "13346" 
+  "13344" -> "13349" 
+  "13347" -> "13340" 
+  "13354" -> "13353" 
+  "13343" -> "13341" 
+  "13346" -> "13344" 
+  "13349" -> "13347" 
+  "13355" -> "13354" 
+  "13356" -> "13361" 
+  "13361" -> "13355" 
+  "13357" -> "13360" 
+  "13360" -> "13356" 
+  "13358" -> "13357" 
+  "13286" -> "13292" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/249-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/249-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/249-cfg.dot	2023-06-07 19:35:01.557387154 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/249-cfg.dot	2023-06-07 19:35:08.097386510 +0330
@@ -1,5 +1,21 @@
-digraph "MonitorEnter" {  
-"13573" [label = <(METHOD,MonitorEnter)<SUB>2584</SUB>> ]
-"13577" [label = <(METHOD_RETURN,jint)<SUB>2584</SUB>> ]
-  "13573" -> "13577" 
+digraph "GetDirectBufferAddress" {  
+"13370" [label = <(RETURN,return reinterpret_cast&lt;void*&gt;(env-&gt;GetLongField(\012        java_buffer, WellKnownClasses::java_nio_DirectByteBuffer_effectiveDirectAddress));,return reinterpret_cast&lt;void*&gt;(env-&gt;GetLongField(\012        java_buffer, WellKnownClasses::java_nio_DirectByteBuffer_effectiveDirectAddress));)<SUB>2522</SUB>> ]
+"13371" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;void*&gt;(env-&gt;GetLongField(\012        java_buffer, WellKnownClasses::java_nio_DirectByteBuffer_effectiveDirectAddress)))<SUB>2522</SUB>> ]
+"13372" [label = <(UNKNOWN,void*,void*)<SUB>2522</SUB>> ]
+"13373" [label = <(GetLongField,env-&gt;GetLongField(\012        java_buffer, WellKnownClasses::java_nio_DirectByteBuffer_effectiveDirectAddress))<SUB>2522</SUB>> ]
+"13374" [label = <(&lt;operator&gt;.indirectFieldAccess,env-&gt;GetLongField)<SUB>2522</SUB>> ]
+"13378" [label = <(&lt;operator&gt;.fieldAccess,WellKnownClasses::java_nio_DirectByteBuffer_effectiveDirectAddress)<SUB>2523</SUB>> ]
+"13376" [label = <(FIELD_IDENTIFIER,GetLongField,GetLongField)<SUB>2522</SUB>> ]
+"13380" [label = <(FIELD_IDENTIFIER,java_nio_DirectByteBuffer_effectiveDirectAddress,java_nio_DirectByteBuffer_effectiveDirectAddress)<SUB>2523</SUB>> ]
+"13366" [label = <(METHOD,GetDirectBufferAddress)<SUB>2521</SUB>> ]
+"13381" [label = <(METHOD_RETURN,void*)<SUB>2521</SUB>> ]
+  "13370" -> "13381" 
+  "13371" -> "13370" 
+  "13372" -> "13376" 
+  "13373" -> "13371" 
+  "13374" -> "13380" 
+  "13378" -> "13373" 
+  "13376" -> "13374" 
+  "13380" -> "13378" 
+  "13366" -> "13372" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/25-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/25-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/25-cfg.dot	2023-06-07 19:35:01.347387178 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/25-cfg.dot	2023-06-07 19:35:07.927386526 +0330
@@ -1,17 +1,144 @@
-digraph "JavaVmExtFromEnv" {  
-"915" [label = <(RETURN,return reinterpret_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm();,return reinterpret_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm();)<SUB>518</SUB>> ]
-"916" [label = <(GetVm,reinterpret_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm())<SUB>518</SUB>> ]
-"917" [label = <(&lt;operator&gt;.indirectFieldAccess,reinterpret_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm)<SUB>518</SUB>> ]
-"918" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;JNIEnvExt*&gt;(env))<SUB>518</SUB>> ]
-"921" [label = <(FIELD_IDENTIFIER,GetVm,GetVm)<SUB>518</SUB>> ]
-"919" [label = <(UNKNOWN,JNIEnvExt*,JNIEnvExt*)<SUB>518</SUB>> ]
-"912" [label = <(METHOD,JavaVmExtFromEnv)<SUB>517</SUB>> ]
-"922" [label = <(METHOD_RETURN,JavaVMExt)<SUB>517</SUB>> ]
-  "915" -> "922" 
-  "916" -> "915" 
-  "917" -> "916" 
-  "918" -> "921" 
-  "921" -> "917" 
-  "919" -> "918" 
-  "912" -> "919" 
+digraph "FindClass" {  
+"769" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(name))<SUB>494</SUB>> ]
+"788" [label = <(&lt;operator&gt;.assignment,* runtime = Runtime::Current())<SUB>495</SUB>> ]
+"795" [label = <(&lt;operator&gt;.assignment,* class_linker = runtime-&gt;GetClassLinker())<SUB>496</SUB>> ]
+"802" [label = <(descriptor,descriptor(NormalizeJniClassDescriptor(name)))<SUB>497</SUB>> ]
+"806" [label = <(soa,soa(env))<SUB>498</SUB>> ]
+"808" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c = nullptr)<SUB>499</SUB>> ]
+"879" [label = <(RETURN,return soa.AddLocalReference&lt;jclass&gt;(c);,return soa.AddLocalReference&lt;jclass&gt;(c);)<SUB>507</SUB>> ]
+"790" [label = <(Runtime::Current,Runtime::Current())<SUB>495</SUB>> ]
+"797" [label = <(GetClassLinker,runtime-&gt;GetClassLinker())<SUB>496</SUB>> ]
+"803" [label = <(NormalizeJniClassDescriptor,NormalizeJniClassDescriptor(name))<SUB>497</SUB>> ]
+"809" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c)<SUB>499</SUB>> ]
+"818" [label = <(IsStarted,runtime-&gt;IsStarted())<SUB>500</SUB>> ]
+"880" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jclass&gt;(c))<SUB>507</SUB>> ]
+"791" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>495</SUB>> ]
+"798" [label = <(&lt;operator&gt;.indirectFieldAccess,runtime-&gt;GetClassLinker)<SUB>496</SUB>> ]
+"810" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>499</SUB>> ]
+"819" [label = <(&lt;operator&gt;.indirectFieldAccess,runtime-&gt;IsStarted)<SUB>500</SUB>> ]
+"823" [label = <(&lt;operator&gt;.greaterThan,StackHandleScope&lt;1&gt; hs(soa.Self()))<SUB>501</SUB>> ]
+"832" [label = <(&lt;operator&gt;.greaterThan,Handle&lt;mirror::ClassLoader&gt; class_loader(hs.NewHandle(GetClassLoader&lt;kEnableIndexIds&gt;(soa))))<SUB>502</SUB>> ]
+"848" [label = <(&lt;operator&gt;.assignment,c = class_linker-&gt;FindClass(soa.Self(), descriptor.c_str(), class_loader))<SUB>503</SUB>> ]
+"881" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jclass)<SUB>507</SUB>> ]
+"773" [label = <(UNLIKELY,UNLIKELY((name) == nullptr))<SUB>494</SUB>> ]
+"793" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>495</SUB>> ]
+"800" [label = <(FIELD_IDENTIFIER,GetClassLinker,GetClassLinker)<SUB>496</SUB>> ]
+"812" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>499</SUB>> ]
+"821" [label = <(FIELD_IDENTIFIER,IsStarted,IsStarted)<SUB>500</SUB>> ]
+"824" [label = <(&lt;operator&gt;.lessThan,StackHandleScope&lt;1)<SUB>501</SUB>> ]
+"827" [label = <(hs,hs(soa.Self()))<SUB>501</SUB>> ]
+"833" [label = <(&lt;operator&gt;.lessThan,Handle&lt;mirror::ClassLoader)<SUB>502</SUB>> ]
+"838" [label = <(class_loader,class_loader(hs.NewHandle(GetClassLoader&lt;kEnableIndexIds&gt;(soa))))<SUB>502</SUB>> ]
+"850" [label = <(FindClass,class_linker-&gt;FindClass(soa.Self(), descriptor.c_str(), class_loader))<SUB>503</SUB>> ]
+"865" [label = <(&lt;operator&gt;.assignment,c = class_linker-&gt;FindSystemClass(soa.Self(), descriptor.c_str()))<SUB>505</SUB>> ]
+"882" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>507</SUB>> ]
+"774" [label = <(&lt;operator&gt;.equals,(name) == nullptr)<SUB>494</SUB>> ]
+"778" [label = <(CHECK_NON_NULL_ARGUMENT(name),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;name == null&quot;))<SUB>494</SUB>> ]
+"785" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(name),CHECK_NON_NULL_ARGUMENT(name))<SUB>494</SUB>> ]
+"814" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>499</SUB>> ]
+"828" [label = <(Self,soa.Self())<SUB>501</SUB>> ]
+"835" [label = <(&lt;operator&gt;.fieldAccess,mirror::ClassLoader)<SUB>502</SUB>> ]
+"839" [label = <(NewHandle,hs.NewHandle(GetClassLoader&lt;kEnableIndexIds&gt;(soa)))<SUB>502</SUB>> ]
+"851" [label = <(&lt;operator&gt;.indirectFieldAccess,class_linker-&gt;FindClass)<SUB>503</SUB>> ]
+"854" [label = <(Self,soa.Self())<SUB>503</SUB>> ]
+"858" [label = <(c_str,descriptor.c_str())<SUB>503</SUB>> ]
+"867" [label = <(FindSystemClass,class_linker-&gt;FindSystemClass(soa.Self(), descriptor.c_str()))<SUB>505</SUB>> ]
+"884" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>507</SUB>> ]
+"779" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>494</SUB>> ]
+"829" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>501</SUB>> ]
+"837" [label = <(FIELD_IDENTIFIER,ClassLoader,ClassLoader)<SUB>502</SUB>> ]
+"840" [label = <(&lt;operator&gt;.fieldAccess,hs.NewHandle)<SUB>502</SUB>> ]
+"843" [label = <(&lt;operator&gt;.greaterThan,GetClassLoader&lt;kEnableIndexIds&gt;(soa))<SUB>502</SUB>> ]
+"853" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>503</SUB>> ]
+"855" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>503</SUB>> ]
+"859" [label = <(&lt;operator&gt;.fieldAccess,descriptor.c_str)<SUB>503</SUB>> ]
+"868" [label = <(&lt;operator&gt;.indirectFieldAccess,class_linker-&gt;FindSystemClass)<SUB>505</SUB>> ]
+"871" [label = <(Self,soa.Self())<SUB>505</SUB>> ]
+"875" [label = <(c_str,descriptor.c_str())<SUB>505</SUB>> ]
+"780" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>494</SUB>> ]
+"782" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>494</SUB>> ]
+"831" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>501</SUB>> ]
+"842" [label = <(FIELD_IDENTIFIER,NewHandle,NewHandle)<SUB>502</SUB>> ]
+"844" [label = <(&lt;operator&gt;.lessThan,GetClassLoader&lt;kEnableIndexIds)<SUB>502</SUB>> ]
+"857" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>503</SUB>> ]
+"861" [label = <(FIELD_IDENTIFIER,c_str,c_str)<SUB>503</SUB>> ]
+"870" [label = <(FIELD_IDENTIFIER,FindSystemClass,FindSystemClass)<SUB>505</SUB>> ]
+"872" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>505</SUB>> ]
+"876" [label = <(&lt;operator&gt;.fieldAccess,descriptor.c_str)<SUB>505</SUB>> ]
+"874" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>505</SUB>> ]
+"878" [label = <(FIELD_IDENTIFIER,c_str,c_str)<SUB>505</SUB>> ]
+"765" [label = <(METHOD,FindClass)<SUB>493</SUB>> ]
+"887" [label = <(METHOD_RETURN,jclass)<SUB>493</SUB>> ]
+  "769" -> "774" 
+  "769" -> "793" 
+  "788" -> "800" 
+  "795" -> "803" 
+  "802" -> "806" 
+  "806" -> "814" 
+  "808" -> "821" 
+  "879" -> "887" 
+  "790" -> "788" 
+  "797" -> "795" 
+  "803" -> "802" 
+  "809" -> "808" 
+  "818" -> "824" 
+  "818" -> "870" 
+  "880" -> "879" 
+  "791" -> "790" 
+  "798" -> "797" 
+  "810" -> "809" 
+  "819" -> "818" 
+  "823" -> "837" 
+  "832" -> "853" 
+  "848" -> "884" 
+  "881" -> "880" 
+  "773" -> "780" 
+  "773" -> "793" 
+  "793" -> "791" 
+  "800" -> "798" 
+  "812" -> "810" 
+  "821" -> "819" 
+  "824" -> "831" 
+  "827" -> "823" 
+  "833" -> "842" 
+  "838" -> "832" 
+  "850" -> "848" 
+  "865" -> "884" 
+  "882" -> "881" 
+  "774" -> "773" 
+  "778" -> "785" 
+  "785" -> "887" 
+  "814" -> "812" 
+  "828" -> "827" 
+  "835" -> "833" 
+  "839" -> "838" 
+  "851" -> "857" 
+  "854" -> "861" 
+  "858" -> "850" 
+  "867" -> "865" 
+  "884" -> "882" 
+  "779" -> "778" 
+  "829" -> "828" 
+  "837" -> "835" 
+  "840" -> "844" 
+  "843" -> "839" 
+  "853" -> "851" 
+  "855" -> "854" 
+  "859" -> "858" 
+  "868" -> "874" 
+  "871" -> "878" 
+  "875" -> "867" 
+  "780" -> "782" 
+  "782" -> "779" 
+  "831" -> "829" 
+  "842" -> "840" 
+  "844" -> "843" 
+  "857" -> "855" 
+  "861" -> "859" 
+  "870" -> "868" 
+  "872" -> "871" 
+  "876" -> "875" 
+  "874" -> "872" 
+  "878" -> "876" 
+  "765" -> "769" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/250-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/250-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/250-cfg.dot	2023-06-07 19:35:01.557387154 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/250-cfg.dot	2023-06-07 19:35:08.097386510 +0330
@@ -1,5 +1,21 @@
-digraph "MonitorExit" {  
-"13581" [label = <(METHOD,MonitorExit)<SUB>2598</SUB>> ]
-"13585" [label = <(METHOD_RETURN,jint)<SUB>2598</SUB>> ]
-  "13581" -> "13585" 
+digraph "GetDirectBufferCapacity" {  
+"13387" [label = <(RETURN,return static_cast&lt;jlong&gt;(env-&gt;GetIntField(\012        java_buffer, WellKnownClasses::java_nio_DirectByteBuffer_capacity));,return static_cast&lt;jlong&gt;(env-&gt;GetIntField(\012        java_buffer, WellKnownClasses::java_nio_DirectByteBuffer_capacity));)<SUB>2527</SUB>> ]
+"13388" [label = <(&lt;operator&gt;.cast,static_cast&lt;jlong&gt;(env-&gt;GetIntField(\012        java_buffer, WellKnownClasses::java_nio_DirectByteBuffer_capacity)))<SUB>2527</SUB>> ]
+"13389" [label = <(UNKNOWN,jlong,jlong)<SUB>2527</SUB>> ]
+"13390" [label = <(GetIntField,env-&gt;GetIntField(\012        java_buffer, WellKnownClasses::java_nio_DirectByteBuffer_capacity))<SUB>2527</SUB>> ]
+"13391" [label = <(&lt;operator&gt;.indirectFieldAccess,env-&gt;GetIntField)<SUB>2527</SUB>> ]
+"13395" [label = <(&lt;operator&gt;.fieldAccess,WellKnownClasses::java_nio_DirectByteBuffer_capacity)<SUB>2528</SUB>> ]
+"13393" [label = <(FIELD_IDENTIFIER,GetIntField,GetIntField)<SUB>2527</SUB>> ]
+"13397" [label = <(FIELD_IDENTIFIER,java_nio_DirectByteBuffer_capacity,java_nio_DirectByteBuffer_capacity)<SUB>2528</SUB>> ]
+"13383" [label = <(METHOD,GetDirectBufferCapacity)<SUB>2526</SUB>> ]
+"13398" [label = <(METHOD_RETURN,jlong)<SUB>2526</SUB>> ]
+  "13387" -> "13398" 
+  "13388" -> "13387" 
+  "13389" -> "13393" 
+  "13390" -> "13388" 
+  "13391" -> "13397" 
+  "13395" -> "13390" 
+  "13393" -> "13391" 
+  "13397" -> "13395" 
+  "13383" -> "13389" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/251-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/251-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/251-cfg.dot	2023-06-07 19:35:01.557387154 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/251-cfg.dot	2023-06-07 19:35:08.097386510 +0330
@@ -1,56 +1,5 @@
-digraph "GetJavaVM" {  
-"13593" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(vm, JNI_ERR))<SUB>2614</SUB>> ]
-"13613" [label = <(&lt;operator&gt;.assignment,* runtime = Runtime::Current())<SUB>2615</SUB>> ]
-"13637" [label = <(RETURN,return (*vm != nullptr) ? JNI_OK : JNI_ERR;,return (*vm != nullptr) ? JNI_OK : JNI_ERR;)<SUB>2621</SUB>> ]
-"13615" [label = <(Runtime::Current,Runtime::Current())<SUB>2615</SUB>> ]
-"13620" [label = <(&lt;operator&gt;.notEquals,runtime != nullptr)<SUB>2616</SUB>> ]
-"13638" [label = <(&lt;operator&gt;.conditional,(*vm != nullptr) ? JNI_OK : JNI_ERR)<SUB>2621</SUB>> ]
-"13616" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>2615</SUB>> ]
-"13624" [label = <(&lt;operator&gt;.assignment,*vm = runtime-&gt;GetJavaVM())<SUB>2617</SUB>> ]
-"13639" [label = <(&lt;operator&gt;.notEquals,*vm != nullptr)<SUB>2621</SUB>> ]
-"13598" [label = <(UNLIKELY,UNLIKELY((vm) == nullptr))<SUB>2614</SUB>> ]
-"13618" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>2615</SUB>> ]
-"13625" [label = <(&lt;operator&gt;.indirection,*vm)<SUB>2617</SUB>> ]
-"13627" [label = <(GetJavaVM,runtime-&gt;GetJavaVM())<SUB>2617</SUB>> ]
-"13633" [label = <(&lt;operator&gt;.assignment,*vm = nullptr)<SUB>2619</SUB>> ]
-"13640" [label = <(&lt;operator&gt;.indirection,*vm)<SUB>2621</SUB>> ]
-"13599" [label = <(&lt;operator&gt;.equals,(vm) == nullptr)<SUB>2614</SUB>> ]
-"13603" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN(vm, JNI_ERR),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;vm == null&quot;))<SUB>2614</SUB>> ]
-"13610" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(vm, JNI_ERR),CHECK_NON_NULL_ARGUMENT_RETURN(vm, JNI_ERR))<SUB>2614</SUB>> ]
-"13628" [label = <(&lt;operator&gt;.indirectFieldAccess,runtime-&gt;GetJavaVM)<SUB>2617</SUB>> ]
-"13634" [label = <(&lt;operator&gt;.indirection,*vm)<SUB>2619</SUB>> ]
-"13604" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2614</SUB>> ]
-"13630" [label = <(FIELD_IDENTIFIER,GetJavaVM,GetJavaVM)<SUB>2617</SUB>> ]
-"13605" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2614</SUB>> ]
-"13607" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2614</SUB>> ]
-"13589" [label = <(METHOD,GetJavaVM)<SUB>2613</SUB>> ]
-"13645" [label = <(METHOD_RETURN,jint)<SUB>2613</SUB>> ]
-  "13593" -> "13599" 
-  "13593" -> "13618" 
-  "13613" -> "13620" 
-  "13637" -> "13645" 
-  "13615" -> "13613" 
-  "13620" -> "13625" 
-  "13620" -> "13634" 
-  "13638" -> "13637" 
-  "13616" -> "13615" 
-  "13624" -> "13640" 
-  "13639" -> "13638" 
-  "13598" -> "13605" 
-  "13598" -> "13618" 
-  "13618" -> "13616" 
-  "13625" -> "13630" 
-  "13627" -> "13624" 
-  "13633" -> "13640" 
-  "13640" -> "13639" 
-  "13599" -> "13598" 
-  "13603" -> "13610" 
-  "13610" -> "13645" 
-  "13628" -> "13627" 
-  "13634" -> "13633" 
-  "13604" -> "13603" 
-  "13630" -> "13628" 
-  "13605" -> "13607" 
-  "13607" -> "13604" 
-  "13589" -> "13593" 
+digraph "EnsureLocalCapacityInternal" {  
+"13401" [label = <(METHOD,EnsureLocalCapacityInternal)<SUB>2555</SUB>> ]
+"13406" [label = <(METHOD_RETURN,jint)<SUB>2555</SUB>> ]
+  "13401" -> "13406" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/252-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/252-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/252-cfg.dot	2023-06-07 19:35:01.557387154 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/252-cfg.dot	2023-06-07 19:35:08.097386510 +0330
@@ -1,83 +1,50 @@
-digraph "NewDirectByteBuffer" {  
-"13687" [label = <(&lt;operator&gt;.assignment,address_arg = reinterpret_cast&lt;jlong&gt;(address))<SUB>2643</SUB>> ]
-"13693" [label = <(&lt;operator&gt;.assignment,capacity_arg = static_cast&lt;jint&gt;(capacity))<SUB>2644</SUB>> ]
-"13699" [label = <(&lt;operator&gt;.assignment,result = env-&gt;NewObject(WellKnownClasses::java_nio_DirectByteBuffer,\012 WellKnownClasses::java_nio_DirectByteBuffer_init,\012                                    address_arg, capacity_arg))<SUB>2646</SUB>> ]
-"13713" [label = <(RETURN,return static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_-&gt;IsExceptionPending() ? nullptr : result;,return static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_-&gt;IsExceptionPending() ? nullptr : result;)<SUB>2649</SUB>> ]
-"13653" [label = <(&lt;operator&gt;.lessThan,capacity &lt; 0)<SUB>2625</SUB>> ]
-"13663" [label = <(&lt;operator&gt;.logicalAnd,address == nullptr &amp;&amp; capacity != 0)<SUB>2630</SUB>> ]
-"13677" [label = <(&lt;operator&gt;.greaterThan,capacity &gt; INT_MAX)<SUB>2637</SUB>> ]
-"13689" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jlong&gt;(address))<SUB>2643</SUB>> ]
-"13695" [label = <(&lt;operator&gt;.cast,static_cast&lt;jint&gt;(capacity))<SUB>2644</SUB>> ]
-"13701" [label = <(NewObject,env-&gt;NewObject(WellKnownClasses::java_nio_DirectByteBuffer,\012 WellKnownClasses::java_nio_DirectByteBuffer_init,\012                                    address_arg, capacity_arg))<SUB>2646</SUB>> ]
-"13714" [label = <(&lt;operator&gt;.conditional,static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_-&gt;IsExceptionPending() ? nullptr : result)<SUB>2649</SUB>> ]
-"13658" [label = <(UNKNOWN,),))<SUB>2626</SUB>> ]
-"13659" [label = <(UNKNOWN,-&gt;JniAbortF(&quot;NewDirectByteBuffer&quot;, &quot;negative buffer capacity: %&quot; PRId64,\012                                       capacity);,-&gt;JniAbortF(&quot;NewDirectByteBuffer&quot;, &quot;negative buffer capacity: %&quot; PRId64,\012                                       capacity);)<SUB>2626</SUB>> ]
-"13660" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2628</SUB>> ]
-"13664" [label = <(&lt;operator&gt;.equals,address == nullptr)<SUB>2630</SUB>> ]
-"13667" [label = <(&lt;operator&gt;.notEquals,capacity != 0)<SUB>2630</SUB>> ]
-"13672" [label = <(UNKNOWN,),))<SUB>2631</SUB>> ]
-"13673" [label = <(UNKNOWN,-&gt;JniAbortF(&quot;NewDirectByteBuffer&quot;,\012 &quot;non-zero capacity for nullptr pointer: %&quot; PRId64, capacity);,-&gt;JniAbortF(&quot;NewDirectByteBuffer&quot;,\012 &quot;non-zero capacity for nullptr pointer: %&quot; PRId64, capacity);)<SUB>2631</SUB>> ]
-"13674" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2633</SUB>> ]
-"13682" [label = <(UNKNOWN,),))<SUB>2638</SUB>> ]
-"13683" [label = <(UNKNOWN,-&gt;JniAbortF(&quot;NewDirectByteBuffer&quot;,\012 &quot;buffer capacity greater than maximum jint: %&quot; PRId64,\012                                       capacity);,-&gt;JniAbortF(&quot;NewDirectByteBuffer&quot;,\012 &quot;buffer capacity greater than maximum jint: %&quot; PRId64,\012                                       capacity);)<SUB>2638</SUB>> ]
-"13684" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2641</SUB>> ]
-"13690" [label = <(UNKNOWN,jlong,jlong)<SUB>2643</SUB>> ]
-"13696" [label = <(UNKNOWN,jint,jint)<SUB>2644</SUB>> ]
-"13702" [label = <(&lt;operator&gt;.indirectFieldAccess,env-&gt;NewObject)<SUB>2646</SUB>> ]
-"13705" [label = <(&lt;operator&gt;.fieldAccess,WellKnownClasses::java_nio_DirectByteBuffer)<SUB>2646</SUB>> ]
-"13708" [label = <(&lt;operator&gt;.fieldAccess,WellKnownClasses::java_nio_DirectByteBuffer_init)<SUB>2647</SUB>> ]
-"13715" [label = <(IsExceptionPending,static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_-&gt;IsExceptionPending())<SUB>2649</SUB>> ]
-"13704" [label = <(FIELD_IDENTIFIER,NewObject,NewObject)<SUB>2646</SUB>> ]
-"13707" [label = <(FIELD_IDENTIFIER,java_nio_DirectByteBuffer,java_nio_DirectByteBuffer)<SUB>2646</SUB>> ]
-"13710" [label = <(FIELD_IDENTIFIER,java_nio_DirectByteBuffer_init,java_nio_DirectByteBuffer_init)<SUB>2647</SUB>> ]
-"13716" [label = <(&lt;operator&gt;.indirectFieldAccess,static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_-&gt;IsExceptionPending)<SUB>2649</SUB>> ]
-"13717" [label = <(&lt;operator&gt;.indirectFieldAccess,static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_)<SUB>2649</SUB>> ]
-"13722" [label = <(FIELD_IDENTIFIER,IsExceptionPending,IsExceptionPending)<SUB>2649</SUB>> ]
-"13718" [label = <(&lt;operator&gt;.cast,static_cast&lt;JNIEnvExt*&gt;(env))<SUB>2649</SUB>> ]
-"13721" [label = <(FIELD_IDENTIFIER,self_,self_)<SUB>2649</SUB>> ]
-"13719" [label = <(UNKNOWN,JNIEnvExt*,JNIEnvExt*)<SUB>2649</SUB>> ]
-"13647" [label = <(METHOD,NewDirectByteBuffer)<SUB>2624</SUB>> ]
-"13725" [label = <(METHOD_RETURN,jobject)<SUB>2624</SUB>> ]
-  "13687" -> "13696" 
-  "13693" -> "13704" 
-  "13699" -> "13719" 
-  "13713" -> "13725" 
-  "13653" -> "13658" 
-  "13653" -> "13664" 
-  "13663" -> "13672" 
-  "13663" -> "13677" 
-  "13677" -> "13682" 
-  "13677" -> "13690" 
-  "13689" -> "13687" 
-  "13695" -> "13693" 
-  "13701" -> "13699" 
-  "13714" -> "13713" 
-  "13658" -> "13659" 
-  "13659" -> "13660" 
-  "13660" -> "13725" 
-  "13664" -> "13663" 
-  "13664" -> "13667" 
-  "13667" -> "13663" 
-  "13672" -> "13673" 
-  "13673" -> "13674" 
-  "13674" -> "13725" 
-  "13682" -> "13683" 
-  "13683" -> "13684" 
-  "13684" -> "13725" 
-  "13690" -> "13689" 
-  "13696" -> "13695" 
-  "13702" -> "13707" 
-  "13705" -> "13710" 
-  "13708" -> "13701" 
-  "13715" -> "13714" 
-  "13704" -> "13702" 
-  "13707" -> "13705" 
-  "13710" -> "13708" 
-  "13716" -> "13715" 
-  "13717" -> "13722" 
-  "13722" -> "13716" 
-  "13718" -> "13721" 
-  "13721" -> "13717" 
-  "13719" -> "13718" 
-  "13647" -> "13653" 
+digraph "NewPrimitiveArray" {  
+"13419" [label = <(soa,soa(env))<SUB>2574</SUB>> ]
+"13440" [label = <(&lt;operator&gt;.assignment,result = ArtT::Alloc(soa.Self(), length))<SUB>2579</SUB>> ]
+"13451" [label = <(RETURN,return soa.AddLocalReference&lt;JniT&gt;(result);,return soa.AddLocalReference&lt;JniT&gt;(result);)<SUB>2580</SUB>> ]
+"13422" [label = <(UNLIKELY,UNLIKELY(length &lt; 0))<SUB>2575</SUB>> ]
+"13442" [label = <(ArtT::Alloc,ArtT::Alloc(soa.Self(), length))<SUB>2579</SUB>> ]
+"13452" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;JniT&gt;(result))<SUB>2580</SUB>> ]
+"13423" [label = <(&lt;operator&gt;.lessThan,length &lt; 0)<SUB>2575</SUB>> ]
+"13427" [label = <(JniAbortF,soa.Vm()-&gt;JniAbortF(&quot;NewPrimitiveArray&quot;, &quot;negative array length: %d&quot;, length))<SUB>2576</SUB>> ]
+"13437" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2577</SUB>> ]
+"13443" [label = <(&lt;operator&gt;.fieldAccess,ArtT::Alloc)<SUB>2579</SUB>> ]
+"13446" [label = <(Self,soa.Self())<SUB>2579</SUB>> ]
+"13453" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;JniT)<SUB>2580</SUB>> ]
+"13428" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Vm()-&gt;JniAbortF)<SUB>2576</SUB>> ]
+"13445" [label = <(FIELD_IDENTIFIER,Alloc,Alloc)<SUB>2579</SUB>> ]
+"13447" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>2579</SUB>> ]
+"13454" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>2580</SUB>> ]
+"13429" [label = <(Vm,soa.Vm())<SUB>2576</SUB>> ]
+"13433" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2576</SUB>> ]
+"13449" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>2579</SUB>> ]
+"13456" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>2580</SUB>> ]
+"13430" [label = <(&lt;operator&gt;.fieldAccess,soa.Vm)<SUB>2576</SUB>> ]
+"13432" [label = <(FIELD_IDENTIFIER,Vm,Vm)<SUB>2576</SUB>> ]
+"13414" [label = <(METHOD,NewPrimitiveArray)<SUB>2573</SUB>> ]
+"13459" [label = <(METHOD_RETURN,JniT)<SUB>2573</SUB>> ]
+  "13419" -> "13423" 
+  "13440" -> "13456" 
+  "13451" -> "13459" 
+  "13422" -> "13432" 
+  "13422" -> "13445" 
+  "13442" -> "13440" 
+  "13452" -> "13451" 
+  "13423" -> "13422" 
+  "13427" -> "13437" 
+  "13437" -> "13459" 
+  "13443" -> "13449" 
+  "13446" -> "13442" 
+  "13453" -> "13452" 
+  "13428" -> "13427" 
+  "13445" -> "13443" 
+  "13447" -> "13446" 
+  "13454" -> "13453" 
+  "13429" -> "13433" 
+  "13433" -> "13428" 
+  "13449" -> "13447" 
+  "13456" -> "13454" 
+  "13430" -> "13429" 
+  "13432" -> "13430" 
+  "13414" -> "13419" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/253-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/253-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/253-cfg.dot	2023-06-07 19:35:01.557387154 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/253-cfg.dot	2023-06-07 19:35:08.097386510 +0330
@@ -1,21 +1,5 @@
-digraph "GetDirectBufferAddress" {  
-"13731" [label = <(RETURN,return reinterpret_cast&lt;void*&gt;(env-&gt;GetLongField(\012        java_buffer, WellKnownClasses::java_nio_DirectByteBuffer_effectiveDirectAddress));,return reinterpret_cast&lt;void*&gt;(env-&gt;GetLongField(\012        java_buffer, WellKnownClasses::java_nio_DirectByteBuffer_effectiveDirectAddress));)<SUB>2653</SUB>> ]
-"13732" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;void*&gt;(env-&gt;GetLongField(\012        java_buffer, WellKnownClasses::java_nio_DirectByteBuffer_effectiveDirectAddress)))<SUB>2653</SUB>> ]
-"13733" [label = <(UNKNOWN,void*,void*)<SUB>2653</SUB>> ]
-"13734" [label = <(GetLongField,env-&gt;GetLongField(\012        java_buffer, WellKnownClasses::java_nio_DirectByteBuffer_effectiveDirectAddress))<SUB>2653</SUB>> ]
-"13735" [label = <(&lt;operator&gt;.indirectFieldAccess,env-&gt;GetLongField)<SUB>2653</SUB>> ]
-"13739" [label = <(&lt;operator&gt;.fieldAccess,WellKnownClasses::java_nio_DirectByteBuffer_effectiveDirectAddress)<SUB>2654</SUB>> ]
-"13737" [label = <(FIELD_IDENTIFIER,GetLongField,GetLongField)<SUB>2653</SUB>> ]
-"13741" [label = <(FIELD_IDENTIFIER,java_nio_DirectByteBuffer_effectiveDirectAddress,java_nio_DirectByteBuffer_effectiveDirectAddress)<SUB>2654</SUB>> ]
-"13727" [label = <(METHOD,GetDirectBufferAddress)<SUB>2652</SUB>> ]
-"13742" [label = <(METHOD_RETURN,void*)<SUB>2652</SUB>> ]
-  "13731" -> "13742" 
-  "13732" -> "13731" 
-  "13733" -> "13737" 
-  "13734" -> "13732" 
-  "13735" -> "13741" 
-  "13739" -> "13734" 
-  "13737" -> "13735" 
-  "13741" -> "13739" 
-  "13727" -> "13733" 
+digraph "DecodeAndCheckArrayType" {  
+"13461" [label = <(METHOD,DecodeAndCheckArrayType)<SUB>2584</SUB>> ]
+"13467" [label = <(METHOD_RETURN,ObjPtr&lt;ArtArrayT&gt;)<SUB>2584</SUB>> ]
+  "13461" -> "13467" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/254-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/254-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/254-cfg.dot	2023-06-07 19:35:01.557387154 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/254-cfg.dot	2023-06-07 19:35:08.097386510 +0330
@@ -1,21 +1,113 @@
-digraph "GetDirectBufferCapacity" {  
-"13748" [label = <(RETURN,return static_cast&lt;jlong&gt;(env-&gt;GetIntField(\012        java_buffer, WellKnownClasses::java_nio_DirectByteBuffer_capacity));,return static_cast&lt;jlong&gt;(env-&gt;GetIntField(\012        java_buffer, WellKnownClasses::java_nio_DirectByteBuffer_capacity));)<SUB>2658</SUB>> ]
-"13749" [label = <(&lt;operator&gt;.cast,static_cast&lt;jlong&gt;(env-&gt;GetIntField(\012        java_buffer, WellKnownClasses::java_nio_DirectByteBuffer_capacity)))<SUB>2658</SUB>> ]
-"13750" [label = <(UNKNOWN,jlong,jlong)<SUB>2658</SUB>> ]
-"13751" [label = <(GetIntField,env-&gt;GetIntField(\012        java_buffer, WellKnownClasses::java_nio_DirectByteBuffer_capacity))<SUB>2658</SUB>> ]
-"13752" [label = <(&lt;operator&gt;.indirectFieldAccess,env-&gt;GetIntField)<SUB>2658</SUB>> ]
-"13756" [label = <(&lt;operator&gt;.fieldAccess,WellKnownClasses::java_nio_DirectByteBuffer_capacity)<SUB>2659</SUB>> ]
-"13754" [label = <(FIELD_IDENTIFIER,GetIntField,GetIntField)<SUB>2658</SUB>> ]
-"13758" [label = <(FIELD_IDENTIFIER,java_nio_DirectByteBuffer_capacity,java_nio_DirectByteBuffer_capacity)<SUB>2659</SUB>> ]
-"13744" [label = <(METHOD,GetDirectBufferCapacity)<SUB>2657</SUB>> ]
-"13759" [label = <(METHOD_RETURN,jlong)<SUB>2657</SUB>> ]
-  "13748" -> "13759" 
-  "13749" -> "13748" 
-  "13750" -> "13754" 
-  "13751" -> "13749" 
-  "13752" -> "13758" 
-  "13756" -> "13751" 
-  "13754" -> "13752" 
-  "13758" -> "13756" 
-  "13744" -> "13750" 
+digraph "GetPrimitiveArray" {  
+"13484" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_array))<SUB>2606</SUB>> ]
+"13503" [label = <(soa,soa(env))<SUB>2607</SUB>> ]
+"13506" [label = <(&lt;operator&gt;.assignment,array = DecodeAndCheckArrayType&lt;ArrayT, ElementT, ArtArrayT&gt;(\012        soa, java_array, &quot;GetArrayElements&quot;, &quot;get&quot;))<SUB>2608</SUB>> ]
+"13508" [label = <(DecodeAndCheckArrayType&lt;ArrayT,ElementT,ArtArrayT&gt;,DecodeAndCheckArrayType&lt;ArrayT, ElementT, ArtArrayT&gt;(\012        soa, java_array, &quot;GetArrayElements&quot;, &quot;get&quot;))<SUB>2608</SUB>> ]
+"13514" [label = <(UNLIKELY,UNLIKELY(array == nullptr))<SUB>2610</SUB>> ]
+"13522" [label = <(IsMovableObject,Runtime::Current()-&gt;GetHeap()-&gt;IsMovableObject(array))<SUB>2614</SUB>> ]
+"13515" [label = <(&lt;operator&gt;.equals,array == nullptr)<SUB>2610</SUB>> ]
+"13519" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2611</SUB>> ]
+"13523" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetHeap()-&gt;IsMovableObject)<SUB>2614</SUB>> ]
+"13544" [label = <(&lt;operator&gt;.assignment,component_size = sizeof(ElementT))<SUB>2618</SUB>> ]
+"13549" [label = <(&lt;operator&gt;.assignment,size = array-&gt;GetLength() * component_size)<SUB>2619</SUB>> ]
+"13558" [label = <(&lt;operator&gt;.assignment,* data = new uint64_t[RoundUp(size, 8) / 8])<SUB>2620</SUB>> ]
+"13562" [label = <(memcpy,memcpy(data, array-&gt;GetData(), size))<SUB>2621</SUB>> ]
+"13569" [label = <(RETURN,return reinterpret_cast&lt;ElementT*&gt;(data);,return reinterpret_cast&lt;ElementT*&gt;(data);)<SUB>2622</SUB>> ]
+"13488" [label = <(UNLIKELY,UNLIKELY((java_array) == nullptr))<SUB>2606</SUB>> ]
+"13524" [label = <(GetHeap,Runtime::Current()-&gt;GetHeap())<SUB>2614</SUB>> ]
+"13531" [label = <(FIELD_IDENTIFIER,IsMovableObject,IsMovableObject)<SUB>2614</SUB>> ]
+"13535" [label = <(&lt;operator&gt;.notEquals,is_copy != nullptr)<SUB>2615</SUB>> ]
+"13546" [label = <(&lt;operator&gt;.sizeOf,sizeof(ElementT))<SUB>2618</SUB>> ]
+"13551" [label = <(&lt;operator&gt;.multiplication,array-&gt;GetLength() * component_size)<SUB>2619</SUB>> ]
+"13560" [label = <(&lt;operator&gt;.new,new uint64_t[RoundUp(size, 8) / 8])<SUB>2620</SUB>> ]
+"13564" [label = <(GetData,array-&gt;GetData())<SUB>2621</SUB>> ]
+"13570" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;ElementT*&gt;(data))<SUB>2622</SUB>> ]
+"13584" [label = <(RETURN,return reinterpret_cast&lt;ElementT*&gt;(array-&gt;GetData());,return reinterpret_cast&lt;ElementT*&gt;(array-&gt;GetData());)<SUB>2627</SUB>> ]
+"13489" [label = <(&lt;operator&gt;.equals,(java_array) == nullptr)<SUB>2606</SUB>> ]
+"13493" [label = <(CHECK_NON_NULL_ARGUMENT(java_array),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_array == null&quot;))<SUB>2606</SUB>> ]
+"13500" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_array),CHECK_NON_NULL_ARGUMENT(java_array))<SUB>2606</SUB>> ]
+"13525" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetHeap)<SUB>2614</SUB>> ]
+"13539" [label = <(&lt;operator&gt;.assignment,*is_copy = JNI_TRUE)<SUB>2616</SUB>> ]
+"13552" [label = <(GetLength,array-&gt;GetLength())<SUB>2619</SUB>> ]
+"13565" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetData)<SUB>2621</SUB>> ]
+"13571" [label = <(UNKNOWN,ElementT*,ElementT*)<SUB>2622</SUB>> ]
+"13576" [label = <(&lt;operator&gt;.notEquals,is_copy != nullptr)<SUB>2624</SUB>> ]
+"13585" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;ElementT*&gt;(array-&gt;GetData()))<SUB>2627</SUB>> ]
+"13494" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2606</SUB>> ]
+"13526" [label = <(Runtime::Current,Runtime::Current())<SUB>2614</SUB>> ]
+"13530" [label = <(FIELD_IDENTIFIER,GetHeap,GetHeap)<SUB>2614</SUB>> ]
+"13540" [label = <(&lt;operator&gt;.indirection,*is_copy)<SUB>2616</SUB>> ]
+"13553" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetLength)<SUB>2619</SUB>> ]
+"13567" [label = <(FIELD_IDENTIFIER,GetData,GetData)<SUB>2621</SUB>> ]
+"13580" [label = <(&lt;operator&gt;.assignment,*is_copy = JNI_FALSE)<SUB>2625</SUB>> ]
+"13586" [label = <(UNKNOWN,ElementT*,ElementT*)<SUB>2627</SUB>> ]
+"13587" [label = <(GetData,array-&gt;GetData())<SUB>2627</SUB>> ]
+"13495" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2606</SUB>> ]
+"13497" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2606</SUB>> ]
+"13527" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>2614</SUB>> ]
+"13555" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>2619</SUB>> ]
+"13581" [label = <(&lt;operator&gt;.indirection,*is_copy)<SUB>2625</SUB>> ]
+"13588" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetData)<SUB>2627</SUB>> ]
+"13529" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>2614</SUB>> ]
+"13590" [label = <(FIELD_IDENTIFIER,GetData,GetData)<SUB>2627</SUB>> ]
+"13479" [label = <(METHOD,GetPrimitiveArray)<SUB>2605</SUB>> ]
+"13591" [label = <(METHOD_RETURN,ElementT)<SUB>2605</SUB>> ]
+  "13484" -> "13489" 
+  "13484" -> "13503" 
+  "13503" -> "13508" 
+  "13506" -> "13515" 
+  "13508" -> "13506" 
+  "13514" -> "13519" 
+  "13514" -> "13529" 
+  "13522" -> "13535" 
+  "13522" -> "13576" 
+  "13515" -> "13514" 
+  "13519" -> "13591" 
+  "13523" -> "13522" 
+  "13544" -> "13555" 
+  "13549" -> "13560" 
+  "13558" -> "13567" 
+  "13562" -> "13571" 
+  "13569" -> "13591" 
+  "13488" -> "13495" 
+  "13488" -> "13503" 
+  "13524" -> "13531" 
+  "13531" -> "13523" 
+  "13535" -> "13540" 
+  "13535" -> "13546" 
+  "13546" -> "13544" 
+  "13551" -> "13549" 
+  "13560" -> "13558" 
+  "13564" -> "13562" 
+  "13570" -> "13569" 
+  "13584" -> "13591" 
+  "13489" -> "13488" 
+  "13493" -> "13500" 
+  "13500" -> "13591" 
+  "13525" -> "13524" 
+  "13539" -> "13546" 
+  "13552" -> "13551" 
+  "13565" -> "13564" 
+  "13571" -> "13570" 
+  "13576" -> "13586" 
+  "13576" -> "13581" 
+  "13585" -> "13584" 
+  "13494" -> "13493" 
+  "13526" -> "13530" 
+  "13530" -> "13525" 
+  "13540" -> "13539" 
+  "13553" -> "13552" 
+  "13567" -> "13565" 
+  "13580" -> "13586" 
+  "13586" -> "13590" 
+  "13587" -> "13585" 
+  "13495" -> "13497" 
+  "13497" -> "13494" 
+  "13527" -> "13526" 
+  "13555" -> "13553" 
+  "13581" -> "13580" 
+  "13588" -> "13587" 
+  "13529" -> "13527" 
+  "13590" -> "13588" 
+  "13479" -> "13484" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/255-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/255-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/255-cfg.dot	2023-06-07 19:35:01.557387154 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/255-cfg.dot	2023-06-07 19:35:08.097386510 +0330
@@ -1,5 +1,38 @@
-digraph "EnsureLocalCapacityInternal" {  
-"13762" [label = <(METHOD,EnsureLocalCapacityInternal)<SUB>2686</SUB>> ]
-"13767" [label = <(METHOD_RETURN,jint)<SUB>2686</SUB>> ]
-  "13762" -> "13767" 
+digraph "ReleasePrimitiveArray" {  
+"13599" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>2633</SUB>> ]
+"13617" [label = <(soa,soa(env))<SUB>2634</SUB>> ]
+"13620" [label = <(&lt;operator&gt;.assignment,array = DecodeAndCheckArrayType&lt;ArrayT, ElementT, ArtArrayT&gt;(\012        soa, java_array, &quot;ReleaseArrayElements&quot;, &quot;release&quot;))<SUB>2635</SUB>> ]
+"13633" [label = <(ReleasePrimitiveArray,ReleasePrimitiveArray(soa, array, sizeof(ElementT), elements, mode))<SUB>2640</SUB>> ]
+"13622" [label = <(DecodeAndCheckArrayType&lt;ArrayT,ElementT,ArtArrayT&gt;,DecodeAndCheckArrayType&lt;ArrayT, ElementT, ArtArrayT&gt;(\012        soa, java_array, &quot;ReleaseArrayElements&quot;, &quot;release&quot;))<SUB>2635</SUB>> ]
+"13628" [label = <(&lt;operator&gt;.equals,array == nullptr)<SUB>2637</SUB>> ]
+"13636" [label = <(&lt;operator&gt;.sizeOf,sizeof(ElementT))<SUB>2640</SUB>> ]
+"13632" [label = <(RETURN,return;,return;)<SUB>2638</SUB>> ]
+"13603" [label = <(UNLIKELY,UNLIKELY((java_array) == nullptr))<SUB>2633</SUB>> ]
+"13604" [label = <(&lt;operator&gt;.equals,(java_array) == nullptr)<SUB>2633</SUB>> ]
+"13608" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_array == null&quot;))<SUB>2633</SUB>> ]
+"13615" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>2633</SUB>> ]
+"13609" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2633</SUB>> ]
+"13610" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2633</SUB>> ]
+"13612" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2633</SUB>> ]
+"13593" [label = <(METHOD,ReleasePrimitiveArray)<SUB>2632</SUB>> ]
+"13640" [label = <(METHOD_RETURN,void)<SUB>2632</SUB>> ]
+  "13599" -> "13604" 
+  "13599" -> "13617" 
+  "13617" -> "13622" 
+  "13620" -> "13628" 
+  "13633" -> "13640" 
+  "13622" -> "13620" 
+  "13628" -> "13632" 
+  "13628" -> "13636" 
+  "13636" -> "13633" 
+  "13632" -> "13640" 
+  "13603" -> "13610" 
+  "13603" -> "13617" 
+  "13604" -> "13603" 
+  "13608" -> "13615" 
+  "13615" -> "13640" 
+  "13609" -> "13608" 
+  "13610" -> "13612" 
+  "13612" -> "13609" 
+  "13593" -> "13599" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/256-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/256-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/256-cfg.dot	2023-06-07 19:35:01.557387154 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/256-cfg.dot	2023-06-07 19:35:08.097386510 +0330
@@ -1,50 +1,5 @@
-digraph "NewPrimitiveArray" {  
-"13780" [label = <(soa,soa(env))<SUB>2705</SUB>> ]
-"13801" [label = <(&lt;operator&gt;.assignment,result = ArtT::Alloc(soa.Self(), length))<SUB>2710</SUB>> ]
-"13812" [label = <(RETURN,return soa.AddLocalReference&lt;JniT&gt;(result);,return soa.AddLocalReference&lt;JniT&gt;(result);)<SUB>2711</SUB>> ]
-"13783" [label = <(UNLIKELY,UNLIKELY(length &lt; 0))<SUB>2706</SUB>> ]
-"13803" [label = <(ArtT::Alloc,ArtT::Alloc(soa.Self(), length))<SUB>2710</SUB>> ]
-"13813" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;JniT&gt;(result))<SUB>2711</SUB>> ]
-"13784" [label = <(&lt;operator&gt;.lessThan,length &lt; 0)<SUB>2706</SUB>> ]
-"13788" [label = <(JniAbortF,soa.Vm()-&gt;JniAbortF(&quot;NewPrimitiveArray&quot;, &quot;negative array length: %d&quot;, length))<SUB>2707</SUB>> ]
-"13798" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2708</SUB>> ]
-"13804" [label = <(&lt;operator&gt;.fieldAccess,ArtT::Alloc)<SUB>2710</SUB>> ]
-"13807" [label = <(Self,soa.Self())<SUB>2710</SUB>> ]
-"13814" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;JniT)<SUB>2711</SUB>> ]
-"13789" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Vm()-&gt;JniAbortF)<SUB>2707</SUB>> ]
-"13806" [label = <(FIELD_IDENTIFIER,Alloc,Alloc)<SUB>2710</SUB>> ]
-"13808" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>2710</SUB>> ]
-"13815" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>2711</SUB>> ]
-"13790" [label = <(Vm,soa.Vm())<SUB>2707</SUB>> ]
-"13794" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2707</SUB>> ]
-"13810" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>2710</SUB>> ]
-"13817" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>2711</SUB>> ]
-"13791" [label = <(&lt;operator&gt;.fieldAccess,soa.Vm)<SUB>2707</SUB>> ]
-"13793" [label = <(FIELD_IDENTIFIER,Vm,Vm)<SUB>2707</SUB>> ]
-"13775" [label = <(METHOD,NewPrimitiveArray)<SUB>2704</SUB>> ]
-"13820" [label = <(METHOD_RETURN,JniT)<SUB>2704</SUB>> ]
-  "13780" -> "13784" 
-  "13801" -> "13817" 
-  "13812" -> "13820" 
-  "13783" -> "13793" 
-  "13783" -> "13806" 
-  "13803" -> "13801" 
-  "13813" -> "13812" 
-  "13784" -> "13783" 
-  "13788" -> "13798" 
-  "13798" -> "13820" 
-  "13804" -> "13810" 
-  "13807" -> "13803" 
-  "13814" -> "13813" 
-  "13789" -> "13788" 
-  "13806" -> "13804" 
-  "13808" -> "13807" 
-  "13815" -> "13814" 
-  "13790" -> "13794" 
-  "13794" -> "13789" 
-  "13810" -> "13808" 
-  "13817" -> "13815" 
-  "13791" -> "13790" 
-  "13793" -> "13791" 
-  "13775" -> "13780" 
+digraph "ReleasePrimitiveArray" {  
+"13642" [label = <(METHOD,ReleasePrimitiveArray)<SUB>2643</SUB>> ]
+"13649" [label = <(METHOD_RETURN,void)<SUB>2643</SUB>> ]
+  "13642" -> "13649" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/257-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/257-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/257-cfg.dot	2023-06-07 19:35:01.557387154 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/257-cfg.dot	2023-06-07 19:35:08.097386510 +0330
@@ -1,5 +1,94 @@
-digraph "DecodeAndCheckArrayType" {  
-"13822" [label = <(METHOD,DecodeAndCheckArrayType)<SUB>2715</SUB>> ]
-"13828" [label = <(METHOD_RETURN,ObjPtr&lt;ArtArrayT&gt;)<SUB>2715</SUB>> ]
-  "13822" -> "13828" 
+digraph "GetPrimitiveArrayRegion" {  
+"13688" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>2688</SUB>> ]
+"13706" [label = <(soa,soa(env))<SUB>2689</SUB>> ]
+"13709" [label = <(&lt;operator&gt;.assignment,array = DecodeAndCheckArrayType&lt;JArrayT, ElementT, ArtArrayT&gt;(\012        soa, java_array, &quot;GetPrimitiveArrayRegion&quot;, &quot;get region of&quot;))<SUB>2690</SUB>> ]
+"13711" [label = <(DecodeAndCheckArrayType&lt;JArrayT,ElementT,ArtArrayT&gt;,DecodeAndCheckArrayType&lt;JArrayT, ElementT, ArtArrayT&gt;(\012        soa, java_array, &quot;GetPrimitiveArrayRegion&quot;, &quot;get region of&quot;))<SUB>2690</SUB>> ]
+"13717" [label = <(&lt;operator&gt;.notEquals,array != nullptr)<SUB>2692</SUB>> ]
+"13692" [label = <(UNLIKELY,UNLIKELY((java_array) == nullptr))<SUB>2688</SUB>> ]
+"13722" [label = <(&lt;operator&gt;.logicalOr,start &lt; 0 || length &lt; 0 || length &gt; array-&gt;GetLength() - start)<SUB>2693</SUB>> ]
+"13693" [label = <(&lt;operator&gt;.equals,(java_array) == nullptr)<SUB>2688</SUB>> ]
+"13697" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_array == null&quot;))<SUB>2688</SUB>> ]
+"13704" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>2688</SUB>> ]
+"13723" [label = <(&lt;operator&gt;.logicalOr,start &lt; 0 || length &lt; 0)<SUB>2693</SUB>> ]
+"13730" [label = <(&lt;operator&gt;.greaterThan,length &gt; array-&gt;GetLength() - start)<SUB>2693</SUB>> ]
+"13739" [label = <(ThrowAIOOBE,ThrowAIOOBE(soa, array, start, length, &quot;src&quot;))<SUB>2694</SUB>> ]
+"13698" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2688</SUB>> ]
+"13724" [label = <(&lt;operator&gt;.lessThan,start &lt; 0)<SUB>2693</SUB>> ]
+"13727" [label = <(&lt;operator&gt;.lessThan,length &lt; 0)<SUB>2693</SUB>> ]
+"13732" [label = <(&lt;operator&gt;.subtraction,array-&gt;GetLength() - start)<SUB>2693</SUB>> ]
+"13747" [label = <(CHECK_NON_NULL_MEMCPY_ARGUMENT,CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf))<SUB>2696</SUB>> ]
+"13770" [label = <(&lt;operator&gt;.assignment,* data = array-&gt;GetData())<SUB>2697</SUB>> ]
+"13776" [label = <(memcpy,memcpy(buf, data + start, length * sizeof(ElementT)))<SUB>2698</SUB>> ]
+"13699" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2688</SUB>> ]
+"13701" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2688</SUB>> ]
+"13733" [label = <(GetLength,array-&gt;GetLength())<SUB>2693</SUB>> ]
+"13772" [label = <(GetData,array-&gt;GetData())<SUB>2697</SUB>> ]
+"13778" [label = <(&lt;operator&gt;.addition,data + start)<SUB>2698</SUB>> ]
+"13781" [label = <(&lt;operator&gt;.multiplication,length * sizeof(ElementT))<SUB>2698</SUB>> ]
+"13734" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetLength)<SUB>2693</SUB>> ]
+"13773" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetData)<SUB>2697</SUB>> ]
+"13783" [label = <(&lt;operator&gt;.sizeOf,sizeof(ElementT))<SUB>2698</SUB>> ]
+"13736" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>2693</SUB>> ]
+"13752" [label = <(UNLIKELY,UNLIKELY((length) != 0 &amp;&amp; (buf) == nullptr))<SUB>2696</SUB>> ]
+"13775" [label = <(FIELD_IDENTIFIER,GetData,GetData)<SUB>2697</SUB>> ]
+"13753" [label = <(&lt;operator&gt;.logicalAnd,(length) != 0 &amp;&amp; (buf) == nullptr)<SUB>2696</SUB>> ]
+"13761" [label = <(CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;buf == null&quot;))<SUB>2696</SUB>> ]
+"13768" [label = <(RETURN,CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf),CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf))<SUB>2696</SUB>> ]
+"13754" [label = <(&lt;operator&gt;.notEquals,(length) != 0)<SUB>2696</SUB>> ]
+"13757" [label = <(&lt;operator&gt;.equals,(buf) == nullptr)<SUB>2696</SUB>> ]
+"13762" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2696</SUB>> ]
+"13763" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2696</SUB>> ]
+"13765" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2696</SUB>> ]
+"13681" [label = <(METHOD,GetPrimitiveArrayRegion)<SUB>2686</SUB>> ]
+"13785" [label = <(METHOD_RETURN,void)<SUB>2686</SUB>> ]
+  "13688" -> "13693" 
+  "13688" -> "13706" 
+  "13706" -> "13711" 
+  "13709" -> "13717" 
+  "13711" -> "13709" 
+  "13717" -> "13785" 
+  "13717" -> "13724" 
+  "13692" -> "13699" 
+  "13692" -> "13706" 
+  "13722" -> "13739" 
+  "13722" -> "13747" 
+  "13693" -> "13692" 
+  "13697" -> "13704" 
+  "13704" -> "13785" 
+  "13723" -> "13722" 
+  "13723" -> "13736" 
+  "13730" -> "13722" 
+  "13739" -> "13785" 
+  "13698" -> "13697" 
+  "13724" -> "13723" 
+  "13724" -> "13727" 
+  "13727" -> "13723" 
+  "13732" -> "13730" 
+  "13747" -> "13754" 
+  "13747" -> "13775" 
+  "13770" -> "13778" 
+  "13776" -> "13785" 
+  "13699" -> "13701" 
+  "13701" -> "13698" 
+  "13733" -> "13732" 
+  "13772" -> "13770" 
+  "13778" -> "13783" 
+  "13781" -> "13776" 
+  "13734" -> "13733" 
+  "13773" -> "13772" 
+  "13783" -> "13781" 
+  "13736" -> "13734" 
+  "13752" -> "13763" 
+  "13752" -> "13775" 
+  "13775" -> "13773" 
+  "13753" -> "13752" 
+  "13761" -> "13768" 
+  "13768" -> "13785" 
+  "13754" -> "13753" 
+  "13754" -> "13757" 
+  "13757" -> "13753" 
+  "13762" -> "13761" 
+  "13763" -> "13765" 
+  "13765" -> "13762" 
+  "13681" -> "13688" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/258-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/258-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/258-cfg.dot	2023-06-07 19:35:01.567387156 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/258-cfg.dot	2023-06-07 19:35:08.097386510 +0330
@@ -1,113 +1,94 @@
-digraph "GetPrimitiveArray" {  
-"13845" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_array))<SUB>2737</SUB>> ]
-"13864" [label = <(soa,soa(env))<SUB>2738</SUB>> ]
-"13867" [label = <(&lt;operator&gt;.assignment,array = DecodeAndCheckArrayType&lt;ArrayT, ElementT, ArtArrayT&gt;(\012        soa, java_array, &quot;GetArrayElements&quot;, &quot;get&quot;))<SUB>2739</SUB>> ]
-"13869" [label = <(DecodeAndCheckArrayType&lt;ArrayT,ElementT,ArtArrayT&gt;,DecodeAndCheckArrayType&lt;ArrayT, ElementT, ArtArrayT&gt;(\012        soa, java_array, &quot;GetArrayElements&quot;, &quot;get&quot;))<SUB>2739</SUB>> ]
-"13875" [label = <(UNLIKELY,UNLIKELY(array == nullptr))<SUB>2741</SUB>> ]
-"13883" [label = <(IsMovableObject,Runtime::Current()-&gt;GetHeap()-&gt;IsMovableObject(array))<SUB>2745</SUB>> ]
-"13876" [label = <(&lt;operator&gt;.equals,array == nullptr)<SUB>2741</SUB>> ]
-"13880" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2742</SUB>> ]
-"13884" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetHeap()-&gt;IsMovableObject)<SUB>2745</SUB>> ]
-"13905" [label = <(&lt;operator&gt;.assignment,component_size = sizeof(ElementT))<SUB>2749</SUB>> ]
-"13910" [label = <(&lt;operator&gt;.assignment,size = array-&gt;GetLength() * component_size)<SUB>2750</SUB>> ]
-"13919" [label = <(&lt;operator&gt;.assignment,* data = new uint64_t[RoundUp(size, 8) / 8])<SUB>2751</SUB>> ]
-"13923" [label = <(memcpy,memcpy(data, array-&gt;GetData(), size))<SUB>2752</SUB>> ]
-"13930" [label = <(RETURN,return reinterpret_cast&lt;ElementT*&gt;(data);,return reinterpret_cast&lt;ElementT*&gt;(data);)<SUB>2753</SUB>> ]
-"13849" [label = <(UNLIKELY,UNLIKELY((java_array) == nullptr))<SUB>2737</SUB>> ]
-"13885" [label = <(GetHeap,Runtime::Current()-&gt;GetHeap())<SUB>2745</SUB>> ]
-"13892" [label = <(FIELD_IDENTIFIER,IsMovableObject,IsMovableObject)<SUB>2745</SUB>> ]
-"13896" [label = <(&lt;operator&gt;.notEquals,is_copy != nullptr)<SUB>2746</SUB>> ]
-"13907" [label = <(&lt;operator&gt;.sizeOf,sizeof(ElementT))<SUB>2749</SUB>> ]
-"13912" [label = <(&lt;operator&gt;.multiplication,array-&gt;GetLength() * component_size)<SUB>2750</SUB>> ]
-"13921" [label = <(&lt;operator&gt;.new,new uint64_t[RoundUp(size, 8) / 8])<SUB>2751</SUB>> ]
-"13925" [label = <(GetData,array-&gt;GetData())<SUB>2752</SUB>> ]
-"13931" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;ElementT*&gt;(data))<SUB>2753</SUB>> ]
-"13945" [label = <(RETURN,return reinterpret_cast&lt;ElementT*&gt;(array-&gt;GetData());,return reinterpret_cast&lt;ElementT*&gt;(array-&gt;GetData());)<SUB>2758</SUB>> ]
-"13850" [label = <(&lt;operator&gt;.equals,(java_array) == nullptr)<SUB>2737</SUB>> ]
-"13854" [label = <(CHECK_NON_NULL_ARGUMENT(java_array),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_array == null&quot;))<SUB>2737</SUB>> ]
-"13861" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_array),CHECK_NON_NULL_ARGUMENT(java_array))<SUB>2737</SUB>> ]
-"13886" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetHeap)<SUB>2745</SUB>> ]
-"13900" [label = <(&lt;operator&gt;.assignment,*is_copy = JNI_TRUE)<SUB>2747</SUB>> ]
-"13913" [label = <(GetLength,array-&gt;GetLength())<SUB>2750</SUB>> ]
-"13926" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetData)<SUB>2752</SUB>> ]
-"13932" [label = <(UNKNOWN,ElementT*,ElementT*)<SUB>2753</SUB>> ]
-"13937" [label = <(&lt;operator&gt;.notEquals,is_copy != nullptr)<SUB>2755</SUB>> ]
-"13946" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;ElementT*&gt;(array-&gt;GetData()))<SUB>2758</SUB>> ]
-"13855" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2737</SUB>> ]
-"13887" [label = <(Runtime::Current,Runtime::Current())<SUB>2745</SUB>> ]
-"13891" [label = <(FIELD_IDENTIFIER,GetHeap,GetHeap)<SUB>2745</SUB>> ]
-"13901" [label = <(&lt;operator&gt;.indirection,*is_copy)<SUB>2747</SUB>> ]
-"13914" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetLength)<SUB>2750</SUB>> ]
-"13928" [label = <(FIELD_IDENTIFIER,GetData,GetData)<SUB>2752</SUB>> ]
-"13941" [label = <(&lt;operator&gt;.assignment,*is_copy = JNI_FALSE)<SUB>2756</SUB>> ]
-"13947" [label = <(UNKNOWN,ElementT*,ElementT*)<SUB>2758</SUB>> ]
-"13948" [label = <(GetData,array-&gt;GetData())<SUB>2758</SUB>> ]
-"13856" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2737</SUB>> ]
-"13858" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2737</SUB>> ]
-"13888" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>2745</SUB>> ]
-"13916" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>2750</SUB>> ]
-"13942" [label = <(&lt;operator&gt;.indirection,*is_copy)<SUB>2756</SUB>> ]
-"13949" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetData)<SUB>2758</SUB>> ]
-"13890" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>2745</SUB>> ]
-"13951" [label = <(FIELD_IDENTIFIER,GetData,GetData)<SUB>2758</SUB>> ]
-"13840" [label = <(METHOD,GetPrimitiveArray)<SUB>2736</SUB>> ]
-"13952" [label = <(METHOD_RETURN,ElementT)<SUB>2736</SUB>> ]
-  "13845" -> "13850" 
-  "13845" -> "13864" 
-  "13864" -> "13869" 
-  "13867" -> "13876" 
-  "13869" -> "13867" 
-  "13875" -> "13880" 
-  "13875" -> "13890" 
-  "13883" -> "13896" 
-  "13883" -> "13937" 
-  "13876" -> "13875" 
-  "13880" -> "13952" 
-  "13884" -> "13883" 
-  "13905" -> "13916" 
-  "13910" -> "13921" 
-  "13919" -> "13928" 
-  "13923" -> "13932" 
-  "13930" -> "13952" 
-  "13849" -> "13856" 
-  "13849" -> "13864" 
-  "13885" -> "13892" 
-  "13892" -> "13884" 
-  "13896" -> "13901" 
-  "13896" -> "13907" 
-  "13907" -> "13905" 
-  "13912" -> "13910" 
-  "13921" -> "13919" 
-  "13925" -> "13923" 
-  "13931" -> "13930" 
-  "13945" -> "13952" 
-  "13850" -> "13849" 
-  "13854" -> "13861" 
-  "13861" -> "13952" 
-  "13886" -> "13885" 
-  "13900" -> "13907" 
-  "13913" -> "13912" 
-  "13926" -> "13925" 
-  "13932" -> "13931" 
-  "13937" -> "13947" 
-  "13937" -> "13942" 
-  "13946" -> "13945" 
-  "13855" -> "13854" 
-  "13887" -> "13891" 
-  "13891" -> "13886" 
-  "13901" -> "13900" 
-  "13914" -> "13913" 
-  "13928" -> "13926" 
-  "13941" -> "13947" 
-  "13947" -> "13951" 
-  "13948" -> "13946" 
-  "13856" -> "13858" 
-  "13858" -> "13855" 
-  "13888" -> "13887" 
-  "13916" -> "13914" 
-  "13942" -> "13941" 
-  "13949" -> "13948" 
-  "13890" -> "13888" 
-  "13951" -> "13949" 
-  "13840" -> "13845" 
+digraph "SetPrimitiveArrayRegion" {  
+"13794" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>2706</SUB>> ]
+"13812" [label = <(soa,soa(env))<SUB>2707</SUB>> ]
+"13815" [label = <(&lt;operator&gt;.assignment,array = DecodeAndCheckArrayType&lt;JArrayT, ElementT, ArtArrayT&gt;(\012        soa, java_array, &quot;SetPrimitiveArrayRegion&quot;, &quot;set region of&quot;))<SUB>2708</SUB>> ]
+"13817" [label = <(DecodeAndCheckArrayType&lt;JArrayT,ElementT,ArtArrayT&gt;,DecodeAndCheckArrayType&lt;JArrayT, ElementT, ArtArrayT&gt;(\012        soa, java_array, &quot;SetPrimitiveArrayRegion&quot;, &quot;set region of&quot;))<SUB>2708</SUB>> ]
+"13823" [label = <(&lt;operator&gt;.notEquals,array != nullptr)<SUB>2710</SUB>> ]
+"13798" [label = <(UNLIKELY,UNLIKELY((java_array) == nullptr))<SUB>2706</SUB>> ]
+"13828" [label = <(&lt;operator&gt;.logicalOr,start &lt; 0 || length &lt; 0 || length &gt; array-&gt;GetLength() - start)<SUB>2711</SUB>> ]
+"13799" [label = <(&lt;operator&gt;.equals,(java_array) == nullptr)<SUB>2706</SUB>> ]
+"13803" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_array == null&quot;))<SUB>2706</SUB>> ]
+"13810" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>2706</SUB>> ]
+"13829" [label = <(&lt;operator&gt;.logicalOr,start &lt; 0 || length &lt; 0)<SUB>2711</SUB>> ]
+"13836" [label = <(&lt;operator&gt;.greaterThan,length &gt; array-&gt;GetLength() - start)<SUB>2711</SUB>> ]
+"13845" [label = <(ThrowAIOOBE,ThrowAIOOBE(soa, array, start, length, &quot;dst&quot;))<SUB>2712</SUB>> ]
+"13804" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2706</SUB>> ]
+"13830" [label = <(&lt;operator&gt;.lessThan,start &lt; 0)<SUB>2711</SUB>> ]
+"13833" [label = <(&lt;operator&gt;.lessThan,length &lt; 0)<SUB>2711</SUB>> ]
+"13838" [label = <(&lt;operator&gt;.subtraction,array-&gt;GetLength() - start)<SUB>2711</SUB>> ]
+"13853" [label = <(CHECK_NON_NULL_MEMCPY_ARGUMENT,CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf))<SUB>2714</SUB>> ]
+"13876" [label = <(&lt;operator&gt;.assignment,* data = array-&gt;GetData())<SUB>2715</SUB>> ]
+"13882" [label = <(memcpy,memcpy(data + start, buf, length * sizeof(ElementT)))<SUB>2716</SUB>> ]
+"13805" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2706</SUB>> ]
+"13807" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2706</SUB>> ]
+"13839" [label = <(GetLength,array-&gt;GetLength())<SUB>2711</SUB>> ]
+"13878" [label = <(GetData,array-&gt;GetData())<SUB>2715</SUB>> ]
+"13883" [label = <(&lt;operator&gt;.addition,data + start)<SUB>2716</SUB>> ]
+"13887" [label = <(&lt;operator&gt;.multiplication,length * sizeof(ElementT))<SUB>2716</SUB>> ]
+"13840" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetLength)<SUB>2711</SUB>> ]
+"13879" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetData)<SUB>2715</SUB>> ]
+"13889" [label = <(&lt;operator&gt;.sizeOf,sizeof(ElementT))<SUB>2716</SUB>> ]
+"13842" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>2711</SUB>> ]
+"13858" [label = <(UNLIKELY,UNLIKELY((length) != 0 &amp;&amp; (buf) == nullptr))<SUB>2714</SUB>> ]
+"13881" [label = <(FIELD_IDENTIFIER,GetData,GetData)<SUB>2715</SUB>> ]
+"13859" [label = <(&lt;operator&gt;.logicalAnd,(length) != 0 &amp;&amp; (buf) == nullptr)<SUB>2714</SUB>> ]
+"13867" [label = <(CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;buf == null&quot;))<SUB>2714</SUB>> ]
+"13874" [label = <(RETURN,CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf),CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf))<SUB>2714</SUB>> ]
+"13860" [label = <(&lt;operator&gt;.notEquals,(length) != 0)<SUB>2714</SUB>> ]
+"13863" [label = <(&lt;operator&gt;.equals,(buf) == nullptr)<SUB>2714</SUB>> ]
+"13868" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2714</SUB>> ]
+"13869" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2714</SUB>> ]
+"13871" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2714</SUB>> ]
+"13787" [label = <(METHOD,SetPrimitiveArrayRegion)<SUB>2704</SUB>> ]
+"13891" [label = <(METHOD_RETURN,void)<SUB>2704</SUB>> ]
+  "13794" -> "13799" 
+  "13794" -> "13812" 
+  "13812" -> "13817" 
+  "13815" -> "13823" 
+  "13817" -> "13815" 
+  "13823" -> "13891" 
+  "13823" -> "13830" 
+  "13798" -> "13805" 
+  "13798" -> "13812" 
+  "13828" -> "13845" 
+  "13828" -> "13853" 
+  "13799" -> "13798" 
+  "13803" -> "13810" 
+  "13810" -> "13891" 
+  "13829" -> "13828" 
+  "13829" -> "13842" 
+  "13836" -> "13828" 
+  "13845" -> "13891" 
+  "13804" -> "13803" 
+  "13830" -> "13829" 
+  "13830" -> "13833" 
+  "13833" -> "13829" 
+  "13838" -> "13836" 
+  "13853" -> "13860" 
+  "13853" -> "13881" 
+  "13876" -> "13883" 
+  "13882" -> "13891" 
+  "13805" -> "13807" 
+  "13807" -> "13804" 
+  "13839" -> "13838" 
+  "13878" -> "13876" 
+  "13883" -> "13889" 
+  "13887" -> "13882" 
+  "13840" -> "13839" 
+  "13879" -> "13878" 
+  "13889" -> "13887" 
+  "13842" -> "13840" 
+  "13858" -> "13869" 
+  "13858" -> "13881" 
+  "13881" -> "13879" 
+  "13859" -> "13858" 
+  "13867" -> "13874" 
+  "13874" -> "13891" 
+  "13860" -> "13859" 
+  "13860" -> "13863" 
+  "13863" -> "13859" 
+  "13868" -> "13867" 
+  "13869" -> "13871" 
+  "13871" -> "13868" 
+  "13787" -> "13794" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/259-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/259-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/259-cfg.dot	2023-06-07 19:35:01.567387156 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/259-cfg.dot	2023-06-07 19:35:08.147386503 +0330
@@ -1,38 +1,925 @@
-digraph "ReleasePrimitiveArray" {  
-"13960" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>2764</SUB>> ]
-"13978" [label = <(soa,soa(env))<SUB>2765</SUB>> ]
-"13981" [label = <(&lt;operator&gt;.assignment,array = DecodeAndCheckArrayType&lt;ArrayT, ElementT, ArtArrayT&gt;(\012        soa, java_array, &quot;ReleaseArrayElements&quot;, &quot;release&quot;))<SUB>2766</SUB>> ]
-"13994" [label = <(ReleasePrimitiveArray,ReleasePrimitiveArray(soa, array, sizeof(ElementT), elements, mode))<SUB>2771</SUB>> ]
-"13983" [label = <(DecodeAndCheckArrayType&lt;ArrayT,ElementT,ArtArrayT&gt;,DecodeAndCheckArrayType&lt;ArrayT, ElementT, ArtArrayT&gt;(\012        soa, java_array, &quot;ReleaseArrayElements&quot;, &quot;release&quot;))<SUB>2766</SUB>> ]
-"13989" [label = <(&lt;operator&gt;.equals,array == nullptr)<SUB>2768</SUB>> ]
-"13997" [label = <(&lt;operator&gt;.sizeOf,sizeof(ElementT))<SUB>2771</SUB>> ]
-"13993" [label = <(RETURN,return;,return;)<SUB>2769</SUB>> ]
-"13964" [label = <(UNLIKELY,UNLIKELY((java_array) == nullptr))<SUB>2764</SUB>> ]
-"13965" [label = <(&lt;operator&gt;.equals,(java_array) == nullptr)<SUB>2764</SUB>> ]
-"13969" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_array == null&quot;))<SUB>2764</SUB>> ]
-"13976" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>2764</SUB>> ]
-"13970" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2764</SUB>> ]
-"13971" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2764</SUB>> ]
-"13973" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2764</SUB>> ]
-"13954" [label = <(METHOD,ReleasePrimitiveArray)<SUB>2763</SUB>> ]
-"14001" [label = <(METHOD_RETURN,void)<SUB>2763</SUB>> ]
+digraph "&lt;clinit&gt;" {  
+"13899" [label = <(&lt;operator&gt;.assignment,gJniNativeInterface = {\012 nullptr, // reserved0.\012 nullptr, // reserved1.\012 nullptr, // reserved2.\012 nullptr, // reserved3.\012 JNIImpl::GetVersion,\012 JNIImpl::DefineClass,\012 JNIImpl::FindClass,\012 JNIImpl::FromReflectedMethod,\012 JNIImpl::FromReflectedField,\012 JNIImpl::ToReflectedMethod,\012 JNIImpl::GetSuperclass,\012 JNIImpl::IsAssignableFrom,\012 JNIImpl::ToReflectedField,\012 JNIImpl::Throw,\012 JNIImpl::ThrowNew,\012 JNIImpl::ExceptionOccurred,\012 JNIImpl::ExceptionDescribe,\012 JNIImpl::ExceptionClear,\012 JNIImpl::FatalError,\012 JNIImpl::PushLocalFrame,\012 JNIImpl::PopLocalFrame,\012 JNIImpl::NewGlobalRef,\012 JNIImpl::DeleteGlobalRef,\012 JNIImpl::DeleteLocalRef,\012 JNIImpl::IsSameObject,\012 JNIImpl::NewLocalRef,\012 JNIImpl::EnsureLocalCapacity,\012 JNIImpl::AllocObject,\012 JNIImpl::NewObject,\012 JNIImpl::NewObjectV,\012 JNIImpl::NewObjectA,\012 JNIImpl::GetObjectClass,\012 JNIImpl::IsInstanceOf,\012 JNIImpl::GetMethodID,\012 JNIImpl::CallObjectMethod,\012 JNIImpl::CallObjectMethodV,\012 JNIImpl::CallObjectMethodA,\012 JNIImpl::CallBooleanMethod,\012 JNIImpl::CallBooleanMethodV,\012 JNIImpl::CallBooleanMethodA,\012 JNIImpl::CallByteMethod,\012 JNIImpl::CallByteMethodV,\012 JNIImpl::CallByteMethodA,\012 JNIImpl::CallCharMethod,\012 JNIImpl::CallCharMethodV,\012 JNIImpl::CallCharMethodA,\012 JNIImpl::CallShortMethod,\012 JNIImpl::CallShortMethodV,\012 JNIImpl::CallShortMethodA,\012 JNIImpl::CallIntMethod,\012 JNIImpl::CallIntMethodV,\012 JNIImpl::CallIntMethodA,\012 JNIImpl::CallLongMethod,\012 JNIImpl::CallLongMethodV,\012 JNIImpl::CallLongMethodA,\012 JNIImpl::CallFloatMethod,\012 JNIImpl::CallFloatMethodV,\012 JNIImpl::CallFloatMethodA,\012 JNIImpl::CallDoubleMethod,\012 JNIImpl::CallDoubleMethodV,\012 JNIImpl::CallDoubleMethodA,\012 JNIImpl::CallVoidMethod,\012 JNIImpl::CallVoidMethodV,\012 JNIImpl::CallVoidMethodA,\012 JNIImpl::CallNonvirtualObjectMethod,\012 JNIImpl::CallNonvirtualObjectMethodV,\012 JNIImpl::CallNonvirtualObjectMethodA,\012 JNIImpl::CallNonvirtualBooleanMethod,\012 JNIImpl::CallNonvirtualBooleanMethodV,\012 JNIImpl::CallNonvirtualBooleanMethodA,\012 JNIImpl::CallNonvirtualByteMethod,\012 JNIImpl::CallNonvirtualByteMethodV,\012 JNIImpl::CallNonvirtualByteMethodA,\012 JNIImpl::CallNonvirtualCharMethod,\012 JNIImpl::CallNonvirtualCharMethodV,\012 JNIImpl::CallNonvirtualCharMethodA,\012 JNIImpl::CallNonvirtualShortMethod,\012 JNIImpl::CallNonvirtualShortMethodV,\012 JNIImpl::CallNonvirtualShortMethodA,\012 JNIImpl::CallNonvirtualIntMethod,\012 JNIImpl::CallNonvirtualIntMethodV,\012 JNIImpl::CallNonvirtualIntMethodA,\012 JNIImpl::CallNonvirtualLongMethod,\012 JNIImpl::CallNonvirtualLongMethodV,\012 JNIImpl::CallNonvirtualLongMethodA,\012 JNIImpl::CallNonvirtualFloatMethod,\012 JNIImpl::CallNonvirtualFloatMethodV,\012 JNIImpl::CallNonvirtualFloatMethodA,\012 JNIImpl::CallNonvirtualDoubleMethod,\012 JNIImpl::CallNonvirtualDoubleMethodV,\012 JNIImpl::CallNonvirtualDoubleMethodA,\012 JNIImpl::CallNonvirtualVoidMethod,\012 JNIImpl::CallNonvirtualVoidMethodV,\012 JNIImpl::CallNonvirtualVoidMethodA,\012 JNIImpl::GetFieldID,\012 JNIImpl::GetObjectField,\012 JNIImpl::GetBooleanField,\012 JNIImpl::GetByteField,\012 JNIImpl::GetCharField,\012 JNIImpl::GetShortField,\012 JNIImpl::GetIntField,\012 JNIImpl::GetLongField,\012 JNIImpl::GetFloatField,\012 JNIImpl::GetDoubleField,\012 JNIImpl::SetObjectField,\012 JNIImpl::SetBooleanField,\012 JNIImpl::SetByteField,\012 JNIImpl::SetCharField,\012 JNIImpl::SetShortField,\012 JNIImpl::SetIntField,\012 JNIImpl::SetLongField,\012 JNIImpl::SetFloatField,\012 JNIImpl::SetDoubleField,\012 JNIImpl::GetStaticMethodID,\012 JNIImpl::CallStaticObjectMethod,\012 JNIImpl::CallStaticObjectMethodV,\012 JNIImpl::CallStaticObjectMethodA,\012 JNIImpl::CallStaticBooleanMethod,\012 JNIImpl::CallStaticBooleanMethodV,\012 JNIImpl::CallStaticBooleanMethodA,\012 JNIImpl::CallStaticByteMethod,\012 JNIImpl::CallStaticByteMethodV,\012 JNIImpl::CallStaticByteMethodA,\012 JNIImpl::CallStaticCharMethod,\012 JNIImpl::CallStaticCharMethodV,\012 JNIImpl::CallStaticCharMethodA,\012 JNIImpl::CallStaticShortMethod,\012 JNIImpl::CallStaticShortMethodV,\012 JNIImpl::CallStaticShortMethodA,\012 JNIImpl::CallStaticIntMethod,\012 JNIImpl::CallStaticIntMethodV,\012 JNIImpl::CallStaticIntMethodA,\012 JNIImpl::CallStaticLongMethod,\012 JNIImpl::CallStaticLongMethodV,\012 JNIImpl::CallStaticLongMethodA,\012 JNIImpl::CallStaticFloatMethod,\012 JNIImpl::CallStaticFloatMethodV,\012 JNIImpl::CallStaticFloatMethodA,\012 JNIImpl::CallStaticDoubleMethod,\012 JNIImpl::CallStaticDoubleMethodV,\012 JNIImpl::CallStaticDoubleMethodA,\012 JNIImpl::CallStaticVoidMethod,\012 JNIImpl::CallStaticVoidMethodV,\012 JNIImpl::CallStaticVoidMethodA,\012 JNIImpl::GetStaticFieldID,\012 JNIImpl::GetStaticObjectField,\012 JNIImpl::GetStaticBooleanField,\012 JNIImpl::GetStaticByteField,\012 JNIImpl::GetStaticCharField,\012 JNIImpl::GetStaticShortField,\012 JNIImpl::GetStaticIntField,\012 JNIImpl::GetStaticLongField,\012 JNIImpl::GetStaticFloatField,\012 JNIImpl::GetStaticDoubleField,\012 JNIImpl::SetStaticObjectField,\012 JNIImpl::SetStaticBooleanField,\012 JNIImpl::SetStaticByteField,\012 JNIImpl::SetStaticCharField,\012 JNIImpl::SetStaticShortField,\012 JNIImpl::SetStaticIntField,\012 JNIImpl::SetStaticLongField,\012 JNIImpl::SetStaticFloatField,\012 JNIImpl::SetStaticDoubleField,\012 JNIImpl::NewString,\012 JNIImpl::GetStringLength,\012 JNIImpl::GetStringChars,\012 JNIImpl::ReleaseStringChars,\012 JNIImpl::NewStringUTF,\012 JNIImpl::GetStringUTFLength,\012 JNIImpl::GetStringUTFChars,\012 JNIImpl::ReleaseStringUTFChars,\012 JNIImpl::GetArrayLength,\012 JNIImpl::NewObjectArray,\012 JNIImpl::GetObjectArrayElement,\012 JNIImpl::SetObjectArrayElement,\012 JNIImpl::NewBooleanArray,\012 JNIImpl::NewByteArray,\012 JNIImpl::NewCharArray,\012 JNIImpl::NewShortArray,\012 JNIImpl::NewIntArray,\012 JNIImpl::NewLongArray,\012 JNIImpl::NewFloatArray,\012 JNIImpl::NewDoubleArray,\012 JNIImpl::GetBooleanArrayElements,\012 JNIImpl::GetByteArrayElements,\012 JNIImpl::GetCharArrayElements,\012 JNIImpl::GetShortArrayElements,\012 JNIImpl::GetIntArrayElements,\012 JNIImpl::GetLongArrayElements,\012 JNIImpl::GetFloatArrayElements,\012 JNIImpl::GetDoubleArrayElements,\012 JNIImpl::ReleaseBooleanArrayElements,\012 JNIImpl::ReleaseByteArrayElements,\012 JNIImpl::ReleaseCharArrayElements,\012 JNIImpl::ReleaseShortArrayElements,\012 JNIImpl::ReleaseIntArrayElements,\012 JNIImpl::ReleaseLongArrayElements,\012 JNIImpl::ReleaseFloatArrayElements,\012 JNIImpl::ReleaseDoubleArrayElements,\012 JNIImpl::GetBooleanArrayRegion,\012 JNIImpl::GetByteArrayRegion,\012 JNIImpl::GetCharArrayRegion,\012 JNIImpl::GetShortArrayRegion,\012 JNIImpl::GetIntArrayRegion,\012 JNIImpl::GetLongArrayRegion,\012 JNIImpl::GetFloatArrayRegion,\012 JNIImpl::GetDoubleArrayRegion,\012 JNIImpl::SetBooleanArrayRegion,\012 JNIImpl::SetByteArrayRegion,\012 JNIImpl::SetCharArrayRegion,\012 JNIImpl::SetShortArrayRegion,\012 JNIImpl::SetIntArrayRegion,\012 JNIImpl::SetLongArrayRegion,\012 JNIImpl::SetFloatArrayRegion,\012 JNIImpl::SetDoubleArrayRegion,\012 JNIImpl::RegisterNatives,\012 JNIImpl::UnregisterNatives,\012 JNIImpl::MonitorEnter,\012 JNIImpl::MonitorExit,\012 JNIImpl::GetJavaVM,\012 JNIImpl::GetStringRegion,\012 JNIImpl::GetStringUTFRegion,\012 JNIImpl::GetPrimitiveArrayCritical,\012 JNIImpl::ReleasePrimitiveArrayCritical,\012 JNIImpl::GetStringCritical,\012 JNIImpl::ReleaseStringCritical,\012 JNIImpl::NewWeakGlobalRef,\012 JNIImpl::DeleteWeakGlobalRef,\012 JNIImpl::ExceptionCheck,\012 JNIImpl::NewDirectByteBuffer,\012 JNIImpl::GetDirectBufferAddress,\012 JNIImpl::GetDirectBufferCapacity,\012 JNIImpl::GetObjectRefType,\012 })<SUB>2725</SUB>> ]
+"13901" [label = <(&lt;operator&gt;.arrayInitializer,{\012 nullptr, // reserved0.\012 nullptr, // reserved1.\012 nullptr, // reserved2.\012 nullptr, // reserved3.\012 JNIImpl::GetVersion,\012 JNIImpl::DefineClass,\012 JNIImpl::FindClass,\012 JNIImpl::FromReflectedMethod,\012 JNIImpl::FromReflectedField,\012 JNIImpl::ToReflectedMethod,\012 JNIImpl::GetSuperclass,\012 JNIImpl::IsAssignableFrom,\012 JNIImpl::ToReflectedField,\012 JNIImpl::Throw,\012 JNIImpl::ThrowNew,\012 JNIImpl::ExceptionOccurred,\012 JNIImpl::ExceptionDescribe,\012 JNIImpl::ExceptionClear,\012 JNIImpl::FatalError,\012 JNIImpl::PushLocalFrame,\012 JNIImpl::PopLocalFrame,\012 JNIImpl::NewGlobalRef,\012 JNIImpl::DeleteGlobalRef,\012 JNIImpl::DeleteLocalRef,\012 JNIImpl::IsSameObject,\012 JNIImpl::NewLocalRef,\012 JNIImpl::EnsureLocalCapacity,\012 JNIImpl::AllocObject,\012 JNIImpl::NewObject,\012 JNIImpl::NewObjectV,\012 JNIImpl::NewObjectA,\012 JNIImpl::GetObjectClass,\012 JNIImpl::IsInstanceOf,\012 JNIImpl::GetMethodID,\012 JNIImpl::CallObjectMethod,\012 JNIImpl::CallObjectMethodV,\012 JNIImpl::CallObjectMethodA,\012 JNIImpl::CallBooleanMethod,\012 JNIImpl::CallBooleanMethodV,\012 JNIImpl::CallBooleanMethodA,\012 JNIImpl::CallByteMethod,\012 JNIImpl::CallByteMethodV,\012 JNIImpl::CallByteMethodA,\012 JNIImpl::CallCharMethod,\012 JNIImpl::CallCharMethodV,\012 JNIImpl::CallCharMethodA,\012 JNIImpl::CallShortMethod,\012 JNIImpl::CallShortMethodV,\012 JNIImpl::CallShortMethodA,\012 JNIImpl::CallIntMethod,\012 JNIImpl::CallIntMethodV,\012 JNIImpl::CallIntMethodA,\012 JNIImpl::CallLongMethod,\012 JNIImpl::CallLongMethodV,\012 JNIImpl::CallLongMethodA,\012 JNIImpl::CallFloatMethod,\012 JNIImpl::CallFloatMethodV,\012 JNIImpl::CallFloatMethodA,\012 JNIImpl::CallDoubleMethod,\012 JNIImpl::CallDoubleMethodV,\012 JNIImpl::CallDoubleMethodA,\012 JNIImpl::CallVoidMethod,\012 JNIImpl::CallVoidMethodV,\012 JNIImpl::CallVoidMethodA,\012 JNIImpl::CallNonvirtualObjectMethod,\012 JNIImpl::CallNonvirtualObjectMethodV,\012 JNIImpl::CallNonvirtualObjectMethodA,\012 JNIImpl::CallNonvirtualBooleanMethod,\012 JNIImpl::CallNonvirtualBooleanMethodV,\012 JNIImpl::CallNonvirtualBooleanMethodA,\012 JNIImpl::CallNonvirtualByteMethod,\012 JNIImpl::CallNonvirtualByteMethodV,\012 JNIImpl::CallNonvirtualByteMethodA,\012 JNIImpl::CallNonvirtualCharMethod,\012 JNIImpl::CallNonvirtualCharMethodV,\012 JNIImpl::CallNonvirtualCharMethodA,\012 JNIImpl::CallNonvirtualShortMethod,\012 JNIImpl::CallNonvirtualShortMethodV,\012 JNIImpl::CallNonvirtualShortMethodA,\012 JNIImpl::CallNonvirtualIntMethod,\012 JNIImpl::CallNonvirtualIntMethodV,\012 JNIImpl::CallNonvirtualIntMethodA,\012 JNIImpl::CallNonvirtualLongMethod,\012 JNIImpl::CallNonvirtualLongMethodV,\012 JNIImpl::CallNonvirtualLongMethodA,\012 JNIImpl::CallNonvirtualFloatMethod,\012 JNIImpl::CallNonvirtualFloatMethodV,\012 JNIImpl::CallNonvirtualFloatMethodA,\012 JNIImpl::CallNonvirtualDoubleMethod,\012 JNIImpl::CallNonvirtualDoubleMethodV,\012 JNIImpl::CallNonvirtualDoubleMethodA,\012 JNIImpl::CallNonvirtualVoidMethod,\012 JNIImpl::CallNonvirtualVoidMethodV,\012 JNIImpl::CallNonvirtualVoidMethodA,\012 JNIImpl::GetFieldID,\012 JNIImpl::GetObjectField,\012 JNIImpl::GetBooleanField,\012 JNIImpl::GetByteField,\012 JNIImpl::GetCharField,\012 JNIImpl::GetShortField,\012 JNIImpl::GetIntField,\012 JNIImpl::GetLongField,\012 JNIImpl::GetFloatField,\012 JNIImpl::GetDoubleField,\012 JNIImpl::SetObjectField,\012 JNIImpl::SetBooleanField,\012 JNIImpl::SetByteField,\012 JNIImpl::SetCharField,\012 JNIImpl::SetShortField,\012 JNIImpl::SetIntField,\012 JNIImpl::SetLongField,\012 JNIImpl::SetFloatField,\012 JNIImpl::SetDoubleField,\012 JNIImpl::GetStaticMethodID,\012 JNIImpl::CallStaticObjectMethod,\012 JNIImpl::CallStaticObjectMethodV,\012 JNIImpl::CallStaticObjectMethodA,\012 JNIImpl::CallStaticBooleanMethod,\012 JNIImpl::CallStaticBooleanMethodV,\012 JNIImpl::CallStaticBooleanMethodA,\012 JNIImpl::CallStaticByteMethod,\012 JNIImpl::CallStaticByteMethodV,\012 JNIImpl::CallStaticByteMethodA,\012 JNIImpl::CallStaticCharMethod,\012 JNIImpl::CallStaticCharMethodV,\012 JNIImpl::CallStaticCharMethodA,\012 JNIImpl::CallStaticShortMethod,\012 JNIImpl::CallStaticShortMethodV,\012 JNIImpl::CallStaticShortMethodA,\012 JNIImpl::CallStaticIntMethod,\012 JNIImpl::CallStaticIntMethodV,\012 JNIImpl::CallStaticIntMethodA,\012 JNIImpl::CallStaticLongMethod,\012 JNIImpl::CallStaticLongMethodV,\012 JNIImpl::CallStaticLongMethodA,\012 JNIImpl::CallStaticFloatMethod,\012 JNIImpl::CallStaticFloatMethodV,\012 JNIImpl::CallStaticFloatMethodA,\012 JNIImpl::CallStaticDoubleMethod,\012 JNIImpl::CallStaticDoubleMethodV,\012 JNIImpl::CallStaticDoubleMethodA,\012 JNIImpl::CallStaticVoidMethod,\012 JNIImpl::CallStaticVoidMethodV,\012 JNIImpl::CallStaticVoidMethodA,\012 JNIImpl::GetStaticFieldID,\012 JNIImpl::GetStaticObjectField,\012 JNIImpl::GetStaticBooleanField,\012 JNIImpl::GetStaticByteField,\012 JNIImpl::GetStaticCharField,\012 JNIImpl::GetStaticShortField,\012 JNIImpl::GetStaticIntField,\012 JNIImpl::GetStaticLongField,\012 JNIImpl::GetStaticFloatField,\012 JNIImpl::GetStaticDoubleField,\012 JNIImpl::SetStaticObjectField,\012 JNIImpl::SetStaticBooleanField,\012 JNIImpl::SetStaticByteField,\012 JNIImpl::SetStaticCharField,\012 JNIImpl::SetStaticShortField,\012 JNIImpl::SetStaticIntField,\012 JNIImpl::SetStaticLongField,\012 JNIImpl::SetStaticFloatField,\012 JNIImpl::SetStaticDoubleField,\012 JNIImpl::NewString,\012 JNIImpl::GetStringLength,\012 JNIImpl::GetStringChars,\012 JNIImpl::ReleaseStringChars,\012 JNIImpl::NewStringUTF,\012 JNIImpl::GetStringUTFLength,\012 JNIImpl::GetStringUTFChars,\012 JNIImpl::ReleaseStringUTFChars,\012 JNIImpl::GetArrayLength,\012 JNIImpl::NewObjectArray,\012 JNIImpl::GetObjectArrayElement,\012 JNIImpl::SetObjectArrayElement,\012 JNIImpl::NewBooleanArray,\012 JNIImpl::NewByteArray,\012 JNIImpl::NewCharArray,\012 JNIImpl::NewShortArray,\012 JNIImpl::NewIntArray,\012 JNIImpl::NewLongArray,\012 JNIImpl::NewFloatArray,\012 JNIImpl::NewDoubleArray,\012 JNIImpl::GetBooleanArrayElements,\012 JNIImpl::GetByteArrayElements,\012 JNIImpl::GetCharArrayElements,\012 JNIImpl::GetShortArrayElements,\012 JNIImpl::GetIntArrayElements,\012 JNIImpl::GetLongArrayElements,\012 JNIImpl::GetFloatArrayElements,\012 JNIImpl::GetDoubleArrayElements,\012 JNIImpl::ReleaseBooleanArrayElements,\012 JNIImpl::ReleaseByteArrayElements,\012 JNIImpl::ReleaseCharArrayElements,\012 JNIImpl::ReleaseShortArrayElements,\012 JNIImpl::ReleaseIntArrayElements,\012 JNIImpl::ReleaseLongArrayElements,\012 JNIImpl::ReleaseFloatArrayElements,\012 JNIImpl::ReleaseDoubleArrayElements,\012 JNIImpl::GetBooleanArrayRegion,\012 JNIImpl::GetByteArrayRegion,\012 JNIImpl::GetCharArrayRegion,\012 JNIImpl::GetShortArrayRegion,\012 JNIImpl::GetIntArrayRegion,\012 JNIImpl::GetLongArrayRegion,\012 JNIImpl::GetFloatArrayRegion,\012 JNIImpl::GetDoubleArrayRegion,\012 JNIImpl::SetBooleanArrayRegion,\012 JNIImpl::SetByteArrayRegion,\012 JNIImpl::SetCharArrayRegion,\012 JNIImpl::SetShortArrayRegion,\012 JNIImpl::SetIntArrayRegion,\012 JNIImpl::SetLongArrayRegion,\012 JNIImpl::SetFloatArrayRegion,\012 JNIImpl::SetDoubleArrayRegion,\012 JNIImpl::RegisterNatives,\012 JNIImpl::UnregisterNatives,\012 JNIImpl::MonitorEnter,\012 JNIImpl::MonitorExit,\012 JNIImpl::GetJavaVM,\012 JNIImpl::GetStringRegion,\012 JNIImpl::GetStringUTFRegion,\012 JNIImpl::GetPrimitiveArrayCritical,\012 JNIImpl::ReleasePrimitiveArrayCritical,\012 JNIImpl::GetStringCritical,\012 JNIImpl::ReleaseStringCritical,\012 JNIImpl::NewWeakGlobalRef,\012 JNIImpl::DeleteWeakGlobalRef,\012 JNIImpl::ExceptionCheck,\012 JNIImpl::NewDirectByteBuffer,\012 JNIImpl::GetDirectBufferAddress,\012 JNIImpl::GetDirectBufferCapacity,\012 JNIImpl::GetObjectRefType,\012 })<SUB>2725</SUB>> ]
+"13906" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetVersion)<SUB>2730</SUB>> ]
+"13909" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::DefineClass)<SUB>2731</SUB>> ]
+"13912" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::FindClass)<SUB>2732</SUB>> ]
+"13915" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::FromReflectedMethod)<SUB>2733</SUB>> ]
+"13918" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::FromReflectedField)<SUB>2734</SUB>> ]
+"13921" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::ToReflectedMethod)<SUB>2735</SUB>> ]
+"13924" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetSuperclass)<SUB>2736</SUB>> ]
+"13927" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::IsAssignableFrom)<SUB>2737</SUB>> ]
+"13930" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::ToReflectedField)<SUB>2738</SUB>> ]
+"13933" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::Throw)<SUB>2739</SUB>> ]
+"13936" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::ThrowNew)<SUB>2740</SUB>> ]
+"13939" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::ExceptionOccurred)<SUB>2741</SUB>> ]
+"13942" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::ExceptionDescribe)<SUB>2742</SUB>> ]
+"13945" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::ExceptionClear)<SUB>2743</SUB>> ]
+"13948" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::FatalError)<SUB>2744</SUB>> ]
+"13951" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::PushLocalFrame)<SUB>2745</SUB>> ]
+"13954" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::PopLocalFrame)<SUB>2746</SUB>> ]
+"13957" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::NewGlobalRef)<SUB>2747</SUB>> ]
+"13960" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::DeleteGlobalRef)<SUB>2748</SUB>> ]
+"13963" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::DeleteLocalRef)<SUB>2749</SUB>> ]
+"13966" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::IsSameObject)<SUB>2750</SUB>> ]
+"13969" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::NewLocalRef)<SUB>2751</SUB>> ]
+"13972" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::EnsureLocalCapacity)<SUB>2752</SUB>> ]
+"13975" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::AllocObject)<SUB>2753</SUB>> ]
+"13978" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::NewObject)<SUB>2754</SUB>> ]
+"13981" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::NewObjectV)<SUB>2755</SUB>> ]
+"13984" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::NewObjectA)<SUB>2756</SUB>> ]
+"13987" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetObjectClass)<SUB>2757</SUB>> ]
+"13990" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::IsInstanceOf)<SUB>2758</SUB>> ]
+"13993" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetMethodID)<SUB>2759</SUB>> ]
+"13996" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallObjectMethod)<SUB>2760</SUB>> ]
+"13999" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallObjectMethodV)<SUB>2761</SUB>> ]
+"14002" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallObjectMethodA)<SUB>2762</SUB>> ]
+"14005" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallBooleanMethod)<SUB>2763</SUB>> ]
+"14008" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallBooleanMethodV)<SUB>2764</SUB>> ]
+"14011" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallBooleanMethodA)<SUB>2765</SUB>> ]
+"14014" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallByteMethod)<SUB>2766</SUB>> ]
+"14017" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallByteMethodV)<SUB>2767</SUB>> ]
+"14020" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallByteMethodA)<SUB>2768</SUB>> ]
+"14023" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallCharMethod)<SUB>2769</SUB>> ]
+"14026" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallCharMethodV)<SUB>2770</SUB>> ]
+"14029" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallCharMethodA)<SUB>2771</SUB>> ]
+"14032" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallShortMethod)<SUB>2772</SUB>> ]
+"14035" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallShortMethodV)<SUB>2773</SUB>> ]
+"14038" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallShortMethodA)<SUB>2774</SUB>> ]
+"14041" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallIntMethod)<SUB>2775</SUB>> ]
+"14044" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallIntMethodV)<SUB>2776</SUB>> ]
+"14047" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallIntMethodA)<SUB>2777</SUB>> ]
+"14050" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallLongMethod)<SUB>2778</SUB>> ]
+"14053" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallLongMethodV)<SUB>2779</SUB>> ]
+"14056" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallLongMethodA)<SUB>2780</SUB>> ]
+"14059" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallFloatMethod)<SUB>2781</SUB>> ]
+"14062" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallFloatMethodV)<SUB>2782</SUB>> ]
+"14065" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallFloatMethodA)<SUB>2783</SUB>> ]
+"14068" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallDoubleMethod)<SUB>2784</SUB>> ]
+"14071" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallDoubleMethodV)<SUB>2785</SUB>> ]
+"14074" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallDoubleMethodA)<SUB>2786</SUB>> ]
+"14077" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallVoidMethod)<SUB>2787</SUB>> ]
+"14080" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallVoidMethodV)<SUB>2788</SUB>> ]
+"14083" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallVoidMethodA)<SUB>2789</SUB>> ]
+"14086" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallNonvirtualObjectMethod)<SUB>2790</SUB>> ]
+"14089" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallNonvirtualObjectMethodV)<SUB>2791</SUB>> ]
+"14092" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallNonvirtualObjectMethodA)<SUB>2792</SUB>> ]
+"14095" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallNonvirtualBooleanMethod)<SUB>2793</SUB>> ]
+"14098" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallNonvirtualBooleanMethodV)<SUB>2794</SUB>> ]
+"14101" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallNonvirtualBooleanMethodA)<SUB>2795</SUB>> ]
+"14104" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallNonvirtualByteMethod)<SUB>2796</SUB>> ]
+"14107" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallNonvirtualByteMethodV)<SUB>2797</SUB>> ]
+"14110" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallNonvirtualByteMethodA)<SUB>2798</SUB>> ]
+"14113" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallNonvirtualCharMethod)<SUB>2799</SUB>> ]
+"14116" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallNonvirtualCharMethodV)<SUB>2800</SUB>> ]
+"14119" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallNonvirtualCharMethodA)<SUB>2801</SUB>> ]
+"14122" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallNonvirtualShortMethod)<SUB>2802</SUB>> ]
+"14125" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallNonvirtualShortMethodV)<SUB>2803</SUB>> ]
+"14128" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallNonvirtualShortMethodA)<SUB>2804</SUB>> ]
+"14131" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallNonvirtualIntMethod)<SUB>2805</SUB>> ]
+"14134" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallNonvirtualIntMethodV)<SUB>2806</SUB>> ]
+"14137" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallNonvirtualIntMethodA)<SUB>2807</SUB>> ]
+"14140" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallNonvirtualLongMethod)<SUB>2808</SUB>> ]
+"14143" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallNonvirtualLongMethodV)<SUB>2809</SUB>> ]
+"14146" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallNonvirtualLongMethodA)<SUB>2810</SUB>> ]
+"14149" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallNonvirtualFloatMethod)<SUB>2811</SUB>> ]
+"14152" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallNonvirtualFloatMethodV)<SUB>2812</SUB>> ]
+"14155" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallNonvirtualFloatMethodA)<SUB>2813</SUB>> ]
+"14158" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallNonvirtualDoubleMethod)<SUB>2814</SUB>> ]
+"14161" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallNonvirtualDoubleMethodV)<SUB>2815</SUB>> ]
+"14164" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallNonvirtualDoubleMethodA)<SUB>2816</SUB>> ]
+"14167" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallNonvirtualVoidMethod)<SUB>2817</SUB>> ]
+"14170" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallNonvirtualVoidMethodV)<SUB>2818</SUB>> ]
+"14173" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallNonvirtualVoidMethodA)<SUB>2819</SUB>> ]
+"14176" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetFieldID)<SUB>2820</SUB>> ]
+"14179" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetObjectField)<SUB>2821</SUB>> ]
+"14182" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetBooleanField)<SUB>2822</SUB>> ]
+"14185" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetByteField)<SUB>2823</SUB>> ]
+"14188" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetCharField)<SUB>2824</SUB>> ]
+"14191" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetShortField)<SUB>2825</SUB>> ]
+"14194" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetIntField)<SUB>2826</SUB>> ]
+"14197" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetLongField)<SUB>2827</SUB>> ]
+"14200" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetFloatField)<SUB>2828</SUB>> ]
+"14203" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetDoubleField)<SUB>2829</SUB>> ]
+"14206" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::SetObjectField)<SUB>2830</SUB>> ]
+"14209" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::SetBooleanField)<SUB>2831</SUB>> ]
+"14212" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::SetByteField)<SUB>2832</SUB>> ]
+"14215" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::SetCharField)<SUB>2833</SUB>> ]
+"14218" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::SetShortField)<SUB>2834</SUB>> ]
+"14221" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::SetIntField)<SUB>2835</SUB>> ]
+"14224" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::SetLongField)<SUB>2836</SUB>> ]
+"14227" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::SetFloatField)<SUB>2837</SUB>> ]
+"14230" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::SetDoubleField)<SUB>2838</SUB>> ]
+"14233" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetStaticMethodID)<SUB>2839</SUB>> ]
+"14236" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallStaticObjectMethod)<SUB>2840</SUB>> ]
+"14239" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallStaticObjectMethodV)<SUB>2841</SUB>> ]
+"14242" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallStaticObjectMethodA)<SUB>2842</SUB>> ]
+"14245" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallStaticBooleanMethod)<SUB>2843</SUB>> ]
+"14248" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallStaticBooleanMethodV)<SUB>2844</SUB>> ]
+"14251" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallStaticBooleanMethodA)<SUB>2845</SUB>> ]
+"14254" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallStaticByteMethod)<SUB>2846</SUB>> ]
+"14257" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallStaticByteMethodV)<SUB>2847</SUB>> ]
+"14260" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallStaticByteMethodA)<SUB>2848</SUB>> ]
+"14263" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallStaticCharMethod)<SUB>2849</SUB>> ]
+"14266" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallStaticCharMethodV)<SUB>2850</SUB>> ]
+"14269" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallStaticCharMethodA)<SUB>2851</SUB>> ]
+"14272" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallStaticShortMethod)<SUB>2852</SUB>> ]
+"14275" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallStaticShortMethodV)<SUB>2853</SUB>> ]
+"14278" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallStaticShortMethodA)<SUB>2854</SUB>> ]
+"14281" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallStaticIntMethod)<SUB>2855</SUB>> ]
+"14284" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallStaticIntMethodV)<SUB>2856</SUB>> ]
+"14287" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallStaticIntMethodA)<SUB>2857</SUB>> ]
+"14290" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallStaticLongMethod)<SUB>2858</SUB>> ]
+"14293" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallStaticLongMethodV)<SUB>2859</SUB>> ]
+"14296" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallStaticLongMethodA)<SUB>2860</SUB>> ]
+"14299" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallStaticFloatMethod)<SUB>2861</SUB>> ]
+"14302" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallStaticFloatMethodV)<SUB>2862</SUB>> ]
+"14305" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallStaticFloatMethodA)<SUB>2863</SUB>> ]
+"14308" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallStaticDoubleMethod)<SUB>2864</SUB>> ]
+"14311" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallStaticDoubleMethodV)<SUB>2865</SUB>> ]
+"14314" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallStaticDoubleMethodA)<SUB>2866</SUB>> ]
+"14317" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallStaticVoidMethod)<SUB>2867</SUB>> ]
+"14320" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallStaticVoidMethodV)<SUB>2868</SUB>> ]
+"14323" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallStaticVoidMethodA)<SUB>2869</SUB>> ]
+"14326" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetStaticFieldID)<SUB>2870</SUB>> ]
+"14329" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetStaticObjectField)<SUB>2871</SUB>> ]
+"14332" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetStaticBooleanField)<SUB>2872</SUB>> ]
+"14335" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetStaticByteField)<SUB>2873</SUB>> ]
+"14338" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetStaticCharField)<SUB>2874</SUB>> ]
+"14341" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetStaticShortField)<SUB>2875</SUB>> ]
+"14344" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetStaticIntField)<SUB>2876</SUB>> ]
+"14347" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetStaticLongField)<SUB>2877</SUB>> ]
+"14350" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetStaticFloatField)<SUB>2878</SUB>> ]
+"14353" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetStaticDoubleField)<SUB>2879</SUB>> ]
+"14356" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::SetStaticObjectField)<SUB>2880</SUB>> ]
+"14359" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::SetStaticBooleanField)<SUB>2881</SUB>> ]
+"14362" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::SetStaticByteField)<SUB>2882</SUB>> ]
+"14365" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::SetStaticCharField)<SUB>2883</SUB>> ]
+"14368" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::SetStaticShortField)<SUB>2884</SUB>> ]
+"14371" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::SetStaticIntField)<SUB>2885</SUB>> ]
+"14374" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::SetStaticLongField)<SUB>2886</SUB>> ]
+"14377" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::SetStaticFloatField)<SUB>2887</SUB>> ]
+"14380" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::SetStaticDoubleField)<SUB>2888</SUB>> ]
+"14383" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::NewString)<SUB>2889</SUB>> ]
+"14386" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetStringLength)<SUB>2890</SUB>> ]
+"14389" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetStringChars)<SUB>2891</SUB>> ]
+"14392" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::ReleaseStringChars)<SUB>2892</SUB>> ]
+"14395" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::NewStringUTF)<SUB>2893</SUB>> ]
+"14398" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetStringUTFLength)<SUB>2894</SUB>> ]
+"14401" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetStringUTFChars)<SUB>2895</SUB>> ]
+"14404" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::ReleaseStringUTFChars)<SUB>2896</SUB>> ]
+"14407" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetArrayLength)<SUB>2897</SUB>> ]
+"14410" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::NewObjectArray)<SUB>2898</SUB>> ]
+"14413" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetObjectArrayElement)<SUB>2899</SUB>> ]
+"14416" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::SetObjectArrayElement)<SUB>2900</SUB>> ]
+"14419" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::NewBooleanArray)<SUB>2901</SUB>> ]
+"14422" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::NewByteArray)<SUB>2902</SUB>> ]
+"14425" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::NewCharArray)<SUB>2903</SUB>> ]
+"14428" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::NewShortArray)<SUB>2904</SUB>> ]
+"14431" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::NewIntArray)<SUB>2905</SUB>> ]
+"14434" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::NewLongArray)<SUB>2906</SUB>> ]
+"14437" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::NewFloatArray)<SUB>2907</SUB>> ]
+"14440" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::NewDoubleArray)<SUB>2908</SUB>> ]
+"14443" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetBooleanArrayElements)<SUB>2909</SUB>> ]
+"14446" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetByteArrayElements)<SUB>2910</SUB>> ]
+"14449" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetCharArrayElements)<SUB>2911</SUB>> ]
+"14452" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetShortArrayElements)<SUB>2912</SUB>> ]
+"14455" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetIntArrayElements)<SUB>2913</SUB>> ]
+"14458" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetLongArrayElements)<SUB>2914</SUB>> ]
+"14461" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetFloatArrayElements)<SUB>2915</SUB>> ]
+"14464" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetDoubleArrayElements)<SUB>2916</SUB>> ]
+"14467" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::ReleaseBooleanArrayElements)<SUB>2917</SUB>> ]
+"14470" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::ReleaseByteArrayElements)<SUB>2918</SUB>> ]
+"14473" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::ReleaseCharArrayElements)<SUB>2919</SUB>> ]
+"14476" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::ReleaseShortArrayElements)<SUB>2920</SUB>> ]
+"14479" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::ReleaseIntArrayElements)<SUB>2921</SUB>> ]
+"14482" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::ReleaseLongArrayElements)<SUB>2922</SUB>> ]
+"14485" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::ReleaseFloatArrayElements)<SUB>2923</SUB>> ]
+"14488" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::ReleaseDoubleArrayElements)<SUB>2924</SUB>> ]
+"14491" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetBooleanArrayRegion)<SUB>2925</SUB>> ]
+"14494" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetByteArrayRegion)<SUB>2926</SUB>> ]
+"14497" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetCharArrayRegion)<SUB>2927</SUB>> ]
+"14500" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetShortArrayRegion)<SUB>2928</SUB>> ]
+"14503" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetIntArrayRegion)<SUB>2929</SUB>> ]
+"14506" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetLongArrayRegion)<SUB>2930</SUB>> ]
+"14509" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetFloatArrayRegion)<SUB>2931</SUB>> ]
+"14512" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetDoubleArrayRegion)<SUB>2932</SUB>> ]
+"14515" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::SetBooleanArrayRegion)<SUB>2933</SUB>> ]
+"14518" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::SetByteArrayRegion)<SUB>2934</SUB>> ]
+"14521" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::SetCharArrayRegion)<SUB>2935</SUB>> ]
+"14524" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::SetShortArrayRegion)<SUB>2936</SUB>> ]
+"14527" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::SetIntArrayRegion)<SUB>2937</SUB>> ]
+"14530" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::SetLongArrayRegion)<SUB>2938</SUB>> ]
+"14533" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::SetFloatArrayRegion)<SUB>2939</SUB>> ]
+"14536" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::SetDoubleArrayRegion)<SUB>2940</SUB>> ]
+"14539" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::RegisterNatives)<SUB>2941</SUB>> ]
+"14542" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::UnregisterNatives)<SUB>2942</SUB>> ]
+"14545" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::MonitorEnter)<SUB>2943</SUB>> ]
+"14548" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::MonitorExit)<SUB>2944</SUB>> ]
+"14551" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetJavaVM)<SUB>2945</SUB>> ]
+"14554" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetStringRegion)<SUB>2946</SUB>> ]
+"14557" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetStringUTFRegion)<SUB>2947</SUB>> ]
+"14560" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetPrimitiveArrayCritical)<SUB>2948</SUB>> ]
+"14563" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::ReleasePrimitiveArrayCritical)<SUB>2949</SUB>> ]
+"14566" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetStringCritical)<SUB>2950</SUB>> ]
+"14569" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::ReleaseStringCritical)<SUB>2951</SUB>> ]
+"14572" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::NewWeakGlobalRef)<SUB>2952</SUB>> ]
+"14575" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::DeleteWeakGlobalRef)<SUB>2953</SUB>> ]
+"14578" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::ExceptionCheck)<SUB>2954</SUB>> ]
+"14581" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::NewDirectByteBuffer)<SUB>2955</SUB>> ]
+"14584" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetDirectBufferAddress)<SUB>2956</SUB>> ]
+"14587" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetDirectBufferCapacity)<SUB>2957</SUB>> ]
+"14590" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetObjectRefType)<SUB>2958</SUB>> ]
+"13908" [label = <(FIELD_IDENTIFIER,GetVersion,GetVersion)<SUB>2730</SUB>> ]
+"13911" [label = <(FIELD_IDENTIFIER,DefineClass,DefineClass)<SUB>2731</SUB>> ]
+"13914" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>2732</SUB>> ]
+"13917" [label = <(FIELD_IDENTIFIER,FromReflectedMethod,FromReflectedMethod)<SUB>2733</SUB>> ]
+"13920" [label = <(FIELD_IDENTIFIER,FromReflectedField,FromReflectedField)<SUB>2734</SUB>> ]
+"13923" [label = <(FIELD_IDENTIFIER,ToReflectedMethod,ToReflectedMethod)<SUB>2735</SUB>> ]
+"13926" [label = <(FIELD_IDENTIFIER,GetSuperclass,GetSuperclass)<SUB>2736</SUB>> ]
+"13929" [label = <(FIELD_IDENTIFIER,IsAssignableFrom,IsAssignableFrom)<SUB>2737</SUB>> ]
+"13932" [label = <(FIELD_IDENTIFIER,ToReflectedField,ToReflectedField)<SUB>2738</SUB>> ]
+"13935" [label = <(FIELD_IDENTIFIER,Throw,Throw)<SUB>2739</SUB>> ]
+"13938" [label = <(FIELD_IDENTIFIER,ThrowNew,ThrowNew)<SUB>2740</SUB>> ]
+"13941" [label = <(FIELD_IDENTIFIER,ExceptionOccurred,ExceptionOccurred)<SUB>2741</SUB>> ]
+"13944" [label = <(FIELD_IDENTIFIER,ExceptionDescribe,ExceptionDescribe)<SUB>2742</SUB>> ]
+"13947" [label = <(FIELD_IDENTIFIER,ExceptionClear,ExceptionClear)<SUB>2743</SUB>> ]
+"13950" [label = <(FIELD_IDENTIFIER,FatalError,FatalError)<SUB>2744</SUB>> ]
+"13953" [label = <(FIELD_IDENTIFIER,PushLocalFrame,PushLocalFrame)<SUB>2745</SUB>> ]
+"13956" [label = <(FIELD_IDENTIFIER,PopLocalFrame,PopLocalFrame)<SUB>2746</SUB>> ]
+"13959" [label = <(FIELD_IDENTIFIER,NewGlobalRef,NewGlobalRef)<SUB>2747</SUB>> ]
+"13962" [label = <(FIELD_IDENTIFIER,DeleteGlobalRef,DeleteGlobalRef)<SUB>2748</SUB>> ]
+"13965" [label = <(FIELD_IDENTIFIER,DeleteLocalRef,DeleteLocalRef)<SUB>2749</SUB>> ]
+"13968" [label = <(FIELD_IDENTIFIER,IsSameObject,IsSameObject)<SUB>2750</SUB>> ]
+"13971" [label = <(FIELD_IDENTIFIER,NewLocalRef,NewLocalRef)<SUB>2751</SUB>> ]
+"13974" [label = <(FIELD_IDENTIFIER,EnsureLocalCapacity,EnsureLocalCapacity)<SUB>2752</SUB>> ]
+"13977" [label = <(FIELD_IDENTIFIER,AllocObject,AllocObject)<SUB>2753</SUB>> ]
+"13980" [label = <(FIELD_IDENTIFIER,NewObject,NewObject)<SUB>2754</SUB>> ]
+"13983" [label = <(FIELD_IDENTIFIER,NewObjectV,NewObjectV)<SUB>2755</SUB>> ]
+"13986" [label = <(FIELD_IDENTIFIER,NewObjectA,NewObjectA)<SUB>2756</SUB>> ]
+"13989" [label = <(FIELD_IDENTIFIER,GetObjectClass,GetObjectClass)<SUB>2757</SUB>> ]
+"13992" [label = <(FIELD_IDENTIFIER,IsInstanceOf,IsInstanceOf)<SUB>2758</SUB>> ]
+"13995" [label = <(FIELD_IDENTIFIER,GetMethodID,GetMethodID)<SUB>2759</SUB>> ]
+"13998" [label = <(FIELD_IDENTIFIER,CallObjectMethod,CallObjectMethod)<SUB>2760</SUB>> ]
+"14001" [label = <(FIELD_IDENTIFIER,CallObjectMethodV,CallObjectMethodV)<SUB>2761</SUB>> ]
+"14004" [label = <(FIELD_IDENTIFIER,CallObjectMethodA,CallObjectMethodA)<SUB>2762</SUB>> ]
+"14007" [label = <(FIELD_IDENTIFIER,CallBooleanMethod,CallBooleanMethod)<SUB>2763</SUB>> ]
+"14010" [label = <(FIELD_IDENTIFIER,CallBooleanMethodV,CallBooleanMethodV)<SUB>2764</SUB>> ]
+"14013" [label = <(FIELD_IDENTIFIER,CallBooleanMethodA,CallBooleanMethodA)<SUB>2765</SUB>> ]
+"14016" [label = <(FIELD_IDENTIFIER,CallByteMethod,CallByteMethod)<SUB>2766</SUB>> ]
+"14019" [label = <(FIELD_IDENTIFIER,CallByteMethodV,CallByteMethodV)<SUB>2767</SUB>> ]
+"14022" [label = <(FIELD_IDENTIFIER,CallByteMethodA,CallByteMethodA)<SUB>2768</SUB>> ]
+"14025" [label = <(FIELD_IDENTIFIER,CallCharMethod,CallCharMethod)<SUB>2769</SUB>> ]
+"14028" [label = <(FIELD_IDENTIFIER,CallCharMethodV,CallCharMethodV)<SUB>2770</SUB>> ]
+"14031" [label = <(FIELD_IDENTIFIER,CallCharMethodA,CallCharMethodA)<SUB>2771</SUB>> ]
+"14034" [label = <(FIELD_IDENTIFIER,CallShortMethod,CallShortMethod)<SUB>2772</SUB>> ]
+"14037" [label = <(FIELD_IDENTIFIER,CallShortMethodV,CallShortMethodV)<SUB>2773</SUB>> ]
+"14040" [label = <(FIELD_IDENTIFIER,CallShortMethodA,CallShortMethodA)<SUB>2774</SUB>> ]
+"14043" [label = <(FIELD_IDENTIFIER,CallIntMethod,CallIntMethod)<SUB>2775</SUB>> ]
+"14046" [label = <(FIELD_IDENTIFIER,CallIntMethodV,CallIntMethodV)<SUB>2776</SUB>> ]
+"14049" [label = <(FIELD_IDENTIFIER,CallIntMethodA,CallIntMethodA)<SUB>2777</SUB>> ]
+"14052" [label = <(FIELD_IDENTIFIER,CallLongMethod,CallLongMethod)<SUB>2778</SUB>> ]
+"14055" [label = <(FIELD_IDENTIFIER,CallLongMethodV,CallLongMethodV)<SUB>2779</SUB>> ]
+"14058" [label = <(FIELD_IDENTIFIER,CallLongMethodA,CallLongMethodA)<SUB>2780</SUB>> ]
+"14061" [label = <(FIELD_IDENTIFIER,CallFloatMethod,CallFloatMethod)<SUB>2781</SUB>> ]
+"14064" [label = <(FIELD_IDENTIFIER,CallFloatMethodV,CallFloatMethodV)<SUB>2782</SUB>> ]
+"14067" [label = <(FIELD_IDENTIFIER,CallFloatMethodA,CallFloatMethodA)<SUB>2783</SUB>> ]
+"14070" [label = <(FIELD_IDENTIFIER,CallDoubleMethod,CallDoubleMethod)<SUB>2784</SUB>> ]
+"14073" [label = <(FIELD_IDENTIFIER,CallDoubleMethodV,CallDoubleMethodV)<SUB>2785</SUB>> ]
+"14076" [label = <(FIELD_IDENTIFIER,CallDoubleMethodA,CallDoubleMethodA)<SUB>2786</SUB>> ]
+"14079" [label = <(FIELD_IDENTIFIER,CallVoidMethod,CallVoidMethod)<SUB>2787</SUB>> ]
+"14082" [label = <(FIELD_IDENTIFIER,CallVoidMethodV,CallVoidMethodV)<SUB>2788</SUB>> ]
+"14085" [label = <(FIELD_IDENTIFIER,CallVoidMethodA,CallVoidMethodA)<SUB>2789</SUB>> ]
+"14088" [label = <(FIELD_IDENTIFIER,CallNonvirtualObjectMethod,CallNonvirtualObjectMethod)<SUB>2790</SUB>> ]
+"14091" [label = <(FIELD_IDENTIFIER,CallNonvirtualObjectMethodV,CallNonvirtualObjectMethodV)<SUB>2791</SUB>> ]
+"14094" [label = <(FIELD_IDENTIFIER,CallNonvirtualObjectMethodA,CallNonvirtualObjectMethodA)<SUB>2792</SUB>> ]
+"14097" [label = <(FIELD_IDENTIFIER,CallNonvirtualBooleanMethod,CallNonvirtualBooleanMethod)<SUB>2793</SUB>> ]
+"14100" [label = <(FIELD_IDENTIFIER,CallNonvirtualBooleanMethodV,CallNonvirtualBooleanMethodV)<SUB>2794</SUB>> ]
+"14103" [label = <(FIELD_IDENTIFIER,CallNonvirtualBooleanMethodA,CallNonvirtualBooleanMethodA)<SUB>2795</SUB>> ]
+"14106" [label = <(FIELD_IDENTIFIER,CallNonvirtualByteMethod,CallNonvirtualByteMethod)<SUB>2796</SUB>> ]
+"14109" [label = <(FIELD_IDENTIFIER,CallNonvirtualByteMethodV,CallNonvirtualByteMethodV)<SUB>2797</SUB>> ]
+"14112" [label = <(FIELD_IDENTIFIER,CallNonvirtualByteMethodA,CallNonvirtualByteMethodA)<SUB>2798</SUB>> ]
+"14115" [label = <(FIELD_IDENTIFIER,CallNonvirtualCharMethod,CallNonvirtualCharMethod)<SUB>2799</SUB>> ]
+"14118" [label = <(FIELD_IDENTIFIER,CallNonvirtualCharMethodV,CallNonvirtualCharMethodV)<SUB>2800</SUB>> ]
+"14121" [label = <(FIELD_IDENTIFIER,CallNonvirtualCharMethodA,CallNonvirtualCharMethodA)<SUB>2801</SUB>> ]
+"14124" [label = <(FIELD_IDENTIFIER,CallNonvirtualShortMethod,CallNonvirtualShortMethod)<SUB>2802</SUB>> ]
+"14127" [label = <(FIELD_IDENTIFIER,CallNonvirtualShortMethodV,CallNonvirtualShortMethodV)<SUB>2803</SUB>> ]
+"14130" [label = <(FIELD_IDENTIFIER,CallNonvirtualShortMethodA,CallNonvirtualShortMethodA)<SUB>2804</SUB>> ]
+"14133" [label = <(FIELD_IDENTIFIER,CallNonvirtualIntMethod,CallNonvirtualIntMethod)<SUB>2805</SUB>> ]
+"14136" [label = <(FIELD_IDENTIFIER,CallNonvirtualIntMethodV,CallNonvirtualIntMethodV)<SUB>2806</SUB>> ]
+"14139" [label = <(FIELD_IDENTIFIER,CallNonvirtualIntMethodA,CallNonvirtualIntMethodA)<SUB>2807</SUB>> ]
+"14142" [label = <(FIELD_IDENTIFIER,CallNonvirtualLongMethod,CallNonvirtualLongMethod)<SUB>2808</SUB>> ]
+"14145" [label = <(FIELD_IDENTIFIER,CallNonvirtualLongMethodV,CallNonvirtualLongMethodV)<SUB>2809</SUB>> ]
+"14148" [label = <(FIELD_IDENTIFIER,CallNonvirtualLongMethodA,CallNonvirtualLongMethodA)<SUB>2810</SUB>> ]
+"14151" [label = <(FIELD_IDENTIFIER,CallNonvirtualFloatMethod,CallNonvirtualFloatMethod)<SUB>2811</SUB>> ]
+"14154" [label = <(FIELD_IDENTIFIER,CallNonvirtualFloatMethodV,CallNonvirtualFloatMethodV)<SUB>2812</SUB>> ]
+"14157" [label = <(FIELD_IDENTIFIER,CallNonvirtualFloatMethodA,CallNonvirtualFloatMethodA)<SUB>2813</SUB>> ]
+"14160" [label = <(FIELD_IDENTIFIER,CallNonvirtualDoubleMethod,CallNonvirtualDoubleMethod)<SUB>2814</SUB>> ]
+"14163" [label = <(FIELD_IDENTIFIER,CallNonvirtualDoubleMethodV,CallNonvirtualDoubleMethodV)<SUB>2815</SUB>> ]
+"14166" [label = <(FIELD_IDENTIFIER,CallNonvirtualDoubleMethodA,CallNonvirtualDoubleMethodA)<SUB>2816</SUB>> ]
+"14169" [label = <(FIELD_IDENTIFIER,CallNonvirtualVoidMethod,CallNonvirtualVoidMethod)<SUB>2817</SUB>> ]
+"14172" [label = <(FIELD_IDENTIFIER,CallNonvirtualVoidMethodV,CallNonvirtualVoidMethodV)<SUB>2818</SUB>> ]
+"14175" [label = <(FIELD_IDENTIFIER,CallNonvirtualVoidMethodA,CallNonvirtualVoidMethodA)<SUB>2819</SUB>> ]
+"14178" [label = <(FIELD_IDENTIFIER,GetFieldID,GetFieldID)<SUB>2820</SUB>> ]
+"14181" [label = <(FIELD_IDENTIFIER,GetObjectField,GetObjectField)<SUB>2821</SUB>> ]
+"14184" [label = <(FIELD_IDENTIFIER,GetBooleanField,GetBooleanField)<SUB>2822</SUB>> ]
+"14187" [label = <(FIELD_IDENTIFIER,GetByteField,GetByteField)<SUB>2823</SUB>> ]
+"14190" [label = <(FIELD_IDENTIFIER,GetCharField,GetCharField)<SUB>2824</SUB>> ]
+"14193" [label = <(FIELD_IDENTIFIER,GetShortField,GetShortField)<SUB>2825</SUB>> ]
+"14196" [label = <(FIELD_IDENTIFIER,GetIntField,GetIntField)<SUB>2826</SUB>> ]
+"14199" [label = <(FIELD_IDENTIFIER,GetLongField,GetLongField)<SUB>2827</SUB>> ]
+"14202" [label = <(FIELD_IDENTIFIER,GetFloatField,GetFloatField)<SUB>2828</SUB>> ]
+"14205" [label = <(FIELD_IDENTIFIER,GetDoubleField,GetDoubleField)<SUB>2829</SUB>> ]
+"14208" [label = <(FIELD_IDENTIFIER,SetObjectField,SetObjectField)<SUB>2830</SUB>> ]
+"14211" [label = <(FIELD_IDENTIFIER,SetBooleanField,SetBooleanField)<SUB>2831</SUB>> ]
+"14214" [label = <(FIELD_IDENTIFIER,SetByteField,SetByteField)<SUB>2832</SUB>> ]
+"14217" [label = <(FIELD_IDENTIFIER,SetCharField,SetCharField)<SUB>2833</SUB>> ]
+"14220" [label = <(FIELD_IDENTIFIER,SetShortField,SetShortField)<SUB>2834</SUB>> ]
+"14223" [label = <(FIELD_IDENTIFIER,SetIntField,SetIntField)<SUB>2835</SUB>> ]
+"14226" [label = <(FIELD_IDENTIFIER,SetLongField,SetLongField)<SUB>2836</SUB>> ]
+"14229" [label = <(FIELD_IDENTIFIER,SetFloatField,SetFloatField)<SUB>2837</SUB>> ]
+"14232" [label = <(FIELD_IDENTIFIER,SetDoubleField,SetDoubleField)<SUB>2838</SUB>> ]
+"14235" [label = <(FIELD_IDENTIFIER,GetStaticMethodID,GetStaticMethodID)<SUB>2839</SUB>> ]
+"14238" [label = <(FIELD_IDENTIFIER,CallStaticObjectMethod,CallStaticObjectMethod)<SUB>2840</SUB>> ]
+"14241" [label = <(FIELD_IDENTIFIER,CallStaticObjectMethodV,CallStaticObjectMethodV)<SUB>2841</SUB>> ]
+"14244" [label = <(FIELD_IDENTIFIER,CallStaticObjectMethodA,CallStaticObjectMethodA)<SUB>2842</SUB>> ]
+"14247" [label = <(FIELD_IDENTIFIER,CallStaticBooleanMethod,CallStaticBooleanMethod)<SUB>2843</SUB>> ]
+"14250" [label = <(FIELD_IDENTIFIER,CallStaticBooleanMethodV,CallStaticBooleanMethodV)<SUB>2844</SUB>> ]
+"14253" [label = <(FIELD_IDENTIFIER,CallStaticBooleanMethodA,CallStaticBooleanMethodA)<SUB>2845</SUB>> ]
+"14256" [label = <(FIELD_IDENTIFIER,CallStaticByteMethod,CallStaticByteMethod)<SUB>2846</SUB>> ]
+"14259" [label = <(FIELD_IDENTIFIER,CallStaticByteMethodV,CallStaticByteMethodV)<SUB>2847</SUB>> ]
+"14262" [label = <(FIELD_IDENTIFIER,CallStaticByteMethodA,CallStaticByteMethodA)<SUB>2848</SUB>> ]
+"14265" [label = <(FIELD_IDENTIFIER,CallStaticCharMethod,CallStaticCharMethod)<SUB>2849</SUB>> ]
+"14268" [label = <(FIELD_IDENTIFIER,CallStaticCharMethodV,CallStaticCharMethodV)<SUB>2850</SUB>> ]
+"14271" [label = <(FIELD_IDENTIFIER,CallStaticCharMethodA,CallStaticCharMethodA)<SUB>2851</SUB>> ]
+"14274" [label = <(FIELD_IDENTIFIER,CallStaticShortMethod,CallStaticShortMethod)<SUB>2852</SUB>> ]
+"14277" [label = <(FIELD_IDENTIFIER,CallStaticShortMethodV,CallStaticShortMethodV)<SUB>2853</SUB>> ]
+"14280" [label = <(FIELD_IDENTIFIER,CallStaticShortMethodA,CallStaticShortMethodA)<SUB>2854</SUB>> ]
+"14283" [label = <(FIELD_IDENTIFIER,CallStaticIntMethod,CallStaticIntMethod)<SUB>2855</SUB>> ]
+"14286" [label = <(FIELD_IDENTIFIER,CallStaticIntMethodV,CallStaticIntMethodV)<SUB>2856</SUB>> ]
+"14289" [label = <(FIELD_IDENTIFIER,CallStaticIntMethodA,CallStaticIntMethodA)<SUB>2857</SUB>> ]
+"14292" [label = <(FIELD_IDENTIFIER,CallStaticLongMethod,CallStaticLongMethod)<SUB>2858</SUB>> ]
+"14295" [label = <(FIELD_IDENTIFIER,CallStaticLongMethodV,CallStaticLongMethodV)<SUB>2859</SUB>> ]
+"14298" [label = <(FIELD_IDENTIFIER,CallStaticLongMethodA,CallStaticLongMethodA)<SUB>2860</SUB>> ]
+"14301" [label = <(FIELD_IDENTIFIER,CallStaticFloatMethod,CallStaticFloatMethod)<SUB>2861</SUB>> ]
+"14304" [label = <(FIELD_IDENTIFIER,CallStaticFloatMethodV,CallStaticFloatMethodV)<SUB>2862</SUB>> ]
+"14307" [label = <(FIELD_IDENTIFIER,CallStaticFloatMethodA,CallStaticFloatMethodA)<SUB>2863</SUB>> ]
+"14310" [label = <(FIELD_IDENTIFIER,CallStaticDoubleMethod,CallStaticDoubleMethod)<SUB>2864</SUB>> ]
+"14313" [label = <(FIELD_IDENTIFIER,CallStaticDoubleMethodV,CallStaticDoubleMethodV)<SUB>2865</SUB>> ]
+"14316" [label = <(FIELD_IDENTIFIER,CallStaticDoubleMethodA,CallStaticDoubleMethodA)<SUB>2866</SUB>> ]
+"14319" [label = <(FIELD_IDENTIFIER,CallStaticVoidMethod,CallStaticVoidMethod)<SUB>2867</SUB>> ]
+"14322" [label = <(FIELD_IDENTIFIER,CallStaticVoidMethodV,CallStaticVoidMethodV)<SUB>2868</SUB>> ]
+"14325" [label = <(FIELD_IDENTIFIER,CallStaticVoidMethodA,CallStaticVoidMethodA)<SUB>2869</SUB>> ]
+"14328" [label = <(FIELD_IDENTIFIER,GetStaticFieldID,GetStaticFieldID)<SUB>2870</SUB>> ]
+"14331" [label = <(FIELD_IDENTIFIER,GetStaticObjectField,GetStaticObjectField)<SUB>2871</SUB>> ]
+"14334" [label = <(FIELD_IDENTIFIER,GetStaticBooleanField,GetStaticBooleanField)<SUB>2872</SUB>> ]
+"14337" [label = <(FIELD_IDENTIFIER,GetStaticByteField,GetStaticByteField)<SUB>2873</SUB>> ]
+"14340" [label = <(FIELD_IDENTIFIER,GetStaticCharField,GetStaticCharField)<SUB>2874</SUB>> ]
+"14343" [label = <(FIELD_IDENTIFIER,GetStaticShortField,GetStaticShortField)<SUB>2875</SUB>> ]
+"14346" [label = <(FIELD_IDENTIFIER,GetStaticIntField,GetStaticIntField)<SUB>2876</SUB>> ]
+"14349" [label = <(FIELD_IDENTIFIER,GetStaticLongField,GetStaticLongField)<SUB>2877</SUB>> ]
+"14352" [label = <(FIELD_IDENTIFIER,GetStaticFloatField,GetStaticFloatField)<SUB>2878</SUB>> ]
+"14355" [label = <(FIELD_IDENTIFIER,GetStaticDoubleField,GetStaticDoubleField)<SUB>2879</SUB>> ]
+"14358" [label = <(FIELD_IDENTIFIER,SetStaticObjectField,SetStaticObjectField)<SUB>2880</SUB>> ]
+"14361" [label = <(FIELD_IDENTIFIER,SetStaticBooleanField,SetStaticBooleanField)<SUB>2881</SUB>> ]
+"14364" [label = <(FIELD_IDENTIFIER,SetStaticByteField,SetStaticByteField)<SUB>2882</SUB>> ]
+"14367" [label = <(FIELD_IDENTIFIER,SetStaticCharField,SetStaticCharField)<SUB>2883</SUB>> ]
+"14370" [label = <(FIELD_IDENTIFIER,SetStaticShortField,SetStaticShortField)<SUB>2884</SUB>> ]
+"14373" [label = <(FIELD_IDENTIFIER,SetStaticIntField,SetStaticIntField)<SUB>2885</SUB>> ]
+"14376" [label = <(FIELD_IDENTIFIER,SetStaticLongField,SetStaticLongField)<SUB>2886</SUB>> ]
+"14379" [label = <(FIELD_IDENTIFIER,SetStaticFloatField,SetStaticFloatField)<SUB>2887</SUB>> ]
+"14382" [label = <(FIELD_IDENTIFIER,SetStaticDoubleField,SetStaticDoubleField)<SUB>2888</SUB>> ]
+"14385" [label = <(FIELD_IDENTIFIER,NewString,NewString)<SUB>2889</SUB>> ]
+"14388" [label = <(FIELD_IDENTIFIER,GetStringLength,GetStringLength)<SUB>2890</SUB>> ]
+"14391" [label = <(FIELD_IDENTIFIER,GetStringChars,GetStringChars)<SUB>2891</SUB>> ]
+"14394" [label = <(FIELD_IDENTIFIER,ReleaseStringChars,ReleaseStringChars)<SUB>2892</SUB>> ]
+"14397" [label = <(FIELD_IDENTIFIER,NewStringUTF,NewStringUTF)<SUB>2893</SUB>> ]
+"14400" [label = <(FIELD_IDENTIFIER,GetStringUTFLength,GetStringUTFLength)<SUB>2894</SUB>> ]
+"14403" [label = <(FIELD_IDENTIFIER,GetStringUTFChars,GetStringUTFChars)<SUB>2895</SUB>> ]
+"14406" [label = <(FIELD_IDENTIFIER,ReleaseStringUTFChars,ReleaseStringUTFChars)<SUB>2896</SUB>> ]
+"14409" [label = <(FIELD_IDENTIFIER,GetArrayLength,GetArrayLength)<SUB>2897</SUB>> ]
+"14412" [label = <(FIELD_IDENTIFIER,NewObjectArray,NewObjectArray)<SUB>2898</SUB>> ]
+"14415" [label = <(FIELD_IDENTIFIER,GetObjectArrayElement,GetObjectArrayElement)<SUB>2899</SUB>> ]
+"14418" [label = <(FIELD_IDENTIFIER,SetObjectArrayElement,SetObjectArrayElement)<SUB>2900</SUB>> ]
+"14421" [label = <(FIELD_IDENTIFIER,NewBooleanArray,NewBooleanArray)<SUB>2901</SUB>> ]
+"14424" [label = <(FIELD_IDENTIFIER,NewByteArray,NewByteArray)<SUB>2902</SUB>> ]
+"14427" [label = <(FIELD_IDENTIFIER,NewCharArray,NewCharArray)<SUB>2903</SUB>> ]
+"14430" [label = <(FIELD_IDENTIFIER,NewShortArray,NewShortArray)<SUB>2904</SUB>> ]
+"14433" [label = <(FIELD_IDENTIFIER,NewIntArray,NewIntArray)<SUB>2905</SUB>> ]
+"14436" [label = <(FIELD_IDENTIFIER,NewLongArray,NewLongArray)<SUB>2906</SUB>> ]
+"14439" [label = <(FIELD_IDENTIFIER,NewFloatArray,NewFloatArray)<SUB>2907</SUB>> ]
+"14442" [label = <(FIELD_IDENTIFIER,NewDoubleArray,NewDoubleArray)<SUB>2908</SUB>> ]
+"14445" [label = <(FIELD_IDENTIFIER,GetBooleanArrayElements,GetBooleanArrayElements)<SUB>2909</SUB>> ]
+"14448" [label = <(FIELD_IDENTIFIER,GetByteArrayElements,GetByteArrayElements)<SUB>2910</SUB>> ]
+"14451" [label = <(FIELD_IDENTIFIER,GetCharArrayElements,GetCharArrayElements)<SUB>2911</SUB>> ]
+"14454" [label = <(FIELD_IDENTIFIER,GetShortArrayElements,GetShortArrayElements)<SUB>2912</SUB>> ]
+"14457" [label = <(FIELD_IDENTIFIER,GetIntArrayElements,GetIntArrayElements)<SUB>2913</SUB>> ]
+"14460" [label = <(FIELD_IDENTIFIER,GetLongArrayElements,GetLongArrayElements)<SUB>2914</SUB>> ]
+"14463" [label = <(FIELD_IDENTIFIER,GetFloatArrayElements,GetFloatArrayElements)<SUB>2915</SUB>> ]
+"14466" [label = <(FIELD_IDENTIFIER,GetDoubleArrayElements,GetDoubleArrayElements)<SUB>2916</SUB>> ]
+"14469" [label = <(FIELD_IDENTIFIER,ReleaseBooleanArrayElements,ReleaseBooleanArrayElements)<SUB>2917</SUB>> ]
+"14472" [label = <(FIELD_IDENTIFIER,ReleaseByteArrayElements,ReleaseByteArrayElements)<SUB>2918</SUB>> ]
+"14475" [label = <(FIELD_IDENTIFIER,ReleaseCharArrayElements,ReleaseCharArrayElements)<SUB>2919</SUB>> ]
+"14478" [label = <(FIELD_IDENTIFIER,ReleaseShortArrayElements,ReleaseShortArrayElements)<SUB>2920</SUB>> ]
+"14481" [label = <(FIELD_IDENTIFIER,ReleaseIntArrayElements,ReleaseIntArrayElements)<SUB>2921</SUB>> ]
+"14484" [label = <(FIELD_IDENTIFIER,ReleaseLongArrayElements,ReleaseLongArrayElements)<SUB>2922</SUB>> ]
+"14487" [label = <(FIELD_IDENTIFIER,ReleaseFloatArrayElements,ReleaseFloatArrayElements)<SUB>2923</SUB>> ]
+"14490" [label = <(FIELD_IDENTIFIER,ReleaseDoubleArrayElements,ReleaseDoubleArrayElements)<SUB>2924</SUB>> ]
+"14493" [label = <(FIELD_IDENTIFIER,GetBooleanArrayRegion,GetBooleanArrayRegion)<SUB>2925</SUB>> ]
+"14496" [label = <(FIELD_IDENTIFIER,GetByteArrayRegion,GetByteArrayRegion)<SUB>2926</SUB>> ]
+"14499" [label = <(FIELD_IDENTIFIER,GetCharArrayRegion,GetCharArrayRegion)<SUB>2927</SUB>> ]
+"14502" [label = <(FIELD_IDENTIFIER,GetShortArrayRegion,GetShortArrayRegion)<SUB>2928</SUB>> ]
+"14505" [label = <(FIELD_IDENTIFIER,GetIntArrayRegion,GetIntArrayRegion)<SUB>2929</SUB>> ]
+"14508" [label = <(FIELD_IDENTIFIER,GetLongArrayRegion,GetLongArrayRegion)<SUB>2930</SUB>> ]
+"14511" [label = <(FIELD_IDENTIFIER,GetFloatArrayRegion,GetFloatArrayRegion)<SUB>2931</SUB>> ]
+"14514" [label = <(FIELD_IDENTIFIER,GetDoubleArrayRegion,GetDoubleArrayRegion)<SUB>2932</SUB>> ]
+"14517" [label = <(FIELD_IDENTIFIER,SetBooleanArrayRegion,SetBooleanArrayRegion)<SUB>2933</SUB>> ]
+"14520" [label = <(FIELD_IDENTIFIER,SetByteArrayRegion,SetByteArrayRegion)<SUB>2934</SUB>> ]
+"14523" [label = <(FIELD_IDENTIFIER,SetCharArrayRegion,SetCharArrayRegion)<SUB>2935</SUB>> ]
+"14526" [label = <(FIELD_IDENTIFIER,SetShortArrayRegion,SetShortArrayRegion)<SUB>2936</SUB>> ]
+"14529" [label = <(FIELD_IDENTIFIER,SetIntArrayRegion,SetIntArrayRegion)<SUB>2937</SUB>> ]
+"14532" [label = <(FIELD_IDENTIFIER,SetLongArrayRegion,SetLongArrayRegion)<SUB>2938</SUB>> ]
+"14535" [label = <(FIELD_IDENTIFIER,SetFloatArrayRegion,SetFloatArrayRegion)<SUB>2939</SUB>> ]
+"14538" [label = <(FIELD_IDENTIFIER,SetDoubleArrayRegion,SetDoubleArrayRegion)<SUB>2940</SUB>> ]
+"14541" [label = <(FIELD_IDENTIFIER,RegisterNatives,RegisterNatives)<SUB>2941</SUB>> ]
+"14544" [label = <(FIELD_IDENTIFIER,UnregisterNatives,UnregisterNatives)<SUB>2942</SUB>> ]
+"14547" [label = <(FIELD_IDENTIFIER,MonitorEnter,MonitorEnter)<SUB>2943</SUB>> ]
+"14550" [label = <(FIELD_IDENTIFIER,MonitorExit,MonitorExit)<SUB>2944</SUB>> ]
+"14553" [label = <(FIELD_IDENTIFIER,GetJavaVM,GetJavaVM)<SUB>2945</SUB>> ]
+"14556" [label = <(FIELD_IDENTIFIER,GetStringRegion,GetStringRegion)<SUB>2946</SUB>> ]
+"14559" [label = <(FIELD_IDENTIFIER,GetStringUTFRegion,GetStringUTFRegion)<SUB>2947</SUB>> ]
+"14562" [label = <(FIELD_IDENTIFIER,GetPrimitiveArrayCritical,GetPrimitiveArrayCritical)<SUB>2948</SUB>> ]
+"14565" [label = <(FIELD_IDENTIFIER,ReleasePrimitiveArrayCritical,ReleasePrimitiveArrayCritical)<SUB>2949</SUB>> ]
+"14568" [label = <(FIELD_IDENTIFIER,GetStringCritical,GetStringCritical)<SUB>2950</SUB>> ]
+"14571" [label = <(FIELD_IDENTIFIER,ReleaseStringCritical,ReleaseStringCritical)<SUB>2951</SUB>> ]
+"14574" [label = <(FIELD_IDENTIFIER,NewWeakGlobalRef,NewWeakGlobalRef)<SUB>2952</SUB>> ]
+"14577" [label = <(FIELD_IDENTIFIER,DeleteWeakGlobalRef,DeleteWeakGlobalRef)<SUB>2953</SUB>> ]
+"14580" [label = <(FIELD_IDENTIFIER,ExceptionCheck,ExceptionCheck)<SUB>2954</SUB>> ]
+"14583" [label = <(FIELD_IDENTIFIER,NewDirectByteBuffer,NewDirectByteBuffer)<SUB>2955</SUB>> ]
+"14586" [label = <(FIELD_IDENTIFIER,GetDirectBufferAddress,GetDirectBufferAddress)<SUB>2956</SUB>> ]
+"14589" [label = <(FIELD_IDENTIFIER,GetDirectBufferCapacity,GetDirectBufferCapacity)<SUB>2957</SUB>> ]
+"14592" [label = <(FIELD_IDENTIFIER,GetObjectRefType,GetObjectRefType)<SUB>2958</SUB>> ]
+"13897" [label = <(METHOD,&lt;clinit&gt;)> ]
+"14594" [label = <(METHOD_RETURN,ANY)> ]
+  "13899" -> "14594" 
+  "13901" -> "13899" 
+  "13906" -> "13911" 
+  "13909" -> "13914" 
+  "13912" -> "13917" 
+  "13915" -> "13920" 
+  "13918" -> "13923" 
+  "13921" -> "13926" 
+  "13924" -> "13929" 
+  "13927" -> "13932" 
+  "13930" -> "13935" 
+  "13933" -> "13938" 
+  "13936" -> "13941" 
+  "13939" -> "13944" 
+  "13942" -> "13947" 
+  "13945" -> "13950" 
+  "13948" -> "13953" 
+  "13951" -> "13956" 
+  "13954" -> "13959" 
+  "13957" -> "13962" 
   "13960" -> "13965" 
-  "13960" -> "13978" 
+  "13963" -> "13968" 
+  "13966" -> "13971" 
+  "13969" -> "13974" 
+  "13972" -> "13977" 
+  "13975" -> "13980" 
   "13978" -> "13983" 
-  "13981" -> "13989" 
-  "13994" -> "14001" 
+  "13981" -> "13986" 
+  "13984" -> "13989" 
+  "13987" -> "13992" 
+  "13990" -> "13995" 
+  "13993" -> "13998" 
+  "13996" -> "14001" 
+  "13999" -> "14004" 
+  "14002" -> "14007" 
+  "14005" -> "14010" 
+  "14008" -> "14013" 
+  "14011" -> "14016" 
+  "14014" -> "14019" 
+  "14017" -> "14022" 
+  "14020" -> "14025" 
+  "14023" -> "14028" 
+  "14026" -> "14031" 
+  "14029" -> "14034" 
+  "14032" -> "14037" 
+  "14035" -> "14040" 
+  "14038" -> "14043" 
+  "14041" -> "14046" 
+  "14044" -> "14049" 
+  "14047" -> "14052" 
+  "14050" -> "14055" 
+  "14053" -> "14058" 
+  "14056" -> "14061" 
+  "14059" -> "14064" 
+  "14062" -> "14067" 
+  "14065" -> "14070" 
+  "14068" -> "14073" 
+  "14071" -> "14076" 
+  "14074" -> "14079" 
+  "14077" -> "14082" 
+  "14080" -> "14085" 
+  "14083" -> "14088" 
+  "14086" -> "14091" 
+  "14089" -> "14094" 
+  "14092" -> "14097" 
+  "14095" -> "14100" 
+  "14098" -> "14103" 
+  "14101" -> "14106" 
+  "14104" -> "14109" 
+  "14107" -> "14112" 
+  "14110" -> "14115" 
+  "14113" -> "14118" 
+  "14116" -> "14121" 
+  "14119" -> "14124" 
+  "14122" -> "14127" 
+  "14125" -> "14130" 
+  "14128" -> "14133" 
+  "14131" -> "14136" 
+  "14134" -> "14139" 
+  "14137" -> "14142" 
+  "14140" -> "14145" 
+  "14143" -> "14148" 
+  "14146" -> "14151" 
+  "14149" -> "14154" 
+  "14152" -> "14157" 
+  "14155" -> "14160" 
+  "14158" -> "14163" 
+  "14161" -> "14166" 
+  "14164" -> "14169" 
+  "14167" -> "14172" 
+  "14170" -> "14175" 
+  "14173" -> "14178" 
+  "14176" -> "14181" 
+  "14179" -> "14184" 
+  "14182" -> "14187" 
+  "14185" -> "14190" 
+  "14188" -> "14193" 
+  "14191" -> "14196" 
+  "14194" -> "14199" 
+  "14197" -> "14202" 
+  "14200" -> "14205" 
+  "14203" -> "14208" 
+  "14206" -> "14211" 
+  "14209" -> "14214" 
+  "14212" -> "14217" 
+  "14215" -> "14220" 
+  "14218" -> "14223" 
+  "14221" -> "14226" 
+  "14224" -> "14229" 
+  "14227" -> "14232" 
+  "14230" -> "14235" 
+  "14233" -> "14238" 
+  "14236" -> "14241" 
+  "14239" -> "14244" 
+  "14242" -> "14247" 
+  "14245" -> "14250" 
+  "14248" -> "14253" 
+  "14251" -> "14256" 
+  "14254" -> "14259" 
+  "14257" -> "14262" 
+  "14260" -> "14265" 
+  "14263" -> "14268" 
+  "14266" -> "14271" 
+  "14269" -> "14274" 
+  "14272" -> "14277" 
+  "14275" -> "14280" 
+  "14278" -> "14283" 
+  "14281" -> "14286" 
+  "14284" -> "14289" 
+  "14287" -> "14292" 
+  "14290" -> "14295" 
+  "14293" -> "14298" 
+  "14296" -> "14301" 
+  "14299" -> "14304" 
+  "14302" -> "14307" 
+  "14305" -> "14310" 
+  "14308" -> "14313" 
+  "14311" -> "14316" 
+  "14314" -> "14319" 
+  "14317" -> "14322" 
+  "14320" -> "14325" 
+  "14323" -> "14328" 
+  "14326" -> "14331" 
+  "14329" -> "14334" 
+  "14332" -> "14337" 
+  "14335" -> "14340" 
+  "14338" -> "14343" 
+  "14341" -> "14346" 
+  "14344" -> "14349" 
+  "14347" -> "14352" 
+  "14350" -> "14355" 
+  "14353" -> "14358" 
+  "14356" -> "14361" 
+  "14359" -> "14364" 
+  "14362" -> "14367" 
+  "14365" -> "14370" 
+  "14368" -> "14373" 
+  "14371" -> "14376" 
+  "14374" -> "14379" 
+  "14377" -> "14382" 
+  "14380" -> "14385" 
+  "14383" -> "14388" 
+  "14386" -> "14391" 
+  "14389" -> "14394" 
+  "14392" -> "14397" 
+  "14395" -> "14400" 
+  "14398" -> "14403" 
+  "14401" -> "14406" 
+  "14404" -> "14409" 
+  "14407" -> "14412" 
+  "14410" -> "14415" 
+  "14413" -> "14418" 
+  "14416" -> "14421" 
+  "14419" -> "14424" 
+  "14422" -> "14427" 
+  "14425" -> "14430" 
+  "14428" -> "14433" 
+  "14431" -> "14436" 
+  "14434" -> "14439" 
+  "14437" -> "14442" 
+  "14440" -> "14445" 
+  "14443" -> "14448" 
+  "14446" -> "14451" 
+  "14449" -> "14454" 
+  "14452" -> "14457" 
+  "14455" -> "14460" 
+  "14458" -> "14463" 
+  "14461" -> "14466" 
+  "14464" -> "14469" 
+  "14467" -> "14472" 
+  "14470" -> "14475" 
+  "14473" -> "14478" 
+  "14476" -> "14481" 
+  "14479" -> "14484" 
+  "14482" -> "14487" 
+  "14485" -> "14490" 
+  "14488" -> "14493" 
+  "14491" -> "14496" 
+  "14494" -> "14499" 
+  "14497" -> "14502" 
+  "14500" -> "14505" 
+  "14503" -> "14508" 
+  "14506" -> "14511" 
+  "14509" -> "14514" 
+  "14512" -> "14517" 
+  "14515" -> "14520" 
+  "14518" -> "14523" 
+  "14521" -> "14526" 
+  "14524" -> "14529" 
+  "14527" -> "14532" 
+  "14530" -> "14535" 
+  "14533" -> "14538" 
+  "14536" -> "14541" 
+  "14539" -> "14544" 
+  "14542" -> "14547" 
+  "14545" -> "14550" 
+  "14548" -> "14553" 
+  "14551" -> "14556" 
+  "14554" -> "14559" 
+  "14557" -> "14562" 
+  "14560" -> "14565" 
+  "14563" -> "14568" 
+  "14566" -> "14571" 
+  "14569" -> "14574" 
+  "14572" -> "14577" 
+  "14575" -> "14580" 
+  "14578" -> "14583" 
+  "14581" -> "14586" 
+  "14584" -> "14589" 
+  "14587" -> "14592" 
+  "14590" -> "13901" 
+  "13908" -> "13906" 
+  "13911" -> "13909" 
+  "13914" -> "13912" 
+  "13917" -> "13915" 
+  "13920" -> "13918" 
+  "13923" -> "13921" 
+  "13926" -> "13924" 
+  "13929" -> "13927" 
+  "13932" -> "13930" 
+  "13935" -> "13933" 
+  "13938" -> "13936" 
+  "13941" -> "13939" 
+  "13944" -> "13942" 
+  "13947" -> "13945" 
+  "13950" -> "13948" 
+  "13953" -> "13951" 
+  "13956" -> "13954" 
+  "13959" -> "13957" 
+  "13962" -> "13960" 
+  "13965" -> "13963" 
+  "13968" -> "13966" 
+  "13971" -> "13969" 
+  "13974" -> "13972" 
+  "13977" -> "13975" 
+  "13980" -> "13978" 
   "13983" -> "13981" 
-  "13989" -> "13993" 
-  "13989" -> "13997" 
-  "13997" -> "13994" 
-  "13993" -> "14001" 
-  "13964" -> "13971" 
-  "13964" -> "13978" 
-  "13965" -> "13964" 
-  "13969" -> "13976" 
-  "13976" -> "14001" 
-  "13970" -> "13969" 
-  "13971" -> "13973" 
-  "13973" -> "13970" 
-  "13954" -> "13960" 
+  "13986" -> "13984" 
+  "13989" -> "13987" 
+  "13992" -> "13990" 
+  "13995" -> "13993" 
+  "13998" -> "13996" 
+  "14001" -> "13999" 
+  "14004" -> "14002" 
+  "14007" -> "14005" 
+  "14010" -> "14008" 
+  "14013" -> "14011" 
+  "14016" -> "14014" 
+  "14019" -> "14017" 
+  "14022" -> "14020" 
+  "14025" -> "14023" 
+  "14028" -> "14026" 
+  "14031" -> "14029" 
+  "14034" -> "14032" 
+  "14037" -> "14035" 
+  "14040" -> "14038" 
+  "14043" -> "14041" 
+  "14046" -> "14044" 
+  "14049" -> "14047" 
+  "14052" -> "14050" 
+  "14055" -> "14053" 
+  "14058" -> "14056" 
+  "14061" -> "14059" 
+  "14064" -> "14062" 
+  "14067" -> "14065" 
+  "14070" -> "14068" 
+  "14073" -> "14071" 
+  "14076" -> "14074" 
+  "14079" -> "14077" 
+  "14082" -> "14080" 
+  "14085" -> "14083" 
+  "14088" -> "14086" 
+  "14091" -> "14089" 
+  "14094" -> "14092" 
+  "14097" -> "14095" 
+  "14100" -> "14098" 
+  "14103" -> "14101" 
+  "14106" -> "14104" 
+  "14109" -> "14107" 
+  "14112" -> "14110" 
+  "14115" -> "14113" 
+  "14118" -> "14116" 
+  "14121" -> "14119" 
+  "14124" -> "14122" 
+  "14127" -> "14125" 
+  "14130" -> "14128" 
+  "14133" -> "14131" 
+  "14136" -> "14134" 
+  "14139" -> "14137" 
+  "14142" -> "14140" 
+  "14145" -> "14143" 
+  "14148" -> "14146" 
+  "14151" -> "14149" 
+  "14154" -> "14152" 
+  "14157" -> "14155" 
+  "14160" -> "14158" 
+  "14163" -> "14161" 
+  "14166" -> "14164" 
+  "14169" -> "14167" 
+  "14172" -> "14170" 
+  "14175" -> "14173" 
+  "14178" -> "14176" 
+  "14181" -> "14179" 
+  "14184" -> "14182" 
+  "14187" -> "14185" 
+  "14190" -> "14188" 
+  "14193" -> "14191" 
+  "14196" -> "14194" 
+  "14199" -> "14197" 
+  "14202" -> "14200" 
+  "14205" -> "14203" 
+  "14208" -> "14206" 
+  "14211" -> "14209" 
+  "14214" -> "14212" 
+  "14217" -> "14215" 
+  "14220" -> "14218" 
+  "14223" -> "14221" 
+  "14226" -> "14224" 
+  "14229" -> "14227" 
+  "14232" -> "14230" 
+  "14235" -> "14233" 
+  "14238" -> "14236" 
+  "14241" -> "14239" 
+  "14244" -> "14242" 
+  "14247" -> "14245" 
+  "14250" -> "14248" 
+  "14253" -> "14251" 
+  "14256" -> "14254" 
+  "14259" -> "14257" 
+  "14262" -> "14260" 
+  "14265" -> "14263" 
+  "14268" -> "14266" 
+  "14271" -> "14269" 
+  "14274" -> "14272" 
+  "14277" -> "14275" 
+  "14280" -> "14278" 
+  "14283" -> "14281" 
+  "14286" -> "14284" 
+  "14289" -> "14287" 
+  "14292" -> "14290" 
+  "14295" -> "14293" 
+  "14298" -> "14296" 
+  "14301" -> "14299" 
+  "14304" -> "14302" 
+  "14307" -> "14305" 
+  "14310" -> "14308" 
+  "14313" -> "14311" 
+  "14316" -> "14314" 
+  "14319" -> "14317" 
+  "14322" -> "14320" 
+  "14325" -> "14323" 
+  "14328" -> "14326" 
+  "14331" -> "14329" 
+  "14334" -> "14332" 
+  "14337" -> "14335" 
+  "14340" -> "14338" 
+  "14343" -> "14341" 
+  "14346" -> "14344" 
+  "14349" -> "14347" 
+  "14352" -> "14350" 
+  "14355" -> "14353" 
+  "14358" -> "14356" 
+  "14361" -> "14359" 
+  "14364" -> "14362" 
+  "14367" -> "14365" 
+  "14370" -> "14368" 
+  "14373" -> "14371" 
+  "14376" -> "14374" 
+  "14379" -> "14377" 
+  "14382" -> "14380" 
+  "14385" -> "14383" 
+  "14388" -> "14386" 
+  "14391" -> "14389" 
+  "14394" -> "14392" 
+  "14397" -> "14395" 
+  "14400" -> "14398" 
+  "14403" -> "14401" 
+  "14406" -> "14404" 
+  "14409" -> "14407" 
+  "14412" -> "14410" 
+  "14415" -> "14413" 
+  "14418" -> "14416" 
+  "14421" -> "14419" 
+  "14424" -> "14422" 
+  "14427" -> "14425" 
+  "14430" -> "14428" 
+  "14433" -> "14431" 
+  "14436" -> "14434" 
+  "14439" -> "14437" 
+  "14442" -> "14440" 
+  "14445" -> "14443" 
+  "14448" -> "14446" 
+  "14451" -> "14449" 
+  "14454" -> "14452" 
+  "14457" -> "14455" 
+  "14460" -> "14458" 
+  "14463" -> "14461" 
+  "14466" -> "14464" 
+  "14469" -> "14467" 
+  "14472" -> "14470" 
+  "14475" -> "14473" 
+  "14478" -> "14476" 
+  "14481" -> "14479" 
+  "14484" -> "14482" 
+  "14487" -> "14485" 
+  "14490" -> "14488" 
+  "14493" -> "14491" 
+  "14496" -> "14494" 
+  "14499" -> "14497" 
+  "14502" -> "14500" 
+  "14505" -> "14503" 
+  "14508" -> "14506" 
+  "14511" -> "14509" 
+  "14514" -> "14512" 
+  "14517" -> "14515" 
+  "14520" -> "14518" 
+  "14523" -> "14521" 
+  "14526" -> "14524" 
+  "14529" -> "14527" 
+  "14532" -> "14530" 
+  "14535" -> "14533" 
+  "14538" -> "14536" 
+  "14541" -> "14539" 
+  "14544" -> "14542" 
+  "14547" -> "14545" 
+  "14550" -> "14548" 
+  "14553" -> "14551" 
+  "14556" -> "14554" 
+  "14559" -> "14557" 
+  "14562" -> "14560" 
+  "14565" -> "14563" 
+  "14568" -> "14566" 
+  "14571" -> "14569" 
+  "14574" -> "14572" 
+  "14577" -> "14575" 
+  "14580" -> "14578" 
+  "14583" -> "14581" 
+  "14586" -> "14584" 
+  "14589" -> "14587" 
+  "14592" -> "14590" 
+  "13897" -> "13908" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/26-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/26-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/26-cfg.dot	2023-06-07 19:35:01.347387178 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/26-cfg.dot	2023-06-07 19:35:07.927386526 +0330
@@ -1,5 +1,41 @@
-digraph "FindMethod" {  
-"924" [label = <(METHOD,FindMethod)<SUB>546</SUB>> ]
-"929" [label = <(METHOD_RETURN,ArtMethod*)<SUB>546</SUB>> ]
-  "924" -> "929" 
+digraph "FromReflectedMethod" {  
+"893" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(jlr_method))<SUB>511</SUB>> ]
+"912" [label = <(soa,soa(env))<SUB>512</SUB>> ]
+"914" [label = <(RETURN,return jni::EncodeArtMethod&lt;kEnableIndexIds&gt;(ArtMethod::FromReflectedMethod(soa, jlr_method));,return jni::EncodeArtMethod&lt;kEnableIndexIds&gt;(ArtMethod::FromReflectedMethod(soa, jlr_method));)<SUB>513</SUB>> ]
+"915" [label = <(&lt;operator&gt;.greaterThan,jni::EncodeArtMethod&lt;kEnableIndexIds&gt;(ArtMethod::FromReflectedMethod(soa, jlr_method)))<SUB>513</SUB>> ]
+"916" [label = <(&lt;operator&gt;.lessThan,jni::EncodeArtMethod&lt;kEnableIndexIds)<SUB>513</SUB>> ]
+"921" [label = <(ArtMethod::FromReflectedMethod,ArtMethod::FromReflectedMethod(soa, jlr_method))<SUB>513</SUB>> ]
+"897" [label = <(UNLIKELY,UNLIKELY((jlr_method) == nullptr))<SUB>511</SUB>> ]
+"917" [label = <(&lt;operator&gt;.fieldAccess,jni::EncodeArtMethod)<SUB>513</SUB>> ]
+"922" [label = <(&lt;operator&gt;.fieldAccess,ArtMethod::FromReflectedMethod)<SUB>513</SUB>> ]
+"898" [label = <(&lt;operator&gt;.equals,(jlr_method) == nullptr)<SUB>511</SUB>> ]
+"902" [label = <(CHECK_NON_NULL_ARGUMENT(jlr_method),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;jlr_method == null&quot;))<SUB>511</SUB>> ]
+"909" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(jlr_method),CHECK_NON_NULL_ARGUMENT(jlr_method))<SUB>511</SUB>> ]
+"919" [label = <(FIELD_IDENTIFIER,EncodeArtMethod,EncodeArtMethod)<SUB>513</SUB>> ]
+"924" [label = <(FIELD_IDENTIFIER,FromReflectedMethod,FromReflectedMethod)<SUB>513</SUB>> ]
+"903" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>511</SUB>> ]
+"904" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>511</SUB>> ]
+"906" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>511</SUB>> ]
+"889" [label = <(METHOD,FromReflectedMethod)<SUB>510</SUB>> ]
+"927" [label = <(METHOD_RETURN,jmethodID)<SUB>510</SUB>> ]
+  "893" -> "898" 
+  "893" -> "912" 
+  "912" -> "919" 
+  "914" -> "927" 
+  "915" -> "914" 
+  "916" -> "924" 
+  "921" -> "915" 
+  "897" -> "904" 
+  "897" -> "912" 
+  "917" -> "916" 
+  "922" -> "921" 
+  "898" -> "897" 
+  "902" -> "909" 
+  "909" -> "927" 
+  "919" -> "917" 
+  "924" -> "922" 
+  "903" -> "902" 
+  "904" -> "906" 
+  "906" -> "903" 
+  "889" -> "893" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/260-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/260-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/260-cfg.dot	2023-06-07 19:35:01.567387156 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/260-cfg.dot	2023-06-07 19:35:08.147386503 +0330
@@ -1,5 +1,40 @@
-digraph "ReleasePrimitiveArray" {  
-"14003" [label = <(METHOD,ReleasePrimitiveArray)<SUB>2774</SUB>> ]
-"14010" [label = <(METHOD_RETURN,void)<SUB>2774</SUB>> ]
-  "14003" -> "14010" 
+digraph "GetJniNativeInterface" {  
+"14597" [label = <(RETURN,return Runtime::Current()-&gt;GetJniIdType() == JniIdType::kPointer\012 ? &amp;JniNativeInterfaceFunctions&lt;false&gt;::gJniNativeInterface\012 : &amp;JniNativeInterfaceFunctions&lt;true&gt;::gJniNativeInterface;,return Runtime::Current()-&gt;GetJniIdType() == JniIdType::kPointer\012 ? &amp;JniNativeInterfaceFunctions&lt;false&gt;::gJniNativeInterface\012 : &amp;JniNativeInterfaceFunctions&lt;true&gt;::gJniNativeInterface;)<SUB>2966</SUB>> ]
+"14598" [label = <(&lt;operator&gt;.conditional,Runtime::Current()-&gt;GetJniIdType() == JniIdType::kPointer\012 ? &amp;JniNativeInterfaceFunctions&lt;false&gt;::gJniNativeInterface\012 : &amp;JniNativeInterfaceFunctions&lt;true&gt;::gJniNativeInterface)<SUB>2966</SUB>> ]
+"14599" [label = <(&lt;operator&gt;.equals,Runtime::Current()-&gt;GetJniIdType() == JniIdType::kPointer)<SUB>2966</SUB>> ]
+"14610" [label = <(&lt;operator&gt;.addressOf,&amp;JniNativeInterfaceFunctions&lt;false&gt;::gJniNativeInterface)<SUB>2967</SUB>> ]
+"14614" [label = <(&lt;operator&gt;.addressOf,&amp;JniNativeInterfaceFunctions&lt;true&gt;::gJniNativeInterface)<SUB>2968</SUB>> ]
+"14600" [label = <(GetJniIdType,Runtime::Current()-&gt;GetJniIdType())<SUB>2966</SUB>> ]
+"14607" [label = <(&lt;operator&gt;.fieldAccess,JniIdType::kPointer)<SUB>2966</SUB>> ]
+"14611" [label = <(&lt;operator&gt;.fieldAccess,JniNativeInterfaceFunctions&lt;false&gt;::gJniNativeInterface)<SUB>2967</SUB>> ]
+"14615" [label = <(&lt;operator&gt;.fieldAccess,JniNativeInterfaceFunctions&lt;true&gt;::gJniNativeInterface)<SUB>2968</SUB>> ]
+"14601" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetJniIdType)<SUB>2966</SUB>> ]
+"14609" [label = <(FIELD_IDENTIFIER,kPointer,kPointer)<SUB>2966</SUB>> ]
+"14613" [label = <(FIELD_IDENTIFIER,gJniNativeInterface,gJniNativeInterface)<SUB>2967</SUB>> ]
+"14617" [label = <(FIELD_IDENTIFIER,gJniNativeInterface,gJniNativeInterface)<SUB>2968</SUB>> ]
+"14602" [label = <(Runtime::Current,Runtime::Current())<SUB>2966</SUB>> ]
+"14606" [label = <(FIELD_IDENTIFIER,GetJniIdType,GetJniIdType)<SUB>2966</SUB>> ]
+"14603" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>2966</SUB>> ]
+"14605" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>2966</SUB>> ]
+"14595" [label = <(METHOD,GetJniNativeInterface)<SUB>2962</SUB>> ]
+"14618" [label = <(METHOD_RETURN,JNINativeInterface)<SUB>2962</SUB>> ]
+  "14597" -> "14618" 
+  "14598" -> "14597" 
+  "14599" -> "14613" 
+  "14599" -> "14617" 
+  "14610" -> "14598" 
+  "14614" -> "14598" 
+  "14600" -> "14609" 
+  "14607" -> "14599" 
+  "14611" -> "14610" 
+  "14615" -> "14614" 
+  "14601" -> "14600" 
+  "14609" -> "14607" 
+  "14613" -> "14611" 
+  "14617" -> "14615" 
+  "14602" -> "14606" 
+  "14606" -> "14601" 
+  "14603" -> "14602" 
+  "14605" -> "14603" 
+  "14595" -> "14605" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/261-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/261-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/261-cfg.dot	2023-06-07 19:35:01.567387156 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/261-cfg.dot	2023-06-07 19:35:08.147386503 +0330
@@ -1,94 +1,5 @@
-digraph "GetPrimitiveArrayRegion" {  
-"14049" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>2819</SUB>> ]
-"14067" [label = <(soa,soa(env))<SUB>2820</SUB>> ]
-"14070" [label = <(&lt;operator&gt;.assignment,array = DecodeAndCheckArrayType&lt;JArrayT, ElementT, ArtArrayT&gt;(\012        soa, java_array, &quot;GetPrimitiveArrayRegion&quot;, &quot;get region of&quot;))<SUB>2821</SUB>> ]
-"14072" [label = <(DecodeAndCheckArrayType&lt;JArrayT,ElementT,ArtArrayT&gt;,DecodeAndCheckArrayType&lt;JArrayT, ElementT, ArtArrayT&gt;(\012        soa, java_array, &quot;GetPrimitiveArrayRegion&quot;, &quot;get region of&quot;))<SUB>2821</SUB>> ]
-"14078" [label = <(&lt;operator&gt;.notEquals,array != nullptr)<SUB>2823</SUB>> ]
-"14053" [label = <(UNLIKELY,UNLIKELY((java_array) == nullptr))<SUB>2819</SUB>> ]
-"14083" [label = <(&lt;operator&gt;.logicalOr,start &lt; 0 || length &lt; 0 || length &gt; array-&gt;GetLength() - start)<SUB>2824</SUB>> ]
-"14054" [label = <(&lt;operator&gt;.equals,(java_array) == nullptr)<SUB>2819</SUB>> ]
-"14058" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_array == null&quot;))<SUB>2819</SUB>> ]
-"14065" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>2819</SUB>> ]
-"14084" [label = <(&lt;operator&gt;.logicalOr,start &lt; 0 || length &lt; 0)<SUB>2824</SUB>> ]
-"14091" [label = <(&lt;operator&gt;.greaterThan,length &gt; array-&gt;GetLength() - start)<SUB>2824</SUB>> ]
-"14100" [label = <(ThrowAIOOBE,ThrowAIOOBE(soa, array, start, length, &quot;src&quot;))<SUB>2825</SUB>> ]
-"14059" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2819</SUB>> ]
-"14085" [label = <(&lt;operator&gt;.lessThan,start &lt; 0)<SUB>2824</SUB>> ]
-"14088" [label = <(&lt;operator&gt;.lessThan,length &lt; 0)<SUB>2824</SUB>> ]
-"14093" [label = <(&lt;operator&gt;.subtraction,array-&gt;GetLength() - start)<SUB>2824</SUB>> ]
-"14108" [label = <(CHECK_NON_NULL_MEMCPY_ARGUMENT,CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf))<SUB>2827</SUB>> ]
-"14131" [label = <(&lt;operator&gt;.assignment,* data = array-&gt;GetData())<SUB>2828</SUB>> ]
-"14137" [label = <(memcpy,memcpy(buf, data + start, length * sizeof(ElementT)))<SUB>2829</SUB>> ]
-"14060" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2819</SUB>> ]
-"14062" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2819</SUB>> ]
-"14094" [label = <(GetLength,array-&gt;GetLength())<SUB>2824</SUB>> ]
-"14133" [label = <(GetData,array-&gt;GetData())<SUB>2828</SUB>> ]
-"14139" [label = <(&lt;operator&gt;.addition,data + start)<SUB>2829</SUB>> ]
-"14142" [label = <(&lt;operator&gt;.multiplication,length * sizeof(ElementT))<SUB>2829</SUB>> ]
-"14095" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetLength)<SUB>2824</SUB>> ]
-"14134" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetData)<SUB>2828</SUB>> ]
-"14144" [label = <(&lt;operator&gt;.sizeOf,sizeof(ElementT))<SUB>2829</SUB>> ]
-"14097" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>2824</SUB>> ]
-"14113" [label = <(UNLIKELY,UNLIKELY((length) != 0 &amp;&amp; (buf) == nullptr))<SUB>2827</SUB>> ]
-"14136" [label = <(FIELD_IDENTIFIER,GetData,GetData)<SUB>2828</SUB>> ]
-"14114" [label = <(&lt;operator&gt;.logicalAnd,(length) != 0 &amp;&amp; (buf) == nullptr)<SUB>2827</SUB>> ]
-"14122" [label = <(CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;buf == null&quot;))<SUB>2827</SUB>> ]
-"14129" [label = <(RETURN,CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf),CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf))<SUB>2827</SUB>> ]
-"14115" [label = <(&lt;operator&gt;.notEquals,(length) != 0)<SUB>2827</SUB>> ]
-"14118" [label = <(&lt;operator&gt;.equals,(buf) == nullptr)<SUB>2827</SUB>> ]
-"14123" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2827</SUB>> ]
-"14124" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2827</SUB>> ]
-"14126" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2827</SUB>> ]
-"14042" [label = <(METHOD,GetPrimitiveArrayRegion)<SUB>2817</SUB>> ]
-"14146" [label = <(METHOD_RETURN,void)<SUB>2817</SUB>> ]
-  "14049" -> "14054" 
-  "14049" -> "14067" 
-  "14067" -> "14072" 
-  "14070" -> "14078" 
-  "14072" -> "14070" 
-  "14078" -> "14146" 
-  "14078" -> "14085" 
-  "14053" -> "14060" 
-  "14053" -> "14067" 
-  "14083" -> "14100" 
-  "14083" -> "14108" 
-  "14054" -> "14053" 
-  "14058" -> "14065" 
-  "14065" -> "14146" 
-  "14084" -> "14083" 
-  "14084" -> "14097" 
-  "14091" -> "14083" 
-  "14100" -> "14146" 
-  "14059" -> "14058" 
-  "14085" -> "14084" 
-  "14085" -> "14088" 
-  "14088" -> "14084" 
-  "14093" -> "14091" 
-  "14108" -> "14115" 
-  "14108" -> "14136" 
-  "14131" -> "14139" 
-  "14137" -> "14146" 
-  "14060" -> "14062" 
-  "14062" -> "14059" 
-  "14094" -> "14093" 
-  "14133" -> "14131" 
-  "14139" -> "14144" 
-  "14142" -> "14137" 
-  "14095" -> "14094" 
-  "14134" -> "14133" 
-  "14144" -> "14142" 
-  "14097" -> "14095" 
-  "14113" -> "14124" 
-  "14113" -> "14136" 
-  "14136" -> "14134" 
-  "14114" -> "14113" 
-  "14122" -> "14129" 
-  "14129" -> "14146" 
-  "14115" -> "14114" 
-  "14115" -> "14118" 
-  "14118" -> "14114" 
-  "14123" -> "14122" 
-  "14124" -> "14126" 
-  "14126" -> "14123" 
-  "14042" -> "14049" 
+digraph "gJniSleepForeverStub" {  
+"14620" [label = <(METHOD,gJniSleepForeverStub)<SUB>2971</SUB>> ]
+"14622" [label = <(METHOD_RETURN,void)<SUB>2971</SUB>> ]
+  "14620" -> "14622" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/262-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/262-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/262-cfg.dot	2023-06-07 19:35:01.567387156 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/262-cfg.dot	2023-06-07 19:35:08.147386503 +0330
@@ -1,94 +1,13 @@
-digraph "SetPrimitiveArrayRegion" {  
-"14155" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>2837</SUB>> ]
-"14173" [label = <(soa,soa(env))<SUB>2838</SUB>> ]
-"14176" [label = <(&lt;operator&gt;.assignment,array = DecodeAndCheckArrayType&lt;JArrayT, ElementT, ArtArrayT&gt;(\012        soa, java_array, &quot;SetPrimitiveArrayRegion&quot;, &quot;set region of&quot;))<SUB>2839</SUB>> ]
-"14178" [label = <(DecodeAndCheckArrayType&lt;JArrayT,ElementT,ArtArrayT&gt;,DecodeAndCheckArrayType&lt;JArrayT, ElementT, ArtArrayT&gt;(\012        soa, java_array, &quot;SetPrimitiveArrayRegion&quot;, &quot;set region of&quot;))<SUB>2839</SUB>> ]
-"14184" [label = <(&lt;operator&gt;.notEquals,array != nullptr)<SUB>2841</SUB>> ]
-"14159" [label = <(UNLIKELY,UNLIKELY((java_array) == nullptr))<SUB>2837</SUB>> ]
-"14189" [label = <(&lt;operator&gt;.logicalOr,start &lt; 0 || length &lt; 0 || length &gt; array-&gt;GetLength() - start)<SUB>2842</SUB>> ]
-"14160" [label = <(&lt;operator&gt;.equals,(java_array) == nullptr)<SUB>2837</SUB>> ]
-"14164" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_array == null&quot;))<SUB>2837</SUB>> ]
-"14171" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>2837</SUB>> ]
-"14190" [label = <(&lt;operator&gt;.logicalOr,start &lt; 0 || length &lt; 0)<SUB>2842</SUB>> ]
-"14197" [label = <(&lt;operator&gt;.greaterThan,length &gt; array-&gt;GetLength() - start)<SUB>2842</SUB>> ]
-"14206" [label = <(ThrowAIOOBE,ThrowAIOOBE(soa, array, start, length, &quot;dst&quot;))<SUB>2843</SUB>> ]
-"14165" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2837</SUB>> ]
-"14191" [label = <(&lt;operator&gt;.lessThan,start &lt; 0)<SUB>2842</SUB>> ]
-"14194" [label = <(&lt;operator&gt;.lessThan,length &lt; 0)<SUB>2842</SUB>> ]
-"14199" [label = <(&lt;operator&gt;.subtraction,array-&gt;GetLength() - start)<SUB>2842</SUB>> ]
-"14214" [label = <(CHECK_NON_NULL_MEMCPY_ARGUMENT,CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf))<SUB>2845</SUB>> ]
-"14237" [label = <(&lt;operator&gt;.assignment,* data = array-&gt;GetData())<SUB>2846</SUB>> ]
-"14243" [label = <(memcpy,memcpy(data + start, buf, length * sizeof(ElementT)))<SUB>2847</SUB>> ]
-"14166" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2837</SUB>> ]
-"14168" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2837</SUB>> ]
-"14200" [label = <(GetLength,array-&gt;GetLength())<SUB>2842</SUB>> ]
-"14239" [label = <(GetData,array-&gt;GetData())<SUB>2846</SUB>> ]
-"14244" [label = <(&lt;operator&gt;.addition,data + start)<SUB>2847</SUB>> ]
-"14248" [label = <(&lt;operator&gt;.multiplication,length * sizeof(ElementT))<SUB>2847</SUB>> ]
-"14201" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetLength)<SUB>2842</SUB>> ]
-"14240" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetData)<SUB>2846</SUB>> ]
-"14250" [label = <(&lt;operator&gt;.sizeOf,sizeof(ElementT))<SUB>2847</SUB>> ]
-"14203" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>2842</SUB>> ]
-"14219" [label = <(UNLIKELY,UNLIKELY((length) != 0 &amp;&amp; (buf) == nullptr))<SUB>2845</SUB>> ]
-"14242" [label = <(FIELD_IDENTIFIER,GetData,GetData)<SUB>2846</SUB>> ]
-"14220" [label = <(&lt;operator&gt;.logicalAnd,(length) != 0 &amp;&amp; (buf) == nullptr)<SUB>2845</SUB>> ]
-"14228" [label = <(CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;buf == null&quot;))<SUB>2845</SUB>> ]
-"14235" [label = <(RETURN,CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf),CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf))<SUB>2845</SUB>> ]
-"14221" [label = <(&lt;operator&gt;.notEquals,(length) != 0)<SUB>2845</SUB>> ]
-"14224" [label = <(&lt;operator&gt;.equals,(buf) == nullptr)<SUB>2845</SUB>> ]
-"14229" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2845</SUB>> ]
-"14230" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2845</SUB>> ]
-"14232" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2845</SUB>> ]
-"14148" [label = <(METHOD,SetPrimitiveArrayRegion)<SUB>2835</SUB>> ]
-"14252" [label = <(METHOD_RETURN,void)<SUB>2835</SUB>> ]
-  "14155" -> "14160" 
-  "14155" -> "14173" 
-  "14173" -> "14178" 
-  "14176" -> "14184" 
-  "14178" -> "14176" 
-  "14184" -> "14252" 
-  "14184" -> "14191" 
-  "14159" -> "14166" 
-  "14159" -> "14173" 
-  "14189" -> "14206" 
-  "14189" -> "14214" 
-  "14160" -> "14159" 
-  "14164" -> "14171" 
-  "14171" -> "14252" 
-  "14190" -> "14189" 
-  "14190" -> "14203" 
-  "14197" -> "14189" 
-  "14206" -> "14252" 
-  "14165" -> "14164" 
-  "14191" -> "14190" 
-  "14191" -> "14194" 
-  "14194" -> "14190" 
-  "14199" -> "14197" 
-  "14214" -> "14221" 
-  "14214" -> "14242" 
-  "14237" -> "14244" 
-  "14243" -> "14252" 
-  "14166" -> "14168" 
-  "14168" -> "14165" 
-  "14200" -> "14199" 
-  "14239" -> "14237" 
-  "14244" -> "14250" 
-  "14248" -> "14243" 
-  "14201" -> "14200" 
-  "14240" -> "14239" 
-  "14250" -> "14248" 
-  "14203" -> "14201" 
-  "14219" -> "14230" 
-  "14219" -> "14242" 
-  "14242" -> "14240" 
-  "14220" -> "14219" 
-  "14228" -> "14235" 
-  "14235" -> "14252" 
-  "14221" -> "14220" 
-  "14221" -> "14224" 
-  "14224" -> "14220" 
-  "14229" -> "14228" 
-  "14230" -> "14232" 
-  "14232" -> "14229" 
-  "14148" -> "14155" 
+digraph "GetRuntimeShutdownNativeInterface" {  
+"14862" [label = <(RETURN,return reinterpret_cast&lt;JNINativeInterface*&gt;(&amp;gJniSleepForeverStub);,return reinterpret_cast&lt;JNINativeInterface*&gt;(&amp;gJniSleepForeverStub);)<SUB>3208</SUB>> ]
+"14863" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;JNINativeInterface*&gt;(&amp;gJniSleepForeverStub))<SUB>3208</SUB>> ]
+"14864" [label = <(UNKNOWN,JNINativeInterface*,JNINativeInterface*)<SUB>3208</SUB>> ]
+"14865" [label = <(&lt;operator&gt;.addressOf,&amp;gJniSleepForeverStub)<SUB>3208</SUB>> ]
+"14860" [label = <(METHOD,GetRuntimeShutdownNativeInterface)<SUB>3207</SUB>> ]
+"14867" [label = <(METHOD_RETURN,JNINativeInterface)<SUB>3207</SUB>> ]
+  "14862" -> "14867" 
+  "14863" -> "14862" 
+  "14864" -> "14865" 
+  "14865" -> "14863" 
+  "14860" -> "14864" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/263-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/263-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/263-cfg.dot	2023-06-07 19:35:01.617387150 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/263-cfg.dot	2023-06-07 19:35:08.147386503 +0330
@@ -1,925 +1,39 @@
-digraph "&lt;clinit&gt;" {  
-"14260" [label = <(&lt;operator&gt;.assignment,gJniNativeInterface = {\012 nullptr, // reserved0.\012 nullptr, // reserved1.\012 nullptr, // reserved2.\012 nullptr, // reserved3.\012 JNIImpl::GetVersion,\012 JNIImpl::DefineClass,\012 JNIImpl::FindClass,\012 JNIImpl::FromReflectedMethod,\012 JNIImpl::FromReflectedField,\012 JNIImpl::ToReflectedMethod,\012 JNIImpl::GetSuperclass,\012 JNIImpl::IsAssignableFrom,\012 JNIImpl::ToReflectedField,\012 JNIImpl::Throw,\012 JNIImpl::ThrowNew,\012 JNIImpl::ExceptionOccurred,\012 JNIImpl::ExceptionDescribe,\012 JNIImpl::ExceptionClear,\012 JNIImpl::FatalError,\012 JNIImpl::PushLocalFrame,\012 JNIImpl::PopLocalFrame,\012 JNIImpl::NewGlobalRef,\012 JNIImpl::DeleteGlobalRef,\012 JNIImpl::DeleteLocalRef,\012 JNIImpl::IsSameObject,\012 JNIImpl::NewLocalRef,\012 JNIImpl::EnsureLocalCapacity,\012 JNIImpl::AllocObject,\012 JNIImpl::NewObject,\012 JNIImpl::NewObjectV,\012 JNIImpl::NewObjectA,\012 JNIImpl::GetObjectClass,\012 JNIImpl::IsInstanceOf,\012 JNIImpl::GetMethodID,\012 JNIImpl::CallObjectMethod,\012 JNIImpl::CallObjectMethodV,\012 JNIImpl::CallObjectMethodA,\012 JNIImpl::CallBooleanMethod,\012 JNIImpl::CallBooleanMethodV,\012 JNIImpl::CallBooleanMethodA,\012 JNIImpl::CallByteMethod,\012 JNIImpl::CallByteMethodV,\012 JNIImpl::CallByteMethodA,\012 JNIImpl::CallCharMethod,\012 JNIImpl::CallCharMethodV,\012 JNIImpl::CallCharMethodA,\012 JNIImpl::CallShortMethod,\012 JNIImpl::CallShortMethodV,\012 JNIImpl::CallShortMethodA,\012 JNIImpl::CallIntMethod,\012 JNIImpl::CallIntMethodV,\012 JNIImpl::CallIntMethodA,\012 JNIImpl::CallLongMethod,\012 JNIImpl::CallLongMethodV,\012 JNIImpl::CallLongMethodA,\012 JNIImpl::CallFloatMethod,\012 JNIImpl::CallFloatMethodV,\012 JNIImpl::CallFloatMethodA,\012 JNIImpl::CallDoubleMethod,\012 JNIImpl::CallDoubleMethodV,\012 JNIImpl::CallDoubleMethodA,\012 JNIImpl::CallVoidMethod,\012 JNIImpl::CallVoidMethodV,\012 JNIImpl::CallVoidMethodA,\012 JNIImpl::CallNonvirtualObjectMethod,\012 JNIImpl::CallNonvirtualObjectMethodV,\012 JNIImpl::CallNonvirtualObjectMethodA,\012 JNIImpl::CallNonvirtualBooleanMethod,\012 JNIImpl::CallNonvirtualBooleanMethodV,\012 JNIImpl::CallNonvirtualBooleanMethodA,\012 JNIImpl::CallNonvirtualByteMethod,\012 JNIImpl::CallNonvirtualByteMethodV,\012 JNIImpl::CallNonvirtualByteMethodA,\012 JNIImpl::CallNonvirtualCharMethod,\012 JNIImpl::CallNonvirtualCharMethodV,\012 JNIImpl::CallNonvirtualCharMethodA,\012 JNIImpl::CallNonvirtualShortMethod,\012 JNIImpl::CallNonvirtualShortMethodV,\012 JNIImpl::CallNonvirtualShortMethodA,\012 JNIImpl::CallNonvirtualIntMethod,\012 JNIImpl::CallNonvirtualIntMethodV,\012 JNIImpl::CallNonvirtualIntMethodA,\012 JNIImpl::CallNonvirtualLongMethod,\012 JNIImpl::CallNonvirtualLongMethodV,\012 JNIImpl::CallNonvirtualLongMethodA,\012 JNIImpl::CallNonvirtualFloatMethod,\012 JNIImpl::CallNonvirtualFloatMethodV,\012 JNIImpl::CallNonvirtualFloatMethodA,\012 JNIImpl::CallNonvirtualDoubleMethod,\012 JNIImpl::CallNonvirtualDoubleMethodV,\012 JNIImpl::CallNonvirtualDoubleMethodA,\012 JNIImpl::CallNonvirtualVoidMethod,\012 JNIImpl::CallNonvirtualVoidMethodV,\012 JNIImpl::CallNonvirtualVoidMethodA,\012 JNIImpl::GetFieldID,\012 JNIImpl::GetObjectField,\012 JNIImpl::GetBooleanField,\012 JNIImpl::GetByteField,\012 JNIImpl::GetCharField,\012 JNIImpl::GetShortField,\012 JNIImpl::GetIntField,\012 JNIImpl::GetLongField,\012 JNIImpl::GetFloatField,\012 JNIImpl::GetDoubleField,\012 JNIImpl::SetObjectField,\012 JNIImpl::SetBooleanField,\012 JNIImpl::SetByteField,\012 JNIImpl::SetCharField,\012 JNIImpl::SetShortField,\012 JNIImpl::SetIntField,\012 JNIImpl::SetLongField,\012 JNIImpl::SetFloatField,\012 JNIImpl::SetDoubleField,\012 JNIImpl::GetStaticMethodID,\012 JNIImpl::CallStaticObjectMethod,\012 JNIImpl::CallStaticObjectMethodV,\012 JNIImpl::CallStaticObjectMethodA,\012 JNIImpl::CallStaticBooleanMethod,\012 JNIImpl::CallStaticBooleanMethodV,\012 JNIImpl::CallStaticBooleanMethodA,\012 JNIImpl::CallStaticByteMethod,\012 JNIImpl::CallStaticByteMethodV,\012 JNIImpl::CallStaticByteMethodA,\012 JNIImpl::CallStaticCharMethod,\012 JNIImpl::CallStaticCharMethodV,\012 JNIImpl::CallStaticCharMethodA,\012 JNIImpl::CallStaticShortMethod,\012 JNIImpl::CallStaticShortMethodV,\012 JNIImpl::CallStaticShortMethodA,\012 JNIImpl::CallStaticIntMethod,\012 JNIImpl::CallStaticIntMethodV,\012 JNIImpl::CallStaticIntMethodA,\012 JNIImpl::CallStaticLongMethod,\012 JNIImpl::CallStaticLongMethodV,\012 JNIImpl::CallStaticLongMethodA,\012 JNIImpl::CallStaticFloatMethod,\012 JNIImpl::CallStaticFloatMethodV,\012 JNIImpl::CallStaticFloatMethodA,\012 JNIImpl::CallStaticDoubleMethod,\012 JNIImpl::CallStaticDoubleMethodV,\012 JNIImpl::CallStaticDoubleMethodA,\012 JNIImpl::CallStaticVoidMethod,\012 JNIImpl::CallStaticVoidMethodV,\012 JNIImpl::CallStaticVoidMethodA,\012 JNIImpl::GetStaticFieldID,\012 JNIImpl::GetStaticObjectField,\012 JNIImpl::GetStaticBooleanField,\012 JNIImpl::GetStaticByteField,\012 JNIImpl::GetStaticCharField,\012 JNIImpl::GetStaticShortField,\012 JNIImpl::GetStaticIntField,\012 JNIImpl::GetStaticLongField,\012 JNIImpl::GetStaticFloatField,\012 JNIImpl::GetStaticDoubleField,\012 JNIImpl::SetStaticObjectField,\012 JNIImpl::SetStaticBooleanField,\012 JNIImpl::SetStaticByteField,\012 JNIImpl::SetStaticCharField,\012 JNIImpl::SetStaticShortField,\012 JNIImpl::SetStaticIntField,\012 JNIImpl::SetStaticLongField,\012 JNIImpl::SetStaticFloatField,\012 JNIImpl::SetStaticDoubleField,\012 JNIImpl::NewString,\012 JNIImpl::GetStringLength,\012 JNIImpl::GetStringChars,\012 JNIImpl::ReleaseStringChars,\012 JNIImpl::NewStringUTF,\012 JNIImpl::GetStringUTFLength,\012 JNIImpl::GetStringUTFChars,\012 JNIImpl::ReleaseStringUTFChars,\012 JNIImpl::GetArrayLength,\012 JNIImpl::NewObjectArray,\012 JNIImpl::GetObjectArrayElement,\012 JNIImpl::SetObjectArrayElement,\012 JNIImpl::NewBooleanArray,\012 JNIImpl::NewByteArray,\012 JNIImpl::NewCharArray,\012 JNIImpl::NewShortArray,\012 JNIImpl::NewIntArray,\012 JNIImpl::NewLongArray,\012 JNIImpl::NewFloatArray,\012 JNIImpl::NewDoubleArray,\012 JNIImpl::GetBooleanArrayElements,\012 JNIImpl::GetByteArrayElements,\012 JNIImpl::GetCharArrayElements,\012 JNIImpl::GetShortArrayElements,\012 JNIImpl::GetIntArrayElements,\012 JNIImpl::GetLongArrayElements,\012 JNIImpl::GetFloatArrayElements,\012 JNIImpl::GetDoubleArrayElements,\012 JNIImpl::ReleaseBooleanArrayElements,\012 JNIImpl::ReleaseByteArrayElements,\012 JNIImpl::ReleaseCharArrayElements,\012 JNIImpl::ReleaseShortArrayElements,\012 JNIImpl::ReleaseIntArrayElements,\012 JNIImpl::ReleaseLongArrayElements,\012 JNIImpl::ReleaseFloatArrayElements,\012 JNIImpl::ReleaseDoubleArrayElements,\012 JNIImpl::GetBooleanArrayRegion,\012 JNIImpl::GetByteArrayRegion,\012 JNIImpl::GetCharArrayRegion,\012 JNIImpl::GetShortArrayRegion,\012 JNIImpl::GetIntArrayRegion,\012 JNIImpl::GetLongArrayRegion,\012 JNIImpl::GetFloatArrayRegion,\012 JNIImpl::GetDoubleArrayRegion,\012 JNIImpl::SetBooleanArrayRegion,\012 JNIImpl::SetByteArrayRegion,\012 JNIImpl::SetCharArrayRegion,\012 JNIImpl::SetShortArrayRegion,\012 JNIImpl::SetIntArrayRegion,\012 JNIImpl::SetLongArrayRegion,\012 JNIImpl::SetFloatArrayRegion,\012 JNIImpl::SetDoubleArrayRegion,\012 JNIImpl::RegisterNatives,\012 JNIImpl::UnregisterNatives,\012 JNIImpl::MonitorEnter,\012 JNIImpl::MonitorExit,\012 JNIImpl::GetJavaVM,\012 JNIImpl::GetStringRegion,\012 JNIImpl::GetStringUTFRegion,\012 JNIImpl::GetPrimitiveArrayCritical,\012 JNIImpl::ReleasePrimitiveArrayCritical,\012 JNIImpl::GetStringCritical,\012 JNIImpl::ReleaseStringCritical,\012 JNIImpl::NewWeakGlobalRef,\012 JNIImpl::DeleteWeakGlobalRef,\012 JNIImpl::ExceptionCheck,\012 JNIImpl::NewDirectByteBuffer,\012 JNIImpl::GetDirectBufferAddress,\012 JNIImpl::GetDirectBufferCapacity,\012 JNIImpl::GetObjectRefType,\012 })<SUB>2856</SUB>> ]
-"14262" [label = <(&lt;operator&gt;.arrayInitializer,{\012 nullptr, // reserved0.\012 nullptr, // reserved1.\012 nullptr, // reserved2.\012 nullptr, // reserved3.\012 JNIImpl::GetVersion,\012 JNIImpl::DefineClass,\012 JNIImpl::FindClass,\012 JNIImpl::FromReflectedMethod,\012 JNIImpl::FromReflectedField,\012 JNIImpl::ToReflectedMethod,\012 JNIImpl::GetSuperclass,\012 JNIImpl::IsAssignableFrom,\012 JNIImpl::ToReflectedField,\012 JNIImpl::Throw,\012 JNIImpl::ThrowNew,\012 JNIImpl::ExceptionOccurred,\012 JNIImpl::ExceptionDescribe,\012 JNIImpl::ExceptionClear,\012 JNIImpl::FatalError,\012 JNIImpl::PushLocalFrame,\012 JNIImpl::PopLocalFrame,\012 JNIImpl::NewGlobalRef,\012 JNIImpl::DeleteGlobalRef,\012 JNIImpl::DeleteLocalRef,\012 JNIImpl::IsSameObject,\012 JNIImpl::NewLocalRef,\012 JNIImpl::EnsureLocalCapacity,\012 JNIImpl::AllocObject,\012 JNIImpl::NewObject,\012 JNIImpl::NewObjectV,\012 JNIImpl::NewObjectA,\012 JNIImpl::GetObjectClass,\012 JNIImpl::IsInstanceOf,\012 JNIImpl::GetMethodID,\012 JNIImpl::CallObjectMethod,\012 JNIImpl::CallObjectMethodV,\012 JNIImpl::CallObjectMethodA,\012 JNIImpl::CallBooleanMethod,\012 JNIImpl::CallBooleanMethodV,\012 JNIImpl::CallBooleanMethodA,\012 JNIImpl::CallByteMethod,\012 JNIImpl::CallByteMethodV,\012 JNIImpl::CallByteMethodA,\012 JNIImpl::CallCharMethod,\012 JNIImpl::CallCharMethodV,\012 JNIImpl::CallCharMethodA,\012 JNIImpl::CallShortMethod,\012 JNIImpl::CallShortMethodV,\012 JNIImpl::CallShortMethodA,\012 JNIImpl::CallIntMethod,\012 JNIImpl::CallIntMethodV,\012 JNIImpl::CallIntMethodA,\012 JNIImpl::CallLongMethod,\012 JNIImpl::CallLongMethodV,\012 JNIImpl::CallLongMethodA,\012 JNIImpl::CallFloatMethod,\012 JNIImpl::CallFloatMethodV,\012 JNIImpl::CallFloatMethodA,\012 JNIImpl::CallDoubleMethod,\012 JNIImpl::CallDoubleMethodV,\012 JNIImpl::CallDoubleMethodA,\012 JNIImpl::CallVoidMethod,\012 JNIImpl::CallVoidMethodV,\012 JNIImpl::CallVoidMethodA,\012 JNIImpl::CallNonvirtualObjectMethod,\012 JNIImpl::CallNonvirtualObjectMethodV,\012 JNIImpl::CallNonvirtualObjectMethodA,\012 JNIImpl::CallNonvirtualBooleanMethod,\012 JNIImpl::CallNonvirtualBooleanMethodV,\012 JNIImpl::CallNonvirtualBooleanMethodA,\012 JNIImpl::CallNonvirtualByteMethod,\012 JNIImpl::CallNonvirtualByteMethodV,\012 JNIImpl::CallNonvirtualByteMethodA,\012 JNIImpl::CallNonvirtualCharMethod,\012 JNIImpl::CallNonvirtualCharMethodV,\012 JNIImpl::CallNonvirtualCharMethodA,\012 JNIImpl::CallNonvirtualShortMethod,\012 JNIImpl::CallNonvirtualShortMethodV,\012 JNIImpl::CallNonvirtualShortMethodA,\012 JNIImpl::CallNonvirtualIntMethod,\012 JNIImpl::CallNonvirtualIntMethodV,\012 JNIImpl::CallNonvirtualIntMethodA,\012 JNIImpl::CallNonvirtualLongMethod,\012 JNIImpl::CallNonvirtualLongMethodV,\012 JNIImpl::CallNonvirtualLongMethodA,\012 JNIImpl::CallNonvirtualFloatMethod,\012 JNIImpl::CallNonvirtualFloatMethodV,\012 JNIImpl::CallNonvirtualFloatMethodA,\012 JNIImpl::CallNonvirtualDoubleMethod,\012 JNIImpl::CallNonvirtualDoubleMethodV,\012 JNIImpl::CallNonvirtualDoubleMethodA,\012 JNIImpl::CallNonvirtualVoidMethod,\012 JNIImpl::CallNonvirtualVoidMethodV,\012 JNIImpl::CallNonvirtualVoidMethodA,\012 JNIImpl::GetFieldID,\012 JNIImpl::GetObjectField,\012 JNIImpl::GetBooleanField,\012 JNIImpl::GetByteField,\012 JNIImpl::GetCharField,\012 JNIImpl::GetShortField,\012 JNIImpl::GetIntField,\012 JNIImpl::GetLongField,\012 JNIImpl::GetFloatField,\012 JNIImpl::GetDoubleField,\012 JNIImpl::SetObjectField,\012 JNIImpl::SetBooleanField,\012 JNIImpl::SetByteField,\012 JNIImpl::SetCharField,\012 JNIImpl::SetShortField,\012 JNIImpl::SetIntField,\012 JNIImpl::SetLongField,\012 JNIImpl::SetFloatField,\012 JNIImpl::SetDoubleField,\012 JNIImpl::GetStaticMethodID,\012 JNIImpl::CallStaticObjectMethod,\012 JNIImpl::CallStaticObjectMethodV,\012 JNIImpl::CallStaticObjectMethodA,\012 JNIImpl::CallStaticBooleanMethod,\012 JNIImpl::CallStaticBooleanMethodV,\012 JNIImpl::CallStaticBooleanMethodA,\012 JNIImpl::CallStaticByteMethod,\012 JNIImpl::CallStaticByteMethodV,\012 JNIImpl::CallStaticByteMethodA,\012 JNIImpl::CallStaticCharMethod,\012 JNIImpl::CallStaticCharMethodV,\012 JNIImpl::CallStaticCharMethodA,\012 JNIImpl::CallStaticShortMethod,\012 JNIImpl::CallStaticShortMethodV,\012 JNIImpl::CallStaticShortMethodA,\012 JNIImpl::CallStaticIntMethod,\012 JNIImpl::CallStaticIntMethodV,\012 JNIImpl::CallStaticIntMethodA,\012 JNIImpl::CallStaticLongMethod,\012 JNIImpl::CallStaticLongMethodV,\012 JNIImpl::CallStaticLongMethodA,\012 JNIImpl::CallStaticFloatMethod,\012 JNIImpl::CallStaticFloatMethodV,\012 JNIImpl::CallStaticFloatMethodA,\012 JNIImpl::CallStaticDoubleMethod,\012 JNIImpl::CallStaticDoubleMethodV,\012 JNIImpl::CallStaticDoubleMethodA,\012 JNIImpl::CallStaticVoidMethod,\012 JNIImpl::CallStaticVoidMethodV,\012 JNIImpl::CallStaticVoidMethodA,\012 JNIImpl::GetStaticFieldID,\012 JNIImpl::GetStaticObjectField,\012 JNIImpl::GetStaticBooleanField,\012 JNIImpl::GetStaticByteField,\012 JNIImpl::GetStaticCharField,\012 JNIImpl::GetStaticShortField,\012 JNIImpl::GetStaticIntField,\012 JNIImpl::GetStaticLongField,\012 JNIImpl::GetStaticFloatField,\012 JNIImpl::GetStaticDoubleField,\012 JNIImpl::SetStaticObjectField,\012 JNIImpl::SetStaticBooleanField,\012 JNIImpl::SetStaticByteField,\012 JNIImpl::SetStaticCharField,\012 JNIImpl::SetStaticShortField,\012 JNIImpl::SetStaticIntField,\012 JNIImpl::SetStaticLongField,\012 JNIImpl::SetStaticFloatField,\012 JNIImpl::SetStaticDoubleField,\012 JNIImpl::NewString,\012 JNIImpl::GetStringLength,\012 JNIImpl::GetStringChars,\012 JNIImpl::ReleaseStringChars,\012 JNIImpl::NewStringUTF,\012 JNIImpl::GetStringUTFLength,\012 JNIImpl::GetStringUTFChars,\012 JNIImpl::ReleaseStringUTFChars,\012 JNIImpl::GetArrayLength,\012 JNIImpl::NewObjectArray,\012 JNIImpl::GetObjectArrayElement,\012 JNIImpl::SetObjectArrayElement,\012 JNIImpl::NewBooleanArray,\012 JNIImpl::NewByteArray,\012 JNIImpl::NewCharArray,\012 JNIImpl::NewShortArray,\012 JNIImpl::NewIntArray,\012 JNIImpl::NewLongArray,\012 JNIImpl::NewFloatArray,\012 JNIImpl::NewDoubleArray,\012 JNIImpl::GetBooleanArrayElements,\012 JNIImpl::GetByteArrayElements,\012 JNIImpl::GetCharArrayElements,\012 JNIImpl::GetShortArrayElements,\012 JNIImpl::GetIntArrayElements,\012 JNIImpl::GetLongArrayElements,\012 JNIImpl::GetFloatArrayElements,\012 JNIImpl::GetDoubleArrayElements,\012 JNIImpl::ReleaseBooleanArrayElements,\012 JNIImpl::ReleaseByteArrayElements,\012 JNIImpl::ReleaseCharArrayElements,\012 JNIImpl::ReleaseShortArrayElements,\012 JNIImpl::ReleaseIntArrayElements,\012 JNIImpl::ReleaseLongArrayElements,\012 JNIImpl::ReleaseFloatArrayElements,\012 JNIImpl::ReleaseDoubleArrayElements,\012 JNIImpl::GetBooleanArrayRegion,\012 JNIImpl::GetByteArrayRegion,\012 JNIImpl::GetCharArrayRegion,\012 JNIImpl::GetShortArrayRegion,\012 JNIImpl::GetIntArrayRegion,\012 JNIImpl::GetLongArrayRegion,\012 JNIImpl::GetFloatArrayRegion,\012 JNIImpl::GetDoubleArrayRegion,\012 JNIImpl::SetBooleanArrayRegion,\012 JNIImpl::SetByteArrayRegion,\012 JNIImpl::SetCharArrayRegion,\012 JNIImpl::SetShortArrayRegion,\012 JNIImpl::SetIntArrayRegion,\012 JNIImpl::SetLongArrayRegion,\012 JNIImpl::SetFloatArrayRegion,\012 JNIImpl::SetDoubleArrayRegion,\012 JNIImpl::RegisterNatives,\012 JNIImpl::UnregisterNatives,\012 JNIImpl::MonitorEnter,\012 JNIImpl::MonitorExit,\012 JNIImpl::GetJavaVM,\012 JNIImpl::GetStringRegion,\012 JNIImpl::GetStringUTFRegion,\012 JNIImpl::GetPrimitiveArrayCritical,\012 JNIImpl::ReleasePrimitiveArrayCritical,\012 JNIImpl::GetStringCritical,\012 JNIImpl::ReleaseStringCritical,\012 JNIImpl::NewWeakGlobalRef,\012 JNIImpl::DeleteWeakGlobalRef,\012 JNIImpl::ExceptionCheck,\012 JNIImpl::NewDirectByteBuffer,\012 JNIImpl::GetDirectBufferAddress,\012 JNIImpl::GetDirectBufferCapacity,\012 JNIImpl::GetObjectRefType,\012 })<SUB>2856</SUB>> ]
-"14267" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetVersion)<SUB>2861</SUB>> ]
-"14270" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::DefineClass)<SUB>2862</SUB>> ]
-"14273" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::FindClass)<SUB>2863</SUB>> ]
-"14276" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::FromReflectedMethod)<SUB>2864</SUB>> ]
-"14279" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::FromReflectedField)<SUB>2865</SUB>> ]
-"14282" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::ToReflectedMethod)<SUB>2866</SUB>> ]
-"14285" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetSuperclass)<SUB>2867</SUB>> ]
-"14288" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::IsAssignableFrom)<SUB>2868</SUB>> ]
-"14291" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::ToReflectedField)<SUB>2869</SUB>> ]
-"14294" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::Throw)<SUB>2870</SUB>> ]
-"14297" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::ThrowNew)<SUB>2871</SUB>> ]
-"14300" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::ExceptionOccurred)<SUB>2872</SUB>> ]
-"14303" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::ExceptionDescribe)<SUB>2873</SUB>> ]
-"14306" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::ExceptionClear)<SUB>2874</SUB>> ]
-"14309" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::FatalError)<SUB>2875</SUB>> ]
-"14312" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::PushLocalFrame)<SUB>2876</SUB>> ]
-"14315" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::PopLocalFrame)<SUB>2877</SUB>> ]
-"14318" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::NewGlobalRef)<SUB>2878</SUB>> ]
-"14321" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::DeleteGlobalRef)<SUB>2879</SUB>> ]
-"14324" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::DeleteLocalRef)<SUB>2880</SUB>> ]
-"14327" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::IsSameObject)<SUB>2881</SUB>> ]
-"14330" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::NewLocalRef)<SUB>2882</SUB>> ]
-"14333" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::EnsureLocalCapacity)<SUB>2883</SUB>> ]
-"14336" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::AllocObject)<SUB>2884</SUB>> ]
-"14339" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::NewObject)<SUB>2885</SUB>> ]
-"14342" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::NewObjectV)<SUB>2886</SUB>> ]
-"14345" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::NewObjectA)<SUB>2887</SUB>> ]
-"14348" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetObjectClass)<SUB>2888</SUB>> ]
-"14351" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::IsInstanceOf)<SUB>2889</SUB>> ]
-"14354" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetMethodID)<SUB>2890</SUB>> ]
-"14357" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallObjectMethod)<SUB>2891</SUB>> ]
-"14360" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallObjectMethodV)<SUB>2892</SUB>> ]
-"14363" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallObjectMethodA)<SUB>2893</SUB>> ]
-"14366" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallBooleanMethod)<SUB>2894</SUB>> ]
-"14369" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallBooleanMethodV)<SUB>2895</SUB>> ]
-"14372" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallBooleanMethodA)<SUB>2896</SUB>> ]
-"14375" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallByteMethod)<SUB>2897</SUB>> ]
-"14378" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallByteMethodV)<SUB>2898</SUB>> ]
-"14381" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallByteMethodA)<SUB>2899</SUB>> ]
-"14384" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallCharMethod)<SUB>2900</SUB>> ]
-"14387" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallCharMethodV)<SUB>2901</SUB>> ]
-"14390" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallCharMethodA)<SUB>2902</SUB>> ]
-"14393" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallShortMethod)<SUB>2903</SUB>> ]
-"14396" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallShortMethodV)<SUB>2904</SUB>> ]
-"14399" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallShortMethodA)<SUB>2905</SUB>> ]
-"14402" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallIntMethod)<SUB>2906</SUB>> ]
-"14405" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallIntMethodV)<SUB>2907</SUB>> ]
-"14408" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallIntMethodA)<SUB>2908</SUB>> ]
-"14411" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallLongMethod)<SUB>2909</SUB>> ]
-"14414" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallLongMethodV)<SUB>2910</SUB>> ]
-"14417" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallLongMethodA)<SUB>2911</SUB>> ]
-"14420" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallFloatMethod)<SUB>2912</SUB>> ]
-"14423" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallFloatMethodV)<SUB>2913</SUB>> ]
-"14426" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallFloatMethodA)<SUB>2914</SUB>> ]
-"14429" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallDoubleMethod)<SUB>2915</SUB>> ]
-"14432" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallDoubleMethodV)<SUB>2916</SUB>> ]
-"14435" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallDoubleMethodA)<SUB>2917</SUB>> ]
-"14438" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallVoidMethod)<SUB>2918</SUB>> ]
-"14441" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallVoidMethodV)<SUB>2919</SUB>> ]
-"14444" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallVoidMethodA)<SUB>2920</SUB>> ]
-"14447" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallNonvirtualObjectMethod)<SUB>2921</SUB>> ]
-"14450" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallNonvirtualObjectMethodV)<SUB>2922</SUB>> ]
-"14453" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallNonvirtualObjectMethodA)<SUB>2923</SUB>> ]
-"14456" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallNonvirtualBooleanMethod)<SUB>2924</SUB>> ]
-"14459" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallNonvirtualBooleanMethodV)<SUB>2925</SUB>> ]
-"14462" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallNonvirtualBooleanMethodA)<SUB>2926</SUB>> ]
-"14465" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallNonvirtualByteMethod)<SUB>2927</SUB>> ]
-"14468" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallNonvirtualByteMethodV)<SUB>2928</SUB>> ]
-"14471" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallNonvirtualByteMethodA)<SUB>2929</SUB>> ]
-"14474" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallNonvirtualCharMethod)<SUB>2930</SUB>> ]
-"14477" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallNonvirtualCharMethodV)<SUB>2931</SUB>> ]
-"14480" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallNonvirtualCharMethodA)<SUB>2932</SUB>> ]
-"14483" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallNonvirtualShortMethod)<SUB>2933</SUB>> ]
-"14486" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallNonvirtualShortMethodV)<SUB>2934</SUB>> ]
-"14489" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallNonvirtualShortMethodA)<SUB>2935</SUB>> ]
-"14492" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallNonvirtualIntMethod)<SUB>2936</SUB>> ]
-"14495" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallNonvirtualIntMethodV)<SUB>2937</SUB>> ]
-"14498" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallNonvirtualIntMethodA)<SUB>2938</SUB>> ]
-"14501" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallNonvirtualLongMethod)<SUB>2939</SUB>> ]
-"14504" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallNonvirtualLongMethodV)<SUB>2940</SUB>> ]
-"14507" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallNonvirtualLongMethodA)<SUB>2941</SUB>> ]
-"14510" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallNonvirtualFloatMethod)<SUB>2942</SUB>> ]
-"14513" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallNonvirtualFloatMethodV)<SUB>2943</SUB>> ]
-"14516" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallNonvirtualFloatMethodA)<SUB>2944</SUB>> ]
-"14519" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallNonvirtualDoubleMethod)<SUB>2945</SUB>> ]
-"14522" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallNonvirtualDoubleMethodV)<SUB>2946</SUB>> ]
-"14525" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallNonvirtualDoubleMethodA)<SUB>2947</SUB>> ]
-"14528" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallNonvirtualVoidMethod)<SUB>2948</SUB>> ]
-"14531" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallNonvirtualVoidMethodV)<SUB>2949</SUB>> ]
-"14534" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallNonvirtualVoidMethodA)<SUB>2950</SUB>> ]
-"14537" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetFieldID)<SUB>2951</SUB>> ]
-"14540" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetObjectField)<SUB>2952</SUB>> ]
-"14543" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetBooleanField)<SUB>2953</SUB>> ]
-"14546" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetByteField)<SUB>2954</SUB>> ]
-"14549" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetCharField)<SUB>2955</SUB>> ]
-"14552" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetShortField)<SUB>2956</SUB>> ]
-"14555" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetIntField)<SUB>2957</SUB>> ]
-"14558" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetLongField)<SUB>2958</SUB>> ]
-"14561" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetFloatField)<SUB>2959</SUB>> ]
-"14564" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetDoubleField)<SUB>2960</SUB>> ]
-"14567" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::SetObjectField)<SUB>2961</SUB>> ]
-"14570" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::SetBooleanField)<SUB>2962</SUB>> ]
-"14573" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::SetByteField)<SUB>2963</SUB>> ]
-"14576" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::SetCharField)<SUB>2964</SUB>> ]
-"14579" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::SetShortField)<SUB>2965</SUB>> ]
-"14582" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::SetIntField)<SUB>2966</SUB>> ]
-"14585" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::SetLongField)<SUB>2967</SUB>> ]
-"14588" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::SetFloatField)<SUB>2968</SUB>> ]
-"14591" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::SetDoubleField)<SUB>2969</SUB>> ]
-"14594" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetStaticMethodID)<SUB>2970</SUB>> ]
-"14597" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallStaticObjectMethod)<SUB>2971</SUB>> ]
-"14600" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallStaticObjectMethodV)<SUB>2972</SUB>> ]
-"14603" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallStaticObjectMethodA)<SUB>2973</SUB>> ]
-"14606" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallStaticBooleanMethod)<SUB>2974</SUB>> ]
-"14609" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallStaticBooleanMethodV)<SUB>2975</SUB>> ]
-"14612" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallStaticBooleanMethodA)<SUB>2976</SUB>> ]
-"14615" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallStaticByteMethod)<SUB>2977</SUB>> ]
-"14618" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallStaticByteMethodV)<SUB>2978</SUB>> ]
-"14621" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallStaticByteMethodA)<SUB>2979</SUB>> ]
-"14624" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallStaticCharMethod)<SUB>2980</SUB>> ]
-"14627" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallStaticCharMethodV)<SUB>2981</SUB>> ]
-"14630" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallStaticCharMethodA)<SUB>2982</SUB>> ]
-"14633" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallStaticShortMethod)<SUB>2983</SUB>> ]
-"14636" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallStaticShortMethodV)<SUB>2984</SUB>> ]
-"14639" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallStaticShortMethodA)<SUB>2985</SUB>> ]
-"14642" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallStaticIntMethod)<SUB>2986</SUB>> ]
-"14645" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallStaticIntMethodV)<SUB>2987</SUB>> ]
-"14648" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallStaticIntMethodA)<SUB>2988</SUB>> ]
-"14651" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallStaticLongMethod)<SUB>2989</SUB>> ]
-"14654" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallStaticLongMethodV)<SUB>2990</SUB>> ]
-"14657" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallStaticLongMethodA)<SUB>2991</SUB>> ]
-"14660" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallStaticFloatMethod)<SUB>2992</SUB>> ]
-"14663" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallStaticFloatMethodV)<SUB>2993</SUB>> ]
-"14666" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallStaticFloatMethodA)<SUB>2994</SUB>> ]
-"14669" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallStaticDoubleMethod)<SUB>2995</SUB>> ]
-"14672" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallStaticDoubleMethodV)<SUB>2996</SUB>> ]
-"14675" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallStaticDoubleMethodA)<SUB>2997</SUB>> ]
-"14678" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallStaticVoidMethod)<SUB>2998</SUB>> ]
-"14681" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallStaticVoidMethodV)<SUB>2999</SUB>> ]
-"14684" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::CallStaticVoidMethodA)<SUB>3000</SUB>> ]
-"14687" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetStaticFieldID)<SUB>3001</SUB>> ]
-"14690" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetStaticObjectField)<SUB>3002</SUB>> ]
-"14693" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetStaticBooleanField)<SUB>3003</SUB>> ]
-"14696" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetStaticByteField)<SUB>3004</SUB>> ]
-"14699" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetStaticCharField)<SUB>3005</SUB>> ]
-"14702" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetStaticShortField)<SUB>3006</SUB>> ]
-"14705" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetStaticIntField)<SUB>3007</SUB>> ]
-"14708" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetStaticLongField)<SUB>3008</SUB>> ]
-"14711" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetStaticFloatField)<SUB>3009</SUB>> ]
-"14714" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetStaticDoubleField)<SUB>3010</SUB>> ]
-"14717" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::SetStaticObjectField)<SUB>3011</SUB>> ]
-"14720" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::SetStaticBooleanField)<SUB>3012</SUB>> ]
-"14723" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::SetStaticByteField)<SUB>3013</SUB>> ]
-"14726" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::SetStaticCharField)<SUB>3014</SUB>> ]
-"14729" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::SetStaticShortField)<SUB>3015</SUB>> ]
-"14732" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::SetStaticIntField)<SUB>3016</SUB>> ]
-"14735" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::SetStaticLongField)<SUB>3017</SUB>> ]
-"14738" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::SetStaticFloatField)<SUB>3018</SUB>> ]
-"14741" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::SetStaticDoubleField)<SUB>3019</SUB>> ]
-"14744" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::NewString)<SUB>3020</SUB>> ]
-"14747" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetStringLength)<SUB>3021</SUB>> ]
-"14750" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetStringChars)<SUB>3022</SUB>> ]
-"14753" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::ReleaseStringChars)<SUB>3023</SUB>> ]
-"14756" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::NewStringUTF)<SUB>3024</SUB>> ]
-"14759" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetStringUTFLength)<SUB>3025</SUB>> ]
-"14762" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetStringUTFChars)<SUB>3026</SUB>> ]
-"14765" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::ReleaseStringUTFChars)<SUB>3027</SUB>> ]
-"14768" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetArrayLength)<SUB>3028</SUB>> ]
-"14771" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::NewObjectArray)<SUB>3029</SUB>> ]
-"14774" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetObjectArrayElement)<SUB>3030</SUB>> ]
-"14777" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::SetObjectArrayElement)<SUB>3031</SUB>> ]
-"14780" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::NewBooleanArray)<SUB>3032</SUB>> ]
-"14783" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::NewByteArray)<SUB>3033</SUB>> ]
-"14786" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::NewCharArray)<SUB>3034</SUB>> ]
-"14789" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::NewShortArray)<SUB>3035</SUB>> ]
-"14792" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::NewIntArray)<SUB>3036</SUB>> ]
-"14795" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::NewLongArray)<SUB>3037</SUB>> ]
-"14798" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::NewFloatArray)<SUB>3038</SUB>> ]
-"14801" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::NewDoubleArray)<SUB>3039</SUB>> ]
-"14804" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetBooleanArrayElements)<SUB>3040</SUB>> ]
-"14807" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetByteArrayElements)<SUB>3041</SUB>> ]
-"14810" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetCharArrayElements)<SUB>3042</SUB>> ]
-"14813" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetShortArrayElements)<SUB>3043</SUB>> ]
-"14816" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetIntArrayElements)<SUB>3044</SUB>> ]
-"14819" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetLongArrayElements)<SUB>3045</SUB>> ]
-"14822" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetFloatArrayElements)<SUB>3046</SUB>> ]
-"14825" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetDoubleArrayElements)<SUB>3047</SUB>> ]
-"14828" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::ReleaseBooleanArrayElements)<SUB>3048</SUB>> ]
-"14831" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::ReleaseByteArrayElements)<SUB>3049</SUB>> ]
-"14834" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::ReleaseCharArrayElements)<SUB>3050</SUB>> ]
-"14837" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::ReleaseShortArrayElements)<SUB>3051</SUB>> ]
-"14840" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::ReleaseIntArrayElements)<SUB>3052</SUB>> ]
-"14843" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::ReleaseLongArrayElements)<SUB>3053</SUB>> ]
-"14846" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::ReleaseFloatArrayElements)<SUB>3054</SUB>> ]
-"14849" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::ReleaseDoubleArrayElements)<SUB>3055</SUB>> ]
-"14852" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetBooleanArrayRegion)<SUB>3056</SUB>> ]
-"14855" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetByteArrayRegion)<SUB>3057</SUB>> ]
-"14858" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetCharArrayRegion)<SUB>3058</SUB>> ]
-"14861" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetShortArrayRegion)<SUB>3059</SUB>> ]
-"14864" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetIntArrayRegion)<SUB>3060</SUB>> ]
-"14867" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetLongArrayRegion)<SUB>3061</SUB>> ]
-"14870" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetFloatArrayRegion)<SUB>3062</SUB>> ]
-"14873" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetDoubleArrayRegion)<SUB>3063</SUB>> ]
-"14876" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::SetBooleanArrayRegion)<SUB>3064</SUB>> ]
-"14879" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::SetByteArrayRegion)<SUB>3065</SUB>> ]
-"14882" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::SetCharArrayRegion)<SUB>3066</SUB>> ]
-"14885" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::SetShortArrayRegion)<SUB>3067</SUB>> ]
-"14888" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::SetIntArrayRegion)<SUB>3068</SUB>> ]
-"14891" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::SetLongArrayRegion)<SUB>3069</SUB>> ]
-"14894" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::SetFloatArrayRegion)<SUB>3070</SUB>> ]
-"14897" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::SetDoubleArrayRegion)<SUB>3071</SUB>> ]
-"14900" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::RegisterNatives)<SUB>3072</SUB>> ]
-"14903" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::UnregisterNatives)<SUB>3073</SUB>> ]
-"14906" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::MonitorEnter)<SUB>3074</SUB>> ]
-"14909" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::MonitorExit)<SUB>3075</SUB>> ]
-"14912" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetJavaVM)<SUB>3076</SUB>> ]
-"14915" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetStringRegion)<SUB>3077</SUB>> ]
-"14918" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetStringUTFRegion)<SUB>3078</SUB>> ]
-"14921" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetPrimitiveArrayCritical)<SUB>3079</SUB>> ]
-"14924" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::ReleasePrimitiveArrayCritical)<SUB>3080</SUB>> ]
-"14927" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetStringCritical)<SUB>3081</SUB>> ]
-"14930" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::ReleaseStringCritical)<SUB>3082</SUB>> ]
-"14933" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::NewWeakGlobalRef)<SUB>3083</SUB>> ]
-"14936" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::DeleteWeakGlobalRef)<SUB>3084</SUB>> ]
-"14939" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::ExceptionCheck)<SUB>3085</SUB>> ]
-"14942" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::NewDirectByteBuffer)<SUB>3086</SUB>> ]
-"14945" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetDirectBufferAddress)<SUB>3087</SUB>> ]
-"14948" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetDirectBufferCapacity)<SUB>3088</SUB>> ]
-"14951" [label = <(&lt;operator&gt;.fieldAccess,JNIImpl::GetObjectRefType)<SUB>3089</SUB>> ]
-"14269" [label = <(FIELD_IDENTIFIER,GetVersion,GetVersion)<SUB>2861</SUB>> ]
-"14272" [label = <(FIELD_IDENTIFIER,DefineClass,DefineClass)<SUB>2862</SUB>> ]
-"14275" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>2863</SUB>> ]
-"14278" [label = <(FIELD_IDENTIFIER,FromReflectedMethod,FromReflectedMethod)<SUB>2864</SUB>> ]
-"14281" [label = <(FIELD_IDENTIFIER,FromReflectedField,FromReflectedField)<SUB>2865</SUB>> ]
-"14284" [label = <(FIELD_IDENTIFIER,ToReflectedMethod,ToReflectedMethod)<SUB>2866</SUB>> ]
-"14287" [label = <(FIELD_IDENTIFIER,GetSuperclass,GetSuperclass)<SUB>2867</SUB>> ]
-"14290" [label = <(FIELD_IDENTIFIER,IsAssignableFrom,IsAssignableFrom)<SUB>2868</SUB>> ]
-"14293" [label = <(FIELD_IDENTIFIER,ToReflectedField,ToReflectedField)<SUB>2869</SUB>> ]
-"14296" [label = <(FIELD_IDENTIFIER,Throw,Throw)<SUB>2870</SUB>> ]
-"14299" [label = <(FIELD_IDENTIFIER,ThrowNew,ThrowNew)<SUB>2871</SUB>> ]
-"14302" [label = <(FIELD_IDENTIFIER,ExceptionOccurred,ExceptionOccurred)<SUB>2872</SUB>> ]
-"14305" [label = <(FIELD_IDENTIFIER,ExceptionDescribe,ExceptionDescribe)<SUB>2873</SUB>> ]
-"14308" [label = <(FIELD_IDENTIFIER,ExceptionClear,ExceptionClear)<SUB>2874</SUB>> ]
-"14311" [label = <(FIELD_IDENTIFIER,FatalError,FatalError)<SUB>2875</SUB>> ]
-"14314" [label = <(FIELD_IDENTIFIER,PushLocalFrame,PushLocalFrame)<SUB>2876</SUB>> ]
-"14317" [label = <(FIELD_IDENTIFIER,PopLocalFrame,PopLocalFrame)<SUB>2877</SUB>> ]
-"14320" [label = <(FIELD_IDENTIFIER,NewGlobalRef,NewGlobalRef)<SUB>2878</SUB>> ]
-"14323" [label = <(FIELD_IDENTIFIER,DeleteGlobalRef,DeleteGlobalRef)<SUB>2879</SUB>> ]
-"14326" [label = <(FIELD_IDENTIFIER,DeleteLocalRef,DeleteLocalRef)<SUB>2880</SUB>> ]
-"14329" [label = <(FIELD_IDENTIFIER,IsSameObject,IsSameObject)<SUB>2881</SUB>> ]
-"14332" [label = <(FIELD_IDENTIFIER,NewLocalRef,NewLocalRef)<SUB>2882</SUB>> ]
-"14335" [label = <(FIELD_IDENTIFIER,EnsureLocalCapacity,EnsureLocalCapacity)<SUB>2883</SUB>> ]
-"14338" [label = <(FIELD_IDENTIFIER,AllocObject,AllocObject)<SUB>2884</SUB>> ]
-"14341" [label = <(FIELD_IDENTIFIER,NewObject,NewObject)<SUB>2885</SUB>> ]
-"14344" [label = <(FIELD_IDENTIFIER,NewObjectV,NewObjectV)<SUB>2886</SUB>> ]
-"14347" [label = <(FIELD_IDENTIFIER,NewObjectA,NewObjectA)<SUB>2887</SUB>> ]
-"14350" [label = <(FIELD_IDENTIFIER,GetObjectClass,GetObjectClass)<SUB>2888</SUB>> ]
-"14353" [label = <(FIELD_IDENTIFIER,IsInstanceOf,IsInstanceOf)<SUB>2889</SUB>> ]
-"14356" [label = <(FIELD_IDENTIFIER,GetMethodID,GetMethodID)<SUB>2890</SUB>> ]
-"14359" [label = <(FIELD_IDENTIFIER,CallObjectMethod,CallObjectMethod)<SUB>2891</SUB>> ]
-"14362" [label = <(FIELD_IDENTIFIER,CallObjectMethodV,CallObjectMethodV)<SUB>2892</SUB>> ]
-"14365" [label = <(FIELD_IDENTIFIER,CallObjectMethodA,CallObjectMethodA)<SUB>2893</SUB>> ]
-"14368" [label = <(FIELD_IDENTIFIER,CallBooleanMethod,CallBooleanMethod)<SUB>2894</SUB>> ]
-"14371" [label = <(FIELD_IDENTIFIER,CallBooleanMethodV,CallBooleanMethodV)<SUB>2895</SUB>> ]
-"14374" [label = <(FIELD_IDENTIFIER,CallBooleanMethodA,CallBooleanMethodA)<SUB>2896</SUB>> ]
-"14377" [label = <(FIELD_IDENTIFIER,CallByteMethod,CallByteMethod)<SUB>2897</SUB>> ]
-"14380" [label = <(FIELD_IDENTIFIER,CallByteMethodV,CallByteMethodV)<SUB>2898</SUB>> ]
-"14383" [label = <(FIELD_IDENTIFIER,CallByteMethodA,CallByteMethodA)<SUB>2899</SUB>> ]
-"14386" [label = <(FIELD_IDENTIFIER,CallCharMethod,CallCharMethod)<SUB>2900</SUB>> ]
-"14389" [label = <(FIELD_IDENTIFIER,CallCharMethodV,CallCharMethodV)<SUB>2901</SUB>> ]
-"14392" [label = <(FIELD_IDENTIFIER,CallCharMethodA,CallCharMethodA)<SUB>2902</SUB>> ]
-"14395" [label = <(FIELD_IDENTIFIER,CallShortMethod,CallShortMethod)<SUB>2903</SUB>> ]
-"14398" [label = <(FIELD_IDENTIFIER,CallShortMethodV,CallShortMethodV)<SUB>2904</SUB>> ]
-"14401" [label = <(FIELD_IDENTIFIER,CallShortMethodA,CallShortMethodA)<SUB>2905</SUB>> ]
-"14404" [label = <(FIELD_IDENTIFIER,CallIntMethod,CallIntMethod)<SUB>2906</SUB>> ]
-"14407" [label = <(FIELD_IDENTIFIER,CallIntMethodV,CallIntMethodV)<SUB>2907</SUB>> ]
-"14410" [label = <(FIELD_IDENTIFIER,CallIntMethodA,CallIntMethodA)<SUB>2908</SUB>> ]
-"14413" [label = <(FIELD_IDENTIFIER,CallLongMethod,CallLongMethod)<SUB>2909</SUB>> ]
-"14416" [label = <(FIELD_IDENTIFIER,CallLongMethodV,CallLongMethodV)<SUB>2910</SUB>> ]
-"14419" [label = <(FIELD_IDENTIFIER,CallLongMethodA,CallLongMethodA)<SUB>2911</SUB>> ]
-"14422" [label = <(FIELD_IDENTIFIER,CallFloatMethod,CallFloatMethod)<SUB>2912</SUB>> ]
-"14425" [label = <(FIELD_IDENTIFIER,CallFloatMethodV,CallFloatMethodV)<SUB>2913</SUB>> ]
-"14428" [label = <(FIELD_IDENTIFIER,CallFloatMethodA,CallFloatMethodA)<SUB>2914</SUB>> ]
-"14431" [label = <(FIELD_IDENTIFIER,CallDoubleMethod,CallDoubleMethod)<SUB>2915</SUB>> ]
-"14434" [label = <(FIELD_IDENTIFIER,CallDoubleMethodV,CallDoubleMethodV)<SUB>2916</SUB>> ]
-"14437" [label = <(FIELD_IDENTIFIER,CallDoubleMethodA,CallDoubleMethodA)<SUB>2917</SUB>> ]
-"14440" [label = <(FIELD_IDENTIFIER,CallVoidMethod,CallVoidMethod)<SUB>2918</SUB>> ]
-"14443" [label = <(FIELD_IDENTIFIER,CallVoidMethodV,CallVoidMethodV)<SUB>2919</SUB>> ]
-"14446" [label = <(FIELD_IDENTIFIER,CallVoidMethodA,CallVoidMethodA)<SUB>2920</SUB>> ]
-"14449" [label = <(FIELD_IDENTIFIER,CallNonvirtualObjectMethod,CallNonvirtualObjectMethod)<SUB>2921</SUB>> ]
-"14452" [label = <(FIELD_IDENTIFIER,CallNonvirtualObjectMethodV,CallNonvirtualObjectMethodV)<SUB>2922</SUB>> ]
-"14455" [label = <(FIELD_IDENTIFIER,CallNonvirtualObjectMethodA,CallNonvirtualObjectMethodA)<SUB>2923</SUB>> ]
-"14458" [label = <(FIELD_IDENTIFIER,CallNonvirtualBooleanMethod,CallNonvirtualBooleanMethod)<SUB>2924</SUB>> ]
-"14461" [label = <(FIELD_IDENTIFIER,CallNonvirtualBooleanMethodV,CallNonvirtualBooleanMethodV)<SUB>2925</SUB>> ]
-"14464" [label = <(FIELD_IDENTIFIER,CallNonvirtualBooleanMethodA,CallNonvirtualBooleanMethodA)<SUB>2926</SUB>> ]
-"14467" [label = <(FIELD_IDENTIFIER,CallNonvirtualByteMethod,CallNonvirtualByteMethod)<SUB>2927</SUB>> ]
-"14470" [label = <(FIELD_IDENTIFIER,CallNonvirtualByteMethodV,CallNonvirtualByteMethodV)<SUB>2928</SUB>> ]
-"14473" [label = <(FIELD_IDENTIFIER,CallNonvirtualByteMethodA,CallNonvirtualByteMethodA)<SUB>2929</SUB>> ]
-"14476" [label = <(FIELD_IDENTIFIER,CallNonvirtualCharMethod,CallNonvirtualCharMethod)<SUB>2930</SUB>> ]
-"14479" [label = <(FIELD_IDENTIFIER,CallNonvirtualCharMethodV,CallNonvirtualCharMethodV)<SUB>2931</SUB>> ]
-"14482" [label = <(FIELD_IDENTIFIER,CallNonvirtualCharMethodA,CallNonvirtualCharMethodA)<SUB>2932</SUB>> ]
-"14485" [label = <(FIELD_IDENTIFIER,CallNonvirtualShortMethod,CallNonvirtualShortMethod)<SUB>2933</SUB>> ]
-"14488" [label = <(FIELD_IDENTIFIER,CallNonvirtualShortMethodV,CallNonvirtualShortMethodV)<SUB>2934</SUB>> ]
-"14491" [label = <(FIELD_IDENTIFIER,CallNonvirtualShortMethodA,CallNonvirtualShortMethodA)<SUB>2935</SUB>> ]
-"14494" [label = <(FIELD_IDENTIFIER,CallNonvirtualIntMethod,CallNonvirtualIntMethod)<SUB>2936</SUB>> ]
-"14497" [label = <(FIELD_IDENTIFIER,CallNonvirtualIntMethodV,CallNonvirtualIntMethodV)<SUB>2937</SUB>> ]
-"14500" [label = <(FIELD_IDENTIFIER,CallNonvirtualIntMethodA,CallNonvirtualIntMethodA)<SUB>2938</SUB>> ]
-"14503" [label = <(FIELD_IDENTIFIER,CallNonvirtualLongMethod,CallNonvirtualLongMethod)<SUB>2939</SUB>> ]
-"14506" [label = <(FIELD_IDENTIFIER,CallNonvirtualLongMethodV,CallNonvirtualLongMethodV)<SUB>2940</SUB>> ]
-"14509" [label = <(FIELD_IDENTIFIER,CallNonvirtualLongMethodA,CallNonvirtualLongMethodA)<SUB>2941</SUB>> ]
-"14512" [label = <(FIELD_IDENTIFIER,CallNonvirtualFloatMethod,CallNonvirtualFloatMethod)<SUB>2942</SUB>> ]
-"14515" [label = <(FIELD_IDENTIFIER,CallNonvirtualFloatMethodV,CallNonvirtualFloatMethodV)<SUB>2943</SUB>> ]
-"14518" [label = <(FIELD_IDENTIFIER,CallNonvirtualFloatMethodA,CallNonvirtualFloatMethodA)<SUB>2944</SUB>> ]
-"14521" [label = <(FIELD_IDENTIFIER,CallNonvirtualDoubleMethod,CallNonvirtualDoubleMethod)<SUB>2945</SUB>> ]
-"14524" [label = <(FIELD_IDENTIFIER,CallNonvirtualDoubleMethodV,CallNonvirtualDoubleMethodV)<SUB>2946</SUB>> ]
-"14527" [label = <(FIELD_IDENTIFIER,CallNonvirtualDoubleMethodA,CallNonvirtualDoubleMethodA)<SUB>2947</SUB>> ]
-"14530" [label = <(FIELD_IDENTIFIER,CallNonvirtualVoidMethod,CallNonvirtualVoidMethod)<SUB>2948</SUB>> ]
-"14533" [label = <(FIELD_IDENTIFIER,CallNonvirtualVoidMethodV,CallNonvirtualVoidMethodV)<SUB>2949</SUB>> ]
-"14536" [label = <(FIELD_IDENTIFIER,CallNonvirtualVoidMethodA,CallNonvirtualVoidMethodA)<SUB>2950</SUB>> ]
-"14539" [label = <(FIELD_IDENTIFIER,GetFieldID,GetFieldID)<SUB>2951</SUB>> ]
-"14542" [label = <(FIELD_IDENTIFIER,GetObjectField,GetObjectField)<SUB>2952</SUB>> ]
-"14545" [label = <(FIELD_IDENTIFIER,GetBooleanField,GetBooleanField)<SUB>2953</SUB>> ]
-"14548" [label = <(FIELD_IDENTIFIER,GetByteField,GetByteField)<SUB>2954</SUB>> ]
-"14551" [label = <(FIELD_IDENTIFIER,GetCharField,GetCharField)<SUB>2955</SUB>> ]
-"14554" [label = <(FIELD_IDENTIFIER,GetShortField,GetShortField)<SUB>2956</SUB>> ]
-"14557" [label = <(FIELD_IDENTIFIER,GetIntField,GetIntField)<SUB>2957</SUB>> ]
-"14560" [label = <(FIELD_IDENTIFIER,GetLongField,GetLongField)<SUB>2958</SUB>> ]
-"14563" [label = <(FIELD_IDENTIFIER,GetFloatField,GetFloatField)<SUB>2959</SUB>> ]
-"14566" [label = <(FIELD_IDENTIFIER,GetDoubleField,GetDoubleField)<SUB>2960</SUB>> ]
-"14569" [label = <(FIELD_IDENTIFIER,SetObjectField,SetObjectField)<SUB>2961</SUB>> ]
-"14572" [label = <(FIELD_IDENTIFIER,SetBooleanField,SetBooleanField)<SUB>2962</SUB>> ]
-"14575" [label = <(FIELD_IDENTIFIER,SetByteField,SetByteField)<SUB>2963</SUB>> ]
-"14578" [label = <(FIELD_IDENTIFIER,SetCharField,SetCharField)<SUB>2964</SUB>> ]
-"14581" [label = <(FIELD_IDENTIFIER,SetShortField,SetShortField)<SUB>2965</SUB>> ]
-"14584" [label = <(FIELD_IDENTIFIER,SetIntField,SetIntField)<SUB>2966</SUB>> ]
-"14587" [label = <(FIELD_IDENTIFIER,SetLongField,SetLongField)<SUB>2967</SUB>> ]
-"14590" [label = <(FIELD_IDENTIFIER,SetFloatField,SetFloatField)<SUB>2968</SUB>> ]
-"14593" [label = <(FIELD_IDENTIFIER,SetDoubleField,SetDoubleField)<SUB>2969</SUB>> ]
-"14596" [label = <(FIELD_IDENTIFIER,GetStaticMethodID,GetStaticMethodID)<SUB>2970</SUB>> ]
-"14599" [label = <(FIELD_IDENTIFIER,CallStaticObjectMethod,CallStaticObjectMethod)<SUB>2971</SUB>> ]
-"14602" [label = <(FIELD_IDENTIFIER,CallStaticObjectMethodV,CallStaticObjectMethodV)<SUB>2972</SUB>> ]
-"14605" [label = <(FIELD_IDENTIFIER,CallStaticObjectMethodA,CallStaticObjectMethodA)<SUB>2973</SUB>> ]
-"14608" [label = <(FIELD_IDENTIFIER,CallStaticBooleanMethod,CallStaticBooleanMethod)<SUB>2974</SUB>> ]
-"14611" [label = <(FIELD_IDENTIFIER,CallStaticBooleanMethodV,CallStaticBooleanMethodV)<SUB>2975</SUB>> ]
-"14614" [label = <(FIELD_IDENTIFIER,CallStaticBooleanMethodA,CallStaticBooleanMethodA)<SUB>2976</SUB>> ]
-"14617" [label = <(FIELD_IDENTIFIER,CallStaticByteMethod,CallStaticByteMethod)<SUB>2977</SUB>> ]
-"14620" [label = <(FIELD_IDENTIFIER,CallStaticByteMethodV,CallStaticByteMethodV)<SUB>2978</SUB>> ]
-"14623" [label = <(FIELD_IDENTIFIER,CallStaticByteMethodA,CallStaticByteMethodA)<SUB>2979</SUB>> ]
-"14626" [label = <(FIELD_IDENTIFIER,CallStaticCharMethod,CallStaticCharMethod)<SUB>2980</SUB>> ]
-"14629" [label = <(FIELD_IDENTIFIER,CallStaticCharMethodV,CallStaticCharMethodV)<SUB>2981</SUB>> ]
-"14632" [label = <(FIELD_IDENTIFIER,CallStaticCharMethodA,CallStaticCharMethodA)<SUB>2982</SUB>> ]
-"14635" [label = <(FIELD_IDENTIFIER,CallStaticShortMethod,CallStaticShortMethod)<SUB>2983</SUB>> ]
-"14638" [label = <(FIELD_IDENTIFIER,CallStaticShortMethodV,CallStaticShortMethodV)<SUB>2984</SUB>> ]
-"14641" [label = <(FIELD_IDENTIFIER,CallStaticShortMethodA,CallStaticShortMethodA)<SUB>2985</SUB>> ]
-"14644" [label = <(FIELD_IDENTIFIER,CallStaticIntMethod,CallStaticIntMethod)<SUB>2986</SUB>> ]
-"14647" [label = <(FIELD_IDENTIFIER,CallStaticIntMethodV,CallStaticIntMethodV)<SUB>2987</SUB>> ]
-"14650" [label = <(FIELD_IDENTIFIER,CallStaticIntMethodA,CallStaticIntMethodA)<SUB>2988</SUB>> ]
-"14653" [label = <(FIELD_IDENTIFIER,CallStaticLongMethod,CallStaticLongMethod)<SUB>2989</SUB>> ]
-"14656" [label = <(FIELD_IDENTIFIER,CallStaticLongMethodV,CallStaticLongMethodV)<SUB>2990</SUB>> ]
-"14659" [label = <(FIELD_IDENTIFIER,CallStaticLongMethodA,CallStaticLongMethodA)<SUB>2991</SUB>> ]
-"14662" [label = <(FIELD_IDENTIFIER,CallStaticFloatMethod,CallStaticFloatMethod)<SUB>2992</SUB>> ]
-"14665" [label = <(FIELD_IDENTIFIER,CallStaticFloatMethodV,CallStaticFloatMethodV)<SUB>2993</SUB>> ]
-"14668" [label = <(FIELD_IDENTIFIER,CallStaticFloatMethodA,CallStaticFloatMethodA)<SUB>2994</SUB>> ]
-"14671" [label = <(FIELD_IDENTIFIER,CallStaticDoubleMethod,CallStaticDoubleMethod)<SUB>2995</SUB>> ]
-"14674" [label = <(FIELD_IDENTIFIER,CallStaticDoubleMethodV,CallStaticDoubleMethodV)<SUB>2996</SUB>> ]
-"14677" [label = <(FIELD_IDENTIFIER,CallStaticDoubleMethodA,CallStaticDoubleMethodA)<SUB>2997</SUB>> ]
-"14680" [label = <(FIELD_IDENTIFIER,CallStaticVoidMethod,CallStaticVoidMethod)<SUB>2998</SUB>> ]
-"14683" [label = <(FIELD_IDENTIFIER,CallStaticVoidMethodV,CallStaticVoidMethodV)<SUB>2999</SUB>> ]
-"14686" [label = <(FIELD_IDENTIFIER,CallStaticVoidMethodA,CallStaticVoidMethodA)<SUB>3000</SUB>> ]
-"14689" [label = <(FIELD_IDENTIFIER,GetStaticFieldID,GetStaticFieldID)<SUB>3001</SUB>> ]
-"14692" [label = <(FIELD_IDENTIFIER,GetStaticObjectField,GetStaticObjectField)<SUB>3002</SUB>> ]
-"14695" [label = <(FIELD_IDENTIFIER,GetStaticBooleanField,GetStaticBooleanField)<SUB>3003</SUB>> ]
-"14698" [label = <(FIELD_IDENTIFIER,GetStaticByteField,GetStaticByteField)<SUB>3004</SUB>> ]
-"14701" [label = <(FIELD_IDENTIFIER,GetStaticCharField,GetStaticCharField)<SUB>3005</SUB>> ]
-"14704" [label = <(FIELD_IDENTIFIER,GetStaticShortField,GetStaticShortField)<SUB>3006</SUB>> ]
-"14707" [label = <(FIELD_IDENTIFIER,GetStaticIntField,GetStaticIntField)<SUB>3007</SUB>> ]
-"14710" [label = <(FIELD_IDENTIFIER,GetStaticLongField,GetStaticLongField)<SUB>3008</SUB>> ]
-"14713" [label = <(FIELD_IDENTIFIER,GetStaticFloatField,GetStaticFloatField)<SUB>3009</SUB>> ]
-"14716" [label = <(FIELD_IDENTIFIER,GetStaticDoubleField,GetStaticDoubleField)<SUB>3010</SUB>> ]
-"14719" [label = <(FIELD_IDENTIFIER,SetStaticObjectField,SetStaticObjectField)<SUB>3011</SUB>> ]
-"14722" [label = <(FIELD_IDENTIFIER,SetStaticBooleanField,SetStaticBooleanField)<SUB>3012</SUB>> ]
-"14725" [label = <(FIELD_IDENTIFIER,SetStaticByteField,SetStaticByteField)<SUB>3013</SUB>> ]
-"14728" [label = <(FIELD_IDENTIFIER,SetStaticCharField,SetStaticCharField)<SUB>3014</SUB>> ]
-"14731" [label = <(FIELD_IDENTIFIER,SetStaticShortField,SetStaticShortField)<SUB>3015</SUB>> ]
-"14734" [label = <(FIELD_IDENTIFIER,SetStaticIntField,SetStaticIntField)<SUB>3016</SUB>> ]
-"14737" [label = <(FIELD_IDENTIFIER,SetStaticLongField,SetStaticLongField)<SUB>3017</SUB>> ]
-"14740" [label = <(FIELD_IDENTIFIER,SetStaticFloatField,SetStaticFloatField)<SUB>3018</SUB>> ]
-"14743" [label = <(FIELD_IDENTIFIER,SetStaticDoubleField,SetStaticDoubleField)<SUB>3019</SUB>> ]
-"14746" [label = <(FIELD_IDENTIFIER,NewString,NewString)<SUB>3020</SUB>> ]
-"14749" [label = <(FIELD_IDENTIFIER,GetStringLength,GetStringLength)<SUB>3021</SUB>> ]
-"14752" [label = <(FIELD_IDENTIFIER,GetStringChars,GetStringChars)<SUB>3022</SUB>> ]
-"14755" [label = <(FIELD_IDENTIFIER,ReleaseStringChars,ReleaseStringChars)<SUB>3023</SUB>> ]
-"14758" [label = <(FIELD_IDENTIFIER,NewStringUTF,NewStringUTF)<SUB>3024</SUB>> ]
-"14761" [label = <(FIELD_IDENTIFIER,GetStringUTFLength,GetStringUTFLength)<SUB>3025</SUB>> ]
-"14764" [label = <(FIELD_IDENTIFIER,GetStringUTFChars,GetStringUTFChars)<SUB>3026</SUB>> ]
-"14767" [label = <(FIELD_IDENTIFIER,ReleaseStringUTFChars,ReleaseStringUTFChars)<SUB>3027</SUB>> ]
-"14770" [label = <(FIELD_IDENTIFIER,GetArrayLength,GetArrayLength)<SUB>3028</SUB>> ]
-"14773" [label = <(FIELD_IDENTIFIER,NewObjectArray,NewObjectArray)<SUB>3029</SUB>> ]
-"14776" [label = <(FIELD_IDENTIFIER,GetObjectArrayElement,GetObjectArrayElement)<SUB>3030</SUB>> ]
-"14779" [label = <(FIELD_IDENTIFIER,SetObjectArrayElement,SetObjectArrayElement)<SUB>3031</SUB>> ]
-"14782" [label = <(FIELD_IDENTIFIER,NewBooleanArray,NewBooleanArray)<SUB>3032</SUB>> ]
-"14785" [label = <(FIELD_IDENTIFIER,NewByteArray,NewByteArray)<SUB>3033</SUB>> ]
-"14788" [label = <(FIELD_IDENTIFIER,NewCharArray,NewCharArray)<SUB>3034</SUB>> ]
-"14791" [label = <(FIELD_IDENTIFIER,NewShortArray,NewShortArray)<SUB>3035</SUB>> ]
-"14794" [label = <(FIELD_IDENTIFIER,NewIntArray,NewIntArray)<SUB>3036</SUB>> ]
-"14797" [label = <(FIELD_IDENTIFIER,NewLongArray,NewLongArray)<SUB>3037</SUB>> ]
-"14800" [label = <(FIELD_IDENTIFIER,NewFloatArray,NewFloatArray)<SUB>3038</SUB>> ]
-"14803" [label = <(FIELD_IDENTIFIER,NewDoubleArray,NewDoubleArray)<SUB>3039</SUB>> ]
-"14806" [label = <(FIELD_IDENTIFIER,GetBooleanArrayElements,GetBooleanArrayElements)<SUB>3040</SUB>> ]
-"14809" [label = <(FIELD_IDENTIFIER,GetByteArrayElements,GetByteArrayElements)<SUB>3041</SUB>> ]
-"14812" [label = <(FIELD_IDENTIFIER,GetCharArrayElements,GetCharArrayElements)<SUB>3042</SUB>> ]
-"14815" [label = <(FIELD_IDENTIFIER,GetShortArrayElements,GetShortArrayElements)<SUB>3043</SUB>> ]
-"14818" [label = <(FIELD_IDENTIFIER,GetIntArrayElements,GetIntArrayElements)<SUB>3044</SUB>> ]
-"14821" [label = <(FIELD_IDENTIFIER,GetLongArrayElements,GetLongArrayElements)<SUB>3045</SUB>> ]
-"14824" [label = <(FIELD_IDENTIFIER,GetFloatArrayElements,GetFloatArrayElements)<SUB>3046</SUB>> ]
-"14827" [label = <(FIELD_IDENTIFIER,GetDoubleArrayElements,GetDoubleArrayElements)<SUB>3047</SUB>> ]
-"14830" [label = <(FIELD_IDENTIFIER,ReleaseBooleanArrayElements,ReleaseBooleanArrayElements)<SUB>3048</SUB>> ]
-"14833" [label = <(FIELD_IDENTIFIER,ReleaseByteArrayElements,ReleaseByteArrayElements)<SUB>3049</SUB>> ]
-"14836" [label = <(FIELD_IDENTIFIER,ReleaseCharArrayElements,ReleaseCharArrayElements)<SUB>3050</SUB>> ]
-"14839" [label = <(FIELD_IDENTIFIER,ReleaseShortArrayElements,ReleaseShortArrayElements)<SUB>3051</SUB>> ]
-"14842" [label = <(FIELD_IDENTIFIER,ReleaseIntArrayElements,ReleaseIntArrayElements)<SUB>3052</SUB>> ]
-"14845" [label = <(FIELD_IDENTIFIER,ReleaseLongArrayElements,ReleaseLongArrayElements)<SUB>3053</SUB>> ]
-"14848" [label = <(FIELD_IDENTIFIER,ReleaseFloatArrayElements,ReleaseFloatArrayElements)<SUB>3054</SUB>> ]
-"14851" [label = <(FIELD_IDENTIFIER,ReleaseDoubleArrayElements,ReleaseDoubleArrayElements)<SUB>3055</SUB>> ]
-"14854" [label = <(FIELD_IDENTIFIER,GetBooleanArrayRegion,GetBooleanArrayRegion)<SUB>3056</SUB>> ]
-"14857" [label = <(FIELD_IDENTIFIER,GetByteArrayRegion,GetByteArrayRegion)<SUB>3057</SUB>> ]
-"14860" [label = <(FIELD_IDENTIFIER,GetCharArrayRegion,GetCharArrayRegion)<SUB>3058</SUB>> ]
-"14863" [label = <(FIELD_IDENTIFIER,GetShortArrayRegion,GetShortArrayRegion)<SUB>3059</SUB>> ]
-"14866" [label = <(FIELD_IDENTIFIER,GetIntArrayRegion,GetIntArrayRegion)<SUB>3060</SUB>> ]
-"14869" [label = <(FIELD_IDENTIFIER,GetLongArrayRegion,GetLongArrayRegion)<SUB>3061</SUB>> ]
-"14872" [label = <(FIELD_IDENTIFIER,GetFloatArrayRegion,GetFloatArrayRegion)<SUB>3062</SUB>> ]
-"14875" [label = <(FIELD_IDENTIFIER,GetDoubleArrayRegion,GetDoubleArrayRegion)<SUB>3063</SUB>> ]
-"14878" [label = <(FIELD_IDENTIFIER,SetBooleanArrayRegion,SetBooleanArrayRegion)<SUB>3064</SUB>> ]
-"14881" [label = <(FIELD_IDENTIFIER,SetByteArrayRegion,SetByteArrayRegion)<SUB>3065</SUB>> ]
-"14884" [label = <(FIELD_IDENTIFIER,SetCharArrayRegion,SetCharArrayRegion)<SUB>3066</SUB>> ]
-"14887" [label = <(FIELD_IDENTIFIER,SetShortArrayRegion,SetShortArrayRegion)<SUB>3067</SUB>> ]
-"14890" [label = <(FIELD_IDENTIFIER,SetIntArrayRegion,SetIntArrayRegion)<SUB>3068</SUB>> ]
-"14893" [label = <(FIELD_IDENTIFIER,SetLongArrayRegion,SetLongArrayRegion)<SUB>3069</SUB>> ]
-"14896" [label = <(FIELD_IDENTIFIER,SetFloatArrayRegion,SetFloatArrayRegion)<SUB>3070</SUB>> ]
-"14899" [label = <(FIELD_IDENTIFIER,SetDoubleArrayRegion,SetDoubleArrayRegion)<SUB>3071</SUB>> ]
-"14902" [label = <(FIELD_IDENTIFIER,RegisterNatives,RegisterNatives)<SUB>3072</SUB>> ]
-"14905" [label = <(FIELD_IDENTIFIER,UnregisterNatives,UnregisterNatives)<SUB>3073</SUB>> ]
-"14908" [label = <(FIELD_IDENTIFIER,MonitorEnter,MonitorEnter)<SUB>3074</SUB>> ]
-"14911" [label = <(FIELD_IDENTIFIER,MonitorExit,MonitorExit)<SUB>3075</SUB>> ]
-"14914" [label = <(FIELD_IDENTIFIER,GetJavaVM,GetJavaVM)<SUB>3076</SUB>> ]
-"14917" [label = <(FIELD_IDENTIFIER,GetStringRegion,GetStringRegion)<SUB>3077</SUB>> ]
-"14920" [label = <(FIELD_IDENTIFIER,GetStringUTFRegion,GetStringUTFRegion)<SUB>3078</SUB>> ]
-"14923" [label = <(FIELD_IDENTIFIER,GetPrimitiveArrayCritical,GetPrimitiveArrayCritical)<SUB>3079</SUB>> ]
-"14926" [label = <(FIELD_IDENTIFIER,ReleasePrimitiveArrayCritical,ReleasePrimitiveArrayCritical)<SUB>3080</SUB>> ]
-"14929" [label = <(FIELD_IDENTIFIER,GetStringCritical,GetStringCritical)<SUB>3081</SUB>> ]
-"14932" [label = <(FIELD_IDENTIFIER,ReleaseStringCritical,ReleaseStringCritical)<SUB>3082</SUB>> ]
-"14935" [label = <(FIELD_IDENTIFIER,NewWeakGlobalRef,NewWeakGlobalRef)<SUB>3083</SUB>> ]
-"14938" [label = <(FIELD_IDENTIFIER,DeleteWeakGlobalRef,DeleteWeakGlobalRef)<SUB>3084</SUB>> ]
-"14941" [label = <(FIELD_IDENTIFIER,ExceptionCheck,ExceptionCheck)<SUB>3085</SUB>> ]
-"14944" [label = <(FIELD_IDENTIFIER,NewDirectByteBuffer,NewDirectByteBuffer)<SUB>3086</SUB>> ]
-"14947" [label = <(FIELD_IDENTIFIER,GetDirectBufferAddress,GetDirectBufferAddress)<SUB>3087</SUB>> ]
-"14950" [label = <(FIELD_IDENTIFIER,GetDirectBufferCapacity,GetDirectBufferCapacity)<SUB>3088</SUB>> ]
-"14953" [label = <(FIELD_IDENTIFIER,GetObjectRefType,GetObjectRefType)<SUB>3089</SUB>> ]
-"14258" [label = <(METHOD,&lt;clinit&gt;)> ]
-"14955" [label = <(METHOD_RETURN,ANY)> ]
-  "14260" -> "14955" 
-  "14262" -> "14260" 
-  "14267" -> "14272" 
-  "14270" -> "14275" 
-  "14273" -> "14278" 
-  "14276" -> "14281" 
-  "14279" -> "14284" 
-  "14282" -> "14287" 
-  "14285" -> "14290" 
-  "14288" -> "14293" 
-  "14291" -> "14296" 
-  "14294" -> "14299" 
-  "14297" -> "14302" 
-  "14300" -> "14305" 
-  "14303" -> "14308" 
-  "14306" -> "14311" 
-  "14309" -> "14314" 
-  "14312" -> "14317" 
-  "14315" -> "14320" 
-  "14318" -> "14323" 
-  "14321" -> "14326" 
-  "14324" -> "14329" 
-  "14327" -> "14332" 
-  "14330" -> "14335" 
-  "14333" -> "14338" 
-  "14336" -> "14341" 
-  "14339" -> "14344" 
-  "14342" -> "14347" 
-  "14345" -> "14350" 
-  "14348" -> "14353" 
-  "14351" -> "14356" 
-  "14354" -> "14359" 
-  "14357" -> "14362" 
-  "14360" -> "14365" 
-  "14363" -> "14368" 
-  "14366" -> "14371" 
-  "14369" -> "14374" 
-  "14372" -> "14377" 
-  "14375" -> "14380" 
-  "14378" -> "14383" 
-  "14381" -> "14386" 
-  "14384" -> "14389" 
-  "14387" -> "14392" 
-  "14390" -> "14395" 
-  "14393" -> "14398" 
-  "14396" -> "14401" 
-  "14399" -> "14404" 
-  "14402" -> "14407" 
-  "14405" -> "14410" 
-  "14408" -> "14413" 
-  "14411" -> "14416" 
-  "14414" -> "14419" 
-  "14417" -> "14422" 
-  "14420" -> "14425" 
-  "14423" -> "14428" 
-  "14426" -> "14431" 
-  "14429" -> "14434" 
-  "14432" -> "14437" 
-  "14435" -> "14440" 
-  "14438" -> "14443" 
-  "14441" -> "14446" 
-  "14444" -> "14449" 
-  "14447" -> "14452" 
-  "14450" -> "14455" 
-  "14453" -> "14458" 
-  "14456" -> "14461" 
-  "14459" -> "14464" 
-  "14462" -> "14467" 
-  "14465" -> "14470" 
-  "14468" -> "14473" 
-  "14471" -> "14476" 
-  "14474" -> "14479" 
-  "14477" -> "14482" 
-  "14480" -> "14485" 
-  "14483" -> "14488" 
-  "14486" -> "14491" 
-  "14489" -> "14494" 
-  "14492" -> "14497" 
-  "14495" -> "14500" 
-  "14498" -> "14503" 
-  "14501" -> "14506" 
-  "14504" -> "14509" 
-  "14507" -> "14512" 
-  "14510" -> "14515" 
-  "14513" -> "14518" 
-  "14516" -> "14521" 
-  "14519" -> "14524" 
-  "14522" -> "14527" 
-  "14525" -> "14530" 
-  "14528" -> "14533" 
-  "14531" -> "14536" 
-  "14534" -> "14539" 
-  "14537" -> "14542" 
-  "14540" -> "14545" 
-  "14543" -> "14548" 
-  "14546" -> "14551" 
-  "14549" -> "14554" 
-  "14552" -> "14557" 
-  "14555" -> "14560" 
-  "14558" -> "14563" 
-  "14561" -> "14566" 
-  "14564" -> "14569" 
-  "14567" -> "14572" 
-  "14570" -> "14575" 
-  "14573" -> "14578" 
-  "14576" -> "14581" 
-  "14579" -> "14584" 
-  "14582" -> "14587" 
-  "14585" -> "14590" 
-  "14588" -> "14593" 
-  "14591" -> "14596" 
-  "14594" -> "14599" 
-  "14597" -> "14602" 
-  "14600" -> "14605" 
-  "14603" -> "14608" 
-  "14606" -> "14611" 
-  "14609" -> "14614" 
-  "14612" -> "14617" 
-  "14615" -> "14620" 
-  "14618" -> "14623" 
-  "14621" -> "14626" 
-  "14624" -> "14629" 
-  "14627" -> "14632" 
-  "14630" -> "14635" 
-  "14633" -> "14638" 
-  "14636" -> "14641" 
-  "14639" -> "14644" 
-  "14642" -> "14647" 
-  "14645" -> "14650" 
-  "14648" -> "14653" 
-  "14651" -> "14656" 
-  "14654" -> "14659" 
-  "14657" -> "14662" 
-  "14660" -> "14665" 
-  "14663" -> "14668" 
-  "14666" -> "14671" 
-  "14669" -> "14674" 
-  "14672" -> "14677" 
-  "14675" -> "14680" 
-  "14678" -> "14683" 
-  "14681" -> "14686" 
-  "14684" -> "14689" 
-  "14687" -> "14692" 
-  "14690" -> "14695" 
-  "14693" -> "14698" 
-  "14696" -> "14701" 
-  "14699" -> "14704" 
-  "14702" -> "14707" 
-  "14705" -> "14710" 
-  "14708" -> "14713" 
-  "14711" -> "14716" 
-  "14714" -> "14719" 
-  "14717" -> "14722" 
-  "14720" -> "14725" 
-  "14723" -> "14728" 
-  "14726" -> "14731" 
-  "14729" -> "14734" 
-  "14732" -> "14737" 
-  "14735" -> "14740" 
-  "14738" -> "14743" 
-  "14741" -> "14746" 
-  "14744" -> "14749" 
-  "14747" -> "14752" 
-  "14750" -> "14755" 
-  "14753" -> "14758" 
-  "14756" -> "14761" 
-  "14759" -> "14764" 
-  "14762" -> "14767" 
-  "14765" -> "14770" 
-  "14768" -> "14773" 
-  "14771" -> "14776" 
-  "14774" -> "14779" 
-  "14777" -> "14782" 
-  "14780" -> "14785" 
-  "14783" -> "14788" 
-  "14786" -> "14791" 
-  "14789" -> "14794" 
-  "14792" -> "14797" 
-  "14795" -> "14800" 
-  "14798" -> "14803" 
-  "14801" -> "14806" 
-  "14804" -> "14809" 
-  "14807" -> "14812" 
-  "14810" -> "14815" 
-  "14813" -> "14818" 
-  "14816" -> "14821" 
-  "14819" -> "14824" 
-  "14822" -> "14827" 
-  "14825" -> "14830" 
-  "14828" -> "14833" 
-  "14831" -> "14836" 
-  "14834" -> "14839" 
-  "14837" -> "14842" 
-  "14840" -> "14845" 
-  "14843" -> "14848" 
-  "14846" -> "14851" 
-  "14849" -> "14854" 
-  "14852" -> "14857" 
-  "14855" -> "14860" 
-  "14858" -> "14863" 
-  "14861" -> "14866" 
-  "14864" -> "14869" 
-  "14867" -> "14872" 
-  "14870" -> "14875" 
-  "14873" -> "14878" 
-  "14876" -> "14881" 
-  "14879" -> "14884" 
-  "14882" -> "14887" 
-  "14885" -> "14890" 
-  "14888" -> "14893" 
-  "14891" -> "14896" 
-  "14894" -> "14899" 
-  "14897" -> "14902" 
-  "14900" -> "14905" 
-  "14903" -> "14908" 
-  "14906" -> "14911" 
-  "14909" -> "14914" 
-  "14912" -> "14917" 
-  "14915" -> "14920" 
-  "14918" -> "14923" 
-  "14921" -> "14926" 
-  "14924" -> "14929" 
-  "14927" -> "14932" 
-  "14930" -> "14935" 
-  "14933" -> "14938" 
-  "14936" -> "14941" 
-  "14939" -> "14944" 
-  "14942" -> "14947" 
-  "14945" -> "14950" 
-  "14948" -> "14953" 
-  "14951" -> "14262" 
-  "14269" -> "14267" 
-  "14272" -> "14270" 
-  "14275" -> "14273" 
-  "14278" -> "14276" 
-  "14281" -> "14279" 
-  "14284" -> "14282" 
-  "14287" -> "14285" 
-  "14290" -> "14288" 
-  "14293" -> "14291" 
-  "14296" -> "14294" 
-  "14299" -> "14297" 
-  "14302" -> "14300" 
-  "14305" -> "14303" 
-  "14308" -> "14306" 
-  "14311" -> "14309" 
-  "14314" -> "14312" 
-  "14317" -> "14315" 
-  "14320" -> "14318" 
-  "14323" -> "14321" 
-  "14326" -> "14324" 
-  "14329" -> "14327" 
-  "14332" -> "14330" 
-  "14335" -> "14333" 
-  "14338" -> "14336" 
-  "14341" -> "14339" 
-  "14344" -> "14342" 
-  "14347" -> "14345" 
-  "14350" -> "14348" 
-  "14353" -> "14351" 
-  "14356" -> "14354" 
-  "14359" -> "14357" 
-  "14362" -> "14360" 
-  "14365" -> "14363" 
-  "14368" -> "14366" 
-  "14371" -> "14369" 
-  "14374" -> "14372" 
-  "14377" -> "14375" 
-  "14380" -> "14378" 
-  "14383" -> "14381" 
-  "14386" -> "14384" 
-  "14389" -> "14387" 
-  "14392" -> "14390" 
-  "14395" -> "14393" 
-  "14398" -> "14396" 
-  "14401" -> "14399" 
-  "14404" -> "14402" 
-  "14407" -> "14405" 
-  "14410" -> "14408" 
-  "14413" -> "14411" 
-  "14416" -> "14414" 
-  "14419" -> "14417" 
-  "14422" -> "14420" 
-  "14425" -> "14423" 
-  "14428" -> "14426" 
-  "14431" -> "14429" 
-  "14434" -> "14432" 
-  "14437" -> "14435" 
-  "14440" -> "14438" 
-  "14443" -> "14441" 
-  "14446" -> "14444" 
-  "14449" -> "14447" 
-  "14452" -> "14450" 
-  "14455" -> "14453" 
-  "14458" -> "14456" 
-  "14461" -> "14459" 
-  "14464" -> "14462" 
-  "14467" -> "14465" 
-  "14470" -> "14468" 
-  "14473" -> "14471" 
-  "14476" -> "14474" 
-  "14479" -> "14477" 
-  "14482" -> "14480" 
-  "14485" -> "14483" 
-  "14488" -> "14486" 
-  "14491" -> "14489" 
-  "14494" -> "14492" 
-  "14497" -> "14495" 
-  "14500" -> "14498" 
-  "14503" -> "14501" 
-  "14506" -> "14504" 
-  "14509" -> "14507" 
-  "14512" -> "14510" 
-  "14515" -> "14513" 
-  "14518" -> "14516" 
-  "14521" -> "14519" 
-  "14524" -> "14522" 
-  "14527" -> "14525" 
-  "14530" -> "14528" 
-  "14533" -> "14531" 
-  "14536" -> "14534" 
-  "14539" -> "14537" 
-  "14542" -> "14540" 
-  "14545" -> "14543" 
-  "14548" -> "14546" 
-  "14551" -> "14549" 
-  "14554" -> "14552" 
-  "14557" -> "14555" 
-  "14560" -> "14558" 
-  "14563" -> "14561" 
-  "14566" -> "14564" 
-  "14569" -> "14567" 
-  "14572" -> "14570" 
-  "14575" -> "14573" 
-  "14578" -> "14576" 
-  "14581" -> "14579" 
-  "14584" -> "14582" 
-  "14587" -> "14585" 
-  "14590" -> "14588" 
-  "14593" -> "14591" 
-  "14596" -> "14594" 
-  "14599" -> "14597" 
-  "14602" -> "14600" 
-  "14605" -> "14603" 
-  "14608" -> "14606" 
-  "14611" -> "14609" 
-  "14614" -> "14612" 
-  "14617" -> "14615" 
-  "14620" -> "14618" 
-  "14623" -> "14621" 
-  "14626" -> "14624" 
-  "14629" -> "14627" 
-  "14632" -> "14630" 
-  "14635" -> "14633" 
-  "14638" -> "14636" 
-  "14641" -> "14639" 
-  "14644" -> "14642" 
-  "14647" -> "14645" 
-  "14650" -> "14648" 
-  "14653" -> "14651" 
-  "14656" -> "14654" 
-  "14659" -> "14657" 
-  "14662" -> "14660" 
-  "14665" -> "14663" 
-  "14668" -> "14666" 
-  "14671" -> "14669" 
-  "14674" -> "14672" 
-  "14677" -> "14675" 
-  "14680" -> "14678" 
-  "14683" -> "14681" 
-  "14686" -> "14684" 
-  "14689" -> "14687" 
-  "14692" -> "14690" 
-  "14695" -> "14693" 
-  "14698" -> "14696" 
-  "14701" -> "14699" 
-  "14704" -> "14702" 
-  "14707" -> "14705" 
-  "14710" -> "14708" 
-  "14713" -> "14711" 
-  "14716" -> "14714" 
-  "14719" -> "14717" 
-  "14722" -> "14720" 
-  "14725" -> "14723" 
-  "14728" -> "14726" 
-  "14731" -> "14729" 
-  "14734" -> "14732" 
-  "14737" -> "14735" 
-  "14740" -> "14738" 
-  "14743" -> "14741" 
-  "14746" -> "14744" 
-  "14749" -> "14747" 
-  "14752" -> "14750" 
-  "14755" -> "14753" 
-  "14758" -> "14756" 
-  "14761" -> "14759" 
-  "14764" -> "14762" 
-  "14767" -> "14765" 
-  "14770" -> "14768" 
-  "14773" -> "14771" 
-  "14776" -> "14774" 
-  "14779" -> "14777" 
-  "14782" -> "14780" 
-  "14785" -> "14783" 
-  "14788" -> "14786" 
-  "14791" -> "14789" 
-  "14794" -> "14792" 
-  "14797" -> "14795" 
-  "14800" -> "14798" 
-  "14803" -> "14801" 
-  "14806" -> "14804" 
-  "14809" -> "14807" 
-  "14812" -> "14810" 
-  "14815" -> "14813" 
-  "14818" -> "14816" 
-  "14821" -> "14819" 
-  "14824" -> "14822" 
-  "14827" -> "14825" 
-  "14830" -> "14828" 
-  "14833" -> "14831" 
-  "14836" -> "14834" 
-  "14839" -> "14837" 
-  "14842" -> "14840" 
-  "14845" -> "14843" 
-  "14848" -> "14846" 
-  "14851" -> "14849" 
-  "14854" -> "14852" 
-  "14857" -> "14855" 
-  "14860" -> "14858" 
-  "14863" -> "14861" 
-  "14866" -> "14864" 
-  "14869" -> "14867" 
-  "14872" -> "14870" 
-  "14875" -> "14873" 
-  "14878" -> "14876" 
-  "14881" -> "14879" 
-  "14884" -> "14882" 
-  "14887" -> "14885" 
-  "14890" -> "14888" 
-  "14893" -> "14891" 
-  "14896" -> "14894" 
-  "14899" -> "14897" 
-  "14902" -> "14900" 
-  "14905" -> "14903" 
-  "14908" -> "14906" 
-  "14911" -> "14909" 
-  "14914" -> "14912" 
-  "14917" -> "14915" 
-  "14920" -> "14918" 
-  "14923" -> "14921" 
-  "14926" -> "14924" 
-  "14929" -> "14927" 
-  "14932" -> "14930" 
-  "14935" -> "14933" 
-  "14938" -> "14936" 
-  "14941" -> "14939" 
-  "14944" -> "14942" 
-  "14947" -> "14945" 
-  "14950" -> "14948" 
-  "14953" -> "14951" 
-  "14258" -> "14269" 
+digraph "operator &lt;&lt;" {  
+"14879" [label = <(&lt;operator&gt;.shiftLeft,os &lt;&lt; &quot;JNIInvalidRefType&quot;)<SUB>3216</SUB>> ]
+"14882" [label = <(RETURN,return os;,return os;)<SUB>3217</SUB>> ]
+"14886" [label = <(&lt;operator&gt;.shiftLeft,os &lt;&lt; &quot;JNILocalRefType&quot;)<SUB>3219</SUB>> ]
+"14889" [label = <(RETURN,return os;,return os;)<SUB>3220</SUB>> ]
+"14893" [label = <(&lt;operator&gt;.shiftLeft,os &lt;&lt; &quot;JNIGlobalRefType&quot;)<SUB>3222</SUB>> ]
+"14896" [label = <(RETURN,return os;,return os;)<SUB>3223</SUB>> ]
+"14900" [label = <(&lt;operator&gt;.shiftLeft,os &lt;&lt; &quot;JNIWeakGlobalRefType&quot;)<SUB>3225</SUB>> ]
+"14903" [label = <(RETURN,return os;,return os;)<SUB>3226</SUB>> ]
+"14906" [label = <(&lt;operator&gt;.shiftLeft,LOG(FATAL) &lt;&lt; &quot;jobjectRefType[&quot; &lt;&lt; static_cast&lt;int&gt;(rhs) &lt;&lt; &quot;]&quot;)<SUB>3228</SUB>> ]
+"14916" [label = <(UNREACHABLE,UNREACHABLE())<SUB>3229</SUB>> ]
+"14907" [label = <(&lt;operator&gt;.shiftLeft,LOG(FATAL) &lt;&lt; &quot;jobjectRefType[&quot; &lt;&lt; static_cast&lt;int&gt;(rhs))<SUB>3228</SUB>> ]
+"14908" [label = <(&lt;operator&gt;.shiftLeft,LOG(FATAL) &lt;&lt; &quot;jobjectRefType[&quot;)<SUB>3228</SUB>> ]
+"14912" [label = <(&lt;operator&gt;.cast,static_cast&lt;int&gt;(rhs))<SUB>3228</SUB>> ]
+"14909" [label = <(LOG,LOG(FATAL))<SUB>3228</SUB>> ]
+"14913" [label = <(UNKNOWN,int,int)<SUB>3228</SUB>> ]
+"14870" [label = <(METHOD,operator &lt;&lt;)<SUB>3213</SUB>> ]
+"14917" [label = <(METHOD_RETURN,ostream)<SUB>3213</SUB>> ]
+  "14879" -> "14882" 
+  "14882" -> "14917" 
+  "14886" -> "14889" 
+  "14889" -> "14917" 
+  "14893" -> "14896" 
+  "14896" -> "14917" 
+  "14900" -> "14903" 
+  "14903" -> "14917" 
+  "14906" -> "14916" 
+  "14916" -> "14917" 
+  "14907" -> "14906" 
+  "14908" -> "14913" 
+  "14912" -> "14907" 
+  "14909" -> "14908" 
+  "14913" -> "14912" 
+  "14870" -> "14879" 
+  "14870" -> "14886" 
+  "14870" -> "14893" 
+  "14870" -> "14900" 
+  "14870" -> "14909" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/264-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/264-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/264-cfg.dot	2023-06-07 19:35:01.617387150 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/264-cfg.dot	2023-06-07 19:35:08.147386503 +0330
@@ -1,40 +1,167 @@
-digraph "GetJniNativeInterface" {  
-"14958" [label = <(RETURN,return Runtime::Current()-&gt;GetJniIdType() == JniIdType::kPointer\012 ? &amp;JniNativeInterfaceFunctions&lt;false&gt;::gJniNativeInterface\012 : &amp;JniNativeInterfaceFunctions&lt;true&gt;::gJniNativeInterface;,return Runtime::Current()-&gt;GetJniIdType() == JniIdType::kPointer\012 ? &amp;JniNativeInterfaceFunctions&lt;false&gt;::gJniNativeInterface\012 : &amp;JniNativeInterfaceFunctions&lt;true&gt;::gJniNativeInterface;)<SUB>3097</SUB>> ]
-"14959" [label = <(&lt;operator&gt;.conditional,Runtime::Current()-&gt;GetJniIdType() == JniIdType::kPointer\012 ? &amp;JniNativeInterfaceFunctions&lt;false&gt;::gJniNativeInterface\012 : &amp;JniNativeInterfaceFunctions&lt;true&gt;::gJniNativeInterface)<SUB>3097</SUB>> ]
-"14960" [label = <(&lt;operator&gt;.equals,Runtime::Current()-&gt;GetJniIdType() == JniIdType::kPointer)<SUB>3097</SUB>> ]
-"14971" [label = <(&lt;operator&gt;.addressOf,&amp;JniNativeInterfaceFunctions&lt;false&gt;::gJniNativeInterface)<SUB>3098</SUB>> ]
-"14975" [label = <(&lt;operator&gt;.addressOf,&amp;JniNativeInterfaceFunctions&lt;true&gt;::gJniNativeInterface)<SUB>3099</SUB>> ]
-"14961" [label = <(GetJniIdType,Runtime::Current()-&gt;GetJniIdType())<SUB>3097</SUB>> ]
-"14968" [label = <(&lt;operator&gt;.fieldAccess,JniIdType::kPointer)<SUB>3097</SUB>> ]
-"14972" [label = <(&lt;operator&gt;.fieldAccess,JniNativeInterfaceFunctions&lt;false&gt;::gJniNativeInterface)<SUB>3098</SUB>> ]
-"14976" [label = <(&lt;operator&gt;.fieldAccess,JniNativeInterfaceFunctions&lt;true&gt;::gJniNativeInterface)<SUB>3099</SUB>> ]
-"14962" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetJniIdType)<SUB>3097</SUB>> ]
-"14970" [label = <(FIELD_IDENTIFIER,kPointer,kPointer)<SUB>3097</SUB>> ]
-"14974" [label = <(FIELD_IDENTIFIER,gJniNativeInterface,gJniNativeInterface)<SUB>3098</SUB>> ]
-"14978" [label = <(FIELD_IDENTIFIER,gJniNativeInterface,gJniNativeInterface)<SUB>3099</SUB>> ]
-"14963" [label = <(Runtime::Current,Runtime::Current())<SUB>3097</SUB>> ]
-"14967" [label = <(FIELD_IDENTIFIER,GetJniIdType,GetJniIdType)<SUB>3097</SUB>> ]
-"14964" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>3097</SUB>> ]
-"14966" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>3097</SUB>> ]
-"14956" [label = <(METHOD,GetJniNativeInterface)<SUB>3093</SUB>> ]
-"14979" [label = <(METHOD_RETURN,JNINativeInterface)<SUB>3093</SUB>> ]
-  "14958" -> "14979" 
-  "14959" -> "14958" 
-  "14960" -> "14974" 
-  "14960" -> "14978" 
-  "14971" -> "14959" 
-  "14975" -> "14959" 
-  "14961" -> "14970" 
-  "14968" -> "14960" 
-  "14972" -> "14971" 
-  "14976" -> "14975" 
-  "14962" -> "14961" 
-  "14970" -> "14968" 
-  "14974" -> "14972" 
-  "14978" -> "14976" 
-  "14963" -> "14967" 
-  "14967" -> "14962" 
-  "14964" -> "14963" 
-  "14966" -> "14964" 
-  "14956" -> "14966" 
+digraph "&lt;global&gt;" {  
+"17391" [label = <(UNKNOWN,TEST_F(JniInternalTest, AllocObject) {\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012  jobject o = env_-&gt;AllocObject(c);\012  ASSERT_NE(o, nullptr);\012\012 // We have an instance of the class we asked for...\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(o, c));\012 // ...whose fields haven't been initialized because\012 // we didn't call a constructor.\012 // Even with string compression empty string has `count == 0`.\012  ASSERT_EQ(0, env_-&gt;GetIntField(o, env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;)));\012},TEST_F(JniInternalTest, AllocObject) {\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012  jobject o = env_-&gt;AllocObject(c);\012  ASSERT_NE(o, nullptr);\012\012 // We have an instance of the class we asked for...\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(o, c));\012 // ...whose fields haven't been initialized because\012 // we didn't call a constructor.\012 // Even with string compression empty string has `count == 0`.\012  ASSERT_EQ(0, env_-&gt;GetIntField(o, env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;)));\012})<SUB>675</SUB>> ]
+"17392" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetVersion) {\012  ASSERT_EQ(JNI_VERSION_1_6, env_-&gt;GetVersion());\012},TEST_F(JniInternalTest, GetVersion) {\012  ASSERT_EQ(JNI_VERSION_1_6, env_-&gt;GetVersion());\012})<SUB>689</SUB>> ]
+"17393" [label = <(UNKNOWN,TEST_F(JniInternalTest, FindClass) {\012 // This tests leads to warnings in the log.\012 ScopedLogSeverity sls(LogSeverity::ERROR);\012\012 FindClassTest(false);\012 FindClassTest(true);\012},TEST_F(JniInternalTest, FindClass) {\012 // This tests leads to warnings in the log.\012 ScopedLogSeverity sls(LogSeverity::ERROR);\012\012 FindClassTest(false);\012 FindClassTest(true);\012})<SUB>693</SUB>> ]
+"17394" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetFieldID) {\012  jclass jlnsfe = env_-&gt;FindClass(&quot;java/lang/NoSuchFieldError&quot;);\012  ASSERT_NE(jlnsfe, nullptr);\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012\012 // Wrong type.\012  jfieldID fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;J&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Wrong type where type doesn't exist.\012  fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;Lrod/jane/freddy;&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Wrong name.\012  fid = env_-&gt;GetFieldID(c, &quot;Count&quot;, &quot;I&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Good declared field lookup.\012  fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;);\012  EXPECT_NE(nullptr, fid);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Good superclass field lookup.\012  c = env_-&gt;FindClass(&quot;java/lang/StringBuilder&quot;);\012  fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;);\012  EXPECT_NE(nullptr, fid);\012  EXPECT_NE(fid, nullptr);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Not instance.\012  fid = env_-&gt;GetFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;Ljava/util/Comparator;&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Bad arguments.\012 GetFieldIdBadArgumentTest(false);\012 GetFieldIdBadArgumentTest(true);\012},TEST_F(JniInternalTest, GetFieldID) {\012  jclass jlnsfe = env_-&gt;FindClass(&quot;java/lang/NoSuchFieldError&quot;);\012  ASSERT_NE(jlnsfe, nullptr);\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012\012 // Wrong type.\012  jfieldID fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;J&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Wrong type where type doesn't exist.\012  fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;Lrod/jane/freddy;&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Wrong name.\012  fid = env_-&gt;GetFieldID(c, &quot;Count&quot;, &quot;I&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Good declared field lookup.\012  fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;);\012  EXPECT_NE(nullptr, fid);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Good superclass field lookup.\012  c = env_-&gt;FindClass(&quot;java/lang/StringBuilder&quot;);\012  fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;);\012  EXPECT_NE(nullptr, fid);\012  EXPECT_NE(fid, nullptr);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Not instance.\012  fid = env_-&gt;GetFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;Ljava/util/Comparator;&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Bad arguments.\012 GetFieldIdBadArgumentTest(false);\012 GetFieldIdBadArgumentTest(true);\012})<SUB>701</SUB>> ]
+"17395" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetStaticFieldID) {\012  jclass jlnsfe = env_-&gt;FindClass(&quot;java/lang/NoSuchFieldError&quot;);\012  ASSERT_NE(jlnsfe, nullptr);\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012\012 // Wrong type.\012  jfieldID fid = env_-&gt;GetStaticFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;J&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Wrong type where type doesn't exist.\012  fid = env_-&gt;GetStaticFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;Lrod/jane/freddy;&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Wrong name.\012  fid = env_-&gt;GetStaticFieldID(c, &quot;cASE_INSENSITIVE_ORDER&quot;, &quot;Ljava/util/Comparator;&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Good declared field lookup.\012  fid = env_-&gt;GetStaticFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;Ljava/util/Comparator;&quot;);\012  EXPECT_NE(nullptr, fid);\012  EXPECT_NE(fid, nullptr);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Not static.\012  fid = env_-&gt;GetStaticFieldID(c, &quot;count&quot;, &quot;I&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Bad arguments.\012 GetStaticFieldIdBadArgumentTest(false);\012 GetStaticFieldIdBadArgumentTest(true);\012},TEST_F(JniInternalTest, GetStaticFieldID) {\012  jclass jlnsfe = env_-&gt;FindClass(&quot;java/lang/NoSuchFieldError&quot;);\012  ASSERT_NE(jlnsfe, nullptr);\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012\012 // Wrong type.\012  jfieldID fid = env_-&gt;GetStaticFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;J&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Wrong type where type doesn't exist.\012  fid = env_-&gt;GetStaticFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;Lrod/jane/freddy;&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Wrong name.\012  fid = env_-&gt;GetStaticFieldID(c, &quot;cASE_INSENSITIVE_ORDER&quot;, &quot;Ljava/util/Comparator;&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Good declared field lookup.\012  fid = env_-&gt;GetStaticFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;Ljava/util/Comparator;&quot;);\012  EXPECT_NE(nullptr, fid);\012  EXPECT_NE(fid, nullptr);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Not static.\012  fid = env_-&gt;GetStaticFieldID(c, &quot;count&quot;, &quot;I&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Bad arguments.\012 GetStaticFieldIdBadArgumentTest(false);\012 GetStaticFieldIdBadArgumentTest(true);\012})<SUB>744</SUB>> ]
+"17396" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetMethodID) {\012  jclass jlobject = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  jclass jlstring = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  jclass jlnsme = env_-&gt;FindClass(&quot;java/lang/NoSuchMethodError&quot;);\012  jclass jncrbc = env_-&gt;FindClass(&quot;java/nio/channels/ReadableByteChannel&quot;);\012\012 // Sanity check that no exceptions are pending.\012  ASSERT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Check that java.lang.Object.foo() doesn't exist and NoSuchMethodError is\012 // a pending exception.\012  jmethodID method = env_-&gt;GetMethodID(jlobject, &quot;foo&quot;, &quot;()V&quot;);\012  EXPECT_EQ(nullptr, method);\012 ExpectException(jlnsme);\012\012 // Check that java.lang.Object.equals() does exist.\012  method = env_-&gt;GetMethodID(jlobject, &quot;equals&quot;, &quot;(Ljava/lang/Object;)Z&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Check that GetMethodID for java.lang.String.valueOf(int) fails as the\012 // method is static.\012  method = env_-&gt;GetMethodID(jlstring, &quot;valueOf&quot;, &quot;(I)Ljava/lang/String;&quot;);\012  EXPECT_EQ(nullptr, method);\012 ExpectException(jlnsme);\012\012 // Check that GetMethodID for java.lang.NoSuchMethodError.&lt;init&gt;(String) finds the constructor.\012  method = env_-&gt;GetMethodID(jlnsme, &quot;&lt;init&gt;&quot;, &quot;(Ljava/lang/String;)V&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Check that GetMethodID can find a interface method inherited from another interface.\012  method = env_-&gt;GetMethodID(jncrbc, &quot;close&quot;, &quot;()V&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Bad arguments.\012 GetMethodIdBadArgumentTest(false);\012 GetMethodIdBadArgumentTest(true);\012},TEST_F(JniInternalTest, GetMethodID) {\012  jclass jlobject = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  jclass jlstring = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  jclass jlnsme = env_-&gt;FindClass(&quot;java/lang/NoSuchMethodError&quot;);\012  jclass jncrbc = env_-&gt;FindClass(&quot;java/nio/channels/ReadableByteChannel&quot;);\012\012 // Sanity check that no exceptions are pending.\012  ASSERT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Check that java.lang.Object.foo() doesn't exist and NoSuchMethodError is\012 // a pending exception.\012  jmethodID method = env_-&gt;GetMethodID(jlobject, &quot;foo&quot;, &quot;()V&quot;);\012  EXPECT_EQ(nullptr, method);\012 ExpectException(jlnsme);\012\012 // Check that java.lang.Object.equals() does exist.\012  method = env_-&gt;GetMethodID(jlobject, &quot;equals&quot;, &quot;(Ljava/lang/Object;)Z&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Check that GetMethodID for java.lang.String.valueOf(int) fails as the\012 // method is static.\012  method = env_-&gt;GetMethodID(jlstring, &quot;valueOf&quot;, &quot;(I)Ljava/lang/String;&quot;);\012  EXPECT_EQ(nullptr, method);\012 ExpectException(jlnsme);\012\012 // Check that GetMethodID for java.lang.NoSuchMethodError.&lt;init&gt;(String) finds the constructor.\012  method = env_-&gt;GetMethodID(jlnsme, &quot;&lt;init&gt;&quot;, &quot;(Ljava/lang/String;)V&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Check that GetMethodID can find a interface method inherited from another interface.\012  method = env_-&gt;GetMethodID(jncrbc, &quot;close&quot;, &quot;()V&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Bad arguments.\012 GetMethodIdBadArgumentTest(false);\012 GetMethodIdBadArgumentTest(true);\012})<SUB>781</SUB>> ]
+"17397" [label = <(UNKNOWN,TEST_F(JniInternalTest, CallVoidMethodNullReceiver) {\012  jclass jlobject = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  jmethodID method;\012\012 // Check that GetMethodID for java.lang.NoSuchMethodError.&lt;init&gt;(String) finds the constructor.\012  method = env_-&gt;GetMethodID(jlobject, &quot;&lt;init&gt;&quot;, &quot;()V&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Null object to CallVoidMethod.\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  env_-&gt;CallVoidMethod(nullptr, method);\012  check_jni_abort_catcher.Check(&quot;null&quot;);\012},TEST_F(JniInternalTest, CallVoidMethodNullReceiver) {\012  jclass jlobject = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  jmethodID method;\012\012 // Check that GetMethodID for java.lang.NoSuchMethodError.&lt;init&gt;(String) finds the constructor.\012  method = env_-&gt;GetMethodID(jlobject, &quot;&lt;init&gt;&quot;, &quot;()V&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Null object to CallVoidMethod.\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  env_-&gt;CallVoidMethod(nullptr, method);\012  check_jni_abort_catcher.Check(&quot;null&quot;);\012})<SUB>822</SUB>> ]
+"17398" [label = <(UNKNOWN,TEST_F(JniInternalTest, CallVarArgMethodBadPrimitive) {\012 // Check that bad primitive values cause check JNI to abort when\012 // passed out-of-range primitive value var args. As var args can't\012 // differentiate type sizes less than an int, and this isn't\012 // corrected by JNI, this helps ensure JNI code is valid.\012#define DoCall(boxed_type, shorty, c_type, bad_value)                   \\012 {                                                                     \\012    jclass prim_class = env_-&gt;FindClass(&quot;java/lang/&quot; #boxed_type);      \\012    jmethodID method = env_-&gt;GetStaticMethodID(prim_class, &quot;valueOf&quot;,   \\012 &quot;(&quot; #shorty &quot;)Ljava/lang/&quot; #boxed_type &quot;;&quot;); \\012    EXPECT_NE(nullptr, method);                                         \\012    EXPECT_FALSE(env_-&gt;ExceptionCheck());                               \\012 CheckJniAbortCatcher check_jni_abort_catcher;                       \\012    env_-&gt;CallStaticObjectMethod(prim_class, method, bad_value);        \\012    check_jni_abort_catcher.Check(&quot;unexpected &quot; #c_type &quot; value: &quot; #bad_value); \\012 }\012\012 DoCall(Boolean, Z, jboolean, 2);\012 DoCall(Byte, B, jbyte, 128);\012 DoCall(Byte, B, jbyte, -129);\012 DoCall(Short, S, jshort, 32768);\012 DoCall(Short, S, jshort, -32769);\012 DoCall(Character, C, jchar, 65536);\012 DoCall(Character, C, jchar, -1);\012#undef DoCall\012},TEST_F(JniInternalTest, CallVarArgMethodBadPrimitive) {\012 // Check that bad primitive values cause check JNI to abort when\012 // passed out-of-range primitive value var args. As var args can't\012 // differentiate type sizes less than an int, and this isn't\012 // corrected by JNI, this helps ensure JNI code is valid.\012#define DoCall(boxed_type, shorty, c_type, bad_value)                   \\012 {                                                                     \\012    jclass prim_class = env_-&gt;FindClass(&quot;java/lang/&quot; #boxed_type);      \\012    jmethodID method = env_-&gt;GetStaticMethodID(prim_class, &quot;valueOf&quot;,   \\012 &quot;(&quot; #shorty &quot;)Ljava/lang/&quot; #boxed_type &quot;;&quot;); \\012    EXPECT_NE(nullptr, method);                                         \\012    EXPECT_FALSE(env_-&gt;ExceptionCheck());                               \\012 CheckJniAbortCatcher check_jni_abort_catcher;                       \\012    env_-&gt;CallStaticObjectMethod(prim_class, method, bad_value);        \\012    check_jni_abort_catcher.Check(&quot;unexpected &quot; #c_type &quot; value: &quot; #bad_value); \\012 }\012\012 DoCall(Boolean, Z, jboolean, 2);\012 DoCall(Byte, B, jbyte, 128);\012 DoCall(Byte, B, jbyte, -129);\012 DoCall(Short, S, jshort, 32768);\012 DoCall(Short, S, jshort, -32769);\012 DoCall(Character, C, jchar, 65536);\012 DoCall(Character, C, jchar, -1);\012#undef DoCall\012})<SUB>837</SUB>> ]
+"17399" [label = <(UNKNOWN,TEST_F(JniInternalTest, CallJValueMethodBadPrimitive) {\012 // Check that bad primitive values, passed as jvalues, cause check\012 // JNI to abort. Unlike with var args, sizes less than an int should\012 // be truncated or sign extended and not cause an abort except for\012 // jbooleans that are passed as bytes.\012#define DoFailCall(boxed_type, shorty, c_type, bad_value)               \\012 {                                                                     \\012    jclass prim_class = env_-&gt;FindClass(&quot;java/lang/&quot; #boxed_type);      \\012    jmethodID method = env_-&gt;GetStaticMethodID(prim_class, &quot;valueOf&quot;,   \\012 &quot;(&quot; #shorty &quot;)Ljava/lang/&quot; #boxed_type &quot;;&quot;); \\012    EXPECT_NE(nullptr, method);                                         \\012    EXPECT_FALSE(env_-&gt;ExceptionCheck());                               \\012 CheckJniAbortCatcher check_jni_abort_catcher;                       \\012    jvalue jval;                                                        \\012    jval.i = bad_value;                                                 \\012    env_-&gt;CallStaticObjectMethodA(prim_class, method, &amp;jval);           \\012    check_jni_abort_catcher.Check(&quot;unexpected &quot; #c_type &quot; value: &quot; #bad_value); \\012 }\012#define DoGoodCall(boxed_type, shorty, c_type, bad_value)               \\012 {                                                                     \\012    jclass prim_class = env_-&gt;FindClass(&quot;java/lang/&quot; #boxed_type);      \\012    jmethodID method = env_-&gt;GetStaticMethodID(prim_class, &quot;valueOf&quot;,   \\012 &quot;(&quot; #shorty &quot;)Ljava/lang/&quot; #boxed_type &quot;;&quot;); \\012    EXPECT_NE(nullptr, method);                                         \\012    EXPECT_FALSE(env_-&gt;ExceptionCheck());                               \\012    jvalue jval;                                                        \\012    jval.i = bad_value;                                                 \\012    env_-&gt;CallStaticObjectMethodA(prim_class, method, &amp;jval);           \\012 }\012\012 DoFailCall(Boolean, Z, jboolean, 2);\012 DoGoodCall(Byte, B, jbyte, 128);\012 DoGoodCall(Byte, B, jbyte, -129);\012 DoGoodCall(Short, S, jshort, 32768);\012 DoGoodCall(Short, S, jshort, -32769);\012 DoGoodCall(Character, C, jchar, 65536);\012 DoGoodCall(Character, C, jchar, -1);\012#undef DoCall\012},TEST_F(JniInternalTest, CallJValueMethodBadPrimitive) {\012 // Check that bad primitive values, passed as jvalues, cause check\012 // JNI to abort. Unlike with var args, sizes less than an int should\012 // be truncated or sign extended and not cause an abort except for\012 // jbooleans that are passed as bytes.\012#define DoFailCall(boxed_type, shorty, c_type, bad_value)               \\012 {                                                                     \\012    jclass prim_class = env_-&gt;FindClass(&quot;java/lang/&quot; #boxed_type);      \\012    jmethodID method = env_-&gt;GetStaticMethodID(prim_class, &quot;valueOf&quot;,   \\012 &quot;(&quot; #shorty &quot;)Ljava/lang/&quot; #boxed_type &quot;;&quot;); \\012    EXPECT_NE(nullptr, method);                                         \\012    EXPECT_FALSE(env_-&gt;ExceptionCheck());                               \\012 CheckJniAbortCatcher check_jni_abort_catcher;                       \\012    jvalue jval;                                                        \\012    jval.i = bad_value;                                                 \\012    env_-&gt;CallStaticObjectMethodA(prim_class, method, &amp;jval);           \\012    check_jni_abort_catcher.Check(&quot;unexpected &quot; #c_type &quot; value: &quot; #bad_value); \\012 }\012#define DoGoodCall(boxed_type, shorty, c_type, bad_value)               \\012 {                                                                     \\012    jclass prim_class = env_-&gt;FindClass(&quot;java/lang/&quot; #boxed_type);      \\012    jmethodID method = env_-&gt;GetStaticMethodID(prim_class, &quot;valueOf&quot;,   \\012 &quot;(&quot; #shorty &quot;)Ljava/lang/&quot; #boxed_type &quot;;&quot;); \\012    EXPECT_NE(nullptr, method);                                         \\012    EXPECT_FALSE(env_-&gt;ExceptionCheck());                               \\012    jvalue jval;                                                        \\012    jval.i = bad_value;                                                 \\012    env_-&gt;CallStaticObjectMethodA(prim_class, method, &amp;jval);           \\012 }\012\012 DoFailCall(Boolean, Z, jboolean, 2);\012 DoGoodCall(Byte, B, jbyte, 128);\012 DoGoodCall(Byte, B, jbyte, -129);\012 DoGoodCall(Short, S, jshort, 32768);\012 DoGoodCall(Short, S, jshort, -32769);\012 DoGoodCall(Character, C, jchar, 65536);\012 DoGoodCall(Character, C, jchar, -1);\012#undef DoCall\012})<SUB>864</SUB>> ]
+"17400" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetStaticMethodID) {\012  jclass jlobject = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  jclass jlnsme = env_-&gt;FindClass(&quot;java/lang/NoSuchMethodError&quot;);\012\012 // Sanity check that no exceptions are pending\012  ASSERT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Check that java.lang.Object.foo() doesn't exist and NoSuchMethodError is\012 // a pending exception\012  jmethodID method = env_-&gt;GetStaticMethodID(jlobject, &quot;foo&quot;, &quot;()V&quot;);\012  EXPECT_EQ(nullptr, method);\012 ExpectException(jlnsme);\012\012 // Check that GetStaticMethodID for java.lang.Object.equals(Object) fails as\012 // the method is not static\012  method = env_-&gt;GetStaticMethodID(jlobject, &quot;equals&quot;, &quot;(Ljava/lang/Object;)Z&quot;);\012  EXPECT_EQ(nullptr, method);\012 ExpectException(jlnsme);\012\012 // Check that java.lang.String.valueOf(int) does exist\012  jclass jlstring = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  method = env_-&gt;GetStaticMethodID(jlstring, &quot;valueOf&quot;, &quot;(I)Ljava/lang/String;&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Bad arguments.\012 GetStaticMethodIdBadArgumentTest(false);\012 GetStaticMethodIdBadArgumentTest(true);\012},TEST_F(JniInternalTest, GetStaticMethodID) {\012  jclass jlobject = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  jclass jlnsme = env_-&gt;FindClass(&quot;java/lang/NoSuchMethodError&quot;);\012\012 // Sanity check that no exceptions are pending\012  ASSERT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Check that java.lang.Object.foo() doesn't exist and NoSuchMethodError is\012 // a pending exception\012  jmethodID method = env_-&gt;GetStaticMethodID(jlobject, &quot;foo&quot;, &quot;()V&quot;);\012  EXPECT_EQ(nullptr, method);\012 ExpectException(jlnsme);\012\012 // Check that GetStaticMethodID for java.lang.Object.equals(Object) fails as\012 // the method is not static\012  method = env_-&gt;GetStaticMethodID(jlobject, &quot;equals&quot;, &quot;(Ljava/lang/Object;)Z&quot;);\012  EXPECT_EQ(nullptr, method);\012 ExpectException(jlnsme);\012\012 // Check that java.lang.String.valueOf(int) does exist\012  jclass jlstring = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  method = env_-&gt;GetStaticMethodID(jlstring, &quot;valueOf&quot;, &quot;(I)Ljava/lang/String;&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Bad arguments.\012 GetStaticMethodIdBadArgumentTest(false);\012 GetStaticMethodIdBadArgumentTest(true);\012})<SUB>904</SUB>> ]
+"17419" [label = <(UNKNOWN,TEST_F(JniInternalTest, FromReflectedField_ToReflectedField) {\012  jclass jlrField = env_-&gt;FindClass(&quot;java/lang/reflect/Field&quot;);\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012  jfieldID fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;);\012  ASSERT_NE(fid, nullptr);\012 // Turn the fid into a java.lang.reflect.Field...\012  jobject field = env_-&gt;ToReflectedField(c, fid, JNI_FALSE);\012 size_t capacity_before = GetLocalsCapacity(env_);\012 for (size_t i = 0; i &lt;= 10; ++i) {\012 // Regression test for b/18396311, ToReflectedField leaking local refs causing a local\012 // reference table overflows with 512 references to ArtField\012    env_-&gt;DeleteLocalRef(env_-&gt;ToReflectedField(c, fid, JNI_FALSE));\012 }\012 size_t capacity_after = GetLocalsCapacity(env_);\012  ASSERT_EQ(capacity_before, capacity_after);\012\012  ASSERT_NE(c, nullptr);\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(field, jlrField));\012 // ...and back again.\012  jfieldID fid2 = env_-&gt;FromReflectedField(field);\012  ASSERT_NE(fid2, nullptr);\012 // Make sure we can actually use it.\012  jstring s = env_-&gt;NewStringUTF(&quot;poop&quot;);\012 if (mirror::kUseStringCompression) {\012    ASSERT_EQ(mirror::String::GetFlaggedCount(4, /* compressible= */ true),\012              env_-&gt;GetIntField(s, fid2));\012 // Create incompressible string\012    jstring s_16 = env_-&gt;NewStringUTF(&quot;\u0444\u0444&quot;);\012    ASSERT_EQ(mirror::String::GetFlaggedCount(2, /* compressible= */ false),\012              env_-&gt;GetIntField(s_16, fid2));\012 } else {\012    ASSERT_EQ(4, env_-&gt;GetIntField(s, fid2));\012 }\012 // Bad arguments.\012 GetFromReflectedField_ToReflectedFieldBadArgumentTest(false);\012 GetFromReflectedField_ToReflectedFieldBadArgumentTest(true);\012},TEST_F(JniInternalTest, FromReflectedField_ToReflectedField) {\012  jclass jlrField = env_-&gt;FindClass(&quot;java/lang/reflect/Field&quot;);\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012  jfieldID fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;);\012  ASSERT_NE(fid, nullptr);\012 // Turn the fid into a java.lang.reflect.Field...\012  jobject field = env_-&gt;ToReflectedField(c, fid, JNI_FALSE);\012 size_t capacity_before = GetLocalsCapacity(env_);\012 for (size_t i = 0; i &lt;= 10; ++i) {\012 // Regression test for b/18396311, ToReflectedField leaking local refs causing a local\012 // reference table overflows with 512 references to ArtField\012    env_-&gt;DeleteLocalRef(env_-&gt;ToReflectedField(c, fid, JNI_FALSE));\012 }\012 size_t capacity_after = GetLocalsCapacity(env_);\012  ASSERT_EQ(capacity_before, capacity_after);\012\012  ASSERT_NE(c, nullptr);\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(field, jlrField));\012 // ...and back again.\012  jfieldID fid2 = env_-&gt;FromReflectedField(field);\012  ASSERT_NE(fid2, nullptr);\012 // Make sure we can actually use it.\012  jstring s = env_-&gt;NewStringUTF(&quot;poop&quot;);\012 if (mirror::kUseStringCompression) {\012    ASSERT_EQ(mirror::String::GetFlaggedCount(4, /* compressible= */ true),\012              env_-&gt;GetIntField(s, fid2));\012 // Create incompressible string\012    jstring s_16 = env_-&gt;NewStringUTF(&quot;\u0444\u0444&quot;);\012    ASSERT_EQ(mirror::String::GetFlaggedCount(2, /* compressible= */ false),\012              env_-&gt;GetIntField(s_16, fid2));\012 } else {\012    ASSERT_EQ(4, env_-&gt;GetIntField(s, fid2));\012 }\012 // Bad arguments.\012 GetFromReflectedField_ToReflectedFieldBadArgumentTest(false);\012 GetFromReflectedField_ToReflectedFieldBadArgumentTest(true);\012})<SUB>939</SUB>> ]
+"17420" [label = <(UNKNOWN,TEST_F(JniInternalTest, FromReflectedMethod_ToReflectedMethod) {\012  jclass jlrMethod = env_-&gt;FindClass(&quot;java/lang/reflect/Method&quot;);\012  ASSERT_NE(jlrMethod, nullptr);\012  jclass jlrConstructor = env_-&gt;FindClass(&quot;java/lang/reflect/Constructor&quot;);\012  ASSERT_NE(jlrConstructor, nullptr);\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012\012  jmethodID mid = env_-&gt;GetMethodID(c, &quot;&lt;init&gt;&quot;, &quot;()V&quot;);\012  ASSERT_NE(mid, nullptr);\012 // Turn the mid into a java.lang.reflect.Constructor...\012  jobject method = env_-&gt;ToReflectedMethod(c, mid, JNI_FALSE);\012 size_t capacity_before = GetLocalsCapacity(env_);\012 for (size_t i = 0; i &lt;= 10; ++i) {\012 // Regression test for b/18396311, ToReflectedMethod leaking local refs causing a local\012 // reference table overflows with 512 references to ArtMethod\012    env_-&gt;DeleteLocalRef(env_-&gt;ToReflectedMethod(c, mid, JNI_FALSE));\012 }\012 size_t capacity_after = GetLocalsCapacity(env_);\012  ASSERT_EQ(capacity_before, capacity_after);\012  ASSERT_NE(method, nullptr);\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(method, jlrConstructor));\012 // ...and back again.\012  jmethodID mid2 = env_-&gt;FromReflectedMethod(method);\012  ASSERT_NE(mid2, nullptr);\012 // Make sure we can actually use it.\012  jstring s = reinterpret_cast&lt;jstring&gt;(env_-&gt;AllocObject(c));\012  ASSERT_NE(s, nullptr);\012  env_-&gt;CallVoidMethod(s, mid2);\012  ASSERT_EQ(JNI_FALSE, env_-&gt;ExceptionCheck());\012  env_-&gt;ExceptionClear();\012\012  mid = env_-&gt;GetMethodID(c, &quot;length&quot;, &quot;()I&quot;);\012  ASSERT_NE(mid, nullptr);\012 // Turn the mid into a java.lang.reflect.Method...\012  method = env_-&gt;ToReflectedMethod(c, mid, JNI_FALSE);\012  ASSERT_NE(method, nullptr);\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(method, jlrMethod));\012 // ...and back again.\012  mid2 = env_-&gt;FromReflectedMethod(method);\012  ASSERT_NE(mid2, nullptr);\012 // Make sure we can actually use it.\012  s = env_-&gt;NewStringUTF(&quot;poop&quot;);\012  ASSERT_NE(s, nullptr);\012  ASSERT_EQ(4, env_-&gt;CallIntMethod(s, mid2));\012\012 // Bad arguments.\012 GetFromReflectedMethod_ToReflectedMethodBadArgumentTest(false);\012 GetFromReflectedMethod_ToReflectedMethodBadArgumentTest(true);\012},TEST_F(JniInternalTest, FromReflectedMethod_ToReflectedMethod) {\012  jclass jlrMethod = env_-&gt;FindClass(&quot;java/lang/reflect/Method&quot;);\012  ASSERT_NE(jlrMethod, nullptr);\012  jclass jlrConstructor = env_-&gt;FindClass(&quot;java/lang/reflect/Constructor&quot;);\012  ASSERT_NE(jlrConstructor, nullptr);\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012\012  jmethodID mid = env_-&gt;GetMethodID(c, &quot;&lt;init&gt;&quot;, &quot;()V&quot;);\012  ASSERT_NE(mid, nullptr);\012 // Turn the mid into a java.lang.reflect.Constructor...\012  jobject method = env_-&gt;ToReflectedMethod(c, mid, JNI_FALSE);\012 size_t capacity_before = GetLocalsCapacity(env_);\012 for (size_t i = 0; i &lt;= 10; ++i) {\012 // Regression test for b/18396311, ToReflectedMethod leaking local refs causing a local\012 // reference table overflows with 512 references to ArtMethod\012    env_-&gt;DeleteLocalRef(env_-&gt;ToReflectedMethod(c, mid, JNI_FALSE));\012 }\012 size_t capacity_after = GetLocalsCapacity(env_);\012  ASSERT_EQ(capacity_before, capacity_after);\012  ASSERT_NE(method, nullptr);\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(method, jlrConstructor));\012 // ...and back again.\012  jmethodID mid2 = env_-&gt;FromReflectedMethod(method);\012  ASSERT_NE(mid2, nullptr);\012 // Make sure we can actually use it.\012  jstring s = reinterpret_cast&lt;jstring&gt;(env_-&gt;AllocObject(c));\012  ASSERT_NE(s, nullptr);\012  env_-&gt;CallVoidMethod(s, mid2);\012  ASSERT_EQ(JNI_FALSE, env_-&gt;ExceptionCheck());\012  env_-&gt;ExceptionClear();\012\012  mid = env_-&gt;GetMethodID(c, &quot;length&quot;, &quot;()I&quot;);\012  ASSERT_NE(mid, nullptr);\012 // Turn the mid into a java.lang.reflect.Method...\012  method = env_-&gt;ToReflectedMethod(c, mid, JNI_FALSE);\012  ASSERT_NE(method, nullptr);\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(method, jlrMethod));\012 // ...and back again.\012  mid2 = env_-&gt;FromReflectedMethod(method);\012  ASSERT_NE(mid2, nullptr);\012 // Make sure we can actually use it.\012  s = env_-&gt;NewStringUTF(&quot;poop&quot;);\012  ASSERT_NE(s, nullptr);\012  ASSERT_EQ(4, env_-&gt;CallIntMethod(s, mid2));\012\012 // Bad arguments.\012 GetFromReflectedMethod_ToReflectedMethodBadArgumentTest(false);\012 GetFromReflectedMethod_ToReflectedMethodBadArgumentTest(true);\012})<SUB>978</SUB>> ]
+"17425" [label = <(UNKNOWN,TEST_F(JniInternalTest, RegisterAndUnregisterNatives) {\012  jclass jlobject = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  jclass jlnsme = env_-&gt;FindClass(&quot;java/lang/NoSuchMethodError&quot;);\012 void* native_function = reinterpret_cast&lt;void*&gt;(BogusMethod);\012\012 // Sanity check that no exceptions are pending.\012  ASSERT_FALSE(env_-&gt;ExceptionCheck());\012\012 // The following can print errors to the log we'd like to ignore.\012 {\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012 // Check that registering method without name causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { nullptr, &quot;()V&quot;, native_function } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012\012 // Check that registering method without signature causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { &quot;notify&quot;, nullptr, native_function } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012\012 // Check that registering method without function causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { &quot;notify&quot;, &quot;()V&quot;, nullptr } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012\012 // Check that registering to a non-existent java.lang.Object.foo() causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { &quot;foo&quot;, &quot;()V&quot;, native_function } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012\012 // Check that registering non-native methods causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { &quot;equals&quot;, &quot;(Ljava/lang/Object;)Z&quot;, native_function } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012 }\012\012 // Check that registering native methods is successful.\012 {\012 JNINativeMethod methods[] = { { &quot;notify&quot;, &quot;()V&quot;, native_function } };\012    EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_OK);\012 }\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012  EXPECT_EQ(env_-&gt;UnregisterNatives(jlobject), JNI_OK);\012\012 // Check that registering no methods isn't a failure.\012 {\012 JNINativeMethod methods[] = { };\012    EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 0), JNI_OK);\012 }\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012  EXPECT_EQ(env_-&gt;UnregisterNatives(jlobject), JNI_OK);\012\012 // Check that registering a -ve number of methods is a failure.\012 CheckJniAbortCatcher check_jni_abort_catcher;\012 for (int i = -10; i &lt; 0; ++i) {\012 JNINativeMethod methods[] = { };\012    EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, i), JNI_ERR);\012    check_jni_abort_catcher.Check(&quot;negative method count: &quot;);\012 }\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Unregistering a class with no natives is a warning.\012  EXPECT_EQ(env_-&gt;UnregisterNatives(jlnsme), JNI_OK);\012\012 RegisterAndUnregisterNativesBadArguments(false, &amp;check_jni_abort_catcher);\012 RegisterAndUnregisterNativesBadArguments(true, &amp;check_jni_abort_catcher);\012},TEST_F(JniInternalTest, RegisterAndUnregisterNatives) {\012  jclass jlobject = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  jclass jlnsme = env_-&gt;FindClass(&quot;java/lang/NoSuchMethodError&quot;);\012 void* native_function = reinterpret_cast&lt;void*&gt;(BogusMethod);\012\012 // Sanity check that no exceptions are pending.\012  ASSERT_FALSE(env_-&gt;ExceptionCheck());\012\012 // The following can print errors to the log we'd like to ignore.\012 {\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012 // Check that registering method without name causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { nullptr, &quot;()V&quot;, native_function } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012\012 // Check that registering method without signature causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { &quot;notify&quot;, nullptr, native_function } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012\012 // Check that registering method without function causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { &quot;notify&quot;, &quot;()V&quot;, nullptr } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012\012 // Check that registering to a non-existent java.lang.Object.foo() causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { &quot;foo&quot;, &quot;()V&quot;, native_function } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012\012 // Check that registering non-native methods causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { &quot;equals&quot;, &quot;(Ljava/lang/Object;)Z&quot;, native_function } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012 }\012\012 // Check that registering native methods is successful.\012 {\012 JNINativeMethod methods[] = { { &quot;notify&quot;, &quot;()V&quot;, native_function } };\012    EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_OK);\012 }\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012  EXPECT_EQ(env_-&gt;UnregisterNatives(jlobject), JNI_OK);\012\012 // Check that registering no methods isn't a failure.\012 {\012 JNINativeMethod methods[] = { };\012    EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 0), JNI_OK);\012 }\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012  EXPECT_EQ(env_-&gt;UnregisterNatives(jlobject), JNI_OK);\012\012 // Check that registering a -ve number of methods is a failure.\012 CheckJniAbortCatcher check_jni_abort_catcher;\012 for (int i = -10; i &lt; 0; ++i) {\012 JNINativeMethod methods[] = { };\012    EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, i), JNI_ERR);\012    check_jni_abort_catcher.Check(&quot;negative method count: &quot;);\012 }\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Unregistering a class with no natives is a warning.\012  EXPECT_EQ(env_-&gt;UnregisterNatives(jlnsme), JNI_OK);\012\012 RegisterAndUnregisterNativesBadArguments(false, &amp;check_jni_abort_catcher);\012 RegisterAndUnregisterNativesBadArguments(true, &amp;check_jni_abort_catcher);\012})<SUB>1033</SUB>> ]
+"17426" [label = <(UNKNOWN,TEST_F(JniInternalTest, BooleanArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewBooleanArray, GetBooleanArrayRegion, SetBooleanArrayRegion,\012 GetBooleanArrayElements, ReleaseBooleanArrayElements, jboolean, &quot;[Z&quot;);\012},TEST_F(JniInternalTest, BooleanArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewBooleanArray, GetBooleanArrayRegion, SetBooleanArrayRegion,\012 GetBooleanArrayElements, ReleaseBooleanArrayElements, jboolean, &quot;[Z&quot;);\012})<SUB>1224</SUB>> ]
+"17427" [label = <(UNKNOWN,TEST_F(JniInternalTest, ByteArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewByteArray, GetByteArrayRegion, SetByteArrayRegion,\012 GetByteArrayElements, ReleaseByteArrayElements, jbyte, &quot;[B&quot;);\012},TEST_F(JniInternalTest, ByteArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewByteArray, GetByteArrayRegion, SetByteArrayRegion,\012 GetByteArrayElements, ReleaseByteArrayElements, jbyte, &quot;[B&quot;);\012})<SUB>1228</SUB>> ]
+"17428" [label = <(UNKNOWN,TEST_F(JniInternalTest, CharArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewCharArray, GetCharArrayRegion, SetCharArrayRegion,\012 GetCharArrayElements, ReleaseCharArrayElements, jchar, &quot;[C&quot;);\012},TEST_F(JniInternalTest, CharArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewCharArray, GetCharArrayRegion, SetCharArrayRegion,\012 GetCharArrayElements, ReleaseCharArrayElements, jchar, &quot;[C&quot;);\012})<SUB>1232</SUB>> ]
+"17429" [label = <(UNKNOWN,TEST_F(JniInternalTest, DoubleArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewDoubleArray, GetDoubleArrayRegion, SetDoubleArrayRegion,\012 GetDoubleArrayElements, ReleaseDoubleArrayElements, jdouble, &quot;[D&quot;);\012},TEST_F(JniInternalTest, DoubleArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewDoubleArray, GetDoubleArrayRegion, SetDoubleArrayRegion,\012 GetDoubleArrayElements, ReleaseDoubleArrayElements, jdouble, &quot;[D&quot;);\012})<SUB>1236</SUB>> ]
+"17430" [label = <(UNKNOWN,TEST_F(JniInternalTest, FloatArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewFloatArray, GetFloatArrayRegion, SetFloatArrayRegion,\012 GetFloatArrayElements, ReleaseFloatArrayElements, jfloat, &quot;[F&quot;);\012},TEST_F(JniInternalTest, FloatArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewFloatArray, GetFloatArrayRegion, SetFloatArrayRegion,\012 GetFloatArrayElements, ReleaseFloatArrayElements, jfloat, &quot;[F&quot;);\012})<SUB>1240</SUB>> ]
+"17431" [label = <(UNKNOWN,TEST_F(JniInternalTest, IntArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewIntArray, GetIntArrayRegion, SetIntArrayRegion,\012 GetIntArrayElements, ReleaseIntArrayElements, jint, &quot;[I&quot;);\012},TEST_F(JniInternalTest, IntArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewIntArray, GetIntArrayRegion, SetIntArrayRegion,\012 GetIntArrayElements, ReleaseIntArrayElements, jint, &quot;[I&quot;);\012})<SUB>1244</SUB>> ]
+"17432" [label = <(UNKNOWN,TEST_F(JniInternalTest, LongArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewLongArray, GetLongArrayRegion, SetLongArrayRegion,\012 GetLongArrayElements, ReleaseLongArrayElements, jlong, &quot;[J&quot;);\012},TEST_F(JniInternalTest, LongArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewLongArray, GetLongArrayRegion, SetLongArrayRegion,\012 GetLongArrayElements, ReleaseLongArrayElements, jlong, &quot;[J&quot;);\012})<SUB>1248</SUB>> ]
+"17433" [label = <(UNKNOWN,TEST_F(JniInternalTest, ShortArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewShortArray, GetShortArrayRegion, SetShortArrayRegion,\012 GetShortArrayElements, ReleaseShortArrayElements, jshort, &quot;[S&quot;);\012},TEST_F(JniInternalTest, ShortArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewShortArray, GetShortArrayRegion, SetShortArrayRegion,\012 GetShortArrayElements, ReleaseShortArrayElements, jshort, &quot;[S&quot;);\012})<SUB>1252</SUB>> ]
+"17434" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetPrimitiveArrayElementsOfWrongType) {\012 GetPrimitiveArrayElementsOfWrongType(false);\012 GetPrimitiveArrayElementsOfWrongType(true);\012},TEST_F(JniInternalTest, GetPrimitiveArrayElementsOfWrongType) {\012 GetPrimitiveArrayElementsOfWrongType(false);\012 GetPrimitiveArrayElementsOfWrongType(true);\012})<SUB>1257</SUB>> ]
+"17435" [label = <(UNKNOWN,TEST_F(JniInternalTest, ReleasePrimitiveArrayElementsOfWrongType) {\012 ReleasePrimitiveArrayElementsOfWrongType(false);\012 ReleasePrimitiveArrayElementsOfWrongType(true);\012},TEST_F(JniInternalTest, ReleasePrimitiveArrayElementsOfWrongType) {\012 ReleasePrimitiveArrayElementsOfWrongType(false);\012 ReleasePrimitiveArrayElementsOfWrongType(true);\012})<SUB>1262</SUB>> ]
+"17436" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetReleasePrimitiveArrayCriticalOfWrongType) {\012 GetReleasePrimitiveArrayCriticalOfWrongType(false);\012 GetReleasePrimitiveArrayCriticalOfWrongType(true);\012},TEST_F(JniInternalTest, GetReleasePrimitiveArrayCriticalOfWrongType) {\012 GetReleasePrimitiveArrayCriticalOfWrongType(false);\012 GetReleasePrimitiveArrayCriticalOfWrongType(true);\012})<SUB>1267</SUB>> ]
+"17437" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetPrimitiveArrayRegionElementsOfWrongType) {\012 GetPrimitiveArrayRegionElementsOfWrongType(false);\012 GetPrimitiveArrayRegionElementsOfWrongType(true);\012},TEST_F(JniInternalTest, GetPrimitiveArrayRegionElementsOfWrongType) {\012 GetPrimitiveArrayRegionElementsOfWrongType(false);\012 GetPrimitiveArrayRegionElementsOfWrongType(true);\012})<SUB>1272</SUB>> ]
+"17438" [label = <(UNKNOWN,TEST_F(JniInternalTest, SetPrimitiveArrayRegionElementsOfWrongType) {\012 SetPrimitiveArrayRegionElementsOfWrongType(false);\012 SetPrimitiveArrayRegionElementsOfWrongType(true);\012},TEST_F(JniInternalTest, SetPrimitiveArrayRegionElementsOfWrongType) {\012 SetPrimitiveArrayRegionElementsOfWrongType(false);\012 SetPrimitiveArrayRegionElementsOfWrongType(true);\012})<SUB>1277</SUB>> ]
+"17439" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewObjectArray) {\012  jclass element_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(element_class, nullptr);\012  jclass array_class = env_-&gt;FindClass(&quot;[Ljava/lang/String;&quot;);\012  ASSERT_NE(array_class, nullptr);\012\012  jobjectArray a = env_-&gt;NewObjectArray(0, element_class, nullptr);\012  EXPECT_NE(a, nullptr);\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(a, array_class));\012  EXPECT_EQ(0, env_-&gt;GetArrayLength(a));\012\012  a = env_-&gt;NewObjectArray(1, element_class, nullptr);\012  EXPECT_NE(a, nullptr);\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(a, array_class));\012  EXPECT_EQ(1, env_-&gt;GetArrayLength(a));\012  EXPECT_TRUE(env_-&gt;IsSameObject(env_-&gt;GetObjectArrayElement(a, 0), nullptr));\012\012 // Negative array length checks.\012 NewObjectArrayBadArguments(false);\012 NewObjectArrayBadArguments(true);\012},TEST_F(JniInternalTest, NewObjectArray) {\012  jclass element_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(element_class, nullptr);\012  jclass array_class = env_-&gt;FindClass(&quot;[Ljava/lang/String;&quot;);\012  ASSERT_NE(array_class, nullptr);\012\012  jobjectArray a = env_-&gt;NewObjectArray(0, element_class, nullptr);\012  EXPECT_NE(a, nullptr);\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(a, array_class));\012  EXPECT_EQ(0, env_-&gt;GetArrayLength(a));\012\012  a = env_-&gt;NewObjectArray(1, element_class, nullptr);\012  EXPECT_NE(a, nullptr);\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(a, array_class));\012  EXPECT_EQ(1, env_-&gt;GetArrayLength(a));\012  EXPECT_TRUE(env_-&gt;IsSameObject(env_-&gt;GetObjectArrayElement(a, 0), nullptr));\012\012 // Negative array length checks.\012 NewObjectArrayBadArguments(false);\012 NewObjectArrayBadArguments(true);\012})<SUB>1282</SUB>> ]
+"17440" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewObjectArrayWithPrimitiveClasses) {\012 const char* primitive_descriptors = &quot;VZBSCIJFD&quot;;\012 const char* primitive_names[] = {\012 &quot;void&quot;, &quot;boolean&quot;, &quot;byte&quot;, &quot;short&quot;, &quot;char&quot;, &quot;int&quot;, &quot;long&quot;, &quot;float&quot;, &quot;double&quot;\012 };\012  ASSERT_EQ(strlen(primitive_descriptors), arraysize(primitive_names));\012\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 CheckJniAbortCatcher jni_abort_catcher;\012 for (size_t i = 0; i &lt; strlen(primitive_descriptors); ++i) {\012    env_-&gt;NewObjectArray(0, nullptr, nullptr);\012    jni_abort_catcher.Check(&quot;element_jclass == null&quot;);\012    jclass primitive_class = GetPrimitiveClass(primitive_descriptors[i]);\012    env_-&gt;NewObjectArray(1, primitive_class, nullptr);\012    std::string error_msg(StringPrintf(&quot;not an object type: %s&quot;, primitive_names[i]));\012    jni_abort_catcher.Check(error_msg.c_str());\012 }\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012 for (size_t i = 0; i &lt; strlen(primitive_descriptors); ++i) {\012    env_-&gt;NewObjectArray(0, nullptr, nullptr);\012    jni_abort_catcher.Check(&quot;NewObjectArray received NULL jclass&quot;);\012    jclass primitive_class = GetPrimitiveClass(primitive_descriptors[i]);\012    env_-&gt;NewObjectArray(1, primitive_class, nullptr);\012    std::string error_msg(StringPrintf(&quot;not an object type: %s&quot;, primitive_names[i]));\012    jni_abort_catcher.Check(error_msg.c_str());\012 }\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012},TEST_F(JniInternalTest, NewObjectArrayWithPrimitiveClasses) {\012 const char* primitive_descriptors = &quot;VZBSCIJFD&quot;;\012 const char* primitive_names[] = {\012 &quot;void&quot;, &quot;boolean&quot;, &quot;byte&quot;, &quot;short&quot;, &quot;char&quot;, &quot;int&quot;, &quot;long&quot;, &quot;float&quot;, &quot;double&quot;\012 };\012  ASSERT_EQ(strlen(primitive_descriptors), arraysize(primitive_names));\012\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 CheckJniAbortCatcher jni_abort_catcher;\012 for (size_t i = 0; i &lt; strlen(primitive_descriptors); ++i) {\012    env_-&gt;NewObjectArray(0, nullptr, nullptr);\012    jni_abort_catcher.Check(&quot;element_jclass == null&quot;);\012    jclass primitive_class = GetPrimitiveClass(primitive_descriptors[i]);\012    env_-&gt;NewObjectArray(1, primitive_class, nullptr);\012    std::string error_msg(StringPrintf(&quot;not an object type: %s&quot;, primitive_names[i]));\012    jni_abort_catcher.Check(error_msg.c_str());\012 }\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012 for (size_t i = 0; i &lt; strlen(primitive_descriptors); ++i) {\012    env_-&gt;NewObjectArray(0, nullptr, nullptr);\012    jni_abort_catcher.Check(&quot;NewObjectArray received NULL jclass&quot;);\012    jclass primitive_class = GetPrimitiveClass(primitive_descriptors[i]);\012    env_-&gt;NewObjectArray(1, primitive_class, nullptr);\012    std::string error_msg(StringPrintf(&quot;not an object type: %s&quot;, primitive_names[i]));\012    jni_abort_catcher.Check(error_msg.c_str());\012 }\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012})<SUB>1304</SUB>> ]
+"17441" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewObjectArrayWithInitialValue) {\012  jclass element_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(element_class, nullptr);\012  jclass array_class = env_-&gt;FindClass(&quot;[Ljava/lang/String;&quot;);\012  ASSERT_NE(array_class, nullptr);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;poop&quot;);\012  jobjectArray a = env_-&gt;NewObjectArray(2, element_class, s);\012  EXPECT_NE(a, nullptr);\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(a, array_class));\012  EXPECT_EQ(2, env_-&gt;GetArrayLength(a));\012  EXPECT_TRUE(env_-&gt;IsSameObject(env_-&gt;GetObjectArrayElement(a, 0), s));\012  EXPECT_TRUE(env_-&gt;IsSameObject(env_-&gt;GetObjectArrayElement(a, 1), s));\012\012 // Attempt to incorrect create an array of strings with initial value of string arrays.\012 CheckJniAbortCatcher jni_abort_catcher;\012  env_-&gt;NewObjectArray(2, element_class, a);\012  jni_abort_catcher.Check(&quot;cannot assign object of type 'java.lang.String[]' to array with element &quot;\012 &quot;type of 'java.lang.String'&quot;);\012},TEST_F(JniInternalTest, NewObjectArrayWithInitialValue) {\012  jclass element_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(element_class, nullptr);\012  jclass array_class = env_-&gt;FindClass(&quot;[Ljava/lang/String;&quot;);\012  ASSERT_NE(array_class, nullptr);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;poop&quot;);\012  jobjectArray a = env_-&gt;NewObjectArray(2, element_class, s);\012  EXPECT_NE(a, nullptr);\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(a, array_class));\012  EXPECT_EQ(2, env_-&gt;GetArrayLength(a));\012  EXPECT_TRUE(env_-&gt;IsSameObject(env_-&gt;GetObjectArrayElement(a, 0), s));\012  EXPECT_TRUE(env_-&gt;IsSameObject(env_-&gt;GetObjectArrayElement(a, 1), s));\012\012 // Attempt to incorrect create an array of strings with initial value of string arrays.\012 CheckJniAbortCatcher jni_abort_catcher;\012  env_-&gt;NewObjectArray(2, element_class, a);\012  jni_abort_catcher.Check(&quot;cannot assign object of type 'java.lang.String[]' to array with element &quot;\012 &quot;type of 'java.lang.String'&quot;);\012})<SUB>1333</SUB>> ]
+"17442" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetArrayLength) {\012 // Already tested in NewObjectArray/NewPrimitiveArray except for null.\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(0, env_-&gt;GetArrayLength(nullptr));\012  jni_abort_catcher.Check(&quot;java_array == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(JNI_ERR, env_-&gt;GetArrayLength(nullptr));\012  jni_abort_catcher.Check(&quot;jarray was NULL&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012},TEST_F(JniInternalTest, GetArrayLength) {\012 // Already tested in NewObjectArray/NewPrimitiveArray except for null.\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(0, env_-&gt;GetArrayLength(nullptr));\012  jni_abort_catcher.Check(&quot;java_array == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(JNI_ERR, env_-&gt;GetArrayLength(nullptr));\012  jni_abort_catcher.Check(&quot;jarray was NULL&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012})<SUB>1354</SUB>> ]
+"17443" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetObjectClass) {\012  jclass string_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(string_class, nullptr);\012  jclass class_class = env_-&gt;FindClass(&quot;java/lang/Class&quot;);\012  ASSERT_NE(class_class, nullptr);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;poop&quot;);\012  jclass c = env_-&gt;GetObjectClass(s);\012  ASSERT_TRUE(env_-&gt;IsSameObject(string_class, c));\012\012  jclass c2 = env_-&gt;GetObjectClass(c);\012  ASSERT_TRUE(env_-&gt;IsSameObject(class_class, env_-&gt;GetObjectClass(c2)));\012\012 // Null as object should fail.\012 CheckJniAbortCatcher jni_abort_catcher;\012  EXPECT_EQ(env_-&gt;GetObjectClass(nullptr), nullptr);\012  jni_abort_catcher.Check(&quot;java_object == null&quot;);\012},TEST_F(JniInternalTest, GetObjectClass) {\012  jclass string_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(string_class, nullptr);\012  jclass class_class = env_-&gt;FindClass(&quot;java/lang/Class&quot;);\012  ASSERT_NE(class_class, nullptr);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;poop&quot;);\012  jclass c = env_-&gt;GetObjectClass(s);\012  ASSERT_TRUE(env_-&gt;IsSameObject(string_class, c));\012\012  jclass c2 = env_-&gt;GetObjectClass(c);\012  ASSERT_TRUE(env_-&gt;IsSameObject(class_class, env_-&gt;GetObjectClass(c2)));\012\012 // Null as object should fail.\012 CheckJniAbortCatcher jni_abort_catcher;\012  EXPECT_EQ(env_-&gt;GetObjectClass(nullptr), nullptr);\012  jni_abort_catcher.Check(&quot;java_object == null&quot;);\012})<SUB>1366</SUB>> ]
+"17444" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetSuperclass) {\012  jclass object_class = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_NE(object_class, nullptr);\012  jclass string_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(string_class, nullptr);\012  jclass runnable_interface = env_-&gt;FindClass(&quot;java/lang/Runnable&quot;);\012  ASSERT_NE(runnable_interface, nullptr);\012  ASSERT_TRUE(env_-&gt;IsSameObject(object_class, env_-&gt;GetSuperclass(string_class)));\012  ASSERT_EQ(env_-&gt;GetSuperclass(object_class), nullptr);\012  ASSERT_EQ(env_-&gt;GetSuperclass(runnable_interface), nullptr);\012\012 // Null as class should fail.\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(env_-&gt;GetSuperclass(nullptr), nullptr);\012  jni_abort_catcher.Check(&quot;java_class == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(env_-&gt;GetSuperclass(nullptr), nullptr);\012  jni_abort_catcher.Check(&quot;GetSuperclass received NULL jclass&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012},TEST_F(JniInternalTest, GetSuperclass) {\012  jclass object_class = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_NE(object_class, nullptr);\012  jclass string_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(string_class, nullptr);\012  jclass runnable_interface = env_-&gt;FindClass(&quot;java/lang/Runnable&quot;);\012  ASSERT_NE(runnable_interface, nullptr);\012  ASSERT_TRUE(env_-&gt;IsSameObject(object_class, env_-&gt;GetSuperclass(string_class)));\012  ASSERT_EQ(env_-&gt;GetSuperclass(object_class), nullptr);\012  ASSERT_EQ(env_-&gt;GetSuperclass(runnable_interface), nullptr);\012\012 // Null as class should fail.\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(env_-&gt;GetSuperclass(nullptr), nullptr);\012  jni_abort_catcher.Check(&quot;java_class == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(env_-&gt;GetSuperclass(nullptr), nullptr);\012  jni_abort_catcher.Check(&quot;GetSuperclass received NULL jclass&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012})<SUB>1385</SUB>> ]
+"17445" [label = <(UNKNOWN,TEST_F(JniInternalTest, IsAssignableFrom) {\012  jclass object_class = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_NE(object_class, nullptr);\012  jclass string_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(string_class, nullptr);\012\012 // A superclass is assignable from an instance of its\012 // subclass but not vice versa.\012  ASSERT_TRUE(env_-&gt;IsAssignableFrom(string_class, object_class));\012  ASSERT_FALSE(env_-&gt;IsAssignableFrom(object_class, string_class));\012\012  jclass charsequence_interface = env_-&gt;FindClass(&quot;java/lang/CharSequence&quot;);\012  ASSERT_NE(charsequence_interface, nullptr);\012\012 // An interface is assignable from an instance of an implementing\012 // class but not vice versa.\012  ASSERT_TRUE(env_-&gt;IsAssignableFrom(string_class, charsequence_interface));\012  ASSERT_FALSE(env_-&gt;IsAssignableFrom(charsequence_interface, string_class));\012\012 // Check that arrays are covariant.\012  jclass string_array_class = env_-&gt;FindClass(&quot;[Ljava/lang/String;&quot;);\012  ASSERT_NE(string_array_class, nullptr);\012  jclass object_array_class = env_-&gt;FindClass(&quot;[Ljava/lang/Object;&quot;);\012  ASSERT_NE(object_array_class, nullptr);\012  ASSERT_TRUE(env_-&gt;IsAssignableFrom(string_array_class, object_array_class));\012  ASSERT_FALSE(env_-&gt;IsAssignableFrom(object_array_class, string_array_class));\012\012 // Primitive types are tested in 004-JniTest.\012\012 // Null as either class should fail.\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(env_-&gt;IsAssignableFrom(nullptr, string_class), JNI_FALSE);\012  jni_abort_catcher.Check(&quot;java_class1 == null&quot;);\012  EXPECT_EQ(env_-&gt;IsAssignableFrom(object_class, nullptr), JNI_FALSE);\012  jni_abort_catcher.Check(&quot;java_class2 == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(env_-&gt;IsAssignableFrom(nullptr, string_class), JNI_FALSE);\012  jni_abort_catcher.Check(&quot;IsAssignableFrom received NULL jclass&quot;);\012  EXPECT_EQ(env_-&gt;IsAssignableFrom(object_class, nullptr), JNI_FALSE);\012  jni_abort_catcher.Check(&quot;IsAssignableFrom received NULL jclass&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012},TEST_F(JniInternalTest, IsAssignableFrom) {\012  jclass object_class = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_NE(object_class, nullptr);\012  jclass string_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(string_class, nullptr);\012\012 // A superclass is assignable from an instance of its\012 // subclass but not vice versa.\012  ASSERT_TRUE(env_-&gt;IsAssignableFrom(string_class, object_class));\012  ASSERT_FALSE(env_-&gt;IsAssignableFrom(object_class, string_class));\012\012  jclass charsequence_interface = env_-&gt;FindClass(&quot;java/lang/CharSequence&quot;);\012  ASSERT_NE(charsequence_interface, nullptr);\012\012 // An interface is assignable from an instance of an implementing\012 // class but not vice versa.\012  ASSERT_TRUE(env_-&gt;IsAssignableFrom(string_class, charsequence_interface));\012  ASSERT_FALSE(env_-&gt;IsAssignableFrom(charsequence_interface, string_class));\012\012 // Check that arrays are covariant.\012  jclass string_array_class = env_-&gt;FindClass(&quot;[Ljava/lang/String;&quot;);\012  ASSERT_NE(string_array_class, nullptr);\012  jclass object_array_class = env_-&gt;FindClass(&quot;[Ljava/lang/Object;&quot;);\012  ASSERT_NE(object_array_class, nullptr);\012  ASSERT_TRUE(env_-&gt;IsAssignableFrom(string_array_class, object_array_class));\012  ASSERT_FALSE(env_-&gt;IsAssignableFrom(object_array_class, string_array_class));\012\012 // Primitive types are tested in 004-JniTest.\012\012 // Null as either class should fail.\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(env_-&gt;IsAssignableFrom(nullptr, string_class), JNI_FALSE);\012  jni_abort_catcher.Check(&quot;java_class1 == null&quot;);\012  EXPECT_EQ(env_-&gt;IsAssignableFrom(object_class, nullptr), JNI_FALSE);\012  jni_abort_catcher.Check(&quot;java_class2 == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(env_-&gt;IsAssignableFrom(nullptr, string_class), JNI_FALSE);\012  jni_abort_catcher.Check(&quot;IsAssignableFrom received NULL jclass&quot;);\012  EXPECT_EQ(env_-&gt;IsAssignableFrom(object_class, nullptr), JNI_FALSE);\012  jni_abort_catcher.Check(&quot;IsAssignableFrom received NULL jclass&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012})<SUB>1407</SUB>> ]
+"17446" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetObjectRefType) {\012  jclass local = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_TRUE(local != nullptr);\012  EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(local));\012\012  jobject global = env_-&gt;NewGlobalRef(local);\012  EXPECT_EQ(JNIGlobalRefType, env_-&gt;GetObjectRefType(global));\012\012  jweak weak_global = env_-&gt;NewWeakGlobalRef(local);\012  EXPECT_EQ(JNIWeakGlobalRefType, env_-&gt;GetObjectRefType(weak_global));\012\012 {\012 CheckJniAbortCatcher jni_abort_catcher;\012    jobject invalid = reinterpret_cast&lt;jobject&gt;(this);\012    EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(invalid));\012    jni_abort_catcher.Check(&quot;use of invalid jobject&quot;);\012 }\012\012 // TODO: invoke a native method and test that its arguments are considered local references.\012\012 // Null as pointer should not fail and return invalid-ref. b/18820997\012  EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(nullptr));\012\012 // TODO: Null as reference should return the original type.\012 // This requires running a GC so a non-null object gets freed.\012},TEST_F(JniInternalTest, GetObjectRefType) {\012  jclass local = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_TRUE(local != nullptr);\012  EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(local));\012\012  jobject global = env_-&gt;NewGlobalRef(local);\012  EXPECT_EQ(JNIGlobalRefType, env_-&gt;GetObjectRefType(global));\012\012  jweak weak_global = env_-&gt;NewWeakGlobalRef(local);\012  EXPECT_EQ(JNIWeakGlobalRefType, env_-&gt;GetObjectRefType(weak_global));\012\012 {\012 CheckJniAbortCatcher jni_abort_catcher;\012    jobject invalid = reinterpret_cast&lt;jobject&gt;(this);\012    EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(invalid));\012    jni_abort_catcher.Check(&quot;use of invalid jobject&quot;);\012 }\012\012 // TODO: invoke a native method and test that its arguments are considered local references.\012\012 // Null as pointer should not fail and return invalid-ref. b/18820997\012  EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(nullptr));\012\012 // TODO: Null as reference should return the original type.\012 // This requires running a GC so a non-null object gets freed.\012})<SUB>1451</SUB>> ]
+"17447" [label = <(UNKNOWN,TEST_F(JniInternalTest, StaleWeakGlobal) {\012  jclass java_lang_Class = env_-&gt;FindClass(&quot;java/lang/Class&quot;);\012  ASSERT_NE(java_lang_Class, nullptr);\012  jobjectArray local_ref = env_-&gt;NewObjectArray(1, java_lang_Class, nullptr);\012  ASSERT_NE(local_ref, nullptr);\012  jweak weak_global = env_-&gt;NewWeakGlobalRef(local_ref);\012  ASSERT_NE(weak_global, nullptr);\012  env_-&gt;DeleteLocalRef(local_ref);\012 // GC should clear the weak global.\012 Runtime::Current()-&gt;GetHeap()-&gt;CollectGarbage(/* clear_soft_references= */ false);\012  jobject new_global_ref = env_-&gt;NewGlobalRef(weak_global);\012  EXPECT_EQ(new_global_ref, nullptr);\012  jobject new_local_ref = env_-&gt;NewLocalRef(weak_global);\012  EXPECT_EQ(new_local_ref, nullptr);\012},TEST_F(JniInternalTest, StaleWeakGlobal) {\012  jclass java_lang_Class = env_-&gt;FindClass(&quot;java/lang/Class&quot;);\012  ASSERT_NE(java_lang_Class, nullptr);\012  jobjectArray local_ref = env_-&gt;NewObjectArray(1, java_lang_Class, nullptr);\012  ASSERT_NE(local_ref, nullptr);\012  jweak weak_global = env_-&gt;NewWeakGlobalRef(local_ref);\012  ASSERT_NE(weak_global, nullptr);\012  env_-&gt;DeleteLocalRef(local_ref);\012 // GC should clear the weak global.\012 Runtime::Current()-&gt;GetHeap()-&gt;CollectGarbage(/* clear_soft_references= */ false);\012  jobject new_global_ref = env_-&gt;NewGlobalRef(weak_global);\012  EXPECT_EQ(new_global_ref, nullptr);\012  jobject new_local_ref = env_-&gt;NewLocalRef(weak_global);\012  EXPECT_EQ(new_local_ref, nullptr);\012})<SUB>1478</SUB>> ]
+"17448" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewStringUTF) {\012  EXPECT_EQ(env_-&gt;NewStringUTF(nullptr), nullptr);\012  jstring s;\012\012  s = env_-&gt;NewStringUTF(&quot;&quot;);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(0, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(0, env_-&gt;GetStringUTFLength(s));\012  s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(5, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(5, env_-&gt;GetStringUTFLength(s));\012\012 // Encoded surrogate pair.\012  s = env_-&gt;NewStringUTF(&quot;\xed\xa0\x81\xed\xb0\x80&quot;);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(2, env_-&gt;GetStringLength(s));\012\012 // The surrogate pair gets encoded into a 4 byte UTF sequence..\012  EXPECT_EQ(4, env_-&gt;GetStringUTFLength(s));\012 const char* chars = env_-&gt;GetStringUTFChars(s, nullptr);\012  EXPECT_STREQ(&quot;\xf0\x90\x90\x80&quot;, chars);\012  env_-&gt;ReleaseStringUTFChars(s, chars);\012\012 // .. but is stored as is in the utf-16 representation.\012 const jchar* jchars = env_-&gt;GetStringChars(s, nullptr);\012  EXPECT_EQ(0xd801, jchars[0]);\012  EXPECT_EQ(0xdc00, jchars[1]);\012  env_-&gt;ReleaseStringChars(s, jchars);\012\012 // 4 byte UTF sequence appended to an encoded surrogate pair.\012  s = env_-&gt;NewStringUTF(&quot;\xed\xa0\x81\xed\xb0\x80 \xf0\x9f\x8f\xa0&quot;);\012  EXPECT_NE(s, nullptr);\012\012 // The 4 byte sequence {0xf0, 0x9f, 0x8f, 0xa0} is converted into a surrogate\012 // pair {0xd83c, 0xdfe0}.\012  EXPECT_EQ(5, env_-&gt;GetStringLength(s));\012  jchars = env_-&gt;GetStringChars(s, nullptr);\012 // The first surrogate pair, encoded as such in the input.\012  EXPECT_EQ(0xd801, jchars[0]);\012  EXPECT_EQ(0xdc00, jchars[1]);\012 // The second surrogate pair, from the 4 byte UTF sequence in the input.\012  EXPECT_EQ(0xd83c, jchars[3]);\012  EXPECT_EQ(0xdfe0, jchars[4]);\012  env_-&gt;ReleaseStringChars(s, jchars);\012\012  EXPECT_EQ(9, env_-&gt;GetStringUTFLength(s));\012  chars = env_-&gt;GetStringUTFChars(s, nullptr);\012  EXPECT_STREQ(&quot;\xf0\x90\x90\x80 \xf0\x9f\x8f\xa0&quot;, chars);\012  env_-&gt;ReleaseStringUTFChars(s, chars);\012\012 // A string with 1, 2, 3 and 4 byte UTF sequences with spaces\012 // between them\012  s = env_-&gt;NewStringUTF(&quot;\x24 \xc2\xa2 \xe2\x82\xac \xf0\x9f\x8f\xa0&quot;);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(8, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(13, env_-&gt;GetStringUTFLength(s));\012},TEST_F(JniInternalTest, NewStringUTF) {\012  EXPECT_EQ(env_-&gt;NewStringUTF(nullptr), nullptr);\012  jstring s;\012\012  s = env_-&gt;NewStringUTF(&quot;&quot;);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(0, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(0, env_-&gt;GetStringUTFLength(s));\012  s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(5, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(5, env_-&gt;GetStringUTFLength(s));\012\012 // Encoded surrogate pair.\012  s = env_-&gt;NewStringUTF(&quot;\xed\xa0\x81\xed\xb0\x80&quot;);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(2, env_-&gt;GetStringLength(s));\012\012 // The surrogate pair gets encoded into a 4 byte UTF sequence..\012  EXPECT_EQ(4, env_-&gt;GetStringUTFLength(s));\012 const char* chars = env_-&gt;GetStringUTFChars(s, nullptr);\012  EXPECT_STREQ(&quot;\xf0\x90\x90\x80&quot;, chars);\012  env_-&gt;ReleaseStringUTFChars(s, chars);\012\012 // .. but is stored as is in the utf-16 representation.\012 const jchar* jchars = env_-&gt;GetStringChars(s, nullptr);\012  EXPECT_EQ(0xd801, jchars[0]);\012  EXPECT_EQ(0xdc00, jchars[1]);\012  env_-&gt;ReleaseStringChars(s, jchars);\012\012 // 4 byte UTF sequence appended to an encoded surrogate pair.\012  s = env_-&gt;NewStringUTF(&quot;\xed\xa0\x81\xed\xb0\x80 \xf0\x9f\x8f\xa0&quot;);\012  EXPECT_NE(s, nullptr);\012\012 // The 4 byte sequence {0xf0, 0x9f, 0x8f, 0xa0} is converted into a surrogate\012 // pair {0xd83c, 0xdfe0}.\012  EXPECT_EQ(5, env_-&gt;GetStringLength(s));\012  jchars = env_-&gt;GetStringChars(s, nullptr);\012 // The first surrogate pair, encoded as such in the input.\012  EXPECT_EQ(0xd801, jchars[0]);\012  EXPECT_EQ(0xdc00, jchars[1]);\012 // The second surrogate pair, from the 4 byte UTF sequence in the input.\012  EXPECT_EQ(0xd83c, jchars[3]);\012  EXPECT_EQ(0xdfe0, jchars[4]);\012  env_-&gt;ReleaseStringChars(s, jchars);\012\012  EXPECT_EQ(9, env_-&gt;GetStringUTFLength(s));\012  chars = env_-&gt;GetStringUTFChars(s, nullptr);\012  EXPECT_STREQ(&quot;\xf0\x90\x90\x80 \xf0\x9f\x8f\xa0&quot;, chars);\012  env_-&gt;ReleaseStringUTFChars(s, chars);\012\012 // A string with 1, 2, 3 and 4 byte UTF sequences with spaces\012 // between them\012  s = env_-&gt;NewStringUTF(&quot;\x24 \xc2\xa2 \xe2\x82\xac \xf0\x9f\x8f\xa0&quot;);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(8, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(13, env_-&gt;GetStringUTFLength(s));\012})<SUB>1494</SUB>> ]
+"17449" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewString) {\012  jchar chars[] = { 'h', 'i' };\012  jstring s;\012  s = env_-&gt;NewString(chars, 0);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(0, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(0, env_-&gt;GetStringUTFLength(s));\012  s = env_-&gt;NewString(chars, 2);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(2, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(2, env_-&gt;GetStringUTFLength(s));\012\012 // TODO: check some non-ASCII strings.\012},TEST_F(JniInternalTest, NewString) {\012  jchar chars[] = { 'h', 'i' };\012  jstring s;\012  s = env_-&gt;NewString(chars, 0);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(0, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(0, env_-&gt;GetStringUTFLength(s));\012  s = env_-&gt;NewString(chars, 2);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(2, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(2, env_-&gt;GetStringUTFLength(s));\012\012 // TODO: check some non-ASCII strings.\012})<SUB>1553</SUB>> ]
+"17450" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewStringNullCharsZeroLength) {\012  jstring s = env_-&gt;NewString(nullptr, 0);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(0, env_-&gt;GetStringLength(s));\012},TEST_F(JniInternalTest, NewStringNullCharsZeroLength) {\012  jstring s = env_-&gt;NewString(nullptr, 0);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(0, env_-&gt;GetStringLength(s));\012})<SUB>1568</SUB>> ]
+"17451" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewStringNullCharsNonzeroLength) {\012 CheckJniAbortCatcher jni_abort_catcher;\012  env_-&gt;NewString(nullptr, 1);\012  jni_abort_catcher.Check(&quot;chars == null &amp;&amp; char_count &gt; 0&quot;);\012},TEST_F(JniInternalTest, NewStringNullCharsNonzeroLength) {\012 CheckJniAbortCatcher jni_abort_catcher;\012  env_-&gt;NewString(nullptr, 1);\012  jni_abort_catcher.Check(&quot;chars == null &amp;&amp; char_count &gt; 0&quot;);\012})<SUB>1574</SUB>> ]
+"17452" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewStringNegativeLength) {\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  env_-&gt;NewString(nullptr, -1);\012  jni_abort_catcher.Check(&quot;char_count &lt; 0: -1&quot;);\012  env_-&gt;NewString(nullptr, std::numeric_limits&lt;jint&gt;::min());\012  jni_abort_catcher.Check(&quot;char_count &lt; 0: -2147483648&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  env_-&gt;NewString(nullptr, -1);\012  jni_abort_catcher.Check(&quot;negative jsize: -1&quot;);\012  env_-&gt;NewString(nullptr, std::numeric_limits&lt;jint&gt;::min());\012  jni_abort_catcher.Check(&quot;negative jsize: -2147483648&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012},TEST_F(JniInternalTest, NewStringNegativeLength) {\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  env_-&gt;NewString(nullptr, -1);\012  jni_abort_catcher.Check(&quot;char_count &lt; 0: -1&quot;);\012  env_-&gt;NewString(nullptr, std::numeric_limits&lt;jint&gt;::min());\012  jni_abort_catcher.Check(&quot;char_count &lt; 0: -2147483648&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  env_-&gt;NewString(nullptr, -1);\012  jni_abort_catcher.Check(&quot;negative jsize: -1&quot;);\012  env_-&gt;NewString(nullptr, std::numeric_limits&lt;jint&gt;::min());\012  jni_abort_catcher.Check(&quot;negative jsize: -2147483648&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012})<SUB>1580</SUB>> ]
+"17453" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetStringLength_GetStringUTFLength) {\012 // Already tested in the NewString/NewStringUTF tests.\012},TEST_F(JniInternalTest, GetStringLength_GetStringUTFLength) {\012 // Already tested in the NewString/NewStringUTF tests.\012})<SUB>1595</SUB>> ]
+"17454" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetStringRegion_GetStringUTFRegion) {\012  jstring s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012  ASSERT_TRUE(s != nullptr);\012\012  env_-&gt;GetStringRegion(s, -1, 0, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringRegion(s, 0, -1, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringRegion(s, 0, 10, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringRegion(s, 10, 1, nullptr);\012 ExpectException(sioobe_);\012 // Regression test against integer overflow in range check.\012  env_-&gt;GetStringRegion(s, 0x7fffffff, 0x7fffffff, nullptr);\012 ExpectException(sioobe_);\012\012  jchar chars[4] = { 'x', 'x', 'x', 'x' };\012  env_-&gt;GetStringRegion(s, 1, 2, &amp;chars[1]);\012  EXPECT_EQ('x', chars[0]);\012  EXPECT_EQ('e', chars[1]);\012  EXPECT_EQ('l', chars[2]);\012  EXPECT_EQ('x', chars[3]);\012\012 // It's okay for the buffer to be null as long as the length is 0.\012  env_-&gt;GetStringRegion(s, 2, 0, nullptr);\012 // Even if the offset is invalid...\012  env_-&gt;GetStringRegion(s, 123, 0, nullptr);\012 ExpectException(sioobe_);\012\012  env_-&gt;GetStringUTFRegion(s, -1, 0, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringUTFRegion(s, 0, -1, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringUTFRegion(s, 0, 10, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringUTFRegion(s, 10, 1, nullptr);\012 ExpectException(sioobe_);\012 // Regression test against integer overflow in range check.\012  env_-&gt;GetStringUTFRegion(s, 0x7fffffff, 0x7fffffff, nullptr);\012 ExpectException(sioobe_);\012\012 char bytes[4] = { 'x', 'x', 'x', 'x' };\012  env_-&gt;GetStringUTFRegion(s, 1, 2, &amp;bytes[1]);\012  EXPECT_EQ('x', bytes[0]);\012  EXPECT_EQ('e', bytes[1]);\012  EXPECT_EQ('l', bytes[2]);\012  EXPECT_EQ('x', bytes[3]);\012\012 // It's okay for the buffer to be null as long as the length is 0.\012  env_-&gt;GetStringUTFRegion(s, 2, 0, nullptr);\012 // Even if the offset is invalid...\012  env_-&gt;GetStringUTFRegion(s, 123, 0, nullptr);\012 ExpectException(sioobe_);\012},TEST_F(JniInternalTest, GetStringRegion_GetStringUTFRegion) {\012  jstring s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012  ASSERT_TRUE(s != nullptr);\012\012  env_-&gt;GetStringRegion(s, -1, 0, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringRegion(s, 0, -1, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringRegion(s, 0, 10, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringRegion(s, 10, 1, nullptr);\012 ExpectException(sioobe_);\012 // Regression test against integer overflow in range check.\012  env_-&gt;GetStringRegion(s, 0x7fffffff, 0x7fffffff, nullptr);\012 ExpectException(sioobe_);\012\012  jchar chars[4] = { 'x', 'x', 'x', 'x' };\012  env_-&gt;GetStringRegion(s, 1, 2, &amp;chars[1]);\012  EXPECT_EQ('x', chars[0]);\012  EXPECT_EQ('e', chars[1]);\012  EXPECT_EQ('l', chars[2]);\012  EXPECT_EQ('x', chars[3]);\012\012 // It's okay for the buffer to be null as long as the length is 0.\012  env_-&gt;GetStringRegion(s, 2, 0, nullptr);\012 // Even if the offset is invalid...\012  env_-&gt;GetStringRegion(s, 123, 0, nullptr);\012 ExpectException(sioobe_);\012\012  env_-&gt;GetStringUTFRegion(s, -1, 0, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringUTFRegion(s, 0, -1, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringUTFRegion(s, 0, 10, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringUTFRegion(s, 10, 1, nullptr);\012 ExpectException(sioobe_);\012 // Regression test against integer overflow in range check.\012  env_-&gt;GetStringUTFRegion(s, 0x7fffffff, 0x7fffffff, nullptr);\012 ExpectException(sioobe_);\012\012 char bytes[4] = { 'x', 'x', 'x', 'x' };\012  env_-&gt;GetStringUTFRegion(s, 1, 2, &amp;bytes[1]);\012  EXPECT_EQ('x', bytes[0]);\012  EXPECT_EQ('e', bytes[1]);\012  EXPECT_EQ('l', bytes[2]);\012  EXPECT_EQ('x', bytes[3]);\012\012 // It's okay for the buffer to be null as long as the length is 0.\012  env_-&gt;GetStringUTFRegion(s, 2, 0, nullptr);\012 // Even if the offset is invalid...\012  env_-&gt;GetStringUTFRegion(s, 123, 0, nullptr);\012 ExpectException(sioobe_);\012})<SUB>1599</SUB>> ]
+"17455" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetStringUTFChars_ReleaseStringUTFChars) {\012 // Passing in a null jstring is ignored normally, but caught by -Xcheck:jni.\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_EQ(env_-&gt;GetStringUTFChars(nullptr, nullptr), nullptr);\012 }\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012    EXPECT_EQ(env_-&gt;GetStringUTFChars(nullptr, nullptr), nullptr);\012    check_jni_abort_catcher.Check(&quot;GetStringUTFChars received NULL jstring&quot;);\012    EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012 }\012\012  jstring s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012  ASSERT_TRUE(s != nullptr);\012\012 const char* utf = env_-&gt;GetStringUTFChars(s, nullptr);\012  EXPECT_STREQ(&quot;hello&quot;, utf);\012  env_-&gt;ReleaseStringUTFChars(s, utf);\012\012  jboolean is_copy = JNI_FALSE;\012  utf = env_-&gt;GetStringUTFChars(s, &amp;is_copy);\012  EXPECT_EQ(JNI_TRUE, is_copy);\012  EXPECT_STREQ(&quot;hello&quot;, utf);\012  env_-&gt;ReleaseStringUTFChars(s, utf);\012},TEST_F(JniInternalTest, GetStringUTFChars_ReleaseStringUTFChars) {\012 // Passing in a null jstring is ignored normally, but caught by -Xcheck:jni.\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_EQ(env_-&gt;GetStringUTFChars(nullptr, nullptr), nullptr);\012 }\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012    EXPECT_EQ(env_-&gt;GetStringUTFChars(nullptr, nullptr), nullptr);\012    check_jni_abort_catcher.Check(&quot;GetStringUTFChars received NULL jstring&quot;);\012    EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012 }\012\012  jstring s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012  ASSERT_TRUE(s != nullptr);\012\012 const char* utf = env_-&gt;GetStringUTFChars(s, nullptr);\012  EXPECT_STREQ(&quot;hello&quot;, utf);\012  env_-&gt;ReleaseStringUTFChars(s, utf);\012\012  jboolean is_copy = JNI_FALSE;\012  utf = env_-&gt;GetStringUTFChars(s, &amp;is_copy);\012  EXPECT_EQ(JNI_TRUE, is_copy);\012  EXPECT_STREQ(&quot;hello&quot;, utf);\012  env_-&gt;ReleaseStringUTFChars(s, utf);\012})<SUB>1654</SUB>> ]
+"17456" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetStringChars_ReleaseStringChars) {\012  jstring s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012 ScopedObjectAccess soa(env_);\012 ObjPtr&lt;mirror::String&gt; s_m = soa.Decode&lt;mirror::String&gt;(s);\012  ASSERT_TRUE(s != nullptr);\012\012  jchar expected[] = { 'h', 'e', 'l', 'l', 'o' };\012 const jchar* chars = env_-&gt;GetStringChars(s, nullptr);\012  EXPECT_EQ(expected[0], chars[0]);\012  EXPECT_EQ(expected[1], chars[1]);\012  EXPECT_EQ(expected[2], chars[2]);\012  EXPECT_EQ(expected[3], chars[3]);\012  EXPECT_EQ(expected[4], chars[4]);\012  env_-&gt;ReleaseStringChars(s, chars);\012\012  jboolean is_copy = JNI_FALSE;\012  chars = env_-&gt;GetStringChars(s, &amp;is_copy);\012 if (Runtime::Current()-&gt;GetHeap()-&gt;IsMovableObject(s_m)) {\012    EXPECT_EQ(JNI_TRUE, is_copy);\012 } else {\012    EXPECT_EQ(JNI_FALSE, is_copy);\012 }\012  EXPECT_EQ(expected[0], chars[0]);\012  EXPECT_EQ(expected[1], chars[1]);\012  EXPECT_EQ(expected[2], chars[2]);\012  EXPECT_EQ(expected[3], chars[3]);\012  EXPECT_EQ(expected[4], chars[4]);\012  env_-&gt;ReleaseStringChars(s, chars);\012},TEST_F(JniInternalTest, GetStringChars_ReleaseStringChars) {\012  jstring s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012 ScopedObjectAccess soa(env_);\012 ObjPtr&lt;mirror::String&gt; s_m = soa.Decode&lt;mirror::String&gt;(s);\012  ASSERT_TRUE(s != nullptr);\012\012  jchar expected[] = { 'h', 'e', 'l', 'l', 'o' };\012 const jchar* chars = env_-&gt;GetStringChars(s, nullptr);\012  EXPECT_EQ(expected[0], chars[0]);\012  EXPECT_EQ(expected[1], chars[1]);\012  EXPECT_EQ(expected[2], chars[2]);\012  EXPECT_EQ(expected[3], chars[3]);\012  EXPECT_EQ(expected[4], chars[4]);\012  env_-&gt;ReleaseStringChars(s, chars);\012\012  jboolean is_copy = JNI_FALSE;\012  chars = env_-&gt;GetStringChars(s, &amp;is_copy);\012 if (Runtime::Current()-&gt;GetHeap()-&gt;IsMovableObject(s_m)) {\012    EXPECT_EQ(JNI_TRUE, is_copy);\012 } else {\012    EXPECT_EQ(JNI_FALSE, is_copy);\012 }\012  EXPECT_EQ(expected[0], chars[0]);\012  EXPECT_EQ(expected[1], chars[1]);\012  EXPECT_EQ(expected[2], chars[2]);\012  EXPECT_EQ(expected[3], chars[3]);\012  EXPECT_EQ(expected[4], chars[4]);\012  env_-&gt;ReleaseStringChars(s, chars);\012})<SUB>1683</SUB>> ]
+"17457" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetStringCritical_ReleaseStringCritical) {\012  jstring s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012  ASSERT_TRUE(s != nullptr);\012\012  jchar expected[] = { 'h', 'e', 'l', 'l', 'o' };\012 const jchar* chars = env_-&gt;GetStringCritical(s, nullptr);\012  EXPECT_EQ(expected[0], chars[0]);\012  EXPECT_EQ(expected[1], chars[1]);\012  EXPECT_EQ(expected[2], chars[2]);\012  EXPECT_EQ(expected[3], chars[3]);\012  EXPECT_EQ(expected[4], chars[4]);\012  env_-&gt;ReleaseStringCritical(s, chars);\012\012  jboolean is_copy = JNI_TRUE;\012  chars = env_-&gt;GetStringCritical(s, &amp;is_copy);\012 if (mirror::kUseStringCompression) {\012 // is_copy has to be JNI_TRUE because &quot;hello&quot; is all-ASCII\012    EXPECT_EQ(JNI_TRUE, is_copy);\012 } else {\012    EXPECT_EQ(JNI_FALSE, is_copy);\012 }\012  EXPECT_EQ(expected[0], chars[0]);\012  EXPECT_EQ(expected[1], chars[1]);\012  EXPECT_EQ(expected[2], chars[2]);\012  EXPECT_EQ(expected[3], chars[3]);\012  EXPECT_EQ(expected[4], chars[4]);\012  env_-&gt;ReleaseStringCritical(s, chars);\012\012 if (mirror::kUseStringCompression) {\012 // is_copy has to be JNI_FALSE because &quot;\xed\xa0\x81\xed\xb0\x80&quot; is incompressible\012    jboolean is_copy_16 = JNI_TRUE;\012    jstring s_16 = env_-&gt;NewStringUTF(&quot;\xed\xa0\x81\xed\xb0\x80&quot;);\012    chars = env_-&gt;GetStringCritical(s_16, &amp;is_copy_16);\012    EXPECT_EQ(2, env_-&gt;GetStringLength(s_16));\012    EXPECT_EQ(4, env_-&gt;GetStringUTFLength(s_16));\012    env_-&gt;ReleaseStringCritical(s_16, chars);\012 }\012},TEST_F(JniInternalTest, GetStringCritical_ReleaseStringCritical) {\012  jstring s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012  ASSERT_TRUE(s != nullptr);\012\012  jchar expected[] = { 'h', 'e', 'l', 'l', 'o' };\012 const jchar* chars = env_-&gt;GetStringCritical(s, nullptr);\012  EXPECT_EQ(expected[0], chars[0]);\012  EXPECT_EQ(expected[1], chars[1]);\012  EXPECT_EQ(expected[2], chars[2]);\012  EXPECT_EQ(expected[3], chars[3]);\012  EXPECT_EQ(expected[4], chars[4]);\012  env_-&gt;ReleaseStringCritical(s, chars);\012\012  jboolean is_copy = JNI_TRUE;\012  chars = env_-&gt;GetStringCritical(s, &amp;is_copy);\012 if (mirror::kUseStringCompression) {\012 // is_copy has to be JNI_TRUE because &quot;hello&quot; is all-ASCII\012    EXPECT_EQ(JNI_TRUE, is_copy);\012 } else {\012    EXPECT_EQ(JNI_FALSE, is_copy);\012 }\012  EXPECT_EQ(expected[0], chars[0]);\012  EXPECT_EQ(expected[1], chars[1]);\012  EXPECT_EQ(expected[2], chars[2]);\012  EXPECT_EQ(expected[3], chars[3]);\012  EXPECT_EQ(expected[4], chars[4]);\012  env_-&gt;ReleaseStringCritical(s, chars);\012\012 if (mirror::kUseStringCompression) {\012 // is_copy has to be JNI_FALSE because &quot;\xed\xa0\x81\xed\xb0\x80&quot; is incompressible\012    jboolean is_copy_16 = JNI_TRUE;\012    jstring s_16 = env_-&gt;NewStringUTF(&quot;\xed\xa0\x81\xed\xb0\x80&quot;);\012    chars = env_-&gt;GetStringCritical(s_16, &amp;is_copy_16);\012    EXPECT_EQ(2, env_-&gt;GetStringLength(s_16));\012    EXPECT_EQ(4, env_-&gt;GetStringUTFLength(s_16));\012    env_-&gt;ReleaseStringCritical(s_16, chars);\012 }\012})<SUB>1713</SUB>> ]
+"17458" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetObjectArrayElement_SetObjectArrayElement) {\012  jclass java_lang_Class = env_-&gt;FindClass(&quot;java/lang/Class&quot;);\012  ASSERT_TRUE(java_lang_Class != nullptr);\012\012  jobjectArray array = env_-&gt;NewObjectArray(1, java_lang_Class, nullptr);\012  EXPECT_NE(array, nullptr);\012  EXPECT_EQ(env_-&gt;GetObjectArrayElement(array, 0), nullptr);\012  env_-&gt;SetObjectArrayElement(array, 0, java_lang_Class);\012  EXPECT_TRUE(env_-&gt;IsSameObject(env_-&gt;GetObjectArrayElement(array, 0), java_lang_Class));\012\012 // ArrayIndexOutOfBounds for negative index.\012  env_-&gt;SetObjectArrayElement(array, -1, java_lang_Class);\012 ExpectException(aioobe_);\012\012 // ArrayIndexOutOfBounds for too-large index.\012  env_-&gt;SetObjectArrayElement(array, 1, java_lang_Class);\012 ExpectException(aioobe_);\012\012 // ArrayStoreException thrown for bad types.\012  env_-&gt;SetObjectArrayElement(array, 0, env_-&gt;NewStringUTF(&quot;not a jclass!&quot;));\012 ExpectException(ase_);\012\012 // Null as array should fail.\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(nullptr, env_-&gt;GetObjectArrayElement(nullptr, 0));\012  jni_abort_catcher.Check(&quot;java_array == null&quot;);\012  env_-&gt;SetObjectArrayElement(nullptr, 0, nullptr);\012  jni_abort_catcher.Check(&quot;java_array == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(nullptr, env_-&gt;GetObjectArrayElement(nullptr, 0));\012  jni_abort_catcher.Check(&quot;jarray was NULL&quot;);\012  env_-&gt;SetObjectArrayElement(nullptr, 0, nullptr);\012  jni_abort_catcher.Check(&quot;jarray was NULL&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012},TEST_F(JniInternalTest, GetObjectArrayElement_SetObjectArrayElement) {\012  jclass java_lang_Class = env_-&gt;FindClass(&quot;java/lang/Class&quot;);\012  ASSERT_TRUE(java_lang_Class != nullptr);\012\012  jobjectArray array = env_-&gt;NewObjectArray(1, java_lang_Class, nullptr);\012  EXPECT_NE(array, nullptr);\012  EXPECT_EQ(env_-&gt;GetObjectArrayElement(array, 0), nullptr);\012  env_-&gt;SetObjectArrayElement(array, 0, java_lang_Class);\012  EXPECT_TRUE(env_-&gt;IsSameObject(env_-&gt;GetObjectArrayElement(array, 0), java_lang_Class));\012\012 // ArrayIndexOutOfBounds for negative index.\012  env_-&gt;SetObjectArrayElement(array, -1, java_lang_Class);\012 ExpectException(aioobe_);\012\012 // ArrayIndexOutOfBounds for too-large index.\012  env_-&gt;SetObjectArrayElement(array, 1, java_lang_Class);\012 ExpectException(aioobe_);\012\012 // ArrayStoreException thrown for bad types.\012  env_-&gt;SetObjectArrayElement(array, 0, env_-&gt;NewStringUTF(&quot;not a jclass!&quot;));\012 ExpectException(ase_);\012\012 // Null as array should fail.\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(nullptr, env_-&gt;GetObjectArrayElement(nullptr, 0));\012  jni_abort_catcher.Check(&quot;java_array == null&quot;);\012  env_-&gt;SetObjectArrayElement(nullptr, 0, nullptr);\012  jni_abort_catcher.Check(&quot;java_array == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(nullptr, env_-&gt;GetObjectArrayElement(nullptr, 0));\012  jni_abort_catcher.Check(&quot;jarray was NULL&quot;);\012  env_-&gt;SetObjectArrayElement(nullptr, 0, nullptr);\012  jni_abort_catcher.Check(&quot;jarray was NULL&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012})<SUB>1752</SUB>> ]
+"17459" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetPrimitiveField_SetPrimitiveField) {\012  TEST_PRIMITIVE_FIELD_FOR_CLASS(&quot;AllFields&quot;);\012},TEST_F(JniInternalTest, GetPrimitiveField_SetPrimitiveField) {\012  TEST_PRIMITIVE_FIELD_FOR_CLASS(&quot;AllFields&quot;);\012})<SUB>1883</SUB>> ]
+"17460" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetPrimitiveField_SetPrimitiveField_Subclass) {\012  TEST_PRIMITIVE_FIELD_FOR_CLASS(&quot;AllFieldsSub&quot;);\012},TEST_F(JniInternalTest, GetPrimitiveField_SetPrimitiveField_Subclass) {\012  TEST_PRIMITIVE_FIELD_FOR_CLASS(&quot;AllFieldsSub&quot;);\012})<SUB>1887</SUB>> ]
+"17461" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetField_SetField_unrelated) {\012 Thread::Current()-&gt;TransitionFromSuspendedToRunnable();\012 LoadDex(&quot;AllFields&quot;);\012 bool started = runtime_-&gt;Start();\012  ASSERT_TRUE(started);\012  jclass c = env_-&gt;FindClass(&quot;AllFields&quot;);\012  ASSERT_NE(c, nullptr);\012  jclass uc = env_-&gt;FindClass(&quot;AllFieldsUnrelated&quot;);\012  ASSERT_NE(uc, nullptr);\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(true);\012  EXPECT_UNRELATED_FIELD_FAILURE(Boolean, &quot;sZ&quot;, &quot;Z&quot;, JNI_TRUE);\012  EXPECT_UNRELATED_FIELD_FAILURE(Byte, &quot;sB&quot;, &quot;B&quot;, 1);\012  EXPECT_UNRELATED_FIELD_FAILURE(Char, &quot;sC&quot;, &quot;C&quot;, 'a');\012  EXPECT_UNRELATED_FIELD_FAILURE(Double, &quot;sD&quot;, &quot;D&quot;, 1.0);\012  EXPECT_UNRELATED_FIELD_FAILURE(Float, &quot;sF&quot;, &quot;F&quot;, 1.0);\012  EXPECT_UNRELATED_FIELD_FAILURE(Int, &quot;sI&quot;, &quot;I&quot;, 1);\012  EXPECT_UNRELATED_FIELD_FAILURE(Long, &quot;sJ&quot;, &quot;J&quot;, 1);\012  EXPECT_UNRELATED_FIELD_FAILURE(Short, &quot;sS&quot;, &quot;S&quot;, 1);\012  EXPECT_UNRELATED_FIELD_FAILURE(Object, &quot;sObject&quot;, &quot;Ljava/lang/Object;&quot;, c);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012},TEST_F(JniInternalTest, GetField_SetField_unrelated) {\012 Thread::Current()-&gt;TransitionFromSuspendedToRunnable();\012 LoadDex(&quot;AllFields&quot;);\012 bool started = runtime_-&gt;Start();\012  ASSERT_TRUE(started);\012  jclass c = env_-&gt;FindClass(&quot;AllFields&quot;);\012  ASSERT_NE(c, nullptr);\012  jclass uc = env_-&gt;FindClass(&quot;AllFieldsUnrelated&quot;);\012  ASSERT_NE(uc, nullptr);\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(true);\012  EXPECT_UNRELATED_FIELD_FAILURE(Boolean, &quot;sZ&quot;, &quot;Z&quot;, JNI_TRUE);\012  EXPECT_UNRELATED_FIELD_FAILURE(Byte, &quot;sB&quot;, &quot;B&quot;, 1);\012  EXPECT_UNRELATED_FIELD_FAILURE(Char, &quot;sC&quot;, &quot;C&quot;, 'a');\012  EXPECT_UNRELATED_FIELD_FAILURE(Double, &quot;sD&quot;, &quot;D&quot;, 1.0);\012  EXPECT_UNRELATED_FIELD_FAILURE(Float, &quot;sF&quot;, &quot;F&quot;, 1.0);\012  EXPECT_UNRELATED_FIELD_FAILURE(Int, &quot;sI&quot;, &quot;I&quot;, 1);\012  EXPECT_UNRELATED_FIELD_FAILURE(Long, &quot;sJ&quot;, &quot;J&quot;, 1);\012  EXPECT_UNRELATED_FIELD_FAILURE(Short, &quot;sS&quot;, &quot;S&quot;, 1);\012  EXPECT_UNRELATED_FIELD_FAILURE(Object, &quot;sObject&quot;, &quot;Ljava/lang/Object;&quot;, c);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012})<SUB>1902</SUB>> ]
+"17462" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetObjectField_SetObjectField) {\012  TEST_OBJECT_FIELD_FOR_CLASS(&quot;AllFields&quot;);\012},TEST_F(JniInternalTest, GetObjectField_SetObjectField) {\012  TEST_OBJECT_FIELD_FOR_CLASS(&quot;AllFields&quot;);\012})<SUB>1956</SUB>> ]
+"17463" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetObjectField_SetObjectField_subclass) {\012  TEST_OBJECT_FIELD_FOR_CLASS(&quot;AllFieldsSub&quot;);\012},TEST_F(JniInternalTest, GetObjectField_SetObjectField_subclass) {\012  TEST_OBJECT_FIELD_FOR_CLASS(&quot;AllFieldsSub&quot;);\012})<SUB>1960</SUB>> ]
+"17464" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewLocalRef_nullptr) {\012  EXPECT_EQ(env_-&gt;NewLocalRef(nullptr), nullptr);\012},TEST_F(JniInternalTest, NewLocalRef_nullptr) {\012  EXPECT_EQ(env_-&gt;NewLocalRef(nullptr), nullptr);\012})<SUB>1964</SUB>> ]
+"17465" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewLocalRef) {\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  jobject o = env_-&gt;NewLocalRef(s);\012  EXPECT_NE(o, nullptr);\012  EXPECT_NE(o, s);\012\012  EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(o));\012},TEST_F(JniInternalTest, NewLocalRef) {\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  jobject o = env_-&gt;NewLocalRef(s);\012  EXPECT_NE(o, nullptr);\012  EXPECT_NE(o, s);\012\012  EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(o));\012})<SUB>1968</SUB>> ]
+"17466" [label = <(UNKNOWN,TEST_F(JniInternalTest, DeleteLocalRef_nullptr) {\012  env_-&gt;DeleteLocalRef(nullptr);\012},TEST_F(JniInternalTest, DeleteLocalRef_nullptr) {\012  env_-&gt;DeleteLocalRef(nullptr);\012})<SUB>1978</SUB>> ]
+"17467" [label = <(UNKNOWN,TEST_F(JniInternalTest, DeleteLocalRef) {\012 // This tests leads to warnings and errors in the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  env_-&gt;DeleteLocalRef(s);\012\012 // Currently, deleting an already-deleted reference is just a CheckJNI warning.\012 {\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      env_-&gt;DeleteLocalRef(s);\012 }\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012    env_-&gt;DeleteLocalRef(s);\012    std::string expected(StringPrintf(&quot;use of deleted local reference %p&quot;, s));\012    check_jni_abort_catcher.Check(expected.c_str());\012    EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012 }\012\012  s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  jobject o = env_-&gt;NewLocalRef(s);\012  ASSERT_NE(o, nullptr);\012\012  env_-&gt;DeleteLocalRef(s);\012  env_-&gt;DeleteLocalRef(o);\012},TEST_F(JniInternalTest, DeleteLocalRef) {\012 // This tests leads to warnings and errors in the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  env_-&gt;DeleteLocalRef(s);\012\012 // Currently, deleting an already-deleted reference is just a CheckJNI warning.\012 {\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      env_-&gt;DeleteLocalRef(s);\012 }\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012    env_-&gt;DeleteLocalRef(s);\012    std::string expected(StringPrintf(&quot;use of deleted local reference %p&quot;, s));\012    check_jni_abort_catcher.Check(expected.c_str());\012    EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012 }\012\012  s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  jobject o = env_-&gt;NewLocalRef(s);\012  ASSERT_NE(o, nullptr);\012\012  env_-&gt;DeleteLocalRef(s);\012  env_-&gt;DeleteLocalRef(o);\012})<SUB>1982</SUB>> ]
+"17468" [label = <(UNKNOWN,TEST_F(JniInternalTest, PushLocalFrame_10395422) {\012 // The JNI specification is ambiguous about whether the given capacity is to be interpreted as a\012 // maximum or as a minimum, but it seems like it's supposed to be a minimum, and that's how\012 // Android historically treated it, and it's how the RI treats it. It's also the more useful\012 // interpretation!\012  ASSERT_EQ(JNI_OK, env_-&gt;PushLocalFrame(0));\012  env_-&gt;PopLocalFrame(nullptr);\012\012 // The following two tests will print errors to the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012 // Negative capacities are not allowed.\012  ASSERT_EQ(JNI_ERR, env_-&gt;PushLocalFrame(-1));\012},TEST_F(JniInternalTest, PushLocalFrame_10395422) {\012 // The JNI specification is ambiguous about whether the given capacity is to be interpreted as a\012 // maximum or as a minimum, but it seems like it's supposed to be a minimum, and that's how\012 // Android historically treated it, and it's how the RI treats it. It's also the more useful\012 // interpretation!\012  ASSERT_EQ(JNI_OK, env_-&gt;PushLocalFrame(0));\012  env_-&gt;PopLocalFrame(nullptr);\012\012 // The following two tests will print errors to the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012 // Negative capacities are not allowed.\012  ASSERT_EQ(JNI_ERR, env_-&gt;PushLocalFrame(-1));\012})<SUB>2014</SUB>> ]
+"17469" [label = <(UNKNOWN,TEST_F(JniInternalTest, PushLocalFrame_PopLocalFrame) {\012 // This tests leads to errors in the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012  jobject original = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(original, nullptr);\012\012  jobject outer;\012  jobject inner1, inner2;\012 ScopedObjectAccess soa(env_);\012 {\012    ASSERT_EQ(JNI_OK, env_-&gt;PushLocalFrame(4));\012    outer = env_-&gt;NewLocalRef(original);\012\012 {\012      ASSERT_EQ(JNI_OK, env_-&gt;PushLocalFrame(4));\012      inner1 = env_-&gt;NewLocalRef(outer);\012      inner2 = env_-&gt;NewStringUTF(&quot;survivor&quot;);\012      EXPECT_NE(env_-&gt;PopLocalFrame(inner2), nullptr);\012 }\012\012    EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(original));\012    EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(outer));\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(inner1));\012      check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012 }\012\012 // Our local reference for the survivor is invalid because the survivor\012 // gets a new local reference...\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(inner2));\012      check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012 }\012\012    EXPECT_EQ(env_-&gt;PopLocalFrame(nullptr), nullptr);\012 }\012  EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(original));\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(outer));\012  check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012  EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(inner1));\012  check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012  EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(inner2));\012  check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012},TEST_F(JniInternalTest, PushLocalFrame_PopLocalFrame) {\012 // This tests leads to errors in the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012  jobject original = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(original, nullptr);\012\012  jobject outer;\012  jobject inner1, inner2;\012 ScopedObjectAccess soa(env_);\012 {\012    ASSERT_EQ(JNI_OK, env_-&gt;PushLocalFrame(4));\012    outer = env_-&gt;NewLocalRef(original);\012\012 {\012      ASSERT_EQ(JNI_OK, env_-&gt;PushLocalFrame(4));\012      inner1 = env_-&gt;NewLocalRef(outer);\012      inner2 = env_-&gt;NewStringUTF(&quot;survivor&quot;);\012      EXPECT_NE(env_-&gt;PopLocalFrame(inner2), nullptr);\012 }\012\012    EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(original));\012    EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(outer));\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(inner1));\012      check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012 }\012\012 // Our local reference for the survivor is invalid because the survivor\012 // gets a new local reference...\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(inner2));\012      check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012 }\012\012    EXPECT_EQ(env_-&gt;PopLocalFrame(nullptr), nullptr);\012 }\012  EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(original));\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(outer));\012  check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012  EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(inner1));\012  check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012  EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(inner2));\012  check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012})<SUB>2029</SUB>> ]
+"17470" [label = <(UNKNOWN,TEST_F(JniInternalTest, PushLocalFrame_LimitAndOverflow) {\012 // Try a very large value that should fail.\012  ASSERT_NE(JNI_OK, env_-&gt;PushLocalFrame(std::numeric_limits&lt;jint&gt;::max()));\012  ASSERT_TRUE(env_-&gt;ExceptionCheck());\012  env_-&gt;ExceptionClear();\012\012 // On 32-bit, also check for some overflow conditions.\012#ifndef __LP64__\012  ASSERT_EQ(JNI_OK, env_-&gt;PushLocalFrame(10));\012  ASSERT_NE(JNI_OK, env_-&gt;PushLocalFrame(std::numeric_limits&lt;jint&gt;::max() - 10));\012  ASSERT_TRUE(env_-&gt;ExceptionCheck());\012  env_-&gt;ExceptionClear();\012  EXPECT_EQ(env_-&gt;PopLocalFrame(nullptr), nullptr);\012#endif\012},TEST_F(JniInternalTest, PushLocalFrame_LimitAndOverflow) {\012 // Try a very large value that should fail.\012  ASSERT_NE(JNI_OK, env_-&gt;PushLocalFrame(std::numeric_limits&lt;jint&gt;::max()));\012  ASSERT_TRUE(env_-&gt;ExceptionCheck());\012  env_-&gt;ExceptionClear();\012\012 // On 32-bit, also check for some overflow conditions.\012#ifndef __LP64__\012  ASSERT_EQ(JNI_OK, env_-&gt;PushLocalFrame(10));\012  ASSERT_NE(JNI_OK, env_-&gt;PushLocalFrame(std::numeric_limits&lt;jint&gt;::max() - 10));\012  ASSERT_TRUE(env_-&gt;ExceptionCheck());\012  env_-&gt;ExceptionClear();\012  EXPECT_EQ(env_-&gt;PopLocalFrame(nullptr), nullptr);\012#endif\012})<SUB>2078</SUB>> ]
+"17471" [label = <(UNKNOWN,TEST_F(JniInternalTest, PushLocalFrame_b62223672) {\012 // The 512 entry limit has been lifted, try a larger value.\012  ASSERT_EQ(JNI_OK, env_-&gt;PushLocalFrame(1024));\012  EXPECT_EQ(env_-&gt;PopLocalFrame(nullptr), nullptr);\012},TEST_F(JniInternalTest, PushLocalFrame_b62223672) {\012 // The 512 entry limit has been lifted, try a larger value.\012  ASSERT_EQ(JNI_OK, env_-&gt;PushLocalFrame(1024));\012  EXPECT_EQ(env_-&gt;PopLocalFrame(nullptr), nullptr);\012})<SUB>2094</SUB>> ]
+"17472" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewGlobalRef_nullptr) {\012  EXPECT_EQ(env_-&gt;NewGlobalRef(nullptr), nullptr);\012},TEST_F(JniInternalTest, NewGlobalRef_nullptr) {\012  EXPECT_EQ(env_-&gt;NewGlobalRef(nullptr), nullptr);\012})<SUB>2100</SUB>> ]
+"17473" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewGlobalRef) {\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  jobject o = env_-&gt;NewGlobalRef(s);\012  EXPECT_NE(o, nullptr);\012  EXPECT_NE(o, s);\012\012  EXPECT_EQ(env_-&gt;GetObjectRefType(o), JNIGlobalRefType);\012},TEST_F(JniInternalTest, NewGlobalRef) {\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  jobject o = env_-&gt;NewGlobalRef(s);\012  EXPECT_NE(o, nullptr);\012  EXPECT_NE(o, s);\012\012  EXPECT_EQ(env_-&gt;GetObjectRefType(o), JNIGlobalRefType);\012})<SUB>2104</SUB>> ]
+"17474" [label = <(UNKNOWN,TEST_F(JniInternalTest, DeleteGlobalRef_nullptr) {\012  env_-&gt;DeleteGlobalRef(nullptr);\012},TEST_F(JniInternalTest, DeleteGlobalRef_nullptr) {\012  env_-&gt;DeleteGlobalRef(nullptr);\012})<SUB>2114</SUB>> ]
+"17475" [label = <(UNKNOWN,TEST_F(JniInternalTest, DeleteGlobalRef) {\012 // This tests leads to warnings and errors in the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012\012  jobject o = env_-&gt;NewGlobalRef(s);\012  ASSERT_NE(o, nullptr);\012  env_-&gt;DeleteGlobalRef(o);\012\012 // Currently, deleting an already-deleted reference is just a CheckJNI warning.\012 {\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      env_-&gt;DeleteGlobalRef(o);\012 }\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012    env_-&gt;DeleteGlobalRef(o);\012    std::string expected(StringPrintf(&quot;use of deleted global reference %p&quot;, o));\012    check_jni_abort_catcher.Check(expected.c_str());\012    EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012 }\012\012  jobject o1 = env_-&gt;NewGlobalRef(s);\012  ASSERT_NE(o1, nullptr);\012  jobject o2 = env_-&gt;NewGlobalRef(s);\012  ASSERT_NE(o2, nullptr);\012\012  env_-&gt;DeleteGlobalRef(o1);\012  env_-&gt;DeleteGlobalRef(o2);\012},TEST_F(JniInternalTest, DeleteGlobalRef) {\012 // This tests leads to warnings and errors in the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012\012  jobject o = env_-&gt;NewGlobalRef(s);\012  ASSERT_NE(o, nullptr);\012  env_-&gt;DeleteGlobalRef(o);\012\012 // Currently, deleting an already-deleted reference is just a CheckJNI warning.\012 {\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      env_-&gt;DeleteGlobalRef(o);\012 }\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012    env_-&gt;DeleteGlobalRef(o);\012    std::string expected(StringPrintf(&quot;use of deleted global reference %p&quot;, o));\012    check_jni_abort_catcher.Check(expected.c_str());\012    EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012 }\012\012  jobject o1 = env_-&gt;NewGlobalRef(s);\012  ASSERT_NE(o1, nullptr);\012  jobject o2 = env_-&gt;NewGlobalRef(s);\012  ASSERT_NE(o2, nullptr);\012\012  env_-&gt;DeleteGlobalRef(o1);\012  env_-&gt;DeleteGlobalRef(o2);\012})<SUB>2118</SUB>> ]
+"17476" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewWeakGlobalRef_nullptr) {\012  EXPECT_EQ(env_-&gt;NewWeakGlobalRef(nullptr), nullptr);\012},TEST_F(JniInternalTest, NewWeakGlobalRef_nullptr) {\012  EXPECT_EQ(env_-&gt;NewWeakGlobalRef(nullptr), nullptr);\012})<SUB>2153</SUB>> ]
+"17477" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewWeakGlobalRef) {\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  jobject o = env_-&gt;NewWeakGlobalRef(s);\012  EXPECT_NE(o, nullptr);\012  EXPECT_NE(o, s);\012\012  EXPECT_EQ(env_-&gt;GetObjectRefType(o), JNIWeakGlobalRefType);\012},TEST_F(JniInternalTest, NewWeakGlobalRef) {\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  jobject o = env_-&gt;NewWeakGlobalRef(s);\012  EXPECT_NE(o, nullptr);\012  EXPECT_NE(o, s);\012\012  EXPECT_EQ(env_-&gt;GetObjectRefType(o), JNIWeakGlobalRefType);\012})<SUB>2157</SUB>> ]
+"17478" [label = <(UNKNOWN,TEST_F(JniInternalTest, DeleteWeakGlobalRef_nullptr) {\012  env_-&gt;DeleteWeakGlobalRef(nullptr);\012},TEST_F(JniInternalTest, DeleteWeakGlobalRef_nullptr) {\012  env_-&gt;DeleteWeakGlobalRef(nullptr);\012})<SUB>2167</SUB>> ]
+"17479" [label = <(UNKNOWN,TEST_F(JniInternalTest, DeleteWeakGlobalRef) {\012 // This tests leads to warnings and errors in the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012\012  jobject o = env_-&gt;NewWeakGlobalRef(s);\012  ASSERT_NE(o, nullptr);\012  env_-&gt;DeleteWeakGlobalRef(o);\012\012 // Currently, deleting an already-deleted reference is just a CheckJNI warning.\012 {\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      env_-&gt;DeleteWeakGlobalRef(o);\012 }\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012    env_-&gt;DeleteWeakGlobalRef(o);\012    std::string expected(StringPrintf(&quot;use of deleted weak global reference %p&quot;, o));\012    check_jni_abort_catcher.Check(expected.c_str());\012    EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012 }\012\012  jobject o1 = env_-&gt;NewWeakGlobalRef(s);\012  ASSERT_NE(o1, nullptr);\012  jobject o2 = env_-&gt;NewWeakGlobalRef(s);\012  ASSERT_NE(o2, nullptr);\012\012  env_-&gt;DeleteWeakGlobalRef(o1);\012  env_-&gt;DeleteWeakGlobalRef(o2);\012},TEST_F(JniInternalTest, DeleteWeakGlobalRef) {\012 // This tests leads to warnings and errors in the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012\012  jobject o = env_-&gt;NewWeakGlobalRef(s);\012  ASSERT_NE(o, nullptr);\012  env_-&gt;DeleteWeakGlobalRef(o);\012\012 // Currently, deleting an already-deleted reference is just a CheckJNI warning.\012 {\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      env_-&gt;DeleteWeakGlobalRef(o);\012 }\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012    env_-&gt;DeleteWeakGlobalRef(o);\012    std::string expected(StringPrintf(&quot;use of deleted weak global reference %p&quot;, o));\012    check_jni_abort_catcher.Check(expected.c_str());\012    EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012 }\012\012  jobject o1 = env_-&gt;NewWeakGlobalRef(s);\012  ASSERT_NE(o1, nullptr);\012  jobject o2 = env_-&gt;NewWeakGlobalRef(s);\012  ASSERT_NE(o2, nullptr);\012\012  env_-&gt;DeleteWeakGlobalRef(o1);\012  env_-&gt;DeleteWeakGlobalRef(o2);\012})<SUB>2171</SUB>> ]
+"17480" [label = <(UNKNOWN,TEST_F(JniInternalTest, ExceptionDescribe) {\012 // This checks how ExceptionDescribe handles call without exception.\012  env_-&gt;ExceptionClear();\012  env_-&gt;ExceptionDescribe();\012},TEST_F(JniInternalTest, ExceptionDescribe) {\012 // This checks how ExceptionDescribe handles call without exception.\012  env_-&gt;ExceptionClear();\012  env_-&gt;ExceptionDescribe();\012})<SUB>2206</SUB>> ]
+"17481" [label = <(UNKNOWN,TEST_F(JniInternalTest, Throw) {\012  jclass exception_class = env_-&gt;FindClass(&quot;java/lang/RuntimeException&quot;);\012  ASSERT_TRUE(exception_class != nullptr);\012  jthrowable exception = reinterpret_cast&lt;jthrowable&gt;(env_-&gt;AllocObject(exception_class));\012  ASSERT_TRUE(exception != nullptr);\012\012  EXPECT_EQ(JNI_OK, env_-&gt;Throw(exception));\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  jthrowable thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsSameObject(exception, thrown_exception));\012\012 // Bad argument.\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(JNI_ERR, env_-&gt;Throw(nullptr));\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  EXPECT_EQ(JNI_ERR, env_-&gt;Throw(nullptr));\012  check_jni_abort_catcher.Check(&quot;Throw received NULL jthrowable&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012},TEST_F(JniInternalTest, Throw) {\012  jclass exception_class = env_-&gt;FindClass(&quot;java/lang/RuntimeException&quot;);\012  ASSERT_TRUE(exception_class != nullptr);\012  jthrowable exception = reinterpret_cast&lt;jthrowable&gt;(env_-&gt;AllocObject(exception_class));\012  ASSERT_TRUE(exception != nullptr);\012\012  EXPECT_EQ(JNI_OK, env_-&gt;Throw(exception));\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  jthrowable thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsSameObject(exception, thrown_exception));\012\012 // Bad argument.\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(JNI_ERR, env_-&gt;Throw(nullptr));\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  EXPECT_EQ(JNI_ERR, env_-&gt;Throw(nullptr));\012  check_jni_abort_catcher.Check(&quot;Throw received NULL jthrowable&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012})<SUB>2212</SUB>> ]
+"17482" [label = <(UNKNOWN,TEST_F(JniInternalTest, ThrowNew) {\012  jclass exception_class = env_-&gt;FindClass(&quot;java/lang/RuntimeException&quot;);\012  ASSERT_TRUE(exception_class != nullptr);\012\012  jthrowable thrown_exception;\012\012  EXPECT_EQ(JNI_OK, env_-&gt;ThrowNew(exception_class, &quot;hello world&quot;));\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(thrown_exception, exception_class));\012\012  EXPECT_EQ(JNI_OK, env_-&gt;ThrowNew(exception_class, nullptr));\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(thrown_exception, exception_class));\012\012 // Bad argument.\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  EXPECT_EQ(JNI_ERR, env_-&gt;ThrowNew(nullptr, nullptr));\012  check_jni_abort_catcher.Check(&quot;c == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(JNI_ERR, env_-&gt;ThrowNew(nullptr, nullptr));\012  check_jni_abort_catcher.Check(&quot;ThrowNew received NULL jclass&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012},TEST_F(JniInternalTest, ThrowNew) {\012  jclass exception_class = env_-&gt;FindClass(&quot;java/lang/RuntimeException&quot;);\012  ASSERT_TRUE(exception_class != nullptr);\012\012  jthrowable thrown_exception;\012\012  EXPECT_EQ(JNI_OK, env_-&gt;ThrowNew(exception_class, &quot;hello world&quot;));\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(thrown_exception, exception_class));\012\012  EXPECT_EQ(JNI_OK, env_-&gt;ThrowNew(exception_class, nullptr));\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(thrown_exception, exception_class));\012\012 // Bad argument.\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  EXPECT_EQ(JNI_ERR, env_-&gt;ThrowNew(nullptr, nullptr));\012  check_jni_abort_catcher.Check(&quot;c == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(JNI_ERR, env_-&gt;ThrowNew(nullptr, nullptr));\012  check_jni_abort_catcher.Check(&quot;ThrowNew received NULL jclass&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012})<SUB>2234</SUB>> ]
+"17483" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewDirectBuffer_GetDirectBufferAddress_GetDirectBufferCapacity) {\012 // Start runtime.\012 Thread* self = Thread::Current();\012  self-&gt;TransitionFromSuspendedToRunnable();\012 MakeInterpreted(class_linker_-&gt;FindSystemClass(self, &quot;Ljava/lang/Class;&quot;));\012 MakeInterpreted(class_linker_-&gt;FindSystemClass(self, &quot;Ljava/lang/Object;&quot;));\012 MakeInterpreted(class_linker_-&gt;FindSystemClass(self, &quot;Ljava/nio/DirectByteBuffer;&quot;));\012 MakeInterpreted(class_linker_-&gt;FindSystemClass(self, &quot;Ljava/nio/Bits;&quot;));\012 MakeInterpreted(class_linker_-&gt;FindSystemClass(self, &quot;Ljava/nio/MappedByteBuffer;&quot;));\012 MakeInterpreted(class_linker_-&gt;FindSystemClass(self, &quot;Ljava/nio/ByteBuffer;&quot;));\012 MakeInterpreted(class_linker_-&gt;FindSystemClass(self, &quot;Ljava/nio/Buffer;&quot;));\012 // TODO: we only load a dex file here as starting the runtime relies upon it.\012 const char* class_name = &quot;StaticLeafMethods&quot;;\012 LoadDex(class_name);\012 bool started = runtime_-&gt;Start();\012  ASSERT_TRUE(started);\012\012  jclass buffer_class = env_-&gt;FindClass(&quot;java/nio/Buffer&quot;);\012  ASSERT_NE(buffer_class, nullptr);\012\012 char bytes[1024];\012  jobject buffer = env_-&gt;NewDirectByteBuffer(bytes, sizeof(bytes));\012  ASSERT_NE(buffer, nullptr);\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(buffer, buffer_class));\012  ASSERT_EQ(env_-&gt;GetDirectBufferAddress(buffer), bytes);\012  ASSERT_EQ(env_-&gt;GetDirectBufferCapacity(buffer), static_cast&lt;jlong&gt;(sizeof(bytes)));\012\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    env_-&gt;NewDirectByteBuffer(bytes, static_cast&lt;jlong&gt;(INT_MAX) + 1);\012    check_jni_abort_catcher.Check(&quot;in call to NewDirectByteBuffer&quot;);\012 }\012},TEST_F(JniInternalTest, NewDirectBuffer_GetDirectBufferAddress_GetDirectBufferCapacity) {\012 // Start runtime.\012 Thread* self = Thread::Current();\012  self-&gt;TransitionFromSuspendedToRunnable();\012 MakeInterpreted(class_linker_-&gt;FindSystemClass(self, &quot;Ljava/lang/Class;&quot;));\012 MakeInterpreted(class_linker_-&gt;FindSystemClass(self, &quot;Ljava/lang/Object;&quot;));\012 MakeInterpreted(class_linker_-&gt;FindSystemClass(self, &quot;Ljava/nio/DirectByteBuffer;&quot;));\012 MakeInterpreted(class_linker_-&gt;FindSystemClass(self, &quot;Ljava/nio/Bits;&quot;));\012 MakeInterpreted(class_linker_-&gt;FindSystemClass(self, &quot;Ljava/nio/MappedByteBuffer;&quot;));\012 MakeInterpreted(class_linker_-&gt;FindSystemClass(self, &quot;Ljava/nio/ByteBuffer;&quot;));\012 MakeInterpreted(class_linker_-&gt;FindSystemClass(self, &quot;Ljava/nio/Buffer;&quot;));\012 // TODO: we only load a dex file here as starting the runtime relies upon it.\012 const char* class_name = &quot;StaticLeafMethods&quot;;\012 LoadDex(class_name);\012 bool started = runtime_-&gt;Start();\012  ASSERT_TRUE(started);\012\012  jclass buffer_class = env_-&gt;FindClass(&quot;java/nio/Buffer&quot;);\012  ASSERT_NE(buffer_class, nullptr);\012\012 char bytes[1024];\012  jobject buffer = env_-&gt;NewDirectByteBuffer(bytes, sizeof(bytes));\012  ASSERT_NE(buffer, nullptr);\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(buffer, buffer_class));\012  ASSERT_EQ(env_-&gt;GetDirectBufferAddress(buffer), bytes);\012  ASSERT_EQ(env_-&gt;GetDirectBufferCapacity(buffer), static_cast&lt;jlong&gt;(sizeof(bytes)));\012\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    env_-&gt;NewDirectByteBuffer(bytes, static_cast&lt;jlong&gt;(INT_MAX) + 1);\012    check_jni_abort_catcher.Check(&quot;in call to NewDirectByteBuffer&quot;);\012 }\012})<SUB>2263</SUB>> ]
+"17484" [label = <(UNKNOWN,TEST_F(JniInternalTest, MonitorEnterExit) {\012 // This will print some error messages. Suppress.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012 // Create an object to torture.\012  jclass object_class = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_NE(object_class, nullptr);\012  jobject object = env_-&gt;AllocObject(object_class);\012  ASSERT_NE(object, nullptr);\012\012 // Expected class of exceptions\012  jclass imse_class = env_-&gt;FindClass(&quot;java/lang/IllegalMonitorStateException&quot;);\012  ASSERT_NE(imse_class, nullptr);\012\012  jthrowable thrown_exception;\012\012 // Unlock of unowned monitor\012  env_-&gt;MonitorExit(object);\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(thrown_exception, imse_class));\012\012 // Lock of unowned monitor\012  env_-&gt;MonitorEnter(object);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012 // Regular unlock\012  env_-&gt;MonitorExit(object);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Recursively lock a lot\012 size_t max_recursive_lock = 1024;\012 for (size_t i = 0; i &lt; max_recursive_lock; i++) {\012    env_-&gt;MonitorEnter(object);\012    EXPECT_FALSE(env_-&gt;ExceptionCheck());\012 }\012 // Recursively unlock a lot\012 for (size_t i = 0; i &lt; max_recursive_lock; i++) {\012    env_-&gt;MonitorExit(object);\012    EXPECT_FALSE(env_-&gt;ExceptionCheck());\012 }\012\012 // Unlock of unowned monitor\012  env_-&gt;MonitorExit(object);\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(thrown_exception, imse_class));\012\012 // It's an error to call MonitorEnter or MonitorExit on null.\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    env_-&gt;MonitorEnter(nullptr);\012    check_jni_abort_catcher.Check(&quot;in call to MonitorEnter&quot;);\012    env_-&gt;MonitorExit(nullptr);\012    check_jni_abort_catcher.Check(&quot;in call to MonitorExit&quot;);\012 }\012},TEST_F(JniInternalTest, MonitorEnterExit) {\012 // This will print some error messages. Suppress.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012 // Create an object to torture.\012  jclass object_class = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_NE(object_class, nullptr);\012  jobject object = env_-&gt;AllocObject(object_class);\012  ASSERT_NE(object, nullptr);\012\012 // Expected class of exceptions\012  jclass imse_class = env_-&gt;FindClass(&quot;java/lang/IllegalMonitorStateException&quot;);\012  ASSERT_NE(imse_class, nullptr);\012\012  jthrowable thrown_exception;\012\012 // Unlock of unowned monitor\012  env_-&gt;MonitorExit(object);\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(thrown_exception, imse_class));\012\012 // Lock of unowned monitor\012  env_-&gt;MonitorEnter(object);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012 // Regular unlock\012  env_-&gt;MonitorExit(object);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Recursively lock a lot\012 size_t max_recursive_lock = 1024;\012 for (size_t i = 0; i &lt; max_recursive_lock; i++) {\012    env_-&gt;MonitorEnter(object);\012    EXPECT_FALSE(env_-&gt;ExceptionCheck());\012 }\012 // Recursively unlock a lot\012 for (size_t i = 0; i &lt; max_recursive_lock; i++) {\012    env_-&gt;MonitorExit(object);\012    EXPECT_FALSE(env_-&gt;ExceptionCheck());\012 }\012\012 // Unlock of unowned monitor\012  env_-&gt;MonitorExit(object);\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(thrown_exception, imse_class));\012\012 // It's an error to call MonitorEnter or MonitorExit on null.\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    env_-&gt;MonitorEnter(nullptr);\012    check_jni_abort_catcher.Check(&quot;in call to MonitorEnter&quot;);\012    env_-&gt;MonitorExit(nullptr);\012    check_jni_abort_catcher.Check(&quot;in call to MonitorExit&quot;);\012 }\012})<SUB>2297</SUB>> ]
+"17496" [label = <(UNKNOWN,TEST_F(JniInternalTest, MonitorExitLockedInDifferentCall) {\012 SetUpForTest(false, &quot;foo&quot;, &quot;()V&quot;, reinterpret_cast&lt;void*&gt;(&amp;Java_MyClassNatives_foo_exit));\012  ASSERT_NE(jobj_, nullptr);\012\012  env_-&gt;MonitorEnter(jobj_);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  env_-&gt;CallNonvirtualVoidMethod(jobj_, jklass_, jmethod_);\012  check_jni_abort_catcher.Check(&quot;Unlocking monitor that wasn't locked here&quot;);\012},TEST_F(JniInternalTest, MonitorExitLockedInDifferentCall) {\012 SetUpForTest(false, &quot;foo&quot;, &quot;()V&quot;, reinterpret_cast&lt;void*&gt;(&amp;Java_MyClassNatives_foo_exit));\012  ASSERT_NE(jobj_, nullptr);\012\012  env_-&gt;MonitorEnter(jobj_);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  env_-&gt;CallNonvirtualVoidMethod(jobj_, jklass_, jmethod_);\012  check_jni_abort_catcher.Check(&quot;Unlocking monitor that wasn't locked here&quot;);\012})<SUB>2361</SUB>> ]
+"17508" [label = <(UNKNOWN,TEST_F(JniInternalTest, MonitorExitNotAllUnlocked) {\012 SetUpForTest(false,\012 &quot;foo&quot;,\012 &quot;()V&quot;,\012 reinterpret_cast&lt;void*&gt;(&amp;Java_MyClassNatives_foo_enter_no_exit));\012  ASSERT_NE(jobj_, nullptr);\012\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  env_-&gt;CallNonvirtualVoidMethod(jobj_, jklass_, jmethod_);\012  check_jni_abort_catcher.Check(&quot;Still holding a locked object on JNI end&quot;);\012},TEST_F(JniInternalTest, MonitorExitNotAllUnlocked) {\012 SetUpForTest(false,\012 &quot;foo&quot;,\012 &quot;()V&quot;,\012 reinterpret_cast&lt;void*&gt;(&amp;Java_MyClassNatives_foo_enter_no_exit));\012  ASSERT_NE(jobj_, nullptr);\012\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  env_-&gt;CallNonvirtualVoidMethod(jobj_, jklass_, jmethod_);\012  check_jni_abort_catcher.Check(&quot;Still holding a locked object on JNI end&quot;);\012})<SUB>2378</SUB>> ]
+"17580" [label = <(UNKNOWN,TEST_F(JniInternalTest, DetachThreadUnlockJNIMonitors) {\012 // We need to lock an object, detach, reattach, and check the locks.\012 //\012 // As re-attaching will create a different thread, we need to use a global\012 // ref to keep the object around.\012\012 // Create an object to torture.\012  jobject global_ref;\012 {\012    jclass object_class = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012    ASSERT_NE(object_class, nullptr);\012    jobject object = env_-&gt;AllocObject(object_class);\012    ASSERT_NE(object, nullptr);\012    global_ref = env_-&gt;NewGlobalRef(object);\012 }\012\012 // Lock it.\012  env_-&gt;MonitorEnter(global_ref);\012  ASSERT_TRUE(IsLocked(env_, global_ref));\012\012 // Detach and re-attach.\012  jint detach_result = vm_-&gt;DetachCurrentThread();\012  ASSERT_EQ(detach_result, JNI_OK);\012  jint attach_result = vm_-&gt;AttachCurrentThread(&amp;env_, nullptr);\012  ASSERT_EQ(attach_result, JNI_OK);\012\012 // Look at the global ref, check whether it's still locked.\012  ASSERT_FALSE(IsLocked(env_, global_ref));\012\012 // Delete the global ref.\012  env_-&gt;DeleteGlobalRef(global_ref);\012},TEST_F(JniInternalTest, DetachThreadUnlockJNIMonitors) {\012 // We need to lock an object, detach, reattach, and check the locks.\012 //\012 // As re-attaching will create a different thread, we need to use a global\012 // ref to keep the object around.\012\012 // Create an object to torture.\012  jobject global_ref;\012 {\012    jclass object_class = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012    ASSERT_NE(object_class, nullptr);\012    jobject object = env_-&gt;AllocObject(object_class);\012    ASSERT_NE(object, nullptr);\012    global_ref = env_-&gt;NewGlobalRef(object);\012 }\012\012 // Lock it.\012  env_-&gt;MonitorEnter(global_ref);\012  ASSERT_TRUE(IsLocked(env_, global_ref));\012\012 // Detach and re-attach.\012  jint detach_result = vm_-&gt;DetachCurrentThread();\012  ASSERT_EQ(detach_result, JNI_OK);\012  jint attach_result = vm_-&gt;AttachCurrentThread(&amp;env_, nullptr);\012  ASSERT_EQ(attach_result, JNI_OK);\012\012 // Look at the global ref, check whether it's still locked.\012  ASSERT_FALSE(IsLocked(env_, global_ref));\012\012 // Delete the global ref.\012  env_-&gt;DeleteGlobalRef(global_ref);\012})<SUB>2408</SUB>> ]
+"17581" [label = <(UNKNOWN,TEST_F(JniInternalTest, IndirectReferenceTableOffsets) {\012 // The segment_state_ field is private, and we want to avoid friend declaration. So we'll check\012 // by modifying memory.\012 // The parameters don't really matter here.\012  std::string error_msg;\012 IndirectReferenceTable irt(5,\012 IndirectRefKind::kGlobal,\012 IndirectReferenceTable::ResizableCapacity::kNo,\012 &amp;error_msg);\012  ASSERT_TRUE(irt.IsValid()) &lt;&lt; error_msg;\012 IRTSegmentState old_state = irt.GetSegmentState();\012\012 // Write some new state directly. We invert parts of old_state to ensure a new value.\012 IRTSegmentState new_state;\012  new_state.top_index = old_state.top_index ^ 0x07705005;\012  ASSERT_NE(old_state.top_index, new_state.top_index);\012\012 uint8_t* base = reinterpret_cast&lt;uint8_t*&gt;(&amp;irt);\012 int32_t segment_state_offset =\012 IndirectReferenceTable::SegmentStateOffset(sizeof(void*)).Int32Value();\012 *reinterpret_cast&lt;IRTSegmentState*&gt;(base + segment_state_offset) = new_state;\012\012 // Read and compare.\012  EXPECT_EQ(new_state.top_index, irt.GetSegmentState().top_index);\012},TEST_F(JniInternalTest, IndirectReferenceTableOffsets) {\012 // The segment_state_ field is private, and we want to avoid friend declaration. So we'll check\012 // by modifying memory.\012 // The parameters don't really matter here.\012  std::string error_msg;\012 IndirectReferenceTable irt(5,\012 IndirectRefKind::kGlobal,\012 IndirectReferenceTable::ResizableCapacity::kNo,\012 &amp;error_msg);\012  ASSERT_TRUE(irt.IsValid()) &lt;&lt; error_msg;\012 IRTSegmentState old_state = irt.GetSegmentState();\012\012 // Write some new state directly. We invert parts of old_state to ensure a new value.\012 IRTSegmentState new_state;\012  new_state.top_index = old_state.top_index ^ 0x07705005;\012  ASSERT_NE(old_state.top_index, new_state.top_index);\012\012 uint8_t* base = reinterpret_cast&lt;uint8_t*&gt;(&amp;irt);\012 int32_t segment_state_offset =\012 IndirectReferenceTable::SegmentStateOffset(sizeof(void*)).Int32Value();\012 *reinterpret_cast&lt;IRTSegmentState*&gt;(base + segment_state_offset) = new_state;\012\012 // Read and compare.\012  EXPECT_EQ(new_state.top_index, irt.GetSegmentState().top_index);\012})<SUB>2442</SUB>> ]
+"17582" [label = <(UNKNOWN,TEST_F(JniInternalTest, JNIEnvExtOffsets) {\012  EXPECT_EQ(OFFSETOF_MEMBER(JNIEnvExt, local_ref_cookie_),\012 JNIEnvExt::LocalRefCookieOffset(sizeof(void*)).Uint32Value());\012\012  EXPECT_EQ(OFFSETOF_MEMBER(JNIEnvExt, self_), JNIEnvExt::SelfOffset(sizeof(void*)).Uint32Value());\012\012 // segment_state_ is private in the IndirectReferenceTable. So this test isn't as good as we'd\012 // hope it to be.\012 uint32_t segment_state_now =\012      OFFSETOF_MEMBER(JNIEnvExt, locals_) +\012 IndirectReferenceTable::SegmentStateOffset(sizeof(void*)).Uint32Value();\012 uint32_t segment_state_computed = JNIEnvExt::SegmentStateOffset(sizeof(void*)).Uint32Value();\012  EXPECT_EQ(segment_state_now, segment_state_computed);\012},TEST_F(JniInternalTest, JNIEnvExtOffsets) {\012  EXPECT_EQ(OFFSETOF_MEMBER(JNIEnvExt, local_ref_cookie_),\012 JNIEnvExt::LocalRefCookieOffset(sizeof(void*)).Uint32Value());\012\012  EXPECT_EQ(OFFSETOF_MEMBER(JNIEnvExt, self_), JNIEnvExt::SelfOffset(sizeof(void*)).Uint32Value());\012\012 // segment_state_ is private in the IndirectReferenceTable. So this test isn't as good as we'd\012 // hope it to be.\012 uint32_t segment_state_now =\012      OFFSETOF_MEMBER(JNIEnvExt, locals_) +\012 IndirectReferenceTable::SegmentStateOffset(sizeof(void*)).Uint32Value();\012 uint32_t segment_state_computed = JNIEnvExt::SegmentStateOffset(sizeof(void*)).Uint32Value();\012  EXPECT_EQ(segment_state_now, segment_state_computed);\012})<SUB>2469</SUB>> ]
+"17584" [label = <(&lt;operator&gt;.assignment,gGlobalRefCount = 0)<SUB>2484</SUB>> ]
+"17588" [label = <(&lt;operator&gt;.assignment,* gOriginalEnv = nullptr)<SUB>2485</SUB>> ]
+"17606" [label = <(UNKNOWN,TEST_F(JniInternalTest, JNIEnvExtTableOverride) {\012 JNINativeInterface env_override;\012  memcpy(&amp;env_override, env_-&gt;functions, sizeof(JNINativeInterface));\012\012  gOriginalEnv = env_-&gt;functions;\012  env_override.NewGlobalRef = CountNewGlobalRef;\012  gGlobalRefCount = 0;\012\012  jclass local = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_TRUE(local != nullptr);\012\012 // Set the table, add a global ref, see whether the counter increases.\012 JNIEnvExt::SetTableOverride(&amp;env_override);\012\012  jobject global = env_-&gt;NewGlobalRef(local);\012  EXPECT_EQ(1u, gGlobalRefCount);\012  env_-&gt;DeleteGlobalRef(global);\012\012 // Reset\012 JNIEnvExt::SetTableOverride(nullptr);\012\012  jobject global2 = env_-&gt;NewGlobalRef(local);\012  EXPECT_EQ(1u, gGlobalRefCount);\012  env_-&gt;DeleteGlobalRef(global2);\012},TEST_F(JniInternalTest, JNIEnvExtTableOverride) {\012 JNINativeInterface env_override;\012  memcpy(&amp;env_override, env_-&gt;functions, sizeof(JNINativeInterface));\012\012  gOriginalEnv = env_-&gt;functions;\012  env_override.NewGlobalRef = CountNewGlobalRef;\012  gGlobalRefCount = 0;\012\012  jclass local = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_TRUE(local != nullptr);\012\012 // Set the table, add a global ref, see whether the counter increases.\012 JNIEnvExt::SetTableOverride(&amp;env_override);\012\012  jobject global = env_-&gt;NewGlobalRef(local);\012  EXPECT_EQ(1u, gGlobalRefCount);\012  env_-&gt;DeleteGlobalRef(global);\012\012 // Reset\012 JNIEnvExt::SetTableOverride(nullptr);\012\012  jobject global2 = env_-&gt;NewGlobalRef(local);\012  EXPECT_EQ(1u, gGlobalRefCount);\012  env_-&gt;DeleteGlobalRef(global2);\012})<SUB>2493</SUB>> ]
+"17607" [label = <(UNKNOWN,TEST_F(JniInternalTest, NonAttachedThread) {\012 // This tests leads to warnings and errors in the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012 CheckJniAbortCatcher check_jni_abort_catcher;\012\012 auto callee = [](void* env_ptr) -&gt; void* {\012 JNIEnv* env = reinterpret_cast&lt;JNIEnv*&gt;(env_ptr);\012    env-&gt;NewStringUTF(&quot;test&quot;);\012 return nullptr;\012 };\012\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  vm_-&gt;SetCheckJniEnabled(true);\012 {\012 pthread_t pthread;\012 int pthread_create_result = pthread_create(&amp;pthread,\012 /* pthread_attr */ nullptr,\012                                               callee,\012 reinterpret_cast&lt;void*&gt;(env_));\012    CHECK_EQ(pthread_create_result, 0);\012 int pthread_join_result = pthread_join(pthread, /* thread_return */ nullptr);\012    CHECK_EQ(pthread_join_result, 0);\012 }\012  vm_-&gt;SetCheckJniEnabled(old_check_jni);\012\012  check_jni_abort_catcher.Check(&quot;is making JNI calls without being attached&quot;);\012},TEST_F(JniInternalTest, NonAttachedThread) {\012 // This tests leads to warnings and errors in the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012 CheckJniAbortCatcher check_jni_abort_catcher;\012\012 auto callee = [](void* env_ptr) -&gt; void* {\012 JNIEnv* env = reinterpret_cast&lt;JNIEnv*&gt;(env_ptr);\012    env-&gt;NewStringUTF(&quot;test&quot;);\012 return nullptr;\012 };\012\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  vm_-&gt;SetCheckJniEnabled(true);\012 {\012 pthread_t pthread;\012 int pthread_create_result = pthread_create(&amp;pthread,\012 /* pthread_attr */ nullptr,\012                                               callee,\012 reinterpret_cast&lt;void*&gt;(env_));\012    CHECK_EQ(pthread_create_result, 0);\012 int pthread_join_result = pthread_join(pthread, /* thread_return */ nullptr);\012    CHECK_EQ(pthread_join_result, 0);\012 }\012  vm_-&gt;SetCheckJniEnabled(old_check_jni);\012\012  check_jni_abort_catcher.Check(&quot;is making JNI calls without being attached&quot;);\012})<SUB>2519</SUB>> ]
+"14922" [label = <(METHOD,&lt;global&gt;)<SUB>1</SUB>> ]
+"17608" [label = <(METHOD_RETURN,ANY)<SUB>1</SUB>> ]
+  "17391" -> "17392" 
+  "17392" -> "17393" 
+  "17393" -> "17394" 
+  "17394" -> "17395" 
+  "17395" -> "17396" 
+  "17396" -> "17397" 
+  "17397" -> "17398" 
+  "17398" -> "17399" 
+  "17399" -> "17400" 
+  "17400" -> "17419" 
+  "17419" -> "17420" 
+  "17420" -> "17425" 
+  "17425" -> "17426" 
+  "17426" -> "17427" 
+  "17427" -> "17428" 
+  "17428" -> "17429" 
+  "17429" -> "17430" 
+  "17430" -> "17431" 
+  "17431" -> "17432" 
+  "17432" -> "17433" 
+  "17433" -> "17434" 
+  "17434" -> "17435" 
+  "17435" -> "17436" 
+  "17436" -> "17437" 
+  "17437" -> "17438" 
+  "17438" -> "17439" 
+  "17439" -> "17440" 
+  "17440" -> "17441" 
+  "17441" -> "17442" 
+  "17442" -> "17443" 
+  "17443" -> "17444" 
+  "17444" -> "17445" 
+  "17445" -> "17446" 
+  "17446" -> "17447" 
+  "17447" -> "17448" 
+  "17448" -> "17449" 
+  "17449" -> "17450" 
+  "17450" -> "17451" 
+  "17451" -> "17452" 
+  "17452" -> "17453" 
+  "17453" -> "17454" 
+  "17454" -> "17455" 
+  "17455" -> "17456" 
+  "17456" -> "17457" 
+  "17457" -> "17458" 
+  "17458" -> "17459" 
+  "17459" -> "17460" 
+  "17460" -> "17461" 
+  "17461" -> "17462" 
+  "17462" -> "17463" 
+  "17463" -> "17464" 
+  "17464" -> "17465" 
+  "17465" -> "17466" 
+  "17466" -> "17467" 
+  "17467" -> "17468" 
+  "17468" -> "17469" 
+  "17469" -> "17470" 
+  "17470" -> "17471" 
+  "17471" -> "17472" 
+  "17472" -> "17473" 
+  "17473" -> "17474" 
+  "17474" -> "17475" 
+  "17475" -> "17476" 
+  "17476" -> "17477" 
+  "17477" -> "17478" 
+  "17478" -> "17479" 
+  "17479" -> "17480" 
+  "17480" -> "17481" 
+  "17481" -> "17482" 
+  "17482" -> "17483" 
+  "17483" -> "17484" 
+  "17484" -> "17496" 
+  "17496" -> "17508" 
+  "17508" -> "17580" 
+  "17580" -> "17581" 
+  "17581" -> "17582" 
+  "17582" -> "17584" 
+  "17584" -> "17588" 
+  "17588" -> "17606" 
+  "17606" -> "17607" 
+  "17607" -> "17608" 
+  "14922" -> "17391" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/265-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/265-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/265-cfg.dot	2023-06-07 19:35:01.617387150 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/265-cfg.dot	2023-06-07 19:35:08.147386503 +0330
@@ -1,5 +1,153 @@
-digraph "gJniSleepForeverStub" {  
-"14981" [label = <(METHOD,gJniSleepForeverStub)<SUB>3102</SUB>> ]
-"14983" [label = <(METHOD_RETURN,void)<SUB>3102</SUB>> ]
-  "14981" -> "14983" 
+digraph "SetUp" {  
+"14928" [label = <(CommonRuntimeTest::SetUp,CommonRuntimeTest::SetUp())<SUB>37</SUB>> ]
+"14932" [label = <(&lt;operator&gt;.assignment,vm_ = Runtime::Current()-&gt;GetJavaVM())<SUB>39</SUB>> ]
+"14941" [label = <(AttachCurrentThread,vm_-&gt;AttachCurrentThread(&amp;env_, nullptr))<SUB>44</SUB>> ]
+"14948" [label = <(&lt;operator&gt;.greaterThan,ScopedLocalRef&lt;jclass&gt; aioobe(env_,\012                                  env_-&gt;FindClass(&quot;java/lang/ArrayIndexOutOfBoundsException&quot;)))<SUB>46</SUB>> ]
+"14959" [label = <(CHECK,CHECK(aioobe.get() != nullptr))<SUB>48</SUB>> ]
+"14966" [label = <(&lt;operator&gt;.assignment,aioobe_ = reinterpret_cast&lt;jclass&gt;(env_-&gt;NewGlobalRef(aioobe.get())))<SUB>49</SUB>> ]
+"14978" [label = <(&lt;operator&gt;.greaterThan,ScopedLocalRef&lt;jclass&gt; ase(env_, env_-&gt;FindClass(&quot;java/lang/ArrayStoreException&quot;)))<SUB>51</SUB>> ]
+"14989" [label = <(CHECK,CHECK(ase.get() != nullptr))<SUB>52</SUB>> ]
+"14996" [label = <(&lt;operator&gt;.assignment,ase_ = reinterpret_cast&lt;jclass&gt;(env_-&gt;NewGlobalRef(ase.get())))<SUB>53</SUB>> ]
+"15008" [label = <(&lt;operator&gt;.greaterThan,ScopedLocalRef&lt;jclass&gt; sioobe(env_,\012                                  env_-&gt;FindClass(&quot;java/lang/StringIndexOutOfBoundsException&quot;)))<SUB>55</SUB>> ]
+"15019" [label = <(CHECK,CHECK(sioobe.get() != nullptr))<SUB>57</SUB>> ]
+"15026" [label = <(&lt;operator&gt;.assignment,sioobe_ = reinterpret_cast&lt;jclass&gt;(env_-&gt;NewGlobalRef(sioobe.get())))<SUB>58</SUB>> ]
+"14929" [label = <(&lt;operator&gt;.fieldAccess,CommonRuntimeTest::SetUp)<SUB>37</SUB>> ]
+"14934" [label = <(GetJavaVM,Runtime::Current()-&gt;GetJavaVM())<SUB>39</SUB>> ]
+"14942" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;AttachCurrentThread)<SUB>44</SUB>> ]
+"14945" [label = <(&lt;operator&gt;.addressOf,&amp;env_)<SUB>44</SUB>> ]
+"14949" [label = <(&lt;operator&gt;.lessThan,ScopedLocalRef&lt;jclass)<SUB>46</SUB>> ]
+"14952" [label = <(aioobe,aioobe(env_,\012                                  env_-&gt;FindClass(&quot;java/lang/ArrayIndexOutOfBoundsException&quot;)))<SUB>46</SUB>> ]
+"14960" [label = <(&lt;operator&gt;.notEquals,aioobe.get() != nullptr)<SUB>48</SUB>> ]
+"14968" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jclass&gt;(env_-&gt;NewGlobalRef(aioobe.get())))<SUB>49</SUB>> ]
+"14979" [label = <(&lt;operator&gt;.lessThan,ScopedLocalRef&lt;jclass)<SUB>51</SUB>> ]
+"14982" [label = <(ase,ase(env_, env_-&gt;FindClass(&quot;java/lang/ArrayStoreException&quot;)))<SUB>51</SUB>> ]
+"14990" [label = <(&lt;operator&gt;.notEquals,ase.get() != nullptr)<SUB>52</SUB>> ]
+"14998" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jclass&gt;(env_-&gt;NewGlobalRef(ase.get())))<SUB>53</SUB>> ]
+"15009" [label = <(&lt;operator&gt;.lessThan,ScopedLocalRef&lt;jclass)<SUB>55</SUB>> ]
+"15012" [label = <(sioobe,sioobe(env_,\012                                  env_-&gt;FindClass(&quot;java/lang/StringIndexOutOfBoundsException&quot;)))<SUB>55</SUB>> ]
+"15020" [label = <(&lt;operator&gt;.notEquals,sioobe.get() != nullptr)<SUB>57</SUB>> ]
+"15028" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jclass&gt;(env_-&gt;NewGlobalRef(sioobe.get())))<SUB>58</SUB>> ]
+"14931" [label = <(FIELD_IDENTIFIER,SetUp,SetUp)<SUB>37</SUB>> ]
+"14935" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetJavaVM)<SUB>39</SUB>> ]
+"14944" [label = <(FIELD_IDENTIFIER,AttachCurrentThread,AttachCurrentThread)<SUB>44</SUB>> ]
+"14954" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/ArrayIndexOutOfBoundsException&quot;))<SUB>47</SUB>> ]
+"14961" [label = <(get,aioobe.get())<SUB>48</SUB>> ]
+"14969" [label = <(UNKNOWN,jclass,jclass)<SUB>49</SUB>> ]
+"14970" [label = <(NewGlobalRef,env_-&gt;NewGlobalRef(aioobe.get()))<SUB>49</SUB>> ]
+"14984" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/ArrayStoreException&quot;))<SUB>51</SUB>> ]
+"14991" [label = <(get,ase.get())<SUB>52</SUB>> ]
+"14999" [label = <(UNKNOWN,jclass,jclass)<SUB>53</SUB>> ]
+"15000" [label = <(NewGlobalRef,env_-&gt;NewGlobalRef(ase.get()))<SUB>53</SUB>> ]
+"15014" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/StringIndexOutOfBoundsException&quot;))<SUB>56</SUB>> ]
+"15021" [label = <(get,sioobe.get())<SUB>57</SUB>> ]
+"15029" [label = <(UNKNOWN,jclass,jclass)<SUB>58</SUB>> ]
+"15030" [label = <(NewGlobalRef,env_-&gt;NewGlobalRef(sioobe.get()))<SUB>58</SUB>> ]
+"14936" [label = <(Runtime::Current,Runtime::Current())<SUB>39</SUB>> ]
+"14940" [label = <(FIELD_IDENTIFIER,GetJavaVM,GetJavaVM)<SUB>39</SUB>> ]
+"14955" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>47</SUB>> ]
+"14962" [label = <(&lt;operator&gt;.fieldAccess,aioobe.get)<SUB>48</SUB>> ]
+"14971" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewGlobalRef)<SUB>49</SUB>> ]
+"14974" [label = <(get,aioobe.get())<SUB>49</SUB>> ]
+"14985" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>51</SUB>> ]
+"14992" [label = <(&lt;operator&gt;.fieldAccess,ase.get)<SUB>52</SUB>> ]
+"15001" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewGlobalRef)<SUB>53</SUB>> ]
+"15004" [label = <(get,ase.get())<SUB>53</SUB>> ]
+"15015" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>56</SUB>> ]
+"15022" [label = <(&lt;operator&gt;.fieldAccess,sioobe.get)<SUB>57</SUB>> ]
+"15031" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewGlobalRef)<SUB>58</SUB>> ]
+"15034" [label = <(get,sioobe.get())<SUB>58</SUB>> ]
+"14937" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>39</SUB>> ]
+"14957" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>47</SUB>> ]
+"14964" [label = <(FIELD_IDENTIFIER,get,get)<SUB>48</SUB>> ]
+"14973" [label = <(FIELD_IDENTIFIER,NewGlobalRef,NewGlobalRef)<SUB>49</SUB>> ]
+"14975" [label = <(&lt;operator&gt;.fieldAccess,aioobe.get)<SUB>49</SUB>> ]
+"14987" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>51</SUB>> ]
+"14994" [label = <(FIELD_IDENTIFIER,get,get)<SUB>52</SUB>> ]
+"15003" [label = <(FIELD_IDENTIFIER,NewGlobalRef,NewGlobalRef)<SUB>53</SUB>> ]
+"15005" [label = <(&lt;operator&gt;.fieldAccess,ase.get)<SUB>53</SUB>> ]
+"15017" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>56</SUB>> ]
+"15024" [label = <(FIELD_IDENTIFIER,get,get)<SUB>57</SUB>> ]
+"15033" [label = <(FIELD_IDENTIFIER,NewGlobalRef,NewGlobalRef)<SUB>58</SUB>> ]
+"15035" [label = <(&lt;operator&gt;.fieldAccess,sioobe.get)<SUB>58</SUB>> ]
+"14939" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>39</SUB>> ]
+"14977" [label = <(FIELD_IDENTIFIER,get,get)<SUB>49</SUB>> ]
+"15007" [label = <(FIELD_IDENTIFIER,get,get)<SUB>53</SUB>> ]
+"15037" [label = <(FIELD_IDENTIFIER,get,get)<SUB>58</SUB>> ]
+"14926" [label = <(METHOD,SetUp)<SUB>36</SUB>> ]
+"15038" [label = <(METHOD_RETURN,void)<SUB>36</SUB>> ]
+  "14928" -> "14939" 
+  "14932" -> "14944" 
+  "14941" -> "14949" 
+  "14948" -> "14964" 
+  "14959" -> "14969" 
+  "14966" -> "14979" 
+  "14978" -> "14994" 
+  "14989" -> "14999" 
+  "14996" -> "15009" 
+  "15008" -> "15024" 
+  "15019" -> "15029" 
+  "15026" -> "15038" 
+  "14929" -> "14928" 
+  "14934" -> "14932" 
+  "14942" -> "14945" 
+  "14945" -> "14941" 
+  "14949" -> "14957" 
+  "14952" -> "14948" 
+  "14960" -> "14959" 
+  "14968" -> "14966" 
+  "14979" -> "14987" 
+  "14982" -> "14978" 
+  "14990" -> "14989" 
+  "14998" -> "14996" 
+  "15009" -> "15017" 
+  "15012" -> "15008" 
+  "15020" -> "15019" 
+  "15028" -> "15026" 
+  "14931" -> "14929" 
+  "14935" -> "14934" 
+  "14944" -> "14942" 
+  "14954" -> "14952" 
+  "14961" -> "14960" 
+  "14969" -> "14973" 
+  "14970" -> "14968" 
+  "14984" -> "14982" 
+  "14991" -> "14990" 
+  "14999" -> "15003" 
+  "15000" -> "14998" 
+  "15014" -> "15012" 
+  "15021" -> "15020" 
+  "15029" -> "15033" 
+  "15030" -> "15028" 
+  "14936" -> "14940" 
+  "14940" -> "14935" 
+  "14955" -> "14954" 
+  "14962" -> "14961" 
+  "14971" -> "14977" 
+  "14974" -> "14970" 
+  "14985" -> "14984" 
+  "14992" -> "14991" 
+  "15001" -> "15007" 
+  "15004" -> "15000" 
+  "15015" -> "15014" 
+  "15022" -> "15021" 
+  "15031" -> "15037" 
+  "15034" -> "15030" 
+  "14937" -> "14936" 
+  "14957" -> "14955" 
+  "14964" -> "14962" 
+  "14973" -> "14971" 
+  "14975" -> "14974" 
+  "14987" -> "14985" 
+  "14994" -> "14992" 
+  "15003" -> "15001" 
+  "15005" -> "15004" 
+  "15017" -> "15015" 
+  "15024" -> "15022" 
+  "15033" -> "15031" 
+  "15035" -> "15034" 
+  "14939" -> "14937" 
+  "14977" -> "14975" 
+  "15007" -> "15005" 
+  "15037" -> "15035" 
+  "14926" -> "14931" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/266-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/266-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/266-cfg.dot	2023-06-07 19:35:01.617387150 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/266-cfg.dot	2023-06-07 19:35:08.147386503 +0330
@@ -1,13 +1,61 @@
-digraph "GetRuntimeShutdownNativeInterface" {  
-"15223" [label = <(RETURN,return reinterpret_cast&lt;JNINativeInterface*&gt;(&amp;gJniSleepForeverStub);,return reinterpret_cast&lt;JNINativeInterface*&gt;(&amp;gJniSleepForeverStub);)<SUB>3339</SUB>> ]
-"15224" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;JNINativeInterface*&gt;(&amp;gJniSleepForeverStub))<SUB>3339</SUB>> ]
-"15225" [label = <(UNKNOWN,JNINativeInterface*,JNINativeInterface*)<SUB>3339</SUB>> ]
-"15226" [label = <(&lt;operator&gt;.addressOf,&amp;gJniSleepForeverStub)<SUB>3339</SUB>> ]
-"15221" [label = <(METHOD,GetRuntimeShutdownNativeInterface)<SUB>3338</SUB>> ]
-"15228" [label = <(METHOD_RETURN,JNINativeInterface)<SUB>3338</SUB>> ]
-  "15223" -> "15228" 
-  "15224" -> "15223" 
-  "15225" -> "15226" 
-  "15226" -> "15224" 
-  "15221" -> "15225" 
+digraph "ExpectException" {  
+"15044" [label = <(soa,soa(env_))<SUB>62</SUB>> ]
+"15046" [label = <(&lt;operator&gt;.shiftLeft,EXPECT_TRUE(env_-&gt;ExceptionCheck())\012 &lt;&lt; mirror::Class::PrettyDescriptor(soa.Decode&lt;mirror::Class&gt;(exception_class)))<SUB>63</SUB>> ]
+"15068" [label = <(&lt;operator&gt;.assignment,exception = env_-&gt;ExceptionOccurred())<SUB>65</SUB>> ]
+"15074" [label = <(EXPECT_NE,EXPECT_NE(nullptr, exception))<SUB>66</SUB>> ]
+"15077" [label = <(ExceptionClear,env_-&gt;ExceptionClear())<SUB>67</SUB>> ]
+"15081" [label = <(EXPECT_TRUE,EXPECT_TRUE(env_-&gt;IsInstanceOf(exception, exception_class)))<SUB>68</SUB>> ]
+"15047" [label = <(EXPECT_TRUE,EXPECT_TRUE(env_-&gt;ExceptionCheck()))<SUB>63</SUB>> ]
+"15052" [label = <(mirror::Class::PrettyDescriptor,mirror::Class::PrettyDescriptor(soa.Decode&lt;mirror::Class&gt;(exception_class)))<SUB>64</SUB>> ]
+"15070" [label = <(ExceptionOccurred,env_-&gt;ExceptionOccurred())<SUB>65</SUB>> ]
+"15078" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ExceptionClear)<SUB>67</SUB>> ]
+"15082" [label = <(IsInstanceOf,env_-&gt;IsInstanceOf(exception, exception_class))<SUB>68</SUB>> ]
+"15048" [label = <(ExceptionCheck,env_-&gt;ExceptionCheck())<SUB>63</SUB>> ]
+"15053" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class::PrettyDescriptor)<SUB>64</SUB>> ]
+"15058" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(exception_class))<SUB>64</SUB>> ]
+"15071" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ExceptionOccurred)<SUB>65</SUB>> ]
+"15080" [label = <(FIELD_IDENTIFIER,ExceptionClear,ExceptionClear)<SUB>67</SUB>> ]
+"15083" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;IsInstanceOf)<SUB>68</SUB>> ]
+"15049" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ExceptionCheck)<SUB>63</SUB>> ]
+"15054" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>64</SUB>> ]
+"15057" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>64</SUB>> ]
+"15059" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>64</SUB>> ]
+"15073" [label = <(FIELD_IDENTIFIER,ExceptionOccurred,ExceptionOccurred)<SUB>65</SUB>> ]
+"15085" [label = <(FIELD_IDENTIFIER,IsInstanceOf,IsInstanceOf)<SUB>68</SUB>> ]
+"15051" [label = <(FIELD_IDENTIFIER,ExceptionCheck,ExceptionCheck)<SUB>63</SUB>> ]
+"15060" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>64</SUB>> ]
+"15063" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>64</SUB>> ]
+"15062" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>64</SUB>> ]
+"15065" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>64</SUB>> ]
+"15040" [label = <(METHOD,ExpectException)<SUB>61</SUB>> ]
+"15088" [label = <(METHOD_RETURN,void)<SUB>61</SUB>> ]
+  "15044" -> "15051" 
+  "15046" -> "15073" 
+  "15068" -> "15074" 
+  "15074" -> "15080" 
+  "15077" -> "15085" 
+  "15081" -> "15088" 
+  "15047" -> "15054" 
+  "15052" -> "15046" 
+  "15070" -> "15068" 
+  "15078" -> "15077" 
+  "15082" -> "15081" 
+  "15048" -> "15047" 
+  "15053" -> "15062" 
+  "15058" -> "15052" 
+  "15071" -> "15070" 
+  "15080" -> "15078" 
+  "15083" -> "15082" 
+  "15049" -> "15048" 
+  "15054" -> "15057" 
+  "15057" -> "15053" 
+  "15059" -> "15058" 
+  "15073" -> "15071" 
+  "15085" -> "15083" 
+  "15051" -> "15049" 
+  "15060" -> "15065" 
+  "15063" -> "15059" 
+  "15062" -> "15060" 
+  "15065" -> "15063" 
+  "15040" -> "15044" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/267-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/267-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/267-cfg.dot	2023-06-07 19:35:01.617387150 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/267-cfg.dot	2023-06-07 19:35:08.147386503 +0330
@@ -1,39 +1,38 @@
-digraph "operator &lt;&lt;" {  
-"15240" [label = <(&lt;operator&gt;.shiftLeft,os &lt;&lt; &quot;JNIInvalidRefType&quot;)<SUB>3347</SUB>> ]
-"15243" [label = <(RETURN,return os;,return os;)<SUB>3348</SUB>> ]
-"15247" [label = <(&lt;operator&gt;.shiftLeft,os &lt;&lt; &quot;JNILocalRefType&quot;)<SUB>3350</SUB>> ]
-"15250" [label = <(RETURN,return os;,return os;)<SUB>3351</SUB>> ]
-"15254" [label = <(&lt;operator&gt;.shiftLeft,os &lt;&lt; &quot;JNIGlobalRefType&quot;)<SUB>3353</SUB>> ]
-"15257" [label = <(RETURN,return os;,return os;)<SUB>3354</SUB>> ]
-"15261" [label = <(&lt;operator&gt;.shiftLeft,os &lt;&lt; &quot;JNIWeakGlobalRefType&quot;)<SUB>3356</SUB>> ]
-"15264" [label = <(RETURN,return os;,return os;)<SUB>3357</SUB>> ]
-"15267" [label = <(&lt;operator&gt;.shiftLeft,LOG(FATAL) &lt;&lt; &quot;jobjectRefType[&quot; &lt;&lt; static_cast&lt;int&gt;(rhs) &lt;&lt; &quot;]&quot;)<SUB>3359</SUB>> ]
-"15277" [label = <(UNREACHABLE,UNREACHABLE())<SUB>3360</SUB>> ]
-"15268" [label = <(&lt;operator&gt;.shiftLeft,LOG(FATAL) &lt;&lt; &quot;jobjectRefType[&quot; &lt;&lt; static_cast&lt;int&gt;(rhs))<SUB>3359</SUB>> ]
-"15269" [label = <(&lt;operator&gt;.shiftLeft,LOG(FATAL) &lt;&lt; &quot;jobjectRefType[&quot;)<SUB>3359</SUB>> ]
-"15273" [label = <(&lt;operator&gt;.cast,static_cast&lt;int&gt;(rhs))<SUB>3359</SUB>> ]
-"15270" [label = <(LOG,LOG(FATAL))<SUB>3359</SUB>> ]
-"15274" [label = <(UNKNOWN,int,int)<SUB>3359</SUB>> ]
-"15231" [label = <(METHOD,operator &lt;&lt;)<SUB>3344</SUB>> ]
-"15278" [label = <(METHOD_RETURN,ostream)<SUB>3344</SUB>> ]
-  "15240" -> "15243" 
-  "15243" -> "15278" 
-  "15247" -> "15250" 
-  "15250" -> "15278" 
-  "15254" -> "15257" 
-  "15257" -> "15278" 
-  "15261" -> "15264" 
-  "15264" -> "15278" 
-  "15267" -> "15277" 
-  "15277" -> "15278" 
-  "15268" -> "15267" 
-  "15269" -> "15274" 
-  "15273" -> "15268" 
-  "15270" -> "15269" 
-  "15274" -> "15273" 
-  "15231" -> "15240" 
-  "15231" -> "15247" 
-  "15231" -> "15254" 
-  "15231" -> "15261" 
-  "15231" -> "15270" 
+digraph "CleanUpJniEnv" {  
+"15093" [label = <(&lt;operator&gt;.notEquals,aioobe_ != nullptr)<SUB>72</SUB>> ]
+"15106" [label = <(&lt;operator&gt;.notEquals,ase_ != nullptr)<SUB>76</SUB>> ]
+"15119" [label = <(&lt;operator&gt;.notEquals,sioobe_ != nullptr)<SUB>80</SUB>> ]
+"15097" [label = <(DeleteGlobalRef,env_-&gt;DeleteGlobalRef(aioobe_))<SUB>73</SUB>> ]
+"15102" [label = <(&lt;operator&gt;.assignment,aioobe_ = nullptr)<SUB>74</SUB>> ]
+"15110" [label = <(DeleteGlobalRef,env_-&gt;DeleteGlobalRef(ase_))<SUB>77</SUB>> ]
+"15115" [label = <(&lt;operator&gt;.assignment,ase_ = nullptr)<SUB>78</SUB>> ]
+"15123" [label = <(DeleteGlobalRef,env_-&gt;DeleteGlobalRef(sioobe_))<SUB>81</SUB>> ]
+"15128" [label = <(&lt;operator&gt;.assignment,sioobe_ = nullptr)<SUB>82</SUB>> ]
+"15098" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;DeleteGlobalRef)<SUB>73</SUB>> ]
+"15111" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;DeleteGlobalRef)<SUB>77</SUB>> ]
+"15124" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;DeleteGlobalRef)<SUB>81</SUB>> ]
+"15100" [label = <(FIELD_IDENTIFIER,DeleteGlobalRef,DeleteGlobalRef)<SUB>73</SUB>> ]
+"15113" [label = <(FIELD_IDENTIFIER,DeleteGlobalRef,DeleteGlobalRef)<SUB>77</SUB>> ]
+"15126" [label = <(FIELD_IDENTIFIER,DeleteGlobalRef,DeleteGlobalRef)<SUB>81</SUB>> ]
+"15090" [label = <(METHOD,CleanUpJniEnv)<SUB>71</SUB>> ]
+"15131" [label = <(METHOD_RETURN,void)<SUB>71</SUB>> ]
+  "15093" -> "15100" 
+  "15093" -> "15106" 
+  "15106" -> "15113" 
+  "15106" -> "15119" 
+  "15119" -> "15131" 
+  "15119" -> "15126" 
+  "15097" -> "15102" 
+  "15102" -> "15106" 
+  "15110" -> "15115" 
+  "15115" -> "15119" 
+  "15123" -> "15128" 
+  "15128" -> "15131" 
+  "15098" -> "15097" 
+  "15111" -> "15110" 
+  "15124" -> "15123" 
+  "15100" -> "15098" 
+  "15113" -> "15111" 
+  "15126" -> "15124" 
+  "15090" -> "15093" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/268-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/268-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/268-cfg.dot	2023-06-07 19:35:01.617387150 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/268-cfg.dot	2023-06-07 19:35:08.147386503 +0330
@@ -1,169 +1,13 @@
-digraph "&lt;global&gt;" {  
-"17752" [label = <(UNKNOWN,TEST_F(JniInternalTest, AllocObject) {\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012  jobject o = env_-&gt;AllocObject(c);\012  ASSERT_NE(o, nullptr);\012\012 // We have an instance of the class we asked for...\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(o, c));\012 // ...whose fields haven't been initialized because\012 // we didn't call a constructor.\012 // Even with string compression empty string has `count == 0`.\012  ASSERT_EQ(0, env_-&gt;GetIntField(o, env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;)));\012},TEST_F(JniInternalTest, AllocObject) {\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012  jobject o = env_-&gt;AllocObject(c);\012  ASSERT_NE(o, nullptr);\012\012 // We have an instance of the class we asked for...\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(o, c));\012 // ...whose fields haven't been initialized because\012 // we didn't call a constructor.\012 // Even with string compression empty string has `count == 0`.\012  ASSERT_EQ(0, env_-&gt;GetIntField(o, env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;)));\012})<SUB>676</SUB>> ]
-"17753" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetVersion) {\012  ASSERT_EQ(JNI_VERSION_1_6, env_-&gt;GetVersion());\012},TEST_F(JniInternalTest, GetVersion) {\012  ASSERT_EQ(JNI_VERSION_1_6, env_-&gt;GetVersion());\012})<SUB>690</SUB>> ]
-"17754" [label = <(UNKNOWN,TEST_F(JniInternalTest, FindClass) {\012 // This tests leads to warnings in the log.\012 ScopedLogSeverity sls(LogSeverity::ERROR);\012\012 FindClassTest(false);\012 FindClassTest(true);\012},TEST_F(JniInternalTest, FindClass) {\012 // This tests leads to warnings in the log.\012 ScopedLogSeverity sls(LogSeverity::ERROR);\012\012 FindClassTest(false);\012 FindClassTest(true);\012})<SUB>694</SUB>> ]
-"17755" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetFieldID) {\012  jclass jlnsfe = env_-&gt;FindClass(&quot;java/lang/NoSuchFieldError&quot;);\012  ASSERT_NE(jlnsfe, nullptr);\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012\012 // Wrong type.\012  jfieldID fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;J&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Wrong type where type doesn't exist.\012  fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;Lrod/jane/freddy;&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Wrong name.\012  fid = env_-&gt;GetFieldID(c, &quot;Count&quot;, &quot;I&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Good declared field lookup.\012  fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;);\012  EXPECT_NE(nullptr, fid);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Good superclass field lookup.\012  c = env_-&gt;FindClass(&quot;java/lang/StringBuilder&quot;);\012  fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;);\012  EXPECT_NE(nullptr, fid);\012  EXPECT_NE(fid, nullptr);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Not instance.\012  fid = env_-&gt;GetFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;Ljava/util/Comparator;&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Bad arguments.\012 GetFieldIdBadArgumentTest(false);\012 GetFieldIdBadArgumentTest(true);\012},TEST_F(JniInternalTest, GetFieldID) {\012  jclass jlnsfe = env_-&gt;FindClass(&quot;java/lang/NoSuchFieldError&quot;);\012  ASSERT_NE(jlnsfe, nullptr);\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012\012 // Wrong type.\012  jfieldID fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;J&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Wrong type where type doesn't exist.\012  fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;Lrod/jane/freddy;&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Wrong name.\012  fid = env_-&gt;GetFieldID(c, &quot;Count&quot;, &quot;I&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Good declared field lookup.\012  fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;);\012  EXPECT_NE(nullptr, fid);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Good superclass field lookup.\012  c = env_-&gt;FindClass(&quot;java/lang/StringBuilder&quot;);\012  fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;);\012  EXPECT_NE(nullptr, fid);\012  EXPECT_NE(fid, nullptr);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Not instance.\012  fid = env_-&gt;GetFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;Ljava/util/Comparator;&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Bad arguments.\012 GetFieldIdBadArgumentTest(false);\012 GetFieldIdBadArgumentTest(true);\012})<SUB>702</SUB>> ]
-"17756" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetStaticFieldID) {\012  jclass jlnsfe = env_-&gt;FindClass(&quot;java/lang/NoSuchFieldError&quot;);\012  ASSERT_NE(jlnsfe, nullptr);\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012\012 // Wrong type.\012  jfieldID fid = env_-&gt;GetStaticFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;J&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Wrong type where type doesn't exist.\012  fid = env_-&gt;GetStaticFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;Lrod/jane/freddy;&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Wrong name.\012  fid = env_-&gt;GetStaticFieldID(c, &quot;cASE_INSENSITIVE_ORDER&quot;, &quot;Ljava/util/Comparator;&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Good declared field lookup.\012  fid = env_-&gt;GetStaticFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;Ljava/util/Comparator;&quot;);\012  EXPECT_NE(nullptr, fid);\012  EXPECT_NE(fid, nullptr);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Not static.\012  fid = env_-&gt;GetStaticFieldID(c, &quot;count&quot;, &quot;I&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Bad arguments.\012 GetStaticFieldIdBadArgumentTest(false);\012 GetStaticFieldIdBadArgumentTest(true);\012},TEST_F(JniInternalTest, GetStaticFieldID) {\012  jclass jlnsfe = env_-&gt;FindClass(&quot;java/lang/NoSuchFieldError&quot;);\012  ASSERT_NE(jlnsfe, nullptr);\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012\012 // Wrong type.\012  jfieldID fid = env_-&gt;GetStaticFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;J&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Wrong type where type doesn't exist.\012  fid = env_-&gt;GetStaticFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;Lrod/jane/freddy;&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Wrong name.\012  fid = env_-&gt;GetStaticFieldID(c, &quot;cASE_INSENSITIVE_ORDER&quot;, &quot;Ljava/util/Comparator;&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Good declared field lookup.\012  fid = env_-&gt;GetStaticFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;Ljava/util/Comparator;&quot;);\012  EXPECT_NE(nullptr, fid);\012  EXPECT_NE(fid, nullptr);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Not static.\012  fid = env_-&gt;GetStaticFieldID(c, &quot;count&quot;, &quot;I&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Bad arguments.\012 GetStaticFieldIdBadArgumentTest(false);\012 GetStaticFieldIdBadArgumentTest(true);\012})<SUB>745</SUB>> ]
-"17757" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetMethodID) {\012  jclass jlobject = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  jclass jlstring = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  jclass jlnsme = env_-&gt;FindClass(&quot;java/lang/NoSuchMethodError&quot;);\012  jclass jncrbc = env_-&gt;FindClass(&quot;java/nio/channels/ReadableByteChannel&quot;);\012\012 // Sanity check that no exceptions are pending.\012  ASSERT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Check that java.lang.Object.foo() doesn't exist and NoSuchMethodError is\012 // a pending exception.\012  jmethodID method = env_-&gt;GetMethodID(jlobject, &quot;foo&quot;, &quot;()V&quot;);\012  EXPECT_EQ(nullptr, method);\012 ExpectException(jlnsme);\012\012 // Check that java.lang.Object.equals() does exist.\012  method = env_-&gt;GetMethodID(jlobject, &quot;equals&quot;, &quot;(Ljava/lang/Object;)Z&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Check that GetMethodID for java.lang.String.valueOf(int) fails as the\012 // method is static.\012  method = env_-&gt;GetMethodID(jlstring, &quot;valueOf&quot;, &quot;(I)Ljava/lang/String;&quot;);\012  EXPECT_EQ(nullptr, method);\012 ExpectException(jlnsme);\012\012 // Check that GetMethodID for java.lang.NoSuchMethodError.&lt;init&gt;(String) finds the constructor.\012  method = env_-&gt;GetMethodID(jlnsme, &quot;&lt;init&gt;&quot;, &quot;(Ljava/lang/String;)V&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Check that GetMethodID can find a interface method inherited from another interface.\012  method = env_-&gt;GetMethodID(jncrbc, &quot;close&quot;, &quot;()V&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Bad arguments.\012 GetMethodIdBadArgumentTest(false);\012 GetMethodIdBadArgumentTest(true);\012},TEST_F(JniInternalTest, GetMethodID) {\012  jclass jlobject = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  jclass jlstring = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  jclass jlnsme = env_-&gt;FindClass(&quot;java/lang/NoSuchMethodError&quot;);\012  jclass jncrbc = env_-&gt;FindClass(&quot;java/nio/channels/ReadableByteChannel&quot;);\012\012 // Sanity check that no exceptions are pending.\012  ASSERT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Check that java.lang.Object.foo() doesn't exist and NoSuchMethodError is\012 // a pending exception.\012  jmethodID method = env_-&gt;GetMethodID(jlobject, &quot;foo&quot;, &quot;()V&quot;);\012  EXPECT_EQ(nullptr, method);\012 ExpectException(jlnsme);\012\012 // Check that java.lang.Object.equals() does exist.\012  method = env_-&gt;GetMethodID(jlobject, &quot;equals&quot;, &quot;(Ljava/lang/Object;)Z&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Check that GetMethodID for java.lang.String.valueOf(int) fails as the\012 // method is static.\012  method = env_-&gt;GetMethodID(jlstring, &quot;valueOf&quot;, &quot;(I)Ljava/lang/String;&quot;);\012  EXPECT_EQ(nullptr, method);\012 ExpectException(jlnsme);\012\012 // Check that GetMethodID for java.lang.NoSuchMethodError.&lt;init&gt;(String) finds the constructor.\012  method = env_-&gt;GetMethodID(jlnsme, &quot;&lt;init&gt;&quot;, &quot;(Ljava/lang/String;)V&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Check that GetMethodID can find a interface method inherited from another interface.\012  method = env_-&gt;GetMethodID(jncrbc, &quot;close&quot;, &quot;()V&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Bad arguments.\012 GetMethodIdBadArgumentTest(false);\012 GetMethodIdBadArgumentTest(true);\012})<SUB>782</SUB>> ]
-"17758" [label = <(UNKNOWN,TEST_F(JniInternalTest, CallVoidMethodNullReceiver) {\012  jclass jlobject = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  jmethodID method;\012\012 // Check that GetMethodID for java.lang.NoSuchMethodError.&lt;init&gt;(String) finds the constructor.\012  method = env_-&gt;GetMethodID(jlobject, &quot;&lt;init&gt;&quot;, &quot;()V&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Null object to CallVoidMethod.\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  env_-&gt;CallVoidMethod(nullptr, method);\012  check_jni_abort_catcher.Check(&quot;null&quot;);\012},TEST_F(JniInternalTest, CallVoidMethodNullReceiver) {\012  jclass jlobject = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  jmethodID method;\012\012 // Check that GetMethodID for java.lang.NoSuchMethodError.&lt;init&gt;(String) finds the constructor.\012  method = env_-&gt;GetMethodID(jlobject, &quot;&lt;init&gt;&quot;, &quot;()V&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Null object to CallVoidMethod.\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  env_-&gt;CallVoidMethod(nullptr, method);\012  check_jni_abort_catcher.Check(&quot;null&quot;);\012})<SUB>823</SUB>> ]
-"17759" [label = <(UNKNOWN,TEST_F(JniInternalTest, CallVarArgMethodBadPrimitive) {\012 // Check that bad primitive values cause check JNI to abort when\012 // passed out-of-range primitive value var args. As var args can't\012 // differentiate type sizes less than an int, and this isn't\012 // corrected by JNI, this helps ensure JNI code is valid.\012#define DoCall(boxed_type, shorty, c_type, bad_value)                   \\012 {                                                                     \\012    jclass prim_class = env_-&gt;FindClass(&quot;java/lang/&quot; #boxed_type);      \\012    jmethodID method = env_-&gt;GetStaticMethodID(prim_class, &quot;valueOf&quot;,   \\012 &quot;(&quot; #shorty &quot;)Ljava/lang/&quot; #boxed_type &quot;;&quot;); \\012    EXPECT_NE(nullptr, method);                                         \\012    EXPECT_FALSE(env_-&gt;ExceptionCheck());                               \\012 CheckJniAbortCatcher check_jni_abort_catcher;                       \\012    env_-&gt;CallStaticObjectMethod(prim_class, method, bad_value);        \\012    check_jni_abort_catcher.Check(&quot;unexpected &quot; #c_type &quot; value: &quot; #bad_value); \\012 }\012\012 DoCall(Boolean, Z, jboolean, 2);\012 DoCall(Byte, B, jbyte, 128);\012 DoCall(Byte, B, jbyte, -129);\012 DoCall(Short, S, jshort, 32768);\012 DoCall(Short, S, jshort, -32769);\012 DoCall(Character, C, jchar, 65536);\012 DoCall(Character, C, jchar, -1);\012#undef DoCall\012},TEST_F(JniInternalTest, CallVarArgMethodBadPrimitive) {\012 // Check that bad primitive values cause check JNI to abort when\012 // passed out-of-range primitive value var args. As var args can't\012 // differentiate type sizes less than an int, and this isn't\012 // corrected by JNI, this helps ensure JNI code is valid.\012#define DoCall(boxed_type, shorty, c_type, bad_value)                   \\012 {                                                                     \\012    jclass prim_class = env_-&gt;FindClass(&quot;java/lang/&quot; #boxed_type);      \\012    jmethodID method = env_-&gt;GetStaticMethodID(prim_class, &quot;valueOf&quot;,   \\012 &quot;(&quot; #shorty &quot;)Ljava/lang/&quot; #boxed_type &quot;;&quot;); \\012    EXPECT_NE(nullptr, method);                                         \\012    EXPECT_FALSE(env_-&gt;ExceptionCheck());                               \\012 CheckJniAbortCatcher check_jni_abort_catcher;                       \\012    env_-&gt;CallStaticObjectMethod(prim_class, method, bad_value);        \\012    check_jni_abort_catcher.Check(&quot;unexpected &quot; #c_type &quot; value: &quot; #bad_value); \\012 }\012\012 DoCall(Boolean, Z, jboolean, 2);\012 DoCall(Byte, B, jbyte, 128);\012 DoCall(Byte, B, jbyte, -129);\012 DoCall(Short, S, jshort, 32768);\012 DoCall(Short, S, jshort, -32769);\012 DoCall(Character, C, jchar, 65536);\012 DoCall(Character, C, jchar, -1);\012#undef DoCall\012})<SUB>838</SUB>> ]
-"17760" [label = <(UNKNOWN,TEST_F(JniInternalTest, CallJValueMethodBadPrimitive) {\012 // Check that bad primitive values, passed as jvalues, cause check\012 // JNI to abort. Unlike with var args, sizes less than an int should\012 // be truncated or sign extended and not cause an abort except for\012 // jbooleans that are passed as bytes.\012#define DoFailCall(boxed_type, shorty, c_type, bad_value)               \\012 {                                                                     \\012    jclass prim_class = env_-&gt;FindClass(&quot;java/lang/&quot; #boxed_type);      \\012    jmethodID method = env_-&gt;GetStaticMethodID(prim_class, &quot;valueOf&quot;,   \\012 &quot;(&quot; #shorty &quot;)Ljava/lang/&quot; #boxed_type &quot;;&quot;); \\012    EXPECT_NE(nullptr, method);                                         \\012    EXPECT_FALSE(env_-&gt;ExceptionCheck());                               \\012 CheckJniAbortCatcher check_jni_abort_catcher;                       \\012    jvalue jval;                                                        \\012    jval.i = bad_value;                                                 \\012    env_-&gt;CallStaticObjectMethodA(prim_class, method, &amp;jval);           \\012    check_jni_abort_catcher.Check(&quot;unexpected &quot; #c_type &quot; value: &quot; #bad_value); \\012 }\012#define DoGoodCall(boxed_type, shorty, c_type, bad_value)               \\012 {                                                                     \\012    jclass prim_class = env_-&gt;FindClass(&quot;java/lang/&quot; #boxed_type);      \\012    jmethodID method = env_-&gt;GetStaticMethodID(prim_class, &quot;valueOf&quot;,   \\012 &quot;(&quot; #shorty &quot;)Ljava/lang/&quot; #boxed_type &quot;;&quot;); \\012    EXPECT_NE(nullptr, method);                                         \\012    EXPECT_FALSE(env_-&gt;ExceptionCheck());                               \\012    jvalue jval;                                                        \\012    jval.i = bad_value;                                                 \\012    env_-&gt;CallStaticObjectMethodA(prim_class, method, &amp;jval);           \\012 }\012\012 DoFailCall(Boolean, Z, jboolean, 2);\012 DoGoodCall(Byte, B, jbyte, 128);\012 DoGoodCall(Byte, B, jbyte, -129);\012 DoGoodCall(Short, S, jshort, 32768);\012 DoGoodCall(Short, S, jshort, -32769);\012 DoGoodCall(Character, C, jchar, 65536);\012 DoGoodCall(Character, C, jchar, -1);\012#undef DoCall\012},TEST_F(JniInternalTest, CallJValueMethodBadPrimitive) {\012 // Check that bad primitive values, passed as jvalues, cause check\012 // JNI to abort. Unlike with var args, sizes less than an int should\012 // be truncated or sign extended and not cause an abort except for\012 // jbooleans that are passed as bytes.\012#define DoFailCall(boxed_type, shorty, c_type, bad_value)               \\012 {                                                                     \\012    jclass prim_class = env_-&gt;FindClass(&quot;java/lang/&quot; #boxed_type);      \\012    jmethodID method = env_-&gt;GetStaticMethodID(prim_class, &quot;valueOf&quot;,   \\012 &quot;(&quot; #shorty &quot;)Ljava/lang/&quot; #boxed_type &quot;;&quot;); \\012    EXPECT_NE(nullptr, method);                                         \\012    EXPECT_FALSE(env_-&gt;ExceptionCheck());                               \\012 CheckJniAbortCatcher check_jni_abort_catcher;                       \\012    jvalue jval;                                                        \\012    jval.i = bad_value;                                                 \\012    env_-&gt;CallStaticObjectMethodA(prim_class, method, &amp;jval);           \\012    check_jni_abort_catcher.Check(&quot;unexpected &quot; #c_type &quot; value: &quot; #bad_value); \\012 }\012#define DoGoodCall(boxed_type, shorty, c_type, bad_value)               \\012 {                                                                     \\012    jclass prim_class = env_-&gt;FindClass(&quot;java/lang/&quot; #boxed_type);      \\012    jmethodID method = env_-&gt;GetStaticMethodID(prim_class, &quot;valueOf&quot;,   \\012 &quot;(&quot; #shorty &quot;)Ljava/lang/&quot; #boxed_type &quot;;&quot;); \\012    EXPECT_NE(nullptr, method);                                         \\012    EXPECT_FALSE(env_-&gt;ExceptionCheck());                               \\012    jvalue jval;                                                        \\012    jval.i = bad_value;                                                 \\012    env_-&gt;CallStaticObjectMethodA(prim_class, method, &amp;jval);           \\012 }\012\012 DoFailCall(Boolean, Z, jboolean, 2);\012 DoGoodCall(Byte, B, jbyte, 128);\012 DoGoodCall(Byte, B, jbyte, -129);\012 DoGoodCall(Short, S, jshort, 32768);\012 DoGoodCall(Short, S, jshort, -32769);\012 DoGoodCall(Character, C, jchar, 65536);\012 DoGoodCall(Character, C, jchar, -1);\012#undef DoCall\012})<SUB>865</SUB>> ]
-"17761" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetStaticMethodID) {\012  jclass jlobject = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  jclass jlnsme = env_-&gt;FindClass(&quot;java/lang/NoSuchMethodError&quot;);\012\012 // Sanity check that no exceptions are pending\012  ASSERT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Check that java.lang.Object.foo() doesn't exist and NoSuchMethodError is\012 // a pending exception\012  jmethodID method = env_-&gt;GetStaticMethodID(jlobject, &quot;foo&quot;, &quot;()V&quot;);\012  EXPECT_EQ(nullptr, method);\012 ExpectException(jlnsme);\012\012 // Check that GetStaticMethodID for java.lang.Object.equals(Object) fails as\012 // the method is not static\012  method = env_-&gt;GetStaticMethodID(jlobject, &quot;equals&quot;, &quot;(Ljava/lang/Object;)Z&quot;);\012  EXPECT_EQ(nullptr, method);\012 ExpectException(jlnsme);\012\012 // Check that java.lang.String.valueOf(int) does exist\012  jclass jlstring = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  method = env_-&gt;GetStaticMethodID(jlstring, &quot;valueOf&quot;, &quot;(I)Ljava/lang/String;&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Bad arguments.\012 GetStaticMethodIdBadArgumentTest(false);\012 GetStaticMethodIdBadArgumentTest(true);\012},TEST_F(JniInternalTest, GetStaticMethodID) {\012  jclass jlobject = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  jclass jlnsme = env_-&gt;FindClass(&quot;java/lang/NoSuchMethodError&quot;);\012\012 // Sanity check that no exceptions are pending\012  ASSERT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Check that java.lang.Object.foo() doesn't exist and NoSuchMethodError is\012 // a pending exception\012  jmethodID method = env_-&gt;GetStaticMethodID(jlobject, &quot;foo&quot;, &quot;()V&quot;);\012  EXPECT_EQ(nullptr, method);\012 ExpectException(jlnsme);\012\012 // Check that GetStaticMethodID for java.lang.Object.equals(Object) fails as\012 // the method is not static\012  method = env_-&gt;GetStaticMethodID(jlobject, &quot;equals&quot;, &quot;(Ljava/lang/Object;)Z&quot;);\012  EXPECT_EQ(nullptr, method);\012 ExpectException(jlnsme);\012\012 // Check that java.lang.String.valueOf(int) does exist\012  jclass jlstring = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  method = env_-&gt;GetStaticMethodID(jlstring, &quot;valueOf&quot;, &quot;(I)Ljava/lang/String;&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Bad arguments.\012 GetStaticMethodIdBadArgumentTest(false);\012 GetStaticMethodIdBadArgumentTest(true);\012})<SUB>905</SUB>> ]
-"17780" [label = <(UNKNOWN,TEST_F(JniInternalTest, FromReflectedField_ToReflectedField) {\012  jclass jlrField = env_-&gt;FindClass(&quot;java/lang/reflect/Field&quot;);\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012  jfieldID fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;);\012  ASSERT_NE(fid, nullptr);\012 // Turn the fid into a java.lang.reflect.Field...\012  jobject field = env_-&gt;ToReflectedField(c, fid, JNI_FALSE);\012 size_t capacity_before = GetLocalsCapacity(env_);\012 for (size_t i = 0; i &lt;= 10; ++i) {\012 // Regression test for b/18396311, ToReflectedField leaking local refs causing a local\012 // reference table overflows with 512 references to ArtField\012    env_-&gt;DeleteLocalRef(env_-&gt;ToReflectedField(c, fid, JNI_FALSE));\012 }\012 size_t capacity_after = GetLocalsCapacity(env_);\012  ASSERT_EQ(capacity_before, capacity_after);\012\012  ASSERT_NE(c, nullptr);\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(field, jlrField));\012 // ...and back again.\012  jfieldID fid2 = env_-&gt;FromReflectedField(field);\012  ASSERT_NE(fid2, nullptr);\012 // Make sure we can actually use it.\012  jstring s = env_-&gt;NewStringUTF(&quot;poop&quot;);\012 if (mirror::kUseStringCompression) {\012    ASSERT_EQ(mirror::String::GetFlaggedCount(4, /* compressible= */ true),\012              env_-&gt;GetIntField(s, fid2));\012 // Create incompressible string\012    jstring s_16 = env_-&gt;NewStringUTF(&quot;\u0444\u0444&quot;);\012    ASSERT_EQ(mirror::String::GetFlaggedCount(2, /* compressible= */ false),\012              env_-&gt;GetIntField(s_16, fid2));\012 } else {\012    ASSERT_EQ(4, env_-&gt;GetIntField(s, fid2));\012 }\012 // Bad arguments.\012 GetFromReflectedField_ToReflectedFieldBadArgumentTest(false);\012 GetFromReflectedField_ToReflectedFieldBadArgumentTest(true);\012},TEST_F(JniInternalTest, FromReflectedField_ToReflectedField) {\012  jclass jlrField = env_-&gt;FindClass(&quot;java/lang/reflect/Field&quot;);\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012  jfieldID fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;);\012  ASSERT_NE(fid, nullptr);\012 // Turn the fid into a java.lang.reflect.Field...\012  jobject field = env_-&gt;ToReflectedField(c, fid, JNI_FALSE);\012 size_t capacity_before = GetLocalsCapacity(env_);\012 for (size_t i = 0; i &lt;= 10; ++i) {\012 // Regression test for b/18396311, ToReflectedField leaking local refs causing a local\012 // reference table overflows with 512 references to ArtField\012    env_-&gt;DeleteLocalRef(env_-&gt;ToReflectedField(c, fid, JNI_FALSE));\012 }\012 size_t capacity_after = GetLocalsCapacity(env_);\012  ASSERT_EQ(capacity_before, capacity_after);\012\012  ASSERT_NE(c, nullptr);\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(field, jlrField));\012 // ...and back again.\012  jfieldID fid2 = env_-&gt;FromReflectedField(field);\012  ASSERT_NE(fid2, nullptr);\012 // Make sure we can actually use it.\012  jstring s = env_-&gt;NewStringUTF(&quot;poop&quot;);\012 if (mirror::kUseStringCompression) {\012    ASSERT_EQ(mirror::String::GetFlaggedCount(4, /* compressible= */ true),\012              env_-&gt;GetIntField(s, fid2));\012 // Create incompressible string\012    jstring s_16 = env_-&gt;NewStringUTF(&quot;\u0444\u0444&quot;);\012    ASSERT_EQ(mirror::String::GetFlaggedCount(2, /* compressible= */ false),\012              env_-&gt;GetIntField(s_16, fid2));\012 } else {\012    ASSERT_EQ(4, env_-&gt;GetIntField(s, fid2));\012 }\012 // Bad arguments.\012 GetFromReflectedField_ToReflectedFieldBadArgumentTest(false);\012 GetFromReflectedField_ToReflectedFieldBadArgumentTest(true);\012})<SUB>940</SUB>> ]
-"17781" [label = <(UNKNOWN,TEST_F(JniInternalTest, FromReflectedMethod_ToReflectedMethod) {\012  jclass jlrMethod = env_-&gt;FindClass(&quot;java/lang/reflect/Method&quot;);\012  ASSERT_NE(jlrMethod, nullptr);\012  jclass jlrConstructor = env_-&gt;FindClass(&quot;java/lang/reflect/Constructor&quot;);\012  ASSERT_NE(jlrConstructor, nullptr);\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012\012  jmethodID mid = env_-&gt;GetMethodID(c, &quot;&lt;init&gt;&quot;, &quot;()V&quot;);\012  ASSERT_NE(mid, nullptr);\012 // Turn the mid into a java.lang.reflect.Constructor...\012  jobject method = env_-&gt;ToReflectedMethod(c, mid, JNI_FALSE);\012 size_t capacity_before = GetLocalsCapacity(env_);\012 for (size_t i = 0; i &lt;= 10; ++i) {\012 // Regression test for b/18396311, ToReflectedMethod leaking local refs causing a local\012 // reference table overflows with 512 references to ArtMethod\012    env_-&gt;DeleteLocalRef(env_-&gt;ToReflectedMethod(c, mid, JNI_FALSE));\012 }\012 size_t capacity_after = GetLocalsCapacity(env_);\012  ASSERT_EQ(capacity_before, capacity_after);\012  ASSERT_NE(method, nullptr);\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(method, jlrConstructor));\012 // ...and back again.\012  jmethodID mid2 = env_-&gt;FromReflectedMethod(method);\012  ASSERT_NE(mid2, nullptr);\012 // Make sure we can actually use it.\012  jstring s = reinterpret_cast&lt;jstring&gt;(env_-&gt;AllocObject(c));\012  ASSERT_NE(s, nullptr);\012  env_-&gt;CallVoidMethod(s, mid2);\012  ASSERT_EQ(JNI_FALSE, env_-&gt;ExceptionCheck());\012  env_-&gt;ExceptionClear();\012\012  mid = env_-&gt;GetMethodID(c, &quot;length&quot;, &quot;()I&quot;);\012  ASSERT_NE(mid, nullptr);\012 // Turn the mid into a java.lang.reflect.Method...\012  method = env_-&gt;ToReflectedMethod(c, mid, JNI_FALSE);\012  ASSERT_NE(method, nullptr);\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(method, jlrMethod));\012 // ...and back again.\012  mid2 = env_-&gt;FromReflectedMethod(method);\012  ASSERT_NE(mid2, nullptr);\012 // Make sure we can actually use it.\012  s = env_-&gt;NewStringUTF(&quot;poop&quot;);\012  ASSERT_NE(s, nullptr);\012  ASSERT_EQ(4, env_-&gt;CallIntMethod(s, mid2));\012\012 // Bad arguments.\012 GetFromReflectedMethod_ToReflectedMethodBadArgumentTest(false);\012 GetFromReflectedMethod_ToReflectedMethodBadArgumentTest(true);\012},TEST_F(JniInternalTest, FromReflectedMethod_ToReflectedMethod) {\012  jclass jlrMethod = env_-&gt;FindClass(&quot;java/lang/reflect/Method&quot;);\012  ASSERT_NE(jlrMethod, nullptr);\012  jclass jlrConstructor = env_-&gt;FindClass(&quot;java/lang/reflect/Constructor&quot;);\012  ASSERT_NE(jlrConstructor, nullptr);\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012\012  jmethodID mid = env_-&gt;GetMethodID(c, &quot;&lt;init&gt;&quot;, &quot;()V&quot;);\012  ASSERT_NE(mid, nullptr);\012 // Turn the mid into a java.lang.reflect.Constructor...\012  jobject method = env_-&gt;ToReflectedMethod(c, mid, JNI_FALSE);\012 size_t capacity_before = GetLocalsCapacity(env_);\012 for (size_t i = 0; i &lt;= 10; ++i) {\012 // Regression test for b/18396311, ToReflectedMethod leaking local refs causing a local\012 // reference table overflows with 512 references to ArtMethod\012    env_-&gt;DeleteLocalRef(env_-&gt;ToReflectedMethod(c, mid, JNI_FALSE));\012 }\012 size_t capacity_after = GetLocalsCapacity(env_);\012  ASSERT_EQ(capacity_before, capacity_after);\012  ASSERT_NE(method, nullptr);\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(method, jlrConstructor));\012 // ...and back again.\012  jmethodID mid2 = env_-&gt;FromReflectedMethod(method);\012  ASSERT_NE(mid2, nullptr);\012 // Make sure we can actually use it.\012  jstring s = reinterpret_cast&lt;jstring&gt;(env_-&gt;AllocObject(c));\012  ASSERT_NE(s, nullptr);\012  env_-&gt;CallVoidMethod(s, mid2);\012  ASSERT_EQ(JNI_FALSE, env_-&gt;ExceptionCheck());\012  env_-&gt;ExceptionClear();\012\012  mid = env_-&gt;GetMethodID(c, &quot;length&quot;, &quot;()I&quot;);\012  ASSERT_NE(mid, nullptr);\012 // Turn the mid into a java.lang.reflect.Method...\012  method = env_-&gt;ToReflectedMethod(c, mid, JNI_FALSE);\012  ASSERT_NE(method, nullptr);\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(method, jlrMethod));\012 // ...and back again.\012  mid2 = env_-&gt;FromReflectedMethod(method);\012  ASSERT_NE(mid2, nullptr);\012 // Make sure we can actually use it.\012  s = env_-&gt;NewStringUTF(&quot;poop&quot;);\012  ASSERT_NE(s, nullptr);\012  ASSERT_EQ(4, env_-&gt;CallIntMethod(s, mid2));\012\012 // Bad arguments.\012 GetFromReflectedMethod_ToReflectedMethodBadArgumentTest(false);\012 GetFromReflectedMethod_ToReflectedMethodBadArgumentTest(true);\012})<SUB>979</SUB>> ]
-"17786" [label = <(UNKNOWN,TEST_F(JniInternalTest, RegisterAndUnregisterNatives) {\012  jclass jlobject = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  jclass jlnsme = env_-&gt;FindClass(&quot;java/lang/NoSuchMethodError&quot;);\012 void* native_function = reinterpret_cast&lt;void*&gt;(BogusMethod);\012\012 // Sanity check that no exceptions are pending.\012  ASSERT_FALSE(env_-&gt;ExceptionCheck());\012\012 // The following can print errors to the log we'd like to ignore.\012 {\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012 // Check that registering method without name causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { nullptr, &quot;()V&quot;, native_function } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012\012 // Check that registering method without signature causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { &quot;notify&quot;, nullptr, native_function } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012\012 // Check that registering method without function causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { &quot;notify&quot;, &quot;()V&quot;, nullptr } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012\012 // Check that registering to a non-existent java.lang.Object.foo() causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { &quot;foo&quot;, &quot;()V&quot;, native_function } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012\012 // Check that registering non-native methods causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { &quot;equals&quot;, &quot;(Ljava/lang/Object;)Z&quot;, native_function } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012 }\012\012 // Check that registering native methods is successful.\012 {\012 JNINativeMethod methods[] = { { &quot;notify&quot;, &quot;()V&quot;, native_function } };\012    EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_OK);\012 }\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012  EXPECT_EQ(env_-&gt;UnregisterNatives(jlobject), JNI_OK);\012\012 // Check that registering no methods isn't a failure.\012 {\012 JNINativeMethod methods[] = { };\012    EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 0), JNI_OK);\012 }\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012  EXPECT_EQ(env_-&gt;UnregisterNatives(jlobject), JNI_OK);\012\012 // Check that registering a -ve number of methods is a failure.\012 CheckJniAbortCatcher check_jni_abort_catcher;\012 for (int i = -10; i &lt; 0; ++i) {\012 JNINativeMethod methods[] = { };\012    EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, i), JNI_ERR);\012    check_jni_abort_catcher.Check(&quot;negative method count: &quot;);\012 }\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Unregistering a class with no natives is a warning.\012  EXPECT_EQ(env_-&gt;UnregisterNatives(jlnsme), JNI_OK);\012\012 RegisterAndUnregisterNativesBadArguments(false, &amp;check_jni_abort_catcher);\012 RegisterAndUnregisterNativesBadArguments(true, &amp;check_jni_abort_catcher);\012},TEST_F(JniInternalTest, RegisterAndUnregisterNatives) {\012  jclass jlobject = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  jclass jlnsme = env_-&gt;FindClass(&quot;java/lang/NoSuchMethodError&quot;);\012 void* native_function = reinterpret_cast&lt;void*&gt;(BogusMethod);\012\012 // Sanity check that no exceptions are pending.\012  ASSERT_FALSE(env_-&gt;ExceptionCheck());\012\012 // The following can print errors to the log we'd like to ignore.\012 {\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012 // Check that registering method without name causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { nullptr, &quot;()V&quot;, native_function } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012\012 // Check that registering method without signature causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { &quot;notify&quot;, nullptr, native_function } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012\012 // Check that registering method without function causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { &quot;notify&quot;, &quot;()V&quot;, nullptr } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012\012 // Check that registering to a non-existent java.lang.Object.foo() causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { &quot;foo&quot;, &quot;()V&quot;, native_function } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012\012 // Check that registering non-native methods causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { &quot;equals&quot;, &quot;(Ljava/lang/Object;)Z&quot;, native_function } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012 }\012\012 // Check that registering native methods is successful.\012 {\012 JNINativeMethod methods[] = { { &quot;notify&quot;, &quot;()V&quot;, native_function } };\012    EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_OK);\012 }\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012  EXPECT_EQ(env_-&gt;UnregisterNatives(jlobject), JNI_OK);\012\012 // Check that registering no methods isn't a failure.\012 {\012 JNINativeMethod methods[] = { };\012    EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 0), JNI_OK);\012 }\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012  EXPECT_EQ(env_-&gt;UnregisterNatives(jlobject), JNI_OK);\012\012 // Check that registering a -ve number of methods is a failure.\012 CheckJniAbortCatcher check_jni_abort_catcher;\012 for (int i = -10; i &lt; 0; ++i) {\012 JNINativeMethod methods[] = { };\012    EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, i), JNI_ERR);\012    check_jni_abort_catcher.Check(&quot;negative method count: &quot;);\012 }\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Unregistering a class with no natives is a warning.\012  EXPECT_EQ(env_-&gt;UnregisterNatives(jlnsme), JNI_OK);\012\012 RegisterAndUnregisterNativesBadArguments(false, &amp;check_jni_abort_catcher);\012 RegisterAndUnregisterNativesBadArguments(true, &amp;check_jni_abort_catcher);\012})<SUB>1034</SUB>> ]
-"17787" [label = <(UNKNOWN,TEST_F(JniInternalTest, BooleanArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewBooleanArray, GetBooleanArrayRegion, SetBooleanArrayRegion,\012 GetBooleanArrayElements, ReleaseBooleanArrayElements, jboolean, &quot;[Z&quot;);\012},TEST_F(JniInternalTest, BooleanArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewBooleanArray, GetBooleanArrayRegion, SetBooleanArrayRegion,\012 GetBooleanArrayElements, ReleaseBooleanArrayElements, jboolean, &quot;[Z&quot;);\012})<SUB>1225</SUB>> ]
-"17788" [label = <(UNKNOWN,TEST_F(JniInternalTest, ByteArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewByteArray, GetByteArrayRegion, SetByteArrayRegion,\012 GetByteArrayElements, ReleaseByteArrayElements, jbyte, &quot;[B&quot;);\012},TEST_F(JniInternalTest, ByteArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewByteArray, GetByteArrayRegion, SetByteArrayRegion,\012 GetByteArrayElements, ReleaseByteArrayElements, jbyte, &quot;[B&quot;);\012})<SUB>1229</SUB>> ]
-"17789" [label = <(UNKNOWN,TEST_F(JniInternalTest, CharArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewCharArray, GetCharArrayRegion, SetCharArrayRegion,\012 GetCharArrayElements, ReleaseCharArrayElements, jchar, &quot;[C&quot;);\012},TEST_F(JniInternalTest, CharArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewCharArray, GetCharArrayRegion, SetCharArrayRegion,\012 GetCharArrayElements, ReleaseCharArrayElements, jchar, &quot;[C&quot;);\012})<SUB>1233</SUB>> ]
-"17790" [label = <(UNKNOWN,TEST_F(JniInternalTest, DoubleArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewDoubleArray, GetDoubleArrayRegion, SetDoubleArrayRegion,\012 GetDoubleArrayElements, ReleaseDoubleArrayElements, jdouble, &quot;[D&quot;);\012},TEST_F(JniInternalTest, DoubleArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewDoubleArray, GetDoubleArrayRegion, SetDoubleArrayRegion,\012 GetDoubleArrayElements, ReleaseDoubleArrayElements, jdouble, &quot;[D&quot;);\012})<SUB>1237</SUB>> ]
-"17791" [label = <(UNKNOWN,TEST_F(JniInternalTest, FloatArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewFloatArray, GetFloatArrayRegion, SetFloatArrayRegion,\012 GetFloatArrayElements, ReleaseFloatArrayElements, jfloat, &quot;[F&quot;);\012},TEST_F(JniInternalTest, FloatArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewFloatArray, GetFloatArrayRegion, SetFloatArrayRegion,\012 GetFloatArrayElements, ReleaseFloatArrayElements, jfloat, &quot;[F&quot;);\012})<SUB>1241</SUB>> ]
-"17792" [label = <(UNKNOWN,TEST_F(JniInternalTest, IntArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewIntArray, GetIntArrayRegion, SetIntArrayRegion,\012 GetIntArrayElements, ReleaseIntArrayElements, jint, &quot;[I&quot;);\012},TEST_F(JniInternalTest, IntArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewIntArray, GetIntArrayRegion, SetIntArrayRegion,\012 GetIntArrayElements, ReleaseIntArrayElements, jint, &quot;[I&quot;);\012})<SUB>1245</SUB>> ]
-"17793" [label = <(UNKNOWN,TEST_F(JniInternalTest, LongArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewLongArray, GetLongArrayRegion, SetLongArrayRegion,\012 GetLongArrayElements, ReleaseLongArrayElements, jlong, &quot;[J&quot;);\012},TEST_F(JniInternalTest, LongArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewLongArray, GetLongArrayRegion, SetLongArrayRegion,\012 GetLongArrayElements, ReleaseLongArrayElements, jlong, &quot;[J&quot;);\012})<SUB>1249</SUB>> ]
-"17794" [label = <(UNKNOWN,TEST_F(JniInternalTest, ShortArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewShortArray, GetShortArrayRegion, SetShortArrayRegion,\012 GetShortArrayElements, ReleaseShortArrayElements, jshort, &quot;[S&quot;);\012},TEST_F(JniInternalTest, ShortArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewShortArray, GetShortArrayRegion, SetShortArrayRegion,\012 GetShortArrayElements, ReleaseShortArrayElements, jshort, &quot;[S&quot;);\012})<SUB>1253</SUB>> ]
-"17795" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetPrimitiveArrayElementsOfWrongType) {\012 GetPrimitiveArrayElementsOfWrongType(false);\012 GetPrimitiveArrayElementsOfWrongType(true);\012},TEST_F(JniInternalTest, GetPrimitiveArrayElementsOfWrongType) {\012 GetPrimitiveArrayElementsOfWrongType(false);\012 GetPrimitiveArrayElementsOfWrongType(true);\012})<SUB>1258</SUB>> ]
-"17796" [label = <(UNKNOWN,TEST_F(JniInternalTest, ReleasePrimitiveArrayElementsOfWrongType) {\012 ReleasePrimitiveArrayElementsOfWrongType(false);\012 ReleasePrimitiveArrayElementsOfWrongType(true);\012},TEST_F(JniInternalTest, ReleasePrimitiveArrayElementsOfWrongType) {\012 ReleasePrimitiveArrayElementsOfWrongType(false);\012 ReleasePrimitiveArrayElementsOfWrongType(true);\012})<SUB>1263</SUB>> ]
-"17797" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetReleasePrimitiveArrayCriticalOfWrongType) {\012 GetReleasePrimitiveArrayCriticalOfWrongType(false);\012 GetReleasePrimitiveArrayCriticalOfWrongType(true);\012},TEST_F(JniInternalTest, GetReleasePrimitiveArrayCriticalOfWrongType) {\012 GetReleasePrimitiveArrayCriticalOfWrongType(false);\012 GetReleasePrimitiveArrayCriticalOfWrongType(true);\012})<SUB>1268</SUB>> ]
-"17798" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetPrimitiveArrayRegionElementsOfWrongType) {\012 GetPrimitiveArrayRegionElementsOfWrongType(false);\012 GetPrimitiveArrayRegionElementsOfWrongType(true);\012},TEST_F(JniInternalTest, GetPrimitiveArrayRegionElementsOfWrongType) {\012 GetPrimitiveArrayRegionElementsOfWrongType(false);\012 GetPrimitiveArrayRegionElementsOfWrongType(true);\012})<SUB>1273</SUB>> ]
-"17799" [label = <(UNKNOWN,TEST_F(JniInternalTest, SetPrimitiveArrayRegionElementsOfWrongType) {\012 SetPrimitiveArrayRegionElementsOfWrongType(false);\012 SetPrimitiveArrayRegionElementsOfWrongType(true);\012},TEST_F(JniInternalTest, SetPrimitiveArrayRegionElementsOfWrongType) {\012 SetPrimitiveArrayRegionElementsOfWrongType(false);\012 SetPrimitiveArrayRegionElementsOfWrongType(true);\012})<SUB>1278</SUB>> ]
-"17800" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewObjectArray) {\012  jclass element_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(element_class, nullptr);\012  jclass array_class = env_-&gt;FindClass(&quot;[Ljava/lang/String;&quot;);\012  ASSERT_NE(array_class, nullptr);\012\012  jobjectArray a = env_-&gt;NewObjectArray(0, element_class, nullptr);\012  EXPECT_NE(a, nullptr);\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(a, array_class));\012  EXPECT_EQ(0, env_-&gt;GetArrayLength(a));\012\012  a = env_-&gt;NewObjectArray(1, element_class, nullptr);\012  EXPECT_NE(a, nullptr);\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(a, array_class));\012  EXPECT_EQ(1, env_-&gt;GetArrayLength(a));\012  EXPECT_TRUE(env_-&gt;IsSameObject(env_-&gt;GetObjectArrayElement(a, 0), nullptr));\012\012 // Negative array length checks.\012 NewObjectArrayBadArguments(false);\012 NewObjectArrayBadArguments(true);\012},TEST_F(JniInternalTest, NewObjectArray) {\012  jclass element_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(element_class, nullptr);\012  jclass array_class = env_-&gt;FindClass(&quot;[Ljava/lang/String;&quot;);\012  ASSERT_NE(array_class, nullptr);\012\012  jobjectArray a = env_-&gt;NewObjectArray(0, element_class, nullptr);\012  EXPECT_NE(a, nullptr);\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(a, array_class));\012  EXPECT_EQ(0, env_-&gt;GetArrayLength(a));\012\012  a = env_-&gt;NewObjectArray(1, element_class, nullptr);\012  EXPECT_NE(a, nullptr);\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(a, array_class));\012  EXPECT_EQ(1, env_-&gt;GetArrayLength(a));\012  EXPECT_TRUE(env_-&gt;IsSameObject(env_-&gt;GetObjectArrayElement(a, 0), nullptr));\012\012 // Negative array length checks.\012 NewObjectArrayBadArguments(false);\012 NewObjectArrayBadArguments(true);\012})<SUB>1283</SUB>> ]
-"17801" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewObjectArrayWithPrimitiveClasses) {\012 const char* primitive_descriptors = &quot;VZBSCIJFD&quot;;\012 const char* primitive_names[] = {\012 &quot;void&quot;, &quot;boolean&quot;, &quot;byte&quot;, &quot;short&quot;, &quot;char&quot;, &quot;int&quot;, &quot;long&quot;, &quot;float&quot;, &quot;double&quot;\012 };\012  ASSERT_EQ(strlen(primitive_descriptors), arraysize(primitive_names));\012\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 CheckJniAbortCatcher jni_abort_catcher;\012 for (size_t i = 0; i &lt; strlen(primitive_descriptors); ++i) {\012    env_-&gt;NewObjectArray(0, nullptr, nullptr);\012    jni_abort_catcher.Check(&quot;element_jclass == null&quot;);\012    jclass primitive_class = GetPrimitiveClass(primitive_descriptors[i]);\012    env_-&gt;NewObjectArray(1, primitive_class, nullptr);\012    std::string error_msg(StringPrintf(&quot;not an object type: %s&quot;, primitive_names[i]));\012    jni_abort_catcher.Check(error_msg.c_str());\012 }\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012 for (size_t i = 0; i &lt; strlen(primitive_descriptors); ++i) {\012    env_-&gt;NewObjectArray(0, nullptr, nullptr);\012    jni_abort_catcher.Check(&quot;NewObjectArray received NULL jclass&quot;);\012    jclass primitive_class = GetPrimitiveClass(primitive_descriptors[i]);\012    env_-&gt;NewObjectArray(1, primitive_class, nullptr);\012    std::string error_msg(StringPrintf(&quot;not an object type: %s&quot;, primitive_names[i]));\012    jni_abort_catcher.Check(error_msg.c_str());\012 }\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012},TEST_F(JniInternalTest, NewObjectArrayWithPrimitiveClasses) {\012 const char* primitive_descriptors = &quot;VZBSCIJFD&quot;;\012 const char* primitive_names[] = {\012 &quot;void&quot;, &quot;boolean&quot;, &quot;byte&quot;, &quot;short&quot;, &quot;char&quot;, &quot;int&quot;, &quot;long&quot;, &quot;float&quot;, &quot;double&quot;\012 };\012  ASSERT_EQ(strlen(primitive_descriptors), arraysize(primitive_names));\012\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 CheckJniAbortCatcher jni_abort_catcher;\012 for (size_t i = 0; i &lt; strlen(primitive_descriptors); ++i) {\012    env_-&gt;NewObjectArray(0, nullptr, nullptr);\012    jni_abort_catcher.Check(&quot;element_jclass == null&quot;);\012    jclass primitive_class = GetPrimitiveClass(primitive_descriptors[i]);\012    env_-&gt;NewObjectArray(1, primitive_class, nullptr);\012    std::string error_msg(StringPrintf(&quot;not an object type: %s&quot;, primitive_names[i]));\012    jni_abort_catcher.Check(error_msg.c_str());\012 }\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012 for (size_t i = 0; i &lt; strlen(primitive_descriptors); ++i) {\012    env_-&gt;NewObjectArray(0, nullptr, nullptr);\012    jni_abort_catcher.Check(&quot;NewObjectArray received NULL jclass&quot;);\012    jclass primitive_class = GetPrimitiveClass(primitive_descriptors[i]);\012    env_-&gt;NewObjectArray(1, primitive_class, nullptr);\012    std::string error_msg(StringPrintf(&quot;not an object type: %s&quot;, primitive_names[i]));\012    jni_abort_catcher.Check(error_msg.c_str());\012 }\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012})<SUB>1305</SUB>> ]
-"17802" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewObjectArrayWithInitialValue) {\012  jclass element_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(element_class, nullptr);\012  jclass array_class = env_-&gt;FindClass(&quot;[Ljava/lang/String;&quot;);\012  ASSERT_NE(array_class, nullptr);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;poop&quot;);\012  jobjectArray a = env_-&gt;NewObjectArray(2, element_class, s);\012  EXPECT_NE(a, nullptr);\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(a, array_class));\012  EXPECT_EQ(2, env_-&gt;GetArrayLength(a));\012  EXPECT_TRUE(env_-&gt;IsSameObject(env_-&gt;GetObjectArrayElement(a, 0), s));\012  EXPECT_TRUE(env_-&gt;IsSameObject(env_-&gt;GetObjectArrayElement(a, 1), s));\012\012 // Attempt to incorrect create an array of strings with initial value of string arrays.\012 CheckJniAbortCatcher jni_abort_catcher;\012  env_-&gt;NewObjectArray(2, element_class, a);\012  jni_abort_catcher.Check(&quot;cannot assign object of type 'java.lang.String[]' to array with element &quot;\012 &quot;type of 'java.lang.String'&quot;);\012},TEST_F(JniInternalTest, NewObjectArrayWithInitialValue) {\012  jclass element_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(element_class, nullptr);\012  jclass array_class = env_-&gt;FindClass(&quot;[Ljava/lang/String;&quot;);\012  ASSERT_NE(array_class, nullptr);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;poop&quot;);\012  jobjectArray a = env_-&gt;NewObjectArray(2, element_class, s);\012  EXPECT_NE(a, nullptr);\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(a, array_class));\012  EXPECT_EQ(2, env_-&gt;GetArrayLength(a));\012  EXPECT_TRUE(env_-&gt;IsSameObject(env_-&gt;GetObjectArrayElement(a, 0), s));\012  EXPECT_TRUE(env_-&gt;IsSameObject(env_-&gt;GetObjectArrayElement(a, 1), s));\012\012 // Attempt to incorrect create an array of strings with initial value of string arrays.\012 CheckJniAbortCatcher jni_abort_catcher;\012  env_-&gt;NewObjectArray(2, element_class, a);\012  jni_abort_catcher.Check(&quot;cannot assign object of type 'java.lang.String[]' to array with element &quot;\012 &quot;type of 'java.lang.String'&quot;);\012})<SUB>1334</SUB>> ]
-"17803" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetArrayLength) {\012 // Already tested in NewObjectArray/NewPrimitiveArray except for null.\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(0, env_-&gt;GetArrayLength(nullptr));\012  jni_abort_catcher.Check(&quot;java_array == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(JNI_ERR, env_-&gt;GetArrayLength(nullptr));\012  jni_abort_catcher.Check(&quot;jarray was NULL&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012},TEST_F(JniInternalTest, GetArrayLength) {\012 // Already tested in NewObjectArray/NewPrimitiveArray except for null.\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(0, env_-&gt;GetArrayLength(nullptr));\012  jni_abort_catcher.Check(&quot;java_array == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(JNI_ERR, env_-&gt;GetArrayLength(nullptr));\012  jni_abort_catcher.Check(&quot;jarray was NULL&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012})<SUB>1355</SUB>> ]
-"17804" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetObjectClass) {\012  jclass string_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(string_class, nullptr);\012  jclass class_class = env_-&gt;FindClass(&quot;java/lang/Class&quot;);\012  ASSERT_NE(class_class, nullptr);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;poop&quot;);\012  jclass c = env_-&gt;GetObjectClass(s);\012  ASSERT_TRUE(env_-&gt;IsSameObject(string_class, c));\012\012  jclass c2 = env_-&gt;GetObjectClass(c);\012  ASSERT_TRUE(env_-&gt;IsSameObject(class_class, env_-&gt;GetObjectClass(c2)));\012\012 // Null as object should fail.\012 CheckJniAbortCatcher jni_abort_catcher;\012  EXPECT_EQ(env_-&gt;GetObjectClass(nullptr), nullptr);\012  jni_abort_catcher.Check(&quot;java_object == null&quot;);\012},TEST_F(JniInternalTest, GetObjectClass) {\012  jclass string_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(string_class, nullptr);\012  jclass class_class = env_-&gt;FindClass(&quot;java/lang/Class&quot;);\012  ASSERT_NE(class_class, nullptr);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;poop&quot;);\012  jclass c = env_-&gt;GetObjectClass(s);\012  ASSERT_TRUE(env_-&gt;IsSameObject(string_class, c));\012\012  jclass c2 = env_-&gt;GetObjectClass(c);\012  ASSERT_TRUE(env_-&gt;IsSameObject(class_class, env_-&gt;GetObjectClass(c2)));\012\012 // Null as object should fail.\012 CheckJniAbortCatcher jni_abort_catcher;\012  EXPECT_EQ(env_-&gt;GetObjectClass(nullptr), nullptr);\012  jni_abort_catcher.Check(&quot;java_object == null&quot;);\012})<SUB>1367</SUB>> ]
-"17805" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetSuperclass) {\012  jclass object_class = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_NE(object_class, nullptr);\012  jclass string_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(string_class, nullptr);\012  jclass runnable_interface = env_-&gt;FindClass(&quot;java/lang/Runnable&quot;);\012  ASSERT_NE(runnable_interface, nullptr);\012  ASSERT_TRUE(env_-&gt;IsSameObject(object_class, env_-&gt;GetSuperclass(string_class)));\012  ASSERT_EQ(env_-&gt;GetSuperclass(object_class), nullptr);\012  ASSERT_EQ(env_-&gt;GetSuperclass(runnable_interface), nullptr);\012\012 // Null as class should fail.\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(env_-&gt;GetSuperclass(nullptr), nullptr);\012  jni_abort_catcher.Check(&quot;java_class == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(env_-&gt;GetSuperclass(nullptr), nullptr);\012  jni_abort_catcher.Check(&quot;GetSuperclass received NULL jclass&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012},TEST_F(JniInternalTest, GetSuperclass) {\012  jclass object_class = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_NE(object_class, nullptr);\012  jclass string_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(string_class, nullptr);\012  jclass runnable_interface = env_-&gt;FindClass(&quot;java/lang/Runnable&quot;);\012  ASSERT_NE(runnable_interface, nullptr);\012  ASSERT_TRUE(env_-&gt;IsSameObject(object_class, env_-&gt;GetSuperclass(string_class)));\012  ASSERT_EQ(env_-&gt;GetSuperclass(object_class), nullptr);\012  ASSERT_EQ(env_-&gt;GetSuperclass(runnable_interface), nullptr);\012\012 // Null as class should fail.\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(env_-&gt;GetSuperclass(nullptr), nullptr);\012  jni_abort_catcher.Check(&quot;java_class == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(env_-&gt;GetSuperclass(nullptr), nullptr);\012  jni_abort_catcher.Check(&quot;GetSuperclass received NULL jclass&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012})<SUB>1386</SUB>> ]
-"17806" [label = <(UNKNOWN,TEST_F(JniInternalTest, IsAssignableFrom) {\012  jclass object_class = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_NE(object_class, nullptr);\012  jclass string_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(string_class, nullptr);\012\012 // A superclass is assignable from an instance of its\012 // subclass but not vice versa.\012  ASSERT_TRUE(env_-&gt;IsAssignableFrom(string_class, object_class));\012  ASSERT_FALSE(env_-&gt;IsAssignableFrom(object_class, string_class));\012\012  jclass charsequence_interface = env_-&gt;FindClass(&quot;java/lang/CharSequence&quot;);\012  ASSERT_NE(charsequence_interface, nullptr);\012\012 // An interface is assignable from an instance of an implementing\012 // class but not vice versa.\012  ASSERT_TRUE(env_-&gt;IsAssignableFrom(string_class, charsequence_interface));\012  ASSERT_FALSE(env_-&gt;IsAssignableFrom(charsequence_interface, string_class));\012\012 // Check that arrays are covariant.\012  jclass string_array_class = env_-&gt;FindClass(&quot;[Ljava/lang/String;&quot;);\012  ASSERT_NE(string_array_class, nullptr);\012  jclass object_array_class = env_-&gt;FindClass(&quot;[Ljava/lang/Object;&quot;);\012  ASSERT_NE(object_array_class, nullptr);\012  ASSERT_TRUE(env_-&gt;IsAssignableFrom(string_array_class, object_array_class));\012  ASSERT_FALSE(env_-&gt;IsAssignableFrom(object_array_class, string_array_class));\012\012 // Primitive types are tested in 004-JniTest.\012\012 // Null as either class should fail.\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(env_-&gt;IsAssignableFrom(nullptr, string_class), JNI_FALSE);\012  jni_abort_catcher.Check(&quot;java_class1 == null&quot;);\012  EXPECT_EQ(env_-&gt;IsAssignableFrom(object_class, nullptr), JNI_FALSE);\012  jni_abort_catcher.Check(&quot;java_class2 == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(env_-&gt;IsAssignableFrom(nullptr, string_class), JNI_FALSE);\012  jni_abort_catcher.Check(&quot;IsAssignableFrom received NULL jclass&quot;);\012  EXPECT_EQ(env_-&gt;IsAssignableFrom(object_class, nullptr), JNI_FALSE);\012  jni_abort_catcher.Check(&quot;IsAssignableFrom received NULL jclass&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012},TEST_F(JniInternalTest, IsAssignableFrom) {\012  jclass object_class = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_NE(object_class, nullptr);\012  jclass string_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(string_class, nullptr);\012\012 // A superclass is assignable from an instance of its\012 // subclass but not vice versa.\012  ASSERT_TRUE(env_-&gt;IsAssignableFrom(string_class, object_class));\012  ASSERT_FALSE(env_-&gt;IsAssignableFrom(object_class, string_class));\012\012  jclass charsequence_interface = env_-&gt;FindClass(&quot;java/lang/CharSequence&quot;);\012  ASSERT_NE(charsequence_interface, nullptr);\012\012 // An interface is assignable from an instance of an implementing\012 // class but not vice versa.\012  ASSERT_TRUE(env_-&gt;IsAssignableFrom(string_class, charsequence_interface));\012  ASSERT_FALSE(env_-&gt;IsAssignableFrom(charsequence_interface, string_class));\012\012 // Check that arrays are covariant.\012  jclass string_array_class = env_-&gt;FindClass(&quot;[Ljava/lang/String;&quot;);\012  ASSERT_NE(string_array_class, nullptr);\012  jclass object_array_class = env_-&gt;FindClass(&quot;[Ljava/lang/Object;&quot;);\012  ASSERT_NE(object_array_class, nullptr);\012  ASSERT_TRUE(env_-&gt;IsAssignableFrom(string_array_class, object_array_class));\012  ASSERT_FALSE(env_-&gt;IsAssignableFrom(object_array_class, string_array_class));\012\012 // Primitive types are tested in 004-JniTest.\012\012 // Null as either class should fail.\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(env_-&gt;IsAssignableFrom(nullptr, string_class), JNI_FALSE);\012  jni_abort_catcher.Check(&quot;java_class1 == null&quot;);\012  EXPECT_EQ(env_-&gt;IsAssignableFrom(object_class, nullptr), JNI_FALSE);\012  jni_abort_catcher.Check(&quot;java_class2 == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(env_-&gt;IsAssignableFrom(nullptr, string_class), JNI_FALSE);\012  jni_abort_catcher.Check(&quot;IsAssignableFrom received NULL jclass&quot;);\012  EXPECT_EQ(env_-&gt;IsAssignableFrom(object_class, nullptr), JNI_FALSE);\012  jni_abort_catcher.Check(&quot;IsAssignableFrom received NULL jclass&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012})<SUB>1408</SUB>> ]
-"17807" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetObjectRefType) {\012  jclass local = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_TRUE(local != nullptr);\012  EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(local));\012\012  jobject global = env_-&gt;NewGlobalRef(local);\012  EXPECT_EQ(JNIGlobalRefType, env_-&gt;GetObjectRefType(global));\012\012  jweak weak_global = env_-&gt;NewWeakGlobalRef(local);\012  EXPECT_EQ(JNIWeakGlobalRefType, env_-&gt;GetObjectRefType(weak_global));\012\012 {\012 CheckJniAbortCatcher jni_abort_catcher;\012    jobject invalid = reinterpret_cast&lt;jobject&gt;(this);\012    EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(invalid));\012    jni_abort_catcher.Check(&quot;use of invalid jobject&quot;);\012 }\012\012 // TODO: invoke a native method and test that its arguments are considered local references.\012\012 // Null as pointer should not fail and return invalid-ref. b/18820997\012  EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(nullptr));\012\012 // TODO: Null as reference should return the original type.\012 // This requires running a GC so a non-null object gets freed.\012},TEST_F(JniInternalTest, GetObjectRefType) {\012  jclass local = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_TRUE(local != nullptr);\012  EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(local));\012\012  jobject global = env_-&gt;NewGlobalRef(local);\012  EXPECT_EQ(JNIGlobalRefType, env_-&gt;GetObjectRefType(global));\012\012  jweak weak_global = env_-&gt;NewWeakGlobalRef(local);\012  EXPECT_EQ(JNIWeakGlobalRefType, env_-&gt;GetObjectRefType(weak_global));\012\012 {\012 CheckJniAbortCatcher jni_abort_catcher;\012    jobject invalid = reinterpret_cast&lt;jobject&gt;(this);\012    EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(invalid));\012    jni_abort_catcher.Check(&quot;use of invalid jobject&quot;);\012 }\012\012 // TODO: invoke a native method and test that its arguments are considered local references.\012\012 // Null as pointer should not fail and return invalid-ref. b/18820997\012  EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(nullptr));\012\012 // TODO: Null as reference should return the original type.\012 // This requires running a GC so a non-null object gets freed.\012})<SUB>1452</SUB>> ]
-"17808" [label = <(UNKNOWN,TEST_F(JniInternalTest, StaleWeakGlobal) {\012  jclass java_lang_Class = env_-&gt;FindClass(&quot;java/lang/Class&quot;);\012  ASSERT_NE(java_lang_Class, nullptr);\012  jobjectArray local_ref = env_-&gt;NewObjectArray(1, java_lang_Class, nullptr);\012  ASSERT_NE(local_ref, nullptr);\012  jweak weak_global = env_-&gt;NewWeakGlobalRef(local_ref);\012  ASSERT_NE(weak_global, nullptr);\012  env_-&gt;DeleteLocalRef(local_ref);\012 // GC should clear the weak global.\012 Runtime::Current()-&gt;GetHeap()-&gt;CollectGarbage(/* clear_soft_references= */ false);\012  jobject new_global_ref = env_-&gt;NewGlobalRef(weak_global);\012  EXPECT_EQ(new_global_ref, nullptr);\012  jobject new_local_ref = env_-&gt;NewLocalRef(weak_global);\012  EXPECT_EQ(new_local_ref, nullptr);\012},TEST_F(JniInternalTest, StaleWeakGlobal) {\012  jclass java_lang_Class = env_-&gt;FindClass(&quot;java/lang/Class&quot;);\012  ASSERT_NE(java_lang_Class, nullptr);\012  jobjectArray local_ref = env_-&gt;NewObjectArray(1, java_lang_Class, nullptr);\012  ASSERT_NE(local_ref, nullptr);\012  jweak weak_global = env_-&gt;NewWeakGlobalRef(local_ref);\012  ASSERT_NE(weak_global, nullptr);\012  env_-&gt;DeleteLocalRef(local_ref);\012 // GC should clear the weak global.\012 Runtime::Current()-&gt;GetHeap()-&gt;CollectGarbage(/* clear_soft_references= */ false);\012  jobject new_global_ref = env_-&gt;NewGlobalRef(weak_global);\012  EXPECT_EQ(new_global_ref, nullptr);\012  jobject new_local_ref = env_-&gt;NewLocalRef(weak_global);\012  EXPECT_EQ(new_local_ref, nullptr);\012})<SUB>1479</SUB>> ]
-"17809" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewStringUTF) {\012  EXPECT_EQ(env_-&gt;NewStringUTF(nullptr), nullptr);\012  jstring s;\012\012  s = env_-&gt;NewStringUTF(&quot;&quot;);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(0, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(0, env_-&gt;GetStringUTFLength(s));\012  s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(5, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(5, env_-&gt;GetStringUTFLength(s));\012\012 // Encoded surrogate pair.\012  s = env_-&gt;NewStringUTF(&quot;\xed\xa0\x81\xed\xb0\x80&quot;);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(2, env_-&gt;GetStringLength(s));\012\012 // The surrogate pair gets encoded into a 4 byte UTF sequence..\012  EXPECT_EQ(4, env_-&gt;GetStringUTFLength(s));\012 const char* chars = env_-&gt;GetStringUTFChars(s, nullptr);\012  EXPECT_STREQ(&quot;\xf0\x90\x90\x80&quot;, chars);\012  env_-&gt;ReleaseStringUTFChars(s, chars);\012\012 // .. but is stored as is in the utf-16 representation.\012 const jchar* jchars = env_-&gt;GetStringChars(s, nullptr);\012  EXPECT_EQ(0xd801, jchars[0]);\012  EXPECT_EQ(0xdc00, jchars[1]);\012  env_-&gt;ReleaseStringChars(s, jchars);\012\012 // 4 byte UTF sequence appended to an encoded surrogate pair.\012  s = env_-&gt;NewStringUTF(&quot;\xed\xa0\x81\xed\xb0\x80 \xf0\x9f\x8f\xa0&quot;);\012  EXPECT_NE(s, nullptr);\012\012 // The 4 byte sequence {0xf0, 0x9f, 0x8f, 0xa0} is converted into a surrogate\012 // pair {0xd83c, 0xdfe0}.\012  EXPECT_EQ(5, env_-&gt;GetStringLength(s));\012  jchars = env_-&gt;GetStringChars(s, nullptr);\012 // The first surrogate pair, encoded as such in the input.\012  EXPECT_EQ(0xd801, jchars[0]);\012  EXPECT_EQ(0xdc00, jchars[1]);\012 // The second surrogate pair, from the 4 byte UTF sequence in the input.\012  EXPECT_EQ(0xd83c, jchars[3]);\012  EXPECT_EQ(0xdfe0, jchars[4]);\012  env_-&gt;ReleaseStringChars(s, jchars);\012\012  EXPECT_EQ(9, env_-&gt;GetStringUTFLength(s));\012  chars = env_-&gt;GetStringUTFChars(s, nullptr);\012  EXPECT_STREQ(&quot;\xf0\x90\x90\x80 \xf0\x9f\x8f\xa0&quot;, chars);\012  env_-&gt;ReleaseStringUTFChars(s, chars);\012\012 // A string with 1, 2, 3 and 4 byte UTF sequences with spaces\012 // between them\012  s = env_-&gt;NewStringUTF(&quot;\x24 \xc2\xa2 \xe2\x82\xac \xf0\x9f\x8f\xa0&quot;);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(8, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(13, env_-&gt;GetStringUTFLength(s));\012},TEST_F(JniInternalTest, NewStringUTF) {\012  EXPECT_EQ(env_-&gt;NewStringUTF(nullptr), nullptr);\012  jstring s;\012\012  s = env_-&gt;NewStringUTF(&quot;&quot;);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(0, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(0, env_-&gt;GetStringUTFLength(s));\012  s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(5, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(5, env_-&gt;GetStringUTFLength(s));\012\012 // Encoded surrogate pair.\012  s = env_-&gt;NewStringUTF(&quot;\xed\xa0\x81\xed\xb0\x80&quot;);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(2, env_-&gt;GetStringLength(s));\012\012 // The surrogate pair gets encoded into a 4 byte UTF sequence..\012  EXPECT_EQ(4, env_-&gt;GetStringUTFLength(s));\012 const char* chars = env_-&gt;GetStringUTFChars(s, nullptr);\012  EXPECT_STREQ(&quot;\xf0\x90\x90\x80&quot;, chars);\012  env_-&gt;ReleaseStringUTFChars(s, chars);\012\012 // .. but is stored as is in the utf-16 representation.\012 const jchar* jchars = env_-&gt;GetStringChars(s, nullptr);\012  EXPECT_EQ(0xd801, jchars[0]);\012  EXPECT_EQ(0xdc00, jchars[1]);\012  env_-&gt;ReleaseStringChars(s, jchars);\012\012 // 4 byte UTF sequence appended to an encoded surrogate pair.\012  s = env_-&gt;NewStringUTF(&quot;\xed\xa0\x81\xed\xb0\x80 \xf0\x9f\x8f\xa0&quot;);\012  EXPECT_NE(s, nullptr);\012\012 // The 4 byte sequence {0xf0, 0x9f, 0x8f, 0xa0} is converted into a surrogate\012 // pair {0xd83c, 0xdfe0}.\012  EXPECT_EQ(5, env_-&gt;GetStringLength(s));\012  jchars = env_-&gt;GetStringChars(s, nullptr);\012 // The first surrogate pair, encoded as such in the input.\012  EXPECT_EQ(0xd801, jchars[0]);\012  EXPECT_EQ(0xdc00, jchars[1]);\012 // The second surrogate pair, from the 4 byte UTF sequence in the input.\012  EXPECT_EQ(0xd83c, jchars[3]);\012  EXPECT_EQ(0xdfe0, jchars[4]);\012  env_-&gt;ReleaseStringChars(s, jchars);\012\012  EXPECT_EQ(9, env_-&gt;GetStringUTFLength(s));\012  chars = env_-&gt;GetStringUTFChars(s, nullptr);\012  EXPECT_STREQ(&quot;\xf0\x90\x90\x80 \xf0\x9f\x8f\xa0&quot;, chars);\012  env_-&gt;ReleaseStringUTFChars(s, chars);\012\012 // A string with 1, 2, 3 and 4 byte UTF sequences with spaces\012 // between them\012  s = env_-&gt;NewStringUTF(&quot;\x24 \xc2\xa2 \xe2\x82\xac \xf0\x9f\x8f\xa0&quot;);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(8, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(13, env_-&gt;GetStringUTFLength(s));\012})<SUB>1495</SUB>> ]
-"17810" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewStringUTF_Validation) {\012 // For the following tests, allocate two pages, one R/W and the next inaccessible.\012  std::string error_msg;\012 MemMap head_map = MemMap::MapAnonymous(\012 &quot;head&quot;, 2 * kPageSize, PROT_READ | PROT_WRITE, /*low_4gb=*/ false, &amp;error_msg);\012  ASSERT_TRUE(head_map.IsValid()) &lt;&lt; error_msg;\012 MemMap tail_map = head_map.RemapAtEnd(\012      head_map.Begin() + kPageSize, &quot;tail&quot;, PROT_NONE, &amp;error_msg);\012  ASSERT_TRUE(tail_map.IsValid()) &lt;&lt; error_msg;\012 char* utf_src = reinterpret_cast&lt;char*&gt;(head_map.Begin());\012\012 // Prepare for checking the `count` field.\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012  jfieldID count_fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;);\012  ASSERT_TRUE(count_fid != nullptr);\012\012 // Prepare for testing with the unchecked interface.\012 const JNINativeInterface* base_env = down_cast&lt;JNIEnvExt*&gt;(env_)-&gt;GetUncheckedFunctions();\012\012 // Start with a simple ASCII string consisting of 4095 characters 'x'.\012  memset(utf_src, 'x', kPageSize - 1u);\012  utf_src[kPageSize - 1u] = 0u;\012  jstring s = base_env-&gt;NewStringUTF(env_, utf_src);\012  ASSERT_EQ(mirror::String::GetFlaggedCount(kPageSize - 1u, /* compressible= */ true),\012            env_-&gt;GetIntField(s, count_fid));\012 const char* chars = env_-&gt;GetStringUTFChars(s, nullptr);\012 for (size_t pos = 0; pos != kPageSize - 1u; ++pos) {\012    ASSERT_EQ('x', chars[pos]) &lt;&lt; pos;\012 }\012  env_-&gt;ReleaseStringUTFChars(s, chars);\012\012 // Replace the last character with invalid character that requires continuation.\012 for (char invalid : { '\xc0', '\xe0', '\xf0' }) {\012    utf_src[kPageSize - 2u] = invalid;\012    s = base_env-&gt;NewStringUTF(env_, utf_src);\012    ASSERT_EQ(mirror::String::GetFlaggedCount(kPageSize - 1u, /* compressible= */ true),\012              env_-&gt;GetIntField(s, count_fid));\012    chars = env_-&gt;GetStringUTFChars(s, nullptr);\012 for (size_t pos = 0; pos != kPageSize - 2u; ++pos) {\012      ASSERT_EQ('x', chars[pos]) &lt;&lt; pos;\012 }\012    EXPECT_EQ('?', chars[kPageSize - 2u]);\012    env_-&gt;ReleaseStringUTFChars(s, chars);\012 }\012\012 // Replace the first two characters with a valid two-byte sequence yielding one character.\012  utf_src[0] = '\xc2';\012  utf_src[1] = '\x80';\012  s = base_env-&gt;NewStringUTF(env_, utf_src);\012  ASSERT_EQ(mirror::String::GetFlaggedCount(kPageSize - 2u, /* compressible= */ false),\012            env_-&gt;GetIntField(s, count_fid));\012 const jchar* jchars = env_-&gt;GetStringChars(s, nullptr);\012  EXPECT_EQ(jchars[0], 0x80u);\012 for (size_t pos = 1; pos != kPageSize - 3u; ++pos) {\012    ASSERT_EQ('x', jchars[pos]) &lt;&lt; pos;\012 }\012  EXPECT_EQ('?', jchars[kPageSize - 3u]);\012  env_-&gt;ReleaseStringChars(s, jchars);\012\012 // Replace the leading two-byte sequence with a two-byte sequence that decodes as ASCII (0x40).\012 // The sequence shall be replaced if string compression is used.\012  utf_src[0] = '\xc1';\012  utf_src[1] = '\x80';\012  s = base_env-&gt;NewStringUTF(env_, utf_src);\012 // Note: All invalid characters are replaced by ASCII replacement character.\012  ASSERT_EQ(mirror::String::GetFlaggedCount(kPageSize - 2u, /* compressible= */ true),\012            env_-&gt;GetIntField(s, count_fid));\012  jchars = env_-&gt;GetStringChars(s, nullptr);\012  EXPECT_EQ(mirror::kUseStringCompression ? '?' : '\x40', jchars[0]);\012 for (size_t pos = 1; pos != kPageSize - 3u; ++pos) {\012    ASSERT_EQ('x', jchars[pos]) &lt;&lt; pos;\012 }\012  EXPECT_EQ('?', jchars[kPageSize - 3u]);\012  env_-&gt;ReleaseStringChars(s, jchars);\012\012 // Replace the leading three bytes with a three-byte sequence that decodes as ASCII (0x40).\012 // The sequence shall be replaced if string compression is used.\012  utf_src[0] = '\xe0';\012  utf_src[1] = '\x81';\012  utf_src[2] = '\x80';\012  s = base_env-&gt;NewStringUTF(env_, utf_src);\012 // Note: All invalid characters are replaced by ASCII replacement character.\012  ASSERT_EQ(mirror::String::GetFlaggedCount(kPageSize - 3u, /* compressible= */ true),\012            env_-&gt;GetIntField(s, count_fid));\012  jchars = env_-&gt;GetStringChars(s, nullptr);\012  EXPECT_EQ(mirror::kUseStringCompression ? '?' : '\x40', jchars[0]);\012 for (size_t pos = 1; pos != kPageSize - 4u; ++pos) {\012    ASSERT_EQ('x', jchars[pos]) &lt;&lt; pos;\012 }\012  EXPECT_EQ('?', jchars[kPageSize - 4u]);\012  env_-&gt;ReleaseStringChars(s, jchars);\012\012 // Replace the last two characters with a valid two-byte sequence that decodes as 0.\012  utf_src[kPageSize - 3u] = '\xc0';\012  utf_src[kPageSize - 2u] = '\x80';\012  s = base_env-&gt;NewStringUTF(env_, utf_src);\012  ASSERT_EQ(mirror::String::GetFlaggedCount(kPageSize - 4u, /* compressible= */ false),\012            env_-&gt;GetIntField(s, count_fid));\012  jchars = env_-&gt;GetStringChars(s, nullptr);\012  EXPECT_EQ(mirror::kUseStringCompression ? '?' : '\x40', jchars[0]);\012 for (size_t pos = 1; pos != kPageSize - 5u; ++pos) {\012    ASSERT_EQ('x', jchars[pos]) &lt;&lt; pos;\012 }\012  EXPECT_EQ('\0', jchars[kPageSize - 5u]);\012  env_-&gt;ReleaseStringChars(s, jchars);\012},TEST_F(JniInternalTest, NewStringUTF_Validation) {\012 // For the following tests, allocate two pages, one R/W and the next inaccessible.\012  std::string error_msg;\012 MemMap head_map = MemMap::MapAnonymous(\012 &quot;head&quot;, 2 * kPageSize, PROT_READ | PROT_WRITE, /*low_4gb=*/ false, &amp;error_msg);\012  ASSERT_TRUE(head_map.IsValid()) &lt;&lt; error_msg;\012 MemMap tail_map = head_map.RemapAtEnd(\012      head_map.Begin() + kPageSize, &quot;tail&quot;, PROT_NONE, &amp;error_msg);\012  ASSERT_TRUE(tail_map.IsValid()) &lt;&lt; error_msg;\012 char* utf_src = reinterpret_cast&lt;char*&gt;(head_map.Begin());\012\012 // Prepare for checking the `count` field.\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012  jfieldID count_fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;);\012  ASSERT_TRUE(count_fid != nullptr);\012\012 // Prepare for testing with the unchecked interface.\012 const JNINativeInterface* base_env = down_cast&lt;JNIEnvExt*&gt;(env_)-&gt;GetUncheckedFunctions();\012\012 // Start with a simple ASCII string consisting of 4095 characters 'x'.\012  memset(utf_src, 'x', kPageSize - 1u);\012  utf_src[kPageSize - 1u] = 0u;\012  jstring s = base_env-&gt;NewStringUTF(env_, utf_src);\012  ASSERT_EQ(mirror::String::GetFlaggedCount(kPageSize - 1u, /* compressible= */ true),\012            env_-&gt;GetIntField(s, count_fid));\012 const char* chars = env_-&gt;GetStringUTFChars(s, nullptr);\012 for (size_t pos = 0; pos != kPageSize - 1u; ++pos) {\012    ASSERT_EQ('x', chars[pos]) &lt;&lt; pos;\012 }\012  env_-&gt;ReleaseStringUTFChars(s, chars);\012\012 // Replace the last character with invalid character that requires continuation.\012 for (char invalid : { '\xc0', '\xe0', '\xf0' }) {\012    utf_src[kPageSize - 2u] = invalid;\012    s = base_env-&gt;NewStringUTF(env_, utf_src);\012    ASSERT_EQ(mirror::String::GetFlaggedCount(kPageSize - 1u, /* compressible= */ true),\012              env_-&gt;GetIntField(s, count_fid));\012    chars = env_-&gt;GetStringUTFChars(s, nullptr);\012 for (size_t pos = 0; pos != kPageSize - 2u; ++pos) {\012      ASSERT_EQ('x', chars[pos]) &lt;&lt; pos;\012 }\012    EXPECT_EQ('?', chars[kPageSize - 2u]);\012    env_-&gt;ReleaseStringUTFChars(s, chars);\012 }\012\012 // Replace the first two characters with a valid two-byte sequence yielding one character.\012  utf_src[0] = '\xc2';\012  utf_src[1] = '\x80';\012  s = base_env-&gt;NewStringUTF(env_, utf_src);\012  ASSERT_EQ(mirror::String::GetFlaggedCount(kPageSize - 2u, /* compressible= */ false),\012            env_-&gt;GetIntField(s, count_fid));\012 const jchar* jchars = env_-&gt;GetStringChars(s, nullptr);\012  EXPECT_EQ(jchars[0], 0x80u);\012 for (size_t pos = 1; pos != kPageSize - 3u; ++pos) {\012    ASSERT_EQ('x', jchars[pos]) &lt;&lt; pos;\012 }\012  EXPECT_EQ('?', jchars[kPageSize - 3u]);\012  env_-&gt;ReleaseStringChars(s, jchars);\012\012 // Replace the leading two-byte sequence with a two-byte sequence that decodes as ASCII (0x40).\012 // The sequence shall be replaced if string compression is used.\012  utf_src[0] = '\xc1';\012  utf_src[1] = '\x80';\012  s = base_env-&gt;NewStringUTF(env_, utf_src);\012 // Note: All invalid characters are replaced by ASCII replacement character.\012  ASSERT_EQ(mirror::String::GetFlaggedCount(kPageSize - 2u, /* compressible= */ true),\012            env_-&gt;GetIntField(s, count_fid));\012  jchars = env_-&gt;GetStringChars(s, nullptr);\012  EXPECT_EQ(mirror::kUseStringCompression ? '?' : '\x40', jchars[0]);\012 for (size_t pos = 1; pos != kPageSize - 3u; ++pos) {\012    ASSERT_EQ('x', jchars[pos]) &lt;&lt; pos;\012 }\012  EXPECT_EQ('?', jchars[kPageSize - 3u]);\012  env_-&gt;ReleaseStringChars(s, jchars);\012\012 // Replace the leading three bytes with a three-byte sequence that decodes as ASCII (0x40).\012 // The sequence shall be replaced if string compression is used.\012  utf_src[0] = '\xe0';\012  utf_src[1] = '\x81';\012  utf_src[2] = '\x80';\012  s = base_env-&gt;NewStringUTF(env_, utf_src);\012 // Note: All invalid characters are replaced by ASCII replacement character.\012  ASSERT_EQ(mirror::String::GetFlaggedCount(kPageSize - 3u, /* compressible= */ true),\012            env_-&gt;GetIntField(s, count_fid));\012  jchars = env_-&gt;GetStringChars(s, nullptr);\012  EXPECT_EQ(mirror::kUseStringCompression ? '?' : '\x40', jchars[0]);\012 for (size_t pos = 1; pos != kPageSize - 4u; ++pos) {\012    ASSERT_EQ('x', jchars[pos]) &lt;&lt; pos;\012 }\012  EXPECT_EQ('?', jchars[kPageSize - 4u]);\012  env_-&gt;ReleaseStringChars(s, jchars);\012\012 // Replace the last two characters with a valid two-byte sequence that decodes as 0.\012  utf_src[kPageSize - 3u] = '\xc0';\012  utf_src[kPageSize - 2u] = '\x80';\012  s = base_env-&gt;NewStringUTF(env_, utf_src);\012  ASSERT_EQ(mirror::String::GetFlaggedCount(kPageSize - 4u, /* compressible= */ false),\012            env_-&gt;GetIntField(s, count_fid));\012  jchars = env_-&gt;GetStringChars(s, nullptr);\012  EXPECT_EQ(mirror::kUseStringCompression ? '?' : '\x40', jchars[0]);\012 for (size_t pos = 1; pos != kPageSize - 5u; ++pos) {\012    ASSERT_EQ('x', jchars[pos]) &lt;&lt; pos;\012 }\012  EXPECT_EQ('\0', jchars[kPageSize - 5u]);\012  env_-&gt;ReleaseStringChars(s, jchars);\012})<SUB>1554</SUB>> ]
-"17811" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewString) {\012  jchar chars[] = { 'h', 'i' };\012  jstring s;\012  s = env_-&gt;NewString(chars, 0);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(0, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(0, env_-&gt;GetStringUTFLength(s));\012  s = env_-&gt;NewString(chars, 2);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(2, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(2, env_-&gt;GetStringUTFLength(s));\012\012 // TODO: check some non-ASCII strings.\012},TEST_F(JniInternalTest, NewString) {\012  jchar chars[] = { 'h', 'i' };\012  jstring s;\012  s = env_-&gt;NewString(chars, 0);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(0, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(0, env_-&gt;GetStringUTFLength(s));\012  s = env_-&gt;NewString(chars, 2);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(2, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(2, env_-&gt;GetStringUTFLength(s));\012\012 // TODO: check some non-ASCII strings.\012})<SUB>1662</SUB>> ]
-"17812" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewStringNullCharsZeroLength) {\012  jstring s = env_-&gt;NewString(nullptr, 0);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(0, env_-&gt;GetStringLength(s));\012},TEST_F(JniInternalTest, NewStringNullCharsZeroLength) {\012  jstring s = env_-&gt;NewString(nullptr, 0);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(0, env_-&gt;GetStringLength(s));\012})<SUB>1677</SUB>> ]
-"17813" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewStringNullCharsNonzeroLength) {\012 CheckJniAbortCatcher jni_abort_catcher;\012  env_-&gt;NewString(nullptr, 1);\012  jni_abort_catcher.Check(&quot;chars == null &amp;&amp; char_count &gt; 0&quot;);\012},TEST_F(JniInternalTest, NewStringNullCharsNonzeroLength) {\012 CheckJniAbortCatcher jni_abort_catcher;\012  env_-&gt;NewString(nullptr, 1);\012  jni_abort_catcher.Check(&quot;chars == null &amp;&amp; char_count &gt; 0&quot;);\012})<SUB>1683</SUB>> ]
-"17814" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewStringNegativeLength) {\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  env_-&gt;NewString(nullptr, -1);\012  jni_abort_catcher.Check(&quot;char_count &lt; 0: -1&quot;);\012  env_-&gt;NewString(nullptr, std::numeric_limits&lt;jint&gt;::min());\012  jni_abort_catcher.Check(&quot;char_count &lt; 0: -2147483648&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  env_-&gt;NewString(nullptr, -1);\012  jni_abort_catcher.Check(&quot;negative jsize: -1&quot;);\012  env_-&gt;NewString(nullptr, std::numeric_limits&lt;jint&gt;::min());\012  jni_abort_catcher.Check(&quot;negative jsize: -2147483648&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012},TEST_F(JniInternalTest, NewStringNegativeLength) {\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  env_-&gt;NewString(nullptr, -1);\012  jni_abort_catcher.Check(&quot;char_count &lt; 0: -1&quot;);\012  env_-&gt;NewString(nullptr, std::numeric_limits&lt;jint&gt;::min());\012  jni_abort_catcher.Check(&quot;char_count &lt; 0: -2147483648&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  env_-&gt;NewString(nullptr, -1);\012  jni_abort_catcher.Check(&quot;negative jsize: -1&quot;);\012  env_-&gt;NewString(nullptr, std::numeric_limits&lt;jint&gt;::min());\012  jni_abort_catcher.Check(&quot;negative jsize: -2147483648&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012})<SUB>1689</SUB>> ]
-"17815" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetStringLength_GetStringUTFLength) {\012 // Already tested in the NewString/NewStringUTF tests.\012},TEST_F(JniInternalTest, GetStringLength_GetStringUTFLength) {\012 // Already tested in the NewString/NewStringUTF tests.\012})<SUB>1704</SUB>> ]
-"17816" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetStringRegion_GetStringUTFRegion) {\012  jstring s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012  ASSERT_TRUE(s != nullptr);\012\012  env_-&gt;GetStringRegion(s, -1, 0, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringRegion(s, 0, -1, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringRegion(s, 0, 10, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringRegion(s, 10, 1, nullptr);\012 ExpectException(sioobe_);\012 // Regression test against integer overflow in range check.\012  env_-&gt;GetStringRegion(s, 0x7fffffff, 0x7fffffff, nullptr);\012 ExpectException(sioobe_);\012\012  jchar chars[4] = { 'x', 'x', 'x', 'x' };\012  env_-&gt;GetStringRegion(s, 1, 2, &amp;chars[1]);\012  EXPECT_EQ('x', chars[0]);\012  EXPECT_EQ('e', chars[1]);\012  EXPECT_EQ('l', chars[2]);\012  EXPECT_EQ('x', chars[3]);\012\012 // It's okay for the buffer to be null as long as the length is 0.\012  env_-&gt;GetStringRegion(s, 2, 0, nullptr);\012 // Even if the offset is invalid...\012  env_-&gt;GetStringRegion(s, 123, 0, nullptr);\012 ExpectException(sioobe_);\012\012  env_-&gt;GetStringUTFRegion(s, -1, 0, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringUTFRegion(s, 0, -1, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringUTFRegion(s, 0, 10, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringUTFRegion(s, 10, 1, nullptr);\012 ExpectException(sioobe_);\012 // Regression test against integer overflow in range check.\012  env_-&gt;GetStringUTFRegion(s, 0x7fffffff, 0x7fffffff, nullptr);\012 ExpectException(sioobe_);\012\012 char bytes[4] = { 'x', 'x', 'x', 'x' };\012  env_-&gt;GetStringUTFRegion(s, 1, 2, &amp;bytes[1]);\012  EXPECT_EQ('x', bytes[0]);\012  EXPECT_EQ('e', bytes[1]);\012  EXPECT_EQ('l', bytes[2]);\012  EXPECT_EQ('x', bytes[3]);\012\012 // It's okay for the buffer to be null as long as the length is 0.\012  env_-&gt;GetStringUTFRegion(s, 2, 0, nullptr);\012 // Even if the offset is invalid...\012  env_-&gt;GetStringUTFRegion(s, 123, 0, nullptr);\012 ExpectException(sioobe_);\012},TEST_F(JniInternalTest, GetStringRegion_GetStringUTFRegion) {\012  jstring s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012  ASSERT_TRUE(s != nullptr);\012\012  env_-&gt;GetStringRegion(s, -1, 0, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringRegion(s, 0, -1, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringRegion(s, 0, 10, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringRegion(s, 10, 1, nullptr);\012 ExpectException(sioobe_);\012 // Regression test against integer overflow in range check.\012  env_-&gt;GetStringRegion(s, 0x7fffffff, 0x7fffffff, nullptr);\012 ExpectException(sioobe_);\012\012  jchar chars[4] = { 'x', 'x', 'x', 'x' };\012  env_-&gt;GetStringRegion(s, 1, 2, &amp;chars[1]);\012  EXPECT_EQ('x', chars[0]);\012  EXPECT_EQ('e', chars[1]);\012  EXPECT_EQ('l', chars[2]);\012  EXPECT_EQ('x', chars[3]);\012\012 // It's okay for the buffer to be null as long as the length is 0.\012  env_-&gt;GetStringRegion(s, 2, 0, nullptr);\012 // Even if the offset is invalid...\012  env_-&gt;GetStringRegion(s, 123, 0, nullptr);\012 ExpectException(sioobe_);\012\012  env_-&gt;GetStringUTFRegion(s, -1, 0, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringUTFRegion(s, 0, -1, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringUTFRegion(s, 0, 10, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringUTFRegion(s, 10, 1, nullptr);\012 ExpectException(sioobe_);\012 // Regression test against integer overflow in range check.\012  env_-&gt;GetStringUTFRegion(s, 0x7fffffff, 0x7fffffff, nullptr);\012 ExpectException(sioobe_);\012\012 char bytes[4] = { 'x', 'x', 'x', 'x' };\012  env_-&gt;GetStringUTFRegion(s, 1, 2, &amp;bytes[1]);\012  EXPECT_EQ('x', bytes[0]);\012  EXPECT_EQ('e', bytes[1]);\012  EXPECT_EQ('l', bytes[2]);\012  EXPECT_EQ('x', bytes[3]);\012\012 // It's okay for the buffer to be null as long as the length is 0.\012  env_-&gt;GetStringUTFRegion(s, 2, 0, nullptr);\012 // Even if the offset is invalid...\012  env_-&gt;GetStringUTFRegion(s, 123, 0, nullptr);\012 ExpectException(sioobe_);\012})<SUB>1708</SUB>> ]
-"17817" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetStringUTFChars_ReleaseStringUTFChars) {\012 // Passing in a null jstring is ignored normally, but caught by -Xcheck:jni.\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_EQ(env_-&gt;GetStringUTFChars(nullptr, nullptr), nullptr);\012 }\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012    EXPECT_EQ(env_-&gt;GetStringUTFChars(nullptr, nullptr), nullptr);\012    check_jni_abort_catcher.Check(&quot;GetStringUTFChars received NULL jstring&quot;);\012    EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012 }\012\012  jstring s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012  ASSERT_TRUE(s != nullptr);\012\012 const char* utf = env_-&gt;GetStringUTFChars(s, nullptr);\012  EXPECT_STREQ(&quot;hello&quot;, utf);\012  env_-&gt;ReleaseStringUTFChars(s, utf);\012\012  jboolean is_copy = JNI_FALSE;\012  utf = env_-&gt;GetStringUTFChars(s, &amp;is_copy);\012  EXPECT_EQ(JNI_TRUE, is_copy);\012  EXPECT_STREQ(&quot;hello&quot;, utf);\012  env_-&gt;ReleaseStringUTFChars(s, utf);\012},TEST_F(JniInternalTest, GetStringUTFChars_ReleaseStringUTFChars) {\012 // Passing in a null jstring is ignored normally, but caught by -Xcheck:jni.\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_EQ(env_-&gt;GetStringUTFChars(nullptr, nullptr), nullptr);\012 }\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012    EXPECT_EQ(env_-&gt;GetStringUTFChars(nullptr, nullptr), nullptr);\012    check_jni_abort_catcher.Check(&quot;GetStringUTFChars received NULL jstring&quot;);\012    EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012 }\012\012  jstring s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012  ASSERT_TRUE(s != nullptr);\012\012 const char* utf = env_-&gt;GetStringUTFChars(s, nullptr);\012  EXPECT_STREQ(&quot;hello&quot;, utf);\012  env_-&gt;ReleaseStringUTFChars(s, utf);\012\012  jboolean is_copy = JNI_FALSE;\012  utf = env_-&gt;GetStringUTFChars(s, &amp;is_copy);\012  EXPECT_EQ(JNI_TRUE, is_copy);\012  EXPECT_STREQ(&quot;hello&quot;, utf);\012  env_-&gt;ReleaseStringUTFChars(s, utf);\012})<SUB>1763</SUB>> ]
-"17818" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetStringChars_ReleaseStringChars) {\012  jstring s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012 ScopedObjectAccess soa(env_);\012 ObjPtr&lt;mirror::String&gt; s_m = soa.Decode&lt;mirror::String&gt;(s);\012  ASSERT_TRUE(s != nullptr);\012\012  jchar expected[] = { 'h', 'e', 'l', 'l', 'o' };\012 const jchar* chars = env_-&gt;GetStringChars(s, nullptr);\012  EXPECT_EQ(expected[0], chars[0]);\012  EXPECT_EQ(expected[1], chars[1]);\012  EXPECT_EQ(expected[2], chars[2]);\012  EXPECT_EQ(expected[3], chars[3]);\012  EXPECT_EQ(expected[4], chars[4]);\012  env_-&gt;ReleaseStringChars(s, chars);\012\012  jboolean is_copy = JNI_FALSE;\012  chars = env_-&gt;GetStringChars(s, &amp;is_copy);\012 if (Runtime::Current()-&gt;GetHeap()-&gt;IsMovableObject(s_m)) {\012    EXPECT_EQ(JNI_TRUE, is_copy);\012 } else {\012    EXPECT_EQ(JNI_FALSE, is_copy);\012 }\012  EXPECT_EQ(expected[0], chars[0]);\012  EXPECT_EQ(expected[1], chars[1]);\012  EXPECT_EQ(expected[2], chars[2]);\012  EXPECT_EQ(expected[3], chars[3]);\012  EXPECT_EQ(expected[4], chars[4]);\012  env_-&gt;ReleaseStringChars(s, chars);\012},TEST_F(JniInternalTest, GetStringChars_ReleaseStringChars) {\012  jstring s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012 ScopedObjectAccess soa(env_);\012 ObjPtr&lt;mirror::String&gt; s_m = soa.Decode&lt;mirror::String&gt;(s);\012  ASSERT_TRUE(s != nullptr);\012\012  jchar expected[] = { 'h', 'e', 'l', 'l', 'o' };\012 const jchar* chars = env_-&gt;GetStringChars(s, nullptr);\012  EXPECT_EQ(expected[0], chars[0]);\012  EXPECT_EQ(expected[1], chars[1]);\012  EXPECT_EQ(expected[2], chars[2]);\012  EXPECT_EQ(expected[3], chars[3]);\012  EXPECT_EQ(expected[4], chars[4]);\012  env_-&gt;ReleaseStringChars(s, chars);\012\012  jboolean is_copy = JNI_FALSE;\012  chars = env_-&gt;GetStringChars(s, &amp;is_copy);\012 if (Runtime::Current()-&gt;GetHeap()-&gt;IsMovableObject(s_m)) {\012    EXPECT_EQ(JNI_TRUE, is_copy);\012 } else {\012    EXPECT_EQ(JNI_FALSE, is_copy);\012 }\012  EXPECT_EQ(expected[0], chars[0]);\012  EXPECT_EQ(expected[1], chars[1]);\012  EXPECT_EQ(expected[2], chars[2]);\012  EXPECT_EQ(expected[3], chars[3]);\012  EXPECT_EQ(expected[4], chars[4]);\012  env_-&gt;ReleaseStringChars(s, chars);\012})<SUB>1792</SUB>> ]
-"17819" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetStringCritical_ReleaseStringCritical) {\012  jstring s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012  ASSERT_TRUE(s != nullptr);\012\012  jchar expected[] = { 'h', 'e', 'l', 'l', 'o' };\012 const jchar* chars = env_-&gt;GetStringCritical(s, nullptr);\012  EXPECT_EQ(expected[0], chars[0]);\012  EXPECT_EQ(expected[1], chars[1]);\012  EXPECT_EQ(expected[2], chars[2]);\012  EXPECT_EQ(expected[3], chars[3]);\012  EXPECT_EQ(expected[4], chars[4]);\012  env_-&gt;ReleaseStringCritical(s, chars);\012\012  jboolean is_copy = JNI_TRUE;\012  chars = env_-&gt;GetStringCritical(s, &amp;is_copy);\012 if (mirror::kUseStringCompression) {\012 // is_copy has to be JNI_TRUE because &quot;hello&quot; is all-ASCII\012    EXPECT_EQ(JNI_TRUE, is_copy);\012 } else {\012    EXPECT_EQ(JNI_FALSE, is_copy);\012 }\012  EXPECT_EQ(expected[0], chars[0]);\012  EXPECT_EQ(expected[1], chars[1]);\012  EXPECT_EQ(expected[2], chars[2]);\012  EXPECT_EQ(expected[3], chars[3]);\012  EXPECT_EQ(expected[4], chars[4]);\012  env_-&gt;ReleaseStringCritical(s, chars);\012\012 if (mirror::kUseStringCompression) {\012 // is_copy has to be JNI_FALSE because &quot;\xed\xa0\x81\xed\xb0\x80&quot; is incompressible\012    jboolean is_copy_16 = JNI_TRUE;\012    jstring s_16 = env_-&gt;NewStringUTF(&quot;\xed\xa0\x81\xed\xb0\x80&quot;);\012    chars = env_-&gt;GetStringCritical(s_16, &amp;is_copy_16);\012    EXPECT_EQ(2, env_-&gt;GetStringLength(s_16));\012    EXPECT_EQ(4, env_-&gt;GetStringUTFLength(s_16));\012    env_-&gt;ReleaseStringCritical(s_16, chars);\012 }\012},TEST_F(JniInternalTest, GetStringCritical_ReleaseStringCritical) {\012  jstring s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012  ASSERT_TRUE(s != nullptr);\012\012  jchar expected[] = { 'h', 'e', 'l', 'l', 'o' };\012 const jchar* chars = env_-&gt;GetStringCritical(s, nullptr);\012  EXPECT_EQ(expected[0], chars[0]);\012  EXPECT_EQ(expected[1], chars[1]);\012  EXPECT_EQ(expected[2], chars[2]);\012  EXPECT_EQ(expected[3], chars[3]);\012  EXPECT_EQ(expected[4], chars[4]);\012  env_-&gt;ReleaseStringCritical(s, chars);\012\012  jboolean is_copy = JNI_TRUE;\012  chars = env_-&gt;GetStringCritical(s, &amp;is_copy);\012 if (mirror::kUseStringCompression) {\012 // is_copy has to be JNI_TRUE because &quot;hello&quot; is all-ASCII\012    EXPECT_EQ(JNI_TRUE, is_copy);\012 } else {\012    EXPECT_EQ(JNI_FALSE, is_copy);\012 }\012  EXPECT_EQ(expected[0], chars[0]);\012  EXPECT_EQ(expected[1], chars[1]);\012  EXPECT_EQ(expected[2], chars[2]);\012  EXPECT_EQ(expected[3], chars[3]);\012  EXPECT_EQ(expected[4], chars[4]);\012  env_-&gt;ReleaseStringCritical(s, chars);\012\012 if (mirror::kUseStringCompression) {\012 // is_copy has to be JNI_FALSE because &quot;\xed\xa0\x81\xed\xb0\x80&quot; is incompressible\012    jboolean is_copy_16 = JNI_TRUE;\012    jstring s_16 = env_-&gt;NewStringUTF(&quot;\xed\xa0\x81\xed\xb0\x80&quot;);\012    chars = env_-&gt;GetStringCritical(s_16, &amp;is_copy_16);\012    EXPECT_EQ(2, env_-&gt;GetStringLength(s_16));\012    EXPECT_EQ(4, env_-&gt;GetStringUTFLength(s_16));\012    env_-&gt;ReleaseStringCritical(s_16, chars);\012 }\012})<SUB>1822</SUB>> ]
-"17820" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetObjectArrayElement_SetObjectArrayElement) {\012  jclass java_lang_Class = env_-&gt;FindClass(&quot;java/lang/Class&quot;);\012  ASSERT_TRUE(java_lang_Class != nullptr);\012\012  jobjectArray array = env_-&gt;NewObjectArray(1, java_lang_Class, nullptr);\012  EXPECT_NE(array, nullptr);\012  EXPECT_EQ(env_-&gt;GetObjectArrayElement(array, 0), nullptr);\012  env_-&gt;SetObjectArrayElement(array, 0, java_lang_Class);\012  EXPECT_TRUE(env_-&gt;IsSameObject(env_-&gt;GetObjectArrayElement(array, 0), java_lang_Class));\012\012 // ArrayIndexOutOfBounds for negative index.\012  env_-&gt;SetObjectArrayElement(array, -1, java_lang_Class);\012 ExpectException(aioobe_);\012\012 // ArrayIndexOutOfBounds for too-large index.\012  env_-&gt;SetObjectArrayElement(array, 1, java_lang_Class);\012 ExpectException(aioobe_);\012\012 // ArrayStoreException thrown for bad types.\012  env_-&gt;SetObjectArrayElement(array, 0, env_-&gt;NewStringUTF(&quot;not a jclass!&quot;));\012 ExpectException(ase_);\012\012 // Null as array should fail.\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(nullptr, env_-&gt;GetObjectArrayElement(nullptr, 0));\012  jni_abort_catcher.Check(&quot;java_array == null&quot;);\012  env_-&gt;SetObjectArrayElement(nullptr, 0, nullptr);\012  jni_abort_catcher.Check(&quot;java_array == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(nullptr, env_-&gt;GetObjectArrayElement(nullptr, 0));\012  jni_abort_catcher.Check(&quot;jarray was NULL&quot;);\012  env_-&gt;SetObjectArrayElement(nullptr, 0, nullptr);\012  jni_abort_catcher.Check(&quot;jarray was NULL&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012},TEST_F(JniInternalTest, GetObjectArrayElement_SetObjectArrayElement) {\012  jclass java_lang_Class = env_-&gt;FindClass(&quot;java/lang/Class&quot;);\012  ASSERT_TRUE(java_lang_Class != nullptr);\012\012  jobjectArray array = env_-&gt;NewObjectArray(1, java_lang_Class, nullptr);\012  EXPECT_NE(array, nullptr);\012  EXPECT_EQ(env_-&gt;GetObjectArrayElement(array, 0), nullptr);\012  env_-&gt;SetObjectArrayElement(array, 0, java_lang_Class);\012  EXPECT_TRUE(env_-&gt;IsSameObject(env_-&gt;GetObjectArrayElement(array, 0), java_lang_Class));\012\012 // ArrayIndexOutOfBounds for negative index.\012  env_-&gt;SetObjectArrayElement(array, -1, java_lang_Class);\012 ExpectException(aioobe_);\012\012 // ArrayIndexOutOfBounds for too-large index.\012  env_-&gt;SetObjectArrayElement(array, 1, java_lang_Class);\012 ExpectException(aioobe_);\012\012 // ArrayStoreException thrown for bad types.\012  env_-&gt;SetObjectArrayElement(array, 0, env_-&gt;NewStringUTF(&quot;not a jclass!&quot;));\012 ExpectException(ase_);\012\012 // Null as array should fail.\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(nullptr, env_-&gt;GetObjectArrayElement(nullptr, 0));\012  jni_abort_catcher.Check(&quot;java_array == null&quot;);\012  env_-&gt;SetObjectArrayElement(nullptr, 0, nullptr);\012  jni_abort_catcher.Check(&quot;java_array == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(nullptr, env_-&gt;GetObjectArrayElement(nullptr, 0));\012  jni_abort_catcher.Check(&quot;jarray was NULL&quot;);\012  env_-&gt;SetObjectArrayElement(nullptr, 0, nullptr);\012  jni_abort_catcher.Check(&quot;jarray was NULL&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012})<SUB>1861</SUB>> ]
-"17821" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetPrimitiveField_SetPrimitiveField) {\012  TEST_PRIMITIVE_FIELD_FOR_CLASS(&quot;AllFields&quot;);\012},TEST_F(JniInternalTest, GetPrimitiveField_SetPrimitiveField) {\012  TEST_PRIMITIVE_FIELD_FOR_CLASS(&quot;AllFields&quot;);\012})<SUB>1992</SUB>> ]
-"17822" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetPrimitiveField_SetPrimitiveField_Subclass) {\012  TEST_PRIMITIVE_FIELD_FOR_CLASS(&quot;AllFieldsSub&quot;);\012},TEST_F(JniInternalTest, GetPrimitiveField_SetPrimitiveField_Subclass) {\012  TEST_PRIMITIVE_FIELD_FOR_CLASS(&quot;AllFieldsSub&quot;);\012})<SUB>1996</SUB>> ]
-"17823" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetField_SetField_unrelated) {\012 Thread::Current()-&gt;TransitionFromSuspendedToRunnable();\012 LoadDex(&quot;AllFields&quot;);\012 bool started = runtime_-&gt;Start();\012  ASSERT_TRUE(started);\012  jclass c = env_-&gt;FindClass(&quot;AllFields&quot;);\012  ASSERT_NE(c, nullptr);\012  jclass uc = env_-&gt;FindClass(&quot;AllFieldsUnrelated&quot;);\012  ASSERT_NE(uc, nullptr);\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(true);\012  EXPECT_UNRELATED_FIELD_FAILURE(Boolean, &quot;sZ&quot;, &quot;Z&quot;, JNI_TRUE);\012  EXPECT_UNRELATED_FIELD_FAILURE(Byte, &quot;sB&quot;, &quot;B&quot;, 1);\012  EXPECT_UNRELATED_FIELD_FAILURE(Char, &quot;sC&quot;, &quot;C&quot;, 'a');\012  EXPECT_UNRELATED_FIELD_FAILURE(Double, &quot;sD&quot;, &quot;D&quot;, 1.0);\012  EXPECT_UNRELATED_FIELD_FAILURE(Float, &quot;sF&quot;, &quot;F&quot;, 1.0);\012  EXPECT_UNRELATED_FIELD_FAILURE(Int, &quot;sI&quot;, &quot;I&quot;, 1);\012  EXPECT_UNRELATED_FIELD_FAILURE(Long, &quot;sJ&quot;, &quot;J&quot;, 1);\012  EXPECT_UNRELATED_FIELD_FAILURE(Short, &quot;sS&quot;, &quot;S&quot;, 1);\012  EXPECT_UNRELATED_FIELD_FAILURE(Object, &quot;sObject&quot;, &quot;Ljava/lang/Object;&quot;, c);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012},TEST_F(JniInternalTest, GetField_SetField_unrelated) {\012 Thread::Current()-&gt;TransitionFromSuspendedToRunnable();\012 LoadDex(&quot;AllFields&quot;);\012 bool started = runtime_-&gt;Start();\012  ASSERT_TRUE(started);\012  jclass c = env_-&gt;FindClass(&quot;AllFields&quot;);\012  ASSERT_NE(c, nullptr);\012  jclass uc = env_-&gt;FindClass(&quot;AllFieldsUnrelated&quot;);\012  ASSERT_NE(uc, nullptr);\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(true);\012  EXPECT_UNRELATED_FIELD_FAILURE(Boolean, &quot;sZ&quot;, &quot;Z&quot;, JNI_TRUE);\012  EXPECT_UNRELATED_FIELD_FAILURE(Byte, &quot;sB&quot;, &quot;B&quot;, 1);\012  EXPECT_UNRELATED_FIELD_FAILURE(Char, &quot;sC&quot;, &quot;C&quot;, 'a');\012  EXPECT_UNRELATED_FIELD_FAILURE(Double, &quot;sD&quot;, &quot;D&quot;, 1.0);\012  EXPECT_UNRELATED_FIELD_FAILURE(Float, &quot;sF&quot;, &quot;F&quot;, 1.0);\012  EXPECT_UNRELATED_FIELD_FAILURE(Int, &quot;sI&quot;, &quot;I&quot;, 1);\012  EXPECT_UNRELATED_FIELD_FAILURE(Long, &quot;sJ&quot;, &quot;J&quot;, 1);\012  EXPECT_UNRELATED_FIELD_FAILURE(Short, &quot;sS&quot;, &quot;S&quot;, 1);\012  EXPECT_UNRELATED_FIELD_FAILURE(Object, &quot;sObject&quot;, &quot;Ljava/lang/Object;&quot;, c);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012})<SUB>2011</SUB>> ]
-"17824" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetObjectField_SetObjectField) {\012  TEST_OBJECT_FIELD_FOR_CLASS(&quot;AllFields&quot;);\012},TEST_F(JniInternalTest, GetObjectField_SetObjectField) {\012  TEST_OBJECT_FIELD_FOR_CLASS(&quot;AllFields&quot;);\012})<SUB>2065</SUB>> ]
-"17825" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetObjectField_SetObjectField_subclass) {\012  TEST_OBJECT_FIELD_FOR_CLASS(&quot;AllFieldsSub&quot;);\012},TEST_F(JniInternalTest, GetObjectField_SetObjectField_subclass) {\012  TEST_OBJECT_FIELD_FOR_CLASS(&quot;AllFieldsSub&quot;);\012})<SUB>2069</SUB>> ]
-"17826" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewLocalRef_nullptr) {\012  EXPECT_EQ(env_-&gt;NewLocalRef(nullptr), nullptr);\012},TEST_F(JniInternalTest, NewLocalRef_nullptr) {\012  EXPECT_EQ(env_-&gt;NewLocalRef(nullptr), nullptr);\012})<SUB>2073</SUB>> ]
-"17827" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewLocalRef) {\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  jobject o = env_-&gt;NewLocalRef(s);\012  EXPECT_NE(o, nullptr);\012  EXPECT_NE(o, s);\012\012  EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(o));\012},TEST_F(JniInternalTest, NewLocalRef) {\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  jobject o = env_-&gt;NewLocalRef(s);\012  EXPECT_NE(o, nullptr);\012  EXPECT_NE(o, s);\012\012  EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(o));\012})<SUB>2077</SUB>> ]
-"17828" [label = <(UNKNOWN,TEST_F(JniInternalTest, DeleteLocalRef_nullptr) {\012  env_-&gt;DeleteLocalRef(nullptr);\012},TEST_F(JniInternalTest, DeleteLocalRef_nullptr) {\012  env_-&gt;DeleteLocalRef(nullptr);\012})<SUB>2087</SUB>> ]
-"17829" [label = <(UNKNOWN,TEST_F(JniInternalTest, DeleteLocalRef) {\012 // This tests leads to warnings and errors in the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  env_-&gt;DeleteLocalRef(s);\012\012 // Currently, deleting an already-deleted reference is just a CheckJNI warning.\012 {\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      env_-&gt;DeleteLocalRef(s);\012 }\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012    env_-&gt;DeleteLocalRef(s);\012    std::string expected(StringPrintf(&quot;use of deleted local reference %p&quot;, s));\012    check_jni_abort_catcher.Check(expected.c_str());\012    EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012 }\012\012  s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  jobject o = env_-&gt;NewLocalRef(s);\012  ASSERT_NE(o, nullptr);\012\012  env_-&gt;DeleteLocalRef(s);\012  env_-&gt;DeleteLocalRef(o);\012},TEST_F(JniInternalTest, DeleteLocalRef) {\012 // This tests leads to warnings and errors in the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  env_-&gt;DeleteLocalRef(s);\012\012 // Currently, deleting an already-deleted reference is just a CheckJNI warning.\012 {\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      env_-&gt;DeleteLocalRef(s);\012 }\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012    env_-&gt;DeleteLocalRef(s);\012    std::string expected(StringPrintf(&quot;use of deleted local reference %p&quot;, s));\012    check_jni_abort_catcher.Check(expected.c_str());\012    EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012 }\012\012  s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  jobject o = env_-&gt;NewLocalRef(s);\012  ASSERT_NE(o, nullptr);\012\012  env_-&gt;DeleteLocalRef(s);\012  env_-&gt;DeleteLocalRef(o);\012})<SUB>2091</SUB>> ]
-"17830" [label = <(UNKNOWN,TEST_F(JniInternalTest, PushLocalFrame_10395422) {\012 // The JNI specification is ambiguous about whether the given capacity is to be interpreted as a\012 // maximum or as a minimum, but it seems like it's supposed to be a minimum, and that's how\012 // Android historically treated it, and it's how the RI treats it. It's also the more useful\012 // interpretation!\012  ASSERT_EQ(JNI_OK, env_-&gt;PushLocalFrame(0));\012  env_-&gt;PopLocalFrame(nullptr);\012\012 // The following two tests will print errors to the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012 // Negative capacities are not allowed.\012  ASSERT_EQ(JNI_ERR, env_-&gt;PushLocalFrame(-1));\012},TEST_F(JniInternalTest, PushLocalFrame_10395422) {\012 // The JNI specification is ambiguous about whether the given capacity is to be interpreted as a\012 // maximum or as a minimum, but it seems like it's supposed to be a minimum, and that's how\012 // Android historically treated it, and it's how the RI treats it. It's also the more useful\012 // interpretation!\012  ASSERT_EQ(JNI_OK, env_-&gt;PushLocalFrame(0));\012  env_-&gt;PopLocalFrame(nullptr);\012\012 // The following two tests will print errors to the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012 // Negative capacities are not allowed.\012  ASSERT_EQ(JNI_ERR, env_-&gt;PushLocalFrame(-1));\012})<SUB>2123</SUB>> ]
-"17831" [label = <(UNKNOWN,TEST_F(JniInternalTest, PushLocalFrame_PopLocalFrame) {\012 // This tests leads to errors in the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012  jobject original = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(original, nullptr);\012\012  jobject outer;\012  jobject inner1, inner2;\012 ScopedObjectAccess soa(env_);\012 {\012    ASSERT_EQ(JNI_OK, env_-&gt;PushLocalFrame(4));\012    outer = env_-&gt;NewLocalRef(original);\012\012 {\012      ASSERT_EQ(JNI_OK, env_-&gt;PushLocalFrame(4));\012      inner1 = env_-&gt;NewLocalRef(outer);\012      inner2 = env_-&gt;NewStringUTF(&quot;survivor&quot;);\012      EXPECT_NE(env_-&gt;PopLocalFrame(inner2), nullptr);\012 }\012\012    EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(original));\012    EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(outer));\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(inner1));\012      check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012 }\012\012 // Our local reference for the survivor is invalid because the survivor\012 // gets a new local reference...\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(inner2));\012      check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012 }\012\012    EXPECT_EQ(env_-&gt;PopLocalFrame(nullptr), nullptr);\012 }\012  EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(original));\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(outer));\012  check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012  EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(inner1));\012  check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012  EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(inner2));\012  check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012},TEST_F(JniInternalTest, PushLocalFrame_PopLocalFrame) {\012 // This tests leads to errors in the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012  jobject original = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(original, nullptr);\012\012  jobject outer;\012  jobject inner1, inner2;\012 ScopedObjectAccess soa(env_);\012 {\012    ASSERT_EQ(JNI_OK, env_-&gt;PushLocalFrame(4));\012    outer = env_-&gt;NewLocalRef(original);\012\012 {\012      ASSERT_EQ(JNI_OK, env_-&gt;PushLocalFrame(4));\012      inner1 = env_-&gt;NewLocalRef(outer);\012      inner2 = env_-&gt;NewStringUTF(&quot;survivor&quot;);\012      EXPECT_NE(env_-&gt;PopLocalFrame(inner2), nullptr);\012 }\012\012    EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(original));\012    EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(outer));\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(inner1));\012      check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012 }\012\012 // Our local reference for the survivor is invalid because the survivor\012 // gets a new local reference...\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(inner2));\012      check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012 }\012\012    EXPECT_EQ(env_-&gt;PopLocalFrame(nullptr), nullptr);\012 }\012  EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(original));\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(outer));\012  check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012  EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(inner1));\012  check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012  EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(inner2));\012  check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012})<SUB>2138</SUB>> ]
-"17832" [label = <(UNKNOWN,TEST_F(JniInternalTest, PushLocalFrame_LimitAndOverflow) {\012 // Try a very large value that should fail.\012  ASSERT_NE(JNI_OK, env_-&gt;PushLocalFrame(std::numeric_limits&lt;jint&gt;::max()));\012  ASSERT_TRUE(env_-&gt;ExceptionCheck());\012  env_-&gt;ExceptionClear();\012\012 // On 32-bit, also check for some overflow conditions.\012#ifndef __LP64__\012  ASSERT_EQ(JNI_OK, env_-&gt;PushLocalFrame(10));\012  ASSERT_NE(JNI_OK, env_-&gt;PushLocalFrame(std::numeric_limits&lt;jint&gt;::max() - 10));\012  ASSERT_TRUE(env_-&gt;ExceptionCheck());\012  env_-&gt;ExceptionClear();\012  EXPECT_EQ(env_-&gt;PopLocalFrame(nullptr), nullptr);\012#endif\012},TEST_F(JniInternalTest, PushLocalFrame_LimitAndOverflow) {\012 // Try a very large value that should fail.\012  ASSERT_NE(JNI_OK, env_-&gt;PushLocalFrame(std::numeric_limits&lt;jint&gt;::max()));\012  ASSERT_TRUE(env_-&gt;ExceptionCheck());\012  env_-&gt;ExceptionClear();\012\012 // On 32-bit, also check for some overflow conditions.\012#ifndef __LP64__\012  ASSERT_EQ(JNI_OK, env_-&gt;PushLocalFrame(10));\012  ASSERT_NE(JNI_OK, env_-&gt;PushLocalFrame(std::numeric_limits&lt;jint&gt;::max() - 10));\012  ASSERT_TRUE(env_-&gt;ExceptionCheck());\012  env_-&gt;ExceptionClear();\012  EXPECT_EQ(env_-&gt;PopLocalFrame(nullptr), nullptr);\012#endif\012})<SUB>2187</SUB>> ]
-"17833" [label = <(UNKNOWN,TEST_F(JniInternalTest, PushLocalFrame_b62223672) {\012 // The 512 entry limit has been lifted, try a larger value.\012  ASSERT_EQ(JNI_OK, env_-&gt;PushLocalFrame(1024));\012  EXPECT_EQ(env_-&gt;PopLocalFrame(nullptr), nullptr);\012},TEST_F(JniInternalTest, PushLocalFrame_b62223672) {\012 // The 512 entry limit has been lifted, try a larger value.\012  ASSERT_EQ(JNI_OK, env_-&gt;PushLocalFrame(1024));\012  EXPECT_EQ(env_-&gt;PopLocalFrame(nullptr), nullptr);\012})<SUB>2203</SUB>> ]
-"17834" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewGlobalRef_nullptr) {\012  EXPECT_EQ(env_-&gt;NewGlobalRef(nullptr), nullptr);\012},TEST_F(JniInternalTest, NewGlobalRef_nullptr) {\012  EXPECT_EQ(env_-&gt;NewGlobalRef(nullptr), nullptr);\012})<SUB>2209</SUB>> ]
-"17835" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewGlobalRef) {\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  jobject o = env_-&gt;NewGlobalRef(s);\012  EXPECT_NE(o, nullptr);\012  EXPECT_NE(o, s);\012\012  EXPECT_EQ(env_-&gt;GetObjectRefType(o), JNIGlobalRefType);\012},TEST_F(JniInternalTest, NewGlobalRef) {\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  jobject o = env_-&gt;NewGlobalRef(s);\012  EXPECT_NE(o, nullptr);\012  EXPECT_NE(o, s);\012\012  EXPECT_EQ(env_-&gt;GetObjectRefType(o), JNIGlobalRefType);\012})<SUB>2213</SUB>> ]
-"17836" [label = <(UNKNOWN,TEST_F(JniInternalTest, DeleteGlobalRef_nullptr) {\012  env_-&gt;DeleteGlobalRef(nullptr);\012},TEST_F(JniInternalTest, DeleteGlobalRef_nullptr) {\012  env_-&gt;DeleteGlobalRef(nullptr);\012})<SUB>2223</SUB>> ]
-"17837" [label = <(UNKNOWN,TEST_F(JniInternalTest, DeleteGlobalRef) {\012 // This tests leads to warnings and errors in the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012\012  jobject o = env_-&gt;NewGlobalRef(s);\012  ASSERT_NE(o, nullptr);\012  env_-&gt;DeleteGlobalRef(o);\012\012 // Currently, deleting an already-deleted reference is just a CheckJNI warning.\012 {\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      env_-&gt;DeleteGlobalRef(o);\012 }\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012    env_-&gt;DeleteGlobalRef(o);\012    std::string expected(StringPrintf(&quot;use of deleted global reference %p&quot;, o));\012    check_jni_abort_catcher.Check(expected.c_str());\012    EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012 }\012\012  jobject o1 = env_-&gt;NewGlobalRef(s);\012  ASSERT_NE(o1, nullptr);\012  jobject o2 = env_-&gt;NewGlobalRef(s);\012  ASSERT_NE(o2, nullptr);\012\012  env_-&gt;DeleteGlobalRef(o1);\012  env_-&gt;DeleteGlobalRef(o2);\012},TEST_F(JniInternalTest, DeleteGlobalRef) {\012 // This tests leads to warnings and errors in the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012\012  jobject o = env_-&gt;NewGlobalRef(s);\012  ASSERT_NE(o, nullptr);\012  env_-&gt;DeleteGlobalRef(o);\012\012 // Currently, deleting an already-deleted reference is just a CheckJNI warning.\012 {\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      env_-&gt;DeleteGlobalRef(o);\012 }\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012    env_-&gt;DeleteGlobalRef(o);\012    std::string expected(StringPrintf(&quot;use of deleted global reference %p&quot;, o));\012    check_jni_abort_catcher.Check(expected.c_str());\012    EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012 }\012\012  jobject o1 = env_-&gt;NewGlobalRef(s);\012  ASSERT_NE(o1, nullptr);\012  jobject o2 = env_-&gt;NewGlobalRef(s);\012  ASSERT_NE(o2, nullptr);\012\012  env_-&gt;DeleteGlobalRef(o1);\012  env_-&gt;DeleteGlobalRef(o2);\012})<SUB>2227</SUB>> ]
-"17838" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewWeakGlobalRef_nullptr) {\012  EXPECT_EQ(env_-&gt;NewWeakGlobalRef(nullptr), nullptr);\012},TEST_F(JniInternalTest, NewWeakGlobalRef_nullptr) {\012  EXPECT_EQ(env_-&gt;NewWeakGlobalRef(nullptr), nullptr);\012})<SUB>2262</SUB>> ]
-"17839" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewWeakGlobalRef) {\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  jobject o = env_-&gt;NewWeakGlobalRef(s);\012  EXPECT_NE(o, nullptr);\012  EXPECT_NE(o, s);\012\012  EXPECT_EQ(env_-&gt;GetObjectRefType(o), JNIWeakGlobalRefType);\012},TEST_F(JniInternalTest, NewWeakGlobalRef) {\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  jobject o = env_-&gt;NewWeakGlobalRef(s);\012  EXPECT_NE(o, nullptr);\012  EXPECT_NE(o, s);\012\012  EXPECT_EQ(env_-&gt;GetObjectRefType(o), JNIWeakGlobalRefType);\012})<SUB>2266</SUB>> ]
-"17840" [label = <(UNKNOWN,TEST_F(JniInternalTest, DeleteWeakGlobalRef_nullptr) {\012  env_-&gt;DeleteWeakGlobalRef(nullptr);\012},TEST_F(JniInternalTest, DeleteWeakGlobalRef_nullptr) {\012  env_-&gt;DeleteWeakGlobalRef(nullptr);\012})<SUB>2276</SUB>> ]
-"17841" [label = <(UNKNOWN,TEST_F(JniInternalTest, DeleteWeakGlobalRef) {\012 // This tests leads to warnings and errors in the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012\012  jobject o = env_-&gt;NewWeakGlobalRef(s);\012  ASSERT_NE(o, nullptr);\012  env_-&gt;DeleteWeakGlobalRef(o);\012\012 // Currently, deleting an already-deleted reference is just a CheckJNI warning.\012 {\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      env_-&gt;DeleteWeakGlobalRef(o);\012 }\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012    env_-&gt;DeleteWeakGlobalRef(o);\012    std::string expected(StringPrintf(&quot;use of deleted weak global reference %p&quot;, o));\012    check_jni_abort_catcher.Check(expected.c_str());\012    EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012 }\012\012  jobject o1 = env_-&gt;NewWeakGlobalRef(s);\012  ASSERT_NE(o1, nullptr);\012  jobject o2 = env_-&gt;NewWeakGlobalRef(s);\012  ASSERT_NE(o2, nullptr);\012\012  env_-&gt;DeleteWeakGlobalRef(o1);\012  env_-&gt;DeleteWeakGlobalRef(o2);\012},TEST_F(JniInternalTest, DeleteWeakGlobalRef) {\012 // This tests leads to warnings and errors in the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012\012  jobject o = env_-&gt;NewWeakGlobalRef(s);\012  ASSERT_NE(o, nullptr);\012  env_-&gt;DeleteWeakGlobalRef(o);\012\012 // Currently, deleting an already-deleted reference is just a CheckJNI warning.\012 {\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      env_-&gt;DeleteWeakGlobalRef(o);\012 }\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012    env_-&gt;DeleteWeakGlobalRef(o);\012    std::string expected(StringPrintf(&quot;use of deleted weak global reference %p&quot;, o));\012    check_jni_abort_catcher.Check(expected.c_str());\012    EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012 }\012\012  jobject o1 = env_-&gt;NewWeakGlobalRef(s);\012  ASSERT_NE(o1, nullptr);\012  jobject o2 = env_-&gt;NewWeakGlobalRef(s);\012  ASSERT_NE(o2, nullptr);\012\012  env_-&gt;DeleteWeakGlobalRef(o1);\012  env_-&gt;DeleteWeakGlobalRef(o2);\012})<SUB>2280</SUB>> ]
-"17842" [label = <(UNKNOWN,TEST_F(JniInternalTest, ExceptionDescribe) {\012 // This checks how ExceptionDescribe handles call without exception.\012  env_-&gt;ExceptionClear();\012  env_-&gt;ExceptionDescribe();\012},TEST_F(JniInternalTest, ExceptionDescribe) {\012 // This checks how ExceptionDescribe handles call without exception.\012  env_-&gt;ExceptionClear();\012  env_-&gt;ExceptionDescribe();\012})<SUB>2315</SUB>> ]
-"17843" [label = <(UNKNOWN,TEST_F(JniInternalTest, Throw) {\012  jclass exception_class = env_-&gt;FindClass(&quot;java/lang/RuntimeException&quot;);\012  ASSERT_TRUE(exception_class != nullptr);\012  jthrowable exception = reinterpret_cast&lt;jthrowable&gt;(env_-&gt;AllocObject(exception_class));\012  ASSERT_TRUE(exception != nullptr);\012\012  EXPECT_EQ(JNI_OK, env_-&gt;Throw(exception));\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  jthrowable thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsSameObject(exception, thrown_exception));\012\012 // Bad argument.\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(JNI_ERR, env_-&gt;Throw(nullptr));\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  EXPECT_EQ(JNI_ERR, env_-&gt;Throw(nullptr));\012  check_jni_abort_catcher.Check(&quot;Throw received NULL jthrowable&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012},TEST_F(JniInternalTest, Throw) {\012  jclass exception_class = env_-&gt;FindClass(&quot;java/lang/RuntimeException&quot;);\012  ASSERT_TRUE(exception_class != nullptr);\012  jthrowable exception = reinterpret_cast&lt;jthrowable&gt;(env_-&gt;AllocObject(exception_class));\012  ASSERT_TRUE(exception != nullptr);\012\012  EXPECT_EQ(JNI_OK, env_-&gt;Throw(exception));\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  jthrowable thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsSameObject(exception, thrown_exception));\012\012 // Bad argument.\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(JNI_ERR, env_-&gt;Throw(nullptr));\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  EXPECT_EQ(JNI_ERR, env_-&gt;Throw(nullptr));\012  check_jni_abort_catcher.Check(&quot;Throw received NULL jthrowable&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012})<SUB>2321</SUB>> ]
-"17844" [label = <(UNKNOWN,TEST_F(JniInternalTest, ThrowNew) {\012  jclass exception_class = env_-&gt;FindClass(&quot;java/lang/RuntimeException&quot;);\012  ASSERT_TRUE(exception_class != nullptr);\012\012  jthrowable thrown_exception;\012\012  EXPECT_EQ(JNI_OK, env_-&gt;ThrowNew(exception_class, &quot;hello world&quot;));\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(thrown_exception, exception_class));\012\012  EXPECT_EQ(JNI_OK, env_-&gt;ThrowNew(exception_class, nullptr));\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(thrown_exception, exception_class));\012\012 // Bad argument.\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  EXPECT_EQ(JNI_ERR, env_-&gt;ThrowNew(nullptr, nullptr));\012  check_jni_abort_catcher.Check(&quot;c == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(JNI_ERR, env_-&gt;ThrowNew(nullptr, nullptr));\012  check_jni_abort_catcher.Check(&quot;ThrowNew received NULL jclass&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012},TEST_F(JniInternalTest, ThrowNew) {\012  jclass exception_class = env_-&gt;FindClass(&quot;java/lang/RuntimeException&quot;);\012  ASSERT_TRUE(exception_class != nullptr);\012\012  jthrowable thrown_exception;\012\012  EXPECT_EQ(JNI_OK, env_-&gt;ThrowNew(exception_class, &quot;hello world&quot;));\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(thrown_exception, exception_class));\012\012  EXPECT_EQ(JNI_OK, env_-&gt;ThrowNew(exception_class, nullptr));\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(thrown_exception, exception_class));\012\012 // Bad argument.\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  EXPECT_EQ(JNI_ERR, env_-&gt;ThrowNew(nullptr, nullptr));\012  check_jni_abort_catcher.Check(&quot;c == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(JNI_ERR, env_-&gt;ThrowNew(nullptr, nullptr));\012  check_jni_abort_catcher.Check(&quot;ThrowNew received NULL jclass&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012})<SUB>2343</SUB>> ]
-"17845" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewDirectBuffer_GetDirectBufferAddress_GetDirectBufferCapacity) {\012 // Start runtime.\012 Thread* self = Thread::Current();\012  self-&gt;TransitionFromSuspendedToRunnable();\012 MakeInterpreted(class_linker_-&gt;FindSystemClass(self, &quot;Ljava/lang/Class;&quot;));\012 MakeInterpreted(class_linker_-&gt;FindSystemClass(self, &quot;Ljava/lang/Object;&quot;));\012 MakeInterpreted(class_linker_-&gt;FindSystemClass(self, &quot;Ljava/nio/DirectByteBuffer;&quot;));\012 MakeInterpreted(class_linker_-&gt;FindSystemClass(self, &quot;Ljava/nio/Bits;&quot;));\012 MakeInterpreted(class_linker_-&gt;FindSystemClass(self, &quot;Ljava/nio/MappedByteBuffer;&quot;));\012 MakeInterpreted(class_linker_-&gt;FindSystemClass(self, &quot;Ljava/nio/ByteBuffer;&quot;));\012 MakeInterpreted(class_linker_-&gt;FindSystemClass(self, &quot;Ljava/nio/Buffer;&quot;));\012 // TODO: we only load a dex file here as starting the runtime relies upon it.\012 const char* class_name = &quot;StaticLeafMethods&quot;;\012 LoadDex(class_name);\012 bool started = runtime_-&gt;Start();\012  ASSERT_TRUE(started);\012\012  jclass buffer_class = env_-&gt;FindClass(&quot;java/nio/Buffer&quot;);\012  ASSERT_NE(buffer_class, nullptr);\012\012 char bytes[1024];\012  jobject buffer = env_-&gt;NewDirectByteBuffer(bytes, sizeof(bytes));\012  ASSERT_NE(buffer, nullptr);\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(buffer, buffer_class));\012  ASSERT_EQ(env_-&gt;GetDirectBufferAddress(buffer), bytes);\012  ASSERT_EQ(env_-&gt;GetDirectBufferCapacity(buffer), static_cast&lt;jlong&gt;(sizeof(bytes)));\012\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    env_-&gt;NewDirectByteBuffer(bytes, static_cast&lt;jlong&gt;(INT_MAX) + 1);\012    check_jni_abort_catcher.Check(&quot;in call to NewDirectByteBuffer&quot;);\012 }\012},TEST_F(JniInternalTest, NewDirectBuffer_GetDirectBufferAddress_GetDirectBufferCapacity) {\012 // Start runtime.\012 Thread* self = Thread::Current();\012  self-&gt;TransitionFromSuspendedToRunnable();\012 MakeInterpreted(class_linker_-&gt;FindSystemClass(self, &quot;Ljava/lang/Class;&quot;));\012 MakeInterpreted(class_linker_-&gt;FindSystemClass(self, &quot;Ljava/lang/Object;&quot;));\012 MakeInterpreted(class_linker_-&gt;FindSystemClass(self, &quot;Ljava/nio/DirectByteBuffer;&quot;));\012 MakeInterpreted(class_linker_-&gt;FindSystemClass(self, &quot;Ljava/nio/Bits;&quot;));\012 MakeInterpreted(class_linker_-&gt;FindSystemClass(self, &quot;Ljava/nio/MappedByteBuffer;&quot;));\012 MakeInterpreted(class_linker_-&gt;FindSystemClass(self, &quot;Ljava/nio/ByteBuffer;&quot;));\012 MakeInterpreted(class_linker_-&gt;FindSystemClass(self, &quot;Ljava/nio/Buffer;&quot;));\012 // TODO: we only load a dex file here as starting the runtime relies upon it.\012 const char* class_name = &quot;StaticLeafMethods&quot;;\012 LoadDex(class_name);\012 bool started = runtime_-&gt;Start();\012  ASSERT_TRUE(started);\012\012  jclass buffer_class = env_-&gt;FindClass(&quot;java/nio/Buffer&quot;);\012  ASSERT_NE(buffer_class, nullptr);\012\012 char bytes[1024];\012  jobject buffer = env_-&gt;NewDirectByteBuffer(bytes, sizeof(bytes));\012  ASSERT_NE(buffer, nullptr);\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(buffer, buffer_class));\012  ASSERT_EQ(env_-&gt;GetDirectBufferAddress(buffer), bytes);\012  ASSERT_EQ(env_-&gt;GetDirectBufferCapacity(buffer), static_cast&lt;jlong&gt;(sizeof(bytes)));\012\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    env_-&gt;NewDirectByteBuffer(bytes, static_cast&lt;jlong&gt;(INT_MAX) + 1);\012    check_jni_abort_catcher.Check(&quot;in call to NewDirectByteBuffer&quot;);\012 }\012})<SUB>2372</SUB>> ]
-"17846" [label = <(UNKNOWN,TEST_F(JniInternalTest, MonitorEnterExit) {\012 // This will print some error messages. Suppress.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012 // Create an object to torture.\012  jclass object_class = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_NE(object_class, nullptr);\012  jobject object = env_-&gt;AllocObject(object_class);\012  ASSERT_NE(object, nullptr);\012\012 // Expected class of exceptions\012  jclass imse_class = env_-&gt;FindClass(&quot;java/lang/IllegalMonitorStateException&quot;);\012  ASSERT_NE(imse_class, nullptr);\012\012  jthrowable thrown_exception;\012\012 // Unlock of unowned monitor\012  env_-&gt;MonitorExit(object);\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(thrown_exception, imse_class));\012\012 // Lock of unowned monitor\012  env_-&gt;MonitorEnter(object);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012 // Regular unlock\012  env_-&gt;MonitorExit(object);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Recursively lock a lot\012 size_t max_recursive_lock = 1024;\012 for (size_t i = 0; i &lt; max_recursive_lock; i++) {\012    env_-&gt;MonitorEnter(object);\012    EXPECT_FALSE(env_-&gt;ExceptionCheck());\012 }\012 // Recursively unlock a lot\012 for (size_t i = 0; i &lt; max_recursive_lock; i++) {\012    env_-&gt;MonitorExit(object);\012    EXPECT_FALSE(env_-&gt;ExceptionCheck());\012 }\012\012 // Unlock of unowned monitor\012  env_-&gt;MonitorExit(object);\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(thrown_exception, imse_class));\012\012 // It's an error to call MonitorEnter or MonitorExit on null.\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    env_-&gt;MonitorEnter(nullptr);\012    check_jni_abort_catcher.Check(&quot;in call to MonitorEnter&quot;);\012    env_-&gt;MonitorExit(nullptr);\012    check_jni_abort_catcher.Check(&quot;in call to MonitorExit&quot;);\012 }\012},TEST_F(JniInternalTest, MonitorEnterExit) {\012 // This will print some error messages. Suppress.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012 // Create an object to torture.\012  jclass object_class = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_NE(object_class, nullptr);\012  jobject object = env_-&gt;AllocObject(object_class);\012  ASSERT_NE(object, nullptr);\012\012 // Expected class of exceptions\012  jclass imse_class = env_-&gt;FindClass(&quot;java/lang/IllegalMonitorStateException&quot;);\012  ASSERT_NE(imse_class, nullptr);\012\012  jthrowable thrown_exception;\012\012 // Unlock of unowned monitor\012  env_-&gt;MonitorExit(object);\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(thrown_exception, imse_class));\012\012 // Lock of unowned monitor\012  env_-&gt;MonitorEnter(object);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012 // Regular unlock\012  env_-&gt;MonitorExit(object);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Recursively lock a lot\012 size_t max_recursive_lock = 1024;\012 for (size_t i = 0; i &lt; max_recursive_lock; i++) {\012    env_-&gt;MonitorEnter(object);\012    EXPECT_FALSE(env_-&gt;ExceptionCheck());\012 }\012 // Recursively unlock a lot\012 for (size_t i = 0; i &lt; max_recursive_lock; i++) {\012    env_-&gt;MonitorExit(object);\012    EXPECT_FALSE(env_-&gt;ExceptionCheck());\012 }\012\012 // Unlock of unowned monitor\012  env_-&gt;MonitorExit(object);\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(thrown_exception, imse_class));\012\012 // It's an error to call MonitorEnter or MonitorExit on null.\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    env_-&gt;MonitorEnter(nullptr);\012    check_jni_abort_catcher.Check(&quot;in call to MonitorEnter&quot;);\012    env_-&gt;MonitorExit(nullptr);\012    check_jni_abort_catcher.Check(&quot;in call to MonitorExit&quot;);\012 }\012})<SUB>2406</SUB>> ]
-"17858" [label = <(UNKNOWN,TEST_F(JniInternalTest, MonitorExitLockedInDifferentCall) {\012 SetUpForTest(false, &quot;foo&quot;, &quot;()V&quot;, reinterpret_cast&lt;void*&gt;(&amp;Java_MyClassNatives_foo_exit));\012  ASSERT_NE(jobj_, nullptr);\012\012  env_-&gt;MonitorEnter(jobj_);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  env_-&gt;CallNonvirtualVoidMethod(jobj_, jklass_, jmethod_);\012  check_jni_abort_catcher.Check(&quot;Unlocking monitor that wasn't locked here&quot;);\012},TEST_F(JniInternalTest, MonitorExitLockedInDifferentCall) {\012 SetUpForTest(false, &quot;foo&quot;, &quot;()V&quot;, reinterpret_cast&lt;void*&gt;(&amp;Java_MyClassNatives_foo_exit));\012  ASSERT_NE(jobj_, nullptr);\012\012  env_-&gt;MonitorEnter(jobj_);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  env_-&gt;CallNonvirtualVoidMethod(jobj_, jklass_, jmethod_);\012  check_jni_abort_catcher.Check(&quot;Unlocking monitor that wasn't locked here&quot;);\012})<SUB>2470</SUB>> ]
-"17870" [label = <(UNKNOWN,TEST_F(JniInternalTest, MonitorExitNotAllUnlocked) {\012 SetUpForTest(false,\012 &quot;foo&quot;,\012 &quot;()V&quot;,\012 reinterpret_cast&lt;void*&gt;(&amp;Java_MyClassNatives_foo_enter_no_exit));\012  ASSERT_NE(jobj_, nullptr);\012\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  env_-&gt;CallNonvirtualVoidMethod(jobj_, jklass_, jmethod_);\012  check_jni_abort_catcher.Check(&quot;Still holding a locked object on JNI end&quot;);\012},TEST_F(JniInternalTest, MonitorExitNotAllUnlocked) {\012 SetUpForTest(false,\012 &quot;foo&quot;,\012 &quot;()V&quot;,\012 reinterpret_cast&lt;void*&gt;(&amp;Java_MyClassNatives_foo_enter_no_exit));\012  ASSERT_NE(jobj_, nullptr);\012\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  env_-&gt;CallNonvirtualVoidMethod(jobj_, jklass_, jmethod_);\012  check_jni_abort_catcher.Check(&quot;Still holding a locked object on JNI end&quot;);\012})<SUB>2487</SUB>> ]
-"17942" [label = <(UNKNOWN,TEST_F(JniInternalTest, DetachThreadUnlockJNIMonitors) {\012 // We need to lock an object, detach, reattach, and check the locks.\012 //\012 // As re-attaching will create a different thread, we need to use a global\012 // ref to keep the object around.\012\012 // Create an object to torture.\012  jobject global_ref;\012 {\012    jclass object_class = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012    ASSERT_NE(object_class, nullptr);\012    jobject object = env_-&gt;AllocObject(object_class);\012    ASSERT_NE(object, nullptr);\012    global_ref = env_-&gt;NewGlobalRef(object);\012 }\012\012 // Lock it.\012  env_-&gt;MonitorEnter(global_ref);\012  ASSERT_TRUE(IsLocked(env_, global_ref));\012\012 // Detach and re-attach.\012  jint detach_result = vm_-&gt;DetachCurrentThread();\012  ASSERT_EQ(detach_result, JNI_OK);\012  jint attach_result = vm_-&gt;AttachCurrentThread(&amp;env_, nullptr);\012  ASSERT_EQ(attach_result, JNI_OK);\012\012 // Look at the global ref, check whether it's still locked.\012  ASSERT_FALSE(IsLocked(env_, global_ref));\012\012 // Delete the global ref.\012  env_-&gt;DeleteGlobalRef(global_ref);\012},TEST_F(JniInternalTest, DetachThreadUnlockJNIMonitors) {\012 // We need to lock an object, detach, reattach, and check the locks.\012 //\012 // As re-attaching will create a different thread, we need to use a global\012 // ref to keep the object around.\012\012 // Create an object to torture.\012  jobject global_ref;\012 {\012    jclass object_class = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012    ASSERT_NE(object_class, nullptr);\012    jobject object = env_-&gt;AllocObject(object_class);\012    ASSERT_NE(object, nullptr);\012    global_ref = env_-&gt;NewGlobalRef(object);\012 }\012\012 // Lock it.\012  env_-&gt;MonitorEnter(global_ref);\012  ASSERT_TRUE(IsLocked(env_, global_ref));\012\012 // Detach and re-attach.\012  jint detach_result = vm_-&gt;DetachCurrentThread();\012  ASSERT_EQ(detach_result, JNI_OK);\012  jint attach_result = vm_-&gt;AttachCurrentThread(&amp;env_, nullptr);\012  ASSERT_EQ(attach_result, JNI_OK);\012\012 // Look at the global ref, check whether it's still locked.\012  ASSERT_FALSE(IsLocked(env_, global_ref));\012\012 // Delete the global ref.\012  env_-&gt;DeleteGlobalRef(global_ref);\012})<SUB>2517</SUB>> ]
-"17943" [label = <(UNKNOWN,TEST_F(JniInternalTest, IndirectReferenceTableOffsets) {\012 // The segment_state_ field is private, and we want to avoid friend declaration. So we'll check\012 // by modifying memory.\012 // The parameters don't really matter here.\012  std::string error_msg;\012 IndirectReferenceTable irt(5,\012 IndirectRefKind::kGlobal,\012 IndirectReferenceTable::ResizableCapacity::kNo,\012 &amp;error_msg);\012  ASSERT_TRUE(irt.IsValid()) &lt;&lt; error_msg;\012 IRTSegmentState old_state = irt.GetSegmentState();\012\012 // Write some new state directly. We invert parts of old_state to ensure a new value.\012 IRTSegmentState new_state;\012  new_state.top_index = old_state.top_index ^ 0x07705005;\012  ASSERT_NE(old_state.top_index, new_state.top_index);\012\012 uint8_t* base = reinterpret_cast&lt;uint8_t*&gt;(&amp;irt);\012 int32_t segment_state_offset =\012 IndirectReferenceTable::SegmentStateOffset(sizeof(void*)).Int32Value();\012 *reinterpret_cast&lt;IRTSegmentState*&gt;(base + segment_state_offset) = new_state;\012\012 // Read and compare.\012  EXPECT_EQ(new_state.top_index, irt.GetSegmentState().top_index);\012},TEST_F(JniInternalTest, IndirectReferenceTableOffsets) {\012 // The segment_state_ field is private, and we want to avoid friend declaration. So we'll check\012 // by modifying memory.\012 // The parameters don't really matter here.\012  std::string error_msg;\012 IndirectReferenceTable irt(5,\012 IndirectRefKind::kGlobal,\012 IndirectReferenceTable::ResizableCapacity::kNo,\012 &amp;error_msg);\012  ASSERT_TRUE(irt.IsValid()) &lt;&lt; error_msg;\012 IRTSegmentState old_state = irt.GetSegmentState();\012\012 // Write some new state directly. We invert parts of old_state to ensure a new value.\012 IRTSegmentState new_state;\012  new_state.top_index = old_state.top_index ^ 0x07705005;\012  ASSERT_NE(old_state.top_index, new_state.top_index);\012\012 uint8_t* base = reinterpret_cast&lt;uint8_t*&gt;(&amp;irt);\012 int32_t segment_state_offset =\012 IndirectReferenceTable::SegmentStateOffset(sizeof(void*)).Int32Value();\012 *reinterpret_cast&lt;IRTSegmentState*&gt;(base + segment_state_offset) = new_state;\012\012 // Read and compare.\012  EXPECT_EQ(new_state.top_index, irt.GetSegmentState().top_index);\012})<SUB>2551</SUB>> ]
-"17944" [label = <(UNKNOWN,TEST_F(JniInternalTest, JNIEnvExtOffsets) {\012  EXPECT_EQ(OFFSETOF_MEMBER(JNIEnvExt, local_ref_cookie_),\012 JNIEnvExt::LocalRefCookieOffset(sizeof(void*)).Uint32Value());\012\012  EXPECT_EQ(OFFSETOF_MEMBER(JNIEnvExt, self_), JNIEnvExt::SelfOffset(sizeof(void*)).Uint32Value());\012\012 // segment_state_ is private in the IndirectReferenceTable. So this test isn't as good as we'd\012 // hope it to be.\012 uint32_t segment_state_now =\012      OFFSETOF_MEMBER(JNIEnvExt, locals_) +\012 IndirectReferenceTable::SegmentStateOffset(sizeof(void*)).Uint32Value();\012 uint32_t segment_state_computed = JNIEnvExt::SegmentStateOffset(sizeof(void*)).Uint32Value();\012  EXPECT_EQ(segment_state_now, segment_state_computed);\012},TEST_F(JniInternalTest, JNIEnvExtOffsets) {\012  EXPECT_EQ(OFFSETOF_MEMBER(JNIEnvExt, local_ref_cookie_),\012 JNIEnvExt::LocalRefCookieOffset(sizeof(void*)).Uint32Value());\012\012  EXPECT_EQ(OFFSETOF_MEMBER(JNIEnvExt, self_), JNIEnvExt::SelfOffset(sizeof(void*)).Uint32Value());\012\012 // segment_state_ is private in the IndirectReferenceTable. So this test isn't as good as we'd\012 // hope it to be.\012 uint32_t segment_state_now =\012      OFFSETOF_MEMBER(JNIEnvExt, locals_) +\012 IndirectReferenceTable::SegmentStateOffset(sizeof(void*)).Uint32Value();\012 uint32_t segment_state_computed = JNIEnvExt::SegmentStateOffset(sizeof(void*)).Uint32Value();\012  EXPECT_EQ(segment_state_now, segment_state_computed);\012})<SUB>2578</SUB>> ]
-"17946" [label = <(&lt;operator&gt;.assignment,gGlobalRefCount = 0)<SUB>2593</SUB>> ]
-"17950" [label = <(&lt;operator&gt;.assignment,* gOriginalEnv = nullptr)<SUB>2594</SUB>> ]
-"17968" [label = <(UNKNOWN,TEST_F(JniInternalTest, JNIEnvExtTableOverride) {\012 JNINativeInterface env_override;\012  memcpy(&amp;env_override, env_-&gt;functions, sizeof(JNINativeInterface));\012\012  gOriginalEnv = env_-&gt;functions;\012  env_override.NewGlobalRef = CountNewGlobalRef;\012  gGlobalRefCount = 0;\012\012  jclass local = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_TRUE(local != nullptr);\012\012 // Set the table, add a global ref, see whether the counter increases.\012 JNIEnvExt::SetTableOverride(&amp;env_override);\012\012  jobject global = env_-&gt;NewGlobalRef(local);\012  EXPECT_EQ(1u, gGlobalRefCount);\012  env_-&gt;DeleteGlobalRef(global);\012\012 // Reset\012 JNIEnvExt::SetTableOverride(nullptr);\012\012  jobject global2 = env_-&gt;NewGlobalRef(local);\012  EXPECT_EQ(1u, gGlobalRefCount);\012  env_-&gt;DeleteGlobalRef(global2);\012},TEST_F(JniInternalTest, JNIEnvExtTableOverride) {\012 JNINativeInterface env_override;\012  memcpy(&amp;env_override, env_-&gt;functions, sizeof(JNINativeInterface));\012\012  gOriginalEnv = env_-&gt;functions;\012  env_override.NewGlobalRef = CountNewGlobalRef;\012  gGlobalRefCount = 0;\012\012  jclass local = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_TRUE(local != nullptr);\012\012 // Set the table, add a global ref, see whether the counter increases.\012 JNIEnvExt::SetTableOverride(&amp;env_override);\012\012  jobject global = env_-&gt;NewGlobalRef(local);\012  EXPECT_EQ(1u, gGlobalRefCount);\012  env_-&gt;DeleteGlobalRef(global);\012\012 // Reset\012 JNIEnvExt::SetTableOverride(nullptr);\012\012  jobject global2 = env_-&gt;NewGlobalRef(local);\012  EXPECT_EQ(1u, gGlobalRefCount);\012  env_-&gt;DeleteGlobalRef(global2);\012})<SUB>2602</SUB>> ]
-"17969" [label = <(UNKNOWN,TEST_F(JniInternalTest, NonAttachedThread) {\012 // This tests leads to warnings and errors in the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012 CheckJniAbortCatcher check_jni_abort_catcher;\012\012 auto callee = [](void* env_ptr) -&gt; void* {\012 JNIEnv* env = reinterpret_cast&lt;JNIEnv*&gt;(env_ptr);\012    env-&gt;NewStringUTF(&quot;test&quot;);\012 return nullptr;\012 };\012\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  vm_-&gt;SetCheckJniEnabled(true);\012 {\012 pthread_t pthread;\012 int pthread_create_result = pthread_create(&amp;pthread,\012 /* pthread_attr */ nullptr,\012                                               callee,\012 reinterpret_cast&lt;void*&gt;(env_));\012    CHECK_EQ(pthread_create_result, 0);\012 int pthread_join_result = pthread_join(pthread, /* thread_return */ nullptr);\012    CHECK_EQ(pthread_join_result, 0);\012 }\012  vm_-&gt;SetCheckJniEnabled(old_check_jni);\012\012  check_jni_abort_catcher.Check(&quot;is making JNI calls without being attached&quot;);\012},TEST_F(JniInternalTest, NonAttachedThread) {\012 // This tests leads to warnings and errors in the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012 CheckJniAbortCatcher check_jni_abort_catcher;\012\012 auto callee = [](void* env_ptr) -&gt; void* {\012 JNIEnv* env = reinterpret_cast&lt;JNIEnv*&gt;(env_ptr);\012    env-&gt;NewStringUTF(&quot;test&quot;);\012 return nullptr;\012 };\012\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  vm_-&gt;SetCheckJniEnabled(true);\012 {\012 pthread_t pthread;\012 int pthread_create_result = pthread_create(&amp;pthread,\012 /* pthread_attr */ nullptr,\012                                               callee,\012 reinterpret_cast&lt;void*&gt;(env_));\012    CHECK_EQ(pthread_create_result, 0);\012 int pthread_join_result = pthread_join(pthread, /* thread_return */ nullptr);\012    CHECK_EQ(pthread_join_result, 0);\012 }\012  vm_-&gt;SetCheckJniEnabled(old_check_jni);\012\012  check_jni_abort_catcher.Check(&quot;is making JNI calls without being attached&quot;);\012})<SUB>2628</SUB>> ]
-"15283" [label = <(METHOD,&lt;global&gt;)<SUB>1</SUB>> ]
-"17970" [label = <(METHOD_RETURN,ANY)<SUB>1</SUB>> ]
-  "17752" -> "17753" 
-  "17753" -> "17754" 
-  "17754" -> "17755" 
-  "17755" -> "17756" 
-  "17756" -> "17757" 
-  "17757" -> "17758" 
-  "17758" -> "17759" 
-  "17759" -> "17760" 
-  "17760" -> "17761" 
-  "17761" -> "17780" 
-  "17780" -> "17781" 
-  "17781" -> "17786" 
-  "17786" -> "17787" 
-  "17787" -> "17788" 
-  "17788" -> "17789" 
-  "17789" -> "17790" 
-  "17790" -> "17791" 
-  "17791" -> "17792" 
-  "17792" -> "17793" 
-  "17793" -> "17794" 
-  "17794" -> "17795" 
-  "17795" -> "17796" 
-  "17796" -> "17797" 
-  "17797" -> "17798" 
-  "17798" -> "17799" 
-  "17799" -> "17800" 
-  "17800" -> "17801" 
-  "17801" -> "17802" 
-  "17802" -> "17803" 
-  "17803" -> "17804" 
-  "17804" -> "17805" 
-  "17805" -> "17806" 
-  "17806" -> "17807" 
-  "17807" -> "17808" 
-  "17808" -> "17809" 
-  "17809" -> "17810" 
-  "17810" -> "17811" 
-  "17811" -> "17812" 
-  "17812" -> "17813" 
-  "17813" -> "17814" 
-  "17814" -> "17815" 
-  "17815" -> "17816" 
-  "17816" -> "17817" 
-  "17817" -> "17818" 
-  "17818" -> "17819" 
-  "17819" -> "17820" 
-  "17820" -> "17821" 
-  "17821" -> "17822" 
-  "17822" -> "17823" 
-  "17823" -> "17824" 
-  "17824" -> "17825" 
-  "17825" -> "17826" 
-  "17826" -> "17827" 
-  "17827" -> "17828" 
-  "17828" -> "17829" 
-  "17829" -> "17830" 
-  "17830" -> "17831" 
-  "17831" -> "17832" 
-  "17832" -> "17833" 
-  "17833" -> "17834" 
-  "17834" -> "17835" 
-  "17835" -> "17836" 
-  "17836" -> "17837" 
-  "17837" -> "17838" 
-  "17838" -> "17839" 
-  "17839" -> "17840" 
-  "17840" -> "17841" 
-  "17841" -> "17842" 
-  "17842" -> "17843" 
-  "17843" -> "17844" 
-  "17844" -> "17845" 
-  "17845" -> "17846" 
-  "17846" -> "17858" 
-  "17858" -> "17870" 
-  "17870" -> "17942" 
-  "17942" -> "17943" 
-  "17943" -> "17944" 
-  "17944" -> "17946" 
-  "17946" -> "17950" 
-  "17950" -> "17968" 
-  "17968" -> "17969" 
-  "17969" -> "17970" 
-  "15283" -> "17752" 
+digraph "TearDown" {  
+"15135" [label = <(CleanUpJniEnv,CleanUpJniEnv())<SUB>87</SUB>> ]
+"15136" [label = <(CommonRuntimeTest::TearDown,CommonRuntimeTest::TearDown())<SUB>88</SUB>> ]
+"15137" [label = <(&lt;operator&gt;.fieldAccess,CommonRuntimeTest::TearDown)<SUB>88</SUB>> ]
+"15139" [label = <(FIELD_IDENTIFIER,TearDown,TearDown)<SUB>88</SUB>> ]
+"15133" [label = <(METHOD,TearDown)<SUB>86</SUB>> ]
+"15140" [label = <(METHOD_RETURN,void)<SUB>86</SUB>> ]
+  "15135" -> "15139" 
+  "15136" -> "15140" 
+  "15137" -> "15136" 
+  "15139" -> "15137" 
+  "15133" -> "15135" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/269-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/269-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/269-cfg.dot	2023-06-07 19:35:01.617387150 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/269-cfg.dot	2023-06-07 19:35:08.157386504 +0330
@@ -1,153 +1,37 @@
-digraph "SetUp" {  
-"15289" [label = <(CommonRuntimeTest::SetUp,CommonRuntimeTest::SetUp())<SUB>38</SUB>> ]
-"15293" [label = <(&lt;operator&gt;.assignment,vm_ = Runtime::Current()-&gt;GetJavaVM())<SUB>40</SUB>> ]
-"15302" [label = <(AttachCurrentThread,vm_-&gt;AttachCurrentThread(&amp;env_, nullptr))<SUB>45</SUB>> ]
-"15309" [label = <(&lt;operator&gt;.greaterThan,ScopedLocalRef&lt;jclass&gt; aioobe(env_,\012                                  env_-&gt;FindClass(&quot;java/lang/ArrayIndexOutOfBoundsException&quot;)))<SUB>47</SUB>> ]
-"15320" [label = <(CHECK,CHECK(aioobe.get() != nullptr))<SUB>49</SUB>> ]
-"15327" [label = <(&lt;operator&gt;.assignment,aioobe_ = reinterpret_cast&lt;jclass&gt;(env_-&gt;NewGlobalRef(aioobe.get())))<SUB>50</SUB>> ]
-"15339" [label = <(&lt;operator&gt;.greaterThan,ScopedLocalRef&lt;jclass&gt; ase(env_, env_-&gt;FindClass(&quot;java/lang/ArrayStoreException&quot;)))<SUB>52</SUB>> ]
-"15350" [label = <(CHECK,CHECK(ase.get() != nullptr))<SUB>53</SUB>> ]
-"15357" [label = <(&lt;operator&gt;.assignment,ase_ = reinterpret_cast&lt;jclass&gt;(env_-&gt;NewGlobalRef(ase.get())))<SUB>54</SUB>> ]
-"15369" [label = <(&lt;operator&gt;.greaterThan,ScopedLocalRef&lt;jclass&gt; sioobe(env_,\012                                  env_-&gt;FindClass(&quot;java/lang/StringIndexOutOfBoundsException&quot;)))<SUB>56</SUB>> ]
-"15380" [label = <(CHECK,CHECK(sioobe.get() != nullptr))<SUB>58</SUB>> ]
-"15387" [label = <(&lt;operator&gt;.assignment,sioobe_ = reinterpret_cast&lt;jclass&gt;(env_-&gt;NewGlobalRef(sioobe.get())))<SUB>59</SUB>> ]
-"15290" [label = <(&lt;operator&gt;.fieldAccess,CommonRuntimeTest::SetUp)<SUB>38</SUB>> ]
-"15295" [label = <(GetJavaVM,Runtime::Current()-&gt;GetJavaVM())<SUB>40</SUB>> ]
-"15303" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;AttachCurrentThread)<SUB>45</SUB>> ]
-"15306" [label = <(&lt;operator&gt;.addressOf,&amp;env_)<SUB>45</SUB>> ]
-"15310" [label = <(&lt;operator&gt;.lessThan,ScopedLocalRef&lt;jclass)<SUB>47</SUB>> ]
-"15313" [label = <(aioobe,aioobe(env_,\012                                  env_-&gt;FindClass(&quot;java/lang/ArrayIndexOutOfBoundsException&quot;)))<SUB>47</SUB>> ]
-"15321" [label = <(&lt;operator&gt;.notEquals,aioobe.get() != nullptr)<SUB>49</SUB>> ]
-"15329" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jclass&gt;(env_-&gt;NewGlobalRef(aioobe.get())))<SUB>50</SUB>> ]
-"15340" [label = <(&lt;operator&gt;.lessThan,ScopedLocalRef&lt;jclass)<SUB>52</SUB>> ]
-"15343" [label = <(ase,ase(env_, env_-&gt;FindClass(&quot;java/lang/ArrayStoreException&quot;)))<SUB>52</SUB>> ]
-"15351" [label = <(&lt;operator&gt;.notEquals,ase.get() != nullptr)<SUB>53</SUB>> ]
-"15359" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jclass&gt;(env_-&gt;NewGlobalRef(ase.get())))<SUB>54</SUB>> ]
-"15370" [label = <(&lt;operator&gt;.lessThan,ScopedLocalRef&lt;jclass)<SUB>56</SUB>> ]
-"15373" [label = <(sioobe,sioobe(env_,\012                                  env_-&gt;FindClass(&quot;java/lang/StringIndexOutOfBoundsException&quot;)))<SUB>56</SUB>> ]
-"15381" [label = <(&lt;operator&gt;.notEquals,sioobe.get() != nullptr)<SUB>58</SUB>> ]
-"15389" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jclass&gt;(env_-&gt;NewGlobalRef(sioobe.get())))<SUB>59</SUB>> ]
-"15292" [label = <(FIELD_IDENTIFIER,SetUp,SetUp)<SUB>38</SUB>> ]
-"15296" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetJavaVM)<SUB>40</SUB>> ]
-"15305" [label = <(FIELD_IDENTIFIER,AttachCurrentThread,AttachCurrentThread)<SUB>45</SUB>> ]
-"15315" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/ArrayIndexOutOfBoundsException&quot;))<SUB>48</SUB>> ]
-"15322" [label = <(get,aioobe.get())<SUB>49</SUB>> ]
-"15330" [label = <(UNKNOWN,jclass,jclass)<SUB>50</SUB>> ]
-"15331" [label = <(NewGlobalRef,env_-&gt;NewGlobalRef(aioobe.get()))<SUB>50</SUB>> ]
-"15345" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/ArrayStoreException&quot;))<SUB>52</SUB>> ]
-"15352" [label = <(get,ase.get())<SUB>53</SUB>> ]
-"15360" [label = <(UNKNOWN,jclass,jclass)<SUB>54</SUB>> ]
-"15361" [label = <(NewGlobalRef,env_-&gt;NewGlobalRef(ase.get()))<SUB>54</SUB>> ]
-"15375" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/StringIndexOutOfBoundsException&quot;))<SUB>57</SUB>> ]
-"15382" [label = <(get,sioobe.get())<SUB>58</SUB>> ]
-"15390" [label = <(UNKNOWN,jclass,jclass)<SUB>59</SUB>> ]
-"15391" [label = <(NewGlobalRef,env_-&gt;NewGlobalRef(sioobe.get()))<SUB>59</SUB>> ]
-"15297" [label = <(Runtime::Current,Runtime::Current())<SUB>40</SUB>> ]
-"15301" [label = <(FIELD_IDENTIFIER,GetJavaVM,GetJavaVM)<SUB>40</SUB>> ]
-"15316" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>48</SUB>> ]
-"15323" [label = <(&lt;operator&gt;.fieldAccess,aioobe.get)<SUB>49</SUB>> ]
-"15332" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewGlobalRef)<SUB>50</SUB>> ]
-"15335" [label = <(get,aioobe.get())<SUB>50</SUB>> ]
-"15346" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>52</SUB>> ]
-"15353" [label = <(&lt;operator&gt;.fieldAccess,ase.get)<SUB>53</SUB>> ]
-"15362" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewGlobalRef)<SUB>54</SUB>> ]
-"15365" [label = <(get,ase.get())<SUB>54</SUB>> ]
-"15376" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>57</SUB>> ]
-"15383" [label = <(&lt;operator&gt;.fieldAccess,sioobe.get)<SUB>58</SUB>> ]
-"15392" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewGlobalRef)<SUB>59</SUB>> ]
-"15395" [label = <(get,sioobe.get())<SUB>59</SUB>> ]
-"15298" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>40</SUB>> ]
-"15318" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>48</SUB>> ]
-"15325" [label = <(FIELD_IDENTIFIER,get,get)<SUB>49</SUB>> ]
-"15334" [label = <(FIELD_IDENTIFIER,NewGlobalRef,NewGlobalRef)<SUB>50</SUB>> ]
-"15336" [label = <(&lt;operator&gt;.fieldAccess,aioobe.get)<SUB>50</SUB>> ]
-"15348" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>52</SUB>> ]
-"15355" [label = <(FIELD_IDENTIFIER,get,get)<SUB>53</SUB>> ]
-"15364" [label = <(FIELD_IDENTIFIER,NewGlobalRef,NewGlobalRef)<SUB>54</SUB>> ]
-"15366" [label = <(&lt;operator&gt;.fieldAccess,ase.get)<SUB>54</SUB>> ]
-"15378" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>57</SUB>> ]
-"15385" [label = <(FIELD_IDENTIFIER,get,get)<SUB>58</SUB>> ]
-"15394" [label = <(FIELD_IDENTIFIER,NewGlobalRef,NewGlobalRef)<SUB>59</SUB>> ]
-"15396" [label = <(&lt;operator&gt;.fieldAccess,sioobe.get)<SUB>59</SUB>> ]
-"15300" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>40</SUB>> ]
-"15338" [label = <(FIELD_IDENTIFIER,get,get)<SUB>50</SUB>> ]
-"15368" [label = <(FIELD_IDENTIFIER,get,get)<SUB>54</SUB>> ]
-"15398" [label = <(FIELD_IDENTIFIER,get,get)<SUB>59</SUB>> ]
-"15287" [label = <(METHOD,SetUp)<SUB>37</SUB>> ]
-"15399" [label = <(METHOD_RETURN,void)<SUB>37</SUB>> ]
-  "15289" -> "15300" 
-  "15293" -> "15305" 
-  "15302" -> "15310" 
-  "15309" -> "15325" 
-  "15320" -> "15330" 
-  "15327" -> "15340" 
-  "15339" -> "15355" 
-  "15350" -> "15360" 
-  "15357" -> "15370" 
-  "15369" -> "15385" 
-  "15380" -> "15390" 
-  "15387" -> "15399" 
-  "15290" -> "15289" 
-  "15295" -> "15293" 
-  "15303" -> "15306" 
-  "15306" -> "15302" 
-  "15310" -> "15318" 
-  "15313" -> "15309" 
-  "15321" -> "15320" 
-  "15329" -> "15327" 
-  "15340" -> "15348" 
-  "15343" -> "15339" 
-  "15351" -> "15350" 
-  "15359" -> "15357" 
-  "15370" -> "15378" 
-  "15373" -> "15369" 
-  "15381" -> "15380" 
-  "15389" -> "15387" 
-  "15292" -> "15290" 
-  "15296" -> "15295" 
-  "15305" -> "15303" 
-  "15315" -> "15313" 
-  "15322" -> "15321" 
-  "15330" -> "15334" 
-  "15331" -> "15329" 
-  "15345" -> "15343" 
-  "15352" -> "15351" 
-  "15360" -> "15364" 
-  "15361" -> "15359" 
-  "15375" -> "15373" 
-  "15382" -> "15381" 
-  "15390" -> "15394" 
-  "15391" -> "15389" 
-  "15297" -> "15301" 
-  "15301" -> "15296" 
-  "15316" -> "15315" 
-  "15323" -> "15322" 
-  "15332" -> "15338" 
-  "15335" -> "15331" 
-  "15346" -> "15345" 
-  "15353" -> "15352" 
-  "15362" -> "15368" 
-  "15365" -> "15361" 
-  "15376" -> "15375" 
-  "15383" -> "15382" 
-  "15392" -> "15398" 
-  "15395" -> "15391" 
-  "15298" -> "15297" 
-  "15318" -> "15316" 
-  "15325" -> "15323" 
-  "15334" -> "15332" 
-  "15336" -> "15335" 
-  "15348" -> "15346" 
-  "15355" -> "15353" 
-  "15364" -> "15362" 
-  "15366" -> "15365" 
-  "15378" -> "15376" 
-  "15385" -> "15383" 
-  "15394" -> "15392" 
-  "15396" -> "15395" 
-  "15300" -> "15298" 
-  "15338" -> "15336" 
-  "15368" -> "15366" 
-  "15398" -> "15396" 
-  "15287" -> "15292" 
+digraph "GetPrimitiveClass" {  
+"15146" [label = <(soa,soa(env_))<SUB>92</SUB>> ]
+"15148" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c = class_linker_-&gt;FindPrimitiveClass(descriptor))<SUB>93</SUB>> ]
+"15161" [label = <(CHECK,CHECK(c != nullptr))<SUB>94</SUB>> ]
+"15165" [label = <(RETURN,return soa.AddLocalReference&lt;jclass&gt;(c);,return soa.AddLocalReference&lt;jclass&gt;(c);)<SUB>95</SUB>> ]
+"15149" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c)<SUB>93</SUB>> ]
+"15156" [label = <(FindPrimitiveClass,class_linker_-&gt;FindPrimitiveClass(descriptor))<SUB>93</SUB>> ]
+"15162" [label = <(&lt;operator&gt;.notEquals,c != nullptr)<SUB>94</SUB>> ]
+"15166" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jclass&gt;(c))<SUB>95</SUB>> ]
+"15150" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>93</SUB>> ]
+"15157" [label = <(&lt;operator&gt;.indirectFieldAccess,class_linker_-&gt;FindPrimitiveClass)<SUB>93</SUB>> ]
+"15167" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jclass)<SUB>95</SUB>> ]
+"15152" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>93</SUB>> ]
+"15159" [label = <(FIELD_IDENTIFIER,FindPrimitiveClass,FindPrimitiveClass)<SUB>93</SUB>> ]
+"15168" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>95</SUB>> ]
+"15154" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>93</SUB>> ]
+"15170" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>95</SUB>> ]
+"15142" [label = <(METHOD,GetPrimitiveClass)<SUB>91</SUB>> ]
+"15173" [label = <(METHOD_RETURN,jclass)<SUB>91</SUB>> ]
+  "15146" -> "15154" 
+  "15148" -> "15162" 
+  "15161" -> "15170" 
+  "15165" -> "15173" 
+  "15149" -> "15159" 
+  "15156" -> "15148" 
+  "15162" -> "15161" 
+  "15166" -> "15165" 
+  "15150" -> "15149" 
+  "15157" -> "15156" 
+  "15167" -> "15166" 
+  "15152" -> "15150" 
+  "15159" -> "15157" 
+  "15168" -> "15167" 
+  "15154" -> "15152" 
+  "15170" -> "15168" 
+  "15142" -> "15146" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/27-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/27-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/27-cfg.dot	2023-06-07 19:35:01.347387178 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/27-cfg.dot	2023-06-07 19:35:07.927386526 +0330
@@ -1,7 +1,100 @@
-digraph "GetVersion" {  
-"939" [label = <(RETURN,return JNI_VERSION_1_6;,return JNI_VERSION_1_6;)<SUB>563</SUB>> ]
-"936" [label = <(METHOD,GetVersion)<SUB>562</SUB>> ]
-"941" [label = <(METHOD_RETURN,jint)<SUB>562</SUB>> ]
-  "939" -> "941" 
-  "936" -> "939" 
+digraph "FromReflectedField" {  
+"933" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(jlr_field))<SUB>517</SUB>> ]
+"952" [label = <(soa,soa(env))<SUB>518</SUB>> ]
+"954" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; obj_field = soa.Decode&lt;mirror::Object&gt;(jlr_field))<SUB>519</SUB>> ]
+"981" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Field&gt; field = ObjPtr&lt;mirror::Field&gt;::DownCast(obj_field))<SUB>524</SUB>> ]
+"1000" [label = <(RETURN,return jni::EncodeArtField&lt;kEnableIndexIds&gt;(field-&gt;GetArtField());,return jni::EncodeArtField&lt;kEnableIndexIds&gt;(field-&gt;GetArtField());)<SUB>525</SUB>> ]
+"955" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; obj_field)<SUB>519</SUB>> ]
+"962" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(jlr_field))<SUB>519</SUB>> ]
+"972" [label = <(&lt;operator&gt;.notEquals,obj_field-&gt;GetClass() != GetClassRoot&lt;mirror::Field&gt;())<SUB>520</SUB>> ]
+"982" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Field&gt; field)<SUB>524</SUB>> ]
+"989" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Field&gt;::DownCast(obj_field))<SUB>524</SUB>> ]
+"1001" [label = <(&lt;operator&gt;.greaterThan,jni::EncodeArtField&lt;kEnableIndexIds&gt;(field-&gt;GetArtField()))<SUB>525</SUB>> ]
+"956" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>519</SUB>> ]
+"963" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>519</SUB>> ]
+"973" [label = <(GetClass,obj_field-&gt;GetClass())<SUB>520</SUB>> ]
+"977" [label = <(GetClassRoot&lt;mirror::Field&gt;,GetClassRoot&lt;mirror::Field&gt;())<SUB>520</SUB>> ]
+"979" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>522</SUB>> ]
+"983" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Field)<SUB>524</SUB>> ]
+"990" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Field)<SUB>524</SUB>> ]
+"995" [label = <(::DownCast,::DownCast(obj_field))<SUB>524</SUB>> ]
+"1002" [label = <(&lt;operator&gt;.lessThan,jni::EncodeArtField&lt;kEnableIndexIds)<SUB>525</SUB>> ]
+"1007" [label = <(GetArtField,field-&gt;GetArtField())<SUB>525</SUB>> ]
+"937" [label = <(UNLIKELY,UNLIKELY((jlr_field) == nullptr))<SUB>517</SUB>> ]
+"958" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>519</SUB>> ]
+"964" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>519</SUB>> ]
+"967" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>519</SUB>> ]
+"974" [label = <(&lt;operator&gt;.indirectFieldAccess,obj_field-&gt;GetClass)<SUB>520</SUB>> ]
+"985" [label = <(&lt;operator&gt;.fieldAccess,mirror::Field)<SUB>524</SUB>> ]
+"992" [label = <(&lt;operator&gt;.fieldAccess,mirror::Field)<SUB>524</SUB>> ]
+"996" [label = <(&lt;operator&gt;.fieldAccess,::DownCast)<SUB>524</SUB>> ]
+"1003" [label = <(&lt;operator&gt;.fieldAccess,jni::EncodeArtField)<SUB>525</SUB>> ]
+"1008" [label = <(&lt;operator&gt;.indirectFieldAccess,field-&gt;GetArtField)<SUB>525</SUB>> ]
+"938" [label = <(&lt;operator&gt;.equals,(jlr_field) == nullptr)<SUB>517</SUB>> ]
+"942" [label = <(CHECK_NON_NULL_ARGUMENT(jlr_field),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;jlr_field == null&quot;))<SUB>517</SUB>> ]
+"949" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(jlr_field),CHECK_NON_NULL_ARGUMENT(jlr_field))<SUB>517</SUB>> ]
+"960" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>519</SUB>> ]
+"966" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>519</SUB>> ]
+"969" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>519</SUB>> ]
+"976" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>520</SUB>> ]
+"987" [label = <(FIELD_IDENTIFIER,Field,Field)<SUB>524</SUB>> ]
+"994" [label = <(FIELD_IDENTIFIER,Field,Field)<SUB>524</SUB>> ]
+"998" [label = <(FIELD_IDENTIFIER,DownCast,DownCast)<SUB>524</SUB>> ]
+"1005" [label = <(FIELD_IDENTIFIER,EncodeArtField,EncodeArtField)<SUB>525</SUB>> ]
+"1010" [label = <(FIELD_IDENTIFIER,GetArtField,GetArtField)<SUB>525</SUB>> ]
+"943" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>517</SUB>> ]
+"944" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>517</SUB>> ]
+"946" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>517</SUB>> ]
+"929" [label = <(METHOD,FromReflectedField)<SUB>516</SUB>> ]
+"1011" [label = <(METHOD_RETURN,jfieldID)<SUB>516</SUB>> ]
+  "933" -> "938" 
+  "933" -> "952" 
+  "952" -> "960" 
+  "954" -> "976" 
+  "981" -> "1005" 
+  "1000" -> "1011" 
+  "955" -> "966" 
+  "962" -> "954" 
+  "972" -> "979" 
+  "972" -> "987" 
+  "982" -> "994" 
+  "989" -> "981" 
+  "1001" -> "1000" 
+  "956" -> "955" 
+  "963" -> "962" 
+  "973" -> "977" 
+  "977" -> "972" 
+  "979" -> "1011" 
+  "983" -> "982" 
+  "990" -> "998" 
+  "995" -> "989" 
+  "1002" -> "1010" 
+  "1007" -> "1001" 
+  "937" -> "944" 
+  "937" -> "952" 
+  "958" -> "956" 
+  "964" -> "969" 
+  "967" -> "963" 
+  "974" -> "973" 
+  "985" -> "983" 
+  "992" -> "990" 
+  "996" -> "995" 
+  "1003" -> "1002" 
+  "1008" -> "1007" 
+  "938" -> "937" 
+  "942" -> "949" 
+  "949" -> "1011" 
+  "960" -> "958" 
+  "966" -> "964" 
+  "969" -> "967" 
+  "976" -> "974" 
+  "987" -> "985" 
+  "994" -> "992" 
+  "998" -> "996" 
+  "1005" -> "1003" 
+  "1010" -> "1008" 
+  "943" -> "942" 
+  "944" -> "946" 
+  "946" -> "943" 
+  "929" -> "933" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/270-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/270-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/270-cfg.dot	2023-06-07 19:35:01.617387150 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/270-cfg.dot	2023-06-07 19:35:08.157386504 +0330
@@ -1,61 +1,25 @@
-digraph "ExpectException" {  
-"15405" [label = <(soa,soa(env_))<SUB>63</SUB>> ]
-"15407" [label = <(&lt;operator&gt;.shiftLeft,EXPECT_TRUE(env_-&gt;ExceptionCheck())\012 &lt;&lt; mirror::Class::PrettyDescriptor(soa.Decode&lt;mirror::Class&gt;(exception_class)))<SUB>64</SUB>> ]
-"15429" [label = <(&lt;operator&gt;.assignment,exception = env_-&gt;ExceptionOccurred())<SUB>66</SUB>> ]
-"15435" [label = <(EXPECT_NE,EXPECT_NE(nullptr, exception))<SUB>67</SUB>> ]
-"15438" [label = <(ExceptionClear,env_-&gt;ExceptionClear())<SUB>68</SUB>> ]
-"15442" [label = <(EXPECT_TRUE,EXPECT_TRUE(env_-&gt;IsInstanceOf(exception, exception_class)))<SUB>69</SUB>> ]
-"15408" [label = <(EXPECT_TRUE,EXPECT_TRUE(env_-&gt;ExceptionCheck()))<SUB>64</SUB>> ]
-"15413" [label = <(mirror::Class::PrettyDescriptor,mirror::Class::PrettyDescriptor(soa.Decode&lt;mirror::Class&gt;(exception_class)))<SUB>65</SUB>> ]
-"15431" [label = <(ExceptionOccurred,env_-&gt;ExceptionOccurred())<SUB>66</SUB>> ]
-"15439" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ExceptionClear)<SUB>68</SUB>> ]
-"15443" [label = <(IsInstanceOf,env_-&gt;IsInstanceOf(exception, exception_class))<SUB>69</SUB>> ]
-"15409" [label = <(ExceptionCheck,env_-&gt;ExceptionCheck())<SUB>64</SUB>> ]
-"15414" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class::PrettyDescriptor)<SUB>65</SUB>> ]
-"15419" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(exception_class))<SUB>65</SUB>> ]
-"15432" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ExceptionOccurred)<SUB>66</SUB>> ]
-"15441" [label = <(FIELD_IDENTIFIER,ExceptionClear,ExceptionClear)<SUB>68</SUB>> ]
-"15444" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;IsInstanceOf)<SUB>69</SUB>> ]
-"15410" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ExceptionCheck)<SUB>64</SUB>> ]
-"15415" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>65</SUB>> ]
-"15418" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>65</SUB>> ]
-"15420" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>65</SUB>> ]
-"15434" [label = <(FIELD_IDENTIFIER,ExceptionOccurred,ExceptionOccurred)<SUB>66</SUB>> ]
-"15446" [label = <(FIELD_IDENTIFIER,IsInstanceOf,IsInstanceOf)<SUB>69</SUB>> ]
-"15412" [label = <(FIELD_IDENTIFIER,ExceptionCheck,ExceptionCheck)<SUB>64</SUB>> ]
-"15421" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>65</SUB>> ]
-"15424" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>65</SUB>> ]
-"15423" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>65</SUB>> ]
-"15426" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>65</SUB>> ]
-"15401" [label = <(METHOD,ExpectException)<SUB>62</SUB>> ]
-"15449" [label = <(METHOD_RETURN,void)<SUB>62</SUB>> ]
-  "15405" -> "15412" 
-  "15407" -> "15434" 
-  "15429" -> "15435" 
-  "15435" -> "15441" 
-  "15438" -> "15446" 
-  "15442" -> "15449" 
-  "15408" -> "15415" 
-  "15413" -> "15407" 
-  "15431" -> "15429" 
-  "15439" -> "15438" 
-  "15443" -> "15442" 
-  "15409" -> "15408" 
-  "15414" -> "15423" 
-  "15419" -> "15413" 
-  "15432" -> "15431" 
-  "15441" -> "15439" 
-  "15444" -> "15443" 
-  "15410" -> "15409" 
-  "15415" -> "15418" 
-  "15418" -> "15414" 
-  "15420" -> "15419" 
-  "15434" -> "15432" 
-  "15446" -> "15444" 
-  "15412" -> "15410" 
-  "15421" -> "15426" 
-  "15424" -> "15420" 
-  "15423" -> "15421" 
-  "15426" -> "15424" 
-  "15401" -> "15405" 
+digraph "ExpectClassFound" {  
+"15178" [label = <(&lt;operator&gt;.shiftLeft,EXPECT_NE(env_-&gt;FindClass(name), nullptr) &lt;&lt; name)<SUB>99</SUB>> ]
+"15187" [label = <(&lt;operator&gt;.shiftLeft,EXPECT_FALSE(env_-&gt;ExceptionCheck()) &lt;&lt; name)<SUB>100</SUB>> ]
+"15179" [label = <(EXPECT_NE,EXPECT_NE(env_-&gt;FindClass(name), nullptr))<SUB>99</SUB>> ]
+"15188" [label = <(EXPECT_FALSE,EXPECT_FALSE(env_-&gt;ExceptionCheck()))<SUB>100</SUB>> ]
+"15180" [label = <(FindClass,env_-&gt;FindClass(name))<SUB>99</SUB>> ]
+"15189" [label = <(ExceptionCheck,env_-&gt;ExceptionCheck())<SUB>100</SUB>> ]
+"15181" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>99</SUB>> ]
+"15190" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ExceptionCheck)<SUB>100</SUB>> ]
+"15183" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>99</SUB>> ]
+"15192" [label = <(FIELD_IDENTIFIER,ExceptionCheck,ExceptionCheck)<SUB>100</SUB>> ]
+"15175" [label = <(METHOD,ExpectClassFound)<SUB>98</SUB>> ]
+"15194" [label = <(METHOD_RETURN,void)<SUB>98</SUB>> ]
+  "15178" -> "15192" 
+  "15187" -> "15194" 
+  "15179" -> "15178" 
+  "15188" -> "15187" 
+  "15180" -> "15179" 
+  "15189" -> "15188" 
+  "15181" -> "15180" 
+  "15190" -> "15189" 
+  "15183" -> "15181" 
+  "15192" -> "15190" 
+  "15175" -> "15183" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/271-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/271-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/271-cfg.dot	2023-06-07 19:35:01.617387150 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/271-cfg.dot	2023-06-07 19:35:08.157386504 +0330
@@ -1,38 +1,45 @@
-digraph "CleanUpJniEnv" {  
-"15454" [label = <(&lt;operator&gt;.notEquals,aioobe_ != nullptr)<SUB>73</SUB>> ]
-"15467" [label = <(&lt;operator&gt;.notEquals,ase_ != nullptr)<SUB>77</SUB>> ]
-"15480" [label = <(&lt;operator&gt;.notEquals,sioobe_ != nullptr)<SUB>81</SUB>> ]
-"15458" [label = <(DeleteGlobalRef,env_-&gt;DeleteGlobalRef(aioobe_))<SUB>74</SUB>> ]
-"15463" [label = <(&lt;operator&gt;.assignment,aioobe_ = nullptr)<SUB>75</SUB>> ]
-"15471" [label = <(DeleteGlobalRef,env_-&gt;DeleteGlobalRef(ase_))<SUB>78</SUB>> ]
-"15476" [label = <(&lt;operator&gt;.assignment,ase_ = nullptr)<SUB>79</SUB>> ]
-"15484" [label = <(DeleteGlobalRef,env_-&gt;DeleteGlobalRef(sioobe_))<SUB>82</SUB>> ]
-"15489" [label = <(&lt;operator&gt;.assignment,sioobe_ = nullptr)<SUB>83</SUB>> ]
-"15459" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;DeleteGlobalRef)<SUB>74</SUB>> ]
-"15472" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;DeleteGlobalRef)<SUB>78</SUB>> ]
-"15485" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;DeleteGlobalRef)<SUB>82</SUB>> ]
-"15461" [label = <(FIELD_IDENTIFIER,DeleteGlobalRef,DeleteGlobalRef)<SUB>74</SUB>> ]
-"15474" [label = <(FIELD_IDENTIFIER,DeleteGlobalRef,DeleteGlobalRef)<SUB>78</SUB>> ]
-"15487" [label = <(FIELD_IDENTIFIER,DeleteGlobalRef,DeleteGlobalRef)<SUB>82</SUB>> ]
-"15451" [label = <(METHOD,CleanUpJniEnv)<SUB>72</SUB>> ]
-"15492" [label = <(METHOD_RETURN,void)<SUB>72</SUB>> ]
-  "15454" -> "15461" 
-  "15454" -> "15467" 
-  "15467" -> "15474" 
-  "15467" -> "15480" 
-  "15480" -> "15492" 
-  "15480" -> "15487" 
-  "15458" -> "15463" 
-  "15463" -> "15467" 
-  "15471" -> "15476" 
-  "15476" -> "15480" 
-  "15484" -> "15489" 
-  "15489" -> "15492" 
-  "15459" -> "15458" 
-  "15472" -> "15471" 
-  "15485" -> "15484" 
-  "15461" -> "15459" 
-  "15474" -> "15472" 
-  "15487" -> "15485" 
-  "15451" -> "15454" 
+digraph "ExpectClassNotFound" {  
+"15202" [label = <(&lt;operator&gt;.shiftLeft,EXPECT_EQ(env_-&gt;FindClass(name), nullptr) &lt;&lt; name)<SUB>105</SUB>> ]
+"15203" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;FindClass(name), nullptr))<SUB>105</SUB>> ]
+"15212" [label = <(&lt;operator&gt;.logicalOr,!check_jni || check_jni_msg == nullptr)<SUB>106</SUB>> ]
+"15204" [label = <(FindClass,env_-&gt;FindClass(name))<SUB>105</SUB>> ]
+"15213" [label = <(&lt;operator&gt;.logicalNot,!check_jni)<SUB>106</SUB>> ]
+"15215" [label = <(&lt;operator&gt;.equals,check_jni_msg == nullptr)<SUB>106</SUB>> ]
+"15219" [label = <(&lt;operator&gt;.shiftLeft,EXPECT_TRUE(env_-&gt;ExceptionCheck()) &lt;&lt; name)<SUB>107</SUB>> ]
+"15226" [label = <(ExceptionClear,env_-&gt;ExceptionClear())<SUB>108</SUB>> ]
+"15205" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>105</SUB>> ]
+"15220" [label = <(EXPECT_TRUE,EXPECT_TRUE(env_-&gt;ExceptionCheck()))<SUB>107</SUB>> ]
+"15227" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ExceptionClear)<SUB>108</SUB>> ]
+"15232" [label = <(Check,abort_catcher-&gt;Check(check_jni_msg))<SUB>110</SUB>> ]
+"15207" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>105</SUB>> ]
+"15221" [label = <(ExceptionCheck,env_-&gt;ExceptionCheck())<SUB>107</SUB>> ]
+"15229" [label = <(FIELD_IDENTIFIER,ExceptionClear,ExceptionClear)<SUB>108</SUB>> ]
+"15233" [label = <(&lt;operator&gt;.indirectFieldAccess,abort_catcher-&gt;Check)<SUB>110</SUB>> ]
+"15222" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ExceptionCheck)<SUB>107</SUB>> ]
+"15235" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>110</SUB>> ]
+"15224" [label = <(FIELD_IDENTIFIER,ExceptionCheck,ExceptionCheck)<SUB>107</SUB>> ]
+"15196" [label = <(METHOD,ExpectClassNotFound)<SUB>103</SUB>> ]
+"15237" [label = <(METHOD_RETURN,void)<SUB>103</SUB>> ]
+  "15202" -> "15213" 
+  "15203" -> "15202" 
+  "15212" -> "15224" 
+  "15212" -> "15235" 
+  "15204" -> "15203" 
+  "15213" -> "15212" 
+  "15213" -> "15215" 
+  "15215" -> "15212" 
+  "15219" -> "15229" 
+  "15226" -> "15237" 
+  "15205" -> "15204" 
+  "15220" -> "15219" 
+  "15227" -> "15226" 
+  "15232" -> "15237" 
+  "15207" -> "15205" 
+  "15221" -> "15220" 
+  "15229" -> "15227" 
+  "15233" -> "15232" 
+  "15222" -> "15221" 
+  "15235" -> "15233" 
+  "15224" -> "15222" 
+  "15196" -> "15207" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/272-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/272-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/272-cfg.dot	2023-06-07 19:35:01.617387150 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/272-cfg.dot	2023-06-07 19:35:08.157386504 +0330
@@ -1,13 +1,126 @@
-digraph "TearDown" {  
-"15496" [label = <(CleanUpJniEnv,CleanUpJniEnv())<SUB>88</SUB>> ]
-"15497" [label = <(CommonRuntimeTest::TearDown,CommonRuntimeTest::TearDown())<SUB>89</SUB>> ]
-"15498" [label = <(&lt;operator&gt;.fieldAccess,CommonRuntimeTest::TearDown)<SUB>89</SUB>> ]
-"15500" [label = <(FIELD_IDENTIFIER,TearDown,TearDown)<SUB>89</SUB>> ]
-"15494" [label = <(METHOD,TearDown)<SUB>87</SUB>> ]
-"15501" [label = <(METHOD_RETURN,void)<SUB>87</SUB>> ]
-  "15496" -> "15500" 
-  "15497" -> "15501" 
-  "15498" -> "15497" 
-  "15500" -> "15498" 
-  "15494" -> "15496" 
+digraph "FindClassTest" {  
+"15243" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>115</SUB>> ]
+"15251" [label = <(FindClass,env_-&gt;FindClass(nullptr))<SUB>119</SUB>> ]
+"15256" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;))<SUB>120</SUB>> ]
+"15264" [label = <(ExpectClassFound,ExpectClassFound(&quot;java/lang/String&quot;))<SUB>124</SUB>> ]
+"15266" [label = <(ExpectClassFound,ExpectClassFound(&quot;[Ljava/lang/String;&quot;))<SUB>126</SUB>> ]
+"15268" [label = <(ExpectClassFound,ExpectClassFound(&quot;[C&quot;))<SUB>128</SUB>> ]
+"15270" [label = <(ExpectClassNotFound,ExpectClassNotFound(&quot;C&quot;, check_jni, nullptr, &amp;check_jni_abort_catcher))<SUB>131</SUB>> ]
+"15276" [label = <(ExpectClassNotFound,ExpectClassNotFound(&quot;V&quot;, check_jni, nullptr, &amp;check_jni_abort_catcher))<SUB>132</SUB>> ]
+"15282" [label = <(ExpectClassNotFound,ExpectClassNotFound(&quot;K&quot;, check_jni, nullptr, &amp;check_jni_abort_catcher))<SUB>133</SUB>> ]
+"15331" [label = <(ExpectClassNotFound,ExpectClassNotFound(&quot;Ljava.lang.String;&quot;, check_jni, &quot;illegal class name 'Ljava.lang.String;'&quot;,\012 &amp;check_jni_abort_catcher))<SUB>150</SUB>> ]
+"15337" [label = <(ExpectClassNotFound,ExpectClassNotFound(&quot;[java.lang.String&quot;, check_jni, &quot;illegal class name '[java.lang.String'&quot;,\012 &amp;check_jni_abort_catcher))<SUB>152</SUB>> ]
+"15343" [label = <(ExpectClassNotFound,ExpectClassNotFound(&quot;Ljava/lang/String;&quot;, check_jni, &quot;illegal class name 'Ljava/lang/String;'&quot;,\012 &amp;check_jni_abort_catcher))<SUB>156</SUB>> ]
+"15349" [label = <(ExpectClassNotFound,ExpectClassNotFound(&quot;[java/lang/String&quot;, check_jni, &quot;illegal class name '[java/lang/String'&quot;,\012 &amp;check_jni_abort_catcher))<SUB>160</SUB>> ]
+"15355" [label = <(ExpectClassNotFound,ExpectClassNotFound(&quot;[K&quot;, check_jni, &quot;illegal class name '[K'&quot;, &amp;check_jni_abort_catcher))<SUB>163</SUB>> ]
+"15361" [label = <(ExpectClassNotFound,ExpectClassNotFound(&quot;[V&quot;, check_jni, &quot;illegal class name '[V'&quot;, &amp;check_jni_abort_catcher))<SUB>166</SUB>> ]
+"15367" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>168</SUB>> ]
+"15245" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>115</SUB>> ]
+"15252" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>119</SUB>> ]
+"15257" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>120</SUB>> ]
+"15260" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;)<SUB>120</SUB>> ]
+"15274" [label = <(&lt;operator&gt;.addressOf,&amp;check_jni_abort_catcher)<SUB>131</SUB>> ]
+"15280" [label = <(&lt;operator&gt;.addressOf,&amp;check_jni_abort_catcher)<SUB>132</SUB>> ]
+"15286" [label = <(&lt;operator&gt;.addressOf,&amp;check_jni_abort_catcher)<SUB>133</SUB>> ]
+"15335" [label = <(&lt;operator&gt;.addressOf,&amp;check_jni_abort_catcher)<SUB>151</SUB>> ]
+"15341" [label = <(&lt;operator&gt;.addressOf,&amp;check_jni_abort_catcher)<SUB>153</SUB>> ]
+"15347" [label = <(&lt;operator&gt;.addressOf,&amp;check_jni_abort_catcher)<SUB>157</SUB>> ]
+"15353" [label = <(&lt;operator&gt;.addressOf,&amp;check_jni_abort_catcher)<SUB>161</SUB>> ]
+"15359" [label = <(&lt;operator&gt;.addressOf,&amp;check_jni_abort_catcher)<SUB>163</SUB>> ]
+"15365" [label = <(&lt;operator&gt;.addressOf,&amp;check_jni_abort_catcher)<SUB>166</SUB>> ]
+"15369" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>168</SUB>> ]
+"15246" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>115</SUB>> ]
+"15254" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>119</SUB>> ]
+"15259" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>120</SUB>> ]
+"15291" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;FindClass(&quot;java.lang.String&quot;), nullptr))<SUB>137</SUB>> ]
+"15298" [label = <(EXPECT_FALSE,EXPECT_FALSE(env_-&gt;ExceptionCheck()))<SUB>138</SUB>> ]
+"15303" [label = <(Check,check_jni_abort_catcher.Check(&quot;illegal class name 'java.lang.String'&quot;))<SUB>139</SUB>> ]
+"15308" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;FindClass(&quot;[Ljava.lang.String;&quot;), nullptr))<SUB>141</SUB>> ]
+"15315" [label = <(EXPECT_FALSE,EXPECT_FALSE(env_-&gt;ExceptionCheck()))<SUB>142</SUB>> ]
+"15320" [label = <(Check,check_jni_abort_catcher.Check(&quot;illegal class name '[Ljava.lang.String;'&quot;))<SUB>143</SUB>> ]
+"15370" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>168</SUB>> ]
+"15248" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>115</SUB>> ]
+"15292" [label = <(FindClass,env_-&gt;FindClass(&quot;java.lang.String&quot;))<SUB>137</SUB>> ]
+"15299" [label = <(ExceptionCheck,env_-&gt;ExceptionCheck())<SUB>138</SUB>> ]
+"15304" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>139</SUB>> ]
+"15309" [label = <(FindClass,env_-&gt;FindClass(&quot;[Ljava.lang.String;&quot;))<SUB>141</SUB>> ]
+"15316" [label = <(ExceptionCheck,env_-&gt;ExceptionCheck())<SUB>142</SUB>> ]
+"15321" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>143</SUB>> ]
+"15327" [label = <(ExpectClassFound,ExpectClassFound(&quot;java.lang.String&quot;))<SUB>146</SUB>> ]
+"15329" [label = <(ExpectClassFound,ExpectClassFound(&quot;[Ljava.lang.String;&quot;))<SUB>147</SUB>> ]
+"15372" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>168</SUB>> ]
+"15293" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>137</SUB>> ]
+"15300" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ExceptionCheck)<SUB>138</SUB>> ]
+"15306" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>139</SUB>> ]
+"15310" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>141</SUB>> ]
+"15317" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ExceptionCheck)<SUB>142</SUB>> ]
+"15323" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>143</SUB>> ]
+"15295" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>137</SUB>> ]
+"15302" [label = <(FIELD_IDENTIFIER,ExceptionCheck,ExceptionCheck)<SUB>138</SUB>> ]
+"15312" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>141</SUB>> ]
+"15319" [label = <(FIELD_IDENTIFIER,ExceptionCheck,ExceptionCheck)<SUB>142</SUB>> ]
+"15239" [label = <(METHOD,FindClassTest)<SUB>114</SUB>> ]
+"15374" [label = <(METHOD_RETURN,void)<SUB>114</SUB>> ]
+  "15243" -> "15254" 
+  "15251" -> "15259" 
+  "15256" -> "15264" 
+  "15264" -> "15266" 
+  "15266" -> "15268" 
+  "15268" -> "15274" 
+  "15270" -> "15280" 
+  "15276" -> "15286" 
+  "15282" -> "15295" 
+  "15282" -> "15327" 
+  "15331" -> "15341" 
+  "15337" -> "15347" 
+  "15343" -> "15353" 
+  "15349" -> "15359" 
+  "15355" -> "15365" 
+  "15361" -> "15372" 
+  "15367" -> "15374" 
+  "15245" -> "15243" 
+  "15252" -> "15251" 
+  "15257" -> "15260" 
+  "15260" -> "15256" 
+  "15274" -> "15270" 
+  "15280" -> "15276" 
+  "15286" -> "15282" 
+  "15335" -> "15331" 
+  "15341" -> "15337" 
+  "15347" -> "15343" 
+  "15353" -> "15349" 
+  "15359" -> "15355" 
+  "15365" -> "15361" 
+  "15369" -> "15367" 
+  "15246" -> "15245" 
+  "15254" -> "15252" 
+  "15259" -> "15257" 
+  "15291" -> "15302" 
+  "15298" -> "15306" 
+  "15303" -> "15312" 
+  "15308" -> "15319" 
+  "15315" -> "15323" 
+  "15320" -> "15335" 
+  "15370" -> "15369" 
+  "15248" -> "15246" 
+  "15292" -> "15291" 
+  "15299" -> "15298" 
+  "15304" -> "15303" 
+  "15309" -> "15308" 
+  "15316" -> "15315" 
+  "15321" -> "15320" 
+  "15327" -> "15329" 
+  "15329" -> "15335" 
+  "15372" -> "15370" 
+  "15293" -> "15292" 
+  "15300" -> "15299" 
+  "15306" -> "15304" 
+  "15310" -> "15309" 
+  "15317" -> "15316" 
+  "15323" -> "15321" 
+  "15295" -> "15293" 
+  "15302" -> "15300" 
+  "15312" -> "15310" 
+  "15319" -> "15317" 
+  "15239" -> "15248" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/273-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/273-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/273-cfg.dot	2023-06-07 19:35:01.617387150 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/273-cfg.dot	2023-06-07 19:35:08.157386504 +0330
@@ -1,37 +1,85 @@
-digraph "GetPrimitiveClass" {  
-"15507" [label = <(soa,soa(env_))<SUB>93</SUB>> ]
-"15509" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c = class_linker_-&gt;FindPrimitiveClass(descriptor))<SUB>94</SUB>> ]
-"15522" [label = <(CHECK,CHECK(c != nullptr))<SUB>95</SUB>> ]
-"15526" [label = <(RETURN,return soa.AddLocalReference&lt;jclass&gt;(c);,return soa.AddLocalReference&lt;jclass&gt;(c);)<SUB>96</SUB>> ]
-"15510" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c)<SUB>94</SUB>> ]
-"15517" [label = <(FindPrimitiveClass,class_linker_-&gt;FindPrimitiveClass(descriptor))<SUB>94</SUB>> ]
-"15523" [label = <(&lt;operator&gt;.notEquals,c != nullptr)<SUB>95</SUB>> ]
-"15527" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jclass&gt;(c))<SUB>96</SUB>> ]
-"15511" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>94</SUB>> ]
-"15518" [label = <(&lt;operator&gt;.indirectFieldAccess,class_linker_-&gt;FindPrimitiveClass)<SUB>94</SUB>> ]
-"15528" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jclass)<SUB>96</SUB>> ]
-"15513" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>94</SUB>> ]
-"15520" [label = <(FIELD_IDENTIFIER,FindPrimitiveClass,FindPrimitiveClass)<SUB>94</SUB>> ]
-"15529" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>96</SUB>> ]
-"15515" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>94</SUB>> ]
-"15531" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>96</SUB>> ]
-"15503" [label = <(METHOD,GetPrimitiveClass)<SUB>92</SUB>> ]
-"15534" [label = <(METHOD_RETURN,jclass)<SUB>92</SUB>> ]
-  "15507" -> "15515" 
-  "15509" -> "15523" 
-  "15522" -> "15531" 
-  "15526" -> "15534" 
-  "15510" -> "15520" 
-  "15517" -> "15509" 
-  "15523" -> "15522" 
-  "15527" -> "15526" 
-  "15511" -> "15510" 
-  "15518" -> "15517" 
-  "15528" -> "15527" 
-  "15513" -> "15511" 
-  "15520" -> "15518" 
-  "15529" -> "15528" 
-  "15515" -> "15513" 
-  "15531" -> "15529" 
-  "15503" -> "15507" 
+digraph "GetFieldIdBadArgumentTest" {  
+"15380" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>172</SUB>> ]
+"15389" [label = <(&lt;operator&gt;.assignment,c = env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>175</SUB>> ]
+"15396" [label = <(ASSERT_NE,ASSERT_NE(c, nullptr))<SUB>176</SUB>> ]
+"15400" [label = <(&lt;operator&gt;.assignment,fid = env_-&gt;GetFieldID(nullptr, &quot;count&quot;, &quot;I&quot;))<SUB>178</SUB>> ]
+"15409" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, fid))<SUB>179</SUB>> ]
+"15412" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;GetFieldID received NULL jclass&quot;\012 : &quot;java_class == null&quot;))<SUB>180</SUB>> ]
+"15420" [label = <(&lt;operator&gt;.assignment,fid = env_-&gt;GetFieldID(c, nullptr, &quot;I&quot;))<SUB>182</SUB>> ]
+"15429" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, fid))<SUB>183</SUB>> ]
+"15432" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;))<SUB>184</SUB>> ]
+"15440" [label = <(&lt;operator&gt;.assignment,fid = env_-&gt;GetFieldID(c, &quot;count&quot;, nullptr))<SUB>186</SUB>> ]
+"15449" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, fid))<SUB>187</SUB>> ]
+"15452" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;sig == null&quot;))<SUB>188</SUB>> ]
+"15460" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>191</SUB>> ]
+"15382" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>172</SUB>> ]
+"15391" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>175</SUB>> ]
+"15402" [label = <(GetFieldID,env_-&gt;GetFieldID(nullptr, &quot;count&quot;, &quot;I&quot;))<SUB>178</SUB>> ]
+"15413" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>180</SUB>> ]
+"15416" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;GetFieldID received NULL jclass&quot;\012 : &quot;java_class == null&quot;)<SUB>180</SUB>> ]
+"15422" [label = <(GetFieldID,env_-&gt;GetFieldID(c, nullptr, &quot;I&quot;))<SUB>182</SUB>> ]
+"15433" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>184</SUB>> ]
+"15436" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;)<SUB>184</SUB>> ]
+"15442" [label = <(GetFieldID,env_-&gt;GetFieldID(c, &quot;count&quot;, nullptr))<SUB>186</SUB>> ]
+"15453" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>188</SUB>> ]
+"15456" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;sig == null&quot;)<SUB>188</SUB>> ]
+"15462" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>191</SUB>> ]
+"15383" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>172</SUB>> ]
+"15392" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>175</SUB>> ]
+"15403" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetFieldID)<SUB>178</SUB>> ]
+"15415" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>180</SUB>> ]
+"15423" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetFieldID)<SUB>182</SUB>> ]
+"15435" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>184</SUB>> ]
+"15443" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetFieldID)<SUB>186</SUB>> ]
+"15455" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>188</SUB>> ]
+"15463" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>191</SUB>> ]
+"15385" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>172</SUB>> ]
+"15394" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>175</SUB>> ]
+"15405" [label = <(FIELD_IDENTIFIER,GetFieldID,GetFieldID)<SUB>178</SUB>> ]
+"15425" [label = <(FIELD_IDENTIFIER,GetFieldID,GetFieldID)<SUB>182</SUB>> ]
+"15445" [label = <(FIELD_IDENTIFIER,GetFieldID,GetFieldID)<SUB>186</SUB>> ]
+"15465" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>191</SUB>> ]
+"15376" [label = <(METHOD,GetFieldIdBadArgumentTest)<SUB>171</SUB>> ]
+"15467" [label = <(METHOD_RETURN,void)<SUB>171</SUB>> ]
+  "15380" -> "15394" 
+  "15389" -> "15396" 
+  "15396" -> "15405" 
+  "15400" -> "15409" 
+  "15409" -> "15415" 
+  "15412" -> "15425" 
+  "15420" -> "15429" 
+  "15429" -> "15435" 
+  "15432" -> "15445" 
+  "15440" -> "15449" 
+  "15449" -> "15455" 
+  "15452" -> "15465" 
+  "15460" -> "15467" 
+  "15382" -> "15380" 
+  "15391" -> "15389" 
+  "15402" -> "15400" 
+  "15413" -> "15416" 
+  "15416" -> "15412" 
+  "15422" -> "15420" 
+  "15433" -> "15436" 
+  "15436" -> "15432" 
+  "15442" -> "15440" 
+  "15453" -> "15456" 
+  "15456" -> "15452" 
+  "15462" -> "15460" 
+  "15383" -> "15382" 
+  "15392" -> "15391" 
+  "15403" -> "15402" 
+  "15415" -> "15413" 
+  "15423" -> "15422" 
+  "15435" -> "15433" 
+  "15443" -> "15442" 
+  "15455" -> "15453" 
+  "15463" -> "15462" 
+  "15385" -> "15383" 
+  "15394" -> "15392" 
+  "15405" -> "15403" 
+  "15425" -> "15423" 
+  "15445" -> "15443" 
+  "15465" -> "15463" 
+  "15376" -> "15385" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/274-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/274-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/274-cfg.dot	2023-06-07 19:35:01.617387150 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/274-cfg.dot	2023-06-07 19:35:08.157386504 +0330
@@ -1,25 +1,85 @@
-digraph "ExpectClassFound" {  
-"15539" [label = <(&lt;operator&gt;.shiftLeft,EXPECT_NE(env_-&gt;FindClass(name), nullptr) &lt;&lt; name)<SUB>100</SUB>> ]
-"15548" [label = <(&lt;operator&gt;.shiftLeft,EXPECT_FALSE(env_-&gt;ExceptionCheck()) &lt;&lt; name)<SUB>101</SUB>> ]
-"15540" [label = <(EXPECT_NE,EXPECT_NE(env_-&gt;FindClass(name), nullptr))<SUB>100</SUB>> ]
-"15549" [label = <(EXPECT_FALSE,EXPECT_FALSE(env_-&gt;ExceptionCheck()))<SUB>101</SUB>> ]
-"15541" [label = <(FindClass,env_-&gt;FindClass(name))<SUB>100</SUB>> ]
-"15550" [label = <(ExceptionCheck,env_-&gt;ExceptionCheck())<SUB>101</SUB>> ]
-"15542" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>100</SUB>> ]
-"15551" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ExceptionCheck)<SUB>101</SUB>> ]
-"15544" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>100</SUB>> ]
-"15553" [label = <(FIELD_IDENTIFIER,ExceptionCheck,ExceptionCheck)<SUB>101</SUB>> ]
-"15536" [label = <(METHOD,ExpectClassFound)<SUB>99</SUB>> ]
-"15555" [label = <(METHOD_RETURN,void)<SUB>99</SUB>> ]
-  "15539" -> "15553" 
-  "15548" -> "15555" 
-  "15540" -> "15539" 
-  "15549" -> "15548" 
-  "15541" -> "15540" 
-  "15550" -> "15549" 
-  "15542" -> "15541" 
-  "15551" -> "15550" 
-  "15544" -> "15542" 
-  "15553" -> "15551" 
-  "15536" -> "15544" 
+digraph "GetStaticFieldIdBadArgumentTest" {  
+"15473" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>195</SUB>> ]
+"15482" [label = <(&lt;operator&gt;.assignment,c = env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>198</SUB>> ]
+"15489" [label = <(ASSERT_NE,ASSERT_NE(c, nullptr))<SUB>199</SUB>> ]
+"15493" [label = <(&lt;operator&gt;.assignment,fid = env_-&gt;GetStaticFieldID(nullptr, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;Ljava/util/Comparator;&quot;))<SUB>201</SUB>> ]
+"15502" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, fid))<SUB>202</SUB>> ]
+"15505" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;GetStaticFieldID received NULL jclass&quot;\012 : &quot;java_class == null&quot;))<SUB>203</SUB>> ]
+"15513" [label = <(&lt;operator&gt;.assignment,fid = env_-&gt;GetStaticFieldID(c, nullptr, &quot;Ljava/util/Comparator;&quot;))<SUB>205</SUB>> ]
+"15522" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, fid))<SUB>206</SUB>> ]
+"15525" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;))<SUB>207</SUB>> ]
+"15533" [label = <(&lt;operator&gt;.assignment,fid = env_-&gt;GetStaticFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, nullptr))<SUB>209</SUB>> ]
+"15542" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, fid))<SUB>210</SUB>> ]
+"15545" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;sig == null&quot;))<SUB>211</SUB>> ]
+"15553" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>214</SUB>> ]
+"15475" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>195</SUB>> ]
+"15484" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>198</SUB>> ]
+"15495" [label = <(GetStaticFieldID,env_-&gt;GetStaticFieldID(nullptr, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;Ljava/util/Comparator;&quot;))<SUB>201</SUB>> ]
+"15506" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>203</SUB>> ]
+"15509" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;GetStaticFieldID received NULL jclass&quot;\012 : &quot;java_class == null&quot;)<SUB>203</SUB>> ]
+"15515" [label = <(GetStaticFieldID,env_-&gt;GetStaticFieldID(c, nullptr, &quot;Ljava/util/Comparator;&quot;))<SUB>205</SUB>> ]
+"15526" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>207</SUB>> ]
+"15529" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;)<SUB>207</SUB>> ]
+"15535" [label = <(GetStaticFieldID,env_-&gt;GetStaticFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, nullptr))<SUB>209</SUB>> ]
+"15546" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>211</SUB>> ]
+"15549" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;sig == null&quot;)<SUB>211</SUB>> ]
+"15555" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>214</SUB>> ]
+"15476" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>195</SUB>> ]
+"15485" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>198</SUB>> ]
+"15496" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetStaticFieldID)<SUB>201</SUB>> ]
+"15508" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>203</SUB>> ]
+"15516" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetStaticFieldID)<SUB>205</SUB>> ]
+"15528" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>207</SUB>> ]
+"15536" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetStaticFieldID)<SUB>209</SUB>> ]
+"15548" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>211</SUB>> ]
+"15556" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>214</SUB>> ]
+"15478" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>195</SUB>> ]
+"15487" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>198</SUB>> ]
+"15498" [label = <(FIELD_IDENTIFIER,GetStaticFieldID,GetStaticFieldID)<SUB>201</SUB>> ]
+"15518" [label = <(FIELD_IDENTIFIER,GetStaticFieldID,GetStaticFieldID)<SUB>205</SUB>> ]
+"15538" [label = <(FIELD_IDENTIFIER,GetStaticFieldID,GetStaticFieldID)<SUB>209</SUB>> ]
+"15558" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>214</SUB>> ]
+"15469" [label = <(METHOD,GetStaticFieldIdBadArgumentTest)<SUB>194</SUB>> ]
+"15560" [label = <(METHOD_RETURN,void)<SUB>194</SUB>> ]
+  "15473" -> "15487" 
+  "15482" -> "15489" 
+  "15489" -> "15498" 
+  "15493" -> "15502" 
+  "15502" -> "15508" 
+  "15505" -> "15518" 
+  "15513" -> "15522" 
+  "15522" -> "15528" 
+  "15525" -> "15538" 
+  "15533" -> "15542" 
+  "15542" -> "15548" 
+  "15545" -> "15558" 
+  "15553" -> "15560" 
+  "15475" -> "15473" 
+  "15484" -> "15482" 
+  "15495" -> "15493" 
+  "15506" -> "15509" 
+  "15509" -> "15505" 
+  "15515" -> "15513" 
+  "15526" -> "15529" 
+  "15529" -> "15525" 
+  "15535" -> "15533" 
+  "15546" -> "15549" 
+  "15549" -> "15545" 
+  "15555" -> "15553" 
+  "15476" -> "15475" 
+  "15485" -> "15484" 
+  "15496" -> "15495" 
+  "15508" -> "15506" 
+  "15516" -> "15515" 
+  "15528" -> "15526" 
+  "15536" -> "15535" 
+  "15548" -> "15546" 
+  "15556" -> "15555" 
+  "15478" -> "15476" 
+  "15487" -> "15485" 
+  "15498" -> "15496" 
+  "15518" -> "15516" 
+  "15538" -> "15536" 
+  "15558" -> "15556" 
+  "15469" -> "15478" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/275-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/275-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/275-cfg.dot	2023-06-07 19:35:01.617387150 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/275-cfg.dot	2023-06-07 19:35:08.157386504 +0330
@@ -1,45 +1,87 @@
-digraph "ExpectClassNotFound" {  
-"15563" [label = <(&lt;operator&gt;.shiftLeft,EXPECT_EQ(env_-&gt;FindClass(name), nullptr) &lt;&lt; name)<SUB>106</SUB>> ]
-"15564" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;FindClass(name), nullptr))<SUB>106</SUB>> ]
-"15573" [label = <(&lt;operator&gt;.logicalOr,!check_jni || check_jni_msg == nullptr)<SUB>107</SUB>> ]
-"15565" [label = <(FindClass,env_-&gt;FindClass(name))<SUB>106</SUB>> ]
-"15574" [label = <(&lt;operator&gt;.logicalNot,!check_jni)<SUB>107</SUB>> ]
-"15576" [label = <(&lt;operator&gt;.equals,check_jni_msg == nullptr)<SUB>107</SUB>> ]
-"15580" [label = <(&lt;operator&gt;.shiftLeft,EXPECT_TRUE(env_-&gt;ExceptionCheck()) &lt;&lt; name)<SUB>108</SUB>> ]
-"15587" [label = <(ExceptionClear,env_-&gt;ExceptionClear())<SUB>109</SUB>> ]
-"15566" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>106</SUB>> ]
-"15581" [label = <(EXPECT_TRUE,EXPECT_TRUE(env_-&gt;ExceptionCheck()))<SUB>108</SUB>> ]
-"15588" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ExceptionClear)<SUB>109</SUB>> ]
-"15593" [label = <(Check,abort_catcher-&gt;Check(check_jni_msg))<SUB>111</SUB>> ]
-"15568" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>106</SUB>> ]
-"15582" [label = <(ExceptionCheck,env_-&gt;ExceptionCheck())<SUB>108</SUB>> ]
-"15590" [label = <(FIELD_IDENTIFIER,ExceptionClear,ExceptionClear)<SUB>109</SUB>> ]
-"15594" [label = <(&lt;operator&gt;.indirectFieldAccess,abort_catcher-&gt;Check)<SUB>111</SUB>> ]
-"15583" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ExceptionCheck)<SUB>108</SUB>> ]
-"15596" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>111</SUB>> ]
-"15585" [label = <(FIELD_IDENTIFIER,ExceptionCheck,ExceptionCheck)<SUB>108</SUB>> ]
-"15557" [label = <(METHOD,ExpectClassNotFound)<SUB>104</SUB>> ]
-"15598" [label = <(METHOD_RETURN,void)<SUB>104</SUB>> ]
-  "15563" -> "15574" 
-  "15564" -> "15563" 
-  "15573" -> "15585" 
-  "15573" -> "15596" 
-  "15565" -> "15564" 
-  "15574" -> "15573" 
-  "15574" -> "15576" 
-  "15576" -> "15573" 
-  "15580" -> "15590" 
-  "15587" -> "15598" 
-  "15566" -> "15565" 
-  "15581" -> "15580" 
-  "15588" -> "15587" 
-  "15593" -> "15598" 
+digraph "GetMethodIdBadArgumentTest" {  
+"15566" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>218</SUB>> ]
+"15575" [label = <(&lt;operator&gt;.assignment,method = env_-&gt;GetMethodID(nullptr, &quot;&lt;init&gt;&quot;, &quot;(Ljava/lang/String;)V&quot;))<SUB>221</SUB>> ]
+"15584" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, method))<SUB>222</SUB>> ]
+"15587" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;GetMethodID received NULL jclass&quot;\012 : &quot;java_class == null&quot;))<SUB>223</SUB>> ]
+"15596" [label = <(&lt;operator&gt;.assignment,jlnsme = env_-&gt;FindClass(&quot;java/lang/NoSuchMethodError&quot;))<SUB>225</SUB>> ]
+"15603" [label = <(ASSERT_TRUE,ASSERT_TRUE(jlnsme != nullptr))<SUB>226</SUB>> ]
+"15607" [label = <(&lt;operator&gt;.assignment,method = env_-&gt;GetMethodID(jlnsme, nullptr, &quot;(Ljava/lang/String;)V&quot;))<SUB>227</SUB>> ]
+"15616" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, method))<SUB>228</SUB>> ]
+"15619" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;))<SUB>229</SUB>> ]
+"15627" [label = <(&lt;operator&gt;.assignment,method = env_-&gt;GetMethodID(jlnsme, &quot;&lt;init&gt;&quot;, nullptr))<SUB>231</SUB>> ]
+"15636" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, method))<SUB>232</SUB>> ]
+"15639" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;sig == null&quot;))<SUB>233</SUB>> ]
+"15647" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>236</SUB>> ]
+"15568" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>218</SUB>> ]
+"15577" [label = <(GetMethodID,env_-&gt;GetMethodID(nullptr, &quot;&lt;init&gt;&quot;, &quot;(Ljava/lang/String;)V&quot;))<SUB>221</SUB>> ]
+"15588" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>223</SUB>> ]
+"15591" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;GetMethodID received NULL jclass&quot;\012 : &quot;java_class == null&quot;)<SUB>223</SUB>> ]
+"15598" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/NoSuchMethodError&quot;))<SUB>225</SUB>> ]
+"15604" [label = <(&lt;operator&gt;.notEquals,jlnsme != nullptr)<SUB>226</SUB>> ]
+"15609" [label = <(GetMethodID,env_-&gt;GetMethodID(jlnsme, nullptr, &quot;(Ljava/lang/String;)V&quot;))<SUB>227</SUB>> ]
+"15620" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>229</SUB>> ]
+"15623" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;)<SUB>229</SUB>> ]
+"15629" [label = <(GetMethodID,env_-&gt;GetMethodID(jlnsme, &quot;&lt;init&gt;&quot;, nullptr))<SUB>231</SUB>> ]
+"15640" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>233</SUB>> ]
+"15643" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;sig == null&quot;)<SUB>233</SUB>> ]
+"15649" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>236</SUB>> ]
+"15569" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>218</SUB>> ]
+"15578" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetMethodID)<SUB>221</SUB>> ]
+"15590" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>223</SUB>> ]
+"15599" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>225</SUB>> ]
+"15610" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetMethodID)<SUB>227</SUB>> ]
+"15622" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>229</SUB>> ]
+"15630" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetMethodID)<SUB>231</SUB>> ]
+"15642" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>233</SUB>> ]
+"15650" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>236</SUB>> ]
+"15571" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>218</SUB>> ]
+"15580" [label = <(FIELD_IDENTIFIER,GetMethodID,GetMethodID)<SUB>221</SUB>> ]
+"15601" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>225</SUB>> ]
+"15612" [label = <(FIELD_IDENTIFIER,GetMethodID,GetMethodID)<SUB>227</SUB>> ]
+"15632" [label = <(FIELD_IDENTIFIER,GetMethodID,GetMethodID)<SUB>231</SUB>> ]
+"15652" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>236</SUB>> ]
+"15562" [label = <(METHOD,GetMethodIdBadArgumentTest)<SUB>217</SUB>> ]
+"15654" [label = <(METHOD_RETURN,void)<SUB>217</SUB>> ]
+  "15566" -> "15580" 
+  "15575" -> "15584" 
+  "15584" -> "15590" 
+  "15587" -> "15601" 
+  "15596" -> "15604" 
+  "15603" -> "15612" 
+  "15607" -> "15616" 
+  "15616" -> "15622" 
+  "15619" -> "15632" 
+  "15627" -> "15636" 
+  "15636" -> "15642" 
+  "15639" -> "15652" 
+  "15647" -> "15654" 
   "15568" -> "15566" 
-  "15582" -> "15581" 
+  "15577" -> "15575" 
+  "15588" -> "15591" 
+  "15591" -> "15587" 
+  "15598" -> "15596" 
+  "15604" -> "15603" 
+  "15609" -> "15607" 
+  "15620" -> "15623" 
+  "15623" -> "15619" 
+  "15629" -> "15627" 
+  "15640" -> "15643" 
+  "15643" -> "15639" 
+  "15649" -> "15647" 
+  "15569" -> "15568" 
+  "15578" -> "15577" 
   "15590" -> "15588" 
-  "15594" -> "15593" 
-  "15583" -> "15582" 
-  "15596" -> "15594" 
-  "15585" -> "15583" 
-  "15557" -> "15568" 
+  "15599" -> "15598" 
+  "15610" -> "15609" 
+  "15622" -> "15620" 
+  "15630" -> "15629" 
+  "15642" -> "15640" 
+  "15650" -> "15649" 
+  "15571" -> "15569" 
+  "15580" -> "15578" 
+  "15601" -> "15599" 
+  "15612" -> "15610" 
+  "15632" -> "15630" 
+  "15652" -> "15650" 
+  "15562" -> "15571" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/276-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/276-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/276-cfg.dot	2023-06-07 19:35:01.627387148 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/276-cfg.dot	2023-06-07 19:35:08.157386504 +0330
@@ -1,126 +1,83 @@
-digraph "FindClassTest" {  
-"15604" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>116</SUB>> ]
-"15612" [label = <(FindClass,env_-&gt;FindClass(nullptr))<SUB>120</SUB>> ]
-"15617" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;))<SUB>121</SUB>> ]
-"15625" [label = <(ExpectClassFound,ExpectClassFound(&quot;java/lang/String&quot;))<SUB>125</SUB>> ]
-"15627" [label = <(ExpectClassFound,ExpectClassFound(&quot;[Ljava/lang/String;&quot;))<SUB>127</SUB>> ]
-"15629" [label = <(ExpectClassFound,ExpectClassFound(&quot;[C&quot;))<SUB>129</SUB>> ]
-"15631" [label = <(ExpectClassNotFound,ExpectClassNotFound(&quot;C&quot;, check_jni, nullptr, &amp;check_jni_abort_catcher))<SUB>132</SUB>> ]
-"15637" [label = <(ExpectClassNotFound,ExpectClassNotFound(&quot;V&quot;, check_jni, nullptr, &amp;check_jni_abort_catcher))<SUB>133</SUB>> ]
-"15643" [label = <(ExpectClassNotFound,ExpectClassNotFound(&quot;K&quot;, check_jni, nullptr, &amp;check_jni_abort_catcher))<SUB>134</SUB>> ]
-"15692" [label = <(ExpectClassNotFound,ExpectClassNotFound(&quot;Ljava.lang.String;&quot;, check_jni, &quot;illegal class name 'Ljava.lang.String;'&quot;,\012 &amp;check_jni_abort_catcher))<SUB>151</SUB>> ]
-"15698" [label = <(ExpectClassNotFound,ExpectClassNotFound(&quot;[java.lang.String&quot;, check_jni, &quot;illegal class name '[java.lang.String'&quot;,\012 &amp;check_jni_abort_catcher))<SUB>153</SUB>> ]
-"15704" [label = <(ExpectClassNotFound,ExpectClassNotFound(&quot;Ljava/lang/String;&quot;, check_jni, &quot;illegal class name 'Ljava/lang/String;'&quot;,\012 &amp;check_jni_abort_catcher))<SUB>157</SUB>> ]
-"15710" [label = <(ExpectClassNotFound,ExpectClassNotFound(&quot;[java/lang/String&quot;, check_jni, &quot;illegal class name '[java/lang/String'&quot;,\012 &amp;check_jni_abort_catcher))<SUB>161</SUB>> ]
-"15716" [label = <(ExpectClassNotFound,ExpectClassNotFound(&quot;[K&quot;, check_jni, &quot;illegal class name '[K'&quot;, &amp;check_jni_abort_catcher))<SUB>164</SUB>> ]
-"15722" [label = <(ExpectClassNotFound,ExpectClassNotFound(&quot;[V&quot;, check_jni, &quot;illegal class name '[V'&quot;, &amp;check_jni_abort_catcher))<SUB>167</SUB>> ]
-"15728" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>169</SUB>> ]
-"15606" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>116</SUB>> ]
-"15613" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>120</SUB>> ]
-"15618" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>121</SUB>> ]
-"15621" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;)<SUB>121</SUB>> ]
-"15635" [label = <(&lt;operator&gt;.addressOf,&amp;check_jni_abort_catcher)<SUB>132</SUB>> ]
-"15641" [label = <(&lt;operator&gt;.addressOf,&amp;check_jni_abort_catcher)<SUB>133</SUB>> ]
-"15647" [label = <(&lt;operator&gt;.addressOf,&amp;check_jni_abort_catcher)<SUB>134</SUB>> ]
-"15696" [label = <(&lt;operator&gt;.addressOf,&amp;check_jni_abort_catcher)<SUB>152</SUB>> ]
-"15702" [label = <(&lt;operator&gt;.addressOf,&amp;check_jni_abort_catcher)<SUB>154</SUB>> ]
-"15708" [label = <(&lt;operator&gt;.addressOf,&amp;check_jni_abort_catcher)<SUB>158</SUB>> ]
-"15714" [label = <(&lt;operator&gt;.addressOf,&amp;check_jni_abort_catcher)<SUB>162</SUB>> ]
-"15720" [label = <(&lt;operator&gt;.addressOf,&amp;check_jni_abort_catcher)<SUB>164</SUB>> ]
-"15726" [label = <(&lt;operator&gt;.addressOf,&amp;check_jni_abort_catcher)<SUB>167</SUB>> ]
-"15730" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>169</SUB>> ]
-"15607" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>116</SUB>> ]
-"15615" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>120</SUB>> ]
-"15620" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>121</SUB>> ]
-"15652" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;FindClass(&quot;java.lang.String&quot;), nullptr))<SUB>138</SUB>> ]
-"15659" [label = <(EXPECT_FALSE,EXPECT_FALSE(env_-&gt;ExceptionCheck()))<SUB>139</SUB>> ]
-"15664" [label = <(Check,check_jni_abort_catcher.Check(&quot;illegal class name 'java.lang.String'&quot;))<SUB>140</SUB>> ]
-"15669" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;FindClass(&quot;[Ljava.lang.String;&quot;), nullptr))<SUB>142</SUB>> ]
-"15676" [label = <(EXPECT_FALSE,EXPECT_FALSE(env_-&gt;ExceptionCheck()))<SUB>143</SUB>> ]
-"15681" [label = <(Check,check_jni_abort_catcher.Check(&quot;illegal class name '[Ljava.lang.String;'&quot;))<SUB>144</SUB>> ]
-"15731" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>169</SUB>> ]
-"15609" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>116</SUB>> ]
-"15653" [label = <(FindClass,env_-&gt;FindClass(&quot;java.lang.String&quot;))<SUB>138</SUB>> ]
-"15660" [label = <(ExceptionCheck,env_-&gt;ExceptionCheck())<SUB>139</SUB>> ]
-"15665" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>140</SUB>> ]
-"15670" [label = <(FindClass,env_-&gt;FindClass(&quot;[Ljava.lang.String;&quot;))<SUB>142</SUB>> ]
-"15677" [label = <(ExceptionCheck,env_-&gt;ExceptionCheck())<SUB>143</SUB>> ]
-"15682" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>144</SUB>> ]
-"15688" [label = <(ExpectClassFound,ExpectClassFound(&quot;java.lang.String&quot;))<SUB>147</SUB>> ]
-"15690" [label = <(ExpectClassFound,ExpectClassFound(&quot;[Ljava.lang.String;&quot;))<SUB>148</SUB>> ]
-"15733" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>169</SUB>> ]
-"15654" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>138</SUB>> ]
-"15661" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ExceptionCheck)<SUB>139</SUB>> ]
-"15667" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>140</SUB>> ]
-"15671" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>142</SUB>> ]
-"15678" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ExceptionCheck)<SUB>143</SUB>> ]
-"15684" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>144</SUB>> ]
-"15656" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>138</SUB>> ]
-"15663" [label = <(FIELD_IDENTIFIER,ExceptionCheck,ExceptionCheck)<SUB>139</SUB>> ]
-"15673" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>142</SUB>> ]
-"15680" [label = <(FIELD_IDENTIFIER,ExceptionCheck,ExceptionCheck)<SUB>143</SUB>> ]
-"15600" [label = <(METHOD,FindClassTest)<SUB>115</SUB>> ]
-"15735" [label = <(METHOD_RETURN,void)<SUB>115</SUB>> ]
-  "15604" -> "15615" 
-  "15612" -> "15620" 
-  "15617" -> "15625" 
-  "15625" -> "15627" 
-  "15627" -> "15629" 
-  "15629" -> "15635" 
-  "15631" -> "15641" 
-  "15637" -> "15647" 
-  "15643" -> "15656" 
-  "15643" -> "15688" 
-  "15692" -> "15702" 
-  "15698" -> "15708" 
-  "15704" -> "15714" 
-  "15710" -> "15720" 
-  "15716" -> "15726" 
-  "15722" -> "15733" 
-  "15728" -> "15735" 
-  "15606" -> "15604" 
-  "15613" -> "15612" 
-  "15618" -> "15621" 
-  "15621" -> "15617" 
-  "15635" -> "15631" 
-  "15641" -> "15637" 
-  "15647" -> "15643" 
-  "15696" -> "15692" 
-  "15702" -> "15698" 
-  "15708" -> "15704" 
-  "15714" -> "15710" 
-  "15720" -> "15716" 
-  "15726" -> "15722" 
-  "15730" -> "15728" 
-  "15607" -> "15606" 
-  "15615" -> "15613" 
-  "15620" -> "15618" 
-  "15652" -> "15663" 
-  "15659" -> "15667" 
-  "15664" -> "15673" 
-  "15669" -> "15680" 
-  "15676" -> "15684" 
-  "15681" -> "15696" 
-  "15731" -> "15730" 
-  "15609" -> "15607" 
-  "15653" -> "15652" 
-  "15660" -> "15659" 
-  "15665" -> "15664" 
-  "15670" -> "15669" 
-  "15677" -> "15676" 
-  "15682" -> "15681" 
-  "15688" -> "15690" 
-  "15690" -> "15696" 
-  "15733" -> "15731" 
-  "15654" -> "15653" 
-  "15661" -> "15660" 
-  "15667" -> "15665" 
-  "15671" -> "15670" 
-  "15678" -> "15677" 
+digraph "GetStaticMethodIdBadArgumentTest" {  
+"15660" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>240</SUB>> ]
+"15669" [label = <(&lt;operator&gt;.assignment,method = env_-&gt;GetStaticMethodID(nullptr, &quot;valueOf&quot;, &quot;(I)Ljava/lang/String;&quot;))<SUB>243</SUB>> ]
+"15678" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, method))<SUB>244</SUB>> ]
+"15681" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;GetStaticMethodID received NULL jclass&quot;\012 : &quot;java_class == null&quot;))<SUB>245</SUB>> ]
+"15690" [label = <(&lt;operator&gt;.assignment,jlstring = env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>247</SUB>> ]
+"15697" [label = <(&lt;operator&gt;.assignment,method = env_-&gt;GetStaticMethodID(jlstring, nullptr, &quot;(I)Ljava/lang/String;&quot;))<SUB>248</SUB>> ]
+"15706" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, method))<SUB>249</SUB>> ]
+"15709" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;))<SUB>250</SUB>> ]
+"15717" [label = <(&lt;operator&gt;.assignment,method = env_-&gt;GetStaticMethodID(jlstring, &quot;valueOf&quot;, nullptr))<SUB>252</SUB>> ]
+"15726" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, method))<SUB>253</SUB>> ]
+"15729" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;sig == null&quot;))<SUB>254</SUB>> ]
+"15737" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>257</SUB>> ]
+"15662" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>240</SUB>> ]
+"15671" [label = <(GetStaticMethodID,env_-&gt;GetStaticMethodID(nullptr, &quot;valueOf&quot;, &quot;(I)Ljava/lang/String;&quot;))<SUB>243</SUB>> ]
+"15682" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>245</SUB>> ]
+"15685" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;GetStaticMethodID received NULL jclass&quot;\012 : &quot;java_class == null&quot;)<SUB>245</SUB>> ]
+"15692" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>247</SUB>> ]
+"15699" [label = <(GetStaticMethodID,env_-&gt;GetStaticMethodID(jlstring, nullptr, &quot;(I)Ljava/lang/String;&quot;))<SUB>248</SUB>> ]
+"15710" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>250</SUB>> ]
+"15713" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;)<SUB>250</SUB>> ]
+"15719" [label = <(GetStaticMethodID,env_-&gt;GetStaticMethodID(jlstring, &quot;valueOf&quot;, nullptr))<SUB>252</SUB>> ]
+"15730" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>254</SUB>> ]
+"15733" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;sig == null&quot;)<SUB>254</SUB>> ]
+"15739" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>257</SUB>> ]
+"15663" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>240</SUB>> ]
+"15672" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetStaticMethodID)<SUB>243</SUB>> ]
+"15684" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>245</SUB>> ]
+"15693" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>247</SUB>> ]
+"15700" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetStaticMethodID)<SUB>248</SUB>> ]
+"15712" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>250</SUB>> ]
+"15720" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetStaticMethodID)<SUB>252</SUB>> ]
+"15732" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>254</SUB>> ]
+"15740" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>257</SUB>> ]
+"15665" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>240</SUB>> ]
+"15674" [label = <(FIELD_IDENTIFIER,GetStaticMethodID,GetStaticMethodID)<SUB>243</SUB>> ]
+"15695" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>247</SUB>> ]
+"15702" [label = <(FIELD_IDENTIFIER,GetStaticMethodID,GetStaticMethodID)<SUB>248</SUB>> ]
+"15722" [label = <(FIELD_IDENTIFIER,GetStaticMethodID,GetStaticMethodID)<SUB>252</SUB>> ]
+"15742" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>257</SUB>> ]
+"15656" [label = <(METHOD,GetStaticMethodIdBadArgumentTest)<SUB>239</SUB>> ]
+"15744" [label = <(METHOD_RETURN,void)<SUB>239</SUB>> ]
+  "15660" -> "15674" 
+  "15669" -> "15678" 
+  "15678" -> "15684" 
+  "15681" -> "15695" 
+  "15690" -> "15702" 
+  "15697" -> "15706" 
+  "15706" -> "15712" 
+  "15709" -> "15722" 
+  "15717" -> "15726" 
+  "15726" -> "15732" 
+  "15729" -> "15742" 
+  "15737" -> "15744" 
+  "15662" -> "15660" 
+  "15671" -> "15669" 
+  "15682" -> "15685" 
+  "15685" -> "15681" 
+  "15692" -> "15690" 
+  "15699" -> "15697" 
+  "15710" -> "15713" 
+  "15713" -> "15709" 
+  "15719" -> "15717" 
+  "15730" -> "15733" 
+  "15733" -> "15729" 
+  "15739" -> "15737" 
+  "15663" -> "15662" 
+  "15672" -> "15671" 
   "15684" -> "15682" 
-  "15656" -> "15654" 
-  "15663" -> "15661" 
-  "15673" -> "15671" 
-  "15680" -> "15678" 
-  "15600" -> "15609" 
+  "15693" -> "15692" 
+  "15700" -> "15699" 
+  "15712" -> "15710" 
+  "15720" -> "15719" 
+  "15732" -> "15730" 
+  "15740" -> "15739" 
+  "15665" -> "15663" 
+  "15674" -> "15672" 
+  "15695" -> "15693" 
+  "15702" -> "15700" 
+  "15722" -> "15720" 
+  "15742" -> "15740" 
+  "15656" -> "15665" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/277-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/277-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/277-cfg.dot	2023-06-07 19:35:01.627387148 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/277-cfg.dot	2023-06-07 19:35:08.157386504 +0330
@@ -1,85 +1,96 @@
-digraph "GetFieldIdBadArgumentTest" {  
-"15741" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>173</SUB>> ]
-"15750" [label = <(&lt;operator&gt;.assignment,c = env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>176</SUB>> ]
-"15757" [label = <(ASSERT_NE,ASSERT_NE(c, nullptr))<SUB>177</SUB>> ]
-"15761" [label = <(&lt;operator&gt;.assignment,fid = env_-&gt;GetFieldID(nullptr, &quot;count&quot;, &quot;I&quot;))<SUB>179</SUB>> ]
-"15770" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, fid))<SUB>180</SUB>> ]
-"15773" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;GetFieldID received NULL jclass&quot;\012 : &quot;java_class == null&quot;))<SUB>181</SUB>> ]
-"15781" [label = <(&lt;operator&gt;.assignment,fid = env_-&gt;GetFieldID(c, nullptr, &quot;I&quot;))<SUB>183</SUB>> ]
-"15790" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, fid))<SUB>184</SUB>> ]
-"15793" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;))<SUB>185</SUB>> ]
-"15801" [label = <(&lt;operator&gt;.assignment,fid = env_-&gt;GetFieldID(c, &quot;count&quot;, nullptr))<SUB>187</SUB>> ]
-"15810" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, fid))<SUB>188</SUB>> ]
-"15813" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;sig == null&quot;))<SUB>189</SUB>> ]
-"15821" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>192</SUB>> ]
-"15743" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>173</SUB>> ]
-"15752" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>176</SUB>> ]
-"15763" [label = <(GetFieldID,env_-&gt;GetFieldID(nullptr, &quot;count&quot;, &quot;I&quot;))<SUB>179</SUB>> ]
-"15774" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>181</SUB>> ]
-"15777" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;GetFieldID received NULL jclass&quot;\012 : &quot;java_class == null&quot;)<SUB>181</SUB>> ]
-"15783" [label = <(GetFieldID,env_-&gt;GetFieldID(c, nullptr, &quot;I&quot;))<SUB>183</SUB>> ]
-"15794" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>185</SUB>> ]
-"15797" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;)<SUB>185</SUB>> ]
-"15803" [label = <(GetFieldID,env_-&gt;GetFieldID(c, &quot;count&quot;, nullptr))<SUB>187</SUB>> ]
-"15814" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>189</SUB>> ]
-"15817" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;sig == null&quot;)<SUB>189</SUB>> ]
-"15823" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>192</SUB>> ]
-"15744" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>173</SUB>> ]
-"15753" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>176</SUB>> ]
-"15764" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetFieldID)<SUB>179</SUB>> ]
-"15776" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>181</SUB>> ]
-"15784" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetFieldID)<SUB>183</SUB>> ]
-"15796" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>185</SUB>> ]
-"15804" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetFieldID)<SUB>187</SUB>> ]
-"15816" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>189</SUB>> ]
-"15824" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>192</SUB>> ]
-"15746" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>173</SUB>> ]
-"15755" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>176</SUB>> ]
-"15766" [label = <(FIELD_IDENTIFIER,GetFieldID,GetFieldID)<SUB>179</SUB>> ]
-"15786" [label = <(FIELD_IDENTIFIER,GetFieldID,GetFieldID)<SUB>183</SUB>> ]
-"15806" [label = <(FIELD_IDENTIFIER,GetFieldID,GetFieldID)<SUB>187</SUB>> ]
-"15826" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>192</SUB>> ]
-"15737" [label = <(METHOD,GetFieldIdBadArgumentTest)<SUB>172</SUB>> ]
-"15828" [label = <(METHOD_RETURN,void)<SUB>172</SUB>> ]
-  "15741" -> "15755" 
-  "15750" -> "15757" 
-  "15757" -> "15766" 
-  "15761" -> "15770" 
-  "15770" -> "15776" 
-  "15773" -> "15786" 
-  "15781" -> "15790" 
-  "15790" -> "15796" 
-  "15793" -> "15806" 
-  "15801" -> "15810" 
-  "15810" -> "15816" 
-  "15813" -> "15826" 
-  "15821" -> "15828" 
-  "15743" -> "15741" 
+digraph "GetFromReflectedField_ToReflectedFieldBadArgumentTest" {  
+"15750" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>261</SUB>> ]
+"15759" [label = <(&lt;operator&gt;.assignment,c = env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>264</SUB>> ]
+"15766" [label = <(ASSERT_NE,ASSERT_NE(c, nullptr))<SUB>265</SUB>> ]
+"15770" [label = <(&lt;operator&gt;.assignment,fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;))<SUB>266</SUB>> ]
+"15779" [label = <(ASSERT_NE,ASSERT_NE(fid, nullptr))<SUB>267</SUB>> ]
+"15783" [label = <(&lt;operator&gt;.assignment,field = env_-&gt;ToReflectedField(nullptr, fid, JNI_FALSE))<SUB>270</SUB>> ]
+"15808" [label = <(&lt;operator&gt;.assignment,field = env_-&gt;ToReflectedField(c, nullptr, JNI_FALSE))<SUB>278</SUB>> ]
+"15817" [label = <(EXPECT_EQ,EXPECT_EQ(field, nullptr))<SUB>279</SUB>> ]
+"15820" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;jfieldID was NULL&quot;\012 : &quot;fid == null&quot;))<SUB>280</SUB>> ]
+"15828" [label = <(&lt;operator&gt;.assignment,fid = env_-&gt;FromReflectedField(nullptr))<SUB>283</SUB>> ]
+"15835" [label = <(ASSERT_EQ,ASSERT_EQ(fid, nullptr))<SUB>284</SUB>> ]
+"15838" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;expected non-null java.lang.reflect.Field&quot;\012 : &quot;jlr_field == null&quot;))<SUB>285</SUB>> ]
+"15846" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>288</SUB>> ]
+"15752" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>261</SUB>> ]
+"15761" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>264</SUB>> ]
+"15772" [label = <(GetFieldID,env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;))<SUB>266</SUB>> ]
+"15785" [label = <(ToReflectedField,env_-&gt;ToReflectedField(nullptr, fid, JNI_FALSE))<SUB>270</SUB>> ]
+"15810" [label = <(ToReflectedField,env_-&gt;ToReflectedField(c, nullptr, JNI_FALSE))<SUB>278</SUB>> ]
+"15821" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>280</SUB>> ]
+"15824" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;jfieldID was NULL&quot;\012 : &quot;fid == null&quot;)<SUB>280</SUB>> ]
+"15830" [label = <(FromReflectedField,env_-&gt;FromReflectedField(nullptr))<SUB>283</SUB>> ]
+"15839" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>285</SUB>> ]
+"15842" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;expected non-null java.lang.reflect.Field&quot;\012 : &quot;jlr_field == null&quot;)<SUB>285</SUB>> ]
+"15848" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>288</SUB>> ]
+"15753" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>261</SUB>> ]
+"15762" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>264</SUB>> ]
+"15773" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetFieldID)<SUB>266</SUB>> ]
+"15786" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ToReflectedField)<SUB>270</SUB>> ]
+"15795" [label = <(EXPECT_EQ,EXPECT_EQ(field, nullptr))<SUB>272</SUB>> ]
+"15798" [label = <(Check,check_jni_abort_catcher.Check(&quot;ToReflectedField received NULL jclass&quot;))<SUB>273</SUB>> ]
+"15811" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ToReflectedField)<SUB>278</SUB>> ]
+"15823" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>280</SUB>> ]
+"15831" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FromReflectedField)<SUB>283</SUB>> ]
+"15841" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>285</SUB>> ]
+"15849" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>288</SUB>> ]
+"15755" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>261</SUB>> ]
+"15764" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>264</SUB>> ]
+"15775" [label = <(FIELD_IDENTIFIER,GetFieldID,GetFieldID)<SUB>266</SUB>> ]
+"15788" [label = <(FIELD_IDENTIFIER,ToReflectedField,ToReflectedField)<SUB>270</SUB>> ]
+"15799" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>273</SUB>> ]
+"15805" [label = <(EXPECT_NE,EXPECT_NE(field, nullptr))<SUB>275</SUB>> ]
+"15813" [label = <(FIELD_IDENTIFIER,ToReflectedField,ToReflectedField)<SUB>278</SUB>> ]
+"15833" [label = <(FIELD_IDENTIFIER,FromReflectedField,FromReflectedField)<SUB>283</SUB>> ]
+"15851" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>288</SUB>> ]
+"15801" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>273</SUB>> ]
+"15746" [label = <(METHOD,GetFromReflectedField_ToReflectedFieldBadArgumentTest)<SUB>260</SUB>> ]
+"15853" [label = <(METHOD_RETURN,void)<SUB>260</SUB>> ]
+  "15750" -> "15764" 
+  "15759" -> "15766" 
+  "15766" -> "15775" 
+  "15770" -> "15779" 
+  "15779" -> "15788" 
+  "15783" -> "15795" 
+  "15783" -> "15805" 
+  "15808" -> "15817" 
+  "15817" -> "15823" 
+  "15820" -> "15833" 
+  "15828" -> "15835" 
+  "15835" -> "15841" 
+  "15838" -> "15851" 
+  "15846" -> "15853" 
   "15752" -> "15750" 
-  "15763" -> "15761" 
-  "15774" -> "15777" 
-  "15777" -> "15773" 
-  "15783" -> "15781" 
-  "15794" -> "15797" 
-  "15797" -> "15793" 
-  "15803" -> "15801" 
-  "15814" -> "15817" 
-  "15817" -> "15813" 
-  "15823" -> "15821" 
-  "15744" -> "15743" 
+  "15761" -> "15759" 
+  "15772" -> "15770" 
+  "15785" -> "15783" 
+  "15810" -> "15808" 
+  "15821" -> "15824" 
+  "15824" -> "15820" 
+  "15830" -> "15828" 
+  "15839" -> "15842" 
+  "15842" -> "15838" 
+  "15848" -> "15846" 
   "15753" -> "15752" 
-  "15764" -> "15763" 
-  "15776" -> "15774" 
-  "15784" -> "15783" 
-  "15796" -> "15794" 
-  "15804" -> "15803" 
-  "15816" -> "15814" 
-  "15824" -> "15823" 
-  "15746" -> "15744" 
+  "15762" -> "15761" 
+  "15773" -> "15772" 
+  "15786" -> "15785" 
+  "15795" -> "15801" 
+  "15798" -> "15813" 
+  "15811" -> "15810" 
+  "15823" -> "15821" 
+  "15831" -> "15830" 
+  "15841" -> "15839" 
+  "15849" -> "15848" 
   "15755" -> "15753" 
-  "15766" -> "15764" 
-  "15786" -> "15784" 
-  "15806" -> "15804" 
-  "15826" -> "15824" 
-  "15737" -> "15746" 
+  "15764" -> "15762" 
+  "15775" -> "15773" 
+  "15788" -> "15786" 
+  "15799" -> "15798" 
+  "15805" -> "15813" 
+  "15813" -> "15811" 
+  "15833" -> "15831" 
+  "15851" -> "15849" 
+  "15801" -> "15799" 
+  "15746" -> "15755" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/278-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/278-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/278-cfg.dot	2023-06-07 19:35:01.627387148 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/278-cfg.dot	2023-06-07 19:35:08.157386504 +0330
@@ -1,85 +1,96 @@
-digraph "GetStaticFieldIdBadArgumentTest" {  
-"15834" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>196</SUB>> ]
-"15843" [label = <(&lt;operator&gt;.assignment,c = env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>199</SUB>> ]
-"15850" [label = <(ASSERT_NE,ASSERT_NE(c, nullptr))<SUB>200</SUB>> ]
-"15854" [label = <(&lt;operator&gt;.assignment,fid = env_-&gt;GetStaticFieldID(nullptr, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;Ljava/util/Comparator;&quot;))<SUB>202</SUB>> ]
-"15863" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, fid))<SUB>203</SUB>> ]
-"15866" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;GetStaticFieldID received NULL jclass&quot;\012 : &quot;java_class == null&quot;))<SUB>204</SUB>> ]
-"15874" [label = <(&lt;operator&gt;.assignment,fid = env_-&gt;GetStaticFieldID(c, nullptr, &quot;Ljava/util/Comparator;&quot;))<SUB>206</SUB>> ]
-"15883" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, fid))<SUB>207</SUB>> ]
-"15886" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;))<SUB>208</SUB>> ]
-"15894" [label = <(&lt;operator&gt;.assignment,fid = env_-&gt;GetStaticFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, nullptr))<SUB>210</SUB>> ]
-"15903" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, fid))<SUB>211</SUB>> ]
-"15906" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;sig == null&quot;))<SUB>212</SUB>> ]
-"15914" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>215</SUB>> ]
-"15836" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>196</SUB>> ]
-"15845" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>199</SUB>> ]
-"15856" [label = <(GetStaticFieldID,env_-&gt;GetStaticFieldID(nullptr, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;Ljava/util/Comparator;&quot;))<SUB>202</SUB>> ]
-"15867" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>204</SUB>> ]
-"15870" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;GetStaticFieldID received NULL jclass&quot;\012 : &quot;java_class == null&quot;)<SUB>204</SUB>> ]
-"15876" [label = <(GetStaticFieldID,env_-&gt;GetStaticFieldID(c, nullptr, &quot;Ljava/util/Comparator;&quot;))<SUB>206</SUB>> ]
-"15887" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>208</SUB>> ]
-"15890" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;)<SUB>208</SUB>> ]
-"15896" [label = <(GetStaticFieldID,env_-&gt;GetStaticFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, nullptr))<SUB>210</SUB>> ]
-"15907" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>212</SUB>> ]
-"15910" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;sig == null&quot;)<SUB>212</SUB>> ]
-"15916" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>215</SUB>> ]
-"15837" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>196</SUB>> ]
-"15846" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>199</SUB>> ]
-"15857" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetStaticFieldID)<SUB>202</SUB>> ]
-"15869" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>204</SUB>> ]
-"15877" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetStaticFieldID)<SUB>206</SUB>> ]
-"15889" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>208</SUB>> ]
-"15897" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetStaticFieldID)<SUB>210</SUB>> ]
-"15909" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>212</SUB>> ]
-"15917" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>215</SUB>> ]
-"15839" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>196</SUB>> ]
-"15848" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>199</SUB>> ]
-"15859" [label = <(FIELD_IDENTIFIER,GetStaticFieldID,GetStaticFieldID)<SUB>202</SUB>> ]
-"15879" [label = <(FIELD_IDENTIFIER,GetStaticFieldID,GetStaticFieldID)<SUB>206</SUB>> ]
-"15899" [label = <(FIELD_IDENTIFIER,GetStaticFieldID,GetStaticFieldID)<SUB>210</SUB>> ]
-"15919" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>215</SUB>> ]
-"15830" [label = <(METHOD,GetStaticFieldIdBadArgumentTest)<SUB>195</SUB>> ]
-"15921" [label = <(METHOD_RETURN,void)<SUB>195</SUB>> ]
-  "15834" -> "15848" 
-  "15843" -> "15850" 
-  "15850" -> "15859" 
-  "15854" -> "15863" 
-  "15863" -> "15869" 
-  "15866" -> "15879" 
-  "15874" -> "15883" 
-  "15883" -> "15889" 
-  "15886" -> "15899" 
-  "15894" -> "15903" 
-  "15903" -> "15909" 
-  "15906" -> "15919" 
-  "15914" -> "15921" 
-  "15836" -> "15834" 
-  "15845" -> "15843" 
-  "15856" -> "15854" 
-  "15867" -> "15870" 
-  "15870" -> "15866" 
-  "15876" -> "15874" 
-  "15887" -> "15890" 
-  "15890" -> "15886" 
-  "15896" -> "15894" 
-  "15907" -> "15910" 
-  "15910" -> "15906" 
-  "15916" -> "15914" 
-  "15837" -> "15836" 
-  "15846" -> "15845" 
-  "15857" -> "15856" 
-  "15869" -> "15867" 
-  "15877" -> "15876" 
-  "15889" -> "15887" 
-  "15897" -> "15896" 
-  "15909" -> "15907" 
-  "15917" -> "15916" 
-  "15839" -> "15837" 
-  "15848" -> "15846" 
-  "15859" -> "15857" 
-  "15879" -> "15877" 
-  "15899" -> "15897" 
+digraph "GetFromReflectedMethod_ToReflectedMethodBadArgumentTest" {  
+"15859" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>292</SUB>> ]
+"15868" [label = <(&lt;operator&gt;.assignment,c = env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>295</SUB>> ]
+"15875" [label = <(ASSERT_NE,ASSERT_NE(c, nullptr))<SUB>296</SUB>> ]
+"15879" [label = <(&lt;operator&gt;.assignment,mid = env_-&gt;GetMethodID(c, &quot;&lt;init&gt;&quot;, &quot;()V&quot;))<SUB>297</SUB>> ]
+"15888" [label = <(ASSERT_NE,ASSERT_NE(mid, nullptr))<SUB>298</SUB>> ]
+"15892" [label = <(&lt;operator&gt;.assignment,method = env_-&gt;ToReflectedMethod(nullptr, mid, JNI_FALSE))<SUB>301</SUB>> ]
+"15917" [label = <(&lt;operator&gt;.assignment,method = env_-&gt;ToReflectedMethod(c, nullptr, JNI_FALSE))<SUB>309</SUB>> ]
+"15926" [label = <(EXPECT_EQ,EXPECT_EQ(method, nullptr))<SUB>310</SUB>> ]
+"15929" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;jmethodID was NULL&quot;\012 : &quot;mid == null&quot;))<SUB>311</SUB>> ]
+"15937" [label = <(&lt;operator&gt;.assignment,mid = env_-&gt;FromReflectedMethod(method))<SUB>313</SUB>> ]
+"15944" [label = <(ASSERT_EQ,ASSERT_EQ(mid, nullptr))<SUB>314</SUB>> ]
+"15947" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;expected non-null method&quot; : &quot;jlr_method == null&quot;))<SUB>315</SUB>> ]
+"15955" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>317</SUB>> ]
+"15861" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>292</SUB>> ]
+"15870" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>295</SUB>> ]
+"15881" [label = <(GetMethodID,env_-&gt;GetMethodID(c, &quot;&lt;init&gt;&quot;, &quot;()V&quot;))<SUB>297</SUB>> ]
+"15894" [label = <(ToReflectedMethod,env_-&gt;ToReflectedMethod(nullptr, mid, JNI_FALSE))<SUB>301</SUB>> ]
+"15919" [label = <(ToReflectedMethod,env_-&gt;ToReflectedMethod(c, nullptr, JNI_FALSE))<SUB>309</SUB>> ]
+"15930" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>311</SUB>> ]
+"15933" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;jmethodID was NULL&quot;\012 : &quot;mid == null&quot;)<SUB>311</SUB>> ]
+"15939" [label = <(FromReflectedMethod,env_-&gt;FromReflectedMethod(method))<SUB>313</SUB>> ]
+"15948" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>315</SUB>> ]
+"15951" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;expected non-null method&quot; : &quot;jlr_method == null&quot;)<SUB>315</SUB>> ]
+"15957" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>317</SUB>> ]
+"15862" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>292</SUB>> ]
+"15871" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>295</SUB>> ]
+"15882" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetMethodID)<SUB>297</SUB>> ]
+"15895" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ToReflectedMethod)<SUB>301</SUB>> ]
+"15904" [label = <(EXPECT_EQ,EXPECT_EQ(method, nullptr))<SUB>303</SUB>> ]
+"15907" [label = <(Check,check_jni_abort_catcher.Check(&quot;ToReflectedMethod received NULL jclass&quot;))<SUB>304</SUB>> ]
+"15920" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ToReflectedMethod)<SUB>309</SUB>> ]
+"15932" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>311</SUB>> ]
+"15940" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FromReflectedMethod)<SUB>313</SUB>> ]
+"15950" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>315</SUB>> ]
+"15958" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>317</SUB>> ]
+"15864" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>292</SUB>> ]
+"15873" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>295</SUB>> ]
+"15884" [label = <(FIELD_IDENTIFIER,GetMethodID,GetMethodID)<SUB>297</SUB>> ]
+"15897" [label = <(FIELD_IDENTIFIER,ToReflectedMethod,ToReflectedMethod)<SUB>301</SUB>> ]
+"15908" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>304</SUB>> ]
+"15914" [label = <(EXPECT_NE,EXPECT_NE(method, nullptr))<SUB>306</SUB>> ]
+"15922" [label = <(FIELD_IDENTIFIER,ToReflectedMethod,ToReflectedMethod)<SUB>309</SUB>> ]
+"15942" [label = <(FIELD_IDENTIFIER,FromReflectedMethod,FromReflectedMethod)<SUB>313</SUB>> ]
+"15960" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>317</SUB>> ]
+"15910" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>304</SUB>> ]
+"15855" [label = <(METHOD,GetFromReflectedMethod_ToReflectedMethodBadArgumentTest)<SUB>291</SUB>> ]
+"15962" [label = <(METHOD_RETURN,void)<SUB>291</SUB>> ]
+  "15859" -> "15873" 
+  "15868" -> "15875" 
+  "15875" -> "15884" 
+  "15879" -> "15888" 
+  "15888" -> "15897" 
+  "15892" -> "15904" 
+  "15892" -> "15914" 
+  "15917" -> "15926" 
+  "15926" -> "15932" 
+  "15929" -> "15942" 
+  "15937" -> "15944" 
+  "15944" -> "15950" 
+  "15947" -> "15960" 
+  "15955" -> "15962" 
+  "15861" -> "15859" 
+  "15870" -> "15868" 
+  "15881" -> "15879" 
+  "15894" -> "15892" 
   "15919" -> "15917" 
-  "15830" -> "15839" 
+  "15930" -> "15933" 
+  "15933" -> "15929" 
+  "15939" -> "15937" 
+  "15948" -> "15951" 
+  "15951" -> "15947" 
+  "15957" -> "15955" 
+  "15862" -> "15861" 
+  "15871" -> "15870" 
+  "15882" -> "15881" 
+  "15895" -> "15894" 
+  "15904" -> "15910" 
+  "15907" -> "15922" 
+  "15920" -> "15919" 
+  "15932" -> "15930" 
+  "15940" -> "15939" 
+  "15950" -> "15948" 
+  "15958" -> "15957" 
+  "15864" -> "15862" 
+  "15873" -> "15871" 
+  "15884" -> "15882" 
+  "15897" -> "15895" 
+  "15908" -> "15907" 
+  "15914" -> "15922" 
+  "15922" -> "15920" 
+  "15942" -> "15940" 
+  "15960" -> "15958" 
+  "15910" -> "15908" 
+  "15855" -> "15864" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/279-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/279-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/279-cfg.dot	2023-06-07 19:35:01.627387148 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/279-cfg.dot	2023-06-07 19:35:08.157386504 +0330
@@ -1,87 +1,79 @@
-digraph "GetMethodIdBadArgumentTest" {  
-"15927" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>219</SUB>> ]
-"15936" [label = <(&lt;operator&gt;.assignment,method = env_-&gt;GetMethodID(nullptr, &quot;&lt;init&gt;&quot;, &quot;(Ljava/lang/String;)V&quot;))<SUB>222</SUB>> ]
-"15945" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, method))<SUB>223</SUB>> ]
-"15948" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;GetMethodID received NULL jclass&quot;\012 : &quot;java_class == null&quot;))<SUB>224</SUB>> ]
-"15957" [label = <(&lt;operator&gt;.assignment,jlnsme = env_-&gt;FindClass(&quot;java/lang/NoSuchMethodError&quot;))<SUB>226</SUB>> ]
-"15964" [label = <(ASSERT_TRUE,ASSERT_TRUE(jlnsme != nullptr))<SUB>227</SUB>> ]
-"15968" [label = <(&lt;operator&gt;.assignment,method = env_-&gt;GetMethodID(jlnsme, nullptr, &quot;(Ljava/lang/String;)V&quot;))<SUB>228</SUB>> ]
-"15977" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, method))<SUB>229</SUB>> ]
-"15980" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;))<SUB>230</SUB>> ]
-"15988" [label = <(&lt;operator&gt;.assignment,method = env_-&gt;GetMethodID(jlnsme, &quot;&lt;init&gt;&quot;, nullptr))<SUB>232</SUB>> ]
-"15997" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, method))<SUB>233</SUB>> ]
-"16000" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;sig == null&quot;))<SUB>234</SUB>> ]
-"16008" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>237</SUB>> ]
-"15929" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>219</SUB>> ]
-"15938" [label = <(GetMethodID,env_-&gt;GetMethodID(nullptr, &quot;&lt;init&gt;&quot;, &quot;(Ljava/lang/String;)V&quot;))<SUB>222</SUB>> ]
-"15949" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>224</SUB>> ]
-"15952" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;GetMethodID received NULL jclass&quot;\012 : &quot;java_class == null&quot;)<SUB>224</SUB>> ]
-"15959" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/NoSuchMethodError&quot;))<SUB>226</SUB>> ]
-"15965" [label = <(&lt;operator&gt;.notEquals,jlnsme != nullptr)<SUB>227</SUB>> ]
-"15970" [label = <(GetMethodID,env_-&gt;GetMethodID(jlnsme, nullptr, &quot;(Ljava/lang/String;)V&quot;))<SUB>228</SUB>> ]
-"15981" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>230</SUB>> ]
-"15984" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;)<SUB>230</SUB>> ]
-"15990" [label = <(GetMethodID,env_-&gt;GetMethodID(jlnsme, &quot;&lt;init&gt;&quot;, nullptr))<SUB>232</SUB>> ]
-"16001" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>234</SUB>> ]
-"16004" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;sig == null&quot;)<SUB>234</SUB>> ]
-"16010" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>237</SUB>> ]
-"15930" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>219</SUB>> ]
-"15939" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetMethodID)<SUB>222</SUB>> ]
-"15951" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>224</SUB>> ]
-"15960" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>226</SUB>> ]
-"15971" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetMethodID)<SUB>228</SUB>> ]
-"15983" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>230</SUB>> ]
-"15991" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetMethodID)<SUB>232</SUB>> ]
-"16003" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>234</SUB>> ]
-"16011" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>237</SUB>> ]
-"15932" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>219</SUB>> ]
-"15941" [label = <(FIELD_IDENTIFIER,GetMethodID,GetMethodID)<SUB>222</SUB>> ]
-"15962" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>226</SUB>> ]
-"15973" [label = <(FIELD_IDENTIFIER,GetMethodID,GetMethodID)<SUB>228</SUB>> ]
-"15993" [label = <(FIELD_IDENTIFIER,GetMethodID,GetMethodID)<SUB>232</SUB>> ]
-"16013" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>237</SUB>> ]
-"15923" [label = <(METHOD,GetMethodIdBadArgumentTest)<SUB>218</SUB>> ]
-"16015" [label = <(METHOD_RETURN,void)<SUB>218</SUB>> ]
-  "15927" -> "15941" 
-  "15936" -> "15945" 
-  "15945" -> "15951" 
-  "15948" -> "15962" 
-  "15957" -> "15965" 
-  "15964" -> "15973" 
-  "15968" -> "15977" 
-  "15977" -> "15983" 
-  "15980" -> "15993" 
-  "15988" -> "15997" 
-  "15997" -> "16003" 
-  "16000" -> "16013" 
-  "16008" -> "16015" 
-  "15929" -> "15927" 
-  "15938" -> "15936" 
-  "15949" -> "15952" 
-  "15952" -> "15948" 
-  "15959" -> "15957" 
-  "15965" -> "15964" 
-  "15970" -> "15968" 
-  "15981" -> "15984" 
-  "15984" -> "15980" 
-  "15990" -> "15988" 
-  "16001" -> "16004" 
-  "16004" -> "16000" 
-  "16010" -> "16008" 
-  "15930" -> "15929" 
-  "15939" -> "15938" 
-  "15951" -> "15949" 
-  "15960" -> "15959" 
-  "15971" -> "15970" 
-  "15983" -> "15981" 
-  "15991" -> "15990" 
-  "16003" -> "16001" 
-  "16011" -> "16010" 
-  "15932" -> "15930" 
-  "15941" -> "15939" 
-  "15962" -> "15960" 
-  "15973" -> "15971" 
+digraph "RegisterAndUnregisterNativesBadArguments" {  
+"15969" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>322</SUB>> ]
+"15999" [label = <(&lt;operator&gt;.assignment,jlobject = env_-&gt;FindClass(&quot;java/lang/Object&quot;))<SUB>332</SUB>> ]
+"16006" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, nullptr, 1), JNI_ERR))<SUB>333</SUB>> ]
+"16015" [label = <(Check,check_jni_abort_catcher-&gt;Check(&quot;methods == null&quot;))<SUB>334</SUB>> ]
+"16020" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;UnregisterNatives(nullptr), JNI_ERR))<SUB>337</SUB>> ]
+"16027" [label = <(Check,check_jni_abort_catcher-&gt;Check(check_jni ? &quot;UnregisterNatives received NULL jclass&quot;\012 : &quot;java_class == null&quot;))<SUB>338</SUB>> ]
+"16035" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>341</SUB>> ]
+"15971" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>322</SUB>> ]
+"15978" [label = <(&lt;operator&gt;.assignment,methods[] = { })<SUB>325</SUB>> ]
+"15981" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;RegisterNatives(nullptr, methods, 0), JNI_ERR))<SUB>326</SUB>> ]
+"15990" [label = <(Check,check_jni_abort_catcher-&gt;Check(check_jni ? &quot;RegisterNatives received NULL jclass&quot;\012 : &quot;java_class == null&quot;))<SUB>327</SUB>> ]
+"16001" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/Object&quot;))<SUB>332</SUB>> ]
+"16007" [label = <(RegisterNatives,env_-&gt;RegisterNatives(jlobject, nullptr, 1))<SUB>333</SUB>> ]
+"16016" [label = <(&lt;operator&gt;.indirectFieldAccess,check_jni_abort_catcher-&gt;Check)<SUB>334</SUB>> ]
+"16021" [label = <(UnregisterNatives,env_-&gt;UnregisterNatives(nullptr))<SUB>337</SUB>> ]
+"16028" [label = <(&lt;operator&gt;.indirectFieldAccess,check_jni_abort_catcher-&gt;Check)<SUB>338</SUB>> ]
+"16031" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;UnregisterNatives received NULL jclass&quot;\012 : &quot;java_class == null&quot;)<SUB>338</SUB>> ]
+"16037" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>341</SUB>> ]
+"15972" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>322</SUB>> ]
+"15980" [label = <(&lt;operator&gt;.arrayInitializer,{ })<SUB>325</SUB>> ]
+"15982" [label = <(RegisterNatives,env_-&gt;RegisterNatives(nullptr, methods, 0))<SUB>326</SUB>> ]
+"15991" [label = <(&lt;operator&gt;.indirectFieldAccess,check_jni_abort_catcher-&gt;Check)<SUB>327</SUB>> ]
+"15994" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;RegisterNatives received NULL jclass&quot;\012 : &quot;java_class == null&quot;)<SUB>327</SUB>> ]
+"16002" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>332</SUB>> ]
+"16008" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;RegisterNatives)<SUB>333</SUB>> ]
+"16018" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>334</SUB>> ]
+"16022" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;UnregisterNatives)<SUB>337</SUB>> ]
+"16030" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>338</SUB>> ]
+"16038" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>341</SUB>> ]
+"15974" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>322</SUB>> ]
+"15983" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;RegisterNatives)<SUB>326</SUB>> ]
+"15993" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>327</SUB>> ]
+"16004" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>332</SUB>> ]
+"16010" [label = <(FIELD_IDENTIFIER,RegisterNatives,RegisterNatives)<SUB>333</SUB>> ]
+"16024" [label = <(FIELD_IDENTIFIER,UnregisterNatives,UnregisterNatives)<SUB>337</SUB>> ]
+"16040" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>341</SUB>> ]
+"15985" [label = <(FIELD_IDENTIFIER,RegisterNatives,RegisterNatives)<SUB>326</SUB>> ]
+"15964" [label = <(METHOD,RegisterAndUnregisterNativesBadArguments)<SUB>320</SUB>> ]
+"16042" [label = <(METHOD_RETURN,void)<SUB>320</SUB>> ]
+  "15969" -> "15980" 
+  "15999" -> "16010" 
+  "16006" -> "16018" 
+  "16015" -> "16024" 
+  "16020" -> "16030" 
+  "16027" -> "16040" 
+  "16035" -> "16042" 
+  "15971" -> "15969" 
+  "15978" -> "15985" 
+  "15981" -> "15993" 
+  "15990" -> "16004" 
+  "16001" -> "15999" 
+  "16007" -> "16006" 
+  "16016" -> "16015" 
+  "16021" -> "16020" 
+  "16028" -> "16031" 
+  "16031" -> "16027" 
+  "16037" -> "16035" 
+  "15972" -> "15971" 
+  "15980" -> "15978" 
+  "15982" -> "15981" 
+  "15991" -> "15994" 
+  "15994" -> "15990" 
+  "16002" -> "16001" 
+  "16008" -> "16007" 
+  "16018" -> "16016" 
+  "16022" -> "16021" 
+  "16030" -> "16028" 
+  "16038" -> "16037" 
+  "15974" -> "15972" 
+  "15983" -> "15982" 
   "15993" -> "15991" 
-  "16013" -> "16011" 
-  "15923" -> "15932" 
+  "16004" -> "16002" 
+  "16010" -> "16008" 
+  "16024" -> "16022" 
+  "16040" -> "16038" 
+  "15985" -> "15983" 
+  "15964" -> "15974" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/28-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/28-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/28-cfg.dot	2023-06-07 19:35:01.347387178 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/28-cfg.dot	2023-06-07 19:35:07.927386526 +0330
@@ -1,11 +1,126 @@
-digraph "DefineClass" {  
-"950" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI DefineClass is not supported&quot;)<SUB>567</SUB>> ]
-"954" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>568</SUB>> ]
-"951" [label = <(LOG,LOG(WARNING))<SUB>567</SUB>> ]
-"943" [label = <(METHOD,DefineClass)<SUB>566</SUB>> ]
-"956" [label = <(METHOD_RETURN,jclass)<SUB>566</SUB>> ]
-  "950" -> "954" 
-  "954" -> "956" 
-  "951" -> "950" 
-  "943" -> "951" 
+digraph "ToReflectedMethod" {  
+"1019" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>529</SUB>> ]
+"1038" [label = <(soa,soa(env))<SUB>530</SUB>> ]
+"1041" [label = <(&lt;operator&gt;.assignment,* m = jni::DecodeArtMethod(mid))<SUB>531</SUB>> ]
+"1048" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Executable&gt; method)<SUB>532</SUB>> ]
+"1055" [label = <(DCHECK_EQ,DCHECK_EQ(Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize(), kRuntimePointerSize))<SUB>533</SUB>> ]
+"1067" [label = <(DCHECK,DCHECK(!Runtime::Current()-&gt;IsActiveTransaction()))<SUB>534</SUB>> ]
+"1110" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(method);,return soa.AddLocalReference&lt;jobject&gt;(method);)<SUB>540</SUB>> ]
+"1043" [label = <(jni::DecodeArtMethod,jni::DecodeArtMethod(mid))<SUB>531</SUB>> ]
+"1049" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Executable)<SUB>532</SUB>> ]
+"1056" [label = <(GetImagePointerSize,Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize())<SUB>533</SUB>> ]
+"1068" [label = <(&lt;operator&gt;.logicalNot,!Runtime::Current()-&gt;IsActiveTransaction())<SUB>534</SUB>> ]
+"1077" [label = <(IsConstructor,m-&gt;IsConstructor())<SUB>535</SUB>> ]
+"1111" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(method))<SUB>540</SUB>> ]
+"1044" [label = <(&lt;operator&gt;.fieldAccess,jni::DecodeArtMethod)<SUB>531</SUB>> ]
+"1051" [label = <(&lt;operator&gt;.fieldAccess,mirror::Executable)<SUB>532</SUB>> ]
+"1057" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize)<SUB>533</SUB>> ]
+"1069" [label = <(IsActiveTransaction,Runtime::Current()-&gt;IsActiveTransaction())<SUB>534</SUB>> ]
+"1078" [label = <(&lt;operator&gt;.indirectFieldAccess,m-&gt;IsConstructor)<SUB>535</SUB>> ]
+"1082" [label = <(&lt;operator&gt;.assignment,method = mirror::Constructor::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;(soa.Self(), m))<SUB>536</SUB>> ]
+"1112" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>540</SUB>> ]
+"1023" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>529</SUB>> ]
+"1046" [label = <(FIELD_IDENTIFIER,DecodeArtMethod,DecodeArtMethod)<SUB>531</SUB>> ]
+"1053" [label = <(FIELD_IDENTIFIER,Executable,Executable)<SUB>532</SUB>> ]
+"1058" [label = <(GetClassLinker,Runtime::Current()-&gt;GetClassLinker())<SUB>533</SUB>> ]
+"1065" [label = <(FIELD_IDENTIFIER,GetImagePointerSize,GetImagePointerSize)<SUB>533</SUB>> ]
+"1070" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;IsActiveTransaction)<SUB>534</SUB>> ]
+"1080" [label = <(FIELD_IDENTIFIER,IsConstructor,IsConstructor)<SUB>535</SUB>> ]
+"1084" [label = <(mirror::Constructor::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;,mirror::Constructor::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;(soa.Self(), m))<SUB>536</SUB>> ]
+"1097" [label = <(&lt;operator&gt;.assignment,method = mirror::Method::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;(soa.Self(), m))<SUB>538</SUB>> ]
+"1113" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>540</SUB>> ]
+"1024" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>529</SUB>> ]
+"1028" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>529</SUB>> ]
+"1035" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>529</SUB>> ]
+"1059" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetClassLinker)<SUB>533</SUB>> ]
+"1071" [label = <(Runtime::Current,Runtime::Current())<SUB>534</SUB>> ]
+"1075" [label = <(FIELD_IDENTIFIER,IsActiveTransaction,IsActiveTransaction)<SUB>534</SUB>> ]
+"1085" [label = <(&lt;operator&gt;.fieldAccess,mirror::Constructor::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;)<SUB>536</SUB>> ]
+"1090" [label = <(Self,soa.Self())<SUB>536</SUB>> ]
+"1099" [label = <(mirror::Method::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;,mirror::Method::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;(soa.Self(), m))<SUB>538</SUB>> ]
+"1115" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>540</SUB>> ]
+"1029" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>529</SUB>> ]
+"1060" [label = <(Runtime::Current,Runtime::Current())<SUB>533</SUB>> ]
+"1064" [label = <(FIELD_IDENTIFIER,GetClassLinker,GetClassLinker)<SUB>533</SUB>> ]
+"1072" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>534</SUB>> ]
+"1086" [label = <(&lt;operator&gt;.fieldAccess,mirror::Constructor)<SUB>536</SUB>> ]
+"1089" [label = <(FIELD_IDENTIFIER,CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;,CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;)<SUB>536</SUB>> ]
+"1091" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>536</SUB>> ]
+"1100" [label = <(&lt;operator&gt;.fieldAccess,mirror::Method::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;)<SUB>538</SUB>> ]
+"1105" [label = <(Self,soa.Self())<SUB>538</SUB>> ]
+"1030" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>529</SUB>> ]
+"1032" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>529</SUB>> ]
+"1061" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>533</SUB>> ]
+"1074" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>534</SUB>> ]
+"1093" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>536</SUB>> ]
+"1101" [label = <(&lt;operator&gt;.fieldAccess,mirror::Method)<SUB>538</SUB>> ]
+"1104" [label = <(FIELD_IDENTIFIER,CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;,CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;)<SUB>538</SUB>> ]
+"1106" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>538</SUB>> ]
+"1063" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>533</SUB>> ]
+"1108" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>538</SUB>> ]
+"1013" [label = <(METHOD,ToReflectedMethod)<SUB>528</SUB>> ]
+"1118" [label = <(METHOD_RETURN,jobject)<SUB>528</SUB>> ]
+  "1019" -> "1024" 
+  "1019" -> "1038" 
+  "1038" -> "1046" 
+  "1041" -> "1053" 
+  "1048" -> "1063" 
+  "1055" -> "1074" 
+  "1067" -> "1080" 
+  "1110" -> "1118" 
+  "1043" -> "1041" 
+  "1049" -> "1048" 
+  "1056" -> "1055" 
+  "1068" -> "1067" 
+  "1077" -> "1086" 
+  "1077" -> "1101" 
+  "1111" -> "1110" 
+  "1044" -> "1043" 
+  "1051" -> "1049" 
+  "1057" -> "1056" 
+  "1069" -> "1068" 
+  "1078" -> "1077" 
+  "1082" -> "1115" 
+  "1112" -> "1111" 
+  "1023" -> "1030" 
+  "1023" -> "1038" 
+  "1046" -> "1044" 
+  "1053" -> "1051" 
+  "1058" -> "1065" 
+  "1065" -> "1057" 
+  "1070" -> "1069" 
+  "1080" -> "1078" 
+  "1084" -> "1082" 
+  "1097" -> "1115" 
+  "1113" -> "1112" 
+  "1024" -> "1023" 
+  "1028" -> "1035" 
+  "1035" -> "1118" 
+  "1059" -> "1058" 
+  "1071" -> "1075" 
+  "1075" -> "1070" 
+  "1085" -> "1093" 
+  "1090" -> "1084" 
+  "1099" -> "1097" 
+  "1115" -> "1113" 
+  "1029" -> "1028" 
+  "1060" -> "1064" 
+  "1064" -> "1059" 
+  "1072" -> "1071" 
+  "1086" -> "1089" 
+  "1089" -> "1085" 
+  "1091" -> "1090" 
+  "1100" -> "1108" 
+  "1105" -> "1099" 
+  "1030" -> "1032" 
+  "1032" -> "1029" 
+  "1061" -> "1060" 
+  "1074" -> "1072" 
+  "1093" -> "1091" 
+  "1101" -> "1104" 
+  "1104" -> "1100" 
+  "1106" -> "1105" 
+  "1063" -> "1061" 
+  "1108" -> "1106" 
+  "1013" -> "1019" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/280-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/280-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/280-cfg.dot	2023-06-07 19:35:01.627387148 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/280-cfg.dot	2023-06-07 19:35:08.157386504 +0330
@@ -1,83 +1,243 @@
-digraph "GetStaticMethodIdBadArgumentTest" {  
-"16021" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>241</SUB>> ]
-"16030" [label = <(&lt;operator&gt;.assignment,method = env_-&gt;GetStaticMethodID(nullptr, &quot;valueOf&quot;, &quot;(I)Ljava/lang/String;&quot;))<SUB>244</SUB>> ]
-"16039" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, method))<SUB>245</SUB>> ]
-"16042" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;GetStaticMethodID received NULL jclass&quot;\012 : &quot;java_class == null&quot;))<SUB>246</SUB>> ]
-"16051" [label = <(&lt;operator&gt;.assignment,jlstring = env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>248</SUB>> ]
-"16058" [label = <(&lt;operator&gt;.assignment,method = env_-&gt;GetStaticMethodID(jlstring, nullptr, &quot;(I)Ljava/lang/String;&quot;))<SUB>249</SUB>> ]
-"16067" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, method))<SUB>250</SUB>> ]
-"16070" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;))<SUB>251</SUB>> ]
-"16078" [label = <(&lt;operator&gt;.assignment,method = env_-&gt;GetStaticMethodID(jlstring, &quot;valueOf&quot;, nullptr))<SUB>253</SUB>> ]
-"16087" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, method))<SUB>254</SUB>> ]
-"16090" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;sig == null&quot;))<SUB>255</SUB>> ]
-"16098" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>258</SUB>> ]
-"16023" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>241</SUB>> ]
-"16032" [label = <(GetStaticMethodID,env_-&gt;GetStaticMethodID(nullptr, &quot;valueOf&quot;, &quot;(I)Ljava/lang/String;&quot;))<SUB>244</SUB>> ]
-"16043" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>246</SUB>> ]
-"16046" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;GetStaticMethodID received NULL jclass&quot;\012 : &quot;java_class == null&quot;)<SUB>246</SUB>> ]
-"16053" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>248</SUB>> ]
-"16060" [label = <(GetStaticMethodID,env_-&gt;GetStaticMethodID(jlstring, nullptr, &quot;(I)Ljava/lang/String;&quot;))<SUB>249</SUB>> ]
-"16071" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>251</SUB>> ]
-"16074" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;)<SUB>251</SUB>> ]
-"16080" [label = <(GetStaticMethodID,env_-&gt;GetStaticMethodID(jlstring, &quot;valueOf&quot;, nullptr))<SUB>253</SUB>> ]
-"16091" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>255</SUB>> ]
-"16094" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;sig == null&quot;)<SUB>255</SUB>> ]
-"16100" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>258</SUB>> ]
-"16024" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>241</SUB>> ]
-"16033" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetStaticMethodID)<SUB>244</SUB>> ]
-"16045" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>246</SUB>> ]
-"16054" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>248</SUB>> ]
-"16061" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetStaticMethodID)<SUB>249</SUB>> ]
-"16073" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>251</SUB>> ]
-"16081" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetStaticMethodID)<SUB>253</SUB>> ]
-"16093" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>255</SUB>> ]
-"16101" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>258</SUB>> ]
-"16026" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>241</SUB>> ]
-"16035" [label = <(FIELD_IDENTIFIER,GetStaticMethodID,GetStaticMethodID)<SUB>244</SUB>> ]
-"16056" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>248</SUB>> ]
-"16063" [label = <(FIELD_IDENTIFIER,GetStaticMethodID,GetStaticMethodID)<SUB>249</SUB>> ]
-"16083" [label = <(FIELD_IDENTIFIER,GetStaticMethodID,GetStaticMethodID)<SUB>253</SUB>> ]
-"16103" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>258</SUB>> ]
-"16017" [label = <(METHOD,GetStaticMethodIdBadArgumentTest)<SUB>240</SUB>> ]
-"16105" [label = <(METHOD_RETURN,void)<SUB>240</SUB>> ]
-  "16021" -> "16035" 
-  "16030" -> "16039" 
-  "16039" -> "16045" 
-  "16042" -> "16056" 
-  "16051" -> "16063" 
-  "16058" -> "16067" 
-  "16067" -> "16073" 
-  "16070" -> "16083" 
-  "16078" -> "16087" 
-  "16087" -> "16093" 
-  "16090" -> "16103" 
-  "16098" -> "16105" 
-  "16023" -> "16021" 
-  "16032" -> "16030" 
-  "16043" -> "16046" 
-  "16046" -> "16042" 
+digraph "GetPrimitiveArrayElementsOfWrongType" {  
+"16048" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>346</SUB>> ]
+"16057" [label = <(&lt;operator&gt;.assignment,array = env_-&gt;NewBooleanArray(10))<SUB>349</SUB>> ]
+"16065" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;GetByteArrayElements(reinterpret_cast&lt;jbyteArray&gt;(array), &amp;is_copy), nullptr))<SUB>351</SUB>> ]
+"16076" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected byte[]&quot;\012 : &quot;attempt to get byte primitive array elements with an object of type boolean[]&quot;))<SUB>352</SUB>> ]
+"16084" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;GetShortArrayElements(reinterpret_cast&lt;jshortArray&gt;(array), &amp;is_copy), nullptr))<SUB>355</SUB>> ]
+"16095" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected short[]&quot;\012 : &quot;attempt to get short primitive array elements with an object of type boolean[]&quot;))<SUB>356</SUB>> ]
+"16103" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;GetCharArrayElements(reinterpret_cast&lt;jcharArray&gt;(array), &amp;is_copy), nullptr))<SUB>359</SUB>> ]
+"16114" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected char[]&quot;\012 : &quot;attempt to get char primitive array elements with an object of type boolean[]&quot;))<SUB>360</SUB>> ]
+"16122" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;GetIntArrayElements(reinterpret_cast&lt;jintArray&gt;(array), &amp;is_copy), nullptr))<SUB>363</SUB>> ]
+"16133" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected int[]&quot;\012 : &quot;attempt to get int primitive array elements with an object of type boolean[]&quot;))<SUB>364</SUB>> ]
+"16141" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;GetLongArrayElements(reinterpret_cast&lt;jlongArray&gt;(array), &amp;is_copy), nullptr))<SUB>367</SUB>> ]
+"16152" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected long[]&quot;\012 : &quot;attempt to get long primitive array elements with an object of type boolean[]&quot;))<SUB>368</SUB>> ]
+"16160" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;GetFloatArrayElements(reinterpret_cast&lt;jfloatArray&gt;(array), &amp;is_copy), nullptr))<SUB>371</SUB>> ]
+"16171" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected float[]&quot;\012 : &quot;attempt to get float primitive array elements with an object of type boolean[]&quot;))<SUB>372</SUB>> ]
+"16179" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;GetDoubleArrayElements(reinterpret_cast&lt;jdoubleArray&gt;(array), &amp;is_copy), nullptr))<SUB>375</SUB>> ]
+"16190" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected double[]&quot;\012 : &quot;attempt to get double primitive array elements with an object of type boolean[]&quot;))<SUB>376</SUB>> ]
+"16199" [label = <(&lt;operator&gt;.assignment,array2 = env_-&gt;NewByteArray(10))<SUB>379</SUB>> ]
+"16206" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;GetBooleanArrayElements(reinterpret_cast&lt;jbooleanArray&gt;(array2), &amp;is_copy),\012 nullptr))<SUB>380</SUB>> ]
+"16217" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type byte[] expected boolean[]&quot;\012 : &quot;attempt to get boolean primitive array elements with an object of type byte[]&quot;))<SUB>382</SUB>> ]
+"16226" [label = <(&lt;operator&gt;.assignment,object = env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>385</SUB>> ]
+"16233" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;GetBooleanArrayElements(reinterpret_cast&lt;jbooleanArray&gt;(object), &amp;is_copy),\012 nullptr))<SUB>386</SUB>> ]
+"16244" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;attempt to get boolean primitive array elements with an object of type java.lang.String&quot;))<SUB>388</SUB>> ]
+"16252" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>392</SUB>> ]
+"16050" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>346</SUB>> ]
+"16059" [label = <(NewBooleanArray,env_-&gt;NewBooleanArray(10))<SUB>349</SUB>> ]
+"16066" [label = <(GetByteArrayElements,env_-&gt;GetByteArrayElements(reinterpret_cast&lt;jbyteArray&gt;(array), &amp;is_copy))<SUB>351</SUB>> ]
+"16077" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>352</SUB>> ]
+"16080" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected byte[]&quot;\012 : &quot;attempt to get byte primitive array elements with an object of type boolean[]&quot;)<SUB>353</SUB>> ]
+"16085" [label = <(GetShortArrayElements,env_-&gt;GetShortArrayElements(reinterpret_cast&lt;jshortArray&gt;(array), &amp;is_copy))<SUB>355</SUB>> ]
+"16096" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>356</SUB>> ]
+"16099" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected short[]&quot;\012 : &quot;attempt to get short primitive array elements with an object of type boolean[]&quot;)<SUB>357</SUB>> ]
+"16104" [label = <(GetCharArrayElements,env_-&gt;GetCharArrayElements(reinterpret_cast&lt;jcharArray&gt;(array), &amp;is_copy))<SUB>359</SUB>> ]
+"16115" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>360</SUB>> ]
+"16118" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected char[]&quot;\012 : &quot;attempt to get char primitive array elements with an object of type boolean[]&quot;)<SUB>361</SUB>> ]
+"16123" [label = <(GetIntArrayElements,env_-&gt;GetIntArrayElements(reinterpret_cast&lt;jintArray&gt;(array), &amp;is_copy))<SUB>363</SUB>> ]
+"16134" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>364</SUB>> ]
+"16137" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected int[]&quot;\012 : &quot;attempt to get int primitive array elements with an object of type boolean[]&quot;)<SUB>365</SUB>> ]
+"16142" [label = <(GetLongArrayElements,env_-&gt;GetLongArrayElements(reinterpret_cast&lt;jlongArray&gt;(array), &amp;is_copy))<SUB>367</SUB>> ]
+"16153" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>368</SUB>> ]
+"16156" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected long[]&quot;\012 : &quot;attempt to get long primitive array elements with an object of type boolean[]&quot;)<SUB>369</SUB>> ]
+"16161" [label = <(GetFloatArrayElements,env_-&gt;GetFloatArrayElements(reinterpret_cast&lt;jfloatArray&gt;(array), &amp;is_copy))<SUB>371</SUB>> ]
+"16172" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>372</SUB>> ]
+"16175" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected float[]&quot;\012 : &quot;attempt to get float primitive array elements with an object of type boolean[]&quot;)<SUB>373</SUB>> ]
+"16180" [label = <(GetDoubleArrayElements,env_-&gt;GetDoubleArrayElements(reinterpret_cast&lt;jdoubleArray&gt;(array), &amp;is_copy))<SUB>375</SUB>> ]
+"16191" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>376</SUB>> ]
+"16194" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected double[]&quot;\012 : &quot;attempt to get double primitive array elements with an object of type boolean[]&quot;)<SUB>377</SUB>> ]
+"16201" [label = <(NewByteArray,env_-&gt;NewByteArray(10))<SUB>379</SUB>> ]
+"16207" [label = <(GetBooleanArrayElements,env_-&gt;GetBooleanArrayElements(reinterpret_cast&lt;jbooleanArray&gt;(array2), &amp;is_copy))<SUB>380</SUB>> ]
+"16218" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>382</SUB>> ]
+"16221" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type byte[] expected boolean[]&quot;\012 : &quot;attempt to get boolean primitive array elements with an object of type byte[]&quot;)<SUB>383</SUB>> ]
+"16228" [label = <(NewStringUTF,env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>385</SUB>> ]
+"16234" [label = <(GetBooleanArrayElements,env_-&gt;GetBooleanArrayElements(reinterpret_cast&lt;jbooleanArray&gt;(object), &amp;is_copy))<SUB>386</SUB>> ]
+"16245" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>388</SUB>> ]
+"16248" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;attempt to get boolean primitive array elements with an object of type java.lang.String&quot;)<SUB>389</SUB>> ]
+"16254" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>392</SUB>> ]
+"16051" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>346</SUB>> ]
+"16060" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewBooleanArray)<SUB>349</SUB>> ]
+"16067" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetByteArrayElements)<SUB>351</SUB>> ]
+"16070" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbyteArray&gt;(array))<SUB>351</SUB>> ]
+"16073" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>351</SUB>> ]
+"16079" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>352</SUB>> ]
+"16086" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetShortArrayElements)<SUB>355</SUB>> ]
+"16089" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jshortArray&gt;(array))<SUB>355</SUB>> ]
+"16092" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>355</SUB>> ]
+"16098" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>356</SUB>> ]
+"16105" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetCharArrayElements)<SUB>359</SUB>> ]
+"16108" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jcharArray&gt;(array))<SUB>359</SUB>> ]
+"16111" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>359</SUB>> ]
+"16117" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>360</SUB>> ]
+"16124" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetIntArrayElements)<SUB>363</SUB>> ]
+"16127" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jintArray&gt;(array))<SUB>363</SUB>> ]
+"16130" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>363</SUB>> ]
+"16136" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>364</SUB>> ]
+"16143" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetLongArrayElements)<SUB>367</SUB>> ]
+"16146" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jlongArray&gt;(array))<SUB>367</SUB>> ]
+"16149" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>367</SUB>> ]
+"16155" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>368</SUB>> ]
+"16162" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetFloatArrayElements)<SUB>371</SUB>> ]
+"16165" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jfloatArray&gt;(array))<SUB>371</SUB>> ]
+"16168" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>371</SUB>> ]
+"16174" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>372</SUB>> ]
+"16181" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetDoubleArrayElements)<SUB>375</SUB>> ]
+"16184" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jdoubleArray&gt;(array))<SUB>375</SUB>> ]
+"16187" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>375</SUB>> ]
+"16193" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>376</SUB>> ]
+"16202" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewByteArray)<SUB>379</SUB>> ]
+"16208" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetBooleanArrayElements)<SUB>380</SUB>> ]
+"16211" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbooleanArray&gt;(array2))<SUB>380</SUB>> ]
+"16214" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>380</SUB>> ]
+"16220" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>382</SUB>> ]
+"16229" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewStringUTF)<SUB>385</SUB>> ]
+"16235" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetBooleanArrayElements)<SUB>386</SUB>> ]
+"16238" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbooleanArray&gt;(object))<SUB>386</SUB>> ]
+"16241" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>386</SUB>> ]
+"16247" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>388</SUB>> ]
+"16255" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>392</SUB>> ]
+"16053" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>346</SUB>> ]
+"16062" [label = <(FIELD_IDENTIFIER,NewBooleanArray,NewBooleanArray)<SUB>349</SUB>> ]
+"16069" [label = <(FIELD_IDENTIFIER,GetByteArrayElements,GetByteArrayElements)<SUB>351</SUB>> ]
+"16071" [label = <(UNKNOWN,jbyteArray,jbyteArray)<SUB>351</SUB>> ]
+"16088" [label = <(FIELD_IDENTIFIER,GetShortArrayElements,GetShortArrayElements)<SUB>355</SUB>> ]
+"16090" [label = <(UNKNOWN,jshortArray,jshortArray)<SUB>355</SUB>> ]
+"16107" [label = <(FIELD_IDENTIFIER,GetCharArrayElements,GetCharArrayElements)<SUB>359</SUB>> ]
+"16109" [label = <(UNKNOWN,jcharArray,jcharArray)<SUB>359</SUB>> ]
+"16126" [label = <(FIELD_IDENTIFIER,GetIntArrayElements,GetIntArrayElements)<SUB>363</SUB>> ]
+"16128" [label = <(UNKNOWN,jintArray,jintArray)<SUB>363</SUB>> ]
+"16145" [label = <(FIELD_IDENTIFIER,GetLongArrayElements,GetLongArrayElements)<SUB>367</SUB>> ]
+"16147" [label = <(UNKNOWN,jlongArray,jlongArray)<SUB>367</SUB>> ]
+"16164" [label = <(FIELD_IDENTIFIER,GetFloatArrayElements,GetFloatArrayElements)<SUB>371</SUB>> ]
+"16166" [label = <(UNKNOWN,jfloatArray,jfloatArray)<SUB>371</SUB>> ]
+"16183" [label = <(FIELD_IDENTIFIER,GetDoubleArrayElements,GetDoubleArrayElements)<SUB>375</SUB>> ]
+"16185" [label = <(UNKNOWN,jdoubleArray,jdoubleArray)<SUB>375</SUB>> ]
+"16204" [label = <(FIELD_IDENTIFIER,NewByteArray,NewByteArray)<SUB>379</SUB>> ]
+"16210" [label = <(FIELD_IDENTIFIER,GetBooleanArrayElements,GetBooleanArrayElements)<SUB>380</SUB>> ]
+"16212" [label = <(UNKNOWN,jbooleanArray,jbooleanArray)<SUB>380</SUB>> ]
+"16231" [label = <(FIELD_IDENTIFIER,NewStringUTF,NewStringUTF)<SUB>385</SUB>> ]
+"16237" [label = <(FIELD_IDENTIFIER,GetBooleanArrayElements,GetBooleanArrayElements)<SUB>386</SUB>> ]
+"16239" [label = <(UNKNOWN,jbooleanArray,jbooleanArray)<SUB>386</SUB>> ]
+"16257" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>392</SUB>> ]
+"16044" [label = <(METHOD,GetPrimitiveArrayElementsOfWrongType)<SUB>345</SUB>> ]
+"16259" [label = <(METHOD_RETURN,void)<SUB>345</SUB>> ]
+  "16048" -> "16062" 
+  "16057" -> "16069" 
+  "16065" -> "16079" 
+  "16076" -> "16088" 
+  "16084" -> "16098" 
+  "16095" -> "16107" 
+  "16103" -> "16117" 
+  "16114" -> "16126" 
+  "16122" -> "16136" 
+  "16133" -> "16145" 
+  "16141" -> "16155" 
+  "16152" -> "16164" 
+  "16160" -> "16174" 
+  "16171" -> "16183" 
+  "16179" -> "16193" 
+  "16190" -> "16204" 
+  "16199" -> "16210" 
+  "16206" -> "16220" 
+  "16217" -> "16231" 
+  "16226" -> "16237" 
+  "16233" -> "16247" 
+  "16244" -> "16257" 
+  "16252" -> "16259" 
+  "16050" -> "16048" 
+  "16059" -> "16057" 
+  "16066" -> "16065" 
+  "16077" -> "16080" 
+  "16080" -> "16076" 
+  "16085" -> "16084" 
+  "16096" -> "16099" 
+  "16099" -> "16095" 
+  "16104" -> "16103" 
+  "16115" -> "16118" 
+  "16118" -> "16114" 
+  "16123" -> "16122" 
+  "16134" -> "16137" 
+  "16137" -> "16133" 
+  "16142" -> "16141" 
+  "16153" -> "16156" 
+  "16156" -> "16152" 
+  "16161" -> "16160" 
+  "16172" -> "16175" 
+  "16175" -> "16171" 
+  "16180" -> "16179" 
+  "16191" -> "16194" 
+  "16194" -> "16190" 
+  "16201" -> "16199" 
+  "16207" -> "16206" 
+  "16218" -> "16221" 
+  "16221" -> "16217" 
+  "16228" -> "16226" 
+  "16234" -> "16233" 
+  "16245" -> "16248" 
+  "16248" -> "16244" 
+  "16254" -> "16252" 
+  "16051" -> "16050" 
+  "16060" -> "16059" 
+  "16067" -> "16071" 
+  "16070" -> "16073" 
+  "16073" -> "16066" 
+  "16079" -> "16077" 
+  "16086" -> "16090" 
+  "16089" -> "16092" 
+  "16092" -> "16085" 
+  "16098" -> "16096" 
+  "16105" -> "16109" 
+  "16108" -> "16111" 
+  "16111" -> "16104" 
+  "16117" -> "16115" 
+  "16124" -> "16128" 
+  "16127" -> "16130" 
+  "16130" -> "16123" 
+  "16136" -> "16134" 
+  "16143" -> "16147" 
+  "16146" -> "16149" 
+  "16149" -> "16142" 
+  "16155" -> "16153" 
+  "16162" -> "16166" 
+  "16165" -> "16168" 
+  "16168" -> "16161" 
+  "16174" -> "16172" 
+  "16181" -> "16185" 
+  "16184" -> "16187" 
+  "16187" -> "16180" 
+  "16193" -> "16191" 
+  "16202" -> "16201" 
+  "16208" -> "16212" 
+  "16211" -> "16214" 
+  "16214" -> "16207" 
+  "16220" -> "16218" 
+  "16229" -> "16228" 
+  "16235" -> "16239" 
+  "16238" -> "16241" 
+  "16241" -> "16234" 
+  "16247" -> "16245" 
+  "16255" -> "16254" 
   "16053" -> "16051" 
-  "16060" -> "16058" 
-  "16071" -> "16074" 
-  "16074" -> "16070" 
-  "16080" -> "16078" 
-  "16091" -> "16094" 
-  "16094" -> "16090" 
-  "16100" -> "16098" 
-  "16024" -> "16023" 
-  "16033" -> "16032" 
-  "16045" -> "16043" 
-  "16054" -> "16053" 
-  "16061" -> "16060" 
-  "16073" -> "16071" 
-  "16081" -> "16080" 
-  "16093" -> "16091" 
-  "16101" -> "16100" 
-  "16026" -> "16024" 
-  "16035" -> "16033" 
-  "16056" -> "16054" 
-  "16063" -> "16061" 
-  "16083" -> "16081" 
-  "16103" -> "16101" 
-  "16017" -> "16026" 
+  "16062" -> "16060" 
+  "16069" -> "16067" 
+  "16071" -> "16070" 
+  "16088" -> "16086" 
+  "16090" -> "16089" 
+  "16107" -> "16105" 
+  "16109" -> "16108" 
+  "16126" -> "16124" 
+  "16128" -> "16127" 
+  "16145" -> "16143" 
+  "16147" -> "16146" 
+  "16164" -> "16162" 
+  "16166" -> "16165" 
+  "16183" -> "16181" 
+  "16185" -> "16184" 
+  "16204" -> "16202" 
+  "16210" -> "16208" 
+  "16212" -> "16211" 
+  "16231" -> "16229" 
+  "16237" -> "16235" 
+  "16239" -> "16238" 
+  "16257" -> "16255" 
+  "16044" -> "16053" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/281-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/281-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/281-cfg.dot	2023-06-07 19:35:01.627387148 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/281-cfg.dot	2023-06-07 19:35:08.167386503 +0330
@@ -1,96 +1,283 @@
-digraph "GetFromReflectedField_ToReflectedFieldBadArgumentTest" {  
-"16111" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>262</SUB>> ]
-"16120" [label = <(&lt;operator&gt;.assignment,c = env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>265</SUB>> ]
-"16127" [label = <(ASSERT_NE,ASSERT_NE(c, nullptr))<SUB>266</SUB>> ]
-"16131" [label = <(&lt;operator&gt;.assignment,fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;))<SUB>267</SUB>> ]
-"16140" [label = <(ASSERT_NE,ASSERT_NE(fid, nullptr))<SUB>268</SUB>> ]
-"16144" [label = <(&lt;operator&gt;.assignment,field = env_-&gt;ToReflectedField(nullptr, fid, JNI_FALSE))<SUB>271</SUB>> ]
-"16169" [label = <(&lt;operator&gt;.assignment,field = env_-&gt;ToReflectedField(c, nullptr, JNI_FALSE))<SUB>279</SUB>> ]
-"16178" [label = <(EXPECT_EQ,EXPECT_EQ(field, nullptr))<SUB>280</SUB>> ]
-"16181" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;jfieldID was NULL&quot;\012 : &quot;fid == null&quot;))<SUB>281</SUB>> ]
-"16189" [label = <(&lt;operator&gt;.assignment,fid = env_-&gt;FromReflectedField(nullptr))<SUB>284</SUB>> ]
-"16196" [label = <(ASSERT_EQ,ASSERT_EQ(fid, nullptr))<SUB>285</SUB>> ]
-"16199" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;expected non-null java.lang.reflect.Field&quot;\012 : &quot;jlr_field == null&quot;))<SUB>286</SUB>> ]
-"16207" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>289</SUB>> ]
-"16113" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>262</SUB>> ]
-"16122" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>265</SUB>> ]
-"16133" [label = <(GetFieldID,env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;))<SUB>267</SUB>> ]
-"16146" [label = <(ToReflectedField,env_-&gt;ToReflectedField(nullptr, fid, JNI_FALSE))<SUB>271</SUB>> ]
-"16171" [label = <(ToReflectedField,env_-&gt;ToReflectedField(c, nullptr, JNI_FALSE))<SUB>279</SUB>> ]
-"16182" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>281</SUB>> ]
-"16185" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;jfieldID was NULL&quot;\012 : &quot;fid == null&quot;)<SUB>281</SUB>> ]
-"16191" [label = <(FromReflectedField,env_-&gt;FromReflectedField(nullptr))<SUB>284</SUB>> ]
-"16200" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>286</SUB>> ]
-"16203" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;expected non-null java.lang.reflect.Field&quot;\012 : &quot;jlr_field == null&quot;)<SUB>286</SUB>> ]
-"16209" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>289</SUB>> ]
-"16114" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>262</SUB>> ]
-"16123" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>265</SUB>> ]
-"16134" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetFieldID)<SUB>267</SUB>> ]
-"16147" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ToReflectedField)<SUB>271</SUB>> ]
-"16156" [label = <(EXPECT_EQ,EXPECT_EQ(field, nullptr))<SUB>273</SUB>> ]
-"16159" [label = <(Check,check_jni_abort_catcher.Check(&quot;ToReflectedField received NULL jclass&quot;))<SUB>274</SUB>> ]
-"16172" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ToReflectedField)<SUB>279</SUB>> ]
-"16184" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>281</SUB>> ]
-"16192" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FromReflectedField)<SUB>284</SUB>> ]
-"16202" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>286</SUB>> ]
-"16210" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>289</SUB>> ]
-"16116" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>262</SUB>> ]
-"16125" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>265</SUB>> ]
-"16136" [label = <(FIELD_IDENTIFIER,GetFieldID,GetFieldID)<SUB>267</SUB>> ]
-"16149" [label = <(FIELD_IDENTIFIER,ToReflectedField,ToReflectedField)<SUB>271</SUB>> ]
-"16160" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>274</SUB>> ]
-"16166" [label = <(EXPECT_NE,EXPECT_NE(field, nullptr))<SUB>276</SUB>> ]
-"16174" [label = <(FIELD_IDENTIFIER,ToReflectedField,ToReflectedField)<SUB>279</SUB>> ]
-"16194" [label = <(FIELD_IDENTIFIER,FromReflectedField,FromReflectedField)<SUB>284</SUB>> ]
-"16212" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>289</SUB>> ]
-"16162" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>274</SUB>> ]
-"16107" [label = <(METHOD,GetFromReflectedField_ToReflectedFieldBadArgumentTest)<SUB>261</SUB>> ]
-"16214" [label = <(METHOD_RETURN,void)<SUB>261</SUB>> ]
-  "16111" -> "16125" 
-  "16120" -> "16127" 
-  "16127" -> "16136" 
-  "16131" -> "16140" 
-  "16140" -> "16149" 
-  "16144" -> "16156" 
-  "16144" -> "16166" 
-  "16169" -> "16178" 
-  "16178" -> "16184" 
-  "16181" -> "16194" 
-  "16189" -> "16196" 
-  "16196" -> "16202" 
-  "16199" -> "16212" 
-  "16207" -> "16214" 
-  "16113" -> "16111" 
-  "16122" -> "16120" 
-  "16133" -> "16131" 
-  "16146" -> "16144" 
-  "16171" -> "16169" 
-  "16182" -> "16185" 
-  "16185" -> "16181" 
-  "16191" -> "16189" 
-  "16200" -> "16203" 
-  "16203" -> "16199" 
-  "16209" -> "16207" 
-  "16114" -> "16113" 
-  "16123" -> "16122" 
-  "16134" -> "16133" 
-  "16147" -> "16146" 
-  "16156" -> "16162" 
-  "16159" -> "16174" 
-  "16172" -> "16171" 
-  "16184" -> "16182" 
-  "16192" -> "16191" 
-  "16202" -> "16200" 
-  "16210" -> "16209" 
-  "16116" -> "16114" 
-  "16125" -> "16123" 
-  "16136" -> "16134" 
-  "16149" -> "16147" 
-  "16160" -> "16159" 
-  "16166" -> "16174" 
-  "16174" -> "16172" 
-  "16194" -> "16192" 
-  "16212" -> "16210" 
-  "16162" -> "16160" 
-  "16107" -> "16116" 
+digraph "ReleasePrimitiveArrayElementsOfWrongType" {  
+"16265" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>396</SUB>> ]
+"16514" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>464</SUB>> ]
+"16267" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>396</SUB>> ]
+"16275" [label = <(&lt;operator&gt;.assignment,array = env_-&gt;NewBooleanArray(10))<SUB>399</SUB>> ]
+"16282" [label = <(ASSERT_TRUE,ASSERT_TRUE(array != nullptr))<SUB>400</SUB>> ]
+"16288" [label = <(&lt;operator&gt;.assignment,* elements = env_-&gt;GetBooleanArrayElements(array, &amp;is_copy))<SUB>402</SUB>> ]
+"16297" [label = <(ASSERT_TRUE,ASSERT_TRUE(elements != nullptr))<SUB>403</SUB>> ]
+"16301" [label = <(ReleaseByteArrayElements,env_-&gt;ReleaseByteArrayElements(reinterpret_cast&lt;jbyteArray&gt;(array),\012 reinterpret_cast&lt;jbyte*&gt;(elements), 0))<SUB>404</SUB>> ]
+"16312" [label = <(Check,jni_abort_catcher.Check(\012          check_jni ? &quot;incompatible array type boolean[] expected byte[]&quot;\012 : &quot;attempt to release byte primitive array elements with an object of type boolean[]&quot;))<SUB>406</SUB>> ]
+"16320" [label = <(ReleaseShortArrayElements,env_-&gt;ReleaseShortArrayElements(reinterpret_cast&lt;jshortArray&gt;(array),\012 reinterpret_cast&lt;jshort*&gt;(elements), 0))<SUB>409</SUB>> ]
+"16331" [label = <(Check,jni_abort_catcher.Check(\012          check_jni ? &quot;incompatible array type boolean[] expected short[]&quot;\012 : &quot;attempt to release short primitive array elements with an object of type boolean[]&quot;))<SUB>411</SUB>> ]
+"16339" [label = <(ReleaseCharArrayElements,env_-&gt;ReleaseCharArrayElements(reinterpret_cast&lt;jcharArray&gt;(array),\012 reinterpret_cast&lt;jchar*&gt;(elements), 0))<SUB>414</SUB>> ]
+"16350" [label = <(Check,jni_abort_catcher.Check(\012          check_jni ? &quot;incompatible array type boolean[] expected char[]&quot;\012 : &quot;attempt to release char primitive array elements with an object of type boolean[]&quot;))<SUB>416</SUB>> ]
+"16358" [label = <(ReleaseIntArrayElements,env_-&gt;ReleaseIntArrayElements(reinterpret_cast&lt;jintArray&gt;(array),\012 reinterpret_cast&lt;jint*&gt;(elements), 0))<SUB>419</SUB>> ]
+"16369" [label = <(Check,jni_abort_catcher.Check(\012          check_jni ? &quot;incompatible array type boolean[] expected int[]&quot;\012 : &quot;attempt to release int primitive array elements with an object of type boolean[]&quot;))<SUB>421</SUB>> ]
+"16377" [label = <(ReleaseLongArrayElements,env_-&gt;ReleaseLongArrayElements(reinterpret_cast&lt;jlongArray&gt;(array),\012 reinterpret_cast&lt;jlong*&gt;(elements), 0))<SUB>424</SUB>> ]
+"16388" [label = <(Check,jni_abort_catcher.Check(\012          check_jni ? &quot;incompatible array type boolean[] expected long[]&quot;\012 : &quot;attempt to release long primitive array elements with an object of type boolean[]&quot;))<SUB>426</SUB>> ]
+"16396" [label = <(ReleaseFloatArrayElements,env_-&gt;ReleaseFloatArrayElements(reinterpret_cast&lt;jfloatArray&gt;(array),\012 reinterpret_cast&lt;jfloat*&gt;(elements), 0))<SUB>429</SUB>> ]
+"16407" [label = <(Check,jni_abort_catcher.Check(\012          check_jni ? &quot;incompatible array type boolean[] expected float[]&quot;\012 : &quot;attempt to release float primitive array elements with an object of type boolean[]&quot;))<SUB>431</SUB>> ]
+"16415" [label = <(ReleaseDoubleArrayElements,env_-&gt;ReleaseDoubleArrayElements(reinterpret_cast&lt;jdoubleArray&gt;(array),\012 reinterpret_cast&lt;jdouble*&gt;(elements), 0))<SUB>434</SUB>> ]
+"16426" [label = <(Check,jni_abort_catcher.Check(\012          check_jni ? &quot;incompatible array type boolean[] expected double[]&quot;\012 : &quot;attempt to release double primitive array elements with an object of type boolean[]&quot;))<SUB>436</SUB>> ]
+"16434" [label = <(ReleaseBooleanArrayElements,env_-&gt;ReleaseBooleanArrayElements(array, elements, 0))<SUB>441</SUB>> ]
+"16443" [label = <(&lt;operator&gt;.assignment,array = env_-&gt;NewByteArray(10))<SUB>444</SUB>> ]
+"16452" [label = <(&lt;operator&gt;.assignment,* elements = env_-&gt;GetByteArrayElements(array, &amp;is_copy))<SUB>446</SUB>> ]
+"16461" [label = <(ReleaseBooleanArrayElements,env_-&gt;ReleaseBooleanArrayElements(reinterpret_cast&lt;jbooleanArray&gt;(array),\012 reinterpret_cast&lt;jboolean*&gt;(elements), 0))<SUB>448</SUB>> ]
+"16472" [label = <(Check,jni_abort_catcher.Check(\012          check_jni ? &quot;incompatible array type byte[] expected boolean[]&quot;\012 : &quot;attempt to release boolean primitive array elements with an object of type byte[]&quot;))<SUB>450</SUB>> ]
+"16481" [label = <(&lt;operator&gt;.assignment,object = env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>453</SUB>> ]
+"16488" [label = <(ReleaseBooleanArrayElements,env_-&gt;ReleaseBooleanArrayElements(reinterpret_cast&lt;jbooleanArray&gt;(object),\012 reinterpret_cast&lt;jboolean*&gt;(elements), 0))<SUB>454</SUB>> ]
+"16499" [label = <(Check,jni_abort_catcher.Check(\012          check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;attempt to release boolean primitive array elements with an object of type &quot;\012 &quot;java.lang.String&quot;))<SUB>456</SUB>> ]
+"16507" [label = <(ReleaseByteArrayElements,env_-&gt;ReleaseByteArrayElements(array, elements, 0))<SUB>462</SUB>> ]
+"16516" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>464</SUB>> ]
+"16268" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>396</SUB>> ]
+"16277" [label = <(NewBooleanArray,env_-&gt;NewBooleanArray(10))<SUB>399</SUB>> ]
+"16283" [label = <(&lt;operator&gt;.notEquals,array != nullptr)<SUB>400</SUB>> ]
+"16290" [label = <(GetBooleanArrayElements,env_-&gt;GetBooleanArrayElements(array, &amp;is_copy))<SUB>402</SUB>> ]
+"16298" [label = <(&lt;operator&gt;.notEquals,elements != nullptr)<SUB>403</SUB>> ]
+"16302" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseByteArrayElements)<SUB>404</SUB>> ]
+"16305" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbyteArray&gt;(array))<SUB>404</SUB>> ]
+"16308" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbyte*&gt;(elements))<SUB>405</SUB>> ]
+"16313" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>406</SUB>> ]
+"16316" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected byte[]&quot;\012 : &quot;attempt to release byte primitive array elements with an object of type boolean[]&quot;)<SUB>407</SUB>> ]
+"16321" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseShortArrayElements)<SUB>409</SUB>> ]
+"16324" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jshortArray&gt;(array))<SUB>409</SUB>> ]
+"16327" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jshort*&gt;(elements))<SUB>410</SUB>> ]
+"16332" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>411</SUB>> ]
+"16335" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected short[]&quot;\012 : &quot;attempt to release short primitive array elements with an object of type boolean[]&quot;)<SUB>412</SUB>> ]
+"16340" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseCharArrayElements)<SUB>414</SUB>> ]
+"16343" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jcharArray&gt;(array))<SUB>414</SUB>> ]
+"16346" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jchar*&gt;(elements))<SUB>415</SUB>> ]
+"16351" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>416</SUB>> ]
+"16354" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected char[]&quot;\012 : &quot;attempt to release char primitive array elements with an object of type boolean[]&quot;)<SUB>417</SUB>> ]
+"16359" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseIntArrayElements)<SUB>419</SUB>> ]
+"16362" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jintArray&gt;(array))<SUB>419</SUB>> ]
+"16365" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jint*&gt;(elements))<SUB>420</SUB>> ]
+"16370" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>421</SUB>> ]
+"16373" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected int[]&quot;\012 : &quot;attempt to release int primitive array elements with an object of type boolean[]&quot;)<SUB>422</SUB>> ]
+"16378" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseLongArrayElements)<SUB>424</SUB>> ]
+"16381" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jlongArray&gt;(array))<SUB>424</SUB>> ]
+"16384" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jlong*&gt;(elements))<SUB>425</SUB>> ]
+"16389" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>426</SUB>> ]
+"16392" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected long[]&quot;\012 : &quot;attempt to release long primitive array elements with an object of type boolean[]&quot;)<SUB>427</SUB>> ]
+"16397" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseFloatArrayElements)<SUB>429</SUB>> ]
+"16400" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jfloatArray&gt;(array))<SUB>429</SUB>> ]
+"16403" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jfloat*&gt;(elements))<SUB>430</SUB>> ]
+"16408" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>431</SUB>> ]
+"16411" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected float[]&quot;\012 : &quot;attempt to release float primitive array elements with an object of type boolean[]&quot;)<SUB>432</SUB>> ]
+"16416" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseDoubleArrayElements)<SUB>434</SUB>> ]
+"16419" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jdoubleArray&gt;(array))<SUB>434</SUB>> ]
+"16422" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jdouble*&gt;(elements))<SUB>435</SUB>> ]
+"16427" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>436</SUB>> ]
+"16430" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected double[]&quot;\012 : &quot;attempt to release double primitive array elements with an object of type boolean[]&quot;)<SUB>437</SUB>> ]
+"16435" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseBooleanArrayElements)<SUB>441</SUB>> ]
+"16445" [label = <(NewByteArray,env_-&gt;NewByteArray(10))<SUB>444</SUB>> ]
+"16454" [label = <(GetByteArrayElements,env_-&gt;GetByteArrayElements(array, &amp;is_copy))<SUB>446</SUB>> ]
+"16462" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseBooleanArrayElements)<SUB>448</SUB>> ]
+"16465" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbooleanArray&gt;(array))<SUB>448</SUB>> ]
+"16468" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jboolean*&gt;(elements))<SUB>449</SUB>> ]
+"16473" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>450</SUB>> ]
+"16476" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type byte[] expected boolean[]&quot;\012 : &quot;attempt to release boolean primitive array elements with an object of type byte[]&quot;)<SUB>451</SUB>> ]
+"16483" [label = <(NewStringUTF,env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>453</SUB>> ]
+"16489" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseBooleanArrayElements)<SUB>454</SUB>> ]
+"16492" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbooleanArray&gt;(object))<SUB>454</SUB>> ]
+"16495" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jboolean*&gt;(elements))<SUB>455</SUB>> ]
+"16500" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>456</SUB>> ]
+"16503" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;attempt to release boolean primitive array elements with an object of type &quot;\012 &quot;java.lang.String&quot;)<SUB>457</SUB>> ]
+"16508" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseByteArrayElements)<SUB>462</SUB>> ]
+"16517" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>464</SUB>> ]
+"16270" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>396</SUB>> ]
+"16278" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewBooleanArray)<SUB>399</SUB>> ]
+"16291" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetBooleanArrayElements)<SUB>402</SUB>> ]
+"16295" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>402</SUB>> ]
+"16304" [label = <(FIELD_IDENTIFIER,ReleaseByteArrayElements,ReleaseByteArrayElements)<SUB>404</SUB>> ]
+"16306" [label = <(UNKNOWN,jbyteArray,jbyteArray)<SUB>404</SUB>> ]
+"16309" [label = <(UNKNOWN,jbyte*,jbyte*)<SUB>405</SUB>> ]
+"16315" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>406</SUB>> ]
+"16323" [label = <(FIELD_IDENTIFIER,ReleaseShortArrayElements,ReleaseShortArrayElements)<SUB>409</SUB>> ]
+"16325" [label = <(UNKNOWN,jshortArray,jshortArray)<SUB>409</SUB>> ]
+"16328" [label = <(UNKNOWN,jshort*,jshort*)<SUB>410</SUB>> ]
+"16334" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>411</SUB>> ]
+"16342" [label = <(FIELD_IDENTIFIER,ReleaseCharArrayElements,ReleaseCharArrayElements)<SUB>414</SUB>> ]
+"16344" [label = <(UNKNOWN,jcharArray,jcharArray)<SUB>414</SUB>> ]
+"16347" [label = <(UNKNOWN,jchar*,jchar*)<SUB>415</SUB>> ]
+"16353" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>416</SUB>> ]
+"16361" [label = <(FIELD_IDENTIFIER,ReleaseIntArrayElements,ReleaseIntArrayElements)<SUB>419</SUB>> ]
+"16363" [label = <(UNKNOWN,jintArray,jintArray)<SUB>419</SUB>> ]
+"16366" [label = <(UNKNOWN,jint*,jint*)<SUB>420</SUB>> ]
+"16372" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>421</SUB>> ]
+"16380" [label = <(FIELD_IDENTIFIER,ReleaseLongArrayElements,ReleaseLongArrayElements)<SUB>424</SUB>> ]
+"16382" [label = <(UNKNOWN,jlongArray,jlongArray)<SUB>424</SUB>> ]
+"16385" [label = <(UNKNOWN,jlong*,jlong*)<SUB>425</SUB>> ]
+"16391" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>426</SUB>> ]
+"16399" [label = <(FIELD_IDENTIFIER,ReleaseFloatArrayElements,ReleaseFloatArrayElements)<SUB>429</SUB>> ]
+"16401" [label = <(UNKNOWN,jfloatArray,jfloatArray)<SUB>429</SUB>> ]
+"16404" [label = <(UNKNOWN,jfloat*,jfloat*)<SUB>430</SUB>> ]
+"16410" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>431</SUB>> ]
+"16418" [label = <(FIELD_IDENTIFIER,ReleaseDoubleArrayElements,ReleaseDoubleArrayElements)<SUB>434</SUB>> ]
+"16420" [label = <(UNKNOWN,jdoubleArray,jdoubleArray)<SUB>434</SUB>> ]
+"16423" [label = <(UNKNOWN,jdouble*,jdouble*)<SUB>435</SUB>> ]
+"16429" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>436</SUB>> ]
+"16437" [label = <(FIELD_IDENTIFIER,ReleaseBooleanArrayElements,ReleaseBooleanArrayElements)<SUB>441</SUB>> ]
+"16446" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewByteArray)<SUB>444</SUB>> ]
+"16455" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetByteArrayElements)<SUB>446</SUB>> ]
+"16459" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>446</SUB>> ]
+"16464" [label = <(FIELD_IDENTIFIER,ReleaseBooleanArrayElements,ReleaseBooleanArrayElements)<SUB>448</SUB>> ]
+"16466" [label = <(UNKNOWN,jbooleanArray,jbooleanArray)<SUB>448</SUB>> ]
+"16469" [label = <(UNKNOWN,jboolean*,jboolean*)<SUB>449</SUB>> ]
+"16475" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>450</SUB>> ]
+"16484" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewStringUTF)<SUB>453</SUB>> ]
+"16491" [label = <(FIELD_IDENTIFIER,ReleaseBooleanArrayElements,ReleaseBooleanArrayElements)<SUB>454</SUB>> ]
+"16493" [label = <(UNKNOWN,jbooleanArray,jbooleanArray)<SUB>454</SUB>> ]
+"16496" [label = <(UNKNOWN,jboolean*,jboolean*)<SUB>455</SUB>> ]
+"16502" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>456</SUB>> ]
+"16510" [label = <(FIELD_IDENTIFIER,ReleaseByteArrayElements,ReleaseByteArrayElements)<SUB>462</SUB>> ]
+"16519" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>464</SUB>> ]
+"16280" [label = <(FIELD_IDENTIFIER,NewBooleanArray,NewBooleanArray)<SUB>399</SUB>> ]
+"16293" [label = <(FIELD_IDENTIFIER,GetBooleanArrayElements,GetBooleanArrayElements)<SUB>402</SUB>> ]
+"16448" [label = <(FIELD_IDENTIFIER,NewByteArray,NewByteArray)<SUB>444</SUB>> ]
+"16457" [label = <(FIELD_IDENTIFIER,GetByteArrayElements,GetByteArrayElements)<SUB>446</SUB>> ]
+"16486" [label = <(FIELD_IDENTIFIER,NewStringUTF,NewStringUTF)<SUB>453</SUB>> ]
+"16261" [label = <(METHOD,ReleasePrimitiveArrayElementsOfWrongType)<SUB>395</SUB>> ]
+"16521" [label = <(METHOD_RETURN,void)<SUB>395</SUB>> ]
+  "16265" -> "16280" 
+  "16514" -> "16521" 
+  "16267" -> "16265" 
+  "16275" -> "16283" 
+  "16282" -> "16293" 
+  "16288" -> "16298" 
+  "16297" -> "16304" 
+  "16301" -> "16315" 
+  "16312" -> "16323" 
+  "16320" -> "16334" 
+  "16331" -> "16342" 
+  "16339" -> "16353" 
+  "16350" -> "16361" 
+  "16358" -> "16372" 
+  "16369" -> "16380" 
+  "16377" -> "16391" 
+  "16388" -> "16399" 
+  "16396" -> "16410" 
+  "16407" -> "16418" 
+  "16415" -> "16429" 
+  "16426" -> "16437" 
+  "16434" -> "16448" 
+  "16443" -> "16457" 
+  "16452" -> "16464" 
+  "16461" -> "16475" 
+  "16472" -> "16486" 
+  "16481" -> "16491" 
+  "16488" -> "16502" 
+  "16499" -> "16510" 
+  "16507" -> "16519" 
+  "16516" -> "16514" 
+  "16268" -> "16267" 
+  "16277" -> "16275" 
+  "16283" -> "16282" 
+  "16290" -> "16288" 
+  "16298" -> "16297" 
+  "16302" -> "16306" 
+  "16305" -> "16309" 
+  "16308" -> "16301" 
+  "16313" -> "16316" 
+  "16316" -> "16312" 
+  "16321" -> "16325" 
+  "16324" -> "16328" 
+  "16327" -> "16320" 
+  "16332" -> "16335" 
+  "16335" -> "16331" 
+  "16340" -> "16344" 
+  "16343" -> "16347" 
+  "16346" -> "16339" 
+  "16351" -> "16354" 
+  "16354" -> "16350" 
+  "16359" -> "16363" 
+  "16362" -> "16366" 
+  "16365" -> "16358" 
+  "16370" -> "16373" 
+  "16373" -> "16369" 
+  "16378" -> "16382" 
+  "16381" -> "16385" 
+  "16384" -> "16377" 
+  "16389" -> "16392" 
+  "16392" -> "16388" 
+  "16397" -> "16401" 
+  "16400" -> "16404" 
+  "16403" -> "16396" 
+  "16408" -> "16411" 
+  "16411" -> "16407" 
+  "16416" -> "16420" 
+  "16419" -> "16423" 
+  "16422" -> "16415" 
+  "16427" -> "16430" 
+  "16430" -> "16426" 
+  "16435" -> "16434" 
+  "16445" -> "16443" 
+  "16454" -> "16452" 
+  "16462" -> "16466" 
+  "16465" -> "16469" 
+  "16468" -> "16461" 
+  "16473" -> "16476" 
+  "16476" -> "16472" 
+  "16483" -> "16481" 
+  "16489" -> "16493" 
+  "16492" -> "16496" 
+  "16495" -> "16488" 
+  "16500" -> "16503" 
+  "16503" -> "16499" 
+  "16508" -> "16507" 
+  "16517" -> "16516" 
+  "16270" -> "16268" 
+  "16278" -> "16277" 
+  "16291" -> "16295" 
+  "16295" -> "16290" 
+  "16304" -> "16302" 
+  "16306" -> "16305" 
+  "16309" -> "16308" 
+  "16315" -> "16313" 
+  "16323" -> "16321" 
+  "16325" -> "16324" 
+  "16328" -> "16327" 
+  "16334" -> "16332" 
+  "16342" -> "16340" 
+  "16344" -> "16343" 
+  "16347" -> "16346" 
+  "16353" -> "16351" 
+  "16361" -> "16359" 
+  "16363" -> "16362" 
+  "16366" -> "16365" 
+  "16372" -> "16370" 
+  "16380" -> "16378" 
+  "16382" -> "16381" 
+  "16385" -> "16384" 
+  "16391" -> "16389" 
+  "16399" -> "16397" 
+  "16401" -> "16400" 
+  "16404" -> "16403" 
+  "16410" -> "16408" 
+  "16418" -> "16416" 
+  "16420" -> "16419" 
+  "16423" -> "16422" 
+  "16429" -> "16427" 
+  "16437" -> "16435" 
+  "16446" -> "16445" 
+  "16455" -> "16459" 
+  "16459" -> "16454" 
+  "16464" -> "16462" 
+  "16466" -> "16465" 
+  "16469" -> "16468" 
+  "16475" -> "16473" 
+  "16484" -> "16483" 
+  "16491" -> "16489" 
+  "16493" -> "16492" 
+  "16496" -> "16495" 
+  "16502" -> "16500" 
+  "16510" -> "16508" 
+  "16519" -> "16517" 
+  "16280" -> "16278" 
+  "16293" -> "16291" 
+  "16448" -> "16446" 
+  "16457" -> "16455" 
+  "16486" -> "16484" 
+  "16261" -> "16270" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/282-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/282-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/282-cfg.dot	2023-06-07 19:35:01.627387148 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/282-cfg.dot	2023-06-07 19:35:08.167386503 +0330
@@ -1,96 +1,69 @@
-digraph "GetFromReflectedMethod_ToReflectedMethodBadArgumentTest" {  
-"16220" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>293</SUB>> ]
-"16229" [label = <(&lt;operator&gt;.assignment,c = env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>296</SUB>> ]
-"16236" [label = <(ASSERT_NE,ASSERT_NE(c, nullptr))<SUB>297</SUB>> ]
-"16240" [label = <(&lt;operator&gt;.assignment,mid = env_-&gt;GetMethodID(c, &quot;&lt;init&gt;&quot;, &quot;()V&quot;))<SUB>298</SUB>> ]
-"16249" [label = <(ASSERT_NE,ASSERT_NE(mid, nullptr))<SUB>299</SUB>> ]
-"16253" [label = <(&lt;operator&gt;.assignment,method = env_-&gt;ToReflectedMethod(nullptr, mid, JNI_FALSE))<SUB>302</SUB>> ]
-"16278" [label = <(&lt;operator&gt;.assignment,method = env_-&gt;ToReflectedMethod(c, nullptr, JNI_FALSE))<SUB>310</SUB>> ]
-"16287" [label = <(EXPECT_EQ,EXPECT_EQ(method, nullptr))<SUB>311</SUB>> ]
-"16290" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;jmethodID was NULL&quot;\012 : &quot;mid == null&quot;))<SUB>312</SUB>> ]
-"16298" [label = <(&lt;operator&gt;.assignment,mid = env_-&gt;FromReflectedMethod(method))<SUB>314</SUB>> ]
-"16305" [label = <(ASSERT_EQ,ASSERT_EQ(mid, nullptr))<SUB>315</SUB>> ]
-"16308" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;expected non-null method&quot; : &quot;jlr_method == null&quot;))<SUB>316</SUB>> ]
-"16316" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>318</SUB>> ]
-"16222" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>293</SUB>> ]
-"16231" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>296</SUB>> ]
-"16242" [label = <(GetMethodID,env_-&gt;GetMethodID(c, &quot;&lt;init&gt;&quot;, &quot;()V&quot;))<SUB>298</SUB>> ]
-"16255" [label = <(ToReflectedMethod,env_-&gt;ToReflectedMethod(nullptr, mid, JNI_FALSE))<SUB>302</SUB>> ]
-"16280" [label = <(ToReflectedMethod,env_-&gt;ToReflectedMethod(c, nullptr, JNI_FALSE))<SUB>310</SUB>> ]
-"16291" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>312</SUB>> ]
-"16294" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;jmethodID was NULL&quot;\012 : &quot;mid == null&quot;)<SUB>312</SUB>> ]
-"16300" [label = <(FromReflectedMethod,env_-&gt;FromReflectedMethod(method))<SUB>314</SUB>> ]
-"16309" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>316</SUB>> ]
-"16312" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;expected non-null method&quot; : &quot;jlr_method == null&quot;)<SUB>316</SUB>> ]
-"16318" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>318</SUB>> ]
-"16223" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>293</SUB>> ]
-"16232" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>296</SUB>> ]
-"16243" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetMethodID)<SUB>298</SUB>> ]
-"16256" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ToReflectedMethod)<SUB>302</SUB>> ]
-"16265" [label = <(EXPECT_EQ,EXPECT_EQ(method, nullptr))<SUB>304</SUB>> ]
-"16268" [label = <(Check,check_jni_abort_catcher.Check(&quot;ToReflectedMethod received NULL jclass&quot;))<SUB>305</SUB>> ]
-"16281" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ToReflectedMethod)<SUB>310</SUB>> ]
-"16293" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>312</SUB>> ]
-"16301" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FromReflectedMethod)<SUB>314</SUB>> ]
-"16311" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>316</SUB>> ]
-"16319" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>318</SUB>> ]
-"16225" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>293</SUB>> ]
-"16234" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>296</SUB>> ]
-"16245" [label = <(FIELD_IDENTIFIER,GetMethodID,GetMethodID)<SUB>298</SUB>> ]
-"16258" [label = <(FIELD_IDENTIFIER,ToReflectedMethod,ToReflectedMethod)<SUB>302</SUB>> ]
-"16269" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>305</SUB>> ]
-"16275" [label = <(EXPECT_NE,EXPECT_NE(method, nullptr))<SUB>307</SUB>> ]
-"16283" [label = <(FIELD_IDENTIFIER,ToReflectedMethod,ToReflectedMethod)<SUB>310</SUB>> ]
-"16303" [label = <(FIELD_IDENTIFIER,FromReflectedMethod,FromReflectedMethod)<SUB>314</SUB>> ]
-"16321" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>318</SUB>> ]
-"16271" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>305</SUB>> ]
-"16216" [label = <(METHOD,GetFromReflectedMethod_ToReflectedMethodBadArgumentTest)<SUB>292</SUB>> ]
-"16323" [label = <(METHOD_RETURN,void)<SUB>292</SUB>> ]
-  "16220" -> "16234" 
-  "16229" -> "16236" 
-  "16236" -> "16245" 
-  "16240" -> "16249" 
-  "16249" -> "16258" 
-  "16253" -> "16265" 
-  "16253" -> "16275" 
-  "16278" -> "16287" 
-  "16287" -> "16293" 
-  "16290" -> "16303" 
-  "16298" -> "16305" 
-  "16305" -> "16311" 
-  "16308" -> "16321" 
-  "16316" -> "16323" 
-  "16222" -> "16220" 
-  "16231" -> "16229" 
-  "16242" -> "16240" 
-  "16255" -> "16253" 
-  "16280" -> "16278" 
-  "16291" -> "16294" 
-  "16294" -> "16290" 
-  "16300" -> "16298" 
-  "16309" -> "16312" 
-  "16312" -> "16308" 
-  "16318" -> "16316" 
-  "16223" -> "16222" 
-  "16232" -> "16231" 
-  "16243" -> "16242" 
-  "16256" -> "16255" 
-  "16265" -> "16271" 
-  "16268" -> "16283" 
-  "16281" -> "16280" 
-  "16293" -> "16291" 
-  "16301" -> "16300" 
-  "16311" -> "16309" 
-  "16319" -> "16318" 
-  "16225" -> "16223" 
-  "16234" -> "16232" 
-  "16245" -> "16243" 
-  "16258" -> "16256" 
-  "16269" -> "16268" 
-  "16275" -> "16283" 
-  "16283" -> "16281" 
-  "16303" -> "16301" 
-  "16321" -> "16319" 
-  "16271" -> "16269" 
-  "16216" -> "16225" 
+digraph "GetReleasePrimitiveArrayCriticalOfWrongType" {  
+"16527" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>468</SUB>> ]
+"16536" [label = <(&lt;operator&gt;.assignment,object = env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>471</SUB>> ]
+"16545" [label = <(&lt;operator&gt;.assignment,* elements = env_-&gt;GetPrimitiveArrayCritical(reinterpret_cast&lt;jarray&gt;(object), &amp;is_copy))<SUB>473</SUB>> ]
+"16556" [label = <(Check,jni_abort_catcher.Check(check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;expected primitive array, given java.lang.String&quot;))<SUB>474</SUB>> ]
+"16564" [label = <(ReleasePrimitiveArrayCritical,env_-&gt;ReleasePrimitiveArrayCritical(reinterpret_cast&lt;jarray&gt;(object), elements, 0))<SUB>476</SUB>> ]
+"16573" [label = <(Check,jni_abort_catcher.Check(check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;expected primitive array, given java.lang.String&quot;))<SUB>477</SUB>> ]
+"16581" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>480</SUB>> ]
+"16529" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>468</SUB>> ]
+"16538" [label = <(NewStringUTF,env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>471</SUB>> ]
+"16547" [label = <(GetPrimitiveArrayCritical,env_-&gt;GetPrimitiveArrayCritical(reinterpret_cast&lt;jarray&gt;(object), &amp;is_copy))<SUB>473</SUB>> ]
+"16557" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>474</SUB>> ]
+"16560" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;expected primitive array, given java.lang.String&quot;)<SUB>474</SUB>> ]
+"16565" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleasePrimitiveArrayCritical)<SUB>476</SUB>> ]
+"16568" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jarray&gt;(object))<SUB>476</SUB>> ]
+"16574" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>477</SUB>> ]
+"16577" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;expected primitive array, given java.lang.String&quot;)<SUB>477</SUB>> ]
+"16583" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>480</SUB>> ]
+"16530" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>468</SUB>> ]
+"16539" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewStringUTF)<SUB>471</SUB>> ]
+"16548" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetPrimitiveArrayCritical)<SUB>473</SUB>> ]
+"16551" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jarray&gt;(object))<SUB>473</SUB>> ]
+"16554" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>473</SUB>> ]
+"16559" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>474</SUB>> ]
+"16567" [label = <(FIELD_IDENTIFIER,ReleasePrimitiveArrayCritical,ReleasePrimitiveArrayCritical)<SUB>476</SUB>> ]
+"16569" [label = <(UNKNOWN,jarray,jarray)<SUB>476</SUB>> ]
+"16576" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>477</SUB>> ]
+"16584" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>480</SUB>> ]
+"16532" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>468</SUB>> ]
+"16541" [label = <(FIELD_IDENTIFIER,NewStringUTF,NewStringUTF)<SUB>471</SUB>> ]
+"16550" [label = <(FIELD_IDENTIFIER,GetPrimitiveArrayCritical,GetPrimitiveArrayCritical)<SUB>473</SUB>> ]
+"16552" [label = <(UNKNOWN,jarray,jarray)<SUB>473</SUB>> ]
+"16586" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>480</SUB>> ]
+"16523" [label = <(METHOD,GetReleasePrimitiveArrayCriticalOfWrongType)<SUB>467</SUB>> ]
+"16588" [label = <(METHOD_RETURN,void)<SUB>467</SUB>> ]
+  "16527" -> "16541" 
+  "16536" -> "16550" 
+  "16545" -> "16559" 
+  "16556" -> "16567" 
+  "16564" -> "16576" 
+  "16573" -> "16586" 
+  "16581" -> "16588" 
+  "16529" -> "16527" 
+  "16538" -> "16536" 
+  "16547" -> "16545" 
+  "16557" -> "16560" 
+  "16560" -> "16556" 
+  "16565" -> "16569" 
+  "16568" -> "16564" 
+  "16574" -> "16577" 
+  "16577" -> "16573" 
+  "16583" -> "16581" 
+  "16530" -> "16529" 
+  "16539" -> "16538" 
+  "16548" -> "16552" 
+  "16551" -> "16554" 
+  "16554" -> "16547" 
+  "16559" -> "16557" 
+  "16567" -> "16565" 
+  "16569" -> "16568" 
+  "16576" -> "16574" 
+  "16584" -> "16583" 
+  "16532" -> "16530" 
+  "16541" -> "16539" 
+  "16550" -> "16548" 
+  "16552" -> "16551" 
+  "16586" -> "16584" 
+  "16523" -> "16532" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/283-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/283-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/283-cfg.dot	2023-06-07 19:35:01.627387148 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/283-cfg.dot	2023-06-07 19:35:08.167386503 +0330
@@ -1,79 +1,249 @@
-digraph "RegisterAndUnregisterNativesBadArguments" {  
-"16330" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>323</SUB>> ]
-"16360" [label = <(&lt;operator&gt;.assignment,jlobject = env_-&gt;FindClass(&quot;java/lang/Object&quot;))<SUB>333</SUB>> ]
-"16367" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, nullptr, 1), JNI_ERR))<SUB>334</SUB>> ]
-"16376" [label = <(Check,check_jni_abort_catcher-&gt;Check(&quot;methods == null&quot;))<SUB>335</SUB>> ]
-"16381" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;UnregisterNatives(nullptr), JNI_ERR))<SUB>338</SUB>> ]
-"16388" [label = <(Check,check_jni_abort_catcher-&gt;Check(check_jni ? &quot;UnregisterNatives received NULL jclass&quot;\012 : &quot;java_class == null&quot;))<SUB>339</SUB>> ]
-"16396" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>342</SUB>> ]
-"16332" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>323</SUB>> ]
-"16339" [label = <(&lt;operator&gt;.assignment,methods[] = { })<SUB>326</SUB>> ]
-"16342" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;RegisterNatives(nullptr, methods, 0), JNI_ERR))<SUB>327</SUB>> ]
-"16351" [label = <(Check,check_jni_abort_catcher-&gt;Check(check_jni ? &quot;RegisterNatives received NULL jclass&quot;\012 : &quot;java_class == null&quot;))<SUB>328</SUB>> ]
-"16362" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/Object&quot;))<SUB>333</SUB>> ]
-"16368" [label = <(RegisterNatives,env_-&gt;RegisterNatives(jlobject, nullptr, 1))<SUB>334</SUB>> ]
-"16377" [label = <(&lt;operator&gt;.indirectFieldAccess,check_jni_abort_catcher-&gt;Check)<SUB>335</SUB>> ]
-"16382" [label = <(UnregisterNatives,env_-&gt;UnregisterNatives(nullptr))<SUB>338</SUB>> ]
-"16389" [label = <(&lt;operator&gt;.indirectFieldAccess,check_jni_abort_catcher-&gt;Check)<SUB>339</SUB>> ]
-"16392" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;UnregisterNatives received NULL jclass&quot;\012 : &quot;java_class == null&quot;)<SUB>339</SUB>> ]
-"16398" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>342</SUB>> ]
-"16333" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>323</SUB>> ]
-"16341" [label = <(&lt;operator&gt;.arrayInitializer,{ })<SUB>326</SUB>> ]
-"16343" [label = <(RegisterNatives,env_-&gt;RegisterNatives(nullptr, methods, 0))<SUB>327</SUB>> ]
-"16352" [label = <(&lt;operator&gt;.indirectFieldAccess,check_jni_abort_catcher-&gt;Check)<SUB>328</SUB>> ]
-"16355" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;RegisterNatives received NULL jclass&quot;\012 : &quot;java_class == null&quot;)<SUB>328</SUB>> ]
-"16363" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>333</SUB>> ]
-"16369" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;RegisterNatives)<SUB>334</SUB>> ]
-"16379" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>335</SUB>> ]
-"16383" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;UnregisterNatives)<SUB>338</SUB>> ]
-"16391" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>339</SUB>> ]
-"16399" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>342</SUB>> ]
-"16335" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>323</SUB>> ]
-"16344" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;RegisterNatives)<SUB>327</SUB>> ]
-"16354" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>328</SUB>> ]
-"16365" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>333</SUB>> ]
-"16371" [label = <(FIELD_IDENTIFIER,RegisterNatives,RegisterNatives)<SUB>334</SUB>> ]
-"16385" [label = <(FIELD_IDENTIFIER,UnregisterNatives,UnregisterNatives)<SUB>338</SUB>> ]
-"16401" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>342</SUB>> ]
-"16346" [label = <(FIELD_IDENTIFIER,RegisterNatives,RegisterNatives)<SUB>327</SUB>> ]
-"16325" [label = <(METHOD,RegisterAndUnregisterNativesBadArguments)<SUB>321</SUB>> ]
-"16403" [label = <(METHOD_RETURN,void)<SUB>321</SUB>> ]
-  "16330" -> "16341" 
-  "16360" -> "16371" 
-  "16367" -> "16379" 
-  "16376" -> "16385" 
-  "16381" -> "16391" 
-  "16388" -> "16401" 
-  "16396" -> "16403" 
-  "16332" -> "16330" 
-  "16339" -> "16346" 
-  "16342" -> "16354" 
-  "16351" -> "16365" 
-  "16362" -> "16360" 
-  "16368" -> "16367" 
-  "16377" -> "16376" 
-  "16382" -> "16381" 
-  "16389" -> "16392" 
-  "16392" -> "16388" 
-  "16398" -> "16396" 
-  "16333" -> "16332" 
-  "16341" -> "16339" 
-  "16343" -> "16342" 
-  "16352" -> "16355" 
-  "16355" -> "16351" 
-  "16363" -> "16362" 
-  "16369" -> "16368" 
-  "16379" -> "16377" 
-  "16383" -> "16382" 
-  "16391" -> "16389" 
-  "16399" -> "16398" 
-  "16335" -> "16333" 
-  "16344" -> "16343" 
-  "16354" -> "16352" 
-  "16365" -> "16363" 
-  "16371" -> "16369" 
-  "16385" -> "16383" 
-  "16401" -> "16399" 
-  "16346" -> "16344" 
-  "16325" -> "16335" 
+digraph "GetPrimitiveArrayRegionElementsOfWrongType" {  
+"16594" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>484</SUB>> ]
+"16603" [label = <(&lt;operator&gt;.assignment,kLength = 10)<SUB>486</SUB>> ]
+"16607" [label = <(&lt;operator&gt;.assignment,array = env_-&gt;NewBooleanArray(kLength))<SUB>487</SUB>> ]
+"16614" [label = <(ASSERT_TRUE,ASSERT_TRUE(array != nullptr))<SUB>488</SUB>> ]
+"16619" [label = <(GetByteArrayRegion,env_-&gt;GetByteArrayRegion(reinterpret_cast&lt;jbyteArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jbyte*&gt;(elements)))<SUB>490</SUB>> ]
+"16631" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected byte[]&quot;\012 : &quot;attempt to get region of byte primitive array elements with an object of type boolean[]&quot;))<SUB>492</SUB>> ]
+"16639" [label = <(GetShortArrayRegion,env_-&gt;GetShortArrayRegion(reinterpret_cast&lt;jshortArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jshort*&gt;(elements)))<SUB>495</SUB>> ]
+"16651" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected short[]&quot;\012 : &quot;attempt to get region of short primitive array elements with an object of type boolean[]&quot;))<SUB>497</SUB>> ]
+"16659" [label = <(GetCharArrayRegion,env_-&gt;GetCharArrayRegion(reinterpret_cast&lt;jcharArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jchar*&gt;(elements)))<SUB>500</SUB>> ]
+"16671" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected char[]&quot;\012 : &quot;attempt to get region of char primitive array elements with an object of type boolean[]&quot;))<SUB>502</SUB>> ]
+"16679" [label = <(GetIntArrayRegion,env_-&gt;GetIntArrayRegion(reinterpret_cast&lt;jintArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jint*&gt;(elements)))<SUB>505</SUB>> ]
+"16691" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected int[]&quot;\012 : &quot;attempt to get region of int primitive array elements with an object of type boolean[]&quot;))<SUB>507</SUB>> ]
+"16699" [label = <(GetLongArrayRegion,env_-&gt;GetLongArrayRegion(reinterpret_cast&lt;jlongArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jlong*&gt;(elements)))<SUB>510</SUB>> ]
+"16711" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected long[]&quot;\012 : &quot;attempt to get region of long primitive array elements with an object of type boolean[]&quot;))<SUB>512</SUB>> ]
+"16719" [label = <(GetFloatArrayRegion,env_-&gt;GetFloatArrayRegion(reinterpret_cast&lt;jfloatArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jfloat*&gt;(elements)))<SUB>515</SUB>> ]
+"16731" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected float[]&quot;\012 : &quot;attempt to get region of float primitive array elements with an object of type boolean[]&quot;))<SUB>517</SUB>> ]
+"16739" [label = <(GetDoubleArrayRegion,env_-&gt;GetDoubleArrayRegion(reinterpret_cast&lt;jdoubleArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jdouble*&gt;(elements)))<SUB>520</SUB>> ]
+"16751" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected double[]&quot;\012 : &quot;attempt to get region of double primitive array elements with an object of type boolean[]&quot;))<SUB>522</SUB>> ]
+"16760" [label = <(&lt;operator&gt;.assignment,array2 = env_-&gt;NewByteArray(10))<SUB>525</SUB>> ]
+"16767" [label = <(GetBooleanArrayRegion,env_-&gt;GetBooleanArrayRegion(reinterpret_cast&lt;jbooleanArray&gt;(array2), 0, kLength,\012 reinterpret_cast&lt;jboolean*&gt;(elements)))<SUB>526</SUB>> ]
+"16779" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type byte[] expected boolean[]&quot;\012 : &quot;attempt to get region of boolean primitive array elements with an object of type byte[]&quot;))<SUB>528</SUB>> ]
+"16788" [label = <(&lt;operator&gt;.assignment,object = env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>531</SUB>> ]
+"16795" [label = <(GetBooleanArrayRegion,env_-&gt;GetBooleanArrayRegion(reinterpret_cast&lt;jbooleanArray&gt;(object), 0, kLength,\012 reinterpret_cast&lt;jboolean*&gt;(elements)))<SUB>532</SUB>> ]
+"16807" [label = <(Check,jni_abort_catcher.Check(check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;attempt to get region of boolean primitive array elements with an object of type &quot;\012 &quot;java.lang.String&quot;))<SUB>534</SUB>> ]
+"16815" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>538</SUB>> ]
+"16596" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>484</SUB>> ]
+"16609" [label = <(NewBooleanArray,env_-&gt;NewBooleanArray(kLength))<SUB>487</SUB>> ]
+"16615" [label = <(&lt;operator&gt;.notEquals,array != nullptr)<SUB>488</SUB>> ]
+"16620" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetByteArrayRegion)<SUB>490</SUB>> ]
+"16623" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbyteArray&gt;(array))<SUB>490</SUB>> ]
+"16628" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbyte*&gt;(elements))<SUB>491</SUB>> ]
+"16632" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>492</SUB>> ]
+"16635" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected byte[]&quot;\012 : &quot;attempt to get region of byte primitive array elements with an object of type boolean[]&quot;)<SUB>493</SUB>> ]
+"16640" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetShortArrayRegion)<SUB>495</SUB>> ]
+"16643" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jshortArray&gt;(array))<SUB>495</SUB>> ]
+"16648" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jshort*&gt;(elements))<SUB>496</SUB>> ]
+"16652" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>497</SUB>> ]
+"16655" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected short[]&quot;\012 : &quot;attempt to get region of short primitive array elements with an object of type boolean[]&quot;)<SUB>498</SUB>> ]
+"16660" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetCharArrayRegion)<SUB>500</SUB>> ]
+"16663" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jcharArray&gt;(array))<SUB>500</SUB>> ]
+"16668" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jchar*&gt;(elements))<SUB>501</SUB>> ]
+"16672" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>502</SUB>> ]
+"16675" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected char[]&quot;\012 : &quot;attempt to get region of char primitive array elements with an object of type boolean[]&quot;)<SUB>503</SUB>> ]
+"16680" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetIntArrayRegion)<SUB>505</SUB>> ]
+"16683" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jintArray&gt;(array))<SUB>505</SUB>> ]
+"16688" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jint*&gt;(elements))<SUB>506</SUB>> ]
+"16692" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>507</SUB>> ]
+"16695" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected int[]&quot;\012 : &quot;attempt to get region of int primitive array elements with an object of type boolean[]&quot;)<SUB>508</SUB>> ]
+"16700" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetLongArrayRegion)<SUB>510</SUB>> ]
+"16703" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jlongArray&gt;(array))<SUB>510</SUB>> ]
+"16708" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jlong*&gt;(elements))<SUB>511</SUB>> ]
+"16712" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>512</SUB>> ]
+"16715" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected long[]&quot;\012 : &quot;attempt to get region of long primitive array elements with an object of type boolean[]&quot;)<SUB>513</SUB>> ]
+"16720" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetFloatArrayRegion)<SUB>515</SUB>> ]
+"16723" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jfloatArray&gt;(array))<SUB>515</SUB>> ]
+"16728" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jfloat*&gt;(elements))<SUB>516</SUB>> ]
+"16732" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>517</SUB>> ]
+"16735" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected float[]&quot;\012 : &quot;attempt to get region of float primitive array elements with an object of type boolean[]&quot;)<SUB>518</SUB>> ]
+"16740" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetDoubleArrayRegion)<SUB>520</SUB>> ]
+"16743" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jdoubleArray&gt;(array))<SUB>520</SUB>> ]
+"16748" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jdouble*&gt;(elements))<SUB>521</SUB>> ]
+"16752" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>522</SUB>> ]
+"16755" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected double[]&quot;\012 : &quot;attempt to get region of double primitive array elements with an object of type boolean[]&quot;)<SUB>523</SUB>> ]
+"16762" [label = <(NewByteArray,env_-&gt;NewByteArray(10))<SUB>525</SUB>> ]
+"16768" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetBooleanArrayRegion)<SUB>526</SUB>> ]
+"16771" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbooleanArray&gt;(array2))<SUB>526</SUB>> ]
+"16776" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jboolean*&gt;(elements))<SUB>527</SUB>> ]
+"16780" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>528</SUB>> ]
+"16783" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type byte[] expected boolean[]&quot;\012 : &quot;attempt to get region of boolean primitive array elements with an object of type byte[]&quot;)<SUB>529</SUB>> ]
+"16790" [label = <(NewStringUTF,env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>531</SUB>> ]
+"16796" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetBooleanArrayRegion)<SUB>532</SUB>> ]
+"16799" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbooleanArray&gt;(object))<SUB>532</SUB>> ]
+"16804" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jboolean*&gt;(elements))<SUB>533</SUB>> ]
+"16808" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>534</SUB>> ]
+"16811" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;attempt to get region of boolean primitive array elements with an object of type &quot;\012 &quot;java.lang.String&quot;)<SUB>534</SUB>> ]
+"16817" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>538</SUB>> ]
+"16597" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>484</SUB>> ]
+"16610" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewBooleanArray)<SUB>487</SUB>> ]
+"16622" [label = <(FIELD_IDENTIFIER,GetByteArrayRegion,GetByteArrayRegion)<SUB>490</SUB>> ]
+"16624" [label = <(UNKNOWN,jbyteArray,jbyteArray)<SUB>490</SUB>> ]
+"16629" [label = <(UNKNOWN,jbyte*,jbyte*)<SUB>491</SUB>> ]
+"16634" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>492</SUB>> ]
+"16642" [label = <(FIELD_IDENTIFIER,GetShortArrayRegion,GetShortArrayRegion)<SUB>495</SUB>> ]
+"16644" [label = <(UNKNOWN,jshortArray,jshortArray)<SUB>495</SUB>> ]
+"16649" [label = <(UNKNOWN,jshort*,jshort*)<SUB>496</SUB>> ]
+"16654" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>497</SUB>> ]
+"16662" [label = <(FIELD_IDENTIFIER,GetCharArrayRegion,GetCharArrayRegion)<SUB>500</SUB>> ]
+"16664" [label = <(UNKNOWN,jcharArray,jcharArray)<SUB>500</SUB>> ]
+"16669" [label = <(UNKNOWN,jchar*,jchar*)<SUB>501</SUB>> ]
+"16674" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>502</SUB>> ]
+"16682" [label = <(FIELD_IDENTIFIER,GetIntArrayRegion,GetIntArrayRegion)<SUB>505</SUB>> ]
+"16684" [label = <(UNKNOWN,jintArray,jintArray)<SUB>505</SUB>> ]
+"16689" [label = <(UNKNOWN,jint*,jint*)<SUB>506</SUB>> ]
+"16694" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>507</SUB>> ]
+"16702" [label = <(FIELD_IDENTIFIER,GetLongArrayRegion,GetLongArrayRegion)<SUB>510</SUB>> ]
+"16704" [label = <(UNKNOWN,jlongArray,jlongArray)<SUB>510</SUB>> ]
+"16709" [label = <(UNKNOWN,jlong*,jlong*)<SUB>511</SUB>> ]
+"16714" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>512</SUB>> ]
+"16722" [label = <(FIELD_IDENTIFIER,GetFloatArrayRegion,GetFloatArrayRegion)<SUB>515</SUB>> ]
+"16724" [label = <(UNKNOWN,jfloatArray,jfloatArray)<SUB>515</SUB>> ]
+"16729" [label = <(UNKNOWN,jfloat*,jfloat*)<SUB>516</SUB>> ]
+"16734" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>517</SUB>> ]
+"16742" [label = <(FIELD_IDENTIFIER,GetDoubleArrayRegion,GetDoubleArrayRegion)<SUB>520</SUB>> ]
+"16744" [label = <(UNKNOWN,jdoubleArray,jdoubleArray)<SUB>520</SUB>> ]
+"16749" [label = <(UNKNOWN,jdouble*,jdouble*)<SUB>521</SUB>> ]
+"16754" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>522</SUB>> ]
+"16763" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewByteArray)<SUB>525</SUB>> ]
+"16770" [label = <(FIELD_IDENTIFIER,GetBooleanArrayRegion,GetBooleanArrayRegion)<SUB>526</SUB>> ]
+"16772" [label = <(UNKNOWN,jbooleanArray,jbooleanArray)<SUB>526</SUB>> ]
+"16777" [label = <(UNKNOWN,jboolean*,jboolean*)<SUB>527</SUB>> ]
+"16782" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>528</SUB>> ]
+"16791" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewStringUTF)<SUB>531</SUB>> ]
+"16798" [label = <(FIELD_IDENTIFIER,GetBooleanArrayRegion,GetBooleanArrayRegion)<SUB>532</SUB>> ]
+"16800" [label = <(UNKNOWN,jbooleanArray,jbooleanArray)<SUB>532</SUB>> ]
+"16805" [label = <(UNKNOWN,jboolean*,jboolean*)<SUB>533</SUB>> ]
+"16810" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>534</SUB>> ]
+"16818" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>538</SUB>> ]
+"16599" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>484</SUB>> ]
+"16612" [label = <(FIELD_IDENTIFIER,NewBooleanArray,NewBooleanArray)<SUB>487</SUB>> ]
+"16765" [label = <(FIELD_IDENTIFIER,NewByteArray,NewByteArray)<SUB>525</SUB>> ]
+"16793" [label = <(FIELD_IDENTIFIER,NewStringUTF,NewStringUTF)<SUB>531</SUB>> ]
+"16820" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>538</SUB>> ]
+"16590" [label = <(METHOD,GetPrimitiveArrayRegionElementsOfWrongType)<SUB>483</SUB>> ]
+"16822" [label = <(METHOD_RETURN,void)<SUB>483</SUB>> ]
+  "16594" -> "16603" 
+  "16603" -> "16612" 
+  "16607" -> "16615" 
+  "16614" -> "16622" 
+  "16619" -> "16634" 
+  "16631" -> "16642" 
+  "16639" -> "16654" 
+  "16651" -> "16662" 
+  "16659" -> "16674" 
+  "16671" -> "16682" 
+  "16679" -> "16694" 
+  "16691" -> "16702" 
+  "16699" -> "16714" 
+  "16711" -> "16722" 
+  "16719" -> "16734" 
+  "16731" -> "16742" 
+  "16739" -> "16754" 
+  "16751" -> "16765" 
+  "16760" -> "16770" 
+  "16767" -> "16782" 
+  "16779" -> "16793" 
+  "16788" -> "16798" 
+  "16795" -> "16810" 
+  "16807" -> "16820" 
+  "16815" -> "16822" 
+  "16596" -> "16594" 
+  "16609" -> "16607" 
+  "16615" -> "16614" 
+  "16620" -> "16624" 
+  "16623" -> "16629" 
+  "16628" -> "16619" 
+  "16632" -> "16635" 
+  "16635" -> "16631" 
+  "16640" -> "16644" 
+  "16643" -> "16649" 
+  "16648" -> "16639" 
+  "16652" -> "16655" 
+  "16655" -> "16651" 
+  "16660" -> "16664" 
+  "16663" -> "16669" 
+  "16668" -> "16659" 
+  "16672" -> "16675" 
+  "16675" -> "16671" 
+  "16680" -> "16684" 
+  "16683" -> "16689" 
+  "16688" -> "16679" 
+  "16692" -> "16695" 
+  "16695" -> "16691" 
+  "16700" -> "16704" 
+  "16703" -> "16709" 
+  "16708" -> "16699" 
+  "16712" -> "16715" 
+  "16715" -> "16711" 
+  "16720" -> "16724" 
+  "16723" -> "16729" 
+  "16728" -> "16719" 
+  "16732" -> "16735" 
+  "16735" -> "16731" 
+  "16740" -> "16744" 
+  "16743" -> "16749" 
+  "16748" -> "16739" 
+  "16752" -> "16755" 
+  "16755" -> "16751" 
+  "16762" -> "16760" 
+  "16768" -> "16772" 
+  "16771" -> "16777" 
+  "16776" -> "16767" 
+  "16780" -> "16783" 
+  "16783" -> "16779" 
+  "16790" -> "16788" 
+  "16796" -> "16800" 
+  "16799" -> "16805" 
+  "16804" -> "16795" 
+  "16808" -> "16811" 
+  "16811" -> "16807" 
+  "16817" -> "16815" 
+  "16597" -> "16596" 
+  "16610" -> "16609" 
+  "16622" -> "16620" 
+  "16624" -> "16623" 
+  "16629" -> "16628" 
+  "16634" -> "16632" 
+  "16642" -> "16640" 
+  "16644" -> "16643" 
+  "16649" -> "16648" 
+  "16654" -> "16652" 
+  "16662" -> "16660" 
+  "16664" -> "16663" 
+  "16669" -> "16668" 
+  "16674" -> "16672" 
+  "16682" -> "16680" 
+  "16684" -> "16683" 
+  "16689" -> "16688" 
+  "16694" -> "16692" 
+  "16702" -> "16700" 
+  "16704" -> "16703" 
+  "16709" -> "16708" 
+  "16714" -> "16712" 
+  "16722" -> "16720" 
+  "16724" -> "16723" 
+  "16729" -> "16728" 
+  "16734" -> "16732" 
+  "16742" -> "16740" 
+  "16744" -> "16743" 
+  "16749" -> "16748" 
+  "16754" -> "16752" 
+  "16763" -> "16762" 
+  "16770" -> "16768" 
+  "16772" -> "16771" 
+  "16777" -> "16776" 
+  "16782" -> "16780" 
+  "16791" -> "16790" 
+  "16798" -> "16796" 
+  "16800" -> "16799" 
+  "16805" -> "16804" 
+  "16810" -> "16808" 
+  "16818" -> "16817" 
+  "16599" -> "16597" 
+  "16612" -> "16610" 
+  "16765" -> "16763" 
+  "16793" -> "16791" 
+  "16820" -> "16818" 
+  "16590" -> "16599" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/284-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/284-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/284-cfg.dot	2023-06-07 19:35:01.627387148 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/284-cfg.dot	2023-06-07 19:35:08.167386503 +0330
@@ -1,243 +1,249 @@
-digraph "GetPrimitiveArrayElementsOfWrongType" {  
-"16409" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>347</SUB>> ]
-"16418" [label = <(&lt;operator&gt;.assignment,array = env_-&gt;NewBooleanArray(10))<SUB>350</SUB>> ]
-"16426" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;GetByteArrayElements(reinterpret_cast&lt;jbyteArray&gt;(array), &amp;is_copy), nullptr))<SUB>352</SUB>> ]
-"16437" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected byte[]&quot;\012 : &quot;attempt to get byte primitive array elements with an object of type boolean[]&quot;))<SUB>353</SUB>> ]
-"16445" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;GetShortArrayElements(reinterpret_cast&lt;jshortArray&gt;(array), &amp;is_copy), nullptr))<SUB>356</SUB>> ]
-"16456" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected short[]&quot;\012 : &quot;attempt to get short primitive array elements with an object of type boolean[]&quot;))<SUB>357</SUB>> ]
-"16464" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;GetCharArrayElements(reinterpret_cast&lt;jcharArray&gt;(array), &amp;is_copy), nullptr))<SUB>360</SUB>> ]
-"16475" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected char[]&quot;\012 : &quot;attempt to get char primitive array elements with an object of type boolean[]&quot;))<SUB>361</SUB>> ]
-"16483" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;GetIntArrayElements(reinterpret_cast&lt;jintArray&gt;(array), &amp;is_copy), nullptr))<SUB>364</SUB>> ]
-"16494" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected int[]&quot;\012 : &quot;attempt to get int primitive array elements with an object of type boolean[]&quot;))<SUB>365</SUB>> ]
-"16502" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;GetLongArrayElements(reinterpret_cast&lt;jlongArray&gt;(array), &amp;is_copy), nullptr))<SUB>368</SUB>> ]
-"16513" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected long[]&quot;\012 : &quot;attempt to get long primitive array elements with an object of type boolean[]&quot;))<SUB>369</SUB>> ]
-"16521" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;GetFloatArrayElements(reinterpret_cast&lt;jfloatArray&gt;(array), &amp;is_copy), nullptr))<SUB>372</SUB>> ]
-"16532" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected float[]&quot;\012 : &quot;attempt to get float primitive array elements with an object of type boolean[]&quot;))<SUB>373</SUB>> ]
-"16540" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;GetDoubleArrayElements(reinterpret_cast&lt;jdoubleArray&gt;(array), &amp;is_copy), nullptr))<SUB>376</SUB>> ]
-"16551" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected double[]&quot;\012 : &quot;attempt to get double primitive array elements with an object of type boolean[]&quot;))<SUB>377</SUB>> ]
-"16560" [label = <(&lt;operator&gt;.assignment,array2 = env_-&gt;NewByteArray(10))<SUB>380</SUB>> ]
-"16567" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;GetBooleanArrayElements(reinterpret_cast&lt;jbooleanArray&gt;(array2), &amp;is_copy),\012 nullptr))<SUB>381</SUB>> ]
-"16578" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type byte[] expected boolean[]&quot;\012 : &quot;attempt to get boolean primitive array elements with an object of type byte[]&quot;))<SUB>383</SUB>> ]
-"16587" [label = <(&lt;operator&gt;.assignment,object = env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>386</SUB>> ]
-"16594" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;GetBooleanArrayElements(reinterpret_cast&lt;jbooleanArray&gt;(object), &amp;is_copy),\012 nullptr))<SUB>387</SUB>> ]
-"16605" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;attempt to get boolean primitive array elements with an object of type java.lang.String&quot;))<SUB>389</SUB>> ]
-"16613" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>393</SUB>> ]
-"16411" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>347</SUB>> ]
-"16420" [label = <(NewBooleanArray,env_-&gt;NewBooleanArray(10))<SUB>350</SUB>> ]
-"16427" [label = <(GetByteArrayElements,env_-&gt;GetByteArrayElements(reinterpret_cast&lt;jbyteArray&gt;(array), &amp;is_copy))<SUB>352</SUB>> ]
-"16438" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>353</SUB>> ]
-"16441" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected byte[]&quot;\012 : &quot;attempt to get byte primitive array elements with an object of type boolean[]&quot;)<SUB>354</SUB>> ]
-"16446" [label = <(GetShortArrayElements,env_-&gt;GetShortArrayElements(reinterpret_cast&lt;jshortArray&gt;(array), &amp;is_copy))<SUB>356</SUB>> ]
-"16457" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>357</SUB>> ]
-"16460" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected short[]&quot;\012 : &quot;attempt to get short primitive array elements with an object of type boolean[]&quot;)<SUB>358</SUB>> ]
-"16465" [label = <(GetCharArrayElements,env_-&gt;GetCharArrayElements(reinterpret_cast&lt;jcharArray&gt;(array), &amp;is_copy))<SUB>360</SUB>> ]
-"16476" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>361</SUB>> ]
-"16479" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected char[]&quot;\012 : &quot;attempt to get char primitive array elements with an object of type boolean[]&quot;)<SUB>362</SUB>> ]
-"16484" [label = <(GetIntArrayElements,env_-&gt;GetIntArrayElements(reinterpret_cast&lt;jintArray&gt;(array), &amp;is_copy))<SUB>364</SUB>> ]
-"16495" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>365</SUB>> ]
-"16498" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected int[]&quot;\012 : &quot;attempt to get int primitive array elements with an object of type boolean[]&quot;)<SUB>366</SUB>> ]
-"16503" [label = <(GetLongArrayElements,env_-&gt;GetLongArrayElements(reinterpret_cast&lt;jlongArray&gt;(array), &amp;is_copy))<SUB>368</SUB>> ]
-"16514" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>369</SUB>> ]
-"16517" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected long[]&quot;\012 : &quot;attempt to get long primitive array elements with an object of type boolean[]&quot;)<SUB>370</SUB>> ]
-"16522" [label = <(GetFloatArrayElements,env_-&gt;GetFloatArrayElements(reinterpret_cast&lt;jfloatArray&gt;(array), &amp;is_copy))<SUB>372</SUB>> ]
-"16533" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>373</SUB>> ]
-"16536" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected float[]&quot;\012 : &quot;attempt to get float primitive array elements with an object of type boolean[]&quot;)<SUB>374</SUB>> ]
-"16541" [label = <(GetDoubleArrayElements,env_-&gt;GetDoubleArrayElements(reinterpret_cast&lt;jdoubleArray&gt;(array), &amp;is_copy))<SUB>376</SUB>> ]
-"16552" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>377</SUB>> ]
-"16555" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected double[]&quot;\012 : &quot;attempt to get double primitive array elements with an object of type boolean[]&quot;)<SUB>378</SUB>> ]
-"16562" [label = <(NewByteArray,env_-&gt;NewByteArray(10))<SUB>380</SUB>> ]
-"16568" [label = <(GetBooleanArrayElements,env_-&gt;GetBooleanArrayElements(reinterpret_cast&lt;jbooleanArray&gt;(array2), &amp;is_copy))<SUB>381</SUB>> ]
-"16579" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>383</SUB>> ]
-"16582" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type byte[] expected boolean[]&quot;\012 : &quot;attempt to get boolean primitive array elements with an object of type byte[]&quot;)<SUB>384</SUB>> ]
-"16589" [label = <(NewStringUTF,env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>386</SUB>> ]
-"16595" [label = <(GetBooleanArrayElements,env_-&gt;GetBooleanArrayElements(reinterpret_cast&lt;jbooleanArray&gt;(object), &amp;is_copy))<SUB>387</SUB>> ]
-"16606" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>389</SUB>> ]
-"16609" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;attempt to get boolean primitive array elements with an object of type java.lang.String&quot;)<SUB>390</SUB>> ]
-"16615" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>393</SUB>> ]
-"16412" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>347</SUB>> ]
-"16421" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewBooleanArray)<SUB>350</SUB>> ]
-"16428" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetByteArrayElements)<SUB>352</SUB>> ]
-"16431" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbyteArray&gt;(array))<SUB>352</SUB>> ]
-"16434" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>352</SUB>> ]
-"16440" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>353</SUB>> ]
-"16447" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetShortArrayElements)<SUB>356</SUB>> ]
-"16450" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jshortArray&gt;(array))<SUB>356</SUB>> ]
-"16453" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>356</SUB>> ]
-"16459" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>357</SUB>> ]
-"16466" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetCharArrayElements)<SUB>360</SUB>> ]
-"16469" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jcharArray&gt;(array))<SUB>360</SUB>> ]
-"16472" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>360</SUB>> ]
-"16478" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>361</SUB>> ]
-"16485" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetIntArrayElements)<SUB>364</SUB>> ]
-"16488" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jintArray&gt;(array))<SUB>364</SUB>> ]
-"16491" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>364</SUB>> ]
-"16497" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>365</SUB>> ]
-"16504" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetLongArrayElements)<SUB>368</SUB>> ]
-"16507" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jlongArray&gt;(array))<SUB>368</SUB>> ]
-"16510" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>368</SUB>> ]
-"16516" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>369</SUB>> ]
-"16523" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetFloatArrayElements)<SUB>372</SUB>> ]
-"16526" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jfloatArray&gt;(array))<SUB>372</SUB>> ]
-"16529" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>372</SUB>> ]
-"16535" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>373</SUB>> ]
-"16542" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetDoubleArrayElements)<SUB>376</SUB>> ]
-"16545" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jdoubleArray&gt;(array))<SUB>376</SUB>> ]
-"16548" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>376</SUB>> ]
-"16554" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>377</SUB>> ]
-"16563" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewByteArray)<SUB>380</SUB>> ]
-"16569" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetBooleanArrayElements)<SUB>381</SUB>> ]
-"16572" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbooleanArray&gt;(array2))<SUB>381</SUB>> ]
-"16575" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>381</SUB>> ]
-"16581" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>383</SUB>> ]
-"16590" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewStringUTF)<SUB>386</SUB>> ]
-"16596" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetBooleanArrayElements)<SUB>387</SUB>> ]
-"16599" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbooleanArray&gt;(object))<SUB>387</SUB>> ]
-"16602" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>387</SUB>> ]
-"16608" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>389</SUB>> ]
-"16616" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>393</SUB>> ]
-"16414" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>347</SUB>> ]
-"16423" [label = <(FIELD_IDENTIFIER,NewBooleanArray,NewBooleanArray)<SUB>350</SUB>> ]
-"16430" [label = <(FIELD_IDENTIFIER,GetByteArrayElements,GetByteArrayElements)<SUB>352</SUB>> ]
-"16432" [label = <(UNKNOWN,jbyteArray,jbyteArray)<SUB>352</SUB>> ]
-"16449" [label = <(FIELD_IDENTIFIER,GetShortArrayElements,GetShortArrayElements)<SUB>356</SUB>> ]
-"16451" [label = <(UNKNOWN,jshortArray,jshortArray)<SUB>356</SUB>> ]
-"16468" [label = <(FIELD_IDENTIFIER,GetCharArrayElements,GetCharArrayElements)<SUB>360</SUB>> ]
-"16470" [label = <(UNKNOWN,jcharArray,jcharArray)<SUB>360</SUB>> ]
-"16487" [label = <(FIELD_IDENTIFIER,GetIntArrayElements,GetIntArrayElements)<SUB>364</SUB>> ]
-"16489" [label = <(UNKNOWN,jintArray,jintArray)<SUB>364</SUB>> ]
-"16506" [label = <(FIELD_IDENTIFIER,GetLongArrayElements,GetLongArrayElements)<SUB>368</SUB>> ]
-"16508" [label = <(UNKNOWN,jlongArray,jlongArray)<SUB>368</SUB>> ]
-"16525" [label = <(FIELD_IDENTIFIER,GetFloatArrayElements,GetFloatArrayElements)<SUB>372</SUB>> ]
-"16527" [label = <(UNKNOWN,jfloatArray,jfloatArray)<SUB>372</SUB>> ]
-"16544" [label = <(FIELD_IDENTIFIER,GetDoubleArrayElements,GetDoubleArrayElements)<SUB>376</SUB>> ]
-"16546" [label = <(UNKNOWN,jdoubleArray,jdoubleArray)<SUB>376</SUB>> ]
-"16565" [label = <(FIELD_IDENTIFIER,NewByteArray,NewByteArray)<SUB>380</SUB>> ]
-"16571" [label = <(FIELD_IDENTIFIER,GetBooleanArrayElements,GetBooleanArrayElements)<SUB>381</SUB>> ]
-"16573" [label = <(UNKNOWN,jbooleanArray,jbooleanArray)<SUB>381</SUB>> ]
-"16592" [label = <(FIELD_IDENTIFIER,NewStringUTF,NewStringUTF)<SUB>386</SUB>> ]
-"16598" [label = <(FIELD_IDENTIFIER,GetBooleanArrayElements,GetBooleanArrayElements)<SUB>387</SUB>> ]
-"16600" [label = <(UNKNOWN,jbooleanArray,jbooleanArray)<SUB>387</SUB>> ]
-"16618" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>393</SUB>> ]
-"16405" [label = <(METHOD,GetPrimitiveArrayElementsOfWrongType)<SUB>346</SUB>> ]
-"16620" [label = <(METHOD_RETURN,void)<SUB>346</SUB>> ]
-  "16409" -> "16423" 
-  "16418" -> "16430" 
-  "16426" -> "16440" 
-  "16437" -> "16449" 
-  "16445" -> "16459" 
-  "16456" -> "16468" 
-  "16464" -> "16478" 
-  "16475" -> "16487" 
-  "16483" -> "16497" 
-  "16494" -> "16506" 
-  "16502" -> "16516" 
-  "16513" -> "16525" 
-  "16521" -> "16535" 
-  "16532" -> "16544" 
-  "16540" -> "16554" 
-  "16551" -> "16565" 
-  "16560" -> "16571" 
-  "16567" -> "16581" 
-  "16578" -> "16592" 
-  "16587" -> "16598" 
-  "16594" -> "16608" 
-  "16605" -> "16618" 
-  "16613" -> "16620" 
-  "16411" -> "16409" 
-  "16420" -> "16418" 
-  "16427" -> "16426" 
-  "16438" -> "16441" 
-  "16441" -> "16437" 
-  "16446" -> "16445" 
-  "16457" -> "16460" 
-  "16460" -> "16456" 
-  "16465" -> "16464" 
-  "16476" -> "16479" 
-  "16479" -> "16475" 
-  "16484" -> "16483" 
-  "16495" -> "16498" 
-  "16498" -> "16494" 
-  "16503" -> "16502" 
-  "16514" -> "16517" 
-  "16517" -> "16513" 
-  "16522" -> "16521" 
-  "16533" -> "16536" 
-  "16536" -> "16532" 
-  "16541" -> "16540" 
-  "16552" -> "16555" 
-  "16555" -> "16551" 
-  "16562" -> "16560" 
-  "16568" -> "16567" 
-  "16579" -> "16582" 
-  "16582" -> "16578" 
-  "16589" -> "16587" 
-  "16595" -> "16594" 
-  "16606" -> "16609" 
-  "16609" -> "16605" 
-  "16615" -> "16613" 
-  "16412" -> "16411" 
-  "16421" -> "16420" 
-  "16428" -> "16432" 
-  "16431" -> "16434" 
-  "16434" -> "16427" 
-  "16440" -> "16438" 
-  "16447" -> "16451" 
-  "16450" -> "16453" 
-  "16453" -> "16446" 
-  "16459" -> "16457" 
-  "16466" -> "16470" 
-  "16469" -> "16472" 
-  "16472" -> "16465" 
-  "16478" -> "16476" 
-  "16485" -> "16489" 
-  "16488" -> "16491" 
-  "16491" -> "16484" 
-  "16497" -> "16495" 
-  "16504" -> "16508" 
-  "16507" -> "16510" 
-  "16510" -> "16503" 
-  "16516" -> "16514" 
-  "16523" -> "16527" 
-  "16526" -> "16529" 
-  "16529" -> "16522" 
-  "16535" -> "16533" 
-  "16542" -> "16546" 
-  "16545" -> "16548" 
-  "16548" -> "16541" 
-  "16554" -> "16552" 
-  "16563" -> "16562" 
-  "16569" -> "16573" 
-  "16572" -> "16575" 
-  "16575" -> "16568" 
-  "16581" -> "16579" 
-  "16590" -> "16589" 
-  "16596" -> "16600" 
-  "16599" -> "16602" 
-  "16602" -> "16595" 
-  "16608" -> "16606" 
-  "16616" -> "16615" 
-  "16414" -> "16412" 
-  "16423" -> "16421" 
-  "16430" -> "16428" 
-  "16432" -> "16431" 
-  "16449" -> "16447" 
-  "16451" -> "16450" 
-  "16468" -> "16466" 
-  "16470" -> "16469" 
-  "16487" -> "16485" 
-  "16489" -> "16488" 
-  "16506" -> "16504" 
-  "16508" -> "16507" 
-  "16525" -> "16523" 
-  "16527" -> "16526" 
-  "16544" -> "16542" 
-  "16546" -> "16545" 
-  "16565" -> "16563" 
-  "16571" -> "16569" 
-  "16573" -> "16572" 
-  "16592" -> "16590" 
-  "16598" -> "16596" 
-  "16600" -> "16599" 
-  "16618" -> "16616" 
-  "16405" -> "16414" 
+digraph "SetPrimitiveArrayRegionElementsOfWrongType" {  
+"16828" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>542</SUB>> ]
+"16837" [label = <(&lt;operator&gt;.assignment,kLength = 10)<SUB>544</SUB>> ]
+"16841" [label = <(&lt;operator&gt;.assignment,array = env_-&gt;NewBooleanArray(kLength))<SUB>545</SUB>> ]
+"16848" [label = <(ASSERT_TRUE,ASSERT_TRUE(array != nullptr))<SUB>546</SUB>> ]
+"16853" [label = <(SetByteArrayRegion,env_-&gt;SetByteArrayRegion(reinterpret_cast&lt;jbyteArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jbyte*&gt;(elements)))<SUB>548</SUB>> ]
+"16865" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected byte[]&quot;\012 : &quot;attempt to set region of byte primitive array elements with an object of type boolean[]&quot;))<SUB>550</SUB>> ]
+"16873" [label = <(SetShortArrayRegion,env_-&gt;SetShortArrayRegion(reinterpret_cast&lt;jshortArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jshort*&gt;(elements)))<SUB>553</SUB>> ]
+"16885" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected short[]&quot;\012 : &quot;attempt to set region of short primitive array elements with an object of type boolean[]&quot;))<SUB>555</SUB>> ]
+"16893" [label = <(SetCharArrayRegion,env_-&gt;SetCharArrayRegion(reinterpret_cast&lt;jcharArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jchar*&gt;(elements)))<SUB>558</SUB>> ]
+"16905" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected char[]&quot;\012 : &quot;attempt to set region of char primitive array elements with an object of type boolean[]&quot;))<SUB>560</SUB>> ]
+"16913" [label = <(SetIntArrayRegion,env_-&gt;SetIntArrayRegion(reinterpret_cast&lt;jintArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jint*&gt;(elements)))<SUB>563</SUB>> ]
+"16925" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected int[]&quot;\012 : &quot;attempt to set region of int primitive array elements with an object of type boolean[]&quot;))<SUB>565</SUB>> ]
+"16933" [label = <(SetLongArrayRegion,env_-&gt;SetLongArrayRegion(reinterpret_cast&lt;jlongArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jlong*&gt;(elements)))<SUB>568</SUB>> ]
+"16945" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected long[]&quot;\012 : &quot;attempt to set region of long primitive array elements with an object of type boolean[]&quot;))<SUB>570</SUB>> ]
+"16953" [label = <(SetFloatArrayRegion,env_-&gt;SetFloatArrayRegion(reinterpret_cast&lt;jfloatArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jfloat*&gt;(elements)))<SUB>573</SUB>> ]
+"16965" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected float[]&quot;\012 : &quot;attempt to set region of float primitive array elements with an object of type boolean[]&quot;))<SUB>575</SUB>> ]
+"16973" [label = <(SetDoubleArrayRegion,env_-&gt;SetDoubleArrayRegion(reinterpret_cast&lt;jdoubleArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jdouble*&gt;(elements)))<SUB>578</SUB>> ]
+"16985" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected double[]&quot;\012 : &quot;attempt to set region of double primitive array elements with an object of type boolean[]&quot;))<SUB>580</SUB>> ]
+"16994" [label = <(&lt;operator&gt;.assignment,array2 = env_-&gt;NewByteArray(10))<SUB>583</SUB>> ]
+"17001" [label = <(SetBooleanArrayRegion,env_-&gt;SetBooleanArrayRegion(reinterpret_cast&lt;jbooleanArray&gt;(array2), 0, kLength,\012 reinterpret_cast&lt;jboolean*&gt;(elements)))<SUB>584</SUB>> ]
+"17013" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type byte[] expected boolean[]&quot;\012 : &quot;attempt to set region of boolean primitive array elements with an object of type byte[]&quot;))<SUB>586</SUB>> ]
+"17022" [label = <(&lt;operator&gt;.assignment,object = env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>589</SUB>> ]
+"17029" [label = <(SetBooleanArrayRegion,env_-&gt;SetBooleanArrayRegion(reinterpret_cast&lt;jbooleanArray&gt;(object), 0, kLength,\012 reinterpret_cast&lt;jboolean*&gt;(elements)))<SUB>590</SUB>> ]
+"17041" [label = <(Check,jni_abort_catcher.Check(check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;attempt to set region of boolean primitive array elements with an object of type &quot;\012 &quot;java.lang.String&quot;))<SUB>592</SUB>> ]
+"17049" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>595</SUB>> ]
+"16830" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>542</SUB>> ]
+"16843" [label = <(NewBooleanArray,env_-&gt;NewBooleanArray(kLength))<SUB>545</SUB>> ]
+"16849" [label = <(&lt;operator&gt;.notEquals,array != nullptr)<SUB>546</SUB>> ]
+"16854" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;SetByteArrayRegion)<SUB>548</SUB>> ]
+"16857" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbyteArray&gt;(array))<SUB>548</SUB>> ]
+"16862" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbyte*&gt;(elements))<SUB>549</SUB>> ]
+"16866" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>550</SUB>> ]
+"16869" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected byte[]&quot;\012 : &quot;attempt to set region of byte primitive array elements with an object of type boolean[]&quot;)<SUB>551</SUB>> ]
+"16874" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;SetShortArrayRegion)<SUB>553</SUB>> ]
+"16877" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jshortArray&gt;(array))<SUB>553</SUB>> ]
+"16882" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jshort*&gt;(elements))<SUB>554</SUB>> ]
+"16886" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>555</SUB>> ]
+"16889" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected short[]&quot;\012 : &quot;attempt to set region of short primitive array elements with an object of type boolean[]&quot;)<SUB>556</SUB>> ]
+"16894" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;SetCharArrayRegion)<SUB>558</SUB>> ]
+"16897" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jcharArray&gt;(array))<SUB>558</SUB>> ]
+"16902" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jchar*&gt;(elements))<SUB>559</SUB>> ]
+"16906" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>560</SUB>> ]
+"16909" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected char[]&quot;\012 : &quot;attempt to set region of char primitive array elements with an object of type boolean[]&quot;)<SUB>561</SUB>> ]
+"16914" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;SetIntArrayRegion)<SUB>563</SUB>> ]
+"16917" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jintArray&gt;(array))<SUB>563</SUB>> ]
+"16922" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jint*&gt;(elements))<SUB>564</SUB>> ]
+"16926" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>565</SUB>> ]
+"16929" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected int[]&quot;\012 : &quot;attempt to set region of int primitive array elements with an object of type boolean[]&quot;)<SUB>566</SUB>> ]
+"16934" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;SetLongArrayRegion)<SUB>568</SUB>> ]
+"16937" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jlongArray&gt;(array))<SUB>568</SUB>> ]
+"16942" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jlong*&gt;(elements))<SUB>569</SUB>> ]
+"16946" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>570</SUB>> ]
+"16949" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected long[]&quot;\012 : &quot;attempt to set region of long primitive array elements with an object of type boolean[]&quot;)<SUB>571</SUB>> ]
+"16954" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;SetFloatArrayRegion)<SUB>573</SUB>> ]
+"16957" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jfloatArray&gt;(array))<SUB>573</SUB>> ]
+"16962" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jfloat*&gt;(elements))<SUB>574</SUB>> ]
+"16966" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>575</SUB>> ]
+"16969" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected float[]&quot;\012 : &quot;attempt to set region of float primitive array elements with an object of type boolean[]&quot;)<SUB>576</SUB>> ]
+"16974" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;SetDoubleArrayRegion)<SUB>578</SUB>> ]
+"16977" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jdoubleArray&gt;(array))<SUB>578</SUB>> ]
+"16982" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jdouble*&gt;(elements))<SUB>579</SUB>> ]
+"16986" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>580</SUB>> ]
+"16989" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected double[]&quot;\012 : &quot;attempt to set region of double primitive array elements with an object of type boolean[]&quot;)<SUB>581</SUB>> ]
+"16996" [label = <(NewByteArray,env_-&gt;NewByteArray(10))<SUB>583</SUB>> ]
+"17002" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;SetBooleanArrayRegion)<SUB>584</SUB>> ]
+"17005" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbooleanArray&gt;(array2))<SUB>584</SUB>> ]
+"17010" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jboolean*&gt;(elements))<SUB>585</SUB>> ]
+"17014" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>586</SUB>> ]
+"17017" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type byte[] expected boolean[]&quot;\012 : &quot;attempt to set region of boolean primitive array elements with an object of type byte[]&quot;)<SUB>587</SUB>> ]
+"17024" [label = <(NewStringUTF,env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>589</SUB>> ]
+"17030" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;SetBooleanArrayRegion)<SUB>590</SUB>> ]
+"17033" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbooleanArray&gt;(object))<SUB>590</SUB>> ]
+"17038" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jboolean*&gt;(elements))<SUB>591</SUB>> ]
+"17042" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>592</SUB>> ]
+"17045" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;attempt to set region of boolean primitive array elements with an object of type &quot;\012 &quot;java.lang.String&quot;)<SUB>592</SUB>> ]
+"17051" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>595</SUB>> ]
+"16831" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>542</SUB>> ]
+"16844" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewBooleanArray)<SUB>545</SUB>> ]
+"16856" [label = <(FIELD_IDENTIFIER,SetByteArrayRegion,SetByteArrayRegion)<SUB>548</SUB>> ]
+"16858" [label = <(UNKNOWN,jbyteArray,jbyteArray)<SUB>548</SUB>> ]
+"16863" [label = <(UNKNOWN,jbyte*,jbyte*)<SUB>549</SUB>> ]
+"16868" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>550</SUB>> ]
+"16876" [label = <(FIELD_IDENTIFIER,SetShortArrayRegion,SetShortArrayRegion)<SUB>553</SUB>> ]
+"16878" [label = <(UNKNOWN,jshortArray,jshortArray)<SUB>553</SUB>> ]
+"16883" [label = <(UNKNOWN,jshort*,jshort*)<SUB>554</SUB>> ]
+"16888" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>555</SUB>> ]
+"16896" [label = <(FIELD_IDENTIFIER,SetCharArrayRegion,SetCharArrayRegion)<SUB>558</SUB>> ]
+"16898" [label = <(UNKNOWN,jcharArray,jcharArray)<SUB>558</SUB>> ]
+"16903" [label = <(UNKNOWN,jchar*,jchar*)<SUB>559</SUB>> ]
+"16908" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>560</SUB>> ]
+"16916" [label = <(FIELD_IDENTIFIER,SetIntArrayRegion,SetIntArrayRegion)<SUB>563</SUB>> ]
+"16918" [label = <(UNKNOWN,jintArray,jintArray)<SUB>563</SUB>> ]
+"16923" [label = <(UNKNOWN,jint*,jint*)<SUB>564</SUB>> ]
+"16928" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>565</SUB>> ]
+"16936" [label = <(FIELD_IDENTIFIER,SetLongArrayRegion,SetLongArrayRegion)<SUB>568</SUB>> ]
+"16938" [label = <(UNKNOWN,jlongArray,jlongArray)<SUB>568</SUB>> ]
+"16943" [label = <(UNKNOWN,jlong*,jlong*)<SUB>569</SUB>> ]
+"16948" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>570</SUB>> ]
+"16956" [label = <(FIELD_IDENTIFIER,SetFloatArrayRegion,SetFloatArrayRegion)<SUB>573</SUB>> ]
+"16958" [label = <(UNKNOWN,jfloatArray,jfloatArray)<SUB>573</SUB>> ]
+"16963" [label = <(UNKNOWN,jfloat*,jfloat*)<SUB>574</SUB>> ]
+"16968" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>575</SUB>> ]
+"16976" [label = <(FIELD_IDENTIFIER,SetDoubleArrayRegion,SetDoubleArrayRegion)<SUB>578</SUB>> ]
+"16978" [label = <(UNKNOWN,jdoubleArray,jdoubleArray)<SUB>578</SUB>> ]
+"16983" [label = <(UNKNOWN,jdouble*,jdouble*)<SUB>579</SUB>> ]
+"16988" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>580</SUB>> ]
+"16997" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewByteArray)<SUB>583</SUB>> ]
+"17004" [label = <(FIELD_IDENTIFIER,SetBooleanArrayRegion,SetBooleanArrayRegion)<SUB>584</SUB>> ]
+"17006" [label = <(UNKNOWN,jbooleanArray,jbooleanArray)<SUB>584</SUB>> ]
+"17011" [label = <(UNKNOWN,jboolean*,jboolean*)<SUB>585</SUB>> ]
+"17016" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>586</SUB>> ]
+"17025" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewStringUTF)<SUB>589</SUB>> ]
+"17032" [label = <(FIELD_IDENTIFIER,SetBooleanArrayRegion,SetBooleanArrayRegion)<SUB>590</SUB>> ]
+"17034" [label = <(UNKNOWN,jbooleanArray,jbooleanArray)<SUB>590</SUB>> ]
+"17039" [label = <(UNKNOWN,jboolean*,jboolean*)<SUB>591</SUB>> ]
+"17044" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>592</SUB>> ]
+"17052" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>595</SUB>> ]
+"16833" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>542</SUB>> ]
+"16846" [label = <(FIELD_IDENTIFIER,NewBooleanArray,NewBooleanArray)<SUB>545</SUB>> ]
+"16999" [label = <(FIELD_IDENTIFIER,NewByteArray,NewByteArray)<SUB>583</SUB>> ]
+"17027" [label = <(FIELD_IDENTIFIER,NewStringUTF,NewStringUTF)<SUB>589</SUB>> ]
+"17054" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>595</SUB>> ]
+"16824" [label = <(METHOD,SetPrimitiveArrayRegionElementsOfWrongType)<SUB>541</SUB>> ]
+"17056" [label = <(METHOD_RETURN,void)<SUB>541</SUB>> ]
+  "16828" -> "16837" 
+  "16837" -> "16846" 
+  "16841" -> "16849" 
+  "16848" -> "16856" 
+  "16853" -> "16868" 
+  "16865" -> "16876" 
+  "16873" -> "16888" 
+  "16885" -> "16896" 
+  "16893" -> "16908" 
+  "16905" -> "16916" 
+  "16913" -> "16928" 
+  "16925" -> "16936" 
+  "16933" -> "16948" 
+  "16945" -> "16956" 
+  "16953" -> "16968" 
+  "16965" -> "16976" 
+  "16973" -> "16988" 
+  "16985" -> "16999" 
+  "16994" -> "17004" 
+  "17001" -> "17016" 
+  "17013" -> "17027" 
+  "17022" -> "17032" 
+  "17029" -> "17044" 
+  "17041" -> "17054" 
+  "17049" -> "17056" 
+  "16830" -> "16828" 
+  "16843" -> "16841" 
+  "16849" -> "16848" 
+  "16854" -> "16858" 
+  "16857" -> "16863" 
+  "16862" -> "16853" 
+  "16866" -> "16869" 
+  "16869" -> "16865" 
+  "16874" -> "16878" 
+  "16877" -> "16883" 
+  "16882" -> "16873" 
+  "16886" -> "16889" 
+  "16889" -> "16885" 
+  "16894" -> "16898" 
+  "16897" -> "16903" 
+  "16902" -> "16893" 
+  "16906" -> "16909" 
+  "16909" -> "16905" 
+  "16914" -> "16918" 
+  "16917" -> "16923" 
+  "16922" -> "16913" 
+  "16926" -> "16929" 
+  "16929" -> "16925" 
+  "16934" -> "16938" 
+  "16937" -> "16943" 
+  "16942" -> "16933" 
+  "16946" -> "16949" 
+  "16949" -> "16945" 
+  "16954" -> "16958" 
+  "16957" -> "16963" 
+  "16962" -> "16953" 
+  "16966" -> "16969" 
+  "16969" -> "16965" 
+  "16974" -> "16978" 
+  "16977" -> "16983" 
+  "16982" -> "16973" 
+  "16986" -> "16989" 
+  "16989" -> "16985" 
+  "16996" -> "16994" 
+  "17002" -> "17006" 
+  "17005" -> "17011" 
+  "17010" -> "17001" 
+  "17014" -> "17017" 
+  "17017" -> "17013" 
+  "17024" -> "17022" 
+  "17030" -> "17034" 
+  "17033" -> "17039" 
+  "17038" -> "17029" 
+  "17042" -> "17045" 
+  "17045" -> "17041" 
+  "17051" -> "17049" 
+  "16831" -> "16830" 
+  "16844" -> "16843" 
+  "16856" -> "16854" 
+  "16858" -> "16857" 
+  "16863" -> "16862" 
+  "16868" -> "16866" 
+  "16876" -> "16874" 
+  "16878" -> "16877" 
+  "16883" -> "16882" 
+  "16888" -> "16886" 
+  "16896" -> "16894" 
+  "16898" -> "16897" 
+  "16903" -> "16902" 
+  "16908" -> "16906" 
+  "16916" -> "16914" 
+  "16918" -> "16917" 
+  "16923" -> "16922" 
+  "16928" -> "16926" 
+  "16936" -> "16934" 
+  "16938" -> "16937" 
+  "16943" -> "16942" 
+  "16948" -> "16946" 
+  "16956" -> "16954" 
+  "16958" -> "16957" 
+  "16963" -> "16962" 
+  "16968" -> "16966" 
+  "16976" -> "16974" 
+  "16978" -> "16977" 
+  "16983" -> "16982" 
+  "16988" -> "16986" 
+  "16997" -> "16996" 
+  "17004" -> "17002" 
+  "17006" -> "17005" 
+  "17011" -> "17010" 
+  "17016" -> "17014" 
+  "17025" -> "17024" 
+  "17032" -> "17030" 
+  "17034" -> "17033" 
+  "17039" -> "17038" 
+  "17044" -> "17042" 
+  "17052" -> "17051" 
+  "16833" -> "16831" 
+  "16846" -> "16844" 
+  "16999" -> "16997" 
+  "17027" -> "17025" 
+  "17054" -> "17052" 
+  "16824" -> "16833" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/285-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/285-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/285-cfg.dot	2023-06-07 19:35:01.637387149 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/285-cfg.dot	2023-06-07 19:35:08.177386501 +0330
@@ -1,283 +1,75 @@
-digraph "ReleasePrimitiveArrayElementsOfWrongType" {  
-"16626" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>397</SUB>> ]
-"16875" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>465</SUB>> ]
-"16628" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>397</SUB>> ]
-"16636" [label = <(&lt;operator&gt;.assignment,array = env_-&gt;NewBooleanArray(10))<SUB>400</SUB>> ]
-"16643" [label = <(ASSERT_TRUE,ASSERT_TRUE(array != nullptr))<SUB>401</SUB>> ]
-"16649" [label = <(&lt;operator&gt;.assignment,* elements = env_-&gt;GetBooleanArrayElements(array, &amp;is_copy))<SUB>403</SUB>> ]
-"16658" [label = <(ASSERT_TRUE,ASSERT_TRUE(elements != nullptr))<SUB>404</SUB>> ]
-"16662" [label = <(ReleaseByteArrayElements,env_-&gt;ReleaseByteArrayElements(reinterpret_cast&lt;jbyteArray&gt;(array),\012 reinterpret_cast&lt;jbyte*&gt;(elements), 0))<SUB>405</SUB>> ]
-"16673" [label = <(Check,jni_abort_catcher.Check(\012          check_jni ? &quot;incompatible array type boolean[] expected byte[]&quot;\012 : &quot;attempt to release byte primitive array elements with an object of type boolean[]&quot;))<SUB>407</SUB>> ]
-"16681" [label = <(ReleaseShortArrayElements,env_-&gt;ReleaseShortArrayElements(reinterpret_cast&lt;jshortArray&gt;(array),\012 reinterpret_cast&lt;jshort*&gt;(elements), 0))<SUB>410</SUB>> ]
-"16692" [label = <(Check,jni_abort_catcher.Check(\012          check_jni ? &quot;incompatible array type boolean[] expected short[]&quot;\012 : &quot;attempt to release short primitive array elements with an object of type boolean[]&quot;))<SUB>412</SUB>> ]
-"16700" [label = <(ReleaseCharArrayElements,env_-&gt;ReleaseCharArrayElements(reinterpret_cast&lt;jcharArray&gt;(array),\012 reinterpret_cast&lt;jchar*&gt;(elements), 0))<SUB>415</SUB>> ]
-"16711" [label = <(Check,jni_abort_catcher.Check(\012          check_jni ? &quot;incompatible array type boolean[] expected char[]&quot;\012 : &quot;attempt to release char primitive array elements with an object of type boolean[]&quot;))<SUB>417</SUB>> ]
-"16719" [label = <(ReleaseIntArrayElements,env_-&gt;ReleaseIntArrayElements(reinterpret_cast&lt;jintArray&gt;(array),\012 reinterpret_cast&lt;jint*&gt;(elements), 0))<SUB>420</SUB>> ]
-"16730" [label = <(Check,jni_abort_catcher.Check(\012          check_jni ? &quot;incompatible array type boolean[] expected int[]&quot;\012 : &quot;attempt to release int primitive array elements with an object of type boolean[]&quot;))<SUB>422</SUB>> ]
-"16738" [label = <(ReleaseLongArrayElements,env_-&gt;ReleaseLongArrayElements(reinterpret_cast&lt;jlongArray&gt;(array),\012 reinterpret_cast&lt;jlong*&gt;(elements), 0))<SUB>425</SUB>> ]
-"16749" [label = <(Check,jni_abort_catcher.Check(\012          check_jni ? &quot;incompatible array type boolean[] expected long[]&quot;\012 : &quot;attempt to release long primitive array elements with an object of type boolean[]&quot;))<SUB>427</SUB>> ]
-"16757" [label = <(ReleaseFloatArrayElements,env_-&gt;ReleaseFloatArrayElements(reinterpret_cast&lt;jfloatArray&gt;(array),\012 reinterpret_cast&lt;jfloat*&gt;(elements), 0))<SUB>430</SUB>> ]
-"16768" [label = <(Check,jni_abort_catcher.Check(\012          check_jni ? &quot;incompatible array type boolean[] expected float[]&quot;\012 : &quot;attempt to release float primitive array elements with an object of type boolean[]&quot;))<SUB>432</SUB>> ]
-"16776" [label = <(ReleaseDoubleArrayElements,env_-&gt;ReleaseDoubleArrayElements(reinterpret_cast&lt;jdoubleArray&gt;(array),\012 reinterpret_cast&lt;jdouble*&gt;(elements), 0))<SUB>435</SUB>> ]
-"16787" [label = <(Check,jni_abort_catcher.Check(\012          check_jni ? &quot;incompatible array type boolean[] expected double[]&quot;\012 : &quot;attempt to release double primitive array elements with an object of type boolean[]&quot;))<SUB>437</SUB>> ]
-"16795" [label = <(ReleaseBooleanArrayElements,env_-&gt;ReleaseBooleanArrayElements(array, elements, 0))<SUB>442</SUB>> ]
-"16804" [label = <(&lt;operator&gt;.assignment,array = env_-&gt;NewByteArray(10))<SUB>445</SUB>> ]
-"16813" [label = <(&lt;operator&gt;.assignment,* elements = env_-&gt;GetByteArrayElements(array, &amp;is_copy))<SUB>447</SUB>> ]
-"16822" [label = <(ReleaseBooleanArrayElements,env_-&gt;ReleaseBooleanArrayElements(reinterpret_cast&lt;jbooleanArray&gt;(array),\012 reinterpret_cast&lt;jboolean*&gt;(elements), 0))<SUB>449</SUB>> ]
-"16833" [label = <(Check,jni_abort_catcher.Check(\012          check_jni ? &quot;incompatible array type byte[] expected boolean[]&quot;\012 : &quot;attempt to release boolean primitive array elements with an object of type byte[]&quot;))<SUB>451</SUB>> ]
-"16842" [label = <(&lt;operator&gt;.assignment,object = env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>454</SUB>> ]
-"16849" [label = <(ReleaseBooleanArrayElements,env_-&gt;ReleaseBooleanArrayElements(reinterpret_cast&lt;jbooleanArray&gt;(object),\012 reinterpret_cast&lt;jboolean*&gt;(elements), 0))<SUB>455</SUB>> ]
-"16860" [label = <(Check,jni_abort_catcher.Check(\012          check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;attempt to release boolean primitive array elements with an object of type &quot;\012 &quot;java.lang.String&quot;))<SUB>457</SUB>> ]
-"16868" [label = <(ReleaseByteArrayElements,env_-&gt;ReleaseByteArrayElements(array, elements, 0))<SUB>463</SUB>> ]
-"16877" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>465</SUB>> ]
-"16629" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>397</SUB>> ]
-"16638" [label = <(NewBooleanArray,env_-&gt;NewBooleanArray(10))<SUB>400</SUB>> ]
-"16644" [label = <(&lt;operator&gt;.notEquals,array != nullptr)<SUB>401</SUB>> ]
-"16651" [label = <(GetBooleanArrayElements,env_-&gt;GetBooleanArrayElements(array, &amp;is_copy))<SUB>403</SUB>> ]
-"16659" [label = <(&lt;operator&gt;.notEquals,elements != nullptr)<SUB>404</SUB>> ]
-"16663" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseByteArrayElements)<SUB>405</SUB>> ]
-"16666" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbyteArray&gt;(array))<SUB>405</SUB>> ]
-"16669" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbyte*&gt;(elements))<SUB>406</SUB>> ]
-"16674" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>407</SUB>> ]
-"16677" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected byte[]&quot;\012 : &quot;attempt to release byte primitive array elements with an object of type boolean[]&quot;)<SUB>408</SUB>> ]
-"16682" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseShortArrayElements)<SUB>410</SUB>> ]
-"16685" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jshortArray&gt;(array))<SUB>410</SUB>> ]
-"16688" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jshort*&gt;(elements))<SUB>411</SUB>> ]
-"16693" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>412</SUB>> ]
-"16696" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected short[]&quot;\012 : &quot;attempt to release short primitive array elements with an object of type boolean[]&quot;)<SUB>413</SUB>> ]
-"16701" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseCharArrayElements)<SUB>415</SUB>> ]
-"16704" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jcharArray&gt;(array))<SUB>415</SUB>> ]
-"16707" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jchar*&gt;(elements))<SUB>416</SUB>> ]
-"16712" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>417</SUB>> ]
-"16715" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected char[]&quot;\012 : &quot;attempt to release char primitive array elements with an object of type boolean[]&quot;)<SUB>418</SUB>> ]
-"16720" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseIntArrayElements)<SUB>420</SUB>> ]
-"16723" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jintArray&gt;(array))<SUB>420</SUB>> ]
-"16726" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jint*&gt;(elements))<SUB>421</SUB>> ]
-"16731" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>422</SUB>> ]
-"16734" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected int[]&quot;\012 : &quot;attempt to release int primitive array elements with an object of type boolean[]&quot;)<SUB>423</SUB>> ]
-"16739" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseLongArrayElements)<SUB>425</SUB>> ]
-"16742" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jlongArray&gt;(array))<SUB>425</SUB>> ]
-"16745" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jlong*&gt;(elements))<SUB>426</SUB>> ]
-"16750" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>427</SUB>> ]
-"16753" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected long[]&quot;\012 : &quot;attempt to release long primitive array elements with an object of type boolean[]&quot;)<SUB>428</SUB>> ]
-"16758" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseFloatArrayElements)<SUB>430</SUB>> ]
-"16761" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jfloatArray&gt;(array))<SUB>430</SUB>> ]
-"16764" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jfloat*&gt;(elements))<SUB>431</SUB>> ]
-"16769" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>432</SUB>> ]
-"16772" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected float[]&quot;\012 : &quot;attempt to release float primitive array elements with an object of type boolean[]&quot;)<SUB>433</SUB>> ]
-"16777" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseDoubleArrayElements)<SUB>435</SUB>> ]
-"16780" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jdoubleArray&gt;(array))<SUB>435</SUB>> ]
-"16783" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jdouble*&gt;(elements))<SUB>436</SUB>> ]
-"16788" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>437</SUB>> ]
-"16791" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected double[]&quot;\012 : &quot;attempt to release double primitive array elements with an object of type boolean[]&quot;)<SUB>438</SUB>> ]
-"16796" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseBooleanArrayElements)<SUB>442</SUB>> ]
-"16806" [label = <(NewByteArray,env_-&gt;NewByteArray(10))<SUB>445</SUB>> ]
-"16815" [label = <(GetByteArrayElements,env_-&gt;GetByteArrayElements(array, &amp;is_copy))<SUB>447</SUB>> ]
-"16823" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseBooleanArrayElements)<SUB>449</SUB>> ]
-"16826" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbooleanArray&gt;(array))<SUB>449</SUB>> ]
-"16829" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jboolean*&gt;(elements))<SUB>450</SUB>> ]
-"16834" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>451</SUB>> ]
-"16837" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type byte[] expected boolean[]&quot;\012 : &quot;attempt to release boolean primitive array elements with an object of type byte[]&quot;)<SUB>452</SUB>> ]
-"16844" [label = <(NewStringUTF,env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>454</SUB>> ]
-"16850" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseBooleanArrayElements)<SUB>455</SUB>> ]
-"16853" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbooleanArray&gt;(object))<SUB>455</SUB>> ]
-"16856" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jboolean*&gt;(elements))<SUB>456</SUB>> ]
-"16861" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>457</SUB>> ]
-"16864" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;attempt to release boolean primitive array elements with an object of type &quot;\012 &quot;java.lang.String&quot;)<SUB>458</SUB>> ]
-"16869" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseByteArrayElements)<SUB>463</SUB>> ]
-"16878" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>465</SUB>> ]
-"16631" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>397</SUB>> ]
-"16639" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewBooleanArray)<SUB>400</SUB>> ]
-"16652" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetBooleanArrayElements)<SUB>403</SUB>> ]
-"16656" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>403</SUB>> ]
-"16665" [label = <(FIELD_IDENTIFIER,ReleaseByteArrayElements,ReleaseByteArrayElements)<SUB>405</SUB>> ]
-"16667" [label = <(UNKNOWN,jbyteArray,jbyteArray)<SUB>405</SUB>> ]
-"16670" [label = <(UNKNOWN,jbyte*,jbyte*)<SUB>406</SUB>> ]
-"16676" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>407</SUB>> ]
-"16684" [label = <(FIELD_IDENTIFIER,ReleaseShortArrayElements,ReleaseShortArrayElements)<SUB>410</SUB>> ]
-"16686" [label = <(UNKNOWN,jshortArray,jshortArray)<SUB>410</SUB>> ]
-"16689" [label = <(UNKNOWN,jshort*,jshort*)<SUB>411</SUB>> ]
-"16695" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>412</SUB>> ]
-"16703" [label = <(FIELD_IDENTIFIER,ReleaseCharArrayElements,ReleaseCharArrayElements)<SUB>415</SUB>> ]
-"16705" [label = <(UNKNOWN,jcharArray,jcharArray)<SUB>415</SUB>> ]
-"16708" [label = <(UNKNOWN,jchar*,jchar*)<SUB>416</SUB>> ]
-"16714" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>417</SUB>> ]
-"16722" [label = <(FIELD_IDENTIFIER,ReleaseIntArrayElements,ReleaseIntArrayElements)<SUB>420</SUB>> ]
-"16724" [label = <(UNKNOWN,jintArray,jintArray)<SUB>420</SUB>> ]
-"16727" [label = <(UNKNOWN,jint*,jint*)<SUB>421</SUB>> ]
-"16733" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>422</SUB>> ]
-"16741" [label = <(FIELD_IDENTIFIER,ReleaseLongArrayElements,ReleaseLongArrayElements)<SUB>425</SUB>> ]
-"16743" [label = <(UNKNOWN,jlongArray,jlongArray)<SUB>425</SUB>> ]
-"16746" [label = <(UNKNOWN,jlong*,jlong*)<SUB>426</SUB>> ]
-"16752" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>427</SUB>> ]
-"16760" [label = <(FIELD_IDENTIFIER,ReleaseFloatArrayElements,ReleaseFloatArrayElements)<SUB>430</SUB>> ]
-"16762" [label = <(UNKNOWN,jfloatArray,jfloatArray)<SUB>430</SUB>> ]
-"16765" [label = <(UNKNOWN,jfloat*,jfloat*)<SUB>431</SUB>> ]
-"16771" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>432</SUB>> ]
-"16779" [label = <(FIELD_IDENTIFIER,ReleaseDoubleArrayElements,ReleaseDoubleArrayElements)<SUB>435</SUB>> ]
-"16781" [label = <(UNKNOWN,jdoubleArray,jdoubleArray)<SUB>435</SUB>> ]
-"16784" [label = <(UNKNOWN,jdouble*,jdouble*)<SUB>436</SUB>> ]
-"16790" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>437</SUB>> ]
-"16798" [label = <(FIELD_IDENTIFIER,ReleaseBooleanArrayElements,ReleaseBooleanArrayElements)<SUB>442</SUB>> ]
-"16807" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewByteArray)<SUB>445</SUB>> ]
-"16816" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetByteArrayElements)<SUB>447</SUB>> ]
-"16820" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>447</SUB>> ]
-"16825" [label = <(FIELD_IDENTIFIER,ReleaseBooleanArrayElements,ReleaseBooleanArrayElements)<SUB>449</SUB>> ]
-"16827" [label = <(UNKNOWN,jbooleanArray,jbooleanArray)<SUB>449</SUB>> ]
-"16830" [label = <(UNKNOWN,jboolean*,jboolean*)<SUB>450</SUB>> ]
-"16836" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>451</SUB>> ]
-"16845" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewStringUTF)<SUB>454</SUB>> ]
-"16852" [label = <(FIELD_IDENTIFIER,ReleaseBooleanArrayElements,ReleaseBooleanArrayElements)<SUB>455</SUB>> ]
-"16854" [label = <(UNKNOWN,jbooleanArray,jbooleanArray)<SUB>455</SUB>> ]
-"16857" [label = <(UNKNOWN,jboolean*,jboolean*)<SUB>456</SUB>> ]
-"16863" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>457</SUB>> ]
-"16871" [label = <(FIELD_IDENTIFIER,ReleaseByteArrayElements,ReleaseByteArrayElements)<SUB>463</SUB>> ]
-"16880" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>465</SUB>> ]
-"16641" [label = <(FIELD_IDENTIFIER,NewBooleanArray,NewBooleanArray)<SUB>400</SUB>> ]
-"16654" [label = <(FIELD_IDENTIFIER,GetBooleanArrayElements,GetBooleanArrayElements)<SUB>403</SUB>> ]
-"16809" [label = <(FIELD_IDENTIFIER,NewByteArray,NewByteArray)<SUB>445</SUB>> ]
-"16818" [label = <(FIELD_IDENTIFIER,GetByteArrayElements,GetByteArrayElements)<SUB>447</SUB>> ]
-"16847" [label = <(FIELD_IDENTIFIER,NewStringUTF,NewStringUTF)<SUB>454</SUB>> ]
-"16622" [label = <(METHOD,ReleasePrimitiveArrayElementsOfWrongType)<SUB>396</SUB>> ]
-"16882" [label = <(METHOD_RETURN,void)<SUB>396</SUB>> ]
-  "16626" -> "16641" 
-  "16875" -> "16882" 
-  "16628" -> "16626" 
-  "16636" -> "16644" 
-  "16643" -> "16654" 
-  "16649" -> "16659" 
-  "16658" -> "16665" 
-  "16662" -> "16676" 
-  "16673" -> "16684" 
-  "16681" -> "16695" 
-  "16692" -> "16703" 
-  "16700" -> "16714" 
-  "16711" -> "16722" 
-  "16719" -> "16733" 
-  "16730" -> "16741" 
-  "16738" -> "16752" 
-  "16749" -> "16760" 
-  "16757" -> "16771" 
-  "16768" -> "16779" 
-  "16776" -> "16790" 
-  "16787" -> "16798" 
-  "16795" -> "16809" 
-  "16804" -> "16818" 
-  "16813" -> "16825" 
-  "16822" -> "16836" 
-  "16833" -> "16847" 
-  "16842" -> "16852" 
-  "16849" -> "16863" 
-  "16860" -> "16871" 
-  "16868" -> "16880" 
-  "16877" -> "16875" 
-  "16629" -> "16628" 
-  "16638" -> "16636" 
-  "16644" -> "16643" 
-  "16651" -> "16649" 
-  "16659" -> "16658" 
-  "16663" -> "16667" 
-  "16666" -> "16670" 
-  "16669" -> "16662" 
-  "16674" -> "16677" 
-  "16677" -> "16673" 
-  "16682" -> "16686" 
-  "16685" -> "16689" 
-  "16688" -> "16681" 
-  "16693" -> "16696" 
-  "16696" -> "16692" 
-  "16701" -> "16705" 
-  "16704" -> "16708" 
-  "16707" -> "16700" 
-  "16712" -> "16715" 
-  "16715" -> "16711" 
-  "16720" -> "16724" 
-  "16723" -> "16727" 
-  "16726" -> "16719" 
-  "16731" -> "16734" 
-  "16734" -> "16730" 
-  "16739" -> "16743" 
-  "16742" -> "16746" 
-  "16745" -> "16738" 
-  "16750" -> "16753" 
-  "16753" -> "16749" 
-  "16758" -> "16762" 
-  "16761" -> "16765" 
-  "16764" -> "16757" 
-  "16769" -> "16772" 
-  "16772" -> "16768" 
-  "16777" -> "16781" 
-  "16780" -> "16784" 
-  "16783" -> "16776" 
-  "16788" -> "16791" 
-  "16791" -> "16787" 
-  "16796" -> "16795" 
-  "16806" -> "16804" 
-  "16815" -> "16813" 
-  "16823" -> "16827" 
-  "16826" -> "16830" 
-  "16829" -> "16822" 
-  "16834" -> "16837" 
-  "16837" -> "16833" 
-  "16844" -> "16842" 
-  "16850" -> "16854" 
-  "16853" -> "16857" 
-  "16856" -> "16849" 
-  "16861" -> "16864" 
-  "16864" -> "16860" 
-  "16869" -> "16868" 
-  "16878" -> "16877" 
-  "16631" -> "16629" 
-  "16639" -> "16638" 
-  "16652" -> "16656" 
-  "16656" -> "16651" 
-  "16665" -> "16663" 
-  "16667" -> "16666" 
-  "16670" -> "16669" 
-  "16676" -> "16674" 
-  "16684" -> "16682" 
-  "16686" -> "16685" 
-  "16689" -> "16688" 
-  "16695" -> "16693" 
-  "16703" -> "16701" 
-  "16705" -> "16704" 
-  "16708" -> "16707" 
-  "16714" -> "16712" 
-  "16722" -> "16720" 
-  "16724" -> "16723" 
-  "16727" -> "16726" 
-  "16733" -> "16731" 
-  "16741" -> "16739" 
-  "16743" -> "16742" 
-  "16746" -> "16745" 
-  "16752" -> "16750" 
-  "16760" -> "16758" 
-  "16762" -> "16761" 
-  "16765" -> "16764" 
-  "16771" -> "16769" 
-  "16779" -> "16777" 
-  "16781" -> "16780" 
-  "16784" -> "16783" 
-  "16790" -> "16788" 
-  "16798" -> "16796" 
-  "16807" -> "16806" 
-  "16816" -> "16820" 
-  "16820" -> "16815" 
-  "16825" -> "16823" 
-  "16827" -> "16826" 
-  "16830" -> "16829" 
-  "16836" -> "16834" 
-  "16845" -> "16844" 
-  "16852" -> "16850" 
-  "16854" -> "16853" 
-  "16857" -> "16856" 
-  "16863" -> "16861" 
-  "16871" -> "16869" 
-  "16880" -> "16878" 
-  "16641" -> "16639" 
-  "16654" -> "16652" 
-  "16809" -> "16807" 
-  "16818" -> "16816" 
-  "16847" -> "16845" 
-  "16622" -> "16631" 
+digraph "NewObjectArrayBadArguments" {  
+"17062" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>599</SUB>> ]
+"17071" [label = <(&lt;operator&gt;.assignment,element_class = env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>602</SUB>> ]
+"17078" [label = <(ASSERT_NE,ASSERT_NE(element_class, nullptr))<SUB>603</SUB>> ]
+"17081" [label = <(NewObjectArray,env_-&gt;NewObjectArray(-1, element_class, nullptr))<SUB>605</SUB>> ]
+"17089" [label = <(Check,jni_abort_catcher.Check(check_jni ? &quot;negative jsize: -1&quot; : &quot;negative array length: -1&quot;))<SUB>606</SUB>> ]
+"17097" [label = <(NewObjectArray,env_-&gt;NewObjectArray(std::numeric_limits&lt;jint&gt;::min(), element_class, nullptr))<SUB>608</SUB>> ]
+"17113" [label = <(Check,jni_abort_catcher.Check(check_jni ? &quot;negative jsize: -2147483648&quot;\012 : &quot;negative array length: -2147483648&quot;))<SUB>609</SUB>> ]
+"17121" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>612</SUB>> ]
+"17064" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>599</SUB>> ]
+"17073" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>602</SUB>> ]
+"17082" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewObjectArray)<SUB>605</SUB>> ]
+"17085" [label = <(&lt;operator&gt;.minus,-1)<SUB>605</SUB>> ]
+"17090" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>606</SUB>> ]
+"17093" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;negative jsize: -1&quot; : &quot;negative array length: -1&quot;)<SUB>606</SUB>> ]
+"17098" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewObjectArray)<SUB>608</SUB>> ]
+"17101" [label = <(&lt;operator&gt;.greaterThan,std::numeric_limits&lt;jint&gt;::min())<SUB>608</SUB>> ]
+"17114" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>609</SUB>> ]
+"17117" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;negative jsize: -2147483648&quot;\012 : &quot;negative array length: -2147483648&quot;)<SUB>609</SUB>> ]
+"17123" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>612</SUB>> ]
+"17065" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>599</SUB>> ]
+"17074" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>602</SUB>> ]
+"17084" [label = <(FIELD_IDENTIFIER,NewObjectArray,NewObjectArray)<SUB>605</SUB>> ]
+"17092" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>606</SUB>> ]
+"17100" [label = <(FIELD_IDENTIFIER,NewObjectArray,NewObjectArray)<SUB>608</SUB>> ]
+"17102" [label = <(&lt;operator&gt;.lessThan,std::numeric_limits&lt;jint)<SUB>608</SUB>> ]
+"17107" [label = <(::min,::min())<SUB>608</SUB>> ]
+"17116" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>609</SUB>> ]
+"17124" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>612</SUB>> ]
+"17067" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>599</SUB>> ]
+"17076" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>602</SUB>> ]
+"17103" [label = <(&lt;operator&gt;.fieldAccess,std::numeric_limits)<SUB>608</SUB>> ]
+"17108" [label = <(&lt;operator&gt;.fieldAccess,::min)<SUB>608</SUB>> ]
+"17126" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>612</SUB>> ]
+"17105" [label = <(FIELD_IDENTIFIER,numeric_limits,numeric_limits)<SUB>608</SUB>> ]
+"17110" [label = <(FIELD_IDENTIFIER,min,min)<SUB>608</SUB>> ]
+"17058" [label = <(METHOD,NewObjectArrayBadArguments)<SUB>598</SUB>> ]
+"17128" [label = <(METHOD_RETURN,void)<SUB>598</SUB>> ]
+  "17062" -> "17076" 
+  "17071" -> "17078" 
+  "17078" -> "17084" 
+  "17081" -> "17092" 
+  "17089" -> "17100" 
+  "17097" -> "17116" 
+  "17113" -> "17126" 
+  "17121" -> "17128" 
+  "17064" -> "17062" 
+  "17073" -> "17071" 
+  "17082" -> "17085" 
+  "17085" -> "17081" 
+  "17090" -> "17093" 
+  "17093" -> "17089" 
+  "17098" -> "17105" 
+  "17101" -> "17097" 
+  "17114" -> "17117" 
+  "17117" -> "17113" 
+  "17123" -> "17121" 
+  "17065" -> "17064" 
+  "17074" -> "17073" 
+  "17084" -> "17082" 
+  "17092" -> "17090" 
+  "17100" -> "17098" 
+  "17102" -> "17110" 
+  "17107" -> "17101" 
+  "17116" -> "17114" 
+  "17124" -> "17123" 
+  "17067" -> "17065" 
+  "17076" -> "17074" 
+  "17103" -> "17102" 
+  "17108" -> "17107" 
+  "17126" -> "17124" 
+  "17105" -> "17103" 
+  "17110" -> "17108" 
+  "17058" -> "17067" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/286-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/286-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/286-cfg.dot	2023-06-07 19:35:01.637387149 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/286-cfg.dot	2023-06-07 19:35:08.177386501 +0330
@@ -1,69 +1,270 @@
-digraph "GetReleasePrimitiveArrayCriticalOfWrongType" {  
-"16888" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>469</SUB>> ]
-"16897" [label = <(&lt;operator&gt;.assignment,object = env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>472</SUB>> ]
-"16906" [label = <(&lt;operator&gt;.assignment,* elements = env_-&gt;GetPrimitiveArrayCritical(reinterpret_cast&lt;jarray&gt;(object), &amp;is_copy))<SUB>474</SUB>> ]
-"16917" [label = <(Check,jni_abort_catcher.Check(check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;expected primitive array, given java.lang.String&quot;))<SUB>475</SUB>> ]
-"16925" [label = <(ReleasePrimitiveArrayCritical,env_-&gt;ReleasePrimitiveArrayCritical(reinterpret_cast&lt;jarray&gt;(object), elements, 0))<SUB>477</SUB>> ]
-"16934" [label = <(Check,jni_abort_catcher.Check(check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;expected primitive array, given java.lang.String&quot;))<SUB>478</SUB>> ]
-"16942" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>481</SUB>> ]
-"16890" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>469</SUB>> ]
-"16899" [label = <(NewStringUTF,env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>472</SUB>> ]
-"16908" [label = <(GetPrimitiveArrayCritical,env_-&gt;GetPrimitiveArrayCritical(reinterpret_cast&lt;jarray&gt;(object), &amp;is_copy))<SUB>474</SUB>> ]
-"16918" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>475</SUB>> ]
-"16921" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;expected primitive array, given java.lang.String&quot;)<SUB>475</SUB>> ]
-"16926" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleasePrimitiveArrayCritical)<SUB>477</SUB>> ]
-"16929" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jarray&gt;(object))<SUB>477</SUB>> ]
-"16935" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>478</SUB>> ]
-"16938" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;expected primitive array, given java.lang.String&quot;)<SUB>478</SUB>> ]
-"16944" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>481</SUB>> ]
-"16891" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>469</SUB>> ]
-"16900" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewStringUTF)<SUB>472</SUB>> ]
-"16909" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetPrimitiveArrayCritical)<SUB>474</SUB>> ]
-"16912" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jarray&gt;(object))<SUB>474</SUB>> ]
-"16915" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>474</SUB>> ]
-"16920" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>475</SUB>> ]
-"16928" [label = <(FIELD_IDENTIFIER,ReleasePrimitiveArrayCritical,ReleasePrimitiveArrayCritical)<SUB>477</SUB>> ]
-"16930" [label = <(UNKNOWN,jarray,jarray)<SUB>477</SUB>> ]
-"16937" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>478</SUB>> ]
-"16945" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>481</SUB>> ]
-"16893" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>469</SUB>> ]
-"16902" [label = <(FIELD_IDENTIFIER,NewStringUTF,NewStringUTF)<SUB>472</SUB>> ]
-"16911" [label = <(FIELD_IDENTIFIER,GetPrimitiveArrayCritical,GetPrimitiveArrayCritical)<SUB>474</SUB>> ]
-"16913" [label = <(UNKNOWN,jarray,jarray)<SUB>474</SUB>> ]
-"16947" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>481</SUB>> ]
-"16884" [label = <(METHOD,GetReleasePrimitiveArrayCriticalOfWrongType)<SUB>468</SUB>> ]
-"16949" [label = <(METHOD_RETURN,void)<SUB>468</SUB>> ]
-  "16888" -> "16902" 
-  "16897" -> "16911" 
-  "16906" -> "16920" 
-  "16917" -> "16928" 
-  "16925" -> "16937" 
-  "16934" -> "16947" 
-  "16942" -> "16949" 
-  "16890" -> "16888" 
-  "16899" -> "16897" 
-  "16908" -> "16906" 
-  "16918" -> "16921" 
-  "16921" -> "16917" 
-  "16926" -> "16930" 
-  "16929" -> "16925" 
-  "16935" -> "16938" 
-  "16938" -> "16934" 
-  "16944" -> "16942" 
-  "16891" -> "16890" 
-  "16900" -> "16899" 
-  "16909" -> "16913" 
-  "16912" -> "16915" 
-  "16915" -> "16908" 
-  "16920" -> "16918" 
-  "16928" -> "16926" 
-  "16930" -> "16929" 
-  "16937" -> "16935" 
-  "16945" -> "16944" 
-  "16893" -> "16891" 
-  "16902" -> "16900" 
-  "16911" -> "16909" 
-  "16913" -> "16912" 
-  "16947" -> "16945" 
-  "16884" -> "16893" 
+digraph "SetUpForTest" {  
+"17258" [label = <(&lt;operator&gt;.assignment,env_ = Thread::Current()-&gt;GetJniEnv())<SUB>639</SUB>> ]
+"17267" [label = <(&lt;operator&gt;.assignment,jklass_ = env_-&gt;FindClass(&quot;MyClassNatives&quot;))<SUB>640</SUB>> ]
+"17274" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(jklass_ != nullptr) &lt;&lt; method_name &lt;&lt; &quot; &quot; &lt;&lt; method_sig)<SUB>641</SUB>> ]
+"17307" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(jmethod_ != nullptr) &lt;&lt; method_name &lt;&lt; &quot; &quot; &lt;&lt; method_sig)<SUB>648</SUB>> ]
+"17353" [label = <(&lt;operator&gt;.assignment,constructor = env_-&gt;GetMethodID(jklass_, &quot;&lt;init&gt;&quot;, &quot;()V&quot;))<SUB>658</SUB>> ]
+"17362" [label = <(&lt;operator&gt;.assignment,jobj_ = env_-&gt;NewObject(jklass_, constructor))<SUB>659</SUB>> ]
+"17370" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(jobj_ != nullptr) &lt;&lt; method_name &lt;&lt; &quot; &quot; &lt;&lt; method_sig)<SUB>660</SUB>> ]
+"17137" [label = <(&lt;operator&gt;.logicalNot,!runtime_-&gt;IsStarted())<SUB>619</SUB>> ]
+"17260" [label = <(GetJniEnv,Thread::Current()-&gt;GetJniEnv())<SUB>639</SUB>> ]
+"17269" [label = <(FindClass,env_-&gt;FindClass(&quot;MyClassNatives&quot;))<SUB>640</SUB>> ]
+"17275" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(jklass_ != nullptr) &lt;&lt; method_name &lt;&lt; &quot; &quot;)<SUB>641</SUB>> ]
+"17308" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(jmethod_ != nullptr) &lt;&lt; method_name &lt;&lt; &quot; &quot;)<SUB>648</SUB>> ]
+"17318" [label = <(&lt;operator&gt;.notEquals,native_fnptr != nullptr)<SUB>650</SUB>> ]
+"17355" [label = <(GetMethodID,env_-&gt;GetMethodID(jklass_, &quot;&lt;init&gt;&quot;, &quot;()V&quot;))<SUB>658</SUB>> ]
+"17364" [label = <(NewObject,env_-&gt;NewObject(jklass_, constructor))<SUB>659</SUB>> ]
+"17371" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(jobj_ != nullptr) &lt;&lt; method_name &lt;&lt; &quot; &quot;)<SUB>660</SUB>> ]
+"17138" [label = <(IsStarted,runtime_-&gt;IsStarted())<SUB>619</SUB>> ]
+"17242" [label = <(TransitionFromSuspendedToRunnable,Thread::Current()-&gt;TransitionFromSuspendedToRunnable())<SUB>634</SUB>> ]
+"17250" [label = <(&lt;operator&gt;.assignment,started = runtime_-&gt;Start())<SUB>635</SUB>> ]
+"17256" [label = <(CHECK,CHECK(started))<SUB>636</SUB>> ]
+"17261" [label = <(&lt;operator&gt;.indirectFieldAccess,Thread::Current()-&gt;GetJniEnv)<SUB>639</SUB>> ]
+"17270" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>640</SUB>> ]
+"17276" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(jklass_ != nullptr) &lt;&lt; method_name)<SUB>641</SUB>> ]
+"17287" [label = <(&lt;operator&gt;.assignment,jmethod_ = env_-&gt;GetStaticMethodID(jklass_, method_name, method_sig))<SUB>644</SUB>> ]
+"17309" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(jmethod_ != nullptr) &lt;&lt; method_name)<SUB>648</SUB>> ]
+"17323" [label = <(&lt;operator&gt;.assignment,methods[] = { { method_name, method_sig, native_fnptr } })<SUB>651</SUB>> ]
+"17330" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_EQ(JNI_OK, env_-&gt;RegisterNatives(jklass_, methods, 1))\012 &lt;&lt; method_name &lt;&lt; &quot; &quot; &lt;&lt; method_sig)<SUB>652</SUB>> ]
+"17356" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetMethodID)<SUB>658</SUB>> ]
+"17365" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewObject)<SUB>659</SUB>> ]
+"17372" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(jobj_ != nullptr) &lt;&lt; method_name)<SUB>660</SUB>> ]
+"17139" [label = <(&lt;operator&gt;.indirectFieldAccess,runtime_-&gt;IsStarted)<SUB>619</SUB>> ]
+"17145" [label = <(soa,soa(Thread::Current()))<SUB>621</SUB>> ]
+"17150" [label = <(&lt;operator&gt;.assignment,class_loader_ = LoadDex(&quot;MyClassNatives&quot;))<SUB>622</SUB>> ]
+"17154" [label = <(&lt;operator&gt;.greaterThan,StackHandleScope&lt;1&gt; hs(soa.Self()))<SUB>623</SUB>> ]
+"17163" [label = <(&lt;operator&gt;.greaterThan,Handle&lt;mirror::ClassLoader&gt; loader(\012            hs.NewHandle(soa.Decode&lt;mirror::ClassLoader&gt;(class_loader_))))<SUB>624</SUB>> ]
+"17183" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c = class_linker_-&gt;FindClass(soa.Self(), &quot;LMyClassNatives;&quot;, loader))<SUB>626</SUB>> ]
+"17202" [label = <(&lt;operator&gt;.assignment,pointer_size = class_linker_-&gt;GetImagePointerSize())<SUB>627</SUB>> ]
+"17209" [label = <(&lt;operator&gt;.assignment,* method = c-&gt;FindClassMethod(method_name, method_sig, pointer_size))<SUB>628</SUB>> ]
+"17218" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(method != nullptr) &lt;&lt; method_name &lt;&lt; &quot; &quot; &lt;&lt; method_sig)<SUB>629</SUB>> ]
+"17228" [label = <(ASSERT_EQ,ASSERT_EQ(direct, method-&gt;IsDirect()))<SUB>630</SUB>> ]
+"17234" [label = <(SetEntryPointFromQuickCompiledCode,method-&gt;SetEntryPointFromQuickCompiledCode(class_linker_-&gt;GetRuntimeQuickGenericJniStub()))<SUB>631</SUB>> ]
+"17243" [label = <(&lt;operator&gt;.indirectFieldAccess,Thread::Current()-&gt;TransitionFromSuspendedToRunnable)<SUB>634</SUB>> ]
+"17252" [label = <(Start,runtime_-&gt;Start())<SUB>635</SUB>> ]
+"17262" [label = <(Thread::Current,Thread::Current())<SUB>639</SUB>> ]
+"17266" [label = <(FIELD_IDENTIFIER,GetJniEnv,GetJniEnv)<SUB>639</SUB>> ]
+"17272" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>640</SUB>> ]
+"17277" [label = <(ASSERT_TRUE,ASSERT_TRUE(jklass_ != nullptr))<SUB>641</SUB>> ]
+"17289" [label = <(GetStaticMethodID,env_-&gt;GetStaticMethodID(jklass_, method_name, method_sig))<SUB>644</SUB>> ]
+"17298" [label = <(&lt;operator&gt;.assignment,jmethod_ = env_-&gt;GetMethodID(jklass_, method_name, method_sig))<SUB>646</SUB>> ]
+"17310" [label = <(ASSERT_TRUE,ASSERT_TRUE(jmethod_ != nullptr))<SUB>648</SUB>> ]
+"17325" [label = <(&lt;operator&gt;.arrayInitializer,{ { method_name, method_sig, native_fnptr } })<SUB>651</SUB>> ]
+"17331" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_EQ(JNI_OK, env_-&gt;RegisterNatives(jklass_, methods, 1))\012 &lt;&lt; method_name &lt;&lt; &quot; &quot;)<SUB>652</SUB>> ]
+"17347" [label = <(UnregisterNatives,env_-&gt;UnregisterNatives(jklass_))<SUB>655</SUB>> ]
+"17358" [label = <(FIELD_IDENTIFIER,GetMethodID,GetMethodID)<SUB>658</SUB>> ]
+"17367" [label = <(FIELD_IDENTIFIER,NewObject,NewObject)<SUB>659</SUB>> ]
+"17373" [label = <(ASSERT_TRUE,ASSERT_TRUE(jobj_ != nullptr))<SUB>660</SUB>> ]
+"17141" [label = <(FIELD_IDENTIFIER,IsStarted,IsStarted)<SUB>619</SUB>> ]
+"17146" [label = <(Thread::Current,Thread::Current())<SUB>621</SUB>> ]
+"17152" [label = <(LoadDex,LoadDex(&quot;MyClassNatives&quot;))<SUB>622</SUB>> ]
+"17155" [label = <(&lt;operator&gt;.lessThan,StackHandleScope&lt;1)<SUB>623</SUB>> ]
+"17158" [label = <(hs,hs(soa.Self()))<SUB>623</SUB>> ]
+"17164" [label = <(&lt;operator&gt;.lessThan,Handle&lt;mirror::ClassLoader)<SUB>624</SUB>> ]
+"17169" [label = <(loader,loader(\012            hs.NewHandle(soa.Decode&lt;mirror::ClassLoader&gt;(class_loader_))))<SUB>624</SUB>> ]
+"17184" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c)<SUB>626</SUB>> ]
+"17191" [label = <(FindClass,class_linker_-&gt;FindClass(soa.Self(), &quot;LMyClassNatives;&quot;, loader))<SUB>626</SUB>> ]
+"17204" [label = <(GetImagePointerSize,class_linker_-&gt;GetImagePointerSize())<SUB>627</SUB>> ]
+"17211" [label = <(FindClassMethod,c-&gt;FindClassMethod(method_name, method_sig, pointer_size))<SUB>628</SUB>> ]
+"17219" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(method != nullptr) &lt;&lt; method_name &lt;&lt; &quot; &quot;)<SUB>629</SUB>> ]
+"17230" [label = <(IsDirect,method-&gt;IsDirect())<SUB>630</SUB>> ]
+"17235" [label = <(&lt;operator&gt;.indirectFieldAccess,method-&gt;SetEntryPointFromQuickCompiledCode)<SUB>631</SUB>> ]
+"17238" [label = <(GetRuntimeQuickGenericJniStub,class_linker_-&gt;GetRuntimeQuickGenericJniStub())<SUB>631</SUB>> ]
+"17244" [label = <(Thread::Current,Thread::Current())<SUB>634</SUB>> ]
+"17248" [label = <(FIELD_IDENTIFIER,TransitionFromSuspendedToRunnable,TransitionFromSuspendedToRunnable)<SUB>634</SUB>> ]
+"17253" [label = <(&lt;operator&gt;.indirectFieldAccess,runtime_-&gt;Start)<SUB>635</SUB>> ]
+"17263" [label = <(&lt;operator&gt;.fieldAccess,Thread::Current)<SUB>639</SUB>> ]
+"17278" [label = <(&lt;operator&gt;.notEquals,jklass_ != nullptr)<SUB>641</SUB>> ]
+"17290" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetStaticMethodID)<SUB>644</SUB>> ]
+"17300" [label = <(GetMethodID,env_-&gt;GetMethodID(jklass_, method_name, method_sig))<SUB>646</SUB>> ]
+"17311" [label = <(&lt;operator&gt;.notEquals,jmethod_ != nullptr)<SUB>648</SUB>> ]
+"17326" [label = <(&lt;operator&gt;.arrayInitializer,{ method_name, method_sig, native_fnptr })<SUB>651</SUB>> ]
+"17332" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_EQ(JNI_OK, env_-&gt;RegisterNatives(jklass_, methods, 1))\012 &lt;&lt; method_name)<SUB>652</SUB>> ]
+"17348" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;UnregisterNatives)<SUB>655</SUB>> ]
+"17374" [label = <(&lt;operator&gt;.notEquals,jobj_ != nullptr)<SUB>660</SUB>> ]
+"17147" [label = <(&lt;operator&gt;.fieldAccess,Thread::Current)<SUB>621</SUB>> ]
+"17159" [label = <(Self,soa.Self())<SUB>623</SUB>> ]
+"17166" [label = <(&lt;operator&gt;.fieldAccess,mirror::ClassLoader)<SUB>624</SUB>> ]
+"17170" [label = <(NewHandle,hs.NewHandle(soa.Decode&lt;mirror::ClassLoader&gt;(class_loader_)))<SUB>625</SUB>> ]
+"17185" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>626</SUB>> ]
+"17192" [label = <(&lt;operator&gt;.indirectFieldAccess,class_linker_-&gt;FindClass)<SUB>626</SUB>> ]
+"17195" [label = <(Self,soa.Self())<SUB>626</SUB>> ]
+"17205" [label = <(&lt;operator&gt;.indirectFieldAccess,class_linker_-&gt;GetImagePointerSize)<SUB>627</SUB>> ]
+"17212" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;FindClassMethod)<SUB>628</SUB>> ]
+"17220" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(method != nullptr) &lt;&lt; method_name)<SUB>629</SUB>> ]
+"17231" [label = <(&lt;operator&gt;.indirectFieldAccess,method-&gt;IsDirect)<SUB>630</SUB>> ]
+"17237" [label = <(FIELD_IDENTIFIER,SetEntryPointFromQuickCompiledCode,SetEntryPointFromQuickCompiledCode)<SUB>631</SUB>> ]
+"17239" [label = <(&lt;operator&gt;.indirectFieldAccess,class_linker_-&gt;GetRuntimeQuickGenericJniStub)<SUB>631</SUB>> ]
+"17245" [label = <(&lt;operator&gt;.fieldAccess,Thread::Current)<SUB>634</SUB>> ]
+"17255" [label = <(FIELD_IDENTIFIER,Start,Start)<SUB>635</SUB>> ]
+"17265" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>639</SUB>> ]
+"17292" [label = <(FIELD_IDENTIFIER,GetStaticMethodID,GetStaticMethodID)<SUB>644</SUB>> ]
+"17301" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetMethodID)<SUB>646</SUB>> ]
+"17333" [label = <(ASSERT_EQ,ASSERT_EQ(JNI_OK, env_-&gt;RegisterNatives(jklass_, methods, 1)))<SUB>652</SUB>> ]
+"17350" [label = <(FIELD_IDENTIFIER,UnregisterNatives,UnregisterNatives)<SUB>655</SUB>> ]
+"17149" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>621</SUB>> ]
+"17160" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>623</SUB>> ]
+"17168" [label = <(FIELD_IDENTIFIER,ClassLoader,ClassLoader)<SUB>624</SUB>> ]
+"17171" [label = <(&lt;operator&gt;.fieldAccess,hs.NewHandle)<SUB>625</SUB>> ]
+"17174" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::ClassLoader&gt;(class_loader_))<SUB>625</SUB>> ]
+"17187" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>626</SUB>> ]
+"17194" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>626</SUB>> ]
+"17196" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>626</SUB>> ]
+"17207" [label = <(FIELD_IDENTIFIER,GetImagePointerSize,GetImagePointerSize)<SUB>627</SUB>> ]
+"17214" [label = <(FIELD_IDENTIFIER,FindClassMethod,FindClassMethod)<SUB>628</SUB>> ]
+"17221" [label = <(ASSERT_TRUE,ASSERT_TRUE(method != nullptr))<SUB>629</SUB>> ]
+"17233" [label = <(FIELD_IDENTIFIER,IsDirect,IsDirect)<SUB>630</SUB>> ]
+"17241" [label = <(FIELD_IDENTIFIER,GetRuntimeQuickGenericJniStub,GetRuntimeQuickGenericJniStub)<SUB>631</SUB>> ]
+"17247" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>634</SUB>> ]
+"17303" [label = <(FIELD_IDENTIFIER,GetMethodID,GetMethodID)<SUB>646</SUB>> ]
+"17335" [label = <(RegisterNatives,env_-&gt;RegisterNatives(jklass_, methods, 1))<SUB>652</SUB>> ]
+"17162" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>623</SUB>> ]
+"17173" [label = <(FIELD_IDENTIFIER,NewHandle,NewHandle)<SUB>625</SUB>> ]
+"17175" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::ClassLoader)<SUB>625</SUB>> ]
+"17189" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>626</SUB>> ]
+"17198" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>626</SUB>> ]
+"17222" [label = <(&lt;operator&gt;.notEquals,method != nullptr)<SUB>629</SUB>> ]
+"17336" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;RegisterNatives)<SUB>652</SUB>> ]
+"17176" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>625</SUB>> ]
+"17179" [label = <(&lt;operator&gt;.fieldAccess,mirror::ClassLoader)<SUB>625</SUB>> ]
+"17338" [label = <(FIELD_IDENTIFIER,RegisterNatives,RegisterNatives)<SUB>652</SUB>> ]
+"17178" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>625</SUB>> ]
+"17181" [label = <(FIELD_IDENTIFIER,ClassLoader,ClassLoader)<SUB>625</SUB>> ]
+"17130" [label = <(METHOD,SetUpForTest)<SUB>615</SUB>> ]
+"17380" [label = <(METHOD_RETURN,void)<SUB>615</SUB>> ]
+  "17258" -> "17272" 
+  "17267" -> "17278" 
+  "17274" -> "17292" 
+  "17274" -> "17303" 
+  "17307" -> "17318" 
+  "17353" -> "17367" 
+  "17362" -> "17374" 
+  "17370" -> "17380" 
+  "17137" -> "17149" 
+  "17137" -> "17265" 
+  "17260" -> "17258" 
+  "17269" -> "17267" 
+  "17275" -> "17274" 
+  "17308" -> "17307" 
+  "17318" -> "17326" 
+  "17318" -> "17350" 
+  "17355" -> "17353" 
+  "17364" -> "17362" 
+  "17371" -> "17370" 
+  "17138" -> "17137" 
+  "17242" -> "17255" 
+  "17250" -> "17256" 
+  "17256" -> "17265" 
+  "17261" -> "17260" 
+  "17270" -> "17269" 
+  "17276" -> "17275" 
+  "17287" -> "17311" 
+  "17309" -> "17308" 
+  "17323" -> "17338" 
+  "17330" -> "17358" 
+  "17356" -> "17355" 
+  "17365" -> "17364" 
+  "17372" -> "17371" 
+  "17139" -> "17138" 
+  "17145" -> "17152" 
+  "17150" -> "17155" 
+  "17154" -> "17168" 
+  "17163" -> "17189" 
+  "17183" -> "17207" 
+  "17202" -> "17214" 
+  "17209" -> "17222" 
+  "17218" -> "17233" 
+  "17228" -> "17237" 
+  "17234" -> "17247" 
+  "17243" -> "17242" 
+  "17252" -> "17250" 
+  "17262" -> "17266" 
+  "17266" -> "17261" 
+  "17272" -> "17270" 
+  "17277" -> "17276" 
+  "17289" -> "17287" 
+  "17298" -> "17311" 
+  "17310" -> "17309" 
+  "17325" -> "17323" 
+  "17331" -> "17330" 
+  "17347" -> "17358" 
+  "17358" -> "17356" 
+  "17367" -> "17365" 
+  "17373" -> "17372" 
+  "17141" -> "17139" 
+  "17146" -> "17145" 
+  "17152" -> "17150" 
+  "17155" -> "17162" 
+  "17158" -> "17154" 
+  "17164" -> "17173" 
+  "17169" -> "17163" 
+  "17184" -> "17194" 
+  "17191" -> "17183" 
+  "17204" -> "17202" 
+  "17211" -> "17209" 
+  "17219" -> "17218" 
+  "17230" -> "17228" 
+  "17235" -> "17241" 
+  "17238" -> "17234" 
+  "17244" -> "17248" 
+  "17248" -> "17243" 
+  "17253" -> "17252" 
+  "17263" -> "17262" 
+  "17278" -> "17277" 
+  "17290" -> "17289" 
+  "17300" -> "17298" 
+  "17311" -> "17310" 
+  "17326" -> "17325" 
+  "17332" -> "17331" 
+  "17348" -> "17347" 
+  "17374" -> "17373" 
+  "17147" -> "17146" 
+  "17159" -> "17158" 
+  "17166" -> "17164" 
+  "17170" -> "17169" 
+  "17185" -> "17184" 
+  "17192" -> "17198" 
+  "17195" -> "17191" 
+  "17205" -> "17204" 
+  "17212" -> "17211" 
+  "17220" -> "17219" 
+  "17231" -> "17230" 
+  "17237" -> "17235" 
+  "17239" -> "17238" 
+  "17245" -> "17244" 
+  "17255" -> "17253" 
+  "17265" -> "17263" 
+  "17292" -> "17290" 
+  "17301" -> "17300" 
+  "17333" -> "17332" 
+  "17350" -> "17348" 
+  "17149" -> "17147" 
+  "17160" -> "17159" 
+  "17168" -> "17166" 
+  "17171" -> "17178" 
+  "17174" -> "17170" 
+  "17187" -> "17185" 
+  "17194" -> "17192" 
+  "17196" -> "17195" 
+  "17207" -> "17205" 
+  "17214" -> "17212" 
+  "17221" -> "17220" 
+  "17233" -> "17231" 
+  "17241" -> "17239" 
+  "17247" -> "17245" 
+  "17303" -> "17301" 
+  "17335" -> "17333" 
+  "17162" -> "17160" 
+  "17173" -> "17171" 
+  "17175" -> "17174" 
+  "17189" -> "17187" 
+  "17198" -> "17196" 
+  "17222" -> "17221" 
+  "17336" -> "17335" 
+  "17176" -> "17181" 
+  "17179" -> "17175" 
+  "17338" -> "17336" 
+  "17178" -> "17176" 
+  "17181" -> "17179" 
+  "17130" -> "17141" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/287-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/287-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/287-cfg.dot	2023-06-07 19:35:01.637387149 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/287-cfg.dot	2023-06-07 19:35:08.177386501 +0330
@@ -1,249 +1,25 @@
-digraph "GetPrimitiveArrayRegionElementsOfWrongType" {  
-"16955" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>485</SUB>> ]
-"16964" [label = <(&lt;operator&gt;.assignment,kLength = 10)<SUB>487</SUB>> ]
-"16968" [label = <(&lt;operator&gt;.assignment,array = env_-&gt;NewBooleanArray(kLength))<SUB>488</SUB>> ]
-"16975" [label = <(ASSERT_TRUE,ASSERT_TRUE(array != nullptr))<SUB>489</SUB>> ]
-"16980" [label = <(GetByteArrayRegion,env_-&gt;GetByteArrayRegion(reinterpret_cast&lt;jbyteArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jbyte*&gt;(elements)))<SUB>491</SUB>> ]
-"16992" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected byte[]&quot;\012 : &quot;attempt to get region of byte primitive array elements with an object of type boolean[]&quot;))<SUB>493</SUB>> ]
-"17000" [label = <(GetShortArrayRegion,env_-&gt;GetShortArrayRegion(reinterpret_cast&lt;jshortArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jshort*&gt;(elements)))<SUB>496</SUB>> ]
-"17012" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected short[]&quot;\012 : &quot;attempt to get region of short primitive array elements with an object of type boolean[]&quot;))<SUB>498</SUB>> ]
-"17020" [label = <(GetCharArrayRegion,env_-&gt;GetCharArrayRegion(reinterpret_cast&lt;jcharArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jchar*&gt;(elements)))<SUB>501</SUB>> ]
-"17032" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected char[]&quot;\012 : &quot;attempt to get region of char primitive array elements with an object of type boolean[]&quot;))<SUB>503</SUB>> ]
-"17040" [label = <(GetIntArrayRegion,env_-&gt;GetIntArrayRegion(reinterpret_cast&lt;jintArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jint*&gt;(elements)))<SUB>506</SUB>> ]
-"17052" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected int[]&quot;\012 : &quot;attempt to get region of int primitive array elements with an object of type boolean[]&quot;))<SUB>508</SUB>> ]
-"17060" [label = <(GetLongArrayRegion,env_-&gt;GetLongArrayRegion(reinterpret_cast&lt;jlongArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jlong*&gt;(elements)))<SUB>511</SUB>> ]
-"17072" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected long[]&quot;\012 : &quot;attempt to get region of long primitive array elements with an object of type boolean[]&quot;))<SUB>513</SUB>> ]
-"17080" [label = <(GetFloatArrayRegion,env_-&gt;GetFloatArrayRegion(reinterpret_cast&lt;jfloatArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jfloat*&gt;(elements)))<SUB>516</SUB>> ]
-"17092" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected float[]&quot;\012 : &quot;attempt to get region of float primitive array elements with an object of type boolean[]&quot;))<SUB>518</SUB>> ]
-"17100" [label = <(GetDoubleArrayRegion,env_-&gt;GetDoubleArrayRegion(reinterpret_cast&lt;jdoubleArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jdouble*&gt;(elements)))<SUB>521</SUB>> ]
-"17112" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected double[]&quot;\012 : &quot;attempt to get region of double primitive array elements with an object of type boolean[]&quot;))<SUB>523</SUB>> ]
-"17121" [label = <(&lt;operator&gt;.assignment,array2 = env_-&gt;NewByteArray(10))<SUB>526</SUB>> ]
-"17128" [label = <(GetBooleanArrayRegion,env_-&gt;GetBooleanArrayRegion(reinterpret_cast&lt;jbooleanArray&gt;(array2), 0, kLength,\012 reinterpret_cast&lt;jboolean*&gt;(elements)))<SUB>527</SUB>> ]
-"17140" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type byte[] expected boolean[]&quot;\012 : &quot;attempt to get region of boolean primitive array elements with an object of type byte[]&quot;))<SUB>529</SUB>> ]
-"17149" [label = <(&lt;operator&gt;.assignment,object = env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>532</SUB>> ]
-"17156" [label = <(GetBooleanArrayRegion,env_-&gt;GetBooleanArrayRegion(reinterpret_cast&lt;jbooleanArray&gt;(object), 0, kLength,\012 reinterpret_cast&lt;jboolean*&gt;(elements)))<SUB>533</SUB>> ]
-"17168" [label = <(Check,jni_abort_catcher.Check(check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;attempt to get region of boolean primitive array elements with an object of type &quot;\012 &quot;java.lang.String&quot;))<SUB>535</SUB>> ]
-"17176" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>539</SUB>> ]
-"16957" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>485</SUB>> ]
-"16970" [label = <(NewBooleanArray,env_-&gt;NewBooleanArray(kLength))<SUB>488</SUB>> ]
-"16976" [label = <(&lt;operator&gt;.notEquals,array != nullptr)<SUB>489</SUB>> ]
-"16981" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetByteArrayRegion)<SUB>491</SUB>> ]
-"16984" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbyteArray&gt;(array))<SUB>491</SUB>> ]
-"16989" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbyte*&gt;(elements))<SUB>492</SUB>> ]
-"16993" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>493</SUB>> ]
-"16996" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected byte[]&quot;\012 : &quot;attempt to get region of byte primitive array elements with an object of type boolean[]&quot;)<SUB>494</SUB>> ]
-"17001" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetShortArrayRegion)<SUB>496</SUB>> ]
-"17004" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jshortArray&gt;(array))<SUB>496</SUB>> ]
-"17009" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jshort*&gt;(elements))<SUB>497</SUB>> ]
-"17013" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>498</SUB>> ]
-"17016" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected short[]&quot;\012 : &quot;attempt to get region of short primitive array elements with an object of type boolean[]&quot;)<SUB>499</SUB>> ]
-"17021" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetCharArrayRegion)<SUB>501</SUB>> ]
-"17024" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jcharArray&gt;(array))<SUB>501</SUB>> ]
-"17029" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jchar*&gt;(elements))<SUB>502</SUB>> ]
-"17033" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>503</SUB>> ]
-"17036" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected char[]&quot;\012 : &quot;attempt to get region of char primitive array elements with an object of type boolean[]&quot;)<SUB>504</SUB>> ]
-"17041" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetIntArrayRegion)<SUB>506</SUB>> ]
-"17044" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jintArray&gt;(array))<SUB>506</SUB>> ]
-"17049" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jint*&gt;(elements))<SUB>507</SUB>> ]
-"17053" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>508</SUB>> ]
-"17056" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected int[]&quot;\012 : &quot;attempt to get region of int primitive array elements with an object of type boolean[]&quot;)<SUB>509</SUB>> ]
-"17061" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetLongArrayRegion)<SUB>511</SUB>> ]
-"17064" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jlongArray&gt;(array))<SUB>511</SUB>> ]
-"17069" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jlong*&gt;(elements))<SUB>512</SUB>> ]
-"17073" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>513</SUB>> ]
-"17076" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected long[]&quot;\012 : &quot;attempt to get region of long primitive array elements with an object of type boolean[]&quot;)<SUB>514</SUB>> ]
-"17081" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetFloatArrayRegion)<SUB>516</SUB>> ]
-"17084" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jfloatArray&gt;(array))<SUB>516</SUB>> ]
-"17089" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jfloat*&gt;(elements))<SUB>517</SUB>> ]
-"17093" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>518</SUB>> ]
-"17096" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected float[]&quot;\012 : &quot;attempt to get region of float primitive array elements with an object of type boolean[]&quot;)<SUB>519</SUB>> ]
-"17101" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetDoubleArrayRegion)<SUB>521</SUB>> ]
-"17104" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jdoubleArray&gt;(array))<SUB>521</SUB>> ]
-"17109" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jdouble*&gt;(elements))<SUB>522</SUB>> ]
-"17113" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>523</SUB>> ]
-"17116" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected double[]&quot;\012 : &quot;attempt to get region of double primitive array elements with an object of type boolean[]&quot;)<SUB>524</SUB>> ]
-"17123" [label = <(NewByteArray,env_-&gt;NewByteArray(10))<SUB>526</SUB>> ]
-"17129" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetBooleanArrayRegion)<SUB>527</SUB>> ]
-"17132" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbooleanArray&gt;(array2))<SUB>527</SUB>> ]
-"17137" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jboolean*&gt;(elements))<SUB>528</SUB>> ]
-"17141" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>529</SUB>> ]
-"17144" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type byte[] expected boolean[]&quot;\012 : &quot;attempt to get region of boolean primitive array elements with an object of type byte[]&quot;)<SUB>530</SUB>> ]
-"17151" [label = <(NewStringUTF,env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>532</SUB>> ]
-"17157" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetBooleanArrayRegion)<SUB>533</SUB>> ]
-"17160" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbooleanArray&gt;(object))<SUB>533</SUB>> ]
-"17165" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jboolean*&gt;(elements))<SUB>534</SUB>> ]
-"17169" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>535</SUB>> ]
-"17172" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;attempt to get region of boolean primitive array elements with an object of type &quot;\012 &quot;java.lang.String&quot;)<SUB>535</SUB>> ]
-"17178" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>539</SUB>> ]
-"16958" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>485</SUB>> ]
-"16971" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewBooleanArray)<SUB>488</SUB>> ]
-"16983" [label = <(FIELD_IDENTIFIER,GetByteArrayRegion,GetByteArrayRegion)<SUB>491</SUB>> ]
-"16985" [label = <(UNKNOWN,jbyteArray,jbyteArray)<SUB>491</SUB>> ]
-"16990" [label = <(UNKNOWN,jbyte*,jbyte*)<SUB>492</SUB>> ]
-"16995" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>493</SUB>> ]
-"17003" [label = <(FIELD_IDENTIFIER,GetShortArrayRegion,GetShortArrayRegion)<SUB>496</SUB>> ]
-"17005" [label = <(UNKNOWN,jshortArray,jshortArray)<SUB>496</SUB>> ]
-"17010" [label = <(UNKNOWN,jshort*,jshort*)<SUB>497</SUB>> ]
-"17015" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>498</SUB>> ]
-"17023" [label = <(FIELD_IDENTIFIER,GetCharArrayRegion,GetCharArrayRegion)<SUB>501</SUB>> ]
-"17025" [label = <(UNKNOWN,jcharArray,jcharArray)<SUB>501</SUB>> ]
-"17030" [label = <(UNKNOWN,jchar*,jchar*)<SUB>502</SUB>> ]
-"17035" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>503</SUB>> ]
-"17043" [label = <(FIELD_IDENTIFIER,GetIntArrayRegion,GetIntArrayRegion)<SUB>506</SUB>> ]
-"17045" [label = <(UNKNOWN,jintArray,jintArray)<SUB>506</SUB>> ]
-"17050" [label = <(UNKNOWN,jint*,jint*)<SUB>507</SUB>> ]
-"17055" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>508</SUB>> ]
-"17063" [label = <(FIELD_IDENTIFIER,GetLongArrayRegion,GetLongArrayRegion)<SUB>511</SUB>> ]
-"17065" [label = <(UNKNOWN,jlongArray,jlongArray)<SUB>511</SUB>> ]
-"17070" [label = <(UNKNOWN,jlong*,jlong*)<SUB>512</SUB>> ]
-"17075" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>513</SUB>> ]
-"17083" [label = <(FIELD_IDENTIFIER,GetFloatArrayRegion,GetFloatArrayRegion)<SUB>516</SUB>> ]
-"17085" [label = <(UNKNOWN,jfloatArray,jfloatArray)<SUB>516</SUB>> ]
-"17090" [label = <(UNKNOWN,jfloat*,jfloat*)<SUB>517</SUB>> ]
-"17095" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>518</SUB>> ]
-"17103" [label = <(FIELD_IDENTIFIER,GetDoubleArrayRegion,GetDoubleArrayRegion)<SUB>521</SUB>> ]
-"17105" [label = <(UNKNOWN,jdoubleArray,jdoubleArray)<SUB>521</SUB>> ]
-"17110" [label = <(UNKNOWN,jdouble*,jdouble*)<SUB>522</SUB>> ]
-"17115" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>523</SUB>> ]
-"17124" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewByteArray)<SUB>526</SUB>> ]
-"17131" [label = <(FIELD_IDENTIFIER,GetBooleanArrayRegion,GetBooleanArrayRegion)<SUB>527</SUB>> ]
-"17133" [label = <(UNKNOWN,jbooleanArray,jbooleanArray)<SUB>527</SUB>> ]
-"17138" [label = <(UNKNOWN,jboolean*,jboolean*)<SUB>528</SUB>> ]
-"17143" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>529</SUB>> ]
-"17152" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewStringUTF)<SUB>532</SUB>> ]
-"17159" [label = <(FIELD_IDENTIFIER,GetBooleanArrayRegion,GetBooleanArrayRegion)<SUB>533</SUB>> ]
-"17161" [label = <(UNKNOWN,jbooleanArray,jbooleanArray)<SUB>533</SUB>> ]
-"17166" [label = <(UNKNOWN,jboolean*,jboolean*)<SUB>534</SUB>> ]
-"17171" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>535</SUB>> ]
-"17179" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>539</SUB>> ]
-"16960" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>485</SUB>> ]
-"16973" [label = <(FIELD_IDENTIFIER,NewBooleanArray,NewBooleanArray)<SUB>488</SUB>> ]
-"17126" [label = <(FIELD_IDENTIFIER,NewByteArray,NewByteArray)<SUB>526</SUB>> ]
-"17154" [label = <(FIELD_IDENTIFIER,NewStringUTF,NewStringUTF)<SUB>532</SUB>> ]
-"17181" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>539</SUB>> ]
-"16951" [label = <(METHOD,GetPrimitiveArrayRegionElementsOfWrongType)<SUB>484</SUB>> ]
-"17183" [label = <(METHOD_RETURN,void)<SUB>484</SUB>> ]
-  "16955" -> "16964" 
-  "16964" -> "16973" 
-  "16968" -> "16976" 
-  "16975" -> "16983" 
-  "16980" -> "16995" 
-  "16992" -> "17003" 
-  "17000" -> "17015" 
-  "17012" -> "17023" 
-  "17020" -> "17035" 
-  "17032" -> "17043" 
-  "17040" -> "17055" 
-  "17052" -> "17063" 
-  "17060" -> "17075" 
-  "17072" -> "17083" 
-  "17080" -> "17095" 
-  "17092" -> "17103" 
-  "17100" -> "17115" 
-  "17112" -> "17126" 
-  "17121" -> "17131" 
-  "17128" -> "17143" 
-  "17140" -> "17154" 
-  "17149" -> "17159" 
-  "17156" -> "17171" 
-  "17168" -> "17181" 
-  "17176" -> "17183" 
-  "16957" -> "16955" 
-  "16970" -> "16968" 
-  "16976" -> "16975" 
-  "16981" -> "16985" 
-  "16984" -> "16990" 
-  "16989" -> "16980" 
-  "16993" -> "16996" 
-  "16996" -> "16992" 
-  "17001" -> "17005" 
-  "17004" -> "17010" 
-  "17009" -> "17000" 
-  "17013" -> "17016" 
-  "17016" -> "17012" 
-  "17021" -> "17025" 
-  "17024" -> "17030" 
-  "17029" -> "17020" 
-  "17033" -> "17036" 
-  "17036" -> "17032" 
-  "17041" -> "17045" 
-  "17044" -> "17050" 
-  "17049" -> "17040" 
-  "17053" -> "17056" 
-  "17056" -> "17052" 
-  "17061" -> "17065" 
-  "17064" -> "17070" 
-  "17069" -> "17060" 
-  "17073" -> "17076" 
-  "17076" -> "17072" 
-  "17081" -> "17085" 
-  "17084" -> "17090" 
-  "17089" -> "17080" 
-  "17093" -> "17096" 
-  "17096" -> "17092" 
-  "17101" -> "17105" 
-  "17104" -> "17110" 
-  "17109" -> "17100" 
-  "17113" -> "17116" 
-  "17116" -> "17112" 
-  "17123" -> "17121" 
-  "17129" -> "17133" 
-  "17132" -> "17138" 
-  "17137" -> "17128" 
-  "17141" -> "17144" 
-  "17144" -> "17140" 
-  "17151" -> "17149" 
-  "17157" -> "17161" 
-  "17160" -> "17166" 
-  "17165" -> "17156" 
-  "17169" -> "17172" 
-  "17172" -> "17168" 
-  "17178" -> "17176" 
-  "16958" -> "16957" 
-  "16971" -> "16970" 
-  "16983" -> "16981" 
-  "16985" -> "16984" 
-  "16990" -> "16989" 
-  "16995" -> "16993" 
-  "17003" -> "17001" 
-  "17005" -> "17004" 
-  "17010" -> "17009" 
-  "17015" -> "17013" 
-  "17023" -> "17021" 
-  "17025" -> "17024" 
-  "17030" -> "17029" 
-  "17035" -> "17033" 
-  "17043" -> "17041" 
-  "17045" -> "17044" 
-  "17050" -> "17049" 
-  "17055" -> "17053" 
-  "17063" -> "17061" 
-  "17065" -> "17064" 
-  "17070" -> "17069" 
-  "17075" -> "17073" 
-  "17083" -> "17081" 
-  "17085" -> "17084" 
-  "17090" -> "17089" 
-  "17095" -> "17093" 
-  "17103" -> "17101" 
-  "17105" -> "17104" 
-  "17110" -> "17109" 
-  "17115" -> "17113" 
-  "17124" -> "17123" 
-  "17131" -> "17129" 
-  "17133" -> "17132" 
-  "17138" -> "17137" 
-  "17143" -> "17141" 
-  "17152" -> "17151" 
-  "17159" -> "17157" 
-  "17161" -> "17160" 
-  "17166" -> "17165" 
-  "17171" -> "17169" 
-  "17179" -> "17178" 
-  "16960" -> "16958" 
-  "16973" -> "16971" 
-  "17126" -> "17124" 
-  "17154" -> "17152" 
-  "17181" -> "17179" 
-  "16951" -> "16960" 
+digraph "GetLocalsCapacity" {  
+"17405" [label = <(soa,soa(Thread::Current()))<SUB>935</SUB>> ]
+"17410" [label = <(RETURN,return reinterpret_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetLocalsCapacity();,return reinterpret_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetLocalsCapacity();)<SUB>936</SUB>> ]
+"17406" [label = <(Thread::Current,Thread::Current())<SUB>935</SUB>> ]
+"17411" [label = <(GetLocalsCapacity,reinterpret_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetLocalsCapacity())<SUB>936</SUB>> ]
+"17407" [label = <(&lt;operator&gt;.fieldAccess,Thread::Current)<SUB>935</SUB>> ]
+"17412" [label = <(&lt;operator&gt;.indirectFieldAccess,reinterpret_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetLocalsCapacity)<SUB>936</SUB>> ]
+"17409" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>935</SUB>> ]
+"17413" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;JNIEnvExt*&gt;(env))<SUB>936</SUB>> ]
+"17416" [label = <(FIELD_IDENTIFIER,GetLocalsCapacity,GetLocalsCapacity)<SUB>936</SUB>> ]
+"17414" [label = <(UNKNOWN,JNIEnvExt*,JNIEnvExt*)<SUB>936</SUB>> ]
+"17401" [label = <(METHOD,GetLocalsCapacity)<SUB>934</SUB>> ]
+"17417" [label = <(METHOD_RETURN,size_t)<SUB>934</SUB>> ]
+  "17405" -> "17414" 
+  "17410" -> "17417" 
+  "17406" -> "17405" 
+  "17411" -> "17410" 
+  "17407" -> "17406" 
+  "17412" -> "17411" 
+  "17409" -> "17407" 
+  "17413" -> "17416" 
+  "17416" -> "17412" 
+  "17414" -> "17413" 
+  "17401" -> "17409" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/288-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/288-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/288-cfg.dot	2023-06-07 19:35:01.637387149 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/288-cfg.dot	2023-06-07 19:35:08.177386501 +0330
@@ -1,249 +1,5 @@
-digraph "SetPrimitiveArrayRegionElementsOfWrongType" {  
-"17189" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>543</SUB>> ]
-"17198" [label = <(&lt;operator&gt;.assignment,kLength = 10)<SUB>545</SUB>> ]
-"17202" [label = <(&lt;operator&gt;.assignment,array = env_-&gt;NewBooleanArray(kLength))<SUB>546</SUB>> ]
-"17209" [label = <(ASSERT_TRUE,ASSERT_TRUE(array != nullptr))<SUB>547</SUB>> ]
-"17214" [label = <(SetByteArrayRegion,env_-&gt;SetByteArrayRegion(reinterpret_cast&lt;jbyteArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jbyte*&gt;(elements)))<SUB>549</SUB>> ]
-"17226" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected byte[]&quot;\012 : &quot;attempt to set region of byte primitive array elements with an object of type boolean[]&quot;))<SUB>551</SUB>> ]
-"17234" [label = <(SetShortArrayRegion,env_-&gt;SetShortArrayRegion(reinterpret_cast&lt;jshortArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jshort*&gt;(elements)))<SUB>554</SUB>> ]
-"17246" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected short[]&quot;\012 : &quot;attempt to set region of short primitive array elements with an object of type boolean[]&quot;))<SUB>556</SUB>> ]
-"17254" [label = <(SetCharArrayRegion,env_-&gt;SetCharArrayRegion(reinterpret_cast&lt;jcharArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jchar*&gt;(elements)))<SUB>559</SUB>> ]
-"17266" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected char[]&quot;\012 : &quot;attempt to set region of char primitive array elements with an object of type boolean[]&quot;))<SUB>561</SUB>> ]
-"17274" [label = <(SetIntArrayRegion,env_-&gt;SetIntArrayRegion(reinterpret_cast&lt;jintArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jint*&gt;(elements)))<SUB>564</SUB>> ]
-"17286" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected int[]&quot;\012 : &quot;attempt to set region of int primitive array elements with an object of type boolean[]&quot;))<SUB>566</SUB>> ]
-"17294" [label = <(SetLongArrayRegion,env_-&gt;SetLongArrayRegion(reinterpret_cast&lt;jlongArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jlong*&gt;(elements)))<SUB>569</SUB>> ]
-"17306" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected long[]&quot;\012 : &quot;attempt to set region of long primitive array elements with an object of type boolean[]&quot;))<SUB>571</SUB>> ]
-"17314" [label = <(SetFloatArrayRegion,env_-&gt;SetFloatArrayRegion(reinterpret_cast&lt;jfloatArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jfloat*&gt;(elements)))<SUB>574</SUB>> ]
-"17326" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected float[]&quot;\012 : &quot;attempt to set region of float primitive array elements with an object of type boolean[]&quot;))<SUB>576</SUB>> ]
-"17334" [label = <(SetDoubleArrayRegion,env_-&gt;SetDoubleArrayRegion(reinterpret_cast&lt;jdoubleArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jdouble*&gt;(elements)))<SUB>579</SUB>> ]
-"17346" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected double[]&quot;\012 : &quot;attempt to set region of double primitive array elements with an object of type boolean[]&quot;))<SUB>581</SUB>> ]
-"17355" [label = <(&lt;operator&gt;.assignment,array2 = env_-&gt;NewByteArray(10))<SUB>584</SUB>> ]
-"17362" [label = <(SetBooleanArrayRegion,env_-&gt;SetBooleanArrayRegion(reinterpret_cast&lt;jbooleanArray&gt;(array2), 0, kLength,\012 reinterpret_cast&lt;jboolean*&gt;(elements)))<SUB>585</SUB>> ]
-"17374" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type byte[] expected boolean[]&quot;\012 : &quot;attempt to set region of boolean primitive array elements with an object of type byte[]&quot;))<SUB>587</SUB>> ]
-"17383" [label = <(&lt;operator&gt;.assignment,object = env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>590</SUB>> ]
-"17390" [label = <(SetBooleanArrayRegion,env_-&gt;SetBooleanArrayRegion(reinterpret_cast&lt;jbooleanArray&gt;(object), 0, kLength,\012 reinterpret_cast&lt;jboolean*&gt;(elements)))<SUB>591</SUB>> ]
-"17402" [label = <(Check,jni_abort_catcher.Check(check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;attempt to set region of boolean primitive array elements with an object of type &quot;\012 &quot;java.lang.String&quot;))<SUB>593</SUB>> ]
-"17410" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>596</SUB>> ]
-"17191" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>543</SUB>> ]
-"17204" [label = <(NewBooleanArray,env_-&gt;NewBooleanArray(kLength))<SUB>546</SUB>> ]
-"17210" [label = <(&lt;operator&gt;.notEquals,array != nullptr)<SUB>547</SUB>> ]
-"17215" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;SetByteArrayRegion)<SUB>549</SUB>> ]
-"17218" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbyteArray&gt;(array))<SUB>549</SUB>> ]
-"17223" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbyte*&gt;(elements))<SUB>550</SUB>> ]
-"17227" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>551</SUB>> ]
-"17230" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected byte[]&quot;\012 : &quot;attempt to set region of byte primitive array elements with an object of type boolean[]&quot;)<SUB>552</SUB>> ]
-"17235" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;SetShortArrayRegion)<SUB>554</SUB>> ]
-"17238" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jshortArray&gt;(array))<SUB>554</SUB>> ]
-"17243" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jshort*&gt;(elements))<SUB>555</SUB>> ]
-"17247" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>556</SUB>> ]
-"17250" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected short[]&quot;\012 : &quot;attempt to set region of short primitive array elements with an object of type boolean[]&quot;)<SUB>557</SUB>> ]
-"17255" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;SetCharArrayRegion)<SUB>559</SUB>> ]
-"17258" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jcharArray&gt;(array))<SUB>559</SUB>> ]
-"17263" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jchar*&gt;(elements))<SUB>560</SUB>> ]
-"17267" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>561</SUB>> ]
-"17270" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected char[]&quot;\012 : &quot;attempt to set region of char primitive array elements with an object of type boolean[]&quot;)<SUB>562</SUB>> ]
-"17275" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;SetIntArrayRegion)<SUB>564</SUB>> ]
-"17278" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jintArray&gt;(array))<SUB>564</SUB>> ]
-"17283" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jint*&gt;(elements))<SUB>565</SUB>> ]
-"17287" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>566</SUB>> ]
-"17290" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected int[]&quot;\012 : &quot;attempt to set region of int primitive array elements with an object of type boolean[]&quot;)<SUB>567</SUB>> ]
-"17295" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;SetLongArrayRegion)<SUB>569</SUB>> ]
-"17298" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jlongArray&gt;(array))<SUB>569</SUB>> ]
-"17303" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jlong*&gt;(elements))<SUB>570</SUB>> ]
-"17307" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>571</SUB>> ]
-"17310" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected long[]&quot;\012 : &quot;attempt to set region of long primitive array elements with an object of type boolean[]&quot;)<SUB>572</SUB>> ]
-"17315" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;SetFloatArrayRegion)<SUB>574</SUB>> ]
-"17318" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jfloatArray&gt;(array))<SUB>574</SUB>> ]
-"17323" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jfloat*&gt;(elements))<SUB>575</SUB>> ]
-"17327" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>576</SUB>> ]
-"17330" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected float[]&quot;\012 : &quot;attempt to set region of float primitive array elements with an object of type boolean[]&quot;)<SUB>577</SUB>> ]
-"17335" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;SetDoubleArrayRegion)<SUB>579</SUB>> ]
-"17338" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jdoubleArray&gt;(array))<SUB>579</SUB>> ]
-"17343" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jdouble*&gt;(elements))<SUB>580</SUB>> ]
-"17347" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>581</SUB>> ]
-"17350" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected double[]&quot;\012 : &quot;attempt to set region of double primitive array elements with an object of type boolean[]&quot;)<SUB>582</SUB>> ]
-"17357" [label = <(NewByteArray,env_-&gt;NewByteArray(10))<SUB>584</SUB>> ]
-"17363" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;SetBooleanArrayRegion)<SUB>585</SUB>> ]
-"17366" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbooleanArray&gt;(array2))<SUB>585</SUB>> ]
-"17371" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jboolean*&gt;(elements))<SUB>586</SUB>> ]
-"17375" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>587</SUB>> ]
-"17378" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type byte[] expected boolean[]&quot;\012 : &quot;attempt to set region of boolean primitive array elements with an object of type byte[]&quot;)<SUB>588</SUB>> ]
-"17385" [label = <(NewStringUTF,env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>590</SUB>> ]
-"17391" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;SetBooleanArrayRegion)<SUB>591</SUB>> ]
-"17394" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbooleanArray&gt;(object))<SUB>591</SUB>> ]
-"17399" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jboolean*&gt;(elements))<SUB>592</SUB>> ]
-"17403" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>593</SUB>> ]
-"17406" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;attempt to set region of boolean primitive array elements with an object of type &quot;\012 &quot;java.lang.String&quot;)<SUB>593</SUB>> ]
-"17412" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>596</SUB>> ]
-"17192" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>543</SUB>> ]
-"17205" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewBooleanArray)<SUB>546</SUB>> ]
-"17217" [label = <(FIELD_IDENTIFIER,SetByteArrayRegion,SetByteArrayRegion)<SUB>549</SUB>> ]
-"17219" [label = <(UNKNOWN,jbyteArray,jbyteArray)<SUB>549</SUB>> ]
-"17224" [label = <(UNKNOWN,jbyte*,jbyte*)<SUB>550</SUB>> ]
-"17229" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>551</SUB>> ]
-"17237" [label = <(FIELD_IDENTIFIER,SetShortArrayRegion,SetShortArrayRegion)<SUB>554</SUB>> ]
-"17239" [label = <(UNKNOWN,jshortArray,jshortArray)<SUB>554</SUB>> ]
-"17244" [label = <(UNKNOWN,jshort*,jshort*)<SUB>555</SUB>> ]
-"17249" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>556</SUB>> ]
-"17257" [label = <(FIELD_IDENTIFIER,SetCharArrayRegion,SetCharArrayRegion)<SUB>559</SUB>> ]
-"17259" [label = <(UNKNOWN,jcharArray,jcharArray)<SUB>559</SUB>> ]
-"17264" [label = <(UNKNOWN,jchar*,jchar*)<SUB>560</SUB>> ]
-"17269" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>561</SUB>> ]
-"17277" [label = <(FIELD_IDENTIFIER,SetIntArrayRegion,SetIntArrayRegion)<SUB>564</SUB>> ]
-"17279" [label = <(UNKNOWN,jintArray,jintArray)<SUB>564</SUB>> ]
-"17284" [label = <(UNKNOWN,jint*,jint*)<SUB>565</SUB>> ]
-"17289" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>566</SUB>> ]
-"17297" [label = <(FIELD_IDENTIFIER,SetLongArrayRegion,SetLongArrayRegion)<SUB>569</SUB>> ]
-"17299" [label = <(UNKNOWN,jlongArray,jlongArray)<SUB>569</SUB>> ]
-"17304" [label = <(UNKNOWN,jlong*,jlong*)<SUB>570</SUB>> ]
-"17309" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>571</SUB>> ]
-"17317" [label = <(FIELD_IDENTIFIER,SetFloatArrayRegion,SetFloatArrayRegion)<SUB>574</SUB>> ]
-"17319" [label = <(UNKNOWN,jfloatArray,jfloatArray)<SUB>574</SUB>> ]
-"17324" [label = <(UNKNOWN,jfloat*,jfloat*)<SUB>575</SUB>> ]
-"17329" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>576</SUB>> ]
-"17337" [label = <(FIELD_IDENTIFIER,SetDoubleArrayRegion,SetDoubleArrayRegion)<SUB>579</SUB>> ]
-"17339" [label = <(UNKNOWN,jdoubleArray,jdoubleArray)<SUB>579</SUB>> ]
-"17344" [label = <(UNKNOWN,jdouble*,jdouble*)<SUB>580</SUB>> ]
-"17349" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>581</SUB>> ]
-"17358" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewByteArray)<SUB>584</SUB>> ]
-"17365" [label = <(FIELD_IDENTIFIER,SetBooleanArrayRegion,SetBooleanArrayRegion)<SUB>585</SUB>> ]
-"17367" [label = <(UNKNOWN,jbooleanArray,jbooleanArray)<SUB>585</SUB>> ]
-"17372" [label = <(UNKNOWN,jboolean*,jboolean*)<SUB>586</SUB>> ]
-"17377" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>587</SUB>> ]
-"17386" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewStringUTF)<SUB>590</SUB>> ]
-"17393" [label = <(FIELD_IDENTIFIER,SetBooleanArrayRegion,SetBooleanArrayRegion)<SUB>591</SUB>> ]
-"17395" [label = <(UNKNOWN,jbooleanArray,jbooleanArray)<SUB>591</SUB>> ]
-"17400" [label = <(UNKNOWN,jboolean*,jboolean*)<SUB>592</SUB>> ]
-"17405" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>593</SUB>> ]
-"17413" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>596</SUB>> ]
-"17194" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>543</SUB>> ]
-"17207" [label = <(FIELD_IDENTIFIER,NewBooleanArray,NewBooleanArray)<SUB>546</SUB>> ]
-"17360" [label = <(FIELD_IDENTIFIER,NewByteArray,NewByteArray)<SUB>584</SUB>> ]
-"17388" [label = <(FIELD_IDENTIFIER,NewStringUTF,NewStringUTF)<SUB>590</SUB>> ]
-"17415" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>596</SUB>> ]
-"17185" [label = <(METHOD,SetPrimitiveArrayRegionElementsOfWrongType)<SUB>542</SUB>> ]
-"17417" [label = <(METHOD_RETURN,void)<SUB>542</SUB>> ]
-  "17189" -> "17198" 
-  "17198" -> "17207" 
-  "17202" -> "17210" 
-  "17209" -> "17217" 
-  "17214" -> "17229" 
-  "17226" -> "17237" 
-  "17234" -> "17249" 
-  "17246" -> "17257" 
-  "17254" -> "17269" 
-  "17266" -> "17277" 
-  "17274" -> "17289" 
-  "17286" -> "17297" 
-  "17294" -> "17309" 
-  "17306" -> "17317" 
-  "17314" -> "17329" 
-  "17326" -> "17337" 
-  "17334" -> "17349" 
-  "17346" -> "17360" 
-  "17355" -> "17365" 
-  "17362" -> "17377" 
-  "17374" -> "17388" 
-  "17383" -> "17393" 
-  "17390" -> "17405" 
-  "17402" -> "17415" 
-  "17410" -> "17417" 
-  "17191" -> "17189" 
-  "17204" -> "17202" 
-  "17210" -> "17209" 
-  "17215" -> "17219" 
-  "17218" -> "17224" 
-  "17223" -> "17214" 
-  "17227" -> "17230" 
-  "17230" -> "17226" 
-  "17235" -> "17239" 
-  "17238" -> "17244" 
-  "17243" -> "17234" 
-  "17247" -> "17250" 
-  "17250" -> "17246" 
-  "17255" -> "17259" 
-  "17258" -> "17264" 
-  "17263" -> "17254" 
-  "17267" -> "17270" 
-  "17270" -> "17266" 
-  "17275" -> "17279" 
-  "17278" -> "17284" 
-  "17283" -> "17274" 
-  "17287" -> "17290" 
-  "17290" -> "17286" 
-  "17295" -> "17299" 
-  "17298" -> "17304" 
-  "17303" -> "17294" 
-  "17307" -> "17310" 
-  "17310" -> "17306" 
-  "17315" -> "17319" 
-  "17318" -> "17324" 
-  "17323" -> "17314" 
-  "17327" -> "17330" 
-  "17330" -> "17326" 
-  "17335" -> "17339" 
-  "17338" -> "17344" 
-  "17343" -> "17334" 
-  "17347" -> "17350" 
-  "17350" -> "17346" 
-  "17357" -> "17355" 
-  "17363" -> "17367" 
-  "17366" -> "17372" 
-  "17371" -> "17362" 
-  "17375" -> "17378" 
-  "17378" -> "17374" 
-  "17385" -> "17383" 
-  "17391" -> "17395" 
-  "17394" -> "17400" 
-  "17399" -> "17390" 
-  "17403" -> "17406" 
-  "17406" -> "17402" 
-  "17412" -> "17410" 
-  "17192" -> "17191" 
-  "17205" -> "17204" 
-  "17217" -> "17215" 
-  "17219" -> "17218" 
-  "17224" -> "17223" 
-  "17229" -> "17227" 
-  "17237" -> "17235" 
-  "17239" -> "17238" 
-  "17244" -> "17243" 
-  "17249" -> "17247" 
-  "17257" -> "17255" 
-  "17259" -> "17258" 
-  "17264" -> "17263" 
-  "17269" -> "17267" 
-  "17277" -> "17275" 
-  "17279" -> "17278" 
-  "17284" -> "17283" 
-  "17289" -> "17287" 
-  "17297" -> "17295" 
-  "17299" -> "17298" 
-  "17304" -> "17303" 
-  "17309" -> "17307" 
-  "17317" -> "17315" 
-  "17319" -> "17318" 
-  "17324" -> "17323" 
-  "17329" -> "17327" 
-  "17337" -> "17335" 
-  "17339" -> "17338" 
-  "17344" -> "17343" 
-  "17349" -> "17347" 
-  "17358" -> "17357" 
-  "17365" -> "17363" 
-  "17367" -> "17366" 
-  "17372" -> "17371" 
-  "17377" -> "17375" 
-  "17386" -> "17385" 
-  "17393" -> "17391" 
-  "17395" -> "17394" 
-  "17400" -> "17399" 
-  "17405" -> "17403" 
-  "17413" -> "17412" 
-  "17194" -> "17192" 
-  "17207" -> "17205" 
-  "17360" -> "17358" 
-  "17388" -> "17386" 
-  "17415" -> "17413" 
-  "17185" -> "17194" 
+digraph "BogusMethod" {  
+"17421" [label = <(METHOD,BogusMethod)<SUB>1029</SUB>> ]
+"17423" [label = <(METHOD_RETURN,void)<SUB>1029</SUB>> ]
+  "17421" -> "17423" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/289-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/289-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/289-cfg.dot	2023-06-07 19:35:01.637387149 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/289-cfg.dot	2023-06-07 19:35:08.177386501 +0330
@@ -1,75 +1,11 @@
-digraph "NewObjectArrayBadArguments" {  
-"17423" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>600</SUB>> ]
-"17432" [label = <(&lt;operator&gt;.assignment,element_class = env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>603</SUB>> ]
-"17439" [label = <(ASSERT_NE,ASSERT_NE(element_class, nullptr))<SUB>604</SUB>> ]
-"17442" [label = <(NewObjectArray,env_-&gt;NewObjectArray(-1, element_class, nullptr))<SUB>606</SUB>> ]
-"17450" [label = <(Check,jni_abort_catcher.Check(check_jni ? &quot;negative jsize: -1&quot; : &quot;negative array length: -1&quot;))<SUB>607</SUB>> ]
-"17458" [label = <(NewObjectArray,env_-&gt;NewObjectArray(std::numeric_limits&lt;jint&gt;::min(), element_class, nullptr))<SUB>609</SUB>> ]
-"17474" [label = <(Check,jni_abort_catcher.Check(check_jni ? &quot;negative jsize: -2147483648&quot;\012 : &quot;negative array length: -2147483648&quot;))<SUB>610</SUB>> ]
-"17482" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>613</SUB>> ]
-"17425" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>600</SUB>> ]
-"17434" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>603</SUB>> ]
-"17443" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewObjectArray)<SUB>606</SUB>> ]
-"17446" [label = <(&lt;operator&gt;.minus,-1)<SUB>606</SUB>> ]
-"17451" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>607</SUB>> ]
-"17454" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;negative jsize: -1&quot; : &quot;negative array length: -1&quot;)<SUB>607</SUB>> ]
-"17459" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewObjectArray)<SUB>609</SUB>> ]
-"17462" [label = <(&lt;operator&gt;.greaterThan,std::numeric_limits&lt;jint&gt;::min())<SUB>609</SUB>> ]
-"17475" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>610</SUB>> ]
-"17478" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;negative jsize: -2147483648&quot;\012 : &quot;negative array length: -2147483648&quot;)<SUB>610</SUB>> ]
-"17484" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>613</SUB>> ]
-"17426" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>600</SUB>> ]
-"17435" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>603</SUB>> ]
-"17445" [label = <(FIELD_IDENTIFIER,NewObjectArray,NewObjectArray)<SUB>606</SUB>> ]
-"17453" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>607</SUB>> ]
-"17461" [label = <(FIELD_IDENTIFIER,NewObjectArray,NewObjectArray)<SUB>609</SUB>> ]
-"17463" [label = <(&lt;operator&gt;.lessThan,std::numeric_limits&lt;jint)<SUB>609</SUB>> ]
-"17468" [label = <(::min,::min())<SUB>609</SUB>> ]
-"17477" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>610</SUB>> ]
-"17485" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>613</SUB>> ]
-"17428" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>600</SUB>> ]
-"17437" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>603</SUB>> ]
-"17464" [label = <(&lt;operator&gt;.fieldAccess,std::numeric_limits)<SUB>609</SUB>> ]
-"17469" [label = <(&lt;operator&gt;.fieldAccess,::min)<SUB>609</SUB>> ]
-"17487" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>613</SUB>> ]
-"17466" [label = <(FIELD_IDENTIFIER,numeric_limits,numeric_limits)<SUB>609</SUB>> ]
-"17471" [label = <(FIELD_IDENTIFIER,min,min)<SUB>609</SUB>> ]
-"17419" [label = <(METHOD,NewObjectArrayBadArguments)<SUB>599</SUB>> ]
-"17489" [label = <(METHOD_RETURN,void)<SUB>599</SUB>> ]
-  "17423" -> "17437" 
-  "17432" -> "17439" 
-  "17439" -> "17445" 
-  "17442" -> "17453" 
-  "17450" -> "17461" 
-  "17458" -> "17477" 
-  "17474" -> "17487" 
-  "17482" -> "17489" 
-  "17425" -> "17423" 
-  "17434" -> "17432" 
-  "17443" -> "17446" 
-  "17446" -> "17442" 
-  "17451" -> "17454" 
-  "17454" -> "17450" 
-  "17459" -> "17466" 
-  "17462" -> "17458" 
-  "17475" -> "17478" 
-  "17478" -> "17474" 
-  "17484" -> "17482" 
-  "17426" -> "17425" 
-  "17435" -> "17434" 
-  "17445" -> "17443" 
-  "17453" -> "17451" 
-  "17461" -> "17459" 
-  "17463" -> "17471" 
-  "17468" -> "17462" 
-  "17477" -> "17475" 
-  "17485" -> "17484" 
-  "17428" -> "17426" 
-  "17437" -> "17435" 
-  "17464" -> "17463" 
-  "17469" -> "17468" 
-  "17487" -> "17485" 
-  "17466" -> "17464" 
-  "17471" -> "17469" 
-  "17419" -> "17428" 
+digraph "Java_MyClassNatives_foo_exit" {  
+"17489" [label = <(MonitorExit,env-&gt;MonitorExit(thisObj))<SUB>2358</SUB>> ]
+"17490" [label = <(&lt;operator&gt;.indirectFieldAccess,env-&gt;MonitorExit)<SUB>2358</SUB>> ]
+"17492" [label = <(FIELD_IDENTIFIER,MonitorExit,MonitorExit)<SUB>2358</SUB>> ]
+"17485" [label = <(METHOD,Java_MyClassNatives_foo_exit)<SUB>2356</SUB>> ]
+"17494" [label = <(METHOD_RETURN,void)<SUB>2356</SUB>> ]
+  "17489" -> "17494" 
+  "17490" -> "17489" 
+  "17492" -> "17490" 
+  "17485" -> "17492" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/29-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/29-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/29-cfg.dot	2023-06-07 19:35:01.357387176 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/29-cfg.dot	2023-06-07 19:35:07.927386526 +0330
@@ -1,144 +1,63 @@
-digraph "FindClass" {  
-"962" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(name))<SUB>572</SUB>> ]
-"981" [label = <(&lt;operator&gt;.assignment,* runtime = Runtime::Current())<SUB>573</SUB>> ]
-"988" [label = <(&lt;operator&gt;.assignment,* class_linker = runtime-&gt;GetClassLinker())<SUB>574</SUB>> ]
-"995" [label = <(descriptor,descriptor(NormalizeJniClassDescriptor(name)))<SUB>575</SUB>> ]
-"999" [label = <(soa,soa(env))<SUB>576</SUB>> ]
-"1001" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c = nullptr)<SUB>577</SUB>> ]
-"1072" [label = <(RETURN,return soa.AddLocalReference&lt;jclass&gt;(c);,return soa.AddLocalReference&lt;jclass&gt;(c);)<SUB>585</SUB>> ]
-"983" [label = <(Runtime::Current,Runtime::Current())<SUB>573</SUB>> ]
-"990" [label = <(GetClassLinker,runtime-&gt;GetClassLinker())<SUB>574</SUB>> ]
-"996" [label = <(NormalizeJniClassDescriptor,NormalizeJniClassDescriptor(name))<SUB>575</SUB>> ]
-"1002" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c)<SUB>577</SUB>> ]
-"1011" [label = <(IsStarted,runtime-&gt;IsStarted())<SUB>578</SUB>> ]
-"1073" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jclass&gt;(c))<SUB>585</SUB>> ]
-"984" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>573</SUB>> ]
-"991" [label = <(&lt;operator&gt;.indirectFieldAccess,runtime-&gt;GetClassLinker)<SUB>574</SUB>> ]
-"1003" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>577</SUB>> ]
-"1012" [label = <(&lt;operator&gt;.indirectFieldAccess,runtime-&gt;IsStarted)<SUB>578</SUB>> ]
-"1016" [label = <(&lt;operator&gt;.greaterThan,StackHandleScope&lt;1&gt; hs(soa.Self()))<SUB>579</SUB>> ]
-"1025" [label = <(&lt;operator&gt;.greaterThan,Handle&lt;mirror::ClassLoader&gt; class_loader(hs.NewHandle(GetClassLoader&lt;kEnableIndexIds&gt;(soa))))<SUB>580</SUB>> ]
-"1041" [label = <(&lt;operator&gt;.assignment,c = class_linker-&gt;FindClass(soa.Self(), descriptor.c_str(), class_loader))<SUB>581</SUB>> ]
-"1074" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jclass)<SUB>585</SUB>> ]
-"966" [label = <(UNLIKELY,UNLIKELY((name) == nullptr))<SUB>572</SUB>> ]
-"986" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>573</SUB>> ]
-"993" [label = <(FIELD_IDENTIFIER,GetClassLinker,GetClassLinker)<SUB>574</SUB>> ]
-"1005" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>577</SUB>> ]
-"1014" [label = <(FIELD_IDENTIFIER,IsStarted,IsStarted)<SUB>578</SUB>> ]
-"1017" [label = <(&lt;operator&gt;.lessThan,StackHandleScope&lt;1)<SUB>579</SUB>> ]
-"1020" [label = <(hs,hs(soa.Self()))<SUB>579</SUB>> ]
-"1026" [label = <(&lt;operator&gt;.lessThan,Handle&lt;mirror::ClassLoader)<SUB>580</SUB>> ]
-"1031" [label = <(class_loader,class_loader(hs.NewHandle(GetClassLoader&lt;kEnableIndexIds&gt;(soa))))<SUB>580</SUB>> ]
-"1043" [label = <(FindClass,class_linker-&gt;FindClass(soa.Self(), descriptor.c_str(), class_loader))<SUB>581</SUB>> ]
-"1058" [label = <(&lt;operator&gt;.assignment,c = class_linker-&gt;FindSystemClass(soa.Self(), descriptor.c_str()))<SUB>583</SUB>> ]
-"1075" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>585</SUB>> ]
-"967" [label = <(&lt;operator&gt;.equals,(name) == nullptr)<SUB>572</SUB>> ]
-"971" [label = <(CHECK_NON_NULL_ARGUMENT(name),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;name == null&quot;))<SUB>572</SUB>> ]
-"978" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(name),CHECK_NON_NULL_ARGUMENT(name))<SUB>572</SUB>> ]
-"1007" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>577</SUB>> ]
-"1021" [label = <(Self,soa.Self())<SUB>579</SUB>> ]
-"1028" [label = <(&lt;operator&gt;.fieldAccess,mirror::ClassLoader)<SUB>580</SUB>> ]
-"1032" [label = <(NewHandle,hs.NewHandle(GetClassLoader&lt;kEnableIndexIds&gt;(soa)))<SUB>580</SUB>> ]
-"1044" [label = <(&lt;operator&gt;.indirectFieldAccess,class_linker-&gt;FindClass)<SUB>581</SUB>> ]
-"1047" [label = <(Self,soa.Self())<SUB>581</SUB>> ]
-"1051" [label = <(c_str,descriptor.c_str())<SUB>581</SUB>> ]
-"1060" [label = <(FindSystemClass,class_linker-&gt;FindSystemClass(soa.Self(), descriptor.c_str()))<SUB>583</SUB>> ]
-"1077" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>585</SUB>> ]
-"972" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>572</SUB>> ]
-"1022" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>579</SUB>> ]
-"1030" [label = <(FIELD_IDENTIFIER,ClassLoader,ClassLoader)<SUB>580</SUB>> ]
-"1033" [label = <(&lt;operator&gt;.fieldAccess,hs.NewHandle)<SUB>580</SUB>> ]
-"1036" [label = <(&lt;operator&gt;.greaterThan,GetClassLoader&lt;kEnableIndexIds&gt;(soa))<SUB>580</SUB>> ]
-"1046" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>581</SUB>> ]
-"1048" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>581</SUB>> ]
-"1052" [label = <(&lt;operator&gt;.fieldAccess,descriptor.c_str)<SUB>581</SUB>> ]
-"1061" [label = <(&lt;operator&gt;.indirectFieldAccess,class_linker-&gt;FindSystemClass)<SUB>583</SUB>> ]
-"1064" [label = <(Self,soa.Self())<SUB>583</SUB>> ]
-"1068" [label = <(c_str,descriptor.c_str())<SUB>583</SUB>> ]
-"973" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>572</SUB>> ]
-"975" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>572</SUB>> ]
-"1024" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>579</SUB>> ]
-"1035" [label = <(FIELD_IDENTIFIER,NewHandle,NewHandle)<SUB>580</SUB>> ]
-"1037" [label = <(&lt;operator&gt;.lessThan,GetClassLoader&lt;kEnableIndexIds)<SUB>580</SUB>> ]
-"1050" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>581</SUB>> ]
-"1054" [label = <(FIELD_IDENTIFIER,c_str,c_str)<SUB>581</SUB>> ]
-"1063" [label = <(FIELD_IDENTIFIER,FindSystemClass,FindSystemClass)<SUB>583</SUB>> ]
-"1065" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>583</SUB>> ]
-"1069" [label = <(&lt;operator&gt;.fieldAccess,descriptor.c_str)<SUB>583</SUB>> ]
-"1067" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>583</SUB>> ]
-"1071" [label = <(FIELD_IDENTIFIER,c_str,c_str)<SUB>583</SUB>> ]
-"958" [label = <(METHOD,FindClass)<SUB>571</SUB>> ]
-"1080" [label = <(METHOD_RETURN,jclass)<SUB>571</SUB>> ]
-  "962" -> "967" 
-  "962" -> "986" 
-  "981" -> "993" 
-  "988" -> "996" 
-  "995" -> "999" 
-  "999" -> "1007" 
-  "1001" -> "1014" 
-  "1072" -> "1080" 
-  "983" -> "981" 
-  "990" -> "988" 
-  "996" -> "995" 
-  "1002" -> "1001" 
-  "1011" -> "1017" 
-  "1011" -> "1063" 
-  "1073" -> "1072" 
-  "984" -> "983" 
-  "991" -> "990" 
-  "1003" -> "1002" 
-  "1012" -> "1011" 
-  "1016" -> "1030" 
-  "1025" -> "1046" 
-  "1041" -> "1077" 
-  "1074" -> "1073" 
-  "966" -> "973" 
-  "966" -> "986" 
-  "986" -> "984" 
-  "993" -> "991" 
-  "1005" -> "1003" 
-  "1014" -> "1012" 
-  "1017" -> "1024" 
-  "1020" -> "1016" 
-  "1026" -> "1035" 
-  "1031" -> "1025" 
-  "1043" -> "1041" 
-  "1058" -> "1077" 
-  "1075" -> "1074" 
-  "967" -> "966" 
-  "971" -> "978" 
-  "978" -> "1080" 
-  "1007" -> "1005" 
-  "1021" -> "1020" 
-  "1028" -> "1026" 
-  "1032" -> "1031" 
-  "1044" -> "1050" 
-  "1047" -> "1054" 
-  "1051" -> "1043" 
-  "1060" -> "1058" 
-  "1077" -> "1075" 
-  "972" -> "971" 
-  "1022" -> "1021" 
-  "1030" -> "1028" 
-  "1033" -> "1037" 
-  "1036" -> "1032" 
-  "1046" -> "1044" 
-  "1048" -> "1047" 
-  "1052" -> "1051" 
-  "1061" -> "1067" 
-  "1064" -> "1071" 
-  "1068" -> "1060" 
-  "973" -> "975" 
-  "975" -> "972" 
-  "1024" -> "1022" 
-  "1035" -> "1033" 
-  "1037" -> "1036" 
-  "1050" -> "1048" 
-  "1054" -> "1052" 
-  "1063" -> "1061" 
-  "1065" -> "1064" 
-  "1069" -> "1068" 
-  "1067" -> "1065" 
-  "1071" -> "1069" 
-  "958" -> "962" 
+digraph "ToReflectedField" {  
+"1126" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(fid))<SUB>544</SUB>> ]
+"1145" [label = <(soa,soa(env))<SUB>545</SUB>> ]
+"1148" [label = <(&lt;operator&gt;.assignment,* f = jni::DecodeArtField(fid))<SUB>546</SUB>> ]
+"1155" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(\012        mirror::Field::CreateFromArtField&lt;kRuntimePointerSize&gt;(soa.Self(), f, true));,return soa.AddLocalReference&lt;jobject&gt;(\012        mirror::Field::CreateFromArtField&lt;kRuntimePointerSize&gt;(soa.Self(), f, true));)<SUB>547</SUB>> ]
+"1150" [label = <(jni::DecodeArtField,jni::DecodeArtField(fid))<SUB>546</SUB>> ]
+"1156" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(\012        mirror::Field::CreateFromArtField&lt;kRuntimePointerSize&gt;(soa.Self(), f, true)))<SUB>547</SUB>> ]
+"1151" [label = <(&lt;operator&gt;.fieldAccess,jni::DecodeArtField)<SUB>546</SUB>> ]
+"1157" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>547</SUB>> ]
+"1162" [label = <(&lt;operator&gt;.greaterThan,mirror::Field::CreateFromArtField&lt;kRuntimePointerSize&gt;(soa.Self(), f, true))<SUB>548</SUB>> ]
+"1130" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>544</SUB>> ]
+"1153" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>546</SUB>> ]
+"1158" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>547</SUB>> ]
+"1163" [label = <(&lt;operator&gt;.lessThan,mirror::Field::CreateFromArtField&lt;kRuntimePointerSize)<SUB>548</SUB>> ]
+"1170" [label = <(&lt;operator&gt;.bracketedPrimary,(soa.Self(), f, true))<SUB>548</SUB>> ]
+"1131" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>544</SUB>> ]
+"1135" [label = <(CHECK_NON_NULL_ARGUMENT(fid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>544</SUB>> ]
+"1142" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(fid),CHECK_NON_NULL_ARGUMENT(fid))<SUB>544</SUB>> ]
+"1160" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>547</SUB>> ]
+"1164" [label = <(&lt;operator&gt;.fieldAccess,mirror::Field::CreateFromArtField)<SUB>548</SUB>> ]
+"1171" [label = <(&lt;operator&gt;.expressionList,soa.Self(), f, true)<SUB>548</SUB>> ]
+"1136" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>544</SUB>> ]
+"1165" [label = <(&lt;operator&gt;.fieldAccess,mirror::Field)<SUB>548</SUB>> ]
+"1168" [label = <(FIELD_IDENTIFIER,CreateFromArtField,CreateFromArtField)<SUB>548</SUB>> ]
+"1172" [label = <(Self,soa.Self())<SUB>548</SUB>> ]
+"1137" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>544</SUB>> ]
+"1139" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>544</SUB>> ]
+"1173" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>548</SUB>> ]
+"1175" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>548</SUB>> ]
+"1120" [label = <(METHOD,ToReflectedField)<SUB>543</SUB>> ]
+"1178" [label = <(METHOD_RETURN,jobject)<SUB>543</SUB>> ]
+  "1126" -> "1131" 
+  "1126" -> "1145" 
+  "1145" -> "1153" 
+  "1148" -> "1160" 
+  "1155" -> "1178" 
+  "1150" -> "1148" 
+  "1156" -> "1155" 
+  "1151" -> "1150" 
+  "1157" -> "1165" 
+  "1162" -> "1156" 
+  "1130" -> "1137" 
+  "1130" -> "1145" 
+  "1153" -> "1151" 
+  "1158" -> "1157" 
+  "1163" -> "1175" 
+  "1170" -> "1162" 
+  "1131" -> "1130" 
+  "1135" -> "1142" 
+  "1142" -> "1178" 
+  "1160" -> "1158" 
+  "1164" -> "1163" 
+  "1171" -> "1170" 
+  "1136" -> "1135" 
+  "1165" -> "1168" 
+  "1168" -> "1164" 
+  "1172" -> "1171" 
+  "1137" -> "1139" 
+  "1139" -> "1136" 
+  "1173" -> "1172" 
+  "1175" -> "1173" 
+  "1120" -> "1126" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/290-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/290-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/290-cfg.dot	2023-06-07 19:35:01.637387149 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/290-cfg.dot	2023-06-07 19:35:08.177386501 +0330
@@ -1,270 +1,11 @@
-digraph "SetUpForTest" {  
-"17619" [label = <(&lt;operator&gt;.assignment,env_ = Thread::Current()-&gt;GetJniEnv())<SUB>640</SUB>> ]
-"17628" [label = <(&lt;operator&gt;.assignment,jklass_ = env_-&gt;FindClass(&quot;MyClassNatives&quot;))<SUB>641</SUB>> ]
-"17635" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(jklass_ != nullptr) &lt;&lt; method_name &lt;&lt; &quot; &quot; &lt;&lt; method_sig)<SUB>642</SUB>> ]
-"17668" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(jmethod_ != nullptr) &lt;&lt; method_name &lt;&lt; &quot; &quot; &lt;&lt; method_sig)<SUB>649</SUB>> ]
-"17714" [label = <(&lt;operator&gt;.assignment,constructor = env_-&gt;GetMethodID(jklass_, &quot;&lt;init&gt;&quot;, &quot;()V&quot;))<SUB>659</SUB>> ]
-"17723" [label = <(&lt;operator&gt;.assignment,jobj_ = env_-&gt;NewObject(jklass_, constructor))<SUB>660</SUB>> ]
-"17731" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(jobj_ != nullptr) &lt;&lt; method_name &lt;&lt; &quot; &quot; &lt;&lt; method_sig)<SUB>661</SUB>> ]
-"17498" [label = <(&lt;operator&gt;.logicalNot,!runtime_-&gt;IsStarted())<SUB>620</SUB>> ]
-"17621" [label = <(GetJniEnv,Thread::Current()-&gt;GetJniEnv())<SUB>640</SUB>> ]
-"17630" [label = <(FindClass,env_-&gt;FindClass(&quot;MyClassNatives&quot;))<SUB>641</SUB>> ]
-"17636" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(jklass_ != nullptr) &lt;&lt; method_name &lt;&lt; &quot; &quot;)<SUB>642</SUB>> ]
-"17669" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(jmethod_ != nullptr) &lt;&lt; method_name &lt;&lt; &quot; &quot;)<SUB>649</SUB>> ]
-"17679" [label = <(&lt;operator&gt;.notEquals,native_fnptr != nullptr)<SUB>651</SUB>> ]
-"17716" [label = <(GetMethodID,env_-&gt;GetMethodID(jklass_, &quot;&lt;init&gt;&quot;, &quot;()V&quot;))<SUB>659</SUB>> ]
-"17725" [label = <(NewObject,env_-&gt;NewObject(jklass_, constructor))<SUB>660</SUB>> ]
-"17732" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(jobj_ != nullptr) &lt;&lt; method_name &lt;&lt; &quot; &quot;)<SUB>661</SUB>> ]
-"17499" [label = <(IsStarted,runtime_-&gt;IsStarted())<SUB>620</SUB>> ]
-"17603" [label = <(TransitionFromSuspendedToRunnable,Thread::Current()-&gt;TransitionFromSuspendedToRunnable())<SUB>635</SUB>> ]
-"17611" [label = <(&lt;operator&gt;.assignment,started = runtime_-&gt;Start())<SUB>636</SUB>> ]
-"17617" [label = <(CHECK,CHECK(started))<SUB>637</SUB>> ]
-"17622" [label = <(&lt;operator&gt;.indirectFieldAccess,Thread::Current()-&gt;GetJniEnv)<SUB>640</SUB>> ]
-"17631" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>641</SUB>> ]
-"17637" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(jklass_ != nullptr) &lt;&lt; method_name)<SUB>642</SUB>> ]
-"17648" [label = <(&lt;operator&gt;.assignment,jmethod_ = env_-&gt;GetStaticMethodID(jklass_, method_name, method_sig))<SUB>645</SUB>> ]
-"17670" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(jmethod_ != nullptr) &lt;&lt; method_name)<SUB>649</SUB>> ]
-"17684" [label = <(&lt;operator&gt;.assignment,methods[] = { { method_name, method_sig, native_fnptr } })<SUB>652</SUB>> ]
-"17691" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_EQ(JNI_OK, env_-&gt;RegisterNatives(jklass_, methods, 1))\012 &lt;&lt; method_name &lt;&lt; &quot; &quot; &lt;&lt; method_sig)<SUB>653</SUB>> ]
-"17717" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetMethodID)<SUB>659</SUB>> ]
-"17726" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewObject)<SUB>660</SUB>> ]
-"17733" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(jobj_ != nullptr) &lt;&lt; method_name)<SUB>661</SUB>> ]
-"17500" [label = <(&lt;operator&gt;.indirectFieldAccess,runtime_-&gt;IsStarted)<SUB>620</SUB>> ]
-"17506" [label = <(soa,soa(Thread::Current()))<SUB>622</SUB>> ]
-"17511" [label = <(&lt;operator&gt;.assignment,class_loader_ = LoadDex(&quot;MyClassNatives&quot;))<SUB>623</SUB>> ]
-"17515" [label = <(&lt;operator&gt;.greaterThan,StackHandleScope&lt;1&gt; hs(soa.Self()))<SUB>624</SUB>> ]
-"17524" [label = <(&lt;operator&gt;.greaterThan,Handle&lt;mirror::ClassLoader&gt; loader(\012            hs.NewHandle(soa.Decode&lt;mirror::ClassLoader&gt;(class_loader_))))<SUB>625</SUB>> ]
-"17544" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c = class_linker_-&gt;FindClass(soa.Self(), &quot;LMyClassNatives;&quot;, loader))<SUB>627</SUB>> ]
-"17563" [label = <(&lt;operator&gt;.assignment,pointer_size = class_linker_-&gt;GetImagePointerSize())<SUB>628</SUB>> ]
-"17570" [label = <(&lt;operator&gt;.assignment,* method = c-&gt;FindClassMethod(method_name, method_sig, pointer_size))<SUB>629</SUB>> ]
-"17579" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(method != nullptr) &lt;&lt; method_name &lt;&lt; &quot; &quot; &lt;&lt; method_sig)<SUB>630</SUB>> ]
-"17589" [label = <(ASSERT_EQ,ASSERT_EQ(direct, method-&gt;IsDirect()))<SUB>631</SUB>> ]
-"17595" [label = <(SetEntryPointFromQuickCompiledCode,method-&gt;SetEntryPointFromQuickCompiledCode(class_linker_-&gt;GetRuntimeQuickGenericJniStub()))<SUB>632</SUB>> ]
-"17604" [label = <(&lt;operator&gt;.indirectFieldAccess,Thread::Current()-&gt;TransitionFromSuspendedToRunnable)<SUB>635</SUB>> ]
-"17613" [label = <(Start,runtime_-&gt;Start())<SUB>636</SUB>> ]
-"17623" [label = <(Thread::Current,Thread::Current())<SUB>640</SUB>> ]
-"17627" [label = <(FIELD_IDENTIFIER,GetJniEnv,GetJniEnv)<SUB>640</SUB>> ]
-"17633" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>641</SUB>> ]
-"17638" [label = <(ASSERT_TRUE,ASSERT_TRUE(jklass_ != nullptr))<SUB>642</SUB>> ]
-"17650" [label = <(GetStaticMethodID,env_-&gt;GetStaticMethodID(jklass_, method_name, method_sig))<SUB>645</SUB>> ]
-"17659" [label = <(&lt;operator&gt;.assignment,jmethod_ = env_-&gt;GetMethodID(jklass_, method_name, method_sig))<SUB>647</SUB>> ]
-"17671" [label = <(ASSERT_TRUE,ASSERT_TRUE(jmethod_ != nullptr))<SUB>649</SUB>> ]
-"17686" [label = <(&lt;operator&gt;.arrayInitializer,{ { method_name, method_sig, native_fnptr } })<SUB>652</SUB>> ]
-"17692" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_EQ(JNI_OK, env_-&gt;RegisterNatives(jklass_, methods, 1))\012 &lt;&lt; method_name &lt;&lt; &quot; &quot;)<SUB>653</SUB>> ]
-"17708" [label = <(UnregisterNatives,env_-&gt;UnregisterNatives(jklass_))<SUB>656</SUB>> ]
-"17719" [label = <(FIELD_IDENTIFIER,GetMethodID,GetMethodID)<SUB>659</SUB>> ]
-"17728" [label = <(FIELD_IDENTIFIER,NewObject,NewObject)<SUB>660</SUB>> ]
-"17734" [label = <(ASSERT_TRUE,ASSERT_TRUE(jobj_ != nullptr))<SUB>661</SUB>> ]
-"17502" [label = <(FIELD_IDENTIFIER,IsStarted,IsStarted)<SUB>620</SUB>> ]
-"17507" [label = <(Thread::Current,Thread::Current())<SUB>622</SUB>> ]
-"17513" [label = <(LoadDex,LoadDex(&quot;MyClassNatives&quot;))<SUB>623</SUB>> ]
-"17516" [label = <(&lt;operator&gt;.lessThan,StackHandleScope&lt;1)<SUB>624</SUB>> ]
-"17519" [label = <(hs,hs(soa.Self()))<SUB>624</SUB>> ]
-"17525" [label = <(&lt;operator&gt;.lessThan,Handle&lt;mirror::ClassLoader)<SUB>625</SUB>> ]
-"17530" [label = <(loader,loader(\012            hs.NewHandle(soa.Decode&lt;mirror::ClassLoader&gt;(class_loader_))))<SUB>625</SUB>> ]
-"17545" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c)<SUB>627</SUB>> ]
-"17552" [label = <(FindClass,class_linker_-&gt;FindClass(soa.Self(), &quot;LMyClassNatives;&quot;, loader))<SUB>627</SUB>> ]
-"17565" [label = <(GetImagePointerSize,class_linker_-&gt;GetImagePointerSize())<SUB>628</SUB>> ]
-"17572" [label = <(FindClassMethod,c-&gt;FindClassMethod(method_name, method_sig, pointer_size))<SUB>629</SUB>> ]
-"17580" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(method != nullptr) &lt;&lt; method_name &lt;&lt; &quot; &quot;)<SUB>630</SUB>> ]
-"17591" [label = <(IsDirect,method-&gt;IsDirect())<SUB>631</SUB>> ]
-"17596" [label = <(&lt;operator&gt;.indirectFieldAccess,method-&gt;SetEntryPointFromQuickCompiledCode)<SUB>632</SUB>> ]
-"17599" [label = <(GetRuntimeQuickGenericJniStub,class_linker_-&gt;GetRuntimeQuickGenericJniStub())<SUB>632</SUB>> ]
-"17605" [label = <(Thread::Current,Thread::Current())<SUB>635</SUB>> ]
-"17609" [label = <(FIELD_IDENTIFIER,TransitionFromSuspendedToRunnable,TransitionFromSuspendedToRunnable)<SUB>635</SUB>> ]
-"17614" [label = <(&lt;operator&gt;.indirectFieldAccess,runtime_-&gt;Start)<SUB>636</SUB>> ]
-"17624" [label = <(&lt;operator&gt;.fieldAccess,Thread::Current)<SUB>640</SUB>> ]
-"17639" [label = <(&lt;operator&gt;.notEquals,jklass_ != nullptr)<SUB>642</SUB>> ]
-"17651" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetStaticMethodID)<SUB>645</SUB>> ]
-"17661" [label = <(GetMethodID,env_-&gt;GetMethodID(jklass_, method_name, method_sig))<SUB>647</SUB>> ]
-"17672" [label = <(&lt;operator&gt;.notEquals,jmethod_ != nullptr)<SUB>649</SUB>> ]
-"17687" [label = <(&lt;operator&gt;.arrayInitializer,{ method_name, method_sig, native_fnptr })<SUB>652</SUB>> ]
-"17693" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_EQ(JNI_OK, env_-&gt;RegisterNatives(jklass_, methods, 1))\012 &lt;&lt; method_name)<SUB>653</SUB>> ]
-"17709" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;UnregisterNatives)<SUB>656</SUB>> ]
-"17735" [label = <(&lt;operator&gt;.notEquals,jobj_ != nullptr)<SUB>661</SUB>> ]
-"17508" [label = <(&lt;operator&gt;.fieldAccess,Thread::Current)<SUB>622</SUB>> ]
-"17520" [label = <(Self,soa.Self())<SUB>624</SUB>> ]
-"17527" [label = <(&lt;operator&gt;.fieldAccess,mirror::ClassLoader)<SUB>625</SUB>> ]
-"17531" [label = <(NewHandle,hs.NewHandle(soa.Decode&lt;mirror::ClassLoader&gt;(class_loader_)))<SUB>626</SUB>> ]
-"17546" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>627</SUB>> ]
-"17553" [label = <(&lt;operator&gt;.indirectFieldAccess,class_linker_-&gt;FindClass)<SUB>627</SUB>> ]
-"17556" [label = <(Self,soa.Self())<SUB>627</SUB>> ]
-"17566" [label = <(&lt;operator&gt;.indirectFieldAccess,class_linker_-&gt;GetImagePointerSize)<SUB>628</SUB>> ]
-"17573" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;FindClassMethod)<SUB>629</SUB>> ]
-"17581" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(method != nullptr) &lt;&lt; method_name)<SUB>630</SUB>> ]
-"17592" [label = <(&lt;operator&gt;.indirectFieldAccess,method-&gt;IsDirect)<SUB>631</SUB>> ]
-"17598" [label = <(FIELD_IDENTIFIER,SetEntryPointFromQuickCompiledCode,SetEntryPointFromQuickCompiledCode)<SUB>632</SUB>> ]
-"17600" [label = <(&lt;operator&gt;.indirectFieldAccess,class_linker_-&gt;GetRuntimeQuickGenericJniStub)<SUB>632</SUB>> ]
-"17606" [label = <(&lt;operator&gt;.fieldAccess,Thread::Current)<SUB>635</SUB>> ]
-"17616" [label = <(FIELD_IDENTIFIER,Start,Start)<SUB>636</SUB>> ]
-"17626" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>640</SUB>> ]
-"17653" [label = <(FIELD_IDENTIFIER,GetStaticMethodID,GetStaticMethodID)<SUB>645</SUB>> ]
-"17662" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetMethodID)<SUB>647</SUB>> ]
-"17694" [label = <(ASSERT_EQ,ASSERT_EQ(JNI_OK, env_-&gt;RegisterNatives(jklass_, methods, 1)))<SUB>653</SUB>> ]
-"17711" [label = <(FIELD_IDENTIFIER,UnregisterNatives,UnregisterNatives)<SUB>656</SUB>> ]
-"17510" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>622</SUB>> ]
-"17521" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>624</SUB>> ]
-"17529" [label = <(FIELD_IDENTIFIER,ClassLoader,ClassLoader)<SUB>625</SUB>> ]
-"17532" [label = <(&lt;operator&gt;.fieldAccess,hs.NewHandle)<SUB>626</SUB>> ]
-"17535" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::ClassLoader&gt;(class_loader_))<SUB>626</SUB>> ]
-"17548" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>627</SUB>> ]
-"17555" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>627</SUB>> ]
-"17557" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>627</SUB>> ]
-"17568" [label = <(FIELD_IDENTIFIER,GetImagePointerSize,GetImagePointerSize)<SUB>628</SUB>> ]
-"17575" [label = <(FIELD_IDENTIFIER,FindClassMethod,FindClassMethod)<SUB>629</SUB>> ]
-"17582" [label = <(ASSERT_TRUE,ASSERT_TRUE(method != nullptr))<SUB>630</SUB>> ]
-"17594" [label = <(FIELD_IDENTIFIER,IsDirect,IsDirect)<SUB>631</SUB>> ]
-"17602" [label = <(FIELD_IDENTIFIER,GetRuntimeQuickGenericJniStub,GetRuntimeQuickGenericJniStub)<SUB>632</SUB>> ]
-"17608" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>635</SUB>> ]
-"17664" [label = <(FIELD_IDENTIFIER,GetMethodID,GetMethodID)<SUB>647</SUB>> ]
-"17696" [label = <(RegisterNatives,env_-&gt;RegisterNatives(jklass_, methods, 1))<SUB>653</SUB>> ]
-"17523" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>624</SUB>> ]
-"17534" [label = <(FIELD_IDENTIFIER,NewHandle,NewHandle)<SUB>626</SUB>> ]
-"17536" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::ClassLoader)<SUB>626</SUB>> ]
-"17550" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>627</SUB>> ]
-"17559" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>627</SUB>> ]
-"17583" [label = <(&lt;operator&gt;.notEquals,method != nullptr)<SUB>630</SUB>> ]
-"17697" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;RegisterNatives)<SUB>653</SUB>> ]
-"17537" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>626</SUB>> ]
-"17540" [label = <(&lt;operator&gt;.fieldAccess,mirror::ClassLoader)<SUB>626</SUB>> ]
-"17699" [label = <(FIELD_IDENTIFIER,RegisterNatives,RegisterNatives)<SUB>653</SUB>> ]
-"17539" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>626</SUB>> ]
-"17542" [label = <(FIELD_IDENTIFIER,ClassLoader,ClassLoader)<SUB>626</SUB>> ]
-"17491" [label = <(METHOD,SetUpForTest)<SUB>616</SUB>> ]
-"17741" [label = <(METHOD_RETURN,void)<SUB>616</SUB>> ]
-  "17619" -> "17633" 
-  "17628" -> "17639" 
-  "17635" -> "17653" 
-  "17635" -> "17664" 
-  "17668" -> "17679" 
-  "17714" -> "17728" 
-  "17723" -> "17735" 
-  "17731" -> "17741" 
-  "17498" -> "17510" 
-  "17498" -> "17626" 
-  "17621" -> "17619" 
-  "17630" -> "17628" 
-  "17636" -> "17635" 
-  "17669" -> "17668" 
-  "17679" -> "17687" 
-  "17679" -> "17711" 
-  "17716" -> "17714" 
-  "17725" -> "17723" 
-  "17732" -> "17731" 
-  "17499" -> "17498" 
-  "17603" -> "17616" 
-  "17611" -> "17617" 
-  "17617" -> "17626" 
-  "17622" -> "17621" 
-  "17631" -> "17630" 
-  "17637" -> "17636" 
-  "17648" -> "17672" 
-  "17670" -> "17669" 
-  "17684" -> "17699" 
-  "17691" -> "17719" 
-  "17717" -> "17716" 
-  "17726" -> "17725" 
-  "17733" -> "17732" 
-  "17500" -> "17499" 
-  "17506" -> "17513" 
-  "17511" -> "17516" 
-  "17515" -> "17529" 
-  "17524" -> "17550" 
-  "17544" -> "17568" 
-  "17563" -> "17575" 
-  "17570" -> "17583" 
-  "17579" -> "17594" 
-  "17589" -> "17598" 
-  "17595" -> "17608" 
-  "17604" -> "17603" 
-  "17613" -> "17611" 
-  "17623" -> "17627" 
-  "17627" -> "17622" 
-  "17633" -> "17631" 
-  "17638" -> "17637" 
-  "17650" -> "17648" 
-  "17659" -> "17672" 
-  "17671" -> "17670" 
-  "17686" -> "17684" 
-  "17692" -> "17691" 
-  "17708" -> "17719" 
-  "17719" -> "17717" 
-  "17728" -> "17726" 
-  "17734" -> "17733" 
-  "17502" -> "17500" 
-  "17507" -> "17506" 
-  "17513" -> "17511" 
-  "17516" -> "17523" 
-  "17519" -> "17515" 
-  "17525" -> "17534" 
-  "17530" -> "17524" 
-  "17545" -> "17555" 
-  "17552" -> "17544" 
-  "17565" -> "17563" 
-  "17572" -> "17570" 
-  "17580" -> "17579" 
-  "17591" -> "17589" 
-  "17596" -> "17602" 
-  "17599" -> "17595" 
-  "17605" -> "17609" 
-  "17609" -> "17604" 
-  "17614" -> "17613" 
-  "17624" -> "17623" 
-  "17639" -> "17638" 
-  "17651" -> "17650" 
-  "17661" -> "17659" 
-  "17672" -> "17671" 
-  "17687" -> "17686" 
-  "17693" -> "17692" 
-  "17709" -> "17708" 
-  "17735" -> "17734" 
-  "17508" -> "17507" 
-  "17520" -> "17519" 
-  "17527" -> "17525" 
-  "17531" -> "17530" 
-  "17546" -> "17545" 
-  "17553" -> "17559" 
-  "17556" -> "17552" 
-  "17566" -> "17565" 
-  "17573" -> "17572" 
-  "17581" -> "17580" 
-  "17592" -> "17591" 
-  "17598" -> "17596" 
-  "17600" -> "17599" 
-  "17606" -> "17605" 
-  "17616" -> "17614" 
-  "17626" -> "17624" 
-  "17653" -> "17651" 
-  "17662" -> "17661" 
-  "17694" -> "17693" 
-  "17711" -> "17709" 
-  "17510" -> "17508" 
-  "17521" -> "17520" 
-  "17529" -> "17527" 
-  "17532" -> "17539" 
-  "17535" -> "17531" 
-  "17548" -> "17546" 
-  "17555" -> "17553" 
-  "17557" -> "17556" 
-  "17568" -> "17566" 
-  "17575" -> "17573" 
-  "17582" -> "17581" 
-  "17594" -> "17592" 
-  "17602" -> "17600" 
-  "17608" -> "17606" 
-  "17664" -> "17662" 
-  "17696" -> "17694" 
-  "17523" -> "17521" 
-  "17534" -> "17532" 
-  "17536" -> "17535" 
-  "17550" -> "17548" 
-  "17559" -> "17557" 
-  "17583" -> "17582" 
-  "17697" -> "17696" 
-  "17537" -> "17542" 
-  "17540" -> "17536" 
-  "17699" -> "17697" 
-  "17539" -> "17537" 
-  "17542" -> "17540" 
-  "17491" -> "17502" 
+digraph "Java_MyClassNatives_foo_enter_no_exit" {  
+"17501" [label = <(MonitorEnter,env-&gt;MonitorEnter(thisObj))<SUB>2375</SUB>> ]
+"17502" [label = <(&lt;operator&gt;.indirectFieldAccess,env-&gt;MonitorEnter)<SUB>2375</SUB>> ]
+"17504" [label = <(FIELD_IDENTIFIER,MonitorEnter,MonitorEnter)<SUB>2375</SUB>> ]
+"17497" [label = <(METHOD,Java_MyClassNatives_foo_enter_no_exit)<SUB>2373</SUB>> ]
+"17506" [label = <(METHOD_RETURN,void)<SUB>2373</SUB>> ]
+  "17501" -> "17506" 
+  "17502" -> "17501" 
+  "17504" -> "17502" 
+  "17497" -> "17504" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/291-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/291-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/291-cfg.dot	2023-06-07 19:35:01.637387149 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/291-cfg.dot	2023-06-07 19:35:08.177386501 +0330
@@ -1,25 +1,85 @@
-digraph "GetLocalsCapacity" {  
-"17766" [label = <(soa,soa(Thread::Current()))<SUB>936</SUB>> ]
-"17771" [label = <(RETURN,return reinterpret_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetLocalsCapacity();,return reinterpret_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetLocalsCapacity();)<SUB>937</SUB>> ]
-"17767" [label = <(Thread::Current,Thread::Current())<SUB>936</SUB>> ]
-"17772" [label = <(GetLocalsCapacity,reinterpret_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetLocalsCapacity())<SUB>937</SUB>> ]
-"17768" [label = <(&lt;operator&gt;.fieldAccess,Thread::Current)<SUB>936</SUB>> ]
-"17773" [label = <(&lt;operator&gt;.indirectFieldAccess,reinterpret_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetLocalsCapacity)<SUB>937</SUB>> ]
-"17770" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>936</SUB>> ]
-"17774" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;JNIEnvExt*&gt;(env))<SUB>937</SUB>> ]
-"17777" [label = <(FIELD_IDENTIFIER,GetLocalsCapacity,GetLocalsCapacity)<SUB>937</SUB>> ]
-"17775" [label = <(UNKNOWN,JNIEnvExt*,JNIEnvExt*)<SUB>937</SUB>> ]
-"17762" [label = <(METHOD,GetLocalsCapacity)<SUB>935</SUB>> ]
-"17778" [label = <(METHOD_RETURN,size_t)<SUB>935</SUB>> ]
-  "17766" -> "17775" 
-  "17771" -> "17778" 
-  "17767" -> "17766" 
-  "17772" -> "17771" 
-  "17768" -> "17767" 
-  "17773" -> "17772" 
-  "17770" -> "17768" 
-  "17774" -> "17777" 
-  "17777" -> "17773" 
-  "17775" -> "17774" 
-  "17762" -> "17770" 
+digraph "IsLocked" {  
+"17514" [label = <(soa,soa(env))<SUB>2391</SUB>> ]
+"17517" [label = <(&lt;operator&gt;.assignment,lock_word = soa.Decode&lt;mirror::Object&gt;(jobj)-&gt;GetLockWord(true))<SUB>2392</SUB>> ]
+"17519" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(jobj)-&gt;GetLockWord(true))<SUB>2392</SUB>> ]
+"17533" [label = <(GetState,lock_word.GetState())<SUB>2393</SUB>> ]
+"17520" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>2392</SUB>> ]
+"17527" [label = <(GetLockWord,(jobj)-&gt;GetLockWord(true))<SUB>2392</SUB>> ]
+"17534" [label = <(&lt;operator&gt;.fieldAccess,lock_word.GetState)<SUB>2393</SUB>> ]
+"17539" [label = <(&lt;operator&gt;.fieldAccess,LockWord::kHashCode)<SUB>2394</SUB>> ]
+"17543" [label = <(&lt;operator&gt;.fieldAccess,LockWord::kUnlocked)<SUB>2395</SUB>> ]
+"17546" [label = <(RETURN,return false;,return false;)<SUB>2396</SUB>> ]
+"17549" [label = <(&lt;operator&gt;.fieldAccess,LockWord::kThinLocked)<SUB>2397</SUB>> ]
+"17552" [label = <(RETURN,return true;,return true;)<SUB>2398</SUB>> ]
+"17555" [label = <(&lt;operator&gt;.fieldAccess,LockWord::kFatLocked)<SUB>2399</SUB>> ]
+"17558" [label = <(RETURN,return lock_word.FatLockMonitor()-&gt;IsLocked();,return lock_word.FatLockMonitor()-&gt;IsLocked();)<SUB>2400</SUB>> ]
+"17521" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2392</SUB>> ]
+"17524" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2392</SUB>> ]
+"17528" [label = <(&lt;operator&gt;.indirectFieldAccess,(jobj)-&gt;GetLockWord)<SUB>2392</SUB>> ]
+"17536" [label = <(FIELD_IDENTIFIER,GetState,GetState)<SUB>2393</SUB>> ]
+"17541" [label = <(FIELD_IDENTIFIER,kHashCode,kHashCode)<SUB>2394</SUB>> ]
+"17545" [label = <(FIELD_IDENTIFIER,kUnlocked,kUnlocked)<SUB>2395</SUB>> ]
+"17551" [label = <(FIELD_IDENTIFIER,kThinLocked,kThinLocked)<SUB>2397</SUB>> ]
+"17557" [label = <(FIELD_IDENTIFIER,kFatLocked,kFatLocked)<SUB>2399</SUB>> ]
+"17559" [label = <(IsLocked,lock_word.FatLockMonitor()-&gt;IsLocked())<SUB>2400</SUB>> ]
+"17568" [label = <(&lt;operator&gt;.shiftLeft,LOG(FATAL) &lt;&lt; &quot;Invalid monitor state &quot; &lt;&lt; lock_word.GetState())<SUB>2402</SUB>> ]
+"17577" [label = <(UNREACHABLE,UNREACHABLE())<SUB>2403</SUB>> ]
+"17523" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2392</SUB>> ]
+"17526" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2392</SUB>> ]
+"17530" [label = <(FIELD_IDENTIFIER,GetLockWord,GetLockWord)<SUB>2392</SUB>> ]
+"17560" [label = <(&lt;operator&gt;.indirectFieldAccess,lock_word.FatLockMonitor()-&gt;IsLocked)<SUB>2400</SUB>> ]
+"17569" [label = <(&lt;operator&gt;.shiftLeft,LOG(FATAL) &lt;&lt; &quot;Invalid monitor state &quot;)<SUB>2402</SUB>> ]
+"17573" [label = <(GetState,lock_word.GetState())<SUB>2402</SUB>> ]
+"17561" [label = <(FatLockMonitor,lock_word.FatLockMonitor())<SUB>2400</SUB>> ]
+"17565" [label = <(FIELD_IDENTIFIER,IsLocked,IsLocked)<SUB>2400</SUB>> ]
+"17570" [label = <(LOG,LOG(FATAL))<SUB>2402</SUB>> ]
+"17574" [label = <(&lt;operator&gt;.fieldAccess,lock_word.GetState)<SUB>2402</SUB>> ]
+"17562" [label = <(&lt;operator&gt;.fieldAccess,lock_word.FatLockMonitor)<SUB>2400</SUB>> ]
+"17576" [label = <(FIELD_IDENTIFIER,GetState,GetState)<SUB>2402</SUB>> ]
+"17564" [label = <(FIELD_IDENTIFIER,FatLockMonitor,FatLockMonitor)<SUB>2400</SUB>> ]
+"17509" [label = <(METHOD,IsLocked)<SUB>2390</SUB>> ]
+"17578" [label = <(METHOD_RETURN,bool)<SUB>2390</SUB>> ]
+  "17514" -> "17523" 
+  "17517" -> "17536" 
+  "17519" -> "17517" 
+  "17533" -> "17541" 
+  "17533" -> "17545" 
+  "17533" -> "17551" 
+  "17533" -> "17557" 
+  "17533" -> "17570" 
+  "17520" -> "17530" 
+  "17527" -> "17519" 
+  "17534" -> "17533" 
+  "17539" -> "17545" 
+  "17543" -> "17546" 
+  "17546" -> "17578" 
+  "17549" -> "17552" 
+  "17552" -> "17578" 
+  "17555" -> "17564" 
+  "17558" -> "17578" 
+  "17521" -> "17526" 
+  "17524" -> "17520" 
+  "17528" -> "17527" 
+  "17536" -> "17534" 
+  "17541" -> "17539" 
+  "17545" -> "17543" 
+  "17551" -> "17549" 
+  "17557" -> "17555" 
+  "17559" -> "17558" 
+  "17568" -> "17577" 
+  "17577" -> "17578" 
+  "17523" -> "17521" 
+  "17526" -> "17524" 
+  "17530" -> "17528" 
+  "17560" -> "17559" 
+  "17569" -> "17576" 
+  "17573" -> "17568" 
+  "17561" -> "17565" 
+  "17565" -> "17560" 
+  "17570" -> "17569" 
+  "17574" -> "17573" 
+  "17562" -> "17561" 
+  "17576" -> "17574" 
+  "17564" -> "17562" 
+  "17509" -> "17514" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/292-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/292-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/292-cfg.dot	2023-06-07 19:35:01.637387149 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/292-cfg.dot	2023-06-07 19:35:08.177386501 +0330
@@ -1,5 +1,15 @@
-digraph "BogusMethod" {  
-"17782" [label = <(METHOD,BogusMethod)<SUB>1030</SUB>> ]
-"17784" [label = <(METHOD_RETURN,void)<SUB>1030</SUB>> ]
-  "17782" -> "17784" 
+digraph "CountNewGlobalRef" {  
+"17595" [label = <(&lt;operator&gt;.preIncrement,++gGlobalRefCount)<SUB>2488</SUB>> ]
+"17597" [label = <(RETURN,return gOriginalEnv-&gt;NewGlobalRef(env, o);,return gOriginalEnv-&gt;NewGlobalRef(env, o);)<SUB>2489</SUB>> ]
+"17598" [label = <(NewGlobalRef,gOriginalEnv-&gt;NewGlobalRef(env, o))<SUB>2489</SUB>> ]
+"17599" [label = <(&lt;operator&gt;.indirectFieldAccess,gOriginalEnv-&gt;NewGlobalRef)<SUB>2489</SUB>> ]
+"17601" [label = <(FIELD_IDENTIFIER,NewGlobalRef,NewGlobalRef)<SUB>2489</SUB>> ]
+"17591" [label = <(METHOD,CountNewGlobalRef)<SUB>2487</SUB>> ]
+"17604" [label = <(METHOD_RETURN,jobject)<SUB>2487</SUB>> ]
+  "17595" -> "17601" 
+  "17597" -> "17604" 
+  "17598" -> "17597" 
+  "17599" -> "17598" 
+  "17601" -> "17599" 
+  "17591" -> "17595" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/293-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/293-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/293-cfg.dot	2023-06-07 19:35:01.637387149 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/293-cfg.dot	2023-06-07 19:35:08.177386501 +0330
@@ -1,11 +1,7 @@
-digraph "Java_MyClassNatives_foo_exit" {  
-"17851" [label = <(MonitorExit,env-&gt;MonitorExit(thisObj))<SUB>2467</SUB>> ]
-"17852" [label = <(&lt;operator&gt;.indirectFieldAccess,env-&gt;MonitorExit)<SUB>2467</SUB>> ]
-"17854" [label = <(FIELD_IDENTIFIER,MonitorExit,MonitorExit)<SUB>2467</SUB>> ]
-"17847" [label = <(METHOD,Java_MyClassNatives_foo_exit)<SUB>2465</SUB>> ]
-"17856" [label = <(METHOD_RETURN,void)<SUB>2465</SUB>> ]
-  "17851" -> "17856" 
-  "17852" -> "17851" 
-  "17854" -> "17852" 
-  "17847" -> "17854" 
+digraph "&lt;global&gt;" {  
+"17613" [label = <(UNKNOWN,namespace art {\012\012namespace gc {\012enum AllocatorType : char;\012} // namespace gc\012\012template&lt;class T&gt; class Handle;\012template&lt;class MirrorType&gt; class ObjPtr;\012class StringBuilderAppend;\012struct StringOffsets;\012class StubTest_ReadBarrierForRoot_Test;\012\012namespace mirror {\012\012// String Compression\012static constexpr bool kUseStringCompression = true;\012enum class StringCompressionFlag : uint32_t {\012    kCompressed = 0u,\012    kUncompressed = 1u\012};\012\012// C++ mirror of java.lang.String\012class MANAGED String final : public Object {\012 public:\012 // Size of java.lang.String.class.\012 static uint32_t ClassSize(PointerSize pointer_size);\012\012 // Size of an instance of java.lang.String not including its value array.\012 static constexpr uint32_t InstanceSize() {\012 return sizeof(String);\012 }\012\012 static constexpr MemberOffset CountOffset() {\012 return OFFSET_OF_OBJECT_MEMBER(String, count_);\012 }\012\012 static constexpr MemberOffset ValueOffset() {\012 return OFFSET_OF_OBJECT_MEMBER(String, value_);\012 }\012\012 uint16_t* GetValue() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return &amp;value_[0];\012 }\012\012 uint8_t* GetValueCompressed() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return &amp;value_compressed_[0];\012 }\012\012 template&lt;VerifyObjectFlags kVerifyFlags = kDefaultVerifyFlags&gt;\012 size_t SizeOf() REQUIRES_SHARED(Locks::mutator_lock_) {\012 size_t size = sizeof(String);\012 if (IsCompressed()) {\012      size += (sizeof(uint8_t) * GetLength&lt;kVerifyFlags&gt;());\012 } else {\012      size += (sizeof(uint16_t) * GetLength&lt;kVerifyFlags&gt;());\012 }\012 // String.equals() intrinsics assume zero-padding up to kObjectAlignment,\012 // so make sure the zero-padding is actually copied around if GC compaction\012 // chooses to copy only SizeOf() bytes.\012 // http://b/23528461\012 return RoundUp(size, kObjectAlignment);\012 }\012\012 // Taking out the first/uppermost bit because it is not part of actual length value\012 template&lt;VerifyObjectFlags kVerifyFlags = kDefaultVerifyFlags&gt;\012 int32_t GetLength() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return GetLengthFromCount(GetCount&lt;kVerifyFlags&gt;());\012 }\012\012 template&lt;VerifyObjectFlags kVerifyFlags = kDefaultVerifyFlags&gt;\012 int32_t GetCount() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return GetField32&lt;kVerifyFlags&gt;(OFFSET_OF_OBJECT_MEMBER(String, count_));\012 }\012\012 void SetCount(int32_t new_count) REQUIRES_SHARED(Locks::mutator_lock_) {\012 // Count is invariant so use non-transactional mode. Also disable check as we may run inside\012 // a transaction.\012 SetField32&lt;false, false&gt;(OFFSET_OF_OBJECT_MEMBER(String, count_), new_count);\012 }\012\012 int32_t GetHashCode() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // Computes, stores, and returns the hash code.\012 int32_t ComputeHashCode() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 int32_t GetUtfLength() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 uint16_t CharAt(int32_t index) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // Create a new string where all occurences of `old_c` are replaced with `new_c`.\012 // String.doReplace(char, char) is called from String.replace(char, char) when there is a match.\012 static ObjPtr&lt;String&gt; DoReplace(Thread* self, Handle&lt;String&gt; src, uint16_t old_c, uint16_t new_c)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 ObjPtr&lt;String&gt; Intern() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 template &lt;bool kIsInstrumented = true&gt;\012  ALWAYS_INLINE static ObjPtr&lt;String&gt; AllocFromByteArray(Thread* self,\012 int32_t byte_length,\012 Handle&lt;ByteArray&gt; array,\012 int32_t offset,\012 int32_t high_byte,\012                                                         gc::AllocatorType allocator_type)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 template &lt;bool kIsInstrumented = true&gt;\012  ALWAYS_INLINE static ObjPtr&lt;String&gt; AllocFromCharArray(Thread* self,\012 int32_t count,\012 Handle&lt;CharArray&gt; array,\012 int32_t offset,\012                                                         gc::AllocatorType allocator_type)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 template &lt;bool kIsInstrumented = true&gt;\012  ALWAYS_INLINE static ObjPtr&lt;String&gt; AllocFromString(Thread* self,\012 int32_t string_length,\012 Handle&lt;String&gt; string,\012 int32_t offset,\012                                                      gc::AllocatorType allocator_type)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 template &lt;bool kIsInstrumented = true&gt;\012  ALWAYS_INLINE static ObjPtr&lt;String&gt; AllocEmptyString(Thread* self,\012                                                       gc::AllocatorType allocator_type)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static ObjPtr&lt;String&gt; AllocFromStrings(Thread* self,\012 Handle&lt;String&gt; string,\012 Handle&lt;String&gt; string2)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static ObjPtr&lt;String&gt; AllocFromUtf16(Thread* self,\012 int32_t utf16_length,\012 const uint16_t* utf16_data_in)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static ObjPtr&lt;String&gt; AllocFromModifiedUtf8(Thread* self, const char* utf)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static ObjPtr&lt;String&gt; AllocFromModifiedUtf8(Thread* self,\012 int32_t utf16_length,\012 const char* utf8_data_in,\012 int32_t utf8_length)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static ObjPtr&lt;String&gt; AllocFromModifiedUtf8(Thread* self,\012 int32_t utf16_length,\012 const char* utf8_data_in)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 bool Equals(const char* modified_utf8) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 bool Equals(ObjPtr&lt;String&gt; that) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // Create a modified UTF-8 encoded std::string from a java/lang/String object.\012  std::string ToModifiedUtf8() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 int32_t FastIndexOf(int32_t ch, int32_t start) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 template &lt;typename MemoryType&gt;\012 int32_t FastIndexOf(MemoryType* chars, int32_t ch, int32_t start)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 int32_t CompareTo(ObjPtr&lt;String&gt; other) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 static ObjPtr&lt;CharArray&gt; ToCharArray(Handle&lt;String&gt; h_this, Thread* self)\012      REQUIRES_SHARED(Locks::mutator_lock_)\012      REQUIRES(!Roles::uninterruptible_);\012\012 void GetChars(int32_t start, int32_t end, Handle&lt;CharArray&gt; array, int32_t index)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 template&lt;VerifyObjectFlags kVerifyFlags = kDefaultVerifyFlags&gt;\012 bool IsCompressed() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return kUseStringCompression &amp;&amp; IsCompressed(GetCount());\012 }\012\012 bool IsValueNull() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 template&lt;typename MemoryType&gt;\012 static bool AllASCII(const MemoryType* chars, const int length);\012\012 static bool DexFileStringAllASCII(const char* chars, const int length);\012\012  ALWAYS_INLINE static bool IsCompressed(int32_t count) {\012 return GetCompressionFlagFromCount(count) == StringCompressionFlag::kCompressed;\012 }\012\012  ALWAYS_INLINE static StringCompressionFlag GetCompressionFlagFromCount(int32_t count) {\012 return kUseStringCompression\012 ? static_cast&lt;StringCompressionFlag&gt;(static_cast&lt;uint32_t&gt;(count) &amp; 1u)\012 : StringCompressionFlag::kUncompressed;\012 }\012\012  ALWAYS_INLINE static int32_t GetLengthFromCount(int32_t count) {\012 return kUseStringCompression ? static_cast&lt;int32_t&gt;(static_cast&lt;uint32_t&gt;(count) &gt;&gt; 1) : count;\012 }\012\012  ALWAYS_INLINE static int32_t GetFlaggedCount(int32_t length, bool compressible) {\012 return kUseStringCompression\012 ? static_cast&lt;int32_t&gt;((static_cast&lt;uint32_t&gt;(length) &lt;&lt; 1) |\012 (static_cast&lt;uint32_t&gt;(compressible\012 ? StringCompressionFlag::kCompressed\012 : StringCompressionFlag::kUncompressed)))\012 : length;\012 }\012\012 // Returns a human-readable equivalent of 'descriptor'. So &quot;I&quot; would be &quot;int&quot;,\012 // &quot;[[I&quot; would be &quot;int[][]&quot;, &quot;[Ljava/lang/String;&quot; would be\012 // &quot;java.lang.String[]&quot;, and so forth.\012 static std::string PrettyStringDescriptor(ObjPtr&lt;mirror::String&gt; descriptor)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012  std::string PrettyStringDescriptor()\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 private:\012 static constexpr bool IsASCII(uint16_t c) {\012 // Valid ASCII characters are in range 1..0x7f. Zero is not considered ASCII\012 // because it would complicate the detection of ASCII strings in Modified-UTF8.\012 return (c - 1u) &lt; 0x7fu;\012 }\012\012 static bool AllASCIIExcept(const uint16_t* chars, int32_t length, uint16_t non_ascii);\012\012 void SetHashCode(int32_t new_hash_code) REQUIRES_SHARED(Locks::mutator_lock_) {\012 // Hash code is invariant so use non-transactional mode. Also disable check as we may run inside\012 // a transaction.\012    DCHECK_EQ(0, GetField32(OFFSET_OF_OBJECT_MEMBER(String, hash_code_)));\012 SetField32&lt;false, false&gt;(OFFSET_OF_OBJECT_MEMBER(String, hash_code_), new_hash_code);\012 }\012\012 template &lt;bool kIsInstrumented = true, typename PreFenceVisitor&gt;\012  ALWAYS_INLINE static ObjPtr&lt;String&gt; Alloc(Thread* self,\012 int32_t utf16_length_with_flag,\012                                            gc::AllocatorType allocator_type,\012 const PreFenceVisitor&amp; pre_fence_visitor)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 // Field order required by test &quot;ValidateFieldOrderOfJavaCppUnionClasses&quot;.\012\012 // If string compression is enabled, count_ holds the StringCompressionFlag in the\012 // least significant bit and the length in the remaining bits, length = count_ &gt;&gt; 1.\012 int32_t count_;\012\012 uint32_t hash_code_;\012\012 // Compression of all-ASCII into 8-bit memory leads to usage one of these fields\012 union {\012 uint16_t value_[0];\012 uint8_t value_compressed_[0];\012 };\012\012 friend class art::StringBuilderAppend;\012 friend struct art::StringOffsets; // for verifying offset information\012\012  DISALLOW_IMPLICIT_CONSTRUCTORS(String);\012};\012\012} // namespace mirror\012},namespace art {\012\012namespace gc {\012enum AllocatorType : char;\012} // namespace gc\012\012template&lt;class T&gt; class Handle;\012template&lt;class MirrorType&gt; class ObjPtr;\012class StringBuilderAppend;\012struct StringOffsets;\012class StubTest_ReadBarrierForRoot_Test;\012\012namespace mirror {\012\012// String Compression\012static constexpr bool kUseStringCompression = true;\012enum class StringCompressionFlag : uint32_t {\012    kCompressed = 0u,\012    kUncompressed = 1u\012};\012\012// C++ mirror of java.lang.String\012class MANAGED String final : public Object {\012 public:\012 // Size of java.lang.String.class.\012 static uint32_t ClassSize(PointerSize pointer_size);\012\012 // Size of an instance of java.lang.String not including its value array.\012 static constexpr uint32_t InstanceSize() {\012 return sizeof(String);\012 }\012\012 static constexpr MemberOffset CountOffset() {\012 return OFFSET_OF_OBJECT_MEMBER(String, count_);\012 }\012\012 static constexpr MemberOffset ValueOffset() {\012 return OFFSET_OF_OBJECT_MEMBER(String, value_);\012 }\012\012 uint16_t* GetValue() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return &amp;value_[0];\012 }\012\012 uint8_t* GetValueCompressed() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return &amp;value_compressed_[0];\012 }\012\012 template&lt;VerifyObjectFlags kVerifyFlags = kDefaultVerifyFlags&gt;\012 size_t SizeOf() REQUIRES_SHARED(Locks::mutator_lock_) {\012 size_t size = sizeof(String);\012 if (IsCompressed()) {\012      size += (sizeof(uint8_t) * GetLength&lt;kVerifyFlags&gt;());\012 } else {\012      size += (sizeof(uint16_t) * GetLength&lt;kVerifyFlags&gt;());\012 }\012 // String.equals() intrinsics assume zero-padding up to kObjectAlignment,\012 // so make sure the zero-padding is actually copied around if GC compaction\012 // chooses to copy only SizeOf() bytes.\012 // http://b/23528461\012 return RoundUp(size, kObjectAlignment);\012 }\012\012 // Taking out the first/uppermost bit because it is not part of actual length value\012 template&lt;VerifyObjectFlags kVerifyFlags = kDefaultVerifyFlags&gt;\012 int32_t GetLength() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return GetLengthFromCount(GetCount&lt;kVerifyFlags&gt;());\012 }\012\012 template&lt;VerifyObjectFlags kVerifyFlags = kDefaultVerifyFlags&gt;\012 int32_t GetCount() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return GetField32&lt;kVerifyFlags&gt;(OFFSET_OF_OBJECT_MEMBER(String, count_));\012 }\012\012 void SetCount(int32_t new_count) REQUIRES_SHARED(Locks::mutator_lock_) {\012 // Count is invariant so use non-transactional mode. Also disable check as we may run inside\012 // a transaction.\012 SetField32&lt;false, false&gt;(OFFSET_OF_OBJECT_MEMBER(String, count_), new_count);\012 }\012\012 int32_t GetHashCode() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // Computes, stores, and returns the hash code.\012 int32_t ComputeHashCode() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 int32_t GetUtfLength() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 uint16_t CharAt(int32_t index) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // Create a new string where all occurences of `old_c` are replaced with `new_c`.\012 // String.doReplace(char, char) is called from String.replace(char, char) when there is a match.\012 static ObjPtr&lt;String&gt; DoReplace(Thread* self, Handle&lt;String&gt; src, uint16_t old_c, uint16_t new_c)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 ObjPtr&lt;String&gt; Intern() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 template &lt;bool kIsInstrumented = true&gt;\012  ALWAYS_INLINE static ObjPtr&lt;String&gt; AllocFromByteArray(Thread* self,\012 int32_t byte_length,\012 Handle&lt;ByteArray&gt; array,\012 int32_t offset,\012 int32_t high_byte,\012                                                         gc::AllocatorType allocator_type)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 template &lt;bool kIsInstrumented = true&gt;\012  ALWAYS_INLINE static ObjPtr&lt;String&gt; AllocFromCharArray(Thread* self,\012 int32_t count,\012 Handle&lt;CharArray&gt; array,\012 int32_t offset,\012                                                         gc::AllocatorType allocator_type)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 template &lt;bool kIsInstrumented = true&gt;\012  ALWAYS_INLINE static ObjPtr&lt;String&gt; AllocFromString(Thread* self,\012 int32_t string_length,\012 Handle&lt;String&gt; string,\012 int32_t offset,\012                                                      gc::AllocatorType allocator_type)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 template &lt;bool kIsInstrumented = true&gt;\012  ALWAYS_INLINE static ObjPtr&lt;String&gt; AllocEmptyString(Thread* self,\012                                                       gc::AllocatorType allocator_type)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static ObjPtr&lt;String&gt; AllocFromStrings(Thread* self,\012 Handle&lt;String&gt; string,\012 Handle&lt;String&gt; string2)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static ObjPtr&lt;String&gt; AllocFromUtf16(Thread* self,\012 int32_t utf16_length,\012 const uint16_t* utf16_data_in)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static ObjPtr&lt;String&gt; AllocFromModifiedUtf8(Thread* self, const char* utf)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static ObjPtr&lt;String&gt; AllocFromModifiedUtf8(Thread* self,\012 int32_t utf16_length,\012 const char* utf8_data_in,\012 int32_t utf8_length)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static ObjPtr&lt;String&gt; AllocFromModifiedUtf8(Thread* self,\012 int32_t utf16_length,\012 const char* utf8_data_in)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 bool Equals(const char* modified_utf8) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 bool Equals(ObjPtr&lt;String&gt; that) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // Create a modified UTF-8 encoded std::string from a java/lang/String object.\012  std::string ToModifiedUtf8() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 int32_t FastIndexOf(int32_t ch, int32_t start) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 template &lt;typename MemoryType&gt;\012 int32_t FastIndexOf(MemoryType* chars, int32_t ch, int32_t start)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 int32_t CompareTo(ObjPtr&lt;String&gt; other) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 static ObjPtr&lt;CharArray&gt; ToCharArray(Handle&lt;String&gt; h_this, Thread* self)\012      REQUIRES_SHARED(Locks::mutator_lock_)\012      REQUIRES(!Roles::uninterruptible_);\012\012 void GetChars(int32_t start, int32_t end, Handle&lt;CharArray&gt; array, int32_t index)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 template&lt;VerifyObjectFlags kVerifyFlags = kDefaultVerifyFlags&gt;\012 bool IsCompressed() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return kUseStringCompression &amp;&amp; IsCompressed(GetCount());\012 }\012\012 bool IsValueNull() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 template&lt;typename MemoryType&gt;\012 static bool AllASCII(const MemoryType* chars, const int length);\012\012 static bool DexFileStringAllASCII(const char* chars, const int length);\012\012  ALWAYS_INLINE static bool IsCompressed(int32_t count) {\012 return GetCompressionFlagFromCount(count) == StringCompressionFlag::kCompressed;\012 }\012\012  ALWAYS_INLINE static StringCompressionFlag GetCompressionFlagFromCount(int32_t count) {\012 return kUseStringCompression\012 ? static_cast&lt;StringCompressionFlag&gt;(static_cast&lt;uint32_t&gt;(count) &amp; 1u)\012 : StringCompressionFlag::kUncompressed;\012 }\012\012  ALWAYS_INLINE static int32_t GetLengthFromCount(int32_t count) {\012 return kUseStringCompression ? static_cast&lt;int32_t&gt;(static_cast&lt;uint32_t&gt;(count) &gt;&gt; 1) : count;\012 }\012\012  ALWAYS_INLINE static int32_t GetFlaggedCount(int32_t length, bool compressible) {\012 return kUseStringCompression\012 ? static_cast&lt;int32_t&gt;((static_cast&lt;uint32_t&gt;(length) &lt;&lt; 1) |\012 (static_cast&lt;uint32_t&gt;(compressible\012 ? StringCompressionFlag::kCompressed\012 : StringCompressionFlag::kUncompressed)))\012 : length;\012 }\012\012 // Returns a human-readable equivalent of 'descriptor'. So &quot;I&quot; would be &quot;int&quot;,\012 // &quot;[[I&quot; would be &quot;int[][]&quot;, &quot;[Ljava/lang/String;&quot; would be\012 // &quot;java.lang.String[]&quot;, and so forth.\012 static std::string PrettyStringDescriptor(ObjPtr&lt;mirror::String&gt; descriptor)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012  std::string PrettyStringDescriptor()\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 private:\012 static constexpr bool IsASCII(uint16_t c) {\012 // Valid ASCII characters are in range 1..0x7f. Zero is not considered ASCII\012 // because it would complicate the detection of ASCII strings in Modified-UTF8.\012 return (c - 1u) &lt; 0x7fu;\012 }\012\012 static bool AllASCIIExcept(const uint16_t* chars, int32_t length, uint16_t non_ascii);\012\012 void SetHashCode(int32_t new_hash_code) REQUIRES_SHARED(Locks::mutator_lock_) {\012 // Hash code is invariant so use non-transactional mode. Also disable check as we may run inside\012 // a transaction.\012    DCHECK_EQ(0, GetField32(OFFSET_OF_OBJECT_MEMBER(String, hash_code_)));\012 SetField32&lt;false, false&gt;(OFFSET_OF_OBJECT_MEMBER(String, hash_code_), new_hash_code);\012 }\012\012 template &lt;bool kIsInstrumented = true, typename PreFenceVisitor&gt;\012  ALWAYS_INLINE static ObjPtr&lt;String&gt; Alloc(Thread* self,\012 int32_t utf16_length_with_flag,\012                                            gc::AllocatorType allocator_type,\012 const PreFenceVisitor&amp; pre_fence_visitor)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 // Field order required by test &quot;ValidateFieldOrderOfJavaCppUnionClasses&quot;.\012\012 // If string compression is enabled, count_ holds the StringCompressionFlag in the\012 // least significant bit and the length in the remaining bits, length = count_ &gt;&gt; 1.\012 int32_t count_;\012\012 uint32_t hash_code_;\012\012 // Compression of all-ASCII into 8-bit memory leads to usage one of these fields\012 union {\012 uint16_t value_[0];\012 uint8_t value_compressed_[0];\012 };\012\012 friend class art::StringBuilderAppend;\012 friend struct art::StringOffsets; // for verifying offset information\012\012  DISALLOW_IMPLICIT_CONSTRUCTORS(String);\012};\012\012} // namespace mirror\012})<SUB>25</SUB>> ]
+"17611" [label = <(METHOD,&lt;global&gt;)<SUB>1</SUB>> ]
+"17614" [label = <(METHOD_RETURN,ANY)<SUB>1</SUB>> ]
+  "17613" -> "17614" 
+  "17611" -> "17613" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/294-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/294-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/294-cfg.dot	2023-06-07 19:35:01.637387149 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/294-cfg.dot	2023-06-07 19:35:08.177386501 +0330
@@ -1,11 +1,5 @@
-digraph "Java_MyClassNatives_foo_enter_no_exit" {  
-"17863" [label = <(MonitorEnter,env-&gt;MonitorEnter(thisObj))<SUB>2484</SUB>> ]
-"17864" [label = <(&lt;operator&gt;.indirectFieldAccess,env-&gt;MonitorEnter)<SUB>2484</SUB>> ]
-"17866" [label = <(FIELD_IDENTIFIER,MonitorEnter,MonitorEnter)<SUB>2484</SUB>> ]
-"17859" [label = <(METHOD,Java_MyClassNatives_foo_enter_no_exit)<SUB>2482</SUB>> ]
-"17868" [label = <(METHOD_RETURN,void)<SUB>2482</SUB>> ]
-  "17863" -> "17868" 
-  "17864" -> "17863" 
-  "17866" -> "17864" 
-  "17859" -> "17866" 
+digraph "va_end" {  
+"17918" [label = <(METHOD,va_end)> ]
+"17921" [label = <(METHOD_RETURN,ANY)> ]
+  "17918" -> "17921" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/295-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/295-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/295-cfg.dot	2023-06-07 19:35:01.637387149 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/295-cfg.dot	2023-06-07 19:35:08.177386501 +0330
@@ -1,85 +1,5 @@
-digraph "IsLocked" {  
-"17876" [label = <(soa,soa(env))<SUB>2500</SUB>> ]
-"17879" [label = <(&lt;operator&gt;.assignment,lock_word = soa.Decode&lt;mirror::Object&gt;(jobj)-&gt;GetLockWord(true))<SUB>2501</SUB>> ]
-"17881" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(jobj)-&gt;GetLockWord(true))<SUB>2501</SUB>> ]
-"17895" [label = <(GetState,lock_word.GetState())<SUB>2502</SUB>> ]
-"17882" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>2501</SUB>> ]
-"17889" [label = <(GetLockWord,(jobj)-&gt;GetLockWord(true))<SUB>2501</SUB>> ]
-"17896" [label = <(&lt;operator&gt;.fieldAccess,lock_word.GetState)<SUB>2502</SUB>> ]
-"17901" [label = <(&lt;operator&gt;.fieldAccess,LockWord::kHashCode)<SUB>2503</SUB>> ]
-"17905" [label = <(&lt;operator&gt;.fieldAccess,LockWord::kUnlocked)<SUB>2504</SUB>> ]
-"17908" [label = <(RETURN,return false;,return false;)<SUB>2505</SUB>> ]
-"17911" [label = <(&lt;operator&gt;.fieldAccess,LockWord::kThinLocked)<SUB>2506</SUB>> ]
-"17914" [label = <(RETURN,return true;,return true;)<SUB>2507</SUB>> ]
-"17917" [label = <(&lt;operator&gt;.fieldAccess,LockWord::kFatLocked)<SUB>2508</SUB>> ]
-"17920" [label = <(RETURN,return lock_word.FatLockMonitor()-&gt;IsLocked();,return lock_word.FatLockMonitor()-&gt;IsLocked();)<SUB>2509</SUB>> ]
-"17883" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2501</SUB>> ]
-"17886" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2501</SUB>> ]
-"17890" [label = <(&lt;operator&gt;.indirectFieldAccess,(jobj)-&gt;GetLockWord)<SUB>2501</SUB>> ]
-"17898" [label = <(FIELD_IDENTIFIER,GetState,GetState)<SUB>2502</SUB>> ]
-"17903" [label = <(FIELD_IDENTIFIER,kHashCode,kHashCode)<SUB>2503</SUB>> ]
-"17907" [label = <(FIELD_IDENTIFIER,kUnlocked,kUnlocked)<SUB>2504</SUB>> ]
-"17913" [label = <(FIELD_IDENTIFIER,kThinLocked,kThinLocked)<SUB>2506</SUB>> ]
-"17919" [label = <(FIELD_IDENTIFIER,kFatLocked,kFatLocked)<SUB>2508</SUB>> ]
-"17921" [label = <(IsLocked,lock_word.FatLockMonitor()-&gt;IsLocked())<SUB>2509</SUB>> ]
-"17930" [label = <(&lt;operator&gt;.shiftLeft,LOG(FATAL) &lt;&lt; &quot;Invalid monitor state &quot; &lt;&lt; lock_word.GetState())<SUB>2511</SUB>> ]
-"17939" [label = <(UNREACHABLE,UNREACHABLE())<SUB>2512</SUB>> ]
-"17885" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2501</SUB>> ]
-"17888" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2501</SUB>> ]
-"17892" [label = <(FIELD_IDENTIFIER,GetLockWord,GetLockWord)<SUB>2501</SUB>> ]
-"17922" [label = <(&lt;operator&gt;.indirectFieldAccess,lock_word.FatLockMonitor()-&gt;IsLocked)<SUB>2509</SUB>> ]
-"17931" [label = <(&lt;operator&gt;.shiftLeft,LOG(FATAL) &lt;&lt; &quot;Invalid monitor state &quot;)<SUB>2511</SUB>> ]
-"17935" [label = <(GetState,lock_word.GetState())<SUB>2511</SUB>> ]
-"17923" [label = <(FatLockMonitor,lock_word.FatLockMonitor())<SUB>2509</SUB>> ]
-"17927" [label = <(FIELD_IDENTIFIER,IsLocked,IsLocked)<SUB>2509</SUB>> ]
-"17932" [label = <(LOG,LOG(FATAL))<SUB>2511</SUB>> ]
-"17936" [label = <(&lt;operator&gt;.fieldAccess,lock_word.GetState)<SUB>2511</SUB>> ]
-"17924" [label = <(&lt;operator&gt;.fieldAccess,lock_word.FatLockMonitor)<SUB>2509</SUB>> ]
-"17938" [label = <(FIELD_IDENTIFIER,GetState,GetState)<SUB>2511</SUB>> ]
-"17926" [label = <(FIELD_IDENTIFIER,FatLockMonitor,FatLockMonitor)<SUB>2509</SUB>> ]
-"17871" [label = <(METHOD,IsLocked)<SUB>2499</SUB>> ]
-"17940" [label = <(METHOD_RETURN,bool)<SUB>2499</SUB>> ]
-  "17876" -> "17885" 
-  "17879" -> "17898" 
-  "17881" -> "17879" 
-  "17895" -> "17903" 
-  "17895" -> "17907" 
-  "17895" -> "17913" 
-  "17895" -> "17919" 
-  "17895" -> "17932" 
-  "17882" -> "17892" 
-  "17889" -> "17881" 
-  "17896" -> "17895" 
-  "17901" -> "17907" 
-  "17905" -> "17908" 
-  "17908" -> "17940" 
-  "17911" -> "17914" 
-  "17914" -> "17940" 
-  "17917" -> "17926" 
-  "17920" -> "17940" 
-  "17883" -> "17888" 
-  "17886" -> "17882" 
-  "17890" -> "17889" 
-  "17898" -> "17896" 
-  "17903" -> "17901" 
-  "17907" -> "17905" 
-  "17913" -> "17911" 
-  "17919" -> "17917" 
-  "17921" -> "17920" 
-  "17930" -> "17939" 
-  "17939" -> "17940" 
-  "17885" -> "17883" 
-  "17888" -> "17886" 
-  "17892" -> "17890" 
-  "17922" -> "17921" 
-  "17931" -> "17938" 
-  "17935" -> "17930" 
-  "17923" -> "17927" 
-  "17927" -> "17922" 
-  "17932" -> "17931" 
-  "17936" -> "17935" 
-  "17924" -> "17923" 
-  "17938" -> "17936" 
-  "17926" -> "17924" 
-  "17871" -> "17876" 
+digraph "&lt;operator&gt;.indirection" {  
+"17922" [label = <(METHOD,&lt;operator&gt;.indirection)> ]
+"17925" [label = <(METHOD_RETURN,ANY)> ]
+  "17922" -> "17925" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/296-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/296-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/296-cfg.dot	2023-06-07 19:35:01.637387149 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/296-cfg.dot	2023-06-07 19:35:08.177386501 +0330
@@ -1,15 +1,5 @@
-digraph "CountNewGlobalRef" {  
-"17957" [label = <(&lt;operator&gt;.preIncrement,++gGlobalRefCount)<SUB>2597</SUB>> ]
-"17959" [label = <(RETURN,return gOriginalEnv-&gt;NewGlobalRef(env, o);,return gOriginalEnv-&gt;NewGlobalRef(env, o);)<SUB>2598</SUB>> ]
-"17960" [label = <(NewGlobalRef,gOriginalEnv-&gt;NewGlobalRef(env, o))<SUB>2598</SUB>> ]
-"17961" [label = <(&lt;operator&gt;.indirectFieldAccess,gOriginalEnv-&gt;NewGlobalRef)<SUB>2598</SUB>> ]
-"17963" [label = <(FIELD_IDENTIFIER,NewGlobalRef,NewGlobalRef)<SUB>2598</SUB>> ]
-"17953" [label = <(METHOD,CountNewGlobalRef)<SUB>2596</SUB>> ]
-"17966" [label = <(METHOD_RETURN,jobject)<SUB>2596</SUB>> ]
-  "17957" -> "17963" 
-  "17959" -> "17966" 
-  "17960" -> "17959" 
-  "17961" -> "17960" 
-  "17963" -> "17961" 
-  "17953" -> "17957" 
+digraph "&lt;operator&gt;.assignment" {  
+"17926" [label = <(METHOD,&lt;operator&gt;.assignment)> ]
+"17930" [label = <(METHOD_RETURN,ANY)> ]
+  "17926" -> "17930" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/297-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/297-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/297-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/297-cfg.dot	2023-06-07 19:35:08.177386501 +0330
@@ -1,7 +1,5 @@
-digraph "&lt;global&gt;" {  
-"17975" [label = <(UNKNOWN,namespace art {\012\012namespace gc {\012enum AllocatorType : char;\012} // namespace gc\012\012template&lt;class T&gt; class Handle;\012template&lt;class MirrorType&gt; class ObjPtr;\012class StringBuilderAppend;\012struct StringOffsets;\012class StubTest_ReadBarrierForRoot_Test;\012\012namespace mirror {\012\012// String Compression\012static constexpr bool kUseStringCompression = true;\012enum class StringCompressionFlag : uint32_t {\012    kCompressed = 0u,\012    kUncompressed = 1u\012};\012\012// C++ mirror of java.lang.String\012class MANAGED String final : public Object {\012 public:\012 // Size of java.lang.String.class.\012 static uint32_t ClassSize(PointerSize pointer_size);\012\012 // Size of an instance of java.lang.String not including its value array.\012 static constexpr uint32_t InstanceSize() {\012 return sizeof(String);\012 }\012\012 static constexpr MemberOffset CountOffset() {\012 return OFFSET_OF_OBJECT_MEMBER(String, count_);\012 }\012\012 static constexpr MemberOffset ValueOffset() {\012 return OFFSET_OF_OBJECT_MEMBER(String, value_);\012 }\012\012 uint16_t* GetValue() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return &amp;value_[0];\012 }\012\012 uint8_t* GetValueCompressed() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return &amp;value_compressed_[0];\012 }\012\012 template&lt;VerifyObjectFlags kVerifyFlags = kDefaultVerifyFlags&gt;\012 size_t SizeOf() REQUIRES_SHARED(Locks::mutator_lock_) {\012 size_t size = sizeof(String);\012 if (IsCompressed()) {\012      size += (sizeof(uint8_t) * GetLength&lt;kVerifyFlags&gt;());\012 } else {\012      size += (sizeof(uint16_t) * GetLength&lt;kVerifyFlags&gt;());\012 }\012 // String.equals() intrinsics assume zero-padding up to kObjectAlignment,\012 // so make sure the zero-padding is actually copied around if GC compaction\012 // chooses to copy only SizeOf() bytes.\012 // http://b/23528461\012 return RoundUp(size, kObjectAlignment);\012 }\012\012 // Taking out the first/uppermost bit because it is not part of actual length value\012 template&lt;VerifyObjectFlags kVerifyFlags = kDefaultVerifyFlags&gt;\012 int32_t GetLength() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return GetLengthFromCount(GetCount&lt;kVerifyFlags&gt;());\012 }\012\012 template&lt;VerifyObjectFlags kVerifyFlags = kDefaultVerifyFlags&gt;\012 int32_t GetCount() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return GetField32&lt;kVerifyFlags&gt;(OFFSET_OF_OBJECT_MEMBER(String, count_));\012 }\012\012 void SetCount(int32_t new_count) REQUIRES_SHARED(Locks::mutator_lock_) {\012 // Count is invariant so use non-transactional mode. Also disable check as we may run inside\012 // a transaction.\012 SetField32&lt;false, false&gt;(OFFSET_OF_OBJECT_MEMBER(String, count_), new_count);\012 }\012\012 int32_t GetHashCode() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // Computes, stores, and returns the hash code.\012 int32_t ComputeHashCode() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 int32_t GetUtfLength() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 uint16_t CharAt(int32_t index) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // Create a new string where all occurences of `old_c` are replaced with `new_c`.\012 // String.doReplace(char, char) is called from String.replace(char, char) when there is a match.\012 static ObjPtr&lt;String&gt; DoReplace(Thread* self, Handle&lt;String&gt; src, uint16_t old_c, uint16_t new_c)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 ObjPtr&lt;String&gt; Intern() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 template &lt;bool kIsInstrumented = true&gt;\012  ALWAYS_INLINE static ObjPtr&lt;String&gt; AllocFromByteArray(Thread* self,\012 int32_t byte_length,\012 Handle&lt;ByteArray&gt; array,\012 int32_t offset,\012 int32_t high_byte,\012                                                         gc::AllocatorType allocator_type)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 template &lt;bool kIsInstrumented = true&gt;\012  ALWAYS_INLINE static ObjPtr&lt;String&gt; AllocFromCharArray(Thread* self,\012 int32_t count,\012 Handle&lt;CharArray&gt; array,\012 int32_t offset,\012                                                         gc::AllocatorType allocator_type)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 template &lt;bool kIsInstrumented = true&gt;\012  ALWAYS_INLINE static ObjPtr&lt;String&gt; AllocFromString(Thread* self,\012 int32_t string_length,\012 Handle&lt;String&gt; string,\012 int32_t offset,\012                                                      gc::AllocatorType allocator_type)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 template &lt;bool kIsInstrumented = true&gt;\012  ALWAYS_INLINE static ObjPtr&lt;String&gt; AllocEmptyString(Thread* self,\012                                                       gc::AllocatorType allocator_type)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static ObjPtr&lt;String&gt; AllocFromStrings(Thread* self,\012 Handle&lt;String&gt; string,\012 Handle&lt;String&gt; string2)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static ObjPtr&lt;String&gt; AllocFromUtf16(Thread* self,\012 int32_t utf16_length,\012 const uint16_t* utf16_data_in)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static ObjPtr&lt;String&gt; AllocFromModifiedUtf8(Thread* self, const char* utf)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static ObjPtr&lt;String&gt; AllocFromModifiedUtf8(Thread* self,\012 int32_t utf16_length,\012 const char* utf8_data_in,\012 int32_t utf8_length)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static ObjPtr&lt;String&gt; AllocFromModifiedUtf8(Thread* self,\012 int32_t utf16_length,\012 const char* utf8_data_in)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 bool Equals(const char* modified_utf8) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 bool Equals(ObjPtr&lt;String&gt; that) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // Create a modified UTF-8 encoded std::string from a java/lang/String object.\012  std::string ToModifiedUtf8() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 int32_t FastIndexOf(int32_t ch, int32_t start) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 template &lt;typename MemoryType&gt;\012 int32_t FastIndexOf(MemoryType* chars, int32_t ch, int32_t start)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 int32_t CompareTo(ObjPtr&lt;String&gt; other) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 static ObjPtr&lt;CharArray&gt; ToCharArray(Handle&lt;String&gt; h_this, Thread* self)\012      REQUIRES_SHARED(Locks::mutator_lock_)\012      REQUIRES(!Roles::uninterruptible_);\012\012 void GetChars(int32_t start, int32_t end, Handle&lt;CharArray&gt; array, int32_t index)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 template&lt;VerifyObjectFlags kVerifyFlags = kDefaultVerifyFlags&gt;\012 bool IsCompressed() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return kUseStringCompression &amp;&amp; IsCompressed(GetCount());\012 }\012\012 bool IsValueNull() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 template&lt;typename MemoryType&gt;\012 static bool AllASCII(const MemoryType* chars, const int length);\012\012 static bool DexFileStringAllASCII(const char* chars, const int length);\012\012  ALWAYS_INLINE static bool IsCompressed(int32_t count) {\012 return GetCompressionFlagFromCount(count) == StringCompressionFlag::kCompressed;\012 }\012\012  ALWAYS_INLINE static StringCompressionFlag GetCompressionFlagFromCount(int32_t count) {\012 return kUseStringCompression\012 ? static_cast&lt;StringCompressionFlag&gt;(static_cast&lt;uint32_t&gt;(count) &amp; 1u)\012 : StringCompressionFlag::kUncompressed;\012 }\012\012  ALWAYS_INLINE static int32_t GetLengthFromCount(int32_t count) {\012 return kUseStringCompression ? static_cast&lt;int32_t&gt;(static_cast&lt;uint32_t&gt;(count) &gt;&gt; 1) : count;\012 }\012\012  ALWAYS_INLINE static int32_t GetFlaggedCount(int32_t length, bool compressible) {\012 return kUseStringCompression\012 ? static_cast&lt;int32_t&gt;((static_cast&lt;uint32_t&gt;(length) &lt;&lt; 1) |\012 (static_cast&lt;uint32_t&gt;(compressible\012 ? StringCompressionFlag::kCompressed\012 : StringCompressionFlag::kUncompressed)))\012 : length;\012 }\012\012 // Returns a human-readable equivalent of 'descriptor'. So &quot;I&quot; would be &quot;int&quot;,\012 // &quot;[[I&quot; would be &quot;int[][]&quot;, &quot;[Ljava/lang/String;&quot; would be\012 // &quot;java.lang.String[]&quot;, and so forth.\012 static std::string PrettyStringDescriptor(ObjPtr&lt;mirror::String&gt; descriptor)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012  std::string PrettyStringDescriptor()\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 static constexpr bool IsASCII(uint16_t c) {\012 // Valid ASCII characters are in range 1..0x7f. Zero is not considered ASCII\012 // because it would complicate the detection of ASCII strings in Modified-UTF8.\012 return (c - 1u) &lt; 0x7fu;\012 }\012\012 private:\012 static bool AllASCIIExcept(const uint16_t* chars, int32_t length, uint16_t non_ascii);\012\012 void SetHashCode(int32_t new_hash_code) REQUIRES_SHARED(Locks::mutator_lock_) {\012 // Hash code is invariant so use non-transactional mode. Also disable check as we may run inside\012 // a transaction.\012    DCHECK_EQ(0, GetField32(OFFSET_OF_OBJECT_MEMBER(String, hash_code_)));\012 SetField32&lt;false, false&gt;(OFFSET_OF_OBJECT_MEMBER(String, hash_code_), new_hash_code);\012 }\012\012 template &lt;bool kIsInstrumented = true, typename PreFenceVisitor&gt;\012  ALWAYS_INLINE static ObjPtr&lt;String&gt; Alloc(Thread* self,\012 int32_t utf16_length_with_flag,\012                                            gc::AllocatorType allocator_type,\012 const PreFenceVisitor&amp; pre_fence_visitor)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 // Field order required by test &quot;ValidateFieldOrderOfJavaCppUnionClasses&quot;.\012\012 // If string compression is enabled, count_ holds the StringCompressionFlag in the\012 // least significant bit and the length in the remaining bits, length = count_ &gt;&gt; 1.\012 int32_t count_;\012\012 uint32_t hash_code_;\012\012 // Compression of all-ASCII into 8-bit memory leads to usage one of these fields\012 union {\012 uint16_t value_[0];\012 uint8_t value_compressed_[0];\012 };\012\012 friend class art::StringBuilderAppend;\012 friend struct art::StringOffsets; // for verifying offset information\012\012  DISALLOW_IMPLICIT_CONSTRUCTORS(String);\012};\012\012} // namespace mirror\012},namespace art {\012\012namespace gc {\012enum AllocatorType : char;\012} // namespace gc\012\012template&lt;class T&gt; class Handle;\012template&lt;class MirrorType&gt; class ObjPtr;\012class StringBuilderAppend;\012struct StringOffsets;\012class StubTest_ReadBarrierForRoot_Test;\012\012namespace mirror {\012\012// String Compression\012static constexpr bool kUseStringCompression = true;\012enum class StringCompressionFlag : uint32_t {\012    kCompressed = 0u,\012    kUncompressed = 1u\012};\012\012// C++ mirror of java.lang.String\012class MANAGED String final : public Object {\012 public:\012 // Size of java.lang.String.class.\012 static uint32_t ClassSize(PointerSize pointer_size);\012\012 // Size of an instance of java.lang.String not including its value array.\012 static constexpr uint32_t InstanceSize() {\012 return sizeof(String);\012 }\012\012 static constexpr MemberOffset CountOffset() {\012 return OFFSET_OF_OBJECT_MEMBER(String, count_);\012 }\012\012 static constexpr MemberOffset ValueOffset() {\012 return OFFSET_OF_OBJECT_MEMBER(String, value_);\012 }\012\012 uint16_t* GetValue() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return &amp;value_[0];\012 }\012\012 uint8_t* GetValueCompressed() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return &amp;value_compressed_[0];\012 }\012\012 template&lt;VerifyObjectFlags kVerifyFlags = kDefaultVerifyFlags&gt;\012 size_t SizeOf() REQUIRES_SHARED(Locks::mutator_lock_) {\012 size_t size = sizeof(String);\012 if (IsCompressed()) {\012      size += (sizeof(uint8_t) * GetLength&lt;kVerifyFlags&gt;());\012 } else {\012      size += (sizeof(uint16_t) * GetLength&lt;kVerifyFlags&gt;());\012 }\012 // String.equals() intrinsics assume zero-padding up to kObjectAlignment,\012 // so make sure the zero-padding is actually copied around if GC compaction\012 // chooses to copy only SizeOf() bytes.\012 // http://b/23528461\012 return RoundUp(size, kObjectAlignment);\012 }\012\012 // Taking out the first/uppermost bit because it is not part of actual length value\012 template&lt;VerifyObjectFlags kVerifyFlags = kDefaultVerifyFlags&gt;\012 int32_t GetLength() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return GetLengthFromCount(GetCount&lt;kVerifyFlags&gt;());\012 }\012\012 template&lt;VerifyObjectFlags kVerifyFlags = kDefaultVerifyFlags&gt;\012 int32_t GetCount() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return GetField32&lt;kVerifyFlags&gt;(OFFSET_OF_OBJECT_MEMBER(String, count_));\012 }\012\012 void SetCount(int32_t new_count) REQUIRES_SHARED(Locks::mutator_lock_) {\012 // Count is invariant so use non-transactional mode. Also disable check as we may run inside\012 // a transaction.\012 SetField32&lt;false, false&gt;(OFFSET_OF_OBJECT_MEMBER(String, count_), new_count);\012 }\012\012 int32_t GetHashCode() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // Computes, stores, and returns the hash code.\012 int32_t ComputeHashCode() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 int32_t GetUtfLength() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 uint16_t CharAt(int32_t index) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // Create a new string where all occurences of `old_c` are replaced with `new_c`.\012 // String.doReplace(char, char) is called from String.replace(char, char) when there is a match.\012 static ObjPtr&lt;String&gt; DoReplace(Thread* self, Handle&lt;String&gt; src, uint16_t old_c, uint16_t new_c)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 ObjPtr&lt;String&gt; Intern() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 template &lt;bool kIsInstrumented = true&gt;\012  ALWAYS_INLINE static ObjPtr&lt;String&gt; AllocFromByteArray(Thread* self,\012 int32_t byte_length,\012 Handle&lt;ByteArray&gt; array,\012 int32_t offset,\012 int32_t high_byte,\012                                                         gc::AllocatorType allocator_type)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 template &lt;bool kIsInstrumented = true&gt;\012  ALWAYS_INLINE static ObjPtr&lt;String&gt; AllocFromCharArray(Thread* self,\012 int32_t count,\012 Handle&lt;CharArray&gt; array,\012 int32_t offset,\012                                                         gc::AllocatorType allocator_type)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 template &lt;bool kIsInstrumented = true&gt;\012  ALWAYS_INLINE static ObjPtr&lt;String&gt; AllocFromString(Thread* self,\012 int32_t string_length,\012 Handle&lt;String&gt; string,\012 int32_t offset,\012                                                      gc::AllocatorType allocator_type)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 template &lt;bool kIsInstrumented = true&gt;\012  ALWAYS_INLINE static ObjPtr&lt;String&gt; AllocEmptyString(Thread* self,\012                                                       gc::AllocatorType allocator_type)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static ObjPtr&lt;String&gt; AllocFromStrings(Thread* self,\012 Handle&lt;String&gt; string,\012 Handle&lt;String&gt; string2)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static ObjPtr&lt;String&gt; AllocFromUtf16(Thread* self,\012 int32_t utf16_length,\012 const uint16_t* utf16_data_in)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static ObjPtr&lt;String&gt; AllocFromModifiedUtf8(Thread* self, const char* utf)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static ObjPtr&lt;String&gt; AllocFromModifiedUtf8(Thread* self,\012 int32_t utf16_length,\012 const char* utf8_data_in,\012 int32_t utf8_length)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static ObjPtr&lt;String&gt; AllocFromModifiedUtf8(Thread* self,\012 int32_t utf16_length,\012 const char* utf8_data_in)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 bool Equals(const char* modified_utf8) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 bool Equals(ObjPtr&lt;String&gt; that) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // Create a modified UTF-8 encoded std::string from a java/lang/String object.\012  std::string ToModifiedUtf8() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 int32_t FastIndexOf(int32_t ch, int32_t start) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 template &lt;typename MemoryType&gt;\012 int32_t FastIndexOf(MemoryType* chars, int32_t ch, int32_t start)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 int32_t CompareTo(ObjPtr&lt;String&gt; other) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 static ObjPtr&lt;CharArray&gt; ToCharArray(Handle&lt;String&gt; h_this, Thread* self)\012      REQUIRES_SHARED(Locks::mutator_lock_)\012      REQUIRES(!Roles::uninterruptible_);\012\012 void GetChars(int32_t start, int32_t end, Handle&lt;CharArray&gt; array, int32_t index)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 template&lt;VerifyObjectFlags kVerifyFlags = kDefaultVerifyFlags&gt;\012 bool IsCompressed() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return kUseStringCompression &amp;&amp; IsCompressed(GetCount());\012 }\012\012 bool IsValueNull() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 template&lt;typename MemoryType&gt;\012 static bool AllASCII(const MemoryType* chars, const int length);\012\012 static bool DexFileStringAllASCII(const char* chars, const int length);\012\012  ALWAYS_INLINE static bool IsCompressed(int32_t count) {\012 return GetCompressionFlagFromCount(count) == StringCompressionFlag::kCompressed;\012 }\012\012  ALWAYS_INLINE static StringCompressionFlag GetCompressionFlagFromCount(int32_t count) {\012 return kUseStringCompression\012 ? static_cast&lt;StringCompressionFlag&gt;(static_cast&lt;uint32_t&gt;(count) &amp; 1u)\012 : StringCompressionFlag::kUncompressed;\012 }\012\012  ALWAYS_INLINE static int32_t GetLengthFromCount(int32_t count) {\012 return kUseStringCompression ? static_cast&lt;int32_t&gt;(static_cast&lt;uint32_t&gt;(count) &gt;&gt; 1) : count;\012 }\012\012  ALWAYS_INLINE static int32_t GetFlaggedCount(int32_t length, bool compressible) {\012 return kUseStringCompression\012 ? static_cast&lt;int32_t&gt;((static_cast&lt;uint32_t&gt;(length) &lt;&lt; 1) |\012 (static_cast&lt;uint32_t&gt;(compressible\012 ? StringCompressionFlag::kCompressed\012 : StringCompressionFlag::kUncompressed)))\012 : length;\012 }\012\012 // Returns a human-readable equivalent of 'descriptor'. So &quot;I&quot; would be &quot;int&quot;,\012 // &quot;[[I&quot; would be &quot;int[][]&quot;, &quot;[Ljava/lang/String;&quot; would be\012 // &quot;java.lang.String[]&quot;, and so forth.\012 static std::string PrettyStringDescriptor(ObjPtr&lt;mirror::String&gt; descriptor)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012  std::string PrettyStringDescriptor()\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 static constexpr bool IsASCII(uint16_t c) {\012 // Valid ASCII characters are in range 1..0x7f. Zero is not considered ASCII\012 // because it would complicate the detection of ASCII strings in Modified-UTF8.\012 return (c - 1u) &lt; 0x7fu;\012 }\012\012 private:\012 static bool AllASCIIExcept(const uint16_t* chars, int32_t length, uint16_t non_ascii);\012\012 void SetHashCode(int32_t new_hash_code) REQUIRES_SHARED(Locks::mutator_lock_) {\012 // Hash code is invariant so use non-transactional mode. Also disable check as we may run inside\012 // a transaction.\012    DCHECK_EQ(0, GetField32(OFFSET_OF_OBJECT_MEMBER(String, hash_code_)));\012 SetField32&lt;false, false&gt;(OFFSET_OF_OBJECT_MEMBER(String, hash_code_), new_hash_code);\012 }\012\012 template &lt;bool kIsInstrumented = true, typename PreFenceVisitor&gt;\012  ALWAYS_INLINE static ObjPtr&lt;String&gt; Alloc(Thread* self,\012 int32_t utf16_length_with_flag,\012                                            gc::AllocatorType allocator_type,\012 const PreFenceVisitor&amp; pre_fence_visitor)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 // Field order required by test &quot;ValidateFieldOrderOfJavaCppUnionClasses&quot;.\012\012 // If string compression is enabled, count_ holds the StringCompressionFlag in the\012 // least significant bit and the length in the remaining bits, length = count_ &gt;&gt; 1.\012 int32_t count_;\012\012 uint32_t hash_code_;\012\012 // Compression of all-ASCII into 8-bit memory leads to usage one of these fields\012 union {\012 uint16_t value_[0];\012 uint8_t value_compressed_[0];\012 };\012\012 friend class art::StringBuilderAppend;\012 friend struct art::StringOffsets; // for verifying offset information\012\012  DISALLOW_IMPLICIT_CONSTRUCTORS(String);\012};\012\012} // namespace mirror\012})<SUB>25</SUB>> ]
-"17973" [label = <(METHOD,&lt;global&gt;)<SUB>1</SUB>> ]
-"17976" [label = <(METHOD_RETURN,ANY)<SUB>1</SUB>> ]
-  "17975" -> "17976" 
-  "17973" -> "17975" 
+digraph "GetInstrumentation" {  
+"17931" [label = <(METHOD,GetInstrumentation)> ]
+"17934" [label = <(METHOD_RETURN,ANY)> ]
+  "17931" -> "17934" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/298-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/298-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/298-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/298-cfg.dot	2023-06-07 19:35:08.177386501 +0330
@@ -1,5 +1,5 @@
-digraph "va_end" {  
-"18291" [label = <(METHOD,va_end)> ]
-"18294" [label = <(METHOD_RETURN,ANY)> ]
-  "18291" -> "18294" 
+digraph "&lt;operator&gt;.indirectFieldAccess" {  
+"17935" [label = <(METHOD,&lt;operator&gt;.indirectFieldAccess)> ]
+"17939" [label = <(METHOD_RETURN,ANY)> ]
+  "17935" -> "17939" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/299-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/299-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/299-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/299-cfg.dot	2023-06-07 19:35:08.177386501 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.indirection" {  
-"18295" [label = <(METHOD,&lt;operator&gt;.indirection)> ]
-"18298" [label = <(METHOD_RETURN,ANY)> ]
-  "18295" -> "18298" 
+digraph "Runtime::Current" {  
+"17940" [label = <(METHOD,Runtime::Current)> ]
+"17943" [label = <(METHOD_RETURN,ANY)> ]
+  "17940" -> "17943" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/3-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/3-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/3-cfg.dot	2023-06-07 19:35:01.327387179 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/3-cfg.dot	2023-06-07 19:35:07.907386529 +0330
@@ -1,243 +1,5 @@
-digraph "&lt;global&gt;" {  
-"259" [label = <(UNKNOWN,),))<SUB>211</SUB>> ]
-"260" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012  DCHECK_NE(field-&gt;GetTypeAsPrimitiveType(), Primitive::kPrimNot);,REQUIRES_SHARED(Locks::mutator_lock_) {\012  DCHECK_NE(field-&gt;GetTypeAsPrimitiveType(), Primitive::kPrimNot);)<SUB>212</SUB>> ]
-"262" [label = <(&lt;operator&gt;.assignment,* instrumentation = Runtime::Current()-&gt;GetInstrumentation())<SUB>214</SUB>> ]
-"271" [label = <(UNKNOWN,if (UNLIKELY(instrumentation-&gt;HasFieldWriteListeners())) {\012 Thread* self = Thread::Current();\012 ArtMethod* cur_method = self-&gt;GetCurrentMethod(/*dex_pc=*/ nullptr,\012 /*check_suspended=*/ true,\012 /*abort_on_error=*/ false);\012\012 if (cur_method == nullptr) {\012 // Set/Get Fields can be issued without a method during runtime startup/teardown. Ignore all\012 // of these changes.\012 return;\012 }\012    DCHECK(cur_method-&gt;IsNative());\012    instrumentation-&gt;FieldWriteEvent(self,\012                                     self-&gt;DecodeJObject(obj),\012                                     cur_method,\012 0, // dex_pc is always 0 since this is a native method.\012                                     field,\012                                     val);\012 },if (UNLIKELY(instrumentation-&gt;HasFieldWriteListeners())) {\012 Thread* self = Thread::Current();\012 ArtMethod* cur_method = self-&gt;GetCurrentMethod(/*dex_pc=*/ nullptr,\012 /*check_suspended=*/ true,\012 /*abort_on_error=*/ false);\012\012 if (cur_method == nullptr) {\012 // Set/Get Fields can be issued without a method during runtime startup/teardown. Ignore all\012 // of these changes.\012 return;\012 }\012    DCHECK(cur_method-&gt;IsNative());\012    instrumentation-&gt;FieldWriteEvent(self,\012                                     self-&gt;DecodeJObject(obj),\012                                     cur_method,\012 0, // dex_pc is always 0 since this is a native method.\012                                     field,\012                                     val);\012 })<SUB>215</SUB>> ]
-"272" [label = <(UNKNOWN,},})<SUB>234</SUB>> ]
-"279" [label = <(UNKNOWN,),))<SUB>236</SUB>> ]
-"280" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012  instrumentation::Instrumentation* instrumentation = Runtime::Current()-&gt;GetInstrumentation();,REQUIRES_SHARED(Locks::mutator_lock_) {\012  instrumentation::Instrumentation* instrumentation = Runtime::Current()-&gt;GetInstrumentation();)<SUB>237</SUB>> ]
-"281" [label = <(UNKNOWN,if (UNLIKELY(instrumentation-&gt;HasFieldReadListeners())) {\012 Thread* self = Thread::Current();\012 ArtMethod* cur_method = self-&gt;GetCurrentMethod(/*dex_pc=*/ nullptr,\012 /*check_suspended=*/ true,\012 /*abort_on_error=*/ false);\012\012 if (cur_method == nullptr) {\012 // Set/Get Fields can be issued without a method during runtime startup/teardown. Ignore all\012 // of these changes.\012 return;\012 }\012    DCHECK(cur_method-&gt;IsNative());\012    instrumentation-&gt;FieldReadEvent(self,\012                                    self-&gt;DecodeJObject(obj),\012                                    cur_method,\012 0, // dex_pc is always 0 since this is a native method.\012                                    field);\012 },if (UNLIKELY(instrumentation-&gt;HasFieldReadListeners())) {\012 Thread* self = Thread::Current();\012 ArtMethod* cur_method = self-&gt;GetCurrentMethod(/*dex_pc=*/ nullptr,\012 /*check_suspended=*/ true,\012 /*abort_on_error=*/ false);\012\012 if (cur_method == nullptr) {\012 // Set/Get Fields can be issued without a method during runtime startup/teardown. Ignore all\012 // of these changes.\012 return;\012 }\012    DCHECK(cur_method-&gt;IsNative());\012    instrumentation-&gt;FieldReadEvent(self,\012                                    self-&gt;DecodeJObject(obj),\012                                    cur_method,\012 0, // dex_pc is always 0 since this is a native method.\012                                    field);\012 })<SUB>239</SUB>> ]
-"282" [label = <(UNKNOWN,},})<SUB>257</SUB>> ]
-"357" [label = <(UNKNOWN,),))<SUB>286</SUB>> ]
-"358" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012  LOG(ERROR)\012 &lt;&lt; &quot;Failed to register native method in &quot; &lt;&lt; c-&gt;PrettyDescriptor()\012 &lt;&lt; &quot; in &quot; &lt;&lt; c-&gt;GetDexCache()-&gt;GetLocation()-&gt;ToModifiedUtf8()\012 &lt;&lt; &quot;: &quot; &lt;&lt; kind &lt;&lt; &quot; is null at index &quot; &lt;&lt; idx;,REQUIRES_SHARED(Locks::mutator_lock_) {\012  LOG(ERROR)\012 &lt;&lt; &quot;Failed to register native method in &quot; &lt;&lt; c-&gt;PrettyDescriptor()\012 &lt;&lt; &quot; in &quot; &lt;&lt; c-&gt;GetDexCache()-&gt;GetLocation()-&gt;ToModifiedUtf8()\012 &lt;&lt; &quot;: &quot; &lt;&lt; kind &lt;&lt; &quot; is null at index &quot; &lt;&lt; idx;)<SUB>287</SUB>> ]
-"359" [label = <(UNKNOWN,soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/NoSuchMethodError;&quot;,\012 &quot;%s is null at index %d&quot;,\012                                 kind,\012                                 idx);,soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/NoSuchMethodError;&quot;,\012 &quot;%s is null at index %d&quot;,\012                                 kind,\012                                 idx);)<SUB>292</SUB>> ]
-"360" [label = <(UNKNOWN,},})<SUB>296</SUB>> ]
-"370" [label = <(UNKNOWN,),))<SUB>300</SUB>> ]
-"371" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012 return jni::EncodeArtMethod&lt;kEnableIndexIds&gt;(FindMethodJNI(soa, jni_class, name, sig, is_static));,REQUIRES_SHARED(Locks::mutator_lock_) {\012 return jni::EncodeArtMethod&lt;kEnableIndexIds&gt;(FindMethodJNI(soa, jni_class, name, sig, is_static));)<SUB>301</SUB>> ]
-"372" [label = <(UNKNOWN,},})<SUB>303</SUB>> ]
-"378" [label = <(UNKNOWN,),))<SUB>306</SUB>> ]
-"379" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012 ArtMethod* method = soa.Self()-&gt;GetCurrentMethod(nullptr);,REQUIRES_SHARED(Locks::mutator_lock_) {\012 ArtMethod* method = soa.Self()-&gt;GetCurrentMethod(nullptr);)<SUB>307</SUB>> ]
-"380" [label = <(UNKNOWN,if (method ==\012      jni::DecodeArtMethod&lt;kEnableIndexIds&gt;(WellKnownClasses::java_lang_Runtime_nativeLoad)) {\012 return soa.Decode&lt;mirror::ClassLoader&gt;(soa.Self()-&gt;GetClassLoaderOverride());\012 },if (method ==\012      jni::DecodeArtMethod&lt;kEnableIndexIds&gt;(WellKnownClasses::java_lang_Runtime_nativeLoad)) {\012 return soa.Decode&lt;mirror::ClassLoader&gt;(soa.Self()-&gt;GetClassLoaderOverride());\012 })<SUB>310</SUB>> ]
-"381" [label = <(UNKNOWN,if (method != nullptr) {\012 return method-&gt;GetDeclaringClass()-&gt;GetClassLoader();\012 },if (method != nullptr) {\012 return method-&gt;GetDeclaringClass()-&gt;GetClassLoader();\012 })<SUB>315</SUB>> ]
-"383" [label = <(&lt;operator&gt;.assignment,class_loader =\012      soa.Decode&lt;mirror::ClassLoader&gt;(Runtime::Current()-&gt;GetSystemClassLoader()))<SUB>319</SUB>> ]
-"400" [label = <(UNKNOWN,if (class_loader != nullptr) {\012 return class_loader;\012 },if (class_loader != nullptr) {\012 return class_loader;\012 })<SUB>321</SUB>> ]
-"401" [label = <(UNKNOWN,class_loader = soa.Decode&lt;mirror::ClassLoader&gt;(soa.Self()-&gt;GetClassLoaderOverride());,class_loader = soa.Decode&lt;mirror::ClassLoader&gt;(soa.Self()-&gt;GetClassLoaderOverride());)<SUB>325</SUB>> ]
-"402" [label = <(UNKNOWN,if (class_loader != nullptr) {\012 // If so, CommonCompilerTest should have marked the runtime as a compiler not compiling an\012 // image.\012    CHECK(Runtime::Current()-&gt;IsAotCompiler());\012    CHECK(!Runtime::Current()-&gt;IsCompilingBootImage());\012 return class_loader;\012 },if (class_loader != nullptr) {\012 // If so, CommonCompilerTest should have marked the runtime as a compiler not compiling an\012 // image.\012    CHECK(Runtime::Current()-&gt;IsAotCompiler());\012    CHECK(!Runtime::Current()-&gt;IsCompilingBootImage());\012 return class_loader;\012 })<SUB>326</SUB>> ]
-"403" [label = <(UNKNOWN,return nullptr;,return nullptr;)<SUB>334</SUB>> ]
-"404" [label = <(UNKNOWN,},})<SUB>335</SUB>> ]
-"414" [label = <(UNKNOWN,),))<SUB>339</SUB>> ]
-"415" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012 return jni::EncodeArtField&lt;kEnableIndexIds&gt;(FindFieldJNI(soa, jni_class, name, sig, is_static));,REQUIRES_SHARED(Locks::mutator_lock_) {\012 return jni::EncodeArtField&lt;kEnableIndexIds&gt;(FindFieldJNI(soa, jni_class, name, sig, is_static));)<SUB>340</SUB>> ]
-"416" [label = <(UNKNOWN,},})<SUB>342</SUB>> ]
-"426" [label = <(UNKNOWN,),))<SUB>348</SUB>> ]
-"427" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012  std::string type(array-&gt;PrettyTypeOf());,REQUIRES_SHARED(Locks::mutator_lock_) {\012  std::string type(array-&gt;PrettyTypeOf());)<SUB>349</SUB>> ]
-"428" [label = <(UNKNOWN,soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/ArrayIndexOutOfBoundsException;&quot;,\012 &quot;%s offset=%d length=%d %s.length=%d&quot;,\012                                 type.c_str(), start, length, identifier, array-&gt;GetLength());,soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/ArrayIndexOutOfBoundsException;&quot;,\012 &quot;%s offset=%d length=%d %s.length=%d&quot;,\012                                 type.c_str(), start, length, identifier, array-&gt;GetLength());)<SUB>351</SUB>> ]
-"429" [label = <(UNKNOWN,},})<SUB>354</SUB>> ]
-"438" [label = <(UNKNOWN,),))<SUB>357</SUB>> ]
-"439" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012  soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/StringIndexOutOfBoundsException;&quot;,\012 &quot;offset=%d length=%d string.length()=%d&quot;, start, length,\012                                 array_length);,REQUIRES_SHARED(Locks::mutator_lock_) {\012  soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/StringIndexOutOfBoundsException;&quot;,\012 &quot;offset=%d length=%d string.length()=%d&quot;, start, length,\012                                 array_length);)<SUB>358</SUB>> ]
-"440" [label = <(UNKNOWN,},})<SUB>362</SUB>> ]
-"450" [label = <(UNKNOWN,),))<SUB>368</SUB>> ]
-"451" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012  std::string temp;,REQUIRES_SHARED(Locks::mutator_lock_) {\012  std::string temp;)<SUB>369</SUB>> ]
-"452" [label = <(UNKNOWN,soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/NoSuchMethodError;&quot;,\012 &quot;no %s method \&quot;%s.%s%s\&quot;&quot;,\012                                 kind,\012                                 c-&gt;GetDescriptor(&amp;temp),\012                                 name,\012                                 sig);,soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/NoSuchMethodError;&quot;,\012 &quot;no %s method \&quot;%s.%s%s\&quot;&quot;,\012                                 kind,\012                                 c-&gt;GetDescriptor(&amp;temp),\012                                 name,\012                                 sig);)<SUB>371</SUB>> ]
-"453" [label = <(UNKNOWN,},})<SUB>377</SUB>> ]
-"460" [label = <(UNKNOWN,),))<SUB>379</SUB>> ]
-"461" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012 if (LIKELY(klass-&gt;IsInitialized())) {\012 return klass;\012 },REQUIRES_SHARED(Locks::mutator_lock_) {\012 if (LIKELY(klass-&gt;IsInitialized())) {\012 return klass;\012 })<SUB>380</SUB>> ]
-"468" [label = <(h_klass,h_klass(hs.NewHandle(klass)))<SUB>385</SUB>> ]
-"474" [label = <(UNKNOWN,if (!Runtime::Current()-&gt;GetClassLinker()-&gt;EnsureInitialized(self, h_klass, true, true)) {\012 return nullptr;\012 },if (!Runtime::Current()-&gt;GetClassLinker()-&gt;EnsureInitialized(self, h_klass, true, true)) {\012 return nullptr;\012 })<SUB>386</SUB>> ]
-"475" [label = <(UNKNOWN,return h_klass.Get();,return h_klass.Get();)<SUB>389</SUB>> ]
-"476" [label = <(UNKNOWN,},})<SUB>390</SUB>> ]
-"910" [label = <(UNKNOWN,),))<SUB>475</SUB>> ]
-"911" [label = <(UNKNOWN,REQUIRES(!Locks::mutator_lock_) {\012 // Turn the const char* into a java.lang.String.\012 ScopedLocalRef&lt;jstring&gt; s(env, env-&gt;NewStringUTF(msg));\012 if (msg != nullptr &amp;&amp; s.get() == nullptr) {\012 return JNI_ERR;\012 }\012\012 // Choose an appropriate constructor and set up the arguments.\012  jvalue args[2];\012 const char* signature;\012 if (msg == nullptr &amp;&amp; cause == nullptr) {\012    signature = &quot;()V&quot;;\012 } else if (msg != nullptr &amp;&amp; cause == nullptr) {\012    signature = &quot;(Ljava/lang/String;)V&quot;;\012    args[0].l = s.get();\012 } else if (msg == nullptr &amp;&amp; cause != nullptr) {\012    signature = &quot;(Ljava/lang/Throwable;)V&quot;;\012    args[0].l = cause;\012 } else {\012    signature = &quot;(Ljava/lang/String;Ljava/lang/Throwable;)V&quot;;\012    args[0].l = s.get();\012    args[1].l = cause;\012 }\012  jmethodID mid = env-&gt;GetMethodID(exception_class, &quot;&lt;init&gt;&quot;, signature);\012 if (mid == nullptr) {\012 ScopedObjectAccess soa(env);\012    LOG(ERROR) &lt;&lt; &quot;No &lt;init&gt;&quot; &lt;&lt; signature &lt;&lt; &quot; in &quot;\012 &lt;&lt; mirror::Class::PrettyClass(soa.Decode&lt;mirror::Class&gt;(exception_class));\012 return JNI_ERR;\012 }\012\012 ScopedLocalRef&lt;jthrowable&gt; exception(\012      env, reinterpret_cast&lt;jthrowable&gt;(env-&gt;NewObjectA(exception_class, mid, args)));\012 if (exception.get() == nullptr) {\012 return JNI_ERR;\012 }\012 ScopedObjectAccess soa(env);\012  soa.Self()-&gt;SetException(soa.Decode&lt;mirror::Throwable&gt;(exception.get()));\012 return JNI_OK;\012},REQUIRES(!Locks::mutator_lock_) {\012 // Turn the const char* into a java.lang.String.\012 ScopedLocalRef&lt;jstring&gt; s(env, env-&gt;NewStringUTF(msg));\012 if (msg != nullptr &amp;&amp; s.get() == nullptr) {\012 return JNI_ERR;\012 }\012\012 // Choose an appropriate constructor and set up the arguments.\012  jvalue args[2];\012 const char* signature;\012 if (msg == nullptr &amp;&amp; cause == nullptr) {\012    signature = &quot;()V&quot;;\012 } else if (msg != nullptr &amp;&amp; cause == nullptr) {\012    signature = &quot;(Ljava/lang/String;)V&quot;;\012    args[0].l = s.get();\012 } else if (msg == nullptr &amp;&amp; cause != nullptr) {\012    signature = &quot;(Ljava/lang/Throwable;)V&quot;;\012    args[0].l = cause;\012 } else {\012    signature = &quot;(Ljava/lang/String;Ljava/lang/Throwable;)V&quot;;\012    args[0].l = s.get();\012    args[1].l = cause;\012 }\012  jmethodID mid = env-&gt;GetMethodID(exception_class, &quot;&lt;init&gt;&quot;, signature);\012 if (mid == nullptr) {\012 ScopedObjectAccess soa(env);\012    LOG(ERROR) &lt;&lt; &quot;No &lt;init&gt;&quot; &lt;&lt; signature &lt;&lt; &quot; in &quot;\012 &lt;&lt; mirror::Class::PrettyClass(soa.Decode&lt;mirror::Class&gt;(exception_class));\012 return JNI_ERR;\012 }\012\012 ScopedLocalRef&lt;jthrowable&gt; exception(\012      env, reinterpret_cast&lt;jthrowable&gt;(env-&gt;NewObjectA(exception_class, mid, args)));\012 if (exception.get() == nullptr) {\012 return JNI_ERR;\012 }\012 ScopedObjectAccess soa(env);\012  soa.Self()-&gt;SetException(soa.Decode&lt;mirror::Throwable&gt;(exception.get()));\012 return JNI_OK;\012})<SUB>476</SUB>> ]
-"931" [label = <(UNKNOWN,),))<SUB>548</SUB>> ]
-"932" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012 auto pointer_size = Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize();,REQUIRES_SHARED(Locks::mutator_lock_) {\012 auto pointer_size = Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize();)<SUB>549</SUB>> ]
-"933" [label = <(UNKNOWN,for (auto&amp; method : c-&gt;GetMethods(pointer_size)) {\012 if (kNative == method.IsNative() &amp;&amp; name == method.GetName() &amp;&amp; method.GetSignature() == sig) {\012 return &amp;method;\012 }\012 },for (auto&amp; method : c-&gt;GetMethods(pointer_size)) {\012 if (kNative == method.IsNative() &amp;&amp; name == method.GetName() &amp;&amp; method.GetSignature() == sig) {\012 return &amp;method;\012 }\012 })<SUB>551</SUB>> ]
-"934" [label = <(UNKNOWN,return nullptr;,return nullptr;)<SUB>556</SUB>> ]
-"935" [label = <(UNKNOWN,},})<SUB>557</SUB>> ]
-"13774" [label = <(UNKNOWN,},})<SUB>2701</SUB>> ]
-"13830" [label = <(UNKNOWN,),))<SUB>2718</SUB>> ]
-"13831" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012 ObjPtr&lt;ArtArrayT&gt; array = soa.Decode&lt;ArtArrayT&gt;(java_array);,REQUIRES_SHARED(Locks::mutator_lock_) {\012 ObjPtr&lt;ArtArrayT&gt; array = soa.Decode&lt;ArtArrayT&gt;(java_array);)<SUB>2719</SUB>> ]
-"13833" [label = <(&lt;operator&gt;.assignment,expected_array_class = GetClassRoot&lt;ArtArrayT&gt;())<SUB>2721</SUB>> ]
-"13836" [label = <(UNKNOWN,if (UNLIKELY(expected_array_class != array-&gt;GetClass())) {\012      soa.Vm()-&gt;JniAbortF(fn_name,\012 &quot;attempt to %s %s primitive array elements with an object of type %s&quot;,\012                          operation,\012                          mirror::Class::PrettyDescriptor(\012                              expected_array_class-&gt;GetComponentType()).c_str(),\012                          mirror::Class::PrettyDescriptor(array-&gt;GetClass()).c_str());\012 return nullptr;\012 },if (UNLIKELY(expected_array_class != array-&gt;GetClass())) {\012      soa.Vm()-&gt;JniAbortF(fn_name,\012 &quot;attempt to %s %s primitive array elements with an object of type %s&quot;,\012                          operation,\012                          mirror::Class::PrettyDescriptor(\012                              expected_array_class-&gt;GetComponentType()).c_str(),\012                          mirror::Class::PrettyDescriptor(array-&gt;GetClass()).c_str());\012 return nullptr;\012 })<SUB>2722</SUB>> ]
-"13837" [label = <(UNKNOWN,DCHECK_EQ(sizeof(ElementT), array-&gt;GetClass()-&gt;GetComponentSize());,DCHECK_EQ(sizeof(ElementT), array-&gt;GetClass()-&gt;GetComponentSize());)<SUB>2731</SUB>> ]
-"13838" [label = <(UNKNOWN,return array;,return array;)<SUB>2732</SUB>> ]
-"13839" [label = <(UNKNOWN,},})<SUB>2733</SUB>> ]
-"14012" [label = <(UNKNOWN,),))<SUB>2778</SUB>> ]
-"14013" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012 void* array_data = array-&gt;GetRawData(component_size, 0);,REQUIRES_SHARED(Locks::mutator_lock_) {\012 void* array_data = array-&gt;GetRawData(component_size, 0);)<SUB>2779</SUB>> ]
-"14015" [label = <(&lt;operator&gt;.assignment,* heap = Runtime::Current()-&gt;GetHeap())<SUB>2781</SUB>> ]
-"14025" [label = <(&lt;operator&gt;.assignment,is_copy = array_data != elements)<SUB>2782</SUB>> ]
-"14031" [label = <(&lt;operator&gt;.assignment,bytes = array-&gt;GetLength() * component_size)<SUB>2783</SUB>> ]
-"14039" [label = <(UNKNOWN,if (is_copy) {\012 // Sanity check: If elements is not the same as the java array's data, it better not be a\012 // heap address. TODO: This might be slow to check, may be worth keeping track of which\012 // copies we make?\012 if (heap-&gt;IsNonDiscontinuousSpaceHeapAddress(elements)) {\012        soa.Vm()-&gt;JniAbortF(&quot;ReleaseArrayElements&quot;,\012 &quot;invalid element pointer %p, array elements are %p&quot;,\012 reinterpret_cast&lt;void*&gt;(elements), array_data);\012 return;\012 }\012 if (mode != JNI_ABORT) {\012        memcpy(array_data, elements, bytes);\012 } else if (kWarnJniAbort &amp;&amp; memcmp(array_data, elements, bytes) != 0) {\012 // Warn if we have JNI_ABORT and the arrays don't match since this is usually an error.\012        LOG(WARNING) &lt;&lt; &quot;Possible incorrect JNI_ABORT in Release*ArrayElements&quot;;\012        soa.Self()-&gt;DumpJavaStack(LOG_STREAM(WARNING));\012 }\012 },if (is_copy) {\012 // Sanity check: If elements is not the same as the java array's data, it better not be a\012 // heap address. TODO: This might be slow to check, may be worth keeping track of which\012 // copies we make?\012 if (heap-&gt;IsNonDiscontinuousSpaceHeapAddress(elements)) {\012        soa.Vm()-&gt;JniAbortF(&quot;ReleaseArrayElements&quot;,\012 &quot;invalid element pointer %p, array elements are %p&quot;,\012 reinterpret_cast&lt;void*&gt;(elements), array_data);\012 return;\012 }\012 if (mode != JNI_ABORT) {\012        memcpy(array_data, elements, bytes);\012 } else if (kWarnJniAbort &amp;&amp; memcmp(array_data, elements, bytes) != 0) {\012 // Warn if we have JNI_ABORT and the arrays don't match since this is usually an error.\012        LOG(WARNING) &lt;&lt; &quot;Possible incorrect JNI_ABORT in Release*ArrayElements&quot;;\012        soa.Self()-&gt;DumpJavaStack(LOG_STREAM(WARNING));\012 }\012 })<SUB>2784</SUB>> ]
-"14040" [label = <(UNKNOWN,if (mode != JNI_COMMIT) {\012 if (is_copy) {\012 delete[] reinterpret_cast&lt;uint64_t*&gt;(elements);\012 } else if (heap-&gt;IsMovableObject(array)) {\012 // Non copy to a movable object must means that we had disabled the moving GC.\012 if (!kUseReadBarrier) {\012          heap-&gt;DecrementDisableMovingGC(soa.Self());\012 } else {\012          heap-&gt;DecrementDisableThreadFlip(soa.Self());\012 }\012 }\012 },if (mode != JNI_COMMIT) {\012 if (is_copy) {\012 delete[] reinterpret_cast&lt;uint64_t*&gt;(elements);\012 } else if (heap-&gt;IsMovableObject(array)) {\012 // Non copy to a movable object must means that we had disabled the moving GC.\012 if (!kUseReadBarrier) {\012          heap-&gt;DecrementDisableMovingGC(soa.Self());\012 } else {\012          heap-&gt;DecrementDisableThreadFlip(soa.Self());\012 }\012 }\012 })<SUB>2802</SUB>> ]
-"14041" [label = <(UNKNOWN,},})<SUB>2814</SUB>> ]
-"14254" [label = <(UNKNOWN,};,};)<SUB>2851</SUB>> ]
-"14985" [label = <(&lt;operator&gt;.assignment,(*gJniSleepForeverStub[])() = {\012 nullptr, // reserved0.\012 nullptr, // reserved1.\012 nullptr, // reserved2.\012 nullptr, // reserved3.\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012})<SUB>3102</SUB>> ]
-"15230" [label = <(UNKNOWN,},})<SUB>3342</SUB>> ]
-"228" [label = <(&lt;operator&gt;.assignment,kWarnJniAbort = false)<SUB>163</SUB>> ]
-"231" [label = <(UNKNOWN,template&lt;typename T&gt;\012ALWAYS_INLINE static bool ShouldDenyAccessToMember(T* member, Thread* self)\012    REQUIRES_SHARED(Locks::mutator_lock_) {\012 return hiddenapi::ShouldDenyAccessToMember(\012      member,\012 [&amp;]() REQUIRES_SHARED(Locks::mutator_lock_) {\012 // Construct AccessContext from the first calling class on stack.\012 // If the calling class cannot be determined, e.g. unattached threads,\012 // we conservatively assume the caller is trusted.\012 ObjPtr&lt;mirror::Class&gt; caller = GetCallingClass(self, /* num_frames */ 1);\012 return caller.IsNull() ? hiddenapi::AccessContext(/* is_trusted= */ true)\012 : hiddenapi::AccessContext(caller);\012 },\012      hiddenapi::AccessMethod::kJNI);\012},template&lt;typename T&gt;\012ALWAYS_INLINE static bool ShouldDenyAccessToMember(T* member, Thread* self)\012    REQUIRES_SHARED(Locks::mutator_lock_) {\012 return hiddenapi::ShouldDenyAccessToMember(\012      member,\012 [&amp;]() REQUIRES_SHARED(Locks::mutator_lock_) {\012 // Construct AccessContext from the first calling class on stack.\012 // If the calling class cannot be determined, e.g. unattached threads,\012 // we conservatively assume the caller is trusted.\012 ObjPtr&lt;mirror::Class&gt; caller = GetCallingClass(self, /* num_frames */ 1);\012 return caller.IsNull() ? hiddenapi::AccessContext(/* is_trusted= */ true)\012 : hiddenapi::AccessContext(caller);\012 },\012      hiddenapi::AccessMethod::kJNI);\012})<SUB>165</SUB>> ]
-"239" [label = <(UNKNOWN,),))<SUB>184</SUB>> ]
-"240" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012  DCHECK_EQ(field-&gt;GetTypeAsPrimitiveType(), Primitive::kPrimNot);,REQUIRES_SHARED(Locks::mutator_lock_) {\012  DCHECK_EQ(field-&gt;GetTypeAsPrimitiveType(), Primitive::kPrimNot);)<SUB>185</SUB>> ]
-"242" [label = <(&lt;operator&gt;.assignment,* instrumentation = Runtime::Current()-&gt;GetInstrumentation())<SUB>187</SUB>> ]
-"251" [label = <(UNKNOWN,if (UNLIKELY(instrumentation-&gt;HasFieldWriteListeners())) {\012 Thread* self = Thread::Current();\012 ArtMethod* cur_method = self-&gt;GetCurrentMethod(/*dex_pc=*/ nullptr,\012 /*check_suspended=*/ true,\012 /*abort_on_error=*/ false);\012\012 if (cur_method == nullptr) {\012 // Set/Get Fields can be issued without a method during runtime startup/teardown. Ignore all\012 // of these changes.\012 return;\012 }\012    DCHECK(cur_method-&gt;IsNative());\012 JValue val;\012    val.SetL(self-&gt;DecodeJObject(jval));\012    instrumentation-&gt;FieldWriteEvent(self,\012                                     self-&gt;DecodeJObject(obj),\012                                     cur_method,\012 0, // dex_pc is always 0 since this is a native method.\012                                     field,\012                                     val);\012 },if (UNLIKELY(instrumentation-&gt;HasFieldWriteListeners())) {\012 Thread* self = Thread::Current();\012 ArtMethod* cur_method = self-&gt;GetCurrentMethod(/*dex_pc=*/ nullptr,\012 /*check_suspended=*/ true,\012 /*abort_on_error=*/ false);\012\012 if (cur_method == nullptr) {\012 // Set/Get Fields can be issued without a method during runtime startup/teardown. Ignore all\012 // of these changes.\012 return;\012 }\012    DCHECK(cur_method-&gt;IsNative());\012 JValue val;\012    val.SetL(self-&gt;DecodeJObject(jval));\012    instrumentation-&gt;FieldWriteEvent(self,\012                                     self-&gt;DecodeJObject(obj),\012                                     cur_method,\012 0, // dex_pc is always 0 since this is a native method.\012                                     field,\012                                     val);\012 })<SUB>188</SUB>> ]
-"264" [label = <(GetInstrumentation,Runtime::Current()-&gt;GetInstrumentation())<SUB>214</SUB>> ]
-"385" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::ClassLoader&gt;(Runtime::Current()-&gt;GetSystemClassLoader()))<SUB>320</SUB>> ]
-"469" [label = <(NewHandle,hs.NewHandle(klass))<SUB>385</SUB>> ]
-"13835" [label = <(GetClassRoot&lt;ArtArrayT&gt;,GetClassRoot&lt;ArtArrayT&gt;())<SUB>2721</SUB>> ]
-"14017" [label = <(GetHeap,Runtime::Current()-&gt;GetHeap())<SUB>2781</SUB>> ]
-"14027" [label = <(&lt;operator&gt;.notEquals,array_data != elements)<SUB>2782</SUB>> ]
-"14033" [label = <(&lt;operator&gt;.multiplication,array-&gt;GetLength() * component_size)<SUB>2783</SUB>> ]
-"14987" [label = <(&lt;operator&gt;.arrayInitializer,{\012 nullptr, // reserved0.\012 nullptr, // reserved1.\012 nullptr, // reserved2.\012 nullptr, // reserved3.\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012})<SUB>3102</SUB>> ]
-"49" [label = <(&lt;operator&gt;.assignment,kBadUtf8ReplacementChar[] = &quot;?&quot;)<SUB>83</SUB>> ]
-"244" [label = <(GetInstrumentation,Runtime::Current()-&gt;GetInstrumentation())<SUB>187</SUB>> ]
-"265" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetInstrumentation)<SUB>214</SUB>> ]
-"386" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::ClassLoader)<SUB>320</SUB>> ]
-"393" [label = <(GetSystemClassLoader,Runtime::Current()-&gt;GetSystemClassLoader())<SUB>320</SUB>> ]
-"470" [label = <(&lt;operator&gt;.fieldAccess,hs.NewHandle)<SUB>385</SUB>> ]
-"14018" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetHeap)<SUB>2781</SUB>> ]
-"14034" [label = <(GetLength,array-&gt;GetLength())<SUB>2783</SUB>> ]
-"245" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetInstrumentation)<SUB>187</SUB>> ]
-"266" [label = <(Runtime::Current,Runtime::Current())<SUB>214</SUB>> ]
-"270" [label = <(FIELD_IDENTIFIER,GetInstrumentation,GetInstrumentation)<SUB>214</SUB>> ]
-"387" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>320</SUB>> ]
-"390" [label = <(&lt;operator&gt;.fieldAccess,mirror::ClassLoader)<SUB>320</SUB>> ]
-"394" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetSystemClassLoader)<SUB>320</SUB>> ]
-"472" [label = <(FIELD_IDENTIFIER,NewHandle,NewHandle)<SUB>385</SUB>> ]
-"14019" [label = <(Runtime::Current,Runtime::Current())<SUB>2781</SUB>> ]
-"14023" [label = <(FIELD_IDENTIFIER,GetHeap,GetHeap)<SUB>2781</SUB>> ]
-"14035" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetLength)<SUB>2783</SUB>> ]
-"246" [label = <(Runtime::Current,Runtime::Current())<SUB>187</SUB>> ]
-"250" [label = <(FIELD_IDENTIFIER,GetInstrumentation,GetInstrumentation)<SUB>187</SUB>> ]
-"267" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>214</SUB>> ]
-"389" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>320</SUB>> ]
-"392" [label = <(FIELD_IDENTIFIER,ClassLoader,ClassLoader)<SUB>320</SUB>> ]
-"395" [label = <(Runtime::Current,Runtime::Current())<SUB>320</SUB>> ]
-"399" [label = <(FIELD_IDENTIFIER,GetSystemClassLoader,GetSystemClassLoader)<SUB>320</SUB>> ]
-"14020" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>2781</SUB>> ]
-"14037" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>2783</SUB>> ]
-"247" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>187</SUB>> ]
-"269" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>214</SUB>> ]
-"396" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>320</SUB>> ]
-"14022" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>2781</SUB>> ]
-"249" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>187</SUB>> ]
-"398" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>320</SUB>> ]
-"20" [label = <(METHOD,&lt;global&gt;)<SUB>1</SUB>> ]
-"15280" [label = <(METHOD_RETURN,ANY)<SUB>1</SUB>> ]
-  "259" -> "260" 
-  "260" -> "269" 
-  "262" -> "271" 
-  "271" -> "272" 
-  "272" -> "279" 
-  "279" -> "280" 
-  "280" -> "281" 
-  "281" -> "282" 
-  "282" -> "357" 
-  "357" -> "358" 
-  "358" -> "359" 
-  "359" -> "360" 
-  "360" -> "370" 
-  "370" -> "371" 
-  "371" -> "372" 
-  "372" -> "378" 
-  "378" -> "379" 
-  "379" -> "380" 
-  "380" -> "381" 
-  "381" -> "389" 
-  "383" -> "400" 
-  "400" -> "401" 
-  "401" -> "402" 
-  "402" -> "403" 
-  "403" -> "404" 
-  "404" -> "414" 
-  "414" -> "415" 
-  "415" -> "416" 
-  "416" -> "426" 
-  "426" -> "427" 
-  "427" -> "428" 
-  "428" -> "429" 
-  "429" -> "438" 
-  "438" -> "439" 
-  "439" -> "440" 
-  "440" -> "450" 
-  "450" -> "451" 
-  "451" -> "452" 
-  "452" -> "453" 
-  "453" -> "460" 
-  "460" -> "461" 
-  "461" -> "472" 
-  "468" -> "474" 
-  "474" -> "475" 
-  "475" -> "476" 
-  "476" -> "910" 
-  "910" -> "911" 
-  "911" -> "931" 
-  "931" -> "932" 
-  "932" -> "933" 
-  "933" -> "934" 
-  "934" -> "935" 
-  "935" -> "13774" 
-  "13774" -> "13830" 
-  "13830" -> "13831" 
-  "13831" -> "13835" 
-  "13833" -> "13836" 
-  "13836" -> "13837" 
-  "13837" -> "13838" 
-  "13838" -> "13839" 
-  "13839" -> "14012" 
-  "14012" -> "14013" 
-  "14013" -> "14022" 
-  "14015" -> "14027" 
-  "14025" -> "14037" 
-  "14031" -> "14039" 
-  "14039" -> "14040" 
-  "14040" -> "14041" 
-  "14041" -> "14254" 
-  "14254" -> "14987" 
-  "14985" -> "15230" 
-  "15230" -> "15280" 
-  "228" -> "231" 
-  "231" -> "239" 
-  "239" -> "240" 
-  "240" -> "249" 
-  "242" -> "251" 
-  "251" -> "259" 
-  "264" -> "262" 
-  "385" -> "383" 
-  "469" -> "468" 
-  "13835" -> "13833" 
-  "14017" -> "14015" 
-  "14027" -> "14025" 
-  "14033" -> "14031" 
-  "14987" -> "14985" 
-  "49" -> "228" 
-  "244" -> "242" 
-  "265" -> "264" 
-  "386" -> "398" 
-  "393" -> "385" 
-  "470" -> "469" 
-  "14018" -> "14017" 
-  "14034" -> "14033" 
-  "245" -> "244" 
-  "266" -> "270" 
-  "270" -> "265" 
-  "387" -> "392" 
-  "390" -> "386" 
-  "394" -> "393" 
-  "472" -> "470" 
-  "14019" -> "14023" 
-  "14023" -> "14018" 
-  "14035" -> "14034" 
-  "246" -> "250" 
-  "250" -> "245" 
-  "267" -> "266" 
-  "389" -> "387" 
-  "392" -> "390" 
-  "395" -> "399" 
-  "399" -> "394" 
-  "14020" -> "14019" 
-  "14037" -> "14035" 
-  "247" -> "246" 
-  "269" -> "267" 
-  "396" -> "395" 
-  "14022" -> "14020" 
-  "249" -> "247" 
-  "398" -> "396" 
-  "20" -> "49" 
+digraph "ScopedVAArgs" {  
+"19" [label = <(METHOD,ScopedVAArgs)<SUB>72</SUB>> ]
+"22" [label = <(METHOD_RETURN,ANY)<SUB>72</SUB>> ]
+  "19" -> "22" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/30-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/30-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/30-cfg.dot	2023-06-07 19:35:01.357387176 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/30-cfg.dot	2023-06-07 19:35:07.927386526 +0330
@@ -1,41 +1,63 @@
-digraph "FromReflectedMethod" {  
-"1086" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(jlr_method))<SUB>589</SUB>> ]
-"1105" [label = <(soa,soa(env))<SUB>590</SUB>> ]
-"1107" [label = <(RETURN,return jni::EncodeArtMethod&lt;kEnableIndexIds&gt;(ArtMethod::FromReflectedMethod(soa, jlr_method));,return jni::EncodeArtMethod&lt;kEnableIndexIds&gt;(ArtMethod::FromReflectedMethod(soa, jlr_method));)<SUB>591</SUB>> ]
-"1108" [label = <(&lt;operator&gt;.greaterThan,jni::EncodeArtMethod&lt;kEnableIndexIds&gt;(ArtMethod::FromReflectedMethod(soa, jlr_method)))<SUB>591</SUB>> ]
-"1109" [label = <(&lt;operator&gt;.lessThan,jni::EncodeArtMethod&lt;kEnableIndexIds)<SUB>591</SUB>> ]
-"1114" [label = <(ArtMethod::FromReflectedMethod,ArtMethod::FromReflectedMethod(soa, jlr_method))<SUB>591</SUB>> ]
-"1090" [label = <(UNLIKELY,UNLIKELY((jlr_method) == nullptr))<SUB>589</SUB>> ]
-"1110" [label = <(&lt;operator&gt;.fieldAccess,jni::EncodeArtMethod)<SUB>591</SUB>> ]
-"1115" [label = <(&lt;operator&gt;.fieldAccess,ArtMethod::FromReflectedMethod)<SUB>591</SUB>> ]
-"1091" [label = <(&lt;operator&gt;.equals,(jlr_method) == nullptr)<SUB>589</SUB>> ]
-"1095" [label = <(CHECK_NON_NULL_ARGUMENT(jlr_method),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;jlr_method == null&quot;))<SUB>589</SUB>> ]
-"1102" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(jlr_method),CHECK_NON_NULL_ARGUMENT(jlr_method))<SUB>589</SUB>> ]
-"1112" [label = <(FIELD_IDENTIFIER,EncodeArtMethod,EncodeArtMethod)<SUB>591</SUB>> ]
-"1117" [label = <(FIELD_IDENTIFIER,FromReflectedMethod,FromReflectedMethod)<SUB>591</SUB>> ]
-"1096" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>589</SUB>> ]
-"1097" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>589</SUB>> ]
-"1099" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>589</SUB>> ]
-"1082" [label = <(METHOD,FromReflectedMethod)<SUB>588</SUB>> ]
-"1120" [label = <(METHOD_RETURN,jmethodID)<SUB>588</SUB>> ]
-  "1086" -> "1091" 
-  "1086" -> "1105" 
-  "1105" -> "1112" 
-  "1107" -> "1120" 
-  "1108" -> "1107" 
-  "1109" -> "1117" 
-  "1114" -> "1108" 
-  "1090" -> "1097" 
-  "1090" -> "1105" 
-  "1110" -> "1109" 
-  "1115" -> "1114" 
-  "1091" -> "1090" 
-  "1095" -> "1102" 
-  "1102" -> "1120" 
-  "1112" -> "1110" 
-  "1117" -> "1115" 
-  "1096" -> "1095" 
-  "1097" -> "1099" 
-  "1099" -> "1096" 
-  "1082" -> "1086" 
+digraph "GetObjectClass" {  
+"1184" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_object))<SUB>552</SUB>> ]
+"1203" [label = <(soa,soa(env))<SUB>553</SUB>> ]
+"1205" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; o = soa.Decode&lt;mirror::Object&gt;(java_object))<SUB>554</SUB>> ]
+"1222" [label = <(RETURN,return soa.AddLocalReference&lt;jclass&gt;(o-&gt;GetClass());,return soa.AddLocalReference&lt;jclass&gt;(o-&gt;GetClass());)<SUB>555</SUB>> ]
+"1206" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; o)<SUB>554</SUB>> ]
+"1213" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(java_object))<SUB>554</SUB>> ]
+"1223" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jclass&gt;(o-&gt;GetClass()))<SUB>555</SUB>> ]
+"1207" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>554</SUB>> ]
+"1214" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>554</SUB>> ]
+"1224" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jclass)<SUB>555</SUB>> ]
+"1229" [label = <(GetClass,o-&gt;GetClass())<SUB>555</SUB>> ]
+"1188" [label = <(UNLIKELY,UNLIKELY((java_object) == nullptr))<SUB>552</SUB>> ]
+"1209" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>554</SUB>> ]
+"1215" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>554</SUB>> ]
+"1218" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>554</SUB>> ]
+"1225" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>555</SUB>> ]
+"1230" [label = <(&lt;operator&gt;.indirectFieldAccess,o-&gt;GetClass)<SUB>555</SUB>> ]
+"1189" [label = <(&lt;operator&gt;.equals,(java_object) == nullptr)<SUB>552</SUB>> ]
+"1193" [label = <(CHECK_NON_NULL_ARGUMENT(java_object),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_object == null&quot;))<SUB>552</SUB>> ]
+"1200" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_object),CHECK_NON_NULL_ARGUMENT(java_object))<SUB>552</SUB>> ]
+"1211" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>554</SUB>> ]
+"1217" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>554</SUB>> ]
+"1220" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>554</SUB>> ]
+"1227" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>555</SUB>> ]
+"1232" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>555</SUB>> ]
+"1194" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>552</SUB>> ]
+"1195" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>552</SUB>> ]
+"1197" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>552</SUB>> ]
+"1180" [label = <(METHOD,GetObjectClass)<SUB>551</SUB>> ]
+"1233" [label = <(METHOD_RETURN,jclass)<SUB>551</SUB>> ]
+  "1184" -> "1189" 
+  "1184" -> "1203" 
+  "1203" -> "1211" 
+  "1205" -> "1227" 
+  "1222" -> "1233" 
+  "1206" -> "1217" 
+  "1213" -> "1205" 
+  "1223" -> "1222" 
+  "1207" -> "1206" 
+  "1214" -> "1213" 
+  "1224" -> "1232" 
+  "1229" -> "1223" 
+  "1188" -> "1195" 
+  "1188" -> "1203" 
+  "1209" -> "1207" 
+  "1215" -> "1220" 
+  "1218" -> "1214" 
+  "1225" -> "1224" 
+  "1230" -> "1229" 
+  "1189" -> "1188" 
+  "1193" -> "1200" 
+  "1200" -> "1233" 
+  "1211" -> "1209" 
+  "1217" -> "1215" 
+  "1220" -> "1218" 
+  "1227" -> "1225" 
+  "1232" -> "1230" 
+  "1194" -> "1193" 
+  "1195" -> "1197" 
+  "1197" -> "1194" 
+  "1180" -> "1184" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/300-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/300-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/300-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/300-cfg.dot	2023-06-07 19:35:08.177386501 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.assignment" {  
-"18299" [label = <(METHOD,&lt;operator&gt;.assignment)> ]
-"18303" [label = <(METHOD_RETURN,ANY)> ]
-  "18299" -> "18303" 
+digraph "&lt;operator&gt;.fieldAccess" {  
+"17944" [label = <(METHOD,&lt;operator&gt;.fieldAccess)> ]
+"17948" [label = <(METHOD_RETURN,ANY)> ]
+  "17944" -> "17948" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/301-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/301-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/301-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/301-cfg.dot	2023-06-07 19:35:08.177386501 +0330
@@ -1,5 +1,5 @@
-digraph "DCHECK_LE" {  
-"18304" [label = <(METHOD,DCHECK_LE)> ]
-"18308" [label = <(METHOD_RETURN,ANY)> ]
-  "18304" -> "18308" 
+digraph "&lt;operator&gt;.equals" {  
+"17949" [label = <(METHOD,&lt;operator&gt;.equals)> ]
+"17953" [label = <(METHOD_RETURN,ANY)> ]
+  "17949" -> "17953" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/302-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/302-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/302-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/302-cfg.dot	2023-06-07 19:35:08.177386501 +0330
@@ -1,5 +1,5 @@
-digraph "strlen" {  
-"18309" [label = <(METHOD,strlen)> ]
-"18312" [label = <(METHOD_RETURN,ANY)> ]
-  "18309" -> "18312" 
+digraph "&lt;operator&gt;.indirectIndexAccess" {  
+"17954" [label = <(METHOD,&lt;operator&gt;.indirectIndexAccess)> ]
+"17958" [label = <(METHOD_RETURN,ANY)> ]
+  "17954" -> "17958" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/303-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/303-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/303-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/303-cfg.dot	2023-06-07 19:35:08.177386501 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.addition" {  
-"18313" [label = <(METHOD,&lt;operator&gt;.addition)> ]
-"18317" [label = <(METHOD_RETURN,ANY)> ]
-  "18313" -> "18317" 
+digraph "&lt;operator&gt;.assignmentPlus" {  
+"17959" [label = <(METHOD,&lt;operator&gt;.assignmentPlus)> ]
+"17963" [label = <(METHOD_RETURN,ANY)> ]
+  "17959" -> "17963" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/304-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/304-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/304-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/304-cfg.dot	2023-06-07 19:35:08.177386501 +0330
@@ -1,5 +1,5 @@
 digraph "&lt;operator&gt;.notEquals" {  
-"18318" [label = <(METHOD,&lt;operator&gt;.notEquals)> ]
-"18322" [label = <(METHOD_RETURN,ANY)> ]
-  "18318" -> "18322" 
+"17964" [label = <(METHOD,&lt;operator&gt;.notEquals)> ]
+"17968" [label = <(METHOD_RETURN,ANY)> ]
+  "17964" -> "17968" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/305-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/305-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/305-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/305-cfg.dot	2023-06-07 19:35:08.177386501 +0330
@@ -1,5 +1,5 @@
-digraph "LIKELY" {  
-"18323" [label = <(METHOD,LIKELY)> ]
-"18326" [label = <(METHOD_RETURN,ANY)> ]
-  "18323" -> "18326" 
+digraph "find" {  
+"17969" [label = <(METHOD,find)> ]
+"17973" [label = <(METHOD_RETURN,ANY)> ]
+  "17969" -> "17973" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/306-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/306-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/306-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/306-cfg.dot	2023-06-07 19:35:08.177386501 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.equals" {  
-"18327" [label = <(METHOD,&lt;operator&gt;.equals)> ]
-"18331" [label = <(METHOD_RETURN,ANY)> ]
-  "18327" -> "18331" 
+digraph "&lt;operator&gt;.shiftLeft" {  
+"17974" [label = <(METHOD,&lt;operator&gt;.shiftLeft)> ]
+"17978" [label = <(METHOD_RETURN,ANY)> ]
+  "17974" -> "17978" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/307-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/307-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/307-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/307-cfg.dot	2023-06-07 19:35:08.177386501 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.and" {  
-"18332" [label = <(METHOD,&lt;operator&gt;.and)> ]
-"18336" [label = <(METHOD_RETURN,ANY)> ]
-  "18332" -> "18336" 
+digraph "LOG" {  
+"17979" [label = <(METHOD,LOG)> ]
+"17982" [label = <(METHOD_RETURN,ANY)> ]
+  "17979" -> "17982" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/308-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/308-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/308-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/308-cfg.dot	2023-06-07 19:35:08.177386501 +0330
@@ -1,5 +1,5 @@
-digraph "good" {  
-"18337" [label = <(METHOD,good)> ]
-"18341" [label = <(METHOD_RETURN,ANY)> ]
-  "18337" -> "18341" 
+digraph "std::replace" {  
+"17983" [label = <(METHOD,std::replace)> ]
+"17990" [label = <(METHOD_RETURN,ANY)> ]
+  "17983" -> "17990" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/309-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/309-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/309-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/309-cfg.dot	2023-06-07 19:35:08.177386501 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.assignmentPlus" {  
-"18342" [label = <(METHOD,&lt;operator&gt;.assignmentPlus)> ]
-"18346" [label = <(METHOD_RETURN,ANY)> ]
-  "18342" -> "18346" 
+digraph "begin" {  
+"17991" [label = <(METHOD,begin)> ]
+"17994" [label = <(METHOD_RETURN,ANY)> ]
+  "17991" -> "17994" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/31-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/31-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/31-cfg.dot	2023-06-07 19:35:01.357387176 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/31-cfg.dot	2023-06-07 19:35:07.927386526 +0330
@@ -1,100 +1,72 @@
-digraph "FromReflectedField" {  
-"1126" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(jlr_field))<SUB>595</SUB>> ]
-"1145" [label = <(soa,soa(env))<SUB>596</SUB>> ]
-"1147" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; obj_field = soa.Decode&lt;mirror::Object&gt;(jlr_field))<SUB>597</SUB>> ]
-"1174" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Field&gt; field = ObjPtr&lt;mirror::Field&gt;::DownCast(obj_field))<SUB>602</SUB>> ]
-"1193" [label = <(RETURN,return jni::EncodeArtField&lt;kEnableIndexIds&gt;(field-&gt;GetArtField());,return jni::EncodeArtField&lt;kEnableIndexIds&gt;(field-&gt;GetArtField());)<SUB>603</SUB>> ]
-"1148" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; obj_field)<SUB>597</SUB>> ]
-"1155" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(jlr_field))<SUB>597</SUB>> ]
-"1165" [label = <(&lt;operator&gt;.notEquals,obj_field-&gt;GetClass() != GetClassRoot&lt;mirror::Field&gt;())<SUB>598</SUB>> ]
-"1175" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Field&gt; field)<SUB>602</SUB>> ]
-"1182" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Field&gt;::DownCast(obj_field))<SUB>602</SUB>> ]
-"1194" [label = <(&lt;operator&gt;.greaterThan,jni::EncodeArtField&lt;kEnableIndexIds&gt;(field-&gt;GetArtField()))<SUB>603</SUB>> ]
-"1149" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>597</SUB>> ]
-"1156" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>597</SUB>> ]
-"1166" [label = <(GetClass,obj_field-&gt;GetClass())<SUB>598</SUB>> ]
-"1170" [label = <(GetClassRoot&lt;mirror::Field&gt;,GetClassRoot&lt;mirror::Field&gt;())<SUB>598</SUB>> ]
-"1172" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>600</SUB>> ]
-"1176" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Field)<SUB>602</SUB>> ]
-"1183" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Field)<SUB>602</SUB>> ]
-"1188" [label = <(::DownCast,::DownCast(obj_field))<SUB>602</SUB>> ]
-"1195" [label = <(&lt;operator&gt;.lessThan,jni::EncodeArtField&lt;kEnableIndexIds)<SUB>603</SUB>> ]
-"1200" [label = <(GetArtField,field-&gt;GetArtField())<SUB>603</SUB>> ]
-"1130" [label = <(UNLIKELY,UNLIKELY((jlr_field) == nullptr))<SUB>595</SUB>> ]
-"1151" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>597</SUB>> ]
-"1157" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>597</SUB>> ]
-"1160" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>597</SUB>> ]
-"1167" [label = <(&lt;operator&gt;.indirectFieldAccess,obj_field-&gt;GetClass)<SUB>598</SUB>> ]
-"1178" [label = <(&lt;operator&gt;.fieldAccess,mirror::Field)<SUB>602</SUB>> ]
-"1185" [label = <(&lt;operator&gt;.fieldAccess,mirror::Field)<SUB>602</SUB>> ]
-"1189" [label = <(&lt;operator&gt;.fieldAccess,::DownCast)<SUB>602</SUB>> ]
-"1196" [label = <(&lt;operator&gt;.fieldAccess,jni::EncodeArtField)<SUB>603</SUB>> ]
-"1201" [label = <(&lt;operator&gt;.indirectFieldAccess,field-&gt;GetArtField)<SUB>603</SUB>> ]
-"1131" [label = <(&lt;operator&gt;.equals,(jlr_field) == nullptr)<SUB>595</SUB>> ]
-"1135" [label = <(CHECK_NON_NULL_ARGUMENT(jlr_field),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;jlr_field == null&quot;))<SUB>595</SUB>> ]
-"1142" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(jlr_field),CHECK_NON_NULL_ARGUMENT(jlr_field))<SUB>595</SUB>> ]
-"1153" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>597</SUB>> ]
-"1159" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>597</SUB>> ]
-"1162" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>597</SUB>> ]
-"1169" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>598</SUB>> ]
-"1180" [label = <(FIELD_IDENTIFIER,Field,Field)<SUB>602</SUB>> ]
-"1187" [label = <(FIELD_IDENTIFIER,Field,Field)<SUB>602</SUB>> ]
-"1191" [label = <(FIELD_IDENTIFIER,DownCast,DownCast)<SUB>602</SUB>> ]
-"1198" [label = <(FIELD_IDENTIFIER,EncodeArtField,EncodeArtField)<SUB>603</SUB>> ]
-"1203" [label = <(FIELD_IDENTIFIER,GetArtField,GetArtField)<SUB>603</SUB>> ]
-"1136" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>595</SUB>> ]
-"1137" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>595</SUB>> ]
-"1139" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>595</SUB>> ]
-"1122" [label = <(METHOD,FromReflectedField)<SUB>594</SUB>> ]
-"1204" [label = <(METHOD_RETURN,jfieldID)<SUB>594</SUB>> ]
-  "1126" -> "1131" 
-  "1126" -> "1145" 
-  "1145" -> "1153" 
-  "1147" -> "1169" 
-  "1174" -> "1198" 
-  "1193" -> "1204" 
-  "1148" -> "1159" 
-  "1155" -> "1147" 
-  "1165" -> "1172" 
-  "1165" -> "1180" 
-  "1175" -> "1187" 
-  "1182" -> "1174" 
-  "1194" -> "1193" 
-  "1149" -> "1148" 
-  "1156" -> "1155" 
-  "1166" -> "1170" 
-  "1170" -> "1165" 
-  "1172" -> "1204" 
-  "1176" -> "1175" 
-  "1183" -> "1191" 
-  "1188" -> "1182" 
-  "1195" -> "1203" 
-  "1200" -> "1194" 
-  "1130" -> "1137" 
-  "1130" -> "1145" 
-  "1151" -> "1149" 
-  "1157" -> "1162" 
-  "1160" -> "1156" 
-  "1167" -> "1166" 
-  "1178" -> "1176" 
-  "1185" -> "1183" 
-  "1189" -> "1188" 
-  "1196" -> "1195" 
-  "1201" -> "1200" 
-  "1131" -> "1130" 
-  "1135" -> "1142" 
-  "1142" -> "1204" 
-  "1153" -> "1151" 
-  "1159" -> "1157" 
-  "1162" -> "1160" 
-  "1169" -> "1167" 
-  "1180" -> "1178" 
-  "1187" -> "1185" 
-  "1191" -> "1189" 
-  "1198" -> "1196" 
-  "1203" -> "1201" 
-  "1136" -> "1135" 
-  "1137" -> "1139" 
-  "1139" -> "1136" 
-  "1122" -> "1126" 
+digraph "GetSuperclass" {  
+"1239" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_class))<SUB>559</SUB>> ]
+"1258" [label = <(soa,soa(env))<SUB>560</SUB>> ]
+"1260" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c = soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>561</SUB>> ]
+"1277" [label = <(RETURN,return soa.AddLocalReference&lt;jclass&gt;(c-&gt;IsInterface() ? nullptr : c-&gt;GetSuperClass());,return soa.AddLocalReference&lt;jclass&gt;(c-&gt;IsInterface() ? nullptr : c-&gt;GetSuperClass());)<SUB>562</SUB>> ]
+"1261" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c)<SUB>561</SUB>> ]
+"1268" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>561</SUB>> ]
+"1278" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jclass&gt;(c-&gt;IsInterface() ? nullptr : c-&gt;GetSuperClass()))<SUB>562</SUB>> ]
+"1262" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>561</SUB>> ]
+"1269" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>561</SUB>> ]
+"1279" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jclass)<SUB>562</SUB>> ]
+"1284" [label = <(&lt;operator&gt;.conditional,c-&gt;IsInterface() ? nullptr : c-&gt;GetSuperClass())<SUB>562</SUB>> ]
+"1243" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>559</SUB>> ]
+"1264" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>561</SUB>> ]
+"1270" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>561</SUB>> ]
+"1273" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>561</SUB>> ]
+"1280" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>562</SUB>> ]
+"1285" [label = <(IsInterface,c-&gt;IsInterface())<SUB>562</SUB>> ]
+"1290" [label = <(GetSuperClass,c-&gt;GetSuperClass())<SUB>562</SUB>> ]
+"1244" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>559</SUB>> ]
+"1248" [label = <(CHECK_NON_NULL_ARGUMENT(java_class),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class == null&quot;))<SUB>559</SUB>> ]
+"1255" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_class),CHECK_NON_NULL_ARGUMENT(java_class))<SUB>559</SUB>> ]
+"1266" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>561</SUB>> ]
+"1272" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>561</SUB>> ]
+"1275" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>561</SUB>> ]
+"1282" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>562</SUB>> ]
+"1286" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;IsInterface)<SUB>562</SUB>> ]
+"1291" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;GetSuperClass)<SUB>562</SUB>> ]
+"1249" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>559</SUB>> ]
+"1288" [label = <(FIELD_IDENTIFIER,IsInterface,IsInterface)<SUB>562</SUB>> ]
+"1293" [label = <(FIELD_IDENTIFIER,GetSuperClass,GetSuperClass)<SUB>562</SUB>> ]
+"1250" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>559</SUB>> ]
+"1252" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>559</SUB>> ]
+"1235" [label = <(METHOD,GetSuperclass)<SUB>558</SUB>> ]
+"1294" [label = <(METHOD_RETURN,jclass)<SUB>558</SUB>> ]
+  "1239" -> "1244" 
+  "1239" -> "1258" 
+  "1258" -> "1266" 
+  "1260" -> "1282" 
+  "1277" -> "1294" 
+  "1261" -> "1272" 
+  "1268" -> "1260" 
+  "1278" -> "1277" 
+  "1262" -> "1261" 
+  "1269" -> "1268" 
+  "1279" -> "1288" 
+  "1284" -> "1278" 
+  "1243" -> "1250" 
+  "1243" -> "1258" 
+  "1264" -> "1262" 
+  "1270" -> "1275" 
+  "1273" -> "1269" 
+  "1280" -> "1279" 
+  "1285" -> "1284" 
+  "1285" -> "1293" 
+  "1290" -> "1284" 
+  "1244" -> "1243" 
+  "1248" -> "1255" 
+  "1255" -> "1294" 
+  "1266" -> "1264" 
+  "1272" -> "1270" 
+  "1275" -> "1273" 
+  "1282" -> "1280" 
+  "1286" -> "1285" 
+  "1291" -> "1290" 
+  "1249" -> "1248" 
+  "1288" -> "1286" 
+  "1293" -> "1291" 
+  "1250" -> "1252" 
+  "1252" -> "1249" 
+  "1235" -> "1239" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/310-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/310-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/310-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/310-cfg.dot	2023-06-07 19:35:08.177386501 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.lessThan" {  
-"18347" [label = <(METHOD,&lt;operator&gt;.lessThan)> ]
-"18351" [label = <(METHOD_RETURN,ANY)> ]
-  "18347" -> "18351" 
+digraph "end" {  
+"17995" [label = <(METHOD,end)> ]
+"17998" [label = <(METHOD_RETURN,ANY)> ]
+  "17995" -> "17998" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/311-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/311-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/311-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/311-cfg.dot	2023-06-07 19:35:08.177386501 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.cast" {  
-"18352" [label = <(METHOD,&lt;operator&gt;.cast)> ]
-"18356" [label = <(METHOD_RETURN,ANY)> ]
-  "18352" -> "18356" 
+digraph "&lt;operator&gt;.greaterThan" {  
+"17999" [label = <(METHOD,&lt;operator&gt;.greaterThan)> ]
+"18003" [label = <(METHOD_RETURN,ANY)> ]
+  "17999" -> "18003" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/312-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/312-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/312-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/312-cfg.dot	2023-06-07 19:35:08.177386501 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.subtraction" {  
-"18357" [label = <(METHOD,&lt;operator&gt;.subtraction)> ]
-"18361" [label = <(METHOD_RETURN,ANY)> ]
-  "18357" -> "18361" 
+digraph "&lt;operator&gt;.lessThan" {  
+"18004" [label = <(METHOD,&lt;operator&gt;.lessThan)> ]
+"18008" [label = <(METHOD_RETURN,ANY)> ]
+  "18004" -> "18008" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/313-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/313-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/313-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/313-cfg.dot	2023-06-07 19:35:08.177386501 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.conditional" {  
-"18362" [label = <(METHOD,&lt;operator&gt;.conditional)> ]
-"18367" [label = <(METHOD_RETURN,ANY)> ]
-  "18362" -> "18367" 
+digraph "GetSystemClassLoader" {  
+"18009" [label = <(METHOD,GetSystemClassLoader)> ]
+"18012" [label = <(METHOD_RETURN,ANY)> ]
+  "18009" -> "18012" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/314-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/314-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/314-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/314-cfg.dot	2023-06-07 19:35:08.177386501 +0330
@@ -1,5 +1,5 @@
-digraph "bad" {  
-"18368" [label = <(METHOD,bad)> ]
-"18370" [label = <(METHOD_RETURN,ANY)> ]
-  "18368" -> "18370" 
+digraph "h_klass" {  
+"18013" [label = <(METHOD,h_klass)> ]
+"18016" [label = <(METHOD_RETURN,ANY)> ]
+  "18013" -> "18016" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/315-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/315-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/315-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/315-cfg.dot	2023-06-07 19:35:08.177386501 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.logicalAnd" {  
-"18371" [label = <(METHOD,&lt;operator&gt;.logicalAnd)> ]
-"18375" [label = <(METHOD_RETURN,ANY)> ]
-  "18371" -> "18375" 
+digraph "NewHandle" {  
+"18017" [label = <(METHOD,NewHandle)> ]
+"18021" [label = <(METHOD_RETURN,ANY)> ]
+  "18017" -> "18021" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/316-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/316-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/316-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/316-cfg.dot	2023-06-07 19:35:08.177386501 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.fieldAccess" {  
-"18376" [label = <(METHOD,&lt;operator&gt;.fieldAccess)> ]
-"18380" [label = <(METHOD_RETURN,ANY)> ]
-  "18376" -> "18380" 
+digraph "Self" {  
+"18022" [label = <(METHOD,Self)> ]
+"18025" [label = <(METHOD_RETURN,ANY)> ]
+  "18022" -> "18025" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/317-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/317-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/317-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/317-cfg.dot	2023-06-07 19:35:08.177386501 +0330
@@ -1,5 +1,5 @@
-digraph "is_ascii" {  
-"18381" [label = <(METHOD,is_ascii)> ]
-"18383" [label = <(METHOD_RETURN,ANY)> ]
-  "18381" -> "18383" 
+digraph "GetImagePointerSize" {  
+"18026" [label = <(METHOD,GetImagePointerSize)> ]
+"18029" [label = <(METHOD_RETURN,ANY)> ]
+  "18026" -> "18029" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/318-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/318-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/318-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/318-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "GetInstrumentation" {  
-"18384" [label = <(METHOD,GetInstrumentation)> ]
-"18387" [label = <(METHOD_RETURN,ANY)> ]
-  "18384" -> "18387" 
+digraph "GetClassLinker" {  
+"18030" [label = <(METHOD,GetClassLinker)> ]
+"18033" [label = <(METHOD_RETURN,ANY)> ]
+  "18030" -> "18033" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/319-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/319-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/319-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/319-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.indirectFieldAccess" {  
-"18388" [label = <(METHOD,&lt;operator&gt;.indirectFieldAccess)> ]
-"18392" [label = <(METHOD_RETURN,ANY)> ]
-  "18388" -> "18392" 
+digraph "IsInterface" {  
+"18034" [label = <(METHOD,IsInterface)> ]
+"18037" [label = <(METHOD_RETURN,ANY)> ]
+  "18034" -> "18037" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/32-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/32-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/32-cfg.dot	2023-06-07 19:35:01.357387176 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/32-cfg.dot	2023-06-07 19:35:07.927386526 +0330
@@ -1,126 +1,97 @@
-digraph "ToReflectedMethod" {  
-"1212" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>607</SUB>> ]
-"1231" [label = <(soa,soa(env))<SUB>608</SUB>> ]
-"1234" [label = <(&lt;operator&gt;.assignment,* m = jni::DecodeArtMethod(mid))<SUB>609</SUB>> ]
-"1241" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Executable&gt; method)<SUB>610</SUB>> ]
-"1248" [label = <(DCHECK_EQ,DCHECK_EQ(Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize(), kRuntimePointerSize))<SUB>611</SUB>> ]
-"1260" [label = <(DCHECK,DCHECK(!Runtime::Current()-&gt;IsActiveTransaction()))<SUB>612</SUB>> ]
-"1303" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(method);,return soa.AddLocalReference&lt;jobject&gt;(method);)<SUB>618</SUB>> ]
-"1236" [label = <(jni::DecodeArtMethod,jni::DecodeArtMethod(mid))<SUB>609</SUB>> ]
-"1242" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Executable)<SUB>610</SUB>> ]
-"1249" [label = <(GetImagePointerSize,Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize())<SUB>611</SUB>> ]
-"1261" [label = <(&lt;operator&gt;.logicalNot,!Runtime::Current()-&gt;IsActiveTransaction())<SUB>612</SUB>> ]
-"1270" [label = <(IsConstructor,m-&gt;IsConstructor())<SUB>613</SUB>> ]
-"1304" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(method))<SUB>618</SUB>> ]
-"1237" [label = <(&lt;operator&gt;.fieldAccess,jni::DecodeArtMethod)<SUB>609</SUB>> ]
-"1244" [label = <(&lt;operator&gt;.fieldAccess,mirror::Executable)<SUB>610</SUB>> ]
-"1250" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize)<SUB>611</SUB>> ]
-"1262" [label = <(IsActiveTransaction,Runtime::Current()-&gt;IsActiveTransaction())<SUB>612</SUB>> ]
-"1271" [label = <(&lt;operator&gt;.indirectFieldAccess,m-&gt;IsConstructor)<SUB>613</SUB>> ]
-"1275" [label = <(&lt;operator&gt;.assignment,method = mirror::Constructor::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;(soa.Self(), m))<SUB>614</SUB>> ]
-"1305" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>618</SUB>> ]
-"1216" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>607</SUB>> ]
-"1239" [label = <(FIELD_IDENTIFIER,DecodeArtMethod,DecodeArtMethod)<SUB>609</SUB>> ]
-"1246" [label = <(FIELD_IDENTIFIER,Executable,Executable)<SUB>610</SUB>> ]
-"1251" [label = <(GetClassLinker,Runtime::Current()-&gt;GetClassLinker())<SUB>611</SUB>> ]
-"1258" [label = <(FIELD_IDENTIFIER,GetImagePointerSize,GetImagePointerSize)<SUB>611</SUB>> ]
-"1263" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;IsActiveTransaction)<SUB>612</SUB>> ]
-"1273" [label = <(FIELD_IDENTIFIER,IsConstructor,IsConstructor)<SUB>613</SUB>> ]
-"1277" [label = <(mirror::Constructor::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;,mirror::Constructor::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;(soa.Self(), m))<SUB>614</SUB>> ]
-"1290" [label = <(&lt;operator&gt;.assignment,method = mirror::Method::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;(soa.Self(), m))<SUB>616</SUB>> ]
-"1306" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>618</SUB>> ]
-"1217" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>607</SUB>> ]
-"1221" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>607</SUB>> ]
-"1228" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>607</SUB>> ]
-"1252" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetClassLinker)<SUB>611</SUB>> ]
-"1264" [label = <(Runtime::Current,Runtime::Current())<SUB>612</SUB>> ]
-"1268" [label = <(FIELD_IDENTIFIER,IsActiveTransaction,IsActiveTransaction)<SUB>612</SUB>> ]
-"1278" [label = <(&lt;operator&gt;.fieldAccess,mirror::Constructor::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;)<SUB>614</SUB>> ]
-"1283" [label = <(Self,soa.Self())<SUB>614</SUB>> ]
-"1292" [label = <(mirror::Method::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;,mirror::Method::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;(soa.Self(), m))<SUB>616</SUB>> ]
-"1308" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>618</SUB>> ]
-"1222" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>607</SUB>> ]
-"1253" [label = <(Runtime::Current,Runtime::Current())<SUB>611</SUB>> ]
-"1257" [label = <(FIELD_IDENTIFIER,GetClassLinker,GetClassLinker)<SUB>611</SUB>> ]
-"1265" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>612</SUB>> ]
-"1279" [label = <(&lt;operator&gt;.fieldAccess,mirror::Constructor)<SUB>614</SUB>> ]
-"1282" [label = <(FIELD_IDENTIFIER,CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;,CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;)<SUB>614</SUB>> ]
-"1284" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>614</SUB>> ]
-"1293" [label = <(&lt;operator&gt;.fieldAccess,mirror::Method::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;)<SUB>616</SUB>> ]
-"1298" [label = <(Self,soa.Self())<SUB>616</SUB>> ]
-"1223" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>607</SUB>> ]
-"1225" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>607</SUB>> ]
-"1254" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>611</SUB>> ]
-"1267" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>612</SUB>> ]
-"1286" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>614</SUB>> ]
-"1294" [label = <(&lt;operator&gt;.fieldAccess,mirror::Method)<SUB>616</SUB>> ]
-"1297" [label = <(FIELD_IDENTIFIER,CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;,CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;)<SUB>616</SUB>> ]
-"1299" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>616</SUB>> ]
-"1256" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>611</SUB>> ]
-"1301" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>616</SUB>> ]
-"1206" [label = <(METHOD,ToReflectedMethod)<SUB>606</SUB>> ]
-"1311" [label = <(METHOD_RETURN,jobject)<SUB>606</SUB>> ]
-  "1212" -> "1217" 
-  "1212" -> "1231" 
-  "1231" -> "1239" 
-  "1234" -> "1246" 
-  "1241" -> "1256" 
-  "1248" -> "1267" 
-  "1260" -> "1273" 
-  "1303" -> "1311" 
-  "1236" -> "1234" 
-  "1242" -> "1241" 
-  "1249" -> "1248" 
-  "1261" -> "1260" 
-  "1270" -> "1279" 
-  "1270" -> "1294" 
-  "1304" -> "1303" 
-  "1237" -> "1236" 
-  "1244" -> "1242" 
-  "1250" -> "1249" 
-  "1262" -> "1261" 
-  "1271" -> "1270" 
-  "1275" -> "1308" 
-  "1305" -> "1304" 
-  "1216" -> "1223" 
-  "1216" -> "1231" 
-  "1239" -> "1237" 
-  "1246" -> "1244" 
-  "1251" -> "1258" 
-  "1258" -> "1250" 
-  "1263" -> "1262" 
-  "1273" -> "1271" 
-  "1277" -> "1275" 
-  "1290" -> "1308" 
-  "1306" -> "1305" 
-  "1217" -> "1216" 
-  "1221" -> "1228" 
-  "1228" -> "1311" 
-  "1252" -> "1251" 
-  "1264" -> "1268" 
-  "1268" -> "1263" 
-  "1278" -> "1286" 
-  "1283" -> "1277" 
-  "1292" -> "1290" 
-  "1308" -> "1306" 
-  "1222" -> "1221" 
-  "1253" -> "1257" 
-  "1257" -> "1252" 
-  "1265" -> "1264" 
-  "1279" -> "1282" 
-  "1282" -> "1278" 
-  "1284" -> "1283" 
-  "1293" -> "1301" 
-  "1298" -> "1292" 
-  "1223" -> "1225" 
-  "1225" -> "1222" 
-  "1254" -> "1253" 
-  "1267" -> "1265" 
-  "1286" -> "1284" 
-  "1294" -> "1297" 
-  "1297" -> "1293" 
-  "1299" -> "1298" 
-  "1256" -> "1254" 
-  "1301" -> "1299" 
-  "1206" -> "1212" 
+digraph "IsAssignableFrom" {  
+"1301" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(java_class1, JNI_FALSE))<SUB>568</SUB>> ]
+"1320" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(java_class2, JNI_FALSE))<SUB>569</SUB>> ]
+"1340" [label = <(soa,soa(env))<SUB>570</SUB>> ]
+"1342" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c1 = soa.Decode&lt;mirror::Class&gt;(java_class1))<SUB>571</SUB>> ]
+"1359" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c2 = soa.Decode&lt;mirror::Class&gt;(java_class2))<SUB>572</SUB>> ]
+"1376" [label = <(RETURN,return c2-&gt;IsAssignableFrom(c1) ? JNI_TRUE : JNI_FALSE;,return c2-&gt;IsAssignableFrom(c1) ? JNI_TRUE : JNI_FALSE;)<SUB>573</SUB>> ]
+"1343" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c1)<SUB>571</SUB>> ]
+"1350" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(java_class1))<SUB>571</SUB>> ]
+"1360" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c2)<SUB>572</SUB>> ]
+"1367" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(java_class2))<SUB>572</SUB>> ]
+"1377" [label = <(&lt;operator&gt;.conditional,c2-&gt;IsAssignableFrom(c1) ? JNI_TRUE : JNI_FALSE)<SUB>573</SUB>> ]
+"1344" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>571</SUB>> ]
+"1351" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>571</SUB>> ]
+"1361" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>572</SUB>> ]
+"1368" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>572</SUB>> ]
+"1378" [label = <(IsAssignableFrom,c2-&gt;IsAssignableFrom(c1))<SUB>573</SUB>> ]
+"1306" [label = <(UNLIKELY,UNLIKELY((java_class1) == nullptr))<SUB>568</SUB>> ]
+"1325" [label = <(UNLIKELY,UNLIKELY((java_class2) == nullptr))<SUB>569</SUB>> ]
+"1346" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>571</SUB>> ]
+"1352" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>571</SUB>> ]
+"1355" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>571</SUB>> ]
+"1363" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>572</SUB>> ]
+"1369" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>572</SUB>> ]
+"1372" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>572</SUB>> ]
+"1379" [label = <(&lt;operator&gt;.indirectFieldAccess,c2-&gt;IsAssignableFrom)<SUB>573</SUB>> ]
+"1307" [label = <(&lt;operator&gt;.equals,(java_class1) == nullptr)<SUB>568</SUB>> ]
+"1311" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN(java_class1, JNI_FALSE),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class1 == null&quot;))<SUB>568</SUB>> ]
+"1318" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(java_class1, JNI_FALSE),CHECK_NON_NULL_ARGUMENT_RETURN(java_class1, JNI_FALSE))<SUB>568</SUB>> ]
+"1326" [label = <(&lt;operator&gt;.equals,(java_class2) == nullptr)<SUB>569</SUB>> ]
+"1330" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN(java_class2, JNI_FALSE),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class2 == null&quot;))<SUB>569</SUB>> ]
+"1337" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(java_class2, JNI_FALSE),CHECK_NON_NULL_ARGUMENT_RETURN(java_class2, JNI_FALSE))<SUB>569</SUB>> ]
+"1348" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>571</SUB>> ]
+"1354" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>571</SUB>> ]
+"1357" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>571</SUB>> ]
+"1365" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>572</SUB>> ]
+"1371" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>572</SUB>> ]
+"1374" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>572</SUB>> ]
+"1381" [label = <(FIELD_IDENTIFIER,IsAssignableFrom,IsAssignableFrom)<SUB>573</SUB>> ]
+"1312" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>568</SUB>> ]
+"1331" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>569</SUB>> ]
+"1313" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>568</SUB>> ]
+"1315" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>568</SUB>> ]
+"1332" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>569</SUB>> ]
+"1334" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>569</SUB>> ]
+"1296" [label = <(METHOD,IsAssignableFrom)<SUB>567</SUB>> ]
+"1385" [label = <(METHOD_RETURN,jboolean)<SUB>567</SUB>> ]
+  "1301" -> "1307" 
+  "1301" -> "1320" 
+  "1320" -> "1326" 
+  "1320" -> "1340" 
+  "1340" -> "1348" 
+  "1342" -> "1365" 
+  "1359" -> "1381" 
+  "1376" -> "1385" 
+  "1343" -> "1354" 
+  "1350" -> "1342" 
+  "1360" -> "1371" 
+  "1367" -> "1359" 
+  "1377" -> "1376" 
+  "1344" -> "1343" 
+  "1351" -> "1350" 
+  "1361" -> "1360" 
+  "1368" -> "1367" 
+  "1378" -> "1377" 
+  "1306" -> "1313" 
+  "1306" -> "1320" 
+  "1325" -> "1332" 
+  "1325" -> "1340" 
+  "1346" -> "1344" 
+  "1352" -> "1357" 
+  "1355" -> "1351" 
+  "1363" -> "1361" 
+  "1369" -> "1374" 
+  "1372" -> "1368" 
+  "1379" -> "1378" 
+  "1307" -> "1306" 
+  "1311" -> "1318" 
+  "1318" -> "1385" 
+  "1326" -> "1325" 
+  "1330" -> "1337" 
+  "1337" -> "1385" 
+  "1348" -> "1346" 
+  "1354" -> "1352" 
+  "1357" -> "1355" 
+  "1365" -> "1363" 
+  "1371" -> "1369" 
+  "1374" -> "1372" 
+  "1381" -> "1379" 
+  "1312" -> "1311" 
+  "1331" -> "1330" 
+  "1313" -> "1315" 
+  "1315" -> "1312" 
+  "1332" -> "1334" 
+  "1334" -> "1331" 
+  "1296" -> "1301" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/320-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/320-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/320-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/320-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "Runtime::Current" {  
-"18393" [label = <(METHOD,Runtime::Current)> ]
-"18396" [label = <(METHOD_RETURN,ANY)> ]
-  "18393" -> "18396" 
+digraph "FindInterfaceMethod" {  
+"18038" [label = <(METHOD,FindInterfaceMethod)> ]
+"18044" [label = <(METHOD_RETURN,ANY)> ]
+  "18038" -> "18044" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/321-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/321-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/321-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/321-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.indirectIndexAccess" {  
-"18397" [label = <(METHOD,&lt;operator&gt;.indirectIndexAccess)> ]
-"18401" [label = <(METHOD_RETURN,ANY)> ]
-  "18397" -> "18401" 
+digraph "FindClassMethod" {  
+"18045" [label = <(METHOD,FindClassMethod)> ]
+"18051" [label = <(METHOD_RETURN,ANY)> ]
+  "18045" -> "18051" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/322-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/322-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/322-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/322-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "find" {  
-"18402" [label = <(METHOD,find)> ]
-"18406" [label = <(METHOD_RETURN,ANY)> ]
-  "18402" -> "18406" 
+digraph "&lt;operator&gt;.logicalAnd" {  
+"18052" [label = <(METHOD,&lt;operator&gt;.logicalAnd)> ]
+"18056" [label = <(METHOD_RETURN,ANY)> ]
+  "18052" -> "18056" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/323-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/323-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/323-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/323-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.shiftLeft" {  
-"18407" [label = <(METHOD,&lt;operator&gt;.shiftLeft)> ]
-"18411" [label = <(METHOD_RETURN,ANY)> ]
-  "18407" -> "18411" 
+digraph "ShouldDenyAccessToMember" {  
+"18057" [label = <(METHOD,ShouldDenyAccessToMember)> ]
+"18061" [label = <(METHOD_RETURN,ANY)> ]
+  "18057" -> "18061" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/324-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/324-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/324-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/324-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "LOG" {  
-"18412" [label = <(METHOD,LOG)> ]
-"18415" [label = <(METHOD_RETURN,ANY)> ]
-  "18412" -> "18415" 
+digraph "&lt;operator&gt;.logicalOr" {  
+"18062" [label = <(METHOD,&lt;operator&gt;.logicalOr)> ]
+"18066" [label = <(METHOD_RETURN,ANY)> ]
+  "18062" -> "18066" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/325-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/325-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/325-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/325-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "std::replace" {  
-"18416" [label = <(METHOD,std::replace)> ]
-"18423" [label = <(METHOD_RETURN,ANY)> ]
-  "18416" -> "18423" 
+digraph "IsStatic" {  
+"18067" [label = <(METHOD,IsStatic)> ]
+"18070" [label = <(METHOD_RETURN,ANY)> ]
+  "18067" -> "18070" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/326-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/326-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/326-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/326-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "begin" {  
-"18424" [label = <(METHOD,begin)> ]
-"18427" [label = <(METHOD_RETURN,ANY)> ]
-  "18424" -> "18427" 
+digraph "&lt;operator&gt;.conditional" {  
+"18071" [label = <(METHOD,&lt;operator&gt;.conditional)> ]
+"18076" [label = <(METHOD_RETURN,ANY)> ]
+  "18071" -> "18076" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/327-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/327-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/327-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/327-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "end" {  
-"18428" [label = <(METHOD,end)> ]
-"18431" [label = <(METHOD_RETURN,ANY)> ]
-  "18428" -> "18431" 
+digraph "c" {  
+"18077" [label = <(METHOD,c)> ]
+"18080" [label = <(METHOD_RETURN,ANY)> ]
+  "18077" -> "18080" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/328-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/328-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/328-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/328-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.greaterThan" {  
-"18432" [label = <(METHOD,&lt;operator&gt;.greaterThan)> ]
-"18436" [label = <(METHOD_RETURN,ANY)> ]
-  "18432" -> "18436" 
+digraph "UNLIKELY" {  
+"18081" [label = <(METHOD,UNLIKELY)> ]
+"18084" [label = <(METHOD_RETURN,ANY)> ]
+  "18081" -> "18084" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/329-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/329-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/329-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/329-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "GetSystemClassLoader" {  
-"18437" [label = <(METHOD,GetSystemClassLoader)> ]
-"18440" [label = <(METHOD_RETURN,ANY)> ]
-  "18437" -> "18440" 
+digraph "DCHECK" {  
+"18085" [label = <(METHOD,DCHECK)> ]
+"18088" [label = <(METHOD_RETURN,ANY)> ]
+  "18085" -> "18088" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/33-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/33-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/33-cfg.dot	2023-06-07 19:35:01.357387176 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/33-cfg.dot	2023-06-07 19:35:07.937386524 +0330
@@ -1,63 +1,84 @@
-digraph "ToReflectedField" {  
-"1319" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(fid))<SUB>622</SUB>> ]
-"1338" [label = <(soa,soa(env))<SUB>623</SUB>> ]
-"1341" [label = <(&lt;operator&gt;.assignment,* f = jni::DecodeArtField(fid))<SUB>624</SUB>> ]
-"1348" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(\012        mirror::Field::CreateFromArtField&lt;kRuntimePointerSize&gt;(soa.Self(), f, true));,return soa.AddLocalReference&lt;jobject&gt;(\012        mirror::Field::CreateFromArtField&lt;kRuntimePointerSize&gt;(soa.Self(), f, true));)<SUB>625</SUB>> ]
-"1343" [label = <(jni::DecodeArtField,jni::DecodeArtField(fid))<SUB>624</SUB>> ]
-"1349" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(\012        mirror::Field::CreateFromArtField&lt;kRuntimePointerSize&gt;(soa.Self(), f, true)))<SUB>625</SUB>> ]
-"1344" [label = <(&lt;operator&gt;.fieldAccess,jni::DecodeArtField)<SUB>624</SUB>> ]
-"1350" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>625</SUB>> ]
-"1355" [label = <(&lt;operator&gt;.greaterThan,mirror::Field::CreateFromArtField&lt;kRuntimePointerSize&gt;(soa.Self(), f, true))<SUB>626</SUB>> ]
-"1323" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>622</SUB>> ]
-"1346" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>624</SUB>> ]
-"1351" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>625</SUB>> ]
-"1356" [label = <(&lt;operator&gt;.lessThan,mirror::Field::CreateFromArtField&lt;kRuntimePointerSize)<SUB>626</SUB>> ]
-"1363" [label = <(&lt;operator&gt;.bracketedPrimary,(soa.Self(), f, true))<SUB>626</SUB>> ]
-"1324" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>622</SUB>> ]
-"1328" [label = <(CHECK_NON_NULL_ARGUMENT(fid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>622</SUB>> ]
-"1335" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(fid),CHECK_NON_NULL_ARGUMENT(fid))<SUB>622</SUB>> ]
-"1353" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>625</SUB>> ]
-"1357" [label = <(&lt;operator&gt;.fieldAccess,mirror::Field::CreateFromArtField)<SUB>626</SUB>> ]
-"1364" [label = <(&lt;operator&gt;.expressionList,soa.Self(), f, true)<SUB>626</SUB>> ]
-"1329" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>622</SUB>> ]
-"1358" [label = <(&lt;operator&gt;.fieldAccess,mirror::Field)<SUB>626</SUB>> ]
-"1361" [label = <(FIELD_IDENTIFIER,CreateFromArtField,CreateFromArtField)<SUB>626</SUB>> ]
-"1365" [label = <(Self,soa.Self())<SUB>626</SUB>> ]
-"1330" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>622</SUB>> ]
-"1332" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>622</SUB>> ]
-"1366" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>626</SUB>> ]
-"1368" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>626</SUB>> ]
-"1313" [label = <(METHOD,ToReflectedField)<SUB>621</SUB>> ]
-"1371" [label = <(METHOD_RETURN,jobject)<SUB>621</SUB>> ]
-  "1319" -> "1324" 
-  "1319" -> "1338" 
-  "1338" -> "1346" 
-  "1341" -> "1353" 
-  "1348" -> "1371" 
-  "1343" -> "1341" 
-  "1349" -> "1348" 
-  "1344" -> "1343" 
-  "1350" -> "1358" 
-  "1355" -> "1349" 
-  "1323" -> "1330" 
-  "1323" -> "1338" 
-  "1346" -> "1344" 
-  "1351" -> "1350" 
-  "1356" -> "1368" 
-  "1363" -> "1355" 
-  "1324" -> "1323" 
-  "1328" -> "1335" 
-  "1335" -> "1371" 
-  "1353" -> "1351" 
-  "1357" -> "1356" 
-  "1364" -> "1363" 
-  "1329" -> "1328" 
-  "1358" -> "1361" 
-  "1361" -> "1357" 
-  "1365" -> "1364" 
-  "1330" -> "1332" 
-  "1332" -> "1329" 
-  "1366" -> "1365" 
-  "1368" -> "1366" 
-  "1313" -> "1319" 
+digraph "IsInstanceOf" {  
+"1392" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_FALSE))<SUB>577</SUB>> ]
+"1412" [label = <(&lt;operator&gt;.equals,jobj == nullptr)<SUB>578</SUB>> ]
+"1416" [label = <(RETURN,return JNI_TRUE;,return JNI_TRUE;)<SUB>580</SUB>> ]
+"1397" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>577</SUB>> ]
+"1421" [label = <(soa,soa(env))<SUB>582</SUB>> ]
+"1423" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; obj = soa.Decode&lt;mirror::Object&gt;(jobj))<SUB>583</SUB>> ]
+"1440" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c = soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>584</SUB>> ]
+"1457" [label = <(RETURN,return obj-&gt;InstanceOf(c) ? JNI_TRUE : JNI_FALSE;,return obj-&gt;InstanceOf(c) ? JNI_TRUE : JNI_FALSE;)<SUB>585</SUB>> ]
+"1398" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>577</SUB>> ]
+"1402" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_FALSE),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class == null&quot;))<SUB>577</SUB>> ]
+"1409" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_FALSE),CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_FALSE))<SUB>577</SUB>> ]
+"1424" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; obj)<SUB>583</SUB>> ]
+"1431" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(jobj))<SUB>583</SUB>> ]
+"1441" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c)<SUB>584</SUB>> ]
+"1448" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>584</SUB>> ]
+"1458" [label = <(&lt;operator&gt;.conditional,obj-&gt;InstanceOf(c) ? JNI_TRUE : JNI_FALSE)<SUB>585</SUB>> ]
+"1403" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>577</SUB>> ]
+"1425" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>583</SUB>> ]
+"1432" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>583</SUB>> ]
+"1442" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>584</SUB>> ]
+"1449" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>584</SUB>> ]
+"1459" [label = <(InstanceOf,obj-&gt;InstanceOf(c))<SUB>585</SUB>> ]
+"1404" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>577</SUB>> ]
+"1406" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>577</SUB>> ]
+"1427" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>583</SUB>> ]
+"1433" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>583</SUB>> ]
+"1436" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>583</SUB>> ]
+"1444" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>584</SUB>> ]
+"1450" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>584</SUB>> ]
+"1453" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>584</SUB>> ]
+"1460" [label = <(&lt;operator&gt;.indirectFieldAccess,obj-&gt;InstanceOf)<SUB>585</SUB>> ]
+"1429" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>583</SUB>> ]
+"1435" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>583</SUB>> ]
+"1438" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>583</SUB>> ]
+"1446" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>584</SUB>> ]
+"1452" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>584</SUB>> ]
+"1455" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>584</SUB>> ]
+"1462" [label = <(FIELD_IDENTIFIER,InstanceOf,InstanceOf)<SUB>585</SUB>> ]
+"1387" [label = <(METHOD,IsInstanceOf)<SUB>576</SUB>> ]
+"1466" [label = <(METHOD_RETURN,jboolean)<SUB>576</SUB>> ]
+  "1392" -> "1398" 
+  "1392" -> "1412" 
+  "1412" -> "1416" 
+  "1412" -> "1421" 
+  "1416" -> "1466" 
+  "1397" -> "1404" 
+  "1397" -> "1412" 
+  "1421" -> "1429" 
+  "1423" -> "1446" 
+  "1440" -> "1462" 
+  "1457" -> "1466" 
+  "1398" -> "1397" 
+  "1402" -> "1409" 
+  "1409" -> "1466" 
+  "1424" -> "1435" 
+  "1431" -> "1423" 
+  "1441" -> "1452" 
+  "1448" -> "1440" 
+  "1458" -> "1457" 
+  "1403" -> "1402" 
+  "1425" -> "1424" 
+  "1432" -> "1431" 
+  "1442" -> "1441" 
+  "1449" -> "1448" 
+  "1459" -> "1458" 
+  "1404" -> "1406" 
+  "1406" -> "1403" 
+  "1427" -> "1425" 
+  "1433" -> "1438" 
+  "1436" -> "1432" 
+  "1444" -> "1442" 
+  "1450" -> "1455" 
+  "1453" -> "1449" 
+  "1460" -> "1459" 
+  "1429" -> "1427" 
+  "1435" -> "1433" 
+  "1438" -> "1436" 
+  "1446" -> "1444" 
+  "1452" -> "1450" 
+  "1455" -> "1453" 
+  "1462" -> "1460" 
+  "1387" -> "1392" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/330-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/330-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/330-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/330-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "h_klass" {  
-"18441" [label = <(METHOD,h_klass)> ]
-"18444" [label = <(METHOD_RETURN,ANY)> ]
-  "18441" -> "18444" 
+digraph "class_loader" {  
+"18089" [label = <(METHOD,class_loader)> ]
+"18092" [label = <(METHOD_RETURN,ANY)> ]
+  "18089" -> "18092" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/331-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/331-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/331-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/331-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "NewHandle" {  
-"18445" [label = <(METHOD,NewHandle)> ]
-"18449" [label = <(METHOD_RETURN,ANY)> ]
-  "18445" -> "18449" 
+digraph "FindClass" {  
+"18093" [label = <(METHOD,FindClass)> ]
+"18097" [label = <(METHOD_RETURN,ANY)> ]
+  "18093" -> "18097" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/332-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/332-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/332-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/332-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "Self" {  
-"18450" [label = <(METHOD,Self)> ]
-"18453" [label = <(METHOD_RETURN,ANY)> ]
-  "18450" -> "18453" 
+digraph "FindPrimitiveClass" {  
+"18098" [label = <(METHOD,FindPrimitiveClass)> ]
+"18102" [label = <(METHOD_RETURN,ANY)> ]
+  "18098" -> "18102" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/333-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/333-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/333-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/333-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "GetImagePointerSize" {  
-"18454" [label = <(METHOD,GetImagePointerSize)> ]
-"18457" [label = <(METHOD_RETURN,ANY)> ]
-  "18454" -> "18457" 
+digraph "IsExceptionPending" {  
+"18103" [label = <(METHOD,IsExceptionPending)> ]
+"18106" [label = <(METHOD_RETURN,ANY)> ]
+  "18103" -> "18106" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/334-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/334-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/334-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/334-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "GetClassLinker" {  
-"18458" [label = <(METHOD,GetClassLinker)> ]
-"18461" [label = <(METHOD_RETURN,ANY)> ]
-  "18458" -> "18461" 
+digraph "hs2" {  
+"18107" [label = <(METHOD,hs2)> ]
+"18110" [label = <(METHOD_RETURN,ANY)> ]
+  "18107" -> "18110" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/335-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/335-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/335-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/335-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "IsInterface" {  
-"18462" [label = <(METHOD,IsInterface)> ]
-"18465" [label = <(METHOD_RETURN,ANY)> ]
-  "18462" -> "18465" 
+digraph "cause" {  
+"18111" [label = <(METHOD,cause)> ]
+"18114" [label = <(METHOD_RETURN,ANY)> ]
+  "18111" -> "18114" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/336-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/336-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/336-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/336-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "FindInterfaceMethod" {  
-"18466" [label = <(METHOD,FindInterfaceMethod)> ]
-"18472" [label = <(METHOD_RETURN,ANY)> ]
-  "18466" -> "18472" 
+digraph "GetException" {  
+"18115" [label = <(METHOD,GetException)> ]
+"18118" [label = <(METHOD_RETURN,ANY)> ]
+  "18115" -> "18118" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/337-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/337-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/337-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/337-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "FindClassMethod" {  
-"18473" [label = <(METHOD,FindClassMethod)> ]
-"18479" [label = <(METHOD_RETURN,ANY)> ]
-  "18473" -> "18479" 
+digraph "ClearException" {  
+"18119" [label = <(METHOD,ClearException)> ]
+"18122" [label = <(METHOD_RETURN,ANY)> ]
+  "18119" -> "18122" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/338-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/338-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/338-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/338-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "ShouldDenyAccessToMember" {  
-"18480" [label = <(METHOD,ShouldDenyAccessToMember)> ]
-"18484" [label = <(METHOD_RETURN,ANY)> ]
-  "18480" -> "18484" 
+digraph "ThrowNewExceptionF" {  
+"18123" [label = <(METHOD,ThrowNewExceptionF)> ]
+"18131" [label = <(METHOD_RETURN,ANY)> ]
+  "18123" -> "18131" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/339-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/339-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/339-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/339-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.logicalOr" {  
-"18485" [label = <(METHOD,&lt;operator&gt;.logicalOr)> ]
-"18489" [label = <(METHOD_RETURN,ANY)> ]
-  "18485" -> "18489" 
+digraph "GetDescriptor" {  
+"18132" [label = <(METHOD,GetDescriptor)> ]
+"18136" [label = <(METHOD_RETURN,ANY)> ]
+  "18132" -> "18136" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/34-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/34-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/34-cfg.dot	2023-06-07 19:35:01.357387176 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/34-cfg.dot	2023-06-07 19:35:07.937386524 +0330
@@ -1,63 +1,48 @@
-digraph "GetObjectClass" {  
-"1377" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_object))<SUB>630</SUB>> ]
-"1396" [label = <(soa,soa(env))<SUB>631</SUB>> ]
-"1398" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; o = soa.Decode&lt;mirror::Object&gt;(java_object))<SUB>632</SUB>> ]
-"1415" [label = <(RETURN,return soa.AddLocalReference&lt;jclass&gt;(o-&gt;GetClass());,return soa.AddLocalReference&lt;jclass&gt;(o-&gt;GetClass());)<SUB>633</SUB>> ]
-"1399" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; o)<SUB>632</SUB>> ]
-"1406" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(java_object))<SUB>632</SUB>> ]
-"1416" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jclass&gt;(o-&gt;GetClass()))<SUB>633</SUB>> ]
-"1400" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>632</SUB>> ]
-"1407" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>632</SUB>> ]
-"1417" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jclass)<SUB>633</SUB>> ]
-"1422" [label = <(GetClass,o-&gt;GetClass())<SUB>633</SUB>> ]
-"1381" [label = <(UNLIKELY,UNLIKELY((java_object) == nullptr))<SUB>630</SUB>> ]
-"1402" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>632</SUB>> ]
-"1408" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>632</SUB>> ]
-"1411" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>632</SUB>> ]
-"1418" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>633</SUB>> ]
-"1423" [label = <(&lt;operator&gt;.indirectFieldAccess,o-&gt;GetClass)<SUB>633</SUB>> ]
-"1382" [label = <(&lt;operator&gt;.equals,(java_object) == nullptr)<SUB>630</SUB>> ]
-"1386" [label = <(CHECK_NON_NULL_ARGUMENT(java_object),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_object == null&quot;))<SUB>630</SUB>> ]
-"1393" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_object),CHECK_NON_NULL_ARGUMENT(java_object))<SUB>630</SUB>> ]
-"1404" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>632</SUB>> ]
-"1410" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>632</SUB>> ]
-"1413" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>632</SUB>> ]
-"1420" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>633</SUB>> ]
-"1425" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>633</SUB>> ]
-"1387" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>630</SUB>> ]
-"1388" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>630</SUB>> ]
-"1390" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>630</SUB>> ]
-"1373" [label = <(METHOD,GetObjectClass)<SUB>629</SUB>> ]
-"1426" [label = <(METHOD_RETURN,jclass)<SUB>629</SUB>> ]
-  "1377" -> "1382" 
-  "1377" -> "1396" 
-  "1396" -> "1404" 
-  "1398" -> "1420" 
-  "1415" -> "1426" 
-  "1399" -> "1410" 
-  "1406" -> "1398" 
-  "1416" -> "1415" 
-  "1400" -> "1399" 
-  "1407" -> "1406" 
-  "1417" -> "1425" 
-  "1422" -> "1416" 
-  "1381" -> "1388" 
-  "1381" -> "1396" 
-  "1402" -> "1400" 
-  "1408" -> "1413" 
-  "1411" -> "1407" 
-  "1418" -> "1417" 
-  "1423" -> "1422" 
-  "1382" -> "1381" 
-  "1386" -> "1393" 
-  "1393" -> "1426" 
-  "1404" -> "1402" 
-  "1410" -> "1408" 
-  "1413" -> "1411" 
-  "1420" -> "1418" 
-  "1425" -> "1423" 
-  "1387" -> "1386" 
-  "1388" -> "1390" 
-  "1390" -> "1387" 
-  "1373" -> "1377" 
+digraph "Throw" {  
+"1473" [label = <(soa,soa(env))<SUB>590</SUB>> ]
+"1475" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Throwable&gt; exception = soa.Decode&lt;mirror::Throwable&gt;(java_exception))<SUB>591</SUB>> ]
+"1499" [label = <(SetException,soa.Self()-&gt;SetException(exception))<SUB>595</SUB>> ]
+"1507" [label = <(RETURN,return JNI_OK;,return JNI_OK;)<SUB>596</SUB>> ]
+"1476" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Throwable&gt; exception)<SUB>591</SUB>> ]
+"1483" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Throwable&gt;(java_exception))<SUB>591</SUB>> ]
+"1493" [label = <(&lt;operator&gt;.equals,exception == nullptr)<SUB>592</SUB>> ]
+"1500" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;SetException)<SUB>595</SUB>> ]
+"1477" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Throwable)<SUB>591</SUB>> ]
+"1484" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Throwable)<SUB>591</SUB>> ]
+"1497" [label = <(RETURN,return JNI_ERR;,return JNI_ERR;)<SUB>593</SUB>> ]
+"1501" [label = <(Self,soa.Self())<SUB>595</SUB>> ]
+"1505" [label = <(FIELD_IDENTIFIER,SetException,SetException)<SUB>595</SUB>> ]
+"1479" [label = <(&lt;operator&gt;.fieldAccess,mirror::Throwable)<SUB>591</SUB>> ]
+"1485" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>591</SUB>> ]
+"1488" [label = <(&lt;operator&gt;.fieldAccess,mirror::Throwable)<SUB>591</SUB>> ]
+"1502" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>595</SUB>> ]
+"1481" [label = <(FIELD_IDENTIFIER,Throwable,Throwable)<SUB>591</SUB>> ]
+"1487" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>591</SUB>> ]
+"1490" [label = <(FIELD_IDENTIFIER,Throwable,Throwable)<SUB>591</SUB>> ]
+"1504" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>595</SUB>> ]
+"1468" [label = <(METHOD,Throw)<SUB>589</SUB>> ]
+"1509" [label = <(METHOD_RETURN,jint)<SUB>589</SUB>> ]
+  "1473" -> "1481" 
+  "1475" -> "1493" 
+  "1499" -> "1507" 
+  "1507" -> "1509" 
+  "1476" -> "1487" 
+  "1483" -> "1475" 
+  "1493" -> "1497" 
+  "1493" -> "1504" 
+  "1500" -> "1499" 
+  "1477" -> "1476" 
+  "1484" -> "1483" 
+  "1497" -> "1509" 
+  "1501" -> "1505" 
+  "1505" -> "1500" 
+  "1479" -> "1477" 
+  "1485" -> "1490" 
+  "1488" -> "1484" 
+  "1502" -> "1501" 
+  "1481" -> "1479" 
+  "1487" -> "1485" 
+  "1490" -> "1488" 
+  "1504" -> "1502" 
+  "1468" -> "1473" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/340-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/340-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/340-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/340-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "IsStatic" {  
-"18490" [label = <(METHOD,IsStatic)> ]
-"18493" [label = <(METHOD_RETURN,ANY)> ]
-  "18490" -> "18493" 
+digraph "&lt;operator&gt;.addressOf" {  
+"18137" [label = <(METHOD,&lt;operator&gt;.addressOf)> ]
+"18140" [label = <(METHOD_RETURN,ANY)> ]
+  "18137" -> "18140" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/341-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/341-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/341-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/341-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "c" {  
-"18494" [label = <(METHOD,c)> ]
-"18497" [label = <(METHOD_RETURN,ANY)> ]
-  "18494" -> "18497" 
+digraph "SetCause" {  
+"18141" [label = <(METHOD,SetCause)> ]
+"18145" [label = <(METHOD_RETURN,ANY)> ]
+  "18141" -> "18145" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/342-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/342-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/342-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/342-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "UNLIKELY" {  
-"18498" [label = <(METHOD,UNLIKELY)> ]
-"18501" [label = <(METHOD_RETURN,ANY)> ]
-  "18498" -> "18501" 
+digraph "Get" {  
+"18146" [label = <(METHOD,Get)> ]
+"18149" [label = <(METHOD_RETURN,ANY)> ]
+  "18146" -> "18149" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/343-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/343-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/343-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/343-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "DCHECK" {  
-"18502" [label = <(METHOD,DCHECK)> ]
-"18505" [label = <(METHOD_RETURN,ANY)> ]
-  "18502" -> "18505" 
+digraph "mirror::Class::FindStaticField" {  
+"18150" [label = <(METHOD,mirror::Class::FindStaticField)> ]
+"18157" [label = <(METHOD_RETURN,ANY)> ]
+  "18150" -> "18157" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/344-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/344-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/344-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/344-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "class_loader" {  
-"18506" [label = <(METHOD,class_loader)> ]
-"18509" [label = <(METHOD_RETURN,ANY)> ]
-  "18506" -> "18509" 
+digraph "FindInstanceField" {  
+"18158" [label = <(METHOD,FindInstanceField)> ]
+"18163" [label = <(METHOD_RETURN,ANY)> ]
+  "18158" -> "18163" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/345-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/345-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/345-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/345-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "FindClass" {  
-"18510" [label = <(METHOD,FindClass)> ]
-"18514" [label = <(METHOD_RETURN,ANY)> ]
-  "18510" -> "18514" 
+digraph "GetVm" {  
+"18164" [label = <(METHOD,GetVm)> ]
+"18167" [label = <(METHOD_RETURN,ANY)> ]
+  "18164" -> "18167" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/346-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/346-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/346-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/346-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "FindPrimitiveClass" {  
-"18515" [label = <(METHOD,FindPrimitiveClass)> ]
-"18519" [label = <(METHOD_RETURN,ANY)> ]
-  "18515" -> "18519" 
+digraph "&lt;operator&gt;.cast" {  
+"18168" [label = <(METHOD,&lt;operator&gt;.cast)> ]
+"18172" [label = <(METHOD_RETURN,ANY)> ]
+  "18168" -> "18172" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/347-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/347-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/347-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/347-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "IsExceptionPending" {  
-"18520" [label = <(METHOD,IsExceptionPending)> ]
-"18523" [label = <(METHOD_RETURN,ANY)> ]
-  "18520" -> "18523" 
+digraph "CHECK_NON_NULL_ARGUMENT" {  
+"18173" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT)<SUB>443</SUB>> ]
+"18176" [label = <(METHOD_RETURN,ANY)> ]
+  "18173" -> "18176" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/348-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/348-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/348-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/348-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "hs2" {  
-"18524" [label = <(METHOD,hs2)> ]
-"18527" [label = <(METHOD_RETURN,ANY)> ]
-  "18524" -> "18527" 
+digraph "CHECK_NON_NULL_ARGUMENT(name)" {  
+"18177" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(name))> ]
+"18182" [label = <(METHOD_RETURN,ANY)> ]
+  "18177" -> "18182" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/349-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/349-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/349-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/349-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "cause" {  
-"18528" [label = <(METHOD,cause)> ]
-"18531" [label = <(METHOD_RETURN,ANY)> ]
-  "18528" -> "18531" 
+digraph "descriptor" {  
+"18183" [label = <(METHOD,descriptor)> ]
+"18186" [label = <(METHOD_RETURN,ANY)> ]
+  "18183" -> "18186" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/35-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/35-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/35-cfg.dot	2023-06-07 19:35:01.357387176 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/35-cfg.dot	2023-06-07 19:35:07.937386524 +0330
@@ -1,72 +1,27 @@
-digraph "GetSuperclass" {  
-"1432" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_class))<SUB>637</SUB>> ]
-"1451" [label = <(soa,soa(env))<SUB>638</SUB>> ]
-"1453" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c = soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>639</SUB>> ]
-"1470" [label = <(RETURN,return soa.AddLocalReference&lt;jclass&gt;(c-&gt;IsInterface() ? nullptr : c-&gt;GetSuperClass());,return soa.AddLocalReference&lt;jclass&gt;(c-&gt;IsInterface() ? nullptr : c-&gt;GetSuperClass());)<SUB>640</SUB>> ]
-"1454" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c)<SUB>639</SUB>> ]
-"1461" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>639</SUB>> ]
-"1471" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jclass&gt;(c-&gt;IsInterface() ? nullptr : c-&gt;GetSuperClass()))<SUB>640</SUB>> ]
-"1455" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>639</SUB>> ]
-"1462" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>639</SUB>> ]
-"1472" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jclass)<SUB>640</SUB>> ]
-"1477" [label = <(&lt;operator&gt;.conditional,c-&gt;IsInterface() ? nullptr : c-&gt;GetSuperClass())<SUB>640</SUB>> ]
-"1436" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>637</SUB>> ]
-"1457" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>639</SUB>> ]
-"1463" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>639</SUB>> ]
-"1466" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>639</SUB>> ]
-"1473" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>640</SUB>> ]
-"1478" [label = <(IsInterface,c-&gt;IsInterface())<SUB>640</SUB>> ]
-"1483" [label = <(GetSuperClass,c-&gt;GetSuperClass())<SUB>640</SUB>> ]
-"1437" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>637</SUB>> ]
-"1441" [label = <(CHECK_NON_NULL_ARGUMENT(java_class),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class == null&quot;))<SUB>637</SUB>> ]
-"1448" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_class),CHECK_NON_NULL_ARGUMENT(java_class))<SUB>637</SUB>> ]
-"1459" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>639</SUB>> ]
-"1465" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>639</SUB>> ]
-"1468" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>639</SUB>> ]
-"1475" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>640</SUB>> ]
-"1479" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;IsInterface)<SUB>640</SUB>> ]
-"1484" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;GetSuperClass)<SUB>640</SUB>> ]
-"1442" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>637</SUB>> ]
-"1481" [label = <(FIELD_IDENTIFIER,IsInterface,IsInterface)<SUB>640</SUB>> ]
-"1486" [label = <(FIELD_IDENTIFIER,GetSuperClass,GetSuperClass)<SUB>640</SUB>> ]
-"1443" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>637</SUB>> ]
-"1445" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>637</SUB>> ]
-"1428" [label = <(METHOD,GetSuperclass)<SUB>636</SUB>> ]
-"1487" [label = <(METHOD_RETURN,jclass)<SUB>636</SUB>> ]
-  "1432" -> "1437" 
-  "1432" -> "1451" 
-  "1451" -> "1459" 
-  "1453" -> "1475" 
-  "1470" -> "1487" 
-  "1454" -> "1465" 
-  "1461" -> "1453" 
-  "1471" -> "1470" 
-  "1455" -> "1454" 
-  "1462" -> "1461" 
-  "1472" -> "1481" 
-  "1477" -> "1471" 
-  "1436" -> "1443" 
-  "1436" -> "1451" 
-  "1457" -> "1455" 
-  "1463" -> "1468" 
-  "1466" -> "1462" 
-  "1473" -> "1472" 
-  "1478" -> "1477" 
-  "1478" -> "1486" 
-  "1483" -> "1477" 
-  "1437" -> "1436" 
-  "1441" -> "1448" 
-  "1448" -> "1487" 
-  "1459" -> "1457" 
-  "1465" -> "1463" 
-  "1468" -> "1466" 
-  "1475" -> "1473" 
-  "1479" -> "1478" 
-  "1484" -> "1483" 
-  "1442" -> "1441" 
-  "1481" -> "1479" 
-  "1486" -> "1484" 
-  "1443" -> "1445" 
-  "1445" -> "1442" 
-  "1428" -> "1432" 
+digraph "ThrowNew" {  
+"1516" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(c, JNI_ERR))<SUB>600</SUB>> ]
+"1535" [label = <(RETURN,return ThrowNewException(env, c, msg, nullptr);,return ThrowNewException(env, c, msg, nullptr);)<SUB>601</SUB>> ]
+"1536" [label = <(ThrowNewException,ThrowNewException(env, c, msg, nullptr))<SUB>601</SUB>> ]
+"1521" [label = <(UNLIKELY,UNLIKELY((c) == nullptr))<SUB>600</SUB>> ]
+"1522" [label = <(&lt;operator&gt;.equals,(c) == nullptr)<SUB>600</SUB>> ]
+"1526" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN(c, JNI_ERR),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;c == null&quot;))<SUB>600</SUB>> ]
+"1533" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(c, JNI_ERR),CHECK_NON_NULL_ARGUMENT_RETURN(c, JNI_ERR))<SUB>600</SUB>> ]
+"1527" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>600</SUB>> ]
+"1528" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>600</SUB>> ]
+"1530" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>600</SUB>> ]
+"1511" [label = <(METHOD,ThrowNew)<SUB>599</SUB>> ]
+"1541" [label = <(METHOD_RETURN,jint)<SUB>599</SUB>> ]
+  "1516" -> "1522" 
+  "1516" -> "1536" 
+  "1535" -> "1541" 
+  "1536" -> "1535" 
+  "1521" -> "1528" 
+  "1521" -> "1536" 
+  "1522" -> "1521" 
+  "1526" -> "1533" 
+  "1533" -> "1541" 
+  "1527" -> "1526" 
+  "1528" -> "1530" 
+  "1530" -> "1527" 
+  "1511" -> "1516" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/350-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/350-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/350-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/350-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "GetException" {  
-"18532" [label = <(METHOD,GetException)> ]
-"18535" [label = <(METHOD_RETURN,ANY)> ]
-  "18532" -> "18535" 
+digraph "soa" {  
+"18187" [label = <(METHOD,soa)> ]
+"18190" [label = <(METHOD_RETURN,ANY)> ]
+  "18187" -> "18190" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/351-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/351-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/351-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/351-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "ClearException" {  
-"18536" [label = <(METHOD,ClearException)> ]
-"18539" [label = <(METHOD_RETURN,ANY)> ]
-  "18536" -> "18539" 
+digraph "IsStarted" {  
+"18191" [label = <(METHOD,IsStarted)> ]
+"18194" [label = <(METHOD_RETURN,ANY)> ]
+  "18191" -> "18194" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/352-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/352-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/352-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/352-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "ThrowNewExceptionF" {  
-"18540" [label = <(METHOD,ThrowNewExceptionF)> ]
-"18548" [label = <(METHOD_RETURN,ANY)> ]
-  "18540" -> "18548" 
+digraph "c_str" {  
+"18195" [label = <(METHOD,c_str)> ]
+"18198" [label = <(METHOD_RETURN,ANY)> ]
+  "18195" -> "18198" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/353-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/353-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/353-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/353-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "GetDescriptor" {  
-"18549" [label = <(METHOD,GetDescriptor)> ]
-"18553" [label = <(METHOD_RETURN,ANY)> ]
-  "18549" -> "18553" 
+digraph "FindSystemClass" {  
+"18199" [label = <(METHOD,FindSystemClass)> ]
+"18204" [label = <(METHOD_RETURN,ANY)> ]
+  "18199" -> "18204" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/354-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/354-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/354-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/354-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.addressOf" {  
-"18554" [label = <(METHOD,&lt;operator&gt;.addressOf)> ]
-"18557" [label = <(METHOD_RETURN,ANY)> ]
-  "18554" -> "18557" 
+digraph "CHECK_NON_NULL_ARGUMENT(jlr_method)" {  
+"18205" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(jlr_method))> ]
+"18210" [label = <(METHOD_RETURN,ANY)> ]
+  "18205" -> "18210" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/355-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/355-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/355-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/355-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "SetCause" {  
-"18558" [label = <(METHOD,SetCause)> ]
-"18562" [label = <(METHOD_RETURN,ANY)> ]
-  "18558" -> "18562" 
+digraph "ArtMethod::FromReflectedMethod" {  
+"18211" [label = <(METHOD,ArtMethod::FromReflectedMethod)> ]
+"18216" [label = <(METHOD_RETURN,ANY)> ]
+  "18211" -> "18216" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/356-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/356-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/356-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/356-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "Get" {  
-"18563" [label = <(METHOD,Get)> ]
-"18566" [label = <(METHOD_RETURN,ANY)> ]
-  "18563" -> "18566" 
+digraph "CHECK_NON_NULL_ARGUMENT(jlr_field)" {  
+"18217" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(jlr_field))> ]
+"18222" [label = <(METHOD_RETURN,ANY)> ]
+  "18217" -> "18222" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/357-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/357-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/357-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/357-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "mirror::Class::FindStaticField" {  
-"18567" [label = <(METHOD,mirror::Class::FindStaticField)> ]
-"18574" [label = <(METHOD_RETURN,ANY)> ]
-  "18567" -> "18574" 
+digraph "GetClass" {  
+"18223" [label = <(METHOD,GetClass)> ]
+"18226" [label = <(METHOD_RETURN,ANY)> ]
+  "18223" -> "18226" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/358-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/358-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/358-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/358-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "FindInstanceField" {  
-"18575" [label = <(METHOD,FindInstanceField)> ]
-"18580" [label = <(METHOD_RETURN,ANY)> ]
-  "18575" -> "18580" 
+digraph "GetClassRoot&lt;mirror::Field&gt;" {  
+"18227" [label = <(METHOD,GetClassRoot&lt;mirror::Field&gt;)> ]
+"18229" [label = <(METHOD_RETURN,ANY)> ]
+  "18227" -> "18229" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/359-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/359-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/359-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/359-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "GetVm" {  
-"18581" [label = <(METHOD,GetVm)> ]
-"18584" [label = <(METHOD_RETURN,ANY)> ]
-  "18581" -> "18584" 
+digraph "::DownCast" {  
+"18230" [label = <(METHOD,::DownCast)> ]
+"18234" [label = <(METHOD_RETURN,ANY)> ]
+  "18230" -> "18234" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/36-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/36-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/36-cfg.dot	2023-06-07 19:35:01.357387176 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/36-cfg.dot	2023-06-07 19:35:07.937386524 +0330
@@ -1,97 +1,23 @@
-digraph "IsAssignableFrom" {  
-"1494" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(java_class1, JNI_FALSE))<SUB>646</SUB>> ]
-"1513" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(java_class2, JNI_FALSE))<SUB>647</SUB>> ]
-"1533" [label = <(soa,soa(env))<SUB>648</SUB>> ]
-"1535" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c1 = soa.Decode&lt;mirror::Class&gt;(java_class1))<SUB>649</SUB>> ]
-"1552" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c2 = soa.Decode&lt;mirror::Class&gt;(java_class2))<SUB>650</SUB>> ]
-"1569" [label = <(RETURN,return c2-&gt;IsAssignableFrom(c1) ? JNI_TRUE : JNI_FALSE;,return c2-&gt;IsAssignableFrom(c1) ? JNI_TRUE : JNI_FALSE;)<SUB>651</SUB>> ]
-"1536" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c1)<SUB>649</SUB>> ]
-"1543" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(java_class1))<SUB>649</SUB>> ]
-"1553" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c2)<SUB>650</SUB>> ]
-"1560" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(java_class2))<SUB>650</SUB>> ]
-"1570" [label = <(&lt;operator&gt;.conditional,c2-&gt;IsAssignableFrom(c1) ? JNI_TRUE : JNI_FALSE)<SUB>651</SUB>> ]
-"1537" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>649</SUB>> ]
-"1544" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>649</SUB>> ]
-"1554" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>650</SUB>> ]
-"1561" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>650</SUB>> ]
-"1571" [label = <(IsAssignableFrom,c2-&gt;IsAssignableFrom(c1))<SUB>651</SUB>> ]
-"1499" [label = <(UNLIKELY,UNLIKELY((java_class1) == nullptr))<SUB>646</SUB>> ]
-"1518" [label = <(UNLIKELY,UNLIKELY((java_class2) == nullptr))<SUB>647</SUB>> ]
-"1539" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>649</SUB>> ]
-"1545" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>649</SUB>> ]
-"1548" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>649</SUB>> ]
-"1556" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>650</SUB>> ]
-"1562" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>650</SUB>> ]
-"1565" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>650</SUB>> ]
-"1572" [label = <(&lt;operator&gt;.indirectFieldAccess,c2-&gt;IsAssignableFrom)<SUB>651</SUB>> ]
-"1500" [label = <(&lt;operator&gt;.equals,(java_class1) == nullptr)<SUB>646</SUB>> ]
-"1504" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN(java_class1, JNI_FALSE),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class1 == null&quot;))<SUB>646</SUB>> ]
-"1511" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(java_class1, JNI_FALSE),CHECK_NON_NULL_ARGUMENT_RETURN(java_class1, JNI_FALSE))<SUB>646</SUB>> ]
-"1519" [label = <(&lt;operator&gt;.equals,(java_class2) == nullptr)<SUB>647</SUB>> ]
-"1523" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN(java_class2, JNI_FALSE),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class2 == null&quot;))<SUB>647</SUB>> ]
-"1530" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(java_class2, JNI_FALSE),CHECK_NON_NULL_ARGUMENT_RETURN(java_class2, JNI_FALSE))<SUB>647</SUB>> ]
-"1541" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>649</SUB>> ]
-"1547" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>649</SUB>> ]
-"1550" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>649</SUB>> ]
-"1558" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>650</SUB>> ]
-"1564" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>650</SUB>> ]
-"1567" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>650</SUB>> ]
-"1574" [label = <(FIELD_IDENTIFIER,IsAssignableFrom,IsAssignableFrom)<SUB>651</SUB>> ]
-"1505" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>646</SUB>> ]
-"1524" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>647</SUB>> ]
-"1506" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>646</SUB>> ]
-"1508" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>646</SUB>> ]
-"1525" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>647</SUB>> ]
-"1527" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>647</SUB>> ]
-"1489" [label = <(METHOD,IsAssignableFrom)<SUB>645</SUB>> ]
-"1578" [label = <(METHOD_RETURN,jboolean)<SUB>645</SUB>> ]
-  "1494" -> "1500" 
-  "1494" -> "1513" 
-  "1513" -> "1519" 
-  "1513" -> "1533" 
-  "1533" -> "1541" 
-  "1535" -> "1558" 
-  "1552" -> "1574" 
-  "1569" -> "1578" 
-  "1536" -> "1547" 
-  "1543" -> "1535" 
-  "1553" -> "1564" 
-  "1560" -> "1552" 
-  "1570" -> "1569" 
-  "1537" -> "1536" 
-  "1544" -> "1543" 
-  "1554" -> "1553" 
-  "1561" -> "1560" 
-  "1571" -> "1570" 
-  "1499" -> "1506" 
-  "1499" -> "1513" 
-  "1518" -> "1525" 
-  "1518" -> "1533" 
-  "1539" -> "1537" 
-  "1545" -> "1550" 
-  "1548" -> "1544" 
-  "1556" -> "1554" 
-  "1562" -> "1567" 
-  "1565" -> "1561" 
-  "1572" -> "1571" 
-  "1500" -> "1499" 
-  "1504" -> "1511" 
-  "1511" -> "1578" 
-  "1519" -> "1518" 
-  "1523" -> "1530" 
-  "1530" -> "1578" 
-  "1541" -> "1539" 
-  "1547" -> "1545" 
-  "1550" -> "1548" 
-  "1558" -> "1556" 
-  "1564" -> "1562" 
-  "1567" -> "1565" 
-  "1574" -> "1572" 
-  "1505" -> "1504" 
-  "1524" -> "1523" 
-  "1506" -> "1508" 
-  "1508" -> "1505" 
-  "1525" -> "1527" 
-  "1527" -> "1524" 
-  "1489" -> "1494" 
+digraph "ExceptionCheck" {  
+"1546" [label = <(RETURN,return static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_-&gt;IsExceptionPending() ? JNI_TRUE : JNI_FALSE;,return static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_-&gt;IsExceptionPending() ? JNI_TRUE : JNI_FALSE;)<SUB>605</SUB>> ]
+"1547" [label = <(&lt;operator&gt;.conditional,static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_-&gt;IsExceptionPending() ? JNI_TRUE : JNI_FALSE)<SUB>605</SUB>> ]
+"1548" [label = <(IsExceptionPending,static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_-&gt;IsExceptionPending())<SUB>605</SUB>> ]
+"1549" [label = <(&lt;operator&gt;.indirectFieldAccess,static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_-&gt;IsExceptionPending)<SUB>605</SUB>> ]
+"1550" [label = <(&lt;operator&gt;.indirectFieldAccess,static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_)<SUB>605</SUB>> ]
+"1555" [label = <(FIELD_IDENTIFIER,IsExceptionPending,IsExceptionPending)<SUB>605</SUB>> ]
+"1551" [label = <(&lt;operator&gt;.cast,static_cast&lt;JNIEnvExt*&gt;(env))<SUB>605</SUB>> ]
+"1554" [label = <(FIELD_IDENTIFIER,self_,self_)<SUB>605</SUB>> ]
+"1552" [label = <(UNKNOWN,JNIEnvExt*,JNIEnvExt*)<SUB>605</SUB>> ]
+"1543" [label = <(METHOD,ExceptionCheck)<SUB>604</SUB>> ]
+"1558" [label = <(METHOD_RETURN,jboolean)<SUB>604</SUB>> ]
+  "1546" -> "1558" 
+  "1547" -> "1546" 
+  "1548" -> "1547" 
+  "1549" -> "1548" 
+  "1550" -> "1555" 
+  "1555" -> "1549" 
+  "1551" -> "1554" 
+  "1554" -> "1550" 
+  "1552" -> "1551" 
+  "1543" -> "1552" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/360-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/360-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/360-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/360-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT" {  
-"18585" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT)<SUB>521</SUB>> ]
-"18588" [label = <(METHOD_RETURN,ANY)> ]
-  "18585" -> "18588" 
+digraph "GetArtField" {  
+"18235" [label = <(METHOD,GetArtField)> ]
+"18238" [label = <(METHOD_RETURN,ANY)> ]
+  "18235" -> "18238" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/361-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/361-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/361-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/361-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT(name)" {  
-"18589" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(name))> ]
-"18594" [label = <(METHOD_RETURN,ANY)> ]
-  "18589" -> "18594" 
+digraph "CHECK_NON_NULL_ARGUMENT(mid)" {  
+"18239" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(mid))> ]
+"18244" [label = <(METHOD_RETURN,ANY)> ]
+  "18239" -> "18244" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/362-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/362-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/362-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/362-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "descriptor" {  
-"18595" [label = <(METHOD,descriptor)> ]
-"18598" [label = <(METHOD_RETURN,ANY)> ]
-  "18595" -> "18598" 
+digraph "jni::DecodeArtMethod" {  
+"18245" [label = <(METHOD,jni::DecodeArtMethod)> ]
+"18249" [label = <(METHOD_RETURN,ANY)> ]
+  "18245" -> "18249" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/363-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/363-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/363-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/363-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "soa" {  
-"18599" [label = <(METHOD,soa)> ]
-"18602" [label = <(METHOD_RETURN,ANY)> ]
-  "18599" -> "18602" 
+digraph "DCHECK_EQ" {  
+"18250" [label = <(METHOD,DCHECK_EQ)> ]
+"18254" [label = <(METHOD_RETURN,ANY)> ]
+  "18250" -> "18254" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/364-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/364-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/364-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/364-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "IsStarted" {  
-"18603" [label = <(METHOD,IsStarted)> ]
-"18606" [label = <(METHOD_RETURN,ANY)> ]
-  "18603" -> "18606" 
+digraph "&lt;operator&gt;.logicalNot" {  
+"18255" [label = <(METHOD,&lt;operator&gt;.logicalNot)> ]
+"18258" [label = <(METHOD_RETURN,ANY)> ]
+  "18255" -> "18258" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/365-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/365-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/365-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/365-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "c_str" {  
-"18607" [label = <(METHOD,c_str)> ]
-"18610" [label = <(METHOD_RETURN,ANY)> ]
-  "18607" -> "18610" 
+digraph "IsActiveTransaction" {  
+"18259" [label = <(METHOD,IsActiveTransaction)> ]
+"18262" [label = <(METHOD_RETURN,ANY)> ]
+  "18259" -> "18262" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/366-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/366-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/366-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/366-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "FindSystemClass" {  
-"18611" [label = <(METHOD,FindSystemClass)> ]
-"18616" [label = <(METHOD_RETURN,ANY)> ]
-  "18611" -> "18616" 
+digraph "IsConstructor" {  
+"18263" [label = <(METHOD,IsConstructor)> ]
+"18266" [label = <(METHOD_RETURN,ANY)> ]
+  "18263" -> "18266" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/367-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/367-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/367-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/367-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT(jlr_method)" {  
-"18617" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(jlr_method))> ]
-"18622" [label = <(METHOD_RETURN,ANY)> ]
-  "18617" -> "18622" 
+digraph "mirror::Constructor::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;" {  
+"18267" [label = <(METHOD,mirror::Constructor::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;)> ]
+"18272" [label = <(METHOD_RETURN,ANY)> ]
+  "18267" -> "18272" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/368-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/368-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/368-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/368-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "ArtMethod::FromReflectedMethod" {  
-"18623" [label = <(METHOD,ArtMethod::FromReflectedMethod)> ]
-"18628" [label = <(METHOD_RETURN,ANY)> ]
-  "18623" -> "18628" 
+digraph "mirror::Method::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;" {  
+"18273" [label = <(METHOD,mirror::Method::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;)> ]
+"18278" [label = <(METHOD_RETURN,ANY)> ]
+  "18273" -> "18278" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/369-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/369-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/369-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/369-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT(jlr_field)" {  
-"18629" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(jlr_field))> ]
-"18634" [label = <(METHOD_RETURN,ANY)> ]
-  "18629" -> "18634" 
+digraph "CHECK_NON_NULL_ARGUMENT(fid)" {  
+"18279" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(fid))> ]
+"18284" [label = <(METHOD_RETURN,ANY)> ]
+  "18279" -> "18284" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/37-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/37-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/37-cfg.dot	2023-06-07 19:35:01.367387175 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/37-cfg.dot	2023-06-07 19:35:07.937386524 +0330
@@ -1,84 +1,19 @@
-digraph "IsInstanceOf" {  
-"1585" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_FALSE))<SUB>655</SUB>> ]
-"1605" [label = <(&lt;operator&gt;.equals,jobj == nullptr)<SUB>656</SUB>> ]
-"1609" [label = <(RETURN,return JNI_TRUE;,return JNI_TRUE;)<SUB>658</SUB>> ]
-"1590" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>655</SUB>> ]
-"1614" [label = <(soa,soa(env))<SUB>660</SUB>> ]
-"1616" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; obj = soa.Decode&lt;mirror::Object&gt;(jobj))<SUB>661</SUB>> ]
-"1633" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c = soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>662</SUB>> ]
-"1650" [label = <(RETURN,return obj-&gt;InstanceOf(c) ? JNI_TRUE : JNI_FALSE;,return obj-&gt;InstanceOf(c) ? JNI_TRUE : JNI_FALSE;)<SUB>663</SUB>> ]
-"1591" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>655</SUB>> ]
-"1595" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_FALSE),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class == null&quot;))<SUB>655</SUB>> ]
-"1602" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_FALSE),CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_FALSE))<SUB>655</SUB>> ]
-"1617" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; obj)<SUB>661</SUB>> ]
-"1624" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(jobj))<SUB>661</SUB>> ]
-"1634" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c)<SUB>662</SUB>> ]
-"1641" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>662</SUB>> ]
-"1651" [label = <(&lt;operator&gt;.conditional,obj-&gt;InstanceOf(c) ? JNI_TRUE : JNI_FALSE)<SUB>663</SUB>> ]
-"1596" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>655</SUB>> ]
-"1618" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>661</SUB>> ]
-"1625" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>661</SUB>> ]
-"1635" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>662</SUB>> ]
-"1642" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>662</SUB>> ]
-"1652" [label = <(InstanceOf,obj-&gt;InstanceOf(c))<SUB>663</SUB>> ]
-"1597" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>655</SUB>> ]
-"1599" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>655</SUB>> ]
-"1620" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>661</SUB>> ]
-"1626" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>661</SUB>> ]
-"1629" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>661</SUB>> ]
-"1637" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>662</SUB>> ]
-"1643" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>662</SUB>> ]
-"1646" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>662</SUB>> ]
-"1653" [label = <(&lt;operator&gt;.indirectFieldAccess,obj-&gt;InstanceOf)<SUB>663</SUB>> ]
-"1622" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>661</SUB>> ]
-"1628" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>661</SUB>> ]
-"1631" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>661</SUB>> ]
-"1639" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>662</SUB>> ]
-"1645" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>662</SUB>> ]
-"1648" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>662</SUB>> ]
-"1655" [label = <(FIELD_IDENTIFIER,InstanceOf,InstanceOf)<SUB>663</SUB>> ]
-"1580" [label = <(METHOD,IsInstanceOf)<SUB>654</SUB>> ]
-"1659" [label = <(METHOD_RETURN,jboolean)<SUB>654</SUB>> ]
-  "1585" -> "1591" 
-  "1585" -> "1605" 
-  "1605" -> "1609" 
-  "1605" -> "1614" 
-  "1609" -> "1659" 
-  "1590" -> "1597" 
-  "1590" -> "1605" 
-  "1614" -> "1622" 
-  "1616" -> "1639" 
-  "1633" -> "1655" 
-  "1650" -> "1659" 
-  "1591" -> "1590" 
-  "1595" -> "1602" 
-  "1602" -> "1659" 
-  "1617" -> "1628" 
-  "1624" -> "1616" 
-  "1634" -> "1645" 
-  "1641" -> "1633" 
-  "1651" -> "1650" 
-  "1596" -> "1595" 
-  "1618" -> "1617" 
-  "1625" -> "1624" 
-  "1635" -> "1634" 
-  "1642" -> "1641" 
-  "1652" -> "1651" 
-  "1597" -> "1599" 
-  "1599" -> "1596" 
-  "1620" -> "1618" 
-  "1626" -> "1631" 
-  "1629" -> "1625" 
-  "1637" -> "1635" 
-  "1643" -> "1648" 
-  "1646" -> "1642" 
-  "1653" -> "1652" 
-  "1622" -> "1620" 
-  "1628" -> "1626" 
-  "1631" -> "1629" 
-  "1639" -> "1637" 
-  "1645" -> "1643" 
-  "1648" -> "1646" 
-  "1655" -> "1653" 
-  "1580" -> "1585" 
+digraph "ExceptionClear" {  
+"1564" [label = <(soa,soa(env))<SUB>609</SUB>> ]
+"1566" [label = <(ClearException,soa.Self()-&gt;ClearException())<SUB>610</SUB>> ]
+"1567" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;ClearException)<SUB>610</SUB>> ]
+"1568" [label = <(Self,soa.Self())<SUB>610</SUB>> ]
+"1572" [label = <(FIELD_IDENTIFIER,ClearException,ClearException)<SUB>610</SUB>> ]
+"1569" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>610</SUB>> ]
+"1571" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>610</SUB>> ]
+"1560" [label = <(METHOD,ExceptionClear)<SUB>608</SUB>> ]
+"1573" [label = <(METHOD_RETURN,void)<SUB>608</SUB>> ]
+  "1564" -> "1571" 
+  "1566" -> "1573" 
+  "1567" -> "1566" 
+  "1568" -> "1572" 
+  "1572" -> "1567" 
+  "1569" -> "1568" 
+  "1571" -> "1569" 
+  "1560" -> "1564" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/370-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/370-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/370-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/370-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "GetClass" {  
-"18635" [label = <(METHOD,GetClass)> ]
-"18638" [label = <(METHOD_RETURN,ANY)> ]
-  "18635" -> "18638" 
+digraph "jni::DecodeArtField" {  
+"18285" [label = <(METHOD,jni::DecodeArtField)> ]
+"18289" [label = <(METHOD_RETURN,ANY)> ]
+  "18285" -> "18289" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/371-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/371-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/371-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/371-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "GetClassRoot&lt;mirror::Field&gt;" {  
-"18639" [label = <(METHOD,GetClassRoot&lt;mirror::Field&gt;)> ]
-"18641" [label = <(METHOD_RETURN,ANY)> ]
-  "18639" -> "18641" 
+digraph "&lt;operator&gt;.bracketedPrimary" {  
+"18290" [label = <(METHOD,&lt;operator&gt;.bracketedPrimary)> ]
+"18293" [label = <(METHOD_RETURN,ANY)> ]
+  "18290" -> "18293" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/372-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/372-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/372-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/372-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "::DownCast" {  
-"18642" [label = <(METHOD,::DownCast)> ]
-"18646" [label = <(METHOD_RETURN,ANY)> ]
-  "18642" -> "18646" 
+digraph "&lt;operator&gt;.expressionList" {  
+"18294" [label = <(METHOD,&lt;operator&gt;.expressionList)> ]
+"18299" [label = <(METHOD_RETURN,ANY)> ]
+  "18294" -> "18299" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/373-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/373-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/373-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/373-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "GetArtField" {  
-"18647" [label = <(METHOD,GetArtField)> ]
-"18650" [label = <(METHOD_RETURN,ANY)> ]
-  "18647" -> "18650" 
+digraph "CHECK_NON_NULL_ARGUMENT(java_object)" {  
+"18300" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(java_object))> ]
+"18305" [label = <(METHOD_RETURN,ANY)> ]
+  "18300" -> "18305" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/374-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/374-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/374-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/374-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT(mid)" {  
-"18651" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(mid))> ]
-"18656" [label = <(METHOD_RETURN,ANY)> ]
-  "18651" -> "18656" 
+digraph "CHECK_NON_NULL_ARGUMENT(java_class)" {  
+"18306" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(java_class))> ]
+"18311" [label = <(METHOD_RETURN,ANY)> ]
+  "18306" -> "18311" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/375-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/375-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/375-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/375-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "jni::DecodeArtMethod" {  
-"18657" [label = <(METHOD,jni::DecodeArtMethod)> ]
-"18661" [label = <(METHOD_RETURN,ANY)> ]
-  "18657" -> "18661" 
+digraph "GetSuperClass" {  
+"18312" [label = <(METHOD,GetSuperClass)> ]
+"18315" [label = <(METHOD_RETURN,ANY)> ]
+  "18312" -> "18315" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/376-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/376-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/376-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/376-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "DCHECK_EQ" {  
-"18662" [label = <(METHOD,DCHECK_EQ)> ]
-"18666" [label = <(METHOD_RETURN,ANY)> ]
-  "18662" -> "18666" 
+digraph "CHECK_NON_NULL_ARGUMENT_RETURN" {  
+"18316" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN)<SUB>452</SUB>> ]
+"18320" [label = <(METHOD_RETURN,ANY)> ]
+  "18316" -> "18320" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/377-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/377-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/377-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/377-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.logicalNot" {  
-"18667" [label = <(METHOD,&lt;operator&gt;.logicalNot)> ]
-"18670" [label = <(METHOD_RETURN,ANY)> ]
-  "18667" -> "18670" 
+digraph "CHECK_NON_NULL_ARGUMENT_RETURN(java_class1, JNI_FALSE)" {  
+"18321" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN(java_class1, JNI_FALSE))> ]
+"18326" [label = <(METHOD_RETURN,ANY)> ]
+  "18321" -> "18326" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/378-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/378-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/378-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/378-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "IsActiveTransaction" {  
-"18671" [label = <(METHOD,IsActiveTransaction)> ]
-"18674" [label = <(METHOD_RETURN,ANY)> ]
-  "18671" -> "18674" 
+digraph "CHECK_NON_NULL_ARGUMENT_RETURN(java_class2, JNI_FALSE)" {  
+"18327" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN(java_class2, JNI_FALSE))> ]
+"18332" [label = <(METHOD_RETURN,ANY)> ]
+  "18327" -> "18332" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/379-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/379-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/379-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/379-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "IsConstructor" {  
-"18675" [label = <(METHOD,IsConstructor)> ]
-"18678" [label = <(METHOD_RETURN,ANY)> ]
-  "18675" -> "18678" 
+digraph "IsAssignableFrom" {  
+"18333" [label = <(METHOD,IsAssignableFrom)> ]
+"18337" [label = <(METHOD_RETURN,ANY)> ]
+  "18333" -> "18337" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/38-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/38-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/38-cfg.dot	2023-06-07 19:35:01.367387175 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/38-cfg.dot	2023-06-07 19:35:07.937386524 +0330
@@ -1,48 +1,240 @@
-digraph "Throw" {  
-"1666" [label = <(soa,soa(env))<SUB>668</SUB>> ]
-"1668" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Throwable&gt; exception = soa.Decode&lt;mirror::Throwable&gt;(java_exception))<SUB>669</SUB>> ]
-"1692" [label = <(SetException,soa.Self()-&gt;SetException(exception))<SUB>673</SUB>> ]
-"1700" [label = <(RETURN,return JNI_OK;,return JNI_OK;)<SUB>674</SUB>> ]
-"1669" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Throwable&gt; exception)<SUB>669</SUB>> ]
-"1676" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Throwable&gt;(java_exception))<SUB>669</SUB>> ]
-"1686" [label = <(&lt;operator&gt;.equals,exception == nullptr)<SUB>670</SUB>> ]
-"1693" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;SetException)<SUB>673</SUB>> ]
-"1670" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Throwable)<SUB>669</SUB>> ]
-"1677" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Throwable)<SUB>669</SUB>> ]
-"1690" [label = <(RETURN,return JNI_ERR;,return JNI_ERR;)<SUB>671</SUB>> ]
-"1694" [label = <(Self,soa.Self())<SUB>673</SUB>> ]
-"1698" [label = <(FIELD_IDENTIFIER,SetException,SetException)<SUB>673</SUB>> ]
-"1672" [label = <(&lt;operator&gt;.fieldAccess,mirror::Throwable)<SUB>669</SUB>> ]
-"1678" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>669</SUB>> ]
-"1681" [label = <(&lt;operator&gt;.fieldAccess,mirror::Throwable)<SUB>669</SUB>> ]
-"1695" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>673</SUB>> ]
-"1674" [label = <(FIELD_IDENTIFIER,Throwable,Throwable)<SUB>669</SUB>> ]
-"1680" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>669</SUB>> ]
-"1683" [label = <(FIELD_IDENTIFIER,Throwable,Throwable)<SUB>669</SUB>> ]
-"1697" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>673</SUB>> ]
-"1661" [label = <(METHOD,Throw)<SUB>667</SUB>> ]
-"1702" [label = <(METHOD_RETURN,jint)<SUB>667</SUB>> ]
-  "1666" -> "1674" 
-  "1668" -> "1686" 
-  "1692" -> "1700" 
-  "1700" -> "1702" 
-  "1669" -> "1680" 
-  "1676" -> "1668" 
-  "1686" -> "1690" 
-  "1686" -> "1697" 
-  "1693" -> "1692" 
-  "1670" -> "1669" 
-  "1677" -> "1676" 
-  "1690" -> "1702" 
-  "1694" -> "1698" 
-  "1698" -> "1693" 
-  "1672" -> "1670" 
-  "1678" -> "1683" 
-  "1681" -> "1677" 
-  "1695" -> "1694" 
-  "1674" -> "1672" 
-  "1680" -> "1678" 
-  "1683" -> "1681" 
-  "1697" -> "1695" 
-  "1661" -> "1666" 
+digraph "ExceptionDescribe" {  
+"1579" [label = <(soa,soa(env))<SUB>614</SUB>> ]
+"1592" [label = <(&lt;operator&gt;.greaterThan,StackHandleScope&lt;1&gt; hs(soa.Self()))<SUB>621</SUB>> ]
+"1601" [label = <(&lt;operator&gt;.greaterThan,Handle&lt;mirror::Throwable&gt; old_exception(\012        hs.NewHandle&lt;mirror::Throwable&gt;(soa.Self()-&gt;GetException())))<SUB>622</SUB>> ]
+"1623" [label = <(ClearException,soa.Self()-&gt;ClearException())<SUB>624</SUB>> ]
+"1630" [label = <(&lt;operator&gt;.greaterThan,ScopedLocalRef&lt;jthrowable&gt; exception(env,\012                                         soa.AddLocalReference&lt;jthrowable&gt;(old_exception.Get())))<SUB>625</SUB>> ]
+"1646" [label = <(&lt;operator&gt;.greaterThan,ScopedLocalRef&lt;jclass&gt; exception_class(env, env-&gt;GetObjectClass(exception.get())))<SUB>627</SUB>> ]
+"1661" [label = <(&lt;operator&gt;.assignment,mid = env-&gt;GetMethodID(exception_class.get(), &quot;printStackTrace&quot;, &quot;()V&quot;))<SUB>628</SUB>> ]
+"1740" [label = <(SetException,soa.Self()-&gt;SetException(old_exception.Get()))<SUB>640</SUB>> ]
+"1582" [label = <(&lt;operator&gt;.logicalNot,!soa.Self()-&gt;GetException())<SUB>617</SUB>> ]
+"1593" [label = <(&lt;operator&gt;.lessThan,StackHandleScope&lt;1)<SUB>621</SUB>> ]
+"1596" [label = <(hs,hs(soa.Self()))<SUB>621</SUB>> ]
+"1602" [label = <(&lt;operator&gt;.lessThan,Handle&lt;mirror::Throwable)<SUB>622</SUB>> ]
+"1607" [label = <(old_exception,old_exception(\012        hs.NewHandle&lt;mirror::Throwable&gt;(soa.Self()-&gt;GetException())))<SUB>622</SUB>> ]
+"1624" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;ClearException)<SUB>624</SUB>> ]
+"1631" [label = <(&lt;operator&gt;.lessThan,ScopedLocalRef&lt;jthrowable)<SUB>625</SUB>> ]
+"1634" [label = <(exception,exception(env,\012                                         soa.AddLocalReference&lt;jthrowable&gt;(old_exception.Get())))<SUB>625</SUB>> ]
+"1647" [label = <(&lt;operator&gt;.lessThan,ScopedLocalRef&lt;jclass)<SUB>627</SUB>> ]
+"1650" [label = <(exception_class,exception_class(env, env-&gt;GetObjectClass(exception.get())))<SUB>627</SUB>> ]
+"1663" [label = <(GetMethodID,env-&gt;GetMethodID(exception_class.get(), &quot;printStackTrace&quot;, &quot;()V&quot;))<SUB>628</SUB>> ]
+"1674" [label = <(&lt;operator&gt;.equals,mid == nullptr)<SUB>629</SUB>> ]
+"1741" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;SetException)<SUB>640</SUB>> ]
+"1747" [label = <(Get,old_exception.Get())<SUB>640</SUB>> ]
+"1583" [label = <(GetException,soa.Self()-&gt;GetException())<SUB>617</SUB>> ]
+"1591" [label = <(RETURN,return;,return;)<SUB>618</SUB>> ]
+"1597" [label = <(Self,soa.Self())<SUB>621</SUB>> ]
+"1604" [label = <(&lt;operator&gt;.fieldAccess,mirror::Throwable)<SUB>622</SUB>> ]
+"1608" [label = <(&lt;operator&gt;.greaterThan,hs.NewHandle&lt;mirror::Throwable&gt;(soa.Self()-&gt;GetException()))<SUB>623</SUB>> ]
+"1625" [label = <(Self,soa.Self())<SUB>624</SUB>> ]
+"1629" [label = <(FIELD_IDENTIFIER,ClearException,ClearException)<SUB>624</SUB>> ]
+"1636" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jthrowable&gt;(old_exception.Get()))<SUB>626</SUB>> ]
+"1652" [label = <(GetObjectClass,env-&gt;GetObjectClass(exception.get()))<SUB>627</SUB>> ]
+"1664" [label = <(&lt;operator&gt;.indirectFieldAccess,env-&gt;GetMethodID)<SUB>628</SUB>> ]
+"1667" [label = <(get,exception_class.get())<SUB>628</SUB>> ]
+"1678" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI WARNING: no printStackTrace()V in &quot;\012 &lt;&lt; mirror::Object::PrettyTypeOf(old_exception.Get()))<SUB>630</SUB>> ]
+"1742" [label = <(Self,soa.Self())<SUB>640</SUB>> ]
+"1746" [label = <(FIELD_IDENTIFIER,SetException,SetException)<SUB>640</SUB>> ]
+"1748" [label = <(&lt;operator&gt;.fieldAccess,old_exception.Get)<SUB>640</SUB>> ]
+"1584" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;GetException)<SUB>617</SUB>> ]
+"1598" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>621</SUB>> ]
+"1606" [label = <(FIELD_IDENTIFIER,Throwable,Throwable)<SUB>622</SUB>> ]
+"1609" [label = <(&lt;operator&gt;.lessThan,hs.NewHandle&lt;mirror::Throwable)<SUB>623</SUB>> ]
+"1616" [label = <(GetException,soa.Self()-&gt;GetException())<SUB>623</SUB>> ]
+"1626" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>624</SUB>> ]
+"1637" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jthrowable)<SUB>626</SUB>> ]
+"1642" [label = <(Get,old_exception.Get())<SUB>626</SUB>> ]
+"1653" [label = <(&lt;operator&gt;.indirectFieldAccess,env-&gt;GetObjectClass)<SUB>627</SUB>> ]
+"1656" [label = <(get,exception.get())<SUB>627</SUB>> ]
+"1666" [label = <(FIELD_IDENTIFIER,GetMethodID,GetMethodID)<SUB>628</SUB>> ]
+"1668" [label = <(&lt;operator&gt;.fieldAccess,exception_class.get)<SUB>628</SUB>> ]
+"1679" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI WARNING: no printStackTrace()V in &quot;)<SUB>630</SUB>> ]
+"1683" [label = <(mirror::Object::PrettyTypeOf,mirror::Object::PrettyTypeOf(old_exception.Get()))<SUB>631</SUB>> ]
+"1695" [label = <(CallVoidMethod,env-&gt;CallVoidMethod(exception.get(), mid))<SUB>633</SUB>> ]
+"1743" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>640</SUB>> ]
+"1750" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>640</SUB>> ]
+"1585" [label = <(Self,soa.Self())<SUB>617</SUB>> ]
+"1589" [label = <(FIELD_IDENTIFIER,GetException,GetException)<SUB>617</SUB>> ]
+"1600" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>621</SUB>> ]
+"1610" [label = <(&lt;operator&gt;.fieldAccess,hs.NewHandle)<SUB>623</SUB>> ]
+"1613" [label = <(&lt;operator&gt;.fieldAccess,mirror::Throwable)<SUB>623</SUB>> ]
+"1617" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;GetException)<SUB>623</SUB>> ]
+"1628" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>624</SUB>> ]
+"1638" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>626</SUB>> ]
+"1643" [label = <(&lt;operator&gt;.fieldAccess,old_exception.Get)<SUB>626</SUB>> ]
+"1655" [label = <(FIELD_IDENTIFIER,GetObjectClass,GetObjectClass)<SUB>627</SUB>> ]
+"1657" [label = <(&lt;operator&gt;.fieldAccess,exception.get)<SUB>627</SUB>> ]
+"1670" [label = <(FIELD_IDENTIFIER,get,get)<SUB>628</SUB>> ]
+"1680" [label = <(LOG,LOG(WARNING))<SUB>630</SUB>> ]
+"1684" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object::PrettyTypeOf)<SUB>631</SUB>> ]
+"1689" [label = <(Get,old_exception.Get())<SUB>631</SUB>> ]
+"1696" [label = <(&lt;operator&gt;.indirectFieldAccess,env-&gt;CallVoidMethod)<SUB>633</SUB>> ]
+"1699" [label = <(get,exception.get())<SUB>633</SUB>> ]
+"1705" [label = <(IsExceptionPending,soa.Self()-&gt;IsExceptionPending())<SUB>634</SUB>> ]
+"1745" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>640</SUB>> ]
+"1586" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>617</SUB>> ]
+"1612" [label = <(FIELD_IDENTIFIER,NewHandle,NewHandle)<SUB>623</SUB>> ]
+"1615" [label = <(FIELD_IDENTIFIER,Throwable,Throwable)<SUB>623</SUB>> ]
+"1618" [label = <(Self,soa.Self())<SUB>623</SUB>> ]
+"1622" [label = <(FIELD_IDENTIFIER,GetException,GetException)<SUB>623</SUB>> ]
+"1640" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>626</SUB>> ]
+"1645" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>626</SUB>> ]
+"1659" [label = <(FIELD_IDENTIFIER,get,get)<SUB>627</SUB>> ]
+"1685" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>631</SUB>> ]
+"1688" [label = <(FIELD_IDENTIFIER,PrettyTypeOf,PrettyTypeOf)<SUB>631</SUB>> ]
+"1690" [label = <(&lt;operator&gt;.fieldAccess,old_exception.Get)<SUB>631</SUB>> ]
+"1698" [label = <(FIELD_IDENTIFIER,CallVoidMethod,CallVoidMethod)<SUB>633</SUB>> ]
+"1700" [label = <(&lt;operator&gt;.fieldAccess,exception.get)<SUB>633</SUB>> ]
+"1706" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;IsExceptionPending)<SUB>634</SUB>> ]
+"1713" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI WARNING: &quot; &lt;&lt; mirror::Object::PrettyTypeOf(soa.Self()-&gt;GetException())\012 &lt;&lt; &quot; thrown while calling printStackTrace&quot;)<SUB>635</SUB>> ]
+"1733" [label = <(ClearException,soa.Self()-&gt;ClearException())<SUB>637</SUB>> ]
+"1588" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>617</SUB>> ]
+"1619" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>623</SUB>> ]
+"1692" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>631</SUB>> ]
+"1702" [label = <(FIELD_IDENTIFIER,get,get)<SUB>633</SUB>> ]
+"1707" [label = <(Self,soa.Self())<SUB>634</SUB>> ]
+"1711" [label = <(FIELD_IDENTIFIER,IsExceptionPending,IsExceptionPending)<SUB>634</SUB>> ]
+"1714" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI WARNING: &quot; &lt;&lt; mirror::Object::PrettyTypeOf(soa.Self()-&gt;GetException()))<SUB>635</SUB>> ]
+"1734" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;ClearException)<SUB>637</SUB>> ]
+"1621" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>623</SUB>> ]
+"1708" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>634</SUB>> ]
+"1715" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI WARNING: &quot;)<SUB>635</SUB>> ]
+"1719" [label = <(mirror::Object::PrettyTypeOf,mirror::Object::PrettyTypeOf(soa.Self()-&gt;GetException()))<SUB>635</SUB>> ]
+"1735" [label = <(Self,soa.Self())<SUB>637</SUB>> ]
+"1739" [label = <(FIELD_IDENTIFIER,ClearException,ClearException)<SUB>637</SUB>> ]
+"1710" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>634</SUB>> ]
+"1716" [label = <(LOG,LOG(WARNING))<SUB>635</SUB>> ]
+"1720" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object::PrettyTypeOf)<SUB>635</SUB>> ]
+"1725" [label = <(GetException,soa.Self()-&gt;GetException())<SUB>635</SUB>> ]
+"1736" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>637</SUB>> ]
+"1721" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>635</SUB>> ]
+"1724" [label = <(FIELD_IDENTIFIER,PrettyTypeOf,PrettyTypeOf)<SUB>635</SUB>> ]
+"1726" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;GetException)<SUB>635</SUB>> ]
+"1738" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>637</SUB>> ]
+"1727" [label = <(Self,soa.Self())<SUB>635</SUB>> ]
+"1731" [label = <(FIELD_IDENTIFIER,GetException,GetException)<SUB>635</SUB>> ]
+"1728" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>635</SUB>> ]
+"1730" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>635</SUB>> ]
+"1575" [label = <(METHOD,ExceptionDescribe)<SUB>613</SUB>> ]
+"1751" [label = <(METHOD_RETURN,void)<SUB>613</SUB>> ]
+  "1579" -> "1588" 
+  "1592" -> "1606" 
+  "1601" -> "1628" 
+  "1623" -> "1631" 
+  "1630" -> "1647" 
+  "1646" -> "1666" 
+  "1661" -> "1674" 
+  "1740" -> "1751" 
+  "1582" -> "1591" 
+  "1582" -> "1593" 
+  "1593" -> "1600" 
+  "1596" -> "1592" 
+  "1602" -> "1612" 
+  "1607" -> "1601" 
+  "1624" -> "1623" 
+  "1631" -> "1640" 
+  "1634" -> "1630" 
+  "1647" -> "1655" 
+  "1650" -> "1646" 
+  "1663" -> "1661" 
+  "1674" -> "1680" 
+  "1674" -> "1698" 
+  "1741" -> "1750" 
+  "1747" -> "1740" 
+  "1583" -> "1582" 
+  "1591" -> "1751" 
+  "1597" -> "1596" 
+  "1604" -> "1602" 
+  "1608" -> "1607" 
+  "1625" -> "1629" 
+  "1629" -> "1624" 
+  "1636" -> "1634" 
+  "1652" -> "1650" 
+  "1664" -> "1670" 
+  "1667" -> "1663" 
+  "1678" -> "1745" 
+  "1742" -> "1746" 
+  "1746" -> "1741" 
+  "1748" -> "1747" 
+  "1584" -> "1583" 
+  "1598" -> "1597" 
+  "1606" -> "1604" 
+  "1609" -> "1621" 
+  "1616" -> "1608" 
+  "1626" -> "1625" 
+  "1637" -> "1645" 
+  "1642" -> "1636" 
+  "1653" -> "1659" 
+  "1656" -> "1652" 
+  "1666" -> "1664" 
+  "1668" -> "1667" 
+  "1679" -> "1685" 
+  "1683" -> "1678" 
+  "1695" -> "1710" 
+  "1743" -> "1742" 
+  "1750" -> "1748" 
+  "1585" -> "1589" 
+  "1589" -> "1584" 
+  "1600" -> "1598" 
+  "1610" -> "1615" 
+  "1613" -> "1609" 
+  "1617" -> "1616" 
+  "1628" -> "1626" 
+  "1638" -> "1637" 
+  "1643" -> "1642" 
+  "1655" -> "1653" 
+  "1657" -> "1656" 
+  "1670" -> "1668" 
+  "1680" -> "1679" 
+  "1684" -> "1692" 
+  "1689" -> "1683" 
+  "1696" -> "1702" 
+  "1699" -> "1695" 
+  "1705" -> "1716" 
+  "1705" -> "1745" 
+  "1745" -> "1743" 
+  "1586" -> "1585" 
+  "1612" -> "1610" 
+  "1615" -> "1613" 
+  "1618" -> "1622" 
+  "1622" -> "1617" 
+  "1640" -> "1638" 
+  "1645" -> "1643" 
+  "1659" -> "1657" 
+  "1685" -> "1688" 
+  "1688" -> "1684" 
+  "1690" -> "1689" 
+  "1698" -> "1696" 
+  "1700" -> "1699" 
+  "1706" -> "1705" 
+  "1713" -> "1738" 
+  "1733" -> "1745" 
+  "1588" -> "1586" 
+  "1619" -> "1618" 
+  "1692" -> "1690" 
+  "1702" -> "1700" 
+  "1707" -> "1711" 
+  "1711" -> "1706" 
+  "1714" -> "1713" 
+  "1734" -> "1733" 
+  "1621" -> "1619" 
+  "1708" -> "1707" 
+  "1715" -> "1721" 
+  "1719" -> "1714" 
+  "1735" -> "1739" 
+  "1739" -> "1734" 
+  "1710" -> "1708" 
+  "1716" -> "1715" 
+  "1720" -> "1730" 
+  "1725" -> "1719" 
+  "1736" -> "1735" 
+  "1721" -> "1724" 
+  "1724" -> "1720" 
+  "1726" -> "1725" 
+  "1738" -> "1736" 
+  "1727" -> "1731" 
+  "1731" -> "1726" 
+  "1728" -> "1727" 
+  "1730" -> "1728" 
+  "1575" -> "1579" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/380-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/380-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/380-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/380-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "mirror::Constructor::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;" {  
-"18679" [label = <(METHOD,mirror::Constructor::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;)> ]
-"18684" [label = <(METHOD_RETURN,ANY)> ]
-  "18679" -> "18684" 
+digraph "CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_FALSE)" {  
+"18338" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_FALSE))> ]
+"18343" [label = <(METHOD_RETURN,ANY)> ]
+  "18338" -> "18343" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/381-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/381-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/381-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/381-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "mirror::Method::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;" {  
-"18685" [label = <(METHOD,mirror::Method::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;)> ]
-"18690" [label = <(METHOD_RETURN,ANY)> ]
-  "18685" -> "18690" 
+digraph "InstanceOf" {  
+"18344" [label = <(METHOD,InstanceOf)> ]
+"18348" [label = <(METHOD_RETURN,ANY)> ]
+  "18344" -> "18348" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/382-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/382-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/382-cfg.dot	2023-06-07 19:35:01.647387147 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/382-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT(fid)" {  
-"18691" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(fid))> ]
-"18696" [label = <(METHOD_RETURN,ANY)> ]
-  "18691" -> "18696" 
+digraph "SetException" {  
+"18349" [label = <(METHOD,SetException)> ]
+"18353" [label = <(METHOD_RETURN,ANY)> ]
+  "18349" -> "18353" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/383-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/383-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/383-cfg.dot	2023-06-07 19:35:01.657387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/383-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "jni::DecodeArtField" {  
-"18697" [label = <(METHOD,jni::DecodeArtField)> ]
-"18701" [label = <(METHOD_RETURN,ANY)> ]
-  "18697" -> "18701" 
+digraph "CHECK_NON_NULL_ARGUMENT_RETURN(c, JNI_ERR)" {  
+"18354" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN(c, JNI_ERR))> ]
+"18359" [label = <(METHOD_RETURN,ANY)> ]
+  "18354" -> "18359" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/384-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/384-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/384-cfg.dot	2023-06-07 19:35:01.657387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/384-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.bracketedPrimary" {  
-"18702" [label = <(METHOD,&lt;operator&gt;.bracketedPrimary)> ]
-"18705" [label = <(METHOD_RETURN,ANY)> ]
-  "18702" -> "18705" 
+digraph "old_exception" {  
+"18360" [label = <(METHOD,old_exception)> ]
+"18363" [label = <(METHOD_RETURN,ANY)> ]
+  "18360" -> "18363" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/385-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/385-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/385-cfg.dot	2023-06-07 19:35:01.657387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/385-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.expressionList" {  
-"18706" [label = <(METHOD,&lt;operator&gt;.expressionList)> ]
-"18711" [label = <(METHOD_RETURN,ANY)> ]
-  "18706" -> "18711" 
+digraph "exception" {  
+"18364" [label = <(METHOD,exception)> ]
+"18368" [label = <(METHOD_RETURN,ANY)> ]
+  "18364" -> "18368" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/386-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/386-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/386-cfg.dot	2023-06-07 19:35:01.657387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/386-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT(java_object)" {  
-"18712" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(java_object))> ]
-"18717" [label = <(METHOD_RETURN,ANY)> ]
-  "18712" -> "18717" 
+digraph "exception_class" {  
+"18369" [label = <(METHOD,exception_class)> ]
+"18373" [label = <(METHOD_RETURN,ANY)> ]
+  "18369" -> "18373" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/387-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/387-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/387-cfg.dot	2023-06-07 19:35:01.657387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/387-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT(java_class)" {  
-"18718" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(java_class))> ]
-"18723" [label = <(METHOD_RETURN,ANY)> ]
-  "18718" -> "18723" 
+digraph "GetObjectClass" {  
+"18374" [label = <(METHOD,GetObjectClass)> ]
+"18378" [label = <(METHOD_RETURN,ANY)> ]
+  "18374" -> "18378" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/388-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/388-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/388-cfg.dot	2023-06-07 19:35:01.657387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/388-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "GetSuperClass" {  
-"18724" [label = <(METHOD,GetSuperClass)> ]
-"18727" [label = <(METHOD_RETURN,ANY)> ]
-  "18724" -> "18727" 
+digraph "get" {  
+"18379" [label = <(METHOD,get)> ]
+"18382" [label = <(METHOD_RETURN,ANY)> ]
+  "18379" -> "18382" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/389-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/389-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/389-cfg.dot	2023-06-07 19:35:01.657387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/389-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_RETURN" {  
-"18728" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN)<SUB>530</SUB>> ]
-"18732" [label = <(METHOD_RETURN,ANY)> ]
-  "18728" -> "18732" 
+digraph "GetMethodID" {  
+"18383" [label = <(METHOD,GetMethodID)> ]
+"18389" [label = <(METHOD_RETURN,ANY)> ]
+  "18383" -> "18389" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/39-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/39-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/39-cfg.dot	2023-06-07 19:35:01.367387175 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/39-cfg.dot	2023-06-07 19:35:07.937386524 +0330
@@ -1,27 +1,39 @@
-digraph "ThrowNew" {  
-"1709" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(c, JNI_ERR))<SUB>678</SUB>> ]
-"1728" [label = <(RETURN,return ThrowNewException(env, c, msg, nullptr);,return ThrowNewException(env, c, msg, nullptr);)<SUB>679</SUB>> ]
-"1729" [label = <(ThrowNewException,ThrowNewException(env, c, msg, nullptr))<SUB>679</SUB>> ]
-"1714" [label = <(UNLIKELY,UNLIKELY((c) == nullptr))<SUB>678</SUB>> ]
-"1715" [label = <(&lt;operator&gt;.equals,(c) == nullptr)<SUB>678</SUB>> ]
-"1719" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN(c, JNI_ERR),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;c == null&quot;))<SUB>678</SUB>> ]
-"1726" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(c, JNI_ERR),CHECK_NON_NULL_ARGUMENT_RETURN(c, JNI_ERR))<SUB>678</SUB>> ]
-"1720" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>678</SUB>> ]
-"1721" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>678</SUB>> ]
-"1723" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>678</SUB>> ]
-"1704" [label = <(METHOD,ThrowNew)<SUB>677</SUB>> ]
-"1734" [label = <(METHOD_RETURN,jint)<SUB>677</SUB>> ]
-  "1709" -> "1715" 
-  "1709" -> "1729" 
-  "1728" -> "1734" 
-  "1729" -> "1728" 
-  "1714" -> "1721" 
-  "1714" -> "1729" 
-  "1715" -> "1714" 
-  "1719" -> "1726" 
-  "1726" -> "1734" 
-  "1720" -> "1719" 
-  "1721" -> "1723" 
-  "1723" -> "1720" 
-  "1704" -> "1709" 
+digraph "ExceptionOccurred" {  
+"1757" [label = <(soa,soa(env))<SUB>644</SUB>> ]
+"1759" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; exception = soa.Self()-&gt;GetException())<SUB>645</SUB>> ]
+"1774" [label = <(RETURN,return soa.AddLocalReference&lt;jthrowable&gt;(exception);,return soa.AddLocalReference&lt;jthrowable&gt;(exception);)<SUB>646</SUB>> ]
+"1760" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; exception)<SUB>645</SUB>> ]
+"1767" [label = <(GetException,soa.Self()-&gt;GetException())<SUB>645</SUB>> ]
+"1775" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jthrowable&gt;(exception))<SUB>646</SUB>> ]
+"1761" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>645</SUB>> ]
+"1768" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;GetException)<SUB>645</SUB>> ]
+"1776" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jthrowable)<SUB>646</SUB>> ]
+"1763" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>645</SUB>> ]
+"1769" [label = <(Self,soa.Self())<SUB>645</SUB>> ]
+"1773" [label = <(FIELD_IDENTIFIER,GetException,GetException)<SUB>645</SUB>> ]
+"1777" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>646</SUB>> ]
+"1765" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>645</SUB>> ]
+"1770" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>645</SUB>> ]
+"1779" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>646</SUB>> ]
+"1772" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>645</SUB>> ]
+"1753" [label = <(METHOD,ExceptionOccurred)<SUB>643</SUB>> ]
+"1782" [label = <(METHOD_RETURN,jthrowable)<SUB>643</SUB>> ]
+  "1757" -> "1765" 
+  "1759" -> "1779" 
+  "1774" -> "1782" 
+  "1760" -> "1772" 
+  "1767" -> "1759" 
+  "1775" -> "1774" 
+  "1761" -> "1760" 
+  "1768" -> "1767" 
+  "1776" -> "1775" 
+  "1763" -> "1761" 
+  "1769" -> "1773" 
+  "1773" -> "1768" 
+  "1777" -> "1776" 
+  "1765" -> "1763" 
+  "1770" -> "1769" 
+  "1779" -> "1777" 
+  "1772" -> "1770" 
+  "1753" -> "1757" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/390-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/390-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/390-cfg.dot	2023-06-07 19:35:01.657387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/390-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_RETURN(java_class1, JNI_FALSE)" {  
-"18733" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN(java_class1, JNI_FALSE))> ]
-"18738" [label = <(METHOD_RETURN,ANY)> ]
-  "18733" -> "18738" 
+digraph "mirror::Object::PrettyTypeOf" {  
+"18390" [label = <(METHOD,mirror::Object::PrettyTypeOf)> ]
+"18394" [label = <(METHOD_RETURN,ANY)> ]
+  "18390" -> "18394" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/391-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/391-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/391-cfg.dot	2023-06-07 19:35:01.657387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/391-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_RETURN(java_class2, JNI_FALSE)" {  
-"18739" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN(java_class2, JNI_FALSE))> ]
-"18744" [label = <(METHOD_RETURN,ANY)> ]
-  "18739" -> "18744" 
+digraph "CallVoidMethod" {  
+"18395" [label = <(METHOD,CallVoidMethod)> ]
+"18400" [label = <(METHOD_RETURN,ANY)> ]
+  "18395" -> "18400" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/392-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/392-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/392-cfg.dot	2023-06-07 19:35:01.657387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/392-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "IsAssignableFrom" {  
-"18745" [label = <(METHOD,IsAssignableFrom)> ]
-"18749" [label = <(METHOD_RETURN,ANY)> ]
-  "18745" -> "18749" 
+digraph "EnsureLocalCapacityInternal" {  
+"18401" [label = <(METHOD,EnsureLocalCapacityInternal)> ]
+"18406" [label = <(METHOD_RETURN,ANY)> ]
+  "18401" -> "18406" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/393-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/393-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/393-cfg.dot	2023-06-07 19:35:01.657387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/393-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_FALSE)" {  
-"18750" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_FALSE))> ]
-"18755" [label = <(METHOD_RETURN,ANY)> ]
-  "18750" -> "18755" 
+digraph "PushFrame" {  
+"18407" [label = <(METHOD,PushFrame)> ]
+"18411" [label = <(METHOD_RETURN,ANY)> ]
+  "18407" -> "18411" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/394-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/394-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/394-cfg.dot	2023-06-07 19:35:01.657387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/394-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "InstanceOf" {  
-"18756" [label = <(METHOD,InstanceOf)> ]
-"18760" [label = <(METHOD_RETURN,ANY)> ]
-  "18756" -> "18760" 
+digraph "down_cast&lt;JNIEnvExt*&gt;" {  
+"18412" [label = <(METHOD,down_cast&lt;JNIEnvExt*&gt;)> ]
+"18415" [label = <(METHOD_RETURN,ANY)> ]
+  "18412" -> "18415" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/395-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/395-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/395-cfg.dot	2023-06-07 19:35:01.657387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/395-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "SetException" {  
-"18761" [label = <(METHOD,SetException)> ]
-"18765" [label = <(METHOD_RETURN,ANY)> ]
-  "18761" -> "18765" 
+digraph "PopFrame" {  
+"18416" [label = <(METHOD,PopFrame)> ]
+"18419" [label = <(METHOD_RETURN,ANY)> ]
+  "18416" -> "18419" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/396-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/396-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/396-cfg.dot	2023-06-07 19:35:01.657387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/396-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_RETURN(c, JNI_ERR)" {  
-"18766" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN(c, JNI_ERR))> ]
-"18771" [label = <(METHOD_RETURN,ANY)> ]
-  "18766" -> "18771" 
+digraph "Env" {  
+"18420" [label = <(METHOD,Env)> ]
+"18423" [label = <(METHOD_RETURN,ANY)> ]
+  "18420" -> "18423" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/397-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/397-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/397-cfg.dot	2023-06-07 19:35:01.657387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/397-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "old_exception" {  
-"18772" [label = <(METHOD,old_exception)> ]
-"18775" [label = <(METHOD_RETURN,ANY)> ]
-  "18772" -> "18775" 
+digraph "AddGlobalRef" {  
+"18424" [label = <(METHOD,AddGlobalRef)> ]
+"18429" [label = <(METHOD_RETURN,ANY)> ]
+  "18424" -> "18429" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/398-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/398-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/398-cfg.dot	2023-06-07 19:35:01.657387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/398-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "exception" {  
-"18776" [label = <(METHOD,exception)> ]
-"18780" [label = <(METHOD_RETURN,ANY)> ]
-  "18776" -> "18780" 
+digraph "Vm" {  
+"18430" [label = <(METHOD,Vm)> ]
+"18433" [label = <(METHOD_RETURN,ANY)> ]
+  "18430" -> "18433" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/399-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/399-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/399-cfg.dot	2023-06-07 19:35:01.657387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/399-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "exception_class" {  
-"18781" [label = <(METHOD,exception_class)> ]
-"18785" [label = <(METHOD_RETURN,ANY)> ]
-  "18781" -> "18785" 
+digraph "DeleteGlobalRef" {  
+"18434" [label = <(METHOD,DeleteGlobalRef)> ]
+"18438" [label = <(METHOD_RETURN,ANY)> ]
+  "18434" -> "18438" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/4-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/4-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/4-cfg.dot	2023-06-07 19:35:01.327387179 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/4-cfg.dot	2023-06-07 19:35:07.907386529 +0330
@@ -1,5 +1,9 @@
-digraph "ScopedVAArgs" {  
-"25" [label = <(METHOD,ScopedVAArgs)<SUB>74</SUB>> ]
-"28" [label = <(METHOD_RETURN,ANY)<SUB>74</SUB>> ]
-  "25" -> "28" 
+digraph "~ScopedVAArgs" {  
+"26" [label = <(va_end,va_end(*args))<SUB>73</SUB>> ]
+"27" [label = <(&lt;operator&gt;.indirection,*args)<SUB>73</SUB>> ]
+"24" [label = <(METHOD,~ScopedVAArgs)<SUB>73</SUB>> ]
+"29" [label = <(METHOD_RETURN,ANY)<SUB>73</SUB>> ]
+  "26" -> "29" 
+  "27" -> "26" 
+  "24" -> "27" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/40-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/40-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/40-cfg.dot	2023-06-07 19:35:01.367387175 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/40-cfg.dot	2023-06-07 19:35:07.937386524 +0330
@@ -1,23 +1,11 @@
-digraph "ExceptionCheck" {  
-"1739" [label = <(RETURN,return static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_-&gt;IsExceptionPending() ? JNI_TRUE : JNI_FALSE;,return static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_-&gt;IsExceptionPending() ? JNI_TRUE : JNI_FALSE;)<SUB>683</SUB>> ]
-"1740" [label = <(&lt;operator&gt;.conditional,static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_-&gt;IsExceptionPending() ? JNI_TRUE : JNI_FALSE)<SUB>683</SUB>> ]
-"1741" [label = <(IsExceptionPending,static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_-&gt;IsExceptionPending())<SUB>683</SUB>> ]
-"1742" [label = <(&lt;operator&gt;.indirectFieldAccess,static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_-&gt;IsExceptionPending)<SUB>683</SUB>> ]
-"1743" [label = <(&lt;operator&gt;.indirectFieldAccess,static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_)<SUB>683</SUB>> ]
-"1748" [label = <(FIELD_IDENTIFIER,IsExceptionPending,IsExceptionPending)<SUB>683</SUB>> ]
-"1744" [label = <(&lt;operator&gt;.cast,static_cast&lt;JNIEnvExt*&gt;(env))<SUB>683</SUB>> ]
-"1747" [label = <(FIELD_IDENTIFIER,self_,self_)<SUB>683</SUB>> ]
-"1745" [label = <(UNKNOWN,JNIEnvExt*,JNIEnvExt*)<SUB>683</SUB>> ]
-"1736" [label = <(METHOD,ExceptionCheck)<SUB>682</SUB>> ]
-"1751" [label = <(METHOD_RETURN,jboolean)<SUB>682</SUB>> ]
-  "1739" -> "1751" 
-  "1740" -> "1739" 
-  "1741" -> "1740" 
-  "1742" -> "1741" 
-  "1743" -> "1748" 
-  "1748" -> "1742" 
-  "1744" -> "1747" 
-  "1747" -> "1743" 
-  "1745" -> "1744" 
-  "1736" -> "1745" 
+digraph "FatalError" {  
+"1788" [label = <(&lt;operator&gt;.shiftLeft,LOG(FATAL) &lt;&lt; &quot;JNI FatalError called: &quot; &lt;&lt; msg)<SUB>650</SUB>> ]
+"1789" [label = <(&lt;operator&gt;.shiftLeft,LOG(FATAL) &lt;&lt; &quot;JNI FatalError called: &quot;)<SUB>650</SUB>> ]
+"1790" [label = <(LOG,LOG(FATAL))<SUB>650</SUB>> ]
+"1784" [label = <(METHOD,FatalError)<SUB>649</SUB>> ]
+"1794" [label = <(METHOD_RETURN,void)<SUB>649</SUB>> ]
+  "1788" -> "1794" 
+  "1789" -> "1788" 
+  "1790" -> "1789" 
+  "1784" -> "1790" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/400-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/400-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/400-cfg.dot	2023-06-07 19:35:01.657387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/400-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "GetObjectClass" {  
-"18786" [label = <(METHOD,GetObjectClass)> ]
-"18790" [label = <(METHOD_RETURN,ANY)> ]
-  "18786" -> "18790" 
+digraph "AddWeakGlobalRef" {  
+"18439" [label = <(METHOD,AddWeakGlobalRef)> ]
+"18444" [label = <(METHOD_RETURN,ANY)> ]
+  "18439" -> "18444" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/401-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/401-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/401-cfg.dot	2023-06-07 19:35:01.657387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/401-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "get" {  
-"18791" [label = <(METHOD,get)> ]
-"18794" [label = <(METHOD_RETURN,ANY)> ]
-  "18791" -> "18794" 
+digraph "DeleteWeakGlobalRef" {  
+"18445" [label = <(METHOD,DeleteWeakGlobalRef)> ]
+"18450" [label = <(METHOD_RETURN,ANY)> ]
+  "18445" -> "18450" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/402-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/402-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/402-cfg.dot	2023-06-07 19:35:01.657387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/402-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "GetMethodID" {  
-"18795" [label = <(METHOD,GetMethodID)> ]
-"18801" [label = <(METHOD_RETURN,ANY)> ]
-  "18795" -> "18801" 
+digraph "Remove" {  
+"18451" [label = <(METHOD,Remove)> ]
+"18456" [label = <(METHOD_RETURN,ANY)> ]
+  "18451" -> "18456" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/403-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/403-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/403-cfg.dot	2023-06-07 19:35:01.657387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/403-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "mirror::Object::PrettyTypeOf" {  
-"18802" [label = <(METHOD,mirror::Object::PrettyTypeOf)> ]
-"18806" [label = <(METHOD_RETURN,ANY)> ]
-  "18802" -> "18806" 
+digraph "IsStringClass" {  
+"18457" [label = <(METHOD,IsStringClass)> ]
+"18460" [label = <(METHOD_RETURN,ANY)> ]
+  "18457" -> "18460" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/404-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/404-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/404-cfg.dot	2023-06-07 19:35:01.657387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/404-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "CallVoidMethod" {  
-"18807" [label = <(METHOD,CallVoidMethod)> ]
-"18812" [label = <(METHOD_RETURN,ANY)> ]
-  "18807" -> "18812" 
+digraph "GetCurrentAllocator" {  
+"18461" [label = <(METHOD,GetCurrentAllocator)> ]
+"18464" [label = <(METHOD_RETURN,ANY)> ]
+  "18461" -> "18464" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/405-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/405-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/405-cfg.dot	2023-06-07 19:35:01.657387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/405-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "EnsureLocalCapacityInternal" {  
-"18813" [label = <(METHOD,EnsureLocalCapacityInternal)> ]
-"18818" [label = <(METHOD_RETURN,ANY)> ]
-  "18813" -> "18818" 
+digraph "GetHeap" {  
+"18465" [label = <(METHOD,GetHeap)> ]
+"18468" [label = <(METHOD_RETURN,ANY)> ]
+  "18465" -> "18468" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/406-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/406-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/406-cfg.dot	2023-06-07 19:35:01.657387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/406-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "PushFrame" {  
-"18819" [label = <(METHOD,PushFrame)> ]
-"18823" [label = <(METHOD_RETURN,ANY)> ]
-  "18819" -> "18823" 
+digraph "mirror::String::AllocEmptyString" {  
+"18469" [label = <(METHOD,mirror::String::AllocEmptyString)> ]
+"18474" [label = <(METHOD_RETURN,ANY)> ]
+  "18469" -> "18474" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/407-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/407-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/407-cfg.dot	2023-06-07 19:35:01.657387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/407-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "down_cast&lt;JNIEnvExt*&gt;" {  
-"18824" [label = <(METHOD,down_cast&lt;JNIEnvExt*&gt;)> ]
-"18827" [label = <(METHOD_RETURN,ANY)> ]
-  "18824" -> "18827" 
+digraph "AllocObject" {  
+"18475" [label = <(METHOD,AllocObject)> ]
+"18479" [label = <(METHOD_RETURN,ANY)> ]
+  "18475" -> "18479" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/408-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/408-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/408-cfg.dot	2023-06-07 19:35:01.657387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/408-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "PopFrame" {  
-"18828" [label = <(METHOD,PopFrame)> ]
-"18831" [label = <(METHOD_RETURN,ANY)> ]
-  "18828" -> "18831" 
+digraph "va_start" {  
+"18480" [label = <(METHOD,va_start)> ]
+"18484" [label = <(METHOD_RETURN,ANY)> ]
+  "18480" -> "18484" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/409-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/409-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/409-cfg.dot	2023-06-07 19:35:01.657387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/409-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "Env" {  
-"18832" [label = <(METHOD,Env)> ]
-"18835" [label = <(METHOD_RETURN,ANY)> ]
-  "18832" -> "18835" 
+digraph "free_args_later" {  
+"18485" [label = <(METHOD,free_args_later)> ]
+"18488" [label = <(METHOD_RETURN,ANY)> ]
+  "18485" -> "18488" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/41-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/41-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/41-cfg.dot	2023-06-07 19:35:01.367387175 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/41-cfg.dot	2023-06-07 19:35:07.937386524 +0330
@@ -1,19 +1,24 @@
-digraph "ExceptionClear" {  
-"1757" [label = <(soa,soa(env))<SUB>687</SUB>> ]
-"1759" [label = <(ClearException,soa.Self()-&gt;ClearException())<SUB>688</SUB>> ]
-"1760" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;ClearException)<SUB>688</SUB>> ]
-"1761" [label = <(Self,soa.Self())<SUB>688</SUB>> ]
-"1765" [label = <(FIELD_IDENTIFIER,ClearException,ClearException)<SUB>688</SUB>> ]
-"1762" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>688</SUB>> ]
-"1764" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>688</SUB>> ]
-"1753" [label = <(METHOD,ExceptionClear)<SUB>686</SUB>> ]
-"1766" [label = <(METHOD_RETURN,void)<SUB>686</SUB>> ]
-  "1757" -> "1764" 
-  "1759" -> "1766" 
-  "1760" -> "1759" 
-  "1761" -> "1765" 
-  "1765" -> "1760" 
-  "1762" -> "1761" 
-  "1764" -> "1762" 
-  "1753" -> "1757" 
+digraph "PushLocalFrame" {  
+"1801" [label = <(soa,soa(env))<SUB>655</SUB>> ]
+"1813" [label = <(PushFrame,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;PushFrame(capacity))<SUB>659</SUB>> ]
+"1819" [label = <(RETURN,return JNI_OK;,return JNI_OK;)<SUB>660</SUB>> ]
+"1804" [label = <(&lt;operator&gt;.notEquals,EnsureLocalCapacityInternal(soa, capacity, &quot;PushLocalFrame&quot;) != JNI_OK)<SUB>656</SUB>> ]
+"1814" [label = <(&lt;operator&gt;.indirectFieldAccess,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;PushFrame)<SUB>659</SUB>> ]
+"1805" [label = <(EnsureLocalCapacityInternal,EnsureLocalCapacityInternal(soa, capacity, &quot;PushLocalFrame&quot;))<SUB>656</SUB>> ]
+"1811" [label = <(RETURN,return JNI_ERR;,return JNI_ERR;)<SUB>657</SUB>> ]
+"1815" [label = <(down_cast&lt;JNIEnvExt*&gt;,down_cast&lt;JNIEnvExt*&gt;(env))<SUB>659</SUB>> ]
+"1817" [label = <(FIELD_IDENTIFIER,PushFrame,PushFrame)<SUB>659</SUB>> ]
+"1796" [label = <(METHOD,PushLocalFrame)<SUB>653</SUB>> ]
+"1821" [label = <(METHOD_RETURN,jint)<SUB>653</SUB>> ]
+  "1801" -> "1805" 
+  "1813" -> "1819" 
+  "1819" -> "1821" 
+  "1804" -> "1811" 
+  "1804" -> "1815" 
+  "1814" -> "1813" 
+  "1805" -> "1804" 
+  "1811" -> "1821" 
+  "1815" -> "1817" 
+  "1817" -> "1814" 
+  "1796" -> "1801" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/410-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/410-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/410-cfg.dot	2023-06-07 19:35:01.657387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/410-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "AddGlobalRef" {  
-"18836" [label = <(METHOD,AddGlobalRef)> ]
-"18841" [label = <(METHOD_RETURN,ANY)> ]
-  "18836" -> "18841" 
+digraph "NewObjectV" {  
+"18489" [label = <(METHOD,NewObjectV)> ]
+"18495" [label = <(METHOD_RETURN,ANY)> ]
+  "18489" -> "18495" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/411-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/411-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/411-cfg.dot	2023-06-07 19:35:01.657387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/411-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "Vm" {  
-"18842" [label = <(METHOD,Vm)> ]
-"18845" [label = <(METHOD_RETURN,ANY)> ]
-  "18842" -> "18845" 
+digraph "WellKnownClasses::StringInitToStringFactory" {  
+"18496" [label = <(METHOD,WellKnownClasses::StringInitToStringFactory)> ]
+"18500" [label = <(METHOD_RETURN,ANY)> ]
+  "18496" -> "18500" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/412-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/412-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/412-cfg.dot	2023-06-07 19:35:01.657387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/412-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "DeleteGlobalRef" {  
-"18846" [label = <(METHOD,DeleteGlobalRef)> ]
-"18850" [label = <(METHOD_RETURN,ANY)> ]
-  "18846" -> "18850" 
+digraph "CallStaticObjectMethodV" {  
+"18501" [label = <(METHOD,CallStaticObjectMethodV)> ]
+"18507" [label = <(METHOD_RETURN,ANY)> ]
+  "18501" -> "18507" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/413-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/413-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/413-cfg.dot	2023-06-07 19:35:01.657387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/413-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "AddWeakGlobalRef" {  
-"18851" [label = <(METHOD,AddWeakGlobalRef)> ]
-"18856" [label = <(METHOD_RETURN,ANY)> ]
-  "18851" -> "18856" 
+digraph "CallNonvirtualVoidMethodV" {  
+"18508" [label = <(METHOD,CallNonvirtualVoidMethodV)> ]
+"18515" [label = <(METHOD_RETURN,ANY)> ]
+  "18508" -> "18515" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/414-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/414-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/414-cfg.dot	2023-06-07 19:35:01.657387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/414-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "DeleteWeakGlobalRef" {  
-"18857" [label = <(METHOD,DeleteWeakGlobalRef)> ]
-"18862" [label = <(METHOD_RETURN,ANY)> ]
-  "18857" -> "18862" 
+digraph "CallStaticObjectMethodA" {  
+"18516" [label = <(METHOD,CallStaticObjectMethodA)> ]
+"18522" [label = <(METHOD_RETURN,ANY)> ]
+  "18516" -> "18522" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/415-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/415-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/415-cfg.dot	2023-06-07 19:35:01.657387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/415-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "Remove" {  
-"18863" [label = <(METHOD,Remove)> ]
-"18868" [label = <(METHOD_RETURN,ANY)> ]
-  "18863" -> "18868" 
+digraph "CallNonvirtualVoidMethodA" {  
+"18523" [label = <(METHOD,CallNonvirtualVoidMethodA)> ]
+"18530" [label = <(METHOD_RETURN,ANY)> ]
+  "18523" -> "18530" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/416-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/416-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/416-cfg.dot	2023-06-07 19:35:01.657387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/416-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "IsStringClass" {  
-"18869" [label = <(METHOD,IsStringClass)> ]
-"18872" [label = <(METHOD_RETURN,ANY)> ]
-  "18869" -> "18872" 
+digraph "CHECK_NON_NULL_ARGUMENT(sig)" {  
+"18531" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(sig))> ]
+"18536" [label = <(METHOD_RETURN,ANY)> ]
+  "18531" -> "18536" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/417-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/417-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/417-cfg.dot	2023-06-07 19:35:01.657387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/417-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "GetCurrentAllocator" {  
-"18873" [label = <(METHOD,GetCurrentAllocator)> ]
-"18876" [label = <(METHOD_RETURN,ANY)> ]
-  "18873" -> "18876" 
+digraph "CHECK_NON_NULL_ARGUMENT(obj)" {  
+"18537" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(obj))> ]
+"18542" [label = <(METHOD_RETURN,ANY)> ]
+  "18537" -> "18542" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/418-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/418-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/418-cfg.dot	2023-06-07 19:35:01.657387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/418-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "GetHeap" {  
-"18877" [label = <(METHOD,GetHeap)> ]
-"18880" [label = <(METHOD_RETURN,ANY)> ]
-  "18877" -> "18880" 
+digraph "result" {  
+"18543" [label = <(METHOD,result)> ]
+"18546" [label = <(METHOD_RETURN,ANY)> ]
+  "18543" -> "18546" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/419-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/419-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/419-cfg.dot	2023-06-07 19:35:01.657387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/419-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "mirror::String::AllocEmptyString" {  
-"18881" [label = <(METHOD,mirror::String::AllocEmptyString)> ]
-"18886" [label = <(METHOD_RETURN,ANY)> ]
-  "18881" -> "18886" 
+digraph "InvokeVirtualOrInterfaceWithVarArgs" {  
+"18547" [label = <(METHOD,InvokeVirtualOrInterfaceWithVarArgs)> ]
+"18553" [label = <(METHOD_RETURN,ANY)> ]
+  "18547" -> "18553" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/42-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/42-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/42-cfg.dot	2023-06-07 19:35:01.367387175 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/42-cfg.dot	2023-06-07 19:35:07.937386524 +0330
@@ -1,240 +1,51 @@
-digraph "ExceptionDescribe" {  
-"1772" [label = <(soa,soa(env))<SUB>692</SUB>> ]
-"1785" [label = <(&lt;operator&gt;.greaterThan,StackHandleScope&lt;1&gt; hs(soa.Self()))<SUB>699</SUB>> ]
-"1794" [label = <(&lt;operator&gt;.greaterThan,Handle&lt;mirror::Throwable&gt; old_exception(\012        hs.NewHandle&lt;mirror::Throwable&gt;(soa.Self()-&gt;GetException())))<SUB>700</SUB>> ]
-"1816" [label = <(ClearException,soa.Self()-&gt;ClearException())<SUB>702</SUB>> ]
-"1823" [label = <(&lt;operator&gt;.greaterThan,ScopedLocalRef&lt;jthrowable&gt; exception(env,\012                                         soa.AddLocalReference&lt;jthrowable&gt;(old_exception.Get())))<SUB>703</SUB>> ]
-"1839" [label = <(&lt;operator&gt;.greaterThan,ScopedLocalRef&lt;jclass&gt; exception_class(env, env-&gt;GetObjectClass(exception.get())))<SUB>705</SUB>> ]
-"1854" [label = <(&lt;operator&gt;.assignment,mid = env-&gt;GetMethodID(exception_class.get(), &quot;printStackTrace&quot;, &quot;()V&quot;))<SUB>706</SUB>> ]
-"1933" [label = <(SetException,soa.Self()-&gt;SetException(old_exception.Get()))<SUB>718</SUB>> ]
-"1775" [label = <(&lt;operator&gt;.logicalNot,!soa.Self()-&gt;GetException())<SUB>695</SUB>> ]
-"1786" [label = <(&lt;operator&gt;.lessThan,StackHandleScope&lt;1)<SUB>699</SUB>> ]
-"1789" [label = <(hs,hs(soa.Self()))<SUB>699</SUB>> ]
-"1795" [label = <(&lt;operator&gt;.lessThan,Handle&lt;mirror::Throwable)<SUB>700</SUB>> ]
-"1800" [label = <(old_exception,old_exception(\012        hs.NewHandle&lt;mirror::Throwable&gt;(soa.Self()-&gt;GetException())))<SUB>700</SUB>> ]
-"1817" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;ClearException)<SUB>702</SUB>> ]
-"1824" [label = <(&lt;operator&gt;.lessThan,ScopedLocalRef&lt;jthrowable)<SUB>703</SUB>> ]
-"1827" [label = <(exception,exception(env,\012                                         soa.AddLocalReference&lt;jthrowable&gt;(old_exception.Get())))<SUB>703</SUB>> ]
-"1840" [label = <(&lt;operator&gt;.lessThan,ScopedLocalRef&lt;jclass)<SUB>705</SUB>> ]
-"1843" [label = <(exception_class,exception_class(env, env-&gt;GetObjectClass(exception.get())))<SUB>705</SUB>> ]
-"1856" [label = <(GetMethodID,env-&gt;GetMethodID(exception_class.get(), &quot;printStackTrace&quot;, &quot;()V&quot;))<SUB>706</SUB>> ]
-"1867" [label = <(&lt;operator&gt;.equals,mid == nullptr)<SUB>707</SUB>> ]
-"1934" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;SetException)<SUB>718</SUB>> ]
-"1940" [label = <(Get,old_exception.Get())<SUB>718</SUB>> ]
-"1776" [label = <(GetException,soa.Self()-&gt;GetException())<SUB>695</SUB>> ]
-"1784" [label = <(RETURN,return;,return;)<SUB>696</SUB>> ]
-"1790" [label = <(Self,soa.Self())<SUB>699</SUB>> ]
-"1797" [label = <(&lt;operator&gt;.fieldAccess,mirror::Throwable)<SUB>700</SUB>> ]
-"1801" [label = <(&lt;operator&gt;.greaterThan,hs.NewHandle&lt;mirror::Throwable&gt;(soa.Self()-&gt;GetException()))<SUB>701</SUB>> ]
-"1818" [label = <(Self,soa.Self())<SUB>702</SUB>> ]
-"1822" [label = <(FIELD_IDENTIFIER,ClearException,ClearException)<SUB>702</SUB>> ]
-"1829" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jthrowable&gt;(old_exception.Get()))<SUB>704</SUB>> ]
-"1845" [label = <(GetObjectClass,env-&gt;GetObjectClass(exception.get()))<SUB>705</SUB>> ]
-"1857" [label = <(&lt;operator&gt;.indirectFieldAccess,env-&gt;GetMethodID)<SUB>706</SUB>> ]
-"1860" [label = <(get,exception_class.get())<SUB>706</SUB>> ]
-"1871" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI WARNING: no printStackTrace()V in &quot;\012 &lt;&lt; mirror::Object::PrettyTypeOf(old_exception.Get()))<SUB>708</SUB>> ]
-"1935" [label = <(Self,soa.Self())<SUB>718</SUB>> ]
-"1939" [label = <(FIELD_IDENTIFIER,SetException,SetException)<SUB>718</SUB>> ]
-"1941" [label = <(&lt;operator&gt;.fieldAccess,old_exception.Get)<SUB>718</SUB>> ]
-"1777" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;GetException)<SUB>695</SUB>> ]
-"1791" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>699</SUB>> ]
-"1799" [label = <(FIELD_IDENTIFIER,Throwable,Throwable)<SUB>700</SUB>> ]
-"1802" [label = <(&lt;operator&gt;.lessThan,hs.NewHandle&lt;mirror::Throwable)<SUB>701</SUB>> ]
-"1809" [label = <(GetException,soa.Self()-&gt;GetException())<SUB>701</SUB>> ]
-"1819" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>702</SUB>> ]
-"1830" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jthrowable)<SUB>704</SUB>> ]
-"1835" [label = <(Get,old_exception.Get())<SUB>704</SUB>> ]
-"1846" [label = <(&lt;operator&gt;.indirectFieldAccess,env-&gt;GetObjectClass)<SUB>705</SUB>> ]
-"1849" [label = <(get,exception.get())<SUB>705</SUB>> ]
-"1859" [label = <(FIELD_IDENTIFIER,GetMethodID,GetMethodID)<SUB>706</SUB>> ]
-"1861" [label = <(&lt;operator&gt;.fieldAccess,exception_class.get)<SUB>706</SUB>> ]
-"1872" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI WARNING: no printStackTrace()V in &quot;)<SUB>708</SUB>> ]
-"1876" [label = <(mirror::Object::PrettyTypeOf,mirror::Object::PrettyTypeOf(old_exception.Get()))<SUB>709</SUB>> ]
-"1888" [label = <(CallVoidMethod,env-&gt;CallVoidMethod(exception.get(), mid))<SUB>711</SUB>> ]
-"1936" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>718</SUB>> ]
-"1943" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>718</SUB>> ]
-"1778" [label = <(Self,soa.Self())<SUB>695</SUB>> ]
-"1782" [label = <(FIELD_IDENTIFIER,GetException,GetException)<SUB>695</SUB>> ]
-"1793" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>699</SUB>> ]
-"1803" [label = <(&lt;operator&gt;.fieldAccess,hs.NewHandle)<SUB>701</SUB>> ]
-"1806" [label = <(&lt;operator&gt;.fieldAccess,mirror::Throwable)<SUB>701</SUB>> ]
-"1810" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;GetException)<SUB>701</SUB>> ]
-"1821" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>702</SUB>> ]
-"1831" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>704</SUB>> ]
-"1836" [label = <(&lt;operator&gt;.fieldAccess,old_exception.Get)<SUB>704</SUB>> ]
-"1848" [label = <(FIELD_IDENTIFIER,GetObjectClass,GetObjectClass)<SUB>705</SUB>> ]
-"1850" [label = <(&lt;operator&gt;.fieldAccess,exception.get)<SUB>705</SUB>> ]
-"1863" [label = <(FIELD_IDENTIFIER,get,get)<SUB>706</SUB>> ]
-"1873" [label = <(LOG,LOG(WARNING))<SUB>708</SUB>> ]
-"1877" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object::PrettyTypeOf)<SUB>709</SUB>> ]
-"1882" [label = <(Get,old_exception.Get())<SUB>709</SUB>> ]
-"1889" [label = <(&lt;operator&gt;.indirectFieldAccess,env-&gt;CallVoidMethod)<SUB>711</SUB>> ]
-"1892" [label = <(get,exception.get())<SUB>711</SUB>> ]
-"1898" [label = <(IsExceptionPending,soa.Self()-&gt;IsExceptionPending())<SUB>712</SUB>> ]
-"1938" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>718</SUB>> ]
-"1779" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>695</SUB>> ]
-"1805" [label = <(FIELD_IDENTIFIER,NewHandle,NewHandle)<SUB>701</SUB>> ]
-"1808" [label = <(FIELD_IDENTIFIER,Throwable,Throwable)<SUB>701</SUB>> ]
-"1811" [label = <(Self,soa.Self())<SUB>701</SUB>> ]
-"1815" [label = <(FIELD_IDENTIFIER,GetException,GetException)<SUB>701</SUB>> ]
-"1833" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>704</SUB>> ]
-"1838" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>704</SUB>> ]
-"1852" [label = <(FIELD_IDENTIFIER,get,get)<SUB>705</SUB>> ]
-"1878" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>709</SUB>> ]
-"1881" [label = <(FIELD_IDENTIFIER,PrettyTypeOf,PrettyTypeOf)<SUB>709</SUB>> ]
-"1883" [label = <(&lt;operator&gt;.fieldAccess,old_exception.Get)<SUB>709</SUB>> ]
-"1891" [label = <(FIELD_IDENTIFIER,CallVoidMethod,CallVoidMethod)<SUB>711</SUB>> ]
-"1893" [label = <(&lt;operator&gt;.fieldAccess,exception.get)<SUB>711</SUB>> ]
-"1899" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;IsExceptionPending)<SUB>712</SUB>> ]
-"1906" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI WARNING: &quot; &lt;&lt; mirror::Object::PrettyTypeOf(soa.Self()-&gt;GetException())\012 &lt;&lt; &quot; thrown while calling printStackTrace&quot;)<SUB>713</SUB>> ]
-"1926" [label = <(ClearException,soa.Self()-&gt;ClearException())<SUB>715</SUB>> ]
-"1781" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>695</SUB>> ]
-"1812" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>701</SUB>> ]
-"1885" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>709</SUB>> ]
-"1895" [label = <(FIELD_IDENTIFIER,get,get)<SUB>711</SUB>> ]
-"1900" [label = <(Self,soa.Self())<SUB>712</SUB>> ]
-"1904" [label = <(FIELD_IDENTIFIER,IsExceptionPending,IsExceptionPending)<SUB>712</SUB>> ]
-"1907" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI WARNING: &quot; &lt;&lt; mirror::Object::PrettyTypeOf(soa.Self()-&gt;GetException()))<SUB>713</SUB>> ]
-"1927" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;ClearException)<SUB>715</SUB>> ]
-"1814" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>701</SUB>> ]
-"1901" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>712</SUB>> ]
-"1908" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI WARNING: &quot;)<SUB>713</SUB>> ]
-"1912" [label = <(mirror::Object::PrettyTypeOf,mirror::Object::PrettyTypeOf(soa.Self()-&gt;GetException()))<SUB>713</SUB>> ]
-"1928" [label = <(Self,soa.Self())<SUB>715</SUB>> ]
-"1932" [label = <(FIELD_IDENTIFIER,ClearException,ClearException)<SUB>715</SUB>> ]
-"1903" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>712</SUB>> ]
-"1909" [label = <(LOG,LOG(WARNING))<SUB>713</SUB>> ]
-"1913" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object::PrettyTypeOf)<SUB>713</SUB>> ]
-"1918" [label = <(GetException,soa.Self()-&gt;GetException())<SUB>713</SUB>> ]
-"1929" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>715</SUB>> ]
-"1914" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>713</SUB>> ]
-"1917" [label = <(FIELD_IDENTIFIER,PrettyTypeOf,PrettyTypeOf)<SUB>713</SUB>> ]
-"1919" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;GetException)<SUB>713</SUB>> ]
-"1931" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>715</SUB>> ]
-"1920" [label = <(Self,soa.Self())<SUB>713</SUB>> ]
-"1924" [label = <(FIELD_IDENTIFIER,GetException,GetException)<SUB>713</SUB>> ]
-"1921" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>713</SUB>> ]
-"1923" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>713</SUB>> ]
-"1768" [label = <(METHOD,ExceptionDescribe)<SUB>691</SUB>> ]
-"1944" [label = <(METHOD_RETURN,void)<SUB>691</SUB>> ]
-  "1772" -> "1781" 
-  "1785" -> "1799" 
-  "1794" -> "1821" 
-  "1816" -> "1824" 
-  "1823" -> "1840" 
-  "1839" -> "1859" 
-  "1854" -> "1867" 
-  "1933" -> "1944" 
-  "1775" -> "1784" 
-  "1775" -> "1786" 
-  "1786" -> "1793" 
-  "1789" -> "1785" 
-  "1795" -> "1805" 
-  "1800" -> "1794" 
-  "1817" -> "1816" 
-  "1824" -> "1833" 
-  "1827" -> "1823" 
-  "1840" -> "1848" 
+digraph "PopLocalFrame" {  
+"1828" [label = <(soa,soa(env))<SUB>664</SUB>> ]
+"1830" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; survivor = soa.Decode&lt;mirror::Object&gt;(java_survivor))<SUB>665</SUB>> ]
+"1847" [label = <(PopFrame,soa.Env()-&gt;PopFrame())<SUB>666</SUB>> ]
+"1854" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(survivor);,return soa.AddLocalReference&lt;jobject&gt;(survivor);)<SUB>667</SUB>> ]
+"1831" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; survivor)<SUB>665</SUB>> ]
+"1838" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(java_survivor))<SUB>665</SUB>> ]
+"1848" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Env()-&gt;PopFrame)<SUB>666</SUB>> ]
+"1855" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(survivor))<SUB>667</SUB>> ]
+"1832" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>665</SUB>> ]
+"1839" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>665</SUB>> ]
+"1849" [label = <(Env,soa.Env())<SUB>666</SUB>> ]
+"1853" [label = <(FIELD_IDENTIFIER,PopFrame,PopFrame)<SUB>666</SUB>> ]
+"1856" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>667</SUB>> ]
+"1834" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>665</SUB>> ]
+"1840" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>665</SUB>> ]
+"1843" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>665</SUB>> ]
+"1850" [label = <(&lt;operator&gt;.fieldAccess,soa.Env)<SUB>666</SUB>> ]
+"1857" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>667</SUB>> ]
+"1836" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>665</SUB>> ]
+"1842" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>665</SUB>> ]
+"1845" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>665</SUB>> ]
+"1852" [label = <(FIELD_IDENTIFIER,Env,Env)<SUB>666</SUB>> ]
+"1859" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>667</SUB>> ]
+"1823" [label = <(METHOD,PopLocalFrame)<SUB>663</SUB>> ]
+"1862" [label = <(METHOD_RETURN,jobject)<SUB>663</SUB>> ]
+  "1828" -> "1836" 
+  "1830" -> "1852" 
+  "1847" -> "1859" 
+  "1854" -> "1862" 
+  "1831" -> "1842" 
+  "1838" -> "1830" 
+  "1848" -> "1847" 
+  "1855" -> "1854" 
+  "1832" -> "1831" 
+  "1839" -> "1838" 
+  "1849" -> "1853" 
+  "1853" -> "1848" 
+  "1856" -> "1855" 
+  "1834" -> "1832" 
+  "1840" -> "1845" 
   "1843" -> "1839" 
-  "1856" -> "1854" 
-  "1867" -> "1873" 
-  "1867" -> "1891" 
-  "1934" -> "1943" 
-  "1940" -> "1933" 
-  "1776" -> "1775" 
-  "1784" -> "1944" 
-  "1790" -> "1789" 
-  "1797" -> "1795" 
-  "1801" -> "1800" 
-  "1818" -> "1822" 
-  "1822" -> "1817" 
-  "1829" -> "1827" 
-  "1845" -> "1843" 
-  "1857" -> "1863" 
-  "1860" -> "1856" 
-  "1871" -> "1938" 
-  "1935" -> "1939" 
-  "1939" -> "1934" 
-  "1941" -> "1940" 
-  "1777" -> "1776" 
-  "1791" -> "1790" 
-  "1799" -> "1797" 
-  "1802" -> "1814" 
-  "1809" -> "1801" 
-  "1819" -> "1818" 
-  "1830" -> "1838" 
-  "1835" -> "1829" 
-  "1846" -> "1852" 
-  "1849" -> "1845" 
-  "1859" -> "1857" 
-  "1861" -> "1860" 
-  "1872" -> "1878" 
-  "1876" -> "1871" 
-  "1888" -> "1903" 
-  "1936" -> "1935" 
-  "1943" -> "1941" 
-  "1778" -> "1782" 
-  "1782" -> "1777" 
-  "1793" -> "1791" 
-  "1803" -> "1808" 
-  "1806" -> "1802" 
-  "1810" -> "1809" 
-  "1821" -> "1819" 
-  "1831" -> "1830" 
-  "1836" -> "1835" 
-  "1848" -> "1846" 
   "1850" -> "1849" 
-  "1863" -> "1861" 
-  "1873" -> "1872" 
-  "1877" -> "1885" 
-  "1882" -> "1876" 
-  "1889" -> "1895" 
-  "1892" -> "1888" 
-  "1898" -> "1909" 
-  "1898" -> "1938" 
-  "1938" -> "1936" 
-  "1779" -> "1778" 
-  "1805" -> "1803" 
-  "1808" -> "1806" 
-  "1811" -> "1815" 
-  "1815" -> "1810" 
-  "1833" -> "1831" 
-  "1838" -> "1836" 
+  "1857" -> "1856" 
+  "1836" -> "1834" 
+  "1842" -> "1840" 
+  "1845" -> "1843" 
   "1852" -> "1850" 
-  "1878" -> "1881" 
-  "1881" -> "1877" 
-  "1883" -> "1882" 
-  "1891" -> "1889" 
-  "1893" -> "1892" 
-  "1899" -> "1898" 
-  "1906" -> "1931" 
-  "1926" -> "1938" 
-  "1781" -> "1779" 
-  "1812" -> "1811" 
-  "1885" -> "1883" 
-  "1895" -> "1893" 
-  "1900" -> "1904" 
-  "1904" -> "1899" 
-  "1907" -> "1906" 
-  "1927" -> "1926" 
-  "1814" -> "1812" 
-  "1901" -> "1900" 
-  "1908" -> "1914" 
-  "1912" -> "1907" 
-  "1928" -> "1932" 
-  "1932" -> "1927" 
-  "1903" -> "1901" 
-  "1909" -> "1908" 
-  "1913" -> "1923" 
-  "1918" -> "1912" 
-  "1929" -> "1928" 
-  "1914" -> "1917" 
-  "1917" -> "1913" 
-  "1919" -> "1918" 
-  "1931" -> "1929" 
-  "1920" -> "1924" 
-  "1924" -> "1919" 
-  "1921" -> "1920" 
-  "1923" -> "1921" 
-  "1768" -> "1772" 
+  "1859" -> "1857" 
+  "1823" -> "1828" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/420-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/420-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/420-cfg.dot	2023-06-07 19:35:01.657387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/420-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "AllocObject" {  
-"18887" [label = <(METHOD,AllocObject)> ]
-"18891" [label = <(METHOD_RETURN,ANY)> ]
-  "18887" -> "18891" 
+digraph "GetL" {  
+"18554" [label = <(METHOD,GetL)> ]
+"18557" [label = <(METHOD_RETURN,ANY)> ]
+  "18554" -> "18557" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/421-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/421-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/421-cfg.dot	2023-06-07 19:35:01.657387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/421-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "va_start" {  
-"18892" [label = <(METHOD,va_start)> ]
-"18896" [label = <(METHOD_RETURN,ANY)> ]
-  "18892" -> "18896" 
+digraph "InvokeVirtualOrInterfaceWithJValues" {  
+"18558" [label = <(METHOD,InvokeVirtualOrInterfaceWithJValues)> ]
+"18564" [label = <(METHOD_RETURN,ANY)> ]
+  "18558" -> "18564" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/422-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/422-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/422-cfg.dot	2023-06-07 19:35:01.657387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/422-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "free_args_later" {  
-"18897" [label = <(METHOD,free_args_later)> ]
-"18900" [label = <(METHOD_RETURN,ANY)> ]
-  "18897" -> "18900" 
+digraph "CHECK_NON_NULL_ARGUMENT_RETURN_ZERO" {  
+"18565" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO)<SUB>449</SUB>> ]
+"18568" [label = <(METHOD_RETURN,ANY)> ]
+  "18565" -> "18568" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/423-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/423-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/423-cfg.dot	2023-06-07 19:35:01.657387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/423-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "NewObjectV" {  
-"18901" [label = <(METHOD,NewObjectV)> ]
-"18907" [label = <(METHOD_RETURN,ANY)> ]
-  "18901" -> "18907" 
+digraph "CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj)" {  
+"18569" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))> ]
+"18574" [label = <(METHOD_RETURN,ANY)> ]
+  "18569" -> "18574" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/424-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/424-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/424-cfg.dot	2023-06-07 19:35:01.657387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/424-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "WellKnownClasses::StringInitToStringFactory" {  
-"18908" [label = <(METHOD,WellKnownClasses::StringInitToStringFactory)> ]
-"18912" [label = <(METHOD_RETURN,ANY)> ]
-  "18908" -> "18912" 
+digraph "CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid)" {  
+"18575" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))> ]
+"18580" [label = <(METHOD_RETURN,ANY)> ]
+  "18575" -> "18580" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/425-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/425-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/425-cfg.dot	2023-06-07 19:35:01.657387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/425-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "CallStaticObjectMethodV" {  
-"18913" [label = <(METHOD,CallStaticObjectMethodV)> ]
-"18919" [label = <(METHOD_RETURN,ANY)> ]
-  "18913" -> "18919" 
+digraph "GetZ" {  
+"18581" [label = <(METHOD,GetZ)> ]
+"18584" [label = <(METHOD_RETURN,ANY)> ]
+  "18581" -> "18584" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/426-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/426-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/426-cfg.dot	2023-06-07 19:35:01.657387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/426-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "CallNonvirtualVoidMethodV" {  
-"18920" [label = <(METHOD,CallNonvirtualVoidMethodV)> ]
-"18927" [label = <(METHOD_RETURN,ANY)> ]
-  "18920" -> "18927" 
+digraph "GetB" {  
+"18585" [label = <(METHOD,GetB)> ]
+"18588" [label = <(METHOD_RETURN,ANY)> ]
+  "18585" -> "18588" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/427-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/427-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/427-cfg.dot	2023-06-07 19:35:01.657387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/427-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "CallStaticObjectMethodA" {  
-"18928" [label = <(METHOD,CallStaticObjectMethodA)> ]
-"18934" [label = <(METHOD_RETURN,ANY)> ]
-  "18928" -> "18934" 
+digraph "GetC" {  
+"18589" [label = <(METHOD,GetC)> ]
+"18592" [label = <(METHOD_RETURN,ANY)> ]
+  "18589" -> "18592" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/428-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/428-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/428-cfg.dot	2023-06-07 19:35:01.657387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/428-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "CallNonvirtualVoidMethodA" {  
-"18935" [label = <(METHOD,CallNonvirtualVoidMethodA)> ]
-"18942" [label = <(METHOD_RETURN,ANY)> ]
-  "18935" -> "18942" 
+digraph "GetD" {  
+"18593" [label = <(METHOD,GetD)> ]
+"18596" [label = <(METHOD_RETURN,ANY)> ]
+  "18593" -> "18596" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/429-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/429-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/429-cfg.dot	2023-06-07 19:35:01.657387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/429-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT(sig)" {  
-"18943" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(sig))> ]
-"18948" [label = <(METHOD_RETURN,ANY)> ]
-  "18943" -> "18948" 
+digraph "GetF" {  
+"18597" [label = <(METHOD,GetF)> ]
+"18600" [label = <(METHOD_RETURN,ANY)> ]
+  "18597" -> "18600" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/43-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/43-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/43-cfg.dot	2023-06-07 19:35:01.367387175 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/43-cfg.dot	2023-06-07 19:35:07.937386524 +0330
@@ -1,39 +1,11 @@
-digraph "ExceptionOccurred" {  
-"1950" [label = <(soa,soa(env))<SUB>722</SUB>> ]
-"1952" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; exception = soa.Self()-&gt;GetException())<SUB>723</SUB>> ]
-"1967" [label = <(RETURN,return soa.AddLocalReference&lt;jthrowable&gt;(exception);,return soa.AddLocalReference&lt;jthrowable&gt;(exception);)<SUB>724</SUB>> ]
-"1953" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; exception)<SUB>723</SUB>> ]
-"1960" [label = <(GetException,soa.Self()-&gt;GetException())<SUB>723</SUB>> ]
-"1968" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jthrowable&gt;(exception))<SUB>724</SUB>> ]
-"1954" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>723</SUB>> ]
-"1961" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;GetException)<SUB>723</SUB>> ]
-"1969" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jthrowable)<SUB>724</SUB>> ]
-"1956" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>723</SUB>> ]
-"1962" [label = <(Self,soa.Self())<SUB>723</SUB>> ]
-"1966" [label = <(FIELD_IDENTIFIER,GetException,GetException)<SUB>723</SUB>> ]
-"1970" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>724</SUB>> ]
-"1958" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>723</SUB>> ]
-"1963" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>723</SUB>> ]
-"1972" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>724</SUB>> ]
-"1965" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>723</SUB>> ]
-"1946" [label = <(METHOD,ExceptionOccurred)<SUB>721</SUB>> ]
-"1975" [label = <(METHOD_RETURN,jthrowable)<SUB>721</SUB>> ]
-  "1950" -> "1958" 
-  "1952" -> "1972" 
-  "1967" -> "1975" 
-  "1953" -> "1965" 
-  "1960" -> "1952" 
-  "1968" -> "1967" 
-  "1954" -> "1953" 
-  "1961" -> "1960" 
-  "1969" -> "1968" 
-  "1956" -> "1954" 
-  "1962" -> "1966" 
-  "1966" -> "1961" 
-  "1970" -> "1969" 
-  "1958" -> "1956" 
-  "1963" -> "1962" 
-  "1972" -> "1970" 
-  "1965" -> "1963" 
-  "1946" -> "1950" 
+digraph "EnsureLocalCapacity" {  
+"1869" [label = <(soa,soa(env))<SUB>672</SUB>> ]
+"1871" [label = <(RETURN,return EnsureLocalCapacityInternal(soa, desired_capacity, &quot;EnsureLocalCapacity&quot;);,return EnsureLocalCapacityInternal(soa, desired_capacity, &quot;EnsureLocalCapacity&quot;);)<SUB>673</SUB>> ]
+"1872" [label = <(EnsureLocalCapacityInternal,EnsureLocalCapacityInternal(soa, desired_capacity, &quot;EnsureLocalCapacity&quot;))<SUB>673</SUB>> ]
+"1864" [label = <(METHOD,EnsureLocalCapacity)<SUB>670</SUB>> ]
+"1876" [label = <(METHOD_RETURN,jint)<SUB>670</SUB>> ]
+  "1869" -> "1872" 
+  "1871" -> "1876" 
+  "1872" -> "1871" 
+  "1864" -> "1869" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/430-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/430-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/430-cfg.dot	2023-06-07 19:35:01.657387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/430-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT(obj)" {  
-"18949" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(obj))> ]
-"18954" [label = <(METHOD_RETURN,ANY)> ]
-  "18949" -> "18954" 
+digraph "GetI" {  
+"18601" [label = <(METHOD,GetI)> ]
+"18604" [label = <(METHOD_RETURN,ANY)> ]
+  "18601" -> "18604" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/431-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/431-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/431-cfg.dot	2023-06-07 19:35:01.657387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/431-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "result" {  
-"18955" [label = <(METHOD,result)> ]
-"18958" [label = <(METHOD_RETURN,ANY)> ]
-  "18955" -> "18958" 
+digraph "GetJ" {  
+"18605" [label = <(METHOD,GetJ)> ]
+"18608" [label = <(METHOD_RETURN,ANY)> ]
+  "18605" -> "18608" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/432-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/432-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/432-cfg.dot	2023-06-07 19:35:01.657387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/432-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "InvokeVirtualOrInterfaceWithVarArgs" {  
-"18959" [label = <(METHOD,InvokeVirtualOrInterfaceWithVarArgs)> ]
-"18965" [label = <(METHOD_RETURN,ANY)> ]
-  "18959" -> "18965" 
+digraph "GetS" {  
+"18609" [label = <(METHOD,GetS)> ]
+"18612" [label = <(METHOD_RETURN,ANY)> ]
+  "18609" -> "18612" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/433-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/433-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/433-cfg.dot	2023-06-07 19:35:01.657387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/433-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "GetL" {  
-"18966" [label = <(METHOD,GetL)> ]
-"18969" [label = <(METHOD_RETURN,ANY)> ]
-  "18966" -> "18969" 
+digraph "CHECK_NON_NULL_ARGUMENT_RETURN_VOID" {  
+"18613" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_VOID)<SUB>446</SUB>> ]
+"18616" [label = <(METHOD_RETURN,ANY)> ]
+  "18613" -> "18616" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/434-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/434-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/434-cfg.dot	2023-06-07 19:35:01.657387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/434-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "InvokeVirtualOrInterfaceWithJValues" {  
-"18970" [label = <(METHOD,InvokeVirtualOrInterfaceWithJValues)> ]
-"18976" [label = <(METHOD_RETURN,ANY)> ]
-  "18970" -> "18976" 
+digraph "CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj)" {  
+"18617" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))> ]
+"18622" [label = <(METHOD_RETURN,ANY)> ]
+  "18617" -> "18622" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/435-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/435-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/435-cfg.dot	2023-06-07 19:35:01.657387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/435-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_RETURN_ZERO" {  
-"18977" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO)<SUB>527</SUB>> ]
-"18980" [label = <(METHOD_RETURN,ANY)> ]
-  "18977" -> "18980" 
+digraph "CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid)" {  
+"18623" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))> ]
+"18628" [label = <(METHOD_RETURN,ANY)> ]
+  "18623" -> "18628" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/436-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/436-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/436-cfg.dot	2023-06-07 19:35:01.657387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/436-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj)" {  
-"18981" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))> ]
-"18986" [label = <(METHOD_RETURN,ANY)> ]
-  "18981" -> "18986" 
+digraph "InvokeWithVarArgs" {  
+"18629" [label = <(METHOD,InvokeWithVarArgs)> ]
+"18635" [label = <(METHOD_RETURN,ANY)> ]
+  "18629" -> "18635" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/437-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/437-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/437-cfg.dot	2023-06-07 19:35:01.657387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/437-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid)" {  
-"18987" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))> ]
-"18992" [label = <(METHOD_RETURN,ANY)> ]
-  "18987" -> "18992" 
+digraph "InvokeWithJValues" {  
+"18636" [label = <(METHOD,InvokeWithJValues)> ]
+"18642" [label = <(METHOD_RETURN,ANY)> ]
+  "18636" -> "18642" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/438-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/438-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/438-cfg.dot	2023-06-07 19:35:01.657387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/438-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "GetZ" {  
-"18993" [label = <(METHOD,GetZ)> ]
-"18996" [label = <(METHOD_RETURN,ANY)> ]
-  "18993" -> "18996" 
+digraph "GetObject" {  
+"18643" [label = <(METHOD,GetObject)> ]
+"18647" [label = <(METHOD_RETURN,ANY)> ]
+  "18643" -> "18647" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/439-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/439-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/439-cfg.dot	2023-06-07 19:35:01.657387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/439-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "GetB" {  
-"18997" [label = <(METHOD,GetB)> ]
-"19000" [label = <(METHOD_RETURN,ANY)> ]
-  "18997" -> "19000" 
+digraph "GetDeclaringClass" {  
+"18648" [label = <(METHOD,GetDeclaringClass)> ]
+"18651" [label = <(METHOD_RETURN,ANY)> ]
+  "18648" -> "18651" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/44-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/44-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/44-cfg.dot	2023-06-07 19:35:01.367387175 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/44-cfg.dot	2023-06-07 19:35:07.937386524 +0330
@@ -1,11 +1,49 @@
-digraph "FatalError" {  
-"1981" [label = <(&lt;operator&gt;.shiftLeft,LOG(FATAL) &lt;&lt; &quot;JNI FatalError called: &quot; &lt;&lt; msg)<SUB>728</SUB>> ]
-"1982" [label = <(&lt;operator&gt;.shiftLeft,LOG(FATAL) &lt;&lt; &quot;JNI FatalError called: &quot;)<SUB>728</SUB>> ]
-"1983" [label = <(LOG,LOG(FATAL))<SUB>728</SUB>> ]
-"1977" [label = <(METHOD,FatalError)<SUB>727</SUB>> ]
-"1987" [label = <(METHOD_RETURN,void)<SUB>727</SUB>> ]
-  "1981" -> "1987" 
-  "1982" -> "1981" 
-  "1983" -> "1982" 
-  "1977" -> "1983" 
+digraph "NewGlobalRef" {  
+"1883" [label = <(soa,soa(env))<SUB>677</SUB>> ]
+"1885" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; decoded_obj = soa.Decode&lt;mirror::Object&gt;(obj))<SUB>678</SUB>> ]
+"1902" [label = <(RETURN,return soa.Vm()-&gt;AddGlobalRef(soa.Self(), decoded_obj);,return soa.Vm()-&gt;AddGlobalRef(soa.Self(), decoded_obj);)<SUB>679</SUB>> ]
+"1886" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; decoded_obj)<SUB>678</SUB>> ]
+"1893" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(obj))<SUB>678</SUB>> ]
+"1903" [label = <(AddGlobalRef,soa.Vm()-&gt;AddGlobalRef(soa.Self(), decoded_obj))<SUB>679</SUB>> ]
+"1887" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>678</SUB>> ]
+"1894" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>678</SUB>> ]
+"1904" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Vm()-&gt;AddGlobalRef)<SUB>679</SUB>> ]
+"1910" [label = <(Self,soa.Self())<SUB>679</SUB>> ]
+"1889" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>678</SUB>> ]
+"1895" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>678</SUB>> ]
+"1898" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>678</SUB>> ]
+"1905" [label = <(Vm,soa.Vm())<SUB>679</SUB>> ]
+"1909" [label = <(FIELD_IDENTIFIER,AddGlobalRef,AddGlobalRef)<SUB>679</SUB>> ]
+"1911" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>679</SUB>> ]
+"1891" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>678</SUB>> ]
+"1897" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>678</SUB>> ]
+"1900" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>678</SUB>> ]
+"1906" [label = <(&lt;operator&gt;.fieldAccess,soa.Vm)<SUB>679</SUB>> ]
+"1913" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>679</SUB>> ]
+"1908" [label = <(FIELD_IDENTIFIER,Vm,Vm)<SUB>679</SUB>> ]
+"1878" [label = <(METHOD,NewGlobalRef)<SUB>676</SUB>> ]
+"1915" [label = <(METHOD_RETURN,jobject)<SUB>676</SUB>> ]
+  "1883" -> "1891" 
+  "1885" -> "1908" 
+  "1902" -> "1915" 
+  "1886" -> "1897" 
+  "1893" -> "1885" 
+  "1903" -> "1902" 
+  "1887" -> "1886" 
+  "1894" -> "1893" 
+  "1904" -> "1913" 
+  "1910" -> "1903" 
+  "1889" -> "1887" 
+  "1895" -> "1900" 
+  "1898" -> "1894" 
+  "1905" -> "1909" 
+  "1909" -> "1904" 
+  "1911" -> "1910" 
+  "1891" -> "1889" 
+  "1897" -> "1895" 
+  "1900" -> "1898" 
+  "1906" -> "1905" 
+  "1913" -> "1911" 
+  "1908" -> "1906" 
+  "1878" -> "1883" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/440-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/440-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/440-cfg.dot	2023-06-07 19:35:01.657387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/440-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "GetC" {  
-"19001" [label = <(METHOD,GetC)> ]
-"19004" [label = <(METHOD_RETURN,ANY)> ]
-  "19001" -> "19004" 
+digraph "CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_object)" {  
+"18652" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_object))> ]
+"18657" [label = <(METHOD_RETURN,ANY)> ]
+  "18652" -> "18657" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/441-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/441-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/441-cfg.dot	2023-06-07 19:35:01.657387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/441-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "GetD" {  
-"19005" [label = <(METHOD,GetD)> ]
-"19008" [label = <(METHOD_RETURN,ANY)> ]
-  "19005" -> "19008" 
+digraph "CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid)" {  
+"18658" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid))> ]
+"18663" [label = <(METHOD_RETURN,ANY)> ]
+  "18658" -> "18663" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/442-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/442-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/442-cfg.dot	2023-06-07 19:35:01.657387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/442-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "GetF" {  
-"19009" [label = <(METHOD,GetF)> ]
-"19012" [label = <(METHOD_RETURN,ANY)> ]
-  "19009" -> "19012" 
+digraph "NotifySetObjectField" {  
+"18664" [label = <(METHOD,NotifySetObjectField)> ]
+"18669" [label = <(METHOD_RETURN,ANY)> ]
+  "18664" -> "18669" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/443-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/443-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/443-cfg.dot	2023-06-07 19:35:01.657387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/443-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "GetI" {  
-"19013" [label = <(METHOD,GetI)> ]
-"19016" [label = <(METHOD_RETURN,ANY)> ]
-  "19013" -> "19016" 
+digraph "GET_PRIMITIVE_FIELD" {  
+"18670" [label = <(METHOD,GET_PRIMITIVE_FIELD)<SUB>1415</SUB>> ]
+"18673" [label = <(METHOD_RETURN,ANY)> ]
+  "18670" -> "18673" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/444-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/444-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/444-cfg.dot	2023-06-07 19:35:01.657387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/444-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "GetJ" {  
-"19017" [label = <(METHOD,GetJ)> ]
-"19020" [label = <(METHOD_RETURN,ANY)> ]
-  "19017" -> "19020" 
+digraph "GET_PRIMITIVE_FIELD(Boolean, obj)" {  
+"18674" [label = <(METHOD,GET_PRIMITIVE_FIELD(Boolean, obj))> ]
+"18678" [label = <(METHOD_RETURN,ANY)> ]
+  "18674" -> "18678" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/445-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/445-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/445-cfg.dot	2023-06-07 19:35:01.657387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/445-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "GetS" {  
-"19021" [label = <(METHOD,GetS)> ]
-"19024" [label = <(METHOD_RETURN,ANY)> ]
-  "19021" -> "19024" 
+digraph "GET_PRIMITIVE_FIELD(Byte, obj)" {  
+"18679" [label = <(METHOD,GET_PRIMITIVE_FIELD(Byte, obj))> ]
+"18683" [label = <(METHOD_RETURN,ANY)> ]
+  "18679" -> "18683" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/446-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/446-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/446-cfg.dot	2023-06-07 19:35:01.657387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/446-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_RETURN_VOID" {  
-"19025" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_VOID)<SUB>524</SUB>> ]
-"19028" [label = <(METHOD_RETURN,ANY)> ]
-  "19025" -> "19028" 
+digraph "GET_PRIMITIVE_FIELD(Char, obj)" {  
+"18684" [label = <(METHOD,GET_PRIMITIVE_FIELD(Char, obj))> ]
+"18688" [label = <(METHOD_RETURN,ANY)> ]
+  "18684" -> "18688" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/447-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/447-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/447-cfg.dot	2023-06-07 19:35:01.657387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/447-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj)" {  
-"19029" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))> ]
-"19034" [label = <(METHOD_RETURN,ANY)> ]
-  "19029" -> "19034" 
+digraph "GET_PRIMITIVE_FIELD(Short, obj)" {  
+"18689" [label = <(METHOD,GET_PRIMITIVE_FIELD(Short, obj))> ]
+"18693" [label = <(METHOD_RETURN,ANY)> ]
+  "18689" -> "18693" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/448-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/448-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/448-cfg.dot	2023-06-07 19:35:01.657387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/448-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid)" {  
-"19035" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))> ]
-"19040" [label = <(METHOD_RETURN,ANY)> ]
-  "19035" -> "19040" 
+digraph "GET_PRIMITIVE_FIELD(Int, obj)" {  
+"18694" [label = <(METHOD,GET_PRIMITIVE_FIELD(Int, obj))> ]
+"18698" [label = <(METHOD_RETURN,ANY)> ]
+  "18694" -> "18698" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/449-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/449-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/449-cfg.dot	2023-06-07 19:35:01.657387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/449-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "InvokeWithVarArgs" {  
-"19041" [label = <(METHOD,InvokeWithVarArgs)> ]
-"19047" [label = <(METHOD_RETURN,ANY)> ]
-  "19041" -> "19047" 
+digraph "GET_PRIMITIVE_FIELD(Long, obj)" {  
+"18699" [label = <(METHOD,GET_PRIMITIVE_FIELD(Long, obj))> ]
+"18703" [label = <(METHOD_RETURN,ANY)> ]
+  "18699" -> "18703" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/45-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/45-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/45-cfg.dot	2023-06-07 19:35:01.377387172 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/45-cfg.dot	2023-06-07 19:35:07.937386524 +0330
@@ -1,24 +1,29 @@
-digraph "PushLocalFrame" {  
-"1994" [label = <(soa,soa(env))<SUB>733</SUB>> ]
-"2006" [label = <(PushFrame,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;PushFrame(capacity))<SUB>737</SUB>> ]
-"2012" [label = <(RETURN,return JNI_OK;,return JNI_OK;)<SUB>738</SUB>> ]
-"1997" [label = <(&lt;operator&gt;.notEquals,EnsureLocalCapacityInternal(soa, capacity, &quot;PushLocalFrame&quot;) != JNI_OK)<SUB>734</SUB>> ]
-"2007" [label = <(&lt;operator&gt;.indirectFieldAccess,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;PushFrame)<SUB>737</SUB>> ]
-"1998" [label = <(EnsureLocalCapacityInternal,EnsureLocalCapacityInternal(soa, capacity, &quot;PushLocalFrame&quot;))<SUB>734</SUB>> ]
-"2004" [label = <(RETURN,return JNI_ERR;,return JNI_ERR;)<SUB>735</SUB>> ]
-"2008" [label = <(down_cast&lt;JNIEnvExt*&gt;,down_cast&lt;JNIEnvExt*&gt;(env))<SUB>737</SUB>> ]
-"2010" [label = <(FIELD_IDENTIFIER,PushFrame,PushFrame)<SUB>737</SUB>> ]
-"1989" [label = <(METHOD,PushLocalFrame)<SUB>731</SUB>> ]
-"2014" [label = <(METHOD_RETURN,jint)<SUB>731</SUB>> ]
-  "1994" -> "1998" 
-  "2006" -> "2012" 
-  "2012" -> "2014" 
-  "1997" -> "2004" 
-  "1997" -> "2008" 
-  "2007" -> "2006" 
-  "1998" -> "1997" 
-  "2004" -> "2014" 
-  "2008" -> "2010" 
-  "2010" -> "2007" 
-  "1989" -> "1994" 
+digraph "DeleteGlobalRef" {  
+"1922" [label = <(&lt;operator&gt;.assignment,* vm = down_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm())<SUB>683</SUB>> ]
+"1930" [label = <(&lt;operator&gt;.assignment,* self = down_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_)<SUB>684</SUB>> ]
+"1936" [label = <(DeleteGlobalRef,vm-&gt;DeleteGlobalRef(self, obj))<SUB>685</SUB>> ]
+"1924" [label = <(GetVm,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm())<SUB>683</SUB>> ]
+"1932" [label = <(&lt;operator&gt;.indirectFieldAccess,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_)<SUB>684</SUB>> ]
+"1937" [label = <(&lt;operator&gt;.indirectFieldAccess,vm-&gt;DeleteGlobalRef)<SUB>685</SUB>> ]
+"1925" [label = <(&lt;operator&gt;.indirectFieldAccess,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm)<SUB>683</SUB>> ]
+"1933" [label = <(down_cast&lt;JNIEnvExt*&gt;,down_cast&lt;JNIEnvExt*&gt;(env))<SUB>684</SUB>> ]
+"1935" [label = <(FIELD_IDENTIFIER,self_,self_)<SUB>684</SUB>> ]
+"1939" [label = <(FIELD_IDENTIFIER,DeleteGlobalRef,DeleteGlobalRef)<SUB>685</SUB>> ]
+"1926" [label = <(down_cast&lt;JNIEnvExt*&gt;,down_cast&lt;JNIEnvExt*&gt;(env))<SUB>683</SUB>> ]
+"1928" [label = <(FIELD_IDENTIFIER,GetVm,GetVm)<SUB>683</SUB>> ]
+"1917" [label = <(METHOD,DeleteGlobalRef)<SUB>682</SUB>> ]
+"1942" [label = <(METHOD_RETURN,void)<SUB>682</SUB>> ]
+  "1922" -> "1933" 
+  "1930" -> "1939" 
+  "1936" -> "1942" 
+  "1924" -> "1922" 
+  "1932" -> "1930" 
+  "1937" -> "1936" 
+  "1925" -> "1924" 
+  "1933" -> "1935" 
+  "1935" -> "1932" 
+  "1939" -> "1937" 
+  "1926" -> "1928" 
+  "1928" -> "1925" 
+  "1917" -> "1926" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/450-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/450-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/450-cfg.dot	2023-06-07 19:35:01.657387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/450-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "InvokeWithJValues" {  
-"19048" [label = <(METHOD,InvokeWithJValues)> ]
-"19054" [label = <(METHOD_RETURN,ANY)> ]
-  "19048" -> "19054" 
+digraph "GET_PRIMITIVE_FIELD(Float, obj)" {  
+"18704" [label = <(METHOD,GET_PRIMITIVE_FIELD(Float, obj))> ]
+"18708" [label = <(METHOD_RETURN,ANY)> ]
+  "18704" -> "18708" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/451-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/451-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/451-cfg.dot	2023-06-07 19:35:01.657387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/451-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "GetObject" {  
-"19055" [label = <(METHOD,GetObject)> ]
-"19059" [label = <(METHOD_RETURN,ANY)> ]
-  "19055" -> "19059" 
+digraph "GET_PRIMITIVE_FIELD(Double, obj)" {  
+"18709" [label = <(METHOD,GET_PRIMITIVE_FIELD(Double, obj))> ]
+"18713" [label = <(METHOD_RETURN,ANY)> ]
+  "18709" -> "18713" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/452-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/452-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/452-cfg.dot	2023-06-07 19:35:01.657387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/452-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "GetDeclaringClass" {  
-"19060" [label = <(METHOD,GetDeclaringClass)> ]
-"19063" [label = <(METHOD_RETURN,ANY)> ]
-  "19060" -> "19063" 
+digraph "GET_STATIC_PRIMITIVE_FIELD" {  
+"18714" [label = <(METHOD,GET_STATIC_PRIMITIVE_FIELD)<SUB>1424</SUB>> ]
+"18716" [label = <(METHOD_RETURN,ANY)> ]
+  "18714" -> "18716" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/453-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/453-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/453-cfg.dot	2023-06-07 19:35:01.657387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/453-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_object)" {  
-"19064" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_object))> ]
-"19069" [label = <(METHOD_RETURN,ANY)> ]
-  "19064" -> "19069" 
+digraph "GET_STATIC_PRIMITIVE_FIELD(Boolean)" {  
+"18717" [label = <(METHOD,GET_STATIC_PRIMITIVE_FIELD(Boolean))> ]
+"18720" [label = <(METHOD_RETURN,ANY)> ]
+  "18717" -> "18720" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/454-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/454-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/454-cfg.dot	2023-06-07 19:35:01.657387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/454-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid)" {  
-"19070" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid))> ]
-"19075" [label = <(METHOD_RETURN,ANY)> ]
-  "19070" -> "19075" 
+digraph "GET_STATIC_PRIMITIVE_FIELD(Byte)" {  
+"18721" [label = <(METHOD,GET_STATIC_PRIMITIVE_FIELD(Byte))> ]
+"18724" [label = <(METHOD_RETURN,ANY)> ]
+  "18721" -> "18724" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/455-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/455-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/455-cfg.dot	2023-06-07 19:35:01.657387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/455-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "NotifySetObjectField" {  
-"19076" [label = <(METHOD,NotifySetObjectField)> ]
-"19081" [label = <(METHOD_RETURN,ANY)> ]
-  "19076" -> "19081" 
+digraph "GET_STATIC_PRIMITIVE_FIELD(Char)" {  
+"18725" [label = <(METHOD,GET_STATIC_PRIMITIVE_FIELD(Char))> ]
+"18728" [label = <(METHOD_RETURN,ANY)> ]
+  "18725" -> "18728" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/456-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/456-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/456-cfg.dot	2023-06-07 19:35:01.657387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/456-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "GET_PRIMITIVE_FIELD" {  
-"19082" [label = <(METHOD,GET_PRIMITIVE_FIELD)<SUB>1493</SUB>> ]
-"19085" [label = <(METHOD_RETURN,ANY)> ]
-  "19082" -> "19085" 
+digraph "GET_STATIC_PRIMITIVE_FIELD(Short)" {  
+"18729" [label = <(METHOD,GET_STATIC_PRIMITIVE_FIELD(Short))> ]
+"18732" [label = <(METHOD_RETURN,ANY)> ]
+  "18729" -> "18732" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/457-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/457-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/457-cfg.dot	2023-06-07 19:35:01.657387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/457-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "GET_PRIMITIVE_FIELD(Boolean, obj)" {  
-"19086" [label = <(METHOD,GET_PRIMITIVE_FIELD(Boolean, obj))> ]
-"19090" [label = <(METHOD_RETURN,ANY)> ]
-  "19086" -> "19090" 
+digraph "GET_STATIC_PRIMITIVE_FIELD(Int)" {  
+"18733" [label = <(METHOD,GET_STATIC_PRIMITIVE_FIELD(Int))> ]
+"18736" [label = <(METHOD_RETURN,ANY)> ]
+  "18733" -> "18736" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/458-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/458-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/458-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/458-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "GET_PRIMITIVE_FIELD(Byte, obj)" {  
-"19091" [label = <(METHOD,GET_PRIMITIVE_FIELD(Byte, obj))> ]
-"19095" [label = <(METHOD_RETURN,ANY)> ]
-  "19091" -> "19095" 
+digraph "GET_STATIC_PRIMITIVE_FIELD(Long)" {  
+"18737" [label = <(METHOD,GET_STATIC_PRIMITIVE_FIELD(Long))> ]
+"18740" [label = <(METHOD_RETURN,ANY)> ]
+  "18737" -> "18740" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/459-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/459-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/459-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/459-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "GET_PRIMITIVE_FIELD(Char, obj)" {  
-"19096" [label = <(METHOD,GET_PRIMITIVE_FIELD(Char, obj))> ]
-"19100" [label = <(METHOD_RETURN,ANY)> ]
-  "19096" -> "19100" 
+digraph "GET_STATIC_PRIMITIVE_FIELD(Float)" {  
+"18741" [label = <(METHOD,GET_STATIC_PRIMITIVE_FIELD(Float))> ]
+"18744" [label = <(METHOD_RETURN,ANY)> ]
+  "18741" -> "18744" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/46-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/46-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/46-cfg.dot	2023-06-07 19:35:01.377387172 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/46-cfg.dot	2023-06-07 19:35:07.937386524 +0330
@@ -1,51 +1,49 @@
-digraph "PopLocalFrame" {  
-"2021" [label = <(soa,soa(env))<SUB>742</SUB>> ]
-"2023" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; survivor = soa.Decode&lt;mirror::Object&gt;(java_survivor))<SUB>743</SUB>> ]
-"2040" [label = <(PopFrame,soa.Env()-&gt;PopFrame())<SUB>744</SUB>> ]
-"2047" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(survivor);,return soa.AddLocalReference&lt;jobject&gt;(survivor);)<SUB>745</SUB>> ]
-"2024" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; survivor)<SUB>743</SUB>> ]
-"2031" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(java_survivor))<SUB>743</SUB>> ]
-"2041" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Env()-&gt;PopFrame)<SUB>744</SUB>> ]
-"2048" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(survivor))<SUB>745</SUB>> ]
-"2025" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>743</SUB>> ]
-"2032" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>743</SUB>> ]
-"2042" [label = <(Env,soa.Env())<SUB>744</SUB>> ]
-"2046" [label = <(FIELD_IDENTIFIER,PopFrame,PopFrame)<SUB>744</SUB>> ]
-"2049" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>745</SUB>> ]
-"2027" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>743</SUB>> ]
-"2033" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>743</SUB>> ]
-"2036" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>743</SUB>> ]
-"2043" [label = <(&lt;operator&gt;.fieldAccess,soa.Env)<SUB>744</SUB>> ]
-"2050" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>745</SUB>> ]
-"2029" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>743</SUB>> ]
-"2035" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>743</SUB>> ]
-"2038" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>743</SUB>> ]
-"2045" [label = <(FIELD_IDENTIFIER,Env,Env)<SUB>744</SUB>> ]
-"2052" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>745</SUB>> ]
-"2016" [label = <(METHOD,PopLocalFrame)<SUB>741</SUB>> ]
-"2055" [label = <(METHOD_RETURN,jobject)<SUB>741</SUB>> ]
-  "2021" -> "2029" 
-  "2023" -> "2045" 
-  "2040" -> "2052" 
-  "2047" -> "2055" 
-  "2024" -> "2035" 
-  "2031" -> "2023" 
-  "2041" -> "2040" 
-  "2048" -> "2047" 
-  "2025" -> "2024" 
-  "2032" -> "2031" 
-  "2042" -> "2046" 
-  "2046" -> "2041" 
-  "2049" -> "2048" 
-  "2027" -> "2025" 
-  "2033" -> "2038" 
-  "2036" -> "2032" 
-  "2043" -> "2042" 
-  "2050" -> "2049" 
-  "2029" -> "2027" 
-  "2035" -> "2033" 
-  "2038" -> "2036" 
-  "2045" -> "2043" 
-  "2052" -> "2050" 
-  "2016" -> "2021" 
+digraph "NewWeakGlobalRef" {  
+"1949" [label = <(soa,soa(env))<SUB>689</SUB>> ]
+"1951" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; decoded_obj = soa.Decode&lt;mirror::Object&gt;(obj))<SUB>690</SUB>> ]
+"1968" [label = <(RETURN,return soa.Vm()-&gt;AddWeakGlobalRef(soa.Self(), decoded_obj);,return soa.Vm()-&gt;AddWeakGlobalRef(soa.Self(), decoded_obj);)<SUB>691</SUB>> ]
+"1952" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; decoded_obj)<SUB>690</SUB>> ]
+"1959" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(obj))<SUB>690</SUB>> ]
+"1969" [label = <(AddWeakGlobalRef,soa.Vm()-&gt;AddWeakGlobalRef(soa.Self(), decoded_obj))<SUB>691</SUB>> ]
+"1953" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>690</SUB>> ]
+"1960" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>690</SUB>> ]
+"1970" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Vm()-&gt;AddWeakGlobalRef)<SUB>691</SUB>> ]
+"1976" [label = <(Self,soa.Self())<SUB>691</SUB>> ]
+"1955" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>690</SUB>> ]
+"1961" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>690</SUB>> ]
+"1964" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>690</SUB>> ]
+"1971" [label = <(Vm,soa.Vm())<SUB>691</SUB>> ]
+"1975" [label = <(FIELD_IDENTIFIER,AddWeakGlobalRef,AddWeakGlobalRef)<SUB>691</SUB>> ]
+"1977" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>691</SUB>> ]
+"1957" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>690</SUB>> ]
+"1963" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>690</SUB>> ]
+"1966" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>690</SUB>> ]
+"1972" [label = <(&lt;operator&gt;.fieldAccess,soa.Vm)<SUB>691</SUB>> ]
+"1979" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>691</SUB>> ]
+"1974" [label = <(FIELD_IDENTIFIER,Vm,Vm)<SUB>691</SUB>> ]
+"1944" [label = <(METHOD,NewWeakGlobalRef)<SUB>688</SUB>> ]
+"1981" [label = <(METHOD_RETURN,jweak)<SUB>688</SUB>> ]
+  "1949" -> "1957" 
+  "1951" -> "1974" 
+  "1968" -> "1981" 
+  "1952" -> "1963" 
+  "1959" -> "1951" 
+  "1969" -> "1968" 
+  "1953" -> "1952" 
+  "1960" -> "1959" 
+  "1970" -> "1979" 
+  "1976" -> "1969" 
+  "1955" -> "1953" 
+  "1961" -> "1966" 
+  "1964" -> "1960" 
+  "1971" -> "1975" 
+  "1975" -> "1970" 
+  "1977" -> "1976" 
+  "1957" -> "1955" 
+  "1963" -> "1961" 
+  "1966" -> "1964" 
+  "1972" -> "1971" 
+  "1979" -> "1977" 
+  "1974" -> "1972" 
+  "1944" -> "1949" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/460-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/460-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/460-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/460-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "GET_PRIMITIVE_FIELD(Short, obj)" {  
-"19101" [label = <(METHOD,GET_PRIMITIVE_FIELD(Short, obj))> ]
-"19105" [label = <(METHOD_RETURN,ANY)> ]
-  "19101" -> "19105" 
+digraph "GET_STATIC_PRIMITIVE_FIELD(Double)" {  
+"18745" [label = <(METHOD,GET_STATIC_PRIMITIVE_FIELD(Double))> ]
+"18748" [label = <(METHOD_RETURN,ANY)> ]
+  "18745" -> "18748" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/461-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/461-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/461-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/461-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "GET_PRIMITIVE_FIELD(Int, obj)" {  
-"19106" [label = <(METHOD,GET_PRIMITIVE_FIELD(Int, obj))> ]
-"19110" [label = <(METHOD_RETURN,ANY)> ]
-  "19106" -> "19110" 
+digraph "SET_PRIMITIVE_FIELD" {  
+"18749" [label = <(METHOD,SET_PRIMITIVE_FIELD)<SUB>1431</SUB>> ]
+"18752" [label = <(METHOD_RETURN,ANY)> ]
+  "18749" -> "18752" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/462-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/462-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/462-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/462-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "GET_PRIMITIVE_FIELD(Long, obj)" {  
-"19111" [label = <(METHOD,GET_PRIMITIVE_FIELD(Long, obj))> ]
-"19115" [label = <(METHOD_RETURN,ANY)> ]
-  "19111" -> "19115" 
+digraph "SET_PRIMITIVE_FIELD(Boolean, obj, v)" {  
+"18753" [label = <(METHOD,SET_PRIMITIVE_FIELD(Boolean, obj, v))> ]
+"18757" [label = <(METHOD_RETURN,ANY)> ]
+  "18753" -> "18757" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/463-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/463-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/463-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/463-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "GET_PRIMITIVE_FIELD(Float, obj)" {  
-"19116" [label = <(METHOD,GET_PRIMITIVE_FIELD(Float, obj))> ]
-"19120" [label = <(METHOD_RETURN,ANY)> ]
-  "19116" -> "19120" 
+digraph "SET_PRIMITIVE_FIELD(Byte, obj, v)" {  
+"18758" [label = <(METHOD,SET_PRIMITIVE_FIELD(Byte, obj, v))> ]
+"18762" [label = <(METHOD_RETURN,ANY)> ]
+  "18758" -> "18762" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/464-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/464-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/464-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/464-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "GET_PRIMITIVE_FIELD(Double, obj)" {  
-"19121" [label = <(METHOD,GET_PRIMITIVE_FIELD(Double, obj))> ]
-"19125" [label = <(METHOD_RETURN,ANY)> ]
-  "19121" -> "19125" 
+digraph "SET_PRIMITIVE_FIELD(Char, obj, v)" {  
+"18763" [label = <(METHOD,SET_PRIMITIVE_FIELD(Char, obj, v))> ]
+"18767" [label = <(METHOD_RETURN,ANY)> ]
+  "18763" -> "18767" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/465-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/465-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/465-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/465-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "GET_STATIC_PRIMITIVE_FIELD" {  
-"19126" [label = <(METHOD,GET_STATIC_PRIMITIVE_FIELD)<SUB>1502</SUB>> ]
-"19128" [label = <(METHOD_RETURN,ANY)> ]
-  "19126" -> "19128" 
+digraph "SET_PRIMITIVE_FIELD(Float, obj, v)" {  
+"18768" [label = <(METHOD,SET_PRIMITIVE_FIELD(Float, obj, v))> ]
+"18772" [label = <(METHOD_RETURN,ANY)> ]
+  "18768" -> "18772" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/466-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/466-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/466-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/466-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "GET_STATIC_PRIMITIVE_FIELD(Boolean)" {  
-"19129" [label = <(METHOD,GET_STATIC_PRIMITIVE_FIELD(Boolean))> ]
-"19132" [label = <(METHOD_RETURN,ANY)> ]
-  "19129" -> "19132" 
+digraph "SET_PRIMITIVE_FIELD(Double, obj, v)" {  
+"18773" [label = <(METHOD,SET_PRIMITIVE_FIELD(Double, obj, v))> ]
+"18777" [label = <(METHOD_RETURN,ANY)> ]
+  "18773" -> "18777" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/467-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/467-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/467-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/467-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "GET_STATIC_PRIMITIVE_FIELD(Byte)" {  
-"19133" [label = <(METHOD,GET_STATIC_PRIMITIVE_FIELD(Byte))> ]
-"19136" [label = <(METHOD_RETURN,ANY)> ]
-  "19133" -> "19136" 
+digraph "SET_PRIMITIVE_FIELD(Int, obj, v)" {  
+"18778" [label = <(METHOD,SET_PRIMITIVE_FIELD(Int, obj, v))> ]
+"18782" [label = <(METHOD_RETURN,ANY)> ]
+  "18778" -> "18782" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/468-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/468-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/468-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/468-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "GET_STATIC_PRIMITIVE_FIELD(Char)" {  
-"19137" [label = <(METHOD,GET_STATIC_PRIMITIVE_FIELD(Char))> ]
-"19140" [label = <(METHOD_RETURN,ANY)> ]
-  "19137" -> "19140" 
+digraph "SET_PRIMITIVE_FIELD(Long, obj, v)" {  
+"18783" [label = <(METHOD,SET_PRIMITIVE_FIELD(Long, obj, v))> ]
+"18787" [label = <(METHOD_RETURN,ANY)> ]
+  "18783" -> "18787" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/469-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/469-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/469-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/469-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "GET_STATIC_PRIMITIVE_FIELD(Short)" {  
-"19141" [label = <(METHOD,GET_STATIC_PRIMITIVE_FIELD(Short))> ]
-"19144" [label = <(METHOD_RETURN,ANY)> ]
-  "19141" -> "19144" 
+digraph "SET_PRIMITIVE_FIELD(Short, obj, v)" {  
+"18788" [label = <(METHOD,SET_PRIMITIVE_FIELD(Short, obj, v))> ]
+"18792" [label = <(METHOD_RETURN,ANY)> ]
+  "18788" -> "18792" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/47-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/47-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/47-cfg.dot	2023-06-07 19:35:01.377387172 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/47-cfg.dot	2023-06-07 19:35:07.937386524 +0330
@@ -1,11 +1,29 @@
-digraph "EnsureLocalCapacity" {  
-"2062" [label = <(soa,soa(env))<SUB>750</SUB>> ]
-"2064" [label = <(RETURN,return EnsureLocalCapacityInternal(soa, desired_capacity, &quot;EnsureLocalCapacity&quot;);,return EnsureLocalCapacityInternal(soa, desired_capacity, &quot;EnsureLocalCapacity&quot;);)<SUB>751</SUB>> ]
-"2065" [label = <(EnsureLocalCapacityInternal,EnsureLocalCapacityInternal(soa, desired_capacity, &quot;EnsureLocalCapacity&quot;))<SUB>751</SUB>> ]
-"2057" [label = <(METHOD,EnsureLocalCapacity)<SUB>748</SUB>> ]
-"2069" [label = <(METHOD_RETURN,jint)<SUB>748</SUB>> ]
-  "2062" -> "2065" 
-  "2064" -> "2069" 
-  "2065" -> "2064" 
-  "2057" -> "2062" 
+digraph "DeleteWeakGlobalRef" {  
+"1988" [label = <(&lt;operator&gt;.assignment,* vm = down_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm())<SUB>695</SUB>> ]
+"1996" [label = <(&lt;operator&gt;.assignment,* self = down_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_)<SUB>696</SUB>> ]
+"2002" [label = <(DeleteWeakGlobalRef,vm-&gt;DeleteWeakGlobalRef(self, obj))<SUB>697</SUB>> ]
+"1990" [label = <(GetVm,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm())<SUB>695</SUB>> ]
+"1998" [label = <(&lt;operator&gt;.indirectFieldAccess,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_)<SUB>696</SUB>> ]
+"2003" [label = <(&lt;operator&gt;.indirectFieldAccess,vm-&gt;DeleteWeakGlobalRef)<SUB>697</SUB>> ]
+"1991" [label = <(&lt;operator&gt;.indirectFieldAccess,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm)<SUB>695</SUB>> ]
+"1999" [label = <(down_cast&lt;JNIEnvExt*&gt;,down_cast&lt;JNIEnvExt*&gt;(env))<SUB>696</SUB>> ]
+"2001" [label = <(FIELD_IDENTIFIER,self_,self_)<SUB>696</SUB>> ]
+"2005" [label = <(FIELD_IDENTIFIER,DeleteWeakGlobalRef,DeleteWeakGlobalRef)<SUB>697</SUB>> ]
+"1992" [label = <(down_cast&lt;JNIEnvExt*&gt;,down_cast&lt;JNIEnvExt*&gt;(env))<SUB>695</SUB>> ]
+"1994" [label = <(FIELD_IDENTIFIER,GetVm,GetVm)<SUB>695</SUB>> ]
+"1983" [label = <(METHOD,DeleteWeakGlobalRef)<SUB>694</SUB>> ]
+"2008" [label = <(METHOD_RETURN,void)<SUB>694</SUB>> ]
+  "1988" -> "1999" 
+  "1996" -> "2005" 
+  "2002" -> "2008" 
+  "1990" -> "1988" 
+  "1998" -> "1996" 
+  "2003" -> "2002" 
+  "1991" -> "1990" 
+  "1999" -> "2001" 
+  "2001" -> "1998" 
+  "2005" -> "2003" 
+  "1992" -> "1994" 
+  "1994" -> "1991" 
+  "1983" -> "1992" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/470-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/470-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/470-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/470-cfg.dot	2023-06-07 19:35:08.187386499 +0330
@@ -1,5 +1,5 @@
-digraph "GET_STATIC_PRIMITIVE_FIELD(Int)" {  
-"19145" [label = <(METHOD,GET_STATIC_PRIMITIVE_FIELD(Int))> ]
-"19148" [label = <(METHOD_RETURN,ANY)> ]
-  "19145" -> "19148" 
+digraph "SET_STATIC_PRIMITIVE_FIELD" {  
+"18793" [label = <(METHOD,SET_STATIC_PRIMITIVE_FIELD)<SUB>1440</SUB>> ]
+"18795" [label = <(METHOD_RETURN,ANY)> ]
+  "18793" -> "18795" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/471-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/471-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/471-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/471-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "GET_STATIC_PRIMITIVE_FIELD(Long)" {  
-"19149" [label = <(METHOD,GET_STATIC_PRIMITIVE_FIELD(Long))> ]
-"19152" [label = <(METHOD_RETURN,ANY)> ]
-  "19149" -> "19152" 
+digraph "SET_STATIC_PRIMITIVE_FIELD(Boolean, v)" {  
+"18796" [label = <(METHOD,SET_STATIC_PRIMITIVE_FIELD(Boolean, v))> ]
+"18799" [label = <(METHOD_RETURN,ANY)> ]
+  "18796" -> "18799" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/472-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/472-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/472-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/472-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "GET_STATIC_PRIMITIVE_FIELD(Float)" {  
-"19153" [label = <(METHOD,GET_STATIC_PRIMITIVE_FIELD(Float))> ]
-"19156" [label = <(METHOD_RETURN,ANY)> ]
-  "19153" -> "19156" 
+digraph "SET_STATIC_PRIMITIVE_FIELD(Byte, v)" {  
+"18800" [label = <(METHOD,SET_STATIC_PRIMITIVE_FIELD(Byte, v))> ]
+"18803" [label = <(METHOD_RETURN,ANY)> ]
+  "18800" -> "18803" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/473-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/473-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/473-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/473-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "GET_STATIC_PRIMITIVE_FIELD(Double)" {  
-"19157" [label = <(METHOD,GET_STATIC_PRIMITIVE_FIELD(Double))> ]
-"19160" [label = <(METHOD_RETURN,ANY)> ]
-  "19157" -> "19160" 
+digraph "SET_STATIC_PRIMITIVE_FIELD(Char, v)" {  
+"18804" [label = <(METHOD,SET_STATIC_PRIMITIVE_FIELD(Char, v))> ]
+"18807" [label = <(METHOD_RETURN,ANY)> ]
+  "18804" -> "18807" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/474-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/474-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/474-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/474-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "SET_PRIMITIVE_FIELD" {  
-"19161" [label = <(METHOD,SET_PRIMITIVE_FIELD)<SUB>1509</SUB>> ]
-"19164" [label = <(METHOD_RETURN,ANY)> ]
-  "19161" -> "19164" 
+digraph "SET_STATIC_PRIMITIVE_FIELD(Float, v)" {  
+"18808" [label = <(METHOD,SET_STATIC_PRIMITIVE_FIELD(Float, v))> ]
+"18811" [label = <(METHOD_RETURN,ANY)> ]
+  "18808" -> "18811" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/475-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/475-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/475-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/475-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "SET_PRIMITIVE_FIELD(Boolean, obj, v)" {  
-"19165" [label = <(METHOD,SET_PRIMITIVE_FIELD(Boolean, obj, v))> ]
-"19169" [label = <(METHOD_RETURN,ANY)> ]
-  "19165" -> "19169" 
+digraph "SET_STATIC_PRIMITIVE_FIELD(Double, v)" {  
+"18812" [label = <(METHOD,SET_STATIC_PRIMITIVE_FIELD(Double, v))> ]
+"18815" [label = <(METHOD_RETURN,ANY)> ]
+  "18812" -> "18815" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/476-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/476-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/476-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/476-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "SET_PRIMITIVE_FIELD(Byte, obj, v)" {  
-"19170" [label = <(METHOD,SET_PRIMITIVE_FIELD(Byte, obj, v))> ]
-"19174" [label = <(METHOD_RETURN,ANY)> ]
-  "19170" -> "19174" 
+digraph "SET_STATIC_PRIMITIVE_FIELD(Int, v)" {  
+"18816" [label = <(METHOD,SET_STATIC_PRIMITIVE_FIELD(Int, v))> ]
+"18819" [label = <(METHOD_RETURN,ANY)> ]
+  "18816" -> "18819" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/477-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/477-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/477-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/477-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "SET_PRIMITIVE_FIELD(Char, obj, v)" {  
-"19175" [label = <(METHOD,SET_PRIMITIVE_FIELD(Char, obj, v))> ]
-"19179" [label = <(METHOD_RETURN,ANY)> ]
-  "19175" -> "19179" 
+digraph "SET_STATIC_PRIMITIVE_FIELD(Long, v)" {  
+"18820" [label = <(METHOD,SET_STATIC_PRIMITIVE_FIELD(Long, v))> ]
+"18823" [label = <(METHOD_RETURN,ANY)> ]
+  "18820" -> "18823" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/478-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/478-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/478-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/478-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "SET_PRIMITIVE_FIELD(Float, obj, v)" {  
-"19180" [label = <(METHOD,SET_PRIMITIVE_FIELD(Float, obj, v))> ]
-"19184" [label = <(METHOD_RETURN,ANY)> ]
-  "19180" -> "19184" 
+digraph "SET_STATIC_PRIMITIVE_FIELD(Short, v)" {  
+"18824" [label = <(METHOD,SET_STATIC_PRIMITIVE_FIELD(Short, v))> ]
+"18827" [label = <(METHOD_RETURN,ANY)> ]
+  "18824" -> "18827" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/479-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/479-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/479-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/479-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "SET_PRIMITIVE_FIELD(Double, obj, v)" {  
-"19185" [label = <(METHOD,SET_PRIMITIVE_FIELD(Double, obj, v))> ]
-"19189" [label = <(METHOD_RETURN,ANY)> ]
-  "19185" -> "19189" 
+digraph "JniAbortF" {  
+"18828" [label = <(METHOD,JniAbortF)> ]
+"18834" [label = <(METHOD_RETURN,ANY)> ]
+  "18828" -> "18834" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/48-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/48-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/48-cfg.dot	2023-06-07 19:35:01.377387172 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/48-cfg.dot	2023-06-07 19:35:07.947386525 +0330
@@ -1,49 +1,44 @@
-digraph "NewGlobalRef" {  
-"2076" [label = <(soa,soa(env))<SUB>755</SUB>> ]
-"2078" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; decoded_obj = soa.Decode&lt;mirror::Object&gt;(obj))<SUB>756</SUB>> ]
-"2095" [label = <(RETURN,return soa.Vm()-&gt;AddGlobalRef(soa.Self(), decoded_obj);,return soa.Vm()-&gt;AddGlobalRef(soa.Self(), decoded_obj);)<SUB>757</SUB>> ]
-"2079" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; decoded_obj)<SUB>756</SUB>> ]
-"2086" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(obj))<SUB>756</SUB>> ]
-"2096" [label = <(AddGlobalRef,soa.Vm()-&gt;AddGlobalRef(soa.Self(), decoded_obj))<SUB>757</SUB>> ]
-"2080" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>756</SUB>> ]
-"2087" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>756</SUB>> ]
-"2097" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Vm()-&gt;AddGlobalRef)<SUB>757</SUB>> ]
-"2103" [label = <(Self,soa.Self())<SUB>757</SUB>> ]
-"2082" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>756</SUB>> ]
-"2088" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>756</SUB>> ]
-"2091" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>756</SUB>> ]
-"2098" [label = <(Vm,soa.Vm())<SUB>757</SUB>> ]
-"2102" [label = <(FIELD_IDENTIFIER,AddGlobalRef,AddGlobalRef)<SUB>757</SUB>> ]
-"2104" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>757</SUB>> ]
-"2084" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>756</SUB>> ]
-"2090" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>756</SUB>> ]
-"2093" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>756</SUB>> ]
-"2099" [label = <(&lt;operator&gt;.fieldAccess,soa.Vm)<SUB>757</SUB>> ]
-"2106" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>757</SUB>> ]
-"2101" [label = <(FIELD_IDENTIFIER,Vm,Vm)<SUB>757</SUB>> ]
-"2071" [label = <(METHOD,NewGlobalRef)<SUB>754</SUB>> ]
-"2108" [label = <(METHOD_RETURN,jobject)<SUB>754</SUB>> ]
-  "2076" -> "2084" 
-  "2078" -> "2101" 
-  "2095" -> "2108" 
-  "2079" -> "2090" 
-  "2086" -> "2078" 
-  "2096" -> "2095" 
-  "2080" -> "2079" 
-  "2087" -> "2086" 
-  "2097" -> "2106" 
-  "2103" -> "2096" 
-  "2082" -> "2080" 
-  "2088" -> "2093" 
-  "2091" -> "2087" 
-  "2098" -> "2102" 
-  "2102" -> "2097" 
-  "2104" -> "2103" 
-  "2084" -> "2082" 
-  "2090" -> "2088" 
-  "2093" -> "2091" 
-  "2099" -> "2098" 
-  "2106" -> "2104" 
-  "2101" -> "2099" 
-  "2071" -> "2076" 
+digraph "NewLocalRef" {  
+"2015" [label = <(soa,soa(env))<SUB>701</SUB>> ]
+"2017" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; decoded_obj = soa.Decode&lt;mirror::Object&gt;(obj))<SUB>702</SUB>> ]
+"2041" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(decoded_obj);,return soa.AddLocalReference&lt;jobject&gt;(decoded_obj);)<SUB>707</SUB>> ]
+"2018" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; decoded_obj)<SUB>702</SUB>> ]
+"2025" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(obj))<SUB>702</SUB>> ]
+"2035" [label = <(&lt;operator&gt;.equals,decoded_obj == nullptr)<SUB>704</SUB>> ]
+"2042" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(decoded_obj))<SUB>707</SUB>> ]
+"2019" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>702</SUB>> ]
+"2026" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>702</SUB>> ]
+"2039" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>705</SUB>> ]
+"2043" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>707</SUB>> ]
+"2021" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>702</SUB>> ]
+"2027" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>702</SUB>> ]
+"2030" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>702</SUB>> ]
+"2044" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>707</SUB>> ]
+"2023" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>702</SUB>> ]
+"2029" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>702</SUB>> ]
+"2032" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>702</SUB>> ]
+"2046" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>707</SUB>> ]
+"2010" [label = <(METHOD,NewLocalRef)<SUB>700</SUB>> ]
+"2049" [label = <(METHOD_RETURN,jobject)<SUB>700</SUB>> ]
+  "2015" -> "2023" 
+  "2017" -> "2035" 
+  "2041" -> "2049" 
+  "2018" -> "2029" 
+  "2025" -> "2017" 
+  "2035" -> "2039" 
+  "2035" -> "2046" 
+  "2042" -> "2041" 
+  "2019" -> "2018" 
+  "2026" -> "2025" 
+  "2039" -> "2049" 
+  "2043" -> "2042" 
+  "2021" -> "2019" 
+  "2027" -> "2032" 
+  "2030" -> "2026" 
+  "2044" -> "2043" 
+  "2023" -> "2021" 
+  "2029" -> "2027" 
+  "2032" -> "2030" 
+  "2046" -> "2044" 
+  "2010" -> "2015" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/480-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/480-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/480-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/480-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "SET_PRIMITIVE_FIELD(Int, obj, v)" {  
-"19190" [label = <(METHOD,SET_PRIMITIVE_FIELD(Int, obj, v))> ]
-"19194" [label = <(METHOD_RETURN,ANY)> ]
-  "19190" -> "19194" 
+digraph "mirror::String::AllocFromUtf16" {  
+"18835" [label = <(METHOD,mirror::String::AllocFromUtf16)> ]
+"18841" [label = <(METHOD_RETURN,ANY)> ]
+  "18835" -> "18841" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/481-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/481-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/481-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/481-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "SET_PRIMITIVE_FIELD(Long, obj, v)" {  
-"19195" [label = <(METHOD,SET_PRIMITIVE_FIELD(Long, obj, v))> ]
-"19199" [label = <(METHOD_RETURN,ANY)> ]
-  "19195" -> "19199" 
+digraph "mirror::String::AllocFromModifiedUtf8" {  
+"18842" [label = <(METHOD,mirror::String::AllocFromModifiedUtf8)> ]
+"18847" [label = <(METHOD_RETURN,ANY)> ]
+  "18842" -> "18847" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/482-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/482-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/482-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/482-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "SET_PRIMITIVE_FIELD(Short, obj, v)" {  
-"19200" [label = <(METHOD,SET_PRIMITIVE_FIELD(Short, obj, v))> ]
-"19204" [label = <(METHOD_RETURN,ANY)> ]
-  "19200" -> "19204" 
+digraph "CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string)" {  
+"18848" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string))> ]
+"18853" [label = <(METHOD_RETURN,ANY)> ]
+  "18848" -> "18853" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/483-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/483-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/483-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/483-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "SET_STATIC_PRIMITIVE_FIELD" {  
-"19205" [label = <(METHOD,SET_STATIC_PRIMITIVE_FIELD)<SUB>1518</SUB>> ]
-"19207" [label = <(METHOD_RETURN,ANY)> ]
-  "19205" -> "19207" 
+digraph "GetLength" {  
+"18854" [label = <(METHOD,GetLength)> ]
+"18857" [label = <(METHOD_RETURN,ANY)> ]
+  "18854" -> "18857" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/484-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/484-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/484-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/484-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "SET_STATIC_PRIMITIVE_FIELD(Boolean, v)" {  
-"19208" [label = <(METHOD,SET_STATIC_PRIMITIVE_FIELD(Boolean, v))> ]
-"19211" [label = <(METHOD_RETURN,ANY)> ]
-  "19208" -> "19211" 
+digraph "GetUtfLength" {  
+"18858" [label = <(METHOD,GetUtfLength)> ]
+"18861" [label = <(METHOD_RETURN,ANY)> ]
+  "18858" -> "18861" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/485-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/485-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/485-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/485-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "SET_STATIC_PRIMITIVE_FIELD(Byte, v)" {  
-"19212" [label = <(METHOD,SET_STATIC_PRIMITIVE_FIELD(Byte, v))> ]
-"19215" [label = <(METHOD_RETURN,ANY)> ]
-  "19212" -> "19215" 
+digraph "CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string)" {  
+"18862" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string))> ]
+"18867" [label = <(METHOD_RETURN,ANY)> ]
+  "18862" -> "18867" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/486-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/486-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/486-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/486-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "SET_STATIC_PRIMITIVE_FIELD(Char, v)" {  
-"19216" [label = <(METHOD,SET_STATIC_PRIMITIVE_FIELD(Char, v))> ]
-"19219" [label = <(METHOD_RETURN,ANY)> ]
-  "19216" -> "19219" 
+digraph "&lt;operator&gt;.subtraction" {  
+"18868" [label = <(METHOD,&lt;operator&gt;.subtraction)> ]
+"18872" [label = <(METHOD_RETURN,ANY)> ]
+  "18868" -> "18872" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/487-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/487-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/487-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/487-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "SET_STATIC_PRIMITIVE_FIELD(Float, v)" {  
-"19220" [label = <(METHOD,SET_STATIC_PRIMITIVE_FIELD(Float, v))> ]
-"19223" [label = <(METHOD_RETURN,ANY)> ]
-  "19220" -> "19223" 
+digraph "CHECK_NON_NULL_MEMCPY_ARGUMENT" {  
+"18873" [label = <(METHOD,CHECK_NON_NULL_MEMCPY_ARGUMENT)<SUB>461</SUB>> ]
+"18877" [label = <(METHOD_RETURN,ANY)> ]
+  "18873" -> "18877" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/488-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/488-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/488-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/488-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "SET_STATIC_PRIMITIVE_FIELD(Double, v)" {  
-"19224" [label = <(METHOD,SET_STATIC_PRIMITIVE_FIELD(Double, v))> ]
-"19227" [label = <(METHOD_RETURN,ANY)> ]
-  "19224" -> "19227" 
+digraph "CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf)" {  
+"18878" [label = <(METHOD,CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf))> ]
+"18883" [label = <(METHOD_RETURN,ANY)> ]
+  "18878" -> "18883" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/489-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/489-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/489-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/489-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "SET_STATIC_PRIMITIVE_FIELD(Int, v)" {  
-"19228" [label = <(METHOD,SET_STATIC_PRIMITIVE_FIELD(Int, v))> ]
-"19231" [label = <(METHOD_RETURN,ANY)> ]
-  "19228" -> "19231" 
+digraph "IsCompressed" {  
+"18884" [label = <(METHOD,IsCompressed)> ]
+"18887" [label = <(METHOD_RETURN,ANY)> ]
+  "18884" -> "18887" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/49-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/49-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/49-cfg.dot	2023-06-07 19:35:01.377387172 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/49-cfg.dot	2023-06-07 19:35:07.947386525 +0330
@@ -1,29 +1,43 @@
-digraph "DeleteGlobalRef" {  
-"2115" [label = <(&lt;operator&gt;.assignment,* vm = down_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm())<SUB>761</SUB>> ]
-"2123" [label = <(&lt;operator&gt;.assignment,* self = down_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_)<SUB>762</SUB>> ]
-"2129" [label = <(DeleteGlobalRef,vm-&gt;DeleteGlobalRef(self, obj))<SUB>763</SUB>> ]
-"2117" [label = <(GetVm,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm())<SUB>761</SUB>> ]
-"2125" [label = <(&lt;operator&gt;.indirectFieldAccess,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_)<SUB>762</SUB>> ]
-"2130" [label = <(&lt;operator&gt;.indirectFieldAccess,vm-&gt;DeleteGlobalRef)<SUB>763</SUB>> ]
-"2118" [label = <(&lt;operator&gt;.indirectFieldAccess,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm)<SUB>761</SUB>> ]
-"2126" [label = <(down_cast&lt;JNIEnvExt*&gt;,down_cast&lt;JNIEnvExt*&gt;(env))<SUB>762</SUB>> ]
-"2128" [label = <(FIELD_IDENTIFIER,self_,self_)<SUB>762</SUB>> ]
-"2132" [label = <(FIELD_IDENTIFIER,DeleteGlobalRef,DeleteGlobalRef)<SUB>763</SUB>> ]
-"2119" [label = <(down_cast&lt;JNIEnvExt*&gt;,down_cast&lt;JNIEnvExt*&gt;(env))<SUB>761</SUB>> ]
-"2121" [label = <(FIELD_IDENTIFIER,GetVm,GetVm)<SUB>761</SUB>> ]
-"2110" [label = <(METHOD,DeleteGlobalRef)<SUB>760</SUB>> ]
-"2135" [label = <(METHOD_RETURN,void)<SUB>760</SUB>> ]
-  "2115" -> "2126" 
-  "2123" -> "2132" 
-  "2129" -> "2135" 
-  "2117" -> "2115" 
-  "2125" -> "2123" 
-  "2130" -> "2129" 
-  "2118" -> "2117" 
-  "2126" -> "2128" 
-  "2128" -> "2125" 
-  "2132" -> "2130" 
-  "2119" -> "2121" 
-  "2121" -> "2118" 
-  "2110" -> "2119" 
+digraph "DeleteLocalRef" {  
+"2062" [label = <(soa,soa(env))<SUB>717</SUB>> ]
+"2065" [label = <(&lt;operator&gt;.assignment,* ext_env = down_cast&lt;JNIEnvExt*&gt;(env))<SUB>718</SUB>> ]
+"2056" [label = <(&lt;operator&gt;.equals,obj == nullptr)<SUB>711</SUB>> ]
+"2067" [label = <(down_cast&lt;JNIEnvExt*&gt;,down_cast&lt;JNIEnvExt*&gt;(env))<SUB>718</SUB>> ]
+"2070" [label = <(&lt;operator&gt;.logicalNot,!ext_env-&gt;locals_.Remove(ext_env-&gt;local_ref_cookie_, obj))<SUB>719</SUB>> ]
+"2060" [label = <(RETURN,return;,return;)<SUB>712</SUB>> ]
+"2071" [label = <(Remove,ext_env-&gt;locals_.Remove(ext_env-&gt;local_ref_cookie_, obj))<SUB>719</SUB>> ]
+"2082" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI WARNING: DeleteLocalRef(&quot; &lt;&lt; obj &lt;&lt; &quot;) &quot;\012 &lt;&lt; &quot;failed to find entry&quot;)<SUB>725</SUB>> ]
+"2072" [label = <(&lt;operator&gt;.fieldAccess,ext_env-&gt;locals_.Remove)<SUB>719</SUB>> ]
+"2077" [label = <(&lt;operator&gt;.indirectFieldAccess,ext_env-&gt;local_ref_cookie_)<SUB>719</SUB>> ]
+"2083" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI WARNING: DeleteLocalRef(&quot; &lt;&lt; obj &lt;&lt; &quot;) &quot;)<SUB>725</SUB>> ]
+"2073" [label = <(&lt;operator&gt;.indirectFieldAccess,ext_env-&gt;locals_)<SUB>719</SUB>> ]
+"2076" [label = <(FIELD_IDENTIFIER,Remove,Remove)<SUB>719</SUB>> ]
+"2079" [label = <(FIELD_IDENTIFIER,local_ref_cookie_,local_ref_cookie_)<SUB>719</SUB>> ]
+"2084" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI WARNING: DeleteLocalRef(&quot; &lt;&lt; obj)<SUB>725</SUB>> ]
+"2075" [label = <(FIELD_IDENTIFIER,locals_,locals_)<SUB>719</SUB>> ]
+"2085" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI WARNING: DeleteLocalRef(&quot;)<SUB>725</SUB>> ]
+"2086" [label = <(LOG,LOG(WARNING))<SUB>725</SUB>> ]
+"2051" [label = <(METHOD,DeleteLocalRef)<SUB>710</SUB>> ]
+"2092" [label = <(METHOD_RETURN,void)<SUB>710</SUB>> ]
+  "2062" -> "2067" 
+  "2065" -> "2075" 
+  "2056" -> "2060" 
+  "2056" -> "2062" 
+  "2067" -> "2065" 
+  "2070" -> "2092" 
+  "2070" -> "2086" 
+  "2060" -> "2092" 
+  "2071" -> "2070" 
+  "2082" -> "2092" 
+  "2072" -> "2079" 
+  "2077" -> "2071" 
+  "2083" -> "2082" 
+  "2073" -> "2076" 
+  "2076" -> "2072" 
+  "2079" -> "2077" 
+  "2084" -> "2083" 
+  "2075" -> "2073" 
+  "2085" -> "2084" 
+  "2086" -> "2085" 
+  "2051" -> "2056" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/490-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/490-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/490-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/490-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "SET_STATIC_PRIMITIVE_FIELD(Long, v)" {  
-"19232" [label = <(METHOD,SET_STATIC_PRIMITIVE_FIELD(Long, v))> ]
-"19235" [label = <(METHOD_RETURN,ANY)> ]
-  "19232" -> "19235" 
+digraph "&lt;operator&gt;.preIncrement" {  
+"18888" [label = <(METHOD,&lt;operator&gt;.preIncrement)> ]
+"18891" [label = <(METHOD_RETURN,ANY)> ]
+  "18888" -> "18891" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/491-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/491-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/491-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/491-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "SET_STATIC_PRIMITIVE_FIELD(Short, v)" {  
-"19236" [label = <(METHOD,SET_STATIC_PRIMITIVE_FIELD(Short, v))> ]
-"19239" [label = <(METHOD_RETURN,ANY)> ]
-  "19236" -> "19239" 
+digraph "CharAt" {  
+"18892" [label = <(METHOD,CharAt)> ]
+"18896" [label = <(METHOD_RETURN,ANY)> ]
+  "18892" -> "18896" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/492-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/492-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/492-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/492-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "JniAbortF" {  
-"19240" [label = <(METHOD,JniAbortF)> ]
-"19246" [label = <(METHOD_RETURN,ANY)> ]
-  "19240" -> "19246" 
+digraph "&lt;operator&gt;.addition" {  
+"18897" [label = <(METHOD,&lt;operator&gt;.addition)> ]
+"18901" [label = <(METHOD_RETURN,ANY)> ]
+  "18897" -> "18901" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/493-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/493-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/493-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/493-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "mirror::String::AllocFromUtf16" {  
-"19247" [label = <(METHOD,mirror::String::AllocFromUtf16)> ]
-"19253" [label = <(METHOD_RETURN,ANY)> ]
-  "19247" -> "19253" 
+digraph "GetValue" {  
+"18902" [label = <(METHOD,GetValue)> ]
+"18905" [label = <(METHOD_RETURN,ANY)> ]
+  "18902" -> "18905" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/494-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/494-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/494-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/494-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "::max" {  
-"19254" [label = <(METHOD,::max)> ]
-"19257" [label = <(METHOD_RETURN,ANY)> ]
-  "19254" -> "19257" 
+digraph "memcpy" {  
+"18906" [label = <(METHOD,memcpy)> ]
+"18911" [label = <(METHOD_RETURN,ANY)> ]
+  "18906" -> "18911" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/495-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/495-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/495-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/495-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "android::base::StringPrintf" {  
-"19258" [label = <(METHOD,android::base::StringPrintf)> ]
-"19263" [label = <(METHOD_RETURN,ANY)> ]
-  "19258" -> "19263" 
+digraph "&lt;operator&gt;.multiplication" {  
+"18912" [label = <(METHOD,&lt;operator&gt;.multiplication)> ]
+"18916" [label = <(METHOD_RETURN,ANY)> ]
+  "18912" -> "18916" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/496-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/496-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/496-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/496-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "ThrowOutOfMemoryError" {  
-"19264" [label = <(METHOD,ThrowOutOfMemoryError)> ]
-"19268" [label = <(METHOD_RETURN,ANY)> ]
-  "19264" -> "19268" 
+digraph "&lt;operator&gt;.sizeOf" {  
+"18917" [label = <(METHOD,&lt;operator&gt;.sizeOf)> ]
+"18920" [label = <(METHOD_RETURN,ANY)> ]
+  "18917" -> "18920" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/497-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/497-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/497-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/497-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "UINT64_C" {  
-"19269" [label = <(METHOD,UINT64_C)> ]
-"19272" [label = <(METHOD_RETURN,ANY)> ]
-  "19269" -> "19272" 
+digraph "CountUtf8Bytes" {  
+"18921" [label = <(METHOD,CountUtf8Bytes)> ]
+"18925" [label = <(METHOD_RETURN,ANY)> ]
+  "18921" -> "18925" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/498-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/498-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/498-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/498-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "prev_bad_input_time" {  
-"19273" [label = <(METHOD,prev_bad_input_time)> ]
-"19276" [label = <(METHOD_RETURN,ANY)> ]
-  "19273" -> "19276" 
+digraph "ConvertUtf16ToModifiedUtf8" {  
+"18926" [label = <(METHOD,ConvertUtf16ToModifiedUtf8)> ]
+"18932" [label = <(METHOD_RETURN,ANY)> ]
+  "18926" -> "18932" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/499-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/499-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/499-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/499-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "load" {  
-"19277" [label = <(METHOD,load)> ]
-"19281" [label = <(METHOD_RETURN,ANY)> ]
-  "19277" -> "19281" 
+digraph "CHECK_NON_NULL_ARGUMENT(java_string)" {  
+"18933" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(java_string))> ]
+"18938" [label = <(METHOD_RETURN,ANY)> ]
+  "18933" -> "18938" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/5-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/5-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/5-cfg.dot	2023-06-07 19:35:01.327387179 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/5-cfg.dot	2023-06-07 19:35:07.907386529 +0330
@@ -1,5 +1,5 @@
-digraph "ScopedVAArgs" {  
-"30" [label = <(METHOD,ScopedVAArgs)<SUB>75</SUB>> ]
-"33" [label = <(METHOD_RETURN,ANY)<SUB>75</SUB>> ]
-  "30" -> "33" 
+digraph "NotifySetObjectField" {  
+"38" [label = <(METHOD,NotifySetObjectField)<SUB>106</SUB>> ]
+"43" [label = <(METHOD_RETURN,void)<SUB>106</SUB>> ]
+  "38" -> "43" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/50-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/50-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/50-cfg.dot	2023-06-07 19:35:01.377387172 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/50-cfg.dot	2023-06-07 19:35:07.947386525 +0330
@@ -1,49 +1,42 @@
-digraph "NewWeakGlobalRef" {  
-"2142" [label = <(soa,soa(env))<SUB>767</SUB>> ]
-"2144" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; decoded_obj = soa.Decode&lt;mirror::Object&gt;(obj))<SUB>768</SUB>> ]
-"2161" [label = <(RETURN,return soa.Vm()-&gt;AddWeakGlobalRef(soa.Self(), decoded_obj);,return soa.Vm()-&gt;AddWeakGlobalRef(soa.Self(), decoded_obj);)<SUB>769</SUB>> ]
-"2145" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; decoded_obj)<SUB>768</SUB>> ]
-"2152" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(obj))<SUB>768</SUB>> ]
-"2162" [label = <(AddWeakGlobalRef,soa.Vm()-&gt;AddWeakGlobalRef(soa.Self(), decoded_obj))<SUB>769</SUB>> ]
-"2146" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>768</SUB>> ]
-"2153" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>768</SUB>> ]
-"2163" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Vm()-&gt;AddWeakGlobalRef)<SUB>769</SUB>> ]
-"2169" [label = <(Self,soa.Self())<SUB>769</SUB>> ]
-"2148" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>768</SUB>> ]
-"2154" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>768</SUB>> ]
-"2157" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>768</SUB>> ]
-"2164" [label = <(Vm,soa.Vm())<SUB>769</SUB>> ]
-"2168" [label = <(FIELD_IDENTIFIER,AddWeakGlobalRef,AddWeakGlobalRef)<SUB>769</SUB>> ]
-"2170" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>769</SUB>> ]
-"2150" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>768</SUB>> ]
-"2156" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>768</SUB>> ]
-"2159" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>768</SUB>> ]
-"2165" [label = <(&lt;operator&gt;.fieldAccess,soa.Vm)<SUB>769</SUB>> ]
-"2172" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>769</SUB>> ]
-"2167" [label = <(FIELD_IDENTIFIER,Vm,Vm)<SUB>769</SUB>> ]
-"2137" [label = <(METHOD,NewWeakGlobalRef)<SUB>766</SUB>> ]
-"2174" [label = <(METHOD_RETURN,jweak)<SUB>766</SUB>> ]
-  "2142" -> "2150" 
-  "2144" -> "2167" 
-  "2161" -> "2174" 
-  "2145" -> "2156" 
-  "2152" -> "2144" 
-  "2162" -> "2161" 
-  "2146" -> "2145" 
-  "2153" -> "2152" 
-  "2163" -> "2172" 
-  "2169" -> "2162" 
-  "2148" -> "2146" 
-  "2154" -> "2159" 
-  "2157" -> "2153" 
-  "2164" -> "2168" 
-  "2168" -> "2163" 
-  "2170" -> "2169" 
-  "2150" -> "2148" 
-  "2156" -> "2154" 
-  "2159" -> "2157" 
-  "2165" -> "2164" 
-  "2172" -> "2170" 
-  "2167" -> "2165" 
-  "2137" -> "2142" 
+digraph "IsSameObject" {  
+"2100" [label = <(&lt;operator&gt;.equals,obj1 == obj2)<SUB>731</SUB>> ]
+"2104" [label = <(RETURN,return JNI_TRUE;,return JNI_TRUE;)<SUB>732</SUB>> ]
+"2109" [label = <(soa,soa(env))<SUB>734</SUB>> ]
+"2111" [label = <(RETURN,return (soa.Decode&lt;mirror::Object&gt;(obj1) == soa.Decode&lt;mirror::Object&gt;(obj2))\012 ? JNI_TRUE : JNI_FALSE;,return (soa.Decode&lt;mirror::Object&gt;(obj1) == soa.Decode&lt;mirror::Object&gt;(obj2))\012 ? JNI_TRUE : JNI_FALSE;)<SUB>735</SUB>> ]
+"2112" [label = <(&lt;operator&gt;.conditional,(soa.Decode&lt;mirror::Object&gt;(obj1) == soa.Decode&lt;mirror::Object&gt;(obj2))\012 ? JNI_TRUE : JNI_FALSE)<SUB>735</SUB>> ]
+"2113" [label = <(&lt;operator&gt;.equals,soa.Decode&lt;mirror::Object&gt;(obj1) == soa.Decode&lt;mirror::Object&gt;(obj2))<SUB>735</SUB>> ]
+"2114" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(obj1))<SUB>735</SUB>> ]
+"2123" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(obj2))<SUB>735</SUB>> ]
+"2115" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>735</SUB>> ]
+"2124" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>735</SUB>> ]
+"2116" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>735</SUB>> ]
+"2119" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>735</SUB>> ]
+"2125" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>735</SUB>> ]
+"2128" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>735</SUB>> ]
+"2118" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>735</SUB>> ]
+"2121" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>735</SUB>> ]
+"2127" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>735</SUB>> ]
+"2130" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>735</SUB>> ]
+"2094" [label = <(METHOD,IsSameObject)<SUB>730</SUB>> ]
+"2134" [label = <(METHOD_RETURN,jboolean)<SUB>730</SUB>> ]
+  "2100" -> "2104" 
+  "2100" -> "2109" 
+  "2104" -> "2134" 
+  "2109" -> "2118" 
+  "2111" -> "2134" 
+  "2112" -> "2111" 
+  "2113" -> "2112" 
+  "2114" -> "2127" 
+  "2123" -> "2113" 
+  "2115" -> "2114" 
+  "2124" -> "2123" 
+  "2116" -> "2121" 
+  "2119" -> "2115" 
+  "2125" -> "2130" 
+  "2128" -> "2124" 
+  "2118" -> "2116" 
+  "2121" -> "2119" 
+  "2127" -> "2125" 
+  "2130" -> "2128" 
+  "2094" -> "2100" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/500-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/500-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/500-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/500-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "NanoTime" {  
-"19282" [label = <(METHOD,NanoTime)> ]
-"19284" [label = <(METHOD_RETURN,ANY)> ]
-  "19282" -> "19284" 
+digraph "IsMovableObject" {  
+"18939" [label = <(METHOD,IsMovableObject)> ]
+"18943" [label = <(METHOD_RETURN,ANY)> ]
+  "18939" -> "18943" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/501-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/501-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/501-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/501-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.greaterEqualsThan" {  
-"19285" [label = <(METHOD,&lt;operator&gt;.greaterEqualsThan)> ]
-"19289" [label = <(METHOD_RETURN,ANY)> ]
-  "19285" -> "19289" 
+digraph "&lt;operator&gt;.new" {  
+"18944" [label = <(METHOD,&lt;operator&gt;.new)> ]
+"18947" [label = <(METHOD_RETURN,ANY)> ]
+  "18944" -> "18947" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/502-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/502-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/502-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/502-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "compare_exchange_strong" {  
-"19290" [label = <(METHOD,compare_exchange_strong)> ]
-"19296" [label = <(METHOD_RETURN,ANY)> ]
-  "19290" -> "19296" 
+digraph "&lt;operator&gt;.delete" {  
+"18948" [label = <(METHOD,&lt;operator&gt;.delete)> ]
+"18951" [label = <(METHOD_RETURN,ANY)> ]
+  "18948" -> "18951" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/503-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/503-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/503-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/503-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "emplace" {  
-"19297" [label = <(METHOD,emplace)> ]
-"19300" [label = <(METHOD_RETURN,ANY)> ]
-  "19297" -> "19300" 
+digraph "h" {  
+"18952" [label = <(METHOD,h)> ]
+"18955" [label = <(METHOD_RETURN,ANY)> ]
+  "18952" -> "18955" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/504-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/504-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/504-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/504-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "reserve" {  
-"19301" [label = <(METHOD,reserve)> ]
-"19305" [label = <(METHOD_RETURN,ANY)> ]
-  "19301" -> "19305" 
+digraph "NewHandleWrapper" {  
+"18956" [label = <(METHOD,NewHandleWrapper)> ]
+"18960" [label = <(METHOD_RETURN,ANY)> ]
+  "18956" -> "18960" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/505-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/505-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/505-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/505-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "VisitModifiedUtf8Chars" {  
-"19306" [label = <(METHOD,VisitModifiedUtf8Chars)> ]
-"19312" [label = <(METHOD_RETURN,ANY)> ]
-  "19306" -> "19312" 
+digraph "IncrementDisableMovingGC" {  
+"18961" [label = <(METHOD,IncrementDisableMovingGC)> ]
+"18965" [label = <(METHOD_RETURN,ANY)> ]
+  "18961" -> "18965" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/506-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/506-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/506-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/506-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "length" {  
-"19313" [label = <(METHOD,length)> ]
-"19316" [label = <(METHOD_RETURN,ANY)> ]
-  "19313" -> "19316" 
+digraph "IncrementDisableThreadFlip" {  
+"18966" [label = <(METHOD,IncrementDisableThreadFlip)> ]
+"18970" [label = <(METHOD_RETURN,ANY)> ]
+  "18966" -> "18970" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/507-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/507-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/507-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/507-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "mirror::String::AllocFromModifiedUtf8" {  
-"19317" [label = <(METHOD,mirror::String::AllocFromModifiedUtf8)> ]
-"19324" [label = <(METHOD_RETURN,ANY)> ]
-  "19317" -> "19324" 
+digraph "DecrementDisableMovingGC" {  
+"18971" [label = <(METHOD,DecrementDisableMovingGC)> ]
+"18975" [label = <(METHOD_RETURN,ANY)> ]
+  "18971" -> "18975" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/508-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/508-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/508-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/508-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string)" {  
-"19325" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string))> ]
-"19330" [label = <(METHOD_RETURN,ANY)> ]
-  "19325" -> "19330" 
+digraph "DecrementDisableThreadFlip" {  
+"18976" [label = <(METHOD,DecrementDisableThreadFlip)> ]
+"18980" [label = <(METHOD_RETURN,ANY)> ]
+  "18976" -> "18980" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/509-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/509-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/509-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/509-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "GetLength" {  
-"19331" [label = <(METHOD,GetLength)> ]
-"19334" [label = <(METHOD_RETURN,ANY)> ]
-  "19331" -> "19334" 
+digraph "CHECK" {  
+"18981" [label = <(METHOD,CHECK)> ]
+"18984" [label = <(METHOD_RETURN,ANY)> ]
+  "18981" -> "18984" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/51-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/51-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/51-cfg.dot	2023-06-07 19:35:01.377387172 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/51-cfg.dot	2023-06-07 19:35:07.947386525 +0330
@@ -1,29 +1,133 @@
-digraph "DeleteWeakGlobalRef" {  
-"2181" [label = <(&lt;operator&gt;.assignment,* vm = down_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm())<SUB>773</SUB>> ]
-"2189" [label = <(&lt;operator&gt;.assignment,* self = down_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_)<SUB>774</SUB>> ]
-"2195" [label = <(DeleteWeakGlobalRef,vm-&gt;DeleteWeakGlobalRef(self, obj))<SUB>775</SUB>> ]
-"2183" [label = <(GetVm,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm())<SUB>773</SUB>> ]
-"2191" [label = <(&lt;operator&gt;.indirectFieldAccess,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_)<SUB>774</SUB>> ]
-"2196" [label = <(&lt;operator&gt;.indirectFieldAccess,vm-&gt;DeleteWeakGlobalRef)<SUB>775</SUB>> ]
-"2184" [label = <(&lt;operator&gt;.indirectFieldAccess,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm)<SUB>773</SUB>> ]
-"2192" [label = <(down_cast&lt;JNIEnvExt*&gt;,down_cast&lt;JNIEnvExt*&gt;(env))<SUB>774</SUB>> ]
-"2194" [label = <(FIELD_IDENTIFIER,self_,self_)<SUB>774</SUB>> ]
-"2198" [label = <(FIELD_IDENTIFIER,DeleteWeakGlobalRef,DeleteWeakGlobalRef)<SUB>775</SUB>> ]
-"2185" [label = <(down_cast&lt;JNIEnvExt*&gt;,down_cast&lt;JNIEnvExt*&gt;(env))<SUB>773</SUB>> ]
-"2187" [label = <(FIELD_IDENTIFIER,GetVm,GetVm)<SUB>773</SUB>> ]
-"2176" [label = <(METHOD,DeleteWeakGlobalRef)<SUB>772</SUB>> ]
-"2201" [label = <(METHOD_RETURN,void)<SUB>772</SUB>> ]
-  "2181" -> "2192" 
-  "2189" -> "2198" 
-  "2195" -> "2201" 
-  "2183" -> "2181" 
-  "2191" -> "2189" 
-  "2196" -> "2195" 
-  "2184" -> "2183" 
-  "2192" -> "2194" 
-  "2194" -> "2191" 
-  "2198" -> "2196" 
-  "2185" -> "2187" 
-  "2187" -> "2184" 
-  "2176" -> "2185" 
+digraph "AllocObject" {  
+"2140" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_class))<SUB>741</SUB>> ]
+"2159" [label = <(soa,soa(env))<SUB>742</SUB>> ]
+"2161" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c = EnsureInitialized(soa.Self(), soa.Decode&lt;mirror::Class&gt;(java_class)))<SUB>743</SUB>> ]
+"2227" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(c-&gt;AllocObject(soa.Self()));,return soa.AddLocalReference&lt;jobject&gt;(c-&gt;AllocObject(soa.Self()));)<SUB>752</SUB>> ]
+"2162" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c)<SUB>743</SUB>> ]
+"2169" [label = <(EnsureInitialized,EnsureInitialized(soa.Self(), soa.Decode&lt;mirror::Class&gt;(java_class)))<SUB>743</SUB>> ]
+"2184" [label = <(&lt;operator&gt;.equals,c == nullptr)<SUB>744</SUB>> ]
+"2191" [label = <(IsStringClass,c-&gt;IsStringClass())<SUB>747</SUB>> ]
+"2228" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(c-&gt;AllocObject(soa.Self())))<SUB>752</SUB>> ]
+"2163" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>743</SUB>> ]
+"2170" [label = <(Self,soa.Self())<SUB>743</SUB>> ]
+"2174" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>743</SUB>> ]
+"2188" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>745</SUB>> ]
+"2192" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;IsStringClass)<SUB>747</SUB>> ]
+"2197" [label = <(&lt;operator&gt;.assignment,allocator_type = Runtime::Current()-&gt;GetHeap()-&gt;GetCurrentAllocator())<SUB>748</SUB>> ]
+"2209" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(\012          mirror::String::AllocEmptyString(soa.Self(), allocator_type));,return soa.AddLocalReference&lt;jobject&gt;(\012          mirror::String::AllocEmptyString(soa.Self(), allocator_type));)<SUB>749</SUB>> ]
+"2229" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>752</SUB>> ]
+"2234" [label = <(AllocObject,c-&gt;AllocObject(soa.Self()))<SUB>752</SUB>> ]
+"2144" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>741</SUB>> ]
+"2165" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>743</SUB>> ]
+"2171" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>743</SUB>> ]
+"2175" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>743</SUB>> ]
+"2194" [label = <(FIELD_IDENTIFIER,IsStringClass,IsStringClass)<SUB>747</SUB>> ]
+"2199" [label = <(GetCurrentAllocator,Runtime::Current()-&gt;GetHeap()-&gt;GetCurrentAllocator())<SUB>748</SUB>> ]
+"2210" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(\012          mirror::String::AllocEmptyString(soa.Self(), allocator_type)))<SUB>749</SUB>> ]
+"2230" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>752</SUB>> ]
+"2235" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;AllocObject)<SUB>752</SUB>> ]
+"2238" [label = <(Self,soa.Self())<SUB>752</SUB>> ]
+"2145" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>741</SUB>> ]
+"2149" [label = <(CHECK_NON_NULL_ARGUMENT(java_class),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class == null&quot;))<SUB>741</SUB>> ]
+"2156" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_class),CHECK_NON_NULL_ARGUMENT(java_class))<SUB>741</SUB>> ]
+"2167" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>743</SUB>> ]
+"2173" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>743</SUB>> ]
+"2176" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>743</SUB>> ]
+"2179" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>743</SUB>> ]
+"2200" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetHeap()-&gt;GetCurrentAllocator)<SUB>748</SUB>> ]
+"2211" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>749</SUB>> ]
+"2216" [label = <(mirror::String::AllocEmptyString,mirror::String::AllocEmptyString(soa.Self(), allocator_type))<SUB>750</SUB>> ]
+"2232" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>752</SUB>> ]
+"2237" [label = <(FIELD_IDENTIFIER,AllocObject,AllocObject)<SUB>752</SUB>> ]
+"2239" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>752</SUB>> ]
+"2150" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>741</SUB>> ]
+"2178" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>743</SUB>> ]
+"2181" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>743</SUB>> ]
+"2201" [label = <(GetHeap,Runtime::Current()-&gt;GetHeap())<SUB>748</SUB>> ]
+"2208" [label = <(FIELD_IDENTIFIER,GetCurrentAllocator,GetCurrentAllocator)<SUB>748</SUB>> ]
+"2212" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>749</SUB>> ]
+"2217" [label = <(&lt;operator&gt;.fieldAccess,mirror::String::AllocEmptyString)<SUB>750</SUB>> ]
+"2222" [label = <(Self,soa.Self())<SUB>750</SUB>> ]
+"2241" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>752</SUB>> ]
+"2151" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>741</SUB>> ]
+"2153" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>741</SUB>> ]
+"2202" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetHeap)<SUB>748</SUB>> ]
+"2214" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>749</SUB>> ]
+"2218" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>750</SUB>> ]
+"2221" [label = <(FIELD_IDENTIFIER,AllocEmptyString,AllocEmptyString)<SUB>750</SUB>> ]
+"2223" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>750</SUB>> ]
+"2203" [label = <(Runtime::Current,Runtime::Current())<SUB>748</SUB>> ]
+"2207" [label = <(FIELD_IDENTIFIER,GetHeap,GetHeap)<SUB>748</SUB>> ]
+"2225" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>750</SUB>> ]
+"2204" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>748</SUB>> ]
+"2206" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>748</SUB>> ]
+"2136" [label = <(METHOD,AllocObject)<SUB>740</SUB>> ]
+"2242" [label = <(METHOD_RETURN,jobject)<SUB>740</SUB>> ]
+  "2140" -> "2145" 
+  "2140" -> "2159" 
+  "2159" -> "2167" 
+  "2161" -> "2184" 
+  "2227" -> "2242" 
+  "2162" -> "2173" 
+  "2169" -> "2161" 
+  "2184" -> "2188" 
+  "2184" -> "2194" 
+  "2191" -> "2206" 
+  "2191" -> "2232" 
+  "2228" -> "2227" 
+  "2163" -> "2162" 
+  "2170" -> "2178" 
+  "2174" -> "2169" 
+  "2188" -> "2242" 
+  "2192" -> "2191" 
+  "2197" -> "2214" 
+  "2209" -> "2242" 
+  "2229" -> "2237" 
+  "2234" -> "2228" 
+  "2144" -> "2151" 
+  "2144" -> "2159" 
+  "2165" -> "2163" 
+  "2171" -> "2170" 
+  "2175" -> "2174" 
+  "2194" -> "2192" 
+  "2199" -> "2197" 
+  "2210" -> "2209" 
+  "2230" -> "2229" 
+  "2235" -> "2241" 
+  "2238" -> "2234" 
+  "2145" -> "2144" 
+  "2149" -> "2156" 
+  "2156" -> "2242" 
+  "2167" -> "2165" 
+  "2173" -> "2171" 
+  "2176" -> "2181" 
+  "2179" -> "2175" 
+  "2200" -> "2199" 
+  "2211" -> "2218" 
+  "2216" -> "2210" 
+  "2232" -> "2230" 
+  "2237" -> "2235" 
+  "2239" -> "2238" 
+  "2150" -> "2149" 
+  "2178" -> "2176" 
+  "2181" -> "2179" 
+  "2201" -> "2208" 
+  "2208" -> "2200" 
+  "2212" -> "2211" 
+  "2217" -> "2225" 
+  "2222" -> "2216" 
+  "2241" -> "2239" 
+  "2151" -> "2153" 
+  "2153" -> "2150" 
+  "2202" -> "2201" 
+  "2214" -> "2212" 
+  "2218" -> "2221" 
+  "2221" -> "2217" 
+  "2223" -> "2222" 
+  "2203" -> "2207" 
+  "2207" -> "2202" 
+  "2225" -> "2223" 
+  "2204" -> "2203" 
+  "2206" -> "2204" 
+  "2136" -> "2140" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/510-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/510-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/510-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/510-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "GetUtfLength" {  
-"19335" [label = <(METHOD,GetUtfLength)> ]
-"19338" [label = <(METHOD_RETURN,ANY)> ]
-  "19335" -> "19338" 
+digraph "CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_array)" {  
+"18985" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_array))> ]
+"18990" [label = <(METHOD_RETURN,ANY)> ]
+  "18985" -> "18990" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/511-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/511-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/511-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/511-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string)" {  
-"19339" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string))> ]
-"19344" [label = <(METHOD_RETURN,ANY)> ]
-  "19339" -> "19344" 
+digraph "IsArrayInstance" {  
+"18991" [label = <(METHOD,IsArrayInstance)> ]
+"18994" [label = <(METHOD_RETURN,ANY)> ]
+  "18991" -> "18994" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/512-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/512-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/512-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/512-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_MEMCPY_ARGUMENT" {  
-"19345" [label = <(METHOD,CHECK_NON_NULL_MEMCPY_ARGUMENT)<SUB>539</SUB>> ]
-"19349" [label = <(METHOD_RETURN,ANY)> ]
-  "19345" -> "19349" 
+digraph "PrettyTypeOf" {  
+"18995" [label = <(METHOD,PrettyTypeOf)> ]
+"18998" [label = <(METHOD_RETURN,ANY)> ]
+  "18995" -> "18998" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/513-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/513-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/513-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/513-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf)" {  
-"19350" [label = <(METHOD,CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf))> ]
-"19355" [label = <(METHOD_RETURN,ANY)> ]
-  "19350" -> "19355" 
+digraph "AsArray" {  
+"18999" [label = <(METHOD,AsArray)> ]
+"19002" [label = <(METHOD_RETURN,ANY)> ]
+  "18999" -> "19002" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/514-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/514-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/514-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/514-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "IsCompressed" {  
-"19356" [label = <(METHOD,IsCompressed)> ]
-"19359" [label = <(METHOD_RETURN,ANY)> ]
-  "19356" -> "19359" 
+digraph "CHECK_NON_NULL_ARGUMENT(java_array)" {  
+"19003" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(java_array))> ]
+"19008" [label = <(METHOD_RETURN,ANY)> ]
+  "19003" -> "19008" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/515-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/515-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/515-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/515-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.preIncrement" {  
-"19360" [label = <(METHOD,&lt;operator&gt;.preIncrement)> ]
-"19363" [label = <(METHOD_RETURN,ANY)> ]
-  "19360" -> "19363" 
+digraph "&lt;operator&gt;.arithmeticShiftRight" {  
+"19009" [label = <(METHOD,&lt;operator&gt;.arithmeticShiftRight)> ]
+"19013" [label = <(METHOD_RETURN,ANY)> ]
+  "19009" -> "19013" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/516-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/516-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/516-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/516-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "CharAt" {  
-"19364" [label = <(METHOD,CharAt)> ]
-"19368" [label = <(METHOD_RETURN,ANY)> ]
-  "19364" -> "19368" 
+digraph "CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array)" {  
+"19014" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))> ]
+"19019" [label = <(METHOD_RETURN,ANY)> ]
+  "19014" -> "19019" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/517-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/517-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/517-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/517-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "GetValue" {  
-"19369" [label = <(METHOD,GetValue)> ]
-"19372" [label = <(METHOD_RETURN,ANY)> ]
-  "19369" -> "19372" 
+digraph "NewPrimitiveArray&lt;jbooleanArray,mirror::BooleanArray&gt;" {  
+"19020" [label = <(METHOD,NewPrimitiveArray&lt;jbooleanArray,mirror::BooleanArray&gt;)> ]
+"19024" [label = <(METHOD_RETURN,ANY)> ]
+  "19020" -> "19024" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/518-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/518-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/518-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/518-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "memcpy" {  
-"19373" [label = <(METHOD,memcpy)> ]
-"19378" [label = <(METHOD_RETURN,ANY)> ]
-  "19373" -> "19378" 
+digraph "NewPrimitiveArray&lt;jbyteArray,mirror::ByteArray&gt;" {  
+"19025" [label = <(METHOD,NewPrimitiveArray&lt;jbyteArray,mirror::ByteArray&gt;)> ]
+"19029" [label = <(METHOD_RETURN,ANY)> ]
+  "19025" -> "19029" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/519-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/519-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/519-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/519-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.multiplication" {  
-"19379" [label = <(METHOD,&lt;operator&gt;.multiplication)> ]
-"19383" [label = <(METHOD_RETURN,ANY)> ]
-  "19379" -> "19383" 
+digraph "NewPrimitiveArray&lt;jcharArray,mirror::CharArray&gt;" {  
+"19030" [label = <(METHOD,NewPrimitiveArray&lt;jcharArray,mirror::CharArray&gt;)> ]
+"19034" [label = <(METHOD_RETURN,ANY)> ]
+  "19030" -> "19034" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/52-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/52-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/52-cfg.dot	2023-06-07 19:35:01.377387172 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/52-cfg.dot	2023-06-07 19:35:07.947386525 +0330
@@ -1,44 +1,53 @@
-digraph "NewLocalRef" {  
-"2208" [label = <(soa,soa(env))<SUB>779</SUB>> ]
-"2210" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; decoded_obj = soa.Decode&lt;mirror::Object&gt;(obj))<SUB>780</SUB>> ]
-"2234" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(decoded_obj);,return soa.AddLocalReference&lt;jobject&gt;(decoded_obj);)<SUB>785</SUB>> ]
-"2211" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; decoded_obj)<SUB>780</SUB>> ]
-"2218" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(obj))<SUB>780</SUB>> ]
-"2228" [label = <(&lt;operator&gt;.equals,decoded_obj == nullptr)<SUB>782</SUB>> ]
-"2235" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(decoded_obj))<SUB>785</SUB>> ]
-"2212" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>780</SUB>> ]
-"2219" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>780</SUB>> ]
-"2232" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>783</SUB>> ]
-"2236" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>785</SUB>> ]
-"2214" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>780</SUB>> ]
-"2220" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>780</SUB>> ]
-"2223" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>780</SUB>> ]
-"2237" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>785</SUB>> ]
-"2216" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>780</SUB>> ]
-"2222" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>780</SUB>> ]
-"2225" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>780</SUB>> ]
-"2239" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>785</SUB>> ]
-"2203" [label = <(METHOD,NewLocalRef)<SUB>778</SUB>> ]
-"2242" [label = <(METHOD_RETURN,jobject)<SUB>778</SUB>> ]
-  "2208" -> "2216" 
-  "2210" -> "2228" 
-  "2234" -> "2242" 
-  "2211" -> "2222" 
-  "2218" -> "2210" 
-  "2228" -> "2232" 
-  "2228" -> "2239" 
-  "2235" -> "2234" 
-  "2212" -> "2211" 
-  "2219" -> "2218" 
-  "2232" -> "2242" 
-  "2236" -> "2235" 
-  "2214" -> "2212" 
-  "2220" -> "2225" 
-  "2223" -> "2219" 
-  "2237" -> "2236" 
-  "2216" -> "2214" 
-  "2222" -> "2220" 
-  "2225" -> "2223" 
-  "2239" -> "2237" 
-  "2203" -> "2208" 
+digraph "NewObject" {  
+"2250" [label = <(va_start,va_start(args, mid))<SUB>757</SUB>> ]
+"2254" [label = <(free_args_later,free_args_later(&amp;args))<SUB>758</SUB>> ]
+"2257" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_class))<SUB>759</SUB>> ]
+"2275" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>760</SUB>> ]
+"2294" [label = <(&lt;operator&gt;.assignment,result = NewObjectV(env, java_class, mid, args))<SUB>761</SUB>> ]
+"2301" [label = <(RETURN,return result;,return result;)<SUB>762</SUB>> ]
+"2255" [label = <(&lt;operator&gt;.addressOf,&amp;args)<SUB>758</SUB>> ]
+"2296" [label = <(NewObjectV,NewObjectV(env, java_class, mid, args))<SUB>761</SUB>> ]
+"2261" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>759</SUB>> ]
+"2279" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>760</SUB>> ]
+"2262" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>759</SUB>> ]
+"2266" [label = <(CHECK_NON_NULL_ARGUMENT(java_class),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class == null&quot;))<SUB>759</SUB>> ]
+"2273" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_class),CHECK_NON_NULL_ARGUMENT(java_class))<SUB>759</SUB>> ]
+"2280" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>760</SUB>> ]
+"2284" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>760</SUB>> ]
+"2291" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>760</SUB>> ]
+"2267" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>759</SUB>> ]
+"2285" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>760</SUB>> ]
+"2268" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>759</SUB>> ]
+"2270" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>759</SUB>> ]
+"2286" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>760</SUB>> ]
+"2288" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>760</SUB>> ]
+"2244" [label = <(METHOD,NewObject)<SUB>755</SUB>> ]
+"2303" [label = <(METHOD_RETURN,jobject)<SUB>755</SUB>> ]
+  "2250" -> "2255" 
+  "2254" -> "2257" 
+  "2257" -> "2262" 
+  "2257" -> "2275" 
+  "2275" -> "2280" 
+  "2275" -> "2296" 
+  "2294" -> "2301" 
+  "2301" -> "2303" 
+  "2255" -> "2254" 
+  "2296" -> "2294" 
+  "2261" -> "2268" 
+  "2261" -> "2275" 
+  "2279" -> "2286" 
+  "2279" -> "2296" 
+  "2262" -> "2261" 
+  "2266" -> "2273" 
+  "2273" -> "2303" 
+  "2280" -> "2279" 
+  "2284" -> "2291" 
+  "2291" -> "2303" 
+  "2267" -> "2266" 
+  "2285" -> "2284" 
+  "2268" -> "2270" 
+  "2270" -> "2267" 
+  "2286" -> "2288" 
+  "2288" -> "2285" 
+  "2244" -> "2250" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/520-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/520-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/520-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/520-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.sizeOf" {  
-"19384" [label = <(METHOD,&lt;operator&gt;.sizeOf)> ]
-"19387" [label = <(METHOD_RETURN,ANY)> ]
-  "19384" -> "19387" 
+digraph "NewPrimitiveArray&lt;jdoubleArray,mirror::DoubleArray&gt;" {  
+"19035" [label = <(METHOD,NewPrimitiveArray&lt;jdoubleArray,mirror::DoubleArray&gt;)> ]
+"19039" [label = <(METHOD_RETURN,ANY)> ]
+  "19035" -> "19039" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/521-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/521-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/521-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/521-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "CountUtf8Bytes" {  
-"19388" [label = <(METHOD,CountUtf8Bytes)> ]
-"19392" [label = <(METHOD_RETURN,ANY)> ]
-  "19388" -> "19392" 
+digraph "NewPrimitiveArray&lt;jfloatArray,mirror::FloatArray&gt;" {  
+"19040" [label = <(METHOD,NewPrimitiveArray&lt;jfloatArray,mirror::FloatArray&gt;)> ]
+"19044" [label = <(METHOD_RETURN,ANY)> ]
+  "19040" -> "19044" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/522-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/522-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/522-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/522-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "ConvertUtf16ToModifiedUtf8" {  
-"19393" [label = <(METHOD,ConvertUtf16ToModifiedUtf8)> ]
-"19399" [label = <(METHOD_RETURN,ANY)> ]
-  "19393" -> "19399" 
+digraph "NewPrimitiveArray&lt;jintArray,mirror::IntArray&gt;" {  
+"19045" [label = <(METHOD,NewPrimitiveArray&lt;jintArray,mirror::IntArray&gt;)> ]
+"19049" [label = <(METHOD_RETURN,ANY)> ]
+  "19045" -> "19049" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/523-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/523-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/523-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/523-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT(java_string)" {  
-"19400" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(java_string))> ]
-"19405" [label = <(METHOD_RETURN,ANY)> ]
-  "19400" -> "19405" 
+digraph "NewPrimitiveArray&lt;jlongArray,mirror::LongArray&gt;" {  
+"19050" [label = <(METHOD,NewPrimitiveArray&lt;jlongArray,mirror::LongArray&gt;)> ]
+"19054" [label = <(METHOD_RETURN,ANY)> ]
+  "19050" -> "19054" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/524-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/524-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/524-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/524-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "IsMovableObject" {  
-"19406" [label = <(METHOD,IsMovableObject)> ]
-"19410" [label = <(METHOD_RETURN,ANY)> ]
-  "19406" -> "19410" 
+digraph "CHECK_NON_NULL_ARGUMENT(element_jclass)" {  
+"19055" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(element_jclass))> ]
+"19060" [label = <(METHOD_RETURN,ANY)> ]
+  "19055" -> "19060" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/525-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/525-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/525-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/525-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.new" {  
-"19411" [label = <(METHOD,&lt;operator&gt;.new)> ]
-"19414" [label = <(METHOD_RETURN,ANY)> ]
-  "19411" -> "19414" 
+digraph "IsPrimitive" {  
+"19061" [label = <(METHOD,IsPrimitive)> ]
+"19064" [label = <(METHOD_RETURN,ANY)> ]
+  "19061" -> "19064" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/526-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/526-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/526-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/526-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.delete" {  
-"19415" [label = <(METHOD,&lt;operator&gt;.delete)> ]
-"19418" [label = <(METHOD_RETURN,ANY)> ]
-  "19415" -> "19418" 
+digraph "PrettyDescriptor" {  
+"19065" [label = <(METHOD,PrettyDescriptor)> ]
+"19068" [label = <(METHOD_RETURN,ANY)> ]
+  "19065" -> "19068" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/527-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/527-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/527-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/527-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "h" {  
-"19419" [label = <(METHOD,h)> ]
-"19422" [label = <(METHOD_RETURN,ANY)> ]
-  "19419" -> "19422" 
+digraph "FindArrayClass" {  
+"19069" [label = <(METHOD,FindArrayClass)> ]
+"19074" [label = <(METHOD_RETURN,ANY)> ]
+  "19069" -> "19074" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/528-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/528-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/528-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/528-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "NewHandleWrapper" {  
-"19423" [label = <(METHOD,NewHandleWrapper)> ]
-"19427" [label = <(METHOD_RETURN,ANY)> ]
-  "19423" -> "19427" 
+digraph "::Alloc" {  
+"19075" [label = <(METHOD,::Alloc)> ]
+"19081" [label = <(METHOD_RETURN,ANY)> ]
+  "19075" -> "19081" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/529-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/529-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/529-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/529-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "IncrementDisableMovingGC" {  
-"19428" [label = <(METHOD,IncrementDisableMovingGC)> ]
-"19432" [label = <(METHOD_RETURN,ANY)> ]
-  "19428" -> "19432" 
+digraph "GetComponentType" {  
+"19082" [label = <(METHOD,GetComponentType)> ]
+"19085" [label = <(METHOD_RETURN,ANY)> ]
+  "19082" -> "19085" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/53-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/53-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/53-cfg.dot	2023-06-07 19:35:01.377387172 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/53-cfg.dot	2023-06-07 19:35:07.947386525 +0330
@@ -1,43 +1,171 @@
-digraph "DeleteLocalRef" {  
-"2255" [label = <(soa,soa(env))<SUB>795</SUB>> ]
-"2258" [label = <(&lt;operator&gt;.assignment,* ext_env = down_cast&lt;JNIEnvExt*&gt;(env))<SUB>796</SUB>> ]
-"2249" [label = <(&lt;operator&gt;.equals,obj == nullptr)<SUB>789</SUB>> ]
-"2260" [label = <(down_cast&lt;JNIEnvExt*&gt;,down_cast&lt;JNIEnvExt*&gt;(env))<SUB>796</SUB>> ]
-"2263" [label = <(&lt;operator&gt;.logicalNot,!ext_env-&gt;locals_.Remove(ext_env-&gt;local_ref_cookie_, obj))<SUB>797</SUB>> ]
-"2253" [label = <(RETURN,return;,return;)<SUB>790</SUB>> ]
-"2264" [label = <(Remove,ext_env-&gt;locals_.Remove(ext_env-&gt;local_ref_cookie_, obj))<SUB>797</SUB>> ]
-"2275" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI WARNING: DeleteLocalRef(&quot; &lt;&lt; obj &lt;&lt; &quot;) &quot;\012 &lt;&lt; &quot;failed to find entry&quot;)<SUB>803</SUB>> ]
-"2265" [label = <(&lt;operator&gt;.fieldAccess,ext_env-&gt;locals_.Remove)<SUB>797</SUB>> ]
-"2270" [label = <(&lt;operator&gt;.indirectFieldAccess,ext_env-&gt;local_ref_cookie_)<SUB>797</SUB>> ]
-"2276" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI WARNING: DeleteLocalRef(&quot; &lt;&lt; obj &lt;&lt; &quot;) &quot;)<SUB>803</SUB>> ]
-"2266" [label = <(&lt;operator&gt;.indirectFieldAccess,ext_env-&gt;locals_)<SUB>797</SUB>> ]
-"2269" [label = <(FIELD_IDENTIFIER,Remove,Remove)<SUB>797</SUB>> ]
-"2272" [label = <(FIELD_IDENTIFIER,local_ref_cookie_,local_ref_cookie_)<SUB>797</SUB>> ]
-"2277" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI WARNING: DeleteLocalRef(&quot; &lt;&lt; obj)<SUB>803</SUB>> ]
-"2268" [label = <(FIELD_IDENTIFIER,locals_,locals_)<SUB>797</SUB>> ]
-"2278" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI WARNING: DeleteLocalRef(&quot;)<SUB>803</SUB>> ]
-"2279" [label = <(LOG,LOG(WARNING))<SUB>803</SUB>> ]
-"2244" [label = <(METHOD,DeleteLocalRef)<SUB>788</SUB>> ]
-"2285" [label = <(METHOD_RETURN,void)<SUB>788</SUB>> ]
-  "2255" -> "2260" 
-  "2258" -> "2268" 
-  "2249" -> "2253" 
-  "2249" -> "2255" 
-  "2260" -> "2258" 
-  "2263" -> "2285" 
-  "2263" -> "2279" 
-  "2253" -> "2285" 
-  "2264" -> "2263" 
-  "2275" -> "2285" 
-  "2265" -> "2272" 
-  "2270" -> "2264" 
-  "2276" -> "2275" 
-  "2266" -> "2269" 
-  "2269" -> "2265" 
-  "2272" -> "2270" 
-  "2277" -> "2276" 
-  "2268" -> "2266" 
-  "2278" -> "2277" 
-  "2279" -> "2278" 
-  "2244" -> "2249" 
+digraph "NewObjectV" {  
+"2311" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_class))<SUB>766</SUB>> ]
+"2329" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>767</SUB>> ]
+"2348" [label = <(soa,soa(env))<SUB>768</SUB>> ]
+"2350" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c = EnsureInitialized(soa.Self(),\012                                                soa.Decode&lt;mirror::Class&gt;(java_class)))<SUB>769</SUB>> ]
+"2411" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; result = c-&gt;AllocObject(soa.Self()))<SUB>780</SUB>> ]
+"2435" [label = <(&lt;operator&gt;.assignment,local_result = soa.AddLocalReference&lt;jobject&gt;(result))<SUB>784</SUB>> ]
+"2444" [label = <(CallNonvirtualVoidMethodV,CallNonvirtualVoidMethodV(env, local_result, java_class, mid, args))<SUB>785</SUB>> ]
+"2461" [label = <(RETURN,return local_result;,return local_result;)<SUB>789</SUB>> ]
+"2351" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c)<SUB>769</SUB>> ]
+"2358" [label = <(EnsureInitialized,EnsureInitialized(soa.Self(),\012                                                soa.Decode&lt;mirror::Class&gt;(java_class)))<SUB>769</SUB>> ]
+"2373" [label = <(&lt;operator&gt;.equals,c == nullptr)<SUB>771</SUB>> ]
+"2380" [label = <(IsStringClass,c-&gt;IsStringClass())<SUB>774</SUB>> ]
+"2412" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; result)<SUB>780</SUB>> ]
+"2419" [label = <(AllocObject,c-&gt;AllocObject(soa.Self()))<SUB>780</SUB>> ]
+"2428" [label = <(&lt;operator&gt;.equals,result == nullptr)<SUB>781</SUB>> ]
+"2437" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result))<SUB>784</SUB>> ]
+"2451" [label = <(IsExceptionPending,soa.Self()-&gt;IsExceptionPending())<SUB>786</SUB>> ]
+"2352" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>769</SUB>> ]
+"2359" [label = <(Self,soa.Self())<SUB>769</SUB>> ]
+"2363" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>770</SUB>> ]
+"2377" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>772</SUB>> ]
+"2381" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;IsStringClass)<SUB>774</SUB>> ]
+"2386" [label = <(&lt;operator&gt;.assignment,sf_mid = jni::EncodeArtMethod&lt;kEnableIndexIds&gt;(\012 WellKnownClasses::StringInitToStringFactory(jni::DecodeArtMethod(mid))))<SUB>776</SUB>> ]
+"2403" [label = <(RETURN,return CallStaticObjectMethodV(env, WellKnownClasses::java_lang_StringFactory, sf_mid, args);,return CallStaticObjectMethodV(env, WellKnownClasses::java_lang_StringFactory, sf_mid, args);)<SUB>778</SUB>> ]
+"2413" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>780</SUB>> ]
+"2420" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;AllocObject)<SUB>780</SUB>> ]
+"2423" [label = <(Self,soa.Self())<SUB>780</SUB>> ]
+"2432" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>782</SUB>> ]
+"2438" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>784</SUB>> ]
+"2452" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;IsExceptionPending)<SUB>786</SUB>> ]
+"2459" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>787</SUB>> ]
+"2315" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>766</SUB>> ]
+"2333" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>767</SUB>> ]
+"2354" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>769</SUB>> ]
+"2360" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>769</SUB>> ]
+"2364" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>770</SUB>> ]
+"2383" [label = <(FIELD_IDENTIFIER,IsStringClass,IsStringClass)<SUB>774</SUB>> ]
+"2388" [label = <(&lt;operator&gt;.greaterThan,jni::EncodeArtMethod&lt;kEnableIndexIds&gt;(\012 WellKnownClasses::StringInitToStringFactory(jni::DecodeArtMethod(mid))))<SUB>776</SUB>> ]
+"2404" [label = <(CallStaticObjectMethodV,CallStaticObjectMethodV(env, WellKnownClasses::java_lang_StringFactory, sf_mid, args))<SUB>778</SUB>> ]
+"2415" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>780</SUB>> ]
+"2422" [label = <(FIELD_IDENTIFIER,AllocObject,AllocObject)<SUB>780</SUB>> ]
+"2424" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>780</SUB>> ]
+"2439" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>784</SUB>> ]
+"2453" [label = <(Self,soa.Self())<SUB>786</SUB>> ]
+"2457" [label = <(FIELD_IDENTIFIER,IsExceptionPending,IsExceptionPending)<SUB>786</SUB>> ]
+"2316" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>766</SUB>> ]
+"2320" [label = <(CHECK_NON_NULL_ARGUMENT(java_class),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class == null&quot;))<SUB>766</SUB>> ]
+"2327" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_class),CHECK_NON_NULL_ARGUMENT(java_class))<SUB>766</SUB>> ]
+"2334" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>767</SUB>> ]
+"2338" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>767</SUB>> ]
+"2345" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>767</SUB>> ]
+"2356" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>769</SUB>> ]
+"2362" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>769</SUB>> ]
+"2365" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>770</SUB>> ]
+"2368" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>770</SUB>> ]
+"2389" [label = <(&lt;operator&gt;.lessThan,jni::EncodeArtMethod&lt;kEnableIndexIds)<SUB>776</SUB>> ]
+"2394" [label = <(WellKnownClasses::StringInitToStringFactory,WellKnownClasses::StringInitToStringFactory(jni::DecodeArtMethod(mid)))<SUB>777</SUB>> ]
+"2406" [label = <(&lt;operator&gt;.fieldAccess,WellKnownClasses::java_lang_StringFactory)<SUB>778</SUB>> ]
+"2417" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>780</SUB>> ]
+"2426" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>780</SUB>> ]
+"2441" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>784</SUB>> ]
+"2454" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>786</SUB>> ]
+"2321" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>766</SUB>> ]
+"2339" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>767</SUB>> ]
+"2367" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>770</SUB>> ]
+"2370" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>770</SUB>> ]
+"2390" [label = <(&lt;operator&gt;.fieldAccess,jni::EncodeArtMethod)<SUB>776</SUB>> ]
+"2395" [label = <(&lt;operator&gt;.fieldAccess,WellKnownClasses::StringInitToStringFactory)<SUB>777</SUB>> ]
+"2398" [label = <(jni::DecodeArtMethod,jni::DecodeArtMethod(mid))<SUB>777</SUB>> ]
+"2408" [label = <(FIELD_IDENTIFIER,java_lang_StringFactory,java_lang_StringFactory)<SUB>778</SUB>> ]
+"2456" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>786</SUB>> ]
+"2322" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>766</SUB>> ]
+"2324" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>766</SUB>> ]
+"2340" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>767</SUB>> ]
+"2342" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>767</SUB>> ]
+"2392" [label = <(FIELD_IDENTIFIER,EncodeArtMethod,EncodeArtMethod)<SUB>776</SUB>> ]
+"2397" [label = <(FIELD_IDENTIFIER,StringInitToStringFactory,StringInitToStringFactory)<SUB>777</SUB>> ]
+"2399" [label = <(&lt;operator&gt;.fieldAccess,jni::DecodeArtMethod)<SUB>777</SUB>> ]
+"2401" [label = <(FIELD_IDENTIFIER,DecodeArtMethod,DecodeArtMethod)<SUB>777</SUB>> ]
+"2305" [label = <(METHOD,NewObjectV)<SUB>765</SUB>> ]
+"2463" [label = <(METHOD_RETURN,jobject)<SUB>765</SUB>> ]
+  "2311" -> "2316" 
+  "2311" -> "2329" 
+  "2329" -> "2334" 
+  "2329" -> "2348" 
+  "2348" -> "2356" 
+  "2350" -> "2373" 
+  "2411" -> "2428" 
+  "2435" -> "2444" 
+  "2444" -> "2456" 
+  "2461" -> "2463" 
+  "2351" -> "2362" 
+  "2358" -> "2350" 
+  "2373" -> "2377" 
+  "2373" -> "2383" 
+  "2380" -> "2392" 
+  "2380" -> "2417" 
+  "2412" -> "2422" 
+  "2419" -> "2411" 
+  "2428" -> "2432" 
+  "2428" -> "2441" 
+  "2437" -> "2435" 
+  "2451" -> "2459" 
+  "2451" -> "2461" 
+  "2352" -> "2351" 
+  "2359" -> "2367" 
+  "2363" -> "2358" 
+  "2377" -> "2463" 
+  "2381" -> "2380" 
+  "2386" -> "2408" 
+  "2403" -> "2463" 
+  "2413" -> "2412" 
+  "2420" -> "2426" 
+  "2423" -> "2419" 
+  "2432" -> "2463" 
+  "2438" -> "2437" 
+  "2452" -> "2451" 
+  "2459" -> "2463" 
+  "2315" -> "2322" 
+  "2315" -> "2329" 
+  "2333" -> "2340" 
+  "2333" -> "2348" 
+  "2354" -> "2352" 
+  "2360" -> "2359" 
+  "2364" -> "2363" 
+  "2383" -> "2381" 
+  "2388" -> "2386" 
+  "2404" -> "2403" 
+  "2415" -> "2413" 
+  "2422" -> "2420" 
+  "2424" -> "2423" 
+  "2439" -> "2438" 
+  "2453" -> "2457" 
+  "2457" -> "2452" 
+  "2316" -> "2315" 
+  "2320" -> "2327" 
+  "2327" -> "2463" 
+  "2334" -> "2333" 
+  "2338" -> "2345" 
+  "2345" -> "2463" 
+  "2356" -> "2354" 
+  "2362" -> "2360" 
+  "2365" -> "2370" 
+  "2368" -> "2364" 
+  "2389" -> "2397" 
+  "2394" -> "2388" 
+  "2406" -> "2404" 
+  "2417" -> "2415" 
+  "2426" -> "2424" 
+  "2441" -> "2439" 
+  "2454" -> "2453" 
+  "2321" -> "2320" 
+  "2339" -> "2338" 
+  "2367" -> "2365" 
+  "2370" -> "2368" 
+  "2390" -> "2389" 
+  "2395" -> "2401" 
+  "2398" -> "2394" 
+  "2408" -> "2406" 
+  "2456" -> "2454" 
+  "2322" -> "2324" 
+  "2324" -> "2321" 
+  "2340" -> "2342" 
+  "2342" -> "2339" 
+  "2392" -> "2390" 
+  "2397" -> "2395" 
+  "2399" -> "2398" 
+  "2401" -> "2399" 
+  "2305" -> "2311" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/530-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/530-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/530-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/530-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "IncrementDisableThreadFlip" {  
-"19433" [label = <(METHOD,IncrementDisableThreadFlip)> ]
-"19437" [label = <(METHOD_RETURN,ANY)> ]
-  "19433" -> "19437" 
+digraph "mirror::Class::PrettyDescriptor" {  
+"19086" [label = <(METHOD,mirror::Class::PrettyDescriptor)> ]
+"19090" [label = <(METHOD_RETURN,ANY)> ]
+  "19086" -> "19090" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/531-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/531-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/531-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/531-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "DecrementDisableMovingGC" {  
-"19438" [label = <(METHOD,DecrementDisableMovingGC)> ]
-"19442" [label = <(METHOD_RETURN,ANY)> ]
-  "19438" -> "19442" 
+digraph "NewPrimitiveArray&lt;jshortArray,mirror::ShortArray&gt;" {  
+"19091" [label = <(METHOD,NewPrimitiveArray&lt;jshortArray,mirror::ShortArray&gt;)> ]
+"19095" [label = <(METHOD_RETURN,ANY)> ]
+  "19091" -> "19095" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/532-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/532-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/532-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/532-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "DecrementDisableThreadFlip" {  
-"19443" [label = <(METHOD,DecrementDisableThreadFlip)> ]
-"19447" [label = <(METHOD_RETURN,ANY)> ]
-  "19443" -> "19447" 
+digraph "IsPrimitiveArray" {  
+"19096" [label = <(METHOD,IsPrimitiveArray)> ]
+"19099" [label = <(METHOD_RETURN,ANY)> ]
+  "19096" -> "19099" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/533-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/533-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/533-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/533-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK" {  
-"19448" [label = <(METHOD,CHECK)> ]
-"19451" [label = <(METHOD_RETURN,ANY)> ]
-  "19448" -> "19451" 
+digraph "GetRawData" {  
+"19100" [label = <(METHOD,GetRawData)> ]
+"19105" [label = <(METHOD_RETURN,ANY)> ]
+  "19100" -> "19105" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/534-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/534-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/534-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/534-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_array)" {  
-"19452" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_array))> ]
-"19457" [label = <(METHOD_RETURN,ANY)> ]
-  "19452" -> "19457" 
+digraph "GetComponentSize" {  
+"19106" [label = <(METHOD,GetComponentSize)> ]
+"19109" [label = <(METHOD_RETURN,ANY)> ]
+  "19106" -> "19109" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/535-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/535-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/535-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/535-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "IsArrayInstance" {  
-"19458" [label = <(METHOD,IsArrayInstance)> ]
-"19461" [label = <(METHOD_RETURN,ANY)> ]
-  "19458" -> "19461" 
+digraph "GetPrimitiveArray&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;" {  
+"19110" [label = <(METHOD,GetPrimitiveArray&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;)> ]
+"19115" [label = <(METHOD_RETURN,ANY)> ]
+  "19110" -> "19115" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/536-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/536-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/536-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/536-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "PrettyTypeOf" {  
-"19462" [label = <(METHOD,PrettyTypeOf)> ]
-"19465" [label = <(METHOD_RETURN,ANY)> ]
-  "19462" -> "19465" 
+digraph "GetPrimitiveArray&lt;jbyteArray,jbyte,mirror::ByteArray&gt;" {  
+"19116" [label = <(METHOD,GetPrimitiveArray&lt;jbyteArray,jbyte,mirror::ByteArray&gt;)> ]
+"19121" [label = <(METHOD_RETURN,ANY)> ]
+  "19116" -> "19121" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/537-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/537-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/537-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/537-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "AsArray" {  
-"19466" [label = <(METHOD,AsArray)> ]
-"19469" [label = <(METHOD_RETURN,ANY)> ]
-  "19466" -> "19469" 
+digraph "GetPrimitiveArray&lt;jcharArray,jchar,mirror::CharArray&gt;" {  
+"19122" [label = <(METHOD,GetPrimitiveArray&lt;jcharArray,jchar,mirror::CharArray&gt;)> ]
+"19127" [label = <(METHOD_RETURN,ANY)> ]
+  "19122" -> "19127" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/538-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/538-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/538-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/538-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT(java_array)" {  
-"19470" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(java_array))> ]
-"19475" [label = <(METHOD_RETURN,ANY)> ]
-  "19470" -> "19475" 
+digraph "GetPrimitiveArray&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;" {  
+"19128" [label = <(METHOD,GetPrimitiveArray&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;)> ]
+"19133" [label = <(METHOD_RETURN,ANY)> ]
+  "19128" -> "19133" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/539-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/539-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/539-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/539-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.arithmeticShiftRight" {  
-"19476" [label = <(METHOD,&lt;operator&gt;.arithmeticShiftRight)> ]
-"19480" [label = <(METHOD_RETURN,ANY)> ]
-  "19476" -> "19480" 
+digraph "GetPrimitiveArray&lt;jfloatArray,jfloat,mirror::FloatArray&gt;" {  
+"19134" [label = <(METHOD,GetPrimitiveArray&lt;jfloatArray,jfloat,mirror::FloatArray&gt;)> ]
+"19139" [label = <(METHOD_RETURN,ANY)> ]
+  "19134" -> "19139" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/54-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/54-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/54-cfg.dot	2023-06-07 19:35:01.377387172 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/54-cfg.dot	2023-06-07 19:35:07.947386525 +0330
@@ -1,42 +1,171 @@
-digraph "IsSameObject" {  
-"2293" [label = <(&lt;operator&gt;.equals,obj1 == obj2)<SUB>809</SUB>> ]
-"2297" [label = <(RETURN,return JNI_TRUE;,return JNI_TRUE;)<SUB>810</SUB>> ]
-"2302" [label = <(soa,soa(env))<SUB>812</SUB>> ]
-"2304" [label = <(RETURN,return (soa.Decode&lt;mirror::Object&gt;(obj1) == soa.Decode&lt;mirror::Object&gt;(obj2))\012 ? JNI_TRUE : JNI_FALSE;,return (soa.Decode&lt;mirror::Object&gt;(obj1) == soa.Decode&lt;mirror::Object&gt;(obj2))\012 ? JNI_TRUE : JNI_FALSE;)<SUB>813</SUB>> ]
-"2305" [label = <(&lt;operator&gt;.conditional,(soa.Decode&lt;mirror::Object&gt;(obj1) == soa.Decode&lt;mirror::Object&gt;(obj2))\012 ? JNI_TRUE : JNI_FALSE)<SUB>813</SUB>> ]
-"2306" [label = <(&lt;operator&gt;.equals,soa.Decode&lt;mirror::Object&gt;(obj1) == soa.Decode&lt;mirror::Object&gt;(obj2))<SUB>813</SUB>> ]
-"2307" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(obj1))<SUB>813</SUB>> ]
-"2316" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(obj2))<SUB>813</SUB>> ]
-"2308" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>813</SUB>> ]
-"2317" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>813</SUB>> ]
-"2309" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>813</SUB>> ]
-"2312" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>813</SUB>> ]
-"2318" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>813</SUB>> ]
-"2321" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>813</SUB>> ]
-"2311" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>813</SUB>> ]
-"2314" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>813</SUB>> ]
-"2320" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>813</SUB>> ]
-"2323" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>813</SUB>> ]
-"2287" [label = <(METHOD,IsSameObject)<SUB>808</SUB>> ]
-"2327" [label = <(METHOD_RETURN,jboolean)<SUB>808</SUB>> ]
-  "2293" -> "2297" 
-  "2293" -> "2302" 
-  "2297" -> "2327" 
-  "2302" -> "2311" 
-  "2304" -> "2327" 
-  "2305" -> "2304" 
-  "2306" -> "2305" 
-  "2307" -> "2320" 
-  "2316" -> "2306" 
-  "2308" -> "2307" 
-  "2317" -> "2316" 
-  "2309" -> "2314" 
-  "2312" -> "2308" 
-  "2318" -> "2323" 
-  "2321" -> "2317" 
-  "2311" -> "2309" 
-  "2314" -> "2312" 
-  "2320" -> "2318" 
-  "2323" -> "2321" 
-  "2287" -> "2293" 
+digraph "NewObjectA" {  
+"2471" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_class))<SUB>793</SUB>> ]
+"2489" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>794</SUB>> ]
+"2508" [label = <(soa,soa(env))<SUB>795</SUB>> ]
+"2510" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c = EnsureInitialized(soa.Self(),\012                                                soa.Decode&lt;mirror::Class&gt;(java_class)))<SUB>796</SUB>> ]
+"2571" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; result = c-&gt;AllocObject(soa.Self()))<SUB>807</SUB>> ]
+"2595" [label = <(&lt;operator&gt;.assignment,local_result = soa.AddLocalReference&lt;jobjectArray&gt;(result))<SUB>811</SUB>> ]
+"2604" [label = <(CallNonvirtualVoidMethodA,CallNonvirtualVoidMethodA(env, local_result, java_class, mid, args))<SUB>812</SUB>> ]
+"2621" [label = <(RETURN,return local_result;,return local_result;)<SUB>816</SUB>> ]
+"2511" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c)<SUB>796</SUB>> ]
+"2518" [label = <(EnsureInitialized,EnsureInitialized(soa.Self(),\012                                                soa.Decode&lt;mirror::Class&gt;(java_class)))<SUB>796</SUB>> ]
+"2533" [label = <(&lt;operator&gt;.equals,c == nullptr)<SUB>798</SUB>> ]
+"2540" [label = <(IsStringClass,c-&gt;IsStringClass())<SUB>801</SUB>> ]
+"2572" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; result)<SUB>807</SUB>> ]
+"2579" [label = <(AllocObject,c-&gt;AllocObject(soa.Self()))<SUB>807</SUB>> ]
+"2588" [label = <(&lt;operator&gt;.equals,result == nullptr)<SUB>808</SUB>> ]
+"2597" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobjectArray&gt;(result))<SUB>811</SUB>> ]
+"2611" [label = <(IsExceptionPending,soa.Self()-&gt;IsExceptionPending())<SUB>813</SUB>> ]
+"2512" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>796</SUB>> ]
+"2519" [label = <(Self,soa.Self())<SUB>796</SUB>> ]
+"2523" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>797</SUB>> ]
+"2537" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>799</SUB>> ]
+"2541" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;IsStringClass)<SUB>801</SUB>> ]
+"2546" [label = <(&lt;operator&gt;.assignment,sf_mid = jni::EncodeArtMethod&lt;kEnableIndexIds&gt;(\012 WellKnownClasses::StringInitToStringFactory(jni::DecodeArtMethod(mid))))<SUB>803</SUB>> ]
+"2563" [label = <(RETURN,return CallStaticObjectMethodA(env, WellKnownClasses::java_lang_StringFactory, sf_mid, args);,return CallStaticObjectMethodA(env, WellKnownClasses::java_lang_StringFactory, sf_mid, args);)<SUB>805</SUB>> ]
+"2573" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>807</SUB>> ]
+"2580" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;AllocObject)<SUB>807</SUB>> ]
+"2583" [label = <(Self,soa.Self())<SUB>807</SUB>> ]
+"2592" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>809</SUB>> ]
+"2598" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobjectArray)<SUB>811</SUB>> ]
+"2612" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;IsExceptionPending)<SUB>813</SUB>> ]
+"2619" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>814</SUB>> ]
+"2475" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>793</SUB>> ]
+"2493" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>794</SUB>> ]
+"2514" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>796</SUB>> ]
+"2520" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>796</SUB>> ]
+"2524" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>797</SUB>> ]
+"2543" [label = <(FIELD_IDENTIFIER,IsStringClass,IsStringClass)<SUB>801</SUB>> ]
+"2548" [label = <(&lt;operator&gt;.greaterThan,jni::EncodeArtMethod&lt;kEnableIndexIds&gt;(\012 WellKnownClasses::StringInitToStringFactory(jni::DecodeArtMethod(mid))))<SUB>803</SUB>> ]
+"2564" [label = <(CallStaticObjectMethodA,CallStaticObjectMethodA(env, WellKnownClasses::java_lang_StringFactory, sf_mid, args))<SUB>805</SUB>> ]
+"2575" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>807</SUB>> ]
+"2582" [label = <(FIELD_IDENTIFIER,AllocObject,AllocObject)<SUB>807</SUB>> ]
+"2584" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>807</SUB>> ]
+"2599" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>811</SUB>> ]
+"2613" [label = <(Self,soa.Self())<SUB>813</SUB>> ]
+"2617" [label = <(FIELD_IDENTIFIER,IsExceptionPending,IsExceptionPending)<SUB>813</SUB>> ]
+"2476" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>793</SUB>> ]
+"2480" [label = <(CHECK_NON_NULL_ARGUMENT(java_class),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class == null&quot;))<SUB>793</SUB>> ]
+"2487" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_class),CHECK_NON_NULL_ARGUMENT(java_class))<SUB>793</SUB>> ]
+"2494" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>794</SUB>> ]
+"2498" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>794</SUB>> ]
+"2505" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>794</SUB>> ]
+"2516" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>796</SUB>> ]
+"2522" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>796</SUB>> ]
+"2525" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>797</SUB>> ]
+"2528" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>797</SUB>> ]
+"2549" [label = <(&lt;operator&gt;.lessThan,jni::EncodeArtMethod&lt;kEnableIndexIds)<SUB>803</SUB>> ]
+"2554" [label = <(WellKnownClasses::StringInitToStringFactory,WellKnownClasses::StringInitToStringFactory(jni::DecodeArtMethod(mid)))<SUB>804</SUB>> ]
+"2566" [label = <(&lt;operator&gt;.fieldAccess,WellKnownClasses::java_lang_StringFactory)<SUB>805</SUB>> ]
+"2577" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>807</SUB>> ]
+"2586" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>807</SUB>> ]
+"2601" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>811</SUB>> ]
+"2614" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>813</SUB>> ]
+"2481" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>793</SUB>> ]
+"2499" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>794</SUB>> ]
+"2527" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>797</SUB>> ]
+"2530" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>797</SUB>> ]
+"2550" [label = <(&lt;operator&gt;.fieldAccess,jni::EncodeArtMethod)<SUB>803</SUB>> ]
+"2555" [label = <(&lt;operator&gt;.fieldAccess,WellKnownClasses::StringInitToStringFactory)<SUB>804</SUB>> ]
+"2558" [label = <(jni::DecodeArtMethod,jni::DecodeArtMethod(mid))<SUB>804</SUB>> ]
+"2568" [label = <(FIELD_IDENTIFIER,java_lang_StringFactory,java_lang_StringFactory)<SUB>805</SUB>> ]
+"2616" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>813</SUB>> ]
+"2482" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>793</SUB>> ]
+"2484" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>793</SUB>> ]
+"2500" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>794</SUB>> ]
+"2502" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>794</SUB>> ]
+"2552" [label = <(FIELD_IDENTIFIER,EncodeArtMethod,EncodeArtMethod)<SUB>803</SUB>> ]
+"2557" [label = <(FIELD_IDENTIFIER,StringInitToStringFactory,StringInitToStringFactory)<SUB>804</SUB>> ]
+"2559" [label = <(&lt;operator&gt;.fieldAccess,jni::DecodeArtMethod)<SUB>804</SUB>> ]
+"2561" [label = <(FIELD_IDENTIFIER,DecodeArtMethod,DecodeArtMethod)<SUB>804</SUB>> ]
+"2465" [label = <(METHOD,NewObjectA)<SUB>792</SUB>> ]
+"2623" [label = <(METHOD_RETURN,jobject)<SUB>792</SUB>> ]
+  "2471" -> "2476" 
+  "2471" -> "2489" 
+  "2489" -> "2494" 
+  "2489" -> "2508" 
+  "2508" -> "2516" 
+  "2510" -> "2533" 
+  "2571" -> "2588" 
+  "2595" -> "2604" 
+  "2604" -> "2616" 
+  "2621" -> "2623" 
+  "2511" -> "2522" 
+  "2518" -> "2510" 
+  "2533" -> "2537" 
+  "2533" -> "2543" 
+  "2540" -> "2552" 
+  "2540" -> "2577" 
+  "2572" -> "2582" 
+  "2579" -> "2571" 
+  "2588" -> "2592" 
+  "2588" -> "2601" 
+  "2597" -> "2595" 
+  "2611" -> "2619" 
+  "2611" -> "2621" 
+  "2512" -> "2511" 
+  "2519" -> "2527" 
+  "2523" -> "2518" 
+  "2537" -> "2623" 
+  "2541" -> "2540" 
+  "2546" -> "2568" 
+  "2563" -> "2623" 
+  "2573" -> "2572" 
+  "2580" -> "2586" 
+  "2583" -> "2579" 
+  "2592" -> "2623" 
+  "2598" -> "2597" 
+  "2612" -> "2611" 
+  "2619" -> "2623" 
+  "2475" -> "2482" 
+  "2475" -> "2489" 
+  "2493" -> "2500" 
+  "2493" -> "2508" 
+  "2514" -> "2512" 
+  "2520" -> "2519" 
+  "2524" -> "2523" 
+  "2543" -> "2541" 
+  "2548" -> "2546" 
+  "2564" -> "2563" 
+  "2575" -> "2573" 
+  "2582" -> "2580" 
+  "2584" -> "2583" 
+  "2599" -> "2598" 
+  "2613" -> "2617" 
+  "2617" -> "2612" 
+  "2476" -> "2475" 
+  "2480" -> "2487" 
+  "2487" -> "2623" 
+  "2494" -> "2493" 
+  "2498" -> "2505" 
+  "2505" -> "2623" 
+  "2516" -> "2514" 
+  "2522" -> "2520" 
+  "2525" -> "2530" 
+  "2528" -> "2524" 
+  "2549" -> "2557" 
+  "2554" -> "2548" 
+  "2566" -> "2564" 
+  "2577" -> "2575" 
+  "2586" -> "2584" 
+  "2601" -> "2599" 
+  "2614" -> "2613" 
+  "2481" -> "2480" 
+  "2499" -> "2498" 
+  "2527" -> "2525" 
+  "2530" -> "2528" 
+  "2550" -> "2549" 
+  "2555" -> "2561" 
+  "2558" -> "2554" 
+  "2568" -> "2566" 
+  "2616" -> "2614" 
+  "2482" -> "2484" 
+  "2484" -> "2481" 
+  "2500" -> "2502" 
+  "2502" -> "2499" 
+  "2552" -> "2550" 
+  "2557" -> "2555" 
+  "2559" -> "2558" 
+  "2561" -> "2559" 
+  "2465" -> "2471" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/540-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/540-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/540-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/540-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array)" {  
-"19481" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))> ]
-"19486" [label = <(METHOD_RETURN,ANY)> ]
-  "19481" -> "19486" 
+digraph "GetPrimitiveArray&lt;jintArray,jint,mirror::IntArray&gt;" {  
+"19140" [label = <(METHOD,GetPrimitiveArray&lt;jintArray,jint,mirror::IntArray&gt;)> ]
+"19145" [label = <(METHOD_RETURN,ANY)> ]
+  "19140" -> "19145" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/541-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/541-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/541-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/541-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "NewPrimitiveArray&lt;jbooleanArray,mirror::BooleanArray&gt;" {  
-"19487" [label = <(METHOD,NewPrimitiveArray&lt;jbooleanArray,mirror::BooleanArray&gt;)> ]
-"19491" [label = <(METHOD_RETURN,ANY)> ]
-  "19487" -> "19491" 
+digraph "GetPrimitiveArray&lt;jlongArray,jlong,mirror::LongArray&gt;" {  
+"19146" [label = <(METHOD,GetPrimitiveArray&lt;jlongArray,jlong,mirror::LongArray&gt;)> ]
+"19151" [label = <(METHOD_RETURN,ANY)> ]
+  "19146" -> "19151" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/542-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/542-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/542-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/542-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "NewPrimitiveArray&lt;jbyteArray,mirror::ByteArray&gt;" {  
-"19492" [label = <(METHOD,NewPrimitiveArray&lt;jbyteArray,mirror::ByteArray&gt;)> ]
-"19496" [label = <(METHOD_RETURN,ANY)> ]
-  "19492" -> "19496" 
+digraph "GetPrimitiveArray&lt;jshortArray,jshort,mirror::ShortArray&gt;" {  
+"19152" [label = <(METHOD,GetPrimitiveArray&lt;jshortArray,jshort,mirror::ShortArray&gt;)> ]
+"19157" [label = <(METHOD_RETURN,ANY)> ]
+  "19152" -> "19157" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/543-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/543-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/543-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/543-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "NewPrimitiveArray&lt;jcharArray,mirror::CharArray&gt;" {  
-"19497" [label = <(METHOD,NewPrimitiveArray&lt;jcharArray,mirror::CharArray&gt;)> ]
-"19501" [label = <(METHOD_RETURN,ANY)> ]
-  "19497" -> "19501" 
+digraph "ReleasePrimitiveArray&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;" {  
+"19158" [label = <(METHOD,ReleasePrimitiveArray&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;)> ]
+"19164" [label = <(METHOD_RETURN,ANY)> ]
+  "19158" -> "19164" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/544-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/544-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/544-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/544-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "NewPrimitiveArray&lt;jdoubleArray,mirror::DoubleArray&gt;" {  
-"19502" [label = <(METHOD,NewPrimitiveArray&lt;jdoubleArray,mirror::DoubleArray&gt;)> ]
-"19506" [label = <(METHOD_RETURN,ANY)> ]
-  "19502" -> "19506" 
+digraph "ReleasePrimitiveArray&lt;jbyteArray,jbyte,mirror::ByteArray&gt;" {  
+"19165" [label = <(METHOD,ReleasePrimitiveArray&lt;jbyteArray,jbyte,mirror::ByteArray&gt;)> ]
+"19171" [label = <(METHOD_RETURN,ANY)> ]
+  "19165" -> "19171" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/545-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/545-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/545-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/545-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "NewPrimitiveArray&lt;jfloatArray,mirror::FloatArray&gt;" {  
-"19507" [label = <(METHOD,NewPrimitiveArray&lt;jfloatArray,mirror::FloatArray&gt;)> ]
-"19511" [label = <(METHOD_RETURN,ANY)> ]
-  "19507" -> "19511" 
+digraph "ReleasePrimitiveArray&lt;jcharArray,jchar,mirror::CharArray&gt;" {  
+"19172" [label = <(METHOD,ReleasePrimitiveArray&lt;jcharArray,jchar,mirror::CharArray&gt;)> ]
+"19178" [label = <(METHOD_RETURN,ANY)> ]
+  "19172" -> "19178" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/546-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/546-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/546-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/546-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "NewPrimitiveArray&lt;jintArray,mirror::IntArray&gt;" {  
-"19512" [label = <(METHOD,NewPrimitiveArray&lt;jintArray,mirror::IntArray&gt;)> ]
-"19516" [label = <(METHOD_RETURN,ANY)> ]
-  "19512" -> "19516" 
+digraph "ReleasePrimitiveArray&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;" {  
+"19179" [label = <(METHOD,ReleasePrimitiveArray&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;)> ]
+"19185" [label = <(METHOD_RETURN,ANY)> ]
+  "19179" -> "19185" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/547-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/547-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/547-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/547-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "NewPrimitiveArray&lt;jlongArray,mirror::LongArray&gt;" {  
-"19517" [label = <(METHOD,NewPrimitiveArray&lt;jlongArray,mirror::LongArray&gt;)> ]
-"19521" [label = <(METHOD_RETURN,ANY)> ]
-  "19517" -> "19521" 
+digraph "ReleasePrimitiveArray&lt;jfloatArray,jfloat,mirror::FloatArray&gt;" {  
+"19186" [label = <(METHOD,ReleasePrimitiveArray&lt;jfloatArray,jfloat,mirror::FloatArray&gt;)> ]
+"19192" [label = <(METHOD_RETURN,ANY)> ]
+  "19186" -> "19192" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/548-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/548-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/548-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/548-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT(element_jclass)" {  
-"19522" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(element_jclass))> ]
-"19527" [label = <(METHOD_RETURN,ANY)> ]
-  "19522" -> "19527" 
+digraph "ReleasePrimitiveArray&lt;jintArray,jint,mirror::IntArray&gt;" {  
+"19193" [label = <(METHOD,ReleasePrimitiveArray&lt;jintArray,jint,mirror::IntArray&gt;)> ]
+"19199" [label = <(METHOD_RETURN,ANY)> ]
+  "19193" -> "19199" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/549-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/549-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/549-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/549-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "IsPrimitive" {  
-"19528" [label = <(METHOD,IsPrimitive)> ]
-"19531" [label = <(METHOD_RETURN,ANY)> ]
-  "19528" -> "19531" 
+digraph "ReleasePrimitiveArray&lt;jlongArray,jlong,mirror::LongArray&gt;" {  
+"19200" [label = <(METHOD,ReleasePrimitiveArray&lt;jlongArray,jlong,mirror::LongArray&gt;)> ]
+"19206" [label = <(METHOD_RETURN,ANY)> ]
+  "19200" -> "19206" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/55-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/55-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/55-cfg.dot	2023-06-07 19:35:01.387387174 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/55-cfg.dot	2023-06-07 19:35:07.947386525 +0330
@@ -1,133 +1,71 @@
-digraph "AllocObject" {  
-"2333" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_class))<SUB>819</SUB>> ]
-"2352" [label = <(soa,soa(env))<SUB>820</SUB>> ]
-"2354" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c = EnsureInitialized(soa.Self(), soa.Decode&lt;mirror::Class&gt;(java_class)))<SUB>821</SUB>> ]
-"2420" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(c-&gt;AllocObject(soa.Self()));,return soa.AddLocalReference&lt;jobject&gt;(c-&gt;AllocObject(soa.Self()));)<SUB>830</SUB>> ]
-"2355" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c)<SUB>821</SUB>> ]
-"2362" [label = <(EnsureInitialized,EnsureInitialized(soa.Self(), soa.Decode&lt;mirror::Class&gt;(java_class)))<SUB>821</SUB>> ]
-"2377" [label = <(&lt;operator&gt;.equals,c == nullptr)<SUB>822</SUB>> ]
-"2384" [label = <(IsStringClass,c-&gt;IsStringClass())<SUB>825</SUB>> ]
-"2421" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(c-&gt;AllocObject(soa.Self())))<SUB>830</SUB>> ]
-"2356" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>821</SUB>> ]
-"2363" [label = <(Self,soa.Self())<SUB>821</SUB>> ]
-"2367" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>821</SUB>> ]
-"2381" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>823</SUB>> ]
-"2385" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;IsStringClass)<SUB>825</SUB>> ]
-"2390" [label = <(&lt;operator&gt;.assignment,allocator_type = Runtime::Current()-&gt;GetHeap()-&gt;GetCurrentAllocator())<SUB>826</SUB>> ]
-"2402" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(\012          mirror::String::AllocEmptyString(soa.Self(), allocator_type));,return soa.AddLocalReference&lt;jobject&gt;(\012          mirror::String::AllocEmptyString(soa.Self(), allocator_type));)<SUB>827</SUB>> ]
-"2422" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>830</SUB>> ]
-"2427" [label = <(AllocObject,c-&gt;AllocObject(soa.Self()))<SUB>830</SUB>> ]
-"2337" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>819</SUB>> ]
-"2358" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>821</SUB>> ]
-"2364" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>821</SUB>> ]
-"2368" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>821</SUB>> ]
-"2387" [label = <(FIELD_IDENTIFIER,IsStringClass,IsStringClass)<SUB>825</SUB>> ]
-"2392" [label = <(GetCurrentAllocator,Runtime::Current()-&gt;GetHeap()-&gt;GetCurrentAllocator())<SUB>826</SUB>> ]
-"2403" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(\012          mirror::String::AllocEmptyString(soa.Self(), allocator_type)))<SUB>827</SUB>> ]
-"2423" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>830</SUB>> ]
-"2428" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;AllocObject)<SUB>830</SUB>> ]
-"2431" [label = <(Self,soa.Self())<SUB>830</SUB>> ]
-"2338" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>819</SUB>> ]
-"2342" [label = <(CHECK_NON_NULL_ARGUMENT(java_class),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class == null&quot;))<SUB>819</SUB>> ]
-"2349" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_class),CHECK_NON_NULL_ARGUMENT(java_class))<SUB>819</SUB>> ]
-"2360" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>821</SUB>> ]
-"2366" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>821</SUB>> ]
-"2369" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>821</SUB>> ]
-"2372" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>821</SUB>> ]
-"2393" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetHeap()-&gt;GetCurrentAllocator)<SUB>826</SUB>> ]
-"2404" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>827</SUB>> ]
-"2409" [label = <(mirror::String::AllocEmptyString,mirror::String::AllocEmptyString(soa.Self(), allocator_type))<SUB>828</SUB>> ]
-"2425" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>830</SUB>> ]
-"2430" [label = <(FIELD_IDENTIFIER,AllocObject,AllocObject)<SUB>830</SUB>> ]
-"2432" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>830</SUB>> ]
-"2343" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>819</SUB>> ]
-"2371" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>821</SUB>> ]
-"2374" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>821</SUB>> ]
-"2394" [label = <(GetHeap,Runtime::Current()-&gt;GetHeap())<SUB>826</SUB>> ]
-"2401" [label = <(FIELD_IDENTIFIER,GetCurrentAllocator,GetCurrentAllocator)<SUB>826</SUB>> ]
-"2405" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>827</SUB>> ]
-"2410" [label = <(&lt;operator&gt;.fieldAccess,mirror::String::AllocEmptyString)<SUB>828</SUB>> ]
-"2415" [label = <(Self,soa.Self())<SUB>828</SUB>> ]
-"2434" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>830</SUB>> ]
-"2344" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>819</SUB>> ]
-"2346" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>819</SUB>> ]
-"2395" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetHeap)<SUB>826</SUB>> ]
-"2407" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>827</SUB>> ]
-"2411" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>828</SUB>> ]
-"2414" [label = <(FIELD_IDENTIFIER,AllocEmptyString,AllocEmptyString)<SUB>828</SUB>> ]
-"2416" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>828</SUB>> ]
-"2396" [label = <(Runtime::Current,Runtime::Current())<SUB>826</SUB>> ]
-"2400" [label = <(FIELD_IDENTIFIER,GetHeap,GetHeap)<SUB>826</SUB>> ]
-"2418" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>828</SUB>> ]
-"2397" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>826</SUB>> ]
-"2399" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>826</SUB>> ]
-"2329" [label = <(METHOD,AllocObject)<SUB>818</SUB>> ]
-"2435" [label = <(METHOD_RETURN,jobject)<SUB>818</SUB>> ]
-  "2333" -> "2338" 
-  "2333" -> "2352" 
-  "2352" -> "2360" 
-  "2354" -> "2377" 
-  "2420" -> "2435" 
-  "2355" -> "2366" 
-  "2362" -> "2354" 
-  "2377" -> "2381" 
-  "2377" -> "2387" 
-  "2384" -> "2399" 
-  "2384" -> "2425" 
-  "2421" -> "2420" 
-  "2356" -> "2355" 
-  "2363" -> "2371" 
-  "2367" -> "2362" 
-  "2381" -> "2435" 
-  "2385" -> "2384" 
-  "2390" -> "2407" 
-  "2402" -> "2435" 
-  "2422" -> "2430" 
-  "2427" -> "2421" 
-  "2337" -> "2344" 
-  "2337" -> "2352" 
-  "2358" -> "2356" 
-  "2364" -> "2363" 
-  "2368" -> "2367" 
-  "2387" -> "2385" 
-  "2392" -> "2390" 
-  "2403" -> "2402" 
-  "2423" -> "2422" 
-  "2428" -> "2434" 
-  "2431" -> "2427" 
-  "2338" -> "2337" 
-  "2342" -> "2349" 
-  "2349" -> "2435" 
-  "2360" -> "2358" 
-  "2366" -> "2364" 
-  "2369" -> "2374" 
-  "2372" -> "2368" 
-  "2393" -> "2392" 
-  "2404" -> "2411" 
-  "2409" -> "2403" 
-  "2425" -> "2423" 
-  "2430" -> "2428" 
-  "2432" -> "2431" 
-  "2343" -> "2342" 
-  "2371" -> "2369" 
-  "2374" -> "2372" 
-  "2394" -> "2401" 
-  "2401" -> "2393" 
-  "2405" -> "2404" 
-  "2410" -> "2418" 
-  "2415" -> "2409" 
-  "2434" -> "2432" 
-  "2344" -> "2346" 
-  "2346" -> "2343" 
-  "2395" -> "2394" 
-  "2407" -> "2405" 
-  "2411" -> "2414" 
-  "2414" -> "2410" 
-  "2416" -> "2415" 
-  "2396" -> "2400" 
-  "2400" -> "2395" 
-  "2418" -> "2416" 
-  "2397" -> "2396" 
-  "2399" -> "2397" 
-  "2329" -> "2333" 
+digraph "GetMethodID" {  
+"2631" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_class))<SUB>820</SUB>> ]
+"2649" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(name))<SUB>821</SUB>> ]
+"2667" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(sig))<SUB>822</SUB>> ]
+"2686" [label = <(soa,soa(env))<SUB>823</SUB>> ]
+"2688" [label = <(RETURN,return FindMethodID&lt;kEnableIndexIds&gt;(soa, java_class, name, sig, false);,return FindMethodID&lt;kEnableIndexIds&gt;(soa, java_class, name, sig, false);)<SUB>824</SUB>> ]
+"2689" [label = <(&lt;operator&gt;.greaterThan,FindMethodID&lt;kEnableIndexIds&gt;(soa, java_class, name, sig, false))<SUB>824</SUB>> ]
+"2690" [label = <(&lt;operator&gt;.lessThan,FindMethodID&lt;kEnableIndexIds)<SUB>824</SUB>> ]
+"2693" [label = <(&lt;operator&gt;.bracketedPrimary,(soa, java_class, name, sig, false))<SUB>824</SUB>> ]
+"2635" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>820</SUB>> ]
+"2653" [label = <(UNLIKELY,UNLIKELY((name) == nullptr))<SUB>821</SUB>> ]
+"2671" [label = <(UNLIKELY,UNLIKELY((sig) == nullptr))<SUB>822</SUB>> ]
+"2694" [label = <(&lt;operator&gt;.expressionList,soa, java_class, name, sig, false)<SUB>824</SUB>> ]
+"2636" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>820</SUB>> ]
+"2640" [label = <(CHECK_NON_NULL_ARGUMENT(java_class),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class == null&quot;))<SUB>820</SUB>> ]
+"2647" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_class),CHECK_NON_NULL_ARGUMENT(java_class))<SUB>820</SUB>> ]
+"2654" [label = <(&lt;operator&gt;.equals,(name) == nullptr)<SUB>821</SUB>> ]
+"2658" [label = <(CHECK_NON_NULL_ARGUMENT(name),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;name == null&quot;))<SUB>821</SUB>> ]
+"2665" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(name),CHECK_NON_NULL_ARGUMENT(name))<SUB>821</SUB>> ]
+"2672" [label = <(&lt;operator&gt;.equals,(sig) == nullptr)<SUB>822</SUB>> ]
+"2676" [label = <(CHECK_NON_NULL_ARGUMENT(sig),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;sig == null&quot;))<SUB>822</SUB>> ]
+"2683" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(sig),CHECK_NON_NULL_ARGUMENT(sig))<SUB>822</SUB>> ]
+"2641" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>820</SUB>> ]
+"2659" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>821</SUB>> ]
+"2677" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>822</SUB>> ]
+"2642" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>820</SUB>> ]
+"2644" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>820</SUB>> ]
+"2660" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>821</SUB>> ]
+"2662" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>821</SUB>> ]
+"2678" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>822</SUB>> ]
+"2680" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>822</SUB>> ]
+"2625" [label = <(METHOD,GetMethodID)<SUB>819</SUB>> ]
+"2700" [label = <(METHOD_RETURN,jmethodID)<SUB>819</SUB>> ]
+  "2631" -> "2636" 
+  "2631" -> "2649" 
+  "2649" -> "2654" 
+  "2649" -> "2667" 
+  "2667" -> "2672" 
+  "2667" -> "2686" 
+  "2686" -> "2690" 
+  "2688" -> "2700" 
+  "2689" -> "2688" 
+  "2690" -> "2694" 
+  "2693" -> "2689" 
+  "2635" -> "2642" 
+  "2635" -> "2649" 
+  "2653" -> "2660" 
+  "2653" -> "2667" 
+  "2671" -> "2678" 
+  "2671" -> "2686" 
+  "2694" -> "2693" 
+  "2636" -> "2635" 
+  "2640" -> "2647" 
+  "2647" -> "2700" 
+  "2654" -> "2653" 
+  "2658" -> "2665" 
+  "2665" -> "2700" 
+  "2672" -> "2671" 
+  "2676" -> "2683" 
+  "2683" -> "2700" 
+  "2641" -> "2640" 
+  "2659" -> "2658" 
+  "2677" -> "2676" 
+  "2642" -> "2644" 
+  "2644" -> "2641" 
+  "2660" -> "2662" 
+  "2662" -> "2659" 
+  "2678" -> "2680" 
+  "2680" -> "2677" 
+  "2625" -> "2631" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/550-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/550-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/550-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/550-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "PrettyDescriptor" {  
-"19532" [label = <(METHOD,PrettyDescriptor)> ]
-"19535" [label = <(METHOD_RETURN,ANY)> ]
-  "19532" -> "19535" 
+digraph "ReleasePrimitiveArray&lt;jshortArray,jshort,mirror::ShortArray&gt;" {  
+"19207" [label = <(METHOD,ReleasePrimitiveArray&lt;jshortArray,jshort,mirror::ShortArray&gt;)> ]
+"19213" [label = <(METHOD_RETURN,ANY)> ]
+  "19207" -> "19213" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/551-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/551-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/551-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/551-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "FindArrayClass" {  
-"19536" [label = <(METHOD,FindArrayClass)> ]
-"19541" [label = <(METHOD_RETURN,ANY)> ]
-  "19536" -> "19541" 
+digraph "GetPrimitiveArrayRegion&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;" {  
+"19214" [label = <(METHOD,GetPrimitiveArrayRegion&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;)> ]
+"19221" [label = <(METHOD_RETURN,ANY)> ]
+  "19214" -> "19221" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/552-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/552-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/552-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/552-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "::Alloc" {  
-"19542" [label = <(METHOD,::Alloc)> ]
-"19548" [label = <(METHOD_RETURN,ANY)> ]
-  "19542" -> "19548" 
+digraph "GetPrimitiveArrayRegion&lt;jbyteArray,jbyte,mirror::ByteArray&gt;" {  
+"19222" [label = <(METHOD,GetPrimitiveArrayRegion&lt;jbyteArray,jbyte,mirror::ByteArray&gt;)> ]
+"19229" [label = <(METHOD_RETURN,ANY)> ]
+  "19222" -> "19229" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/553-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/553-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/553-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/553-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "GetComponentType" {  
-"19549" [label = <(METHOD,GetComponentType)> ]
-"19552" [label = <(METHOD_RETURN,ANY)> ]
-  "19549" -> "19552" 
+digraph "GetPrimitiveArrayRegion&lt;jcharArray,jchar,mirror::CharArray&gt;" {  
+"19230" [label = <(METHOD,GetPrimitiveArrayRegion&lt;jcharArray,jchar,mirror::CharArray&gt;)> ]
+"19237" [label = <(METHOD_RETURN,ANY)> ]
+  "19230" -> "19237" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/554-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/554-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/554-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/554-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "mirror::Class::PrettyDescriptor" {  
-"19553" [label = <(METHOD,mirror::Class::PrettyDescriptor)> ]
-"19557" [label = <(METHOD_RETURN,ANY)> ]
-  "19553" -> "19557" 
+digraph "GetPrimitiveArrayRegion&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;" {  
+"19238" [label = <(METHOD,GetPrimitiveArrayRegion&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;)> ]
+"19245" [label = <(METHOD_RETURN,ANY)> ]
+  "19238" -> "19245" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/555-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/555-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/555-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/555-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "NewPrimitiveArray&lt;jshortArray,mirror::ShortArray&gt;" {  
-"19558" [label = <(METHOD,NewPrimitiveArray&lt;jshortArray,mirror::ShortArray&gt;)> ]
-"19562" [label = <(METHOD_RETURN,ANY)> ]
-  "19558" -> "19562" 
+digraph "GetPrimitiveArrayRegion&lt;jfloatArray,jfloat,mirror::FloatArray&gt;" {  
+"19246" [label = <(METHOD,GetPrimitiveArrayRegion&lt;jfloatArray,jfloat,mirror::FloatArray&gt;)> ]
+"19253" [label = <(METHOD_RETURN,ANY)> ]
+  "19246" -> "19253" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/556-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/556-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/556-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/556-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "IsPrimitiveArray" {  
-"19563" [label = <(METHOD,IsPrimitiveArray)> ]
-"19566" [label = <(METHOD_RETURN,ANY)> ]
-  "19563" -> "19566" 
+digraph "GetPrimitiveArrayRegion&lt;jintArray,jint,mirror::IntArray&gt;" {  
+"19254" [label = <(METHOD,GetPrimitiveArrayRegion&lt;jintArray,jint,mirror::IntArray&gt;)> ]
+"19261" [label = <(METHOD_RETURN,ANY)> ]
+  "19254" -> "19261" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/557-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/557-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/557-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/557-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "GetRawData" {  
-"19567" [label = <(METHOD,GetRawData)> ]
-"19572" [label = <(METHOD_RETURN,ANY)> ]
-  "19567" -> "19572" 
+digraph "GetPrimitiveArrayRegion&lt;jlongArray,jlong,mirror::LongArray&gt;" {  
+"19262" [label = <(METHOD,GetPrimitiveArrayRegion&lt;jlongArray,jlong,mirror::LongArray&gt;)> ]
+"19269" [label = <(METHOD_RETURN,ANY)> ]
+  "19262" -> "19269" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/558-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/558-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/558-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/558-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "GetComponentSize" {  
-"19573" [label = <(METHOD,GetComponentSize)> ]
-"19576" [label = <(METHOD_RETURN,ANY)> ]
-  "19573" -> "19576" 
+digraph "GetPrimitiveArrayRegion&lt;jshortArray,jshort,mirror::ShortArray&gt;" {  
+"19270" [label = <(METHOD,GetPrimitiveArrayRegion&lt;jshortArray,jshort,mirror::ShortArray&gt;)> ]
+"19277" [label = <(METHOD_RETURN,ANY)> ]
+  "19270" -> "19277" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/559-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/559-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/559-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/559-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "GetPrimitiveArray&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;" {  
-"19577" [label = <(METHOD,GetPrimitiveArray&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;)> ]
-"19582" [label = <(METHOD_RETURN,ANY)> ]
-  "19577" -> "19582" 
+digraph "SetPrimitiveArrayRegion&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;" {  
+"19278" [label = <(METHOD,SetPrimitiveArrayRegion&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;)> ]
+"19285" [label = <(METHOD_RETURN,ANY)> ]
+  "19278" -> "19285" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/56-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/56-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/56-cfg.dot	2023-06-07 19:35:01.387387174 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/56-cfg.dot	2023-06-07 19:35:07.957386523 +0330
@@ -1,53 +1,71 @@
-digraph "NewObject" {  
-"2443" [label = <(va_start,va_start(args, mid))<SUB>835</SUB>> ]
-"2447" [label = <(free_args_later,free_args_later(&amp;args))<SUB>836</SUB>> ]
-"2450" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_class))<SUB>837</SUB>> ]
-"2468" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>838</SUB>> ]
-"2487" [label = <(&lt;operator&gt;.assignment,result = NewObjectV(env, java_class, mid, args))<SUB>839</SUB>> ]
-"2494" [label = <(RETURN,return result;,return result;)<SUB>840</SUB>> ]
-"2448" [label = <(&lt;operator&gt;.addressOf,&amp;args)<SUB>836</SUB>> ]
-"2489" [label = <(NewObjectV,NewObjectV(env, java_class, mid, args))<SUB>839</SUB>> ]
-"2454" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>837</SUB>> ]
-"2472" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>838</SUB>> ]
-"2455" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>837</SUB>> ]
-"2459" [label = <(CHECK_NON_NULL_ARGUMENT(java_class),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class == null&quot;))<SUB>837</SUB>> ]
-"2466" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_class),CHECK_NON_NULL_ARGUMENT(java_class))<SUB>837</SUB>> ]
-"2473" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>838</SUB>> ]
-"2477" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>838</SUB>> ]
-"2484" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>838</SUB>> ]
-"2460" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>837</SUB>> ]
-"2478" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>838</SUB>> ]
-"2461" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>837</SUB>> ]
-"2463" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>837</SUB>> ]
-"2479" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>838</SUB>> ]
-"2481" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>838</SUB>> ]
-"2437" [label = <(METHOD,NewObject)<SUB>833</SUB>> ]
-"2496" [label = <(METHOD_RETURN,jobject)<SUB>833</SUB>> ]
-  "2443" -> "2448" 
-  "2447" -> "2450" 
-  "2450" -> "2455" 
-  "2450" -> "2468" 
-  "2468" -> "2473" 
-  "2468" -> "2489" 
-  "2487" -> "2494" 
-  "2494" -> "2496" 
-  "2448" -> "2447" 
-  "2489" -> "2487" 
-  "2454" -> "2461" 
-  "2454" -> "2468" 
-  "2472" -> "2479" 
-  "2472" -> "2489" 
-  "2455" -> "2454" 
-  "2459" -> "2466" 
-  "2466" -> "2496" 
-  "2473" -> "2472" 
-  "2477" -> "2484" 
-  "2484" -> "2496" 
-  "2460" -> "2459" 
-  "2478" -> "2477" 
-  "2461" -> "2463" 
-  "2463" -> "2460" 
-  "2479" -> "2481" 
-  "2481" -> "2478" 
-  "2437" -> "2443" 
+digraph "GetStaticMethodID" {  
+"2708" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_class))<SUB>829</SUB>> ]
+"2726" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(name))<SUB>830</SUB>> ]
+"2744" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(sig))<SUB>831</SUB>> ]
+"2763" [label = <(soa,soa(env))<SUB>832</SUB>> ]
+"2765" [label = <(RETURN,return FindMethodID&lt;kEnableIndexIds&gt;(soa, java_class, name, sig, true);,return FindMethodID&lt;kEnableIndexIds&gt;(soa, java_class, name, sig, true);)<SUB>833</SUB>> ]
+"2766" [label = <(&lt;operator&gt;.greaterThan,FindMethodID&lt;kEnableIndexIds&gt;(soa, java_class, name, sig, true))<SUB>833</SUB>> ]
+"2767" [label = <(&lt;operator&gt;.lessThan,FindMethodID&lt;kEnableIndexIds)<SUB>833</SUB>> ]
+"2770" [label = <(&lt;operator&gt;.bracketedPrimary,(soa, java_class, name, sig, true))<SUB>833</SUB>> ]
+"2712" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>829</SUB>> ]
+"2730" [label = <(UNLIKELY,UNLIKELY((name) == nullptr))<SUB>830</SUB>> ]
+"2748" [label = <(UNLIKELY,UNLIKELY((sig) == nullptr))<SUB>831</SUB>> ]
+"2771" [label = <(&lt;operator&gt;.expressionList,soa, java_class, name, sig, true)<SUB>833</SUB>> ]
+"2713" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>829</SUB>> ]
+"2717" [label = <(CHECK_NON_NULL_ARGUMENT(java_class),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class == null&quot;))<SUB>829</SUB>> ]
+"2724" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_class),CHECK_NON_NULL_ARGUMENT(java_class))<SUB>829</SUB>> ]
+"2731" [label = <(&lt;operator&gt;.equals,(name) == nullptr)<SUB>830</SUB>> ]
+"2735" [label = <(CHECK_NON_NULL_ARGUMENT(name),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;name == null&quot;))<SUB>830</SUB>> ]
+"2742" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(name),CHECK_NON_NULL_ARGUMENT(name))<SUB>830</SUB>> ]
+"2749" [label = <(&lt;operator&gt;.equals,(sig) == nullptr)<SUB>831</SUB>> ]
+"2753" [label = <(CHECK_NON_NULL_ARGUMENT(sig),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;sig == null&quot;))<SUB>831</SUB>> ]
+"2760" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(sig),CHECK_NON_NULL_ARGUMENT(sig))<SUB>831</SUB>> ]
+"2718" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>829</SUB>> ]
+"2736" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>830</SUB>> ]
+"2754" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>831</SUB>> ]
+"2719" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>829</SUB>> ]
+"2721" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>829</SUB>> ]
+"2737" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>830</SUB>> ]
+"2739" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>830</SUB>> ]
+"2755" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>831</SUB>> ]
+"2757" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>831</SUB>> ]
+"2702" [label = <(METHOD,GetStaticMethodID)<SUB>827</SUB>> ]
+"2777" [label = <(METHOD_RETURN,jmethodID)<SUB>827</SUB>> ]
+  "2708" -> "2713" 
+  "2708" -> "2726" 
+  "2726" -> "2731" 
+  "2726" -> "2744" 
+  "2744" -> "2749" 
+  "2744" -> "2763" 
+  "2763" -> "2767" 
+  "2765" -> "2777" 
+  "2766" -> "2765" 
+  "2767" -> "2771" 
+  "2770" -> "2766" 
+  "2712" -> "2719" 
+  "2712" -> "2726" 
+  "2730" -> "2737" 
+  "2730" -> "2744" 
+  "2748" -> "2755" 
+  "2748" -> "2763" 
+  "2771" -> "2770" 
+  "2713" -> "2712" 
+  "2717" -> "2724" 
+  "2724" -> "2777" 
+  "2731" -> "2730" 
+  "2735" -> "2742" 
+  "2742" -> "2777" 
+  "2749" -> "2748" 
+  "2753" -> "2760" 
+  "2760" -> "2777" 
+  "2718" -> "2717" 
+  "2736" -> "2735" 
+  "2754" -> "2753" 
+  "2719" -> "2721" 
+  "2721" -> "2718" 
+  "2737" -> "2739" 
+  "2739" -> "2736" 
+  "2755" -> "2757" 
+  "2757" -> "2754" 
+  "2702" -> "2708" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/560-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/560-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/560-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/560-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "GetPrimitiveArray&lt;jbyteArray,jbyte,mirror::ByteArray&gt;" {  
-"19583" [label = <(METHOD,GetPrimitiveArray&lt;jbyteArray,jbyte,mirror::ByteArray&gt;)> ]
-"19588" [label = <(METHOD_RETURN,ANY)> ]
-  "19583" -> "19588" 
+digraph "SetPrimitiveArrayRegion&lt;jbyteArray,jbyte,mirror::ByteArray&gt;" {  
+"19286" [label = <(METHOD,SetPrimitiveArrayRegion&lt;jbyteArray,jbyte,mirror::ByteArray&gt;)> ]
+"19293" [label = <(METHOD_RETURN,ANY)> ]
+  "19286" -> "19293" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/561-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/561-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/561-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/561-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "GetPrimitiveArray&lt;jcharArray,jchar,mirror::CharArray&gt;" {  
-"19589" [label = <(METHOD,GetPrimitiveArray&lt;jcharArray,jchar,mirror::CharArray&gt;)> ]
-"19594" [label = <(METHOD_RETURN,ANY)> ]
-  "19589" -> "19594" 
+digraph "SetPrimitiveArrayRegion&lt;jcharArray,jchar,mirror::CharArray&gt;" {  
+"19294" [label = <(METHOD,SetPrimitiveArrayRegion&lt;jcharArray,jchar,mirror::CharArray&gt;)> ]
+"19301" [label = <(METHOD_RETURN,ANY)> ]
+  "19294" -> "19301" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/562-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/562-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/562-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/562-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "GetPrimitiveArray&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;" {  
-"19595" [label = <(METHOD,GetPrimitiveArray&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;)> ]
-"19600" [label = <(METHOD_RETURN,ANY)> ]
-  "19595" -> "19600" 
+digraph "SetPrimitiveArrayRegion&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;" {  
+"19302" [label = <(METHOD,SetPrimitiveArrayRegion&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;)> ]
+"19309" [label = <(METHOD_RETURN,ANY)> ]
+  "19302" -> "19309" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/563-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/563-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/563-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/563-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "GetPrimitiveArray&lt;jfloatArray,jfloat,mirror::FloatArray&gt;" {  
-"19601" [label = <(METHOD,GetPrimitiveArray&lt;jfloatArray,jfloat,mirror::FloatArray&gt;)> ]
-"19606" [label = <(METHOD_RETURN,ANY)> ]
-  "19601" -> "19606" 
+digraph "SetPrimitiveArrayRegion&lt;jfloatArray,jfloat,mirror::FloatArray&gt;" {  
+"19310" [label = <(METHOD,SetPrimitiveArrayRegion&lt;jfloatArray,jfloat,mirror::FloatArray&gt;)> ]
+"19317" [label = <(METHOD_RETURN,ANY)> ]
+  "19310" -> "19317" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/564-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/564-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/564-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/564-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "GetPrimitiveArray&lt;jintArray,jint,mirror::IntArray&gt;" {  
-"19607" [label = <(METHOD,GetPrimitiveArray&lt;jintArray,jint,mirror::IntArray&gt;)> ]
-"19612" [label = <(METHOD_RETURN,ANY)> ]
-  "19607" -> "19612" 
+digraph "SetPrimitiveArrayRegion&lt;jintArray,jint,mirror::IntArray&gt;" {  
+"19318" [label = <(METHOD,SetPrimitiveArrayRegion&lt;jintArray,jint,mirror::IntArray&gt;)> ]
+"19325" [label = <(METHOD_RETURN,ANY)> ]
+  "19318" -> "19325" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/565-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/565-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/565-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/565-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "GetPrimitiveArray&lt;jlongArray,jlong,mirror::LongArray&gt;" {  
-"19613" [label = <(METHOD,GetPrimitiveArray&lt;jlongArray,jlong,mirror::LongArray&gt;)> ]
-"19618" [label = <(METHOD_RETURN,ANY)> ]
-  "19613" -> "19618" 
+digraph "SetPrimitiveArrayRegion&lt;jlongArray,jlong,mirror::LongArray&gt;" {  
+"19326" [label = <(METHOD,SetPrimitiveArrayRegion&lt;jlongArray,jlong,mirror::LongArray&gt;)> ]
+"19333" [label = <(METHOD_RETURN,ANY)> ]
+  "19326" -> "19333" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/566-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/566-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/566-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/566-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "GetPrimitiveArray&lt;jshortArray,jshort,mirror::ShortArray&gt;" {  
-"19619" [label = <(METHOD,GetPrimitiveArray&lt;jshortArray,jshort,mirror::ShortArray&gt;)> ]
-"19624" [label = <(METHOD_RETURN,ANY)> ]
-  "19619" -> "19624" 
+digraph "SetPrimitiveArrayRegion&lt;jshortArray,jshort,mirror::ShortArray&gt;" {  
+"19334" [label = <(METHOD,SetPrimitiveArrayRegion&lt;jshortArray,jshort,mirror::ShortArray&gt;)> ]
+"19341" [label = <(METHOD_RETURN,ANY)> ]
+  "19334" -> "19341" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/567-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/567-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/567-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/567-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "ReleasePrimitiveArray&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;" {  
-"19625" [label = <(METHOD,ReleasePrimitiveArray&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;)> ]
-"19631" [label = <(METHOD_RETURN,ANY)> ]
-  "19625" -> "19631" 
+digraph "CHECK_NON_NULL_ARGUMENT_FN_NAME" {  
+"19342" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_FN_NAME)<SUB>455</SUB>> ]
+"19347" [label = <(METHOD_RETURN,ANY)> ]
+  "19342" -> "19347" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/568-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/568-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/568-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/568-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "ReleasePrimitiveArray&lt;jbyteArray,jbyte,mirror::ByteArray&gt;" {  
-"19632" [label = <(METHOD,ReleasePrimitiveArray&lt;jbyteArray,jbyte,mirror::ByteArray&gt;)> ]
-"19638" [label = <(METHOD_RETURN,ANY)> ]
-  "19632" -> "19638" 
+digraph "CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, java_class, JNI_ERR)" {  
+"19348" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, java_class, JNI_ERR))> ]
+"19353" [label = <(METHOD_RETURN,ANY)> ]
+  "19348" -> "19353" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/569-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/569-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/569-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/569-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "ReleasePrimitiveArray&lt;jcharArray,jchar,mirror::CharArray&gt;" {  
-"19639" [label = <(METHOD,ReleasePrimitiveArray&lt;jcharArray,jchar,mirror::CharArray&gt;)> ]
-"19645" [label = <(METHOD_RETURN,ANY)> ]
-  "19639" -> "19645" 
+digraph "CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, methods, JNI_ERR)" {  
+"19354" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, methods, JNI_ERR))> ]
+"19359" [label = <(METHOD_RETURN,ANY)> ]
+  "19354" -> "19359" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/57-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/57-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/57-cfg.dot	2023-06-07 19:35:01.397387172 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/57-cfg.dot	2023-06-07 19:35:07.957386523 +0330
@@ -1,171 +1,69 @@
-digraph "NewObjectV" {  
-"2504" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_class))<SUB>844</SUB>> ]
-"2522" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>845</SUB>> ]
-"2541" [label = <(soa,soa(env))<SUB>846</SUB>> ]
-"2543" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c = EnsureInitialized(soa.Self(),\012                                                soa.Decode&lt;mirror::Class&gt;(java_class)))<SUB>847</SUB>> ]
-"2604" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; result = c-&gt;AllocObject(soa.Self()))<SUB>858</SUB>> ]
-"2628" [label = <(&lt;operator&gt;.assignment,local_result = soa.AddLocalReference&lt;jobject&gt;(result))<SUB>862</SUB>> ]
-"2637" [label = <(CallNonvirtualVoidMethodV,CallNonvirtualVoidMethodV(env, local_result, java_class, mid, args))<SUB>863</SUB>> ]
-"2654" [label = <(RETURN,return local_result;,return local_result;)<SUB>867</SUB>> ]
-"2544" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c)<SUB>847</SUB>> ]
-"2551" [label = <(EnsureInitialized,EnsureInitialized(soa.Self(),\012                                                soa.Decode&lt;mirror::Class&gt;(java_class)))<SUB>847</SUB>> ]
-"2566" [label = <(&lt;operator&gt;.equals,c == nullptr)<SUB>849</SUB>> ]
-"2573" [label = <(IsStringClass,c-&gt;IsStringClass())<SUB>852</SUB>> ]
-"2605" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; result)<SUB>858</SUB>> ]
-"2612" [label = <(AllocObject,c-&gt;AllocObject(soa.Self()))<SUB>858</SUB>> ]
-"2621" [label = <(&lt;operator&gt;.equals,result == nullptr)<SUB>859</SUB>> ]
-"2630" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result))<SUB>862</SUB>> ]
-"2644" [label = <(IsExceptionPending,soa.Self()-&gt;IsExceptionPending())<SUB>864</SUB>> ]
-"2545" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>847</SUB>> ]
-"2552" [label = <(Self,soa.Self())<SUB>847</SUB>> ]
-"2556" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>848</SUB>> ]
-"2570" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>850</SUB>> ]
-"2574" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;IsStringClass)<SUB>852</SUB>> ]
-"2579" [label = <(&lt;operator&gt;.assignment,sf_mid = jni::EncodeArtMethod&lt;kEnableIndexIds&gt;(\012 WellKnownClasses::StringInitToStringFactory(jni::DecodeArtMethod(mid))))<SUB>854</SUB>> ]
-"2596" [label = <(RETURN,return CallStaticObjectMethodV(env, WellKnownClasses::java_lang_StringFactory, sf_mid, args);,return CallStaticObjectMethodV(env, WellKnownClasses::java_lang_StringFactory, sf_mid, args);)<SUB>856</SUB>> ]
-"2606" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>858</SUB>> ]
-"2613" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;AllocObject)<SUB>858</SUB>> ]
-"2616" [label = <(Self,soa.Self())<SUB>858</SUB>> ]
-"2625" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>860</SUB>> ]
-"2631" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>862</SUB>> ]
-"2645" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;IsExceptionPending)<SUB>864</SUB>> ]
-"2652" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>865</SUB>> ]
-"2508" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>844</SUB>> ]
-"2526" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>845</SUB>> ]
-"2547" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>847</SUB>> ]
-"2553" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>847</SUB>> ]
-"2557" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>848</SUB>> ]
-"2576" [label = <(FIELD_IDENTIFIER,IsStringClass,IsStringClass)<SUB>852</SUB>> ]
-"2581" [label = <(&lt;operator&gt;.greaterThan,jni::EncodeArtMethod&lt;kEnableIndexIds&gt;(\012 WellKnownClasses::StringInitToStringFactory(jni::DecodeArtMethod(mid))))<SUB>854</SUB>> ]
-"2597" [label = <(CallStaticObjectMethodV,CallStaticObjectMethodV(env, WellKnownClasses::java_lang_StringFactory, sf_mid, args))<SUB>856</SUB>> ]
-"2608" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>858</SUB>> ]
-"2615" [label = <(FIELD_IDENTIFIER,AllocObject,AllocObject)<SUB>858</SUB>> ]
-"2617" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>858</SUB>> ]
-"2632" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>862</SUB>> ]
-"2646" [label = <(Self,soa.Self())<SUB>864</SUB>> ]
-"2650" [label = <(FIELD_IDENTIFIER,IsExceptionPending,IsExceptionPending)<SUB>864</SUB>> ]
-"2509" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>844</SUB>> ]
-"2513" [label = <(CHECK_NON_NULL_ARGUMENT(java_class),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class == null&quot;))<SUB>844</SUB>> ]
-"2520" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_class),CHECK_NON_NULL_ARGUMENT(java_class))<SUB>844</SUB>> ]
-"2527" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>845</SUB>> ]
-"2531" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>845</SUB>> ]
-"2538" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>845</SUB>> ]
-"2549" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>847</SUB>> ]
-"2555" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>847</SUB>> ]
-"2558" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>848</SUB>> ]
-"2561" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>848</SUB>> ]
-"2582" [label = <(&lt;operator&gt;.lessThan,jni::EncodeArtMethod&lt;kEnableIndexIds)<SUB>854</SUB>> ]
-"2587" [label = <(WellKnownClasses::StringInitToStringFactory,WellKnownClasses::StringInitToStringFactory(jni::DecodeArtMethod(mid)))<SUB>855</SUB>> ]
-"2599" [label = <(&lt;operator&gt;.fieldAccess,WellKnownClasses::java_lang_StringFactory)<SUB>856</SUB>> ]
-"2610" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>858</SUB>> ]
-"2619" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>858</SUB>> ]
-"2634" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>862</SUB>> ]
-"2647" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>864</SUB>> ]
-"2514" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>844</SUB>> ]
-"2532" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>845</SUB>> ]
-"2560" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>848</SUB>> ]
-"2563" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>848</SUB>> ]
-"2583" [label = <(&lt;operator&gt;.fieldAccess,jni::EncodeArtMethod)<SUB>854</SUB>> ]
-"2588" [label = <(&lt;operator&gt;.fieldAccess,WellKnownClasses::StringInitToStringFactory)<SUB>855</SUB>> ]
-"2591" [label = <(jni::DecodeArtMethod,jni::DecodeArtMethod(mid))<SUB>855</SUB>> ]
-"2601" [label = <(FIELD_IDENTIFIER,java_lang_StringFactory,java_lang_StringFactory)<SUB>856</SUB>> ]
-"2649" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>864</SUB>> ]
-"2515" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>844</SUB>> ]
-"2517" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>844</SUB>> ]
-"2533" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>845</SUB>> ]
-"2535" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>845</SUB>> ]
-"2585" [label = <(FIELD_IDENTIFIER,EncodeArtMethod,EncodeArtMethod)<SUB>854</SUB>> ]
-"2590" [label = <(FIELD_IDENTIFIER,StringInitToStringFactory,StringInitToStringFactory)<SUB>855</SUB>> ]
-"2592" [label = <(&lt;operator&gt;.fieldAccess,jni::DecodeArtMethod)<SUB>855</SUB>> ]
-"2594" [label = <(FIELD_IDENTIFIER,DecodeArtMethod,DecodeArtMethod)<SUB>855</SUB>> ]
-"2498" [label = <(METHOD,NewObjectV)<SUB>843</SUB>> ]
-"2656" [label = <(METHOD_RETURN,jobject)<SUB>843</SUB>> ]
-  "2504" -> "2509" 
-  "2504" -> "2522" 
-  "2522" -> "2527" 
-  "2522" -> "2541" 
-  "2541" -> "2549" 
-  "2543" -> "2566" 
-  "2604" -> "2621" 
-  "2628" -> "2637" 
-  "2637" -> "2649" 
-  "2654" -> "2656" 
-  "2544" -> "2555" 
-  "2551" -> "2543" 
-  "2566" -> "2570" 
-  "2566" -> "2576" 
-  "2573" -> "2585" 
-  "2573" -> "2610" 
-  "2605" -> "2615" 
-  "2612" -> "2604" 
-  "2621" -> "2625" 
-  "2621" -> "2634" 
-  "2630" -> "2628" 
-  "2644" -> "2652" 
-  "2644" -> "2654" 
-  "2545" -> "2544" 
-  "2552" -> "2560" 
-  "2556" -> "2551" 
-  "2570" -> "2656" 
-  "2574" -> "2573" 
-  "2579" -> "2601" 
-  "2596" -> "2656" 
-  "2606" -> "2605" 
-  "2613" -> "2619" 
-  "2616" -> "2612" 
-  "2625" -> "2656" 
-  "2631" -> "2630" 
-  "2645" -> "2644" 
-  "2652" -> "2656" 
-  "2508" -> "2515" 
-  "2508" -> "2522" 
-  "2526" -> "2533" 
-  "2526" -> "2541" 
-  "2547" -> "2545" 
-  "2553" -> "2552" 
-  "2557" -> "2556" 
-  "2576" -> "2574" 
-  "2581" -> "2579" 
-  "2597" -> "2596" 
-  "2608" -> "2606" 
-  "2615" -> "2613" 
-  "2617" -> "2616" 
-  "2632" -> "2631" 
-  "2646" -> "2650" 
-  "2650" -> "2645" 
-  "2509" -> "2508" 
-  "2513" -> "2520" 
-  "2520" -> "2656" 
-  "2527" -> "2526" 
-  "2531" -> "2538" 
-  "2538" -> "2656" 
-  "2549" -> "2547" 
-  "2555" -> "2553" 
-  "2558" -> "2563" 
-  "2561" -> "2557" 
-  "2582" -> "2590" 
-  "2587" -> "2581" 
-  "2599" -> "2597" 
-  "2610" -> "2608" 
-  "2619" -> "2617" 
-  "2634" -> "2632" 
-  "2647" -> "2646" 
-  "2514" -> "2513" 
-  "2532" -> "2531" 
-  "2560" -> "2558" 
-  "2563" -> "2561" 
-  "2583" -> "2582" 
-  "2588" -> "2594" 
-  "2591" -> "2587" 
-  "2601" -> "2599" 
-  "2649" -> "2647" 
-  "2515" -> "2517" 
-  "2517" -> "2514" 
-  "2533" -> "2535" 
-  "2535" -> "2532" 
-  "2585" -> "2583" 
-  "2590" -> "2588" 
-  "2592" -> "2591" 
-  "2594" -> "2592" 
-  "2498" -> "2504" 
+digraph "CallObjectMethod" {  
+"2785" [label = <(va_start,va_start(ap, mid))<SUB>838</SUB>> ]
+"2789" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>839</SUB>> ]
+"2792" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(obj))<SUB>840</SUB>> ]
+"2810" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>841</SUB>> ]
+"2829" [label = <(soa,soa(env))<SUB>842</SUB>> ]
+"2832" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap)))<SUB>843</SUB>> ]
+"2838" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());)<SUB>844</SUB>> ]
+"2790" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>839</SUB>> ]
+"2833" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>843</SUB>> ]
+"2839" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>844</SUB>> ]
+"2840" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>844</SUB>> ]
+"2845" [label = <(GetL,result.GetL())<SUB>844</SUB>> ]
+"2796" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>840</SUB>> ]
+"2814" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>841</SUB>> ]
+"2841" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>844</SUB>> ]
+"2846" [label = <(&lt;operator&gt;.fieldAccess,result.GetL)<SUB>844</SUB>> ]
+"2797" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>840</SUB>> ]
+"2801" [label = <(CHECK_NON_NULL_ARGUMENT(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>840</SUB>> ]
+"2808" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(obj),CHECK_NON_NULL_ARGUMENT(obj))<SUB>840</SUB>> ]
+"2815" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>841</SUB>> ]
+"2819" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>841</SUB>> ]
+"2826" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>841</SUB>> ]
+"2843" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>844</SUB>> ]
+"2848" [label = <(FIELD_IDENTIFIER,GetL,GetL)<SUB>844</SUB>> ]
+"2802" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>840</SUB>> ]
+"2820" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>841</SUB>> ]
+"2803" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>840</SUB>> ]
+"2805" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>840</SUB>> ]
+"2821" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>841</SUB>> ]
+"2823" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>841</SUB>> ]
+"2779" [label = <(METHOD,CallObjectMethod)<SUB>836</SUB>> ]
+"2849" [label = <(METHOD_RETURN,jobject)<SUB>836</SUB>> ]
+  "2785" -> "2790" 
+  "2789" -> "2792" 
+  "2792" -> "2797" 
+  "2792" -> "2810" 
+  "2810" -> "2815" 
+  "2810" -> "2829" 
+  "2829" -> "2833" 
+  "2832" -> "2843" 
+  "2838" -> "2849" 
+  "2790" -> "2789" 
+  "2833" -> "2832" 
+  "2839" -> "2838" 
+  "2840" -> "2848" 
+  "2845" -> "2839" 
+  "2796" -> "2803" 
+  "2796" -> "2810" 
+  "2814" -> "2821" 
+  "2814" -> "2829" 
+  "2841" -> "2840" 
+  "2846" -> "2845" 
+  "2797" -> "2796" 
+  "2801" -> "2808" 
+  "2808" -> "2849" 
+  "2815" -> "2814" 
+  "2819" -> "2826" 
+  "2826" -> "2849" 
+  "2843" -> "2841" 
+  "2848" -> "2846" 
+  "2802" -> "2801" 
+  "2820" -> "2819" 
+  "2803" -> "2805" 
+  "2805" -> "2802" 
+  "2821" -> "2823" 
+  "2823" -> "2820" 
+  "2779" -> "2785" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/570-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/570-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/570-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/570-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "ReleasePrimitiveArray&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;" {  
-"19646" [label = <(METHOD,ReleasePrimitiveArray&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;)> ]
-"19652" [label = <(METHOD_RETURN,ANY)> ]
-  "19646" -> "19652" 
+digraph "IsCheckJniEnabled" {  
+"19360" [label = <(METHOD,IsCheckJniEnabled)> ]
+"19363" [label = <(METHOD_RETURN,ANY)> ]
+  "19360" -> "19363" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/571-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/571-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/571-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/571-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "ReleasePrimitiveArray&lt;jfloatArray,jfloat,mirror::FloatArray&gt;" {  
-"19653" [label = <(METHOD,ReleasePrimitiveArray&lt;jfloatArray,jfloat,mirror::FloatArray&gt;)> ]
-"19659" [label = <(METHOD_RETURN,ANY)> ]
-  "19653" -> "19659" 
+digraph "DumpClass" {  
+"19364" [label = <(METHOD,DumpClass)> ]
+"19369" [label = <(METHOD_RETURN,ANY)> ]
+  "19364" -> "19369" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/572-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/572-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/572-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/572-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "ReleasePrimitiveArray&lt;jintArray,jint,mirror::IntArray&gt;" {  
-"19660" [label = <(METHOD,ReleasePrimitiveArray&lt;jintArray,jint,mirror::IntArray&gt;)> ]
-"19666" [label = <(METHOD_RETURN,ANY)> ]
-  "19660" -> "19666" 
+digraph "LOG_STREAM" {  
+"19370" [label = <(METHOD,LOG_STREAM)> ]
+"19373" [label = <(METHOD_RETURN,ANY)> ]
+  "19370" -> "19373" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/573-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/573-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/573-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/573-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "ReleasePrimitiveArray&lt;jlongArray,jlong,mirror::LongArray&gt;" {  
-"19667" [label = <(METHOD,ReleasePrimitiveArray&lt;jlongArray,jlong,mirror::LongArray&gt;)> ]
-"19673" [label = <(METHOD_RETURN,ANY)> ]
-  "19667" -> "19673" 
+digraph "ToModifiedUtf8" {  
+"19374" [label = <(METHOD,ToModifiedUtf8)> ]
+"19377" [label = <(METHOD_RETURN,ANY)> ]
+  "19374" -> "19377" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/574-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/574-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/574-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/574-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "ReleasePrimitiveArray&lt;jshortArray,jshort,mirror::ShortArray&gt;" {  
-"19674" [label = <(METHOD,ReleasePrimitiveArray&lt;jshortArray,jshort,mirror::ShortArray&gt;)> ]
-"19680" [label = <(METHOD_RETURN,ANY)> ]
-  "19674" -> "19680" 
+digraph "GetLocation" {  
+"19378" [label = <(METHOD,GetLocation)> ]
+"19381" [label = <(METHOD_RETURN,ANY)> ]
+  "19378" -> "19381" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/575-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/575-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/575-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/575-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "GetPrimitiveArrayRegion&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;" {  
-"19681" [label = <(METHOD,GetPrimitiveArrayRegion&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;)> ]
-"19688" [label = <(METHOD_RETURN,ANY)> ]
-  "19681" -> "19688" 
+digraph "GetDexCache" {  
+"19382" [label = <(METHOD,GetDexCache)> ]
+"19385" [label = <(METHOD_RETURN,ANY)> ]
+  "19382" -> "19385" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/576-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/576-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/576-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/576-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "GetPrimitiveArrayRegion&lt;jbyteArray,jbyte,mirror::ByteArray&gt;" {  
-"19689" [label = <(METHOD,GetPrimitiveArrayRegion&lt;jbyteArray,jbyte,mirror::ByteArray&gt;)> ]
-"19696" [label = <(METHOD_RETURN,ANY)> ]
-  "19689" -> "19696" 
+digraph "IsNative" {  
+"19386" [label = <(METHOD,IsNative)> ]
+"19389" [label = <(METHOD_RETURN,ANY)> ]
+  "19386" -> "19389" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/577-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/577-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/577-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/577-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "GetPrimitiveArrayRegion&lt;jcharArray,jchar,mirror::CharArray&gt;" {  
-"19697" [label = <(METHOD,GetPrimitiveArrayRegion&lt;jcharArray,jchar,mirror::CharArray&gt;)> ]
-"19704" [label = <(METHOD_RETURN,ANY)> ]
-  "19697" -> "19704" 
+digraph "VLOG" {  
+"19390" [label = <(METHOD,VLOG)> ]
+"19393" [label = <(METHOD_RETURN,ANY)> ]
+  "19390" -> "19393" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/578-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/578-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/578-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/578-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "GetPrimitiveArrayRegion&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;" {  
-"19705" [label = <(METHOD,GetPrimitiveArrayRegion&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;)> ]
-"19712" [label = <(METHOD_RETURN,ANY)> ]
-  "19705" -> "19712" 
+digraph "PrettyMethod" {  
+"19394" [label = <(METHOD,PrettyMethod)> ]
+"19397" [label = <(METHOD_RETURN,ANY)> ]
+  "19394" -> "19397" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/579-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/579-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/579-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/579-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "GetPrimitiveArrayRegion&lt;jfloatArray,jfloat,mirror::FloatArray&gt;" {  
-"19713" [label = <(METHOD,GetPrimitiveArrayRegion&lt;jfloatArray,jfloat,mirror::FloatArray&gt;)> ]
-"19720" [label = <(METHOD_RETURN,ANY)> ]
-  "19713" -> "19720" 
+digraph "RegisterNative" {  
+"19398" [label = <(METHOD,RegisterNative)> ]
+"19402" [label = <(METHOD_RETURN,ANY)> ]
+  "19398" -> "19402" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/58-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/58-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/58-cfg.dot	2023-06-07 19:35:01.397387172 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/58-cfg.dot	2023-06-07 19:35:07.957386523 +0330
@@ -1,171 +1,63 @@
-digraph "NewObjectA" {  
-"2664" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_class))<SUB>871</SUB>> ]
-"2682" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>872</SUB>> ]
-"2701" [label = <(soa,soa(env))<SUB>873</SUB>> ]
-"2703" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c = EnsureInitialized(soa.Self(),\012                                                soa.Decode&lt;mirror::Class&gt;(java_class)))<SUB>874</SUB>> ]
-"2764" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; result = c-&gt;AllocObject(soa.Self()))<SUB>885</SUB>> ]
-"2788" [label = <(&lt;operator&gt;.assignment,local_result = soa.AddLocalReference&lt;jobjectArray&gt;(result))<SUB>889</SUB>> ]
-"2797" [label = <(CallNonvirtualVoidMethodA,CallNonvirtualVoidMethodA(env, local_result, java_class, mid, args))<SUB>890</SUB>> ]
-"2814" [label = <(RETURN,return local_result;,return local_result;)<SUB>894</SUB>> ]
-"2704" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c)<SUB>874</SUB>> ]
-"2711" [label = <(EnsureInitialized,EnsureInitialized(soa.Self(),\012                                                soa.Decode&lt;mirror::Class&gt;(java_class)))<SUB>874</SUB>> ]
-"2726" [label = <(&lt;operator&gt;.equals,c == nullptr)<SUB>876</SUB>> ]
-"2733" [label = <(IsStringClass,c-&gt;IsStringClass())<SUB>879</SUB>> ]
-"2765" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; result)<SUB>885</SUB>> ]
-"2772" [label = <(AllocObject,c-&gt;AllocObject(soa.Self()))<SUB>885</SUB>> ]
-"2781" [label = <(&lt;operator&gt;.equals,result == nullptr)<SUB>886</SUB>> ]
-"2790" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobjectArray&gt;(result))<SUB>889</SUB>> ]
-"2804" [label = <(IsExceptionPending,soa.Self()-&gt;IsExceptionPending())<SUB>891</SUB>> ]
-"2705" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>874</SUB>> ]
-"2712" [label = <(Self,soa.Self())<SUB>874</SUB>> ]
-"2716" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>875</SUB>> ]
-"2730" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>877</SUB>> ]
-"2734" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;IsStringClass)<SUB>879</SUB>> ]
-"2739" [label = <(&lt;operator&gt;.assignment,sf_mid = jni::EncodeArtMethod&lt;kEnableIndexIds&gt;(\012 WellKnownClasses::StringInitToStringFactory(jni::DecodeArtMethod(mid))))<SUB>881</SUB>> ]
-"2756" [label = <(RETURN,return CallStaticObjectMethodA(env, WellKnownClasses::java_lang_StringFactory, sf_mid, args);,return CallStaticObjectMethodA(env, WellKnownClasses::java_lang_StringFactory, sf_mid, args);)<SUB>883</SUB>> ]
-"2766" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>885</SUB>> ]
-"2773" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;AllocObject)<SUB>885</SUB>> ]
-"2776" [label = <(Self,soa.Self())<SUB>885</SUB>> ]
-"2785" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>887</SUB>> ]
-"2791" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobjectArray)<SUB>889</SUB>> ]
-"2805" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;IsExceptionPending)<SUB>891</SUB>> ]
-"2812" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>892</SUB>> ]
-"2668" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>871</SUB>> ]
-"2686" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>872</SUB>> ]
-"2707" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>874</SUB>> ]
-"2713" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>874</SUB>> ]
-"2717" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>875</SUB>> ]
-"2736" [label = <(FIELD_IDENTIFIER,IsStringClass,IsStringClass)<SUB>879</SUB>> ]
-"2741" [label = <(&lt;operator&gt;.greaterThan,jni::EncodeArtMethod&lt;kEnableIndexIds&gt;(\012 WellKnownClasses::StringInitToStringFactory(jni::DecodeArtMethod(mid))))<SUB>881</SUB>> ]
-"2757" [label = <(CallStaticObjectMethodA,CallStaticObjectMethodA(env, WellKnownClasses::java_lang_StringFactory, sf_mid, args))<SUB>883</SUB>> ]
-"2768" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>885</SUB>> ]
-"2775" [label = <(FIELD_IDENTIFIER,AllocObject,AllocObject)<SUB>885</SUB>> ]
-"2777" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>885</SUB>> ]
-"2792" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>889</SUB>> ]
-"2806" [label = <(Self,soa.Self())<SUB>891</SUB>> ]
-"2810" [label = <(FIELD_IDENTIFIER,IsExceptionPending,IsExceptionPending)<SUB>891</SUB>> ]
-"2669" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>871</SUB>> ]
-"2673" [label = <(CHECK_NON_NULL_ARGUMENT(java_class),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class == null&quot;))<SUB>871</SUB>> ]
-"2680" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_class),CHECK_NON_NULL_ARGUMENT(java_class))<SUB>871</SUB>> ]
-"2687" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>872</SUB>> ]
-"2691" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>872</SUB>> ]
-"2698" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>872</SUB>> ]
-"2709" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>874</SUB>> ]
-"2715" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>874</SUB>> ]
-"2718" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>875</SUB>> ]
-"2721" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>875</SUB>> ]
-"2742" [label = <(&lt;operator&gt;.lessThan,jni::EncodeArtMethod&lt;kEnableIndexIds)<SUB>881</SUB>> ]
-"2747" [label = <(WellKnownClasses::StringInitToStringFactory,WellKnownClasses::StringInitToStringFactory(jni::DecodeArtMethod(mid)))<SUB>882</SUB>> ]
-"2759" [label = <(&lt;operator&gt;.fieldAccess,WellKnownClasses::java_lang_StringFactory)<SUB>883</SUB>> ]
-"2770" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>885</SUB>> ]
-"2779" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>885</SUB>> ]
-"2794" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>889</SUB>> ]
-"2807" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>891</SUB>> ]
-"2674" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>871</SUB>> ]
-"2692" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>872</SUB>> ]
-"2720" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>875</SUB>> ]
-"2723" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>875</SUB>> ]
-"2743" [label = <(&lt;operator&gt;.fieldAccess,jni::EncodeArtMethod)<SUB>881</SUB>> ]
-"2748" [label = <(&lt;operator&gt;.fieldAccess,WellKnownClasses::StringInitToStringFactory)<SUB>882</SUB>> ]
-"2751" [label = <(jni::DecodeArtMethod,jni::DecodeArtMethod(mid))<SUB>882</SUB>> ]
-"2761" [label = <(FIELD_IDENTIFIER,java_lang_StringFactory,java_lang_StringFactory)<SUB>883</SUB>> ]
-"2809" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>891</SUB>> ]
-"2675" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>871</SUB>> ]
-"2677" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>871</SUB>> ]
-"2693" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>872</SUB>> ]
-"2695" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>872</SUB>> ]
-"2745" [label = <(FIELD_IDENTIFIER,EncodeArtMethod,EncodeArtMethod)<SUB>881</SUB>> ]
-"2750" [label = <(FIELD_IDENTIFIER,StringInitToStringFactory,StringInitToStringFactory)<SUB>882</SUB>> ]
-"2752" [label = <(&lt;operator&gt;.fieldAccess,jni::DecodeArtMethod)<SUB>882</SUB>> ]
-"2754" [label = <(FIELD_IDENTIFIER,DecodeArtMethod,DecodeArtMethod)<SUB>882</SUB>> ]
-"2658" [label = <(METHOD,NewObjectA)<SUB>870</SUB>> ]
-"2816" [label = <(METHOD_RETURN,jobject)<SUB>870</SUB>> ]
-  "2664" -> "2669" 
-  "2664" -> "2682" 
-  "2682" -> "2687" 
-  "2682" -> "2701" 
-  "2701" -> "2709" 
-  "2703" -> "2726" 
-  "2764" -> "2781" 
-  "2788" -> "2797" 
-  "2797" -> "2809" 
-  "2814" -> "2816" 
-  "2704" -> "2715" 
-  "2711" -> "2703" 
-  "2726" -> "2730" 
-  "2726" -> "2736" 
-  "2733" -> "2745" 
-  "2733" -> "2770" 
-  "2765" -> "2775" 
-  "2772" -> "2764" 
-  "2781" -> "2785" 
-  "2781" -> "2794" 
-  "2790" -> "2788" 
-  "2804" -> "2812" 
-  "2804" -> "2814" 
-  "2705" -> "2704" 
-  "2712" -> "2720" 
-  "2716" -> "2711" 
-  "2730" -> "2816" 
-  "2734" -> "2733" 
-  "2739" -> "2761" 
-  "2756" -> "2816" 
-  "2766" -> "2765" 
-  "2773" -> "2779" 
-  "2776" -> "2772" 
-  "2785" -> "2816" 
-  "2791" -> "2790" 
-  "2805" -> "2804" 
-  "2812" -> "2816" 
-  "2668" -> "2675" 
-  "2668" -> "2682" 
-  "2686" -> "2693" 
-  "2686" -> "2701" 
-  "2707" -> "2705" 
-  "2713" -> "2712" 
-  "2717" -> "2716" 
-  "2736" -> "2734" 
-  "2741" -> "2739" 
-  "2757" -> "2756" 
-  "2768" -> "2766" 
-  "2775" -> "2773" 
-  "2777" -> "2776" 
-  "2792" -> "2791" 
-  "2806" -> "2810" 
-  "2810" -> "2805" 
-  "2669" -> "2668" 
-  "2673" -> "2680" 
-  "2680" -> "2816" 
-  "2687" -> "2686" 
-  "2691" -> "2698" 
-  "2698" -> "2816" 
-  "2709" -> "2707" 
-  "2715" -> "2713" 
-  "2718" -> "2723" 
-  "2721" -> "2717" 
-  "2742" -> "2750" 
-  "2747" -> "2741" 
-  "2759" -> "2757" 
-  "2770" -> "2768" 
-  "2779" -> "2777" 
-  "2794" -> "2792" 
-  "2807" -> "2806" 
-  "2674" -> "2673" 
-  "2692" -> "2691" 
-  "2720" -> "2718" 
-  "2723" -> "2721" 
-  "2743" -> "2742" 
-  "2748" -> "2754" 
-  "2751" -> "2747" 
-  "2761" -> "2759" 
-  "2809" -> "2807" 
-  "2675" -> "2677" 
-  "2677" -> "2674" 
-  "2693" -> "2695" 
-  "2695" -> "2692" 
-  "2745" -> "2743" 
-  "2750" -> "2748" 
-  "2752" -> "2751" 
-  "2754" -> "2752" 
-  "2658" -> "2664" 
+digraph "CallObjectMethodV" {  
+"2857" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(obj))<SUB>848</SUB>> ]
+"2875" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>849</SUB>> ]
+"2894" [label = <(soa,soa(env))<SUB>850</SUB>> ]
+"2897" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args)))<SUB>851</SUB>> ]
+"2903" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());)<SUB>852</SUB>> ]
+"2898" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>851</SUB>> ]
+"2904" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>852</SUB>> ]
+"2905" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>852</SUB>> ]
+"2910" [label = <(GetL,result.GetL())<SUB>852</SUB>> ]
+"2861" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>848</SUB>> ]
+"2879" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>849</SUB>> ]
+"2906" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>852</SUB>> ]
+"2911" [label = <(&lt;operator&gt;.fieldAccess,result.GetL)<SUB>852</SUB>> ]
+"2862" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>848</SUB>> ]
+"2866" [label = <(CHECK_NON_NULL_ARGUMENT(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>848</SUB>> ]
+"2873" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(obj),CHECK_NON_NULL_ARGUMENT(obj))<SUB>848</SUB>> ]
+"2880" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>849</SUB>> ]
+"2884" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>849</SUB>> ]
+"2891" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>849</SUB>> ]
+"2908" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>852</SUB>> ]
+"2913" [label = <(FIELD_IDENTIFIER,GetL,GetL)<SUB>852</SUB>> ]
+"2867" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>848</SUB>> ]
+"2885" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>849</SUB>> ]
+"2868" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>848</SUB>> ]
+"2870" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>848</SUB>> ]
+"2886" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>849</SUB>> ]
+"2888" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>849</SUB>> ]
+"2851" [label = <(METHOD,CallObjectMethodV)<SUB>847</SUB>> ]
+"2914" [label = <(METHOD_RETURN,jobject)<SUB>847</SUB>> ]
+  "2857" -> "2862" 
+  "2857" -> "2875" 
+  "2875" -> "2880" 
+  "2875" -> "2894" 
+  "2894" -> "2898" 
+  "2897" -> "2908" 
+  "2903" -> "2914" 
+  "2898" -> "2897" 
+  "2904" -> "2903" 
+  "2905" -> "2913" 
+  "2910" -> "2904" 
+  "2861" -> "2868" 
+  "2861" -> "2875" 
+  "2879" -> "2886" 
+  "2879" -> "2894" 
+  "2906" -> "2905" 
+  "2911" -> "2910" 
+  "2862" -> "2861" 
+  "2866" -> "2873" 
+  "2873" -> "2914" 
+  "2880" -> "2879" 
+  "2884" -> "2891" 
+  "2891" -> "2914" 
+  "2908" -> "2906" 
+  "2913" -> "2911" 
+  "2867" -> "2866" 
+  "2885" -> "2884" 
+  "2868" -> "2870" 
+  "2870" -> "2867" 
+  "2886" -> "2888" 
+  "2888" -> "2885" 
+  "2851" -> "2857" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/580-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/580-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/580-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/580-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "GetPrimitiveArrayRegion&lt;jintArray,jint,mirror::IntArray&gt;" {  
-"19721" [label = <(METHOD,GetPrimitiveArrayRegion&lt;jintArray,jint,mirror::IntArray&gt;)> ]
-"19728" [label = <(METHOD_RETURN,ANY)> ]
-  "19721" -> "19728" 
+digraph "UNUSED" {  
+"19403" [label = <(METHOD,UNUSED)> ]
+"19406" [label = <(METHOD_RETURN,ANY)> ]
+  "19403" -> "19406" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/581-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/581-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/581-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/581-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "GetPrimitiveArrayRegion&lt;jlongArray,jlong,mirror::LongArray&gt;" {  
-"19729" [label = <(METHOD,GetPrimitiveArrayRegion&lt;jlongArray,jlong,mirror::LongArray&gt;)> ]
-"19736" [label = <(METHOD_RETURN,ANY)> ]
-  "19729" -> "19736" 
+digraph "CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_ERR)" {  
+"19407" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_ERR))> ]
+"19412" [label = <(METHOD_RETURN,ANY)> ]
+  "19407" -> "19412" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/582-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/582-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/582-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/582-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "GetPrimitiveArrayRegion&lt;jshortArray,jshort,mirror::ShortArray&gt;" {  
-"19737" [label = <(METHOD,GetPrimitiveArrayRegion&lt;jshortArray,jshort,mirror::ShortArray&gt;)> ]
-"19744" [label = <(METHOD_RETURN,ANY)> ]
-  "19737" -> "19744" 
+digraph "mirror::Class::PrettyClass" {  
+"19413" [label = <(METHOD,mirror::Class::PrettyClass)> ]
+"19417" [label = <(METHOD_RETURN,ANY)> ]
+  "19413" -> "19417" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/583-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/583-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/583-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/583-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "SetPrimitiveArrayRegion&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;" {  
-"19745" [label = <(METHOD,SetPrimitiveArrayRegion&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;)> ]
-"19752" [label = <(METHOD_RETURN,ANY)> ]
-  "19745" -> "19752" 
+digraph "GetMethods" {  
+"19418" [label = <(METHOD,GetMethods)> ]
+"19422" [label = <(METHOD_RETURN,ANY)> ]
+  "19418" -> "19422" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/584-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/584-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/584-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/584-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "SetPrimitiveArrayRegion&lt;jbyteArray,jbyte,mirror::ByteArray&gt;" {  
-"19753" [label = <(METHOD,SetPrimitiveArrayRegion&lt;jbyteArray,jbyte,mirror::ByteArray&gt;)> ]
-"19760" [label = <(METHOD_RETURN,ANY)> ]
-  "19753" -> "19760" 
+digraph "UnregisterNative" {  
+"19423" [label = <(METHOD,UnregisterNative)> ]
+"19426" [label = <(METHOD_RETURN,ANY)> ]
+  "19423" -> "19426" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/585-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/585-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/585-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/585-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "SetPrimitiveArrayRegion&lt;jcharArray,jchar,mirror::CharArray&gt;" {  
-"19761" [label = <(METHOD,SetPrimitiveArrayRegion&lt;jcharArray,jchar,mirror::CharArray&gt;)> ]
-"19768" [label = <(METHOD_RETURN,ANY)> ]
-  "19761" -> "19768" 
+digraph "&lt;operator&gt;.postIncrement" {  
+"19427" [label = <(METHOD,&lt;operator&gt;.postIncrement)> ]
+"19430" [label = <(METHOD_RETURN,ANY)> ]
+  "19427" -> "19430" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/586-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/586-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/586-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/586-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "SetPrimitiveArrayRegion&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;" {  
-"19769" [label = <(METHOD,SetPrimitiveArrayRegion&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;)> ]
-"19776" [label = <(METHOD_RETURN,ANY)> ]
-  "19769" -> "19776" 
+digraph "CHECK_NON_NULL_ARGUMENT_RETURN(vm, JNI_ERR)" {  
+"19431" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN(vm, JNI_ERR))> ]
+"19436" [label = <(METHOD_RETURN,ANY)> ]
+  "19431" -> "19436" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/587-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/587-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/587-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/587-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "SetPrimitiveArrayRegion&lt;jfloatArray,jfloat,mirror::FloatArray&gt;" {  
-"19777" [label = <(METHOD,SetPrimitiveArrayRegion&lt;jfloatArray,jfloat,mirror::FloatArray&gt;)> ]
-"19784" [label = <(METHOD_RETURN,ANY)> ]
-  "19777" -> "19784" 
+digraph "GetJavaVM" {  
+"19437" [label = <(METHOD,GetJavaVM)> ]
+"19440" [label = <(METHOD_RETURN,ANY)> ]
+  "19437" -> "19440" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/588-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/588-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/588-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/588-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "SetPrimitiveArrayRegion&lt;jintArray,jint,mirror::IntArray&gt;" {  
-"19785" [label = <(METHOD,SetPrimitiveArrayRegion&lt;jintArray,jint,mirror::IntArray&gt;)> ]
-"19792" [label = <(METHOD_RETURN,ANY)> ]
-  "19785" -> "19792" 
+digraph "NewObject" {  
+"19441" [label = <(METHOD,NewObject)> ]
+"19446" [label = <(METHOD_RETURN,ANY)> ]
+  "19441" -> "19446" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/589-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/589-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/589-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/589-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "SetPrimitiveArrayRegion&lt;jlongArray,jlong,mirror::LongArray&gt;" {  
-"19793" [label = <(METHOD,SetPrimitiveArrayRegion&lt;jlongArray,jlong,mirror::LongArray&gt;)> ]
-"19800" [label = <(METHOD_RETURN,ANY)> ]
-  "19793" -> "19800" 
+digraph "GetLongField" {  
+"19447" [label = <(METHOD,GetLongField)> ]
+"19452" [label = <(METHOD_RETURN,ANY)> ]
+  "19447" -> "19452" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/59-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/59-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/59-cfg.dot	2023-06-07 19:35:01.397387172 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/59-cfg.dot	2023-06-07 19:35:07.957386523 +0330
@@ -1,71 +1,63 @@
-digraph "GetMethodID" {  
-"2824" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_class))<SUB>898</SUB>> ]
-"2842" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(name))<SUB>899</SUB>> ]
-"2860" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(sig))<SUB>900</SUB>> ]
-"2879" [label = <(soa,soa(env))<SUB>901</SUB>> ]
-"2881" [label = <(RETURN,return FindMethodID&lt;kEnableIndexIds&gt;(soa, java_class, name, sig, false);,return FindMethodID&lt;kEnableIndexIds&gt;(soa, java_class, name, sig, false);)<SUB>902</SUB>> ]
-"2882" [label = <(&lt;operator&gt;.greaterThan,FindMethodID&lt;kEnableIndexIds&gt;(soa, java_class, name, sig, false))<SUB>902</SUB>> ]
-"2883" [label = <(&lt;operator&gt;.lessThan,FindMethodID&lt;kEnableIndexIds)<SUB>902</SUB>> ]
-"2886" [label = <(&lt;operator&gt;.bracketedPrimary,(soa, java_class, name, sig, false))<SUB>902</SUB>> ]
-"2828" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>898</SUB>> ]
-"2846" [label = <(UNLIKELY,UNLIKELY((name) == nullptr))<SUB>899</SUB>> ]
-"2864" [label = <(UNLIKELY,UNLIKELY((sig) == nullptr))<SUB>900</SUB>> ]
-"2887" [label = <(&lt;operator&gt;.expressionList,soa, java_class, name, sig, false)<SUB>902</SUB>> ]
-"2829" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>898</SUB>> ]
-"2833" [label = <(CHECK_NON_NULL_ARGUMENT(java_class),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class == null&quot;))<SUB>898</SUB>> ]
-"2840" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_class),CHECK_NON_NULL_ARGUMENT(java_class))<SUB>898</SUB>> ]
-"2847" [label = <(&lt;operator&gt;.equals,(name) == nullptr)<SUB>899</SUB>> ]
-"2851" [label = <(CHECK_NON_NULL_ARGUMENT(name),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;name == null&quot;))<SUB>899</SUB>> ]
-"2858" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(name),CHECK_NON_NULL_ARGUMENT(name))<SUB>899</SUB>> ]
-"2865" [label = <(&lt;operator&gt;.equals,(sig) == nullptr)<SUB>900</SUB>> ]
-"2869" [label = <(CHECK_NON_NULL_ARGUMENT(sig),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;sig == null&quot;))<SUB>900</SUB>> ]
-"2876" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(sig),CHECK_NON_NULL_ARGUMENT(sig))<SUB>900</SUB>> ]
-"2834" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>898</SUB>> ]
-"2852" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>899</SUB>> ]
-"2870" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>900</SUB>> ]
-"2835" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>898</SUB>> ]
-"2837" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>898</SUB>> ]
-"2853" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>899</SUB>> ]
-"2855" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>899</SUB>> ]
-"2871" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>900</SUB>> ]
-"2873" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>900</SUB>> ]
-"2818" [label = <(METHOD,GetMethodID)<SUB>897</SUB>> ]
-"2893" [label = <(METHOD_RETURN,jmethodID)<SUB>897</SUB>> ]
-  "2824" -> "2829" 
-  "2824" -> "2842" 
-  "2842" -> "2847" 
-  "2842" -> "2860" 
-  "2860" -> "2865" 
-  "2860" -> "2879" 
-  "2879" -> "2883" 
-  "2881" -> "2893" 
-  "2882" -> "2881" 
-  "2883" -> "2887" 
-  "2886" -> "2882" 
-  "2828" -> "2835" 
-  "2828" -> "2842" 
-  "2846" -> "2853" 
-  "2846" -> "2860" 
-  "2864" -> "2871" 
-  "2864" -> "2879" 
-  "2887" -> "2886" 
-  "2829" -> "2828" 
-  "2833" -> "2840" 
-  "2840" -> "2893" 
-  "2847" -> "2846" 
-  "2851" -> "2858" 
-  "2858" -> "2893" 
-  "2865" -> "2864" 
-  "2869" -> "2876" 
-  "2876" -> "2893" 
-  "2834" -> "2833" 
-  "2852" -> "2851" 
-  "2870" -> "2869" 
-  "2835" -> "2837" 
-  "2837" -> "2834" 
-  "2853" -> "2855" 
-  "2855" -> "2852" 
-  "2871" -> "2873" 
-  "2873" -> "2870" 
-  "2818" -> "2824" 
+digraph "CallObjectMethodA" {  
+"2922" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(obj))<SUB>856</SUB>> ]
+"2940" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>857</SUB>> ]
+"2959" [label = <(soa,soa(env))<SUB>858</SUB>> ]
+"2962" [label = <(result,result(InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args)))<SUB>859</SUB>> ]
+"2968" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());)<SUB>860</SUB>> ]
+"2963" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>859</SUB>> ]
+"2969" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>860</SUB>> ]
+"2970" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>860</SUB>> ]
+"2975" [label = <(GetL,result.GetL())<SUB>860</SUB>> ]
+"2926" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>856</SUB>> ]
+"2944" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>857</SUB>> ]
+"2971" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>860</SUB>> ]
+"2976" [label = <(&lt;operator&gt;.fieldAccess,result.GetL)<SUB>860</SUB>> ]
+"2927" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>856</SUB>> ]
+"2931" [label = <(CHECK_NON_NULL_ARGUMENT(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>856</SUB>> ]
+"2938" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(obj),CHECK_NON_NULL_ARGUMENT(obj))<SUB>856</SUB>> ]
+"2945" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>857</SUB>> ]
+"2949" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>857</SUB>> ]
+"2956" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>857</SUB>> ]
+"2973" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>860</SUB>> ]
+"2978" [label = <(FIELD_IDENTIFIER,GetL,GetL)<SUB>860</SUB>> ]
+"2932" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>856</SUB>> ]
+"2950" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>857</SUB>> ]
+"2933" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>856</SUB>> ]
+"2935" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>856</SUB>> ]
+"2951" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>857</SUB>> ]
+"2953" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>857</SUB>> ]
+"2916" [label = <(METHOD,CallObjectMethodA)<SUB>855</SUB>> ]
+"2979" [label = <(METHOD_RETURN,jobject)<SUB>855</SUB>> ]
+  "2922" -> "2927" 
+  "2922" -> "2940" 
+  "2940" -> "2945" 
+  "2940" -> "2959" 
+  "2959" -> "2963" 
+  "2962" -> "2973" 
+  "2968" -> "2979" 
+  "2963" -> "2962" 
+  "2969" -> "2968" 
+  "2970" -> "2978" 
+  "2975" -> "2969" 
+  "2926" -> "2933" 
+  "2926" -> "2940" 
+  "2944" -> "2951" 
+  "2944" -> "2959" 
+  "2971" -> "2970" 
+  "2976" -> "2975" 
+  "2927" -> "2926" 
+  "2931" -> "2938" 
+  "2938" -> "2979" 
+  "2945" -> "2944" 
+  "2949" -> "2956" 
+  "2956" -> "2979" 
+  "2973" -> "2971" 
+  "2978" -> "2976" 
+  "2932" -> "2931" 
+  "2950" -> "2949" 
+  "2933" -> "2935" 
+  "2935" -> "2932" 
+  "2951" -> "2953" 
+  "2953" -> "2950" 
+  "2916" -> "2922" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/590-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/590-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/590-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/590-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "SetPrimitiveArrayRegion&lt;jshortArray,jshort,mirror::ShortArray&gt;" {  
-"19801" [label = <(METHOD,SetPrimitiveArrayRegion&lt;jshortArray,jshort,mirror::ShortArray&gt;)> ]
-"19808" [label = <(METHOD_RETURN,ANY)> ]
-  "19801" -> "19808" 
+digraph "GetIntField" {  
+"19453" [label = <(METHOD,GetIntField)> ]
+"19458" [label = <(METHOD_RETURN,ANY)> ]
+  "19453" -> "19458" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/591-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/591-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/591-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/591-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_FN_NAME" {  
-"19809" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_FN_NAME)<SUB>533</SUB>> ]
-"19814" [label = <(METHOD_RETURN,ANY)> ]
-  "19809" -> "19814" 
+digraph "ArtT::Alloc" {  
+"19459" [label = <(METHOD,ArtT::Alloc)> ]
+"19464" [label = <(METHOD_RETURN,ANY)> ]
+  "19459" -> "19464" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/592-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/592-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/592-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/592-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, java_class, JNI_ERR)" {  
-"19815" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, java_class, JNI_ERR))> ]
-"19820" [label = <(METHOD_RETURN,ANY)> ]
-  "19815" -> "19820" 
+digraph "GetClassRoot&lt;ArtArrayT&gt;" {  
+"19465" [label = <(METHOD,GetClassRoot&lt;ArtArrayT&gt;)> ]
+"19467" [label = <(METHOD_RETURN,ANY)> ]
+  "19465" -> "19467" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/593-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/593-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/593-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/593-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, methods, JNI_ERR)" {  
-"19821" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, methods, JNI_ERR))> ]
-"19826" [label = <(METHOD_RETURN,ANY)> ]
-  "19821" -> "19826" 
+digraph "DecodeAndCheckArrayType&lt;ArrayT,ElementT,ArtArrayT&gt;" {  
+"19468" [label = <(METHOD,DecodeAndCheckArrayType&lt;ArrayT,ElementT,ArtArrayT&gt;)> ]
+"19474" [label = <(METHOD_RETURN,ANY)> ]
+  "19468" -> "19474" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/594-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/594-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/594-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/594-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "IsCheckJniEnabled" {  
-"19827" [label = <(METHOD,IsCheckJniEnabled)> ]
-"19830" [label = <(METHOD_RETURN,ANY)> ]
-  "19827" -> "19830" 
+digraph "GetData" {  
+"19475" [label = <(METHOD,GetData)> ]
+"19478" [label = <(METHOD_RETURN,ANY)> ]
+  "19475" -> "19478" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/595-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/595-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/595-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/595-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "DumpClass" {  
-"19831" [label = <(METHOD,DumpClass)> ]
-"19836" [label = <(METHOD_RETURN,ANY)> ]
-  "19831" -> "19836" 
+digraph "DecodeAndCheckArrayType&lt;JArrayT,ElementT,ArtArrayT&gt;" {  
+"19479" [label = <(METHOD,DecodeAndCheckArrayType&lt;JArrayT,ElementT,ArtArrayT&gt;)> ]
+"19485" [label = <(METHOD_RETURN,ANY)> ]
+  "19479" -> "19485" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/596-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/596-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/596-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/596-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "LOG_STREAM" {  
-"19837" [label = <(METHOD,LOG_STREAM)> ]
-"19840" [label = <(METHOD_RETURN,ANY)> ]
-  "19837" -> "19840" 
+digraph "&lt;operator&gt;.arrayInitializer" {  
+"19486" [label = <(METHOD,&lt;operator&gt;.arrayInitializer)> ]
+"19491" [label = <(METHOD_RETURN,ANY)> ]
+  "19486" -> "19491" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/597-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/597-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/597-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/597-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "ToModifiedUtf8" {  
-"19841" [label = <(METHOD,ToModifiedUtf8)> ]
-"19844" [label = <(METHOD_RETURN,ANY)> ]
-  "19841" -> "19844" 
+digraph "GetJniIdType" {  
+"19492" [label = <(METHOD,GetJniIdType)> ]
+"19495" [label = <(METHOD_RETURN,ANY)> ]
+  "19492" -> "19495" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/598-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/598-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/598-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/598-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "GetLocation" {  
-"19845" [label = <(METHOD,GetLocation)> ]
-"19848" [label = <(METHOD_RETURN,ANY)> ]
-  "19845" -> "19848" 
+digraph "UNREACHABLE" {  
+"19496" [label = <(METHOD,UNREACHABLE)> ]
+"19498" [label = <(METHOD_RETURN,ANY)> ]
+  "19496" -> "19498" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/599-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/599-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/599-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/599-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "GetDexCache" {  
-"19849" [label = <(METHOD,GetDexCache)> ]
-"19852" [label = <(METHOD_RETURN,ANY)> ]
-  "19849" -> "19852" 
+digraph "CommonRuntimeTest::SetUp" {  
+"19499" [label = <(METHOD,CommonRuntimeTest::SetUp)> ]
+"19502" [label = <(METHOD_RETURN,ANY)> ]
+  "19499" -> "19502" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/6-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/6-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/6-cfg.dot	2023-06-07 19:35:01.327387179 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/6-cfg.dot	2023-06-07 19:35:07.907386529 +0330
@@ -1,5 +1,5 @@
-digraph "ScopedVAArgs" {  
-"35" [label = <(METHOD,ScopedVAArgs)<SUB>76</SUB>> ]
-"38" [label = <(METHOD_RETURN,ANY)<SUB>76</SUB>> ]
-  "35" -> "38" 
+digraph "NotifySetPrimitiveField" {  
+"58" [label = <(METHOD,NotifySetPrimitiveField)<SUB>133</SUB>> ]
+"63" [label = <(METHOD_RETURN,void)<SUB>133</SUB>> ]
+  "58" -> "63" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/60-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/60-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/60-cfg.dot	2023-06-07 19:35:01.407387170 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/60-cfg.dot	2023-06-07 19:35:07.957386523 +0330
@@ -1,71 +1,61 @@
-digraph "GetStaticMethodID" {  
-"2901" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_class))<SUB>907</SUB>> ]
-"2919" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(name))<SUB>908</SUB>> ]
-"2937" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(sig))<SUB>909</SUB>> ]
-"2956" [label = <(soa,soa(env))<SUB>910</SUB>> ]
-"2958" [label = <(RETURN,return FindMethodID&lt;kEnableIndexIds&gt;(soa, java_class, name, sig, true);,return FindMethodID&lt;kEnableIndexIds&gt;(soa, java_class, name, sig, true);)<SUB>911</SUB>> ]
-"2959" [label = <(&lt;operator&gt;.greaterThan,FindMethodID&lt;kEnableIndexIds&gt;(soa, java_class, name, sig, true))<SUB>911</SUB>> ]
-"2960" [label = <(&lt;operator&gt;.lessThan,FindMethodID&lt;kEnableIndexIds)<SUB>911</SUB>> ]
-"2963" [label = <(&lt;operator&gt;.bracketedPrimary,(soa, java_class, name, sig, true))<SUB>911</SUB>> ]
-"2905" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>907</SUB>> ]
-"2923" [label = <(UNLIKELY,UNLIKELY((name) == nullptr))<SUB>908</SUB>> ]
-"2941" [label = <(UNLIKELY,UNLIKELY((sig) == nullptr))<SUB>909</SUB>> ]
-"2964" [label = <(&lt;operator&gt;.expressionList,soa, java_class, name, sig, true)<SUB>911</SUB>> ]
-"2906" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>907</SUB>> ]
-"2910" [label = <(CHECK_NON_NULL_ARGUMENT(java_class),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class == null&quot;))<SUB>907</SUB>> ]
-"2917" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_class),CHECK_NON_NULL_ARGUMENT(java_class))<SUB>907</SUB>> ]
-"2924" [label = <(&lt;operator&gt;.equals,(name) == nullptr)<SUB>908</SUB>> ]
-"2928" [label = <(CHECK_NON_NULL_ARGUMENT(name),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;name == null&quot;))<SUB>908</SUB>> ]
-"2935" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(name),CHECK_NON_NULL_ARGUMENT(name))<SUB>908</SUB>> ]
-"2942" [label = <(&lt;operator&gt;.equals,(sig) == nullptr)<SUB>909</SUB>> ]
-"2946" [label = <(CHECK_NON_NULL_ARGUMENT(sig),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;sig == null&quot;))<SUB>909</SUB>> ]
-"2953" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(sig),CHECK_NON_NULL_ARGUMENT(sig))<SUB>909</SUB>> ]
-"2911" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>907</SUB>> ]
-"2929" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>908</SUB>> ]
-"2947" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>909</SUB>> ]
-"2912" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>907</SUB>> ]
-"2914" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>907</SUB>> ]
-"2930" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>908</SUB>> ]
-"2932" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>908</SUB>> ]
-"2948" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>909</SUB>> ]
-"2950" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>909</SUB>> ]
-"2895" [label = <(METHOD,GetStaticMethodID)<SUB>905</SUB>> ]
-"2970" [label = <(METHOD_RETURN,jmethodID)<SUB>905</SUB>> ]
-  "2901" -> "2906" 
-  "2901" -> "2919" 
-  "2919" -> "2924" 
-  "2919" -> "2937" 
-  "2937" -> "2942" 
-  "2937" -> "2956" 
-  "2956" -> "2960" 
-  "2958" -> "2970" 
-  "2959" -> "2958" 
-  "2960" -> "2964" 
-  "2963" -> "2959" 
-  "2905" -> "2912" 
-  "2905" -> "2919" 
-  "2923" -> "2930" 
-  "2923" -> "2937" 
-  "2941" -> "2948" 
-  "2941" -> "2956" 
-  "2964" -> "2963" 
-  "2906" -> "2905" 
-  "2910" -> "2917" 
-  "2917" -> "2970" 
-  "2924" -> "2923" 
-  "2928" -> "2935" 
-  "2935" -> "2970" 
-  "2942" -> "2941" 
-  "2946" -> "2953" 
-  "2953" -> "2970" 
-  "2911" -> "2910" 
-  "2929" -> "2928" 
-  "2947" -> "2946" 
-  "2912" -> "2914" 
-  "2914" -> "2911" 
-  "2930" -> "2932" 
-  "2932" -> "2929" 
-  "2948" -> "2950" 
-  "2950" -> "2947" 
-  "2895" -> "2901" 
+digraph "CallBooleanMethod" {  
+"2987" [label = <(va_start,va_start(ap, mid))<SUB>865</SUB>> ]
+"2991" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>866</SUB>> ]
+"2994" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>867</SUB>> ]
+"3012" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>868</SUB>> ]
+"3031" [label = <(soa,soa(env))<SUB>869</SUB>> ]
+"3034" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap)))<SUB>870</SUB>> ]
+"3040" [label = <(RETURN,return result.GetZ();,return result.GetZ();)<SUB>871</SUB>> ]
+"2992" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>866</SUB>> ]
+"3035" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>870</SUB>> ]
+"3041" [label = <(GetZ,result.GetZ())<SUB>871</SUB>> ]
+"3042" [label = <(&lt;operator&gt;.fieldAccess,result.GetZ)<SUB>871</SUB>> ]
+"2998" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>867</SUB>> ]
+"3016" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>868</SUB>> ]
+"3044" [label = <(FIELD_IDENTIFIER,GetZ,GetZ)<SUB>871</SUB>> ]
+"2999" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>867</SUB>> ]
+"3003" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>867</SUB>> ]
+"3010" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>867</SUB>> ]
+"3017" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>868</SUB>> ]
+"3021" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>868</SUB>> ]
+"3028" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>868</SUB>> ]
+"3004" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>867</SUB>> ]
+"3022" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>868</SUB>> ]
+"3005" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>867</SUB>> ]
+"3007" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>867</SUB>> ]
+"3023" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>868</SUB>> ]
+"3025" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>868</SUB>> ]
+"2981" [label = <(METHOD,CallBooleanMethod)<SUB>863</SUB>> ]
+"3045" [label = <(METHOD_RETURN,jboolean)<SUB>863</SUB>> ]
+  "2987" -> "2992" 
+  "2991" -> "2994" 
+  "2994" -> "2999" 
+  "2994" -> "3012" 
+  "3012" -> "3017" 
+  "3012" -> "3031" 
+  "3031" -> "3035" 
+  "3034" -> "3044" 
+  "3040" -> "3045" 
+  "2992" -> "2991" 
+  "3035" -> "3034" 
+  "3041" -> "3040" 
+  "3042" -> "3041" 
+  "2998" -> "3005" 
+  "2998" -> "3012" 
+  "3016" -> "3023" 
+  "3016" -> "3031" 
+  "3044" -> "3042" 
+  "2999" -> "2998" 
+  "3003" -> "3010" 
+  "3010" -> "3045" 
+  "3017" -> "3016" 
+  "3021" -> "3028" 
+  "3028" -> "3045" 
+  "3004" -> "3003" 
+  "3022" -> "3021" 
+  "3005" -> "3007" 
+  "3007" -> "3004" 
+  "3023" -> "3025" 
+  "3025" -> "3022" 
+  "2981" -> "2987" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/600-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/600-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/600-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/600-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "IsNative" {  
-"19853" [label = <(METHOD,IsNative)> ]
-"19856" [label = <(METHOD_RETURN,ANY)> ]
-  "19853" -> "19856" 
+digraph "AttachCurrentThread" {  
+"19503" [label = <(METHOD,AttachCurrentThread)> ]
+"19508" [label = <(METHOD_RETURN,ANY)> ]
+  "19503" -> "19508" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/601-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/601-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/601-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/601-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "VLOG" {  
-"19857" [label = <(METHOD,VLOG)> ]
-"19860" [label = <(METHOD_RETURN,ANY)> ]
-  "19857" -> "19860" 
+digraph "aioobe" {  
+"19509" [label = <(METHOD,aioobe)> ]
+"19513" [label = <(METHOD_RETURN,ANY)> ]
+  "19509" -> "19513" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/602-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/602-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/602-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/602-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "PrettyMethod" {  
-"19861" [label = <(METHOD,PrettyMethod)> ]
-"19864" [label = <(METHOD_RETURN,ANY)> ]
-  "19861" -> "19864" 
+digraph "NewGlobalRef" {  
+"19514" [label = <(METHOD,NewGlobalRef)> ]
+"19519" [label = <(METHOD_RETURN,ANY)> ]
+  "19514" -> "19519" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/603-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/603-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/603-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/603-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "RegisterNative" {  
-"19865" [label = <(METHOD,RegisterNative)> ]
-"19869" [label = <(METHOD_RETURN,ANY)> ]
-  "19865" -> "19869" 
+digraph "ase" {  
+"19520" [label = <(METHOD,ase)> ]
+"19524" [label = <(METHOD_RETURN,ANY)> ]
+  "19520" -> "19524" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/604-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/604-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/604-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/604-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "UNUSED" {  
-"19870" [label = <(METHOD,UNUSED)> ]
-"19873" [label = <(METHOD_RETURN,ANY)> ]
-  "19870" -> "19873" 
+digraph "sioobe" {  
+"19525" [label = <(METHOD,sioobe)> ]
+"19529" [label = <(METHOD_RETURN,ANY)> ]
+  "19525" -> "19529" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/605-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/605-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/605-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/605-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_ERR)" {  
-"19874" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_ERR))> ]
-"19879" [label = <(METHOD_RETURN,ANY)> ]
-  "19874" -> "19879" 
+digraph "EXPECT_TRUE" {  
+"19530" [label = <(METHOD,EXPECT_TRUE)> ]
+"19533" [label = <(METHOD_RETURN,ANY)> ]
+  "19530" -> "19533" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/606-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/606-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/606-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/606-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "mirror::Class::PrettyClass" {  
-"19880" [label = <(METHOD,mirror::Class::PrettyClass)> ]
-"19884" [label = <(METHOD_RETURN,ANY)> ]
-  "19880" -> "19884" 
+digraph "ExceptionCheck" {  
+"19534" [label = <(METHOD,ExceptionCheck)> ]
+"19537" [label = <(METHOD_RETURN,ANY)> ]
+  "19534" -> "19537" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/607-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/607-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/607-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/607-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "GetMethods" {  
-"19885" [label = <(METHOD,GetMethods)> ]
-"19889" [label = <(METHOD_RETURN,ANY)> ]
-  "19885" -> "19889" 
+digraph "ExceptionOccurred" {  
+"19538" [label = <(METHOD,ExceptionOccurred)> ]
+"19541" [label = <(METHOD_RETURN,ANY)> ]
+  "19538" -> "19541" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/608-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/608-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/608-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/608-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "UnregisterNative" {  
-"19890" [label = <(METHOD,UnregisterNative)> ]
-"19893" [label = <(METHOD_RETURN,ANY)> ]
-  "19890" -> "19893" 
+digraph "EXPECT_NE" {  
+"19542" [label = <(METHOD,EXPECT_NE)> ]
+"19546" [label = <(METHOD_RETURN,ANY)> ]
+  "19542" -> "19546" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/609-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/609-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/609-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/609-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.postIncrement" {  
-"19894" [label = <(METHOD,&lt;operator&gt;.postIncrement)> ]
-"19897" [label = <(METHOD_RETURN,ANY)> ]
-  "19894" -> "19897" 
+digraph "ExceptionClear" {  
+"19547" [label = <(METHOD,ExceptionClear)> ]
+"19550" [label = <(METHOD_RETURN,ANY)> ]
+  "19547" -> "19550" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/61-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/61-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/61-cfg.dot	2023-06-07 19:35:01.407387170 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/61-cfg.dot	2023-06-07 19:35:07.957386523 +0330
@@ -1,69 +1,53 @@
-digraph "CallObjectMethod" {  
-"2978" [label = <(va_start,va_start(ap, mid))<SUB>916</SUB>> ]
-"2982" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>917</SUB>> ]
-"2985" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(obj))<SUB>918</SUB>> ]
-"3003" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>919</SUB>> ]
-"3022" [label = <(soa,soa(env))<SUB>920</SUB>> ]
-"3025" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap)))<SUB>921</SUB>> ]
-"3031" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());)<SUB>922</SUB>> ]
-"2983" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>917</SUB>> ]
-"3026" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>921</SUB>> ]
-"3032" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>922</SUB>> ]
-"3033" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>922</SUB>> ]
-"3038" [label = <(GetL,result.GetL())<SUB>922</SUB>> ]
-"2989" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>918</SUB>> ]
-"3007" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>919</SUB>> ]
-"3034" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>922</SUB>> ]
-"3039" [label = <(&lt;operator&gt;.fieldAccess,result.GetL)<SUB>922</SUB>> ]
-"2990" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>918</SUB>> ]
-"2994" [label = <(CHECK_NON_NULL_ARGUMENT(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>918</SUB>> ]
-"3001" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(obj),CHECK_NON_NULL_ARGUMENT(obj))<SUB>918</SUB>> ]
-"3008" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>919</SUB>> ]
-"3012" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>919</SUB>> ]
-"3019" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>919</SUB>> ]
-"3036" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>922</SUB>> ]
-"3041" [label = <(FIELD_IDENTIFIER,GetL,GetL)<SUB>922</SUB>> ]
-"2995" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>918</SUB>> ]
-"3013" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>919</SUB>> ]
-"2996" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>918</SUB>> ]
-"2998" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>918</SUB>> ]
-"3014" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>919</SUB>> ]
-"3016" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>919</SUB>> ]
-"2972" [label = <(METHOD,CallObjectMethod)<SUB>914</SUB>> ]
-"3042" [label = <(METHOD_RETURN,jobject)<SUB>914</SUB>> ]
-  "2978" -> "2983" 
-  "2982" -> "2985" 
-  "2985" -> "2990" 
-  "2985" -> "3003" 
-  "3003" -> "3008" 
-  "3003" -> "3022" 
-  "3022" -> "3026" 
-  "3025" -> "3036" 
-  "3031" -> "3042" 
-  "2983" -> "2982" 
-  "3026" -> "3025" 
-  "3032" -> "3031" 
-  "3033" -> "3041" 
-  "3038" -> "3032" 
-  "2989" -> "2996" 
-  "2989" -> "3003" 
-  "3007" -> "3014" 
-  "3007" -> "3022" 
-  "3034" -> "3033" 
-  "3039" -> "3038" 
-  "2990" -> "2989" 
-  "2994" -> "3001" 
-  "3001" -> "3042" 
-  "3008" -> "3007" 
-  "3012" -> "3019" 
-  "3019" -> "3042" 
-  "3036" -> "3034" 
-  "3041" -> "3039" 
-  "2995" -> "2994" 
-  "3013" -> "3012" 
-  "2996" -> "2998" 
-  "2998" -> "2995" 
-  "3014" -> "3016" 
-  "3016" -> "3013" 
-  "2972" -> "2978" 
+digraph "CallBooleanMethodV" {  
+"3053" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>875</SUB>> ]
+"3071" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>876</SUB>> ]
+"3090" [label = <(soa,soa(env))<SUB>877</SUB>> ]
+"3092" [label = <(RETURN,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetZ();,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetZ();)<SUB>878</SUB>> ]
+"3093" [label = <(GetZ,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetZ())<SUB>878</SUB>> ]
+"3094" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetZ)<SUB>878</SUB>> ]
+"3057" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>875</SUB>> ]
+"3075" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>876</SUB>> ]
+"3095" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>878</SUB>> ]
+"3100" [label = <(FIELD_IDENTIFIER,GetZ,GetZ)<SUB>878</SUB>> ]
+"3058" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>875</SUB>> ]
+"3062" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>875</SUB>> ]
+"3069" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>875</SUB>> ]
+"3076" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>876</SUB>> ]
+"3080" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>876</SUB>> ]
+"3087" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>876</SUB>> ]
+"3063" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>875</SUB>> ]
+"3081" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>876</SUB>> ]
+"3064" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>875</SUB>> ]
+"3066" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>875</SUB>> ]
+"3082" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>876</SUB>> ]
+"3084" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>876</SUB>> ]
+"3047" [label = <(METHOD,CallBooleanMethodV)<SUB>874</SUB>> ]
+"3101" [label = <(METHOD_RETURN,jboolean)<SUB>874</SUB>> ]
+  "3053" -> "3058" 
+  "3053" -> "3071" 
+  "3071" -> "3076" 
+  "3071" -> "3090" 
+  "3090" -> "3095" 
+  "3092" -> "3101" 
+  "3093" -> "3092" 
+  "3094" -> "3093" 
+  "3057" -> "3064" 
+  "3057" -> "3071" 
+  "3075" -> "3082" 
+  "3075" -> "3090" 
+  "3095" -> "3100" 
+  "3100" -> "3094" 
+  "3058" -> "3057" 
+  "3062" -> "3069" 
+  "3069" -> "3101" 
+  "3076" -> "3075" 
+  "3080" -> "3087" 
+  "3087" -> "3101" 
+  "3063" -> "3062" 
+  "3081" -> "3080" 
+  "3064" -> "3066" 
+  "3066" -> "3063" 
+  "3082" -> "3084" 
+  "3084" -> "3081" 
+  "3047" -> "3053" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/610-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/610-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/610-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/610-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_RETURN(vm, JNI_ERR)" {  
-"19898" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN(vm, JNI_ERR))> ]
-"19903" [label = <(METHOD_RETURN,ANY)> ]
-  "19898" -> "19903" 
+digraph "IsInstanceOf" {  
+"19551" [label = <(METHOD,IsInstanceOf)> ]
+"19556" [label = <(METHOD_RETURN,ANY)> ]
+  "19551" -> "19556" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/611-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/611-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/611-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/611-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "GetJavaVM" {  
-"19904" [label = <(METHOD,GetJavaVM)> ]
-"19907" [label = <(METHOD_RETURN,ANY)> ]
-  "19904" -> "19907" 
+digraph "CleanUpJniEnv" {  
+"19557" [label = <(METHOD,CleanUpJniEnv)> ]
+"19559" [label = <(METHOD_RETURN,ANY)> ]
+  "19557" -> "19559" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/612-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/612-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/612-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/612-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "NewObject" {  
-"19908" [label = <(METHOD,NewObject)> ]
-"19913" [label = <(METHOD_RETURN,ANY)> ]
-  "19908" -> "19913" 
+digraph "CommonRuntimeTest::TearDown" {  
+"19560" [label = <(METHOD,CommonRuntimeTest::TearDown)> ]
+"19563" [label = <(METHOD_RETURN,ANY)> ]
+  "19560" -> "19563" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/613-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/613-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/613-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/613-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "GetLongField" {  
-"19914" [label = <(METHOD,GetLongField)> ]
-"19919" [label = <(METHOD_RETURN,ANY)> ]
-  "19914" -> "19919" 
+digraph "EXPECT_FALSE" {  
+"19564" [label = <(METHOD,EXPECT_FALSE)> ]
+"19567" [label = <(METHOD_RETURN,ANY)> ]
+  "19564" -> "19567" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/614-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/614-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/614-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/614-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "GetIntField" {  
-"19920" [label = <(METHOD,GetIntField)> ]
-"19925" [label = <(METHOD_RETURN,ANY)> ]
-  "19920" -> "19925" 
+digraph "EXPECT_EQ" {  
+"19568" [label = <(METHOD,EXPECT_EQ)> ]
+"19572" [label = <(METHOD_RETURN,ANY)> ]
+  "19568" -> "19572" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/615-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/615-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/615-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/615-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "ArtT::Alloc" {  
-"19926" [label = <(METHOD,ArtT::Alloc)> ]
-"19931" [label = <(METHOD_RETURN,ANY)> ]
-  "19926" -> "19931" 
+digraph "Check" {  
+"19573" [label = <(METHOD,Check)> ]
+"19577" [label = <(METHOD_RETURN,ANY)> ]
+  "19573" -> "19577" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/616-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/616-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/616-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/616-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "GetClassRoot&lt;ArtArrayT&gt;" {  
-"19932" [label = <(METHOD,GetClassRoot&lt;ArtArrayT&gt;)> ]
-"19934" [label = <(METHOD_RETURN,ANY)> ]
-  "19932" -> "19934" 
+digraph "SetCheckJniEnabled" {  
+"19578" [label = <(METHOD,SetCheckJniEnabled)> ]
+"19582" [label = <(METHOD_RETURN,ANY)> ]
+  "19578" -> "19582" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/617-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/617-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/617-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/617-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "DecodeAndCheckArrayType&lt;ArrayT,ElementT,ArtArrayT&gt;" {  
-"19935" [label = <(METHOD,DecodeAndCheckArrayType&lt;ArrayT,ElementT,ArtArrayT&gt;)> ]
-"19941" [label = <(METHOD_RETURN,ANY)> ]
-  "19935" -> "19941" 
+digraph "ExpectClassFound" {  
+"19583" [label = <(METHOD,ExpectClassFound)> ]
+"19586" [label = <(METHOD_RETURN,ANY)> ]
+  "19583" -> "19586" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/618-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/618-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/618-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/618-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "GetData" {  
-"19942" [label = <(METHOD,GetData)> ]
-"19945" [label = <(METHOD_RETURN,ANY)> ]
-  "19942" -> "19945" 
+digraph "ExpectClassNotFound" {  
+"19587" [label = <(METHOD,ExpectClassNotFound)> ]
+"19593" [label = <(METHOD_RETURN,ANY)> ]
+  "19587" -> "19593" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/619-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/619-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/619-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/619-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "DecodeAndCheckArrayType&lt;JArrayT,ElementT,ArtArrayT&gt;" {  
-"19946" [label = <(METHOD,DecodeAndCheckArrayType&lt;JArrayT,ElementT,ArtArrayT&gt;)> ]
-"19952" [label = <(METHOD_RETURN,ANY)> ]
-  "19946" -> "19952" 
+digraph "ASSERT_NE" {  
+"19594" [label = <(METHOD,ASSERT_NE)> ]
+"19598" [label = <(METHOD_RETURN,ANY)> ]
+  "19594" -> "19598" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/62-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/62-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/62-cfg.dot	2023-06-07 19:35:01.407387170 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/62-cfg.dot	2023-06-07 19:35:07.957386523 +0330
@@ -1,63 +1,53 @@
-digraph "CallObjectMethodV" {  
-"3050" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(obj))<SUB>926</SUB>> ]
-"3068" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>927</SUB>> ]
-"3087" [label = <(soa,soa(env))<SUB>928</SUB>> ]
-"3090" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args)))<SUB>929</SUB>> ]
-"3096" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());)<SUB>930</SUB>> ]
-"3091" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>929</SUB>> ]
-"3097" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>930</SUB>> ]
-"3098" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>930</SUB>> ]
-"3103" [label = <(GetL,result.GetL())<SUB>930</SUB>> ]
-"3054" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>926</SUB>> ]
-"3072" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>927</SUB>> ]
-"3099" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>930</SUB>> ]
-"3104" [label = <(&lt;operator&gt;.fieldAccess,result.GetL)<SUB>930</SUB>> ]
-"3055" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>926</SUB>> ]
-"3059" [label = <(CHECK_NON_NULL_ARGUMENT(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>926</SUB>> ]
-"3066" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(obj),CHECK_NON_NULL_ARGUMENT(obj))<SUB>926</SUB>> ]
-"3073" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>927</SUB>> ]
-"3077" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>927</SUB>> ]
-"3084" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>927</SUB>> ]
-"3101" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>930</SUB>> ]
-"3106" [label = <(FIELD_IDENTIFIER,GetL,GetL)<SUB>930</SUB>> ]
-"3060" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>926</SUB>> ]
-"3078" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>927</SUB>> ]
-"3061" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>926</SUB>> ]
-"3063" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>926</SUB>> ]
-"3079" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>927</SUB>> ]
-"3081" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>927</SUB>> ]
-"3044" [label = <(METHOD,CallObjectMethodV)<SUB>925</SUB>> ]
-"3107" [label = <(METHOD_RETURN,jobject)<SUB>925</SUB>> ]
-  "3050" -> "3055" 
-  "3050" -> "3068" 
-  "3068" -> "3073" 
-  "3068" -> "3087" 
-  "3087" -> "3091" 
-  "3090" -> "3101" 
-  "3096" -> "3107" 
-  "3091" -> "3090" 
-  "3097" -> "3096" 
-  "3098" -> "3106" 
-  "3103" -> "3097" 
-  "3054" -> "3061" 
-  "3054" -> "3068" 
-  "3072" -> "3079" 
-  "3072" -> "3087" 
-  "3099" -> "3098" 
-  "3104" -> "3103" 
-  "3055" -> "3054" 
-  "3059" -> "3066" 
-  "3066" -> "3107" 
-  "3073" -> "3072" 
-  "3077" -> "3084" 
-  "3084" -> "3107" 
-  "3101" -> "3099" 
-  "3106" -> "3104" 
-  "3060" -> "3059" 
-  "3078" -> "3077" 
-  "3061" -> "3063" 
-  "3063" -> "3060" 
-  "3079" -> "3081" 
-  "3081" -> "3078" 
-  "3044" -> "3050" 
+digraph "CallBooleanMethodA" {  
+"3109" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>882</SUB>> ]
+"3127" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>883</SUB>> ]
+"3146" [label = <(soa,soa(env))<SUB>884</SUB>> ]
+"3148" [label = <(RETURN,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetZ();,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetZ();)<SUB>885</SUB>> ]
+"3149" [label = <(GetZ,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetZ())<SUB>885</SUB>> ]
+"3150" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetZ)<SUB>885</SUB>> ]
+"3113" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>882</SUB>> ]
+"3131" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>883</SUB>> ]
+"3151" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>885</SUB>> ]
+"3156" [label = <(FIELD_IDENTIFIER,GetZ,GetZ)<SUB>885</SUB>> ]
+"3114" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>882</SUB>> ]
+"3118" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>882</SUB>> ]
+"3125" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>882</SUB>> ]
+"3132" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>883</SUB>> ]
+"3136" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>883</SUB>> ]
+"3143" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>883</SUB>> ]
+"3119" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>882</SUB>> ]
+"3137" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>883</SUB>> ]
+"3120" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>882</SUB>> ]
+"3122" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>882</SUB>> ]
+"3138" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>883</SUB>> ]
+"3140" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>883</SUB>> ]
+"3103" [label = <(METHOD,CallBooleanMethodA)<SUB>881</SUB>> ]
+"3157" [label = <(METHOD_RETURN,jboolean)<SUB>881</SUB>> ]
+  "3109" -> "3114" 
+  "3109" -> "3127" 
+  "3127" -> "3132" 
+  "3127" -> "3146" 
+  "3146" -> "3151" 
+  "3148" -> "3157" 
+  "3149" -> "3148" 
+  "3150" -> "3149" 
+  "3113" -> "3120" 
+  "3113" -> "3127" 
+  "3131" -> "3138" 
+  "3131" -> "3146" 
+  "3151" -> "3156" 
+  "3156" -> "3150" 
+  "3114" -> "3113" 
+  "3118" -> "3125" 
+  "3125" -> "3157" 
+  "3132" -> "3131" 
+  "3136" -> "3143" 
+  "3143" -> "3157" 
+  "3119" -> "3118" 
+  "3137" -> "3136" 
+  "3120" -> "3122" 
+  "3122" -> "3119" 
+  "3138" -> "3140" 
+  "3140" -> "3137" 
+  "3103" -> "3109" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/620-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/620-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/620-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/620-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.arrayInitializer" {  
-"19953" [label = <(METHOD,&lt;operator&gt;.arrayInitializer)> ]
-"19958" [label = <(METHOD_RETURN,ANY)> ]
-  "19953" -> "19958" 
+digraph "GetFieldID" {  
+"19599" [label = <(METHOD,GetFieldID)> ]
+"19605" [label = <(METHOD_RETURN,ANY)> ]
+  "19599" -> "19605" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/621-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/621-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/621-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/621-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "GetJniIdType" {  
-"19959" [label = <(METHOD,GetJniIdType)> ]
-"19962" [label = <(METHOD_RETURN,ANY)> ]
-  "19959" -> "19962" 
+digraph "GetStaticFieldID" {  
+"19606" [label = <(METHOD,GetStaticFieldID)> ]
+"19612" [label = <(METHOD_RETURN,ANY)> ]
+  "19606" -> "19612" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/622-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/622-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/622-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/622-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "UNREACHABLE" {  
-"19963" [label = <(METHOD,UNREACHABLE)> ]
-"19965" [label = <(METHOD_RETURN,ANY)> ]
-  "19963" -> "19965" 
+digraph "ASSERT_TRUE" {  
+"19613" [label = <(METHOD,ASSERT_TRUE)> ]
+"19616" [label = <(METHOD_RETURN,ANY)> ]
+  "19613" -> "19616" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/623-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/623-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/623-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/623-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "CommonRuntimeTest::SetUp" {  
-"19966" [label = <(METHOD,CommonRuntimeTest::SetUp)> ]
-"19969" [label = <(METHOD_RETURN,ANY)> ]
-  "19966" -> "19969" 
+digraph "GetStaticMethodID" {  
+"19617" [label = <(METHOD,GetStaticMethodID)> ]
+"19623" [label = <(METHOD_RETURN,ANY)> ]
+  "19617" -> "19623" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/624-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/624-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/624-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/624-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "AttachCurrentThread" {  
-"19970" [label = <(METHOD,AttachCurrentThread)> ]
-"19975" [label = <(METHOD_RETURN,ANY)> ]
-  "19970" -> "19975" 
+digraph "ToReflectedField" {  
+"19624" [label = <(METHOD,ToReflectedField)> ]
+"19630" [label = <(METHOD_RETURN,ANY)> ]
+  "19624" -> "19630" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/625-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/625-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/625-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/625-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "aioobe" {  
-"19976" [label = <(METHOD,aioobe)> ]
-"19980" [label = <(METHOD_RETURN,ANY)> ]
-  "19976" -> "19980" 
+digraph "FromReflectedField" {  
+"19631" [label = <(METHOD,FromReflectedField)> ]
+"19635" [label = <(METHOD_RETURN,ANY)> ]
+  "19631" -> "19635" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/626-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/626-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/626-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/626-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "NewGlobalRef" {  
-"19981" [label = <(METHOD,NewGlobalRef)> ]
-"19986" [label = <(METHOD_RETURN,ANY)> ]
-  "19981" -> "19986" 
+digraph "ASSERT_EQ" {  
+"19636" [label = <(METHOD,ASSERT_EQ)> ]
+"19640" [label = <(METHOD_RETURN,ANY)> ]
+  "19636" -> "19640" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/627-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/627-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/627-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/627-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "ase" {  
-"19987" [label = <(METHOD,ase)> ]
-"19991" [label = <(METHOD_RETURN,ANY)> ]
-  "19987" -> "19991" 
+digraph "ToReflectedMethod" {  
+"19641" [label = <(METHOD,ToReflectedMethod)> ]
+"19647" [label = <(METHOD_RETURN,ANY)> ]
+  "19641" -> "19647" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/628-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/628-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/628-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/628-cfg.dot	2023-06-07 19:35:08.197386500 +0330
@@ -1,5 +1,5 @@
-digraph "sioobe" {  
-"19992" [label = <(METHOD,sioobe)> ]
-"19996" [label = <(METHOD_RETURN,ANY)> ]
-  "19992" -> "19996" 
+digraph "FromReflectedMethod" {  
+"19648" [label = <(METHOD,FromReflectedMethod)> ]
+"19652" [label = <(METHOD_RETURN,ANY)> ]
+  "19648" -> "19652" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/629-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/629-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/629-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/629-cfg.dot	2023-06-07 19:35:08.207386498 +0330
@@ -1,5 +1,5 @@
-digraph "EXPECT_TRUE" {  
-"19997" [label = <(METHOD,EXPECT_TRUE)> ]
-"20000" [label = <(METHOD_RETURN,ANY)> ]
-  "19997" -> "20000" 
+digraph "RegisterNatives" {  
+"19653" [label = <(METHOD,RegisterNatives)> ]
+"19659" [label = <(METHOD_RETURN,ANY)> ]
+  "19653" -> "19659" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/63-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/63-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/63-cfg.dot	2023-06-07 19:35:01.407387170 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/63-cfg.dot	2023-06-07 19:35:07.967386521 +0330
@@ -1,63 +1,61 @@
-digraph "CallObjectMethodA" {  
-"3115" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(obj))<SUB>934</SUB>> ]
-"3133" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>935</SUB>> ]
-"3152" [label = <(soa,soa(env))<SUB>936</SUB>> ]
-"3155" [label = <(result,result(InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args)))<SUB>937</SUB>> ]
-"3161" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());)<SUB>938</SUB>> ]
-"3156" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>937</SUB>> ]
-"3162" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>938</SUB>> ]
-"3163" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>938</SUB>> ]
-"3168" [label = <(GetL,result.GetL())<SUB>938</SUB>> ]
-"3119" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>934</SUB>> ]
-"3137" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>935</SUB>> ]
-"3164" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>938</SUB>> ]
-"3169" [label = <(&lt;operator&gt;.fieldAccess,result.GetL)<SUB>938</SUB>> ]
-"3120" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>934</SUB>> ]
-"3124" [label = <(CHECK_NON_NULL_ARGUMENT(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>934</SUB>> ]
-"3131" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(obj),CHECK_NON_NULL_ARGUMENT(obj))<SUB>934</SUB>> ]
-"3138" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>935</SUB>> ]
-"3142" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>935</SUB>> ]
-"3149" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>935</SUB>> ]
-"3166" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>938</SUB>> ]
-"3171" [label = <(FIELD_IDENTIFIER,GetL,GetL)<SUB>938</SUB>> ]
-"3125" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>934</SUB>> ]
-"3143" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>935</SUB>> ]
-"3126" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>934</SUB>> ]
-"3128" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>934</SUB>> ]
-"3144" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>935</SUB>> ]
-"3146" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>935</SUB>> ]
-"3109" [label = <(METHOD,CallObjectMethodA)<SUB>933</SUB>> ]
-"3172" [label = <(METHOD_RETURN,jobject)<SUB>933</SUB>> ]
-  "3115" -> "3120" 
-  "3115" -> "3133" 
-  "3133" -> "3138" 
-  "3133" -> "3152" 
-  "3152" -> "3156" 
-  "3155" -> "3166" 
-  "3161" -> "3172" 
-  "3156" -> "3155" 
-  "3162" -> "3161" 
-  "3163" -> "3171" 
-  "3168" -> "3162" 
-  "3119" -> "3126" 
-  "3119" -> "3133" 
-  "3137" -> "3144" 
-  "3137" -> "3152" 
-  "3164" -> "3163" 
-  "3169" -> "3168" 
-  "3120" -> "3119" 
-  "3124" -> "3131" 
-  "3131" -> "3172" 
-  "3138" -> "3137" 
-  "3142" -> "3149" 
-  "3149" -> "3172" 
-  "3166" -> "3164" 
-  "3171" -> "3169" 
-  "3125" -> "3124" 
-  "3143" -> "3142" 
-  "3126" -> "3128" 
-  "3128" -> "3125" 
-  "3144" -> "3146" 
-  "3146" -> "3143" 
-  "3109" -> "3115" 
+digraph "CallByteMethod" {  
+"3165" [label = <(va_start,va_start(ap, mid))<SUB>890</SUB>> ]
+"3169" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>891</SUB>> ]
+"3172" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>892</SUB>> ]
+"3190" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>893</SUB>> ]
+"3209" [label = <(soa,soa(env))<SUB>894</SUB>> ]
+"3212" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap)))<SUB>895</SUB>> ]
+"3218" [label = <(RETURN,return result.GetB();,return result.GetB();)<SUB>896</SUB>> ]
+"3170" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>891</SUB>> ]
+"3213" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>895</SUB>> ]
+"3219" [label = <(GetB,result.GetB())<SUB>896</SUB>> ]
+"3220" [label = <(&lt;operator&gt;.fieldAccess,result.GetB)<SUB>896</SUB>> ]
+"3176" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>892</SUB>> ]
+"3194" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>893</SUB>> ]
+"3222" [label = <(FIELD_IDENTIFIER,GetB,GetB)<SUB>896</SUB>> ]
+"3177" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>892</SUB>> ]
+"3181" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>892</SUB>> ]
+"3188" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>892</SUB>> ]
+"3195" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>893</SUB>> ]
+"3199" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>893</SUB>> ]
+"3206" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>893</SUB>> ]
+"3182" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>892</SUB>> ]
+"3200" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>893</SUB>> ]
+"3183" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>892</SUB>> ]
+"3185" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>892</SUB>> ]
+"3201" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>893</SUB>> ]
+"3203" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>893</SUB>> ]
+"3159" [label = <(METHOD,CallByteMethod)<SUB>888</SUB>> ]
+"3223" [label = <(METHOD_RETURN,jbyte)<SUB>888</SUB>> ]
+  "3165" -> "3170" 
+  "3169" -> "3172" 
+  "3172" -> "3177" 
+  "3172" -> "3190" 
+  "3190" -> "3195" 
+  "3190" -> "3209" 
+  "3209" -> "3213" 
+  "3212" -> "3222" 
+  "3218" -> "3223" 
+  "3170" -> "3169" 
+  "3213" -> "3212" 
+  "3219" -> "3218" 
+  "3220" -> "3219" 
+  "3176" -> "3183" 
+  "3176" -> "3190" 
+  "3194" -> "3201" 
+  "3194" -> "3209" 
+  "3222" -> "3220" 
+  "3177" -> "3176" 
+  "3181" -> "3188" 
+  "3188" -> "3223" 
+  "3195" -> "3194" 
+  "3199" -> "3206" 
+  "3206" -> "3223" 
+  "3182" -> "3181" 
+  "3200" -> "3199" 
+  "3183" -> "3185" 
+  "3185" -> "3182" 
+  "3201" -> "3203" 
+  "3203" -> "3200" 
+  "3159" -> "3165" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/630-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/630-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/630-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/630-cfg.dot	2023-06-07 19:35:08.207386498 +0330
@@ -1,5 +1,5 @@
-digraph "ExceptionCheck" {  
-"20001" [label = <(METHOD,ExceptionCheck)> ]
-"20004" [label = <(METHOD_RETURN,ANY)> ]
-  "20001" -> "20004" 
+digraph "UnregisterNatives" {  
+"19660" [label = <(METHOD,UnregisterNatives)> ]
+"19664" [label = <(METHOD_RETURN,ANY)> ]
+  "19660" -> "19664" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/631-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/631-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/631-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/631-cfg.dot	2023-06-07 19:35:08.207386498 +0330
@@ -1,5 +1,5 @@
-digraph "ExceptionOccurred" {  
-"20005" [label = <(METHOD,ExceptionOccurred)> ]
-"20008" [label = <(METHOD_RETURN,ANY)> ]
-  "20005" -> "20008" 
+digraph "NewBooleanArray" {  
+"19665" [label = <(METHOD,NewBooleanArray)> ]
+"19669" [label = <(METHOD_RETURN,ANY)> ]
+  "19665" -> "19669" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/632-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/632-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/632-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/632-cfg.dot	2023-06-07 19:35:08.207386498 +0330
@@ -1,5 +1,5 @@
-digraph "EXPECT_NE" {  
-"20009" [label = <(METHOD,EXPECT_NE)> ]
-"20013" [label = <(METHOD_RETURN,ANY)> ]
-  "20009" -> "20013" 
+digraph "GetByteArrayElements" {  
+"19670" [label = <(METHOD,GetByteArrayElements)> ]
+"19675" [label = <(METHOD_RETURN,ANY)> ]
+  "19670" -> "19675" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/633-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/633-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/633-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/633-cfg.dot	2023-06-07 19:35:08.207386498 +0330
@@ -1,5 +1,5 @@
-digraph "ExceptionClear" {  
-"20014" [label = <(METHOD,ExceptionClear)> ]
-"20017" [label = <(METHOD_RETURN,ANY)> ]
-  "20014" -> "20017" 
+digraph "GetShortArrayElements" {  
+"19676" [label = <(METHOD,GetShortArrayElements)> ]
+"19681" [label = <(METHOD_RETURN,ANY)> ]
+  "19676" -> "19681" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/634-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/634-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/634-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/634-cfg.dot	2023-06-07 19:35:08.207386498 +0330
@@ -1,5 +1,5 @@
-digraph "IsInstanceOf" {  
-"20018" [label = <(METHOD,IsInstanceOf)> ]
-"20023" [label = <(METHOD_RETURN,ANY)> ]
-  "20018" -> "20023" 
+digraph "GetCharArrayElements" {  
+"19682" [label = <(METHOD,GetCharArrayElements)> ]
+"19687" [label = <(METHOD_RETURN,ANY)> ]
+  "19682" -> "19687" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/635-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/635-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/635-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/635-cfg.dot	2023-06-07 19:35:08.207386498 +0330
@@ -1,5 +1,5 @@
-digraph "CleanUpJniEnv" {  
-"20024" [label = <(METHOD,CleanUpJniEnv)> ]
-"20026" [label = <(METHOD_RETURN,ANY)> ]
-  "20024" -> "20026" 
+digraph "GetIntArrayElements" {  
+"19688" [label = <(METHOD,GetIntArrayElements)> ]
+"19693" [label = <(METHOD_RETURN,ANY)> ]
+  "19688" -> "19693" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/636-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/636-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/636-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/636-cfg.dot	2023-06-07 19:35:08.207386498 +0330
@@ -1,5 +1,5 @@
-digraph "CommonRuntimeTest::TearDown" {  
-"20027" [label = <(METHOD,CommonRuntimeTest::TearDown)> ]
-"20030" [label = <(METHOD_RETURN,ANY)> ]
-  "20027" -> "20030" 
+digraph "GetLongArrayElements" {  
+"19694" [label = <(METHOD,GetLongArrayElements)> ]
+"19699" [label = <(METHOD_RETURN,ANY)> ]
+  "19694" -> "19699" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/637-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/637-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/637-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/637-cfg.dot	2023-06-07 19:35:08.207386498 +0330
@@ -1,5 +1,5 @@
-digraph "EXPECT_FALSE" {  
-"20031" [label = <(METHOD,EXPECT_FALSE)> ]
-"20034" [label = <(METHOD_RETURN,ANY)> ]
-  "20031" -> "20034" 
+digraph "GetFloatArrayElements" {  
+"19700" [label = <(METHOD,GetFloatArrayElements)> ]
+"19705" [label = <(METHOD_RETURN,ANY)> ]
+  "19700" -> "19705" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/638-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/638-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/638-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/638-cfg.dot	2023-06-07 19:35:08.207386498 +0330
@@ -1,5 +1,5 @@
-digraph "EXPECT_EQ" {  
-"20035" [label = <(METHOD,EXPECT_EQ)> ]
-"20039" [label = <(METHOD_RETURN,ANY)> ]
-  "20035" -> "20039" 
+digraph "GetDoubleArrayElements" {  
+"19706" [label = <(METHOD,GetDoubleArrayElements)> ]
+"19711" [label = <(METHOD_RETURN,ANY)> ]
+  "19706" -> "19711" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/639-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/639-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/639-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/639-cfg.dot	2023-06-07 19:35:08.207386498 +0330
@@ -1,5 +1,5 @@
-digraph "Check" {  
-"20040" [label = <(METHOD,Check)> ]
-"20044" [label = <(METHOD_RETURN,ANY)> ]
-  "20040" -> "20044" 
+digraph "NewByteArray" {  
+"19712" [label = <(METHOD,NewByteArray)> ]
+"19716" [label = <(METHOD_RETURN,ANY)> ]
+  "19712" -> "19716" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/64-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/64-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/64-cfg.dot	2023-06-07 19:35:01.407387170 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/64-cfg.dot	2023-06-07 19:35:07.967386521 +0330
@@ -1,61 +1,53 @@
-digraph "CallBooleanMethod" {  
-"3180" [label = <(va_start,va_start(ap, mid))<SUB>943</SUB>> ]
-"3184" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>944</SUB>> ]
-"3187" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>945</SUB>> ]
-"3205" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>946</SUB>> ]
-"3224" [label = <(soa,soa(env))<SUB>947</SUB>> ]
-"3227" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap)))<SUB>948</SUB>> ]
-"3233" [label = <(RETURN,return result.GetZ();,return result.GetZ();)<SUB>949</SUB>> ]
-"3185" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>944</SUB>> ]
-"3228" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>948</SUB>> ]
-"3234" [label = <(GetZ,result.GetZ())<SUB>949</SUB>> ]
-"3235" [label = <(&lt;operator&gt;.fieldAccess,result.GetZ)<SUB>949</SUB>> ]
-"3191" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>945</SUB>> ]
-"3209" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>946</SUB>> ]
-"3237" [label = <(FIELD_IDENTIFIER,GetZ,GetZ)<SUB>949</SUB>> ]
-"3192" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>945</SUB>> ]
-"3196" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>945</SUB>> ]
-"3203" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>945</SUB>> ]
-"3210" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>946</SUB>> ]
-"3214" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>946</SUB>> ]
-"3221" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>946</SUB>> ]
-"3197" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>945</SUB>> ]
-"3215" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>946</SUB>> ]
-"3198" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>945</SUB>> ]
-"3200" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>945</SUB>> ]
-"3216" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>946</SUB>> ]
-"3218" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>946</SUB>> ]
-"3174" [label = <(METHOD,CallBooleanMethod)<SUB>941</SUB>> ]
-"3238" [label = <(METHOD_RETURN,jboolean)<SUB>941</SUB>> ]
-  "3180" -> "3185" 
-  "3184" -> "3187" 
-  "3187" -> "3192" 
-  "3187" -> "3205" 
-  "3205" -> "3210" 
-  "3205" -> "3224" 
-  "3224" -> "3228" 
-  "3227" -> "3237" 
-  "3233" -> "3238" 
-  "3185" -> "3184" 
-  "3228" -> "3227" 
-  "3234" -> "3233" 
-  "3235" -> "3234" 
-  "3191" -> "3198" 
-  "3191" -> "3205" 
-  "3209" -> "3216" 
-  "3209" -> "3224" 
-  "3237" -> "3235" 
-  "3192" -> "3191" 
-  "3196" -> "3203" 
-  "3203" -> "3238" 
-  "3210" -> "3209" 
-  "3214" -> "3221" 
-  "3221" -> "3238" 
-  "3197" -> "3196" 
-  "3215" -> "3214" 
-  "3198" -> "3200" 
-  "3200" -> "3197" 
-  "3216" -> "3218" 
-  "3218" -> "3215" 
-  "3174" -> "3180" 
+digraph "CallByteMethodV" {  
+"3231" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>900</SUB>> ]
+"3249" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>901</SUB>> ]
+"3268" [label = <(soa,soa(env))<SUB>902</SUB>> ]
+"3270" [label = <(RETURN,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetB();,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetB();)<SUB>903</SUB>> ]
+"3271" [label = <(GetB,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetB())<SUB>903</SUB>> ]
+"3272" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetB)<SUB>903</SUB>> ]
+"3235" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>900</SUB>> ]
+"3253" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>901</SUB>> ]
+"3273" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>903</SUB>> ]
+"3278" [label = <(FIELD_IDENTIFIER,GetB,GetB)<SUB>903</SUB>> ]
+"3236" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>900</SUB>> ]
+"3240" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>900</SUB>> ]
+"3247" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>900</SUB>> ]
+"3254" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>901</SUB>> ]
+"3258" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>901</SUB>> ]
+"3265" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>901</SUB>> ]
+"3241" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>900</SUB>> ]
+"3259" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>901</SUB>> ]
+"3242" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>900</SUB>> ]
+"3244" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>900</SUB>> ]
+"3260" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>901</SUB>> ]
+"3262" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>901</SUB>> ]
+"3225" [label = <(METHOD,CallByteMethodV)<SUB>899</SUB>> ]
+"3279" [label = <(METHOD_RETURN,jbyte)<SUB>899</SUB>> ]
+  "3231" -> "3236" 
+  "3231" -> "3249" 
+  "3249" -> "3254" 
+  "3249" -> "3268" 
+  "3268" -> "3273" 
+  "3270" -> "3279" 
+  "3271" -> "3270" 
+  "3272" -> "3271" 
+  "3235" -> "3242" 
+  "3235" -> "3249" 
+  "3253" -> "3260" 
+  "3253" -> "3268" 
+  "3273" -> "3278" 
+  "3278" -> "3272" 
+  "3236" -> "3235" 
+  "3240" -> "3247" 
+  "3247" -> "3279" 
+  "3254" -> "3253" 
+  "3258" -> "3265" 
+  "3265" -> "3279" 
+  "3241" -> "3240" 
+  "3259" -> "3258" 
+  "3242" -> "3244" 
+  "3244" -> "3241" 
+  "3260" -> "3262" 
+  "3262" -> "3259" 
+  "3225" -> "3231" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/640-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/640-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/640-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/640-cfg.dot	2023-06-07 19:35:08.207386498 +0330
@@ -1,5 +1,5 @@
-digraph "SetCheckJniEnabled" {  
-"20045" [label = <(METHOD,SetCheckJniEnabled)> ]
-"20049" [label = <(METHOD_RETURN,ANY)> ]
-  "20045" -> "20049" 
+digraph "GetBooleanArrayElements" {  
+"19717" [label = <(METHOD,GetBooleanArrayElements)> ]
+"19722" [label = <(METHOD_RETURN,ANY)> ]
+  "19717" -> "19722" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/641-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/641-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/641-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/641-cfg.dot	2023-06-07 19:35:08.207386498 +0330
@@ -1,5 +1,5 @@
-digraph "ExpectClassFound" {  
-"20050" [label = <(METHOD,ExpectClassFound)> ]
-"20053" [label = <(METHOD_RETURN,ANY)> ]
-  "20050" -> "20053" 
+digraph "NewStringUTF" {  
+"19723" [label = <(METHOD,NewStringUTF)> ]
+"19727" [label = <(METHOD_RETURN,ANY)> ]
+  "19723" -> "19727" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/642-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/642-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/642-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/642-cfg.dot	2023-06-07 19:35:08.207386498 +0330
@@ -1,5 +1,5 @@
-digraph "ExpectClassNotFound" {  
-"20054" [label = <(METHOD,ExpectClassNotFound)> ]
-"20060" [label = <(METHOD_RETURN,ANY)> ]
-  "20054" -> "20060" 
+digraph "ReleaseByteArrayElements" {  
+"19728" [label = <(METHOD,ReleaseByteArrayElements)> ]
+"19734" [label = <(METHOD_RETURN,ANY)> ]
+  "19728" -> "19734" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/643-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/643-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/643-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/643-cfg.dot	2023-06-07 19:35:08.207386498 +0330
@@ -1,5 +1,5 @@
-digraph "ASSERT_NE" {  
-"20061" [label = <(METHOD,ASSERT_NE)> ]
-"20065" [label = <(METHOD_RETURN,ANY)> ]
-  "20061" -> "20065" 
+digraph "ReleaseShortArrayElements" {  
+"19735" [label = <(METHOD,ReleaseShortArrayElements)> ]
+"19741" [label = <(METHOD_RETURN,ANY)> ]
+  "19735" -> "19741" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/644-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/644-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/644-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/644-cfg.dot	2023-06-07 19:35:08.207386498 +0330
@@ -1,5 +1,5 @@
-digraph "GetFieldID" {  
-"20066" [label = <(METHOD,GetFieldID)> ]
-"20072" [label = <(METHOD_RETURN,ANY)> ]
-  "20066" -> "20072" 
+digraph "ReleaseCharArrayElements" {  
+"19742" [label = <(METHOD,ReleaseCharArrayElements)> ]
+"19748" [label = <(METHOD_RETURN,ANY)> ]
+  "19742" -> "19748" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/645-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/645-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/645-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/645-cfg.dot	2023-06-07 19:35:08.207386498 +0330
@@ -1,5 +1,5 @@
-digraph "GetStaticFieldID" {  
-"20073" [label = <(METHOD,GetStaticFieldID)> ]
-"20079" [label = <(METHOD_RETURN,ANY)> ]
-  "20073" -> "20079" 
+digraph "ReleaseIntArrayElements" {  
+"19749" [label = <(METHOD,ReleaseIntArrayElements)> ]
+"19755" [label = <(METHOD_RETURN,ANY)> ]
+  "19749" -> "19755" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/646-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/646-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/646-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/646-cfg.dot	2023-06-07 19:35:08.207386498 +0330
@@ -1,5 +1,5 @@
-digraph "ASSERT_TRUE" {  
-"20080" [label = <(METHOD,ASSERT_TRUE)> ]
-"20083" [label = <(METHOD_RETURN,ANY)> ]
-  "20080" -> "20083" 
+digraph "ReleaseLongArrayElements" {  
+"19756" [label = <(METHOD,ReleaseLongArrayElements)> ]
+"19762" [label = <(METHOD_RETURN,ANY)> ]
+  "19756" -> "19762" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/647-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/647-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/647-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/647-cfg.dot	2023-06-07 19:35:08.207386498 +0330
@@ -1,5 +1,5 @@
-digraph "GetStaticMethodID" {  
-"20084" [label = <(METHOD,GetStaticMethodID)> ]
-"20090" [label = <(METHOD_RETURN,ANY)> ]
-  "20084" -> "20090" 
+digraph "ReleaseFloatArrayElements" {  
+"19763" [label = <(METHOD,ReleaseFloatArrayElements)> ]
+"19769" [label = <(METHOD_RETURN,ANY)> ]
+  "19763" -> "19769" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/648-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/648-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/648-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/648-cfg.dot	2023-06-07 19:35:08.207386498 +0330
@@ -1,5 +1,5 @@
-digraph "ToReflectedField" {  
-"20091" [label = <(METHOD,ToReflectedField)> ]
-"20097" [label = <(METHOD_RETURN,ANY)> ]
-  "20091" -> "20097" 
+digraph "ReleaseDoubleArrayElements" {  
+"19770" [label = <(METHOD,ReleaseDoubleArrayElements)> ]
+"19776" [label = <(METHOD_RETURN,ANY)> ]
+  "19770" -> "19776" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/649-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/649-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/649-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/649-cfg.dot	2023-06-07 19:35:08.207386498 +0330
@@ -1,5 +1,5 @@
-digraph "FromReflectedField" {  
-"20098" [label = <(METHOD,FromReflectedField)> ]
-"20102" [label = <(METHOD_RETURN,ANY)> ]
-  "20098" -> "20102" 
+digraph "ReleaseBooleanArrayElements" {  
+"19777" [label = <(METHOD,ReleaseBooleanArrayElements)> ]
+"19783" [label = <(METHOD_RETURN,ANY)> ]
+  "19777" -> "19783" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/65-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/65-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/65-cfg.dot	2023-06-07 19:35:01.407387170 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/65-cfg.dot	2023-06-07 19:35:07.967386521 +0330
@@ -1,53 +1,53 @@
-digraph "CallBooleanMethodV" {  
-"3246" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>953</SUB>> ]
-"3264" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>954</SUB>> ]
-"3283" [label = <(soa,soa(env))<SUB>955</SUB>> ]
-"3285" [label = <(RETURN,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetZ();,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetZ();)<SUB>956</SUB>> ]
-"3286" [label = <(GetZ,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetZ())<SUB>956</SUB>> ]
-"3287" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetZ)<SUB>956</SUB>> ]
-"3250" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>953</SUB>> ]
-"3268" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>954</SUB>> ]
-"3288" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>956</SUB>> ]
-"3293" [label = <(FIELD_IDENTIFIER,GetZ,GetZ)<SUB>956</SUB>> ]
-"3251" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>953</SUB>> ]
-"3255" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>953</SUB>> ]
-"3262" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>953</SUB>> ]
-"3269" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>954</SUB>> ]
-"3273" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>954</SUB>> ]
-"3280" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>954</SUB>> ]
-"3256" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>953</SUB>> ]
-"3274" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>954</SUB>> ]
-"3257" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>953</SUB>> ]
-"3259" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>953</SUB>> ]
-"3275" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>954</SUB>> ]
-"3277" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>954</SUB>> ]
-"3240" [label = <(METHOD,CallBooleanMethodV)<SUB>952</SUB>> ]
-"3294" [label = <(METHOD_RETURN,jboolean)<SUB>952</SUB>> ]
-  "3246" -> "3251" 
-  "3246" -> "3264" 
-  "3264" -> "3269" 
-  "3264" -> "3283" 
-  "3283" -> "3288" 
-  "3285" -> "3294" 
-  "3286" -> "3285" 
-  "3287" -> "3286" 
-  "3250" -> "3257" 
-  "3250" -> "3264" 
-  "3268" -> "3275" 
-  "3268" -> "3283" 
-  "3288" -> "3293" 
-  "3293" -> "3287" 
-  "3251" -> "3250" 
-  "3255" -> "3262" 
-  "3262" -> "3294" 
-  "3269" -> "3268" 
-  "3273" -> "3280" 
-  "3280" -> "3294" 
-  "3256" -> "3255" 
-  "3274" -> "3273" 
-  "3257" -> "3259" 
-  "3259" -> "3256" 
-  "3275" -> "3277" 
-  "3277" -> "3274" 
-  "3240" -> "3246" 
+digraph "CallByteMethodA" {  
+"3287" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>907</SUB>> ]
+"3305" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>908</SUB>> ]
+"3324" [label = <(soa,soa(env))<SUB>909</SUB>> ]
+"3326" [label = <(RETURN,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetB();,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetB();)<SUB>910</SUB>> ]
+"3327" [label = <(GetB,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetB())<SUB>910</SUB>> ]
+"3328" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetB)<SUB>910</SUB>> ]
+"3291" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>907</SUB>> ]
+"3309" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>908</SUB>> ]
+"3329" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>910</SUB>> ]
+"3334" [label = <(FIELD_IDENTIFIER,GetB,GetB)<SUB>910</SUB>> ]
+"3292" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>907</SUB>> ]
+"3296" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>907</SUB>> ]
+"3303" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>907</SUB>> ]
+"3310" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>908</SUB>> ]
+"3314" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>908</SUB>> ]
+"3321" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>908</SUB>> ]
+"3297" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>907</SUB>> ]
+"3315" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>908</SUB>> ]
+"3298" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>907</SUB>> ]
+"3300" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>907</SUB>> ]
+"3316" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>908</SUB>> ]
+"3318" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>908</SUB>> ]
+"3281" [label = <(METHOD,CallByteMethodA)<SUB>906</SUB>> ]
+"3335" [label = <(METHOD_RETURN,jbyte)<SUB>906</SUB>> ]
+  "3287" -> "3292" 
+  "3287" -> "3305" 
+  "3305" -> "3310" 
+  "3305" -> "3324" 
+  "3324" -> "3329" 
+  "3326" -> "3335" 
+  "3327" -> "3326" 
+  "3328" -> "3327" 
+  "3291" -> "3298" 
+  "3291" -> "3305" 
+  "3309" -> "3316" 
+  "3309" -> "3324" 
+  "3329" -> "3334" 
+  "3334" -> "3328" 
+  "3292" -> "3291" 
+  "3296" -> "3303" 
+  "3303" -> "3335" 
+  "3310" -> "3309" 
+  "3314" -> "3321" 
+  "3321" -> "3335" 
+  "3297" -> "3296" 
+  "3315" -> "3314" 
+  "3298" -> "3300" 
+  "3300" -> "3297" 
+  "3316" -> "3318" 
+  "3318" -> "3315" 
+  "3281" -> "3287" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/650-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/650-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/650-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/650-cfg.dot	2023-06-07 19:35:08.207386498 +0330
@@ -1,5 +1,5 @@
-digraph "ASSERT_EQ" {  
-"20103" [label = <(METHOD,ASSERT_EQ)> ]
-"20107" [label = <(METHOD_RETURN,ANY)> ]
-  "20103" -> "20107" 
+digraph "GetPrimitiveArrayCritical" {  
+"19784" [label = <(METHOD,GetPrimitiveArrayCritical)> ]
+"19789" [label = <(METHOD_RETURN,ANY)> ]
+  "19784" -> "19789" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/651-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/651-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/651-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/651-cfg.dot	2023-06-07 19:35:08.207386498 +0330
@@ -1,5 +1,5 @@
-digraph "ToReflectedMethod" {  
-"20108" [label = <(METHOD,ToReflectedMethod)> ]
-"20114" [label = <(METHOD_RETURN,ANY)> ]
-  "20108" -> "20114" 
+digraph "ReleasePrimitiveArrayCritical" {  
+"19790" [label = <(METHOD,ReleasePrimitiveArrayCritical)> ]
+"19796" [label = <(METHOD_RETURN,ANY)> ]
+  "19790" -> "19796" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/652-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/652-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/652-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/652-cfg.dot	2023-06-07 19:35:08.207386498 +0330
@@ -1,5 +1,5 @@
-digraph "FromReflectedMethod" {  
-"20115" [label = <(METHOD,FromReflectedMethod)> ]
-"20119" [label = <(METHOD_RETURN,ANY)> ]
-  "20115" -> "20119" 
+digraph "GetByteArrayRegion" {  
+"19797" [label = <(METHOD,GetByteArrayRegion)> ]
+"19804" [label = <(METHOD_RETURN,ANY)> ]
+  "19797" -> "19804" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/653-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/653-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/653-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/653-cfg.dot	2023-06-07 19:35:08.207386498 +0330
@@ -1,5 +1,5 @@
-digraph "RegisterNatives" {  
-"20120" [label = <(METHOD,RegisterNatives)> ]
-"20126" [label = <(METHOD_RETURN,ANY)> ]
-  "20120" -> "20126" 
+digraph "GetShortArrayRegion" {  
+"19805" [label = <(METHOD,GetShortArrayRegion)> ]
+"19812" [label = <(METHOD_RETURN,ANY)> ]
+  "19805" -> "19812" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/654-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/654-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/654-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/654-cfg.dot	2023-06-07 19:35:08.207386498 +0330
@@ -1,5 +1,5 @@
-digraph "UnregisterNatives" {  
-"20127" [label = <(METHOD,UnregisterNatives)> ]
-"20131" [label = <(METHOD_RETURN,ANY)> ]
-  "20127" -> "20131" 
+digraph "GetCharArrayRegion" {  
+"19813" [label = <(METHOD,GetCharArrayRegion)> ]
+"19820" [label = <(METHOD_RETURN,ANY)> ]
+  "19813" -> "19820" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/655-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/655-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/655-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/655-cfg.dot	2023-06-07 19:35:08.207386498 +0330
@@ -1,5 +1,5 @@
-digraph "NewBooleanArray" {  
-"20132" [label = <(METHOD,NewBooleanArray)> ]
-"20136" [label = <(METHOD_RETURN,ANY)> ]
-  "20132" -> "20136" 
+digraph "GetIntArrayRegion" {  
+"19821" [label = <(METHOD,GetIntArrayRegion)> ]
+"19828" [label = <(METHOD_RETURN,ANY)> ]
+  "19821" -> "19828" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/656-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/656-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/656-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/656-cfg.dot	2023-06-07 19:35:08.207386498 +0330
@@ -1,5 +1,5 @@
-digraph "GetByteArrayElements" {  
-"20137" [label = <(METHOD,GetByteArrayElements)> ]
-"20142" [label = <(METHOD_RETURN,ANY)> ]
-  "20137" -> "20142" 
+digraph "GetLongArrayRegion" {  
+"19829" [label = <(METHOD,GetLongArrayRegion)> ]
+"19836" [label = <(METHOD_RETURN,ANY)> ]
+  "19829" -> "19836" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/657-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/657-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/657-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/657-cfg.dot	2023-06-07 19:35:08.207386498 +0330
@@ -1,5 +1,5 @@
-digraph "GetShortArrayElements" {  
-"20143" [label = <(METHOD,GetShortArrayElements)> ]
-"20148" [label = <(METHOD_RETURN,ANY)> ]
-  "20143" -> "20148" 
+digraph "GetFloatArrayRegion" {  
+"19837" [label = <(METHOD,GetFloatArrayRegion)> ]
+"19844" [label = <(METHOD_RETURN,ANY)> ]
+  "19837" -> "19844" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/658-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/658-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/658-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/658-cfg.dot	2023-06-07 19:35:08.207386498 +0330
@@ -1,5 +1,5 @@
-digraph "GetCharArrayElements" {  
-"20149" [label = <(METHOD,GetCharArrayElements)> ]
-"20154" [label = <(METHOD_RETURN,ANY)> ]
-  "20149" -> "20154" 
+digraph "GetDoubleArrayRegion" {  
+"19845" [label = <(METHOD,GetDoubleArrayRegion)> ]
+"19852" [label = <(METHOD_RETURN,ANY)> ]
+  "19845" -> "19852" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/659-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/659-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/659-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/659-cfg.dot	2023-06-07 19:35:08.207386498 +0330
@@ -1,5 +1,5 @@
-digraph "GetIntArrayElements" {  
-"20155" [label = <(METHOD,GetIntArrayElements)> ]
-"20160" [label = <(METHOD_RETURN,ANY)> ]
-  "20155" -> "20160" 
+digraph "GetBooleanArrayRegion" {  
+"19853" [label = <(METHOD,GetBooleanArrayRegion)> ]
+"19860" [label = <(METHOD_RETURN,ANY)> ]
+  "19853" -> "19860" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/66-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/66-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/66-cfg.dot	2023-06-07 19:35:01.407387170 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/66-cfg.dot	2023-06-07 19:35:07.967386521 +0330
@@ -1,53 +1,61 @@
-digraph "CallBooleanMethodA" {  
-"3302" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>960</SUB>> ]
-"3320" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>961</SUB>> ]
-"3339" [label = <(soa,soa(env))<SUB>962</SUB>> ]
-"3341" [label = <(RETURN,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetZ();,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetZ();)<SUB>963</SUB>> ]
-"3342" [label = <(GetZ,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetZ())<SUB>963</SUB>> ]
-"3343" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetZ)<SUB>963</SUB>> ]
-"3306" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>960</SUB>> ]
-"3324" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>961</SUB>> ]
-"3344" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>963</SUB>> ]
-"3349" [label = <(FIELD_IDENTIFIER,GetZ,GetZ)<SUB>963</SUB>> ]
-"3307" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>960</SUB>> ]
-"3311" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>960</SUB>> ]
-"3318" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>960</SUB>> ]
-"3325" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>961</SUB>> ]
-"3329" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>961</SUB>> ]
-"3336" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>961</SUB>> ]
-"3312" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>960</SUB>> ]
-"3330" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>961</SUB>> ]
-"3313" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>960</SUB>> ]
-"3315" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>960</SUB>> ]
-"3331" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>961</SUB>> ]
-"3333" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>961</SUB>> ]
-"3296" [label = <(METHOD,CallBooleanMethodA)<SUB>959</SUB>> ]
-"3350" [label = <(METHOD_RETURN,jboolean)<SUB>959</SUB>> ]
-  "3302" -> "3307" 
-  "3302" -> "3320" 
-  "3320" -> "3325" 
-  "3320" -> "3339" 
-  "3339" -> "3344" 
-  "3341" -> "3350" 
-  "3342" -> "3341" 
-  "3343" -> "3342" 
-  "3306" -> "3313" 
-  "3306" -> "3320" 
-  "3324" -> "3331" 
-  "3324" -> "3339" 
-  "3344" -> "3349" 
-  "3349" -> "3343" 
-  "3307" -> "3306" 
-  "3311" -> "3318" 
-  "3318" -> "3350" 
-  "3325" -> "3324" 
-  "3329" -> "3336" 
-  "3336" -> "3350" 
-  "3312" -> "3311" 
-  "3330" -> "3329" 
-  "3313" -> "3315" 
-  "3315" -> "3312" 
-  "3331" -> "3333" 
-  "3333" -> "3330" 
-  "3296" -> "3302" 
+digraph "CallCharMethod" {  
+"3343" [label = <(va_start,va_start(ap, mid))<SUB>915</SUB>> ]
+"3347" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>916</SUB>> ]
+"3350" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>917</SUB>> ]
+"3368" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>918</SUB>> ]
+"3387" [label = <(soa,soa(env))<SUB>919</SUB>> ]
+"3390" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap)))<SUB>920</SUB>> ]
+"3396" [label = <(RETURN,return result.GetC();,return result.GetC();)<SUB>921</SUB>> ]
+"3348" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>916</SUB>> ]
+"3391" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>920</SUB>> ]
+"3397" [label = <(GetC,result.GetC())<SUB>921</SUB>> ]
+"3398" [label = <(&lt;operator&gt;.fieldAccess,result.GetC)<SUB>921</SUB>> ]
+"3354" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>917</SUB>> ]
+"3372" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>918</SUB>> ]
+"3400" [label = <(FIELD_IDENTIFIER,GetC,GetC)<SUB>921</SUB>> ]
+"3355" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>917</SUB>> ]
+"3359" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>917</SUB>> ]
+"3366" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>917</SUB>> ]
+"3373" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>918</SUB>> ]
+"3377" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>918</SUB>> ]
+"3384" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>918</SUB>> ]
+"3360" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>917</SUB>> ]
+"3378" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>918</SUB>> ]
+"3361" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>917</SUB>> ]
+"3363" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>917</SUB>> ]
+"3379" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>918</SUB>> ]
+"3381" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>918</SUB>> ]
+"3337" [label = <(METHOD,CallCharMethod)<SUB>913</SUB>> ]
+"3401" [label = <(METHOD_RETURN,jchar)<SUB>913</SUB>> ]
+  "3343" -> "3348" 
+  "3347" -> "3350" 
+  "3350" -> "3355" 
+  "3350" -> "3368" 
+  "3368" -> "3373" 
+  "3368" -> "3387" 
+  "3387" -> "3391" 
+  "3390" -> "3400" 
+  "3396" -> "3401" 
+  "3348" -> "3347" 
+  "3391" -> "3390" 
+  "3397" -> "3396" 
+  "3398" -> "3397" 
+  "3354" -> "3361" 
+  "3354" -> "3368" 
+  "3372" -> "3379" 
+  "3372" -> "3387" 
+  "3400" -> "3398" 
+  "3355" -> "3354" 
+  "3359" -> "3366" 
+  "3366" -> "3401" 
+  "3373" -> "3372" 
+  "3377" -> "3384" 
+  "3384" -> "3401" 
+  "3360" -> "3359" 
+  "3378" -> "3377" 
+  "3361" -> "3363" 
+  "3363" -> "3360" 
+  "3379" -> "3381" 
+  "3381" -> "3378" 
+  "3337" -> "3343" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/660-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/660-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/660-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/660-cfg.dot	2023-06-07 19:35:08.207386498 +0330
@@ -1,5 +1,5 @@
-digraph "GetLongArrayElements" {  
-"20161" [label = <(METHOD,GetLongArrayElements)> ]
-"20166" [label = <(METHOD_RETURN,ANY)> ]
-  "20161" -> "20166" 
+digraph "SetByteArrayRegion" {  
+"19861" [label = <(METHOD,SetByteArrayRegion)> ]
+"19868" [label = <(METHOD_RETURN,ANY)> ]
+  "19861" -> "19868" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/661-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/661-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/661-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/661-cfg.dot	2023-06-07 19:35:08.207386498 +0330
@@ -1,5 +1,5 @@
-digraph "GetFloatArrayElements" {  
-"20167" [label = <(METHOD,GetFloatArrayElements)> ]
-"20172" [label = <(METHOD_RETURN,ANY)> ]
-  "20167" -> "20172" 
+digraph "SetShortArrayRegion" {  
+"19869" [label = <(METHOD,SetShortArrayRegion)> ]
+"19876" [label = <(METHOD_RETURN,ANY)> ]
+  "19869" -> "19876" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/662-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/662-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/662-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/662-cfg.dot	2023-06-07 19:35:08.207386498 +0330
@@ -1,5 +1,5 @@
-digraph "GetDoubleArrayElements" {  
-"20173" [label = <(METHOD,GetDoubleArrayElements)> ]
-"20178" [label = <(METHOD_RETURN,ANY)> ]
-  "20173" -> "20178" 
+digraph "SetCharArrayRegion" {  
+"19877" [label = <(METHOD,SetCharArrayRegion)> ]
+"19884" [label = <(METHOD_RETURN,ANY)> ]
+  "19877" -> "19884" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/663-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/663-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/663-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/663-cfg.dot	2023-06-07 19:35:08.207386498 +0330
@@ -1,5 +1,5 @@
-digraph "NewByteArray" {  
-"20179" [label = <(METHOD,NewByteArray)> ]
-"20183" [label = <(METHOD_RETURN,ANY)> ]
-  "20179" -> "20183" 
+digraph "SetIntArrayRegion" {  
+"19885" [label = <(METHOD,SetIntArrayRegion)> ]
+"19892" [label = <(METHOD_RETURN,ANY)> ]
+  "19885" -> "19892" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/664-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/664-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/664-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/664-cfg.dot	2023-06-07 19:35:08.207386498 +0330
@@ -1,5 +1,5 @@
-digraph "GetBooleanArrayElements" {  
-"20184" [label = <(METHOD,GetBooleanArrayElements)> ]
-"20189" [label = <(METHOD_RETURN,ANY)> ]
-  "20184" -> "20189" 
+digraph "SetLongArrayRegion" {  
+"19893" [label = <(METHOD,SetLongArrayRegion)> ]
+"19900" [label = <(METHOD_RETURN,ANY)> ]
+  "19893" -> "19900" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/665-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/665-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/665-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/665-cfg.dot	2023-06-07 19:35:08.207386498 +0330
@@ -1,5 +1,5 @@
-digraph "NewStringUTF" {  
-"20190" [label = <(METHOD,NewStringUTF)> ]
-"20194" [label = <(METHOD_RETURN,ANY)> ]
-  "20190" -> "20194" 
+digraph "SetFloatArrayRegion" {  
+"19901" [label = <(METHOD,SetFloatArrayRegion)> ]
+"19908" [label = <(METHOD_RETURN,ANY)> ]
+  "19901" -> "19908" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/666-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/666-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/666-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/666-cfg.dot	2023-06-07 19:35:08.207386498 +0330
@@ -1,5 +1,5 @@
-digraph "ReleaseByteArrayElements" {  
-"20195" [label = <(METHOD,ReleaseByteArrayElements)> ]
-"20201" [label = <(METHOD_RETURN,ANY)> ]
-  "20195" -> "20201" 
+digraph "SetDoubleArrayRegion" {  
+"19909" [label = <(METHOD,SetDoubleArrayRegion)> ]
+"19916" [label = <(METHOD_RETURN,ANY)> ]
+  "19909" -> "19916" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/667-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/667-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/667-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/667-cfg.dot	2023-06-07 19:35:08.207386498 +0330
@@ -1,5 +1,5 @@
-digraph "ReleaseShortArrayElements" {  
-"20202" [label = <(METHOD,ReleaseShortArrayElements)> ]
-"20208" [label = <(METHOD_RETURN,ANY)> ]
-  "20202" -> "20208" 
+digraph "SetBooleanArrayRegion" {  
+"19917" [label = <(METHOD,SetBooleanArrayRegion)> ]
+"19924" [label = <(METHOD_RETURN,ANY)> ]
+  "19917" -> "19924" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/668-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/668-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/668-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/668-cfg.dot	2023-06-07 19:35:08.207386498 +0330
@@ -1,5 +1,5 @@
-digraph "ReleaseCharArrayElements" {  
-"20209" [label = <(METHOD,ReleaseCharArrayElements)> ]
-"20215" [label = <(METHOD_RETURN,ANY)> ]
-  "20209" -> "20215" 
+digraph "NewObjectArray" {  
+"19925" [label = <(METHOD,NewObjectArray)> ]
+"19931" [label = <(METHOD_RETURN,ANY)> ]
+  "19925" -> "19931" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/669-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/669-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/669-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/669-cfg.dot	2023-06-07 19:35:08.207386498 +0330
@@ -1,5 +1,5 @@
-digraph "ReleaseIntArrayElements" {  
-"20216" [label = <(METHOD,ReleaseIntArrayElements)> ]
-"20222" [label = <(METHOD_RETURN,ANY)> ]
-  "20216" -> "20222" 
+digraph "&lt;operator&gt;.minus" {  
+"19932" [label = <(METHOD,&lt;operator&gt;.minus)> ]
+"19935" [label = <(METHOD_RETURN,ANY)> ]
+  "19932" -> "19935" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/67-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/67-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/67-cfg.dot	2023-06-07 19:35:01.417387171 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/67-cfg.dot	2023-06-07 19:35:07.967386521 +0330
@@ -1,61 +1,53 @@
-digraph "CallByteMethod" {  
-"3358" [label = <(va_start,va_start(ap, mid))<SUB>968</SUB>> ]
-"3362" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>969</SUB>> ]
-"3365" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>970</SUB>> ]
-"3383" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>971</SUB>> ]
-"3402" [label = <(soa,soa(env))<SUB>972</SUB>> ]
-"3405" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap)))<SUB>973</SUB>> ]
-"3411" [label = <(RETURN,return result.GetB();,return result.GetB();)<SUB>974</SUB>> ]
-"3363" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>969</SUB>> ]
-"3406" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>973</SUB>> ]
-"3412" [label = <(GetB,result.GetB())<SUB>974</SUB>> ]
-"3413" [label = <(&lt;operator&gt;.fieldAccess,result.GetB)<SUB>974</SUB>> ]
-"3369" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>970</SUB>> ]
-"3387" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>971</SUB>> ]
-"3415" [label = <(FIELD_IDENTIFIER,GetB,GetB)<SUB>974</SUB>> ]
-"3370" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>970</SUB>> ]
-"3374" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>970</SUB>> ]
-"3381" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>970</SUB>> ]
-"3388" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>971</SUB>> ]
-"3392" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>971</SUB>> ]
-"3399" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>971</SUB>> ]
-"3375" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>970</SUB>> ]
-"3393" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>971</SUB>> ]
-"3376" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>970</SUB>> ]
-"3378" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>970</SUB>> ]
-"3394" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>971</SUB>> ]
-"3396" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>971</SUB>> ]
-"3352" [label = <(METHOD,CallByteMethod)<SUB>966</SUB>> ]
-"3416" [label = <(METHOD_RETURN,jbyte)<SUB>966</SUB>> ]
-  "3358" -> "3363" 
-  "3362" -> "3365" 
-  "3365" -> "3370" 
-  "3365" -> "3383" 
-  "3383" -> "3388" 
-  "3383" -> "3402" 
-  "3402" -> "3406" 
-  "3405" -> "3415" 
-  "3411" -> "3416" 
-  "3363" -> "3362" 
-  "3406" -> "3405" 
-  "3412" -> "3411" 
-  "3413" -> "3412" 
-  "3369" -> "3376" 
-  "3369" -> "3383" 
-  "3387" -> "3394" 
-  "3387" -> "3402" 
-  "3415" -> "3413" 
-  "3370" -> "3369" 
-  "3374" -> "3381" 
-  "3381" -> "3416" 
-  "3388" -> "3387" 
-  "3392" -> "3399" 
-  "3399" -> "3416" 
-  "3375" -> "3374" 
-  "3393" -> "3392" 
-  "3376" -> "3378" 
-  "3378" -> "3375" 
-  "3394" -> "3396" 
-  "3396" -> "3393" 
-  "3352" -> "3358" 
+digraph "CallCharMethodV" {  
+"3409" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>925</SUB>> ]
+"3427" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>926</SUB>> ]
+"3446" [label = <(soa,soa(env))<SUB>927</SUB>> ]
+"3448" [label = <(RETURN,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetC();,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetC();)<SUB>928</SUB>> ]
+"3449" [label = <(GetC,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetC())<SUB>928</SUB>> ]
+"3450" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetC)<SUB>928</SUB>> ]
+"3413" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>925</SUB>> ]
+"3431" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>926</SUB>> ]
+"3451" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>928</SUB>> ]
+"3456" [label = <(FIELD_IDENTIFIER,GetC,GetC)<SUB>928</SUB>> ]
+"3414" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>925</SUB>> ]
+"3418" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>925</SUB>> ]
+"3425" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>925</SUB>> ]
+"3432" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>926</SUB>> ]
+"3436" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>926</SUB>> ]
+"3443" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>926</SUB>> ]
+"3419" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>925</SUB>> ]
+"3437" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>926</SUB>> ]
+"3420" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>925</SUB>> ]
+"3422" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>925</SUB>> ]
+"3438" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>926</SUB>> ]
+"3440" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>926</SUB>> ]
+"3403" [label = <(METHOD,CallCharMethodV)<SUB>924</SUB>> ]
+"3457" [label = <(METHOD_RETURN,jchar)<SUB>924</SUB>> ]
+  "3409" -> "3414" 
+  "3409" -> "3427" 
+  "3427" -> "3432" 
+  "3427" -> "3446" 
+  "3446" -> "3451" 
+  "3448" -> "3457" 
+  "3449" -> "3448" 
+  "3450" -> "3449" 
+  "3413" -> "3420" 
+  "3413" -> "3427" 
+  "3431" -> "3438" 
+  "3431" -> "3446" 
+  "3451" -> "3456" 
+  "3456" -> "3450" 
+  "3414" -> "3413" 
+  "3418" -> "3425" 
+  "3425" -> "3457" 
+  "3432" -> "3431" 
+  "3436" -> "3443" 
+  "3443" -> "3457" 
+  "3419" -> "3418" 
+  "3437" -> "3436" 
+  "3420" -> "3422" 
+  "3422" -> "3419" 
+  "3438" -> "3440" 
+  "3440" -> "3437" 
+  "3403" -> "3409" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/670-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/670-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/670-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/670-cfg.dot	2023-06-07 19:35:08.207386498 +0330
@@ -1,5 +1,5 @@
-digraph "ReleaseLongArrayElements" {  
-"20223" [label = <(METHOD,ReleaseLongArrayElements)> ]
-"20229" [label = <(METHOD_RETURN,ANY)> ]
-  "20223" -> "20229" 
+digraph "::min" {  
+"19936" [label = <(METHOD,::min)> ]
+"19939" [label = <(METHOD_RETURN,ANY)> ]
+  "19936" -> "19939" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/671-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/671-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/671-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/671-cfg.dot	2023-06-07 19:35:08.207386498 +0330
@@ -1,5 +1,5 @@
-digraph "ReleaseFloatArrayElements" {  
-"20230" [label = <(METHOD,ReleaseFloatArrayElements)> ]
-"20236" [label = <(METHOD_RETURN,ANY)> ]
-  "20230" -> "20236" 
+digraph "Thread::Current" {  
+"19940" [label = <(METHOD,Thread::Current)> ]
+"19943" [label = <(METHOD_RETURN,ANY)> ]
+  "19940" -> "19943" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/672-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/672-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/672-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/672-cfg.dot	2023-06-07 19:35:08.207386498 +0330
@@ -1,5 +1,5 @@
-digraph "ReleaseDoubleArrayElements" {  
-"20237" [label = <(METHOD,ReleaseDoubleArrayElements)> ]
-"20243" [label = <(METHOD_RETURN,ANY)> ]
-  "20237" -> "20243" 
+digraph "LoadDex" {  
+"19944" [label = <(METHOD,LoadDex)> ]
+"19947" [label = <(METHOD_RETURN,ANY)> ]
+  "19944" -> "19947" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/673-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/673-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/673-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/673-cfg.dot	2023-06-07 19:35:08.207386498 +0330
@@ -1,5 +1,5 @@
-digraph "ReleaseBooleanArrayElements" {  
-"20244" [label = <(METHOD,ReleaseBooleanArrayElements)> ]
-"20250" [label = <(METHOD_RETURN,ANY)> ]
-  "20244" -> "20250" 
+digraph "loader" {  
+"19948" [label = <(METHOD,loader)> ]
+"19951" [label = <(METHOD_RETURN,ANY)> ]
+  "19948" -> "19951" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/674-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/674-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/674-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/674-cfg.dot	2023-06-07 19:35:08.207386498 +0330
@@ -1,5 +1,5 @@
-digraph "GetPrimitiveArrayCritical" {  
-"20251" [label = <(METHOD,GetPrimitiveArrayCritical)> ]
-"20256" [label = <(METHOD_RETURN,ANY)> ]
-  "20251" -> "20256" 
+digraph "IsDirect" {  
+"19952" [label = <(METHOD,IsDirect)> ]
+"19955" [label = <(METHOD_RETURN,ANY)> ]
+  "19952" -> "19955" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/675-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/675-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/675-cfg.dot	2023-06-07 19:35:01.667387146 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/675-cfg.dot	2023-06-07 19:35:08.207386498 +0330
@@ -1,5 +1,5 @@
-digraph "ReleasePrimitiveArrayCritical" {  
-"20257" [label = <(METHOD,ReleasePrimitiveArrayCritical)> ]
-"20263" [label = <(METHOD_RETURN,ANY)> ]
-  "20257" -> "20263" 
+digraph "SetEntryPointFromQuickCompiledCode" {  
+"19956" [label = <(METHOD,SetEntryPointFromQuickCompiledCode)> ]
+"19960" [label = <(METHOD_RETURN,ANY)> ]
+  "19956" -> "19960" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/676-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/676-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/676-cfg.dot	2023-06-07 19:35:01.677387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/676-cfg.dot	2023-06-07 19:35:08.207386498 +0330
@@ -1,5 +1,5 @@
-digraph "GetByteArrayRegion" {  
-"20264" [label = <(METHOD,GetByteArrayRegion)> ]
-"20271" [label = <(METHOD_RETURN,ANY)> ]
-  "20264" -> "20271" 
+digraph "GetRuntimeQuickGenericJniStub" {  
+"19961" [label = <(METHOD,GetRuntimeQuickGenericJniStub)> ]
+"19964" [label = <(METHOD_RETURN,ANY)> ]
+  "19961" -> "19964" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/677-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/677-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/677-cfg.dot	2023-06-07 19:35:01.677387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/677-cfg.dot	2023-06-07 19:35:08.207386498 +0330
@@ -1,5 +1,5 @@
-digraph "GetShortArrayRegion" {  
-"20272" [label = <(METHOD,GetShortArrayRegion)> ]
-"20279" [label = <(METHOD_RETURN,ANY)> ]
-  "20272" -> "20279" 
+digraph "TransitionFromSuspendedToRunnable" {  
+"19965" [label = <(METHOD,TransitionFromSuspendedToRunnable)> ]
+"19968" [label = <(METHOD_RETURN,ANY)> ]
+  "19965" -> "19968" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/678-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/678-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/678-cfg.dot	2023-06-07 19:35:01.677387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/678-cfg.dot	2023-06-07 19:35:08.207386498 +0330
@@ -1,5 +1,5 @@
-digraph "GetCharArrayRegion" {  
-"20280" [label = <(METHOD,GetCharArrayRegion)> ]
-"20287" [label = <(METHOD_RETURN,ANY)> ]
-  "20280" -> "20287" 
+digraph "Start" {  
+"19969" [label = <(METHOD,Start)> ]
+"19972" [label = <(METHOD_RETURN,ANY)> ]
+  "19969" -> "19972" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/679-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/679-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/679-cfg.dot	2023-06-07 19:35:01.677387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/679-cfg.dot	2023-06-07 19:35:08.207386498 +0330
@@ -1,5 +1,5 @@
-digraph "GetIntArrayRegion" {  
-"20288" [label = <(METHOD,GetIntArrayRegion)> ]
-"20295" [label = <(METHOD_RETURN,ANY)> ]
-  "20288" -> "20295" 
+digraph "GetJniEnv" {  
+"19973" [label = <(METHOD,GetJniEnv)> ]
+"19976" [label = <(METHOD_RETURN,ANY)> ]
+  "19973" -> "19976" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/68-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/68-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/68-cfg.dot	2023-06-07 19:35:01.417387171 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/68-cfg.dot	2023-06-07 19:35:07.967386521 +0330
@@ -1,53 +1,53 @@
-digraph "CallByteMethodV" {  
-"3424" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>978</SUB>> ]
-"3442" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>979</SUB>> ]
-"3461" [label = <(soa,soa(env))<SUB>980</SUB>> ]
-"3463" [label = <(RETURN,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetB();,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetB();)<SUB>981</SUB>> ]
-"3464" [label = <(GetB,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetB())<SUB>981</SUB>> ]
-"3465" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetB)<SUB>981</SUB>> ]
-"3428" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>978</SUB>> ]
-"3446" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>979</SUB>> ]
-"3466" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>981</SUB>> ]
-"3471" [label = <(FIELD_IDENTIFIER,GetB,GetB)<SUB>981</SUB>> ]
-"3429" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>978</SUB>> ]
-"3433" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>978</SUB>> ]
-"3440" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>978</SUB>> ]
-"3447" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>979</SUB>> ]
-"3451" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>979</SUB>> ]
-"3458" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>979</SUB>> ]
-"3434" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>978</SUB>> ]
-"3452" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>979</SUB>> ]
-"3435" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>978</SUB>> ]
-"3437" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>978</SUB>> ]
-"3453" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>979</SUB>> ]
-"3455" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>979</SUB>> ]
-"3418" [label = <(METHOD,CallByteMethodV)<SUB>977</SUB>> ]
-"3472" [label = <(METHOD_RETURN,jbyte)<SUB>977</SUB>> ]
-  "3424" -> "3429" 
-  "3424" -> "3442" 
-  "3442" -> "3447" 
-  "3442" -> "3461" 
-  "3461" -> "3466" 
-  "3463" -> "3472" 
-  "3464" -> "3463" 
-  "3465" -> "3464" 
-  "3428" -> "3435" 
-  "3428" -> "3442" 
-  "3446" -> "3453" 
-  "3446" -> "3461" 
-  "3466" -> "3471" 
-  "3471" -> "3465" 
-  "3429" -> "3428" 
-  "3433" -> "3440" 
-  "3440" -> "3472" 
-  "3447" -> "3446" 
-  "3451" -> "3458" 
-  "3458" -> "3472" 
-  "3434" -> "3433" 
-  "3452" -> "3451" 
-  "3435" -> "3437" 
-  "3437" -> "3434" 
-  "3453" -> "3455" 
-  "3455" -> "3452" 
-  "3418" -> "3424" 
+digraph "CallCharMethodA" {  
+"3465" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>932</SUB>> ]
+"3483" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>933</SUB>> ]
+"3502" [label = <(soa,soa(env))<SUB>934</SUB>> ]
+"3504" [label = <(RETURN,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetC();,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetC();)<SUB>935</SUB>> ]
+"3505" [label = <(GetC,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetC())<SUB>935</SUB>> ]
+"3506" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetC)<SUB>935</SUB>> ]
+"3469" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>932</SUB>> ]
+"3487" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>933</SUB>> ]
+"3507" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>935</SUB>> ]
+"3512" [label = <(FIELD_IDENTIFIER,GetC,GetC)<SUB>935</SUB>> ]
+"3470" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>932</SUB>> ]
+"3474" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>932</SUB>> ]
+"3481" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>932</SUB>> ]
+"3488" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>933</SUB>> ]
+"3492" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>933</SUB>> ]
+"3499" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>933</SUB>> ]
+"3475" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>932</SUB>> ]
+"3493" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>933</SUB>> ]
+"3476" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>932</SUB>> ]
+"3478" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>932</SUB>> ]
+"3494" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>933</SUB>> ]
+"3496" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>933</SUB>> ]
+"3459" [label = <(METHOD,CallCharMethodA)<SUB>931</SUB>> ]
+"3513" [label = <(METHOD_RETURN,jchar)<SUB>931</SUB>> ]
+  "3465" -> "3470" 
+  "3465" -> "3483" 
+  "3483" -> "3488" 
+  "3483" -> "3502" 
+  "3502" -> "3507" 
+  "3504" -> "3513" 
+  "3505" -> "3504" 
+  "3506" -> "3505" 
+  "3469" -> "3476" 
+  "3469" -> "3483" 
+  "3487" -> "3494" 
+  "3487" -> "3502" 
+  "3507" -> "3512" 
+  "3512" -> "3506" 
+  "3470" -> "3469" 
+  "3474" -> "3481" 
+  "3481" -> "3513" 
+  "3488" -> "3487" 
+  "3492" -> "3499" 
+  "3499" -> "3513" 
+  "3475" -> "3474" 
+  "3493" -> "3492" 
+  "3476" -> "3478" 
+  "3478" -> "3475" 
+  "3494" -> "3496" 
+  "3496" -> "3493" 
+  "3459" -> "3465" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/680-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/680-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/680-cfg.dot	2023-06-07 19:35:01.677387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/680-cfg.dot	2023-06-07 19:35:08.207386498 +0330
@@ -1,5 +1,5 @@
-digraph "GetLongArrayRegion" {  
-"20296" [label = <(METHOD,GetLongArrayRegion)> ]
-"20303" [label = <(METHOD_RETURN,ANY)> ]
-  "20296" -> "20303" 
+digraph "GetLocalsCapacity" {  
+"19977" [label = <(METHOD,GetLocalsCapacity)> ]
+"19980" [label = <(METHOD_RETURN,ANY)> ]
+  "19977" -> "19980" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/681-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/681-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/681-cfg.dot	2023-06-07 19:35:01.677387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/681-cfg.dot	2023-06-07 19:35:08.207386498 +0330
@@ -1,5 +1,5 @@
-digraph "GetFloatArrayRegion" {  
-"20304" [label = <(METHOD,GetFloatArrayRegion)> ]
-"20311" [label = <(METHOD_RETURN,ANY)> ]
-  "20304" -> "20311" 
+digraph "MonitorExit" {  
+"19981" [label = <(METHOD,MonitorExit)> ]
+"19985" [label = <(METHOD_RETURN,ANY)> ]
+  "19981" -> "19985" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/682-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/682-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/682-cfg.dot	2023-06-07 19:35:01.677387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/682-cfg.dot	2023-06-07 19:35:08.207386498 +0330
@@ -1,5 +1,5 @@
-digraph "GetDoubleArrayRegion" {  
-"20312" [label = <(METHOD,GetDoubleArrayRegion)> ]
-"20319" [label = <(METHOD_RETURN,ANY)> ]
-  "20312" -> "20319" 
+digraph "MonitorEnter" {  
+"19986" [label = <(METHOD,MonitorEnter)> ]
+"19990" [label = <(METHOD_RETURN,ANY)> ]
+  "19986" -> "19990" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/683-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/683-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/683-cfg.dot	2023-06-07 19:35:01.677387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/683-cfg.dot	2023-06-07 19:35:08.207386498 +0330
@@ -1,5 +1,5 @@
-digraph "GetBooleanArrayRegion" {  
-"20320" [label = <(METHOD,GetBooleanArrayRegion)> ]
-"20327" [label = <(METHOD_RETURN,ANY)> ]
-  "20320" -> "20327" 
+digraph "GetLockWord" {  
+"19991" [label = <(METHOD,GetLockWord)> ]
+"19995" [label = <(METHOD_RETURN,ANY)> ]
+  "19991" -> "19995" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/684-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/684-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/684-cfg.dot	2023-06-07 19:35:01.677387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/684-cfg.dot	2023-06-07 19:35:08.207386498 +0330
@@ -1,5 +1,5 @@
-digraph "SetByteArrayRegion" {  
-"20328" [label = <(METHOD,SetByteArrayRegion)> ]
-"20335" [label = <(METHOD_RETURN,ANY)> ]
-  "20328" -> "20335" 
+digraph "GetState" {  
+"19996" [label = <(METHOD,GetState)> ]
+"19999" [label = <(METHOD_RETURN,ANY)> ]
+  "19996" -> "19999" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/685-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/685-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/685-cfg.dot	2023-06-07 19:35:01.677387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/685-cfg.dot	2023-06-07 19:35:08.207386498 +0330
@@ -1,5 +1,5 @@
-digraph "SetShortArrayRegion" {  
-"20336" [label = <(METHOD,SetShortArrayRegion)> ]
-"20343" [label = <(METHOD_RETURN,ANY)> ]
-  "20336" -> "20343" 
+digraph "IsLocked" {  
+"20000" [label = <(METHOD,IsLocked)> ]
+"20003" [label = <(METHOD_RETURN,ANY)> ]
+  "20000" -> "20003" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/686-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/686-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/686-cfg.dot	2023-06-07 19:35:01.677387145 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/686-cfg.dot	2023-06-07 19:35:08.207386498 +0330
@@ -1,5 +1,5 @@
-digraph "SetCharArrayRegion" {  
-"20344" [label = <(METHOD,SetCharArrayRegion)> ]
-"20351" [label = <(METHOD_RETURN,ANY)> ]
-  "20344" -> "20351" 
+digraph "FatLockMonitor" {  
+"20004" [label = <(METHOD,FatLockMonitor)> ]
+"20007" [label = <(METHOD_RETURN,ANY)> ]
+  "20004" -> "20007" 
 }
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out: 687-cfg.dot
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out: 688-cfg.dot
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out: 689-cfg.dot
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/69-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/69-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/69-cfg.dot	2023-06-07 19:35:01.417387171 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/69-cfg.dot	2023-06-07 19:35:07.967386521 +0330
@@ -1,53 +1,61 @@
-digraph "CallByteMethodA" {  
-"3480" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>985</SUB>> ]
-"3498" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>986</SUB>> ]
-"3517" [label = <(soa,soa(env))<SUB>987</SUB>> ]
-"3519" [label = <(RETURN,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetB();,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetB();)<SUB>988</SUB>> ]
-"3520" [label = <(GetB,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetB())<SUB>988</SUB>> ]
-"3521" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetB)<SUB>988</SUB>> ]
-"3484" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>985</SUB>> ]
-"3502" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>986</SUB>> ]
-"3522" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>988</SUB>> ]
-"3527" [label = <(FIELD_IDENTIFIER,GetB,GetB)<SUB>988</SUB>> ]
-"3485" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>985</SUB>> ]
-"3489" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>985</SUB>> ]
-"3496" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>985</SUB>> ]
-"3503" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>986</SUB>> ]
-"3507" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>986</SUB>> ]
-"3514" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>986</SUB>> ]
-"3490" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>985</SUB>> ]
-"3508" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>986</SUB>> ]
-"3491" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>985</SUB>> ]
-"3493" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>985</SUB>> ]
-"3509" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>986</SUB>> ]
-"3511" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>986</SUB>> ]
-"3474" [label = <(METHOD,CallByteMethodA)<SUB>984</SUB>> ]
-"3528" [label = <(METHOD_RETURN,jbyte)<SUB>984</SUB>> ]
-  "3480" -> "3485" 
-  "3480" -> "3498" 
-  "3498" -> "3503" 
-  "3498" -> "3517" 
-  "3517" -> "3522" 
-  "3519" -> "3528" 
-  "3520" -> "3519" 
-  "3521" -> "3520" 
-  "3484" -> "3491" 
-  "3484" -> "3498" 
-  "3502" -> "3509" 
-  "3502" -> "3517" 
-  "3522" -> "3527" 
-  "3527" -> "3521" 
-  "3485" -> "3484" 
-  "3489" -> "3496" 
-  "3496" -> "3528" 
-  "3503" -> "3502" 
-  "3507" -> "3514" 
-  "3514" -> "3528" 
-  "3490" -> "3489" 
-  "3508" -> "3507" 
-  "3491" -> "3493" 
-  "3493" -> "3490" 
-  "3509" -> "3511" 
-  "3511" -> "3508" 
-  "3474" -> "3480" 
+digraph "CallDoubleMethod" {  
+"3521" [label = <(va_start,va_start(ap, mid))<SUB>940</SUB>> ]
+"3525" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>941</SUB>> ]
+"3528" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>942</SUB>> ]
+"3546" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>943</SUB>> ]
+"3565" [label = <(soa,soa(env))<SUB>944</SUB>> ]
+"3568" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap)))<SUB>945</SUB>> ]
+"3574" [label = <(RETURN,return result.GetD();,return result.GetD();)<SUB>946</SUB>> ]
+"3526" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>941</SUB>> ]
+"3569" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>945</SUB>> ]
+"3575" [label = <(GetD,result.GetD())<SUB>946</SUB>> ]
+"3576" [label = <(&lt;operator&gt;.fieldAccess,result.GetD)<SUB>946</SUB>> ]
+"3532" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>942</SUB>> ]
+"3550" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>943</SUB>> ]
+"3578" [label = <(FIELD_IDENTIFIER,GetD,GetD)<SUB>946</SUB>> ]
+"3533" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>942</SUB>> ]
+"3537" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>942</SUB>> ]
+"3544" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>942</SUB>> ]
+"3551" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>943</SUB>> ]
+"3555" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>943</SUB>> ]
+"3562" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>943</SUB>> ]
+"3538" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>942</SUB>> ]
+"3556" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>943</SUB>> ]
+"3539" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>942</SUB>> ]
+"3541" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>942</SUB>> ]
+"3557" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>943</SUB>> ]
+"3559" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>943</SUB>> ]
+"3515" [label = <(METHOD,CallDoubleMethod)<SUB>938</SUB>> ]
+"3579" [label = <(METHOD_RETURN,jdouble)<SUB>938</SUB>> ]
+  "3521" -> "3526" 
+  "3525" -> "3528" 
+  "3528" -> "3533" 
+  "3528" -> "3546" 
+  "3546" -> "3551" 
+  "3546" -> "3565" 
+  "3565" -> "3569" 
+  "3568" -> "3578" 
+  "3574" -> "3579" 
+  "3526" -> "3525" 
+  "3569" -> "3568" 
+  "3575" -> "3574" 
+  "3576" -> "3575" 
+  "3532" -> "3539" 
+  "3532" -> "3546" 
+  "3550" -> "3557" 
+  "3550" -> "3565" 
+  "3578" -> "3576" 
+  "3533" -> "3532" 
+  "3537" -> "3544" 
+  "3544" -> "3579" 
+  "3551" -> "3550" 
+  "3555" -> "3562" 
+  "3562" -> "3579" 
+  "3538" -> "3537" 
+  "3556" -> "3555" 
+  "3539" -> "3541" 
+  "3541" -> "3538" 
+  "3557" -> "3559" 
+  "3559" -> "3556" 
+  "3515" -> "3521" 
 }
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out: 690-cfg.dot
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out: 691-cfg.dot
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out: 692-cfg.dot
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out: 693-cfg.dot
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out: 694-cfg.dot
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out: 695-cfg.dot
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out: 696-cfg.dot
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out: 697-cfg.dot
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out: 698-cfg.dot
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out: 699-cfg.dot
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/7-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/7-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/7-cfg.dot	2023-06-07 19:35:01.327387179 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/7-cfg.dot	2023-06-07 19:35:07.907386529 +0330
@@ -1,9 +1,5 @@
-digraph "~ScopedVAArgs" {  
-"42" [label = <(va_end,va_end(*args))<SUB>77</SUB>> ]
-"43" [label = <(&lt;operator&gt;.indirection,*args)<SUB>77</SUB>> ]
-"40" [label = <(METHOD,~ScopedVAArgs)<SUB>77</SUB>> ]
-"45" [label = <(METHOD_RETURN,ANY)<SUB>77</SUB>> ]
-  "42" -> "45" 
-  "43" -> "42" 
-  "40" -> "43" 
+digraph "NotifyGetField" {  
+"79" [label = <(METHOD,NotifyGetField)<SUB>158</SUB>> ]
+"83" [label = <(METHOD_RETURN,void)<SUB>158</SUB>> ]
+  "79" -> "83" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/70-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/70-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/70-cfg.dot	2023-06-07 19:35:01.417387171 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/70-cfg.dot	2023-06-07 19:35:07.967386521 +0330
@@ -1,61 +1,53 @@
-digraph "CallCharMethod" {  
-"3536" [label = <(va_start,va_start(ap, mid))<SUB>993</SUB>> ]
-"3540" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>994</SUB>> ]
-"3543" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>995</SUB>> ]
-"3561" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>996</SUB>> ]
-"3580" [label = <(soa,soa(env))<SUB>997</SUB>> ]
-"3583" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap)))<SUB>998</SUB>> ]
-"3589" [label = <(RETURN,return result.GetC();,return result.GetC();)<SUB>999</SUB>> ]
-"3541" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>994</SUB>> ]
-"3584" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>998</SUB>> ]
-"3590" [label = <(GetC,result.GetC())<SUB>999</SUB>> ]
-"3591" [label = <(&lt;operator&gt;.fieldAccess,result.GetC)<SUB>999</SUB>> ]
-"3547" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>995</SUB>> ]
-"3565" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>996</SUB>> ]
-"3593" [label = <(FIELD_IDENTIFIER,GetC,GetC)<SUB>999</SUB>> ]
-"3548" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>995</SUB>> ]
-"3552" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>995</SUB>> ]
-"3559" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>995</SUB>> ]
-"3566" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>996</SUB>> ]
-"3570" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>996</SUB>> ]
-"3577" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>996</SUB>> ]
-"3553" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>995</SUB>> ]
-"3571" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>996</SUB>> ]
-"3554" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>995</SUB>> ]
-"3556" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>995</SUB>> ]
-"3572" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>996</SUB>> ]
-"3574" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>996</SUB>> ]
-"3530" [label = <(METHOD,CallCharMethod)<SUB>991</SUB>> ]
-"3594" [label = <(METHOD_RETURN,jchar)<SUB>991</SUB>> ]
-  "3536" -> "3541" 
-  "3540" -> "3543" 
-  "3543" -> "3548" 
-  "3543" -> "3561" 
-  "3561" -> "3566" 
-  "3561" -> "3580" 
-  "3580" -> "3584" 
-  "3583" -> "3593" 
-  "3589" -> "3594" 
-  "3541" -> "3540" 
-  "3584" -> "3583" 
-  "3590" -> "3589" 
-  "3591" -> "3590" 
-  "3547" -> "3554" 
-  "3547" -> "3561" 
-  "3565" -> "3572" 
-  "3565" -> "3580" 
-  "3593" -> "3591" 
-  "3548" -> "3547" 
-  "3552" -> "3559" 
-  "3559" -> "3594" 
-  "3566" -> "3565" 
-  "3570" -> "3577" 
-  "3577" -> "3594" 
-  "3553" -> "3552" 
-  "3571" -> "3570" 
-  "3554" -> "3556" 
-  "3556" -> "3553" 
-  "3572" -> "3574" 
-  "3574" -> "3571" 
-  "3530" -> "3536" 
+digraph "CallDoubleMethodV" {  
+"3587" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>950</SUB>> ]
+"3605" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>951</SUB>> ]
+"3624" [label = <(soa,soa(env))<SUB>952</SUB>> ]
+"3626" [label = <(RETURN,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetD();,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetD();)<SUB>953</SUB>> ]
+"3627" [label = <(GetD,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetD())<SUB>953</SUB>> ]
+"3628" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetD)<SUB>953</SUB>> ]
+"3591" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>950</SUB>> ]
+"3609" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>951</SUB>> ]
+"3629" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>953</SUB>> ]
+"3634" [label = <(FIELD_IDENTIFIER,GetD,GetD)<SUB>953</SUB>> ]
+"3592" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>950</SUB>> ]
+"3596" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>950</SUB>> ]
+"3603" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>950</SUB>> ]
+"3610" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>951</SUB>> ]
+"3614" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>951</SUB>> ]
+"3621" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>951</SUB>> ]
+"3597" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>950</SUB>> ]
+"3615" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>951</SUB>> ]
+"3598" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>950</SUB>> ]
+"3600" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>950</SUB>> ]
+"3616" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>951</SUB>> ]
+"3618" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>951</SUB>> ]
+"3581" [label = <(METHOD,CallDoubleMethodV)<SUB>949</SUB>> ]
+"3635" [label = <(METHOD_RETURN,jdouble)<SUB>949</SUB>> ]
+  "3587" -> "3592" 
+  "3587" -> "3605" 
+  "3605" -> "3610" 
+  "3605" -> "3624" 
+  "3624" -> "3629" 
+  "3626" -> "3635" 
+  "3627" -> "3626" 
+  "3628" -> "3627" 
+  "3591" -> "3598" 
+  "3591" -> "3605" 
+  "3609" -> "3616" 
+  "3609" -> "3624" 
+  "3629" -> "3634" 
+  "3634" -> "3628" 
+  "3592" -> "3591" 
+  "3596" -> "3603" 
+  "3603" -> "3635" 
+  "3610" -> "3609" 
+  "3614" -> "3621" 
+  "3621" -> "3635" 
+  "3597" -> "3596" 
+  "3615" -> "3614" 
+  "3598" -> "3600" 
+  "3600" -> "3597" 
+  "3616" -> "3618" 
+  "3618" -> "3615" 
+  "3581" -> "3587" 
 }
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out: 700-cfg.dot
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out: 701-cfg.dot
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out: 702-cfg.dot
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out: 703-cfg.dot
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out: 704-cfg.dot
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out: 705-cfg.dot
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out: 706-cfg.dot
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out: 707-cfg.dot
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out: 708-cfg.dot
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out: 709-cfg.dot
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/71-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/71-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/71-cfg.dot	2023-06-07 19:35:01.417387171 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/71-cfg.dot	2023-06-07 19:35:07.967386521 +0330
@@ -1,53 +1,53 @@
-digraph "CallCharMethodV" {  
-"3602" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1003</SUB>> ]
-"3620" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1004</SUB>> ]
-"3639" [label = <(soa,soa(env))<SUB>1005</SUB>> ]
-"3641" [label = <(RETURN,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetC();,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetC();)<SUB>1006</SUB>> ]
-"3642" [label = <(GetC,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetC())<SUB>1006</SUB>> ]
-"3643" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetC)<SUB>1006</SUB>> ]
-"3606" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1003</SUB>> ]
-"3624" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1004</SUB>> ]
-"3644" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>1006</SUB>> ]
-"3649" [label = <(FIELD_IDENTIFIER,GetC,GetC)<SUB>1006</SUB>> ]
-"3607" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1003</SUB>> ]
-"3611" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1003</SUB>> ]
-"3618" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1003</SUB>> ]
-"3625" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1004</SUB>> ]
-"3629" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1004</SUB>> ]
-"3636" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1004</SUB>> ]
-"3612" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1003</SUB>> ]
-"3630" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1004</SUB>> ]
-"3613" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1003</SUB>> ]
-"3615" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1003</SUB>> ]
-"3631" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1004</SUB>> ]
-"3633" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1004</SUB>> ]
-"3596" [label = <(METHOD,CallCharMethodV)<SUB>1002</SUB>> ]
-"3650" [label = <(METHOD_RETURN,jchar)<SUB>1002</SUB>> ]
-  "3602" -> "3607" 
-  "3602" -> "3620" 
-  "3620" -> "3625" 
-  "3620" -> "3639" 
-  "3639" -> "3644" 
-  "3641" -> "3650" 
-  "3642" -> "3641" 
-  "3643" -> "3642" 
-  "3606" -> "3613" 
-  "3606" -> "3620" 
-  "3624" -> "3631" 
-  "3624" -> "3639" 
-  "3644" -> "3649" 
-  "3649" -> "3643" 
-  "3607" -> "3606" 
-  "3611" -> "3618" 
-  "3618" -> "3650" 
-  "3625" -> "3624" 
-  "3629" -> "3636" 
-  "3636" -> "3650" 
-  "3612" -> "3611" 
-  "3630" -> "3629" 
-  "3613" -> "3615" 
-  "3615" -> "3612" 
-  "3631" -> "3633" 
-  "3633" -> "3630" 
-  "3596" -> "3602" 
+digraph "CallDoubleMethodA" {  
+"3643" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>957</SUB>> ]
+"3661" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>958</SUB>> ]
+"3680" [label = <(soa,soa(env))<SUB>959</SUB>> ]
+"3682" [label = <(RETURN,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetD();,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetD();)<SUB>960</SUB>> ]
+"3683" [label = <(GetD,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetD())<SUB>960</SUB>> ]
+"3684" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetD)<SUB>960</SUB>> ]
+"3647" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>957</SUB>> ]
+"3665" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>958</SUB>> ]
+"3685" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>960</SUB>> ]
+"3690" [label = <(FIELD_IDENTIFIER,GetD,GetD)<SUB>960</SUB>> ]
+"3648" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>957</SUB>> ]
+"3652" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>957</SUB>> ]
+"3659" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>957</SUB>> ]
+"3666" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>958</SUB>> ]
+"3670" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>958</SUB>> ]
+"3677" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>958</SUB>> ]
+"3653" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>957</SUB>> ]
+"3671" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>958</SUB>> ]
+"3654" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>957</SUB>> ]
+"3656" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>957</SUB>> ]
+"3672" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>958</SUB>> ]
+"3674" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>958</SUB>> ]
+"3637" [label = <(METHOD,CallDoubleMethodA)<SUB>956</SUB>> ]
+"3691" [label = <(METHOD_RETURN,jdouble)<SUB>956</SUB>> ]
+  "3643" -> "3648" 
+  "3643" -> "3661" 
+  "3661" -> "3666" 
+  "3661" -> "3680" 
+  "3680" -> "3685" 
+  "3682" -> "3691" 
+  "3683" -> "3682" 
+  "3684" -> "3683" 
+  "3647" -> "3654" 
+  "3647" -> "3661" 
+  "3665" -> "3672" 
+  "3665" -> "3680" 
+  "3685" -> "3690" 
+  "3690" -> "3684" 
+  "3648" -> "3647" 
+  "3652" -> "3659" 
+  "3659" -> "3691" 
+  "3666" -> "3665" 
+  "3670" -> "3677" 
+  "3677" -> "3691" 
+  "3653" -> "3652" 
+  "3671" -> "3670" 
+  "3654" -> "3656" 
+  "3656" -> "3653" 
+  "3672" -> "3674" 
+  "3674" -> "3671" 
+  "3637" -> "3643" 
 }
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out: 710-cfg.dot
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/72-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/72-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/72-cfg.dot	2023-06-07 19:35:01.417387171 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/72-cfg.dot	2023-06-07 19:35:07.967386521 +0330
@@ -1,53 +1,61 @@
-digraph "CallCharMethodA" {  
-"3658" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1010</SUB>> ]
-"3676" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1011</SUB>> ]
-"3695" [label = <(soa,soa(env))<SUB>1012</SUB>> ]
-"3697" [label = <(RETURN,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetC();,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetC();)<SUB>1013</SUB>> ]
-"3698" [label = <(GetC,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetC())<SUB>1013</SUB>> ]
-"3699" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetC)<SUB>1013</SUB>> ]
-"3662" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1010</SUB>> ]
-"3680" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1011</SUB>> ]
-"3700" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>1013</SUB>> ]
-"3705" [label = <(FIELD_IDENTIFIER,GetC,GetC)<SUB>1013</SUB>> ]
-"3663" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1010</SUB>> ]
-"3667" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1010</SUB>> ]
-"3674" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1010</SUB>> ]
-"3681" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1011</SUB>> ]
-"3685" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1011</SUB>> ]
-"3692" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1011</SUB>> ]
-"3668" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1010</SUB>> ]
-"3686" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1011</SUB>> ]
-"3669" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1010</SUB>> ]
-"3671" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1010</SUB>> ]
-"3687" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1011</SUB>> ]
-"3689" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1011</SUB>> ]
-"3652" [label = <(METHOD,CallCharMethodA)<SUB>1009</SUB>> ]
-"3706" [label = <(METHOD_RETURN,jchar)<SUB>1009</SUB>> ]
-  "3658" -> "3663" 
-  "3658" -> "3676" 
-  "3676" -> "3681" 
-  "3676" -> "3695" 
-  "3695" -> "3700" 
-  "3697" -> "3706" 
-  "3698" -> "3697" 
-  "3699" -> "3698" 
-  "3662" -> "3669" 
-  "3662" -> "3676" 
-  "3680" -> "3687" 
-  "3680" -> "3695" 
-  "3700" -> "3705" 
-  "3705" -> "3699" 
-  "3663" -> "3662" 
-  "3667" -> "3674" 
-  "3674" -> "3706" 
-  "3681" -> "3680" 
-  "3685" -> "3692" 
-  "3692" -> "3706" 
-  "3668" -> "3667" 
-  "3686" -> "3685" 
-  "3669" -> "3671" 
-  "3671" -> "3668" 
-  "3687" -> "3689" 
-  "3689" -> "3686" 
-  "3652" -> "3658" 
+digraph "CallFloatMethod" {  
+"3699" [label = <(va_start,va_start(ap, mid))<SUB>965</SUB>> ]
+"3703" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>966</SUB>> ]
+"3706" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>967</SUB>> ]
+"3724" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>968</SUB>> ]
+"3743" [label = <(soa,soa(env))<SUB>969</SUB>> ]
+"3746" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap)))<SUB>970</SUB>> ]
+"3752" [label = <(RETURN,return result.GetF();,return result.GetF();)<SUB>971</SUB>> ]
+"3704" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>966</SUB>> ]
+"3747" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>970</SUB>> ]
+"3753" [label = <(GetF,result.GetF())<SUB>971</SUB>> ]
+"3754" [label = <(&lt;operator&gt;.fieldAccess,result.GetF)<SUB>971</SUB>> ]
+"3710" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>967</SUB>> ]
+"3728" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>968</SUB>> ]
+"3756" [label = <(FIELD_IDENTIFIER,GetF,GetF)<SUB>971</SUB>> ]
+"3711" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>967</SUB>> ]
+"3715" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>967</SUB>> ]
+"3722" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>967</SUB>> ]
+"3729" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>968</SUB>> ]
+"3733" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>968</SUB>> ]
+"3740" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>968</SUB>> ]
+"3716" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>967</SUB>> ]
+"3734" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>968</SUB>> ]
+"3717" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>967</SUB>> ]
+"3719" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>967</SUB>> ]
+"3735" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>968</SUB>> ]
+"3737" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>968</SUB>> ]
+"3693" [label = <(METHOD,CallFloatMethod)<SUB>963</SUB>> ]
+"3757" [label = <(METHOD_RETURN,jfloat)<SUB>963</SUB>> ]
+  "3699" -> "3704" 
+  "3703" -> "3706" 
+  "3706" -> "3711" 
+  "3706" -> "3724" 
+  "3724" -> "3729" 
+  "3724" -> "3743" 
+  "3743" -> "3747" 
+  "3746" -> "3756" 
+  "3752" -> "3757" 
+  "3704" -> "3703" 
+  "3747" -> "3746" 
+  "3753" -> "3752" 
+  "3754" -> "3753" 
+  "3710" -> "3717" 
+  "3710" -> "3724" 
+  "3728" -> "3735" 
+  "3728" -> "3743" 
+  "3756" -> "3754" 
+  "3711" -> "3710" 
+  "3715" -> "3722" 
+  "3722" -> "3757" 
+  "3729" -> "3728" 
+  "3733" -> "3740" 
+  "3740" -> "3757" 
+  "3716" -> "3715" 
+  "3734" -> "3733" 
+  "3717" -> "3719" 
+  "3719" -> "3716" 
+  "3735" -> "3737" 
+  "3737" -> "3734" 
+  "3693" -> "3699" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/73-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/73-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/73-cfg.dot	2023-06-07 19:35:01.417387171 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/73-cfg.dot	2023-06-07 19:35:07.967386521 +0330
@@ -1,61 +1,53 @@
-digraph "CallDoubleMethod" {  
-"3714" [label = <(va_start,va_start(ap, mid))<SUB>1018</SUB>> ]
-"3718" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1019</SUB>> ]
-"3721" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1020</SUB>> ]
-"3739" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1021</SUB>> ]
-"3758" [label = <(soa,soa(env))<SUB>1022</SUB>> ]
-"3761" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap)))<SUB>1023</SUB>> ]
-"3767" [label = <(RETURN,return result.GetD();,return result.GetD();)<SUB>1024</SUB>> ]
-"3719" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1019</SUB>> ]
-"3762" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>1023</SUB>> ]
-"3768" [label = <(GetD,result.GetD())<SUB>1024</SUB>> ]
-"3769" [label = <(&lt;operator&gt;.fieldAccess,result.GetD)<SUB>1024</SUB>> ]
-"3725" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1020</SUB>> ]
-"3743" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1021</SUB>> ]
-"3771" [label = <(FIELD_IDENTIFIER,GetD,GetD)<SUB>1024</SUB>> ]
-"3726" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1020</SUB>> ]
-"3730" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1020</SUB>> ]
-"3737" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1020</SUB>> ]
-"3744" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1021</SUB>> ]
-"3748" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1021</SUB>> ]
-"3755" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1021</SUB>> ]
-"3731" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1020</SUB>> ]
-"3749" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1021</SUB>> ]
-"3732" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1020</SUB>> ]
-"3734" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1020</SUB>> ]
-"3750" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1021</SUB>> ]
-"3752" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1021</SUB>> ]
-"3708" [label = <(METHOD,CallDoubleMethod)<SUB>1016</SUB>> ]
-"3772" [label = <(METHOD_RETURN,jdouble)<SUB>1016</SUB>> ]
-  "3714" -> "3719" 
-  "3718" -> "3721" 
-  "3721" -> "3726" 
-  "3721" -> "3739" 
-  "3739" -> "3744" 
-  "3739" -> "3758" 
-  "3758" -> "3762" 
-  "3761" -> "3771" 
-  "3767" -> "3772" 
-  "3719" -> "3718" 
-  "3762" -> "3761" 
-  "3768" -> "3767" 
-  "3769" -> "3768" 
-  "3725" -> "3732" 
-  "3725" -> "3739" 
-  "3743" -> "3750" 
-  "3743" -> "3758" 
-  "3771" -> "3769" 
-  "3726" -> "3725" 
-  "3730" -> "3737" 
-  "3737" -> "3772" 
-  "3744" -> "3743" 
-  "3748" -> "3755" 
-  "3755" -> "3772" 
-  "3731" -> "3730" 
-  "3749" -> "3748" 
-  "3732" -> "3734" 
-  "3734" -> "3731" 
-  "3750" -> "3752" 
-  "3752" -> "3749" 
-  "3708" -> "3714" 
+digraph "CallFloatMethodV" {  
+"3765" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>975</SUB>> ]
+"3783" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>976</SUB>> ]
+"3802" [label = <(soa,soa(env))<SUB>977</SUB>> ]
+"3804" [label = <(RETURN,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetF();,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetF();)<SUB>978</SUB>> ]
+"3805" [label = <(GetF,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetF())<SUB>978</SUB>> ]
+"3806" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetF)<SUB>978</SUB>> ]
+"3769" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>975</SUB>> ]
+"3787" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>976</SUB>> ]
+"3807" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>978</SUB>> ]
+"3812" [label = <(FIELD_IDENTIFIER,GetF,GetF)<SUB>978</SUB>> ]
+"3770" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>975</SUB>> ]
+"3774" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>975</SUB>> ]
+"3781" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>975</SUB>> ]
+"3788" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>976</SUB>> ]
+"3792" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>976</SUB>> ]
+"3799" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>976</SUB>> ]
+"3775" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>975</SUB>> ]
+"3793" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>976</SUB>> ]
+"3776" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>975</SUB>> ]
+"3778" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>975</SUB>> ]
+"3794" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>976</SUB>> ]
+"3796" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>976</SUB>> ]
+"3759" [label = <(METHOD,CallFloatMethodV)<SUB>974</SUB>> ]
+"3813" [label = <(METHOD_RETURN,jfloat)<SUB>974</SUB>> ]
+  "3765" -> "3770" 
+  "3765" -> "3783" 
+  "3783" -> "3788" 
+  "3783" -> "3802" 
+  "3802" -> "3807" 
+  "3804" -> "3813" 
+  "3805" -> "3804" 
+  "3806" -> "3805" 
+  "3769" -> "3776" 
+  "3769" -> "3783" 
+  "3787" -> "3794" 
+  "3787" -> "3802" 
+  "3807" -> "3812" 
+  "3812" -> "3806" 
+  "3770" -> "3769" 
+  "3774" -> "3781" 
+  "3781" -> "3813" 
+  "3788" -> "3787" 
+  "3792" -> "3799" 
+  "3799" -> "3813" 
+  "3775" -> "3774" 
+  "3793" -> "3792" 
+  "3776" -> "3778" 
+  "3778" -> "3775" 
+  "3794" -> "3796" 
+  "3796" -> "3793" 
+  "3759" -> "3765" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/74-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/74-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/74-cfg.dot	2023-06-07 19:35:01.417387171 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/74-cfg.dot	2023-06-07 19:35:07.967386521 +0330
@@ -1,53 +1,53 @@
-digraph "CallDoubleMethodV" {  
-"3780" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1028</SUB>> ]
-"3798" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1029</SUB>> ]
-"3817" [label = <(soa,soa(env))<SUB>1030</SUB>> ]
-"3819" [label = <(RETURN,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetD();,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetD();)<SUB>1031</SUB>> ]
-"3820" [label = <(GetD,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetD())<SUB>1031</SUB>> ]
-"3821" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetD)<SUB>1031</SUB>> ]
-"3784" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1028</SUB>> ]
-"3802" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1029</SUB>> ]
-"3822" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>1031</SUB>> ]
-"3827" [label = <(FIELD_IDENTIFIER,GetD,GetD)<SUB>1031</SUB>> ]
-"3785" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1028</SUB>> ]
-"3789" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1028</SUB>> ]
-"3796" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1028</SUB>> ]
-"3803" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1029</SUB>> ]
-"3807" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1029</SUB>> ]
-"3814" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1029</SUB>> ]
-"3790" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1028</SUB>> ]
-"3808" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1029</SUB>> ]
-"3791" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1028</SUB>> ]
-"3793" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1028</SUB>> ]
-"3809" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1029</SUB>> ]
-"3811" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1029</SUB>> ]
-"3774" [label = <(METHOD,CallDoubleMethodV)<SUB>1027</SUB>> ]
-"3828" [label = <(METHOD_RETURN,jdouble)<SUB>1027</SUB>> ]
-  "3780" -> "3785" 
-  "3780" -> "3798" 
-  "3798" -> "3803" 
-  "3798" -> "3817" 
-  "3817" -> "3822" 
-  "3819" -> "3828" 
-  "3820" -> "3819" 
-  "3821" -> "3820" 
-  "3784" -> "3791" 
-  "3784" -> "3798" 
-  "3802" -> "3809" 
-  "3802" -> "3817" 
-  "3822" -> "3827" 
-  "3827" -> "3821" 
-  "3785" -> "3784" 
-  "3789" -> "3796" 
-  "3796" -> "3828" 
-  "3803" -> "3802" 
-  "3807" -> "3814" 
-  "3814" -> "3828" 
-  "3790" -> "3789" 
-  "3808" -> "3807" 
-  "3791" -> "3793" 
-  "3793" -> "3790" 
-  "3809" -> "3811" 
-  "3811" -> "3808" 
-  "3774" -> "3780" 
+digraph "CallFloatMethodA" {  
+"3821" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>982</SUB>> ]
+"3839" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>983</SUB>> ]
+"3858" [label = <(soa,soa(env))<SUB>984</SUB>> ]
+"3860" [label = <(RETURN,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetF();,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetF();)<SUB>985</SUB>> ]
+"3861" [label = <(GetF,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetF())<SUB>985</SUB>> ]
+"3862" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetF)<SUB>985</SUB>> ]
+"3825" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>982</SUB>> ]
+"3843" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>983</SUB>> ]
+"3863" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>985</SUB>> ]
+"3868" [label = <(FIELD_IDENTIFIER,GetF,GetF)<SUB>985</SUB>> ]
+"3826" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>982</SUB>> ]
+"3830" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>982</SUB>> ]
+"3837" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>982</SUB>> ]
+"3844" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>983</SUB>> ]
+"3848" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>983</SUB>> ]
+"3855" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>983</SUB>> ]
+"3831" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>982</SUB>> ]
+"3849" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>983</SUB>> ]
+"3832" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>982</SUB>> ]
+"3834" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>982</SUB>> ]
+"3850" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>983</SUB>> ]
+"3852" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>983</SUB>> ]
+"3815" [label = <(METHOD,CallFloatMethodA)<SUB>981</SUB>> ]
+"3869" [label = <(METHOD_RETURN,jfloat)<SUB>981</SUB>> ]
+  "3821" -> "3826" 
+  "3821" -> "3839" 
+  "3839" -> "3844" 
+  "3839" -> "3858" 
+  "3858" -> "3863" 
+  "3860" -> "3869" 
+  "3861" -> "3860" 
+  "3862" -> "3861" 
+  "3825" -> "3832" 
+  "3825" -> "3839" 
+  "3843" -> "3850" 
+  "3843" -> "3858" 
+  "3863" -> "3868" 
+  "3868" -> "3862" 
+  "3826" -> "3825" 
+  "3830" -> "3837" 
+  "3837" -> "3869" 
+  "3844" -> "3843" 
+  "3848" -> "3855" 
+  "3855" -> "3869" 
+  "3831" -> "3830" 
+  "3849" -> "3848" 
+  "3832" -> "3834" 
+  "3834" -> "3831" 
+  "3850" -> "3852" 
+  "3852" -> "3849" 
+  "3815" -> "3821" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/75-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/75-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/75-cfg.dot	2023-06-07 19:35:01.417387171 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/75-cfg.dot	2023-06-07 19:35:07.967386521 +0330
@@ -1,53 +1,61 @@
-digraph "CallDoubleMethodA" {  
-"3836" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1035</SUB>> ]
-"3854" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1036</SUB>> ]
-"3873" [label = <(soa,soa(env))<SUB>1037</SUB>> ]
-"3875" [label = <(RETURN,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetD();,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetD();)<SUB>1038</SUB>> ]
-"3876" [label = <(GetD,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetD())<SUB>1038</SUB>> ]
-"3877" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetD)<SUB>1038</SUB>> ]
-"3840" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1035</SUB>> ]
-"3858" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1036</SUB>> ]
-"3878" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>1038</SUB>> ]
-"3883" [label = <(FIELD_IDENTIFIER,GetD,GetD)<SUB>1038</SUB>> ]
-"3841" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1035</SUB>> ]
-"3845" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1035</SUB>> ]
-"3852" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1035</SUB>> ]
-"3859" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1036</SUB>> ]
-"3863" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1036</SUB>> ]
-"3870" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1036</SUB>> ]
-"3846" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1035</SUB>> ]
-"3864" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1036</SUB>> ]
-"3847" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1035</SUB>> ]
-"3849" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1035</SUB>> ]
-"3865" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1036</SUB>> ]
-"3867" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1036</SUB>> ]
-"3830" [label = <(METHOD,CallDoubleMethodA)<SUB>1034</SUB>> ]
-"3884" [label = <(METHOD_RETURN,jdouble)<SUB>1034</SUB>> ]
-  "3836" -> "3841" 
-  "3836" -> "3854" 
-  "3854" -> "3859" 
-  "3854" -> "3873" 
-  "3873" -> "3878" 
-  "3875" -> "3884" 
-  "3876" -> "3875" 
-  "3877" -> "3876" 
-  "3840" -> "3847" 
-  "3840" -> "3854" 
-  "3858" -> "3865" 
-  "3858" -> "3873" 
-  "3878" -> "3883" 
-  "3883" -> "3877" 
-  "3841" -> "3840" 
-  "3845" -> "3852" 
-  "3852" -> "3884" 
-  "3859" -> "3858" 
-  "3863" -> "3870" 
-  "3870" -> "3884" 
-  "3846" -> "3845" 
-  "3864" -> "3863" 
-  "3847" -> "3849" 
-  "3849" -> "3846" 
-  "3865" -> "3867" 
-  "3867" -> "3864" 
-  "3830" -> "3836" 
+digraph "CallIntMethod" {  
+"3877" [label = <(va_start,va_start(ap, mid))<SUB>990</SUB>> ]
+"3881" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>991</SUB>> ]
+"3884" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>992</SUB>> ]
+"3902" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>993</SUB>> ]
+"3921" [label = <(soa,soa(env))<SUB>994</SUB>> ]
+"3924" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap)))<SUB>995</SUB>> ]
+"3930" [label = <(RETURN,return result.GetI();,return result.GetI();)<SUB>996</SUB>> ]
+"3882" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>991</SUB>> ]
+"3925" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>995</SUB>> ]
+"3931" [label = <(GetI,result.GetI())<SUB>996</SUB>> ]
+"3932" [label = <(&lt;operator&gt;.fieldAccess,result.GetI)<SUB>996</SUB>> ]
+"3888" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>992</SUB>> ]
+"3906" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>993</SUB>> ]
+"3934" [label = <(FIELD_IDENTIFIER,GetI,GetI)<SUB>996</SUB>> ]
+"3889" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>992</SUB>> ]
+"3893" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>992</SUB>> ]
+"3900" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>992</SUB>> ]
+"3907" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>993</SUB>> ]
+"3911" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>993</SUB>> ]
+"3918" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>993</SUB>> ]
+"3894" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>992</SUB>> ]
+"3912" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>993</SUB>> ]
+"3895" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>992</SUB>> ]
+"3897" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>992</SUB>> ]
+"3913" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>993</SUB>> ]
+"3915" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>993</SUB>> ]
+"3871" [label = <(METHOD,CallIntMethod)<SUB>988</SUB>> ]
+"3935" [label = <(METHOD_RETURN,jint)<SUB>988</SUB>> ]
+  "3877" -> "3882" 
+  "3881" -> "3884" 
+  "3884" -> "3889" 
+  "3884" -> "3902" 
+  "3902" -> "3907" 
+  "3902" -> "3921" 
+  "3921" -> "3925" 
+  "3924" -> "3934" 
+  "3930" -> "3935" 
+  "3882" -> "3881" 
+  "3925" -> "3924" 
+  "3931" -> "3930" 
+  "3932" -> "3931" 
+  "3888" -> "3895" 
+  "3888" -> "3902" 
+  "3906" -> "3913" 
+  "3906" -> "3921" 
+  "3934" -> "3932" 
+  "3889" -> "3888" 
+  "3893" -> "3900" 
+  "3900" -> "3935" 
+  "3907" -> "3906" 
+  "3911" -> "3918" 
+  "3918" -> "3935" 
+  "3894" -> "3893" 
+  "3912" -> "3911" 
+  "3895" -> "3897" 
+  "3897" -> "3894" 
+  "3913" -> "3915" 
+  "3915" -> "3912" 
+  "3871" -> "3877" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/76-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/76-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/76-cfg.dot	2023-06-07 19:35:01.417387171 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/76-cfg.dot	2023-06-07 19:35:07.977386522 +0330
@@ -1,61 +1,53 @@
-digraph "CallFloatMethod" {  
-"3892" [label = <(va_start,va_start(ap, mid))<SUB>1043</SUB>> ]
-"3896" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1044</SUB>> ]
-"3899" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1045</SUB>> ]
-"3917" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1046</SUB>> ]
-"3936" [label = <(soa,soa(env))<SUB>1047</SUB>> ]
-"3939" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap)))<SUB>1048</SUB>> ]
-"3945" [label = <(RETURN,return result.GetF();,return result.GetF();)<SUB>1049</SUB>> ]
-"3897" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1044</SUB>> ]
-"3940" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>1048</SUB>> ]
-"3946" [label = <(GetF,result.GetF())<SUB>1049</SUB>> ]
-"3947" [label = <(&lt;operator&gt;.fieldAccess,result.GetF)<SUB>1049</SUB>> ]
-"3903" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1045</SUB>> ]
-"3921" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1046</SUB>> ]
-"3949" [label = <(FIELD_IDENTIFIER,GetF,GetF)<SUB>1049</SUB>> ]
-"3904" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1045</SUB>> ]
-"3908" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1045</SUB>> ]
-"3915" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1045</SUB>> ]
-"3922" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1046</SUB>> ]
-"3926" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1046</SUB>> ]
-"3933" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1046</SUB>> ]
-"3909" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1045</SUB>> ]
-"3927" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1046</SUB>> ]
-"3910" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1045</SUB>> ]
-"3912" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1045</SUB>> ]
-"3928" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1046</SUB>> ]
-"3930" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1046</SUB>> ]
-"3886" [label = <(METHOD,CallFloatMethod)<SUB>1041</SUB>> ]
-"3950" [label = <(METHOD_RETURN,jfloat)<SUB>1041</SUB>> ]
-  "3892" -> "3897" 
-  "3896" -> "3899" 
-  "3899" -> "3904" 
-  "3899" -> "3917" 
-  "3917" -> "3922" 
-  "3917" -> "3936" 
-  "3936" -> "3940" 
-  "3939" -> "3949" 
-  "3945" -> "3950" 
-  "3897" -> "3896" 
-  "3940" -> "3939" 
-  "3946" -> "3945" 
-  "3947" -> "3946" 
-  "3903" -> "3910" 
-  "3903" -> "3917" 
-  "3921" -> "3928" 
-  "3921" -> "3936" 
-  "3949" -> "3947" 
-  "3904" -> "3903" 
-  "3908" -> "3915" 
-  "3915" -> "3950" 
-  "3922" -> "3921" 
-  "3926" -> "3933" 
-  "3933" -> "3950" 
-  "3909" -> "3908" 
-  "3927" -> "3926" 
-  "3910" -> "3912" 
-  "3912" -> "3909" 
-  "3928" -> "3930" 
-  "3930" -> "3927" 
-  "3886" -> "3892" 
+digraph "CallIntMethodV" {  
+"3943" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1000</SUB>> ]
+"3961" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1001</SUB>> ]
+"3980" [label = <(soa,soa(env))<SUB>1002</SUB>> ]
+"3982" [label = <(RETURN,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetI();,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetI();)<SUB>1003</SUB>> ]
+"3983" [label = <(GetI,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetI())<SUB>1003</SUB>> ]
+"3984" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetI)<SUB>1003</SUB>> ]
+"3947" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1000</SUB>> ]
+"3965" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1001</SUB>> ]
+"3985" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>1003</SUB>> ]
+"3990" [label = <(FIELD_IDENTIFIER,GetI,GetI)<SUB>1003</SUB>> ]
+"3948" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1000</SUB>> ]
+"3952" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1000</SUB>> ]
+"3959" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1000</SUB>> ]
+"3966" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1001</SUB>> ]
+"3970" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1001</SUB>> ]
+"3977" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1001</SUB>> ]
+"3953" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1000</SUB>> ]
+"3971" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1001</SUB>> ]
+"3954" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1000</SUB>> ]
+"3956" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1000</SUB>> ]
+"3972" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1001</SUB>> ]
+"3974" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1001</SUB>> ]
+"3937" [label = <(METHOD,CallIntMethodV)<SUB>999</SUB>> ]
+"3991" [label = <(METHOD_RETURN,jint)<SUB>999</SUB>> ]
+  "3943" -> "3948" 
+  "3943" -> "3961" 
+  "3961" -> "3966" 
+  "3961" -> "3980" 
+  "3980" -> "3985" 
+  "3982" -> "3991" 
+  "3983" -> "3982" 
+  "3984" -> "3983" 
+  "3947" -> "3954" 
+  "3947" -> "3961" 
+  "3965" -> "3972" 
+  "3965" -> "3980" 
+  "3985" -> "3990" 
+  "3990" -> "3984" 
+  "3948" -> "3947" 
+  "3952" -> "3959" 
+  "3959" -> "3991" 
+  "3966" -> "3965" 
+  "3970" -> "3977" 
+  "3977" -> "3991" 
+  "3953" -> "3952" 
+  "3971" -> "3970" 
+  "3954" -> "3956" 
+  "3956" -> "3953" 
+  "3972" -> "3974" 
+  "3974" -> "3971" 
+  "3937" -> "3943" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/77-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/77-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/77-cfg.dot	2023-06-07 19:35:01.427387169 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/77-cfg.dot	2023-06-07 19:35:07.977386522 +0330
@@ -1,53 +1,53 @@
-digraph "CallFloatMethodV" {  
-"3958" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1053</SUB>> ]
-"3976" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1054</SUB>> ]
-"3995" [label = <(soa,soa(env))<SUB>1055</SUB>> ]
-"3997" [label = <(RETURN,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetF();,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetF();)<SUB>1056</SUB>> ]
-"3998" [label = <(GetF,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetF())<SUB>1056</SUB>> ]
-"3999" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetF)<SUB>1056</SUB>> ]
-"3962" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1053</SUB>> ]
-"3980" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1054</SUB>> ]
-"4000" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>1056</SUB>> ]
-"4005" [label = <(FIELD_IDENTIFIER,GetF,GetF)<SUB>1056</SUB>> ]
-"3963" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1053</SUB>> ]
-"3967" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1053</SUB>> ]
-"3974" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1053</SUB>> ]
-"3981" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1054</SUB>> ]
-"3985" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1054</SUB>> ]
-"3992" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1054</SUB>> ]
-"3968" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1053</SUB>> ]
-"3986" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1054</SUB>> ]
-"3969" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1053</SUB>> ]
-"3971" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1053</SUB>> ]
-"3987" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1054</SUB>> ]
-"3989" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1054</SUB>> ]
-"3952" [label = <(METHOD,CallFloatMethodV)<SUB>1052</SUB>> ]
-"4006" [label = <(METHOD_RETURN,jfloat)<SUB>1052</SUB>> ]
-  "3958" -> "3963" 
-  "3958" -> "3976" 
-  "3976" -> "3981" 
-  "3976" -> "3995" 
-  "3995" -> "4000" 
-  "3997" -> "4006" 
-  "3998" -> "3997" 
-  "3999" -> "3998" 
-  "3962" -> "3969" 
-  "3962" -> "3976" 
-  "3980" -> "3987" 
-  "3980" -> "3995" 
-  "4000" -> "4005" 
-  "4005" -> "3999" 
-  "3963" -> "3962" 
-  "3967" -> "3974" 
-  "3974" -> "4006" 
-  "3981" -> "3980" 
-  "3985" -> "3992" 
-  "3992" -> "4006" 
-  "3968" -> "3967" 
-  "3986" -> "3985" 
-  "3969" -> "3971" 
-  "3971" -> "3968" 
-  "3987" -> "3989" 
-  "3989" -> "3986" 
-  "3952" -> "3958" 
+digraph "CallIntMethodA" {  
+"3999" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1007</SUB>> ]
+"4017" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1008</SUB>> ]
+"4036" [label = <(soa,soa(env))<SUB>1009</SUB>> ]
+"4038" [label = <(RETURN,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetI();,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetI();)<SUB>1010</SUB>> ]
+"4039" [label = <(GetI,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetI())<SUB>1010</SUB>> ]
+"4040" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetI)<SUB>1010</SUB>> ]
+"4003" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1007</SUB>> ]
+"4021" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1008</SUB>> ]
+"4041" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>1010</SUB>> ]
+"4046" [label = <(FIELD_IDENTIFIER,GetI,GetI)<SUB>1010</SUB>> ]
+"4004" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1007</SUB>> ]
+"4008" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1007</SUB>> ]
+"4015" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1007</SUB>> ]
+"4022" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1008</SUB>> ]
+"4026" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1008</SUB>> ]
+"4033" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1008</SUB>> ]
+"4009" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1007</SUB>> ]
+"4027" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1008</SUB>> ]
+"4010" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1007</SUB>> ]
+"4012" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1007</SUB>> ]
+"4028" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1008</SUB>> ]
+"4030" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1008</SUB>> ]
+"3993" [label = <(METHOD,CallIntMethodA)<SUB>1006</SUB>> ]
+"4047" [label = <(METHOD_RETURN,jint)<SUB>1006</SUB>> ]
+  "3999" -> "4004" 
+  "3999" -> "4017" 
+  "4017" -> "4022" 
+  "4017" -> "4036" 
+  "4036" -> "4041" 
+  "4038" -> "4047" 
+  "4039" -> "4038" 
+  "4040" -> "4039" 
+  "4003" -> "4010" 
+  "4003" -> "4017" 
+  "4021" -> "4028" 
+  "4021" -> "4036" 
+  "4041" -> "4046" 
+  "4046" -> "4040" 
+  "4004" -> "4003" 
+  "4008" -> "4015" 
+  "4015" -> "4047" 
+  "4022" -> "4021" 
+  "4026" -> "4033" 
+  "4033" -> "4047" 
+  "4009" -> "4008" 
+  "4027" -> "4026" 
+  "4010" -> "4012" 
+  "4012" -> "4009" 
+  "4028" -> "4030" 
+  "4030" -> "4027" 
+  "3993" -> "3999" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/78-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/78-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/78-cfg.dot	2023-06-07 19:35:01.427387169 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/78-cfg.dot	2023-06-07 19:35:07.977386522 +0330
@@ -1,53 +1,61 @@
-digraph "CallFloatMethodA" {  
-"4014" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1060</SUB>> ]
-"4032" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1061</SUB>> ]
-"4051" [label = <(soa,soa(env))<SUB>1062</SUB>> ]
-"4053" [label = <(RETURN,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetF();,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetF();)<SUB>1063</SUB>> ]
-"4054" [label = <(GetF,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetF())<SUB>1063</SUB>> ]
-"4055" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetF)<SUB>1063</SUB>> ]
-"4018" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1060</SUB>> ]
-"4036" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1061</SUB>> ]
-"4056" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>1063</SUB>> ]
-"4061" [label = <(FIELD_IDENTIFIER,GetF,GetF)<SUB>1063</SUB>> ]
-"4019" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1060</SUB>> ]
-"4023" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1060</SUB>> ]
-"4030" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1060</SUB>> ]
-"4037" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1061</SUB>> ]
-"4041" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1061</SUB>> ]
-"4048" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1061</SUB>> ]
-"4024" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1060</SUB>> ]
-"4042" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1061</SUB>> ]
-"4025" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1060</SUB>> ]
-"4027" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1060</SUB>> ]
-"4043" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1061</SUB>> ]
-"4045" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1061</SUB>> ]
-"4008" [label = <(METHOD,CallFloatMethodA)<SUB>1059</SUB>> ]
-"4062" [label = <(METHOD_RETURN,jfloat)<SUB>1059</SUB>> ]
-  "4014" -> "4019" 
-  "4014" -> "4032" 
-  "4032" -> "4037" 
-  "4032" -> "4051" 
-  "4051" -> "4056" 
-  "4053" -> "4062" 
-  "4054" -> "4053" 
-  "4055" -> "4054" 
-  "4018" -> "4025" 
-  "4018" -> "4032" 
-  "4036" -> "4043" 
-  "4036" -> "4051" 
-  "4056" -> "4061" 
-  "4061" -> "4055" 
-  "4019" -> "4018" 
-  "4023" -> "4030" 
-  "4030" -> "4062" 
-  "4037" -> "4036" 
-  "4041" -> "4048" 
-  "4048" -> "4062" 
-  "4024" -> "4023" 
-  "4042" -> "4041" 
-  "4025" -> "4027" 
-  "4027" -> "4024" 
-  "4043" -> "4045" 
-  "4045" -> "4042" 
-  "4008" -> "4014" 
+digraph "CallLongMethod" {  
+"4055" [label = <(va_start,va_start(ap, mid))<SUB>1015</SUB>> ]
+"4059" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1016</SUB>> ]
+"4062" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1017</SUB>> ]
+"4080" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1018</SUB>> ]
+"4099" [label = <(soa,soa(env))<SUB>1019</SUB>> ]
+"4102" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap)))<SUB>1020</SUB>> ]
+"4108" [label = <(RETURN,return result.GetJ();,return result.GetJ();)<SUB>1021</SUB>> ]
+"4060" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1016</SUB>> ]
+"4103" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>1020</SUB>> ]
+"4109" [label = <(GetJ,result.GetJ())<SUB>1021</SUB>> ]
+"4110" [label = <(&lt;operator&gt;.fieldAccess,result.GetJ)<SUB>1021</SUB>> ]
+"4066" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1017</SUB>> ]
+"4084" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1018</SUB>> ]
+"4112" [label = <(FIELD_IDENTIFIER,GetJ,GetJ)<SUB>1021</SUB>> ]
+"4067" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1017</SUB>> ]
+"4071" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1017</SUB>> ]
+"4078" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1017</SUB>> ]
+"4085" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1018</SUB>> ]
+"4089" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1018</SUB>> ]
+"4096" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1018</SUB>> ]
+"4072" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1017</SUB>> ]
+"4090" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1018</SUB>> ]
+"4073" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1017</SUB>> ]
+"4075" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1017</SUB>> ]
+"4091" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1018</SUB>> ]
+"4093" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1018</SUB>> ]
+"4049" [label = <(METHOD,CallLongMethod)<SUB>1013</SUB>> ]
+"4113" [label = <(METHOD_RETURN,jlong)<SUB>1013</SUB>> ]
+  "4055" -> "4060" 
+  "4059" -> "4062" 
+  "4062" -> "4067" 
+  "4062" -> "4080" 
+  "4080" -> "4085" 
+  "4080" -> "4099" 
+  "4099" -> "4103" 
+  "4102" -> "4112" 
+  "4108" -> "4113" 
+  "4060" -> "4059" 
+  "4103" -> "4102" 
+  "4109" -> "4108" 
+  "4110" -> "4109" 
+  "4066" -> "4073" 
+  "4066" -> "4080" 
+  "4084" -> "4091" 
+  "4084" -> "4099" 
+  "4112" -> "4110" 
+  "4067" -> "4066" 
+  "4071" -> "4078" 
+  "4078" -> "4113" 
+  "4085" -> "4084" 
+  "4089" -> "4096" 
+  "4096" -> "4113" 
+  "4072" -> "4071" 
+  "4090" -> "4089" 
+  "4073" -> "4075" 
+  "4075" -> "4072" 
+  "4091" -> "4093" 
+  "4093" -> "4090" 
+  "4049" -> "4055" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/79-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/79-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/79-cfg.dot	2023-06-07 19:35:01.427387169 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/79-cfg.dot	2023-06-07 19:35:07.977386522 +0330
@@ -1,61 +1,53 @@
-digraph "CallIntMethod" {  
-"4070" [label = <(va_start,va_start(ap, mid))<SUB>1068</SUB>> ]
-"4074" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1069</SUB>> ]
-"4077" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1070</SUB>> ]
-"4095" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1071</SUB>> ]
-"4114" [label = <(soa,soa(env))<SUB>1072</SUB>> ]
-"4117" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap)))<SUB>1073</SUB>> ]
-"4123" [label = <(RETURN,return result.GetI();,return result.GetI();)<SUB>1074</SUB>> ]
-"4075" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1069</SUB>> ]
-"4118" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>1073</SUB>> ]
-"4124" [label = <(GetI,result.GetI())<SUB>1074</SUB>> ]
-"4125" [label = <(&lt;operator&gt;.fieldAccess,result.GetI)<SUB>1074</SUB>> ]
-"4081" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1070</SUB>> ]
-"4099" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1071</SUB>> ]
-"4127" [label = <(FIELD_IDENTIFIER,GetI,GetI)<SUB>1074</SUB>> ]
-"4082" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1070</SUB>> ]
-"4086" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1070</SUB>> ]
-"4093" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1070</SUB>> ]
-"4100" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1071</SUB>> ]
-"4104" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1071</SUB>> ]
-"4111" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1071</SUB>> ]
-"4087" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1070</SUB>> ]
-"4105" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1071</SUB>> ]
-"4088" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1070</SUB>> ]
-"4090" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1070</SUB>> ]
-"4106" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1071</SUB>> ]
-"4108" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1071</SUB>> ]
-"4064" [label = <(METHOD,CallIntMethod)<SUB>1066</SUB>> ]
-"4128" [label = <(METHOD_RETURN,jint)<SUB>1066</SUB>> ]
-  "4070" -> "4075" 
-  "4074" -> "4077" 
-  "4077" -> "4082" 
-  "4077" -> "4095" 
-  "4095" -> "4100" 
-  "4095" -> "4114" 
-  "4114" -> "4118" 
-  "4117" -> "4127" 
-  "4123" -> "4128" 
-  "4075" -> "4074" 
-  "4118" -> "4117" 
-  "4124" -> "4123" 
-  "4125" -> "4124" 
-  "4081" -> "4088" 
-  "4081" -> "4095" 
-  "4099" -> "4106" 
-  "4099" -> "4114" 
-  "4127" -> "4125" 
-  "4082" -> "4081" 
-  "4086" -> "4093" 
-  "4093" -> "4128" 
-  "4100" -> "4099" 
-  "4104" -> "4111" 
-  "4111" -> "4128" 
-  "4087" -> "4086" 
-  "4105" -> "4104" 
-  "4088" -> "4090" 
-  "4090" -> "4087" 
-  "4106" -> "4108" 
-  "4108" -> "4105" 
-  "4064" -> "4070" 
+digraph "CallLongMethodV" {  
+"4121" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1025</SUB>> ]
+"4139" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1026</SUB>> ]
+"4158" [label = <(soa,soa(env))<SUB>1027</SUB>> ]
+"4160" [label = <(RETURN,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetJ();,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetJ();)<SUB>1028</SUB>> ]
+"4161" [label = <(GetJ,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetJ())<SUB>1028</SUB>> ]
+"4162" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetJ)<SUB>1028</SUB>> ]
+"4125" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1025</SUB>> ]
+"4143" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1026</SUB>> ]
+"4163" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>1028</SUB>> ]
+"4168" [label = <(FIELD_IDENTIFIER,GetJ,GetJ)<SUB>1028</SUB>> ]
+"4126" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1025</SUB>> ]
+"4130" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1025</SUB>> ]
+"4137" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1025</SUB>> ]
+"4144" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1026</SUB>> ]
+"4148" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1026</SUB>> ]
+"4155" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1026</SUB>> ]
+"4131" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1025</SUB>> ]
+"4149" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1026</SUB>> ]
+"4132" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1025</SUB>> ]
+"4134" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1025</SUB>> ]
+"4150" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1026</SUB>> ]
+"4152" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1026</SUB>> ]
+"4115" [label = <(METHOD,CallLongMethodV)<SUB>1024</SUB>> ]
+"4169" [label = <(METHOD_RETURN,jlong)<SUB>1024</SUB>> ]
+  "4121" -> "4126" 
+  "4121" -> "4139" 
+  "4139" -> "4144" 
+  "4139" -> "4158" 
+  "4158" -> "4163" 
+  "4160" -> "4169" 
+  "4161" -> "4160" 
+  "4162" -> "4161" 
+  "4125" -> "4132" 
+  "4125" -> "4139" 
+  "4143" -> "4150" 
+  "4143" -> "4158" 
+  "4163" -> "4168" 
+  "4168" -> "4162" 
+  "4126" -> "4125" 
+  "4130" -> "4137" 
+  "4137" -> "4169" 
+  "4144" -> "4143" 
+  "4148" -> "4155" 
+  "4155" -> "4169" 
+  "4131" -> "4130" 
+  "4149" -> "4148" 
+  "4132" -> "4134" 
+  "4134" -> "4131" 
+  "4150" -> "4152" 
+  "4152" -> "4149" 
+  "4115" -> "4121" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/8-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/8-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/8-cfg.dot	2023-06-07 19:35:01.337387177 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/8-cfg.dot	2023-06-07 19:35:07.907386529 +0330
@@ -1,153 +1,63 @@
-digraph "VisitModifiedUtf8Chars" {  
-"58" [label = <(DCHECK_LE,DCHECK_LE(byte_count, strlen(utf8)))<SUB>96</SUB>> ]
-"63" [label = <(&lt;operator&gt;.assignment,len = 0)<SUB>97</SUB>> ]
-"67" [label = <(&lt;operator&gt;.assignment,* end = utf8 + byte_count)<SUB>98</SUB>> ]
-"223" [label = <(RETURN,return len;,return len;)<SUB>156</SUB>> ]
-"60" [label = <(strlen,strlen(utf8))<SUB>96</SUB>> ]
-"69" [label = <(&lt;operator&gt;.addition,utf8 + byte_count)<SUB>98</SUB>> ]
-"73" [label = <(&lt;operator&gt;.notEquals,utf8 != end)<SUB>99</SUB>> ]
-"78" [label = <(&lt;operator&gt;.assignment,ic = *utf8)<SUB>100</SUB>> ]
-"101" [label = <(&lt;operator&gt;.assignment,is_ascii = [utf8]() {\012 const char* ptr = utf8; // Make a copy that can be modified by GetUtf16FromUtf8().\012 return mirror::String::IsASCII(dchecked_integral_cast&lt;uint16_t&gt;(GetUtf16FromUtf8(&amp;ptr)));\012 })<SUB>108</SUB>> ]
-"214" [label = <(good,good(utf8, 4u))<SUB>152</SUB>> ]
-"217" [label = <(&lt;operator&gt;.assignmentPlus,utf8 += 4u)<SUB>153</SUB>> ]
-"220" [label = <(&lt;operator&gt;.assignmentPlus,len += 2u)<SUB>154</SUB>> ]
-"80" [label = <(&lt;operator&gt;.indirection,*utf8)<SUB>100</SUB>> ]
-"83" [label = <(LIKELY,LIKELY((ic &amp; 0x80) == 0))<SUB>101</SUB>> ]
-"103" [label = <(METHOD_REF,ANY anonymous_lambda_8 (),is_ascii = [utf8]() {\012 const char* ptr = utf8; // Make a copy that can be modified by GetUtf16FromUtf8().\012 return mirror::String::IsASCII(dchecked_integral_cast&lt;uint16_t&gt;(GetUtf16FromUtf8(&amp;ptr)));\012 })<SUB>108</SUB>> ]
-"105" [label = <(&lt;operator&gt;.equals,(ic &amp; 0x20) == 0)<SUB>114</SUB>> ]
-"152" [label = <(&lt;operator&gt;.equals,(ic &amp; 0x10) == 0)<SUB>130</SUB>> ]
-"199" [label = <(&lt;operator&gt;.lessThan,static_cast&lt;size_t&gt;(end - utf8) &lt; 4u)<SUB>149</SUB>> ]
-"84" [label = <(&lt;operator&gt;.equals,(ic &amp; 0x80) == 0)<SUB>101</SUB>> ]
-"90" [label = <(good,good(utf8, 1u))<SUB>103</SUB>> ]
-"93" [label = <(&lt;operator&gt;.assignmentPlus,utf8 += 1u)<SUB>104</SUB>> ]
-"96" [label = <(&lt;operator&gt;.assignmentPlus,len += 1u)<SUB>105</SUB>> ]
-"106" [label = <(&lt;operator&gt;.and,ic &amp; 0x20)<SUB>114</SUB>> ]
-"144" [label = <(&lt;operator&gt;.assignmentPlus,utf8 += 2u)<SUB>126</SUB>> ]
-"147" [label = <(&lt;operator&gt;.assignmentPlus,len += 1u)<SUB>127</SUB>> ]
-"153" [label = <(&lt;operator&gt;.and,ic &amp; 0x10)<SUB>130</SUB>> ]
-"191" [label = <(&lt;operator&gt;.assignmentPlus,utf8 += 3u)<SUB>142</SUB>> ]
-"194" [label = <(&lt;operator&gt;.assignmentPlus,len += 1u)<SUB>143</SUB>> ]
-"200" [label = <(&lt;operator&gt;.cast,static_cast&lt;size_t&gt;(end - utf8))<SUB>149</SUB>> ]
-"207" [label = <(RETURN,return bad() ? 0u : len + 1u;,return bad() ? 0u : len + 1u;)<SUB>150</SUB>> ]
-"85" [label = <(&lt;operator&gt;.and,ic &amp; 0x80)<SUB>101</SUB>> ]
-"112" [label = <(&lt;operator&gt;.lessThan,static_cast&lt;size_t&gt;(end - utf8) &lt; 2u)<SUB>116</SUB>> ]
-"128" [label = <(&lt;operator&gt;.logicalAnd,mirror::kUseStringCompression &amp;&amp; is_ascii())<SUB>119</SUB>> ]
-"159" [label = <(&lt;operator&gt;.lessThan,static_cast&lt;size_t&gt;(end - utf8) &lt; 3u)<SUB>132</SUB>> ]
-"175" [label = <(&lt;operator&gt;.logicalAnd,mirror::kUseStringCompression &amp;&amp; is_ascii())<SUB>135</SUB>> ]
-"201" [label = <(UNKNOWN,size_t,size_t)<SUB>149</SUB>> ]
-"202" [label = <(&lt;operator&gt;.subtraction,end - utf8)<SUB>149</SUB>> ]
-"208" [label = <(&lt;operator&gt;.conditional,bad() ? 0u : len + 1u)<SUB>150</SUB>> ]
-"113" [label = <(&lt;operator&gt;.cast,static_cast&lt;size_t&gt;(end - utf8))<SUB>116</SUB>> ]
-"120" [label = <(RETURN,return bad() ? 0u : len + 1u;,return bad() ? 0u : len + 1u;)<SUB>117</SUB>> ]
-"129" [label = <(&lt;operator&gt;.fieldAccess,mirror::kUseStringCompression)<SUB>119</SUB>> ]
-"132" [label = <(is_ascii,is_ascii())<SUB>119</SUB>> ]
-"160" [label = <(&lt;operator&gt;.cast,static_cast&lt;size_t&gt;(end - utf8))<SUB>132</SUB>> ]
-"167" [label = <(RETURN,return bad() ? 0u : len + 1u;,return bad() ? 0u : len + 1u;)<SUB>133</SUB>> ]
-"176" [label = <(&lt;operator&gt;.fieldAccess,mirror::kUseStringCompression)<SUB>135</SUB>> ]
-"179" [label = <(is_ascii,is_ascii())<SUB>135</SUB>> ]
-"209" [label = <(bad,bad())<SUB>150</SUB>> ]
-"211" [label = <(&lt;operator&gt;.addition,len + 1u)<SUB>150</SUB>> ]
-"114" [label = <(UNKNOWN,size_t,size_t)<SUB>116</SUB>> ]
-"115" [label = <(&lt;operator&gt;.subtraction,end - utf8)<SUB>116</SUB>> ]
-"121" [label = <(&lt;operator&gt;.conditional,bad() ? 0u : len + 1u)<SUB>117</SUB>> ]
-"131" [label = <(FIELD_IDENTIFIER,kUseStringCompression,kUseStringCompression)<SUB>119</SUB>> ]
-"135" [label = <(bad,bad())<SUB>120</SUB>> ]
-"141" [label = <(good,good(utf8, 2u))<SUB>124</SUB>> ]
-"161" [label = <(UNKNOWN,size_t,size_t)<SUB>132</SUB>> ]
-"162" [label = <(&lt;operator&gt;.subtraction,end - utf8)<SUB>132</SUB>> ]
-"168" [label = <(&lt;operator&gt;.conditional,bad() ? 0u : len + 1u)<SUB>133</SUB>> ]
-"178" [label = <(FIELD_IDENTIFIER,kUseStringCompression,kUseStringCompression)<SUB>135</SUB>> ]
-"182" [label = <(bad,bad())<SUB>136</SUB>> ]
-"188" [label = <(good,good(utf8, 3u))<SUB>140</SUB>> ]
-"122" [label = <(bad,bad())<SUB>117</SUB>> ]
-"124" [label = <(&lt;operator&gt;.addition,len + 1u)<SUB>117</SUB>> ]
-"137" [label = <(RETURN,return 0u;,return 0u;)<SUB>121</SUB>> ]
-"169" [label = <(bad,bad())<SUB>133</SUB>> ]
-"171" [label = <(&lt;operator&gt;.addition,len + 1u)<SUB>133</SUB>> ]
-"184" [label = <(RETURN,return 0u;,return 0u;)<SUB>137</SUB>> ]
-"52" [label = <(METHOD,VisitModifiedUtf8Chars)<SUB>95</SUB>> ]
-"225" [label = <(METHOD_RETURN,size_t)<SUB>95</SUB>> ]
-  "58" -> "63" 
-  "63" -> "69" 
-  "67" -> "73" 
-  "223" -> "225" 
-  "60" -> "58" 
-  "69" -> "67" 
-  "73" -> "80" 
-  "73" -> "223" 
-  "78" -> "85" 
-  "101" -> "106" 
-  "214" -> "217" 
-  "217" -> "220" 
-  "220" -> "73" 
-  "80" -> "78" 
-  "83" -> "90" 
-  "83" -> "103" 
-  "103" -> "101" 
-  "105" -> "114" 
-  "105" -> "153" 
-  "152" -> "161" 
-  "152" -> "201" 
-  "199" -> "209" 
-  "199" -> "214" 
-  "84" -> "83" 
-  "90" -> "93" 
-  "93" -> "96" 
-  "96" -> "73" 
-  "106" -> "105" 
-  "144" -> "147" 
-  "147" -> "73" 
-  "153" -> "152" 
-  "191" -> "194" 
-  "194" -> "73" 
-  "200" -> "199" 
-  "207" -> "225" 
-  "85" -> "84" 
-  "112" -> "122" 
-  "112" -> "131" 
-  "128" -> "135" 
-  "128" -> "141" 
-  "159" -> "169" 
-  "159" -> "178" 
-  "175" -> "182" 
-  "175" -> "188" 
-  "201" -> "202" 
-  "202" -> "200" 
-  "208" -> "207" 
-  "113" -> "112" 
-  "120" -> "225" 
-  "129" -> "132" 
+digraph "NormalizeJniClassDescriptor" {  
+"151" [label = <(RETURN,return result;,return result;)<SUB>202</SUB>> ]
+"94" [label = <(&lt;operator&gt;.equals,name[0] == '[')<SUB>189</SUB>> ]
+"115" [label = <(&lt;operator&gt;.notEquals,result.find('.') != std::string::npos)<SUB>197</SUB>> ]
+"95" [label = <(&lt;operator&gt;.indirectIndexAccess,name[0])<SUB>189</SUB>> ]
+"100" [label = <(&lt;operator&gt;.assignment,result = name)<SUB>190</SUB>> ]
+"116" [label = <(find,result.find('.'))<SUB>197</SUB>> ]
+"121" [label = <(&lt;operator&gt;.fieldAccess,std::string::npos)<SUB>197</SUB>> ]
+"127" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;Call to JNI FindClass with dots in name: &quot;\012 &lt;&lt; &quot;\&quot;&quot; &lt;&lt; name &lt;&lt; &quot;\&quot;&quot;)<SUB>198</SUB>> ]
+"137" [label = <(std::replace,std::replace(result.begin(), result.end(), '.', '/'))<SUB>200</SUB>> ]
+"105" [label = <(&lt;operator&gt;.assignmentPlus,result += 'L')<SUB>192</SUB>> ]
+"108" [label = <(&lt;operator&gt;.assignmentPlus,result += name)<SUB>193</SUB>> ]
+"111" [label = <(&lt;operator&gt;.assignmentPlus,result += ';')<SUB>194</SUB>> ]
+"117" [label = <(&lt;operator&gt;.fieldAccess,result.find)<SUB>197</SUB>> ]
+"122" [label = <(&lt;operator&gt;.fieldAccess,std::string)<SUB>197</SUB>> ]
+"125" [label = <(FIELD_IDENTIFIER,npos,npos)<SUB>197</SUB>> ]
+"128" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;Call to JNI FindClass with dots in name: &quot;\012 &lt;&lt; &quot;\&quot;&quot; &lt;&lt; name)<SUB>198</SUB>> ]
+"138" [label = <(&lt;operator&gt;.fieldAccess,std::replace)<SUB>200</SUB>> ]
+"141" [label = <(begin,result.begin())<SUB>200</SUB>> ]
+"145" [label = <(end,result.end())<SUB>200</SUB>> ]
+"119" [label = <(FIELD_IDENTIFIER,find,find)<SUB>197</SUB>> ]
+"129" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;Call to JNI FindClass with dots in name: &quot;\012 &lt;&lt; &quot;\&quot;&quot;)<SUB>198</SUB>> ]
+"140" [label = <(FIELD_IDENTIFIER,replace,replace)<SUB>200</SUB>> ]
+"142" [label = <(&lt;operator&gt;.fieldAccess,result.begin)<SUB>200</SUB>> ]
+"146" [label = <(&lt;operator&gt;.fieldAccess,result.end)<SUB>200</SUB>> ]
+"130" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;Call to JNI FindClass with dots in name: &quot;)<SUB>198</SUB>> ]
+"144" [label = <(FIELD_IDENTIFIER,begin,begin)<SUB>200</SUB>> ]
+"148" [label = <(FIELD_IDENTIFIER,end,end)<SUB>200</SUB>> ]
+"131" [label = <(LOG,LOG(WARNING))<SUB>198</SUB>> ]
+"89" [label = <(METHOD,NormalizeJniClassDescriptor)<SUB>186</SUB>> ]
+"153" [label = <(METHOD_RETURN,string)<SUB>186</SUB>> ]
+  "151" -> "153" 
+  "94" -> "100" 
+  "94" -> "105" 
+  "115" -> "131" 
+  "115" -> "151" 
+  "95" -> "94" 
+  "100" -> "119" 
+  "116" -> "122" 
+  "121" -> "115" 
+  "127" -> "140" 
+  "137" -> "151" 
+  "105" -> "108" 
+  "108" -> "111" 
+  "111" -> "119" 
+  "117" -> "116" 
+  "122" -> "125" 
+  "125" -> "121" 
+  "128" -> "127" 
+  "138" -> "144" 
+  "141" -> "148" 
+  "145" -> "137" 
+  "119" -> "117" 
   "129" -> "128" 
-  "132" -> "128" 
-  "160" -> "159" 
-  "167" -> "225" 
-  "176" -> "179" 
-  "176" -> "175" 
-  "179" -> "175" 
-  "209" -> "208" 
-  "209" -> "211" 
-  "211" -> "208" 
-  "114" -> "115" 
-  "115" -> "113" 
-  "121" -> "120" 
-  "131" -> "129" 
-  "135" -> "137" 
-  "135" -> "144" 
-  "141" -> "144" 
-  "161" -> "162" 
-  "162" -> "160" 
-  "168" -> "167" 
-  "178" -> "176" 
-  "182" -> "184" 
-  "182" -> "191" 
-  "188" -> "191" 
-  "122" -> "121" 
-  "122" -> "124" 
-  "124" -> "121" 
-  "137" -> "225" 
-  "169" -> "168" 
-  "169" -> "171" 
-  "171" -> "168" 
-  "184" -> "225" 
-  "52" -> "60" 
+  "140" -> "138" 
+  "142" -> "141" 
+  "146" -> "145" 
+  "130" -> "129" 
+  "144" -> "142" 
+  "148" -> "146" 
+  "131" -> "130" 
+  "89" -> "95" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/80-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/80-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/80-cfg.dot	2023-06-07 19:35:01.427387169 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/80-cfg.dot	2023-06-07 19:35:07.977386522 +0330
@@ -1,53 +1,53 @@
-digraph "CallIntMethodV" {  
-"4136" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1078</SUB>> ]
-"4154" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1079</SUB>> ]
-"4173" [label = <(soa,soa(env))<SUB>1080</SUB>> ]
-"4175" [label = <(RETURN,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetI();,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetI();)<SUB>1081</SUB>> ]
-"4176" [label = <(GetI,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetI())<SUB>1081</SUB>> ]
-"4177" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetI)<SUB>1081</SUB>> ]
-"4140" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1078</SUB>> ]
-"4158" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1079</SUB>> ]
-"4178" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>1081</SUB>> ]
-"4183" [label = <(FIELD_IDENTIFIER,GetI,GetI)<SUB>1081</SUB>> ]
-"4141" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1078</SUB>> ]
-"4145" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1078</SUB>> ]
-"4152" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1078</SUB>> ]
-"4159" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1079</SUB>> ]
-"4163" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1079</SUB>> ]
-"4170" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1079</SUB>> ]
-"4146" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1078</SUB>> ]
-"4164" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1079</SUB>> ]
-"4147" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1078</SUB>> ]
-"4149" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1078</SUB>> ]
-"4165" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1079</SUB>> ]
-"4167" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1079</SUB>> ]
-"4130" [label = <(METHOD,CallIntMethodV)<SUB>1077</SUB>> ]
-"4184" [label = <(METHOD_RETURN,jint)<SUB>1077</SUB>> ]
-  "4136" -> "4141" 
-  "4136" -> "4154" 
-  "4154" -> "4159" 
-  "4154" -> "4173" 
-  "4173" -> "4178" 
-  "4175" -> "4184" 
-  "4176" -> "4175" 
-  "4177" -> "4176" 
-  "4140" -> "4147" 
-  "4140" -> "4154" 
-  "4158" -> "4165" 
-  "4158" -> "4173" 
-  "4178" -> "4183" 
-  "4183" -> "4177" 
-  "4141" -> "4140" 
-  "4145" -> "4152" 
-  "4152" -> "4184" 
-  "4159" -> "4158" 
-  "4163" -> "4170" 
-  "4170" -> "4184" 
-  "4146" -> "4145" 
-  "4164" -> "4163" 
-  "4147" -> "4149" 
-  "4149" -> "4146" 
-  "4165" -> "4167" 
-  "4167" -> "4164" 
-  "4130" -> "4136" 
+digraph "CallLongMethodA" {  
+"4177" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1032</SUB>> ]
+"4195" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1033</SUB>> ]
+"4214" [label = <(soa,soa(env))<SUB>1034</SUB>> ]
+"4216" [label = <(RETURN,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetJ();,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetJ();)<SUB>1035</SUB>> ]
+"4217" [label = <(GetJ,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetJ())<SUB>1035</SUB>> ]
+"4218" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetJ)<SUB>1035</SUB>> ]
+"4181" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1032</SUB>> ]
+"4199" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1033</SUB>> ]
+"4219" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>1035</SUB>> ]
+"4224" [label = <(FIELD_IDENTIFIER,GetJ,GetJ)<SUB>1035</SUB>> ]
+"4182" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1032</SUB>> ]
+"4186" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1032</SUB>> ]
+"4193" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1032</SUB>> ]
+"4200" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1033</SUB>> ]
+"4204" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1033</SUB>> ]
+"4211" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1033</SUB>> ]
+"4187" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1032</SUB>> ]
+"4205" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1033</SUB>> ]
+"4188" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1032</SUB>> ]
+"4190" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1032</SUB>> ]
+"4206" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1033</SUB>> ]
+"4208" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1033</SUB>> ]
+"4171" [label = <(METHOD,CallLongMethodA)<SUB>1031</SUB>> ]
+"4225" [label = <(METHOD_RETURN,jlong)<SUB>1031</SUB>> ]
+  "4177" -> "4182" 
+  "4177" -> "4195" 
+  "4195" -> "4200" 
+  "4195" -> "4214" 
+  "4214" -> "4219" 
+  "4216" -> "4225" 
+  "4217" -> "4216" 
+  "4218" -> "4217" 
+  "4181" -> "4188" 
+  "4181" -> "4195" 
+  "4199" -> "4206" 
+  "4199" -> "4214" 
+  "4219" -> "4224" 
+  "4224" -> "4218" 
+  "4182" -> "4181" 
+  "4186" -> "4193" 
+  "4193" -> "4225" 
+  "4200" -> "4199" 
+  "4204" -> "4211" 
+  "4211" -> "4225" 
+  "4187" -> "4186" 
+  "4205" -> "4204" 
+  "4188" -> "4190" 
+  "4190" -> "4187" 
+  "4206" -> "4208" 
+  "4208" -> "4205" 
+  "4171" -> "4177" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/81-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/81-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/81-cfg.dot	2023-06-07 19:35:01.427387169 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/81-cfg.dot	2023-06-07 19:35:07.977386522 +0330
@@ -1,53 +1,61 @@
-digraph "CallIntMethodA" {  
-"4192" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1085</SUB>> ]
-"4210" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1086</SUB>> ]
-"4229" [label = <(soa,soa(env))<SUB>1087</SUB>> ]
-"4231" [label = <(RETURN,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetI();,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetI();)<SUB>1088</SUB>> ]
-"4232" [label = <(GetI,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetI())<SUB>1088</SUB>> ]
-"4233" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetI)<SUB>1088</SUB>> ]
-"4196" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1085</SUB>> ]
-"4214" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1086</SUB>> ]
-"4234" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>1088</SUB>> ]
-"4239" [label = <(FIELD_IDENTIFIER,GetI,GetI)<SUB>1088</SUB>> ]
-"4197" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1085</SUB>> ]
-"4201" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1085</SUB>> ]
-"4208" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1085</SUB>> ]
-"4215" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1086</SUB>> ]
-"4219" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1086</SUB>> ]
-"4226" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1086</SUB>> ]
-"4202" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1085</SUB>> ]
-"4220" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1086</SUB>> ]
-"4203" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1085</SUB>> ]
-"4205" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1085</SUB>> ]
-"4221" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1086</SUB>> ]
-"4223" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1086</SUB>> ]
-"4186" [label = <(METHOD,CallIntMethodA)<SUB>1084</SUB>> ]
-"4240" [label = <(METHOD_RETURN,jint)<SUB>1084</SUB>> ]
-  "4192" -> "4197" 
-  "4192" -> "4210" 
-  "4210" -> "4215" 
-  "4210" -> "4229" 
-  "4229" -> "4234" 
-  "4231" -> "4240" 
-  "4232" -> "4231" 
-  "4233" -> "4232" 
-  "4196" -> "4203" 
-  "4196" -> "4210" 
-  "4214" -> "4221" 
-  "4214" -> "4229" 
-  "4234" -> "4239" 
-  "4239" -> "4233" 
-  "4197" -> "4196" 
-  "4201" -> "4208" 
-  "4208" -> "4240" 
-  "4215" -> "4214" 
-  "4219" -> "4226" 
-  "4226" -> "4240" 
-  "4202" -> "4201" 
-  "4220" -> "4219" 
-  "4203" -> "4205" 
-  "4205" -> "4202" 
-  "4221" -> "4223" 
-  "4223" -> "4220" 
-  "4186" -> "4192" 
+digraph "CallShortMethod" {  
+"4233" [label = <(va_start,va_start(ap, mid))<SUB>1040</SUB>> ]
+"4237" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1041</SUB>> ]
+"4240" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1042</SUB>> ]
+"4258" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1043</SUB>> ]
+"4277" [label = <(soa,soa(env))<SUB>1044</SUB>> ]
+"4280" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap)))<SUB>1045</SUB>> ]
+"4286" [label = <(RETURN,return result.GetS();,return result.GetS();)<SUB>1046</SUB>> ]
+"4238" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1041</SUB>> ]
+"4281" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>1045</SUB>> ]
+"4287" [label = <(GetS,result.GetS())<SUB>1046</SUB>> ]
+"4288" [label = <(&lt;operator&gt;.fieldAccess,result.GetS)<SUB>1046</SUB>> ]
+"4244" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1042</SUB>> ]
+"4262" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1043</SUB>> ]
+"4290" [label = <(FIELD_IDENTIFIER,GetS,GetS)<SUB>1046</SUB>> ]
+"4245" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1042</SUB>> ]
+"4249" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1042</SUB>> ]
+"4256" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1042</SUB>> ]
+"4263" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1043</SUB>> ]
+"4267" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1043</SUB>> ]
+"4274" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1043</SUB>> ]
+"4250" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1042</SUB>> ]
+"4268" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1043</SUB>> ]
+"4251" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1042</SUB>> ]
+"4253" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1042</SUB>> ]
+"4269" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1043</SUB>> ]
+"4271" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1043</SUB>> ]
+"4227" [label = <(METHOD,CallShortMethod)<SUB>1038</SUB>> ]
+"4291" [label = <(METHOD_RETURN,jshort)<SUB>1038</SUB>> ]
+  "4233" -> "4238" 
+  "4237" -> "4240" 
+  "4240" -> "4245" 
+  "4240" -> "4258" 
+  "4258" -> "4263" 
+  "4258" -> "4277" 
+  "4277" -> "4281" 
+  "4280" -> "4290" 
+  "4286" -> "4291" 
+  "4238" -> "4237" 
+  "4281" -> "4280" 
+  "4287" -> "4286" 
+  "4288" -> "4287" 
+  "4244" -> "4251" 
+  "4244" -> "4258" 
+  "4262" -> "4269" 
+  "4262" -> "4277" 
+  "4290" -> "4288" 
+  "4245" -> "4244" 
+  "4249" -> "4256" 
+  "4256" -> "4291" 
+  "4263" -> "4262" 
+  "4267" -> "4274" 
+  "4274" -> "4291" 
+  "4250" -> "4249" 
+  "4268" -> "4267" 
+  "4251" -> "4253" 
+  "4253" -> "4250" 
+  "4269" -> "4271" 
+  "4271" -> "4268" 
+  "4227" -> "4233" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/82-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/82-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/82-cfg.dot	2023-06-07 19:35:01.427387169 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/82-cfg.dot	2023-06-07 19:35:07.977386522 +0330
@@ -1,61 +1,53 @@
-digraph "CallLongMethod" {  
-"4248" [label = <(va_start,va_start(ap, mid))<SUB>1093</SUB>> ]
-"4252" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1094</SUB>> ]
-"4255" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1095</SUB>> ]
-"4273" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1096</SUB>> ]
-"4292" [label = <(soa,soa(env))<SUB>1097</SUB>> ]
-"4295" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap)))<SUB>1098</SUB>> ]
-"4301" [label = <(RETURN,return result.GetJ();,return result.GetJ();)<SUB>1099</SUB>> ]
-"4253" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1094</SUB>> ]
-"4296" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>1098</SUB>> ]
-"4302" [label = <(GetJ,result.GetJ())<SUB>1099</SUB>> ]
-"4303" [label = <(&lt;operator&gt;.fieldAccess,result.GetJ)<SUB>1099</SUB>> ]
-"4259" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1095</SUB>> ]
-"4277" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1096</SUB>> ]
-"4305" [label = <(FIELD_IDENTIFIER,GetJ,GetJ)<SUB>1099</SUB>> ]
-"4260" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1095</SUB>> ]
-"4264" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1095</SUB>> ]
-"4271" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1095</SUB>> ]
-"4278" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1096</SUB>> ]
-"4282" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1096</SUB>> ]
-"4289" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1096</SUB>> ]
-"4265" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1095</SUB>> ]
-"4283" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1096</SUB>> ]
-"4266" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1095</SUB>> ]
-"4268" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1095</SUB>> ]
-"4284" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1096</SUB>> ]
-"4286" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1096</SUB>> ]
-"4242" [label = <(METHOD,CallLongMethod)<SUB>1091</SUB>> ]
-"4306" [label = <(METHOD_RETURN,jlong)<SUB>1091</SUB>> ]
-  "4248" -> "4253" 
-  "4252" -> "4255" 
-  "4255" -> "4260" 
-  "4255" -> "4273" 
-  "4273" -> "4278" 
-  "4273" -> "4292" 
-  "4292" -> "4296" 
-  "4295" -> "4305" 
-  "4301" -> "4306" 
-  "4253" -> "4252" 
-  "4296" -> "4295" 
-  "4302" -> "4301" 
-  "4303" -> "4302" 
-  "4259" -> "4266" 
-  "4259" -> "4273" 
-  "4277" -> "4284" 
-  "4277" -> "4292" 
-  "4305" -> "4303" 
-  "4260" -> "4259" 
-  "4264" -> "4271" 
-  "4271" -> "4306" 
-  "4278" -> "4277" 
-  "4282" -> "4289" 
-  "4289" -> "4306" 
-  "4265" -> "4264" 
-  "4283" -> "4282" 
-  "4266" -> "4268" 
-  "4268" -> "4265" 
-  "4284" -> "4286" 
-  "4286" -> "4283" 
-  "4242" -> "4248" 
+digraph "CallShortMethodV" {  
+"4299" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1050</SUB>> ]
+"4317" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1051</SUB>> ]
+"4336" [label = <(soa,soa(env))<SUB>1052</SUB>> ]
+"4338" [label = <(RETURN,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetS();,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetS();)<SUB>1053</SUB>> ]
+"4339" [label = <(GetS,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetS())<SUB>1053</SUB>> ]
+"4340" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetS)<SUB>1053</SUB>> ]
+"4303" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1050</SUB>> ]
+"4321" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1051</SUB>> ]
+"4341" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>1053</SUB>> ]
+"4346" [label = <(FIELD_IDENTIFIER,GetS,GetS)<SUB>1053</SUB>> ]
+"4304" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1050</SUB>> ]
+"4308" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1050</SUB>> ]
+"4315" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1050</SUB>> ]
+"4322" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1051</SUB>> ]
+"4326" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1051</SUB>> ]
+"4333" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1051</SUB>> ]
+"4309" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1050</SUB>> ]
+"4327" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1051</SUB>> ]
+"4310" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1050</SUB>> ]
+"4312" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1050</SUB>> ]
+"4328" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1051</SUB>> ]
+"4330" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1051</SUB>> ]
+"4293" [label = <(METHOD,CallShortMethodV)<SUB>1049</SUB>> ]
+"4347" [label = <(METHOD_RETURN,jshort)<SUB>1049</SUB>> ]
+  "4299" -> "4304" 
+  "4299" -> "4317" 
+  "4317" -> "4322" 
+  "4317" -> "4336" 
+  "4336" -> "4341" 
+  "4338" -> "4347" 
+  "4339" -> "4338" 
+  "4340" -> "4339" 
+  "4303" -> "4310" 
+  "4303" -> "4317" 
+  "4321" -> "4328" 
+  "4321" -> "4336" 
+  "4341" -> "4346" 
+  "4346" -> "4340" 
+  "4304" -> "4303" 
+  "4308" -> "4315" 
+  "4315" -> "4347" 
+  "4322" -> "4321" 
+  "4326" -> "4333" 
+  "4333" -> "4347" 
+  "4309" -> "4308" 
+  "4327" -> "4326" 
+  "4310" -> "4312" 
+  "4312" -> "4309" 
+  "4328" -> "4330" 
+  "4330" -> "4327" 
+  "4293" -> "4299" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/83-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/83-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/83-cfg.dot	2023-06-07 19:35:01.427387169 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/83-cfg.dot	2023-06-07 19:35:07.977386522 +0330
@@ -1,53 +1,53 @@
-digraph "CallLongMethodV" {  
-"4314" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1103</SUB>> ]
-"4332" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1104</SUB>> ]
-"4351" [label = <(soa,soa(env))<SUB>1105</SUB>> ]
-"4353" [label = <(RETURN,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetJ();,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetJ();)<SUB>1106</SUB>> ]
-"4354" [label = <(GetJ,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetJ())<SUB>1106</SUB>> ]
-"4355" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetJ)<SUB>1106</SUB>> ]
-"4318" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1103</SUB>> ]
-"4336" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1104</SUB>> ]
-"4356" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>1106</SUB>> ]
-"4361" [label = <(FIELD_IDENTIFIER,GetJ,GetJ)<SUB>1106</SUB>> ]
-"4319" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1103</SUB>> ]
-"4323" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1103</SUB>> ]
-"4330" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1103</SUB>> ]
-"4337" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1104</SUB>> ]
-"4341" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1104</SUB>> ]
-"4348" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1104</SUB>> ]
-"4324" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1103</SUB>> ]
-"4342" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1104</SUB>> ]
-"4325" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1103</SUB>> ]
-"4327" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1103</SUB>> ]
-"4343" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1104</SUB>> ]
-"4345" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1104</SUB>> ]
-"4308" [label = <(METHOD,CallLongMethodV)<SUB>1102</SUB>> ]
-"4362" [label = <(METHOD_RETURN,jlong)<SUB>1102</SUB>> ]
-  "4314" -> "4319" 
-  "4314" -> "4332" 
-  "4332" -> "4337" 
-  "4332" -> "4351" 
-  "4351" -> "4356" 
-  "4353" -> "4362" 
-  "4354" -> "4353" 
-  "4355" -> "4354" 
-  "4318" -> "4325" 
-  "4318" -> "4332" 
-  "4336" -> "4343" 
-  "4336" -> "4351" 
-  "4356" -> "4361" 
-  "4361" -> "4355" 
-  "4319" -> "4318" 
-  "4323" -> "4330" 
-  "4330" -> "4362" 
-  "4337" -> "4336" 
-  "4341" -> "4348" 
-  "4348" -> "4362" 
-  "4324" -> "4323" 
-  "4342" -> "4341" 
-  "4325" -> "4327" 
-  "4327" -> "4324" 
-  "4343" -> "4345" 
-  "4345" -> "4342" 
-  "4308" -> "4314" 
+digraph "CallShortMethodA" {  
+"4355" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1057</SUB>> ]
+"4373" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1058</SUB>> ]
+"4392" [label = <(soa,soa(env))<SUB>1059</SUB>> ]
+"4394" [label = <(RETURN,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetS();,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetS();)<SUB>1060</SUB>> ]
+"4395" [label = <(GetS,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetS())<SUB>1060</SUB>> ]
+"4396" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetS)<SUB>1060</SUB>> ]
+"4359" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1057</SUB>> ]
+"4377" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1058</SUB>> ]
+"4397" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>1060</SUB>> ]
+"4402" [label = <(FIELD_IDENTIFIER,GetS,GetS)<SUB>1060</SUB>> ]
+"4360" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1057</SUB>> ]
+"4364" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1057</SUB>> ]
+"4371" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1057</SUB>> ]
+"4378" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1058</SUB>> ]
+"4382" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1058</SUB>> ]
+"4389" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1058</SUB>> ]
+"4365" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1057</SUB>> ]
+"4383" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1058</SUB>> ]
+"4366" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1057</SUB>> ]
+"4368" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1057</SUB>> ]
+"4384" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1058</SUB>> ]
+"4386" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1058</SUB>> ]
+"4349" [label = <(METHOD,CallShortMethodA)<SUB>1056</SUB>> ]
+"4403" [label = <(METHOD_RETURN,jshort)<SUB>1056</SUB>> ]
+  "4355" -> "4360" 
+  "4355" -> "4373" 
+  "4373" -> "4378" 
+  "4373" -> "4392" 
+  "4392" -> "4397" 
+  "4394" -> "4403" 
+  "4395" -> "4394" 
+  "4396" -> "4395" 
+  "4359" -> "4366" 
+  "4359" -> "4373" 
+  "4377" -> "4384" 
+  "4377" -> "4392" 
+  "4397" -> "4402" 
+  "4402" -> "4396" 
+  "4360" -> "4359" 
+  "4364" -> "4371" 
+  "4371" -> "4403" 
+  "4378" -> "4377" 
+  "4382" -> "4389" 
+  "4389" -> "4403" 
+  "4365" -> "4364" 
+  "4383" -> "4382" 
+  "4366" -> "4368" 
+  "4368" -> "4365" 
+  "4384" -> "4386" 
+  "4386" -> "4383" 
+  "4349" -> "4355" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/84-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/84-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/84-cfg.dot	2023-06-07 19:35:01.427387169 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/84-cfg.dot	2023-06-07 19:35:07.977386522 +0330
@@ -1,53 +1,51 @@
-digraph "CallLongMethodA" {  
-"4370" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1110</SUB>> ]
-"4388" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1111</SUB>> ]
-"4407" [label = <(soa,soa(env))<SUB>1112</SUB>> ]
-"4409" [label = <(RETURN,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetJ();,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetJ();)<SUB>1113</SUB>> ]
-"4410" [label = <(GetJ,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetJ())<SUB>1113</SUB>> ]
-"4411" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetJ)<SUB>1113</SUB>> ]
-"4374" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1110</SUB>> ]
-"4392" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1111</SUB>> ]
-"4412" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>1113</SUB>> ]
-"4417" [label = <(FIELD_IDENTIFIER,GetJ,GetJ)<SUB>1113</SUB>> ]
-"4375" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1110</SUB>> ]
-"4379" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1110</SUB>> ]
-"4386" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1110</SUB>> ]
-"4393" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1111</SUB>> ]
-"4397" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1111</SUB>> ]
-"4404" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1111</SUB>> ]
-"4380" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1110</SUB>> ]
-"4398" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1111</SUB>> ]
-"4381" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1110</SUB>> ]
-"4383" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1110</SUB>> ]
-"4399" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1111</SUB>> ]
-"4401" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1111</SUB>> ]
-"4364" [label = <(METHOD,CallLongMethodA)<SUB>1109</SUB>> ]
-"4418" [label = <(METHOD_RETURN,jlong)<SUB>1109</SUB>> ]
-  "4370" -> "4375" 
-  "4370" -> "4388" 
-  "4388" -> "4393" 
-  "4388" -> "4407" 
-  "4407" -> "4412" 
-  "4409" -> "4418" 
-  "4410" -> "4409" 
-  "4411" -> "4410" 
-  "4374" -> "4381" 
-  "4374" -> "4388" 
-  "4392" -> "4399" 
-  "4392" -> "4407" 
-  "4412" -> "4417" 
-  "4417" -> "4411" 
-  "4375" -> "4374" 
-  "4379" -> "4386" 
-  "4386" -> "4418" 
-  "4393" -> "4392" 
-  "4397" -> "4404" 
-  "4404" -> "4418" 
-  "4380" -> "4379" 
-  "4398" -> "4397" 
-  "4381" -> "4383" 
-  "4383" -> "4380" 
-  "4399" -> "4401" 
-  "4401" -> "4398" 
-  "4364" -> "4370" 
+digraph "CallVoidMethod" {  
+"4411" [label = <(va_start,va_start(ap, mid))<SUB>1065</SUB>> ]
+"4415" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1066</SUB>> ]
+"4418" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1067</SUB>> ]
+"4435" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1068</SUB>> ]
+"4453" [label = <(soa,soa(env))<SUB>1069</SUB>> ]
+"4455" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>1070</SUB>> ]
+"4416" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1066</SUB>> ]
+"4422" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1067</SUB>> ]
+"4439" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1068</SUB>> ]
+"4423" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1067</SUB>> ]
+"4427" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1067</SUB>> ]
+"4434" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1067</SUB>> ]
+"4440" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1068</SUB>> ]
+"4444" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1068</SUB>> ]
+"4451" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1068</SUB>> ]
+"4428" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1067</SUB>> ]
+"4445" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1068</SUB>> ]
+"4429" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1067</SUB>> ]
+"4431" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1067</SUB>> ]
+"4446" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1068</SUB>> ]
+"4448" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1068</SUB>> ]
+"4405" [label = <(METHOD,CallVoidMethod)<SUB>1063</SUB>> ]
+"4460" [label = <(METHOD_RETURN,void)<SUB>1063</SUB>> ]
+  "4411" -> "4416" 
+  "4415" -> "4418" 
+  "4418" -> "4423" 
+  "4418" -> "4435" 
+  "4435" -> "4440" 
+  "4435" -> "4453" 
+  "4453" -> "4455" 
+  "4455" -> "4460" 
+  "4416" -> "4415" 
+  "4422" -> "4429" 
+  "4422" -> "4435" 
+  "4439" -> "4446" 
+  "4439" -> "4453" 
+  "4423" -> "4422" 
+  "4427" -> "4434" 
+  "4434" -> "4460" 
+  "4440" -> "4439" 
+  "4444" -> "4451" 
+  "4451" -> "4460" 
+  "4428" -> "4427" 
+  "4445" -> "4444" 
+  "4429" -> "4431" 
+  "4431" -> "4428" 
+  "4446" -> "4448" 
+  "4448" -> "4445" 
+  "4405" -> "4411" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/85-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/85-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/85-cfg.dot	2023-06-07 19:35:01.437387168 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/85-cfg.dot	2023-06-07 19:35:07.977386522 +0330
@@ -1,61 +1,45 @@
-digraph "CallShortMethod" {  
-"4426" [label = <(va_start,va_start(ap, mid))<SUB>1118</SUB>> ]
-"4430" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1119</SUB>> ]
-"4433" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1120</SUB>> ]
-"4451" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1121</SUB>> ]
-"4470" [label = <(soa,soa(env))<SUB>1122</SUB>> ]
-"4473" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap)))<SUB>1123</SUB>> ]
-"4479" [label = <(RETURN,return result.GetS();,return result.GetS();)<SUB>1124</SUB>> ]
-"4431" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1119</SUB>> ]
-"4474" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>1123</SUB>> ]
-"4480" [label = <(GetS,result.GetS())<SUB>1124</SUB>> ]
-"4481" [label = <(&lt;operator&gt;.fieldAccess,result.GetS)<SUB>1124</SUB>> ]
-"4437" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1120</SUB>> ]
-"4455" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1121</SUB>> ]
-"4483" [label = <(FIELD_IDENTIFIER,GetS,GetS)<SUB>1124</SUB>> ]
-"4438" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1120</SUB>> ]
-"4442" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1120</SUB>> ]
-"4449" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1120</SUB>> ]
-"4456" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1121</SUB>> ]
-"4460" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1121</SUB>> ]
-"4467" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1121</SUB>> ]
-"4443" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1120</SUB>> ]
-"4461" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1121</SUB>> ]
-"4444" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1120</SUB>> ]
-"4446" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1120</SUB>> ]
-"4462" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1121</SUB>> ]
-"4464" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1121</SUB>> ]
-"4420" [label = <(METHOD,CallShortMethod)<SUB>1116</SUB>> ]
-"4484" [label = <(METHOD_RETURN,jshort)<SUB>1116</SUB>> ]
-  "4426" -> "4431" 
-  "4430" -> "4433" 
-  "4433" -> "4438" 
-  "4433" -> "4451" 
-  "4451" -> "4456" 
-  "4451" -> "4470" 
-  "4470" -> "4474" 
-  "4473" -> "4483" 
-  "4479" -> "4484" 
-  "4431" -> "4430" 
-  "4474" -> "4473" 
-  "4480" -> "4479" 
-  "4481" -> "4480" 
-  "4437" -> "4444" 
-  "4437" -> "4451" 
-  "4455" -> "4462" 
-  "4455" -> "4470" 
-  "4483" -> "4481" 
-  "4438" -> "4437" 
-  "4442" -> "4449" 
-  "4449" -> "4484" 
-  "4456" -> "4455" 
-  "4460" -> "4467" 
-  "4467" -> "4484" 
-  "4443" -> "4442" 
-  "4461" -> "4460" 
-  "4444" -> "4446" 
-  "4446" -> "4443" 
-  "4462" -> "4464" 
-  "4464" -> "4461" 
-  "4420" -> "4426" 
+digraph "CallVoidMethodV" {  
+"4468" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1074</SUB>> ]
+"4485" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1075</SUB>> ]
+"4503" [label = <(soa,soa(env))<SUB>1076</SUB>> ]
+"4505" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>1077</SUB>> ]
+"4472" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1074</SUB>> ]
+"4489" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1075</SUB>> ]
+"4473" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1074</SUB>> ]
+"4477" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1074</SUB>> ]
+"4484" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1074</SUB>> ]
+"4490" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1075</SUB>> ]
+"4494" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1075</SUB>> ]
+"4501" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1075</SUB>> ]
+"4478" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1074</SUB>> ]
+"4495" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1075</SUB>> ]
+"4479" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1074</SUB>> ]
+"4481" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1074</SUB>> ]
+"4496" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1075</SUB>> ]
+"4498" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1075</SUB>> ]
+"4462" [label = <(METHOD,CallVoidMethodV)<SUB>1073</SUB>> ]
+"4510" [label = <(METHOD_RETURN,void)<SUB>1073</SUB>> ]
+  "4468" -> "4473" 
+  "4468" -> "4485" 
+  "4485" -> "4490" 
+  "4485" -> "4503" 
+  "4503" -> "4505" 
+  "4505" -> "4510" 
+  "4472" -> "4479" 
+  "4472" -> "4485" 
+  "4489" -> "4496" 
+  "4489" -> "4503" 
+  "4473" -> "4472" 
+  "4477" -> "4484" 
+  "4484" -> "4510" 
+  "4490" -> "4489" 
+  "4494" -> "4501" 
+  "4501" -> "4510" 
+  "4478" -> "4477" 
+  "4495" -> "4494" 
+  "4479" -> "4481" 
+  "4481" -> "4478" 
+  "4496" -> "4498" 
+  "4498" -> "4495" 
+  "4462" -> "4468" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/86-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/86-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/86-cfg.dot	2023-06-07 19:35:01.437387168 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/86-cfg.dot	2023-06-07 19:35:07.977386522 +0330
@@ -1,53 +1,45 @@
-digraph "CallShortMethodV" {  
-"4492" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1128</SUB>> ]
-"4510" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1129</SUB>> ]
-"4529" [label = <(soa,soa(env))<SUB>1130</SUB>> ]
-"4531" [label = <(RETURN,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetS();,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetS();)<SUB>1131</SUB>> ]
-"4532" [label = <(GetS,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetS())<SUB>1131</SUB>> ]
-"4533" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetS)<SUB>1131</SUB>> ]
-"4496" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1128</SUB>> ]
-"4514" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1129</SUB>> ]
-"4534" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>1131</SUB>> ]
-"4539" [label = <(FIELD_IDENTIFIER,GetS,GetS)<SUB>1131</SUB>> ]
-"4497" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1128</SUB>> ]
-"4501" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1128</SUB>> ]
-"4508" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1128</SUB>> ]
-"4515" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1129</SUB>> ]
-"4519" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1129</SUB>> ]
-"4526" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1129</SUB>> ]
-"4502" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1128</SUB>> ]
-"4520" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1129</SUB>> ]
-"4503" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1128</SUB>> ]
-"4505" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1128</SUB>> ]
-"4521" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1129</SUB>> ]
-"4523" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1129</SUB>> ]
-"4486" [label = <(METHOD,CallShortMethodV)<SUB>1127</SUB>> ]
-"4540" [label = <(METHOD_RETURN,jshort)<SUB>1127</SUB>> ]
-  "4492" -> "4497" 
-  "4492" -> "4510" 
-  "4510" -> "4515" 
-  "4510" -> "4529" 
-  "4529" -> "4534" 
-  "4531" -> "4540" 
-  "4532" -> "4531" 
-  "4533" -> "4532" 
-  "4496" -> "4503" 
-  "4496" -> "4510" 
-  "4514" -> "4521" 
-  "4514" -> "4529" 
-  "4534" -> "4539" 
-  "4539" -> "4533" 
-  "4497" -> "4496" 
-  "4501" -> "4508" 
-  "4508" -> "4540" 
-  "4515" -> "4514" 
-  "4519" -> "4526" 
-  "4526" -> "4540" 
-  "4502" -> "4501" 
-  "4520" -> "4519" 
-  "4503" -> "4505" 
-  "4505" -> "4502" 
-  "4521" -> "4523" 
-  "4523" -> "4520" 
-  "4486" -> "4492" 
+digraph "CallVoidMethodA" {  
+"4518" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1081</SUB>> ]
+"4535" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1082</SUB>> ]
+"4553" [label = <(soa,soa(env))<SUB>1083</SUB>> ]
+"4555" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>1084</SUB>> ]
+"4522" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1081</SUB>> ]
+"4539" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1082</SUB>> ]
+"4523" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1081</SUB>> ]
+"4527" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1081</SUB>> ]
+"4534" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1081</SUB>> ]
+"4540" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1082</SUB>> ]
+"4544" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1082</SUB>> ]
+"4551" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1082</SUB>> ]
+"4528" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1081</SUB>> ]
+"4545" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1082</SUB>> ]
+"4529" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1081</SUB>> ]
+"4531" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1081</SUB>> ]
+"4546" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1082</SUB>> ]
+"4548" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1082</SUB>> ]
+"4512" [label = <(METHOD,CallVoidMethodA)<SUB>1080</SUB>> ]
+"4560" [label = <(METHOD_RETURN,void)<SUB>1080</SUB>> ]
+  "4518" -> "4523" 
+  "4518" -> "4535" 
+  "4535" -> "4540" 
+  "4535" -> "4553" 
+  "4553" -> "4555" 
+  "4555" -> "4560" 
+  "4522" -> "4529" 
+  "4522" -> "4535" 
+  "4539" -> "4546" 
+  "4539" -> "4553" 
+  "4523" -> "4522" 
+  "4527" -> "4534" 
+  "4534" -> "4560" 
+  "4540" -> "4539" 
+  "4544" -> "4551" 
+  "4551" -> "4560" 
+  "4528" -> "4527" 
+  "4545" -> "4544" 
+  "4529" -> "4531" 
+  "4531" -> "4528" 
+  "4546" -> "4548" 
+  "4548" -> "4545" 
+  "4512" -> "4518" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/87-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/87-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/87-cfg.dot	2023-06-07 19:35:01.437387168 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/87-cfg.dot	2023-06-07 19:35:07.977386522 +0330
@@ -1,53 +1,71 @@
-digraph "CallShortMethodA" {  
-"4548" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1135</SUB>> ]
-"4566" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1136</SUB>> ]
-"4585" [label = <(soa,soa(env))<SUB>1137</SUB>> ]
-"4587" [label = <(RETURN,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetS();,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetS();)<SUB>1138</SUB>> ]
-"4588" [label = <(GetS,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetS())<SUB>1138</SUB>> ]
-"4589" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetS)<SUB>1138</SUB>> ]
-"4552" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1135</SUB>> ]
-"4570" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1136</SUB>> ]
-"4590" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>1138</SUB>> ]
-"4595" [label = <(FIELD_IDENTIFIER,GetS,GetS)<SUB>1138</SUB>> ]
-"4553" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1135</SUB>> ]
-"4557" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1135</SUB>> ]
-"4564" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1135</SUB>> ]
-"4571" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1136</SUB>> ]
-"4575" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1136</SUB>> ]
-"4582" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1136</SUB>> ]
-"4558" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1135</SUB>> ]
-"4576" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1136</SUB>> ]
-"4559" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1135</SUB>> ]
-"4561" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1135</SUB>> ]
-"4577" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1136</SUB>> ]
-"4579" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1136</SUB>> ]
-"4542" [label = <(METHOD,CallShortMethodA)<SUB>1134</SUB>> ]
-"4596" [label = <(METHOD_RETURN,jshort)<SUB>1134</SUB>> ]
-  "4548" -> "4553" 
-  "4548" -> "4566" 
-  "4566" -> "4571" 
-  "4566" -> "4585" 
-  "4585" -> "4590" 
-  "4587" -> "4596" 
-  "4588" -> "4587" 
-  "4589" -> "4588" 
-  "4552" -> "4559" 
-  "4552" -> "4566" 
-  "4570" -> "4577" 
-  "4570" -> "4585" 
-  "4590" -> "4595" 
-  "4595" -> "4589" 
-  "4553" -> "4552" 
-  "4557" -> "4564" 
-  "4564" -> "4596" 
-  "4571" -> "4570" 
-  "4575" -> "4582" 
-  "4582" -> "4596" 
-  "4558" -> "4557" 
-  "4576" -> "4575" 
-  "4559" -> "4561" 
-  "4561" -> "4558" 
-  "4577" -> "4579" 
-  "4579" -> "4576" 
-  "4542" -> "4548" 
+digraph "CallNonvirtualObjectMethod" {  
+"4569" [label = <(va_start,va_start(ap, mid))<SUB>1089</SUB>> ]
+"4573" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1090</SUB>> ]
+"4576" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(obj))<SUB>1091</SUB>> ]
+"4594" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>1092</SUB>> ]
+"4613" [label = <(soa,soa(env))<SUB>1093</SUB>> ]
+"4616" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, ap)))<SUB>1094</SUB>> ]
+"4623" [label = <(&lt;operator&gt;.assignment,local_result = soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>1095</SUB>> ]
+"4635" [label = <(RETURN,return local_result;,return local_result;)<SUB>1096</SUB>> ]
+"4574" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1090</SUB>> ]
+"4617" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1094</SUB>> ]
+"4625" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>1095</SUB>> ]
+"4626" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>1095</SUB>> ]
+"4631" [label = <(GetL,result.GetL())<SUB>1095</SUB>> ]
+"4580" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1091</SUB>> ]
+"4598" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1092</SUB>> ]
+"4627" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1095</SUB>> ]
+"4632" [label = <(&lt;operator&gt;.fieldAccess,result.GetL)<SUB>1095</SUB>> ]
+"4581" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1091</SUB>> ]
+"4585" [label = <(CHECK_NON_NULL_ARGUMENT(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1091</SUB>> ]
+"4592" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(obj),CHECK_NON_NULL_ARGUMENT(obj))<SUB>1091</SUB>> ]
+"4599" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1092</SUB>> ]
+"4603" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1092</SUB>> ]
+"4610" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>1092</SUB>> ]
+"4629" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1095</SUB>> ]
+"4634" [label = <(FIELD_IDENTIFIER,GetL,GetL)<SUB>1095</SUB>> ]
+"4586" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1091</SUB>> ]
+"4604" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1092</SUB>> ]
+"4587" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1091</SUB>> ]
+"4589" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1091</SUB>> ]
+"4605" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1092</SUB>> ]
+"4607" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1092</SUB>> ]
+"4562" [label = <(METHOD,CallNonvirtualObjectMethod)<SUB>1087</SUB>> ]
+"4637" [label = <(METHOD_RETURN,jobject)<SUB>1087</SUB>> ]
+  "4569" -> "4574" 
+  "4573" -> "4576" 
+  "4576" -> "4581" 
+  "4576" -> "4594" 
+  "4594" -> "4599" 
+  "4594" -> "4613" 
+  "4613" -> "4617" 
+  "4616" -> "4629" 
+  "4623" -> "4635" 
+  "4635" -> "4637" 
+  "4574" -> "4573" 
+  "4617" -> "4616" 
+  "4625" -> "4623" 
+  "4626" -> "4634" 
+  "4631" -> "4625" 
+  "4580" -> "4587" 
+  "4580" -> "4594" 
+  "4598" -> "4605" 
+  "4598" -> "4613" 
+  "4627" -> "4626" 
+  "4632" -> "4631" 
+  "4581" -> "4580" 
+  "4585" -> "4592" 
+  "4592" -> "4637" 
+  "4599" -> "4598" 
+  "4603" -> "4610" 
+  "4610" -> "4637" 
+  "4629" -> "4627" 
+  "4634" -> "4632" 
+  "4586" -> "4585" 
+  "4604" -> "4603" 
+  "4587" -> "4589" 
+  "4589" -> "4586" 
+  "4605" -> "4607" 
+  "4607" -> "4604" 
+  "4562" -> "4569" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/88-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/88-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/88-cfg.dot	2023-06-07 19:35:01.437387168 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/88-cfg.dot	2023-06-07 19:35:07.987386521 +0330
@@ -1,51 +1,63 @@
-digraph "CallVoidMethod" {  
-"4604" [label = <(va_start,va_start(ap, mid))<SUB>1143</SUB>> ]
-"4608" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1144</SUB>> ]
-"4611" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1145</SUB>> ]
-"4628" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1146</SUB>> ]
-"4646" [label = <(soa,soa(env))<SUB>1147</SUB>> ]
-"4648" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>1148</SUB>> ]
-"4609" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1144</SUB>> ]
-"4615" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1145</SUB>> ]
-"4632" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1146</SUB>> ]
-"4616" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1145</SUB>> ]
-"4620" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1145</SUB>> ]
-"4627" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1145</SUB>> ]
-"4633" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1146</SUB>> ]
-"4637" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1146</SUB>> ]
-"4644" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1146</SUB>> ]
-"4621" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1145</SUB>> ]
-"4638" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1146</SUB>> ]
-"4622" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1145</SUB>> ]
-"4624" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1145</SUB>> ]
-"4639" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1146</SUB>> ]
-"4641" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1146</SUB>> ]
-"4598" [label = <(METHOD,CallVoidMethod)<SUB>1141</SUB>> ]
-"4653" [label = <(METHOD_RETURN,void)<SUB>1141</SUB>> ]
-  "4604" -> "4609" 
-  "4608" -> "4611" 
-  "4611" -> "4616" 
-  "4611" -> "4628" 
-  "4628" -> "4633" 
-  "4628" -> "4646" 
-  "4646" -> "4648" 
-  "4648" -> "4653" 
-  "4609" -> "4608" 
-  "4615" -> "4622" 
-  "4615" -> "4628" 
-  "4632" -> "4639" 
-  "4632" -> "4646" 
-  "4616" -> "4615" 
-  "4620" -> "4627" 
-  "4627" -> "4653" 
-  "4633" -> "4632" 
-  "4637" -> "4644" 
-  "4644" -> "4653" 
-  "4621" -> "4620" 
-  "4638" -> "4637" 
-  "4622" -> "4624" 
-  "4624" -> "4621" 
-  "4639" -> "4641" 
-  "4641" -> "4638" 
-  "4598" -> "4604" 
+digraph "CallNonvirtualObjectMethodV" {  
+"4646" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(obj))<SUB>1101</SUB>> ]
+"4664" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>1102</SUB>> ]
+"4683" [label = <(soa,soa(env))<SUB>1103</SUB>> ]
+"4686" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, args)))<SUB>1104</SUB>> ]
+"4692" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());)<SUB>1105</SUB>> ]
+"4687" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1104</SUB>> ]
+"4693" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>1105</SUB>> ]
+"4694" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>1105</SUB>> ]
+"4699" [label = <(GetL,result.GetL())<SUB>1105</SUB>> ]
+"4650" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1101</SUB>> ]
+"4668" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1102</SUB>> ]
+"4695" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1105</SUB>> ]
+"4700" [label = <(&lt;operator&gt;.fieldAccess,result.GetL)<SUB>1105</SUB>> ]
+"4651" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1101</SUB>> ]
+"4655" [label = <(CHECK_NON_NULL_ARGUMENT(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1101</SUB>> ]
+"4662" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(obj),CHECK_NON_NULL_ARGUMENT(obj))<SUB>1101</SUB>> ]
+"4669" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1102</SUB>> ]
+"4673" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1102</SUB>> ]
+"4680" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>1102</SUB>> ]
+"4697" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1105</SUB>> ]
+"4702" [label = <(FIELD_IDENTIFIER,GetL,GetL)<SUB>1105</SUB>> ]
+"4656" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1101</SUB>> ]
+"4674" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1102</SUB>> ]
+"4657" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1101</SUB>> ]
+"4659" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1101</SUB>> ]
+"4675" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1102</SUB>> ]
+"4677" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1102</SUB>> ]
+"4639" [label = <(METHOD,CallNonvirtualObjectMethodV)<SUB>1099</SUB>> ]
+"4703" [label = <(METHOD_RETURN,jobject)<SUB>1099</SUB>> ]
+  "4646" -> "4651" 
+  "4646" -> "4664" 
+  "4664" -> "4669" 
+  "4664" -> "4683" 
+  "4683" -> "4687" 
+  "4686" -> "4697" 
+  "4692" -> "4703" 
+  "4687" -> "4686" 
+  "4693" -> "4692" 
+  "4694" -> "4702" 
+  "4699" -> "4693" 
+  "4650" -> "4657" 
+  "4650" -> "4664" 
+  "4668" -> "4675" 
+  "4668" -> "4683" 
+  "4695" -> "4694" 
+  "4700" -> "4699" 
+  "4651" -> "4650" 
+  "4655" -> "4662" 
+  "4662" -> "4703" 
+  "4669" -> "4668" 
+  "4673" -> "4680" 
+  "4680" -> "4703" 
+  "4697" -> "4695" 
+  "4702" -> "4700" 
+  "4656" -> "4655" 
+  "4674" -> "4673" 
+  "4657" -> "4659" 
+  "4659" -> "4656" 
+  "4675" -> "4677" 
+  "4677" -> "4674" 
+  "4639" -> "4646" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/89-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/89-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/89-cfg.dot	2023-06-07 19:35:01.437387168 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/89-cfg.dot	2023-06-07 19:35:07.987386521 +0330
@@ -1,45 +1,63 @@
-digraph "CallVoidMethodV" {  
-"4661" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1152</SUB>> ]
-"4678" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1153</SUB>> ]
-"4696" [label = <(soa,soa(env))<SUB>1154</SUB>> ]
-"4698" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>1155</SUB>> ]
-"4665" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1152</SUB>> ]
-"4682" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1153</SUB>> ]
-"4666" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1152</SUB>> ]
-"4670" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1152</SUB>> ]
-"4677" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1152</SUB>> ]
-"4683" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1153</SUB>> ]
-"4687" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1153</SUB>> ]
-"4694" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1153</SUB>> ]
-"4671" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1152</SUB>> ]
-"4688" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1153</SUB>> ]
-"4672" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1152</SUB>> ]
-"4674" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1152</SUB>> ]
-"4689" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1153</SUB>> ]
-"4691" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1153</SUB>> ]
-"4655" [label = <(METHOD,CallVoidMethodV)<SUB>1151</SUB>> ]
-"4703" [label = <(METHOD_RETURN,void)<SUB>1151</SUB>> ]
-  "4661" -> "4666" 
-  "4661" -> "4678" 
-  "4678" -> "4683" 
-  "4678" -> "4696" 
-  "4696" -> "4698" 
-  "4698" -> "4703" 
-  "4665" -> "4672" 
-  "4665" -> "4678" 
-  "4682" -> "4689" 
-  "4682" -> "4696" 
-  "4666" -> "4665" 
-  "4670" -> "4677" 
-  "4677" -> "4703" 
-  "4683" -> "4682" 
-  "4687" -> "4694" 
-  "4694" -> "4703" 
-  "4671" -> "4670" 
-  "4688" -> "4687" 
-  "4672" -> "4674" 
-  "4674" -> "4671" 
-  "4689" -> "4691" 
-  "4691" -> "4688" 
-  "4655" -> "4661" 
+digraph "CallNonvirtualObjectMethodA" {  
+"4712" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(obj))<SUB>1110</SUB>> ]
+"4730" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>1111</SUB>> ]
+"4749" [label = <(soa,soa(env))<SUB>1112</SUB>> ]
+"4752" [label = <(result,result(InvokeWithJValues(soa, obj, mid, args)))<SUB>1113</SUB>> ]
+"4758" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());)<SUB>1114</SUB>> ]
+"4753" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1113</SUB>> ]
+"4759" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>1114</SUB>> ]
+"4760" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>1114</SUB>> ]
+"4765" [label = <(GetL,result.GetL())<SUB>1114</SUB>> ]
+"4716" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1110</SUB>> ]
+"4734" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1111</SUB>> ]
+"4761" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1114</SUB>> ]
+"4766" [label = <(&lt;operator&gt;.fieldAccess,result.GetL)<SUB>1114</SUB>> ]
+"4717" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1110</SUB>> ]
+"4721" [label = <(CHECK_NON_NULL_ARGUMENT(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1110</SUB>> ]
+"4728" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(obj),CHECK_NON_NULL_ARGUMENT(obj))<SUB>1110</SUB>> ]
+"4735" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1111</SUB>> ]
+"4739" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1111</SUB>> ]
+"4746" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>1111</SUB>> ]
+"4763" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1114</SUB>> ]
+"4768" [label = <(FIELD_IDENTIFIER,GetL,GetL)<SUB>1114</SUB>> ]
+"4722" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1110</SUB>> ]
+"4740" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1111</SUB>> ]
+"4723" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1110</SUB>> ]
+"4725" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1110</SUB>> ]
+"4741" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1111</SUB>> ]
+"4743" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1111</SUB>> ]
+"4705" [label = <(METHOD,CallNonvirtualObjectMethodA)<SUB>1108</SUB>> ]
+"4769" [label = <(METHOD_RETURN,jobject)<SUB>1108</SUB>> ]
+  "4712" -> "4717" 
+  "4712" -> "4730" 
+  "4730" -> "4735" 
+  "4730" -> "4749" 
+  "4749" -> "4753" 
+  "4752" -> "4763" 
+  "4758" -> "4769" 
+  "4753" -> "4752" 
+  "4759" -> "4758" 
+  "4760" -> "4768" 
+  "4765" -> "4759" 
+  "4716" -> "4723" 
+  "4716" -> "4730" 
+  "4734" -> "4741" 
+  "4734" -> "4749" 
+  "4761" -> "4760" 
+  "4766" -> "4765" 
+  "4717" -> "4716" 
+  "4721" -> "4728" 
+  "4728" -> "4769" 
+  "4735" -> "4734" 
+  "4739" -> "4746" 
+  "4746" -> "4769" 
+  "4763" -> "4761" 
+  "4768" -> "4766" 
+  "4722" -> "4721" 
+  "4740" -> "4739" 
+  "4723" -> "4725" 
+  "4725" -> "4722" 
+  "4741" -> "4743" 
+  "4743" -> "4740" 
+  "4705" -> "4712" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/9-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/9-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/9-cfg.dot	2023-06-07 19:35:01.337387177 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/9-cfg.dot	2023-06-07 19:35:07.907386529 +0330
@@ -1,5 +1,5 @@
-digraph "NotifySetObjectField" {  
-"232" [label = <(METHOD,NotifySetObjectField)<SUB>184</SUB>> ]
-"237" [label = <(METHOD_RETURN,void)<SUB>184</SUB>> ]
-  "232" -> "237" 
+digraph "ReportInvalidJNINativeMethod" {  
+"155" [label = <(METHOD,ReportInvalidJNINativeMethod)<SUB>205</SUB>> ]
+"161" [label = <(METHOD_RETURN,void)<SUB>205</SUB>> ]
+  "155" -> "161" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/90-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/90-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/90-cfg.dot	2023-06-07 19:35:01.437387168 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/90-cfg.dot	2023-06-07 19:35:07.987386521 +0330
@@ -1,45 +1,61 @@
-digraph "CallVoidMethodA" {  
-"4711" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1159</SUB>> ]
-"4728" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1160</SUB>> ]
-"4746" [label = <(soa,soa(env))<SUB>1161</SUB>> ]
-"4748" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>1162</SUB>> ]
-"4715" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1159</SUB>> ]
-"4732" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1160</SUB>> ]
-"4716" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1159</SUB>> ]
-"4720" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1159</SUB>> ]
-"4727" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1159</SUB>> ]
-"4733" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1160</SUB>> ]
-"4737" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1160</SUB>> ]
-"4744" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1160</SUB>> ]
-"4721" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1159</SUB>> ]
-"4738" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1160</SUB>> ]
-"4722" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1159</SUB>> ]
-"4724" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1159</SUB>> ]
-"4739" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1160</SUB>> ]
-"4741" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1160</SUB>> ]
-"4705" [label = <(METHOD,CallVoidMethodA)<SUB>1158</SUB>> ]
-"4753" [label = <(METHOD_RETURN,void)<SUB>1158</SUB>> ]
-  "4711" -> "4716" 
-  "4711" -> "4728" 
-  "4728" -> "4733" 
-  "4728" -> "4746" 
-  "4746" -> "4748" 
-  "4748" -> "4753" 
-  "4715" -> "4722" 
-  "4715" -> "4728" 
-  "4732" -> "4739" 
-  "4732" -> "4746" 
-  "4716" -> "4715" 
-  "4720" -> "4727" 
-  "4727" -> "4753" 
-  "4733" -> "4732" 
-  "4737" -> "4744" 
-  "4744" -> "4753" 
-  "4721" -> "4720" 
-  "4738" -> "4737" 
-  "4722" -> "4724" 
-  "4724" -> "4721" 
-  "4739" -> "4741" 
-  "4741" -> "4738" 
-  "4705" -> "4711" 
+digraph "CallNonvirtualBooleanMethod" {  
+"4778" [label = <(va_start,va_start(ap, mid))<SUB>1120</SUB>> ]
+"4782" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1121</SUB>> ]
+"4785" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1122</SUB>> ]
+"4803" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1123</SUB>> ]
+"4822" [label = <(soa,soa(env))<SUB>1124</SUB>> ]
+"4825" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, ap)))<SUB>1125</SUB>> ]
+"4831" [label = <(RETURN,return result.GetZ();,return result.GetZ();)<SUB>1126</SUB>> ]
+"4783" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1121</SUB>> ]
+"4826" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1125</SUB>> ]
+"4832" [label = <(GetZ,result.GetZ())<SUB>1126</SUB>> ]
+"4833" [label = <(&lt;operator&gt;.fieldAccess,result.GetZ)<SUB>1126</SUB>> ]
+"4789" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1122</SUB>> ]
+"4807" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1123</SUB>> ]
+"4835" [label = <(FIELD_IDENTIFIER,GetZ,GetZ)<SUB>1126</SUB>> ]
+"4790" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1122</SUB>> ]
+"4794" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1122</SUB>> ]
+"4801" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1122</SUB>> ]
+"4808" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1123</SUB>> ]
+"4812" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1123</SUB>> ]
+"4819" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1123</SUB>> ]
+"4795" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1122</SUB>> ]
+"4813" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1123</SUB>> ]
+"4796" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1122</SUB>> ]
+"4798" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1122</SUB>> ]
+"4814" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1123</SUB>> ]
+"4816" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1123</SUB>> ]
+"4771" [label = <(METHOD,CallNonvirtualBooleanMethod)<SUB>1117</SUB>> ]
+"4836" [label = <(METHOD_RETURN,jboolean)<SUB>1117</SUB>> ]
+  "4778" -> "4783" 
+  "4782" -> "4785" 
+  "4785" -> "4790" 
+  "4785" -> "4803" 
+  "4803" -> "4808" 
+  "4803" -> "4822" 
+  "4822" -> "4826" 
+  "4825" -> "4835" 
+  "4831" -> "4836" 
+  "4783" -> "4782" 
+  "4826" -> "4825" 
+  "4832" -> "4831" 
+  "4833" -> "4832" 
+  "4789" -> "4796" 
+  "4789" -> "4803" 
+  "4807" -> "4814" 
+  "4807" -> "4822" 
+  "4835" -> "4833" 
+  "4790" -> "4789" 
+  "4794" -> "4801" 
+  "4801" -> "4836" 
+  "4808" -> "4807" 
+  "4812" -> "4819" 
+  "4819" -> "4836" 
+  "4795" -> "4794" 
+  "4813" -> "4812" 
+  "4796" -> "4798" 
+  "4798" -> "4795" 
+  "4814" -> "4816" 
+  "4816" -> "4813" 
+  "4771" -> "4778" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/91-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/91-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/91-cfg.dot	2023-06-07 19:35:01.437387168 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/91-cfg.dot	2023-06-07 19:35:07.987386521 +0330
@@ -1,71 +1,53 @@
-digraph "CallNonvirtualObjectMethod" {  
-"4762" [label = <(va_start,va_start(ap, mid))<SUB>1167</SUB>> ]
-"4766" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1168</SUB>> ]
-"4769" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(obj))<SUB>1169</SUB>> ]
-"4787" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>1170</SUB>> ]
-"4806" [label = <(soa,soa(env))<SUB>1171</SUB>> ]
-"4809" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, ap)))<SUB>1172</SUB>> ]
-"4816" [label = <(&lt;operator&gt;.assignment,local_result = soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>1173</SUB>> ]
-"4828" [label = <(RETURN,return local_result;,return local_result;)<SUB>1174</SUB>> ]
-"4767" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1168</SUB>> ]
-"4810" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1172</SUB>> ]
-"4818" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>1173</SUB>> ]
-"4819" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>1173</SUB>> ]
-"4824" [label = <(GetL,result.GetL())<SUB>1173</SUB>> ]
-"4773" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1169</SUB>> ]
-"4791" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1170</SUB>> ]
-"4820" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1173</SUB>> ]
-"4825" [label = <(&lt;operator&gt;.fieldAccess,result.GetL)<SUB>1173</SUB>> ]
-"4774" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1169</SUB>> ]
-"4778" [label = <(CHECK_NON_NULL_ARGUMENT(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1169</SUB>> ]
-"4785" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(obj),CHECK_NON_NULL_ARGUMENT(obj))<SUB>1169</SUB>> ]
-"4792" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1170</SUB>> ]
-"4796" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1170</SUB>> ]
-"4803" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>1170</SUB>> ]
-"4822" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1173</SUB>> ]
-"4827" [label = <(FIELD_IDENTIFIER,GetL,GetL)<SUB>1173</SUB>> ]
-"4779" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1169</SUB>> ]
-"4797" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1170</SUB>> ]
-"4780" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1169</SUB>> ]
-"4782" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1169</SUB>> ]
-"4798" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1170</SUB>> ]
-"4800" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1170</SUB>> ]
-"4755" [label = <(METHOD,CallNonvirtualObjectMethod)<SUB>1165</SUB>> ]
-"4830" [label = <(METHOD_RETURN,jobject)<SUB>1165</SUB>> ]
-  "4762" -> "4767" 
-  "4766" -> "4769" 
-  "4769" -> "4774" 
-  "4769" -> "4787" 
-  "4787" -> "4792" 
-  "4787" -> "4806" 
-  "4806" -> "4810" 
-  "4809" -> "4822" 
-  "4816" -> "4828" 
-  "4828" -> "4830" 
-  "4767" -> "4766" 
-  "4810" -> "4809" 
-  "4818" -> "4816" 
-  "4819" -> "4827" 
-  "4824" -> "4818" 
-  "4773" -> "4780" 
-  "4773" -> "4787" 
-  "4791" -> "4798" 
-  "4791" -> "4806" 
-  "4820" -> "4819" 
-  "4825" -> "4824" 
-  "4774" -> "4773" 
-  "4778" -> "4785" 
-  "4785" -> "4830" 
-  "4792" -> "4791" 
-  "4796" -> "4803" 
-  "4803" -> "4830" 
-  "4822" -> "4820" 
-  "4827" -> "4825" 
-  "4779" -> "4778" 
-  "4797" -> "4796" 
-  "4780" -> "4782" 
-  "4782" -> "4779" 
-  "4798" -> "4800" 
-  "4800" -> "4797" 
-  "4755" -> "4762" 
+digraph "CallNonvirtualBooleanMethodV" {  
+"4845" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1131</SUB>> ]
+"4863" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1132</SUB>> ]
+"4882" [label = <(soa,soa(env))<SUB>1133</SUB>> ]
+"4884" [label = <(RETURN,return InvokeWithVarArgs(soa, obj, mid, args).GetZ();,return InvokeWithVarArgs(soa, obj, mid, args).GetZ();)<SUB>1134</SUB>> ]
+"4885" [label = <(GetZ,InvokeWithVarArgs(soa, obj, mid, args).GetZ())<SUB>1134</SUB>> ]
+"4886" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, obj, mid, args).GetZ)<SUB>1134</SUB>> ]
+"4849" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1131</SUB>> ]
+"4867" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1132</SUB>> ]
+"4887" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1134</SUB>> ]
+"4892" [label = <(FIELD_IDENTIFIER,GetZ,GetZ)<SUB>1134</SUB>> ]
+"4850" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1131</SUB>> ]
+"4854" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1131</SUB>> ]
+"4861" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1131</SUB>> ]
+"4868" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1132</SUB>> ]
+"4872" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1132</SUB>> ]
+"4879" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1132</SUB>> ]
+"4855" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1131</SUB>> ]
+"4873" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1132</SUB>> ]
+"4856" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1131</SUB>> ]
+"4858" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1131</SUB>> ]
+"4874" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1132</SUB>> ]
+"4876" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1132</SUB>> ]
+"4838" [label = <(METHOD,CallNonvirtualBooleanMethodV)<SUB>1129</SUB>> ]
+"4893" [label = <(METHOD_RETURN,jboolean)<SUB>1129</SUB>> ]
+  "4845" -> "4850" 
+  "4845" -> "4863" 
+  "4863" -> "4868" 
+  "4863" -> "4882" 
+  "4882" -> "4887" 
+  "4884" -> "4893" 
+  "4885" -> "4884" 
+  "4886" -> "4885" 
+  "4849" -> "4856" 
+  "4849" -> "4863" 
+  "4867" -> "4874" 
+  "4867" -> "4882" 
+  "4887" -> "4892" 
+  "4892" -> "4886" 
+  "4850" -> "4849" 
+  "4854" -> "4861" 
+  "4861" -> "4893" 
+  "4868" -> "4867" 
+  "4872" -> "4879" 
+  "4879" -> "4893" 
+  "4855" -> "4854" 
+  "4873" -> "4872" 
+  "4856" -> "4858" 
+  "4858" -> "4855" 
+  "4874" -> "4876" 
+  "4876" -> "4873" 
+  "4838" -> "4845" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/92-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/92-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/92-cfg.dot	2023-06-07 19:35:01.437387168 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/92-cfg.dot	2023-06-07 19:35:07.987386521 +0330
@@ -1,63 +1,53 @@
-digraph "CallNonvirtualObjectMethodV" {  
-"4839" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(obj))<SUB>1179</SUB>> ]
-"4857" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>1180</SUB>> ]
-"4876" [label = <(soa,soa(env))<SUB>1181</SUB>> ]
-"4879" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, args)))<SUB>1182</SUB>> ]
-"4885" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());)<SUB>1183</SUB>> ]
-"4880" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1182</SUB>> ]
-"4886" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>1183</SUB>> ]
-"4887" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>1183</SUB>> ]
-"4892" [label = <(GetL,result.GetL())<SUB>1183</SUB>> ]
-"4843" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1179</SUB>> ]
-"4861" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1180</SUB>> ]
-"4888" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1183</SUB>> ]
-"4893" [label = <(&lt;operator&gt;.fieldAccess,result.GetL)<SUB>1183</SUB>> ]
-"4844" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1179</SUB>> ]
-"4848" [label = <(CHECK_NON_NULL_ARGUMENT(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1179</SUB>> ]
-"4855" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(obj),CHECK_NON_NULL_ARGUMENT(obj))<SUB>1179</SUB>> ]
-"4862" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1180</SUB>> ]
-"4866" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1180</SUB>> ]
-"4873" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>1180</SUB>> ]
-"4890" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1183</SUB>> ]
-"4895" [label = <(FIELD_IDENTIFIER,GetL,GetL)<SUB>1183</SUB>> ]
-"4849" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1179</SUB>> ]
-"4867" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1180</SUB>> ]
-"4850" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1179</SUB>> ]
-"4852" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1179</SUB>> ]
-"4868" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1180</SUB>> ]
-"4870" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1180</SUB>> ]
-"4832" [label = <(METHOD,CallNonvirtualObjectMethodV)<SUB>1177</SUB>> ]
-"4896" [label = <(METHOD_RETURN,jobject)<SUB>1177</SUB>> ]
-  "4839" -> "4844" 
-  "4839" -> "4857" 
-  "4857" -> "4862" 
-  "4857" -> "4876" 
-  "4876" -> "4880" 
-  "4879" -> "4890" 
-  "4885" -> "4896" 
-  "4880" -> "4879" 
-  "4886" -> "4885" 
-  "4887" -> "4895" 
-  "4892" -> "4886" 
-  "4843" -> "4850" 
-  "4843" -> "4857" 
-  "4861" -> "4868" 
-  "4861" -> "4876" 
-  "4888" -> "4887" 
-  "4893" -> "4892" 
-  "4844" -> "4843" 
-  "4848" -> "4855" 
-  "4855" -> "4896" 
-  "4862" -> "4861" 
-  "4866" -> "4873" 
-  "4873" -> "4896" 
-  "4890" -> "4888" 
-  "4895" -> "4893" 
-  "4849" -> "4848" 
-  "4867" -> "4866" 
-  "4850" -> "4852" 
-  "4852" -> "4849" 
-  "4868" -> "4870" 
-  "4870" -> "4867" 
-  "4832" -> "4839" 
+digraph "CallNonvirtualBooleanMethodA" {  
+"4902" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1139</SUB>> ]
+"4920" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1140</SUB>> ]
+"4939" [label = <(soa,soa(env))<SUB>1141</SUB>> ]
+"4941" [label = <(RETURN,return InvokeWithJValues(soa, obj, mid, args).GetZ();,return InvokeWithJValues(soa, obj, mid, args).GetZ();)<SUB>1142</SUB>> ]
+"4942" [label = <(GetZ,InvokeWithJValues(soa, obj, mid, args).GetZ())<SUB>1142</SUB>> ]
+"4943" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, obj, mid, args).GetZ)<SUB>1142</SUB>> ]
+"4906" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1139</SUB>> ]
+"4924" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1140</SUB>> ]
+"4944" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1142</SUB>> ]
+"4949" [label = <(FIELD_IDENTIFIER,GetZ,GetZ)<SUB>1142</SUB>> ]
+"4907" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1139</SUB>> ]
+"4911" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1139</SUB>> ]
+"4918" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1139</SUB>> ]
+"4925" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1140</SUB>> ]
+"4929" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1140</SUB>> ]
+"4936" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1140</SUB>> ]
+"4912" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1139</SUB>> ]
+"4930" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1140</SUB>> ]
+"4913" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1139</SUB>> ]
+"4915" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1139</SUB>> ]
+"4931" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1140</SUB>> ]
+"4933" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1140</SUB>> ]
+"4895" [label = <(METHOD,CallNonvirtualBooleanMethodA)<SUB>1137</SUB>> ]
+"4950" [label = <(METHOD_RETURN,jboolean)<SUB>1137</SUB>> ]
+  "4902" -> "4907" 
+  "4902" -> "4920" 
+  "4920" -> "4925" 
+  "4920" -> "4939" 
+  "4939" -> "4944" 
+  "4941" -> "4950" 
+  "4942" -> "4941" 
+  "4943" -> "4942" 
+  "4906" -> "4913" 
+  "4906" -> "4920" 
+  "4924" -> "4931" 
+  "4924" -> "4939" 
+  "4944" -> "4949" 
+  "4949" -> "4943" 
+  "4907" -> "4906" 
+  "4911" -> "4918" 
+  "4918" -> "4950" 
+  "4925" -> "4924" 
+  "4929" -> "4936" 
+  "4936" -> "4950" 
+  "4912" -> "4911" 
+  "4930" -> "4929" 
+  "4913" -> "4915" 
+  "4915" -> "4912" 
+  "4931" -> "4933" 
+  "4933" -> "4930" 
+  "4895" -> "4902" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/93-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/93-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/93-cfg.dot	2023-06-07 19:35:01.437387168 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/93-cfg.dot	2023-06-07 19:35:07.987386521 +0330
@@ -1,63 +1,61 @@
-digraph "CallNonvirtualObjectMethodA" {  
-"4905" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(obj))<SUB>1188</SUB>> ]
-"4923" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>1189</SUB>> ]
-"4942" [label = <(soa,soa(env))<SUB>1190</SUB>> ]
-"4945" [label = <(result,result(InvokeWithJValues(soa, obj, mid, args)))<SUB>1191</SUB>> ]
-"4951" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());)<SUB>1192</SUB>> ]
-"4946" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1191</SUB>> ]
-"4952" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>1192</SUB>> ]
-"4953" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>1192</SUB>> ]
-"4958" [label = <(GetL,result.GetL())<SUB>1192</SUB>> ]
-"4909" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1188</SUB>> ]
-"4927" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1189</SUB>> ]
-"4954" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1192</SUB>> ]
-"4959" [label = <(&lt;operator&gt;.fieldAccess,result.GetL)<SUB>1192</SUB>> ]
-"4910" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1188</SUB>> ]
-"4914" [label = <(CHECK_NON_NULL_ARGUMENT(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1188</SUB>> ]
-"4921" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(obj),CHECK_NON_NULL_ARGUMENT(obj))<SUB>1188</SUB>> ]
-"4928" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1189</SUB>> ]
-"4932" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1189</SUB>> ]
-"4939" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>1189</SUB>> ]
-"4956" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1192</SUB>> ]
-"4961" [label = <(FIELD_IDENTIFIER,GetL,GetL)<SUB>1192</SUB>> ]
-"4915" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1188</SUB>> ]
-"4933" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1189</SUB>> ]
-"4916" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1188</SUB>> ]
-"4918" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1188</SUB>> ]
-"4934" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1189</SUB>> ]
-"4936" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1189</SUB>> ]
-"4898" [label = <(METHOD,CallNonvirtualObjectMethodA)<SUB>1186</SUB>> ]
-"4962" [label = <(METHOD_RETURN,jobject)<SUB>1186</SUB>> ]
-  "4905" -> "4910" 
-  "4905" -> "4923" 
-  "4923" -> "4928" 
-  "4923" -> "4942" 
-  "4942" -> "4946" 
-  "4945" -> "4956" 
-  "4951" -> "4962" 
-  "4946" -> "4945" 
-  "4952" -> "4951" 
-  "4953" -> "4961" 
-  "4958" -> "4952" 
-  "4909" -> "4916" 
-  "4909" -> "4923" 
-  "4927" -> "4934" 
-  "4927" -> "4942" 
-  "4954" -> "4953" 
-  "4959" -> "4958" 
-  "4910" -> "4909" 
-  "4914" -> "4921" 
-  "4921" -> "4962" 
-  "4928" -> "4927" 
-  "4932" -> "4939" 
-  "4939" -> "4962" 
-  "4956" -> "4954" 
-  "4961" -> "4959" 
-  "4915" -> "4914" 
-  "4933" -> "4932" 
-  "4916" -> "4918" 
-  "4918" -> "4915" 
-  "4934" -> "4936" 
-  "4936" -> "4933" 
-  "4898" -> "4905" 
+digraph "CallNonvirtualByteMethod" {  
+"4959" [label = <(va_start,va_start(ap, mid))<SUB>1147</SUB>> ]
+"4963" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1148</SUB>> ]
+"4966" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1149</SUB>> ]
+"4984" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1150</SUB>> ]
+"5003" [label = <(soa,soa(env))<SUB>1151</SUB>> ]
+"5006" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, ap)))<SUB>1152</SUB>> ]
+"5012" [label = <(RETURN,return result.GetB();,return result.GetB();)<SUB>1153</SUB>> ]
+"4964" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1148</SUB>> ]
+"5007" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1152</SUB>> ]
+"5013" [label = <(GetB,result.GetB())<SUB>1153</SUB>> ]
+"5014" [label = <(&lt;operator&gt;.fieldAccess,result.GetB)<SUB>1153</SUB>> ]
+"4970" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1149</SUB>> ]
+"4988" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1150</SUB>> ]
+"5016" [label = <(FIELD_IDENTIFIER,GetB,GetB)<SUB>1153</SUB>> ]
+"4971" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1149</SUB>> ]
+"4975" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1149</SUB>> ]
+"4982" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1149</SUB>> ]
+"4989" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1150</SUB>> ]
+"4993" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1150</SUB>> ]
+"5000" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1150</SUB>> ]
+"4976" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1149</SUB>> ]
+"4994" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1150</SUB>> ]
+"4977" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1149</SUB>> ]
+"4979" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1149</SUB>> ]
+"4995" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1150</SUB>> ]
+"4997" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1150</SUB>> ]
+"4952" [label = <(METHOD,CallNonvirtualByteMethod)<SUB>1145</SUB>> ]
+"5017" [label = <(METHOD_RETURN,jbyte)<SUB>1145</SUB>> ]
+  "4959" -> "4964" 
+  "4963" -> "4966" 
+  "4966" -> "4971" 
+  "4966" -> "4984" 
+  "4984" -> "4989" 
+  "4984" -> "5003" 
+  "5003" -> "5007" 
+  "5006" -> "5016" 
+  "5012" -> "5017" 
+  "4964" -> "4963" 
+  "5007" -> "5006" 
+  "5013" -> "5012" 
+  "5014" -> "5013" 
+  "4970" -> "4977" 
+  "4970" -> "4984" 
+  "4988" -> "4995" 
+  "4988" -> "5003" 
+  "5016" -> "5014" 
+  "4971" -> "4970" 
+  "4975" -> "4982" 
+  "4982" -> "5017" 
+  "4989" -> "4988" 
+  "4993" -> "5000" 
+  "5000" -> "5017" 
+  "4976" -> "4975" 
+  "4994" -> "4993" 
+  "4977" -> "4979" 
+  "4979" -> "4976" 
+  "4995" -> "4997" 
+  "4997" -> "4994" 
+  "4952" -> "4959" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/94-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/94-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/94-cfg.dot	2023-06-07 19:35:01.437387168 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/94-cfg.dot	2023-06-07 19:35:07.987386521 +0330
@@ -1,61 +1,53 @@
-digraph "CallNonvirtualBooleanMethod" {  
-"4971" [label = <(va_start,va_start(ap, mid))<SUB>1198</SUB>> ]
-"4975" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1199</SUB>> ]
-"4978" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1200</SUB>> ]
-"4996" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1201</SUB>> ]
-"5015" [label = <(soa,soa(env))<SUB>1202</SUB>> ]
-"5018" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, ap)))<SUB>1203</SUB>> ]
-"5024" [label = <(RETURN,return result.GetZ();,return result.GetZ();)<SUB>1204</SUB>> ]
-"4976" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1199</SUB>> ]
-"5019" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1203</SUB>> ]
-"5025" [label = <(GetZ,result.GetZ())<SUB>1204</SUB>> ]
-"5026" [label = <(&lt;operator&gt;.fieldAccess,result.GetZ)<SUB>1204</SUB>> ]
-"4982" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1200</SUB>> ]
-"5000" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1201</SUB>> ]
-"5028" [label = <(FIELD_IDENTIFIER,GetZ,GetZ)<SUB>1204</SUB>> ]
-"4983" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1200</SUB>> ]
-"4987" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1200</SUB>> ]
-"4994" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1200</SUB>> ]
-"5001" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1201</SUB>> ]
-"5005" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1201</SUB>> ]
-"5012" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1201</SUB>> ]
-"4988" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1200</SUB>> ]
-"5006" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1201</SUB>> ]
-"4989" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1200</SUB>> ]
-"4991" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1200</SUB>> ]
-"5007" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1201</SUB>> ]
-"5009" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1201</SUB>> ]
-"4964" [label = <(METHOD,CallNonvirtualBooleanMethod)<SUB>1195</SUB>> ]
-"5029" [label = <(METHOD_RETURN,jboolean)<SUB>1195</SUB>> ]
-  "4971" -> "4976" 
-  "4975" -> "4978" 
-  "4978" -> "4983" 
-  "4978" -> "4996" 
-  "4996" -> "5001" 
-  "4996" -> "5015" 
-  "5015" -> "5019" 
-  "5018" -> "5028" 
-  "5024" -> "5029" 
-  "4976" -> "4975" 
-  "5019" -> "5018" 
-  "5025" -> "5024" 
-  "5026" -> "5025" 
-  "4982" -> "4989" 
-  "4982" -> "4996" 
-  "5000" -> "5007" 
-  "5000" -> "5015" 
-  "5028" -> "5026" 
-  "4983" -> "4982" 
-  "4987" -> "4994" 
-  "4994" -> "5029" 
-  "5001" -> "5000" 
-  "5005" -> "5012" 
-  "5012" -> "5029" 
-  "4988" -> "4987" 
-  "5006" -> "5005" 
-  "4989" -> "4991" 
-  "4991" -> "4988" 
-  "5007" -> "5009" 
-  "5009" -> "5006" 
-  "4964" -> "4971" 
+digraph "CallNonvirtualByteMethodV" {  
+"5026" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1158</SUB>> ]
+"5044" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1159</SUB>> ]
+"5063" [label = <(soa,soa(env))<SUB>1160</SUB>> ]
+"5065" [label = <(RETURN,return InvokeWithVarArgs(soa, obj, mid, args).GetB();,return InvokeWithVarArgs(soa, obj, mid, args).GetB();)<SUB>1161</SUB>> ]
+"5066" [label = <(GetB,InvokeWithVarArgs(soa, obj, mid, args).GetB())<SUB>1161</SUB>> ]
+"5067" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, obj, mid, args).GetB)<SUB>1161</SUB>> ]
+"5030" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1158</SUB>> ]
+"5048" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1159</SUB>> ]
+"5068" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1161</SUB>> ]
+"5073" [label = <(FIELD_IDENTIFIER,GetB,GetB)<SUB>1161</SUB>> ]
+"5031" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1158</SUB>> ]
+"5035" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1158</SUB>> ]
+"5042" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1158</SUB>> ]
+"5049" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1159</SUB>> ]
+"5053" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1159</SUB>> ]
+"5060" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1159</SUB>> ]
+"5036" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1158</SUB>> ]
+"5054" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1159</SUB>> ]
+"5037" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1158</SUB>> ]
+"5039" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1158</SUB>> ]
+"5055" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1159</SUB>> ]
+"5057" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1159</SUB>> ]
+"5019" [label = <(METHOD,CallNonvirtualByteMethodV)<SUB>1156</SUB>> ]
+"5074" [label = <(METHOD_RETURN,jbyte)<SUB>1156</SUB>> ]
+  "5026" -> "5031" 
+  "5026" -> "5044" 
+  "5044" -> "5049" 
+  "5044" -> "5063" 
+  "5063" -> "5068" 
+  "5065" -> "5074" 
+  "5066" -> "5065" 
+  "5067" -> "5066" 
+  "5030" -> "5037" 
+  "5030" -> "5044" 
+  "5048" -> "5055" 
+  "5048" -> "5063" 
+  "5068" -> "5073" 
+  "5073" -> "5067" 
+  "5031" -> "5030" 
+  "5035" -> "5042" 
+  "5042" -> "5074" 
+  "5049" -> "5048" 
+  "5053" -> "5060" 
+  "5060" -> "5074" 
+  "5036" -> "5035" 
+  "5054" -> "5053" 
+  "5037" -> "5039" 
+  "5039" -> "5036" 
+  "5055" -> "5057" 
+  "5057" -> "5054" 
+  "5019" -> "5026" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/95-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/95-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/95-cfg.dot	2023-06-07 19:35:01.437387168 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/95-cfg.dot	2023-06-07 19:35:07.987386521 +0330
@@ -1,53 +1,53 @@
-digraph "CallNonvirtualBooleanMethodV" {  
-"5038" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1209</SUB>> ]
-"5056" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1210</SUB>> ]
-"5075" [label = <(soa,soa(env))<SUB>1211</SUB>> ]
-"5077" [label = <(RETURN,return InvokeWithVarArgs(soa, obj, mid, args).GetZ();,return InvokeWithVarArgs(soa, obj, mid, args).GetZ();)<SUB>1212</SUB>> ]
-"5078" [label = <(GetZ,InvokeWithVarArgs(soa, obj, mid, args).GetZ())<SUB>1212</SUB>> ]
-"5079" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, obj, mid, args).GetZ)<SUB>1212</SUB>> ]
-"5042" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1209</SUB>> ]
-"5060" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1210</SUB>> ]
-"5080" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1212</SUB>> ]
-"5085" [label = <(FIELD_IDENTIFIER,GetZ,GetZ)<SUB>1212</SUB>> ]
-"5043" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1209</SUB>> ]
-"5047" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1209</SUB>> ]
-"5054" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1209</SUB>> ]
-"5061" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1210</SUB>> ]
-"5065" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1210</SUB>> ]
-"5072" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1210</SUB>> ]
-"5048" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1209</SUB>> ]
-"5066" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1210</SUB>> ]
-"5049" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1209</SUB>> ]
-"5051" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1209</SUB>> ]
-"5067" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1210</SUB>> ]
-"5069" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1210</SUB>> ]
-"5031" [label = <(METHOD,CallNonvirtualBooleanMethodV)<SUB>1207</SUB>> ]
-"5086" [label = <(METHOD_RETURN,jboolean)<SUB>1207</SUB>> ]
-  "5038" -> "5043" 
-  "5038" -> "5056" 
-  "5056" -> "5061" 
-  "5056" -> "5075" 
-  "5075" -> "5080" 
-  "5077" -> "5086" 
-  "5078" -> "5077" 
-  "5079" -> "5078" 
-  "5042" -> "5049" 
-  "5042" -> "5056" 
-  "5060" -> "5067" 
-  "5060" -> "5075" 
-  "5080" -> "5085" 
-  "5085" -> "5079" 
-  "5043" -> "5042" 
-  "5047" -> "5054" 
-  "5054" -> "5086" 
-  "5061" -> "5060" 
-  "5065" -> "5072" 
-  "5072" -> "5086" 
-  "5048" -> "5047" 
-  "5066" -> "5065" 
-  "5049" -> "5051" 
-  "5051" -> "5048" 
-  "5067" -> "5069" 
-  "5069" -> "5066" 
-  "5031" -> "5038" 
+digraph "CallNonvirtualByteMethodA" {  
+"5083" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1166</SUB>> ]
+"5101" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1167</SUB>> ]
+"5120" [label = <(soa,soa(env))<SUB>1168</SUB>> ]
+"5122" [label = <(RETURN,return InvokeWithJValues(soa, obj, mid, args).GetB();,return InvokeWithJValues(soa, obj, mid, args).GetB();)<SUB>1169</SUB>> ]
+"5123" [label = <(GetB,InvokeWithJValues(soa, obj, mid, args).GetB())<SUB>1169</SUB>> ]
+"5124" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, obj, mid, args).GetB)<SUB>1169</SUB>> ]
+"5087" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1166</SUB>> ]
+"5105" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1167</SUB>> ]
+"5125" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1169</SUB>> ]
+"5130" [label = <(FIELD_IDENTIFIER,GetB,GetB)<SUB>1169</SUB>> ]
+"5088" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1166</SUB>> ]
+"5092" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1166</SUB>> ]
+"5099" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1166</SUB>> ]
+"5106" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1167</SUB>> ]
+"5110" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1167</SUB>> ]
+"5117" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1167</SUB>> ]
+"5093" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1166</SUB>> ]
+"5111" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1167</SUB>> ]
+"5094" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1166</SUB>> ]
+"5096" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1166</SUB>> ]
+"5112" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1167</SUB>> ]
+"5114" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1167</SUB>> ]
+"5076" [label = <(METHOD,CallNonvirtualByteMethodA)<SUB>1164</SUB>> ]
+"5131" [label = <(METHOD_RETURN,jbyte)<SUB>1164</SUB>> ]
+  "5083" -> "5088" 
+  "5083" -> "5101" 
+  "5101" -> "5106" 
+  "5101" -> "5120" 
+  "5120" -> "5125" 
+  "5122" -> "5131" 
+  "5123" -> "5122" 
+  "5124" -> "5123" 
+  "5087" -> "5094" 
+  "5087" -> "5101" 
+  "5105" -> "5112" 
+  "5105" -> "5120" 
+  "5125" -> "5130" 
+  "5130" -> "5124" 
+  "5088" -> "5087" 
+  "5092" -> "5099" 
+  "5099" -> "5131" 
+  "5106" -> "5105" 
+  "5110" -> "5117" 
+  "5117" -> "5131" 
+  "5093" -> "5092" 
+  "5111" -> "5110" 
+  "5094" -> "5096" 
+  "5096" -> "5093" 
+  "5112" -> "5114" 
+  "5114" -> "5111" 
+  "5076" -> "5083" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/96-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/96-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/96-cfg.dot	2023-06-07 19:35:01.437387168 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/96-cfg.dot	2023-06-07 19:35:07.987386521 +0330
@@ -1,53 +1,61 @@
-digraph "CallNonvirtualBooleanMethodA" {  
-"5095" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1217</SUB>> ]
-"5113" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1218</SUB>> ]
-"5132" [label = <(soa,soa(env))<SUB>1219</SUB>> ]
-"5134" [label = <(RETURN,return InvokeWithJValues(soa, obj, mid, args).GetZ();,return InvokeWithJValues(soa, obj, mid, args).GetZ();)<SUB>1220</SUB>> ]
-"5135" [label = <(GetZ,InvokeWithJValues(soa, obj, mid, args).GetZ())<SUB>1220</SUB>> ]
-"5136" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, obj, mid, args).GetZ)<SUB>1220</SUB>> ]
-"5099" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1217</SUB>> ]
-"5117" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1218</SUB>> ]
-"5137" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1220</SUB>> ]
-"5142" [label = <(FIELD_IDENTIFIER,GetZ,GetZ)<SUB>1220</SUB>> ]
-"5100" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1217</SUB>> ]
-"5104" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1217</SUB>> ]
-"5111" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1217</SUB>> ]
-"5118" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1218</SUB>> ]
-"5122" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1218</SUB>> ]
-"5129" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1218</SUB>> ]
-"5105" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1217</SUB>> ]
-"5123" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1218</SUB>> ]
-"5106" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1217</SUB>> ]
-"5108" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1217</SUB>> ]
-"5124" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1218</SUB>> ]
-"5126" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1218</SUB>> ]
-"5088" [label = <(METHOD,CallNonvirtualBooleanMethodA)<SUB>1215</SUB>> ]
-"5143" [label = <(METHOD_RETURN,jboolean)<SUB>1215</SUB>> ]
-  "5095" -> "5100" 
-  "5095" -> "5113" 
-  "5113" -> "5118" 
-  "5113" -> "5132" 
-  "5132" -> "5137" 
-  "5134" -> "5143" 
-  "5135" -> "5134" 
-  "5136" -> "5135" 
-  "5099" -> "5106" 
-  "5099" -> "5113" 
-  "5117" -> "5124" 
-  "5117" -> "5132" 
-  "5137" -> "5142" 
-  "5142" -> "5136" 
-  "5100" -> "5099" 
-  "5104" -> "5111" 
-  "5111" -> "5143" 
-  "5118" -> "5117" 
-  "5122" -> "5129" 
-  "5129" -> "5143" 
-  "5105" -> "5104" 
-  "5123" -> "5122" 
-  "5106" -> "5108" 
-  "5108" -> "5105" 
-  "5124" -> "5126" 
-  "5126" -> "5123" 
-  "5088" -> "5095" 
+digraph "CallNonvirtualCharMethod" {  
+"5140" [label = <(va_start,va_start(ap, mid))<SUB>1174</SUB>> ]
+"5144" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1175</SUB>> ]
+"5147" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1176</SUB>> ]
+"5165" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1177</SUB>> ]
+"5184" [label = <(soa,soa(env))<SUB>1178</SUB>> ]
+"5187" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, ap)))<SUB>1179</SUB>> ]
+"5193" [label = <(RETURN,return result.GetC();,return result.GetC();)<SUB>1180</SUB>> ]
+"5145" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1175</SUB>> ]
+"5188" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1179</SUB>> ]
+"5194" [label = <(GetC,result.GetC())<SUB>1180</SUB>> ]
+"5195" [label = <(&lt;operator&gt;.fieldAccess,result.GetC)<SUB>1180</SUB>> ]
+"5151" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1176</SUB>> ]
+"5169" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1177</SUB>> ]
+"5197" [label = <(FIELD_IDENTIFIER,GetC,GetC)<SUB>1180</SUB>> ]
+"5152" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1176</SUB>> ]
+"5156" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1176</SUB>> ]
+"5163" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1176</SUB>> ]
+"5170" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1177</SUB>> ]
+"5174" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1177</SUB>> ]
+"5181" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1177</SUB>> ]
+"5157" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1176</SUB>> ]
+"5175" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1177</SUB>> ]
+"5158" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1176</SUB>> ]
+"5160" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1176</SUB>> ]
+"5176" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1177</SUB>> ]
+"5178" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1177</SUB>> ]
+"5133" [label = <(METHOD,CallNonvirtualCharMethod)<SUB>1172</SUB>> ]
+"5198" [label = <(METHOD_RETURN,jchar)<SUB>1172</SUB>> ]
+  "5140" -> "5145" 
+  "5144" -> "5147" 
+  "5147" -> "5152" 
+  "5147" -> "5165" 
+  "5165" -> "5170" 
+  "5165" -> "5184" 
+  "5184" -> "5188" 
+  "5187" -> "5197" 
+  "5193" -> "5198" 
+  "5145" -> "5144" 
+  "5188" -> "5187" 
+  "5194" -> "5193" 
+  "5195" -> "5194" 
+  "5151" -> "5158" 
+  "5151" -> "5165" 
+  "5169" -> "5176" 
+  "5169" -> "5184" 
+  "5197" -> "5195" 
+  "5152" -> "5151" 
+  "5156" -> "5163" 
+  "5163" -> "5198" 
+  "5170" -> "5169" 
+  "5174" -> "5181" 
+  "5181" -> "5198" 
+  "5157" -> "5156" 
+  "5175" -> "5174" 
+  "5158" -> "5160" 
+  "5160" -> "5157" 
+  "5176" -> "5178" 
+  "5178" -> "5175" 
+  "5133" -> "5140" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/97-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/97-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/97-cfg.dot	2023-06-07 19:35:01.447387166 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/97-cfg.dot	2023-06-07 19:35:07.987386521 +0330
@@ -1,61 +1,53 @@
-digraph "CallNonvirtualByteMethod" {  
-"5152" [label = <(va_start,va_start(ap, mid))<SUB>1225</SUB>> ]
-"5156" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1226</SUB>> ]
-"5159" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1227</SUB>> ]
-"5177" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1228</SUB>> ]
-"5196" [label = <(soa,soa(env))<SUB>1229</SUB>> ]
-"5199" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, ap)))<SUB>1230</SUB>> ]
-"5205" [label = <(RETURN,return result.GetB();,return result.GetB();)<SUB>1231</SUB>> ]
-"5157" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1226</SUB>> ]
-"5200" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1230</SUB>> ]
-"5206" [label = <(GetB,result.GetB())<SUB>1231</SUB>> ]
-"5207" [label = <(&lt;operator&gt;.fieldAccess,result.GetB)<SUB>1231</SUB>> ]
-"5163" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1227</SUB>> ]
-"5181" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1228</SUB>> ]
-"5209" [label = <(FIELD_IDENTIFIER,GetB,GetB)<SUB>1231</SUB>> ]
-"5164" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1227</SUB>> ]
-"5168" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1227</SUB>> ]
-"5175" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1227</SUB>> ]
-"5182" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1228</SUB>> ]
-"5186" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1228</SUB>> ]
-"5193" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1228</SUB>> ]
-"5169" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1227</SUB>> ]
-"5187" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1228</SUB>> ]
-"5170" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1227</SUB>> ]
-"5172" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1227</SUB>> ]
-"5188" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1228</SUB>> ]
-"5190" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1228</SUB>> ]
-"5145" [label = <(METHOD,CallNonvirtualByteMethod)<SUB>1223</SUB>> ]
-"5210" [label = <(METHOD_RETURN,jbyte)<SUB>1223</SUB>> ]
-  "5152" -> "5157" 
-  "5156" -> "5159" 
-  "5159" -> "5164" 
-  "5159" -> "5177" 
-  "5177" -> "5182" 
-  "5177" -> "5196" 
-  "5196" -> "5200" 
-  "5199" -> "5209" 
-  "5205" -> "5210" 
-  "5157" -> "5156" 
-  "5200" -> "5199" 
-  "5206" -> "5205" 
-  "5207" -> "5206" 
-  "5163" -> "5170" 
-  "5163" -> "5177" 
-  "5181" -> "5188" 
-  "5181" -> "5196" 
-  "5209" -> "5207" 
-  "5164" -> "5163" 
-  "5168" -> "5175" 
-  "5175" -> "5210" 
-  "5182" -> "5181" 
-  "5186" -> "5193" 
-  "5193" -> "5210" 
-  "5169" -> "5168" 
-  "5187" -> "5186" 
-  "5170" -> "5172" 
-  "5172" -> "5169" 
-  "5188" -> "5190" 
-  "5190" -> "5187" 
-  "5145" -> "5152" 
+digraph "CallNonvirtualCharMethodV" {  
+"5207" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1185</SUB>> ]
+"5225" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1186</SUB>> ]
+"5244" [label = <(soa,soa(env))<SUB>1187</SUB>> ]
+"5246" [label = <(RETURN,return InvokeWithVarArgs(soa, obj, mid, args).GetC();,return InvokeWithVarArgs(soa, obj, mid, args).GetC();)<SUB>1188</SUB>> ]
+"5247" [label = <(GetC,InvokeWithVarArgs(soa, obj, mid, args).GetC())<SUB>1188</SUB>> ]
+"5248" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, obj, mid, args).GetC)<SUB>1188</SUB>> ]
+"5211" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1185</SUB>> ]
+"5229" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1186</SUB>> ]
+"5249" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1188</SUB>> ]
+"5254" [label = <(FIELD_IDENTIFIER,GetC,GetC)<SUB>1188</SUB>> ]
+"5212" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1185</SUB>> ]
+"5216" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1185</SUB>> ]
+"5223" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1185</SUB>> ]
+"5230" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1186</SUB>> ]
+"5234" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1186</SUB>> ]
+"5241" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1186</SUB>> ]
+"5217" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1185</SUB>> ]
+"5235" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1186</SUB>> ]
+"5218" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1185</SUB>> ]
+"5220" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1185</SUB>> ]
+"5236" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1186</SUB>> ]
+"5238" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1186</SUB>> ]
+"5200" [label = <(METHOD,CallNonvirtualCharMethodV)<SUB>1183</SUB>> ]
+"5255" [label = <(METHOD_RETURN,jchar)<SUB>1183</SUB>> ]
+  "5207" -> "5212" 
+  "5207" -> "5225" 
+  "5225" -> "5230" 
+  "5225" -> "5244" 
+  "5244" -> "5249" 
+  "5246" -> "5255" 
+  "5247" -> "5246" 
+  "5248" -> "5247" 
+  "5211" -> "5218" 
+  "5211" -> "5225" 
+  "5229" -> "5236" 
+  "5229" -> "5244" 
+  "5249" -> "5254" 
+  "5254" -> "5248" 
+  "5212" -> "5211" 
+  "5216" -> "5223" 
+  "5223" -> "5255" 
+  "5230" -> "5229" 
+  "5234" -> "5241" 
+  "5241" -> "5255" 
+  "5217" -> "5216" 
+  "5235" -> "5234" 
+  "5218" -> "5220" 
+  "5220" -> "5217" 
+  "5236" -> "5238" 
+  "5238" -> "5235" 
+  "5200" -> "5207" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/98-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/98-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/98-cfg.dot	2023-06-07 19:35:01.447387166 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/98-cfg.dot	2023-06-07 19:35:07.987386521 +0330
@@ -1,53 +1,53 @@
-digraph "CallNonvirtualByteMethodV" {  
-"5219" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1236</SUB>> ]
-"5237" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1237</SUB>> ]
-"5256" [label = <(soa,soa(env))<SUB>1238</SUB>> ]
-"5258" [label = <(RETURN,return InvokeWithVarArgs(soa, obj, mid, args).GetB();,return InvokeWithVarArgs(soa, obj, mid, args).GetB();)<SUB>1239</SUB>> ]
-"5259" [label = <(GetB,InvokeWithVarArgs(soa, obj, mid, args).GetB())<SUB>1239</SUB>> ]
-"5260" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, obj, mid, args).GetB)<SUB>1239</SUB>> ]
-"5223" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1236</SUB>> ]
-"5241" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1237</SUB>> ]
-"5261" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1239</SUB>> ]
-"5266" [label = <(FIELD_IDENTIFIER,GetB,GetB)<SUB>1239</SUB>> ]
-"5224" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1236</SUB>> ]
-"5228" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1236</SUB>> ]
-"5235" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1236</SUB>> ]
-"5242" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1237</SUB>> ]
-"5246" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1237</SUB>> ]
-"5253" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1237</SUB>> ]
-"5229" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1236</SUB>> ]
-"5247" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1237</SUB>> ]
-"5230" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1236</SUB>> ]
-"5232" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1236</SUB>> ]
-"5248" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1237</SUB>> ]
-"5250" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1237</SUB>> ]
-"5212" [label = <(METHOD,CallNonvirtualByteMethodV)<SUB>1234</SUB>> ]
-"5267" [label = <(METHOD_RETURN,jbyte)<SUB>1234</SUB>> ]
-  "5219" -> "5224" 
-  "5219" -> "5237" 
-  "5237" -> "5242" 
-  "5237" -> "5256" 
-  "5256" -> "5261" 
-  "5258" -> "5267" 
-  "5259" -> "5258" 
-  "5260" -> "5259" 
-  "5223" -> "5230" 
-  "5223" -> "5237" 
-  "5241" -> "5248" 
-  "5241" -> "5256" 
-  "5261" -> "5266" 
-  "5266" -> "5260" 
-  "5224" -> "5223" 
-  "5228" -> "5235" 
-  "5235" -> "5267" 
-  "5242" -> "5241" 
-  "5246" -> "5253" 
-  "5253" -> "5267" 
-  "5229" -> "5228" 
-  "5247" -> "5246" 
-  "5230" -> "5232" 
-  "5232" -> "5229" 
-  "5248" -> "5250" 
-  "5250" -> "5247" 
-  "5212" -> "5219" 
+digraph "CallNonvirtualCharMethodA" {  
+"5264" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1193</SUB>> ]
+"5282" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1194</SUB>> ]
+"5301" [label = <(soa,soa(env))<SUB>1195</SUB>> ]
+"5303" [label = <(RETURN,return InvokeWithJValues(soa, obj, mid, args).GetC();,return InvokeWithJValues(soa, obj, mid, args).GetC();)<SUB>1196</SUB>> ]
+"5304" [label = <(GetC,InvokeWithJValues(soa, obj, mid, args).GetC())<SUB>1196</SUB>> ]
+"5305" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, obj, mid, args).GetC)<SUB>1196</SUB>> ]
+"5268" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1193</SUB>> ]
+"5286" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1194</SUB>> ]
+"5306" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1196</SUB>> ]
+"5311" [label = <(FIELD_IDENTIFIER,GetC,GetC)<SUB>1196</SUB>> ]
+"5269" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1193</SUB>> ]
+"5273" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1193</SUB>> ]
+"5280" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1193</SUB>> ]
+"5287" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1194</SUB>> ]
+"5291" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1194</SUB>> ]
+"5298" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1194</SUB>> ]
+"5274" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1193</SUB>> ]
+"5292" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1194</SUB>> ]
+"5275" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1193</SUB>> ]
+"5277" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1193</SUB>> ]
+"5293" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1194</SUB>> ]
+"5295" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1194</SUB>> ]
+"5257" [label = <(METHOD,CallNonvirtualCharMethodA)<SUB>1191</SUB>> ]
+"5312" [label = <(METHOD_RETURN,jchar)<SUB>1191</SUB>> ]
+  "5264" -> "5269" 
+  "5264" -> "5282" 
+  "5282" -> "5287" 
+  "5282" -> "5301" 
+  "5301" -> "5306" 
+  "5303" -> "5312" 
+  "5304" -> "5303" 
+  "5305" -> "5304" 
+  "5268" -> "5275" 
+  "5268" -> "5282" 
+  "5286" -> "5293" 
+  "5286" -> "5301" 
+  "5306" -> "5311" 
+  "5311" -> "5305" 
+  "5269" -> "5268" 
+  "5273" -> "5280" 
+  "5280" -> "5312" 
+  "5287" -> "5286" 
+  "5291" -> "5298" 
+  "5298" -> "5312" 
+  "5274" -> "5273" 
+  "5292" -> "5291" 
+  "5275" -> "5277" 
+  "5277" -> "5274" 
+  "5293" -> "5295" 
+  "5295" -> "5292" 
+  "5257" -> "5264" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/99-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/99-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/secure/out/99-cfg.dot	2023-06-07 19:35:01.447387166 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_5/vulnerable/out/99-cfg.dot	2023-06-07 19:35:07.987386521 +0330
@@ -1,53 +1,61 @@
-digraph "CallNonvirtualByteMethodA" {  
-"5276" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1244</SUB>> ]
-"5294" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1245</SUB>> ]
-"5313" [label = <(soa,soa(env))<SUB>1246</SUB>> ]
-"5315" [label = <(RETURN,return InvokeWithJValues(soa, obj, mid, args).GetB();,return InvokeWithJValues(soa, obj, mid, args).GetB();)<SUB>1247</SUB>> ]
-"5316" [label = <(GetB,InvokeWithJValues(soa, obj, mid, args).GetB())<SUB>1247</SUB>> ]
-"5317" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, obj, mid, args).GetB)<SUB>1247</SUB>> ]
-"5280" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1244</SUB>> ]
-"5298" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1245</SUB>> ]
-"5318" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1247</SUB>> ]
-"5323" [label = <(FIELD_IDENTIFIER,GetB,GetB)<SUB>1247</SUB>> ]
-"5281" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1244</SUB>> ]
-"5285" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1244</SUB>> ]
-"5292" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1244</SUB>> ]
-"5299" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1245</SUB>> ]
-"5303" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1245</SUB>> ]
-"5310" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1245</SUB>> ]
-"5286" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1244</SUB>> ]
-"5304" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1245</SUB>> ]
-"5287" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1244</SUB>> ]
-"5289" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1244</SUB>> ]
-"5305" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1245</SUB>> ]
-"5307" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1245</SUB>> ]
-"5269" [label = <(METHOD,CallNonvirtualByteMethodA)<SUB>1242</SUB>> ]
-"5324" [label = <(METHOD_RETURN,jbyte)<SUB>1242</SUB>> ]
-  "5276" -> "5281" 
-  "5276" -> "5294" 
-  "5294" -> "5299" 
-  "5294" -> "5313" 
-  "5313" -> "5318" 
-  "5315" -> "5324" 
-  "5316" -> "5315" 
-  "5317" -> "5316" 
-  "5280" -> "5287" 
-  "5280" -> "5294" 
-  "5298" -> "5305" 
-  "5298" -> "5313" 
-  "5318" -> "5323" 
-  "5323" -> "5317" 
-  "5281" -> "5280" 
-  "5285" -> "5292" 
-  "5292" -> "5324" 
-  "5299" -> "5298" 
-  "5303" -> "5310" 
-  "5310" -> "5324" 
-  "5286" -> "5285" 
-  "5304" -> "5303" 
-  "5287" -> "5289" 
-  "5289" -> "5286" 
-  "5305" -> "5307" 
-  "5307" -> "5304" 
-  "5269" -> "5276" 
+digraph "CallNonvirtualShortMethod" {  
+"5321" [label = <(va_start,va_start(ap, mid))<SUB>1201</SUB>> ]
+"5325" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1202</SUB>> ]
+"5328" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1203</SUB>> ]
+"5346" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1204</SUB>> ]
+"5365" [label = <(soa,soa(env))<SUB>1205</SUB>> ]
+"5368" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, ap)))<SUB>1206</SUB>> ]
+"5374" [label = <(RETURN,return result.GetS();,return result.GetS();)<SUB>1207</SUB>> ]
+"5326" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1202</SUB>> ]
+"5369" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1206</SUB>> ]
+"5375" [label = <(GetS,result.GetS())<SUB>1207</SUB>> ]
+"5376" [label = <(&lt;operator&gt;.fieldAccess,result.GetS)<SUB>1207</SUB>> ]
+"5332" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1203</SUB>> ]
+"5350" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1204</SUB>> ]
+"5378" [label = <(FIELD_IDENTIFIER,GetS,GetS)<SUB>1207</SUB>> ]
+"5333" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1203</SUB>> ]
+"5337" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1203</SUB>> ]
+"5344" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1203</SUB>> ]
+"5351" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1204</SUB>> ]
+"5355" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1204</SUB>> ]
+"5362" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1204</SUB>> ]
+"5338" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1203</SUB>> ]
+"5356" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1204</SUB>> ]
+"5339" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1203</SUB>> ]
+"5341" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1203</SUB>> ]
+"5357" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1204</SUB>> ]
+"5359" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1204</SUB>> ]
+"5314" [label = <(METHOD,CallNonvirtualShortMethod)<SUB>1199</SUB>> ]
+"5379" [label = <(METHOD_RETURN,jshort)<SUB>1199</SUB>> ]
+  "5321" -> "5326" 
+  "5325" -> "5328" 
+  "5328" -> "5333" 
+  "5328" -> "5346" 
+  "5346" -> "5351" 
+  "5346" -> "5365" 
+  "5365" -> "5369" 
+  "5368" -> "5378" 
+  "5374" -> "5379" 
+  "5326" -> "5325" 
+  "5369" -> "5368" 
+  "5375" -> "5374" 
+  "5376" -> "5375" 
+  "5332" -> "5339" 
+  "5332" -> "5346" 
+  "5350" -> "5357" 
+  "5350" -> "5365" 
+  "5378" -> "5376" 
+  "5333" -> "5332" 
+  "5337" -> "5344" 
+  "5344" -> "5379" 
+  "5351" -> "5350" 
+  "5355" -> "5362" 
+  "5362" -> "5379" 
+  "5338" -> "5337" 
+  "5356" -> "5355" 
+  "5339" -> "5341" 
+  "5341" -> "5338" 
+  "5357" -> "5359" 
+  "5359" -> "5356" 
+  "5314" -> "5321" 
 }
