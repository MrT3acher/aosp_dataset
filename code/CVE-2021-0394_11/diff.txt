diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_11/secure/out/0-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_11/vulnerable/out/0-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_11/secure/out/0-cfg.dot	2023-06-07 19:34:05.047392563 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_11/vulnerable/out/0-cfg.dot	2023-06-07 19:34:08.597392176 +0330
@@ -2,44 +2,44 @@
 "225" [label = <(UNKNOWN,TEST_F(HidlTest, GetDescriptorTest) {\012    EXPECT_OK(baz-&gt;interfaceDescriptor([&amp;] (const auto &amp;desc) {\012        EXPECT_EQ(desc, IBaz::descriptor);\012 }));\012},TEST_F(HidlTest, GetDescriptorTest) {\012    EXPECT_OK(baz-&gt;interfaceDescriptor([&amp;] (const auto &amp;desc) {\012        EXPECT_EQ(desc, IBaz::descriptor);\012 }));\012})<SUB>140</SUB>> ]
 "226" [label = <(UNKNOWN,TEST_F(HidlTest, BazSomeBaseMethodTest) {\012    EXPECT_OK(baz-&gt;someBaseMethod());\012},TEST_F(HidlTest, BazSomeBaseMethodTest) {\012    EXPECT_OK(baz-&gt;someBaseMethod());\012})<SUB>146</SUB>> ]
 "227" [label = <(UNKNOWN,TEST_F(HidlTest, BazSomeOtherBaseMethodTest) {\012 IBase::Foo foo;\012    foo.x = 1;\012    foo.y.z = 2.5;\012 // A valid UTF-8 string\012    foo.y.s = &quot;Hello, world, \x46\x6F\x6F\x20\xC2\xA9\x20\x62\x61\x72\x20\xF0\x9D\x8C\x86\x20\x54\x72\x65\x62\x6C\x65\x20\xE2\x98\x83\x20\x72\x6F\x63\x6B\x73&quot;;\012\012    foo.aaa.resize(5);\012 for (size_t i = 0; i &lt; foo.aaa.size(); ++i) {\012        foo.aaa[i].z = 1.0f + (float)i * 0.01f;\012        foo.aaa[i].s = (&quot;Hello, world &quot; + std::to_string(i)).c_str();\012 }\012\012    EXPECT_OK(\012            baz-&gt;someOtherBaseMethod(\012                foo,\012 [&amp;](const auto &amp;result) {\012 // Strings should have the same size as they did before\012 // marshaling. b/35038064\012                    EXPECT_EQ(result.y.s.size(), foo.y.s.size());\012                    EXPECT_EQ(foo, result);\012 }));\012},TEST_F(HidlTest, BazSomeOtherBaseMethodTest) {\012 IBase::Foo foo;\012    foo.x = 1;\012    foo.y.z = 2.5;\012 // A valid UTF-8 string\012    foo.y.s = &quot;Hello, world, \x46\x6F\x6F\x20\xC2\xA9\x20\x62\x61\x72\x20\xF0\x9D\x8C\x86\x20\x54\x72\x65\x62\x6C\x65\x20\xE2\x98\x83\x20\x72\x6F\x63\x6B\x73&quot;;\012\012    foo.aaa.resize(5);\012 for (size_t i = 0; i &lt; foo.aaa.size(); ++i) {\012        foo.aaa[i].z = 1.0f + (float)i * 0.01f;\012        foo.aaa[i].s = (&quot;Hello, world &quot; + std::to_string(i)).c_str();\012 }\012\012    EXPECT_OK(\012            baz-&gt;someOtherBaseMethod(\012                foo,\012 [&amp;](const auto &amp;result) {\012 // Strings should have the same size as they did before\012 // marshaling. b/35038064\012                    EXPECT_EQ(result.y.s.size(), foo.y.s.size());\012                    EXPECT_EQ(foo, result);\012 }));\012})<SUB>150</SUB>> ]
-"228" [label = <(UNKNOWN,TEST_F(HidlTest, SomeOtherBaseMethodInvalidString) {\012 IBase::Foo foo {\012 .y = {\012 .s = &quot;\xff&quot;,\012 }\012 };\012\012 auto ret = baz-&gt;someOtherBaseMethod(foo, [](const IBase::Foo&amp; ret) {\012        EXPECT_EQ(ret.y.s, &quot;?&quot;); // :)\012 });\012\012    EXPECT_TRUE(ret.isOk());\012},TEST_F(HidlTest, SomeOtherBaseMethodInvalidString) {\012 IBase::Foo foo {\012 .y = {\012 .s = &quot;\xff&quot;,\012 }\012 };\012\012 auto ret = baz-&gt;someOtherBaseMethod(foo, [](const IBase::Foo&amp; ret) {\012        EXPECT_EQ(ret.y.s, &quot;?&quot;); // :)\012 });\012\012    EXPECT_TRUE(ret.isOk());\012})<SUB>174</SUB>> ]
-"229" [label = <(UNKNOWN,TEST_F(HidlTest, BazSomeMethodWithFooArraysTest) {\012    hidl_array&lt;IBase::Foo, 2&gt; foo;\012\012    foo[0].x = 1;\012    foo[0].y.z = 2.5;\012    foo[0].y.s = &quot;Hello, world&quot;;\012\012    foo[0].aaa.resize(5);\012 for (size_t i = 0; i &lt; foo[0].aaa.size(); ++i) {\012        foo[0].aaa[i].z = 1.0f + (float)i * 0.01f;\012        foo[0].aaa[i].s = (&quot;Hello, world &quot; + std::to_string(i)).c_str();\012 }\012\012    foo[1].x = 2;\012    foo[1].y.z = -2.5;\012    foo[1].y.s = &quot;Morituri te salutant&quot;;\012\012    foo[1].aaa.resize(3);\012 for (size_t i = 0; i &lt; foo[1].aaa.size(); ++i) {\012        foo[1].aaa[i].z = 2.0f - (float)i * 0.01f;\012        foo[1].aaa[i].s = (&quot;Alea iacta est: &quot; + std::to_string(i)).c_str();\012 }\012\012    hidl_array&lt;IBaz::Foo, 2&gt; fooExpectedOutput;\012    fooExpectedOutput[0] = foo[1];\012    fooExpectedOutput[1] = foo[0];\012\012    EXPECT_OK(\012            baz-&gt;someMethodWithFooArrays(\012                foo,\012 [&amp;](const auto &amp;result) {\012                    EXPECT_EQ(result, fooExpectedOutput);\012 }));\012},TEST_F(HidlTest, BazSomeMethodWithFooArraysTest) {\012    hidl_array&lt;IBase::Foo, 2&gt; foo;\012\012    foo[0].x = 1;\012    foo[0].y.z = 2.5;\012    foo[0].y.s = &quot;Hello, world&quot;;\012\012    foo[0].aaa.resize(5);\012 for (size_t i = 0; i &lt; foo[0].aaa.size(); ++i) {\012        foo[0].aaa[i].z = 1.0f + (float)i * 0.01f;\012        foo[0].aaa[i].s = (&quot;Hello, world &quot; + std::to_string(i)).c_str();\012 }\012\012    foo[1].x = 2;\012    foo[1].y.z = -2.5;\012    foo[1].y.s = &quot;Morituri te salutant&quot;;\012\012    foo[1].aaa.resize(3);\012 for (size_t i = 0; i &lt; foo[1].aaa.size(); ++i) {\012        foo[1].aaa[i].z = 2.0f - (float)i * 0.01f;\012        foo[1].aaa[i].s = (&quot;Alea iacta est: &quot; + std::to_string(i)).c_str();\012 }\012\012    hidl_array&lt;IBaz::Foo, 2&gt; fooExpectedOutput;\012    fooExpectedOutput[0] = foo[1];\012    fooExpectedOutput[1] = foo[0];\012\012    EXPECT_OK(\012            baz-&gt;someMethodWithFooArrays(\012                foo,\012 [&amp;](const auto &amp;result) {\012                    EXPECT_EQ(result, fooExpectedOutput);\012 }));\012})<SUB>188</SUB>> ]
-"230" [label = <(UNKNOWN,TEST_F(HidlTest, BazSomeMethodWithFooVectorsTest) {\012    hidl_vec&lt;IBase::Foo&gt; foo;\012    foo.resize(2);\012\012    foo[0].x = 1;\012    foo[0].y.z = 2.5;\012    foo[0].y.s = &quot;Hello, world&quot;;\012\012    foo[0].aaa.resize(5);\012 for (size_t i = 0; i &lt; foo[0].aaa.size(); ++i) {\012        foo[0].aaa[i].z = 1.0f + (float)i * 0.01f;\012        foo[0].aaa[i].s = (&quot;Hello, world &quot; + std::to_string(i)).c_str();\012 }\012\012    foo[1].x = 2;\012    foo[1].y.z = -2.5;\012    foo[1].y.s = &quot;Morituri te salutant&quot;;\012\012    foo[1].aaa.resize(3);\012 for (size_t i = 0; i &lt; foo[1].aaa.size(); ++i) {\012        foo[1].aaa[i].z = 2.0f - (float)i * 0.01f;\012        foo[1].aaa[i].s = (&quot;Alea iacta est: &quot; + std::to_string(i)).c_str();\012 }\012\012    hidl_vec&lt;IBaz::Foo&gt; fooExpectedOutput;\012    fooExpectedOutput.resize(2);\012    fooExpectedOutput[0] = foo[1];\012    fooExpectedOutput[1] = foo[0];\012\012    EXPECT_OK(\012            baz-&gt;someMethodWithFooVectors(\012                foo,\012 [&amp;](const auto &amp;result) {\012                    EXPECT_EQ(result, fooExpectedOutput);\012 }));\012},TEST_F(HidlTest, BazSomeMethodWithFooVectorsTest) {\012    hidl_vec&lt;IBase::Foo&gt; foo;\012    foo.resize(2);\012\012    foo[0].x = 1;\012    foo[0].y.z = 2.5;\012    foo[0].y.s = &quot;Hello, world&quot;;\012\012    foo[0].aaa.resize(5);\012 for (size_t i = 0; i &lt; foo[0].aaa.size(); ++i) {\012        foo[0].aaa[i].z = 1.0f + (float)i * 0.01f;\012        foo[0].aaa[i].s = (&quot;Hello, world &quot; + std::to_string(i)).c_str();\012 }\012\012    foo[1].x = 2;\012    foo[1].y.z = -2.5;\012    foo[1].y.s = &quot;Morituri te salutant&quot;;\012\012    foo[1].aaa.resize(3);\012 for (size_t i = 0; i &lt; foo[1].aaa.size(); ++i) {\012        foo[1].aaa[i].z = 2.0f - (float)i * 0.01f;\012        foo[1].aaa[i].s = (&quot;Alea iacta est: &quot; + std::to_string(i)).c_str();\012 }\012\012    hidl_vec&lt;IBaz::Foo&gt; fooExpectedOutput;\012    fooExpectedOutput.resize(2);\012    fooExpectedOutput[0] = foo[1];\012    fooExpectedOutput[1] = foo[0];\012\012    EXPECT_OK(\012            baz-&gt;someMethodWithFooVectors(\012                foo,\012 [&amp;](const auto &amp;result) {\012                    EXPECT_EQ(result, fooExpectedOutput);\012 }));\012})<SUB>223</SUB>> ]
-"231" [label = <(UNKNOWN,TEST_F(HidlTest, BazSomeMethodWithVectorOfArray) {\012 IBase::VectorOfArray in, expectedOut;\012    in.addresses.resize(3);\012    expectedOut.addresses.resize(3);\012\012 size_t k = 0;\012 const size_t n = in.addresses.size();\012\012 for (size_t i = 0; i &lt; n; ++i) {\012 for (size_t j = 0; j &lt; 6; ++j, ++k) {\012            in.addresses[i][j] = k;\012            expectedOut.addresses[n - 1 - i][j] = k;\012 }\012 }\012\012    EXPECT_OK(\012            baz-&gt;someMethodWithVectorOfArray(\012                in,\012 [&amp;](const auto &amp;out) {\012                    EXPECT_EQ(expectedOut, out);\012 }));\012},TEST_F(HidlTest, BazSomeMethodWithVectorOfArray) {\012 IBase::VectorOfArray in, expectedOut;\012    in.addresses.resize(3);\012    expectedOut.addresses.resize(3);\012\012 size_t k = 0;\012 const size_t n = in.addresses.size();\012\012 for (size_t i = 0; i &lt; n; ++i) {\012 for (size_t j = 0; j &lt; 6; ++j, ++k) {\012            in.addresses[i][j] = k;\012            expectedOut.addresses[n - 1 - i][j] = k;\012 }\012 }\012\012    EXPECT_OK(\012            baz-&gt;someMethodWithVectorOfArray(\012                in,\012 [&amp;](const auto &amp;out) {\012                    EXPECT_EQ(expectedOut, out);\012 }));\012})<SUB>260</SUB>> ]
-"232" [label = <(UNKNOWN,TEST_F(HidlTest, BazSomeMethodTakingAVectorOfArray) {\012    hidl_vec&lt;hidl_array&lt;uint8_t, 6&gt; &gt; in, expectedOut;\012    in.resize(3);\012    expectedOut.resize(3);\012\012 size_t k = 0;\012 const size_t n = in.size();\012 for (size_t i = 0; i &lt; n; ++i) {\012 for (size_t j = 0; j &lt; 6; ++j, ++k) {\012            in[i][j] = k;\012            expectedOut[n - 1 - i][j] = k;\012 }\012 }\012\012    EXPECT_OK(\012            baz-&gt;someMethodTakingAVectorOfArray(\012                in,\012 [&amp;](const auto &amp;out) {\012                    EXPECT_EQ(expectedOut, out);\012 }));\012},TEST_F(HidlTest, BazSomeMethodTakingAVectorOfArray) {\012    hidl_vec&lt;hidl_array&lt;uint8_t, 6&gt; &gt; in, expectedOut;\012    in.resize(3);\012    expectedOut.resize(3);\012\012 size_t k = 0;\012 const size_t n = in.size();\012 for (size_t i = 0; i &lt; n; ++i) {\012 for (size_t j = 0; j &lt; 6; ++j, ++k) {\012            in[i][j] = k;\012            expectedOut[n - 1 - i][j] = k;\012 }\012 }\012\012    EXPECT_OK(\012            baz-&gt;someMethodTakingAVectorOfArray(\012                in,\012 [&amp;](const auto &amp;out) {\012                    EXPECT_EQ(expectedOut, out);\012 }));\012})<SUB>283</SUB>> ]
-"347" [label = <(UNKNOWN,TEST_F(HidlTest, BazTransposeTest) {\012 IBase::StringMatrix5x3 in;\012 IBase::StringMatrix3x5 expectedOut;\012\012 for (int i = 0; i &lt; 5; ++i) {\012 for (int j = 0; j &lt; 3; ++j) {\012            in.s[i][j] = expectedOut.s[j][i] = numberToEnglish(3 * i + j + 1).c_str();\012 }\012 }\012\012    EXPECT_OK(baz-&gt;transpose(\012                in,\012 [&amp;](const auto &amp;out) {\012                    EXPECT_EQ(expectedOut, out);\012 }));\012},TEST_F(HidlTest, BazTransposeTest) {\012 IBase::StringMatrix5x3 in;\012 IBase::StringMatrix3x5 expectedOut;\012\012 for (int i = 0; i &lt; 5; ++i) {\012 for (int j = 0; j &lt; 3; ++j) {\012            in.s[i][j] = expectedOut.s[j][i] = numberToEnglish(3 * i + j + 1).c_str();\012 }\012 }\012\012    EXPECT_OK(baz-&gt;transpose(\012                in,\012 [&amp;](const auto &amp;out) {\012                    EXPECT_EQ(expectedOut, out);\012 }));\012})<SUB>351</SUB>> ]
-"348" [label = <(UNKNOWN,TEST_F(HidlTest, BazTranspose2Test) {\012    hidl_array&lt;hidl_string, 5, 3&gt; in;\012    hidl_array&lt;hidl_string, 3, 5&gt; expectedOut;\012\012 for (int i = 0; i &lt; 5; ++i) {\012 for (int j = 0; j &lt; 3; ++j) {\012            in[i][j] = expectedOut[j][i] = numberToEnglish(3 * i + j + 1).c_str();\012 }\012 }\012\012    EXPECT_OK(baz-&gt;transpose2(\012                in,\012 [&amp;](const auto &amp;out) {\012                    EXPECT_EQ(expectedOut, out);\012 }));\012},TEST_F(HidlTest, BazTranspose2Test) {\012    hidl_array&lt;hidl_string, 5, 3&gt; in;\012    hidl_array&lt;hidl_string, 3, 5&gt; expectedOut;\012\012 for (int i = 0; i &lt; 5; ++i) {\012 for (int j = 0; j &lt; 3; ++j) {\012            in[i][j] = expectedOut[j][i] = numberToEnglish(3 * i + j + 1).c_str();\012 }\012 }\012\012    EXPECT_OK(baz-&gt;transpose2(\012                in,\012 [&amp;](const auto &amp;out) {\012                    EXPECT_EQ(expectedOut, out);\012 }));\012})<SUB>368</SUB>> ]
-"349" [label = <(UNKNOWN,TEST_F(HidlTest, BazSomeBoolMethodTest) {\012 auto result = baz-&gt;someBoolMethod(true);\012    EXPECT_OK(result);\012    EXPECT_EQ(result, false);\012},TEST_F(HidlTest, BazSomeBoolMethodTest) {\012 auto result = baz-&gt;someBoolMethod(true);\012    EXPECT_OK(result);\012    EXPECT_EQ(result, false);\012})<SUB>385</SUB>> ]
-"350" [label = <(UNKNOWN,TEST_F(HidlTest, BazSomeBoolArrayMethodTest) {\012    hidl_array&lt;bool, 3&gt; someBoolArray;\012    someBoolArray[0] = true;\012    someBoolArray[1] = false;\012    someBoolArray[2] = true;\012\012    hidl_array&lt;bool, 4&gt; expectedOut;\012    expectedOut[0] = false;\012    expectedOut[1] = true;\012    expectedOut[2] = false;\012    expectedOut[3] = true;\012\012    EXPECT_OK(\012            baz-&gt;someBoolArrayMethod(\012                someBoolArray,\012 [&amp;](const auto &amp;result) {\012                    EXPECT_EQ(expectedOut, result);\012 }));\012},TEST_F(HidlTest, BazSomeBoolArrayMethodTest) {\012    hidl_array&lt;bool, 3&gt; someBoolArray;\012    someBoolArray[0] = true;\012    someBoolArray[1] = false;\012    someBoolArray[2] = true;\012\012    hidl_array&lt;bool, 4&gt; expectedOut;\012    expectedOut[0] = false;\012    expectedOut[1] = true;\012    expectedOut[2] = false;\012    expectedOut[3] = true;\012\012    EXPECT_OK(\012            baz-&gt;someBoolArrayMethod(\012                someBoolArray,\012 [&amp;](const auto &amp;result) {\012                    EXPECT_EQ(expectedOut, result);\012 }));\012})<SUB>391</SUB>> ]
-"351" [label = <(UNKNOWN,TEST_F(HidlTest, BazSomeBoolVectorMethodTest) {\012    hidl_vec&lt;bool&gt; someBoolVector, expected;\012    someBoolVector.resize(4);\012    expected.resize(4);\012\012 for (size_t i = 0; i &lt; someBoolVector.size(); ++i) {\012        someBoolVector[i] = ((i &amp; 1) == 0);\012        expected[i] = !someBoolVector[i];\012 }\012\012    EXPECT_OK(\012            baz-&gt;someBoolVectorMethod(\012                someBoolVector,\012 [&amp;](const auto &amp;result) {\012                    EXPECT_EQ(expected, result);\012 }));\012},TEST_F(HidlTest, BazSomeBoolVectorMethodTest) {\012    hidl_vec&lt;bool&gt; someBoolVector, expected;\012    someBoolVector.resize(4);\012    expected.resize(4);\012\012 for (size_t i = 0; i &lt; someBoolVector.size(); ++i) {\012        someBoolVector[i] = ((i &amp; 1) == 0);\012        expected[i] = !someBoolVector[i];\012 }\012\012    EXPECT_OK(\012            baz-&gt;someBoolVectorMethod(\012                someBoolVector,\012 [&amp;](const auto &amp;result) {\012                    EXPECT_EQ(expected, result);\012 }));\012})<SUB>411</SUB>> ]
-"352" [label = <(UNKNOWN,TEST_F(HidlTest, BazDoThisMethodTest) {\012    EXPECT_OK(baz-&gt;doThis(1.0f));\012},TEST_F(HidlTest, BazDoThisMethodTest) {\012    EXPECT_OK(baz-&gt;doThis(1.0f));\012})<SUB>429</SUB>> ]
-"353" [label = <(UNKNOWN,TEST_F(HidlTest, BazDoThatAndReturnSomethingMethodTest) {\012 auto result = baz-&gt;doThatAndReturnSomething(1);\012    EXPECT_OK(result);\012    EXPECT_EQ(result, 666);\012},TEST_F(HidlTest, BazDoThatAndReturnSomethingMethodTest) {\012 auto result = baz-&gt;doThatAndReturnSomething(1);\012    EXPECT_OK(result);\012    EXPECT_EQ(result, 666);\012})<SUB>433</SUB>> ]
-"354" [label = <(UNKNOWN,TEST_F(HidlTest, BazDoQuiteABitMethodTest) {\012 auto result = baz-&gt;doQuiteABit(1, 2LL, 3.0f, 4.0);\012\012    EXPECT_OK(result);\012    EXPECT_EQ(result, 666.5);\012},TEST_F(HidlTest, BazDoQuiteABitMethodTest) {\012 auto result = baz-&gt;doQuiteABit(1, 2LL, 3.0f, 4.0);\012\012    EXPECT_OK(result);\012    EXPECT_EQ(result, 666.5);\012})<SUB>439</SUB>> ]
-"355" [label = <(UNKNOWN,TEST_F(HidlTest, BazDoSomethingElseMethodTest) {\012    hidl_array&lt;int32_t, 15&gt; param;\012    hidl_array&lt;int32_t, 32&gt; expected;\012\012 for (size_t i = 0; i &lt; 15; ++i) {\012        param[i] = expected[15 + i] = i;\012        expected[i] = 2 * i;\012 }\012\012    expected[30] = 1;\012    expected[31] = 2;\012\012    EXPECT_OK(\012            baz-&gt;doSomethingElse(\012                param,\012 [&amp;](const auto &amp;result) {\012                    EXPECT_EQ(expected, result);\012 }));\012},TEST_F(HidlTest, BazDoSomethingElseMethodTest) {\012    hidl_array&lt;int32_t, 15&gt; param;\012    hidl_array&lt;int32_t, 32&gt; expected;\012\012 for (size_t i = 0; i &lt; 15; ++i) {\012        param[i] = expected[15 + i] = i;\012        expected[i] = 2 * i;\012 }\012\012    expected[30] = 1;\012    expected[31] = 2;\012\012    EXPECT_OK(\012            baz-&gt;doSomethingElse(\012                param,\012 [&amp;](const auto &amp;result) {\012                    EXPECT_EQ(expected, result);\012 }));\012})<SUB>446</SUB>> ]
-"356" [label = <(UNKNOWN,TEST_F(HidlTest, BazDoStuffAndReturnAStringMethodTest) {\012    std::string expected = &quot;Hello, world!&quot;;\012    EXPECT_OK(\012            baz-&gt;doStuffAndReturnAString(\012 [&amp;](const auto &amp;result) {\012                    EXPECT_EQ(expected, result);\012 }));\012},TEST_F(HidlTest, BazDoStuffAndReturnAStringMethodTest) {\012    std::string expected = &quot;Hello, world!&quot;;\012    EXPECT_OK(\012            baz-&gt;doStuffAndReturnAString(\012 [&amp;](const auto &amp;result) {\012                    EXPECT_EQ(expected, result);\012 }));\012})<SUB>466</SUB>> ]
-"357" [label = <(UNKNOWN,TEST_F(HidlTest, BazMapThisVectorMethodTest) {\012    hidl_vec&lt;int32_t&gt; vec_param, expected;\012    vec_param.resize(15);\012    expected.resize(15);\012\012 for (size_t i = 0; i &lt; 15; ++i) {\012        vec_param[i] = i;\012        expected[i] = 2 * i;\012 }\012\012    EXPECT_OK(\012            baz-&gt;mapThisVector(\012                vec_param,\012 [&amp;](const auto &amp;result) {\012                    EXPECT_EQ(expected, result);\012 }));\012},TEST_F(HidlTest, BazMapThisVectorMethodTest) {\012    hidl_vec&lt;int32_t&gt; vec_param, expected;\012    vec_param.resize(15);\012    expected.resize(15);\012\012 for (size_t i = 0; i &lt; 15; ++i) {\012        vec_param[i] = i;\012        expected[i] = 2 * i;\012 }\012\012    EXPECT_OK(\012            baz-&gt;mapThisVector(\012                vec_param,\012 [&amp;](const auto &amp;result) {\012                    EXPECT_EQ(expected, result);\012 }));\012})<SUB>475</SUB>> ]
-"358" [label = <(UNKNOWN,TEST_F(HidlTest, BazCallMeMethodTest) {\012    EXPECT_OK(baz-&gt;callMe(new BazCallback()));\012},TEST_F(HidlTest, BazCallMeMethodTest) {\012    EXPECT_OK(baz-&gt;callMe(new BazCallback()));\012})<SUB>493</SUB>> ]
-"359" [label = <(UNKNOWN,TEST_F(HidlTest, BazCallMeLaterMethodTest) {\012    EXPECT_OK(baz-&gt;callMeLater(new BazCallback()));\012    EXPECT_OK(baz-&gt;iAmFreeNow());\012},TEST_F(HidlTest, BazCallMeLaterMethodTest) {\012    EXPECT_OK(baz-&gt;callMeLater(new BazCallback()));\012    EXPECT_OK(baz-&gt;iAmFreeNow());\012})<SUB>497</SUB>> ]
-"360" [label = <(UNKNOWN,TEST_F(HidlTest, BazUseAnEnumMethodTest) {\012 auto result = baz-&gt;useAnEnum(IBaz::SomeEnum::bar);\012\012    EXPECT_OK(result);\012    EXPECT_TRUE(result == IBaz::SomeEnum::quux);\012},TEST_F(HidlTest, BazUseAnEnumMethodTest) {\012 auto result = baz-&gt;useAnEnum(IBaz::SomeEnum::bar);\012\012    EXPECT_OK(result);\012    EXPECT_TRUE(result == IBaz::SomeEnum::quux);\012})<SUB>502</SUB>> ]
-"361" [label = <(UNKNOWN,TEST_F(HidlTest, BazHaveSomeStringsMethodTest) {\012    hidl_array&lt;hidl_string, 3&gt; string_params;\012    string_params[0] = &quot;one&quot;;\012    string_params[1] = &quot;two&quot;;\012    string_params[2] = &quot;three&quot;;\012\012    hidl_array&lt;hidl_string, 2&gt; expected;\012    expected[0] = &quot;Hello&quot;;\012    expected[1] = &quot;World&quot;;\012\012    EXPECT_OK(\012            baz-&gt;haveSomeStrings(\012                string_params,\012 [&amp;](const auto &amp;result) {\012                    EXPECT_EQ(expected, result);\012 }));\012},TEST_F(HidlTest, BazHaveSomeStringsMethodTest) {\012    hidl_array&lt;hidl_string, 3&gt; string_params;\012    string_params[0] = &quot;one&quot;;\012    string_params[1] = &quot;two&quot;;\012    string_params[2] = &quot;three&quot;;\012\012    hidl_array&lt;hidl_string, 2&gt; expected;\012    expected[0] = &quot;Hello&quot;;\012    expected[1] = &quot;World&quot;;\012\012    EXPECT_OK(\012            baz-&gt;haveSomeStrings(\012                string_params,\012 [&amp;](const auto &amp;result) {\012                    EXPECT_EQ(expected, result);\012 }));\012})<SUB>509</SUB>> ]
-"362" [label = <(UNKNOWN,TEST_F(HidlTest, BazHaveAStringVecMethodTest) {\012    hidl_vec&lt;hidl_string&gt; string_vec{ &quot;Uno&quot;, &quot;Dos&quot;, &quot;Tres&quot;, &quot;Cuatro&quot; };\012    hidl_vec&lt;hidl_string&gt; expected{&quot;Hello&quot;, &quot;World&quot;};\012\012    EXPECT_OK(\012            baz-&gt;haveAStringVec(\012                string_vec,\012 [&amp;](const auto &amp;result) {\012                    EXPECT_EQ(expected, result);\012 }));\012},TEST_F(HidlTest, BazHaveAStringVecMethodTest) {\012    hidl_vec&lt;hidl_string&gt; string_vec{ &quot;Uno&quot;, &quot;Dos&quot;, &quot;Tres&quot;, &quot;Cuatro&quot; };\012    hidl_vec&lt;hidl_string&gt; expected{&quot;Hello&quot;, &quot;World&quot;};\012\012    EXPECT_OK(\012            baz-&gt;haveAStringVec(\012                string_vec,\012 [&amp;](const auto &amp;result) {\012                    EXPECT_EQ(expected, result);\012 }));\012})<SUB>527</SUB>> ]
-"363" [label = <(UNKNOWN,TEST_F(HidlTest, BazReturnABunchOfStringsMethodTest) {\012    std::string expectedA = &quot;Eins&quot;;\012    std::string expectedB = &quot;Zwei&quot;;\012    std::string expectedC = &quot;Drei&quot;;\012    EXPECT_OK(\012            baz-&gt;returnABunchOfStrings(\012 [&amp;](const auto &amp;a, const auto &amp;b, const auto &amp;c) {\012                    EXPECT_EQ(a, expectedA);\012                    EXPECT_EQ(b, expectedB);\012                    EXPECT_EQ(c, expectedC);\012 }));\012},TEST_F(HidlTest, BazReturnABunchOfStringsMethodTest) {\012    std::string expectedA = &quot;Eins&quot;;\012    std::string expectedB = &quot;Zwei&quot;;\012    std::string expectedC = &quot;Drei&quot;;\012    EXPECT_OK(\012            baz-&gt;returnABunchOfStrings(\012 [&amp;](const auto &amp;a, const auto &amp;b, const auto &amp;c) {\012                    EXPECT_EQ(a, expectedA);\012                    EXPECT_EQ(b, expectedB);\012                    EXPECT_EQ(c, expectedC);\012 }));\012})<SUB>539</SUB>> ]
-"364" [label = <(UNKNOWN,TEST_F(HidlTest, BazTestArrays) {\012 IBase::LotsOfPrimitiveArrays in;\012\012 for (size_t i = 0; i &lt; 128; ++i) {\012        in.byte1[i] = i;\012        in.boolean1[i] = (i &amp; 4) != 0;\012        in.double1[i] = i;\012 }\012\012 size_t k = 0;\012 for (size_t i = 0; i &lt; 8; ++i) {\012 for (size_t j = 0; j &lt; 128; ++j, ++k) {\012            in.byte2[i][j] = k;\012            in.boolean2[i][j] = (k &amp; 4) != 0;\012            in.double2[i][j] = k;\012 }\012 }\012\012 size_t m = 0;\012 for (size_t i = 0; i &lt; 8; ++i) {\012 for (size_t j = 0; j &lt; 16; ++j) {\012 for (size_t k = 0; k &lt; 128; ++k, ++m) {\012                in.byte3[i][j][k] = m;\012                in.boolean3[i][j][k] = (m &amp; 4) != 0;\012                in.double3[i][j][k] = m;\012 }\012 }\012 }\012\012    EXPECT_OK(\012            baz-&gt;testArrays(in,\012 [&amp;](const auto &amp;out) {\012                    EXPECT_EQ(in, out);\012 }));\012},TEST_F(HidlTest, BazTestArrays) {\012 IBase::LotsOfPrimitiveArrays in;\012\012 for (size_t i = 0; i &lt; 128; ++i) {\012        in.byte1[i] = i;\012        in.boolean1[i] = (i &amp; 4) != 0;\012        in.double1[i] = i;\012 }\012\012 size_t k = 0;\012 for (size_t i = 0; i &lt; 8; ++i) {\012 for (size_t j = 0; j &lt; 128; ++j, ++k) {\012            in.byte2[i][j] = k;\012            in.boolean2[i][j] = (k &amp; 4) != 0;\012            in.double2[i][j] = k;\012 }\012 }\012\012 size_t m = 0;\012 for (size_t i = 0; i &lt; 8; ++i) {\012 for (size_t j = 0; j &lt; 16; ++j) {\012 for (size_t k = 0; k &lt; 128; ++k, ++m) {\012                in.byte3[i][j][k] = m;\012                in.boolean3[i][j][k] = (m &amp; 4) != 0;\012                in.double3[i][j][k] = m;\012 }\012 }\012 }\012\012    EXPECT_OK(\012            baz-&gt;testArrays(in,\012 [&amp;](const auto &amp;out) {\012                    EXPECT_EQ(in, out);\012 }));\012})<SUB>552</SUB>> ]
-"365" [label = <(UNKNOWN,TEST_F(HidlTest, BazTestByteVecs) {\012    hidl_vec&lt;IBase::ByteOneDim&gt; in;\012    in.resize(8);\012\012 size_t k = 0;\012 for (size_t i = 0; i &lt; in.size(); ++i) {\012 for (size_t j = 0; j &lt; 128; ++j, ++k) {\012            in[i][j] = k;\012 }\012 }\012\012    EXPECT_OK(baz-&gt;testByteVecs(\012                in, [&amp;](const auto &amp;out) { EXPECT_EQ(in, out); }));\012},TEST_F(HidlTest, BazTestByteVecs) {\012    hidl_vec&lt;IBase::ByteOneDim&gt; in;\012    in.resize(8);\012\012 size_t k = 0;\012 for (size_t i = 0; i &lt; in.size(); ++i) {\012 for (size_t j = 0; j &lt; 128; ++j, ++k) {\012            in[i][j] = k;\012 }\012 }\012\012    EXPECT_OK(baz-&gt;testByteVecs(\012                in, [&amp;](const auto &amp;out) { EXPECT_EQ(in, out); }));\012})<SUB>588</SUB>> ]
-"366" [label = <(UNKNOWN,TEST_F(HidlTest, BazTestBooleanVecs) {\012    hidl_vec&lt;IBase::BooleanOneDim&gt; in;\012    in.resize(8);\012\012 size_t k = 0;\012 for (size_t i = 0; i &lt; in.size(); ++i) {\012 for (size_t j = 0; j &lt; 128; ++j, ++k) {\012            in[i][j] = (k &amp; 4) != 0;\012 }\012 }\012\012    EXPECT_OK(baz-&gt;testBooleanVecs(\012                in, [&amp;](const auto &amp;out) { EXPECT_EQ(in, out); }));\012},TEST_F(HidlTest, BazTestBooleanVecs) {\012    hidl_vec&lt;IBase::BooleanOneDim&gt; in;\012    in.resize(8);\012\012 size_t k = 0;\012 for (size_t i = 0; i &lt; in.size(); ++i) {\012 for (size_t j = 0; j &lt; 128; ++j, ++k) {\012            in[i][j] = (k &amp; 4) != 0;\012 }\012 }\012\012    EXPECT_OK(baz-&gt;testBooleanVecs(\012                in, [&amp;](const auto &amp;out) { EXPECT_EQ(in, out); }));\012})<SUB>603</SUB>> ]
-"367" [label = <(UNKNOWN,TEST_F(HidlTest, BazTestDoubleVecs) {\012    hidl_vec&lt;IBase::DoubleOneDim&gt; in;\012    in.resize(8);\012\012 size_t k = 0;\012 for (size_t i = 0; i &lt; in.size(); ++i) {\012 for (size_t j = 0; j &lt; 128; ++j, ++k) {\012            in[i][j] = k;\012 }\012 }\012\012    EXPECT_OK(baz-&gt;testDoubleVecs(\012                in, [&amp;](const auto &amp;out) { EXPECT_EQ(in, out); }));\012},TEST_F(HidlTest, BazTestDoubleVecs) {\012    hidl_vec&lt;IBase::DoubleOneDim&gt; in;\012    in.resize(8);\012\012 size_t k = 0;\012 for (size_t i = 0; i &lt; in.size(); ++i) {\012 for (size_t j = 0; j &lt; 128; ++j, ++k) {\012            in[i][j] = k;\012 }\012 }\012\012    EXPECT_OK(baz-&gt;testDoubleVecs(\012                in, [&amp;](const auto &amp;out) { EXPECT_EQ(in, out); }));\012})<SUB>618</SUB>> ]
-"368" [label = <(UNKNOWN,TEST_F(HidlTest, SafeUnionNoInitTest) {\012    EXPECT_OK(safeunionInterface-&gt;newLargeSafeUnion([&amp;](const LargeSafeUnion&amp; safeUnion) {\012        EXPECT_EQ(LargeSafeUnion::hidl_discriminator::noinit, safeUnion.getDiscriminator());\012 }));\012},TEST_F(HidlTest, SafeUnionNoInitTest) {\012    EXPECT_OK(safeunionInterface-&gt;newLargeSafeUnion([&amp;](const LargeSafeUnion&amp; safeUnion) {\012        EXPECT_EQ(LargeSafeUnion::hidl_discriminator::noinit, safeUnion.getDiscriminator());\012 }));\012})<SUB>633</SUB>> ]
-"369" [label = <(UNKNOWN,TEST_F(HidlTest, SafeUnionSimpleTest) {\012    EXPECT_OK(safeunionInterface-&gt;newLargeSafeUnion([&amp;](const LargeSafeUnion&amp; safeUnion) {\012        EXPECT_OK(safeunionInterface-&gt;setA(safeUnion, -5, [&amp;](const LargeSafeUnion&amp; safeUnion) {\012            EXPECT_EQ(LargeSafeUnion::hidl_discriminator::a, safeUnion.getDiscriminator());\012            EXPECT_EQ(-5, safeUnion.a());\012\012 uint64_t max = std::numeric_limits&lt;uint64_t&gt;::max();\012            EXPECT_OK(\012                safeunionInterface-&gt;setD(safeUnion, max, [&amp;](const LargeSafeUnion&amp; safeUnion) {\012                    EXPECT_EQ(LargeSafeUnion::hidl_discriminator::d, safeUnion.getDiscriminator());\012                    EXPECT_EQ(max, safeUnion.d());\012 }));\012 }));\012 }));\012},TEST_F(HidlTest, SafeUnionSimpleTest) {\012    EXPECT_OK(safeunionInterface-&gt;newLargeSafeUnion([&amp;](const LargeSafeUnion&amp; safeUnion) {\012        EXPECT_OK(safeunionInterface-&gt;setA(safeUnion, -5, [&amp;](const LargeSafeUnion&amp; safeUnion) {\012            EXPECT_EQ(LargeSafeUnion::hidl_discriminator::a, safeUnion.getDiscriminator());\012            EXPECT_EQ(-5, safeUnion.a());\012\012 uint64_t max = std::numeric_limits&lt;uint64_t&gt;::max();\012            EXPECT_OK(\012                safeunionInterface-&gt;setD(safeUnion, max, [&amp;](const LargeSafeUnion&amp; safeUnion) {\012                    EXPECT_EQ(LargeSafeUnion::hidl_discriminator::d, safeUnion.getDiscriminator());\012                    EXPECT_EQ(max, safeUnion.d());\012 }));\012 }));\012 }));\012})<SUB>639</SUB>> ]
-"370" [label = <(UNKNOWN,TEST_F(HidlTest, SafeUnionArrayLikeTypesTest) {\012 const std::array&lt;int64_t, 5&gt; testArray{1, -2, 3, -4, 5};\012 const hidl_vec&lt;uint64_t&gt; testVector{std::numeric_limits&lt;uint64_t&gt;::max()};\012\012    EXPECT_OK(safeunionInterface-&gt;newLargeSafeUnion([&amp;](const LargeSafeUnion&amp; safeUnion) {\012        EXPECT_OK(\012            safeunionInterface-&gt;setF(safeUnion, testArray, [&amp;](const LargeSafeUnion&amp; safeUnion) {\012                EXPECT_EQ(LargeSafeUnion::hidl_discriminator::f, safeUnion.getDiscriminator());\012\012 for (size_t i = 0; i &lt; testArray.size(); i++) {\012                    EXPECT_EQ(testArray[i], safeUnion.f()[i]);\012 }\012 }));\012\012        EXPECT_OK(\012            safeunionInterface-&gt;setI(safeUnion, testVector, [&amp;](const LargeSafeUnion&amp; safeUnion) {\012                EXPECT_EQ(LargeSafeUnion::hidl_discriminator::i, safeUnion.getDiscriminator());\012                EXPECT_EQ(testVector, safeUnion.i());\012 }));\012 }));\012},TEST_F(HidlTest, SafeUnionArrayLikeTypesTest) {\012 const std::array&lt;int64_t, 5&gt; testArray{1, -2, 3, -4, 5};\012 const hidl_vec&lt;uint64_t&gt; testVector{std::numeric_limits&lt;uint64_t&gt;::max()};\012\012    EXPECT_OK(safeunionInterface-&gt;newLargeSafeUnion([&amp;](const LargeSafeUnion&amp; safeUnion) {\012        EXPECT_OK(\012            safeunionInterface-&gt;setF(safeUnion, testArray, [&amp;](const LargeSafeUnion&amp; safeUnion) {\012                EXPECT_EQ(LargeSafeUnion::hidl_discriminator::f, safeUnion.getDiscriminator());\012\012 for (size_t i = 0; i &lt; testArray.size(); i++) {\012                    EXPECT_EQ(testArray[i], safeUnion.f()[i]);\012 }\012 }));\012\012        EXPECT_OK(\012            safeunionInterface-&gt;setI(safeUnion, testVector, [&amp;](const LargeSafeUnion&amp; safeUnion) {\012                EXPECT_EQ(LargeSafeUnion::hidl_discriminator::i, safeUnion.getDiscriminator());\012                EXPECT_EQ(testVector, safeUnion.i());\012 }));\012 }));\012})<SUB>655</SUB>> ]
-"371" [label = <(UNKNOWN,TEST_F(HidlTest, SafeUnionStringTypeTest) {\012 const std::string testString =\012 &quot;This is an inordinately long test string to exercise hidl_string types in safe unions.&quot;;\012\012    EXPECT_OK(safeunionInterface-&gt;newLargeSafeUnion([&amp;](const LargeSafeUnion&amp; safeUnion) {\012        EXPECT_OK(safeunionInterface-&gt;setG(\012            safeUnion, hidl_string(testString), [&amp;](const LargeSafeUnion&amp; safeUnion) {\012                EXPECT_EQ(LargeSafeUnion::hidl_discriminator::g, safeUnion.getDiscriminator());\012                EXPECT_EQ(testString, std::string(safeUnion.g()));\012 }));\012 }));\012},TEST_F(HidlTest, SafeUnionStringTypeTest) {\012 const std::string testString =\012 &quot;This is an inordinately long test string to exercise hidl_string types in safe unions.&quot;;\012\012    EXPECT_OK(safeunionInterface-&gt;newLargeSafeUnion([&amp;](const LargeSafeUnion&amp; safeUnion) {\012        EXPECT_OK(safeunionInterface-&gt;setG(\012            safeUnion, hidl_string(testString), [&amp;](const LargeSafeUnion&amp; safeUnion) {\012                EXPECT_EQ(LargeSafeUnion::hidl_discriminator::g, safeUnion.getDiscriminator());\012                EXPECT_EQ(testString, std::string(safeUnion.g()));\012 }));\012 }));\012})<SUB>677</SUB>> ]
-"372" [label = <(UNKNOWN,TEST_F(HidlTest, SafeUnionNestedTest) {\012 SmallSafeUnion smallSafeUnion;\012    smallSafeUnion.a(1);\012\012    EXPECT_OK(safeunionInterface-&gt;newLargeSafeUnion([&amp;](const LargeSafeUnion&amp; safeUnion) {\012        EXPECT_OK(safeunionInterface-&gt;setL(\012            safeUnion, smallSafeUnion, [&amp;](const LargeSafeUnion&amp; safeUnion) {\012                EXPECT_EQ(LargeSafeUnion::hidl_discriminator::l, safeUnion.getDiscriminator());\012\012                EXPECT_EQ(SmallSafeUnion::hidl_discriminator::a, safeUnion.l().getDiscriminator());\012                EXPECT_EQ(1, safeUnion.l().a());\012 }));\012 }));\012},TEST_F(HidlTest, SafeUnionNestedTest) {\012 SmallSafeUnion smallSafeUnion;\012    smallSafeUnion.a(1);\012\012    EXPECT_OK(safeunionInterface-&gt;newLargeSafeUnion([&amp;](const LargeSafeUnion&amp; safeUnion) {\012        EXPECT_OK(safeunionInterface-&gt;setL(\012            safeUnion, smallSafeUnion, [&amp;](const LargeSafeUnion&amp; safeUnion) {\012                EXPECT_EQ(LargeSafeUnion::hidl_discriminator::l, safeUnion.getDiscriminator());\012\012                EXPECT_EQ(SmallSafeUnion::hidl_discriminator::a, safeUnion.l().getDiscriminator());\012                EXPECT_EQ(1, safeUnion.l().a());\012 }));\012 }));\012})<SUB>690</SUB>> ]
-"447" [label = <(UNKNOWN,TEST_F(HidlTest, SafeUnionInterfaceNullHandleTest) {\012 InterfaceTypeSafeUnion safeUnion;\012\012    EXPECT_OK(safeunionInterface-&gt;setInterfaceF(\012        safeUnion, hidl_handle(nullptr), [&amp;](const InterfaceTypeSafeUnion&amp; safeUnion) {\012            EXPECT_EQ(InterfaceTypeSafeUnion::hidl_discriminator::f,\012                      safeUnion.getDiscriminator());\012\012            checkNativeHandlesDataEquality(nullptr, safeUnion.f().getNativeHandle());\012 }));\012},TEST_F(HidlTest, SafeUnionInterfaceNullHandleTest) {\012 InterfaceTypeSafeUnion safeUnion;\012\012    EXPECT_OK(safeunionInterface-&gt;setInterfaceF(\012        safeUnion, hidl_handle(nullptr), [&amp;](const InterfaceTypeSafeUnion&amp; safeUnion) {\012            EXPECT_EQ(InterfaceTypeSafeUnion::hidl_discriminator::f,\012                      safeUnion.getDiscriminator());\012\012            checkNativeHandlesDataEquality(nullptr, safeUnion.f().getNativeHandle());\012 }));\012})<SUB>723</SUB>> ]
-"448" [label = <(UNKNOWN,TEST_F(HidlTest, SafeUnionInterfaceTest) {\012 const std::array&lt;int8_t, 7&gt; testArray{-1, -2, -3, 0, 1, 2, 3};\012 const hidl_vec&lt;hidl_string&gt; testVector{&quot;So&quot;, &quot;Many&quot;, &quot;Words&quot;};\012 const std::string testStringA = &quot;Hello&quot;;\012 const std::string testStringB = &quot;World&quot;;\012\012 const std::array&lt;int, 6&gt; testHandleData{2, -32, 10, -4329454, 11, 24};\012 native_handle_t* h = native_handle_create(0, testHandleData.size());\012    CHECK(sizeof(testHandleData) == testHandleData.size() * sizeof(int));\012    std::memcpy(h-&gt;data, testHandleData.data(), sizeof(testHandleData));\012\012    std::vector&lt;hidl_handle&gt; testHandlesVector(256);\012 for (size_t i = 0; i &lt; testHandlesVector.size(); i++) {\012        testHandlesVector[i].setTo(native_handle_clone(h), true /* shouldOwn */);\012 }\012\012    EXPECT_OK(\012        safeunionInterface-&gt;newInterfaceTypeSafeUnion([&amp;](const InterfaceTypeSafeUnion&amp; safeUnion) {\012            EXPECT_EQ(InterfaceTypeSafeUnion::hidl_discriminator::noinit,\012                      safeUnion.getDiscriminator());\012\012            EXPECT_OK(safeunionInterface-&gt;setInterfaceB(\012                safeUnion, testArray, [&amp;](const InterfaceTypeSafeUnion&amp; safeUnion) {\012                    EXPECT_EQ(InterfaceTypeSafeUnion::hidl_discriminator::b,\012                              safeUnion.getDiscriminator());\012\012 for (size_t i = 0; i &lt; testArray.size(); i++) {\012                        EXPECT_EQ(testArray[i], safeUnion.b()[i]);\012 }\012 }));\012\012            EXPECT_OK(safeunionInterface-&gt;setInterfaceD(\012                safeUnion, testStringA, [&amp;](const InterfaceTypeSafeUnion&amp; safeUnion) {\012                    EXPECT_EQ(InterfaceTypeSafeUnion::hidl_discriminator::d,\012                              safeUnion.getDiscriminator());\012                    EXPECT_EQ(testStringA, safeUnion.d());\012 }));\012\012            EXPECT_OK(safeunionInterface-&gt;setInterfaceE(\012                safeUnion, testVector, [&amp;](const InterfaceTypeSafeUnion&amp; safeUnion) {\012                    EXPECT_EQ(InterfaceTypeSafeUnion::hidl_discriminator::e,\012                              safeUnion.getDiscriminator());\012                    EXPECT_EQ(testVector, safeUnion.e());\012 }));\012\012            EXPECT_OK(safeunionInterface-&gt;setInterfaceF(\012                safeUnion, hidl_handle(h), [&amp;](const InterfaceTypeSafeUnion&amp; safeUnion) {\012                    EXPECT_EQ(InterfaceTypeSafeUnion::hidl_discriminator::f,\012                              safeUnion.getDiscriminator());\012\012 const native_handle_t* result = safeUnion.f().getNativeHandle();\012                    checkNativeHandlesDataEquality(h, result);\012 }));\012\012            EXPECT_OK(safeunionInterface-&gt;setInterfaceG(\012                safeUnion, testHandlesVector, [&amp;](const InterfaceTypeSafeUnion&amp; safeUnion) {\012                    EXPECT_EQ(InterfaceTypeSafeUnion::hidl_discriminator::g,\012                              safeUnion.getDiscriminator());\012\012 for (size_t i = 0; i &lt; testHandlesVector.size(); i++) {\012                        checkNativeHandlesDataEquality(h, safeUnion.g()[i].getNativeHandle());\012 }\012 }));\012 }));\012\012 // Same-process interface calls are not supported in Java, so we use\012 // a safe_union instance bound to this (client) process instead of\012 // safeunionInterface to exercise this test-case. Ref: b/110957763.\012 InterfaceTypeSafeUnion safeUnion;\012    safeUnion.c(otherInterface);\012\012    EXPECT_EQ(InterfaceTypeSafeUnion::hidl_discriminator::c, safeUnion.getDiscriminator());\012    EXPECT_OK(safeUnion.c()-&gt;concatTwoStrings(\012        hidl_string(testStringA), hidl_string(testStringB), [&amp;](const hidl_string&amp; result) {\012            EXPECT_EQ(testStringA + testStringB, std::string(result));\012 }));\012\012    native_handle_delete(h);\012},TEST_F(HidlTest, SafeUnionInterfaceTest) {\012 const std::array&lt;int8_t, 7&gt; testArray{-1, -2, -3, 0, 1, 2, 3};\012 const hidl_vec&lt;hidl_string&gt; testVector{&quot;So&quot;, &quot;Many&quot;, &quot;Words&quot;};\012 const std::string testStringA = &quot;Hello&quot;;\012 const std::string testStringB = &quot;World&quot;;\012\012 const std::array&lt;int, 6&gt; testHandleData{2, -32, 10, -4329454, 11, 24};\012 native_handle_t* h = native_handle_create(0, testHandleData.size());\012    CHECK(sizeof(testHandleData) == testHandleData.size() * sizeof(int));\012    std::memcpy(h-&gt;data, testHandleData.data(), sizeof(testHandleData));\012\012    std::vector&lt;hidl_handle&gt; testHandlesVector(256);\012 for (size_t i = 0; i &lt; testHandlesVector.size(); i++) {\012        testHandlesVector[i].setTo(native_handle_clone(h), true /* shouldOwn */);\012 }\012\012    EXPECT_OK(\012        safeunionInterface-&gt;newInterfaceTypeSafeUnion([&amp;](const InterfaceTypeSafeUnion&amp; safeUnion) {\012            EXPECT_EQ(InterfaceTypeSafeUnion::hidl_discriminator::noinit,\012                      safeUnion.getDiscriminator());\012\012            EXPECT_OK(safeunionInterface-&gt;setInterfaceB(\012                safeUnion, testArray, [&amp;](const InterfaceTypeSafeUnion&amp; safeUnion) {\012                    EXPECT_EQ(InterfaceTypeSafeUnion::hidl_discriminator::b,\012                              safeUnion.getDiscriminator());\012\012 for (size_t i = 0; i &lt; testArray.size(); i++) {\012                        EXPECT_EQ(testArray[i], safeUnion.b()[i]);\012 }\012 }));\012\012            EXPECT_OK(safeunionInterface-&gt;setInterfaceD(\012                safeUnion, testStringA, [&amp;](const InterfaceTypeSafeUnion&amp; safeUnion) {\012                    EXPECT_EQ(InterfaceTypeSafeUnion::hidl_discriminator::d,\012                              safeUnion.getDiscriminator());\012                    EXPECT_EQ(testStringA, safeUnion.d());\012 }));\012\012            EXPECT_OK(safeunionInterface-&gt;setInterfaceE(\012                safeUnion, testVector, [&amp;](const InterfaceTypeSafeUnion&amp; safeUnion) {\012                    EXPECT_EQ(InterfaceTypeSafeUnion::hidl_discriminator::e,\012                              safeUnion.getDiscriminator());\012                    EXPECT_EQ(testVector, safeUnion.e());\012 }));\012\012            EXPECT_OK(safeunionInterface-&gt;setInterfaceF(\012                safeUnion, hidl_handle(h), [&amp;](const InterfaceTypeSafeUnion&amp; safeUnion) {\012                    EXPECT_EQ(InterfaceTypeSafeUnion::hidl_discriminator::f,\012                              safeUnion.getDiscriminator());\012\012 const native_handle_t* result = safeUnion.f().getNativeHandle();\012                    checkNativeHandlesDataEquality(h, result);\012 }));\012\012            EXPECT_OK(safeunionInterface-&gt;setInterfaceG(\012                safeUnion, testHandlesVector, [&amp;](const InterfaceTypeSafeUnion&amp; safeUnion) {\012                    EXPECT_EQ(InterfaceTypeSafeUnion::hidl_discriminator::g,\012                              safeUnion.getDiscriminator());\012\012 for (size_t i = 0; i &lt; testHandlesVector.size(); i++) {\012                        checkNativeHandlesDataEquality(h, safeUnion.g()[i].getNativeHandle());\012 }\012 }));\012 }));\012\012 // Same-process interface calls are not supported in Java, so we use\012 // a safe_union instance bound to this (client) process instead of\012 // safeunionInterface to exercise this test-case. Ref: b/110957763.\012 InterfaceTypeSafeUnion safeUnion;\012    safeUnion.c(otherInterface);\012\012    EXPECT_EQ(InterfaceTypeSafeUnion::hidl_discriminator::c, safeUnion.getDiscriminator());\012    EXPECT_OK(safeUnion.c()-&gt;concatTwoStrings(\012        hidl_string(testStringA), hidl_string(testStringB), [&amp;](const hidl_string&amp; result) {\012            EXPECT_EQ(testStringA + testStringB, std::string(result));\012 }));\012\012    native_handle_delete(h);\012})<SUB>735</SUB>> ]
-"449" [label = <(UNKNOWN,TEST_F(HidlTest, SafeUnionNullHandleTest) {\012 HandleTypeSafeUnion safeUnion;\012\012    EXPECT_OK(safeunionInterface-&gt;setHandleA(\012        safeUnion, hidl_handle(nullptr), [&amp;](const HandleTypeSafeUnion&amp; safeUnion) {\012            EXPECT_EQ(HandleTypeSafeUnion::hidl_discriminator::a,\012                      safeUnion.getDiscriminator());\012\012            checkNativeHandlesDataEquality(nullptr, safeUnion.a().getNativeHandle());\012 }));\012},TEST_F(HidlTest, SafeUnionNullHandleTest) {\012 HandleTypeSafeUnion safeUnion;\012\012    EXPECT_OK(safeunionInterface-&gt;setHandleA(\012        safeUnion, hidl_handle(nullptr), [&amp;](const HandleTypeSafeUnion&amp; safeUnion) {\012            EXPECT_EQ(HandleTypeSafeUnion::hidl_discriminator::a,\012                      safeUnion.getDiscriminator());\012\012            checkNativeHandlesDataEquality(nullptr, safeUnion.a().getNativeHandle());\012 }));\012})<SUB>815</SUB>> ]
-"450" [label = <(UNKNOWN,TEST_F(HidlTest, SafeUnionSimpleHandleTest) {\012 const std::array&lt;int, 6&gt; testData{2, -32, 10, -4329454, 11, 24};\012 native_handle_t* h = native_handle_create(0, testData.size());\012    ASSERT_EQ(sizeof(testData), testData.size() * sizeof(int));\012    std::memcpy(h-&gt;data, testData.data(), sizeof(testData));\012\012    std::array&lt;hidl_handle, 5&gt; testArray;\012 for (size_t i = 0; i &lt; testArray.size(); i++) {\012        testArray[i].setTo(native_handle_clone(h), true /* shouldOwn */);\012 }\012\012    std::vector&lt;hidl_handle&gt; testVector(256);\012 for (size_t i = 0; i &lt; testVector.size(); i++) {\012        testVector[i].setTo(native_handle_clone(h), true /* shouldOwn */);\012 }\012\012    EXPECT_OK(\012        safeunionInterface-&gt;newHandleTypeSafeUnion([&amp;](const HandleTypeSafeUnion&amp; safeUnion) {\012            EXPECT_OK(safeunionInterface-&gt;setHandleA(\012                safeUnion, hidl_handle(h), [&amp;](const HandleTypeSafeUnion&amp; safeUnion) {\012                    EXPECT_EQ(HandleTypeSafeUnion::hidl_discriminator::a,\012                              safeUnion.getDiscriminator());\012\012                    checkNativeHandlesDataEquality(h, safeUnion.a().getNativeHandle());\012 }));\012\012            EXPECT_OK(safeunionInterface-&gt;setHandleB(\012                safeUnion, testArray, [&amp;](const HandleTypeSafeUnion&amp; safeUnion) {\012                    EXPECT_EQ(HandleTypeSafeUnion::hidl_discriminator::b,\012                              safeUnion.getDiscriminator());\012\012 for (size_t i = 0; i &lt; testArray.size(); i++) {\012                        checkNativeHandlesDataEquality(h, safeUnion.b()[i].getNativeHandle());\012 }\012 }));\012\012            EXPECT_OK(safeunionInterface-&gt;setHandleC(\012                safeUnion, testVector, [&amp;](const HandleTypeSafeUnion&amp; safeUnion) {\012                    EXPECT_EQ(HandleTypeSafeUnion::hidl_discriminator::c,\012                              safeUnion.getDiscriminator());\012\012 for (size_t i = 0; i &lt; testVector.size(); i++) {\012                        checkNativeHandlesDataEquality(h, safeUnion.c()[i].getNativeHandle());\012 }\012 }));\012 }));\012\012    native_handle_delete(h);\012},TEST_F(HidlTest, SafeUnionSimpleHandleTest) {\012 const std::array&lt;int, 6&gt; testData{2, -32, 10, -4329454, 11, 24};\012 native_handle_t* h = native_handle_create(0, testData.size());\012    ASSERT_EQ(sizeof(testData), testData.size() * sizeof(int));\012    std::memcpy(h-&gt;data, testData.data(), sizeof(testData));\012\012    std::array&lt;hidl_handle, 5&gt; testArray;\012 for (size_t i = 0; i &lt; testArray.size(); i++) {\012        testArray[i].setTo(native_handle_clone(h), true /* shouldOwn */);\012 }\012\012    std::vector&lt;hidl_handle&gt; testVector(256);\012 for (size_t i = 0; i &lt; testVector.size(); i++) {\012        testVector[i].setTo(native_handle_clone(h), true /* shouldOwn */);\012 }\012\012    EXPECT_OK(\012        safeunionInterface-&gt;newHandleTypeSafeUnion([&amp;](const HandleTypeSafeUnion&amp; safeUnion) {\012            EXPECT_OK(safeunionInterface-&gt;setHandleA(\012                safeUnion, hidl_handle(h), [&amp;](const HandleTypeSafeUnion&amp; safeUnion) {\012                    EXPECT_EQ(HandleTypeSafeUnion::hidl_discriminator::a,\012                              safeUnion.getDiscriminator());\012\012                    checkNativeHandlesDataEquality(h, safeUnion.a().getNativeHandle());\012 }));\012\012            EXPECT_OK(safeunionInterface-&gt;setHandleB(\012                safeUnion, testArray, [&amp;](const HandleTypeSafeUnion&amp; safeUnion) {\012                    EXPECT_EQ(HandleTypeSafeUnion::hidl_discriminator::b,\012                              safeUnion.getDiscriminator());\012\012 for (size_t i = 0; i &lt; testArray.size(); i++) {\012                        checkNativeHandlesDataEquality(h, safeUnion.b()[i].getNativeHandle());\012 }\012 }));\012\012            EXPECT_OK(safeunionInterface-&gt;setHandleC(\012                safeUnion, testVector, [&amp;](const HandleTypeSafeUnion&amp; safeUnion) {\012                    EXPECT_EQ(HandleTypeSafeUnion::hidl_discriminator::c,\012                              safeUnion.getDiscriminator());\012\012 for (size_t i = 0; i &lt; testVector.size(); i++) {\012                        checkNativeHandlesDataEquality(h, safeUnion.c()[i].getNativeHandle());\012 }\012 }));\012 }));\012\012    native_handle_delete(h);\012})<SUB>827</SUB>> ]
-"451" [label = <(UNKNOWN,TEST_F(HidlTest, SafeUnionVecOfHandlesWithOneFdTest) {\012 const std::vector&lt;std::string&gt; testStrings{&quot;This &quot;, &quot;is &quot;, &quot;so &quot;, &quot;much &quot;, &quot;data!\n&quot;};\012 const std::string testFileName = &quot;/data/local/tmp/SafeUnionVecOfHandlesWithOneFdTest&quot;;\012 const std::array&lt;int, 6&gt; testData{2, -32, 10, -4329454, 11, 24};\012    ASSERT_EQ(sizeof(testData), testData.size() * sizeof(int));\012\012 const std::string goldenResult = std::accumulate(testStrings.begin(),\012                                                     testStrings.end(),\012                                                     std::string());\012\012 int fd = open(testFileName.c_str(), (O_RDWR | O_TRUNC | O_CREAT), (S_IRUSR | S_IWUSR));\012    ASSERT_TRUE(fd &gt;= 0);\012\012    native_handle* h = native_handle_create(1 /* numFds */, testData.size() /* numInts */);\012    std::memcpy(&amp;(h-&gt;data[1]), testData.data(), sizeof(testData));\012    h-&gt;data[0] = fd;\012\012    hidl_vec&lt;hidl_handle&gt; testHandles(testStrings.size());\012 for (size_t i = 0; i &lt; testHandles.size(); i++) {\012        testHandles[i].setTo(native_handle_clone(h), true /* shouldOwn */);\012 }\012\012    EXPECT_OK(\012        safeunionInterface-&gt;newHandleTypeSafeUnion([&amp;](const HandleTypeSafeUnion&amp; safeUnion) {\012            EXPECT_OK(safeunionInterface-&gt;setHandleC(\012                safeUnion, testHandles, [&amp;](const HandleTypeSafeUnion&amp; safeUnion) {\012                    EXPECT_EQ(HandleTypeSafeUnion::hidl_discriminator::c,\012                              safeUnion.getDiscriminator());\012\012 for (size_t i = 0; i &lt; safeUnion.c().size(); i++) {\012 const native_handle_t* reference = testHandles[i].getNativeHandle();\012 const native_handle_t* result = safeUnion.c()[i].getNativeHandle();\012                        checkNativeHandlesDataEquality(reference, result);\012\012 // Original FDs should be dup'd\012 int resultFd = result-&gt;data[0];\012                        EXPECT_NE(reference-&gt;data[0], resultFd);\012\012                        EXPECT_TRUE(android::base::WriteStringToFd(testStrings[i], resultFd));\012                        EXPECT_EQ(0, fsync(resultFd));\012 }\012 }));\012 }));\012\012    std::string result;\012    lseek(fd, 0, SEEK_SET);\012\012    EXPECT_TRUE(android::base::ReadFdToString(fd, &amp;result));\012    EXPECT_EQ(goldenResult, result);\012\012    native_handle_delete(h);\012    EXPECT_EQ(0, close(fd));\012    EXPECT_EQ(0, remove(testFileName.c_str()));\012},TEST_F(HidlTest, SafeUnionVecOfHandlesWithOneFdTest) {\012 const std::vector&lt;std::string&gt; testStrings{&quot;This &quot;, &quot;is &quot;, &quot;so &quot;, &quot;much &quot;, &quot;data!\n&quot;};\012 const std::string testFileName = &quot;/data/local/tmp/SafeUnionVecOfHandlesWithOneFdTest&quot;;\012 const std::array&lt;int, 6&gt; testData{2, -32, 10, -4329454, 11, 24};\012    ASSERT_EQ(sizeof(testData), testData.size() * sizeof(int));\012\012 const std::string goldenResult = std::accumulate(testStrings.begin(),\012                                                     testStrings.end(),\012                                                     std::string());\012\012 int fd = open(testFileName.c_str(), (O_RDWR | O_TRUNC | O_CREAT), (S_IRUSR | S_IWUSR));\012    ASSERT_TRUE(fd &gt;= 0);\012\012    native_handle* h = native_handle_create(1 /* numFds */, testData.size() /* numInts */);\012    std::memcpy(&amp;(h-&gt;data[1]), testData.data(), sizeof(testData));\012    h-&gt;data[0] = fd;\012\012    hidl_vec&lt;hidl_handle&gt; testHandles(testStrings.size());\012 for (size_t i = 0; i &lt; testHandles.size(); i++) {\012        testHandles[i].setTo(native_handle_clone(h), true /* shouldOwn */);\012 }\012\012    EXPECT_OK(\012        safeunionInterface-&gt;newHandleTypeSafeUnion([&amp;](const HandleTypeSafeUnion&amp; safeUnion) {\012            EXPECT_OK(safeunionInterface-&gt;setHandleC(\012                safeUnion, testHandles, [&amp;](const HandleTypeSafeUnion&amp; safeUnion) {\012                    EXPECT_EQ(HandleTypeSafeUnion::hidl_discriminator::c,\012                              safeUnion.getDiscriminator());\012\012 for (size_t i = 0; i &lt; safeUnion.c().size(); i++) {\012 const native_handle_t* reference = testHandles[i].getNativeHandle();\012 const native_handle_t* result = safeUnion.c()[i].getNativeHandle();\012                        checkNativeHandlesDataEquality(reference, result);\012\012 // Original FDs should be dup'd\012 int resultFd = result-&gt;data[0];\012                        EXPECT_NE(reference-&gt;data[0], resultFd);\012\012                        EXPECT_TRUE(android::base::WriteStringToFd(testStrings[i], resultFd));\012                        EXPECT_EQ(0, fsync(resultFd));\012 }\012 }));\012 }));\012\012    std::string result;\012    lseek(fd, 0, SEEK_SET);\012\012    EXPECT_TRUE(android::base::ReadFdToString(fd, &amp;result));\012    EXPECT_EQ(goldenResult, result);\012\012    native_handle_delete(h);\012    EXPECT_EQ(0, close(fd));\012    EXPECT_EQ(0, remove(testFileName.c_str()));\012})<SUB>877</SUB>> ]
-"452" [label = <(UNKNOWN,TEST_F(HidlTest, SafeUnionHandleWithMultipleFdsTest) {\012 const std::vector&lt;std::string&gt; testStrings{&quot;This &quot;, &quot;is &quot;, &quot;so &quot;, &quot;much &quot;, &quot;data!\n&quot;};\012 const std::string testFileName = &quot;/data/local/tmp/SafeUnionHandleWithMultipleFdsTest&quot;;\012 const std::array&lt;int, 6&gt; testData{2, -32, 10, -4329454, 11, 24};\012    ASSERT_EQ(sizeof(testData), testData.size() * sizeof(int));\012\012 const std::string goldenResult = std::accumulate(testStrings.begin(),\012                                                     testStrings.end(),\012                                                     std::string());\012\012 int fd = open(testFileName.c_str(), (O_RDWR | O_TRUNC | O_CREAT), (S_IRUSR | S_IWUSR));\012    ASSERT_TRUE(fd &gt;= 0);\012\012 const int numFds = testStrings.size();\012    native_handle* h = native_handle_create(numFds, testData.size() /* numInts */);\012    std::memcpy(&amp;(h-&gt;data[numFds]), testData.data(), sizeof(testData));\012 for (size_t i = 0; i &lt; numFds; i++) {\012        h-&gt;data[i] = fd;\012 }\012\012    hidl_handle testHandle;\012    testHandle.setTo(h, false /* shouldOwn */);\012\012    EXPECT_OK(\012        safeunionInterface-&gt;newHandleTypeSafeUnion([&amp;](const HandleTypeSafeUnion&amp; safeUnion) {\012            EXPECT_OK(safeunionInterface-&gt;setHandleA(\012                safeUnion, testHandle, [&amp;](const HandleTypeSafeUnion&amp; safeUnion) {\012                    EXPECT_EQ(HandleTypeSafeUnion::hidl_discriminator::a,\012                              safeUnion.getDiscriminator());\012\012 const native_handle_t* result = safeUnion.a().getNativeHandle();\012                    checkNativeHandlesDataEquality(h, result);\012\012 for (size_t i = 0; i &lt; result-&gt;numFds; i++) {\012 // Original FDs should be dup'd\012 int resultFd = result-&gt;data[i];\012                        EXPECT_NE(h-&gt;data[i], resultFd);\012\012                        EXPECT_TRUE(android::base::WriteStringToFd(testStrings[i], resultFd));\012                        EXPECT_EQ(0, fsync(resultFd));\012 }\012 }));\012 }));\012\012    std::string result;\012    lseek(fd, 0, SEEK_SET);\012\012    EXPECT_TRUE(android::base::ReadFdToString(fd, &amp;result));\012    EXPECT_EQ(goldenResult, result);\012\012    native_handle_delete(h);\012    EXPECT_EQ(0, close(fd));\012    EXPECT_EQ(0, remove(testFileName.c_str()));\012},TEST_F(HidlTest, SafeUnionHandleWithMultipleFdsTest) {\012 const std::vector&lt;std::string&gt; testStrings{&quot;This &quot;, &quot;is &quot;, &quot;so &quot;, &quot;much &quot;, &quot;data!\n&quot;};\012 const std::string testFileName = &quot;/data/local/tmp/SafeUnionHandleWithMultipleFdsTest&quot;;\012 const std::array&lt;int, 6&gt; testData{2, -32, 10, -4329454, 11, 24};\012    ASSERT_EQ(sizeof(testData), testData.size() * sizeof(int));\012\012 const std::string goldenResult = std::accumulate(testStrings.begin(),\012                                                     testStrings.end(),\012                                                     std::string());\012\012 int fd = open(testFileName.c_str(), (O_RDWR | O_TRUNC | O_CREAT), (S_IRUSR | S_IWUSR));\012    ASSERT_TRUE(fd &gt;= 0);\012\012 const int numFds = testStrings.size();\012    native_handle* h = native_handle_create(numFds, testData.size() /* numInts */);\012    std::memcpy(&amp;(h-&gt;data[numFds]), testData.data(), sizeof(testData));\012 for (size_t i = 0; i &lt; numFds; i++) {\012        h-&gt;data[i] = fd;\012 }\012\012    hidl_handle testHandle;\012    testHandle.setTo(h, false /* shouldOwn */);\012\012    EXPECT_OK(\012        safeunionInterface-&gt;newHandleTypeSafeUnion([&amp;](const HandleTypeSafeUnion&amp; safeUnion) {\012            EXPECT_OK(safeunionInterface-&gt;setHandleA(\012                safeUnion, testHandle, [&amp;](const HandleTypeSafeUnion&amp; safeUnion) {\012                    EXPECT_EQ(HandleTypeSafeUnion::hidl_discriminator::a,\012                              safeUnion.getDiscriminator());\012\012 const native_handle_t* result = safeUnion.a().getNativeHandle();\012                    checkNativeHandlesDataEquality(h, result);\012\012 for (size_t i = 0; i &lt; result-&gt;numFds; i++) {\012 // Original FDs should be dup'd\012 int resultFd = result-&gt;data[i];\012                        EXPECT_NE(h-&gt;data[i], resultFd);\012\012                        EXPECT_TRUE(android::base::WriteStringToFd(testStrings[i], resultFd));\012                        EXPECT_EQ(0, fsync(resultFd));\012 }\012 }));\012 }));\012\012    std::string result;\012    lseek(fd, 0, SEEK_SET);\012\012    EXPECT_TRUE(android::base::ReadFdToString(fd, &amp;result));\012    EXPECT_EQ(goldenResult, result);\012\012    native_handle_delete(h);\012    EXPECT_EQ(0, close(fd));\012    EXPECT_EQ(0, remove(testFileName.c_str()));\012})<SUB>932</SUB>> ]
-"453" [label = <(UNKNOWN,TEST_F(HidlTest, SafeUnionEqualityTest) {\012    EXPECT_OK(safeunionInterface-&gt;newLargeSafeUnion([&amp;](const LargeSafeUnion&amp; one) {\012        EXPECT_OK(safeunionInterface-&gt;newLargeSafeUnion([&amp;](const LargeSafeUnion&amp; two) {\012            EXPECT_TRUE(one == two);\012            EXPECT_FALSE(one != two);\012 }));\012\012        EXPECT_OK(safeunionInterface-&gt;setA(one, 1, [&amp;](const LargeSafeUnion&amp; one) {\012            EXPECT_OK(safeunionInterface-&gt;newLargeSafeUnion([&amp;](const LargeSafeUnion&amp; two) {\012                EXPECT_FALSE(one == two);\012                EXPECT_TRUE(one != two);\012 }));\012\012            EXPECT_OK(safeunionInterface-&gt;newLargeSafeUnion([&amp;](const LargeSafeUnion&amp; two) {\012                EXPECT_OK(safeunionInterface-&gt;setB(two, 1, [&amp;](const LargeSafeUnion&amp; two) {\012                    EXPECT_FALSE(one == two);\012                    EXPECT_TRUE(one != two);\012 }));\012 }));\012\012            EXPECT_OK(safeunionInterface-&gt;newLargeSafeUnion([&amp;](const LargeSafeUnion&amp; two) {\012                EXPECT_OK(safeunionInterface-&gt;setA(two, 2, [&amp;](const LargeSafeUnion&amp; two) {\012                    EXPECT_FALSE(one == two);\012                    EXPECT_TRUE(one != two);\012 }));\012 }));\012\012            EXPECT_OK(safeunionInterface-&gt;newLargeSafeUnion([&amp;](const LargeSafeUnion&amp; two) {\012                EXPECT_OK(safeunionInterface-&gt;setA(two, 1, [&amp;](const LargeSafeUnion&amp; two) {\012                    EXPECT_TRUE(one == two);\012                    EXPECT_FALSE(one != two);\012 }));\012 }));\012 }));\012 }));\012},TEST_F(HidlTest, SafeUnionEqualityTest) {\012    EXPECT_OK(safeunionInterface-&gt;newLargeSafeUnion([&amp;](const LargeSafeUnion&amp; one) {\012        EXPECT_OK(safeunionInterface-&gt;newLargeSafeUnion([&amp;](const LargeSafeUnion&amp; two) {\012            EXPECT_TRUE(one == two);\012            EXPECT_FALSE(one != two);\012 }));\012\012        EXPECT_OK(safeunionInterface-&gt;setA(one, 1, [&amp;](const LargeSafeUnion&amp; one) {\012            EXPECT_OK(safeunionInterface-&gt;newLargeSafeUnion([&amp;](const LargeSafeUnion&amp; two) {\012                EXPECT_FALSE(one == two);\012                EXPECT_TRUE(one != two);\012 }));\012\012            EXPECT_OK(safeunionInterface-&gt;newLargeSafeUnion([&amp;](const LargeSafeUnion&amp; two) {\012                EXPECT_OK(safeunionInterface-&gt;setB(two, 1, [&amp;](const LargeSafeUnion&amp; two) {\012                    EXPECT_FALSE(one == two);\012                    EXPECT_TRUE(one != two);\012 }));\012 }));\012\012            EXPECT_OK(safeunionInterface-&gt;newLargeSafeUnion([&amp;](const LargeSafeUnion&amp; two) {\012                EXPECT_OK(safeunionInterface-&gt;setA(two, 2, [&amp;](const LargeSafeUnion&amp; two) {\012                    EXPECT_FALSE(one == two);\012                    EXPECT_TRUE(one != two);\012 }));\012 }));\012\012            EXPECT_OK(safeunionInterface-&gt;newLargeSafeUnion([&amp;](const LargeSafeUnion&amp; two) {\012                EXPECT_OK(safeunionInterface-&gt;setA(two, 1, [&amp;](const LargeSafeUnion&amp; two) {\012                    EXPECT_TRUE(one == two);\012                    EXPECT_FALSE(one != two);\012 }));\012 }));\012 }));\012 }));\012})<SUB>987</SUB>> ]
+"228" [label = <(UNKNOWN,TEST_F(HidlTest, SomeOtherBaseMethodInvalidString) {\012 IBase::Foo foo {\012 .y = {\012 .s = &quot;\xff&quot;,\012 }\012 };\012\012 auto ret = baz-&gt;someOtherBaseMethod(foo, [&amp;](const auto&amp;) {\012        ADD_FAILURE() &lt;&lt; &quot;Should not accept invalid UTF-8 String&quot;;\012 });\012\012    EXPECT_FALSE(ret.isOk());\012\012    EXPECT_OK(baz-&gt;ping());\012},TEST_F(HidlTest, SomeOtherBaseMethodInvalidString) {\012 IBase::Foo foo {\012 .y = {\012 .s = &quot;\xff&quot;,\012 }\012 };\012\012 auto ret = baz-&gt;someOtherBaseMethod(foo, [&amp;](const auto&amp;) {\012        ADD_FAILURE() &lt;&lt; &quot;Should not accept invalid UTF-8 String&quot;;\012 });\012\012    EXPECT_FALSE(ret.isOk());\012\012    EXPECT_OK(baz-&gt;ping());\012})<SUB>174</SUB>> ]
+"229" [label = <(UNKNOWN,TEST_F(HidlTest, BazSomeMethodWithFooArraysTest) {\012    hidl_array&lt;IBase::Foo, 2&gt; foo;\012\012    foo[0].x = 1;\012    foo[0].y.z = 2.5;\012    foo[0].y.s = &quot;Hello, world&quot;;\012\012    foo[0].aaa.resize(5);\012 for (size_t i = 0; i &lt; foo[0].aaa.size(); ++i) {\012        foo[0].aaa[i].z = 1.0f + (float)i * 0.01f;\012        foo[0].aaa[i].s = (&quot;Hello, world &quot; + std::to_string(i)).c_str();\012 }\012\012    foo[1].x = 2;\012    foo[1].y.z = -2.5;\012    foo[1].y.s = &quot;Morituri te salutant&quot;;\012\012    foo[1].aaa.resize(3);\012 for (size_t i = 0; i &lt; foo[1].aaa.size(); ++i) {\012        foo[1].aaa[i].z = 2.0f - (float)i * 0.01f;\012        foo[1].aaa[i].s = (&quot;Alea iacta est: &quot; + std::to_string(i)).c_str();\012 }\012\012    hidl_array&lt;IBaz::Foo, 2&gt; fooExpectedOutput;\012    fooExpectedOutput[0] = foo[1];\012    fooExpectedOutput[1] = foo[0];\012\012    EXPECT_OK(\012            baz-&gt;someMethodWithFooArrays(\012                foo,\012 [&amp;](const auto &amp;result) {\012                    EXPECT_EQ(result, fooExpectedOutput);\012 }));\012},TEST_F(HidlTest, BazSomeMethodWithFooArraysTest) {\012    hidl_array&lt;IBase::Foo, 2&gt; foo;\012\012    foo[0].x = 1;\012    foo[0].y.z = 2.5;\012    foo[0].y.s = &quot;Hello, world&quot;;\012\012    foo[0].aaa.resize(5);\012 for (size_t i = 0; i &lt; foo[0].aaa.size(); ++i) {\012        foo[0].aaa[i].z = 1.0f + (float)i * 0.01f;\012        foo[0].aaa[i].s = (&quot;Hello, world &quot; + std::to_string(i)).c_str();\012 }\012\012    foo[1].x = 2;\012    foo[1].y.z = -2.5;\012    foo[1].y.s = &quot;Morituri te salutant&quot;;\012\012    foo[1].aaa.resize(3);\012 for (size_t i = 0; i &lt; foo[1].aaa.size(); ++i) {\012        foo[1].aaa[i].z = 2.0f - (float)i * 0.01f;\012        foo[1].aaa[i].s = (&quot;Alea iacta est: &quot; + std::to_string(i)).c_str();\012 }\012\012    hidl_array&lt;IBaz::Foo, 2&gt; fooExpectedOutput;\012    fooExpectedOutput[0] = foo[1];\012    fooExpectedOutput[1] = foo[0];\012\012    EXPECT_OK(\012            baz-&gt;someMethodWithFooArrays(\012                foo,\012 [&amp;](const auto &amp;result) {\012                    EXPECT_EQ(result, fooExpectedOutput);\012 }));\012})<SUB>190</SUB>> ]
+"230" [label = <(UNKNOWN,TEST_F(HidlTest, BazSomeMethodWithFooVectorsTest) {\012    hidl_vec&lt;IBase::Foo&gt; foo;\012    foo.resize(2);\012\012    foo[0].x = 1;\012    foo[0].y.z = 2.5;\012    foo[0].y.s = &quot;Hello, world&quot;;\012\012    foo[0].aaa.resize(5);\012 for (size_t i = 0; i &lt; foo[0].aaa.size(); ++i) {\012        foo[0].aaa[i].z = 1.0f + (float)i * 0.01f;\012        foo[0].aaa[i].s = (&quot;Hello, world &quot; + std::to_string(i)).c_str();\012 }\012\012    foo[1].x = 2;\012    foo[1].y.z = -2.5;\012    foo[1].y.s = &quot;Morituri te salutant&quot;;\012\012    foo[1].aaa.resize(3);\012 for (size_t i = 0; i &lt; foo[1].aaa.size(); ++i) {\012        foo[1].aaa[i].z = 2.0f - (float)i * 0.01f;\012        foo[1].aaa[i].s = (&quot;Alea iacta est: &quot; + std::to_string(i)).c_str();\012 }\012\012    hidl_vec&lt;IBaz::Foo&gt; fooExpectedOutput;\012    fooExpectedOutput.resize(2);\012    fooExpectedOutput[0] = foo[1];\012    fooExpectedOutput[1] = foo[0];\012\012    EXPECT_OK(\012            baz-&gt;someMethodWithFooVectors(\012                foo,\012 [&amp;](const auto &amp;result) {\012                    EXPECT_EQ(result, fooExpectedOutput);\012 }));\012},TEST_F(HidlTest, BazSomeMethodWithFooVectorsTest) {\012    hidl_vec&lt;IBase::Foo&gt; foo;\012    foo.resize(2);\012\012    foo[0].x = 1;\012    foo[0].y.z = 2.5;\012    foo[0].y.s = &quot;Hello, world&quot;;\012\012    foo[0].aaa.resize(5);\012 for (size_t i = 0; i &lt; foo[0].aaa.size(); ++i) {\012        foo[0].aaa[i].z = 1.0f + (float)i * 0.01f;\012        foo[0].aaa[i].s = (&quot;Hello, world &quot; + std::to_string(i)).c_str();\012 }\012\012    foo[1].x = 2;\012    foo[1].y.z = -2.5;\012    foo[1].y.s = &quot;Morituri te salutant&quot;;\012\012    foo[1].aaa.resize(3);\012 for (size_t i = 0; i &lt; foo[1].aaa.size(); ++i) {\012        foo[1].aaa[i].z = 2.0f - (float)i * 0.01f;\012        foo[1].aaa[i].s = (&quot;Alea iacta est: &quot; + std::to_string(i)).c_str();\012 }\012\012    hidl_vec&lt;IBaz::Foo&gt; fooExpectedOutput;\012    fooExpectedOutput.resize(2);\012    fooExpectedOutput[0] = foo[1];\012    fooExpectedOutput[1] = foo[0];\012\012    EXPECT_OK(\012            baz-&gt;someMethodWithFooVectors(\012                foo,\012 [&amp;](const auto &amp;result) {\012                    EXPECT_EQ(result, fooExpectedOutput);\012 }));\012})<SUB>225</SUB>> ]
+"231" [label = <(UNKNOWN,TEST_F(HidlTest, BazSomeMethodWithVectorOfArray) {\012 IBase::VectorOfArray in, expectedOut;\012    in.addresses.resize(3);\012    expectedOut.addresses.resize(3);\012\012 size_t k = 0;\012 const size_t n = in.addresses.size();\012\012 for (size_t i = 0; i &lt; n; ++i) {\012 for (size_t j = 0; j &lt; 6; ++j, ++k) {\012            in.addresses[i][j] = k;\012            expectedOut.addresses[n - 1 - i][j] = k;\012 }\012 }\012\012    EXPECT_OK(\012            baz-&gt;someMethodWithVectorOfArray(\012                in,\012 [&amp;](const auto &amp;out) {\012                    EXPECT_EQ(expectedOut, out);\012 }));\012},TEST_F(HidlTest, BazSomeMethodWithVectorOfArray) {\012 IBase::VectorOfArray in, expectedOut;\012    in.addresses.resize(3);\012    expectedOut.addresses.resize(3);\012\012 size_t k = 0;\012 const size_t n = in.addresses.size();\012\012 for (size_t i = 0; i &lt; n; ++i) {\012 for (size_t j = 0; j &lt; 6; ++j, ++k) {\012            in.addresses[i][j] = k;\012            expectedOut.addresses[n - 1 - i][j] = k;\012 }\012 }\012\012    EXPECT_OK(\012            baz-&gt;someMethodWithVectorOfArray(\012                in,\012 [&amp;](const auto &amp;out) {\012                    EXPECT_EQ(expectedOut, out);\012 }));\012})<SUB>262</SUB>> ]
+"232" [label = <(UNKNOWN,TEST_F(HidlTest, BazSomeMethodTakingAVectorOfArray) {\012    hidl_vec&lt;hidl_array&lt;uint8_t, 6&gt; &gt; in, expectedOut;\012    in.resize(3);\012    expectedOut.resize(3);\012\012 size_t k = 0;\012 const size_t n = in.size();\012 for (size_t i = 0; i &lt; n; ++i) {\012 for (size_t j = 0; j &lt; 6; ++j, ++k) {\012            in[i][j] = k;\012            expectedOut[n - 1 - i][j] = k;\012 }\012 }\012\012    EXPECT_OK(\012            baz-&gt;someMethodTakingAVectorOfArray(\012                in,\012 [&amp;](const auto &amp;out) {\012                    EXPECT_EQ(expectedOut, out);\012 }));\012},TEST_F(HidlTest, BazSomeMethodTakingAVectorOfArray) {\012    hidl_vec&lt;hidl_array&lt;uint8_t, 6&gt; &gt; in, expectedOut;\012    in.resize(3);\012    expectedOut.resize(3);\012\012 size_t k = 0;\012 const size_t n = in.size();\012 for (size_t i = 0; i &lt; n; ++i) {\012 for (size_t j = 0; j &lt; 6; ++j, ++k) {\012            in[i][j] = k;\012            expectedOut[n - 1 - i][j] = k;\012 }\012 }\012\012    EXPECT_OK(\012            baz-&gt;someMethodTakingAVectorOfArray(\012                in,\012 [&amp;](const auto &amp;out) {\012                    EXPECT_EQ(expectedOut, out);\012 }));\012})<SUB>285</SUB>> ]
+"347" [label = <(UNKNOWN,TEST_F(HidlTest, BazTransposeTest) {\012 IBase::StringMatrix5x3 in;\012 IBase::StringMatrix3x5 expectedOut;\012\012 for (int i = 0; i &lt; 5; ++i) {\012 for (int j = 0; j &lt; 3; ++j) {\012            in.s[i][j] = expectedOut.s[j][i] = numberToEnglish(3 * i + j + 1).c_str();\012 }\012 }\012\012    EXPECT_OK(baz-&gt;transpose(\012                in,\012 [&amp;](const auto &amp;out) {\012                    EXPECT_EQ(expectedOut, out);\012 }));\012},TEST_F(HidlTest, BazTransposeTest) {\012 IBase::StringMatrix5x3 in;\012 IBase::StringMatrix3x5 expectedOut;\012\012 for (int i = 0; i &lt; 5; ++i) {\012 for (int j = 0; j &lt; 3; ++j) {\012            in.s[i][j] = expectedOut.s[j][i] = numberToEnglish(3 * i + j + 1).c_str();\012 }\012 }\012\012    EXPECT_OK(baz-&gt;transpose(\012                in,\012 [&amp;](const auto &amp;out) {\012                    EXPECT_EQ(expectedOut, out);\012 }));\012})<SUB>353</SUB>> ]
+"348" [label = <(UNKNOWN,TEST_F(HidlTest, BazTranspose2Test) {\012    hidl_array&lt;hidl_string, 5, 3&gt; in;\012    hidl_array&lt;hidl_string, 3, 5&gt; expectedOut;\012\012 for (int i = 0; i &lt; 5; ++i) {\012 for (int j = 0; j &lt; 3; ++j) {\012            in[i][j] = expectedOut[j][i] = numberToEnglish(3 * i + j + 1).c_str();\012 }\012 }\012\012    EXPECT_OK(baz-&gt;transpose2(\012                in,\012 [&amp;](const auto &amp;out) {\012                    EXPECT_EQ(expectedOut, out);\012 }));\012},TEST_F(HidlTest, BazTranspose2Test) {\012    hidl_array&lt;hidl_string, 5, 3&gt; in;\012    hidl_array&lt;hidl_string, 3, 5&gt; expectedOut;\012\012 for (int i = 0; i &lt; 5; ++i) {\012 for (int j = 0; j &lt; 3; ++j) {\012            in[i][j] = expectedOut[j][i] = numberToEnglish(3 * i + j + 1).c_str();\012 }\012 }\012\012    EXPECT_OK(baz-&gt;transpose2(\012                in,\012 [&amp;](const auto &amp;out) {\012                    EXPECT_EQ(expectedOut, out);\012 }));\012})<SUB>370</SUB>> ]
+"349" [label = <(UNKNOWN,TEST_F(HidlTest, BazSomeBoolMethodTest) {\012 auto result = baz-&gt;someBoolMethod(true);\012    EXPECT_OK(result);\012    EXPECT_EQ(result, false);\012},TEST_F(HidlTest, BazSomeBoolMethodTest) {\012 auto result = baz-&gt;someBoolMethod(true);\012    EXPECT_OK(result);\012    EXPECT_EQ(result, false);\012})<SUB>387</SUB>> ]
+"350" [label = <(UNKNOWN,TEST_F(HidlTest, BazSomeBoolArrayMethodTest) {\012    hidl_array&lt;bool, 3&gt; someBoolArray;\012    someBoolArray[0] = true;\012    someBoolArray[1] = false;\012    someBoolArray[2] = true;\012\012    hidl_array&lt;bool, 4&gt; expectedOut;\012    expectedOut[0] = false;\012    expectedOut[1] = true;\012    expectedOut[2] = false;\012    expectedOut[3] = true;\012\012    EXPECT_OK(\012            baz-&gt;someBoolArrayMethod(\012                someBoolArray,\012 [&amp;](const auto &amp;result) {\012                    EXPECT_EQ(expectedOut, result);\012 }));\012},TEST_F(HidlTest, BazSomeBoolArrayMethodTest) {\012    hidl_array&lt;bool, 3&gt; someBoolArray;\012    someBoolArray[0] = true;\012    someBoolArray[1] = false;\012    someBoolArray[2] = true;\012\012    hidl_array&lt;bool, 4&gt; expectedOut;\012    expectedOut[0] = false;\012    expectedOut[1] = true;\012    expectedOut[2] = false;\012    expectedOut[3] = true;\012\012    EXPECT_OK(\012            baz-&gt;someBoolArrayMethod(\012                someBoolArray,\012 [&amp;](const auto &amp;result) {\012                    EXPECT_EQ(expectedOut, result);\012 }));\012})<SUB>393</SUB>> ]
+"351" [label = <(UNKNOWN,TEST_F(HidlTest, BazSomeBoolVectorMethodTest) {\012    hidl_vec&lt;bool&gt; someBoolVector, expected;\012    someBoolVector.resize(4);\012    expected.resize(4);\012\012 for (size_t i = 0; i &lt; someBoolVector.size(); ++i) {\012        someBoolVector[i] = ((i &amp; 1) == 0);\012        expected[i] = !someBoolVector[i];\012 }\012\012    EXPECT_OK(\012            baz-&gt;someBoolVectorMethod(\012                someBoolVector,\012 [&amp;](const auto &amp;result) {\012                    EXPECT_EQ(expected, result);\012 }));\012},TEST_F(HidlTest, BazSomeBoolVectorMethodTest) {\012    hidl_vec&lt;bool&gt; someBoolVector, expected;\012    someBoolVector.resize(4);\012    expected.resize(4);\012\012 for (size_t i = 0; i &lt; someBoolVector.size(); ++i) {\012        someBoolVector[i] = ((i &amp; 1) == 0);\012        expected[i] = !someBoolVector[i];\012 }\012\012    EXPECT_OK(\012            baz-&gt;someBoolVectorMethod(\012                someBoolVector,\012 [&amp;](const auto &amp;result) {\012                    EXPECT_EQ(expected, result);\012 }));\012})<SUB>413</SUB>> ]
+"352" [label = <(UNKNOWN,TEST_F(HidlTest, BazDoThisMethodTest) {\012    EXPECT_OK(baz-&gt;doThis(1.0f));\012},TEST_F(HidlTest, BazDoThisMethodTest) {\012    EXPECT_OK(baz-&gt;doThis(1.0f));\012})<SUB>431</SUB>> ]
+"353" [label = <(UNKNOWN,TEST_F(HidlTest, BazDoThatAndReturnSomethingMethodTest) {\012 auto result = baz-&gt;doThatAndReturnSomething(1);\012    EXPECT_OK(result);\012    EXPECT_EQ(result, 666);\012},TEST_F(HidlTest, BazDoThatAndReturnSomethingMethodTest) {\012 auto result = baz-&gt;doThatAndReturnSomething(1);\012    EXPECT_OK(result);\012    EXPECT_EQ(result, 666);\012})<SUB>435</SUB>> ]
+"354" [label = <(UNKNOWN,TEST_F(HidlTest, BazDoQuiteABitMethodTest) {\012 auto result = baz-&gt;doQuiteABit(1, 2LL, 3.0f, 4.0);\012\012    EXPECT_OK(result);\012    EXPECT_EQ(result, 666.5);\012},TEST_F(HidlTest, BazDoQuiteABitMethodTest) {\012 auto result = baz-&gt;doQuiteABit(1, 2LL, 3.0f, 4.0);\012\012    EXPECT_OK(result);\012    EXPECT_EQ(result, 666.5);\012})<SUB>441</SUB>> ]
+"355" [label = <(UNKNOWN,TEST_F(HidlTest, BazDoSomethingElseMethodTest) {\012    hidl_array&lt;int32_t, 15&gt; param;\012    hidl_array&lt;int32_t, 32&gt; expected;\012\012 for (size_t i = 0; i &lt; 15; ++i) {\012        param[i] = expected[15 + i] = i;\012        expected[i] = 2 * i;\012 }\012\012    expected[30] = 1;\012    expected[31] = 2;\012\012    EXPECT_OK(\012            baz-&gt;doSomethingElse(\012                param,\012 [&amp;](const auto &amp;result) {\012                    EXPECT_EQ(expected, result);\012 }));\012},TEST_F(HidlTest, BazDoSomethingElseMethodTest) {\012    hidl_array&lt;int32_t, 15&gt; param;\012    hidl_array&lt;int32_t, 32&gt; expected;\012\012 for (size_t i = 0; i &lt; 15; ++i) {\012        param[i] = expected[15 + i] = i;\012        expected[i] = 2 * i;\012 }\012\012    expected[30] = 1;\012    expected[31] = 2;\012\012    EXPECT_OK(\012            baz-&gt;doSomethingElse(\012                param,\012 [&amp;](const auto &amp;result) {\012                    EXPECT_EQ(expected, result);\012 }));\012})<SUB>448</SUB>> ]
+"356" [label = <(UNKNOWN,TEST_F(HidlTest, BazDoStuffAndReturnAStringMethodTest) {\012    std::string expected = &quot;Hello, world!&quot;;\012    EXPECT_OK(\012            baz-&gt;doStuffAndReturnAString(\012 [&amp;](const auto &amp;result) {\012                    EXPECT_EQ(expected, result);\012 }));\012},TEST_F(HidlTest, BazDoStuffAndReturnAStringMethodTest) {\012    std::string expected = &quot;Hello, world!&quot;;\012    EXPECT_OK(\012            baz-&gt;doStuffAndReturnAString(\012 [&amp;](const auto &amp;result) {\012                    EXPECT_EQ(expected, result);\012 }));\012})<SUB>468</SUB>> ]
+"357" [label = <(UNKNOWN,TEST_F(HidlTest, BazMapThisVectorMethodTest) {\012    hidl_vec&lt;int32_t&gt; vec_param, expected;\012    vec_param.resize(15);\012    expected.resize(15);\012\012 for (size_t i = 0; i &lt; 15; ++i) {\012        vec_param[i] = i;\012        expected[i] = 2 * i;\012 }\012\012    EXPECT_OK(\012            baz-&gt;mapThisVector(\012                vec_param,\012 [&amp;](const auto &amp;result) {\012                    EXPECT_EQ(expected, result);\012 }));\012},TEST_F(HidlTest, BazMapThisVectorMethodTest) {\012    hidl_vec&lt;int32_t&gt; vec_param, expected;\012    vec_param.resize(15);\012    expected.resize(15);\012\012 for (size_t i = 0; i &lt; 15; ++i) {\012        vec_param[i] = i;\012        expected[i] = 2 * i;\012 }\012\012    EXPECT_OK(\012            baz-&gt;mapThisVector(\012                vec_param,\012 [&amp;](const auto &amp;result) {\012                    EXPECT_EQ(expected, result);\012 }));\012})<SUB>477</SUB>> ]
+"358" [label = <(UNKNOWN,TEST_F(HidlTest, BazCallMeMethodTest) {\012    EXPECT_OK(baz-&gt;callMe(new BazCallback()));\012},TEST_F(HidlTest, BazCallMeMethodTest) {\012    EXPECT_OK(baz-&gt;callMe(new BazCallback()));\012})<SUB>495</SUB>> ]
+"359" [label = <(UNKNOWN,TEST_F(HidlTest, BazCallMeLaterMethodTest) {\012    EXPECT_OK(baz-&gt;callMeLater(new BazCallback()));\012    EXPECT_OK(baz-&gt;iAmFreeNow());\012},TEST_F(HidlTest, BazCallMeLaterMethodTest) {\012    EXPECT_OK(baz-&gt;callMeLater(new BazCallback()));\012    EXPECT_OK(baz-&gt;iAmFreeNow());\012})<SUB>499</SUB>> ]
+"360" [label = <(UNKNOWN,TEST_F(HidlTest, BazUseAnEnumMethodTest) {\012 auto result = baz-&gt;useAnEnum(IBaz::SomeEnum::bar);\012\012    EXPECT_OK(result);\012    EXPECT_TRUE(result == IBaz::SomeEnum::quux);\012},TEST_F(HidlTest, BazUseAnEnumMethodTest) {\012 auto result = baz-&gt;useAnEnum(IBaz::SomeEnum::bar);\012\012    EXPECT_OK(result);\012    EXPECT_TRUE(result == IBaz::SomeEnum::quux);\012})<SUB>504</SUB>> ]
+"361" [label = <(UNKNOWN,TEST_F(HidlTest, BazHaveSomeStringsMethodTest) {\012    hidl_array&lt;hidl_string, 3&gt; string_params;\012    string_params[0] = &quot;one&quot;;\012    string_params[1] = &quot;two&quot;;\012    string_params[2] = &quot;three&quot;;\012\012    hidl_array&lt;hidl_string, 2&gt; expected;\012    expected[0] = &quot;Hello&quot;;\012    expected[1] = &quot;World&quot;;\012\012    EXPECT_OK(\012            baz-&gt;haveSomeStrings(\012                string_params,\012 [&amp;](const auto &amp;result) {\012                    EXPECT_EQ(expected, result);\012 }));\012},TEST_F(HidlTest, BazHaveSomeStringsMethodTest) {\012    hidl_array&lt;hidl_string, 3&gt; string_params;\012    string_params[0] = &quot;one&quot;;\012    string_params[1] = &quot;two&quot;;\012    string_params[2] = &quot;three&quot;;\012\012    hidl_array&lt;hidl_string, 2&gt; expected;\012    expected[0] = &quot;Hello&quot;;\012    expected[1] = &quot;World&quot;;\012\012    EXPECT_OK(\012            baz-&gt;haveSomeStrings(\012                string_params,\012 [&amp;](const auto &amp;result) {\012                    EXPECT_EQ(expected, result);\012 }));\012})<SUB>511</SUB>> ]
+"362" [label = <(UNKNOWN,TEST_F(HidlTest, BazHaveAStringVecMethodTest) {\012    hidl_vec&lt;hidl_string&gt; string_vec{ &quot;Uno&quot;, &quot;Dos&quot;, &quot;Tres&quot;, &quot;Cuatro&quot; };\012    hidl_vec&lt;hidl_string&gt; expected{&quot;Hello&quot;, &quot;World&quot;};\012\012    EXPECT_OK(\012            baz-&gt;haveAStringVec(\012                string_vec,\012 [&amp;](const auto &amp;result) {\012                    EXPECT_EQ(expected, result);\012 }));\012},TEST_F(HidlTest, BazHaveAStringVecMethodTest) {\012    hidl_vec&lt;hidl_string&gt; string_vec{ &quot;Uno&quot;, &quot;Dos&quot;, &quot;Tres&quot;, &quot;Cuatro&quot; };\012    hidl_vec&lt;hidl_string&gt; expected{&quot;Hello&quot;, &quot;World&quot;};\012\012    EXPECT_OK(\012            baz-&gt;haveAStringVec(\012                string_vec,\012 [&amp;](const auto &amp;result) {\012                    EXPECT_EQ(expected, result);\012 }));\012})<SUB>529</SUB>> ]
+"363" [label = <(UNKNOWN,TEST_F(HidlTest, BazReturnABunchOfStringsMethodTest) {\012    std::string expectedA = &quot;Eins&quot;;\012    std::string expectedB = &quot;Zwei&quot;;\012    std::string expectedC = &quot;Drei&quot;;\012    EXPECT_OK(\012            baz-&gt;returnABunchOfStrings(\012 [&amp;](const auto &amp;a, const auto &amp;b, const auto &amp;c) {\012                    EXPECT_EQ(a, expectedA);\012                    EXPECT_EQ(b, expectedB);\012                    EXPECT_EQ(c, expectedC);\012 }));\012},TEST_F(HidlTest, BazReturnABunchOfStringsMethodTest) {\012    std::string expectedA = &quot;Eins&quot;;\012    std::string expectedB = &quot;Zwei&quot;;\012    std::string expectedC = &quot;Drei&quot;;\012    EXPECT_OK(\012            baz-&gt;returnABunchOfStrings(\012 [&amp;](const auto &amp;a, const auto &amp;b, const auto &amp;c) {\012                    EXPECT_EQ(a, expectedA);\012                    EXPECT_EQ(b, expectedB);\012                    EXPECT_EQ(c, expectedC);\012 }));\012})<SUB>541</SUB>> ]
+"364" [label = <(UNKNOWN,TEST_F(HidlTest, BazTestArrays) {\012 IBase::LotsOfPrimitiveArrays in;\012\012 for (size_t i = 0; i &lt; 128; ++i) {\012        in.byte1[i] = i;\012        in.boolean1[i] = (i &amp; 4) != 0;\012        in.double1[i] = i;\012 }\012\012 size_t k = 0;\012 for (size_t i = 0; i &lt; 8; ++i) {\012 for (size_t j = 0; j &lt; 128; ++j, ++k) {\012            in.byte2[i][j] = k;\012            in.boolean2[i][j] = (k &amp; 4) != 0;\012            in.double2[i][j] = k;\012 }\012 }\012\012 size_t m = 0;\012 for (size_t i = 0; i &lt; 8; ++i) {\012 for (size_t j = 0; j &lt; 16; ++j) {\012 for (size_t k = 0; k &lt; 128; ++k, ++m) {\012                in.byte3[i][j][k] = m;\012                in.boolean3[i][j][k] = (m &amp; 4) != 0;\012                in.double3[i][j][k] = m;\012 }\012 }\012 }\012\012    EXPECT_OK(\012            baz-&gt;testArrays(in,\012 [&amp;](const auto &amp;out) {\012                    EXPECT_EQ(in, out);\012 }));\012},TEST_F(HidlTest, BazTestArrays) {\012 IBase::LotsOfPrimitiveArrays in;\012\012 for (size_t i = 0; i &lt; 128; ++i) {\012        in.byte1[i] = i;\012        in.boolean1[i] = (i &amp; 4) != 0;\012        in.double1[i] = i;\012 }\012\012 size_t k = 0;\012 for (size_t i = 0; i &lt; 8; ++i) {\012 for (size_t j = 0; j &lt; 128; ++j, ++k) {\012            in.byte2[i][j] = k;\012            in.boolean2[i][j] = (k &amp; 4) != 0;\012            in.double2[i][j] = k;\012 }\012 }\012\012 size_t m = 0;\012 for (size_t i = 0; i &lt; 8; ++i) {\012 for (size_t j = 0; j &lt; 16; ++j) {\012 for (size_t k = 0; k &lt; 128; ++k, ++m) {\012                in.byte3[i][j][k] = m;\012                in.boolean3[i][j][k] = (m &amp; 4) != 0;\012                in.double3[i][j][k] = m;\012 }\012 }\012 }\012\012    EXPECT_OK(\012            baz-&gt;testArrays(in,\012 [&amp;](const auto &amp;out) {\012                    EXPECT_EQ(in, out);\012 }));\012})<SUB>554</SUB>> ]
+"365" [label = <(UNKNOWN,TEST_F(HidlTest, BazTestByteVecs) {\012    hidl_vec&lt;IBase::ByteOneDim&gt; in;\012    in.resize(8);\012\012 size_t k = 0;\012 for (size_t i = 0; i &lt; in.size(); ++i) {\012 for (size_t j = 0; j &lt; 128; ++j, ++k) {\012            in[i][j] = k;\012 }\012 }\012\012    EXPECT_OK(baz-&gt;testByteVecs(\012                in, [&amp;](const auto &amp;out) { EXPECT_EQ(in, out); }));\012},TEST_F(HidlTest, BazTestByteVecs) {\012    hidl_vec&lt;IBase::ByteOneDim&gt; in;\012    in.resize(8);\012\012 size_t k = 0;\012 for (size_t i = 0; i &lt; in.size(); ++i) {\012 for (size_t j = 0; j &lt; 128; ++j, ++k) {\012            in[i][j] = k;\012 }\012 }\012\012    EXPECT_OK(baz-&gt;testByteVecs(\012                in, [&amp;](const auto &amp;out) { EXPECT_EQ(in, out); }));\012})<SUB>590</SUB>> ]
+"366" [label = <(UNKNOWN,TEST_F(HidlTest, BazTestBooleanVecs) {\012    hidl_vec&lt;IBase::BooleanOneDim&gt; in;\012    in.resize(8);\012\012 size_t k = 0;\012 for (size_t i = 0; i &lt; in.size(); ++i) {\012 for (size_t j = 0; j &lt; 128; ++j, ++k) {\012            in[i][j] = (k &amp; 4) != 0;\012 }\012 }\012\012    EXPECT_OK(baz-&gt;testBooleanVecs(\012                in, [&amp;](const auto &amp;out) { EXPECT_EQ(in, out); }));\012},TEST_F(HidlTest, BazTestBooleanVecs) {\012    hidl_vec&lt;IBase::BooleanOneDim&gt; in;\012    in.resize(8);\012\012 size_t k = 0;\012 for (size_t i = 0; i &lt; in.size(); ++i) {\012 for (size_t j = 0; j &lt; 128; ++j, ++k) {\012            in[i][j] = (k &amp; 4) != 0;\012 }\012 }\012\012    EXPECT_OK(baz-&gt;testBooleanVecs(\012                in, [&amp;](const auto &amp;out) { EXPECT_EQ(in, out); }));\012})<SUB>605</SUB>> ]
+"367" [label = <(UNKNOWN,TEST_F(HidlTest, BazTestDoubleVecs) {\012    hidl_vec&lt;IBase::DoubleOneDim&gt; in;\012    in.resize(8);\012\012 size_t k = 0;\012 for (size_t i = 0; i &lt; in.size(); ++i) {\012 for (size_t j = 0; j &lt; 128; ++j, ++k) {\012            in[i][j] = k;\012 }\012 }\012\012    EXPECT_OK(baz-&gt;testDoubleVecs(\012                in, [&amp;](const auto &amp;out) { EXPECT_EQ(in, out); }));\012},TEST_F(HidlTest, BazTestDoubleVecs) {\012    hidl_vec&lt;IBase::DoubleOneDim&gt; in;\012    in.resize(8);\012\012 size_t k = 0;\012 for (size_t i = 0; i &lt; in.size(); ++i) {\012 for (size_t j = 0; j &lt; 128; ++j, ++k) {\012            in[i][j] = k;\012 }\012 }\012\012    EXPECT_OK(baz-&gt;testDoubleVecs(\012                in, [&amp;](const auto &amp;out) { EXPECT_EQ(in, out); }));\012})<SUB>620</SUB>> ]
+"368" [label = <(UNKNOWN,TEST_F(HidlTest, SafeUnionNoInitTest) {\012    EXPECT_OK(safeunionInterface-&gt;newLargeSafeUnion([&amp;](const LargeSafeUnion&amp; safeUnion) {\012        EXPECT_EQ(LargeSafeUnion::hidl_discriminator::noinit, safeUnion.getDiscriminator());\012 }));\012},TEST_F(HidlTest, SafeUnionNoInitTest) {\012    EXPECT_OK(safeunionInterface-&gt;newLargeSafeUnion([&amp;](const LargeSafeUnion&amp; safeUnion) {\012        EXPECT_EQ(LargeSafeUnion::hidl_discriminator::noinit, safeUnion.getDiscriminator());\012 }));\012})<SUB>635</SUB>> ]
+"369" [label = <(UNKNOWN,TEST_F(HidlTest, SafeUnionSimpleTest) {\012    EXPECT_OK(safeunionInterface-&gt;newLargeSafeUnion([&amp;](const LargeSafeUnion&amp; safeUnion) {\012        EXPECT_OK(safeunionInterface-&gt;setA(safeUnion, -5, [&amp;](const LargeSafeUnion&amp; safeUnion) {\012            EXPECT_EQ(LargeSafeUnion::hidl_discriminator::a, safeUnion.getDiscriminator());\012            EXPECT_EQ(-5, safeUnion.a());\012\012 uint64_t max = std::numeric_limits&lt;uint64_t&gt;::max();\012            EXPECT_OK(\012                safeunionInterface-&gt;setD(safeUnion, max, [&amp;](const LargeSafeUnion&amp; safeUnion) {\012                    EXPECT_EQ(LargeSafeUnion::hidl_discriminator::d, safeUnion.getDiscriminator());\012                    EXPECT_EQ(max, safeUnion.d());\012 }));\012 }));\012 }));\012},TEST_F(HidlTest, SafeUnionSimpleTest) {\012    EXPECT_OK(safeunionInterface-&gt;newLargeSafeUnion([&amp;](const LargeSafeUnion&amp; safeUnion) {\012        EXPECT_OK(safeunionInterface-&gt;setA(safeUnion, -5, [&amp;](const LargeSafeUnion&amp; safeUnion) {\012            EXPECT_EQ(LargeSafeUnion::hidl_discriminator::a, safeUnion.getDiscriminator());\012            EXPECT_EQ(-5, safeUnion.a());\012\012 uint64_t max = std::numeric_limits&lt;uint64_t&gt;::max();\012            EXPECT_OK(\012                safeunionInterface-&gt;setD(safeUnion, max, [&amp;](const LargeSafeUnion&amp; safeUnion) {\012                    EXPECT_EQ(LargeSafeUnion::hidl_discriminator::d, safeUnion.getDiscriminator());\012                    EXPECT_EQ(max, safeUnion.d());\012 }));\012 }));\012 }));\012})<SUB>641</SUB>> ]
+"370" [label = <(UNKNOWN,TEST_F(HidlTest, SafeUnionArrayLikeTypesTest) {\012 const std::array&lt;int64_t, 5&gt; testArray{1, -2, 3, -4, 5};\012 const hidl_vec&lt;uint64_t&gt; testVector{std::numeric_limits&lt;uint64_t&gt;::max()};\012\012    EXPECT_OK(safeunionInterface-&gt;newLargeSafeUnion([&amp;](const LargeSafeUnion&amp; safeUnion) {\012        EXPECT_OK(\012            safeunionInterface-&gt;setF(safeUnion, testArray, [&amp;](const LargeSafeUnion&amp; safeUnion) {\012                EXPECT_EQ(LargeSafeUnion::hidl_discriminator::f, safeUnion.getDiscriminator());\012\012 for (size_t i = 0; i &lt; testArray.size(); i++) {\012                    EXPECT_EQ(testArray[i], safeUnion.f()[i]);\012 }\012 }));\012\012        EXPECT_OK(\012            safeunionInterface-&gt;setI(safeUnion, testVector, [&amp;](const LargeSafeUnion&amp; safeUnion) {\012                EXPECT_EQ(LargeSafeUnion::hidl_discriminator::i, safeUnion.getDiscriminator());\012                EXPECT_EQ(testVector, safeUnion.i());\012 }));\012 }));\012},TEST_F(HidlTest, SafeUnionArrayLikeTypesTest) {\012 const std::array&lt;int64_t, 5&gt; testArray{1, -2, 3, -4, 5};\012 const hidl_vec&lt;uint64_t&gt; testVector{std::numeric_limits&lt;uint64_t&gt;::max()};\012\012    EXPECT_OK(safeunionInterface-&gt;newLargeSafeUnion([&amp;](const LargeSafeUnion&amp; safeUnion) {\012        EXPECT_OK(\012            safeunionInterface-&gt;setF(safeUnion, testArray, [&amp;](const LargeSafeUnion&amp; safeUnion) {\012                EXPECT_EQ(LargeSafeUnion::hidl_discriminator::f, safeUnion.getDiscriminator());\012\012 for (size_t i = 0; i &lt; testArray.size(); i++) {\012                    EXPECT_EQ(testArray[i], safeUnion.f()[i]);\012 }\012 }));\012\012        EXPECT_OK(\012            safeunionInterface-&gt;setI(safeUnion, testVector, [&amp;](const LargeSafeUnion&amp; safeUnion) {\012                EXPECT_EQ(LargeSafeUnion::hidl_discriminator::i, safeUnion.getDiscriminator());\012                EXPECT_EQ(testVector, safeUnion.i());\012 }));\012 }));\012})<SUB>657</SUB>> ]
+"371" [label = <(UNKNOWN,TEST_F(HidlTest, SafeUnionStringTypeTest) {\012 const std::string testString =\012 &quot;This is an inordinately long test string to exercise hidl_string types in safe unions.&quot;;\012\012    EXPECT_OK(safeunionInterface-&gt;newLargeSafeUnion([&amp;](const LargeSafeUnion&amp; safeUnion) {\012        EXPECT_OK(safeunionInterface-&gt;setG(\012            safeUnion, hidl_string(testString), [&amp;](const LargeSafeUnion&amp; safeUnion) {\012                EXPECT_EQ(LargeSafeUnion::hidl_discriminator::g, safeUnion.getDiscriminator());\012                EXPECT_EQ(testString, std::string(safeUnion.g()));\012 }));\012 }));\012},TEST_F(HidlTest, SafeUnionStringTypeTest) {\012 const std::string testString =\012 &quot;This is an inordinately long test string to exercise hidl_string types in safe unions.&quot;;\012\012    EXPECT_OK(safeunionInterface-&gt;newLargeSafeUnion([&amp;](const LargeSafeUnion&amp; safeUnion) {\012        EXPECT_OK(safeunionInterface-&gt;setG(\012            safeUnion, hidl_string(testString), [&amp;](const LargeSafeUnion&amp; safeUnion) {\012                EXPECT_EQ(LargeSafeUnion::hidl_discriminator::g, safeUnion.getDiscriminator());\012                EXPECT_EQ(testString, std::string(safeUnion.g()));\012 }));\012 }));\012})<SUB>679</SUB>> ]
+"372" [label = <(UNKNOWN,TEST_F(HidlTest, SafeUnionNestedTest) {\012 SmallSafeUnion smallSafeUnion;\012    smallSafeUnion.a(1);\012\012    EXPECT_OK(safeunionInterface-&gt;newLargeSafeUnion([&amp;](const LargeSafeUnion&amp; safeUnion) {\012        EXPECT_OK(safeunionInterface-&gt;setL(\012            safeUnion, smallSafeUnion, [&amp;](const LargeSafeUnion&amp; safeUnion) {\012                EXPECT_EQ(LargeSafeUnion::hidl_discriminator::l, safeUnion.getDiscriminator());\012\012                EXPECT_EQ(SmallSafeUnion::hidl_discriminator::a, safeUnion.l().getDiscriminator());\012                EXPECT_EQ(1, safeUnion.l().a());\012 }));\012 }));\012},TEST_F(HidlTest, SafeUnionNestedTest) {\012 SmallSafeUnion smallSafeUnion;\012    smallSafeUnion.a(1);\012\012    EXPECT_OK(safeunionInterface-&gt;newLargeSafeUnion([&amp;](const LargeSafeUnion&amp; safeUnion) {\012        EXPECT_OK(safeunionInterface-&gt;setL(\012            safeUnion, smallSafeUnion, [&amp;](const LargeSafeUnion&amp; safeUnion) {\012                EXPECT_EQ(LargeSafeUnion::hidl_discriminator::l, safeUnion.getDiscriminator());\012\012                EXPECT_EQ(SmallSafeUnion::hidl_discriminator::a, safeUnion.l().getDiscriminator());\012                EXPECT_EQ(1, safeUnion.l().a());\012 }));\012 }));\012})<SUB>692</SUB>> ]
+"447" [label = <(UNKNOWN,TEST_F(HidlTest, SafeUnionInterfaceNullHandleTest) {\012 InterfaceTypeSafeUnion safeUnion;\012\012    EXPECT_OK(safeunionInterface-&gt;setInterfaceF(\012        safeUnion, hidl_handle(nullptr), [&amp;](const InterfaceTypeSafeUnion&amp; safeUnion) {\012            EXPECT_EQ(InterfaceTypeSafeUnion::hidl_discriminator::f,\012                      safeUnion.getDiscriminator());\012\012            checkNativeHandlesDataEquality(nullptr, safeUnion.f().getNativeHandle());\012 }));\012},TEST_F(HidlTest, SafeUnionInterfaceNullHandleTest) {\012 InterfaceTypeSafeUnion safeUnion;\012\012    EXPECT_OK(safeunionInterface-&gt;setInterfaceF(\012        safeUnion, hidl_handle(nullptr), [&amp;](const InterfaceTypeSafeUnion&amp; safeUnion) {\012            EXPECT_EQ(InterfaceTypeSafeUnion::hidl_discriminator::f,\012                      safeUnion.getDiscriminator());\012\012            checkNativeHandlesDataEquality(nullptr, safeUnion.f().getNativeHandle());\012 }));\012})<SUB>725</SUB>> ]
+"448" [label = <(UNKNOWN,TEST_F(HidlTest, SafeUnionInterfaceTest) {\012 const std::array&lt;int8_t, 7&gt; testArray{-1, -2, -3, 0, 1, 2, 3};\012 const hidl_vec&lt;hidl_string&gt; testVector{&quot;So&quot;, &quot;Many&quot;, &quot;Words&quot;};\012 const std::string testStringA = &quot;Hello&quot;;\012 const std::string testStringB = &quot;World&quot;;\012\012 const std::array&lt;int, 6&gt; testHandleData{2, -32, 10, -4329454, 11, 24};\012 native_handle_t* h = native_handle_create(0, testHandleData.size());\012    CHECK(sizeof(testHandleData) == testHandleData.size() * sizeof(int));\012    std::memcpy(h-&gt;data, testHandleData.data(), sizeof(testHandleData));\012\012    std::vector&lt;hidl_handle&gt; testHandlesVector(256);\012 for (size_t i = 0; i &lt; testHandlesVector.size(); i++) {\012        testHandlesVector[i].setTo(native_handle_clone(h), true /* shouldOwn */);\012 }\012\012    EXPECT_OK(\012        safeunionInterface-&gt;newInterfaceTypeSafeUnion([&amp;](const InterfaceTypeSafeUnion&amp; safeUnion) {\012            EXPECT_EQ(InterfaceTypeSafeUnion::hidl_discriminator::noinit,\012                      safeUnion.getDiscriminator());\012\012            EXPECT_OK(safeunionInterface-&gt;setInterfaceB(\012                safeUnion, testArray, [&amp;](const InterfaceTypeSafeUnion&amp; safeUnion) {\012                    EXPECT_EQ(InterfaceTypeSafeUnion::hidl_discriminator::b,\012                              safeUnion.getDiscriminator());\012\012 for (size_t i = 0; i &lt; testArray.size(); i++) {\012                        EXPECT_EQ(testArray[i], safeUnion.b()[i]);\012 }\012 }));\012\012            EXPECT_OK(safeunionInterface-&gt;setInterfaceD(\012                safeUnion, testStringA, [&amp;](const InterfaceTypeSafeUnion&amp; safeUnion) {\012                    EXPECT_EQ(InterfaceTypeSafeUnion::hidl_discriminator::d,\012                              safeUnion.getDiscriminator());\012                    EXPECT_EQ(testStringA, safeUnion.d());\012 }));\012\012            EXPECT_OK(safeunionInterface-&gt;setInterfaceE(\012                safeUnion, testVector, [&amp;](const InterfaceTypeSafeUnion&amp; safeUnion) {\012                    EXPECT_EQ(InterfaceTypeSafeUnion::hidl_discriminator::e,\012                              safeUnion.getDiscriminator());\012                    EXPECT_EQ(testVector, safeUnion.e());\012 }));\012\012            EXPECT_OK(safeunionInterface-&gt;setInterfaceF(\012                safeUnion, hidl_handle(h), [&amp;](const InterfaceTypeSafeUnion&amp; safeUnion) {\012                    EXPECT_EQ(InterfaceTypeSafeUnion::hidl_discriminator::f,\012                              safeUnion.getDiscriminator());\012\012 const native_handle_t* result = safeUnion.f().getNativeHandle();\012                    checkNativeHandlesDataEquality(h, result);\012 }));\012\012            EXPECT_OK(safeunionInterface-&gt;setInterfaceG(\012                safeUnion, testHandlesVector, [&amp;](const InterfaceTypeSafeUnion&amp; safeUnion) {\012                    EXPECT_EQ(InterfaceTypeSafeUnion::hidl_discriminator::g,\012                              safeUnion.getDiscriminator());\012\012 for (size_t i = 0; i &lt; testHandlesVector.size(); i++) {\012                        checkNativeHandlesDataEquality(h, safeUnion.g()[i].getNativeHandle());\012 }\012 }));\012 }));\012\012 // Same-process interface calls are not supported in Java, so we use\012 // a safe_union instance bound to this (client) process instead of\012 // safeunionInterface to exercise this test-case. Ref: b/110957763.\012 InterfaceTypeSafeUnion safeUnion;\012    safeUnion.c(otherInterface);\012\012    EXPECT_EQ(InterfaceTypeSafeUnion::hidl_discriminator::c, safeUnion.getDiscriminator());\012    EXPECT_OK(safeUnion.c()-&gt;concatTwoStrings(\012        hidl_string(testStringA), hidl_string(testStringB), [&amp;](const hidl_string&amp; result) {\012            EXPECT_EQ(testStringA + testStringB, std::string(result));\012 }));\012\012    native_handle_delete(h);\012},TEST_F(HidlTest, SafeUnionInterfaceTest) {\012 const std::array&lt;int8_t, 7&gt; testArray{-1, -2, -3, 0, 1, 2, 3};\012 const hidl_vec&lt;hidl_string&gt; testVector{&quot;So&quot;, &quot;Many&quot;, &quot;Words&quot;};\012 const std::string testStringA = &quot;Hello&quot;;\012 const std::string testStringB = &quot;World&quot;;\012\012 const std::array&lt;int, 6&gt; testHandleData{2, -32, 10, -4329454, 11, 24};\012 native_handle_t* h = native_handle_create(0, testHandleData.size());\012    CHECK(sizeof(testHandleData) == testHandleData.size() * sizeof(int));\012    std::memcpy(h-&gt;data, testHandleData.data(), sizeof(testHandleData));\012\012    std::vector&lt;hidl_handle&gt; testHandlesVector(256);\012 for (size_t i = 0; i &lt; testHandlesVector.size(); i++) {\012        testHandlesVector[i].setTo(native_handle_clone(h), true /* shouldOwn */);\012 }\012\012    EXPECT_OK(\012        safeunionInterface-&gt;newInterfaceTypeSafeUnion([&amp;](const InterfaceTypeSafeUnion&amp; safeUnion) {\012            EXPECT_EQ(InterfaceTypeSafeUnion::hidl_discriminator::noinit,\012                      safeUnion.getDiscriminator());\012\012            EXPECT_OK(safeunionInterface-&gt;setInterfaceB(\012                safeUnion, testArray, [&amp;](const InterfaceTypeSafeUnion&amp; safeUnion) {\012                    EXPECT_EQ(InterfaceTypeSafeUnion::hidl_discriminator::b,\012                              safeUnion.getDiscriminator());\012\012 for (size_t i = 0; i &lt; testArray.size(); i++) {\012                        EXPECT_EQ(testArray[i], safeUnion.b()[i]);\012 }\012 }));\012\012            EXPECT_OK(safeunionInterface-&gt;setInterfaceD(\012                safeUnion, testStringA, [&amp;](const InterfaceTypeSafeUnion&amp; safeUnion) {\012                    EXPECT_EQ(InterfaceTypeSafeUnion::hidl_discriminator::d,\012                              safeUnion.getDiscriminator());\012                    EXPECT_EQ(testStringA, safeUnion.d());\012 }));\012\012            EXPECT_OK(safeunionInterface-&gt;setInterfaceE(\012                safeUnion, testVector, [&amp;](const InterfaceTypeSafeUnion&amp; safeUnion) {\012                    EXPECT_EQ(InterfaceTypeSafeUnion::hidl_discriminator::e,\012                              safeUnion.getDiscriminator());\012                    EXPECT_EQ(testVector, safeUnion.e());\012 }));\012\012            EXPECT_OK(safeunionInterface-&gt;setInterfaceF(\012                safeUnion, hidl_handle(h), [&amp;](const InterfaceTypeSafeUnion&amp; safeUnion) {\012                    EXPECT_EQ(InterfaceTypeSafeUnion::hidl_discriminator::f,\012                              safeUnion.getDiscriminator());\012\012 const native_handle_t* result = safeUnion.f().getNativeHandle();\012                    checkNativeHandlesDataEquality(h, result);\012 }));\012\012            EXPECT_OK(safeunionInterface-&gt;setInterfaceG(\012                safeUnion, testHandlesVector, [&amp;](const InterfaceTypeSafeUnion&amp; safeUnion) {\012                    EXPECT_EQ(InterfaceTypeSafeUnion::hidl_discriminator::g,\012                              safeUnion.getDiscriminator());\012\012 for (size_t i = 0; i &lt; testHandlesVector.size(); i++) {\012                        checkNativeHandlesDataEquality(h, safeUnion.g()[i].getNativeHandle());\012 }\012 }));\012 }));\012\012 // Same-process interface calls are not supported in Java, so we use\012 // a safe_union instance bound to this (client) process instead of\012 // safeunionInterface to exercise this test-case. Ref: b/110957763.\012 InterfaceTypeSafeUnion safeUnion;\012    safeUnion.c(otherInterface);\012\012    EXPECT_EQ(InterfaceTypeSafeUnion::hidl_discriminator::c, safeUnion.getDiscriminator());\012    EXPECT_OK(safeUnion.c()-&gt;concatTwoStrings(\012        hidl_string(testStringA), hidl_string(testStringB), [&amp;](const hidl_string&amp; result) {\012            EXPECT_EQ(testStringA + testStringB, std::string(result));\012 }));\012\012    native_handle_delete(h);\012})<SUB>737</SUB>> ]
+"449" [label = <(UNKNOWN,TEST_F(HidlTest, SafeUnionNullHandleTest) {\012 HandleTypeSafeUnion safeUnion;\012\012    EXPECT_OK(safeunionInterface-&gt;setHandleA(\012        safeUnion, hidl_handle(nullptr), [&amp;](const HandleTypeSafeUnion&amp; safeUnion) {\012            EXPECT_EQ(HandleTypeSafeUnion::hidl_discriminator::a,\012                      safeUnion.getDiscriminator());\012\012            checkNativeHandlesDataEquality(nullptr, safeUnion.a().getNativeHandle());\012 }));\012},TEST_F(HidlTest, SafeUnionNullHandleTest) {\012 HandleTypeSafeUnion safeUnion;\012\012    EXPECT_OK(safeunionInterface-&gt;setHandleA(\012        safeUnion, hidl_handle(nullptr), [&amp;](const HandleTypeSafeUnion&amp; safeUnion) {\012            EXPECT_EQ(HandleTypeSafeUnion::hidl_discriminator::a,\012                      safeUnion.getDiscriminator());\012\012            checkNativeHandlesDataEquality(nullptr, safeUnion.a().getNativeHandle());\012 }));\012})<SUB>817</SUB>> ]
+"450" [label = <(UNKNOWN,TEST_F(HidlTest, SafeUnionSimpleHandleTest) {\012 const std::array&lt;int, 6&gt; testData{2, -32, 10, -4329454, 11, 24};\012 native_handle_t* h = native_handle_create(0, testData.size());\012    ASSERT_EQ(sizeof(testData), testData.size() * sizeof(int));\012    std::memcpy(h-&gt;data, testData.data(), sizeof(testData));\012\012    std::array&lt;hidl_handle, 5&gt; testArray;\012 for (size_t i = 0; i &lt; testArray.size(); i++) {\012        testArray[i].setTo(native_handle_clone(h), true /* shouldOwn */);\012 }\012\012    std::vector&lt;hidl_handle&gt; testVector(256);\012 for (size_t i = 0; i &lt; testVector.size(); i++) {\012        testVector[i].setTo(native_handle_clone(h), true /* shouldOwn */);\012 }\012\012    EXPECT_OK(\012        safeunionInterface-&gt;newHandleTypeSafeUnion([&amp;](const HandleTypeSafeUnion&amp; safeUnion) {\012            EXPECT_OK(safeunionInterface-&gt;setHandleA(\012                safeUnion, hidl_handle(h), [&amp;](const HandleTypeSafeUnion&amp; safeUnion) {\012                    EXPECT_EQ(HandleTypeSafeUnion::hidl_discriminator::a,\012                              safeUnion.getDiscriminator());\012\012                    checkNativeHandlesDataEquality(h, safeUnion.a().getNativeHandle());\012 }));\012\012            EXPECT_OK(safeunionInterface-&gt;setHandleB(\012                safeUnion, testArray, [&amp;](const HandleTypeSafeUnion&amp; safeUnion) {\012                    EXPECT_EQ(HandleTypeSafeUnion::hidl_discriminator::b,\012                              safeUnion.getDiscriminator());\012\012 for (size_t i = 0; i &lt; testArray.size(); i++) {\012                        checkNativeHandlesDataEquality(h, safeUnion.b()[i].getNativeHandle());\012 }\012 }));\012\012            EXPECT_OK(safeunionInterface-&gt;setHandleC(\012                safeUnion, testVector, [&amp;](const HandleTypeSafeUnion&amp; safeUnion) {\012                    EXPECT_EQ(HandleTypeSafeUnion::hidl_discriminator::c,\012                              safeUnion.getDiscriminator());\012\012 for (size_t i = 0; i &lt; testVector.size(); i++) {\012                        checkNativeHandlesDataEquality(h, safeUnion.c()[i].getNativeHandle());\012 }\012 }));\012 }));\012\012    native_handle_delete(h);\012},TEST_F(HidlTest, SafeUnionSimpleHandleTest) {\012 const std::array&lt;int, 6&gt; testData{2, -32, 10, -4329454, 11, 24};\012 native_handle_t* h = native_handle_create(0, testData.size());\012    ASSERT_EQ(sizeof(testData), testData.size() * sizeof(int));\012    std::memcpy(h-&gt;data, testData.data(), sizeof(testData));\012\012    std::array&lt;hidl_handle, 5&gt; testArray;\012 for (size_t i = 0; i &lt; testArray.size(); i++) {\012        testArray[i].setTo(native_handle_clone(h), true /* shouldOwn */);\012 }\012\012    std::vector&lt;hidl_handle&gt; testVector(256);\012 for (size_t i = 0; i &lt; testVector.size(); i++) {\012        testVector[i].setTo(native_handle_clone(h), true /* shouldOwn */);\012 }\012\012    EXPECT_OK(\012        safeunionInterface-&gt;newHandleTypeSafeUnion([&amp;](const HandleTypeSafeUnion&amp; safeUnion) {\012            EXPECT_OK(safeunionInterface-&gt;setHandleA(\012                safeUnion, hidl_handle(h), [&amp;](const HandleTypeSafeUnion&amp; safeUnion) {\012                    EXPECT_EQ(HandleTypeSafeUnion::hidl_discriminator::a,\012                              safeUnion.getDiscriminator());\012\012                    checkNativeHandlesDataEquality(h, safeUnion.a().getNativeHandle());\012 }));\012\012            EXPECT_OK(safeunionInterface-&gt;setHandleB(\012                safeUnion, testArray, [&amp;](const HandleTypeSafeUnion&amp; safeUnion) {\012                    EXPECT_EQ(HandleTypeSafeUnion::hidl_discriminator::b,\012                              safeUnion.getDiscriminator());\012\012 for (size_t i = 0; i &lt; testArray.size(); i++) {\012                        checkNativeHandlesDataEquality(h, safeUnion.b()[i].getNativeHandle());\012 }\012 }));\012\012            EXPECT_OK(safeunionInterface-&gt;setHandleC(\012                safeUnion, testVector, [&amp;](const HandleTypeSafeUnion&amp; safeUnion) {\012                    EXPECT_EQ(HandleTypeSafeUnion::hidl_discriminator::c,\012                              safeUnion.getDiscriminator());\012\012 for (size_t i = 0; i &lt; testVector.size(); i++) {\012                        checkNativeHandlesDataEquality(h, safeUnion.c()[i].getNativeHandle());\012 }\012 }));\012 }));\012\012    native_handle_delete(h);\012})<SUB>829</SUB>> ]
+"451" [label = <(UNKNOWN,TEST_F(HidlTest, SafeUnionVecOfHandlesWithOneFdTest) {\012 const std::vector&lt;std::string&gt; testStrings{&quot;This &quot;, &quot;is &quot;, &quot;so &quot;, &quot;much &quot;, &quot;data!\n&quot;};\012 const std::string testFileName = &quot;/data/local/tmp/SafeUnionVecOfHandlesWithOneFdTest&quot;;\012 const std::array&lt;int, 6&gt; testData{2, -32, 10, -4329454, 11, 24};\012    ASSERT_EQ(sizeof(testData), testData.size() * sizeof(int));\012\012 const std::string goldenResult = std::accumulate(testStrings.begin(),\012                                                     testStrings.end(),\012                                                     std::string());\012\012 int fd = open(testFileName.c_str(), (O_RDWR | O_TRUNC | O_CREAT), (S_IRUSR | S_IWUSR));\012    ASSERT_TRUE(fd &gt;= 0);\012\012    native_handle* h = native_handle_create(1 /* numFds */, testData.size() /* numInts */);\012    std::memcpy(&amp;(h-&gt;data[1]), testData.data(), sizeof(testData));\012    h-&gt;data[0] = fd;\012\012    hidl_vec&lt;hidl_handle&gt; testHandles(testStrings.size());\012 for (size_t i = 0; i &lt; testHandles.size(); i++) {\012        testHandles[i].setTo(native_handle_clone(h), true /* shouldOwn */);\012 }\012\012    EXPECT_OK(\012        safeunionInterface-&gt;newHandleTypeSafeUnion([&amp;](const HandleTypeSafeUnion&amp; safeUnion) {\012            EXPECT_OK(safeunionInterface-&gt;setHandleC(\012                safeUnion, testHandles, [&amp;](const HandleTypeSafeUnion&amp; safeUnion) {\012                    EXPECT_EQ(HandleTypeSafeUnion::hidl_discriminator::c,\012                              safeUnion.getDiscriminator());\012\012 for (size_t i = 0; i &lt; safeUnion.c().size(); i++) {\012 const native_handle_t* reference = testHandles[i].getNativeHandle();\012 const native_handle_t* result = safeUnion.c()[i].getNativeHandle();\012                        checkNativeHandlesDataEquality(reference, result);\012\012 // Original FDs should be dup'd\012 int resultFd = result-&gt;data[0];\012                        EXPECT_NE(reference-&gt;data[0], resultFd);\012\012                        EXPECT_TRUE(android::base::WriteStringToFd(testStrings[i], resultFd));\012                        EXPECT_EQ(0, fsync(resultFd));\012 }\012 }));\012 }));\012\012    std::string result;\012    lseek(fd, 0, SEEK_SET);\012\012    EXPECT_TRUE(android::base::ReadFdToString(fd, &amp;result));\012    EXPECT_EQ(goldenResult, result);\012\012    native_handle_delete(h);\012    EXPECT_EQ(0, close(fd));\012    EXPECT_EQ(0, remove(testFileName.c_str()));\012},TEST_F(HidlTest, SafeUnionVecOfHandlesWithOneFdTest) {\012 const std::vector&lt;std::string&gt; testStrings{&quot;This &quot;, &quot;is &quot;, &quot;so &quot;, &quot;much &quot;, &quot;data!\n&quot;};\012 const std::string testFileName = &quot;/data/local/tmp/SafeUnionVecOfHandlesWithOneFdTest&quot;;\012 const std::array&lt;int, 6&gt; testData{2, -32, 10, -4329454, 11, 24};\012    ASSERT_EQ(sizeof(testData), testData.size() * sizeof(int));\012\012 const std::string goldenResult = std::accumulate(testStrings.begin(),\012                                                     testStrings.end(),\012                                                     std::string());\012\012 int fd = open(testFileName.c_str(), (O_RDWR | O_TRUNC | O_CREAT), (S_IRUSR | S_IWUSR));\012    ASSERT_TRUE(fd &gt;= 0);\012\012    native_handle* h = native_handle_create(1 /* numFds */, testData.size() /* numInts */);\012    std::memcpy(&amp;(h-&gt;data[1]), testData.data(), sizeof(testData));\012    h-&gt;data[0] = fd;\012\012    hidl_vec&lt;hidl_handle&gt; testHandles(testStrings.size());\012 for (size_t i = 0; i &lt; testHandles.size(); i++) {\012        testHandles[i].setTo(native_handle_clone(h), true /* shouldOwn */);\012 }\012\012    EXPECT_OK(\012        safeunionInterface-&gt;newHandleTypeSafeUnion([&amp;](const HandleTypeSafeUnion&amp; safeUnion) {\012            EXPECT_OK(safeunionInterface-&gt;setHandleC(\012                safeUnion, testHandles, [&amp;](const HandleTypeSafeUnion&amp; safeUnion) {\012                    EXPECT_EQ(HandleTypeSafeUnion::hidl_discriminator::c,\012                              safeUnion.getDiscriminator());\012\012 for (size_t i = 0; i &lt; safeUnion.c().size(); i++) {\012 const native_handle_t* reference = testHandles[i].getNativeHandle();\012 const native_handle_t* result = safeUnion.c()[i].getNativeHandle();\012                        checkNativeHandlesDataEquality(reference, result);\012\012 // Original FDs should be dup'd\012 int resultFd = result-&gt;data[0];\012                        EXPECT_NE(reference-&gt;data[0], resultFd);\012\012                        EXPECT_TRUE(android::base::WriteStringToFd(testStrings[i], resultFd));\012                        EXPECT_EQ(0, fsync(resultFd));\012 }\012 }));\012 }));\012\012    std::string result;\012    lseek(fd, 0, SEEK_SET);\012\012    EXPECT_TRUE(android::base::ReadFdToString(fd, &amp;result));\012    EXPECT_EQ(goldenResult, result);\012\012    native_handle_delete(h);\012    EXPECT_EQ(0, close(fd));\012    EXPECT_EQ(0, remove(testFileName.c_str()));\012})<SUB>879</SUB>> ]
+"452" [label = <(UNKNOWN,TEST_F(HidlTest, SafeUnionHandleWithMultipleFdsTest) {\012 const std::vector&lt;std::string&gt; testStrings{&quot;This &quot;, &quot;is &quot;, &quot;so &quot;, &quot;much &quot;, &quot;data!\n&quot;};\012 const std::string testFileName = &quot;/data/local/tmp/SafeUnionHandleWithMultipleFdsTest&quot;;\012 const std::array&lt;int, 6&gt; testData{2, -32, 10, -4329454, 11, 24};\012    ASSERT_EQ(sizeof(testData), testData.size() * sizeof(int));\012\012 const std::string goldenResult = std::accumulate(testStrings.begin(),\012                                                     testStrings.end(),\012                                                     std::string());\012\012 int fd = open(testFileName.c_str(), (O_RDWR | O_TRUNC | O_CREAT), (S_IRUSR | S_IWUSR));\012    ASSERT_TRUE(fd &gt;= 0);\012\012 const int numFds = testStrings.size();\012    native_handle* h = native_handle_create(numFds, testData.size() /* numInts */);\012    std::memcpy(&amp;(h-&gt;data[numFds]), testData.data(), sizeof(testData));\012 for (size_t i = 0; i &lt; numFds; i++) {\012        h-&gt;data[i] = fd;\012 }\012\012    hidl_handle testHandle;\012    testHandle.setTo(h, false /* shouldOwn */);\012\012    EXPECT_OK(\012        safeunionInterface-&gt;newHandleTypeSafeUnion([&amp;](const HandleTypeSafeUnion&amp; safeUnion) {\012            EXPECT_OK(safeunionInterface-&gt;setHandleA(\012                safeUnion, testHandle, [&amp;](const HandleTypeSafeUnion&amp; safeUnion) {\012                    EXPECT_EQ(HandleTypeSafeUnion::hidl_discriminator::a,\012                              safeUnion.getDiscriminator());\012\012 const native_handle_t* result = safeUnion.a().getNativeHandle();\012                    checkNativeHandlesDataEquality(h, result);\012\012 for (size_t i = 0; i &lt; result-&gt;numFds; i++) {\012 // Original FDs should be dup'd\012 int resultFd = result-&gt;data[i];\012                        EXPECT_NE(h-&gt;data[i], resultFd);\012\012                        EXPECT_TRUE(android::base::WriteStringToFd(testStrings[i], resultFd));\012                        EXPECT_EQ(0, fsync(resultFd));\012 }\012 }));\012 }));\012\012    std::string result;\012    lseek(fd, 0, SEEK_SET);\012\012    EXPECT_TRUE(android::base::ReadFdToString(fd, &amp;result));\012    EXPECT_EQ(goldenResult, result);\012\012    native_handle_delete(h);\012    EXPECT_EQ(0, close(fd));\012    EXPECT_EQ(0, remove(testFileName.c_str()));\012},TEST_F(HidlTest, SafeUnionHandleWithMultipleFdsTest) {\012 const std::vector&lt;std::string&gt; testStrings{&quot;This &quot;, &quot;is &quot;, &quot;so &quot;, &quot;much &quot;, &quot;data!\n&quot;};\012 const std::string testFileName = &quot;/data/local/tmp/SafeUnionHandleWithMultipleFdsTest&quot;;\012 const std::array&lt;int, 6&gt; testData{2, -32, 10, -4329454, 11, 24};\012    ASSERT_EQ(sizeof(testData), testData.size() * sizeof(int));\012\012 const std::string goldenResult = std::accumulate(testStrings.begin(),\012                                                     testStrings.end(),\012                                                     std::string());\012\012 int fd = open(testFileName.c_str(), (O_RDWR | O_TRUNC | O_CREAT), (S_IRUSR | S_IWUSR));\012    ASSERT_TRUE(fd &gt;= 0);\012\012 const int numFds = testStrings.size();\012    native_handle* h = native_handle_create(numFds, testData.size() /* numInts */);\012    std::memcpy(&amp;(h-&gt;data[numFds]), testData.data(), sizeof(testData));\012 for (size_t i = 0; i &lt; numFds; i++) {\012        h-&gt;data[i] = fd;\012 }\012\012    hidl_handle testHandle;\012    testHandle.setTo(h, false /* shouldOwn */);\012\012    EXPECT_OK(\012        safeunionInterface-&gt;newHandleTypeSafeUnion([&amp;](const HandleTypeSafeUnion&amp; safeUnion) {\012            EXPECT_OK(safeunionInterface-&gt;setHandleA(\012                safeUnion, testHandle, [&amp;](const HandleTypeSafeUnion&amp; safeUnion) {\012                    EXPECT_EQ(HandleTypeSafeUnion::hidl_discriminator::a,\012                              safeUnion.getDiscriminator());\012\012 const native_handle_t* result = safeUnion.a().getNativeHandle();\012                    checkNativeHandlesDataEquality(h, result);\012\012 for (size_t i = 0; i &lt; result-&gt;numFds; i++) {\012 // Original FDs should be dup'd\012 int resultFd = result-&gt;data[i];\012                        EXPECT_NE(h-&gt;data[i], resultFd);\012\012                        EXPECT_TRUE(android::base::WriteStringToFd(testStrings[i], resultFd));\012                        EXPECT_EQ(0, fsync(resultFd));\012 }\012 }));\012 }));\012\012    std::string result;\012    lseek(fd, 0, SEEK_SET);\012\012    EXPECT_TRUE(android::base::ReadFdToString(fd, &amp;result));\012    EXPECT_EQ(goldenResult, result);\012\012    native_handle_delete(h);\012    EXPECT_EQ(0, close(fd));\012    EXPECT_EQ(0, remove(testFileName.c_str()));\012})<SUB>934</SUB>> ]
+"453" [label = <(UNKNOWN,TEST_F(HidlTest, SafeUnionEqualityTest) {\012    EXPECT_OK(safeunionInterface-&gt;newLargeSafeUnion([&amp;](const LargeSafeUnion&amp; one) {\012        EXPECT_OK(safeunionInterface-&gt;newLargeSafeUnion([&amp;](const LargeSafeUnion&amp; two) {\012            EXPECT_TRUE(one == two);\012            EXPECT_FALSE(one != two);\012 }));\012\012        EXPECT_OK(safeunionInterface-&gt;setA(one, 1, [&amp;](const LargeSafeUnion&amp; one) {\012            EXPECT_OK(safeunionInterface-&gt;newLargeSafeUnion([&amp;](const LargeSafeUnion&amp; two) {\012                EXPECT_FALSE(one == two);\012                EXPECT_TRUE(one != two);\012 }));\012\012            EXPECT_OK(safeunionInterface-&gt;newLargeSafeUnion([&amp;](const LargeSafeUnion&amp; two) {\012                EXPECT_OK(safeunionInterface-&gt;setB(two, 1, [&amp;](const LargeSafeUnion&amp; two) {\012                    EXPECT_FALSE(one == two);\012                    EXPECT_TRUE(one != two);\012 }));\012 }));\012\012            EXPECT_OK(safeunionInterface-&gt;newLargeSafeUnion([&amp;](const LargeSafeUnion&amp; two) {\012                EXPECT_OK(safeunionInterface-&gt;setA(two, 2, [&amp;](const LargeSafeUnion&amp; two) {\012                    EXPECT_FALSE(one == two);\012                    EXPECT_TRUE(one != two);\012 }));\012 }));\012\012            EXPECT_OK(safeunionInterface-&gt;newLargeSafeUnion([&amp;](const LargeSafeUnion&amp; two) {\012                EXPECT_OK(safeunionInterface-&gt;setA(two, 1, [&amp;](const LargeSafeUnion&amp; two) {\012                    EXPECT_TRUE(one == two);\012                    EXPECT_FALSE(one != two);\012 }));\012 }));\012 }));\012 }));\012},TEST_F(HidlTest, SafeUnionEqualityTest) {\012    EXPECT_OK(safeunionInterface-&gt;newLargeSafeUnion([&amp;](const LargeSafeUnion&amp; one) {\012        EXPECT_OK(safeunionInterface-&gt;newLargeSafeUnion([&amp;](const LargeSafeUnion&amp; two) {\012            EXPECT_TRUE(one == two);\012            EXPECT_FALSE(one != two);\012 }));\012\012        EXPECT_OK(safeunionInterface-&gt;setA(one, 1, [&amp;](const LargeSafeUnion&amp; one) {\012            EXPECT_OK(safeunionInterface-&gt;newLargeSafeUnion([&amp;](const LargeSafeUnion&amp; two) {\012                EXPECT_FALSE(one == two);\012                EXPECT_TRUE(one != two);\012 }));\012\012            EXPECT_OK(safeunionInterface-&gt;newLargeSafeUnion([&amp;](const LargeSafeUnion&amp; two) {\012                EXPECT_OK(safeunionInterface-&gt;setB(two, 1, [&amp;](const LargeSafeUnion&amp; two) {\012                    EXPECT_FALSE(one == two);\012                    EXPECT_TRUE(one != two);\012 }));\012 }));\012\012            EXPECT_OK(safeunionInterface-&gt;newLargeSafeUnion([&amp;](const LargeSafeUnion&amp; two) {\012                EXPECT_OK(safeunionInterface-&gt;setA(two, 2, [&amp;](const LargeSafeUnion&amp; two) {\012                    EXPECT_FALSE(one == two);\012                    EXPECT_TRUE(one != two);\012 }));\012 }));\012\012            EXPECT_OK(safeunionInterface-&gt;newLargeSafeUnion([&amp;](const LargeSafeUnion&amp; two) {\012                EXPECT_OK(safeunionInterface-&gt;setA(two, 1, [&amp;](const LargeSafeUnion&amp; two) {\012                    EXPECT_TRUE(one == two);\012                    EXPECT_FALSE(one != two);\012 }));\012 }));\012 }));\012 }));\012})<SUB>989</SUB>> ]
 "5" [label = <(METHOD,&lt;global&gt;)<SUB>1</SUB>> ]
 "605" [label = <(METHOD_RETURN,ANY)<SUB>1</SUB>> ]
   "225" -> "226" 
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_11/secure/out/13-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_11/vulnerable/out/13-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_11/secure/out/13-cfg.dot	2023-06-07 19:34:05.077392561 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_11/vulnerable/out/13-cfg.dot	2023-06-07 19:34:08.617392176 +0330
@@ -1,44 +1,44 @@
 digraph "numberToEnglish" {  
-"237" [label = <(&lt;operator&gt;.assignment,*const kDigits[] = {\012 &quot;zero&quot;,\012 &quot;one&quot;,\012 &quot;two&quot;,\012 &quot;three&quot;,\012 &quot;four&quot;,\012 &quot;five&quot;,\012 &quot;six&quot;,\012 &quot;seven&quot;,\012 &quot;eight&quot;,\012 &quot;nine&quot;,\012 })<SUB>306</SUB>> ]
-"343" [label = <(RETURN,return &quot;positively huge!&quot;;,return &quot;positively huge!&quot;;)<SUB>348</SUB>> ]
-"239" [label = <(&lt;operator&gt;.arrayInitializer,{\012 &quot;zero&quot;,\012 &quot;one&quot;,\012 &quot;two&quot;,\012 &quot;three&quot;,\012 &quot;four&quot;,\012 &quot;five&quot;,\012 &quot;six&quot;,\012 &quot;seven&quot;,\012 &quot;eight&quot;,\012 &quot;nine&quot;,\012 })<SUB>306</SUB>> ]
-"251" [label = <(&lt;operator&gt;.lessThan,x &lt; 0)<SUB>319</SUB>> ]
-"262" [label = <(&lt;operator&gt;.lessThan,x &lt; 10)<SUB>323</SUB>> ]
-"271" [label = <(&lt;operator&gt;.lessEqualsThan,x &lt;= 15)<SUB>327</SUB>> ]
-"292" [label = <(&lt;operator&gt;.lessThan,x &lt; 20)<SUB>335</SUB>> ]
-"309" [label = <(&lt;operator&gt;.lessThan,x &lt; 100)<SUB>339</SUB>> ]
-"255" [label = <(RETURN,return &quot;negative &quot; + numberToEnglish(-x);,return &quot;negative &quot; + numberToEnglish(-x);)<SUB>320</SUB>> ]
-"266" [label = <(RETURN,return kDigits[x];,return kDigits[x];)<SUB>324</SUB>> ]
-"276" [label = <(&lt;operator&gt;.assignment,*const kSpecialTens[] = {\012 &quot;ten&quot;, &quot;eleven&quot;, &quot;twelve&quot;, &quot;thirteen&quot;, &quot;fourteen&quot;, &quot;fifteen&quot;,\012 })<SUB>328</SUB>> ]
-"285" [label = <(RETURN,return kSpecialTens[x - 10];,return kSpecialTens[x - 10];)<SUB>332</SUB>> ]
-"296" [label = <(RETURN,return std::string(kDigits[x % 10]) + &quot;teen&quot;;,return std::string(kDigits[x % 10]) + &quot;teen&quot;;)<SUB>336</SUB>> ]
-"314" [label = <(&lt;operator&gt;.assignment,*const kDecades[] = {\012 &quot;twenty&quot;, &quot;thirty&quot;, &quot;forty&quot;, &quot;fifty&quot;, &quot;sixty&quot;, &quot;seventy&quot;,\012 &quot;eighty&quot;, &quot;ninety&quot;,\012 })<SUB>340</SUB>> ]
-"325" [label = <(RETURN,return std::string(kDecades[x / 10 - 2]) + kDigits[x % 10];,return std::string(kDecades[x / 10 - 2]) + kDigits[x % 10];)<SUB>345</SUB>> ]
-"256" [label = <(&lt;operator&gt;.addition,&quot;negative &quot; + numberToEnglish(-x))<SUB>320</SUB>> ]
-"267" [label = <(&lt;operator&gt;.indirectIndexAccess,kDigits[x])<SUB>324</SUB>> ]
-"278" [label = <(&lt;operator&gt;.arrayInitializer,{\012 &quot;ten&quot;, &quot;eleven&quot;, &quot;twelve&quot;, &quot;thirteen&quot;, &quot;fourteen&quot;, &quot;fifteen&quot;,\012 })<SUB>328</SUB>> ]
-"286" [label = <(&lt;operator&gt;.indirectIndexAccess,kSpecialTens[x - 10])<SUB>332</SUB>> ]
-"297" [label = <(&lt;operator&gt;.addition,std::string(kDigits[x % 10]) + &quot;teen&quot;)<SUB>336</SUB>> ]
-"316" [label = <(&lt;operator&gt;.arrayInitializer,{\012 &quot;twenty&quot;, &quot;thirty&quot;, &quot;forty&quot;, &quot;fifty&quot;, &quot;sixty&quot;, &quot;seventy&quot;,\012 &quot;eighty&quot;, &quot;ninety&quot;,\012 })<SUB>340</SUB>> ]
-"326" [label = <(&lt;operator&gt;.addition,std::string(kDecades[x / 10 - 2]) + kDigits[x % 10])<SUB>345</SUB>> ]
-"258" [label = <(numberToEnglish,numberToEnglish(-x))<SUB>320</SUB>> ]
-"288" [label = <(&lt;operator&gt;.subtraction,x - 10)<SUB>332</SUB>> ]
-"298" [label = <(std::string,std::string(kDigits[x % 10]))<SUB>336</SUB>> ]
-"327" [label = <(std::string,std::string(kDecades[x / 10 - 2]))<SUB>345</SUB>> ]
-"338" [label = <(&lt;operator&gt;.indirectIndexAccess,kDigits[x % 10])<SUB>345</SUB>> ]
-"259" [label = <(&lt;operator&gt;.minus,-x)<SUB>320</SUB>> ]
-"299" [label = <(&lt;operator&gt;.fieldAccess,std::string)<SUB>336</SUB>> ]
-"302" [label = <(&lt;operator&gt;.indirectIndexAccess,kDigits[x % 10])<SUB>336</SUB>> ]
-"328" [label = <(&lt;operator&gt;.fieldAccess,std::string)<SUB>345</SUB>> ]
-"331" [label = <(&lt;operator&gt;.indirectIndexAccess,kDecades[x / 10 - 2])<SUB>345</SUB>> ]
-"340" [label = <(&lt;operator&gt;.modulo,x % 10)<SUB>345</SUB>> ]
-"301" [label = <(FIELD_IDENTIFIER,string,string)<SUB>336</SUB>> ]
-"304" [label = <(&lt;operator&gt;.modulo,x % 10)<SUB>336</SUB>> ]
-"330" [label = <(FIELD_IDENTIFIER,string,string)<SUB>345</SUB>> ]
-"333" [label = <(&lt;operator&gt;.subtraction,x / 10 - 2)<SUB>345</SUB>> ]
-"334" [label = <(&lt;operator&gt;.division,x / 10)<SUB>345</SUB>> ]
-"233" [label = <(METHOD,numberToEnglish)<SUB>305</SUB>> ]
-"345" [label = <(METHOD_RETURN,string)<SUB>305</SUB>> ]
+"237" [label = <(&lt;operator&gt;.assignment,*const kDigits[] = {\012 &quot;zero&quot;,\012 &quot;one&quot;,\012 &quot;two&quot;,\012 &quot;three&quot;,\012 &quot;four&quot;,\012 &quot;five&quot;,\012 &quot;six&quot;,\012 &quot;seven&quot;,\012 &quot;eight&quot;,\012 &quot;nine&quot;,\012 })<SUB>308</SUB>> ]
+"343" [label = <(RETURN,return &quot;positively huge!&quot;;,return &quot;positively huge!&quot;;)<SUB>350</SUB>> ]
+"239" [label = <(&lt;operator&gt;.arrayInitializer,{\012 &quot;zero&quot;,\012 &quot;one&quot;,\012 &quot;two&quot;,\012 &quot;three&quot;,\012 &quot;four&quot;,\012 &quot;five&quot;,\012 &quot;six&quot;,\012 &quot;seven&quot;,\012 &quot;eight&quot;,\012 &quot;nine&quot;,\012 })<SUB>308</SUB>> ]
+"251" [label = <(&lt;operator&gt;.lessThan,x &lt; 0)<SUB>321</SUB>> ]
+"262" [label = <(&lt;operator&gt;.lessThan,x &lt; 10)<SUB>325</SUB>> ]
+"271" [label = <(&lt;operator&gt;.lessEqualsThan,x &lt;= 15)<SUB>329</SUB>> ]
+"292" [label = <(&lt;operator&gt;.lessThan,x &lt; 20)<SUB>337</SUB>> ]
+"309" [label = <(&lt;operator&gt;.lessThan,x &lt; 100)<SUB>341</SUB>> ]
+"255" [label = <(RETURN,return &quot;negative &quot; + numberToEnglish(-x);,return &quot;negative &quot; + numberToEnglish(-x);)<SUB>322</SUB>> ]
+"266" [label = <(RETURN,return kDigits[x];,return kDigits[x];)<SUB>326</SUB>> ]
+"276" [label = <(&lt;operator&gt;.assignment,*const kSpecialTens[] = {\012 &quot;ten&quot;, &quot;eleven&quot;, &quot;twelve&quot;, &quot;thirteen&quot;, &quot;fourteen&quot;, &quot;fifteen&quot;,\012 })<SUB>330</SUB>> ]
+"285" [label = <(RETURN,return kSpecialTens[x - 10];,return kSpecialTens[x - 10];)<SUB>334</SUB>> ]
+"296" [label = <(RETURN,return std::string(kDigits[x % 10]) + &quot;teen&quot;;,return std::string(kDigits[x % 10]) + &quot;teen&quot;;)<SUB>338</SUB>> ]
+"314" [label = <(&lt;operator&gt;.assignment,*const kDecades[] = {\012 &quot;twenty&quot;, &quot;thirty&quot;, &quot;forty&quot;, &quot;fifty&quot;, &quot;sixty&quot;, &quot;seventy&quot;,\012 &quot;eighty&quot;, &quot;ninety&quot;,\012 })<SUB>342</SUB>> ]
+"325" [label = <(RETURN,return std::string(kDecades[x / 10 - 2]) + kDigits[x % 10];,return std::string(kDecades[x / 10 - 2]) + kDigits[x % 10];)<SUB>347</SUB>> ]
+"256" [label = <(&lt;operator&gt;.addition,&quot;negative &quot; + numberToEnglish(-x))<SUB>322</SUB>> ]
+"267" [label = <(&lt;operator&gt;.indirectIndexAccess,kDigits[x])<SUB>326</SUB>> ]
+"278" [label = <(&lt;operator&gt;.arrayInitializer,{\012 &quot;ten&quot;, &quot;eleven&quot;, &quot;twelve&quot;, &quot;thirteen&quot;, &quot;fourteen&quot;, &quot;fifteen&quot;,\012 })<SUB>330</SUB>> ]
+"286" [label = <(&lt;operator&gt;.indirectIndexAccess,kSpecialTens[x - 10])<SUB>334</SUB>> ]
+"297" [label = <(&lt;operator&gt;.addition,std::string(kDigits[x % 10]) + &quot;teen&quot;)<SUB>338</SUB>> ]
+"316" [label = <(&lt;operator&gt;.arrayInitializer,{\012 &quot;twenty&quot;, &quot;thirty&quot;, &quot;forty&quot;, &quot;fifty&quot;, &quot;sixty&quot;, &quot;seventy&quot;,\012 &quot;eighty&quot;, &quot;ninety&quot;,\012 })<SUB>342</SUB>> ]
+"326" [label = <(&lt;operator&gt;.addition,std::string(kDecades[x / 10 - 2]) + kDigits[x % 10])<SUB>347</SUB>> ]
+"258" [label = <(numberToEnglish,numberToEnglish(-x))<SUB>322</SUB>> ]
+"288" [label = <(&lt;operator&gt;.subtraction,x - 10)<SUB>334</SUB>> ]
+"298" [label = <(std::string,std::string(kDigits[x % 10]))<SUB>338</SUB>> ]
+"327" [label = <(std::string,std::string(kDecades[x / 10 - 2]))<SUB>347</SUB>> ]
+"338" [label = <(&lt;operator&gt;.indirectIndexAccess,kDigits[x % 10])<SUB>347</SUB>> ]
+"259" [label = <(&lt;operator&gt;.minus,-x)<SUB>322</SUB>> ]
+"299" [label = <(&lt;operator&gt;.fieldAccess,std::string)<SUB>338</SUB>> ]
+"302" [label = <(&lt;operator&gt;.indirectIndexAccess,kDigits[x % 10])<SUB>338</SUB>> ]
+"328" [label = <(&lt;operator&gt;.fieldAccess,std::string)<SUB>347</SUB>> ]
+"331" [label = <(&lt;operator&gt;.indirectIndexAccess,kDecades[x / 10 - 2])<SUB>347</SUB>> ]
+"340" [label = <(&lt;operator&gt;.modulo,x % 10)<SUB>347</SUB>> ]
+"301" [label = <(FIELD_IDENTIFIER,string,string)<SUB>338</SUB>> ]
+"304" [label = <(&lt;operator&gt;.modulo,x % 10)<SUB>338</SUB>> ]
+"330" [label = <(FIELD_IDENTIFIER,string,string)<SUB>347</SUB>> ]
+"333" [label = <(&lt;operator&gt;.subtraction,x / 10 - 2)<SUB>347</SUB>> ]
+"334" [label = <(&lt;operator&gt;.division,x / 10)<SUB>347</SUB>> ]
+"233" [label = <(METHOD,numberToEnglish)<SUB>307</SUB>> ]
+"345" [label = <(METHOD_RETURN,string)<SUB>307</SUB>> ]
   "237" -> "251" 
   "343" -> "345" 
   "239" -> "237" 
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_11/secure/out/14-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_11/vulnerable/out/14-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_11/secure/out/14-cfg.dot	2023-06-07 19:34:05.077392561 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_11/vulnerable/out/14-cfg.dot	2023-06-07 19:34:08.627392175 +0330
@@ -1,45 +1,45 @@
 digraph "checkNativeHandlesDataEquality" {  
-"394" [label = <(ASSERT_NE,ASSERT_NE(reference, result))<SUB>713</SUB>> ]
-"397" [label = <(ASSERT_EQ,ASSERT_EQ(reference-&gt;version, result-&gt;version))<SUB>714</SUB>> ]
-"404" [label = <(EXPECT_EQ,EXPECT_EQ(reference-&gt;numFds, result-&gt;numFds))<SUB>715</SUB>> ]
-"411" [label = <(EXPECT_EQ,EXPECT_EQ(reference-&gt;numInts, result-&gt;numInts))<SUB>716</SUB>> ]
-"419" [label = <(&lt;operator&gt;.assignment,offset = reference-&gt;numFds)<SUB>718</SUB>> ]
-"425" [label = <(&lt;operator&gt;.assignment,numInts = reference-&gt;numInts)<SUB>719</SUB>> ]
-"430" [label = <(EXPECT_TRUE,EXPECT_TRUE(isArrayEqual(&amp;(reference-&gt;data[offset]), &amp;(result-&gt;data[offset]), numInts)))<SUB>720</SUB>> ]
-"378" [label = <(&lt;operator&gt;.logicalOr,reference == nullptr || result == nullptr)<SUB>708</SUB>> ]
-"398" [label = <(&lt;operator&gt;.indirectFieldAccess,reference-&gt;version)<SUB>714</SUB>> ]
-"401" [label = <(&lt;operator&gt;.indirectFieldAccess,result-&gt;version)<SUB>714</SUB>> ]
-"405" [label = <(&lt;operator&gt;.indirectFieldAccess,reference-&gt;numFds)<SUB>715</SUB>> ]
-"408" [label = <(&lt;operator&gt;.indirectFieldAccess,result-&gt;numFds)<SUB>715</SUB>> ]
-"412" [label = <(&lt;operator&gt;.indirectFieldAccess,reference-&gt;numInts)<SUB>716</SUB>> ]
-"415" [label = <(&lt;operator&gt;.indirectFieldAccess,result-&gt;numInts)<SUB>716</SUB>> ]
-"421" [label = <(&lt;operator&gt;.indirectFieldAccess,reference-&gt;numFds)<SUB>718</SUB>> ]
-"427" [label = <(&lt;operator&gt;.indirectFieldAccess,reference-&gt;numInts)<SUB>719</SUB>> ]
-"431" [label = <(isArrayEqual,isArrayEqual(&amp;(reference-&gt;data[offset]), &amp;(result-&gt;data[offset]), numInts))<SUB>720</SUB>> ]
-"379" [label = <(&lt;operator&gt;.equals,reference == nullptr)<SUB>708</SUB>> ]
-"382" [label = <(&lt;operator&gt;.equals,result == nullptr)<SUB>708</SUB>> ]
-"386" [label = <(EXPECT_EQ,EXPECT_EQ(reference == nullptr, result == nullptr))<SUB>709</SUB>> ]
-"393" [label = <(RETURN,return;,return;)<SUB>710</SUB>> ]
-"400" [label = <(FIELD_IDENTIFIER,version,version)<SUB>714</SUB>> ]
-"403" [label = <(FIELD_IDENTIFIER,version,version)<SUB>714</SUB>> ]
-"407" [label = <(FIELD_IDENTIFIER,numFds,numFds)<SUB>715</SUB>> ]
-"410" [label = <(FIELD_IDENTIFIER,numFds,numFds)<SUB>715</SUB>> ]
-"414" [label = <(FIELD_IDENTIFIER,numInts,numInts)<SUB>716</SUB>> ]
-"417" [label = <(FIELD_IDENTIFIER,numInts,numInts)<SUB>716</SUB>> ]
-"423" [label = <(FIELD_IDENTIFIER,numFds,numFds)<SUB>718</SUB>> ]
-"429" [label = <(FIELD_IDENTIFIER,numInts,numInts)<SUB>719</SUB>> ]
-"432" [label = <(&lt;operator&gt;.addressOf,&amp;(reference-&gt;data[offset]))<SUB>720</SUB>> ]
-"438" [label = <(&lt;operator&gt;.addressOf,&amp;(result-&gt;data[offset]))<SUB>720</SUB>> ]
-"387" [label = <(&lt;operator&gt;.equals,reference == nullptr)<SUB>709</SUB>> ]
-"390" [label = <(&lt;operator&gt;.equals,result == nullptr)<SUB>709</SUB>> ]
-"433" [label = <(&lt;operator&gt;.indirectIndexAccess,reference-&gt;data[offset])<SUB>720</SUB>> ]
-"439" [label = <(&lt;operator&gt;.indirectIndexAccess,result-&gt;data[offset])<SUB>720</SUB>> ]
-"434" [label = <(&lt;operator&gt;.indirectFieldAccess,reference-&gt;data)<SUB>720</SUB>> ]
-"440" [label = <(&lt;operator&gt;.indirectFieldAccess,result-&gt;data)<SUB>720</SUB>> ]
-"436" [label = <(FIELD_IDENTIFIER,data,data)<SUB>720</SUB>> ]
-"442" [label = <(FIELD_IDENTIFIER,data,data)<SUB>720</SUB>> ]
-"373" [label = <(METHOD,checkNativeHandlesDataEquality)<SUB>706</SUB>> ]
-"445" [label = <(METHOD_RETURN,void)<SUB>706</SUB>> ]
+"394" [label = <(ASSERT_NE,ASSERT_NE(reference, result))<SUB>715</SUB>> ]
+"397" [label = <(ASSERT_EQ,ASSERT_EQ(reference-&gt;version, result-&gt;version))<SUB>716</SUB>> ]
+"404" [label = <(EXPECT_EQ,EXPECT_EQ(reference-&gt;numFds, result-&gt;numFds))<SUB>717</SUB>> ]
+"411" [label = <(EXPECT_EQ,EXPECT_EQ(reference-&gt;numInts, result-&gt;numInts))<SUB>718</SUB>> ]
+"419" [label = <(&lt;operator&gt;.assignment,offset = reference-&gt;numFds)<SUB>720</SUB>> ]
+"425" [label = <(&lt;operator&gt;.assignment,numInts = reference-&gt;numInts)<SUB>721</SUB>> ]
+"430" [label = <(EXPECT_TRUE,EXPECT_TRUE(isArrayEqual(&amp;(reference-&gt;data[offset]), &amp;(result-&gt;data[offset]), numInts)))<SUB>722</SUB>> ]
+"378" [label = <(&lt;operator&gt;.logicalOr,reference == nullptr || result == nullptr)<SUB>710</SUB>> ]
+"398" [label = <(&lt;operator&gt;.indirectFieldAccess,reference-&gt;version)<SUB>716</SUB>> ]
+"401" [label = <(&lt;operator&gt;.indirectFieldAccess,result-&gt;version)<SUB>716</SUB>> ]
+"405" [label = <(&lt;operator&gt;.indirectFieldAccess,reference-&gt;numFds)<SUB>717</SUB>> ]
+"408" [label = <(&lt;operator&gt;.indirectFieldAccess,result-&gt;numFds)<SUB>717</SUB>> ]
+"412" [label = <(&lt;operator&gt;.indirectFieldAccess,reference-&gt;numInts)<SUB>718</SUB>> ]
+"415" [label = <(&lt;operator&gt;.indirectFieldAccess,result-&gt;numInts)<SUB>718</SUB>> ]
+"421" [label = <(&lt;operator&gt;.indirectFieldAccess,reference-&gt;numFds)<SUB>720</SUB>> ]
+"427" [label = <(&lt;operator&gt;.indirectFieldAccess,reference-&gt;numInts)<SUB>721</SUB>> ]
+"431" [label = <(isArrayEqual,isArrayEqual(&amp;(reference-&gt;data[offset]), &amp;(result-&gt;data[offset]), numInts))<SUB>722</SUB>> ]
+"379" [label = <(&lt;operator&gt;.equals,reference == nullptr)<SUB>710</SUB>> ]
+"382" [label = <(&lt;operator&gt;.equals,result == nullptr)<SUB>710</SUB>> ]
+"386" [label = <(EXPECT_EQ,EXPECT_EQ(reference == nullptr, result == nullptr))<SUB>711</SUB>> ]
+"393" [label = <(RETURN,return;,return;)<SUB>712</SUB>> ]
+"400" [label = <(FIELD_IDENTIFIER,version,version)<SUB>716</SUB>> ]
+"403" [label = <(FIELD_IDENTIFIER,version,version)<SUB>716</SUB>> ]
+"407" [label = <(FIELD_IDENTIFIER,numFds,numFds)<SUB>717</SUB>> ]
+"410" [label = <(FIELD_IDENTIFIER,numFds,numFds)<SUB>717</SUB>> ]
+"414" [label = <(FIELD_IDENTIFIER,numInts,numInts)<SUB>718</SUB>> ]
+"417" [label = <(FIELD_IDENTIFIER,numInts,numInts)<SUB>718</SUB>> ]
+"423" [label = <(FIELD_IDENTIFIER,numFds,numFds)<SUB>720</SUB>> ]
+"429" [label = <(FIELD_IDENTIFIER,numInts,numInts)<SUB>721</SUB>> ]
+"432" [label = <(&lt;operator&gt;.addressOf,&amp;(reference-&gt;data[offset]))<SUB>722</SUB>> ]
+"438" [label = <(&lt;operator&gt;.addressOf,&amp;(result-&gt;data[offset]))<SUB>722</SUB>> ]
+"387" [label = <(&lt;operator&gt;.equals,reference == nullptr)<SUB>711</SUB>> ]
+"390" [label = <(&lt;operator&gt;.equals,result == nullptr)<SUB>711</SUB>> ]
+"433" [label = <(&lt;operator&gt;.indirectIndexAccess,reference-&gt;data[offset])<SUB>722</SUB>> ]
+"439" [label = <(&lt;operator&gt;.indirectIndexAccess,result-&gt;data[offset])<SUB>722</SUB>> ]
+"434" [label = <(&lt;operator&gt;.indirectFieldAccess,reference-&gt;data)<SUB>722</SUB>> ]
+"440" [label = <(&lt;operator&gt;.indirectFieldAccess,result-&gt;data)<SUB>722</SUB>> ]
+"436" [label = <(FIELD_IDENTIFIER,data,data)<SUB>722</SUB>> ]
+"442" [label = <(FIELD_IDENTIFIER,data,data)<SUB>722</SUB>> ]
+"373" [label = <(METHOD,checkNativeHandlesDataEquality)<SUB>708</SUB>> ]
+"445" [label = <(METHOD_RETURN,void)<SUB>708</SUB>> ]
   "394" -> "400" 
   "397" -> "407" 
   "404" -> "414" 
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_11/secure/out/15-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_11/vulnerable/out/15-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_11/secure/out/15-cfg.dot	2023-06-07 19:34:05.087392560 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_11/vulnerable/out/15-cfg.dot	2023-06-07 19:34:08.627392175 +0330
@@ -1,66 +1,66 @@
 digraph "main" {  
-"458" [label = <(setenv,setenv(&quot;TREBLE_TESTING_OVERRIDE&quot;, &quot;true&quot;, true))<SUB>1025</SUB>> ]
-"463" [label = <(&lt;operator&gt;.assignment,*me = argv[0])<SUB>1029</SUB>> ]
-"469" [label = <(&lt;operator&gt;.assignment,wantClient = false)<SUB>1031</SUB>> ]
-"473" [label = <(&lt;operator&gt;.assignment,wantServer = false)<SUB>1032</SUB>> ]
-"553" [label = <(configureRpcThreadpool,configureRpcThreadpool(1, true))<SUB>1073</SUB>> ]
-"556" [label = <(&lt;operator&gt;.assignment,status = registerPassthroughServiceImplementation&lt;IBaz&gt;())<SUB>1075</SUB>> ]
-"559" [label = <(&lt;operator&gt;.shiftLeft,CHECK(status == ::android::OK) &lt;&lt; &quot;IBaz didn't register&quot;)<SUB>1076</SUB>> ]
-"567" [label = <(&lt;operator&gt;.assignment,status = registerPassthroughServiceImplementation&lt;ISafeUnion&gt;())<SUB>1078</SUB>> ]
-"570" [label = <(&lt;operator&gt;.shiftLeft,CHECK(status == ::android::OK) &lt;&lt; &quot;ISafeUnion didn't register&quot;)<SUB>1079</SUB>> ]
-"578" [label = <(&lt;operator&gt;.assignment,sp&lt;IOtherInterface&gt; otherInterface = new OtherInterface())<SUB>1081</SUB>> ]
-"586" [label = <(&lt;operator&gt;.assignment,status = otherInterface-&gt;registerAsService())<SUB>1082</SUB>> ]
-"592" [label = <(&lt;operator&gt;.shiftLeft,CHECK(status == ::android::OK) &lt;&lt; &quot;IOtherInterface didn't register&quot;)<SUB>1083</SUB>> ]
-"600" [label = <(joinRpcThreadpool,joinRpcThreadpool())<SUB>1085</SUB>> ]
-"601" [label = <(RETURN,return 0;,return 0;)<SUB>1086</SUB>> ]
-"465" [label = <(&lt;operator&gt;.indirectIndexAccess,argv[0])<SUB>1029</SUB>> ]
-"478" [label = <(&lt;operator&gt;.greaterEqualsThan,(res = getopt(argc, argv, &quot;chs&quot;)) &gt;= 0)<SUB>1035</SUB>> ]
-"516" [label = <(&lt;operator&gt;.logicalOr,(!wantClient &amp;&amp; !wantServer) || (wantClient &amp;&amp; wantServer))<SUB>1060</SUB>> ]
-"558" [label = <(registerPassthroughServiceImplementation&lt;IBaz&gt;,registerPassthroughServiceImplementation&lt;IBaz&gt;())<SUB>1075</SUB>> ]
-"560" [label = <(CHECK,CHECK(status == ::android::OK))<SUB>1076</SUB>> ]
-"569" [label = <(registerPassthroughServiceImplementation&lt;ISafeUnion&gt;,registerPassthroughServiceImplementation&lt;ISafeUnion&gt;())<SUB>1078</SUB>> ]
-"571" [label = <(CHECK,CHECK(status == ::android::OK))<SUB>1079</SUB>> ]
-"579" [label = <(&lt;operator&gt;.greaterThan,sp&lt;IOtherInterface&gt; otherInterface)<SUB>1081</SUB>> ]
-"584" [label = <(&lt;operator&gt;.new,new OtherInterface())<SUB>1081</SUB>> ]
-"588" [label = <(registerAsService,otherInterface-&gt;registerAsService())<SUB>1082</SUB>> ]
-"593" [label = <(CHECK,CHECK(status == ::android::OK))<SUB>1083</SUB>> ]
-"479" [label = <(&lt;operator&gt;.assignment,res = getopt(argc, argv, &quot;chs&quot;))<SUB>1035</SUB>> ]
-"517" [label = <(&lt;operator&gt;.logicalAnd,!wantClient &amp;&amp; !wantServer)<SUB>1060</SUB>> ]
-"522" [label = <(&lt;operator&gt;.logicalAnd,wantClient &amp;&amp; wantServer)<SUB>1060</SUB>> ]
-"526" [label = <(usage,usage(me))<SUB>1061</SUB>> ]
-"528" [label = <(exit,exit(1))<SUB>1062</SUB>> ]
-"533" [label = <(::testing::AddGlobalTestEnvironment,::testing::AddGlobalTestEnvironment(new HidlEnvironment))<SUB>1066</SUB>> ]
-"539" [label = <(::testing::InitGoogleTest,::testing::InitGoogleTest(&amp;argc, argv))<SUB>1067</SUB>> ]
-"547" [label = <(&lt;operator&gt;.assignment,status = RUN_ALL_TESTS())<SUB>1068</SUB>> ]
-"550" [label = <(RETURN,return status;,return status;)<SUB>1069</SUB>> ]
-"561" [label = <(&lt;operator&gt;.equals,status == ::android::OK)<SUB>1076</SUB>> ]
-"572" [label = <(&lt;operator&gt;.equals,status == ::android::OK)<SUB>1079</SUB>> ]
-"580" [label = <(&lt;operator&gt;.lessThan,sp&lt;IOtherInterface)<SUB>1081</SUB>> ]
-"589" [label = <(&lt;operator&gt;.indirectFieldAccess,otherInterface-&gt;registerAsService)<SUB>1082</SUB>> ]
-"594" [label = <(&lt;operator&gt;.equals,status == ::android::OK)<SUB>1083</SUB>> ]
-"481" [label = <(getopt,getopt(argc, argv, &quot;chs&quot;))<SUB>1035</SUB>> ]
-"518" [label = <(&lt;operator&gt;.logicalNot,!wantClient)<SUB>1060</SUB>> ]
-"520" [label = <(&lt;operator&gt;.logicalNot,!wantServer)<SUB>1060</SUB>> ]
-"534" [label = <(&lt;operator&gt;.fieldAccess,::testing::AddGlobalTestEnvironment)<SUB>1066</SUB>> ]
-"537" [label = <(&lt;operator&gt;.new,new HidlEnvironment)<SUB>1066</SUB>> ]
-"540" [label = <(&lt;operator&gt;.fieldAccess,::testing::InitGoogleTest)<SUB>1067</SUB>> ]
-"543" [label = <(&lt;operator&gt;.addressOf,&amp;argc)<SUB>1067</SUB>> ]
-"549" [label = <(RUN_ALL_TESTS,RUN_ALL_TESTS())<SUB>1068</SUB>> ]
-"563" [label = <(&lt;operator&gt;.fieldAccess,::android::OK)<SUB>1076</SUB>> ]
-"574" [label = <(&lt;operator&gt;.fieldAccess,::android::OK)<SUB>1079</SUB>> ]
-"591" [label = <(FIELD_IDENTIFIER,registerAsService,registerAsService)<SUB>1082</SUB>> ]
-"596" [label = <(&lt;operator&gt;.fieldAccess,::android::OK)<SUB>1083</SUB>> ]
-"536" [label = <(FIELD_IDENTIFIER,AddGlobalTestEnvironment,AddGlobalTestEnvironment)<SUB>1066</SUB>> ]
-"542" [label = <(FIELD_IDENTIFIER,InitGoogleTest,InitGoogleTest)<SUB>1067</SUB>> ]
-"565" [label = <(FIELD_IDENTIFIER,OK,OK)<SUB>1076</SUB>> ]
-"576" [label = <(FIELD_IDENTIFIER,OK,OK)<SUB>1079</SUB>> ]
-"598" [label = <(FIELD_IDENTIFIER,OK,OK)<SUB>1083</SUB>> ]
-"493" [label = <(&lt;operator&gt;.assignment,wantClient = true)<SUB>1039</SUB>> ]
-"500" [label = <(&lt;operator&gt;.assignment,wantServer = true)<SUB>1045</SUB>> ]
-"510" [label = <(usage,usage(me))<SUB>1053</SUB>> ]
-"512" [label = <(exit,exit(1))<SUB>1054</SUB>> ]
-"454" [label = <(METHOD,main)<SUB>1024</SUB>> ]
-"603" [label = <(METHOD_RETURN,int)<SUB>1024</SUB>> ]
+"458" [label = <(setenv,setenv(&quot;TREBLE_TESTING_OVERRIDE&quot;, &quot;true&quot;, true))<SUB>1027</SUB>> ]
+"463" [label = <(&lt;operator&gt;.assignment,*me = argv[0])<SUB>1031</SUB>> ]
+"469" [label = <(&lt;operator&gt;.assignment,wantClient = false)<SUB>1033</SUB>> ]
+"473" [label = <(&lt;operator&gt;.assignment,wantServer = false)<SUB>1034</SUB>> ]
+"553" [label = <(configureRpcThreadpool,configureRpcThreadpool(1, true))<SUB>1075</SUB>> ]
+"556" [label = <(&lt;operator&gt;.assignment,status = registerPassthroughServiceImplementation&lt;IBaz&gt;())<SUB>1077</SUB>> ]
+"559" [label = <(&lt;operator&gt;.shiftLeft,CHECK(status == ::android::OK) &lt;&lt; &quot;IBaz didn't register&quot;)<SUB>1078</SUB>> ]
+"567" [label = <(&lt;operator&gt;.assignment,status = registerPassthroughServiceImplementation&lt;ISafeUnion&gt;())<SUB>1080</SUB>> ]
+"570" [label = <(&lt;operator&gt;.shiftLeft,CHECK(status == ::android::OK) &lt;&lt; &quot;ISafeUnion didn't register&quot;)<SUB>1081</SUB>> ]
+"578" [label = <(&lt;operator&gt;.assignment,sp&lt;IOtherInterface&gt; otherInterface = new OtherInterface())<SUB>1083</SUB>> ]
+"586" [label = <(&lt;operator&gt;.assignment,status = otherInterface-&gt;registerAsService())<SUB>1084</SUB>> ]
+"592" [label = <(&lt;operator&gt;.shiftLeft,CHECK(status == ::android::OK) &lt;&lt; &quot;IOtherInterface didn't register&quot;)<SUB>1085</SUB>> ]
+"600" [label = <(joinRpcThreadpool,joinRpcThreadpool())<SUB>1087</SUB>> ]
+"601" [label = <(RETURN,return 0;,return 0;)<SUB>1088</SUB>> ]
+"465" [label = <(&lt;operator&gt;.indirectIndexAccess,argv[0])<SUB>1031</SUB>> ]
+"478" [label = <(&lt;operator&gt;.greaterEqualsThan,(res = getopt(argc, argv, &quot;chs&quot;)) &gt;= 0)<SUB>1037</SUB>> ]
+"516" [label = <(&lt;operator&gt;.logicalOr,(!wantClient &amp;&amp; !wantServer) || (wantClient &amp;&amp; wantServer))<SUB>1062</SUB>> ]
+"558" [label = <(registerPassthroughServiceImplementation&lt;IBaz&gt;,registerPassthroughServiceImplementation&lt;IBaz&gt;())<SUB>1077</SUB>> ]
+"560" [label = <(CHECK,CHECK(status == ::android::OK))<SUB>1078</SUB>> ]
+"569" [label = <(registerPassthroughServiceImplementation&lt;ISafeUnion&gt;,registerPassthroughServiceImplementation&lt;ISafeUnion&gt;())<SUB>1080</SUB>> ]
+"571" [label = <(CHECK,CHECK(status == ::android::OK))<SUB>1081</SUB>> ]
+"579" [label = <(&lt;operator&gt;.greaterThan,sp&lt;IOtherInterface&gt; otherInterface)<SUB>1083</SUB>> ]
+"584" [label = <(&lt;operator&gt;.new,new OtherInterface())<SUB>1083</SUB>> ]
+"588" [label = <(registerAsService,otherInterface-&gt;registerAsService())<SUB>1084</SUB>> ]
+"593" [label = <(CHECK,CHECK(status == ::android::OK))<SUB>1085</SUB>> ]
+"479" [label = <(&lt;operator&gt;.assignment,res = getopt(argc, argv, &quot;chs&quot;))<SUB>1037</SUB>> ]
+"517" [label = <(&lt;operator&gt;.logicalAnd,!wantClient &amp;&amp; !wantServer)<SUB>1062</SUB>> ]
+"522" [label = <(&lt;operator&gt;.logicalAnd,wantClient &amp;&amp; wantServer)<SUB>1062</SUB>> ]
+"526" [label = <(usage,usage(me))<SUB>1063</SUB>> ]
+"528" [label = <(exit,exit(1))<SUB>1064</SUB>> ]
+"533" [label = <(::testing::AddGlobalTestEnvironment,::testing::AddGlobalTestEnvironment(new HidlEnvironment))<SUB>1068</SUB>> ]
+"539" [label = <(::testing::InitGoogleTest,::testing::InitGoogleTest(&amp;argc, argv))<SUB>1069</SUB>> ]
+"547" [label = <(&lt;operator&gt;.assignment,status = RUN_ALL_TESTS())<SUB>1070</SUB>> ]
+"550" [label = <(RETURN,return status;,return status;)<SUB>1071</SUB>> ]
+"561" [label = <(&lt;operator&gt;.equals,status == ::android::OK)<SUB>1078</SUB>> ]
+"572" [label = <(&lt;operator&gt;.equals,status == ::android::OK)<SUB>1081</SUB>> ]
+"580" [label = <(&lt;operator&gt;.lessThan,sp&lt;IOtherInterface)<SUB>1083</SUB>> ]
+"589" [label = <(&lt;operator&gt;.indirectFieldAccess,otherInterface-&gt;registerAsService)<SUB>1084</SUB>> ]
+"594" [label = <(&lt;operator&gt;.equals,status == ::android::OK)<SUB>1085</SUB>> ]
+"481" [label = <(getopt,getopt(argc, argv, &quot;chs&quot;))<SUB>1037</SUB>> ]
+"518" [label = <(&lt;operator&gt;.logicalNot,!wantClient)<SUB>1062</SUB>> ]
+"520" [label = <(&lt;operator&gt;.logicalNot,!wantServer)<SUB>1062</SUB>> ]
+"534" [label = <(&lt;operator&gt;.fieldAccess,::testing::AddGlobalTestEnvironment)<SUB>1068</SUB>> ]
+"537" [label = <(&lt;operator&gt;.new,new HidlEnvironment)<SUB>1068</SUB>> ]
+"540" [label = <(&lt;operator&gt;.fieldAccess,::testing::InitGoogleTest)<SUB>1069</SUB>> ]
+"543" [label = <(&lt;operator&gt;.addressOf,&amp;argc)<SUB>1069</SUB>> ]
+"549" [label = <(RUN_ALL_TESTS,RUN_ALL_TESTS())<SUB>1070</SUB>> ]
+"563" [label = <(&lt;operator&gt;.fieldAccess,::android::OK)<SUB>1078</SUB>> ]
+"574" [label = <(&lt;operator&gt;.fieldAccess,::android::OK)<SUB>1081</SUB>> ]
+"591" [label = <(FIELD_IDENTIFIER,registerAsService,registerAsService)<SUB>1084</SUB>> ]
+"596" [label = <(&lt;operator&gt;.fieldAccess,::android::OK)<SUB>1085</SUB>> ]
+"536" [label = <(FIELD_IDENTIFIER,AddGlobalTestEnvironment,AddGlobalTestEnvironment)<SUB>1068</SUB>> ]
+"542" [label = <(FIELD_IDENTIFIER,InitGoogleTest,InitGoogleTest)<SUB>1069</SUB>> ]
+"565" [label = <(FIELD_IDENTIFIER,OK,OK)<SUB>1078</SUB>> ]
+"576" [label = <(FIELD_IDENTIFIER,OK,OK)<SUB>1081</SUB>> ]
+"598" [label = <(FIELD_IDENTIFIER,OK,OK)<SUB>1085</SUB>> ]
+"493" [label = <(&lt;operator&gt;.assignment,wantClient = true)<SUB>1041</SUB>> ]
+"500" [label = <(&lt;operator&gt;.assignment,wantServer = true)<SUB>1047</SUB>> ]
+"510" [label = <(usage,usage(me))<SUB>1055</SUB>> ]
+"512" [label = <(exit,exit(1))<SUB>1056</SUB>> ]
+"454" [label = <(METHOD,main)<SUB>1026</SUB>> ]
+"603" [label = <(METHOD_RETURN,int)<SUB>1026</SUB>> ]
   "458" -> "465" 
   "463" -> "469" 
   "469" -> "473" 
