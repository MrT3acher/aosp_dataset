diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/0-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/0-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/0-cfg.dot	2023-06-07 19:33:45.147394720 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/0-cfg.dot	2023-06-07 19:33:51.907393995 +0330
@@ -1,5 +1,1255 @@
-digraph "anonymous_lambda_8" {  
-"3" [label = <(METHOD,anonymous_lambda_8)<SUB>105</SUB>> ]
-"5" [label = <(METHOD_RETURN,ANY)<SUB>105</SUB>> ]
-  "3" -> "5" 
+digraph "&lt;global&gt;" {  
+"66" [label = <(UNKNOWN,),))<SUB>129</SUB>> ]
+"67" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012  DCHECK_NE(field-&gt;GetTypeAsPrimitiveType(), Primitive::kPrimNot);,REQUIRES_SHARED(Locks::mutator_lock_) {\012  DCHECK_NE(field-&gt;GetTypeAsPrimitiveType(), Primitive::kPrimNot);)<SUB>130</SUB>> ]
+"69" [label = <(&lt;operator&gt;.assignment,* instrumentation = Runtime::Current()-&gt;GetInstrumentation())<SUB>132</SUB>> ]
+"78" [label = <(UNKNOWN,if (UNLIKELY(instrumentation-&gt;HasFieldWriteListeners())) {\012 Thread* self = Thread::Current();\012 ArtMethod* cur_method = self-&gt;GetCurrentMethod(/*dex_pc*/ nullptr,\012 /*check_suspended*/ true,\012 /*abort_on_error*/ false);\012\012 if (cur_method == nullptr) {\012 // Set/Get Fields can be issued without a method during runtime startup/teardown. Ignore all\012 // of these changes.\012 return;\012 }\012    DCHECK(cur_method-&gt;IsNative());\012    instrumentation-&gt;FieldWriteEvent(self,\012                                     self-&gt;DecodeJObject(obj).Ptr(),\012                                     cur_method,\012 0, // dex_pc is always 0 since this is a native method.\012                                     field,\012                                     val);\012 },if (UNLIKELY(instrumentation-&gt;HasFieldWriteListeners())) {\012 Thread* self = Thread::Current();\012 ArtMethod* cur_method = self-&gt;GetCurrentMethod(/*dex_pc*/ nullptr,\012 /*check_suspended*/ true,\012 /*abort_on_error*/ false);\012\012 if (cur_method == nullptr) {\012 // Set/Get Fields can be issued without a method during runtime startup/teardown. Ignore all\012 // of these changes.\012 return;\012 }\012    DCHECK(cur_method-&gt;IsNative());\012    instrumentation-&gt;FieldWriteEvent(self,\012                                     self-&gt;DecodeJObject(obj).Ptr(),\012                                     cur_method,\012 0, // dex_pc is always 0 since this is a native method.\012                                     field,\012                                     val);\012 })<SUB>133</SUB>> ]
+"79" [label = <(UNKNOWN,},})<SUB>152</SUB>> ]
+"86" [label = <(UNKNOWN,),))<SUB>154</SUB>> ]
+"87" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012  instrumentation::Instrumentation* instrumentation = Runtime::Current()-&gt;GetInstrumentation();,REQUIRES_SHARED(Locks::mutator_lock_) {\012  instrumentation::Instrumentation* instrumentation = Runtime::Current()-&gt;GetInstrumentation();)<SUB>155</SUB>> ]
+"88" [label = <(UNKNOWN,if (UNLIKELY(instrumentation-&gt;HasFieldReadListeners())) {\012 Thread* self = Thread::Current();\012 ArtMethod* cur_method = self-&gt;GetCurrentMethod(/*dex_pc*/ nullptr,\012 /*check_suspended*/ true,\012 /*abort_on_error*/ false);\012\012 if (cur_method == nullptr) {\012 // Set/Get Fields can be issued without a method during runtime startup/teardown. Ignore all\012 // of these changes.\012 return;\012 }\012    DCHECK(cur_method-&gt;IsNative());\012    instrumentation-&gt;FieldReadEvent(self,\012                                    self-&gt;DecodeJObject(obj).Ptr(),\012                                    cur_method,\012 0, // dex_pc is always 0 since this is a native method.\012                                    field);\012 },if (UNLIKELY(instrumentation-&gt;HasFieldReadListeners())) {\012 Thread* self = Thread::Current();\012 ArtMethod* cur_method = self-&gt;GetCurrentMethod(/*dex_pc*/ nullptr,\012 /*check_suspended*/ true,\012 /*abort_on_error*/ false);\012\012 if (cur_method == nullptr) {\012 // Set/Get Fields can be issued without a method during runtime startup/teardown. Ignore all\012 // of these changes.\012 return;\012 }\012    DCHECK(cur_method-&gt;IsNative());\012    instrumentation-&gt;FieldReadEvent(self,\012                                    self-&gt;DecodeJObject(obj).Ptr(),\012                                    cur_method,\012 0, // dex_pc is always 0 since this is a native method.\012                                    field);\012 })<SUB>157</SUB>> ]
+"89" [label = <(UNKNOWN,},})<SUB>175</SUB>> ]
+"165" [label = <(UNKNOWN,),))<SUB>205</SUB>> ]
+"166" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012  std::string temp;,REQUIRES_SHARED(Locks::mutator_lock_) {\012  std::string temp;)<SUB>206</SUB>> ]
+"167" [label = <(UNKNOWN,soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/NoSuchMethodError;&quot;,\012 &quot;no %s method \&quot;%s.%s%s\&quot;&quot;,\012                                 kind,\012                                 c-&gt;GetDescriptor(&amp;temp),\012                                 name,\012                                 sig);,soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/NoSuchMethodError;&quot;,\012 &quot;no %s method \&quot;%s.%s%s\&quot;&quot;,\012                                 kind,\012                                 c-&gt;GetDescriptor(&amp;temp),\012                                 name,\012                                 sig);)<SUB>208</SUB>> ]
+"168" [label = <(UNKNOWN,},})<SUB>214</SUB>> ]
+"177" [label = <(UNKNOWN,),))<SUB>219</SUB>> ]
+"178" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012  LOG(ERROR)\012 &lt;&lt; &quot;Failed to register native method in &quot; &lt;&lt; c-&gt;PrettyDescriptor()\012 &lt;&lt; &quot; in &quot; &lt;&lt; c-&gt;GetDexCache()-&gt;GetLocation()-&gt;ToModifiedUtf8()\012 &lt;&lt; &quot;: &quot; &lt;&lt; kind &lt;&lt; &quot; is null at index &quot; &lt;&lt; idx;,REQUIRES_SHARED(Locks::mutator_lock_) {\012  LOG(ERROR)\012 &lt;&lt; &quot;Failed to register native method in &quot; &lt;&lt; c-&gt;PrettyDescriptor()\012 &lt;&lt; &quot; in &quot; &lt;&lt; c-&gt;GetDexCache()-&gt;GetLocation()-&gt;ToModifiedUtf8()\012 &lt;&lt; &quot;: &quot; &lt;&lt; kind &lt;&lt; &quot; is null at index &quot; &lt;&lt; idx;)<SUB>220</SUB>> ]
+"179" [label = <(UNKNOWN,soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/NoSuchMethodError;&quot;,\012 &quot;%s is null at index %d&quot;,\012                                 kind,\012                                 idx);,soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/NoSuchMethodError;&quot;,\012 &quot;%s is null at index %d&quot;,\012                                 kind,\012                                 idx);)<SUB>225</SUB>> ]
+"180" [label = <(UNKNOWN,},})<SUB>229</SUB>> ]
+"187" [label = <(UNKNOWN,),))<SUB>231</SUB>> ]
+"188" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012 if (LIKELY(klass-&gt;IsInitialized())) {\012 return klass;\012 },REQUIRES_SHARED(Locks::mutator_lock_) {\012 if (LIKELY(klass-&gt;IsInitialized())) {\012 return klass;\012 })<SUB>232</SUB>> ]
+"195" [label = <(h_klass,h_klass(hs.NewHandle(klass)))<SUB>237</SUB>> ]
+"201" [label = <(UNKNOWN,if (!Runtime::Current()-&gt;GetClassLinker()-&gt;EnsureInitialized(self, h_klass, true, true)) {\012 return nullptr;\012 },if (!Runtime::Current()-&gt;GetClassLinker()-&gt;EnsureInitialized(self, h_klass, true, true)) {\012 return nullptr;\012 })<SUB>238</SUB>> ]
+"202" [label = <(UNKNOWN,return h_klass.Get();,return h_klass.Get();)<SUB>241</SUB>> ]
+"203" [label = <(UNKNOWN,},})<SUB>242</SUB>> ]
+"213" [label = <(UNKNOWN,),))<SUB>245</SUB>> ]
+"214" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012 ObjPtr&lt;mirror::Class&gt; c = EnsureInitialized(soa.Self(), soa.Decode&lt;mirror::Class&gt;(jni_class));,REQUIRES_SHARED(Locks::mutator_lock_) {\012 ObjPtr&lt;mirror::Class&gt; c = EnsureInitialized(soa.Self(), soa.Decode&lt;mirror::Class&gt;(jni_class));)<SUB>246</SUB>> ]
+"215" [label = <(UNKNOWN,if (c == nullptr) {\012 return nullptr;\012 },if (c == nullptr) {\012 return nullptr;\012 })<SUB>248</SUB>> ]
+"217" [label = <(&lt;operator&gt;.assignment,* method = nullptr)<SUB>251</SUB>> ]
+"221" [label = <(&lt;operator&gt;.assignment,pointer_size = Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize())<SUB>252</SUB>> ]
+"233" [label = <(UNKNOWN,if (c-&gt;IsInterface()) {\012    method = c-&gt;FindInterfaceMethod(name, sig, pointer_size);\012 },if (c-&gt;IsInterface()) {\012    method = c-&gt;FindInterfaceMethod(name, sig, pointer_size);\012 })<SUB>253</SUB>> ]
+"234" [label = <(UNKNOWN,else {\012    method = c-&gt;FindClassMethod(name, sig, pointer_size);\012 },else {\012    method = c-&gt;FindClassMethod(name, sig, pointer_size);\012 })<SUB>255</SUB>> ]
+"235" [label = <(UNKNOWN,if (method != nullptr &amp;&amp; ShouldBlockAccessToMember(method, soa.Self())) {\012    method = nullptr;\012 },if (method != nullptr &amp;&amp; ShouldBlockAccessToMember(method, soa.Self())) {\012    method = nullptr;\012 })<SUB>258</SUB>> ]
+"236" [label = <(UNKNOWN,if (method == nullptr || method-&gt;IsStatic() != is_static) {\012 ThrowNoSuchMethodError(soa, c, name, sig, is_static ? &quot;static&quot; : &quot;non-static&quot;);\012 return nullptr;\012 },if (method == nullptr || method-&gt;IsStatic() != is_static) {\012 ThrowNoSuchMethodError(soa, c, name, sig, is_static ? &quot;static&quot; : &quot;non-static&quot;);\012 return nullptr;\012 })<SUB>261</SUB>> ]
+"237" [label = <(UNKNOWN,return jni::EncodeArtMethod(method);,return jni::EncodeArtMethod(method);)<SUB>265</SUB>> ]
+"238" [label = <(UNKNOWN,},})<SUB>266</SUB>> ]
+"244" [label = <(UNKNOWN,),))<SUB>268</SUB>> ]
+"245" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012 ArtMethod* method = soa.Self()-&gt;GetCurrentMethod(nullptr);,REQUIRES_SHARED(Locks::mutator_lock_) {\012 ArtMethod* method = soa.Self()-&gt;GetCurrentMethod(nullptr);)<SUB>269</SUB>> ]
+"246" [label = <(UNKNOWN,if (method == jni::DecodeArtMethod(WellKnownClasses::java_lang_Runtime_nativeLoad)) {\012 return soa.Decode&lt;mirror::ClassLoader&gt;(soa.Self()-&gt;GetClassLoaderOverride());\012 },if (method == jni::DecodeArtMethod(WellKnownClasses::java_lang_Runtime_nativeLoad)) {\012 return soa.Decode&lt;mirror::ClassLoader&gt;(soa.Self()-&gt;GetClassLoaderOverride());\012 })<SUB>272</SUB>> ]
+"247" [label = <(UNKNOWN,if (method != nullptr) {\012 return method-&gt;GetDeclaringClass()-&gt;GetClassLoader();\012 },if (method != nullptr) {\012 return method-&gt;GetDeclaringClass()-&gt;GetClassLoader();\012 })<SUB>276</SUB>> ]
+"249" [label = <(&lt;operator&gt;.assignment,class_loader =\012      soa.Decode&lt;mirror::ClassLoader&gt;(Runtime::Current()-&gt;GetSystemClassLoader()))<SUB>280</SUB>> ]
+"266" [label = <(UNKNOWN,if (class_loader != nullptr) {\012 return class_loader;\012 },if (class_loader != nullptr) {\012 return class_loader;\012 })<SUB>282</SUB>> ]
+"267" [label = <(UNKNOWN,class_loader = soa.Decode&lt;mirror::ClassLoader&gt;(soa.Self()-&gt;GetClassLoaderOverride());,class_loader = soa.Decode&lt;mirror::ClassLoader&gt;(soa.Self()-&gt;GetClassLoaderOverride());)<SUB>286</SUB>> ]
+"268" [label = <(UNKNOWN,if (class_loader != nullptr) {\012 // If so, CommonCompilerTest should have marked the runtime as a compiler not compiling an\012 // image.\012    CHECK(Runtime::Current()-&gt;IsAotCompiler());\012    CHECK(!Runtime::Current()-&gt;IsCompilingBootImage());\012 return class_loader;\012 },if (class_loader != nullptr) {\012 // If so, CommonCompilerTest should have marked the runtime as a compiler not compiling an\012 // image.\012    CHECK(Runtime::Current()-&gt;IsAotCompiler());\012    CHECK(!Runtime::Current()-&gt;IsCompilingBootImage());\012 return class_loader;\012 })<SUB>287</SUB>> ]
+"269" [label = <(UNKNOWN,return nullptr;,return nullptr;)<SUB>295</SUB>> ]
+"270" [label = <(UNKNOWN,},})<SUB>296</SUB>> ]
+"280" [label = <(UNKNOWN,),))<SUB>299</SUB>> ]
+"281" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012 StackHandleScope&lt;2&gt; hs(soa.Self());,REQUIRES_SHARED(Locks::mutator_lock_) {\012 StackHandleScope&lt;2&gt; hs(soa.Self());)<SUB>300</SUB>> ]
+"283" [label = <(c,c(\012      hs.NewHandle(EnsureInitialized(soa.Self(), soa.Decode&lt;mirror::Class&gt;(jni_class)))))<SUB>302</SUB>> ]
+"302" [label = <(UNKNOWN,if (c == nullptr) {\012 return nullptr;\012 },if (c == nullptr) {\012 return nullptr;\012 })<SUB>304</SUB>> ]
+"304" [label = <(&lt;operator&gt;.assignment,* field = nullptr)<SUB>307</SUB>> ]
+"309" [label = <(&lt;operator&gt;.assignment,* class_linker = Runtime::Current()-&gt;GetClassLinker())<SUB>309</SUB>> ]
+"318" [label = <(UNKNOWN,if (sig[1] != '\0') {\012 Handle&lt;mirror::ClassLoader&gt; class_loader(hs.NewHandle(c-&gt;GetClassLoader()));\012    field_type = class_linker-&gt;FindClass(soa.Self(), sig, class_loader);\012 },if (sig[1] != '\0') {\012 Handle&lt;mirror::ClassLoader&gt; class_loader(hs.NewHandle(c-&gt;GetClassLoader()));\012    field_type = class_linker-&gt;FindClass(soa.Self(), sig, class_loader);\012 })<SUB>310</SUB>> ]
+"319" [label = <(UNKNOWN,else {\012    field_type = class_linker-&gt;FindPrimitiveClass(*sig);\012 },else {\012    field_type = class_linker-&gt;FindPrimitiveClass(*sig);\012 })<SUB>313</SUB>> ]
+"320" [label = <(UNKNOWN,if (field_type == nullptr) {\012 // Failed to find type from the signature of the field.\012    DCHECK(soa.Self()-&gt;IsExceptionPending());\012 StackHandleScope&lt;1&gt; hs2(soa.Self());\012 Handle&lt;mirror::Throwable&gt; cause(hs2.NewHandle(soa.Self()-&gt;GetException()));\012    soa.Self()-&gt;ClearException();\012    std::string temp;\012    soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/NoSuchFieldError;&quot;,\012 &quot;no type \&quot;%s\&quot; found and so no field \&quot;%s\&quot; &quot;\012 &quot;could be found in class \&quot;%s\&quot; or its superclasses&quot;, sig, name,\012                                   c-&gt;GetDescriptor(&amp;temp));\012    soa.Self()-&gt;GetException()-&gt;SetCause(cause.Get());\012 return nullptr;\012 },if (field_type == nullptr) {\012 // Failed to find type from the signature of the field.\012    DCHECK(soa.Self()-&gt;IsExceptionPending());\012 StackHandleScope&lt;1&gt; hs2(soa.Self());\012 Handle&lt;mirror::Throwable&gt; cause(hs2.NewHandle(soa.Self()-&gt;GetException()));\012    soa.Self()-&gt;ClearException();\012    std::string temp;\012    soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/NoSuchFieldError;&quot;,\012 &quot;no type \&quot;%s\&quot; found and so no field \&quot;%s\&quot; &quot;\012 &quot;could be found in class \&quot;%s\&quot; or its superclasses&quot;, sig, name,\012                                   c-&gt;GetDescriptor(&amp;temp));\012    soa.Self()-&gt;GetException()-&gt;SetCause(cause.Get());\012 return nullptr;\012 })<SUB>316</SUB>> ]
+"322" [label = <(UNKNOWN,if (is_static) {\012    field = mirror::Class::FindStaticField(\012        soa.Self(), c.Get(), name, field_type-&gt;GetDescriptor(&amp;temp));\012 },if (is_static) {\012    field = mirror::Class::FindStaticField(\012        soa.Self(), c.Get(), name, field_type-&gt;GetDescriptor(&amp;temp));\012 })<SUB>331</SUB>> ]
+"323" [label = <(UNKNOWN,else {\012    field = c-&gt;FindInstanceField(name, field_type-&gt;GetDescriptor(&amp;temp));\012 },else {\012    field = c-&gt;FindInstanceField(name, field_type-&gt;GetDescriptor(&amp;temp));\012 })<SUB>334</SUB>> ]
+"324" [label = <(UNKNOWN,if (field != nullptr &amp;&amp; ShouldBlockAccessToMember(field, soa.Self())) {\012    field = nullptr;\012 },if (field != nullptr &amp;&amp; ShouldBlockAccessToMember(field, soa.Self())) {\012    field = nullptr;\012 })<SUB>337</SUB>> ]
+"325" [label = <(UNKNOWN,if (field == nullptr) {\012    soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/NoSuchFieldError;&quot;,\012 &quot;no \&quot;%s\&quot; field \&quot;%s\&quot; in class \&quot;%s\&quot; or its superclasses&quot;,\012                                   sig, name, c-&gt;GetDescriptor(&amp;temp));\012 return nullptr;\012 },if (field == nullptr) {\012    soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/NoSuchFieldError;&quot;,\012 &quot;no \&quot;%s\&quot; field \&quot;%s\&quot; in class \&quot;%s\&quot; or its superclasses&quot;,\012                                   sig, name, c-&gt;GetDescriptor(&amp;temp));\012 return nullptr;\012 })<SUB>340</SUB>> ]
+"326" [label = <(UNKNOWN,return jni::EncodeArtField(field);,return jni::EncodeArtField(field);)<SUB>346</SUB>> ]
+"327" [label = <(UNKNOWN,},})<SUB>347</SUB>> ]
+"337" [label = <(UNKNOWN,),))<SUB>350</SUB>> ]
+"338" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012  std::string type(array-&gt;PrettyTypeOf());,REQUIRES_SHARED(Locks::mutator_lock_) {\012  std::string type(array-&gt;PrettyTypeOf());)<SUB>351</SUB>> ]
+"339" [label = <(UNKNOWN,soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/ArrayIndexOutOfBoundsException;&quot;,\012 &quot;%s offset=%d length=%d %s.length=%d&quot;,\012                                 type.c_str(), start, length, identifier, array-&gt;GetLength());,soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/ArrayIndexOutOfBoundsException;&quot;,\012 &quot;%s offset=%d length=%d %s.length=%d&quot;,\012                                 type.c_str(), start, length, identifier, array-&gt;GetLength());)<SUB>353</SUB>> ]
+"340" [label = <(UNKNOWN,},})<SUB>356</SUB>> ]
+"349" [label = <(UNKNOWN,),))<SUB>359</SUB>> ]
+"350" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012  soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/StringIndexOutOfBoundsException;&quot;,\012 &quot;offset=%d length=%d string.length()=%d&quot;, start, length,\012                                 array_length);,REQUIRES_SHARED(Locks::mutator_lock_) {\012  soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/StringIndexOutOfBoundsException;&quot;,\012 &quot;offset=%d length=%d string.length()=%d&quot;, start, length,\012                                 array_length);)<SUB>360</SUB>> ]
+"351" [label = <(UNKNOWN,},})<SUB>364</SUB>> ]
+"360" [label = <(UNKNOWN,),))<SUB>366</SUB>> ]
+"361" [label = <(UNKNOWN,REQUIRES(!Locks::mutator_lock_) {\012 // Turn the const char* into a java.lang.String.\012 ScopedLocalRef&lt;jstring&gt; s(env, env-&gt;NewStringUTF(msg));\012 if (msg != nullptr &amp;&amp; s.get() == nullptr) {\012 return JNI_ERR;\012 }\012\012 // Choose an appropriate constructor and set up the arguments.\012  jvalue args[2];\012 const char* signature;\012 if (msg == nullptr &amp;&amp; cause == nullptr) {\012    signature = &quot;()V&quot;;\012 } else if (msg != nullptr &amp;&amp; cause == nullptr) {\012    signature = &quot;(Ljava/lang/String;)V&quot;;\012    args[0].l = s.get();\012 } else if (msg == nullptr &amp;&amp; cause != nullptr) {\012    signature = &quot;(Ljava/lang/Throwable;)V&quot;;\012    args[0].l = cause;\012 } else {\012    signature = &quot;(Ljava/lang/String;Ljava/lang/Throwable;)V&quot;;\012    args[0].l = s.get();\012    args[1].l = cause;\012 }\012  jmethodID mid = env-&gt;GetMethodID(exception_class, &quot;&lt;init&gt;&quot;, signature);\012 if (mid == nullptr) {\012 ScopedObjectAccess soa(env);\012    LOG(ERROR) &lt;&lt; &quot;No &lt;init&gt;&quot; &lt;&lt; signature &lt;&lt; &quot; in &quot;\012 &lt;&lt; mirror::Class::PrettyClass(soa.Decode&lt;mirror::Class&gt;(exception_class));\012 return JNI_ERR;\012 }\012\012 ScopedLocalRef&lt;jthrowable&gt; exception(\012      env, reinterpret_cast&lt;jthrowable&gt;(env-&gt;NewObjectA(exception_class, mid, args)));\012 if (exception.get() == nullptr) {\012 return JNI_ERR;\012 }\012 ScopedObjectAccess soa(env);\012  soa.Self()-&gt;SetException(soa.Decode&lt;mirror::Throwable&gt;(exception.get()));\012 return JNI_OK;\012},REQUIRES(!Locks::mutator_lock_) {\012 // Turn the const char* into a java.lang.String.\012 ScopedLocalRef&lt;jstring&gt; s(env, env-&gt;NewStringUTF(msg));\012 if (msg != nullptr &amp;&amp; s.get() == nullptr) {\012 return JNI_ERR;\012 }\012\012 // Choose an appropriate constructor and set up the arguments.\012  jvalue args[2];\012 const char* signature;\012 if (msg == nullptr &amp;&amp; cause == nullptr) {\012    signature = &quot;()V&quot;;\012 } else if (msg != nullptr &amp;&amp; cause == nullptr) {\012    signature = &quot;(Ljava/lang/String;)V&quot;;\012    args[0].l = s.get();\012 } else if (msg == nullptr &amp;&amp; cause != nullptr) {\012    signature = &quot;(Ljava/lang/Throwable;)V&quot;;\012    args[0].l = cause;\012 } else {\012    signature = &quot;(Ljava/lang/String;Ljava/lang/Throwable;)V&quot;;\012    args[0].l = s.get();\012    args[1].l = cause;\012 }\012  jmethodID mid = env-&gt;GetMethodID(exception_class, &quot;&lt;init&gt;&quot;, signature);\012 if (mid == nullptr) {\012 ScopedObjectAccess soa(env);\012    LOG(ERROR) &lt;&lt; &quot;No &lt;init&gt;&quot; &lt;&lt; signature &lt;&lt; &quot; in &quot;\012 &lt;&lt; mirror::Class::PrettyClass(soa.Decode&lt;mirror::Class&gt;(exception_class));\012 return JNI_ERR;\012 }\012\012 ScopedLocalRef&lt;jthrowable&gt; exception(\012      env, reinterpret_cast&lt;jthrowable&gt;(env-&gt;NewObjectA(exception_class, mid, args)));\012 if (exception.get() == nullptr) {\012 return JNI_ERR;\012 }\012 ScopedObjectAccess soa(env);\012  soa.Self()-&gt;SetException(soa.Decode&lt;mirror::Throwable&gt;(exception.get()));\012 return JNI_OK;\012})<SUB>367</SUB>> ]
+"381" [label = <(UNKNOWN,),))<SUB>437</SUB>> ]
+"382" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012 auto pointer_size = Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize();,REQUIRES_SHARED(Locks::mutator_lock_) {\012 auto pointer_size = Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize();)<SUB>438</SUB>> ]
+"383" [label = <(UNKNOWN,for (auto&amp; method : c-&gt;GetMethods(pointer_size)) {\012 if (kNative == method.IsNative() &amp;&amp; name == method.GetName() &amp;&amp; method.GetSignature() == sig) {\012 return &amp;method;\012 }\012 },for (auto&amp; method : c-&gt;GetMethods(pointer_size)) {\012 if (kNative == method.IsNative() &amp;&amp; name == method.GetName() &amp;&amp; method.GetSignature() == sig) {\012 return &amp;method;\012 }\012 })<SUB>440</SUB>> ]
+"384" [label = <(UNKNOWN,return nullptr;,return nullptr;)<SUB>445</SUB>> ]
+"385" [label = <(UNKNOWN,},})<SUB>446</SUB>> ]
+"12949" [label = <(UNKNOWN,},})<SUB>2536</SUB>> ]
+"13005" [label = <(UNKNOWN,),))<SUB>2551</SUB>> ]
+"13006" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012 ObjPtr&lt;ArtArrayT&gt; array = soa.Decode&lt;ArtArrayT&gt;(java_array);,REQUIRES_SHARED(Locks::mutator_lock_) {\012 ObjPtr&lt;ArtArrayT&gt; array = soa.Decode&lt;ArtArrayT&gt;(java_array);)<SUB>2552</SUB>> ]
+"13007" [label = <(UNKNOWN,if (UNLIKELY(ArtArrayT::GetArrayClass() != array-&gt;GetClass())) {\012      soa.Vm()-&gt;JniAbortF(fn_name,\012 &quot;attempt to %s %s primitive array elements with an object of type %s&quot;,\012                          operation,\012                          mirror::Class::PrettyDescriptor(\012 ArtArrayT::GetArrayClass()-&gt;GetComponentType()).c_str(),\012                          mirror::Class::PrettyDescriptor(array-&gt;GetClass()).c_str());\012 return nullptr;\012 },if (UNLIKELY(ArtArrayT::GetArrayClass() != array-&gt;GetClass())) {\012      soa.Vm()-&gt;JniAbortF(fn_name,\012 &quot;attempt to %s %s primitive array elements with an object of type %s&quot;,\012                          operation,\012                          mirror::Class::PrettyDescriptor(\012 ArtArrayT::GetArrayClass()-&gt;GetComponentType()).c_str(),\012                          mirror::Class::PrettyDescriptor(array-&gt;GetClass()).c_str());\012 return nullptr;\012 })<SUB>2554</SUB>> ]
+"13008" [label = <(UNKNOWN,DCHECK_EQ(sizeof(ElementT), array-&gt;GetClass()-&gt;GetComponentSize());,DCHECK_EQ(sizeof(ElementT), array-&gt;GetClass()-&gt;GetComponentSize());)<SUB>2563</SUB>> ]
+"13009" [label = <(UNKNOWN,return array.Ptr();,return array.Ptr();)<SUB>2564</SUB>> ]
+"13010" [label = <(UNKNOWN,},})<SUB>2565</SUB>> ]
+"13183" [label = <(UNKNOWN,),))<SUB>2609</SUB>> ]
+"13184" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012 void* array_data = array-&gt;GetRawData(component_size, 0);,REQUIRES_SHARED(Locks::mutator_lock_) {\012 void* array_data = array-&gt;GetRawData(component_size, 0);)<SUB>2610</SUB>> ]
+"13186" [label = <(&lt;operator&gt;.assignment,* heap = Runtime::Current()-&gt;GetHeap())<SUB>2612</SUB>> ]
+"13196" [label = <(&lt;operator&gt;.assignment,is_copy = array_data != elements)<SUB>2613</SUB>> ]
+"13202" [label = <(&lt;operator&gt;.assignment,bytes = array-&gt;GetLength() * component_size)<SUB>2614</SUB>> ]
+"13210" [label = <(UNKNOWN,if (is_copy) {\012 // Sanity check: If elements is not the same as the java array's data, it better not be a\012 // heap address. TODO: This might be slow to check, may be worth keeping track of which\012 // copies we make?\012 if (heap-&gt;IsNonDiscontinuousSpaceHeapAddress(elements)) {\012        soa.Vm()-&gt;JniAbortF(&quot;ReleaseArrayElements&quot;,\012 &quot;invalid element pointer %p, array elements are %p&quot;,\012 reinterpret_cast&lt;void*&gt;(elements), array_data);\012 return;\012 }\012 if (mode != JNI_ABORT) {\012        memcpy(array_data, elements, bytes);\012 } else if (kWarnJniAbort &amp;&amp; memcmp(array_data, elements, bytes) != 0) {\012 // Warn if we have JNI_ABORT and the arrays don't match since this is usually an error.\012        LOG(WARNING) &lt;&lt; &quot;Possible incorrect JNI_ABORT in Release*ArrayElements&quot;;\012        soa.Self()-&gt;DumpJavaStack(LOG_STREAM(WARNING));\012 }\012 },if (is_copy) {\012 // Sanity check: If elements is not the same as the java array's data, it better not be a\012 // heap address. TODO: This might be slow to check, may be worth keeping track of which\012 // copies we make?\012 if (heap-&gt;IsNonDiscontinuousSpaceHeapAddress(elements)) {\012        soa.Vm()-&gt;JniAbortF(&quot;ReleaseArrayElements&quot;,\012 &quot;invalid element pointer %p, array elements are %p&quot;,\012 reinterpret_cast&lt;void*&gt;(elements), array_data);\012 return;\012 }\012 if (mode != JNI_ABORT) {\012        memcpy(array_data, elements, bytes);\012 } else if (kWarnJniAbort &amp;&amp; memcmp(array_data, elements, bytes) != 0) {\012 // Warn if we have JNI_ABORT and the arrays don't match since this is usually an error.\012        LOG(WARNING) &lt;&lt; &quot;Possible incorrect JNI_ABORT in Release*ArrayElements&quot;;\012        soa.Self()-&gt;DumpJavaStack(LOG_STREAM(WARNING));\012 }\012 })<SUB>2615</SUB>> ]
+"13211" [label = <(UNKNOWN,if (mode != JNI_COMMIT) {\012 if (is_copy) {\012 delete[] reinterpret_cast&lt;uint64_t*&gt;(elements);\012 } else if (heap-&gt;IsMovableObject(array)) {\012 // Non copy to a movable object must means that we had disabled the moving GC.\012 if (!kUseReadBarrier) {\012          heap-&gt;DecrementDisableMovingGC(soa.Self());\012 } else {\012          heap-&gt;DecrementDisableThreadFlip(soa.Self());\012 }\012 }\012 },if (mode != JNI_COMMIT) {\012 if (is_copy) {\012 delete[] reinterpret_cast&lt;uint64_t*&gt;(elements);\012 } else if (heap-&gt;IsMovableObject(array)) {\012 // Non copy to a movable object must means that we had disabled the moving GC.\012 if (!kUseReadBarrier) {\012          heap-&gt;DecrementDisableMovingGC(soa.Self());\012 } else {\012          heap-&gt;DecrementDisableThreadFlip(soa.Self());\012 }\012 }\012 })<SUB>2633</SUB>> ]
+"13212" [label = <(UNKNOWN,},})<SUB>2645</SUB>> ]
+"13425" [label = <(UNKNOWN,};,};)<SUB>2686</SUB>> ]
+"13427" [label = <(&lt;operator&gt;.assignment,gJniNativeInterface = {\012 nullptr, // reserved0.\012 nullptr, // reserved1.\012 nullptr, // reserved2.\012 nullptr, // reserved3.\012  JNI::GetVersion,\012  JNI::DefineClass,\012  JNI::FindClass,\012  JNI::FromReflectedMethod,\012  JNI::FromReflectedField,\012  JNI::ToReflectedMethod,\012  JNI::GetSuperclass,\012  JNI::IsAssignableFrom,\012  JNI::ToReflectedField,\012  JNI::Throw,\012  JNI::ThrowNew,\012  JNI::ExceptionOccurred,\012  JNI::ExceptionDescribe,\012  JNI::ExceptionClear,\012  JNI::FatalError,\012  JNI::PushLocalFrame,\012  JNI::PopLocalFrame,\012  JNI::NewGlobalRef,\012  JNI::DeleteGlobalRef,\012  JNI::DeleteLocalRef,\012  JNI::IsSameObject,\012  JNI::NewLocalRef,\012  JNI::EnsureLocalCapacity,\012  JNI::AllocObject,\012  JNI::NewObject,\012  JNI::NewObjectV,\012  JNI::NewObjectA,\012  JNI::GetObjectClass,\012  JNI::IsInstanceOf,\012  JNI::GetMethodID,\012  JNI::CallObjectMethod,\012  JNI::CallObjectMethodV,\012  JNI::CallObjectMethodA,\012  JNI::CallBooleanMethod,\012  JNI::CallBooleanMethodV,\012  JNI::CallBooleanMethodA,\012  JNI::CallByteMethod,\012  JNI::CallByteMethodV,\012  JNI::CallByteMethodA,\012  JNI::CallCharMethod,\012  JNI::CallCharMethodV,\012  JNI::CallCharMethodA,\012  JNI::CallShortMethod,\012  JNI::CallShortMethodV,\012  JNI::CallShortMethodA,\012  JNI::CallIntMethod,\012  JNI::CallIntMethodV,\012  JNI::CallIntMethodA,\012  JNI::CallLongMethod,\012  JNI::CallLongMethodV,\012  JNI::CallLongMethodA,\012  JNI::CallFloatMethod,\012  JNI::CallFloatMethodV,\012  JNI::CallFloatMethodA,\012  JNI::CallDoubleMethod,\012  JNI::CallDoubleMethodV,\012  JNI::CallDoubleMethodA,\012  JNI::CallVoidMethod,\012  JNI::CallVoidMethodV,\012  JNI::CallVoidMethodA,\012  JNI::CallNonvirtualObjectMethod,\012  JNI::CallNonvirtualObjectMethodV,\012  JNI::CallNonvirtualObjectMethodA,\012  JNI::CallNonvirtualBooleanMethod,\012  JNI::CallNonvirtualBooleanMethodV,\012  JNI::CallNonvirtualBooleanMethodA,\012  JNI::CallNonvirtualByteMethod,\012  JNI::CallNonvirtualByteMethodV,\012  JNI::CallNonvirtualByteMethodA,\012  JNI::CallNonvirtualCharMethod,\012  JNI::CallNonvirtualCharMethodV,\012  JNI::CallNonvirtualCharMethodA,\012  JNI::CallNonvirtualShortMethod,\012  JNI::CallNonvirtualShortMethodV,\012  JNI::CallNonvirtualShortMethodA,\012  JNI::CallNonvirtualIntMethod,\012  JNI::CallNonvirtualIntMethodV,\012  JNI::CallNonvirtualIntMethodA,\012  JNI::CallNonvirtualLongMethod,\012  JNI::CallNonvirtualLongMethodV,\012  JNI::CallNonvirtualLongMethodA,\012  JNI::CallNonvirtualFloatMethod,\012  JNI::CallNonvirtualFloatMethodV,\012  JNI::CallNonvirtualFloatMethodA,\012  JNI::CallNonvirtualDoubleMethod,\012  JNI::CallNonvirtualDoubleMethodV,\012  JNI::CallNonvirtualDoubleMethodA,\012  JNI::CallNonvirtualVoidMethod,\012  JNI::CallNonvirtualVoidMethodV,\012  JNI::CallNonvirtualVoidMethodA,\012  JNI::GetFieldID,\012  JNI::GetObjectField,\012  JNI::GetBooleanField,\012  JNI::GetByteField,\012  JNI::GetCharField,\012  JNI::GetShortField,\012  JNI::GetIntField,\012  JNI::GetLongField,\012  JNI::GetFloatField,\012  JNI::GetDoubleField,\012  JNI::SetObjectField,\012  JNI::SetBooleanField,\012  JNI::SetByteField,\012  JNI::SetCharField,\012  JNI::SetShortField,\012  JNI::SetIntField,\012  JNI::SetLongField,\012  JNI::SetFloatField,\012  JNI::SetDoubleField,\012  JNI::GetStaticMethodID,\012  JNI::CallStaticObjectMethod,\012  JNI::CallStaticObjectMethodV,\012  JNI::CallStaticObjectMethodA,\012  JNI::CallStaticBooleanMethod,\012  JNI::CallStaticBooleanMethodV,\012  JNI::CallStaticBooleanMethodA,\012  JNI::CallStaticByteMethod,\012  JNI::CallStaticByteMethodV,\012  JNI::CallStaticByteMethodA,\012  JNI::CallStaticCharMethod,\012  JNI::CallStaticCharMethodV,\012  JNI::CallStaticCharMethodA,\012  JNI::CallStaticShortMethod,\012  JNI::CallStaticShortMethodV,\012  JNI::CallStaticShortMethodA,\012  JNI::CallStaticIntMethod,\012  JNI::CallStaticIntMethodV,\012  JNI::CallStaticIntMethodA,\012  JNI::CallStaticLongMethod,\012  JNI::CallStaticLongMethodV,\012  JNI::CallStaticLongMethodA,\012  JNI::CallStaticFloatMethod,\012  JNI::CallStaticFloatMethodV,\012  JNI::CallStaticFloatMethodA,\012  JNI::CallStaticDoubleMethod,\012  JNI::CallStaticDoubleMethodV,\012  JNI::CallStaticDoubleMethodA,\012  JNI::CallStaticVoidMethod,\012  JNI::CallStaticVoidMethodV,\012  JNI::CallStaticVoidMethodA,\012  JNI::GetStaticFieldID,\012  JNI::GetStaticObjectField,\012  JNI::GetStaticBooleanField,\012  JNI::GetStaticByteField,\012  JNI::GetStaticCharField,\012  JNI::GetStaticShortField,\012  JNI::GetStaticIntField,\012  JNI::GetStaticLongField,\012  JNI::GetStaticFloatField,\012  JNI::GetStaticDoubleField,\012  JNI::SetStaticObjectField,\012  JNI::SetStaticBooleanField,\012  JNI::SetStaticByteField,\012  JNI::SetStaticCharField,\012  JNI::SetStaticShortField,\012  JNI::SetStaticIntField,\012  JNI::SetStaticLongField,\012  JNI::SetStaticFloatField,\012  JNI::SetStaticDoubleField,\012  JNI::NewString,\012  JNI::GetStringLength,\012  JNI::GetStringChars,\012  JNI::ReleaseStringChars,\012  JNI::NewStringUTF,\012  JNI::GetStringUTFLength,\012  JNI::GetStringUTFChars,\012  JNI::ReleaseStringUTFChars,\012  JNI::GetArrayLength,\012  JNI::NewObjectArray,\012  JNI::GetObjectArrayElement,\012  JNI::SetObjectArrayElement,\012  JNI::NewBooleanArray,\012  JNI::NewByteArray,\012  JNI::NewCharArray,\012  JNI::NewShortArray,\012  JNI::NewIntArray,\012  JNI::NewLongArray,\012  JNI::NewFloatArray,\012  JNI::NewDoubleArray,\012  JNI::GetBooleanArrayElements,\012  JNI::GetByteArrayElements,\012  JNI::GetCharArrayElements,\012  JNI::GetShortArrayElements,\012  JNI::GetIntArrayElements,\012  JNI::GetLongArrayElements,\012  JNI::GetFloatArrayElements,\012  JNI::GetDoubleArrayElements,\012  JNI::ReleaseBooleanArrayElements,\012  JNI::ReleaseByteArrayElements,\012  JNI::ReleaseCharArrayElements,\012  JNI::ReleaseShortArrayElements,\012  JNI::ReleaseIntArrayElements,\012  JNI::ReleaseLongArrayElements,\012  JNI::ReleaseFloatArrayElements,\012  JNI::ReleaseDoubleArrayElements,\012  JNI::GetBooleanArrayRegion,\012  JNI::GetByteArrayRegion,\012  JNI::GetCharArrayRegion,\012  JNI::GetShortArrayRegion,\012  JNI::GetIntArrayRegion,\012  JNI::GetLongArrayRegion,\012  JNI::GetFloatArrayRegion,\012  JNI::GetDoubleArrayRegion,\012  JNI::SetBooleanArrayRegion,\012  JNI::SetByteArrayRegion,\012  JNI::SetCharArrayRegion,\012  JNI::SetShortArrayRegion,\012  JNI::SetIntArrayRegion,\012  JNI::SetLongArrayRegion,\012  JNI::SetFloatArrayRegion,\012  JNI::SetDoubleArrayRegion,\012  JNI::RegisterNatives,\012  JNI::UnregisterNatives,\012  JNI::MonitorEnter,\012  JNI::MonitorExit,\012  JNI::GetJavaVM,\012  JNI::GetStringRegion,\012  JNI::GetStringUTFRegion,\012  JNI::GetPrimitiveArrayCritical,\012  JNI::ReleasePrimitiveArrayCritical,\012  JNI::GetStringCritical,\012  JNI::ReleaseStringCritical,\012  JNI::NewWeakGlobalRef,\012  JNI::DeleteWeakGlobalRef,\012  JNI::ExceptionCheck,\012  JNI::NewDirectByteBuffer,\012  JNI::GetDirectBufferAddress,\012  JNI::GetDirectBufferCapacity,\012  JNI::GetObjectRefType,\012})<SUB>2688</SUB>> ]
+"14132" [label = <(&lt;operator&gt;.assignment,(*gJniSleepForeverStub[])() = {\012 nullptr, // reserved0.\012 nullptr, // reserved1.\012 nullptr, // reserved2.\012 nullptr, // reserved3.\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012})<SUB>2928</SUB>> ]
+"14377" [label = <(UNKNOWN,},})<SUB>3168</SUB>> ]
+"34" [label = <(&lt;operator&gt;.assignment,kWarnJniAbort = false)<SUB>81</SUB>> ]
+"37" [label = <(UNKNOWN,static bool IsCallerTrusted(Thread* self) REQUIRES_SHARED(Locks::mutator_lock_) {\012 return hiddenapi::IsCallerTrusted(GetCallingClass(self, /* num_frames */ 1));\012},static bool IsCallerTrusted(Thread* self) REQUIRES_SHARED(Locks::mutator_lock_) {\012 return hiddenapi::IsCallerTrusted(GetCallingClass(self, /* num_frames */ 1));\012})<SUB>83</SUB>> ]
+"38" [label = <(UNKNOWN,template&lt;typename T&gt;\012ALWAYS_INLINE static bool ShouldBlockAccessToMember(T* member, Thread* self)\012    REQUIRES_SHARED(Locks::mutator_lock_) {\012  hiddenapi::Action action = hiddenapi::GetMemberAction(\012      member, self, IsCallerTrusted, hiddenapi::kJNI);\012 if (action != hiddenapi::kAllow) {\012    hiddenapi::NotifyHiddenApiListener(member);\012 }\012\012 return action == hiddenapi::kDeny;\012},template&lt;typename T&gt;\012ALWAYS_INLINE static bool ShouldBlockAccessToMember(T* member, Thread* self)\012    REQUIRES_SHARED(Locks::mutator_lock_) {\012  hiddenapi::Action action = hiddenapi::GetMemberAction(\012      member, self, IsCallerTrusted, hiddenapi::kJNI);\012 if (action != hiddenapi::kAllow) {\012    hiddenapi::NotifyHiddenApiListener(member);\012 }\012\012 return action == hiddenapi::kDeny;\012})<SUB>87</SUB>> ]
+"46" [label = <(UNKNOWN,),))<SUB>102</SUB>> ]
+"47" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012  DCHECK_EQ(field-&gt;GetTypeAsPrimitiveType(), Primitive::kPrimNot);,REQUIRES_SHARED(Locks::mutator_lock_) {\012  DCHECK_EQ(field-&gt;GetTypeAsPrimitiveType(), Primitive::kPrimNot);)<SUB>103</SUB>> ]
+"49" [label = <(&lt;operator&gt;.assignment,* instrumentation = Runtime::Current()-&gt;GetInstrumentation())<SUB>105</SUB>> ]
+"58" [label = <(UNKNOWN,if (UNLIKELY(instrumentation-&gt;HasFieldWriteListeners())) {\012 Thread* self = Thread::Current();\012 ArtMethod* cur_method = self-&gt;GetCurrentMethod(/*dex_pc*/ nullptr,\012 /*check_suspended*/ true,\012 /*abort_on_error*/ false);\012\012 if (cur_method == nullptr) {\012 // Set/Get Fields can be issued without a method during runtime startup/teardown. Ignore all\012 // of these changes.\012 return;\012 }\012    DCHECK(cur_method-&gt;IsNative());\012 JValue val;\012    val.SetL(self-&gt;DecodeJObject(jval));\012    instrumentation-&gt;FieldWriteEvent(self,\012                                     self-&gt;DecodeJObject(obj).Ptr(),\012                                     cur_method,\012 0, // dex_pc is always 0 since this is a native method.\012                                     field,\012                                     val);\012 },if (UNLIKELY(instrumentation-&gt;HasFieldWriteListeners())) {\012 Thread* self = Thread::Current();\012 ArtMethod* cur_method = self-&gt;GetCurrentMethod(/*dex_pc*/ nullptr,\012 /*check_suspended*/ true,\012 /*abort_on_error*/ false);\012\012 if (cur_method == nullptr) {\012 // Set/Get Fields can be issued without a method during runtime startup/teardown. Ignore all\012 // of these changes.\012 return;\012 }\012    DCHECK(cur_method-&gt;IsNative());\012 JValue val;\012    val.SetL(self-&gt;DecodeJObject(jval));\012    instrumentation-&gt;FieldWriteEvent(self,\012                                     self-&gt;DecodeJObject(obj).Ptr(),\012                                     cur_method,\012 0, // dex_pc is always 0 since this is a native method.\012                                     field,\012                                     val);\012 })<SUB>106</SUB>> ]
+"71" [label = <(GetInstrumentation,Runtime::Current()-&gt;GetInstrumentation())<SUB>132</SUB>> ]
+"196" [label = <(NewHandle,hs.NewHandle(klass))<SUB>237</SUB>> ]
+"223" [label = <(GetImagePointerSize,Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize())<SUB>252</SUB>> ]
+"251" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::ClassLoader&gt;(Runtime::Current()-&gt;GetSystemClassLoader()))<SUB>281</SUB>> ]
+"284" [label = <(NewHandle,hs.NewHandle(EnsureInitialized(soa.Self(), soa.Decode&lt;mirror::Class&gt;(jni_class))))<SUB>303</SUB>> ]
+"311" [label = <(GetClassLinker,Runtime::Current()-&gt;GetClassLinker())<SUB>309</SUB>> ]
+"13188" [label = <(GetHeap,Runtime::Current()-&gt;GetHeap())<SUB>2612</SUB>> ]
+"13198" [label = <(&lt;operator&gt;.notEquals,array_data != elements)<SUB>2613</SUB>> ]
+"13204" [label = <(&lt;operator&gt;.multiplication,array-&gt;GetLength() * component_size)<SUB>2614</SUB>> ]
+"13429" [label = <(&lt;operator&gt;.arrayInitializer,{\012 nullptr, // reserved0.\012 nullptr, // reserved1.\012 nullptr, // reserved2.\012 nullptr, // reserved3.\012  JNI::GetVersion,\012  JNI::DefineClass,\012  JNI::FindClass,\012  JNI::FromReflectedMethod,\012  JNI::FromReflectedField,\012  JNI::ToReflectedMethod,\012  JNI::GetSuperclass,\012  JNI::IsAssignableFrom,\012  JNI::ToReflectedField,\012  JNI::Throw,\012  JNI::ThrowNew,\012  JNI::ExceptionOccurred,\012  JNI::ExceptionDescribe,\012  JNI::ExceptionClear,\012  JNI::FatalError,\012  JNI::PushLocalFrame,\012  JNI::PopLocalFrame,\012  JNI::NewGlobalRef,\012  JNI::DeleteGlobalRef,\012  JNI::DeleteLocalRef,\012  JNI::IsSameObject,\012  JNI::NewLocalRef,\012  JNI::EnsureLocalCapacity,\012  JNI::AllocObject,\012  JNI::NewObject,\012  JNI::NewObjectV,\012  JNI::NewObjectA,\012  JNI::GetObjectClass,\012  JNI::IsInstanceOf,\012  JNI::GetMethodID,\012  JNI::CallObjectMethod,\012  JNI::CallObjectMethodV,\012  JNI::CallObjectMethodA,\012  JNI::CallBooleanMethod,\012  JNI::CallBooleanMethodV,\012  JNI::CallBooleanMethodA,\012  JNI::CallByteMethod,\012  JNI::CallByteMethodV,\012  JNI::CallByteMethodA,\012  JNI::CallCharMethod,\012  JNI::CallCharMethodV,\012  JNI::CallCharMethodA,\012  JNI::CallShortMethod,\012  JNI::CallShortMethodV,\012  JNI::CallShortMethodA,\012  JNI::CallIntMethod,\012  JNI::CallIntMethodV,\012  JNI::CallIntMethodA,\012  JNI::CallLongMethod,\012  JNI::CallLongMethodV,\012  JNI::CallLongMethodA,\012  JNI::CallFloatMethod,\012  JNI::CallFloatMethodV,\012  JNI::CallFloatMethodA,\012  JNI::CallDoubleMethod,\012  JNI::CallDoubleMethodV,\012  JNI::CallDoubleMethodA,\012  JNI::CallVoidMethod,\012  JNI::CallVoidMethodV,\012  JNI::CallVoidMethodA,\012  JNI::CallNonvirtualObjectMethod,\012  JNI::CallNonvirtualObjectMethodV,\012  JNI::CallNonvirtualObjectMethodA,\012  JNI::CallNonvirtualBooleanMethod,\012  JNI::CallNonvirtualBooleanMethodV,\012  JNI::CallNonvirtualBooleanMethodA,\012  JNI::CallNonvirtualByteMethod,\012  JNI::CallNonvirtualByteMethodV,\012  JNI::CallNonvirtualByteMethodA,\012  JNI::CallNonvirtualCharMethod,\012  JNI::CallNonvirtualCharMethodV,\012  JNI::CallNonvirtualCharMethodA,\012  JNI::CallNonvirtualShortMethod,\012  JNI::CallNonvirtualShortMethodV,\012  JNI::CallNonvirtualShortMethodA,\012  JNI::CallNonvirtualIntMethod,\012  JNI::CallNonvirtualIntMethodV,\012  JNI::CallNonvirtualIntMethodA,\012  JNI::CallNonvirtualLongMethod,\012  JNI::CallNonvirtualLongMethodV,\012  JNI::CallNonvirtualLongMethodA,\012  JNI::CallNonvirtualFloatMethod,\012  JNI::CallNonvirtualFloatMethodV,\012  JNI::CallNonvirtualFloatMethodA,\012  JNI::CallNonvirtualDoubleMethod,\012  JNI::CallNonvirtualDoubleMethodV,\012  JNI::CallNonvirtualDoubleMethodA,\012  JNI::CallNonvirtualVoidMethod,\012  JNI::CallNonvirtualVoidMethodV,\012  JNI::CallNonvirtualVoidMethodA,\012  JNI::GetFieldID,\012  JNI::GetObjectField,\012  JNI::GetBooleanField,\012  JNI::GetByteField,\012  JNI::GetCharField,\012  JNI::GetShortField,\012  JNI::GetIntField,\012  JNI::GetLongField,\012  JNI::GetFloatField,\012  JNI::GetDoubleField,\012  JNI::SetObjectField,\012  JNI::SetBooleanField,\012  JNI::SetByteField,\012  JNI::SetCharField,\012  JNI::SetShortField,\012  JNI::SetIntField,\012  JNI::SetLongField,\012  JNI::SetFloatField,\012  JNI::SetDoubleField,\012  JNI::GetStaticMethodID,\012  JNI::CallStaticObjectMethod,\012  JNI::CallStaticObjectMethodV,\012  JNI::CallStaticObjectMethodA,\012  JNI::CallStaticBooleanMethod,\012  JNI::CallStaticBooleanMethodV,\012  JNI::CallStaticBooleanMethodA,\012  JNI::CallStaticByteMethod,\012  JNI::CallStaticByteMethodV,\012  JNI::CallStaticByteMethodA,\012  JNI::CallStaticCharMethod,\012  JNI::CallStaticCharMethodV,\012  JNI::CallStaticCharMethodA,\012  JNI::CallStaticShortMethod,\012  JNI::CallStaticShortMethodV,\012  JNI::CallStaticShortMethodA,\012  JNI::CallStaticIntMethod,\012  JNI::CallStaticIntMethodV,\012  JNI::CallStaticIntMethodA,\012  JNI::CallStaticLongMethod,\012  JNI::CallStaticLongMethodV,\012  JNI::CallStaticLongMethodA,\012  JNI::CallStaticFloatMethod,\012  JNI::CallStaticFloatMethodV,\012  JNI::CallStaticFloatMethodA,\012  JNI::CallStaticDoubleMethod,\012  JNI::CallStaticDoubleMethodV,\012  JNI::CallStaticDoubleMethodA,\012  JNI::CallStaticVoidMethod,\012  JNI::CallStaticVoidMethodV,\012  JNI::CallStaticVoidMethodA,\012  JNI::GetStaticFieldID,\012  JNI::GetStaticObjectField,\012  JNI::GetStaticBooleanField,\012  JNI::GetStaticByteField,\012  JNI::GetStaticCharField,\012  JNI::GetStaticShortField,\012  JNI::GetStaticIntField,\012  JNI::GetStaticLongField,\012  JNI::GetStaticFloatField,\012  JNI::GetStaticDoubleField,\012  JNI::SetStaticObjectField,\012  JNI::SetStaticBooleanField,\012  JNI::SetStaticByteField,\012  JNI::SetStaticCharField,\012  JNI::SetStaticShortField,\012  JNI::SetStaticIntField,\012  JNI::SetStaticLongField,\012  JNI::SetStaticFloatField,\012  JNI::SetStaticDoubleField,\012  JNI::NewString,\012  JNI::GetStringLength,\012  JNI::GetStringChars,\012  JNI::ReleaseStringChars,\012  JNI::NewStringUTF,\012  JNI::GetStringUTFLength,\012  JNI::GetStringUTFChars,\012  JNI::ReleaseStringUTFChars,\012  JNI::GetArrayLength,\012  JNI::NewObjectArray,\012  JNI::GetObjectArrayElement,\012  JNI::SetObjectArrayElement,\012  JNI::NewBooleanArray,\012  JNI::NewByteArray,\012  JNI::NewCharArray,\012  JNI::NewShortArray,\012  JNI::NewIntArray,\012  JNI::NewLongArray,\012  JNI::NewFloatArray,\012  JNI::NewDoubleArray,\012  JNI::GetBooleanArrayElements,\012  JNI::GetByteArrayElements,\012  JNI::GetCharArrayElements,\012  JNI::GetShortArrayElements,\012  JNI::GetIntArrayElements,\012  JNI::GetLongArrayElements,\012  JNI::GetFloatArrayElements,\012  JNI::GetDoubleArrayElements,\012  JNI::ReleaseBooleanArrayElements,\012  JNI::ReleaseByteArrayElements,\012  JNI::ReleaseCharArrayElements,\012  JNI::ReleaseShortArrayElements,\012  JNI::ReleaseIntArrayElements,\012  JNI::ReleaseLongArrayElements,\012  JNI::ReleaseFloatArrayElements,\012  JNI::ReleaseDoubleArrayElements,\012  JNI::GetBooleanArrayRegion,\012  JNI::GetByteArrayRegion,\012  JNI::GetCharArrayRegion,\012  JNI::GetShortArrayRegion,\012  JNI::GetIntArrayRegion,\012  JNI::GetLongArrayRegion,\012  JNI::GetFloatArrayRegion,\012  JNI::GetDoubleArrayRegion,\012  JNI::SetBooleanArrayRegion,\012  JNI::SetByteArrayRegion,\012  JNI::SetCharArrayRegion,\012  JNI::SetShortArrayRegion,\012  JNI::SetIntArrayRegion,\012  JNI::SetLongArrayRegion,\012  JNI::SetFloatArrayRegion,\012  JNI::SetDoubleArrayRegion,\012  JNI::RegisterNatives,\012  JNI::UnregisterNatives,\012  JNI::MonitorEnter,\012  JNI::MonitorExit,\012  JNI::GetJavaVM,\012  JNI::GetStringRegion,\012  JNI::GetStringUTFRegion,\012  JNI::GetPrimitiveArrayCritical,\012  JNI::ReleasePrimitiveArrayCritical,\012  JNI::GetStringCritical,\012  JNI::ReleaseStringCritical,\012  JNI::NewWeakGlobalRef,\012  JNI::DeleteWeakGlobalRef,\012  JNI::ExceptionCheck,\012  JNI::NewDirectByteBuffer,\012  JNI::GetDirectBufferAddress,\012  JNI::GetDirectBufferCapacity,\012  JNI::GetObjectRefType,\012})<SUB>2688</SUB>> ]
+"14134" [label = <(&lt;operator&gt;.arrayInitializer,{\012 nullptr, // reserved0.\012 nullptr, // reserved1.\012 nullptr, // reserved2.\012 nullptr, // reserved3.\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012})<SUB>2928</SUB>> ]
+"51" [label = <(GetInstrumentation,Runtime::Current()-&gt;GetInstrumentation())<SUB>105</SUB>> ]
+"72" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetInstrumentation)<SUB>132</SUB>> ]
+"197" [label = <(&lt;operator&gt;.fieldAccess,hs.NewHandle)<SUB>237</SUB>> ]
+"224" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize)<SUB>252</SUB>> ]
+"252" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::ClassLoader)<SUB>281</SUB>> ]
+"259" [label = <(GetSystemClassLoader,Runtime::Current()-&gt;GetSystemClassLoader())<SUB>281</SUB>> ]
+"285" [label = <(&lt;operator&gt;.fieldAccess,hs.NewHandle)<SUB>303</SUB>> ]
+"288" [label = <(EnsureInitialized,EnsureInitialized(soa.Self(), soa.Decode&lt;mirror::Class&gt;(jni_class)))<SUB>303</SUB>> ]
+"312" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetClassLinker)<SUB>309</SUB>> ]
+"13189" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetHeap)<SUB>2612</SUB>> ]
+"13205" [label = <(GetLength,array-&gt;GetLength())<SUB>2614</SUB>> ]
+"13434" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetVersion)<SUB>2693</SUB>> ]
+"13437" [label = <(&lt;operator&gt;.fieldAccess,JNI::DefineClass)<SUB>2694</SUB>> ]
+"13440" [label = <(&lt;operator&gt;.fieldAccess,JNI::FindClass)<SUB>2695</SUB>> ]
+"13443" [label = <(&lt;operator&gt;.fieldAccess,JNI::FromReflectedMethod)<SUB>2696</SUB>> ]
+"13446" [label = <(&lt;operator&gt;.fieldAccess,JNI::FromReflectedField)<SUB>2697</SUB>> ]
+"13449" [label = <(&lt;operator&gt;.fieldAccess,JNI::ToReflectedMethod)<SUB>2698</SUB>> ]
+"13452" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetSuperclass)<SUB>2699</SUB>> ]
+"13455" [label = <(&lt;operator&gt;.fieldAccess,JNI::IsAssignableFrom)<SUB>2700</SUB>> ]
+"13458" [label = <(&lt;operator&gt;.fieldAccess,JNI::ToReflectedField)<SUB>2701</SUB>> ]
+"13461" [label = <(&lt;operator&gt;.fieldAccess,JNI::Throw)<SUB>2702</SUB>> ]
+"13464" [label = <(&lt;operator&gt;.fieldAccess,JNI::ThrowNew)<SUB>2703</SUB>> ]
+"13467" [label = <(&lt;operator&gt;.fieldAccess,JNI::ExceptionOccurred)<SUB>2704</SUB>> ]
+"13470" [label = <(&lt;operator&gt;.fieldAccess,JNI::ExceptionDescribe)<SUB>2705</SUB>> ]
+"13473" [label = <(&lt;operator&gt;.fieldAccess,JNI::ExceptionClear)<SUB>2706</SUB>> ]
+"13476" [label = <(&lt;operator&gt;.fieldAccess,JNI::FatalError)<SUB>2707</SUB>> ]
+"13479" [label = <(&lt;operator&gt;.fieldAccess,JNI::PushLocalFrame)<SUB>2708</SUB>> ]
+"13482" [label = <(&lt;operator&gt;.fieldAccess,JNI::PopLocalFrame)<SUB>2709</SUB>> ]
+"13485" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewGlobalRef)<SUB>2710</SUB>> ]
+"13488" [label = <(&lt;operator&gt;.fieldAccess,JNI::DeleteGlobalRef)<SUB>2711</SUB>> ]
+"13491" [label = <(&lt;operator&gt;.fieldAccess,JNI::DeleteLocalRef)<SUB>2712</SUB>> ]
+"13494" [label = <(&lt;operator&gt;.fieldAccess,JNI::IsSameObject)<SUB>2713</SUB>> ]
+"13497" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewLocalRef)<SUB>2714</SUB>> ]
+"13500" [label = <(&lt;operator&gt;.fieldAccess,JNI::EnsureLocalCapacity)<SUB>2715</SUB>> ]
+"13503" [label = <(&lt;operator&gt;.fieldAccess,JNI::AllocObject)<SUB>2716</SUB>> ]
+"13506" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewObject)<SUB>2717</SUB>> ]
+"13509" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewObjectV)<SUB>2718</SUB>> ]
+"13512" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewObjectA)<SUB>2719</SUB>> ]
+"13515" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetObjectClass)<SUB>2720</SUB>> ]
+"13518" [label = <(&lt;operator&gt;.fieldAccess,JNI::IsInstanceOf)<SUB>2721</SUB>> ]
+"13521" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetMethodID)<SUB>2722</SUB>> ]
+"13524" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallObjectMethod)<SUB>2723</SUB>> ]
+"13527" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallObjectMethodV)<SUB>2724</SUB>> ]
+"13530" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallObjectMethodA)<SUB>2725</SUB>> ]
+"13533" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallBooleanMethod)<SUB>2726</SUB>> ]
+"13536" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallBooleanMethodV)<SUB>2727</SUB>> ]
+"13539" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallBooleanMethodA)<SUB>2728</SUB>> ]
+"13542" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallByteMethod)<SUB>2729</SUB>> ]
+"13545" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallByteMethodV)<SUB>2730</SUB>> ]
+"13548" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallByteMethodA)<SUB>2731</SUB>> ]
+"13551" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallCharMethod)<SUB>2732</SUB>> ]
+"13554" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallCharMethodV)<SUB>2733</SUB>> ]
+"13557" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallCharMethodA)<SUB>2734</SUB>> ]
+"13560" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallShortMethod)<SUB>2735</SUB>> ]
+"13563" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallShortMethodV)<SUB>2736</SUB>> ]
+"13566" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallShortMethodA)<SUB>2737</SUB>> ]
+"13569" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallIntMethod)<SUB>2738</SUB>> ]
+"13572" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallIntMethodV)<SUB>2739</SUB>> ]
+"13575" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallIntMethodA)<SUB>2740</SUB>> ]
+"13578" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallLongMethod)<SUB>2741</SUB>> ]
+"13581" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallLongMethodV)<SUB>2742</SUB>> ]
+"13584" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallLongMethodA)<SUB>2743</SUB>> ]
+"13587" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallFloatMethod)<SUB>2744</SUB>> ]
+"13590" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallFloatMethodV)<SUB>2745</SUB>> ]
+"13593" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallFloatMethodA)<SUB>2746</SUB>> ]
+"13596" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallDoubleMethod)<SUB>2747</SUB>> ]
+"13599" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallDoubleMethodV)<SUB>2748</SUB>> ]
+"13602" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallDoubleMethodA)<SUB>2749</SUB>> ]
+"13605" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallVoidMethod)<SUB>2750</SUB>> ]
+"13608" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallVoidMethodV)<SUB>2751</SUB>> ]
+"13611" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallVoidMethodA)<SUB>2752</SUB>> ]
+"13614" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualObjectMethod)<SUB>2753</SUB>> ]
+"13617" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualObjectMethodV)<SUB>2754</SUB>> ]
+"13620" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualObjectMethodA)<SUB>2755</SUB>> ]
+"13623" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualBooleanMethod)<SUB>2756</SUB>> ]
+"13626" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualBooleanMethodV)<SUB>2757</SUB>> ]
+"13629" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualBooleanMethodA)<SUB>2758</SUB>> ]
+"13632" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualByteMethod)<SUB>2759</SUB>> ]
+"13635" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualByteMethodV)<SUB>2760</SUB>> ]
+"13638" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualByteMethodA)<SUB>2761</SUB>> ]
+"13641" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualCharMethod)<SUB>2762</SUB>> ]
+"13644" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualCharMethodV)<SUB>2763</SUB>> ]
+"13647" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualCharMethodA)<SUB>2764</SUB>> ]
+"13650" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualShortMethod)<SUB>2765</SUB>> ]
+"13653" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualShortMethodV)<SUB>2766</SUB>> ]
+"13656" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualShortMethodA)<SUB>2767</SUB>> ]
+"13659" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualIntMethod)<SUB>2768</SUB>> ]
+"13662" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualIntMethodV)<SUB>2769</SUB>> ]
+"13665" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualIntMethodA)<SUB>2770</SUB>> ]
+"13668" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualLongMethod)<SUB>2771</SUB>> ]
+"13671" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualLongMethodV)<SUB>2772</SUB>> ]
+"13674" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualLongMethodA)<SUB>2773</SUB>> ]
+"13677" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualFloatMethod)<SUB>2774</SUB>> ]
+"13680" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualFloatMethodV)<SUB>2775</SUB>> ]
+"13683" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualFloatMethodA)<SUB>2776</SUB>> ]
+"13686" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualDoubleMethod)<SUB>2777</SUB>> ]
+"13689" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualDoubleMethodV)<SUB>2778</SUB>> ]
+"13692" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualDoubleMethodA)<SUB>2779</SUB>> ]
+"13695" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualVoidMethod)<SUB>2780</SUB>> ]
+"13698" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualVoidMethodV)<SUB>2781</SUB>> ]
+"13701" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualVoidMethodA)<SUB>2782</SUB>> ]
+"13704" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetFieldID)<SUB>2783</SUB>> ]
+"13707" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetObjectField)<SUB>2784</SUB>> ]
+"13710" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetBooleanField)<SUB>2785</SUB>> ]
+"13713" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetByteField)<SUB>2786</SUB>> ]
+"13716" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetCharField)<SUB>2787</SUB>> ]
+"13719" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetShortField)<SUB>2788</SUB>> ]
+"13722" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetIntField)<SUB>2789</SUB>> ]
+"13725" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetLongField)<SUB>2790</SUB>> ]
+"13728" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetFloatField)<SUB>2791</SUB>> ]
+"13731" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetDoubleField)<SUB>2792</SUB>> ]
+"13734" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetObjectField)<SUB>2793</SUB>> ]
+"13737" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetBooleanField)<SUB>2794</SUB>> ]
+"13740" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetByteField)<SUB>2795</SUB>> ]
+"13743" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetCharField)<SUB>2796</SUB>> ]
+"13746" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetShortField)<SUB>2797</SUB>> ]
+"13749" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetIntField)<SUB>2798</SUB>> ]
+"13752" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetLongField)<SUB>2799</SUB>> ]
+"13755" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetFloatField)<SUB>2800</SUB>> ]
+"13758" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetDoubleField)<SUB>2801</SUB>> ]
+"13761" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStaticMethodID)<SUB>2802</SUB>> ]
+"13764" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticObjectMethod)<SUB>2803</SUB>> ]
+"13767" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticObjectMethodV)<SUB>2804</SUB>> ]
+"13770" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticObjectMethodA)<SUB>2805</SUB>> ]
+"13773" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticBooleanMethod)<SUB>2806</SUB>> ]
+"13776" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticBooleanMethodV)<SUB>2807</SUB>> ]
+"13779" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticBooleanMethodA)<SUB>2808</SUB>> ]
+"13782" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticByteMethod)<SUB>2809</SUB>> ]
+"13785" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticByteMethodV)<SUB>2810</SUB>> ]
+"13788" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticByteMethodA)<SUB>2811</SUB>> ]
+"13791" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticCharMethod)<SUB>2812</SUB>> ]
+"13794" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticCharMethodV)<SUB>2813</SUB>> ]
+"13797" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticCharMethodA)<SUB>2814</SUB>> ]
+"13800" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticShortMethod)<SUB>2815</SUB>> ]
+"13803" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticShortMethodV)<SUB>2816</SUB>> ]
+"13806" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticShortMethodA)<SUB>2817</SUB>> ]
+"13809" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticIntMethod)<SUB>2818</SUB>> ]
+"13812" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticIntMethodV)<SUB>2819</SUB>> ]
+"13815" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticIntMethodA)<SUB>2820</SUB>> ]
+"13818" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticLongMethod)<SUB>2821</SUB>> ]
+"13821" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticLongMethodV)<SUB>2822</SUB>> ]
+"13824" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticLongMethodA)<SUB>2823</SUB>> ]
+"13827" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticFloatMethod)<SUB>2824</SUB>> ]
+"13830" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticFloatMethodV)<SUB>2825</SUB>> ]
+"13833" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticFloatMethodA)<SUB>2826</SUB>> ]
+"13836" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticDoubleMethod)<SUB>2827</SUB>> ]
+"13839" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticDoubleMethodV)<SUB>2828</SUB>> ]
+"13842" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticDoubleMethodA)<SUB>2829</SUB>> ]
+"13845" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticVoidMethod)<SUB>2830</SUB>> ]
+"13848" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticVoidMethodV)<SUB>2831</SUB>> ]
+"13851" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticVoidMethodA)<SUB>2832</SUB>> ]
+"13854" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStaticFieldID)<SUB>2833</SUB>> ]
+"13857" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStaticObjectField)<SUB>2834</SUB>> ]
+"13860" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStaticBooleanField)<SUB>2835</SUB>> ]
+"13863" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStaticByteField)<SUB>2836</SUB>> ]
+"13866" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStaticCharField)<SUB>2837</SUB>> ]
+"13869" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStaticShortField)<SUB>2838</SUB>> ]
+"13872" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStaticIntField)<SUB>2839</SUB>> ]
+"13875" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStaticLongField)<SUB>2840</SUB>> ]
+"13878" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStaticFloatField)<SUB>2841</SUB>> ]
+"13881" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStaticDoubleField)<SUB>2842</SUB>> ]
+"13884" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetStaticObjectField)<SUB>2843</SUB>> ]
+"13887" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetStaticBooleanField)<SUB>2844</SUB>> ]
+"13890" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetStaticByteField)<SUB>2845</SUB>> ]
+"13893" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetStaticCharField)<SUB>2846</SUB>> ]
+"13896" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetStaticShortField)<SUB>2847</SUB>> ]
+"13899" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetStaticIntField)<SUB>2848</SUB>> ]
+"13902" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetStaticLongField)<SUB>2849</SUB>> ]
+"13905" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetStaticFloatField)<SUB>2850</SUB>> ]
+"13908" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetStaticDoubleField)<SUB>2851</SUB>> ]
+"13911" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewString)<SUB>2852</SUB>> ]
+"13914" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStringLength)<SUB>2853</SUB>> ]
+"13917" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStringChars)<SUB>2854</SUB>> ]
+"13920" [label = <(&lt;operator&gt;.fieldAccess,JNI::ReleaseStringChars)<SUB>2855</SUB>> ]
+"13923" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewStringUTF)<SUB>2856</SUB>> ]
+"13926" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStringUTFLength)<SUB>2857</SUB>> ]
+"13929" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStringUTFChars)<SUB>2858</SUB>> ]
+"13932" [label = <(&lt;operator&gt;.fieldAccess,JNI::ReleaseStringUTFChars)<SUB>2859</SUB>> ]
+"13935" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetArrayLength)<SUB>2860</SUB>> ]
+"13938" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewObjectArray)<SUB>2861</SUB>> ]
+"13941" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetObjectArrayElement)<SUB>2862</SUB>> ]
+"13944" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetObjectArrayElement)<SUB>2863</SUB>> ]
+"13947" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewBooleanArray)<SUB>2864</SUB>> ]
+"13950" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewByteArray)<SUB>2865</SUB>> ]
+"13953" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewCharArray)<SUB>2866</SUB>> ]
+"13956" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewShortArray)<SUB>2867</SUB>> ]
+"13959" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewIntArray)<SUB>2868</SUB>> ]
+"13962" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewLongArray)<SUB>2869</SUB>> ]
+"13965" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewFloatArray)<SUB>2870</SUB>> ]
+"13968" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewDoubleArray)<SUB>2871</SUB>> ]
+"13971" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetBooleanArrayElements)<SUB>2872</SUB>> ]
+"13974" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetByteArrayElements)<SUB>2873</SUB>> ]
+"13977" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetCharArrayElements)<SUB>2874</SUB>> ]
+"13980" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetShortArrayElements)<SUB>2875</SUB>> ]
+"13983" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetIntArrayElements)<SUB>2876</SUB>> ]
+"13986" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetLongArrayElements)<SUB>2877</SUB>> ]
+"13989" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetFloatArrayElements)<SUB>2878</SUB>> ]
+"13992" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetDoubleArrayElements)<SUB>2879</SUB>> ]
+"13995" [label = <(&lt;operator&gt;.fieldAccess,JNI::ReleaseBooleanArrayElements)<SUB>2880</SUB>> ]
+"13998" [label = <(&lt;operator&gt;.fieldAccess,JNI::ReleaseByteArrayElements)<SUB>2881</SUB>> ]
+"14001" [label = <(&lt;operator&gt;.fieldAccess,JNI::ReleaseCharArrayElements)<SUB>2882</SUB>> ]
+"14004" [label = <(&lt;operator&gt;.fieldAccess,JNI::ReleaseShortArrayElements)<SUB>2883</SUB>> ]
+"14007" [label = <(&lt;operator&gt;.fieldAccess,JNI::ReleaseIntArrayElements)<SUB>2884</SUB>> ]
+"14010" [label = <(&lt;operator&gt;.fieldAccess,JNI::ReleaseLongArrayElements)<SUB>2885</SUB>> ]
+"14013" [label = <(&lt;operator&gt;.fieldAccess,JNI::ReleaseFloatArrayElements)<SUB>2886</SUB>> ]
+"14016" [label = <(&lt;operator&gt;.fieldAccess,JNI::ReleaseDoubleArrayElements)<SUB>2887</SUB>> ]
+"14019" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetBooleanArrayRegion)<SUB>2888</SUB>> ]
+"14022" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetByteArrayRegion)<SUB>2889</SUB>> ]
+"14025" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetCharArrayRegion)<SUB>2890</SUB>> ]
+"14028" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetShortArrayRegion)<SUB>2891</SUB>> ]
+"14031" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetIntArrayRegion)<SUB>2892</SUB>> ]
+"14034" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetLongArrayRegion)<SUB>2893</SUB>> ]
+"14037" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetFloatArrayRegion)<SUB>2894</SUB>> ]
+"14040" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetDoubleArrayRegion)<SUB>2895</SUB>> ]
+"14043" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetBooleanArrayRegion)<SUB>2896</SUB>> ]
+"14046" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetByteArrayRegion)<SUB>2897</SUB>> ]
+"14049" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetCharArrayRegion)<SUB>2898</SUB>> ]
+"14052" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetShortArrayRegion)<SUB>2899</SUB>> ]
+"14055" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetIntArrayRegion)<SUB>2900</SUB>> ]
+"14058" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetLongArrayRegion)<SUB>2901</SUB>> ]
+"14061" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetFloatArrayRegion)<SUB>2902</SUB>> ]
+"14064" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetDoubleArrayRegion)<SUB>2903</SUB>> ]
+"14067" [label = <(&lt;operator&gt;.fieldAccess,JNI::RegisterNatives)<SUB>2904</SUB>> ]
+"14070" [label = <(&lt;operator&gt;.fieldAccess,JNI::UnregisterNatives)<SUB>2905</SUB>> ]
+"14073" [label = <(&lt;operator&gt;.fieldAccess,JNI::MonitorEnter)<SUB>2906</SUB>> ]
+"14076" [label = <(&lt;operator&gt;.fieldAccess,JNI::MonitorExit)<SUB>2907</SUB>> ]
+"14079" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetJavaVM)<SUB>2908</SUB>> ]
+"14082" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStringRegion)<SUB>2909</SUB>> ]
+"14085" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStringUTFRegion)<SUB>2910</SUB>> ]
+"14088" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetPrimitiveArrayCritical)<SUB>2911</SUB>> ]
+"14091" [label = <(&lt;operator&gt;.fieldAccess,JNI::ReleasePrimitiveArrayCritical)<SUB>2912</SUB>> ]
+"14094" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStringCritical)<SUB>2913</SUB>> ]
+"14097" [label = <(&lt;operator&gt;.fieldAccess,JNI::ReleaseStringCritical)<SUB>2914</SUB>> ]
+"14100" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewWeakGlobalRef)<SUB>2915</SUB>> ]
+"14103" [label = <(&lt;operator&gt;.fieldAccess,JNI::DeleteWeakGlobalRef)<SUB>2916</SUB>> ]
+"14106" [label = <(&lt;operator&gt;.fieldAccess,JNI::ExceptionCheck)<SUB>2917</SUB>> ]
+"14109" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewDirectByteBuffer)<SUB>2918</SUB>> ]
+"14112" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetDirectBufferAddress)<SUB>2919</SUB>> ]
+"14115" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetDirectBufferCapacity)<SUB>2920</SUB>> ]
+"14118" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetObjectRefType)<SUB>2921</SUB>> ]
+"52" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetInstrumentation)<SUB>105</SUB>> ]
+"73" [label = <(Runtime::Current,Runtime::Current())<SUB>132</SUB>> ]
+"77" [label = <(FIELD_IDENTIFIER,GetInstrumentation,GetInstrumentation)<SUB>132</SUB>> ]
+"199" [label = <(FIELD_IDENTIFIER,NewHandle,NewHandle)<SUB>237</SUB>> ]
+"225" [label = <(GetClassLinker,Runtime::Current()-&gt;GetClassLinker())<SUB>252</SUB>> ]
+"232" [label = <(FIELD_IDENTIFIER,GetImagePointerSize,GetImagePointerSize)<SUB>252</SUB>> ]
+"253" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>281</SUB>> ]
+"256" [label = <(&lt;operator&gt;.fieldAccess,mirror::ClassLoader)<SUB>281</SUB>> ]
+"260" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetSystemClassLoader)<SUB>281</SUB>> ]
+"287" [label = <(FIELD_IDENTIFIER,NewHandle,NewHandle)<SUB>303</SUB>> ]
+"289" [label = <(Self,soa.Self())<SUB>303</SUB>> ]
+"293" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(jni_class))<SUB>303</SUB>> ]
+"313" [label = <(Runtime::Current,Runtime::Current())<SUB>309</SUB>> ]
+"317" [label = <(FIELD_IDENTIFIER,GetClassLinker,GetClassLinker)<SUB>309</SUB>> ]
+"13190" [label = <(Runtime::Current,Runtime::Current())<SUB>2612</SUB>> ]
+"13194" [label = <(FIELD_IDENTIFIER,GetHeap,GetHeap)<SUB>2612</SUB>> ]
+"13206" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetLength)<SUB>2614</SUB>> ]
+"13436" [label = <(FIELD_IDENTIFIER,GetVersion,GetVersion)<SUB>2693</SUB>> ]
+"13439" [label = <(FIELD_IDENTIFIER,DefineClass,DefineClass)<SUB>2694</SUB>> ]
+"13442" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>2695</SUB>> ]
+"13445" [label = <(FIELD_IDENTIFIER,FromReflectedMethod,FromReflectedMethod)<SUB>2696</SUB>> ]
+"13448" [label = <(FIELD_IDENTIFIER,FromReflectedField,FromReflectedField)<SUB>2697</SUB>> ]
+"13451" [label = <(FIELD_IDENTIFIER,ToReflectedMethod,ToReflectedMethod)<SUB>2698</SUB>> ]
+"13454" [label = <(FIELD_IDENTIFIER,GetSuperclass,GetSuperclass)<SUB>2699</SUB>> ]
+"13457" [label = <(FIELD_IDENTIFIER,IsAssignableFrom,IsAssignableFrom)<SUB>2700</SUB>> ]
+"13460" [label = <(FIELD_IDENTIFIER,ToReflectedField,ToReflectedField)<SUB>2701</SUB>> ]
+"13463" [label = <(FIELD_IDENTIFIER,Throw,Throw)<SUB>2702</SUB>> ]
+"13466" [label = <(FIELD_IDENTIFIER,ThrowNew,ThrowNew)<SUB>2703</SUB>> ]
+"13469" [label = <(FIELD_IDENTIFIER,ExceptionOccurred,ExceptionOccurred)<SUB>2704</SUB>> ]
+"13472" [label = <(FIELD_IDENTIFIER,ExceptionDescribe,ExceptionDescribe)<SUB>2705</SUB>> ]
+"13475" [label = <(FIELD_IDENTIFIER,ExceptionClear,ExceptionClear)<SUB>2706</SUB>> ]
+"13478" [label = <(FIELD_IDENTIFIER,FatalError,FatalError)<SUB>2707</SUB>> ]
+"13481" [label = <(FIELD_IDENTIFIER,PushLocalFrame,PushLocalFrame)<SUB>2708</SUB>> ]
+"13484" [label = <(FIELD_IDENTIFIER,PopLocalFrame,PopLocalFrame)<SUB>2709</SUB>> ]
+"13487" [label = <(FIELD_IDENTIFIER,NewGlobalRef,NewGlobalRef)<SUB>2710</SUB>> ]
+"13490" [label = <(FIELD_IDENTIFIER,DeleteGlobalRef,DeleteGlobalRef)<SUB>2711</SUB>> ]
+"13493" [label = <(FIELD_IDENTIFIER,DeleteLocalRef,DeleteLocalRef)<SUB>2712</SUB>> ]
+"13496" [label = <(FIELD_IDENTIFIER,IsSameObject,IsSameObject)<SUB>2713</SUB>> ]
+"13499" [label = <(FIELD_IDENTIFIER,NewLocalRef,NewLocalRef)<SUB>2714</SUB>> ]
+"13502" [label = <(FIELD_IDENTIFIER,EnsureLocalCapacity,EnsureLocalCapacity)<SUB>2715</SUB>> ]
+"13505" [label = <(FIELD_IDENTIFIER,AllocObject,AllocObject)<SUB>2716</SUB>> ]
+"13508" [label = <(FIELD_IDENTIFIER,NewObject,NewObject)<SUB>2717</SUB>> ]
+"13511" [label = <(FIELD_IDENTIFIER,NewObjectV,NewObjectV)<SUB>2718</SUB>> ]
+"13514" [label = <(FIELD_IDENTIFIER,NewObjectA,NewObjectA)<SUB>2719</SUB>> ]
+"13517" [label = <(FIELD_IDENTIFIER,GetObjectClass,GetObjectClass)<SUB>2720</SUB>> ]
+"13520" [label = <(FIELD_IDENTIFIER,IsInstanceOf,IsInstanceOf)<SUB>2721</SUB>> ]
+"13523" [label = <(FIELD_IDENTIFIER,GetMethodID,GetMethodID)<SUB>2722</SUB>> ]
+"13526" [label = <(FIELD_IDENTIFIER,CallObjectMethod,CallObjectMethod)<SUB>2723</SUB>> ]
+"13529" [label = <(FIELD_IDENTIFIER,CallObjectMethodV,CallObjectMethodV)<SUB>2724</SUB>> ]
+"13532" [label = <(FIELD_IDENTIFIER,CallObjectMethodA,CallObjectMethodA)<SUB>2725</SUB>> ]
+"13535" [label = <(FIELD_IDENTIFIER,CallBooleanMethod,CallBooleanMethod)<SUB>2726</SUB>> ]
+"13538" [label = <(FIELD_IDENTIFIER,CallBooleanMethodV,CallBooleanMethodV)<SUB>2727</SUB>> ]
+"13541" [label = <(FIELD_IDENTIFIER,CallBooleanMethodA,CallBooleanMethodA)<SUB>2728</SUB>> ]
+"13544" [label = <(FIELD_IDENTIFIER,CallByteMethod,CallByteMethod)<SUB>2729</SUB>> ]
+"13547" [label = <(FIELD_IDENTIFIER,CallByteMethodV,CallByteMethodV)<SUB>2730</SUB>> ]
+"13550" [label = <(FIELD_IDENTIFIER,CallByteMethodA,CallByteMethodA)<SUB>2731</SUB>> ]
+"13553" [label = <(FIELD_IDENTIFIER,CallCharMethod,CallCharMethod)<SUB>2732</SUB>> ]
+"13556" [label = <(FIELD_IDENTIFIER,CallCharMethodV,CallCharMethodV)<SUB>2733</SUB>> ]
+"13559" [label = <(FIELD_IDENTIFIER,CallCharMethodA,CallCharMethodA)<SUB>2734</SUB>> ]
+"13562" [label = <(FIELD_IDENTIFIER,CallShortMethod,CallShortMethod)<SUB>2735</SUB>> ]
+"13565" [label = <(FIELD_IDENTIFIER,CallShortMethodV,CallShortMethodV)<SUB>2736</SUB>> ]
+"13568" [label = <(FIELD_IDENTIFIER,CallShortMethodA,CallShortMethodA)<SUB>2737</SUB>> ]
+"13571" [label = <(FIELD_IDENTIFIER,CallIntMethod,CallIntMethod)<SUB>2738</SUB>> ]
+"13574" [label = <(FIELD_IDENTIFIER,CallIntMethodV,CallIntMethodV)<SUB>2739</SUB>> ]
+"13577" [label = <(FIELD_IDENTIFIER,CallIntMethodA,CallIntMethodA)<SUB>2740</SUB>> ]
+"13580" [label = <(FIELD_IDENTIFIER,CallLongMethod,CallLongMethod)<SUB>2741</SUB>> ]
+"13583" [label = <(FIELD_IDENTIFIER,CallLongMethodV,CallLongMethodV)<SUB>2742</SUB>> ]
+"13586" [label = <(FIELD_IDENTIFIER,CallLongMethodA,CallLongMethodA)<SUB>2743</SUB>> ]
+"13589" [label = <(FIELD_IDENTIFIER,CallFloatMethod,CallFloatMethod)<SUB>2744</SUB>> ]
+"13592" [label = <(FIELD_IDENTIFIER,CallFloatMethodV,CallFloatMethodV)<SUB>2745</SUB>> ]
+"13595" [label = <(FIELD_IDENTIFIER,CallFloatMethodA,CallFloatMethodA)<SUB>2746</SUB>> ]
+"13598" [label = <(FIELD_IDENTIFIER,CallDoubleMethod,CallDoubleMethod)<SUB>2747</SUB>> ]
+"13601" [label = <(FIELD_IDENTIFIER,CallDoubleMethodV,CallDoubleMethodV)<SUB>2748</SUB>> ]
+"13604" [label = <(FIELD_IDENTIFIER,CallDoubleMethodA,CallDoubleMethodA)<SUB>2749</SUB>> ]
+"13607" [label = <(FIELD_IDENTIFIER,CallVoidMethod,CallVoidMethod)<SUB>2750</SUB>> ]
+"13610" [label = <(FIELD_IDENTIFIER,CallVoidMethodV,CallVoidMethodV)<SUB>2751</SUB>> ]
+"13613" [label = <(FIELD_IDENTIFIER,CallVoidMethodA,CallVoidMethodA)<SUB>2752</SUB>> ]
+"13616" [label = <(FIELD_IDENTIFIER,CallNonvirtualObjectMethod,CallNonvirtualObjectMethod)<SUB>2753</SUB>> ]
+"13619" [label = <(FIELD_IDENTIFIER,CallNonvirtualObjectMethodV,CallNonvirtualObjectMethodV)<SUB>2754</SUB>> ]
+"13622" [label = <(FIELD_IDENTIFIER,CallNonvirtualObjectMethodA,CallNonvirtualObjectMethodA)<SUB>2755</SUB>> ]
+"13625" [label = <(FIELD_IDENTIFIER,CallNonvirtualBooleanMethod,CallNonvirtualBooleanMethod)<SUB>2756</SUB>> ]
+"13628" [label = <(FIELD_IDENTIFIER,CallNonvirtualBooleanMethodV,CallNonvirtualBooleanMethodV)<SUB>2757</SUB>> ]
+"13631" [label = <(FIELD_IDENTIFIER,CallNonvirtualBooleanMethodA,CallNonvirtualBooleanMethodA)<SUB>2758</SUB>> ]
+"13634" [label = <(FIELD_IDENTIFIER,CallNonvirtualByteMethod,CallNonvirtualByteMethod)<SUB>2759</SUB>> ]
+"13637" [label = <(FIELD_IDENTIFIER,CallNonvirtualByteMethodV,CallNonvirtualByteMethodV)<SUB>2760</SUB>> ]
+"13640" [label = <(FIELD_IDENTIFIER,CallNonvirtualByteMethodA,CallNonvirtualByteMethodA)<SUB>2761</SUB>> ]
+"13643" [label = <(FIELD_IDENTIFIER,CallNonvirtualCharMethod,CallNonvirtualCharMethod)<SUB>2762</SUB>> ]
+"13646" [label = <(FIELD_IDENTIFIER,CallNonvirtualCharMethodV,CallNonvirtualCharMethodV)<SUB>2763</SUB>> ]
+"13649" [label = <(FIELD_IDENTIFIER,CallNonvirtualCharMethodA,CallNonvirtualCharMethodA)<SUB>2764</SUB>> ]
+"13652" [label = <(FIELD_IDENTIFIER,CallNonvirtualShortMethod,CallNonvirtualShortMethod)<SUB>2765</SUB>> ]
+"13655" [label = <(FIELD_IDENTIFIER,CallNonvirtualShortMethodV,CallNonvirtualShortMethodV)<SUB>2766</SUB>> ]
+"13658" [label = <(FIELD_IDENTIFIER,CallNonvirtualShortMethodA,CallNonvirtualShortMethodA)<SUB>2767</SUB>> ]
+"13661" [label = <(FIELD_IDENTIFIER,CallNonvirtualIntMethod,CallNonvirtualIntMethod)<SUB>2768</SUB>> ]
+"13664" [label = <(FIELD_IDENTIFIER,CallNonvirtualIntMethodV,CallNonvirtualIntMethodV)<SUB>2769</SUB>> ]
+"13667" [label = <(FIELD_IDENTIFIER,CallNonvirtualIntMethodA,CallNonvirtualIntMethodA)<SUB>2770</SUB>> ]
+"13670" [label = <(FIELD_IDENTIFIER,CallNonvirtualLongMethod,CallNonvirtualLongMethod)<SUB>2771</SUB>> ]
+"13673" [label = <(FIELD_IDENTIFIER,CallNonvirtualLongMethodV,CallNonvirtualLongMethodV)<SUB>2772</SUB>> ]
+"13676" [label = <(FIELD_IDENTIFIER,CallNonvirtualLongMethodA,CallNonvirtualLongMethodA)<SUB>2773</SUB>> ]
+"13679" [label = <(FIELD_IDENTIFIER,CallNonvirtualFloatMethod,CallNonvirtualFloatMethod)<SUB>2774</SUB>> ]
+"13682" [label = <(FIELD_IDENTIFIER,CallNonvirtualFloatMethodV,CallNonvirtualFloatMethodV)<SUB>2775</SUB>> ]
+"13685" [label = <(FIELD_IDENTIFIER,CallNonvirtualFloatMethodA,CallNonvirtualFloatMethodA)<SUB>2776</SUB>> ]
+"13688" [label = <(FIELD_IDENTIFIER,CallNonvirtualDoubleMethod,CallNonvirtualDoubleMethod)<SUB>2777</SUB>> ]
+"13691" [label = <(FIELD_IDENTIFIER,CallNonvirtualDoubleMethodV,CallNonvirtualDoubleMethodV)<SUB>2778</SUB>> ]
+"13694" [label = <(FIELD_IDENTIFIER,CallNonvirtualDoubleMethodA,CallNonvirtualDoubleMethodA)<SUB>2779</SUB>> ]
+"13697" [label = <(FIELD_IDENTIFIER,CallNonvirtualVoidMethod,CallNonvirtualVoidMethod)<SUB>2780</SUB>> ]
+"13700" [label = <(FIELD_IDENTIFIER,CallNonvirtualVoidMethodV,CallNonvirtualVoidMethodV)<SUB>2781</SUB>> ]
+"13703" [label = <(FIELD_IDENTIFIER,CallNonvirtualVoidMethodA,CallNonvirtualVoidMethodA)<SUB>2782</SUB>> ]
+"13706" [label = <(FIELD_IDENTIFIER,GetFieldID,GetFieldID)<SUB>2783</SUB>> ]
+"13709" [label = <(FIELD_IDENTIFIER,GetObjectField,GetObjectField)<SUB>2784</SUB>> ]
+"13712" [label = <(FIELD_IDENTIFIER,GetBooleanField,GetBooleanField)<SUB>2785</SUB>> ]
+"13715" [label = <(FIELD_IDENTIFIER,GetByteField,GetByteField)<SUB>2786</SUB>> ]
+"13718" [label = <(FIELD_IDENTIFIER,GetCharField,GetCharField)<SUB>2787</SUB>> ]
+"13721" [label = <(FIELD_IDENTIFIER,GetShortField,GetShortField)<SUB>2788</SUB>> ]
+"13724" [label = <(FIELD_IDENTIFIER,GetIntField,GetIntField)<SUB>2789</SUB>> ]
+"13727" [label = <(FIELD_IDENTIFIER,GetLongField,GetLongField)<SUB>2790</SUB>> ]
+"13730" [label = <(FIELD_IDENTIFIER,GetFloatField,GetFloatField)<SUB>2791</SUB>> ]
+"13733" [label = <(FIELD_IDENTIFIER,GetDoubleField,GetDoubleField)<SUB>2792</SUB>> ]
+"13736" [label = <(FIELD_IDENTIFIER,SetObjectField,SetObjectField)<SUB>2793</SUB>> ]
+"13739" [label = <(FIELD_IDENTIFIER,SetBooleanField,SetBooleanField)<SUB>2794</SUB>> ]
+"13742" [label = <(FIELD_IDENTIFIER,SetByteField,SetByteField)<SUB>2795</SUB>> ]
+"13745" [label = <(FIELD_IDENTIFIER,SetCharField,SetCharField)<SUB>2796</SUB>> ]
+"13748" [label = <(FIELD_IDENTIFIER,SetShortField,SetShortField)<SUB>2797</SUB>> ]
+"13751" [label = <(FIELD_IDENTIFIER,SetIntField,SetIntField)<SUB>2798</SUB>> ]
+"13754" [label = <(FIELD_IDENTIFIER,SetLongField,SetLongField)<SUB>2799</SUB>> ]
+"13757" [label = <(FIELD_IDENTIFIER,SetFloatField,SetFloatField)<SUB>2800</SUB>> ]
+"13760" [label = <(FIELD_IDENTIFIER,SetDoubleField,SetDoubleField)<SUB>2801</SUB>> ]
+"13763" [label = <(FIELD_IDENTIFIER,GetStaticMethodID,GetStaticMethodID)<SUB>2802</SUB>> ]
+"13766" [label = <(FIELD_IDENTIFIER,CallStaticObjectMethod,CallStaticObjectMethod)<SUB>2803</SUB>> ]
+"13769" [label = <(FIELD_IDENTIFIER,CallStaticObjectMethodV,CallStaticObjectMethodV)<SUB>2804</SUB>> ]
+"13772" [label = <(FIELD_IDENTIFIER,CallStaticObjectMethodA,CallStaticObjectMethodA)<SUB>2805</SUB>> ]
+"13775" [label = <(FIELD_IDENTIFIER,CallStaticBooleanMethod,CallStaticBooleanMethod)<SUB>2806</SUB>> ]
+"13778" [label = <(FIELD_IDENTIFIER,CallStaticBooleanMethodV,CallStaticBooleanMethodV)<SUB>2807</SUB>> ]
+"13781" [label = <(FIELD_IDENTIFIER,CallStaticBooleanMethodA,CallStaticBooleanMethodA)<SUB>2808</SUB>> ]
+"13784" [label = <(FIELD_IDENTIFIER,CallStaticByteMethod,CallStaticByteMethod)<SUB>2809</SUB>> ]
+"13787" [label = <(FIELD_IDENTIFIER,CallStaticByteMethodV,CallStaticByteMethodV)<SUB>2810</SUB>> ]
+"13790" [label = <(FIELD_IDENTIFIER,CallStaticByteMethodA,CallStaticByteMethodA)<SUB>2811</SUB>> ]
+"13793" [label = <(FIELD_IDENTIFIER,CallStaticCharMethod,CallStaticCharMethod)<SUB>2812</SUB>> ]
+"13796" [label = <(FIELD_IDENTIFIER,CallStaticCharMethodV,CallStaticCharMethodV)<SUB>2813</SUB>> ]
+"13799" [label = <(FIELD_IDENTIFIER,CallStaticCharMethodA,CallStaticCharMethodA)<SUB>2814</SUB>> ]
+"13802" [label = <(FIELD_IDENTIFIER,CallStaticShortMethod,CallStaticShortMethod)<SUB>2815</SUB>> ]
+"13805" [label = <(FIELD_IDENTIFIER,CallStaticShortMethodV,CallStaticShortMethodV)<SUB>2816</SUB>> ]
+"13808" [label = <(FIELD_IDENTIFIER,CallStaticShortMethodA,CallStaticShortMethodA)<SUB>2817</SUB>> ]
+"13811" [label = <(FIELD_IDENTIFIER,CallStaticIntMethod,CallStaticIntMethod)<SUB>2818</SUB>> ]
+"13814" [label = <(FIELD_IDENTIFIER,CallStaticIntMethodV,CallStaticIntMethodV)<SUB>2819</SUB>> ]
+"13817" [label = <(FIELD_IDENTIFIER,CallStaticIntMethodA,CallStaticIntMethodA)<SUB>2820</SUB>> ]
+"13820" [label = <(FIELD_IDENTIFIER,CallStaticLongMethod,CallStaticLongMethod)<SUB>2821</SUB>> ]
+"13823" [label = <(FIELD_IDENTIFIER,CallStaticLongMethodV,CallStaticLongMethodV)<SUB>2822</SUB>> ]
+"13826" [label = <(FIELD_IDENTIFIER,CallStaticLongMethodA,CallStaticLongMethodA)<SUB>2823</SUB>> ]
+"13829" [label = <(FIELD_IDENTIFIER,CallStaticFloatMethod,CallStaticFloatMethod)<SUB>2824</SUB>> ]
+"13832" [label = <(FIELD_IDENTIFIER,CallStaticFloatMethodV,CallStaticFloatMethodV)<SUB>2825</SUB>> ]
+"13835" [label = <(FIELD_IDENTIFIER,CallStaticFloatMethodA,CallStaticFloatMethodA)<SUB>2826</SUB>> ]
+"13838" [label = <(FIELD_IDENTIFIER,CallStaticDoubleMethod,CallStaticDoubleMethod)<SUB>2827</SUB>> ]
+"13841" [label = <(FIELD_IDENTIFIER,CallStaticDoubleMethodV,CallStaticDoubleMethodV)<SUB>2828</SUB>> ]
+"13844" [label = <(FIELD_IDENTIFIER,CallStaticDoubleMethodA,CallStaticDoubleMethodA)<SUB>2829</SUB>> ]
+"13847" [label = <(FIELD_IDENTIFIER,CallStaticVoidMethod,CallStaticVoidMethod)<SUB>2830</SUB>> ]
+"13850" [label = <(FIELD_IDENTIFIER,CallStaticVoidMethodV,CallStaticVoidMethodV)<SUB>2831</SUB>> ]
+"13853" [label = <(FIELD_IDENTIFIER,CallStaticVoidMethodA,CallStaticVoidMethodA)<SUB>2832</SUB>> ]
+"13856" [label = <(FIELD_IDENTIFIER,GetStaticFieldID,GetStaticFieldID)<SUB>2833</SUB>> ]
+"13859" [label = <(FIELD_IDENTIFIER,GetStaticObjectField,GetStaticObjectField)<SUB>2834</SUB>> ]
+"13862" [label = <(FIELD_IDENTIFIER,GetStaticBooleanField,GetStaticBooleanField)<SUB>2835</SUB>> ]
+"13865" [label = <(FIELD_IDENTIFIER,GetStaticByteField,GetStaticByteField)<SUB>2836</SUB>> ]
+"13868" [label = <(FIELD_IDENTIFIER,GetStaticCharField,GetStaticCharField)<SUB>2837</SUB>> ]
+"13871" [label = <(FIELD_IDENTIFIER,GetStaticShortField,GetStaticShortField)<SUB>2838</SUB>> ]
+"13874" [label = <(FIELD_IDENTIFIER,GetStaticIntField,GetStaticIntField)<SUB>2839</SUB>> ]
+"13877" [label = <(FIELD_IDENTIFIER,GetStaticLongField,GetStaticLongField)<SUB>2840</SUB>> ]
+"13880" [label = <(FIELD_IDENTIFIER,GetStaticFloatField,GetStaticFloatField)<SUB>2841</SUB>> ]
+"13883" [label = <(FIELD_IDENTIFIER,GetStaticDoubleField,GetStaticDoubleField)<SUB>2842</SUB>> ]
+"13886" [label = <(FIELD_IDENTIFIER,SetStaticObjectField,SetStaticObjectField)<SUB>2843</SUB>> ]
+"13889" [label = <(FIELD_IDENTIFIER,SetStaticBooleanField,SetStaticBooleanField)<SUB>2844</SUB>> ]
+"13892" [label = <(FIELD_IDENTIFIER,SetStaticByteField,SetStaticByteField)<SUB>2845</SUB>> ]
+"13895" [label = <(FIELD_IDENTIFIER,SetStaticCharField,SetStaticCharField)<SUB>2846</SUB>> ]
+"13898" [label = <(FIELD_IDENTIFIER,SetStaticShortField,SetStaticShortField)<SUB>2847</SUB>> ]
+"13901" [label = <(FIELD_IDENTIFIER,SetStaticIntField,SetStaticIntField)<SUB>2848</SUB>> ]
+"13904" [label = <(FIELD_IDENTIFIER,SetStaticLongField,SetStaticLongField)<SUB>2849</SUB>> ]
+"13907" [label = <(FIELD_IDENTIFIER,SetStaticFloatField,SetStaticFloatField)<SUB>2850</SUB>> ]
+"13910" [label = <(FIELD_IDENTIFIER,SetStaticDoubleField,SetStaticDoubleField)<SUB>2851</SUB>> ]
+"13913" [label = <(FIELD_IDENTIFIER,NewString,NewString)<SUB>2852</SUB>> ]
+"13916" [label = <(FIELD_IDENTIFIER,GetStringLength,GetStringLength)<SUB>2853</SUB>> ]
+"13919" [label = <(FIELD_IDENTIFIER,GetStringChars,GetStringChars)<SUB>2854</SUB>> ]
+"13922" [label = <(FIELD_IDENTIFIER,ReleaseStringChars,ReleaseStringChars)<SUB>2855</SUB>> ]
+"13925" [label = <(FIELD_IDENTIFIER,NewStringUTF,NewStringUTF)<SUB>2856</SUB>> ]
+"13928" [label = <(FIELD_IDENTIFIER,GetStringUTFLength,GetStringUTFLength)<SUB>2857</SUB>> ]
+"13931" [label = <(FIELD_IDENTIFIER,GetStringUTFChars,GetStringUTFChars)<SUB>2858</SUB>> ]
+"13934" [label = <(FIELD_IDENTIFIER,ReleaseStringUTFChars,ReleaseStringUTFChars)<SUB>2859</SUB>> ]
+"13937" [label = <(FIELD_IDENTIFIER,GetArrayLength,GetArrayLength)<SUB>2860</SUB>> ]
+"13940" [label = <(FIELD_IDENTIFIER,NewObjectArray,NewObjectArray)<SUB>2861</SUB>> ]
+"13943" [label = <(FIELD_IDENTIFIER,GetObjectArrayElement,GetObjectArrayElement)<SUB>2862</SUB>> ]
+"13946" [label = <(FIELD_IDENTIFIER,SetObjectArrayElement,SetObjectArrayElement)<SUB>2863</SUB>> ]
+"13949" [label = <(FIELD_IDENTIFIER,NewBooleanArray,NewBooleanArray)<SUB>2864</SUB>> ]
+"13952" [label = <(FIELD_IDENTIFIER,NewByteArray,NewByteArray)<SUB>2865</SUB>> ]
+"13955" [label = <(FIELD_IDENTIFIER,NewCharArray,NewCharArray)<SUB>2866</SUB>> ]
+"13958" [label = <(FIELD_IDENTIFIER,NewShortArray,NewShortArray)<SUB>2867</SUB>> ]
+"13961" [label = <(FIELD_IDENTIFIER,NewIntArray,NewIntArray)<SUB>2868</SUB>> ]
+"13964" [label = <(FIELD_IDENTIFIER,NewLongArray,NewLongArray)<SUB>2869</SUB>> ]
+"13967" [label = <(FIELD_IDENTIFIER,NewFloatArray,NewFloatArray)<SUB>2870</SUB>> ]
+"13970" [label = <(FIELD_IDENTIFIER,NewDoubleArray,NewDoubleArray)<SUB>2871</SUB>> ]
+"13973" [label = <(FIELD_IDENTIFIER,GetBooleanArrayElements,GetBooleanArrayElements)<SUB>2872</SUB>> ]
+"13976" [label = <(FIELD_IDENTIFIER,GetByteArrayElements,GetByteArrayElements)<SUB>2873</SUB>> ]
+"13979" [label = <(FIELD_IDENTIFIER,GetCharArrayElements,GetCharArrayElements)<SUB>2874</SUB>> ]
+"13982" [label = <(FIELD_IDENTIFIER,GetShortArrayElements,GetShortArrayElements)<SUB>2875</SUB>> ]
+"13985" [label = <(FIELD_IDENTIFIER,GetIntArrayElements,GetIntArrayElements)<SUB>2876</SUB>> ]
+"13988" [label = <(FIELD_IDENTIFIER,GetLongArrayElements,GetLongArrayElements)<SUB>2877</SUB>> ]
+"13991" [label = <(FIELD_IDENTIFIER,GetFloatArrayElements,GetFloatArrayElements)<SUB>2878</SUB>> ]
+"13994" [label = <(FIELD_IDENTIFIER,GetDoubleArrayElements,GetDoubleArrayElements)<SUB>2879</SUB>> ]
+"13997" [label = <(FIELD_IDENTIFIER,ReleaseBooleanArrayElements,ReleaseBooleanArrayElements)<SUB>2880</SUB>> ]
+"14000" [label = <(FIELD_IDENTIFIER,ReleaseByteArrayElements,ReleaseByteArrayElements)<SUB>2881</SUB>> ]
+"14003" [label = <(FIELD_IDENTIFIER,ReleaseCharArrayElements,ReleaseCharArrayElements)<SUB>2882</SUB>> ]
+"14006" [label = <(FIELD_IDENTIFIER,ReleaseShortArrayElements,ReleaseShortArrayElements)<SUB>2883</SUB>> ]
+"14009" [label = <(FIELD_IDENTIFIER,ReleaseIntArrayElements,ReleaseIntArrayElements)<SUB>2884</SUB>> ]
+"14012" [label = <(FIELD_IDENTIFIER,ReleaseLongArrayElements,ReleaseLongArrayElements)<SUB>2885</SUB>> ]
+"14015" [label = <(FIELD_IDENTIFIER,ReleaseFloatArrayElements,ReleaseFloatArrayElements)<SUB>2886</SUB>> ]
+"14018" [label = <(FIELD_IDENTIFIER,ReleaseDoubleArrayElements,ReleaseDoubleArrayElements)<SUB>2887</SUB>> ]
+"14021" [label = <(FIELD_IDENTIFIER,GetBooleanArrayRegion,GetBooleanArrayRegion)<SUB>2888</SUB>> ]
+"14024" [label = <(FIELD_IDENTIFIER,GetByteArrayRegion,GetByteArrayRegion)<SUB>2889</SUB>> ]
+"14027" [label = <(FIELD_IDENTIFIER,GetCharArrayRegion,GetCharArrayRegion)<SUB>2890</SUB>> ]
+"14030" [label = <(FIELD_IDENTIFIER,GetShortArrayRegion,GetShortArrayRegion)<SUB>2891</SUB>> ]
+"14033" [label = <(FIELD_IDENTIFIER,GetIntArrayRegion,GetIntArrayRegion)<SUB>2892</SUB>> ]
+"14036" [label = <(FIELD_IDENTIFIER,GetLongArrayRegion,GetLongArrayRegion)<SUB>2893</SUB>> ]
+"14039" [label = <(FIELD_IDENTIFIER,GetFloatArrayRegion,GetFloatArrayRegion)<SUB>2894</SUB>> ]
+"14042" [label = <(FIELD_IDENTIFIER,GetDoubleArrayRegion,GetDoubleArrayRegion)<SUB>2895</SUB>> ]
+"14045" [label = <(FIELD_IDENTIFIER,SetBooleanArrayRegion,SetBooleanArrayRegion)<SUB>2896</SUB>> ]
+"14048" [label = <(FIELD_IDENTIFIER,SetByteArrayRegion,SetByteArrayRegion)<SUB>2897</SUB>> ]
+"14051" [label = <(FIELD_IDENTIFIER,SetCharArrayRegion,SetCharArrayRegion)<SUB>2898</SUB>> ]
+"14054" [label = <(FIELD_IDENTIFIER,SetShortArrayRegion,SetShortArrayRegion)<SUB>2899</SUB>> ]
+"14057" [label = <(FIELD_IDENTIFIER,SetIntArrayRegion,SetIntArrayRegion)<SUB>2900</SUB>> ]
+"14060" [label = <(FIELD_IDENTIFIER,SetLongArrayRegion,SetLongArrayRegion)<SUB>2901</SUB>> ]
+"14063" [label = <(FIELD_IDENTIFIER,SetFloatArrayRegion,SetFloatArrayRegion)<SUB>2902</SUB>> ]
+"14066" [label = <(FIELD_IDENTIFIER,SetDoubleArrayRegion,SetDoubleArrayRegion)<SUB>2903</SUB>> ]
+"14069" [label = <(FIELD_IDENTIFIER,RegisterNatives,RegisterNatives)<SUB>2904</SUB>> ]
+"14072" [label = <(FIELD_IDENTIFIER,UnregisterNatives,UnregisterNatives)<SUB>2905</SUB>> ]
+"14075" [label = <(FIELD_IDENTIFIER,MonitorEnter,MonitorEnter)<SUB>2906</SUB>> ]
+"14078" [label = <(FIELD_IDENTIFIER,MonitorExit,MonitorExit)<SUB>2907</SUB>> ]
+"14081" [label = <(FIELD_IDENTIFIER,GetJavaVM,GetJavaVM)<SUB>2908</SUB>> ]
+"14084" [label = <(FIELD_IDENTIFIER,GetStringRegion,GetStringRegion)<SUB>2909</SUB>> ]
+"14087" [label = <(FIELD_IDENTIFIER,GetStringUTFRegion,GetStringUTFRegion)<SUB>2910</SUB>> ]
+"14090" [label = <(FIELD_IDENTIFIER,GetPrimitiveArrayCritical,GetPrimitiveArrayCritical)<SUB>2911</SUB>> ]
+"14093" [label = <(FIELD_IDENTIFIER,ReleasePrimitiveArrayCritical,ReleasePrimitiveArrayCritical)<SUB>2912</SUB>> ]
+"14096" [label = <(FIELD_IDENTIFIER,GetStringCritical,GetStringCritical)<SUB>2913</SUB>> ]
+"14099" [label = <(FIELD_IDENTIFIER,ReleaseStringCritical,ReleaseStringCritical)<SUB>2914</SUB>> ]
+"14102" [label = <(FIELD_IDENTIFIER,NewWeakGlobalRef,NewWeakGlobalRef)<SUB>2915</SUB>> ]
+"14105" [label = <(FIELD_IDENTIFIER,DeleteWeakGlobalRef,DeleteWeakGlobalRef)<SUB>2916</SUB>> ]
+"14108" [label = <(FIELD_IDENTIFIER,ExceptionCheck,ExceptionCheck)<SUB>2917</SUB>> ]
+"14111" [label = <(FIELD_IDENTIFIER,NewDirectByteBuffer,NewDirectByteBuffer)<SUB>2918</SUB>> ]
+"14114" [label = <(FIELD_IDENTIFIER,GetDirectBufferAddress,GetDirectBufferAddress)<SUB>2919</SUB>> ]
+"14117" [label = <(FIELD_IDENTIFIER,GetDirectBufferCapacity,GetDirectBufferCapacity)<SUB>2920</SUB>> ]
+"14120" [label = <(FIELD_IDENTIFIER,GetObjectRefType,GetObjectRefType)<SUB>2921</SUB>> ]
+"53" [label = <(Runtime::Current,Runtime::Current())<SUB>105</SUB>> ]
+"57" [label = <(FIELD_IDENTIFIER,GetInstrumentation,GetInstrumentation)<SUB>105</SUB>> ]
+"74" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>132</SUB>> ]
+"226" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetClassLinker)<SUB>252</SUB>> ]
+"255" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>281</SUB>> ]
+"258" [label = <(FIELD_IDENTIFIER,ClassLoader,ClassLoader)<SUB>281</SUB>> ]
+"261" [label = <(Runtime::Current,Runtime::Current())<SUB>281</SUB>> ]
+"265" [label = <(FIELD_IDENTIFIER,GetSystemClassLoader,GetSystemClassLoader)<SUB>281</SUB>> ]
+"290" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>303</SUB>> ]
+"294" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>303</SUB>> ]
+"314" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>309</SUB>> ]
+"13191" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>2612</SUB>> ]
+"13208" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>2614</SUB>> ]
+"54" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>105</SUB>> ]
+"76" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>132</SUB>> ]
+"227" [label = <(Runtime::Current,Runtime::Current())<SUB>252</SUB>> ]
+"231" [label = <(FIELD_IDENTIFIER,GetClassLinker,GetClassLinker)<SUB>252</SUB>> ]
+"262" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>281</SUB>> ]
+"292" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>303</SUB>> ]
+"295" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>303</SUB>> ]
+"298" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>303</SUB>> ]
+"316" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>309</SUB>> ]
+"13193" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>2612</SUB>> ]
+"56" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>105</SUB>> ]
+"228" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>252</SUB>> ]
+"264" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>281</SUB>> ]
+"297" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>303</SUB>> ]
+"300" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>303</SUB>> ]
+"230" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>252</SUB>> ]
+"5" [label = <(METHOD,&lt;global&gt;)<SUB>1</SUB>> ]
+"14427" [label = <(METHOD_RETURN,ANY)<SUB>1</SUB>> ]
+  "66" -> "67" 
+  "67" -> "76" 
+  "69" -> "78" 
+  "78" -> "79" 
+  "79" -> "86" 
+  "86" -> "87" 
+  "87" -> "88" 
+  "88" -> "89" 
+  "89" -> "165" 
+  "165" -> "166" 
+  "166" -> "167" 
+  "167" -> "168" 
+  "168" -> "177" 
+  "177" -> "178" 
+  "178" -> "179" 
+  "179" -> "180" 
+  "180" -> "187" 
+  "187" -> "188" 
+  "188" -> "199" 
+  "195" -> "201" 
+  "201" -> "202" 
+  "202" -> "203" 
+  "203" -> "213" 
+  "213" -> "214" 
+  "214" -> "215" 
+  "215" -> "217" 
+  "217" -> "230" 
+  "221" -> "233" 
+  "233" -> "234" 
+  "234" -> "235" 
+  "235" -> "236" 
+  "236" -> "237" 
+  "237" -> "238" 
+  "238" -> "244" 
+  "244" -> "245" 
+  "245" -> "246" 
+  "246" -> "247" 
+  "247" -> "255" 
+  "249" -> "266" 
+  "266" -> "267" 
+  "267" -> "268" 
+  "268" -> "269" 
+  "269" -> "270" 
+  "270" -> "280" 
+  "280" -> "281" 
+  "281" -> "287" 
+  "283" -> "302" 
+  "302" -> "304" 
+  "304" -> "316" 
+  "309" -> "318" 
+  "318" -> "319" 
+  "319" -> "320" 
+  "320" -> "322" 
+  "322" -> "323" 
+  "323" -> "324" 
+  "324" -> "325" 
+  "325" -> "326" 
+  "326" -> "327" 
+  "327" -> "337" 
+  "337" -> "338" 
+  "338" -> "339" 
+  "339" -> "340" 
+  "340" -> "349" 
+  "349" -> "350" 
+  "350" -> "351" 
+  "351" -> "360" 
+  "360" -> "361" 
+  "361" -> "381" 
+  "381" -> "382" 
+  "382" -> "383" 
+  "383" -> "384" 
+  "384" -> "385" 
+  "385" -> "12949" 
+  "12949" -> "13005" 
+  "13005" -> "13006" 
+  "13006" -> "13007" 
+  "13007" -> "13008" 
+  "13008" -> "13009" 
+  "13009" -> "13010" 
+  "13010" -> "13183" 
+  "13183" -> "13184" 
+  "13184" -> "13193" 
+  "13186" -> "13198" 
+  "13196" -> "13208" 
+  "13202" -> "13210" 
+  "13210" -> "13211" 
+  "13211" -> "13212" 
+  "13212" -> "13425" 
+  "13425" -> "13436" 
+  "13427" -> "14134" 
+  "14132" -> "14377" 
+  "14377" -> "14427" 
+  "34" -> "37" 
+  "37" -> "38" 
+  "38" -> "46" 
+  "46" -> "47" 
+  "47" -> "56" 
+  "49" -> "58" 
+  "58" -> "66" 
+  "71" -> "69" 
+  "196" -> "195" 
+  "223" -> "221" 
+  "251" -> "249" 
+  "284" -> "283" 
+  "311" -> "309" 
+  "13188" -> "13186" 
+  "13198" -> "13196" 
+  "13204" -> "13202" 
+  "13429" -> "13427" 
+  "14134" -> "14132" 
+  "51" -> "49" 
+  "72" -> "71" 
+  "197" -> "196" 
+  "224" -> "223" 
+  "252" -> "264" 
+  "259" -> "251" 
+  "285" -> "292" 
+  "288" -> "284" 
+  "312" -> "311" 
+  "13189" -> "13188" 
+  "13205" -> "13204" 
+  "13434" -> "13439" 
+  "13437" -> "13442" 
+  "13440" -> "13445" 
+  "13443" -> "13448" 
+  "13446" -> "13451" 
+  "13449" -> "13454" 
+  "13452" -> "13457" 
+  "13455" -> "13460" 
+  "13458" -> "13463" 
+  "13461" -> "13466" 
+  "13464" -> "13469" 
+  "13467" -> "13472" 
+  "13470" -> "13475" 
+  "13473" -> "13478" 
+  "13476" -> "13481" 
+  "13479" -> "13484" 
+  "13482" -> "13487" 
+  "13485" -> "13490" 
+  "13488" -> "13493" 
+  "13491" -> "13496" 
+  "13494" -> "13499" 
+  "13497" -> "13502" 
+  "13500" -> "13505" 
+  "13503" -> "13508" 
+  "13506" -> "13511" 
+  "13509" -> "13514" 
+  "13512" -> "13517" 
+  "13515" -> "13520" 
+  "13518" -> "13523" 
+  "13521" -> "13526" 
+  "13524" -> "13529" 
+  "13527" -> "13532" 
+  "13530" -> "13535" 
+  "13533" -> "13538" 
+  "13536" -> "13541" 
+  "13539" -> "13544" 
+  "13542" -> "13547" 
+  "13545" -> "13550" 
+  "13548" -> "13553" 
+  "13551" -> "13556" 
+  "13554" -> "13559" 
+  "13557" -> "13562" 
+  "13560" -> "13565" 
+  "13563" -> "13568" 
+  "13566" -> "13571" 
+  "13569" -> "13574" 
+  "13572" -> "13577" 
+  "13575" -> "13580" 
+  "13578" -> "13583" 
+  "13581" -> "13586" 
+  "13584" -> "13589" 
+  "13587" -> "13592" 
+  "13590" -> "13595" 
+  "13593" -> "13598" 
+  "13596" -> "13601" 
+  "13599" -> "13604" 
+  "13602" -> "13607" 
+  "13605" -> "13610" 
+  "13608" -> "13613" 
+  "13611" -> "13616" 
+  "13614" -> "13619" 
+  "13617" -> "13622" 
+  "13620" -> "13625" 
+  "13623" -> "13628" 
+  "13626" -> "13631" 
+  "13629" -> "13634" 
+  "13632" -> "13637" 
+  "13635" -> "13640" 
+  "13638" -> "13643" 
+  "13641" -> "13646" 
+  "13644" -> "13649" 
+  "13647" -> "13652" 
+  "13650" -> "13655" 
+  "13653" -> "13658" 
+  "13656" -> "13661" 
+  "13659" -> "13664" 
+  "13662" -> "13667" 
+  "13665" -> "13670" 
+  "13668" -> "13673" 
+  "13671" -> "13676" 
+  "13674" -> "13679" 
+  "13677" -> "13682" 
+  "13680" -> "13685" 
+  "13683" -> "13688" 
+  "13686" -> "13691" 
+  "13689" -> "13694" 
+  "13692" -> "13697" 
+  "13695" -> "13700" 
+  "13698" -> "13703" 
+  "13701" -> "13706" 
+  "13704" -> "13709" 
+  "13707" -> "13712" 
+  "13710" -> "13715" 
+  "13713" -> "13718" 
+  "13716" -> "13721" 
+  "13719" -> "13724" 
+  "13722" -> "13727" 
+  "13725" -> "13730" 
+  "13728" -> "13733" 
+  "13731" -> "13736" 
+  "13734" -> "13739" 
+  "13737" -> "13742" 
+  "13740" -> "13745" 
+  "13743" -> "13748" 
+  "13746" -> "13751" 
+  "13749" -> "13754" 
+  "13752" -> "13757" 
+  "13755" -> "13760" 
+  "13758" -> "13763" 
+  "13761" -> "13766" 
+  "13764" -> "13769" 
+  "13767" -> "13772" 
+  "13770" -> "13775" 
+  "13773" -> "13778" 
+  "13776" -> "13781" 
+  "13779" -> "13784" 
+  "13782" -> "13787" 
+  "13785" -> "13790" 
+  "13788" -> "13793" 
+  "13791" -> "13796" 
+  "13794" -> "13799" 
+  "13797" -> "13802" 
+  "13800" -> "13805" 
+  "13803" -> "13808" 
+  "13806" -> "13811" 
+  "13809" -> "13814" 
+  "13812" -> "13817" 
+  "13815" -> "13820" 
+  "13818" -> "13823" 
+  "13821" -> "13826" 
+  "13824" -> "13829" 
+  "13827" -> "13832" 
+  "13830" -> "13835" 
+  "13833" -> "13838" 
+  "13836" -> "13841" 
+  "13839" -> "13844" 
+  "13842" -> "13847" 
+  "13845" -> "13850" 
+  "13848" -> "13853" 
+  "13851" -> "13856" 
+  "13854" -> "13859" 
+  "13857" -> "13862" 
+  "13860" -> "13865" 
+  "13863" -> "13868" 
+  "13866" -> "13871" 
+  "13869" -> "13874" 
+  "13872" -> "13877" 
+  "13875" -> "13880" 
+  "13878" -> "13883" 
+  "13881" -> "13886" 
+  "13884" -> "13889" 
+  "13887" -> "13892" 
+  "13890" -> "13895" 
+  "13893" -> "13898" 
+  "13896" -> "13901" 
+  "13899" -> "13904" 
+  "13902" -> "13907" 
+  "13905" -> "13910" 
+  "13908" -> "13913" 
+  "13911" -> "13916" 
+  "13914" -> "13919" 
+  "13917" -> "13922" 
+  "13920" -> "13925" 
+  "13923" -> "13928" 
+  "13926" -> "13931" 
+  "13929" -> "13934" 
+  "13932" -> "13937" 
+  "13935" -> "13940" 
+  "13938" -> "13943" 
+  "13941" -> "13946" 
+  "13944" -> "13949" 
+  "13947" -> "13952" 
+  "13950" -> "13955" 
+  "13953" -> "13958" 
+  "13956" -> "13961" 
+  "13959" -> "13964" 
+  "13962" -> "13967" 
+  "13965" -> "13970" 
+  "13968" -> "13973" 
+  "13971" -> "13976" 
+  "13974" -> "13979" 
+  "13977" -> "13982" 
+  "13980" -> "13985" 
+  "13983" -> "13988" 
+  "13986" -> "13991" 
+  "13989" -> "13994" 
+  "13992" -> "13997" 
+  "13995" -> "14000" 
+  "13998" -> "14003" 
+  "14001" -> "14006" 
+  "14004" -> "14009" 
+  "14007" -> "14012" 
+  "14010" -> "14015" 
+  "14013" -> "14018" 
+  "14016" -> "14021" 
+  "14019" -> "14024" 
+  "14022" -> "14027" 
+  "14025" -> "14030" 
+  "14028" -> "14033" 
+  "14031" -> "14036" 
+  "14034" -> "14039" 
+  "14037" -> "14042" 
+  "14040" -> "14045" 
+  "14043" -> "14048" 
+  "14046" -> "14051" 
+  "14049" -> "14054" 
+  "14052" -> "14057" 
+  "14055" -> "14060" 
+  "14058" -> "14063" 
+  "14061" -> "14066" 
+  "14064" -> "14069" 
+  "14067" -> "14072" 
+  "14070" -> "14075" 
+  "14073" -> "14078" 
+  "14076" -> "14081" 
+  "14079" -> "14084" 
+  "14082" -> "14087" 
+  "14085" -> "14090" 
+  "14088" -> "14093" 
+  "14091" -> "14096" 
+  "14094" -> "14099" 
+  "14097" -> "14102" 
+  "14100" -> "14105" 
+  "14103" -> "14108" 
+  "14106" -> "14111" 
+  "14109" -> "14114" 
+  "14112" -> "14117" 
+  "14115" -> "14120" 
+  "14118" -> "13429" 
+  "52" -> "51" 
+  "73" -> "77" 
+  "77" -> "72" 
+  "199" -> "197" 
+  "225" -> "232" 
+  "232" -> "224" 
+  "253" -> "258" 
+  "256" -> "252" 
+  "260" -> "259" 
+  "287" -> "285" 
+  "289" -> "297" 
+  "293" -> "288" 
+  "313" -> "317" 
+  "317" -> "312" 
+  "13190" -> "13194" 
+  "13194" -> "13189" 
+  "13206" -> "13205" 
+  "13436" -> "13434" 
+  "13439" -> "13437" 
+  "13442" -> "13440" 
+  "13445" -> "13443" 
+  "13448" -> "13446" 
+  "13451" -> "13449" 
+  "13454" -> "13452" 
+  "13457" -> "13455" 
+  "13460" -> "13458" 
+  "13463" -> "13461" 
+  "13466" -> "13464" 
+  "13469" -> "13467" 
+  "13472" -> "13470" 
+  "13475" -> "13473" 
+  "13478" -> "13476" 
+  "13481" -> "13479" 
+  "13484" -> "13482" 
+  "13487" -> "13485" 
+  "13490" -> "13488" 
+  "13493" -> "13491" 
+  "13496" -> "13494" 
+  "13499" -> "13497" 
+  "13502" -> "13500" 
+  "13505" -> "13503" 
+  "13508" -> "13506" 
+  "13511" -> "13509" 
+  "13514" -> "13512" 
+  "13517" -> "13515" 
+  "13520" -> "13518" 
+  "13523" -> "13521" 
+  "13526" -> "13524" 
+  "13529" -> "13527" 
+  "13532" -> "13530" 
+  "13535" -> "13533" 
+  "13538" -> "13536" 
+  "13541" -> "13539" 
+  "13544" -> "13542" 
+  "13547" -> "13545" 
+  "13550" -> "13548" 
+  "13553" -> "13551" 
+  "13556" -> "13554" 
+  "13559" -> "13557" 
+  "13562" -> "13560" 
+  "13565" -> "13563" 
+  "13568" -> "13566" 
+  "13571" -> "13569" 
+  "13574" -> "13572" 
+  "13577" -> "13575" 
+  "13580" -> "13578" 
+  "13583" -> "13581" 
+  "13586" -> "13584" 
+  "13589" -> "13587" 
+  "13592" -> "13590" 
+  "13595" -> "13593" 
+  "13598" -> "13596" 
+  "13601" -> "13599" 
+  "13604" -> "13602" 
+  "13607" -> "13605" 
+  "13610" -> "13608" 
+  "13613" -> "13611" 
+  "13616" -> "13614" 
+  "13619" -> "13617" 
+  "13622" -> "13620" 
+  "13625" -> "13623" 
+  "13628" -> "13626" 
+  "13631" -> "13629" 
+  "13634" -> "13632" 
+  "13637" -> "13635" 
+  "13640" -> "13638" 
+  "13643" -> "13641" 
+  "13646" -> "13644" 
+  "13649" -> "13647" 
+  "13652" -> "13650" 
+  "13655" -> "13653" 
+  "13658" -> "13656" 
+  "13661" -> "13659" 
+  "13664" -> "13662" 
+  "13667" -> "13665" 
+  "13670" -> "13668" 
+  "13673" -> "13671" 
+  "13676" -> "13674" 
+  "13679" -> "13677" 
+  "13682" -> "13680" 
+  "13685" -> "13683" 
+  "13688" -> "13686" 
+  "13691" -> "13689" 
+  "13694" -> "13692" 
+  "13697" -> "13695" 
+  "13700" -> "13698" 
+  "13703" -> "13701" 
+  "13706" -> "13704" 
+  "13709" -> "13707" 
+  "13712" -> "13710" 
+  "13715" -> "13713" 
+  "13718" -> "13716" 
+  "13721" -> "13719" 
+  "13724" -> "13722" 
+  "13727" -> "13725" 
+  "13730" -> "13728" 
+  "13733" -> "13731" 
+  "13736" -> "13734" 
+  "13739" -> "13737" 
+  "13742" -> "13740" 
+  "13745" -> "13743" 
+  "13748" -> "13746" 
+  "13751" -> "13749" 
+  "13754" -> "13752" 
+  "13757" -> "13755" 
+  "13760" -> "13758" 
+  "13763" -> "13761" 
+  "13766" -> "13764" 
+  "13769" -> "13767" 
+  "13772" -> "13770" 
+  "13775" -> "13773" 
+  "13778" -> "13776" 
+  "13781" -> "13779" 
+  "13784" -> "13782" 
+  "13787" -> "13785" 
+  "13790" -> "13788" 
+  "13793" -> "13791" 
+  "13796" -> "13794" 
+  "13799" -> "13797" 
+  "13802" -> "13800" 
+  "13805" -> "13803" 
+  "13808" -> "13806" 
+  "13811" -> "13809" 
+  "13814" -> "13812" 
+  "13817" -> "13815" 
+  "13820" -> "13818" 
+  "13823" -> "13821" 
+  "13826" -> "13824" 
+  "13829" -> "13827" 
+  "13832" -> "13830" 
+  "13835" -> "13833" 
+  "13838" -> "13836" 
+  "13841" -> "13839" 
+  "13844" -> "13842" 
+  "13847" -> "13845" 
+  "13850" -> "13848" 
+  "13853" -> "13851" 
+  "13856" -> "13854" 
+  "13859" -> "13857" 
+  "13862" -> "13860" 
+  "13865" -> "13863" 
+  "13868" -> "13866" 
+  "13871" -> "13869" 
+  "13874" -> "13872" 
+  "13877" -> "13875" 
+  "13880" -> "13878" 
+  "13883" -> "13881" 
+  "13886" -> "13884" 
+  "13889" -> "13887" 
+  "13892" -> "13890" 
+  "13895" -> "13893" 
+  "13898" -> "13896" 
+  "13901" -> "13899" 
+  "13904" -> "13902" 
+  "13907" -> "13905" 
+  "13910" -> "13908" 
+  "13913" -> "13911" 
+  "13916" -> "13914" 
+  "13919" -> "13917" 
+  "13922" -> "13920" 
+  "13925" -> "13923" 
+  "13928" -> "13926" 
+  "13931" -> "13929" 
+  "13934" -> "13932" 
+  "13937" -> "13935" 
+  "13940" -> "13938" 
+  "13943" -> "13941" 
+  "13946" -> "13944" 
+  "13949" -> "13947" 
+  "13952" -> "13950" 
+  "13955" -> "13953" 
+  "13958" -> "13956" 
+  "13961" -> "13959" 
+  "13964" -> "13962" 
+  "13967" -> "13965" 
+  "13970" -> "13968" 
+  "13973" -> "13971" 
+  "13976" -> "13974" 
+  "13979" -> "13977" 
+  "13982" -> "13980" 
+  "13985" -> "13983" 
+  "13988" -> "13986" 
+  "13991" -> "13989" 
+  "13994" -> "13992" 
+  "13997" -> "13995" 
+  "14000" -> "13998" 
+  "14003" -> "14001" 
+  "14006" -> "14004" 
+  "14009" -> "14007" 
+  "14012" -> "14010" 
+  "14015" -> "14013" 
+  "14018" -> "14016" 
+  "14021" -> "14019" 
+  "14024" -> "14022" 
+  "14027" -> "14025" 
+  "14030" -> "14028" 
+  "14033" -> "14031" 
+  "14036" -> "14034" 
+  "14039" -> "14037" 
+  "14042" -> "14040" 
+  "14045" -> "14043" 
+  "14048" -> "14046" 
+  "14051" -> "14049" 
+  "14054" -> "14052" 
+  "14057" -> "14055" 
+  "14060" -> "14058" 
+  "14063" -> "14061" 
+  "14066" -> "14064" 
+  "14069" -> "14067" 
+  "14072" -> "14070" 
+  "14075" -> "14073" 
+  "14078" -> "14076" 
+  "14081" -> "14079" 
+  "14084" -> "14082" 
+  "14087" -> "14085" 
+  "14090" -> "14088" 
+  "14093" -> "14091" 
+  "14096" -> "14094" 
+  "14099" -> "14097" 
+  "14102" -> "14100" 
+  "14105" -> "14103" 
+  "14108" -> "14106" 
+  "14111" -> "14109" 
+  "14114" -> "14112" 
+  "14117" -> "14115" 
+  "14120" -> "14118" 
+  "53" -> "57" 
+  "57" -> "52" 
+  "74" -> "73" 
+  "226" -> "225" 
+  "255" -> "253" 
+  "258" -> "256" 
+  "261" -> "265" 
+  "265" -> "260" 
+  "290" -> "289" 
+  "294" -> "293" 
+  "314" -> "313" 
+  "13191" -> "13190" 
+  "13208" -> "13206" 
+  "54" -> "53" 
+  "76" -> "74" 
+  "227" -> "231" 
+  "231" -> "226" 
+  "262" -> "261" 
+  "292" -> "290" 
+  "295" -> "300" 
+  "298" -> "294" 
+  "316" -> "314" 
+  "13193" -> "13191" 
+  "56" -> "54" 
+  "228" -> "227" 
+  "264" -> "262" 
+  "297" -> "295" 
+  "300" -> "298" 
+  "230" -> "228" 
+  "5" -> "34" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/1-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/1-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/1-cfg.dot	2023-06-07 19:33:45.147394720 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/1-cfg.dot	2023-06-07 19:33:51.907393995 +0330
@@ -1,5 +1,5 @@
-digraph "anonymous_lambda_9" {  
-"8" [label = <(METHOD,anonymous_lambda_9)<SUB>1899</SUB>> ]
-"12" [label = <(METHOD_RETURN,ANY)<SUB>1899</SUB>> ]
-  "8" -> "12" 
+digraph "ScopedVAArgs" {  
+"9" [label = <(METHOD,ScopedVAArgs)<SUB>67</SUB>> ]
+"12" [label = <(METHOD_RETURN,ANY)<SUB>67</SUB>> ]
+  "9" -> "12" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/10-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/10-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/10-cfg.dot	2023-06-07 19:33:45.337394696 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/10-cfg.dot	2023-06-07 19:33:51.917393996 +0330
@@ -1,5 +1,5 @@
-digraph "NotifySetPrimitiveField" {  
-"253" [label = <(METHOD,NotifySetPrimitiveField)<SUB>208</SUB>> ]
-"258" [label = <(METHOD_RETURN,void)<SUB>208</SUB>> ]
-  "253" -> "258" 
+digraph "ReportInvalidJNINativeMethod" {  
+"169" [label = <(METHOD,ReportInvalidJNINativeMethod)<SUB>216</SUB>> ]
+"175" [label = <(METHOD_RETURN,void)<SUB>216</SUB>> ]
+  "169" -> "175" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/100-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/100-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/100-cfg.dot	2023-06-07 19:33:45.407394690 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/100-cfg.dot	2023-06-07 19:33:51.987393986 +0330
@@ -1,53 +1,61 @@
-digraph "CallNonvirtualCharMethodA" {  
-"5077" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1238</SUB>> ]
-"5095" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1239</SUB>> ]
-"5114" [label = <(soa,soa(env))<SUB>1240</SUB>> ]
-"5116" [label = <(RETURN,return InvokeWithJValues(soa, obj, mid, args).GetC();,return InvokeWithJValues(soa, obj, mid, args).GetC();)<SUB>1241</SUB>> ]
-"5117" [label = <(GetC,InvokeWithJValues(soa, obj, mid, args).GetC())<SUB>1241</SUB>> ]
-"5118" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, obj, mid, args).GetC)<SUB>1241</SUB>> ]
-"5081" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1238</SUB>> ]
-"5099" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1239</SUB>> ]
-"5119" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1241</SUB>> ]
-"5124" [label = <(FIELD_IDENTIFIER,GetC,GetC)<SUB>1241</SUB>> ]
-"5082" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1238</SUB>> ]
-"5086" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1238</SUB>> ]
-"5093" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1238</SUB>> ]
-"5100" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1239</SUB>> ]
-"5104" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1239</SUB>> ]
-"5111" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1239</SUB>> ]
-"5087" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1238</SUB>> ]
-"5105" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1239</SUB>> ]
-"5088" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1238</SUB>> ]
-"5090" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1238</SUB>> ]
-"5106" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1239</SUB>> ]
-"5108" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1239</SUB>> ]
-"5070" [label = <(METHOD,CallNonvirtualCharMethodA)<SUB>1236</SUB>> ]
-"5125" [label = <(METHOD_RETURN,jchar)<SUB>1236</SUB>> ]
-  "5077" -> "5082" 
-  "5077" -> "5095" 
-  "5095" -> "5100" 
-  "5095" -> "5114" 
-  "5114" -> "5119" 
-  "5116" -> "5125" 
-  "5117" -> "5116" 
-  "5118" -> "5117" 
-  "5081" -> "5088" 
-  "5081" -> "5095" 
-  "5099" -> "5106" 
-  "5099" -> "5114" 
-  "5119" -> "5124" 
-  "5124" -> "5118" 
-  "5082" -> "5081" 
-  "5086" -> "5093" 
-  "5093" -> "5125" 
-  "5100" -> "5099" 
-  "5104" -> "5111" 
-  "5111" -> "5125" 
-  "5087" -> "5086" 
-  "5105" -> "5104" 
-  "5088" -> "5090" 
-  "5090" -> "5087" 
-  "5106" -> "5108" 
-  "5108" -> "5105" 
-  "5070" -> "5077" 
+digraph "CallNonvirtualIntMethod" {  
+"5122" [label = <(va_start,va_start(ap, mid))<SUB>1194</SUB>> ]
+"5126" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1195</SUB>> ]
+"5129" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1196</SUB>> ]
+"5147" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1197</SUB>> ]
+"5166" [label = <(soa,soa(env))<SUB>1198</SUB>> ]
+"5169" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, ap)))<SUB>1199</SUB>> ]
+"5175" [label = <(RETURN,return result.GetI();,return result.GetI();)<SUB>1200</SUB>> ]
+"5127" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1195</SUB>> ]
+"5170" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1199</SUB>> ]
+"5176" [label = <(GetI,result.GetI())<SUB>1200</SUB>> ]
+"5177" [label = <(&lt;operator&gt;.fieldAccess,result.GetI)<SUB>1200</SUB>> ]
+"5133" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1196</SUB>> ]
+"5151" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1197</SUB>> ]
+"5179" [label = <(FIELD_IDENTIFIER,GetI,GetI)<SUB>1200</SUB>> ]
+"5134" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1196</SUB>> ]
+"5138" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1196</SUB>> ]
+"5145" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1196</SUB>> ]
+"5152" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1197</SUB>> ]
+"5156" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1197</SUB>> ]
+"5163" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1197</SUB>> ]
+"5139" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1196</SUB>> ]
+"5157" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1197</SUB>> ]
+"5140" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1196</SUB>> ]
+"5142" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1196</SUB>> ]
+"5158" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1197</SUB>> ]
+"5160" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1197</SUB>> ]
+"5115" [label = <(METHOD,CallNonvirtualIntMethod)<SUB>1192</SUB>> ]
+"5180" [label = <(METHOD_RETURN,jint)<SUB>1192</SUB>> ]
+  "5122" -> "5127" 
+  "5126" -> "5129" 
+  "5129" -> "5134" 
+  "5129" -> "5147" 
+  "5147" -> "5152" 
+  "5147" -> "5166" 
+  "5166" -> "5170" 
+  "5169" -> "5179" 
+  "5175" -> "5180" 
+  "5127" -> "5126" 
+  "5170" -> "5169" 
+  "5176" -> "5175" 
+  "5177" -> "5176" 
+  "5133" -> "5140" 
+  "5133" -> "5147" 
+  "5151" -> "5158" 
+  "5151" -> "5166" 
+  "5179" -> "5177" 
+  "5134" -> "5133" 
+  "5138" -> "5145" 
+  "5145" -> "5180" 
+  "5152" -> "5151" 
+  "5156" -> "5163" 
+  "5163" -> "5180" 
+  "5139" -> "5138" 
+  "5157" -> "5156" 
+  "5140" -> "5142" 
+  "5142" -> "5139" 
+  "5158" -> "5160" 
+  "5160" -> "5157" 
+  "5115" -> "5122" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/101-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/101-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/101-cfg.dot	2023-06-07 19:33:45.407394690 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/101-cfg.dot	2023-06-07 19:33:51.987393986 +0330
@@ -1,61 +1,53 @@
-digraph "CallNonvirtualShortMethod" {  
-"5134" [label = <(va_start,va_start(ap, mid))<SUB>1246</SUB>> ]
-"5138" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1247</SUB>> ]
-"5141" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1248</SUB>> ]
-"5159" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1249</SUB>> ]
-"5178" [label = <(soa,soa(env))<SUB>1250</SUB>> ]
-"5181" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, ap)))<SUB>1251</SUB>> ]
-"5187" [label = <(RETURN,return result.GetS();,return result.GetS();)<SUB>1252</SUB>> ]
-"5139" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1247</SUB>> ]
-"5182" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1251</SUB>> ]
-"5188" [label = <(GetS,result.GetS())<SUB>1252</SUB>> ]
-"5189" [label = <(&lt;operator&gt;.fieldAccess,result.GetS)<SUB>1252</SUB>> ]
-"5145" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1248</SUB>> ]
-"5163" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1249</SUB>> ]
-"5191" [label = <(FIELD_IDENTIFIER,GetS,GetS)<SUB>1252</SUB>> ]
-"5146" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1248</SUB>> ]
-"5150" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1248</SUB>> ]
-"5157" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1248</SUB>> ]
-"5164" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1249</SUB>> ]
-"5168" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1249</SUB>> ]
-"5175" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1249</SUB>> ]
-"5151" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1248</SUB>> ]
-"5169" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1249</SUB>> ]
-"5152" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1248</SUB>> ]
-"5154" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1248</SUB>> ]
-"5170" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1249</SUB>> ]
-"5172" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1249</SUB>> ]
-"5127" [label = <(METHOD,CallNonvirtualShortMethod)<SUB>1244</SUB>> ]
-"5192" [label = <(METHOD_RETURN,jshort)<SUB>1244</SUB>> ]
-  "5134" -> "5139" 
-  "5138" -> "5141" 
-  "5141" -> "5146" 
-  "5141" -> "5159" 
-  "5159" -> "5164" 
-  "5159" -> "5178" 
-  "5178" -> "5182" 
-  "5181" -> "5191" 
-  "5187" -> "5192" 
-  "5139" -> "5138" 
-  "5182" -> "5181" 
-  "5188" -> "5187" 
-  "5189" -> "5188" 
-  "5145" -> "5152" 
-  "5145" -> "5159" 
-  "5163" -> "5170" 
-  "5163" -> "5178" 
-  "5191" -> "5189" 
-  "5146" -> "5145" 
-  "5150" -> "5157" 
-  "5157" -> "5192" 
-  "5164" -> "5163" 
-  "5168" -> "5175" 
-  "5175" -> "5192" 
-  "5151" -> "5150" 
-  "5169" -> "5168" 
-  "5152" -> "5154" 
-  "5154" -> "5151" 
-  "5170" -> "5172" 
-  "5172" -> "5169" 
-  "5127" -> "5134" 
+digraph "CallNonvirtualIntMethodV" {  
+"5189" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1205</SUB>> ]
+"5207" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1206</SUB>> ]
+"5226" [label = <(soa,soa(env))<SUB>1207</SUB>> ]
+"5228" [label = <(RETURN,return InvokeWithVarArgs(soa, obj, mid, args).GetI();,return InvokeWithVarArgs(soa, obj, mid, args).GetI();)<SUB>1208</SUB>> ]
+"5229" [label = <(GetI,InvokeWithVarArgs(soa, obj, mid, args).GetI())<SUB>1208</SUB>> ]
+"5230" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, obj, mid, args).GetI)<SUB>1208</SUB>> ]
+"5193" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1205</SUB>> ]
+"5211" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1206</SUB>> ]
+"5231" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1208</SUB>> ]
+"5236" [label = <(FIELD_IDENTIFIER,GetI,GetI)<SUB>1208</SUB>> ]
+"5194" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1205</SUB>> ]
+"5198" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1205</SUB>> ]
+"5205" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1205</SUB>> ]
+"5212" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1206</SUB>> ]
+"5216" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1206</SUB>> ]
+"5223" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1206</SUB>> ]
+"5199" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1205</SUB>> ]
+"5217" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1206</SUB>> ]
+"5200" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1205</SUB>> ]
+"5202" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1205</SUB>> ]
+"5218" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1206</SUB>> ]
+"5220" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1206</SUB>> ]
+"5182" [label = <(METHOD,CallNonvirtualIntMethodV)<SUB>1203</SUB>> ]
+"5237" [label = <(METHOD_RETURN,jint)<SUB>1203</SUB>> ]
+  "5189" -> "5194" 
+  "5189" -> "5207" 
+  "5207" -> "5212" 
+  "5207" -> "5226" 
+  "5226" -> "5231" 
+  "5228" -> "5237" 
+  "5229" -> "5228" 
+  "5230" -> "5229" 
+  "5193" -> "5200" 
+  "5193" -> "5207" 
+  "5211" -> "5218" 
+  "5211" -> "5226" 
+  "5231" -> "5236" 
+  "5236" -> "5230" 
+  "5194" -> "5193" 
+  "5198" -> "5205" 
+  "5205" -> "5237" 
+  "5212" -> "5211" 
+  "5216" -> "5223" 
+  "5223" -> "5237" 
+  "5199" -> "5198" 
+  "5217" -> "5216" 
+  "5200" -> "5202" 
+  "5202" -> "5199" 
+  "5218" -> "5220" 
+  "5220" -> "5217" 
+  "5182" -> "5189" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/102-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/102-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/102-cfg.dot	2023-06-07 19:33:45.407394690 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/102-cfg.dot	2023-06-07 19:33:51.987393986 +0330
@@ -1,53 +1,53 @@
-digraph "CallNonvirtualShortMethodV" {  
-"5201" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1257</SUB>> ]
-"5219" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1258</SUB>> ]
-"5238" [label = <(soa,soa(env))<SUB>1259</SUB>> ]
-"5240" [label = <(RETURN,return InvokeWithVarArgs(soa, obj, mid, args).GetS();,return InvokeWithVarArgs(soa, obj, mid, args).GetS();)<SUB>1260</SUB>> ]
-"5241" [label = <(GetS,InvokeWithVarArgs(soa, obj, mid, args).GetS())<SUB>1260</SUB>> ]
-"5242" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, obj, mid, args).GetS)<SUB>1260</SUB>> ]
-"5205" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1257</SUB>> ]
-"5223" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1258</SUB>> ]
-"5243" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1260</SUB>> ]
-"5248" [label = <(FIELD_IDENTIFIER,GetS,GetS)<SUB>1260</SUB>> ]
-"5206" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1257</SUB>> ]
-"5210" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1257</SUB>> ]
-"5217" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1257</SUB>> ]
-"5224" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1258</SUB>> ]
-"5228" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1258</SUB>> ]
-"5235" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1258</SUB>> ]
-"5211" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1257</SUB>> ]
-"5229" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1258</SUB>> ]
-"5212" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1257</SUB>> ]
-"5214" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1257</SUB>> ]
-"5230" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1258</SUB>> ]
-"5232" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1258</SUB>> ]
-"5194" [label = <(METHOD,CallNonvirtualShortMethodV)<SUB>1255</SUB>> ]
-"5249" [label = <(METHOD_RETURN,jshort)<SUB>1255</SUB>> ]
-  "5201" -> "5206" 
-  "5201" -> "5219" 
-  "5219" -> "5224" 
-  "5219" -> "5238" 
-  "5238" -> "5243" 
-  "5240" -> "5249" 
-  "5241" -> "5240" 
-  "5242" -> "5241" 
-  "5205" -> "5212" 
-  "5205" -> "5219" 
-  "5223" -> "5230" 
-  "5223" -> "5238" 
-  "5243" -> "5248" 
-  "5248" -> "5242" 
-  "5206" -> "5205" 
-  "5210" -> "5217" 
-  "5217" -> "5249" 
-  "5224" -> "5223" 
-  "5228" -> "5235" 
-  "5235" -> "5249" 
-  "5211" -> "5210" 
-  "5229" -> "5228" 
-  "5212" -> "5214" 
-  "5214" -> "5211" 
-  "5230" -> "5232" 
-  "5232" -> "5229" 
-  "5194" -> "5201" 
+digraph "CallNonvirtualIntMethodA" {  
+"5246" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1213</SUB>> ]
+"5264" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1214</SUB>> ]
+"5283" [label = <(soa,soa(env))<SUB>1215</SUB>> ]
+"5285" [label = <(RETURN,return InvokeWithJValues(soa, obj, mid, args).GetI();,return InvokeWithJValues(soa, obj, mid, args).GetI();)<SUB>1216</SUB>> ]
+"5286" [label = <(GetI,InvokeWithJValues(soa, obj, mid, args).GetI())<SUB>1216</SUB>> ]
+"5287" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, obj, mid, args).GetI)<SUB>1216</SUB>> ]
+"5250" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1213</SUB>> ]
+"5268" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1214</SUB>> ]
+"5288" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1216</SUB>> ]
+"5293" [label = <(FIELD_IDENTIFIER,GetI,GetI)<SUB>1216</SUB>> ]
+"5251" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1213</SUB>> ]
+"5255" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1213</SUB>> ]
+"5262" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1213</SUB>> ]
+"5269" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1214</SUB>> ]
+"5273" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1214</SUB>> ]
+"5280" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1214</SUB>> ]
+"5256" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1213</SUB>> ]
+"5274" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1214</SUB>> ]
+"5257" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1213</SUB>> ]
+"5259" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1213</SUB>> ]
+"5275" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1214</SUB>> ]
+"5277" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1214</SUB>> ]
+"5239" [label = <(METHOD,CallNonvirtualIntMethodA)<SUB>1211</SUB>> ]
+"5294" [label = <(METHOD_RETURN,jint)<SUB>1211</SUB>> ]
+  "5246" -> "5251" 
+  "5246" -> "5264" 
+  "5264" -> "5269" 
+  "5264" -> "5283" 
+  "5283" -> "5288" 
+  "5285" -> "5294" 
+  "5286" -> "5285" 
+  "5287" -> "5286" 
+  "5250" -> "5257" 
+  "5250" -> "5264" 
+  "5268" -> "5275" 
+  "5268" -> "5283" 
+  "5288" -> "5293" 
+  "5293" -> "5287" 
+  "5251" -> "5250" 
+  "5255" -> "5262" 
+  "5262" -> "5294" 
+  "5269" -> "5268" 
+  "5273" -> "5280" 
+  "5280" -> "5294" 
+  "5256" -> "5255" 
+  "5274" -> "5273" 
+  "5257" -> "5259" 
+  "5259" -> "5256" 
+  "5275" -> "5277" 
+  "5277" -> "5274" 
+  "5239" -> "5246" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/103-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/103-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/103-cfg.dot	2023-06-07 19:33:45.407394690 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/103-cfg.dot	2023-06-07 19:33:51.987393986 +0330
@@ -1,53 +1,61 @@
-digraph "CallNonvirtualShortMethodA" {  
-"5258" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1265</SUB>> ]
-"5276" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1266</SUB>> ]
-"5295" [label = <(soa,soa(env))<SUB>1267</SUB>> ]
-"5297" [label = <(RETURN,return InvokeWithJValues(soa, obj, mid, args).GetS();,return InvokeWithJValues(soa, obj, mid, args).GetS();)<SUB>1268</SUB>> ]
-"5298" [label = <(GetS,InvokeWithJValues(soa, obj, mid, args).GetS())<SUB>1268</SUB>> ]
-"5299" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, obj, mid, args).GetS)<SUB>1268</SUB>> ]
-"5262" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1265</SUB>> ]
-"5280" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1266</SUB>> ]
-"5300" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1268</SUB>> ]
-"5305" [label = <(FIELD_IDENTIFIER,GetS,GetS)<SUB>1268</SUB>> ]
-"5263" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1265</SUB>> ]
-"5267" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1265</SUB>> ]
-"5274" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1265</SUB>> ]
-"5281" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1266</SUB>> ]
-"5285" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1266</SUB>> ]
-"5292" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1266</SUB>> ]
-"5268" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1265</SUB>> ]
-"5286" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1266</SUB>> ]
-"5269" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1265</SUB>> ]
-"5271" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1265</SUB>> ]
-"5287" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1266</SUB>> ]
-"5289" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1266</SUB>> ]
-"5251" [label = <(METHOD,CallNonvirtualShortMethodA)<SUB>1263</SUB>> ]
-"5306" [label = <(METHOD_RETURN,jshort)<SUB>1263</SUB>> ]
-  "5258" -> "5263" 
-  "5258" -> "5276" 
-  "5276" -> "5281" 
-  "5276" -> "5295" 
-  "5295" -> "5300" 
-  "5297" -> "5306" 
-  "5298" -> "5297" 
-  "5299" -> "5298" 
-  "5262" -> "5269" 
-  "5262" -> "5276" 
-  "5280" -> "5287" 
-  "5280" -> "5295" 
-  "5300" -> "5305" 
-  "5305" -> "5299" 
-  "5263" -> "5262" 
-  "5267" -> "5274" 
-  "5274" -> "5306" 
-  "5281" -> "5280" 
-  "5285" -> "5292" 
-  "5292" -> "5306" 
-  "5268" -> "5267" 
-  "5286" -> "5285" 
-  "5269" -> "5271" 
-  "5271" -> "5268" 
-  "5287" -> "5289" 
-  "5289" -> "5286" 
-  "5251" -> "5258" 
+digraph "CallNonvirtualLongMethod" {  
+"5303" [label = <(va_start,va_start(ap, mid))<SUB>1221</SUB>> ]
+"5307" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1222</SUB>> ]
+"5310" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1223</SUB>> ]
+"5328" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1224</SUB>> ]
+"5347" [label = <(soa,soa(env))<SUB>1225</SUB>> ]
+"5350" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, ap)))<SUB>1226</SUB>> ]
+"5356" [label = <(RETURN,return result.GetJ();,return result.GetJ();)<SUB>1227</SUB>> ]
+"5308" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1222</SUB>> ]
+"5351" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1226</SUB>> ]
+"5357" [label = <(GetJ,result.GetJ())<SUB>1227</SUB>> ]
+"5358" [label = <(&lt;operator&gt;.fieldAccess,result.GetJ)<SUB>1227</SUB>> ]
+"5314" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1223</SUB>> ]
+"5332" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1224</SUB>> ]
+"5360" [label = <(FIELD_IDENTIFIER,GetJ,GetJ)<SUB>1227</SUB>> ]
+"5315" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1223</SUB>> ]
+"5319" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1223</SUB>> ]
+"5326" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1223</SUB>> ]
+"5333" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1224</SUB>> ]
+"5337" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1224</SUB>> ]
+"5344" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1224</SUB>> ]
+"5320" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1223</SUB>> ]
+"5338" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1224</SUB>> ]
+"5321" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1223</SUB>> ]
+"5323" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1223</SUB>> ]
+"5339" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1224</SUB>> ]
+"5341" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1224</SUB>> ]
+"5296" [label = <(METHOD,CallNonvirtualLongMethod)<SUB>1219</SUB>> ]
+"5361" [label = <(METHOD_RETURN,jlong)<SUB>1219</SUB>> ]
+  "5303" -> "5308" 
+  "5307" -> "5310" 
+  "5310" -> "5315" 
+  "5310" -> "5328" 
+  "5328" -> "5333" 
+  "5328" -> "5347" 
+  "5347" -> "5351" 
+  "5350" -> "5360" 
+  "5356" -> "5361" 
+  "5308" -> "5307" 
+  "5351" -> "5350" 
+  "5357" -> "5356" 
+  "5358" -> "5357" 
+  "5314" -> "5321" 
+  "5314" -> "5328" 
+  "5332" -> "5339" 
+  "5332" -> "5347" 
+  "5360" -> "5358" 
+  "5315" -> "5314" 
+  "5319" -> "5326" 
+  "5326" -> "5361" 
+  "5333" -> "5332" 
+  "5337" -> "5344" 
+  "5344" -> "5361" 
+  "5320" -> "5319" 
+  "5338" -> "5337" 
+  "5321" -> "5323" 
+  "5323" -> "5320" 
+  "5339" -> "5341" 
+  "5341" -> "5338" 
+  "5296" -> "5303" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/104-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/104-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/104-cfg.dot	2023-06-07 19:33:45.407394690 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/104-cfg.dot	2023-06-07 19:33:51.987393986 +0330
@@ -1,61 +1,53 @@
-digraph "CallNonvirtualIntMethod" {  
-"5315" [label = <(va_start,va_start(ap, mid))<SUB>1273</SUB>> ]
-"5319" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1274</SUB>> ]
-"5322" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1275</SUB>> ]
-"5340" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1276</SUB>> ]
-"5359" [label = <(soa,soa(env))<SUB>1277</SUB>> ]
-"5362" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, ap)))<SUB>1278</SUB>> ]
-"5368" [label = <(RETURN,return result.GetI();,return result.GetI();)<SUB>1279</SUB>> ]
-"5320" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1274</SUB>> ]
-"5363" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1278</SUB>> ]
-"5369" [label = <(GetI,result.GetI())<SUB>1279</SUB>> ]
-"5370" [label = <(&lt;operator&gt;.fieldAccess,result.GetI)<SUB>1279</SUB>> ]
-"5326" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1275</SUB>> ]
-"5344" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1276</SUB>> ]
-"5372" [label = <(FIELD_IDENTIFIER,GetI,GetI)<SUB>1279</SUB>> ]
-"5327" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1275</SUB>> ]
-"5331" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1275</SUB>> ]
-"5338" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1275</SUB>> ]
-"5345" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1276</SUB>> ]
-"5349" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1276</SUB>> ]
-"5356" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1276</SUB>> ]
-"5332" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1275</SUB>> ]
-"5350" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1276</SUB>> ]
-"5333" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1275</SUB>> ]
-"5335" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1275</SUB>> ]
-"5351" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1276</SUB>> ]
-"5353" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1276</SUB>> ]
-"5308" [label = <(METHOD,CallNonvirtualIntMethod)<SUB>1271</SUB>> ]
-"5373" [label = <(METHOD_RETURN,jint)<SUB>1271</SUB>> ]
-  "5315" -> "5320" 
-  "5319" -> "5322" 
-  "5322" -> "5327" 
-  "5322" -> "5340" 
-  "5340" -> "5345" 
-  "5340" -> "5359" 
-  "5359" -> "5363" 
-  "5362" -> "5372" 
-  "5368" -> "5373" 
-  "5320" -> "5319" 
-  "5363" -> "5362" 
-  "5369" -> "5368" 
-  "5370" -> "5369" 
-  "5326" -> "5333" 
-  "5326" -> "5340" 
-  "5344" -> "5351" 
-  "5344" -> "5359" 
-  "5372" -> "5370" 
-  "5327" -> "5326" 
-  "5331" -> "5338" 
-  "5338" -> "5373" 
-  "5345" -> "5344" 
-  "5349" -> "5356" 
-  "5356" -> "5373" 
-  "5332" -> "5331" 
-  "5350" -> "5349" 
-  "5333" -> "5335" 
-  "5335" -> "5332" 
-  "5351" -> "5353" 
-  "5353" -> "5350" 
-  "5308" -> "5315" 
+digraph "CallNonvirtualLongMethodV" {  
+"5370" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1232</SUB>> ]
+"5388" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1233</SUB>> ]
+"5407" [label = <(soa,soa(env))<SUB>1234</SUB>> ]
+"5409" [label = <(RETURN,return InvokeWithVarArgs(soa, obj, mid, args).GetJ();,return InvokeWithVarArgs(soa, obj, mid, args).GetJ();)<SUB>1235</SUB>> ]
+"5410" [label = <(GetJ,InvokeWithVarArgs(soa, obj, mid, args).GetJ())<SUB>1235</SUB>> ]
+"5411" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, obj, mid, args).GetJ)<SUB>1235</SUB>> ]
+"5374" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1232</SUB>> ]
+"5392" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1233</SUB>> ]
+"5412" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1235</SUB>> ]
+"5417" [label = <(FIELD_IDENTIFIER,GetJ,GetJ)<SUB>1235</SUB>> ]
+"5375" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1232</SUB>> ]
+"5379" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1232</SUB>> ]
+"5386" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1232</SUB>> ]
+"5393" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1233</SUB>> ]
+"5397" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1233</SUB>> ]
+"5404" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1233</SUB>> ]
+"5380" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1232</SUB>> ]
+"5398" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1233</SUB>> ]
+"5381" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1232</SUB>> ]
+"5383" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1232</SUB>> ]
+"5399" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1233</SUB>> ]
+"5401" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1233</SUB>> ]
+"5363" [label = <(METHOD,CallNonvirtualLongMethodV)<SUB>1230</SUB>> ]
+"5418" [label = <(METHOD_RETURN,jlong)<SUB>1230</SUB>> ]
+  "5370" -> "5375" 
+  "5370" -> "5388" 
+  "5388" -> "5393" 
+  "5388" -> "5407" 
+  "5407" -> "5412" 
+  "5409" -> "5418" 
+  "5410" -> "5409" 
+  "5411" -> "5410" 
+  "5374" -> "5381" 
+  "5374" -> "5388" 
+  "5392" -> "5399" 
+  "5392" -> "5407" 
+  "5412" -> "5417" 
+  "5417" -> "5411" 
+  "5375" -> "5374" 
+  "5379" -> "5386" 
+  "5386" -> "5418" 
+  "5393" -> "5392" 
+  "5397" -> "5404" 
+  "5404" -> "5418" 
+  "5380" -> "5379" 
+  "5398" -> "5397" 
+  "5381" -> "5383" 
+  "5383" -> "5380" 
+  "5399" -> "5401" 
+  "5401" -> "5398" 
+  "5363" -> "5370" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/105-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/105-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/105-cfg.dot	2023-06-07 19:33:45.407394690 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/105-cfg.dot	2023-06-07 19:33:51.987393986 +0330
@@ -1,53 +1,53 @@
-digraph "CallNonvirtualIntMethodV" {  
-"5382" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1284</SUB>> ]
-"5400" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1285</SUB>> ]
-"5419" [label = <(soa,soa(env))<SUB>1286</SUB>> ]
-"5421" [label = <(RETURN,return InvokeWithVarArgs(soa, obj, mid, args).GetI();,return InvokeWithVarArgs(soa, obj, mid, args).GetI();)<SUB>1287</SUB>> ]
-"5422" [label = <(GetI,InvokeWithVarArgs(soa, obj, mid, args).GetI())<SUB>1287</SUB>> ]
-"5423" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, obj, mid, args).GetI)<SUB>1287</SUB>> ]
-"5386" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1284</SUB>> ]
-"5404" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1285</SUB>> ]
-"5424" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1287</SUB>> ]
-"5429" [label = <(FIELD_IDENTIFIER,GetI,GetI)<SUB>1287</SUB>> ]
-"5387" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1284</SUB>> ]
-"5391" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1284</SUB>> ]
-"5398" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1284</SUB>> ]
-"5405" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1285</SUB>> ]
-"5409" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1285</SUB>> ]
-"5416" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1285</SUB>> ]
-"5392" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1284</SUB>> ]
-"5410" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1285</SUB>> ]
-"5393" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1284</SUB>> ]
-"5395" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1284</SUB>> ]
-"5411" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1285</SUB>> ]
-"5413" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1285</SUB>> ]
-"5375" [label = <(METHOD,CallNonvirtualIntMethodV)<SUB>1282</SUB>> ]
-"5430" [label = <(METHOD_RETURN,jint)<SUB>1282</SUB>> ]
-  "5382" -> "5387" 
-  "5382" -> "5400" 
-  "5400" -> "5405" 
-  "5400" -> "5419" 
-  "5419" -> "5424" 
-  "5421" -> "5430" 
-  "5422" -> "5421" 
-  "5423" -> "5422" 
-  "5386" -> "5393" 
-  "5386" -> "5400" 
-  "5404" -> "5411" 
-  "5404" -> "5419" 
-  "5424" -> "5429" 
-  "5429" -> "5423" 
-  "5387" -> "5386" 
-  "5391" -> "5398" 
-  "5398" -> "5430" 
-  "5405" -> "5404" 
-  "5409" -> "5416" 
-  "5416" -> "5430" 
-  "5392" -> "5391" 
-  "5410" -> "5409" 
-  "5393" -> "5395" 
-  "5395" -> "5392" 
-  "5411" -> "5413" 
-  "5413" -> "5410" 
-  "5375" -> "5382" 
+digraph "CallNonvirtualLongMethodA" {  
+"5427" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1240</SUB>> ]
+"5445" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1241</SUB>> ]
+"5464" [label = <(soa,soa(env))<SUB>1242</SUB>> ]
+"5466" [label = <(RETURN,return InvokeWithJValues(soa, obj, mid, args).GetJ();,return InvokeWithJValues(soa, obj, mid, args).GetJ();)<SUB>1243</SUB>> ]
+"5467" [label = <(GetJ,InvokeWithJValues(soa, obj, mid, args).GetJ())<SUB>1243</SUB>> ]
+"5468" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, obj, mid, args).GetJ)<SUB>1243</SUB>> ]
+"5431" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1240</SUB>> ]
+"5449" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1241</SUB>> ]
+"5469" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1243</SUB>> ]
+"5474" [label = <(FIELD_IDENTIFIER,GetJ,GetJ)<SUB>1243</SUB>> ]
+"5432" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1240</SUB>> ]
+"5436" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1240</SUB>> ]
+"5443" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1240</SUB>> ]
+"5450" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1241</SUB>> ]
+"5454" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1241</SUB>> ]
+"5461" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1241</SUB>> ]
+"5437" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1240</SUB>> ]
+"5455" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1241</SUB>> ]
+"5438" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1240</SUB>> ]
+"5440" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1240</SUB>> ]
+"5456" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1241</SUB>> ]
+"5458" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1241</SUB>> ]
+"5420" [label = <(METHOD,CallNonvirtualLongMethodA)<SUB>1238</SUB>> ]
+"5475" [label = <(METHOD_RETURN,jlong)<SUB>1238</SUB>> ]
+  "5427" -> "5432" 
+  "5427" -> "5445" 
+  "5445" -> "5450" 
+  "5445" -> "5464" 
+  "5464" -> "5469" 
+  "5466" -> "5475" 
+  "5467" -> "5466" 
+  "5468" -> "5467" 
+  "5431" -> "5438" 
+  "5431" -> "5445" 
+  "5449" -> "5456" 
+  "5449" -> "5464" 
+  "5469" -> "5474" 
+  "5474" -> "5468" 
+  "5432" -> "5431" 
+  "5436" -> "5443" 
+  "5443" -> "5475" 
+  "5450" -> "5449" 
+  "5454" -> "5461" 
+  "5461" -> "5475" 
+  "5437" -> "5436" 
+  "5455" -> "5454" 
+  "5438" -> "5440" 
+  "5440" -> "5437" 
+  "5456" -> "5458" 
+  "5458" -> "5455" 
+  "5420" -> "5427" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/106-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/106-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/106-cfg.dot	2023-06-07 19:33:45.407394690 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/106-cfg.dot	2023-06-07 19:33:51.987393986 +0330
@@ -1,53 +1,61 @@
-digraph "CallNonvirtualIntMethodA" {  
-"5439" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1292</SUB>> ]
-"5457" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1293</SUB>> ]
-"5476" [label = <(soa,soa(env))<SUB>1294</SUB>> ]
-"5478" [label = <(RETURN,return InvokeWithJValues(soa, obj, mid, args).GetI();,return InvokeWithJValues(soa, obj, mid, args).GetI();)<SUB>1295</SUB>> ]
-"5479" [label = <(GetI,InvokeWithJValues(soa, obj, mid, args).GetI())<SUB>1295</SUB>> ]
-"5480" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, obj, mid, args).GetI)<SUB>1295</SUB>> ]
-"5443" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1292</SUB>> ]
-"5461" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1293</SUB>> ]
-"5481" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1295</SUB>> ]
-"5486" [label = <(FIELD_IDENTIFIER,GetI,GetI)<SUB>1295</SUB>> ]
-"5444" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1292</SUB>> ]
-"5448" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1292</SUB>> ]
-"5455" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1292</SUB>> ]
-"5462" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1293</SUB>> ]
-"5466" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1293</SUB>> ]
-"5473" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1293</SUB>> ]
-"5449" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1292</SUB>> ]
-"5467" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1293</SUB>> ]
-"5450" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1292</SUB>> ]
-"5452" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1292</SUB>> ]
-"5468" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1293</SUB>> ]
-"5470" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1293</SUB>> ]
-"5432" [label = <(METHOD,CallNonvirtualIntMethodA)<SUB>1290</SUB>> ]
-"5487" [label = <(METHOD_RETURN,jint)<SUB>1290</SUB>> ]
-  "5439" -> "5444" 
-  "5439" -> "5457" 
-  "5457" -> "5462" 
-  "5457" -> "5476" 
-  "5476" -> "5481" 
-  "5478" -> "5487" 
-  "5479" -> "5478" 
-  "5480" -> "5479" 
-  "5443" -> "5450" 
-  "5443" -> "5457" 
-  "5461" -> "5468" 
-  "5461" -> "5476" 
-  "5481" -> "5486" 
-  "5486" -> "5480" 
-  "5444" -> "5443" 
-  "5448" -> "5455" 
-  "5455" -> "5487" 
-  "5462" -> "5461" 
-  "5466" -> "5473" 
-  "5473" -> "5487" 
-  "5449" -> "5448" 
-  "5467" -> "5466" 
-  "5450" -> "5452" 
-  "5452" -> "5449" 
-  "5468" -> "5470" 
-  "5470" -> "5467" 
-  "5432" -> "5439" 
+digraph "CallNonvirtualFloatMethod" {  
+"5484" [label = <(va_start,va_start(ap, mid))<SUB>1248</SUB>> ]
+"5488" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1249</SUB>> ]
+"5491" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1250</SUB>> ]
+"5509" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1251</SUB>> ]
+"5528" [label = <(soa,soa(env))<SUB>1252</SUB>> ]
+"5531" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, ap)))<SUB>1253</SUB>> ]
+"5537" [label = <(RETURN,return result.GetF();,return result.GetF();)<SUB>1254</SUB>> ]
+"5489" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1249</SUB>> ]
+"5532" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1253</SUB>> ]
+"5538" [label = <(GetF,result.GetF())<SUB>1254</SUB>> ]
+"5539" [label = <(&lt;operator&gt;.fieldAccess,result.GetF)<SUB>1254</SUB>> ]
+"5495" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1250</SUB>> ]
+"5513" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1251</SUB>> ]
+"5541" [label = <(FIELD_IDENTIFIER,GetF,GetF)<SUB>1254</SUB>> ]
+"5496" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1250</SUB>> ]
+"5500" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1250</SUB>> ]
+"5507" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1250</SUB>> ]
+"5514" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1251</SUB>> ]
+"5518" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1251</SUB>> ]
+"5525" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1251</SUB>> ]
+"5501" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1250</SUB>> ]
+"5519" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1251</SUB>> ]
+"5502" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1250</SUB>> ]
+"5504" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1250</SUB>> ]
+"5520" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1251</SUB>> ]
+"5522" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1251</SUB>> ]
+"5477" [label = <(METHOD,CallNonvirtualFloatMethod)<SUB>1246</SUB>> ]
+"5542" [label = <(METHOD_RETURN,jfloat)<SUB>1246</SUB>> ]
+  "5484" -> "5489" 
+  "5488" -> "5491" 
+  "5491" -> "5496" 
+  "5491" -> "5509" 
+  "5509" -> "5514" 
+  "5509" -> "5528" 
+  "5528" -> "5532" 
+  "5531" -> "5541" 
+  "5537" -> "5542" 
+  "5489" -> "5488" 
+  "5532" -> "5531" 
+  "5538" -> "5537" 
+  "5539" -> "5538" 
+  "5495" -> "5502" 
+  "5495" -> "5509" 
+  "5513" -> "5520" 
+  "5513" -> "5528" 
+  "5541" -> "5539" 
+  "5496" -> "5495" 
+  "5500" -> "5507" 
+  "5507" -> "5542" 
+  "5514" -> "5513" 
+  "5518" -> "5525" 
+  "5525" -> "5542" 
+  "5501" -> "5500" 
+  "5519" -> "5518" 
+  "5502" -> "5504" 
+  "5504" -> "5501" 
+  "5520" -> "5522" 
+  "5522" -> "5519" 
+  "5477" -> "5484" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/107-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/107-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/107-cfg.dot	2023-06-07 19:33:45.407394690 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/107-cfg.dot	2023-06-07 19:33:51.987393986 +0330
@@ -1,61 +1,53 @@
-digraph "CallNonvirtualLongMethod" {  
-"5496" [label = <(va_start,va_start(ap, mid))<SUB>1300</SUB>> ]
-"5500" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1301</SUB>> ]
-"5503" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1302</SUB>> ]
-"5521" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1303</SUB>> ]
-"5540" [label = <(soa,soa(env))<SUB>1304</SUB>> ]
-"5543" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, ap)))<SUB>1305</SUB>> ]
-"5549" [label = <(RETURN,return result.GetJ();,return result.GetJ();)<SUB>1306</SUB>> ]
-"5501" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1301</SUB>> ]
-"5544" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1305</SUB>> ]
-"5550" [label = <(GetJ,result.GetJ())<SUB>1306</SUB>> ]
-"5551" [label = <(&lt;operator&gt;.fieldAccess,result.GetJ)<SUB>1306</SUB>> ]
-"5507" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1302</SUB>> ]
-"5525" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1303</SUB>> ]
-"5553" [label = <(FIELD_IDENTIFIER,GetJ,GetJ)<SUB>1306</SUB>> ]
-"5508" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1302</SUB>> ]
-"5512" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1302</SUB>> ]
-"5519" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1302</SUB>> ]
-"5526" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1303</SUB>> ]
-"5530" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1303</SUB>> ]
-"5537" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1303</SUB>> ]
-"5513" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1302</SUB>> ]
-"5531" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1303</SUB>> ]
-"5514" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1302</SUB>> ]
-"5516" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1302</SUB>> ]
-"5532" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1303</SUB>> ]
-"5534" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1303</SUB>> ]
-"5489" [label = <(METHOD,CallNonvirtualLongMethod)<SUB>1298</SUB>> ]
-"5554" [label = <(METHOD_RETURN,jlong)<SUB>1298</SUB>> ]
-  "5496" -> "5501" 
-  "5500" -> "5503" 
-  "5503" -> "5508" 
-  "5503" -> "5521" 
-  "5521" -> "5526" 
-  "5521" -> "5540" 
-  "5540" -> "5544" 
-  "5543" -> "5553" 
-  "5549" -> "5554" 
-  "5501" -> "5500" 
-  "5544" -> "5543" 
-  "5550" -> "5549" 
-  "5551" -> "5550" 
-  "5507" -> "5514" 
-  "5507" -> "5521" 
-  "5525" -> "5532" 
-  "5525" -> "5540" 
-  "5553" -> "5551" 
-  "5508" -> "5507" 
-  "5512" -> "5519" 
-  "5519" -> "5554" 
-  "5526" -> "5525" 
-  "5530" -> "5537" 
-  "5537" -> "5554" 
-  "5513" -> "5512" 
-  "5531" -> "5530" 
-  "5514" -> "5516" 
-  "5516" -> "5513" 
-  "5532" -> "5534" 
-  "5534" -> "5531" 
-  "5489" -> "5496" 
+digraph "CallNonvirtualFloatMethodV" {  
+"5551" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1259</SUB>> ]
+"5569" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1260</SUB>> ]
+"5588" [label = <(soa,soa(env))<SUB>1261</SUB>> ]
+"5590" [label = <(RETURN,return InvokeWithVarArgs(soa, obj, mid, args).GetF();,return InvokeWithVarArgs(soa, obj, mid, args).GetF();)<SUB>1262</SUB>> ]
+"5591" [label = <(GetF,InvokeWithVarArgs(soa, obj, mid, args).GetF())<SUB>1262</SUB>> ]
+"5592" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, obj, mid, args).GetF)<SUB>1262</SUB>> ]
+"5555" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1259</SUB>> ]
+"5573" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1260</SUB>> ]
+"5593" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1262</SUB>> ]
+"5598" [label = <(FIELD_IDENTIFIER,GetF,GetF)<SUB>1262</SUB>> ]
+"5556" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1259</SUB>> ]
+"5560" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1259</SUB>> ]
+"5567" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1259</SUB>> ]
+"5574" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1260</SUB>> ]
+"5578" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1260</SUB>> ]
+"5585" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1260</SUB>> ]
+"5561" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1259</SUB>> ]
+"5579" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1260</SUB>> ]
+"5562" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1259</SUB>> ]
+"5564" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1259</SUB>> ]
+"5580" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1260</SUB>> ]
+"5582" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1260</SUB>> ]
+"5544" [label = <(METHOD,CallNonvirtualFloatMethodV)<SUB>1257</SUB>> ]
+"5599" [label = <(METHOD_RETURN,jfloat)<SUB>1257</SUB>> ]
+  "5551" -> "5556" 
+  "5551" -> "5569" 
+  "5569" -> "5574" 
+  "5569" -> "5588" 
+  "5588" -> "5593" 
+  "5590" -> "5599" 
+  "5591" -> "5590" 
+  "5592" -> "5591" 
+  "5555" -> "5562" 
+  "5555" -> "5569" 
+  "5573" -> "5580" 
+  "5573" -> "5588" 
+  "5593" -> "5598" 
+  "5598" -> "5592" 
+  "5556" -> "5555" 
+  "5560" -> "5567" 
+  "5567" -> "5599" 
+  "5574" -> "5573" 
+  "5578" -> "5585" 
+  "5585" -> "5599" 
+  "5561" -> "5560" 
+  "5579" -> "5578" 
+  "5562" -> "5564" 
+  "5564" -> "5561" 
+  "5580" -> "5582" 
+  "5582" -> "5579" 
+  "5544" -> "5551" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/108-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/108-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/108-cfg.dot	2023-06-07 19:33:45.417394689 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/108-cfg.dot	2023-06-07 19:33:51.987393986 +0330
@@ -1,53 +1,53 @@
-digraph "CallNonvirtualLongMethodV" {  
-"5563" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1311</SUB>> ]
-"5581" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1312</SUB>> ]
-"5600" [label = <(soa,soa(env))<SUB>1313</SUB>> ]
-"5602" [label = <(RETURN,return InvokeWithVarArgs(soa, obj, mid, args).GetJ();,return InvokeWithVarArgs(soa, obj, mid, args).GetJ();)<SUB>1314</SUB>> ]
-"5603" [label = <(GetJ,InvokeWithVarArgs(soa, obj, mid, args).GetJ())<SUB>1314</SUB>> ]
-"5604" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, obj, mid, args).GetJ)<SUB>1314</SUB>> ]
-"5567" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1311</SUB>> ]
-"5585" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1312</SUB>> ]
-"5605" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1314</SUB>> ]
-"5610" [label = <(FIELD_IDENTIFIER,GetJ,GetJ)<SUB>1314</SUB>> ]
-"5568" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1311</SUB>> ]
-"5572" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1311</SUB>> ]
-"5579" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1311</SUB>> ]
-"5586" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1312</SUB>> ]
-"5590" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1312</SUB>> ]
-"5597" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1312</SUB>> ]
-"5573" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1311</SUB>> ]
-"5591" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1312</SUB>> ]
-"5574" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1311</SUB>> ]
-"5576" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1311</SUB>> ]
-"5592" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1312</SUB>> ]
-"5594" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1312</SUB>> ]
-"5556" [label = <(METHOD,CallNonvirtualLongMethodV)<SUB>1309</SUB>> ]
-"5611" [label = <(METHOD_RETURN,jlong)<SUB>1309</SUB>> ]
-  "5563" -> "5568" 
-  "5563" -> "5581" 
-  "5581" -> "5586" 
-  "5581" -> "5600" 
-  "5600" -> "5605" 
-  "5602" -> "5611" 
-  "5603" -> "5602" 
-  "5604" -> "5603" 
-  "5567" -> "5574" 
-  "5567" -> "5581" 
-  "5585" -> "5592" 
-  "5585" -> "5600" 
-  "5605" -> "5610" 
-  "5610" -> "5604" 
-  "5568" -> "5567" 
-  "5572" -> "5579" 
-  "5579" -> "5611" 
-  "5586" -> "5585" 
-  "5590" -> "5597" 
-  "5597" -> "5611" 
-  "5573" -> "5572" 
-  "5591" -> "5590" 
-  "5574" -> "5576" 
-  "5576" -> "5573" 
-  "5592" -> "5594" 
-  "5594" -> "5591" 
-  "5556" -> "5563" 
+digraph "CallNonvirtualFloatMethodA" {  
+"5608" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1267</SUB>> ]
+"5626" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1268</SUB>> ]
+"5645" [label = <(soa,soa(env))<SUB>1269</SUB>> ]
+"5647" [label = <(RETURN,return InvokeWithJValues(soa, obj, mid, args).GetF();,return InvokeWithJValues(soa, obj, mid, args).GetF();)<SUB>1270</SUB>> ]
+"5648" [label = <(GetF,InvokeWithJValues(soa, obj, mid, args).GetF())<SUB>1270</SUB>> ]
+"5649" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, obj, mid, args).GetF)<SUB>1270</SUB>> ]
+"5612" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1267</SUB>> ]
+"5630" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1268</SUB>> ]
+"5650" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1270</SUB>> ]
+"5655" [label = <(FIELD_IDENTIFIER,GetF,GetF)<SUB>1270</SUB>> ]
+"5613" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1267</SUB>> ]
+"5617" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1267</SUB>> ]
+"5624" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1267</SUB>> ]
+"5631" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1268</SUB>> ]
+"5635" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1268</SUB>> ]
+"5642" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1268</SUB>> ]
+"5618" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1267</SUB>> ]
+"5636" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1268</SUB>> ]
+"5619" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1267</SUB>> ]
+"5621" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1267</SUB>> ]
+"5637" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1268</SUB>> ]
+"5639" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1268</SUB>> ]
+"5601" [label = <(METHOD,CallNonvirtualFloatMethodA)<SUB>1265</SUB>> ]
+"5656" [label = <(METHOD_RETURN,jfloat)<SUB>1265</SUB>> ]
+  "5608" -> "5613" 
+  "5608" -> "5626" 
+  "5626" -> "5631" 
+  "5626" -> "5645" 
+  "5645" -> "5650" 
+  "5647" -> "5656" 
+  "5648" -> "5647" 
+  "5649" -> "5648" 
+  "5612" -> "5619" 
+  "5612" -> "5626" 
+  "5630" -> "5637" 
+  "5630" -> "5645" 
+  "5650" -> "5655" 
+  "5655" -> "5649" 
+  "5613" -> "5612" 
+  "5617" -> "5624" 
+  "5624" -> "5656" 
+  "5631" -> "5630" 
+  "5635" -> "5642" 
+  "5642" -> "5656" 
+  "5618" -> "5617" 
+  "5636" -> "5635" 
+  "5619" -> "5621" 
+  "5621" -> "5618" 
+  "5637" -> "5639" 
+  "5639" -> "5636" 
+  "5601" -> "5608" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/109-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/109-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/109-cfg.dot	2023-06-07 19:33:45.417394689 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/109-cfg.dot	2023-06-07 19:33:51.987393986 +0330
@@ -1,53 +1,61 @@
-digraph "CallNonvirtualLongMethodA" {  
-"5620" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1319</SUB>> ]
-"5638" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1320</SUB>> ]
-"5657" [label = <(soa,soa(env))<SUB>1321</SUB>> ]
-"5659" [label = <(RETURN,return InvokeWithJValues(soa, obj, mid, args).GetJ();,return InvokeWithJValues(soa, obj, mid, args).GetJ();)<SUB>1322</SUB>> ]
-"5660" [label = <(GetJ,InvokeWithJValues(soa, obj, mid, args).GetJ())<SUB>1322</SUB>> ]
-"5661" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, obj, mid, args).GetJ)<SUB>1322</SUB>> ]
-"5624" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1319</SUB>> ]
-"5642" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1320</SUB>> ]
-"5662" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1322</SUB>> ]
-"5667" [label = <(FIELD_IDENTIFIER,GetJ,GetJ)<SUB>1322</SUB>> ]
-"5625" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1319</SUB>> ]
-"5629" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1319</SUB>> ]
-"5636" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1319</SUB>> ]
-"5643" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1320</SUB>> ]
-"5647" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1320</SUB>> ]
-"5654" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1320</SUB>> ]
-"5630" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1319</SUB>> ]
-"5648" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1320</SUB>> ]
-"5631" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1319</SUB>> ]
-"5633" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1319</SUB>> ]
-"5649" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1320</SUB>> ]
-"5651" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1320</SUB>> ]
-"5613" [label = <(METHOD,CallNonvirtualLongMethodA)<SUB>1317</SUB>> ]
-"5668" [label = <(METHOD_RETURN,jlong)<SUB>1317</SUB>> ]
-  "5620" -> "5625" 
-  "5620" -> "5638" 
-  "5638" -> "5643" 
-  "5638" -> "5657" 
-  "5657" -> "5662" 
-  "5659" -> "5668" 
-  "5660" -> "5659" 
-  "5661" -> "5660" 
-  "5624" -> "5631" 
-  "5624" -> "5638" 
-  "5642" -> "5649" 
-  "5642" -> "5657" 
-  "5662" -> "5667" 
-  "5667" -> "5661" 
-  "5625" -> "5624" 
-  "5629" -> "5636" 
-  "5636" -> "5668" 
-  "5643" -> "5642" 
-  "5647" -> "5654" 
-  "5654" -> "5668" 
-  "5630" -> "5629" 
-  "5648" -> "5647" 
-  "5631" -> "5633" 
-  "5633" -> "5630" 
-  "5649" -> "5651" 
-  "5651" -> "5648" 
-  "5613" -> "5620" 
+digraph "CallNonvirtualDoubleMethod" {  
+"5665" [label = <(va_start,va_start(ap, mid))<SUB>1275</SUB>> ]
+"5669" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1276</SUB>> ]
+"5672" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1277</SUB>> ]
+"5690" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1278</SUB>> ]
+"5709" [label = <(soa,soa(env))<SUB>1279</SUB>> ]
+"5712" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, ap)))<SUB>1280</SUB>> ]
+"5718" [label = <(RETURN,return result.GetD();,return result.GetD();)<SUB>1281</SUB>> ]
+"5670" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1276</SUB>> ]
+"5713" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1280</SUB>> ]
+"5719" [label = <(GetD,result.GetD())<SUB>1281</SUB>> ]
+"5720" [label = <(&lt;operator&gt;.fieldAccess,result.GetD)<SUB>1281</SUB>> ]
+"5676" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1277</SUB>> ]
+"5694" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1278</SUB>> ]
+"5722" [label = <(FIELD_IDENTIFIER,GetD,GetD)<SUB>1281</SUB>> ]
+"5677" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1277</SUB>> ]
+"5681" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1277</SUB>> ]
+"5688" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1277</SUB>> ]
+"5695" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1278</SUB>> ]
+"5699" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1278</SUB>> ]
+"5706" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1278</SUB>> ]
+"5682" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1277</SUB>> ]
+"5700" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1278</SUB>> ]
+"5683" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1277</SUB>> ]
+"5685" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1277</SUB>> ]
+"5701" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1278</SUB>> ]
+"5703" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1278</SUB>> ]
+"5658" [label = <(METHOD,CallNonvirtualDoubleMethod)<SUB>1273</SUB>> ]
+"5723" [label = <(METHOD_RETURN,jdouble)<SUB>1273</SUB>> ]
+  "5665" -> "5670" 
+  "5669" -> "5672" 
+  "5672" -> "5677" 
+  "5672" -> "5690" 
+  "5690" -> "5695" 
+  "5690" -> "5709" 
+  "5709" -> "5713" 
+  "5712" -> "5722" 
+  "5718" -> "5723" 
+  "5670" -> "5669" 
+  "5713" -> "5712" 
+  "5719" -> "5718" 
+  "5720" -> "5719" 
+  "5676" -> "5683" 
+  "5676" -> "5690" 
+  "5694" -> "5701" 
+  "5694" -> "5709" 
+  "5722" -> "5720" 
+  "5677" -> "5676" 
+  "5681" -> "5688" 
+  "5688" -> "5723" 
+  "5695" -> "5694" 
+  "5699" -> "5706" 
+  "5706" -> "5723" 
+  "5682" -> "5681" 
+  "5700" -> "5699" 
+  "5683" -> "5685" 
+  "5685" -> "5682" 
+  "5701" -> "5703" 
+  "5703" -> "5700" 
+  "5658" -> "5665" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/11-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/11-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/11-cfg.dot	2023-06-07 19:33:45.337394696 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/11-cfg.dot	2023-06-07 19:33:51.917393996 +0330
@@ -1,5 +1,5 @@
-digraph "NotifyGetField" {  
-"274" [label = <(METHOD,NotifyGetField)<SUB>233</SUB>> ]
-"278" [label = <(METHOD_RETURN,void)<SUB>233</SUB>> ]
-  "274" -> "278" 
+digraph "EnsureInitialized" {  
+"181" [label = <(METHOD,EnsureInitialized)<SUB>231</SUB>> ]
+"185" [label = <(METHOD_RETURN,ANY)<SUB>231</SUB>> ]
+  "181" -> "185" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/110-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/110-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/110-cfg.dot	2023-06-07 19:33:45.417394689 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/110-cfg.dot	2023-06-07 19:33:51.987393986 +0330
@@ -1,61 +1,53 @@
-digraph "CallNonvirtualFloatMethod" {  
-"5677" [label = <(va_start,va_start(ap, mid))<SUB>1327</SUB>> ]
-"5681" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1328</SUB>> ]
-"5684" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1329</SUB>> ]
-"5702" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1330</SUB>> ]
-"5721" [label = <(soa,soa(env))<SUB>1331</SUB>> ]
-"5724" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, ap)))<SUB>1332</SUB>> ]
-"5730" [label = <(RETURN,return result.GetF();,return result.GetF();)<SUB>1333</SUB>> ]
-"5682" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1328</SUB>> ]
-"5725" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1332</SUB>> ]
-"5731" [label = <(GetF,result.GetF())<SUB>1333</SUB>> ]
-"5732" [label = <(&lt;operator&gt;.fieldAccess,result.GetF)<SUB>1333</SUB>> ]
-"5688" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1329</SUB>> ]
-"5706" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1330</SUB>> ]
-"5734" [label = <(FIELD_IDENTIFIER,GetF,GetF)<SUB>1333</SUB>> ]
-"5689" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1329</SUB>> ]
-"5693" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1329</SUB>> ]
-"5700" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1329</SUB>> ]
-"5707" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1330</SUB>> ]
-"5711" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1330</SUB>> ]
-"5718" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1330</SUB>> ]
-"5694" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1329</SUB>> ]
-"5712" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1330</SUB>> ]
-"5695" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1329</SUB>> ]
-"5697" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1329</SUB>> ]
-"5713" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1330</SUB>> ]
-"5715" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1330</SUB>> ]
-"5670" [label = <(METHOD,CallNonvirtualFloatMethod)<SUB>1325</SUB>> ]
-"5735" [label = <(METHOD_RETURN,jfloat)<SUB>1325</SUB>> ]
-  "5677" -> "5682" 
-  "5681" -> "5684" 
-  "5684" -> "5689" 
-  "5684" -> "5702" 
-  "5702" -> "5707" 
-  "5702" -> "5721" 
-  "5721" -> "5725" 
-  "5724" -> "5734" 
-  "5730" -> "5735" 
-  "5682" -> "5681" 
-  "5725" -> "5724" 
-  "5731" -> "5730" 
-  "5732" -> "5731" 
-  "5688" -> "5695" 
-  "5688" -> "5702" 
-  "5706" -> "5713" 
-  "5706" -> "5721" 
-  "5734" -> "5732" 
-  "5689" -> "5688" 
-  "5693" -> "5700" 
-  "5700" -> "5735" 
-  "5707" -> "5706" 
-  "5711" -> "5718" 
-  "5718" -> "5735" 
-  "5694" -> "5693" 
-  "5712" -> "5711" 
-  "5695" -> "5697" 
-  "5697" -> "5694" 
-  "5713" -> "5715" 
-  "5715" -> "5712" 
-  "5670" -> "5677" 
+digraph "CallNonvirtualDoubleMethodV" {  
+"5732" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1286</SUB>> ]
+"5750" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1287</SUB>> ]
+"5769" [label = <(soa,soa(env))<SUB>1288</SUB>> ]
+"5771" [label = <(RETURN,return InvokeWithVarArgs(soa, obj, mid, args).GetD();,return InvokeWithVarArgs(soa, obj, mid, args).GetD();)<SUB>1289</SUB>> ]
+"5772" [label = <(GetD,InvokeWithVarArgs(soa, obj, mid, args).GetD())<SUB>1289</SUB>> ]
+"5773" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, obj, mid, args).GetD)<SUB>1289</SUB>> ]
+"5736" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1286</SUB>> ]
+"5754" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1287</SUB>> ]
+"5774" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1289</SUB>> ]
+"5779" [label = <(FIELD_IDENTIFIER,GetD,GetD)<SUB>1289</SUB>> ]
+"5737" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1286</SUB>> ]
+"5741" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1286</SUB>> ]
+"5748" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1286</SUB>> ]
+"5755" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1287</SUB>> ]
+"5759" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1287</SUB>> ]
+"5766" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1287</SUB>> ]
+"5742" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1286</SUB>> ]
+"5760" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1287</SUB>> ]
+"5743" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1286</SUB>> ]
+"5745" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1286</SUB>> ]
+"5761" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1287</SUB>> ]
+"5763" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1287</SUB>> ]
+"5725" [label = <(METHOD,CallNonvirtualDoubleMethodV)<SUB>1284</SUB>> ]
+"5780" [label = <(METHOD_RETURN,jdouble)<SUB>1284</SUB>> ]
+  "5732" -> "5737" 
+  "5732" -> "5750" 
+  "5750" -> "5755" 
+  "5750" -> "5769" 
+  "5769" -> "5774" 
+  "5771" -> "5780" 
+  "5772" -> "5771" 
+  "5773" -> "5772" 
+  "5736" -> "5743" 
+  "5736" -> "5750" 
+  "5754" -> "5761" 
+  "5754" -> "5769" 
+  "5774" -> "5779" 
+  "5779" -> "5773" 
+  "5737" -> "5736" 
+  "5741" -> "5748" 
+  "5748" -> "5780" 
+  "5755" -> "5754" 
+  "5759" -> "5766" 
+  "5766" -> "5780" 
+  "5742" -> "5741" 
+  "5760" -> "5759" 
+  "5743" -> "5745" 
+  "5745" -> "5742" 
+  "5761" -> "5763" 
+  "5763" -> "5760" 
+  "5725" -> "5732" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/111-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/111-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/111-cfg.dot	2023-06-07 19:33:45.417394689 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/111-cfg.dot	2023-06-07 19:33:51.997393988 +0330
@@ -1,53 +1,53 @@
-digraph "CallNonvirtualFloatMethodV" {  
-"5744" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1338</SUB>> ]
-"5762" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1339</SUB>> ]
-"5781" [label = <(soa,soa(env))<SUB>1340</SUB>> ]
-"5783" [label = <(RETURN,return InvokeWithVarArgs(soa, obj, mid, args).GetF();,return InvokeWithVarArgs(soa, obj, mid, args).GetF();)<SUB>1341</SUB>> ]
-"5784" [label = <(GetF,InvokeWithVarArgs(soa, obj, mid, args).GetF())<SUB>1341</SUB>> ]
-"5785" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, obj, mid, args).GetF)<SUB>1341</SUB>> ]
-"5748" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1338</SUB>> ]
-"5766" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1339</SUB>> ]
-"5786" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1341</SUB>> ]
-"5791" [label = <(FIELD_IDENTIFIER,GetF,GetF)<SUB>1341</SUB>> ]
-"5749" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1338</SUB>> ]
-"5753" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1338</SUB>> ]
-"5760" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1338</SUB>> ]
-"5767" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1339</SUB>> ]
-"5771" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1339</SUB>> ]
-"5778" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1339</SUB>> ]
-"5754" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1338</SUB>> ]
-"5772" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1339</SUB>> ]
-"5755" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1338</SUB>> ]
-"5757" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1338</SUB>> ]
-"5773" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1339</SUB>> ]
-"5775" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1339</SUB>> ]
-"5737" [label = <(METHOD,CallNonvirtualFloatMethodV)<SUB>1336</SUB>> ]
-"5792" [label = <(METHOD_RETURN,jfloat)<SUB>1336</SUB>> ]
-  "5744" -> "5749" 
-  "5744" -> "5762" 
-  "5762" -> "5767" 
-  "5762" -> "5781" 
-  "5781" -> "5786" 
-  "5783" -> "5792" 
-  "5784" -> "5783" 
-  "5785" -> "5784" 
-  "5748" -> "5755" 
-  "5748" -> "5762" 
-  "5766" -> "5773" 
-  "5766" -> "5781" 
-  "5786" -> "5791" 
-  "5791" -> "5785" 
-  "5749" -> "5748" 
-  "5753" -> "5760" 
-  "5760" -> "5792" 
-  "5767" -> "5766" 
-  "5771" -> "5778" 
-  "5778" -> "5792" 
-  "5754" -> "5753" 
-  "5772" -> "5771" 
-  "5755" -> "5757" 
-  "5757" -> "5754" 
-  "5773" -> "5775" 
-  "5775" -> "5772" 
-  "5737" -> "5744" 
+digraph "CallNonvirtualDoubleMethodA" {  
+"5789" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1294</SUB>> ]
+"5807" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1295</SUB>> ]
+"5826" [label = <(soa,soa(env))<SUB>1296</SUB>> ]
+"5828" [label = <(RETURN,return InvokeWithJValues(soa, obj, mid, args).GetD();,return InvokeWithJValues(soa, obj, mid, args).GetD();)<SUB>1297</SUB>> ]
+"5829" [label = <(GetD,InvokeWithJValues(soa, obj, mid, args).GetD())<SUB>1297</SUB>> ]
+"5830" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, obj, mid, args).GetD)<SUB>1297</SUB>> ]
+"5793" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1294</SUB>> ]
+"5811" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1295</SUB>> ]
+"5831" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1297</SUB>> ]
+"5836" [label = <(FIELD_IDENTIFIER,GetD,GetD)<SUB>1297</SUB>> ]
+"5794" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1294</SUB>> ]
+"5798" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1294</SUB>> ]
+"5805" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1294</SUB>> ]
+"5812" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1295</SUB>> ]
+"5816" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1295</SUB>> ]
+"5823" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1295</SUB>> ]
+"5799" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1294</SUB>> ]
+"5817" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1295</SUB>> ]
+"5800" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1294</SUB>> ]
+"5802" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1294</SUB>> ]
+"5818" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1295</SUB>> ]
+"5820" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1295</SUB>> ]
+"5782" [label = <(METHOD,CallNonvirtualDoubleMethodA)<SUB>1292</SUB>> ]
+"5837" [label = <(METHOD_RETURN,jdouble)<SUB>1292</SUB>> ]
+  "5789" -> "5794" 
+  "5789" -> "5807" 
+  "5807" -> "5812" 
+  "5807" -> "5826" 
+  "5826" -> "5831" 
+  "5828" -> "5837" 
+  "5829" -> "5828" 
+  "5830" -> "5829" 
+  "5793" -> "5800" 
+  "5793" -> "5807" 
+  "5811" -> "5818" 
+  "5811" -> "5826" 
+  "5831" -> "5836" 
+  "5836" -> "5830" 
+  "5794" -> "5793" 
+  "5798" -> "5805" 
+  "5805" -> "5837" 
+  "5812" -> "5811" 
+  "5816" -> "5823" 
+  "5823" -> "5837" 
+  "5799" -> "5798" 
+  "5817" -> "5816" 
+  "5800" -> "5802" 
+  "5802" -> "5799" 
+  "5818" -> "5820" 
+  "5820" -> "5817" 
+  "5782" -> "5789" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/112-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/112-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/112-cfg.dot	2023-06-07 19:33:45.417394689 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/112-cfg.dot	2023-06-07 19:33:51.997393988 +0330
@@ -1,53 +1,51 @@
-digraph "CallNonvirtualFloatMethodA" {  
-"5801" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1346</SUB>> ]
-"5819" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1347</SUB>> ]
-"5838" [label = <(soa,soa(env))<SUB>1348</SUB>> ]
-"5840" [label = <(RETURN,return InvokeWithJValues(soa, obj, mid, args).GetF();,return InvokeWithJValues(soa, obj, mid, args).GetF();)<SUB>1349</SUB>> ]
-"5841" [label = <(GetF,InvokeWithJValues(soa, obj, mid, args).GetF())<SUB>1349</SUB>> ]
-"5842" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, obj, mid, args).GetF)<SUB>1349</SUB>> ]
-"5805" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1346</SUB>> ]
-"5823" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1347</SUB>> ]
-"5843" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1349</SUB>> ]
-"5848" [label = <(FIELD_IDENTIFIER,GetF,GetF)<SUB>1349</SUB>> ]
-"5806" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1346</SUB>> ]
-"5810" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1346</SUB>> ]
-"5817" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1346</SUB>> ]
-"5824" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1347</SUB>> ]
-"5828" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1347</SUB>> ]
-"5835" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1347</SUB>> ]
-"5811" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1346</SUB>> ]
-"5829" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1347</SUB>> ]
-"5812" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1346</SUB>> ]
-"5814" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1346</SUB>> ]
-"5830" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1347</SUB>> ]
-"5832" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1347</SUB>> ]
-"5794" [label = <(METHOD,CallNonvirtualFloatMethodA)<SUB>1344</SUB>> ]
-"5849" [label = <(METHOD_RETURN,jfloat)<SUB>1344</SUB>> ]
-  "5801" -> "5806" 
-  "5801" -> "5819" 
-  "5819" -> "5824" 
-  "5819" -> "5838" 
-  "5838" -> "5843" 
-  "5840" -> "5849" 
-  "5841" -> "5840" 
-  "5842" -> "5841" 
-  "5805" -> "5812" 
-  "5805" -> "5819" 
-  "5823" -> "5830" 
-  "5823" -> "5838" 
-  "5843" -> "5848" 
-  "5848" -> "5842" 
-  "5806" -> "5805" 
-  "5810" -> "5817" 
-  "5817" -> "5849" 
-  "5824" -> "5823" 
-  "5828" -> "5835" 
-  "5835" -> "5849" 
-  "5811" -> "5810" 
-  "5829" -> "5828" 
-  "5812" -> "5814" 
-  "5814" -> "5811" 
-  "5830" -> "5832" 
-  "5832" -> "5829" 
-  "5794" -> "5801" 
+digraph "CallNonvirtualVoidMethod" {  
+"5846" [label = <(va_start,va_start(ap, mid))<SUB>1302</SUB>> ]
+"5850" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1303</SUB>> ]
+"5853" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1304</SUB>> ]
+"5870" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1305</SUB>> ]
+"5888" [label = <(soa,soa(env))<SUB>1306</SUB>> ]
+"5890" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1307</SUB>> ]
+"5851" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1303</SUB>> ]
+"5857" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1304</SUB>> ]
+"5874" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1305</SUB>> ]
+"5858" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1304</SUB>> ]
+"5862" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1304</SUB>> ]
+"5869" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1304</SUB>> ]
+"5875" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1305</SUB>> ]
+"5879" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1305</SUB>> ]
+"5886" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1305</SUB>> ]
+"5863" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1304</SUB>> ]
+"5880" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1305</SUB>> ]
+"5864" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1304</SUB>> ]
+"5866" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1304</SUB>> ]
+"5881" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1305</SUB>> ]
+"5883" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1305</SUB>> ]
+"5839" [label = <(METHOD,CallNonvirtualVoidMethod)<SUB>1300</SUB>> ]
+"5895" [label = <(METHOD_RETURN,void)<SUB>1300</SUB>> ]
+  "5846" -> "5851" 
+  "5850" -> "5853" 
+  "5853" -> "5858" 
+  "5853" -> "5870" 
+  "5870" -> "5875" 
+  "5870" -> "5888" 
+  "5888" -> "5890" 
+  "5890" -> "5895" 
+  "5851" -> "5850" 
+  "5857" -> "5864" 
+  "5857" -> "5870" 
+  "5874" -> "5881" 
+  "5874" -> "5888" 
+  "5858" -> "5857" 
+  "5862" -> "5869" 
+  "5869" -> "5895" 
+  "5875" -> "5874" 
+  "5879" -> "5886" 
+  "5886" -> "5895" 
+  "5863" -> "5862" 
+  "5880" -> "5879" 
+  "5864" -> "5866" 
+  "5866" -> "5863" 
+  "5881" -> "5883" 
+  "5883" -> "5880" 
+  "5839" -> "5846" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/113-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/113-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/113-cfg.dot	2023-06-07 19:33:45.417394689 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/113-cfg.dot	2023-06-07 19:33:51.997393988 +0330
@@ -1,61 +1,45 @@
-digraph "CallNonvirtualDoubleMethod" {  
-"5858" [label = <(va_start,va_start(ap, mid))<SUB>1354</SUB>> ]
-"5862" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1355</SUB>> ]
-"5865" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1356</SUB>> ]
-"5883" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1357</SUB>> ]
-"5902" [label = <(soa,soa(env))<SUB>1358</SUB>> ]
-"5905" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, ap)))<SUB>1359</SUB>> ]
-"5911" [label = <(RETURN,return result.GetD();,return result.GetD();)<SUB>1360</SUB>> ]
-"5863" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1355</SUB>> ]
-"5906" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1359</SUB>> ]
-"5912" [label = <(GetD,result.GetD())<SUB>1360</SUB>> ]
-"5913" [label = <(&lt;operator&gt;.fieldAccess,result.GetD)<SUB>1360</SUB>> ]
-"5869" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1356</SUB>> ]
-"5887" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1357</SUB>> ]
-"5915" [label = <(FIELD_IDENTIFIER,GetD,GetD)<SUB>1360</SUB>> ]
-"5870" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1356</SUB>> ]
-"5874" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1356</SUB>> ]
-"5881" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1356</SUB>> ]
-"5888" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1357</SUB>> ]
-"5892" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1357</SUB>> ]
-"5899" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1357</SUB>> ]
-"5875" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1356</SUB>> ]
-"5893" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1357</SUB>> ]
-"5876" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1356</SUB>> ]
-"5878" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1356</SUB>> ]
-"5894" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1357</SUB>> ]
-"5896" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1357</SUB>> ]
-"5851" [label = <(METHOD,CallNonvirtualDoubleMethod)<SUB>1352</SUB>> ]
-"5916" [label = <(METHOD_RETURN,jdouble)<SUB>1352</SUB>> ]
-  "5858" -> "5863" 
-  "5862" -> "5865" 
-  "5865" -> "5870" 
-  "5865" -> "5883" 
-  "5883" -> "5888" 
-  "5883" -> "5902" 
-  "5902" -> "5906" 
-  "5905" -> "5915" 
-  "5911" -> "5916" 
-  "5863" -> "5862" 
-  "5906" -> "5905" 
-  "5912" -> "5911" 
-  "5913" -> "5912" 
-  "5869" -> "5876" 
-  "5869" -> "5883" 
-  "5887" -> "5894" 
-  "5887" -> "5902" 
-  "5915" -> "5913" 
-  "5870" -> "5869" 
-  "5874" -> "5881" 
-  "5881" -> "5916" 
-  "5888" -> "5887" 
-  "5892" -> "5899" 
-  "5899" -> "5916" 
-  "5875" -> "5874" 
-  "5893" -> "5892" 
-  "5876" -> "5878" 
-  "5878" -> "5875" 
-  "5894" -> "5896" 
-  "5896" -> "5893" 
-  "5851" -> "5858" 
+digraph "CallNonvirtualVoidMethodV" {  
+"5904" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1312</SUB>> ]
+"5921" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1313</SUB>> ]
+"5939" [label = <(soa,soa(env))<SUB>1314</SUB>> ]
+"5941" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1315</SUB>> ]
+"5908" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1312</SUB>> ]
+"5925" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1313</SUB>> ]
+"5909" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1312</SUB>> ]
+"5913" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1312</SUB>> ]
+"5920" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1312</SUB>> ]
+"5926" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1313</SUB>> ]
+"5930" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1313</SUB>> ]
+"5937" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1313</SUB>> ]
+"5914" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1312</SUB>> ]
+"5931" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1313</SUB>> ]
+"5915" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1312</SUB>> ]
+"5917" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1312</SUB>> ]
+"5932" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1313</SUB>> ]
+"5934" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1313</SUB>> ]
+"5897" [label = <(METHOD,CallNonvirtualVoidMethodV)<SUB>1310</SUB>> ]
+"5946" [label = <(METHOD_RETURN,void)<SUB>1310</SUB>> ]
+  "5904" -> "5909" 
+  "5904" -> "5921" 
+  "5921" -> "5926" 
+  "5921" -> "5939" 
+  "5939" -> "5941" 
+  "5941" -> "5946" 
+  "5908" -> "5915" 
+  "5908" -> "5921" 
+  "5925" -> "5932" 
+  "5925" -> "5939" 
+  "5909" -> "5908" 
+  "5913" -> "5920" 
+  "5920" -> "5946" 
+  "5926" -> "5925" 
+  "5930" -> "5937" 
+  "5937" -> "5946" 
+  "5914" -> "5913" 
+  "5931" -> "5930" 
+  "5915" -> "5917" 
+  "5917" -> "5914" 
+  "5932" -> "5934" 
+  "5934" -> "5931" 
+  "5897" -> "5904" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/114-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/114-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/114-cfg.dot	2023-06-07 19:33:45.417394689 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/114-cfg.dot	2023-06-07 19:33:51.997393988 +0330
@@ -1,53 +1,45 @@
-digraph "CallNonvirtualDoubleMethodV" {  
-"5925" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1365</SUB>> ]
-"5943" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1366</SUB>> ]
-"5962" [label = <(soa,soa(env))<SUB>1367</SUB>> ]
-"5964" [label = <(RETURN,return InvokeWithVarArgs(soa, obj, mid, args).GetD();,return InvokeWithVarArgs(soa, obj, mid, args).GetD();)<SUB>1368</SUB>> ]
-"5965" [label = <(GetD,InvokeWithVarArgs(soa, obj, mid, args).GetD())<SUB>1368</SUB>> ]
-"5966" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, obj, mid, args).GetD)<SUB>1368</SUB>> ]
-"5929" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1365</SUB>> ]
-"5947" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1366</SUB>> ]
-"5967" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1368</SUB>> ]
-"5972" [label = <(FIELD_IDENTIFIER,GetD,GetD)<SUB>1368</SUB>> ]
-"5930" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1365</SUB>> ]
-"5934" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1365</SUB>> ]
-"5941" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1365</SUB>> ]
-"5948" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1366</SUB>> ]
-"5952" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1366</SUB>> ]
-"5959" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1366</SUB>> ]
-"5935" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1365</SUB>> ]
-"5953" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1366</SUB>> ]
-"5936" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1365</SUB>> ]
-"5938" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1365</SUB>> ]
-"5954" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1366</SUB>> ]
-"5956" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1366</SUB>> ]
-"5918" [label = <(METHOD,CallNonvirtualDoubleMethodV)<SUB>1363</SUB>> ]
-"5973" [label = <(METHOD_RETURN,jdouble)<SUB>1363</SUB>> ]
-  "5925" -> "5930" 
-  "5925" -> "5943" 
-  "5943" -> "5948" 
-  "5943" -> "5962" 
-  "5962" -> "5967" 
-  "5964" -> "5973" 
+digraph "CallNonvirtualVoidMethodA" {  
+"5955" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1320</SUB>> ]
+"5972" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1321</SUB>> ]
+"5990" [label = <(soa,soa(env))<SUB>1322</SUB>> ]
+"5992" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1323</SUB>> ]
+"5959" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1320</SUB>> ]
+"5976" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1321</SUB>> ]
+"5960" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1320</SUB>> ]
+"5964" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1320</SUB>> ]
+"5971" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1320</SUB>> ]
+"5977" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1321</SUB>> ]
+"5981" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1321</SUB>> ]
+"5988" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1321</SUB>> ]
+"5965" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1320</SUB>> ]
+"5982" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1321</SUB>> ]
+"5966" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1320</SUB>> ]
+"5968" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1320</SUB>> ]
+"5983" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1321</SUB>> ]
+"5985" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1321</SUB>> ]
+"5948" [label = <(METHOD,CallNonvirtualVoidMethodA)<SUB>1318</SUB>> ]
+"5997" [label = <(METHOD_RETURN,void)<SUB>1318</SUB>> ]
+  "5955" -> "5960" 
+  "5955" -> "5972" 
+  "5972" -> "5977" 
+  "5972" -> "5990" 
+  "5990" -> "5992" 
+  "5992" -> "5997" 
+  "5959" -> "5966" 
+  "5959" -> "5972" 
+  "5976" -> "5983" 
+  "5976" -> "5990" 
+  "5960" -> "5959" 
+  "5964" -> "5971" 
+  "5971" -> "5997" 
+  "5977" -> "5976" 
+  "5981" -> "5988" 
+  "5988" -> "5997" 
   "5965" -> "5964" 
-  "5966" -> "5965" 
-  "5929" -> "5936" 
-  "5929" -> "5943" 
-  "5947" -> "5954" 
-  "5947" -> "5962" 
-  "5967" -> "5972" 
-  "5972" -> "5966" 
-  "5930" -> "5929" 
-  "5934" -> "5941" 
-  "5941" -> "5973" 
-  "5948" -> "5947" 
-  "5952" -> "5959" 
-  "5959" -> "5973" 
-  "5935" -> "5934" 
-  "5953" -> "5952" 
-  "5936" -> "5938" 
-  "5938" -> "5935" 
-  "5954" -> "5956" 
-  "5956" -> "5953" 
-  "5918" -> "5925" 
+  "5982" -> "5981" 
+  "5966" -> "5968" 
+  "5968" -> "5965" 
+  "5983" -> "5985" 
+  "5985" -> "5982" 
+  "5948" -> "5955" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/115-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/115-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/115-cfg.dot	2023-06-07 19:33:45.417394689 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/115-cfg.dot	2023-06-07 19:33:51.997393988 +0330
@@ -1,53 +1,65 @@
-digraph "CallNonvirtualDoubleMethodA" {  
-"5982" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1373</SUB>> ]
-"6000" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1374</SUB>> ]
-"6019" [label = <(soa,soa(env))<SUB>1375</SUB>> ]
-"6021" [label = <(RETURN,return InvokeWithJValues(soa, obj, mid, args).GetD();,return InvokeWithJValues(soa, obj, mid, args).GetD();)<SUB>1376</SUB>> ]
-"6022" [label = <(GetD,InvokeWithJValues(soa, obj, mid, args).GetD())<SUB>1376</SUB>> ]
-"6023" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, obj, mid, args).GetD)<SUB>1376</SUB>> ]
-"5986" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1373</SUB>> ]
-"6004" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1374</SUB>> ]
-"6024" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1376</SUB>> ]
-"6029" [label = <(FIELD_IDENTIFIER,GetD,GetD)<SUB>1376</SUB>> ]
-"5987" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1373</SUB>> ]
-"5991" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1373</SUB>> ]
-"5998" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1373</SUB>> ]
-"6005" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1374</SUB>> ]
-"6009" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1374</SUB>> ]
-"6016" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1374</SUB>> ]
-"5992" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1373</SUB>> ]
-"6010" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1374</SUB>> ]
-"5993" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1373</SUB>> ]
-"5995" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1373</SUB>> ]
-"6011" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1374</SUB>> ]
-"6013" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1374</SUB>> ]
-"5975" [label = <(METHOD,CallNonvirtualDoubleMethodA)<SUB>1371</SUB>> ]
-"6030" [label = <(METHOD_RETURN,jdouble)<SUB>1371</SUB>> ]
-  "5982" -> "5987" 
-  "5982" -> "6000" 
-  "6000" -> "6005" 
-  "6000" -> "6019" 
-  "6019" -> "6024" 
-  "6021" -> "6030" 
-  "6022" -> "6021" 
-  "6023" -> "6022" 
-  "5986" -> "5993" 
-  "5986" -> "6000" 
-  "6004" -> "6011" 
-  "6004" -> "6019" 
-  "6024" -> "6029" 
-  "6029" -> "6023" 
-  "5987" -> "5986" 
-  "5991" -> "5998" 
-  "5998" -> "6030" 
-  "6005" -> "6004" 
+digraph "GetFieldID" {  
+"6005" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_class))<SUB>1327</SUB>> ]
+"6023" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(name))<SUB>1328</SUB>> ]
+"6041" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(sig))<SUB>1329</SUB>> ]
+"6060" [label = <(soa,soa(env))<SUB>1330</SUB>> ]
+"6062" [label = <(RETURN,return FindFieldID(soa, java_class, name, sig, false);,return FindFieldID(soa, java_class, name, sig, false);)<SUB>1331</SUB>> ]
+"6063" [label = <(FindFieldID,FindFieldID(soa, java_class, name, sig, false))<SUB>1331</SUB>> ]
+"6009" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>1327</SUB>> ]
+"6027" [label = <(UNLIKELY,UNLIKELY((name) == nullptr))<SUB>1328</SUB>> ]
+"6045" [label = <(UNLIKELY,UNLIKELY((sig) == nullptr))<SUB>1329</SUB>> ]
+"6010" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>1327</SUB>> ]
+"6014" [label = <(CHECK_NON_NULL_ARGUMENT(java_class),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class == null&quot;))<SUB>1327</SUB>> ]
+"6021" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_class),CHECK_NON_NULL_ARGUMENT(java_class))<SUB>1327</SUB>> ]
+"6028" [label = <(&lt;operator&gt;.equals,(name) == nullptr)<SUB>1328</SUB>> ]
+"6032" [label = <(CHECK_NON_NULL_ARGUMENT(name),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;name == null&quot;))<SUB>1328</SUB>> ]
+"6039" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(name),CHECK_NON_NULL_ARGUMENT(name))<SUB>1328</SUB>> ]
+"6046" [label = <(&lt;operator&gt;.equals,(sig) == nullptr)<SUB>1329</SUB>> ]
+"6050" [label = <(CHECK_NON_NULL_ARGUMENT(sig),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;sig == null&quot;))<SUB>1329</SUB>> ]
+"6057" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(sig),CHECK_NON_NULL_ARGUMENT(sig))<SUB>1329</SUB>> ]
+"6015" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1327</SUB>> ]
+"6033" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1328</SUB>> ]
+"6051" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1329</SUB>> ]
+"6016" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1327</SUB>> ]
+"6018" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1327</SUB>> ]
+"6034" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1328</SUB>> ]
+"6036" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1328</SUB>> ]
+"6052" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1329</SUB>> ]
+"6054" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1329</SUB>> ]
+"5999" [label = <(METHOD,GetFieldID)<SUB>1326</SUB>> ]
+"6069" [label = <(METHOD_RETURN,jfieldID)<SUB>1326</SUB>> ]
+  "6005" -> "6010" 
+  "6005" -> "6023" 
+  "6023" -> "6028" 
+  "6023" -> "6041" 
+  "6041" -> "6046" 
+  "6041" -> "6060" 
+  "6060" -> "6063" 
+  "6062" -> "6069" 
+  "6063" -> "6062" 
   "6009" -> "6016" 
-  "6016" -> "6030" 
-  "5992" -> "5991" 
+  "6009" -> "6023" 
+  "6027" -> "6034" 
+  "6027" -> "6041" 
+  "6045" -> "6052" 
+  "6045" -> "6060" 
   "6010" -> "6009" 
-  "5993" -> "5995" 
-  "5995" -> "5992" 
-  "6011" -> "6013" 
-  "6013" -> "6010" 
-  "5975" -> "5982" 
+  "6014" -> "6021" 
+  "6021" -> "6069" 
+  "6028" -> "6027" 
+  "6032" -> "6039" 
+  "6039" -> "6069" 
+  "6046" -> "6045" 
+  "6050" -> "6057" 
+  "6057" -> "6069" 
+  "6015" -> "6014" 
+  "6033" -> "6032" 
+  "6051" -> "6050" 
+  "6016" -> "6018" 
+  "6018" -> "6015" 
+  "6034" -> "6036" 
+  "6036" -> "6033" 
+  "6052" -> "6054" 
+  "6054" -> "6051" 
+  "5999" -> "6005" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/116-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/116-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/116-cfg.dot	2023-06-07 19:33:45.417394689 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/116-cfg.dot	2023-06-07 19:33:51.997393988 +0330
@@ -1,51 +1,65 @@
-digraph "CallNonvirtualVoidMethod" {  
-"6039" [label = <(va_start,va_start(ap, mid))<SUB>1381</SUB>> ]
-"6043" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1382</SUB>> ]
-"6046" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1383</SUB>> ]
-"6063" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1384</SUB>> ]
-"6081" [label = <(soa,soa(env))<SUB>1385</SUB>> ]
-"6083" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1386</SUB>> ]
-"6044" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1382</SUB>> ]
-"6050" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1383</SUB>> ]
-"6067" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1384</SUB>> ]
-"6051" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1383</SUB>> ]
-"6055" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1383</SUB>> ]
-"6062" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1383</SUB>> ]
-"6068" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1384</SUB>> ]
-"6072" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1384</SUB>> ]
-"6079" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1384</SUB>> ]
-"6056" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1383</SUB>> ]
-"6073" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1384</SUB>> ]
-"6057" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1383</SUB>> ]
-"6059" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1383</SUB>> ]
-"6074" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1384</SUB>> ]
-"6076" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1384</SUB>> ]
-"6032" [label = <(METHOD,CallNonvirtualVoidMethod)<SUB>1379</SUB>> ]
-"6088" [label = <(METHOD_RETURN,void)<SUB>1379</SUB>> ]
-  "6039" -> "6044" 
-  "6043" -> "6046" 
-  "6046" -> "6051" 
-  "6046" -> "6063" 
-  "6063" -> "6068" 
-  "6063" -> "6081" 
-  "6081" -> "6083" 
-  "6083" -> "6088" 
-  "6044" -> "6043" 
-  "6050" -> "6057" 
-  "6050" -> "6063" 
-  "6067" -> "6074" 
-  "6067" -> "6081" 
-  "6051" -> "6050" 
-  "6055" -> "6062" 
-  "6062" -> "6088" 
-  "6068" -> "6067" 
-  "6072" -> "6079" 
-  "6079" -> "6088" 
-  "6056" -> "6055" 
-  "6073" -> "6072" 
-  "6057" -> "6059" 
-  "6059" -> "6056" 
-  "6074" -> "6076" 
-  "6076" -> "6073" 
-  "6032" -> "6039" 
+digraph "GetStaticFieldID" {  
+"6077" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_class))<SUB>1336</SUB>> ]
+"6095" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(name))<SUB>1337</SUB>> ]
+"6113" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(sig))<SUB>1338</SUB>> ]
+"6132" [label = <(soa,soa(env))<SUB>1339</SUB>> ]
+"6134" [label = <(RETURN,return FindFieldID(soa, java_class, name, sig, true);,return FindFieldID(soa, java_class, name, sig, true);)<SUB>1340</SUB>> ]
+"6135" [label = <(FindFieldID,FindFieldID(soa, java_class, name, sig, true))<SUB>1340</SUB>> ]
+"6081" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>1336</SUB>> ]
+"6099" [label = <(UNLIKELY,UNLIKELY((name) == nullptr))<SUB>1337</SUB>> ]
+"6117" [label = <(UNLIKELY,UNLIKELY((sig) == nullptr))<SUB>1338</SUB>> ]
+"6082" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>1336</SUB>> ]
+"6086" [label = <(CHECK_NON_NULL_ARGUMENT(java_class),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class == null&quot;))<SUB>1336</SUB>> ]
+"6093" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_class),CHECK_NON_NULL_ARGUMENT(java_class))<SUB>1336</SUB>> ]
+"6100" [label = <(&lt;operator&gt;.equals,(name) == nullptr)<SUB>1337</SUB>> ]
+"6104" [label = <(CHECK_NON_NULL_ARGUMENT(name),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;name == null&quot;))<SUB>1337</SUB>> ]
+"6111" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(name),CHECK_NON_NULL_ARGUMENT(name))<SUB>1337</SUB>> ]
+"6118" [label = <(&lt;operator&gt;.equals,(sig) == nullptr)<SUB>1338</SUB>> ]
+"6122" [label = <(CHECK_NON_NULL_ARGUMENT(sig),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;sig == null&quot;))<SUB>1338</SUB>> ]
+"6129" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(sig),CHECK_NON_NULL_ARGUMENT(sig))<SUB>1338</SUB>> ]
+"6087" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1336</SUB>> ]
+"6105" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1337</SUB>> ]
+"6123" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1338</SUB>> ]
+"6088" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1336</SUB>> ]
+"6090" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1336</SUB>> ]
+"6106" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1337</SUB>> ]
+"6108" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1337</SUB>> ]
+"6124" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1338</SUB>> ]
+"6126" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1338</SUB>> ]
+"6071" [label = <(METHOD,GetStaticFieldID)<SUB>1334</SUB>> ]
+"6141" [label = <(METHOD_RETURN,jfieldID)<SUB>1334</SUB>> ]
+  "6077" -> "6082" 
+  "6077" -> "6095" 
+  "6095" -> "6100" 
+  "6095" -> "6113" 
+  "6113" -> "6118" 
+  "6113" -> "6132" 
+  "6132" -> "6135" 
+  "6134" -> "6141" 
+  "6135" -> "6134" 
+  "6081" -> "6088" 
+  "6081" -> "6095" 
+  "6099" -> "6106" 
+  "6099" -> "6113" 
+  "6117" -> "6124" 
+  "6117" -> "6132" 
+  "6082" -> "6081" 
+  "6086" -> "6093" 
+  "6093" -> "6141" 
+  "6100" -> "6099" 
+  "6104" -> "6111" 
+  "6111" -> "6141" 
+  "6118" -> "6117" 
+  "6122" -> "6129" 
+  "6129" -> "6141" 
+  "6087" -> "6086" 
+  "6105" -> "6104" 
+  "6123" -> "6122" 
+  "6088" -> "6090" 
+  "6090" -> "6087" 
+  "6106" -> "6108" 
+  "6108" -> "6105" 
+  "6124" -> "6126" 
+  "6126" -> "6123" 
+  "6071" -> "6077" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/117-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/117-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/117-cfg.dot	2023-06-07 19:33:45.417394689 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/117-cfg.dot	2023-06-07 19:33:51.997393988 +0330
@@ -1,45 +1,91 @@
-digraph "CallNonvirtualVoidMethodV" {  
-"6097" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1391</SUB>> ]
-"6114" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1392</SUB>> ]
-"6132" [label = <(soa,soa(env))<SUB>1393</SUB>> ]
-"6134" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1394</SUB>> ]
-"6101" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1391</SUB>> ]
-"6118" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1392</SUB>> ]
-"6102" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1391</SUB>> ]
-"6106" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1391</SUB>> ]
-"6113" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1391</SUB>> ]
-"6119" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1392</SUB>> ]
-"6123" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1392</SUB>> ]
-"6130" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1392</SUB>> ]
-"6107" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1391</SUB>> ]
-"6124" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1392</SUB>> ]
-"6108" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1391</SUB>> ]
-"6110" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1391</SUB>> ]
-"6125" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1392</SUB>> ]
-"6127" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1392</SUB>> ]
-"6090" [label = <(METHOD,CallNonvirtualVoidMethodV)<SUB>1389</SUB>> ]
-"6139" [label = <(METHOD_RETURN,void)<SUB>1389</SUB>> ]
-  "6097" -> "6102" 
-  "6097" -> "6114" 
-  "6114" -> "6119" 
-  "6114" -> "6132" 
-  "6132" -> "6134" 
-  "6134" -> "6139" 
-  "6101" -> "6108" 
-  "6101" -> "6114" 
-  "6118" -> "6125" 
-  "6118" -> "6132" 
-  "6102" -> "6101" 
-  "6106" -> "6113" 
-  "6113" -> "6139" 
-  "6119" -> "6118" 
-  "6123" -> "6130" 
-  "6130" -> "6139" 
-  "6107" -> "6106" 
-  "6124" -> "6123" 
-  "6108" -> "6110" 
-  "6110" -> "6107" 
-  "6125" -> "6127" 
-  "6127" -> "6124" 
-  "6090" -> "6097" 
+digraph "GetObjectField" {  
+"6148" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(obj))<SUB>1344</SUB>> ]
+"6166" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(fid))<SUB>1345</SUB>> ]
+"6185" [label = <(soa,soa(env))<SUB>1346</SUB>> ]
+"6188" [label = <(&lt;operator&gt;.assignment,* f = jni::DecodeArtField(fid))<SUB>1347</SUB>> ]
+"6195" [label = <(NotifyGetField,NotifyGetField(f, obj))<SUB>1348</SUB>> ]
+"6198" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; o = soa.Decode&lt;mirror::Object&gt;(obj))<SUB>1349</SUB>> ]
+"6215" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(f-&gt;GetObject(o));,return soa.AddLocalReference&lt;jobject&gt;(f-&gt;GetObject(o));)<SUB>1350</SUB>> ]
+"6190" [label = <(jni::DecodeArtField,jni::DecodeArtField(fid))<SUB>1347</SUB>> ]
+"6199" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; o)<SUB>1349</SUB>> ]
+"6206" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(obj))<SUB>1349</SUB>> ]
+"6216" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(f-&gt;GetObject(o)))<SUB>1350</SUB>> ]
+"6191" [label = <(&lt;operator&gt;.fieldAccess,jni::DecodeArtField)<SUB>1347</SUB>> ]
+"6200" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>1349</SUB>> ]
+"6207" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>1349</SUB>> ]
+"6217" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>1350</SUB>> ]
+"6222" [label = <(GetObject,f-&gt;GetObject(o))<SUB>1350</SUB>> ]
+"6152" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1344</SUB>> ]
+"6170" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1345</SUB>> ]
+"6193" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1347</SUB>> ]
+"6202" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1349</SUB>> ]
+"6208" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1349</SUB>> ]
+"6211" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1349</SUB>> ]
+"6218" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1350</SUB>> ]
+"6223" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetObject)<SUB>1350</SUB>> ]
+"6153" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1344</SUB>> ]
+"6157" [label = <(CHECK_NON_NULL_ARGUMENT(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1344</SUB>> ]
+"6164" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(obj),CHECK_NON_NULL_ARGUMENT(obj))<SUB>1344</SUB>> ]
+"6171" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1345</SUB>> ]
+"6175" [label = <(CHECK_NON_NULL_ARGUMENT(fid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1345</SUB>> ]
+"6182" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(fid),CHECK_NON_NULL_ARGUMENT(fid))<SUB>1345</SUB>> ]
+"6204" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1349</SUB>> ]
+"6210" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1349</SUB>> ]
+"6213" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1349</SUB>> ]
+"6220" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1350</SUB>> ]
+"6225" [label = <(FIELD_IDENTIFIER,GetObject,GetObject)<SUB>1350</SUB>> ]
+"6158" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1344</SUB>> ]
+"6176" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1345</SUB>> ]
+"6159" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1344</SUB>> ]
+"6161" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1344</SUB>> ]
+"6177" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1345</SUB>> ]
+"6179" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1345</SUB>> ]
+"6143" [label = <(METHOD,GetObjectField)<SUB>1343</SUB>> ]
+"6227" [label = <(METHOD_RETURN,jobject)<SUB>1343</SUB>> ]
+  "6148" -> "6153" 
+  "6148" -> "6166" 
+  "6166" -> "6171" 
+  "6166" -> "6185" 
+  "6185" -> "6193" 
+  "6188" -> "6195" 
+  "6195" -> "6204" 
+  "6198" -> "6220" 
+  "6215" -> "6227" 
+  "6190" -> "6188" 
+  "6199" -> "6210" 
+  "6206" -> "6198" 
+  "6216" -> "6215" 
+  "6191" -> "6190" 
+  "6200" -> "6199" 
+  "6207" -> "6206" 
+  "6217" -> "6225" 
+  "6222" -> "6216" 
+  "6152" -> "6159" 
+  "6152" -> "6166" 
+  "6170" -> "6177" 
+  "6170" -> "6185" 
+  "6193" -> "6191" 
+  "6202" -> "6200" 
+  "6208" -> "6213" 
+  "6211" -> "6207" 
+  "6218" -> "6217" 
+  "6223" -> "6222" 
+  "6153" -> "6152" 
+  "6157" -> "6164" 
+  "6164" -> "6227" 
+  "6171" -> "6170" 
+  "6175" -> "6182" 
+  "6182" -> "6227" 
+  "6204" -> "6202" 
+  "6210" -> "6208" 
+  "6213" -> "6211" 
+  "6220" -> "6218" 
+  "6225" -> "6223" 
+  "6158" -> "6157" 
+  "6176" -> "6175" 
+  "6159" -> "6161" 
+  "6161" -> "6158" 
+  "6177" -> "6179" 
+  "6179" -> "6176" 
+  "6143" -> "6148" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/118-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/118-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/118-cfg.dot	2023-06-07 19:33:45.417394689 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/118-cfg.dot	2023-06-07 19:33:51.997393988 +0330
@@ -1,45 +1,57 @@
-digraph "CallNonvirtualVoidMethodA" {  
-"6148" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1399</SUB>> ]
-"6165" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1400</SUB>> ]
-"6183" [label = <(soa,soa(env))<SUB>1401</SUB>> ]
-"6185" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1402</SUB>> ]
-"6152" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1399</SUB>> ]
-"6169" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1400</SUB>> ]
-"6153" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1399</SUB>> ]
-"6157" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1399</SUB>> ]
-"6164" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1399</SUB>> ]
-"6170" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1400</SUB>> ]
-"6174" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1400</SUB>> ]
-"6181" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1400</SUB>> ]
-"6158" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1399</SUB>> ]
-"6175" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1400</SUB>> ]
-"6159" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1399</SUB>> ]
-"6161" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1399</SUB>> ]
-"6176" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1400</SUB>> ]
-"6178" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1400</SUB>> ]
-"6141" [label = <(METHOD,CallNonvirtualVoidMethodA)<SUB>1397</SUB>> ]
-"6190" [label = <(METHOD_RETURN,void)<SUB>1397</SUB>> ]
-  "6148" -> "6153" 
-  "6148" -> "6165" 
-  "6165" -> "6170" 
-  "6165" -> "6183" 
-  "6183" -> "6185" 
-  "6185" -> "6190" 
-  "6152" -> "6159" 
-  "6152" -> "6165" 
-  "6169" -> "6176" 
-  "6169" -> "6183" 
-  "6153" -> "6152" 
-  "6157" -> "6164" 
-  "6164" -> "6190" 
-  "6170" -> "6169" 
-  "6174" -> "6181" 
-  "6181" -> "6190" 
-  "6158" -> "6157" 
-  "6175" -> "6174" 
-  "6159" -> "6161" 
-  "6161" -> "6158" 
-  "6176" -> "6178" 
-  "6178" -> "6175" 
-  "6141" -> "6148" 
+digraph "GetStaticObjectField" {  
+"6234" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(fid))<SUB>1354</SUB>> ]
+"6253" [label = <(soa,soa(env))<SUB>1355</SUB>> ]
+"6256" [label = <(&lt;operator&gt;.assignment,* f = jni::DecodeArtField(fid))<SUB>1356</SUB>> ]
+"6263" [label = <(NotifyGetField,NotifyGetField(f, nullptr))<SUB>1357</SUB>> ]
+"6266" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(f-&gt;GetObject(f-&gt;GetDeclaringClass()));,return soa.AddLocalReference&lt;jobject&gt;(f-&gt;GetObject(f-&gt;GetDeclaringClass()));)<SUB>1358</SUB>> ]
+"6258" [label = <(jni::DecodeArtField,jni::DecodeArtField(fid))<SUB>1356</SUB>> ]
+"6267" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(f-&gt;GetObject(f-&gt;GetDeclaringClass())))<SUB>1358</SUB>> ]
+"6259" [label = <(&lt;operator&gt;.fieldAccess,jni::DecodeArtField)<SUB>1356</SUB>> ]
+"6268" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>1358</SUB>> ]
+"6273" [label = <(GetObject,f-&gt;GetObject(f-&gt;GetDeclaringClass()))<SUB>1358</SUB>> ]
+"6238" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1354</SUB>> ]
+"6261" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1356</SUB>> ]
+"6269" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1358</SUB>> ]
+"6274" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetObject)<SUB>1358</SUB>> ]
+"6277" [label = <(GetDeclaringClass,f-&gt;GetDeclaringClass())<SUB>1358</SUB>> ]
+"6239" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1354</SUB>> ]
+"6243" [label = <(CHECK_NON_NULL_ARGUMENT(fid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1354</SUB>> ]
+"6250" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(fid),CHECK_NON_NULL_ARGUMENT(fid))<SUB>1354</SUB>> ]
+"6271" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1358</SUB>> ]
+"6276" [label = <(FIELD_IDENTIFIER,GetObject,GetObject)<SUB>1358</SUB>> ]
+"6278" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1358</SUB>> ]
+"6244" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1354</SUB>> ]
+"6280" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1358</SUB>> ]
+"6245" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1354</SUB>> ]
+"6247" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1354</SUB>> ]
+"6229" [label = <(METHOD,GetStaticObjectField)<SUB>1353</SUB>> ]
+"6281" [label = <(METHOD_RETURN,jobject)<SUB>1353</SUB>> ]
+  "6234" -> "6239" 
+  "6234" -> "6253" 
+  "6253" -> "6261" 
+  "6256" -> "6263" 
+  "6263" -> "6271" 
+  "6266" -> "6281" 
+  "6258" -> "6256" 
+  "6267" -> "6266" 
+  "6259" -> "6258" 
+  "6268" -> "6276" 
+  "6273" -> "6267" 
+  "6238" -> "6245" 
+  "6238" -> "6253" 
+  "6261" -> "6259" 
+  "6269" -> "6268" 
+  "6274" -> "6280" 
+  "6277" -> "6273" 
+  "6239" -> "6238" 
+  "6243" -> "6250" 
+  "6250" -> "6281" 
+  "6271" -> "6269" 
+  "6276" -> "6274" 
+  "6278" -> "6277" 
+  "6244" -> "6243" 
+  "6280" -> "6278" 
+  "6245" -> "6247" 
+  "6247" -> "6244" 
+  "6229" -> "6234" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/119-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/119-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/119-cfg.dot	2023-06-07 19:33:45.427394687 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/119-cfg.dot	2023-06-07 19:33:51.997393988 +0330
@@ -1,65 +1,109 @@
-digraph "GetFieldID" {  
-"6198" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_class))<SUB>1406</SUB>> ]
-"6216" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(name))<SUB>1407</SUB>> ]
-"6234" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(sig))<SUB>1408</SUB>> ]
-"6253" [label = <(soa,soa(env))<SUB>1409</SUB>> ]
-"6255" [label = <(RETURN,return FindFieldID(soa, java_class, name, sig, false);,return FindFieldID(soa, java_class, name, sig, false);)<SUB>1410</SUB>> ]
-"6256" [label = <(FindFieldID,FindFieldID(soa, java_class, name, sig, false))<SUB>1410</SUB>> ]
-"6202" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>1406</SUB>> ]
-"6220" [label = <(UNLIKELY,UNLIKELY((name) == nullptr))<SUB>1407</SUB>> ]
-"6238" [label = <(UNLIKELY,UNLIKELY((sig) == nullptr))<SUB>1408</SUB>> ]
-"6203" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>1406</SUB>> ]
-"6207" [label = <(CHECK_NON_NULL_ARGUMENT(java_class),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class == null&quot;))<SUB>1406</SUB>> ]
-"6214" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_class),CHECK_NON_NULL_ARGUMENT(java_class))<SUB>1406</SUB>> ]
-"6221" [label = <(&lt;operator&gt;.equals,(name) == nullptr)<SUB>1407</SUB>> ]
-"6225" [label = <(CHECK_NON_NULL_ARGUMENT(name),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;name == null&quot;))<SUB>1407</SUB>> ]
-"6232" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(name),CHECK_NON_NULL_ARGUMENT(name))<SUB>1407</SUB>> ]
-"6239" [label = <(&lt;operator&gt;.equals,(sig) == nullptr)<SUB>1408</SUB>> ]
-"6243" [label = <(CHECK_NON_NULL_ARGUMENT(sig),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;sig == null&quot;))<SUB>1408</SUB>> ]
-"6250" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(sig),CHECK_NON_NULL_ARGUMENT(sig))<SUB>1408</SUB>> ]
-"6208" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1406</SUB>> ]
-"6226" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1407</SUB>> ]
-"6244" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1408</SUB>> ]
-"6209" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1406</SUB>> ]
-"6211" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1406</SUB>> ]
-"6227" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1407</SUB>> ]
-"6229" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1407</SUB>> ]
-"6245" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1408</SUB>> ]
-"6247" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1408</SUB>> ]
-"6192" [label = <(METHOD,GetFieldID)<SUB>1405</SUB>> ]
-"6262" [label = <(METHOD_RETURN,jfieldID)<SUB>1405</SUB>> ]
-  "6198" -> "6203" 
-  "6198" -> "6216" 
-  "6216" -> "6221" 
-  "6216" -> "6234" 
-  "6234" -> "6239" 
-  "6234" -> "6253" 
-  "6253" -> "6256" 
-  "6255" -> "6262" 
-  "6256" -> "6255" 
-  "6202" -> "6209" 
-  "6202" -> "6216" 
-  "6220" -> "6227" 
-  "6220" -> "6234" 
-  "6238" -> "6245" 
-  "6238" -> "6253" 
-  "6203" -> "6202" 
-  "6207" -> "6214" 
-  "6214" -> "6262" 
-  "6221" -> "6220" 
-  "6225" -> "6232" 
-  "6232" -> "6262" 
-  "6239" -> "6238" 
-  "6243" -> "6250" 
-  "6250" -> "6262" 
-  "6208" -> "6207" 
-  "6226" -> "6225" 
-  "6244" -> "6243" 
-  "6209" -> "6211" 
-  "6211" -> "6208" 
-  "6227" -> "6229" 
-  "6229" -> "6226" 
-  "6245" -> "6247" 
-  "6247" -> "6244" 
-  "6192" -> "6198" 
+digraph "SetObjectField" {  
+"6289" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_object))<SUB>1362</SUB>> ]
+"6306" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid))<SUB>1363</SUB>> ]
+"6324" [label = <(soa,soa(env))<SUB>1364</SUB>> ]
+"6327" [label = <(&lt;operator&gt;.assignment,* f = jni::DecodeArtField(fid))<SUB>1365</SUB>> ]
+"6334" [label = <(NotifySetObjectField,NotifySetObjectField(f, java_object, java_value))<SUB>1366</SUB>> ]
+"6338" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; o = soa.Decode&lt;mirror::Object&gt;(java_object))<SUB>1367</SUB>> ]
+"6355" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; v = soa.Decode&lt;mirror::Object&gt;(java_value))<SUB>1368</SUB>> ]
+"6372" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetObject&lt;false&gt;(o, v))<SUB>1369</SUB>> ]
+"6329" [label = <(jni::DecodeArtField,jni::DecodeArtField(fid))<SUB>1365</SUB>> ]
+"6339" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; o)<SUB>1367</SUB>> ]
+"6346" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(java_object))<SUB>1367</SUB>> ]
+"6356" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; v)<SUB>1368</SUB>> ]
+"6363" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(java_value))<SUB>1368</SUB>> ]
+"6373" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetObject&lt;false)<SUB>1369</SUB>> ]
+"6378" [label = <(&lt;operator&gt;.bracketedPrimary,(o, v))<SUB>1369</SUB>> ]
+"6330" [label = <(&lt;operator&gt;.fieldAccess,jni::DecodeArtField)<SUB>1365</SUB>> ]
+"6340" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>1367</SUB>> ]
+"6347" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>1367</SUB>> ]
+"6357" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>1368</SUB>> ]
+"6364" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>1368</SUB>> ]
+"6374" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetObject)<SUB>1369</SUB>> ]
+"6379" [label = <(&lt;operator&gt;.expressionList,o, v)<SUB>1369</SUB>> ]
+"6293" [label = <(UNLIKELY,UNLIKELY((java_object) == nullptr))<SUB>1362</SUB>> ]
+"6310" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1363</SUB>> ]
+"6332" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1365</SUB>> ]
+"6342" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1367</SUB>> ]
+"6348" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1367</SUB>> ]
+"6351" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1367</SUB>> ]
+"6359" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1368</SUB>> ]
+"6365" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1368</SUB>> ]
+"6368" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1368</SUB>> ]
+"6376" [label = <(FIELD_IDENTIFIER,SetObject,SetObject)<SUB>1369</SUB>> ]
+"6294" [label = <(&lt;operator&gt;.equals,(java_object) == nullptr)<SUB>1362</SUB>> ]
+"6298" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_object),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_object == null&quot;))<SUB>1362</SUB>> ]
+"6305" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_object),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_object))<SUB>1362</SUB>> ]
+"6311" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1363</SUB>> ]
+"6315" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1363</SUB>> ]
+"6322" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid))<SUB>1363</SUB>> ]
+"6344" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1367</SUB>> ]
+"6350" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1367</SUB>> ]
+"6353" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1367</SUB>> ]
+"6361" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1368</SUB>> ]
+"6367" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1368</SUB>> ]
+"6370" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1368</SUB>> ]
+"6299" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1362</SUB>> ]
+"6316" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1363</SUB>> ]
+"6300" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1362</SUB>> ]
+"6302" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1362</SUB>> ]
+"6317" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1363</SUB>> ]
+"6319" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1363</SUB>> ]
+"6283" [label = <(METHOD,SetObjectField)<SUB>1361</SUB>> ]
+"6382" [label = <(METHOD_RETURN,void)<SUB>1361</SUB>> ]
+  "6289" -> "6294" 
+  "6289" -> "6306" 
+  "6306" -> "6311" 
+  "6306" -> "6324" 
+  "6324" -> "6332" 
+  "6327" -> "6334" 
+  "6334" -> "6344" 
+  "6338" -> "6361" 
+  "6355" -> "6376" 
+  "6372" -> "6382" 
+  "6329" -> "6327" 
+  "6339" -> "6350" 
+  "6346" -> "6338" 
+  "6356" -> "6367" 
+  "6363" -> "6355" 
+  "6373" -> "6379" 
+  "6378" -> "6372" 
+  "6330" -> "6329" 
+  "6340" -> "6339" 
+  "6347" -> "6346" 
+  "6357" -> "6356" 
+  "6364" -> "6363" 
+  "6374" -> "6373" 
+  "6379" -> "6378" 
+  "6293" -> "6300" 
+  "6293" -> "6306" 
+  "6310" -> "6317" 
+  "6310" -> "6324" 
+  "6332" -> "6330" 
+  "6342" -> "6340" 
+  "6348" -> "6353" 
+  "6351" -> "6347" 
+  "6359" -> "6357" 
+  "6365" -> "6370" 
+  "6368" -> "6364" 
+  "6376" -> "6374" 
+  "6294" -> "6293" 
+  "6298" -> "6305" 
+  "6305" -> "6382" 
+  "6311" -> "6310" 
+  "6315" -> "6322" 
+  "6322" -> "6382" 
+  "6344" -> "6342" 
+  "6350" -> "6348" 
+  "6353" -> "6351" 
+  "6361" -> "6359" 
+  "6367" -> "6365" 
+  "6370" -> "6368" 
+  "6299" -> "6298" 
+  "6316" -> "6315" 
+  "6300" -> "6302" 
+  "6302" -> "6299" 
+  "6317" -> "6319" 
+  "6319" -> "6316" 
+  "6283" -> "6289" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/12-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/12-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/12-cfg.dot	2023-06-07 19:33:45.337394696 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/12-cfg.dot	2023-06-07 19:33:51.917393996 +0330
@@ -1,63 +1,5 @@
-digraph "NormalizeJniClassDescriptor" {  
-"346" [label = <(RETURN,return result;,return result;)<SUB>277</SUB>> ]
-"289" [label = <(&lt;operator&gt;.equals,name[0] == '[')<SUB>264</SUB>> ]
-"310" [label = <(&lt;operator&gt;.notEquals,result.find('.') != std::string::npos)<SUB>272</SUB>> ]
-"290" [label = <(&lt;operator&gt;.indirectIndexAccess,name[0])<SUB>264</SUB>> ]
-"295" [label = <(&lt;operator&gt;.assignment,result = name)<SUB>265</SUB>> ]
-"311" [label = <(find,result.find('.'))<SUB>272</SUB>> ]
-"316" [label = <(&lt;operator&gt;.fieldAccess,std::string::npos)<SUB>272</SUB>> ]
-"322" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;Call to JNI FindClass with dots in name: &quot;\012 &lt;&lt; &quot;\&quot;&quot; &lt;&lt; name &lt;&lt; &quot;\&quot;&quot;)<SUB>273</SUB>> ]
-"332" [label = <(std::replace,std::replace(result.begin(), result.end(), '.', '/'))<SUB>275</SUB>> ]
-"300" [label = <(&lt;operator&gt;.assignmentPlus,result += 'L')<SUB>267</SUB>> ]
-"303" [label = <(&lt;operator&gt;.assignmentPlus,result += name)<SUB>268</SUB>> ]
-"306" [label = <(&lt;operator&gt;.assignmentPlus,result += ';')<SUB>269</SUB>> ]
-"312" [label = <(&lt;operator&gt;.fieldAccess,result.find)<SUB>272</SUB>> ]
-"317" [label = <(&lt;operator&gt;.fieldAccess,std::string)<SUB>272</SUB>> ]
-"320" [label = <(FIELD_IDENTIFIER,npos,npos)<SUB>272</SUB>> ]
-"323" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;Call to JNI FindClass with dots in name: &quot;\012 &lt;&lt; &quot;\&quot;&quot; &lt;&lt; name)<SUB>273</SUB>> ]
-"333" [label = <(&lt;operator&gt;.fieldAccess,std::replace)<SUB>275</SUB>> ]
-"336" [label = <(begin,result.begin())<SUB>275</SUB>> ]
-"340" [label = <(end,result.end())<SUB>275</SUB>> ]
-"314" [label = <(FIELD_IDENTIFIER,find,find)<SUB>272</SUB>> ]
-"324" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;Call to JNI FindClass with dots in name: &quot;\012 &lt;&lt; &quot;\&quot;&quot;)<SUB>273</SUB>> ]
-"335" [label = <(FIELD_IDENTIFIER,replace,replace)<SUB>275</SUB>> ]
-"337" [label = <(&lt;operator&gt;.fieldAccess,result.begin)<SUB>275</SUB>> ]
-"341" [label = <(&lt;operator&gt;.fieldAccess,result.end)<SUB>275</SUB>> ]
-"325" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;Call to JNI FindClass with dots in name: &quot;)<SUB>273</SUB>> ]
-"339" [label = <(FIELD_IDENTIFIER,begin,begin)<SUB>275</SUB>> ]
-"343" [label = <(FIELD_IDENTIFIER,end,end)<SUB>275</SUB>> ]
-"326" [label = <(LOG,LOG(WARNING))<SUB>273</SUB>> ]
-"284" [label = <(METHOD,NormalizeJniClassDescriptor)<SUB>261</SUB>> ]
-"348" [label = <(METHOD_RETURN,string)<SUB>261</SUB>> ]
-  "346" -> "348" 
-  "289" -> "295" 
-  "289" -> "300" 
-  "310" -> "326" 
-  "310" -> "346" 
-  "290" -> "289" 
-  "295" -> "314" 
-  "311" -> "317" 
-  "316" -> "310" 
-  "322" -> "335" 
-  "332" -> "346" 
-  "300" -> "303" 
-  "303" -> "306" 
-  "306" -> "314" 
-  "312" -> "311" 
-  "317" -> "320" 
-  "320" -> "316" 
-  "323" -> "322" 
-  "333" -> "339" 
-  "336" -> "343" 
-  "340" -> "332" 
-  "314" -> "312" 
-  "324" -> "323" 
-  "335" -> "333" 
-  "337" -> "336" 
-  "341" -> "340" 
-  "325" -> "324" 
-  "339" -> "337" 
-  "343" -> "341" 
-  "326" -> "325" 
-  "284" -> "290" 
+digraph "hs" {  
+"189" [label = <(METHOD,hs)<SUB>236</SUB>> ]
+"192" [label = <(METHOD_RETURN,StackHandleScope&lt;1&gt;)<SUB>236</SUB>> ]
+  "189" -> "192" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/120-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/120-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/120-cfg.dot	2023-06-07 19:33:45.427394687 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/120-cfg.dot	2023-06-07 19:33:51.997393988 +0330
@@ -1,65 +1,75 @@
-digraph "GetStaticFieldID" {  
-"6270" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_class))<SUB>1415</SUB>> ]
-"6288" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(name))<SUB>1416</SUB>> ]
-"6306" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(sig))<SUB>1417</SUB>> ]
-"6325" [label = <(soa,soa(env))<SUB>1418</SUB>> ]
-"6327" [label = <(RETURN,return FindFieldID(soa, java_class, name, sig, true);,return FindFieldID(soa, java_class, name, sig, true);)<SUB>1419</SUB>> ]
-"6328" [label = <(FindFieldID,FindFieldID(soa, java_class, name, sig, true))<SUB>1419</SUB>> ]
-"6274" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>1415</SUB>> ]
-"6292" [label = <(UNLIKELY,UNLIKELY((name) == nullptr))<SUB>1416</SUB>> ]
-"6310" [label = <(UNLIKELY,UNLIKELY((sig) == nullptr))<SUB>1417</SUB>> ]
-"6275" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>1415</SUB>> ]
-"6279" [label = <(CHECK_NON_NULL_ARGUMENT(java_class),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class == null&quot;))<SUB>1415</SUB>> ]
-"6286" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_class),CHECK_NON_NULL_ARGUMENT(java_class))<SUB>1415</SUB>> ]
-"6293" [label = <(&lt;operator&gt;.equals,(name) == nullptr)<SUB>1416</SUB>> ]
-"6297" [label = <(CHECK_NON_NULL_ARGUMENT(name),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;name == null&quot;))<SUB>1416</SUB>> ]
-"6304" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(name),CHECK_NON_NULL_ARGUMENT(name))<SUB>1416</SUB>> ]
-"6311" [label = <(&lt;operator&gt;.equals,(sig) == nullptr)<SUB>1417</SUB>> ]
-"6315" [label = <(CHECK_NON_NULL_ARGUMENT(sig),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;sig == null&quot;))<SUB>1417</SUB>> ]
-"6322" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(sig),CHECK_NON_NULL_ARGUMENT(sig))<SUB>1417</SUB>> ]
-"6280" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1415</SUB>> ]
-"6298" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1416</SUB>> ]
-"6316" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1417</SUB>> ]
-"6281" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1415</SUB>> ]
-"6283" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1415</SUB>> ]
-"6299" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1416</SUB>> ]
-"6301" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1416</SUB>> ]
-"6317" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1417</SUB>> ]
-"6319" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1417</SUB>> ]
-"6264" [label = <(METHOD,GetStaticFieldID)<SUB>1413</SUB>> ]
-"6334" [label = <(METHOD_RETURN,jfieldID)<SUB>1413</SUB>> ]
-  "6270" -> "6275" 
-  "6270" -> "6288" 
-  "6288" -> "6293" 
-  "6288" -> "6306" 
-  "6306" -> "6311" 
-  "6306" -> "6325" 
-  "6325" -> "6328" 
-  "6327" -> "6334" 
-  "6328" -> "6327" 
-  "6274" -> "6281" 
-  "6274" -> "6288" 
-  "6292" -> "6299" 
-  "6292" -> "6306" 
-  "6310" -> "6317" 
-  "6310" -> "6325" 
-  "6275" -> "6274" 
-  "6279" -> "6286" 
-  "6286" -> "6334" 
-  "6293" -> "6292" 
-  "6297" -> "6304" 
-  "6304" -> "6334" 
-  "6311" -> "6310" 
-  "6315" -> "6322" 
-  "6322" -> "6334" 
-  "6280" -> "6279" 
-  "6298" -> "6297" 
-  "6316" -> "6315" 
-  "6281" -> "6283" 
-  "6283" -> "6280" 
-  "6299" -> "6301" 
-  "6301" -> "6298" 
-  "6317" -> "6319" 
-  "6319" -> "6316" 
-  "6264" -> "6270" 
+digraph "SetStaticObjectField" {  
+"6390" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid))<SUB>1373</SUB>> ]
+"6408" [label = <(soa,soa(env))<SUB>1374</SUB>> ]
+"6411" [label = <(&lt;operator&gt;.assignment,* f = jni::DecodeArtField(fid))<SUB>1375</SUB>> ]
+"6418" [label = <(NotifySetObjectField,NotifySetObjectField(f, nullptr, java_value))<SUB>1376</SUB>> ]
+"6422" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; v = soa.Decode&lt;mirror::Object&gt;(java_value))<SUB>1377</SUB>> ]
+"6439" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetObject&lt;false&gt;(f-&gt;GetDeclaringClass(), v))<SUB>1378</SUB>> ]
+"6413" [label = <(jni::DecodeArtField,jni::DecodeArtField(fid))<SUB>1375</SUB>> ]
+"6423" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; v)<SUB>1377</SUB>> ]
+"6430" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(java_value))<SUB>1377</SUB>> ]
+"6440" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetObject&lt;false)<SUB>1378</SUB>> ]
+"6445" [label = <(&lt;operator&gt;.bracketedPrimary,(f-&gt;GetDeclaringClass(), v))<SUB>1378</SUB>> ]
+"6414" [label = <(&lt;operator&gt;.fieldAccess,jni::DecodeArtField)<SUB>1375</SUB>> ]
+"6424" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>1377</SUB>> ]
+"6431" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>1377</SUB>> ]
+"6441" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetObject)<SUB>1378</SUB>> ]
+"6446" [label = <(&lt;operator&gt;.expressionList,f-&gt;GetDeclaringClass(), v)<SUB>1378</SUB>> ]
+"6394" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1373</SUB>> ]
+"6416" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1375</SUB>> ]
+"6426" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1377</SUB>> ]
+"6432" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1377</SUB>> ]
+"6435" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1377</SUB>> ]
+"6443" [label = <(FIELD_IDENTIFIER,SetObject,SetObject)<SUB>1378</SUB>> ]
+"6447" [label = <(GetDeclaringClass,f-&gt;GetDeclaringClass())<SUB>1378</SUB>> ]
+"6395" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1373</SUB>> ]
+"6399" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1373</SUB>> ]
+"6406" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid))<SUB>1373</SUB>> ]
+"6428" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1377</SUB>> ]
+"6434" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1377</SUB>> ]
+"6437" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1377</SUB>> ]
+"6448" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1378</SUB>> ]
+"6400" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1373</SUB>> ]
+"6450" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1378</SUB>> ]
+"6401" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1373</SUB>> ]
+"6403" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1373</SUB>> ]
+"6384" [label = <(METHOD,SetStaticObjectField)<SUB>1372</SUB>> ]
+"6452" [label = <(METHOD_RETURN,void)<SUB>1372</SUB>> ]
+  "6390" -> "6395" 
+  "6390" -> "6408" 
+  "6408" -> "6416" 
+  "6411" -> "6418" 
+  "6418" -> "6428" 
+  "6422" -> "6443" 
+  "6439" -> "6452" 
+  "6413" -> "6411" 
+  "6423" -> "6434" 
+  "6430" -> "6422" 
+  "6440" -> "6450" 
+  "6445" -> "6439" 
+  "6414" -> "6413" 
+  "6424" -> "6423" 
+  "6431" -> "6430" 
+  "6441" -> "6440" 
+  "6446" -> "6445" 
+  "6394" -> "6401" 
+  "6394" -> "6408" 
+  "6416" -> "6414" 
+  "6426" -> "6424" 
+  "6432" -> "6437" 
+  "6435" -> "6431" 
+  "6443" -> "6441" 
+  "6447" -> "6446" 
+  "6395" -> "6394" 
+  "6399" -> "6406" 
+  "6406" -> "6452" 
+  "6428" -> "6426" 
+  "6434" -> "6432" 
+  "6437" -> "6435" 
+  "6448" -> "6447" 
+  "6400" -> "6399" 
+  "6450" -> "6448" 
+  "6401" -> "6403" 
+  "6403" -> "6400" 
+  "6384" -> "6390" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/121-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/121-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/121-cfg.dot	2023-06-07 19:33:45.427394687 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/121-cfg.dot	2023-06-07 19:33:51.997393988 +0330
@@ -1,91 +1,80 @@
-digraph "GetObjectField" {  
-"6341" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(obj))<SUB>1423</SUB>> ]
-"6359" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(fid))<SUB>1424</SUB>> ]
-"6378" [label = <(soa,soa(env))<SUB>1425</SUB>> ]
-"6381" [label = <(&lt;operator&gt;.assignment,* f = jni::DecodeArtField(fid))<SUB>1426</SUB>> ]
-"6388" [label = <(NotifyGetField,NotifyGetField(f, obj))<SUB>1427</SUB>> ]
-"6391" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; o = soa.Decode&lt;mirror::Object&gt;(obj))<SUB>1428</SUB>> ]
-"6408" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(f-&gt;GetObject(o));,return soa.AddLocalReference&lt;jobject&gt;(f-&gt;GetObject(o));)<SUB>1429</SUB>> ]
-"6383" [label = <(jni::DecodeArtField,jni::DecodeArtField(fid))<SUB>1426</SUB>> ]
-"6392" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; o)<SUB>1428</SUB>> ]
-"6399" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(obj))<SUB>1428</SUB>> ]
-"6409" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(f-&gt;GetObject(o)))<SUB>1429</SUB>> ]
-"6384" [label = <(&lt;operator&gt;.fieldAccess,jni::DecodeArtField)<SUB>1426</SUB>> ]
-"6393" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>1428</SUB>> ]
-"6400" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>1428</SUB>> ]
-"6410" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>1429</SUB>> ]
-"6415" [label = <(GetObject,f-&gt;GetObject(o))<SUB>1429</SUB>> ]
-"6345" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1423</SUB>> ]
-"6363" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1424</SUB>> ]
-"6386" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1426</SUB>> ]
-"6395" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1428</SUB>> ]
-"6401" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1428</SUB>> ]
-"6404" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1428</SUB>> ]
-"6411" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1429</SUB>> ]
-"6416" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetObject)<SUB>1429</SUB>> ]
-"6346" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1423</SUB>> ]
-"6350" [label = <(CHECK_NON_NULL_ARGUMENT(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1423</SUB>> ]
-"6357" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(obj),CHECK_NON_NULL_ARGUMENT(obj))<SUB>1423</SUB>> ]
-"6364" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1424</SUB>> ]
-"6368" [label = <(CHECK_NON_NULL_ARGUMENT(fid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1424</SUB>> ]
-"6375" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(fid),CHECK_NON_NULL_ARGUMENT(fid))<SUB>1424</SUB>> ]
-"6397" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1428</SUB>> ]
-"6403" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1428</SUB>> ]
-"6406" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1428</SUB>> ]
-"6413" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1429</SUB>> ]
-"6418" [label = <(FIELD_IDENTIFIER,GetObject,GetObject)<SUB>1429</SUB>> ]
-"6351" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1423</SUB>> ]
-"6369" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1424</SUB>> ]
-"6352" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1423</SUB>> ]
-"6354" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1423</SUB>> ]
-"6370" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1424</SUB>> ]
-"6372" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1424</SUB>> ]
-"6336" [label = <(METHOD,GetObjectField)<SUB>1422</SUB>> ]
-"6420" [label = <(METHOD_RETURN,jobject)<SUB>1422</SUB>> ]
-  "6341" -> "6346" 
-  "6341" -> "6359" 
-  "6359" -> "6364" 
-  "6359" -> "6378" 
-  "6378" -> "6386" 
-  "6381" -> "6388" 
-  "6388" -> "6397" 
-  "6391" -> "6413" 
-  "6408" -> "6420" 
-  "6383" -> "6381" 
-  "6392" -> "6403" 
-  "6399" -> "6391" 
-  "6409" -> "6408" 
-  "6384" -> "6383" 
-  "6393" -> "6392" 
-  "6400" -> "6399" 
-  "6410" -> "6418" 
-  "6415" -> "6409" 
-  "6345" -> "6352" 
-  "6345" -> "6359" 
-  "6363" -> "6370" 
-  "6363" -> "6378" 
-  "6386" -> "6384" 
-  "6395" -> "6393" 
-  "6401" -> "6406" 
-  "6404" -> "6400" 
-  "6411" -> "6410" 
-  "6416" -> "6415" 
-  "6346" -> "6345" 
-  "6350" -> "6357" 
-  "6357" -> "6420" 
-  "6364" -> "6363" 
-  "6368" -> "6375" 
-  "6375" -> "6420" 
-  "6397" -> "6395" 
-  "6403" -> "6401" 
-  "6406" -> "6404" 
-  "6413" -> "6411" 
-  "6418" -> "6416" 
-  "6351" -> "6350" 
-  "6369" -> "6368" 
-  "6352" -> "6354" 
-  "6354" -> "6351" 
-  "6370" -> "6372" 
-  "6372" -> "6369" 
-  "6336" -> "6341" 
+digraph "GetBooleanField" {  
+"6459" [label = <(GET_PRIMITIVE_FIELD,GET_PRIMITIVE_FIELD(Boolean, obj))<SUB>1414</SUB>> ]
+"6493" [label = <(soa,ScopedObjectAccess)<SUB>1414</SUB>> ]
+"6496" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1414</SUB>> ]
+"6503" [label = <(NotifyGetField,NotifyGetField(f, obj))<SUB>1414</SUB>> ]
+"6506" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1414</SUB>> ]
+"6523" [label = <(RETURN,GET_PRIMITIVE_FIELD(Boolean, obj);,GET_PRIMITIVE_FIELD(Boolean, obj);)<SUB>1414</SUB>> ]
+"6478" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1414</SUB>> ]
+"6498" [label = <(GET_PRIMITIVE_FIELD(Boolean, obj),jni::DecodeArtField(fid))<SUB>1414</SUB>> ]
+"6507" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1414</SUB>> ]
+"6514" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1414</SUB>> ]
+"6524" [label = <(GET_PRIMITIVE_FIELD(Boolean, obj),f-&gt;GetBoolean(o))<SUB>1414</SUB>> ]
+"6479" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1414</SUB>> ]
+"6483" [label = <(GET_PRIMITIVE_FIELD(Boolean, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1414</SUB>> ]
+"6490" [label = <(RETURN,GET_PRIMITIVE_FIELD(Boolean, obj),GET_PRIMITIVE_FIELD(Boolean, obj))<SUB>1414</SUB>> ]
+"6499" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Boolean, obj))<SUB>1414</SUB>> ]
+"6508" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1414</SUB>> ]
+"6515" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1414</SUB>> ]
+"6525" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetBoolean)<SUB>1414</SUB>> ]
+"6463" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1414</SUB>> ]
+"6484" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1414</SUB>> ]
+"6501" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1414</SUB>> ]
+"6510" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Boolean, obj))<SUB>1414</SUB>> ]
+"6516" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1414</SUB>> ]
+"6519" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Boolean, obj))<SUB>1414</SUB>> ]
+"6527" [label = <(FIELD_IDENTIFIER,GetBoolean,GetBoolean)<SUB>1414</SUB>> ]
+"6464" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1414</SUB>> ]
+"6468" [label = <(GET_PRIMITIVE_FIELD(Boolean, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1414</SUB>> ]
+"6475" [label = <(RETURN,GET_PRIMITIVE_FIELD(Boolean, obj),GET_PRIMITIVE_FIELD(Boolean, obj))<SUB>1414</SUB>> ]
+"6485" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1414</SUB>> ]
+"6487" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1414</SUB>> ]
+"6512" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1414</SUB>> ]
+"6518" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1414</SUB>> ]
+"6521" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1414</SUB>> ]
+"6469" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1414</SUB>> ]
+"6470" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1414</SUB>> ]
+"6472" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1414</SUB>> ]
+"6454" [label = <(METHOD,GetBooleanField)<SUB>1413</SUB>> ]
+"6529" [label = <(METHOD_RETURN,jboolean)<SUB>1413</SUB>> ]
+  "6459" -> "6464" 
+  "6459" -> "6479" 
+  "6493" -> "6501" 
+  "6496" -> "6503" 
+  "6503" -> "6512" 
+  "6506" -> "6527" 
+  "6523" -> "6529" 
+  "6478" -> "6485" 
+  "6478" -> "6493" 
+  "6498" -> "6496" 
+  "6507" -> "6518" 
+  "6514" -> "6506" 
+  "6524" -> "6523" 
+  "6479" -> "6478" 
+  "6483" -> "6490" 
+  "6490" -> "6529" 
+  "6499" -> "6498" 
+  "6508" -> "6507" 
+  "6515" -> "6514" 
+  "6525" -> "6524" 
+  "6463" -> "6470" 
+  "6463" -> "6479" 
+  "6484" -> "6483" 
+  "6501" -> "6499" 
+  "6510" -> "6508" 
+  "6516" -> "6521" 
+  "6519" -> "6515" 
+  "6527" -> "6525" 
+  "6464" -> "6463" 
+  "6468" -> "6475" 
+  "6475" -> "6529" 
+  "6485" -> "6487" 
+  "6487" -> "6484" 
+  "6512" -> "6510" 
+  "6518" -> "6516" 
+  "6521" -> "6519" 
+  "6469" -> "6468" 
+  "6470" -> "6472" 
+  "6472" -> "6469" 
+  "6454" -> "6459" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/122-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/122-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/122-cfg.dot	2023-06-07 19:33:45.427394687 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/122-cfg.dot	2023-06-07 19:33:52.007393986 +0330
@@ -1,57 +1,80 @@
-digraph "GetStaticObjectField" {  
-"6427" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(fid))<SUB>1433</SUB>> ]
-"6446" [label = <(soa,soa(env))<SUB>1434</SUB>> ]
-"6449" [label = <(&lt;operator&gt;.assignment,* f = jni::DecodeArtField(fid))<SUB>1435</SUB>> ]
-"6456" [label = <(NotifyGetField,NotifyGetField(f, nullptr))<SUB>1436</SUB>> ]
-"6459" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(f-&gt;GetObject(f-&gt;GetDeclaringClass()));,return soa.AddLocalReference&lt;jobject&gt;(f-&gt;GetObject(f-&gt;GetDeclaringClass()));)<SUB>1437</SUB>> ]
-"6451" [label = <(jni::DecodeArtField,jni::DecodeArtField(fid))<SUB>1435</SUB>> ]
-"6460" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(f-&gt;GetObject(f-&gt;GetDeclaringClass())))<SUB>1437</SUB>> ]
-"6452" [label = <(&lt;operator&gt;.fieldAccess,jni::DecodeArtField)<SUB>1435</SUB>> ]
-"6461" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>1437</SUB>> ]
-"6466" [label = <(GetObject,f-&gt;GetObject(f-&gt;GetDeclaringClass()))<SUB>1437</SUB>> ]
-"6431" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1433</SUB>> ]
-"6454" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1435</SUB>> ]
-"6462" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1437</SUB>> ]
-"6467" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetObject)<SUB>1437</SUB>> ]
-"6470" [label = <(GetDeclaringClass,f-&gt;GetDeclaringClass())<SUB>1437</SUB>> ]
-"6432" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1433</SUB>> ]
-"6436" [label = <(CHECK_NON_NULL_ARGUMENT(fid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1433</SUB>> ]
-"6443" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(fid),CHECK_NON_NULL_ARGUMENT(fid))<SUB>1433</SUB>> ]
-"6464" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1437</SUB>> ]
-"6469" [label = <(FIELD_IDENTIFIER,GetObject,GetObject)<SUB>1437</SUB>> ]
-"6471" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1437</SUB>> ]
-"6437" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1433</SUB>> ]
-"6473" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1437</SUB>> ]
-"6438" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1433</SUB>> ]
-"6440" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1433</SUB>> ]
-"6422" [label = <(METHOD,GetStaticObjectField)<SUB>1432</SUB>> ]
-"6474" [label = <(METHOD_RETURN,jobject)<SUB>1432</SUB>> ]
-  "6427" -> "6432" 
-  "6427" -> "6446" 
-  "6446" -> "6454" 
-  "6449" -> "6456" 
-  "6456" -> "6464" 
-  "6459" -> "6474" 
-  "6451" -> "6449" 
-  "6460" -> "6459" 
-  "6452" -> "6451" 
-  "6461" -> "6469" 
-  "6466" -> "6460" 
-  "6431" -> "6438" 
-  "6431" -> "6446" 
-  "6454" -> "6452" 
-  "6462" -> "6461" 
-  "6467" -> "6473" 
-  "6470" -> "6466" 
-  "6432" -> "6431" 
-  "6436" -> "6443" 
-  "6443" -> "6474" 
-  "6464" -> "6462" 
-  "6469" -> "6467" 
-  "6471" -> "6470" 
-  "6437" -> "6436" 
-  "6473" -> "6471" 
-  "6438" -> "6440" 
-  "6440" -> "6437" 
-  "6422" -> "6427" 
+digraph "GetByteField" {  
+"6536" [label = <(GET_PRIMITIVE_FIELD,GET_PRIMITIVE_FIELD(Byte, obj))<SUB>1418</SUB>> ]
+"6570" [label = <(soa,ScopedObjectAccess)<SUB>1418</SUB>> ]
+"6573" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1418</SUB>> ]
+"6580" [label = <(NotifyGetField,NotifyGetField(f, obj))<SUB>1418</SUB>> ]
+"6583" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1418</SUB>> ]
+"6600" [label = <(RETURN,GET_PRIMITIVE_FIELD(Byte, obj);,GET_PRIMITIVE_FIELD(Byte, obj);)<SUB>1418</SUB>> ]
+"6555" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1418</SUB>> ]
+"6575" [label = <(GET_PRIMITIVE_FIELD(Byte, obj),jni::DecodeArtField(fid))<SUB>1418</SUB>> ]
+"6584" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1418</SUB>> ]
+"6591" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1418</SUB>> ]
+"6601" [label = <(GET_PRIMITIVE_FIELD(Byte, obj),f-&gt;GetByte(o))<SUB>1418</SUB>> ]
+"6556" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1418</SUB>> ]
+"6560" [label = <(GET_PRIMITIVE_FIELD(Byte, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1418</SUB>> ]
+"6567" [label = <(RETURN,GET_PRIMITIVE_FIELD(Byte, obj),GET_PRIMITIVE_FIELD(Byte, obj))<SUB>1418</SUB>> ]
+"6576" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Byte, obj))<SUB>1418</SUB>> ]
+"6585" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1418</SUB>> ]
+"6592" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1418</SUB>> ]
+"6602" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetByte)<SUB>1418</SUB>> ]
+"6540" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1418</SUB>> ]
+"6561" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1418</SUB>> ]
+"6578" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1418</SUB>> ]
+"6587" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Byte, obj))<SUB>1418</SUB>> ]
+"6593" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1418</SUB>> ]
+"6596" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Byte, obj))<SUB>1418</SUB>> ]
+"6604" [label = <(FIELD_IDENTIFIER,GetByte,GetByte)<SUB>1418</SUB>> ]
+"6541" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1418</SUB>> ]
+"6545" [label = <(GET_PRIMITIVE_FIELD(Byte, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1418</SUB>> ]
+"6552" [label = <(RETURN,GET_PRIMITIVE_FIELD(Byte, obj),GET_PRIMITIVE_FIELD(Byte, obj))<SUB>1418</SUB>> ]
+"6562" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1418</SUB>> ]
+"6564" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1418</SUB>> ]
+"6589" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1418</SUB>> ]
+"6595" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1418</SUB>> ]
+"6598" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1418</SUB>> ]
+"6546" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1418</SUB>> ]
+"6547" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1418</SUB>> ]
+"6549" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1418</SUB>> ]
+"6531" [label = <(METHOD,GetByteField)<SUB>1417</SUB>> ]
+"6606" [label = <(METHOD_RETURN,jbyte)<SUB>1417</SUB>> ]
+  "6536" -> "6541" 
+  "6536" -> "6556" 
+  "6570" -> "6578" 
+  "6573" -> "6580" 
+  "6580" -> "6589" 
+  "6583" -> "6604" 
+  "6600" -> "6606" 
+  "6555" -> "6562" 
+  "6555" -> "6570" 
+  "6575" -> "6573" 
+  "6584" -> "6595" 
+  "6591" -> "6583" 
+  "6601" -> "6600" 
+  "6556" -> "6555" 
+  "6560" -> "6567" 
+  "6567" -> "6606" 
+  "6576" -> "6575" 
+  "6585" -> "6584" 
+  "6592" -> "6591" 
+  "6602" -> "6601" 
+  "6540" -> "6547" 
+  "6540" -> "6556" 
+  "6561" -> "6560" 
+  "6578" -> "6576" 
+  "6587" -> "6585" 
+  "6593" -> "6598" 
+  "6596" -> "6592" 
+  "6604" -> "6602" 
+  "6541" -> "6540" 
+  "6545" -> "6552" 
+  "6552" -> "6606" 
+  "6562" -> "6564" 
+  "6564" -> "6561" 
+  "6589" -> "6587" 
+  "6595" -> "6593" 
+  "6598" -> "6596" 
+  "6546" -> "6545" 
+  "6547" -> "6549" 
+  "6549" -> "6546" 
+  "6531" -> "6536" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/123-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/123-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/123-cfg.dot	2023-06-07 19:33:45.427394687 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/123-cfg.dot	2023-06-07 19:33:52.007393986 +0330
@@ -1,109 +1,80 @@
-digraph "SetObjectField" {  
-"6482" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_object))<SUB>1441</SUB>> ]
-"6499" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid))<SUB>1442</SUB>> ]
-"6517" [label = <(soa,soa(env))<SUB>1443</SUB>> ]
-"6520" [label = <(&lt;operator&gt;.assignment,* f = jni::DecodeArtField(fid))<SUB>1444</SUB>> ]
-"6527" [label = <(NotifySetObjectField,NotifySetObjectField(f, java_object, java_value))<SUB>1445</SUB>> ]
-"6531" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; o = soa.Decode&lt;mirror::Object&gt;(java_object))<SUB>1446</SUB>> ]
-"6548" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; v = soa.Decode&lt;mirror::Object&gt;(java_value))<SUB>1447</SUB>> ]
-"6565" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetObject&lt;false&gt;(o, v))<SUB>1448</SUB>> ]
-"6522" [label = <(jni::DecodeArtField,jni::DecodeArtField(fid))<SUB>1444</SUB>> ]
-"6532" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; o)<SUB>1446</SUB>> ]
-"6539" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(java_object))<SUB>1446</SUB>> ]
-"6549" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; v)<SUB>1447</SUB>> ]
-"6556" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(java_value))<SUB>1447</SUB>> ]
-"6566" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetObject&lt;false)<SUB>1448</SUB>> ]
-"6571" [label = <(&lt;operator&gt;.bracketedPrimary,(o, v))<SUB>1448</SUB>> ]
-"6523" [label = <(&lt;operator&gt;.fieldAccess,jni::DecodeArtField)<SUB>1444</SUB>> ]
-"6533" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>1446</SUB>> ]
-"6540" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>1446</SUB>> ]
-"6550" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>1447</SUB>> ]
-"6557" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>1447</SUB>> ]
-"6567" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetObject)<SUB>1448</SUB>> ]
-"6572" [label = <(&lt;operator&gt;.expressionList,o, v)<SUB>1448</SUB>> ]
-"6486" [label = <(UNLIKELY,UNLIKELY((java_object) == nullptr))<SUB>1441</SUB>> ]
-"6503" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1442</SUB>> ]
-"6525" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1444</SUB>> ]
-"6535" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1446</SUB>> ]
-"6541" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1446</SUB>> ]
-"6544" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1446</SUB>> ]
-"6552" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1447</SUB>> ]
-"6558" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1447</SUB>> ]
-"6561" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1447</SUB>> ]
-"6569" [label = <(FIELD_IDENTIFIER,SetObject,SetObject)<SUB>1448</SUB>> ]
-"6487" [label = <(&lt;operator&gt;.equals,(java_object) == nullptr)<SUB>1441</SUB>> ]
-"6491" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_object),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_object == null&quot;))<SUB>1441</SUB>> ]
-"6498" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_object),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_object))<SUB>1441</SUB>> ]
-"6504" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1442</SUB>> ]
-"6508" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1442</SUB>> ]
-"6515" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid))<SUB>1442</SUB>> ]
-"6537" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1446</SUB>> ]
-"6543" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1446</SUB>> ]
-"6546" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1446</SUB>> ]
-"6554" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1447</SUB>> ]
-"6560" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1447</SUB>> ]
-"6563" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1447</SUB>> ]
-"6492" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1441</SUB>> ]
-"6509" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1442</SUB>> ]
-"6493" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1441</SUB>> ]
-"6495" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1441</SUB>> ]
-"6510" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1442</SUB>> ]
-"6512" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1442</SUB>> ]
-"6476" [label = <(METHOD,SetObjectField)<SUB>1440</SUB>> ]
-"6575" [label = <(METHOD_RETURN,void)<SUB>1440</SUB>> ]
-  "6482" -> "6487" 
-  "6482" -> "6499" 
-  "6499" -> "6504" 
-  "6499" -> "6517" 
-  "6517" -> "6525" 
-  "6520" -> "6527" 
-  "6527" -> "6537" 
-  "6531" -> "6554" 
-  "6548" -> "6569" 
-  "6565" -> "6575" 
-  "6522" -> "6520" 
-  "6532" -> "6543" 
-  "6539" -> "6531" 
-  "6549" -> "6560" 
-  "6556" -> "6548" 
-  "6566" -> "6572" 
-  "6571" -> "6565" 
-  "6523" -> "6522" 
-  "6533" -> "6532" 
-  "6540" -> "6539" 
-  "6550" -> "6549" 
-  "6557" -> "6556" 
-  "6567" -> "6566" 
-  "6572" -> "6571" 
-  "6486" -> "6493" 
-  "6486" -> "6499" 
-  "6503" -> "6510" 
-  "6503" -> "6517" 
-  "6525" -> "6523" 
-  "6535" -> "6533" 
-  "6541" -> "6546" 
-  "6544" -> "6540" 
-  "6552" -> "6550" 
-  "6558" -> "6563" 
-  "6561" -> "6557" 
-  "6569" -> "6567" 
-  "6487" -> "6486" 
-  "6491" -> "6498" 
-  "6498" -> "6575" 
-  "6504" -> "6503" 
-  "6508" -> "6515" 
-  "6515" -> "6575" 
-  "6537" -> "6535" 
-  "6543" -> "6541" 
-  "6546" -> "6544" 
-  "6554" -> "6552" 
-  "6560" -> "6558" 
-  "6563" -> "6561" 
-  "6492" -> "6491" 
-  "6509" -> "6508" 
-  "6493" -> "6495" 
-  "6495" -> "6492" 
-  "6510" -> "6512" 
-  "6512" -> "6509" 
-  "6476" -> "6482" 
+digraph "GetCharField" {  
+"6613" [label = <(GET_PRIMITIVE_FIELD,GET_PRIMITIVE_FIELD(Char, obj))<SUB>1422</SUB>> ]
+"6647" [label = <(soa,ScopedObjectAccess)<SUB>1422</SUB>> ]
+"6650" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1422</SUB>> ]
+"6657" [label = <(NotifyGetField,NotifyGetField(f, obj))<SUB>1422</SUB>> ]
+"6660" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1422</SUB>> ]
+"6677" [label = <(RETURN,GET_PRIMITIVE_FIELD(Char, obj);,GET_PRIMITIVE_FIELD(Char, obj);)<SUB>1422</SUB>> ]
+"6632" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1422</SUB>> ]
+"6652" [label = <(GET_PRIMITIVE_FIELD(Char, obj),jni::DecodeArtField(fid))<SUB>1422</SUB>> ]
+"6661" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1422</SUB>> ]
+"6668" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1422</SUB>> ]
+"6678" [label = <(GET_PRIMITIVE_FIELD(Char, obj),f-&gt;GetChar(o))<SUB>1422</SUB>> ]
+"6633" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1422</SUB>> ]
+"6637" [label = <(GET_PRIMITIVE_FIELD(Char, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1422</SUB>> ]
+"6644" [label = <(RETURN,GET_PRIMITIVE_FIELD(Char, obj),GET_PRIMITIVE_FIELD(Char, obj))<SUB>1422</SUB>> ]
+"6653" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Char, obj))<SUB>1422</SUB>> ]
+"6662" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1422</SUB>> ]
+"6669" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1422</SUB>> ]
+"6679" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetChar)<SUB>1422</SUB>> ]
+"6617" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1422</SUB>> ]
+"6638" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1422</SUB>> ]
+"6655" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1422</SUB>> ]
+"6664" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Char, obj))<SUB>1422</SUB>> ]
+"6670" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1422</SUB>> ]
+"6673" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Char, obj))<SUB>1422</SUB>> ]
+"6681" [label = <(FIELD_IDENTIFIER,GetChar,GetChar)<SUB>1422</SUB>> ]
+"6618" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1422</SUB>> ]
+"6622" [label = <(GET_PRIMITIVE_FIELD(Char, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1422</SUB>> ]
+"6629" [label = <(RETURN,GET_PRIMITIVE_FIELD(Char, obj),GET_PRIMITIVE_FIELD(Char, obj))<SUB>1422</SUB>> ]
+"6639" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1422</SUB>> ]
+"6641" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1422</SUB>> ]
+"6666" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1422</SUB>> ]
+"6672" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1422</SUB>> ]
+"6675" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1422</SUB>> ]
+"6623" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1422</SUB>> ]
+"6624" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1422</SUB>> ]
+"6626" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1422</SUB>> ]
+"6608" [label = <(METHOD,GetCharField)<SUB>1421</SUB>> ]
+"6683" [label = <(METHOD_RETURN,jchar)<SUB>1421</SUB>> ]
+  "6613" -> "6618" 
+  "6613" -> "6633" 
+  "6647" -> "6655" 
+  "6650" -> "6657" 
+  "6657" -> "6666" 
+  "6660" -> "6681" 
+  "6677" -> "6683" 
+  "6632" -> "6639" 
+  "6632" -> "6647" 
+  "6652" -> "6650" 
+  "6661" -> "6672" 
+  "6668" -> "6660" 
+  "6678" -> "6677" 
+  "6633" -> "6632" 
+  "6637" -> "6644" 
+  "6644" -> "6683" 
+  "6653" -> "6652" 
+  "6662" -> "6661" 
+  "6669" -> "6668" 
+  "6679" -> "6678" 
+  "6617" -> "6624" 
+  "6617" -> "6633" 
+  "6638" -> "6637" 
+  "6655" -> "6653" 
+  "6664" -> "6662" 
+  "6670" -> "6675" 
+  "6673" -> "6669" 
+  "6681" -> "6679" 
+  "6618" -> "6617" 
+  "6622" -> "6629" 
+  "6629" -> "6683" 
+  "6639" -> "6641" 
+  "6641" -> "6638" 
+  "6666" -> "6664" 
+  "6672" -> "6670" 
+  "6675" -> "6673" 
+  "6623" -> "6622" 
+  "6624" -> "6626" 
+  "6626" -> "6623" 
+  "6608" -> "6613" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/124-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/124-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/124-cfg.dot	2023-06-07 19:33:45.427394687 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/124-cfg.dot	2023-06-07 19:33:52.007393986 +0330
@@ -1,75 +1,80 @@
-digraph "SetStaticObjectField" {  
-"6583" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid))<SUB>1452</SUB>> ]
-"6601" [label = <(soa,soa(env))<SUB>1453</SUB>> ]
-"6604" [label = <(&lt;operator&gt;.assignment,* f = jni::DecodeArtField(fid))<SUB>1454</SUB>> ]
-"6611" [label = <(NotifySetObjectField,NotifySetObjectField(f, nullptr, java_value))<SUB>1455</SUB>> ]
-"6615" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; v = soa.Decode&lt;mirror::Object&gt;(java_value))<SUB>1456</SUB>> ]
-"6632" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetObject&lt;false&gt;(f-&gt;GetDeclaringClass(), v))<SUB>1457</SUB>> ]
-"6606" [label = <(jni::DecodeArtField,jni::DecodeArtField(fid))<SUB>1454</SUB>> ]
-"6616" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; v)<SUB>1456</SUB>> ]
-"6623" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(java_value))<SUB>1456</SUB>> ]
-"6633" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetObject&lt;false)<SUB>1457</SUB>> ]
-"6638" [label = <(&lt;operator&gt;.bracketedPrimary,(f-&gt;GetDeclaringClass(), v))<SUB>1457</SUB>> ]
-"6607" [label = <(&lt;operator&gt;.fieldAccess,jni::DecodeArtField)<SUB>1454</SUB>> ]
-"6617" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>1456</SUB>> ]
-"6624" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>1456</SUB>> ]
-"6634" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetObject)<SUB>1457</SUB>> ]
-"6639" [label = <(&lt;operator&gt;.expressionList,f-&gt;GetDeclaringClass(), v)<SUB>1457</SUB>> ]
-"6587" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1452</SUB>> ]
-"6609" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1454</SUB>> ]
-"6619" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1456</SUB>> ]
-"6625" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1456</SUB>> ]
-"6628" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1456</SUB>> ]
-"6636" [label = <(FIELD_IDENTIFIER,SetObject,SetObject)<SUB>1457</SUB>> ]
-"6640" [label = <(GetDeclaringClass,f-&gt;GetDeclaringClass())<SUB>1457</SUB>> ]
-"6588" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1452</SUB>> ]
-"6592" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1452</SUB>> ]
-"6599" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid))<SUB>1452</SUB>> ]
-"6621" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1456</SUB>> ]
-"6627" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1456</SUB>> ]
-"6630" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1456</SUB>> ]
-"6641" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1457</SUB>> ]
-"6593" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1452</SUB>> ]
-"6643" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1457</SUB>> ]
-"6594" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1452</SUB>> ]
-"6596" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1452</SUB>> ]
-"6577" [label = <(METHOD,SetStaticObjectField)<SUB>1451</SUB>> ]
-"6645" [label = <(METHOD_RETURN,void)<SUB>1451</SUB>> ]
-  "6583" -> "6588" 
-  "6583" -> "6601" 
-  "6601" -> "6609" 
-  "6604" -> "6611" 
-  "6611" -> "6621" 
-  "6615" -> "6636" 
-  "6632" -> "6645" 
-  "6606" -> "6604" 
-  "6616" -> "6627" 
-  "6623" -> "6615" 
-  "6633" -> "6643" 
-  "6638" -> "6632" 
-  "6607" -> "6606" 
-  "6617" -> "6616" 
-  "6624" -> "6623" 
-  "6634" -> "6633" 
-  "6639" -> "6638" 
-  "6587" -> "6594" 
-  "6587" -> "6601" 
-  "6609" -> "6607" 
-  "6619" -> "6617" 
-  "6625" -> "6630" 
-  "6628" -> "6624" 
-  "6636" -> "6634" 
-  "6640" -> "6639" 
-  "6588" -> "6587" 
-  "6592" -> "6599" 
-  "6599" -> "6645" 
-  "6621" -> "6619" 
-  "6627" -> "6625" 
-  "6630" -> "6628" 
-  "6641" -> "6640" 
-  "6593" -> "6592" 
-  "6643" -> "6641" 
-  "6594" -> "6596" 
-  "6596" -> "6593" 
-  "6577" -> "6583" 
+digraph "GetShortField" {  
+"6690" [label = <(GET_PRIMITIVE_FIELD,GET_PRIMITIVE_FIELD(Short, obj))<SUB>1426</SUB>> ]
+"6724" [label = <(soa,ScopedObjectAccess)<SUB>1426</SUB>> ]
+"6727" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1426</SUB>> ]
+"6734" [label = <(NotifyGetField,NotifyGetField(f, obj))<SUB>1426</SUB>> ]
+"6737" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1426</SUB>> ]
+"6754" [label = <(RETURN,GET_PRIMITIVE_FIELD(Short, obj);,GET_PRIMITIVE_FIELD(Short, obj);)<SUB>1426</SUB>> ]
+"6709" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1426</SUB>> ]
+"6729" [label = <(GET_PRIMITIVE_FIELD(Short, obj),jni::DecodeArtField(fid))<SUB>1426</SUB>> ]
+"6738" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1426</SUB>> ]
+"6745" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1426</SUB>> ]
+"6755" [label = <(GET_PRIMITIVE_FIELD(Short, obj),f-&gt;GetShort(o))<SUB>1426</SUB>> ]
+"6710" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1426</SUB>> ]
+"6714" [label = <(GET_PRIMITIVE_FIELD(Short, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1426</SUB>> ]
+"6721" [label = <(RETURN,GET_PRIMITIVE_FIELD(Short, obj),GET_PRIMITIVE_FIELD(Short, obj))<SUB>1426</SUB>> ]
+"6730" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Short, obj))<SUB>1426</SUB>> ]
+"6739" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1426</SUB>> ]
+"6746" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1426</SUB>> ]
+"6756" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetShort)<SUB>1426</SUB>> ]
+"6694" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1426</SUB>> ]
+"6715" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1426</SUB>> ]
+"6732" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1426</SUB>> ]
+"6741" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Short, obj))<SUB>1426</SUB>> ]
+"6747" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1426</SUB>> ]
+"6750" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Short, obj))<SUB>1426</SUB>> ]
+"6758" [label = <(FIELD_IDENTIFIER,GetShort,GetShort)<SUB>1426</SUB>> ]
+"6695" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1426</SUB>> ]
+"6699" [label = <(GET_PRIMITIVE_FIELD(Short, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1426</SUB>> ]
+"6706" [label = <(RETURN,GET_PRIMITIVE_FIELD(Short, obj),GET_PRIMITIVE_FIELD(Short, obj))<SUB>1426</SUB>> ]
+"6716" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1426</SUB>> ]
+"6718" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1426</SUB>> ]
+"6743" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1426</SUB>> ]
+"6749" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1426</SUB>> ]
+"6752" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1426</SUB>> ]
+"6700" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1426</SUB>> ]
+"6701" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1426</SUB>> ]
+"6703" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1426</SUB>> ]
+"6685" [label = <(METHOD,GetShortField)<SUB>1425</SUB>> ]
+"6760" [label = <(METHOD_RETURN,jshort)<SUB>1425</SUB>> ]
+  "6690" -> "6695" 
+  "6690" -> "6710" 
+  "6724" -> "6732" 
+  "6727" -> "6734" 
+  "6734" -> "6743" 
+  "6737" -> "6758" 
+  "6754" -> "6760" 
+  "6709" -> "6716" 
+  "6709" -> "6724" 
+  "6729" -> "6727" 
+  "6738" -> "6749" 
+  "6745" -> "6737" 
+  "6755" -> "6754" 
+  "6710" -> "6709" 
+  "6714" -> "6721" 
+  "6721" -> "6760" 
+  "6730" -> "6729" 
+  "6739" -> "6738" 
+  "6746" -> "6745" 
+  "6756" -> "6755" 
+  "6694" -> "6701" 
+  "6694" -> "6710" 
+  "6715" -> "6714" 
+  "6732" -> "6730" 
+  "6741" -> "6739" 
+  "6747" -> "6752" 
+  "6750" -> "6746" 
+  "6758" -> "6756" 
+  "6695" -> "6694" 
+  "6699" -> "6706" 
+  "6706" -> "6760" 
+  "6716" -> "6718" 
+  "6718" -> "6715" 
+  "6743" -> "6741" 
+  "6749" -> "6747" 
+  "6752" -> "6750" 
+  "6700" -> "6699" 
+  "6701" -> "6703" 
+  "6703" -> "6700" 
+  "6685" -> "6690" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/125-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/125-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/125-cfg.dot	2023-06-07 19:33:45.427394687 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/125-cfg.dot	2023-06-07 19:33:52.007393986 +0330
@@ -1,80 +1,80 @@
-digraph "GetBooleanField" {  
-"6652" [label = <(GET_PRIMITIVE_FIELD,GET_PRIMITIVE_FIELD(Boolean, obj))<SUB>1493</SUB>> ]
-"6686" [label = <(soa,ScopedObjectAccess)<SUB>1493</SUB>> ]
-"6689" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1493</SUB>> ]
-"6696" [label = <(NotifyGetField,NotifyGetField(f, obj))<SUB>1493</SUB>> ]
-"6699" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1493</SUB>> ]
-"6716" [label = <(RETURN,GET_PRIMITIVE_FIELD(Boolean, obj);,GET_PRIMITIVE_FIELD(Boolean, obj);)<SUB>1493</SUB>> ]
-"6671" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1493</SUB>> ]
-"6691" [label = <(GET_PRIMITIVE_FIELD(Boolean, obj),jni::DecodeArtField(fid))<SUB>1493</SUB>> ]
-"6700" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1493</SUB>> ]
-"6707" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1493</SUB>> ]
-"6717" [label = <(GET_PRIMITIVE_FIELD(Boolean, obj),f-&gt;GetBoolean(o))<SUB>1493</SUB>> ]
-"6672" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1493</SUB>> ]
-"6676" [label = <(GET_PRIMITIVE_FIELD(Boolean, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1493</SUB>> ]
-"6683" [label = <(RETURN,GET_PRIMITIVE_FIELD(Boolean, obj),GET_PRIMITIVE_FIELD(Boolean, obj))<SUB>1493</SUB>> ]
-"6692" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Boolean, obj))<SUB>1493</SUB>> ]
-"6701" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1493</SUB>> ]
-"6708" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1493</SUB>> ]
-"6718" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetBoolean)<SUB>1493</SUB>> ]
-"6656" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1493</SUB>> ]
-"6677" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1493</SUB>> ]
-"6694" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1493</SUB>> ]
-"6703" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Boolean, obj))<SUB>1493</SUB>> ]
-"6709" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1493</SUB>> ]
-"6712" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Boolean, obj))<SUB>1493</SUB>> ]
-"6720" [label = <(FIELD_IDENTIFIER,GetBoolean,GetBoolean)<SUB>1493</SUB>> ]
-"6657" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1493</SUB>> ]
-"6661" [label = <(GET_PRIMITIVE_FIELD(Boolean, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1493</SUB>> ]
-"6668" [label = <(RETURN,GET_PRIMITIVE_FIELD(Boolean, obj),GET_PRIMITIVE_FIELD(Boolean, obj))<SUB>1493</SUB>> ]
-"6678" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1493</SUB>> ]
-"6680" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1493</SUB>> ]
-"6705" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1493</SUB>> ]
-"6711" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1493</SUB>> ]
-"6714" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1493</SUB>> ]
-"6662" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1493</SUB>> ]
-"6663" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1493</SUB>> ]
-"6665" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1493</SUB>> ]
-"6647" [label = <(METHOD,GetBooleanField)<SUB>1492</SUB>> ]
-"6722" [label = <(METHOD_RETURN,jboolean)<SUB>1492</SUB>> ]
-  "6652" -> "6657" 
-  "6652" -> "6672" 
-  "6686" -> "6694" 
-  "6689" -> "6696" 
-  "6696" -> "6705" 
-  "6699" -> "6720" 
-  "6716" -> "6722" 
-  "6671" -> "6678" 
-  "6671" -> "6686" 
-  "6691" -> "6689" 
-  "6700" -> "6711" 
-  "6707" -> "6699" 
-  "6717" -> "6716" 
-  "6672" -> "6671" 
-  "6676" -> "6683" 
-  "6683" -> "6722" 
-  "6692" -> "6691" 
-  "6701" -> "6700" 
-  "6708" -> "6707" 
-  "6718" -> "6717" 
-  "6656" -> "6663" 
-  "6656" -> "6672" 
-  "6677" -> "6676" 
-  "6694" -> "6692" 
-  "6703" -> "6701" 
-  "6709" -> "6714" 
-  "6712" -> "6708" 
-  "6720" -> "6718" 
-  "6657" -> "6656" 
-  "6661" -> "6668" 
-  "6668" -> "6722" 
-  "6678" -> "6680" 
-  "6680" -> "6677" 
-  "6705" -> "6703" 
-  "6711" -> "6709" 
-  "6714" -> "6712" 
-  "6662" -> "6661" 
-  "6663" -> "6665" 
-  "6665" -> "6662" 
-  "6647" -> "6652" 
+digraph "GetIntField" {  
+"6767" [label = <(GET_PRIMITIVE_FIELD,GET_PRIMITIVE_FIELD(Int, obj))<SUB>1430</SUB>> ]
+"6801" [label = <(soa,ScopedObjectAccess)<SUB>1430</SUB>> ]
+"6804" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1430</SUB>> ]
+"6811" [label = <(NotifyGetField,NotifyGetField(f, obj))<SUB>1430</SUB>> ]
+"6814" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1430</SUB>> ]
+"6831" [label = <(RETURN,GET_PRIMITIVE_FIELD(Int, obj);,GET_PRIMITIVE_FIELD(Int, obj);)<SUB>1430</SUB>> ]
+"6786" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1430</SUB>> ]
+"6806" [label = <(GET_PRIMITIVE_FIELD(Int, obj),jni::DecodeArtField(fid))<SUB>1430</SUB>> ]
+"6815" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1430</SUB>> ]
+"6822" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1430</SUB>> ]
+"6832" [label = <(GET_PRIMITIVE_FIELD(Int, obj),f-&gt;GetInt(o))<SUB>1430</SUB>> ]
+"6787" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1430</SUB>> ]
+"6791" [label = <(GET_PRIMITIVE_FIELD(Int, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1430</SUB>> ]
+"6798" [label = <(RETURN,GET_PRIMITIVE_FIELD(Int, obj),GET_PRIMITIVE_FIELD(Int, obj))<SUB>1430</SUB>> ]
+"6807" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Int, obj))<SUB>1430</SUB>> ]
+"6816" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1430</SUB>> ]
+"6823" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1430</SUB>> ]
+"6833" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetInt)<SUB>1430</SUB>> ]
+"6771" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1430</SUB>> ]
+"6792" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1430</SUB>> ]
+"6809" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1430</SUB>> ]
+"6818" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Int, obj))<SUB>1430</SUB>> ]
+"6824" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1430</SUB>> ]
+"6827" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Int, obj))<SUB>1430</SUB>> ]
+"6835" [label = <(FIELD_IDENTIFIER,GetInt,GetInt)<SUB>1430</SUB>> ]
+"6772" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1430</SUB>> ]
+"6776" [label = <(GET_PRIMITIVE_FIELD(Int, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1430</SUB>> ]
+"6783" [label = <(RETURN,GET_PRIMITIVE_FIELD(Int, obj),GET_PRIMITIVE_FIELD(Int, obj))<SUB>1430</SUB>> ]
+"6793" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1430</SUB>> ]
+"6795" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1430</SUB>> ]
+"6820" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1430</SUB>> ]
+"6826" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1430</SUB>> ]
+"6829" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1430</SUB>> ]
+"6777" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1430</SUB>> ]
+"6778" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1430</SUB>> ]
+"6780" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1430</SUB>> ]
+"6762" [label = <(METHOD,GetIntField)<SUB>1429</SUB>> ]
+"6837" [label = <(METHOD_RETURN,jint)<SUB>1429</SUB>> ]
+  "6767" -> "6772" 
+  "6767" -> "6787" 
+  "6801" -> "6809" 
+  "6804" -> "6811" 
+  "6811" -> "6820" 
+  "6814" -> "6835" 
+  "6831" -> "6837" 
+  "6786" -> "6793" 
+  "6786" -> "6801" 
+  "6806" -> "6804" 
+  "6815" -> "6826" 
+  "6822" -> "6814" 
+  "6832" -> "6831" 
+  "6787" -> "6786" 
+  "6791" -> "6798" 
+  "6798" -> "6837" 
+  "6807" -> "6806" 
+  "6816" -> "6815" 
+  "6823" -> "6822" 
+  "6833" -> "6832" 
+  "6771" -> "6778" 
+  "6771" -> "6787" 
+  "6792" -> "6791" 
+  "6809" -> "6807" 
+  "6818" -> "6816" 
+  "6824" -> "6829" 
+  "6827" -> "6823" 
+  "6835" -> "6833" 
+  "6772" -> "6771" 
+  "6776" -> "6783" 
+  "6783" -> "6837" 
+  "6793" -> "6795" 
+  "6795" -> "6792" 
+  "6820" -> "6818" 
+  "6826" -> "6824" 
+  "6829" -> "6827" 
+  "6777" -> "6776" 
+  "6778" -> "6780" 
+  "6780" -> "6777" 
+  "6762" -> "6767" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/126-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/126-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/126-cfg.dot	2023-06-07 19:33:45.427394687 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/126-cfg.dot	2023-06-07 19:33:52.007393986 +0330
@@ -1,80 +1,80 @@
-digraph "GetByteField" {  
-"6729" [label = <(GET_PRIMITIVE_FIELD,GET_PRIMITIVE_FIELD(Byte, obj))<SUB>1497</SUB>> ]
-"6763" [label = <(soa,ScopedObjectAccess)<SUB>1497</SUB>> ]
-"6766" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1497</SUB>> ]
-"6773" [label = <(NotifyGetField,NotifyGetField(f, obj))<SUB>1497</SUB>> ]
-"6776" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1497</SUB>> ]
-"6793" [label = <(RETURN,GET_PRIMITIVE_FIELD(Byte, obj);,GET_PRIMITIVE_FIELD(Byte, obj);)<SUB>1497</SUB>> ]
-"6748" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1497</SUB>> ]
-"6768" [label = <(GET_PRIMITIVE_FIELD(Byte, obj),jni::DecodeArtField(fid))<SUB>1497</SUB>> ]
-"6777" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1497</SUB>> ]
-"6784" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1497</SUB>> ]
-"6794" [label = <(GET_PRIMITIVE_FIELD(Byte, obj),f-&gt;GetByte(o))<SUB>1497</SUB>> ]
-"6749" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1497</SUB>> ]
-"6753" [label = <(GET_PRIMITIVE_FIELD(Byte, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1497</SUB>> ]
-"6760" [label = <(RETURN,GET_PRIMITIVE_FIELD(Byte, obj),GET_PRIMITIVE_FIELD(Byte, obj))<SUB>1497</SUB>> ]
-"6769" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Byte, obj))<SUB>1497</SUB>> ]
-"6778" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1497</SUB>> ]
-"6785" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1497</SUB>> ]
-"6795" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetByte)<SUB>1497</SUB>> ]
-"6733" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1497</SUB>> ]
-"6754" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1497</SUB>> ]
-"6771" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1497</SUB>> ]
-"6780" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Byte, obj))<SUB>1497</SUB>> ]
-"6786" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1497</SUB>> ]
-"6789" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Byte, obj))<SUB>1497</SUB>> ]
-"6797" [label = <(FIELD_IDENTIFIER,GetByte,GetByte)<SUB>1497</SUB>> ]
-"6734" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1497</SUB>> ]
-"6738" [label = <(GET_PRIMITIVE_FIELD(Byte, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1497</SUB>> ]
-"6745" [label = <(RETURN,GET_PRIMITIVE_FIELD(Byte, obj),GET_PRIMITIVE_FIELD(Byte, obj))<SUB>1497</SUB>> ]
-"6755" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1497</SUB>> ]
-"6757" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1497</SUB>> ]
-"6782" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1497</SUB>> ]
-"6788" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1497</SUB>> ]
-"6791" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1497</SUB>> ]
-"6739" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1497</SUB>> ]
-"6740" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1497</SUB>> ]
-"6742" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1497</SUB>> ]
-"6724" [label = <(METHOD,GetByteField)<SUB>1496</SUB>> ]
-"6799" [label = <(METHOD_RETURN,jbyte)<SUB>1496</SUB>> ]
-  "6729" -> "6734" 
-  "6729" -> "6749" 
-  "6763" -> "6771" 
-  "6766" -> "6773" 
-  "6773" -> "6782" 
-  "6776" -> "6797" 
-  "6793" -> "6799" 
-  "6748" -> "6755" 
-  "6748" -> "6763" 
-  "6768" -> "6766" 
-  "6777" -> "6788" 
-  "6784" -> "6776" 
-  "6794" -> "6793" 
-  "6749" -> "6748" 
-  "6753" -> "6760" 
-  "6760" -> "6799" 
-  "6769" -> "6768" 
-  "6778" -> "6777" 
-  "6785" -> "6784" 
-  "6795" -> "6794" 
-  "6733" -> "6740" 
-  "6733" -> "6749" 
-  "6754" -> "6753" 
-  "6771" -> "6769" 
-  "6780" -> "6778" 
-  "6786" -> "6791" 
-  "6789" -> "6785" 
-  "6797" -> "6795" 
-  "6734" -> "6733" 
-  "6738" -> "6745" 
-  "6745" -> "6799" 
-  "6755" -> "6757" 
-  "6757" -> "6754" 
-  "6782" -> "6780" 
-  "6788" -> "6786" 
-  "6791" -> "6789" 
-  "6739" -> "6738" 
-  "6740" -> "6742" 
-  "6742" -> "6739" 
-  "6724" -> "6729" 
+digraph "GetLongField" {  
+"6844" [label = <(GET_PRIMITIVE_FIELD,GET_PRIMITIVE_FIELD(Long, obj))<SUB>1434</SUB>> ]
+"6878" [label = <(soa,ScopedObjectAccess)<SUB>1434</SUB>> ]
+"6881" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1434</SUB>> ]
+"6888" [label = <(NotifyGetField,NotifyGetField(f, obj))<SUB>1434</SUB>> ]
+"6891" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1434</SUB>> ]
+"6908" [label = <(RETURN,GET_PRIMITIVE_FIELD(Long, obj);,GET_PRIMITIVE_FIELD(Long, obj);)<SUB>1434</SUB>> ]
+"6863" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1434</SUB>> ]
+"6883" [label = <(GET_PRIMITIVE_FIELD(Long, obj),jni::DecodeArtField(fid))<SUB>1434</SUB>> ]
+"6892" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1434</SUB>> ]
+"6899" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1434</SUB>> ]
+"6909" [label = <(GET_PRIMITIVE_FIELD(Long, obj),f-&gt;GetLong(o))<SUB>1434</SUB>> ]
+"6864" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1434</SUB>> ]
+"6868" [label = <(GET_PRIMITIVE_FIELD(Long, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1434</SUB>> ]
+"6875" [label = <(RETURN,GET_PRIMITIVE_FIELD(Long, obj),GET_PRIMITIVE_FIELD(Long, obj))<SUB>1434</SUB>> ]
+"6884" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Long, obj))<SUB>1434</SUB>> ]
+"6893" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1434</SUB>> ]
+"6900" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1434</SUB>> ]
+"6910" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetLong)<SUB>1434</SUB>> ]
+"6848" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1434</SUB>> ]
+"6869" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1434</SUB>> ]
+"6886" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1434</SUB>> ]
+"6895" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Long, obj))<SUB>1434</SUB>> ]
+"6901" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1434</SUB>> ]
+"6904" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Long, obj))<SUB>1434</SUB>> ]
+"6912" [label = <(FIELD_IDENTIFIER,GetLong,GetLong)<SUB>1434</SUB>> ]
+"6849" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1434</SUB>> ]
+"6853" [label = <(GET_PRIMITIVE_FIELD(Long, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1434</SUB>> ]
+"6860" [label = <(RETURN,GET_PRIMITIVE_FIELD(Long, obj),GET_PRIMITIVE_FIELD(Long, obj))<SUB>1434</SUB>> ]
+"6870" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1434</SUB>> ]
+"6872" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1434</SUB>> ]
+"6897" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1434</SUB>> ]
+"6903" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1434</SUB>> ]
+"6906" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1434</SUB>> ]
+"6854" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1434</SUB>> ]
+"6855" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1434</SUB>> ]
+"6857" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1434</SUB>> ]
+"6839" [label = <(METHOD,GetLongField)<SUB>1433</SUB>> ]
+"6914" [label = <(METHOD_RETURN,jlong)<SUB>1433</SUB>> ]
+  "6844" -> "6849" 
+  "6844" -> "6864" 
+  "6878" -> "6886" 
+  "6881" -> "6888" 
+  "6888" -> "6897" 
+  "6891" -> "6912" 
+  "6908" -> "6914" 
+  "6863" -> "6870" 
+  "6863" -> "6878" 
+  "6883" -> "6881" 
+  "6892" -> "6903" 
+  "6899" -> "6891" 
+  "6909" -> "6908" 
+  "6864" -> "6863" 
+  "6868" -> "6875" 
+  "6875" -> "6914" 
+  "6884" -> "6883" 
+  "6893" -> "6892" 
+  "6900" -> "6899" 
+  "6910" -> "6909" 
+  "6848" -> "6855" 
+  "6848" -> "6864" 
+  "6869" -> "6868" 
+  "6886" -> "6884" 
+  "6895" -> "6893" 
+  "6901" -> "6906" 
+  "6904" -> "6900" 
+  "6912" -> "6910" 
+  "6849" -> "6848" 
+  "6853" -> "6860" 
+  "6860" -> "6914" 
+  "6870" -> "6872" 
+  "6872" -> "6869" 
+  "6897" -> "6895" 
+  "6903" -> "6901" 
+  "6906" -> "6904" 
+  "6854" -> "6853" 
+  "6855" -> "6857" 
+  "6857" -> "6854" 
+  "6839" -> "6844" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/127-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/127-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/127-cfg.dot	2023-06-07 19:33:45.427394687 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/127-cfg.dot	2023-06-07 19:33:52.007393986 +0330
@@ -1,80 +1,80 @@
-digraph "GetCharField" {  
-"6806" [label = <(GET_PRIMITIVE_FIELD,GET_PRIMITIVE_FIELD(Char, obj))<SUB>1501</SUB>> ]
-"6840" [label = <(soa,ScopedObjectAccess)<SUB>1501</SUB>> ]
-"6843" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1501</SUB>> ]
-"6850" [label = <(NotifyGetField,NotifyGetField(f, obj))<SUB>1501</SUB>> ]
-"6853" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1501</SUB>> ]
-"6870" [label = <(RETURN,GET_PRIMITIVE_FIELD(Char, obj);,GET_PRIMITIVE_FIELD(Char, obj);)<SUB>1501</SUB>> ]
-"6825" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1501</SUB>> ]
-"6845" [label = <(GET_PRIMITIVE_FIELD(Char, obj),jni::DecodeArtField(fid))<SUB>1501</SUB>> ]
-"6854" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1501</SUB>> ]
-"6861" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1501</SUB>> ]
-"6871" [label = <(GET_PRIMITIVE_FIELD(Char, obj),f-&gt;GetChar(o))<SUB>1501</SUB>> ]
-"6826" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1501</SUB>> ]
-"6830" [label = <(GET_PRIMITIVE_FIELD(Char, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1501</SUB>> ]
-"6837" [label = <(RETURN,GET_PRIMITIVE_FIELD(Char, obj),GET_PRIMITIVE_FIELD(Char, obj))<SUB>1501</SUB>> ]
-"6846" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Char, obj))<SUB>1501</SUB>> ]
-"6855" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1501</SUB>> ]
-"6862" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1501</SUB>> ]
-"6872" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetChar)<SUB>1501</SUB>> ]
-"6810" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1501</SUB>> ]
-"6831" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1501</SUB>> ]
-"6848" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1501</SUB>> ]
-"6857" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Char, obj))<SUB>1501</SUB>> ]
-"6863" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1501</SUB>> ]
-"6866" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Char, obj))<SUB>1501</SUB>> ]
-"6874" [label = <(FIELD_IDENTIFIER,GetChar,GetChar)<SUB>1501</SUB>> ]
-"6811" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1501</SUB>> ]
-"6815" [label = <(GET_PRIMITIVE_FIELD(Char, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1501</SUB>> ]
-"6822" [label = <(RETURN,GET_PRIMITIVE_FIELD(Char, obj),GET_PRIMITIVE_FIELD(Char, obj))<SUB>1501</SUB>> ]
-"6832" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1501</SUB>> ]
-"6834" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1501</SUB>> ]
-"6859" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1501</SUB>> ]
-"6865" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1501</SUB>> ]
-"6868" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1501</SUB>> ]
-"6816" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1501</SUB>> ]
-"6817" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1501</SUB>> ]
-"6819" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1501</SUB>> ]
-"6801" [label = <(METHOD,GetCharField)<SUB>1500</SUB>> ]
-"6876" [label = <(METHOD_RETURN,jchar)<SUB>1500</SUB>> ]
-  "6806" -> "6811" 
-  "6806" -> "6826" 
-  "6840" -> "6848" 
-  "6843" -> "6850" 
-  "6850" -> "6859" 
-  "6853" -> "6874" 
-  "6870" -> "6876" 
-  "6825" -> "6832" 
-  "6825" -> "6840" 
-  "6845" -> "6843" 
-  "6854" -> "6865" 
-  "6861" -> "6853" 
-  "6871" -> "6870" 
-  "6826" -> "6825" 
-  "6830" -> "6837" 
-  "6837" -> "6876" 
-  "6846" -> "6845" 
-  "6855" -> "6854" 
-  "6862" -> "6861" 
-  "6872" -> "6871" 
-  "6810" -> "6817" 
-  "6810" -> "6826" 
-  "6831" -> "6830" 
-  "6848" -> "6846" 
-  "6857" -> "6855" 
-  "6863" -> "6868" 
-  "6866" -> "6862" 
-  "6874" -> "6872" 
-  "6811" -> "6810" 
-  "6815" -> "6822" 
-  "6822" -> "6876" 
-  "6832" -> "6834" 
-  "6834" -> "6831" 
-  "6859" -> "6857" 
-  "6865" -> "6863" 
-  "6868" -> "6866" 
-  "6816" -> "6815" 
-  "6817" -> "6819" 
-  "6819" -> "6816" 
-  "6801" -> "6806" 
+digraph "GetFloatField" {  
+"6921" [label = <(GET_PRIMITIVE_FIELD,GET_PRIMITIVE_FIELD(Float, obj))<SUB>1438</SUB>> ]
+"6955" [label = <(soa,ScopedObjectAccess)<SUB>1438</SUB>> ]
+"6958" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1438</SUB>> ]
+"6965" [label = <(NotifyGetField,NotifyGetField(f, obj))<SUB>1438</SUB>> ]
+"6968" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1438</SUB>> ]
+"6985" [label = <(RETURN,GET_PRIMITIVE_FIELD(Float, obj);,GET_PRIMITIVE_FIELD(Float, obj);)<SUB>1438</SUB>> ]
+"6940" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1438</SUB>> ]
+"6960" [label = <(GET_PRIMITIVE_FIELD(Float, obj),jni::DecodeArtField(fid))<SUB>1438</SUB>> ]
+"6969" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1438</SUB>> ]
+"6976" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1438</SUB>> ]
+"6986" [label = <(GET_PRIMITIVE_FIELD(Float, obj),f-&gt;GetFloat(o))<SUB>1438</SUB>> ]
+"6941" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1438</SUB>> ]
+"6945" [label = <(GET_PRIMITIVE_FIELD(Float, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1438</SUB>> ]
+"6952" [label = <(RETURN,GET_PRIMITIVE_FIELD(Float, obj),GET_PRIMITIVE_FIELD(Float, obj))<SUB>1438</SUB>> ]
+"6961" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Float, obj))<SUB>1438</SUB>> ]
+"6970" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1438</SUB>> ]
+"6977" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1438</SUB>> ]
+"6987" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetFloat)<SUB>1438</SUB>> ]
+"6925" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1438</SUB>> ]
+"6946" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1438</SUB>> ]
+"6963" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1438</SUB>> ]
+"6972" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Float, obj))<SUB>1438</SUB>> ]
+"6978" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1438</SUB>> ]
+"6981" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Float, obj))<SUB>1438</SUB>> ]
+"6989" [label = <(FIELD_IDENTIFIER,GetFloat,GetFloat)<SUB>1438</SUB>> ]
+"6926" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1438</SUB>> ]
+"6930" [label = <(GET_PRIMITIVE_FIELD(Float, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1438</SUB>> ]
+"6937" [label = <(RETURN,GET_PRIMITIVE_FIELD(Float, obj),GET_PRIMITIVE_FIELD(Float, obj))<SUB>1438</SUB>> ]
+"6947" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1438</SUB>> ]
+"6949" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1438</SUB>> ]
+"6974" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1438</SUB>> ]
+"6980" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1438</SUB>> ]
+"6983" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1438</SUB>> ]
+"6931" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1438</SUB>> ]
+"6932" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1438</SUB>> ]
+"6934" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1438</SUB>> ]
+"6916" [label = <(METHOD,GetFloatField)<SUB>1437</SUB>> ]
+"6991" [label = <(METHOD_RETURN,jfloat)<SUB>1437</SUB>> ]
+  "6921" -> "6926" 
+  "6921" -> "6941" 
+  "6955" -> "6963" 
+  "6958" -> "6965" 
+  "6965" -> "6974" 
+  "6968" -> "6989" 
+  "6985" -> "6991" 
+  "6940" -> "6947" 
+  "6940" -> "6955" 
+  "6960" -> "6958" 
+  "6969" -> "6980" 
+  "6976" -> "6968" 
+  "6986" -> "6985" 
+  "6941" -> "6940" 
+  "6945" -> "6952" 
+  "6952" -> "6991" 
+  "6961" -> "6960" 
+  "6970" -> "6969" 
+  "6977" -> "6976" 
+  "6987" -> "6986" 
+  "6925" -> "6932" 
+  "6925" -> "6941" 
+  "6946" -> "6945" 
+  "6963" -> "6961" 
+  "6972" -> "6970" 
+  "6978" -> "6983" 
+  "6981" -> "6977" 
+  "6989" -> "6987" 
+  "6926" -> "6925" 
+  "6930" -> "6937" 
+  "6937" -> "6991" 
+  "6947" -> "6949" 
+  "6949" -> "6946" 
+  "6974" -> "6972" 
+  "6980" -> "6978" 
+  "6983" -> "6981" 
+  "6931" -> "6930" 
+  "6932" -> "6934" 
+  "6934" -> "6931" 
+  "6916" -> "6921" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/128-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/128-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/128-cfg.dot	2023-06-07 19:33:45.437394685 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/128-cfg.dot	2023-06-07 19:33:52.007393986 +0330
@@ -1,80 +1,80 @@
-digraph "GetShortField" {  
-"6883" [label = <(GET_PRIMITIVE_FIELD,GET_PRIMITIVE_FIELD(Short, obj))<SUB>1505</SUB>> ]
-"6917" [label = <(soa,ScopedObjectAccess)<SUB>1505</SUB>> ]
-"6920" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1505</SUB>> ]
-"6927" [label = <(NotifyGetField,NotifyGetField(f, obj))<SUB>1505</SUB>> ]
-"6930" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1505</SUB>> ]
-"6947" [label = <(RETURN,GET_PRIMITIVE_FIELD(Short, obj);,GET_PRIMITIVE_FIELD(Short, obj);)<SUB>1505</SUB>> ]
-"6902" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1505</SUB>> ]
-"6922" [label = <(GET_PRIMITIVE_FIELD(Short, obj),jni::DecodeArtField(fid))<SUB>1505</SUB>> ]
-"6931" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1505</SUB>> ]
-"6938" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1505</SUB>> ]
-"6948" [label = <(GET_PRIMITIVE_FIELD(Short, obj),f-&gt;GetShort(o))<SUB>1505</SUB>> ]
-"6903" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1505</SUB>> ]
-"6907" [label = <(GET_PRIMITIVE_FIELD(Short, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1505</SUB>> ]
-"6914" [label = <(RETURN,GET_PRIMITIVE_FIELD(Short, obj),GET_PRIMITIVE_FIELD(Short, obj))<SUB>1505</SUB>> ]
-"6923" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Short, obj))<SUB>1505</SUB>> ]
-"6932" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1505</SUB>> ]
-"6939" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1505</SUB>> ]
-"6949" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetShort)<SUB>1505</SUB>> ]
-"6887" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1505</SUB>> ]
-"6908" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1505</SUB>> ]
-"6925" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1505</SUB>> ]
-"6934" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Short, obj))<SUB>1505</SUB>> ]
-"6940" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1505</SUB>> ]
-"6943" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Short, obj))<SUB>1505</SUB>> ]
-"6951" [label = <(FIELD_IDENTIFIER,GetShort,GetShort)<SUB>1505</SUB>> ]
-"6888" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1505</SUB>> ]
-"6892" [label = <(GET_PRIMITIVE_FIELD(Short, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1505</SUB>> ]
-"6899" [label = <(RETURN,GET_PRIMITIVE_FIELD(Short, obj),GET_PRIMITIVE_FIELD(Short, obj))<SUB>1505</SUB>> ]
-"6909" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1505</SUB>> ]
-"6911" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1505</SUB>> ]
-"6936" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1505</SUB>> ]
-"6942" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1505</SUB>> ]
-"6945" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1505</SUB>> ]
-"6893" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1505</SUB>> ]
-"6894" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1505</SUB>> ]
-"6896" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1505</SUB>> ]
-"6878" [label = <(METHOD,GetShortField)<SUB>1504</SUB>> ]
-"6953" [label = <(METHOD_RETURN,jshort)<SUB>1504</SUB>> ]
-  "6883" -> "6888" 
-  "6883" -> "6903" 
-  "6917" -> "6925" 
-  "6920" -> "6927" 
-  "6927" -> "6936" 
-  "6930" -> "6951" 
-  "6947" -> "6953" 
-  "6902" -> "6909" 
-  "6902" -> "6917" 
-  "6922" -> "6920" 
-  "6931" -> "6942" 
-  "6938" -> "6930" 
-  "6948" -> "6947" 
-  "6903" -> "6902" 
-  "6907" -> "6914" 
-  "6914" -> "6953" 
-  "6923" -> "6922" 
-  "6932" -> "6931" 
-  "6939" -> "6938" 
-  "6949" -> "6948" 
-  "6887" -> "6894" 
-  "6887" -> "6903" 
-  "6908" -> "6907" 
-  "6925" -> "6923" 
-  "6934" -> "6932" 
-  "6940" -> "6945" 
-  "6943" -> "6939" 
-  "6951" -> "6949" 
-  "6888" -> "6887" 
-  "6892" -> "6899" 
-  "6899" -> "6953" 
-  "6909" -> "6911" 
-  "6911" -> "6908" 
-  "6936" -> "6934" 
-  "6942" -> "6940" 
-  "6945" -> "6943" 
-  "6893" -> "6892" 
-  "6894" -> "6896" 
-  "6896" -> "6893" 
-  "6878" -> "6883" 
+digraph "GetDoubleField" {  
+"6998" [label = <(GET_PRIMITIVE_FIELD,GET_PRIMITIVE_FIELD(Double, obj))<SUB>1442</SUB>> ]
+"7032" [label = <(soa,ScopedObjectAccess)<SUB>1442</SUB>> ]
+"7035" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1442</SUB>> ]
+"7042" [label = <(NotifyGetField,NotifyGetField(f, obj))<SUB>1442</SUB>> ]
+"7045" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1442</SUB>> ]
+"7062" [label = <(RETURN,GET_PRIMITIVE_FIELD(Double, obj);,GET_PRIMITIVE_FIELD(Double, obj);)<SUB>1442</SUB>> ]
+"7017" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1442</SUB>> ]
+"7037" [label = <(GET_PRIMITIVE_FIELD(Double, obj),jni::DecodeArtField(fid))<SUB>1442</SUB>> ]
+"7046" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1442</SUB>> ]
+"7053" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1442</SUB>> ]
+"7063" [label = <(GET_PRIMITIVE_FIELD(Double, obj),f-&gt;GetDouble(o))<SUB>1442</SUB>> ]
+"7018" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1442</SUB>> ]
+"7022" [label = <(GET_PRIMITIVE_FIELD(Double, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1442</SUB>> ]
+"7029" [label = <(RETURN,GET_PRIMITIVE_FIELD(Double, obj),GET_PRIMITIVE_FIELD(Double, obj))<SUB>1442</SUB>> ]
+"7038" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Double, obj))<SUB>1442</SUB>> ]
+"7047" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1442</SUB>> ]
+"7054" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1442</SUB>> ]
+"7064" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDouble)<SUB>1442</SUB>> ]
+"7002" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1442</SUB>> ]
+"7023" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1442</SUB>> ]
+"7040" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1442</SUB>> ]
+"7049" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Double, obj))<SUB>1442</SUB>> ]
+"7055" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1442</SUB>> ]
+"7058" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Double, obj))<SUB>1442</SUB>> ]
+"7066" [label = <(FIELD_IDENTIFIER,GetDouble,GetDouble)<SUB>1442</SUB>> ]
+"7003" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1442</SUB>> ]
+"7007" [label = <(GET_PRIMITIVE_FIELD(Double, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1442</SUB>> ]
+"7014" [label = <(RETURN,GET_PRIMITIVE_FIELD(Double, obj),GET_PRIMITIVE_FIELD(Double, obj))<SUB>1442</SUB>> ]
+"7024" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1442</SUB>> ]
+"7026" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1442</SUB>> ]
+"7051" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1442</SUB>> ]
+"7057" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1442</SUB>> ]
+"7060" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1442</SUB>> ]
+"7008" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1442</SUB>> ]
+"7009" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1442</SUB>> ]
+"7011" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1442</SUB>> ]
+"6993" [label = <(METHOD,GetDoubleField)<SUB>1441</SUB>> ]
+"7068" [label = <(METHOD_RETURN,jdouble)<SUB>1441</SUB>> ]
+  "6998" -> "7003" 
+  "6998" -> "7018" 
+  "7032" -> "7040" 
+  "7035" -> "7042" 
+  "7042" -> "7051" 
+  "7045" -> "7066" 
+  "7062" -> "7068" 
+  "7017" -> "7024" 
+  "7017" -> "7032" 
+  "7037" -> "7035" 
+  "7046" -> "7057" 
+  "7053" -> "7045" 
+  "7063" -> "7062" 
+  "7018" -> "7017" 
+  "7022" -> "7029" 
+  "7029" -> "7068" 
+  "7038" -> "7037" 
+  "7047" -> "7046" 
+  "7054" -> "7053" 
+  "7064" -> "7063" 
+  "7002" -> "7009" 
+  "7002" -> "7018" 
+  "7023" -> "7022" 
+  "7040" -> "7038" 
+  "7049" -> "7047" 
+  "7055" -> "7060" 
+  "7058" -> "7054" 
+  "7066" -> "7064" 
+  "7003" -> "7002" 
+  "7007" -> "7014" 
+  "7014" -> "7068" 
+  "7024" -> "7026" 
+  "7026" -> "7023" 
+  "7051" -> "7049" 
+  "7057" -> "7055" 
+  "7060" -> "7058" 
+  "7008" -> "7007" 
+  "7009" -> "7011" 
+  "7011" -> "7008" 
+  "6993" -> "6998" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/129-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/129-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/129-cfg.dot	2023-06-07 19:33:45.437394685 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/129-cfg.dot	2023-06-07 19:33:52.007393986 +0330
@@ -1,80 +1,49 @@
-digraph "GetIntField" {  
-"6960" [label = <(GET_PRIMITIVE_FIELD,GET_PRIMITIVE_FIELD(Int, obj))<SUB>1509</SUB>> ]
-"6994" [label = <(soa,ScopedObjectAccess)<SUB>1509</SUB>> ]
-"6997" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1509</SUB>> ]
-"7004" [label = <(NotifyGetField,NotifyGetField(f, obj))<SUB>1509</SUB>> ]
-"7007" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1509</SUB>> ]
-"7024" [label = <(RETURN,GET_PRIMITIVE_FIELD(Int, obj);,GET_PRIMITIVE_FIELD(Int, obj);)<SUB>1509</SUB>> ]
-"6979" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1509</SUB>> ]
-"6999" [label = <(GET_PRIMITIVE_FIELD(Int, obj),jni::DecodeArtField(fid))<SUB>1509</SUB>> ]
-"7008" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1509</SUB>> ]
-"7015" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1509</SUB>> ]
-"7025" [label = <(GET_PRIMITIVE_FIELD(Int, obj),f-&gt;GetInt(o))<SUB>1509</SUB>> ]
-"6980" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1509</SUB>> ]
-"6984" [label = <(GET_PRIMITIVE_FIELD(Int, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1509</SUB>> ]
-"6991" [label = <(RETURN,GET_PRIMITIVE_FIELD(Int, obj),GET_PRIMITIVE_FIELD(Int, obj))<SUB>1509</SUB>> ]
-"7000" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Int, obj))<SUB>1509</SUB>> ]
-"7009" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1509</SUB>> ]
-"7016" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1509</SUB>> ]
-"7026" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetInt)<SUB>1509</SUB>> ]
-"6964" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1509</SUB>> ]
-"6985" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1509</SUB>> ]
-"7002" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1509</SUB>> ]
-"7011" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Int, obj))<SUB>1509</SUB>> ]
-"7017" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1509</SUB>> ]
-"7020" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Int, obj))<SUB>1509</SUB>> ]
-"7028" [label = <(FIELD_IDENTIFIER,GetInt,GetInt)<SUB>1509</SUB>> ]
-"6965" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1509</SUB>> ]
-"6969" [label = <(GET_PRIMITIVE_FIELD(Int, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1509</SUB>> ]
-"6976" [label = <(RETURN,GET_PRIMITIVE_FIELD(Int, obj),GET_PRIMITIVE_FIELD(Int, obj))<SUB>1509</SUB>> ]
-"6986" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1509</SUB>> ]
-"6988" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1509</SUB>> ]
-"7013" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1509</SUB>> ]
-"7019" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1509</SUB>> ]
-"7022" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1509</SUB>> ]
-"6970" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1509</SUB>> ]
-"6971" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1509</SUB>> ]
-"6973" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1509</SUB>> ]
-"6955" [label = <(METHOD,GetIntField)<SUB>1508</SUB>> ]
-"7030" [label = <(METHOD_RETURN,jint)<SUB>1508</SUB>> ]
-  "6960" -> "6965" 
-  "6960" -> "6980" 
-  "6994" -> "7002" 
-  "6997" -> "7004" 
-  "7004" -> "7013" 
-  "7007" -> "7028" 
-  "7024" -> "7030" 
-  "6979" -> "6986" 
-  "6979" -> "6994" 
-  "6999" -> "6997" 
-  "7008" -> "7019" 
-  "7015" -> "7007" 
-  "7025" -> "7024" 
-  "6980" -> "6979" 
-  "6984" -> "6991" 
-  "6991" -> "7030" 
-  "7000" -> "6999" 
-  "7009" -> "7008" 
-  "7016" -> "7015" 
-  "7026" -> "7025" 
-  "6964" -> "6971" 
-  "6964" -> "6980" 
-  "6985" -> "6984" 
-  "7002" -> "7000" 
-  "7011" -> "7009" 
-  "7017" -> "7022" 
-  "7020" -> "7016" 
-  "7028" -> "7026" 
-  "6965" -> "6964" 
-  "6969" -> "6976" 
-  "6976" -> "7030" 
-  "6986" -> "6988" 
-  "6988" -> "6985" 
-  "7013" -> "7011" 
-  "7019" -> "7017" 
-  "7022" -> "7020" 
-  "6970" -> "6969" 
-  "6971" -> "6973" 
-  "6973" -> "6970" 
-  "6955" -> "6960" 
+digraph "GetStaticBooleanField" {  
+"7075" [label = <(GET_STATIC_PRIMITIVE_FIELD,GET_STATIC_PRIMITIVE_FIELD(Boolean))<SUB>1446</SUB>> ]
+"7093" [label = <(soa,ScopedObjectAccess)<SUB>1446</SUB>> ]
+"7096" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1446</SUB>> ]
+"7103" [label = <(NotifyGetField,NotifyGetField(f, nullptr))<SUB>1446</SUB>> ]
+"7106" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Boolean);,GET_STATIC_PRIMITIVE_FIELD(Boolean);)<SUB>1446</SUB>> ]
+"7098" [label = <(GET_STATIC_PRIMITIVE_FIELD(Boolean),jni::DecodeArtField(fid))<SUB>1446</SUB>> ]
+"7107" [label = <(GET_STATIC_PRIMITIVE_FIELD(Boolean),f-&gt;GetBoolean(f-&gt;GetDeclaringClass()))<SUB>1446</SUB>> ]
+"7099" [label = <(&lt;operator&gt;.fieldAccess,GET_STATIC_PRIMITIVE_FIELD(Boolean))<SUB>1446</SUB>> ]
+"7108" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetBoolean)<SUB>1446</SUB>> ]
+"7111" [label = <(GET_STATIC_PRIMITIVE_FIELD(Boolean),f-&gt;GetDeclaringClass())<SUB>1446</SUB>> ]
+"7078" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1446</SUB>> ]
+"7101" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1446</SUB>> ]
+"7110" [label = <(FIELD_IDENTIFIER,GetBoolean,GetBoolean)<SUB>1446</SUB>> ]
+"7112" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1446</SUB>> ]
+"7079" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1446</SUB>> ]
+"7083" [label = <(GET_STATIC_PRIMITIVE_FIELD(Boolean),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1446</SUB>> ]
+"7090" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Boolean),GET_STATIC_PRIMITIVE_FIELD(Boolean))<SUB>1446</SUB>> ]
+"7114" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1446</SUB>> ]
+"7084" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1446</SUB>> ]
+"7085" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1446</SUB>> ]
+"7087" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1446</SUB>> ]
+"7070" [label = <(METHOD,GetStaticBooleanField)<SUB>1445</SUB>> ]
+"7115" [label = <(METHOD_RETURN,jboolean)<SUB>1445</SUB>> ]
+  "7075" -> "7079" 
+  "7075" -> "7093" 
+  "7093" -> "7101" 
+  "7096" -> "7103" 
+  "7103" -> "7110" 
+  "7106" -> "7115" 
+  "7098" -> "7096" 
+  "7107" -> "7106" 
+  "7099" -> "7098" 
+  "7108" -> "7114" 
+  "7111" -> "7107" 
+  "7078" -> "7085" 
+  "7078" -> "7093" 
+  "7101" -> "7099" 
+  "7110" -> "7108" 
+  "7112" -> "7111" 
+  "7079" -> "7078" 
+  "7083" -> "7090" 
+  "7090" -> "7115" 
+  "7114" -> "7112" 
+  "7084" -> "7083" 
+  "7085" -> "7087" 
+  "7087" -> "7084" 
+  "7070" -> "7075" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/13-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/13-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/13-cfg.dot	2023-06-07 19:33:45.337394696 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/13-cfg.dot	2023-06-07 19:33:51.917393996 +0330
@@ -1,5 +1,5 @@
-digraph "ThrowNoSuchMethodError" {  
-"350" [label = <(METHOD,ThrowNoSuchMethodError)<SUB>280</SUB>> ]
-"357" [label = <(METHOD_RETURN,void)<SUB>280</SUB>> ]
-  "350" -> "357" 
+digraph "FindMethodID" {  
+"204" [label = <(METHOD,FindMethodID)<SUB>244</SUB>> ]
+"211" [label = <(METHOD_RETURN,jmethodID)<SUB>244</SUB>> ]
+  "204" -> "211" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/130-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/130-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/130-cfg.dot	2023-06-07 19:33:45.437394685 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/130-cfg.dot	2023-06-07 19:33:52.007393986 +0330
@@ -1,80 +1,49 @@
-digraph "GetLongField" {  
-"7037" [label = <(GET_PRIMITIVE_FIELD,GET_PRIMITIVE_FIELD(Long, obj))<SUB>1513</SUB>> ]
-"7071" [label = <(soa,ScopedObjectAccess)<SUB>1513</SUB>> ]
-"7074" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1513</SUB>> ]
-"7081" [label = <(NotifyGetField,NotifyGetField(f, obj))<SUB>1513</SUB>> ]
-"7084" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1513</SUB>> ]
-"7101" [label = <(RETURN,GET_PRIMITIVE_FIELD(Long, obj);,GET_PRIMITIVE_FIELD(Long, obj);)<SUB>1513</SUB>> ]
-"7056" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1513</SUB>> ]
-"7076" [label = <(GET_PRIMITIVE_FIELD(Long, obj),jni::DecodeArtField(fid))<SUB>1513</SUB>> ]
-"7085" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1513</SUB>> ]
-"7092" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1513</SUB>> ]
-"7102" [label = <(GET_PRIMITIVE_FIELD(Long, obj),f-&gt;GetLong(o))<SUB>1513</SUB>> ]
-"7057" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1513</SUB>> ]
-"7061" [label = <(GET_PRIMITIVE_FIELD(Long, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1513</SUB>> ]
-"7068" [label = <(RETURN,GET_PRIMITIVE_FIELD(Long, obj),GET_PRIMITIVE_FIELD(Long, obj))<SUB>1513</SUB>> ]
-"7077" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Long, obj))<SUB>1513</SUB>> ]
-"7086" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1513</SUB>> ]
-"7093" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1513</SUB>> ]
-"7103" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetLong)<SUB>1513</SUB>> ]
-"7041" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1513</SUB>> ]
-"7062" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1513</SUB>> ]
-"7079" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1513</SUB>> ]
-"7088" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Long, obj))<SUB>1513</SUB>> ]
-"7094" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1513</SUB>> ]
-"7097" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Long, obj))<SUB>1513</SUB>> ]
-"7105" [label = <(FIELD_IDENTIFIER,GetLong,GetLong)<SUB>1513</SUB>> ]
-"7042" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1513</SUB>> ]
-"7046" [label = <(GET_PRIMITIVE_FIELD(Long, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1513</SUB>> ]
-"7053" [label = <(RETURN,GET_PRIMITIVE_FIELD(Long, obj),GET_PRIMITIVE_FIELD(Long, obj))<SUB>1513</SUB>> ]
-"7063" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1513</SUB>> ]
-"7065" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1513</SUB>> ]
-"7090" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1513</SUB>> ]
-"7096" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1513</SUB>> ]
-"7099" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1513</SUB>> ]
-"7047" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1513</SUB>> ]
-"7048" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1513</SUB>> ]
-"7050" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1513</SUB>> ]
-"7032" [label = <(METHOD,GetLongField)<SUB>1512</SUB>> ]
-"7107" [label = <(METHOD_RETURN,jlong)<SUB>1512</SUB>> ]
-  "7037" -> "7042" 
-  "7037" -> "7057" 
-  "7071" -> "7079" 
-  "7074" -> "7081" 
-  "7081" -> "7090" 
-  "7084" -> "7105" 
-  "7101" -> "7107" 
-  "7056" -> "7063" 
-  "7056" -> "7071" 
-  "7076" -> "7074" 
-  "7085" -> "7096" 
-  "7092" -> "7084" 
-  "7102" -> "7101" 
-  "7057" -> "7056" 
-  "7061" -> "7068" 
-  "7068" -> "7107" 
-  "7077" -> "7076" 
-  "7086" -> "7085" 
-  "7093" -> "7092" 
-  "7103" -> "7102" 
-  "7041" -> "7048" 
-  "7041" -> "7057" 
-  "7062" -> "7061" 
-  "7079" -> "7077" 
-  "7088" -> "7086" 
-  "7094" -> "7099" 
-  "7097" -> "7093" 
-  "7105" -> "7103" 
-  "7042" -> "7041" 
-  "7046" -> "7053" 
-  "7053" -> "7107" 
-  "7063" -> "7065" 
-  "7065" -> "7062" 
-  "7090" -> "7088" 
-  "7096" -> "7094" 
-  "7099" -> "7097" 
-  "7047" -> "7046" 
-  "7048" -> "7050" 
-  "7050" -> "7047" 
-  "7032" -> "7037" 
+digraph "GetStaticByteField" {  
+"7122" [label = <(GET_STATIC_PRIMITIVE_FIELD,GET_STATIC_PRIMITIVE_FIELD(Byte))<SUB>1450</SUB>> ]
+"7140" [label = <(soa,ScopedObjectAccess)<SUB>1450</SUB>> ]
+"7143" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1450</SUB>> ]
+"7150" [label = <(NotifyGetField,NotifyGetField(f, nullptr))<SUB>1450</SUB>> ]
+"7153" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Byte);,GET_STATIC_PRIMITIVE_FIELD(Byte);)<SUB>1450</SUB>> ]
+"7145" [label = <(GET_STATIC_PRIMITIVE_FIELD(Byte),jni::DecodeArtField(fid))<SUB>1450</SUB>> ]
+"7154" [label = <(GET_STATIC_PRIMITIVE_FIELD(Byte),f-&gt;GetByte(f-&gt;GetDeclaringClass()))<SUB>1450</SUB>> ]
+"7146" [label = <(&lt;operator&gt;.fieldAccess,GET_STATIC_PRIMITIVE_FIELD(Byte))<SUB>1450</SUB>> ]
+"7155" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetByte)<SUB>1450</SUB>> ]
+"7158" [label = <(GET_STATIC_PRIMITIVE_FIELD(Byte),f-&gt;GetDeclaringClass())<SUB>1450</SUB>> ]
+"7125" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1450</SUB>> ]
+"7148" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1450</SUB>> ]
+"7157" [label = <(FIELD_IDENTIFIER,GetByte,GetByte)<SUB>1450</SUB>> ]
+"7159" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1450</SUB>> ]
+"7126" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1450</SUB>> ]
+"7130" [label = <(GET_STATIC_PRIMITIVE_FIELD(Byte),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1450</SUB>> ]
+"7137" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Byte),GET_STATIC_PRIMITIVE_FIELD(Byte))<SUB>1450</SUB>> ]
+"7161" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1450</SUB>> ]
+"7131" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1450</SUB>> ]
+"7132" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1450</SUB>> ]
+"7134" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1450</SUB>> ]
+"7117" [label = <(METHOD,GetStaticByteField)<SUB>1449</SUB>> ]
+"7162" [label = <(METHOD_RETURN,jbyte)<SUB>1449</SUB>> ]
+  "7122" -> "7126" 
+  "7122" -> "7140" 
+  "7140" -> "7148" 
+  "7143" -> "7150" 
+  "7150" -> "7157" 
+  "7153" -> "7162" 
+  "7145" -> "7143" 
+  "7154" -> "7153" 
+  "7146" -> "7145" 
+  "7155" -> "7161" 
+  "7158" -> "7154" 
+  "7125" -> "7132" 
+  "7125" -> "7140" 
+  "7148" -> "7146" 
+  "7157" -> "7155" 
+  "7159" -> "7158" 
+  "7126" -> "7125" 
+  "7130" -> "7137" 
+  "7137" -> "7162" 
+  "7161" -> "7159" 
+  "7131" -> "7130" 
+  "7132" -> "7134" 
+  "7134" -> "7131" 
+  "7117" -> "7122" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/131-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/131-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/131-cfg.dot	2023-06-07 19:33:45.437394685 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/131-cfg.dot	2023-06-07 19:33:52.007393986 +0330
@@ -1,80 +1,49 @@
-digraph "GetFloatField" {  
-"7114" [label = <(GET_PRIMITIVE_FIELD,GET_PRIMITIVE_FIELD(Float, obj))<SUB>1517</SUB>> ]
-"7148" [label = <(soa,ScopedObjectAccess)<SUB>1517</SUB>> ]
-"7151" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1517</SUB>> ]
-"7158" [label = <(NotifyGetField,NotifyGetField(f, obj))<SUB>1517</SUB>> ]
-"7161" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1517</SUB>> ]
-"7178" [label = <(RETURN,GET_PRIMITIVE_FIELD(Float, obj);,GET_PRIMITIVE_FIELD(Float, obj);)<SUB>1517</SUB>> ]
-"7133" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1517</SUB>> ]
-"7153" [label = <(GET_PRIMITIVE_FIELD(Float, obj),jni::DecodeArtField(fid))<SUB>1517</SUB>> ]
-"7162" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1517</SUB>> ]
-"7169" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1517</SUB>> ]
-"7179" [label = <(GET_PRIMITIVE_FIELD(Float, obj),f-&gt;GetFloat(o))<SUB>1517</SUB>> ]
-"7134" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1517</SUB>> ]
-"7138" [label = <(GET_PRIMITIVE_FIELD(Float, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1517</SUB>> ]
-"7145" [label = <(RETURN,GET_PRIMITIVE_FIELD(Float, obj),GET_PRIMITIVE_FIELD(Float, obj))<SUB>1517</SUB>> ]
-"7154" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Float, obj))<SUB>1517</SUB>> ]
-"7163" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1517</SUB>> ]
-"7170" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1517</SUB>> ]
-"7180" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetFloat)<SUB>1517</SUB>> ]
-"7118" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1517</SUB>> ]
-"7139" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1517</SUB>> ]
-"7156" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1517</SUB>> ]
-"7165" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Float, obj))<SUB>1517</SUB>> ]
-"7171" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1517</SUB>> ]
-"7174" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Float, obj))<SUB>1517</SUB>> ]
-"7182" [label = <(FIELD_IDENTIFIER,GetFloat,GetFloat)<SUB>1517</SUB>> ]
-"7119" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1517</SUB>> ]
-"7123" [label = <(GET_PRIMITIVE_FIELD(Float, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1517</SUB>> ]
-"7130" [label = <(RETURN,GET_PRIMITIVE_FIELD(Float, obj),GET_PRIMITIVE_FIELD(Float, obj))<SUB>1517</SUB>> ]
-"7140" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1517</SUB>> ]
-"7142" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1517</SUB>> ]
-"7167" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1517</SUB>> ]
-"7173" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1517</SUB>> ]
-"7176" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1517</SUB>> ]
-"7124" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1517</SUB>> ]
-"7125" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1517</SUB>> ]
-"7127" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1517</SUB>> ]
-"7109" [label = <(METHOD,GetFloatField)<SUB>1516</SUB>> ]
-"7184" [label = <(METHOD_RETURN,jfloat)<SUB>1516</SUB>> ]
-  "7114" -> "7119" 
-  "7114" -> "7134" 
-  "7148" -> "7156" 
-  "7151" -> "7158" 
-  "7158" -> "7167" 
-  "7161" -> "7182" 
-  "7178" -> "7184" 
-  "7133" -> "7140" 
-  "7133" -> "7148" 
-  "7153" -> "7151" 
-  "7162" -> "7173" 
-  "7169" -> "7161" 
-  "7179" -> "7178" 
-  "7134" -> "7133" 
-  "7138" -> "7145" 
-  "7145" -> "7184" 
-  "7154" -> "7153" 
-  "7163" -> "7162" 
-  "7170" -> "7169" 
-  "7180" -> "7179" 
-  "7118" -> "7125" 
-  "7118" -> "7134" 
-  "7139" -> "7138" 
-  "7156" -> "7154" 
-  "7165" -> "7163" 
-  "7171" -> "7176" 
-  "7174" -> "7170" 
-  "7182" -> "7180" 
-  "7119" -> "7118" 
-  "7123" -> "7130" 
-  "7130" -> "7184" 
-  "7140" -> "7142" 
-  "7142" -> "7139" 
-  "7167" -> "7165" 
-  "7173" -> "7171" 
-  "7176" -> "7174" 
-  "7124" -> "7123" 
-  "7125" -> "7127" 
-  "7127" -> "7124" 
-  "7109" -> "7114" 
+digraph "GetStaticCharField" {  
+"7169" [label = <(GET_STATIC_PRIMITIVE_FIELD,GET_STATIC_PRIMITIVE_FIELD(Char))<SUB>1454</SUB>> ]
+"7187" [label = <(soa,ScopedObjectAccess)<SUB>1454</SUB>> ]
+"7190" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1454</SUB>> ]
+"7197" [label = <(NotifyGetField,NotifyGetField(f, nullptr))<SUB>1454</SUB>> ]
+"7200" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Char);,GET_STATIC_PRIMITIVE_FIELD(Char);)<SUB>1454</SUB>> ]
+"7192" [label = <(GET_STATIC_PRIMITIVE_FIELD(Char),jni::DecodeArtField(fid))<SUB>1454</SUB>> ]
+"7201" [label = <(GET_STATIC_PRIMITIVE_FIELD(Char),f-&gt;GetChar(f-&gt;GetDeclaringClass()))<SUB>1454</SUB>> ]
+"7193" [label = <(&lt;operator&gt;.fieldAccess,GET_STATIC_PRIMITIVE_FIELD(Char))<SUB>1454</SUB>> ]
+"7202" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetChar)<SUB>1454</SUB>> ]
+"7205" [label = <(GET_STATIC_PRIMITIVE_FIELD(Char),f-&gt;GetDeclaringClass())<SUB>1454</SUB>> ]
+"7172" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1454</SUB>> ]
+"7195" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1454</SUB>> ]
+"7204" [label = <(FIELD_IDENTIFIER,GetChar,GetChar)<SUB>1454</SUB>> ]
+"7206" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1454</SUB>> ]
+"7173" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1454</SUB>> ]
+"7177" [label = <(GET_STATIC_PRIMITIVE_FIELD(Char),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1454</SUB>> ]
+"7184" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Char),GET_STATIC_PRIMITIVE_FIELD(Char))<SUB>1454</SUB>> ]
+"7208" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1454</SUB>> ]
+"7178" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1454</SUB>> ]
+"7179" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1454</SUB>> ]
+"7181" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1454</SUB>> ]
+"7164" [label = <(METHOD,GetStaticCharField)<SUB>1453</SUB>> ]
+"7209" [label = <(METHOD_RETURN,jchar)<SUB>1453</SUB>> ]
+  "7169" -> "7173" 
+  "7169" -> "7187" 
+  "7187" -> "7195" 
+  "7190" -> "7197" 
+  "7197" -> "7204" 
+  "7200" -> "7209" 
+  "7192" -> "7190" 
+  "7201" -> "7200" 
+  "7193" -> "7192" 
+  "7202" -> "7208" 
+  "7205" -> "7201" 
+  "7172" -> "7179" 
+  "7172" -> "7187" 
+  "7195" -> "7193" 
+  "7204" -> "7202" 
+  "7206" -> "7205" 
+  "7173" -> "7172" 
+  "7177" -> "7184" 
+  "7184" -> "7209" 
+  "7208" -> "7206" 
+  "7178" -> "7177" 
+  "7179" -> "7181" 
+  "7181" -> "7178" 
+  "7164" -> "7169" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/132-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/132-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/132-cfg.dot	2023-06-07 19:33:45.437394685 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/132-cfg.dot	2023-06-07 19:33:52.017393985 +0330
@@ -1,80 +1,49 @@
-digraph "GetDoubleField" {  
-"7191" [label = <(GET_PRIMITIVE_FIELD,GET_PRIMITIVE_FIELD(Double, obj))<SUB>1521</SUB>> ]
-"7225" [label = <(soa,ScopedObjectAccess)<SUB>1521</SUB>> ]
-"7228" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1521</SUB>> ]
-"7235" [label = <(NotifyGetField,NotifyGetField(f, obj))<SUB>1521</SUB>> ]
-"7238" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1521</SUB>> ]
-"7255" [label = <(RETURN,GET_PRIMITIVE_FIELD(Double, obj);,GET_PRIMITIVE_FIELD(Double, obj);)<SUB>1521</SUB>> ]
-"7210" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1521</SUB>> ]
-"7230" [label = <(GET_PRIMITIVE_FIELD(Double, obj),jni::DecodeArtField(fid))<SUB>1521</SUB>> ]
-"7239" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1521</SUB>> ]
-"7246" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1521</SUB>> ]
-"7256" [label = <(GET_PRIMITIVE_FIELD(Double, obj),f-&gt;GetDouble(o))<SUB>1521</SUB>> ]
-"7211" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1521</SUB>> ]
-"7215" [label = <(GET_PRIMITIVE_FIELD(Double, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1521</SUB>> ]
-"7222" [label = <(RETURN,GET_PRIMITIVE_FIELD(Double, obj),GET_PRIMITIVE_FIELD(Double, obj))<SUB>1521</SUB>> ]
-"7231" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Double, obj))<SUB>1521</SUB>> ]
-"7240" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1521</SUB>> ]
-"7247" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1521</SUB>> ]
-"7257" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDouble)<SUB>1521</SUB>> ]
-"7195" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1521</SUB>> ]
-"7216" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1521</SUB>> ]
-"7233" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1521</SUB>> ]
-"7242" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Double, obj))<SUB>1521</SUB>> ]
-"7248" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1521</SUB>> ]
-"7251" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Double, obj))<SUB>1521</SUB>> ]
-"7259" [label = <(FIELD_IDENTIFIER,GetDouble,GetDouble)<SUB>1521</SUB>> ]
-"7196" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1521</SUB>> ]
-"7200" [label = <(GET_PRIMITIVE_FIELD(Double, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1521</SUB>> ]
-"7207" [label = <(RETURN,GET_PRIMITIVE_FIELD(Double, obj),GET_PRIMITIVE_FIELD(Double, obj))<SUB>1521</SUB>> ]
-"7217" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1521</SUB>> ]
-"7219" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1521</SUB>> ]
-"7244" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1521</SUB>> ]
-"7250" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1521</SUB>> ]
-"7253" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1521</SUB>> ]
-"7201" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1521</SUB>> ]
-"7202" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1521</SUB>> ]
-"7204" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1521</SUB>> ]
-"7186" [label = <(METHOD,GetDoubleField)<SUB>1520</SUB>> ]
-"7261" [label = <(METHOD_RETURN,jdouble)<SUB>1520</SUB>> ]
-  "7191" -> "7196" 
-  "7191" -> "7211" 
-  "7225" -> "7233" 
-  "7228" -> "7235" 
-  "7235" -> "7244" 
-  "7238" -> "7259" 
-  "7255" -> "7261" 
-  "7210" -> "7217" 
-  "7210" -> "7225" 
-  "7230" -> "7228" 
-  "7239" -> "7250" 
-  "7246" -> "7238" 
-  "7256" -> "7255" 
-  "7211" -> "7210" 
-  "7215" -> "7222" 
-  "7222" -> "7261" 
-  "7231" -> "7230" 
+digraph "GetStaticShortField" {  
+"7216" [label = <(GET_STATIC_PRIMITIVE_FIELD,GET_STATIC_PRIMITIVE_FIELD(Short))<SUB>1458</SUB>> ]
+"7234" [label = <(soa,ScopedObjectAccess)<SUB>1458</SUB>> ]
+"7237" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1458</SUB>> ]
+"7244" [label = <(NotifyGetField,NotifyGetField(f, nullptr))<SUB>1458</SUB>> ]
+"7247" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Short);,GET_STATIC_PRIMITIVE_FIELD(Short);)<SUB>1458</SUB>> ]
+"7239" [label = <(GET_STATIC_PRIMITIVE_FIELD(Short),jni::DecodeArtField(fid))<SUB>1458</SUB>> ]
+"7248" [label = <(GET_STATIC_PRIMITIVE_FIELD(Short),f-&gt;GetShort(f-&gt;GetDeclaringClass()))<SUB>1458</SUB>> ]
+"7240" [label = <(&lt;operator&gt;.fieldAccess,GET_STATIC_PRIMITIVE_FIELD(Short))<SUB>1458</SUB>> ]
+"7249" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetShort)<SUB>1458</SUB>> ]
+"7252" [label = <(GET_STATIC_PRIMITIVE_FIELD(Short),f-&gt;GetDeclaringClass())<SUB>1458</SUB>> ]
+"7219" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1458</SUB>> ]
+"7242" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1458</SUB>> ]
+"7251" [label = <(FIELD_IDENTIFIER,GetShort,GetShort)<SUB>1458</SUB>> ]
+"7253" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1458</SUB>> ]
+"7220" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1458</SUB>> ]
+"7224" [label = <(GET_STATIC_PRIMITIVE_FIELD(Short),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1458</SUB>> ]
+"7231" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Short),GET_STATIC_PRIMITIVE_FIELD(Short))<SUB>1458</SUB>> ]
+"7255" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1458</SUB>> ]
+"7225" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1458</SUB>> ]
+"7226" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1458</SUB>> ]
+"7228" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1458</SUB>> ]
+"7211" [label = <(METHOD,GetStaticShortField)<SUB>1457</SUB>> ]
+"7256" [label = <(METHOD_RETURN,jshort)<SUB>1457</SUB>> ]
+  "7216" -> "7220" 
+  "7216" -> "7234" 
+  "7234" -> "7242" 
+  "7237" -> "7244" 
+  "7244" -> "7251" 
+  "7247" -> "7256" 
+  "7239" -> "7237" 
+  "7248" -> "7247" 
   "7240" -> "7239" 
-  "7247" -> "7246" 
-  "7257" -> "7256" 
-  "7195" -> "7202" 
-  "7195" -> "7211" 
-  "7216" -> "7215" 
-  "7233" -> "7231" 
+  "7249" -> "7255" 
+  "7252" -> "7248" 
+  "7219" -> "7226" 
+  "7219" -> "7234" 
   "7242" -> "7240" 
-  "7248" -> "7253" 
-  "7251" -> "7247" 
-  "7259" -> "7257" 
-  "7196" -> "7195" 
-  "7200" -> "7207" 
-  "7207" -> "7261" 
-  "7217" -> "7219" 
-  "7219" -> "7216" 
-  "7244" -> "7242" 
-  "7250" -> "7248" 
-  "7253" -> "7251" 
-  "7201" -> "7200" 
-  "7202" -> "7204" 
-  "7204" -> "7201" 
-  "7186" -> "7191" 
+  "7251" -> "7249" 
+  "7253" -> "7252" 
+  "7220" -> "7219" 
+  "7224" -> "7231" 
+  "7231" -> "7256" 
+  "7255" -> "7253" 
+  "7225" -> "7224" 
+  "7226" -> "7228" 
+  "7228" -> "7225" 
+  "7211" -> "7216" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/133-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/133-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/133-cfg.dot	2023-06-07 19:33:45.437394685 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/133-cfg.dot	2023-06-07 19:33:52.017393985 +0330
@@ -1,49 +1,49 @@
-digraph "GetStaticBooleanField" {  
-"7268" [label = <(GET_STATIC_PRIMITIVE_FIELD,GET_STATIC_PRIMITIVE_FIELD(Boolean))<SUB>1525</SUB>> ]
-"7286" [label = <(soa,ScopedObjectAccess)<SUB>1525</SUB>> ]
-"7289" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1525</SUB>> ]
-"7296" [label = <(NotifyGetField,NotifyGetField(f, nullptr))<SUB>1525</SUB>> ]
-"7299" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Boolean);,GET_STATIC_PRIMITIVE_FIELD(Boolean);)<SUB>1525</SUB>> ]
-"7291" [label = <(GET_STATIC_PRIMITIVE_FIELD(Boolean),jni::DecodeArtField(fid))<SUB>1525</SUB>> ]
-"7300" [label = <(GET_STATIC_PRIMITIVE_FIELD(Boolean),f-&gt;GetBoolean(f-&gt;GetDeclaringClass()))<SUB>1525</SUB>> ]
-"7292" [label = <(&lt;operator&gt;.fieldAccess,GET_STATIC_PRIMITIVE_FIELD(Boolean))<SUB>1525</SUB>> ]
-"7301" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetBoolean)<SUB>1525</SUB>> ]
-"7304" [label = <(GET_STATIC_PRIMITIVE_FIELD(Boolean),f-&gt;GetDeclaringClass())<SUB>1525</SUB>> ]
-"7271" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1525</SUB>> ]
-"7294" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1525</SUB>> ]
-"7303" [label = <(FIELD_IDENTIFIER,GetBoolean,GetBoolean)<SUB>1525</SUB>> ]
-"7305" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1525</SUB>> ]
-"7272" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1525</SUB>> ]
-"7276" [label = <(GET_STATIC_PRIMITIVE_FIELD(Boolean),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1525</SUB>> ]
-"7283" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Boolean),GET_STATIC_PRIMITIVE_FIELD(Boolean))<SUB>1525</SUB>> ]
-"7307" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1525</SUB>> ]
-"7277" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1525</SUB>> ]
-"7278" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1525</SUB>> ]
-"7280" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1525</SUB>> ]
-"7263" [label = <(METHOD,GetStaticBooleanField)<SUB>1524</SUB>> ]
-"7308" [label = <(METHOD_RETURN,jboolean)<SUB>1524</SUB>> ]
-  "7268" -> "7272" 
-  "7268" -> "7286" 
-  "7286" -> "7294" 
-  "7289" -> "7296" 
-  "7296" -> "7303" 
-  "7299" -> "7308" 
-  "7291" -> "7289" 
+digraph "GetStaticIntField" {  
+"7263" [label = <(GET_STATIC_PRIMITIVE_FIELD,GET_STATIC_PRIMITIVE_FIELD(Int))<SUB>1462</SUB>> ]
+"7281" [label = <(soa,ScopedObjectAccess)<SUB>1462</SUB>> ]
+"7284" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1462</SUB>> ]
+"7291" [label = <(NotifyGetField,NotifyGetField(f, nullptr))<SUB>1462</SUB>> ]
+"7294" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Int);,GET_STATIC_PRIMITIVE_FIELD(Int);)<SUB>1462</SUB>> ]
+"7286" [label = <(GET_STATIC_PRIMITIVE_FIELD(Int),jni::DecodeArtField(fid))<SUB>1462</SUB>> ]
+"7295" [label = <(GET_STATIC_PRIMITIVE_FIELD(Int),f-&gt;GetInt(f-&gt;GetDeclaringClass()))<SUB>1462</SUB>> ]
+"7287" [label = <(&lt;operator&gt;.fieldAccess,GET_STATIC_PRIMITIVE_FIELD(Int))<SUB>1462</SUB>> ]
+"7296" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetInt)<SUB>1462</SUB>> ]
+"7299" [label = <(GET_STATIC_PRIMITIVE_FIELD(Int),f-&gt;GetDeclaringClass())<SUB>1462</SUB>> ]
+"7266" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1462</SUB>> ]
+"7289" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1462</SUB>> ]
+"7298" [label = <(FIELD_IDENTIFIER,GetInt,GetInt)<SUB>1462</SUB>> ]
+"7300" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1462</SUB>> ]
+"7267" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1462</SUB>> ]
+"7271" [label = <(GET_STATIC_PRIMITIVE_FIELD(Int),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1462</SUB>> ]
+"7278" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Int),GET_STATIC_PRIMITIVE_FIELD(Int))<SUB>1462</SUB>> ]
+"7302" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1462</SUB>> ]
+"7272" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1462</SUB>> ]
+"7273" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1462</SUB>> ]
+"7275" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1462</SUB>> ]
+"7258" [label = <(METHOD,GetStaticIntField)<SUB>1461</SUB>> ]
+"7303" [label = <(METHOD_RETURN,jint)<SUB>1461</SUB>> ]
+  "7263" -> "7267" 
+  "7263" -> "7281" 
+  "7281" -> "7289" 
+  "7284" -> "7291" 
+  "7291" -> "7298" 
+  "7294" -> "7303" 
+  "7286" -> "7284" 
+  "7295" -> "7294" 
+  "7287" -> "7286" 
+  "7296" -> "7302" 
+  "7299" -> "7295" 
+  "7266" -> "7273" 
+  "7266" -> "7281" 
+  "7289" -> "7287" 
+  "7298" -> "7296" 
   "7300" -> "7299" 
-  "7292" -> "7291" 
-  "7301" -> "7307" 
-  "7304" -> "7300" 
+  "7267" -> "7266" 
   "7271" -> "7278" 
-  "7271" -> "7286" 
-  "7294" -> "7292" 
-  "7303" -> "7301" 
-  "7305" -> "7304" 
+  "7278" -> "7303" 
+  "7302" -> "7300" 
   "7272" -> "7271" 
-  "7276" -> "7283" 
-  "7283" -> "7308" 
-  "7307" -> "7305" 
-  "7277" -> "7276" 
-  "7278" -> "7280" 
-  "7280" -> "7277" 
-  "7263" -> "7268" 
+  "7273" -> "7275" 
+  "7275" -> "7272" 
+  "7258" -> "7263" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/134-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/134-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/134-cfg.dot	2023-06-07 19:33:45.437394685 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/134-cfg.dot	2023-06-07 19:33:52.017393985 +0330
@@ -1,49 +1,49 @@
-digraph "GetStaticByteField" {  
-"7315" [label = <(GET_STATIC_PRIMITIVE_FIELD,GET_STATIC_PRIMITIVE_FIELD(Byte))<SUB>1529</SUB>> ]
-"7333" [label = <(soa,ScopedObjectAccess)<SUB>1529</SUB>> ]
-"7336" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1529</SUB>> ]
-"7343" [label = <(NotifyGetField,NotifyGetField(f, nullptr))<SUB>1529</SUB>> ]
-"7346" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Byte);,GET_STATIC_PRIMITIVE_FIELD(Byte);)<SUB>1529</SUB>> ]
-"7338" [label = <(GET_STATIC_PRIMITIVE_FIELD(Byte),jni::DecodeArtField(fid))<SUB>1529</SUB>> ]
-"7347" [label = <(GET_STATIC_PRIMITIVE_FIELD(Byte),f-&gt;GetByte(f-&gt;GetDeclaringClass()))<SUB>1529</SUB>> ]
-"7339" [label = <(&lt;operator&gt;.fieldAccess,GET_STATIC_PRIMITIVE_FIELD(Byte))<SUB>1529</SUB>> ]
-"7348" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetByte)<SUB>1529</SUB>> ]
-"7351" [label = <(GET_STATIC_PRIMITIVE_FIELD(Byte),f-&gt;GetDeclaringClass())<SUB>1529</SUB>> ]
-"7318" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1529</SUB>> ]
-"7341" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1529</SUB>> ]
-"7350" [label = <(FIELD_IDENTIFIER,GetByte,GetByte)<SUB>1529</SUB>> ]
-"7352" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1529</SUB>> ]
-"7319" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1529</SUB>> ]
-"7323" [label = <(GET_STATIC_PRIMITIVE_FIELD(Byte),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1529</SUB>> ]
-"7330" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Byte),GET_STATIC_PRIMITIVE_FIELD(Byte))<SUB>1529</SUB>> ]
-"7354" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1529</SUB>> ]
-"7324" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1529</SUB>> ]
-"7325" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1529</SUB>> ]
-"7327" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1529</SUB>> ]
-"7310" [label = <(METHOD,GetStaticByteField)<SUB>1528</SUB>> ]
-"7355" [label = <(METHOD_RETURN,jbyte)<SUB>1528</SUB>> ]
-  "7315" -> "7319" 
-  "7315" -> "7333" 
-  "7333" -> "7341" 
-  "7336" -> "7343" 
-  "7343" -> "7350" 
-  "7346" -> "7355" 
-  "7338" -> "7336" 
+digraph "GetStaticLongField" {  
+"7310" [label = <(GET_STATIC_PRIMITIVE_FIELD,GET_STATIC_PRIMITIVE_FIELD(Long))<SUB>1466</SUB>> ]
+"7328" [label = <(soa,ScopedObjectAccess)<SUB>1466</SUB>> ]
+"7331" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1466</SUB>> ]
+"7338" [label = <(NotifyGetField,NotifyGetField(f, nullptr))<SUB>1466</SUB>> ]
+"7341" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Long);,GET_STATIC_PRIMITIVE_FIELD(Long);)<SUB>1466</SUB>> ]
+"7333" [label = <(GET_STATIC_PRIMITIVE_FIELD(Long),jni::DecodeArtField(fid))<SUB>1466</SUB>> ]
+"7342" [label = <(GET_STATIC_PRIMITIVE_FIELD(Long),f-&gt;GetLong(f-&gt;GetDeclaringClass()))<SUB>1466</SUB>> ]
+"7334" [label = <(&lt;operator&gt;.fieldAccess,GET_STATIC_PRIMITIVE_FIELD(Long))<SUB>1466</SUB>> ]
+"7343" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetLong)<SUB>1466</SUB>> ]
+"7346" [label = <(GET_STATIC_PRIMITIVE_FIELD(Long),f-&gt;GetDeclaringClass())<SUB>1466</SUB>> ]
+"7313" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1466</SUB>> ]
+"7336" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1466</SUB>> ]
+"7345" [label = <(FIELD_IDENTIFIER,GetLong,GetLong)<SUB>1466</SUB>> ]
+"7347" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1466</SUB>> ]
+"7314" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1466</SUB>> ]
+"7318" [label = <(GET_STATIC_PRIMITIVE_FIELD(Long),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1466</SUB>> ]
+"7325" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Long),GET_STATIC_PRIMITIVE_FIELD(Long))<SUB>1466</SUB>> ]
+"7349" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1466</SUB>> ]
+"7319" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1466</SUB>> ]
+"7320" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1466</SUB>> ]
+"7322" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1466</SUB>> ]
+"7305" [label = <(METHOD,GetStaticLongField)<SUB>1465</SUB>> ]
+"7350" [label = <(METHOD_RETURN,jlong)<SUB>1465</SUB>> ]
+  "7310" -> "7314" 
+  "7310" -> "7328" 
+  "7328" -> "7336" 
+  "7331" -> "7338" 
+  "7338" -> "7345" 
+  "7341" -> "7350" 
+  "7333" -> "7331" 
+  "7342" -> "7341" 
+  "7334" -> "7333" 
+  "7343" -> "7349" 
+  "7346" -> "7342" 
+  "7313" -> "7320" 
+  "7313" -> "7328" 
+  "7336" -> "7334" 
+  "7345" -> "7343" 
   "7347" -> "7346" 
-  "7339" -> "7338" 
-  "7348" -> "7354" 
-  "7351" -> "7347" 
+  "7314" -> "7313" 
   "7318" -> "7325" 
-  "7318" -> "7333" 
-  "7341" -> "7339" 
-  "7350" -> "7348" 
-  "7352" -> "7351" 
+  "7325" -> "7350" 
+  "7349" -> "7347" 
   "7319" -> "7318" 
-  "7323" -> "7330" 
-  "7330" -> "7355" 
-  "7354" -> "7352" 
-  "7324" -> "7323" 
-  "7325" -> "7327" 
-  "7327" -> "7324" 
-  "7310" -> "7315" 
+  "7320" -> "7322" 
+  "7322" -> "7319" 
+  "7305" -> "7310" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/135-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/135-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/135-cfg.dot	2023-06-07 19:33:45.437394685 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/135-cfg.dot	2023-06-07 19:33:52.017393985 +0330
@@ -1,49 +1,49 @@
-digraph "GetStaticCharField" {  
-"7362" [label = <(GET_STATIC_PRIMITIVE_FIELD,GET_STATIC_PRIMITIVE_FIELD(Char))<SUB>1533</SUB>> ]
-"7380" [label = <(soa,ScopedObjectAccess)<SUB>1533</SUB>> ]
-"7383" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1533</SUB>> ]
-"7390" [label = <(NotifyGetField,NotifyGetField(f, nullptr))<SUB>1533</SUB>> ]
-"7393" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Char);,GET_STATIC_PRIMITIVE_FIELD(Char);)<SUB>1533</SUB>> ]
-"7385" [label = <(GET_STATIC_PRIMITIVE_FIELD(Char),jni::DecodeArtField(fid))<SUB>1533</SUB>> ]
-"7394" [label = <(GET_STATIC_PRIMITIVE_FIELD(Char),f-&gt;GetChar(f-&gt;GetDeclaringClass()))<SUB>1533</SUB>> ]
-"7386" [label = <(&lt;operator&gt;.fieldAccess,GET_STATIC_PRIMITIVE_FIELD(Char))<SUB>1533</SUB>> ]
-"7395" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetChar)<SUB>1533</SUB>> ]
-"7398" [label = <(GET_STATIC_PRIMITIVE_FIELD(Char),f-&gt;GetDeclaringClass())<SUB>1533</SUB>> ]
-"7365" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1533</SUB>> ]
-"7388" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1533</SUB>> ]
-"7397" [label = <(FIELD_IDENTIFIER,GetChar,GetChar)<SUB>1533</SUB>> ]
-"7399" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1533</SUB>> ]
-"7366" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1533</SUB>> ]
-"7370" [label = <(GET_STATIC_PRIMITIVE_FIELD(Char),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1533</SUB>> ]
-"7377" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Char),GET_STATIC_PRIMITIVE_FIELD(Char))<SUB>1533</SUB>> ]
-"7401" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1533</SUB>> ]
-"7371" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1533</SUB>> ]
-"7372" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1533</SUB>> ]
-"7374" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1533</SUB>> ]
-"7357" [label = <(METHOD,GetStaticCharField)<SUB>1532</SUB>> ]
-"7402" [label = <(METHOD_RETURN,jchar)<SUB>1532</SUB>> ]
-  "7362" -> "7366" 
-  "7362" -> "7380" 
-  "7380" -> "7388" 
-  "7383" -> "7390" 
-  "7390" -> "7397" 
-  "7393" -> "7402" 
-  "7385" -> "7383" 
+digraph "GetStaticFloatField" {  
+"7357" [label = <(GET_STATIC_PRIMITIVE_FIELD,GET_STATIC_PRIMITIVE_FIELD(Float))<SUB>1470</SUB>> ]
+"7375" [label = <(soa,ScopedObjectAccess)<SUB>1470</SUB>> ]
+"7378" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1470</SUB>> ]
+"7385" [label = <(NotifyGetField,NotifyGetField(f, nullptr))<SUB>1470</SUB>> ]
+"7388" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Float);,GET_STATIC_PRIMITIVE_FIELD(Float);)<SUB>1470</SUB>> ]
+"7380" [label = <(GET_STATIC_PRIMITIVE_FIELD(Float),jni::DecodeArtField(fid))<SUB>1470</SUB>> ]
+"7389" [label = <(GET_STATIC_PRIMITIVE_FIELD(Float),f-&gt;GetFloat(f-&gt;GetDeclaringClass()))<SUB>1470</SUB>> ]
+"7381" [label = <(&lt;operator&gt;.fieldAccess,GET_STATIC_PRIMITIVE_FIELD(Float))<SUB>1470</SUB>> ]
+"7390" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetFloat)<SUB>1470</SUB>> ]
+"7393" [label = <(GET_STATIC_PRIMITIVE_FIELD(Float),f-&gt;GetDeclaringClass())<SUB>1470</SUB>> ]
+"7360" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1470</SUB>> ]
+"7383" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1470</SUB>> ]
+"7392" [label = <(FIELD_IDENTIFIER,GetFloat,GetFloat)<SUB>1470</SUB>> ]
+"7394" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1470</SUB>> ]
+"7361" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1470</SUB>> ]
+"7365" [label = <(GET_STATIC_PRIMITIVE_FIELD(Float),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1470</SUB>> ]
+"7372" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Float),GET_STATIC_PRIMITIVE_FIELD(Float))<SUB>1470</SUB>> ]
+"7396" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1470</SUB>> ]
+"7366" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1470</SUB>> ]
+"7367" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1470</SUB>> ]
+"7369" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1470</SUB>> ]
+"7352" [label = <(METHOD,GetStaticFloatField)<SUB>1469</SUB>> ]
+"7397" [label = <(METHOD_RETURN,jfloat)<SUB>1469</SUB>> ]
+  "7357" -> "7361" 
+  "7357" -> "7375" 
+  "7375" -> "7383" 
+  "7378" -> "7385" 
+  "7385" -> "7392" 
+  "7388" -> "7397" 
+  "7380" -> "7378" 
+  "7389" -> "7388" 
+  "7381" -> "7380" 
+  "7390" -> "7396" 
+  "7393" -> "7389" 
+  "7360" -> "7367" 
+  "7360" -> "7375" 
+  "7383" -> "7381" 
+  "7392" -> "7390" 
   "7394" -> "7393" 
-  "7386" -> "7385" 
-  "7395" -> "7401" 
-  "7398" -> "7394" 
+  "7361" -> "7360" 
   "7365" -> "7372" 
-  "7365" -> "7380" 
-  "7388" -> "7386" 
-  "7397" -> "7395" 
-  "7399" -> "7398" 
+  "7372" -> "7397" 
+  "7396" -> "7394" 
   "7366" -> "7365" 
-  "7370" -> "7377" 
-  "7377" -> "7402" 
-  "7401" -> "7399" 
-  "7371" -> "7370" 
-  "7372" -> "7374" 
-  "7374" -> "7371" 
-  "7357" -> "7362" 
+  "7367" -> "7369" 
+  "7369" -> "7366" 
+  "7352" -> "7357" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/136-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/136-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/136-cfg.dot	2023-06-07 19:33:45.437394685 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/136-cfg.dot	2023-06-07 19:33:52.017393985 +0330
@@ -1,49 +1,49 @@
-digraph "GetStaticShortField" {  
-"7409" [label = <(GET_STATIC_PRIMITIVE_FIELD,GET_STATIC_PRIMITIVE_FIELD(Short))<SUB>1537</SUB>> ]
-"7427" [label = <(soa,ScopedObjectAccess)<SUB>1537</SUB>> ]
-"7430" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1537</SUB>> ]
-"7437" [label = <(NotifyGetField,NotifyGetField(f, nullptr))<SUB>1537</SUB>> ]
-"7440" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Short);,GET_STATIC_PRIMITIVE_FIELD(Short);)<SUB>1537</SUB>> ]
-"7432" [label = <(GET_STATIC_PRIMITIVE_FIELD(Short),jni::DecodeArtField(fid))<SUB>1537</SUB>> ]
-"7441" [label = <(GET_STATIC_PRIMITIVE_FIELD(Short),f-&gt;GetShort(f-&gt;GetDeclaringClass()))<SUB>1537</SUB>> ]
-"7433" [label = <(&lt;operator&gt;.fieldAccess,GET_STATIC_PRIMITIVE_FIELD(Short))<SUB>1537</SUB>> ]
-"7442" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetShort)<SUB>1537</SUB>> ]
-"7445" [label = <(GET_STATIC_PRIMITIVE_FIELD(Short),f-&gt;GetDeclaringClass())<SUB>1537</SUB>> ]
-"7412" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1537</SUB>> ]
-"7435" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1537</SUB>> ]
-"7444" [label = <(FIELD_IDENTIFIER,GetShort,GetShort)<SUB>1537</SUB>> ]
-"7446" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1537</SUB>> ]
-"7413" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1537</SUB>> ]
-"7417" [label = <(GET_STATIC_PRIMITIVE_FIELD(Short),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1537</SUB>> ]
-"7424" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Short),GET_STATIC_PRIMITIVE_FIELD(Short))<SUB>1537</SUB>> ]
-"7448" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1537</SUB>> ]
-"7418" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1537</SUB>> ]
-"7419" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1537</SUB>> ]
-"7421" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1537</SUB>> ]
-"7404" [label = <(METHOD,GetStaticShortField)<SUB>1536</SUB>> ]
-"7449" [label = <(METHOD_RETURN,jshort)<SUB>1536</SUB>> ]
-  "7409" -> "7413" 
-  "7409" -> "7427" 
-  "7427" -> "7435" 
-  "7430" -> "7437" 
-  "7437" -> "7444" 
-  "7440" -> "7449" 
-  "7432" -> "7430" 
+digraph "GetStaticDoubleField" {  
+"7404" [label = <(GET_STATIC_PRIMITIVE_FIELD,GET_STATIC_PRIMITIVE_FIELD(Double))<SUB>1474</SUB>> ]
+"7422" [label = <(soa,ScopedObjectAccess)<SUB>1474</SUB>> ]
+"7425" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1474</SUB>> ]
+"7432" [label = <(NotifyGetField,NotifyGetField(f, nullptr))<SUB>1474</SUB>> ]
+"7435" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Double);,GET_STATIC_PRIMITIVE_FIELD(Double);)<SUB>1474</SUB>> ]
+"7427" [label = <(GET_STATIC_PRIMITIVE_FIELD(Double),jni::DecodeArtField(fid))<SUB>1474</SUB>> ]
+"7436" [label = <(GET_STATIC_PRIMITIVE_FIELD(Double),f-&gt;GetDouble(f-&gt;GetDeclaringClass()))<SUB>1474</SUB>> ]
+"7428" [label = <(&lt;operator&gt;.fieldAccess,GET_STATIC_PRIMITIVE_FIELD(Double))<SUB>1474</SUB>> ]
+"7437" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDouble)<SUB>1474</SUB>> ]
+"7440" [label = <(GET_STATIC_PRIMITIVE_FIELD(Double),f-&gt;GetDeclaringClass())<SUB>1474</SUB>> ]
+"7407" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1474</SUB>> ]
+"7430" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1474</SUB>> ]
+"7439" [label = <(FIELD_IDENTIFIER,GetDouble,GetDouble)<SUB>1474</SUB>> ]
+"7441" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1474</SUB>> ]
+"7408" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1474</SUB>> ]
+"7412" [label = <(GET_STATIC_PRIMITIVE_FIELD(Double),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1474</SUB>> ]
+"7419" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Double),GET_STATIC_PRIMITIVE_FIELD(Double))<SUB>1474</SUB>> ]
+"7443" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1474</SUB>> ]
+"7413" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1474</SUB>> ]
+"7414" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1474</SUB>> ]
+"7416" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1474</SUB>> ]
+"7399" [label = <(METHOD,GetStaticDoubleField)<SUB>1473</SUB>> ]
+"7444" [label = <(METHOD_RETURN,jdouble)<SUB>1473</SUB>> ]
+  "7404" -> "7408" 
+  "7404" -> "7422" 
+  "7422" -> "7430" 
+  "7425" -> "7432" 
+  "7432" -> "7439" 
+  "7435" -> "7444" 
+  "7427" -> "7425" 
+  "7436" -> "7435" 
+  "7428" -> "7427" 
+  "7437" -> "7443" 
+  "7440" -> "7436" 
+  "7407" -> "7414" 
+  "7407" -> "7422" 
+  "7430" -> "7428" 
+  "7439" -> "7437" 
   "7441" -> "7440" 
-  "7433" -> "7432" 
-  "7442" -> "7448" 
-  "7445" -> "7441" 
+  "7408" -> "7407" 
   "7412" -> "7419" 
-  "7412" -> "7427" 
-  "7435" -> "7433" 
-  "7444" -> "7442" 
-  "7446" -> "7445" 
+  "7419" -> "7444" 
+  "7443" -> "7441" 
   "7413" -> "7412" 
-  "7417" -> "7424" 
-  "7424" -> "7449" 
-  "7448" -> "7446" 
-  "7418" -> "7417" 
-  "7419" -> "7421" 
-  "7421" -> "7418" 
-  "7404" -> "7409" 
+  "7414" -> "7416" 
+  "7416" -> "7413" 
+  "7399" -> "7404" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/137-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/137-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/137-cfg.dot	2023-06-07 19:33:45.437394685 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/137-cfg.dot	2023-06-07 19:33:52.017393985 +0330
@@ -1,49 +1,90 @@
-digraph "GetStaticIntField" {  
-"7456" [label = <(GET_STATIC_PRIMITIVE_FIELD,GET_STATIC_PRIMITIVE_FIELD(Int))<SUB>1541</SUB>> ]
-"7474" [label = <(soa,ScopedObjectAccess)<SUB>1541</SUB>> ]
-"7477" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1541</SUB>> ]
-"7484" [label = <(NotifyGetField,NotifyGetField(f, nullptr))<SUB>1541</SUB>> ]
-"7487" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Int);,GET_STATIC_PRIMITIVE_FIELD(Int);)<SUB>1541</SUB>> ]
-"7479" [label = <(GET_STATIC_PRIMITIVE_FIELD(Int),jni::DecodeArtField(fid))<SUB>1541</SUB>> ]
-"7488" [label = <(GET_STATIC_PRIMITIVE_FIELD(Int),f-&gt;GetInt(f-&gt;GetDeclaringClass()))<SUB>1541</SUB>> ]
-"7480" [label = <(&lt;operator&gt;.fieldAccess,GET_STATIC_PRIMITIVE_FIELD(Int))<SUB>1541</SUB>> ]
-"7489" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetInt)<SUB>1541</SUB>> ]
-"7492" [label = <(GET_STATIC_PRIMITIVE_FIELD(Int),f-&gt;GetDeclaringClass())<SUB>1541</SUB>> ]
-"7459" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1541</SUB>> ]
-"7482" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1541</SUB>> ]
-"7491" [label = <(FIELD_IDENTIFIER,GetInt,GetInt)<SUB>1541</SUB>> ]
-"7493" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1541</SUB>> ]
-"7460" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1541</SUB>> ]
-"7464" [label = <(GET_STATIC_PRIMITIVE_FIELD(Int),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1541</SUB>> ]
-"7471" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Int),GET_STATIC_PRIMITIVE_FIELD(Int))<SUB>1541</SUB>> ]
-"7495" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1541</SUB>> ]
-"7465" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1541</SUB>> ]
-"7466" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1541</SUB>> ]
-"7468" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1541</SUB>> ]
-"7451" [label = <(METHOD,GetStaticIntField)<SUB>1540</SUB>> ]
-"7496" [label = <(METHOD_RETURN,jint)<SUB>1540</SUB>> ]
-  "7456" -> "7460" 
-  "7456" -> "7474" 
-  "7474" -> "7482" 
-  "7477" -> "7484" 
-  "7484" -> "7491" 
-  "7487" -> "7496" 
-  "7479" -> "7477" 
-  "7488" -> "7487" 
-  "7480" -> "7479" 
-  "7489" -> "7495" 
-  "7492" -> "7488" 
-  "7459" -> "7466" 
-  "7459" -> "7474" 
-  "7482" -> "7480" 
-  "7491" -> "7489" 
-  "7493" -> "7492" 
-  "7460" -> "7459" 
-  "7464" -> "7471" 
-  "7471" -> "7496" 
-  "7495" -> "7493" 
-  "7465" -> "7464" 
-  "7466" -> "7468" 
-  "7468" -> "7465" 
-  "7451" -> "7456" 
+digraph "SetBooleanField" {  
+"7452" [label = <(SET_PRIMITIVE_FIELD,SET_PRIMITIVE_FIELD(Boolean, obj, v))<SUB>1478</SUB>> ]
+"7484" [label = <(soa,ScopedObjectAccess)<SUB>1478</SUB>> ]
+"7487" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1478</SUB>> ]
+"7494" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, obj, JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Boolean, obj, v)&gt;(v)))<SUB>1478</SUB>> ]
+"7502" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1478</SUB>> ]
+"7519" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetBoolean &lt; false &gt; (o, v))<SUB>1478</SUB>> ]
+"7470" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1478</SUB>> ]
+"7489" [label = <(SET_PRIMITIVE_FIELD(Boolean, obj, v),jni::DecodeArtField(fid))<SUB>1478</SUB>> ]
+"7497" [label = <(SET_PRIMITIVE_FIELD(Boolean, obj, v),JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Boolean, obj, v)&gt;(v))<SUB>1478</SUB>> ]
+"7503" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1478</SUB>> ]
+"7510" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1478</SUB>> ]
+"7520" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetBoolean &lt; false)<SUB>1478</SUB>> ]
+"7525" [label = <(&lt;operator&gt;.bracketedPrimary,(o, v))<SUB>1478</SUB>> ]
+"7471" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1478</SUB>> ]
+"7475" [label = <(SET_PRIMITIVE_FIELD(Boolean, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1478</SUB>> ]
+"7482" [label = <(RETURN,SET_PRIMITIVE_FIELD(Boolean, obj, v),SET_PRIMITIVE_FIELD(Boolean, obj, v))<SUB>1478</SUB>> ]
+"7490" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Boolean, obj, v))<SUB>1478</SUB>> ]
+"7498" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Boolean, obj, v))<SUB>1478</SUB>> ]
+"7504" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1478</SUB>> ]
+"7511" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1478</SUB>> ]
+"7521" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetBoolean)<SUB>1478</SUB>> ]
+"7526" [label = <(&lt;operator&gt;.expressionList,o, v)<SUB>1478</SUB>> ]
+"7456" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1478</SUB>> ]
+"7476" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1478</SUB>> ]
+"7492" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1478</SUB>> ]
+"7500" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Boolean, obj, v)&gt;,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Boolean, obj, v)&gt;)<SUB>1478</SUB>> ]
+"7506" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Boolean, obj, v))<SUB>1478</SUB>> ]
+"7512" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1478</SUB>> ]
+"7515" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Boolean, obj, v))<SUB>1478</SUB>> ]
+"7523" [label = <(FIELD_IDENTIFIER,SetBoolean,SetBoolean)<SUB>1478</SUB>> ]
+"7457" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1478</SUB>> ]
+"7461" [label = <(SET_PRIMITIVE_FIELD(Boolean, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1478</SUB>> ]
+"7468" [label = <(RETURN,SET_PRIMITIVE_FIELD(Boolean, obj, v),SET_PRIMITIVE_FIELD(Boolean, obj, v))<SUB>1478</SUB>> ]
+"7477" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1478</SUB>> ]
+"7479" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1478</SUB>> ]
+"7508" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1478</SUB>> ]
+"7514" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1478</SUB>> ]
+"7517" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1478</SUB>> ]
+"7462" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1478</SUB>> ]
+"7463" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1478</SUB>> ]
+"7465" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1478</SUB>> ]
+"7446" [label = <(METHOD,SetBooleanField)<SUB>1477</SUB>> ]
+"7529" [label = <(METHOD_RETURN,void)<SUB>1477</SUB>> ]
+  "7452" -> "7457" 
+  "7452" -> "7471" 
+  "7484" -> "7492" 
+  "7487" -> "7500" 
+  "7494" -> "7508" 
+  "7502" -> "7523" 
+  "7519" -> "7529" 
+  "7470" -> "7477" 
+  "7470" -> "7484" 
+  "7489" -> "7487" 
+  "7497" -> "7494" 
+  "7503" -> "7514" 
+  "7510" -> "7502" 
+  "7520" -> "7526" 
+  "7525" -> "7519" 
+  "7471" -> "7470" 
+  "7475" -> "7482" 
+  "7482" -> "7529" 
+  "7490" -> "7489" 
+  "7498" -> "7497" 
+  "7504" -> "7503" 
+  "7511" -> "7510" 
+  "7521" -> "7520" 
+  "7526" -> "7525" 
+  "7456" -> "7463" 
+  "7456" -> "7471" 
+  "7476" -> "7475" 
+  "7492" -> "7490" 
+  "7500" -> "7498" 
+  "7506" -> "7504" 
+  "7512" -> "7517" 
+  "7515" -> "7511" 
+  "7523" -> "7521" 
+  "7457" -> "7456" 
+  "7461" -> "7468" 
+  "7468" -> "7529" 
+  "7477" -> "7479" 
+  "7479" -> "7476" 
+  "7508" -> "7506" 
+  "7514" -> "7512" 
+  "7517" -> "7515" 
+  "7462" -> "7461" 
+  "7463" -> "7465" 
+  "7465" -> "7462" 
+  "7446" -> "7452" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/138-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/138-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/138-cfg.dot	2023-06-07 19:33:45.437394685 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/138-cfg.dot	2023-06-07 19:33:52.017393985 +0330
@@ -1,49 +1,90 @@
-digraph "GetStaticLongField" {  
-"7503" [label = <(GET_STATIC_PRIMITIVE_FIELD,GET_STATIC_PRIMITIVE_FIELD(Long))<SUB>1545</SUB>> ]
-"7521" [label = <(soa,ScopedObjectAccess)<SUB>1545</SUB>> ]
-"7524" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1545</SUB>> ]
-"7531" [label = <(NotifyGetField,NotifyGetField(f, nullptr))<SUB>1545</SUB>> ]
-"7534" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Long);,GET_STATIC_PRIMITIVE_FIELD(Long);)<SUB>1545</SUB>> ]
-"7526" [label = <(GET_STATIC_PRIMITIVE_FIELD(Long),jni::DecodeArtField(fid))<SUB>1545</SUB>> ]
-"7535" [label = <(GET_STATIC_PRIMITIVE_FIELD(Long),f-&gt;GetLong(f-&gt;GetDeclaringClass()))<SUB>1545</SUB>> ]
-"7527" [label = <(&lt;operator&gt;.fieldAccess,GET_STATIC_PRIMITIVE_FIELD(Long))<SUB>1545</SUB>> ]
-"7536" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetLong)<SUB>1545</SUB>> ]
-"7539" [label = <(GET_STATIC_PRIMITIVE_FIELD(Long),f-&gt;GetDeclaringClass())<SUB>1545</SUB>> ]
-"7506" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1545</SUB>> ]
-"7529" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1545</SUB>> ]
-"7538" [label = <(FIELD_IDENTIFIER,GetLong,GetLong)<SUB>1545</SUB>> ]
-"7540" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1545</SUB>> ]
-"7507" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1545</SUB>> ]
-"7511" [label = <(GET_STATIC_PRIMITIVE_FIELD(Long),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1545</SUB>> ]
-"7518" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Long),GET_STATIC_PRIMITIVE_FIELD(Long))<SUB>1545</SUB>> ]
-"7542" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1545</SUB>> ]
-"7512" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1545</SUB>> ]
-"7513" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1545</SUB>> ]
-"7515" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1545</SUB>> ]
-"7498" [label = <(METHOD,GetStaticLongField)<SUB>1544</SUB>> ]
-"7543" [label = <(METHOD_RETURN,jlong)<SUB>1544</SUB>> ]
-  "7503" -> "7507" 
-  "7503" -> "7521" 
-  "7521" -> "7529" 
-  "7524" -> "7531" 
-  "7531" -> "7538" 
-  "7534" -> "7543" 
-  "7526" -> "7524" 
-  "7535" -> "7534" 
-  "7527" -> "7526" 
-  "7536" -> "7542" 
-  "7539" -> "7535" 
-  "7506" -> "7513" 
-  "7506" -> "7521" 
-  "7529" -> "7527" 
-  "7538" -> "7536" 
-  "7540" -> "7539" 
-  "7507" -> "7506" 
-  "7511" -> "7518" 
-  "7518" -> "7543" 
-  "7542" -> "7540" 
-  "7512" -> "7511" 
-  "7513" -> "7515" 
-  "7515" -> "7512" 
-  "7498" -> "7503" 
+digraph "SetByteField" {  
+"7537" [label = <(SET_PRIMITIVE_FIELD,SET_PRIMITIVE_FIELD(Byte, obj, v))<SUB>1482</SUB>> ]
+"7569" [label = <(soa,ScopedObjectAccess)<SUB>1482</SUB>> ]
+"7572" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1482</SUB>> ]
+"7579" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, obj, JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Byte, obj, v)&gt;(v)))<SUB>1482</SUB>> ]
+"7587" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1482</SUB>> ]
+"7604" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetByte &lt; false &gt; (o, v))<SUB>1482</SUB>> ]
+"7555" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1482</SUB>> ]
+"7574" [label = <(SET_PRIMITIVE_FIELD(Byte, obj, v),jni::DecodeArtField(fid))<SUB>1482</SUB>> ]
+"7582" [label = <(SET_PRIMITIVE_FIELD(Byte, obj, v),JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Byte, obj, v)&gt;(v))<SUB>1482</SUB>> ]
+"7588" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1482</SUB>> ]
+"7595" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1482</SUB>> ]
+"7605" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetByte &lt; false)<SUB>1482</SUB>> ]
+"7610" [label = <(&lt;operator&gt;.bracketedPrimary,(o, v))<SUB>1482</SUB>> ]
+"7556" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1482</SUB>> ]
+"7560" [label = <(SET_PRIMITIVE_FIELD(Byte, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1482</SUB>> ]
+"7567" [label = <(RETURN,SET_PRIMITIVE_FIELD(Byte, obj, v),SET_PRIMITIVE_FIELD(Byte, obj, v))<SUB>1482</SUB>> ]
+"7575" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Byte, obj, v))<SUB>1482</SUB>> ]
+"7583" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Byte, obj, v))<SUB>1482</SUB>> ]
+"7589" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1482</SUB>> ]
+"7596" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1482</SUB>> ]
+"7606" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetByte)<SUB>1482</SUB>> ]
+"7611" [label = <(&lt;operator&gt;.expressionList,o, v)<SUB>1482</SUB>> ]
+"7541" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1482</SUB>> ]
+"7561" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1482</SUB>> ]
+"7577" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1482</SUB>> ]
+"7585" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Byte, obj, v)&gt;,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Byte, obj, v)&gt;)<SUB>1482</SUB>> ]
+"7591" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Byte, obj, v))<SUB>1482</SUB>> ]
+"7597" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1482</SUB>> ]
+"7600" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Byte, obj, v))<SUB>1482</SUB>> ]
+"7608" [label = <(FIELD_IDENTIFIER,SetByte,SetByte)<SUB>1482</SUB>> ]
+"7542" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1482</SUB>> ]
+"7546" [label = <(SET_PRIMITIVE_FIELD(Byte, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1482</SUB>> ]
+"7553" [label = <(RETURN,SET_PRIMITIVE_FIELD(Byte, obj, v),SET_PRIMITIVE_FIELD(Byte, obj, v))<SUB>1482</SUB>> ]
+"7562" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1482</SUB>> ]
+"7564" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1482</SUB>> ]
+"7593" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1482</SUB>> ]
+"7599" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1482</SUB>> ]
+"7602" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1482</SUB>> ]
+"7547" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1482</SUB>> ]
+"7548" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1482</SUB>> ]
+"7550" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1482</SUB>> ]
+"7531" [label = <(METHOD,SetByteField)<SUB>1481</SUB>> ]
+"7614" [label = <(METHOD_RETURN,void)<SUB>1481</SUB>> ]
+  "7537" -> "7542" 
+  "7537" -> "7556" 
+  "7569" -> "7577" 
+  "7572" -> "7585" 
+  "7579" -> "7593" 
+  "7587" -> "7608" 
+  "7604" -> "7614" 
+  "7555" -> "7562" 
+  "7555" -> "7569" 
+  "7574" -> "7572" 
+  "7582" -> "7579" 
+  "7588" -> "7599" 
+  "7595" -> "7587" 
+  "7605" -> "7611" 
+  "7610" -> "7604" 
+  "7556" -> "7555" 
+  "7560" -> "7567" 
+  "7567" -> "7614" 
+  "7575" -> "7574" 
+  "7583" -> "7582" 
+  "7589" -> "7588" 
+  "7596" -> "7595" 
+  "7606" -> "7605" 
+  "7611" -> "7610" 
+  "7541" -> "7548" 
+  "7541" -> "7556" 
+  "7561" -> "7560" 
+  "7577" -> "7575" 
+  "7585" -> "7583" 
+  "7591" -> "7589" 
+  "7597" -> "7602" 
+  "7600" -> "7596" 
+  "7608" -> "7606" 
+  "7542" -> "7541" 
+  "7546" -> "7553" 
+  "7553" -> "7614" 
+  "7562" -> "7564" 
+  "7564" -> "7561" 
+  "7593" -> "7591" 
+  "7599" -> "7597" 
+  "7602" -> "7600" 
+  "7547" -> "7546" 
+  "7548" -> "7550" 
+  "7550" -> "7547" 
+  "7531" -> "7537" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/139-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/139-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/139-cfg.dot	2023-06-07 19:33:45.437394685 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/139-cfg.dot	2023-06-07 19:33:52.017393985 +0330
@@ -1,49 +1,90 @@
-digraph "GetStaticFloatField" {  
-"7550" [label = <(GET_STATIC_PRIMITIVE_FIELD,GET_STATIC_PRIMITIVE_FIELD(Float))<SUB>1549</SUB>> ]
-"7568" [label = <(soa,ScopedObjectAccess)<SUB>1549</SUB>> ]
-"7571" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1549</SUB>> ]
-"7578" [label = <(NotifyGetField,NotifyGetField(f, nullptr))<SUB>1549</SUB>> ]
-"7581" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Float);,GET_STATIC_PRIMITIVE_FIELD(Float);)<SUB>1549</SUB>> ]
-"7573" [label = <(GET_STATIC_PRIMITIVE_FIELD(Float),jni::DecodeArtField(fid))<SUB>1549</SUB>> ]
-"7582" [label = <(GET_STATIC_PRIMITIVE_FIELD(Float),f-&gt;GetFloat(f-&gt;GetDeclaringClass()))<SUB>1549</SUB>> ]
-"7574" [label = <(&lt;operator&gt;.fieldAccess,GET_STATIC_PRIMITIVE_FIELD(Float))<SUB>1549</SUB>> ]
-"7583" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetFloat)<SUB>1549</SUB>> ]
-"7586" [label = <(GET_STATIC_PRIMITIVE_FIELD(Float),f-&gt;GetDeclaringClass())<SUB>1549</SUB>> ]
-"7553" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1549</SUB>> ]
-"7576" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1549</SUB>> ]
-"7585" [label = <(FIELD_IDENTIFIER,GetFloat,GetFloat)<SUB>1549</SUB>> ]
-"7587" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1549</SUB>> ]
-"7554" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1549</SUB>> ]
-"7558" [label = <(GET_STATIC_PRIMITIVE_FIELD(Float),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1549</SUB>> ]
-"7565" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Float),GET_STATIC_PRIMITIVE_FIELD(Float))<SUB>1549</SUB>> ]
-"7589" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1549</SUB>> ]
-"7559" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1549</SUB>> ]
-"7560" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1549</SUB>> ]
-"7562" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1549</SUB>> ]
-"7545" [label = <(METHOD,GetStaticFloatField)<SUB>1548</SUB>> ]
-"7590" [label = <(METHOD_RETURN,jfloat)<SUB>1548</SUB>> ]
-  "7550" -> "7554" 
-  "7550" -> "7568" 
-  "7568" -> "7576" 
-  "7571" -> "7578" 
-  "7578" -> "7585" 
-  "7581" -> "7590" 
-  "7573" -> "7571" 
-  "7582" -> "7581" 
-  "7574" -> "7573" 
-  "7583" -> "7589" 
-  "7586" -> "7582" 
-  "7553" -> "7560" 
-  "7553" -> "7568" 
-  "7576" -> "7574" 
-  "7585" -> "7583" 
-  "7587" -> "7586" 
-  "7554" -> "7553" 
-  "7558" -> "7565" 
-  "7565" -> "7590" 
-  "7589" -> "7587" 
-  "7559" -> "7558" 
-  "7560" -> "7562" 
-  "7562" -> "7559" 
-  "7545" -> "7550" 
+digraph "SetCharField" {  
+"7622" [label = <(SET_PRIMITIVE_FIELD,SET_PRIMITIVE_FIELD(Char, obj, v))<SUB>1486</SUB>> ]
+"7654" [label = <(soa,ScopedObjectAccess)<SUB>1486</SUB>> ]
+"7657" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1486</SUB>> ]
+"7664" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, obj, JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Char, obj, v)&gt;(v)))<SUB>1486</SUB>> ]
+"7672" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1486</SUB>> ]
+"7689" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetChar &lt; false &gt; (o, v))<SUB>1486</SUB>> ]
+"7640" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1486</SUB>> ]
+"7659" [label = <(SET_PRIMITIVE_FIELD(Char, obj, v),jni::DecodeArtField(fid))<SUB>1486</SUB>> ]
+"7667" [label = <(SET_PRIMITIVE_FIELD(Char, obj, v),JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Char, obj, v)&gt;(v))<SUB>1486</SUB>> ]
+"7673" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1486</SUB>> ]
+"7680" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1486</SUB>> ]
+"7690" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetChar &lt; false)<SUB>1486</SUB>> ]
+"7695" [label = <(&lt;operator&gt;.bracketedPrimary,(o, v))<SUB>1486</SUB>> ]
+"7641" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1486</SUB>> ]
+"7645" [label = <(SET_PRIMITIVE_FIELD(Char, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1486</SUB>> ]
+"7652" [label = <(RETURN,SET_PRIMITIVE_FIELD(Char, obj, v),SET_PRIMITIVE_FIELD(Char, obj, v))<SUB>1486</SUB>> ]
+"7660" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Char, obj, v))<SUB>1486</SUB>> ]
+"7668" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Char, obj, v))<SUB>1486</SUB>> ]
+"7674" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1486</SUB>> ]
+"7681" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1486</SUB>> ]
+"7691" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetChar)<SUB>1486</SUB>> ]
+"7696" [label = <(&lt;operator&gt;.expressionList,o, v)<SUB>1486</SUB>> ]
+"7626" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1486</SUB>> ]
+"7646" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1486</SUB>> ]
+"7662" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1486</SUB>> ]
+"7670" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Char, obj, v)&gt;,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Char, obj, v)&gt;)<SUB>1486</SUB>> ]
+"7676" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Char, obj, v))<SUB>1486</SUB>> ]
+"7682" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1486</SUB>> ]
+"7685" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Char, obj, v))<SUB>1486</SUB>> ]
+"7693" [label = <(FIELD_IDENTIFIER,SetChar,SetChar)<SUB>1486</SUB>> ]
+"7627" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1486</SUB>> ]
+"7631" [label = <(SET_PRIMITIVE_FIELD(Char, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1486</SUB>> ]
+"7638" [label = <(RETURN,SET_PRIMITIVE_FIELD(Char, obj, v),SET_PRIMITIVE_FIELD(Char, obj, v))<SUB>1486</SUB>> ]
+"7647" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1486</SUB>> ]
+"7649" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1486</SUB>> ]
+"7678" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1486</SUB>> ]
+"7684" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1486</SUB>> ]
+"7687" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1486</SUB>> ]
+"7632" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1486</SUB>> ]
+"7633" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1486</SUB>> ]
+"7635" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1486</SUB>> ]
+"7616" [label = <(METHOD,SetCharField)<SUB>1485</SUB>> ]
+"7699" [label = <(METHOD_RETURN,void)<SUB>1485</SUB>> ]
+  "7622" -> "7627" 
+  "7622" -> "7641" 
+  "7654" -> "7662" 
+  "7657" -> "7670" 
+  "7664" -> "7678" 
+  "7672" -> "7693" 
+  "7689" -> "7699" 
+  "7640" -> "7647" 
+  "7640" -> "7654" 
+  "7659" -> "7657" 
+  "7667" -> "7664" 
+  "7673" -> "7684" 
+  "7680" -> "7672" 
+  "7690" -> "7696" 
+  "7695" -> "7689" 
+  "7641" -> "7640" 
+  "7645" -> "7652" 
+  "7652" -> "7699" 
+  "7660" -> "7659" 
+  "7668" -> "7667" 
+  "7674" -> "7673" 
+  "7681" -> "7680" 
+  "7691" -> "7690" 
+  "7696" -> "7695" 
+  "7626" -> "7633" 
+  "7626" -> "7641" 
+  "7646" -> "7645" 
+  "7662" -> "7660" 
+  "7670" -> "7668" 
+  "7676" -> "7674" 
+  "7682" -> "7687" 
+  "7685" -> "7681" 
+  "7693" -> "7691" 
+  "7627" -> "7626" 
+  "7631" -> "7638" 
+  "7638" -> "7699" 
+  "7647" -> "7649" 
+  "7649" -> "7646" 
+  "7678" -> "7676" 
+  "7684" -> "7682" 
+  "7687" -> "7685" 
+  "7632" -> "7631" 
+  "7633" -> "7635" 
+  "7635" -> "7632" 
+  "7616" -> "7622" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/14-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/14-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/14-cfg.dot	2023-06-07 19:33:45.337394696 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/14-cfg.dot	2023-06-07 19:33:51.917393996 +0330
@@ -1,5 +1,5 @@
-digraph "ReportInvalidJNINativeMethod" {  
-"363" [label = <(METHOD,ReportInvalidJNINativeMethod)<SUB>295</SUB>> ]
-"369" [label = <(METHOD_RETURN,void)<SUB>295</SUB>> ]
-  "363" -> "369" 
+digraph "GetClassLoader" {  
+"239" [label = <(METHOD,GetClassLoader)<SUB>268</SUB>> ]
+"242" [label = <(METHOD_RETURN,ANY)<SUB>268</SUB>> ]
+  "239" -> "242" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/140-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/140-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/140-cfg.dot	2023-06-07 19:33:45.437394685 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/140-cfg.dot	2023-06-07 19:33:52.017393985 +0330
@@ -1,49 +1,90 @@
-digraph "GetStaticDoubleField" {  
-"7597" [label = <(GET_STATIC_PRIMITIVE_FIELD,GET_STATIC_PRIMITIVE_FIELD(Double))<SUB>1553</SUB>> ]
-"7615" [label = <(soa,ScopedObjectAccess)<SUB>1553</SUB>> ]
-"7618" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1553</SUB>> ]
-"7625" [label = <(NotifyGetField,NotifyGetField(f, nullptr))<SUB>1553</SUB>> ]
-"7628" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Double);,GET_STATIC_PRIMITIVE_FIELD(Double);)<SUB>1553</SUB>> ]
-"7620" [label = <(GET_STATIC_PRIMITIVE_FIELD(Double),jni::DecodeArtField(fid))<SUB>1553</SUB>> ]
-"7629" [label = <(GET_STATIC_PRIMITIVE_FIELD(Double),f-&gt;GetDouble(f-&gt;GetDeclaringClass()))<SUB>1553</SUB>> ]
-"7621" [label = <(&lt;operator&gt;.fieldAccess,GET_STATIC_PRIMITIVE_FIELD(Double))<SUB>1553</SUB>> ]
-"7630" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDouble)<SUB>1553</SUB>> ]
-"7633" [label = <(GET_STATIC_PRIMITIVE_FIELD(Double),f-&gt;GetDeclaringClass())<SUB>1553</SUB>> ]
-"7600" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1553</SUB>> ]
-"7623" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1553</SUB>> ]
-"7632" [label = <(FIELD_IDENTIFIER,GetDouble,GetDouble)<SUB>1553</SUB>> ]
-"7634" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1553</SUB>> ]
-"7601" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1553</SUB>> ]
-"7605" [label = <(GET_STATIC_PRIMITIVE_FIELD(Double),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1553</SUB>> ]
-"7612" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Double),GET_STATIC_PRIMITIVE_FIELD(Double))<SUB>1553</SUB>> ]
-"7636" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1553</SUB>> ]
-"7606" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1553</SUB>> ]
-"7607" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1553</SUB>> ]
-"7609" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1553</SUB>> ]
-"7592" [label = <(METHOD,GetStaticDoubleField)<SUB>1552</SUB>> ]
-"7637" [label = <(METHOD_RETURN,jdouble)<SUB>1552</SUB>> ]
-  "7597" -> "7601" 
-  "7597" -> "7615" 
-  "7615" -> "7623" 
-  "7618" -> "7625" 
-  "7625" -> "7632" 
-  "7628" -> "7637" 
-  "7620" -> "7618" 
-  "7629" -> "7628" 
-  "7621" -> "7620" 
-  "7630" -> "7636" 
-  "7633" -> "7629" 
-  "7600" -> "7607" 
-  "7600" -> "7615" 
-  "7623" -> "7621" 
-  "7632" -> "7630" 
-  "7634" -> "7633" 
-  "7601" -> "7600" 
-  "7605" -> "7612" 
-  "7612" -> "7637" 
-  "7636" -> "7634" 
-  "7606" -> "7605" 
-  "7607" -> "7609" 
-  "7609" -> "7606" 
-  "7592" -> "7597" 
+digraph "SetFloatField" {  
+"7707" [label = <(SET_PRIMITIVE_FIELD,SET_PRIMITIVE_FIELD(Float, obj, v))<SUB>1490</SUB>> ]
+"7739" [label = <(soa,ScopedObjectAccess)<SUB>1490</SUB>> ]
+"7742" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1490</SUB>> ]
+"7749" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, obj, JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Float, obj, v)&gt;(v)))<SUB>1490</SUB>> ]
+"7757" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1490</SUB>> ]
+"7774" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetFloat &lt; false &gt; (o, v))<SUB>1490</SUB>> ]
+"7725" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1490</SUB>> ]
+"7744" [label = <(SET_PRIMITIVE_FIELD(Float, obj, v),jni::DecodeArtField(fid))<SUB>1490</SUB>> ]
+"7752" [label = <(SET_PRIMITIVE_FIELD(Float, obj, v),JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Float, obj, v)&gt;(v))<SUB>1490</SUB>> ]
+"7758" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1490</SUB>> ]
+"7765" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1490</SUB>> ]
+"7775" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetFloat &lt; false)<SUB>1490</SUB>> ]
+"7780" [label = <(&lt;operator&gt;.bracketedPrimary,(o, v))<SUB>1490</SUB>> ]
+"7726" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1490</SUB>> ]
+"7730" [label = <(SET_PRIMITIVE_FIELD(Float, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1490</SUB>> ]
+"7737" [label = <(RETURN,SET_PRIMITIVE_FIELD(Float, obj, v),SET_PRIMITIVE_FIELD(Float, obj, v))<SUB>1490</SUB>> ]
+"7745" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Float, obj, v))<SUB>1490</SUB>> ]
+"7753" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Float, obj, v))<SUB>1490</SUB>> ]
+"7759" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1490</SUB>> ]
+"7766" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1490</SUB>> ]
+"7776" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetFloat)<SUB>1490</SUB>> ]
+"7781" [label = <(&lt;operator&gt;.expressionList,o, v)<SUB>1490</SUB>> ]
+"7711" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1490</SUB>> ]
+"7731" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1490</SUB>> ]
+"7747" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1490</SUB>> ]
+"7755" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Float, obj, v)&gt;,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Float, obj, v)&gt;)<SUB>1490</SUB>> ]
+"7761" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Float, obj, v))<SUB>1490</SUB>> ]
+"7767" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1490</SUB>> ]
+"7770" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Float, obj, v))<SUB>1490</SUB>> ]
+"7778" [label = <(FIELD_IDENTIFIER,SetFloat,SetFloat)<SUB>1490</SUB>> ]
+"7712" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1490</SUB>> ]
+"7716" [label = <(SET_PRIMITIVE_FIELD(Float, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1490</SUB>> ]
+"7723" [label = <(RETURN,SET_PRIMITIVE_FIELD(Float, obj, v),SET_PRIMITIVE_FIELD(Float, obj, v))<SUB>1490</SUB>> ]
+"7732" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1490</SUB>> ]
+"7734" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1490</SUB>> ]
+"7763" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1490</SUB>> ]
+"7769" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1490</SUB>> ]
+"7772" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1490</SUB>> ]
+"7717" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1490</SUB>> ]
+"7718" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1490</SUB>> ]
+"7720" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1490</SUB>> ]
+"7701" [label = <(METHOD,SetFloatField)<SUB>1489</SUB>> ]
+"7784" [label = <(METHOD_RETURN,void)<SUB>1489</SUB>> ]
+  "7707" -> "7712" 
+  "7707" -> "7726" 
+  "7739" -> "7747" 
+  "7742" -> "7755" 
+  "7749" -> "7763" 
+  "7757" -> "7778" 
+  "7774" -> "7784" 
+  "7725" -> "7732" 
+  "7725" -> "7739" 
+  "7744" -> "7742" 
+  "7752" -> "7749" 
+  "7758" -> "7769" 
+  "7765" -> "7757" 
+  "7775" -> "7781" 
+  "7780" -> "7774" 
+  "7726" -> "7725" 
+  "7730" -> "7737" 
+  "7737" -> "7784" 
+  "7745" -> "7744" 
+  "7753" -> "7752" 
+  "7759" -> "7758" 
+  "7766" -> "7765" 
+  "7776" -> "7775" 
+  "7781" -> "7780" 
+  "7711" -> "7718" 
+  "7711" -> "7726" 
+  "7731" -> "7730" 
+  "7747" -> "7745" 
+  "7755" -> "7753" 
+  "7761" -> "7759" 
+  "7767" -> "7772" 
+  "7770" -> "7766" 
+  "7778" -> "7776" 
+  "7712" -> "7711" 
+  "7716" -> "7723" 
+  "7723" -> "7784" 
+  "7732" -> "7734" 
+  "7734" -> "7731" 
+  "7763" -> "7761" 
+  "7769" -> "7767" 
+  "7772" -> "7770" 
+  "7717" -> "7716" 
+  "7718" -> "7720" 
+  "7720" -> "7717" 
+  "7701" -> "7707" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/141-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/141-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/141-cfg.dot	2023-06-07 19:33:45.447394686 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/141-cfg.dot	2023-06-07 19:33:52.017393985 +0330
@@ -1,90 +1,90 @@
-digraph "SetBooleanField" {  
-"7645" [label = <(SET_PRIMITIVE_FIELD,SET_PRIMITIVE_FIELD(Boolean, obj, v))<SUB>1557</SUB>> ]
-"7677" [label = <(soa,ScopedObjectAccess)<SUB>1557</SUB>> ]
-"7680" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1557</SUB>> ]
-"7687" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, obj, JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Boolean, obj, v)&gt;(v)))<SUB>1557</SUB>> ]
-"7695" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1557</SUB>> ]
-"7712" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetBoolean &lt; false &gt; (o, v))<SUB>1557</SUB>> ]
-"7663" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1557</SUB>> ]
-"7682" [label = <(SET_PRIMITIVE_FIELD(Boolean, obj, v),jni::DecodeArtField(fid))<SUB>1557</SUB>> ]
-"7690" [label = <(SET_PRIMITIVE_FIELD(Boolean, obj, v),JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Boolean, obj, v)&gt;(v))<SUB>1557</SUB>> ]
-"7696" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1557</SUB>> ]
-"7703" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1557</SUB>> ]
-"7713" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetBoolean &lt; false)<SUB>1557</SUB>> ]
-"7718" [label = <(&lt;operator&gt;.bracketedPrimary,(o, v))<SUB>1557</SUB>> ]
-"7664" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1557</SUB>> ]
-"7668" [label = <(SET_PRIMITIVE_FIELD(Boolean, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1557</SUB>> ]
-"7675" [label = <(RETURN,SET_PRIMITIVE_FIELD(Boolean, obj, v),SET_PRIMITIVE_FIELD(Boolean, obj, v))<SUB>1557</SUB>> ]
-"7683" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Boolean, obj, v))<SUB>1557</SUB>> ]
-"7691" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Boolean, obj, v))<SUB>1557</SUB>> ]
-"7697" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1557</SUB>> ]
-"7704" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1557</SUB>> ]
-"7714" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetBoolean)<SUB>1557</SUB>> ]
-"7719" [label = <(&lt;operator&gt;.expressionList,o, v)<SUB>1557</SUB>> ]
-"7649" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1557</SUB>> ]
-"7669" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1557</SUB>> ]
-"7685" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1557</SUB>> ]
-"7693" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Boolean, obj, v)&gt;,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Boolean, obj, v)&gt;)<SUB>1557</SUB>> ]
-"7699" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Boolean, obj, v))<SUB>1557</SUB>> ]
-"7705" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1557</SUB>> ]
-"7708" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Boolean, obj, v))<SUB>1557</SUB>> ]
-"7716" [label = <(FIELD_IDENTIFIER,SetBoolean,SetBoolean)<SUB>1557</SUB>> ]
-"7650" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1557</SUB>> ]
-"7654" [label = <(SET_PRIMITIVE_FIELD(Boolean, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1557</SUB>> ]
-"7661" [label = <(RETURN,SET_PRIMITIVE_FIELD(Boolean, obj, v),SET_PRIMITIVE_FIELD(Boolean, obj, v))<SUB>1557</SUB>> ]
-"7670" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1557</SUB>> ]
-"7672" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1557</SUB>> ]
-"7701" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1557</SUB>> ]
-"7707" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1557</SUB>> ]
-"7710" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1557</SUB>> ]
-"7655" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1557</SUB>> ]
-"7656" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1557</SUB>> ]
-"7658" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1557</SUB>> ]
-"7639" [label = <(METHOD,SetBooleanField)<SUB>1556</SUB>> ]
-"7722" [label = <(METHOD_RETURN,void)<SUB>1556</SUB>> ]
-  "7645" -> "7650" 
-  "7645" -> "7664" 
-  "7677" -> "7685" 
-  "7680" -> "7693" 
-  "7687" -> "7701" 
-  "7695" -> "7716" 
-  "7712" -> "7722" 
-  "7663" -> "7670" 
-  "7663" -> "7677" 
-  "7682" -> "7680" 
-  "7690" -> "7687" 
-  "7696" -> "7707" 
-  "7703" -> "7695" 
-  "7713" -> "7719" 
-  "7718" -> "7712" 
-  "7664" -> "7663" 
-  "7668" -> "7675" 
-  "7675" -> "7722" 
-  "7683" -> "7682" 
-  "7691" -> "7690" 
-  "7697" -> "7696" 
-  "7704" -> "7703" 
-  "7714" -> "7713" 
-  "7719" -> "7718" 
-  "7649" -> "7656" 
-  "7649" -> "7664" 
-  "7669" -> "7668" 
-  "7685" -> "7683" 
-  "7693" -> "7691" 
-  "7699" -> "7697" 
-  "7705" -> "7710" 
-  "7708" -> "7704" 
-  "7716" -> "7714" 
-  "7650" -> "7649" 
-  "7654" -> "7661" 
-  "7661" -> "7722" 
-  "7670" -> "7672" 
-  "7672" -> "7669" 
-  "7701" -> "7699" 
-  "7707" -> "7705" 
-  "7710" -> "7708" 
-  "7655" -> "7654" 
-  "7656" -> "7658" 
-  "7658" -> "7655" 
-  "7639" -> "7645" 
+digraph "SetDoubleField" {  
+"7792" [label = <(SET_PRIMITIVE_FIELD,SET_PRIMITIVE_FIELD(Double, obj, v))<SUB>1494</SUB>> ]
+"7824" [label = <(soa,ScopedObjectAccess)<SUB>1494</SUB>> ]
+"7827" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1494</SUB>> ]
+"7834" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, obj, JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Double, obj, v)&gt;(v)))<SUB>1494</SUB>> ]
+"7842" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1494</SUB>> ]
+"7859" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetDouble &lt; false &gt; (o, v))<SUB>1494</SUB>> ]
+"7810" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1494</SUB>> ]
+"7829" [label = <(SET_PRIMITIVE_FIELD(Double, obj, v),jni::DecodeArtField(fid))<SUB>1494</SUB>> ]
+"7837" [label = <(SET_PRIMITIVE_FIELD(Double, obj, v),JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Double, obj, v)&gt;(v))<SUB>1494</SUB>> ]
+"7843" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1494</SUB>> ]
+"7850" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1494</SUB>> ]
+"7860" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetDouble &lt; false)<SUB>1494</SUB>> ]
+"7865" [label = <(&lt;operator&gt;.bracketedPrimary,(o, v))<SUB>1494</SUB>> ]
+"7811" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1494</SUB>> ]
+"7815" [label = <(SET_PRIMITIVE_FIELD(Double, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1494</SUB>> ]
+"7822" [label = <(RETURN,SET_PRIMITIVE_FIELD(Double, obj, v),SET_PRIMITIVE_FIELD(Double, obj, v))<SUB>1494</SUB>> ]
+"7830" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Double, obj, v))<SUB>1494</SUB>> ]
+"7838" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Double, obj, v))<SUB>1494</SUB>> ]
+"7844" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1494</SUB>> ]
+"7851" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1494</SUB>> ]
+"7861" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetDouble)<SUB>1494</SUB>> ]
+"7866" [label = <(&lt;operator&gt;.expressionList,o, v)<SUB>1494</SUB>> ]
+"7796" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1494</SUB>> ]
+"7816" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1494</SUB>> ]
+"7832" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1494</SUB>> ]
+"7840" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Double, obj, v)&gt;,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Double, obj, v)&gt;)<SUB>1494</SUB>> ]
+"7846" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Double, obj, v))<SUB>1494</SUB>> ]
+"7852" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1494</SUB>> ]
+"7855" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Double, obj, v))<SUB>1494</SUB>> ]
+"7863" [label = <(FIELD_IDENTIFIER,SetDouble,SetDouble)<SUB>1494</SUB>> ]
+"7797" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1494</SUB>> ]
+"7801" [label = <(SET_PRIMITIVE_FIELD(Double, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1494</SUB>> ]
+"7808" [label = <(RETURN,SET_PRIMITIVE_FIELD(Double, obj, v),SET_PRIMITIVE_FIELD(Double, obj, v))<SUB>1494</SUB>> ]
+"7817" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1494</SUB>> ]
+"7819" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1494</SUB>> ]
+"7848" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1494</SUB>> ]
+"7854" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1494</SUB>> ]
+"7857" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1494</SUB>> ]
+"7802" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1494</SUB>> ]
+"7803" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1494</SUB>> ]
+"7805" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1494</SUB>> ]
+"7786" [label = <(METHOD,SetDoubleField)<SUB>1493</SUB>> ]
+"7869" [label = <(METHOD_RETURN,void)<SUB>1493</SUB>> ]
+  "7792" -> "7797" 
+  "7792" -> "7811" 
+  "7824" -> "7832" 
+  "7827" -> "7840" 
+  "7834" -> "7848" 
+  "7842" -> "7863" 
+  "7859" -> "7869" 
+  "7810" -> "7817" 
+  "7810" -> "7824" 
+  "7829" -> "7827" 
+  "7837" -> "7834" 
+  "7843" -> "7854" 
+  "7850" -> "7842" 
+  "7860" -> "7866" 
+  "7865" -> "7859" 
+  "7811" -> "7810" 
+  "7815" -> "7822" 
+  "7822" -> "7869" 
+  "7830" -> "7829" 
+  "7838" -> "7837" 
+  "7844" -> "7843" 
+  "7851" -> "7850" 
+  "7861" -> "7860" 
+  "7866" -> "7865" 
+  "7796" -> "7803" 
+  "7796" -> "7811" 
+  "7816" -> "7815" 
+  "7832" -> "7830" 
+  "7840" -> "7838" 
+  "7846" -> "7844" 
+  "7852" -> "7857" 
+  "7855" -> "7851" 
+  "7863" -> "7861" 
+  "7797" -> "7796" 
+  "7801" -> "7808" 
+  "7808" -> "7869" 
+  "7817" -> "7819" 
+  "7819" -> "7816" 
+  "7848" -> "7846" 
+  "7854" -> "7852" 
+  "7857" -> "7855" 
+  "7802" -> "7801" 
+  "7803" -> "7805" 
+  "7805" -> "7802" 
+  "7786" -> "7792" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/142-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/142-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/142-cfg.dot	2023-06-07 19:33:45.447394686 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/142-cfg.dot	2023-06-07 19:33:52.017393985 +0330
@@ -1,90 +1,90 @@
-digraph "SetByteField" {  
-"7730" [label = <(SET_PRIMITIVE_FIELD,SET_PRIMITIVE_FIELD(Byte, obj, v))<SUB>1561</SUB>> ]
-"7762" [label = <(soa,ScopedObjectAccess)<SUB>1561</SUB>> ]
-"7765" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1561</SUB>> ]
-"7772" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, obj, JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Byte, obj, v)&gt;(v)))<SUB>1561</SUB>> ]
-"7780" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1561</SUB>> ]
-"7797" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetByte &lt; false &gt; (o, v))<SUB>1561</SUB>> ]
-"7748" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1561</SUB>> ]
-"7767" [label = <(SET_PRIMITIVE_FIELD(Byte, obj, v),jni::DecodeArtField(fid))<SUB>1561</SUB>> ]
-"7775" [label = <(SET_PRIMITIVE_FIELD(Byte, obj, v),JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Byte, obj, v)&gt;(v))<SUB>1561</SUB>> ]
-"7781" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1561</SUB>> ]
-"7788" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1561</SUB>> ]
-"7798" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetByte &lt; false)<SUB>1561</SUB>> ]
-"7803" [label = <(&lt;operator&gt;.bracketedPrimary,(o, v))<SUB>1561</SUB>> ]
-"7749" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1561</SUB>> ]
-"7753" [label = <(SET_PRIMITIVE_FIELD(Byte, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1561</SUB>> ]
-"7760" [label = <(RETURN,SET_PRIMITIVE_FIELD(Byte, obj, v),SET_PRIMITIVE_FIELD(Byte, obj, v))<SUB>1561</SUB>> ]
-"7768" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Byte, obj, v))<SUB>1561</SUB>> ]
-"7776" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Byte, obj, v))<SUB>1561</SUB>> ]
-"7782" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1561</SUB>> ]
-"7789" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1561</SUB>> ]
-"7799" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetByte)<SUB>1561</SUB>> ]
-"7804" [label = <(&lt;operator&gt;.expressionList,o, v)<SUB>1561</SUB>> ]
-"7734" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1561</SUB>> ]
-"7754" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1561</SUB>> ]
-"7770" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1561</SUB>> ]
-"7778" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Byte, obj, v)&gt;,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Byte, obj, v)&gt;)<SUB>1561</SUB>> ]
-"7784" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Byte, obj, v))<SUB>1561</SUB>> ]
-"7790" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1561</SUB>> ]
-"7793" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Byte, obj, v))<SUB>1561</SUB>> ]
-"7801" [label = <(FIELD_IDENTIFIER,SetByte,SetByte)<SUB>1561</SUB>> ]
-"7735" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1561</SUB>> ]
-"7739" [label = <(SET_PRIMITIVE_FIELD(Byte, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1561</SUB>> ]
-"7746" [label = <(RETURN,SET_PRIMITIVE_FIELD(Byte, obj, v),SET_PRIMITIVE_FIELD(Byte, obj, v))<SUB>1561</SUB>> ]
-"7755" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1561</SUB>> ]
-"7757" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1561</SUB>> ]
-"7786" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1561</SUB>> ]
-"7792" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1561</SUB>> ]
-"7795" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1561</SUB>> ]
-"7740" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1561</SUB>> ]
-"7741" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1561</SUB>> ]
-"7743" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1561</SUB>> ]
-"7724" [label = <(METHOD,SetByteField)<SUB>1560</SUB>> ]
-"7807" [label = <(METHOD_RETURN,void)<SUB>1560</SUB>> ]
-  "7730" -> "7735" 
-  "7730" -> "7749" 
-  "7762" -> "7770" 
-  "7765" -> "7778" 
-  "7772" -> "7786" 
-  "7780" -> "7801" 
-  "7797" -> "7807" 
-  "7748" -> "7755" 
-  "7748" -> "7762" 
-  "7767" -> "7765" 
-  "7775" -> "7772" 
-  "7781" -> "7792" 
-  "7788" -> "7780" 
-  "7798" -> "7804" 
-  "7803" -> "7797" 
-  "7749" -> "7748" 
-  "7753" -> "7760" 
-  "7760" -> "7807" 
-  "7768" -> "7767" 
-  "7776" -> "7775" 
-  "7782" -> "7781" 
-  "7789" -> "7788" 
-  "7799" -> "7798" 
-  "7804" -> "7803" 
-  "7734" -> "7741" 
-  "7734" -> "7749" 
-  "7754" -> "7753" 
-  "7770" -> "7768" 
-  "7778" -> "7776" 
-  "7784" -> "7782" 
-  "7790" -> "7795" 
-  "7793" -> "7789" 
-  "7801" -> "7799" 
-  "7735" -> "7734" 
-  "7739" -> "7746" 
-  "7746" -> "7807" 
-  "7755" -> "7757" 
-  "7757" -> "7754" 
-  "7786" -> "7784" 
-  "7792" -> "7790" 
-  "7795" -> "7793" 
-  "7740" -> "7739" 
-  "7741" -> "7743" 
-  "7743" -> "7740" 
-  "7724" -> "7730" 
+digraph "SetIntField" {  
+"7877" [label = <(SET_PRIMITIVE_FIELD,SET_PRIMITIVE_FIELD(Int, obj, v))<SUB>1498</SUB>> ]
+"7909" [label = <(soa,ScopedObjectAccess)<SUB>1498</SUB>> ]
+"7912" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1498</SUB>> ]
+"7919" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, obj, JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Int, obj, v)&gt;(v)))<SUB>1498</SUB>> ]
+"7927" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1498</SUB>> ]
+"7944" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetInt &lt; false &gt; (o, v))<SUB>1498</SUB>> ]
+"7895" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1498</SUB>> ]
+"7914" [label = <(SET_PRIMITIVE_FIELD(Int, obj, v),jni::DecodeArtField(fid))<SUB>1498</SUB>> ]
+"7922" [label = <(SET_PRIMITIVE_FIELD(Int, obj, v),JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Int, obj, v)&gt;(v))<SUB>1498</SUB>> ]
+"7928" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1498</SUB>> ]
+"7935" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1498</SUB>> ]
+"7945" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetInt &lt; false)<SUB>1498</SUB>> ]
+"7950" [label = <(&lt;operator&gt;.bracketedPrimary,(o, v))<SUB>1498</SUB>> ]
+"7896" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1498</SUB>> ]
+"7900" [label = <(SET_PRIMITIVE_FIELD(Int, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1498</SUB>> ]
+"7907" [label = <(RETURN,SET_PRIMITIVE_FIELD(Int, obj, v),SET_PRIMITIVE_FIELD(Int, obj, v))<SUB>1498</SUB>> ]
+"7915" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Int, obj, v))<SUB>1498</SUB>> ]
+"7923" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Int, obj, v))<SUB>1498</SUB>> ]
+"7929" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1498</SUB>> ]
+"7936" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1498</SUB>> ]
+"7946" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetInt)<SUB>1498</SUB>> ]
+"7951" [label = <(&lt;operator&gt;.expressionList,o, v)<SUB>1498</SUB>> ]
+"7881" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1498</SUB>> ]
+"7901" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1498</SUB>> ]
+"7917" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1498</SUB>> ]
+"7925" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Int, obj, v)&gt;,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Int, obj, v)&gt;)<SUB>1498</SUB>> ]
+"7931" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Int, obj, v))<SUB>1498</SUB>> ]
+"7937" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1498</SUB>> ]
+"7940" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Int, obj, v))<SUB>1498</SUB>> ]
+"7948" [label = <(FIELD_IDENTIFIER,SetInt,SetInt)<SUB>1498</SUB>> ]
+"7882" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1498</SUB>> ]
+"7886" [label = <(SET_PRIMITIVE_FIELD(Int, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1498</SUB>> ]
+"7893" [label = <(RETURN,SET_PRIMITIVE_FIELD(Int, obj, v),SET_PRIMITIVE_FIELD(Int, obj, v))<SUB>1498</SUB>> ]
+"7902" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1498</SUB>> ]
+"7904" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1498</SUB>> ]
+"7933" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1498</SUB>> ]
+"7939" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1498</SUB>> ]
+"7942" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1498</SUB>> ]
+"7887" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1498</SUB>> ]
+"7888" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1498</SUB>> ]
+"7890" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1498</SUB>> ]
+"7871" [label = <(METHOD,SetIntField)<SUB>1497</SUB>> ]
+"7954" [label = <(METHOD_RETURN,void)<SUB>1497</SUB>> ]
+  "7877" -> "7882" 
+  "7877" -> "7896" 
+  "7909" -> "7917" 
+  "7912" -> "7925" 
+  "7919" -> "7933" 
+  "7927" -> "7948" 
+  "7944" -> "7954" 
+  "7895" -> "7902" 
+  "7895" -> "7909" 
+  "7914" -> "7912" 
+  "7922" -> "7919" 
+  "7928" -> "7939" 
+  "7935" -> "7927" 
+  "7945" -> "7951" 
+  "7950" -> "7944" 
+  "7896" -> "7895" 
+  "7900" -> "7907" 
+  "7907" -> "7954" 
+  "7915" -> "7914" 
+  "7923" -> "7922" 
+  "7929" -> "7928" 
+  "7936" -> "7935" 
+  "7946" -> "7945" 
+  "7951" -> "7950" 
+  "7881" -> "7888" 
+  "7881" -> "7896" 
+  "7901" -> "7900" 
+  "7917" -> "7915" 
+  "7925" -> "7923" 
+  "7931" -> "7929" 
+  "7937" -> "7942" 
+  "7940" -> "7936" 
+  "7948" -> "7946" 
+  "7882" -> "7881" 
+  "7886" -> "7893" 
+  "7893" -> "7954" 
+  "7902" -> "7904" 
+  "7904" -> "7901" 
+  "7933" -> "7931" 
+  "7939" -> "7937" 
+  "7942" -> "7940" 
+  "7887" -> "7886" 
+  "7888" -> "7890" 
+  "7890" -> "7887" 
+  "7871" -> "7877" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/143-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/143-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/143-cfg.dot	2023-06-07 19:33:45.447394686 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/143-cfg.dot	2023-06-07 19:33:52.017393985 +0330
@@ -1,90 +1,90 @@
-digraph "SetCharField" {  
-"7815" [label = <(SET_PRIMITIVE_FIELD,SET_PRIMITIVE_FIELD(Char, obj, v))<SUB>1565</SUB>> ]
-"7847" [label = <(soa,ScopedObjectAccess)<SUB>1565</SUB>> ]
-"7850" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1565</SUB>> ]
-"7857" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, obj, JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Char, obj, v)&gt;(v)))<SUB>1565</SUB>> ]
-"7865" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1565</SUB>> ]
-"7882" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetChar &lt; false &gt; (o, v))<SUB>1565</SUB>> ]
-"7833" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1565</SUB>> ]
-"7852" [label = <(SET_PRIMITIVE_FIELD(Char, obj, v),jni::DecodeArtField(fid))<SUB>1565</SUB>> ]
-"7860" [label = <(SET_PRIMITIVE_FIELD(Char, obj, v),JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Char, obj, v)&gt;(v))<SUB>1565</SUB>> ]
-"7866" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1565</SUB>> ]
-"7873" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1565</SUB>> ]
-"7883" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetChar &lt; false)<SUB>1565</SUB>> ]
-"7888" [label = <(&lt;operator&gt;.bracketedPrimary,(o, v))<SUB>1565</SUB>> ]
-"7834" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1565</SUB>> ]
-"7838" [label = <(SET_PRIMITIVE_FIELD(Char, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1565</SUB>> ]
-"7845" [label = <(RETURN,SET_PRIMITIVE_FIELD(Char, obj, v),SET_PRIMITIVE_FIELD(Char, obj, v))<SUB>1565</SUB>> ]
-"7853" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Char, obj, v))<SUB>1565</SUB>> ]
-"7861" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Char, obj, v))<SUB>1565</SUB>> ]
-"7867" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1565</SUB>> ]
-"7874" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1565</SUB>> ]
-"7884" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetChar)<SUB>1565</SUB>> ]
-"7889" [label = <(&lt;operator&gt;.expressionList,o, v)<SUB>1565</SUB>> ]
-"7819" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1565</SUB>> ]
-"7839" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1565</SUB>> ]
-"7855" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1565</SUB>> ]
-"7863" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Char, obj, v)&gt;,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Char, obj, v)&gt;)<SUB>1565</SUB>> ]
-"7869" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Char, obj, v))<SUB>1565</SUB>> ]
-"7875" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1565</SUB>> ]
-"7878" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Char, obj, v))<SUB>1565</SUB>> ]
-"7886" [label = <(FIELD_IDENTIFIER,SetChar,SetChar)<SUB>1565</SUB>> ]
-"7820" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1565</SUB>> ]
-"7824" [label = <(SET_PRIMITIVE_FIELD(Char, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1565</SUB>> ]
-"7831" [label = <(RETURN,SET_PRIMITIVE_FIELD(Char, obj, v),SET_PRIMITIVE_FIELD(Char, obj, v))<SUB>1565</SUB>> ]
-"7840" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1565</SUB>> ]
-"7842" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1565</SUB>> ]
-"7871" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1565</SUB>> ]
-"7877" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1565</SUB>> ]
-"7880" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1565</SUB>> ]
-"7825" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1565</SUB>> ]
-"7826" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1565</SUB>> ]
-"7828" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1565</SUB>> ]
-"7809" [label = <(METHOD,SetCharField)<SUB>1564</SUB>> ]
-"7892" [label = <(METHOD_RETURN,void)<SUB>1564</SUB>> ]
-  "7815" -> "7820" 
-  "7815" -> "7834" 
-  "7847" -> "7855" 
-  "7850" -> "7863" 
-  "7857" -> "7871" 
-  "7865" -> "7886" 
-  "7882" -> "7892" 
-  "7833" -> "7840" 
-  "7833" -> "7847" 
-  "7852" -> "7850" 
-  "7860" -> "7857" 
-  "7866" -> "7877" 
-  "7873" -> "7865" 
-  "7883" -> "7889" 
-  "7888" -> "7882" 
-  "7834" -> "7833" 
-  "7838" -> "7845" 
-  "7845" -> "7892" 
-  "7853" -> "7852" 
-  "7861" -> "7860" 
-  "7867" -> "7866" 
-  "7874" -> "7873" 
-  "7884" -> "7883" 
-  "7889" -> "7888" 
-  "7819" -> "7826" 
-  "7819" -> "7834" 
-  "7839" -> "7838" 
-  "7855" -> "7853" 
-  "7863" -> "7861" 
-  "7869" -> "7867" 
-  "7875" -> "7880" 
-  "7878" -> "7874" 
-  "7886" -> "7884" 
-  "7820" -> "7819" 
-  "7824" -> "7831" 
-  "7831" -> "7892" 
-  "7840" -> "7842" 
-  "7842" -> "7839" 
-  "7871" -> "7869" 
-  "7877" -> "7875" 
-  "7880" -> "7878" 
-  "7825" -> "7824" 
-  "7826" -> "7828" 
-  "7828" -> "7825" 
-  "7809" -> "7815" 
+digraph "SetLongField" {  
+"7962" [label = <(SET_PRIMITIVE_FIELD,SET_PRIMITIVE_FIELD(Long, obj, v))<SUB>1502</SUB>> ]
+"7994" [label = <(soa,ScopedObjectAccess)<SUB>1502</SUB>> ]
+"7997" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1502</SUB>> ]
+"8004" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, obj, JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Long, obj, v)&gt;(v)))<SUB>1502</SUB>> ]
+"8012" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1502</SUB>> ]
+"8029" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetLong &lt; false &gt; (o, v))<SUB>1502</SUB>> ]
+"7980" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1502</SUB>> ]
+"7999" [label = <(SET_PRIMITIVE_FIELD(Long, obj, v),jni::DecodeArtField(fid))<SUB>1502</SUB>> ]
+"8007" [label = <(SET_PRIMITIVE_FIELD(Long, obj, v),JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Long, obj, v)&gt;(v))<SUB>1502</SUB>> ]
+"8013" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1502</SUB>> ]
+"8020" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1502</SUB>> ]
+"8030" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetLong &lt; false)<SUB>1502</SUB>> ]
+"8035" [label = <(&lt;operator&gt;.bracketedPrimary,(o, v))<SUB>1502</SUB>> ]
+"7981" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1502</SUB>> ]
+"7985" [label = <(SET_PRIMITIVE_FIELD(Long, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1502</SUB>> ]
+"7992" [label = <(RETURN,SET_PRIMITIVE_FIELD(Long, obj, v),SET_PRIMITIVE_FIELD(Long, obj, v))<SUB>1502</SUB>> ]
+"8000" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Long, obj, v))<SUB>1502</SUB>> ]
+"8008" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Long, obj, v))<SUB>1502</SUB>> ]
+"8014" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1502</SUB>> ]
+"8021" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1502</SUB>> ]
+"8031" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetLong)<SUB>1502</SUB>> ]
+"8036" [label = <(&lt;operator&gt;.expressionList,o, v)<SUB>1502</SUB>> ]
+"7966" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1502</SUB>> ]
+"7986" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1502</SUB>> ]
+"8002" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1502</SUB>> ]
+"8010" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Long, obj, v)&gt;,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Long, obj, v)&gt;)<SUB>1502</SUB>> ]
+"8016" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Long, obj, v))<SUB>1502</SUB>> ]
+"8022" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1502</SUB>> ]
+"8025" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Long, obj, v))<SUB>1502</SUB>> ]
+"8033" [label = <(FIELD_IDENTIFIER,SetLong,SetLong)<SUB>1502</SUB>> ]
+"7967" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1502</SUB>> ]
+"7971" [label = <(SET_PRIMITIVE_FIELD(Long, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1502</SUB>> ]
+"7978" [label = <(RETURN,SET_PRIMITIVE_FIELD(Long, obj, v),SET_PRIMITIVE_FIELD(Long, obj, v))<SUB>1502</SUB>> ]
+"7987" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1502</SUB>> ]
+"7989" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1502</SUB>> ]
+"8018" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1502</SUB>> ]
+"8024" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1502</SUB>> ]
+"8027" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1502</SUB>> ]
+"7972" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1502</SUB>> ]
+"7973" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1502</SUB>> ]
+"7975" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1502</SUB>> ]
+"7956" [label = <(METHOD,SetLongField)<SUB>1501</SUB>> ]
+"8039" [label = <(METHOD_RETURN,void)<SUB>1501</SUB>> ]
+  "7962" -> "7967" 
+  "7962" -> "7981" 
+  "7994" -> "8002" 
+  "7997" -> "8010" 
+  "8004" -> "8018" 
+  "8012" -> "8033" 
+  "8029" -> "8039" 
+  "7980" -> "7987" 
+  "7980" -> "7994" 
+  "7999" -> "7997" 
+  "8007" -> "8004" 
+  "8013" -> "8024" 
+  "8020" -> "8012" 
+  "8030" -> "8036" 
+  "8035" -> "8029" 
+  "7981" -> "7980" 
+  "7985" -> "7992" 
+  "7992" -> "8039" 
+  "8000" -> "7999" 
+  "8008" -> "8007" 
+  "8014" -> "8013" 
+  "8021" -> "8020" 
+  "8031" -> "8030" 
+  "8036" -> "8035" 
+  "7966" -> "7973" 
+  "7966" -> "7981" 
+  "7986" -> "7985" 
+  "8002" -> "8000" 
+  "8010" -> "8008" 
+  "8016" -> "8014" 
+  "8022" -> "8027" 
+  "8025" -> "8021" 
+  "8033" -> "8031" 
+  "7967" -> "7966" 
+  "7971" -> "7978" 
+  "7978" -> "8039" 
+  "7987" -> "7989" 
+  "7989" -> "7986" 
+  "8018" -> "8016" 
+  "8024" -> "8022" 
+  "8027" -> "8025" 
+  "7972" -> "7971" 
+  "7973" -> "7975" 
+  "7975" -> "7972" 
+  "7956" -> "7962" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/144-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/144-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/144-cfg.dot	2023-06-07 19:33:45.447394686 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/144-cfg.dot	2023-06-07 19:33:52.027393982 +0330
@@ -1,90 +1,90 @@
-digraph "SetFloatField" {  
-"7900" [label = <(SET_PRIMITIVE_FIELD,SET_PRIMITIVE_FIELD(Float, obj, v))<SUB>1569</SUB>> ]
-"7932" [label = <(soa,ScopedObjectAccess)<SUB>1569</SUB>> ]
-"7935" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1569</SUB>> ]
-"7942" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, obj, JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Float, obj, v)&gt;(v)))<SUB>1569</SUB>> ]
-"7950" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1569</SUB>> ]
-"7967" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetFloat &lt; false &gt; (o, v))<SUB>1569</SUB>> ]
-"7918" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1569</SUB>> ]
-"7937" [label = <(SET_PRIMITIVE_FIELD(Float, obj, v),jni::DecodeArtField(fid))<SUB>1569</SUB>> ]
-"7945" [label = <(SET_PRIMITIVE_FIELD(Float, obj, v),JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Float, obj, v)&gt;(v))<SUB>1569</SUB>> ]
-"7951" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1569</SUB>> ]
-"7958" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1569</SUB>> ]
-"7968" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetFloat &lt; false)<SUB>1569</SUB>> ]
-"7973" [label = <(&lt;operator&gt;.bracketedPrimary,(o, v))<SUB>1569</SUB>> ]
-"7919" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1569</SUB>> ]
-"7923" [label = <(SET_PRIMITIVE_FIELD(Float, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1569</SUB>> ]
-"7930" [label = <(RETURN,SET_PRIMITIVE_FIELD(Float, obj, v),SET_PRIMITIVE_FIELD(Float, obj, v))<SUB>1569</SUB>> ]
-"7938" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Float, obj, v))<SUB>1569</SUB>> ]
-"7946" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Float, obj, v))<SUB>1569</SUB>> ]
-"7952" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1569</SUB>> ]
-"7959" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1569</SUB>> ]
-"7969" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetFloat)<SUB>1569</SUB>> ]
-"7974" [label = <(&lt;operator&gt;.expressionList,o, v)<SUB>1569</SUB>> ]
-"7904" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1569</SUB>> ]
-"7924" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1569</SUB>> ]
-"7940" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1569</SUB>> ]
-"7948" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Float, obj, v)&gt;,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Float, obj, v)&gt;)<SUB>1569</SUB>> ]
-"7954" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Float, obj, v))<SUB>1569</SUB>> ]
-"7960" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1569</SUB>> ]
-"7963" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Float, obj, v))<SUB>1569</SUB>> ]
-"7971" [label = <(FIELD_IDENTIFIER,SetFloat,SetFloat)<SUB>1569</SUB>> ]
-"7905" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1569</SUB>> ]
-"7909" [label = <(SET_PRIMITIVE_FIELD(Float, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1569</SUB>> ]
-"7916" [label = <(RETURN,SET_PRIMITIVE_FIELD(Float, obj, v),SET_PRIMITIVE_FIELD(Float, obj, v))<SUB>1569</SUB>> ]
-"7925" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1569</SUB>> ]
-"7927" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1569</SUB>> ]
-"7956" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1569</SUB>> ]
-"7962" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1569</SUB>> ]
-"7965" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1569</SUB>> ]
-"7910" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1569</SUB>> ]
-"7911" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1569</SUB>> ]
-"7913" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1569</SUB>> ]
-"7894" [label = <(METHOD,SetFloatField)<SUB>1568</SUB>> ]
-"7977" [label = <(METHOD_RETURN,void)<SUB>1568</SUB>> ]
-  "7900" -> "7905" 
-  "7900" -> "7919" 
-  "7932" -> "7940" 
-  "7935" -> "7948" 
-  "7942" -> "7956" 
-  "7950" -> "7971" 
-  "7967" -> "7977" 
-  "7918" -> "7925" 
-  "7918" -> "7932" 
-  "7937" -> "7935" 
-  "7945" -> "7942" 
-  "7951" -> "7962" 
-  "7958" -> "7950" 
-  "7968" -> "7974" 
-  "7973" -> "7967" 
-  "7919" -> "7918" 
-  "7923" -> "7930" 
-  "7930" -> "7977" 
-  "7938" -> "7937" 
-  "7946" -> "7945" 
-  "7952" -> "7951" 
-  "7959" -> "7958" 
-  "7969" -> "7968" 
-  "7974" -> "7973" 
-  "7904" -> "7911" 
-  "7904" -> "7919" 
-  "7924" -> "7923" 
-  "7940" -> "7938" 
-  "7948" -> "7946" 
-  "7954" -> "7952" 
-  "7960" -> "7965" 
-  "7963" -> "7959" 
-  "7971" -> "7969" 
-  "7905" -> "7904" 
-  "7909" -> "7916" 
-  "7916" -> "7977" 
-  "7925" -> "7927" 
-  "7927" -> "7924" 
-  "7956" -> "7954" 
-  "7962" -> "7960" 
-  "7965" -> "7963" 
-  "7910" -> "7909" 
-  "7911" -> "7913" 
-  "7913" -> "7910" 
-  "7894" -> "7900" 
+digraph "SetShortField" {  
+"8047" [label = <(SET_PRIMITIVE_FIELD,SET_PRIMITIVE_FIELD(Short, obj, v))<SUB>1506</SUB>> ]
+"8079" [label = <(soa,ScopedObjectAccess)<SUB>1506</SUB>> ]
+"8082" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1506</SUB>> ]
+"8089" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, obj, JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Short, obj, v)&gt;(v)))<SUB>1506</SUB>> ]
+"8097" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1506</SUB>> ]
+"8114" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetShort &lt; false &gt; (o, v))<SUB>1506</SUB>> ]
+"8065" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1506</SUB>> ]
+"8084" [label = <(SET_PRIMITIVE_FIELD(Short, obj, v),jni::DecodeArtField(fid))<SUB>1506</SUB>> ]
+"8092" [label = <(SET_PRIMITIVE_FIELD(Short, obj, v),JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Short, obj, v)&gt;(v))<SUB>1506</SUB>> ]
+"8098" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1506</SUB>> ]
+"8105" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1506</SUB>> ]
+"8115" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetShort &lt; false)<SUB>1506</SUB>> ]
+"8120" [label = <(&lt;operator&gt;.bracketedPrimary,(o, v))<SUB>1506</SUB>> ]
+"8066" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1506</SUB>> ]
+"8070" [label = <(SET_PRIMITIVE_FIELD(Short, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1506</SUB>> ]
+"8077" [label = <(RETURN,SET_PRIMITIVE_FIELD(Short, obj, v),SET_PRIMITIVE_FIELD(Short, obj, v))<SUB>1506</SUB>> ]
+"8085" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Short, obj, v))<SUB>1506</SUB>> ]
+"8093" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Short, obj, v))<SUB>1506</SUB>> ]
+"8099" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1506</SUB>> ]
+"8106" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1506</SUB>> ]
+"8116" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetShort)<SUB>1506</SUB>> ]
+"8121" [label = <(&lt;operator&gt;.expressionList,o, v)<SUB>1506</SUB>> ]
+"8051" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1506</SUB>> ]
+"8071" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1506</SUB>> ]
+"8087" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1506</SUB>> ]
+"8095" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Short, obj, v)&gt;,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Short, obj, v)&gt;)<SUB>1506</SUB>> ]
+"8101" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Short, obj, v))<SUB>1506</SUB>> ]
+"8107" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1506</SUB>> ]
+"8110" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Short, obj, v))<SUB>1506</SUB>> ]
+"8118" [label = <(FIELD_IDENTIFIER,SetShort,SetShort)<SUB>1506</SUB>> ]
+"8052" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1506</SUB>> ]
+"8056" [label = <(SET_PRIMITIVE_FIELD(Short, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1506</SUB>> ]
+"8063" [label = <(RETURN,SET_PRIMITIVE_FIELD(Short, obj, v),SET_PRIMITIVE_FIELD(Short, obj, v))<SUB>1506</SUB>> ]
+"8072" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1506</SUB>> ]
+"8074" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1506</SUB>> ]
+"8103" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1506</SUB>> ]
+"8109" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1506</SUB>> ]
+"8112" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1506</SUB>> ]
+"8057" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1506</SUB>> ]
+"8058" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1506</SUB>> ]
+"8060" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1506</SUB>> ]
+"8041" [label = <(METHOD,SetShortField)<SUB>1505</SUB>> ]
+"8124" [label = <(METHOD_RETURN,void)<SUB>1505</SUB>> ]
+  "8047" -> "8052" 
+  "8047" -> "8066" 
+  "8079" -> "8087" 
+  "8082" -> "8095" 
+  "8089" -> "8103" 
+  "8097" -> "8118" 
+  "8114" -> "8124" 
+  "8065" -> "8072" 
+  "8065" -> "8079" 
+  "8084" -> "8082" 
+  "8092" -> "8089" 
+  "8098" -> "8109" 
+  "8105" -> "8097" 
+  "8115" -> "8121" 
+  "8120" -> "8114" 
+  "8066" -> "8065" 
+  "8070" -> "8077" 
+  "8077" -> "8124" 
+  "8085" -> "8084" 
+  "8093" -> "8092" 
+  "8099" -> "8098" 
+  "8106" -> "8105" 
+  "8116" -> "8115" 
+  "8121" -> "8120" 
+  "8051" -> "8058" 
+  "8051" -> "8066" 
+  "8071" -> "8070" 
+  "8087" -> "8085" 
+  "8095" -> "8093" 
+  "8101" -> "8099" 
+  "8107" -> "8112" 
+  "8110" -> "8106" 
+  "8118" -> "8116" 
+  "8052" -> "8051" 
+  "8056" -> "8063" 
+  "8063" -> "8124" 
+  "8072" -> "8074" 
+  "8074" -> "8071" 
+  "8103" -> "8101" 
+  "8109" -> "8107" 
+  "8112" -> "8110" 
+  "8057" -> "8056" 
+  "8058" -> "8060" 
+  "8060" -> "8057" 
+  "8041" -> "8047" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/145-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/145-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/145-cfg.dot	2023-06-07 19:33:45.447394686 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/145-cfg.dot	2023-06-07 19:33:52.027393982 +0330
@@ -1,90 +1,59 @@
-digraph "SetDoubleField" {  
-"7985" [label = <(SET_PRIMITIVE_FIELD,SET_PRIMITIVE_FIELD(Double, obj, v))<SUB>1573</SUB>> ]
-"8017" [label = <(soa,ScopedObjectAccess)<SUB>1573</SUB>> ]
-"8020" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1573</SUB>> ]
-"8027" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, obj, JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Double, obj, v)&gt;(v)))<SUB>1573</SUB>> ]
-"8035" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1573</SUB>> ]
-"8052" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetDouble &lt; false &gt; (o, v))<SUB>1573</SUB>> ]
-"8003" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1573</SUB>> ]
-"8022" [label = <(SET_PRIMITIVE_FIELD(Double, obj, v),jni::DecodeArtField(fid))<SUB>1573</SUB>> ]
-"8030" [label = <(SET_PRIMITIVE_FIELD(Double, obj, v),JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Double, obj, v)&gt;(v))<SUB>1573</SUB>> ]
-"8036" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1573</SUB>> ]
-"8043" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1573</SUB>> ]
-"8053" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetDouble &lt; false)<SUB>1573</SUB>> ]
-"8058" [label = <(&lt;operator&gt;.bracketedPrimary,(o, v))<SUB>1573</SUB>> ]
-"8004" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1573</SUB>> ]
-"8008" [label = <(SET_PRIMITIVE_FIELD(Double, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1573</SUB>> ]
-"8015" [label = <(RETURN,SET_PRIMITIVE_FIELD(Double, obj, v),SET_PRIMITIVE_FIELD(Double, obj, v))<SUB>1573</SUB>> ]
-"8023" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Double, obj, v))<SUB>1573</SUB>> ]
-"8031" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Double, obj, v))<SUB>1573</SUB>> ]
-"8037" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1573</SUB>> ]
-"8044" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1573</SUB>> ]
-"8054" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetDouble)<SUB>1573</SUB>> ]
-"8059" [label = <(&lt;operator&gt;.expressionList,o, v)<SUB>1573</SUB>> ]
-"7989" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1573</SUB>> ]
-"8009" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1573</SUB>> ]
-"8025" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1573</SUB>> ]
-"8033" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Double, obj, v)&gt;,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Double, obj, v)&gt;)<SUB>1573</SUB>> ]
-"8039" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Double, obj, v))<SUB>1573</SUB>> ]
-"8045" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1573</SUB>> ]
-"8048" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Double, obj, v))<SUB>1573</SUB>> ]
-"8056" [label = <(FIELD_IDENTIFIER,SetDouble,SetDouble)<SUB>1573</SUB>> ]
-"7990" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1573</SUB>> ]
-"7994" [label = <(SET_PRIMITIVE_FIELD(Double, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1573</SUB>> ]
-"8001" [label = <(RETURN,SET_PRIMITIVE_FIELD(Double, obj, v),SET_PRIMITIVE_FIELD(Double, obj, v))<SUB>1573</SUB>> ]
-"8010" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1573</SUB>> ]
-"8012" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1573</SUB>> ]
-"8041" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1573</SUB>> ]
-"8047" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1573</SUB>> ]
-"8050" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1573</SUB>> ]
-"7995" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1573</SUB>> ]
-"7996" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1573</SUB>> ]
-"7998" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1573</SUB>> ]
-"7979" [label = <(METHOD,SetDoubleField)<SUB>1572</SUB>> ]
-"8062" [label = <(METHOD_RETURN,void)<SUB>1572</SUB>> ]
-  "7985" -> "7990" 
-  "7985" -> "8004" 
-  "8017" -> "8025" 
-  "8020" -> "8033" 
-  "8027" -> "8041" 
-  "8035" -> "8056" 
-  "8052" -> "8062" 
-  "8003" -> "8010" 
-  "8003" -> "8017" 
-  "8022" -> "8020" 
-  "8030" -> "8027" 
-  "8036" -> "8047" 
-  "8043" -> "8035" 
-  "8053" -> "8059" 
-  "8058" -> "8052" 
-  "8004" -> "8003" 
-  "8008" -> "8015" 
-  "8015" -> "8062" 
-  "8023" -> "8022" 
-  "8031" -> "8030" 
-  "8037" -> "8036" 
-  "8044" -> "8043" 
-  "8054" -> "8053" 
-  "8059" -> "8058" 
-  "7989" -> "7996" 
-  "7989" -> "8004" 
-  "8009" -> "8008" 
-  "8025" -> "8023" 
-  "8033" -> "8031" 
-  "8039" -> "8037" 
-  "8045" -> "8050" 
-  "8048" -> "8044" 
-  "8056" -> "8054" 
-  "7990" -> "7989" 
-  "7994" -> "8001" 
-  "8001" -> "8062" 
-  "8010" -> "8012" 
-  "8012" -> "8009" 
-  "8041" -> "8039" 
-  "8047" -> "8045" 
-  "8050" -> "8048" 
-  "7995" -> "7994" 
-  "7996" -> "7998" 
-  "7998" -> "7995" 
-  "7979" -> "7985" 
+digraph "SetStaticBooleanField" {  
+"8132" [label = <(SET_STATIC_PRIMITIVE_FIELD,SET_STATIC_PRIMITIVE_FIELD(Boolean, v))<SUB>1510</SUB>> ]
+"8149" [label = <(soa,ScopedObjectAccess)<SUB>1510</SUB>> ]
+"8152" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1510</SUB>> ]
+"8159" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, nullptr, JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Boolean, v)&gt;(v)))<SUB>1510</SUB>> ]
+"8167" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetBoolean &lt; false &gt; (f-&gt;GetDeclaringClass(), v))<SUB>1510</SUB>> ]
+"8154" [label = <(SET_STATIC_PRIMITIVE_FIELD(Boolean, v),jni::DecodeArtField(fid))<SUB>1510</SUB>> ]
+"8162" [label = <(SET_STATIC_PRIMITIVE_FIELD(Boolean, v),JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Boolean, v)&gt;(v))<SUB>1510</SUB>> ]
+"8168" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetBoolean &lt; false)<SUB>1510</SUB>> ]
+"8173" [label = <(&lt;operator&gt;.bracketedPrimary,(f-&gt;GetDeclaringClass(), v))<SUB>1510</SUB>> ]
+"8155" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Boolean, v))<SUB>1510</SUB>> ]
+"8163" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Boolean, v))<SUB>1510</SUB>> ]
+"8169" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetBoolean)<SUB>1510</SUB>> ]
+"8174" [label = <(&lt;operator&gt;.expressionList,f-&gt;GetDeclaringClass(), v)<SUB>1510</SUB>> ]
+"8135" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1510</SUB>> ]
+"8157" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1510</SUB>> ]
+"8165" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Boolean, v)&gt;,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Boolean, v)&gt;)<SUB>1510</SUB>> ]
+"8171" [label = <(FIELD_IDENTIFIER,SetBoolean,SetBoolean)<SUB>1510</SUB>> ]
+"8175" [label = <(SET_STATIC_PRIMITIVE_FIELD(Boolean, v),f-&gt;GetDeclaringClass())<SUB>1510</SUB>> ]
+"8136" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1510</SUB>> ]
+"8140" [label = <(SET_STATIC_PRIMITIVE_FIELD(Boolean, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1510</SUB>> ]
+"8147" [label = <(RETURN,SET_STATIC_PRIMITIVE_FIELD(Boolean, v),SET_STATIC_PRIMITIVE_FIELD(Boolean, v))<SUB>1510</SUB>> ]
+"8176" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1510</SUB>> ]
+"8141" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1510</SUB>> ]
+"8178" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1510</SUB>> ]
+"8142" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1510</SUB>> ]
+"8144" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1510</SUB>> ]
+"8126" [label = <(METHOD,SetStaticBooleanField)<SUB>1509</SUB>> ]
+"8180" [label = <(METHOD_RETURN,void)<SUB>1509</SUB>> ]
+  "8132" -> "8136" 
+  "8132" -> "8149" 
+  "8149" -> "8157" 
+  "8152" -> "8165" 
+  "8159" -> "8171" 
+  "8167" -> "8180" 
+  "8154" -> "8152" 
+  "8162" -> "8159" 
+  "8168" -> "8178" 
+  "8173" -> "8167" 
+  "8155" -> "8154" 
+  "8163" -> "8162" 
+  "8169" -> "8168" 
+  "8174" -> "8173" 
+  "8135" -> "8142" 
+  "8135" -> "8149" 
+  "8157" -> "8155" 
+  "8165" -> "8163" 
+  "8171" -> "8169" 
+  "8175" -> "8174" 
+  "8136" -> "8135" 
+  "8140" -> "8147" 
+  "8147" -> "8180" 
+  "8176" -> "8175" 
+  "8141" -> "8140" 
+  "8178" -> "8176" 
+  "8142" -> "8144" 
+  "8144" -> "8141" 
+  "8126" -> "8132" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/146-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/146-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/146-cfg.dot	2023-06-07 19:33:45.447394686 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/146-cfg.dot	2023-06-07 19:33:52.027393982 +0330
@@ -1,90 +1,59 @@
-digraph "SetIntField" {  
-"8070" [label = <(SET_PRIMITIVE_FIELD,SET_PRIMITIVE_FIELD(Int, obj, v))<SUB>1577</SUB>> ]
-"8102" [label = <(soa,ScopedObjectAccess)<SUB>1577</SUB>> ]
-"8105" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1577</SUB>> ]
-"8112" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, obj, JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Int, obj, v)&gt;(v)))<SUB>1577</SUB>> ]
-"8120" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1577</SUB>> ]
-"8137" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetInt &lt; false &gt; (o, v))<SUB>1577</SUB>> ]
-"8088" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1577</SUB>> ]
-"8107" [label = <(SET_PRIMITIVE_FIELD(Int, obj, v),jni::DecodeArtField(fid))<SUB>1577</SUB>> ]
-"8115" [label = <(SET_PRIMITIVE_FIELD(Int, obj, v),JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Int, obj, v)&gt;(v))<SUB>1577</SUB>> ]
-"8121" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1577</SUB>> ]
-"8128" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1577</SUB>> ]
-"8138" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetInt &lt; false)<SUB>1577</SUB>> ]
-"8143" [label = <(&lt;operator&gt;.bracketedPrimary,(o, v))<SUB>1577</SUB>> ]
-"8089" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1577</SUB>> ]
-"8093" [label = <(SET_PRIMITIVE_FIELD(Int, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1577</SUB>> ]
-"8100" [label = <(RETURN,SET_PRIMITIVE_FIELD(Int, obj, v),SET_PRIMITIVE_FIELD(Int, obj, v))<SUB>1577</SUB>> ]
-"8108" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Int, obj, v))<SUB>1577</SUB>> ]
-"8116" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Int, obj, v))<SUB>1577</SUB>> ]
-"8122" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1577</SUB>> ]
-"8129" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1577</SUB>> ]
-"8139" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetInt)<SUB>1577</SUB>> ]
-"8144" [label = <(&lt;operator&gt;.expressionList,o, v)<SUB>1577</SUB>> ]
-"8074" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1577</SUB>> ]
-"8094" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1577</SUB>> ]
-"8110" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1577</SUB>> ]
-"8118" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Int, obj, v)&gt;,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Int, obj, v)&gt;)<SUB>1577</SUB>> ]
-"8124" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Int, obj, v))<SUB>1577</SUB>> ]
-"8130" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1577</SUB>> ]
-"8133" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Int, obj, v))<SUB>1577</SUB>> ]
-"8141" [label = <(FIELD_IDENTIFIER,SetInt,SetInt)<SUB>1577</SUB>> ]
-"8075" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1577</SUB>> ]
-"8079" [label = <(SET_PRIMITIVE_FIELD(Int, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1577</SUB>> ]
-"8086" [label = <(RETURN,SET_PRIMITIVE_FIELD(Int, obj, v),SET_PRIMITIVE_FIELD(Int, obj, v))<SUB>1577</SUB>> ]
-"8095" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1577</SUB>> ]
-"8097" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1577</SUB>> ]
-"8126" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1577</SUB>> ]
-"8132" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1577</SUB>> ]
-"8135" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1577</SUB>> ]
-"8080" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1577</SUB>> ]
-"8081" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1577</SUB>> ]
-"8083" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1577</SUB>> ]
-"8064" [label = <(METHOD,SetIntField)<SUB>1576</SUB>> ]
-"8147" [label = <(METHOD_RETURN,void)<SUB>1576</SUB>> ]
-  "8070" -> "8075" 
-  "8070" -> "8089" 
-  "8102" -> "8110" 
-  "8105" -> "8118" 
-  "8112" -> "8126" 
-  "8120" -> "8141" 
-  "8137" -> "8147" 
-  "8088" -> "8095" 
-  "8088" -> "8102" 
-  "8107" -> "8105" 
-  "8115" -> "8112" 
-  "8121" -> "8132" 
-  "8128" -> "8120" 
-  "8138" -> "8144" 
-  "8143" -> "8137" 
-  "8089" -> "8088" 
-  "8093" -> "8100" 
-  "8100" -> "8147" 
-  "8108" -> "8107" 
-  "8116" -> "8115" 
-  "8122" -> "8121" 
-  "8129" -> "8128" 
-  "8139" -> "8138" 
-  "8144" -> "8143" 
-  "8074" -> "8081" 
-  "8074" -> "8089" 
-  "8094" -> "8093" 
-  "8110" -> "8108" 
-  "8118" -> "8116" 
-  "8124" -> "8122" 
-  "8130" -> "8135" 
-  "8133" -> "8129" 
-  "8141" -> "8139" 
-  "8075" -> "8074" 
-  "8079" -> "8086" 
-  "8086" -> "8147" 
-  "8095" -> "8097" 
-  "8097" -> "8094" 
-  "8126" -> "8124" 
-  "8132" -> "8130" 
-  "8135" -> "8133" 
-  "8080" -> "8079" 
-  "8081" -> "8083" 
-  "8083" -> "8080" 
-  "8064" -> "8070" 
+digraph "SetStaticByteField" {  
+"8188" [label = <(SET_STATIC_PRIMITIVE_FIELD,SET_STATIC_PRIMITIVE_FIELD(Byte, v))<SUB>1514</SUB>> ]
+"8205" [label = <(soa,ScopedObjectAccess)<SUB>1514</SUB>> ]
+"8208" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1514</SUB>> ]
+"8215" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, nullptr, JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Byte, v)&gt;(v)))<SUB>1514</SUB>> ]
+"8223" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetByte &lt; false &gt; (f-&gt;GetDeclaringClass(), v))<SUB>1514</SUB>> ]
+"8210" [label = <(SET_STATIC_PRIMITIVE_FIELD(Byte, v),jni::DecodeArtField(fid))<SUB>1514</SUB>> ]
+"8218" [label = <(SET_STATIC_PRIMITIVE_FIELD(Byte, v),JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Byte, v)&gt;(v))<SUB>1514</SUB>> ]
+"8224" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetByte &lt; false)<SUB>1514</SUB>> ]
+"8229" [label = <(&lt;operator&gt;.bracketedPrimary,(f-&gt;GetDeclaringClass(), v))<SUB>1514</SUB>> ]
+"8211" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Byte, v))<SUB>1514</SUB>> ]
+"8219" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Byte, v))<SUB>1514</SUB>> ]
+"8225" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetByte)<SUB>1514</SUB>> ]
+"8230" [label = <(&lt;operator&gt;.expressionList,f-&gt;GetDeclaringClass(), v)<SUB>1514</SUB>> ]
+"8191" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1514</SUB>> ]
+"8213" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1514</SUB>> ]
+"8221" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Byte, v)&gt;,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Byte, v)&gt;)<SUB>1514</SUB>> ]
+"8227" [label = <(FIELD_IDENTIFIER,SetByte,SetByte)<SUB>1514</SUB>> ]
+"8231" [label = <(SET_STATIC_PRIMITIVE_FIELD(Byte, v),f-&gt;GetDeclaringClass())<SUB>1514</SUB>> ]
+"8192" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1514</SUB>> ]
+"8196" [label = <(SET_STATIC_PRIMITIVE_FIELD(Byte, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1514</SUB>> ]
+"8203" [label = <(RETURN,SET_STATIC_PRIMITIVE_FIELD(Byte, v),SET_STATIC_PRIMITIVE_FIELD(Byte, v))<SUB>1514</SUB>> ]
+"8232" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1514</SUB>> ]
+"8197" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1514</SUB>> ]
+"8234" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1514</SUB>> ]
+"8198" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1514</SUB>> ]
+"8200" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1514</SUB>> ]
+"8182" [label = <(METHOD,SetStaticByteField)<SUB>1513</SUB>> ]
+"8236" [label = <(METHOD_RETURN,void)<SUB>1513</SUB>> ]
+  "8188" -> "8192" 
+  "8188" -> "8205" 
+  "8205" -> "8213" 
+  "8208" -> "8221" 
+  "8215" -> "8227" 
+  "8223" -> "8236" 
+  "8210" -> "8208" 
+  "8218" -> "8215" 
+  "8224" -> "8234" 
+  "8229" -> "8223" 
+  "8211" -> "8210" 
+  "8219" -> "8218" 
+  "8225" -> "8224" 
+  "8230" -> "8229" 
+  "8191" -> "8198" 
+  "8191" -> "8205" 
+  "8213" -> "8211" 
+  "8221" -> "8219" 
+  "8227" -> "8225" 
+  "8231" -> "8230" 
+  "8192" -> "8191" 
+  "8196" -> "8203" 
+  "8203" -> "8236" 
+  "8232" -> "8231" 
+  "8197" -> "8196" 
+  "8234" -> "8232" 
+  "8198" -> "8200" 
+  "8200" -> "8197" 
+  "8182" -> "8188" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/147-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/147-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/147-cfg.dot	2023-06-07 19:33:45.447394686 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/147-cfg.dot	2023-06-07 19:33:52.027393982 +0330
@@ -1,90 +1,59 @@
-digraph "SetLongField" {  
-"8155" [label = <(SET_PRIMITIVE_FIELD,SET_PRIMITIVE_FIELD(Long, obj, v))<SUB>1581</SUB>> ]
-"8187" [label = <(soa,ScopedObjectAccess)<SUB>1581</SUB>> ]
-"8190" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1581</SUB>> ]
-"8197" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, obj, JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Long, obj, v)&gt;(v)))<SUB>1581</SUB>> ]
-"8205" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1581</SUB>> ]
-"8222" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetLong &lt; false &gt; (o, v))<SUB>1581</SUB>> ]
-"8173" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1581</SUB>> ]
-"8192" [label = <(SET_PRIMITIVE_FIELD(Long, obj, v),jni::DecodeArtField(fid))<SUB>1581</SUB>> ]
-"8200" [label = <(SET_PRIMITIVE_FIELD(Long, obj, v),JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Long, obj, v)&gt;(v))<SUB>1581</SUB>> ]
-"8206" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1581</SUB>> ]
-"8213" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1581</SUB>> ]
-"8223" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetLong &lt; false)<SUB>1581</SUB>> ]
-"8228" [label = <(&lt;operator&gt;.bracketedPrimary,(o, v))<SUB>1581</SUB>> ]
-"8174" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1581</SUB>> ]
-"8178" [label = <(SET_PRIMITIVE_FIELD(Long, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1581</SUB>> ]
-"8185" [label = <(RETURN,SET_PRIMITIVE_FIELD(Long, obj, v),SET_PRIMITIVE_FIELD(Long, obj, v))<SUB>1581</SUB>> ]
-"8193" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Long, obj, v))<SUB>1581</SUB>> ]
-"8201" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Long, obj, v))<SUB>1581</SUB>> ]
-"8207" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1581</SUB>> ]
-"8214" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1581</SUB>> ]
-"8224" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetLong)<SUB>1581</SUB>> ]
-"8229" [label = <(&lt;operator&gt;.expressionList,o, v)<SUB>1581</SUB>> ]
-"8159" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1581</SUB>> ]
-"8179" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1581</SUB>> ]
-"8195" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1581</SUB>> ]
-"8203" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Long, obj, v)&gt;,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Long, obj, v)&gt;)<SUB>1581</SUB>> ]
-"8209" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Long, obj, v))<SUB>1581</SUB>> ]
-"8215" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1581</SUB>> ]
-"8218" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Long, obj, v))<SUB>1581</SUB>> ]
-"8226" [label = <(FIELD_IDENTIFIER,SetLong,SetLong)<SUB>1581</SUB>> ]
-"8160" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1581</SUB>> ]
-"8164" [label = <(SET_PRIMITIVE_FIELD(Long, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1581</SUB>> ]
-"8171" [label = <(RETURN,SET_PRIMITIVE_FIELD(Long, obj, v),SET_PRIMITIVE_FIELD(Long, obj, v))<SUB>1581</SUB>> ]
-"8180" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1581</SUB>> ]
-"8182" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1581</SUB>> ]
-"8211" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1581</SUB>> ]
-"8217" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1581</SUB>> ]
-"8220" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1581</SUB>> ]
-"8165" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1581</SUB>> ]
-"8166" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1581</SUB>> ]
-"8168" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1581</SUB>> ]
-"8149" [label = <(METHOD,SetLongField)<SUB>1580</SUB>> ]
-"8232" [label = <(METHOD_RETURN,void)<SUB>1580</SUB>> ]
-  "8155" -> "8160" 
-  "8155" -> "8174" 
-  "8187" -> "8195" 
-  "8190" -> "8203" 
-  "8197" -> "8211" 
-  "8205" -> "8226" 
-  "8222" -> "8232" 
-  "8173" -> "8180" 
-  "8173" -> "8187" 
-  "8192" -> "8190" 
-  "8200" -> "8197" 
-  "8206" -> "8217" 
-  "8213" -> "8205" 
-  "8223" -> "8229" 
-  "8228" -> "8222" 
-  "8174" -> "8173" 
-  "8178" -> "8185" 
-  "8185" -> "8232" 
-  "8193" -> "8192" 
-  "8201" -> "8200" 
-  "8207" -> "8206" 
-  "8214" -> "8213" 
-  "8224" -> "8223" 
-  "8229" -> "8228" 
-  "8159" -> "8166" 
-  "8159" -> "8174" 
-  "8179" -> "8178" 
-  "8195" -> "8193" 
-  "8203" -> "8201" 
-  "8209" -> "8207" 
-  "8215" -> "8220" 
-  "8218" -> "8214" 
-  "8226" -> "8224" 
-  "8160" -> "8159" 
-  "8164" -> "8171" 
-  "8171" -> "8232" 
-  "8180" -> "8182" 
-  "8182" -> "8179" 
-  "8211" -> "8209" 
-  "8217" -> "8215" 
-  "8220" -> "8218" 
-  "8165" -> "8164" 
-  "8166" -> "8168" 
-  "8168" -> "8165" 
-  "8149" -> "8155" 
+digraph "SetStaticCharField" {  
+"8244" [label = <(SET_STATIC_PRIMITIVE_FIELD,SET_STATIC_PRIMITIVE_FIELD(Char, v))<SUB>1518</SUB>> ]
+"8261" [label = <(soa,ScopedObjectAccess)<SUB>1518</SUB>> ]
+"8264" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1518</SUB>> ]
+"8271" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, nullptr, JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Char, v)&gt;(v)))<SUB>1518</SUB>> ]
+"8279" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetChar &lt; false &gt; (f-&gt;GetDeclaringClass(), v))<SUB>1518</SUB>> ]
+"8266" [label = <(SET_STATIC_PRIMITIVE_FIELD(Char, v),jni::DecodeArtField(fid))<SUB>1518</SUB>> ]
+"8274" [label = <(SET_STATIC_PRIMITIVE_FIELD(Char, v),JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Char, v)&gt;(v))<SUB>1518</SUB>> ]
+"8280" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetChar &lt; false)<SUB>1518</SUB>> ]
+"8285" [label = <(&lt;operator&gt;.bracketedPrimary,(f-&gt;GetDeclaringClass(), v))<SUB>1518</SUB>> ]
+"8267" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Char, v))<SUB>1518</SUB>> ]
+"8275" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Char, v))<SUB>1518</SUB>> ]
+"8281" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetChar)<SUB>1518</SUB>> ]
+"8286" [label = <(&lt;operator&gt;.expressionList,f-&gt;GetDeclaringClass(), v)<SUB>1518</SUB>> ]
+"8247" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1518</SUB>> ]
+"8269" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1518</SUB>> ]
+"8277" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Char, v)&gt;,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Char, v)&gt;)<SUB>1518</SUB>> ]
+"8283" [label = <(FIELD_IDENTIFIER,SetChar,SetChar)<SUB>1518</SUB>> ]
+"8287" [label = <(SET_STATIC_PRIMITIVE_FIELD(Char, v),f-&gt;GetDeclaringClass())<SUB>1518</SUB>> ]
+"8248" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1518</SUB>> ]
+"8252" [label = <(SET_STATIC_PRIMITIVE_FIELD(Char, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1518</SUB>> ]
+"8259" [label = <(RETURN,SET_STATIC_PRIMITIVE_FIELD(Char, v),SET_STATIC_PRIMITIVE_FIELD(Char, v))<SUB>1518</SUB>> ]
+"8288" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1518</SUB>> ]
+"8253" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1518</SUB>> ]
+"8290" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1518</SUB>> ]
+"8254" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1518</SUB>> ]
+"8256" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1518</SUB>> ]
+"8238" [label = <(METHOD,SetStaticCharField)<SUB>1517</SUB>> ]
+"8292" [label = <(METHOD_RETURN,void)<SUB>1517</SUB>> ]
+  "8244" -> "8248" 
+  "8244" -> "8261" 
+  "8261" -> "8269" 
+  "8264" -> "8277" 
+  "8271" -> "8283" 
+  "8279" -> "8292" 
+  "8266" -> "8264" 
+  "8274" -> "8271" 
+  "8280" -> "8290" 
+  "8285" -> "8279" 
+  "8267" -> "8266" 
+  "8275" -> "8274" 
+  "8281" -> "8280" 
+  "8286" -> "8285" 
+  "8247" -> "8254" 
+  "8247" -> "8261" 
+  "8269" -> "8267" 
+  "8277" -> "8275" 
+  "8283" -> "8281" 
+  "8287" -> "8286" 
+  "8248" -> "8247" 
+  "8252" -> "8259" 
+  "8259" -> "8292" 
+  "8288" -> "8287" 
+  "8253" -> "8252" 
+  "8290" -> "8288" 
+  "8254" -> "8256" 
+  "8256" -> "8253" 
+  "8238" -> "8244" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/148-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/148-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/148-cfg.dot	2023-06-07 19:33:45.447394686 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/148-cfg.dot	2023-06-07 19:33:52.027393982 +0330
@@ -1,90 +1,59 @@
-digraph "SetShortField" {  
-"8240" [label = <(SET_PRIMITIVE_FIELD,SET_PRIMITIVE_FIELD(Short, obj, v))<SUB>1585</SUB>> ]
-"8272" [label = <(soa,ScopedObjectAccess)<SUB>1585</SUB>> ]
-"8275" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1585</SUB>> ]
-"8282" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, obj, JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Short, obj, v)&gt;(v)))<SUB>1585</SUB>> ]
-"8290" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1585</SUB>> ]
-"8307" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetShort &lt; false &gt; (o, v))<SUB>1585</SUB>> ]
-"8258" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1585</SUB>> ]
-"8277" [label = <(SET_PRIMITIVE_FIELD(Short, obj, v),jni::DecodeArtField(fid))<SUB>1585</SUB>> ]
-"8285" [label = <(SET_PRIMITIVE_FIELD(Short, obj, v),JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Short, obj, v)&gt;(v))<SUB>1585</SUB>> ]
-"8291" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1585</SUB>> ]
-"8298" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1585</SUB>> ]
-"8308" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetShort &lt; false)<SUB>1585</SUB>> ]
-"8313" [label = <(&lt;operator&gt;.bracketedPrimary,(o, v))<SUB>1585</SUB>> ]
-"8259" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1585</SUB>> ]
-"8263" [label = <(SET_PRIMITIVE_FIELD(Short, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1585</SUB>> ]
-"8270" [label = <(RETURN,SET_PRIMITIVE_FIELD(Short, obj, v),SET_PRIMITIVE_FIELD(Short, obj, v))<SUB>1585</SUB>> ]
-"8278" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Short, obj, v))<SUB>1585</SUB>> ]
-"8286" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Short, obj, v))<SUB>1585</SUB>> ]
-"8292" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1585</SUB>> ]
-"8299" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1585</SUB>> ]
-"8309" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetShort)<SUB>1585</SUB>> ]
-"8314" [label = <(&lt;operator&gt;.expressionList,o, v)<SUB>1585</SUB>> ]
-"8244" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1585</SUB>> ]
-"8264" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1585</SUB>> ]
-"8280" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1585</SUB>> ]
-"8288" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Short, obj, v)&gt;,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Short, obj, v)&gt;)<SUB>1585</SUB>> ]
-"8294" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Short, obj, v))<SUB>1585</SUB>> ]
-"8300" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1585</SUB>> ]
-"8303" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Short, obj, v))<SUB>1585</SUB>> ]
-"8311" [label = <(FIELD_IDENTIFIER,SetShort,SetShort)<SUB>1585</SUB>> ]
-"8245" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1585</SUB>> ]
-"8249" [label = <(SET_PRIMITIVE_FIELD(Short, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1585</SUB>> ]
-"8256" [label = <(RETURN,SET_PRIMITIVE_FIELD(Short, obj, v),SET_PRIMITIVE_FIELD(Short, obj, v))<SUB>1585</SUB>> ]
-"8265" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1585</SUB>> ]
-"8267" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1585</SUB>> ]
-"8296" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1585</SUB>> ]
-"8302" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1585</SUB>> ]
-"8305" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1585</SUB>> ]
-"8250" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1585</SUB>> ]
-"8251" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1585</SUB>> ]
-"8253" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1585</SUB>> ]
-"8234" [label = <(METHOD,SetShortField)<SUB>1584</SUB>> ]
-"8317" [label = <(METHOD_RETURN,void)<SUB>1584</SUB>> ]
-  "8240" -> "8245" 
-  "8240" -> "8259" 
-  "8272" -> "8280" 
-  "8275" -> "8288" 
-  "8282" -> "8296" 
-  "8290" -> "8311" 
-  "8307" -> "8317" 
-  "8258" -> "8265" 
-  "8258" -> "8272" 
-  "8277" -> "8275" 
-  "8285" -> "8282" 
-  "8291" -> "8302" 
-  "8298" -> "8290" 
-  "8308" -> "8314" 
-  "8313" -> "8307" 
-  "8259" -> "8258" 
-  "8263" -> "8270" 
-  "8270" -> "8317" 
-  "8278" -> "8277" 
-  "8286" -> "8285" 
-  "8292" -> "8291" 
-  "8299" -> "8298" 
+digraph "SetStaticFloatField" {  
+"8300" [label = <(SET_STATIC_PRIMITIVE_FIELD,SET_STATIC_PRIMITIVE_FIELD(Float, v))<SUB>1522</SUB>> ]
+"8317" [label = <(soa,ScopedObjectAccess)<SUB>1522</SUB>> ]
+"8320" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1522</SUB>> ]
+"8327" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, nullptr, JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Float, v)&gt;(v)))<SUB>1522</SUB>> ]
+"8335" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetFloat &lt; false &gt; (f-&gt;GetDeclaringClass(), v))<SUB>1522</SUB>> ]
+"8322" [label = <(SET_STATIC_PRIMITIVE_FIELD(Float, v),jni::DecodeArtField(fid))<SUB>1522</SUB>> ]
+"8330" [label = <(SET_STATIC_PRIMITIVE_FIELD(Float, v),JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Float, v)&gt;(v))<SUB>1522</SUB>> ]
+"8336" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetFloat &lt; false)<SUB>1522</SUB>> ]
+"8341" [label = <(&lt;operator&gt;.bracketedPrimary,(f-&gt;GetDeclaringClass(), v))<SUB>1522</SUB>> ]
+"8323" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Float, v))<SUB>1522</SUB>> ]
+"8331" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Float, v))<SUB>1522</SUB>> ]
+"8337" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetFloat)<SUB>1522</SUB>> ]
+"8342" [label = <(&lt;operator&gt;.expressionList,f-&gt;GetDeclaringClass(), v)<SUB>1522</SUB>> ]
+"8303" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1522</SUB>> ]
+"8325" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1522</SUB>> ]
+"8333" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Float, v)&gt;,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Float, v)&gt;)<SUB>1522</SUB>> ]
+"8339" [label = <(FIELD_IDENTIFIER,SetFloat,SetFloat)<SUB>1522</SUB>> ]
+"8343" [label = <(SET_STATIC_PRIMITIVE_FIELD(Float, v),f-&gt;GetDeclaringClass())<SUB>1522</SUB>> ]
+"8304" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1522</SUB>> ]
+"8308" [label = <(SET_STATIC_PRIMITIVE_FIELD(Float, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1522</SUB>> ]
+"8315" [label = <(RETURN,SET_STATIC_PRIMITIVE_FIELD(Float, v),SET_STATIC_PRIMITIVE_FIELD(Float, v))<SUB>1522</SUB>> ]
+"8344" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1522</SUB>> ]
+"8309" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1522</SUB>> ]
+"8346" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1522</SUB>> ]
+"8310" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1522</SUB>> ]
+"8312" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1522</SUB>> ]
+"8294" [label = <(METHOD,SetStaticFloatField)<SUB>1521</SUB>> ]
+"8348" [label = <(METHOD_RETURN,void)<SUB>1521</SUB>> ]
+  "8300" -> "8304" 
+  "8300" -> "8317" 
+  "8317" -> "8325" 
+  "8320" -> "8333" 
+  "8327" -> "8339" 
+  "8335" -> "8348" 
+  "8322" -> "8320" 
+  "8330" -> "8327" 
+  "8336" -> "8346" 
+  "8341" -> "8335" 
+  "8323" -> "8322" 
+  "8331" -> "8330" 
+  "8337" -> "8336" 
+  "8342" -> "8341" 
+  "8303" -> "8310" 
+  "8303" -> "8317" 
+  "8325" -> "8323" 
+  "8333" -> "8331" 
+  "8339" -> "8337" 
+  "8343" -> "8342" 
+  "8304" -> "8303" 
+  "8308" -> "8315" 
+  "8315" -> "8348" 
+  "8344" -> "8343" 
   "8309" -> "8308" 
-  "8314" -> "8313" 
-  "8244" -> "8251" 
-  "8244" -> "8259" 
-  "8264" -> "8263" 
-  "8280" -> "8278" 
-  "8288" -> "8286" 
-  "8294" -> "8292" 
-  "8300" -> "8305" 
-  "8303" -> "8299" 
-  "8311" -> "8309" 
-  "8245" -> "8244" 
-  "8249" -> "8256" 
-  "8256" -> "8317" 
-  "8265" -> "8267" 
-  "8267" -> "8264" 
-  "8296" -> "8294" 
-  "8302" -> "8300" 
-  "8305" -> "8303" 
-  "8250" -> "8249" 
-  "8251" -> "8253" 
-  "8253" -> "8250" 
-  "8234" -> "8240" 
+  "8346" -> "8344" 
+  "8310" -> "8312" 
+  "8312" -> "8309" 
+  "8294" -> "8300" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/149-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/149-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/149-cfg.dot	2023-06-07 19:33:45.447394686 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/149-cfg.dot	2023-06-07 19:33:52.027393982 +0330
@@ -1,59 +1,59 @@
-digraph "SetStaticBooleanField" {  
-"8325" [label = <(SET_STATIC_PRIMITIVE_FIELD,SET_STATIC_PRIMITIVE_FIELD(Boolean, v))<SUB>1589</SUB>> ]
-"8342" [label = <(soa,ScopedObjectAccess)<SUB>1589</SUB>> ]
-"8345" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1589</SUB>> ]
-"8352" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, nullptr, JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Boolean, v)&gt;(v)))<SUB>1589</SUB>> ]
-"8360" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetBoolean &lt; false &gt; (f-&gt;GetDeclaringClass(), v))<SUB>1589</SUB>> ]
-"8347" [label = <(SET_STATIC_PRIMITIVE_FIELD(Boolean, v),jni::DecodeArtField(fid))<SUB>1589</SUB>> ]
-"8355" [label = <(SET_STATIC_PRIMITIVE_FIELD(Boolean, v),JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Boolean, v)&gt;(v))<SUB>1589</SUB>> ]
-"8361" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetBoolean &lt; false)<SUB>1589</SUB>> ]
-"8366" [label = <(&lt;operator&gt;.bracketedPrimary,(f-&gt;GetDeclaringClass(), v))<SUB>1589</SUB>> ]
-"8348" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Boolean, v))<SUB>1589</SUB>> ]
-"8356" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Boolean, v))<SUB>1589</SUB>> ]
-"8362" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetBoolean)<SUB>1589</SUB>> ]
-"8367" [label = <(&lt;operator&gt;.expressionList,f-&gt;GetDeclaringClass(), v)<SUB>1589</SUB>> ]
-"8328" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1589</SUB>> ]
-"8350" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1589</SUB>> ]
-"8358" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Boolean, v)&gt;,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Boolean, v)&gt;)<SUB>1589</SUB>> ]
-"8364" [label = <(FIELD_IDENTIFIER,SetBoolean,SetBoolean)<SUB>1589</SUB>> ]
-"8368" [label = <(SET_STATIC_PRIMITIVE_FIELD(Boolean, v),f-&gt;GetDeclaringClass())<SUB>1589</SUB>> ]
-"8329" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1589</SUB>> ]
-"8333" [label = <(SET_STATIC_PRIMITIVE_FIELD(Boolean, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1589</SUB>> ]
-"8340" [label = <(RETURN,SET_STATIC_PRIMITIVE_FIELD(Boolean, v),SET_STATIC_PRIMITIVE_FIELD(Boolean, v))<SUB>1589</SUB>> ]
-"8369" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1589</SUB>> ]
-"8334" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1589</SUB>> ]
-"8371" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1589</SUB>> ]
-"8335" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1589</SUB>> ]
-"8337" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1589</SUB>> ]
-"8319" [label = <(METHOD,SetStaticBooleanField)<SUB>1588</SUB>> ]
-"8373" [label = <(METHOD_RETURN,void)<SUB>1588</SUB>> ]
-  "8325" -> "8329" 
-  "8325" -> "8342" 
-  "8342" -> "8350" 
-  "8345" -> "8358" 
-  "8352" -> "8364" 
-  "8360" -> "8373" 
-  "8347" -> "8345" 
-  "8355" -> "8352" 
-  "8361" -> "8371" 
-  "8366" -> "8360" 
-  "8348" -> "8347" 
-  "8356" -> "8355" 
-  "8362" -> "8361" 
-  "8367" -> "8366" 
-  "8328" -> "8335" 
-  "8328" -> "8342" 
-  "8350" -> "8348" 
-  "8358" -> "8356" 
-  "8364" -> "8362" 
-  "8368" -> "8367" 
-  "8329" -> "8328" 
-  "8333" -> "8340" 
-  "8340" -> "8373" 
-  "8369" -> "8368" 
-  "8334" -> "8333" 
-  "8371" -> "8369" 
-  "8335" -> "8337" 
-  "8337" -> "8334" 
-  "8319" -> "8325" 
+digraph "SetStaticDoubleField" {  
+"8356" [label = <(SET_STATIC_PRIMITIVE_FIELD,SET_STATIC_PRIMITIVE_FIELD(Double, v))<SUB>1526</SUB>> ]
+"8373" [label = <(soa,ScopedObjectAccess)<SUB>1526</SUB>> ]
+"8376" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1526</SUB>> ]
+"8383" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, nullptr, JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Double, v)&gt;(v)))<SUB>1526</SUB>> ]
+"8391" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetDouble &lt; false &gt; (f-&gt;GetDeclaringClass(), v))<SUB>1526</SUB>> ]
+"8378" [label = <(SET_STATIC_PRIMITIVE_FIELD(Double, v),jni::DecodeArtField(fid))<SUB>1526</SUB>> ]
+"8386" [label = <(SET_STATIC_PRIMITIVE_FIELD(Double, v),JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Double, v)&gt;(v))<SUB>1526</SUB>> ]
+"8392" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetDouble &lt; false)<SUB>1526</SUB>> ]
+"8397" [label = <(&lt;operator&gt;.bracketedPrimary,(f-&gt;GetDeclaringClass(), v))<SUB>1526</SUB>> ]
+"8379" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Double, v))<SUB>1526</SUB>> ]
+"8387" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Double, v))<SUB>1526</SUB>> ]
+"8393" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetDouble)<SUB>1526</SUB>> ]
+"8398" [label = <(&lt;operator&gt;.expressionList,f-&gt;GetDeclaringClass(), v)<SUB>1526</SUB>> ]
+"8359" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1526</SUB>> ]
+"8381" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1526</SUB>> ]
+"8389" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Double, v)&gt;,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Double, v)&gt;)<SUB>1526</SUB>> ]
+"8395" [label = <(FIELD_IDENTIFIER,SetDouble,SetDouble)<SUB>1526</SUB>> ]
+"8399" [label = <(SET_STATIC_PRIMITIVE_FIELD(Double, v),f-&gt;GetDeclaringClass())<SUB>1526</SUB>> ]
+"8360" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1526</SUB>> ]
+"8364" [label = <(SET_STATIC_PRIMITIVE_FIELD(Double, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1526</SUB>> ]
+"8371" [label = <(RETURN,SET_STATIC_PRIMITIVE_FIELD(Double, v),SET_STATIC_PRIMITIVE_FIELD(Double, v))<SUB>1526</SUB>> ]
+"8400" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1526</SUB>> ]
+"8365" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1526</SUB>> ]
+"8402" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1526</SUB>> ]
+"8366" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1526</SUB>> ]
+"8368" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1526</SUB>> ]
+"8350" [label = <(METHOD,SetStaticDoubleField)<SUB>1525</SUB>> ]
+"8404" [label = <(METHOD_RETURN,void)<SUB>1525</SUB>> ]
+  "8356" -> "8360" 
+  "8356" -> "8373" 
+  "8373" -> "8381" 
+  "8376" -> "8389" 
+  "8383" -> "8395" 
+  "8391" -> "8404" 
+  "8378" -> "8376" 
+  "8386" -> "8383" 
+  "8392" -> "8402" 
+  "8397" -> "8391" 
+  "8379" -> "8378" 
+  "8387" -> "8386" 
+  "8393" -> "8392" 
+  "8398" -> "8397" 
+  "8359" -> "8366" 
+  "8359" -> "8373" 
+  "8381" -> "8379" 
+  "8389" -> "8387" 
+  "8395" -> "8393" 
+  "8399" -> "8398" 
+  "8360" -> "8359" 
+  "8364" -> "8371" 
+  "8371" -> "8404" 
+  "8400" -> "8399" 
+  "8365" -> "8364" 
+  "8402" -> "8400" 
+  "8366" -> "8368" 
+  "8368" -> "8365" 
+  "8350" -> "8356" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/15-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/15-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/15-cfg.dot	2023-06-07 19:33:45.337394696 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/15-cfg.dot	2023-06-07 19:33:51.917393996 +0330
@@ -1,5 +1,5 @@
-digraph "EnsureInitialized" {  
-"375" [label = <(METHOD,EnsureInitialized)<SUB>310</SUB>> ]
-"379" [label = <(METHOD_RETURN,ANY)<SUB>310</SUB>> ]
-  "375" -> "379" 
+digraph "FindFieldID" {  
+"271" [label = <(METHOD,FindFieldID)<SUB>298</SUB>> ]
+"278" [label = <(METHOD_RETURN,jfieldID)<SUB>298</SUB>> ]
+  "271" -> "278" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/150-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/150-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/150-cfg.dot	2023-06-07 19:33:45.447394686 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/150-cfg.dot	2023-06-07 19:33:52.027393982 +0330
@@ -1,59 +1,59 @@
-digraph "SetStaticByteField" {  
-"8381" [label = <(SET_STATIC_PRIMITIVE_FIELD,SET_STATIC_PRIMITIVE_FIELD(Byte, v))<SUB>1593</SUB>> ]
-"8398" [label = <(soa,ScopedObjectAccess)<SUB>1593</SUB>> ]
-"8401" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1593</SUB>> ]
-"8408" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, nullptr, JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Byte, v)&gt;(v)))<SUB>1593</SUB>> ]
-"8416" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetByte &lt; false &gt; (f-&gt;GetDeclaringClass(), v))<SUB>1593</SUB>> ]
-"8403" [label = <(SET_STATIC_PRIMITIVE_FIELD(Byte, v),jni::DecodeArtField(fid))<SUB>1593</SUB>> ]
-"8411" [label = <(SET_STATIC_PRIMITIVE_FIELD(Byte, v),JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Byte, v)&gt;(v))<SUB>1593</SUB>> ]
-"8417" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetByte &lt; false)<SUB>1593</SUB>> ]
-"8422" [label = <(&lt;operator&gt;.bracketedPrimary,(f-&gt;GetDeclaringClass(), v))<SUB>1593</SUB>> ]
-"8404" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Byte, v))<SUB>1593</SUB>> ]
-"8412" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Byte, v))<SUB>1593</SUB>> ]
-"8418" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetByte)<SUB>1593</SUB>> ]
-"8423" [label = <(&lt;operator&gt;.expressionList,f-&gt;GetDeclaringClass(), v)<SUB>1593</SUB>> ]
-"8384" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1593</SUB>> ]
-"8406" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1593</SUB>> ]
-"8414" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Byte, v)&gt;,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Byte, v)&gt;)<SUB>1593</SUB>> ]
-"8420" [label = <(FIELD_IDENTIFIER,SetByte,SetByte)<SUB>1593</SUB>> ]
-"8424" [label = <(SET_STATIC_PRIMITIVE_FIELD(Byte, v),f-&gt;GetDeclaringClass())<SUB>1593</SUB>> ]
-"8385" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1593</SUB>> ]
-"8389" [label = <(SET_STATIC_PRIMITIVE_FIELD(Byte, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1593</SUB>> ]
-"8396" [label = <(RETURN,SET_STATIC_PRIMITIVE_FIELD(Byte, v),SET_STATIC_PRIMITIVE_FIELD(Byte, v))<SUB>1593</SUB>> ]
-"8425" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1593</SUB>> ]
-"8390" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1593</SUB>> ]
-"8427" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1593</SUB>> ]
-"8391" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1593</SUB>> ]
-"8393" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1593</SUB>> ]
-"8375" [label = <(METHOD,SetStaticByteField)<SUB>1592</SUB>> ]
-"8429" [label = <(METHOD_RETURN,void)<SUB>1592</SUB>> ]
-  "8381" -> "8385" 
-  "8381" -> "8398" 
-  "8398" -> "8406" 
-  "8401" -> "8414" 
-  "8408" -> "8420" 
-  "8416" -> "8429" 
-  "8403" -> "8401" 
-  "8411" -> "8408" 
-  "8417" -> "8427" 
-  "8422" -> "8416" 
-  "8404" -> "8403" 
-  "8412" -> "8411" 
-  "8418" -> "8417" 
-  "8423" -> "8422" 
-  "8384" -> "8391" 
-  "8384" -> "8398" 
-  "8406" -> "8404" 
-  "8414" -> "8412" 
-  "8420" -> "8418" 
-  "8424" -> "8423" 
-  "8385" -> "8384" 
-  "8389" -> "8396" 
-  "8396" -> "8429" 
-  "8425" -> "8424" 
-  "8390" -> "8389" 
-  "8427" -> "8425" 
-  "8391" -> "8393" 
-  "8393" -> "8390" 
-  "8375" -> "8381" 
+digraph "SetStaticIntField" {  
+"8412" [label = <(SET_STATIC_PRIMITIVE_FIELD,SET_STATIC_PRIMITIVE_FIELD(Int, v))<SUB>1530</SUB>> ]
+"8429" [label = <(soa,ScopedObjectAccess)<SUB>1530</SUB>> ]
+"8432" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1530</SUB>> ]
+"8439" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, nullptr, JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Int, v)&gt;(v)))<SUB>1530</SUB>> ]
+"8447" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetInt &lt; false &gt; (f-&gt;GetDeclaringClass(), v))<SUB>1530</SUB>> ]
+"8434" [label = <(SET_STATIC_PRIMITIVE_FIELD(Int, v),jni::DecodeArtField(fid))<SUB>1530</SUB>> ]
+"8442" [label = <(SET_STATIC_PRIMITIVE_FIELD(Int, v),JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Int, v)&gt;(v))<SUB>1530</SUB>> ]
+"8448" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetInt &lt; false)<SUB>1530</SUB>> ]
+"8453" [label = <(&lt;operator&gt;.bracketedPrimary,(f-&gt;GetDeclaringClass(), v))<SUB>1530</SUB>> ]
+"8435" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Int, v))<SUB>1530</SUB>> ]
+"8443" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Int, v))<SUB>1530</SUB>> ]
+"8449" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetInt)<SUB>1530</SUB>> ]
+"8454" [label = <(&lt;operator&gt;.expressionList,f-&gt;GetDeclaringClass(), v)<SUB>1530</SUB>> ]
+"8415" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1530</SUB>> ]
+"8437" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1530</SUB>> ]
+"8445" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Int, v)&gt;,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Int, v)&gt;)<SUB>1530</SUB>> ]
+"8451" [label = <(FIELD_IDENTIFIER,SetInt,SetInt)<SUB>1530</SUB>> ]
+"8455" [label = <(SET_STATIC_PRIMITIVE_FIELD(Int, v),f-&gt;GetDeclaringClass())<SUB>1530</SUB>> ]
+"8416" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1530</SUB>> ]
+"8420" [label = <(SET_STATIC_PRIMITIVE_FIELD(Int, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1530</SUB>> ]
+"8427" [label = <(RETURN,SET_STATIC_PRIMITIVE_FIELD(Int, v),SET_STATIC_PRIMITIVE_FIELD(Int, v))<SUB>1530</SUB>> ]
+"8456" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1530</SUB>> ]
+"8421" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1530</SUB>> ]
+"8458" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1530</SUB>> ]
+"8422" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1530</SUB>> ]
+"8424" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1530</SUB>> ]
+"8406" [label = <(METHOD,SetStaticIntField)<SUB>1529</SUB>> ]
+"8460" [label = <(METHOD_RETURN,void)<SUB>1529</SUB>> ]
+  "8412" -> "8416" 
+  "8412" -> "8429" 
+  "8429" -> "8437" 
+  "8432" -> "8445" 
+  "8439" -> "8451" 
+  "8447" -> "8460" 
+  "8434" -> "8432" 
+  "8442" -> "8439" 
+  "8448" -> "8458" 
+  "8453" -> "8447" 
+  "8435" -> "8434" 
+  "8443" -> "8442" 
+  "8449" -> "8448" 
+  "8454" -> "8453" 
+  "8415" -> "8422" 
+  "8415" -> "8429" 
+  "8437" -> "8435" 
+  "8445" -> "8443" 
+  "8451" -> "8449" 
+  "8455" -> "8454" 
+  "8416" -> "8415" 
+  "8420" -> "8427" 
+  "8427" -> "8460" 
+  "8456" -> "8455" 
+  "8421" -> "8420" 
+  "8458" -> "8456" 
+  "8422" -> "8424" 
+  "8424" -> "8421" 
+  "8406" -> "8412" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/151-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/151-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/151-cfg.dot	2023-06-07 19:33:45.447394686 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/151-cfg.dot	2023-06-07 19:33:52.027393982 +0330
@@ -1,59 +1,59 @@
-digraph "SetStaticCharField" {  
-"8437" [label = <(SET_STATIC_PRIMITIVE_FIELD,SET_STATIC_PRIMITIVE_FIELD(Char, v))<SUB>1597</SUB>> ]
-"8454" [label = <(soa,ScopedObjectAccess)<SUB>1597</SUB>> ]
-"8457" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1597</SUB>> ]
-"8464" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, nullptr, JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Char, v)&gt;(v)))<SUB>1597</SUB>> ]
-"8472" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetChar &lt; false &gt; (f-&gt;GetDeclaringClass(), v))<SUB>1597</SUB>> ]
-"8459" [label = <(SET_STATIC_PRIMITIVE_FIELD(Char, v),jni::DecodeArtField(fid))<SUB>1597</SUB>> ]
-"8467" [label = <(SET_STATIC_PRIMITIVE_FIELD(Char, v),JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Char, v)&gt;(v))<SUB>1597</SUB>> ]
-"8473" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetChar &lt; false)<SUB>1597</SUB>> ]
-"8478" [label = <(&lt;operator&gt;.bracketedPrimary,(f-&gt;GetDeclaringClass(), v))<SUB>1597</SUB>> ]
-"8460" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Char, v))<SUB>1597</SUB>> ]
-"8468" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Char, v))<SUB>1597</SUB>> ]
-"8474" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetChar)<SUB>1597</SUB>> ]
-"8479" [label = <(&lt;operator&gt;.expressionList,f-&gt;GetDeclaringClass(), v)<SUB>1597</SUB>> ]
-"8440" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1597</SUB>> ]
-"8462" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1597</SUB>> ]
-"8470" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Char, v)&gt;,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Char, v)&gt;)<SUB>1597</SUB>> ]
-"8476" [label = <(FIELD_IDENTIFIER,SetChar,SetChar)<SUB>1597</SUB>> ]
-"8480" [label = <(SET_STATIC_PRIMITIVE_FIELD(Char, v),f-&gt;GetDeclaringClass())<SUB>1597</SUB>> ]
-"8441" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1597</SUB>> ]
-"8445" [label = <(SET_STATIC_PRIMITIVE_FIELD(Char, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1597</SUB>> ]
-"8452" [label = <(RETURN,SET_STATIC_PRIMITIVE_FIELD(Char, v),SET_STATIC_PRIMITIVE_FIELD(Char, v))<SUB>1597</SUB>> ]
-"8481" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1597</SUB>> ]
-"8446" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1597</SUB>> ]
-"8483" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1597</SUB>> ]
-"8447" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1597</SUB>> ]
-"8449" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1597</SUB>> ]
-"8431" [label = <(METHOD,SetStaticCharField)<SUB>1596</SUB>> ]
-"8485" [label = <(METHOD_RETURN,void)<SUB>1596</SUB>> ]
-  "8437" -> "8441" 
-  "8437" -> "8454" 
-  "8454" -> "8462" 
-  "8457" -> "8470" 
-  "8464" -> "8476" 
-  "8472" -> "8485" 
-  "8459" -> "8457" 
-  "8467" -> "8464" 
-  "8473" -> "8483" 
-  "8478" -> "8472" 
-  "8460" -> "8459" 
-  "8468" -> "8467" 
-  "8474" -> "8473" 
-  "8479" -> "8478" 
-  "8440" -> "8447" 
-  "8440" -> "8454" 
-  "8462" -> "8460" 
-  "8470" -> "8468" 
-  "8476" -> "8474" 
-  "8480" -> "8479" 
-  "8441" -> "8440" 
-  "8445" -> "8452" 
-  "8452" -> "8485" 
-  "8481" -> "8480" 
-  "8446" -> "8445" 
-  "8483" -> "8481" 
-  "8447" -> "8449" 
-  "8449" -> "8446" 
-  "8431" -> "8437" 
+digraph "SetStaticLongField" {  
+"8468" [label = <(SET_STATIC_PRIMITIVE_FIELD,SET_STATIC_PRIMITIVE_FIELD(Long, v))<SUB>1534</SUB>> ]
+"8485" [label = <(soa,ScopedObjectAccess)<SUB>1534</SUB>> ]
+"8488" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1534</SUB>> ]
+"8495" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, nullptr, JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Long, v)&gt;(v)))<SUB>1534</SUB>> ]
+"8503" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetLong &lt; false &gt; (f-&gt;GetDeclaringClass(), v))<SUB>1534</SUB>> ]
+"8490" [label = <(SET_STATIC_PRIMITIVE_FIELD(Long, v),jni::DecodeArtField(fid))<SUB>1534</SUB>> ]
+"8498" [label = <(SET_STATIC_PRIMITIVE_FIELD(Long, v),JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Long, v)&gt;(v))<SUB>1534</SUB>> ]
+"8504" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetLong &lt; false)<SUB>1534</SUB>> ]
+"8509" [label = <(&lt;operator&gt;.bracketedPrimary,(f-&gt;GetDeclaringClass(), v))<SUB>1534</SUB>> ]
+"8491" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Long, v))<SUB>1534</SUB>> ]
+"8499" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Long, v))<SUB>1534</SUB>> ]
+"8505" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetLong)<SUB>1534</SUB>> ]
+"8510" [label = <(&lt;operator&gt;.expressionList,f-&gt;GetDeclaringClass(), v)<SUB>1534</SUB>> ]
+"8471" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1534</SUB>> ]
+"8493" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1534</SUB>> ]
+"8501" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Long, v)&gt;,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Long, v)&gt;)<SUB>1534</SUB>> ]
+"8507" [label = <(FIELD_IDENTIFIER,SetLong,SetLong)<SUB>1534</SUB>> ]
+"8511" [label = <(SET_STATIC_PRIMITIVE_FIELD(Long, v),f-&gt;GetDeclaringClass())<SUB>1534</SUB>> ]
+"8472" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1534</SUB>> ]
+"8476" [label = <(SET_STATIC_PRIMITIVE_FIELD(Long, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1534</SUB>> ]
+"8483" [label = <(RETURN,SET_STATIC_PRIMITIVE_FIELD(Long, v),SET_STATIC_PRIMITIVE_FIELD(Long, v))<SUB>1534</SUB>> ]
+"8512" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1534</SUB>> ]
+"8477" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1534</SUB>> ]
+"8514" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1534</SUB>> ]
+"8478" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1534</SUB>> ]
+"8480" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1534</SUB>> ]
+"8462" [label = <(METHOD,SetStaticLongField)<SUB>1533</SUB>> ]
+"8516" [label = <(METHOD_RETURN,void)<SUB>1533</SUB>> ]
+  "8468" -> "8472" 
+  "8468" -> "8485" 
+  "8485" -> "8493" 
+  "8488" -> "8501" 
+  "8495" -> "8507" 
+  "8503" -> "8516" 
+  "8490" -> "8488" 
+  "8498" -> "8495" 
+  "8504" -> "8514" 
+  "8509" -> "8503" 
+  "8491" -> "8490" 
+  "8499" -> "8498" 
+  "8505" -> "8504" 
+  "8510" -> "8509" 
+  "8471" -> "8478" 
+  "8471" -> "8485" 
+  "8493" -> "8491" 
+  "8501" -> "8499" 
+  "8507" -> "8505" 
+  "8511" -> "8510" 
+  "8472" -> "8471" 
+  "8476" -> "8483" 
+  "8483" -> "8516" 
+  "8512" -> "8511" 
+  "8477" -> "8476" 
+  "8514" -> "8512" 
+  "8478" -> "8480" 
+  "8480" -> "8477" 
+  "8462" -> "8468" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/152-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/152-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/152-cfg.dot	2023-06-07 19:33:45.447394686 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/152-cfg.dot	2023-06-07 19:33:52.027393982 +0330
@@ -1,59 +1,59 @@
-digraph "SetStaticFloatField" {  
-"8493" [label = <(SET_STATIC_PRIMITIVE_FIELD,SET_STATIC_PRIMITIVE_FIELD(Float, v))<SUB>1601</SUB>> ]
-"8510" [label = <(soa,ScopedObjectAccess)<SUB>1601</SUB>> ]
-"8513" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1601</SUB>> ]
-"8520" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, nullptr, JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Float, v)&gt;(v)))<SUB>1601</SUB>> ]
-"8528" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetFloat &lt; false &gt; (f-&gt;GetDeclaringClass(), v))<SUB>1601</SUB>> ]
-"8515" [label = <(SET_STATIC_PRIMITIVE_FIELD(Float, v),jni::DecodeArtField(fid))<SUB>1601</SUB>> ]
-"8523" [label = <(SET_STATIC_PRIMITIVE_FIELD(Float, v),JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Float, v)&gt;(v))<SUB>1601</SUB>> ]
-"8529" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetFloat &lt; false)<SUB>1601</SUB>> ]
-"8534" [label = <(&lt;operator&gt;.bracketedPrimary,(f-&gt;GetDeclaringClass(), v))<SUB>1601</SUB>> ]
-"8516" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Float, v))<SUB>1601</SUB>> ]
-"8524" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Float, v))<SUB>1601</SUB>> ]
-"8530" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetFloat)<SUB>1601</SUB>> ]
-"8535" [label = <(&lt;operator&gt;.expressionList,f-&gt;GetDeclaringClass(), v)<SUB>1601</SUB>> ]
-"8496" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1601</SUB>> ]
-"8518" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1601</SUB>> ]
-"8526" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Float, v)&gt;,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Float, v)&gt;)<SUB>1601</SUB>> ]
-"8532" [label = <(FIELD_IDENTIFIER,SetFloat,SetFloat)<SUB>1601</SUB>> ]
-"8536" [label = <(SET_STATIC_PRIMITIVE_FIELD(Float, v),f-&gt;GetDeclaringClass())<SUB>1601</SUB>> ]
-"8497" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1601</SUB>> ]
-"8501" [label = <(SET_STATIC_PRIMITIVE_FIELD(Float, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1601</SUB>> ]
-"8508" [label = <(RETURN,SET_STATIC_PRIMITIVE_FIELD(Float, v),SET_STATIC_PRIMITIVE_FIELD(Float, v))<SUB>1601</SUB>> ]
-"8537" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1601</SUB>> ]
-"8502" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1601</SUB>> ]
-"8539" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1601</SUB>> ]
-"8503" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1601</SUB>> ]
-"8505" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1601</SUB>> ]
-"8487" [label = <(METHOD,SetStaticFloatField)<SUB>1600</SUB>> ]
-"8541" [label = <(METHOD_RETURN,void)<SUB>1600</SUB>> ]
-  "8493" -> "8497" 
-  "8493" -> "8510" 
-  "8510" -> "8518" 
-  "8513" -> "8526" 
-  "8520" -> "8532" 
-  "8528" -> "8541" 
-  "8515" -> "8513" 
-  "8523" -> "8520" 
-  "8529" -> "8539" 
-  "8534" -> "8528" 
-  "8516" -> "8515" 
-  "8524" -> "8523" 
-  "8530" -> "8529" 
-  "8535" -> "8534" 
-  "8496" -> "8503" 
-  "8496" -> "8510" 
-  "8518" -> "8516" 
-  "8526" -> "8524" 
-  "8532" -> "8530" 
-  "8536" -> "8535" 
-  "8497" -> "8496" 
-  "8501" -> "8508" 
-  "8508" -> "8541" 
-  "8537" -> "8536" 
-  "8502" -> "8501" 
-  "8539" -> "8537" 
-  "8503" -> "8505" 
-  "8505" -> "8502" 
-  "8487" -> "8493" 
+digraph "SetStaticShortField" {  
+"8524" [label = <(SET_STATIC_PRIMITIVE_FIELD,SET_STATIC_PRIMITIVE_FIELD(Short, v))<SUB>1538</SUB>> ]
+"8541" [label = <(soa,ScopedObjectAccess)<SUB>1538</SUB>> ]
+"8544" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1538</SUB>> ]
+"8551" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, nullptr, JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Short, v)&gt;(v)))<SUB>1538</SUB>> ]
+"8559" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetShort &lt; false &gt; (f-&gt;GetDeclaringClass(), v))<SUB>1538</SUB>> ]
+"8546" [label = <(SET_STATIC_PRIMITIVE_FIELD(Short, v),jni::DecodeArtField(fid))<SUB>1538</SUB>> ]
+"8554" [label = <(SET_STATIC_PRIMITIVE_FIELD(Short, v),JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Short, v)&gt;(v))<SUB>1538</SUB>> ]
+"8560" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetShort &lt; false)<SUB>1538</SUB>> ]
+"8565" [label = <(&lt;operator&gt;.bracketedPrimary,(f-&gt;GetDeclaringClass(), v))<SUB>1538</SUB>> ]
+"8547" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Short, v))<SUB>1538</SUB>> ]
+"8555" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Short, v))<SUB>1538</SUB>> ]
+"8561" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetShort)<SUB>1538</SUB>> ]
+"8566" [label = <(&lt;operator&gt;.expressionList,f-&gt;GetDeclaringClass(), v)<SUB>1538</SUB>> ]
+"8527" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1538</SUB>> ]
+"8549" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1538</SUB>> ]
+"8557" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Short, v)&gt;,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Short, v)&gt;)<SUB>1538</SUB>> ]
+"8563" [label = <(FIELD_IDENTIFIER,SetShort,SetShort)<SUB>1538</SUB>> ]
+"8567" [label = <(SET_STATIC_PRIMITIVE_FIELD(Short, v),f-&gt;GetDeclaringClass())<SUB>1538</SUB>> ]
+"8528" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1538</SUB>> ]
+"8532" [label = <(SET_STATIC_PRIMITIVE_FIELD(Short, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1538</SUB>> ]
+"8539" [label = <(RETURN,SET_STATIC_PRIMITIVE_FIELD(Short, v),SET_STATIC_PRIMITIVE_FIELD(Short, v))<SUB>1538</SUB>> ]
+"8568" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1538</SUB>> ]
+"8533" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1538</SUB>> ]
+"8570" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1538</SUB>> ]
+"8534" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1538</SUB>> ]
+"8536" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1538</SUB>> ]
+"8518" [label = <(METHOD,SetStaticShortField)<SUB>1537</SUB>> ]
+"8572" [label = <(METHOD_RETURN,void)<SUB>1537</SUB>> ]
+  "8524" -> "8528" 
+  "8524" -> "8541" 
+  "8541" -> "8549" 
+  "8544" -> "8557" 
+  "8551" -> "8563" 
+  "8559" -> "8572" 
+  "8546" -> "8544" 
+  "8554" -> "8551" 
+  "8560" -> "8570" 
+  "8565" -> "8559" 
+  "8547" -> "8546" 
+  "8555" -> "8554" 
+  "8561" -> "8560" 
+  "8566" -> "8565" 
+  "8527" -> "8534" 
+  "8527" -> "8541" 
+  "8549" -> "8547" 
+  "8557" -> "8555" 
+  "8563" -> "8561" 
+  "8567" -> "8566" 
+  "8528" -> "8527" 
+  "8532" -> "8539" 
+  "8539" -> "8572" 
+  "8568" -> "8567" 
+  "8533" -> "8532" 
+  "8570" -> "8568" 
+  "8534" -> "8536" 
+  "8536" -> "8533" 
+  "8518" -> "8524" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/153-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/153-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/153-cfg.dot	2023-06-07 19:33:45.447394686 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/153-cfg.dot	2023-06-07 19:33:52.027393982 +0330
@@ -1,59 +1,53 @@
-digraph "SetStaticDoubleField" {  
-"8549" [label = <(SET_STATIC_PRIMITIVE_FIELD,SET_STATIC_PRIMITIVE_FIELD(Double, v))<SUB>1605</SUB>> ]
-"8566" [label = <(soa,ScopedObjectAccess)<SUB>1605</SUB>> ]
-"8569" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1605</SUB>> ]
-"8576" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, nullptr, JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Double, v)&gt;(v)))<SUB>1605</SUB>> ]
-"8584" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetDouble &lt; false &gt; (f-&gt;GetDeclaringClass(), v))<SUB>1605</SUB>> ]
-"8571" [label = <(SET_STATIC_PRIMITIVE_FIELD(Double, v),jni::DecodeArtField(fid))<SUB>1605</SUB>> ]
-"8579" [label = <(SET_STATIC_PRIMITIVE_FIELD(Double, v),JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Double, v)&gt;(v))<SUB>1605</SUB>> ]
-"8585" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetDouble &lt; false)<SUB>1605</SUB>> ]
-"8590" [label = <(&lt;operator&gt;.bracketedPrimary,(f-&gt;GetDeclaringClass(), v))<SUB>1605</SUB>> ]
-"8572" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Double, v))<SUB>1605</SUB>> ]
-"8580" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Double, v))<SUB>1605</SUB>> ]
-"8586" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetDouble)<SUB>1605</SUB>> ]
-"8591" [label = <(&lt;operator&gt;.expressionList,f-&gt;GetDeclaringClass(), v)<SUB>1605</SUB>> ]
-"8552" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1605</SUB>> ]
-"8574" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1605</SUB>> ]
-"8582" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Double, v)&gt;,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Double, v)&gt;)<SUB>1605</SUB>> ]
-"8588" [label = <(FIELD_IDENTIFIER,SetDouble,SetDouble)<SUB>1605</SUB>> ]
-"8592" [label = <(SET_STATIC_PRIMITIVE_FIELD(Double, v),f-&gt;GetDeclaringClass())<SUB>1605</SUB>> ]
-"8553" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1605</SUB>> ]
-"8557" [label = <(SET_STATIC_PRIMITIVE_FIELD(Double, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1605</SUB>> ]
-"8564" [label = <(RETURN,SET_STATIC_PRIMITIVE_FIELD(Double, v),SET_STATIC_PRIMITIVE_FIELD(Double, v))<SUB>1605</SUB>> ]
-"8593" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1605</SUB>> ]
-"8558" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1605</SUB>> ]
-"8595" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1605</SUB>> ]
-"8559" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1605</SUB>> ]
-"8561" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1605</SUB>> ]
-"8543" [label = <(METHOD,SetStaticDoubleField)<SUB>1604</SUB>> ]
-"8597" [label = <(METHOD_RETURN,void)<SUB>1604</SUB>> ]
-  "8549" -> "8553" 
-  "8549" -> "8566" 
-  "8566" -> "8574" 
-  "8569" -> "8582" 
-  "8576" -> "8588" 
-  "8584" -> "8597" 
-  "8571" -> "8569" 
-  "8579" -> "8576" 
-  "8585" -> "8595" 
-  "8590" -> "8584" 
-  "8572" -> "8571" 
-  "8580" -> "8579" 
-  "8586" -> "8585" 
-  "8591" -> "8590" 
-  "8552" -> "8559" 
-  "8552" -> "8566" 
-  "8574" -> "8572" 
-  "8582" -> "8580" 
-  "8588" -> "8586" 
+digraph "CallStaticObjectMethod" {  
+"8580" [label = <(va_start,va_start(ap, mid))<SUB>1543</SUB>> ]
+"8584" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1544</SUB>> ]
+"8587" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>1545</SUB>> ]
+"8606" [label = <(soa,soa(env))<SUB>1546</SUB>> ]
+"8609" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, ap)))<SUB>1547</SUB>> ]
+"8616" [label = <(&lt;operator&gt;.assignment,local_result = soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>1548</SUB>> ]
+"8628" [label = <(RETURN,return local_result;,return local_result;)<SUB>1549</SUB>> ]
+"8585" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1544</SUB>> ]
+"8610" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1547</SUB>> ]
+"8618" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>1548</SUB>> ]
+"8619" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>1548</SUB>> ]
+"8624" [label = <(GetL,result.GetL())<SUB>1548</SUB>> ]
+"8591" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1545</SUB>> ]
+"8620" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1548</SUB>> ]
+"8625" [label = <(&lt;operator&gt;.fieldAccess,result.GetL)<SUB>1548</SUB>> ]
+"8592" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1545</SUB>> ]
+"8596" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1545</SUB>> ]
+"8603" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>1545</SUB>> ]
+"8622" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1548</SUB>> ]
+"8627" [label = <(FIELD_IDENTIFIER,GetL,GetL)<SUB>1548</SUB>> ]
+"8597" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1545</SUB>> ]
+"8598" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1545</SUB>> ]
+"8600" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1545</SUB>> ]
+"8574" [label = <(METHOD,CallStaticObjectMethod)<SUB>1541</SUB>> ]
+"8630" [label = <(METHOD_RETURN,jobject)<SUB>1541</SUB>> ]
+  "8580" -> "8585" 
+  "8584" -> "8587" 
+  "8587" -> "8592" 
+  "8587" -> "8606" 
+  "8606" -> "8610" 
+  "8609" -> "8622" 
+  "8616" -> "8628" 
+  "8628" -> "8630" 
+  "8585" -> "8584" 
+  "8610" -> "8609" 
+  "8618" -> "8616" 
+  "8619" -> "8627" 
+  "8624" -> "8618" 
+  "8591" -> "8598" 
+  "8591" -> "8606" 
+  "8620" -> "8619" 
+  "8625" -> "8624" 
   "8592" -> "8591" 
-  "8553" -> "8552" 
-  "8557" -> "8564" 
-  "8564" -> "8597" 
-  "8593" -> "8592" 
-  "8558" -> "8557" 
-  "8595" -> "8593" 
-  "8559" -> "8561" 
-  "8561" -> "8558" 
-  "8543" -> "8549" 
+  "8596" -> "8603" 
+  "8603" -> "8630" 
+  "8622" -> "8620" 
+  "8627" -> "8625" 
+  "8597" -> "8596" 
+  "8598" -> "8600" 
+  "8600" -> "8597" 
+  "8574" -> "8580" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/154-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/154-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/154-cfg.dot	2023-06-07 19:33:45.457394685 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/154-cfg.dot	2023-06-07 19:33:52.027393982 +0330
@@ -1,59 +1,45 @@
-digraph "SetStaticIntField" {  
-"8605" [label = <(SET_STATIC_PRIMITIVE_FIELD,SET_STATIC_PRIMITIVE_FIELD(Int, v))<SUB>1609</SUB>> ]
-"8622" [label = <(soa,ScopedObjectAccess)<SUB>1609</SUB>> ]
-"8625" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1609</SUB>> ]
-"8632" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, nullptr, JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Int, v)&gt;(v)))<SUB>1609</SUB>> ]
-"8640" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetInt &lt; false &gt; (f-&gt;GetDeclaringClass(), v))<SUB>1609</SUB>> ]
-"8627" [label = <(SET_STATIC_PRIMITIVE_FIELD(Int, v),jni::DecodeArtField(fid))<SUB>1609</SUB>> ]
-"8635" [label = <(SET_STATIC_PRIMITIVE_FIELD(Int, v),JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Int, v)&gt;(v))<SUB>1609</SUB>> ]
-"8641" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetInt &lt; false)<SUB>1609</SUB>> ]
-"8646" [label = <(&lt;operator&gt;.bracketedPrimary,(f-&gt;GetDeclaringClass(), v))<SUB>1609</SUB>> ]
-"8628" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Int, v))<SUB>1609</SUB>> ]
-"8636" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Int, v))<SUB>1609</SUB>> ]
-"8642" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetInt)<SUB>1609</SUB>> ]
-"8647" [label = <(&lt;operator&gt;.expressionList,f-&gt;GetDeclaringClass(), v)<SUB>1609</SUB>> ]
-"8608" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1609</SUB>> ]
-"8630" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1609</SUB>> ]
-"8638" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Int, v)&gt;,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Int, v)&gt;)<SUB>1609</SUB>> ]
-"8644" [label = <(FIELD_IDENTIFIER,SetInt,SetInt)<SUB>1609</SUB>> ]
-"8648" [label = <(SET_STATIC_PRIMITIVE_FIELD(Int, v),f-&gt;GetDeclaringClass())<SUB>1609</SUB>> ]
-"8609" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1609</SUB>> ]
-"8613" [label = <(SET_STATIC_PRIMITIVE_FIELD(Int, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1609</SUB>> ]
-"8620" [label = <(RETURN,SET_STATIC_PRIMITIVE_FIELD(Int, v),SET_STATIC_PRIMITIVE_FIELD(Int, v))<SUB>1609</SUB>> ]
-"8649" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1609</SUB>> ]
-"8614" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1609</SUB>> ]
-"8651" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1609</SUB>> ]
-"8615" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1609</SUB>> ]
-"8617" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1609</SUB>> ]
-"8599" [label = <(METHOD,SetStaticIntField)<SUB>1608</SUB>> ]
-"8653" [label = <(METHOD_RETURN,void)<SUB>1608</SUB>> ]
-  "8605" -> "8609" 
-  "8605" -> "8622" 
-  "8622" -> "8630" 
-  "8625" -> "8638" 
-  "8632" -> "8644" 
-  "8640" -> "8653" 
-  "8627" -> "8625" 
-  "8635" -> "8632" 
-  "8641" -> "8651" 
-  "8646" -> "8640" 
-  "8628" -> "8627" 
-  "8636" -> "8635" 
-  "8642" -> "8641" 
-  "8647" -> "8646" 
-  "8608" -> "8615" 
-  "8608" -> "8622" 
-  "8630" -> "8628" 
-  "8638" -> "8636" 
-  "8644" -> "8642" 
+digraph "CallStaticObjectMethodV" {  
+"8638" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>1553</SUB>> ]
+"8657" [label = <(soa,soa(env))<SUB>1554</SUB>> ]
+"8660" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, args)))<SUB>1555</SUB>> ]
+"8666" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());)<SUB>1556</SUB>> ]
+"8661" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1555</SUB>> ]
+"8667" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>1556</SUB>> ]
+"8668" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>1556</SUB>> ]
+"8673" [label = <(GetL,result.GetL())<SUB>1556</SUB>> ]
+"8642" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1553</SUB>> ]
+"8669" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1556</SUB>> ]
+"8674" [label = <(&lt;operator&gt;.fieldAccess,result.GetL)<SUB>1556</SUB>> ]
+"8643" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1553</SUB>> ]
+"8647" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1553</SUB>> ]
+"8654" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>1553</SUB>> ]
+"8671" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1556</SUB>> ]
+"8676" [label = <(FIELD_IDENTIFIER,GetL,GetL)<SUB>1556</SUB>> ]
+"8648" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1553</SUB>> ]
+"8649" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1553</SUB>> ]
+"8651" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1553</SUB>> ]
+"8632" [label = <(METHOD,CallStaticObjectMethodV)<SUB>1552</SUB>> ]
+"8677" [label = <(METHOD_RETURN,jobject)<SUB>1552</SUB>> ]
+  "8638" -> "8643" 
+  "8638" -> "8657" 
+  "8657" -> "8661" 
+  "8660" -> "8671" 
+  "8666" -> "8677" 
+  "8661" -> "8660" 
+  "8667" -> "8666" 
+  "8668" -> "8676" 
+  "8673" -> "8667" 
+  "8642" -> "8649" 
+  "8642" -> "8657" 
+  "8669" -> "8668" 
+  "8674" -> "8673" 
+  "8643" -> "8642" 
+  "8647" -> "8654" 
+  "8654" -> "8677" 
+  "8671" -> "8669" 
+  "8676" -> "8674" 
   "8648" -> "8647" 
-  "8609" -> "8608" 
-  "8613" -> "8620" 
-  "8620" -> "8653" 
-  "8649" -> "8648" 
-  "8614" -> "8613" 
-  "8651" -> "8649" 
-  "8615" -> "8617" 
-  "8617" -> "8614" 
-  "8599" -> "8605" 
+  "8649" -> "8651" 
+  "8651" -> "8648" 
+  "8632" -> "8638" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/155-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/155-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/155-cfg.dot	2023-06-07 19:33:45.457394685 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/155-cfg.dot	2023-06-07 19:33:52.027393982 +0330
@@ -1,59 +1,45 @@
-digraph "SetStaticLongField" {  
-"8661" [label = <(SET_STATIC_PRIMITIVE_FIELD,SET_STATIC_PRIMITIVE_FIELD(Long, v))<SUB>1613</SUB>> ]
-"8678" [label = <(soa,ScopedObjectAccess)<SUB>1613</SUB>> ]
-"8681" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1613</SUB>> ]
-"8688" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, nullptr, JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Long, v)&gt;(v)))<SUB>1613</SUB>> ]
-"8696" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetLong &lt; false &gt; (f-&gt;GetDeclaringClass(), v))<SUB>1613</SUB>> ]
-"8683" [label = <(SET_STATIC_PRIMITIVE_FIELD(Long, v),jni::DecodeArtField(fid))<SUB>1613</SUB>> ]
-"8691" [label = <(SET_STATIC_PRIMITIVE_FIELD(Long, v),JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Long, v)&gt;(v))<SUB>1613</SUB>> ]
-"8697" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetLong &lt; false)<SUB>1613</SUB>> ]
-"8702" [label = <(&lt;operator&gt;.bracketedPrimary,(f-&gt;GetDeclaringClass(), v))<SUB>1613</SUB>> ]
-"8684" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Long, v))<SUB>1613</SUB>> ]
-"8692" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Long, v))<SUB>1613</SUB>> ]
-"8698" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetLong)<SUB>1613</SUB>> ]
-"8703" [label = <(&lt;operator&gt;.expressionList,f-&gt;GetDeclaringClass(), v)<SUB>1613</SUB>> ]
-"8664" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1613</SUB>> ]
-"8686" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1613</SUB>> ]
-"8694" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Long, v)&gt;,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Long, v)&gt;)<SUB>1613</SUB>> ]
-"8700" [label = <(FIELD_IDENTIFIER,SetLong,SetLong)<SUB>1613</SUB>> ]
-"8704" [label = <(SET_STATIC_PRIMITIVE_FIELD(Long, v),f-&gt;GetDeclaringClass())<SUB>1613</SUB>> ]
-"8665" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1613</SUB>> ]
-"8669" [label = <(SET_STATIC_PRIMITIVE_FIELD(Long, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1613</SUB>> ]
-"8676" [label = <(RETURN,SET_STATIC_PRIMITIVE_FIELD(Long, v),SET_STATIC_PRIMITIVE_FIELD(Long, v))<SUB>1613</SUB>> ]
-"8705" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1613</SUB>> ]
-"8670" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1613</SUB>> ]
-"8707" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1613</SUB>> ]
-"8671" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1613</SUB>> ]
-"8673" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1613</SUB>> ]
-"8655" [label = <(METHOD,SetStaticLongField)<SUB>1612</SUB>> ]
-"8709" [label = <(METHOD_RETURN,void)<SUB>1612</SUB>> ]
-  "8661" -> "8665" 
-  "8661" -> "8678" 
-  "8678" -> "8686" 
-  "8681" -> "8694" 
-  "8688" -> "8700" 
-  "8696" -> "8709" 
-  "8683" -> "8681" 
-  "8691" -> "8688" 
-  "8697" -> "8707" 
-  "8702" -> "8696" 
-  "8684" -> "8683" 
-  "8692" -> "8691" 
-  "8698" -> "8697" 
-  "8703" -> "8702" 
-  "8664" -> "8671" 
-  "8664" -> "8678" 
-  "8686" -> "8684" 
-  "8694" -> "8692" 
-  "8700" -> "8698" 
-  "8704" -> "8703" 
-  "8665" -> "8664" 
-  "8669" -> "8676" 
-  "8676" -> "8709" 
-  "8705" -> "8704" 
-  "8670" -> "8669" 
-  "8707" -> "8705" 
-  "8671" -> "8673" 
-  "8673" -> "8670" 
-  "8655" -> "8661" 
+digraph "CallStaticObjectMethodA" {  
+"8685" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>1560</SUB>> ]
+"8704" [label = <(soa,soa(env))<SUB>1561</SUB>> ]
+"8707" [label = <(result,result(InvokeWithJValues(soa, nullptr, mid, args)))<SUB>1562</SUB>> ]
+"8713" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());)<SUB>1563</SUB>> ]
+"8708" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1562</SUB>> ]
+"8714" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>1563</SUB>> ]
+"8715" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>1563</SUB>> ]
+"8720" [label = <(GetL,result.GetL())<SUB>1563</SUB>> ]
+"8689" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1560</SUB>> ]
+"8716" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1563</SUB>> ]
+"8721" [label = <(&lt;operator&gt;.fieldAccess,result.GetL)<SUB>1563</SUB>> ]
+"8690" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1560</SUB>> ]
+"8694" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1560</SUB>> ]
+"8701" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>1560</SUB>> ]
+"8718" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1563</SUB>> ]
+"8723" [label = <(FIELD_IDENTIFIER,GetL,GetL)<SUB>1563</SUB>> ]
+"8695" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1560</SUB>> ]
+"8696" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1560</SUB>> ]
+"8698" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1560</SUB>> ]
+"8679" [label = <(METHOD,CallStaticObjectMethodA)<SUB>1559</SUB>> ]
+"8724" [label = <(METHOD_RETURN,jobject)<SUB>1559</SUB>> ]
+  "8685" -> "8690" 
+  "8685" -> "8704" 
+  "8704" -> "8708" 
+  "8707" -> "8718" 
+  "8713" -> "8724" 
+  "8708" -> "8707" 
+  "8714" -> "8713" 
+  "8715" -> "8723" 
+  "8720" -> "8714" 
+  "8689" -> "8696" 
+  "8689" -> "8704" 
+  "8716" -> "8715" 
+  "8721" -> "8720" 
+  "8690" -> "8689" 
+  "8694" -> "8701" 
+  "8701" -> "8724" 
+  "8718" -> "8716" 
+  "8723" -> "8721" 
+  "8695" -> "8694" 
+  "8696" -> "8698" 
+  "8698" -> "8695" 
+  "8679" -> "8685" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/156-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/156-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/156-cfg.dot	2023-06-07 19:33:45.457394685 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/156-cfg.dot	2023-06-07 19:33:52.037393983 +0330
@@ -1,59 +1,43 @@
-digraph "SetStaticShortField" {  
-"8717" [label = <(SET_STATIC_PRIMITIVE_FIELD,SET_STATIC_PRIMITIVE_FIELD(Short, v))<SUB>1617</SUB>> ]
-"8734" [label = <(soa,ScopedObjectAccess)<SUB>1617</SUB>> ]
-"8737" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1617</SUB>> ]
-"8744" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, nullptr, JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Short, v)&gt;(v)))<SUB>1617</SUB>> ]
-"8752" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetShort &lt; false &gt; (f-&gt;GetDeclaringClass(), v))<SUB>1617</SUB>> ]
-"8739" [label = <(SET_STATIC_PRIMITIVE_FIELD(Short, v),jni::DecodeArtField(fid))<SUB>1617</SUB>> ]
-"8747" [label = <(SET_STATIC_PRIMITIVE_FIELD(Short, v),JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Short, v)&gt;(v))<SUB>1617</SUB>> ]
-"8753" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetShort &lt; false)<SUB>1617</SUB>> ]
-"8758" [label = <(&lt;operator&gt;.bracketedPrimary,(f-&gt;GetDeclaringClass(), v))<SUB>1617</SUB>> ]
-"8740" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Short, v))<SUB>1617</SUB>> ]
-"8748" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Short, v))<SUB>1617</SUB>> ]
-"8754" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetShort)<SUB>1617</SUB>> ]
-"8759" [label = <(&lt;operator&gt;.expressionList,f-&gt;GetDeclaringClass(), v)<SUB>1617</SUB>> ]
-"8720" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1617</SUB>> ]
-"8742" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1617</SUB>> ]
-"8750" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Short, v)&gt;,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Short, v)&gt;)<SUB>1617</SUB>> ]
-"8756" [label = <(FIELD_IDENTIFIER,SetShort,SetShort)<SUB>1617</SUB>> ]
-"8760" [label = <(SET_STATIC_PRIMITIVE_FIELD(Short, v),f-&gt;GetDeclaringClass())<SUB>1617</SUB>> ]
-"8721" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1617</SUB>> ]
-"8725" [label = <(SET_STATIC_PRIMITIVE_FIELD(Short, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1617</SUB>> ]
-"8732" [label = <(RETURN,SET_STATIC_PRIMITIVE_FIELD(Short, v),SET_STATIC_PRIMITIVE_FIELD(Short, v))<SUB>1617</SUB>> ]
-"8761" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1617</SUB>> ]
-"8726" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1617</SUB>> ]
-"8763" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1617</SUB>> ]
-"8727" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1617</SUB>> ]
-"8729" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1617</SUB>> ]
-"8711" [label = <(METHOD,SetStaticShortField)<SUB>1616</SUB>> ]
-"8765" [label = <(METHOD_RETURN,void)<SUB>1616</SUB>> ]
-  "8717" -> "8721" 
-  "8717" -> "8734" 
-  "8734" -> "8742" 
-  "8737" -> "8750" 
-  "8744" -> "8756" 
-  "8752" -> "8765" 
-  "8739" -> "8737" 
-  "8747" -> "8744" 
-  "8753" -> "8763" 
-  "8758" -> "8752" 
-  "8740" -> "8739" 
-  "8748" -> "8747" 
-  "8754" -> "8753" 
-  "8759" -> "8758" 
-  "8720" -> "8727" 
-  "8720" -> "8734" 
-  "8742" -> "8740" 
-  "8750" -> "8748" 
-  "8756" -> "8754" 
-  "8760" -> "8759" 
-  "8721" -> "8720" 
-  "8725" -> "8732" 
-  "8732" -> "8765" 
-  "8761" -> "8760" 
-  "8726" -> "8725" 
-  "8763" -> "8761" 
-  "8727" -> "8729" 
-  "8729" -> "8726" 
-  "8711" -> "8717" 
+digraph "CallStaticBooleanMethod" {  
+"8732" [label = <(va_start,va_start(ap, mid))<SUB>1568</SUB>> ]
+"8736" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1569</SUB>> ]
+"8739" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1570</SUB>> ]
+"8758" [label = <(soa,soa(env))<SUB>1571</SUB>> ]
+"8761" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, ap)))<SUB>1572</SUB>> ]
+"8767" [label = <(RETURN,return result.GetZ();,return result.GetZ();)<SUB>1573</SUB>> ]
+"8737" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1569</SUB>> ]
+"8762" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1572</SUB>> ]
+"8768" [label = <(GetZ,result.GetZ())<SUB>1573</SUB>> ]
+"8769" [label = <(&lt;operator&gt;.fieldAccess,result.GetZ)<SUB>1573</SUB>> ]
+"8743" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1570</SUB>> ]
+"8771" [label = <(FIELD_IDENTIFIER,GetZ,GetZ)<SUB>1573</SUB>> ]
+"8744" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1570</SUB>> ]
+"8748" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1570</SUB>> ]
+"8755" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1570</SUB>> ]
+"8749" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1570</SUB>> ]
+"8750" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1570</SUB>> ]
+"8752" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1570</SUB>> ]
+"8726" [label = <(METHOD,CallStaticBooleanMethod)<SUB>1566</SUB>> ]
+"8772" [label = <(METHOD_RETURN,jboolean)<SUB>1566</SUB>> ]
+  "8732" -> "8737" 
+  "8736" -> "8739" 
+  "8739" -> "8744" 
+  "8739" -> "8758" 
+  "8758" -> "8762" 
+  "8761" -> "8771" 
+  "8767" -> "8772" 
+  "8737" -> "8736" 
+  "8762" -> "8761" 
+  "8768" -> "8767" 
+  "8769" -> "8768" 
+  "8743" -> "8750" 
+  "8743" -> "8758" 
+  "8771" -> "8769" 
+  "8744" -> "8743" 
+  "8748" -> "8755" 
+  "8755" -> "8772" 
+  "8749" -> "8748" 
+  "8750" -> "8752" 
+  "8752" -> "8749" 
+  "8726" -> "8732" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/157-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/157-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/157-cfg.dot	2023-06-07 19:33:45.457394685 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/157-cfg.dot	2023-06-07 19:33:52.037393983 +0330
@@ -1,53 +1,35 @@
-digraph "CallStaticObjectMethod" {  
-"8773" [label = <(va_start,va_start(ap, mid))<SUB>1622</SUB>> ]
-"8777" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1623</SUB>> ]
-"8780" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>1624</SUB>> ]
-"8799" [label = <(soa,soa(env))<SUB>1625</SUB>> ]
-"8802" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, ap)))<SUB>1626</SUB>> ]
-"8809" [label = <(&lt;operator&gt;.assignment,local_result = soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>1627</SUB>> ]
-"8821" [label = <(RETURN,return local_result;,return local_result;)<SUB>1628</SUB>> ]
-"8778" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1623</SUB>> ]
-"8803" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1626</SUB>> ]
-"8811" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>1627</SUB>> ]
-"8812" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>1627</SUB>> ]
-"8817" [label = <(GetL,result.GetL())<SUB>1627</SUB>> ]
-"8784" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1624</SUB>> ]
-"8813" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1627</SUB>> ]
-"8818" [label = <(&lt;operator&gt;.fieldAccess,result.GetL)<SUB>1627</SUB>> ]
-"8785" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1624</SUB>> ]
-"8789" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1624</SUB>> ]
-"8796" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>1624</SUB>> ]
-"8815" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1627</SUB>> ]
-"8820" [label = <(FIELD_IDENTIFIER,GetL,GetL)<SUB>1627</SUB>> ]
-"8790" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1624</SUB>> ]
-"8791" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1624</SUB>> ]
-"8793" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1624</SUB>> ]
-"8767" [label = <(METHOD,CallStaticObjectMethod)<SUB>1620</SUB>> ]
-"8823" [label = <(METHOD_RETURN,jobject)<SUB>1620</SUB>> ]
-  "8773" -> "8778" 
-  "8777" -> "8780" 
+digraph "CallStaticBooleanMethodV" {  
+"8780" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1577</SUB>> ]
+"8799" [label = <(soa,soa(env))<SUB>1578</SUB>> ]
+"8801" [label = <(RETURN,return InvokeWithVarArgs(soa, nullptr, mid, args).GetZ();,return InvokeWithVarArgs(soa, nullptr, mid, args).GetZ();)<SUB>1579</SUB>> ]
+"8802" [label = <(GetZ,InvokeWithVarArgs(soa, nullptr, mid, args).GetZ())<SUB>1579</SUB>> ]
+"8803" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, nullptr, mid, args).GetZ)<SUB>1579</SUB>> ]
+"8784" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1577</SUB>> ]
+"8804" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1579</SUB>> ]
+"8809" [label = <(FIELD_IDENTIFIER,GetZ,GetZ)<SUB>1579</SUB>> ]
+"8785" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1577</SUB>> ]
+"8789" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1577</SUB>> ]
+"8796" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1577</SUB>> ]
+"8790" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1577</SUB>> ]
+"8791" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1577</SUB>> ]
+"8793" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1577</SUB>> ]
+"8774" [label = <(METHOD,CallStaticBooleanMethodV)<SUB>1576</SUB>> ]
+"8810" [label = <(METHOD_RETURN,jboolean)<SUB>1576</SUB>> ]
   "8780" -> "8785" 
   "8780" -> "8799" 
-  "8799" -> "8803" 
-  "8802" -> "8815" 
-  "8809" -> "8821" 
-  "8821" -> "8823" 
-  "8778" -> "8777" 
+  "8799" -> "8804" 
+  "8801" -> "8810" 
+  "8802" -> "8801" 
   "8803" -> "8802" 
-  "8811" -> "8809" 
-  "8812" -> "8820" 
-  "8817" -> "8811" 
   "8784" -> "8791" 
   "8784" -> "8799" 
-  "8813" -> "8812" 
-  "8818" -> "8817" 
+  "8804" -> "8809" 
+  "8809" -> "8803" 
   "8785" -> "8784" 
   "8789" -> "8796" 
-  "8796" -> "8823" 
-  "8815" -> "8813" 
-  "8820" -> "8818" 
+  "8796" -> "8810" 
   "8790" -> "8789" 
   "8791" -> "8793" 
   "8793" -> "8790" 
-  "8767" -> "8773" 
+  "8774" -> "8780" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/158-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/158-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/158-cfg.dot	2023-06-07 19:33:45.457394685 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/158-cfg.dot	2023-06-07 19:33:52.037393983 +0330
@@ -1,45 +1,35 @@
-digraph "CallStaticObjectMethodV" {  
-"8831" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>1632</SUB>> ]
-"8850" [label = <(soa,soa(env))<SUB>1633</SUB>> ]
-"8853" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, args)))<SUB>1634</SUB>> ]
-"8859" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());)<SUB>1635</SUB>> ]
-"8854" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1634</SUB>> ]
-"8860" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>1635</SUB>> ]
-"8861" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>1635</SUB>> ]
-"8866" [label = <(GetL,result.GetL())<SUB>1635</SUB>> ]
-"8835" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1632</SUB>> ]
-"8862" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1635</SUB>> ]
-"8867" [label = <(&lt;operator&gt;.fieldAccess,result.GetL)<SUB>1635</SUB>> ]
-"8836" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1632</SUB>> ]
-"8840" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1632</SUB>> ]
-"8847" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>1632</SUB>> ]
-"8864" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1635</SUB>> ]
-"8869" [label = <(FIELD_IDENTIFIER,GetL,GetL)<SUB>1635</SUB>> ]
-"8841" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1632</SUB>> ]
-"8842" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1632</SUB>> ]
-"8844" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1632</SUB>> ]
-"8825" [label = <(METHOD,CallStaticObjectMethodV)<SUB>1631</SUB>> ]
-"8870" [label = <(METHOD_RETURN,jobject)<SUB>1631</SUB>> ]
-  "8831" -> "8836" 
-  "8831" -> "8850" 
-  "8850" -> "8854" 
-  "8853" -> "8864" 
-  "8859" -> "8870" 
-  "8854" -> "8853" 
-  "8860" -> "8859" 
-  "8861" -> "8869" 
-  "8866" -> "8860" 
-  "8835" -> "8842" 
-  "8835" -> "8850" 
-  "8862" -> "8861" 
-  "8867" -> "8866" 
-  "8836" -> "8835" 
-  "8840" -> "8847" 
-  "8847" -> "8870" 
-  "8864" -> "8862" 
-  "8869" -> "8867" 
+digraph "CallStaticBooleanMethodA" {  
+"8818" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1583</SUB>> ]
+"8837" [label = <(soa,soa(env))<SUB>1584</SUB>> ]
+"8839" [label = <(RETURN,return InvokeWithJValues(soa, nullptr, mid, args).GetZ();,return InvokeWithJValues(soa, nullptr, mid, args).GetZ();)<SUB>1585</SUB>> ]
+"8840" [label = <(GetZ,InvokeWithJValues(soa, nullptr, mid, args).GetZ())<SUB>1585</SUB>> ]
+"8841" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, nullptr, mid, args).GetZ)<SUB>1585</SUB>> ]
+"8822" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1583</SUB>> ]
+"8842" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1585</SUB>> ]
+"8847" [label = <(FIELD_IDENTIFIER,GetZ,GetZ)<SUB>1585</SUB>> ]
+"8823" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1583</SUB>> ]
+"8827" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1583</SUB>> ]
+"8834" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1583</SUB>> ]
+"8828" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1583</SUB>> ]
+"8829" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1583</SUB>> ]
+"8831" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1583</SUB>> ]
+"8812" [label = <(METHOD,CallStaticBooleanMethodA)<SUB>1582</SUB>> ]
+"8848" [label = <(METHOD_RETURN,jboolean)<SUB>1582</SUB>> ]
+  "8818" -> "8823" 
+  "8818" -> "8837" 
+  "8837" -> "8842" 
+  "8839" -> "8848" 
+  "8840" -> "8839" 
   "8841" -> "8840" 
-  "8842" -> "8844" 
-  "8844" -> "8841" 
-  "8825" -> "8831" 
+  "8822" -> "8829" 
+  "8822" -> "8837" 
+  "8842" -> "8847" 
+  "8847" -> "8841" 
+  "8823" -> "8822" 
+  "8827" -> "8834" 
+  "8834" -> "8848" 
+  "8828" -> "8827" 
+  "8829" -> "8831" 
+  "8831" -> "8828" 
+  "8812" -> "8818" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/159-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/159-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/159-cfg.dot	2023-06-07 19:33:45.457394685 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/159-cfg.dot	2023-06-07 19:33:52.037393983 +0330
@@ -1,45 +1,43 @@
-digraph "CallStaticObjectMethodA" {  
-"8878" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>1639</SUB>> ]
-"8897" [label = <(soa,soa(env))<SUB>1640</SUB>> ]
-"8900" [label = <(result,result(InvokeWithJValues(soa, nullptr, mid, args)))<SUB>1641</SUB>> ]
-"8906" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());)<SUB>1642</SUB>> ]
-"8901" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1641</SUB>> ]
-"8907" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>1642</SUB>> ]
-"8908" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>1642</SUB>> ]
-"8913" [label = <(GetL,result.GetL())<SUB>1642</SUB>> ]
-"8882" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1639</SUB>> ]
-"8909" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1642</SUB>> ]
-"8914" [label = <(&lt;operator&gt;.fieldAccess,result.GetL)<SUB>1642</SUB>> ]
-"8883" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1639</SUB>> ]
-"8887" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1639</SUB>> ]
-"8894" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>1639</SUB>> ]
-"8911" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1642</SUB>> ]
-"8916" [label = <(FIELD_IDENTIFIER,GetL,GetL)<SUB>1642</SUB>> ]
-"8888" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1639</SUB>> ]
-"8889" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1639</SUB>> ]
-"8891" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1639</SUB>> ]
-"8872" [label = <(METHOD,CallStaticObjectMethodA)<SUB>1638</SUB>> ]
-"8917" [label = <(METHOD_RETURN,jobject)<SUB>1638</SUB>> ]
-  "8878" -> "8883" 
-  "8878" -> "8897" 
-  "8897" -> "8901" 
-  "8900" -> "8911" 
-  "8906" -> "8917" 
-  "8901" -> "8900" 
-  "8907" -> "8906" 
-  "8908" -> "8916" 
-  "8913" -> "8907" 
-  "8882" -> "8889" 
-  "8882" -> "8897" 
-  "8909" -> "8908" 
-  "8914" -> "8913" 
-  "8883" -> "8882" 
-  "8887" -> "8894" 
-  "8894" -> "8917" 
-  "8911" -> "8909" 
-  "8916" -> "8914" 
-  "8888" -> "8887" 
-  "8889" -> "8891" 
-  "8891" -> "8888" 
-  "8872" -> "8878" 
+digraph "CallStaticByteMethod" {  
+"8856" [label = <(va_start,va_start(ap, mid))<SUB>1590</SUB>> ]
+"8860" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1591</SUB>> ]
+"8863" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1592</SUB>> ]
+"8882" [label = <(soa,soa(env))<SUB>1593</SUB>> ]
+"8885" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, ap)))<SUB>1594</SUB>> ]
+"8891" [label = <(RETURN,return result.GetB();,return result.GetB();)<SUB>1595</SUB>> ]
+"8861" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1591</SUB>> ]
+"8886" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1594</SUB>> ]
+"8892" [label = <(GetB,result.GetB())<SUB>1595</SUB>> ]
+"8893" [label = <(&lt;operator&gt;.fieldAccess,result.GetB)<SUB>1595</SUB>> ]
+"8867" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1592</SUB>> ]
+"8895" [label = <(FIELD_IDENTIFIER,GetB,GetB)<SUB>1595</SUB>> ]
+"8868" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1592</SUB>> ]
+"8872" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1592</SUB>> ]
+"8879" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1592</SUB>> ]
+"8873" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1592</SUB>> ]
+"8874" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1592</SUB>> ]
+"8876" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1592</SUB>> ]
+"8850" [label = <(METHOD,CallStaticByteMethod)<SUB>1588</SUB>> ]
+"8896" [label = <(METHOD_RETURN,jbyte)<SUB>1588</SUB>> ]
+  "8856" -> "8861" 
+  "8860" -> "8863" 
+  "8863" -> "8868" 
+  "8863" -> "8882" 
+  "8882" -> "8886" 
+  "8885" -> "8895" 
+  "8891" -> "8896" 
+  "8861" -> "8860" 
+  "8886" -> "8885" 
+  "8892" -> "8891" 
+  "8893" -> "8892" 
+  "8867" -> "8874" 
+  "8867" -> "8882" 
+  "8895" -> "8893" 
+  "8868" -> "8867" 
+  "8872" -> "8879" 
+  "8879" -> "8896" 
+  "8873" -> "8872" 
+  "8874" -> "8876" 
+  "8876" -> "8873" 
+  "8850" -> "8856" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/16-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/16-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/16-cfg.dot	2023-06-07 19:33:45.337394696 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/16-cfg.dot	2023-06-07 19:33:51.917393996 +0330
@@ -1,5 +1,5 @@
-digraph "hs" {  
-"383" [label = <(METHOD,hs)<SUB>315</SUB>> ]
-"386" [label = <(METHOD_RETURN,StackHandleScope&lt;1&gt;)<SUB>315</SUB>> ]
-  "383" -> "386" 
+digraph "ThrowAIOOBE" {  
+"328" [label = <(METHOD,ThrowAIOOBE)<SUB>349</SUB>> ]
+"335" [label = <(METHOD_RETURN,void)<SUB>349</SUB>> ]
+  "328" -> "335" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/160-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/160-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/160-cfg.dot	2023-06-07 19:33:45.457394685 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/160-cfg.dot	2023-06-07 19:33:52.037393983 +0330
@@ -1,43 +1,35 @@
-digraph "CallStaticBooleanMethod" {  
-"8925" [label = <(va_start,va_start(ap, mid))<SUB>1647</SUB>> ]
-"8929" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1648</SUB>> ]
-"8932" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1649</SUB>> ]
-"8951" [label = <(soa,soa(env))<SUB>1650</SUB>> ]
-"8954" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, ap)))<SUB>1651</SUB>> ]
-"8960" [label = <(RETURN,return result.GetZ();,return result.GetZ();)<SUB>1652</SUB>> ]
-"8930" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1648</SUB>> ]
-"8955" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1651</SUB>> ]
-"8961" [label = <(GetZ,result.GetZ())<SUB>1652</SUB>> ]
-"8962" [label = <(&lt;operator&gt;.fieldAccess,result.GetZ)<SUB>1652</SUB>> ]
-"8936" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1649</SUB>> ]
-"8964" [label = <(FIELD_IDENTIFIER,GetZ,GetZ)<SUB>1652</SUB>> ]
-"8937" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1649</SUB>> ]
-"8941" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1649</SUB>> ]
-"8948" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1649</SUB>> ]
-"8942" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1649</SUB>> ]
-"8943" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1649</SUB>> ]
-"8945" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1649</SUB>> ]
-"8919" [label = <(METHOD,CallStaticBooleanMethod)<SUB>1645</SUB>> ]
-"8965" [label = <(METHOD_RETURN,jboolean)<SUB>1645</SUB>> ]
-  "8925" -> "8930" 
-  "8929" -> "8932" 
-  "8932" -> "8937" 
-  "8932" -> "8951" 
-  "8951" -> "8955" 
-  "8954" -> "8964" 
-  "8960" -> "8965" 
-  "8930" -> "8929" 
-  "8955" -> "8954" 
-  "8961" -> "8960" 
-  "8962" -> "8961" 
-  "8936" -> "8943" 
-  "8936" -> "8951" 
-  "8964" -> "8962" 
-  "8937" -> "8936" 
-  "8941" -> "8948" 
-  "8948" -> "8965" 
-  "8942" -> "8941" 
-  "8943" -> "8945" 
-  "8945" -> "8942" 
-  "8919" -> "8925" 
+digraph "CallStaticByteMethodV" {  
+"8904" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1599</SUB>> ]
+"8923" [label = <(soa,soa(env))<SUB>1600</SUB>> ]
+"8925" [label = <(RETURN,return InvokeWithVarArgs(soa, nullptr, mid, args).GetB();,return InvokeWithVarArgs(soa, nullptr, mid, args).GetB();)<SUB>1601</SUB>> ]
+"8926" [label = <(GetB,InvokeWithVarArgs(soa, nullptr, mid, args).GetB())<SUB>1601</SUB>> ]
+"8927" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, nullptr, mid, args).GetB)<SUB>1601</SUB>> ]
+"8908" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1599</SUB>> ]
+"8928" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1601</SUB>> ]
+"8933" [label = <(FIELD_IDENTIFIER,GetB,GetB)<SUB>1601</SUB>> ]
+"8909" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1599</SUB>> ]
+"8913" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1599</SUB>> ]
+"8920" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1599</SUB>> ]
+"8914" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1599</SUB>> ]
+"8915" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1599</SUB>> ]
+"8917" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1599</SUB>> ]
+"8898" [label = <(METHOD,CallStaticByteMethodV)<SUB>1598</SUB>> ]
+"8934" [label = <(METHOD_RETURN,jbyte)<SUB>1598</SUB>> ]
+  "8904" -> "8909" 
+  "8904" -> "8923" 
+  "8923" -> "8928" 
+  "8925" -> "8934" 
+  "8926" -> "8925" 
+  "8927" -> "8926" 
+  "8908" -> "8915" 
+  "8908" -> "8923" 
+  "8928" -> "8933" 
+  "8933" -> "8927" 
+  "8909" -> "8908" 
+  "8913" -> "8920" 
+  "8920" -> "8934" 
+  "8914" -> "8913" 
+  "8915" -> "8917" 
+  "8917" -> "8914" 
+  "8898" -> "8904" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/161-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/161-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/161-cfg.dot	2023-06-07 19:33:45.457394685 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/161-cfg.dot	2023-06-07 19:33:52.037393983 +0330
@@ -1,35 +1,35 @@
-digraph "CallStaticBooleanMethodV" {  
-"8973" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1656</SUB>> ]
-"8992" [label = <(soa,soa(env))<SUB>1657</SUB>> ]
-"8994" [label = <(RETURN,return InvokeWithVarArgs(soa, nullptr, mid, args).GetZ();,return InvokeWithVarArgs(soa, nullptr, mid, args).GetZ();)<SUB>1658</SUB>> ]
-"8995" [label = <(GetZ,InvokeWithVarArgs(soa, nullptr, mid, args).GetZ())<SUB>1658</SUB>> ]
-"8996" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, nullptr, mid, args).GetZ)<SUB>1658</SUB>> ]
-"8977" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1656</SUB>> ]
-"8997" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1658</SUB>> ]
-"9002" [label = <(FIELD_IDENTIFIER,GetZ,GetZ)<SUB>1658</SUB>> ]
-"8978" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1656</SUB>> ]
-"8982" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1656</SUB>> ]
-"8989" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1656</SUB>> ]
-"8983" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1656</SUB>> ]
-"8984" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1656</SUB>> ]
-"8986" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1656</SUB>> ]
-"8967" [label = <(METHOD,CallStaticBooleanMethodV)<SUB>1655</SUB>> ]
-"9003" [label = <(METHOD_RETURN,jboolean)<SUB>1655</SUB>> ]
-  "8973" -> "8978" 
-  "8973" -> "8992" 
-  "8992" -> "8997" 
-  "8994" -> "9003" 
-  "8995" -> "8994" 
-  "8996" -> "8995" 
-  "8977" -> "8984" 
-  "8977" -> "8992" 
-  "8997" -> "9002" 
-  "9002" -> "8996" 
-  "8978" -> "8977" 
-  "8982" -> "8989" 
-  "8989" -> "9003" 
-  "8983" -> "8982" 
-  "8984" -> "8986" 
-  "8986" -> "8983" 
-  "8967" -> "8973" 
+digraph "CallStaticByteMethodA" {  
+"8942" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1605</SUB>> ]
+"8961" [label = <(soa,soa(env))<SUB>1606</SUB>> ]
+"8963" [label = <(RETURN,return InvokeWithJValues(soa, nullptr, mid, args).GetB();,return InvokeWithJValues(soa, nullptr, mid, args).GetB();)<SUB>1607</SUB>> ]
+"8964" [label = <(GetB,InvokeWithJValues(soa, nullptr, mid, args).GetB())<SUB>1607</SUB>> ]
+"8965" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, nullptr, mid, args).GetB)<SUB>1607</SUB>> ]
+"8946" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1605</SUB>> ]
+"8966" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1607</SUB>> ]
+"8971" [label = <(FIELD_IDENTIFIER,GetB,GetB)<SUB>1607</SUB>> ]
+"8947" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1605</SUB>> ]
+"8951" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1605</SUB>> ]
+"8958" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1605</SUB>> ]
+"8952" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1605</SUB>> ]
+"8953" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1605</SUB>> ]
+"8955" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1605</SUB>> ]
+"8936" [label = <(METHOD,CallStaticByteMethodA)<SUB>1604</SUB>> ]
+"8972" [label = <(METHOD_RETURN,jbyte)<SUB>1604</SUB>> ]
+  "8942" -> "8947" 
+  "8942" -> "8961" 
+  "8961" -> "8966" 
+  "8963" -> "8972" 
+  "8964" -> "8963" 
+  "8965" -> "8964" 
+  "8946" -> "8953" 
+  "8946" -> "8961" 
+  "8966" -> "8971" 
+  "8971" -> "8965" 
+  "8947" -> "8946" 
+  "8951" -> "8958" 
+  "8958" -> "8972" 
+  "8952" -> "8951" 
+  "8953" -> "8955" 
+  "8955" -> "8952" 
+  "8936" -> "8942" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/162-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/162-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/162-cfg.dot	2023-06-07 19:33:45.457394685 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/162-cfg.dot	2023-06-07 19:33:52.037393983 +0330
@@ -1,35 +1,43 @@
-digraph "CallStaticBooleanMethodA" {  
-"9011" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1662</SUB>> ]
-"9030" [label = <(soa,soa(env))<SUB>1663</SUB>> ]
-"9032" [label = <(RETURN,return InvokeWithJValues(soa, nullptr, mid, args).GetZ();,return InvokeWithJValues(soa, nullptr, mid, args).GetZ();)<SUB>1664</SUB>> ]
-"9033" [label = <(GetZ,InvokeWithJValues(soa, nullptr, mid, args).GetZ())<SUB>1664</SUB>> ]
-"9034" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, nullptr, mid, args).GetZ)<SUB>1664</SUB>> ]
-"9015" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1662</SUB>> ]
-"9035" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1664</SUB>> ]
-"9040" [label = <(FIELD_IDENTIFIER,GetZ,GetZ)<SUB>1664</SUB>> ]
-"9016" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1662</SUB>> ]
-"9020" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1662</SUB>> ]
-"9027" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1662</SUB>> ]
-"9021" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1662</SUB>> ]
-"9022" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1662</SUB>> ]
-"9024" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1662</SUB>> ]
-"9005" [label = <(METHOD,CallStaticBooleanMethodA)<SUB>1661</SUB>> ]
-"9041" [label = <(METHOD_RETURN,jboolean)<SUB>1661</SUB>> ]
-  "9011" -> "9016" 
-  "9011" -> "9030" 
-  "9030" -> "9035" 
-  "9032" -> "9041" 
-  "9033" -> "9032" 
-  "9034" -> "9033" 
-  "9015" -> "9022" 
-  "9015" -> "9030" 
-  "9035" -> "9040" 
-  "9040" -> "9034" 
+digraph "CallStaticCharMethod" {  
+"8980" [label = <(va_start,va_start(ap, mid))<SUB>1612</SUB>> ]
+"8984" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1613</SUB>> ]
+"8987" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1614</SUB>> ]
+"9006" [label = <(soa,soa(env))<SUB>1615</SUB>> ]
+"9009" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, ap)))<SUB>1616</SUB>> ]
+"9015" [label = <(RETURN,return result.GetC();,return result.GetC();)<SUB>1617</SUB>> ]
+"8985" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1613</SUB>> ]
+"9010" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1616</SUB>> ]
+"9016" [label = <(GetC,result.GetC())<SUB>1617</SUB>> ]
+"9017" [label = <(&lt;operator&gt;.fieldAccess,result.GetC)<SUB>1617</SUB>> ]
+"8991" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1614</SUB>> ]
+"9019" [label = <(FIELD_IDENTIFIER,GetC,GetC)<SUB>1617</SUB>> ]
+"8992" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1614</SUB>> ]
+"8996" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1614</SUB>> ]
+"9003" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1614</SUB>> ]
+"8997" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1614</SUB>> ]
+"8998" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1614</SUB>> ]
+"9000" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1614</SUB>> ]
+"8974" [label = <(METHOD,CallStaticCharMethod)<SUB>1610</SUB>> ]
+"9020" [label = <(METHOD_RETURN,jchar)<SUB>1610</SUB>> ]
+  "8980" -> "8985" 
+  "8984" -> "8987" 
+  "8987" -> "8992" 
+  "8987" -> "9006" 
+  "9006" -> "9010" 
+  "9009" -> "9019" 
+  "9015" -> "9020" 
+  "8985" -> "8984" 
+  "9010" -> "9009" 
   "9016" -> "9015" 
-  "9020" -> "9027" 
-  "9027" -> "9041" 
-  "9021" -> "9020" 
-  "9022" -> "9024" 
-  "9024" -> "9021" 
-  "9005" -> "9011" 
+  "9017" -> "9016" 
+  "8991" -> "8998" 
+  "8991" -> "9006" 
+  "9019" -> "9017" 
+  "8992" -> "8991" 
+  "8996" -> "9003" 
+  "9003" -> "9020" 
+  "8997" -> "8996" 
+  "8998" -> "9000" 
+  "9000" -> "8997" 
+  "8974" -> "8980" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/163-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/163-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/163-cfg.dot	2023-06-07 19:33:45.457394685 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/163-cfg.dot	2023-06-07 19:33:52.037393983 +0330
@@ -1,43 +1,35 @@
-digraph "CallStaticByteMethod" {  
-"9049" [label = <(va_start,va_start(ap, mid))<SUB>1669</SUB>> ]
-"9053" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1670</SUB>> ]
-"9056" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1671</SUB>> ]
-"9075" [label = <(soa,soa(env))<SUB>1672</SUB>> ]
-"9078" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, ap)))<SUB>1673</SUB>> ]
-"9084" [label = <(RETURN,return result.GetB();,return result.GetB();)<SUB>1674</SUB>> ]
-"9054" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1670</SUB>> ]
-"9079" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1673</SUB>> ]
-"9085" [label = <(GetB,result.GetB())<SUB>1674</SUB>> ]
-"9086" [label = <(&lt;operator&gt;.fieldAccess,result.GetB)<SUB>1674</SUB>> ]
-"9060" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1671</SUB>> ]
-"9088" [label = <(FIELD_IDENTIFIER,GetB,GetB)<SUB>1674</SUB>> ]
-"9061" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1671</SUB>> ]
-"9065" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1671</SUB>> ]
-"9072" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1671</SUB>> ]
-"9066" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1671</SUB>> ]
-"9067" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1671</SUB>> ]
-"9069" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1671</SUB>> ]
-"9043" [label = <(METHOD,CallStaticByteMethod)<SUB>1667</SUB>> ]
-"9089" [label = <(METHOD_RETURN,jbyte)<SUB>1667</SUB>> ]
-  "9049" -> "9054" 
-  "9053" -> "9056" 
-  "9056" -> "9061" 
-  "9056" -> "9075" 
-  "9075" -> "9079" 
-  "9078" -> "9088" 
-  "9084" -> "9089" 
-  "9054" -> "9053" 
-  "9079" -> "9078" 
-  "9085" -> "9084" 
-  "9086" -> "9085" 
-  "9060" -> "9067" 
-  "9060" -> "9075" 
-  "9088" -> "9086" 
-  "9061" -> "9060" 
-  "9065" -> "9072" 
-  "9072" -> "9089" 
-  "9066" -> "9065" 
-  "9067" -> "9069" 
-  "9069" -> "9066" 
-  "9043" -> "9049" 
+digraph "CallStaticCharMethodV" {  
+"9028" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1621</SUB>> ]
+"9047" [label = <(soa,soa(env))<SUB>1622</SUB>> ]
+"9049" [label = <(RETURN,return InvokeWithVarArgs(soa, nullptr, mid, args).GetC();,return InvokeWithVarArgs(soa, nullptr, mid, args).GetC();)<SUB>1623</SUB>> ]
+"9050" [label = <(GetC,InvokeWithVarArgs(soa, nullptr, mid, args).GetC())<SUB>1623</SUB>> ]
+"9051" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, nullptr, mid, args).GetC)<SUB>1623</SUB>> ]
+"9032" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1621</SUB>> ]
+"9052" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1623</SUB>> ]
+"9057" [label = <(FIELD_IDENTIFIER,GetC,GetC)<SUB>1623</SUB>> ]
+"9033" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1621</SUB>> ]
+"9037" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1621</SUB>> ]
+"9044" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1621</SUB>> ]
+"9038" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1621</SUB>> ]
+"9039" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1621</SUB>> ]
+"9041" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1621</SUB>> ]
+"9022" [label = <(METHOD,CallStaticCharMethodV)<SUB>1620</SUB>> ]
+"9058" [label = <(METHOD_RETURN,jchar)<SUB>1620</SUB>> ]
+  "9028" -> "9033" 
+  "9028" -> "9047" 
+  "9047" -> "9052" 
+  "9049" -> "9058" 
+  "9050" -> "9049" 
+  "9051" -> "9050" 
+  "9032" -> "9039" 
+  "9032" -> "9047" 
+  "9052" -> "9057" 
+  "9057" -> "9051" 
+  "9033" -> "9032" 
+  "9037" -> "9044" 
+  "9044" -> "9058" 
+  "9038" -> "9037" 
+  "9039" -> "9041" 
+  "9041" -> "9038" 
+  "9022" -> "9028" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/164-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/164-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/164-cfg.dot	2023-06-07 19:33:45.457394685 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/164-cfg.dot	2023-06-07 19:33:52.037393983 +0330
@@ -1,35 +1,35 @@
-digraph "CallStaticByteMethodV" {  
-"9097" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1678</SUB>> ]
-"9116" [label = <(soa,soa(env))<SUB>1679</SUB>> ]
-"9118" [label = <(RETURN,return InvokeWithVarArgs(soa, nullptr, mid, args).GetB();,return InvokeWithVarArgs(soa, nullptr, mid, args).GetB();)<SUB>1680</SUB>> ]
-"9119" [label = <(GetB,InvokeWithVarArgs(soa, nullptr, mid, args).GetB())<SUB>1680</SUB>> ]
-"9120" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, nullptr, mid, args).GetB)<SUB>1680</SUB>> ]
-"9101" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1678</SUB>> ]
-"9121" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1680</SUB>> ]
-"9126" [label = <(FIELD_IDENTIFIER,GetB,GetB)<SUB>1680</SUB>> ]
-"9102" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1678</SUB>> ]
-"9106" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1678</SUB>> ]
-"9113" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1678</SUB>> ]
-"9107" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1678</SUB>> ]
-"9108" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1678</SUB>> ]
-"9110" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1678</SUB>> ]
-"9091" [label = <(METHOD,CallStaticByteMethodV)<SUB>1677</SUB>> ]
-"9127" [label = <(METHOD_RETURN,jbyte)<SUB>1677</SUB>> ]
-  "9097" -> "9102" 
-  "9097" -> "9116" 
-  "9116" -> "9121" 
-  "9118" -> "9127" 
-  "9119" -> "9118" 
-  "9120" -> "9119" 
-  "9101" -> "9108" 
-  "9101" -> "9116" 
-  "9121" -> "9126" 
-  "9126" -> "9120" 
-  "9102" -> "9101" 
-  "9106" -> "9113" 
-  "9113" -> "9127" 
-  "9107" -> "9106" 
-  "9108" -> "9110" 
-  "9110" -> "9107" 
-  "9091" -> "9097" 
+digraph "CallStaticCharMethodA" {  
+"9066" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1627</SUB>> ]
+"9085" [label = <(soa,soa(env))<SUB>1628</SUB>> ]
+"9087" [label = <(RETURN,return InvokeWithJValues(soa, nullptr, mid, args).GetC();,return InvokeWithJValues(soa, nullptr, mid, args).GetC();)<SUB>1629</SUB>> ]
+"9088" [label = <(GetC,InvokeWithJValues(soa, nullptr, mid, args).GetC())<SUB>1629</SUB>> ]
+"9089" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, nullptr, mid, args).GetC)<SUB>1629</SUB>> ]
+"9070" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1627</SUB>> ]
+"9090" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1629</SUB>> ]
+"9095" [label = <(FIELD_IDENTIFIER,GetC,GetC)<SUB>1629</SUB>> ]
+"9071" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1627</SUB>> ]
+"9075" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1627</SUB>> ]
+"9082" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1627</SUB>> ]
+"9076" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1627</SUB>> ]
+"9077" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1627</SUB>> ]
+"9079" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1627</SUB>> ]
+"9060" [label = <(METHOD,CallStaticCharMethodA)<SUB>1626</SUB>> ]
+"9096" [label = <(METHOD_RETURN,jchar)<SUB>1626</SUB>> ]
+  "9066" -> "9071" 
+  "9066" -> "9085" 
+  "9085" -> "9090" 
+  "9087" -> "9096" 
+  "9088" -> "9087" 
+  "9089" -> "9088" 
+  "9070" -> "9077" 
+  "9070" -> "9085" 
+  "9090" -> "9095" 
+  "9095" -> "9089" 
+  "9071" -> "9070" 
+  "9075" -> "9082" 
+  "9082" -> "9096" 
+  "9076" -> "9075" 
+  "9077" -> "9079" 
+  "9079" -> "9076" 
+  "9060" -> "9066" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/165-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/165-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/165-cfg.dot	2023-06-07 19:33:45.457394685 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/165-cfg.dot	2023-06-07 19:33:52.037393983 +0330
@@ -1,35 +1,43 @@
-digraph "CallStaticByteMethodA" {  
-"9135" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1684</SUB>> ]
-"9154" [label = <(soa,soa(env))<SUB>1685</SUB>> ]
-"9156" [label = <(RETURN,return InvokeWithJValues(soa, nullptr, mid, args).GetB();,return InvokeWithJValues(soa, nullptr, mid, args).GetB();)<SUB>1686</SUB>> ]
-"9157" [label = <(GetB,InvokeWithJValues(soa, nullptr, mid, args).GetB())<SUB>1686</SUB>> ]
-"9158" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, nullptr, mid, args).GetB)<SUB>1686</SUB>> ]
-"9139" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1684</SUB>> ]
-"9159" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1686</SUB>> ]
-"9164" [label = <(FIELD_IDENTIFIER,GetB,GetB)<SUB>1686</SUB>> ]
-"9140" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1684</SUB>> ]
-"9144" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1684</SUB>> ]
-"9151" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1684</SUB>> ]
-"9145" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1684</SUB>> ]
-"9146" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1684</SUB>> ]
-"9148" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1684</SUB>> ]
-"9129" [label = <(METHOD,CallStaticByteMethodA)<SUB>1683</SUB>> ]
-"9165" [label = <(METHOD_RETURN,jbyte)<SUB>1683</SUB>> ]
-  "9135" -> "9140" 
-  "9135" -> "9154" 
-  "9154" -> "9159" 
-  "9156" -> "9165" 
-  "9157" -> "9156" 
-  "9158" -> "9157" 
-  "9139" -> "9146" 
-  "9139" -> "9154" 
-  "9159" -> "9164" 
-  "9164" -> "9158" 
+digraph "CallStaticShortMethod" {  
+"9104" [label = <(va_start,va_start(ap, mid))<SUB>1634</SUB>> ]
+"9108" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1635</SUB>> ]
+"9111" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1636</SUB>> ]
+"9130" [label = <(soa,soa(env))<SUB>1637</SUB>> ]
+"9133" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, ap)))<SUB>1638</SUB>> ]
+"9139" [label = <(RETURN,return result.GetS();,return result.GetS();)<SUB>1639</SUB>> ]
+"9109" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1635</SUB>> ]
+"9134" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1638</SUB>> ]
+"9140" [label = <(GetS,result.GetS())<SUB>1639</SUB>> ]
+"9141" [label = <(&lt;operator&gt;.fieldAccess,result.GetS)<SUB>1639</SUB>> ]
+"9115" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1636</SUB>> ]
+"9143" [label = <(FIELD_IDENTIFIER,GetS,GetS)<SUB>1639</SUB>> ]
+"9116" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1636</SUB>> ]
+"9120" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1636</SUB>> ]
+"9127" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1636</SUB>> ]
+"9121" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1636</SUB>> ]
+"9122" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1636</SUB>> ]
+"9124" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1636</SUB>> ]
+"9098" [label = <(METHOD,CallStaticShortMethod)<SUB>1632</SUB>> ]
+"9144" [label = <(METHOD_RETURN,jshort)<SUB>1632</SUB>> ]
+  "9104" -> "9109" 
+  "9108" -> "9111" 
+  "9111" -> "9116" 
+  "9111" -> "9130" 
+  "9130" -> "9134" 
+  "9133" -> "9143" 
+  "9139" -> "9144" 
+  "9109" -> "9108" 
+  "9134" -> "9133" 
   "9140" -> "9139" 
-  "9144" -> "9151" 
-  "9151" -> "9165" 
-  "9145" -> "9144" 
-  "9146" -> "9148" 
-  "9148" -> "9145" 
-  "9129" -> "9135" 
+  "9141" -> "9140" 
+  "9115" -> "9122" 
+  "9115" -> "9130" 
+  "9143" -> "9141" 
+  "9116" -> "9115" 
+  "9120" -> "9127" 
+  "9127" -> "9144" 
+  "9121" -> "9120" 
+  "9122" -> "9124" 
+  "9124" -> "9121" 
+  "9098" -> "9104" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/166-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/166-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/166-cfg.dot	2023-06-07 19:33:45.457394685 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/166-cfg.dot	2023-06-07 19:33:52.037393983 +0330
@@ -1,43 +1,35 @@
-digraph "CallStaticCharMethod" {  
-"9173" [label = <(va_start,va_start(ap, mid))<SUB>1691</SUB>> ]
-"9177" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1692</SUB>> ]
-"9180" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1693</SUB>> ]
-"9199" [label = <(soa,soa(env))<SUB>1694</SUB>> ]
-"9202" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, ap)))<SUB>1695</SUB>> ]
-"9208" [label = <(RETURN,return result.GetC();,return result.GetC();)<SUB>1696</SUB>> ]
-"9178" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1692</SUB>> ]
-"9203" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1695</SUB>> ]
-"9209" [label = <(GetC,result.GetC())<SUB>1696</SUB>> ]
-"9210" [label = <(&lt;operator&gt;.fieldAccess,result.GetC)<SUB>1696</SUB>> ]
-"9184" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1693</SUB>> ]
-"9212" [label = <(FIELD_IDENTIFIER,GetC,GetC)<SUB>1696</SUB>> ]
-"9185" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1693</SUB>> ]
-"9189" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1693</SUB>> ]
-"9196" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1693</SUB>> ]
-"9190" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1693</SUB>> ]
-"9191" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1693</SUB>> ]
-"9193" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1693</SUB>> ]
-"9167" [label = <(METHOD,CallStaticCharMethod)<SUB>1689</SUB>> ]
-"9213" [label = <(METHOD_RETURN,jchar)<SUB>1689</SUB>> ]
-  "9173" -> "9178" 
-  "9177" -> "9180" 
-  "9180" -> "9185" 
-  "9180" -> "9199" 
-  "9199" -> "9203" 
-  "9202" -> "9212" 
-  "9208" -> "9213" 
-  "9178" -> "9177" 
-  "9203" -> "9202" 
-  "9209" -> "9208" 
-  "9210" -> "9209" 
-  "9184" -> "9191" 
-  "9184" -> "9199" 
-  "9212" -> "9210" 
-  "9185" -> "9184" 
-  "9189" -> "9196" 
-  "9196" -> "9213" 
-  "9190" -> "9189" 
-  "9191" -> "9193" 
-  "9193" -> "9190" 
-  "9167" -> "9173" 
+digraph "CallStaticShortMethodV" {  
+"9152" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1643</SUB>> ]
+"9171" [label = <(soa,soa(env))<SUB>1644</SUB>> ]
+"9173" [label = <(RETURN,return InvokeWithVarArgs(soa, nullptr, mid, args).GetS();,return InvokeWithVarArgs(soa, nullptr, mid, args).GetS();)<SUB>1645</SUB>> ]
+"9174" [label = <(GetS,InvokeWithVarArgs(soa, nullptr, mid, args).GetS())<SUB>1645</SUB>> ]
+"9175" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, nullptr, mid, args).GetS)<SUB>1645</SUB>> ]
+"9156" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1643</SUB>> ]
+"9176" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1645</SUB>> ]
+"9181" [label = <(FIELD_IDENTIFIER,GetS,GetS)<SUB>1645</SUB>> ]
+"9157" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1643</SUB>> ]
+"9161" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1643</SUB>> ]
+"9168" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1643</SUB>> ]
+"9162" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1643</SUB>> ]
+"9163" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1643</SUB>> ]
+"9165" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1643</SUB>> ]
+"9146" [label = <(METHOD,CallStaticShortMethodV)<SUB>1642</SUB>> ]
+"9182" [label = <(METHOD_RETURN,jshort)<SUB>1642</SUB>> ]
+  "9152" -> "9157" 
+  "9152" -> "9171" 
+  "9171" -> "9176" 
+  "9173" -> "9182" 
+  "9174" -> "9173" 
+  "9175" -> "9174" 
+  "9156" -> "9163" 
+  "9156" -> "9171" 
+  "9176" -> "9181" 
+  "9181" -> "9175" 
+  "9157" -> "9156" 
+  "9161" -> "9168" 
+  "9168" -> "9182" 
+  "9162" -> "9161" 
+  "9163" -> "9165" 
+  "9165" -> "9162" 
+  "9146" -> "9152" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/167-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/167-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/167-cfg.dot	2023-06-07 19:33:45.457394685 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/167-cfg.dot	2023-06-07 19:33:52.037393983 +0330
@@ -1,35 +1,35 @@
-digraph "CallStaticCharMethodV" {  
-"9221" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1700</SUB>> ]
-"9240" [label = <(soa,soa(env))<SUB>1701</SUB>> ]
-"9242" [label = <(RETURN,return InvokeWithVarArgs(soa, nullptr, mid, args).GetC();,return InvokeWithVarArgs(soa, nullptr, mid, args).GetC();)<SUB>1702</SUB>> ]
-"9243" [label = <(GetC,InvokeWithVarArgs(soa, nullptr, mid, args).GetC())<SUB>1702</SUB>> ]
-"9244" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, nullptr, mid, args).GetC)<SUB>1702</SUB>> ]
-"9225" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1700</SUB>> ]
-"9245" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1702</SUB>> ]
-"9250" [label = <(FIELD_IDENTIFIER,GetC,GetC)<SUB>1702</SUB>> ]
-"9226" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1700</SUB>> ]
-"9230" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1700</SUB>> ]
-"9237" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1700</SUB>> ]
-"9231" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1700</SUB>> ]
-"9232" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1700</SUB>> ]
-"9234" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1700</SUB>> ]
-"9215" [label = <(METHOD,CallStaticCharMethodV)<SUB>1699</SUB>> ]
-"9251" [label = <(METHOD_RETURN,jchar)<SUB>1699</SUB>> ]
-  "9221" -> "9226" 
-  "9221" -> "9240" 
-  "9240" -> "9245" 
-  "9242" -> "9251" 
-  "9243" -> "9242" 
-  "9244" -> "9243" 
-  "9225" -> "9232" 
-  "9225" -> "9240" 
-  "9245" -> "9250" 
-  "9250" -> "9244" 
-  "9226" -> "9225" 
-  "9230" -> "9237" 
-  "9237" -> "9251" 
-  "9231" -> "9230" 
-  "9232" -> "9234" 
-  "9234" -> "9231" 
-  "9215" -> "9221" 
+digraph "CallStaticShortMethodA" {  
+"9190" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1649</SUB>> ]
+"9209" [label = <(soa,soa(env))<SUB>1650</SUB>> ]
+"9211" [label = <(RETURN,return InvokeWithJValues(soa, nullptr, mid, args).GetS();,return InvokeWithJValues(soa, nullptr, mid, args).GetS();)<SUB>1651</SUB>> ]
+"9212" [label = <(GetS,InvokeWithJValues(soa, nullptr, mid, args).GetS())<SUB>1651</SUB>> ]
+"9213" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, nullptr, mid, args).GetS)<SUB>1651</SUB>> ]
+"9194" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1649</SUB>> ]
+"9214" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1651</SUB>> ]
+"9219" [label = <(FIELD_IDENTIFIER,GetS,GetS)<SUB>1651</SUB>> ]
+"9195" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1649</SUB>> ]
+"9199" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1649</SUB>> ]
+"9206" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1649</SUB>> ]
+"9200" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1649</SUB>> ]
+"9201" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1649</SUB>> ]
+"9203" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1649</SUB>> ]
+"9184" [label = <(METHOD,CallStaticShortMethodA)<SUB>1648</SUB>> ]
+"9220" [label = <(METHOD_RETURN,jshort)<SUB>1648</SUB>> ]
+  "9190" -> "9195" 
+  "9190" -> "9209" 
+  "9209" -> "9214" 
+  "9211" -> "9220" 
+  "9212" -> "9211" 
+  "9213" -> "9212" 
+  "9194" -> "9201" 
+  "9194" -> "9209" 
+  "9214" -> "9219" 
+  "9219" -> "9213" 
+  "9195" -> "9194" 
+  "9199" -> "9206" 
+  "9206" -> "9220" 
+  "9200" -> "9199" 
+  "9201" -> "9203" 
+  "9203" -> "9200" 
+  "9184" -> "9190" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/168-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/168-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/168-cfg.dot	2023-06-07 19:33:45.457394685 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/168-cfg.dot	2023-06-07 19:33:52.037393983 +0330
@@ -1,35 +1,43 @@
-digraph "CallStaticCharMethodA" {  
-"9259" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1706</SUB>> ]
-"9278" [label = <(soa,soa(env))<SUB>1707</SUB>> ]
-"9280" [label = <(RETURN,return InvokeWithJValues(soa, nullptr, mid, args).GetC();,return InvokeWithJValues(soa, nullptr, mid, args).GetC();)<SUB>1708</SUB>> ]
-"9281" [label = <(GetC,InvokeWithJValues(soa, nullptr, mid, args).GetC())<SUB>1708</SUB>> ]
-"9282" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, nullptr, mid, args).GetC)<SUB>1708</SUB>> ]
-"9263" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1706</SUB>> ]
-"9283" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1708</SUB>> ]
-"9288" [label = <(FIELD_IDENTIFIER,GetC,GetC)<SUB>1708</SUB>> ]
-"9264" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1706</SUB>> ]
-"9268" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1706</SUB>> ]
-"9275" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1706</SUB>> ]
-"9269" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1706</SUB>> ]
-"9270" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1706</SUB>> ]
-"9272" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1706</SUB>> ]
-"9253" [label = <(METHOD,CallStaticCharMethodA)<SUB>1705</SUB>> ]
-"9289" [label = <(METHOD_RETURN,jchar)<SUB>1705</SUB>> ]
-  "9259" -> "9264" 
-  "9259" -> "9278" 
-  "9278" -> "9283" 
-  "9280" -> "9289" 
-  "9281" -> "9280" 
-  "9282" -> "9281" 
-  "9263" -> "9270" 
-  "9263" -> "9278" 
-  "9283" -> "9288" 
-  "9288" -> "9282" 
+digraph "CallStaticIntMethod" {  
+"9228" [label = <(va_start,va_start(ap, mid))<SUB>1656</SUB>> ]
+"9232" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1657</SUB>> ]
+"9235" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1658</SUB>> ]
+"9254" [label = <(soa,soa(env))<SUB>1659</SUB>> ]
+"9257" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, ap)))<SUB>1660</SUB>> ]
+"9263" [label = <(RETURN,return result.GetI();,return result.GetI();)<SUB>1661</SUB>> ]
+"9233" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1657</SUB>> ]
+"9258" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1660</SUB>> ]
+"9264" [label = <(GetI,result.GetI())<SUB>1661</SUB>> ]
+"9265" [label = <(&lt;operator&gt;.fieldAccess,result.GetI)<SUB>1661</SUB>> ]
+"9239" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1658</SUB>> ]
+"9267" [label = <(FIELD_IDENTIFIER,GetI,GetI)<SUB>1661</SUB>> ]
+"9240" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1658</SUB>> ]
+"9244" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1658</SUB>> ]
+"9251" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1658</SUB>> ]
+"9245" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1658</SUB>> ]
+"9246" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1658</SUB>> ]
+"9248" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1658</SUB>> ]
+"9222" [label = <(METHOD,CallStaticIntMethod)<SUB>1654</SUB>> ]
+"9268" [label = <(METHOD_RETURN,jint)<SUB>1654</SUB>> ]
+  "9228" -> "9233" 
+  "9232" -> "9235" 
+  "9235" -> "9240" 
+  "9235" -> "9254" 
+  "9254" -> "9258" 
+  "9257" -> "9267" 
+  "9263" -> "9268" 
+  "9233" -> "9232" 
+  "9258" -> "9257" 
   "9264" -> "9263" 
-  "9268" -> "9275" 
-  "9275" -> "9289" 
-  "9269" -> "9268" 
-  "9270" -> "9272" 
-  "9272" -> "9269" 
-  "9253" -> "9259" 
+  "9265" -> "9264" 
+  "9239" -> "9246" 
+  "9239" -> "9254" 
+  "9267" -> "9265" 
+  "9240" -> "9239" 
+  "9244" -> "9251" 
+  "9251" -> "9268" 
+  "9245" -> "9244" 
+  "9246" -> "9248" 
+  "9248" -> "9245" 
+  "9222" -> "9228" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/169-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/169-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/169-cfg.dot	2023-06-07 19:33:45.457394685 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/169-cfg.dot	2023-06-07 19:33:52.037393983 +0330
@@ -1,43 +1,35 @@
-digraph "CallStaticShortMethod" {  
-"9297" [label = <(va_start,va_start(ap, mid))<SUB>1713</SUB>> ]
-"9301" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1714</SUB>> ]
-"9304" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1715</SUB>> ]
-"9323" [label = <(soa,soa(env))<SUB>1716</SUB>> ]
-"9326" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, ap)))<SUB>1717</SUB>> ]
-"9332" [label = <(RETURN,return result.GetS();,return result.GetS();)<SUB>1718</SUB>> ]
-"9302" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1714</SUB>> ]
-"9327" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1717</SUB>> ]
-"9333" [label = <(GetS,result.GetS())<SUB>1718</SUB>> ]
-"9334" [label = <(&lt;operator&gt;.fieldAccess,result.GetS)<SUB>1718</SUB>> ]
-"9308" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1715</SUB>> ]
-"9336" [label = <(FIELD_IDENTIFIER,GetS,GetS)<SUB>1718</SUB>> ]
-"9309" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1715</SUB>> ]
-"9313" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1715</SUB>> ]
-"9320" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1715</SUB>> ]
-"9314" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1715</SUB>> ]
-"9315" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1715</SUB>> ]
-"9317" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1715</SUB>> ]
-"9291" [label = <(METHOD,CallStaticShortMethod)<SUB>1711</SUB>> ]
-"9337" [label = <(METHOD_RETURN,jshort)<SUB>1711</SUB>> ]
-  "9297" -> "9302" 
-  "9301" -> "9304" 
-  "9304" -> "9309" 
-  "9304" -> "9323" 
-  "9323" -> "9327" 
-  "9326" -> "9336" 
-  "9332" -> "9337" 
-  "9302" -> "9301" 
-  "9327" -> "9326" 
-  "9333" -> "9332" 
-  "9334" -> "9333" 
-  "9308" -> "9315" 
-  "9308" -> "9323" 
-  "9336" -> "9334" 
-  "9309" -> "9308" 
-  "9313" -> "9320" 
-  "9320" -> "9337" 
-  "9314" -> "9313" 
-  "9315" -> "9317" 
-  "9317" -> "9314" 
-  "9291" -> "9297" 
+digraph "CallStaticIntMethodV" {  
+"9276" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1665</SUB>> ]
+"9295" [label = <(soa,soa(env))<SUB>1666</SUB>> ]
+"9297" [label = <(RETURN,return InvokeWithVarArgs(soa, nullptr, mid, args).GetI();,return InvokeWithVarArgs(soa, nullptr, mid, args).GetI();)<SUB>1667</SUB>> ]
+"9298" [label = <(GetI,InvokeWithVarArgs(soa, nullptr, mid, args).GetI())<SUB>1667</SUB>> ]
+"9299" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, nullptr, mid, args).GetI)<SUB>1667</SUB>> ]
+"9280" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1665</SUB>> ]
+"9300" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1667</SUB>> ]
+"9305" [label = <(FIELD_IDENTIFIER,GetI,GetI)<SUB>1667</SUB>> ]
+"9281" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1665</SUB>> ]
+"9285" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1665</SUB>> ]
+"9292" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1665</SUB>> ]
+"9286" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1665</SUB>> ]
+"9287" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1665</SUB>> ]
+"9289" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1665</SUB>> ]
+"9270" [label = <(METHOD,CallStaticIntMethodV)<SUB>1664</SUB>> ]
+"9306" [label = <(METHOD_RETURN,jint)<SUB>1664</SUB>> ]
+  "9276" -> "9281" 
+  "9276" -> "9295" 
+  "9295" -> "9300" 
+  "9297" -> "9306" 
+  "9298" -> "9297" 
+  "9299" -> "9298" 
+  "9280" -> "9287" 
+  "9280" -> "9295" 
+  "9300" -> "9305" 
+  "9305" -> "9299" 
+  "9281" -> "9280" 
+  "9285" -> "9292" 
+  "9292" -> "9306" 
+  "9286" -> "9285" 
+  "9287" -> "9289" 
+  "9289" -> "9286" 
+  "9270" -> "9276" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/17-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/17-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/17-cfg.dot	2023-06-07 19:33:45.337394696 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/17-cfg.dot	2023-06-07 19:33:51.917393996 +0330
@@ -1,5 +1,5 @@
-digraph "FindMethodID" {  
-"398" [label = <(METHOD,FindMethodID)<SUB>323</SUB>> ]
-"405" [label = <(METHOD_RETURN,jmethodID)<SUB>323</SUB>> ]
-  "398" -> "405" 
+digraph "ThrowSIOOBE" {  
+"341" [label = <(METHOD,ThrowSIOOBE)<SUB>358</SUB>> ]
+"347" [label = <(METHOD_RETURN,void)<SUB>358</SUB>> ]
+  "341" -> "347" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/170-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/170-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/170-cfg.dot	2023-06-07 19:33:45.457394685 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/170-cfg.dot	2023-06-07 19:33:52.037393983 +0330
@@ -1,35 +1,35 @@
-digraph "CallStaticShortMethodV" {  
-"9345" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1722</SUB>> ]
-"9364" [label = <(soa,soa(env))<SUB>1723</SUB>> ]
-"9366" [label = <(RETURN,return InvokeWithVarArgs(soa, nullptr, mid, args).GetS();,return InvokeWithVarArgs(soa, nullptr, mid, args).GetS();)<SUB>1724</SUB>> ]
-"9367" [label = <(GetS,InvokeWithVarArgs(soa, nullptr, mid, args).GetS())<SUB>1724</SUB>> ]
-"9368" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, nullptr, mid, args).GetS)<SUB>1724</SUB>> ]
-"9349" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1722</SUB>> ]
-"9369" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1724</SUB>> ]
-"9374" [label = <(FIELD_IDENTIFIER,GetS,GetS)<SUB>1724</SUB>> ]
-"9350" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1722</SUB>> ]
-"9354" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1722</SUB>> ]
-"9361" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1722</SUB>> ]
-"9355" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1722</SUB>> ]
-"9356" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1722</SUB>> ]
-"9358" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1722</SUB>> ]
-"9339" [label = <(METHOD,CallStaticShortMethodV)<SUB>1721</SUB>> ]
-"9375" [label = <(METHOD_RETURN,jshort)<SUB>1721</SUB>> ]
-  "9345" -> "9350" 
-  "9345" -> "9364" 
-  "9364" -> "9369" 
-  "9366" -> "9375" 
-  "9367" -> "9366" 
-  "9368" -> "9367" 
-  "9349" -> "9356" 
-  "9349" -> "9364" 
-  "9369" -> "9374" 
-  "9374" -> "9368" 
-  "9350" -> "9349" 
-  "9354" -> "9361" 
-  "9361" -> "9375" 
-  "9355" -> "9354" 
-  "9356" -> "9358" 
-  "9358" -> "9355" 
-  "9339" -> "9345" 
+digraph "CallStaticIntMethodA" {  
+"9314" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1671</SUB>> ]
+"9333" [label = <(soa,soa(env))<SUB>1672</SUB>> ]
+"9335" [label = <(RETURN,return InvokeWithJValues(soa, nullptr, mid, args).GetI();,return InvokeWithJValues(soa, nullptr, mid, args).GetI();)<SUB>1673</SUB>> ]
+"9336" [label = <(GetI,InvokeWithJValues(soa, nullptr, mid, args).GetI())<SUB>1673</SUB>> ]
+"9337" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, nullptr, mid, args).GetI)<SUB>1673</SUB>> ]
+"9318" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1671</SUB>> ]
+"9338" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1673</SUB>> ]
+"9343" [label = <(FIELD_IDENTIFIER,GetI,GetI)<SUB>1673</SUB>> ]
+"9319" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1671</SUB>> ]
+"9323" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1671</SUB>> ]
+"9330" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1671</SUB>> ]
+"9324" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1671</SUB>> ]
+"9325" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1671</SUB>> ]
+"9327" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1671</SUB>> ]
+"9308" [label = <(METHOD,CallStaticIntMethodA)<SUB>1670</SUB>> ]
+"9344" [label = <(METHOD_RETURN,jint)<SUB>1670</SUB>> ]
+  "9314" -> "9319" 
+  "9314" -> "9333" 
+  "9333" -> "9338" 
+  "9335" -> "9344" 
+  "9336" -> "9335" 
+  "9337" -> "9336" 
+  "9318" -> "9325" 
+  "9318" -> "9333" 
+  "9338" -> "9343" 
+  "9343" -> "9337" 
+  "9319" -> "9318" 
+  "9323" -> "9330" 
+  "9330" -> "9344" 
+  "9324" -> "9323" 
+  "9325" -> "9327" 
+  "9327" -> "9324" 
+  "9308" -> "9314" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/171-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/171-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/171-cfg.dot	2023-06-07 19:33:45.457394685 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/171-cfg.dot	2023-06-07 19:33:52.037393983 +0330
@@ -1,35 +1,43 @@
-digraph "CallStaticShortMethodA" {  
-"9383" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1728</SUB>> ]
-"9402" [label = <(soa,soa(env))<SUB>1729</SUB>> ]
-"9404" [label = <(RETURN,return InvokeWithJValues(soa, nullptr, mid, args).GetS();,return InvokeWithJValues(soa, nullptr, mid, args).GetS();)<SUB>1730</SUB>> ]
-"9405" [label = <(GetS,InvokeWithJValues(soa, nullptr, mid, args).GetS())<SUB>1730</SUB>> ]
-"9406" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, nullptr, mid, args).GetS)<SUB>1730</SUB>> ]
-"9387" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1728</SUB>> ]
-"9407" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1730</SUB>> ]
-"9412" [label = <(FIELD_IDENTIFIER,GetS,GetS)<SUB>1730</SUB>> ]
-"9388" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1728</SUB>> ]
-"9392" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1728</SUB>> ]
-"9399" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1728</SUB>> ]
-"9393" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1728</SUB>> ]
-"9394" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1728</SUB>> ]
-"9396" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1728</SUB>> ]
-"9377" [label = <(METHOD,CallStaticShortMethodA)<SUB>1727</SUB>> ]
-"9413" [label = <(METHOD_RETURN,jshort)<SUB>1727</SUB>> ]
-  "9383" -> "9388" 
-  "9383" -> "9402" 
-  "9402" -> "9407" 
-  "9404" -> "9413" 
-  "9405" -> "9404" 
-  "9406" -> "9405" 
-  "9387" -> "9394" 
-  "9387" -> "9402" 
-  "9407" -> "9412" 
-  "9412" -> "9406" 
+digraph "CallStaticLongMethod" {  
+"9352" [label = <(va_start,va_start(ap, mid))<SUB>1678</SUB>> ]
+"9356" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1679</SUB>> ]
+"9359" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1680</SUB>> ]
+"9378" [label = <(soa,soa(env))<SUB>1681</SUB>> ]
+"9381" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, ap)))<SUB>1682</SUB>> ]
+"9387" [label = <(RETURN,return result.GetJ();,return result.GetJ();)<SUB>1683</SUB>> ]
+"9357" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1679</SUB>> ]
+"9382" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1682</SUB>> ]
+"9388" [label = <(GetJ,result.GetJ())<SUB>1683</SUB>> ]
+"9389" [label = <(&lt;operator&gt;.fieldAccess,result.GetJ)<SUB>1683</SUB>> ]
+"9363" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1680</SUB>> ]
+"9391" [label = <(FIELD_IDENTIFIER,GetJ,GetJ)<SUB>1683</SUB>> ]
+"9364" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1680</SUB>> ]
+"9368" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1680</SUB>> ]
+"9375" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1680</SUB>> ]
+"9369" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1680</SUB>> ]
+"9370" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1680</SUB>> ]
+"9372" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1680</SUB>> ]
+"9346" [label = <(METHOD,CallStaticLongMethod)<SUB>1676</SUB>> ]
+"9392" [label = <(METHOD_RETURN,jlong)<SUB>1676</SUB>> ]
+  "9352" -> "9357" 
+  "9356" -> "9359" 
+  "9359" -> "9364" 
+  "9359" -> "9378" 
+  "9378" -> "9382" 
+  "9381" -> "9391" 
+  "9387" -> "9392" 
+  "9357" -> "9356" 
+  "9382" -> "9381" 
   "9388" -> "9387" 
-  "9392" -> "9399" 
-  "9399" -> "9413" 
-  "9393" -> "9392" 
-  "9394" -> "9396" 
-  "9396" -> "9393" 
-  "9377" -> "9383" 
+  "9389" -> "9388" 
+  "9363" -> "9370" 
+  "9363" -> "9378" 
+  "9391" -> "9389" 
+  "9364" -> "9363" 
+  "9368" -> "9375" 
+  "9375" -> "9392" 
+  "9369" -> "9368" 
+  "9370" -> "9372" 
+  "9372" -> "9369" 
+  "9346" -> "9352" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/172-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/172-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/172-cfg.dot	2023-06-07 19:33:45.457394685 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/172-cfg.dot	2023-06-07 19:33:52.037393983 +0330
@@ -1,43 +1,35 @@
-digraph "CallStaticIntMethod" {  
-"9421" [label = <(va_start,va_start(ap, mid))<SUB>1735</SUB>> ]
-"9425" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1736</SUB>> ]
-"9428" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1737</SUB>> ]
-"9447" [label = <(soa,soa(env))<SUB>1738</SUB>> ]
-"9450" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, ap)))<SUB>1739</SUB>> ]
-"9456" [label = <(RETURN,return result.GetI();,return result.GetI();)<SUB>1740</SUB>> ]
-"9426" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1736</SUB>> ]
-"9451" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1739</SUB>> ]
-"9457" [label = <(GetI,result.GetI())<SUB>1740</SUB>> ]
-"9458" [label = <(&lt;operator&gt;.fieldAccess,result.GetI)<SUB>1740</SUB>> ]
-"9432" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1737</SUB>> ]
-"9460" [label = <(FIELD_IDENTIFIER,GetI,GetI)<SUB>1740</SUB>> ]
-"9433" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1737</SUB>> ]
-"9437" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1737</SUB>> ]
-"9444" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1737</SUB>> ]
-"9438" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1737</SUB>> ]
-"9439" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1737</SUB>> ]
-"9441" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1737</SUB>> ]
-"9415" [label = <(METHOD,CallStaticIntMethod)<SUB>1733</SUB>> ]
-"9461" [label = <(METHOD_RETURN,jint)<SUB>1733</SUB>> ]
-  "9421" -> "9426" 
-  "9425" -> "9428" 
-  "9428" -> "9433" 
-  "9428" -> "9447" 
-  "9447" -> "9451" 
-  "9450" -> "9460" 
-  "9456" -> "9461" 
-  "9426" -> "9425" 
-  "9451" -> "9450" 
-  "9457" -> "9456" 
-  "9458" -> "9457" 
-  "9432" -> "9439" 
-  "9432" -> "9447" 
-  "9460" -> "9458" 
-  "9433" -> "9432" 
-  "9437" -> "9444" 
-  "9444" -> "9461" 
-  "9438" -> "9437" 
-  "9439" -> "9441" 
-  "9441" -> "9438" 
-  "9415" -> "9421" 
+digraph "CallStaticLongMethodV" {  
+"9400" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1687</SUB>> ]
+"9419" [label = <(soa,soa(env))<SUB>1688</SUB>> ]
+"9421" [label = <(RETURN,return InvokeWithVarArgs(soa, nullptr, mid, args).GetJ();,return InvokeWithVarArgs(soa, nullptr, mid, args).GetJ();)<SUB>1689</SUB>> ]
+"9422" [label = <(GetJ,InvokeWithVarArgs(soa, nullptr, mid, args).GetJ())<SUB>1689</SUB>> ]
+"9423" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, nullptr, mid, args).GetJ)<SUB>1689</SUB>> ]
+"9404" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1687</SUB>> ]
+"9424" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1689</SUB>> ]
+"9429" [label = <(FIELD_IDENTIFIER,GetJ,GetJ)<SUB>1689</SUB>> ]
+"9405" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1687</SUB>> ]
+"9409" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1687</SUB>> ]
+"9416" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1687</SUB>> ]
+"9410" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1687</SUB>> ]
+"9411" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1687</SUB>> ]
+"9413" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1687</SUB>> ]
+"9394" [label = <(METHOD,CallStaticLongMethodV)<SUB>1686</SUB>> ]
+"9430" [label = <(METHOD_RETURN,jlong)<SUB>1686</SUB>> ]
+  "9400" -> "9405" 
+  "9400" -> "9419" 
+  "9419" -> "9424" 
+  "9421" -> "9430" 
+  "9422" -> "9421" 
+  "9423" -> "9422" 
+  "9404" -> "9411" 
+  "9404" -> "9419" 
+  "9424" -> "9429" 
+  "9429" -> "9423" 
+  "9405" -> "9404" 
+  "9409" -> "9416" 
+  "9416" -> "9430" 
+  "9410" -> "9409" 
+  "9411" -> "9413" 
+  "9413" -> "9410" 
+  "9394" -> "9400" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/173-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/173-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/173-cfg.dot	2023-06-07 19:33:45.457394685 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/173-cfg.dot	2023-06-07 19:33:52.037393983 +0330
@@ -1,35 +1,35 @@
-digraph "CallStaticIntMethodV" {  
-"9469" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1744</SUB>> ]
-"9488" [label = <(soa,soa(env))<SUB>1745</SUB>> ]
-"9490" [label = <(RETURN,return InvokeWithVarArgs(soa, nullptr, mid, args).GetI();,return InvokeWithVarArgs(soa, nullptr, mid, args).GetI();)<SUB>1746</SUB>> ]
-"9491" [label = <(GetI,InvokeWithVarArgs(soa, nullptr, mid, args).GetI())<SUB>1746</SUB>> ]
-"9492" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, nullptr, mid, args).GetI)<SUB>1746</SUB>> ]
-"9473" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1744</SUB>> ]
-"9493" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1746</SUB>> ]
-"9498" [label = <(FIELD_IDENTIFIER,GetI,GetI)<SUB>1746</SUB>> ]
-"9474" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1744</SUB>> ]
-"9478" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1744</SUB>> ]
-"9485" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1744</SUB>> ]
-"9479" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1744</SUB>> ]
-"9480" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1744</SUB>> ]
-"9482" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1744</SUB>> ]
-"9463" [label = <(METHOD,CallStaticIntMethodV)<SUB>1743</SUB>> ]
-"9499" [label = <(METHOD_RETURN,jint)<SUB>1743</SUB>> ]
-  "9469" -> "9474" 
-  "9469" -> "9488" 
-  "9488" -> "9493" 
-  "9490" -> "9499" 
-  "9491" -> "9490" 
-  "9492" -> "9491" 
-  "9473" -> "9480" 
-  "9473" -> "9488" 
-  "9493" -> "9498" 
-  "9498" -> "9492" 
-  "9474" -> "9473" 
-  "9478" -> "9485" 
-  "9485" -> "9499" 
-  "9479" -> "9478" 
-  "9480" -> "9482" 
-  "9482" -> "9479" 
-  "9463" -> "9469" 
+digraph "CallStaticLongMethodA" {  
+"9438" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1693</SUB>> ]
+"9457" [label = <(soa,soa(env))<SUB>1694</SUB>> ]
+"9459" [label = <(RETURN,return InvokeWithJValues(soa, nullptr, mid, args).GetJ();,return InvokeWithJValues(soa, nullptr, mid, args).GetJ();)<SUB>1695</SUB>> ]
+"9460" [label = <(GetJ,InvokeWithJValues(soa, nullptr, mid, args).GetJ())<SUB>1695</SUB>> ]
+"9461" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, nullptr, mid, args).GetJ)<SUB>1695</SUB>> ]
+"9442" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1693</SUB>> ]
+"9462" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1695</SUB>> ]
+"9467" [label = <(FIELD_IDENTIFIER,GetJ,GetJ)<SUB>1695</SUB>> ]
+"9443" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1693</SUB>> ]
+"9447" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1693</SUB>> ]
+"9454" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1693</SUB>> ]
+"9448" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1693</SUB>> ]
+"9449" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1693</SUB>> ]
+"9451" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1693</SUB>> ]
+"9432" [label = <(METHOD,CallStaticLongMethodA)<SUB>1692</SUB>> ]
+"9468" [label = <(METHOD_RETURN,jlong)<SUB>1692</SUB>> ]
+  "9438" -> "9443" 
+  "9438" -> "9457" 
+  "9457" -> "9462" 
+  "9459" -> "9468" 
+  "9460" -> "9459" 
+  "9461" -> "9460" 
+  "9442" -> "9449" 
+  "9442" -> "9457" 
+  "9462" -> "9467" 
+  "9467" -> "9461" 
+  "9443" -> "9442" 
+  "9447" -> "9454" 
+  "9454" -> "9468" 
+  "9448" -> "9447" 
+  "9449" -> "9451" 
+  "9451" -> "9448" 
+  "9432" -> "9438" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/174-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/174-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/174-cfg.dot	2023-06-07 19:33:45.457394685 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/174-cfg.dot	2023-06-07 19:33:52.037393983 +0330
@@ -1,35 +1,43 @@
-digraph "CallStaticIntMethodA" {  
-"9507" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1750</SUB>> ]
-"9526" [label = <(soa,soa(env))<SUB>1751</SUB>> ]
-"9528" [label = <(RETURN,return InvokeWithJValues(soa, nullptr, mid, args).GetI();,return InvokeWithJValues(soa, nullptr, mid, args).GetI();)<SUB>1752</SUB>> ]
-"9529" [label = <(GetI,InvokeWithJValues(soa, nullptr, mid, args).GetI())<SUB>1752</SUB>> ]
-"9530" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, nullptr, mid, args).GetI)<SUB>1752</SUB>> ]
-"9511" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1750</SUB>> ]
-"9531" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1752</SUB>> ]
-"9536" [label = <(FIELD_IDENTIFIER,GetI,GetI)<SUB>1752</SUB>> ]
-"9512" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1750</SUB>> ]
-"9516" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1750</SUB>> ]
-"9523" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1750</SUB>> ]
-"9517" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1750</SUB>> ]
-"9518" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1750</SUB>> ]
-"9520" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1750</SUB>> ]
-"9501" [label = <(METHOD,CallStaticIntMethodA)<SUB>1749</SUB>> ]
-"9537" [label = <(METHOD_RETURN,jint)<SUB>1749</SUB>> ]
-  "9507" -> "9512" 
-  "9507" -> "9526" 
-  "9526" -> "9531" 
-  "9528" -> "9537" 
-  "9529" -> "9528" 
-  "9530" -> "9529" 
-  "9511" -> "9518" 
-  "9511" -> "9526" 
-  "9531" -> "9536" 
-  "9536" -> "9530" 
+digraph "CallStaticFloatMethod" {  
+"9476" [label = <(va_start,va_start(ap, mid))<SUB>1700</SUB>> ]
+"9480" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1701</SUB>> ]
+"9483" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1702</SUB>> ]
+"9502" [label = <(soa,soa(env))<SUB>1703</SUB>> ]
+"9505" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, ap)))<SUB>1704</SUB>> ]
+"9511" [label = <(RETURN,return result.GetF();,return result.GetF();)<SUB>1705</SUB>> ]
+"9481" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1701</SUB>> ]
+"9506" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1704</SUB>> ]
+"9512" [label = <(GetF,result.GetF())<SUB>1705</SUB>> ]
+"9513" [label = <(&lt;operator&gt;.fieldAccess,result.GetF)<SUB>1705</SUB>> ]
+"9487" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1702</SUB>> ]
+"9515" [label = <(FIELD_IDENTIFIER,GetF,GetF)<SUB>1705</SUB>> ]
+"9488" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1702</SUB>> ]
+"9492" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1702</SUB>> ]
+"9499" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1702</SUB>> ]
+"9493" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1702</SUB>> ]
+"9494" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1702</SUB>> ]
+"9496" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1702</SUB>> ]
+"9470" [label = <(METHOD,CallStaticFloatMethod)<SUB>1698</SUB>> ]
+"9516" [label = <(METHOD_RETURN,jfloat)<SUB>1698</SUB>> ]
+  "9476" -> "9481" 
+  "9480" -> "9483" 
+  "9483" -> "9488" 
+  "9483" -> "9502" 
+  "9502" -> "9506" 
+  "9505" -> "9515" 
+  "9511" -> "9516" 
+  "9481" -> "9480" 
+  "9506" -> "9505" 
   "9512" -> "9511" 
-  "9516" -> "9523" 
-  "9523" -> "9537" 
-  "9517" -> "9516" 
-  "9518" -> "9520" 
-  "9520" -> "9517" 
-  "9501" -> "9507" 
+  "9513" -> "9512" 
+  "9487" -> "9494" 
+  "9487" -> "9502" 
+  "9515" -> "9513" 
+  "9488" -> "9487" 
+  "9492" -> "9499" 
+  "9499" -> "9516" 
+  "9493" -> "9492" 
+  "9494" -> "9496" 
+  "9496" -> "9493" 
+  "9470" -> "9476" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/175-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/175-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/175-cfg.dot	2023-06-07 19:33:45.457394685 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/175-cfg.dot	2023-06-07 19:33:52.037393983 +0330
@@ -1,43 +1,35 @@
-digraph "CallStaticLongMethod" {  
-"9545" [label = <(va_start,va_start(ap, mid))<SUB>1757</SUB>> ]
-"9549" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1758</SUB>> ]
-"9552" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1759</SUB>> ]
-"9571" [label = <(soa,soa(env))<SUB>1760</SUB>> ]
-"9574" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, ap)))<SUB>1761</SUB>> ]
-"9580" [label = <(RETURN,return result.GetJ();,return result.GetJ();)<SUB>1762</SUB>> ]
-"9550" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1758</SUB>> ]
-"9575" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1761</SUB>> ]
-"9581" [label = <(GetJ,result.GetJ())<SUB>1762</SUB>> ]
-"9582" [label = <(&lt;operator&gt;.fieldAccess,result.GetJ)<SUB>1762</SUB>> ]
-"9556" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1759</SUB>> ]
-"9584" [label = <(FIELD_IDENTIFIER,GetJ,GetJ)<SUB>1762</SUB>> ]
-"9557" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1759</SUB>> ]
-"9561" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1759</SUB>> ]
-"9568" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1759</SUB>> ]
-"9562" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1759</SUB>> ]
-"9563" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1759</SUB>> ]
-"9565" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1759</SUB>> ]
-"9539" [label = <(METHOD,CallStaticLongMethod)<SUB>1755</SUB>> ]
-"9585" [label = <(METHOD_RETURN,jlong)<SUB>1755</SUB>> ]
-  "9545" -> "9550" 
-  "9549" -> "9552" 
-  "9552" -> "9557" 
-  "9552" -> "9571" 
-  "9571" -> "9575" 
-  "9574" -> "9584" 
-  "9580" -> "9585" 
-  "9550" -> "9549" 
-  "9575" -> "9574" 
-  "9581" -> "9580" 
-  "9582" -> "9581" 
-  "9556" -> "9563" 
-  "9556" -> "9571" 
-  "9584" -> "9582" 
-  "9557" -> "9556" 
-  "9561" -> "9568" 
-  "9568" -> "9585" 
-  "9562" -> "9561" 
-  "9563" -> "9565" 
-  "9565" -> "9562" 
-  "9539" -> "9545" 
+digraph "CallStaticFloatMethodV" {  
+"9524" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1709</SUB>> ]
+"9543" [label = <(soa,soa(env))<SUB>1710</SUB>> ]
+"9545" [label = <(RETURN,return InvokeWithVarArgs(soa, nullptr, mid, args).GetF();,return InvokeWithVarArgs(soa, nullptr, mid, args).GetF();)<SUB>1711</SUB>> ]
+"9546" [label = <(GetF,InvokeWithVarArgs(soa, nullptr, mid, args).GetF())<SUB>1711</SUB>> ]
+"9547" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, nullptr, mid, args).GetF)<SUB>1711</SUB>> ]
+"9528" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1709</SUB>> ]
+"9548" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1711</SUB>> ]
+"9553" [label = <(FIELD_IDENTIFIER,GetF,GetF)<SUB>1711</SUB>> ]
+"9529" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1709</SUB>> ]
+"9533" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1709</SUB>> ]
+"9540" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1709</SUB>> ]
+"9534" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1709</SUB>> ]
+"9535" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1709</SUB>> ]
+"9537" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1709</SUB>> ]
+"9518" [label = <(METHOD,CallStaticFloatMethodV)<SUB>1708</SUB>> ]
+"9554" [label = <(METHOD_RETURN,jfloat)<SUB>1708</SUB>> ]
+  "9524" -> "9529" 
+  "9524" -> "9543" 
+  "9543" -> "9548" 
+  "9545" -> "9554" 
+  "9546" -> "9545" 
+  "9547" -> "9546" 
+  "9528" -> "9535" 
+  "9528" -> "9543" 
+  "9548" -> "9553" 
+  "9553" -> "9547" 
+  "9529" -> "9528" 
+  "9533" -> "9540" 
+  "9540" -> "9554" 
+  "9534" -> "9533" 
+  "9535" -> "9537" 
+  "9537" -> "9534" 
+  "9518" -> "9524" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/176-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/176-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/176-cfg.dot	2023-06-07 19:33:45.467394683 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/176-cfg.dot	2023-06-07 19:33:52.037393983 +0330
@@ -1,35 +1,35 @@
-digraph "CallStaticLongMethodV" {  
-"9593" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1766</SUB>> ]
-"9612" [label = <(soa,soa(env))<SUB>1767</SUB>> ]
-"9614" [label = <(RETURN,return InvokeWithVarArgs(soa, nullptr, mid, args).GetJ();,return InvokeWithVarArgs(soa, nullptr, mid, args).GetJ();)<SUB>1768</SUB>> ]
-"9615" [label = <(GetJ,InvokeWithVarArgs(soa, nullptr, mid, args).GetJ())<SUB>1768</SUB>> ]
-"9616" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, nullptr, mid, args).GetJ)<SUB>1768</SUB>> ]
-"9597" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1766</SUB>> ]
-"9617" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1768</SUB>> ]
-"9622" [label = <(FIELD_IDENTIFIER,GetJ,GetJ)<SUB>1768</SUB>> ]
-"9598" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1766</SUB>> ]
-"9602" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1766</SUB>> ]
-"9609" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1766</SUB>> ]
-"9603" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1766</SUB>> ]
-"9604" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1766</SUB>> ]
-"9606" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1766</SUB>> ]
-"9587" [label = <(METHOD,CallStaticLongMethodV)<SUB>1765</SUB>> ]
-"9623" [label = <(METHOD_RETURN,jlong)<SUB>1765</SUB>> ]
-  "9593" -> "9598" 
-  "9593" -> "9612" 
-  "9612" -> "9617" 
-  "9614" -> "9623" 
-  "9615" -> "9614" 
-  "9616" -> "9615" 
-  "9597" -> "9604" 
-  "9597" -> "9612" 
-  "9617" -> "9622" 
-  "9622" -> "9616" 
-  "9598" -> "9597" 
-  "9602" -> "9609" 
-  "9609" -> "9623" 
-  "9603" -> "9602" 
-  "9604" -> "9606" 
-  "9606" -> "9603" 
-  "9587" -> "9593" 
+digraph "CallStaticFloatMethodA" {  
+"9562" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1715</SUB>> ]
+"9581" [label = <(soa,soa(env))<SUB>1716</SUB>> ]
+"9583" [label = <(RETURN,return InvokeWithJValues(soa, nullptr, mid, args).GetF();,return InvokeWithJValues(soa, nullptr, mid, args).GetF();)<SUB>1717</SUB>> ]
+"9584" [label = <(GetF,InvokeWithJValues(soa, nullptr, mid, args).GetF())<SUB>1717</SUB>> ]
+"9585" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, nullptr, mid, args).GetF)<SUB>1717</SUB>> ]
+"9566" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1715</SUB>> ]
+"9586" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1717</SUB>> ]
+"9591" [label = <(FIELD_IDENTIFIER,GetF,GetF)<SUB>1717</SUB>> ]
+"9567" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1715</SUB>> ]
+"9571" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1715</SUB>> ]
+"9578" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1715</SUB>> ]
+"9572" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1715</SUB>> ]
+"9573" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1715</SUB>> ]
+"9575" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1715</SUB>> ]
+"9556" [label = <(METHOD,CallStaticFloatMethodA)<SUB>1714</SUB>> ]
+"9592" [label = <(METHOD_RETURN,jfloat)<SUB>1714</SUB>> ]
+  "9562" -> "9567" 
+  "9562" -> "9581" 
+  "9581" -> "9586" 
+  "9583" -> "9592" 
+  "9584" -> "9583" 
+  "9585" -> "9584" 
+  "9566" -> "9573" 
+  "9566" -> "9581" 
+  "9586" -> "9591" 
+  "9591" -> "9585" 
+  "9567" -> "9566" 
+  "9571" -> "9578" 
+  "9578" -> "9592" 
+  "9572" -> "9571" 
+  "9573" -> "9575" 
+  "9575" -> "9572" 
+  "9556" -> "9562" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/177-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/177-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/177-cfg.dot	2023-06-07 19:33:45.467394683 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/177-cfg.dot	2023-06-07 19:33:52.047393982 +0330
@@ -1,35 +1,43 @@
-digraph "CallStaticLongMethodA" {  
-"9631" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1772</SUB>> ]
-"9650" [label = <(soa,soa(env))<SUB>1773</SUB>> ]
-"9652" [label = <(RETURN,return InvokeWithJValues(soa, nullptr, mid, args).GetJ();,return InvokeWithJValues(soa, nullptr, mid, args).GetJ();)<SUB>1774</SUB>> ]
-"9653" [label = <(GetJ,InvokeWithJValues(soa, nullptr, mid, args).GetJ())<SUB>1774</SUB>> ]
-"9654" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, nullptr, mid, args).GetJ)<SUB>1774</SUB>> ]
-"9635" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1772</SUB>> ]
-"9655" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1774</SUB>> ]
-"9660" [label = <(FIELD_IDENTIFIER,GetJ,GetJ)<SUB>1774</SUB>> ]
-"9636" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1772</SUB>> ]
-"9640" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1772</SUB>> ]
-"9647" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1772</SUB>> ]
-"9641" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1772</SUB>> ]
-"9642" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1772</SUB>> ]
-"9644" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1772</SUB>> ]
-"9625" [label = <(METHOD,CallStaticLongMethodA)<SUB>1771</SUB>> ]
-"9661" [label = <(METHOD_RETURN,jlong)<SUB>1771</SUB>> ]
-  "9631" -> "9636" 
-  "9631" -> "9650" 
-  "9650" -> "9655" 
-  "9652" -> "9661" 
-  "9653" -> "9652" 
-  "9654" -> "9653" 
-  "9635" -> "9642" 
-  "9635" -> "9650" 
-  "9655" -> "9660" 
-  "9660" -> "9654" 
+digraph "CallStaticDoubleMethod" {  
+"9600" [label = <(va_start,va_start(ap, mid))<SUB>1722</SUB>> ]
+"9604" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1723</SUB>> ]
+"9607" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1724</SUB>> ]
+"9626" [label = <(soa,soa(env))<SUB>1725</SUB>> ]
+"9629" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, ap)))<SUB>1726</SUB>> ]
+"9635" [label = <(RETURN,return result.GetD();,return result.GetD();)<SUB>1727</SUB>> ]
+"9605" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1723</SUB>> ]
+"9630" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1726</SUB>> ]
+"9636" [label = <(GetD,result.GetD())<SUB>1727</SUB>> ]
+"9637" [label = <(&lt;operator&gt;.fieldAccess,result.GetD)<SUB>1727</SUB>> ]
+"9611" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1724</SUB>> ]
+"9639" [label = <(FIELD_IDENTIFIER,GetD,GetD)<SUB>1727</SUB>> ]
+"9612" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1724</SUB>> ]
+"9616" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1724</SUB>> ]
+"9623" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1724</SUB>> ]
+"9617" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1724</SUB>> ]
+"9618" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1724</SUB>> ]
+"9620" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1724</SUB>> ]
+"9594" [label = <(METHOD,CallStaticDoubleMethod)<SUB>1720</SUB>> ]
+"9640" [label = <(METHOD_RETURN,jdouble)<SUB>1720</SUB>> ]
+  "9600" -> "9605" 
+  "9604" -> "9607" 
+  "9607" -> "9612" 
+  "9607" -> "9626" 
+  "9626" -> "9630" 
+  "9629" -> "9639" 
+  "9635" -> "9640" 
+  "9605" -> "9604" 
+  "9630" -> "9629" 
   "9636" -> "9635" 
-  "9640" -> "9647" 
-  "9647" -> "9661" 
-  "9641" -> "9640" 
-  "9642" -> "9644" 
-  "9644" -> "9641" 
-  "9625" -> "9631" 
+  "9637" -> "9636" 
+  "9611" -> "9618" 
+  "9611" -> "9626" 
+  "9639" -> "9637" 
+  "9612" -> "9611" 
+  "9616" -> "9623" 
+  "9623" -> "9640" 
+  "9617" -> "9616" 
+  "9618" -> "9620" 
+  "9620" -> "9617" 
+  "9594" -> "9600" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/178-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/178-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/178-cfg.dot	2023-06-07 19:33:45.467394683 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/178-cfg.dot	2023-06-07 19:33:52.047393982 +0330
@@ -1,43 +1,35 @@
-digraph "CallStaticFloatMethod" {  
-"9669" [label = <(va_start,va_start(ap, mid))<SUB>1779</SUB>> ]
-"9673" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1780</SUB>> ]
-"9676" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1781</SUB>> ]
-"9695" [label = <(soa,soa(env))<SUB>1782</SUB>> ]
-"9698" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, ap)))<SUB>1783</SUB>> ]
-"9704" [label = <(RETURN,return result.GetF();,return result.GetF();)<SUB>1784</SUB>> ]
-"9674" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1780</SUB>> ]
-"9699" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1783</SUB>> ]
-"9705" [label = <(GetF,result.GetF())<SUB>1784</SUB>> ]
-"9706" [label = <(&lt;operator&gt;.fieldAccess,result.GetF)<SUB>1784</SUB>> ]
-"9680" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1781</SUB>> ]
-"9708" [label = <(FIELD_IDENTIFIER,GetF,GetF)<SUB>1784</SUB>> ]
-"9681" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1781</SUB>> ]
-"9685" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1781</SUB>> ]
-"9692" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1781</SUB>> ]
-"9686" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1781</SUB>> ]
-"9687" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1781</SUB>> ]
-"9689" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1781</SUB>> ]
-"9663" [label = <(METHOD,CallStaticFloatMethod)<SUB>1777</SUB>> ]
-"9709" [label = <(METHOD_RETURN,jfloat)<SUB>1777</SUB>> ]
-  "9669" -> "9674" 
-  "9673" -> "9676" 
-  "9676" -> "9681" 
-  "9676" -> "9695" 
-  "9695" -> "9699" 
-  "9698" -> "9708" 
-  "9704" -> "9709" 
-  "9674" -> "9673" 
-  "9699" -> "9698" 
-  "9705" -> "9704" 
-  "9706" -> "9705" 
-  "9680" -> "9687" 
-  "9680" -> "9695" 
-  "9708" -> "9706" 
-  "9681" -> "9680" 
-  "9685" -> "9692" 
-  "9692" -> "9709" 
-  "9686" -> "9685" 
-  "9687" -> "9689" 
-  "9689" -> "9686" 
-  "9663" -> "9669" 
+digraph "CallStaticDoubleMethodV" {  
+"9648" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1731</SUB>> ]
+"9667" [label = <(soa,soa(env))<SUB>1732</SUB>> ]
+"9669" [label = <(RETURN,return InvokeWithVarArgs(soa, nullptr, mid, args).GetD();,return InvokeWithVarArgs(soa, nullptr, mid, args).GetD();)<SUB>1733</SUB>> ]
+"9670" [label = <(GetD,InvokeWithVarArgs(soa, nullptr, mid, args).GetD())<SUB>1733</SUB>> ]
+"9671" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, nullptr, mid, args).GetD)<SUB>1733</SUB>> ]
+"9652" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1731</SUB>> ]
+"9672" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1733</SUB>> ]
+"9677" [label = <(FIELD_IDENTIFIER,GetD,GetD)<SUB>1733</SUB>> ]
+"9653" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1731</SUB>> ]
+"9657" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1731</SUB>> ]
+"9664" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1731</SUB>> ]
+"9658" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1731</SUB>> ]
+"9659" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1731</SUB>> ]
+"9661" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1731</SUB>> ]
+"9642" [label = <(METHOD,CallStaticDoubleMethodV)<SUB>1730</SUB>> ]
+"9678" [label = <(METHOD_RETURN,jdouble)<SUB>1730</SUB>> ]
+  "9648" -> "9653" 
+  "9648" -> "9667" 
+  "9667" -> "9672" 
+  "9669" -> "9678" 
+  "9670" -> "9669" 
+  "9671" -> "9670" 
+  "9652" -> "9659" 
+  "9652" -> "9667" 
+  "9672" -> "9677" 
+  "9677" -> "9671" 
+  "9653" -> "9652" 
+  "9657" -> "9664" 
+  "9664" -> "9678" 
+  "9658" -> "9657" 
+  "9659" -> "9661" 
+  "9661" -> "9658" 
+  "9642" -> "9648" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/179-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/179-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/179-cfg.dot	2023-06-07 19:33:45.467394683 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/179-cfg.dot	2023-06-07 19:33:52.047393982 +0330
@@ -1,35 +1,35 @@
-digraph "CallStaticFloatMethodV" {  
-"9717" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1788</SUB>> ]
-"9736" [label = <(soa,soa(env))<SUB>1789</SUB>> ]
-"9738" [label = <(RETURN,return InvokeWithVarArgs(soa, nullptr, mid, args).GetF();,return InvokeWithVarArgs(soa, nullptr, mid, args).GetF();)<SUB>1790</SUB>> ]
-"9739" [label = <(GetF,InvokeWithVarArgs(soa, nullptr, mid, args).GetF())<SUB>1790</SUB>> ]
-"9740" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, nullptr, mid, args).GetF)<SUB>1790</SUB>> ]
-"9721" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1788</SUB>> ]
-"9741" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1790</SUB>> ]
-"9746" [label = <(FIELD_IDENTIFIER,GetF,GetF)<SUB>1790</SUB>> ]
-"9722" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1788</SUB>> ]
-"9726" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1788</SUB>> ]
-"9733" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1788</SUB>> ]
-"9727" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1788</SUB>> ]
-"9728" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1788</SUB>> ]
-"9730" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1788</SUB>> ]
-"9711" [label = <(METHOD,CallStaticFloatMethodV)<SUB>1787</SUB>> ]
-"9747" [label = <(METHOD_RETURN,jfloat)<SUB>1787</SUB>> ]
-  "9717" -> "9722" 
-  "9717" -> "9736" 
-  "9736" -> "9741" 
-  "9738" -> "9747" 
-  "9739" -> "9738" 
-  "9740" -> "9739" 
-  "9721" -> "9728" 
-  "9721" -> "9736" 
-  "9741" -> "9746" 
-  "9746" -> "9740" 
-  "9722" -> "9721" 
-  "9726" -> "9733" 
-  "9733" -> "9747" 
-  "9727" -> "9726" 
-  "9728" -> "9730" 
-  "9730" -> "9727" 
-  "9711" -> "9717" 
+digraph "CallStaticDoubleMethodA" {  
+"9686" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1737</SUB>> ]
+"9705" [label = <(soa,soa(env))<SUB>1738</SUB>> ]
+"9707" [label = <(RETURN,return InvokeWithJValues(soa, nullptr, mid, args).GetD();,return InvokeWithJValues(soa, nullptr, mid, args).GetD();)<SUB>1739</SUB>> ]
+"9708" [label = <(GetD,InvokeWithJValues(soa, nullptr, mid, args).GetD())<SUB>1739</SUB>> ]
+"9709" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, nullptr, mid, args).GetD)<SUB>1739</SUB>> ]
+"9690" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1737</SUB>> ]
+"9710" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1739</SUB>> ]
+"9715" [label = <(FIELD_IDENTIFIER,GetD,GetD)<SUB>1739</SUB>> ]
+"9691" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1737</SUB>> ]
+"9695" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1737</SUB>> ]
+"9702" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1737</SUB>> ]
+"9696" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1737</SUB>> ]
+"9697" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1737</SUB>> ]
+"9699" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1737</SUB>> ]
+"9680" [label = <(METHOD,CallStaticDoubleMethodA)<SUB>1736</SUB>> ]
+"9716" [label = <(METHOD_RETURN,jdouble)<SUB>1736</SUB>> ]
+  "9686" -> "9691" 
+  "9686" -> "9705" 
+  "9705" -> "9710" 
+  "9707" -> "9716" 
+  "9708" -> "9707" 
+  "9709" -> "9708" 
+  "9690" -> "9697" 
+  "9690" -> "9705" 
+  "9710" -> "9715" 
+  "9715" -> "9709" 
+  "9691" -> "9690" 
+  "9695" -> "9702" 
+  "9702" -> "9716" 
+  "9696" -> "9695" 
+  "9697" -> "9699" 
+  "9699" -> "9696" 
+  "9680" -> "9686" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/18-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/18-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/18-cfg.dot	2023-06-07 19:33:45.337394696 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/18-cfg.dot	2023-06-07 19:33:51.917393996 +0330
@@ -1,5 +1,5 @@
-digraph "GetClassLoader" {  
-"433" [label = <(METHOD,GetClassLoader)<SUB>347</SUB>> ]
-"436" [label = <(METHOD_RETURN,ANY)<SUB>347</SUB>> ]
-  "433" -> "436" 
+digraph "ThrowNewException" {  
+"352" [label = <(METHOD,ThrowNewException)<SUB>366</SUB>> ]
+"358" [label = <(METHOD_RETURN,int)<SUB>366</SUB>> ]
+  "352" -> "358" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/180-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/180-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/180-cfg.dot	2023-06-07 19:33:45.467394683 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/180-cfg.dot	2023-06-07 19:33:52.047393982 +0330
@@ -1,35 +1,33 @@
-digraph "CallStaticFloatMethodA" {  
-"9755" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1794</SUB>> ]
-"9774" [label = <(soa,soa(env))<SUB>1795</SUB>> ]
-"9776" [label = <(RETURN,return InvokeWithJValues(soa, nullptr, mid, args).GetF();,return InvokeWithJValues(soa, nullptr, mid, args).GetF();)<SUB>1796</SUB>> ]
-"9777" [label = <(GetF,InvokeWithJValues(soa, nullptr, mid, args).GetF())<SUB>1796</SUB>> ]
-"9778" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, nullptr, mid, args).GetF)<SUB>1796</SUB>> ]
-"9759" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1794</SUB>> ]
-"9779" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1796</SUB>> ]
-"9784" [label = <(FIELD_IDENTIFIER,GetF,GetF)<SUB>1796</SUB>> ]
-"9760" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1794</SUB>> ]
-"9764" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1794</SUB>> ]
-"9771" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1794</SUB>> ]
-"9765" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1794</SUB>> ]
-"9766" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1794</SUB>> ]
-"9768" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1794</SUB>> ]
-"9749" [label = <(METHOD,CallStaticFloatMethodA)<SUB>1793</SUB>> ]
-"9785" [label = <(METHOD_RETURN,jfloat)<SUB>1793</SUB>> ]
-  "9755" -> "9760" 
-  "9755" -> "9774" 
-  "9774" -> "9779" 
-  "9776" -> "9785" 
-  "9777" -> "9776" 
-  "9778" -> "9777" 
-  "9759" -> "9766" 
-  "9759" -> "9774" 
-  "9779" -> "9784" 
-  "9784" -> "9778" 
-  "9760" -> "9759" 
-  "9764" -> "9771" 
-  "9771" -> "9785" 
-  "9765" -> "9764" 
-  "9766" -> "9768" 
-  "9768" -> "9765" 
-  "9749" -> "9755" 
+digraph "CallStaticVoidMethod" {  
+"9724" [label = <(va_start,va_start(ap, mid))<SUB>1744</SUB>> ]
+"9728" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1745</SUB>> ]
+"9731" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1746</SUB>> ]
+"9749" [label = <(soa,soa(env))<SUB>1747</SUB>> ]
+"9751" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1748</SUB>> ]
+"9729" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1745</SUB>> ]
+"9735" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1746</SUB>> ]
+"9736" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1746</SUB>> ]
+"9740" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1746</SUB>> ]
+"9747" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1746</SUB>> ]
+"9741" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1746</SUB>> ]
+"9742" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1746</SUB>> ]
+"9744" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1746</SUB>> ]
+"9718" [label = <(METHOD,CallStaticVoidMethod)<SUB>1742</SUB>> ]
+"9756" [label = <(METHOD_RETURN,void)<SUB>1742</SUB>> ]
+  "9724" -> "9729" 
+  "9728" -> "9731" 
+  "9731" -> "9736" 
+  "9731" -> "9749" 
+  "9749" -> "9751" 
+  "9751" -> "9756" 
+  "9729" -> "9728" 
+  "9735" -> "9742" 
+  "9735" -> "9749" 
+  "9736" -> "9735" 
+  "9740" -> "9747" 
+  "9747" -> "9756" 
+  "9741" -> "9740" 
+  "9742" -> "9744" 
+  "9744" -> "9741" 
+  "9718" -> "9724" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/181-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/181-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/181-cfg.dot	2023-06-07 19:33:45.467394683 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/181-cfg.dot	2023-06-07 19:33:52.047393982 +0330
@@ -1,43 +1,27 @@
-digraph "CallStaticDoubleMethod" {  
-"9793" [label = <(va_start,va_start(ap, mid))<SUB>1801</SUB>> ]
-"9797" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1802</SUB>> ]
-"9800" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1803</SUB>> ]
-"9819" [label = <(soa,soa(env))<SUB>1804</SUB>> ]
-"9822" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, ap)))<SUB>1805</SUB>> ]
-"9828" [label = <(RETURN,return result.GetD();,return result.GetD();)<SUB>1806</SUB>> ]
-"9798" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1802</SUB>> ]
-"9823" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1805</SUB>> ]
-"9829" [label = <(GetD,result.GetD())<SUB>1806</SUB>> ]
-"9830" [label = <(&lt;operator&gt;.fieldAccess,result.GetD)<SUB>1806</SUB>> ]
-"9804" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1803</SUB>> ]
-"9832" [label = <(FIELD_IDENTIFIER,GetD,GetD)<SUB>1806</SUB>> ]
-"9805" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1803</SUB>> ]
-"9809" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1803</SUB>> ]
-"9816" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1803</SUB>> ]
-"9810" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1803</SUB>> ]
-"9811" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1803</SUB>> ]
-"9813" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1803</SUB>> ]
-"9787" [label = <(METHOD,CallStaticDoubleMethod)<SUB>1799</SUB>> ]
-"9833" [label = <(METHOD_RETURN,jdouble)<SUB>1799</SUB>> ]
-  "9793" -> "9798" 
-  "9797" -> "9800" 
-  "9800" -> "9805" 
-  "9800" -> "9819" 
-  "9819" -> "9823" 
-  "9822" -> "9832" 
-  "9828" -> "9833" 
-  "9798" -> "9797" 
-  "9823" -> "9822" 
-  "9829" -> "9828" 
-  "9830" -> "9829" 
-  "9804" -> "9811" 
-  "9804" -> "9819" 
-  "9832" -> "9830" 
-  "9805" -> "9804" 
-  "9809" -> "9816" 
-  "9816" -> "9833" 
-  "9810" -> "9809" 
-  "9811" -> "9813" 
-  "9813" -> "9810" 
-  "9787" -> "9793" 
+digraph "CallStaticVoidMethodV" {  
+"9764" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1752</SUB>> ]
+"9782" [label = <(soa,soa(env))<SUB>1753</SUB>> ]
+"9784" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1754</SUB>> ]
+"9768" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1752</SUB>> ]
+"9769" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1752</SUB>> ]
+"9773" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1752</SUB>> ]
+"9780" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1752</SUB>> ]
+"9774" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1752</SUB>> ]
+"9775" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1752</SUB>> ]
+"9777" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1752</SUB>> ]
+"9758" [label = <(METHOD,CallStaticVoidMethodV)<SUB>1751</SUB>> ]
+"9789" [label = <(METHOD_RETURN,void)<SUB>1751</SUB>> ]
+  "9764" -> "9769" 
+  "9764" -> "9782" 
+  "9782" -> "9784" 
+  "9784" -> "9789" 
+  "9768" -> "9775" 
+  "9768" -> "9782" 
+  "9769" -> "9768" 
+  "9773" -> "9780" 
+  "9780" -> "9789" 
+  "9774" -> "9773" 
+  "9775" -> "9777" 
+  "9777" -> "9774" 
+  "9758" -> "9764" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/182-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/182-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/182-cfg.dot	2023-06-07 19:33:45.467394683 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/182-cfg.dot	2023-06-07 19:33:52.047393982 +0330
@@ -1,35 +1,27 @@
-digraph "CallStaticDoubleMethodV" {  
-"9841" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1810</SUB>> ]
-"9860" [label = <(soa,soa(env))<SUB>1811</SUB>> ]
-"9862" [label = <(RETURN,return InvokeWithVarArgs(soa, nullptr, mid, args).GetD();,return InvokeWithVarArgs(soa, nullptr, mid, args).GetD();)<SUB>1812</SUB>> ]
-"9863" [label = <(GetD,InvokeWithVarArgs(soa, nullptr, mid, args).GetD())<SUB>1812</SUB>> ]
-"9864" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, nullptr, mid, args).GetD)<SUB>1812</SUB>> ]
-"9845" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1810</SUB>> ]
-"9865" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1812</SUB>> ]
-"9870" [label = <(FIELD_IDENTIFIER,GetD,GetD)<SUB>1812</SUB>> ]
-"9846" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1810</SUB>> ]
-"9850" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1810</SUB>> ]
-"9857" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1810</SUB>> ]
-"9851" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1810</SUB>> ]
-"9852" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1810</SUB>> ]
-"9854" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1810</SUB>> ]
-"9835" [label = <(METHOD,CallStaticDoubleMethodV)<SUB>1809</SUB>> ]
-"9871" [label = <(METHOD_RETURN,jdouble)<SUB>1809</SUB>> ]
-  "9841" -> "9846" 
-  "9841" -> "9860" 
-  "9860" -> "9865" 
-  "9862" -> "9871" 
-  "9863" -> "9862" 
-  "9864" -> "9863" 
-  "9845" -> "9852" 
-  "9845" -> "9860" 
-  "9865" -> "9870" 
-  "9870" -> "9864" 
-  "9846" -> "9845" 
-  "9850" -> "9857" 
-  "9857" -> "9871" 
-  "9851" -> "9850" 
-  "9852" -> "9854" 
-  "9854" -> "9851" 
-  "9835" -> "9841" 
+digraph "CallStaticVoidMethodA" {  
+"9797" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1758</SUB>> ]
+"9815" [label = <(soa,soa(env))<SUB>1759</SUB>> ]
+"9817" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1760</SUB>> ]
+"9801" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1758</SUB>> ]
+"9802" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1758</SUB>> ]
+"9806" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1758</SUB>> ]
+"9813" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1758</SUB>> ]
+"9807" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1758</SUB>> ]
+"9808" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1758</SUB>> ]
+"9810" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1758</SUB>> ]
+"9791" [label = <(METHOD,CallStaticVoidMethodA)<SUB>1757</SUB>> ]
+"9822" [label = <(METHOD_RETURN,void)<SUB>1757</SUB>> ]
+  "9797" -> "9802" 
+  "9797" -> "9815" 
+  "9815" -> "9817" 
+  "9817" -> "9822" 
+  "9801" -> "9808" 
+  "9801" -> "9815" 
+  "9802" -> "9801" 
+  "9806" -> "9813" 
+  "9813" -> "9822" 
+  "9807" -> "9806" 
+  "9808" -> "9810" 
+  "9810" -> "9807" 
+  "9791" -> "9797" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/183-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/183-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/183-cfg.dot	2023-06-07 19:33:45.467394683 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/183-cfg.dot	2023-06-07 19:33:52.047393982 +0330
@@ -1,35 +1,68 @@
-digraph "CallStaticDoubleMethodA" {  
-"9879" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1816</SUB>> ]
-"9898" [label = <(soa,soa(env))<SUB>1817</SUB>> ]
-"9900" [label = <(RETURN,return InvokeWithJValues(soa, nullptr, mid, args).GetD();,return InvokeWithJValues(soa, nullptr, mid, args).GetD();)<SUB>1818</SUB>> ]
-"9901" [label = <(GetD,InvokeWithJValues(soa, nullptr, mid, args).GetD())<SUB>1818</SUB>> ]
-"9902" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, nullptr, mid, args).GetD)<SUB>1818</SUB>> ]
-"9883" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1816</SUB>> ]
-"9903" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1818</SUB>> ]
-"9908" [label = <(FIELD_IDENTIFIER,GetD,GetD)<SUB>1818</SUB>> ]
-"9884" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1816</SUB>> ]
-"9888" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1816</SUB>> ]
-"9895" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1816</SUB>> ]
-"9889" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1816</SUB>> ]
-"9890" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1816</SUB>> ]
-"9892" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1816</SUB>> ]
-"9873" [label = <(METHOD,CallStaticDoubleMethodA)<SUB>1815</SUB>> ]
-"9909" [label = <(METHOD_RETURN,jdouble)<SUB>1815</SUB>> ]
-  "9879" -> "9884" 
-  "9879" -> "9898" 
-  "9898" -> "9903" 
-  "9900" -> "9909" 
-  "9901" -> "9900" 
-  "9902" -> "9901" 
-  "9883" -> "9890" 
-  "9883" -> "9898" 
-  "9903" -> "9908" 
-  "9908" -> "9902" 
+digraph "NewString" {  
+"9865" [label = <(soa,soa(env))<SUB>1772</SUB>> ]
+"9868" [label = <(&lt;operator&gt;.assignment,* result = mirror::String::AllocFromUtf16(soa.Self(), char_count, chars))<SUB>1773</SUB>> ]
+"9882" [label = <(RETURN,return soa.AddLocalReference&lt;jstring&gt;(result);,return soa.AddLocalReference&lt;jstring&gt;(result);)<SUB>1774</SUB>> ]
+"9830" [label = <(UNLIKELY,UNLIKELY(char_count &lt; 0))<SUB>1764</SUB>> ]
+"9846" [label = <(UNLIKELY,UNLIKELY(chars == nullptr &amp;&amp; char_count &gt; 0))<SUB>1768</SUB>> ]
+"9870" [label = <(mirror::String::AllocFromUtf16,mirror::String::AllocFromUtf16(soa.Self(), char_count, chars))<SUB>1773</SUB>> ]
+"9883" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jstring&gt;(result))<SUB>1774</SUB>> ]
+"9831" [label = <(&lt;operator&gt;.lessThan,char_count &lt; 0)<SUB>1764</SUB>> ]
+"9835" [label = <(JniAbortF,JavaVmExtFromEnv(env)-&gt;JniAbortF(&quot;NewString&quot;, &quot;char_count &lt; 0: %d&quot;, char_count))<SUB>1765</SUB>> ]
+"9843" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>1766</SUB>> ]
+"9847" [label = <(&lt;operator&gt;.logicalAnd,chars == nullptr &amp;&amp; char_count &gt; 0)<SUB>1768</SUB>> ]
+"9855" [label = <(JniAbortF,JavaVmExtFromEnv(env)-&gt;JniAbortF(&quot;NewString&quot;, &quot;chars == null &amp;&amp; char_count &gt; 0&quot;))<SUB>1769</SUB>> ]
+"9862" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>1770</SUB>> ]
+"9871" [label = <(&lt;operator&gt;.fieldAccess,mirror::String::AllocFromUtf16)<SUB>1773</SUB>> ]
+"9876" [label = <(Self,soa.Self())<SUB>1773</SUB>> ]
+"9884" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jstring)<SUB>1774</SUB>> ]
+"9836" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1765</SUB>> ]
+"9848" [label = <(&lt;operator&gt;.equals,chars == nullptr)<SUB>1768</SUB>> ]
+"9851" [label = <(&lt;operator&gt;.greaterThan,char_count &gt; 0)<SUB>1768</SUB>> ]
+"9856" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1769</SUB>> ]
+"9872" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1773</SUB>> ]
+"9875" [label = <(FIELD_IDENTIFIER,AllocFromUtf16,AllocFromUtf16)<SUB>1773</SUB>> ]
+"9877" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>1773</SUB>> ]
+"9885" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1774</SUB>> ]
+"9837" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1765</SUB>> ]
+"9839" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1765</SUB>> ]
+"9857" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1769</SUB>> ]
+"9859" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1769</SUB>> ]
+"9879" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>1773</SUB>> ]
+"9887" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1774</SUB>> ]
+"9824" [label = <(METHOD,NewString)<SUB>1763</SUB>> ]
+"9890" [label = <(METHOD_RETURN,jstring)<SUB>1763</SUB>> ]
+  "9865" -> "9872" 
+  "9868" -> "9887" 
+  "9882" -> "9890" 
+  "9830" -> "9837" 
+  "9830" -> "9848" 
+  "9846" -> "9857" 
+  "9846" -> "9865" 
+  "9870" -> "9868" 
+  "9883" -> "9882" 
+  "9831" -> "9830" 
+  "9835" -> "9843" 
+  "9843" -> "9890" 
+  "9847" -> "9846" 
+  "9855" -> "9862" 
+  "9862" -> "9890" 
+  "9871" -> "9879" 
+  "9876" -> "9870" 
   "9884" -> "9883" 
-  "9888" -> "9895" 
-  "9895" -> "9909" 
-  "9889" -> "9888" 
-  "9890" -> "9892" 
-  "9892" -> "9889" 
-  "9873" -> "9879" 
+  "9836" -> "9835" 
+  "9848" -> "9847" 
+  "9848" -> "9851" 
+  "9851" -> "9847" 
+  "9856" -> "9855" 
+  "9872" -> "9875" 
+  "9875" -> "9871" 
+  "9877" -> "9876" 
+  "9885" -> "9884" 
+  "9837" -> "9839" 
+  "9839" -> "9836" 
+  "9857" -> "9859" 
+  "9859" -> "9856" 
+  "9879" -> "9877" 
+  "9887" -> "9885" 
+  "9824" -> "9831" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/184-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/184-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/184-cfg.dot	2023-06-07 19:33:45.467394683 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/184-cfg.dot	2023-06-07 19:33:52.047393982 +0330
@@ -1,33 +1,38 @@
-digraph "CallStaticVoidMethod" {  
-"9917" [label = <(va_start,va_start(ap, mid))<SUB>1823</SUB>> ]
-"9921" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1824</SUB>> ]
-"9924" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1825</SUB>> ]
-"9942" [label = <(soa,soa(env))<SUB>1826</SUB>> ]
-"9944" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1827</SUB>> ]
-"9922" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1824</SUB>> ]
-"9928" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1825</SUB>> ]
-"9929" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1825</SUB>> ]
-"9933" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1825</SUB>> ]
-"9940" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1825</SUB>> ]
-"9934" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1825</SUB>> ]
-"9935" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1825</SUB>> ]
-"9937" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1825</SUB>> ]
-"9911" [label = <(METHOD,CallStaticVoidMethod)<SUB>1821</SUB>> ]
-"9949" [label = <(METHOD_RETURN,void)<SUB>1821</SUB>> ]
-  "9917" -> "9922" 
-  "9921" -> "9924" 
-  "9924" -> "9929" 
-  "9924" -> "9942" 
-  "9942" -> "9944" 
-  "9944" -> "9949" 
+digraph "NewStringUTF" {  
+"9904" [label = <(soa,soa(env))<SUB>1781</SUB>> ]
+"9907" [label = <(&lt;operator&gt;.assignment,* result = mirror::String::AllocFromModifiedUtf8(soa.Self(), utf))<SUB>1782</SUB>> ]
+"9920" [label = <(RETURN,return soa.AddLocalReference&lt;jstring&gt;(result);,return soa.AddLocalReference&lt;jstring&gt;(result);)<SUB>1783</SUB>> ]
+"9897" [label = <(&lt;operator&gt;.equals,utf == nullptr)<SUB>1778</SUB>> ]
+"9909" [label = <(mirror::String::AllocFromModifiedUtf8,mirror::String::AllocFromModifiedUtf8(soa.Self(), utf))<SUB>1782</SUB>> ]
+"9921" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jstring&gt;(result))<SUB>1783</SUB>> ]
+"9901" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>1779</SUB>> ]
+"9910" [label = <(&lt;operator&gt;.fieldAccess,mirror::String::AllocFromModifiedUtf8)<SUB>1782</SUB>> ]
+"9915" [label = <(Self,soa.Self())<SUB>1782</SUB>> ]
+"9922" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jstring)<SUB>1783</SUB>> ]
+"9911" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1782</SUB>> ]
+"9914" [label = <(FIELD_IDENTIFIER,AllocFromModifiedUtf8,AllocFromModifiedUtf8)<SUB>1782</SUB>> ]
+"9916" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>1782</SUB>> ]
+"9923" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1783</SUB>> ]
+"9918" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>1782</SUB>> ]
+"9925" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1783</SUB>> ]
+"9892" [label = <(METHOD,NewStringUTF)<SUB>1777</SUB>> ]
+"9928" [label = <(METHOD_RETURN,jstring)<SUB>1777</SUB>> ]
+  "9904" -> "9911" 
+  "9907" -> "9925" 
+  "9920" -> "9928" 
+  "9897" -> "9901" 
+  "9897" -> "9904" 
+  "9909" -> "9907" 
+  "9921" -> "9920" 
+  "9901" -> "9928" 
+  "9910" -> "9918" 
+  "9915" -> "9909" 
   "9922" -> "9921" 
-  "9928" -> "9935" 
-  "9928" -> "9942" 
-  "9929" -> "9928" 
-  "9933" -> "9940" 
-  "9940" -> "9949" 
-  "9934" -> "9933" 
-  "9935" -> "9937" 
-  "9937" -> "9934" 
-  "9911" -> "9917" 
+  "9911" -> "9914" 
+  "9914" -> "9910" 
+  "9916" -> "9915" 
+  "9923" -> "9922" 
+  "9918" -> "9916" 
+  "9925" -> "9923" 
+  "9892" -> "9897" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/185-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/185-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/185-cfg.dot	2023-06-07 19:33:45.467394683 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/185-cfg.dot	2023-06-07 19:33:52.047393982 +0330
@@ -1,27 +1,45 @@
-digraph "CallStaticVoidMethodV" {  
-"9957" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1831</SUB>> ]
-"9975" [label = <(soa,soa(env))<SUB>1832</SUB>> ]
-"9977" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1833</SUB>> ]
-"9961" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1831</SUB>> ]
-"9962" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1831</SUB>> ]
-"9966" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1831</SUB>> ]
-"9973" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1831</SUB>> ]
-"9967" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1831</SUB>> ]
-"9968" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1831</SUB>> ]
-"9970" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1831</SUB>> ]
-"9951" [label = <(METHOD,CallStaticVoidMethodV)<SUB>1830</SUB>> ]
-"9982" [label = <(METHOD_RETURN,void)<SUB>1830</SUB>> ]
-  "9957" -> "9962" 
-  "9957" -> "9975" 
-  "9975" -> "9977" 
-  "9977" -> "9982" 
-  "9961" -> "9968" 
-  "9961" -> "9975" 
-  "9962" -> "9961" 
-  "9966" -> "9973" 
-  "9973" -> "9982" 
-  "9967" -> "9966" 
-  "9968" -> "9970" 
-  "9970" -> "9967" 
-  "9951" -> "9957" 
+digraph "GetStringLength" {  
+"9934" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string))<SUB>1787</SUB>> ]
+"9953" [label = <(soa,soa(env))<SUB>1788</SUB>> ]
+"9955" [label = <(RETURN,return soa.Decode&lt;mirror::String&gt;(java_string)-&gt;GetLength();,return soa.Decode&lt;mirror::String&gt;(java_string)-&gt;GetLength();)<SUB>1789</SUB>> ]
+"9956" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::String&gt;(java_string)-&gt;GetLength())<SUB>1789</SUB>> ]
+"9957" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::String)<SUB>1789</SUB>> ]
+"9964" [label = <(GetLength,(java_string)-&gt;GetLength())<SUB>1789</SUB>> ]
+"9938" [label = <(UNLIKELY,UNLIKELY((java_string) == nullptr))<SUB>1787</SUB>> ]
+"9958" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1789</SUB>> ]
+"9961" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1789</SUB>> ]
+"9965" [label = <(&lt;operator&gt;.indirectFieldAccess,(java_string)-&gt;GetLength)<SUB>1789</SUB>> ]
+"9939" [label = <(&lt;operator&gt;.equals,(java_string) == nullptr)<SUB>1787</SUB>> ]
+"9943" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_string == null&quot;))<SUB>1787</SUB>> ]
+"9950" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string))<SUB>1787</SUB>> ]
+"9960" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1789</SUB>> ]
+"9963" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1789</SUB>> ]
+"9967" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>1789</SUB>> ]
+"9944" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1787</SUB>> ]
+"9945" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1787</SUB>> ]
+"9947" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1787</SUB>> ]
+"9930" [label = <(METHOD,GetStringLength)<SUB>1786</SUB>> ]
+"9968" [label = <(METHOD_RETURN,jsize)<SUB>1786</SUB>> ]
+  "9934" -> "9939" 
+  "9934" -> "9953" 
+  "9953" -> "9960" 
+  "9955" -> "9968" 
+  "9956" -> "9955" 
+  "9957" -> "9967" 
+  "9964" -> "9956" 
+  "9938" -> "9945" 
+  "9938" -> "9953" 
+  "9958" -> "9963" 
+  "9961" -> "9957" 
+  "9965" -> "9964" 
+  "9939" -> "9938" 
+  "9943" -> "9950" 
+  "9950" -> "9968" 
+  "9960" -> "9958" 
+  "9963" -> "9961" 
+  "9967" -> "9965" 
+  "9944" -> "9943" 
+  "9945" -> "9947" 
+  "9947" -> "9944" 
+  "9930" -> "9934" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/186-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/186-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/186-cfg.dot	2023-06-07 19:33:45.467394683 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/186-cfg.dot	2023-06-07 19:33:52.047393982 +0330
@@ -1,27 +1,45 @@
-digraph "CallStaticVoidMethodA" {  
-"9990" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1837</SUB>> ]
-"10008" [label = <(soa,soa(env))<SUB>1838</SUB>> ]
-"10010" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1839</SUB>> ]
-"9994" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1837</SUB>> ]
-"9995" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1837</SUB>> ]
-"9999" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1837</SUB>> ]
-"10006" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1837</SUB>> ]
-"10000" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1837</SUB>> ]
-"10001" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1837</SUB>> ]
-"10003" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1837</SUB>> ]
-"9984" [label = <(METHOD,CallStaticVoidMethodA)<SUB>1836</SUB>> ]
-"10015" [label = <(METHOD_RETURN,void)<SUB>1836</SUB>> ]
-  "9990" -> "9995" 
+digraph "GetStringUTFLength" {  
+"9974" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string))<SUB>1793</SUB>> ]
+"9993" [label = <(soa,soa(env))<SUB>1794</SUB>> ]
+"9995" [label = <(RETURN,return soa.Decode&lt;mirror::String&gt;(java_string)-&gt;GetUtfLength();,return soa.Decode&lt;mirror::String&gt;(java_string)-&gt;GetUtfLength();)<SUB>1795</SUB>> ]
+"9996" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::String&gt;(java_string)-&gt;GetUtfLength())<SUB>1795</SUB>> ]
+"9997" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::String)<SUB>1795</SUB>> ]
+"10004" [label = <(GetUtfLength,(java_string)-&gt;GetUtfLength())<SUB>1795</SUB>> ]
+"9978" [label = <(UNLIKELY,UNLIKELY((java_string) == nullptr))<SUB>1793</SUB>> ]
+"9998" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1795</SUB>> ]
+"10001" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1795</SUB>> ]
+"10005" [label = <(&lt;operator&gt;.indirectFieldAccess,(java_string)-&gt;GetUtfLength)<SUB>1795</SUB>> ]
+"9979" [label = <(&lt;operator&gt;.equals,(java_string) == nullptr)<SUB>1793</SUB>> ]
+"9983" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_string == null&quot;))<SUB>1793</SUB>> ]
+"9990" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string))<SUB>1793</SUB>> ]
+"10000" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1795</SUB>> ]
+"10003" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1795</SUB>> ]
+"10007" [label = <(FIELD_IDENTIFIER,GetUtfLength,GetUtfLength)<SUB>1795</SUB>> ]
+"9984" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1793</SUB>> ]
+"9985" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1793</SUB>> ]
+"9987" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1793</SUB>> ]
+"9970" [label = <(METHOD,GetStringUTFLength)<SUB>1792</SUB>> ]
+"10008" [label = <(METHOD_RETURN,jsize)<SUB>1792</SUB>> ]
+  "9974" -> "9979" 
+  "9974" -> "9993" 
+  "9993" -> "10000" 
+  "9995" -> "10008" 
+  "9996" -> "9995" 
+  "9997" -> "10007" 
+  "10004" -> "9996" 
+  "9978" -> "9985" 
+  "9978" -> "9993" 
+  "9998" -> "10003" 
+  "10001" -> "9997" 
+  "10005" -> "10004" 
+  "9979" -> "9978" 
+  "9983" -> "9990" 
   "9990" -> "10008" 
-  "10008" -> "10010" 
-  "10010" -> "10015" 
-  "9994" -> "10001" 
-  "9994" -> "10008" 
-  "9995" -> "9994" 
-  "9999" -> "10006" 
-  "10006" -> "10015" 
-  "10000" -> "9999" 
-  "10001" -> "10003" 
-  "10003" -> "10000" 
-  "9984" -> "9990" 
+  "10000" -> "9998" 
+  "10003" -> "10001" 
+  "10007" -> "10005" 
+  "9984" -> "9983" 
+  "9985" -> "9987" 
+  "9987" -> "9984" 
+  "9970" -> "9974" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/187-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/187-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/187-cfg.dot	2023-06-07 19:33:45.467394683 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/187-cfg.dot	2023-06-07 19:33:52.047393982 +0330
@@ -1,68 +1,149 @@
-digraph "NewString" {  
-"10058" [label = <(soa,soa(env))<SUB>1851</SUB>> ]
-"10061" [label = <(&lt;operator&gt;.assignment,* result = mirror::String::AllocFromUtf16(soa.Self(), char_count, chars))<SUB>1852</SUB>> ]
-"10075" [label = <(RETURN,return soa.AddLocalReference&lt;jstring&gt;(result);,return soa.AddLocalReference&lt;jstring&gt;(result);)<SUB>1853</SUB>> ]
-"10023" [label = <(UNLIKELY,UNLIKELY(char_count &lt; 0))<SUB>1843</SUB>> ]
-"10039" [label = <(UNLIKELY,UNLIKELY(chars == nullptr &amp;&amp; char_count &gt; 0))<SUB>1847</SUB>> ]
-"10063" [label = <(mirror::String::AllocFromUtf16,mirror::String::AllocFromUtf16(soa.Self(), char_count, chars))<SUB>1852</SUB>> ]
-"10076" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jstring&gt;(result))<SUB>1853</SUB>> ]
-"10024" [label = <(&lt;operator&gt;.lessThan,char_count &lt; 0)<SUB>1843</SUB>> ]
-"10028" [label = <(JniAbortF,JavaVmExtFromEnv(env)-&gt;JniAbortF(&quot;NewString&quot;, &quot;char_count &lt; 0: %d&quot;, char_count))<SUB>1844</SUB>> ]
-"10036" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>1845</SUB>> ]
-"10040" [label = <(&lt;operator&gt;.logicalAnd,chars == nullptr &amp;&amp; char_count &gt; 0)<SUB>1847</SUB>> ]
-"10048" [label = <(JniAbortF,JavaVmExtFromEnv(env)-&gt;JniAbortF(&quot;NewString&quot;, &quot;chars == null &amp;&amp; char_count &gt; 0&quot;))<SUB>1848</SUB>> ]
-"10055" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>1849</SUB>> ]
-"10064" [label = <(&lt;operator&gt;.fieldAccess,mirror::String::AllocFromUtf16)<SUB>1852</SUB>> ]
-"10069" [label = <(Self,soa.Self())<SUB>1852</SUB>> ]
-"10077" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jstring)<SUB>1853</SUB>> ]
-"10029" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1844</SUB>> ]
-"10041" [label = <(&lt;operator&gt;.equals,chars == nullptr)<SUB>1847</SUB>> ]
-"10044" [label = <(&lt;operator&gt;.greaterThan,char_count &gt; 0)<SUB>1847</SUB>> ]
-"10049" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1848</SUB>> ]
-"10065" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1852</SUB>> ]
-"10068" [label = <(FIELD_IDENTIFIER,AllocFromUtf16,AllocFromUtf16)<SUB>1852</SUB>> ]
-"10070" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>1852</SUB>> ]
-"10078" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1853</SUB>> ]
-"10030" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1844</SUB>> ]
-"10032" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1844</SUB>> ]
-"10050" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1848</SUB>> ]
-"10052" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1848</SUB>> ]
-"10072" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>1852</SUB>> ]
-"10080" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1853</SUB>> ]
-"10017" [label = <(METHOD,NewString)<SUB>1842</SUB>> ]
-"10083" [label = <(METHOD_RETURN,jstring)<SUB>1842</SUB>> ]
-  "10058" -> "10065" 
-  "10061" -> "10080" 
-  "10075" -> "10083" 
-  "10023" -> "10030" 
-  "10023" -> "10041" 
-  "10039" -> "10050" 
-  "10039" -> "10058" 
-  "10063" -> "10061" 
-  "10076" -> "10075" 
-  "10024" -> "10023" 
-  "10028" -> "10036" 
-  "10036" -> "10083" 
-  "10040" -> "10039" 
-  "10048" -> "10055" 
-  "10055" -> "10083" 
-  "10064" -> "10072" 
-  "10069" -> "10063" 
+digraph "GetStringRegion" {  
+"10017" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string))<SUB>1800</SUB>> ]
+"10035" [label = <(soa,soa(env))<SUB>1801</SUB>> ]
+"10037" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::String&gt; s = soa.Decode&lt;mirror::String&gt;(java_string))<SUB>1802</SUB>> ]
+"10038" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::String&gt; s)<SUB>1802</SUB>> ]
+"10045" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::String&gt;(java_string))<SUB>1802</SUB>> ]
+"10055" [label = <(&lt;operator&gt;.logicalOr,start &lt; 0 || length &lt; 0 || length &gt; s-&gt;GetLength() - start)<SUB>1803</SUB>> ]
+"10039" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::String)<SUB>1802</SUB>> ]
+"10046" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::String)<SUB>1802</SUB>> ]
+"10056" [label = <(&lt;operator&gt;.logicalOr,start &lt; 0 || length &lt; 0)<SUB>1803</SUB>> ]
+"10063" [label = <(&lt;operator&gt;.greaterThan,length &gt; s-&gt;GetLength() - start)<SUB>1803</SUB>> ]
+"10072" [label = <(ThrowSIOOBE,ThrowSIOOBE(soa, start, length, s-&gt;GetLength()))<SUB>1804</SUB>> ]
+"10021" [label = <(UNLIKELY,UNLIKELY((java_string) == nullptr))<SUB>1800</SUB>> ]
+"10041" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1802</SUB>> ]
+"10047" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1802</SUB>> ]
+"10050" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1802</SUB>> ]
+"10057" [label = <(&lt;operator&gt;.lessThan,start &lt; 0)<SUB>1803</SUB>> ]
+"10060" [label = <(&lt;operator&gt;.lessThan,length &lt; 0)<SUB>1803</SUB>> ]
+"10065" [label = <(&lt;operator&gt;.subtraction,s-&gt;GetLength() - start)<SUB>1803</SUB>> ]
+"10076" [label = <(GetLength,s-&gt;GetLength())<SUB>1804</SUB>> ]
+"10082" [label = <(CHECK_NON_NULL_MEMCPY_ARGUMENT,CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf))<SUB>1806</SUB>> ]
+"10022" [label = <(&lt;operator&gt;.equals,(java_string) == nullptr)<SUB>1800</SUB>> ]
+"10026" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_string == null&quot;))<SUB>1800</SUB>> ]
+"10033" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string))<SUB>1800</SUB>> ]
+"10043" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1802</SUB>> ]
+"10049" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1802</SUB>> ]
+"10052" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1802</SUB>> ]
+"10066" [label = <(GetLength,s-&gt;GetLength())<SUB>1803</SUB>> ]
+"10077" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetLength)<SUB>1804</SUB>> ]
+"10105" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>1807</SUB>> ]
+"10027" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1800</SUB>> ]
+"10067" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetLength)<SUB>1803</SUB>> ]
+"10079" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>1804</SUB>> ]
+"10106" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>1807</SUB>> ]
+"10028" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1800</SUB>> ]
+"10030" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1800</SUB>> ]
+"10069" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>1803</SUB>> ]
+"10087" [label = <(UNLIKELY,UNLIKELY((length) != 0 &amp;&amp; (buf) == nullptr))<SUB>1806</SUB>> ]
+"10108" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>1807</SUB>> ]
+"10116" [label = <(&lt;operator&gt;.lessThan,i &lt; length)<SUB>1808</SUB>> ]
+"10119" [label = <(&lt;operator&gt;.preIncrement,++i)<SUB>1808</SUB>> ]
+"10138" [label = <(&lt;operator&gt;.assignment,* chars = static_cast&lt;jchar*&gt;(s-&gt;GetValue()))<SUB>1812</SUB>> ]
+"10146" [label = <(memcpy,memcpy(buf, chars + start, length * sizeof(jchar)))<SUB>1813</SUB>> ]
+"10088" [label = <(&lt;operator&gt;.logicalAnd,(length) != 0 &amp;&amp; (buf) == nullptr)<SUB>1806</SUB>> ]
+"10096" [label = <(CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;buf == null&quot;))<SUB>1806</SUB>> ]
+"10103" [label = <(RETURN,CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf),CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf))<SUB>1806</SUB>> ]
+"10113" [label = <(&lt;operator&gt;.assignment,i = 0)<SUB>1808</SUB>> ]
+"10122" [label = <(&lt;operator&gt;.assignment,buf[i] = static_cast&lt;jchar&gt;(s-&gt;CharAt(start+i)))<SUB>1809</SUB>> ]
+"10140" [label = <(&lt;operator&gt;.cast,static_cast&lt;jchar*&gt;(s-&gt;GetValue()))<SUB>1812</SUB>> ]
+"10148" [label = <(&lt;operator&gt;.addition,chars + start)<SUB>1813</SUB>> ]
+"10151" [label = <(&lt;operator&gt;.multiplication,length * sizeof(jchar))<SUB>1813</SUB>> ]
+"10089" [label = <(&lt;operator&gt;.notEquals,(length) != 0)<SUB>1806</SUB>> ]
+"10092" [label = <(&lt;operator&gt;.equals,(buf) == nullptr)<SUB>1806</SUB>> ]
+"10097" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1806</SUB>> ]
+"10123" [label = <(&lt;operator&gt;.indirectIndexAccess,buf[i])<SUB>1809</SUB>> ]
+"10126" [label = <(&lt;operator&gt;.cast,static_cast&lt;jchar&gt;(s-&gt;CharAt(start+i)))<SUB>1809</SUB>> ]
+"10141" [label = <(UNKNOWN,jchar*,jchar*)<SUB>1812</SUB>> ]
+"10142" [label = <(GetValue,s-&gt;GetValue())<SUB>1812</SUB>> ]
+"10153" [label = <(&lt;operator&gt;.sizeOf,sizeof(jchar))<SUB>1813</SUB>> ]
+"10098" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1806</SUB>> ]
+"10100" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1806</SUB>> ]
+"10127" [label = <(UNKNOWN,jchar,jchar)<SUB>1809</SUB>> ]
+"10128" [label = <(CharAt,s-&gt;CharAt(start+i))<SUB>1809</SUB>> ]
+"10143" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetValue)<SUB>1812</SUB>> ]
+"10129" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;CharAt)<SUB>1809</SUB>> ]
+"10132" [label = <(&lt;operator&gt;.addition,start+i)<SUB>1809</SUB>> ]
+"10145" [label = <(FIELD_IDENTIFIER,GetValue,GetValue)<SUB>1812</SUB>> ]
+"10131" [label = <(FIELD_IDENTIFIER,CharAt,CharAt)<SUB>1809</SUB>> ]
+"10010" [label = <(METHOD,GetStringRegion)<SUB>1798</SUB>> ]
+"10155" [label = <(METHOD_RETURN,void)<SUB>1798</SUB>> ]
+  "10017" -> "10022" 
+  "10017" -> "10035" 
+  "10035" -> "10043" 
+  "10037" -> "10057" 
+  "10038" -> "10049" 
+  "10045" -> "10037" 
+  "10055" -> "10079" 
+  "10055" -> "10082" 
+  "10039" -> "10038" 
+  "10046" -> "10045" 
+  "10056" -> "10055" 
+  "10056" -> "10069" 
+  "10063" -> "10055" 
+  "10072" -> "10155" 
+  "10021" -> "10028" 
+  "10021" -> "10035" 
+  "10041" -> "10039" 
+  "10047" -> "10052" 
+  "10050" -> "10046" 
+  "10057" -> "10056" 
+  "10057" -> "10060" 
+  "10060" -> "10056" 
+  "10065" -> "10063" 
+  "10076" -> "10072" 
+  "10082" -> "10089" 
+  "10082" -> "10108" 
+  "10022" -> "10021" 
+  "10026" -> "10033" 
+  "10033" -> "10155" 
+  "10043" -> "10041" 
+  "10049" -> "10047" 
+  "10052" -> "10050" 
+  "10066" -> "10065" 
   "10077" -> "10076" 
-  "10029" -> "10028" 
-  "10041" -> "10040" 
-  "10041" -> "10044" 
-  "10044" -> "10040" 
-  "10049" -> "10048" 
-  "10065" -> "10068" 
-  "10068" -> "10064" 
-  "10070" -> "10069" 
-  "10078" -> "10077" 
-  "10030" -> "10032" 
-  "10032" -> "10029" 
-  "10050" -> "10052" 
-  "10052" -> "10049" 
-  "10072" -> "10070" 
-  "10080" -> "10078" 
-  "10017" -> "10024" 
+  "10105" -> "10113" 
+  "10105" -> "10141" 
+  "10027" -> "10026" 
+  "10067" -> "10066" 
+  "10079" -> "10077" 
+  "10106" -> "10105" 
+  "10028" -> "10030" 
+  "10030" -> "10027" 
+  "10069" -> "10067" 
+  "10087" -> "10098" 
+  "10087" -> "10108" 
+  "10108" -> "10106" 
+  "10116" -> "10155" 
+  "10116" -> "10123" 
+  "10119" -> "10116" 
+  "10138" -> "10148" 
+  "10146" -> "10155" 
+  "10088" -> "10087" 
+  "10096" -> "10103" 
+  "10103" -> "10155" 
+  "10113" -> "10116" 
+  "10122" -> "10119" 
+  "10140" -> "10138" 
+  "10148" -> "10153" 
+  "10151" -> "10146" 
+  "10089" -> "10088" 
+  "10089" -> "10092" 
+  "10092" -> "10088" 
+  "10097" -> "10096" 
+  "10123" -> "10127" 
+  "10126" -> "10122" 
+  "10141" -> "10145" 
+  "10142" -> "10140" 
+  "10153" -> "10151" 
+  "10098" -> "10100" 
+  "10100" -> "10097" 
+  "10127" -> "10131" 
+  "10128" -> "10126" 
+  "10143" -> "10142" 
+  "10129" -> "10132" 
+  "10132" -> "10128" 
+  "10145" -> "10143" 
+  "10131" -> "10129" 
+  "10010" -> "10017" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/188-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/188-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/188-cfg.dot	2023-06-07 19:33:45.467394683 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/188-cfg.dot	2023-06-07 19:33:52.047393982 +0330
@@ -1,222 +1,143 @@
-digraph "NewStringUTF" {  
-"10097" [label = <(&lt;operator&gt;.assignment,utf8_length = strlen(utf))<SUB>1865</SUB>> ]
-"10147" [label = <(&lt;operator&gt;.assignment,replacement_utf_pos = 0u)<SUB>1877</SUB>> ]
-"10151" [label = <(UNKNOWN,t,t)<SUB>1878</SUB>> ]
-"10152" [label = <(UNKNOWN,utf16_length = VisitModifiedUtf8Chars(\012        utf,\012        utf8_length,\012 /*good=*/ [](const char* ptr ATTRIBUTE_UNUSED, size_t length ATTRIBUTE_UNUSED) {},utf16_length = VisitModifiedUtf8Chars(\012        utf,\012        utf8_length,\012 /*good=*/ [](const char* ptr ATTRIBUTE_UNUSED, size_t length ATTRIBUTE_UNUSED) {})<SUB>1878</SUB>> ]
-"10153" [label = <(UNKNOWN,,\012 /*bad=*/ []() { return true; },,\012 /*bad=*/ []() { return true; })<SUB>1881</SUB>> ]
-"10154" [label = <(UNKNOWN,);,);)<SUB>1882</SUB>> ]
-"10243" [label = <(DCHECK_LE,DCHECK_LE(utf16_length, utf8_length))<SUB>1917</SUB>> ]
-"10246" [label = <(DCHECK_LE,DCHECK_LE(utf8_length, static_cast&lt;uint32_t&gt;(std::numeric_limits&lt;int32_t&gt;::max())))<SUB>1918</SUB>> ]
-"10261" [label = <(soa,soa(env))<SUB>1920</SUB>> ]
-"10264" [label = <(&lt;operator&gt;.assignment,* result =\012        mirror::String::AllocFromModifiedUtf8(soa.Self(), utf16_length, utf, utf8_length))<SUB>1921</SUB>> ]
-"10279" [label = <(RETURN,return soa.AddLocalReference&lt;jstring&gt;(result);,return soa.AddLocalReference&lt;jstring&gt;(result);)<SUB>1923</SUB>> ]
-"10090" [label = <(&lt;operator&gt;.equals,utf == nullptr)<SUB>1857</SUB>> ]
-"10099" [label = <(strlen,strlen(utf))<SUB>1865</SUB>> ]
-"10102" [label = <(UNLIKELY,UNLIKELY(utf8_length &gt; static_cast&lt;uint32_t&gt;(std::numeric_limits&lt;int32_t&gt;::max())))<SUB>1866</SUB>> ]
-"10156" [label = <(UNLIKELY,UNLIKELY(utf8_length != 0u &amp;&amp; utf16_length == 0u))<SUB>1883</SUB>> ]
-"10248" [label = <(&lt;operator&gt;.cast,static_cast&lt;uint32_t&gt;(std::numeric_limits&lt;int32_t&gt;::max()))<SUB>1918</SUB>> ]
-"10266" [label = <(mirror::String::AllocFromModifiedUtf8,mirror::String::AllocFromModifiedUtf8(soa.Self(), utf16_length, utf, utf8_length))<SUB>1922</SUB>> ]
-"10280" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jstring&gt;(result))<SUB>1923</SUB>> ]
-"10094" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>1858</SUB>> ]
-"10103" [label = <(&lt;operator&gt;.greaterThan,utf8_length &gt; static_cast&lt;uint32_t&gt;(std::numeric_limits&lt;int32_t&gt;::max()))<SUB>1866</SUB>> ]
-"10119" [label = <(&lt;operator&gt;.assignment,error =\012          android::base::StringPrintf(&quot;NewStringUTF input is 2 GiB or more: %zu&quot;, utf8_length))<SUB>1870</SUB>> ]
-"10130" [label = <(soa,soa(env))<SUB>1872</SUB>> ]
-"10132" [label = <(ThrowOutOfMemoryError,soa.Self()-&gt;ThrowOutOfMemoryError(error.c_str()))<SUB>1873</SUB>> ]
-"10143" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>1874</SUB>> ]
-"10157" [label = <(&lt;operator&gt;.logicalAnd,utf8_length != 0u &amp;&amp; utf16_length == 0u)<SUB>1883</SUB>> ]
-"10166" [label = <(&lt;operator&gt;.assignment,kMinDelay = UINT64_C(10000000000))<SUB>1886</SUB>> ]
-"10171" [label = <(prev_bad_input_time,prev_bad_input_time(UINT64_C(0)))<SUB>1887</SUB>> ]
-"10175" [label = <(&lt;operator&gt;.assignment,prev_time = prev_bad_input_time.load(std::memory_order_relaxed))<SUB>1888</SUB>> ]
-"10185" [label = <(&lt;operator&gt;.assignment,now = NanoTime())<SUB>1889</SUB>> ]
-"10213" [label = <(reset,replacement_utf.reset(new char[utf8_length + 1u]))<SUB>1895</SUB>> ]
-"10219" [label = <(&lt;operator&gt;.assignment,utf16_length = VisitModifiedUtf8Chars(\012          utf,\012          utf8_length,\012 /*good=*/ [&amp;](const char* ptr, size_t length) {\012            DCHECK_GE(utf8_length - replacement_utf_pos, length);\012            memcpy(&amp;replacement_utf[replacement_utf_pos], ptr, length);\012            replacement_utf_pos += length;\012 },\012 /*bad=*/ [&amp;]() {\012            DCHECK_GE(utf8_length - replacement_utf_pos, sizeof(kBadUtf8ReplacementChar) - 1u);\012            memcpy(&amp;replacement_utf[replacement_utf_pos],\012                   kBadUtf8ReplacementChar,\012 sizeof(kBadUtf8ReplacementChar) - 1u);\012            replacement_utf_pos += sizeof(kBadUtf8ReplacementChar) - 1u;\012 return false; // Continue processing.\012 }))<SUB>1896</SUB>> ]
-"10226" [label = <(DCHECK_LE,DCHECK_LE(replacement_utf_pos, utf8_length))<SUB>1912</SUB>> ]
-"10229" [label = <(&lt;operator&gt;.assignment,replacement_utf[replacement_utf_pos] = 0)<SUB>1913</SUB>> ]
-"10234" [label = <(&lt;operator&gt;.assignment,utf = replacement_utf.get())<SUB>1914</SUB>> ]
-"10240" [label = <(&lt;operator&gt;.assignment,utf8_length = replacement_utf_pos)<SUB>1915</SUB>> ]
-"10249" [label = <(UNKNOWN,uint32_t,uint32_t)<SUB>1918</SUB>> ]
-"10250" [label = <(&lt;operator&gt;.greaterThan,std::numeric_limits&lt;int32_t&gt;::max())<SUB>1918</SUB>> ]
-"10267" [label = <(&lt;operator&gt;.fieldAccess,mirror::String::AllocFromModifiedUtf8)<SUB>1922</SUB>> ]
-"10272" [label = <(Self,soa.Self())<SUB>1922</SUB>> ]
-"10281" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jstring)<SUB>1923</SUB>> ]
-"10105" [label = <(&lt;operator&gt;.cast,static_cast&lt;uint32_t&gt;(std::numeric_limits&lt;int32_t&gt;::max()))<SUB>1866</SUB>> ]
-"10121" [label = <(android::base::StringPrintf,android::base::StringPrintf(&quot;NewStringUTF input is 2 GiB or more: %zu&quot;, utf8_length))<SUB>1871</SUB>> ]
-"10133" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;ThrowOutOfMemoryError)<SUB>1873</SUB>> ]
-"10139" [label = <(c_str,error.c_str())<SUB>1873</SUB>> ]
-"10158" [label = <(&lt;operator&gt;.notEquals,utf8_length != 0u)<SUB>1883</SUB>> ]
-"10161" [label = <(&lt;operator&gt;.equals,utf16_length == 0u)<SUB>1883</SUB>> ]
-"10168" [label = <(UINT64_C,UINT64_C(10000000000))<SUB>1886</SUB>> ]
-"10172" [label = <(UINT64_C,UINT64_C(0))<SUB>1887</SUB>> ]
-"10177" [label = <(load,prev_bad_input_time.load(std::memory_order_relaxed))<SUB>1888</SUB>> ]
-"10187" [label = <(NanoTime,NanoTime())<SUB>1889</SUB>> ]
-"10189" [label = <(&lt;operator&gt;.logicalAnd,(prev_time == 0u || now - prev_time &gt;= kMinDelay) &amp;&amp;\012          prev_bad_input_time.compare_exchange_strong(prev_time, now, std::memory_order_relaxed))<SUB>1890</SUB>> ]
-"10214" [label = <(&lt;operator&gt;.fieldAccess,replacement_utf.reset)<SUB>1895</SUB>> ]
-"10217" [label = <(&lt;operator&gt;.new,new char[utf8_length + 1u])<SUB>1895</SUB>> ]
-"10221" [label = <(VisitModifiedUtf8Chars,VisitModifiedUtf8Chars(\012          utf,\012          utf8_length,\012 /*good=*/ [&amp;](const char* ptr, size_t length) {\012            DCHECK_GE(utf8_length - replacement_utf_pos, length);\012            memcpy(&amp;replacement_utf[replacement_utf_pos], ptr, length);\012            replacement_utf_pos += length;\012 },\012 /*bad=*/ [&amp;]() {\012            DCHECK_GE(utf8_length - replacement_utf_pos, sizeof(kBadUtf8ReplacementChar) - 1u);\012            memcpy(&amp;replacement_utf[replacement_utf_pos],\012                   kBadUtf8ReplacementChar,\012 sizeof(kBadUtf8ReplacementChar) - 1u);\012            replacement_utf_pos += sizeof(kBadUtf8ReplacementChar) - 1u;\012 return false; // Continue processing.\012 }))<SUB>1896</SUB>> ]
-"10230" [label = <(&lt;operator&gt;.indirectIndexAccess,replacement_utf[replacement_utf_pos])<SUB>1913</SUB>> ]
-"10236" [label = <(get,replacement_utf.get())<SUB>1914</SUB>> ]
-"10251" [label = <(&lt;operator&gt;.lessThan,std::numeric_limits&lt;int32_t)<SUB>1918</SUB>> ]
-"10256" [label = <(::max,::max())<SUB>1918</SUB>> ]
-"10268" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1922</SUB>> ]
-"10271" [label = <(FIELD_IDENTIFIER,AllocFromModifiedUtf8,AllocFromModifiedUtf8)<SUB>1922</SUB>> ]
-"10273" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>1922</SUB>> ]
-"10282" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1923</SUB>> ]
-"10106" [label = <(UNKNOWN,uint32_t,uint32_t)<SUB>1866</SUB>> ]
-"10107" [label = <(&lt;operator&gt;.greaterThan,std::numeric_limits&lt;int32_t&gt;::max())<SUB>1866</SUB>> ]
-"10122" [label = <(&lt;operator&gt;.fieldAccess,android::base::StringPrintf)<SUB>1871</SUB>> ]
-"10134" [label = <(Self,soa.Self())<SUB>1873</SUB>> ]
-"10138" [label = <(FIELD_IDENTIFIER,ThrowOutOfMemoryError,ThrowOutOfMemoryError)<SUB>1873</SUB>> ]
-"10140" [label = <(&lt;operator&gt;.fieldAccess,error.c_str)<SUB>1873</SUB>> ]
-"10178" [label = <(&lt;operator&gt;.fieldAccess,prev_bad_input_time.load)<SUB>1888</SUB>> ]
-"10181" [label = <(&lt;operator&gt;.fieldAccess,std::memory_order_relaxed)<SUB>1888</SUB>> ]
-"10190" [label = <(&lt;operator&gt;.logicalOr,prev_time == 0u || now - prev_time &gt;= kMinDelay)<SUB>1890</SUB>> ]
-"10199" [label = <(compare_exchange_strong,prev_bad_input_time.compare_exchange_strong(prev_time, now, std::memory_order_relaxed))<SUB>1891</SUB>> ]
-"10209" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR) &lt;&lt; &quot;Invalid UTF-8 input to JNI::NewStringUTF()&quot;)<SUB>1892</SUB>> ]
-"10216" [label = <(FIELD_IDENTIFIER,reset,reset)<SUB>1895</SUB>> ]
-"10224" [label = <(METHOD_REF,ANY anonymous_lambda_9 (const char* ptr,size_t length),VisitModifiedUtf8Chars(\012          utf,\012          utf8_length,\012 /*good=*/ [&amp;](const char* ptr, size_t length) {\012            DCHECK_GE(utf8_length - replacement_utf_pos, length);\012            memcpy(&amp;replacement_utf[replacement_utf_pos], ptr, length);\012            replacement_utf_pos += length;\012 },\012 /*bad=*/ [&amp;]() {\012            DCHECK_GE(utf8_length - replacement_utf_pos, sizeof(kBadUtf8ReplacementChar) - 1u);\012            memcpy(&amp;replacement_utf[replacement_utf_pos],\012                   kBadUtf8ReplacementChar,\012 sizeof(kBadUtf8ReplacementChar) - 1u);\012            replacement_utf_pos += sizeof(kBadUtf8ReplacementChar) - 1u;\012 return false; // Continue processing.\012 }))<SUB>1899</SUB>> ]
-"10225" [label = <(METHOD_REF,ANY anonymous_lambda_10 (),VisitModifiedUtf8Chars(\012          utf,\012          utf8_length,\012 /*good=*/ [&amp;](const char* ptr, size_t length) {\012            DCHECK_GE(utf8_length - replacement_utf_pos, length);\012            memcpy(&amp;replacement_utf[replacement_utf_pos], ptr, length);\012            replacement_utf_pos += length;\012 },\012 /*bad=*/ [&amp;]() {\012            DCHECK_GE(utf8_length - replacement_utf_pos, sizeof(kBadUtf8ReplacementChar) - 1u);\012            memcpy(&amp;replacement_utf[replacement_utf_pos],\012                   kBadUtf8ReplacementChar,\012 sizeof(kBadUtf8ReplacementChar) - 1u);\012            replacement_utf_pos += sizeof(kBadUtf8ReplacementChar) - 1u;\012 return false; // Continue processing.\012 }))<SUB>1904</SUB>> ]
-"10237" [label = <(&lt;operator&gt;.fieldAccess,replacement_utf.get)<SUB>1914</SUB>> ]
-"10252" [label = <(&lt;operator&gt;.fieldAccess,std::numeric_limits)<SUB>1918</SUB>> ]
-"10257" [label = <(&lt;operator&gt;.fieldAccess,::max)<SUB>1918</SUB>> ]
-"10275" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>1922</SUB>> ]
-"10284" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1923</SUB>> ]
-"10108" [label = <(&lt;operator&gt;.lessThan,std::numeric_limits&lt;int32_t)<SUB>1866</SUB>> ]
-"10113" [label = <(::max,::max())<SUB>1866</SUB>> ]
-"10123" [label = <(&lt;operator&gt;.fieldAccess,android::base)<SUB>1871</SUB>> ]
-"10126" [label = <(FIELD_IDENTIFIER,StringPrintf,StringPrintf)<SUB>1871</SUB>> ]
-"10135" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>1873</SUB>> ]
-"10142" [label = <(FIELD_IDENTIFIER,c_str,c_str)<SUB>1873</SUB>> ]
-"10180" [label = <(FIELD_IDENTIFIER,load,load)<SUB>1888</SUB>> ]
-"10183" [label = <(FIELD_IDENTIFIER,memory_order_relaxed,memory_order_relaxed)<SUB>1888</SUB>> ]
-"10191" [label = <(&lt;operator&gt;.equals,prev_time == 0u)<SUB>1890</SUB>> ]
-"10194" [label = <(&lt;operator&gt;.greaterEqualsThan,now - prev_time &gt;= kMinDelay)<SUB>1890</SUB>> ]
-"10200" [label = <(&lt;operator&gt;.fieldAccess,prev_bad_input_time.compare_exchange_strong)<SUB>1891</SUB>> ]
-"10205" [label = <(&lt;operator&gt;.fieldAccess,std::memory_order_relaxed)<SUB>1891</SUB>> ]
-"10210" [label = <(LOG,LOG(ERROR))<SUB>1892</SUB>> ]
-"10239" [label = <(FIELD_IDENTIFIER,get,get)<SUB>1914</SUB>> ]
-"10254" [label = <(FIELD_IDENTIFIER,numeric_limits,numeric_limits)<SUB>1918</SUB>> ]
-"10259" [label = <(FIELD_IDENTIFIER,max,max)<SUB>1918</SUB>> ]
-"10109" [label = <(&lt;operator&gt;.fieldAccess,std::numeric_limits)<SUB>1866</SUB>> ]
-"10114" [label = <(&lt;operator&gt;.fieldAccess,::max)<SUB>1866</SUB>> ]
-"10137" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>1873</SUB>> ]
-"10195" [label = <(&lt;operator&gt;.subtraction,now - prev_time)<SUB>1890</SUB>> ]
-"10202" [label = <(FIELD_IDENTIFIER,compare_exchange_strong,compare_exchange_strong)<SUB>1891</SUB>> ]
-"10207" [label = <(FIELD_IDENTIFIER,memory_order_relaxed,memory_order_relaxed)<SUB>1891</SUB>> ]
-"10111" [label = <(FIELD_IDENTIFIER,numeric_limits,numeric_limits)<SUB>1866</SUB>> ]
-"10116" [label = <(FIELD_IDENTIFIER,max,max)<SUB>1866</SUB>> ]
-"10085" [label = <(METHOD,NewStringUTF)<SUB>1856</SUB>> ]
-"10287" [label = <(METHOD_RETURN,jstring)<SUB>1856</SUB>> ]
-  "10097" -> "10106" 
-  "10147" -> "10151" 
-  "10151" -> "10152" 
-  "10152" -> "10153" 
-  "10153" -> "10154" 
-  "10154" -> "10158" 
-  "10243" -> "10249" 
-  "10246" -> "10261" 
-  "10261" -> "10268" 
-  "10264" -> "10284" 
-  "10279" -> "10287" 
-  "10090" -> "10094" 
-  "10090" -> "10099" 
-  "10099" -> "10097" 
-  "10102" -> "10123" 
-  "10102" -> "10147" 
-  "10156" -> "10168" 
-  "10156" -> "10243" 
-  "10248" -> "10246" 
-  "10266" -> "10264" 
-  "10280" -> "10279" 
-  "10094" -> "10287" 
-  "10103" -> "10102" 
-  "10119" -> "10130" 
-  "10130" -> "10137" 
-  "10132" -> "10143" 
-  "10143" -> "10287" 
-  "10157" -> "10156" 
-  "10166" -> "10172" 
-  "10171" -> "10180" 
-  "10175" -> "10187" 
-  "10185" -> "10191" 
-  "10213" -> "10224" 
-  "10219" -> "10226" 
-  "10226" -> "10230" 
-  "10229" -> "10239" 
-  "10234" -> "10240" 
-  "10240" -> "10243" 
-  "10249" -> "10254" 
-  "10250" -> "10248" 
-  "10267" -> "10275" 
-  "10272" -> "10266" 
-  "10281" -> "10280" 
-  "10105" -> "10103" 
-  "10121" -> "10119" 
-  "10133" -> "10142" 
-  "10139" -> "10132" 
-  "10158" -> "10157" 
-  "10158" -> "10161" 
-  "10161" -> "10157" 
-  "10168" -> "10166" 
-  "10172" -> "10171" 
-  "10177" -> "10175" 
-  "10187" -> "10185" 
-  "10189" -> "10210" 
-  "10189" -> "10216" 
-  "10214" -> "10217" 
-  "10217" -> "10213" 
-  "10221" -> "10219" 
-  "10230" -> "10229" 
-  "10236" -> "10234" 
-  "10251" -> "10259" 
-  "10256" -> "10250" 
-  "10268" -> "10271" 
-  "10271" -> "10267" 
-  "10273" -> "10272" 
-  "10282" -> "10281" 
-  "10106" -> "10111" 
-  "10107" -> "10105" 
-  "10122" -> "10121" 
-  "10134" -> "10138" 
-  "10138" -> "10133" 
-  "10140" -> "10139" 
-  "10178" -> "10183" 
-  "10181" -> "10177" 
-  "10190" -> "10189" 
-  "10190" -> "10202" 
-  "10199" -> "10189" 
-  "10209" -> "10216" 
+digraph "GetStringUTFRegion" {  
+"10164" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string))<SUB>1820</SUB>> ]
+"10182" [label = <(soa,soa(env))<SUB>1821</SUB>> ]
+"10184" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::String&gt; s = soa.Decode&lt;mirror::String&gt;(java_string))<SUB>1822</SUB>> ]
+"10185" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::String&gt; s)<SUB>1822</SUB>> ]
+"10192" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::String&gt;(java_string))<SUB>1822</SUB>> ]
+"10202" [label = <(&lt;operator&gt;.logicalOr,start &lt; 0 || length &lt; 0 || length &gt; s-&gt;GetLength() - start)<SUB>1823</SUB>> ]
+"10186" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::String)<SUB>1822</SUB>> ]
+"10193" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::String)<SUB>1822</SUB>> ]
+"10203" [label = <(&lt;operator&gt;.logicalOr,start &lt; 0 || length &lt; 0)<SUB>1823</SUB>> ]
+"10210" [label = <(&lt;operator&gt;.greaterThan,length &gt; s-&gt;GetLength() - start)<SUB>1823</SUB>> ]
+"10219" [label = <(ThrowSIOOBE,ThrowSIOOBE(soa, start, length, s-&gt;GetLength()))<SUB>1824</SUB>> ]
+"10168" [label = <(UNLIKELY,UNLIKELY((java_string) == nullptr))<SUB>1820</SUB>> ]
+"10188" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1822</SUB>> ]
+"10194" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1822</SUB>> ]
+"10197" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1822</SUB>> ]
+"10204" [label = <(&lt;operator&gt;.lessThan,start &lt; 0)<SUB>1823</SUB>> ]
+"10207" [label = <(&lt;operator&gt;.lessThan,length &lt; 0)<SUB>1823</SUB>> ]
+"10212" [label = <(&lt;operator&gt;.subtraction,s-&gt;GetLength() - start)<SUB>1823</SUB>> ]
+"10223" [label = <(GetLength,s-&gt;GetLength())<SUB>1824</SUB>> ]
+"10229" [label = <(CHECK_NON_NULL_MEMCPY_ARGUMENT,CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf))<SUB>1826</SUB>> ]
+"10169" [label = <(&lt;operator&gt;.equals,(java_string) == nullptr)<SUB>1820</SUB>> ]
+"10173" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_string == null&quot;))<SUB>1820</SUB>> ]
+"10180" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string))<SUB>1820</SUB>> ]
+"10190" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1822</SUB>> ]
+"10196" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1822</SUB>> ]
+"10199" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1822</SUB>> ]
+"10213" [label = <(GetLength,s-&gt;GetLength())<SUB>1823</SUB>> ]
+"10224" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetLength)<SUB>1824</SUB>> ]
+"10252" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>1827</SUB>> ]
+"10174" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1820</SUB>> ]
+"10214" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetLength)<SUB>1823</SUB>> ]
+"10226" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>1824</SUB>> ]
+"10253" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>1827</SUB>> ]
+"10175" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1820</SUB>> ]
+"10177" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1820</SUB>> ]
+"10216" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>1823</SUB>> ]
+"10234" [label = <(UNLIKELY,UNLIKELY((length) != 0 &amp;&amp; (buf) == nullptr))<SUB>1826</SUB>> ]
+"10255" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>1827</SUB>> ]
+"10263" [label = <(&lt;operator&gt;.lessThan,i &lt; length)<SUB>1828</SUB>> ]
+"10266" [label = <(&lt;operator&gt;.preIncrement,++i)<SUB>1828</SUB>> ]
+"10283" [label = <(&lt;operator&gt;.assignment,* chars = s-&gt;GetValue())<SUB>1832</SUB>> ]
+"10290" [label = <(&lt;operator&gt;.assignment,bytes = CountUtf8Bytes(chars + start, length))<SUB>1833</SUB>> ]
+"10297" [label = <(ConvertUtf16ToModifiedUtf8,ConvertUtf16ToModifiedUtf8(buf, bytes, chars + start, length))<SUB>1834</SUB>> ]
+"10235" [label = <(&lt;operator&gt;.logicalAnd,(length) != 0 &amp;&amp; (buf) == nullptr)<SUB>1826</SUB>> ]
+"10243" [label = <(CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;buf == null&quot;))<SUB>1826</SUB>> ]
+"10250" [label = <(RETURN,CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf),CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf))<SUB>1826</SUB>> ]
+"10260" [label = <(&lt;operator&gt;.assignment,i = 0)<SUB>1828</SUB>> ]
+"10269" [label = <(&lt;operator&gt;.assignment,buf[i] = s-&gt;CharAt(start+i))<SUB>1829</SUB>> ]
+"10285" [label = <(GetValue,s-&gt;GetValue())<SUB>1832</SUB>> ]
+"10292" [label = <(CountUtf8Bytes,CountUtf8Bytes(chars + start, length))<SUB>1833</SUB>> ]
+"10300" [label = <(&lt;operator&gt;.addition,chars + start)<SUB>1834</SUB>> ]
+"10236" [label = <(&lt;operator&gt;.notEquals,(length) != 0)<SUB>1826</SUB>> ]
+"10239" [label = <(&lt;operator&gt;.equals,(buf) == nullptr)<SUB>1826</SUB>> ]
+"10244" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1826</SUB>> ]
+"10270" [label = <(&lt;operator&gt;.indirectIndexAccess,buf[i])<SUB>1829</SUB>> ]
+"10273" [label = <(CharAt,s-&gt;CharAt(start+i))<SUB>1829</SUB>> ]
+"10286" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetValue)<SUB>1832</SUB>> ]
+"10293" [label = <(&lt;operator&gt;.addition,chars + start)<SUB>1833</SUB>> ]
+"10245" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1826</SUB>> ]
+"10247" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1826</SUB>> ]
+"10274" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;CharAt)<SUB>1829</SUB>> ]
+"10277" [label = <(&lt;operator&gt;.addition,start+i)<SUB>1829</SUB>> ]
+"10288" [label = <(FIELD_IDENTIFIER,GetValue,GetValue)<SUB>1832</SUB>> ]
+"10276" [label = <(FIELD_IDENTIFIER,CharAt,CharAt)<SUB>1829</SUB>> ]
+"10157" [label = <(METHOD,GetStringUTFRegion)<SUB>1818</SUB>> ]
+"10304" [label = <(METHOD_RETURN,void)<SUB>1818</SUB>> ]
+  "10164" -> "10169" 
+  "10164" -> "10182" 
+  "10182" -> "10190" 
+  "10184" -> "10204" 
+  "10185" -> "10196" 
+  "10192" -> "10184" 
+  "10202" -> "10226" 
+  "10202" -> "10229" 
+  "10186" -> "10185" 
+  "10193" -> "10192" 
+  "10203" -> "10202" 
+  "10203" -> "10216" 
+  "10210" -> "10202" 
+  "10219" -> "10304" 
+  "10168" -> "10175" 
+  "10168" -> "10182" 
+  "10188" -> "10186" 
+  "10194" -> "10199" 
+  "10197" -> "10193" 
+  "10204" -> "10203" 
+  "10204" -> "10207" 
+  "10207" -> "10203" 
+  "10212" -> "10210" 
+  "10223" -> "10219" 
+  "10229" -> "10236" 
+  "10229" -> "10255" 
+  "10169" -> "10168" 
+  "10173" -> "10180" 
+  "10180" -> "10304" 
+  "10190" -> "10188" 
+  "10196" -> "10194" 
+  "10199" -> "10197" 
+  "10213" -> "10212" 
+  "10224" -> "10223" 
+  "10252" -> "10260" 
+  "10252" -> "10288" 
+  "10174" -> "10173" 
+  "10214" -> "10213" 
+  "10226" -> "10224" 
+  "10253" -> "10252" 
+  "10175" -> "10177" 
+  "10177" -> "10174" 
   "10216" -> "10214" 
-  "10224" -> "10225" 
-  "10225" -> "10221" 
-  "10237" -> "10236" 
-  "10252" -> "10251" 
-  "10257" -> "10256" 
-  "10275" -> "10273" 
-  "10284" -> "10282" 
-  "10108" -> "10116" 
-  "10113" -> "10107" 
-  "10123" -> "10126" 
-  "10126" -> "10122" 
-  "10135" -> "10134" 
-  "10142" -> "10140" 
-  "10180" -> "10178" 
-  "10183" -> "10181" 
-  "10191" -> "10190" 
-  "10191" -> "10195" 
-  "10194" -> "10190" 
-  "10200" -> "10207" 
-  "10205" -> "10199" 
-  "10210" -> "10209" 
-  "10239" -> "10237" 
-  "10254" -> "10252" 
-  "10259" -> "10257" 
-  "10109" -> "10108" 
-  "10114" -> "10113" 
-  "10137" -> "10135" 
-  "10195" -> "10194" 
-  "10202" -> "10200" 
-  "10207" -> "10205" 
-  "10111" -> "10109" 
-  "10116" -> "10114" 
-  "10085" -> "10090" 
+  "10234" -> "10245" 
+  "10234" -> "10255" 
+  "10255" -> "10253" 
+  "10263" -> "10304" 
+  "10263" -> "10270" 
+  "10266" -> "10263" 
+  "10283" -> "10293" 
+  "10290" -> "10300" 
+  "10297" -> "10304" 
+  "10235" -> "10234" 
+  "10243" -> "10250" 
+  "10250" -> "10304" 
+  "10260" -> "10263" 
+  "10269" -> "10266" 
+  "10285" -> "10283" 
+  "10292" -> "10290" 
+  "10300" -> "10297" 
+  "10236" -> "10235" 
+  "10236" -> "10239" 
+  "10239" -> "10235" 
+  "10244" -> "10243" 
+  "10270" -> "10276" 
+  "10273" -> "10269" 
+  "10286" -> "10285" 
+  "10293" -> "10292" 
+  "10245" -> "10247" 
+  "10247" -> "10244" 
+  "10274" -> "10277" 
+  "10277" -> "10273" 
+  "10288" -> "10286" 
+  "10276" -> "10274" 
+  "10157" -> "10164" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/189-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/189-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/189-cfg.dot	2023-06-07 19:33:45.467394683 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/189-cfg.dot	2023-06-07 19:33:52.047393982 +0330
@@ -1,45 +1,159 @@
-digraph "GetStringLength" {  
-"10293" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string))<SUB>1927</SUB>> ]
-"10312" [label = <(soa,soa(env))<SUB>1928</SUB>> ]
-"10314" [label = <(RETURN,return soa.Decode&lt;mirror::String&gt;(java_string)-&gt;GetLength();,return soa.Decode&lt;mirror::String&gt;(java_string)-&gt;GetLength();)<SUB>1929</SUB>> ]
-"10315" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::String&gt;(java_string)-&gt;GetLength())<SUB>1929</SUB>> ]
-"10316" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::String)<SUB>1929</SUB>> ]
-"10323" [label = <(GetLength,(java_string)-&gt;GetLength())<SUB>1929</SUB>> ]
-"10297" [label = <(UNLIKELY,UNLIKELY((java_string) == nullptr))<SUB>1927</SUB>> ]
-"10317" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1929</SUB>> ]
-"10320" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1929</SUB>> ]
-"10324" [label = <(&lt;operator&gt;.indirectFieldAccess,(java_string)-&gt;GetLength)<SUB>1929</SUB>> ]
-"10298" [label = <(&lt;operator&gt;.equals,(java_string) == nullptr)<SUB>1927</SUB>> ]
-"10302" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_string == null&quot;))<SUB>1927</SUB>> ]
-"10309" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string))<SUB>1927</SUB>> ]
-"10319" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1929</SUB>> ]
-"10322" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1929</SUB>> ]
-"10326" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>1929</SUB>> ]
-"10303" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1927</SUB>> ]
-"10304" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1927</SUB>> ]
-"10306" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1927</SUB>> ]
-"10289" [label = <(METHOD,GetStringLength)<SUB>1926</SUB>> ]
-"10327" [label = <(METHOD_RETURN,jsize)<SUB>1926</SUB>> ]
-  "10293" -> "10298" 
-  "10293" -> "10312" 
-  "10312" -> "10319" 
-  "10314" -> "10327" 
-  "10315" -> "10314" 
-  "10316" -> "10326" 
-  "10323" -> "10315" 
-  "10297" -> "10304" 
-  "10297" -> "10312" 
-  "10317" -> "10322" 
-  "10320" -> "10316" 
-  "10324" -> "10323" 
-  "10298" -> "10297" 
-  "10302" -> "10309" 
-  "10309" -> "10327" 
-  "10319" -> "10317" 
-  "10322" -> "10320" 
-  "10326" -> "10324" 
-  "10303" -> "10302" 
-  "10304" -> "10306" 
-  "10306" -> "10303" 
-  "10289" -> "10293" 
+digraph "GetStringChars" {  
+"10311" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_string))<SUB>1840</SUB>> ]
+"10330" [label = <(soa,soa(env))<SUB>1841</SUB>> ]
+"10332" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::String&gt; s = soa.Decode&lt;mirror::String&gt;(java_string))<SUB>1842</SUB>> ]
+"10350" [label = <(&lt;operator&gt;.assignment,* heap = Runtime::Current()-&gt;GetHeap())<SUB>1843</SUB>> ]
+"10445" [label = <(RETURN,return static_cast&lt;jchar*&gt;(s-&gt;GetValue());,return static_cast&lt;jchar*&gt;(s-&gt;GetValue());)<SUB>1862</SUB>> ]
+"10333" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::String&gt; s)<SUB>1842</SUB>> ]
+"10340" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::String&gt;(java_string))<SUB>1842</SUB>> ]
+"10352" [label = <(GetHeap,Runtime::Current()-&gt;GetHeap())<SUB>1843</SUB>> ]
+"10360" [label = <(&lt;operator&gt;.logicalOr,heap-&gt;IsMovableObject(s) || s-&gt;IsCompressed())<SUB>1844</SUB>> ]
+"10437" [label = <(&lt;operator&gt;.notEquals,is_copy != nullptr)<SUB>1859</SUB>> ]
+"10446" [label = <(&lt;operator&gt;.cast,static_cast&lt;jchar*&gt;(s-&gt;GetValue()))<SUB>1862</SUB>> ]
+"10334" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::String)<SUB>1842</SUB>> ]
+"10341" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::String)<SUB>1842</SUB>> ]
+"10353" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetHeap)<SUB>1843</SUB>> ]
+"10361" [label = <(IsMovableObject,heap-&gt;IsMovableObject(s))<SUB>1844</SUB>> ]
+"10366" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>1844</SUB>> ]
+"10372" [label = <(&lt;operator&gt;.assignment,* chars = new jchar[s-&gt;GetLength()])<SUB>1845</SUB>> ]
+"10434" [label = <(RETURN,return chars;,return chars;)<SUB>1857</SUB>> ]
+"10441" [label = <(&lt;operator&gt;.assignment,*is_copy = JNI_FALSE)<SUB>1860</SUB>> ]
+"10447" [label = <(UNKNOWN,jchar*,jchar*)<SUB>1862</SUB>> ]
+"10448" [label = <(GetValue,s-&gt;GetValue())<SUB>1862</SUB>> ]
+"10315" [label = <(UNLIKELY,UNLIKELY((java_string) == nullptr))<SUB>1840</SUB>> ]
+"10336" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1842</SUB>> ]
+"10342" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1842</SUB>> ]
+"10345" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1842</SUB>> ]
+"10354" [label = <(Runtime::Current,Runtime::Current())<SUB>1843</SUB>> ]
+"10358" [label = <(FIELD_IDENTIFIER,GetHeap,GetHeap)<SUB>1843</SUB>> ]
+"10362" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;IsMovableObject)<SUB>1844</SUB>> ]
+"10367" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>1844</SUB>> ]
+"10374" [label = <(&lt;operator&gt;.new,new jchar[s-&gt;GetLength()])<SUB>1845</SUB>> ]
+"10377" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>1846</SUB>> ]
+"10426" [label = <(&lt;operator&gt;.notEquals,is_copy != nullptr)<SUB>1854</SUB>> ]
+"10442" [label = <(&lt;operator&gt;.indirection,*is_copy)<SUB>1860</SUB>> ]
+"10449" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetValue)<SUB>1862</SUB>> ]
+"10316" [label = <(&lt;operator&gt;.equals,(java_string) == nullptr)<SUB>1840</SUB>> ]
+"10320" [label = <(CHECK_NON_NULL_ARGUMENT(java_string),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_string == null&quot;))<SUB>1840</SUB>> ]
+"10327" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_string),CHECK_NON_NULL_ARGUMENT(java_string))<SUB>1840</SUB>> ]
+"10338" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1842</SUB>> ]
+"10344" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1842</SUB>> ]
+"10347" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1842</SUB>> ]
+"10355" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>1843</SUB>> ]
+"10364" [label = <(FIELD_IDENTIFIER,IsMovableObject,IsMovableObject)<SUB>1844</SUB>> ]
+"10369" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>1844</SUB>> ]
+"10378" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>1846</SUB>> ]
+"10383" [label = <(&lt;operator&gt;.assignment,length = s-&gt;GetLength())<SUB>1847</SUB>> ]
+"10430" [label = <(&lt;operator&gt;.assignment,*is_copy = JNI_TRUE)<SUB>1855</SUB>> ]
+"10451" [label = <(FIELD_IDENTIFIER,GetValue,GetValue)<SUB>1862</SUB>> ]
+"10321" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1840</SUB>> ]
+"10357" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>1843</SUB>> ]
+"10380" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>1846</SUB>> ]
+"10385" [label = <(GetLength,s-&gt;GetLength())<SUB>1847</SUB>> ]
+"10395" [label = <(&lt;operator&gt;.lessThan,i &lt; length)<SUB>1848</SUB>> ]
+"10398" [label = <(&lt;operator&gt;.preIncrement,++i)<SUB>1848</SUB>> ]
+"10412" [label = <(memcpy,memcpy(chars, s-&gt;GetValue(), sizeof(jchar) * s-&gt;GetLength()))<SUB>1852</SUB>> ]
+"10431" [label = <(&lt;operator&gt;.indirection,*is_copy)<SUB>1855</SUB>> ]
+"10322" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1840</SUB>> ]
+"10324" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1840</SUB>> ]
+"10386" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetLength)<SUB>1847</SUB>> ]
+"10392" [label = <(&lt;operator&gt;.assignment,i = 0)<SUB>1848</SUB>> ]
+"10401" [label = <(&lt;operator&gt;.assignment,chars[i] = s-&gt;CharAt(i))<SUB>1849</SUB>> ]
+"10414" [label = <(GetValue,s-&gt;GetValue())<SUB>1852</SUB>> ]
+"10418" [label = <(&lt;operator&gt;.multiplication,sizeof(jchar) * s-&gt;GetLength())<SUB>1852</SUB>> ]
+"10388" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>1847</SUB>> ]
+"10402" [label = <(&lt;operator&gt;.indirectIndexAccess,chars[i])<SUB>1849</SUB>> ]
+"10405" [label = <(CharAt,s-&gt;CharAt(i))<SUB>1849</SUB>> ]
+"10415" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetValue)<SUB>1852</SUB>> ]
+"10419" [label = <(&lt;operator&gt;.sizeOf,sizeof(jchar))<SUB>1852</SUB>> ]
+"10421" [label = <(GetLength,s-&gt;GetLength())<SUB>1852</SUB>> ]
+"10406" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;CharAt)<SUB>1849</SUB>> ]
+"10417" [label = <(FIELD_IDENTIFIER,GetValue,GetValue)<SUB>1852</SUB>> ]
+"10422" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetLength)<SUB>1852</SUB>> ]
+"10408" [label = <(FIELD_IDENTIFIER,CharAt,CharAt)<SUB>1849</SUB>> ]
+"10424" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>1852</SUB>> ]
+"10306" [label = <(METHOD,GetStringChars)<SUB>1839</SUB>> ]
+"10452" [label = <(METHOD_RETURN,jchar)<SUB>1839</SUB>> ]
+  "10311" -> "10316" 
+  "10311" -> "10330" 
+  "10330" -> "10338" 
+  "10332" -> "10357" 
+  "10350" -> "10364" 
+  "10445" -> "10452" 
+  "10333" -> "10344" 
+  "10340" -> "10332" 
+  "10352" -> "10350" 
+  "10360" -> "10374" 
+  "10360" -> "10437" 
+  "10437" -> "10447" 
+  "10437" -> "10442" 
+  "10446" -> "10445" 
+  "10334" -> "10333" 
+  "10341" -> "10340" 
+  "10353" -> "10352" 
+  "10361" -> "10360" 
+  "10361" -> "10369" 
+  "10366" -> "10360" 
+  "10372" -> "10380" 
+  "10434" -> "10452" 
+  "10441" -> "10447" 
+  "10447" -> "10451" 
+  "10448" -> "10446" 
+  "10315" -> "10322" 
+  "10315" -> "10330" 
+  "10336" -> "10334" 
+  "10342" -> "10347" 
+  "10345" -> "10341" 
+  "10354" -> "10358" 
+  "10358" -> "10353" 
+  "10362" -> "10361" 
+  "10367" -> "10366" 
+  "10374" -> "10372" 
+  "10377" -> "10388" 
+  "10377" -> "10417" 
+  "10426" -> "10431" 
+  "10426" -> "10434" 
+  "10442" -> "10441" 
+  "10449" -> "10448" 
+  "10316" -> "10315" 
+  "10320" -> "10327" 
+  "10327" -> "10452" 
+  "10338" -> "10336" 
+  "10344" -> "10342" 
+  "10347" -> "10345" 
+  "10355" -> "10354" 
+  "10364" -> "10362" 
+  "10369" -> "10367" 
+  "10378" -> "10377" 
+  "10383" -> "10392" 
+  "10430" -> "10434" 
+  "10451" -> "10449" 
+  "10321" -> "10320" 
+  "10357" -> "10355" 
+  "10380" -> "10378" 
+  "10385" -> "10383" 
+  "10395" -> "10402" 
+  "10395" -> "10426" 
+  "10398" -> "10395" 
+  "10412" -> "10426" 
+  "10431" -> "10430" 
+  "10322" -> "10324" 
+  "10324" -> "10321" 
+  "10386" -> "10385" 
+  "10392" -> "10395" 
+  "10401" -> "10398" 
+  "10414" -> "10419" 
+  "10418" -> "10412" 
+  "10388" -> "10386" 
+  "10402" -> "10408" 
+  "10405" -> "10401" 
+  "10415" -> "10414" 
+  "10419" -> "10424" 
+  "10421" -> "10418" 
+  "10406" -> "10405" 
+  "10417" -> "10415" 
+  "10422" -> "10421" 
+  "10408" -> "10406" 
+  "10424" -> "10422" 
+  "10306" -> "10311" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/19-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/19-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/19-cfg.dot	2023-06-07 19:33:45.337394696 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/19-cfg.dot	2023-06-07 19:33:51.917393996 +0330
@@ -1,5 +1,17 @@
-digraph "FindFieldID" {  
-"465" [label = <(METHOD,FindFieldID)<SUB>377</SUB>> ]
-"472" [label = <(METHOD_RETURN,jfieldID)<SUB>377</SUB>> ]
-  "465" -> "472" 
+digraph "JavaVmExtFromEnv" {  
+"365" [label = <(RETURN,return reinterpret_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm();,return reinterpret_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm();)<SUB>409</SUB>> ]
+"366" [label = <(GetVm,reinterpret_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm())<SUB>409</SUB>> ]
+"367" [label = <(&lt;operator&gt;.indirectFieldAccess,reinterpret_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm)<SUB>409</SUB>> ]
+"368" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;JNIEnvExt*&gt;(env))<SUB>409</SUB>> ]
+"371" [label = <(FIELD_IDENTIFIER,GetVm,GetVm)<SUB>409</SUB>> ]
+"369" [label = <(UNKNOWN,JNIEnvExt*,JNIEnvExt*)<SUB>409</SUB>> ]
+"362" [label = <(METHOD,JavaVmExtFromEnv)<SUB>408</SUB>> ]
+"372" [label = <(METHOD_RETURN,JavaVMExt)<SUB>408</SUB>> ]
+  "365" -> "372" 
+  "366" -> "365" 
+  "367" -> "366" 
+  "368" -> "371" 
+  "371" -> "367" 
+  "369" -> "368" 
+  "362" -> "369" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/190-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/190-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/190-cfg.dot	2023-06-07 19:33:45.467394683 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/190-cfg.dot	2023-06-07 19:33:52.047393982 +0330
@@ -1,45 +1,78 @@
-digraph "GetStringUTFLength" {  
-"10333" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string))<SUB>1933</SUB>> ]
-"10352" [label = <(soa,soa(env))<SUB>1934</SUB>> ]
-"10354" [label = <(RETURN,return soa.Decode&lt;mirror::String&gt;(java_string)-&gt;GetUtfLength();,return soa.Decode&lt;mirror::String&gt;(java_string)-&gt;GetUtfLength();)<SUB>1935</SUB>> ]
-"10355" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::String&gt;(java_string)-&gt;GetUtfLength())<SUB>1935</SUB>> ]
-"10356" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::String)<SUB>1935</SUB>> ]
-"10363" [label = <(GetUtfLength,(java_string)-&gt;GetUtfLength())<SUB>1935</SUB>> ]
-"10337" [label = <(UNLIKELY,UNLIKELY((java_string) == nullptr))<SUB>1933</SUB>> ]
-"10357" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1935</SUB>> ]
-"10360" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1935</SUB>> ]
-"10364" [label = <(&lt;operator&gt;.indirectFieldAccess,(java_string)-&gt;GetUtfLength)<SUB>1935</SUB>> ]
-"10338" [label = <(&lt;operator&gt;.equals,(java_string) == nullptr)<SUB>1933</SUB>> ]
-"10342" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_string == null&quot;))<SUB>1933</SUB>> ]
-"10349" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string))<SUB>1933</SUB>> ]
-"10359" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1935</SUB>> ]
-"10362" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1935</SUB>> ]
-"10366" [label = <(FIELD_IDENTIFIER,GetUtfLength,GetUtfLength)<SUB>1935</SUB>> ]
-"10343" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1933</SUB>> ]
-"10344" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1933</SUB>> ]
-"10346" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1933</SUB>> ]
-"10329" [label = <(METHOD,GetStringUTFLength)<SUB>1932</SUB>> ]
-"10367" [label = <(METHOD_RETURN,jsize)<SUB>1932</SUB>> ]
-  "10333" -> "10338" 
-  "10333" -> "10352" 
-  "10352" -> "10359" 
-  "10354" -> "10367" 
-  "10355" -> "10354" 
-  "10356" -> "10366" 
-  "10363" -> "10355" 
-  "10337" -> "10344" 
-  "10337" -> "10352" 
-  "10357" -> "10362" 
-  "10360" -> "10356" 
-  "10364" -> "10363" 
-  "10338" -> "10337" 
-  "10342" -> "10349" 
-  "10349" -> "10367" 
-  "10359" -> "10357" 
-  "10362" -> "10360" 
-  "10366" -> "10364" 
-  "10343" -> "10342" 
-  "10344" -> "10346" 
-  "10346" -> "10343" 
-  "10329" -> "10333" 
+digraph "ReleaseStringChars" {  
+"10459" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string))<SUB>1866</SUB>> ]
+"10477" [label = <(soa,soa(env))<SUB>1867</SUB>> ]
+"10479" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::String&gt; s = soa.Decode&lt;mirror::String&gt;(java_string))<SUB>1868</SUB>> ]
+"10480" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::String&gt; s)<SUB>1868</SUB>> ]
+"10487" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::String&gt;(java_string))<SUB>1868</SUB>> ]
+"10497" [label = <(&lt;operator&gt;.logicalOr,s-&gt;IsCompressed() || (s-&gt;IsCompressed() == false &amp;&amp; chars != s-&gt;GetValue()))<SUB>1869</SUB>> ]
+"10481" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::String)<SUB>1868</SUB>> ]
+"10488" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::String)<SUB>1868</SUB>> ]
+"10498" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>1869</SUB>> ]
+"10502" [label = <(&lt;operator&gt;.logicalAnd,s-&gt;IsCompressed() == false &amp;&amp; chars != s-&gt;GetValue())<SUB>1869</SUB>> ]
+"10516" [label = <(&lt;operator&gt;.delete,delete[] chars)<SUB>1870</SUB>> ]
+"10463" [label = <(UNLIKELY,UNLIKELY((java_string) == nullptr))<SUB>1866</SUB>> ]
+"10483" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1868</SUB>> ]
+"10489" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1868</SUB>> ]
+"10492" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1868</SUB>> ]
+"10499" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>1869</SUB>> ]
+"10503" [label = <(&lt;operator&gt;.equals,s-&gt;IsCompressed() == false)<SUB>1869</SUB>> ]
+"10509" [label = <(&lt;operator&gt;.notEquals,chars != s-&gt;GetValue())<SUB>1869</SUB>> ]
+"10464" [label = <(&lt;operator&gt;.equals,(java_string) == nullptr)<SUB>1866</SUB>> ]
+"10468" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_string == null&quot;))<SUB>1866</SUB>> ]
+"10475" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string))<SUB>1866</SUB>> ]
+"10485" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1868</SUB>> ]
+"10491" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1868</SUB>> ]
+"10494" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1868</SUB>> ]
+"10501" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>1869</SUB>> ]
+"10504" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>1869</SUB>> ]
+"10511" [label = <(GetValue,s-&gt;GetValue())<SUB>1869</SUB>> ]
+"10469" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1866</SUB>> ]
+"10505" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>1869</SUB>> ]
+"10512" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetValue)<SUB>1869</SUB>> ]
+"10470" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1866</SUB>> ]
+"10472" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1866</SUB>> ]
+"10507" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>1869</SUB>> ]
+"10514" [label = <(FIELD_IDENTIFIER,GetValue,GetValue)<SUB>1869</SUB>> ]
+"10454" [label = <(METHOD,ReleaseStringChars)<SUB>1865</SUB>> ]
+"10518" [label = <(METHOD_RETURN,void)<SUB>1865</SUB>> ]
+  "10459" -> "10464" 
+  "10459" -> "10477" 
+  "10477" -> "10485" 
+  "10479" -> "10501" 
+  "10480" -> "10491" 
+  "10487" -> "10479" 
+  "10497" -> "10518" 
+  "10497" -> "10516" 
+  "10481" -> "10480" 
+  "10488" -> "10487" 
+  "10498" -> "10497" 
+  "10498" -> "10507" 
+  "10502" -> "10497" 
+  "10516" -> "10518" 
+  "10463" -> "10470" 
+  "10463" -> "10477" 
+  "10483" -> "10481" 
+  "10489" -> "10494" 
+  "10492" -> "10488" 
+  "10499" -> "10498" 
+  "10503" -> "10502" 
+  "10503" -> "10514" 
+  "10509" -> "10502" 
+  "10464" -> "10463" 
+  "10468" -> "10475" 
+  "10475" -> "10518" 
+  "10485" -> "10483" 
+  "10491" -> "10489" 
+  "10494" -> "10492" 
+  "10501" -> "10499" 
+  "10504" -> "10503" 
+  "10511" -> "10509" 
+  "10469" -> "10468" 
+  "10505" -> "10504" 
+  "10512" -> "10511" 
+  "10470" -> "10472" 
+  "10472" -> "10469" 
+  "10507" -> "10505" 
+  "10514" -> "10512" 
+  "10454" -> "10459" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/191-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/191-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/191-cfg.dot	2023-06-07 19:33:45.467394683 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/191-cfg.dot	2023-06-07 19:33:52.047393982 +0330
@@ -1,149 +1,189 @@
-digraph "GetStringRegion" {  
-"10376" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string))<SUB>1940</SUB>> ]
-"10394" [label = <(soa,soa(env))<SUB>1941</SUB>> ]
-"10396" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::String&gt; s = soa.Decode&lt;mirror::String&gt;(java_string))<SUB>1942</SUB>> ]
-"10397" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::String&gt; s)<SUB>1942</SUB>> ]
-"10404" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::String&gt;(java_string))<SUB>1942</SUB>> ]
-"10414" [label = <(&lt;operator&gt;.logicalOr,start &lt; 0 || length &lt; 0 || length &gt; s-&gt;GetLength() - start)<SUB>1943</SUB>> ]
-"10398" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::String)<SUB>1942</SUB>> ]
-"10405" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::String)<SUB>1942</SUB>> ]
-"10415" [label = <(&lt;operator&gt;.logicalOr,start &lt; 0 || length &lt; 0)<SUB>1943</SUB>> ]
-"10422" [label = <(&lt;operator&gt;.greaterThan,length &gt; s-&gt;GetLength() - start)<SUB>1943</SUB>> ]
-"10431" [label = <(ThrowSIOOBE,ThrowSIOOBE(soa, start, length, s-&gt;GetLength()))<SUB>1944</SUB>> ]
-"10380" [label = <(UNLIKELY,UNLIKELY((java_string) == nullptr))<SUB>1940</SUB>> ]
-"10400" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1942</SUB>> ]
-"10406" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1942</SUB>> ]
-"10409" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1942</SUB>> ]
-"10416" [label = <(&lt;operator&gt;.lessThan,start &lt; 0)<SUB>1943</SUB>> ]
-"10419" [label = <(&lt;operator&gt;.lessThan,length &lt; 0)<SUB>1943</SUB>> ]
-"10424" [label = <(&lt;operator&gt;.subtraction,s-&gt;GetLength() - start)<SUB>1943</SUB>> ]
-"10435" [label = <(GetLength,s-&gt;GetLength())<SUB>1944</SUB>> ]
-"10441" [label = <(CHECK_NON_NULL_MEMCPY_ARGUMENT,CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf))<SUB>1946</SUB>> ]
-"10381" [label = <(&lt;operator&gt;.equals,(java_string) == nullptr)<SUB>1940</SUB>> ]
-"10385" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_string == null&quot;))<SUB>1940</SUB>> ]
-"10392" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string))<SUB>1940</SUB>> ]
-"10402" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1942</SUB>> ]
-"10408" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1942</SUB>> ]
-"10411" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1942</SUB>> ]
-"10425" [label = <(GetLength,s-&gt;GetLength())<SUB>1943</SUB>> ]
-"10436" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetLength)<SUB>1944</SUB>> ]
-"10464" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>1947</SUB>> ]
-"10386" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1940</SUB>> ]
-"10426" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetLength)<SUB>1943</SUB>> ]
-"10438" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>1944</SUB>> ]
-"10465" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>1947</SUB>> ]
-"10387" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1940</SUB>> ]
-"10389" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1940</SUB>> ]
-"10428" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>1943</SUB>> ]
-"10446" [label = <(UNLIKELY,UNLIKELY((length) != 0 &amp;&amp; (buf) == nullptr))<SUB>1946</SUB>> ]
-"10467" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>1947</SUB>> ]
-"10475" [label = <(&lt;operator&gt;.lessThan,i &lt; length)<SUB>1948</SUB>> ]
-"10478" [label = <(&lt;operator&gt;.preIncrement,++i)<SUB>1948</SUB>> ]
-"10497" [label = <(&lt;operator&gt;.assignment,* chars = static_cast&lt;jchar*&gt;(s-&gt;GetValue()))<SUB>1952</SUB>> ]
-"10505" [label = <(memcpy,memcpy(buf, chars + start, length * sizeof(jchar)))<SUB>1953</SUB>> ]
-"10447" [label = <(&lt;operator&gt;.logicalAnd,(length) != 0 &amp;&amp; (buf) == nullptr)<SUB>1946</SUB>> ]
-"10455" [label = <(CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;buf == null&quot;))<SUB>1946</SUB>> ]
-"10462" [label = <(RETURN,CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf),CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf))<SUB>1946</SUB>> ]
-"10472" [label = <(&lt;operator&gt;.assignment,i = 0)<SUB>1948</SUB>> ]
-"10481" [label = <(&lt;operator&gt;.assignment,buf[i] = static_cast&lt;jchar&gt;(s-&gt;CharAt(start+i)))<SUB>1949</SUB>> ]
-"10499" [label = <(&lt;operator&gt;.cast,static_cast&lt;jchar*&gt;(s-&gt;GetValue()))<SUB>1952</SUB>> ]
-"10507" [label = <(&lt;operator&gt;.addition,chars + start)<SUB>1953</SUB>> ]
-"10510" [label = <(&lt;operator&gt;.multiplication,length * sizeof(jchar))<SUB>1953</SUB>> ]
-"10448" [label = <(&lt;operator&gt;.notEquals,(length) != 0)<SUB>1946</SUB>> ]
-"10451" [label = <(&lt;operator&gt;.equals,(buf) == nullptr)<SUB>1946</SUB>> ]
-"10456" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1946</SUB>> ]
-"10482" [label = <(&lt;operator&gt;.indirectIndexAccess,buf[i])<SUB>1949</SUB>> ]
-"10485" [label = <(&lt;operator&gt;.cast,static_cast&lt;jchar&gt;(s-&gt;CharAt(start+i)))<SUB>1949</SUB>> ]
-"10500" [label = <(UNKNOWN,jchar*,jchar*)<SUB>1952</SUB>> ]
-"10501" [label = <(GetValue,s-&gt;GetValue())<SUB>1952</SUB>> ]
-"10512" [label = <(&lt;operator&gt;.sizeOf,sizeof(jchar))<SUB>1953</SUB>> ]
-"10457" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1946</SUB>> ]
-"10459" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1946</SUB>> ]
-"10486" [label = <(UNKNOWN,jchar,jchar)<SUB>1949</SUB>> ]
-"10487" [label = <(CharAt,s-&gt;CharAt(start+i))<SUB>1949</SUB>> ]
-"10502" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetValue)<SUB>1952</SUB>> ]
-"10488" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;CharAt)<SUB>1949</SUB>> ]
-"10491" [label = <(&lt;operator&gt;.addition,start+i)<SUB>1949</SUB>> ]
-"10504" [label = <(FIELD_IDENTIFIER,GetValue,GetValue)<SUB>1952</SUB>> ]
-"10490" [label = <(FIELD_IDENTIFIER,CharAt,CharAt)<SUB>1949</SUB>> ]
-"10369" [label = <(METHOD,GetStringRegion)<SUB>1938</SUB>> ]
-"10514" [label = <(METHOD_RETURN,void)<SUB>1938</SUB>> ]
-  "10376" -> "10381" 
-  "10376" -> "10394" 
-  "10394" -> "10402" 
-  "10396" -> "10416" 
-  "10397" -> "10408" 
-  "10404" -> "10396" 
-  "10414" -> "10438" 
-  "10414" -> "10441" 
-  "10398" -> "10397" 
-  "10405" -> "10404" 
-  "10415" -> "10414" 
-  "10415" -> "10428" 
-  "10422" -> "10414" 
-  "10431" -> "10514" 
-  "10380" -> "10387" 
-  "10380" -> "10394" 
-  "10400" -> "10398" 
-  "10406" -> "10411" 
-  "10409" -> "10405" 
-  "10416" -> "10415" 
-  "10416" -> "10419" 
-  "10419" -> "10415" 
-  "10424" -> "10422" 
-  "10435" -> "10431" 
-  "10441" -> "10448" 
-  "10441" -> "10467" 
-  "10381" -> "10380" 
-  "10385" -> "10392" 
-  "10392" -> "10514" 
-  "10402" -> "10400" 
-  "10408" -> "10406" 
-  "10411" -> "10409" 
-  "10425" -> "10424" 
-  "10436" -> "10435" 
-  "10464" -> "10472" 
-  "10464" -> "10500" 
-  "10386" -> "10385" 
-  "10426" -> "10425" 
-  "10438" -> "10436" 
-  "10465" -> "10464" 
-  "10387" -> "10389" 
-  "10389" -> "10386" 
-  "10428" -> "10426" 
-  "10446" -> "10457" 
-  "10446" -> "10467" 
-  "10467" -> "10465" 
-  "10475" -> "10514" 
-  "10475" -> "10482" 
-  "10478" -> "10475" 
-  "10497" -> "10507" 
-  "10505" -> "10514" 
-  "10447" -> "10446" 
-  "10455" -> "10462" 
-  "10462" -> "10514" 
-  "10472" -> "10475" 
-  "10481" -> "10478" 
-  "10499" -> "10497" 
-  "10507" -> "10512" 
-  "10510" -> "10505" 
-  "10448" -> "10447" 
-  "10448" -> "10451" 
-  "10451" -> "10447" 
-  "10456" -> "10455" 
-  "10482" -> "10486" 
-  "10485" -> "10481" 
-  "10500" -> "10504" 
-  "10501" -> "10499" 
-  "10512" -> "10510" 
-  "10457" -> "10459" 
-  "10459" -> "10456" 
-  "10486" -> "10490" 
-  "10487" -> "10485" 
-  "10502" -> "10501" 
-  "10488" -> "10491" 
-  "10491" -> "10487" 
-  "10504" -> "10502" 
-  "10490" -> "10488" 
-  "10369" -> "10376" 
+digraph "GetStringCritical" {  
+"10525" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_string))<SUB>1875</SUB>> ]
+"10544" [label = <(soa,soa(env))<SUB>1876</SUB>> ]
+"10546" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::String&gt; s = soa.Decode&lt;mirror::String&gt;(java_string))<SUB>1877</SUB>> ]
+"10564" [label = <(&lt;operator&gt;.assignment,* heap = Runtime::Current()-&gt;GetHeap())<SUB>1878</SUB>> ]
+"10547" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::String&gt; s)<SUB>1877</SUB>> ]
+"10554" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::String&gt;(java_string))<SUB>1877</SUB>> ]
+"10566" [label = <(GetHeap,Runtime::Current()-&gt;GetHeap())<SUB>1878</SUB>> ]
+"10574" [label = <(IsMovableObject,heap-&gt;IsMovableObject(s))<SUB>1879</SUB>> ]
+"10625" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>1890</SUB>> ]
+"10548" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::String)<SUB>1877</SUB>> ]
+"10555" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::String)<SUB>1877</SUB>> ]
+"10567" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetHeap)<SUB>1878</SUB>> ]
+"10575" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;IsMovableObject)<SUB>1879</SUB>> ]
+"10580" [label = <(&lt;operator&gt;.greaterThan,StackHandleScope&lt;1&gt; hs(soa.Self()))<SUB>1880</SUB>> ]
+"10589" [label = <(&lt;operator&gt;.greaterThan,HandleWrapperObjPtr&lt;mirror::String&gt; h(hs.NewHandleWrapper(&amp;s)))<SUB>1881</SUB>> ]
+"10626" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>1890</SUB>> ]
+"10640" [label = <(&lt;operator&gt;.assignment,length = s-&gt;GetLength())<SUB>1894</SUB>> ]
+"10647" [label = <(&lt;operator&gt;.assignment,* chars = new jchar[length])<SUB>1895</SUB>> ]
+"10672" [label = <(RETURN,return chars;,return chars;)<SUB>1899</SUB>> ]
+"10529" [label = <(UNLIKELY,UNLIKELY((java_string) == nullptr))<SUB>1875</SUB>> ]
+"10550" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1877</SUB>> ]
+"10556" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1877</SUB>> ]
+"10559" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1877</SUB>> ]
+"10568" [label = <(Runtime::Current,Runtime::Current())<SUB>1878</SUB>> ]
+"10572" [label = <(FIELD_IDENTIFIER,GetHeap,GetHeap)<SUB>1878</SUB>> ]
+"10577" [label = <(FIELD_IDENTIFIER,IsMovableObject,IsMovableObject)<SUB>1879</SUB>> ]
+"10581" [label = <(&lt;operator&gt;.lessThan,StackHandleScope&lt;1)<SUB>1880</SUB>> ]
+"10584" [label = <(hs,hs(soa.Self()))<SUB>1880</SUB>> ]
+"10590" [label = <(&lt;operator&gt;.lessThan,HandleWrapperObjPtr&lt;mirror::String)<SUB>1881</SUB>> ]
+"10595" [label = <(h,h(hs.NewHandleWrapper(&amp;s)))<SUB>1881</SUB>> ]
+"10603" [label = <(&lt;operator&gt;.logicalNot,!kUseReadBarrier)<SUB>1882</SUB>> ]
+"10628" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>1890</SUB>> ]
+"10631" [label = <(&lt;operator&gt;.notEquals,is_copy != nullptr)<SUB>1891</SUB>> ]
+"10642" [label = <(GetLength,s-&gt;GetLength())<SUB>1894</SUB>> ]
+"10649" [label = <(&lt;operator&gt;.new,new jchar[length])<SUB>1895</SUB>> ]
+"10657" [label = <(&lt;operator&gt;.lessThan,i &lt; length)<SUB>1896</SUB>> ]
+"10660" [label = <(&lt;operator&gt;.preIncrement,++i)<SUB>1896</SUB>> ]
+"10685" [label = <(RETURN,return static_cast&lt;jchar*&gt;(s-&gt;GetValue());,return static_cast&lt;jchar*&gt;(s-&gt;GetValue());)<SUB>1904</SUB>> ]
+"10530" [label = <(&lt;operator&gt;.equals,(java_string) == nullptr)<SUB>1875</SUB>> ]
+"10534" [label = <(CHECK_NON_NULL_ARGUMENT(java_string),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_string == null&quot;))<SUB>1875</SUB>> ]
+"10541" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_string),CHECK_NON_NULL_ARGUMENT(java_string))<SUB>1875</SUB>> ]
+"10552" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1877</SUB>> ]
+"10558" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1877</SUB>> ]
+"10561" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1877</SUB>> ]
+"10569" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>1878</SUB>> ]
+"10585" [label = <(Self,soa.Self())<SUB>1880</SUB>> ]
+"10592" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1881</SUB>> ]
+"10596" [label = <(NewHandleWrapper,hs.NewHandleWrapper(&amp;s))<SUB>1881</SUB>> ]
+"10606" [label = <(IncrementDisableMovingGC,heap-&gt;IncrementDisableMovingGC(soa.Self()))<SUB>1883</SUB>> ]
+"10635" [label = <(&lt;operator&gt;.assignment,*is_copy = JNI_TRUE)<SUB>1892</SUB>> ]
+"10643" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetLength)<SUB>1894</SUB>> ]
+"10654" [label = <(&lt;operator&gt;.assignment,i = 0)<SUB>1896</SUB>> ]
+"10663" [label = <(&lt;operator&gt;.assignment,chars[i] = s-&gt;CharAt(i))<SUB>1897</SUB>> ]
+"10677" [label = <(&lt;operator&gt;.notEquals,is_copy != nullptr)<SUB>1901</SUB>> ]
+"10686" [label = <(&lt;operator&gt;.cast,static_cast&lt;jchar*&gt;(s-&gt;GetValue()))<SUB>1904</SUB>> ]
+"10535" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1875</SUB>> ]
+"10571" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>1878</SUB>> ]
+"10586" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>1880</SUB>> ]
+"10594" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1881</SUB>> ]
+"10597" [label = <(&lt;operator&gt;.fieldAccess,hs.NewHandleWrapper)<SUB>1881</SUB>> ]
+"10600" [label = <(&lt;operator&gt;.addressOf,&amp;s)<SUB>1881</SUB>> ]
+"10607" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;IncrementDisableMovingGC)<SUB>1883</SUB>> ]
+"10610" [label = <(Self,soa.Self())<SUB>1883</SUB>> ]
+"10616" [label = <(IncrementDisableThreadFlip,heap-&gt;IncrementDisableThreadFlip(soa.Self()))<SUB>1887</SUB>> ]
+"10636" [label = <(&lt;operator&gt;.indirection,*is_copy)<SUB>1892</SUB>> ]
+"10645" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>1894</SUB>> ]
+"10664" [label = <(&lt;operator&gt;.indirectIndexAccess,chars[i])<SUB>1897</SUB>> ]
+"10667" [label = <(CharAt,s-&gt;CharAt(i))<SUB>1897</SUB>> ]
+"10681" [label = <(&lt;operator&gt;.assignment,*is_copy = JNI_FALSE)<SUB>1902</SUB>> ]
+"10687" [label = <(UNKNOWN,jchar*,jchar*)<SUB>1904</SUB>> ]
+"10688" [label = <(GetValue,s-&gt;GetValue())<SUB>1904</SUB>> ]
+"10536" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1875</SUB>> ]
+"10538" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1875</SUB>> ]
+"10588" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>1880</SUB>> ]
+"10599" [label = <(FIELD_IDENTIFIER,NewHandleWrapper,NewHandleWrapper)<SUB>1881</SUB>> ]
+"10609" [label = <(FIELD_IDENTIFIER,IncrementDisableMovingGC,IncrementDisableMovingGC)<SUB>1883</SUB>> ]
+"10611" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>1883</SUB>> ]
+"10617" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;IncrementDisableThreadFlip)<SUB>1887</SUB>> ]
+"10620" [label = <(Self,soa.Self())<SUB>1887</SUB>> ]
+"10668" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;CharAt)<SUB>1897</SUB>> ]
+"10682" [label = <(&lt;operator&gt;.indirection,*is_copy)<SUB>1902</SUB>> ]
+"10689" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetValue)<SUB>1904</SUB>> ]
+"10613" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>1883</SUB>> ]
+"10619" [label = <(FIELD_IDENTIFIER,IncrementDisableThreadFlip,IncrementDisableThreadFlip)<SUB>1887</SUB>> ]
+"10621" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>1887</SUB>> ]
+"10670" [label = <(FIELD_IDENTIFIER,CharAt,CharAt)<SUB>1897</SUB>> ]
+"10691" [label = <(FIELD_IDENTIFIER,GetValue,GetValue)<SUB>1904</SUB>> ]
+"10623" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>1887</SUB>> ]
+"10520" [label = <(METHOD,GetStringCritical)<SUB>1874</SUB>> ]
+"10692" [label = <(METHOD_RETURN,jchar)<SUB>1874</SUB>> ]
+  "10525" -> "10530" 
+  "10525" -> "10544" 
+  "10544" -> "10552" 
+  "10546" -> "10571" 
+  "10564" -> "10577" 
+  "10547" -> "10558" 
+  "10554" -> "10546" 
+  "10566" -> "10564" 
+  "10574" -> "10581" 
+  "10574" -> "10628" 
+  "10625" -> "10631" 
+  "10625" -> "10677" 
+  "10548" -> "10547" 
+  "10555" -> "10554" 
+  "10567" -> "10566" 
+  "10575" -> "10574" 
+  "10580" -> "10594" 
+  "10589" -> "10603" 
+  "10626" -> "10625" 
+  "10640" -> "10649" 
+  "10647" -> "10654" 
+  "10672" -> "10692" 
+  "10529" -> "10536" 
+  "10529" -> "10544" 
+  "10550" -> "10548" 
+  "10556" -> "10561" 
+  "10559" -> "10555" 
+  "10568" -> "10572" 
+  "10572" -> "10567" 
+  "10577" -> "10575" 
+  "10581" -> "10588" 
+  "10584" -> "10580" 
+  "10590" -> "10599" 
+  "10595" -> "10589" 
+  "10603" -> "10609" 
+  "10603" -> "10619" 
+  "10628" -> "10626" 
+  "10631" -> "10636" 
+  "10631" -> "10645" 
+  "10642" -> "10640" 
+  "10649" -> "10647" 
+  "10657" -> "10664" 
+  "10657" -> "10672" 
+  "10660" -> "10657" 
+  "10685" -> "10692" 
+  "10530" -> "10529" 
+  "10534" -> "10541" 
+  "10541" -> "10692" 
+  "10552" -> "10550" 
+  "10558" -> "10556" 
+  "10561" -> "10559" 
+  "10569" -> "10568" 
+  "10585" -> "10584" 
+  "10592" -> "10590" 
+  "10596" -> "10595" 
+  "10606" -> "10628" 
+  "10635" -> "10645" 
+  "10643" -> "10642" 
+  "10654" -> "10657" 
+  "10663" -> "10660" 
+  "10677" -> "10687" 
+  "10677" -> "10682" 
+  "10686" -> "10685" 
+  "10535" -> "10534" 
+  "10571" -> "10569" 
+  "10586" -> "10585" 
+  "10594" -> "10592" 
+  "10597" -> "10600" 
+  "10600" -> "10596" 
+  "10607" -> "10613" 
+  "10610" -> "10606" 
+  "10616" -> "10628" 
+  "10636" -> "10635" 
+  "10645" -> "10643" 
+  "10664" -> "10670" 
+  "10667" -> "10663" 
+  "10681" -> "10687" 
+  "10687" -> "10691" 
+  "10688" -> "10686" 
+  "10536" -> "10538" 
+  "10538" -> "10535" 
+  "10588" -> "10586" 
+  "10599" -> "10597" 
+  "10609" -> "10607" 
+  "10611" -> "10610" 
+  "10617" -> "10623" 
+  "10620" -> "10616" 
+  "10668" -> "10667" 
+  "10682" -> "10681" 
+  "10689" -> "10688" 
+  "10613" -> "10611" 
+  "10619" -> "10617" 
+  "10621" -> "10620" 
+  "10670" -> "10668" 
+  "10691" -> "10689" 
+  "10623" -> "10621" 
+  "10520" -> "10525" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/192-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/192-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/192-cfg.dot	2023-06-07 19:33:45.477394682 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/192-cfg.dot	2023-06-07 19:33:52.057393980 +0330
@@ -1,143 +1,126 @@
-digraph "GetStringUTFRegion" {  
-"10523" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string))<SUB>1960</SUB>> ]
-"10541" [label = <(soa,soa(env))<SUB>1961</SUB>> ]
-"10543" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::String&gt; s = soa.Decode&lt;mirror::String&gt;(java_string))<SUB>1962</SUB>> ]
-"10544" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::String&gt; s)<SUB>1962</SUB>> ]
-"10551" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::String&gt;(java_string))<SUB>1962</SUB>> ]
-"10561" [label = <(&lt;operator&gt;.logicalOr,start &lt; 0 || length &lt; 0 || length &gt; s-&gt;GetLength() - start)<SUB>1963</SUB>> ]
-"10545" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::String)<SUB>1962</SUB>> ]
-"10552" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::String)<SUB>1962</SUB>> ]
-"10562" [label = <(&lt;operator&gt;.logicalOr,start &lt; 0 || length &lt; 0)<SUB>1963</SUB>> ]
-"10569" [label = <(&lt;operator&gt;.greaterThan,length &gt; s-&gt;GetLength() - start)<SUB>1963</SUB>> ]
-"10578" [label = <(ThrowSIOOBE,ThrowSIOOBE(soa, start, length, s-&gt;GetLength()))<SUB>1964</SUB>> ]
-"10527" [label = <(UNLIKELY,UNLIKELY((java_string) == nullptr))<SUB>1960</SUB>> ]
-"10547" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1962</SUB>> ]
-"10553" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1962</SUB>> ]
-"10556" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1962</SUB>> ]
-"10563" [label = <(&lt;operator&gt;.lessThan,start &lt; 0)<SUB>1963</SUB>> ]
-"10566" [label = <(&lt;operator&gt;.lessThan,length &lt; 0)<SUB>1963</SUB>> ]
-"10571" [label = <(&lt;operator&gt;.subtraction,s-&gt;GetLength() - start)<SUB>1963</SUB>> ]
-"10582" [label = <(GetLength,s-&gt;GetLength())<SUB>1964</SUB>> ]
-"10588" [label = <(CHECK_NON_NULL_MEMCPY_ARGUMENT,CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf))<SUB>1966</SUB>> ]
-"10528" [label = <(&lt;operator&gt;.equals,(java_string) == nullptr)<SUB>1960</SUB>> ]
-"10532" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_string == null&quot;))<SUB>1960</SUB>> ]
-"10539" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string))<SUB>1960</SUB>> ]
-"10549" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1962</SUB>> ]
-"10555" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1962</SUB>> ]
-"10558" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1962</SUB>> ]
-"10572" [label = <(GetLength,s-&gt;GetLength())<SUB>1963</SUB>> ]
-"10583" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetLength)<SUB>1964</SUB>> ]
-"10611" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>1967</SUB>> ]
-"10533" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1960</SUB>> ]
-"10573" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetLength)<SUB>1963</SUB>> ]
-"10585" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>1964</SUB>> ]
-"10612" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>1967</SUB>> ]
-"10534" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1960</SUB>> ]
-"10536" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1960</SUB>> ]
-"10575" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>1963</SUB>> ]
-"10593" [label = <(UNLIKELY,UNLIKELY((length) != 0 &amp;&amp; (buf) == nullptr))<SUB>1966</SUB>> ]
-"10614" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>1967</SUB>> ]
-"10622" [label = <(&lt;operator&gt;.lessThan,i &lt; length)<SUB>1968</SUB>> ]
-"10625" [label = <(&lt;operator&gt;.preIncrement,++i)<SUB>1968</SUB>> ]
-"10642" [label = <(&lt;operator&gt;.assignment,* chars = s-&gt;GetValue())<SUB>1972</SUB>> ]
-"10649" [label = <(&lt;operator&gt;.assignment,bytes = CountUtf8Bytes(chars + start, length))<SUB>1973</SUB>> ]
-"10656" [label = <(ConvertUtf16ToModifiedUtf8,ConvertUtf16ToModifiedUtf8(buf, bytes, chars + start, length))<SUB>1974</SUB>> ]
-"10594" [label = <(&lt;operator&gt;.logicalAnd,(length) != 0 &amp;&amp; (buf) == nullptr)<SUB>1966</SUB>> ]
-"10602" [label = <(CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;buf == null&quot;))<SUB>1966</SUB>> ]
-"10609" [label = <(RETURN,CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf),CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf))<SUB>1966</SUB>> ]
-"10619" [label = <(&lt;operator&gt;.assignment,i = 0)<SUB>1968</SUB>> ]
-"10628" [label = <(&lt;operator&gt;.assignment,buf[i] = s-&gt;CharAt(start+i))<SUB>1969</SUB>> ]
-"10644" [label = <(GetValue,s-&gt;GetValue())<SUB>1972</SUB>> ]
-"10651" [label = <(CountUtf8Bytes,CountUtf8Bytes(chars + start, length))<SUB>1973</SUB>> ]
-"10659" [label = <(&lt;operator&gt;.addition,chars + start)<SUB>1974</SUB>> ]
-"10595" [label = <(&lt;operator&gt;.notEquals,(length) != 0)<SUB>1966</SUB>> ]
-"10598" [label = <(&lt;operator&gt;.equals,(buf) == nullptr)<SUB>1966</SUB>> ]
-"10603" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1966</SUB>> ]
-"10629" [label = <(&lt;operator&gt;.indirectIndexAccess,buf[i])<SUB>1969</SUB>> ]
-"10632" [label = <(CharAt,s-&gt;CharAt(start+i))<SUB>1969</SUB>> ]
-"10645" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetValue)<SUB>1972</SUB>> ]
-"10652" [label = <(&lt;operator&gt;.addition,chars + start)<SUB>1973</SUB>> ]
-"10604" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1966</SUB>> ]
-"10606" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1966</SUB>> ]
-"10633" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;CharAt)<SUB>1969</SUB>> ]
-"10636" [label = <(&lt;operator&gt;.addition,start+i)<SUB>1969</SUB>> ]
-"10647" [label = <(FIELD_IDENTIFIER,GetValue,GetValue)<SUB>1972</SUB>> ]
-"10635" [label = <(FIELD_IDENTIFIER,CharAt,CharAt)<SUB>1969</SUB>> ]
-"10516" [label = <(METHOD,GetStringUTFRegion)<SUB>1958</SUB>> ]
-"10663" [label = <(METHOD_RETURN,void)<SUB>1958</SUB>> ]
-  "10523" -> "10528" 
-  "10523" -> "10541" 
-  "10541" -> "10549" 
-  "10543" -> "10563" 
-  "10544" -> "10555" 
-  "10551" -> "10543" 
-  "10561" -> "10585" 
-  "10561" -> "10588" 
-  "10545" -> "10544" 
-  "10552" -> "10551" 
-  "10562" -> "10561" 
-  "10562" -> "10575" 
-  "10569" -> "10561" 
-  "10578" -> "10663" 
-  "10527" -> "10534" 
-  "10527" -> "10541" 
-  "10547" -> "10545" 
-  "10553" -> "10558" 
-  "10556" -> "10552" 
-  "10563" -> "10562" 
-  "10563" -> "10566" 
-  "10566" -> "10562" 
-  "10571" -> "10569" 
-  "10582" -> "10578" 
-  "10588" -> "10595" 
-  "10588" -> "10614" 
-  "10528" -> "10527" 
-  "10532" -> "10539" 
-  "10539" -> "10663" 
-  "10549" -> "10547" 
-  "10555" -> "10553" 
-  "10558" -> "10556" 
-  "10572" -> "10571" 
-  "10583" -> "10582" 
-  "10611" -> "10619" 
-  "10611" -> "10647" 
-  "10533" -> "10532" 
-  "10573" -> "10572" 
-  "10585" -> "10583" 
-  "10612" -> "10611" 
-  "10534" -> "10536" 
-  "10536" -> "10533" 
-  "10575" -> "10573" 
-  "10593" -> "10604" 
-  "10593" -> "10614" 
-  "10614" -> "10612" 
-  "10622" -> "10663" 
-  "10622" -> "10629" 
-  "10625" -> "10622" 
-  "10642" -> "10652" 
-  "10649" -> "10659" 
-  "10656" -> "10663" 
-  "10594" -> "10593" 
-  "10602" -> "10609" 
-  "10609" -> "10663" 
-  "10619" -> "10622" 
-  "10628" -> "10625" 
-  "10644" -> "10642" 
-  "10651" -> "10649" 
-  "10659" -> "10656" 
-  "10595" -> "10594" 
-  "10595" -> "10598" 
-  "10598" -> "10594" 
-  "10603" -> "10602" 
-  "10629" -> "10635" 
-  "10632" -> "10628" 
-  "10645" -> "10644" 
-  "10652" -> "10651" 
-  "10604" -> "10606" 
-  "10606" -> "10603" 
-  "10633" -> "10636" 
-  "10636" -> "10632" 
-  "10647" -> "10645" 
-  "10635" -> "10633" 
-  "10516" -> "10523" 
+digraph "ReleaseStringCritical" {  
+"10699" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string))<SUB>1911</SUB>> ]
+"10717" [label = <(soa,soa(env))<SUB>1912</SUB>> ]
+"10720" [label = <(&lt;operator&gt;.assignment,* heap = Runtime::Current()-&gt;GetHeap())<SUB>1913</SUB>> ]
+"10729" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::String&gt; s = soa.Decode&lt;mirror::String&gt;(java_string))<SUB>1914</SUB>> ]
+"10722" [label = <(GetHeap,Runtime::Current()-&gt;GetHeap())<SUB>1913</SUB>> ]
+"10730" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::String&gt; s)<SUB>1914</SUB>> ]
+"10737" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::String&gt;(java_string))<SUB>1914</SUB>> ]
+"10747" [label = <(IsMovableObject,heap-&gt;IsMovableObject(s))<SUB>1915</SUB>> ]
+"10776" [label = <(&lt;operator&gt;.logicalOr,s-&gt;IsCompressed() || (s-&gt;IsCompressed() == false &amp;&amp; s-&gt;GetValue() != chars))<SUB>1922</SUB>> ]
+"10723" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetHeap)<SUB>1913</SUB>> ]
+"10731" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::String)<SUB>1914</SUB>> ]
+"10738" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::String)<SUB>1914</SUB>> ]
+"10748" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;IsMovableObject)<SUB>1915</SUB>> ]
+"10777" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>1922</SUB>> ]
+"10781" [label = <(&lt;operator&gt;.logicalAnd,s-&gt;IsCompressed() == false &amp;&amp; s-&gt;GetValue() != chars)<SUB>1922</SUB>> ]
+"10795" [label = <(&lt;operator&gt;.delete,delete[] chars)<SUB>1923</SUB>> ]
+"10703" [label = <(UNLIKELY,UNLIKELY((java_string) == nullptr))<SUB>1911</SUB>> ]
+"10724" [label = <(Runtime::Current,Runtime::Current())<SUB>1913</SUB>> ]
+"10728" [label = <(FIELD_IDENTIFIER,GetHeap,GetHeap)<SUB>1913</SUB>> ]
+"10733" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1914</SUB>> ]
+"10739" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1914</SUB>> ]
+"10742" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1914</SUB>> ]
+"10750" [label = <(FIELD_IDENTIFIER,IsMovableObject,IsMovableObject)<SUB>1915</SUB>> ]
+"10754" [label = <(&lt;operator&gt;.logicalNot,!kUseReadBarrier)<SUB>1916</SUB>> ]
+"10778" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>1922</SUB>> ]
+"10782" [label = <(&lt;operator&gt;.equals,s-&gt;IsCompressed() == false)<SUB>1922</SUB>> ]
+"10788" [label = <(&lt;operator&gt;.notEquals,s-&gt;GetValue() != chars)<SUB>1922</SUB>> ]
+"10704" [label = <(&lt;operator&gt;.equals,(java_string) == nullptr)<SUB>1911</SUB>> ]
+"10708" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_string == null&quot;))<SUB>1911</SUB>> ]
+"10715" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string))<SUB>1911</SUB>> ]
+"10725" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>1913</SUB>> ]
+"10735" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1914</SUB>> ]
+"10741" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1914</SUB>> ]
+"10744" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1914</SUB>> ]
+"10757" [label = <(DecrementDisableMovingGC,heap-&gt;DecrementDisableMovingGC(soa.Self()))<SUB>1917</SUB>> ]
+"10780" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>1922</SUB>> ]
+"10783" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>1922</SUB>> ]
+"10789" [label = <(GetValue,s-&gt;GetValue())<SUB>1922</SUB>> ]
+"10709" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1911</SUB>> ]
+"10727" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>1913</SUB>> ]
+"10758" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;DecrementDisableMovingGC)<SUB>1917</SUB>> ]
+"10761" [label = <(Self,soa.Self())<SUB>1917</SUB>> ]
+"10767" [label = <(DecrementDisableThreadFlip,heap-&gt;DecrementDisableThreadFlip(soa.Self()))<SUB>1919</SUB>> ]
+"10784" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>1922</SUB>> ]
+"10790" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetValue)<SUB>1922</SUB>> ]
+"10710" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1911</SUB>> ]
+"10712" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1911</SUB>> ]
+"10760" [label = <(FIELD_IDENTIFIER,DecrementDisableMovingGC,DecrementDisableMovingGC)<SUB>1917</SUB>> ]
+"10762" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>1917</SUB>> ]
+"10768" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;DecrementDisableThreadFlip)<SUB>1919</SUB>> ]
+"10771" [label = <(Self,soa.Self())<SUB>1919</SUB>> ]
+"10786" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>1922</SUB>> ]
+"10792" [label = <(FIELD_IDENTIFIER,GetValue,GetValue)<SUB>1922</SUB>> ]
+"10764" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>1917</SUB>> ]
+"10770" [label = <(FIELD_IDENTIFIER,DecrementDisableThreadFlip,DecrementDisableThreadFlip)<SUB>1919</SUB>> ]
+"10772" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>1919</SUB>> ]
+"10774" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>1919</SUB>> ]
+"10694" [label = <(METHOD,ReleaseStringCritical)<SUB>1908</SUB>> ]
+"10797" [label = <(METHOD_RETURN,void)<SUB>1908</SUB>> ]
+  "10699" -> "10704" 
+  "10699" -> "10717" 
+  "10717" -> "10727" 
+  "10720" -> "10735" 
+  "10729" -> "10750" 
+  "10722" -> "10720" 
+  "10730" -> "10741" 
+  "10737" -> "10729" 
+  "10747" -> "10754" 
+  "10747" -> "10780" 
+  "10776" -> "10797" 
+  "10776" -> "10795" 
+  "10723" -> "10722" 
+  "10731" -> "10730" 
+  "10738" -> "10737" 
+  "10748" -> "10747" 
+  "10777" -> "10776" 
+  "10777" -> "10786" 
+  "10781" -> "10776" 
+  "10795" -> "10797" 
+  "10703" -> "10710" 
+  "10703" -> "10717" 
+  "10724" -> "10728" 
+  "10728" -> "10723" 
+  "10733" -> "10731" 
+  "10739" -> "10744" 
+  "10742" -> "10738" 
+  "10750" -> "10748" 
+  "10754" -> "10760" 
+  "10754" -> "10770" 
+  "10778" -> "10777" 
+  "10782" -> "10781" 
+  "10782" -> "10792" 
+  "10788" -> "10781" 
+  "10704" -> "10703" 
+  "10708" -> "10715" 
+  "10715" -> "10797" 
+  "10725" -> "10724" 
+  "10735" -> "10733" 
+  "10741" -> "10739" 
+  "10744" -> "10742" 
+  "10757" -> "10780" 
+  "10780" -> "10778" 
+  "10783" -> "10782" 
+  "10789" -> "10788" 
+  "10709" -> "10708" 
+  "10727" -> "10725" 
+  "10758" -> "10764" 
+  "10761" -> "10757" 
+  "10767" -> "10780" 
+  "10784" -> "10783" 
+  "10790" -> "10789" 
+  "10710" -> "10712" 
+  "10712" -> "10709" 
+  "10760" -> "10758" 
+  "10762" -> "10761" 
+  "10768" -> "10774" 
+  "10771" -> "10767" 
+  "10786" -> "10784" 
+  "10792" -> "10790" 
+  "10764" -> "10762" 
+  "10770" -> "10768" 
+  "10772" -> "10771" 
+  "10774" -> "10772" 
+  "10694" -> "10699" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/193-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/193-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/193-cfg.dot	2023-06-07 19:33:45.477394682 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/193-cfg.dot	2023-06-07 19:33:52.057393980 +0330
@@ -1,159 +1,103 @@
-digraph "GetStringChars" {  
-"10670" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_string))<SUB>1980</SUB>> ]
-"10689" [label = <(soa,soa(env))<SUB>1981</SUB>> ]
-"10691" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::String&gt; s = soa.Decode&lt;mirror::String&gt;(java_string))<SUB>1982</SUB>> ]
-"10709" [label = <(&lt;operator&gt;.assignment,* heap = Runtime::Current()-&gt;GetHeap())<SUB>1983</SUB>> ]
-"10804" [label = <(RETURN,return static_cast&lt;jchar*&gt;(s-&gt;GetValue());,return static_cast&lt;jchar*&gt;(s-&gt;GetValue());)<SUB>2002</SUB>> ]
-"10692" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::String&gt; s)<SUB>1982</SUB>> ]
-"10699" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::String&gt;(java_string))<SUB>1982</SUB>> ]
-"10711" [label = <(GetHeap,Runtime::Current()-&gt;GetHeap())<SUB>1983</SUB>> ]
-"10719" [label = <(&lt;operator&gt;.logicalOr,heap-&gt;IsMovableObject(s) || s-&gt;IsCompressed())<SUB>1984</SUB>> ]
-"10796" [label = <(&lt;operator&gt;.notEquals,is_copy != nullptr)<SUB>1999</SUB>> ]
-"10805" [label = <(&lt;operator&gt;.cast,static_cast&lt;jchar*&gt;(s-&gt;GetValue()))<SUB>2002</SUB>> ]
-"10693" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::String)<SUB>1982</SUB>> ]
-"10700" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::String)<SUB>1982</SUB>> ]
-"10712" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetHeap)<SUB>1983</SUB>> ]
-"10720" [label = <(IsMovableObject,heap-&gt;IsMovableObject(s))<SUB>1984</SUB>> ]
-"10725" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>1984</SUB>> ]
-"10731" [label = <(&lt;operator&gt;.assignment,* chars = new jchar[s-&gt;GetLength()])<SUB>1985</SUB>> ]
-"10793" [label = <(RETURN,return chars;,return chars;)<SUB>1997</SUB>> ]
-"10800" [label = <(&lt;operator&gt;.assignment,*is_copy = JNI_FALSE)<SUB>2000</SUB>> ]
-"10806" [label = <(UNKNOWN,jchar*,jchar*)<SUB>2002</SUB>> ]
-"10807" [label = <(GetValue,s-&gt;GetValue())<SUB>2002</SUB>> ]
-"10674" [label = <(UNLIKELY,UNLIKELY((java_string) == nullptr))<SUB>1980</SUB>> ]
-"10695" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1982</SUB>> ]
-"10701" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1982</SUB>> ]
-"10704" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1982</SUB>> ]
-"10713" [label = <(Runtime::Current,Runtime::Current())<SUB>1983</SUB>> ]
-"10717" [label = <(FIELD_IDENTIFIER,GetHeap,GetHeap)<SUB>1983</SUB>> ]
-"10721" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;IsMovableObject)<SUB>1984</SUB>> ]
-"10726" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>1984</SUB>> ]
-"10733" [label = <(&lt;operator&gt;.new,new jchar[s-&gt;GetLength()])<SUB>1985</SUB>> ]
-"10736" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>1986</SUB>> ]
-"10785" [label = <(&lt;operator&gt;.notEquals,is_copy != nullptr)<SUB>1994</SUB>> ]
-"10801" [label = <(&lt;operator&gt;.indirection,*is_copy)<SUB>2000</SUB>> ]
-"10808" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetValue)<SUB>2002</SUB>> ]
-"10675" [label = <(&lt;operator&gt;.equals,(java_string) == nullptr)<SUB>1980</SUB>> ]
-"10679" [label = <(CHECK_NON_NULL_ARGUMENT(java_string),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_string == null&quot;))<SUB>1980</SUB>> ]
-"10686" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_string),CHECK_NON_NULL_ARGUMENT(java_string))<SUB>1980</SUB>> ]
-"10697" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1982</SUB>> ]
-"10703" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1982</SUB>> ]
-"10706" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1982</SUB>> ]
-"10714" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>1983</SUB>> ]
-"10723" [label = <(FIELD_IDENTIFIER,IsMovableObject,IsMovableObject)<SUB>1984</SUB>> ]
-"10728" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>1984</SUB>> ]
-"10737" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>1986</SUB>> ]
-"10742" [label = <(&lt;operator&gt;.assignment,length = s-&gt;GetLength())<SUB>1987</SUB>> ]
-"10789" [label = <(&lt;operator&gt;.assignment,*is_copy = JNI_TRUE)<SUB>1995</SUB>> ]
-"10810" [label = <(FIELD_IDENTIFIER,GetValue,GetValue)<SUB>2002</SUB>> ]
-"10680" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1980</SUB>> ]
-"10716" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>1983</SUB>> ]
-"10739" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>1986</SUB>> ]
-"10744" [label = <(GetLength,s-&gt;GetLength())<SUB>1987</SUB>> ]
-"10754" [label = <(&lt;operator&gt;.lessThan,i &lt; length)<SUB>1988</SUB>> ]
-"10757" [label = <(&lt;operator&gt;.preIncrement,++i)<SUB>1988</SUB>> ]
-"10771" [label = <(memcpy,memcpy(chars, s-&gt;GetValue(), sizeof(jchar) * s-&gt;GetLength()))<SUB>1992</SUB>> ]
-"10790" [label = <(&lt;operator&gt;.indirection,*is_copy)<SUB>1995</SUB>> ]
-"10681" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1980</SUB>> ]
-"10683" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1980</SUB>> ]
-"10745" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetLength)<SUB>1987</SUB>> ]
-"10751" [label = <(&lt;operator&gt;.assignment,i = 0)<SUB>1988</SUB>> ]
-"10760" [label = <(&lt;operator&gt;.assignment,chars[i] = s-&gt;CharAt(i))<SUB>1989</SUB>> ]
-"10773" [label = <(GetValue,s-&gt;GetValue())<SUB>1992</SUB>> ]
-"10777" [label = <(&lt;operator&gt;.multiplication,sizeof(jchar) * s-&gt;GetLength())<SUB>1992</SUB>> ]
-"10747" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>1987</SUB>> ]
-"10761" [label = <(&lt;operator&gt;.indirectIndexAccess,chars[i])<SUB>1989</SUB>> ]
-"10764" [label = <(CharAt,s-&gt;CharAt(i))<SUB>1989</SUB>> ]
-"10774" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetValue)<SUB>1992</SUB>> ]
-"10778" [label = <(&lt;operator&gt;.sizeOf,sizeof(jchar))<SUB>1992</SUB>> ]
-"10780" [label = <(GetLength,s-&gt;GetLength())<SUB>1992</SUB>> ]
-"10765" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;CharAt)<SUB>1989</SUB>> ]
-"10776" [label = <(FIELD_IDENTIFIER,GetValue,GetValue)<SUB>1992</SUB>> ]
-"10781" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetLength)<SUB>1992</SUB>> ]
-"10767" [label = <(FIELD_IDENTIFIER,CharAt,CharAt)<SUB>1989</SUB>> ]
-"10783" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>1992</SUB>> ]
-"10665" [label = <(METHOD,GetStringChars)<SUB>1979</SUB>> ]
-"10811" [label = <(METHOD_RETURN,jchar)<SUB>1979</SUB>> ]
-  "10670" -> "10675" 
-  "10670" -> "10689" 
-  "10689" -> "10697" 
-  "10691" -> "10716" 
-  "10709" -> "10723" 
-  "10804" -> "10811" 
-  "10692" -> "10703" 
-  "10699" -> "10691" 
-  "10711" -> "10709" 
-  "10719" -> "10733" 
-  "10719" -> "10796" 
-  "10796" -> "10806" 
-  "10796" -> "10801" 
-  "10805" -> "10804" 
-  "10693" -> "10692" 
-  "10700" -> "10699" 
-  "10712" -> "10711" 
-  "10720" -> "10719" 
-  "10720" -> "10728" 
-  "10725" -> "10719" 
-  "10731" -> "10739" 
-  "10793" -> "10811" 
-  "10800" -> "10806" 
-  "10806" -> "10810" 
-  "10807" -> "10805" 
-  "10674" -> "10681" 
-  "10674" -> "10689" 
-  "10695" -> "10693" 
-  "10701" -> "10706" 
-  "10704" -> "10700" 
-  "10713" -> "10717" 
-  "10717" -> "10712" 
-  "10721" -> "10720" 
-  "10726" -> "10725" 
-  "10733" -> "10731" 
-  "10736" -> "10747" 
-  "10736" -> "10776" 
-  "10785" -> "10790" 
-  "10785" -> "10793" 
-  "10801" -> "10800" 
-  "10808" -> "10807" 
-  "10675" -> "10674" 
-  "10679" -> "10686" 
-  "10686" -> "10811" 
-  "10697" -> "10695" 
-  "10703" -> "10701" 
-  "10706" -> "10704" 
-  "10714" -> "10713" 
-  "10723" -> "10721" 
-  "10728" -> "10726" 
-  "10737" -> "10736" 
-  "10742" -> "10751" 
-  "10789" -> "10793" 
-  "10810" -> "10808" 
-  "10680" -> "10679" 
-  "10716" -> "10714" 
-  "10739" -> "10737" 
-  "10744" -> "10742" 
-  "10754" -> "10761" 
-  "10754" -> "10785" 
-  "10757" -> "10754" 
-  "10771" -> "10785" 
-  "10790" -> "10789" 
-  "10681" -> "10683" 
-  "10683" -> "10680" 
-  "10745" -> "10744" 
-  "10751" -> "10754" 
-  "10760" -> "10757" 
-  "10773" -> "10778" 
-  "10777" -> "10771" 
-  "10747" -> "10745" 
-  "10761" -> "10767" 
-  "10764" -> "10760" 
-  "10774" -> "10773" 
-  "10778" -> "10783" 
-  "10780" -> "10777" 
-  "10765" -> "10764" 
-  "10776" -> "10774" 
-  "10781" -> "10780" 
-  "10767" -> "10765" 
-  "10783" -> "10781" 
-  "10665" -> "10670" 
+digraph "GetStringUTFChars" {  
+"10821" [label = <(soa,soa(env))<SUB>1934</SUB>> ]
+"10823" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::String&gt; s = soa.Decode&lt;mirror::String&gt;(java_string))<SUB>1935</SUB>> ]
+"10841" [label = <(&lt;operator&gt;.assignment,byte_count = s-&gt;GetUtfLength())<SUB>1936</SUB>> ]
+"10848" [label = <(&lt;operator&gt;.assignment,* bytes = new char[byte_count + 1])<SUB>1937</SUB>> ]
+"10852" [label = <(CHECK,CHECK(bytes != nullptr))<SUB>1938</SUB>> ]
+"10900" [label = <(&lt;operator&gt;.assignment,bytes[byte_count] = '\0')<SUB>1947</SUB>> ]
+"10905" [label = <(RETURN,return bytes;,return bytes;)<SUB>1948</SUB>> ]
+"10805" [label = <(&lt;operator&gt;.equals,java_string == nullptr)<SUB>1928</SUB>> ]
+"10812" [label = <(&lt;operator&gt;.notEquals,is_copy != nullptr)<SUB>1931</SUB>> ]
+"10824" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::String&gt; s)<SUB>1935</SUB>> ]
+"10831" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::String&gt;(java_string))<SUB>1935</SUB>> ]
+"10843" [label = <(GetUtfLength,s-&gt;GetUtfLength())<SUB>1936</SUB>> ]
+"10850" [label = <(&lt;operator&gt;.new,new char[byte_count + 1])<SUB>1937</SUB>> ]
+"10853" [label = <(&lt;operator&gt;.notEquals,bytes != nullptr)<SUB>1938</SUB>> ]
+"10857" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>1939</SUB>> ]
+"10901" [label = <(&lt;operator&gt;.indirectIndexAccess,bytes[byte_count])<SUB>1947</SUB>> ]
+"10809" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>1929</SUB>> ]
+"10816" [label = <(&lt;operator&gt;.assignment,*is_copy = JNI_TRUE)<SUB>1932</SUB>> ]
+"10825" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::String)<SUB>1935</SUB>> ]
+"10832" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::String)<SUB>1935</SUB>> ]
+"10844" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetUtfLength)<SUB>1936</SUB>> ]
+"10858" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>1939</SUB>> ]
+"10817" [label = <(&lt;operator&gt;.indirection,*is_copy)<SUB>1932</SUB>> ]
+"10827" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1935</SUB>> ]
+"10833" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1935</SUB>> ]
+"10836" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1935</SUB>> ]
+"10846" [label = <(FIELD_IDENTIFIER,GetUtfLength,GetUtfLength)<SUB>1936</SUB>> ]
+"10860" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>1939</SUB>> ]
+"10868" [label = <(&lt;operator&gt;.lessThan,i &lt; byte_count)<SUB>1940</SUB>> ]
+"10871" [label = <(&lt;operator&gt;.preIncrement,++i)<SUB>1940</SUB>> ]
+"10886" [label = <(&lt;operator&gt;.assignment,* chars = s-&gt;GetValue())<SUB>1944</SUB>> ]
+"10892" [label = <(ConvertUtf16ToModifiedUtf8,ConvertUtf16ToModifiedUtf8(bytes, byte_count, chars, s-&gt;GetLength()))<SUB>1945</SUB>> ]
+"10829" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1935</SUB>> ]
+"10835" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1935</SUB>> ]
+"10838" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1935</SUB>> ]
+"10865" [label = <(&lt;operator&gt;.assignment,i = 0)<SUB>1940</SUB>> ]
+"10874" [label = <(&lt;operator&gt;.assignment,bytes[i] = s-&gt;CharAt(i))<SUB>1941</SUB>> ]
+"10888" [label = <(GetValue,s-&gt;GetValue())<SUB>1944</SUB>> ]
+"10896" [label = <(GetLength,s-&gt;GetLength())<SUB>1945</SUB>> ]
+"10875" [label = <(&lt;operator&gt;.indirectIndexAccess,bytes[i])<SUB>1941</SUB>> ]
+"10878" [label = <(CharAt,s-&gt;CharAt(i))<SUB>1941</SUB>> ]
+"10889" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetValue)<SUB>1944</SUB>> ]
+"10897" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetLength)<SUB>1945</SUB>> ]
+"10879" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;CharAt)<SUB>1941</SUB>> ]
+"10891" [label = <(FIELD_IDENTIFIER,GetValue,GetValue)<SUB>1944</SUB>> ]
+"10899" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>1945</SUB>> ]
+"10881" [label = <(FIELD_IDENTIFIER,CharAt,CharAt)<SUB>1941</SUB>> ]
+"10799" [label = <(METHOD,GetStringUTFChars)<SUB>1927</SUB>> ]
+"10907" [label = <(METHOD_RETURN,const char*)<SUB>1927</SUB>> ]
+  "10821" -> "10829" 
+  "10823" -> "10846" 
+  "10841" -> "10850" 
+  "10848" -> "10853" 
+  "10852" -> "10860" 
+  "10900" -> "10905" 
+  "10905" -> "10907" 
+  "10805" -> "10809" 
+  "10805" -> "10812" 
+  "10812" -> "10817" 
+  "10812" -> "10821" 
+  "10824" -> "10835" 
+  "10831" -> "10823" 
+  "10843" -> "10841" 
+  "10850" -> "10848" 
+  "10853" -> "10852" 
+  "10857" -> "10865" 
+  "10857" -> "10891" 
+  "10901" -> "10900" 
+  "10809" -> "10907" 
+  "10816" -> "10821" 
+  "10825" -> "10824" 
+  "10832" -> "10831" 
+  "10844" -> "10843" 
+  "10858" -> "10857" 
+  "10817" -> "10816" 
+  "10827" -> "10825" 
+  "10833" -> "10838" 
+  "10836" -> "10832" 
+  "10846" -> "10844" 
+  "10860" -> "10858" 
+  "10868" -> "10875" 
+  "10868" -> "10901" 
+  "10871" -> "10868" 
+  "10886" -> "10899" 
+  "10892" -> "10901" 
+  "10829" -> "10827" 
+  "10835" -> "10833" 
+  "10838" -> "10836" 
+  "10865" -> "10868" 
+  "10874" -> "10871" 
+  "10888" -> "10886" 
+  "10896" -> "10892" 
+  "10875" -> "10881" 
+  "10878" -> "10874" 
+  "10889" -> "10888" 
+  "10897" -> "10896" 
+  "10879" -> "10878" 
+  "10891" -> "10889" 
+  "10899" -> "10897" 
+  "10881" -> "10879" 
+  "10799" -> "10805" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/194-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/194-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/194-cfg.dot	2023-06-07 19:33:45.477394682 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/194-cfg.dot	2023-06-07 19:33:52.057393980 +0330
@@ -1,78 +1,7 @@
-digraph "ReleaseStringChars" {  
-"10818" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string))<SUB>2006</SUB>> ]
-"10836" [label = <(soa,soa(env))<SUB>2007</SUB>> ]
-"10838" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::String&gt; s = soa.Decode&lt;mirror::String&gt;(java_string))<SUB>2008</SUB>> ]
-"10839" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::String&gt; s)<SUB>2008</SUB>> ]
-"10846" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::String&gt;(java_string))<SUB>2008</SUB>> ]
-"10856" [label = <(&lt;operator&gt;.logicalOr,s-&gt;IsCompressed() || (s-&gt;IsCompressed() == false &amp;&amp; chars != s-&gt;GetValue()))<SUB>2009</SUB>> ]
-"10840" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::String)<SUB>2008</SUB>> ]
-"10847" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::String)<SUB>2008</SUB>> ]
-"10857" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>2009</SUB>> ]
-"10861" [label = <(&lt;operator&gt;.logicalAnd,s-&gt;IsCompressed() == false &amp;&amp; chars != s-&gt;GetValue())<SUB>2009</SUB>> ]
-"10875" [label = <(&lt;operator&gt;.delete,delete[] chars)<SUB>2010</SUB>> ]
-"10822" [label = <(UNLIKELY,UNLIKELY((java_string) == nullptr))<SUB>2006</SUB>> ]
-"10842" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>2008</SUB>> ]
-"10848" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2008</SUB>> ]
-"10851" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>2008</SUB>> ]
-"10858" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>2009</SUB>> ]
-"10862" [label = <(&lt;operator&gt;.equals,s-&gt;IsCompressed() == false)<SUB>2009</SUB>> ]
-"10868" [label = <(&lt;operator&gt;.notEquals,chars != s-&gt;GetValue())<SUB>2009</SUB>> ]
-"10823" [label = <(&lt;operator&gt;.equals,(java_string) == nullptr)<SUB>2006</SUB>> ]
-"10827" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_string == null&quot;))<SUB>2006</SUB>> ]
-"10834" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string))<SUB>2006</SUB>> ]
-"10844" [label = <(FIELD_IDENTIFIER,String,String)<SUB>2008</SUB>> ]
-"10850" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2008</SUB>> ]
-"10853" [label = <(FIELD_IDENTIFIER,String,String)<SUB>2008</SUB>> ]
-"10860" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>2009</SUB>> ]
-"10863" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>2009</SUB>> ]
-"10870" [label = <(GetValue,s-&gt;GetValue())<SUB>2009</SUB>> ]
-"10828" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2006</SUB>> ]
-"10864" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>2009</SUB>> ]
-"10871" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetValue)<SUB>2009</SUB>> ]
-"10829" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2006</SUB>> ]
-"10831" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2006</SUB>> ]
-"10866" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>2009</SUB>> ]
-"10873" [label = <(FIELD_IDENTIFIER,GetValue,GetValue)<SUB>2009</SUB>> ]
-"10813" [label = <(METHOD,ReleaseStringChars)<SUB>2005</SUB>> ]
-"10877" [label = <(METHOD_RETURN,void)<SUB>2005</SUB>> ]
-  "10818" -> "10823" 
-  "10818" -> "10836" 
-  "10836" -> "10844" 
-  "10838" -> "10860" 
-  "10839" -> "10850" 
-  "10846" -> "10838" 
-  "10856" -> "10877" 
-  "10856" -> "10875" 
-  "10840" -> "10839" 
-  "10847" -> "10846" 
-  "10857" -> "10856" 
-  "10857" -> "10866" 
-  "10861" -> "10856" 
-  "10875" -> "10877" 
-  "10822" -> "10829" 
-  "10822" -> "10836" 
-  "10842" -> "10840" 
-  "10848" -> "10853" 
-  "10851" -> "10847" 
-  "10858" -> "10857" 
-  "10862" -> "10861" 
-  "10862" -> "10873" 
-  "10868" -> "10861" 
-  "10823" -> "10822" 
-  "10827" -> "10834" 
-  "10834" -> "10877" 
-  "10844" -> "10842" 
-  "10850" -> "10848" 
-  "10853" -> "10851" 
-  "10860" -> "10858" 
-  "10863" -> "10862" 
-  "10870" -> "10868" 
-  "10828" -> "10827" 
-  "10864" -> "10863" 
-  "10871" -> "10870" 
-  "10829" -> "10831" 
-  "10831" -> "10828" 
-  "10866" -> "10864" 
-  "10873" -> "10871" 
-  "10813" -> "10818" 
+digraph "ReleaseStringUTFChars" {  
+"10914" [label = <(&lt;operator&gt;.delete,delete[] chars)<SUB>1952</SUB>> ]
+"10909" [label = <(METHOD,ReleaseStringUTFChars)<SUB>1951</SUB>> ]
+"10916" [label = <(METHOD_RETURN,void)<SUB>1951</SUB>> ]
+  "10914" -> "10916" 
+  "10909" -> "10914" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/195-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/195-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/195-cfg.dot	2023-06-07 19:33:45.477394682 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/195-cfg.dot	2023-06-07 19:33:52.057393980 +0330
@@ -1,189 +1,100 @@
-digraph "GetStringCritical" {  
-"10884" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_string))<SUB>2015</SUB>> ]
-"10903" [label = <(soa,soa(env))<SUB>2016</SUB>> ]
-"10905" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::String&gt; s = soa.Decode&lt;mirror::String&gt;(java_string))<SUB>2017</SUB>> ]
-"10923" [label = <(&lt;operator&gt;.assignment,* heap = Runtime::Current()-&gt;GetHeap())<SUB>2018</SUB>> ]
-"10906" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::String&gt; s)<SUB>2017</SUB>> ]
-"10913" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::String&gt;(java_string))<SUB>2017</SUB>> ]
-"10925" [label = <(GetHeap,Runtime::Current()-&gt;GetHeap())<SUB>2018</SUB>> ]
-"10933" [label = <(IsMovableObject,heap-&gt;IsMovableObject(s))<SUB>2019</SUB>> ]
-"10984" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>2030</SUB>> ]
-"10907" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::String)<SUB>2017</SUB>> ]
-"10914" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::String)<SUB>2017</SUB>> ]
-"10926" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetHeap)<SUB>2018</SUB>> ]
-"10934" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;IsMovableObject)<SUB>2019</SUB>> ]
-"10939" [label = <(&lt;operator&gt;.greaterThan,StackHandleScope&lt;1&gt; hs(soa.Self()))<SUB>2020</SUB>> ]
-"10948" [label = <(&lt;operator&gt;.greaterThan,HandleWrapperObjPtr&lt;mirror::String&gt; h(hs.NewHandleWrapper(&amp;s)))<SUB>2021</SUB>> ]
-"10985" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>2030</SUB>> ]
-"10999" [label = <(&lt;operator&gt;.assignment,length = s-&gt;GetLength())<SUB>2034</SUB>> ]
-"11006" [label = <(&lt;operator&gt;.assignment,* chars = new jchar[length])<SUB>2035</SUB>> ]
-"11031" [label = <(RETURN,return chars;,return chars;)<SUB>2039</SUB>> ]
-"10888" [label = <(UNLIKELY,UNLIKELY((java_string) == nullptr))<SUB>2015</SUB>> ]
-"10909" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>2017</SUB>> ]
-"10915" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2017</SUB>> ]
-"10918" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>2017</SUB>> ]
-"10927" [label = <(Runtime::Current,Runtime::Current())<SUB>2018</SUB>> ]
-"10931" [label = <(FIELD_IDENTIFIER,GetHeap,GetHeap)<SUB>2018</SUB>> ]
-"10936" [label = <(FIELD_IDENTIFIER,IsMovableObject,IsMovableObject)<SUB>2019</SUB>> ]
-"10940" [label = <(&lt;operator&gt;.lessThan,StackHandleScope&lt;1)<SUB>2020</SUB>> ]
-"10943" [label = <(hs,hs(soa.Self()))<SUB>2020</SUB>> ]
-"10949" [label = <(&lt;operator&gt;.lessThan,HandleWrapperObjPtr&lt;mirror::String)<SUB>2021</SUB>> ]
-"10954" [label = <(h,h(hs.NewHandleWrapper(&amp;s)))<SUB>2021</SUB>> ]
-"10962" [label = <(&lt;operator&gt;.logicalNot,!kUseReadBarrier)<SUB>2022</SUB>> ]
-"10987" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>2030</SUB>> ]
-"10990" [label = <(&lt;operator&gt;.notEquals,is_copy != nullptr)<SUB>2031</SUB>> ]
-"11001" [label = <(GetLength,s-&gt;GetLength())<SUB>2034</SUB>> ]
-"11008" [label = <(&lt;operator&gt;.new,new jchar[length])<SUB>2035</SUB>> ]
-"11016" [label = <(&lt;operator&gt;.lessThan,i &lt; length)<SUB>2036</SUB>> ]
-"11019" [label = <(&lt;operator&gt;.preIncrement,++i)<SUB>2036</SUB>> ]
-"11044" [label = <(RETURN,return static_cast&lt;jchar*&gt;(s-&gt;GetValue());,return static_cast&lt;jchar*&gt;(s-&gt;GetValue());)<SUB>2044</SUB>> ]
-"10889" [label = <(&lt;operator&gt;.equals,(java_string) == nullptr)<SUB>2015</SUB>> ]
-"10893" [label = <(CHECK_NON_NULL_ARGUMENT(java_string),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_string == null&quot;))<SUB>2015</SUB>> ]
-"10900" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_string),CHECK_NON_NULL_ARGUMENT(java_string))<SUB>2015</SUB>> ]
-"10911" [label = <(FIELD_IDENTIFIER,String,String)<SUB>2017</SUB>> ]
-"10917" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2017</SUB>> ]
-"10920" [label = <(FIELD_IDENTIFIER,String,String)<SUB>2017</SUB>> ]
-"10928" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>2018</SUB>> ]
-"10944" [label = <(Self,soa.Self())<SUB>2020</SUB>> ]
-"10951" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>2021</SUB>> ]
-"10955" [label = <(NewHandleWrapper,hs.NewHandleWrapper(&amp;s))<SUB>2021</SUB>> ]
-"10965" [label = <(IncrementDisableMovingGC,heap-&gt;IncrementDisableMovingGC(soa.Self()))<SUB>2023</SUB>> ]
-"10994" [label = <(&lt;operator&gt;.assignment,*is_copy = JNI_TRUE)<SUB>2032</SUB>> ]
-"11002" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetLength)<SUB>2034</SUB>> ]
-"11013" [label = <(&lt;operator&gt;.assignment,i = 0)<SUB>2036</SUB>> ]
-"11022" [label = <(&lt;operator&gt;.assignment,chars[i] = s-&gt;CharAt(i))<SUB>2037</SUB>> ]
-"11036" [label = <(&lt;operator&gt;.notEquals,is_copy != nullptr)<SUB>2041</SUB>> ]
-"11045" [label = <(&lt;operator&gt;.cast,static_cast&lt;jchar*&gt;(s-&gt;GetValue()))<SUB>2044</SUB>> ]
-"10894" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2015</SUB>> ]
-"10930" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>2018</SUB>> ]
-"10945" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>2020</SUB>> ]
-"10953" [label = <(FIELD_IDENTIFIER,String,String)<SUB>2021</SUB>> ]
-"10956" [label = <(&lt;operator&gt;.fieldAccess,hs.NewHandleWrapper)<SUB>2021</SUB>> ]
-"10959" [label = <(&lt;operator&gt;.addressOf,&amp;s)<SUB>2021</SUB>> ]
-"10966" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;IncrementDisableMovingGC)<SUB>2023</SUB>> ]
-"10969" [label = <(Self,soa.Self())<SUB>2023</SUB>> ]
-"10975" [label = <(IncrementDisableThreadFlip,heap-&gt;IncrementDisableThreadFlip(soa.Self()))<SUB>2027</SUB>> ]
-"10995" [label = <(&lt;operator&gt;.indirection,*is_copy)<SUB>2032</SUB>> ]
-"11004" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>2034</SUB>> ]
-"11023" [label = <(&lt;operator&gt;.indirectIndexAccess,chars[i])<SUB>2037</SUB>> ]
-"11026" [label = <(CharAt,s-&gt;CharAt(i))<SUB>2037</SUB>> ]
-"11040" [label = <(&lt;operator&gt;.assignment,*is_copy = JNI_FALSE)<SUB>2042</SUB>> ]
-"11046" [label = <(UNKNOWN,jchar*,jchar*)<SUB>2044</SUB>> ]
-"11047" [label = <(GetValue,s-&gt;GetValue())<SUB>2044</SUB>> ]
-"10895" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2015</SUB>> ]
-"10897" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2015</SUB>> ]
-"10947" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>2020</SUB>> ]
-"10958" [label = <(FIELD_IDENTIFIER,NewHandleWrapper,NewHandleWrapper)<SUB>2021</SUB>> ]
-"10968" [label = <(FIELD_IDENTIFIER,IncrementDisableMovingGC,IncrementDisableMovingGC)<SUB>2023</SUB>> ]
-"10970" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>2023</SUB>> ]
-"10976" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;IncrementDisableThreadFlip)<SUB>2027</SUB>> ]
-"10979" [label = <(Self,soa.Self())<SUB>2027</SUB>> ]
-"11027" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;CharAt)<SUB>2037</SUB>> ]
-"11041" [label = <(&lt;operator&gt;.indirection,*is_copy)<SUB>2042</SUB>> ]
-"11048" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetValue)<SUB>2044</SUB>> ]
-"10972" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>2023</SUB>> ]
-"10978" [label = <(FIELD_IDENTIFIER,IncrementDisableThreadFlip,IncrementDisableThreadFlip)<SUB>2027</SUB>> ]
-"10980" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>2027</SUB>> ]
-"11029" [label = <(FIELD_IDENTIFIER,CharAt,CharAt)<SUB>2037</SUB>> ]
-"11050" [label = <(FIELD_IDENTIFIER,GetValue,GetValue)<SUB>2044</SUB>> ]
-"10982" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>2027</SUB>> ]
-"10879" [label = <(METHOD,GetStringCritical)<SUB>2014</SUB>> ]
-"11051" [label = <(METHOD_RETURN,jchar)<SUB>2014</SUB>> ]
-  "10884" -> "10889" 
-  "10884" -> "10903" 
-  "10903" -> "10911" 
-  "10905" -> "10930" 
-  "10923" -> "10936" 
-  "10906" -> "10917" 
-  "10913" -> "10905" 
-  "10925" -> "10923" 
-  "10933" -> "10940" 
-  "10933" -> "10987" 
-  "10984" -> "10990" 
-  "10984" -> "11036" 
-  "10907" -> "10906" 
-  "10914" -> "10913" 
-  "10926" -> "10925" 
-  "10934" -> "10933" 
-  "10939" -> "10953" 
-  "10948" -> "10962" 
-  "10985" -> "10984" 
-  "10999" -> "11008" 
-  "11006" -> "11013" 
-  "11031" -> "11051" 
-  "10888" -> "10895" 
-  "10888" -> "10903" 
-  "10909" -> "10907" 
-  "10915" -> "10920" 
-  "10918" -> "10914" 
-  "10927" -> "10931" 
-  "10931" -> "10926" 
-  "10936" -> "10934" 
-  "10940" -> "10947" 
-  "10943" -> "10939" 
-  "10949" -> "10958" 
-  "10954" -> "10948" 
-  "10962" -> "10968" 
-  "10962" -> "10978" 
-  "10987" -> "10985" 
-  "10990" -> "10995" 
-  "10990" -> "11004" 
-  "11001" -> "10999" 
-  "11008" -> "11006" 
-  "11016" -> "11023" 
-  "11016" -> "11031" 
-  "11019" -> "11016" 
-  "11044" -> "11051" 
-  "10889" -> "10888" 
-  "10893" -> "10900" 
-  "10900" -> "11051" 
-  "10911" -> "10909" 
-  "10917" -> "10915" 
-  "10920" -> "10918" 
-  "10928" -> "10927" 
-  "10944" -> "10943" 
-  "10951" -> "10949" 
-  "10955" -> "10954" 
-  "10965" -> "10987" 
-  "10994" -> "11004" 
-  "11002" -> "11001" 
-  "11013" -> "11016" 
-  "11022" -> "11019" 
-  "11036" -> "11046" 
-  "11036" -> "11041" 
-  "11045" -> "11044" 
-  "10894" -> "10893" 
-  "10930" -> "10928" 
+digraph "GetArrayLength" {  
+"10922" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_array))<SUB>1956</SUB>> ]
+"10941" [label = <(soa,soa(env))<SUB>1957</SUB>> ]
+"10943" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; obj = soa.Decode&lt;mirror::Object&gt;(java_array))<SUB>1958</SUB>> ]
+"10987" [label = <(&lt;operator&gt;.assignment,* array = obj-&gt;AsArray())<SUB>1963</SUB>> ]
+"10993" [label = <(RETURN,return array-&gt;GetLength();,return array-&gt;GetLength();)<SUB>1964</SUB>> ]
+"10944" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; obj)<SUB>1958</SUB>> ]
+"10951" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(java_array))<SUB>1958</SUB>> ]
+"10961" [label = <(UNLIKELY,UNLIKELY(!obj-&gt;IsArrayInstance()))<SUB>1959</SUB>> ]
+"10989" [label = <(AsArray,obj-&gt;AsArray())<SUB>1963</SUB>> ]
+"10994" [label = <(GetLength,array-&gt;GetLength())<SUB>1964</SUB>> ]
+"10945" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>1958</SUB>> ]
+"10952" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>1958</SUB>> ]
+"10962" [label = <(&lt;operator&gt;.logicalNot,!obj-&gt;IsArrayInstance())<SUB>1959</SUB>> ]
+"10968" [label = <(JniAbortF,soa.Vm()-&gt;JniAbortF(&quot;GetArrayLength&quot;, &quot;not an array: %s&quot;, obj-&gt;PrettyTypeOf().c_str()))<SUB>1960</SUB>> ]
+"10984" [label = <(RETURN,return 0;,return 0;)<SUB>1961</SUB>> ]
+"10990" [label = <(&lt;operator&gt;.indirectFieldAccess,obj-&gt;AsArray)<SUB>1963</SUB>> ]
+"10995" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetLength)<SUB>1964</SUB>> ]
+"10926" [label = <(UNLIKELY,UNLIKELY((java_array) == nullptr))<SUB>1956</SUB>> ]
+"10947" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1958</SUB>> ]
+"10953" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1958</SUB>> ]
+"10956" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1958</SUB>> ]
+"10963" [label = <(IsArrayInstance,obj-&gt;IsArrayInstance())<SUB>1959</SUB>> ]
+"10969" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Vm()-&gt;JniAbortF)<SUB>1960</SUB>> ]
+"10977" [label = <(c_str,obj-&gt;PrettyTypeOf().c_str())<SUB>1960</SUB>> ]
+"10992" [label = <(FIELD_IDENTIFIER,AsArray,AsArray)<SUB>1963</SUB>> ]
+"10997" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>1964</SUB>> ]
+"10927" [label = <(&lt;operator&gt;.equals,(java_array) == nullptr)<SUB>1956</SUB>> ]
+"10931" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_array),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_array == null&quot;))<SUB>1956</SUB>> ]
+"10938" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_array),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_array))<SUB>1956</SUB>> ]
+"10949" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1958</SUB>> ]
+"10955" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1958</SUB>> ]
+"10958" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1958</SUB>> ]
+"10964" [label = <(&lt;operator&gt;.indirectFieldAccess,obj-&gt;IsArrayInstance)<SUB>1959</SUB>> ]
+"10970" [label = <(Vm,soa.Vm())<SUB>1960</SUB>> ]
+"10974" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1960</SUB>> ]
+"10978" [label = <(&lt;operator&gt;.fieldAccess,obj-&gt;PrettyTypeOf().c_str)<SUB>1960</SUB>> ]
+"10932" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1956</SUB>> ]
+"10966" [label = <(FIELD_IDENTIFIER,IsArrayInstance,IsArrayInstance)<SUB>1959</SUB>> ]
+"10971" [label = <(&lt;operator&gt;.fieldAccess,soa.Vm)<SUB>1960</SUB>> ]
+"10979" [label = <(PrettyTypeOf,obj-&gt;PrettyTypeOf())<SUB>1960</SUB>> ]
+"10983" [label = <(FIELD_IDENTIFIER,c_str,c_str)<SUB>1960</SUB>> ]
+"10933" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1956</SUB>> ]
+"10935" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1956</SUB>> ]
+"10973" [label = <(FIELD_IDENTIFIER,Vm,Vm)<SUB>1960</SUB>> ]
+"10980" [label = <(&lt;operator&gt;.indirectFieldAccess,obj-&gt;PrettyTypeOf)<SUB>1960</SUB>> ]
+"10982" [label = <(FIELD_IDENTIFIER,PrettyTypeOf,PrettyTypeOf)<SUB>1960</SUB>> ]
+"10918" [label = <(METHOD,GetArrayLength)<SUB>1955</SUB>> ]
+"10998" [label = <(METHOD_RETURN,jsize)<SUB>1955</SUB>> ]
+  "10922" -> "10927" 
+  "10922" -> "10941" 
+  "10941" -> "10949" 
+  "10943" -> "10966" 
+  "10987" -> "10997" 
+  "10993" -> "10998" 
+  "10944" -> "10955" 
+  "10951" -> "10943" 
+  "10961" -> "10973" 
+  "10961" -> "10992" 
+  "10989" -> "10987" 
+  "10994" -> "10993" 
   "10945" -> "10944" 
-  "10953" -> "10951" 
-  "10956" -> "10959" 
-  "10959" -> "10955" 
-  "10966" -> "10972" 
-  "10969" -> "10965" 
-  "10975" -> "10987" 
+  "10952" -> "10951" 
+  "10962" -> "10961" 
+  "10968" -> "10984" 
+  "10984" -> "10998" 
+  "10990" -> "10989" 
   "10995" -> "10994" 
-  "11004" -> "11002" 
-  "11023" -> "11029" 
-  "11026" -> "11022" 
-  "11040" -> "11046" 
-  "11046" -> "11050" 
-  "11047" -> "11045" 
-  "10895" -> "10897" 
-  "10897" -> "10894" 
+  "10926" -> "10933" 
+  "10926" -> "10941" 
   "10947" -> "10945" 
+  "10953" -> "10958" 
+  "10956" -> "10952" 
+  "10963" -> "10962" 
+  "10969" -> "10982" 
+  "10977" -> "10968" 
+  "10992" -> "10990" 
+  "10997" -> "10995" 
+  "10927" -> "10926" 
+  "10931" -> "10938" 
+  "10938" -> "10998" 
+  "10949" -> "10947" 
+  "10955" -> "10953" 
   "10958" -> "10956" 
-  "10968" -> "10966" 
-  "10970" -> "10969" 
-  "10976" -> "10982" 
-  "10979" -> "10975" 
-  "11027" -> "11026" 
-  "11041" -> "11040" 
-  "11048" -> "11047" 
-  "10972" -> "10970" 
-  "10978" -> "10976" 
+  "10964" -> "10963" 
+  "10970" -> "10974" 
+  "10974" -> "10969" 
+  "10978" -> "10977" 
+  "10932" -> "10931" 
+  "10966" -> "10964" 
+  "10971" -> "10970" 
+  "10979" -> "10983" 
+  "10983" -> "10978" 
+  "10933" -> "10935" 
+  "10935" -> "10932" 
+  "10973" -> "10971" 
   "10980" -> "10979" 
-  "11029" -> "11027" 
-  "11050" -> "11048" 
   "10982" -> "10980" 
-  "10879" -> "10884" 
+  "10918" -> "10922" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/196-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/196-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/196-cfg.dot	2023-06-07 19:33:45.477394682 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/196-cfg.dot	2023-06-07 19:33:52.057393980 +0330
@@ -1,126 +1,75 @@
-digraph "ReleaseStringCritical" {  
-"11058" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string))<SUB>2051</SUB>> ]
-"11076" [label = <(soa,soa(env))<SUB>2052</SUB>> ]
-"11079" [label = <(&lt;operator&gt;.assignment,* heap = Runtime::Current()-&gt;GetHeap())<SUB>2053</SUB>> ]
-"11088" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::String&gt; s = soa.Decode&lt;mirror::String&gt;(java_string))<SUB>2054</SUB>> ]
-"11081" [label = <(GetHeap,Runtime::Current()-&gt;GetHeap())<SUB>2053</SUB>> ]
-"11089" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::String&gt; s)<SUB>2054</SUB>> ]
-"11096" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::String&gt;(java_string))<SUB>2054</SUB>> ]
-"11106" [label = <(IsMovableObject,heap-&gt;IsMovableObject(s))<SUB>2055</SUB>> ]
-"11135" [label = <(&lt;operator&gt;.logicalOr,s-&gt;IsCompressed() || (s-&gt;IsCompressed() == false &amp;&amp; s-&gt;GetValue() != chars))<SUB>2062</SUB>> ]
-"11082" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetHeap)<SUB>2053</SUB>> ]
-"11090" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::String)<SUB>2054</SUB>> ]
-"11097" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::String)<SUB>2054</SUB>> ]
-"11107" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;IsMovableObject)<SUB>2055</SUB>> ]
-"11136" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>2062</SUB>> ]
-"11140" [label = <(&lt;operator&gt;.logicalAnd,s-&gt;IsCompressed() == false &amp;&amp; s-&gt;GetValue() != chars)<SUB>2062</SUB>> ]
-"11154" [label = <(&lt;operator&gt;.delete,delete[] chars)<SUB>2063</SUB>> ]
-"11062" [label = <(UNLIKELY,UNLIKELY((java_string) == nullptr))<SUB>2051</SUB>> ]
-"11083" [label = <(Runtime::Current,Runtime::Current())<SUB>2053</SUB>> ]
-"11087" [label = <(FIELD_IDENTIFIER,GetHeap,GetHeap)<SUB>2053</SUB>> ]
-"11092" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>2054</SUB>> ]
-"11098" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2054</SUB>> ]
-"11101" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>2054</SUB>> ]
-"11109" [label = <(FIELD_IDENTIFIER,IsMovableObject,IsMovableObject)<SUB>2055</SUB>> ]
-"11113" [label = <(&lt;operator&gt;.logicalNot,!kUseReadBarrier)<SUB>2056</SUB>> ]
-"11137" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>2062</SUB>> ]
-"11141" [label = <(&lt;operator&gt;.equals,s-&gt;IsCompressed() == false)<SUB>2062</SUB>> ]
-"11147" [label = <(&lt;operator&gt;.notEquals,s-&gt;GetValue() != chars)<SUB>2062</SUB>> ]
-"11063" [label = <(&lt;operator&gt;.equals,(java_string) == nullptr)<SUB>2051</SUB>> ]
-"11067" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_string == null&quot;))<SUB>2051</SUB>> ]
-"11074" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string))<SUB>2051</SUB>> ]
-"11084" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>2053</SUB>> ]
-"11094" [label = <(FIELD_IDENTIFIER,String,String)<SUB>2054</SUB>> ]
-"11100" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2054</SUB>> ]
-"11103" [label = <(FIELD_IDENTIFIER,String,String)<SUB>2054</SUB>> ]
-"11116" [label = <(DecrementDisableMovingGC,heap-&gt;DecrementDisableMovingGC(soa.Self()))<SUB>2057</SUB>> ]
-"11139" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>2062</SUB>> ]
-"11142" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>2062</SUB>> ]
-"11148" [label = <(GetValue,s-&gt;GetValue())<SUB>2062</SUB>> ]
-"11068" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2051</SUB>> ]
-"11086" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>2053</SUB>> ]
-"11117" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;DecrementDisableMovingGC)<SUB>2057</SUB>> ]
-"11120" [label = <(Self,soa.Self())<SUB>2057</SUB>> ]
-"11126" [label = <(DecrementDisableThreadFlip,heap-&gt;DecrementDisableThreadFlip(soa.Self()))<SUB>2059</SUB>> ]
-"11143" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>2062</SUB>> ]
-"11149" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetValue)<SUB>2062</SUB>> ]
-"11069" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2051</SUB>> ]
-"11071" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2051</SUB>> ]
-"11119" [label = <(FIELD_IDENTIFIER,DecrementDisableMovingGC,DecrementDisableMovingGC)<SUB>2057</SUB>> ]
-"11121" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>2057</SUB>> ]
-"11127" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;DecrementDisableThreadFlip)<SUB>2059</SUB>> ]
-"11130" [label = <(Self,soa.Self())<SUB>2059</SUB>> ]
-"11145" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>2062</SUB>> ]
-"11151" [label = <(FIELD_IDENTIFIER,GetValue,GetValue)<SUB>2062</SUB>> ]
-"11123" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>2057</SUB>> ]
-"11129" [label = <(FIELD_IDENTIFIER,DecrementDisableThreadFlip,DecrementDisableThreadFlip)<SUB>2059</SUB>> ]
-"11131" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>2059</SUB>> ]
-"11133" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>2059</SUB>> ]
-"11053" [label = <(METHOD,ReleaseStringCritical)<SUB>2048</SUB>> ]
-"11156" [label = <(METHOD_RETURN,void)<SUB>2048</SUB>> ]
-  "11058" -> "11063" 
-  "11058" -> "11076" 
-  "11076" -> "11086" 
-  "11079" -> "11094" 
-  "11088" -> "11109" 
-  "11081" -> "11079" 
-  "11089" -> "11100" 
-  "11096" -> "11088" 
-  "11106" -> "11113" 
-  "11106" -> "11139" 
-  "11135" -> "11156" 
-  "11135" -> "11154" 
-  "11082" -> "11081" 
-  "11090" -> "11089" 
-  "11097" -> "11096" 
-  "11107" -> "11106" 
-  "11136" -> "11135" 
-  "11136" -> "11145" 
-  "11140" -> "11135" 
-  "11154" -> "11156" 
-  "11062" -> "11069" 
-  "11062" -> "11076" 
-  "11083" -> "11087" 
-  "11087" -> "11082" 
-  "11092" -> "11090" 
-  "11098" -> "11103" 
-  "11101" -> "11097" 
-  "11109" -> "11107" 
-  "11113" -> "11119" 
-  "11113" -> "11129" 
-  "11137" -> "11136" 
-  "11141" -> "11140" 
-  "11141" -> "11151" 
-  "11147" -> "11140" 
-  "11063" -> "11062" 
-  "11067" -> "11074" 
-  "11074" -> "11156" 
-  "11084" -> "11083" 
-  "11094" -> "11092" 
-  "11100" -> "11098" 
-  "11103" -> "11101" 
-  "11116" -> "11139" 
-  "11139" -> "11137" 
-  "11142" -> "11141" 
-  "11148" -> "11147" 
-  "11068" -> "11067" 
-  "11086" -> "11084" 
-  "11117" -> "11123" 
-  "11120" -> "11116" 
-  "11126" -> "11139" 
-  "11143" -> "11142" 
-  "11149" -> "11148" 
-  "11069" -> "11071" 
-  "11071" -> "11068" 
-  "11119" -> "11117" 
-  "11121" -> "11120" 
-  "11127" -> "11133" 
-  "11130" -> "11126" 
-  "11145" -> "11143" 
-  "11151" -> "11149" 
-  "11123" -> "11121" 
-  "11129" -> "11127" 
-  "11131" -> "11130" 
-  "11133" -> "11131" 
-  "11053" -> "11058" 
+digraph "GetObjectArrayElement" {  
+"11005" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_array))<SUB>1968</SUB>> ]
+"11024" [label = <(soa,soa(env))<SUB>1969</SUB>> ]
+"11026" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::ObjectArray&lt;mirror::Object&gt;&gt; array =\012        soa.Decode&lt;mirror::ObjectArray&lt;mirror::Object&gt;&gt;(java_array))<SUB>1970</SUB>> ]
+"11051" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(array-&gt;Get(index));,return soa.AddLocalReference&lt;jobject&gt;(array-&gt;Get(index));)<SUB>1972</SUB>> ]
+"11027" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::ObjectArray&lt;mirror::Object&gt;&gt; array)<SUB>1970</SUB>> ]
+"11038" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::ObjectArray&lt;mirror::Object&gt;&gt;(java_array))<SUB>1971</SUB>> ]
+"11052" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(array-&gt;Get(index)))<SUB>1972</SUB>> ]
+"11028" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::ObjectArray)<SUB>1970</SUB>> ]
+"11033" [label = <(&lt;operator&gt;.arithmeticShiftRight,mirror::Object&gt;&gt; array)<SUB>1970</SUB>> ]
+"11039" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::ObjectArray)<SUB>1971</SUB>> ]
+"11046" [label = <(&lt;operator&gt;.arithmeticShiftRight,mirror::Object&gt;&gt;(java_array))<SUB>1971</SUB>> ]
+"11053" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>1972</SUB>> ]
+"11058" [label = <(Get,array-&gt;Get(index))<SUB>1972</SUB>> ]
+"11009" [label = <(UNLIKELY,UNLIKELY((java_array) == nullptr))<SUB>1968</SUB>> ]
+"11030" [label = <(&lt;operator&gt;.fieldAccess,mirror::ObjectArray)<SUB>1970</SUB>> ]
+"11034" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1970</SUB>> ]
+"11040" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1971</SUB>> ]
+"11043" [label = <(&lt;operator&gt;.fieldAccess,mirror::ObjectArray)<SUB>1971</SUB>> ]
+"11047" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1971</SUB>> ]
+"11054" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1972</SUB>> ]
+"11059" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;Get)<SUB>1972</SUB>> ]
+"11010" [label = <(&lt;operator&gt;.equals,(java_array) == nullptr)<SUB>1968</SUB>> ]
+"11014" [label = <(CHECK_NON_NULL_ARGUMENT(java_array),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_array == null&quot;))<SUB>1968</SUB>> ]
+"11021" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_array),CHECK_NON_NULL_ARGUMENT(java_array))<SUB>1968</SUB>> ]
+"11032" [label = <(FIELD_IDENTIFIER,ObjectArray,ObjectArray)<SUB>1970</SUB>> ]
+"11036" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1970</SUB>> ]
+"11042" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1971</SUB>> ]
+"11045" [label = <(FIELD_IDENTIFIER,ObjectArray,ObjectArray)<SUB>1971</SUB>> ]
+"11049" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1971</SUB>> ]
+"11056" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1972</SUB>> ]
+"11061" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>1972</SUB>> ]
+"11015" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1968</SUB>> ]
+"11016" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1968</SUB>> ]
+"11018" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1968</SUB>> ]
+"11000" [label = <(METHOD,GetObjectArrayElement)<SUB>1967</SUB>> ]
+"11063" [label = <(METHOD_RETURN,jobject)<SUB>1967</SUB>> ]
+  "11005" -> "11010" 
+  "11005" -> "11024" 
+  "11024" -> "11032" 
+  "11026" -> "11056" 
+  "11051" -> "11063" 
+  "11027" -> "11042" 
+  "11038" -> "11026" 
+  "11052" -> "11051" 
+  "11028" -> "11036" 
+  "11033" -> "11027" 
+  "11039" -> "11049" 
+  "11046" -> "11038" 
+  "11053" -> "11061" 
+  "11058" -> "11052" 
+  "11009" -> "11016" 
+  "11009" -> "11024" 
+  "11030" -> "11028" 
+  "11034" -> "11033" 
+  "11040" -> "11045" 
+  "11043" -> "11039" 
+  "11047" -> "11046" 
+  "11054" -> "11053" 
+  "11059" -> "11058" 
+  "11010" -> "11009" 
+  "11014" -> "11021" 
+  "11021" -> "11063" 
+  "11032" -> "11030" 
+  "11036" -> "11034" 
+  "11042" -> "11040" 
+  "11045" -> "11043" 
+  "11049" -> "11047" 
+  "11056" -> "11054" 
+  "11061" -> "11059" 
+  "11015" -> "11014" 
+  "11016" -> "11018" 
+  "11018" -> "11015" 
+  "11000" -> "11005" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/197-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/197-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/197-cfg.dot	2023-06-07 19:33:45.477394682 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/197-cfg.dot	2023-06-07 19:33:52.057393980 +0330
@@ -1,103 +1,99 @@
-digraph "GetStringUTFChars" {  
-"11180" [label = <(soa,soa(env))<SUB>2074</SUB>> ]
-"11182" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::String&gt; s = soa.Decode&lt;mirror::String&gt;(java_string))<SUB>2075</SUB>> ]
-"11200" [label = <(&lt;operator&gt;.assignment,byte_count = s-&gt;GetUtfLength())<SUB>2076</SUB>> ]
-"11207" [label = <(&lt;operator&gt;.assignment,* bytes = new char[byte_count + 1])<SUB>2077</SUB>> ]
-"11211" [label = <(CHECK,CHECK(bytes != nullptr))<SUB>2078</SUB>> ]
-"11259" [label = <(&lt;operator&gt;.assignment,bytes[byte_count] = '\0')<SUB>2087</SUB>> ]
-"11264" [label = <(RETURN,return bytes;,return bytes;)<SUB>2088</SUB>> ]
-"11164" [label = <(&lt;operator&gt;.equals,java_string == nullptr)<SUB>2068</SUB>> ]
-"11171" [label = <(&lt;operator&gt;.notEquals,is_copy != nullptr)<SUB>2071</SUB>> ]
-"11183" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::String&gt; s)<SUB>2075</SUB>> ]
-"11190" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::String&gt;(java_string))<SUB>2075</SUB>> ]
-"11202" [label = <(GetUtfLength,s-&gt;GetUtfLength())<SUB>2076</SUB>> ]
-"11209" [label = <(&lt;operator&gt;.new,new char[byte_count + 1])<SUB>2077</SUB>> ]
-"11212" [label = <(&lt;operator&gt;.notEquals,bytes != nullptr)<SUB>2078</SUB>> ]
-"11216" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>2079</SUB>> ]
-"11260" [label = <(&lt;operator&gt;.indirectIndexAccess,bytes[byte_count])<SUB>2087</SUB>> ]
-"11168" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2069</SUB>> ]
-"11175" [label = <(&lt;operator&gt;.assignment,*is_copy = JNI_TRUE)<SUB>2072</SUB>> ]
-"11184" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::String)<SUB>2075</SUB>> ]
-"11191" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::String)<SUB>2075</SUB>> ]
-"11203" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetUtfLength)<SUB>2076</SUB>> ]
-"11217" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>2079</SUB>> ]
-"11176" [label = <(&lt;operator&gt;.indirection,*is_copy)<SUB>2072</SUB>> ]
-"11186" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>2075</SUB>> ]
-"11192" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2075</SUB>> ]
-"11195" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>2075</SUB>> ]
-"11205" [label = <(FIELD_IDENTIFIER,GetUtfLength,GetUtfLength)<SUB>2076</SUB>> ]
-"11219" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>2079</SUB>> ]
-"11227" [label = <(&lt;operator&gt;.lessThan,i &lt; byte_count)<SUB>2080</SUB>> ]
-"11230" [label = <(&lt;operator&gt;.preIncrement,++i)<SUB>2080</SUB>> ]
-"11245" [label = <(&lt;operator&gt;.assignment,* chars = s-&gt;GetValue())<SUB>2084</SUB>> ]
-"11251" [label = <(ConvertUtf16ToModifiedUtf8,ConvertUtf16ToModifiedUtf8(bytes, byte_count, chars, s-&gt;GetLength()))<SUB>2085</SUB>> ]
-"11188" [label = <(FIELD_IDENTIFIER,String,String)<SUB>2075</SUB>> ]
-"11194" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2075</SUB>> ]
-"11197" [label = <(FIELD_IDENTIFIER,String,String)<SUB>2075</SUB>> ]
-"11224" [label = <(&lt;operator&gt;.assignment,i = 0)<SUB>2080</SUB>> ]
-"11233" [label = <(&lt;operator&gt;.assignment,bytes[i] = s-&gt;CharAt(i))<SUB>2081</SUB>> ]
-"11247" [label = <(GetValue,s-&gt;GetValue())<SUB>2084</SUB>> ]
-"11255" [label = <(GetLength,s-&gt;GetLength())<SUB>2085</SUB>> ]
-"11234" [label = <(&lt;operator&gt;.indirectIndexAccess,bytes[i])<SUB>2081</SUB>> ]
-"11237" [label = <(CharAt,s-&gt;CharAt(i))<SUB>2081</SUB>> ]
-"11248" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetValue)<SUB>2084</SUB>> ]
-"11256" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetLength)<SUB>2085</SUB>> ]
-"11238" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;CharAt)<SUB>2081</SUB>> ]
-"11250" [label = <(FIELD_IDENTIFIER,GetValue,GetValue)<SUB>2084</SUB>> ]
-"11258" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>2085</SUB>> ]
-"11240" [label = <(FIELD_IDENTIFIER,CharAt,CharAt)<SUB>2081</SUB>> ]
-"11158" [label = <(METHOD,GetStringUTFChars)<SUB>2067</SUB>> ]
-"11266" [label = <(METHOD_RETURN,const char*)<SUB>2067</SUB>> ]
-  "11180" -> "11188" 
-  "11182" -> "11205" 
-  "11200" -> "11209" 
-  "11207" -> "11212" 
-  "11211" -> "11219" 
-  "11259" -> "11264" 
-  "11264" -> "11266" 
-  "11164" -> "11168" 
-  "11164" -> "11171" 
-  "11171" -> "11176" 
-  "11171" -> "11180" 
-  "11183" -> "11194" 
-  "11190" -> "11182" 
-  "11202" -> "11200" 
-  "11209" -> "11207" 
-  "11212" -> "11211" 
-  "11216" -> "11224" 
-  "11216" -> "11250" 
-  "11260" -> "11259" 
-  "11168" -> "11266" 
-  "11175" -> "11180" 
-  "11184" -> "11183" 
-  "11191" -> "11190" 
-  "11203" -> "11202" 
-  "11217" -> "11216" 
-  "11176" -> "11175" 
-  "11186" -> "11184" 
-  "11192" -> "11197" 
-  "11195" -> "11191" 
-  "11205" -> "11203" 
-  "11219" -> "11217" 
-  "11227" -> "11234" 
-  "11227" -> "11260" 
-  "11230" -> "11227" 
-  "11245" -> "11258" 
-  "11251" -> "11260" 
-  "11188" -> "11186" 
-  "11194" -> "11192" 
-  "11197" -> "11195" 
-  "11224" -> "11227" 
-  "11233" -> "11230" 
-  "11247" -> "11245" 
-  "11255" -> "11251" 
-  "11234" -> "11240" 
-  "11237" -> "11233" 
-  "11248" -> "11247" 
-  "11256" -> "11255" 
-  "11238" -> "11237" 
-  "11250" -> "11248" 
-  "11258" -> "11256" 
-  "11240" -> "11238" 
-  "11158" -> "11164" 
+digraph "SetObjectArrayElement" {  
+"11071" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>1977</SUB>> ]
+"11089" [label = <(soa,soa(env))<SUB>1978</SUB>> ]
+"11091" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::ObjectArray&lt;mirror::Object&gt;&gt; array =\012        soa.Decode&lt;mirror::ObjectArray&lt;mirror::Object&gt;&gt;(java_array))<SUB>1979</SUB>> ]
+"11116" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; value = soa.Decode&lt;mirror::Object&gt;(java_value))<SUB>1981</SUB>> ]
+"11133" [label = <(&lt;operator&gt;.greaterThan,array-&gt;Set&lt;false&gt;(index, value.Ptr()))<SUB>1982</SUB>> ]
+"11092" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::ObjectArray&lt;mirror::Object&gt;&gt; array)<SUB>1979</SUB>> ]
+"11103" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::ObjectArray&lt;mirror::Object&gt;&gt;(java_array))<SUB>1980</SUB>> ]
+"11117" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; value)<SUB>1981</SUB>> ]
+"11124" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(java_value))<SUB>1981</SUB>> ]
+"11134" [label = <(&lt;operator&gt;.lessThan,array-&gt;Set&lt;false)<SUB>1982</SUB>> ]
+"11139" [label = <(&lt;operator&gt;.bracketedPrimary,(index, value.Ptr()))<SUB>1982</SUB>> ]
+"11093" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::ObjectArray)<SUB>1979</SUB>> ]
+"11098" [label = <(&lt;operator&gt;.arithmeticShiftRight,mirror::Object&gt;&gt; array)<SUB>1979</SUB>> ]
+"11104" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::ObjectArray)<SUB>1980</SUB>> ]
+"11111" [label = <(&lt;operator&gt;.arithmeticShiftRight,mirror::Object&gt;&gt;(java_array))<SUB>1980</SUB>> ]
+"11118" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>1981</SUB>> ]
+"11125" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>1981</SUB>> ]
+"11135" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;Set)<SUB>1982</SUB>> ]
+"11140" [label = <(&lt;operator&gt;.expressionList,index, value.Ptr())<SUB>1982</SUB>> ]
+"11075" [label = <(UNLIKELY,UNLIKELY((java_array) == nullptr))<SUB>1977</SUB>> ]
+"11095" [label = <(&lt;operator&gt;.fieldAccess,mirror::ObjectArray)<SUB>1979</SUB>> ]
+"11099" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1979</SUB>> ]
+"11105" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1980</SUB>> ]
+"11108" [label = <(&lt;operator&gt;.fieldAccess,mirror::ObjectArray)<SUB>1980</SUB>> ]
+"11112" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1980</SUB>> ]
+"11120" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1981</SUB>> ]
+"11126" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1981</SUB>> ]
+"11129" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1981</SUB>> ]
+"11137" [label = <(FIELD_IDENTIFIER,Set,Set)<SUB>1982</SUB>> ]
+"11142" [label = <(Ptr,value.Ptr())<SUB>1982</SUB>> ]
+"11076" [label = <(&lt;operator&gt;.equals,(java_array) == nullptr)<SUB>1977</SUB>> ]
+"11080" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_array == null&quot;))<SUB>1977</SUB>> ]
+"11087" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>1977</SUB>> ]
+"11097" [label = <(FIELD_IDENTIFIER,ObjectArray,ObjectArray)<SUB>1979</SUB>> ]
+"11101" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1979</SUB>> ]
+"11107" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1980</SUB>> ]
+"11110" [label = <(FIELD_IDENTIFIER,ObjectArray,ObjectArray)<SUB>1980</SUB>> ]
+"11114" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1980</SUB>> ]
+"11122" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1981</SUB>> ]
+"11128" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1981</SUB>> ]
+"11131" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1981</SUB>> ]
+"11143" [label = <(&lt;operator&gt;.fieldAccess,value.Ptr)<SUB>1982</SUB>> ]
+"11081" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1977</SUB>> ]
+"11145" [label = <(FIELD_IDENTIFIER,Ptr,Ptr)<SUB>1982</SUB>> ]
+"11082" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1977</SUB>> ]
+"11084" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1977</SUB>> ]
+"11065" [label = <(METHOD,SetObjectArrayElement)<SUB>1975</SUB>> ]
+"11146" [label = <(METHOD_RETURN,void)<SUB>1975</SUB>> ]
+  "11071" -> "11076" 
+  "11071" -> "11089" 
+  "11089" -> "11097" 
+  "11091" -> "11122" 
+  "11116" -> "11137" 
+  "11133" -> "11146" 
+  "11092" -> "11107" 
+  "11103" -> "11091" 
+  "11117" -> "11128" 
+  "11124" -> "11116" 
+  "11134" -> "11145" 
+  "11139" -> "11133" 
+  "11093" -> "11101" 
+  "11098" -> "11092" 
+  "11104" -> "11114" 
+  "11111" -> "11103" 
+  "11118" -> "11117" 
+  "11125" -> "11124" 
+  "11135" -> "11134" 
+  "11140" -> "11139" 
+  "11075" -> "11082" 
+  "11075" -> "11089" 
+  "11095" -> "11093" 
+  "11099" -> "11098" 
+  "11105" -> "11110" 
+  "11108" -> "11104" 
+  "11112" -> "11111" 
+  "11120" -> "11118" 
+  "11126" -> "11131" 
+  "11129" -> "11125" 
+  "11137" -> "11135" 
+  "11142" -> "11140" 
+  "11076" -> "11075" 
+  "11080" -> "11087" 
+  "11087" -> "11146" 
+  "11097" -> "11095" 
+  "11101" -> "11099" 
+  "11107" -> "11105" 
+  "11110" -> "11108" 
+  "11114" -> "11112" 
+  "11122" -> "11120" 
+  "11128" -> "11126" 
+  "11131" -> "11129" 
+  "11143" -> "11142" 
+  "11081" -> "11080" 
+  "11145" -> "11143" 
+  "11082" -> "11084" 
+  "11084" -> "11081" 
+  "11065" -> "11071" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/198-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/198-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/198-cfg.dot	2023-06-07 19:33:45.477394682 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/198-cfg.dot	2023-06-07 19:33:52.057393980 +0330
@@ -1,7 +1,9 @@
-digraph "ReleaseStringUTFChars" {  
-"11273" [label = <(&lt;operator&gt;.delete,delete[] chars)<SUB>2092</SUB>> ]
-"11268" [label = <(METHOD,ReleaseStringUTFChars)<SUB>2091</SUB>> ]
-"11275" [label = <(METHOD_RETURN,void)<SUB>2091</SUB>> ]
-  "11273" -> "11275" 
-  "11268" -> "11273" 
+digraph "NewBooleanArray" {  
+"11152" [label = <(RETURN,return NewPrimitiveArray&lt;jbooleanArray, mirror::BooleanArray&gt;(env, length);,return NewPrimitiveArray&lt;jbooleanArray, mirror::BooleanArray&gt;(env, length);)<SUB>1986</SUB>> ]
+"11153" [label = <(NewPrimitiveArray&lt;jbooleanArray,mirror::BooleanArray&gt;,NewPrimitiveArray&lt;jbooleanArray, mirror::BooleanArray&gt;(env, length))<SUB>1986</SUB>> ]
+"11148" [label = <(METHOD,NewBooleanArray)<SUB>1985</SUB>> ]
+"11156" [label = <(METHOD_RETURN,jbooleanArray)<SUB>1985</SUB>> ]
+  "11152" -> "11156" 
+  "11153" -> "11152" 
+  "11148" -> "11153" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/199-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/199-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/199-cfg.dot	2023-06-07 19:33:45.477394682 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/199-cfg.dot	2023-06-07 19:33:52.057393980 +0330
@@ -1,100 +1,9 @@
-digraph "GetArrayLength" {  
-"11281" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_array))<SUB>2096</SUB>> ]
-"11300" [label = <(soa,soa(env))<SUB>2097</SUB>> ]
-"11302" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; obj = soa.Decode&lt;mirror::Object&gt;(java_array))<SUB>2098</SUB>> ]
-"11346" [label = <(&lt;operator&gt;.assignment,* array = obj-&gt;AsArray())<SUB>2103</SUB>> ]
-"11352" [label = <(RETURN,return array-&gt;GetLength();,return array-&gt;GetLength();)<SUB>2104</SUB>> ]
-"11303" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; obj)<SUB>2098</SUB>> ]
-"11310" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(java_array))<SUB>2098</SUB>> ]
-"11320" [label = <(UNLIKELY,UNLIKELY(!obj-&gt;IsArrayInstance()))<SUB>2099</SUB>> ]
-"11348" [label = <(AsArray,obj-&gt;AsArray())<SUB>2103</SUB>> ]
-"11353" [label = <(GetLength,array-&gt;GetLength())<SUB>2104</SUB>> ]
-"11304" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>2098</SUB>> ]
-"11311" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>2098</SUB>> ]
-"11321" [label = <(&lt;operator&gt;.logicalNot,!obj-&gt;IsArrayInstance())<SUB>2099</SUB>> ]
-"11327" [label = <(JniAbortF,soa.Vm()-&gt;JniAbortF(&quot;GetArrayLength&quot;, &quot;not an array: %s&quot;, obj-&gt;PrettyTypeOf().c_str()))<SUB>2100</SUB>> ]
-"11343" [label = <(RETURN,return 0;,return 0;)<SUB>2101</SUB>> ]
-"11349" [label = <(&lt;operator&gt;.indirectFieldAccess,obj-&gt;AsArray)<SUB>2103</SUB>> ]
-"11354" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetLength)<SUB>2104</SUB>> ]
-"11285" [label = <(UNLIKELY,UNLIKELY((java_array) == nullptr))<SUB>2096</SUB>> ]
-"11306" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2098</SUB>> ]
-"11312" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2098</SUB>> ]
-"11315" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2098</SUB>> ]
-"11322" [label = <(IsArrayInstance,obj-&gt;IsArrayInstance())<SUB>2099</SUB>> ]
-"11328" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Vm()-&gt;JniAbortF)<SUB>2100</SUB>> ]
-"11336" [label = <(c_str,obj-&gt;PrettyTypeOf().c_str())<SUB>2100</SUB>> ]
-"11351" [label = <(FIELD_IDENTIFIER,AsArray,AsArray)<SUB>2103</SUB>> ]
-"11356" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>2104</SUB>> ]
-"11286" [label = <(&lt;operator&gt;.equals,(java_array) == nullptr)<SUB>2096</SUB>> ]
-"11290" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_array),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_array == null&quot;))<SUB>2096</SUB>> ]
-"11297" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_array),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_array))<SUB>2096</SUB>> ]
-"11308" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2098</SUB>> ]
-"11314" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2098</SUB>> ]
-"11317" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2098</SUB>> ]
-"11323" [label = <(&lt;operator&gt;.indirectFieldAccess,obj-&gt;IsArrayInstance)<SUB>2099</SUB>> ]
-"11329" [label = <(Vm,soa.Vm())<SUB>2100</SUB>> ]
-"11333" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2100</SUB>> ]
-"11337" [label = <(&lt;operator&gt;.fieldAccess,obj-&gt;PrettyTypeOf().c_str)<SUB>2100</SUB>> ]
-"11291" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2096</SUB>> ]
-"11325" [label = <(FIELD_IDENTIFIER,IsArrayInstance,IsArrayInstance)<SUB>2099</SUB>> ]
-"11330" [label = <(&lt;operator&gt;.fieldAccess,soa.Vm)<SUB>2100</SUB>> ]
-"11338" [label = <(PrettyTypeOf,obj-&gt;PrettyTypeOf())<SUB>2100</SUB>> ]
-"11342" [label = <(FIELD_IDENTIFIER,c_str,c_str)<SUB>2100</SUB>> ]
-"11292" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2096</SUB>> ]
-"11294" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2096</SUB>> ]
-"11332" [label = <(FIELD_IDENTIFIER,Vm,Vm)<SUB>2100</SUB>> ]
-"11339" [label = <(&lt;operator&gt;.indirectFieldAccess,obj-&gt;PrettyTypeOf)<SUB>2100</SUB>> ]
-"11341" [label = <(FIELD_IDENTIFIER,PrettyTypeOf,PrettyTypeOf)<SUB>2100</SUB>> ]
-"11277" [label = <(METHOD,GetArrayLength)<SUB>2095</SUB>> ]
-"11357" [label = <(METHOD_RETURN,jsize)<SUB>2095</SUB>> ]
-  "11281" -> "11286" 
-  "11281" -> "11300" 
-  "11300" -> "11308" 
-  "11302" -> "11325" 
-  "11346" -> "11356" 
-  "11352" -> "11357" 
-  "11303" -> "11314" 
-  "11310" -> "11302" 
-  "11320" -> "11332" 
-  "11320" -> "11351" 
-  "11348" -> "11346" 
-  "11353" -> "11352" 
-  "11304" -> "11303" 
-  "11311" -> "11310" 
-  "11321" -> "11320" 
-  "11327" -> "11343" 
-  "11343" -> "11357" 
-  "11349" -> "11348" 
-  "11354" -> "11353" 
-  "11285" -> "11292" 
-  "11285" -> "11300" 
-  "11306" -> "11304" 
-  "11312" -> "11317" 
-  "11315" -> "11311" 
-  "11322" -> "11321" 
-  "11328" -> "11341" 
-  "11336" -> "11327" 
-  "11351" -> "11349" 
-  "11356" -> "11354" 
-  "11286" -> "11285" 
-  "11290" -> "11297" 
-  "11297" -> "11357" 
-  "11308" -> "11306" 
-  "11314" -> "11312" 
-  "11317" -> "11315" 
-  "11323" -> "11322" 
-  "11329" -> "11333" 
-  "11333" -> "11328" 
-  "11337" -> "11336" 
-  "11291" -> "11290" 
-  "11325" -> "11323" 
-  "11330" -> "11329" 
-  "11338" -> "11342" 
-  "11342" -> "11337" 
-  "11292" -> "11294" 
-  "11294" -> "11291" 
-  "11332" -> "11330" 
-  "11339" -> "11338" 
-  "11341" -> "11339" 
-  "11277" -> "11281" 
+digraph "NewByteArray" {  
+"11162" [label = <(RETURN,return NewPrimitiveArray&lt;jbyteArray, mirror::ByteArray&gt;(env, length);,return NewPrimitiveArray&lt;jbyteArray, mirror::ByteArray&gt;(env, length);)<SUB>1990</SUB>> ]
+"11163" [label = <(NewPrimitiveArray&lt;jbyteArray,mirror::ByteArray&gt;,NewPrimitiveArray&lt;jbyteArray, mirror::ByteArray&gt;(env, length))<SUB>1990</SUB>> ]
+"11158" [label = <(METHOD,NewByteArray)<SUB>1989</SUB>> ]
+"11166" [label = <(METHOD_RETURN,jbyteArray)<SUB>1989</SUB>> ]
+  "11162" -> "11166" 
+  "11163" -> "11162" 
+  "11158" -> "11163" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/2-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/2-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/2-cfg.dot	2023-06-07 19:33:45.147394720 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/2-cfg.dot	2023-06-07 19:33:51.917393996 +0330
@@ -1,5 +1,5 @@
-digraph "anonymous_lambda_10" {  
-"15" [label = <(METHOD,anonymous_lambda_10)<SUB>1904</SUB>> ]
-"17" [label = <(METHOD_RETURN,ANY)<SUB>1904</SUB>> ]
-  "15" -> "17" 
+digraph "ScopedVAArgs" {  
+"14" [label = <(METHOD,ScopedVAArgs)<SUB>68</SUB>> ]
+"17" [label = <(METHOD_RETURN,ANY)<SUB>68</SUB>> ]
+  "14" -> "17" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/20-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/20-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/20-cfg.dot	2023-06-07 19:33:45.337394696 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/20-cfg.dot	2023-06-07 19:33:51.917393996 +0330
@@ -1,5 +1,5 @@
-digraph "ThrowAIOOBE" {  
-"522" [label = <(METHOD,ThrowAIOOBE)<SUB>428</SUB>> ]
-"529" [label = <(METHOD_RETURN,void)<SUB>428</SUB>> ]
-  "522" -> "529" 
+digraph "FindMethod" {  
+"374" [label = <(METHOD,FindMethod)<SUB>437</SUB>> ]
+"379" [label = <(METHOD_RETURN,ArtMethod*)<SUB>437</SUB>> ]
+  "374" -> "379" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/200-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/200-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/200-cfg.dot	2023-06-07 19:33:45.477394682 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/200-cfg.dot	2023-06-07 19:33:52.057393980 +0330
@@ -1,75 +1,9 @@
-digraph "GetObjectArrayElement" {  
-"11364" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_array))<SUB>2108</SUB>> ]
-"11383" [label = <(soa,soa(env))<SUB>2109</SUB>> ]
-"11385" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::ObjectArray&lt;mirror::Object&gt;&gt; array =\012        soa.Decode&lt;mirror::ObjectArray&lt;mirror::Object&gt;&gt;(java_array))<SUB>2110</SUB>> ]
-"11410" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(array-&gt;Get(index));,return soa.AddLocalReference&lt;jobject&gt;(array-&gt;Get(index));)<SUB>2112</SUB>> ]
-"11386" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::ObjectArray&lt;mirror::Object&gt;&gt; array)<SUB>2110</SUB>> ]
-"11397" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::ObjectArray&lt;mirror::Object&gt;&gt;(java_array))<SUB>2111</SUB>> ]
-"11411" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(array-&gt;Get(index)))<SUB>2112</SUB>> ]
-"11387" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::ObjectArray)<SUB>2110</SUB>> ]
-"11392" [label = <(&lt;operator&gt;.arithmeticShiftRight,mirror::Object&gt;&gt; array)<SUB>2110</SUB>> ]
-"11398" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::ObjectArray)<SUB>2111</SUB>> ]
-"11405" [label = <(&lt;operator&gt;.arithmeticShiftRight,mirror::Object&gt;&gt;(java_array))<SUB>2111</SUB>> ]
-"11412" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>2112</SUB>> ]
-"11417" [label = <(Get,array-&gt;Get(index))<SUB>2112</SUB>> ]
-"11368" [label = <(UNLIKELY,UNLIKELY((java_array) == nullptr))<SUB>2108</SUB>> ]
-"11389" [label = <(&lt;operator&gt;.fieldAccess,mirror::ObjectArray)<SUB>2110</SUB>> ]
-"11393" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2110</SUB>> ]
-"11399" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2111</SUB>> ]
-"11402" [label = <(&lt;operator&gt;.fieldAccess,mirror::ObjectArray)<SUB>2111</SUB>> ]
-"11406" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2111</SUB>> ]
-"11413" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>2112</SUB>> ]
-"11418" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;Get)<SUB>2112</SUB>> ]
-"11369" [label = <(&lt;operator&gt;.equals,(java_array) == nullptr)<SUB>2108</SUB>> ]
-"11373" [label = <(CHECK_NON_NULL_ARGUMENT(java_array),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_array == null&quot;))<SUB>2108</SUB>> ]
-"11380" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_array),CHECK_NON_NULL_ARGUMENT(java_array))<SUB>2108</SUB>> ]
-"11391" [label = <(FIELD_IDENTIFIER,ObjectArray,ObjectArray)<SUB>2110</SUB>> ]
-"11395" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2110</SUB>> ]
-"11401" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2111</SUB>> ]
-"11404" [label = <(FIELD_IDENTIFIER,ObjectArray,ObjectArray)<SUB>2111</SUB>> ]
-"11408" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2111</SUB>> ]
-"11415" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>2112</SUB>> ]
-"11420" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>2112</SUB>> ]
-"11374" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2108</SUB>> ]
-"11375" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2108</SUB>> ]
-"11377" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2108</SUB>> ]
-"11359" [label = <(METHOD,GetObjectArrayElement)<SUB>2107</SUB>> ]
-"11422" [label = <(METHOD_RETURN,jobject)<SUB>2107</SUB>> ]
-  "11364" -> "11369" 
-  "11364" -> "11383" 
-  "11383" -> "11391" 
-  "11385" -> "11415" 
-  "11410" -> "11422" 
-  "11386" -> "11401" 
-  "11397" -> "11385" 
-  "11411" -> "11410" 
-  "11387" -> "11395" 
-  "11392" -> "11386" 
-  "11398" -> "11408" 
-  "11405" -> "11397" 
-  "11412" -> "11420" 
-  "11417" -> "11411" 
-  "11368" -> "11375" 
-  "11368" -> "11383" 
-  "11389" -> "11387" 
-  "11393" -> "11392" 
-  "11399" -> "11404" 
-  "11402" -> "11398" 
-  "11406" -> "11405" 
-  "11413" -> "11412" 
-  "11418" -> "11417" 
-  "11369" -> "11368" 
-  "11373" -> "11380" 
-  "11380" -> "11422" 
-  "11391" -> "11389" 
-  "11395" -> "11393" 
-  "11401" -> "11399" 
-  "11404" -> "11402" 
-  "11408" -> "11406" 
-  "11415" -> "11413" 
-  "11420" -> "11418" 
-  "11374" -> "11373" 
-  "11375" -> "11377" 
-  "11377" -> "11374" 
-  "11359" -> "11364" 
+digraph "NewCharArray" {  
+"11172" [label = <(RETURN,return NewPrimitiveArray&lt;jcharArray, mirror::CharArray&gt;(env, length);,return NewPrimitiveArray&lt;jcharArray, mirror::CharArray&gt;(env, length);)<SUB>1994</SUB>> ]
+"11173" [label = <(NewPrimitiveArray&lt;jcharArray,mirror::CharArray&gt;,NewPrimitiveArray&lt;jcharArray, mirror::CharArray&gt;(env, length))<SUB>1994</SUB>> ]
+"11168" [label = <(METHOD,NewCharArray)<SUB>1993</SUB>> ]
+"11176" [label = <(METHOD_RETURN,jcharArray)<SUB>1993</SUB>> ]
+  "11172" -> "11176" 
+  "11173" -> "11172" 
+  "11168" -> "11173" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/201-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/201-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/201-cfg.dot	2023-06-07 19:33:45.477394682 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/201-cfg.dot	2023-06-07 19:33:52.057393980 +0330
@@ -1,99 +1,9 @@
-digraph "SetObjectArrayElement" {  
-"11430" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>2117</SUB>> ]
-"11448" [label = <(soa,soa(env))<SUB>2118</SUB>> ]
-"11450" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::ObjectArray&lt;mirror::Object&gt;&gt; array =\012        soa.Decode&lt;mirror::ObjectArray&lt;mirror::Object&gt;&gt;(java_array))<SUB>2119</SUB>> ]
-"11475" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; value = soa.Decode&lt;mirror::Object&gt;(java_value))<SUB>2121</SUB>> ]
-"11492" [label = <(&lt;operator&gt;.greaterThan,array-&gt;Set&lt;false&gt;(index, value.Ptr()))<SUB>2122</SUB>> ]
-"11451" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::ObjectArray&lt;mirror::Object&gt;&gt; array)<SUB>2119</SUB>> ]
-"11462" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::ObjectArray&lt;mirror::Object&gt;&gt;(java_array))<SUB>2120</SUB>> ]
-"11476" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; value)<SUB>2121</SUB>> ]
-"11483" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(java_value))<SUB>2121</SUB>> ]
-"11493" [label = <(&lt;operator&gt;.lessThan,array-&gt;Set&lt;false)<SUB>2122</SUB>> ]
-"11498" [label = <(&lt;operator&gt;.bracketedPrimary,(index, value.Ptr()))<SUB>2122</SUB>> ]
-"11452" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::ObjectArray)<SUB>2119</SUB>> ]
-"11457" [label = <(&lt;operator&gt;.arithmeticShiftRight,mirror::Object&gt;&gt; array)<SUB>2119</SUB>> ]
-"11463" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::ObjectArray)<SUB>2120</SUB>> ]
-"11470" [label = <(&lt;operator&gt;.arithmeticShiftRight,mirror::Object&gt;&gt;(java_array))<SUB>2120</SUB>> ]
-"11477" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>2121</SUB>> ]
-"11484" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>2121</SUB>> ]
-"11494" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;Set)<SUB>2122</SUB>> ]
-"11499" [label = <(&lt;operator&gt;.expressionList,index, value.Ptr())<SUB>2122</SUB>> ]
-"11434" [label = <(UNLIKELY,UNLIKELY((java_array) == nullptr))<SUB>2117</SUB>> ]
-"11454" [label = <(&lt;operator&gt;.fieldAccess,mirror::ObjectArray)<SUB>2119</SUB>> ]
-"11458" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2119</SUB>> ]
-"11464" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2120</SUB>> ]
-"11467" [label = <(&lt;operator&gt;.fieldAccess,mirror::ObjectArray)<SUB>2120</SUB>> ]
-"11471" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2120</SUB>> ]
-"11479" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2121</SUB>> ]
-"11485" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2121</SUB>> ]
-"11488" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2121</SUB>> ]
-"11496" [label = <(FIELD_IDENTIFIER,Set,Set)<SUB>2122</SUB>> ]
-"11501" [label = <(Ptr,value.Ptr())<SUB>2122</SUB>> ]
-"11435" [label = <(&lt;operator&gt;.equals,(java_array) == nullptr)<SUB>2117</SUB>> ]
-"11439" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_array == null&quot;))<SUB>2117</SUB>> ]
-"11446" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>2117</SUB>> ]
-"11456" [label = <(FIELD_IDENTIFIER,ObjectArray,ObjectArray)<SUB>2119</SUB>> ]
-"11460" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2119</SUB>> ]
-"11466" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2120</SUB>> ]
-"11469" [label = <(FIELD_IDENTIFIER,ObjectArray,ObjectArray)<SUB>2120</SUB>> ]
-"11473" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2120</SUB>> ]
-"11481" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2121</SUB>> ]
-"11487" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2121</SUB>> ]
-"11490" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2121</SUB>> ]
-"11502" [label = <(&lt;operator&gt;.fieldAccess,value.Ptr)<SUB>2122</SUB>> ]
-"11440" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2117</SUB>> ]
-"11504" [label = <(FIELD_IDENTIFIER,Ptr,Ptr)<SUB>2122</SUB>> ]
-"11441" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2117</SUB>> ]
-"11443" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2117</SUB>> ]
-"11424" [label = <(METHOD,SetObjectArrayElement)<SUB>2115</SUB>> ]
-"11505" [label = <(METHOD_RETURN,void)<SUB>2115</SUB>> ]
-  "11430" -> "11435" 
-  "11430" -> "11448" 
-  "11448" -> "11456" 
-  "11450" -> "11481" 
-  "11475" -> "11496" 
-  "11492" -> "11505" 
-  "11451" -> "11466" 
-  "11462" -> "11450" 
-  "11476" -> "11487" 
-  "11483" -> "11475" 
-  "11493" -> "11504" 
-  "11498" -> "11492" 
-  "11452" -> "11460" 
-  "11457" -> "11451" 
-  "11463" -> "11473" 
-  "11470" -> "11462" 
-  "11477" -> "11476" 
-  "11484" -> "11483" 
-  "11494" -> "11493" 
-  "11499" -> "11498" 
-  "11434" -> "11441" 
-  "11434" -> "11448" 
-  "11454" -> "11452" 
-  "11458" -> "11457" 
-  "11464" -> "11469" 
-  "11467" -> "11463" 
-  "11471" -> "11470" 
-  "11479" -> "11477" 
-  "11485" -> "11490" 
-  "11488" -> "11484" 
-  "11496" -> "11494" 
-  "11501" -> "11499" 
-  "11435" -> "11434" 
-  "11439" -> "11446" 
-  "11446" -> "11505" 
-  "11456" -> "11454" 
-  "11460" -> "11458" 
-  "11466" -> "11464" 
-  "11469" -> "11467" 
-  "11473" -> "11471" 
-  "11481" -> "11479" 
-  "11487" -> "11485" 
-  "11490" -> "11488" 
-  "11502" -> "11501" 
-  "11440" -> "11439" 
-  "11504" -> "11502" 
-  "11441" -> "11443" 
-  "11443" -> "11440" 
-  "11424" -> "11430" 
+digraph "NewDoubleArray" {  
+"11182" [label = <(RETURN,return NewPrimitiveArray&lt;jdoubleArray, mirror::DoubleArray&gt;(env, length);,return NewPrimitiveArray&lt;jdoubleArray, mirror::DoubleArray&gt;(env, length);)<SUB>1998</SUB>> ]
+"11183" [label = <(NewPrimitiveArray&lt;jdoubleArray,mirror::DoubleArray&gt;,NewPrimitiveArray&lt;jdoubleArray, mirror::DoubleArray&gt;(env, length))<SUB>1998</SUB>> ]
+"11178" [label = <(METHOD,NewDoubleArray)<SUB>1997</SUB>> ]
+"11186" [label = <(METHOD_RETURN,jdoubleArray)<SUB>1997</SUB>> ]
+  "11182" -> "11186" 
+  "11183" -> "11182" 
+  "11178" -> "11183" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/202-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/202-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/202-cfg.dot	2023-06-07 19:33:45.477394682 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/202-cfg.dot	2023-06-07 19:33:52.057393980 +0330
@@ -1,9 +1,9 @@
-digraph "NewBooleanArray" {  
-"11511" [label = <(RETURN,return NewPrimitiveArray&lt;jbooleanArray, mirror::BooleanArray&gt;(env, length);,return NewPrimitiveArray&lt;jbooleanArray, mirror::BooleanArray&gt;(env, length);)<SUB>2126</SUB>> ]
-"11512" [label = <(NewPrimitiveArray&lt;jbooleanArray,mirror::BooleanArray&gt;,NewPrimitiveArray&lt;jbooleanArray, mirror::BooleanArray&gt;(env, length))<SUB>2126</SUB>> ]
-"11507" [label = <(METHOD,NewBooleanArray)<SUB>2125</SUB>> ]
-"11515" [label = <(METHOD_RETURN,jbooleanArray)<SUB>2125</SUB>> ]
-  "11511" -> "11515" 
-  "11512" -> "11511" 
-  "11507" -> "11512" 
+digraph "NewFloatArray" {  
+"11192" [label = <(RETURN,return NewPrimitiveArray&lt;jfloatArray, mirror::FloatArray&gt;(env, length);,return NewPrimitiveArray&lt;jfloatArray, mirror::FloatArray&gt;(env, length);)<SUB>2002</SUB>> ]
+"11193" [label = <(NewPrimitiveArray&lt;jfloatArray,mirror::FloatArray&gt;,NewPrimitiveArray&lt;jfloatArray, mirror::FloatArray&gt;(env, length))<SUB>2002</SUB>> ]
+"11188" [label = <(METHOD,NewFloatArray)<SUB>2001</SUB>> ]
+"11196" [label = <(METHOD_RETURN,jfloatArray)<SUB>2001</SUB>> ]
+  "11192" -> "11196" 
+  "11193" -> "11192" 
+  "11188" -> "11193" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/203-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/203-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/203-cfg.dot	2023-06-07 19:33:45.477394682 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/203-cfg.dot	2023-06-07 19:33:52.057393980 +0330
@@ -1,9 +1,9 @@
-digraph "NewByteArray" {  
-"11521" [label = <(RETURN,return NewPrimitiveArray&lt;jbyteArray, mirror::ByteArray&gt;(env, length);,return NewPrimitiveArray&lt;jbyteArray, mirror::ByteArray&gt;(env, length);)<SUB>2130</SUB>> ]
-"11522" [label = <(NewPrimitiveArray&lt;jbyteArray,mirror::ByteArray&gt;,NewPrimitiveArray&lt;jbyteArray, mirror::ByteArray&gt;(env, length))<SUB>2130</SUB>> ]
-"11517" [label = <(METHOD,NewByteArray)<SUB>2129</SUB>> ]
-"11525" [label = <(METHOD_RETURN,jbyteArray)<SUB>2129</SUB>> ]
-  "11521" -> "11525" 
-  "11522" -> "11521" 
-  "11517" -> "11522" 
+digraph "NewIntArray" {  
+"11202" [label = <(RETURN,return NewPrimitiveArray&lt;jintArray, mirror::IntArray&gt;(env, length);,return NewPrimitiveArray&lt;jintArray, mirror::IntArray&gt;(env, length);)<SUB>2006</SUB>> ]
+"11203" [label = <(NewPrimitiveArray&lt;jintArray,mirror::IntArray&gt;,NewPrimitiveArray&lt;jintArray, mirror::IntArray&gt;(env, length))<SUB>2006</SUB>> ]
+"11198" [label = <(METHOD,NewIntArray)<SUB>2005</SUB>> ]
+"11206" [label = <(METHOD_RETURN,jintArray)<SUB>2005</SUB>> ]
+  "11202" -> "11206" 
+  "11203" -> "11202" 
+  "11198" -> "11203" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/204-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/204-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/204-cfg.dot	2023-06-07 19:33:45.477394682 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/204-cfg.dot	2023-06-07 19:33:52.057393980 +0330
@@ -1,9 +1,9 @@
-digraph "NewCharArray" {  
-"11531" [label = <(RETURN,return NewPrimitiveArray&lt;jcharArray, mirror::CharArray&gt;(env, length);,return NewPrimitiveArray&lt;jcharArray, mirror::CharArray&gt;(env, length);)<SUB>2134</SUB>> ]
-"11532" [label = <(NewPrimitiveArray&lt;jcharArray,mirror::CharArray&gt;,NewPrimitiveArray&lt;jcharArray, mirror::CharArray&gt;(env, length))<SUB>2134</SUB>> ]
-"11527" [label = <(METHOD,NewCharArray)<SUB>2133</SUB>> ]
-"11535" [label = <(METHOD_RETURN,jcharArray)<SUB>2133</SUB>> ]
-  "11531" -> "11535" 
-  "11532" -> "11531" 
-  "11527" -> "11532" 
+digraph "NewLongArray" {  
+"11212" [label = <(RETURN,return NewPrimitiveArray&lt;jlongArray, mirror::LongArray&gt;(env, length);,return NewPrimitiveArray&lt;jlongArray, mirror::LongArray&gt;(env, length);)<SUB>2010</SUB>> ]
+"11213" [label = <(NewPrimitiveArray&lt;jlongArray,mirror::LongArray&gt;,NewPrimitiveArray&lt;jlongArray, mirror::LongArray&gt;(env, length))<SUB>2010</SUB>> ]
+"11208" [label = <(METHOD,NewLongArray)<SUB>2009</SUB>> ]
+"11216" [label = <(METHOD_RETURN,jlongArray)<SUB>2009</SUB>> ]
+  "11212" -> "11216" 
+  "11213" -> "11212" 
+  "11208" -> "11213" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/205-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/205-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/205-cfg.dot	2023-06-07 19:33:45.487394679 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/205-cfg.dot	2023-06-07 19:33:52.067393978 +0330
@@ -1,9 +1,333 @@
-digraph "NewDoubleArray" {  
-"11541" [label = <(RETURN,return NewPrimitiveArray&lt;jdoubleArray, mirror::DoubleArray&gt;(env, length);,return NewPrimitiveArray&lt;jdoubleArray, mirror::DoubleArray&gt;(env, length);)<SUB>2138</SUB>> ]
-"11542" [label = <(NewPrimitiveArray&lt;jdoubleArray,mirror::DoubleArray&gt;,NewPrimitiveArray&lt;jdoubleArray, mirror::DoubleArray&gt;(env, length))<SUB>2138</SUB>> ]
-"11537" [label = <(METHOD,NewDoubleArray)<SUB>2137</SUB>> ]
-"11545" [label = <(METHOD_RETURN,jdoubleArray)<SUB>2137</SUB>> ]
-  "11541" -> "11545" 
-  "11542" -> "11541" 
-  "11537" -> "11542" 
+digraph "NewObjectArray" {  
+"11240" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(element_jclass))<SUB>2019</SUB>> ]
+"11259" [label = <(soa,soa(env))<SUB>2022</SUB>> ]
+"11261" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; array_class)<SUB>2023</SUB>> ]
+"11344" [label = <(&lt;operator&gt;.assignment,mirror::ObjectArray&lt;mirror::Object&gt;* result =\012        mirror::ObjectArray&lt;mirror::Object&gt;::Alloc(soa.Self(), array_class, length))<SUB>2040</SUB>> ]
+"11484" [label = <(RETURN,return soa.AddLocalReference&lt;jobjectArray&gt;(result);,return soa.AddLocalReference&lt;jobjectArray&gt;(result);)<SUB>2059</SUB>> ]
+"11225" [label = <(UNLIKELY,UNLIKELY(length &lt; 0))<SUB>2015</SUB>> ]
+"11262" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>2023</SUB>> ]
+"11269" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; element_class = soa.Decode&lt;mirror::Class&gt;(element_jclass).Ptr())<SUB>2025</SUB>> ]
+"11315" [label = <(&lt;operator&gt;.assignment,* class_linker = Runtime::Current()-&gt;GetClassLinker())<SUB>2032</SUB>> ]
+"11324" [label = <(&lt;operator&gt;.assignment,array_class = class_linker-&gt;FindArrayClass(soa.Self(), &amp;element_class))<SUB>2033</SUB>> ]
+"11345" [label = <(&lt;operator&gt;.greaterThan,mirror::ObjectArray&lt;mirror::Object&gt;* result)<SUB>2040</SUB>> ]
+"11355" [label = <(&lt;operator&gt;.greaterThan,mirror::ObjectArray&lt;mirror::Object&gt;::Alloc(soa.Self(), array_class, length))<SUB>2041</SUB>> ]
+"11374" [label = <(&lt;operator&gt;.logicalAnd,result != nullptr &amp;&amp; initial_element != nullptr)<SUB>2042</SUB>> ]
+"11485" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobjectArray&gt;(result))<SUB>2059</SUB>> ]
+"11226" [label = <(&lt;operator&gt;.lessThan,length &lt; 0)<SUB>2015</SUB>> ]
+"11230" [label = <(JniAbortF,JavaVmExtFromEnv(env)-&gt;JniAbortF(&quot;NewObjectArray&quot;, &quot;negative array length: %d&quot;, length))<SUB>2016</SUB>> ]
+"11238" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2017</SUB>> ]
+"11264" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2023</SUB>> ]
+"11270" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; element_class)<SUB>2025</SUB>> ]
+"11277" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(element_jclass).Ptr())<SUB>2025</SUB>> ]
+"11290" [label = <(UNLIKELY,UNLIKELY(element_class-&gt;IsPrimitive()))<SUB>2026</SUB>> ]
+"11317" [label = <(GetClassLinker,Runtime::Current()-&gt;GetClassLinker())<SUB>2032</SUB>> ]
+"11326" [label = <(FindArrayClass,class_linker-&gt;FindArrayClass(soa.Self(), &amp;element_class))<SUB>2033</SUB>> ]
+"11337" [label = <(UNLIKELY,UNLIKELY(array_class == nullptr))<SUB>2034</SUB>> ]
+"11346" [label = <(&lt;operator&gt;.lessThan,mirror::ObjectArray&lt;mirror::Object)<SUB>2040</SUB>> ]
+"11353" [label = <(&lt;operator&gt;.indirection,* result)<SUB>2040</SUB>> ]
+"11356" [label = <(&lt;operator&gt;.lessThan,mirror::ObjectArray&lt;mirror::Object)<SUB>2041</SUB>> ]
+"11363" [label = <(::Alloc,::Alloc(soa.Self(), array_class, length))<SUB>2041</SUB>> ]
+"11375" [label = <(&lt;operator&gt;.notEquals,result != nullptr)<SUB>2042</SUB>> ]
+"11378" [label = <(&lt;operator&gt;.notEquals,initial_element != nullptr)<SUB>2042</SUB>> ]
+"11382" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; initial_object = soa.Decode&lt;mirror::Object&gt;(initial_element))<SUB>2043</SUB>> ]
+"11486" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobjectArray)<SUB>2059</SUB>> ]
+"11231" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>2016</SUB>> ]
+"11244" [label = <(UNLIKELY,UNLIKELY((element_jclass) == nullptr))<SUB>2019</SUB>> ]
+"11266" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>2023</SUB>> ]
+"11271" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>2025</SUB>> ]
+"11278" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>2025</SUB>> ]
+"11285" [label = <(Ptr,(element_jclass).Ptr())<SUB>2025</SUB>> ]
+"11291" [label = <(IsPrimitive,element_class-&gt;IsPrimitive())<SUB>2026</SUB>> ]
+"11296" [label = <(JniAbortF,soa.Vm()-&gt;JniAbortF(&quot;NewObjectArray&quot;,\012 &quot;not an object type: %s&quot;,\012                            element_class-&gt;PrettyDescriptor().c_str()))<SUB>2027</SUB>> ]
+"11312" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2030</SUB>> ]
+"11318" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetClassLinker)<SUB>2032</SUB>> ]
+"11327" [label = <(&lt;operator&gt;.indirectFieldAccess,class_linker-&gt;FindArrayClass)<SUB>2033</SUB>> ]
+"11330" [label = <(Self,soa.Self())<SUB>2033</SUB>> ]
+"11334" [label = <(&lt;operator&gt;.addressOf,&amp;element_class)<SUB>2033</SUB>> ]
+"11338" [label = <(&lt;operator&gt;.equals,array_class == nullptr)<SUB>2034</SUB>> ]
+"11342" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2035</SUB>> ]
+"11347" [label = <(&lt;operator&gt;.fieldAccess,mirror::ObjectArray)<SUB>2040</SUB>> ]
+"11350" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2040</SUB>> ]
+"11357" [label = <(&lt;operator&gt;.fieldAccess,mirror::ObjectArray)<SUB>2041</SUB>> ]
+"11360" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2041</SUB>> ]
+"11364" [label = <(&lt;operator&gt;.fieldAccess,::Alloc)<SUB>2041</SUB>> ]
+"11367" [label = <(Self,soa.Self())<SUB>2041</SUB>> ]
+"11383" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; initial_object)<SUB>2043</SUB>> ]
+"11390" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(initial_element))<SUB>2043</SUB>> ]
+"11400" [label = <(&lt;operator&gt;.notEquals,initial_object != nullptr)<SUB>2044</SUB>> ]
+"11487" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>2059</SUB>> ]
+"11232" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2016</SUB>> ]
+"11234" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2016</SUB>> ]
+"11245" [label = <(&lt;operator&gt;.equals,(element_jclass) == nullptr)<SUB>2019</SUB>> ]
+"11249" [label = <(CHECK_NON_NULL_ARGUMENT(element_jclass),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;element_jclass == null&quot;))<SUB>2019</SUB>> ]
+"11256" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(element_jclass),CHECK_NON_NULL_ARGUMENT(element_jclass))<SUB>2019</SUB>> ]
+"11273" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2025</SUB>> ]
+"11279" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2025</SUB>> ]
+"11282" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2025</SUB>> ]
+"11286" [label = <(&lt;operator&gt;.fieldAccess,(element_jclass).Ptr)<SUB>2025</SUB>> ]
+"11292" [label = <(&lt;operator&gt;.indirectFieldAccess,element_class-&gt;IsPrimitive)<SUB>2026</SUB>> ]
+"11297" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Vm()-&gt;JniAbortF)<SUB>2027</SUB>> ]
+"11305" [label = <(c_str,element_class-&gt;PrettyDescriptor().c_str())<SUB>2029</SUB>> ]
+"11319" [label = <(Runtime::Current,Runtime::Current())<SUB>2032</SUB>> ]
+"11323" [label = <(FIELD_IDENTIFIER,GetClassLinker,GetClassLinker)<SUB>2032</SUB>> ]
+"11329" [label = <(FIELD_IDENTIFIER,FindArrayClass,FindArrayClass)<SUB>2033</SUB>> ]
+"11331" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>2033</SUB>> ]
+"11349" [label = <(FIELD_IDENTIFIER,ObjectArray,ObjectArray)<SUB>2040</SUB>> ]
+"11352" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2040</SUB>> ]
+"11359" [label = <(FIELD_IDENTIFIER,ObjectArray,ObjectArray)<SUB>2041</SUB>> ]
+"11362" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2041</SUB>> ]
+"11366" [label = <(FIELD_IDENTIFIER,Alloc,Alloc)<SUB>2041</SUB>> ]
+"11368" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>2041</SUB>> ]
+"11384" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>2043</SUB>> ]
+"11391" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>2043</SUB>> ]
+"11405" [label = <(&lt;operator&gt;.assignment,* element_class = result-&gt;GetClass()-&gt;GetComponentType())<SUB>2045</SUB>> ]
+"11489" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>2059</SUB>> ]
+"11250" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2019</SUB>> ]
+"11275" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>2025</SUB>> ]
+"11281" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2025</SUB>> ]
+"11284" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>2025</SUB>> ]
+"11288" [label = <(FIELD_IDENTIFIER,Ptr,Ptr)<SUB>2025</SUB>> ]
+"11294" [label = <(FIELD_IDENTIFIER,IsPrimitive,IsPrimitive)<SUB>2026</SUB>> ]
+"11298" [label = <(Vm,soa.Vm())<SUB>2027</SUB>> ]
+"11302" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2027</SUB>> ]
+"11306" [label = <(&lt;operator&gt;.fieldAccess,element_class-&gt;PrettyDescriptor().c_str)<SUB>2029</SUB>> ]
+"11320" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>2032</SUB>> ]
+"11333" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>2033</SUB>> ]
+"11370" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>2041</SUB>> ]
+"11386" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2043</SUB>> ]
+"11392" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2043</SUB>> ]
+"11395" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2043</SUB>> ]
+"11407" [label = <(GetComponentType,result-&gt;GetClass()-&gt;GetComponentType())<SUB>2045</SUB>> ]
+"11415" [label = <(UNLIKELY,UNLIKELY(!element_class-&gt;IsAssignableFrom(initial_object-&gt;GetClass())))<SUB>2046</SUB>> ]
+"11251" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2019</SUB>> ]
+"11253" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2019</SUB>> ]
+"11299" [label = <(&lt;operator&gt;.fieldAccess,soa.Vm)<SUB>2027</SUB>> ]
+"11307" [label = <(PrettyDescriptor,element_class-&gt;PrettyDescriptor())<SUB>2029</SUB>> ]
+"11311" [label = <(FIELD_IDENTIFIER,c_str,c_str)<SUB>2029</SUB>> ]
+"11322" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>2032</SUB>> ]
+"11388" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2043</SUB>> ]
+"11394" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2043</SUB>> ]
+"11397" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2043</SUB>> ]
+"11408" [label = <(&lt;operator&gt;.indirectFieldAccess,result-&gt;GetClass()-&gt;GetComponentType)<SUB>2045</SUB>> ]
+"11416" [label = <(&lt;operator&gt;.logicalNot,!element_class-&gt;IsAssignableFrom(initial_object-&gt;GetClass()))<SUB>2046</SUB>> ]
+"11426" [label = <(JniAbortF,soa.Vm()-&gt;JniAbortF(&quot;NewObjectArray&quot;, &quot;cannot assign object of type '%s' to array with &quot;\012 &quot;element type of '%s'&quot;,\012                              mirror::Class::PrettyDescriptor(initial_object-&gt;GetClass()).c_str(),\012                              element_class-&gt;PrettyDescriptor().c_str()))<SUB>2047</SUB>> ]
+"11455" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2051</SUB>> ]
+"11301" [label = <(FIELD_IDENTIFIER,Vm,Vm)<SUB>2027</SUB>> ]
+"11308" [label = <(&lt;operator&gt;.indirectFieldAccess,element_class-&gt;PrettyDescriptor)<SUB>2029</SUB>> ]
+"11409" [label = <(GetClass,result-&gt;GetClass())<SUB>2045</SUB>> ]
+"11413" [label = <(FIELD_IDENTIFIER,GetComponentType,GetComponentType)<SUB>2045</SUB>> ]
+"11417" [label = <(IsAssignableFrom,element_class-&gt;IsAssignableFrom(initial_object-&gt;GetClass()))<SUB>2046</SUB>> ]
+"11427" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Vm()-&gt;JniAbortF)<SUB>2047</SUB>> ]
+"11435" [label = <(c_str,mirror::Class::PrettyDescriptor(initial_object-&gt;GetClass()).c_str())<SUB>2049</SUB>> ]
+"11448" [label = <(c_str,element_class-&gt;PrettyDescriptor().c_str())<SUB>2050</SUB>> ]
+"11310" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>2029</SUB>> ]
+"11410" [label = <(&lt;operator&gt;.indirectFieldAccess,result-&gt;GetClass)<SUB>2045</SUB>> ]
+"11418" [label = <(&lt;operator&gt;.indirectFieldAccess,element_class-&gt;IsAssignableFrom)<SUB>2046</SUB>> ]
+"11421" [label = <(GetClass,initial_object-&gt;GetClass())<SUB>2046</SUB>> ]
+"11428" [label = <(Vm,soa.Vm())<SUB>2047</SUB>> ]
+"11432" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2047</SUB>> ]
+"11436" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class::PrettyDescriptor(initial_object-&gt;GetClass()).c_str)<SUB>2049</SUB>> ]
+"11449" [label = <(&lt;operator&gt;.fieldAccess,element_class-&gt;PrettyDescriptor().c_str)<SUB>2050</SUB>> ]
+"11465" [label = <(&lt;operator&gt;.lessThan,i &lt; length)<SUB>2053</SUB>> ]
+"11468" [label = <(&lt;operator&gt;.preIncrement,++i)<SUB>2053</SUB>> ]
+"11412" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>2045</SUB>> ]
+"11420" [label = <(FIELD_IDENTIFIER,IsAssignableFrom,IsAssignableFrom)<SUB>2046</SUB>> ]
+"11422" [label = <(&lt;operator&gt;.indirectFieldAccess,initial_object-&gt;GetClass)<SUB>2046</SUB>> ]
+"11429" [label = <(&lt;operator&gt;.fieldAccess,soa.Vm)<SUB>2047</SUB>> ]
+"11437" [label = <(mirror::Class::PrettyDescriptor,mirror::Class::PrettyDescriptor(initial_object-&gt;GetClass()))<SUB>2049</SUB>> ]
+"11447" [label = <(FIELD_IDENTIFIER,c_str,c_str)<SUB>2049</SUB>> ]
+"11450" [label = <(PrettyDescriptor,element_class-&gt;PrettyDescriptor())<SUB>2050</SUB>> ]
+"11454" [label = <(FIELD_IDENTIFIER,c_str,c_str)<SUB>2050</SUB>> ]
+"11462" [label = <(&lt;operator&gt;.assignment,i = 0)<SUB>2053</SUB>> ]
+"11471" [label = <(&lt;operator&gt;.greaterThan,result-&gt;SetWithoutChecks&lt;false&gt;(i, initial_object.Ptr()))<SUB>2054</SUB>> ]
+"11424" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>2046</SUB>> ]
+"11431" [label = <(FIELD_IDENTIFIER,Vm,Vm)<SUB>2047</SUB>> ]
+"11438" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class::PrettyDescriptor)<SUB>2049</SUB>> ]
+"11443" [label = <(GetClass,initial_object-&gt;GetClass())<SUB>2049</SUB>> ]
+"11451" [label = <(&lt;operator&gt;.indirectFieldAccess,element_class-&gt;PrettyDescriptor)<SUB>2050</SUB>> ]
+"11472" [label = <(&lt;operator&gt;.lessThan,result-&gt;SetWithoutChecks&lt;false)<SUB>2054</SUB>> ]
+"11477" [label = <(&lt;operator&gt;.bracketedPrimary,(i, initial_object.Ptr()))<SUB>2054</SUB>> ]
+"11439" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2049</SUB>> ]
+"11442" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>2049</SUB>> ]
+"11444" [label = <(&lt;operator&gt;.indirectFieldAccess,initial_object-&gt;GetClass)<SUB>2049</SUB>> ]
+"11453" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>2050</SUB>> ]
+"11473" [label = <(&lt;operator&gt;.indirectFieldAccess,result-&gt;SetWithoutChecks)<SUB>2054</SUB>> ]
+"11478" [label = <(&lt;operator&gt;.expressionList,i, initial_object.Ptr())<SUB>2054</SUB>> ]
+"11446" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>2049</SUB>> ]
+"11475" [label = <(FIELD_IDENTIFIER,SetWithoutChecks,SetWithoutChecks)<SUB>2054</SUB>> ]
+"11480" [label = <(Ptr,initial_object.Ptr())<SUB>2054</SUB>> ]
+"11481" [label = <(&lt;operator&gt;.fieldAccess,initial_object.Ptr)<SUB>2054</SUB>> ]
+"11483" [label = <(FIELD_IDENTIFIER,Ptr,Ptr)<SUB>2054</SUB>> ]
+"11218" [label = <(METHOD,NewObjectArray)<SUB>2013</SUB>> ]
+"11492" [label = <(METHOD_RETURN,jobjectArray)<SUB>2013</SUB>> ]
+  "11240" -> "11245" 
+  "11240" -> "11259" 
+  "11259" -> "11266" 
+  "11261" -> "11275" 
+  "11344" -> "11375" 
+  "11484" -> "11492" 
+  "11225" -> "11232" 
+  "11225" -> "11240" 
+  "11262" -> "11261" 
+  "11269" -> "11294" 
+  "11315" -> "11329" 
+  "11324" -> "11338" 
+  "11345" -> "11359" 
+  "11355" -> "11344" 
+  "11374" -> "11388" 
+  "11374" -> "11489" 
+  "11485" -> "11484" 
+  "11226" -> "11225" 
+  "11230" -> "11238" 
+  "11238" -> "11492" 
+  "11264" -> "11262" 
+  "11270" -> "11281" 
+  "11277" -> "11269" 
+  "11290" -> "11301" 
+  "11290" -> "11322" 
+  "11317" -> "11315" 
+  "11326" -> "11324" 
+  "11337" -> "11342" 
+  "11337" -> "11349" 
+  "11346" -> "11353" 
+  "11353" -> "11345" 
+  "11356" -> "11366" 
+  "11363" -> "11355" 
+  "11375" -> "11374" 
+  "11375" -> "11378" 
+  "11378" -> "11374" 
+  "11382" -> "11400" 
+  "11486" -> "11485" 
+  "11231" -> "11230" 
+  "11244" -> "11251" 
+  "11244" -> "11259" 
+  "11266" -> "11264" 
+  "11271" -> "11270" 
+  "11278" -> "11288" 
+  "11285" -> "11277" 
+  "11291" -> "11290" 
+  "11296" -> "11312" 
+  "11312" -> "11492" 
+  "11318" -> "11317" 
+  "11327" -> "11333" 
+  "11330" -> "11334" 
+  "11334" -> "11326" 
+  "11338" -> "11337" 
+  "11342" -> "11492" 
+  "11347" -> "11352" 
+  "11350" -> "11346" 
+  "11357" -> "11362" 
+  "11360" -> "11356" 
+  "11364" -> "11370" 
+  "11367" -> "11363" 
+  "11383" -> "11394" 
+  "11390" -> "11382" 
+  "11400" -> "11412" 
+  "11400" -> "11489" 
+  "11487" -> "11486" 
+  "11232" -> "11234" 
+  "11234" -> "11231" 
+  "11245" -> "11244" 
+  "11249" -> "11256" 
+  "11256" -> "11492" 
+  "11273" -> "11271" 
+  "11279" -> "11284" 
+  "11282" -> "11278" 
+  "11286" -> "11285" 
+  "11292" -> "11291" 
+  "11297" -> "11310" 
+  "11305" -> "11296" 
+  "11319" -> "11323" 
+  "11323" -> "11318" 
+  "11329" -> "11327" 
+  "11331" -> "11330" 
+  "11349" -> "11347" 
+  "11352" -> "11350" 
+  "11359" -> "11357" 
+  "11362" -> "11360" 
+  "11366" -> "11364" 
+  "11368" -> "11367" 
+  "11384" -> "11383" 
+  "11391" -> "11390" 
+  "11405" -> "11420" 
+  "11489" -> "11487" 
+  "11250" -> "11249" 
+  "11275" -> "11273" 
+  "11281" -> "11279" 
+  "11284" -> "11282" 
+  "11288" -> "11286" 
+  "11294" -> "11292" 
+  "11298" -> "11302" 
+  "11302" -> "11297" 
+  "11306" -> "11305" 
+  "11320" -> "11319" 
+  "11333" -> "11331" 
+  "11370" -> "11368" 
+  "11386" -> "11384" 
+  "11392" -> "11397" 
+  "11395" -> "11391" 
+  "11407" -> "11405" 
+  "11415" -> "11431" 
+  "11415" -> "11462" 
+  "11251" -> "11253" 
+  "11253" -> "11250" 
+  "11299" -> "11298" 
+  "11307" -> "11311" 
+  "11311" -> "11306" 
+  "11322" -> "11320" 
+  "11388" -> "11386" 
+  "11394" -> "11392" 
+  "11397" -> "11395" 
+  "11408" -> "11407" 
+  "11416" -> "11415" 
+  "11426" -> "11455" 
+  "11455" -> "11492" 
+  "11301" -> "11299" 
+  "11308" -> "11307" 
+  "11409" -> "11413" 
+  "11413" -> "11408" 
+  "11417" -> "11416" 
+  "11427" -> "11439" 
+  "11435" -> "11453" 
+  "11448" -> "11426" 
+  "11310" -> "11308" 
+  "11410" -> "11409" 
+  "11418" -> "11424" 
+  "11421" -> "11417" 
+  "11428" -> "11432" 
+  "11432" -> "11427" 
+  "11436" -> "11435" 
+  "11449" -> "11448" 
+  "11465" -> "11475" 
+  "11465" -> "11489" 
+  "11468" -> "11465" 
+  "11412" -> "11410" 
+  "11420" -> "11418" 
+  "11422" -> "11421" 
+  "11429" -> "11428" 
+  "11437" -> "11447" 
+  "11447" -> "11436" 
+  "11450" -> "11454" 
+  "11454" -> "11449" 
+  "11462" -> "11465" 
+  "11471" -> "11468" 
+  "11424" -> "11422" 
+  "11431" -> "11429" 
+  "11438" -> "11446" 
+  "11443" -> "11437" 
+  "11451" -> "11450" 
+  "11472" -> "11483" 
+  "11477" -> "11471" 
+  "11439" -> "11442" 
+  "11442" -> "11438" 
+  "11444" -> "11443" 
+  "11453" -> "11451" 
+  "11473" -> "11472" 
+  "11478" -> "11477" 
+  "11446" -> "11444" 
+  "11475" -> "11473" 
+  "11480" -> "11478" 
+  "11481" -> "11480" 
+  "11483" -> "11481" 
+  "11218" -> "11226" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/206-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/206-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/206-cfg.dot	2023-06-07 19:33:45.487394679 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/206-cfg.dot	2023-06-07 19:33:52.067393978 +0330
@@ -1,9 +1,9 @@
-digraph "NewFloatArray" {  
-"11551" [label = <(RETURN,return NewPrimitiveArray&lt;jfloatArray, mirror::FloatArray&gt;(env, length);,return NewPrimitiveArray&lt;jfloatArray, mirror::FloatArray&gt;(env, length);)<SUB>2142</SUB>> ]
-"11552" [label = <(NewPrimitiveArray&lt;jfloatArray,mirror::FloatArray&gt;,NewPrimitiveArray&lt;jfloatArray, mirror::FloatArray&gt;(env, length))<SUB>2142</SUB>> ]
-"11547" [label = <(METHOD,NewFloatArray)<SUB>2141</SUB>> ]
-"11555" [label = <(METHOD_RETURN,jfloatArray)<SUB>2141</SUB>> ]
-  "11551" -> "11555" 
-  "11552" -> "11551" 
-  "11547" -> "11552" 
+digraph "NewShortArray" {  
+"11498" [label = <(RETURN,return NewPrimitiveArray&lt;jshortArray, mirror::ShortArray&gt;(env, length);,return NewPrimitiveArray&lt;jshortArray, mirror::ShortArray&gt;(env, length);)<SUB>2063</SUB>> ]
+"11499" [label = <(NewPrimitiveArray&lt;jshortArray,mirror::ShortArray&gt;,NewPrimitiveArray&lt;jshortArray, mirror::ShortArray&gt;(env, length))<SUB>2063</SUB>> ]
+"11494" [label = <(METHOD,NewShortArray)<SUB>2062</SUB>> ]
+"11502" [label = <(METHOD_RETURN,jshortArray)<SUB>2062</SUB>> ]
+  "11498" -> "11502" 
+  "11499" -> "11498" 
+  "11494" -> "11499" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/207-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/207-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/207-cfg.dot	2023-06-07 19:33:45.487394679 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/207-cfg.dot	2023-06-07 19:33:52.067393978 +0330
@@ -1,9 +1,185 @@
-digraph "NewIntArray" {  
-"11561" [label = <(RETURN,return NewPrimitiveArray&lt;jintArray, mirror::IntArray&gt;(env, length);,return NewPrimitiveArray&lt;jintArray, mirror::IntArray&gt;(env, length);)<SUB>2146</SUB>> ]
-"11562" [label = <(NewPrimitiveArray&lt;jintArray,mirror::IntArray&gt;,NewPrimitiveArray&lt;jintArray, mirror::IntArray&gt;(env, length))<SUB>2146</SUB>> ]
-"11557" [label = <(METHOD,NewIntArray)<SUB>2145</SUB>> ]
-"11565" [label = <(METHOD_RETURN,jintArray)<SUB>2145</SUB>> ]
-  "11561" -> "11565" 
-  "11562" -> "11561" 
-  "11557" -> "11562" 
+digraph "GetPrimitiveArrayCritical" {  
+"11509" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_array))<SUB>2067</SUB>> ]
+"11528" [label = <(soa,soa(env))<SUB>2068</SUB>> ]
+"11530" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Array&gt; array = soa.Decode&lt;mirror::Array&gt;(java_array))<SUB>2069</SUB>> ]
+"11580" [label = <(&lt;operator&gt;.assignment,* heap = Runtime::Current()-&gt;GetHeap())<SUB>2075</SUB>> ]
+"11638" [label = <(RETURN,return array-&gt;GetRawData(array-&gt;GetClass()-&gt;GetComponentSize(), 0);,return array-&gt;GetRawData(array-&gt;GetClass()-&gt;GetComponentSize(), 0);)<SUB>2090</SUB>> ]
+"11531" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Array&gt; array)<SUB>2069</SUB>> ]
+"11538" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Array&gt;(java_array))<SUB>2069</SUB>> ]
+"11548" [label = <(UNLIKELY,UNLIKELY(!array-&gt;GetClass()-&gt;IsPrimitiveArray()))<SUB>2070</SUB>> ]
+"11582" [label = <(GetHeap,Runtime::Current()-&gt;GetHeap())<SUB>2075</SUB>> ]
+"11590" [label = <(IsMovableObject,heap-&gt;IsMovableObject(array))<SUB>2076</SUB>> ]
+"11630" [label = <(&lt;operator&gt;.notEquals,is_copy != nullptr)<SUB>2087</SUB>> ]
+"11639" [label = <(GetRawData,array-&gt;GetRawData(array-&gt;GetClass()-&gt;GetComponentSize(), 0))<SUB>2090</SUB>> ]
+"11532" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Array)<SUB>2069</SUB>> ]
+"11539" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Array)<SUB>2069</SUB>> ]
+"11549" [label = <(&lt;operator&gt;.logicalNot,!array-&gt;GetClass()-&gt;IsPrimitiveArray())<SUB>2070</SUB>> ]
+"11558" [label = <(JniAbortF,soa.Vm()-&gt;JniAbortF(&quot;GetPrimitiveArrayCritical&quot;, &quot;expected primitive array, given %s&quot;,\012                          array-&gt;GetClass()-&gt;PrettyDescriptor().c_str()))<SUB>2071</SUB>> ]
+"11577" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2073</SUB>> ]
+"11583" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetHeap)<SUB>2075</SUB>> ]
+"11591" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;IsMovableObject)<SUB>2076</SUB>> ]
+"11618" [label = <(&lt;operator&gt;.assignment,array = soa.Decode&lt;mirror::Array&gt;(java_array))<SUB>2085</SUB>> ]
+"11634" [label = <(&lt;operator&gt;.assignment,*is_copy = JNI_FALSE)<SUB>2088</SUB>> ]
+"11640" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetRawData)<SUB>2090</SUB>> ]
+"11643" [label = <(GetComponentSize,array-&gt;GetClass()-&gt;GetComponentSize())<SUB>2090</SUB>> ]
+"11513" [label = <(UNLIKELY,UNLIKELY((java_array) == nullptr))<SUB>2067</SUB>> ]
+"11534" [label = <(&lt;operator&gt;.fieldAccess,mirror::Array)<SUB>2069</SUB>> ]
+"11540" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2069</SUB>> ]
+"11543" [label = <(&lt;operator&gt;.fieldAccess,mirror::Array)<SUB>2069</SUB>> ]
+"11550" [label = <(IsPrimitiveArray,array-&gt;GetClass()-&gt;IsPrimitiveArray())<SUB>2070</SUB>> ]
+"11559" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Vm()-&gt;JniAbortF)<SUB>2071</SUB>> ]
+"11567" [label = <(c_str,array-&gt;GetClass()-&gt;PrettyDescriptor().c_str())<SUB>2072</SUB>> ]
+"11584" [label = <(Runtime::Current,Runtime::Current())<SUB>2075</SUB>> ]
+"11588" [label = <(FIELD_IDENTIFIER,GetHeap,GetHeap)<SUB>2075</SUB>> ]
+"11593" [label = <(FIELD_IDENTIFIER,IsMovableObject,IsMovableObject)<SUB>2076</SUB>> ]
+"11597" [label = <(&lt;operator&gt;.logicalNot,!kUseReadBarrier)<SUB>2077</SUB>> ]
+"11620" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Array&gt;(java_array))<SUB>2085</SUB>> ]
+"11635" [label = <(&lt;operator&gt;.indirection,*is_copy)<SUB>2088</SUB>> ]
+"11642" [label = <(FIELD_IDENTIFIER,GetRawData,GetRawData)<SUB>2090</SUB>> ]
+"11644" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass()-&gt;GetComponentSize)<SUB>2090</SUB>> ]
+"11514" [label = <(&lt;operator&gt;.equals,(java_array) == nullptr)<SUB>2067</SUB>> ]
+"11518" [label = <(CHECK_NON_NULL_ARGUMENT(java_array),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_array == null&quot;))<SUB>2067</SUB>> ]
+"11525" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_array),CHECK_NON_NULL_ARGUMENT(java_array))<SUB>2067</SUB>> ]
+"11536" [label = <(FIELD_IDENTIFIER,Array,Array)<SUB>2069</SUB>> ]
+"11542" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2069</SUB>> ]
+"11545" [label = <(FIELD_IDENTIFIER,Array,Array)<SUB>2069</SUB>> ]
+"11551" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass()-&gt;IsPrimitiveArray)<SUB>2070</SUB>> ]
+"11560" [label = <(Vm,soa.Vm())<SUB>2071</SUB>> ]
+"11564" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2071</SUB>> ]
+"11568" [label = <(&lt;operator&gt;.fieldAccess,array-&gt;GetClass()-&gt;PrettyDescriptor().c_str)<SUB>2072</SUB>> ]
+"11585" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>2075</SUB>> ]
+"11600" [label = <(IncrementDisableMovingGC,heap-&gt;IncrementDisableMovingGC(soa.Self()))<SUB>2078</SUB>> ]
+"11621" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Array)<SUB>2085</SUB>> ]
+"11645" [label = <(GetClass,array-&gt;GetClass())<SUB>2090</SUB>> ]
+"11649" [label = <(FIELD_IDENTIFIER,GetComponentSize,GetComponentSize)<SUB>2090</SUB>> ]
+"11519" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2067</SUB>> ]
+"11552" [label = <(GetClass,array-&gt;GetClass())<SUB>2070</SUB>> ]
+"11556" [label = <(FIELD_IDENTIFIER,IsPrimitiveArray,IsPrimitiveArray)<SUB>2070</SUB>> ]
+"11561" [label = <(&lt;operator&gt;.fieldAccess,soa.Vm)<SUB>2071</SUB>> ]
+"11569" [label = <(PrettyDescriptor,array-&gt;GetClass()-&gt;PrettyDescriptor())<SUB>2072</SUB>> ]
+"11576" [label = <(FIELD_IDENTIFIER,c_str,c_str)<SUB>2072</SUB>> ]
+"11587" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>2075</SUB>> ]
+"11601" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;IncrementDisableMovingGC)<SUB>2078</SUB>> ]
+"11604" [label = <(Self,soa.Self())<SUB>2078</SUB>> ]
+"11610" [label = <(IncrementDisableThreadFlip,heap-&gt;IncrementDisableThreadFlip(soa.Self()))<SUB>2082</SUB>> ]
+"11622" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2085</SUB>> ]
+"11625" [label = <(&lt;operator&gt;.fieldAccess,mirror::Array)<SUB>2085</SUB>> ]
+"11646" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass)<SUB>2090</SUB>> ]
+"11520" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2067</SUB>> ]
+"11522" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2067</SUB>> ]
+"11553" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass)<SUB>2070</SUB>> ]
+"11563" [label = <(FIELD_IDENTIFIER,Vm,Vm)<SUB>2071</SUB>> ]
+"11570" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass()-&gt;PrettyDescriptor)<SUB>2072</SUB>> ]
+"11603" [label = <(FIELD_IDENTIFIER,IncrementDisableMovingGC,IncrementDisableMovingGC)<SUB>2078</SUB>> ]
+"11605" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>2078</SUB>> ]
+"11611" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;IncrementDisableThreadFlip)<SUB>2082</SUB>> ]
+"11614" [label = <(Self,soa.Self())<SUB>2082</SUB>> ]
+"11624" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2085</SUB>> ]
+"11627" [label = <(FIELD_IDENTIFIER,Array,Array)<SUB>2085</SUB>> ]
+"11648" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>2090</SUB>> ]
+"11555" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>2070</SUB>> ]
+"11571" [label = <(GetClass,array-&gt;GetClass())<SUB>2072</SUB>> ]
+"11575" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>2072</SUB>> ]
+"11607" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>2078</SUB>> ]
+"11613" [label = <(FIELD_IDENTIFIER,IncrementDisableThreadFlip,IncrementDisableThreadFlip)<SUB>2082</SUB>> ]
+"11615" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>2082</SUB>> ]
+"11572" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass)<SUB>2072</SUB>> ]
+"11617" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>2082</SUB>> ]
+"11574" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>2072</SUB>> ]
+"11504" [label = <(METHOD,GetPrimitiveArrayCritical)<SUB>2066</SUB>> ]
+"11651" [label = <(METHOD_RETURN,void*)<SUB>2066</SUB>> ]
+  "11509" -> "11514" 
+  "11509" -> "11528" 
+  "11528" -> "11536" 
+  "11530" -> "11555" 
+  "11580" -> "11593" 
+  "11638" -> "11651" 
+  "11531" -> "11542" 
+  "11538" -> "11530" 
+  "11548" -> "11563" 
+  "11548" -> "11587" 
+  "11582" -> "11580" 
+  "11590" -> "11597" 
+  "11590" -> "11630" 
+  "11630" -> "11635" 
+  "11630" -> "11642" 
+  "11639" -> "11638" 
+  "11532" -> "11531" 
+  "11539" -> "11538" 
+  "11549" -> "11548" 
+  "11558" -> "11577" 
+  "11577" -> "11651" 
+  "11583" -> "11582" 
+  "11591" -> "11590" 
+  "11618" -> "11630" 
+  "11634" -> "11642" 
+  "11640" -> "11648" 
+  "11643" -> "11639" 
+  "11513" -> "11520" 
+  "11513" -> "11528" 
+  "11534" -> "11532" 
+  "11540" -> "11545" 
+  "11543" -> "11539" 
+  "11550" -> "11549" 
+  "11559" -> "11574" 
+  "11567" -> "11558" 
+  "11584" -> "11588" 
+  "11588" -> "11583" 
+  "11593" -> "11591" 
+  "11597" -> "11603" 
+  "11597" -> "11613" 
+  "11620" -> "11618" 
+  "11635" -> "11634" 
+  "11642" -> "11640" 
+  "11644" -> "11643" 
+  "11514" -> "11513" 
+  "11518" -> "11525" 
+  "11525" -> "11651" 
+  "11536" -> "11534" 
+  "11542" -> "11540" 
+  "11545" -> "11543" 
+  "11551" -> "11550" 
+  "11560" -> "11564" 
+  "11564" -> "11559" 
+  "11568" -> "11567" 
+  "11585" -> "11584" 
+  "11600" -> "11624" 
+  "11621" -> "11620" 
+  "11645" -> "11649" 
+  "11649" -> "11644" 
+  "11519" -> "11518" 
+  "11552" -> "11556" 
+  "11556" -> "11551" 
+  "11561" -> "11560" 
+  "11569" -> "11576" 
+  "11576" -> "11568" 
+  "11587" -> "11585" 
+  "11601" -> "11607" 
+  "11604" -> "11600" 
+  "11610" -> "11624" 
+  "11622" -> "11627" 
+  "11625" -> "11621" 
+  "11646" -> "11645" 
+  "11520" -> "11522" 
+  "11522" -> "11519" 
+  "11553" -> "11552" 
+  "11563" -> "11561" 
+  "11570" -> "11569" 
+  "11603" -> "11601" 
+  "11605" -> "11604" 
+  "11611" -> "11617" 
+  "11614" -> "11610" 
+  "11624" -> "11622" 
+  "11627" -> "11625" 
+  "11648" -> "11646" 
+  "11555" -> "11553" 
+  "11571" -> "11575" 
+  "11575" -> "11570" 
+  "11607" -> "11605" 
+  "11613" -> "11611" 
+  "11615" -> "11614" 
+  "11572" -> "11571" 
+  "11617" -> "11615" 
+  "11574" -> "11572" 
+  "11504" -> "11509" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/208-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/208-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/208-cfg.dot	2023-06-07 19:33:45.487394679 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/208-cfg.dot	2023-06-07 19:33:52.067393978 +0330
@@ -1,9 +1,118 @@
-digraph "NewLongArray" {  
-"11571" [label = <(RETURN,return NewPrimitiveArray&lt;jlongArray, mirror::LongArray&gt;(env, length);,return NewPrimitiveArray&lt;jlongArray, mirror::LongArray&gt;(env, length);)<SUB>2150</SUB>> ]
-"11572" [label = <(NewPrimitiveArray&lt;jlongArray,mirror::LongArray&gt;,NewPrimitiveArray&lt;jlongArray, mirror::LongArray&gt;(env, length))<SUB>2150</SUB>> ]
-"11567" [label = <(METHOD,NewLongArray)<SUB>2149</SUB>> ]
-"11575" [label = <(METHOD_RETURN,jlongArray)<SUB>2149</SUB>> ]
-  "11571" -> "11575" 
-  "11572" -> "11571" 
-  "11567" -> "11572" 
+digraph "ReleasePrimitiveArrayCritical" {  
+"11659" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>2095</SUB>> ]
+"11677" [label = <(soa,soa(env))<SUB>2096</SUB>> ]
+"11679" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Array&gt; array = soa.Decode&lt;mirror::Array&gt;(java_array))<SUB>2097</SUB>> ]
+"11728" [label = <(&lt;operator&gt;.assignment,component_size = array-&gt;GetClass()-&gt;GetComponentSize())<SUB>2103</SUB>> ]
+"11737" [label = <(ReleasePrimitiveArray,ReleasePrimitiveArray(soa, array.Ptr(), component_size, elements, mode))<SUB>2104</SUB>> ]
+"11680" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Array&gt; array)<SUB>2097</SUB>> ]
+"11687" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Array&gt;(java_array))<SUB>2097</SUB>> ]
+"11697" [label = <(UNLIKELY,UNLIKELY(!array-&gt;GetClass()-&gt;IsPrimitiveArray()))<SUB>2098</SUB>> ]
+"11730" [label = <(GetComponentSize,array-&gt;GetClass()-&gt;GetComponentSize())<SUB>2103</SUB>> ]
+"11739" [label = <(Ptr,array.Ptr())<SUB>2104</SUB>> ]
+"11681" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Array)<SUB>2097</SUB>> ]
+"11688" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Array)<SUB>2097</SUB>> ]
+"11698" [label = <(&lt;operator&gt;.logicalNot,!array-&gt;GetClass()-&gt;IsPrimitiveArray())<SUB>2098</SUB>> ]
+"11707" [label = <(JniAbortF,soa.Vm()-&gt;JniAbortF(&quot;ReleasePrimitiveArrayCritical&quot;, &quot;expected primitive array, given %s&quot;,\012                          array-&gt;GetClass()-&gt;PrettyDescriptor().c_str()))<SUB>2099</SUB>> ]
+"11726" [label = <(RETURN,return;,return;)<SUB>2101</SUB>> ]
+"11731" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass()-&gt;GetComponentSize)<SUB>2103</SUB>> ]
+"11740" [label = <(&lt;operator&gt;.fieldAccess,array.Ptr)<SUB>2104</SUB>> ]
+"11663" [label = <(UNLIKELY,UNLIKELY((java_array) == nullptr))<SUB>2095</SUB>> ]
+"11683" [label = <(&lt;operator&gt;.fieldAccess,mirror::Array)<SUB>2097</SUB>> ]
+"11689" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2097</SUB>> ]
+"11692" [label = <(&lt;operator&gt;.fieldAccess,mirror::Array)<SUB>2097</SUB>> ]
+"11699" [label = <(IsPrimitiveArray,array-&gt;GetClass()-&gt;IsPrimitiveArray())<SUB>2098</SUB>> ]
+"11708" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Vm()-&gt;JniAbortF)<SUB>2099</SUB>> ]
+"11716" [label = <(c_str,array-&gt;GetClass()-&gt;PrettyDescriptor().c_str())<SUB>2100</SUB>> ]
+"11732" [label = <(GetClass,array-&gt;GetClass())<SUB>2103</SUB>> ]
+"11736" [label = <(FIELD_IDENTIFIER,GetComponentSize,GetComponentSize)<SUB>2103</SUB>> ]
+"11742" [label = <(FIELD_IDENTIFIER,Ptr,Ptr)<SUB>2104</SUB>> ]
+"11664" [label = <(&lt;operator&gt;.equals,(java_array) == nullptr)<SUB>2095</SUB>> ]
+"11668" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_array == null&quot;))<SUB>2095</SUB>> ]
+"11675" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>2095</SUB>> ]
+"11685" [label = <(FIELD_IDENTIFIER,Array,Array)<SUB>2097</SUB>> ]
+"11691" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2097</SUB>> ]
+"11694" [label = <(FIELD_IDENTIFIER,Array,Array)<SUB>2097</SUB>> ]
+"11700" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass()-&gt;IsPrimitiveArray)<SUB>2098</SUB>> ]
+"11709" [label = <(Vm,soa.Vm())<SUB>2099</SUB>> ]
+"11713" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2099</SUB>> ]
+"11717" [label = <(&lt;operator&gt;.fieldAccess,array-&gt;GetClass()-&gt;PrettyDescriptor().c_str)<SUB>2100</SUB>> ]
+"11733" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass)<SUB>2103</SUB>> ]
+"11669" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2095</SUB>> ]
+"11701" [label = <(GetClass,array-&gt;GetClass())<SUB>2098</SUB>> ]
+"11705" [label = <(FIELD_IDENTIFIER,IsPrimitiveArray,IsPrimitiveArray)<SUB>2098</SUB>> ]
+"11710" [label = <(&lt;operator&gt;.fieldAccess,soa.Vm)<SUB>2099</SUB>> ]
+"11718" [label = <(PrettyDescriptor,array-&gt;GetClass()-&gt;PrettyDescriptor())<SUB>2100</SUB>> ]
+"11725" [label = <(FIELD_IDENTIFIER,c_str,c_str)<SUB>2100</SUB>> ]
+"11735" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>2103</SUB>> ]
+"11670" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2095</SUB>> ]
+"11672" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2095</SUB>> ]
+"11702" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass)<SUB>2098</SUB>> ]
+"11712" [label = <(FIELD_IDENTIFIER,Vm,Vm)<SUB>2099</SUB>> ]
+"11719" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass()-&gt;PrettyDescriptor)<SUB>2100</SUB>> ]
+"11704" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>2098</SUB>> ]
+"11720" [label = <(GetClass,array-&gt;GetClass())<SUB>2100</SUB>> ]
+"11724" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>2100</SUB>> ]
+"11721" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass)<SUB>2100</SUB>> ]
+"11723" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>2100</SUB>> ]
+"11653" [label = <(METHOD,ReleasePrimitiveArrayCritical)<SUB>2093</SUB>> ]
+"11746" [label = <(METHOD_RETURN,void)<SUB>2093</SUB>> ]
+  "11659" -> "11664" 
+  "11659" -> "11677" 
+  "11677" -> "11685" 
+  "11679" -> "11704" 
+  "11728" -> "11742" 
+  "11737" -> "11746" 
+  "11680" -> "11691" 
+  "11687" -> "11679" 
+  "11697" -> "11712" 
+  "11697" -> "11735" 
+  "11730" -> "11728" 
+  "11739" -> "11737" 
+  "11681" -> "11680" 
+  "11688" -> "11687" 
+  "11698" -> "11697" 
+  "11707" -> "11726" 
+  "11726" -> "11746" 
+  "11731" -> "11730" 
+  "11740" -> "11739" 
+  "11663" -> "11670" 
+  "11663" -> "11677" 
+  "11683" -> "11681" 
+  "11689" -> "11694" 
+  "11692" -> "11688" 
+  "11699" -> "11698" 
+  "11708" -> "11723" 
+  "11716" -> "11707" 
+  "11732" -> "11736" 
+  "11736" -> "11731" 
+  "11742" -> "11740" 
+  "11664" -> "11663" 
+  "11668" -> "11675" 
+  "11675" -> "11746" 
+  "11685" -> "11683" 
+  "11691" -> "11689" 
+  "11694" -> "11692" 
+  "11700" -> "11699" 
+  "11709" -> "11713" 
+  "11713" -> "11708" 
+  "11717" -> "11716" 
+  "11733" -> "11732" 
+  "11669" -> "11668" 
+  "11701" -> "11705" 
+  "11705" -> "11700" 
+  "11710" -> "11709" 
+  "11718" -> "11725" 
+  "11725" -> "11717" 
+  "11735" -> "11733" 
+  "11670" -> "11672" 
+  "11672" -> "11669" 
+  "11702" -> "11701" 
+  "11712" -> "11710" 
+  "11719" -> "11718" 
+  "11704" -> "11702" 
+  "11720" -> "11724" 
+  "11724" -> "11719" 
+  "11721" -> "11720" 
+  "11723" -> "11721" 
+  "11653" -> "11659" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/209-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/209-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/209-cfg.dot	2023-06-07 19:33:45.487394679 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/209-cfg.dot	2023-06-07 19:33:52.067393978 +0330
@@ -1,333 +1,9 @@
-digraph "NewObjectArray" {  
-"11599" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(element_jclass))<SUB>2159</SUB>> ]
-"11618" [label = <(soa,soa(env))<SUB>2162</SUB>> ]
-"11620" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; array_class)<SUB>2163</SUB>> ]
-"11703" [label = <(&lt;operator&gt;.assignment,mirror::ObjectArray&lt;mirror::Object&gt;* result =\012        mirror::ObjectArray&lt;mirror::Object&gt;::Alloc(soa.Self(), array_class, length))<SUB>2180</SUB>> ]
-"11843" [label = <(RETURN,return soa.AddLocalReference&lt;jobjectArray&gt;(result);,return soa.AddLocalReference&lt;jobjectArray&gt;(result);)<SUB>2199</SUB>> ]
-"11584" [label = <(UNLIKELY,UNLIKELY(length &lt; 0))<SUB>2155</SUB>> ]
-"11621" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>2163</SUB>> ]
-"11628" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; element_class = soa.Decode&lt;mirror::Class&gt;(element_jclass).Ptr())<SUB>2165</SUB>> ]
-"11674" [label = <(&lt;operator&gt;.assignment,* class_linker = Runtime::Current()-&gt;GetClassLinker())<SUB>2172</SUB>> ]
-"11683" [label = <(&lt;operator&gt;.assignment,array_class = class_linker-&gt;FindArrayClass(soa.Self(), &amp;element_class))<SUB>2173</SUB>> ]
-"11704" [label = <(&lt;operator&gt;.greaterThan,mirror::ObjectArray&lt;mirror::Object&gt;* result)<SUB>2180</SUB>> ]
-"11714" [label = <(&lt;operator&gt;.greaterThan,mirror::ObjectArray&lt;mirror::Object&gt;::Alloc(soa.Self(), array_class, length))<SUB>2181</SUB>> ]
-"11733" [label = <(&lt;operator&gt;.logicalAnd,result != nullptr &amp;&amp; initial_element != nullptr)<SUB>2182</SUB>> ]
-"11844" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobjectArray&gt;(result))<SUB>2199</SUB>> ]
-"11585" [label = <(&lt;operator&gt;.lessThan,length &lt; 0)<SUB>2155</SUB>> ]
-"11589" [label = <(JniAbortF,JavaVmExtFromEnv(env)-&gt;JniAbortF(&quot;NewObjectArray&quot;, &quot;negative array length: %d&quot;, length))<SUB>2156</SUB>> ]
-"11597" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2157</SUB>> ]
-"11623" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2163</SUB>> ]
-"11629" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; element_class)<SUB>2165</SUB>> ]
-"11636" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(element_jclass).Ptr())<SUB>2165</SUB>> ]
-"11649" [label = <(UNLIKELY,UNLIKELY(element_class-&gt;IsPrimitive()))<SUB>2166</SUB>> ]
-"11676" [label = <(GetClassLinker,Runtime::Current()-&gt;GetClassLinker())<SUB>2172</SUB>> ]
-"11685" [label = <(FindArrayClass,class_linker-&gt;FindArrayClass(soa.Self(), &amp;element_class))<SUB>2173</SUB>> ]
-"11696" [label = <(UNLIKELY,UNLIKELY(array_class == nullptr))<SUB>2174</SUB>> ]
-"11705" [label = <(&lt;operator&gt;.lessThan,mirror::ObjectArray&lt;mirror::Object)<SUB>2180</SUB>> ]
-"11712" [label = <(&lt;operator&gt;.indirection,* result)<SUB>2180</SUB>> ]
-"11715" [label = <(&lt;operator&gt;.lessThan,mirror::ObjectArray&lt;mirror::Object)<SUB>2181</SUB>> ]
-"11722" [label = <(::Alloc,::Alloc(soa.Self(), array_class, length))<SUB>2181</SUB>> ]
-"11734" [label = <(&lt;operator&gt;.notEquals,result != nullptr)<SUB>2182</SUB>> ]
-"11737" [label = <(&lt;operator&gt;.notEquals,initial_element != nullptr)<SUB>2182</SUB>> ]
-"11741" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; initial_object = soa.Decode&lt;mirror::Object&gt;(initial_element))<SUB>2183</SUB>> ]
-"11845" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobjectArray)<SUB>2199</SUB>> ]
-"11590" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>2156</SUB>> ]
-"11603" [label = <(UNLIKELY,UNLIKELY((element_jclass) == nullptr))<SUB>2159</SUB>> ]
-"11625" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>2163</SUB>> ]
-"11630" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>2165</SUB>> ]
-"11637" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>2165</SUB>> ]
-"11644" [label = <(Ptr,(element_jclass).Ptr())<SUB>2165</SUB>> ]
-"11650" [label = <(IsPrimitive,element_class-&gt;IsPrimitive())<SUB>2166</SUB>> ]
-"11655" [label = <(JniAbortF,soa.Vm()-&gt;JniAbortF(&quot;NewObjectArray&quot;,\012 &quot;not an object type: %s&quot;,\012                            element_class-&gt;PrettyDescriptor().c_str()))<SUB>2167</SUB>> ]
-"11671" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2170</SUB>> ]
-"11677" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetClassLinker)<SUB>2172</SUB>> ]
-"11686" [label = <(&lt;operator&gt;.indirectFieldAccess,class_linker-&gt;FindArrayClass)<SUB>2173</SUB>> ]
-"11689" [label = <(Self,soa.Self())<SUB>2173</SUB>> ]
-"11693" [label = <(&lt;operator&gt;.addressOf,&amp;element_class)<SUB>2173</SUB>> ]
-"11697" [label = <(&lt;operator&gt;.equals,array_class == nullptr)<SUB>2174</SUB>> ]
-"11701" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2175</SUB>> ]
-"11706" [label = <(&lt;operator&gt;.fieldAccess,mirror::ObjectArray)<SUB>2180</SUB>> ]
-"11709" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2180</SUB>> ]
-"11716" [label = <(&lt;operator&gt;.fieldAccess,mirror::ObjectArray)<SUB>2181</SUB>> ]
-"11719" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2181</SUB>> ]
-"11723" [label = <(&lt;operator&gt;.fieldAccess,::Alloc)<SUB>2181</SUB>> ]
-"11726" [label = <(Self,soa.Self())<SUB>2181</SUB>> ]
-"11742" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; initial_object)<SUB>2183</SUB>> ]
-"11749" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(initial_element))<SUB>2183</SUB>> ]
-"11759" [label = <(&lt;operator&gt;.notEquals,initial_object != nullptr)<SUB>2184</SUB>> ]
-"11846" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>2199</SUB>> ]
-"11591" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2156</SUB>> ]
-"11593" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2156</SUB>> ]
-"11604" [label = <(&lt;operator&gt;.equals,(element_jclass) == nullptr)<SUB>2159</SUB>> ]
-"11608" [label = <(CHECK_NON_NULL_ARGUMENT(element_jclass),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;element_jclass == null&quot;))<SUB>2159</SUB>> ]
-"11615" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(element_jclass),CHECK_NON_NULL_ARGUMENT(element_jclass))<SUB>2159</SUB>> ]
-"11632" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2165</SUB>> ]
-"11638" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2165</SUB>> ]
-"11641" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2165</SUB>> ]
-"11645" [label = <(&lt;operator&gt;.fieldAccess,(element_jclass).Ptr)<SUB>2165</SUB>> ]
-"11651" [label = <(&lt;operator&gt;.indirectFieldAccess,element_class-&gt;IsPrimitive)<SUB>2166</SUB>> ]
-"11656" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Vm()-&gt;JniAbortF)<SUB>2167</SUB>> ]
-"11664" [label = <(c_str,element_class-&gt;PrettyDescriptor().c_str())<SUB>2169</SUB>> ]
-"11678" [label = <(Runtime::Current,Runtime::Current())<SUB>2172</SUB>> ]
-"11682" [label = <(FIELD_IDENTIFIER,GetClassLinker,GetClassLinker)<SUB>2172</SUB>> ]
-"11688" [label = <(FIELD_IDENTIFIER,FindArrayClass,FindArrayClass)<SUB>2173</SUB>> ]
-"11690" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>2173</SUB>> ]
-"11708" [label = <(FIELD_IDENTIFIER,ObjectArray,ObjectArray)<SUB>2180</SUB>> ]
-"11711" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2180</SUB>> ]
-"11718" [label = <(FIELD_IDENTIFIER,ObjectArray,ObjectArray)<SUB>2181</SUB>> ]
-"11721" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2181</SUB>> ]
-"11725" [label = <(FIELD_IDENTIFIER,Alloc,Alloc)<SUB>2181</SUB>> ]
-"11727" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>2181</SUB>> ]
-"11743" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>2183</SUB>> ]
-"11750" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>2183</SUB>> ]
-"11764" [label = <(&lt;operator&gt;.assignment,* element_class = result-&gt;GetClass()-&gt;GetComponentType())<SUB>2185</SUB>> ]
-"11848" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>2199</SUB>> ]
-"11609" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2159</SUB>> ]
-"11634" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>2165</SUB>> ]
-"11640" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2165</SUB>> ]
-"11643" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>2165</SUB>> ]
-"11647" [label = <(FIELD_IDENTIFIER,Ptr,Ptr)<SUB>2165</SUB>> ]
-"11653" [label = <(FIELD_IDENTIFIER,IsPrimitive,IsPrimitive)<SUB>2166</SUB>> ]
-"11657" [label = <(Vm,soa.Vm())<SUB>2167</SUB>> ]
-"11661" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2167</SUB>> ]
-"11665" [label = <(&lt;operator&gt;.fieldAccess,element_class-&gt;PrettyDescriptor().c_str)<SUB>2169</SUB>> ]
-"11679" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>2172</SUB>> ]
-"11692" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>2173</SUB>> ]
-"11729" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>2181</SUB>> ]
-"11745" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2183</SUB>> ]
-"11751" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2183</SUB>> ]
-"11754" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2183</SUB>> ]
-"11766" [label = <(GetComponentType,result-&gt;GetClass()-&gt;GetComponentType())<SUB>2185</SUB>> ]
-"11774" [label = <(UNLIKELY,UNLIKELY(!element_class-&gt;IsAssignableFrom(initial_object-&gt;GetClass())))<SUB>2186</SUB>> ]
-"11610" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2159</SUB>> ]
-"11612" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2159</SUB>> ]
-"11658" [label = <(&lt;operator&gt;.fieldAccess,soa.Vm)<SUB>2167</SUB>> ]
-"11666" [label = <(PrettyDescriptor,element_class-&gt;PrettyDescriptor())<SUB>2169</SUB>> ]
-"11670" [label = <(FIELD_IDENTIFIER,c_str,c_str)<SUB>2169</SUB>> ]
-"11681" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>2172</SUB>> ]
-"11747" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2183</SUB>> ]
-"11753" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2183</SUB>> ]
-"11756" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2183</SUB>> ]
-"11767" [label = <(&lt;operator&gt;.indirectFieldAccess,result-&gt;GetClass()-&gt;GetComponentType)<SUB>2185</SUB>> ]
-"11775" [label = <(&lt;operator&gt;.logicalNot,!element_class-&gt;IsAssignableFrom(initial_object-&gt;GetClass()))<SUB>2186</SUB>> ]
-"11785" [label = <(JniAbortF,soa.Vm()-&gt;JniAbortF(&quot;NewObjectArray&quot;, &quot;cannot assign object of type '%s' to array with &quot;\012 &quot;element type of '%s'&quot;,\012                              mirror::Class::PrettyDescriptor(initial_object-&gt;GetClass()).c_str(),\012                              element_class-&gt;PrettyDescriptor().c_str()))<SUB>2187</SUB>> ]
-"11814" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2191</SUB>> ]
-"11660" [label = <(FIELD_IDENTIFIER,Vm,Vm)<SUB>2167</SUB>> ]
-"11667" [label = <(&lt;operator&gt;.indirectFieldAccess,element_class-&gt;PrettyDescriptor)<SUB>2169</SUB>> ]
-"11768" [label = <(GetClass,result-&gt;GetClass())<SUB>2185</SUB>> ]
-"11772" [label = <(FIELD_IDENTIFIER,GetComponentType,GetComponentType)<SUB>2185</SUB>> ]
-"11776" [label = <(IsAssignableFrom,element_class-&gt;IsAssignableFrom(initial_object-&gt;GetClass()))<SUB>2186</SUB>> ]
-"11786" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Vm()-&gt;JniAbortF)<SUB>2187</SUB>> ]
-"11794" [label = <(c_str,mirror::Class::PrettyDescriptor(initial_object-&gt;GetClass()).c_str())<SUB>2189</SUB>> ]
-"11807" [label = <(c_str,element_class-&gt;PrettyDescriptor().c_str())<SUB>2190</SUB>> ]
-"11669" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>2169</SUB>> ]
-"11769" [label = <(&lt;operator&gt;.indirectFieldAccess,result-&gt;GetClass)<SUB>2185</SUB>> ]
-"11777" [label = <(&lt;operator&gt;.indirectFieldAccess,element_class-&gt;IsAssignableFrom)<SUB>2186</SUB>> ]
-"11780" [label = <(GetClass,initial_object-&gt;GetClass())<SUB>2186</SUB>> ]
-"11787" [label = <(Vm,soa.Vm())<SUB>2187</SUB>> ]
-"11791" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2187</SUB>> ]
-"11795" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class::PrettyDescriptor(initial_object-&gt;GetClass()).c_str)<SUB>2189</SUB>> ]
-"11808" [label = <(&lt;operator&gt;.fieldAccess,element_class-&gt;PrettyDescriptor().c_str)<SUB>2190</SUB>> ]
-"11824" [label = <(&lt;operator&gt;.lessThan,i &lt; length)<SUB>2193</SUB>> ]
-"11827" [label = <(&lt;operator&gt;.preIncrement,++i)<SUB>2193</SUB>> ]
-"11771" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>2185</SUB>> ]
-"11779" [label = <(FIELD_IDENTIFIER,IsAssignableFrom,IsAssignableFrom)<SUB>2186</SUB>> ]
-"11781" [label = <(&lt;operator&gt;.indirectFieldAccess,initial_object-&gt;GetClass)<SUB>2186</SUB>> ]
-"11788" [label = <(&lt;operator&gt;.fieldAccess,soa.Vm)<SUB>2187</SUB>> ]
-"11796" [label = <(mirror::Class::PrettyDescriptor,mirror::Class::PrettyDescriptor(initial_object-&gt;GetClass()))<SUB>2189</SUB>> ]
-"11806" [label = <(FIELD_IDENTIFIER,c_str,c_str)<SUB>2189</SUB>> ]
-"11809" [label = <(PrettyDescriptor,element_class-&gt;PrettyDescriptor())<SUB>2190</SUB>> ]
-"11813" [label = <(FIELD_IDENTIFIER,c_str,c_str)<SUB>2190</SUB>> ]
-"11821" [label = <(&lt;operator&gt;.assignment,i = 0)<SUB>2193</SUB>> ]
-"11830" [label = <(&lt;operator&gt;.greaterThan,result-&gt;SetWithoutChecks&lt;false&gt;(i, initial_object.Ptr()))<SUB>2194</SUB>> ]
-"11783" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>2186</SUB>> ]
-"11790" [label = <(FIELD_IDENTIFIER,Vm,Vm)<SUB>2187</SUB>> ]
-"11797" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class::PrettyDescriptor)<SUB>2189</SUB>> ]
-"11802" [label = <(GetClass,initial_object-&gt;GetClass())<SUB>2189</SUB>> ]
-"11810" [label = <(&lt;operator&gt;.indirectFieldAccess,element_class-&gt;PrettyDescriptor)<SUB>2190</SUB>> ]
-"11831" [label = <(&lt;operator&gt;.lessThan,result-&gt;SetWithoutChecks&lt;false)<SUB>2194</SUB>> ]
-"11836" [label = <(&lt;operator&gt;.bracketedPrimary,(i, initial_object.Ptr()))<SUB>2194</SUB>> ]
-"11798" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2189</SUB>> ]
-"11801" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>2189</SUB>> ]
-"11803" [label = <(&lt;operator&gt;.indirectFieldAccess,initial_object-&gt;GetClass)<SUB>2189</SUB>> ]
-"11812" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>2190</SUB>> ]
-"11832" [label = <(&lt;operator&gt;.indirectFieldAccess,result-&gt;SetWithoutChecks)<SUB>2194</SUB>> ]
-"11837" [label = <(&lt;operator&gt;.expressionList,i, initial_object.Ptr())<SUB>2194</SUB>> ]
-"11805" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>2189</SUB>> ]
-"11834" [label = <(FIELD_IDENTIFIER,SetWithoutChecks,SetWithoutChecks)<SUB>2194</SUB>> ]
-"11839" [label = <(Ptr,initial_object.Ptr())<SUB>2194</SUB>> ]
-"11840" [label = <(&lt;operator&gt;.fieldAccess,initial_object.Ptr)<SUB>2194</SUB>> ]
-"11842" [label = <(FIELD_IDENTIFIER,Ptr,Ptr)<SUB>2194</SUB>> ]
-"11577" [label = <(METHOD,NewObjectArray)<SUB>2153</SUB>> ]
-"11851" [label = <(METHOD_RETURN,jobjectArray)<SUB>2153</SUB>> ]
-  "11599" -> "11604" 
-  "11599" -> "11618" 
-  "11618" -> "11625" 
-  "11620" -> "11634" 
-  "11703" -> "11734" 
-  "11843" -> "11851" 
-  "11584" -> "11591" 
-  "11584" -> "11599" 
-  "11621" -> "11620" 
-  "11628" -> "11653" 
-  "11674" -> "11688" 
-  "11683" -> "11697" 
-  "11704" -> "11718" 
-  "11714" -> "11703" 
-  "11733" -> "11747" 
-  "11733" -> "11848" 
-  "11844" -> "11843" 
-  "11585" -> "11584" 
-  "11589" -> "11597" 
-  "11597" -> "11851" 
-  "11623" -> "11621" 
-  "11629" -> "11640" 
-  "11636" -> "11628" 
-  "11649" -> "11660" 
-  "11649" -> "11681" 
-  "11676" -> "11674" 
-  "11685" -> "11683" 
-  "11696" -> "11701" 
-  "11696" -> "11708" 
-  "11705" -> "11712" 
-  "11712" -> "11704" 
-  "11715" -> "11725" 
-  "11722" -> "11714" 
-  "11734" -> "11733" 
-  "11734" -> "11737" 
-  "11737" -> "11733" 
-  "11741" -> "11759" 
-  "11845" -> "11844" 
-  "11590" -> "11589" 
-  "11603" -> "11610" 
-  "11603" -> "11618" 
-  "11625" -> "11623" 
-  "11630" -> "11629" 
-  "11637" -> "11647" 
-  "11644" -> "11636" 
-  "11650" -> "11649" 
-  "11655" -> "11671" 
-  "11671" -> "11851" 
-  "11677" -> "11676" 
-  "11686" -> "11692" 
-  "11689" -> "11693" 
-  "11693" -> "11685" 
-  "11697" -> "11696" 
-  "11701" -> "11851" 
-  "11706" -> "11711" 
-  "11709" -> "11705" 
-  "11716" -> "11721" 
-  "11719" -> "11715" 
-  "11723" -> "11729" 
-  "11726" -> "11722" 
-  "11742" -> "11753" 
-  "11749" -> "11741" 
-  "11759" -> "11771" 
-  "11759" -> "11848" 
-  "11846" -> "11845" 
-  "11591" -> "11593" 
-  "11593" -> "11590" 
-  "11604" -> "11603" 
-  "11608" -> "11615" 
-  "11615" -> "11851" 
-  "11632" -> "11630" 
-  "11638" -> "11643" 
-  "11641" -> "11637" 
-  "11645" -> "11644" 
-  "11651" -> "11650" 
-  "11656" -> "11669" 
-  "11664" -> "11655" 
-  "11678" -> "11682" 
-  "11682" -> "11677" 
-  "11688" -> "11686" 
-  "11690" -> "11689" 
-  "11708" -> "11706" 
-  "11711" -> "11709" 
-  "11718" -> "11716" 
-  "11721" -> "11719" 
-  "11725" -> "11723" 
-  "11727" -> "11726" 
-  "11743" -> "11742" 
-  "11750" -> "11749" 
-  "11764" -> "11779" 
-  "11848" -> "11846" 
-  "11609" -> "11608" 
-  "11634" -> "11632" 
-  "11640" -> "11638" 
-  "11643" -> "11641" 
-  "11647" -> "11645" 
-  "11653" -> "11651" 
-  "11657" -> "11661" 
-  "11661" -> "11656" 
-  "11665" -> "11664" 
-  "11679" -> "11678" 
-  "11692" -> "11690" 
-  "11729" -> "11727" 
-  "11745" -> "11743" 
-  "11751" -> "11756" 
-  "11754" -> "11750" 
-  "11766" -> "11764" 
-  "11774" -> "11790" 
-  "11774" -> "11821" 
-  "11610" -> "11612" 
-  "11612" -> "11609" 
-  "11658" -> "11657" 
-  "11666" -> "11670" 
-  "11670" -> "11665" 
-  "11681" -> "11679" 
-  "11747" -> "11745" 
-  "11753" -> "11751" 
-  "11756" -> "11754" 
-  "11767" -> "11766" 
-  "11775" -> "11774" 
-  "11785" -> "11814" 
-  "11814" -> "11851" 
-  "11660" -> "11658" 
-  "11667" -> "11666" 
-  "11768" -> "11772" 
-  "11772" -> "11767" 
-  "11776" -> "11775" 
-  "11786" -> "11798" 
-  "11794" -> "11812" 
-  "11807" -> "11785" 
-  "11669" -> "11667" 
-  "11769" -> "11768" 
-  "11777" -> "11783" 
-  "11780" -> "11776" 
-  "11787" -> "11791" 
-  "11791" -> "11786" 
-  "11795" -> "11794" 
-  "11808" -> "11807" 
-  "11824" -> "11834" 
-  "11824" -> "11848" 
-  "11827" -> "11824" 
-  "11771" -> "11769" 
-  "11779" -> "11777" 
-  "11781" -> "11780" 
-  "11788" -> "11787" 
-  "11796" -> "11806" 
-  "11806" -> "11795" 
-  "11809" -> "11813" 
-  "11813" -> "11808" 
-  "11821" -> "11824" 
-  "11830" -> "11827" 
-  "11783" -> "11781" 
-  "11790" -> "11788" 
-  "11797" -> "11805" 
-  "11802" -> "11796" 
-  "11810" -> "11809" 
-  "11831" -> "11842" 
-  "11836" -> "11830" 
-  "11798" -> "11801" 
-  "11801" -> "11797" 
-  "11803" -> "11802" 
-  "11812" -> "11810" 
-  "11832" -> "11831" 
-  "11837" -> "11836" 
-  "11805" -> "11803" 
-  "11834" -> "11832" 
-  "11839" -> "11837" 
-  "11840" -> "11839" 
-  "11842" -> "11840" 
-  "11577" -> "11585" 
+digraph "GetBooleanArrayElements" {  
+"11753" [label = <(RETURN,return GetPrimitiveArray&lt;jbooleanArray, jboolean, mirror::BooleanArray&gt;(env, array, is_copy);,return GetPrimitiveArray&lt;jbooleanArray, jboolean, mirror::BooleanArray&gt;(env, array, is_copy);)<SUB>2108</SUB>> ]
+"11754" [label = <(GetPrimitiveArray&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;,GetPrimitiveArray&lt;jbooleanArray, jboolean, mirror::BooleanArray&gt;(env, array, is_copy))<SUB>2108</SUB>> ]
+"11748" [label = <(METHOD,GetBooleanArrayElements)<SUB>2107</SUB>> ]
+"11758" [label = <(METHOD_RETURN,jboolean)<SUB>2107</SUB>> ]
+  "11753" -> "11758" 
+  "11754" -> "11753" 
+  "11748" -> "11754" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/21-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/21-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/21-cfg.dot	2023-06-07 19:33:45.337394696 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/21-cfg.dot	2023-06-07 19:33:51.917393996 +0330
@@ -1,5 +1,7 @@
-digraph "ThrowSIOOBE" {  
-"535" [label = <(METHOD,ThrowSIOOBE)<SUB>437</SUB>> ]
-"541" [label = <(METHOD_RETURN,void)<SUB>437</SUB>> ]
-  "535" -> "541" 
+digraph "GetVersion" {  
+"390" [label = <(RETURN,return JNI_VERSION_1_6;,return JNI_VERSION_1_6;)<SUB>451</SUB>> ]
+"387" [label = <(METHOD,GetVersion)<SUB>450</SUB>> ]
+"392" [label = <(METHOD_RETURN,jint)<SUB>450</SUB>> ]
+  "390" -> "392" 
+  "387" -> "390" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/210-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/210-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/210-cfg.dot	2023-06-07 19:33:45.487394679 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/210-cfg.dot	2023-06-07 19:33:52.067393978 +0330
@@ -1,9 +1,9 @@
-digraph "NewShortArray" {  
-"11857" [label = <(RETURN,return NewPrimitiveArray&lt;jshortArray, mirror::ShortArray&gt;(env, length);,return NewPrimitiveArray&lt;jshortArray, mirror::ShortArray&gt;(env, length);)<SUB>2203</SUB>> ]
-"11858" [label = <(NewPrimitiveArray&lt;jshortArray,mirror::ShortArray&gt;,NewPrimitiveArray&lt;jshortArray, mirror::ShortArray&gt;(env, length))<SUB>2203</SUB>> ]
-"11853" [label = <(METHOD,NewShortArray)<SUB>2202</SUB>> ]
-"11861" [label = <(METHOD_RETURN,jshortArray)<SUB>2202</SUB>> ]
-  "11857" -> "11861" 
-  "11858" -> "11857" 
-  "11853" -> "11858" 
+digraph "GetByteArrayElements" {  
+"11765" [label = <(RETURN,return GetPrimitiveArray&lt;jbyteArray, jbyte, mirror::ByteArray&gt;(env, array, is_copy);,return GetPrimitiveArray&lt;jbyteArray, jbyte, mirror::ByteArray&gt;(env, array, is_copy);)<SUB>2112</SUB>> ]
+"11766" [label = <(GetPrimitiveArray&lt;jbyteArray,jbyte,mirror::ByteArray&gt;,GetPrimitiveArray&lt;jbyteArray, jbyte, mirror::ByteArray&gt;(env, array, is_copy))<SUB>2112</SUB>> ]
+"11760" [label = <(METHOD,GetByteArrayElements)<SUB>2111</SUB>> ]
+"11770" [label = <(METHOD_RETURN,jbyte)<SUB>2111</SUB>> ]
+  "11765" -> "11770" 
+  "11766" -> "11765" 
+  "11760" -> "11766" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/211-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/211-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/211-cfg.dot	2023-06-07 19:33:45.497394681 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/211-cfg.dot	2023-06-07 19:33:52.067393978 +0330
@@ -1,185 +1,9 @@
-digraph "GetPrimitiveArrayCritical" {  
-"11868" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_array))<SUB>2207</SUB>> ]
-"11887" [label = <(soa,soa(env))<SUB>2208</SUB>> ]
-"11889" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Array&gt; array = soa.Decode&lt;mirror::Array&gt;(java_array))<SUB>2209</SUB>> ]
-"11939" [label = <(&lt;operator&gt;.assignment,* heap = Runtime::Current()-&gt;GetHeap())<SUB>2215</SUB>> ]
-"11997" [label = <(RETURN,return array-&gt;GetRawData(array-&gt;GetClass()-&gt;GetComponentSize(), 0);,return array-&gt;GetRawData(array-&gt;GetClass()-&gt;GetComponentSize(), 0);)<SUB>2230</SUB>> ]
-"11890" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Array&gt; array)<SUB>2209</SUB>> ]
-"11897" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Array&gt;(java_array))<SUB>2209</SUB>> ]
-"11907" [label = <(UNLIKELY,UNLIKELY(!array-&gt;GetClass()-&gt;IsPrimitiveArray()))<SUB>2210</SUB>> ]
-"11941" [label = <(GetHeap,Runtime::Current()-&gt;GetHeap())<SUB>2215</SUB>> ]
-"11949" [label = <(IsMovableObject,heap-&gt;IsMovableObject(array))<SUB>2216</SUB>> ]
-"11989" [label = <(&lt;operator&gt;.notEquals,is_copy != nullptr)<SUB>2227</SUB>> ]
-"11998" [label = <(GetRawData,array-&gt;GetRawData(array-&gt;GetClass()-&gt;GetComponentSize(), 0))<SUB>2230</SUB>> ]
-"11891" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Array)<SUB>2209</SUB>> ]
-"11898" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Array)<SUB>2209</SUB>> ]
-"11908" [label = <(&lt;operator&gt;.logicalNot,!array-&gt;GetClass()-&gt;IsPrimitiveArray())<SUB>2210</SUB>> ]
-"11917" [label = <(JniAbortF,soa.Vm()-&gt;JniAbortF(&quot;GetPrimitiveArrayCritical&quot;, &quot;expected primitive array, given %s&quot;,\012                          array-&gt;GetClass()-&gt;PrettyDescriptor().c_str()))<SUB>2211</SUB>> ]
-"11936" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2213</SUB>> ]
-"11942" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetHeap)<SUB>2215</SUB>> ]
-"11950" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;IsMovableObject)<SUB>2216</SUB>> ]
-"11977" [label = <(&lt;operator&gt;.assignment,array = soa.Decode&lt;mirror::Array&gt;(java_array))<SUB>2225</SUB>> ]
-"11993" [label = <(&lt;operator&gt;.assignment,*is_copy = JNI_FALSE)<SUB>2228</SUB>> ]
-"11999" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetRawData)<SUB>2230</SUB>> ]
-"12002" [label = <(GetComponentSize,array-&gt;GetClass()-&gt;GetComponentSize())<SUB>2230</SUB>> ]
-"11872" [label = <(UNLIKELY,UNLIKELY((java_array) == nullptr))<SUB>2207</SUB>> ]
-"11893" [label = <(&lt;operator&gt;.fieldAccess,mirror::Array)<SUB>2209</SUB>> ]
-"11899" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2209</SUB>> ]
-"11902" [label = <(&lt;operator&gt;.fieldAccess,mirror::Array)<SUB>2209</SUB>> ]
-"11909" [label = <(IsPrimitiveArray,array-&gt;GetClass()-&gt;IsPrimitiveArray())<SUB>2210</SUB>> ]
-"11918" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Vm()-&gt;JniAbortF)<SUB>2211</SUB>> ]
-"11926" [label = <(c_str,array-&gt;GetClass()-&gt;PrettyDescriptor().c_str())<SUB>2212</SUB>> ]
-"11943" [label = <(Runtime::Current,Runtime::Current())<SUB>2215</SUB>> ]
-"11947" [label = <(FIELD_IDENTIFIER,GetHeap,GetHeap)<SUB>2215</SUB>> ]
-"11952" [label = <(FIELD_IDENTIFIER,IsMovableObject,IsMovableObject)<SUB>2216</SUB>> ]
-"11956" [label = <(&lt;operator&gt;.logicalNot,!kUseReadBarrier)<SUB>2217</SUB>> ]
-"11979" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Array&gt;(java_array))<SUB>2225</SUB>> ]
-"11994" [label = <(&lt;operator&gt;.indirection,*is_copy)<SUB>2228</SUB>> ]
-"12001" [label = <(FIELD_IDENTIFIER,GetRawData,GetRawData)<SUB>2230</SUB>> ]
-"12003" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass()-&gt;GetComponentSize)<SUB>2230</SUB>> ]
-"11873" [label = <(&lt;operator&gt;.equals,(java_array) == nullptr)<SUB>2207</SUB>> ]
-"11877" [label = <(CHECK_NON_NULL_ARGUMENT(java_array),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_array == null&quot;))<SUB>2207</SUB>> ]
-"11884" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_array),CHECK_NON_NULL_ARGUMENT(java_array))<SUB>2207</SUB>> ]
-"11895" [label = <(FIELD_IDENTIFIER,Array,Array)<SUB>2209</SUB>> ]
-"11901" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2209</SUB>> ]
-"11904" [label = <(FIELD_IDENTIFIER,Array,Array)<SUB>2209</SUB>> ]
-"11910" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass()-&gt;IsPrimitiveArray)<SUB>2210</SUB>> ]
-"11919" [label = <(Vm,soa.Vm())<SUB>2211</SUB>> ]
-"11923" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2211</SUB>> ]
-"11927" [label = <(&lt;operator&gt;.fieldAccess,array-&gt;GetClass()-&gt;PrettyDescriptor().c_str)<SUB>2212</SUB>> ]
-"11944" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>2215</SUB>> ]
-"11959" [label = <(IncrementDisableMovingGC,heap-&gt;IncrementDisableMovingGC(soa.Self()))<SUB>2218</SUB>> ]
-"11980" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Array)<SUB>2225</SUB>> ]
-"12004" [label = <(GetClass,array-&gt;GetClass())<SUB>2230</SUB>> ]
-"12008" [label = <(FIELD_IDENTIFIER,GetComponentSize,GetComponentSize)<SUB>2230</SUB>> ]
-"11878" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2207</SUB>> ]
-"11911" [label = <(GetClass,array-&gt;GetClass())<SUB>2210</SUB>> ]
-"11915" [label = <(FIELD_IDENTIFIER,IsPrimitiveArray,IsPrimitiveArray)<SUB>2210</SUB>> ]
-"11920" [label = <(&lt;operator&gt;.fieldAccess,soa.Vm)<SUB>2211</SUB>> ]
-"11928" [label = <(PrettyDescriptor,array-&gt;GetClass()-&gt;PrettyDescriptor())<SUB>2212</SUB>> ]
-"11935" [label = <(FIELD_IDENTIFIER,c_str,c_str)<SUB>2212</SUB>> ]
-"11946" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>2215</SUB>> ]
-"11960" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;IncrementDisableMovingGC)<SUB>2218</SUB>> ]
-"11963" [label = <(Self,soa.Self())<SUB>2218</SUB>> ]
-"11969" [label = <(IncrementDisableThreadFlip,heap-&gt;IncrementDisableThreadFlip(soa.Self()))<SUB>2222</SUB>> ]
-"11981" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2225</SUB>> ]
-"11984" [label = <(&lt;operator&gt;.fieldAccess,mirror::Array)<SUB>2225</SUB>> ]
-"12005" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass)<SUB>2230</SUB>> ]
-"11879" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2207</SUB>> ]
-"11881" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2207</SUB>> ]
-"11912" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass)<SUB>2210</SUB>> ]
-"11922" [label = <(FIELD_IDENTIFIER,Vm,Vm)<SUB>2211</SUB>> ]
-"11929" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass()-&gt;PrettyDescriptor)<SUB>2212</SUB>> ]
-"11962" [label = <(FIELD_IDENTIFIER,IncrementDisableMovingGC,IncrementDisableMovingGC)<SUB>2218</SUB>> ]
-"11964" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>2218</SUB>> ]
-"11970" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;IncrementDisableThreadFlip)<SUB>2222</SUB>> ]
-"11973" [label = <(Self,soa.Self())<SUB>2222</SUB>> ]
-"11983" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2225</SUB>> ]
-"11986" [label = <(FIELD_IDENTIFIER,Array,Array)<SUB>2225</SUB>> ]
-"12007" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>2230</SUB>> ]
-"11914" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>2210</SUB>> ]
-"11930" [label = <(GetClass,array-&gt;GetClass())<SUB>2212</SUB>> ]
-"11934" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>2212</SUB>> ]
-"11966" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>2218</SUB>> ]
-"11972" [label = <(FIELD_IDENTIFIER,IncrementDisableThreadFlip,IncrementDisableThreadFlip)<SUB>2222</SUB>> ]
-"11974" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>2222</SUB>> ]
-"11931" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass)<SUB>2212</SUB>> ]
-"11976" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>2222</SUB>> ]
-"11933" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>2212</SUB>> ]
-"11863" [label = <(METHOD,GetPrimitiveArrayCritical)<SUB>2206</SUB>> ]
-"12010" [label = <(METHOD_RETURN,void*)<SUB>2206</SUB>> ]
-  "11868" -> "11873" 
-  "11868" -> "11887" 
-  "11887" -> "11895" 
-  "11889" -> "11914" 
-  "11939" -> "11952" 
-  "11997" -> "12010" 
-  "11890" -> "11901" 
-  "11897" -> "11889" 
-  "11907" -> "11922" 
-  "11907" -> "11946" 
-  "11941" -> "11939" 
-  "11949" -> "11956" 
-  "11949" -> "11989" 
-  "11989" -> "11994" 
-  "11989" -> "12001" 
-  "11998" -> "11997" 
-  "11891" -> "11890" 
-  "11898" -> "11897" 
-  "11908" -> "11907" 
-  "11917" -> "11936" 
-  "11936" -> "12010" 
-  "11942" -> "11941" 
-  "11950" -> "11949" 
-  "11977" -> "11989" 
-  "11993" -> "12001" 
-  "11999" -> "12007" 
-  "12002" -> "11998" 
-  "11872" -> "11879" 
-  "11872" -> "11887" 
-  "11893" -> "11891" 
-  "11899" -> "11904" 
-  "11902" -> "11898" 
-  "11909" -> "11908" 
-  "11918" -> "11933" 
-  "11926" -> "11917" 
-  "11943" -> "11947" 
-  "11947" -> "11942" 
-  "11952" -> "11950" 
-  "11956" -> "11962" 
-  "11956" -> "11972" 
-  "11979" -> "11977" 
-  "11994" -> "11993" 
-  "12001" -> "11999" 
-  "12003" -> "12002" 
-  "11873" -> "11872" 
-  "11877" -> "11884" 
-  "11884" -> "12010" 
-  "11895" -> "11893" 
-  "11901" -> "11899" 
-  "11904" -> "11902" 
-  "11910" -> "11909" 
-  "11919" -> "11923" 
-  "11923" -> "11918" 
-  "11927" -> "11926" 
-  "11944" -> "11943" 
-  "11959" -> "11983" 
-  "11980" -> "11979" 
-  "12004" -> "12008" 
-  "12008" -> "12003" 
-  "11878" -> "11877" 
-  "11911" -> "11915" 
-  "11915" -> "11910" 
-  "11920" -> "11919" 
-  "11928" -> "11935" 
-  "11935" -> "11927" 
-  "11946" -> "11944" 
-  "11960" -> "11966" 
-  "11963" -> "11959" 
-  "11969" -> "11983" 
-  "11981" -> "11986" 
-  "11984" -> "11980" 
-  "12005" -> "12004" 
-  "11879" -> "11881" 
-  "11881" -> "11878" 
-  "11912" -> "11911" 
-  "11922" -> "11920" 
-  "11929" -> "11928" 
-  "11962" -> "11960" 
-  "11964" -> "11963" 
-  "11970" -> "11976" 
-  "11973" -> "11969" 
-  "11983" -> "11981" 
-  "11986" -> "11984" 
-  "12007" -> "12005" 
-  "11914" -> "11912" 
-  "11930" -> "11934" 
-  "11934" -> "11929" 
-  "11966" -> "11964" 
-  "11972" -> "11970" 
-  "11974" -> "11973" 
-  "11931" -> "11930" 
-  "11976" -> "11974" 
-  "11933" -> "11931" 
-  "11863" -> "11868" 
+digraph "GetCharArrayElements" {  
+"11777" [label = <(RETURN,return GetPrimitiveArray&lt;jcharArray, jchar, mirror::CharArray&gt;(env, array, is_copy);,return GetPrimitiveArray&lt;jcharArray, jchar, mirror::CharArray&gt;(env, array, is_copy);)<SUB>2116</SUB>> ]
+"11778" [label = <(GetPrimitiveArray&lt;jcharArray,jchar,mirror::CharArray&gt;,GetPrimitiveArray&lt;jcharArray, jchar, mirror::CharArray&gt;(env, array, is_copy))<SUB>2116</SUB>> ]
+"11772" [label = <(METHOD,GetCharArrayElements)<SUB>2115</SUB>> ]
+"11782" [label = <(METHOD_RETURN,jchar)<SUB>2115</SUB>> ]
+  "11777" -> "11782" 
+  "11778" -> "11777" 
+  "11772" -> "11778" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/212-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/212-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/212-cfg.dot	2023-06-07 19:33:45.497394681 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/212-cfg.dot	2023-06-07 19:33:52.077393979 +0330
@@ -1,118 +1,9 @@
-digraph "ReleasePrimitiveArrayCritical" {  
-"12018" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>2235</SUB>> ]
-"12036" [label = <(soa,soa(env))<SUB>2236</SUB>> ]
-"12038" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Array&gt; array = soa.Decode&lt;mirror::Array&gt;(java_array))<SUB>2237</SUB>> ]
-"12087" [label = <(&lt;operator&gt;.assignment,component_size = array-&gt;GetClass()-&gt;GetComponentSize())<SUB>2243</SUB>> ]
-"12096" [label = <(ReleasePrimitiveArray,ReleasePrimitiveArray(soa, array.Ptr(), component_size, elements, mode))<SUB>2244</SUB>> ]
-"12039" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Array&gt; array)<SUB>2237</SUB>> ]
-"12046" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Array&gt;(java_array))<SUB>2237</SUB>> ]
-"12056" [label = <(UNLIKELY,UNLIKELY(!array-&gt;GetClass()-&gt;IsPrimitiveArray()))<SUB>2238</SUB>> ]
-"12089" [label = <(GetComponentSize,array-&gt;GetClass()-&gt;GetComponentSize())<SUB>2243</SUB>> ]
-"12098" [label = <(Ptr,array.Ptr())<SUB>2244</SUB>> ]
-"12040" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Array)<SUB>2237</SUB>> ]
-"12047" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Array)<SUB>2237</SUB>> ]
-"12057" [label = <(&lt;operator&gt;.logicalNot,!array-&gt;GetClass()-&gt;IsPrimitiveArray())<SUB>2238</SUB>> ]
-"12066" [label = <(JniAbortF,soa.Vm()-&gt;JniAbortF(&quot;ReleasePrimitiveArrayCritical&quot;, &quot;expected primitive array, given %s&quot;,\012                          array-&gt;GetClass()-&gt;PrettyDescriptor().c_str()))<SUB>2239</SUB>> ]
-"12085" [label = <(RETURN,return;,return;)<SUB>2241</SUB>> ]
-"12090" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass()-&gt;GetComponentSize)<SUB>2243</SUB>> ]
-"12099" [label = <(&lt;operator&gt;.fieldAccess,array.Ptr)<SUB>2244</SUB>> ]
-"12022" [label = <(UNLIKELY,UNLIKELY((java_array) == nullptr))<SUB>2235</SUB>> ]
-"12042" [label = <(&lt;operator&gt;.fieldAccess,mirror::Array)<SUB>2237</SUB>> ]
-"12048" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2237</SUB>> ]
-"12051" [label = <(&lt;operator&gt;.fieldAccess,mirror::Array)<SUB>2237</SUB>> ]
-"12058" [label = <(IsPrimitiveArray,array-&gt;GetClass()-&gt;IsPrimitiveArray())<SUB>2238</SUB>> ]
-"12067" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Vm()-&gt;JniAbortF)<SUB>2239</SUB>> ]
-"12075" [label = <(c_str,array-&gt;GetClass()-&gt;PrettyDescriptor().c_str())<SUB>2240</SUB>> ]
-"12091" [label = <(GetClass,array-&gt;GetClass())<SUB>2243</SUB>> ]
-"12095" [label = <(FIELD_IDENTIFIER,GetComponentSize,GetComponentSize)<SUB>2243</SUB>> ]
-"12101" [label = <(FIELD_IDENTIFIER,Ptr,Ptr)<SUB>2244</SUB>> ]
-"12023" [label = <(&lt;operator&gt;.equals,(java_array) == nullptr)<SUB>2235</SUB>> ]
-"12027" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_array == null&quot;))<SUB>2235</SUB>> ]
-"12034" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>2235</SUB>> ]
-"12044" [label = <(FIELD_IDENTIFIER,Array,Array)<SUB>2237</SUB>> ]
-"12050" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2237</SUB>> ]
-"12053" [label = <(FIELD_IDENTIFIER,Array,Array)<SUB>2237</SUB>> ]
-"12059" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass()-&gt;IsPrimitiveArray)<SUB>2238</SUB>> ]
-"12068" [label = <(Vm,soa.Vm())<SUB>2239</SUB>> ]
-"12072" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2239</SUB>> ]
-"12076" [label = <(&lt;operator&gt;.fieldAccess,array-&gt;GetClass()-&gt;PrettyDescriptor().c_str)<SUB>2240</SUB>> ]
-"12092" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass)<SUB>2243</SUB>> ]
-"12028" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2235</SUB>> ]
-"12060" [label = <(GetClass,array-&gt;GetClass())<SUB>2238</SUB>> ]
-"12064" [label = <(FIELD_IDENTIFIER,IsPrimitiveArray,IsPrimitiveArray)<SUB>2238</SUB>> ]
-"12069" [label = <(&lt;operator&gt;.fieldAccess,soa.Vm)<SUB>2239</SUB>> ]
-"12077" [label = <(PrettyDescriptor,array-&gt;GetClass()-&gt;PrettyDescriptor())<SUB>2240</SUB>> ]
-"12084" [label = <(FIELD_IDENTIFIER,c_str,c_str)<SUB>2240</SUB>> ]
-"12094" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>2243</SUB>> ]
-"12029" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2235</SUB>> ]
-"12031" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2235</SUB>> ]
-"12061" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass)<SUB>2238</SUB>> ]
-"12071" [label = <(FIELD_IDENTIFIER,Vm,Vm)<SUB>2239</SUB>> ]
-"12078" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass()-&gt;PrettyDescriptor)<SUB>2240</SUB>> ]
-"12063" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>2238</SUB>> ]
-"12079" [label = <(GetClass,array-&gt;GetClass())<SUB>2240</SUB>> ]
-"12083" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>2240</SUB>> ]
-"12080" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass)<SUB>2240</SUB>> ]
-"12082" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>2240</SUB>> ]
-"12012" [label = <(METHOD,ReleasePrimitiveArrayCritical)<SUB>2233</SUB>> ]
-"12105" [label = <(METHOD_RETURN,void)<SUB>2233</SUB>> ]
-  "12018" -> "12023" 
-  "12018" -> "12036" 
-  "12036" -> "12044" 
-  "12038" -> "12063" 
-  "12087" -> "12101" 
-  "12096" -> "12105" 
-  "12039" -> "12050" 
-  "12046" -> "12038" 
-  "12056" -> "12071" 
-  "12056" -> "12094" 
-  "12089" -> "12087" 
-  "12098" -> "12096" 
-  "12040" -> "12039" 
-  "12047" -> "12046" 
-  "12057" -> "12056" 
-  "12066" -> "12085" 
-  "12085" -> "12105" 
-  "12090" -> "12089" 
-  "12099" -> "12098" 
-  "12022" -> "12029" 
-  "12022" -> "12036" 
-  "12042" -> "12040" 
-  "12048" -> "12053" 
-  "12051" -> "12047" 
-  "12058" -> "12057" 
-  "12067" -> "12082" 
-  "12075" -> "12066" 
-  "12091" -> "12095" 
-  "12095" -> "12090" 
-  "12101" -> "12099" 
-  "12023" -> "12022" 
-  "12027" -> "12034" 
-  "12034" -> "12105" 
-  "12044" -> "12042" 
-  "12050" -> "12048" 
-  "12053" -> "12051" 
-  "12059" -> "12058" 
-  "12068" -> "12072" 
-  "12072" -> "12067" 
-  "12076" -> "12075" 
-  "12092" -> "12091" 
-  "12028" -> "12027" 
-  "12060" -> "12064" 
-  "12064" -> "12059" 
-  "12069" -> "12068" 
-  "12077" -> "12084" 
-  "12084" -> "12076" 
-  "12094" -> "12092" 
-  "12029" -> "12031" 
-  "12031" -> "12028" 
-  "12061" -> "12060" 
-  "12071" -> "12069" 
-  "12078" -> "12077" 
-  "12063" -> "12061" 
-  "12079" -> "12083" 
-  "12083" -> "12078" 
-  "12080" -> "12079" 
-  "12082" -> "12080" 
-  "12012" -> "12018" 
+digraph "GetDoubleArrayElements" {  
+"11789" [label = <(RETURN,return GetPrimitiveArray&lt;jdoubleArray, jdouble, mirror::DoubleArray&gt;(env, array, is_copy);,return GetPrimitiveArray&lt;jdoubleArray, jdouble, mirror::DoubleArray&gt;(env, array, is_copy);)<SUB>2120</SUB>> ]
+"11790" [label = <(GetPrimitiveArray&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;,GetPrimitiveArray&lt;jdoubleArray, jdouble, mirror::DoubleArray&gt;(env, array, is_copy))<SUB>2120</SUB>> ]
+"11784" [label = <(METHOD,GetDoubleArrayElements)<SUB>2119</SUB>> ]
+"11794" [label = <(METHOD_RETURN,jdouble)<SUB>2119</SUB>> ]
+  "11789" -> "11794" 
+  "11790" -> "11789" 
+  "11784" -> "11790" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/213-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/213-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/213-cfg.dot	2023-06-07 19:33:45.497394681 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/213-cfg.dot	2023-06-07 19:33:52.077393979 +0330
@@ -1,9 +1,9 @@
-digraph "GetBooleanArrayElements" {  
-"12112" [label = <(RETURN,return GetPrimitiveArray&lt;jbooleanArray, jboolean, mirror::BooleanArray&gt;(env, array, is_copy);,return GetPrimitiveArray&lt;jbooleanArray, jboolean, mirror::BooleanArray&gt;(env, array, is_copy);)<SUB>2248</SUB>> ]
-"12113" [label = <(GetPrimitiveArray&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;,GetPrimitiveArray&lt;jbooleanArray, jboolean, mirror::BooleanArray&gt;(env, array, is_copy))<SUB>2248</SUB>> ]
-"12107" [label = <(METHOD,GetBooleanArrayElements)<SUB>2247</SUB>> ]
-"12117" [label = <(METHOD_RETURN,jboolean)<SUB>2247</SUB>> ]
-  "12112" -> "12117" 
-  "12113" -> "12112" 
-  "12107" -> "12113" 
+digraph "GetFloatArrayElements" {  
+"11801" [label = <(RETURN,return GetPrimitiveArray&lt;jfloatArray, jfloat, mirror::FloatArray&gt;(env, array, is_copy);,return GetPrimitiveArray&lt;jfloatArray, jfloat, mirror::FloatArray&gt;(env, array, is_copy);)<SUB>2124</SUB>> ]
+"11802" [label = <(GetPrimitiveArray&lt;jfloatArray,jfloat,mirror::FloatArray&gt;,GetPrimitiveArray&lt;jfloatArray, jfloat, mirror::FloatArray&gt;(env, array, is_copy))<SUB>2124</SUB>> ]
+"11796" [label = <(METHOD,GetFloatArrayElements)<SUB>2123</SUB>> ]
+"11806" [label = <(METHOD_RETURN,jfloat)<SUB>2123</SUB>> ]
+  "11801" -> "11806" 
+  "11802" -> "11801" 
+  "11796" -> "11802" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/214-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/214-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/214-cfg.dot	2023-06-07 19:33:45.497394681 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/214-cfg.dot	2023-06-07 19:33:52.077393979 +0330
@@ -1,9 +1,9 @@
-digraph "GetByteArrayElements" {  
-"12124" [label = <(RETURN,return GetPrimitiveArray&lt;jbyteArray, jbyte, mirror::ByteArray&gt;(env, array, is_copy);,return GetPrimitiveArray&lt;jbyteArray, jbyte, mirror::ByteArray&gt;(env, array, is_copy);)<SUB>2252</SUB>> ]
-"12125" [label = <(GetPrimitiveArray&lt;jbyteArray,jbyte,mirror::ByteArray&gt;,GetPrimitiveArray&lt;jbyteArray, jbyte, mirror::ByteArray&gt;(env, array, is_copy))<SUB>2252</SUB>> ]
-"12119" [label = <(METHOD,GetByteArrayElements)<SUB>2251</SUB>> ]
-"12129" [label = <(METHOD_RETURN,jbyte)<SUB>2251</SUB>> ]
-  "12124" -> "12129" 
-  "12125" -> "12124" 
-  "12119" -> "12125" 
+digraph "GetIntArrayElements" {  
+"11813" [label = <(RETURN,return GetPrimitiveArray&lt;jintArray, jint, mirror::IntArray&gt;(env, array, is_copy);,return GetPrimitiveArray&lt;jintArray, jint, mirror::IntArray&gt;(env, array, is_copy);)<SUB>2128</SUB>> ]
+"11814" [label = <(GetPrimitiveArray&lt;jintArray,jint,mirror::IntArray&gt;,GetPrimitiveArray&lt;jintArray, jint, mirror::IntArray&gt;(env, array, is_copy))<SUB>2128</SUB>> ]
+"11808" [label = <(METHOD,GetIntArrayElements)<SUB>2127</SUB>> ]
+"11818" [label = <(METHOD_RETURN,jint)<SUB>2127</SUB>> ]
+  "11813" -> "11818" 
+  "11814" -> "11813" 
+  "11808" -> "11814" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/215-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/215-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/215-cfg.dot	2023-06-07 19:33:45.497394681 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/215-cfg.dot	2023-06-07 19:33:52.077393979 +0330
@@ -1,9 +1,9 @@
-digraph "GetCharArrayElements" {  
-"12136" [label = <(RETURN,return GetPrimitiveArray&lt;jcharArray, jchar, mirror::CharArray&gt;(env, array, is_copy);,return GetPrimitiveArray&lt;jcharArray, jchar, mirror::CharArray&gt;(env, array, is_copy);)<SUB>2256</SUB>> ]
-"12137" [label = <(GetPrimitiveArray&lt;jcharArray,jchar,mirror::CharArray&gt;,GetPrimitiveArray&lt;jcharArray, jchar, mirror::CharArray&gt;(env, array, is_copy))<SUB>2256</SUB>> ]
-"12131" [label = <(METHOD,GetCharArrayElements)<SUB>2255</SUB>> ]
-"12141" [label = <(METHOD_RETURN,jchar)<SUB>2255</SUB>> ]
-  "12136" -> "12141" 
-  "12137" -> "12136" 
-  "12131" -> "12137" 
+digraph "GetLongArrayElements" {  
+"11825" [label = <(RETURN,return GetPrimitiveArray&lt;jlongArray, jlong, mirror::LongArray&gt;(env, array, is_copy);,return GetPrimitiveArray&lt;jlongArray, jlong, mirror::LongArray&gt;(env, array, is_copy);)<SUB>2132</SUB>> ]
+"11826" [label = <(GetPrimitiveArray&lt;jlongArray,jlong,mirror::LongArray&gt;,GetPrimitiveArray&lt;jlongArray, jlong, mirror::LongArray&gt;(env, array, is_copy))<SUB>2132</SUB>> ]
+"11820" [label = <(METHOD,GetLongArrayElements)<SUB>2131</SUB>> ]
+"11830" [label = <(METHOD_RETURN,jlong)<SUB>2131</SUB>> ]
+  "11825" -> "11830" 
+  "11826" -> "11825" 
+  "11820" -> "11826" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/216-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/216-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/216-cfg.dot	2023-06-07 19:33:45.497394681 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/216-cfg.dot	2023-06-07 19:33:52.077393979 +0330
@@ -1,9 +1,9 @@
-digraph "GetDoubleArrayElements" {  
-"12148" [label = <(RETURN,return GetPrimitiveArray&lt;jdoubleArray, jdouble, mirror::DoubleArray&gt;(env, array, is_copy);,return GetPrimitiveArray&lt;jdoubleArray, jdouble, mirror::DoubleArray&gt;(env, array, is_copy);)<SUB>2260</SUB>> ]
-"12149" [label = <(GetPrimitiveArray&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;,GetPrimitiveArray&lt;jdoubleArray, jdouble, mirror::DoubleArray&gt;(env, array, is_copy))<SUB>2260</SUB>> ]
-"12143" [label = <(METHOD,GetDoubleArrayElements)<SUB>2259</SUB>> ]
-"12153" [label = <(METHOD_RETURN,jdouble)<SUB>2259</SUB>> ]
-  "12148" -> "12153" 
-  "12149" -> "12148" 
-  "12143" -> "12149" 
+digraph "GetShortArrayElements" {  
+"11837" [label = <(RETURN,return GetPrimitiveArray&lt;jshortArray, jshort, mirror::ShortArray&gt;(env, array, is_copy);,return GetPrimitiveArray&lt;jshortArray, jshort, mirror::ShortArray&gt;(env, array, is_copy);)<SUB>2136</SUB>> ]
+"11838" [label = <(GetPrimitiveArray&lt;jshortArray,jshort,mirror::ShortArray&gt;,GetPrimitiveArray&lt;jshortArray, jshort, mirror::ShortArray&gt;(env, array, is_copy))<SUB>2136</SUB>> ]
+"11832" [label = <(METHOD,GetShortArrayElements)<SUB>2135</SUB>> ]
+"11842" [label = <(METHOD_RETURN,jshort)<SUB>2135</SUB>> ]
+  "11837" -> "11842" 
+  "11838" -> "11837" 
+  "11832" -> "11838" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/217-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/217-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/217-cfg.dot	2023-06-07 19:33:45.497394681 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/217-cfg.dot	2023-06-07 19:33:52.077393979 +0330
@@ -1,9 +1,7 @@
-digraph "GetFloatArrayElements" {  
-"12160" [label = <(RETURN,return GetPrimitiveArray&lt;jfloatArray, jfloat, mirror::FloatArray&gt;(env, array, is_copy);,return GetPrimitiveArray&lt;jfloatArray, jfloat, mirror::FloatArray&gt;(env, array, is_copy);)<SUB>2264</SUB>> ]
-"12161" [label = <(GetPrimitiveArray&lt;jfloatArray,jfloat,mirror::FloatArray&gt;,GetPrimitiveArray&lt;jfloatArray, jfloat, mirror::FloatArray&gt;(env, array, is_copy))<SUB>2264</SUB>> ]
-"12155" [label = <(METHOD,GetFloatArrayElements)<SUB>2263</SUB>> ]
-"12165" [label = <(METHOD_RETURN,jfloat)<SUB>2263</SUB>> ]
-  "12160" -> "12165" 
-  "12161" -> "12160" 
-  "12155" -> "12161" 
+digraph "ReleaseBooleanArrayElements" {  
+"11850" [label = <(ReleasePrimitiveArray&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;,ReleasePrimitiveArray&lt;jbooleanArray, jboolean, mirror::BooleanArray&gt;(env, array, elements,\012                                                                         mode))<SUB>2141</SUB>> ]
+"11844" [label = <(METHOD,ReleaseBooleanArrayElements)<SUB>2139</SUB>> ]
+"11855" [label = <(METHOD_RETURN,void)<SUB>2139</SUB>> ]
+  "11850" -> "11855" 
+  "11844" -> "11850" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/218-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/218-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/218-cfg.dot	2023-06-07 19:33:45.497394681 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/218-cfg.dot	2023-06-07 19:33:52.077393979 +0330
@@ -1,9 +1,7 @@
-digraph "GetIntArrayElements" {  
-"12172" [label = <(RETURN,return GetPrimitiveArray&lt;jintArray, jint, mirror::IntArray&gt;(env, array, is_copy);,return GetPrimitiveArray&lt;jintArray, jint, mirror::IntArray&gt;(env, array, is_copy);)<SUB>2268</SUB>> ]
-"12173" [label = <(GetPrimitiveArray&lt;jintArray,jint,mirror::IntArray&gt;,GetPrimitiveArray&lt;jintArray, jint, mirror::IntArray&gt;(env, array, is_copy))<SUB>2268</SUB>> ]
-"12167" [label = <(METHOD,GetIntArrayElements)<SUB>2267</SUB>> ]
-"12177" [label = <(METHOD_RETURN,jint)<SUB>2267</SUB>> ]
-  "12172" -> "12177" 
-  "12173" -> "12172" 
-  "12167" -> "12173" 
+digraph "ReleaseByteArrayElements" {  
+"11863" [label = <(ReleasePrimitiveArray&lt;jbyteArray,jbyte,mirror::ByteArray&gt;,ReleasePrimitiveArray&lt;jbyteArray, jbyte, mirror::ByteArray&gt;(env, array, elements, mode))<SUB>2146</SUB>> ]
+"11857" [label = <(METHOD,ReleaseByteArrayElements)<SUB>2145</SUB>> ]
+"11868" [label = <(METHOD_RETURN,void)<SUB>2145</SUB>> ]
+  "11863" -> "11868" 
+  "11857" -> "11863" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/219-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/219-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/219-cfg.dot	2023-06-07 19:33:45.497394681 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/219-cfg.dot	2023-06-07 19:33:52.077393979 +0330
@@ -1,9 +1,7 @@
-digraph "GetLongArrayElements" {  
-"12184" [label = <(RETURN,return GetPrimitiveArray&lt;jlongArray, jlong, mirror::LongArray&gt;(env, array, is_copy);,return GetPrimitiveArray&lt;jlongArray, jlong, mirror::LongArray&gt;(env, array, is_copy);)<SUB>2272</SUB>> ]
-"12185" [label = <(GetPrimitiveArray&lt;jlongArray,jlong,mirror::LongArray&gt;,GetPrimitiveArray&lt;jlongArray, jlong, mirror::LongArray&gt;(env, array, is_copy))<SUB>2272</SUB>> ]
-"12179" [label = <(METHOD,GetLongArrayElements)<SUB>2271</SUB>> ]
-"12189" [label = <(METHOD_RETURN,jlong)<SUB>2271</SUB>> ]
-  "12184" -> "12189" 
-  "12185" -> "12184" 
-  "12179" -> "12185" 
+digraph "ReleaseCharArrayElements" {  
+"11876" [label = <(ReleasePrimitiveArray&lt;jcharArray,jchar,mirror::CharArray&gt;,ReleasePrimitiveArray&lt;jcharArray, jchar, mirror::CharArray&gt;(env, array, elements, mode))<SUB>2150</SUB>> ]
+"11870" [label = <(METHOD,ReleaseCharArrayElements)<SUB>2149</SUB>> ]
+"11881" [label = <(METHOD_RETURN,void)<SUB>2149</SUB>> ]
+  "11876" -> "11881" 
+  "11870" -> "11876" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/22-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/22-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/22-cfg.dot	2023-06-07 19:33:45.337394696 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/22-cfg.dot	2023-06-07 19:33:51.917393996 +0330
@@ -1,5 +1,11 @@
-digraph "ThrowNewException" {  
-"546" [label = <(METHOD,ThrowNewException)<SUB>445</SUB>> ]
-"552" [label = <(METHOD_RETURN,int)<SUB>445</SUB>> ]
-  "546" -> "552" 
+digraph "DefineClass" {  
+"401" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI DefineClass is not supported&quot;)<SUB>455</SUB>> ]
+"405" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>456</SUB>> ]
+"402" [label = <(LOG,LOG(WARNING))<SUB>455</SUB>> ]
+"394" [label = <(METHOD,DefineClass)<SUB>454</SUB>> ]
+"407" [label = <(METHOD_RETURN,jclass)<SUB>454</SUB>> ]
+  "401" -> "405" 
+  "405" -> "407" 
+  "402" -> "401" 
+  "394" -> "402" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/220-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/220-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/220-cfg.dot	2023-06-07 19:33:45.497394681 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/220-cfg.dot	2023-06-07 19:33:52.077393979 +0330
@@ -1,9 +1,7 @@
-digraph "GetShortArrayElements" {  
-"12196" [label = <(RETURN,return GetPrimitiveArray&lt;jshortArray, jshort, mirror::ShortArray&gt;(env, array, is_copy);,return GetPrimitiveArray&lt;jshortArray, jshort, mirror::ShortArray&gt;(env, array, is_copy);)<SUB>2276</SUB>> ]
-"12197" [label = <(GetPrimitiveArray&lt;jshortArray,jshort,mirror::ShortArray&gt;,GetPrimitiveArray&lt;jshortArray, jshort, mirror::ShortArray&gt;(env, array, is_copy))<SUB>2276</SUB>> ]
-"12191" [label = <(METHOD,GetShortArrayElements)<SUB>2275</SUB>> ]
-"12201" [label = <(METHOD_RETURN,jshort)<SUB>2275</SUB>> ]
-  "12196" -> "12201" 
-  "12197" -> "12196" 
-  "12191" -> "12197" 
+digraph "ReleaseDoubleArrayElements" {  
+"11889" [label = <(ReleasePrimitiveArray&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;,ReleasePrimitiveArray&lt;jdoubleArray, jdouble, mirror::DoubleArray&gt;(env, array, elements, mode))<SUB>2155</SUB>> ]
+"11883" [label = <(METHOD,ReleaseDoubleArrayElements)<SUB>2153</SUB>> ]
+"11894" [label = <(METHOD_RETURN,void)<SUB>2153</SUB>> ]
+  "11889" -> "11894" 
+  "11883" -> "11889" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/221-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/221-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/221-cfg.dot	2023-06-07 19:33:45.497394681 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/221-cfg.dot	2023-06-07 19:33:52.077393979 +0330
@@ -1,7 +1,7 @@
-digraph "ReleaseBooleanArrayElements" {  
-"12209" [label = <(ReleasePrimitiveArray&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;,ReleasePrimitiveArray&lt;jbooleanArray, jboolean, mirror::BooleanArray&gt;(env, array, elements,\012                                                                         mode))<SUB>2281</SUB>> ]
-"12203" [label = <(METHOD,ReleaseBooleanArrayElements)<SUB>2279</SUB>> ]
-"12214" [label = <(METHOD_RETURN,void)<SUB>2279</SUB>> ]
-  "12209" -> "12214" 
-  "12203" -> "12209" 
+digraph "ReleaseFloatArrayElements" {  
+"11902" [label = <(ReleasePrimitiveArray&lt;jfloatArray,jfloat,mirror::FloatArray&gt;,ReleasePrimitiveArray&lt;jfloatArray, jfloat, mirror::FloatArray&gt;(env, array, elements, mode))<SUB>2160</SUB>> ]
+"11896" [label = <(METHOD,ReleaseFloatArrayElements)<SUB>2158</SUB>> ]
+"11907" [label = <(METHOD_RETURN,void)<SUB>2158</SUB>> ]
+  "11902" -> "11907" 
+  "11896" -> "11902" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/222-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/222-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/222-cfg.dot	2023-06-07 19:33:45.497394681 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/222-cfg.dot	2023-06-07 19:33:52.077393979 +0330
@@ -1,7 +1,7 @@
-digraph "ReleaseByteArrayElements" {  
-"12222" [label = <(ReleasePrimitiveArray&lt;jbyteArray,jbyte,mirror::ByteArray&gt;,ReleasePrimitiveArray&lt;jbyteArray, jbyte, mirror::ByteArray&gt;(env, array, elements, mode))<SUB>2286</SUB>> ]
-"12216" [label = <(METHOD,ReleaseByteArrayElements)<SUB>2285</SUB>> ]
-"12227" [label = <(METHOD_RETURN,void)<SUB>2285</SUB>> ]
-  "12222" -> "12227" 
-  "12216" -> "12222" 
+digraph "ReleaseIntArrayElements" {  
+"11915" [label = <(ReleasePrimitiveArray&lt;jintArray,jint,mirror::IntArray&gt;,ReleasePrimitiveArray&lt;jintArray, jint, mirror::IntArray&gt;(env, array, elements, mode))<SUB>2164</SUB>> ]
+"11909" [label = <(METHOD,ReleaseIntArrayElements)<SUB>2163</SUB>> ]
+"11920" [label = <(METHOD_RETURN,void)<SUB>2163</SUB>> ]
+  "11915" -> "11920" 
+  "11909" -> "11915" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/223-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/223-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/223-cfg.dot	2023-06-07 19:33:45.497394681 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/223-cfg.dot	2023-06-07 19:33:52.077393979 +0330
@@ -1,7 +1,7 @@
-digraph "ReleaseCharArrayElements" {  
-"12235" [label = <(ReleasePrimitiveArray&lt;jcharArray,jchar,mirror::CharArray&gt;,ReleasePrimitiveArray&lt;jcharArray, jchar, mirror::CharArray&gt;(env, array, elements, mode))<SUB>2290</SUB>> ]
-"12229" [label = <(METHOD,ReleaseCharArrayElements)<SUB>2289</SUB>> ]
-"12240" [label = <(METHOD_RETURN,void)<SUB>2289</SUB>> ]
-  "12235" -> "12240" 
-  "12229" -> "12235" 
+digraph "ReleaseLongArrayElements" {  
+"11928" [label = <(ReleasePrimitiveArray&lt;jlongArray,jlong,mirror::LongArray&gt;,ReleasePrimitiveArray&lt;jlongArray, jlong, mirror::LongArray&gt;(env, array, elements, mode))<SUB>2168</SUB>> ]
+"11922" [label = <(METHOD,ReleaseLongArrayElements)<SUB>2167</SUB>> ]
+"11933" [label = <(METHOD_RETURN,void)<SUB>2167</SUB>> ]
+  "11928" -> "11933" 
+  "11922" -> "11928" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/224-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/224-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/224-cfg.dot	2023-06-07 19:33:45.497394681 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/224-cfg.dot	2023-06-07 19:33:52.077393979 +0330
@@ -1,7 +1,7 @@
-digraph "ReleaseDoubleArrayElements" {  
-"12248" [label = <(ReleasePrimitiveArray&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;,ReleasePrimitiveArray&lt;jdoubleArray, jdouble, mirror::DoubleArray&gt;(env, array, elements, mode))<SUB>2295</SUB>> ]
-"12242" [label = <(METHOD,ReleaseDoubleArrayElements)<SUB>2293</SUB>> ]
-"12253" [label = <(METHOD_RETURN,void)<SUB>2293</SUB>> ]
-  "12248" -> "12253" 
-  "12242" -> "12248" 
+digraph "ReleaseShortArrayElements" {  
+"11941" [label = <(ReleasePrimitiveArray&lt;jshortArray,jshort,mirror::ShortArray&gt;,ReleasePrimitiveArray&lt;jshortArray, jshort, mirror::ShortArray&gt;(env, array, elements, mode))<SUB>2173</SUB>> ]
+"11935" [label = <(METHOD,ReleaseShortArrayElements)<SUB>2171</SUB>> ]
+"11946" [label = <(METHOD_RETURN,void)<SUB>2171</SUB>> ]
+  "11941" -> "11946" 
+  "11935" -> "11941" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/225-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/225-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/225-cfg.dot	2023-06-07 19:33:45.497394681 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/225-cfg.dot	2023-06-07 19:33:52.077393979 +0330
@@ -1,7 +1,7 @@
-digraph "ReleaseFloatArrayElements" {  
-"12261" [label = <(ReleasePrimitiveArray&lt;jfloatArray,jfloat,mirror::FloatArray&gt;,ReleasePrimitiveArray&lt;jfloatArray, jfloat, mirror::FloatArray&gt;(env, array, elements, mode))<SUB>2300</SUB>> ]
-"12255" [label = <(METHOD,ReleaseFloatArrayElements)<SUB>2298</SUB>> ]
-"12266" [label = <(METHOD_RETURN,void)<SUB>2298</SUB>> ]
-  "12261" -> "12266" 
-  "12255" -> "12261" 
+digraph "GetBooleanArrayRegion" {  
+"11955" [label = <(GetPrimitiveArrayRegion&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;,GetPrimitiveArrayRegion&lt;jbooleanArray, jboolean, mirror::BooleanArray&gt;(env, array, start,\012                                                                           length, buf))<SUB>2178</SUB>> ]
+"11948" [label = <(METHOD,GetBooleanArrayRegion)<SUB>2176</SUB>> ]
+"11961" [label = <(METHOD_RETURN,void)<SUB>2176</SUB>> ]
+  "11955" -> "11961" 
+  "11948" -> "11955" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/226-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/226-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/226-cfg.dot	2023-06-07 19:33:45.497394681 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/226-cfg.dot	2023-06-07 19:33:52.077393979 +0330
@@ -1,7 +1,7 @@
-digraph "ReleaseIntArrayElements" {  
-"12274" [label = <(ReleasePrimitiveArray&lt;jintArray,jint,mirror::IntArray&gt;,ReleasePrimitiveArray&lt;jintArray, jint, mirror::IntArray&gt;(env, array, elements, mode))<SUB>2304</SUB>> ]
-"12268" [label = <(METHOD,ReleaseIntArrayElements)<SUB>2303</SUB>> ]
-"12279" [label = <(METHOD_RETURN,void)<SUB>2303</SUB>> ]
-  "12274" -> "12279" 
-  "12268" -> "12274" 
+digraph "GetByteArrayRegion" {  
+"11970" [label = <(GetPrimitiveArrayRegion&lt;jbyteArray,jbyte,mirror::ByteArray&gt;,GetPrimitiveArrayRegion&lt;jbyteArray, jbyte, mirror::ByteArray&gt;(env, array, start, length, buf))<SUB>2184</SUB>> ]
+"11963" [label = <(METHOD,GetByteArrayRegion)<SUB>2182</SUB>> ]
+"11976" [label = <(METHOD_RETURN,void)<SUB>2182</SUB>> ]
+  "11970" -> "11976" 
+  "11963" -> "11970" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/227-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/227-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/227-cfg.dot	2023-06-07 19:33:45.497394681 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/227-cfg.dot	2023-06-07 19:33:52.077393979 +0330
@@ -1,7 +1,7 @@
-digraph "ReleaseLongArrayElements" {  
-"12287" [label = <(ReleasePrimitiveArray&lt;jlongArray,jlong,mirror::LongArray&gt;,ReleasePrimitiveArray&lt;jlongArray, jlong, mirror::LongArray&gt;(env, array, elements, mode))<SUB>2308</SUB>> ]
-"12281" [label = <(METHOD,ReleaseLongArrayElements)<SUB>2307</SUB>> ]
-"12292" [label = <(METHOD_RETURN,void)<SUB>2307</SUB>> ]
-  "12287" -> "12292" 
-  "12281" -> "12287" 
+digraph "GetCharArrayRegion" {  
+"11985" [label = <(GetPrimitiveArrayRegion&lt;jcharArray,jchar,mirror::CharArray&gt;,GetPrimitiveArrayRegion&lt;jcharArray, jchar, mirror::CharArray&gt;(env, array, start, length, buf))<SUB>2189</SUB>> ]
+"11978" [label = <(METHOD,GetCharArrayRegion)<SUB>2187</SUB>> ]
+"11991" [label = <(METHOD_RETURN,void)<SUB>2187</SUB>> ]
+  "11985" -> "11991" 
+  "11978" -> "11985" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/228-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/228-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/228-cfg.dot	2023-06-07 19:33:45.497394681 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/228-cfg.dot	2023-06-07 19:33:52.077393979 +0330
@@ -1,7 +1,7 @@
-digraph "ReleaseShortArrayElements" {  
-"12300" [label = <(ReleasePrimitiveArray&lt;jshortArray,jshort,mirror::ShortArray&gt;,ReleasePrimitiveArray&lt;jshortArray, jshort, mirror::ShortArray&gt;(env, array, elements, mode))<SUB>2313</SUB>> ]
-"12294" [label = <(METHOD,ReleaseShortArrayElements)<SUB>2311</SUB>> ]
-"12305" [label = <(METHOD_RETURN,void)<SUB>2311</SUB>> ]
-  "12300" -> "12305" 
-  "12294" -> "12300" 
+digraph "GetDoubleArrayRegion" {  
+"12000" [label = <(GetPrimitiveArrayRegion&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;,GetPrimitiveArrayRegion&lt;jdoubleArray, jdouble, mirror::DoubleArray&gt;(env, array, start, length,\012                                                                        buf))<SUB>2194</SUB>> ]
+"11993" [label = <(METHOD,GetDoubleArrayRegion)<SUB>2192</SUB>> ]
+"12006" [label = <(METHOD_RETURN,void)<SUB>2192</SUB>> ]
+  "12000" -> "12006" 
+  "11993" -> "12000" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/229-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/229-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/229-cfg.dot	2023-06-07 19:33:45.497394681 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/229-cfg.dot	2023-06-07 19:33:52.077393979 +0330
@@ -1,7 +1,7 @@
-digraph "GetBooleanArrayRegion" {  
-"12314" [label = <(GetPrimitiveArrayRegion&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;,GetPrimitiveArrayRegion&lt;jbooleanArray, jboolean, mirror::BooleanArray&gt;(env, array, start,\012                                                                           length, buf))<SUB>2318</SUB>> ]
-"12307" [label = <(METHOD,GetBooleanArrayRegion)<SUB>2316</SUB>> ]
-"12320" [label = <(METHOD_RETURN,void)<SUB>2316</SUB>> ]
-  "12314" -> "12320" 
-  "12307" -> "12314" 
+digraph "GetFloatArrayRegion" {  
+"12015" [label = <(GetPrimitiveArrayRegion&lt;jfloatArray,jfloat,mirror::FloatArray&gt;,GetPrimitiveArrayRegion&lt;jfloatArray, jfloat, mirror::FloatArray&gt;(env, array, start, length,\012                                                                     buf))<SUB>2200</SUB>> ]
+"12008" [label = <(METHOD,GetFloatArrayRegion)<SUB>2198</SUB>> ]
+"12021" [label = <(METHOD_RETURN,void)<SUB>2198</SUB>> ]
+  "12015" -> "12021" 
+  "12008" -> "12015" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/23-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/23-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/23-cfg.dot	2023-06-07 19:33:45.337394696 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/23-cfg.dot	2023-06-07 19:33:51.917393996 +0330
@@ -1,17 +1,134 @@
-digraph "JavaVmExtFromEnv" {  
-"559" [label = <(RETURN,return reinterpret_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm();,return reinterpret_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm();)<SUB>488</SUB>> ]
-"560" [label = <(GetVm,reinterpret_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm())<SUB>488</SUB>> ]
-"561" [label = <(&lt;operator&gt;.indirectFieldAccess,reinterpret_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm)<SUB>488</SUB>> ]
-"562" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;JNIEnvExt*&gt;(env))<SUB>488</SUB>> ]
-"565" [label = <(FIELD_IDENTIFIER,GetVm,GetVm)<SUB>488</SUB>> ]
-"563" [label = <(UNKNOWN,JNIEnvExt*,JNIEnvExt*)<SUB>488</SUB>> ]
-"556" [label = <(METHOD,JavaVmExtFromEnv)<SUB>487</SUB>> ]
-"566" [label = <(METHOD_RETURN,JavaVMExt)<SUB>487</SUB>> ]
-  "559" -> "566" 
-  "560" -> "559" 
-  "561" -> "560" 
-  "562" -> "565" 
-  "565" -> "561" 
-  "563" -> "562" 
-  "556" -> "563" 
+digraph "FindClass" {  
+"413" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(name))<SUB>460</SUB>> ]
+"432" [label = <(&lt;operator&gt;.assignment,* runtime = Runtime::Current())<SUB>461</SUB>> ]
+"439" [label = <(&lt;operator&gt;.assignment,* class_linker = runtime-&gt;GetClassLinker())<SUB>462</SUB>> ]
+"446" [label = <(descriptor,descriptor(NormalizeJniClassDescriptor(name)))<SUB>463</SUB>> ]
+"450" [label = <(soa,soa(env))<SUB>464</SUB>> ]
+"453" [label = <(&lt;operator&gt;.assignment,* c = nullptr)<SUB>465</SUB>> ]
+"515" [label = <(RETURN,return soa.AddLocalReference&lt;jclass&gt;(c);,return soa.AddLocalReference&lt;jclass&gt;(c);)<SUB>473</SUB>> ]
+"434" [label = <(Runtime::Current,Runtime::Current())<SUB>461</SUB>> ]
+"441" [label = <(GetClassLinker,runtime-&gt;GetClassLinker())<SUB>462</SUB>> ]
+"447" [label = <(NormalizeJniClassDescriptor,NormalizeJniClassDescriptor(name))<SUB>463</SUB>> ]
+"457" [label = <(IsStarted,runtime-&gt;IsStarted())<SUB>466</SUB>> ]
+"516" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jclass&gt;(c))<SUB>473</SUB>> ]
+"435" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>461</SUB>> ]
+"442" [label = <(&lt;operator&gt;.indirectFieldAccess,runtime-&gt;GetClassLinker)<SUB>462</SUB>> ]
+"458" [label = <(&lt;operator&gt;.indirectFieldAccess,runtime-&gt;IsStarted)<SUB>466</SUB>> ]
+"462" [label = <(&lt;operator&gt;.greaterThan,StackHandleScope&lt;1&gt; hs(soa.Self()))<SUB>467</SUB>> ]
+"471" [label = <(&lt;operator&gt;.greaterThan,Handle&lt;mirror::ClassLoader&gt; class_loader(hs.NewHandle(GetClassLoader(soa))))<SUB>468</SUB>> ]
+"484" [label = <(&lt;operator&gt;.assignment,c = class_linker-&gt;FindClass(soa.Self(), descriptor.c_str(), class_loader))<SUB>469</SUB>> ]
+"517" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jclass)<SUB>473</SUB>> ]
+"417" [label = <(UNLIKELY,UNLIKELY((name) == nullptr))<SUB>460</SUB>> ]
+"437" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>461</SUB>> ]
+"444" [label = <(FIELD_IDENTIFIER,GetClassLinker,GetClassLinker)<SUB>462</SUB>> ]
+"460" [label = <(FIELD_IDENTIFIER,IsStarted,IsStarted)<SUB>466</SUB>> ]
+"463" [label = <(&lt;operator&gt;.lessThan,StackHandleScope&lt;1)<SUB>467</SUB>> ]
+"466" [label = <(hs,hs(soa.Self()))<SUB>467</SUB>> ]
+"472" [label = <(&lt;operator&gt;.lessThan,Handle&lt;mirror::ClassLoader)<SUB>468</SUB>> ]
+"477" [label = <(class_loader,class_loader(hs.NewHandle(GetClassLoader(soa))))<SUB>468</SUB>> ]
+"486" [label = <(FindClass,class_linker-&gt;FindClass(soa.Self(), descriptor.c_str(), class_loader))<SUB>469</SUB>> ]
+"501" [label = <(&lt;operator&gt;.assignment,c = class_linker-&gt;FindSystemClass(soa.Self(), descriptor.c_str()))<SUB>471</SUB>> ]
+"518" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>473</SUB>> ]
+"418" [label = <(&lt;operator&gt;.equals,(name) == nullptr)<SUB>460</SUB>> ]
+"422" [label = <(CHECK_NON_NULL_ARGUMENT(name),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;name == null&quot;))<SUB>460</SUB>> ]
+"429" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(name),CHECK_NON_NULL_ARGUMENT(name))<SUB>460</SUB>> ]
+"467" [label = <(Self,soa.Self())<SUB>467</SUB>> ]
+"474" [label = <(&lt;operator&gt;.fieldAccess,mirror::ClassLoader)<SUB>468</SUB>> ]
+"478" [label = <(NewHandle,hs.NewHandle(GetClassLoader(soa)))<SUB>468</SUB>> ]
+"487" [label = <(&lt;operator&gt;.indirectFieldAccess,class_linker-&gt;FindClass)<SUB>469</SUB>> ]
+"490" [label = <(Self,soa.Self())<SUB>469</SUB>> ]
+"494" [label = <(c_str,descriptor.c_str())<SUB>469</SUB>> ]
+"503" [label = <(FindSystemClass,class_linker-&gt;FindSystemClass(soa.Self(), descriptor.c_str()))<SUB>471</SUB>> ]
+"520" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>473</SUB>> ]
+"423" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>460</SUB>> ]
+"468" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>467</SUB>> ]
+"476" [label = <(FIELD_IDENTIFIER,ClassLoader,ClassLoader)<SUB>468</SUB>> ]
+"479" [label = <(&lt;operator&gt;.fieldAccess,hs.NewHandle)<SUB>468</SUB>> ]
+"482" [label = <(GetClassLoader,GetClassLoader(soa))<SUB>468</SUB>> ]
+"489" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>469</SUB>> ]
+"491" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>469</SUB>> ]
+"495" [label = <(&lt;operator&gt;.fieldAccess,descriptor.c_str)<SUB>469</SUB>> ]
+"504" [label = <(&lt;operator&gt;.indirectFieldAccess,class_linker-&gt;FindSystemClass)<SUB>471</SUB>> ]
+"507" [label = <(Self,soa.Self())<SUB>471</SUB>> ]
+"511" [label = <(c_str,descriptor.c_str())<SUB>471</SUB>> ]
+"424" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>460</SUB>> ]
+"426" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>460</SUB>> ]
+"470" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>467</SUB>> ]
+"481" [label = <(FIELD_IDENTIFIER,NewHandle,NewHandle)<SUB>468</SUB>> ]
+"493" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>469</SUB>> ]
+"497" [label = <(FIELD_IDENTIFIER,c_str,c_str)<SUB>469</SUB>> ]
+"506" [label = <(FIELD_IDENTIFIER,FindSystemClass,FindSystemClass)<SUB>471</SUB>> ]
+"508" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>471</SUB>> ]
+"512" [label = <(&lt;operator&gt;.fieldAccess,descriptor.c_str)<SUB>471</SUB>> ]
+"510" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>471</SUB>> ]
+"514" [label = <(FIELD_IDENTIFIER,c_str,c_str)<SUB>471</SUB>> ]
+"409" [label = <(METHOD,FindClass)<SUB>459</SUB>> ]
+"523" [label = <(METHOD_RETURN,jclass)<SUB>459</SUB>> ]
+  "413" -> "418" 
+  "413" -> "437" 
+  "432" -> "444" 
+  "439" -> "447" 
+  "446" -> "450" 
+  "450" -> "453" 
+  "453" -> "460" 
+  "515" -> "523" 
+  "434" -> "432" 
+  "441" -> "439" 
+  "447" -> "446" 
+  "457" -> "463" 
+  "457" -> "506" 
+  "516" -> "515" 
+  "435" -> "434" 
+  "442" -> "441" 
+  "458" -> "457" 
+  "462" -> "476" 
+  "471" -> "489" 
+  "484" -> "520" 
+  "517" -> "516" 
+  "417" -> "424" 
+  "417" -> "437" 
+  "437" -> "435" 
+  "444" -> "442" 
+  "460" -> "458" 
+  "463" -> "470" 
+  "466" -> "462" 
+  "472" -> "481" 
+  "477" -> "471" 
+  "486" -> "484" 
+  "501" -> "520" 
+  "518" -> "517" 
+  "418" -> "417" 
+  "422" -> "429" 
+  "429" -> "523" 
+  "467" -> "466" 
+  "474" -> "472" 
+  "478" -> "477" 
+  "487" -> "493" 
+  "490" -> "497" 
+  "494" -> "486" 
+  "503" -> "501" 
+  "520" -> "518" 
+  "423" -> "422" 
+  "468" -> "467" 
+  "476" -> "474" 
+  "479" -> "482" 
+  "482" -> "478" 
+  "489" -> "487" 
+  "491" -> "490" 
+  "495" -> "494" 
+  "504" -> "510" 
+  "507" -> "514" 
+  "511" -> "503" 
+  "424" -> "426" 
+  "426" -> "423" 
+  "470" -> "468" 
+  "481" -> "479" 
+  "493" -> "491" 
+  "497" -> "495" 
+  "506" -> "504" 
+  "508" -> "507" 
+  "512" -> "511" 
+  "510" -> "508" 
+  "514" -> "512" 
+  "409" -> "413" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/230-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/230-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/230-cfg.dot	2023-06-07 19:33:45.497394681 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/230-cfg.dot	2023-06-07 19:33:52.077393979 +0330
@@ -1,7 +1,7 @@
-digraph "GetByteArrayRegion" {  
-"12329" [label = <(GetPrimitiveArrayRegion&lt;jbyteArray,jbyte,mirror::ByteArray&gt;,GetPrimitiveArrayRegion&lt;jbyteArray, jbyte, mirror::ByteArray&gt;(env, array, start, length, buf))<SUB>2324</SUB>> ]
-"12322" [label = <(METHOD,GetByteArrayRegion)<SUB>2322</SUB>> ]
-"12335" [label = <(METHOD_RETURN,void)<SUB>2322</SUB>> ]
-  "12329" -> "12335" 
-  "12322" -> "12329" 
+digraph "GetIntArrayRegion" {  
+"12030" [label = <(GetPrimitiveArrayRegion&lt;jintArray,jint,mirror::IntArray&gt;,GetPrimitiveArrayRegion&lt;jintArray, jint, mirror::IntArray&gt;(env, array, start, length, buf))<SUB>2206</SUB>> ]
+"12023" [label = <(METHOD,GetIntArrayRegion)<SUB>2204</SUB>> ]
+"12036" [label = <(METHOD_RETURN,void)<SUB>2204</SUB>> ]
+  "12030" -> "12036" 
+  "12023" -> "12030" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/231-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/231-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/231-cfg.dot	2023-06-07 19:33:45.507394679 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/231-cfg.dot	2023-06-07 19:33:52.077393979 +0330
@@ -1,7 +1,7 @@
-digraph "GetCharArrayRegion" {  
-"12344" [label = <(GetPrimitiveArrayRegion&lt;jcharArray,jchar,mirror::CharArray&gt;,GetPrimitiveArrayRegion&lt;jcharArray, jchar, mirror::CharArray&gt;(env, array, start, length, buf))<SUB>2329</SUB>> ]
-"12337" [label = <(METHOD,GetCharArrayRegion)<SUB>2327</SUB>> ]
-"12350" [label = <(METHOD_RETURN,void)<SUB>2327</SUB>> ]
-  "12344" -> "12350" 
-  "12337" -> "12344" 
+digraph "GetLongArrayRegion" {  
+"12045" [label = <(GetPrimitiveArrayRegion&lt;jlongArray,jlong,mirror::LongArray&gt;,GetPrimitiveArrayRegion&lt;jlongArray, jlong, mirror::LongArray&gt;(env, array, start, length, buf))<SUB>2211</SUB>> ]
+"12038" [label = <(METHOD,GetLongArrayRegion)<SUB>2209</SUB>> ]
+"12051" [label = <(METHOD_RETURN,void)<SUB>2209</SUB>> ]
+  "12045" -> "12051" 
+  "12038" -> "12045" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/232-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/232-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/232-cfg.dot	2023-06-07 19:33:45.507394679 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/232-cfg.dot	2023-06-07 19:33:52.077393979 +0330
@@ -1,7 +1,7 @@
-digraph "GetDoubleArrayRegion" {  
-"12359" [label = <(GetPrimitiveArrayRegion&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;,GetPrimitiveArrayRegion&lt;jdoubleArray, jdouble, mirror::DoubleArray&gt;(env, array, start, length,\012                                                                        buf))<SUB>2334</SUB>> ]
-"12352" [label = <(METHOD,GetDoubleArrayRegion)<SUB>2332</SUB>> ]
-"12365" [label = <(METHOD_RETURN,void)<SUB>2332</SUB>> ]
-  "12359" -> "12365" 
-  "12352" -> "12359" 
+digraph "GetShortArrayRegion" {  
+"12060" [label = <(GetPrimitiveArrayRegion&lt;jshortArray,jshort,mirror::ShortArray&gt;,GetPrimitiveArrayRegion&lt;jshortArray, jshort, mirror::ShortArray&gt;(env, array, start, length,\012                                                                     buf))<SUB>2216</SUB>> ]
+"12053" [label = <(METHOD,GetShortArrayRegion)<SUB>2214</SUB>> ]
+"12066" [label = <(METHOD_RETURN,void)<SUB>2214</SUB>> ]
+  "12060" -> "12066" 
+  "12053" -> "12060" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/233-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/233-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/233-cfg.dot	2023-06-07 19:33:45.507394679 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/233-cfg.dot	2023-06-07 19:33:52.077393979 +0330
@@ -1,7 +1,7 @@
-digraph "GetFloatArrayRegion" {  
-"12374" [label = <(GetPrimitiveArrayRegion&lt;jfloatArray,jfloat,mirror::FloatArray&gt;,GetPrimitiveArrayRegion&lt;jfloatArray, jfloat, mirror::FloatArray&gt;(env, array, start, length,\012                                                                     buf))<SUB>2340</SUB>> ]
-"12367" [label = <(METHOD,GetFloatArrayRegion)<SUB>2338</SUB>> ]
-"12380" [label = <(METHOD_RETURN,void)<SUB>2338</SUB>> ]
-  "12374" -> "12380" 
-  "12367" -> "12374" 
+digraph "SetBooleanArrayRegion" {  
+"12075" [label = <(SetPrimitiveArrayRegion&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;,SetPrimitiveArrayRegion&lt;jbooleanArray, jboolean, mirror::BooleanArray&gt;(env, array, start,\012                                                                           length, buf))<SUB>2222</SUB>> ]
+"12068" [label = <(METHOD,SetBooleanArrayRegion)<SUB>2220</SUB>> ]
+"12081" [label = <(METHOD_RETURN,void)<SUB>2220</SUB>> ]
+  "12075" -> "12081" 
+  "12068" -> "12075" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/234-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/234-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/234-cfg.dot	2023-06-07 19:33:45.507394679 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/234-cfg.dot	2023-06-07 19:33:52.077393979 +0330
@@ -1,7 +1,7 @@
-digraph "GetIntArrayRegion" {  
-"12389" [label = <(GetPrimitiveArrayRegion&lt;jintArray,jint,mirror::IntArray&gt;,GetPrimitiveArrayRegion&lt;jintArray, jint, mirror::IntArray&gt;(env, array, start, length, buf))<SUB>2346</SUB>> ]
-"12382" [label = <(METHOD,GetIntArrayRegion)<SUB>2344</SUB>> ]
-"12395" [label = <(METHOD_RETURN,void)<SUB>2344</SUB>> ]
-  "12389" -> "12395" 
-  "12382" -> "12389" 
+digraph "SetByteArrayRegion" {  
+"12090" [label = <(SetPrimitiveArrayRegion&lt;jbyteArray,jbyte,mirror::ByteArray&gt;,SetPrimitiveArrayRegion&lt;jbyteArray, jbyte, mirror::ByteArray&gt;(env, array, start, length, buf))<SUB>2228</SUB>> ]
+"12083" [label = <(METHOD,SetByteArrayRegion)<SUB>2226</SUB>> ]
+"12096" [label = <(METHOD_RETURN,void)<SUB>2226</SUB>> ]
+  "12090" -> "12096" 
+  "12083" -> "12090" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/235-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/235-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/235-cfg.dot	2023-06-07 19:33:45.507394679 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/235-cfg.dot	2023-06-07 19:33:52.077393979 +0330
@@ -1,7 +1,7 @@
-digraph "GetLongArrayRegion" {  
-"12404" [label = <(GetPrimitiveArrayRegion&lt;jlongArray,jlong,mirror::LongArray&gt;,GetPrimitiveArrayRegion&lt;jlongArray, jlong, mirror::LongArray&gt;(env, array, start, length, buf))<SUB>2351</SUB>> ]
-"12397" [label = <(METHOD,GetLongArrayRegion)<SUB>2349</SUB>> ]
-"12410" [label = <(METHOD_RETURN,void)<SUB>2349</SUB>> ]
-  "12404" -> "12410" 
-  "12397" -> "12404" 
+digraph "SetCharArrayRegion" {  
+"12105" [label = <(SetPrimitiveArrayRegion&lt;jcharArray,jchar,mirror::CharArray&gt;,SetPrimitiveArrayRegion&lt;jcharArray, jchar, mirror::CharArray&gt;(env, array, start, length, buf))<SUB>2233</SUB>> ]
+"12098" [label = <(METHOD,SetCharArrayRegion)<SUB>2231</SUB>> ]
+"12111" [label = <(METHOD_RETURN,void)<SUB>2231</SUB>> ]
+  "12105" -> "12111" 
+  "12098" -> "12105" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/236-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/236-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/236-cfg.dot	2023-06-07 19:33:45.507394679 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/236-cfg.dot	2023-06-07 19:33:52.077393979 +0330
@@ -1,7 +1,7 @@
-digraph "GetShortArrayRegion" {  
-"12419" [label = <(GetPrimitiveArrayRegion&lt;jshortArray,jshort,mirror::ShortArray&gt;,GetPrimitiveArrayRegion&lt;jshortArray, jshort, mirror::ShortArray&gt;(env, array, start, length,\012                                                                     buf))<SUB>2356</SUB>> ]
-"12412" [label = <(METHOD,GetShortArrayRegion)<SUB>2354</SUB>> ]
-"12425" [label = <(METHOD_RETURN,void)<SUB>2354</SUB>> ]
-  "12419" -> "12425" 
-  "12412" -> "12419" 
+digraph "SetDoubleArrayRegion" {  
+"12120" [label = <(SetPrimitiveArrayRegion&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;,SetPrimitiveArrayRegion&lt;jdoubleArray, jdouble, mirror::DoubleArray&gt;(env, array, start, length,\012                                                                        buf))<SUB>2238</SUB>> ]
+"12113" [label = <(METHOD,SetDoubleArrayRegion)<SUB>2236</SUB>> ]
+"12126" [label = <(METHOD_RETURN,void)<SUB>2236</SUB>> ]
+  "12120" -> "12126" 
+  "12113" -> "12120" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/237-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/237-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/237-cfg.dot	2023-06-07 19:33:45.507394679 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/237-cfg.dot	2023-06-07 19:33:52.077393979 +0330
@@ -1,7 +1,7 @@
-digraph "SetBooleanArrayRegion" {  
-"12434" [label = <(SetPrimitiveArrayRegion&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;,SetPrimitiveArrayRegion&lt;jbooleanArray, jboolean, mirror::BooleanArray&gt;(env, array, start,\012                                                                           length, buf))<SUB>2362</SUB>> ]
-"12427" [label = <(METHOD,SetBooleanArrayRegion)<SUB>2360</SUB>> ]
-"12440" [label = <(METHOD_RETURN,void)<SUB>2360</SUB>> ]
-  "12434" -> "12440" 
-  "12427" -> "12434" 
+digraph "SetFloatArrayRegion" {  
+"12135" [label = <(SetPrimitiveArrayRegion&lt;jfloatArray,jfloat,mirror::FloatArray&gt;,SetPrimitiveArrayRegion&lt;jfloatArray, jfloat, mirror::FloatArray&gt;(env, array, start, length,\012                                                                     buf))<SUB>2244</SUB>> ]
+"12128" [label = <(METHOD,SetFloatArrayRegion)<SUB>2242</SUB>> ]
+"12141" [label = <(METHOD_RETURN,void)<SUB>2242</SUB>> ]
+  "12135" -> "12141" 
+  "12128" -> "12135" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/238-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/238-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/238-cfg.dot	2023-06-07 19:33:45.507394679 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/238-cfg.dot	2023-06-07 19:33:52.077393979 +0330
@@ -1,7 +1,7 @@
-digraph "SetByteArrayRegion" {  
-"12449" [label = <(SetPrimitiveArrayRegion&lt;jbyteArray,jbyte,mirror::ByteArray&gt;,SetPrimitiveArrayRegion&lt;jbyteArray, jbyte, mirror::ByteArray&gt;(env, array, start, length, buf))<SUB>2368</SUB>> ]
-"12442" [label = <(METHOD,SetByteArrayRegion)<SUB>2366</SUB>> ]
-"12455" [label = <(METHOD_RETURN,void)<SUB>2366</SUB>> ]
-  "12449" -> "12455" 
-  "12442" -> "12449" 
+digraph "SetIntArrayRegion" {  
+"12150" [label = <(SetPrimitiveArrayRegion&lt;jintArray,jint,mirror::IntArray&gt;,SetPrimitiveArrayRegion&lt;jintArray, jint, mirror::IntArray&gt;(env, array, start, length, buf))<SUB>2250</SUB>> ]
+"12143" [label = <(METHOD,SetIntArrayRegion)<SUB>2248</SUB>> ]
+"12156" [label = <(METHOD_RETURN,void)<SUB>2248</SUB>> ]
+  "12150" -> "12156" 
+  "12143" -> "12150" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/239-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/239-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/239-cfg.dot	2023-06-07 19:33:45.507394679 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/239-cfg.dot	2023-06-07 19:33:52.077393979 +0330
@@ -1,7 +1,7 @@
-digraph "SetCharArrayRegion" {  
-"12464" [label = <(SetPrimitiveArrayRegion&lt;jcharArray,jchar,mirror::CharArray&gt;,SetPrimitiveArrayRegion&lt;jcharArray, jchar, mirror::CharArray&gt;(env, array, start, length, buf))<SUB>2373</SUB>> ]
-"12457" [label = <(METHOD,SetCharArrayRegion)<SUB>2371</SUB>> ]
-"12470" [label = <(METHOD_RETURN,void)<SUB>2371</SUB>> ]
-  "12464" -> "12470" 
-  "12457" -> "12464" 
+digraph "SetLongArrayRegion" {  
+"12165" [label = <(SetPrimitiveArrayRegion&lt;jlongArray,jlong,mirror::LongArray&gt;,SetPrimitiveArrayRegion&lt;jlongArray, jlong, mirror::LongArray&gt;(env, array, start, length, buf))<SUB>2255</SUB>> ]
+"12158" [label = <(METHOD,SetLongArrayRegion)<SUB>2253</SUB>> ]
+"12171" [label = <(METHOD_RETURN,void)<SUB>2253</SUB>> ]
+  "12165" -> "12171" 
+  "12158" -> "12165" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/24-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/24-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/24-cfg.dot	2023-06-07 19:33:45.337394696 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/24-cfg.dot	2023-06-07 19:33:51.927393994 +0330
@@ -1,5 +1,39 @@
-digraph "FindMethod" {  
-"568" [label = <(METHOD,FindMethod)<SUB>516</SUB>> ]
-"573" [label = <(METHOD_RETURN,ArtMethod*)<SUB>516</SUB>> ]
-  "568" -> "573" 
+digraph "FromReflectedMethod" {  
+"529" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(jlr_method))<SUB>477</SUB>> ]
+"548" [label = <(soa,soa(env))<SUB>478</SUB>> ]
+"550" [label = <(RETURN,return jni::EncodeArtMethod(ArtMethod::FromReflectedMethod(soa, jlr_method));,return jni::EncodeArtMethod(ArtMethod::FromReflectedMethod(soa, jlr_method));)<SUB>479</SUB>> ]
+"551" [label = <(jni::EncodeArtMethod,jni::EncodeArtMethod(ArtMethod::FromReflectedMethod(soa, jlr_method)))<SUB>479</SUB>> ]
+"552" [label = <(&lt;operator&gt;.fieldAccess,jni::EncodeArtMethod)<SUB>479</SUB>> ]
+"555" [label = <(ArtMethod::FromReflectedMethod,ArtMethod::FromReflectedMethod(soa, jlr_method))<SUB>479</SUB>> ]
+"533" [label = <(UNLIKELY,UNLIKELY((jlr_method) == nullptr))<SUB>477</SUB>> ]
+"554" [label = <(FIELD_IDENTIFIER,EncodeArtMethod,EncodeArtMethod)<SUB>479</SUB>> ]
+"556" [label = <(&lt;operator&gt;.fieldAccess,ArtMethod::FromReflectedMethod)<SUB>479</SUB>> ]
+"534" [label = <(&lt;operator&gt;.equals,(jlr_method) == nullptr)<SUB>477</SUB>> ]
+"538" [label = <(CHECK_NON_NULL_ARGUMENT(jlr_method),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;jlr_method == null&quot;))<SUB>477</SUB>> ]
+"545" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(jlr_method),CHECK_NON_NULL_ARGUMENT(jlr_method))<SUB>477</SUB>> ]
+"558" [label = <(FIELD_IDENTIFIER,FromReflectedMethod,FromReflectedMethod)<SUB>479</SUB>> ]
+"539" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>477</SUB>> ]
+"540" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>477</SUB>> ]
+"542" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>477</SUB>> ]
+"525" [label = <(METHOD,FromReflectedMethod)<SUB>476</SUB>> ]
+"561" [label = <(METHOD_RETURN,jmethodID)<SUB>476</SUB>> ]
+  "529" -> "534" 
+  "529" -> "548" 
+  "548" -> "554" 
+  "550" -> "561" 
+  "551" -> "550" 
+  "552" -> "558" 
+  "555" -> "551" 
+  "533" -> "540" 
+  "533" -> "548" 
+  "554" -> "552" 
+  "556" -> "555" 
+  "534" -> "533" 
+  "538" -> "545" 
+  "545" -> "561" 
+  "558" -> "556" 
+  "539" -> "538" 
+  "540" -> "542" 
+  "542" -> "539" 
+  "525" -> "529" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/240-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/240-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/240-cfg.dot	2023-06-07 19:33:45.507394679 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/240-cfg.dot	2023-06-07 19:33:52.077393979 +0330
@@ -1,7 +1,7 @@
-digraph "SetDoubleArrayRegion" {  
-"12479" [label = <(SetPrimitiveArrayRegion&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;,SetPrimitiveArrayRegion&lt;jdoubleArray, jdouble, mirror::DoubleArray&gt;(env, array, start, length,\012                                                                        buf))<SUB>2378</SUB>> ]
-"12472" [label = <(METHOD,SetDoubleArrayRegion)<SUB>2376</SUB>> ]
-"12485" [label = <(METHOD_RETURN,void)<SUB>2376</SUB>> ]
-  "12479" -> "12485" 
-  "12472" -> "12479" 
+digraph "SetShortArrayRegion" {  
+"12180" [label = <(SetPrimitiveArrayRegion&lt;jshortArray,jshort,mirror::ShortArray&gt;,SetPrimitiveArrayRegion&lt;jshortArray, jshort, mirror::ShortArray&gt;(env, array, start, length,\012                                                                     buf))<SUB>2260</SUB>> ]
+"12173" [label = <(METHOD,SetShortArrayRegion)<SUB>2258</SUB>> ]
+"12186" [label = <(METHOD_RETURN,void)<SUB>2258</SUB>> ]
+  "12180" -> "12186" 
+  "12173" -> "12180" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/241-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/241-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/241-cfg.dot	2023-06-07 19:33:45.507394679 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/241-cfg.dot	2023-06-07 19:33:52.087393978 +0330
@@ -1,7 +1,449 @@
-digraph "SetFloatArrayRegion" {  
-"12494" [label = <(SetPrimitiveArrayRegion&lt;jfloatArray,jfloat,mirror::FloatArray&gt;,SetPrimitiveArrayRegion&lt;jfloatArray, jfloat, mirror::FloatArray&gt;(env, array, start, length,\012                                                                     buf))<SUB>2384</SUB>> ]
-"12487" [label = <(METHOD,SetFloatArrayRegion)<SUB>2382</SUB>> ]
-"12500" [label = <(METHOD_RETURN,void)<SUB>2382</SUB>> ]
-  "12494" -> "12500" 
-  "12487" -> "12494" 
+digraph "RegisterNatives" {  
+"12210" [label = <(CHECK_NON_NULL_ARGUMENT_FN_NAME,CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, java_class, JNI_ERR))<SUB>2273</SUB>> ]
+"12231" [label = <(soa,soa(env))<SUB>2274</SUB>> ]
+"12233" [label = <(&lt;operator&gt;.greaterThan,StackHandleScope&lt;1&gt; hs(soa.Self()))<SUB>2275</SUB>> ]
+"12242" [label = <(&lt;operator&gt;.assignment,Handle&lt;mirror::Class&gt; c = hs.NewHandle(soa.Decode&lt;mirror::Class&gt;(java_class)))<SUB>2276</SUB>> ]
+"12280" [label = <(CHECK_NON_NULL_ARGUMENT_FN_NAME,CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, methods, JNI_ERR))<SUB>2282</SUB>> ]
+"12627" [label = <(RETURN,return JNI_OK;,return JNI_OK;)<SUB>2393</SUB>> ]
+"12195" [label = <(UNLIKELY,UNLIKELY(method_count &lt; 0))<SUB>2268</SUB>> ]
+"12234" [label = <(&lt;operator&gt;.lessThan,StackHandleScope&lt;1)<SUB>2275</SUB>> ]
+"12237" [label = <(hs,hs(soa.Self()))<SUB>2275</SUB>> ]
+"12243" [label = <(&lt;operator&gt;.greaterThan,Handle&lt;mirror::Class&gt; c)<SUB>2276</SUB>> ]
+"12250" [label = <(NewHandle,hs.NewHandle(soa.Decode&lt;mirror::Class&gt;(java_class)))<SUB>2276</SUB>> ]
+"12264" [label = <(UNLIKELY,UNLIKELY(method_count == 0))<SUB>2277</SUB>> ]
+"12306" [label = <(&lt;operator&gt;.lessThan,i &lt; method_count)<SUB>2283</SUB>> ]
+"12309" [label = <(&lt;operator&gt;.preIncrement,++i)<SUB>2283</SUB>> ]
+"12196" [label = <(&lt;operator&gt;.lessThan,method_count &lt; 0)<SUB>2268</SUB>> ]
+"12200" [label = <(JniAbortF,JavaVmExtFromEnv(env)-&gt;JniAbortF(&quot;RegisterNatives&quot;, &quot;negative method count: %d&quot;,\012                                       method_count))<SUB>2269</SUB>> ]
+"12208" [label = <(RETURN,return JNI_ERR;,return JNI_ERR;)<SUB>2271</SUB>> ]
+"12238" [label = <(Self,soa.Self())<SUB>2275</SUB>> ]
+"12244" [label = <(&lt;operator&gt;.lessThan,Handle&lt;mirror::Class)<SUB>2276</SUB>> ]
+"12251" [label = <(&lt;operator&gt;.fieldAccess,hs.NewHandle)<SUB>2276</SUB>> ]
+"12254" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>2276</SUB>> ]
+"12265" [label = <(&lt;operator&gt;.equals,method_count == 0)<SUB>2277</SUB>> ]
+"12269" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI RegisterNativeMethods: attempt to register 0 native methods for &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor())<SUB>2278</SUB>> ]
+"12278" [label = <(RETURN,return JNI_OK;,return JNI_OK;)<SUB>2280</SUB>> ]
+"12303" [label = <(&lt;operator&gt;.assignment,i = 0)<SUB>2283</SUB>> ]
+"12313" [label = <(&lt;operator&gt;.assignment,* name = methods[i].name)<SUB>2284</SUB>> ]
+"12321" [label = <(&lt;operator&gt;.assignment,* sig = methods[i].signature)<SUB>2285</SUB>> ]
+"12329" [label = <(&lt;operator&gt;.assignment,* fnPtr = methods[i].fnPtr)<SUB>2286</SUB>> ]
+"12389" [label = <(&lt;operator&gt;.assignment,is_fast = false)<SUB>2297</SUB>> ]
+"12404" [label = <(&lt;operator&gt;.assignment,* m = nullptr)<SUB>2335</SUB>> ]
+"12408" [label = <(&lt;operator&gt;.assignment,warn_on_going_to_parent = down_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm()-&gt;IsCheckJniEnabled())<SUB>2336</SUB>> ]
+"12590" [label = <(&lt;operator&gt;.shiftLeft,VLOG(jni) &lt;&lt; &quot;[Registering JNI native method &quot; &lt;&lt; m-&gt;PrettyMethod() &lt;&lt; &quot;]&quot;)<SUB>2376</SUB>> ]
+"12618" [label = <(&lt;operator&gt;.assignment,* final_function_ptr = m-&gt;RegisterNative(fnPtr))<SUB>2390</SUB>> ]
+"12625" [label = <(UNUSED,UNUSED(final_function_ptr))<SUB>2391</SUB>> ]
+"12201" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>2269</SUB>> ]
+"12216" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>2273</SUB>> ]
+"12239" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>2275</SUB>> ]
+"12246" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2276</SUB>> ]
+"12253" [label = <(FIELD_IDENTIFIER,NewHandle,NewHandle)<SUB>2276</SUB>> ]
+"12255" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>2276</SUB>> ]
+"12270" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI RegisterNativeMethods: attempt to register 0 native methods for &quot;)<SUB>2278</SUB>> ]
+"12274" [label = <(PrettyDescriptor,c-&gt;PrettyDescriptor())<SUB>2279</SUB>> ]
+"12286" [label = <(UNLIKELY,UNLIKELY((methods) == nullptr))<SUB>2282</SUB>> ]
+"12315" [label = <(&lt;operator&gt;.fieldAccess,methods[i].name)<SUB>2284</SUB>> ]
+"12323" [label = <(&lt;operator&gt;.fieldAccess,methods[i].signature)<SUB>2285</SUB>> ]
+"12331" [label = <(&lt;operator&gt;.fieldAccess,methods[i].fnPtr)<SUB>2286</SUB>> ]
+"12337" [label = <(UNLIKELY,UNLIKELY(name == nullptr))<SUB>2287</SUB>> ]
+"12393" [label = <(&lt;operator&gt;.equals,*sig == '!')<SUB>2327</SUB>> ]
+"12410" [label = <(IsCheckJniEnabled,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm()-&gt;IsCheckJniEnabled())<SUB>2336</SUB>> ]
+"12432" [label = <(&lt;operator&gt;.notEquals,current_class != nullptr)<SUB>2338</SUB>> ]
+"12435" [label = <(&lt;operator&gt;.assignment,current_class = current_class-&gt;GetSuperClass())<SUB>2339</SUB>> ]
+"12499" [label = <(&lt;operator&gt;.equals,m == nullptr)<SUB>2359</SUB>> ]
+"12591" [label = <(&lt;operator&gt;.shiftLeft,VLOG(jni) &lt;&lt; &quot;[Registering JNI native method &quot; &lt;&lt; m-&gt;PrettyMethod())<SUB>2376</SUB>> ]
+"12602" [label = <(UNLIKELY,UNLIKELY(is_fast))<SUB>2378</SUB>> ]
+"12620" [label = <(RegisterNative,m-&gt;RegisterNative(fnPtr))<SUB>2390</SUB>> ]
+"12202" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2269</SUB>> ]
+"12204" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2269</SUB>> ]
+"12217" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>2273</SUB>> ]
+"12221" [label = <(CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, java_class, JNI_ERR),JavaVmExtFromEnv(env)-&gt;JniAbort(&quot;RegisterNatives&quot;, &quot;java_class == null&quot;))<SUB>2273</SUB>> ]
+"12228" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, java_class, JNI_ERR),CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, java_class, JNI_ERR))<SUB>2273</SUB>> ]
+"12241" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>2275</SUB>> ]
+"12248" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>2276</SUB>> ]
+"12256" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2276</SUB>> ]
+"12259" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2276</SUB>> ]
+"12271" [label = <(LOG,LOG(WARNING))<SUB>2278</SUB>> ]
+"12275" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;PrettyDescriptor)<SUB>2279</SUB>> ]
+"12287" [label = <(&lt;operator&gt;.equals,(methods) == nullptr)<SUB>2282</SUB>> ]
+"12291" [label = <(CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, methods, JNI_ERR),JavaVmExtFromEnv(env)-&gt;JniAbort(&quot;RegisterNatives&quot;, &quot;methods == null&quot;))<SUB>2282</SUB>> ]
+"12298" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, methods, JNI_ERR),CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, methods, JNI_ERR))<SUB>2282</SUB>> ]
+"12316" [label = <(&lt;operator&gt;.indirectIndexAccess,methods[i])<SUB>2284</SUB>> ]
+"12319" [label = <(FIELD_IDENTIFIER,name,name)<SUB>2284</SUB>> ]
+"12324" [label = <(&lt;operator&gt;.indirectIndexAccess,methods[i])<SUB>2285</SUB>> ]
+"12327" [label = <(FIELD_IDENTIFIER,signature,signature)<SUB>2285</SUB>> ]
+"12332" [label = <(&lt;operator&gt;.indirectIndexAccess,methods[i])<SUB>2286</SUB>> ]
+"12335" [label = <(FIELD_IDENTIFIER,fnPtr,fnPtr)<SUB>2286</SUB>> ]
+"12338" [label = <(&lt;operator&gt;.equals,name == nullptr)<SUB>2287</SUB>> ]
+"12342" [label = <(ReportInvalidJNINativeMethod,ReportInvalidJNINativeMethod(soa, c.Get(), &quot;method name&quot;, i))<SUB>2288</SUB>> ]
+"12350" [label = <(RETURN,return JNI_ERR;,return JNI_ERR;)<SUB>2289</SUB>> ]
+"12394" [label = <(&lt;operator&gt;.indirection,*sig)<SUB>2327</SUB>> ]
+"12398" [label = <(&lt;operator&gt;.assignment,is_fast = true)<SUB>2328</SUB>> ]
+"12401" [label = <(&lt;operator&gt;.preIncrement,++sig)<SUB>2329</SUB>> ]
+"12411" [label = <(&lt;operator&gt;.indirectFieldAccess,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm()-&gt;IsCheckJniEnabled)<SUB>2336</SUB>> ]
+"12420" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; current_class = c.Get())<SUB>2337</SUB>> ]
+"12437" [label = <(GetSuperClass,current_class-&gt;GetSuperClass())<SUB>2339</SUB>> ]
+"12442" [label = <(&lt;operator&gt;.assignment,m = FindMethod&lt;true&gt;(current_class.Ptr(), name, sig))<SUB>2341</SUB>> ]
+"12462" [label = <(&lt;operator&gt;.assignment,m = FindMethod&lt;false&gt;(current_class.Ptr(), name, sig))<SUB>2347</SUB>> ]
+"12503" [label = <(DumpClass,c-&gt;DumpClass(LOG_STREAM(ERROR), mirror::Class::kDumpClassFullDetail))<SUB>2360</SUB>> ]
+"12514" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor() &lt;&lt; &quot;.&quot; &lt;&lt; name &lt;&lt; sig &lt;&lt; &quot; in &quot;\012 &lt;&lt; c-&gt;GetDexCache()-&gt;GetLocation()-&gt;ToModifiedUtf8())<SUB>2361</SUB>> ]
+"12542" [label = <(ThrowNoSuchMethodError,ThrowNoSuchMethodError(soa, c.Get(), name, sig, &quot;static or non-static&quot;))<SUB>2365</SUB>> ]
+"12551" [label = <(RETURN,return JNI_ERR;,return JNI_ERR;)<SUB>2366</SUB>> ]
+"12592" [label = <(&lt;operator&gt;.shiftLeft,VLOG(jni) &lt;&lt; &quot;[Registering JNI native method &quot;)<SUB>2376</SUB>> ]
+"12596" [label = <(PrettyMethod,m-&gt;PrettyMethod())<SUB>2376</SUB>> ]
+"12605" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;!bang JNI is deprecated. Switch to @FastNative for &quot; &lt;&lt; m-&gt;PrettyMethod())<SUB>2385</SUB>> ]
+"12614" [label = <(&lt;operator&gt;.assignment,is_fast = false)<SUB>2386</SUB>> ]
+"12621" [label = <(&lt;operator&gt;.indirectFieldAccess,m-&gt;RegisterNative)<SUB>2390</SUB>> ]
+"12222" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2273</SUB>> ]
+"12258" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2276</SUB>> ]
+"12261" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>2276</SUB>> ]
+"12277" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>2279</SUB>> ]
+"12292" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2282</SUB>> ]
+"12344" [label = <(Get,c.Get())<SUB>2288</SUB>> ]
+"12412" [label = <(GetVm,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm())<SUB>2336</SUB>> ]
+"12417" [label = <(FIELD_IDENTIFIER,IsCheckJniEnabled,IsCheckJniEnabled)<SUB>2336</SUB>> ]
+"12421" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; current_class)<SUB>2337</SUB>> ]
+"12428" [label = <(Get,c.Get())<SUB>2337</SUB>> ]
+"12438" [label = <(&lt;operator&gt;.indirectFieldAccess,current_class-&gt;GetSuperClass)<SUB>2339</SUB>> ]
+"12444" [label = <(&lt;operator&gt;.greaterThan,FindMethod&lt;true&gt;(current_class.Ptr(), name, sig))<SUB>2341</SUB>> ]
+"12457" [label = <(&lt;operator&gt;.notEquals,m != nullptr)<SUB>2342</SUB>> ]
+"12464" [label = <(&lt;operator&gt;.greaterThan,FindMethod&lt;false&gt;(current_class.Ptr(), name, sig))<SUB>2347</SUB>> ]
+"12477" [label = <(&lt;operator&gt;.notEquals,m != nullptr)<SUB>2348</SUB>> ]
+"12504" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;DumpClass)<SUB>2360</SUB>> ]
+"12507" [label = <(LOG_STREAM,LOG_STREAM(ERROR))<SUB>2360</SUB>> ]
+"12509" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class::kDumpClassFullDetail)<SUB>2360</SUB>> ]
+"12515" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor() &lt;&lt; &quot;.&quot; &lt;&lt; name &lt;&lt; sig &lt;&lt; &quot; in &quot;)<SUB>2361</SUB>> ]
+"12532" [label = <(ToModifiedUtf8,c-&gt;GetDexCache()-&gt;GetLocation()-&gt;ToModifiedUtf8())<SUB>2364</SUB>> ]
+"12544" [label = <(Get,c.Get())<SUB>2365</SUB>> ]
+"12593" [label = <(VLOG,VLOG(jni))<SUB>2376</SUB>> ]
+"12597" [label = <(&lt;operator&gt;.indirectFieldAccess,m-&gt;PrettyMethod)<SUB>2376</SUB>> ]
+"12606" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;!bang JNI is deprecated. Switch to @FastNative for &quot;)<SUB>2385</SUB>> ]
+"12610" [label = <(PrettyMethod,m-&gt;PrettyMethod())<SUB>2385</SUB>> ]
+"12623" [label = <(FIELD_IDENTIFIER,RegisterNative,RegisterNative)<SUB>2390</SUB>> ]
+"12223" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2273</SUB>> ]
+"12225" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2273</SUB>> ]
+"12293" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2282</SUB>> ]
+"12295" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2282</SUB>> ]
+"12345" [label = <(&lt;operator&gt;.fieldAccess,c.Get)<SUB>2288</SUB>> ]
+"12355" [label = <(UNLIKELY,UNLIKELY(sig == nullptr))<SUB>2290</SUB>> ]
+"12413" [label = <(&lt;operator&gt;.indirectFieldAccess,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm)<SUB>2336</SUB>> ]
+"12422" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>2337</SUB>> ]
+"12429" [label = <(&lt;operator&gt;.fieldAccess,c.Get)<SUB>2337</SUB>> ]
+"12440" [label = <(FIELD_IDENTIFIER,GetSuperClass,GetSuperClass)<SUB>2339</SUB>> ]
+"12445" [label = <(&lt;operator&gt;.lessThan,FindMethod&lt;true)<SUB>2341</SUB>> ]
+"12448" [label = <(&lt;operator&gt;.bracketedPrimary,(current_class.Ptr(), name, sig))<SUB>2341</SUB>> ]
+"12465" [label = <(&lt;operator&gt;.lessThan,FindMethod&lt;false)<SUB>2347</SUB>> ]
+"12468" [label = <(&lt;operator&gt;.bracketedPrimary,(current_class.Ptr(), name, sig))<SUB>2347</SUB>> ]
+"12485" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;CheckJNI: method to register \&quot;&quot; &lt;&lt; name &lt;&lt; &quot;\&quot; not in the given class. &quot;\012 &lt;&lt; &quot;This is slow, consider changing your RegisterNatives calls.&quot;)<SUB>2353</SUB>> ]
+"12495" [label = <(&lt;operator&gt;.assignment,warn_on_going_to_parent = false)<SUB>2355</SUB>> ]
+"12506" [label = <(FIELD_IDENTIFIER,DumpClass,DumpClass)<SUB>2360</SUB>> ]
+"12510" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2360</SUB>> ]
+"12513" [label = <(FIELD_IDENTIFIER,kDumpClassFullDetail,kDumpClassFullDetail)<SUB>2360</SUB>> ]
+"12516" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor() &lt;&lt; &quot;.&quot; &lt;&lt; name &lt;&lt; sig)<SUB>2361</SUB>> ]
+"12533" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;GetDexCache()-&gt;GetLocation()-&gt;ToModifiedUtf8)<SUB>2364</SUB>> ]
+"12545" [label = <(&lt;operator&gt;.fieldAccess,c.Get)<SUB>2365</SUB>> ]
+"12556" [label = <(&lt;operator&gt;.logicalNot,!m-&gt;IsNative())<SUB>2367</SUB>> ]
+"12599" [label = <(FIELD_IDENTIFIER,PrettyMethod,PrettyMethod)<SUB>2376</SUB>> ]
+"12607" [label = <(LOG,LOG(WARNING))<SUB>2385</SUB>> ]
+"12611" [label = <(&lt;operator&gt;.indirectFieldAccess,m-&gt;PrettyMethod)<SUB>2385</SUB>> ]
+"12347" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>2288</SUB>> ]
+"12356" [label = <(&lt;operator&gt;.equals,sig == nullptr)<SUB>2290</SUB>> ]
+"12360" [label = <(ReportInvalidJNINativeMethod,ReportInvalidJNINativeMethod(soa, c.Get(), &quot;method signature&quot;, i))<SUB>2291</SUB>> ]
+"12368" [label = <(RETURN,return JNI_ERR;,return JNI_ERR;)<SUB>2292</SUB>> ]
+"12414" [label = <(down_cast&lt;JNIEnvExt*&gt;,down_cast&lt;JNIEnvExt*&gt;(env))<SUB>2336</SUB>> ]
+"12416" [label = <(FIELD_IDENTIFIER,GetVm,GetVm)<SUB>2336</SUB>> ]
+"12424" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2337</SUB>> ]
+"12431" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>2337</SUB>> ]
+"12449" [label = <(&lt;operator&gt;.expressionList,current_class.Ptr(), name, sig)<SUB>2341</SUB>> ]
+"12469" [label = <(&lt;operator&gt;.expressionList,current_class.Ptr(), name, sig)<SUB>2347</SUB>> ]
+"12486" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;CheckJNI: method to register \&quot;&quot; &lt;&lt; name &lt;&lt; &quot;\&quot; not in the given class. &quot;)<SUB>2353</SUB>> ]
+"12517" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor() &lt;&lt; &quot;.&quot; &lt;&lt; name)<SUB>2361</SUB>> ]
+"12534" [label = <(GetLocation,c-&gt;GetDexCache()-&gt;GetLocation())<SUB>2364</SUB>> ]
+"12541" [label = <(FIELD_IDENTIFIER,ToModifiedUtf8,ToModifiedUtf8)<SUB>2364</SUB>> ]
+"12547" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>2365</SUB>> ]
+"12557" [label = <(IsNative,m-&gt;IsNative())<SUB>2367</SUB>> ]
+"12562" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register non-native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor() &lt;&lt; &quot;.&quot; &lt;&lt; name &lt;&lt; sig\012 &lt;&lt; &quot; as native&quot;)<SUB>2368</SUB>> ]
+"12579" [label = <(ThrowNoSuchMethodError,ThrowNoSuchMethodError(soa, c.Get(), name, sig, &quot;native&quot;))<SUB>2372</SUB>> ]
+"12588" [label = <(RETURN,return JNI_ERR;,return JNI_ERR;)<SUB>2373</SUB>> ]
+"12613" [label = <(FIELD_IDENTIFIER,PrettyMethod,PrettyMethod)<SUB>2385</SUB>> ]
+"12362" [label = <(Get,c.Get())<SUB>2291</SUB>> ]
+"12426" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>2337</SUB>> ]
+"12450" [label = <(Ptr,current_class.Ptr())<SUB>2341</SUB>> ]
+"12470" [label = <(Ptr,current_class.Ptr())<SUB>2347</SUB>> ]
+"12487" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;CheckJNI: method to register \&quot;&quot; &lt;&lt; name)<SUB>2353</SUB>> ]
+"12518" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor() &lt;&lt; &quot;.&quot;)<SUB>2361</SUB>> ]
+"12535" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;GetDexCache()-&gt;GetLocation)<SUB>2364</SUB>> ]
+"12558" [label = <(&lt;operator&gt;.indirectFieldAccess,m-&gt;IsNative)<SUB>2367</SUB>> ]
+"12563" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register non-native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor() &lt;&lt; &quot;.&quot; &lt;&lt; name &lt;&lt; sig)<SUB>2368</SUB>> ]
+"12581" [label = <(Get,c.Get())<SUB>2372</SUB>> ]
+"12363" [label = <(&lt;operator&gt;.fieldAccess,c.Get)<SUB>2291</SUB>> ]
+"12373" [label = <(UNLIKELY,UNLIKELY(fnPtr == nullptr))<SUB>2293</SUB>> ]
+"12451" [label = <(&lt;operator&gt;.fieldAccess,current_class.Ptr)<SUB>2341</SUB>> ]
+"12471" [label = <(&lt;operator&gt;.fieldAccess,current_class.Ptr)<SUB>2347</SUB>> ]
+"12488" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;CheckJNI: method to register \&quot;&quot;)<SUB>2353</SUB>> ]
+"12519" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor())<SUB>2361</SUB>> ]
+"12536" [label = <(GetDexCache,c-&gt;GetDexCache())<SUB>2364</SUB>> ]
+"12540" [label = <(FIELD_IDENTIFIER,GetLocation,GetLocation)<SUB>2364</SUB>> ]
+"12560" [label = <(FIELD_IDENTIFIER,IsNative,IsNative)<SUB>2367</SUB>> ]
+"12564" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register non-native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor() &lt;&lt; &quot;.&quot; &lt;&lt; name)<SUB>2368</SUB>> ]
+"12582" [label = <(&lt;operator&gt;.fieldAccess,c.Get)<SUB>2372</SUB>> ]
+"12365" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>2291</SUB>> ]
+"12374" [label = <(&lt;operator&gt;.equals,fnPtr == nullptr)<SUB>2293</SUB>> ]
+"12378" [label = <(ReportInvalidJNINativeMethod,ReportInvalidJNINativeMethod(soa, c.Get(), &quot;native function&quot;, i))<SUB>2294</SUB>> ]
+"12386" [label = <(RETURN,return JNI_ERR;,return JNI_ERR;)<SUB>2295</SUB>> ]
+"12453" [label = <(FIELD_IDENTIFIER,Ptr,Ptr)<SUB>2341</SUB>> ]
+"12473" [label = <(FIELD_IDENTIFIER,Ptr,Ptr)<SUB>2347</SUB>> ]
+"12489" [label = <(LOG,LOG(WARNING))<SUB>2353</SUB>> ]
+"12520" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register native method &quot;)<SUB>2361</SUB>> ]
+"12524" [label = <(PrettyDescriptor,c-&gt;PrettyDescriptor())<SUB>2363</SUB>> ]
+"12537" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;GetDexCache)<SUB>2364</SUB>> ]
+"12565" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register non-native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor() &lt;&lt; &quot;.&quot;)<SUB>2368</SUB>> ]
+"12584" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>2372</SUB>> ]
+"12380" [label = <(Get,c.Get())<SUB>2294</SUB>> ]
+"12521" [label = <(LOG,LOG(ERROR))<SUB>2361</SUB>> ]
+"12525" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;PrettyDescriptor)<SUB>2363</SUB>> ]
+"12539" [label = <(FIELD_IDENTIFIER,GetDexCache,GetDexCache)<SUB>2364</SUB>> ]
+"12566" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register non-native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor())<SUB>2368</SUB>> ]
+"12381" [label = <(&lt;operator&gt;.fieldAccess,c.Get)<SUB>2294</SUB>> ]
+"12527" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>2363</SUB>> ]
+"12567" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register non-native method &quot;)<SUB>2368</SUB>> ]
+"12571" [label = <(PrettyDescriptor,c-&gt;PrettyDescriptor())<SUB>2370</SUB>> ]
+"12383" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>2294</SUB>> ]
+"12568" [label = <(LOG,LOG(ERROR))<SUB>2368</SUB>> ]
+"12572" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;PrettyDescriptor)<SUB>2370</SUB>> ]
+"12574" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>2370</SUB>> ]
+"12188" [label = <(METHOD,RegisterNatives)<SUB>2264</SUB>> ]
+"12629" [label = <(METHOD_RETURN,jint)<SUB>2264</SUB>> ]
+  "12210" -> "12217" 
+  "12210" -> "12231" 
+  "12231" -> "12234" 
+  "12233" -> "12248" 
+  "12242" -> "12265" 
+  "12280" -> "12287" 
+  "12280" -> "12303" 
+  "12627" -> "12629" 
+  "12195" -> "12202" 
+  "12195" -> "12210" 
+  "12234" -> "12241" 
+  "12237" -> "12233" 
+  "12243" -> "12253" 
+  "12250" -> "12242" 
+  "12264" -> "12271" 
+  "12264" -> "12280" 
+  "12306" -> "12316" 
+  "12306" -> "12627" 
+  "12309" -> "12306" 
+  "12196" -> "12195" 
+  "12200" -> "12208" 
+  "12208" -> "12629" 
+  "12238" -> "12237" 
+  "12244" -> "12243" 
+  "12251" -> "12258" 
+  "12254" -> "12250" 
+  "12265" -> "12264" 
+  "12269" -> "12278" 
+  "12278" -> "12629" 
+  "12303" -> "12306" 
+  "12313" -> "12324" 
+  "12321" -> "12332" 
+  "12329" -> "12338" 
+  "12389" -> "12394" 
+  "12404" -> "12414" 
+  "12408" -> "12426" 
+  "12590" -> "12602" 
+  "12618" -> "12625" 
+  "12625" -> "12309" 
+  "12201" -> "12200" 
+  "12216" -> "12223" 
+  "12216" -> "12231" 
+  "12239" -> "12238" 
+  "12246" -> "12244" 
+  "12253" -> "12251" 
+  "12255" -> "12254" 
+  "12270" -> "12277" 
+  "12274" -> "12269" 
+  "12286" -> "12293" 
+  "12286" -> "12303" 
+  "12315" -> "12313" 
+  "12323" -> "12321" 
+  "12331" -> "12329" 
+  "12337" -> "12347" 
+  "12337" -> "12356" 
+  "12393" -> "12398" 
+  "12393" -> "12404" 
+  "12410" -> "12408" 
+  "12432" -> "12445" 
+  "12432" -> "12499" 
+  "12435" -> "12432" 
+  "12499" -> "12506" 
+  "12499" -> "12560" 
+  "12591" -> "12590" 
+  "12602" -> "12607" 
+  "12602" -> "12623" 
+  "12620" -> "12618" 
+  "12202" -> "12204" 
+  "12204" -> "12201" 
+  "12217" -> "12216" 
+  "12221" -> "12228" 
+  "12228" -> "12629" 
+  "12241" -> "12239" 
+  "12248" -> "12246" 
+  "12256" -> "12261" 
+  "12259" -> "12255" 
+  "12271" -> "12270" 
+  "12275" -> "12274" 
+  "12287" -> "12286" 
+  "12291" -> "12298" 
+  "12298" -> "12629" 
+  "12316" -> "12319" 
+  "12319" -> "12315" 
+  "12324" -> "12327" 
+  "12327" -> "12323" 
+  "12332" -> "12335" 
+  "12335" -> "12331" 
+  "12338" -> "12337" 
+  "12342" -> "12350" 
+  "12350" -> "12629" 
+  "12394" -> "12393" 
+  "12398" -> "12401" 
+  "12401" -> "12404" 
+  "12411" -> "12410" 
+  "12420" -> "12432" 
+  "12437" -> "12435" 
+  "12442" -> "12457" 
+  "12462" -> "12477" 
+  "12503" -> "12521" 
+  "12514" -> "12547" 
+  "12542" -> "12551" 
+  "12551" -> "12629" 
+  "12592" -> "12599" 
+  "12596" -> "12591" 
+  "12605" -> "12614" 
+  "12614" -> "12623" 
+  "12621" -> "12620" 
+  "12222" -> "12221" 
+  "12258" -> "12256" 
+  "12261" -> "12259" 
+  "12277" -> "12275" 
+  "12292" -> "12291" 
+  "12344" -> "12342" 
+  "12412" -> "12417" 
+  "12417" -> "12411" 
+  "12421" -> "12431" 
+  "12428" -> "12420" 
+  "12438" -> "12437" 
+  "12444" -> "12442" 
+  "12457" -> "12499" 
+  "12457" -> "12465" 
+  "12464" -> "12462" 
+  "12477" -> "12499" 
+  "12477" -> "12489" 
+  "12477" -> "12440" 
+  "12504" -> "12507" 
+  "12507" -> "12510" 
+  "12509" -> "12503" 
+  "12515" -> "12539" 
+  "12532" -> "12514" 
+  "12544" -> "12542" 
+  "12593" -> "12592" 
+  "12597" -> "12596" 
+  "12606" -> "12613" 
+  "12610" -> "12605" 
+  "12623" -> "12621" 
+  "12223" -> "12225" 
+  "12225" -> "12222" 
+  "12293" -> "12295" 
+  "12295" -> "12292" 
+  "12345" -> "12344" 
+  "12355" -> "12365" 
+  "12355" -> "12374" 
+  "12413" -> "12412" 
+  "12422" -> "12421" 
+  "12429" -> "12428" 
+  "12440" -> "12438" 
+  "12445" -> "12453" 
+  "12448" -> "12444" 
+  "12465" -> "12473" 
+  "12468" -> "12464" 
+  "12485" -> "12495" 
+  "12495" -> "12440" 
+  "12506" -> "12504" 
+  "12510" -> "12513" 
+  "12513" -> "12509" 
+  "12516" -> "12515" 
+  "12533" -> "12532" 
+  "12545" -> "12544" 
+  "12556" -> "12568" 
+  "12556" -> "12593" 
+  "12599" -> "12597" 
+  "12607" -> "12606" 
+  "12611" -> "12610" 
+  "12347" -> "12345" 
+  "12356" -> "12355" 
+  "12360" -> "12368" 
+  "12368" -> "12629" 
+  "12414" -> "12416" 
+  "12416" -> "12413" 
+  "12424" -> "12422" 
+  "12431" -> "12429" 
+  "12449" -> "12448" 
+  "12469" -> "12468" 
+  "12486" -> "12485" 
+  "12517" -> "12516" 
+  "12534" -> "12541" 
+  "12541" -> "12533" 
+  "12547" -> "12545" 
+  "12557" -> "12556" 
+  "12562" -> "12584" 
+  "12579" -> "12588" 
+  "12588" -> "12629" 
+  "12613" -> "12611" 
+  "12362" -> "12360" 
+  "12426" -> "12424" 
+  "12450" -> "12449" 
+  "12470" -> "12469" 
+  "12487" -> "12486" 
+  "12518" -> "12517" 
+  "12535" -> "12534" 
+  "12558" -> "12557" 
+  "12563" -> "12562" 
+  "12581" -> "12579" 
+  "12363" -> "12362" 
+  "12373" -> "12383" 
+  "12373" -> "12389" 
+  "12451" -> "12450" 
+  "12471" -> "12470" 
+  "12488" -> "12487" 
+  "12519" -> "12518" 
+  "12536" -> "12540" 
+  "12540" -> "12535" 
+  "12560" -> "12558" 
+  "12564" -> "12563" 
+  "12582" -> "12581" 
+  "12365" -> "12363" 
+  "12374" -> "12373" 
+  "12378" -> "12386" 
+  "12386" -> "12629" 
+  "12453" -> "12451" 
+  "12473" -> "12471" 
+  "12489" -> "12488" 
+  "12520" -> "12527" 
+  "12524" -> "12519" 
+  "12537" -> "12536" 
+  "12565" -> "12564" 
+  "12584" -> "12582" 
+  "12380" -> "12378" 
+  "12521" -> "12520" 
+  "12525" -> "12524" 
+  "12539" -> "12537" 
+  "12566" -> "12565" 
+  "12381" -> "12380" 
+  "12527" -> "12525" 
+  "12567" -> "12574" 
+  "12571" -> "12566" 
+  "12383" -> "12381" 
+  "12568" -> "12567" 
+  "12572" -> "12571" 
+  "12574" -> "12572" 
+  "12188" -> "12196" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/242-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/242-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/242-cfg.dot	2023-06-07 19:33:45.507394679 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/242-cfg.dot	2023-06-07 19:33:52.087393978 +0330
@@ -1,7 +1,123 @@
-digraph "SetIntArrayRegion" {  
-"12509" [label = <(SetPrimitiveArrayRegion&lt;jintArray,jint,mirror::IntArray&gt;,SetPrimitiveArrayRegion&lt;jintArray, jint, mirror::IntArray&gt;(env, array, start, length, buf))<SUB>2390</SUB>> ]
-"12502" [label = <(METHOD,SetIntArrayRegion)<SUB>2388</SUB>> ]
-"12515" [label = <(METHOD_RETURN,void)<SUB>2388</SUB>> ]
-  "12509" -> "12515" 
-  "12502" -> "12509" 
+digraph "UnregisterNatives" {  
+"12635" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_ERR))<SUB>2397</SUB>> ]
+"12655" [label = <(soa,soa(env))<SUB>2398</SUB>> ]
+"12657" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c = soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>2399</SUB>> ]
+"12674" [label = <(&lt;operator&gt;.shiftLeft,VLOG(jni) &lt;&lt; &quot;[Unregistering JNI native methods for &quot; &lt;&lt; mirror::Class::PrettyClass(c) &lt;&lt; &quot;]&quot;)<SUB>2401</SUB>> ]
+"12689" [label = <(&lt;operator&gt;.assignment,unregistered_count = 0)<SUB>2403</SUB>> ]
+"12693" [label = <(&lt;operator&gt;.assignment,pointer_size = Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize())<SUB>2404</SUB>> ]
+"12744" [label = <(RETURN,return JNI_OK;,return JNI_OK;)<SUB>2416</SUB>> ]
+"12658" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c)<SUB>2399</SUB>> ]
+"12665" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>2399</SUB>> ]
+"12675" [label = <(&lt;operator&gt;.shiftLeft,VLOG(jni) &lt;&lt; &quot;[Unregistering JNI native methods for &quot; &lt;&lt; mirror::Class::PrettyClass(c))<SUB>2401</SUB>> ]
+"12695" [label = <(GetImagePointerSize,Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize())<SUB>2404</SUB>> ]
+"12726" [label = <(&lt;operator&gt;.equals,unregistered_count == 0)<SUB>2412</SUB>> ]
+"12659" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>2399</SUB>> ]
+"12666" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>2399</SUB>> ]
+"12676" [label = <(&lt;operator&gt;.shiftLeft,VLOG(jni) &lt;&lt; &quot;[Unregistering JNI native methods for &quot;)<SUB>2401</SUB>> ]
+"12680" [label = <(mirror::Class::PrettyClass,mirror::Class::PrettyClass(c))<SUB>2401</SUB>> ]
+"12696" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize)<SUB>2404</SUB>> ]
+"12730" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI UnregisterNatives: attempt to unregister native methods of class '&quot;\012 &lt;&lt; mirror::Class::PrettyDescriptor(c) &lt;&lt; &quot;' that contains no native methods&quot;)<SUB>2413</SUB>> ]
+"12640" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>2397</SUB>> ]
+"12661" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2399</SUB>> ]
+"12667" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2399</SUB>> ]
+"12670" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2399</SUB>> ]
+"12677" [label = <(VLOG,VLOG(jni))<SUB>2401</SUB>> ]
+"12681" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class::PrettyClass)<SUB>2401</SUB>> ]
+"12697" [label = <(GetClassLinker,Runtime::Current()-&gt;GetClassLinker())<SUB>2404</SUB>> ]
+"12704" [label = <(FIELD_IDENTIFIER,GetImagePointerSize,GetImagePointerSize)<SUB>2404</SUB>> ]
+"12714" [label = <(IsNative,m.IsNative())<SUB>2406</SUB>> ]
+"12731" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI UnregisterNatives: attempt to unregister native methods of class '&quot;\012 &lt;&lt; mirror::Class::PrettyDescriptor(c))<SUB>2413</SUB>> ]
+"12641" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>2397</SUB>> ]
+"12645" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_ERR),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class == null&quot;))<SUB>2397</SUB>> ]
+"12652" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_ERR),CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_ERR))<SUB>2397</SUB>> ]
+"12663" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>2399</SUB>> ]
+"12669" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2399</SUB>> ]
+"12672" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>2399</SUB>> ]
+"12682" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2401</SUB>> ]
+"12685" [label = <(FIELD_IDENTIFIER,PrettyClass,PrettyClass)<SUB>2401</SUB>> ]
+"12698" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetClassLinker)<SUB>2404</SUB>> ]
+"12715" [label = <(&lt;operator&gt;.fieldAccess,m.IsNative)<SUB>2406</SUB>> ]
+"12719" [label = <(UnregisterNative,m.UnregisterNative())<SUB>2407</SUB>> ]
+"12723" [label = <(&lt;operator&gt;.postIncrement,unregistered_count++)<SUB>2408</SUB>> ]
+"12732" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI UnregisterNatives: attempt to unregister native methods of class '&quot;)<SUB>2413</SUB>> ]
+"12736" [label = <(mirror::Class::PrettyDescriptor,mirror::Class::PrettyDescriptor(c))<SUB>2414</SUB>> ]
+"12646" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2397</SUB>> ]
+"12699" [label = <(Runtime::Current,Runtime::Current())<SUB>2404</SUB>> ]
+"12703" [label = <(FIELD_IDENTIFIER,GetClassLinker,GetClassLinker)<SUB>2404</SUB>> ]
+"12717" [label = <(FIELD_IDENTIFIER,IsNative,IsNative)<SUB>2406</SUB>> ]
+"12720" [label = <(&lt;operator&gt;.fieldAccess,m.UnregisterNative)<SUB>2407</SUB>> ]
+"12733" [label = <(LOG,LOG(WARNING))<SUB>2413</SUB>> ]
+"12737" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class::PrettyDescriptor)<SUB>2414</SUB>> ]
+"12647" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2397</SUB>> ]
+"12649" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2397</SUB>> ]
+"12700" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>2404</SUB>> ]
+"12722" [label = <(FIELD_IDENTIFIER,UnregisterNative,UnregisterNative)<SUB>2407</SUB>> ]
+"12738" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2414</SUB>> ]
+"12741" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>2414</SUB>> ]
+"12702" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>2404</SUB>> ]
+"12631" [label = <(METHOD,UnregisterNatives)<SUB>2396</SUB>> ]
+"12746" [label = <(METHOD_RETURN,jint)<SUB>2396</SUB>> ]
+  "12635" -> "12641" 
+  "12635" -> "12655" 
+  "12655" -> "12663" 
+  "12657" -> "12677" 
+  "12674" -> "12689" 
+  "12689" -> "12702" 
+  "12693" -> "12717" 
+  "12744" -> "12746" 
+  "12658" -> "12669" 
+  "12665" -> "12657" 
+  "12675" -> "12674" 
+  "12695" -> "12693" 
+  "12726" -> "12733" 
+  "12726" -> "12744" 
+  "12659" -> "12658" 
+  "12666" -> "12665" 
+  "12676" -> "12682" 
+  "12680" -> "12675" 
+  "12696" -> "12695" 
+  "12730" -> "12744" 
+  "12640" -> "12647" 
+  "12640" -> "12655" 
+  "12661" -> "12659" 
+  "12667" -> "12672" 
+  "12670" -> "12666" 
+  "12677" -> "12676" 
+  "12681" -> "12680" 
+  "12697" -> "12704" 
+  "12704" -> "12696" 
+  "12714" -> "12717" 
+  "12714" -> "12722" 
+  "12714" -> "12726" 
+  "12731" -> "12730" 
+  "12641" -> "12640" 
+  "12645" -> "12652" 
+  "12652" -> "12746" 
+  "12663" -> "12661" 
+  "12669" -> "12667" 
+  "12672" -> "12670" 
+  "12682" -> "12685" 
+  "12685" -> "12681" 
+  "12698" -> "12697" 
+  "12715" -> "12714" 
+  "12719" -> "12723" 
+  "12723" -> "12717" 
+  "12723" -> "12726" 
+  "12732" -> "12738" 
+  "12736" -> "12731" 
+  "12646" -> "12645" 
+  "12699" -> "12703" 
+  "12703" -> "12698" 
+  "12717" -> "12715" 
+  "12720" -> "12719" 
+  "12733" -> "12732" 
+  "12737" -> "12736" 
+  "12647" -> "12649" 
+  "12649" -> "12646" 
+  "12700" -> "12699" 
+  "12722" -> "12720" 
+  "12738" -> "12741" 
+  "12741" -> "12737" 
+  "12702" -> "12700" 
+  "12631" -> "12635" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/243-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/243-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/243-cfg.dot	2023-06-07 19:33:45.507394679 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/243-cfg.dot	2023-06-07 19:33:52.087393978 +0330
@@ -1,7 +1,5 @@
-digraph "SetLongArrayRegion" {  
-"12524" [label = <(SetPrimitiveArrayRegion&lt;jlongArray,jlong,mirror::LongArray&gt;,SetPrimitiveArrayRegion&lt;jlongArray, jlong, mirror::LongArray&gt;(env, array, start, length, buf))<SUB>2395</SUB>> ]
-"12517" [label = <(METHOD,SetLongArrayRegion)<SUB>2393</SUB>> ]
-"12530" [label = <(METHOD_RETURN,void)<SUB>2393</SUB>> ]
-  "12524" -> "12530" 
-  "12517" -> "12524" 
+digraph "MonitorEnter" {  
+"12748" [label = <(METHOD,MonitorEnter)<SUB>2419</SUB>> ]
+"12752" [label = <(METHOD_RETURN,jint)<SUB>2419</SUB>> ]
+  "12748" -> "12752" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/244-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/244-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/244-cfg.dot	2023-06-07 19:33:45.507394679 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/244-cfg.dot	2023-06-07 19:33:52.087393978 +0330
@@ -1,7 +1,5 @@
-digraph "SetShortArrayRegion" {  
-"12539" [label = <(SetPrimitiveArrayRegion&lt;jshortArray,jshort,mirror::ShortArray&gt;,SetPrimitiveArrayRegion&lt;jshortArray, jshort, mirror::ShortArray&gt;(env, array, start, length,\012                                                                     buf))<SUB>2400</SUB>> ]
-"12532" [label = <(METHOD,SetShortArrayRegion)<SUB>2398</SUB>> ]
-"12545" [label = <(METHOD_RETURN,void)<SUB>2398</SUB>> ]
-  "12539" -> "12545" 
-  "12532" -> "12539" 
+digraph "MonitorExit" {  
+"12756" [label = <(METHOD,MonitorExit)<SUB>2433</SUB>> ]
+"12760" [label = <(METHOD_RETURN,jint)<SUB>2433</SUB>> ]
+  "12756" -> "12760" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/245-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/245-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/245-cfg.dot	2023-06-07 19:33:45.507394679 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/245-cfg.dot	2023-06-07 19:33:52.087393978 +0330
@@ -1,449 +1,56 @@
-digraph "RegisterNatives" {  
-"12569" [label = <(CHECK_NON_NULL_ARGUMENT_FN_NAME,CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, java_class, JNI_ERR))<SUB>2413</SUB>> ]
-"12590" [label = <(soa,soa(env))<SUB>2414</SUB>> ]
-"12592" [label = <(&lt;operator&gt;.greaterThan,StackHandleScope&lt;1&gt; hs(soa.Self()))<SUB>2415</SUB>> ]
-"12601" [label = <(&lt;operator&gt;.assignment,Handle&lt;mirror::Class&gt; c = hs.NewHandle(soa.Decode&lt;mirror::Class&gt;(java_class)))<SUB>2416</SUB>> ]
-"12639" [label = <(CHECK_NON_NULL_ARGUMENT_FN_NAME,CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, methods, JNI_ERR))<SUB>2422</SUB>> ]
-"12986" [label = <(RETURN,return JNI_OK;,return JNI_OK;)<SUB>2533</SUB>> ]
-"12554" [label = <(UNLIKELY,UNLIKELY(method_count &lt; 0))<SUB>2408</SUB>> ]
-"12593" [label = <(&lt;operator&gt;.lessThan,StackHandleScope&lt;1)<SUB>2415</SUB>> ]
-"12596" [label = <(hs,hs(soa.Self()))<SUB>2415</SUB>> ]
-"12602" [label = <(&lt;operator&gt;.greaterThan,Handle&lt;mirror::Class&gt; c)<SUB>2416</SUB>> ]
-"12609" [label = <(NewHandle,hs.NewHandle(soa.Decode&lt;mirror::Class&gt;(java_class)))<SUB>2416</SUB>> ]
-"12623" [label = <(UNLIKELY,UNLIKELY(method_count == 0))<SUB>2417</SUB>> ]
-"12665" [label = <(&lt;operator&gt;.lessThan,i &lt; method_count)<SUB>2423</SUB>> ]
-"12668" [label = <(&lt;operator&gt;.preIncrement,++i)<SUB>2423</SUB>> ]
-"12555" [label = <(&lt;operator&gt;.lessThan,method_count &lt; 0)<SUB>2408</SUB>> ]
-"12559" [label = <(JniAbortF,JavaVmExtFromEnv(env)-&gt;JniAbortF(&quot;RegisterNatives&quot;, &quot;negative method count: %d&quot;,\012                                       method_count))<SUB>2409</SUB>> ]
-"12567" [label = <(RETURN,return JNI_ERR;,return JNI_ERR;)<SUB>2411</SUB>> ]
-"12597" [label = <(Self,soa.Self())<SUB>2415</SUB>> ]
-"12603" [label = <(&lt;operator&gt;.lessThan,Handle&lt;mirror::Class)<SUB>2416</SUB>> ]
-"12610" [label = <(&lt;operator&gt;.fieldAccess,hs.NewHandle)<SUB>2416</SUB>> ]
-"12613" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>2416</SUB>> ]
-"12624" [label = <(&lt;operator&gt;.equals,method_count == 0)<SUB>2417</SUB>> ]
-"12628" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI RegisterNativeMethods: attempt to register 0 native methods for &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor())<SUB>2418</SUB>> ]
-"12637" [label = <(RETURN,return JNI_OK;,return JNI_OK;)<SUB>2420</SUB>> ]
-"12662" [label = <(&lt;operator&gt;.assignment,i = 0)<SUB>2423</SUB>> ]
-"12672" [label = <(&lt;operator&gt;.assignment,* name = methods[i].name)<SUB>2424</SUB>> ]
-"12680" [label = <(&lt;operator&gt;.assignment,* sig = methods[i].signature)<SUB>2425</SUB>> ]
-"12688" [label = <(&lt;operator&gt;.assignment,* fnPtr = methods[i].fnPtr)<SUB>2426</SUB>> ]
-"12748" [label = <(&lt;operator&gt;.assignment,is_fast = false)<SUB>2437</SUB>> ]
-"12763" [label = <(&lt;operator&gt;.assignment,* m = nullptr)<SUB>2475</SUB>> ]
-"12767" [label = <(&lt;operator&gt;.assignment,warn_on_going_to_parent = down_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm()-&gt;IsCheckJniEnabled())<SUB>2476</SUB>> ]
-"12949" [label = <(&lt;operator&gt;.shiftLeft,VLOG(jni) &lt;&lt; &quot;[Registering JNI native method &quot; &lt;&lt; m-&gt;PrettyMethod() &lt;&lt; &quot;]&quot;)<SUB>2516</SUB>> ]
-"12977" [label = <(&lt;operator&gt;.assignment,* final_function_ptr = m-&gt;RegisterNative(fnPtr))<SUB>2530</SUB>> ]
-"12984" [label = <(UNUSED,UNUSED(final_function_ptr))<SUB>2531</SUB>> ]
-"12560" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>2409</SUB>> ]
-"12575" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>2413</SUB>> ]
-"12598" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>2415</SUB>> ]
-"12605" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2416</SUB>> ]
-"12612" [label = <(FIELD_IDENTIFIER,NewHandle,NewHandle)<SUB>2416</SUB>> ]
-"12614" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>2416</SUB>> ]
-"12629" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI RegisterNativeMethods: attempt to register 0 native methods for &quot;)<SUB>2418</SUB>> ]
-"12633" [label = <(PrettyDescriptor,c-&gt;PrettyDescriptor())<SUB>2419</SUB>> ]
-"12645" [label = <(UNLIKELY,UNLIKELY((methods) == nullptr))<SUB>2422</SUB>> ]
-"12674" [label = <(&lt;operator&gt;.fieldAccess,methods[i].name)<SUB>2424</SUB>> ]
-"12682" [label = <(&lt;operator&gt;.fieldAccess,methods[i].signature)<SUB>2425</SUB>> ]
-"12690" [label = <(&lt;operator&gt;.fieldAccess,methods[i].fnPtr)<SUB>2426</SUB>> ]
-"12696" [label = <(UNLIKELY,UNLIKELY(name == nullptr))<SUB>2427</SUB>> ]
-"12752" [label = <(&lt;operator&gt;.equals,*sig == '!')<SUB>2467</SUB>> ]
-"12769" [label = <(IsCheckJniEnabled,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm()-&gt;IsCheckJniEnabled())<SUB>2476</SUB>> ]
-"12791" [label = <(&lt;operator&gt;.notEquals,current_class != nullptr)<SUB>2478</SUB>> ]
-"12794" [label = <(&lt;operator&gt;.assignment,current_class = current_class-&gt;GetSuperClass())<SUB>2479</SUB>> ]
-"12858" [label = <(&lt;operator&gt;.equals,m == nullptr)<SUB>2499</SUB>> ]
-"12950" [label = <(&lt;operator&gt;.shiftLeft,VLOG(jni) &lt;&lt; &quot;[Registering JNI native method &quot; &lt;&lt; m-&gt;PrettyMethod())<SUB>2516</SUB>> ]
-"12961" [label = <(UNLIKELY,UNLIKELY(is_fast))<SUB>2518</SUB>> ]
-"12979" [label = <(RegisterNative,m-&gt;RegisterNative(fnPtr))<SUB>2530</SUB>> ]
-"12561" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2409</SUB>> ]
-"12563" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2409</SUB>> ]
-"12576" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>2413</SUB>> ]
-"12580" [label = <(CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, java_class, JNI_ERR),JavaVmExtFromEnv(env)-&gt;JniAbort(&quot;RegisterNatives&quot;, &quot;java_class == null&quot;))<SUB>2413</SUB>> ]
-"12587" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, java_class, JNI_ERR),CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, java_class, JNI_ERR))<SUB>2413</SUB>> ]
-"12600" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>2415</SUB>> ]
-"12607" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>2416</SUB>> ]
-"12615" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2416</SUB>> ]
-"12618" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2416</SUB>> ]
-"12630" [label = <(LOG,LOG(WARNING))<SUB>2418</SUB>> ]
-"12634" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;PrettyDescriptor)<SUB>2419</SUB>> ]
-"12646" [label = <(&lt;operator&gt;.equals,(methods) == nullptr)<SUB>2422</SUB>> ]
-"12650" [label = <(CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, methods, JNI_ERR),JavaVmExtFromEnv(env)-&gt;JniAbort(&quot;RegisterNatives&quot;, &quot;methods == null&quot;))<SUB>2422</SUB>> ]
-"12657" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, methods, JNI_ERR),CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, methods, JNI_ERR))<SUB>2422</SUB>> ]
-"12675" [label = <(&lt;operator&gt;.indirectIndexAccess,methods[i])<SUB>2424</SUB>> ]
-"12678" [label = <(FIELD_IDENTIFIER,name,name)<SUB>2424</SUB>> ]
-"12683" [label = <(&lt;operator&gt;.indirectIndexAccess,methods[i])<SUB>2425</SUB>> ]
-"12686" [label = <(FIELD_IDENTIFIER,signature,signature)<SUB>2425</SUB>> ]
-"12691" [label = <(&lt;operator&gt;.indirectIndexAccess,methods[i])<SUB>2426</SUB>> ]
-"12694" [label = <(FIELD_IDENTIFIER,fnPtr,fnPtr)<SUB>2426</SUB>> ]
-"12697" [label = <(&lt;operator&gt;.equals,name == nullptr)<SUB>2427</SUB>> ]
-"12701" [label = <(ReportInvalidJNINativeMethod,ReportInvalidJNINativeMethod(soa, c.Get(), &quot;method name&quot;, i))<SUB>2428</SUB>> ]
-"12709" [label = <(RETURN,return JNI_ERR;,return JNI_ERR;)<SUB>2429</SUB>> ]
-"12753" [label = <(&lt;operator&gt;.indirection,*sig)<SUB>2467</SUB>> ]
-"12757" [label = <(&lt;operator&gt;.assignment,is_fast = true)<SUB>2468</SUB>> ]
-"12760" [label = <(&lt;operator&gt;.preIncrement,++sig)<SUB>2469</SUB>> ]
-"12770" [label = <(&lt;operator&gt;.indirectFieldAccess,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm()-&gt;IsCheckJniEnabled)<SUB>2476</SUB>> ]
-"12779" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; current_class = c.Get())<SUB>2477</SUB>> ]
-"12796" [label = <(GetSuperClass,current_class-&gt;GetSuperClass())<SUB>2479</SUB>> ]
-"12801" [label = <(&lt;operator&gt;.assignment,m = FindMethod&lt;true&gt;(current_class.Ptr(), name, sig))<SUB>2481</SUB>> ]
-"12821" [label = <(&lt;operator&gt;.assignment,m = FindMethod&lt;false&gt;(current_class.Ptr(), name, sig))<SUB>2487</SUB>> ]
-"12862" [label = <(DumpClass,c-&gt;DumpClass(LOG_STREAM(ERROR), mirror::Class::kDumpClassFullDetail))<SUB>2500</SUB>> ]
-"12873" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor() &lt;&lt; &quot;.&quot; &lt;&lt; name &lt;&lt; sig &lt;&lt; &quot; in &quot;\012 &lt;&lt; c-&gt;GetDexCache()-&gt;GetLocation()-&gt;ToModifiedUtf8())<SUB>2501</SUB>> ]
-"12901" [label = <(ThrowNoSuchMethodError,ThrowNoSuchMethodError(soa, c.Get(), name, sig, &quot;static or non-static&quot;))<SUB>2505</SUB>> ]
-"12910" [label = <(RETURN,return JNI_ERR;,return JNI_ERR;)<SUB>2506</SUB>> ]
-"12951" [label = <(&lt;operator&gt;.shiftLeft,VLOG(jni) &lt;&lt; &quot;[Registering JNI native method &quot;)<SUB>2516</SUB>> ]
-"12955" [label = <(PrettyMethod,m-&gt;PrettyMethod())<SUB>2516</SUB>> ]
-"12964" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;!bang JNI is deprecated. Switch to @FastNative for &quot; &lt;&lt; m-&gt;PrettyMethod())<SUB>2525</SUB>> ]
-"12973" [label = <(&lt;operator&gt;.assignment,is_fast = false)<SUB>2526</SUB>> ]
-"12980" [label = <(&lt;operator&gt;.indirectFieldAccess,m-&gt;RegisterNative)<SUB>2530</SUB>> ]
-"12581" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2413</SUB>> ]
-"12617" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2416</SUB>> ]
-"12620" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>2416</SUB>> ]
-"12636" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>2419</SUB>> ]
-"12651" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2422</SUB>> ]
-"12703" [label = <(Get,c.Get())<SUB>2428</SUB>> ]
-"12771" [label = <(GetVm,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm())<SUB>2476</SUB>> ]
-"12776" [label = <(FIELD_IDENTIFIER,IsCheckJniEnabled,IsCheckJniEnabled)<SUB>2476</SUB>> ]
-"12780" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; current_class)<SUB>2477</SUB>> ]
-"12787" [label = <(Get,c.Get())<SUB>2477</SUB>> ]
-"12797" [label = <(&lt;operator&gt;.indirectFieldAccess,current_class-&gt;GetSuperClass)<SUB>2479</SUB>> ]
-"12803" [label = <(&lt;operator&gt;.greaterThan,FindMethod&lt;true&gt;(current_class.Ptr(), name, sig))<SUB>2481</SUB>> ]
-"12816" [label = <(&lt;operator&gt;.notEquals,m != nullptr)<SUB>2482</SUB>> ]
-"12823" [label = <(&lt;operator&gt;.greaterThan,FindMethod&lt;false&gt;(current_class.Ptr(), name, sig))<SUB>2487</SUB>> ]
-"12836" [label = <(&lt;operator&gt;.notEquals,m != nullptr)<SUB>2488</SUB>> ]
-"12863" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;DumpClass)<SUB>2500</SUB>> ]
-"12866" [label = <(LOG_STREAM,LOG_STREAM(ERROR))<SUB>2500</SUB>> ]
-"12868" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class::kDumpClassFullDetail)<SUB>2500</SUB>> ]
-"12874" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor() &lt;&lt; &quot;.&quot; &lt;&lt; name &lt;&lt; sig &lt;&lt; &quot; in &quot;)<SUB>2501</SUB>> ]
-"12891" [label = <(ToModifiedUtf8,c-&gt;GetDexCache()-&gt;GetLocation()-&gt;ToModifiedUtf8())<SUB>2504</SUB>> ]
-"12903" [label = <(Get,c.Get())<SUB>2505</SUB>> ]
-"12952" [label = <(VLOG,VLOG(jni))<SUB>2516</SUB>> ]
-"12956" [label = <(&lt;operator&gt;.indirectFieldAccess,m-&gt;PrettyMethod)<SUB>2516</SUB>> ]
-"12965" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;!bang JNI is deprecated. Switch to @FastNative for &quot;)<SUB>2525</SUB>> ]
-"12969" [label = <(PrettyMethod,m-&gt;PrettyMethod())<SUB>2525</SUB>> ]
-"12982" [label = <(FIELD_IDENTIFIER,RegisterNative,RegisterNative)<SUB>2530</SUB>> ]
-"12582" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2413</SUB>> ]
-"12584" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2413</SUB>> ]
-"12652" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2422</SUB>> ]
-"12654" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2422</SUB>> ]
-"12704" [label = <(&lt;operator&gt;.fieldAccess,c.Get)<SUB>2428</SUB>> ]
-"12714" [label = <(UNLIKELY,UNLIKELY(sig == nullptr))<SUB>2430</SUB>> ]
-"12772" [label = <(&lt;operator&gt;.indirectFieldAccess,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm)<SUB>2476</SUB>> ]
-"12781" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>2477</SUB>> ]
-"12788" [label = <(&lt;operator&gt;.fieldAccess,c.Get)<SUB>2477</SUB>> ]
-"12799" [label = <(FIELD_IDENTIFIER,GetSuperClass,GetSuperClass)<SUB>2479</SUB>> ]
-"12804" [label = <(&lt;operator&gt;.lessThan,FindMethod&lt;true)<SUB>2481</SUB>> ]
-"12807" [label = <(&lt;operator&gt;.bracketedPrimary,(current_class.Ptr(), name, sig))<SUB>2481</SUB>> ]
-"12824" [label = <(&lt;operator&gt;.lessThan,FindMethod&lt;false)<SUB>2487</SUB>> ]
-"12827" [label = <(&lt;operator&gt;.bracketedPrimary,(current_class.Ptr(), name, sig))<SUB>2487</SUB>> ]
-"12844" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;CheckJNI: method to register \&quot;&quot; &lt;&lt; name &lt;&lt; &quot;\&quot; not in the given class. &quot;\012 &lt;&lt; &quot;This is slow, consider changing your RegisterNatives calls.&quot;)<SUB>2493</SUB>> ]
-"12854" [label = <(&lt;operator&gt;.assignment,warn_on_going_to_parent = false)<SUB>2495</SUB>> ]
-"12865" [label = <(FIELD_IDENTIFIER,DumpClass,DumpClass)<SUB>2500</SUB>> ]
-"12869" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2500</SUB>> ]
-"12872" [label = <(FIELD_IDENTIFIER,kDumpClassFullDetail,kDumpClassFullDetail)<SUB>2500</SUB>> ]
-"12875" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor() &lt;&lt; &quot;.&quot; &lt;&lt; name &lt;&lt; sig)<SUB>2501</SUB>> ]
-"12892" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;GetDexCache()-&gt;GetLocation()-&gt;ToModifiedUtf8)<SUB>2504</SUB>> ]
-"12904" [label = <(&lt;operator&gt;.fieldAccess,c.Get)<SUB>2505</SUB>> ]
-"12915" [label = <(&lt;operator&gt;.logicalNot,!m-&gt;IsNative())<SUB>2507</SUB>> ]
-"12958" [label = <(FIELD_IDENTIFIER,PrettyMethod,PrettyMethod)<SUB>2516</SUB>> ]
-"12966" [label = <(LOG,LOG(WARNING))<SUB>2525</SUB>> ]
-"12970" [label = <(&lt;operator&gt;.indirectFieldAccess,m-&gt;PrettyMethod)<SUB>2525</SUB>> ]
-"12706" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>2428</SUB>> ]
-"12715" [label = <(&lt;operator&gt;.equals,sig == nullptr)<SUB>2430</SUB>> ]
-"12719" [label = <(ReportInvalidJNINativeMethod,ReportInvalidJNINativeMethod(soa, c.Get(), &quot;method signature&quot;, i))<SUB>2431</SUB>> ]
-"12727" [label = <(RETURN,return JNI_ERR;,return JNI_ERR;)<SUB>2432</SUB>> ]
-"12773" [label = <(down_cast&lt;JNIEnvExt*&gt;,down_cast&lt;JNIEnvExt*&gt;(env))<SUB>2476</SUB>> ]
-"12775" [label = <(FIELD_IDENTIFIER,GetVm,GetVm)<SUB>2476</SUB>> ]
-"12783" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2477</SUB>> ]
-"12790" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>2477</SUB>> ]
-"12808" [label = <(&lt;operator&gt;.expressionList,current_class.Ptr(), name, sig)<SUB>2481</SUB>> ]
-"12828" [label = <(&lt;operator&gt;.expressionList,current_class.Ptr(), name, sig)<SUB>2487</SUB>> ]
-"12845" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;CheckJNI: method to register \&quot;&quot; &lt;&lt; name &lt;&lt; &quot;\&quot; not in the given class. &quot;)<SUB>2493</SUB>> ]
-"12876" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor() &lt;&lt; &quot;.&quot; &lt;&lt; name)<SUB>2501</SUB>> ]
-"12893" [label = <(GetLocation,c-&gt;GetDexCache()-&gt;GetLocation())<SUB>2504</SUB>> ]
-"12900" [label = <(FIELD_IDENTIFIER,ToModifiedUtf8,ToModifiedUtf8)<SUB>2504</SUB>> ]
-"12906" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>2505</SUB>> ]
-"12916" [label = <(IsNative,m-&gt;IsNative())<SUB>2507</SUB>> ]
-"12921" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register non-native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor() &lt;&lt; &quot;.&quot; &lt;&lt; name &lt;&lt; sig\012 &lt;&lt; &quot; as native&quot;)<SUB>2508</SUB>> ]
-"12938" [label = <(ThrowNoSuchMethodError,ThrowNoSuchMethodError(soa, c.Get(), name, sig, &quot;native&quot;))<SUB>2512</SUB>> ]
-"12947" [label = <(RETURN,return JNI_ERR;,return JNI_ERR;)<SUB>2513</SUB>> ]
-"12972" [label = <(FIELD_IDENTIFIER,PrettyMethod,PrettyMethod)<SUB>2525</SUB>> ]
-"12721" [label = <(Get,c.Get())<SUB>2431</SUB>> ]
-"12785" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>2477</SUB>> ]
-"12809" [label = <(Ptr,current_class.Ptr())<SUB>2481</SUB>> ]
-"12829" [label = <(Ptr,current_class.Ptr())<SUB>2487</SUB>> ]
-"12846" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;CheckJNI: method to register \&quot;&quot; &lt;&lt; name)<SUB>2493</SUB>> ]
-"12877" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor() &lt;&lt; &quot;.&quot;)<SUB>2501</SUB>> ]
-"12894" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;GetDexCache()-&gt;GetLocation)<SUB>2504</SUB>> ]
-"12917" [label = <(&lt;operator&gt;.indirectFieldAccess,m-&gt;IsNative)<SUB>2507</SUB>> ]
-"12922" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register non-native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor() &lt;&lt; &quot;.&quot; &lt;&lt; name &lt;&lt; sig)<SUB>2508</SUB>> ]
-"12940" [label = <(Get,c.Get())<SUB>2512</SUB>> ]
-"12722" [label = <(&lt;operator&gt;.fieldAccess,c.Get)<SUB>2431</SUB>> ]
-"12732" [label = <(UNLIKELY,UNLIKELY(fnPtr == nullptr))<SUB>2433</SUB>> ]
-"12810" [label = <(&lt;operator&gt;.fieldAccess,current_class.Ptr)<SUB>2481</SUB>> ]
-"12830" [label = <(&lt;operator&gt;.fieldAccess,current_class.Ptr)<SUB>2487</SUB>> ]
-"12847" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;CheckJNI: method to register \&quot;&quot;)<SUB>2493</SUB>> ]
-"12878" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor())<SUB>2501</SUB>> ]
-"12895" [label = <(GetDexCache,c-&gt;GetDexCache())<SUB>2504</SUB>> ]
-"12899" [label = <(FIELD_IDENTIFIER,GetLocation,GetLocation)<SUB>2504</SUB>> ]
-"12919" [label = <(FIELD_IDENTIFIER,IsNative,IsNative)<SUB>2507</SUB>> ]
-"12923" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register non-native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor() &lt;&lt; &quot;.&quot; &lt;&lt; name)<SUB>2508</SUB>> ]
-"12941" [label = <(&lt;operator&gt;.fieldAccess,c.Get)<SUB>2512</SUB>> ]
-"12724" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>2431</SUB>> ]
-"12733" [label = <(&lt;operator&gt;.equals,fnPtr == nullptr)<SUB>2433</SUB>> ]
-"12737" [label = <(ReportInvalidJNINativeMethod,ReportInvalidJNINativeMethod(soa, c.Get(), &quot;native function&quot;, i))<SUB>2434</SUB>> ]
-"12745" [label = <(RETURN,return JNI_ERR;,return JNI_ERR;)<SUB>2435</SUB>> ]
-"12812" [label = <(FIELD_IDENTIFIER,Ptr,Ptr)<SUB>2481</SUB>> ]
-"12832" [label = <(FIELD_IDENTIFIER,Ptr,Ptr)<SUB>2487</SUB>> ]
-"12848" [label = <(LOG,LOG(WARNING))<SUB>2493</SUB>> ]
-"12879" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register native method &quot;)<SUB>2501</SUB>> ]
-"12883" [label = <(PrettyDescriptor,c-&gt;PrettyDescriptor())<SUB>2503</SUB>> ]
-"12896" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;GetDexCache)<SUB>2504</SUB>> ]
-"12924" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register non-native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor() &lt;&lt; &quot;.&quot;)<SUB>2508</SUB>> ]
-"12943" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>2512</SUB>> ]
-"12739" [label = <(Get,c.Get())<SUB>2434</SUB>> ]
-"12880" [label = <(LOG,LOG(ERROR))<SUB>2501</SUB>> ]
-"12884" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;PrettyDescriptor)<SUB>2503</SUB>> ]
-"12898" [label = <(FIELD_IDENTIFIER,GetDexCache,GetDexCache)<SUB>2504</SUB>> ]
-"12925" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register non-native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor())<SUB>2508</SUB>> ]
-"12740" [label = <(&lt;operator&gt;.fieldAccess,c.Get)<SUB>2434</SUB>> ]
-"12886" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>2503</SUB>> ]
-"12926" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register non-native method &quot;)<SUB>2508</SUB>> ]
-"12930" [label = <(PrettyDescriptor,c-&gt;PrettyDescriptor())<SUB>2510</SUB>> ]
-"12742" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>2434</SUB>> ]
-"12927" [label = <(LOG,LOG(ERROR))<SUB>2508</SUB>> ]
-"12931" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;PrettyDescriptor)<SUB>2510</SUB>> ]
-"12933" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>2510</SUB>> ]
-"12547" [label = <(METHOD,RegisterNatives)<SUB>2404</SUB>> ]
-"12988" [label = <(METHOD_RETURN,jint)<SUB>2404</SUB>> ]
-  "12569" -> "12576" 
-  "12569" -> "12590" 
-  "12590" -> "12593" 
-  "12592" -> "12607" 
-  "12601" -> "12624" 
-  "12639" -> "12646" 
-  "12639" -> "12662" 
-  "12986" -> "12988" 
-  "12554" -> "12561" 
-  "12554" -> "12569" 
-  "12593" -> "12600" 
-  "12596" -> "12592" 
-  "12602" -> "12612" 
-  "12609" -> "12601" 
-  "12623" -> "12630" 
-  "12623" -> "12639" 
-  "12665" -> "12675" 
-  "12665" -> "12986" 
-  "12668" -> "12665" 
-  "12555" -> "12554" 
-  "12559" -> "12567" 
-  "12567" -> "12988" 
-  "12597" -> "12596" 
-  "12603" -> "12602" 
-  "12610" -> "12617" 
-  "12613" -> "12609" 
-  "12624" -> "12623" 
-  "12628" -> "12637" 
-  "12637" -> "12988" 
-  "12662" -> "12665" 
-  "12672" -> "12683" 
-  "12680" -> "12691" 
-  "12688" -> "12697" 
-  "12748" -> "12753" 
-  "12763" -> "12773" 
-  "12767" -> "12785" 
-  "12949" -> "12961" 
-  "12977" -> "12984" 
-  "12984" -> "12668" 
-  "12560" -> "12559" 
-  "12575" -> "12582" 
-  "12575" -> "12590" 
-  "12598" -> "12597" 
-  "12605" -> "12603" 
-  "12612" -> "12610" 
-  "12614" -> "12613" 
-  "12629" -> "12636" 
-  "12633" -> "12628" 
-  "12645" -> "12652" 
-  "12645" -> "12662" 
-  "12674" -> "12672" 
-  "12682" -> "12680" 
-  "12690" -> "12688" 
-  "12696" -> "12706" 
-  "12696" -> "12715" 
-  "12752" -> "12757" 
-  "12752" -> "12763" 
-  "12769" -> "12767" 
-  "12791" -> "12804" 
-  "12791" -> "12858" 
-  "12794" -> "12791" 
-  "12858" -> "12865" 
-  "12858" -> "12919" 
-  "12950" -> "12949" 
-  "12961" -> "12966" 
-  "12961" -> "12982" 
-  "12979" -> "12977" 
-  "12561" -> "12563" 
-  "12563" -> "12560" 
-  "12576" -> "12575" 
-  "12580" -> "12587" 
-  "12587" -> "12988" 
-  "12600" -> "12598" 
-  "12607" -> "12605" 
-  "12615" -> "12620" 
-  "12618" -> "12614" 
-  "12630" -> "12629" 
-  "12634" -> "12633" 
-  "12646" -> "12645" 
-  "12650" -> "12657" 
-  "12657" -> "12988" 
-  "12675" -> "12678" 
-  "12678" -> "12674" 
-  "12683" -> "12686" 
-  "12686" -> "12682" 
-  "12691" -> "12694" 
-  "12694" -> "12690" 
-  "12697" -> "12696" 
-  "12701" -> "12709" 
-  "12709" -> "12988" 
-  "12753" -> "12752" 
-  "12757" -> "12760" 
-  "12760" -> "12763" 
-  "12770" -> "12769" 
-  "12779" -> "12791" 
-  "12796" -> "12794" 
-  "12801" -> "12816" 
-  "12821" -> "12836" 
-  "12862" -> "12880" 
-  "12873" -> "12906" 
-  "12901" -> "12910" 
-  "12910" -> "12988" 
-  "12951" -> "12958" 
-  "12955" -> "12950" 
-  "12964" -> "12973" 
-  "12973" -> "12982" 
-  "12980" -> "12979" 
-  "12581" -> "12580" 
-  "12617" -> "12615" 
-  "12620" -> "12618" 
-  "12636" -> "12634" 
-  "12651" -> "12650" 
-  "12703" -> "12701" 
-  "12771" -> "12776" 
-  "12776" -> "12770" 
-  "12780" -> "12790" 
-  "12787" -> "12779" 
-  "12797" -> "12796" 
-  "12803" -> "12801" 
-  "12816" -> "12858" 
-  "12816" -> "12824" 
-  "12823" -> "12821" 
-  "12836" -> "12858" 
-  "12836" -> "12848" 
-  "12836" -> "12799" 
-  "12863" -> "12866" 
-  "12866" -> "12869" 
-  "12868" -> "12862" 
-  "12874" -> "12898" 
-  "12891" -> "12873" 
-  "12903" -> "12901" 
-  "12952" -> "12951" 
-  "12956" -> "12955" 
-  "12965" -> "12972" 
-  "12969" -> "12964" 
-  "12982" -> "12980" 
-  "12582" -> "12584" 
-  "12584" -> "12581" 
-  "12652" -> "12654" 
-  "12654" -> "12651" 
-  "12704" -> "12703" 
-  "12714" -> "12724" 
-  "12714" -> "12733" 
-  "12772" -> "12771" 
-  "12781" -> "12780" 
-  "12788" -> "12787" 
-  "12799" -> "12797" 
-  "12804" -> "12812" 
-  "12807" -> "12803" 
-  "12824" -> "12832" 
-  "12827" -> "12823" 
-  "12844" -> "12854" 
-  "12854" -> "12799" 
-  "12865" -> "12863" 
-  "12869" -> "12872" 
-  "12872" -> "12868" 
-  "12875" -> "12874" 
-  "12892" -> "12891" 
-  "12904" -> "12903" 
-  "12915" -> "12927" 
-  "12915" -> "12952" 
-  "12958" -> "12956" 
-  "12966" -> "12965" 
-  "12970" -> "12969" 
-  "12706" -> "12704" 
-  "12715" -> "12714" 
-  "12719" -> "12727" 
-  "12727" -> "12988" 
-  "12773" -> "12775" 
-  "12775" -> "12772" 
-  "12783" -> "12781" 
+digraph "GetJavaVM" {  
+"12768" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(vm, JNI_ERR))<SUB>2449</SUB>> ]
+"12788" [label = <(&lt;operator&gt;.assignment,* runtime = Runtime::Current())<SUB>2450</SUB>> ]
+"12812" [label = <(RETURN,return (*vm != nullptr) ? JNI_OK : JNI_ERR;,return (*vm != nullptr) ? JNI_OK : JNI_ERR;)<SUB>2456</SUB>> ]
+"12790" [label = <(Runtime::Current,Runtime::Current())<SUB>2450</SUB>> ]
+"12795" [label = <(&lt;operator&gt;.notEquals,runtime != nullptr)<SUB>2451</SUB>> ]
+"12813" [label = <(&lt;operator&gt;.conditional,(*vm != nullptr) ? JNI_OK : JNI_ERR)<SUB>2456</SUB>> ]
+"12791" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>2450</SUB>> ]
+"12799" [label = <(&lt;operator&gt;.assignment,*vm = runtime-&gt;GetJavaVM())<SUB>2452</SUB>> ]
+"12814" [label = <(&lt;operator&gt;.notEquals,*vm != nullptr)<SUB>2456</SUB>> ]
+"12773" [label = <(UNLIKELY,UNLIKELY((vm) == nullptr))<SUB>2449</SUB>> ]
+"12793" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>2450</SUB>> ]
+"12800" [label = <(&lt;operator&gt;.indirection,*vm)<SUB>2452</SUB>> ]
+"12802" [label = <(GetJavaVM,runtime-&gt;GetJavaVM())<SUB>2452</SUB>> ]
+"12808" [label = <(&lt;operator&gt;.assignment,*vm = nullptr)<SUB>2454</SUB>> ]
+"12815" [label = <(&lt;operator&gt;.indirection,*vm)<SUB>2456</SUB>> ]
+"12774" [label = <(&lt;operator&gt;.equals,(vm) == nullptr)<SUB>2449</SUB>> ]
+"12778" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN(vm, JNI_ERR),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;vm == null&quot;))<SUB>2449</SUB>> ]
+"12785" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(vm, JNI_ERR),CHECK_NON_NULL_ARGUMENT_RETURN(vm, JNI_ERR))<SUB>2449</SUB>> ]
+"12803" [label = <(&lt;operator&gt;.indirectFieldAccess,runtime-&gt;GetJavaVM)<SUB>2452</SUB>> ]
+"12809" [label = <(&lt;operator&gt;.indirection,*vm)<SUB>2454</SUB>> ]
+"12779" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2449</SUB>> ]
+"12805" [label = <(FIELD_IDENTIFIER,GetJavaVM,GetJavaVM)<SUB>2452</SUB>> ]
+"12780" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2449</SUB>> ]
+"12782" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2449</SUB>> ]
+"12764" [label = <(METHOD,GetJavaVM)<SUB>2448</SUB>> ]
+"12820" [label = <(METHOD_RETURN,jint)<SUB>2448</SUB>> ]
+  "12768" -> "12774" 
+  "12768" -> "12793" 
+  "12788" -> "12795" 
+  "12812" -> "12820" 
   "12790" -> "12788" 
-  "12808" -> "12807" 
-  "12828" -> "12827" 
-  "12845" -> "12844" 
-  "12876" -> "12875" 
-  "12893" -> "12900" 
-  "12900" -> "12892" 
-  "12906" -> "12904" 
-  "12916" -> "12915" 
-  "12921" -> "12943" 
-  "12938" -> "12947" 
-  "12947" -> "12988" 
-  "12972" -> "12970" 
-  "12721" -> "12719" 
-  "12785" -> "12783" 
+  "12795" -> "12800" 
+  "12795" -> "12809" 
+  "12813" -> "12812" 
+  "12791" -> "12790" 
+  "12799" -> "12815" 
+  "12814" -> "12813" 
+  "12773" -> "12780" 
+  "12773" -> "12793" 
+  "12793" -> "12791" 
+  "12800" -> "12805" 
+  "12802" -> "12799" 
+  "12808" -> "12815" 
+  "12815" -> "12814" 
+  "12774" -> "12773" 
+  "12778" -> "12785" 
+  "12785" -> "12820" 
+  "12803" -> "12802" 
   "12809" -> "12808" 
-  "12829" -> "12828" 
-  "12846" -> "12845" 
-  "12877" -> "12876" 
-  "12894" -> "12893" 
-  "12917" -> "12916" 
-  "12922" -> "12921" 
-  "12940" -> "12938" 
-  "12722" -> "12721" 
-  "12732" -> "12742" 
-  "12732" -> "12748" 
-  "12810" -> "12809" 
-  "12830" -> "12829" 
-  "12847" -> "12846" 
-  "12878" -> "12877" 
-  "12895" -> "12899" 
-  "12899" -> "12894" 
-  "12919" -> "12917" 
-  "12923" -> "12922" 
-  "12941" -> "12940" 
-  "12724" -> "12722" 
-  "12733" -> "12732" 
-  "12737" -> "12745" 
-  "12745" -> "12988" 
-  "12812" -> "12810" 
-  "12832" -> "12830" 
-  "12848" -> "12847" 
-  "12879" -> "12886" 
-  "12883" -> "12878" 
-  "12896" -> "12895" 
-  "12924" -> "12923" 
-  "12943" -> "12941" 
-  "12739" -> "12737" 
-  "12880" -> "12879" 
-  "12884" -> "12883" 
-  "12898" -> "12896" 
-  "12925" -> "12924" 
-  "12740" -> "12739" 
-  "12886" -> "12884" 
-  "12926" -> "12933" 
-  "12930" -> "12925" 
-  "12742" -> "12740" 
-  "12927" -> "12926" 
-  "12931" -> "12930" 
-  "12933" -> "12931" 
-  "12547" -> "12555" 
+  "12779" -> "12778" 
+  "12805" -> "12803" 
+  "12780" -> "12782" 
+  "12782" -> "12779" 
+  "12764" -> "12768" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/246-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/246-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/246-cfg.dot	2023-06-07 19:33:45.507394679 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/246-cfg.dot	2023-06-07 19:33:52.087393978 +0330
@@ -1,123 +1,83 @@
-digraph "UnregisterNatives" {  
-"12994" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_ERR))<SUB>2537</SUB>> ]
-"13014" [label = <(soa,soa(env))<SUB>2538</SUB>> ]
-"13016" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c = soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>2539</SUB>> ]
-"13033" [label = <(&lt;operator&gt;.shiftLeft,VLOG(jni) &lt;&lt; &quot;[Unregistering JNI native methods for &quot; &lt;&lt; mirror::Class::PrettyClass(c) &lt;&lt; &quot;]&quot;)<SUB>2541</SUB>> ]
-"13048" [label = <(&lt;operator&gt;.assignment,unregistered_count = 0)<SUB>2543</SUB>> ]
-"13052" [label = <(&lt;operator&gt;.assignment,pointer_size = Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize())<SUB>2544</SUB>> ]
-"13103" [label = <(RETURN,return JNI_OK;,return JNI_OK;)<SUB>2556</SUB>> ]
-"13017" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c)<SUB>2539</SUB>> ]
-"13024" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>2539</SUB>> ]
-"13034" [label = <(&lt;operator&gt;.shiftLeft,VLOG(jni) &lt;&lt; &quot;[Unregistering JNI native methods for &quot; &lt;&lt; mirror::Class::PrettyClass(c))<SUB>2541</SUB>> ]
-"13054" [label = <(GetImagePointerSize,Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize())<SUB>2544</SUB>> ]
-"13085" [label = <(&lt;operator&gt;.equals,unregistered_count == 0)<SUB>2552</SUB>> ]
-"13018" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>2539</SUB>> ]
-"13025" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>2539</SUB>> ]
-"13035" [label = <(&lt;operator&gt;.shiftLeft,VLOG(jni) &lt;&lt; &quot;[Unregistering JNI native methods for &quot;)<SUB>2541</SUB>> ]
-"13039" [label = <(mirror::Class::PrettyClass,mirror::Class::PrettyClass(c))<SUB>2541</SUB>> ]
-"13055" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize)<SUB>2544</SUB>> ]
-"13089" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI UnregisterNatives: attempt to unregister native methods of class '&quot;\012 &lt;&lt; mirror::Class::PrettyDescriptor(c) &lt;&lt; &quot;' that contains no native methods&quot;)<SUB>2553</SUB>> ]
-"12999" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>2537</SUB>> ]
-"13020" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2539</SUB>> ]
-"13026" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2539</SUB>> ]
-"13029" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2539</SUB>> ]
-"13036" [label = <(VLOG,VLOG(jni))<SUB>2541</SUB>> ]
-"13040" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class::PrettyClass)<SUB>2541</SUB>> ]
-"13056" [label = <(GetClassLinker,Runtime::Current()-&gt;GetClassLinker())<SUB>2544</SUB>> ]
-"13063" [label = <(FIELD_IDENTIFIER,GetImagePointerSize,GetImagePointerSize)<SUB>2544</SUB>> ]
-"13073" [label = <(IsNative,m.IsNative())<SUB>2546</SUB>> ]
-"13090" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI UnregisterNatives: attempt to unregister native methods of class '&quot;\012 &lt;&lt; mirror::Class::PrettyDescriptor(c))<SUB>2553</SUB>> ]
-"13000" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>2537</SUB>> ]
-"13004" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_ERR),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class == null&quot;))<SUB>2537</SUB>> ]
-"13011" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_ERR),CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_ERR))<SUB>2537</SUB>> ]
-"13022" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>2539</SUB>> ]
-"13028" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2539</SUB>> ]
-"13031" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>2539</SUB>> ]
-"13041" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2541</SUB>> ]
-"13044" [label = <(FIELD_IDENTIFIER,PrettyClass,PrettyClass)<SUB>2541</SUB>> ]
-"13057" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetClassLinker)<SUB>2544</SUB>> ]
-"13074" [label = <(&lt;operator&gt;.fieldAccess,m.IsNative)<SUB>2546</SUB>> ]
-"13078" [label = <(UnregisterNative,m.UnregisterNative())<SUB>2547</SUB>> ]
-"13082" [label = <(&lt;operator&gt;.postIncrement,unregistered_count++)<SUB>2548</SUB>> ]
-"13091" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI UnregisterNatives: attempt to unregister native methods of class '&quot;)<SUB>2553</SUB>> ]
-"13095" [label = <(mirror::Class::PrettyDescriptor,mirror::Class::PrettyDescriptor(c))<SUB>2554</SUB>> ]
-"13005" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2537</SUB>> ]
-"13058" [label = <(Runtime::Current,Runtime::Current())<SUB>2544</SUB>> ]
-"13062" [label = <(FIELD_IDENTIFIER,GetClassLinker,GetClassLinker)<SUB>2544</SUB>> ]
-"13076" [label = <(FIELD_IDENTIFIER,IsNative,IsNative)<SUB>2546</SUB>> ]
-"13079" [label = <(&lt;operator&gt;.fieldAccess,m.UnregisterNative)<SUB>2547</SUB>> ]
-"13092" [label = <(LOG,LOG(WARNING))<SUB>2553</SUB>> ]
-"13096" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class::PrettyDescriptor)<SUB>2554</SUB>> ]
-"13006" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2537</SUB>> ]
-"13008" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2537</SUB>> ]
-"13059" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>2544</SUB>> ]
-"13081" [label = <(FIELD_IDENTIFIER,UnregisterNative,UnregisterNative)<SUB>2547</SUB>> ]
-"13097" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2554</SUB>> ]
-"13100" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>2554</SUB>> ]
-"13061" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>2544</SUB>> ]
-"12990" [label = <(METHOD,UnregisterNatives)<SUB>2536</SUB>> ]
-"13105" [label = <(METHOD_RETURN,jint)<SUB>2536</SUB>> ]
-  "12994" -> "13000" 
-  "12994" -> "13014" 
-  "13014" -> "13022" 
-  "13016" -> "13036" 
-  "13033" -> "13048" 
-  "13048" -> "13061" 
-  "13052" -> "13076" 
-  "13103" -> "13105" 
-  "13017" -> "13028" 
-  "13024" -> "13016" 
-  "13034" -> "13033" 
-  "13054" -> "13052" 
-  "13085" -> "13092" 
-  "13085" -> "13103" 
-  "13018" -> "13017" 
-  "13025" -> "13024" 
-  "13035" -> "13041" 
-  "13039" -> "13034" 
-  "13055" -> "13054" 
-  "13089" -> "13103" 
-  "12999" -> "13006" 
-  "12999" -> "13014" 
-  "13020" -> "13018" 
-  "13026" -> "13031" 
-  "13029" -> "13025" 
-  "13036" -> "13035" 
-  "13040" -> "13039" 
-  "13056" -> "13063" 
-  "13063" -> "13055" 
-  "13073" -> "13076" 
-  "13073" -> "13081" 
-  "13073" -> "13085" 
-  "13090" -> "13089" 
-  "13000" -> "12999" 
-  "13004" -> "13011" 
-  "13011" -> "13105" 
-  "13022" -> "13020" 
-  "13028" -> "13026" 
-  "13031" -> "13029" 
-  "13041" -> "13044" 
-  "13044" -> "13040" 
-  "13057" -> "13056" 
-  "13074" -> "13073" 
-  "13078" -> "13082" 
-  "13082" -> "13076" 
-  "13082" -> "13085" 
-  "13091" -> "13097" 
-  "13095" -> "13090" 
-  "13005" -> "13004" 
-  "13058" -> "13062" 
-  "13062" -> "13057" 
-  "13076" -> "13074" 
-  "13079" -> "13078" 
-  "13092" -> "13091" 
-  "13096" -> "13095" 
-  "13006" -> "13008" 
-  "13008" -> "13005" 
-  "13059" -> "13058" 
-  "13081" -> "13079" 
-  "13097" -> "13100" 
-  "13100" -> "13096" 
-  "13061" -> "13059" 
-  "12990" -> "12994" 
+digraph "NewDirectByteBuffer" {  
+"12862" [label = <(&lt;operator&gt;.assignment,address_arg = reinterpret_cast&lt;jlong&gt;(address))<SUB>2478</SUB>> ]
+"12868" [label = <(&lt;operator&gt;.assignment,capacity_arg = static_cast&lt;jint&gt;(capacity))<SUB>2479</SUB>> ]
+"12874" [label = <(&lt;operator&gt;.assignment,result = env-&gt;NewObject(WellKnownClasses::java_nio_DirectByteBuffer,\012 WellKnownClasses::java_nio_DirectByteBuffer_init,\012                                    address_arg, capacity_arg))<SUB>2481</SUB>> ]
+"12888" [label = <(RETURN,return static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_-&gt;IsExceptionPending() ? nullptr : result;,return static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_-&gt;IsExceptionPending() ? nullptr : result;)<SUB>2484</SUB>> ]
+"12828" [label = <(&lt;operator&gt;.lessThan,capacity &lt; 0)<SUB>2460</SUB>> ]
+"12838" [label = <(&lt;operator&gt;.logicalAnd,address == nullptr &amp;&amp; capacity != 0)<SUB>2465</SUB>> ]
+"12852" [label = <(&lt;operator&gt;.greaterThan,capacity &gt; INT_MAX)<SUB>2472</SUB>> ]
+"12864" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jlong&gt;(address))<SUB>2478</SUB>> ]
+"12870" [label = <(&lt;operator&gt;.cast,static_cast&lt;jint&gt;(capacity))<SUB>2479</SUB>> ]
+"12876" [label = <(NewObject,env-&gt;NewObject(WellKnownClasses::java_nio_DirectByteBuffer,\012 WellKnownClasses::java_nio_DirectByteBuffer_init,\012                                    address_arg, capacity_arg))<SUB>2481</SUB>> ]
+"12889" [label = <(&lt;operator&gt;.conditional,static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_-&gt;IsExceptionPending() ? nullptr : result)<SUB>2484</SUB>> ]
+"12833" [label = <(UNKNOWN,),))<SUB>2461</SUB>> ]
+"12834" [label = <(UNKNOWN,-&gt;JniAbortF(&quot;NewDirectByteBuffer&quot;, &quot;negative buffer capacity: %&quot; PRId64,\012                                       capacity);,-&gt;JniAbortF(&quot;NewDirectByteBuffer&quot;, &quot;negative buffer capacity: %&quot; PRId64,\012                                       capacity);)<SUB>2461</SUB>> ]
+"12835" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2463</SUB>> ]
+"12839" [label = <(&lt;operator&gt;.equals,address == nullptr)<SUB>2465</SUB>> ]
+"12842" [label = <(&lt;operator&gt;.notEquals,capacity != 0)<SUB>2465</SUB>> ]
+"12847" [label = <(UNKNOWN,),))<SUB>2466</SUB>> ]
+"12848" [label = <(UNKNOWN,-&gt;JniAbortF(&quot;NewDirectByteBuffer&quot;,\012 &quot;non-zero capacity for nullptr pointer: %&quot; PRId64, capacity);,-&gt;JniAbortF(&quot;NewDirectByteBuffer&quot;,\012 &quot;non-zero capacity for nullptr pointer: %&quot; PRId64, capacity);)<SUB>2466</SUB>> ]
+"12849" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2468</SUB>> ]
+"12857" [label = <(UNKNOWN,),))<SUB>2473</SUB>> ]
+"12858" [label = <(UNKNOWN,-&gt;JniAbortF(&quot;NewDirectByteBuffer&quot;,\012 &quot;buffer capacity greater than maximum jint: %&quot; PRId64,\012                                       capacity);,-&gt;JniAbortF(&quot;NewDirectByteBuffer&quot;,\012 &quot;buffer capacity greater than maximum jint: %&quot; PRId64,\012                                       capacity);)<SUB>2473</SUB>> ]
+"12859" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2476</SUB>> ]
+"12865" [label = <(UNKNOWN,jlong,jlong)<SUB>2478</SUB>> ]
+"12871" [label = <(UNKNOWN,jint,jint)<SUB>2479</SUB>> ]
+"12877" [label = <(&lt;operator&gt;.indirectFieldAccess,env-&gt;NewObject)<SUB>2481</SUB>> ]
+"12880" [label = <(&lt;operator&gt;.fieldAccess,WellKnownClasses::java_nio_DirectByteBuffer)<SUB>2481</SUB>> ]
+"12883" [label = <(&lt;operator&gt;.fieldAccess,WellKnownClasses::java_nio_DirectByteBuffer_init)<SUB>2482</SUB>> ]
+"12890" [label = <(IsExceptionPending,static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_-&gt;IsExceptionPending())<SUB>2484</SUB>> ]
+"12879" [label = <(FIELD_IDENTIFIER,NewObject,NewObject)<SUB>2481</SUB>> ]
+"12882" [label = <(FIELD_IDENTIFIER,java_nio_DirectByteBuffer,java_nio_DirectByteBuffer)<SUB>2481</SUB>> ]
+"12885" [label = <(FIELD_IDENTIFIER,java_nio_DirectByteBuffer_init,java_nio_DirectByteBuffer_init)<SUB>2482</SUB>> ]
+"12891" [label = <(&lt;operator&gt;.indirectFieldAccess,static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_-&gt;IsExceptionPending)<SUB>2484</SUB>> ]
+"12892" [label = <(&lt;operator&gt;.indirectFieldAccess,static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_)<SUB>2484</SUB>> ]
+"12897" [label = <(FIELD_IDENTIFIER,IsExceptionPending,IsExceptionPending)<SUB>2484</SUB>> ]
+"12893" [label = <(&lt;operator&gt;.cast,static_cast&lt;JNIEnvExt*&gt;(env))<SUB>2484</SUB>> ]
+"12896" [label = <(FIELD_IDENTIFIER,self_,self_)<SUB>2484</SUB>> ]
+"12894" [label = <(UNKNOWN,JNIEnvExt*,JNIEnvExt*)<SUB>2484</SUB>> ]
+"12822" [label = <(METHOD,NewDirectByteBuffer)<SUB>2459</SUB>> ]
+"12900" [label = <(METHOD_RETURN,jobject)<SUB>2459</SUB>> ]
+  "12862" -> "12871" 
+  "12868" -> "12879" 
+  "12874" -> "12894" 
+  "12888" -> "12900" 
+  "12828" -> "12833" 
+  "12828" -> "12839" 
+  "12838" -> "12847" 
+  "12838" -> "12852" 
+  "12852" -> "12857" 
+  "12852" -> "12865" 
+  "12864" -> "12862" 
+  "12870" -> "12868" 
+  "12876" -> "12874" 
+  "12889" -> "12888" 
+  "12833" -> "12834" 
+  "12834" -> "12835" 
+  "12835" -> "12900" 
+  "12839" -> "12838" 
+  "12839" -> "12842" 
+  "12842" -> "12838" 
+  "12847" -> "12848" 
+  "12848" -> "12849" 
+  "12849" -> "12900" 
+  "12857" -> "12858" 
+  "12858" -> "12859" 
+  "12859" -> "12900" 
+  "12865" -> "12864" 
+  "12871" -> "12870" 
+  "12877" -> "12882" 
+  "12880" -> "12885" 
+  "12883" -> "12876" 
+  "12890" -> "12889" 
+  "12879" -> "12877" 
+  "12882" -> "12880" 
+  "12885" -> "12883" 
+  "12891" -> "12890" 
+  "12892" -> "12897" 
+  "12897" -> "12891" 
+  "12893" -> "12896" 
+  "12896" -> "12892" 
+  "12894" -> "12893" 
+  "12822" -> "12828" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/247-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/247-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/247-cfg.dot	2023-06-07 19:33:45.507394679 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/247-cfg.dot	2023-06-07 19:33:52.087393978 +0330
@@ -1,5 +1,21 @@
-digraph "MonitorEnter" {  
-"13107" [label = <(METHOD,MonitorEnter)<SUB>2559</SUB>> ]
-"13111" [label = <(METHOD_RETURN,jint)<SUB>2559</SUB>> ]
-  "13107" -> "13111" 
+digraph "GetDirectBufferAddress" {  
+"12906" [label = <(RETURN,return reinterpret_cast&lt;void*&gt;(env-&gt;GetLongField(\012        java_buffer, WellKnownClasses::java_nio_DirectByteBuffer_effectiveDirectAddress));,return reinterpret_cast&lt;void*&gt;(env-&gt;GetLongField(\012        java_buffer, WellKnownClasses::java_nio_DirectByteBuffer_effectiveDirectAddress));)<SUB>2488</SUB>> ]
+"12907" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;void*&gt;(env-&gt;GetLongField(\012        java_buffer, WellKnownClasses::java_nio_DirectByteBuffer_effectiveDirectAddress)))<SUB>2488</SUB>> ]
+"12908" [label = <(UNKNOWN,void*,void*)<SUB>2488</SUB>> ]
+"12909" [label = <(GetLongField,env-&gt;GetLongField(\012        java_buffer, WellKnownClasses::java_nio_DirectByteBuffer_effectiveDirectAddress))<SUB>2488</SUB>> ]
+"12910" [label = <(&lt;operator&gt;.indirectFieldAccess,env-&gt;GetLongField)<SUB>2488</SUB>> ]
+"12914" [label = <(&lt;operator&gt;.fieldAccess,WellKnownClasses::java_nio_DirectByteBuffer_effectiveDirectAddress)<SUB>2489</SUB>> ]
+"12912" [label = <(FIELD_IDENTIFIER,GetLongField,GetLongField)<SUB>2488</SUB>> ]
+"12916" [label = <(FIELD_IDENTIFIER,java_nio_DirectByteBuffer_effectiveDirectAddress,java_nio_DirectByteBuffer_effectiveDirectAddress)<SUB>2489</SUB>> ]
+"12902" [label = <(METHOD,GetDirectBufferAddress)<SUB>2487</SUB>> ]
+"12917" [label = <(METHOD_RETURN,void*)<SUB>2487</SUB>> ]
+  "12906" -> "12917" 
+  "12907" -> "12906" 
+  "12908" -> "12912" 
+  "12909" -> "12907" 
+  "12910" -> "12916" 
+  "12914" -> "12909" 
+  "12912" -> "12910" 
+  "12916" -> "12914" 
+  "12902" -> "12908" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/248-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/248-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/248-cfg.dot	2023-06-07 19:33:45.507394679 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/248-cfg.dot	2023-06-07 19:33:52.087393978 +0330
@@ -1,5 +1,21 @@
-digraph "MonitorExit" {  
-"13115" [label = <(METHOD,MonitorExit)<SUB>2573</SUB>> ]
-"13119" [label = <(METHOD_RETURN,jint)<SUB>2573</SUB>> ]
-  "13115" -> "13119" 
+digraph "GetDirectBufferCapacity" {  
+"12923" [label = <(RETURN,return static_cast&lt;jlong&gt;(env-&gt;GetIntField(\012        java_buffer, WellKnownClasses::java_nio_DirectByteBuffer_capacity));,return static_cast&lt;jlong&gt;(env-&gt;GetIntField(\012        java_buffer, WellKnownClasses::java_nio_DirectByteBuffer_capacity));)<SUB>2493</SUB>> ]
+"12924" [label = <(&lt;operator&gt;.cast,static_cast&lt;jlong&gt;(env-&gt;GetIntField(\012        java_buffer, WellKnownClasses::java_nio_DirectByteBuffer_capacity)))<SUB>2493</SUB>> ]
+"12925" [label = <(UNKNOWN,jlong,jlong)<SUB>2493</SUB>> ]
+"12926" [label = <(GetIntField,env-&gt;GetIntField(\012        java_buffer, WellKnownClasses::java_nio_DirectByteBuffer_capacity))<SUB>2493</SUB>> ]
+"12927" [label = <(&lt;operator&gt;.indirectFieldAccess,env-&gt;GetIntField)<SUB>2493</SUB>> ]
+"12931" [label = <(&lt;operator&gt;.fieldAccess,WellKnownClasses::java_nio_DirectByteBuffer_capacity)<SUB>2494</SUB>> ]
+"12929" [label = <(FIELD_IDENTIFIER,GetIntField,GetIntField)<SUB>2493</SUB>> ]
+"12933" [label = <(FIELD_IDENTIFIER,java_nio_DirectByteBuffer_capacity,java_nio_DirectByteBuffer_capacity)<SUB>2494</SUB>> ]
+"12919" [label = <(METHOD,GetDirectBufferCapacity)<SUB>2492</SUB>> ]
+"12934" [label = <(METHOD_RETURN,jlong)<SUB>2492</SUB>> ]
+  "12923" -> "12934" 
+  "12924" -> "12923" 
+  "12925" -> "12929" 
+  "12926" -> "12924" 
+  "12927" -> "12933" 
+  "12931" -> "12926" 
+  "12929" -> "12927" 
+  "12933" -> "12931" 
+  "12919" -> "12925" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/249-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/249-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/249-cfg.dot	2023-06-07 19:33:45.517394678 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/249-cfg.dot	2023-06-07 19:33:52.087393978 +0330
@@ -1,56 +1,5 @@
-digraph "GetJavaVM" {  
-"13127" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(vm, JNI_ERR))<SUB>2589</SUB>> ]
-"13147" [label = <(&lt;operator&gt;.assignment,* runtime = Runtime::Current())<SUB>2590</SUB>> ]
-"13171" [label = <(RETURN,return (*vm != nullptr) ? JNI_OK : JNI_ERR;,return (*vm != nullptr) ? JNI_OK : JNI_ERR;)<SUB>2596</SUB>> ]
-"13149" [label = <(Runtime::Current,Runtime::Current())<SUB>2590</SUB>> ]
-"13154" [label = <(&lt;operator&gt;.notEquals,runtime != nullptr)<SUB>2591</SUB>> ]
-"13172" [label = <(&lt;operator&gt;.conditional,(*vm != nullptr) ? JNI_OK : JNI_ERR)<SUB>2596</SUB>> ]
-"13150" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>2590</SUB>> ]
-"13158" [label = <(&lt;operator&gt;.assignment,*vm = runtime-&gt;GetJavaVM())<SUB>2592</SUB>> ]
-"13173" [label = <(&lt;operator&gt;.notEquals,*vm != nullptr)<SUB>2596</SUB>> ]
-"13132" [label = <(UNLIKELY,UNLIKELY((vm) == nullptr))<SUB>2589</SUB>> ]
-"13152" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>2590</SUB>> ]
-"13159" [label = <(&lt;operator&gt;.indirection,*vm)<SUB>2592</SUB>> ]
-"13161" [label = <(GetJavaVM,runtime-&gt;GetJavaVM())<SUB>2592</SUB>> ]
-"13167" [label = <(&lt;operator&gt;.assignment,*vm = nullptr)<SUB>2594</SUB>> ]
-"13174" [label = <(&lt;operator&gt;.indirection,*vm)<SUB>2596</SUB>> ]
-"13133" [label = <(&lt;operator&gt;.equals,(vm) == nullptr)<SUB>2589</SUB>> ]
-"13137" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN(vm, JNI_ERR),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;vm == null&quot;))<SUB>2589</SUB>> ]
-"13144" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(vm, JNI_ERR),CHECK_NON_NULL_ARGUMENT_RETURN(vm, JNI_ERR))<SUB>2589</SUB>> ]
-"13162" [label = <(&lt;operator&gt;.indirectFieldAccess,runtime-&gt;GetJavaVM)<SUB>2592</SUB>> ]
-"13168" [label = <(&lt;operator&gt;.indirection,*vm)<SUB>2594</SUB>> ]
-"13138" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2589</SUB>> ]
-"13164" [label = <(FIELD_IDENTIFIER,GetJavaVM,GetJavaVM)<SUB>2592</SUB>> ]
-"13139" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2589</SUB>> ]
-"13141" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2589</SUB>> ]
-"13123" [label = <(METHOD,GetJavaVM)<SUB>2588</SUB>> ]
-"13179" [label = <(METHOD_RETURN,jint)<SUB>2588</SUB>> ]
-  "13127" -> "13133" 
-  "13127" -> "13152" 
-  "13147" -> "13154" 
-  "13171" -> "13179" 
-  "13149" -> "13147" 
-  "13154" -> "13159" 
-  "13154" -> "13168" 
-  "13172" -> "13171" 
-  "13150" -> "13149" 
-  "13158" -> "13174" 
-  "13173" -> "13172" 
-  "13132" -> "13139" 
-  "13132" -> "13152" 
-  "13152" -> "13150" 
-  "13159" -> "13164" 
-  "13161" -> "13158" 
-  "13167" -> "13174" 
-  "13174" -> "13173" 
-  "13133" -> "13132" 
-  "13137" -> "13144" 
-  "13144" -> "13179" 
-  "13162" -> "13161" 
-  "13168" -> "13167" 
-  "13138" -> "13137" 
-  "13164" -> "13162" 
-  "13139" -> "13141" 
-  "13141" -> "13138" 
-  "13123" -> "13127" 
+digraph "EnsureLocalCapacityInternal" {  
+"12937" [label = <(METHOD,EnsureLocalCapacityInternal)<SUB>2521</SUB>> ]
+"12942" [label = <(METHOD_RETURN,jint)<SUB>2521</SUB>> ]
+  "12937" -> "12942" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/25-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/25-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/25-cfg.dot	2023-06-07 19:33:45.337394696 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/25-cfg.dot	2023-06-07 19:33:51.927393994 +0330
@@ -1,7 +1,104 @@
-digraph "GetVersion" {  
-"583" [label = <(RETURN,return JNI_VERSION_1_6;,return JNI_VERSION_1_6;)<SUB>530</SUB>> ]
-"580" [label = <(METHOD,GetVersion)<SUB>529</SUB>> ]
-"585" [label = <(METHOD_RETURN,jint)<SUB>529</SUB>> ]
-  "583" -> "585" 
-  "580" -> "583" 
+digraph "FromReflectedField" {  
+"567" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(jlr_field))<SUB>483</SUB>> ]
+"586" [label = <(soa,soa(env))<SUB>484</SUB>> ]
+"588" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; obj_field = soa.Decode&lt;mirror::Object&gt;(jlr_field))<SUB>485</SUB>> ]
+"620" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Field&gt; field = ObjPtr&lt;mirror::Field&gt;::DownCast(obj_field))<SUB>490</SUB>> ]
+"639" [label = <(RETURN,return jni::EncodeArtField(field-&gt;GetArtField());,return jni::EncodeArtField(field-&gt;GetArtField());)<SUB>491</SUB>> ]
+"589" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; obj_field)<SUB>485</SUB>> ]
+"596" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(jlr_field))<SUB>485</SUB>> ]
+"606" [label = <(&lt;operator&gt;.notEquals,obj_field-&gt;GetClass() != mirror::Field::StaticClass())<SUB>486</SUB>> ]
+"621" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Field&gt; field)<SUB>490</SUB>> ]
+"628" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Field&gt;::DownCast(obj_field))<SUB>490</SUB>> ]
+"640" [label = <(jni::EncodeArtField,jni::EncodeArtField(field-&gt;GetArtField()))<SUB>491</SUB>> ]
+"590" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>485</SUB>> ]
+"597" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>485</SUB>> ]
+"607" [label = <(GetClass,obj_field-&gt;GetClass())<SUB>486</SUB>> ]
+"611" [label = <(mirror::Field::StaticClass,mirror::Field::StaticClass())<SUB>486</SUB>> ]
+"618" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>488</SUB>> ]
+"622" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Field)<SUB>490</SUB>> ]
+"629" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Field)<SUB>490</SUB>> ]
+"634" [label = <(::DownCast,::DownCast(obj_field))<SUB>490</SUB>> ]
+"641" [label = <(&lt;operator&gt;.fieldAccess,jni::EncodeArtField)<SUB>491</SUB>> ]
+"644" [label = <(GetArtField,field-&gt;GetArtField())<SUB>491</SUB>> ]
+"571" [label = <(UNLIKELY,UNLIKELY((jlr_field) == nullptr))<SUB>483</SUB>> ]
+"592" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>485</SUB>> ]
+"598" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>485</SUB>> ]
+"601" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>485</SUB>> ]
+"608" [label = <(&lt;operator&gt;.indirectFieldAccess,obj_field-&gt;GetClass)<SUB>486</SUB>> ]
+"612" [label = <(&lt;operator&gt;.fieldAccess,mirror::Field::StaticClass)<SUB>486</SUB>> ]
+"624" [label = <(&lt;operator&gt;.fieldAccess,mirror::Field)<SUB>490</SUB>> ]
+"631" [label = <(&lt;operator&gt;.fieldAccess,mirror::Field)<SUB>490</SUB>> ]
+"635" [label = <(&lt;operator&gt;.fieldAccess,::DownCast)<SUB>490</SUB>> ]
+"643" [label = <(FIELD_IDENTIFIER,EncodeArtField,EncodeArtField)<SUB>491</SUB>> ]
+"645" [label = <(&lt;operator&gt;.indirectFieldAccess,field-&gt;GetArtField)<SUB>491</SUB>> ]
+"572" [label = <(&lt;operator&gt;.equals,(jlr_field) == nullptr)<SUB>483</SUB>> ]
+"576" [label = <(CHECK_NON_NULL_ARGUMENT(jlr_field),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;jlr_field == null&quot;))<SUB>483</SUB>> ]
+"583" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(jlr_field),CHECK_NON_NULL_ARGUMENT(jlr_field))<SUB>483</SUB>> ]
+"594" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>485</SUB>> ]
+"600" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>485</SUB>> ]
+"603" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>485</SUB>> ]
+"610" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>486</SUB>> ]
+"613" [label = <(&lt;operator&gt;.fieldAccess,mirror::Field)<SUB>486</SUB>> ]
+"616" [label = <(FIELD_IDENTIFIER,StaticClass,StaticClass)<SUB>486</SUB>> ]
+"626" [label = <(FIELD_IDENTIFIER,Field,Field)<SUB>490</SUB>> ]
+"633" [label = <(FIELD_IDENTIFIER,Field,Field)<SUB>490</SUB>> ]
+"637" [label = <(FIELD_IDENTIFIER,DownCast,DownCast)<SUB>490</SUB>> ]
+"647" [label = <(FIELD_IDENTIFIER,GetArtField,GetArtField)<SUB>491</SUB>> ]
+"577" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>483</SUB>> ]
+"578" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>483</SUB>> ]
+"580" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>483</SUB>> ]
+"563" [label = <(METHOD,FromReflectedField)<SUB>482</SUB>> ]
+"648" [label = <(METHOD_RETURN,jfieldID)<SUB>482</SUB>> ]
+  "567" -> "572" 
+  "567" -> "586" 
+  "586" -> "594" 
+  "588" -> "610" 
+  "620" -> "643" 
+  "639" -> "648" 
+  "589" -> "600" 
+  "596" -> "588" 
+  "606" -> "618" 
+  "606" -> "626" 
+  "621" -> "633" 
+  "628" -> "620" 
+  "640" -> "639" 
+  "590" -> "589" 
+  "597" -> "596" 
+  "607" -> "613" 
+  "611" -> "606" 
+  "618" -> "648" 
+  "622" -> "621" 
+  "629" -> "637" 
+  "634" -> "628" 
+  "641" -> "647" 
+  "644" -> "640" 
+  "571" -> "578" 
+  "571" -> "586" 
+  "592" -> "590" 
+  "598" -> "603" 
+  "601" -> "597" 
+  "608" -> "607" 
+  "612" -> "611" 
+  "624" -> "622" 
+  "631" -> "629" 
+  "635" -> "634" 
+  "643" -> "641" 
+  "645" -> "644" 
+  "572" -> "571" 
+  "576" -> "583" 
+  "583" -> "648" 
+  "594" -> "592" 
+  "600" -> "598" 
+  "603" -> "601" 
+  "610" -> "608" 
+  "613" -> "616" 
+  "616" -> "612" 
+  "626" -> "624" 
+  "633" -> "631" 
+  "637" -> "635" 
+  "647" -> "645" 
+  "577" -> "576" 
+  "578" -> "580" 
+  "580" -> "577" 
+  "563" -> "567" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/250-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/250-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/250-cfg.dot	2023-06-07 19:33:45.517394678 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/250-cfg.dot	2023-06-07 19:33:52.087393978 +0330
@@ -1,83 +1,50 @@
-digraph "NewDirectByteBuffer" {  
-"13221" [label = <(&lt;operator&gt;.assignment,address_arg = reinterpret_cast&lt;jlong&gt;(address))<SUB>2618</SUB>> ]
-"13227" [label = <(&lt;operator&gt;.assignment,capacity_arg = static_cast&lt;jint&gt;(capacity))<SUB>2619</SUB>> ]
-"13233" [label = <(&lt;operator&gt;.assignment,result = env-&gt;NewObject(WellKnownClasses::java_nio_DirectByteBuffer,\012 WellKnownClasses::java_nio_DirectByteBuffer_init,\012                                    address_arg, capacity_arg))<SUB>2621</SUB>> ]
-"13247" [label = <(RETURN,return static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_-&gt;IsExceptionPending() ? nullptr : result;,return static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_-&gt;IsExceptionPending() ? nullptr : result;)<SUB>2624</SUB>> ]
-"13187" [label = <(&lt;operator&gt;.lessThan,capacity &lt; 0)<SUB>2600</SUB>> ]
-"13197" [label = <(&lt;operator&gt;.logicalAnd,address == nullptr &amp;&amp; capacity != 0)<SUB>2605</SUB>> ]
-"13211" [label = <(&lt;operator&gt;.greaterThan,capacity &gt; INT_MAX)<SUB>2612</SUB>> ]
-"13223" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jlong&gt;(address))<SUB>2618</SUB>> ]
-"13229" [label = <(&lt;operator&gt;.cast,static_cast&lt;jint&gt;(capacity))<SUB>2619</SUB>> ]
-"13235" [label = <(NewObject,env-&gt;NewObject(WellKnownClasses::java_nio_DirectByteBuffer,\012 WellKnownClasses::java_nio_DirectByteBuffer_init,\012                                    address_arg, capacity_arg))<SUB>2621</SUB>> ]
-"13248" [label = <(&lt;operator&gt;.conditional,static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_-&gt;IsExceptionPending() ? nullptr : result)<SUB>2624</SUB>> ]
-"13192" [label = <(UNKNOWN,),))<SUB>2601</SUB>> ]
-"13193" [label = <(UNKNOWN,-&gt;JniAbortF(&quot;NewDirectByteBuffer&quot;, &quot;negative buffer capacity: %&quot; PRId64,\012                                       capacity);,-&gt;JniAbortF(&quot;NewDirectByteBuffer&quot;, &quot;negative buffer capacity: %&quot; PRId64,\012                                       capacity);)<SUB>2601</SUB>> ]
-"13194" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2603</SUB>> ]
-"13198" [label = <(&lt;operator&gt;.equals,address == nullptr)<SUB>2605</SUB>> ]
-"13201" [label = <(&lt;operator&gt;.notEquals,capacity != 0)<SUB>2605</SUB>> ]
-"13206" [label = <(UNKNOWN,),))<SUB>2606</SUB>> ]
-"13207" [label = <(UNKNOWN,-&gt;JniAbortF(&quot;NewDirectByteBuffer&quot;,\012 &quot;non-zero capacity for nullptr pointer: %&quot; PRId64, capacity);,-&gt;JniAbortF(&quot;NewDirectByteBuffer&quot;,\012 &quot;non-zero capacity for nullptr pointer: %&quot; PRId64, capacity);)<SUB>2606</SUB>> ]
-"13208" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2608</SUB>> ]
-"13216" [label = <(UNKNOWN,),))<SUB>2613</SUB>> ]
-"13217" [label = <(UNKNOWN,-&gt;JniAbortF(&quot;NewDirectByteBuffer&quot;,\012 &quot;buffer capacity greater than maximum jint: %&quot; PRId64,\012                                       capacity);,-&gt;JniAbortF(&quot;NewDirectByteBuffer&quot;,\012 &quot;buffer capacity greater than maximum jint: %&quot; PRId64,\012                                       capacity);)<SUB>2613</SUB>> ]
-"13218" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2616</SUB>> ]
-"13224" [label = <(UNKNOWN,jlong,jlong)<SUB>2618</SUB>> ]
-"13230" [label = <(UNKNOWN,jint,jint)<SUB>2619</SUB>> ]
-"13236" [label = <(&lt;operator&gt;.indirectFieldAccess,env-&gt;NewObject)<SUB>2621</SUB>> ]
-"13239" [label = <(&lt;operator&gt;.fieldAccess,WellKnownClasses::java_nio_DirectByteBuffer)<SUB>2621</SUB>> ]
-"13242" [label = <(&lt;operator&gt;.fieldAccess,WellKnownClasses::java_nio_DirectByteBuffer_init)<SUB>2622</SUB>> ]
-"13249" [label = <(IsExceptionPending,static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_-&gt;IsExceptionPending())<SUB>2624</SUB>> ]
-"13238" [label = <(FIELD_IDENTIFIER,NewObject,NewObject)<SUB>2621</SUB>> ]
-"13241" [label = <(FIELD_IDENTIFIER,java_nio_DirectByteBuffer,java_nio_DirectByteBuffer)<SUB>2621</SUB>> ]
-"13244" [label = <(FIELD_IDENTIFIER,java_nio_DirectByteBuffer_init,java_nio_DirectByteBuffer_init)<SUB>2622</SUB>> ]
-"13250" [label = <(&lt;operator&gt;.indirectFieldAccess,static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_-&gt;IsExceptionPending)<SUB>2624</SUB>> ]
-"13251" [label = <(&lt;operator&gt;.indirectFieldAccess,static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_)<SUB>2624</SUB>> ]
-"13256" [label = <(FIELD_IDENTIFIER,IsExceptionPending,IsExceptionPending)<SUB>2624</SUB>> ]
-"13252" [label = <(&lt;operator&gt;.cast,static_cast&lt;JNIEnvExt*&gt;(env))<SUB>2624</SUB>> ]
-"13255" [label = <(FIELD_IDENTIFIER,self_,self_)<SUB>2624</SUB>> ]
-"13253" [label = <(UNKNOWN,JNIEnvExt*,JNIEnvExt*)<SUB>2624</SUB>> ]
-"13181" [label = <(METHOD,NewDirectByteBuffer)<SUB>2599</SUB>> ]
-"13259" [label = <(METHOD_RETURN,jobject)<SUB>2599</SUB>> ]
-  "13221" -> "13230" 
-  "13227" -> "13238" 
-  "13233" -> "13253" 
-  "13247" -> "13259" 
-  "13187" -> "13192" 
-  "13187" -> "13198" 
-  "13197" -> "13206" 
-  "13197" -> "13211" 
-  "13211" -> "13216" 
-  "13211" -> "13224" 
-  "13223" -> "13221" 
-  "13229" -> "13227" 
-  "13235" -> "13233" 
-  "13248" -> "13247" 
-  "13192" -> "13193" 
-  "13193" -> "13194" 
-  "13194" -> "13259" 
-  "13198" -> "13197" 
-  "13198" -> "13201" 
-  "13201" -> "13197" 
-  "13206" -> "13207" 
-  "13207" -> "13208" 
-  "13208" -> "13259" 
-  "13216" -> "13217" 
-  "13217" -> "13218" 
-  "13218" -> "13259" 
-  "13224" -> "13223" 
-  "13230" -> "13229" 
-  "13236" -> "13241" 
-  "13239" -> "13244" 
-  "13242" -> "13235" 
-  "13249" -> "13248" 
-  "13238" -> "13236" 
-  "13241" -> "13239" 
-  "13244" -> "13242" 
-  "13250" -> "13249" 
-  "13251" -> "13256" 
-  "13256" -> "13250" 
-  "13252" -> "13255" 
-  "13255" -> "13251" 
-  "13253" -> "13252" 
-  "13181" -> "13187" 
+digraph "NewPrimitiveArray" {  
+"12955" [label = <(soa,soa(env))<SUB>2540</SUB>> ]
+"12976" [label = <(&lt;operator&gt;.assignment,* result = ArtT::Alloc(soa.Self(), length))<SUB>2545</SUB>> ]
+"12987" [label = <(RETURN,return soa.AddLocalReference&lt;JniT&gt;(result);,return soa.AddLocalReference&lt;JniT&gt;(result);)<SUB>2546</SUB>> ]
+"12958" [label = <(UNLIKELY,UNLIKELY(length &lt; 0))<SUB>2541</SUB>> ]
+"12978" [label = <(ArtT::Alloc,ArtT::Alloc(soa.Self(), length))<SUB>2545</SUB>> ]
+"12988" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;JniT&gt;(result))<SUB>2546</SUB>> ]
+"12959" [label = <(&lt;operator&gt;.lessThan,length &lt; 0)<SUB>2541</SUB>> ]
+"12963" [label = <(JniAbortF,soa.Vm()-&gt;JniAbortF(&quot;NewPrimitiveArray&quot;, &quot;negative array length: %d&quot;, length))<SUB>2542</SUB>> ]
+"12973" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2543</SUB>> ]
+"12979" [label = <(&lt;operator&gt;.fieldAccess,ArtT::Alloc)<SUB>2545</SUB>> ]
+"12982" [label = <(Self,soa.Self())<SUB>2545</SUB>> ]
+"12989" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;JniT)<SUB>2546</SUB>> ]
+"12964" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Vm()-&gt;JniAbortF)<SUB>2542</SUB>> ]
+"12981" [label = <(FIELD_IDENTIFIER,Alloc,Alloc)<SUB>2545</SUB>> ]
+"12983" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>2545</SUB>> ]
+"12990" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>2546</SUB>> ]
+"12965" [label = <(Vm,soa.Vm())<SUB>2542</SUB>> ]
+"12969" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2542</SUB>> ]
+"12985" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>2545</SUB>> ]
+"12992" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>2546</SUB>> ]
+"12966" [label = <(&lt;operator&gt;.fieldAccess,soa.Vm)<SUB>2542</SUB>> ]
+"12968" [label = <(FIELD_IDENTIFIER,Vm,Vm)<SUB>2542</SUB>> ]
+"12950" [label = <(METHOD,NewPrimitiveArray)<SUB>2539</SUB>> ]
+"12995" [label = <(METHOD_RETURN,JniT)<SUB>2539</SUB>> ]
+  "12955" -> "12959" 
+  "12976" -> "12992" 
+  "12987" -> "12995" 
+  "12958" -> "12968" 
+  "12958" -> "12981" 
+  "12978" -> "12976" 
+  "12988" -> "12987" 
+  "12959" -> "12958" 
+  "12963" -> "12973" 
+  "12973" -> "12995" 
+  "12979" -> "12985" 
+  "12982" -> "12978" 
+  "12989" -> "12988" 
+  "12964" -> "12963" 
+  "12981" -> "12979" 
+  "12983" -> "12982" 
+  "12990" -> "12989" 
+  "12965" -> "12969" 
+  "12969" -> "12964" 
+  "12985" -> "12983" 
+  "12992" -> "12990" 
+  "12966" -> "12965" 
+  "12968" -> "12966" 
+  "12950" -> "12955" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/251-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/251-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/251-cfg.dot	2023-06-07 19:33:45.517394678 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/251-cfg.dot	2023-06-07 19:33:52.087393978 +0330
@@ -1,21 +1,5 @@
-digraph "GetDirectBufferAddress" {  
-"13265" [label = <(RETURN,return reinterpret_cast&lt;void*&gt;(env-&gt;GetLongField(\012        java_buffer, WellKnownClasses::java_nio_DirectByteBuffer_effectiveDirectAddress));,return reinterpret_cast&lt;void*&gt;(env-&gt;GetLongField(\012        java_buffer, WellKnownClasses::java_nio_DirectByteBuffer_effectiveDirectAddress));)<SUB>2628</SUB>> ]
-"13266" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;void*&gt;(env-&gt;GetLongField(\012        java_buffer, WellKnownClasses::java_nio_DirectByteBuffer_effectiveDirectAddress)))<SUB>2628</SUB>> ]
-"13267" [label = <(UNKNOWN,void*,void*)<SUB>2628</SUB>> ]
-"13268" [label = <(GetLongField,env-&gt;GetLongField(\012        java_buffer, WellKnownClasses::java_nio_DirectByteBuffer_effectiveDirectAddress))<SUB>2628</SUB>> ]
-"13269" [label = <(&lt;operator&gt;.indirectFieldAccess,env-&gt;GetLongField)<SUB>2628</SUB>> ]
-"13273" [label = <(&lt;operator&gt;.fieldAccess,WellKnownClasses::java_nio_DirectByteBuffer_effectiveDirectAddress)<SUB>2629</SUB>> ]
-"13271" [label = <(FIELD_IDENTIFIER,GetLongField,GetLongField)<SUB>2628</SUB>> ]
-"13275" [label = <(FIELD_IDENTIFIER,java_nio_DirectByteBuffer_effectiveDirectAddress,java_nio_DirectByteBuffer_effectiveDirectAddress)<SUB>2629</SUB>> ]
-"13261" [label = <(METHOD,GetDirectBufferAddress)<SUB>2627</SUB>> ]
-"13276" [label = <(METHOD_RETURN,void*)<SUB>2627</SUB>> ]
-  "13265" -> "13276" 
-  "13266" -> "13265" 
-  "13267" -> "13271" 
-  "13268" -> "13266" 
-  "13269" -> "13275" 
-  "13273" -> "13268" 
-  "13271" -> "13269" 
-  "13275" -> "13273" 
-  "13261" -> "13267" 
+digraph "DecodeAndCheckArrayType" {  
+"12997" [label = <(METHOD,DecodeAndCheckArrayType)<SUB>2550</SUB>> ]
+"13003" [label = <(METHOD_RETURN,ArtArrayT*)<SUB>2550</SUB>> ]
+  "12997" -> "13003" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/252-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/252-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/252-cfg.dot	2023-06-07 19:33:45.517394678 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/252-cfg.dot	2023-06-07 19:33:52.087393978 +0330
@@ -1,21 +1,113 @@
-digraph "GetDirectBufferCapacity" {  
-"13282" [label = <(RETURN,return static_cast&lt;jlong&gt;(env-&gt;GetIntField(\012        java_buffer, WellKnownClasses::java_nio_DirectByteBuffer_capacity));,return static_cast&lt;jlong&gt;(env-&gt;GetIntField(\012        java_buffer, WellKnownClasses::java_nio_DirectByteBuffer_capacity));)<SUB>2633</SUB>> ]
-"13283" [label = <(&lt;operator&gt;.cast,static_cast&lt;jlong&gt;(env-&gt;GetIntField(\012        java_buffer, WellKnownClasses::java_nio_DirectByteBuffer_capacity)))<SUB>2633</SUB>> ]
-"13284" [label = <(UNKNOWN,jlong,jlong)<SUB>2633</SUB>> ]
-"13285" [label = <(GetIntField,env-&gt;GetIntField(\012        java_buffer, WellKnownClasses::java_nio_DirectByteBuffer_capacity))<SUB>2633</SUB>> ]
-"13286" [label = <(&lt;operator&gt;.indirectFieldAccess,env-&gt;GetIntField)<SUB>2633</SUB>> ]
-"13290" [label = <(&lt;operator&gt;.fieldAccess,WellKnownClasses::java_nio_DirectByteBuffer_capacity)<SUB>2634</SUB>> ]
-"13288" [label = <(FIELD_IDENTIFIER,GetIntField,GetIntField)<SUB>2633</SUB>> ]
-"13292" [label = <(FIELD_IDENTIFIER,java_nio_DirectByteBuffer_capacity,java_nio_DirectByteBuffer_capacity)<SUB>2634</SUB>> ]
-"13278" [label = <(METHOD,GetDirectBufferCapacity)<SUB>2632</SUB>> ]
-"13293" [label = <(METHOD_RETURN,jlong)<SUB>2632</SUB>> ]
-  "13282" -> "13293" 
-  "13283" -> "13282" 
-  "13284" -> "13288" 
-  "13285" -> "13283" 
-  "13286" -> "13292" 
-  "13290" -> "13285" 
-  "13288" -> "13286" 
-  "13292" -> "13290" 
-  "13278" -> "13284" 
+digraph "GetPrimitiveArray" {  
+"13016" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_array))<SUB>2569</SUB>> ]
+"13035" [label = <(soa,soa(env))<SUB>2570</SUB>> ]
+"13038" [label = <(&lt;operator&gt;.assignment,* array = DecodeAndCheckArrayType&lt;ArrayT, ElementT, ArtArrayT&gt;(soa, java_array,\012 &quot;GetArrayElements&quot;,\012 &quot;get&quot;))<SUB>2571</SUB>> ]
+"13040" [label = <(DecodeAndCheckArrayType&lt;ArrayT,ElementT,ArtArrayT&gt;,DecodeAndCheckArrayType&lt;ArrayT, ElementT, ArtArrayT&gt;(soa, java_array,\012 &quot;GetArrayElements&quot;,\012 &quot;get&quot;))<SUB>2571</SUB>> ]
+"13046" [label = <(UNLIKELY,UNLIKELY(array == nullptr))<SUB>2574</SUB>> ]
+"13054" [label = <(IsMovableObject,Runtime::Current()-&gt;GetHeap()-&gt;IsMovableObject(array))<SUB>2578</SUB>> ]
+"13047" [label = <(&lt;operator&gt;.equals,array == nullptr)<SUB>2574</SUB>> ]
+"13051" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2575</SUB>> ]
+"13055" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetHeap()-&gt;IsMovableObject)<SUB>2578</SUB>> ]
+"13076" [label = <(&lt;operator&gt;.assignment,component_size = sizeof(ElementT))<SUB>2582</SUB>> ]
+"13081" [label = <(&lt;operator&gt;.assignment,size = array-&gt;GetLength() * component_size)<SUB>2583</SUB>> ]
+"13090" [label = <(&lt;operator&gt;.assignment,* data = new uint64_t[RoundUp(size, 8) / 8])<SUB>2584</SUB>> ]
+"13094" [label = <(memcpy,memcpy(data, array-&gt;GetData(), size))<SUB>2585</SUB>> ]
+"13101" [label = <(RETURN,return reinterpret_cast&lt;ElementT*&gt;(data);,return reinterpret_cast&lt;ElementT*&gt;(data);)<SUB>2586</SUB>> ]
+"13020" [label = <(UNLIKELY,UNLIKELY((java_array) == nullptr))<SUB>2569</SUB>> ]
+"13056" [label = <(GetHeap,Runtime::Current()-&gt;GetHeap())<SUB>2578</SUB>> ]
+"13063" [label = <(FIELD_IDENTIFIER,IsMovableObject,IsMovableObject)<SUB>2578</SUB>> ]
+"13067" [label = <(&lt;operator&gt;.notEquals,is_copy != nullptr)<SUB>2579</SUB>> ]
+"13078" [label = <(&lt;operator&gt;.sizeOf,sizeof(ElementT))<SUB>2582</SUB>> ]
+"13083" [label = <(&lt;operator&gt;.multiplication,array-&gt;GetLength() * component_size)<SUB>2583</SUB>> ]
+"13092" [label = <(&lt;operator&gt;.new,new uint64_t[RoundUp(size, 8) / 8])<SUB>2584</SUB>> ]
+"13096" [label = <(GetData,array-&gt;GetData())<SUB>2585</SUB>> ]
+"13102" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;ElementT*&gt;(data))<SUB>2586</SUB>> ]
+"13116" [label = <(RETURN,return reinterpret_cast&lt;ElementT*&gt;(array-&gt;GetData());,return reinterpret_cast&lt;ElementT*&gt;(array-&gt;GetData());)<SUB>2591</SUB>> ]
+"13021" [label = <(&lt;operator&gt;.equals,(java_array) == nullptr)<SUB>2569</SUB>> ]
+"13025" [label = <(CHECK_NON_NULL_ARGUMENT(java_array),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_array == null&quot;))<SUB>2569</SUB>> ]
+"13032" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_array),CHECK_NON_NULL_ARGUMENT(java_array))<SUB>2569</SUB>> ]
+"13057" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetHeap)<SUB>2578</SUB>> ]
+"13071" [label = <(&lt;operator&gt;.assignment,*is_copy = JNI_TRUE)<SUB>2580</SUB>> ]
+"13084" [label = <(GetLength,array-&gt;GetLength())<SUB>2583</SUB>> ]
+"13097" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetData)<SUB>2585</SUB>> ]
+"13103" [label = <(UNKNOWN,ElementT*,ElementT*)<SUB>2586</SUB>> ]
+"13108" [label = <(&lt;operator&gt;.notEquals,is_copy != nullptr)<SUB>2588</SUB>> ]
+"13117" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;ElementT*&gt;(array-&gt;GetData()))<SUB>2591</SUB>> ]
+"13026" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2569</SUB>> ]
+"13058" [label = <(Runtime::Current,Runtime::Current())<SUB>2578</SUB>> ]
+"13062" [label = <(FIELD_IDENTIFIER,GetHeap,GetHeap)<SUB>2578</SUB>> ]
+"13072" [label = <(&lt;operator&gt;.indirection,*is_copy)<SUB>2580</SUB>> ]
+"13085" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetLength)<SUB>2583</SUB>> ]
+"13099" [label = <(FIELD_IDENTIFIER,GetData,GetData)<SUB>2585</SUB>> ]
+"13112" [label = <(&lt;operator&gt;.assignment,*is_copy = JNI_FALSE)<SUB>2589</SUB>> ]
+"13118" [label = <(UNKNOWN,ElementT*,ElementT*)<SUB>2591</SUB>> ]
+"13119" [label = <(GetData,array-&gt;GetData())<SUB>2591</SUB>> ]
+"13027" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2569</SUB>> ]
+"13029" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2569</SUB>> ]
+"13059" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>2578</SUB>> ]
+"13087" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>2583</SUB>> ]
+"13113" [label = <(&lt;operator&gt;.indirection,*is_copy)<SUB>2589</SUB>> ]
+"13120" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetData)<SUB>2591</SUB>> ]
+"13061" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>2578</SUB>> ]
+"13122" [label = <(FIELD_IDENTIFIER,GetData,GetData)<SUB>2591</SUB>> ]
+"13011" [label = <(METHOD,GetPrimitiveArray)<SUB>2568</SUB>> ]
+"13123" [label = <(METHOD_RETURN,ElementT)<SUB>2568</SUB>> ]
+  "13016" -> "13021" 
+  "13016" -> "13035" 
+  "13035" -> "13040" 
+  "13038" -> "13047" 
+  "13040" -> "13038" 
+  "13046" -> "13051" 
+  "13046" -> "13061" 
+  "13054" -> "13067" 
+  "13054" -> "13108" 
+  "13047" -> "13046" 
+  "13051" -> "13123" 
+  "13055" -> "13054" 
+  "13076" -> "13087" 
+  "13081" -> "13092" 
+  "13090" -> "13099" 
+  "13094" -> "13103" 
+  "13101" -> "13123" 
+  "13020" -> "13027" 
+  "13020" -> "13035" 
+  "13056" -> "13063" 
+  "13063" -> "13055" 
+  "13067" -> "13072" 
+  "13067" -> "13078" 
+  "13078" -> "13076" 
+  "13083" -> "13081" 
+  "13092" -> "13090" 
+  "13096" -> "13094" 
+  "13102" -> "13101" 
+  "13116" -> "13123" 
+  "13021" -> "13020" 
+  "13025" -> "13032" 
+  "13032" -> "13123" 
+  "13057" -> "13056" 
+  "13071" -> "13078" 
+  "13084" -> "13083" 
+  "13097" -> "13096" 
+  "13103" -> "13102" 
+  "13108" -> "13118" 
+  "13108" -> "13113" 
+  "13117" -> "13116" 
+  "13026" -> "13025" 
+  "13058" -> "13062" 
+  "13062" -> "13057" 
+  "13072" -> "13071" 
+  "13085" -> "13084" 
+  "13099" -> "13097" 
+  "13112" -> "13118" 
+  "13118" -> "13122" 
+  "13119" -> "13117" 
+  "13027" -> "13029" 
+  "13029" -> "13026" 
+  "13059" -> "13058" 
+  "13087" -> "13085" 
+  "13113" -> "13112" 
+  "13120" -> "13119" 
+  "13061" -> "13059" 
+  "13122" -> "13120" 
+  "13011" -> "13016" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/253-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/253-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/253-cfg.dot	2023-06-07 19:33:45.517394678 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/253-cfg.dot	2023-06-07 19:33:52.087393978 +0330
@@ -1,5 +1,38 @@
-digraph "EnsureLocalCapacityInternal" {  
-"13296" [label = <(METHOD,EnsureLocalCapacityInternal)<SUB>2661</SUB>> ]
-"13301" [label = <(METHOD_RETURN,jint)<SUB>2661</SUB>> ]
-  "13296" -> "13301" 
+digraph "ReleasePrimitiveArray" {  
+"13131" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>2597</SUB>> ]
+"13149" [label = <(soa,soa(env))<SUB>2598</SUB>> ]
+"13152" [label = <(&lt;operator&gt;.assignment,* array = DecodeAndCheckArrayType&lt;ArrayT, ElementT, ArtArrayT&gt;(soa, java_array,\012 &quot;ReleaseArrayElements&quot;,\012 &quot;release&quot;))<SUB>2599</SUB>> ]
+"13165" [label = <(ReleasePrimitiveArray,ReleasePrimitiveArray(soa, array, sizeof(ElementT), elements, mode))<SUB>2605</SUB>> ]
+"13154" [label = <(DecodeAndCheckArrayType&lt;ArrayT,ElementT,ArtArrayT&gt;,DecodeAndCheckArrayType&lt;ArrayT, ElementT, ArtArrayT&gt;(soa, java_array,\012 &quot;ReleaseArrayElements&quot;,\012 &quot;release&quot;))<SUB>2599</SUB>> ]
+"13160" [label = <(&lt;operator&gt;.equals,array == nullptr)<SUB>2602</SUB>> ]
+"13168" [label = <(&lt;operator&gt;.sizeOf,sizeof(ElementT))<SUB>2605</SUB>> ]
+"13164" [label = <(RETURN,return;,return;)<SUB>2603</SUB>> ]
+"13135" [label = <(UNLIKELY,UNLIKELY((java_array) == nullptr))<SUB>2597</SUB>> ]
+"13136" [label = <(&lt;operator&gt;.equals,(java_array) == nullptr)<SUB>2597</SUB>> ]
+"13140" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_array == null&quot;))<SUB>2597</SUB>> ]
+"13147" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>2597</SUB>> ]
+"13141" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2597</SUB>> ]
+"13142" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2597</SUB>> ]
+"13144" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2597</SUB>> ]
+"13125" [label = <(METHOD,ReleasePrimitiveArray)<SUB>2596</SUB>> ]
+"13172" [label = <(METHOD_RETURN,void)<SUB>2596</SUB>> ]
+  "13131" -> "13136" 
+  "13131" -> "13149" 
+  "13149" -> "13154" 
+  "13152" -> "13160" 
+  "13165" -> "13172" 
+  "13154" -> "13152" 
+  "13160" -> "13164" 
+  "13160" -> "13168" 
+  "13168" -> "13165" 
+  "13164" -> "13172" 
+  "13135" -> "13142" 
+  "13135" -> "13149" 
+  "13136" -> "13135" 
+  "13140" -> "13147" 
+  "13147" -> "13172" 
+  "13141" -> "13140" 
+  "13142" -> "13144" 
+  "13144" -> "13141" 
+  "13125" -> "13131" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/254-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/254-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/254-cfg.dot	2023-06-07 19:33:45.517394678 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/254-cfg.dot	2023-06-07 19:33:52.087393978 +0330
@@ -1,50 +1,5 @@
-digraph "NewPrimitiveArray" {  
-"13314" [label = <(soa,soa(env))<SUB>2680</SUB>> ]
-"13335" [label = <(&lt;operator&gt;.assignment,* result = ArtT::Alloc(soa.Self(), length))<SUB>2685</SUB>> ]
-"13346" [label = <(RETURN,return soa.AddLocalReference&lt;JniT&gt;(result);,return soa.AddLocalReference&lt;JniT&gt;(result);)<SUB>2686</SUB>> ]
-"13317" [label = <(UNLIKELY,UNLIKELY(length &lt; 0))<SUB>2681</SUB>> ]
-"13337" [label = <(ArtT::Alloc,ArtT::Alloc(soa.Self(), length))<SUB>2685</SUB>> ]
-"13347" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;JniT&gt;(result))<SUB>2686</SUB>> ]
-"13318" [label = <(&lt;operator&gt;.lessThan,length &lt; 0)<SUB>2681</SUB>> ]
-"13322" [label = <(JniAbortF,soa.Vm()-&gt;JniAbortF(&quot;NewPrimitiveArray&quot;, &quot;negative array length: %d&quot;, length))<SUB>2682</SUB>> ]
-"13332" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2683</SUB>> ]
-"13338" [label = <(&lt;operator&gt;.fieldAccess,ArtT::Alloc)<SUB>2685</SUB>> ]
-"13341" [label = <(Self,soa.Self())<SUB>2685</SUB>> ]
-"13348" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;JniT)<SUB>2686</SUB>> ]
-"13323" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Vm()-&gt;JniAbortF)<SUB>2682</SUB>> ]
-"13340" [label = <(FIELD_IDENTIFIER,Alloc,Alloc)<SUB>2685</SUB>> ]
-"13342" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>2685</SUB>> ]
-"13349" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>2686</SUB>> ]
-"13324" [label = <(Vm,soa.Vm())<SUB>2682</SUB>> ]
-"13328" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2682</SUB>> ]
-"13344" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>2685</SUB>> ]
-"13351" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>2686</SUB>> ]
-"13325" [label = <(&lt;operator&gt;.fieldAccess,soa.Vm)<SUB>2682</SUB>> ]
-"13327" [label = <(FIELD_IDENTIFIER,Vm,Vm)<SUB>2682</SUB>> ]
-"13309" [label = <(METHOD,NewPrimitiveArray)<SUB>2679</SUB>> ]
-"13354" [label = <(METHOD_RETURN,JniT)<SUB>2679</SUB>> ]
-  "13314" -> "13318" 
-  "13335" -> "13351" 
-  "13346" -> "13354" 
-  "13317" -> "13327" 
-  "13317" -> "13340" 
-  "13337" -> "13335" 
-  "13347" -> "13346" 
-  "13318" -> "13317" 
-  "13322" -> "13332" 
-  "13332" -> "13354" 
-  "13338" -> "13344" 
-  "13341" -> "13337" 
-  "13348" -> "13347" 
-  "13323" -> "13322" 
-  "13340" -> "13338" 
-  "13342" -> "13341" 
-  "13349" -> "13348" 
-  "13324" -> "13328" 
-  "13328" -> "13323" 
-  "13344" -> "13342" 
-  "13351" -> "13349" 
-  "13325" -> "13324" 
-  "13327" -> "13325" 
-  "13309" -> "13314" 
+digraph "ReleasePrimitiveArray" {  
+"13174" [label = <(METHOD,ReleasePrimitiveArray)<SUB>2608</SUB>> ]
+"13181" [label = <(METHOD_RETURN,void)<SUB>2608</SUB>> ]
+  "13174" -> "13181" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/255-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/255-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/255-cfg.dot	2023-06-07 19:33:45.517394678 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/255-cfg.dot	2023-06-07 19:33:52.097393976 +0330
@@ -1,5 +1,94 @@
-digraph "DecodeAndCheckArrayType" {  
-"13356" [label = <(METHOD,DecodeAndCheckArrayType)<SUB>2690</SUB>> ]
-"13362" [label = <(METHOD_RETURN,ArtArrayT*)<SUB>2690</SUB>> ]
-  "13356" -> "13362" 
+digraph "GetPrimitiveArrayRegion" {  
+"13220" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>2650</SUB>> ]
+"13238" [label = <(soa,soa(env))<SUB>2651</SUB>> ]
+"13241" [label = <(&lt;operator&gt;.assignment,* array =\012 DecodeAndCheckArrayType&lt;JArrayT, ElementT, ArtArrayT&gt;(soa, java_array,\012 &quot;GetPrimitiveArrayRegion&quot;,\012 &quot;get region of&quot;))<SUB>2652</SUB>> ]
+"13243" [label = <(DecodeAndCheckArrayType&lt;JArrayT,ElementT,ArtArrayT&gt;,DecodeAndCheckArrayType&lt;JArrayT, ElementT, ArtArrayT&gt;(soa, java_array,\012 &quot;GetPrimitiveArrayRegion&quot;,\012 &quot;get region of&quot;))<SUB>2653</SUB>> ]
+"13249" [label = <(&lt;operator&gt;.notEquals,array != nullptr)<SUB>2656</SUB>> ]
+"13224" [label = <(UNLIKELY,UNLIKELY((java_array) == nullptr))<SUB>2650</SUB>> ]
+"13254" [label = <(&lt;operator&gt;.logicalOr,start &lt; 0 || length &lt; 0 || length &gt; array-&gt;GetLength() - start)<SUB>2657</SUB>> ]
+"13225" [label = <(&lt;operator&gt;.equals,(java_array) == nullptr)<SUB>2650</SUB>> ]
+"13229" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_array == null&quot;))<SUB>2650</SUB>> ]
+"13236" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>2650</SUB>> ]
+"13255" [label = <(&lt;operator&gt;.logicalOr,start &lt; 0 || length &lt; 0)<SUB>2657</SUB>> ]
+"13262" [label = <(&lt;operator&gt;.greaterThan,length &gt; array-&gt;GetLength() - start)<SUB>2657</SUB>> ]
+"13271" [label = <(ThrowAIOOBE,ThrowAIOOBE(soa, array, start, length, &quot;src&quot;))<SUB>2658</SUB>> ]
+"13230" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2650</SUB>> ]
+"13256" [label = <(&lt;operator&gt;.lessThan,start &lt; 0)<SUB>2657</SUB>> ]
+"13259" [label = <(&lt;operator&gt;.lessThan,length &lt; 0)<SUB>2657</SUB>> ]
+"13264" [label = <(&lt;operator&gt;.subtraction,array-&gt;GetLength() - start)<SUB>2657</SUB>> ]
+"13279" [label = <(CHECK_NON_NULL_MEMCPY_ARGUMENT,CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf))<SUB>2660</SUB>> ]
+"13302" [label = <(&lt;operator&gt;.assignment,* data = array-&gt;GetData())<SUB>2661</SUB>> ]
+"13308" [label = <(memcpy,memcpy(buf, data + start, length * sizeof(ElementT)))<SUB>2662</SUB>> ]
+"13231" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2650</SUB>> ]
+"13233" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2650</SUB>> ]
+"13265" [label = <(GetLength,array-&gt;GetLength())<SUB>2657</SUB>> ]
+"13304" [label = <(GetData,array-&gt;GetData())<SUB>2661</SUB>> ]
+"13310" [label = <(&lt;operator&gt;.addition,data + start)<SUB>2662</SUB>> ]
+"13313" [label = <(&lt;operator&gt;.multiplication,length * sizeof(ElementT))<SUB>2662</SUB>> ]
+"13266" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetLength)<SUB>2657</SUB>> ]
+"13305" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetData)<SUB>2661</SUB>> ]
+"13315" [label = <(&lt;operator&gt;.sizeOf,sizeof(ElementT))<SUB>2662</SUB>> ]
+"13268" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>2657</SUB>> ]
+"13284" [label = <(UNLIKELY,UNLIKELY((length) != 0 &amp;&amp; (buf) == nullptr))<SUB>2660</SUB>> ]
+"13307" [label = <(FIELD_IDENTIFIER,GetData,GetData)<SUB>2661</SUB>> ]
+"13285" [label = <(&lt;operator&gt;.logicalAnd,(length) != 0 &amp;&amp; (buf) == nullptr)<SUB>2660</SUB>> ]
+"13293" [label = <(CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;buf == null&quot;))<SUB>2660</SUB>> ]
+"13300" [label = <(RETURN,CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf),CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf))<SUB>2660</SUB>> ]
+"13286" [label = <(&lt;operator&gt;.notEquals,(length) != 0)<SUB>2660</SUB>> ]
+"13289" [label = <(&lt;operator&gt;.equals,(buf) == nullptr)<SUB>2660</SUB>> ]
+"13294" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2660</SUB>> ]
+"13295" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2660</SUB>> ]
+"13297" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2660</SUB>> ]
+"13213" [label = <(METHOD,GetPrimitiveArrayRegion)<SUB>2648</SUB>> ]
+"13317" [label = <(METHOD_RETURN,void)<SUB>2648</SUB>> ]
+  "13220" -> "13225" 
+  "13220" -> "13238" 
+  "13238" -> "13243" 
+  "13241" -> "13249" 
+  "13243" -> "13241" 
+  "13249" -> "13317" 
+  "13249" -> "13256" 
+  "13224" -> "13231" 
+  "13224" -> "13238" 
+  "13254" -> "13271" 
+  "13254" -> "13279" 
+  "13225" -> "13224" 
+  "13229" -> "13236" 
+  "13236" -> "13317" 
+  "13255" -> "13254" 
+  "13255" -> "13268" 
+  "13262" -> "13254" 
+  "13271" -> "13317" 
+  "13230" -> "13229" 
+  "13256" -> "13255" 
+  "13256" -> "13259" 
+  "13259" -> "13255" 
+  "13264" -> "13262" 
+  "13279" -> "13286" 
+  "13279" -> "13307" 
+  "13302" -> "13310" 
+  "13308" -> "13317" 
+  "13231" -> "13233" 
+  "13233" -> "13230" 
+  "13265" -> "13264" 
+  "13304" -> "13302" 
+  "13310" -> "13315" 
+  "13313" -> "13308" 
+  "13266" -> "13265" 
+  "13305" -> "13304" 
+  "13315" -> "13313" 
+  "13268" -> "13266" 
+  "13284" -> "13295" 
+  "13284" -> "13307" 
+  "13307" -> "13305" 
+  "13285" -> "13284" 
+  "13293" -> "13300" 
+  "13300" -> "13317" 
+  "13286" -> "13285" 
+  "13286" -> "13289" 
+  "13289" -> "13285" 
+  "13294" -> "13293" 
+  "13295" -> "13297" 
+  "13297" -> "13294" 
+  "13213" -> "13220" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/256-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/256-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/256-cfg.dot	2023-06-07 19:33:45.517394678 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/256-cfg.dot	2023-06-07 19:33:52.097393976 +0330
@@ -1,113 +1,94 @@
-digraph "GetPrimitiveArray" {  
-"13375" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_array))<SUB>2709</SUB>> ]
-"13394" [label = <(soa,soa(env))<SUB>2710</SUB>> ]
-"13397" [label = <(&lt;operator&gt;.assignment,* array = DecodeAndCheckArrayType&lt;ArrayT, ElementT, ArtArrayT&gt;(soa, java_array,\012 &quot;GetArrayElements&quot;,\012 &quot;get&quot;))<SUB>2711</SUB>> ]
-"13399" [label = <(DecodeAndCheckArrayType&lt;ArrayT,ElementT,ArtArrayT&gt;,DecodeAndCheckArrayType&lt;ArrayT, ElementT, ArtArrayT&gt;(soa, java_array,\012 &quot;GetArrayElements&quot;,\012 &quot;get&quot;))<SUB>2711</SUB>> ]
-"13405" [label = <(UNLIKELY,UNLIKELY(array == nullptr))<SUB>2714</SUB>> ]
-"13413" [label = <(IsMovableObject,Runtime::Current()-&gt;GetHeap()-&gt;IsMovableObject(array))<SUB>2718</SUB>> ]
-"13406" [label = <(&lt;operator&gt;.equals,array == nullptr)<SUB>2714</SUB>> ]
-"13410" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2715</SUB>> ]
-"13414" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetHeap()-&gt;IsMovableObject)<SUB>2718</SUB>> ]
-"13435" [label = <(&lt;operator&gt;.assignment,component_size = sizeof(ElementT))<SUB>2722</SUB>> ]
-"13440" [label = <(&lt;operator&gt;.assignment,size = array-&gt;GetLength() * component_size)<SUB>2723</SUB>> ]
-"13449" [label = <(&lt;operator&gt;.assignment,* data = new uint64_t[RoundUp(size, 8) / 8])<SUB>2724</SUB>> ]
-"13453" [label = <(memcpy,memcpy(data, array-&gt;GetData(), size))<SUB>2725</SUB>> ]
-"13460" [label = <(RETURN,return reinterpret_cast&lt;ElementT*&gt;(data);,return reinterpret_cast&lt;ElementT*&gt;(data);)<SUB>2726</SUB>> ]
-"13379" [label = <(UNLIKELY,UNLIKELY((java_array) == nullptr))<SUB>2709</SUB>> ]
-"13415" [label = <(GetHeap,Runtime::Current()-&gt;GetHeap())<SUB>2718</SUB>> ]
-"13422" [label = <(FIELD_IDENTIFIER,IsMovableObject,IsMovableObject)<SUB>2718</SUB>> ]
-"13426" [label = <(&lt;operator&gt;.notEquals,is_copy != nullptr)<SUB>2719</SUB>> ]
-"13437" [label = <(&lt;operator&gt;.sizeOf,sizeof(ElementT))<SUB>2722</SUB>> ]
-"13442" [label = <(&lt;operator&gt;.multiplication,array-&gt;GetLength() * component_size)<SUB>2723</SUB>> ]
-"13451" [label = <(&lt;operator&gt;.new,new uint64_t[RoundUp(size, 8) / 8])<SUB>2724</SUB>> ]
-"13455" [label = <(GetData,array-&gt;GetData())<SUB>2725</SUB>> ]
-"13461" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;ElementT*&gt;(data))<SUB>2726</SUB>> ]
-"13475" [label = <(RETURN,return reinterpret_cast&lt;ElementT*&gt;(array-&gt;GetData());,return reinterpret_cast&lt;ElementT*&gt;(array-&gt;GetData());)<SUB>2731</SUB>> ]
-"13380" [label = <(&lt;operator&gt;.equals,(java_array) == nullptr)<SUB>2709</SUB>> ]
-"13384" [label = <(CHECK_NON_NULL_ARGUMENT(java_array),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_array == null&quot;))<SUB>2709</SUB>> ]
-"13391" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_array),CHECK_NON_NULL_ARGUMENT(java_array))<SUB>2709</SUB>> ]
-"13416" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetHeap)<SUB>2718</SUB>> ]
-"13430" [label = <(&lt;operator&gt;.assignment,*is_copy = JNI_TRUE)<SUB>2720</SUB>> ]
-"13443" [label = <(GetLength,array-&gt;GetLength())<SUB>2723</SUB>> ]
-"13456" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetData)<SUB>2725</SUB>> ]
-"13462" [label = <(UNKNOWN,ElementT*,ElementT*)<SUB>2726</SUB>> ]
-"13467" [label = <(&lt;operator&gt;.notEquals,is_copy != nullptr)<SUB>2728</SUB>> ]
-"13476" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;ElementT*&gt;(array-&gt;GetData()))<SUB>2731</SUB>> ]
-"13385" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2709</SUB>> ]
-"13417" [label = <(Runtime::Current,Runtime::Current())<SUB>2718</SUB>> ]
-"13421" [label = <(FIELD_IDENTIFIER,GetHeap,GetHeap)<SUB>2718</SUB>> ]
-"13431" [label = <(&lt;operator&gt;.indirection,*is_copy)<SUB>2720</SUB>> ]
-"13444" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetLength)<SUB>2723</SUB>> ]
-"13458" [label = <(FIELD_IDENTIFIER,GetData,GetData)<SUB>2725</SUB>> ]
-"13471" [label = <(&lt;operator&gt;.assignment,*is_copy = JNI_FALSE)<SUB>2729</SUB>> ]
-"13477" [label = <(UNKNOWN,ElementT*,ElementT*)<SUB>2731</SUB>> ]
-"13478" [label = <(GetData,array-&gt;GetData())<SUB>2731</SUB>> ]
-"13386" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2709</SUB>> ]
-"13388" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2709</SUB>> ]
-"13418" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>2718</SUB>> ]
-"13446" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>2723</SUB>> ]
-"13472" [label = <(&lt;operator&gt;.indirection,*is_copy)<SUB>2729</SUB>> ]
-"13479" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetData)<SUB>2731</SUB>> ]
-"13420" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>2718</SUB>> ]
-"13481" [label = <(FIELD_IDENTIFIER,GetData,GetData)<SUB>2731</SUB>> ]
-"13370" [label = <(METHOD,GetPrimitiveArray)<SUB>2708</SUB>> ]
-"13482" [label = <(METHOD_RETURN,ElementT)<SUB>2708</SUB>> ]
-  "13375" -> "13380" 
-  "13375" -> "13394" 
-  "13394" -> "13399" 
-  "13397" -> "13406" 
-  "13399" -> "13397" 
-  "13405" -> "13410" 
-  "13405" -> "13420" 
-  "13413" -> "13426" 
-  "13413" -> "13467" 
-  "13406" -> "13405" 
-  "13410" -> "13482" 
-  "13414" -> "13413" 
-  "13435" -> "13446" 
-  "13440" -> "13451" 
-  "13449" -> "13458" 
-  "13453" -> "13462" 
-  "13460" -> "13482" 
-  "13379" -> "13386" 
-  "13379" -> "13394" 
-  "13415" -> "13422" 
-  "13422" -> "13414" 
-  "13426" -> "13431" 
-  "13426" -> "13437" 
-  "13437" -> "13435" 
-  "13442" -> "13440" 
-  "13451" -> "13449" 
-  "13455" -> "13453" 
-  "13461" -> "13460" 
-  "13475" -> "13482" 
-  "13380" -> "13379" 
-  "13384" -> "13391" 
-  "13391" -> "13482" 
-  "13416" -> "13415" 
-  "13430" -> "13437" 
-  "13443" -> "13442" 
-  "13456" -> "13455" 
-  "13462" -> "13461" 
-  "13467" -> "13477" 
-  "13467" -> "13472" 
-  "13476" -> "13475" 
-  "13385" -> "13384" 
-  "13417" -> "13421" 
-  "13421" -> "13416" 
-  "13431" -> "13430" 
-  "13444" -> "13443" 
-  "13458" -> "13456" 
-  "13471" -> "13477" 
-  "13477" -> "13481" 
-  "13478" -> "13476" 
-  "13386" -> "13388" 
-  "13388" -> "13385" 
-  "13418" -> "13417" 
-  "13446" -> "13444" 
-  "13472" -> "13471" 
-  "13479" -> "13478" 
-  "13420" -> "13418" 
-  "13481" -> "13479" 
-  "13370" -> "13375" 
+digraph "SetPrimitiveArrayRegion" {  
+"13326" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>2670</SUB>> ]
+"13344" [label = <(soa,soa(env))<SUB>2671</SUB>> ]
+"13347" [label = <(&lt;operator&gt;.assignment,* array =\012 DecodeAndCheckArrayType&lt;JArrayT, ElementT, ArtArrayT&gt;(soa, java_array,\012 &quot;SetPrimitiveArrayRegion&quot;,\012 &quot;set region of&quot;))<SUB>2672</SUB>> ]
+"13349" [label = <(DecodeAndCheckArrayType&lt;JArrayT,ElementT,ArtArrayT&gt;,DecodeAndCheckArrayType&lt;JArrayT, ElementT, ArtArrayT&gt;(soa, java_array,\012 &quot;SetPrimitiveArrayRegion&quot;,\012 &quot;set region of&quot;))<SUB>2673</SUB>> ]
+"13355" [label = <(&lt;operator&gt;.notEquals,array != nullptr)<SUB>2676</SUB>> ]
+"13330" [label = <(UNLIKELY,UNLIKELY((java_array) == nullptr))<SUB>2670</SUB>> ]
+"13360" [label = <(&lt;operator&gt;.logicalOr,start &lt; 0 || length &lt; 0 || length &gt; array-&gt;GetLength() - start)<SUB>2677</SUB>> ]
+"13331" [label = <(&lt;operator&gt;.equals,(java_array) == nullptr)<SUB>2670</SUB>> ]
+"13335" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_array == null&quot;))<SUB>2670</SUB>> ]
+"13342" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>2670</SUB>> ]
+"13361" [label = <(&lt;operator&gt;.logicalOr,start &lt; 0 || length &lt; 0)<SUB>2677</SUB>> ]
+"13368" [label = <(&lt;operator&gt;.greaterThan,length &gt; array-&gt;GetLength() - start)<SUB>2677</SUB>> ]
+"13377" [label = <(ThrowAIOOBE,ThrowAIOOBE(soa, array, start, length, &quot;dst&quot;))<SUB>2678</SUB>> ]
+"13336" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2670</SUB>> ]
+"13362" [label = <(&lt;operator&gt;.lessThan,start &lt; 0)<SUB>2677</SUB>> ]
+"13365" [label = <(&lt;operator&gt;.lessThan,length &lt; 0)<SUB>2677</SUB>> ]
+"13370" [label = <(&lt;operator&gt;.subtraction,array-&gt;GetLength() - start)<SUB>2677</SUB>> ]
+"13385" [label = <(CHECK_NON_NULL_MEMCPY_ARGUMENT,CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf))<SUB>2680</SUB>> ]
+"13408" [label = <(&lt;operator&gt;.assignment,* data = array-&gt;GetData())<SUB>2681</SUB>> ]
+"13414" [label = <(memcpy,memcpy(data + start, buf, length * sizeof(ElementT)))<SUB>2682</SUB>> ]
+"13337" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2670</SUB>> ]
+"13339" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2670</SUB>> ]
+"13371" [label = <(GetLength,array-&gt;GetLength())<SUB>2677</SUB>> ]
+"13410" [label = <(GetData,array-&gt;GetData())<SUB>2681</SUB>> ]
+"13415" [label = <(&lt;operator&gt;.addition,data + start)<SUB>2682</SUB>> ]
+"13419" [label = <(&lt;operator&gt;.multiplication,length * sizeof(ElementT))<SUB>2682</SUB>> ]
+"13372" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetLength)<SUB>2677</SUB>> ]
+"13411" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetData)<SUB>2681</SUB>> ]
+"13421" [label = <(&lt;operator&gt;.sizeOf,sizeof(ElementT))<SUB>2682</SUB>> ]
+"13374" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>2677</SUB>> ]
+"13390" [label = <(UNLIKELY,UNLIKELY((length) != 0 &amp;&amp; (buf) == nullptr))<SUB>2680</SUB>> ]
+"13413" [label = <(FIELD_IDENTIFIER,GetData,GetData)<SUB>2681</SUB>> ]
+"13391" [label = <(&lt;operator&gt;.logicalAnd,(length) != 0 &amp;&amp; (buf) == nullptr)<SUB>2680</SUB>> ]
+"13399" [label = <(CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;buf == null&quot;))<SUB>2680</SUB>> ]
+"13406" [label = <(RETURN,CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf),CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf))<SUB>2680</SUB>> ]
+"13392" [label = <(&lt;operator&gt;.notEquals,(length) != 0)<SUB>2680</SUB>> ]
+"13395" [label = <(&lt;operator&gt;.equals,(buf) == nullptr)<SUB>2680</SUB>> ]
+"13400" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2680</SUB>> ]
+"13401" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2680</SUB>> ]
+"13403" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2680</SUB>> ]
+"13319" [label = <(METHOD,SetPrimitiveArrayRegion)<SUB>2668</SUB>> ]
+"13423" [label = <(METHOD_RETURN,void)<SUB>2668</SUB>> ]
+  "13326" -> "13331" 
+  "13326" -> "13344" 
+  "13344" -> "13349" 
+  "13347" -> "13355" 
+  "13349" -> "13347" 
+  "13355" -> "13423" 
+  "13355" -> "13362" 
+  "13330" -> "13337" 
+  "13330" -> "13344" 
+  "13360" -> "13377" 
+  "13360" -> "13385" 
+  "13331" -> "13330" 
+  "13335" -> "13342" 
+  "13342" -> "13423" 
+  "13361" -> "13360" 
+  "13361" -> "13374" 
+  "13368" -> "13360" 
+  "13377" -> "13423" 
+  "13336" -> "13335" 
+  "13362" -> "13361" 
+  "13362" -> "13365" 
+  "13365" -> "13361" 
+  "13370" -> "13368" 
+  "13385" -> "13392" 
+  "13385" -> "13413" 
+  "13408" -> "13415" 
+  "13414" -> "13423" 
+  "13337" -> "13339" 
+  "13339" -> "13336" 
+  "13371" -> "13370" 
+  "13410" -> "13408" 
+  "13415" -> "13421" 
+  "13419" -> "13414" 
+  "13372" -> "13371" 
+  "13411" -> "13410" 
+  "13421" -> "13419" 
+  "13374" -> "13372" 
+  "13390" -> "13401" 
+  "13390" -> "13413" 
+  "13413" -> "13411" 
+  "13391" -> "13390" 
+  "13399" -> "13406" 
+  "13406" -> "13423" 
+  "13392" -> "13391" 
+  "13392" -> "13395" 
+  "13395" -> "13391" 
+  "13400" -> "13399" 
+  "13401" -> "13403" 
+  "13403" -> "13400" 
+  "13319" -> "13326" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/257-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/257-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/257-cfg.dot	2023-06-07 19:33:45.517394678 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/257-cfg.dot	2023-06-07 19:33:52.097393976 +0330
@@ -1,38 +1,9 @@
-digraph "ReleasePrimitiveArray" {  
-"13490" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>2737</SUB>> ]
-"13508" [label = <(soa,soa(env))<SUB>2738</SUB>> ]
-"13511" [label = <(&lt;operator&gt;.assignment,* array = DecodeAndCheckArrayType&lt;ArrayT, ElementT, ArtArrayT&gt;(soa, java_array,\012 &quot;ReleaseArrayElements&quot;,\012 &quot;release&quot;))<SUB>2739</SUB>> ]
-"13524" [label = <(ReleasePrimitiveArray,ReleasePrimitiveArray(soa, array, sizeof(ElementT), elements, mode))<SUB>2745</SUB>> ]
-"13513" [label = <(DecodeAndCheckArrayType&lt;ArrayT,ElementT,ArtArrayT&gt;,DecodeAndCheckArrayType&lt;ArrayT, ElementT, ArtArrayT&gt;(soa, java_array,\012 &quot;ReleaseArrayElements&quot;,\012 &quot;release&quot;))<SUB>2739</SUB>> ]
-"13519" [label = <(&lt;operator&gt;.equals,array == nullptr)<SUB>2742</SUB>> ]
-"13527" [label = <(&lt;operator&gt;.sizeOf,sizeof(ElementT))<SUB>2745</SUB>> ]
-"13523" [label = <(RETURN,return;,return;)<SUB>2743</SUB>> ]
-"13494" [label = <(UNLIKELY,UNLIKELY((java_array) == nullptr))<SUB>2737</SUB>> ]
-"13495" [label = <(&lt;operator&gt;.equals,(java_array) == nullptr)<SUB>2737</SUB>> ]
-"13499" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_array == null&quot;))<SUB>2737</SUB>> ]
-"13506" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>2737</SUB>> ]
-"13500" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2737</SUB>> ]
-"13501" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2737</SUB>> ]
-"13503" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2737</SUB>> ]
-"13484" [label = <(METHOD,ReleasePrimitiveArray)<SUB>2736</SUB>> ]
-"13531" [label = <(METHOD_RETURN,void)<SUB>2736</SUB>> ]
-  "13490" -> "13495" 
-  "13490" -> "13508" 
-  "13508" -> "13513" 
-  "13511" -> "13519" 
-  "13524" -> "13531" 
-  "13513" -> "13511" 
-  "13519" -> "13523" 
-  "13519" -> "13527" 
-  "13527" -> "13524" 
-  "13523" -> "13531" 
-  "13494" -> "13501" 
-  "13494" -> "13508" 
-  "13495" -> "13494" 
-  "13499" -> "13506" 
-  "13506" -> "13531" 
-  "13500" -> "13499" 
-  "13501" -> "13503" 
-  "13503" -> "13500" 
-  "13484" -> "13490" 
+digraph "GetJniNativeInterface" {  
+"14123" [label = <(RETURN,return &amp;gJniNativeInterface;,return &amp;gJniNativeInterface;)<SUB>2925</SUB>> ]
+"14124" [label = <(&lt;operator&gt;.addressOf,&amp;gJniNativeInterface)<SUB>2925</SUB>> ]
+"14121" [label = <(METHOD,GetJniNativeInterface)<SUB>2924</SUB>> ]
+"14126" [label = <(METHOD_RETURN,JNINativeInterface)<SUB>2924</SUB>> ]
+  "14123" -> "14126" 
+  "14124" -> "14123" 
+  "14121" -> "14124" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/258-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/258-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/258-cfg.dot	2023-06-07 19:33:45.517394678 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/258-cfg.dot	2023-06-07 19:33:52.097393976 +0330
@@ -1,5 +1,5 @@
-digraph "ReleasePrimitiveArray" {  
-"13533" [label = <(METHOD,ReleasePrimitiveArray)<SUB>2748</SUB>> ]
-"13540" [label = <(METHOD_RETURN,void)<SUB>2748</SUB>> ]
-  "13533" -> "13540" 
+digraph "gJniSleepForeverStub" {  
+"14128" [label = <(METHOD,gJniSleepForeverStub)<SUB>2928</SUB>> ]
+"14130" [label = <(METHOD_RETURN,void)<SUB>2928</SUB>> ]
+  "14128" -> "14130" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/259-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/259-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/259-cfg.dot	2023-06-07 19:33:45.517394678 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/259-cfg.dot	2023-06-07 19:33:52.097393976 +0330
@@ -1,94 +1,13 @@
-digraph "GetPrimitiveArrayRegion" {  
-"13579" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>2790</SUB>> ]
-"13597" [label = <(soa,soa(env))<SUB>2791</SUB>> ]
-"13600" [label = <(&lt;operator&gt;.assignment,* array =\012 DecodeAndCheckArrayType&lt;JArrayT, ElementT, ArtArrayT&gt;(soa, java_array,\012 &quot;GetPrimitiveArrayRegion&quot;,\012 &quot;get region of&quot;))<SUB>2792</SUB>> ]
-"13602" [label = <(DecodeAndCheckArrayType&lt;JArrayT,ElementT,ArtArrayT&gt;,DecodeAndCheckArrayType&lt;JArrayT, ElementT, ArtArrayT&gt;(soa, java_array,\012 &quot;GetPrimitiveArrayRegion&quot;,\012 &quot;get region of&quot;))<SUB>2793</SUB>> ]
-"13608" [label = <(&lt;operator&gt;.notEquals,array != nullptr)<SUB>2796</SUB>> ]
-"13583" [label = <(UNLIKELY,UNLIKELY((java_array) == nullptr))<SUB>2790</SUB>> ]
-"13613" [label = <(&lt;operator&gt;.logicalOr,start &lt; 0 || length &lt; 0 || length &gt; array-&gt;GetLength() - start)<SUB>2797</SUB>> ]
-"13584" [label = <(&lt;operator&gt;.equals,(java_array) == nullptr)<SUB>2790</SUB>> ]
-"13588" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_array == null&quot;))<SUB>2790</SUB>> ]
-"13595" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>2790</SUB>> ]
-"13614" [label = <(&lt;operator&gt;.logicalOr,start &lt; 0 || length &lt; 0)<SUB>2797</SUB>> ]
-"13621" [label = <(&lt;operator&gt;.greaterThan,length &gt; array-&gt;GetLength() - start)<SUB>2797</SUB>> ]
-"13630" [label = <(ThrowAIOOBE,ThrowAIOOBE(soa, array, start, length, &quot;src&quot;))<SUB>2798</SUB>> ]
-"13589" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2790</SUB>> ]
-"13615" [label = <(&lt;operator&gt;.lessThan,start &lt; 0)<SUB>2797</SUB>> ]
-"13618" [label = <(&lt;operator&gt;.lessThan,length &lt; 0)<SUB>2797</SUB>> ]
-"13623" [label = <(&lt;operator&gt;.subtraction,array-&gt;GetLength() - start)<SUB>2797</SUB>> ]
-"13638" [label = <(CHECK_NON_NULL_MEMCPY_ARGUMENT,CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf))<SUB>2800</SUB>> ]
-"13661" [label = <(&lt;operator&gt;.assignment,* data = array-&gt;GetData())<SUB>2801</SUB>> ]
-"13667" [label = <(memcpy,memcpy(buf, data + start, length * sizeof(ElementT)))<SUB>2802</SUB>> ]
-"13590" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2790</SUB>> ]
-"13592" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2790</SUB>> ]
-"13624" [label = <(GetLength,array-&gt;GetLength())<SUB>2797</SUB>> ]
-"13663" [label = <(GetData,array-&gt;GetData())<SUB>2801</SUB>> ]
-"13669" [label = <(&lt;operator&gt;.addition,data + start)<SUB>2802</SUB>> ]
-"13672" [label = <(&lt;operator&gt;.multiplication,length * sizeof(ElementT))<SUB>2802</SUB>> ]
-"13625" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetLength)<SUB>2797</SUB>> ]
-"13664" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetData)<SUB>2801</SUB>> ]
-"13674" [label = <(&lt;operator&gt;.sizeOf,sizeof(ElementT))<SUB>2802</SUB>> ]
-"13627" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>2797</SUB>> ]
-"13643" [label = <(UNLIKELY,UNLIKELY((length) != 0 &amp;&amp; (buf) == nullptr))<SUB>2800</SUB>> ]
-"13666" [label = <(FIELD_IDENTIFIER,GetData,GetData)<SUB>2801</SUB>> ]
-"13644" [label = <(&lt;operator&gt;.logicalAnd,(length) != 0 &amp;&amp; (buf) == nullptr)<SUB>2800</SUB>> ]
-"13652" [label = <(CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;buf == null&quot;))<SUB>2800</SUB>> ]
-"13659" [label = <(RETURN,CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf),CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf))<SUB>2800</SUB>> ]
-"13645" [label = <(&lt;operator&gt;.notEquals,(length) != 0)<SUB>2800</SUB>> ]
-"13648" [label = <(&lt;operator&gt;.equals,(buf) == nullptr)<SUB>2800</SUB>> ]
-"13653" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2800</SUB>> ]
-"13654" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2800</SUB>> ]
-"13656" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2800</SUB>> ]
-"13572" [label = <(METHOD,GetPrimitiveArrayRegion)<SUB>2788</SUB>> ]
-"13676" [label = <(METHOD_RETURN,void)<SUB>2788</SUB>> ]
-  "13579" -> "13584" 
-  "13579" -> "13597" 
-  "13597" -> "13602" 
-  "13600" -> "13608" 
-  "13602" -> "13600" 
-  "13608" -> "13676" 
-  "13608" -> "13615" 
-  "13583" -> "13590" 
-  "13583" -> "13597" 
-  "13613" -> "13630" 
-  "13613" -> "13638" 
-  "13584" -> "13583" 
-  "13588" -> "13595" 
-  "13595" -> "13676" 
-  "13614" -> "13613" 
-  "13614" -> "13627" 
-  "13621" -> "13613" 
-  "13630" -> "13676" 
-  "13589" -> "13588" 
-  "13615" -> "13614" 
-  "13615" -> "13618" 
-  "13618" -> "13614" 
-  "13623" -> "13621" 
-  "13638" -> "13645" 
-  "13638" -> "13666" 
-  "13661" -> "13669" 
-  "13667" -> "13676" 
-  "13590" -> "13592" 
-  "13592" -> "13589" 
-  "13624" -> "13623" 
-  "13663" -> "13661" 
-  "13669" -> "13674" 
-  "13672" -> "13667" 
-  "13625" -> "13624" 
-  "13664" -> "13663" 
-  "13674" -> "13672" 
-  "13627" -> "13625" 
-  "13643" -> "13654" 
-  "13643" -> "13666" 
-  "13666" -> "13664" 
-  "13644" -> "13643" 
-  "13652" -> "13659" 
-  "13659" -> "13676" 
-  "13645" -> "13644" 
-  "13645" -> "13648" 
-  "13648" -> "13644" 
-  "13653" -> "13652" 
-  "13654" -> "13656" 
-  "13656" -> "13653" 
-  "13572" -> "13579" 
+digraph "GetRuntimeShutdownNativeInterface" {  
+"14370" [label = <(RETURN,return reinterpret_cast&lt;JNINativeInterface*&gt;(&amp;gJniSleepForeverStub);,return reinterpret_cast&lt;JNINativeInterface*&gt;(&amp;gJniSleepForeverStub);)<SUB>3165</SUB>> ]
+"14371" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;JNINativeInterface*&gt;(&amp;gJniSleepForeverStub))<SUB>3165</SUB>> ]
+"14372" [label = <(UNKNOWN,JNINativeInterface*,JNINativeInterface*)<SUB>3165</SUB>> ]
+"14373" [label = <(&lt;operator&gt;.addressOf,&amp;gJniSleepForeverStub)<SUB>3165</SUB>> ]
+"14368" [label = <(METHOD,GetRuntimeShutdownNativeInterface)<SUB>3164</SUB>> ]
+"14375" [label = <(METHOD_RETURN,JNINativeInterface)<SUB>3164</SUB>> ]
+  "14370" -> "14375" 
+  "14371" -> "14370" 
+  "14372" -> "14373" 
+  "14373" -> "14371" 
+  "14368" -> "14372" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/26-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/26-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/26-cfg.dot	2023-06-07 19:33:45.337394696 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/26-cfg.dot	2023-06-07 19:33:51.927393994 +0330
@@ -1,11 +1,124 @@
-digraph "DefineClass" {  
-"594" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI DefineClass is not supported&quot;)<SUB>534</SUB>> ]
-"598" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>535</SUB>> ]
-"595" [label = <(LOG,LOG(WARNING))<SUB>534</SUB>> ]
-"587" [label = <(METHOD,DefineClass)<SUB>533</SUB>> ]
-"600" [label = <(METHOD_RETURN,jclass)<SUB>533</SUB>> ]
-  "594" -> "598" 
-  "598" -> "600" 
-  "595" -> "594" 
-  "587" -> "595" 
+digraph "ToReflectedMethod" {  
+"656" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>495</SUB>> ]
+"675" [label = <(soa,soa(env))<SUB>496</SUB>> ]
+"678" [label = <(&lt;operator&gt;.assignment,* m = jni::DecodeArtMethod(mid))<SUB>497</SUB>> ]
+"685" [label = <(&lt;operator&gt;.multiplication,mirror::Executable* method)<SUB>498</SUB>> ]
+"690" [label = <(DCHECK_EQ,DCHECK_EQ(Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize(), kRuntimePointerSize))<SUB>499</SUB>> ]
+"702" [label = <(DCHECK,DCHECK(!Runtime::Current()-&gt;IsActiveTransaction()))<SUB>500</SUB>> ]
+"745" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(method);,return soa.AddLocalReference&lt;jobject&gt;(method);)<SUB>506</SUB>> ]
+"680" [label = <(jni::DecodeArtMethod,jni::DecodeArtMethod(mid))<SUB>497</SUB>> ]
+"686" [label = <(&lt;operator&gt;.fieldAccess,mirror::Executable)<SUB>498</SUB>> ]
+"691" [label = <(GetImagePointerSize,Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize())<SUB>499</SUB>> ]
+"703" [label = <(&lt;operator&gt;.logicalNot,!Runtime::Current()-&gt;IsActiveTransaction())<SUB>500</SUB>> ]
+"712" [label = <(IsConstructor,m-&gt;IsConstructor())<SUB>501</SUB>> ]
+"746" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(method))<SUB>506</SUB>> ]
+"681" [label = <(&lt;operator&gt;.fieldAccess,jni::DecodeArtMethod)<SUB>497</SUB>> ]
+"688" [label = <(FIELD_IDENTIFIER,Executable,Executable)<SUB>498</SUB>> ]
+"692" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize)<SUB>499</SUB>> ]
+"704" [label = <(IsActiveTransaction,Runtime::Current()-&gt;IsActiveTransaction())<SUB>500</SUB>> ]
+"713" [label = <(&lt;operator&gt;.indirectFieldAccess,m-&gt;IsConstructor)<SUB>501</SUB>> ]
+"717" [label = <(&lt;operator&gt;.assignment,method = mirror::Constructor::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;(soa.Self(), m))<SUB>502</SUB>> ]
+"747" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>506</SUB>> ]
+"660" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>495</SUB>> ]
+"683" [label = <(FIELD_IDENTIFIER,DecodeArtMethod,DecodeArtMethod)<SUB>497</SUB>> ]
+"693" [label = <(GetClassLinker,Runtime::Current()-&gt;GetClassLinker())<SUB>499</SUB>> ]
+"700" [label = <(FIELD_IDENTIFIER,GetImagePointerSize,GetImagePointerSize)<SUB>499</SUB>> ]
+"705" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;IsActiveTransaction)<SUB>500</SUB>> ]
+"715" [label = <(FIELD_IDENTIFIER,IsConstructor,IsConstructor)<SUB>501</SUB>> ]
+"719" [label = <(mirror::Constructor::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;,mirror::Constructor::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;(soa.Self(), m))<SUB>502</SUB>> ]
+"732" [label = <(&lt;operator&gt;.assignment,method = mirror::Method::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;(soa.Self(), m))<SUB>504</SUB>> ]
+"748" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>506</SUB>> ]
+"661" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>495</SUB>> ]
+"665" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>495</SUB>> ]
+"672" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>495</SUB>> ]
+"694" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetClassLinker)<SUB>499</SUB>> ]
+"706" [label = <(Runtime::Current,Runtime::Current())<SUB>500</SUB>> ]
+"710" [label = <(FIELD_IDENTIFIER,IsActiveTransaction,IsActiveTransaction)<SUB>500</SUB>> ]
+"720" [label = <(&lt;operator&gt;.fieldAccess,mirror::Constructor::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;)<SUB>502</SUB>> ]
+"725" [label = <(Self,soa.Self())<SUB>502</SUB>> ]
+"734" [label = <(mirror::Method::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;,mirror::Method::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;(soa.Self(), m))<SUB>504</SUB>> ]
+"750" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>506</SUB>> ]
+"666" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>495</SUB>> ]
+"695" [label = <(Runtime::Current,Runtime::Current())<SUB>499</SUB>> ]
+"699" [label = <(FIELD_IDENTIFIER,GetClassLinker,GetClassLinker)<SUB>499</SUB>> ]
+"707" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>500</SUB>> ]
+"721" [label = <(&lt;operator&gt;.fieldAccess,mirror::Constructor)<SUB>502</SUB>> ]
+"724" [label = <(FIELD_IDENTIFIER,CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;,CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;)<SUB>502</SUB>> ]
+"726" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>502</SUB>> ]
+"735" [label = <(&lt;operator&gt;.fieldAccess,mirror::Method::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;)<SUB>504</SUB>> ]
+"740" [label = <(Self,soa.Self())<SUB>504</SUB>> ]
+"667" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>495</SUB>> ]
+"669" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>495</SUB>> ]
+"696" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>499</SUB>> ]
+"709" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>500</SUB>> ]
+"728" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>502</SUB>> ]
+"736" [label = <(&lt;operator&gt;.fieldAccess,mirror::Method)<SUB>504</SUB>> ]
+"739" [label = <(FIELD_IDENTIFIER,CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;,CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;)<SUB>504</SUB>> ]
+"741" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>504</SUB>> ]
+"698" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>499</SUB>> ]
+"743" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>504</SUB>> ]
+"650" [label = <(METHOD,ToReflectedMethod)<SUB>494</SUB>> ]
+"753" [label = <(METHOD_RETURN,jobject)<SUB>494</SUB>> ]
+  "656" -> "661" 
+  "656" -> "675" 
+  "675" -> "683" 
+  "678" -> "688" 
+  "685" -> "698" 
+  "690" -> "709" 
+  "702" -> "715" 
+  "745" -> "753" 
+  "680" -> "678" 
+  "686" -> "685" 
+  "691" -> "690" 
+  "703" -> "702" 
+  "712" -> "721" 
+  "712" -> "736" 
+  "746" -> "745" 
+  "681" -> "680" 
+  "688" -> "686" 
+  "692" -> "691" 
+  "704" -> "703" 
+  "713" -> "712" 
+  "717" -> "750" 
+  "747" -> "746" 
+  "660" -> "667" 
+  "660" -> "675" 
+  "683" -> "681" 
+  "693" -> "700" 
+  "700" -> "692" 
+  "705" -> "704" 
+  "715" -> "713" 
+  "719" -> "717" 
+  "732" -> "750" 
+  "748" -> "747" 
+  "661" -> "660" 
+  "665" -> "672" 
+  "672" -> "753" 
+  "694" -> "693" 
+  "706" -> "710" 
+  "710" -> "705" 
+  "720" -> "728" 
+  "725" -> "719" 
+  "734" -> "732" 
+  "750" -> "748" 
+  "666" -> "665" 
+  "695" -> "699" 
+  "699" -> "694" 
+  "707" -> "706" 
+  "721" -> "724" 
+  "724" -> "720" 
+  "726" -> "725" 
+  "735" -> "743" 
+  "740" -> "734" 
+  "667" -> "669" 
+  "669" -> "666" 
+  "696" -> "695" 
+  "709" -> "707" 
+  "728" -> "726" 
+  "736" -> "739" 
+  "739" -> "735" 
+  "741" -> "740" 
+  "698" -> "696" 
+  "743" -> "741" 
+  "650" -> "656" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/260-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/260-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/260-cfg.dot	2023-06-07 19:33:45.517394678 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/260-cfg.dot	2023-06-07 19:33:52.097393976 +0330
@@ -1,94 +1,39 @@
-digraph "SetPrimitiveArrayRegion" {  
-"13685" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>2810</SUB>> ]
-"13703" [label = <(soa,soa(env))<SUB>2811</SUB>> ]
-"13706" [label = <(&lt;operator&gt;.assignment,* array =\012 DecodeAndCheckArrayType&lt;JArrayT, ElementT, ArtArrayT&gt;(soa, java_array,\012 &quot;SetPrimitiveArrayRegion&quot;,\012 &quot;set region of&quot;))<SUB>2812</SUB>> ]
-"13708" [label = <(DecodeAndCheckArrayType&lt;JArrayT,ElementT,ArtArrayT&gt;,DecodeAndCheckArrayType&lt;JArrayT, ElementT, ArtArrayT&gt;(soa, java_array,\012 &quot;SetPrimitiveArrayRegion&quot;,\012 &quot;set region of&quot;))<SUB>2813</SUB>> ]
-"13714" [label = <(&lt;operator&gt;.notEquals,array != nullptr)<SUB>2816</SUB>> ]
-"13689" [label = <(UNLIKELY,UNLIKELY((java_array) == nullptr))<SUB>2810</SUB>> ]
-"13719" [label = <(&lt;operator&gt;.logicalOr,start &lt; 0 || length &lt; 0 || length &gt; array-&gt;GetLength() - start)<SUB>2817</SUB>> ]
-"13690" [label = <(&lt;operator&gt;.equals,(java_array) == nullptr)<SUB>2810</SUB>> ]
-"13694" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_array == null&quot;))<SUB>2810</SUB>> ]
-"13701" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>2810</SUB>> ]
-"13720" [label = <(&lt;operator&gt;.logicalOr,start &lt; 0 || length &lt; 0)<SUB>2817</SUB>> ]
-"13727" [label = <(&lt;operator&gt;.greaterThan,length &gt; array-&gt;GetLength() - start)<SUB>2817</SUB>> ]
-"13736" [label = <(ThrowAIOOBE,ThrowAIOOBE(soa, array, start, length, &quot;dst&quot;))<SUB>2818</SUB>> ]
-"13695" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2810</SUB>> ]
-"13721" [label = <(&lt;operator&gt;.lessThan,start &lt; 0)<SUB>2817</SUB>> ]
-"13724" [label = <(&lt;operator&gt;.lessThan,length &lt; 0)<SUB>2817</SUB>> ]
-"13729" [label = <(&lt;operator&gt;.subtraction,array-&gt;GetLength() - start)<SUB>2817</SUB>> ]
-"13744" [label = <(CHECK_NON_NULL_MEMCPY_ARGUMENT,CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf))<SUB>2820</SUB>> ]
-"13767" [label = <(&lt;operator&gt;.assignment,* data = array-&gt;GetData())<SUB>2821</SUB>> ]
-"13773" [label = <(memcpy,memcpy(data + start, buf, length * sizeof(ElementT)))<SUB>2822</SUB>> ]
-"13696" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2810</SUB>> ]
-"13698" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2810</SUB>> ]
-"13730" [label = <(GetLength,array-&gt;GetLength())<SUB>2817</SUB>> ]
-"13769" [label = <(GetData,array-&gt;GetData())<SUB>2821</SUB>> ]
-"13774" [label = <(&lt;operator&gt;.addition,data + start)<SUB>2822</SUB>> ]
-"13778" [label = <(&lt;operator&gt;.multiplication,length * sizeof(ElementT))<SUB>2822</SUB>> ]
-"13731" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetLength)<SUB>2817</SUB>> ]
-"13770" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetData)<SUB>2821</SUB>> ]
-"13780" [label = <(&lt;operator&gt;.sizeOf,sizeof(ElementT))<SUB>2822</SUB>> ]
-"13733" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>2817</SUB>> ]
-"13749" [label = <(UNLIKELY,UNLIKELY((length) != 0 &amp;&amp; (buf) == nullptr))<SUB>2820</SUB>> ]
-"13772" [label = <(FIELD_IDENTIFIER,GetData,GetData)<SUB>2821</SUB>> ]
-"13750" [label = <(&lt;operator&gt;.logicalAnd,(length) != 0 &amp;&amp; (buf) == nullptr)<SUB>2820</SUB>> ]
-"13758" [label = <(CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;buf == null&quot;))<SUB>2820</SUB>> ]
-"13765" [label = <(RETURN,CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf),CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf))<SUB>2820</SUB>> ]
-"13751" [label = <(&lt;operator&gt;.notEquals,(length) != 0)<SUB>2820</SUB>> ]
-"13754" [label = <(&lt;operator&gt;.equals,(buf) == nullptr)<SUB>2820</SUB>> ]
-"13759" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2820</SUB>> ]
-"13760" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2820</SUB>> ]
-"13762" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2820</SUB>> ]
-"13678" [label = <(METHOD,SetPrimitiveArrayRegion)<SUB>2808</SUB>> ]
-"13782" [label = <(METHOD_RETURN,void)<SUB>2808</SUB>> ]
-  "13685" -> "13690" 
-  "13685" -> "13703" 
-  "13703" -> "13708" 
-  "13706" -> "13714" 
-  "13708" -> "13706" 
-  "13714" -> "13782" 
-  "13714" -> "13721" 
-  "13689" -> "13696" 
-  "13689" -> "13703" 
-  "13719" -> "13736" 
-  "13719" -> "13744" 
-  "13690" -> "13689" 
-  "13694" -> "13701" 
-  "13701" -> "13782" 
-  "13720" -> "13719" 
-  "13720" -> "13733" 
-  "13727" -> "13719" 
-  "13736" -> "13782" 
-  "13695" -> "13694" 
-  "13721" -> "13720" 
-  "13721" -> "13724" 
-  "13724" -> "13720" 
-  "13729" -> "13727" 
-  "13744" -> "13751" 
-  "13744" -> "13772" 
-  "13767" -> "13774" 
-  "13773" -> "13782" 
-  "13696" -> "13698" 
-  "13698" -> "13695" 
-  "13730" -> "13729" 
-  "13769" -> "13767" 
-  "13774" -> "13780" 
-  "13778" -> "13773" 
-  "13731" -> "13730" 
-  "13770" -> "13769" 
-  "13780" -> "13778" 
-  "13733" -> "13731" 
-  "13749" -> "13760" 
-  "13749" -> "13772" 
-  "13772" -> "13770" 
-  "13750" -> "13749" 
-  "13758" -> "13765" 
-  "13765" -> "13782" 
-  "13751" -> "13750" 
-  "13751" -> "13754" 
-  "13754" -> "13750" 
-  "13759" -> "13758" 
-  "13760" -> "13762" 
-  "13762" -> "13759" 
-  "13678" -> "13685" 
+digraph "operator &lt;&lt;" {  
+"14387" [label = <(&lt;operator&gt;.shiftLeft,os &lt;&lt; &quot;JNIInvalidRefType&quot;)<SUB>3173</SUB>> ]
+"14390" [label = <(RETURN,return os;,return os;)<SUB>3174</SUB>> ]
+"14394" [label = <(&lt;operator&gt;.shiftLeft,os &lt;&lt; &quot;JNILocalRefType&quot;)<SUB>3176</SUB>> ]
+"14397" [label = <(RETURN,return os;,return os;)<SUB>3177</SUB>> ]
+"14401" [label = <(&lt;operator&gt;.shiftLeft,os &lt;&lt; &quot;JNIGlobalRefType&quot;)<SUB>3179</SUB>> ]
+"14404" [label = <(RETURN,return os;,return os;)<SUB>3180</SUB>> ]
+"14408" [label = <(&lt;operator&gt;.shiftLeft,os &lt;&lt; &quot;JNIWeakGlobalRefType&quot;)<SUB>3182</SUB>> ]
+"14411" [label = <(RETURN,return os;,return os;)<SUB>3183</SUB>> ]
+"14414" [label = <(&lt;operator&gt;.shiftLeft,LOG(FATAL) &lt;&lt; &quot;jobjectRefType[&quot; &lt;&lt; static_cast&lt;int&gt;(rhs) &lt;&lt; &quot;]&quot;)<SUB>3185</SUB>> ]
+"14424" [label = <(UNREACHABLE,UNREACHABLE())<SUB>3186</SUB>> ]
+"14415" [label = <(&lt;operator&gt;.shiftLeft,LOG(FATAL) &lt;&lt; &quot;jobjectRefType[&quot; &lt;&lt; static_cast&lt;int&gt;(rhs))<SUB>3185</SUB>> ]
+"14416" [label = <(&lt;operator&gt;.shiftLeft,LOG(FATAL) &lt;&lt; &quot;jobjectRefType[&quot;)<SUB>3185</SUB>> ]
+"14420" [label = <(&lt;operator&gt;.cast,static_cast&lt;int&gt;(rhs))<SUB>3185</SUB>> ]
+"14417" [label = <(LOG,LOG(FATAL))<SUB>3185</SUB>> ]
+"14421" [label = <(UNKNOWN,int,int)<SUB>3185</SUB>> ]
+"14378" [label = <(METHOD,operator &lt;&lt;)<SUB>3170</SUB>> ]
+"14425" [label = <(METHOD_RETURN,ostream)<SUB>3170</SUB>> ]
+  "14387" -> "14390" 
+  "14390" -> "14425" 
+  "14394" -> "14397" 
+  "14397" -> "14425" 
+  "14401" -> "14404" 
+  "14404" -> "14425" 
+  "14408" -> "14411" 
+  "14411" -> "14425" 
+  "14414" -> "14424" 
+  "14424" -> "14425" 
+  "14415" -> "14414" 
+  "14416" -> "14421" 
+  "14420" -> "14415" 
+  "14417" -> "14416" 
+  "14421" -> "14420" 
+  "14378" -> "14387" 
+  "14378" -> "14394" 
+  "14378" -> "14401" 
+  "14378" -> "14408" 
+  "14378" -> "14417" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/261-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/261-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/261-cfg.dot	2023-06-07 19:33:45.517394678 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/261-cfg.dot	2023-06-07 19:33:52.097393976 +0330
@@ -1,9 +1,167 @@
-digraph "GetJniNativeInterface" {  
-"14482" [label = <(RETURN,return &amp;gJniNativeInterface;,return &amp;gJniNativeInterface;)<SUB>3065</SUB>> ]
-"14483" [label = <(&lt;operator&gt;.addressOf,&amp;gJniNativeInterface)<SUB>3065</SUB>> ]
-"14480" [label = <(METHOD,GetJniNativeInterface)<SUB>3064</SUB>> ]
-"14485" [label = <(METHOD_RETURN,JNINativeInterface)<SUB>3064</SUB>> ]
-  "14482" -> "14485" 
-  "14483" -> "14482" 
-  "14480" -> "14483" 
+digraph "&lt;global&gt;" {  
+"16886" [label = <(UNKNOWN,TEST_F(JniInternalTest, AllocObject) {\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012  jobject o = env_-&gt;AllocObject(c);\012  ASSERT_NE(o, nullptr);\012\012 // We have an instance of the class we asked for...\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(o, c));\012 // ...whose fields haven't been initialized because\012 // we didn't call a constructor.\012 // Even with string compression empty string has `count == 0`.\012  ASSERT_EQ(0, env_-&gt;GetIntField(o, env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;)));\012},TEST_F(JniInternalTest, AllocObject) {\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012  jobject o = env_-&gt;AllocObject(c);\012  ASSERT_NE(o, nullptr);\012\012 // We have an instance of the class we asked for...\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(o, c));\012 // ...whose fields haven't been initialized because\012 // we didn't call a constructor.\012 // Even with string compression empty string has `count == 0`.\012  ASSERT_EQ(0, env_-&gt;GetIntField(o, env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;)));\012})<SUB>676</SUB>> ]
+"16887" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetVersion) {\012  ASSERT_EQ(JNI_VERSION_1_6, env_-&gt;GetVersion());\012},TEST_F(JniInternalTest, GetVersion) {\012  ASSERT_EQ(JNI_VERSION_1_6, env_-&gt;GetVersion());\012})<SUB>690</SUB>> ]
+"16888" [label = <(UNKNOWN,TEST_F(JniInternalTest, FindClass) {\012 // This tests leads to warnings in the log.\012 ScopedLogSeverity sls(LogSeverity::ERROR);\012\012 FindClassTest(false);\012 FindClassTest(true);\012},TEST_F(JniInternalTest, FindClass) {\012 // This tests leads to warnings in the log.\012 ScopedLogSeverity sls(LogSeverity::ERROR);\012\012 FindClassTest(false);\012 FindClassTest(true);\012})<SUB>694</SUB>> ]
+"16889" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetFieldID) {\012  jclass jlnsfe = env_-&gt;FindClass(&quot;java/lang/NoSuchFieldError&quot;);\012  ASSERT_NE(jlnsfe, nullptr);\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012\012 // Wrong type.\012  jfieldID fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;J&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Wrong type where type doesn't exist.\012  fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;Lrod/jane/freddy;&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Wrong name.\012  fid = env_-&gt;GetFieldID(c, &quot;Count&quot;, &quot;I&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Good declared field lookup.\012  fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;);\012  EXPECT_NE(nullptr, fid);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Good superclass field lookup.\012  c = env_-&gt;FindClass(&quot;java/lang/StringBuilder&quot;);\012  fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;);\012  EXPECT_NE(nullptr, fid);\012  EXPECT_NE(fid, nullptr);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Not instance.\012  fid = env_-&gt;GetFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;Ljava/util/Comparator;&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Bad arguments.\012 GetFieldIdBadArgumentTest(false);\012 GetFieldIdBadArgumentTest(true);\012},TEST_F(JniInternalTest, GetFieldID) {\012  jclass jlnsfe = env_-&gt;FindClass(&quot;java/lang/NoSuchFieldError&quot;);\012  ASSERT_NE(jlnsfe, nullptr);\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012\012 // Wrong type.\012  jfieldID fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;J&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Wrong type where type doesn't exist.\012  fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;Lrod/jane/freddy;&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Wrong name.\012  fid = env_-&gt;GetFieldID(c, &quot;Count&quot;, &quot;I&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Good declared field lookup.\012  fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;);\012  EXPECT_NE(nullptr, fid);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Good superclass field lookup.\012  c = env_-&gt;FindClass(&quot;java/lang/StringBuilder&quot;);\012  fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;);\012  EXPECT_NE(nullptr, fid);\012  EXPECT_NE(fid, nullptr);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Not instance.\012  fid = env_-&gt;GetFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;Ljava/util/Comparator;&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Bad arguments.\012 GetFieldIdBadArgumentTest(false);\012 GetFieldIdBadArgumentTest(true);\012})<SUB>702</SUB>> ]
+"16890" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetStaticFieldID) {\012  jclass jlnsfe = env_-&gt;FindClass(&quot;java/lang/NoSuchFieldError&quot;);\012  ASSERT_NE(jlnsfe, nullptr);\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012\012 // Wrong type.\012  jfieldID fid = env_-&gt;GetStaticFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;J&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Wrong type where type doesn't exist.\012  fid = env_-&gt;GetStaticFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;Lrod/jane/freddy;&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Wrong name.\012  fid = env_-&gt;GetStaticFieldID(c, &quot;cASE_INSENSITIVE_ORDER&quot;, &quot;Ljava/util/Comparator;&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Good declared field lookup.\012  fid = env_-&gt;GetStaticFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;Ljava/util/Comparator;&quot;);\012  EXPECT_NE(nullptr, fid);\012  EXPECT_NE(fid, nullptr);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Not static.\012  fid = env_-&gt;GetStaticFieldID(c, &quot;count&quot;, &quot;I&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Bad arguments.\012 GetStaticFieldIdBadArgumentTest(false);\012 GetStaticFieldIdBadArgumentTest(true);\012},TEST_F(JniInternalTest, GetStaticFieldID) {\012  jclass jlnsfe = env_-&gt;FindClass(&quot;java/lang/NoSuchFieldError&quot;);\012  ASSERT_NE(jlnsfe, nullptr);\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012\012 // Wrong type.\012  jfieldID fid = env_-&gt;GetStaticFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;J&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Wrong type where type doesn't exist.\012  fid = env_-&gt;GetStaticFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;Lrod/jane/freddy;&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Wrong name.\012  fid = env_-&gt;GetStaticFieldID(c, &quot;cASE_INSENSITIVE_ORDER&quot;, &quot;Ljava/util/Comparator;&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Good declared field lookup.\012  fid = env_-&gt;GetStaticFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;Ljava/util/Comparator;&quot;);\012  EXPECT_NE(nullptr, fid);\012  EXPECT_NE(fid, nullptr);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Not static.\012  fid = env_-&gt;GetStaticFieldID(c, &quot;count&quot;, &quot;I&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Bad arguments.\012 GetStaticFieldIdBadArgumentTest(false);\012 GetStaticFieldIdBadArgumentTest(true);\012})<SUB>745</SUB>> ]
+"16891" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetMethodID) {\012  jclass jlobject = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  jclass jlstring = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  jclass jlnsme = env_-&gt;FindClass(&quot;java/lang/NoSuchMethodError&quot;);\012  jclass jncrbc = env_-&gt;FindClass(&quot;java/nio/channels/ReadableByteChannel&quot;);\012\012 // Sanity check that no exceptions are pending.\012  ASSERT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Check that java.lang.Object.foo() doesn't exist and NoSuchMethodError is\012 // a pending exception.\012  jmethodID method = env_-&gt;GetMethodID(jlobject, &quot;foo&quot;, &quot;()V&quot;);\012  EXPECT_EQ(nullptr, method);\012 ExpectException(jlnsme);\012\012 // Check that java.lang.Object.equals() does exist.\012  method = env_-&gt;GetMethodID(jlobject, &quot;equals&quot;, &quot;(Ljava/lang/Object;)Z&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Check that GetMethodID for java.lang.String.valueOf(int) fails as the\012 // method is static.\012  method = env_-&gt;GetMethodID(jlstring, &quot;valueOf&quot;, &quot;(I)Ljava/lang/String;&quot;);\012  EXPECT_EQ(nullptr, method);\012 ExpectException(jlnsme);\012\012 // Check that GetMethodID for java.lang.NoSuchMethodError.&lt;init&gt;(String) finds the constructor.\012  method = env_-&gt;GetMethodID(jlnsme, &quot;&lt;init&gt;&quot;, &quot;(Ljava/lang/String;)V&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Check that GetMethodID can find a interface method inherited from another interface.\012  method = env_-&gt;GetMethodID(jncrbc, &quot;close&quot;, &quot;()V&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Bad arguments.\012 GetMethodIdBadArgumentTest(false);\012 GetMethodIdBadArgumentTest(true);\012},TEST_F(JniInternalTest, GetMethodID) {\012  jclass jlobject = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  jclass jlstring = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  jclass jlnsme = env_-&gt;FindClass(&quot;java/lang/NoSuchMethodError&quot;);\012  jclass jncrbc = env_-&gt;FindClass(&quot;java/nio/channels/ReadableByteChannel&quot;);\012\012 // Sanity check that no exceptions are pending.\012  ASSERT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Check that java.lang.Object.foo() doesn't exist and NoSuchMethodError is\012 // a pending exception.\012  jmethodID method = env_-&gt;GetMethodID(jlobject, &quot;foo&quot;, &quot;()V&quot;);\012  EXPECT_EQ(nullptr, method);\012 ExpectException(jlnsme);\012\012 // Check that java.lang.Object.equals() does exist.\012  method = env_-&gt;GetMethodID(jlobject, &quot;equals&quot;, &quot;(Ljava/lang/Object;)Z&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Check that GetMethodID for java.lang.String.valueOf(int) fails as the\012 // method is static.\012  method = env_-&gt;GetMethodID(jlstring, &quot;valueOf&quot;, &quot;(I)Ljava/lang/String;&quot;);\012  EXPECT_EQ(nullptr, method);\012 ExpectException(jlnsme);\012\012 // Check that GetMethodID for java.lang.NoSuchMethodError.&lt;init&gt;(String) finds the constructor.\012  method = env_-&gt;GetMethodID(jlnsme, &quot;&lt;init&gt;&quot;, &quot;(Ljava/lang/String;)V&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Check that GetMethodID can find a interface method inherited from another interface.\012  method = env_-&gt;GetMethodID(jncrbc, &quot;close&quot;, &quot;()V&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Bad arguments.\012 GetMethodIdBadArgumentTest(false);\012 GetMethodIdBadArgumentTest(true);\012})<SUB>782</SUB>> ]
+"16892" [label = <(UNKNOWN,TEST_F(JniInternalTest, CallVoidMethodNullReceiver) {\012  jclass jlobject = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  jmethodID method;\012\012 // Check that GetMethodID for java.lang.NoSuchMethodError.&lt;init&gt;(String) finds the constructor.\012  method = env_-&gt;GetMethodID(jlobject, &quot;&lt;init&gt;&quot;, &quot;()V&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Null object to CallVoidMethod.\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  env_-&gt;CallVoidMethod(nullptr, method);\012  check_jni_abort_catcher.Check(&quot;null&quot;);\012},TEST_F(JniInternalTest, CallVoidMethodNullReceiver) {\012  jclass jlobject = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  jmethodID method;\012\012 // Check that GetMethodID for java.lang.NoSuchMethodError.&lt;init&gt;(String) finds the constructor.\012  method = env_-&gt;GetMethodID(jlobject, &quot;&lt;init&gt;&quot;, &quot;()V&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Null object to CallVoidMethod.\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  env_-&gt;CallVoidMethod(nullptr, method);\012  check_jni_abort_catcher.Check(&quot;null&quot;);\012})<SUB>823</SUB>> ]
+"16893" [label = <(UNKNOWN,TEST_F(JniInternalTest, CallVarArgMethodBadPrimitive) {\012 // Check that bad primitive values cause check JNI to abort when\012 // passed out-of-range primitive value var args. As var args can't\012 // differentiate type sizes less than an int, and this isn't\012 // corrected by JNI, this helps ensure JNI code is valid.\012#define DoCall(boxed_type, shorty, c_type, bad_value)                   \\012 {                                                                     \\012    jclass prim_class = env_-&gt;FindClass(&quot;java/lang/&quot; #boxed_type);      \\012    jmethodID method = env_-&gt;GetStaticMethodID(prim_class, &quot;valueOf&quot;,   \\012 &quot;(&quot; #shorty &quot;)Ljava/lang/&quot; #boxed_type &quot;;&quot;); \\012    EXPECT_NE(nullptr, method);                                         \\012    EXPECT_FALSE(env_-&gt;ExceptionCheck());                               \\012 CheckJniAbortCatcher check_jni_abort_catcher;                       \\012    env_-&gt;CallStaticObjectMethod(prim_class, method, bad_value);        \\012    check_jni_abort_catcher.Check(&quot;unexpected &quot; #c_type &quot; value: &quot; #bad_value); \\012 }\012\012 DoCall(Boolean, Z, jboolean, 2);\012 DoCall(Byte, B, jbyte, 128);\012 DoCall(Byte, B, jbyte, -129);\012 DoCall(Short, S, jshort, 32768);\012 DoCall(Short, S, jshort, -32769);\012 DoCall(Character, C, jchar, 65536);\012 DoCall(Character, C, jchar, -1);\012#undef DoCall\012},TEST_F(JniInternalTest, CallVarArgMethodBadPrimitive) {\012 // Check that bad primitive values cause check JNI to abort when\012 // passed out-of-range primitive value var args. As var args can't\012 // differentiate type sizes less than an int, and this isn't\012 // corrected by JNI, this helps ensure JNI code is valid.\012#define DoCall(boxed_type, shorty, c_type, bad_value)                   \\012 {                                                                     \\012    jclass prim_class = env_-&gt;FindClass(&quot;java/lang/&quot; #boxed_type);      \\012    jmethodID method = env_-&gt;GetStaticMethodID(prim_class, &quot;valueOf&quot;,   \\012 &quot;(&quot; #shorty &quot;)Ljava/lang/&quot; #boxed_type &quot;;&quot;); \\012    EXPECT_NE(nullptr, method);                                         \\012    EXPECT_FALSE(env_-&gt;ExceptionCheck());                               \\012 CheckJniAbortCatcher check_jni_abort_catcher;                       \\012    env_-&gt;CallStaticObjectMethod(prim_class, method, bad_value);        \\012    check_jni_abort_catcher.Check(&quot;unexpected &quot; #c_type &quot; value: &quot; #bad_value); \\012 }\012\012 DoCall(Boolean, Z, jboolean, 2);\012 DoCall(Byte, B, jbyte, 128);\012 DoCall(Byte, B, jbyte, -129);\012 DoCall(Short, S, jshort, 32768);\012 DoCall(Short, S, jshort, -32769);\012 DoCall(Character, C, jchar, 65536);\012 DoCall(Character, C, jchar, -1);\012#undef DoCall\012})<SUB>838</SUB>> ]
+"16894" [label = <(UNKNOWN,TEST_F(JniInternalTest, CallJValueMethodBadPrimitive) {\012 // Check that bad primitive values, passed as jvalues, cause check\012 // JNI to abort. Unlike with var args, sizes less than an int should\012 // be truncated or sign extended and not cause an abort except for\012 // jbooleans that are passed as bytes.\012#define DoFailCall(boxed_type, shorty, c_type, bad_value)               \\012 {                                                                     \\012    jclass prim_class = env_-&gt;FindClass(&quot;java/lang/&quot; #boxed_type);      \\012    jmethodID method = env_-&gt;GetStaticMethodID(prim_class, &quot;valueOf&quot;,   \\012 &quot;(&quot; #shorty &quot;)Ljava/lang/&quot; #boxed_type &quot;;&quot;); \\012    EXPECT_NE(nullptr, method);                                         \\012    EXPECT_FALSE(env_-&gt;ExceptionCheck());                               \\012 CheckJniAbortCatcher check_jni_abort_catcher;                       \\012    jvalue jval;                                                        \\012    jval.i = bad_value;                                                 \\012    env_-&gt;CallStaticObjectMethodA(prim_class, method, &amp;jval);           \\012    check_jni_abort_catcher.Check(&quot;unexpected &quot; #c_type &quot; value: &quot; #bad_value); \\012 }\012#define DoGoodCall(boxed_type, shorty, c_type, bad_value)               \\012 {                                                                     \\012    jclass prim_class = env_-&gt;FindClass(&quot;java/lang/&quot; #boxed_type);      \\012    jmethodID method = env_-&gt;GetStaticMethodID(prim_class, &quot;valueOf&quot;,   \\012 &quot;(&quot; #shorty &quot;)Ljava/lang/&quot; #boxed_type &quot;;&quot;); \\012    EXPECT_NE(nullptr, method);                                         \\012    EXPECT_FALSE(env_-&gt;ExceptionCheck());                               \\012    jvalue jval;                                                        \\012    jval.i = bad_value;                                                 \\012    env_-&gt;CallStaticObjectMethodA(prim_class, method, &amp;jval);           \\012 }\012\012 DoFailCall(Boolean, Z, jboolean, 2);\012 DoGoodCall(Byte, B, jbyte, 128);\012 DoGoodCall(Byte, B, jbyte, -129);\012 DoGoodCall(Short, S, jshort, 32768);\012 DoGoodCall(Short, S, jshort, -32769);\012 DoGoodCall(Character, C, jchar, 65536);\012 DoGoodCall(Character, C, jchar, -1);\012#undef DoCall\012},TEST_F(JniInternalTest, CallJValueMethodBadPrimitive) {\012 // Check that bad primitive values, passed as jvalues, cause check\012 // JNI to abort. Unlike with var args, sizes less than an int should\012 // be truncated or sign extended and not cause an abort except for\012 // jbooleans that are passed as bytes.\012#define DoFailCall(boxed_type, shorty, c_type, bad_value)               \\012 {                                                                     \\012    jclass prim_class = env_-&gt;FindClass(&quot;java/lang/&quot; #boxed_type);      \\012    jmethodID method = env_-&gt;GetStaticMethodID(prim_class, &quot;valueOf&quot;,   \\012 &quot;(&quot; #shorty &quot;)Ljava/lang/&quot; #boxed_type &quot;;&quot;); \\012    EXPECT_NE(nullptr, method);                                         \\012    EXPECT_FALSE(env_-&gt;ExceptionCheck());                               \\012 CheckJniAbortCatcher check_jni_abort_catcher;                       \\012    jvalue jval;                                                        \\012    jval.i = bad_value;                                                 \\012    env_-&gt;CallStaticObjectMethodA(prim_class, method, &amp;jval);           \\012    check_jni_abort_catcher.Check(&quot;unexpected &quot; #c_type &quot; value: &quot; #bad_value); \\012 }\012#define DoGoodCall(boxed_type, shorty, c_type, bad_value)               \\012 {                                                                     \\012    jclass prim_class = env_-&gt;FindClass(&quot;java/lang/&quot; #boxed_type);      \\012    jmethodID method = env_-&gt;GetStaticMethodID(prim_class, &quot;valueOf&quot;,   \\012 &quot;(&quot; #shorty &quot;)Ljava/lang/&quot; #boxed_type &quot;;&quot;); \\012    EXPECT_NE(nullptr, method);                                         \\012    EXPECT_FALSE(env_-&gt;ExceptionCheck());                               \\012    jvalue jval;                                                        \\012    jval.i = bad_value;                                                 \\012    env_-&gt;CallStaticObjectMethodA(prim_class, method, &amp;jval);           \\012 }\012\012 DoFailCall(Boolean, Z, jboolean, 2);\012 DoGoodCall(Byte, B, jbyte, 128);\012 DoGoodCall(Byte, B, jbyte, -129);\012 DoGoodCall(Short, S, jshort, 32768);\012 DoGoodCall(Short, S, jshort, -32769);\012 DoGoodCall(Character, C, jchar, 65536);\012 DoGoodCall(Character, C, jchar, -1);\012#undef DoCall\012})<SUB>865</SUB>> ]
+"16895" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetStaticMethodID) {\012  jclass jlobject = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  jclass jlnsme = env_-&gt;FindClass(&quot;java/lang/NoSuchMethodError&quot;);\012\012 // Sanity check that no exceptions are pending\012  ASSERT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Check that java.lang.Object.foo() doesn't exist and NoSuchMethodError is\012 // a pending exception\012  jmethodID method = env_-&gt;GetStaticMethodID(jlobject, &quot;foo&quot;, &quot;()V&quot;);\012  EXPECT_EQ(nullptr, method);\012 ExpectException(jlnsme);\012\012 // Check that GetStaticMethodID for java.lang.Object.equals(Object) fails as\012 // the method is not static\012  method = env_-&gt;GetStaticMethodID(jlobject, &quot;equals&quot;, &quot;(Ljava/lang/Object;)Z&quot;);\012  EXPECT_EQ(nullptr, method);\012 ExpectException(jlnsme);\012\012 // Check that java.lang.String.valueOf(int) does exist\012  jclass jlstring = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  method = env_-&gt;GetStaticMethodID(jlstring, &quot;valueOf&quot;, &quot;(I)Ljava/lang/String;&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Bad arguments.\012 GetStaticMethodIdBadArgumentTest(false);\012 GetStaticMethodIdBadArgumentTest(true);\012},TEST_F(JniInternalTest, GetStaticMethodID) {\012  jclass jlobject = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  jclass jlnsme = env_-&gt;FindClass(&quot;java/lang/NoSuchMethodError&quot;);\012\012 // Sanity check that no exceptions are pending\012  ASSERT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Check that java.lang.Object.foo() doesn't exist and NoSuchMethodError is\012 // a pending exception\012  jmethodID method = env_-&gt;GetStaticMethodID(jlobject, &quot;foo&quot;, &quot;()V&quot;);\012  EXPECT_EQ(nullptr, method);\012 ExpectException(jlnsme);\012\012 // Check that GetStaticMethodID for java.lang.Object.equals(Object) fails as\012 // the method is not static\012  method = env_-&gt;GetStaticMethodID(jlobject, &quot;equals&quot;, &quot;(Ljava/lang/Object;)Z&quot;);\012  EXPECT_EQ(nullptr, method);\012 ExpectException(jlnsme);\012\012 // Check that java.lang.String.valueOf(int) does exist\012  jclass jlstring = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  method = env_-&gt;GetStaticMethodID(jlstring, &quot;valueOf&quot;, &quot;(I)Ljava/lang/String;&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Bad arguments.\012 GetStaticMethodIdBadArgumentTest(false);\012 GetStaticMethodIdBadArgumentTest(true);\012})<SUB>905</SUB>> ]
+"16914" [label = <(UNKNOWN,TEST_F(JniInternalTest, FromReflectedField_ToReflectedField) {\012  jclass jlrField = env_-&gt;FindClass(&quot;java/lang/reflect/Field&quot;);\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012  jfieldID fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;);\012  ASSERT_NE(fid, nullptr);\012 // Turn the fid into a java.lang.reflect.Field...\012  jobject field = env_-&gt;ToReflectedField(c, fid, JNI_FALSE);\012 size_t capacity_before = GetLocalsCapacity(env_);\012 for (size_t i = 0; i &lt;= 10; ++i) {\012 // Regression test for b/18396311, ToReflectedField leaking local refs causing a local\012 // reference table overflows with 512 references to ArtField\012    env_-&gt;DeleteLocalRef(env_-&gt;ToReflectedField(c, fid, JNI_FALSE));\012 }\012 size_t capacity_after = GetLocalsCapacity(env_);\012  ASSERT_EQ(capacity_before, capacity_after);\012\012  ASSERT_NE(c, nullptr);\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(field, jlrField));\012 // ...and back again.\012  jfieldID fid2 = env_-&gt;FromReflectedField(field);\012  ASSERT_NE(fid2, nullptr);\012 // Make sure we can actually use it.\012  jstring s = env_-&gt;NewStringUTF(&quot;poop&quot;);\012 if (mirror::kUseStringCompression) {\012    ASSERT_EQ(mirror::String::GetFlaggedCount(4, /* compressible */ true),\012              env_-&gt;GetIntField(s, fid2));\012 // Create incompressible string\012    jstring s_16 = env_-&gt;NewStringUTF(&quot;\u0444\u0444&quot;);\012    ASSERT_EQ(mirror::String::GetFlaggedCount(2, /* compressible */ false),\012              env_-&gt;GetIntField(s_16, fid2));\012 } else {\012    ASSERT_EQ(4, env_-&gt;GetIntField(s, fid2));\012 }\012 // Bad arguments.\012 GetFromReflectedField_ToReflectedFieldBadArgumentTest(false);\012 GetFromReflectedField_ToReflectedFieldBadArgumentTest(true);\012},TEST_F(JniInternalTest, FromReflectedField_ToReflectedField) {\012  jclass jlrField = env_-&gt;FindClass(&quot;java/lang/reflect/Field&quot;);\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012  jfieldID fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;);\012  ASSERT_NE(fid, nullptr);\012 // Turn the fid into a java.lang.reflect.Field...\012  jobject field = env_-&gt;ToReflectedField(c, fid, JNI_FALSE);\012 size_t capacity_before = GetLocalsCapacity(env_);\012 for (size_t i = 0; i &lt;= 10; ++i) {\012 // Regression test for b/18396311, ToReflectedField leaking local refs causing a local\012 // reference table overflows with 512 references to ArtField\012    env_-&gt;DeleteLocalRef(env_-&gt;ToReflectedField(c, fid, JNI_FALSE));\012 }\012 size_t capacity_after = GetLocalsCapacity(env_);\012  ASSERT_EQ(capacity_before, capacity_after);\012\012  ASSERT_NE(c, nullptr);\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(field, jlrField));\012 // ...and back again.\012  jfieldID fid2 = env_-&gt;FromReflectedField(field);\012  ASSERT_NE(fid2, nullptr);\012 // Make sure we can actually use it.\012  jstring s = env_-&gt;NewStringUTF(&quot;poop&quot;);\012 if (mirror::kUseStringCompression) {\012    ASSERT_EQ(mirror::String::GetFlaggedCount(4, /* compressible */ true),\012              env_-&gt;GetIntField(s, fid2));\012 // Create incompressible string\012    jstring s_16 = env_-&gt;NewStringUTF(&quot;\u0444\u0444&quot;);\012    ASSERT_EQ(mirror::String::GetFlaggedCount(2, /* compressible */ false),\012              env_-&gt;GetIntField(s_16, fid2));\012 } else {\012    ASSERT_EQ(4, env_-&gt;GetIntField(s, fid2));\012 }\012 // Bad arguments.\012 GetFromReflectedField_ToReflectedFieldBadArgumentTest(false);\012 GetFromReflectedField_ToReflectedFieldBadArgumentTest(true);\012})<SUB>940</SUB>> ]
+"16915" [label = <(UNKNOWN,TEST_F(JniInternalTest, FromReflectedMethod_ToReflectedMethod) {\012  jclass jlrMethod = env_-&gt;FindClass(&quot;java/lang/reflect/Method&quot;);\012  ASSERT_NE(jlrMethod, nullptr);\012  jclass jlrConstructor = env_-&gt;FindClass(&quot;java/lang/reflect/Constructor&quot;);\012  ASSERT_NE(jlrConstructor, nullptr);\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012\012  jmethodID mid = env_-&gt;GetMethodID(c, &quot;&lt;init&gt;&quot;, &quot;()V&quot;);\012  ASSERT_NE(mid, nullptr);\012 // Turn the mid into a java.lang.reflect.Constructor...\012  jobject method = env_-&gt;ToReflectedMethod(c, mid, JNI_FALSE);\012 size_t capacity_before = GetLocalsCapacity(env_);\012 for (size_t i = 0; i &lt;= 10; ++i) {\012 // Regression test for b/18396311, ToReflectedMethod leaking local refs causing a local\012 // reference table overflows with 512 references to ArtMethod\012    env_-&gt;DeleteLocalRef(env_-&gt;ToReflectedMethod(c, mid, JNI_FALSE));\012 }\012 size_t capacity_after = GetLocalsCapacity(env_);\012  ASSERT_EQ(capacity_before, capacity_after);\012  ASSERT_NE(method, nullptr);\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(method, jlrConstructor));\012 // ...and back again.\012  jmethodID mid2 = env_-&gt;FromReflectedMethod(method);\012  ASSERT_NE(mid2, nullptr);\012 // Make sure we can actually use it.\012  jstring s = reinterpret_cast&lt;jstring&gt;(env_-&gt;AllocObject(c));\012  ASSERT_NE(s, nullptr);\012  env_-&gt;CallVoidMethod(s, mid2);\012  ASSERT_EQ(JNI_FALSE, env_-&gt;ExceptionCheck());\012  env_-&gt;ExceptionClear();\012\012  mid = env_-&gt;GetMethodID(c, &quot;length&quot;, &quot;()I&quot;);\012  ASSERT_NE(mid, nullptr);\012 // Turn the mid into a java.lang.reflect.Method...\012  method = env_-&gt;ToReflectedMethod(c, mid, JNI_FALSE);\012  ASSERT_NE(method, nullptr);\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(method, jlrMethod));\012 // ...and back again.\012  mid2 = env_-&gt;FromReflectedMethod(method);\012  ASSERT_NE(mid2, nullptr);\012 // Make sure we can actually use it.\012  s = env_-&gt;NewStringUTF(&quot;poop&quot;);\012  ASSERT_NE(s, nullptr);\012  ASSERT_EQ(4, env_-&gt;CallIntMethod(s, mid2));\012\012 // Bad arguments.\012 GetFromReflectedMethod_ToReflectedMethodBadArgumentTest(false);\012 GetFromReflectedMethod_ToReflectedMethodBadArgumentTest(true);\012},TEST_F(JniInternalTest, FromReflectedMethod_ToReflectedMethod) {\012  jclass jlrMethod = env_-&gt;FindClass(&quot;java/lang/reflect/Method&quot;);\012  ASSERT_NE(jlrMethod, nullptr);\012  jclass jlrConstructor = env_-&gt;FindClass(&quot;java/lang/reflect/Constructor&quot;);\012  ASSERT_NE(jlrConstructor, nullptr);\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012\012  jmethodID mid = env_-&gt;GetMethodID(c, &quot;&lt;init&gt;&quot;, &quot;()V&quot;);\012  ASSERT_NE(mid, nullptr);\012 // Turn the mid into a java.lang.reflect.Constructor...\012  jobject method = env_-&gt;ToReflectedMethod(c, mid, JNI_FALSE);\012 size_t capacity_before = GetLocalsCapacity(env_);\012 for (size_t i = 0; i &lt;= 10; ++i) {\012 // Regression test for b/18396311, ToReflectedMethod leaking local refs causing a local\012 // reference table overflows with 512 references to ArtMethod\012    env_-&gt;DeleteLocalRef(env_-&gt;ToReflectedMethod(c, mid, JNI_FALSE));\012 }\012 size_t capacity_after = GetLocalsCapacity(env_);\012  ASSERT_EQ(capacity_before, capacity_after);\012  ASSERT_NE(method, nullptr);\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(method, jlrConstructor));\012 // ...and back again.\012  jmethodID mid2 = env_-&gt;FromReflectedMethod(method);\012  ASSERT_NE(mid2, nullptr);\012 // Make sure we can actually use it.\012  jstring s = reinterpret_cast&lt;jstring&gt;(env_-&gt;AllocObject(c));\012  ASSERT_NE(s, nullptr);\012  env_-&gt;CallVoidMethod(s, mid2);\012  ASSERT_EQ(JNI_FALSE, env_-&gt;ExceptionCheck());\012  env_-&gt;ExceptionClear();\012\012  mid = env_-&gt;GetMethodID(c, &quot;length&quot;, &quot;()I&quot;);\012  ASSERT_NE(mid, nullptr);\012 // Turn the mid into a java.lang.reflect.Method...\012  method = env_-&gt;ToReflectedMethod(c, mid, JNI_FALSE);\012  ASSERT_NE(method, nullptr);\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(method, jlrMethod));\012 // ...and back again.\012  mid2 = env_-&gt;FromReflectedMethod(method);\012  ASSERT_NE(mid2, nullptr);\012 // Make sure we can actually use it.\012  s = env_-&gt;NewStringUTF(&quot;poop&quot;);\012  ASSERT_NE(s, nullptr);\012  ASSERT_EQ(4, env_-&gt;CallIntMethod(s, mid2));\012\012 // Bad arguments.\012 GetFromReflectedMethod_ToReflectedMethodBadArgumentTest(false);\012 GetFromReflectedMethod_ToReflectedMethodBadArgumentTest(true);\012})<SUB>979</SUB>> ]
+"16920" [label = <(UNKNOWN,TEST_F(JniInternalTest, RegisterAndUnregisterNatives) {\012  jclass jlobject = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  jclass jlnsme = env_-&gt;FindClass(&quot;java/lang/NoSuchMethodError&quot;);\012 void* native_function = reinterpret_cast&lt;void*&gt;(BogusMethod);\012\012 // Sanity check that no exceptions are pending.\012  ASSERT_FALSE(env_-&gt;ExceptionCheck());\012\012 // The following can print errors to the log we'd like to ignore.\012 {\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012 // Check that registering method without name causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { nullptr, &quot;()V&quot;, native_function } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012\012 // Check that registering method without signature causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { &quot;notify&quot;, nullptr, native_function } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012\012 // Check that registering method without function causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { &quot;notify&quot;, &quot;()V&quot;, nullptr } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012\012 // Check that registering to a non-existent java.lang.Object.foo() causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { &quot;foo&quot;, &quot;()V&quot;, native_function } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012\012 // Check that registering non-native methods causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { &quot;equals&quot;, &quot;(Ljava/lang/Object;)Z&quot;, native_function } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012 }\012\012 // Check that registering native methods is successful.\012 {\012 JNINativeMethod methods[] = { { &quot;notify&quot;, &quot;()V&quot;, native_function } };\012    EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_OK);\012 }\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012  EXPECT_EQ(env_-&gt;UnregisterNatives(jlobject), JNI_OK);\012\012 // Check that registering no methods isn't a failure.\012 {\012 JNINativeMethod methods[] = { };\012    EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 0), JNI_OK);\012 }\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012  EXPECT_EQ(env_-&gt;UnregisterNatives(jlobject), JNI_OK);\012\012 // Check that registering a -ve number of methods is a failure.\012 CheckJniAbortCatcher check_jni_abort_catcher;\012 for (int i = -10; i &lt; 0; ++i) {\012 JNINativeMethod methods[] = { };\012    EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, i), JNI_ERR);\012    check_jni_abort_catcher.Check(&quot;negative method count: &quot;);\012 }\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Unregistering a class with no natives is a warning.\012  EXPECT_EQ(env_-&gt;UnregisterNatives(jlnsme), JNI_OK);\012\012 RegisterAndUnregisterNativesBadArguments(false, &amp;check_jni_abort_catcher);\012 RegisterAndUnregisterNativesBadArguments(true, &amp;check_jni_abort_catcher);\012},TEST_F(JniInternalTest, RegisterAndUnregisterNatives) {\012  jclass jlobject = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  jclass jlnsme = env_-&gt;FindClass(&quot;java/lang/NoSuchMethodError&quot;);\012 void* native_function = reinterpret_cast&lt;void*&gt;(BogusMethod);\012\012 // Sanity check that no exceptions are pending.\012  ASSERT_FALSE(env_-&gt;ExceptionCheck());\012\012 // The following can print errors to the log we'd like to ignore.\012 {\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012 // Check that registering method without name causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { nullptr, &quot;()V&quot;, native_function } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012\012 // Check that registering method without signature causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { &quot;notify&quot;, nullptr, native_function } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012\012 // Check that registering method without function causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { &quot;notify&quot;, &quot;()V&quot;, nullptr } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012\012 // Check that registering to a non-existent java.lang.Object.foo() causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { &quot;foo&quot;, &quot;()V&quot;, native_function } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012\012 // Check that registering non-native methods causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { &quot;equals&quot;, &quot;(Ljava/lang/Object;)Z&quot;, native_function } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012 }\012\012 // Check that registering native methods is successful.\012 {\012 JNINativeMethod methods[] = { { &quot;notify&quot;, &quot;()V&quot;, native_function } };\012    EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_OK);\012 }\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012  EXPECT_EQ(env_-&gt;UnregisterNatives(jlobject), JNI_OK);\012\012 // Check that registering no methods isn't a failure.\012 {\012 JNINativeMethod methods[] = { };\012    EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 0), JNI_OK);\012 }\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012  EXPECT_EQ(env_-&gt;UnregisterNatives(jlobject), JNI_OK);\012\012 // Check that registering a -ve number of methods is a failure.\012 CheckJniAbortCatcher check_jni_abort_catcher;\012 for (int i = -10; i &lt; 0; ++i) {\012 JNINativeMethod methods[] = { };\012    EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, i), JNI_ERR);\012    check_jni_abort_catcher.Check(&quot;negative method count: &quot;);\012 }\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Unregistering a class with no natives is a warning.\012  EXPECT_EQ(env_-&gt;UnregisterNatives(jlnsme), JNI_OK);\012\012 RegisterAndUnregisterNativesBadArguments(false, &amp;check_jni_abort_catcher);\012 RegisterAndUnregisterNativesBadArguments(true, &amp;check_jni_abort_catcher);\012})<SUB>1034</SUB>> ]
+"16921" [label = <(UNKNOWN,TEST_F(JniInternalTest, BooleanArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewBooleanArray, GetBooleanArrayRegion, SetBooleanArrayRegion,\012 GetBooleanArrayElements, ReleaseBooleanArrayElements, jboolean, &quot;[Z&quot;);\012},TEST_F(JniInternalTest, BooleanArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewBooleanArray, GetBooleanArrayRegion, SetBooleanArrayRegion,\012 GetBooleanArrayElements, ReleaseBooleanArrayElements, jboolean, &quot;[Z&quot;);\012})<SUB>1225</SUB>> ]
+"16922" [label = <(UNKNOWN,TEST_F(JniInternalTest, ByteArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewByteArray, GetByteArrayRegion, SetByteArrayRegion,\012 GetByteArrayElements, ReleaseByteArrayElements, jbyte, &quot;[B&quot;);\012},TEST_F(JniInternalTest, ByteArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewByteArray, GetByteArrayRegion, SetByteArrayRegion,\012 GetByteArrayElements, ReleaseByteArrayElements, jbyte, &quot;[B&quot;);\012})<SUB>1229</SUB>> ]
+"16923" [label = <(UNKNOWN,TEST_F(JniInternalTest, CharArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewCharArray, GetCharArrayRegion, SetCharArrayRegion,\012 GetCharArrayElements, ReleaseCharArrayElements, jchar, &quot;[C&quot;);\012},TEST_F(JniInternalTest, CharArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewCharArray, GetCharArrayRegion, SetCharArrayRegion,\012 GetCharArrayElements, ReleaseCharArrayElements, jchar, &quot;[C&quot;);\012})<SUB>1233</SUB>> ]
+"16924" [label = <(UNKNOWN,TEST_F(JniInternalTest, DoubleArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewDoubleArray, GetDoubleArrayRegion, SetDoubleArrayRegion,\012 GetDoubleArrayElements, ReleaseDoubleArrayElements, jdouble, &quot;[D&quot;);\012},TEST_F(JniInternalTest, DoubleArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewDoubleArray, GetDoubleArrayRegion, SetDoubleArrayRegion,\012 GetDoubleArrayElements, ReleaseDoubleArrayElements, jdouble, &quot;[D&quot;);\012})<SUB>1237</SUB>> ]
+"16925" [label = <(UNKNOWN,TEST_F(JniInternalTest, FloatArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewFloatArray, GetFloatArrayRegion, SetFloatArrayRegion,\012 GetFloatArrayElements, ReleaseFloatArrayElements, jfloat, &quot;[F&quot;);\012},TEST_F(JniInternalTest, FloatArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewFloatArray, GetFloatArrayRegion, SetFloatArrayRegion,\012 GetFloatArrayElements, ReleaseFloatArrayElements, jfloat, &quot;[F&quot;);\012})<SUB>1241</SUB>> ]
+"16926" [label = <(UNKNOWN,TEST_F(JniInternalTest, IntArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewIntArray, GetIntArrayRegion, SetIntArrayRegion,\012 GetIntArrayElements, ReleaseIntArrayElements, jint, &quot;[I&quot;);\012},TEST_F(JniInternalTest, IntArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewIntArray, GetIntArrayRegion, SetIntArrayRegion,\012 GetIntArrayElements, ReleaseIntArrayElements, jint, &quot;[I&quot;);\012})<SUB>1245</SUB>> ]
+"16927" [label = <(UNKNOWN,TEST_F(JniInternalTest, LongArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewLongArray, GetLongArrayRegion, SetLongArrayRegion,\012 GetLongArrayElements, ReleaseLongArrayElements, jlong, &quot;[J&quot;);\012},TEST_F(JniInternalTest, LongArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewLongArray, GetLongArrayRegion, SetLongArrayRegion,\012 GetLongArrayElements, ReleaseLongArrayElements, jlong, &quot;[J&quot;);\012})<SUB>1249</SUB>> ]
+"16928" [label = <(UNKNOWN,TEST_F(JniInternalTest, ShortArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewShortArray, GetShortArrayRegion, SetShortArrayRegion,\012 GetShortArrayElements, ReleaseShortArrayElements, jshort, &quot;[S&quot;);\012},TEST_F(JniInternalTest, ShortArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewShortArray, GetShortArrayRegion, SetShortArrayRegion,\012 GetShortArrayElements, ReleaseShortArrayElements, jshort, &quot;[S&quot;);\012})<SUB>1253</SUB>> ]
+"16929" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetPrimitiveArrayElementsOfWrongType) {\012 GetPrimitiveArrayElementsOfWrongType(false);\012 GetPrimitiveArrayElementsOfWrongType(true);\012},TEST_F(JniInternalTest, GetPrimitiveArrayElementsOfWrongType) {\012 GetPrimitiveArrayElementsOfWrongType(false);\012 GetPrimitiveArrayElementsOfWrongType(true);\012})<SUB>1258</SUB>> ]
+"16930" [label = <(UNKNOWN,TEST_F(JniInternalTest, ReleasePrimitiveArrayElementsOfWrongType) {\012 ReleasePrimitiveArrayElementsOfWrongType(false);\012 ReleasePrimitiveArrayElementsOfWrongType(true);\012},TEST_F(JniInternalTest, ReleasePrimitiveArrayElementsOfWrongType) {\012 ReleasePrimitiveArrayElementsOfWrongType(false);\012 ReleasePrimitiveArrayElementsOfWrongType(true);\012})<SUB>1263</SUB>> ]
+"16931" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetReleasePrimitiveArrayCriticalOfWrongType) {\012 GetReleasePrimitiveArrayCriticalOfWrongType(false);\012 GetReleasePrimitiveArrayCriticalOfWrongType(true);\012},TEST_F(JniInternalTest, GetReleasePrimitiveArrayCriticalOfWrongType) {\012 GetReleasePrimitiveArrayCriticalOfWrongType(false);\012 GetReleasePrimitiveArrayCriticalOfWrongType(true);\012})<SUB>1268</SUB>> ]
+"16932" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetPrimitiveArrayRegionElementsOfWrongType) {\012 GetPrimitiveArrayRegionElementsOfWrongType(false);\012 GetPrimitiveArrayRegionElementsOfWrongType(true);\012},TEST_F(JniInternalTest, GetPrimitiveArrayRegionElementsOfWrongType) {\012 GetPrimitiveArrayRegionElementsOfWrongType(false);\012 GetPrimitiveArrayRegionElementsOfWrongType(true);\012})<SUB>1273</SUB>> ]
+"16933" [label = <(UNKNOWN,TEST_F(JniInternalTest, SetPrimitiveArrayRegionElementsOfWrongType) {\012 SetPrimitiveArrayRegionElementsOfWrongType(false);\012 SetPrimitiveArrayRegionElementsOfWrongType(true);\012},TEST_F(JniInternalTest, SetPrimitiveArrayRegionElementsOfWrongType) {\012 SetPrimitiveArrayRegionElementsOfWrongType(false);\012 SetPrimitiveArrayRegionElementsOfWrongType(true);\012})<SUB>1278</SUB>> ]
+"16934" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewObjectArray) {\012  jclass element_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(element_class, nullptr);\012  jclass array_class = env_-&gt;FindClass(&quot;[Ljava/lang/String;&quot;);\012  ASSERT_NE(array_class, nullptr);\012\012  jobjectArray a = env_-&gt;NewObjectArray(0, element_class, nullptr);\012  EXPECT_NE(a, nullptr);\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(a, array_class));\012  EXPECT_EQ(0, env_-&gt;GetArrayLength(a));\012\012  a = env_-&gt;NewObjectArray(1, element_class, nullptr);\012  EXPECT_NE(a, nullptr);\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(a, array_class));\012  EXPECT_EQ(1, env_-&gt;GetArrayLength(a));\012  EXPECT_TRUE(env_-&gt;IsSameObject(env_-&gt;GetObjectArrayElement(a, 0), nullptr));\012\012 // Negative array length checks.\012 NewObjectArrayBadArguments(false);\012 NewObjectArrayBadArguments(true);\012},TEST_F(JniInternalTest, NewObjectArray) {\012  jclass element_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(element_class, nullptr);\012  jclass array_class = env_-&gt;FindClass(&quot;[Ljava/lang/String;&quot;);\012  ASSERT_NE(array_class, nullptr);\012\012  jobjectArray a = env_-&gt;NewObjectArray(0, element_class, nullptr);\012  EXPECT_NE(a, nullptr);\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(a, array_class));\012  EXPECT_EQ(0, env_-&gt;GetArrayLength(a));\012\012  a = env_-&gt;NewObjectArray(1, element_class, nullptr);\012  EXPECT_NE(a, nullptr);\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(a, array_class));\012  EXPECT_EQ(1, env_-&gt;GetArrayLength(a));\012  EXPECT_TRUE(env_-&gt;IsSameObject(env_-&gt;GetObjectArrayElement(a, 0), nullptr));\012\012 // Negative array length checks.\012 NewObjectArrayBadArguments(false);\012 NewObjectArrayBadArguments(true);\012})<SUB>1283</SUB>> ]
+"16935" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewObjectArrayWithPrimitiveClasses) {\012 const char* primitive_descriptors = &quot;VZBSCIJFD&quot;;\012 const char* primitive_names[] = {\012 &quot;void&quot;, &quot;boolean&quot;, &quot;byte&quot;, &quot;short&quot;, &quot;char&quot;, &quot;int&quot;, &quot;long&quot;, &quot;float&quot;, &quot;double&quot;\012 };\012  ASSERT_EQ(strlen(primitive_descriptors), arraysize(primitive_names));\012\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 CheckJniAbortCatcher jni_abort_catcher;\012 for (size_t i = 0; i &lt; strlen(primitive_descriptors); ++i) {\012    env_-&gt;NewObjectArray(0, nullptr, nullptr);\012    jni_abort_catcher.Check(&quot;element_jclass == null&quot;);\012    jclass primitive_class = GetPrimitiveClass(primitive_descriptors[i]);\012    env_-&gt;NewObjectArray(1, primitive_class, nullptr);\012    std::string error_msg(StringPrintf(&quot;not an object type: %s&quot;, primitive_names[i]));\012    jni_abort_catcher.Check(error_msg.c_str());\012 }\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012 for (size_t i = 0; i &lt; strlen(primitive_descriptors); ++i) {\012    env_-&gt;NewObjectArray(0, nullptr, nullptr);\012    jni_abort_catcher.Check(&quot;NewObjectArray received NULL jclass&quot;);\012    jclass primitive_class = GetPrimitiveClass(primitive_descriptors[i]);\012    env_-&gt;NewObjectArray(1, primitive_class, nullptr);\012    std::string error_msg(StringPrintf(&quot;not an object type: %s&quot;, primitive_names[i]));\012    jni_abort_catcher.Check(error_msg.c_str());\012 }\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012},TEST_F(JniInternalTest, NewObjectArrayWithPrimitiveClasses) {\012 const char* primitive_descriptors = &quot;VZBSCIJFD&quot;;\012 const char* primitive_names[] = {\012 &quot;void&quot;, &quot;boolean&quot;, &quot;byte&quot;, &quot;short&quot;, &quot;char&quot;, &quot;int&quot;, &quot;long&quot;, &quot;float&quot;, &quot;double&quot;\012 };\012  ASSERT_EQ(strlen(primitive_descriptors), arraysize(primitive_names));\012\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 CheckJniAbortCatcher jni_abort_catcher;\012 for (size_t i = 0; i &lt; strlen(primitive_descriptors); ++i) {\012    env_-&gt;NewObjectArray(0, nullptr, nullptr);\012    jni_abort_catcher.Check(&quot;element_jclass == null&quot;);\012    jclass primitive_class = GetPrimitiveClass(primitive_descriptors[i]);\012    env_-&gt;NewObjectArray(1, primitive_class, nullptr);\012    std::string error_msg(StringPrintf(&quot;not an object type: %s&quot;, primitive_names[i]));\012    jni_abort_catcher.Check(error_msg.c_str());\012 }\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012 for (size_t i = 0; i &lt; strlen(primitive_descriptors); ++i) {\012    env_-&gt;NewObjectArray(0, nullptr, nullptr);\012    jni_abort_catcher.Check(&quot;NewObjectArray received NULL jclass&quot;);\012    jclass primitive_class = GetPrimitiveClass(primitive_descriptors[i]);\012    env_-&gt;NewObjectArray(1, primitive_class, nullptr);\012    std::string error_msg(StringPrintf(&quot;not an object type: %s&quot;, primitive_names[i]));\012    jni_abort_catcher.Check(error_msg.c_str());\012 }\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012})<SUB>1305</SUB>> ]
+"16936" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewObjectArrayWithInitialValue) {\012  jclass element_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(element_class, nullptr);\012  jclass array_class = env_-&gt;FindClass(&quot;[Ljava/lang/String;&quot;);\012  ASSERT_NE(array_class, nullptr);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;poop&quot;);\012  jobjectArray a = env_-&gt;NewObjectArray(2, element_class, s);\012  EXPECT_NE(a, nullptr);\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(a, array_class));\012  EXPECT_EQ(2, env_-&gt;GetArrayLength(a));\012  EXPECT_TRUE(env_-&gt;IsSameObject(env_-&gt;GetObjectArrayElement(a, 0), s));\012  EXPECT_TRUE(env_-&gt;IsSameObject(env_-&gt;GetObjectArrayElement(a, 1), s));\012\012 // Attempt to incorrect create an array of strings with initial value of string arrays.\012 CheckJniAbortCatcher jni_abort_catcher;\012  env_-&gt;NewObjectArray(2, element_class, a);\012  jni_abort_catcher.Check(&quot;cannot assign object of type 'java.lang.String[]' to array with element &quot;\012 &quot;type of 'java.lang.String'&quot;);\012},TEST_F(JniInternalTest, NewObjectArrayWithInitialValue) {\012  jclass element_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(element_class, nullptr);\012  jclass array_class = env_-&gt;FindClass(&quot;[Ljava/lang/String;&quot;);\012  ASSERT_NE(array_class, nullptr);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;poop&quot;);\012  jobjectArray a = env_-&gt;NewObjectArray(2, element_class, s);\012  EXPECT_NE(a, nullptr);\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(a, array_class));\012  EXPECT_EQ(2, env_-&gt;GetArrayLength(a));\012  EXPECT_TRUE(env_-&gt;IsSameObject(env_-&gt;GetObjectArrayElement(a, 0), s));\012  EXPECT_TRUE(env_-&gt;IsSameObject(env_-&gt;GetObjectArrayElement(a, 1), s));\012\012 // Attempt to incorrect create an array of strings with initial value of string arrays.\012 CheckJniAbortCatcher jni_abort_catcher;\012  env_-&gt;NewObjectArray(2, element_class, a);\012  jni_abort_catcher.Check(&quot;cannot assign object of type 'java.lang.String[]' to array with element &quot;\012 &quot;type of 'java.lang.String'&quot;);\012})<SUB>1334</SUB>> ]
+"16937" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetArrayLength) {\012 // Already tested in NewObjectArray/NewPrimitiveArray except for null.\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(0, env_-&gt;GetArrayLength(nullptr));\012  jni_abort_catcher.Check(&quot;java_array == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(JNI_ERR, env_-&gt;GetArrayLength(nullptr));\012  jni_abort_catcher.Check(&quot;jarray was NULL&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012},TEST_F(JniInternalTest, GetArrayLength) {\012 // Already tested in NewObjectArray/NewPrimitiveArray except for null.\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(0, env_-&gt;GetArrayLength(nullptr));\012  jni_abort_catcher.Check(&quot;java_array == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(JNI_ERR, env_-&gt;GetArrayLength(nullptr));\012  jni_abort_catcher.Check(&quot;jarray was NULL&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012})<SUB>1355</SUB>> ]
+"16938" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetObjectClass) {\012  jclass string_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(string_class, nullptr);\012  jclass class_class = env_-&gt;FindClass(&quot;java/lang/Class&quot;);\012  ASSERT_NE(class_class, nullptr);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;poop&quot;);\012  jclass c = env_-&gt;GetObjectClass(s);\012  ASSERT_TRUE(env_-&gt;IsSameObject(string_class, c));\012\012  jclass c2 = env_-&gt;GetObjectClass(c);\012  ASSERT_TRUE(env_-&gt;IsSameObject(class_class, env_-&gt;GetObjectClass(c2)));\012\012 // Null as object should fail.\012 CheckJniAbortCatcher jni_abort_catcher;\012  EXPECT_EQ(env_-&gt;GetObjectClass(nullptr), nullptr);\012  jni_abort_catcher.Check(&quot;java_object == null&quot;);\012},TEST_F(JniInternalTest, GetObjectClass) {\012  jclass string_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(string_class, nullptr);\012  jclass class_class = env_-&gt;FindClass(&quot;java/lang/Class&quot;);\012  ASSERT_NE(class_class, nullptr);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;poop&quot;);\012  jclass c = env_-&gt;GetObjectClass(s);\012  ASSERT_TRUE(env_-&gt;IsSameObject(string_class, c));\012\012  jclass c2 = env_-&gt;GetObjectClass(c);\012  ASSERT_TRUE(env_-&gt;IsSameObject(class_class, env_-&gt;GetObjectClass(c2)));\012\012 // Null as object should fail.\012 CheckJniAbortCatcher jni_abort_catcher;\012  EXPECT_EQ(env_-&gt;GetObjectClass(nullptr), nullptr);\012  jni_abort_catcher.Check(&quot;java_object == null&quot;);\012})<SUB>1367</SUB>> ]
+"16939" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetSuperclass) {\012  jclass object_class = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_NE(object_class, nullptr);\012  jclass string_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(string_class, nullptr);\012  jclass runnable_interface = env_-&gt;FindClass(&quot;java/lang/Runnable&quot;);\012  ASSERT_NE(runnable_interface, nullptr);\012  ASSERT_TRUE(env_-&gt;IsSameObject(object_class, env_-&gt;GetSuperclass(string_class)));\012  ASSERT_EQ(env_-&gt;GetSuperclass(object_class), nullptr);\012  ASSERT_EQ(env_-&gt;GetSuperclass(runnable_interface), nullptr);\012\012 // Null as class should fail.\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(env_-&gt;GetSuperclass(nullptr), nullptr);\012  jni_abort_catcher.Check(&quot;java_class == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(env_-&gt;GetSuperclass(nullptr), nullptr);\012  jni_abort_catcher.Check(&quot;GetSuperclass received NULL jclass&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012},TEST_F(JniInternalTest, GetSuperclass) {\012  jclass object_class = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_NE(object_class, nullptr);\012  jclass string_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(string_class, nullptr);\012  jclass runnable_interface = env_-&gt;FindClass(&quot;java/lang/Runnable&quot;);\012  ASSERT_NE(runnable_interface, nullptr);\012  ASSERT_TRUE(env_-&gt;IsSameObject(object_class, env_-&gt;GetSuperclass(string_class)));\012  ASSERT_EQ(env_-&gt;GetSuperclass(object_class), nullptr);\012  ASSERT_EQ(env_-&gt;GetSuperclass(runnable_interface), nullptr);\012\012 // Null as class should fail.\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(env_-&gt;GetSuperclass(nullptr), nullptr);\012  jni_abort_catcher.Check(&quot;java_class == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(env_-&gt;GetSuperclass(nullptr), nullptr);\012  jni_abort_catcher.Check(&quot;GetSuperclass received NULL jclass&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012})<SUB>1386</SUB>> ]
+"16940" [label = <(UNKNOWN,TEST_F(JniInternalTest, IsAssignableFrom) {\012  jclass object_class = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_NE(object_class, nullptr);\012  jclass string_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(string_class, nullptr);\012\012 // A superclass is assignable from an instance of its\012 // subclass but not vice versa.\012  ASSERT_TRUE(env_-&gt;IsAssignableFrom(string_class, object_class));\012  ASSERT_FALSE(env_-&gt;IsAssignableFrom(object_class, string_class));\012\012  jclass charsequence_interface = env_-&gt;FindClass(&quot;java/lang/CharSequence&quot;);\012  ASSERT_NE(charsequence_interface, nullptr);\012\012 // An interface is assignable from an instance of an implementing\012 // class but not vice versa.\012  ASSERT_TRUE(env_-&gt;IsAssignableFrom(string_class, charsequence_interface));\012  ASSERT_FALSE(env_-&gt;IsAssignableFrom(charsequence_interface, string_class));\012\012 // Check that arrays are covariant.\012  jclass string_array_class = env_-&gt;FindClass(&quot;[Ljava/lang/String;&quot;);\012  ASSERT_NE(string_array_class, nullptr);\012  jclass object_array_class = env_-&gt;FindClass(&quot;[Ljava/lang/Object;&quot;);\012  ASSERT_NE(object_array_class, nullptr);\012  ASSERT_TRUE(env_-&gt;IsAssignableFrom(string_array_class, object_array_class));\012  ASSERT_FALSE(env_-&gt;IsAssignableFrom(object_array_class, string_array_class));\012\012 // Primitive types are tested in 004-JniTest.\012\012 // Null as either class should fail.\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(env_-&gt;IsAssignableFrom(nullptr, string_class), JNI_FALSE);\012  jni_abort_catcher.Check(&quot;java_class1 == null&quot;);\012  EXPECT_EQ(env_-&gt;IsAssignableFrom(object_class, nullptr), JNI_FALSE);\012  jni_abort_catcher.Check(&quot;java_class2 == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(env_-&gt;IsAssignableFrom(nullptr, string_class), JNI_FALSE);\012  jni_abort_catcher.Check(&quot;IsAssignableFrom received NULL jclass&quot;);\012  EXPECT_EQ(env_-&gt;IsAssignableFrom(object_class, nullptr), JNI_FALSE);\012  jni_abort_catcher.Check(&quot;IsAssignableFrom received NULL jclass&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012},TEST_F(JniInternalTest, IsAssignableFrom) {\012  jclass object_class = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_NE(object_class, nullptr);\012  jclass string_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(string_class, nullptr);\012\012 // A superclass is assignable from an instance of its\012 // subclass but not vice versa.\012  ASSERT_TRUE(env_-&gt;IsAssignableFrom(string_class, object_class));\012  ASSERT_FALSE(env_-&gt;IsAssignableFrom(object_class, string_class));\012\012  jclass charsequence_interface = env_-&gt;FindClass(&quot;java/lang/CharSequence&quot;);\012  ASSERT_NE(charsequence_interface, nullptr);\012\012 // An interface is assignable from an instance of an implementing\012 // class but not vice versa.\012  ASSERT_TRUE(env_-&gt;IsAssignableFrom(string_class, charsequence_interface));\012  ASSERT_FALSE(env_-&gt;IsAssignableFrom(charsequence_interface, string_class));\012\012 // Check that arrays are covariant.\012  jclass string_array_class = env_-&gt;FindClass(&quot;[Ljava/lang/String;&quot;);\012  ASSERT_NE(string_array_class, nullptr);\012  jclass object_array_class = env_-&gt;FindClass(&quot;[Ljava/lang/Object;&quot;);\012  ASSERT_NE(object_array_class, nullptr);\012  ASSERT_TRUE(env_-&gt;IsAssignableFrom(string_array_class, object_array_class));\012  ASSERT_FALSE(env_-&gt;IsAssignableFrom(object_array_class, string_array_class));\012\012 // Primitive types are tested in 004-JniTest.\012\012 // Null as either class should fail.\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(env_-&gt;IsAssignableFrom(nullptr, string_class), JNI_FALSE);\012  jni_abort_catcher.Check(&quot;java_class1 == null&quot;);\012  EXPECT_EQ(env_-&gt;IsAssignableFrom(object_class, nullptr), JNI_FALSE);\012  jni_abort_catcher.Check(&quot;java_class2 == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(env_-&gt;IsAssignableFrom(nullptr, string_class), JNI_FALSE);\012  jni_abort_catcher.Check(&quot;IsAssignableFrom received NULL jclass&quot;);\012  EXPECT_EQ(env_-&gt;IsAssignableFrom(object_class, nullptr), JNI_FALSE);\012  jni_abort_catcher.Check(&quot;IsAssignableFrom received NULL jclass&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012})<SUB>1408</SUB>> ]
+"16941" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetObjectRefType) {\012  jclass local = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_TRUE(local != nullptr);\012  EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(local));\012\012  jobject global = env_-&gt;NewGlobalRef(local);\012  EXPECT_EQ(JNIGlobalRefType, env_-&gt;GetObjectRefType(global));\012\012  jweak weak_global = env_-&gt;NewWeakGlobalRef(local);\012  EXPECT_EQ(JNIWeakGlobalRefType, env_-&gt;GetObjectRefType(weak_global));\012\012 {\012 CheckJniAbortCatcher jni_abort_catcher;\012    jobject invalid = reinterpret_cast&lt;jobject&gt;(this);\012    EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(invalid));\012    jni_abort_catcher.Check(&quot;use of invalid jobject&quot;);\012 }\012\012 // TODO: invoke a native method and test that its arguments are considered local references.\012\012 // Null as pointer should not fail and return invalid-ref. b/18820997\012  EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(nullptr));\012\012 // TODO: Null as reference should return the original type.\012 // This requires running a GC so a non-null object gets freed.\012},TEST_F(JniInternalTest, GetObjectRefType) {\012  jclass local = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_TRUE(local != nullptr);\012  EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(local));\012\012  jobject global = env_-&gt;NewGlobalRef(local);\012  EXPECT_EQ(JNIGlobalRefType, env_-&gt;GetObjectRefType(global));\012\012  jweak weak_global = env_-&gt;NewWeakGlobalRef(local);\012  EXPECT_EQ(JNIWeakGlobalRefType, env_-&gt;GetObjectRefType(weak_global));\012\012 {\012 CheckJniAbortCatcher jni_abort_catcher;\012    jobject invalid = reinterpret_cast&lt;jobject&gt;(this);\012    EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(invalid));\012    jni_abort_catcher.Check(&quot;use of invalid jobject&quot;);\012 }\012\012 // TODO: invoke a native method and test that its arguments are considered local references.\012\012 // Null as pointer should not fail and return invalid-ref. b/18820997\012  EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(nullptr));\012\012 // TODO: Null as reference should return the original type.\012 // This requires running a GC so a non-null object gets freed.\012})<SUB>1452</SUB>> ]
+"16942" [label = <(UNKNOWN,TEST_F(JniInternalTest, StaleWeakGlobal) {\012  jclass java_lang_Class = env_-&gt;FindClass(&quot;java/lang/Class&quot;);\012  ASSERT_NE(java_lang_Class, nullptr);\012  jobjectArray local_ref = env_-&gt;NewObjectArray(1, java_lang_Class, nullptr);\012  ASSERT_NE(local_ref, nullptr);\012  jweak weak_global = env_-&gt;NewWeakGlobalRef(local_ref);\012  ASSERT_NE(weak_global, nullptr);\012  env_-&gt;DeleteLocalRef(local_ref);\012 // GC should clear the weak global.\012 Runtime::Current()-&gt;GetHeap()-&gt;CollectGarbage(/* clear_soft_references */ false);\012  jobject new_global_ref = env_-&gt;NewGlobalRef(weak_global);\012  EXPECT_EQ(new_global_ref, nullptr);\012  jobject new_local_ref = env_-&gt;NewLocalRef(weak_global);\012  EXPECT_EQ(new_local_ref, nullptr);\012},TEST_F(JniInternalTest, StaleWeakGlobal) {\012  jclass java_lang_Class = env_-&gt;FindClass(&quot;java/lang/Class&quot;);\012  ASSERT_NE(java_lang_Class, nullptr);\012  jobjectArray local_ref = env_-&gt;NewObjectArray(1, java_lang_Class, nullptr);\012  ASSERT_NE(local_ref, nullptr);\012  jweak weak_global = env_-&gt;NewWeakGlobalRef(local_ref);\012  ASSERT_NE(weak_global, nullptr);\012  env_-&gt;DeleteLocalRef(local_ref);\012 // GC should clear the weak global.\012 Runtime::Current()-&gt;GetHeap()-&gt;CollectGarbage(/* clear_soft_references */ false);\012  jobject new_global_ref = env_-&gt;NewGlobalRef(weak_global);\012  EXPECT_EQ(new_global_ref, nullptr);\012  jobject new_local_ref = env_-&gt;NewLocalRef(weak_global);\012  EXPECT_EQ(new_local_ref, nullptr);\012})<SUB>1479</SUB>> ]
+"16943" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewStringUTF) {\012  EXPECT_EQ(env_-&gt;NewStringUTF(nullptr), nullptr);\012  jstring s;\012\012  s = env_-&gt;NewStringUTF(&quot;&quot;);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(0, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(0, env_-&gt;GetStringUTFLength(s));\012  s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(5, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(5, env_-&gt;GetStringUTFLength(s));\012\012 // Encoded surrogate pair.\012  s = env_-&gt;NewStringUTF(&quot;\xed\xa0\x81\xed\xb0\x80&quot;);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(2, env_-&gt;GetStringLength(s));\012\012 // The surrogate pair gets encoded into a 4 byte UTF sequence..\012  EXPECT_EQ(4, env_-&gt;GetStringUTFLength(s));\012 const char* chars = env_-&gt;GetStringUTFChars(s, nullptr);\012  EXPECT_STREQ(&quot;\xf0\x90\x90\x80&quot;, chars);\012  env_-&gt;ReleaseStringUTFChars(s, chars);\012\012 // .. but is stored as is in the utf-16 representation.\012 const jchar* jchars = env_-&gt;GetStringChars(s, nullptr);\012  EXPECT_EQ(0xd801, jchars[0]);\012  EXPECT_EQ(0xdc00, jchars[1]);\012  env_-&gt;ReleaseStringChars(s, jchars);\012\012 // 4 byte UTF sequence appended to an encoded surrogate pair.\012  s = env_-&gt;NewStringUTF(&quot;\xed\xa0\x81\xed\xb0\x80 \xf0\x9f\x8f\xa0&quot;);\012  EXPECT_NE(s, nullptr);\012\012 // The 4 byte sequence {0xf0, 0x9f, 0x8f, 0xa0} is converted into a surrogate\012 // pair {0xd83c, 0xdfe0}.\012  EXPECT_EQ(5, env_-&gt;GetStringLength(s));\012  jchars = env_-&gt;GetStringChars(s, nullptr);\012 // The first surrogate pair, encoded as such in the input.\012  EXPECT_EQ(0xd801, jchars[0]);\012  EXPECT_EQ(0xdc00, jchars[1]);\012 // The second surrogate pair, from the 4 byte UTF sequence in the input.\012  EXPECT_EQ(0xd83c, jchars[3]);\012  EXPECT_EQ(0xdfe0, jchars[4]);\012  env_-&gt;ReleaseStringChars(s, jchars);\012\012  EXPECT_EQ(9, env_-&gt;GetStringUTFLength(s));\012  chars = env_-&gt;GetStringUTFChars(s, nullptr);\012  EXPECT_STREQ(&quot;\xf0\x90\x90\x80 \xf0\x9f\x8f\xa0&quot;, chars);\012  env_-&gt;ReleaseStringUTFChars(s, chars);\012\012 // A string with 1, 2, 3 and 4 byte UTF sequences with spaces\012 // between them\012  s = env_-&gt;NewStringUTF(&quot;\x24 \xc2\xa2 \xe2\x82\xac \xf0\x9f\x8f\xa0&quot;);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(8, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(13, env_-&gt;GetStringUTFLength(s));\012},TEST_F(JniInternalTest, NewStringUTF) {\012  EXPECT_EQ(env_-&gt;NewStringUTF(nullptr), nullptr);\012  jstring s;\012\012  s = env_-&gt;NewStringUTF(&quot;&quot;);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(0, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(0, env_-&gt;GetStringUTFLength(s));\012  s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(5, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(5, env_-&gt;GetStringUTFLength(s));\012\012 // Encoded surrogate pair.\012  s = env_-&gt;NewStringUTF(&quot;\xed\xa0\x81\xed\xb0\x80&quot;);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(2, env_-&gt;GetStringLength(s));\012\012 // The surrogate pair gets encoded into a 4 byte UTF sequence..\012  EXPECT_EQ(4, env_-&gt;GetStringUTFLength(s));\012 const char* chars = env_-&gt;GetStringUTFChars(s, nullptr);\012  EXPECT_STREQ(&quot;\xf0\x90\x90\x80&quot;, chars);\012  env_-&gt;ReleaseStringUTFChars(s, chars);\012\012 // .. but is stored as is in the utf-16 representation.\012 const jchar* jchars = env_-&gt;GetStringChars(s, nullptr);\012  EXPECT_EQ(0xd801, jchars[0]);\012  EXPECT_EQ(0xdc00, jchars[1]);\012  env_-&gt;ReleaseStringChars(s, jchars);\012\012 // 4 byte UTF sequence appended to an encoded surrogate pair.\012  s = env_-&gt;NewStringUTF(&quot;\xed\xa0\x81\xed\xb0\x80 \xf0\x9f\x8f\xa0&quot;);\012  EXPECT_NE(s, nullptr);\012\012 // The 4 byte sequence {0xf0, 0x9f, 0x8f, 0xa0} is converted into a surrogate\012 // pair {0xd83c, 0xdfe0}.\012  EXPECT_EQ(5, env_-&gt;GetStringLength(s));\012  jchars = env_-&gt;GetStringChars(s, nullptr);\012 // The first surrogate pair, encoded as such in the input.\012  EXPECT_EQ(0xd801, jchars[0]);\012  EXPECT_EQ(0xdc00, jchars[1]);\012 // The second surrogate pair, from the 4 byte UTF sequence in the input.\012  EXPECT_EQ(0xd83c, jchars[3]);\012  EXPECT_EQ(0xdfe0, jchars[4]);\012  env_-&gt;ReleaseStringChars(s, jchars);\012\012  EXPECT_EQ(9, env_-&gt;GetStringUTFLength(s));\012  chars = env_-&gt;GetStringUTFChars(s, nullptr);\012  EXPECT_STREQ(&quot;\xf0\x90\x90\x80 \xf0\x9f\x8f\xa0&quot;, chars);\012  env_-&gt;ReleaseStringUTFChars(s, chars);\012\012 // A string with 1, 2, 3 and 4 byte UTF sequences with spaces\012 // between them\012  s = env_-&gt;NewStringUTF(&quot;\x24 \xc2\xa2 \xe2\x82\xac \xf0\x9f\x8f\xa0&quot;);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(8, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(13, env_-&gt;GetStringUTFLength(s));\012})<SUB>1495</SUB>> ]
+"16944" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewString) {\012  jchar chars[] = { 'h', 'i' };\012  jstring s;\012  s = env_-&gt;NewString(chars, 0);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(0, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(0, env_-&gt;GetStringUTFLength(s));\012  s = env_-&gt;NewString(chars, 2);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(2, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(2, env_-&gt;GetStringUTFLength(s));\012\012 // TODO: check some non-ASCII strings.\012},TEST_F(JniInternalTest, NewString) {\012  jchar chars[] = { 'h', 'i' };\012  jstring s;\012  s = env_-&gt;NewString(chars, 0);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(0, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(0, env_-&gt;GetStringUTFLength(s));\012  s = env_-&gt;NewString(chars, 2);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(2, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(2, env_-&gt;GetStringUTFLength(s));\012\012 // TODO: check some non-ASCII strings.\012})<SUB>1554</SUB>> ]
+"16945" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewStringNullCharsZeroLength) {\012  jstring s = env_-&gt;NewString(nullptr, 0);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(0, env_-&gt;GetStringLength(s));\012},TEST_F(JniInternalTest, NewStringNullCharsZeroLength) {\012  jstring s = env_-&gt;NewString(nullptr, 0);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(0, env_-&gt;GetStringLength(s));\012})<SUB>1569</SUB>> ]
+"16946" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewStringNullCharsNonzeroLength) {\012 CheckJniAbortCatcher jni_abort_catcher;\012  env_-&gt;NewString(nullptr, 1);\012  jni_abort_catcher.Check(&quot;chars == null &amp;&amp; char_count &gt; 0&quot;);\012},TEST_F(JniInternalTest, NewStringNullCharsNonzeroLength) {\012 CheckJniAbortCatcher jni_abort_catcher;\012  env_-&gt;NewString(nullptr, 1);\012  jni_abort_catcher.Check(&quot;chars == null &amp;&amp; char_count &gt; 0&quot;);\012})<SUB>1575</SUB>> ]
+"16947" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewStringNegativeLength) {\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  env_-&gt;NewString(nullptr, -1);\012  jni_abort_catcher.Check(&quot;char_count &lt; 0: -1&quot;);\012  env_-&gt;NewString(nullptr, std::numeric_limits&lt;jint&gt;::min());\012  jni_abort_catcher.Check(&quot;char_count &lt; 0: -2147483648&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  env_-&gt;NewString(nullptr, -1);\012  jni_abort_catcher.Check(&quot;negative jsize: -1&quot;);\012  env_-&gt;NewString(nullptr, std::numeric_limits&lt;jint&gt;::min());\012  jni_abort_catcher.Check(&quot;negative jsize: -2147483648&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012},TEST_F(JniInternalTest, NewStringNegativeLength) {\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  env_-&gt;NewString(nullptr, -1);\012  jni_abort_catcher.Check(&quot;char_count &lt; 0: -1&quot;);\012  env_-&gt;NewString(nullptr, std::numeric_limits&lt;jint&gt;::min());\012  jni_abort_catcher.Check(&quot;char_count &lt; 0: -2147483648&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  env_-&gt;NewString(nullptr, -1);\012  jni_abort_catcher.Check(&quot;negative jsize: -1&quot;);\012  env_-&gt;NewString(nullptr, std::numeric_limits&lt;jint&gt;::min());\012  jni_abort_catcher.Check(&quot;negative jsize: -2147483648&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012})<SUB>1581</SUB>> ]
+"16948" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetStringLength_GetStringUTFLength) {\012 // Already tested in the NewString/NewStringUTF tests.\012},TEST_F(JniInternalTest, GetStringLength_GetStringUTFLength) {\012 // Already tested in the NewString/NewStringUTF tests.\012})<SUB>1596</SUB>> ]
+"16949" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetStringRegion_GetStringUTFRegion) {\012  jstring s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012  ASSERT_TRUE(s != nullptr);\012\012  env_-&gt;GetStringRegion(s, -1, 0, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringRegion(s, 0, -1, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringRegion(s, 0, 10, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringRegion(s, 10, 1, nullptr);\012 ExpectException(sioobe_);\012 // Regression test against integer overflow in range check.\012  env_-&gt;GetStringRegion(s, 0x7fffffff, 0x7fffffff, nullptr);\012 ExpectException(sioobe_);\012\012  jchar chars[4] = { 'x', 'x', 'x', 'x' };\012  env_-&gt;GetStringRegion(s, 1, 2, &amp;chars[1]);\012  EXPECT_EQ('x', chars[0]);\012  EXPECT_EQ('e', chars[1]);\012  EXPECT_EQ('l', chars[2]);\012  EXPECT_EQ('x', chars[3]);\012\012 // It's okay for the buffer to be null as long as the length is 0.\012  env_-&gt;GetStringRegion(s, 2, 0, nullptr);\012 // Even if the offset is invalid...\012  env_-&gt;GetStringRegion(s, 123, 0, nullptr);\012 ExpectException(sioobe_);\012\012  env_-&gt;GetStringUTFRegion(s, -1, 0, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringUTFRegion(s, 0, -1, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringUTFRegion(s, 0, 10, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringUTFRegion(s, 10, 1, nullptr);\012 ExpectException(sioobe_);\012 // Regression test against integer overflow in range check.\012  env_-&gt;GetStringUTFRegion(s, 0x7fffffff, 0x7fffffff, nullptr);\012 ExpectException(sioobe_);\012\012 char bytes[4] = { 'x', 'x', 'x', 'x' };\012  env_-&gt;GetStringUTFRegion(s, 1, 2, &amp;bytes[1]);\012  EXPECT_EQ('x', bytes[0]);\012  EXPECT_EQ('e', bytes[1]);\012  EXPECT_EQ('l', bytes[2]);\012  EXPECT_EQ('x', bytes[3]);\012\012 // It's okay for the buffer to be null as long as the length is 0.\012  env_-&gt;GetStringUTFRegion(s, 2, 0, nullptr);\012 // Even if the offset is invalid...\012  env_-&gt;GetStringUTFRegion(s, 123, 0, nullptr);\012 ExpectException(sioobe_);\012},TEST_F(JniInternalTest, GetStringRegion_GetStringUTFRegion) {\012  jstring s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012  ASSERT_TRUE(s != nullptr);\012\012  env_-&gt;GetStringRegion(s, -1, 0, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringRegion(s, 0, -1, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringRegion(s, 0, 10, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringRegion(s, 10, 1, nullptr);\012 ExpectException(sioobe_);\012 // Regression test against integer overflow in range check.\012  env_-&gt;GetStringRegion(s, 0x7fffffff, 0x7fffffff, nullptr);\012 ExpectException(sioobe_);\012\012  jchar chars[4] = { 'x', 'x', 'x', 'x' };\012  env_-&gt;GetStringRegion(s, 1, 2, &amp;chars[1]);\012  EXPECT_EQ('x', chars[0]);\012  EXPECT_EQ('e', chars[1]);\012  EXPECT_EQ('l', chars[2]);\012  EXPECT_EQ('x', chars[3]);\012\012 // It's okay for the buffer to be null as long as the length is 0.\012  env_-&gt;GetStringRegion(s, 2, 0, nullptr);\012 // Even if the offset is invalid...\012  env_-&gt;GetStringRegion(s, 123, 0, nullptr);\012 ExpectException(sioobe_);\012\012  env_-&gt;GetStringUTFRegion(s, -1, 0, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringUTFRegion(s, 0, -1, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringUTFRegion(s, 0, 10, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringUTFRegion(s, 10, 1, nullptr);\012 ExpectException(sioobe_);\012 // Regression test against integer overflow in range check.\012  env_-&gt;GetStringUTFRegion(s, 0x7fffffff, 0x7fffffff, nullptr);\012 ExpectException(sioobe_);\012\012 char bytes[4] = { 'x', 'x', 'x', 'x' };\012  env_-&gt;GetStringUTFRegion(s, 1, 2, &amp;bytes[1]);\012  EXPECT_EQ('x', bytes[0]);\012  EXPECT_EQ('e', bytes[1]);\012  EXPECT_EQ('l', bytes[2]);\012  EXPECT_EQ('x', bytes[3]);\012\012 // It's okay for the buffer to be null as long as the length is 0.\012  env_-&gt;GetStringUTFRegion(s, 2, 0, nullptr);\012 // Even if the offset is invalid...\012  env_-&gt;GetStringUTFRegion(s, 123, 0, nullptr);\012 ExpectException(sioobe_);\012})<SUB>1600</SUB>> ]
+"16950" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetStringUTFChars_ReleaseStringUTFChars) {\012 // Passing in a null jstring is ignored normally, but caught by -Xcheck:jni.\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_EQ(env_-&gt;GetStringUTFChars(nullptr, nullptr), nullptr);\012 }\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012    EXPECT_EQ(env_-&gt;GetStringUTFChars(nullptr, nullptr), nullptr);\012    check_jni_abort_catcher.Check(&quot;GetStringUTFChars received NULL jstring&quot;);\012    EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012 }\012\012  jstring s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012  ASSERT_TRUE(s != nullptr);\012\012 const char* utf = env_-&gt;GetStringUTFChars(s, nullptr);\012  EXPECT_STREQ(&quot;hello&quot;, utf);\012  env_-&gt;ReleaseStringUTFChars(s, utf);\012\012  jboolean is_copy = JNI_FALSE;\012  utf = env_-&gt;GetStringUTFChars(s, &amp;is_copy);\012  EXPECT_EQ(JNI_TRUE, is_copy);\012  EXPECT_STREQ(&quot;hello&quot;, utf);\012  env_-&gt;ReleaseStringUTFChars(s, utf);\012},TEST_F(JniInternalTest, GetStringUTFChars_ReleaseStringUTFChars) {\012 // Passing in a null jstring is ignored normally, but caught by -Xcheck:jni.\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_EQ(env_-&gt;GetStringUTFChars(nullptr, nullptr), nullptr);\012 }\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012    EXPECT_EQ(env_-&gt;GetStringUTFChars(nullptr, nullptr), nullptr);\012    check_jni_abort_catcher.Check(&quot;GetStringUTFChars received NULL jstring&quot;);\012    EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012 }\012\012  jstring s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012  ASSERT_TRUE(s != nullptr);\012\012 const char* utf = env_-&gt;GetStringUTFChars(s, nullptr);\012  EXPECT_STREQ(&quot;hello&quot;, utf);\012  env_-&gt;ReleaseStringUTFChars(s, utf);\012\012  jboolean is_copy = JNI_FALSE;\012  utf = env_-&gt;GetStringUTFChars(s, &amp;is_copy);\012  EXPECT_EQ(JNI_TRUE, is_copy);\012  EXPECT_STREQ(&quot;hello&quot;, utf);\012  env_-&gt;ReleaseStringUTFChars(s, utf);\012})<SUB>1655</SUB>> ]
+"16951" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetStringChars_ReleaseStringChars) {\012  jstring s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012 ScopedObjectAccess soa(env_);\012 ObjPtr&lt;mirror::String&gt; s_m = soa.Decode&lt;mirror::String&gt;(s);\012  ASSERT_TRUE(s != nullptr);\012\012  jchar expected[] = { 'h', 'e', 'l', 'l', 'o' };\012 const jchar* chars = env_-&gt;GetStringChars(s, nullptr);\012  EXPECT_EQ(expected[0], chars[0]);\012  EXPECT_EQ(expected[1], chars[1]);\012  EXPECT_EQ(expected[2], chars[2]);\012  EXPECT_EQ(expected[3], chars[3]);\012  EXPECT_EQ(expected[4], chars[4]);\012  env_-&gt;ReleaseStringChars(s, chars);\012\012  jboolean is_copy = JNI_FALSE;\012  chars = env_-&gt;GetStringChars(s, &amp;is_copy);\012 if (Runtime::Current()-&gt;GetHeap()-&gt;IsMovableObject(s_m)) {\012    EXPECT_EQ(JNI_TRUE, is_copy);\012 } else {\012    EXPECT_EQ(JNI_FALSE, is_copy);\012 }\012  EXPECT_EQ(expected[0], chars[0]);\012  EXPECT_EQ(expected[1], chars[1]);\012  EXPECT_EQ(expected[2], chars[2]);\012  EXPECT_EQ(expected[3], chars[3]);\012  EXPECT_EQ(expected[4], chars[4]);\012  env_-&gt;ReleaseStringChars(s, chars);\012},TEST_F(JniInternalTest, GetStringChars_ReleaseStringChars) {\012  jstring s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012 ScopedObjectAccess soa(env_);\012 ObjPtr&lt;mirror::String&gt; s_m = soa.Decode&lt;mirror::String&gt;(s);\012  ASSERT_TRUE(s != nullptr);\012\012  jchar expected[] = { 'h', 'e', 'l', 'l', 'o' };\012 const jchar* chars = env_-&gt;GetStringChars(s, nullptr);\012  EXPECT_EQ(expected[0], chars[0]);\012  EXPECT_EQ(expected[1], chars[1]);\012  EXPECT_EQ(expected[2], chars[2]);\012  EXPECT_EQ(expected[3], chars[3]);\012  EXPECT_EQ(expected[4], chars[4]);\012  env_-&gt;ReleaseStringChars(s, chars);\012\012  jboolean is_copy = JNI_FALSE;\012  chars = env_-&gt;GetStringChars(s, &amp;is_copy);\012 if (Runtime::Current()-&gt;GetHeap()-&gt;IsMovableObject(s_m)) {\012    EXPECT_EQ(JNI_TRUE, is_copy);\012 } else {\012    EXPECT_EQ(JNI_FALSE, is_copy);\012 }\012  EXPECT_EQ(expected[0], chars[0]);\012  EXPECT_EQ(expected[1], chars[1]);\012  EXPECT_EQ(expected[2], chars[2]);\012  EXPECT_EQ(expected[3], chars[3]);\012  EXPECT_EQ(expected[4], chars[4]);\012  env_-&gt;ReleaseStringChars(s, chars);\012})<SUB>1684</SUB>> ]
+"16952" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetStringCritical_ReleaseStringCritical) {\012  jstring s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012  ASSERT_TRUE(s != nullptr);\012\012  jchar expected[] = { 'h', 'e', 'l', 'l', 'o' };\012 const jchar* chars = env_-&gt;GetStringCritical(s, nullptr);\012  EXPECT_EQ(expected[0], chars[0]);\012  EXPECT_EQ(expected[1], chars[1]);\012  EXPECT_EQ(expected[2], chars[2]);\012  EXPECT_EQ(expected[3], chars[3]);\012  EXPECT_EQ(expected[4], chars[4]);\012  env_-&gt;ReleaseStringCritical(s, chars);\012\012  jboolean is_copy = JNI_TRUE;\012  chars = env_-&gt;GetStringCritical(s, &amp;is_copy);\012 if (mirror::kUseStringCompression) {\012 // is_copy has to be JNI_TRUE because &quot;hello&quot; is all-ASCII\012    EXPECT_EQ(JNI_TRUE, is_copy);\012 } else {\012    EXPECT_EQ(JNI_FALSE, is_copy);\012 }\012  EXPECT_EQ(expected[0], chars[0]);\012  EXPECT_EQ(expected[1], chars[1]);\012  EXPECT_EQ(expected[2], chars[2]);\012  EXPECT_EQ(expected[3], chars[3]);\012  EXPECT_EQ(expected[4], chars[4]);\012  env_-&gt;ReleaseStringCritical(s, chars);\012\012 if (mirror::kUseStringCompression) {\012 // is_copy has to be JNI_FALSE because &quot;\xed\xa0\x81\xed\xb0\x80&quot; is incompressible\012    jboolean is_copy_16 = JNI_TRUE;\012    jstring s_16 = env_-&gt;NewStringUTF(&quot;\xed\xa0\x81\xed\xb0\x80&quot;);\012    chars = env_-&gt;GetStringCritical(s_16, &amp;is_copy_16);\012    EXPECT_EQ(2, env_-&gt;GetStringLength(s_16));\012    EXPECT_EQ(4, env_-&gt;GetStringUTFLength(s_16));\012    env_-&gt;ReleaseStringCritical(s_16, chars);\012 }\012},TEST_F(JniInternalTest, GetStringCritical_ReleaseStringCritical) {\012  jstring s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012  ASSERT_TRUE(s != nullptr);\012\012  jchar expected[] = { 'h', 'e', 'l', 'l', 'o' };\012 const jchar* chars = env_-&gt;GetStringCritical(s, nullptr);\012  EXPECT_EQ(expected[0], chars[0]);\012  EXPECT_EQ(expected[1], chars[1]);\012  EXPECT_EQ(expected[2], chars[2]);\012  EXPECT_EQ(expected[3], chars[3]);\012  EXPECT_EQ(expected[4], chars[4]);\012  env_-&gt;ReleaseStringCritical(s, chars);\012\012  jboolean is_copy = JNI_TRUE;\012  chars = env_-&gt;GetStringCritical(s, &amp;is_copy);\012 if (mirror::kUseStringCompression) {\012 // is_copy has to be JNI_TRUE because &quot;hello&quot; is all-ASCII\012    EXPECT_EQ(JNI_TRUE, is_copy);\012 } else {\012    EXPECT_EQ(JNI_FALSE, is_copy);\012 }\012  EXPECT_EQ(expected[0], chars[0]);\012  EXPECT_EQ(expected[1], chars[1]);\012  EXPECT_EQ(expected[2], chars[2]);\012  EXPECT_EQ(expected[3], chars[3]);\012  EXPECT_EQ(expected[4], chars[4]);\012  env_-&gt;ReleaseStringCritical(s, chars);\012\012 if (mirror::kUseStringCompression) {\012 // is_copy has to be JNI_FALSE because &quot;\xed\xa0\x81\xed\xb0\x80&quot; is incompressible\012    jboolean is_copy_16 = JNI_TRUE;\012    jstring s_16 = env_-&gt;NewStringUTF(&quot;\xed\xa0\x81\xed\xb0\x80&quot;);\012    chars = env_-&gt;GetStringCritical(s_16, &amp;is_copy_16);\012    EXPECT_EQ(2, env_-&gt;GetStringLength(s_16));\012    EXPECT_EQ(4, env_-&gt;GetStringUTFLength(s_16));\012    env_-&gt;ReleaseStringCritical(s_16, chars);\012 }\012})<SUB>1714</SUB>> ]
+"16953" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetObjectArrayElement_SetObjectArrayElement) {\012  jclass java_lang_Class = env_-&gt;FindClass(&quot;java/lang/Class&quot;);\012  ASSERT_TRUE(java_lang_Class != nullptr);\012\012  jobjectArray array = env_-&gt;NewObjectArray(1, java_lang_Class, nullptr);\012  EXPECT_NE(array, nullptr);\012  EXPECT_EQ(env_-&gt;GetObjectArrayElement(array, 0), nullptr);\012  env_-&gt;SetObjectArrayElement(array, 0, java_lang_Class);\012  EXPECT_TRUE(env_-&gt;IsSameObject(env_-&gt;GetObjectArrayElement(array, 0), java_lang_Class));\012\012 // ArrayIndexOutOfBounds for negative index.\012  env_-&gt;SetObjectArrayElement(array, -1, java_lang_Class);\012 ExpectException(aioobe_);\012\012 // ArrayIndexOutOfBounds for too-large index.\012  env_-&gt;SetObjectArrayElement(array, 1, java_lang_Class);\012 ExpectException(aioobe_);\012\012 // ArrayStoreException thrown for bad types.\012  env_-&gt;SetObjectArrayElement(array, 0, env_-&gt;NewStringUTF(&quot;not a jclass!&quot;));\012 ExpectException(ase_);\012\012 // Null as array should fail.\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(nullptr, env_-&gt;GetObjectArrayElement(nullptr, 0));\012  jni_abort_catcher.Check(&quot;java_array == null&quot;);\012  env_-&gt;SetObjectArrayElement(nullptr, 0, nullptr);\012  jni_abort_catcher.Check(&quot;java_array == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(nullptr, env_-&gt;GetObjectArrayElement(nullptr, 0));\012  jni_abort_catcher.Check(&quot;jarray was NULL&quot;);\012  env_-&gt;SetObjectArrayElement(nullptr, 0, nullptr);\012  jni_abort_catcher.Check(&quot;jarray was NULL&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012},TEST_F(JniInternalTest, GetObjectArrayElement_SetObjectArrayElement) {\012  jclass java_lang_Class = env_-&gt;FindClass(&quot;java/lang/Class&quot;);\012  ASSERT_TRUE(java_lang_Class != nullptr);\012\012  jobjectArray array = env_-&gt;NewObjectArray(1, java_lang_Class, nullptr);\012  EXPECT_NE(array, nullptr);\012  EXPECT_EQ(env_-&gt;GetObjectArrayElement(array, 0), nullptr);\012  env_-&gt;SetObjectArrayElement(array, 0, java_lang_Class);\012  EXPECT_TRUE(env_-&gt;IsSameObject(env_-&gt;GetObjectArrayElement(array, 0), java_lang_Class));\012\012 // ArrayIndexOutOfBounds for negative index.\012  env_-&gt;SetObjectArrayElement(array, -1, java_lang_Class);\012 ExpectException(aioobe_);\012\012 // ArrayIndexOutOfBounds for too-large index.\012  env_-&gt;SetObjectArrayElement(array, 1, java_lang_Class);\012 ExpectException(aioobe_);\012\012 // ArrayStoreException thrown for bad types.\012  env_-&gt;SetObjectArrayElement(array, 0, env_-&gt;NewStringUTF(&quot;not a jclass!&quot;));\012 ExpectException(ase_);\012\012 // Null as array should fail.\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(nullptr, env_-&gt;GetObjectArrayElement(nullptr, 0));\012  jni_abort_catcher.Check(&quot;java_array == null&quot;);\012  env_-&gt;SetObjectArrayElement(nullptr, 0, nullptr);\012  jni_abort_catcher.Check(&quot;java_array == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(nullptr, env_-&gt;GetObjectArrayElement(nullptr, 0));\012  jni_abort_catcher.Check(&quot;jarray was NULL&quot;);\012  env_-&gt;SetObjectArrayElement(nullptr, 0, nullptr);\012  jni_abort_catcher.Check(&quot;jarray was NULL&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012})<SUB>1753</SUB>> ]
+"16954" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetPrimitiveField_SetPrimitiveField) {\012  TEST_PRIMITIVE_FIELD_FOR_CLASS(&quot;AllFields&quot;);\012},TEST_F(JniInternalTest, GetPrimitiveField_SetPrimitiveField) {\012  TEST_PRIMITIVE_FIELD_FOR_CLASS(&quot;AllFields&quot;);\012})<SUB>1884</SUB>> ]
+"16955" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetPrimitiveField_SetPrimitiveField_Subclass) {\012  TEST_PRIMITIVE_FIELD_FOR_CLASS(&quot;AllFieldsSub&quot;);\012},TEST_F(JniInternalTest, GetPrimitiveField_SetPrimitiveField_Subclass) {\012  TEST_PRIMITIVE_FIELD_FOR_CLASS(&quot;AllFieldsSub&quot;);\012})<SUB>1888</SUB>> ]
+"16956" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetField_SetField_unrelated) {\012 Thread::Current()-&gt;TransitionFromSuspendedToRunnable();\012 LoadDex(&quot;AllFields&quot;);\012 bool started = runtime_-&gt;Start();\012  ASSERT_TRUE(started);\012  jclass c = env_-&gt;FindClass(&quot;AllFields&quot;);\012  ASSERT_NE(c, nullptr);\012  jclass uc = env_-&gt;FindClass(&quot;AllFieldsUnrelated&quot;);\012  ASSERT_NE(uc, nullptr);\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(true);\012  EXPECT_UNRELATED_FIELD_FAILURE(Boolean, &quot;sZ&quot;, &quot;Z&quot;, JNI_TRUE);\012  EXPECT_UNRELATED_FIELD_FAILURE(Byte, &quot;sB&quot;, &quot;B&quot;, 1);\012  EXPECT_UNRELATED_FIELD_FAILURE(Char, &quot;sC&quot;, &quot;C&quot;, 'a');\012  EXPECT_UNRELATED_FIELD_FAILURE(Double, &quot;sD&quot;, &quot;D&quot;, 1.0);\012  EXPECT_UNRELATED_FIELD_FAILURE(Float, &quot;sF&quot;, &quot;F&quot;, 1.0);\012  EXPECT_UNRELATED_FIELD_FAILURE(Int, &quot;sI&quot;, &quot;I&quot;, 1);\012  EXPECT_UNRELATED_FIELD_FAILURE(Long, &quot;sJ&quot;, &quot;J&quot;, 1);\012  EXPECT_UNRELATED_FIELD_FAILURE(Short, &quot;sS&quot;, &quot;S&quot;, 1);\012  EXPECT_UNRELATED_FIELD_FAILURE(Object, &quot;sObject&quot;, &quot;Ljava/lang/Object;&quot;, c);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012},TEST_F(JniInternalTest, GetField_SetField_unrelated) {\012 Thread::Current()-&gt;TransitionFromSuspendedToRunnable();\012 LoadDex(&quot;AllFields&quot;);\012 bool started = runtime_-&gt;Start();\012  ASSERT_TRUE(started);\012  jclass c = env_-&gt;FindClass(&quot;AllFields&quot;);\012  ASSERT_NE(c, nullptr);\012  jclass uc = env_-&gt;FindClass(&quot;AllFieldsUnrelated&quot;);\012  ASSERT_NE(uc, nullptr);\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(true);\012  EXPECT_UNRELATED_FIELD_FAILURE(Boolean, &quot;sZ&quot;, &quot;Z&quot;, JNI_TRUE);\012  EXPECT_UNRELATED_FIELD_FAILURE(Byte, &quot;sB&quot;, &quot;B&quot;, 1);\012  EXPECT_UNRELATED_FIELD_FAILURE(Char, &quot;sC&quot;, &quot;C&quot;, 'a');\012  EXPECT_UNRELATED_FIELD_FAILURE(Double, &quot;sD&quot;, &quot;D&quot;, 1.0);\012  EXPECT_UNRELATED_FIELD_FAILURE(Float, &quot;sF&quot;, &quot;F&quot;, 1.0);\012  EXPECT_UNRELATED_FIELD_FAILURE(Int, &quot;sI&quot;, &quot;I&quot;, 1);\012  EXPECT_UNRELATED_FIELD_FAILURE(Long, &quot;sJ&quot;, &quot;J&quot;, 1);\012  EXPECT_UNRELATED_FIELD_FAILURE(Short, &quot;sS&quot;, &quot;S&quot;, 1);\012  EXPECT_UNRELATED_FIELD_FAILURE(Object, &quot;sObject&quot;, &quot;Ljava/lang/Object;&quot;, c);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012})<SUB>1903</SUB>> ]
+"16957" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetObjectField_SetObjectField) {\012  TEST_OBJECT_FIELD_FOR_CLASS(&quot;AllFields&quot;);\012},TEST_F(JniInternalTest, GetObjectField_SetObjectField) {\012  TEST_OBJECT_FIELD_FOR_CLASS(&quot;AllFields&quot;);\012})<SUB>1957</SUB>> ]
+"16958" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetObjectField_SetObjectField_subclass) {\012  TEST_OBJECT_FIELD_FOR_CLASS(&quot;AllFieldsSub&quot;);\012},TEST_F(JniInternalTest, GetObjectField_SetObjectField_subclass) {\012  TEST_OBJECT_FIELD_FOR_CLASS(&quot;AllFieldsSub&quot;);\012})<SUB>1961</SUB>> ]
+"16959" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewLocalRef_nullptr) {\012  EXPECT_EQ(env_-&gt;NewLocalRef(nullptr), nullptr);\012},TEST_F(JniInternalTest, NewLocalRef_nullptr) {\012  EXPECT_EQ(env_-&gt;NewLocalRef(nullptr), nullptr);\012})<SUB>1965</SUB>> ]
+"16960" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewLocalRef) {\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  jobject o = env_-&gt;NewLocalRef(s);\012  EXPECT_NE(o, nullptr);\012  EXPECT_NE(o, s);\012\012  EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(o));\012},TEST_F(JniInternalTest, NewLocalRef) {\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  jobject o = env_-&gt;NewLocalRef(s);\012  EXPECT_NE(o, nullptr);\012  EXPECT_NE(o, s);\012\012  EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(o));\012})<SUB>1969</SUB>> ]
+"16961" [label = <(UNKNOWN,TEST_F(JniInternalTest, DeleteLocalRef_nullptr) {\012  env_-&gt;DeleteLocalRef(nullptr);\012},TEST_F(JniInternalTest, DeleteLocalRef_nullptr) {\012  env_-&gt;DeleteLocalRef(nullptr);\012})<SUB>1979</SUB>> ]
+"16962" [label = <(UNKNOWN,TEST_F(JniInternalTest, DeleteLocalRef) {\012 // This tests leads to warnings and errors in the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  env_-&gt;DeleteLocalRef(s);\012\012 // Currently, deleting an already-deleted reference is just a CheckJNI warning.\012 {\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      env_-&gt;DeleteLocalRef(s);\012 }\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012    env_-&gt;DeleteLocalRef(s);\012    std::string expected(StringPrintf(&quot;use of deleted local reference %p&quot;, s));\012    check_jni_abort_catcher.Check(expected.c_str());\012    EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012 }\012\012  s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  jobject o = env_-&gt;NewLocalRef(s);\012  ASSERT_NE(o, nullptr);\012\012  env_-&gt;DeleteLocalRef(s);\012  env_-&gt;DeleteLocalRef(o);\012},TEST_F(JniInternalTest, DeleteLocalRef) {\012 // This tests leads to warnings and errors in the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  env_-&gt;DeleteLocalRef(s);\012\012 // Currently, deleting an already-deleted reference is just a CheckJNI warning.\012 {\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      env_-&gt;DeleteLocalRef(s);\012 }\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012    env_-&gt;DeleteLocalRef(s);\012    std::string expected(StringPrintf(&quot;use of deleted local reference %p&quot;, s));\012    check_jni_abort_catcher.Check(expected.c_str());\012    EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012 }\012\012  s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  jobject o = env_-&gt;NewLocalRef(s);\012  ASSERT_NE(o, nullptr);\012\012  env_-&gt;DeleteLocalRef(s);\012  env_-&gt;DeleteLocalRef(o);\012})<SUB>1983</SUB>> ]
+"16963" [label = <(UNKNOWN,TEST_F(JniInternalTest, PushLocalFrame_10395422) {\012 // The JNI specification is ambiguous about whether the given capacity is to be interpreted as a\012 // maximum or as a minimum, but it seems like it's supposed to be a minimum, and that's how\012 // Android historically treated it, and it's how the RI treats it. It's also the more useful\012 // interpretation!\012  ASSERT_EQ(JNI_OK, env_-&gt;PushLocalFrame(0));\012  env_-&gt;PopLocalFrame(nullptr);\012\012 // The following two tests will print errors to the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012 // Negative capacities are not allowed.\012  ASSERT_EQ(JNI_ERR, env_-&gt;PushLocalFrame(-1));\012},TEST_F(JniInternalTest, PushLocalFrame_10395422) {\012 // The JNI specification is ambiguous about whether the given capacity is to be interpreted as a\012 // maximum or as a minimum, but it seems like it's supposed to be a minimum, and that's how\012 // Android historically treated it, and it's how the RI treats it. It's also the more useful\012 // interpretation!\012  ASSERT_EQ(JNI_OK, env_-&gt;PushLocalFrame(0));\012  env_-&gt;PopLocalFrame(nullptr);\012\012 // The following two tests will print errors to the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012 // Negative capacities are not allowed.\012  ASSERT_EQ(JNI_ERR, env_-&gt;PushLocalFrame(-1));\012})<SUB>2015</SUB>> ]
+"16964" [label = <(UNKNOWN,TEST_F(JniInternalTest, PushLocalFrame_PopLocalFrame) {\012 // This tests leads to errors in the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012  jobject original = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(original, nullptr);\012\012  jobject outer;\012  jobject inner1, inner2;\012 ScopedObjectAccess soa(env_);\012 {\012    ASSERT_EQ(JNI_OK, env_-&gt;PushLocalFrame(4));\012    outer = env_-&gt;NewLocalRef(original);\012\012 {\012      ASSERT_EQ(JNI_OK, env_-&gt;PushLocalFrame(4));\012      inner1 = env_-&gt;NewLocalRef(outer);\012      inner2 = env_-&gt;NewStringUTF(&quot;survivor&quot;);\012      EXPECT_NE(env_-&gt;PopLocalFrame(inner2), nullptr);\012 }\012\012    EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(original));\012    EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(outer));\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(inner1));\012      check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012 }\012\012 // Our local reference for the survivor is invalid because the survivor\012 // gets a new local reference...\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(inner2));\012      check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012 }\012\012    EXPECT_EQ(env_-&gt;PopLocalFrame(nullptr), nullptr);\012 }\012  EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(original));\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(outer));\012  check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012  EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(inner1));\012  check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012  EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(inner2));\012  check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012},TEST_F(JniInternalTest, PushLocalFrame_PopLocalFrame) {\012 // This tests leads to errors in the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012  jobject original = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(original, nullptr);\012\012  jobject outer;\012  jobject inner1, inner2;\012 ScopedObjectAccess soa(env_);\012 {\012    ASSERT_EQ(JNI_OK, env_-&gt;PushLocalFrame(4));\012    outer = env_-&gt;NewLocalRef(original);\012\012 {\012      ASSERT_EQ(JNI_OK, env_-&gt;PushLocalFrame(4));\012      inner1 = env_-&gt;NewLocalRef(outer);\012      inner2 = env_-&gt;NewStringUTF(&quot;survivor&quot;);\012      EXPECT_NE(env_-&gt;PopLocalFrame(inner2), nullptr);\012 }\012\012    EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(original));\012    EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(outer));\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(inner1));\012      check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012 }\012\012 // Our local reference for the survivor is invalid because the survivor\012 // gets a new local reference...\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(inner2));\012      check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012 }\012\012    EXPECT_EQ(env_-&gt;PopLocalFrame(nullptr), nullptr);\012 }\012  EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(original));\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(outer));\012  check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012  EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(inner1));\012  check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012  EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(inner2));\012  check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012})<SUB>2030</SUB>> ]
+"16965" [label = <(UNKNOWN,TEST_F(JniInternalTest, PushLocalFrame_LimitAndOverflow) {\012 // Try a very large value that should fail.\012  ASSERT_NE(JNI_OK, env_-&gt;PushLocalFrame(std::numeric_limits&lt;jint&gt;::max()));\012  ASSERT_TRUE(env_-&gt;ExceptionCheck());\012  env_-&gt;ExceptionClear();\012\012 // On 32-bit, also check for some overflow conditions.\012#ifndef __LP64__\012  ASSERT_EQ(JNI_OK, env_-&gt;PushLocalFrame(10));\012  ASSERT_NE(JNI_OK, env_-&gt;PushLocalFrame(std::numeric_limits&lt;jint&gt;::max() - 10));\012  ASSERT_TRUE(env_-&gt;ExceptionCheck());\012  env_-&gt;ExceptionClear();\012  EXPECT_EQ(env_-&gt;PopLocalFrame(nullptr), nullptr);\012#endif\012},TEST_F(JniInternalTest, PushLocalFrame_LimitAndOverflow) {\012 // Try a very large value that should fail.\012  ASSERT_NE(JNI_OK, env_-&gt;PushLocalFrame(std::numeric_limits&lt;jint&gt;::max()));\012  ASSERT_TRUE(env_-&gt;ExceptionCheck());\012  env_-&gt;ExceptionClear();\012\012 // On 32-bit, also check for some overflow conditions.\012#ifndef __LP64__\012  ASSERT_EQ(JNI_OK, env_-&gt;PushLocalFrame(10));\012  ASSERT_NE(JNI_OK, env_-&gt;PushLocalFrame(std::numeric_limits&lt;jint&gt;::max() - 10));\012  ASSERT_TRUE(env_-&gt;ExceptionCheck());\012  env_-&gt;ExceptionClear();\012  EXPECT_EQ(env_-&gt;PopLocalFrame(nullptr), nullptr);\012#endif\012})<SUB>2079</SUB>> ]
+"16966" [label = <(UNKNOWN,TEST_F(JniInternalTest, PushLocalFrame_b62223672) {\012 // The 512 entry limit has been lifted, try a larger value.\012  ASSERT_EQ(JNI_OK, env_-&gt;PushLocalFrame(1024));\012  EXPECT_EQ(env_-&gt;PopLocalFrame(nullptr), nullptr);\012},TEST_F(JniInternalTest, PushLocalFrame_b62223672) {\012 // The 512 entry limit has been lifted, try a larger value.\012  ASSERT_EQ(JNI_OK, env_-&gt;PushLocalFrame(1024));\012  EXPECT_EQ(env_-&gt;PopLocalFrame(nullptr), nullptr);\012})<SUB>2095</SUB>> ]
+"16967" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewGlobalRef_nullptr) {\012  EXPECT_EQ(env_-&gt;NewGlobalRef(nullptr), nullptr);\012},TEST_F(JniInternalTest, NewGlobalRef_nullptr) {\012  EXPECT_EQ(env_-&gt;NewGlobalRef(nullptr), nullptr);\012})<SUB>2101</SUB>> ]
+"16968" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewGlobalRef) {\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  jobject o = env_-&gt;NewGlobalRef(s);\012  EXPECT_NE(o, nullptr);\012  EXPECT_NE(o, s);\012\012  EXPECT_EQ(env_-&gt;GetObjectRefType(o), JNIGlobalRefType);\012},TEST_F(JniInternalTest, NewGlobalRef) {\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  jobject o = env_-&gt;NewGlobalRef(s);\012  EXPECT_NE(o, nullptr);\012  EXPECT_NE(o, s);\012\012  EXPECT_EQ(env_-&gt;GetObjectRefType(o), JNIGlobalRefType);\012})<SUB>2105</SUB>> ]
+"16969" [label = <(UNKNOWN,TEST_F(JniInternalTest, DeleteGlobalRef_nullptr) {\012  env_-&gt;DeleteGlobalRef(nullptr);\012},TEST_F(JniInternalTest, DeleteGlobalRef_nullptr) {\012  env_-&gt;DeleteGlobalRef(nullptr);\012})<SUB>2115</SUB>> ]
+"16970" [label = <(UNKNOWN,TEST_F(JniInternalTest, DeleteGlobalRef) {\012 // This tests leads to warnings and errors in the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012\012  jobject o = env_-&gt;NewGlobalRef(s);\012  ASSERT_NE(o, nullptr);\012  env_-&gt;DeleteGlobalRef(o);\012\012 // Currently, deleting an already-deleted reference is just a CheckJNI warning.\012 {\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      env_-&gt;DeleteGlobalRef(o);\012 }\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012    env_-&gt;DeleteGlobalRef(o);\012    std::string expected(StringPrintf(&quot;use of deleted global reference %p&quot;, o));\012    check_jni_abort_catcher.Check(expected.c_str());\012    EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012 }\012\012  jobject o1 = env_-&gt;NewGlobalRef(s);\012  ASSERT_NE(o1, nullptr);\012  jobject o2 = env_-&gt;NewGlobalRef(s);\012  ASSERT_NE(o2, nullptr);\012\012  env_-&gt;DeleteGlobalRef(o1);\012  env_-&gt;DeleteGlobalRef(o2);\012},TEST_F(JniInternalTest, DeleteGlobalRef) {\012 // This tests leads to warnings and errors in the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012\012  jobject o = env_-&gt;NewGlobalRef(s);\012  ASSERT_NE(o, nullptr);\012  env_-&gt;DeleteGlobalRef(o);\012\012 // Currently, deleting an already-deleted reference is just a CheckJNI warning.\012 {\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      env_-&gt;DeleteGlobalRef(o);\012 }\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012    env_-&gt;DeleteGlobalRef(o);\012    std::string expected(StringPrintf(&quot;use of deleted global reference %p&quot;, o));\012    check_jni_abort_catcher.Check(expected.c_str());\012    EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012 }\012\012  jobject o1 = env_-&gt;NewGlobalRef(s);\012  ASSERT_NE(o1, nullptr);\012  jobject o2 = env_-&gt;NewGlobalRef(s);\012  ASSERT_NE(o2, nullptr);\012\012  env_-&gt;DeleteGlobalRef(o1);\012  env_-&gt;DeleteGlobalRef(o2);\012})<SUB>2119</SUB>> ]
+"16971" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewWeakGlobalRef_nullptr) {\012  EXPECT_EQ(env_-&gt;NewWeakGlobalRef(nullptr), nullptr);\012},TEST_F(JniInternalTest, NewWeakGlobalRef_nullptr) {\012  EXPECT_EQ(env_-&gt;NewWeakGlobalRef(nullptr), nullptr);\012})<SUB>2154</SUB>> ]
+"16972" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewWeakGlobalRef) {\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  jobject o = env_-&gt;NewWeakGlobalRef(s);\012  EXPECT_NE(o, nullptr);\012  EXPECT_NE(o, s);\012\012  EXPECT_EQ(env_-&gt;GetObjectRefType(o), JNIWeakGlobalRefType);\012},TEST_F(JniInternalTest, NewWeakGlobalRef) {\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  jobject o = env_-&gt;NewWeakGlobalRef(s);\012  EXPECT_NE(o, nullptr);\012  EXPECT_NE(o, s);\012\012  EXPECT_EQ(env_-&gt;GetObjectRefType(o), JNIWeakGlobalRefType);\012})<SUB>2158</SUB>> ]
+"16973" [label = <(UNKNOWN,TEST_F(JniInternalTest, DeleteWeakGlobalRef_nullptr) {\012  env_-&gt;DeleteWeakGlobalRef(nullptr);\012},TEST_F(JniInternalTest, DeleteWeakGlobalRef_nullptr) {\012  env_-&gt;DeleteWeakGlobalRef(nullptr);\012})<SUB>2168</SUB>> ]
+"16974" [label = <(UNKNOWN,TEST_F(JniInternalTest, DeleteWeakGlobalRef) {\012 // This tests leads to warnings and errors in the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012\012  jobject o = env_-&gt;NewWeakGlobalRef(s);\012  ASSERT_NE(o, nullptr);\012  env_-&gt;DeleteWeakGlobalRef(o);\012\012 // Currently, deleting an already-deleted reference is just a CheckJNI warning.\012 {\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      env_-&gt;DeleteWeakGlobalRef(o);\012 }\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012    env_-&gt;DeleteWeakGlobalRef(o);\012    std::string expected(StringPrintf(&quot;use of deleted weak global reference %p&quot;, o));\012    check_jni_abort_catcher.Check(expected.c_str());\012    EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012 }\012\012  jobject o1 = env_-&gt;NewWeakGlobalRef(s);\012  ASSERT_NE(o1, nullptr);\012  jobject o2 = env_-&gt;NewWeakGlobalRef(s);\012  ASSERT_NE(o2, nullptr);\012\012  env_-&gt;DeleteWeakGlobalRef(o1);\012  env_-&gt;DeleteWeakGlobalRef(o2);\012},TEST_F(JniInternalTest, DeleteWeakGlobalRef) {\012 // This tests leads to warnings and errors in the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012\012  jobject o = env_-&gt;NewWeakGlobalRef(s);\012  ASSERT_NE(o, nullptr);\012  env_-&gt;DeleteWeakGlobalRef(o);\012\012 // Currently, deleting an already-deleted reference is just a CheckJNI warning.\012 {\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      env_-&gt;DeleteWeakGlobalRef(o);\012 }\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012    env_-&gt;DeleteWeakGlobalRef(o);\012    std::string expected(StringPrintf(&quot;use of deleted weak global reference %p&quot;, o));\012    check_jni_abort_catcher.Check(expected.c_str());\012    EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012 }\012\012  jobject o1 = env_-&gt;NewWeakGlobalRef(s);\012  ASSERT_NE(o1, nullptr);\012  jobject o2 = env_-&gt;NewWeakGlobalRef(s);\012  ASSERT_NE(o2, nullptr);\012\012  env_-&gt;DeleteWeakGlobalRef(o1);\012  env_-&gt;DeleteWeakGlobalRef(o2);\012})<SUB>2172</SUB>> ]
+"16975" [label = <(UNKNOWN,TEST_F(JniInternalTest, ExceptionDescribe) {\012 // This checks how ExceptionDescribe handles call without exception.\012  env_-&gt;ExceptionClear();\012  env_-&gt;ExceptionDescribe();\012},TEST_F(JniInternalTest, ExceptionDescribe) {\012 // This checks how ExceptionDescribe handles call without exception.\012  env_-&gt;ExceptionClear();\012  env_-&gt;ExceptionDescribe();\012})<SUB>2207</SUB>> ]
+"16976" [label = <(UNKNOWN,TEST_F(JniInternalTest, Throw) {\012  jclass exception_class = env_-&gt;FindClass(&quot;java/lang/RuntimeException&quot;);\012  ASSERT_TRUE(exception_class != nullptr);\012  jthrowable exception = reinterpret_cast&lt;jthrowable&gt;(env_-&gt;AllocObject(exception_class));\012  ASSERT_TRUE(exception != nullptr);\012\012  EXPECT_EQ(JNI_OK, env_-&gt;Throw(exception));\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  jthrowable thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsSameObject(exception, thrown_exception));\012\012 // Bad argument.\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(JNI_ERR, env_-&gt;Throw(nullptr));\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  EXPECT_EQ(JNI_ERR, env_-&gt;Throw(nullptr));\012  check_jni_abort_catcher.Check(&quot;Throw received NULL jthrowable&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012},TEST_F(JniInternalTest, Throw) {\012  jclass exception_class = env_-&gt;FindClass(&quot;java/lang/RuntimeException&quot;);\012  ASSERT_TRUE(exception_class != nullptr);\012  jthrowable exception = reinterpret_cast&lt;jthrowable&gt;(env_-&gt;AllocObject(exception_class));\012  ASSERT_TRUE(exception != nullptr);\012\012  EXPECT_EQ(JNI_OK, env_-&gt;Throw(exception));\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  jthrowable thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsSameObject(exception, thrown_exception));\012\012 // Bad argument.\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(JNI_ERR, env_-&gt;Throw(nullptr));\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  EXPECT_EQ(JNI_ERR, env_-&gt;Throw(nullptr));\012  check_jni_abort_catcher.Check(&quot;Throw received NULL jthrowable&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012})<SUB>2213</SUB>> ]
+"16977" [label = <(UNKNOWN,TEST_F(JniInternalTest, ThrowNew) {\012  jclass exception_class = env_-&gt;FindClass(&quot;java/lang/RuntimeException&quot;);\012  ASSERT_TRUE(exception_class != nullptr);\012\012  jthrowable thrown_exception;\012\012  EXPECT_EQ(JNI_OK, env_-&gt;ThrowNew(exception_class, &quot;hello world&quot;));\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(thrown_exception, exception_class));\012\012  EXPECT_EQ(JNI_OK, env_-&gt;ThrowNew(exception_class, nullptr));\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(thrown_exception, exception_class));\012\012 // Bad argument.\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  EXPECT_EQ(JNI_ERR, env_-&gt;ThrowNew(nullptr, nullptr));\012  check_jni_abort_catcher.Check(&quot;c == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(JNI_ERR, env_-&gt;ThrowNew(nullptr, nullptr));\012  check_jni_abort_catcher.Check(&quot;ThrowNew received NULL jclass&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012},TEST_F(JniInternalTest, ThrowNew) {\012  jclass exception_class = env_-&gt;FindClass(&quot;java/lang/RuntimeException&quot;);\012  ASSERT_TRUE(exception_class != nullptr);\012\012  jthrowable thrown_exception;\012\012  EXPECT_EQ(JNI_OK, env_-&gt;ThrowNew(exception_class, &quot;hello world&quot;));\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(thrown_exception, exception_class));\012\012  EXPECT_EQ(JNI_OK, env_-&gt;ThrowNew(exception_class, nullptr));\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(thrown_exception, exception_class));\012\012 // Bad argument.\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  EXPECT_EQ(JNI_ERR, env_-&gt;ThrowNew(nullptr, nullptr));\012  check_jni_abort_catcher.Check(&quot;c == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(JNI_ERR, env_-&gt;ThrowNew(nullptr, nullptr));\012  check_jni_abort_catcher.Check(&quot;ThrowNew received NULL jclass&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012})<SUB>2235</SUB>> ]
+"16978" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewDirectBuffer_GetDirectBufferAddress_GetDirectBufferCapacity) {\012 // Start runtime.\012 Thread* self = Thread::Current();\012  self-&gt;TransitionFromSuspendedToRunnable();\012 MakeExecutable(nullptr, &quot;java.lang.Class&quot;);\012 MakeExecutable(nullptr, &quot;java.lang.Object&quot;);\012 MakeExecutable(nullptr, &quot;java.nio.DirectByteBuffer&quot;);\012 MakeExecutable(nullptr, &quot;java.nio.Bits&quot;);\012 MakeExecutable(nullptr, &quot;java.nio.MappedByteBuffer&quot;);\012 MakeExecutable(nullptr, &quot;java.nio.ByteBuffer&quot;);\012 MakeExecutable(nullptr, &quot;java.nio.Buffer&quot;);\012 // TODO: we only load a dex file here as starting the runtime relies upon it.\012 const char* class_name = &quot;StaticLeafMethods&quot;;\012 LoadDex(class_name);\012 bool started = runtime_-&gt;Start();\012  ASSERT_TRUE(started);\012\012  jclass buffer_class = env_-&gt;FindClass(&quot;java/nio/Buffer&quot;);\012  ASSERT_NE(buffer_class, nullptr);\012\012 char bytes[1024];\012  jobject buffer = env_-&gt;NewDirectByteBuffer(bytes, sizeof(bytes));\012  ASSERT_NE(buffer, nullptr);\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(buffer, buffer_class));\012  ASSERT_EQ(env_-&gt;GetDirectBufferAddress(buffer), bytes);\012  ASSERT_EQ(env_-&gt;GetDirectBufferCapacity(buffer), static_cast&lt;jlong&gt;(sizeof(bytes)));\012\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    env_-&gt;NewDirectByteBuffer(bytes, static_cast&lt;jlong&gt;(INT_MAX) + 1);\012    check_jni_abort_catcher.Check(&quot;in call to NewDirectByteBuffer&quot;);\012 }\012},TEST_F(JniInternalTest, NewDirectBuffer_GetDirectBufferAddress_GetDirectBufferCapacity) {\012 // Start runtime.\012 Thread* self = Thread::Current();\012  self-&gt;TransitionFromSuspendedToRunnable();\012 MakeExecutable(nullptr, &quot;java.lang.Class&quot;);\012 MakeExecutable(nullptr, &quot;java.lang.Object&quot;);\012 MakeExecutable(nullptr, &quot;java.nio.DirectByteBuffer&quot;);\012 MakeExecutable(nullptr, &quot;java.nio.Bits&quot;);\012 MakeExecutable(nullptr, &quot;java.nio.MappedByteBuffer&quot;);\012 MakeExecutable(nullptr, &quot;java.nio.ByteBuffer&quot;);\012 MakeExecutable(nullptr, &quot;java.nio.Buffer&quot;);\012 // TODO: we only load a dex file here as starting the runtime relies upon it.\012 const char* class_name = &quot;StaticLeafMethods&quot;;\012 LoadDex(class_name);\012 bool started = runtime_-&gt;Start();\012  ASSERT_TRUE(started);\012\012  jclass buffer_class = env_-&gt;FindClass(&quot;java/nio/Buffer&quot;);\012  ASSERT_NE(buffer_class, nullptr);\012\012 char bytes[1024];\012  jobject buffer = env_-&gt;NewDirectByteBuffer(bytes, sizeof(bytes));\012  ASSERT_NE(buffer, nullptr);\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(buffer, buffer_class));\012  ASSERT_EQ(env_-&gt;GetDirectBufferAddress(buffer), bytes);\012  ASSERT_EQ(env_-&gt;GetDirectBufferCapacity(buffer), static_cast&lt;jlong&gt;(sizeof(bytes)));\012\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    env_-&gt;NewDirectByteBuffer(bytes, static_cast&lt;jlong&gt;(INT_MAX) + 1);\012    check_jni_abort_catcher.Check(&quot;in call to NewDirectByteBuffer&quot;);\012 }\012})<SUB>2264</SUB>> ]
+"16979" [label = <(UNKNOWN,TEST_F(JniInternalTest, MonitorEnterExit) {\012 // This will print some error messages. Suppress.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012 // Create an object to torture.\012  jclass object_class = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_NE(object_class, nullptr);\012  jobject object = env_-&gt;AllocObject(object_class);\012  ASSERT_NE(object, nullptr);\012\012 // Expected class of exceptions\012  jclass imse_class = env_-&gt;FindClass(&quot;java/lang/IllegalMonitorStateException&quot;);\012  ASSERT_NE(imse_class, nullptr);\012\012  jthrowable thrown_exception;\012\012 // Unlock of unowned monitor\012  env_-&gt;MonitorExit(object);\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(thrown_exception, imse_class));\012\012 // Lock of unowned monitor\012  env_-&gt;MonitorEnter(object);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012 // Regular unlock\012  env_-&gt;MonitorExit(object);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Recursively lock a lot\012 size_t max_recursive_lock = 1024;\012 for (size_t i = 0; i &lt; max_recursive_lock; i++) {\012    env_-&gt;MonitorEnter(object);\012    EXPECT_FALSE(env_-&gt;ExceptionCheck());\012 }\012 // Recursively unlock a lot\012 for (size_t i = 0; i &lt; max_recursive_lock; i++) {\012    env_-&gt;MonitorExit(object);\012    EXPECT_FALSE(env_-&gt;ExceptionCheck());\012 }\012\012 // Unlock of unowned monitor\012  env_-&gt;MonitorExit(object);\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(thrown_exception, imse_class));\012\012 // It's an error to call MonitorEnter or MonitorExit on null.\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    env_-&gt;MonitorEnter(nullptr);\012    check_jni_abort_catcher.Check(&quot;in call to MonitorEnter&quot;);\012    env_-&gt;MonitorExit(nullptr);\012    check_jni_abort_catcher.Check(&quot;in call to MonitorExit&quot;);\012 }\012},TEST_F(JniInternalTest, MonitorEnterExit) {\012 // This will print some error messages. Suppress.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012 // Create an object to torture.\012  jclass object_class = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_NE(object_class, nullptr);\012  jobject object = env_-&gt;AllocObject(object_class);\012  ASSERT_NE(object, nullptr);\012\012 // Expected class of exceptions\012  jclass imse_class = env_-&gt;FindClass(&quot;java/lang/IllegalMonitorStateException&quot;);\012  ASSERT_NE(imse_class, nullptr);\012\012  jthrowable thrown_exception;\012\012 // Unlock of unowned monitor\012  env_-&gt;MonitorExit(object);\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(thrown_exception, imse_class));\012\012 // Lock of unowned monitor\012  env_-&gt;MonitorEnter(object);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012 // Regular unlock\012  env_-&gt;MonitorExit(object);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Recursively lock a lot\012 size_t max_recursive_lock = 1024;\012 for (size_t i = 0; i &lt; max_recursive_lock; i++) {\012    env_-&gt;MonitorEnter(object);\012    EXPECT_FALSE(env_-&gt;ExceptionCheck());\012 }\012 // Recursively unlock a lot\012 for (size_t i = 0; i &lt; max_recursive_lock; i++) {\012    env_-&gt;MonitorExit(object);\012    EXPECT_FALSE(env_-&gt;ExceptionCheck());\012 }\012\012 // Unlock of unowned monitor\012  env_-&gt;MonitorExit(object);\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(thrown_exception, imse_class));\012\012 // It's an error to call MonitorEnter or MonitorExit on null.\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    env_-&gt;MonitorEnter(nullptr);\012    check_jni_abort_catcher.Check(&quot;in call to MonitorEnter&quot;);\012    env_-&gt;MonitorExit(nullptr);\012    check_jni_abort_catcher.Check(&quot;in call to MonitorExit&quot;);\012 }\012})<SUB>2298</SUB>> ]
+"16991" [label = <(UNKNOWN,TEST_F(JniInternalTest, MonitorExitLockedInDifferentCall) {\012 SetUpForTest(false, &quot;foo&quot;, &quot;()V&quot;, reinterpret_cast&lt;void*&gt;(&amp;Java_MyClassNatives_foo_exit));\012  ASSERT_NE(jobj_, nullptr);\012\012  env_-&gt;MonitorEnter(jobj_);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  env_-&gt;CallNonvirtualVoidMethod(jobj_, jklass_, jmethod_);\012  check_jni_abort_catcher.Check(&quot;Unlocking monitor that wasn't locked here&quot;);\012},TEST_F(JniInternalTest, MonitorExitLockedInDifferentCall) {\012 SetUpForTest(false, &quot;foo&quot;, &quot;()V&quot;, reinterpret_cast&lt;void*&gt;(&amp;Java_MyClassNatives_foo_exit));\012  ASSERT_NE(jobj_, nullptr);\012\012  env_-&gt;MonitorEnter(jobj_);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  env_-&gt;CallNonvirtualVoidMethod(jobj_, jklass_, jmethod_);\012  check_jni_abort_catcher.Check(&quot;Unlocking monitor that wasn't locked here&quot;);\012})<SUB>2362</SUB>> ]
+"17003" [label = <(UNKNOWN,TEST_F(JniInternalTest, MonitorExitNotAllUnlocked) {\012 SetUpForTest(false,\012 &quot;foo&quot;,\012 &quot;()V&quot;,\012 reinterpret_cast&lt;void*&gt;(&amp;Java_MyClassNatives_foo_enter_no_exit));\012  ASSERT_NE(jobj_, nullptr);\012\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  env_-&gt;CallNonvirtualVoidMethod(jobj_, jklass_, jmethod_);\012  check_jni_abort_catcher.Check(&quot;Still holding a locked object on JNI end&quot;);\012},TEST_F(JniInternalTest, MonitorExitNotAllUnlocked) {\012 SetUpForTest(false,\012 &quot;foo&quot;,\012 &quot;()V&quot;,\012 reinterpret_cast&lt;void*&gt;(&amp;Java_MyClassNatives_foo_enter_no_exit));\012  ASSERT_NE(jobj_, nullptr);\012\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  env_-&gt;CallNonvirtualVoidMethod(jobj_, jklass_, jmethod_);\012  check_jni_abort_catcher.Check(&quot;Still holding a locked object on JNI end&quot;);\012})<SUB>2379</SUB>> ]
+"17075" [label = <(UNKNOWN,TEST_F(JniInternalTest, DetachThreadUnlockJNIMonitors) {\012 // We need to lock an object, detach, reattach, and check the locks.\012 //\012 // As re-attaching will create a different thread, we need to use a global\012 // ref to keep the object around.\012\012 // Create an object to torture.\012  jobject global_ref;\012 {\012    jclass object_class = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012    ASSERT_NE(object_class, nullptr);\012    jobject object = env_-&gt;AllocObject(object_class);\012    ASSERT_NE(object, nullptr);\012    global_ref = env_-&gt;NewGlobalRef(object);\012 }\012\012 // Lock it.\012  env_-&gt;MonitorEnter(global_ref);\012  ASSERT_TRUE(IsLocked(env_, global_ref));\012\012 // Detach and re-attach.\012  jint detach_result = vm_-&gt;DetachCurrentThread();\012  ASSERT_EQ(detach_result, JNI_OK);\012  jint attach_result = vm_-&gt;AttachCurrentThread(&amp;env_, nullptr);\012  ASSERT_EQ(attach_result, JNI_OK);\012\012 // Look at the global ref, check whether it's still locked.\012  ASSERT_FALSE(IsLocked(env_, global_ref));\012\012 // Delete the global ref.\012  env_-&gt;DeleteGlobalRef(global_ref);\012},TEST_F(JniInternalTest, DetachThreadUnlockJNIMonitors) {\012 // We need to lock an object, detach, reattach, and check the locks.\012 //\012 // As re-attaching will create a different thread, we need to use a global\012 // ref to keep the object around.\012\012 // Create an object to torture.\012  jobject global_ref;\012 {\012    jclass object_class = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012    ASSERT_NE(object_class, nullptr);\012    jobject object = env_-&gt;AllocObject(object_class);\012    ASSERT_NE(object, nullptr);\012    global_ref = env_-&gt;NewGlobalRef(object);\012 }\012\012 // Lock it.\012  env_-&gt;MonitorEnter(global_ref);\012  ASSERT_TRUE(IsLocked(env_, global_ref));\012\012 // Detach and re-attach.\012  jint detach_result = vm_-&gt;DetachCurrentThread();\012  ASSERT_EQ(detach_result, JNI_OK);\012  jint attach_result = vm_-&gt;AttachCurrentThread(&amp;env_, nullptr);\012  ASSERT_EQ(attach_result, JNI_OK);\012\012 // Look at the global ref, check whether it's still locked.\012  ASSERT_FALSE(IsLocked(env_, global_ref));\012\012 // Delete the global ref.\012  env_-&gt;DeleteGlobalRef(global_ref);\012})<SUB>2409</SUB>> ]
+"17076" [label = <(UNKNOWN,TEST_F(JniInternalTest, IndirectReferenceTableOffsets) {\012 // The segment_state_ field is private, and we want to avoid friend declaration. So we'll check\012 // by modifying memory.\012 // The parameters don't really matter here.\012  std::string error_msg;\012 IndirectReferenceTable irt(5,\012 IndirectRefKind::kGlobal,\012 IndirectReferenceTable::ResizableCapacity::kNo,\012 &amp;error_msg);\012  ASSERT_TRUE(irt.IsValid()) &lt;&lt; error_msg;\012 IRTSegmentState old_state = irt.GetSegmentState();\012\012 // Write some new state directly. We invert parts of old_state to ensure a new value.\012 IRTSegmentState new_state;\012  new_state.top_index = old_state.top_index ^ 0x07705005;\012  ASSERT_NE(old_state.top_index, new_state.top_index);\012\012 uint8_t* base = reinterpret_cast&lt;uint8_t*&gt;(&amp;irt);\012 int32_t segment_state_offset =\012 IndirectReferenceTable::SegmentStateOffset(sizeof(void*)).Int32Value();\012 *reinterpret_cast&lt;IRTSegmentState*&gt;(base + segment_state_offset) = new_state;\012\012 // Read and compare.\012  EXPECT_EQ(new_state.top_index, irt.GetSegmentState().top_index);\012},TEST_F(JniInternalTest, IndirectReferenceTableOffsets) {\012 // The segment_state_ field is private, and we want to avoid friend declaration. So we'll check\012 // by modifying memory.\012 // The parameters don't really matter here.\012  std::string error_msg;\012 IndirectReferenceTable irt(5,\012 IndirectRefKind::kGlobal,\012 IndirectReferenceTable::ResizableCapacity::kNo,\012 &amp;error_msg);\012  ASSERT_TRUE(irt.IsValid()) &lt;&lt; error_msg;\012 IRTSegmentState old_state = irt.GetSegmentState();\012\012 // Write some new state directly. We invert parts of old_state to ensure a new value.\012 IRTSegmentState new_state;\012  new_state.top_index = old_state.top_index ^ 0x07705005;\012  ASSERT_NE(old_state.top_index, new_state.top_index);\012\012 uint8_t* base = reinterpret_cast&lt;uint8_t*&gt;(&amp;irt);\012 int32_t segment_state_offset =\012 IndirectReferenceTable::SegmentStateOffset(sizeof(void*)).Int32Value();\012 *reinterpret_cast&lt;IRTSegmentState*&gt;(base + segment_state_offset) = new_state;\012\012 // Read and compare.\012  EXPECT_EQ(new_state.top_index, irt.GetSegmentState().top_index);\012})<SUB>2443</SUB>> ]
+"17077" [label = <(UNKNOWN,TEST_F(JniInternalTest, JNIEnvExtOffsets) {\012  EXPECT_EQ(OFFSETOF_MEMBER(JNIEnvExt, local_ref_cookie_),\012 JNIEnvExt::LocalRefCookieOffset(sizeof(void*)).Uint32Value());\012\012  EXPECT_EQ(OFFSETOF_MEMBER(JNIEnvExt, self_), JNIEnvExt::SelfOffset(sizeof(void*)).Uint32Value());\012\012 // segment_state_ is private in the IndirectReferenceTable. So this test isn't as good as we'd\012 // hope it to be.\012 uint32_t segment_state_now =\012      OFFSETOF_MEMBER(JNIEnvExt, locals_) +\012 IndirectReferenceTable::SegmentStateOffset(sizeof(void*)).Uint32Value();\012 uint32_t segment_state_computed = JNIEnvExt::SegmentStateOffset(sizeof(void*)).Uint32Value();\012  EXPECT_EQ(segment_state_now, segment_state_computed);\012},TEST_F(JniInternalTest, JNIEnvExtOffsets) {\012  EXPECT_EQ(OFFSETOF_MEMBER(JNIEnvExt, local_ref_cookie_),\012 JNIEnvExt::LocalRefCookieOffset(sizeof(void*)).Uint32Value());\012\012  EXPECT_EQ(OFFSETOF_MEMBER(JNIEnvExt, self_), JNIEnvExt::SelfOffset(sizeof(void*)).Uint32Value());\012\012 // segment_state_ is private in the IndirectReferenceTable. So this test isn't as good as we'd\012 // hope it to be.\012 uint32_t segment_state_now =\012      OFFSETOF_MEMBER(JNIEnvExt, locals_) +\012 IndirectReferenceTable::SegmentStateOffset(sizeof(void*)).Uint32Value();\012 uint32_t segment_state_computed = JNIEnvExt::SegmentStateOffset(sizeof(void*)).Uint32Value();\012  EXPECT_EQ(segment_state_now, segment_state_computed);\012})<SUB>2470</SUB>> ]
+"17079" [label = <(&lt;operator&gt;.assignment,gGlobalRefCount = 0)<SUB>2485</SUB>> ]
+"17083" [label = <(&lt;operator&gt;.assignment,* gOriginalEnv = nullptr)<SUB>2486</SUB>> ]
+"17101" [label = <(UNKNOWN,TEST_F(JniInternalTest, JNIEnvExtTableOverride) {\012 JNINativeInterface env_override;\012  memcpy(&amp;env_override, env_-&gt;functions, sizeof(JNINativeInterface));\012\012  gOriginalEnv = env_-&gt;functions;\012  env_override.NewGlobalRef = CountNewGlobalRef;\012  gGlobalRefCount = 0;\012\012  jclass local = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_TRUE(local != nullptr);\012\012 // Set the table, add a global ref, see whether the counter increases.\012 JNIEnvExt::SetTableOverride(&amp;env_override);\012\012  jobject global = env_-&gt;NewGlobalRef(local);\012  EXPECT_EQ(1u, gGlobalRefCount);\012  env_-&gt;DeleteGlobalRef(global);\012\012 // Reset\012 JNIEnvExt::SetTableOverride(nullptr);\012\012  jobject global2 = env_-&gt;NewGlobalRef(local);\012  EXPECT_EQ(1u, gGlobalRefCount);\012  env_-&gt;DeleteGlobalRef(global2);\012},TEST_F(JniInternalTest, JNIEnvExtTableOverride) {\012 JNINativeInterface env_override;\012  memcpy(&amp;env_override, env_-&gt;functions, sizeof(JNINativeInterface));\012\012  gOriginalEnv = env_-&gt;functions;\012  env_override.NewGlobalRef = CountNewGlobalRef;\012  gGlobalRefCount = 0;\012\012  jclass local = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_TRUE(local != nullptr);\012\012 // Set the table, add a global ref, see whether the counter increases.\012 JNIEnvExt::SetTableOverride(&amp;env_override);\012\012  jobject global = env_-&gt;NewGlobalRef(local);\012  EXPECT_EQ(1u, gGlobalRefCount);\012  env_-&gt;DeleteGlobalRef(global);\012\012 // Reset\012 JNIEnvExt::SetTableOverride(nullptr);\012\012  jobject global2 = env_-&gt;NewGlobalRef(local);\012  EXPECT_EQ(1u, gGlobalRefCount);\012  env_-&gt;DeleteGlobalRef(global2);\012})<SUB>2494</SUB>> ]
+"17102" [label = <(UNKNOWN,TEST_F(JniInternalTest, NonAttachedThread) {\012 // This tests leads to warnings and errors in the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012 CheckJniAbortCatcher check_jni_abort_catcher;\012\012 auto callee = [](void* env_ptr) -&gt; void* {\012 JNIEnv* env = reinterpret_cast&lt;JNIEnv*&gt;(env_ptr);\012    env-&gt;NewStringUTF(&quot;test&quot;);\012 return nullptr;\012 };\012\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  vm_-&gt;SetCheckJniEnabled(true);\012 {\012 pthread_t pthread;\012 int pthread_create_result = pthread_create(&amp;pthread,\012 /* pthread_attr */ nullptr,\012                                               callee,\012 reinterpret_cast&lt;void*&gt;(env_));\012    CHECK_EQ(pthread_create_result, 0);\012 int pthread_join_result = pthread_join(pthread, /* thread_return */ nullptr);\012    CHECK_EQ(pthread_join_result, 0);\012 }\012  vm_-&gt;SetCheckJniEnabled(old_check_jni);\012\012  check_jni_abort_catcher.Check(&quot;is making JNI calls without being attached&quot;);\012},TEST_F(JniInternalTest, NonAttachedThread) {\012 // This tests leads to warnings and errors in the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012 CheckJniAbortCatcher check_jni_abort_catcher;\012\012 auto callee = [](void* env_ptr) -&gt; void* {\012 JNIEnv* env = reinterpret_cast&lt;JNIEnv*&gt;(env_ptr);\012    env-&gt;NewStringUTF(&quot;test&quot;);\012 return nullptr;\012 };\012\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  vm_-&gt;SetCheckJniEnabled(true);\012 {\012 pthread_t pthread;\012 int pthread_create_result = pthread_create(&amp;pthread,\012 /* pthread_attr */ nullptr,\012                                               callee,\012 reinterpret_cast&lt;void*&gt;(env_));\012    CHECK_EQ(pthread_create_result, 0);\012 int pthread_join_result = pthread_join(pthread, /* thread_return */ nullptr);\012    CHECK_EQ(pthread_join_result, 0);\012 }\012  vm_-&gt;SetCheckJniEnabled(old_check_jni);\012\012  check_jni_abort_catcher.Check(&quot;is making JNI calls without being attached&quot;);\012})<SUB>2520</SUB>> ]
+"14430" [label = <(METHOD,&lt;global&gt;)<SUB>1</SUB>> ]
+"17103" [label = <(METHOD_RETURN,ANY)<SUB>1</SUB>> ]
+  "16886" -> "16887" 
+  "16887" -> "16888" 
+  "16888" -> "16889" 
+  "16889" -> "16890" 
+  "16890" -> "16891" 
+  "16891" -> "16892" 
+  "16892" -> "16893" 
+  "16893" -> "16894" 
+  "16894" -> "16895" 
+  "16895" -> "16914" 
+  "16914" -> "16915" 
+  "16915" -> "16920" 
+  "16920" -> "16921" 
+  "16921" -> "16922" 
+  "16922" -> "16923" 
+  "16923" -> "16924" 
+  "16924" -> "16925" 
+  "16925" -> "16926" 
+  "16926" -> "16927" 
+  "16927" -> "16928" 
+  "16928" -> "16929" 
+  "16929" -> "16930" 
+  "16930" -> "16931" 
+  "16931" -> "16932" 
+  "16932" -> "16933" 
+  "16933" -> "16934" 
+  "16934" -> "16935" 
+  "16935" -> "16936" 
+  "16936" -> "16937" 
+  "16937" -> "16938" 
+  "16938" -> "16939" 
+  "16939" -> "16940" 
+  "16940" -> "16941" 
+  "16941" -> "16942" 
+  "16942" -> "16943" 
+  "16943" -> "16944" 
+  "16944" -> "16945" 
+  "16945" -> "16946" 
+  "16946" -> "16947" 
+  "16947" -> "16948" 
+  "16948" -> "16949" 
+  "16949" -> "16950" 
+  "16950" -> "16951" 
+  "16951" -> "16952" 
+  "16952" -> "16953" 
+  "16953" -> "16954" 
+  "16954" -> "16955" 
+  "16955" -> "16956" 
+  "16956" -> "16957" 
+  "16957" -> "16958" 
+  "16958" -> "16959" 
+  "16959" -> "16960" 
+  "16960" -> "16961" 
+  "16961" -> "16962" 
+  "16962" -> "16963" 
+  "16963" -> "16964" 
+  "16964" -> "16965" 
+  "16965" -> "16966" 
+  "16966" -> "16967" 
+  "16967" -> "16968" 
+  "16968" -> "16969" 
+  "16969" -> "16970" 
+  "16970" -> "16971" 
+  "16971" -> "16972" 
+  "16972" -> "16973" 
+  "16973" -> "16974" 
+  "16974" -> "16975" 
+  "16975" -> "16976" 
+  "16976" -> "16977" 
+  "16977" -> "16978" 
+  "16978" -> "16979" 
+  "16979" -> "16991" 
+  "16991" -> "17003" 
+  "17003" -> "17075" 
+  "17075" -> "17076" 
+  "17076" -> "17077" 
+  "17077" -> "17079" 
+  "17079" -> "17083" 
+  "17083" -> "17101" 
+  "17101" -> "17102" 
+  "17102" -> "17103" 
+  "14430" -> "16886" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/262-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/262-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/262-cfg.dot	2023-06-07 19:33:45.517394678 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/262-cfg.dot	2023-06-07 19:33:52.097393976 +0330
@@ -1,5 +1,153 @@
-digraph "gJniSleepForeverStub" {  
-"14487" [label = <(METHOD,gJniSleepForeverStub)<SUB>3068</SUB>> ]
-"14489" [label = <(METHOD_RETURN,void)<SUB>3068</SUB>> ]
-  "14487" -> "14489" 
+digraph "SetUp" {  
+"14436" [label = <(CommonCompilerTest::SetUp,CommonCompilerTest::SetUp())<SUB>38</SUB>> ]
+"14440" [label = <(&lt;operator&gt;.assignment,vm_ = Runtime::Current()-&gt;GetJavaVM())<SUB>40</SUB>> ]
+"14449" [label = <(AttachCurrentThread,vm_-&gt;AttachCurrentThread(&amp;env_, nullptr))<SUB>45</SUB>> ]
+"14456" [label = <(&lt;operator&gt;.greaterThan,ScopedLocalRef&lt;jclass&gt; aioobe(env_,\012                                  env_-&gt;FindClass(&quot;java/lang/ArrayIndexOutOfBoundsException&quot;)))<SUB>47</SUB>> ]
+"14467" [label = <(CHECK,CHECK(aioobe.get() != nullptr))<SUB>49</SUB>> ]
+"14474" [label = <(&lt;operator&gt;.assignment,aioobe_ = reinterpret_cast&lt;jclass&gt;(env_-&gt;NewGlobalRef(aioobe.get())))<SUB>50</SUB>> ]
+"14486" [label = <(&lt;operator&gt;.greaterThan,ScopedLocalRef&lt;jclass&gt; ase(env_, env_-&gt;FindClass(&quot;java/lang/ArrayStoreException&quot;)))<SUB>52</SUB>> ]
+"14497" [label = <(CHECK,CHECK(ase.get() != nullptr))<SUB>53</SUB>> ]
+"14504" [label = <(&lt;operator&gt;.assignment,ase_ = reinterpret_cast&lt;jclass&gt;(env_-&gt;NewGlobalRef(ase.get())))<SUB>54</SUB>> ]
+"14516" [label = <(&lt;operator&gt;.greaterThan,ScopedLocalRef&lt;jclass&gt; sioobe(env_,\012                                  env_-&gt;FindClass(&quot;java/lang/StringIndexOutOfBoundsException&quot;)))<SUB>56</SUB>> ]
+"14527" [label = <(CHECK,CHECK(sioobe.get() != nullptr))<SUB>58</SUB>> ]
+"14534" [label = <(&lt;operator&gt;.assignment,sioobe_ = reinterpret_cast&lt;jclass&gt;(env_-&gt;NewGlobalRef(sioobe.get())))<SUB>59</SUB>> ]
+"14437" [label = <(&lt;operator&gt;.fieldAccess,CommonCompilerTest::SetUp)<SUB>38</SUB>> ]
+"14442" [label = <(GetJavaVM,Runtime::Current()-&gt;GetJavaVM())<SUB>40</SUB>> ]
+"14450" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;AttachCurrentThread)<SUB>45</SUB>> ]
+"14453" [label = <(&lt;operator&gt;.addressOf,&amp;env_)<SUB>45</SUB>> ]
+"14457" [label = <(&lt;operator&gt;.lessThan,ScopedLocalRef&lt;jclass)<SUB>47</SUB>> ]
+"14460" [label = <(aioobe,aioobe(env_,\012                                  env_-&gt;FindClass(&quot;java/lang/ArrayIndexOutOfBoundsException&quot;)))<SUB>47</SUB>> ]
+"14468" [label = <(&lt;operator&gt;.notEquals,aioobe.get() != nullptr)<SUB>49</SUB>> ]
+"14476" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jclass&gt;(env_-&gt;NewGlobalRef(aioobe.get())))<SUB>50</SUB>> ]
+"14487" [label = <(&lt;operator&gt;.lessThan,ScopedLocalRef&lt;jclass)<SUB>52</SUB>> ]
+"14490" [label = <(ase,ase(env_, env_-&gt;FindClass(&quot;java/lang/ArrayStoreException&quot;)))<SUB>52</SUB>> ]
+"14498" [label = <(&lt;operator&gt;.notEquals,ase.get() != nullptr)<SUB>53</SUB>> ]
+"14506" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jclass&gt;(env_-&gt;NewGlobalRef(ase.get())))<SUB>54</SUB>> ]
+"14517" [label = <(&lt;operator&gt;.lessThan,ScopedLocalRef&lt;jclass)<SUB>56</SUB>> ]
+"14520" [label = <(sioobe,sioobe(env_,\012                                  env_-&gt;FindClass(&quot;java/lang/StringIndexOutOfBoundsException&quot;)))<SUB>56</SUB>> ]
+"14528" [label = <(&lt;operator&gt;.notEquals,sioobe.get() != nullptr)<SUB>58</SUB>> ]
+"14536" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jclass&gt;(env_-&gt;NewGlobalRef(sioobe.get())))<SUB>59</SUB>> ]
+"14439" [label = <(FIELD_IDENTIFIER,SetUp,SetUp)<SUB>38</SUB>> ]
+"14443" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetJavaVM)<SUB>40</SUB>> ]
+"14452" [label = <(FIELD_IDENTIFIER,AttachCurrentThread,AttachCurrentThread)<SUB>45</SUB>> ]
+"14462" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/ArrayIndexOutOfBoundsException&quot;))<SUB>48</SUB>> ]
+"14469" [label = <(get,aioobe.get())<SUB>49</SUB>> ]
+"14477" [label = <(UNKNOWN,jclass,jclass)<SUB>50</SUB>> ]
+"14478" [label = <(NewGlobalRef,env_-&gt;NewGlobalRef(aioobe.get()))<SUB>50</SUB>> ]
+"14492" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/ArrayStoreException&quot;))<SUB>52</SUB>> ]
+"14499" [label = <(get,ase.get())<SUB>53</SUB>> ]
+"14507" [label = <(UNKNOWN,jclass,jclass)<SUB>54</SUB>> ]
+"14508" [label = <(NewGlobalRef,env_-&gt;NewGlobalRef(ase.get()))<SUB>54</SUB>> ]
+"14522" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/StringIndexOutOfBoundsException&quot;))<SUB>57</SUB>> ]
+"14529" [label = <(get,sioobe.get())<SUB>58</SUB>> ]
+"14537" [label = <(UNKNOWN,jclass,jclass)<SUB>59</SUB>> ]
+"14538" [label = <(NewGlobalRef,env_-&gt;NewGlobalRef(sioobe.get()))<SUB>59</SUB>> ]
+"14444" [label = <(Runtime::Current,Runtime::Current())<SUB>40</SUB>> ]
+"14448" [label = <(FIELD_IDENTIFIER,GetJavaVM,GetJavaVM)<SUB>40</SUB>> ]
+"14463" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>48</SUB>> ]
+"14470" [label = <(&lt;operator&gt;.fieldAccess,aioobe.get)<SUB>49</SUB>> ]
+"14479" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewGlobalRef)<SUB>50</SUB>> ]
+"14482" [label = <(get,aioobe.get())<SUB>50</SUB>> ]
+"14493" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>52</SUB>> ]
+"14500" [label = <(&lt;operator&gt;.fieldAccess,ase.get)<SUB>53</SUB>> ]
+"14509" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewGlobalRef)<SUB>54</SUB>> ]
+"14512" [label = <(get,ase.get())<SUB>54</SUB>> ]
+"14523" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>57</SUB>> ]
+"14530" [label = <(&lt;operator&gt;.fieldAccess,sioobe.get)<SUB>58</SUB>> ]
+"14539" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewGlobalRef)<SUB>59</SUB>> ]
+"14542" [label = <(get,sioobe.get())<SUB>59</SUB>> ]
+"14445" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>40</SUB>> ]
+"14465" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>48</SUB>> ]
+"14472" [label = <(FIELD_IDENTIFIER,get,get)<SUB>49</SUB>> ]
+"14481" [label = <(FIELD_IDENTIFIER,NewGlobalRef,NewGlobalRef)<SUB>50</SUB>> ]
+"14483" [label = <(&lt;operator&gt;.fieldAccess,aioobe.get)<SUB>50</SUB>> ]
+"14495" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>52</SUB>> ]
+"14502" [label = <(FIELD_IDENTIFIER,get,get)<SUB>53</SUB>> ]
+"14511" [label = <(FIELD_IDENTIFIER,NewGlobalRef,NewGlobalRef)<SUB>54</SUB>> ]
+"14513" [label = <(&lt;operator&gt;.fieldAccess,ase.get)<SUB>54</SUB>> ]
+"14525" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>57</SUB>> ]
+"14532" [label = <(FIELD_IDENTIFIER,get,get)<SUB>58</SUB>> ]
+"14541" [label = <(FIELD_IDENTIFIER,NewGlobalRef,NewGlobalRef)<SUB>59</SUB>> ]
+"14543" [label = <(&lt;operator&gt;.fieldAccess,sioobe.get)<SUB>59</SUB>> ]
+"14447" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>40</SUB>> ]
+"14485" [label = <(FIELD_IDENTIFIER,get,get)<SUB>50</SUB>> ]
+"14515" [label = <(FIELD_IDENTIFIER,get,get)<SUB>54</SUB>> ]
+"14545" [label = <(FIELD_IDENTIFIER,get,get)<SUB>59</SUB>> ]
+"14434" [label = <(METHOD,SetUp)<SUB>37</SUB>> ]
+"14546" [label = <(METHOD_RETURN,void)<SUB>37</SUB>> ]
+  "14436" -> "14447" 
+  "14440" -> "14452" 
+  "14449" -> "14457" 
+  "14456" -> "14472" 
+  "14467" -> "14477" 
+  "14474" -> "14487" 
+  "14486" -> "14502" 
+  "14497" -> "14507" 
+  "14504" -> "14517" 
+  "14516" -> "14532" 
+  "14527" -> "14537" 
+  "14534" -> "14546" 
+  "14437" -> "14436" 
+  "14442" -> "14440" 
+  "14450" -> "14453" 
+  "14453" -> "14449" 
+  "14457" -> "14465" 
+  "14460" -> "14456" 
+  "14468" -> "14467" 
+  "14476" -> "14474" 
+  "14487" -> "14495" 
+  "14490" -> "14486" 
+  "14498" -> "14497" 
+  "14506" -> "14504" 
+  "14517" -> "14525" 
+  "14520" -> "14516" 
+  "14528" -> "14527" 
+  "14536" -> "14534" 
+  "14439" -> "14437" 
+  "14443" -> "14442" 
+  "14452" -> "14450" 
+  "14462" -> "14460" 
+  "14469" -> "14468" 
+  "14477" -> "14481" 
+  "14478" -> "14476" 
+  "14492" -> "14490" 
+  "14499" -> "14498" 
+  "14507" -> "14511" 
+  "14508" -> "14506" 
+  "14522" -> "14520" 
+  "14529" -> "14528" 
+  "14537" -> "14541" 
+  "14538" -> "14536" 
+  "14444" -> "14448" 
+  "14448" -> "14443" 
+  "14463" -> "14462" 
+  "14470" -> "14469" 
+  "14479" -> "14485" 
+  "14482" -> "14478" 
+  "14493" -> "14492" 
+  "14500" -> "14499" 
+  "14509" -> "14515" 
+  "14512" -> "14508" 
+  "14523" -> "14522" 
+  "14530" -> "14529" 
+  "14539" -> "14545" 
+  "14542" -> "14538" 
+  "14445" -> "14444" 
+  "14465" -> "14463" 
+  "14472" -> "14470" 
+  "14481" -> "14479" 
+  "14483" -> "14482" 
+  "14495" -> "14493" 
+  "14502" -> "14500" 
+  "14511" -> "14509" 
+  "14513" -> "14512" 
+  "14525" -> "14523" 
+  "14532" -> "14530" 
+  "14541" -> "14539" 
+  "14543" -> "14542" 
+  "14447" -> "14445" 
+  "14485" -> "14483" 
+  "14515" -> "14513" 
+  "14545" -> "14543" 
+  "14434" -> "14439" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/263-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/263-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/263-cfg.dot	2023-06-07 19:33:45.517394678 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/263-cfg.dot	2023-06-07 19:33:52.097393976 +0330
@@ -1,13 +1,61 @@
-digraph "GetRuntimeShutdownNativeInterface" {  
-"14729" [label = <(RETURN,return reinterpret_cast&lt;JNINativeInterface*&gt;(&amp;gJniSleepForeverStub);,return reinterpret_cast&lt;JNINativeInterface*&gt;(&amp;gJniSleepForeverStub);)<SUB>3305</SUB>> ]
-"14730" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;JNINativeInterface*&gt;(&amp;gJniSleepForeverStub))<SUB>3305</SUB>> ]
-"14731" [label = <(UNKNOWN,JNINativeInterface*,JNINativeInterface*)<SUB>3305</SUB>> ]
-"14732" [label = <(&lt;operator&gt;.addressOf,&amp;gJniSleepForeverStub)<SUB>3305</SUB>> ]
-"14727" [label = <(METHOD,GetRuntimeShutdownNativeInterface)<SUB>3304</SUB>> ]
-"14734" [label = <(METHOD_RETURN,JNINativeInterface)<SUB>3304</SUB>> ]
-  "14729" -> "14734" 
-  "14730" -> "14729" 
-  "14731" -> "14732" 
-  "14732" -> "14730" 
-  "14727" -> "14731" 
+digraph "ExpectException" {  
+"14552" [label = <(soa,soa(env_))<SUB>63</SUB>> ]
+"14554" [label = <(&lt;operator&gt;.shiftLeft,EXPECT_TRUE(env_-&gt;ExceptionCheck())\012 &lt;&lt; mirror::Class::PrettyDescriptor(soa.Decode&lt;mirror::Class&gt;(exception_class)))<SUB>64</SUB>> ]
+"14576" [label = <(&lt;operator&gt;.assignment,exception = env_-&gt;ExceptionOccurred())<SUB>66</SUB>> ]
+"14582" [label = <(EXPECT_NE,EXPECT_NE(nullptr, exception))<SUB>67</SUB>> ]
+"14585" [label = <(ExceptionClear,env_-&gt;ExceptionClear())<SUB>68</SUB>> ]
+"14589" [label = <(EXPECT_TRUE,EXPECT_TRUE(env_-&gt;IsInstanceOf(exception, exception_class)))<SUB>69</SUB>> ]
+"14555" [label = <(EXPECT_TRUE,EXPECT_TRUE(env_-&gt;ExceptionCheck()))<SUB>64</SUB>> ]
+"14560" [label = <(mirror::Class::PrettyDescriptor,mirror::Class::PrettyDescriptor(soa.Decode&lt;mirror::Class&gt;(exception_class)))<SUB>65</SUB>> ]
+"14578" [label = <(ExceptionOccurred,env_-&gt;ExceptionOccurred())<SUB>66</SUB>> ]
+"14586" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ExceptionClear)<SUB>68</SUB>> ]
+"14590" [label = <(IsInstanceOf,env_-&gt;IsInstanceOf(exception, exception_class))<SUB>69</SUB>> ]
+"14556" [label = <(ExceptionCheck,env_-&gt;ExceptionCheck())<SUB>64</SUB>> ]
+"14561" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class::PrettyDescriptor)<SUB>65</SUB>> ]
+"14566" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(exception_class))<SUB>65</SUB>> ]
+"14579" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ExceptionOccurred)<SUB>66</SUB>> ]
+"14588" [label = <(FIELD_IDENTIFIER,ExceptionClear,ExceptionClear)<SUB>68</SUB>> ]
+"14591" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;IsInstanceOf)<SUB>69</SUB>> ]
+"14557" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ExceptionCheck)<SUB>64</SUB>> ]
+"14562" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>65</SUB>> ]
+"14565" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>65</SUB>> ]
+"14567" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>65</SUB>> ]
+"14581" [label = <(FIELD_IDENTIFIER,ExceptionOccurred,ExceptionOccurred)<SUB>66</SUB>> ]
+"14593" [label = <(FIELD_IDENTIFIER,IsInstanceOf,IsInstanceOf)<SUB>69</SUB>> ]
+"14559" [label = <(FIELD_IDENTIFIER,ExceptionCheck,ExceptionCheck)<SUB>64</SUB>> ]
+"14568" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>65</SUB>> ]
+"14571" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>65</SUB>> ]
+"14570" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>65</SUB>> ]
+"14573" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>65</SUB>> ]
+"14548" [label = <(METHOD,ExpectException)<SUB>62</SUB>> ]
+"14596" [label = <(METHOD_RETURN,void)<SUB>62</SUB>> ]
+  "14552" -> "14559" 
+  "14554" -> "14581" 
+  "14576" -> "14582" 
+  "14582" -> "14588" 
+  "14585" -> "14593" 
+  "14589" -> "14596" 
+  "14555" -> "14562" 
+  "14560" -> "14554" 
+  "14578" -> "14576" 
+  "14586" -> "14585" 
+  "14590" -> "14589" 
+  "14556" -> "14555" 
+  "14561" -> "14570" 
+  "14566" -> "14560" 
+  "14579" -> "14578" 
+  "14588" -> "14586" 
+  "14591" -> "14590" 
+  "14557" -> "14556" 
+  "14562" -> "14565" 
+  "14565" -> "14561" 
+  "14567" -> "14566" 
+  "14581" -> "14579" 
+  "14593" -> "14591" 
+  "14559" -> "14557" 
+  "14568" -> "14573" 
+  "14571" -> "14567" 
+  "14570" -> "14568" 
+  "14573" -> "14571" 
+  "14548" -> "14552" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/264-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/264-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/264-cfg.dot	2023-06-07 19:33:45.517394678 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/264-cfg.dot	2023-06-07 19:33:52.097393976 +0330
@@ -1,39 +1,38 @@
-digraph "operator &lt;&lt;" {  
-"14746" [label = <(&lt;operator&gt;.shiftLeft,os &lt;&lt; &quot;JNIInvalidRefType&quot;)<SUB>3313</SUB>> ]
-"14749" [label = <(RETURN,return os;,return os;)<SUB>3314</SUB>> ]
-"14753" [label = <(&lt;operator&gt;.shiftLeft,os &lt;&lt; &quot;JNILocalRefType&quot;)<SUB>3316</SUB>> ]
-"14756" [label = <(RETURN,return os;,return os;)<SUB>3317</SUB>> ]
-"14760" [label = <(&lt;operator&gt;.shiftLeft,os &lt;&lt; &quot;JNIGlobalRefType&quot;)<SUB>3319</SUB>> ]
-"14763" [label = <(RETURN,return os;,return os;)<SUB>3320</SUB>> ]
-"14767" [label = <(&lt;operator&gt;.shiftLeft,os &lt;&lt; &quot;JNIWeakGlobalRefType&quot;)<SUB>3322</SUB>> ]
-"14770" [label = <(RETURN,return os;,return os;)<SUB>3323</SUB>> ]
-"14773" [label = <(&lt;operator&gt;.shiftLeft,LOG(FATAL) &lt;&lt; &quot;jobjectRefType[&quot; &lt;&lt; static_cast&lt;int&gt;(rhs) &lt;&lt; &quot;]&quot;)<SUB>3325</SUB>> ]
-"14783" [label = <(UNREACHABLE,UNREACHABLE())<SUB>3326</SUB>> ]
-"14774" [label = <(&lt;operator&gt;.shiftLeft,LOG(FATAL) &lt;&lt; &quot;jobjectRefType[&quot; &lt;&lt; static_cast&lt;int&gt;(rhs))<SUB>3325</SUB>> ]
-"14775" [label = <(&lt;operator&gt;.shiftLeft,LOG(FATAL) &lt;&lt; &quot;jobjectRefType[&quot;)<SUB>3325</SUB>> ]
-"14779" [label = <(&lt;operator&gt;.cast,static_cast&lt;int&gt;(rhs))<SUB>3325</SUB>> ]
-"14776" [label = <(LOG,LOG(FATAL))<SUB>3325</SUB>> ]
-"14780" [label = <(UNKNOWN,int,int)<SUB>3325</SUB>> ]
-"14737" [label = <(METHOD,operator &lt;&lt;)<SUB>3310</SUB>> ]
-"14784" [label = <(METHOD_RETURN,ostream)<SUB>3310</SUB>> ]
-  "14746" -> "14749" 
-  "14749" -> "14784" 
-  "14753" -> "14756" 
-  "14756" -> "14784" 
-  "14760" -> "14763" 
-  "14763" -> "14784" 
-  "14767" -> "14770" 
-  "14770" -> "14784" 
-  "14773" -> "14783" 
-  "14783" -> "14784" 
-  "14774" -> "14773" 
-  "14775" -> "14780" 
-  "14779" -> "14774" 
-  "14776" -> "14775" 
-  "14780" -> "14779" 
-  "14737" -> "14746" 
-  "14737" -> "14753" 
-  "14737" -> "14760" 
-  "14737" -> "14767" 
-  "14737" -> "14776" 
+digraph "CleanUpJniEnv" {  
+"14601" [label = <(&lt;operator&gt;.notEquals,aioobe_ != nullptr)<SUB>73</SUB>> ]
+"14614" [label = <(&lt;operator&gt;.notEquals,ase_ != nullptr)<SUB>77</SUB>> ]
+"14627" [label = <(&lt;operator&gt;.notEquals,sioobe_ != nullptr)<SUB>81</SUB>> ]
+"14605" [label = <(DeleteGlobalRef,env_-&gt;DeleteGlobalRef(aioobe_))<SUB>74</SUB>> ]
+"14610" [label = <(&lt;operator&gt;.assignment,aioobe_ = nullptr)<SUB>75</SUB>> ]
+"14618" [label = <(DeleteGlobalRef,env_-&gt;DeleteGlobalRef(ase_))<SUB>78</SUB>> ]
+"14623" [label = <(&lt;operator&gt;.assignment,ase_ = nullptr)<SUB>79</SUB>> ]
+"14631" [label = <(DeleteGlobalRef,env_-&gt;DeleteGlobalRef(sioobe_))<SUB>82</SUB>> ]
+"14636" [label = <(&lt;operator&gt;.assignment,sioobe_ = nullptr)<SUB>83</SUB>> ]
+"14606" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;DeleteGlobalRef)<SUB>74</SUB>> ]
+"14619" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;DeleteGlobalRef)<SUB>78</SUB>> ]
+"14632" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;DeleteGlobalRef)<SUB>82</SUB>> ]
+"14608" [label = <(FIELD_IDENTIFIER,DeleteGlobalRef,DeleteGlobalRef)<SUB>74</SUB>> ]
+"14621" [label = <(FIELD_IDENTIFIER,DeleteGlobalRef,DeleteGlobalRef)<SUB>78</SUB>> ]
+"14634" [label = <(FIELD_IDENTIFIER,DeleteGlobalRef,DeleteGlobalRef)<SUB>82</SUB>> ]
+"14598" [label = <(METHOD,CleanUpJniEnv)<SUB>72</SUB>> ]
+"14639" [label = <(METHOD_RETURN,void)<SUB>72</SUB>> ]
+  "14601" -> "14608" 
+  "14601" -> "14614" 
+  "14614" -> "14621" 
+  "14614" -> "14627" 
+  "14627" -> "14639" 
+  "14627" -> "14634" 
+  "14605" -> "14610" 
+  "14610" -> "14614" 
+  "14618" -> "14623" 
+  "14623" -> "14627" 
+  "14631" -> "14636" 
+  "14636" -> "14639" 
+  "14606" -> "14605" 
+  "14619" -> "14618" 
+  "14632" -> "14631" 
+  "14608" -> "14606" 
+  "14621" -> "14619" 
+  "14634" -> "14632" 
+  "14598" -> "14601" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/265-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/265-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/265-cfg.dot	2023-06-07 19:33:45.527394676 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/265-cfg.dot	2023-06-07 19:33:52.097393976 +0330
@@ -1,169 +1,5 @@
-digraph "&lt;global&gt;" {  
-"17245" [label = <(UNKNOWN,TEST_F(JniInternalTest, AllocObject) {\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012  jobject o = env_-&gt;AllocObject(c);\012  ASSERT_NE(o, nullptr);\012\012 // We have an instance of the class we asked for...\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(o, c));\012 // ...whose fields haven't been initialized because\012 // we didn't call a constructor.\012 // Even with string compression empty string has `count == 0`.\012  ASSERT_EQ(0, env_-&gt;GetIntField(o, env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;)));\012},TEST_F(JniInternalTest, AllocObject) {\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012  jobject o = env_-&gt;AllocObject(c);\012  ASSERT_NE(o, nullptr);\012\012 // We have an instance of the class we asked for...\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(o, c));\012 // ...whose fields haven't been initialized because\012 // we didn't call a constructor.\012 // Even with string compression empty string has `count == 0`.\012  ASSERT_EQ(0, env_-&gt;GetIntField(o, env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;)));\012})<SUB>677</SUB>> ]
-"17246" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetVersion) {\012  ASSERT_EQ(JNI_VERSION_1_6, env_-&gt;GetVersion());\012},TEST_F(JniInternalTest, GetVersion) {\012  ASSERT_EQ(JNI_VERSION_1_6, env_-&gt;GetVersion());\012})<SUB>691</SUB>> ]
-"17247" [label = <(UNKNOWN,TEST_F(JniInternalTest, FindClass) {\012 // This tests leads to warnings in the log.\012 ScopedLogSeverity sls(LogSeverity::ERROR);\012\012 FindClassTest(false);\012 FindClassTest(true);\012},TEST_F(JniInternalTest, FindClass) {\012 // This tests leads to warnings in the log.\012 ScopedLogSeverity sls(LogSeverity::ERROR);\012\012 FindClassTest(false);\012 FindClassTest(true);\012})<SUB>695</SUB>> ]
-"17248" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetFieldID) {\012  jclass jlnsfe = env_-&gt;FindClass(&quot;java/lang/NoSuchFieldError&quot;);\012  ASSERT_NE(jlnsfe, nullptr);\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012\012 // Wrong type.\012  jfieldID fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;J&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Wrong type where type doesn't exist.\012  fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;Lrod/jane/freddy;&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Wrong name.\012  fid = env_-&gt;GetFieldID(c, &quot;Count&quot;, &quot;I&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Good declared field lookup.\012  fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;);\012  EXPECT_NE(nullptr, fid);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Good superclass field lookup.\012  c = env_-&gt;FindClass(&quot;java/lang/StringBuilder&quot;);\012  fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;);\012  EXPECT_NE(nullptr, fid);\012  EXPECT_NE(fid, nullptr);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Not instance.\012  fid = env_-&gt;GetFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;Ljava/util/Comparator;&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Bad arguments.\012 GetFieldIdBadArgumentTest(false);\012 GetFieldIdBadArgumentTest(true);\012},TEST_F(JniInternalTest, GetFieldID) {\012  jclass jlnsfe = env_-&gt;FindClass(&quot;java/lang/NoSuchFieldError&quot;);\012  ASSERT_NE(jlnsfe, nullptr);\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012\012 // Wrong type.\012  jfieldID fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;J&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Wrong type where type doesn't exist.\012  fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;Lrod/jane/freddy;&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Wrong name.\012  fid = env_-&gt;GetFieldID(c, &quot;Count&quot;, &quot;I&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Good declared field lookup.\012  fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;);\012  EXPECT_NE(nullptr, fid);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Good superclass field lookup.\012  c = env_-&gt;FindClass(&quot;java/lang/StringBuilder&quot;);\012  fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;);\012  EXPECT_NE(nullptr, fid);\012  EXPECT_NE(fid, nullptr);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Not instance.\012  fid = env_-&gt;GetFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;Ljava/util/Comparator;&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Bad arguments.\012 GetFieldIdBadArgumentTest(false);\012 GetFieldIdBadArgumentTest(true);\012})<SUB>703</SUB>> ]
-"17249" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetStaticFieldID) {\012  jclass jlnsfe = env_-&gt;FindClass(&quot;java/lang/NoSuchFieldError&quot;);\012  ASSERT_NE(jlnsfe, nullptr);\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012\012 // Wrong type.\012  jfieldID fid = env_-&gt;GetStaticFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;J&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Wrong type where type doesn't exist.\012  fid = env_-&gt;GetStaticFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;Lrod/jane/freddy;&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Wrong name.\012  fid = env_-&gt;GetStaticFieldID(c, &quot;cASE_INSENSITIVE_ORDER&quot;, &quot;Ljava/util/Comparator;&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Good declared field lookup.\012  fid = env_-&gt;GetStaticFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;Ljava/util/Comparator;&quot;);\012  EXPECT_NE(nullptr, fid);\012  EXPECT_NE(fid, nullptr);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Not static.\012  fid = env_-&gt;GetStaticFieldID(c, &quot;count&quot;, &quot;I&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Bad arguments.\012 GetStaticFieldIdBadArgumentTest(false);\012 GetStaticFieldIdBadArgumentTest(true);\012},TEST_F(JniInternalTest, GetStaticFieldID) {\012  jclass jlnsfe = env_-&gt;FindClass(&quot;java/lang/NoSuchFieldError&quot;);\012  ASSERT_NE(jlnsfe, nullptr);\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012\012 // Wrong type.\012  jfieldID fid = env_-&gt;GetStaticFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;J&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Wrong type where type doesn't exist.\012  fid = env_-&gt;GetStaticFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;Lrod/jane/freddy;&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Wrong name.\012  fid = env_-&gt;GetStaticFieldID(c, &quot;cASE_INSENSITIVE_ORDER&quot;, &quot;Ljava/util/Comparator;&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Good declared field lookup.\012  fid = env_-&gt;GetStaticFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;Ljava/util/Comparator;&quot;);\012  EXPECT_NE(nullptr, fid);\012  EXPECT_NE(fid, nullptr);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Not static.\012  fid = env_-&gt;GetStaticFieldID(c, &quot;count&quot;, &quot;I&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Bad arguments.\012 GetStaticFieldIdBadArgumentTest(false);\012 GetStaticFieldIdBadArgumentTest(true);\012})<SUB>746</SUB>> ]
-"17250" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetMethodID) {\012  jclass jlobject = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  jclass jlstring = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  jclass jlnsme = env_-&gt;FindClass(&quot;java/lang/NoSuchMethodError&quot;);\012  jclass jncrbc = env_-&gt;FindClass(&quot;java/nio/channels/ReadableByteChannel&quot;);\012\012 // Sanity check that no exceptions are pending.\012  ASSERT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Check that java.lang.Object.foo() doesn't exist and NoSuchMethodError is\012 // a pending exception.\012  jmethodID method = env_-&gt;GetMethodID(jlobject, &quot;foo&quot;, &quot;()V&quot;);\012  EXPECT_EQ(nullptr, method);\012 ExpectException(jlnsme);\012\012 // Check that java.lang.Object.equals() does exist.\012  method = env_-&gt;GetMethodID(jlobject, &quot;equals&quot;, &quot;(Ljava/lang/Object;)Z&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Check that GetMethodID for java.lang.String.valueOf(int) fails as the\012 // method is static.\012  method = env_-&gt;GetMethodID(jlstring, &quot;valueOf&quot;, &quot;(I)Ljava/lang/String;&quot;);\012  EXPECT_EQ(nullptr, method);\012 ExpectException(jlnsme);\012\012 // Check that GetMethodID for java.lang.NoSuchMethodError.&lt;init&gt;(String) finds the constructor.\012  method = env_-&gt;GetMethodID(jlnsme, &quot;&lt;init&gt;&quot;, &quot;(Ljava/lang/String;)V&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Check that GetMethodID can find a interface method inherited from another interface.\012  method = env_-&gt;GetMethodID(jncrbc, &quot;close&quot;, &quot;()V&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Bad arguments.\012 GetMethodIdBadArgumentTest(false);\012 GetMethodIdBadArgumentTest(true);\012},TEST_F(JniInternalTest, GetMethodID) {\012  jclass jlobject = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  jclass jlstring = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  jclass jlnsme = env_-&gt;FindClass(&quot;java/lang/NoSuchMethodError&quot;);\012  jclass jncrbc = env_-&gt;FindClass(&quot;java/nio/channels/ReadableByteChannel&quot;);\012\012 // Sanity check that no exceptions are pending.\012  ASSERT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Check that java.lang.Object.foo() doesn't exist and NoSuchMethodError is\012 // a pending exception.\012  jmethodID method = env_-&gt;GetMethodID(jlobject, &quot;foo&quot;, &quot;()V&quot;);\012  EXPECT_EQ(nullptr, method);\012 ExpectException(jlnsme);\012\012 // Check that java.lang.Object.equals() does exist.\012  method = env_-&gt;GetMethodID(jlobject, &quot;equals&quot;, &quot;(Ljava/lang/Object;)Z&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Check that GetMethodID for java.lang.String.valueOf(int) fails as the\012 // method is static.\012  method = env_-&gt;GetMethodID(jlstring, &quot;valueOf&quot;, &quot;(I)Ljava/lang/String;&quot;);\012  EXPECT_EQ(nullptr, method);\012 ExpectException(jlnsme);\012\012 // Check that GetMethodID for java.lang.NoSuchMethodError.&lt;init&gt;(String) finds the constructor.\012  method = env_-&gt;GetMethodID(jlnsme, &quot;&lt;init&gt;&quot;, &quot;(Ljava/lang/String;)V&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Check that GetMethodID can find a interface method inherited from another interface.\012  method = env_-&gt;GetMethodID(jncrbc, &quot;close&quot;, &quot;()V&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Bad arguments.\012 GetMethodIdBadArgumentTest(false);\012 GetMethodIdBadArgumentTest(true);\012})<SUB>783</SUB>> ]
-"17251" [label = <(UNKNOWN,TEST_F(JniInternalTest, CallVoidMethodNullReceiver) {\012  jclass jlobject = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  jmethodID method;\012\012 // Check that GetMethodID for java.lang.NoSuchMethodError.&lt;init&gt;(String) finds the constructor.\012  method = env_-&gt;GetMethodID(jlobject, &quot;&lt;init&gt;&quot;, &quot;()V&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Null object to CallVoidMethod.\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  env_-&gt;CallVoidMethod(nullptr, method);\012  check_jni_abort_catcher.Check(&quot;null&quot;);\012},TEST_F(JniInternalTest, CallVoidMethodNullReceiver) {\012  jclass jlobject = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  jmethodID method;\012\012 // Check that GetMethodID for java.lang.NoSuchMethodError.&lt;init&gt;(String) finds the constructor.\012  method = env_-&gt;GetMethodID(jlobject, &quot;&lt;init&gt;&quot;, &quot;()V&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Null object to CallVoidMethod.\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  env_-&gt;CallVoidMethod(nullptr, method);\012  check_jni_abort_catcher.Check(&quot;null&quot;);\012})<SUB>824</SUB>> ]
-"17252" [label = <(UNKNOWN,TEST_F(JniInternalTest, CallVarArgMethodBadPrimitive) {\012 // Check that bad primitive values cause check JNI to abort when\012 // passed out-of-range primitive value var args. As var args can't\012 // differentiate type sizes less than an int, and this isn't\012 // corrected by JNI, this helps ensure JNI code is valid.\012#define DoCall(boxed_type, shorty, c_type, bad_value)                   \\012 {                                                                     \\012    jclass prim_class = env_-&gt;FindClass(&quot;java/lang/&quot; #boxed_type);      \\012    jmethodID method = env_-&gt;GetStaticMethodID(prim_class, &quot;valueOf&quot;,   \\012 &quot;(&quot; #shorty &quot;)Ljava/lang/&quot; #boxed_type &quot;;&quot;); \\012    EXPECT_NE(nullptr, method);                                         \\012    EXPECT_FALSE(env_-&gt;ExceptionCheck());                               \\012 CheckJniAbortCatcher check_jni_abort_catcher;                       \\012    env_-&gt;CallStaticObjectMethod(prim_class, method, bad_value);        \\012    check_jni_abort_catcher.Check(&quot;unexpected &quot; #c_type &quot; value: &quot; #bad_value); \\012 }\012\012 DoCall(Boolean, Z, jboolean, 2);\012 DoCall(Byte, B, jbyte, 128);\012 DoCall(Byte, B, jbyte, -129);\012 DoCall(Short, S, jshort, 32768);\012 DoCall(Short, S, jshort, -32769);\012 DoCall(Character, C, jchar, 65536);\012 DoCall(Character, C, jchar, -1);\012#undef DoCall\012},TEST_F(JniInternalTest, CallVarArgMethodBadPrimitive) {\012 // Check that bad primitive values cause check JNI to abort when\012 // passed out-of-range primitive value var args. As var args can't\012 // differentiate type sizes less than an int, and this isn't\012 // corrected by JNI, this helps ensure JNI code is valid.\012#define DoCall(boxed_type, shorty, c_type, bad_value)                   \\012 {                                                                     \\012    jclass prim_class = env_-&gt;FindClass(&quot;java/lang/&quot; #boxed_type);      \\012    jmethodID method = env_-&gt;GetStaticMethodID(prim_class, &quot;valueOf&quot;,   \\012 &quot;(&quot; #shorty &quot;)Ljava/lang/&quot; #boxed_type &quot;;&quot;); \\012    EXPECT_NE(nullptr, method);                                         \\012    EXPECT_FALSE(env_-&gt;ExceptionCheck());                               \\012 CheckJniAbortCatcher check_jni_abort_catcher;                       \\012    env_-&gt;CallStaticObjectMethod(prim_class, method, bad_value);        \\012    check_jni_abort_catcher.Check(&quot;unexpected &quot; #c_type &quot; value: &quot; #bad_value); \\012 }\012\012 DoCall(Boolean, Z, jboolean, 2);\012 DoCall(Byte, B, jbyte, 128);\012 DoCall(Byte, B, jbyte, -129);\012 DoCall(Short, S, jshort, 32768);\012 DoCall(Short, S, jshort, -32769);\012 DoCall(Character, C, jchar, 65536);\012 DoCall(Character, C, jchar, -1);\012#undef DoCall\012})<SUB>839</SUB>> ]
-"17253" [label = <(UNKNOWN,TEST_F(JniInternalTest, CallJValueMethodBadPrimitive) {\012 // Check that bad primitive values, passed as jvalues, cause check\012 // JNI to abort. Unlike with var args, sizes less than an int should\012 // be truncated or sign extended and not cause an abort except for\012 // jbooleans that are passed as bytes.\012#define DoFailCall(boxed_type, shorty, c_type, bad_value)               \\012 {                                                                     \\012    jclass prim_class = env_-&gt;FindClass(&quot;java/lang/&quot; #boxed_type);      \\012    jmethodID method = env_-&gt;GetStaticMethodID(prim_class, &quot;valueOf&quot;,   \\012 &quot;(&quot; #shorty &quot;)Ljava/lang/&quot; #boxed_type &quot;;&quot;); \\012    EXPECT_NE(nullptr, method);                                         \\012    EXPECT_FALSE(env_-&gt;ExceptionCheck());                               \\012 CheckJniAbortCatcher check_jni_abort_catcher;                       \\012    jvalue jval;                                                        \\012    jval.i = bad_value;                                                 \\012    env_-&gt;CallStaticObjectMethodA(prim_class, method, &amp;jval);           \\012    check_jni_abort_catcher.Check(&quot;unexpected &quot; #c_type &quot; value: &quot; #bad_value); \\012 }\012#define DoGoodCall(boxed_type, shorty, c_type, bad_value)               \\012 {                                                                     \\012    jclass prim_class = env_-&gt;FindClass(&quot;java/lang/&quot; #boxed_type);      \\012    jmethodID method = env_-&gt;GetStaticMethodID(prim_class, &quot;valueOf&quot;,   \\012 &quot;(&quot; #shorty &quot;)Ljava/lang/&quot; #boxed_type &quot;;&quot;); \\012    EXPECT_NE(nullptr, method);                                         \\012    EXPECT_FALSE(env_-&gt;ExceptionCheck());                               \\012    jvalue jval;                                                        \\012    jval.i = bad_value;                                                 \\012    env_-&gt;CallStaticObjectMethodA(prim_class, method, &amp;jval);           \\012 }\012\012 DoFailCall(Boolean, Z, jboolean, 2);\012 DoGoodCall(Byte, B, jbyte, 128);\012 DoGoodCall(Byte, B, jbyte, -129);\012 DoGoodCall(Short, S, jshort, 32768);\012 DoGoodCall(Short, S, jshort, -32769);\012 DoGoodCall(Character, C, jchar, 65536);\012 DoGoodCall(Character, C, jchar, -1);\012#undef DoCall\012},TEST_F(JniInternalTest, CallJValueMethodBadPrimitive) {\012 // Check that bad primitive values, passed as jvalues, cause check\012 // JNI to abort. Unlike with var args, sizes less than an int should\012 // be truncated or sign extended and not cause an abort except for\012 // jbooleans that are passed as bytes.\012#define DoFailCall(boxed_type, shorty, c_type, bad_value)               \\012 {                                                                     \\012    jclass prim_class = env_-&gt;FindClass(&quot;java/lang/&quot; #boxed_type);      \\012    jmethodID method = env_-&gt;GetStaticMethodID(prim_class, &quot;valueOf&quot;,   \\012 &quot;(&quot; #shorty &quot;)Ljava/lang/&quot; #boxed_type &quot;;&quot;); \\012    EXPECT_NE(nullptr, method);                                         \\012    EXPECT_FALSE(env_-&gt;ExceptionCheck());                               \\012 CheckJniAbortCatcher check_jni_abort_catcher;                       \\012    jvalue jval;                                                        \\012    jval.i = bad_value;                                                 \\012    env_-&gt;CallStaticObjectMethodA(prim_class, method, &amp;jval);           \\012    check_jni_abort_catcher.Check(&quot;unexpected &quot; #c_type &quot; value: &quot; #bad_value); \\012 }\012#define DoGoodCall(boxed_type, shorty, c_type, bad_value)               \\012 {                                                                     \\012    jclass prim_class = env_-&gt;FindClass(&quot;java/lang/&quot; #boxed_type);      \\012    jmethodID method = env_-&gt;GetStaticMethodID(prim_class, &quot;valueOf&quot;,   \\012 &quot;(&quot; #shorty &quot;)Ljava/lang/&quot; #boxed_type &quot;;&quot;); \\012    EXPECT_NE(nullptr, method);                                         \\012    EXPECT_FALSE(env_-&gt;ExceptionCheck());                               \\012    jvalue jval;                                                        \\012    jval.i = bad_value;                                                 \\012    env_-&gt;CallStaticObjectMethodA(prim_class, method, &amp;jval);           \\012 }\012\012 DoFailCall(Boolean, Z, jboolean, 2);\012 DoGoodCall(Byte, B, jbyte, 128);\012 DoGoodCall(Byte, B, jbyte, -129);\012 DoGoodCall(Short, S, jshort, 32768);\012 DoGoodCall(Short, S, jshort, -32769);\012 DoGoodCall(Character, C, jchar, 65536);\012 DoGoodCall(Character, C, jchar, -1);\012#undef DoCall\012})<SUB>866</SUB>> ]
-"17254" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetStaticMethodID) {\012  jclass jlobject = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  jclass jlnsme = env_-&gt;FindClass(&quot;java/lang/NoSuchMethodError&quot;);\012\012 // Sanity check that no exceptions are pending\012  ASSERT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Check that java.lang.Object.foo() doesn't exist and NoSuchMethodError is\012 // a pending exception\012  jmethodID method = env_-&gt;GetStaticMethodID(jlobject, &quot;foo&quot;, &quot;()V&quot;);\012  EXPECT_EQ(nullptr, method);\012 ExpectException(jlnsme);\012\012 // Check that GetStaticMethodID for java.lang.Object.equals(Object) fails as\012 // the method is not static\012  method = env_-&gt;GetStaticMethodID(jlobject, &quot;equals&quot;, &quot;(Ljava/lang/Object;)Z&quot;);\012  EXPECT_EQ(nullptr, method);\012 ExpectException(jlnsme);\012\012 // Check that java.lang.String.valueOf(int) does exist\012  jclass jlstring = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  method = env_-&gt;GetStaticMethodID(jlstring, &quot;valueOf&quot;, &quot;(I)Ljava/lang/String;&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Bad arguments.\012 GetStaticMethodIdBadArgumentTest(false);\012 GetStaticMethodIdBadArgumentTest(true);\012},TEST_F(JniInternalTest, GetStaticMethodID) {\012  jclass jlobject = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  jclass jlnsme = env_-&gt;FindClass(&quot;java/lang/NoSuchMethodError&quot;);\012\012 // Sanity check that no exceptions are pending\012  ASSERT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Check that java.lang.Object.foo() doesn't exist and NoSuchMethodError is\012 // a pending exception\012  jmethodID method = env_-&gt;GetStaticMethodID(jlobject, &quot;foo&quot;, &quot;()V&quot;);\012  EXPECT_EQ(nullptr, method);\012 ExpectException(jlnsme);\012\012 // Check that GetStaticMethodID for java.lang.Object.equals(Object) fails as\012 // the method is not static\012  method = env_-&gt;GetStaticMethodID(jlobject, &quot;equals&quot;, &quot;(Ljava/lang/Object;)Z&quot;);\012  EXPECT_EQ(nullptr, method);\012 ExpectException(jlnsme);\012\012 // Check that java.lang.String.valueOf(int) does exist\012  jclass jlstring = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  method = env_-&gt;GetStaticMethodID(jlstring, &quot;valueOf&quot;, &quot;(I)Ljava/lang/String;&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Bad arguments.\012 GetStaticMethodIdBadArgumentTest(false);\012 GetStaticMethodIdBadArgumentTest(true);\012})<SUB>906</SUB>> ]
-"17273" [label = <(UNKNOWN,TEST_F(JniInternalTest, FromReflectedField_ToReflectedField) {\012  jclass jlrField = env_-&gt;FindClass(&quot;java/lang/reflect/Field&quot;);\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012  jfieldID fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;);\012  ASSERT_NE(fid, nullptr);\012 // Turn the fid into a java.lang.reflect.Field...\012  jobject field = env_-&gt;ToReflectedField(c, fid, JNI_FALSE);\012 size_t capacity_before = GetLocalsCapacity(env_);\012 for (size_t i = 0; i &lt;= 10; ++i) {\012 // Regression test for b/18396311, ToReflectedField leaking local refs causing a local\012 // reference table overflows with 512 references to ArtField\012    env_-&gt;DeleteLocalRef(env_-&gt;ToReflectedField(c, fid, JNI_FALSE));\012 }\012 size_t capacity_after = GetLocalsCapacity(env_);\012  ASSERT_EQ(capacity_before, capacity_after);\012\012  ASSERT_NE(c, nullptr);\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(field, jlrField));\012 // ...and back again.\012  jfieldID fid2 = env_-&gt;FromReflectedField(field);\012  ASSERT_NE(fid2, nullptr);\012 // Make sure we can actually use it.\012  jstring s = env_-&gt;NewStringUTF(&quot;poop&quot;);\012 if (mirror::kUseStringCompression) {\012    ASSERT_EQ(mirror::String::GetFlaggedCount(4, /* compressible */ true),\012              env_-&gt;GetIntField(s, fid2));\012 // Create incompressible string\012    jstring s_16 = env_-&gt;NewStringUTF(&quot;\u0444\u0444&quot;);\012    ASSERT_EQ(mirror::String::GetFlaggedCount(2, /* compressible */ false),\012              env_-&gt;GetIntField(s_16, fid2));\012 } else {\012    ASSERT_EQ(4, env_-&gt;GetIntField(s, fid2));\012 }\012 // Bad arguments.\012 GetFromReflectedField_ToReflectedFieldBadArgumentTest(false);\012 GetFromReflectedField_ToReflectedFieldBadArgumentTest(true);\012},TEST_F(JniInternalTest, FromReflectedField_ToReflectedField) {\012  jclass jlrField = env_-&gt;FindClass(&quot;java/lang/reflect/Field&quot;);\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012  jfieldID fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;);\012  ASSERT_NE(fid, nullptr);\012 // Turn the fid into a java.lang.reflect.Field...\012  jobject field = env_-&gt;ToReflectedField(c, fid, JNI_FALSE);\012 size_t capacity_before = GetLocalsCapacity(env_);\012 for (size_t i = 0; i &lt;= 10; ++i) {\012 // Regression test for b/18396311, ToReflectedField leaking local refs causing a local\012 // reference table overflows with 512 references to ArtField\012    env_-&gt;DeleteLocalRef(env_-&gt;ToReflectedField(c, fid, JNI_FALSE));\012 }\012 size_t capacity_after = GetLocalsCapacity(env_);\012  ASSERT_EQ(capacity_before, capacity_after);\012\012  ASSERT_NE(c, nullptr);\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(field, jlrField));\012 // ...and back again.\012  jfieldID fid2 = env_-&gt;FromReflectedField(field);\012  ASSERT_NE(fid2, nullptr);\012 // Make sure we can actually use it.\012  jstring s = env_-&gt;NewStringUTF(&quot;poop&quot;);\012 if (mirror::kUseStringCompression) {\012    ASSERT_EQ(mirror::String::GetFlaggedCount(4, /* compressible */ true),\012              env_-&gt;GetIntField(s, fid2));\012 // Create incompressible string\012    jstring s_16 = env_-&gt;NewStringUTF(&quot;\u0444\u0444&quot;);\012    ASSERT_EQ(mirror::String::GetFlaggedCount(2, /* compressible */ false),\012              env_-&gt;GetIntField(s_16, fid2));\012 } else {\012    ASSERT_EQ(4, env_-&gt;GetIntField(s, fid2));\012 }\012 // Bad arguments.\012 GetFromReflectedField_ToReflectedFieldBadArgumentTest(false);\012 GetFromReflectedField_ToReflectedFieldBadArgumentTest(true);\012})<SUB>941</SUB>> ]
-"17274" [label = <(UNKNOWN,TEST_F(JniInternalTest, FromReflectedMethod_ToReflectedMethod) {\012  jclass jlrMethod = env_-&gt;FindClass(&quot;java/lang/reflect/Method&quot;);\012  ASSERT_NE(jlrMethod, nullptr);\012  jclass jlrConstructor = env_-&gt;FindClass(&quot;java/lang/reflect/Constructor&quot;);\012  ASSERT_NE(jlrConstructor, nullptr);\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012\012  jmethodID mid = env_-&gt;GetMethodID(c, &quot;&lt;init&gt;&quot;, &quot;()V&quot;);\012  ASSERT_NE(mid, nullptr);\012 // Turn the mid into a java.lang.reflect.Constructor...\012  jobject method = env_-&gt;ToReflectedMethod(c, mid, JNI_FALSE);\012 size_t capacity_before = GetLocalsCapacity(env_);\012 for (size_t i = 0; i &lt;= 10; ++i) {\012 // Regression test for b/18396311, ToReflectedMethod leaking local refs causing a local\012 // reference table overflows with 512 references to ArtMethod\012    env_-&gt;DeleteLocalRef(env_-&gt;ToReflectedMethod(c, mid, JNI_FALSE));\012 }\012 size_t capacity_after = GetLocalsCapacity(env_);\012  ASSERT_EQ(capacity_before, capacity_after);\012  ASSERT_NE(method, nullptr);\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(method, jlrConstructor));\012 // ...and back again.\012  jmethodID mid2 = env_-&gt;FromReflectedMethod(method);\012  ASSERT_NE(mid2, nullptr);\012 // Make sure we can actually use it.\012  jstring s = reinterpret_cast&lt;jstring&gt;(env_-&gt;AllocObject(c));\012  ASSERT_NE(s, nullptr);\012  env_-&gt;CallVoidMethod(s, mid2);\012  ASSERT_EQ(JNI_FALSE, env_-&gt;ExceptionCheck());\012  env_-&gt;ExceptionClear();\012\012  mid = env_-&gt;GetMethodID(c, &quot;length&quot;, &quot;()I&quot;);\012  ASSERT_NE(mid, nullptr);\012 // Turn the mid into a java.lang.reflect.Method...\012  method = env_-&gt;ToReflectedMethod(c, mid, JNI_FALSE);\012  ASSERT_NE(method, nullptr);\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(method, jlrMethod));\012 // ...and back again.\012  mid2 = env_-&gt;FromReflectedMethod(method);\012  ASSERT_NE(mid2, nullptr);\012 // Make sure we can actually use it.\012  s = env_-&gt;NewStringUTF(&quot;poop&quot;);\012  ASSERT_NE(s, nullptr);\012  ASSERT_EQ(4, env_-&gt;CallIntMethod(s, mid2));\012\012 // Bad arguments.\012 GetFromReflectedMethod_ToReflectedMethodBadArgumentTest(false);\012 GetFromReflectedMethod_ToReflectedMethodBadArgumentTest(true);\012},TEST_F(JniInternalTest, FromReflectedMethod_ToReflectedMethod) {\012  jclass jlrMethod = env_-&gt;FindClass(&quot;java/lang/reflect/Method&quot;);\012  ASSERT_NE(jlrMethod, nullptr);\012  jclass jlrConstructor = env_-&gt;FindClass(&quot;java/lang/reflect/Constructor&quot;);\012  ASSERT_NE(jlrConstructor, nullptr);\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012\012  jmethodID mid = env_-&gt;GetMethodID(c, &quot;&lt;init&gt;&quot;, &quot;()V&quot;);\012  ASSERT_NE(mid, nullptr);\012 // Turn the mid into a java.lang.reflect.Constructor...\012  jobject method = env_-&gt;ToReflectedMethod(c, mid, JNI_FALSE);\012 size_t capacity_before = GetLocalsCapacity(env_);\012 for (size_t i = 0; i &lt;= 10; ++i) {\012 // Regression test for b/18396311, ToReflectedMethod leaking local refs causing a local\012 // reference table overflows with 512 references to ArtMethod\012    env_-&gt;DeleteLocalRef(env_-&gt;ToReflectedMethod(c, mid, JNI_FALSE));\012 }\012 size_t capacity_after = GetLocalsCapacity(env_);\012  ASSERT_EQ(capacity_before, capacity_after);\012  ASSERT_NE(method, nullptr);\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(method, jlrConstructor));\012 // ...and back again.\012  jmethodID mid2 = env_-&gt;FromReflectedMethod(method);\012  ASSERT_NE(mid2, nullptr);\012 // Make sure we can actually use it.\012  jstring s = reinterpret_cast&lt;jstring&gt;(env_-&gt;AllocObject(c));\012  ASSERT_NE(s, nullptr);\012  env_-&gt;CallVoidMethod(s, mid2);\012  ASSERT_EQ(JNI_FALSE, env_-&gt;ExceptionCheck());\012  env_-&gt;ExceptionClear();\012\012  mid = env_-&gt;GetMethodID(c, &quot;length&quot;, &quot;()I&quot;);\012  ASSERT_NE(mid, nullptr);\012 // Turn the mid into a java.lang.reflect.Method...\012  method = env_-&gt;ToReflectedMethod(c, mid, JNI_FALSE);\012  ASSERT_NE(method, nullptr);\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(method, jlrMethod));\012 // ...and back again.\012  mid2 = env_-&gt;FromReflectedMethod(method);\012  ASSERT_NE(mid2, nullptr);\012 // Make sure we can actually use it.\012  s = env_-&gt;NewStringUTF(&quot;poop&quot;);\012  ASSERT_NE(s, nullptr);\012  ASSERT_EQ(4, env_-&gt;CallIntMethod(s, mid2));\012\012 // Bad arguments.\012 GetFromReflectedMethod_ToReflectedMethodBadArgumentTest(false);\012 GetFromReflectedMethod_ToReflectedMethodBadArgumentTest(true);\012})<SUB>980</SUB>> ]
-"17279" [label = <(UNKNOWN,TEST_F(JniInternalTest, RegisterAndUnregisterNatives) {\012  jclass jlobject = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  jclass jlnsme = env_-&gt;FindClass(&quot;java/lang/NoSuchMethodError&quot;);\012 void* native_function = reinterpret_cast&lt;void*&gt;(BogusMethod);\012\012 // Sanity check that no exceptions are pending.\012  ASSERT_FALSE(env_-&gt;ExceptionCheck());\012\012 // The following can print errors to the log we'd like to ignore.\012 {\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012 // Check that registering method without name causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { nullptr, &quot;()V&quot;, native_function } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012\012 // Check that registering method without signature causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { &quot;notify&quot;, nullptr, native_function } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012\012 // Check that registering method without function causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { &quot;notify&quot;, &quot;()V&quot;, nullptr } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012\012 // Check that registering to a non-existent java.lang.Object.foo() causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { &quot;foo&quot;, &quot;()V&quot;, native_function } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012\012 // Check that registering non-native methods causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { &quot;equals&quot;, &quot;(Ljava/lang/Object;)Z&quot;, native_function } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012 }\012\012 // Check that registering native methods is successful.\012 {\012 JNINativeMethod methods[] = { { &quot;notify&quot;, &quot;()V&quot;, native_function } };\012    EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_OK);\012 }\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012  EXPECT_EQ(env_-&gt;UnregisterNatives(jlobject), JNI_OK);\012\012 // Check that registering no methods isn't a failure.\012 {\012 JNINativeMethod methods[] = { };\012    EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 0), JNI_OK);\012 }\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012  EXPECT_EQ(env_-&gt;UnregisterNatives(jlobject), JNI_OK);\012\012 // Check that registering a -ve number of methods is a failure.\012 CheckJniAbortCatcher check_jni_abort_catcher;\012 for (int i = -10; i &lt; 0; ++i) {\012 JNINativeMethod methods[] = { };\012    EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, i), JNI_ERR);\012    check_jni_abort_catcher.Check(&quot;negative method count: &quot;);\012 }\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Unregistering a class with no natives is a warning.\012  EXPECT_EQ(env_-&gt;UnregisterNatives(jlnsme), JNI_OK);\012\012 RegisterAndUnregisterNativesBadArguments(false, &amp;check_jni_abort_catcher);\012 RegisterAndUnregisterNativesBadArguments(true, &amp;check_jni_abort_catcher);\012},TEST_F(JniInternalTest, RegisterAndUnregisterNatives) {\012  jclass jlobject = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  jclass jlnsme = env_-&gt;FindClass(&quot;java/lang/NoSuchMethodError&quot;);\012 void* native_function = reinterpret_cast&lt;void*&gt;(BogusMethod);\012\012 // Sanity check that no exceptions are pending.\012  ASSERT_FALSE(env_-&gt;ExceptionCheck());\012\012 // The following can print errors to the log we'd like to ignore.\012 {\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012 // Check that registering method without name causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { nullptr, &quot;()V&quot;, native_function } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012\012 // Check that registering method without signature causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { &quot;notify&quot;, nullptr, native_function } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012\012 // Check that registering method without function causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { &quot;notify&quot;, &quot;()V&quot;, nullptr } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012\012 // Check that registering to a non-existent java.lang.Object.foo() causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { &quot;foo&quot;, &quot;()V&quot;, native_function } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012\012 // Check that registering non-native methods causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { &quot;equals&quot;, &quot;(Ljava/lang/Object;)Z&quot;, native_function } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012 }\012\012 // Check that registering native methods is successful.\012 {\012 JNINativeMethod methods[] = { { &quot;notify&quot;, &quot;()V&quot;, native_function } };\012    EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_OK);\012 }\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012  EXPECT_EQ(env_-&gt;UnregisterNatives(jlobject), JNI_OK);\012\012 // Check that registering no methods isn't a failure.\012 {\012 JNINativeMethod methods[] = { };\012    EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 0), JNI_OK);\012 }\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012  EXPECT_EQ(env_-&gt;UnregisterNatives(jlobject), JNI_OK);\012\012 // Check that registering a -ve number of methods is a failure.\012 CheckJniAbortCatcher check_jni_abort_catcher;\012 for (int i = -10; i &lt; 0; ++i) {\012 JNINativeMethod methods[] = { };\012    EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, i), JNI_ERR);\012    check_jni_abort_catcher.Check(&quot;negative method count: &quot;);\012 }\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Unregistering a class with no natives is a warning.\012  EXPECT_EQ(env_-&gt;UnregisterNatives(jlnsme), JNI_OK);\012\012 RegisterAndUnregisterNativesBadArguments(false, &amp;check_jni_abort_catcher);\012 RegisterAndUnregisterNativesBadArguments(true, &amp;check_jni_abort_catcher);\012})<SUB>1035</SUB>> ]
-"17280" [label = <(UNKNOWN,TEST_F(JniInternalTest, BooleanArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewBooleanArray, GetBooleanArrayRegion, SetBooleanArrayRegion,\012 GetBooleanArrayElements, ReleaseBooleanArrayElements, jboolean, &quot;[Z&quot;);\012},TEST_F(JniInternalTest, BooleanArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewBooleanArray, GetBooleanArrayRegion, SetBooleanArrayRegion,\012 GetBooleanArrayElements, ReleaseBooleanArrayElements, jboolean, &quot;[Z&quot;);\012})<SUB>1226</SUB>> ]
-"17281" [label = <(UNKNOWN,TEST_F(JniInternalTest, ByteArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewByteArray, GetByteArrayRegion, SetByteArrayRegion,\012 GetByteArrayElements, ReleaseByteArrayElements, jbyte, &quot;[B&quot;);\012},TEST_F(JniInternalTest, ByteArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewByteArray, GetByteArrayRegion, SetByteArrayRegion,\012 GetByteArrayElements, ReleaseByteArrayElements, jbyte, &quot;[B&quot;);\012})<SUB>1230</SUB>> ]
-"17282" [label = <(UNKNOWN,TEST_F(JniInternalTest, CharArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewCharArray, GetCharArrayRegion, SetCharArrayRegion,\012 GetCharArrayElements, ReleaseCharArrayElements, jchar, &quot;[C&quot;);\012},TEST_F(JniInternalTest, CharArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewCharArray, GetCharArrayRegion, SetCharArrayRegion,\012 GetCharArrayElements, ReleaseCharArrayElements, jchar, &quot;[C&quot;);\012})<SUB>1234</SUB>> ]
-"17283" [label = <(UNKNOWN,TEST_F(JniInternalTest, DoubleArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewDoubleArray, GetDoubleArrayRegion, SetDoubleArrayRegion,\012 GetDoubleArrayElements, ReleaseDoubleArrayElements, jdouble, &quot;[D&quot;);\012},TEST_F(JniInternalTest, DoubleArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewDoubleArray, GetDoubleArrayRegion, SetDoubleArrayRegion,\012 GetDoubleArrayElements, ReleaseDoubleArrayElements, jdouble, &quot;[D&quot;);\012})<SUB>1238</SUB>> ]
-"17284" [label = <(UNKNOWN,TEST_F(JniInternalTest, FloatArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewFloatArray, GetFloatArrayRegion, SetFloatArrayRegion,\012 GetFloatArrayElements, ReleaseFloatArrayElements, jfloat, &quot;[F&quot;);\012},TEST_F(JniInternalTest, FloatArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewFloatArray, GetFloatArrayRegion, SetFloatArrayRegion,\012 GetFloatArrayElements, ReleaseFloatArrayElements, jfloat, &quot;[F&quot;);\012})<SUB>1242</SUB>> ]
-"17285" [label = <(UNKNOWN,TEST_F(JniInternalTest, IntArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewIntArray, GetIntArrayRegion, SetIntArrayRegion,\012 GetIntArrayElements, ReleaseIntArrayElements, jint, &quot;[I&quot;);\012},TEST_F(JniInternalTest, IntArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewIntArray, GetIntArrayRegion, SetIntArrayRegion,\012 GetIntArrayElements, ReleaseIntArrayElements, jint, &quot;[I&quot;);\012})<SUB>1246</SUB>> ]
-"17286" [label = <(UNKNOWN,TEST_F(JniInternalTest, LongArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewLongArray, GetLongArrayRegion, SetLongArrayRegion,\012 GetLongArrayElements, ReleaseLongArrayElements, jlong, &quot;[J&quot;);\012},TEST_F(JniInternalTest, LongArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewLongArray, GetLongArrayRegion, SetLongArrayRegion,\012 GetLongArrayElements, ReleaseLongArrayElements, jlong, &quot;[J&quot;);\012})<SUB>1250</SUB>> ]
-"17287" [label = <(UNKNOWN,TEST_F(JniInternalTest, ShortArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewShortArray, GetShortArrayRegion, SetShortArrayRegion,\012 GetShortArrayElements, ReleaseShortArrayElements, jshort, &quot;[S&quot;);\012},TEST_F(JniInternalTest, ShortArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewShortArray, GetShortArrayRegion, SetShortArrayRegion,\012 GetShortArrayElements, ReleaseShortArrayElements, jshort, &quot;[S&quot;);\012})<SUB>1254</SUB>> ]
-"17288" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetPrimitiveArrayElementsOfWrongType) {\012 GetPrimitiveArrayElementsOfWrongType(false);\012 GetPrimitiveArrayElementsOfWrongType(true);\012},TEST_F(JniInternalTest, GetPrimitiveArrayElementsOfWrongType) {\012 GetPrimitiveArrayElementsOfWrongType(false);\012 GetPrimitiveArrayElementsOfWrongType(true);\012})<SUB>1259</SUB>> ]
-"17289" [label = <(UNKNOWN,TEST_F(JniInternalTest, ReleasePrimitiveArrayElementsOfWrongType) {\012 ReleasePrimitiveArrayElementsOfWrongType(false);\012 ReleasePrimitiveArrayElementsOfWrongType(true);\012},TEST_F(JniInternalTest, ReleasePrimitiveArrayElementsOfWrongType) {\012 ReleasePrimitiveArrayElementsOfWrongType(false);\012 ReleasePrimitiveArrayElementsOfWrongType(true);\012})<SUB>1264</SUB>> ]
-"17290" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetReleasePrimitiveArrayCriticalOfWrongType) {\012 GetReleasePrimitiveArrayCriticalOfWrongType(false);\012 GetReleasePrimitiveArrayCriticalOfWrongType(true);\012},TEST_F(JniInternalTest, GetReleasePrimitiveArrayCriticalOfWrongType) {\012 GetReleasePrimitiveArrayCriticalOfWrongType(false);\012 GetReleasePrimitiveArrayCriticalOfWrongType(true);\012})<SUB>1269</SUB>> ]
-"17291" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetPrimitiveArrayRegionElementsOfWrongType) {\012 GetPrimitiveArrayRegionElementsOfWrongType(false);\012 GetPrimitiveArrayRegionElementsOfWrongType(true);\012},TEST_F(JniInternalTest, GetPrimitiveArrayRegionElementsOfWrongType) {\012 GetPrimitiveArrayRegionElementsOfWrongType(false);\012 GetPrimitiveArrayRegionElementsOfWrongType(true);\012})<SUB>1274</SUB>> ]
-"17292" [label = <(UNKNOWN,TEST_F(JniInternalTest, SetPrimitiveArrayRegionElementsOfWrongType) {\012 SetPrimitiveArrayRegionElementsOfWrongType(false);\012 SetPrimitiveArrayRegionElementsOfWrongType(true);\012},TEST_F(JniInternalTest, SetPrimitiveArrayRegionElementsOfWrongType) {\012 SetPrimitiveArrayRegionElementsOfWrongType(false);\012 SetPrimitiveArrayRegionElementsOfWrongType(true);\012})<SUB>1279</SUB>> ]
-"17293" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewObjectArray) {\012  jclass element_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(element_class, nullptr);\012  jclass array_class = env_-&gt;FindClass(&quot;[Ljava/lang/String;&quot;);\012  ASSERT_NE(array_class, nullptr);\012\012  jobjectArray a = env_-&gt;NewObjectArray(0, element_class, nullptr);\012  EXPECT_NE(a, nullptr);\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(a, array_class));\012  EXPECT_EQ(0, env_-&gt;GetArrayLength(a));\012\012  a = env_-&gt;NewObjectArray(1, element_class, nullptr);\012  EXPECT_NE(a, nullptr);\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(a, array_class));\012  EXPECT_EQ(1, env_-&gt;GetArrayLength(a));\012  EXPECT_TRUE(env_-&gt;IsSameObject(env_-&gt;GetObjectArrayElement(a, 0), nullptr));\012\012 // Negative array length checks.\012 NewObjectArrayBadArguments(false);\012 NewObjectArrayBadArguments(true);\012},TEST_F(JniInternalTest, NewObjectArray) {\012  jclass element_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(element_class, nullptr);\012  jclass array_class = env_-&gt;FindClass(&quot;[Ljava/lang/String;&quot;);\012  ASSERT_NE(array_class, nullptr);\012\012  jobjectArray a = env_-&gt;NewObjectArray(0, element_class, nullptr);\012  EXPECT_NE(a, nullptr);\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(a, array_class));\012  EXPECT_EQ(0, env_-&gt;GetArrayLength(a));\012\012  a = env_-&gt;NewObjectArray(1, element_class, nullptr);\012  EXPECT_NE(a, nullptr);\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(a, array_class));\012  EXPECT_EQ(1, env_-&gt;GetArrayLength(a));\012  EXPECT_TRUE(env_-&gt;IsSameObject(env_-&gt;GetObjectArrayElement(a, 0), nullptr));\012\012 // Negative array length checks.\012 NewObjectArrayBadArguments(false);\012 NewObjectArrayBadArguments(true);\012})<SUB>1284</SUB>> ]
-"17294" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewObjectArrayWithPrimitiveClasses) {\012 const char* primitive_descriptors = &quot;VZBSCIJFD&quot;;\012 const char* primitive_names[] = {\012 &quot;void&quot;, &quot;boolean&quot;, &quot;byte&quot;, &quot;short&quot;, &quot;char&quot;, &quot;int&quot;, &quot;long&quot;, &quot;float&quot;, &quot;double&quot;\012 };\012  ASSERT_EQ(strlen(primitive_descriptors), arraysize(primitive_names));\012\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 CheckJniAbortCatcher jni_abort_catcher;\012 for (size_t i = 0; i &lt; strlen(primitive_descriptors); ++i) {\012    env_-&gt;NewObjectArray(0, nullptr, nullptr);\012    jni_abort_catcher.Check(&quot;element_jclass == null&quot;);\012    jclass primitive_class = GetPrimitiveClass(primitive_descriptors[i]);\012    env_-&gt;NewObjectArray(1, primitive_class, nullptr);\012    std::string error_msg(StringPrintf(&quot;not an object type: %s&quot;, primitive_names[i]));\012    jni_abort_catcher.Check(error_msg.c_str());\012 }\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012 for (size_t i = 0; i &lt; strlen(primitive_descriptors); ++i) {\012    env_-&gt;NewObjectArray(0, nullptr, nullptr);\012    jni_abort_catcher.Check(&quot;NewObjectArray received NULL jclass&quot;);\012    jclass primitive_class = GetPrimitiveClass(primitive_descriptors[i]);\012    env_-&gt;NewObjectArray(1, primitive_class, nullptr);\012    std::string error_msg(StringPrintf(&quot;not an object type: %s&quot;, primitive_names[i]));\012    jni_abort_catcher.Check(error_msg.c_str());\012 }\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012},TEST_F(JniInternalTest, NewObjectArrayWithPrimitiveClasses) {\012 const char* primitive_descriptors = &quot;VZBSCIJFD&quot;;\012 const char* primitive_names[] = {\012 &quot;void&quot;, &quot;boolean&quot;, &quot;byte&quot;, &quot;short&quot;, &quot;char&quot;, &quot;int&quot;, &quot;long&quot;, &quot;float&quot;, &quot;double&quot;\012 };\012  ASSERT_EQ(strlen(primitive_descriptors), arraysize(primitive_names));\012\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 CheckJniAbortCatcher jni_abort_catcher;\012 for (size_t i = 0; i &lt; strlen(primitive_descriptors); ++i) {\012    env_-&gt;NewObjectArray(0, nullptr, nullptr);\012    jni_abort_catcher.Check(&quot;element_jclass == null&quot;);\012    jclass primitive_class = GetPrimitiveClass(primitive_descriptors[i]);\012    env_-&gt;NewObjectArray(1, primitive_class, nullptr);\012    std::string error_msg(StringPrintf(&quot;not an object type: %s&quot;, primitive_names[i]));\012    jni_abort_catcher.Check(error_msg.c_str());\012 }\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012 for (size_t i = 0; i &lt; strlen(primitive_descriptors); ++i) {\012    env_-&gt;NewObjectArray(0, nullptr, nullptr);\012    jni_abort_catcher.Check(&quot;NewObjectArray received NULL jclass&quot;);\012    jclass primitive_class = GetPrimitiveClass(primitive_descriptors[i]);\012    env_-&gt;NewObjectArray(1, primitive_class, nullptr);\012    std::string error_msg(StringPrintf(&quot;not an object type: %s&quot;, primitive_names[i]));\012    jni_abort_catcher.Check(error_msg.c_str());\012 }\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012})<SUB>1306</SUB>> ]
-"17295" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewObjectArrayWithInitialValue) {\012  jclass element_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(element_class, nullptr);\012  jclass array_class = env_-&gt;FindClass(&quot;[Ljava/lang/String;&quot;);\012  ASSERT_NE(array_class, nullptr);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;poop&quot;);\012  jobjectArray a = env_-&gt;NewObjectArray(2, element_class, s);\012  EXPECT_NE(a, nullptr);\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(a, array_class));\012  EXPECT_EQ(2, env_-&gt;GetArrayLength(a));\012  EXPECT_TRUE(env_-&gt;IsSameObject(env_-&gt;GetObjectArrayElement(a, 0), s));\012  EXPECT_TRUE(env_-&gt;IsSameObject(env_-&gt;GetObjectArrayElement(a, 1), s));\012\012 // Attempt to incorrect create an array of strings with initial value of string arrays.\012 CheckJniAbortCatcher jni_abort_catcher;\012  env_-&gt;NewObjectArray(2, element_class, a);\012  jni_abort_catcher.Check(&quot;cannot assign object of type 'java.lang.String[]' to array with element &quot;\012 &quot;type of 'java.lang.String'&quot;);\012},TEST_F(JniInternalTest, NewObjectArrayWithInitialValue) {\012  jclass element_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(element_class, nullptr);\012  jclass array_class = env_-&gt;FindClass(&quot;[Ljava/lang/String;&quot;);\012  ASSERT_NE(array_class, nullptr);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;poop&quot;);\012  jobjectArray a = env_-&gt;NewObjectArray(2, element_class, s);\012  EXPECT_NE(a, nullptr);\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(a, array_class));\012  EXPECT_EQ(2, env_-&gt;GetArrayLength(a));\012  EXPECT_TRUE(env_-&gt;IsSameObject(env_-&gt;GetObjectArrayElement(a, 0), s));\012  EXPECT_TRUE(env_-&gt;IsSameObject(env_-&gt;GetObjectArrayElement(a, 1), s));\012\012 // Attempt to incorrect create an array of strings with initial value of string arrays.\012 CheckJniAbortCatcher jni_abort_catcher;\012  env_-&gt;NewObjectArray(2, element_class, a);\012  jni_abort_catcher.Check(&quot;cannot assign object of type 'java.lang.String[]' to array with element &quot;\012 &quot;type of 'java.lang.String'&quot;);\012})<SUB>1335</SUB>> ]
-"17296" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetArrayLength) {\012 // Already tested in NewObjectArray/NewPrimitiveArray except for null.\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(0, env_-&gt;GetArrayLength(nullptr));\012  jni_abort_catcher.Check(&quot;java_array == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(JNI_ERR, env_-&gt;GetArrayLength(nullptr));\012  jni_abort_catcher.Check(&quot;jarray was NULL&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012},TEST_F(JniInternalTest, GetArrayLength) {\012 // Already tested in NewObjectArray/NewPrimitiveArray except for null.\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(0, env_-&gt;GetArrayLength(nullptr));\012  jni_abort_catcher.Check(&quot;java_array == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(JNI_ERR, env_-&gt;GetArrayLength(nullptr));\012  jni_abort_catcher.Check(&quot;jarray was NULL&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012})<SUB>1356</SUB>> ]
-"17297" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetObjectClass) {\012  jclass string_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(string_class, nullptr);\012  jclass class_class = env_-&gt;FindClass(&quot;java/lang/Class&quot;);\012  ASSERT_NE(class_class, nullptr);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;poop&quot;);\012  jclass c = env_-&gt;GetObjectClass(s);\012  ASSERT_TRUE(env_-&gt;IsSameObject(string_class, c));\012\012  jclass c2 = env_-&gt;GetObjectClass(c);\012  ASSERT_TRUE(env_-&gt;IsSameObject(class_class, env_-&gt;GetObjectClass(c2)));\012\012 // Null as object should fail.\012 CheckJniAbortCatcher jni_abort_catcher;\012  EXPECT_EQ(env_-&gt;GetObjectClass(nullptr), nullptr);\012  jni_abort_catcher.Check(&quot;java_object == null&quot;);\012},TEST_F(JniInternalTest, GetObjectClass) {\012  jclass string_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(string_class, nullptr);\012  jclass class_class = env_-&gt;FindClass(&quot;java/lang/Class&quot;);\012  ASSERT_NE(class_class, nullptr);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;poop&quot;);\012  jclass c = env_-&gt;GetObjectClass(s);\012  ASSERT_TRUE(env_-&gt;IsSameObject(string_class, c));\012\012  jclass c2 = env_-&gt;GetObjectClass(c);\012  ASSERT_TRUE(env_-&gt;IsSameObject(class_class, env_-&gt;GetObjectClass(c2)));\012\012 // Null as object should fail.\012 CheckJniAbortCatcher jni_abort_catcher;\012  EXPECT_EQ(env_-&gt;GetObjectClass(nullptr), nullptr);\012  jni_abort_catcher.Check(&quot;java_object == null&quot;);\012})<SUB>1368</SUB>> ]
-"17298" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetSuperclass) {\012  jclass object_class = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_NE(object_class, nullptr);\012  jclass string_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(string_class, nullptr);\012  jclass runnable_interface = env_-&gt;FindClass(&quot;java/lang/Runnable&quot;);\012  ASSERT_NE(runnable_interface, nullptr);\012  ASSERT_TRUE(env_-&gt;IsSameObject(object_class, env_-&gt;GetSuperclass(string_class)));\012  ASSERT_EQ(env_-&gt;GetSuperclass(object_class), nullptr);\012  ASSERT_EQ(env_-&gt;GetSuperclass(runnable_interface), nullptr);\012\012 // Null as class should fail.\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(env_-&gt;GetSuperclass(nullptr), nullptr);\012  jni_abort_catcher.Check(&quot;java_class == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(env_-&gt;GetSuperclass(nullptr), nullptr);\012  jni_abort_catcher.Check(&quot;GetSuperclass received NULL jclass&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012},TEST_F(JniInternalTest, GetSuperclass) {\012  jclass object_class = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_NE(object_class, nullptr);\012  jclass string_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(string_class, nullptr);\012  jclass runnable_interface = env_-&gt;FindClass(&quot;java/lang/Runnable&quot;);\012  ASSERT_NE(runnable_interface, nullptr);\012  ASSERT_TRUE(env_-&gt;IsSameObject(object_class, env_-&gt;GetSuperclass(string_class)));\012  ASSERT_EQ(env_-&gt;GetSuperclass(object_class), nullptr);\012  ASSERT_EQ(env_-&gt;GetSuperclass(runnable_interface), nullptr);\012\012 // Null as class should fail.\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(env_-&gt;GetSuperclass(nullptr), nullptr);\012  jni_abort_catcher.Check(&quot;java_class == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(env_-&gt;GetSuperclass(nullptr), nullptr);\012  jni_abort_catcher.Check(&quot;GetSuperclass received NULL jclass&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012})<SUB>1387</SUB>> ]
-"17299" [label = <(UNKNOWN,TEST_F(JniInternalTest, IsAssignableFrom) {\012  jclass object_class = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_NE(object_class, nullptr);\012  jclass string_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(string_class, nullptr);\012\012 // A superclass is assignable from an instance of its\012 // subclass but not vice versa.\012  ASSERT_TRUE(env_-&gt;IsAssignableFrom(string_class, object_class));\012  ASSERT_FALSE(env_-&gt;IsAssignableFrom(object_class, string_class));\012\012  jclass charsequence_interface = env_-&gt;FindClass(&quot;java/lang/CharSequence&quot;);\012  ASSERT_NE(charsequence_interface, nullptr);\012\012 // An interface is assignable from an instance of an implementing\012 // class but not vice versa.\012  ASSERT_TRUE(env_-&gt;IsAssignableFrom(string_class, charsequence_interface));\012  ASSERT_FALSE(env_-&gt;IsAssignableFrom(charsequence_interface, string_class));\012\012 // Check that arrays are covariant.\012  jclass string_array_class = env_-&gt;FindClass(&quot;[Ljava/lang/String;&quot;);\012  ASSERT_NE(string_array_class, nullptr);\012  jclass object_array_class = env_-&gt;FindClass(&quot;[Ljava/lang/Object;&quot;);\012  ASSERT_NE(object_array_class, nullptr);\012  ASSERT_TRUE(env_-&gt;IsAssignableFrom(string_array_class, object_array_class));\012  ASSERT_FALSE(env_-&gt;IsAssignableFrom(object_array_class, string_array_class));\012\012 // Primitive types are tested in 004-JniTest.\012\012 // Null as either class should fail.\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(env_-&gt;IsAssignableFrom(nullptr, string_class), JNI_FALSE);\012  jni_abort_catcher.Check(&quot;java_class1 == null&quot;);\012  EXPECT_EQ(env_-&gt;IsAssignableFrom(object_class, nullptr), JNI_FALSE);\012  jni_abort_catcher.Check(&quot;java_class2 == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(env_-&gt;IsAssignableFrom(nullptr, string_class), JNI_FALSE);\012  jni_abort_catcher.Check(&quot;IsAssignableFrom received NULL jclass&quot;);\012  EXPECT_EQ(env_-&gt;IsAssignableFrom(object_class, nullptr), JNI_FALSE);\012  jni_abort_catcher.Check(&quot;IsAssignableFrom received NULL jclass&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012},TEST_F(JniInternalTest, IsAssignableFrom) {\012  jclass object_class = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_NE(object_class, nullptr);\012  jclass string_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(string_class, nullptr);\012\012 // A superclass is assignable from an instance of its\012 // subclass but not vice versa.\012  ASSERT_TRUE(env_-&gt;IsAssignableFrom(string_class, object_class));\012  ASSERT_FALSE(env_-&gt;IsAssignableFrom(object_class, string_class));\012\012  jclass charsequence_interface = env_-&gt;FindClass(&quot;java/lang/CharSequence&quot;);\012  ASSERT_NE(charsequence_interface, nullptr);\012\012 // An interface is assignable from an instance of an implementing\012 // class but not vice versa.\012  ASSERT_TRUE(env_-&gt;IsAssignableFrom(string_class, charsequence_interface));\012  ASSERT_FALSE(env_-&gt;IsAssignableFrom(charsequence_interface, string_class));\012\012 // Check that arrays are covariant.\012  jclass string_array_class = env_-&gt;FindClass(&quot;[Ljava/lang/String;&quot;);\012  ASSERT_NE(string_array_class, nullptr);\012  jclass object_array_class = env_-&gt;FindClass(&quot;[Ljava/lang/Object;&quot;);\012  ASSERT_NE(object_array_class, nullptr);\012  ASSERT_TRUE(env_-&gt;IsAssignableFrom(string_array_class, object_array_class));\012  ASSERT_FALSE(env_-&gt;IsAssignableFrom(object_array_class, string_array_class));\012\012 // Primitive types are tested in 004-JniTest.\012\012 // Null as either class should fail.\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(env_-&gt;IsAssignableFrom(nullptr, string_class), JNI_FALSE);\012  jni_abort_catcher.Check(&quot;java_class1 == null&quot;);\012  EXPECT_EQ(env_-&gt;IsAssignableFrom(object_class, nullptr), JNI_FALSE);\012  jni_abort_catcher.Check(&quot;java_class2 == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(env_-&gt;IsAssignableFrom(nullptr, string_class), JNI_FALSE);\012  jni_abort_catcher.Check(&quot;IsAssignableFrom received NULL jclass&quot;);\012  EXPECT_EQ(env_-&gt;IsAssignableFrom(object_class, nullptr), JNI_FALSE);\012  jni_abort_catcher.Check(&quot;IsAssignableFrom received NULL jclass&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012})<SUB>1409</SUB>> ]
-"17300" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetObjectRefType) {\012  jclass local = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_TRUE(local != nullptr);\012  EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(local));\012\012  jobject global = env_-&gt;NewGlobalRef(local);\012  EXPECT_EQ(JNIGlobalRefType, env_-&gt;GetObjectRefType(global));\012\012  jweak weak_global = env_-&gt;NewWeakGlobalRef(local);\012  EXPECT_EQ(JNIWeakGlobalRefType, env_-&gt;GetObjectRefType(weak_global));\012\012 {\012 CheckJniAbortCatcher jni_abort_catcher;\012    jobject invalid = reinterpret_cast&lt;jobject&gt;(this);\012    EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(invalid));\012    jni_abort_catcher.Check(&quot;use of invalid jobject&quot;);\012 }\012\012 // TODO: invoke a native method and test that its arguments are considered local references.\012\012 // Null as pointer should not fail and return invalid-ref. b/18820997\012  EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(nullptr));\012\012 // TODO: Null as reference should return the original type.\012 // This requires running a GC so a non-null object gets freed.\012},TEST_F(JniInternalTest, GetObjectRefType) {\012  jclass local = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_TRUE(local != nullptr);\012  EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(local));\012\012  jobject global = env_-&gt;NewGlobalRef(local);\012  EXPECT_EQ(JNIGlobalRefType, env_-&gt;GetObjectRefType(global));\012\012  jweak weak_global = env_-&gt;NewWeakGlobalRef(local);\012  EXPECT_EQ(JNIWeakGlobalRefType, env_-&gt;GetObjectRefType(weak_global));\012\012 {\012 CheckJniAbortCatcher jni_abort_catcher;\012    jobject invalid = reinterpret_cast&lt;jobject&gt;(this);\012    EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(invalid));\012    jni_abort_catcher.Check(&quot;use of invalid jobject&quot;);\012 }\012\012 // TODO: invoke a native method and test that its arguments are considered local references.\012\012 // Null as pointer should not fail and return invalid-ref. b/18820997\012  EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(nullptr));\012\012 // TODO: Null as reference should return the original type.\012 // This requires running a GC so a non-null object gets freed.\012})<SUB>1453</SUB>> ]
-"17301" [label = <(UNKNOWN,TEST_F(JniInternalTest, StaleWeakGlobal) {\012  jclass java_lang_Class = env_-&gt;FindClass(&quot;java/lang/Class&quot;);\012  ASSERT_NE(java_lang_Class, nullptr);\012  jobjectArray local_ref = env_-&gt;NewObjectArray(1, java_lang_Class, nullptr);\012  ASSERT_NE(local_ref, nullptr);\012  jweak weak_global = env_-&gt;NewWeakGlobalRef(local_ref);\012  ASSERT_NE(weak_global, nullptr);\012  env_-&gt;DeleteLocalRef(local_ref);\012 // GC should clear the weak global.\012 Runtime::Current()-&gt;GetHeap()-&gt;CollectGarbage(/* clear_soft_references */ false);\012  jobject new_global_ref = env_-&gt;NewGlobalRef(weak_global);\012  EXPECT_EQ(new_global_ref, nullptr);\012  jobject new_local_ref = env_-&gt;NewLocalRef(weak_global);\012  EXPECT_EQ(new_local_ref, nullptr);\012},TEST_F(JniInternalTest, StaleWeakGlobal) {\012  jclass java_lang_Class = env_-&gt;FindClass(&quot;java/lang/Class&quot;);\012  ASSERT_NE(java_lang_Class, nullptr);\012  jobjectArray local_ref = env_-&gt;NewObjectArray(1, java_lang_Class, nullptr);\012  ASSERT_NE(local_ref, nullptr);\012  jweak weak_global = env_-&gt;NewWeakGlobalRef(local_ref);\012  ASSERT_NE(weak_global, nullptr);\012  env_-&gt;DeleteLocalRef(local_ref);\012 // GC should clear the weak global.\012 Runtime::Current()-&gt;GetHeap()-&gt;CollectGarbage(/* clear_soft_references */ false);\012  jobject new_global_ref = env_-&gt;NewGlobalRef(weak_global);\012  EXPECT_EQ(new_global_ref, nullptr);\012  jobject new_local_ref = env_-&gt;NewLocalRef(weak_global);\012  EXPECT_EQ(new_local_ref, nullptr);\012})<SUB>1480</SUB>> ]
-"17302" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewStringUTF) {\012  EXPECT_EQ(env_-&gt;NewStringUTF(nullptr), nullptr);\012  jstring s;\012\012  s = env_-&gt;NewStringUTF(&quot;&quot;);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(0, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(0, env_-&gt;GetStringUTFLength(s));\012  s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(5, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(5, env_-&gt;GetStringUTFLength(s));\012\012 // Encoded surrogate pair.\012  s = env_-&gt;NewStringUTF(&quot;\xed\xa0\x81\xed\xb0\x80&quot;);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(2, env_-&gt;GetStringLength(s));\012\012 // The surrogate pair gets encoded into a 4 byte UTF sequence..\012  EXPECT_EQ(4, env_-&gt;GetStringUTFLength(s));\012 const char* chars = env_-&gt;GetStringUTFChars(s, nullptr);\012  EXPECT_STREQ(&quot;\xf0\x90\x90\x80&quot;, chars);\012  env_-&gt;ReleaseStringUTFChars(s, chars);\012\012 // .. but is stored as is in the utf-16 representation.\012 const jchar* jchars = env_-&gt;GetStringChars(s, nullptr);\012  EXPECT_EQ(0xd801, jchars[0]);\012  EXPECT_EQ(0xdc00, jchars[1]);\012  env_-&gt;ReleaseStringChars(s, jchars);\012\012 // 4 byte UTF sequence appended to an encoded surrogate pair.\012  s = env_-&gt;NewStringUTF(&quot;\xed\xa0\x81\xed\xb0\x80 \xf0\x9f\x8f\xa0&quot;);\012  EXPECT_NE(s, nullptr);\012\012 // The 4 byte sequence {0xf0, 0x9f, 0x8f, 0xa0} is converted into a surrogate\012 // pair {0xd83c, 0xdfe0}.\012  EXPECT_EQ(5, env_-&gt;GetStringLength(s));\012  jchars = env_-&gt;GetStringChars(s, nullptr);\012 // The first surrogate pair, encoded as such in the input.\012  EXPECT_EQ(0xd801, jchars[0]);\012  EXPECT_EQ(0xdc00, jchars[1]);\012 // The second surrogate pair, from the 4 byte UTF sequence in the input.\012  EXPECT_EQ(0xd83c, jchars[3]);\012  EXPECT_EQ(0xdfe0, jchars[4]);\012  env_-&gt;ReleaseStringChars(s, jchars);\012\012  EXPECT_EQ(9, env_-&gt;GetStringUTFLength(s));\012  chars = env_-&gt;GetStringUTFChars(s, nullptr);\012  EXPECT_STREQ(&quot;\xf0\x90\x90\x80 \xf0\x9f\x8f\xa0&quot;, chars);\012  env_-&gt;ReleaseStringUTFChars(s, chars);\012\012 // A string with 1, 2, 3 and 4 byte UTF sequences with spaces\012 // between them\012  s = env_-&gt;NewStringUTF(&quot;\x24 \xc2\xa2 \xe2\x82\xac \xf0\x9f\x8f\xa0&quot;);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(8, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(13, env_-&gt;GetStringUTFLength(s));\012},TEST_F(JniInternalTest, NewStringUTF) {\012  EXPECT_EQ(env_-&gt;NewStringUTF(nullptr), nullptr);\012  jstring s;\012\012  s = env_-&gt;NewStringUTF(&quot;&quot;);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(0, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(0, env_-&gt;GetStringUTFLength(s));\012  s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(5, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(5, env_-&gt;GetStringUTFLength(s));\012\012 // Encoded surrogate pair.\012  s = env_-&gt;NewStringUTF(&quot;\xed\xa0\x81\xed\xb0\x80&quot;);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(2, env_-&gt;GetStringLength(s));\012\012 // The surrogate pair gets encoded into a 4 byte UTF sequence..\012  EXPECT_EQ(4, env_-&gt;GetStringUTFLength(s));\012 const char* chars = env_-&gt;GetStringUTFChars(s, nullptr);\012  EXPECT_STREQ(&quot;\xf0\x90\x90\x80&quot;, chars);\012  env_-&gt;ReleaseStringUTFChars(s, chars);\012\012 // .. but is stored as is in the utf-16 representation.\012 const jchar* jchars = env_-&gt;GetStringChars(s, nullptr);\012  EXPECT_EQ(0xd801, jchars[0]);\012  EXPECT_EQ(0xdc00, jchars[1]);\012  env_-&gt;ReleaseStringChars(s, jchars);\012\012 // 4 byte UTF sequence appended to an encoded surrogate pair.\012  s = env_-&gt;NewStringUTF(&quot;\xed\xa0\x81\xed\xb0\x80 \xf0\x9f\x8f\xa0&quot;);\012  EXPECT_NE(s, nullptr);\012\012 // The 4 byte sequence {0xf0, 0x9f, 0x8f, 0xa0} is converted into a surrogate\012 // pair {0xd83c, 0xdfe0}.\012  EXPECT_EQ(5, env_-&gt;GetStringLength(s));\012  jchars = env_-&gt;GetStringChars(s, nullptr);\012 // The first surrogate pair, encoded as such in the input.\012  EXPECT_EQ(0xd801, jchars[0]);\012  EXPECT_EQ(0xdc00, jchars[1]);\012 // The second surrogate pair, from the 4 byte UTF sequence in the input.\012  EXPECT_EQ(0xd83c, jchars[3]);\012  EXPECT_EQ(0xdfe0, jchars[4]);\012  env_-&gt;ReleaseStringChars(s, jchars);\012\012  EXPECT_EQ(9, env_-&gt;GetStringUTFLength(s));\012  chars = env_-&gt;GetStringUTFChars(s, nullptr);\012  EXPECT_STREQ(&quot;\xf0\x90\x90\x80 \xf0\x9f\x8f\xa0&quot;, chars);\012  env_-&gt;ReleaseStringUTFChars(s, chars);\012\012 // A string with 1, 2, 3 and 4 byte UTF sequences with spaces\012 // between them\012  s = env_-&gt;NewStringUTF(&quot;\x24 \xc2\xa2 \xe2\x82\xac \xf0\x9f\x8f\xa0&quot;);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(8, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(13, env_-&gt;GetStringUTFLength(s));\012})<SUB>1496</SUB>> ]
-"17303" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewStringUTF_Validation) {\012 // For the following tests, allocate two pages, one R/W and the next inaccessible.\012  std::string error_msg;\012  std::unique_ptr&lt;MemMap&gt; head_map(MemMap::MapAnonymous(&quot;head&quot;,\012 /*addr=*/ nullptr,\012 2 * kPageSize,\012                                                        PROT_READ | PROT_WRITE,\012 /*low_4gb=*/ false,\012 /*reuse=*/ false,\012 &amp;error_msg));\012  ASSERT_TRUE(head_map != nullptr) &lt;&lt; error_msg;\012  std::unique_ptr&lt;MemMap&gt; tail_map(\012      head_map-&gt;RemapAtEnd(head_map-&gt;Begin() + kPageSize, &quot;tail&quot;, PROT_NONE, &amp;error_msg));\012  ASSERT_TRUE(tail_map != nullptr) &lt;&lt; error_msg;\012 char* utf_src = reinterpret_cast&lt;char*&gt;(head_map-&gt;Begin());\012\012 // Prepare for checking the `count` field.\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012  jfieldID count_fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;);\012  ASSERT_TRUE(count_fid != nullptr);\012\012 // Prepare for testing with the unchecked interface.\012 const JNINativeInterface* base_env = down_cast&lt;JNIEnvExt*&gt;(env_)-&gt;GetUncheckedFunctions();\012\012 // Start with a simple ASCII string consisting of 4095 characters 'x'.\012  memset(utf_src, 'x', kPageSize - 1u);\012  utf_src[kPageSize - 1u] = 0u;\012  jstring s = base_env-&gt;NewStringUTF(env_, utf_src);\012  ASSERT_EQ(mirror::String::GetFlaggedCount(kPageSize - 1u, /* compressible= */ true),\012            env_-&gt;GetIntField(s, count_fid));\012 const char* chars = env_-&gt;GetStringUTFChars(s, nullptr);\012 for (size_t pos = 0; pos != kPageSize - 1u; ++pos) {\012    ASSERT_EQ('x', chars[pos]) &lt;&lt; pos;\012 }\012  env_-&gt;ReleaseStringUTFChars(s, chars);\012\012 // Replace the last character with invalid character that requires continuation.\012 for (char invalid : { '\xc0', '\xe0', '\xf0' }) {\012    utf_src[kPageSize - 2u] = invalid;\012    s = base_env-&gt;NewStringUTF(env_, utf_src);\012    ASSERT_EQ(mirror::String::GetFlaggedCount(kPageSize - 1u, /* compressible= */ true),\012              env_-&gt;GetIntField(s, count_fid));\012    chars = env_-&gt;GetStringUTFChars(s, nullptr);\012 for (size_t pos = 0; pos != kPageSize - 2u; ++pos) {\012      ASSERT_EQ('x', chars[pos]) &lt;&lt; pos;\012 }\012    EXPECT_EQ('?', chars[kPageSize - 2u]);\012    env_-&gt;ReleaseStringUTFChars(s, chars);\012 }\012\012 // Replace the first two characters with a valid two-byte sequence yielding one character.\012  utf_src[0] = '\xc2';\012  utf_src[1] = '\x80';\012  s = base_env-&gt;NewStringUTF(env_, utf_src);\012  ASSERT_EQ(mirror::String::GetFlaggedCount(kPageSize - 2u, /* compressible= */ false),\012            env_-&gt;GetIntField(s, count_fid));\012 const jchar* jchars = env_-&gt;GetStringChars(s, nullptr);\012  EXPECT_EQ(jchars[0], 0x80u);\012 for (size_t pos = 1; pos != kPageSize - 3u; ++pos) {\012    ASSERT_EQ('x', jchars[pos]) &lt;&lt; pos;\012 }\012  EXPECT_EQ('?', jchars[kPageSize - 3u]);\012  env_-&gt;ReleaseStringChars(s, jchars);\012\012 // Replace the leading two-byte sequence with a two-byte sequence that decodes as ASCII (0x40).\012 // The sequence shall be replaced if string compression is used.\012  utf_src[0] = '\xc1';\012  utf_src[1] = '\x80';\012  s = base_env-&gt;NewStringUTF(env_, utf_src);\012 // Note: All invalid characters are replaced by ASCII replacement character.\012  ASSERT_EQ(mirror::String::GetFlaggedCount(kPageSize - 2u, /* compressible= */ true),\012            env_-&gt;GetIntField(s, count_fid));\012  jchars = env_-&gt;GetStringChars(s, nullptr);\012  EXPECT_EQ(mirror::kUseStringCompression ? '?' : '\x40', jchars[0]);\012 for (size_t pos = 1; pos != kPageSize - 3u; ++pos) {\012    ASSERT_EQ('x', jchars[pos]) &lt;&lt; pos;\012 }\012  EXPECT_EQ('?', jchars[kPageSize - 3u]);\012  env_-&gt;ReleaseStringChars(s, jchars);\012\012 // Replace the leading three bytes with a three-byte sequence that decodes as ASCII (0x40).\012 // The sequence shall be replaced if string compression is used.\012  utf_src[0] = '\xe0';\012  utf_src[1] = '\x81';\012  utf_src[2] = '\x80';\012  s = base_env-&gt;NewStringUTF(env_, utf_src);\012 // Note: All invalid characters are replaced by ASCII replacement character.\012  ASSERT_EQ(mirror::String::GetFlaggedCount(kPageSize - 3u, /* compressible= */ true),\012            env_-&gt;GetIntField(s, count_fid));\012  jchars = env_-&gt;GetStringChars(s, nullptr);\012  EXPECT_EQ(mirror::kUseStringCompression ? '?' : '\x40', jchars[0]);\012 for (size_t pos = 1; pos != kPageSize - 4u; ++pos) {\012    ASSERT_EQ('x', jchars[pos]) &lt;&lt; pos;\012 }\012  EXPECT_EQ('?', jchars[kPageSize - 4u]);\012  env_-&gt;ReleaseStringChars(s, jchars);\012\012 // Replace the last two characters with a valid two-byte sequence that decodes as 0.\012  utf_src[kPageSize - 3u] = '\xc0';\012  utf_src[kPageSize - 2u] = '\x80';\012  s = base_env-&gt;NewStringUTF(env_, utf_src);\012  ASSERT_EQ(mirror::String::GetFlaggedCount(kPageSize - 4u, /* compressible= */ false),\012            env_-&gt;GetIntField(s, count_fid));\012  jchars = env_-&gt;GetStringChars(s, nullptr);\012  EXPECT_EQ(mirror::kUseStringCompression ? '?' : '\x40', jchars[0]);\012 for (size_t pos = 1; pos != kPageSize - 5u; ++pos) {\012    ASSERT_EQ('x', jchars[pos]) &lt;&lt; pos;\012 }\012  EXPECT_EQ('\0', jchars[kPageSize - 5u]);\012  env_-&gt;ReleaseStringChars(s, jchars);\012},TEST_F(JniInternalTest, NewStringUTF_Validation) {\012 // For the following tests, allocate two pages, one R/W and the next inaccessible.\012  std::string error_msg;\012  std::unique_ptr&lt;MemMap&gt; head_map(MemMap::MapAnonymous(&quot;head&quot;,\012 /*addr=*/ nullptr,\012 2 * kPageSize,\012                                                        PROT_READ | PROT_WRITE,\012 /*low_4gb=*/ false,\012 /*reuse=*/ false,\012 &amp;error_msg));\012  ASSERT_TRUE(head_map != nullptr) &lt;&lt; error_msg;\012  std::unique_ptr&lt;MemMap&gt; tail_map(\012      head_map-&gt;RemapAtEnd(head_map-&gt;Begin() + kPageSize, &quot;tail&quot;, PROT_NONE, &amp;error_msg));\012  ASSERT_TRUE(tail_map != nullptr) &lt;&lt; error_msg;\012 char* utf_src = reinterpret_cast&lt;char*&gt;(head_map-&gt;Begin());\012\012 // Prepare for checking the `count` field.\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012  jfieldID count_fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;);\012  ASSERT_TRUE(count_fid != nullptr);\012\012 // Prepare for testing with the unchecked interface.\012 const JNINativeInterface* base_env = down_cast&lt;JNIEnvExt*&gt;(env_)-&gt;GetUncheckedFunctions();\012\012 // Start with a simple ASCII string consisting of 4095 characters 'x'.\012  memset(utf_src, 'x', kPageSize - 1u);\012  utf_src[kPageSize - 1u] = 0u;\012  jstring s = base_env-&gt;NewStringUTF(env_, utf_src);\012  ASSERT_EQ(mirror::String::GetFlaggedCount(kPageSize - 1u, /* compressible= */ true),\012            env_-&gt;GetIntField(s, count_fid));\012 const char* chars = env_-&gt;GetStringUTFChars(s, nullptr);\012 for (size_t pos = 0; pos != kPageSize - 1u; ++pos) {\012    ASSERT_EQ('x', chars[pos]) &lt;&lt; pos;\012 }\012  env_-&gt;ReleaseStringUTFChars(s, chars);\012\012 // Replace the last character with invalid character that requires continuation.\012 for (char invalid : { '\xc0', '\xe0', '\xf0' }) {\012    utf_src[kPageSize - 2u] = invalid;\012    s = base_env-&gt;NewStringUTF(env_, utf_src);\012    ASSERT_EQ(mirror::String::GetFlaggedCount(kPageSize - 1u, /* compressible= */ true),\012              env_-&gt;GetIntField(s, count_fid));\012    chars = env_-&gt;GetStringUTFChars(s, nullptr);\012 for (size_t pos = 0; pos != kPageSize - 2u; ++pos) {\012      ASSERT_EQ('x', chars[pos]) &lt;&lt; pos;\012 }\012    EXPECT_EQ('?', chars[kPageSize - 2u]);\012    env_-&gt;ReleaseStringUTFChars(s, chars);\012 }\012\012 // Replace the first two characters with a valid two-byte sequence yielding one character.\012  utf_src[0] = '\xc2';\012  utf_src[1] = '\x80';\012  s = base_env-&gt;NewStringUTF(env_, utf_src);\012  ASSERT_EQ(mirror::String::GetFlaggedCount(kPageSize - 2u, /* compressible= */ false),\012            env_-&gt;GetIntField(s, count_fid));\012 const jchar* jchars = env_-&gt;GetStringChars(s, nullptr);\012  EXPECT_EQ(jchars[0], 0x80u);\012 for (size_t pos = 1; pos != kPageSize - 3u; ++pos) {\012    ASSERT_EQ('x', jchars[pos]) &lt;&lt; pos;\012 }\012  EXPECT_EQ('?', jchars[kPageSize - 3u]);\012  env_-&gt;ReleaseStringChars(s, jchars);\012\012 // Replace the leading two-byte sequence with a two-byte sequence that decodes as ASCII (0x40).\012 // The sequence shall be replaced if string compression is used.\012  utf_src[0] = '\xc1';\012  utf_src[1] = '\x80';\012  s = base_env-&gt;NewStringUTF(env_, utf_src);\012 // Note: All invalid characters are replaced by ASCII replacement character.\012  ASSERT_EQ(mirror::String::GetFlaggedCount(kPageSize - 2u, /* compressible= */ true),\012            env_-&gt;GetIntField(s, count_fid));\012  jchars = env_-&gt;GetStringChars(s, nullptr);\012  EXPECT_EQ(mirror::kUseStringCompression ? '?' : '\x40', jchars[0]);\012 for (size_t pos = 1; pos != kPageSize - 3u; ++pos) {\012    ASSERT_EQ('x', jchars[pos]) &lt;&lt; pos;\012 }\012  EXPECT_EQ('?', jchars[kPageSize - 3u]);\012  env_-&gt;ReleaseStringChars(s, jchars);\012\012 // Replace the leading three bytes with a three-byte sequence that decodes as ASCII (0x40).\012 // The sequence shall be replaced if string compression is used.\012  utf_src[0] = '\xe0';\012  utf_src[1] = '\x81';\012  utf_src[2] = '\x80';\012  s = base_env-&gt;NewStringUTF(env_, utf_src);\012 // Note: All invalid characters are replaced by ASCII replacement character.\012  ASSERT_EQ(mirror::String::GetFlaggedCount(kPageSize - 3u, /* compressible= */ true),\012            env_-&gt;GetIntField(s, count_fid));\012  jchars = env_-&gt;GetStringChars(s, nullptr);\012  EXPECT_EQ(mirror::kUseStringCompression ? '?' : '\x40', jchars[0]);\012 for (size_t pos = 1; pos != kPageSize - 4u; ++pos) {\012    ASSERT_EQ('x', jchars[pos]) &lt;&lt; pos;\012 }\012  EXPECT_EQ('?', jchars[kPageSize - 4u]);\012  env_-&gt;ReleaseStringChars(s, jchars);\012\012 // Replace the last two characters with a valid two-byte sequence that decodes as 0.\012  utf_src[kPageSize - 3u] = '\xc0';\012  utf_src[kPageSize - 2u] = '\x80';\012  s = base_env-&gt;NewStringUTF(env_, utf_src);\012  ASSERT_EQ(mirror::String::GetFlaggedCount(kPageSize - 4u, /* compressible= */ false),\012            env_-&gt;GetIntField(s, count_fid));\012  jchars = env_-&gt;GetStringChars(s, nullptr);\012  EXPECT_EQ(mirror::kUseStringCompression ? '?' : '\x40', jchars[0]);\012 for (size_t pos = 1; pos != kPageSize - 5u; ++pos) {\012    ASSERT_EQ('x', jchars[pos]) &lt;&lt; pos;\012 }\012  EXPECT_EQ('\0', jchars[kPageSize - 5u]);\012  env_-&gt;ReleaseStringChars(s, jchars);\012})<SUB>1555</SUB>> ]
-"17304" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewString) {\012  jchar chars[] = { 'h', 'i' };\012  jstring s;\012  s = env_-&gt;NewString(chars, 0);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(0, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(0, env_-&gt;GetStringUTFLength(s));\012  s = env_-&gt;NewString(chars, 2);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(2, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(2, env_-&gt;GetStringUTFLength(s));\012\012 // TODO: check some non-ASCII strings.\012},TEST_F(JniInternalTest, NewString) {\012  jchar chars[] = { 'h', 'i' };\012  jstring s;\012  s = env_-&gt;NewString(chars, 0);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(0, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(0, env_-&gt;GetStringUTFLength(s));\012  s = env_-&gt;NewString(chars, 2);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(2, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(2, env_-&gt;GetStringUTFLength(s));\012\012 // TODO: check some non-ASCII strings.\012})<SUB>1668</SUB>> ]
-"17305" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewStringNullCharsZeroLength) {\012  jstring s = env_-&gt;NewString(nullptr, 0);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(0, env_-&gt;GetStringLength(s));\012},TEST_F(JniInternalTest, NewStringNullCharsZeroLength) {\012  jstring s = env_-&gt;NewString(nullptr, 0);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(0, env_-&gt;GetStringLength(s));\012})<SUB>1683</SUB>> ]
-"17306" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewStringNullCharsNonzeroLength) {\012 CheckJniAbortCatcher jni_abort_catcher;\012  env_-&gt;NewString(nullptr, 1);\012  jni_abort_catcher.Check(&quot;chars == null &amp;&amp; char_count &gt; 0&quot;);\012},TEST_F(JniInternalTest, NewStringNullCharsNonzeroLength) {\012 CheckJniAbortCatcher jni_abort_catcher;\012  env_-&gt;NewString(nullptr, 1);\012  jni_abort_catcher.Check(&quot;chars == null &amp;&amp; char_count &gt; 0&quot;);\012})<SUB>1689</SUB>> ]
-"17307" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewStringNegativeLength) {\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  env_-&gt;NewString(nullptr, -1);\012  jni_abort_catcher.Check(&quot;char_count &lt; 0: -1&quot;);\012  env_-&gt;NewString(nullptr, std::numeric_limits&lt;jint&gt;::min());\012  jni_abort_catcher.Check(&quot;char_count &lt; 0: -2147483648&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  env_-&gt;NewString(nullptr, -1);\012  jni_abort_catcher.Check(&quot;negative jsize: -1&quot;);\012  env_-&gt;NewString(nullptr, std::numeric_limits&lt;jint&gt;::min());\012  jni_abort_catcher.Check(&quot;negative jsize: -2147483648&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012},TEST_F(JniInternalTest, NewStringNegativeLength) {\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  env_-&gt;NewString(nullptr, -1);\012  jni_abort_catcher.Check(&quot;char_count &lt; 0: -1&quot;);\012  env_-&gt;NewString(nullptr, std::numeric_limits&lt;jint&gt;::min());\012  jni_abort_catcher.Check(&quot;char_count &lt; 0: -2147483648&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  env_-&gt;NewString(nullptr, -1);\012  jni_abort_catcher.Check(&quot;negative jsize: -1&quot;);\012  env_-&gt;NewString(nullptr, std::numeric_limits&lt;jint&gt;::min());\012  jni_abort_catcher.Check(&quot;negative jsize: -2147483648&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012})<SUB>1695</SUB>> ]
-"17308" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetStringLength_GetStringUTFLength) {\012 // Already tested in the NewString/NewStringUTF tests.\012},TEST_F(JniInternalTest, GetStringLength_GetStringUTFLength) {\012 // Already tested in the NewString/NewStringUTF tests.\012})<SUB>1710</SUB>> ]
-"17309" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetStringRegion_GetStringUTFRegion) {\012  jstring s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012  ASSERT_TRUE(s != nullptr);\012\012  env_-&gt;GetStringRegion(s, -1, 0, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringRegion(s, 0, -1, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringRegion(s, 0, 10, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringRegion(s, 10, 1, nullptr);\012 ExpectException(sioobe_);\012 // Regression test against integer overflow in range check.\012  env_-&gt;GetStringRegion(s, 0x7fffffff, 0x7fffffff, nullptr);\012 ExpectException(sioobe_);\012\012  jchar chars[4] = { 'x', 'x', 'x', 'x' };\012  env_-&gt;GetStringRegion(s, 1, 2, &amp;chars[1]);\012  EXPECT_EQ('x', chars[0]);\012  EXPECT_EQ('e', chars[1]);\012  EXPECT_EQ('l', chars[2]);\012  EXPECT_EQ('x', chars[3]);\012\012 // It's okay for the buffer to be null as long as the length is 0.\012  env_-&gt;GetStringRegion(s, 2, 0, nullptr);\012 // Even if the offset is invalid...\012  env_-&gt;GetStringRegion(s, 123, 0, nullptr);\012 ExpectException(sioobe_);\012\012  env_-&gt;GetStringUTFRegion(s, -1, 0, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringUTFRegion(s, 0, -1, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringUTFRegion(s, 0, 10, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringUTFRegion(s, 10, 1, nullptr);\012 ExpectException(sioobe_);\012 // Regression test against integer overflow in range check.\012  env_-&gt;GetStringUTFRegion(s, 0x7fffffff, 0x7fffffff, nullptr);\012 ExpectException(sioobe_);\012\012 char bytes[4] = { 'x', 'x', 'x', 'x' };\012  env_-&gt;GetStringUTFRegion(s, 1, 2, &amp;bytes[1]);\012  EXPECT_EQ('x', bytes[0]);\012  EXPECT_EQ('e', bytes[1]);\012  EXPECT_EQ('l', bytes[2]);\012  EXPECT_EQ('x', bytes[3]);\012\012 // It's okay for the buffer to be null as long as the length is 0.\012  env_-&gt;GetStringUTFRegion(s, 2, 0, nullptr);\012 // Even if the offset is invalid...\012  env_-&gt;GetStringUTFRegion(s, 123, 0, nullptr);\012 ExpectException(sioobe_);\012},TEST_F(JniInternalTest, GetStringRegion_GetStringUTFRegion) {\012  jstring s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012  ASSERT_TRUE(s != nullptr);\012\012  env_-&gt;GetStringRegion(s, -1, 0, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringRegion(s, 0, -1, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringRegion(s, 0, 10, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringRegion(s, 10, 1, nullptr);\012 ExpectException(sioobe_);\012 // Regression test against integer overflow in range check.\012  env_-&gt;GetStringRegion(s, 0x7fffffff, 0x7fffffff, nullptr);\012 ExpectException(sioobe_);\012\012  jchar chars[4] = { 'x', 'x', 'x', 'x' };\012  env_-&gt;GetStringRegion(s, 1, 2, &amp;chars[1]);\012  EXPECT_EQ('x', chars[0]);\012  EXPECT_EQ('e', chars[1]);\012  EXPECT_EQ('l', chars[2]);\012  EXPECT_EQ('x', chars[3]);\012\012 // It's okay for the buffer to be null as long as the length is 0.\012  env_-&gt;GetStringRegion(s, 2, 0, nullptr);\012 // Even if the offset is invalid...\012  env_-&gt;GetStringRegion(s, 123, 0, nullptr);\012 ExpectException(sioobe_);\012\012  env_-&gt;GetStringUTFRegion(s, -1, 0, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringUTFRegion(s, 0, -1, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringUTFRegion(s, 0, 10, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringUTFRegion(s, 10, 1, nullptr);\012 ExpectException(sioobe_);\012 // Regression test against integer overflow in range check.\012  env_-&gt;GetStringUTFRegion(s, 0x7fffffff, 0x7fffffff, nullptr);\012 ExpectException(sioobe_);\012\012 char bytes[4] = { 'x', 'x', 'x', 'x' };\012  env_-&gt;GetStringUTFRegion(s, 1, 2, &amp;bytes[1]);\012  EXPECT_EQ('x', bytes[0]);\012  EXPECT_EQ('e', bytes[1]);\012  EXPECT_EQ('l', bytes[2]);\012  EXPECT_EQ('x', bytes[3]);\012\012 // It's okay for the buffer to be null as long as the length is 0.\012  env_-&gt;GetStringUTFRegion(s, 2, 0, nullptr);\012 // Even if the offset is invalid...\012  env_-&gt;GetStringUTFRegion(s, 123, 0, nullptr);\012 ExpectException(sioobe_);\012})<SUB>1714</SUB>> ]
-"17310" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetStringUTFChars_ReleaseStringUTFChars) {\012 // Passing in a null jstring is ignored normally, but caught by -Xcheck:jni.\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_EQ(env_-&gt;GetStringUTFChars(nullptr, nullptr), nullptr);\012 }\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012    EXPECT_EQ(env_-&gt;GetStringUTFChars(nullptr, nullptr), nullptr);\012    check_jni_abort_catcher.Check(&quot;GetStringUTFChars received NULL jstring&quot;);\012    EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012 }\012\012  jstring s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012  ASSERT_TRUE(s != nullptr);\012\012 const char* utf = env_-&gt;GetStringUTFChars(s, nullptr);\012  EXPECT_STREQ(&quot;hello&quot;, utf);\012  env_-&gt;ReleaseStringUTFChars(s, utf);\012\012  jboolean is_copy = JNI_FALSE;\012  utf = env_-&gt;GetStringUTFChars(s, &amp;is_copy);\012  EXPECT_EQ(JNI_TRUE, is_copy);\012  EXPECT_STREQ(&quot;hello&quot;, utf);\012  env_-&gt;ReleaseStringUTFChars(s, utf);\012},TEST_F(JniInternalTest, GetStringUTFChars_ReleaseStringUTFChars) {\012 // Passing in a null jstring is ignored normally, but caught by -Xcheck:jni.\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_EQ(env_-&gt;GetStringUTFChars(nullptr, nullptr), nullptr);\012 }\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012    EXPECT_EQ(env_-&gt;GetStringUTFChars(nullptr, nullptr), nullptr);\012    check_jni_abort_catcher.Check(&quot;GetStringUTFChars received NULL jstring&quot;);\012    EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012 }\012\012  jstring s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012  ASSERT_TRUE(s != nullptr);\012\012 const char* utf = env_-&gt;GetStringUTFChars(s, nullptr);\012  EXPECT_STREQ(&quot;hello&quot;, utf);\012  env_-&gt;ReleaseStringUTFChars(s, utf);\012\012  jboolean is_copy = JNI_FALSE;\012  utf = env_-&gt;GetStringUTFChars(s, &amp;is_copy);\012  EXPECT_EQ(JNI_TRUE, is_copy);\012  EXPECT_STREQ(&quot;hello&quot;, utf);\012  env_-&gt;ReleaseStringUTFChars(s, utf);\012})<SUB>1769</SUB>> ]
-"17311" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetStringChars_ReleaseStringChars) {\012  jstring s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012 ScopedObjectAccess soa(env_);\012 ObjPtr&lt;mirror::String&gt; s_m = soa.Decode&lt;mirror::String&gt;(s);\012  ASSERT_TRUE(s != nullptr);\012\012  jchar expected[] = { 'h', 'e', 'l', 'l', 'o' };\012 const jchar* chars = env_-&gt;GetStringChars(s, nullptr);\012  EXPECT_EQ(expected[0], chars[0]);\012  EXPECT_EQ(expected[1], chars[1]);\012  EXPECT_EQ(expected[2], chars[2]);\012  EXPECT_EQ(expected[3], chars[3]);\012  EXPECT_EQ(expected[4], chars[4]);\012  env_-&gt;ReleaseStringChars(s, chars);\012\012  jboolean is_copy = JNI_FALSE;\012  chars = env_-&gt;GetStringChars(s, &amp;is_copy);\012 if (Runtime::Current()-&gt;GetHeap()-&gt;IsMovableObject(s_m)) {\012    EXPECT_EQ(JNI_TRUE, is_copy);\012 } else {\012    EXPECT_EQ(JNI_FALSE, is_copy);\012 }\012  EXPECT_EQ(expected[0], chars[0]);\012  EXPECT_EQ(expected[1], chars[1]);\012  EXPECT_EQ(expected[2], chars[2]);\012  EXPECT_EQ(expected[3], chars[3]);\012  EXPECT_EQ(expected[4], chars[4]);\012  env_-&gt;ReleaseStringChars(s, chars);\012},TEST_F(JniInternalTest, GetStringChars_ReleaseStringChars) {\012  jstring s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012 ScopedObjectAccess soa(env_);\012 ObjPtr&lt;mirror::String&gt; s_m = soa.Decode&lt;mirror::String&gt;(s);\012  ASSERT_TRUE(s != nullptr);\012\012  jchar expected[] = { 'h', 'e', 'l', 'l', 'o' };\012 const jchar* chars = env_-&gt;GetStringChars(s, nullptr);\012  EXPECT_EQ(expected[0], chars[0]);\012  EXPECT_EQ(expected[1], chars[1]);\012  EXPECT_EQ(expected[2], chars[2]);\012  EXPECT_EQ(expected[3], chars[3]);\012  EXPECT_EQ(expected[4], chars[4]);\012  env_-&gt;ReleaseStringChars(s, chars);\012\012  jboolean is_copy = JNI_FALSE;\012  chars = env_-&gt;GetStringChars(s, &amp;is_copy);\012 if (Runtime::Current()-&gt;GetHeap()-&gt;IsMovableObject(s_m)) {\012    EXPECT_EQ(JNI_TRUE, is_copy);\012 } else {\012    EXPECT_EQ(JNI_FALSE, is_copy);\012 }\012  EXPECT_EQ(expected[0], chars[0]);\012  EXPECT_EQ(expected[1], chars[1]);\012  EXPECT_EQ(expected[2], chars[2]);\012  EXPECT_EQ(expected[3], chars[3]);\012  EXPECT_EQ(expected[4], chars[4]);\012  env_-&gt;ReleaseStringChars(s, chars);\012})<SUB>1798</SUB>> ]
-"17312" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetStringCritical_ReleaseStringCritical) {\012  jstring s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012  ASSERT_TRUE(s != nullptr);\012\012  jchar expected[] = { 'h', 'e', 'l', 'l', 'o' };\012 const jchar* chars = env_-&gt;GetStringCritical(s, nullptr);\012  EXPECT_EQ(expected[0], chars[0]);\012  EXPECT_EQ(expected[1], chars[1]);\012  EXPECT_EQ(expected[2], chars[2]);\012  EXPECT_EQ(expected[3], chars[3]);\012  EXPECT_EQ(expected[4], chars[4]);\012  env_-&gt;ReleaseStringCritical(s, chars);\012\012  jboolean is_copy = JNI_TRUE;\012  chars = env_-&gt;GetStringCritical(s, &amp;is_copy);\012 if (mirror::kUseStringCompression) {\012 // is_copy has to be JNI_TRUE because &quot;hello&quot; is all-ASCII\012    EXPECT_EQ(JNI_TRUE, is_copy);\012 } else {\012    EXPECT_EQ(JNI_FALSE, is_copy);\012 }\012  EXPECT_EQ(expected[0], chars[0]);\012  EXPECT_EQ(expected[1], chars[1]);\012  EXPECT_EQ(expected[2], chars[2]);\012  EXPECT_EQ(expected[3], chars[3]);\012  EXPECT_EQ(expected[4], chars[4]);\012  env_-&gt;ReleaseStringCritical(s, chars);\012\012 if (mirror::kUseStringCompression) {\012 // is_copy has to be JNI_FALSE because &quot;\xed\xa0\x81\xed\xb0\x80&quot; is incompressible\012    jboolean is_copy_16 = JNI_TRUE;\012    jstring s_16 = env_-&gt;NewStringUTF(&quot;\xed\xa0\x81\xed\xb0\x80&quot;);\012    chars = env_-&gt;GetStringCritical(s_16, &amp;is_copy_16);\012    EXPECT_EQ(2, env_-&gt;GetStringLength(s_16));\012    EXPECT_EQ(4, env_-&gt;GetStringUTFLength(s_16));\012    env_-&gt;ReleaseStringCritical(s_16, chars);\012 }\012},TEST_F(JniInternalTest, GetStringCritical_ReleaseStringCritical) {\012  jstring s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012  ASSERT_TRUE(s != nullptr);\012\012  jchar expected[] = { 'h', 'e', 'l', 'l', 'o' };\012 const jchar* chars = env_-&gt;GetStringCritical(s, nullptr);\012  EXPECT_EQ(expected[0], chars[0]);\012  EXPECT_EQ(expected[1], chars[1]);\012  EXPECT_EQ(expected[2], chars[2]);\012  EXPECT_EQ(expected[3], chars[3]);\012  EXPECT_EQ(expected[4], chars[4]);\012  env_-&gt;ReleaseStringCritical(s, chars);\012\012  jboolean is_copy = JNI_TRUE;\012  chars = env_-&gt;GetStringCritical(s, &amp;is_copy);\012 if (mirror::kUseStringCompression) {\012 // is_copy has to be JNI_TRUE because &quot;hello&quot; is all-ASCII\012    EXPECT_EQ(JNI_TRUE, is_copy);\012 } else {\012    EXPECT_EQ(JNI_FALSE, is_copy);\012 }\012  EXPECT_EQ(expected[0], chars[0]);\012  EXPECT_EQ(expected[1], chars[1]);\012  EXPECT_EQ(expected[2], chars[2]);\012  EXPECT_EQ(expected[3], chars[3]);\012  EXPECT_EQ(expected[4], chars[4]);\012  env_-&gt;ReleaseStringCritical(s, chars);\012\012 if (mirror::kUseStringCompression) {\012 // is_copy has to be JNI_FALSE because &quot;\xed\xa0\x81\xed\xb0\x80&quot; is incompressible\012    jboolean is_copy_16 = JNI_TRUE;\012    jstring s_16 = env_-&gt;NewStringUTF(&quot;\xed\xa0\x81\xed\xb0\x80&quot;);\012    chars = env_-&gt;GetStringCritical(s_16, &amp;is_copy_16);\012    EXPECT_EQ(2, env_-&gt;GetStringLength(s_16));\012    EXPECT_EQ(4, env_-&gt;GetStringUTFLength(s_16));\012    env_-&gt;ReleaseStringCritical(s_16, chars);\012 }\012})<SUB>1828</SUB>> ]
-"17313" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetObjectArrayElement_SetObjectArrayElement) {\012  jclass java_lang_Class = env_-&gt;FindClass(&quot;java/lang/Class&quot;);\012  ASSERT_TRUE(java_lang_Class != nullptr);\012\012  jobjectArray array = env_-&gt;NewObjectArray(1, java_lang_Class, nullptr);\012  EXPECT_NE(array, nullptr);\012  EXPECT_EQ(env_-&gt;GetObjectArrayElement(array, 0), nullptr);\012  env_-&gt;SetObjectArrayElement(array, 0, java_lang_Class);\012  EXPECT_TRUE(env_-&gt;IsSameObject(env_-&gt;GetObjectArrayElement(array, 0), java_lang_Class));\012\012 // ArrayIndexOutOfBounds for negative index.\012  env_-&gt;SetObjectArrayElement(array, -1, java_lang_Class);\012 ExpectException(aioobe_);\012\012 // ArrayIndexOutOfBounds for too-large index.\012  env_-&gt;SetObjectArrayElement(array, 1, java_lang_Class);\012 ExpectException(aioobe_);\012\012 // ArrayStoreException thrown for bad types.\012  env_-&gt;SetObjectArrayElement(array, 0, env_-&gt;NewStringUTF(&quot;not a jclass!&quot;));\012 ExpectException(ase_);\012\012 // Null as array should fail.\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(nullptr, env_-&gt;GetObjectArrayElement(nullptr, 0));\012  jni_abort_catcher.Check(&quot;java_array == null&quot;);\012  env_-&gt;SetObjectArrayElement(nullptr, 0, nullptr);\012  jni_abort_catcher.Check(&quot;java_array == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(nullptr, env_-&gt;GetObjectArrayElement(nullptr, 0));\012  jni_abort_catcher.Check(&quot;jarray was NULL&quot;);\012  env_-&gt;SetObjectArrayElement(nullptr, 0, nullptr);\012  jni_abort_catcher.Check(&quot;jarray was NULL&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012},TEST_F(JniInternalTest, GetObjectArrayElement_SetObjectArrayElement) {\012  jclass java_lang_Class = env_-&gt;FindClass(&quot;java/lang/Class&quot;);\012  ASSERT_TRUE(java_lang_Class != nullptr);\012\012  jobjectArray array = env_-&gt;NewObjectArray(1, java_lang_Class, nullptr);\012  EXPECT_NE(array, nullptr);\012  EXPECT_EQ(env_-&gt;GetObjectArrayElement(array, 0), nullptr);\012  env_-&gt;SetObjectArrayElement(array, 0, java_lang_Class);\012  EXPECT_TRUE(env_-&gt;IsSameObject(env_-&gt;GetObjectArrayElement(array, 0), java_lang_Class));\012\012 // ArrayIndexOutOfBounds for negative index.\012  env_-&gt;SetObjectArrayElement(array, -1, java_lang_Class);\012 ExpectException(aioobe_);\012\012 // ArrayIndexOutOfBounds for too-large index.\012  env_-&gt;SetObjectArrayElement(array, 1, java_lang_Class);\012 ExpectException(aioobe_);\012\012 // ArrayStoreException thrown for bad types.\012  env_-&gt;SetObjectArrayElement(array, 0, env_-&gt;NewStringUTF(&quot;not a jclass!&quot;));\012 ExpectException(ase_);\012\012 // Null as array should fail.\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(nullptr, env_-&gt;GetObjectArrayElement(nullptr, 0));\012  jni_abort_catcher.Check(&quot;java_array == null&quot;);\012  env_-&gt;SetObjectArrayElement(nullptr, 0, nullptr);\012  jni_abort_catcher.Check(&quot;java_array == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(nullptr, env_-&gt;GetObjectArrayElement(nullptr, 0));\012  jni_abort_catcher.Check(&quot;jarray was NULL&quot;);\012  env_-&gt;SetObjectArrayElement(nullptr, 0, nullptr);\012  jni_abort_catcher.Check(&quot;jarray was NULL&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012})<SUB>1867</SUB>> ]
-"17314" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetPrimitiveField_SetPrimitiveField) {\012  TEST_PRIMITIVE_FIELD_FOR_CLASS(&quot;AllFields&quot;);\012},TEST_F(JniInternalTest, GetPrimitiveField_SetPrimitiveField) {\012  TEST_PRIMITIVE_FIELD_FOR_CLASS(&quot;AllFields&quot;);\012})<SUB>1998</SUB>> ]
-"17315" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetPrimitiveField_SetPrimitiveField_Subclass) {\012  TEST_PRIMITIVE_FIELD_FOR_CLASS(&quot;AllFieldsSub&quot;);\012},TEST_F(JniInternalTest, GetPrimitiveField_SetPrimitiveField_Subclass) {\012  TEST_PRIMITIVE_FIELD_FOR_CLASS(&quot;AllFieldsSub&quot;);\012})<SUB>2002</SUB>> ]
-"17316" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetField_SetField_unrelated) {\012 Thread::Current()-&gt;TransitionFromSuspendedToRunnable();\012 LoadDex(&quot;AllFields&quot;);\012 bool started = runtime_-&gt;Start();\012  ASSERT_TRUE(started);\012  jclass c = env_-&gt;FindClass(&quot;AllFields&quot;);\012  ASSERT_NE(c, nullptr);\012  jclass uc = env_-&gt;FindClass(&quot;AllFieldsUnrelated&quot;);\012  ASSERT_NE(uc, nullptr);\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(true);\012  EXPECT_UNRELATED_FIELD_FAILURE(Boolean, &quot;sZ&quot;, &quot;Z&quot;, JNI_TRUE);\012  EXPECT_UNRELATED_FIELD_FAILURE(Byte, &quot;sB&quot;, &quot;B&quot;, 1);\012  EXPECT_UNRELATED_FIELD_FAILURE(Char, &quot;sC&quot;, &quot;C&quot;, 'a');\012  EXPECT_UNRELATED_FIELD_FAILURE(Double, &quot;sD&quot;, &quot;D&quot;, 1.0);\012  EXPECT_UNRELATED_FIELD_FAILURE(Float, &quot;sF&quot;, &quot;F&quot;, 1.0);\012  EXPECT_UNRELATED_FIELD_FAILURE(Int, &quot;sI&quot;, &quot;I&quot;, 1);\012  EXPECT_UNRELATED_FIELD_FAILURE(Long, &quot;sJ&quot;, &quot;J&quot;, 1);\012  EXPECT_UNRELATED_FIELD_FAILURE(Short, &quot;sS&quot;, &quot;S&quot;, 1);\012  EXPECT_UNRELATED_FIELD_FAILURE(Object, &quot;sObject&quot;, &quot;Ljava/lang/Object;&quot;, c);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012},TEST_F(JniInternalTest, GetField_SetField_unrelated) {\012 Thread::Current()-&gt;TransitionFromSuspendedToRunnable();\012 LoadDex(&quot;AllFields&quot;);\012 bool started = runtime_-&gt;Start();\012  ASSERT_TRUE(started);\012  jclass c = env_-&gt;FindClass(&quot;AllFields&quot;);\012  ASSERT_NE(c, nullptr);\012  jclass uc = env_-&gt;FindClass(&quot;AllFieldsUnrelated&quot;);\012  ASSERT_NE(uc, nullptr);\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(true);\012  EXPECT_UNRELATED_FIELD_FAILURE(Boolean, &quot;sZ&quot;, &quot;Z&quot;, JNI_TRUE);\012  EXPECT_UNRELATED_FIELD_FAILURE(Byte, &quot;sB&quot;, &quot;B&quot;, 1);\012  EXPECT_UNRELATED_FIELD_FAILURE(Char, &quot;sC&quot;, &quot;C&quot;, 'a');\012  EXPECT_UNRELATED_FIELD_FAILURE(Double, &quot;sD&quot;, &quot;D&quot;, 1.0);\012  EXPECT_UNRELATED_FIELD_FAILURE(Float, &quot;sF&quot;, &quot;F&quot;, 1.0);\012  EXPECT_UNRELATED_FIELD_FAILURE(Int, &quot;sI&quot;, &quot;I&quot;, 1);\012  EXPECT_UNRELATED_FIELD_FAILURE(Long, &quot;sJ&quot;, &quot;J&quot;, 1);\012  EXPECT_UNRELATED_FIELD_FAILURE(Short, &quot;sS&quot;, &quot;S&quot;, 1);\012  EXPECT_UNRELATED_FIELD_FAILURE(Object, &quot;sObject&quot;, &quot;Ljava/lang/Object;&quot;, c);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012})<SUB>2017</SUB>> ]
-"17317" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetObjectField_SetObjectField) {\012  TEST_OBJECT_FIELD_FOR_CLASS(&quot;AllFields&quot;);\012},TEST_F(JniInternalTest, GetObjectField_SetObjectField) {\012  TEST_OBJECT_FIELD_FOR_CLASS(&quot;AllFields&quot;);\012})<SUB>2071</SUB>> ]
-"17318" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetObjectField_SetObjectField_subclass) {\012  TEST_OBJECT_FIELD_FOR_CLASS(&quot;AllFieldsSub&quot;);\012},TEST_F(JniInternalTest, GetObjectField_SetObjectField_subclass) {\012  TEST_OBJECT_FIELD_FOR_CLASS(&quot;AllFieldsSub&quot;);\012})<SUB>2075</SUB>> ]
-"17319" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewLocalRef_nullptr) {\012  EXPECT_EQ(env_-&gt;NewLocalRef(nullptr), nullptr);\012},TEST_F(JniInternalTest, NewLocalRef_nullptr) {\012  EXPECT_EQ(env_-&gt;NewLocalRef(nullptr), nullptr);\012})<SUB>2079</SUB>> ]
-"17320" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewLocalRef) {\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  jobject o = env_-&gt;NewLocalRef(s);\012  EXPECT_NE(o, nullptr);\012  EXPECT_NE(o, s);\012\012  EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(o));\012},TEST_F(JniInternalTest, NewLocalRef) {\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  jobject o = env_-&gt;NewLocalRef(s);\012  EXPECT_NE(o, nullptr);\012  EXPECT_NE(o, s);\012\012  EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(o));\012})<SUB>2083</SUB>> ]
-"17321" [label = <(UNKNOWN,TEST_F(JniInternalTest, DeleteLocalRef_nullptr) {\012  env_-&gt;DeleteLocalRef(nullptr);\012},TEST_F(JniInternalTest, DeleteLocalRef_nullptr) {\012  env_-&gt;DeleteLocalRef(nullptr);\012})<SUB>2093</SUB>> ]
-"17322" [label = <(UNKNOWN,TEST_F(JniInternalTest, DeleteLocalRef) {\012 // This tests leads to warnings and errors in the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  env_-&gt;DeleteLocalRef(s);\012\012 // Currently, deleting an already-deleted reference is just a CheckJNI warning.\012 {\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      env_-&gt;DeleteLocalRef(s);\012 }\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012    env_-&gt;DeleteLocalRef(s);\012    std::string expected(StringPrintf(&quot;use of deleted local reference %p&quot;, s));\012    check_jni_abort_catcher.Check(expected.c_str());\012    EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012 }\012\012  s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  jobject o = env_-&gt;NewLocalRef(s);\012  ASSERT_NE(o, nullptr);\012\012  env_-&gt;DeleteLocalRef(s);\012  env_-&gt;DeleteLocalRef(o);\012},TEST_F(JniInternalTest, DeleteLocalRef) {\012 // This tests leads to warnings and errors in the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  env_-&gt;DeleteLocalRef(s);\012\012 // Currently, deleting an already-deleted reference is just a CheckJNI warning.\012 {\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      env_-&gt;DeleteLocalRef(s);\012 }\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012    env_-&gt;DeleteLocalRef(s);\012    std::string expected(StringPrintf(&quot;use of deleted local reference %p&quot;, s));\012    check_jni_abort_catcher.Check(expected.c_str());\012    EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012 }\012\012  s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  jobject o = env_-&gt;NewLocalRef(s);\012  ASSERT_NE(o, nullptr);\012\012  env_-&gt;DeleteLocalRef(s);\012  env_-&gt;DeleteLocalRef(o);\012})<SUB>2097</SUB>> ]
-"17323" [label = <(UNKNOWN,TEST_F(JniInternalTest, PushLocalFrame_10395422) {\012 // The JNI specification is ambiguous about whether the given capacity is to be interpreted as a\012 // maximum or as a minimum, but it seems like it's supposed to be a minimum, and that's how\012 // Android historically treated it, and it's how the RI treats it. It's also the more useful\012 // interpretation!\012  ASSERT_EQ(JNI_OK, env_-&gt;PushLocalFrame(0));\012  env_-&gt;PopLocalFrame(nullptr);\012\012 // The following two tests will print errors to the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012 // Negative capacities are not allowed.\012  ASSERT_EQ(JNI_ERR, env_-&gt;PushLocalFrame(-1));\012},TEST_F(JniInternalTest, PushLocalFrame_10395422) {\012 // The JNI specification is ambiguous about whether the given capacity is to be interpreted as a\012 // maximum or as a minimum, but it seems like it's supposed to be a minimum, and that's how\012 // Android historically treated it, and it's how the RI treats it. It's also the more useful\012 // interpretation!\012  ASSERT_EQ(JNI_OK, env_-&gt;PushLocalFrame(0));\012  env_-&gt;PopLocalFrame(nullptr);\012\012 // The following two tests will print errors to the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012 // Negative capacities are not allowed.\012  ASSERT_EQ(JNI_ERR, env_-&gt;PushLocalFrame(-1));\012})<SUB>2129</SUB>> ]
-"17324" [label = <(UNKNOWN,TEST_F(JniInternalTest, PushLocalFrame_PopLocalFrame) {\012 // This tests leads to errors in the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012  jobject original = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(original, nullptr);\012\012  jobject outer;\012  jobject inner1, inner2;\012 ScopedObjectAccess soa(env_);\012 {\012    ASSERT_EQ(JNI_OK, env_-&gt;PushLocalFrame(4));\012    outer = env_-&gt;NewLocalRef(original);\012\012 {\012      ASSERT_EQ(JNI_OK, env_-&gt;PushLocalFrame(4));\012      inner1 = env_-&gt;NewLocalRef(outer);\012      inner2 = env_-&gt;NewStringUTF(&quot;survivor&quot;);\012      EXPECT_NE(env_-&gt;PopLocalFrame(inner2), nullptr);\012 }\012\012    EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(original));\012    EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(outer));\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(inner1));\012      check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012 }\012\012 // Our local reference for the survivor is invalid because the survivor\012 // gets a new local reference...\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(inner2));\012      check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012 }\012\012    EXPECT_EQ(env_-&gt;PopLocalFrame(nullptr), nullptr);\012 }\012  EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(original));\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(outer));\012  check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012  EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(inner1));\012  check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012  EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(inner2));\012  check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012},TEST_F(JniInternalTest, PushLocalFrame_PopLocalFrame) {\012 // This tests leads to errors in the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012  jobject original = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(original, nullptr);\012\012  jobject outer;\012  jobject inner1, inner2;\012 ScopedObjectAccess soa(env_);\012 {\012    ASSERT_EQ(JNI_OK, env_-&gt;PushLocalFrame(4));\012    outer = env_-&gt;NewLocalRef(original);\012\012 {\012      ASSERT_EQ(JNI_OK, env_-&gt;PushLocalFrame(4));\012      inner1 = env_-&gt;NewLocalRef(outer);\012      inner2 = env_-&gt;NewStringUTF(&quot;survivor&quot;);\012      EXPECT_NE(env_-&gt;PopLocalFrame(inner2), nullptr);\012 }\012\012    EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(original));\012    EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(outer));\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(inner1));\012      check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012 }\012\012 // Our local reference for the survivor is invalid because the survivor\012 // gets a new local reference...\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(inner2));\012      check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012 }\012\012    EXPECT_EQ(env_-&gt;PopLocalFrame(nullptr), nullptr);\012 }\012  EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(original));\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(outer));\012  check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012  EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(inner1));\012  check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012  EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(inner2));\012  check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012})<SUB>2144</SUB>> ]
-"17325" [label = <(UNKNOWN,TEST_F(JniInternalTest, PushLocalFrame_LimitAndOverflow) {\012 // Try a very large value that should fail.\012  ASSERT_NE(JNI_OK, env_-&gt;PushLocalFrame(std::numeric_limits&lt;jint&gt;::max()));\012  ASSERT_TRUE(env_-&gt;ExceptionCheck());\012  env_-&gt;ExceptionClear();\012\012 // On 32-bit, also check for some overflow conditions.\012#ifndef __LP64__\012  ASSERT_EQ(JNI_OK, env_-&gt;PushLocalFrame(10));\012  ASSERT_NE(JNI_OK, env_-&gt;PushLocalFrame(std::numeric_limits&lt;jint&gt;::max() - 10));\012  ASSERT_TRUE(env_-&gt;ExceptionCheck());\012  env_-&gt;ExceptionClear();\012  EXPECT_EQ(env_-&gt;PopLocalFrame(nullptr), nullptr);\012#endif\012},TEST_F(JniInternalTest, PushLocalFrame_LimitAndOverflow) {\012 // Try a very large value that should fail.\012  ASSERT_NE(JNI_OK, env_-&gt;PushLocalFrame(std::numeric_limits&lt;jint&gt;::max()));\012  ASSERT_TRUE(env_-&gt;ExceptionCheck());\012  env_-&gt;ExceptionClear();\012\012 // On 32-bit, also check for some overflow conditions.\012#ifndef __LP64__\012  ASSERT_EQ(JNI_OK, env_-&gt;PushLocalFrame(10));\012  ASSERT_NE(JNI_OK, env_-&gt;PushLocalFrame(std::numeric_limits&lt;jint&gt;::max() - 10));\012  ASSERT_TRUE(env_-&gt;ExceptionCheck());\012  env_-&gt;ExceptionClear();\012  EXPECT_EQ(env_-&gt;PopLocalFrame(nullptr), nullptr);\012#endif\012})<SUB>2193</SUB>> ]
-"17326" [label = <(UNKNOWN,TEST_F(JniInternalTest, PushLocalFrame_b62223672) {\012 // The 512 entry limit has been lifted, try a larger value.\012  ASSERT_EQ(JNI_OK, env_-&gt;PushLocalFrame(1024));\012  EXPECT_EQ(env_-&gt;PopLocalFrame(nullptr), nullptr);\012},TEST_F(JniInternalTest, PushLocalFrame_b62223672) {\012 // The 512 entry limit has been lifted, try a larger value.\012  ASSERT_EQ(JNI_OK, env_-&gt;PushLocalFrame(1024));\012  EXPECT_EQ(env_-&gt;PopLocalFrame(nullptr), nullptr);\012})<SUB>2209</SUB>> ]
-"17327" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewGlobalRef_nullptr) {\012  EXPECT_EQ(env_-&gt;NewGlobalRef(nullptr), nullptr);\012},TEST_F(JniInternalTest, NewGlobalRef_nullptr) {\012  EXPECT_EQ(env_-&gt;NewGlobalRef(nullptr), nullptr);\012})<SUB>2215</SUB>> ]
-"17328" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewGlobalRef) {\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  jobject o = env_-&gt;NewGlobalRef(s);\012  EXPECT_NE(o, nullptr);\012  EXPECT_NE(o, s);\012\012  EXPECT_EQ(env_-&gt;GetObjectRefType(o), JNIGlobalRefType);\012},TEST_F(JniInternalTest, NewGlobalRef) {\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  jobject o = env_-&gt;NewGlobalRef(s);\012  EXPECT_NE(o, nullptr);\012  EXPECT_NE(o, s);\012\012  EXPECT_EQ(env_-&gt;GetObjectRefType(o), JNIGlobalRefType);\012})<SUB>2219</SUB>> ]
-"17329" [label = <(UNKNOWN,TEST_F(JniInternalTest, DeleteGlobalRef_nullptr) {\012  env_-&gt;DeleteGlobalRef(nullptr);\012},TEST_F(JniInternalTest, DeleteGlobalRef_nullptr) {\012  env_-&gt;DeleteGlobalRef(nullptr);\012})<SUB>2229</SUB>> ]
-"17330" [label = <(UNKNOWN,TEST_F(JniInternalTest, DeleteGlobalRef) {\012 // This tests leads to warnings and errors in the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012\012  jobject o = env_-&gt;NewGlobalRef(s);\012  ASSERT_NE(o, nullptr);\012  env_-&gt;DeleteGlobalRef(o);\012\012 // Currently, deleting an already-deleted reference is just a CheckJNI warning.\012 {\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      env_-&gt;DeleteGlobalRef(o);\012 }\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012    env_-&gt;DeleteGlobalRef(o);\012    std::string expected(StringPrintf(&quot;use of deleted global reference %p&quot;, o));\012    check_jni_abort_catcher.Check(expected.c_str());\012    EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012 }\012\012  jobject o1 = env_-&gt;NewGlobalRef(s);\012  ASSERT_NE(o1, nullptr);\012  jobject o2 = env_-&gt;NewGlobalRef(s);\012  ASSERT_NE(o2, nullptr);\012\012  env_-&gt;DeleteGlobalRef(o1);\012  env_-&gt;DeleteGlobalRef(o2);\012},TEST_F(JniInternalTest, DeleteGlobalRef) {\012 // This tests leads to warnings and errors in the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012\012  jobject o = env_-&gt;NewGlobalRef(s);\012  ASSERT_NE(o, nullptr);\012  env_-&gt;DeleteGlobalRef(o);\012\012 // Currently, deleting an already-deleted reference is just a CheckJNI warning.\012 {\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      env_-&gt;DeleteGlobalRef(o);\012 }\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012    env_-&gt;DeleteGlobalRef(o);\012    std::string expected(StringPrintf(&quot;use of deleted global reference %p&quot;, o));\012    check_jni_abort_catcher.Check(expected.c_str());\012    EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012 }\012\012  jobject o1 = env_-&gt;NewGlobalRef(s);\012  ASSERT_NE(o1, nullptr);\012  jobject o2 = env_-&gt;NewGlobalRef(s);\012  ASSERT_NE(o2, nullptr);\012\012  env_-&gt;DeleteGlobalRef(o1);\012  env_-&gt;DeleteGlobalRef(o2);\012})<SUB>2233</SUB>> ]
-"17331" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewWeakGlobalRef_nullptr) {\012  EXPECT_EQ(env_-&gt;NewWeakGlobalRef(nullptr), nullptr);\012},TEST_F(JniInternalTest, NewWeakGlobalRef_nullptr) {\012  EXPECT_EQ(env_-&gt;NewWeakGlobalRef(nullptr), nullptr);\012})<SUB>2268</SUB>> ]
-"17332" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewWeakGlobalRef) {\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  jobject o = env_-&gt;NewWeakGlobalRef(s);\012  EXPECT_NE(o, nullptr);\012  EXPECT_NE(o, s);\012\012  EXPECT_EQ(env_-&gt;GetObjectRefType(o), JNIWeakGlobalRefType);\012},TEST_F(JniInternalTest, NewWeakGlobalRef) {\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  jobject o = env_-&gt;NewWeakGlobalRef(s);\012  EXPECT_NE(o, nullptr);\012  EXPECT_NE(o, s);\012\012  EXPECT_EQ(env_-&gt;GetObjectRefType(o), JNIWeakGlobalRefType);\012})<SUB>2272</SUB>> ]
-"17333" [label = <(UNKNOWN,TEST_F(JniInternalTest, DeleteWeakGlobalRef_nullptr) {\012  env_-&gt;DeleteWeakGlobalRef(nullptr);\012},TEST_F(JniInternalTest, DeleteWeakGlobalRef_nullptr) {\012  env_-&gt;DeleteWeakGlobalRef(nullptr);\012})<SUB>2282</SUB>> ]
-"17334" [label = <(UNKNOWN,TEST_F(JniInternalTest, DeleteWeakGlobalRef) {\012 // This tests leads to warnings and errors in the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012\012  jobject o = env_-&gt;NewWeakGlobalRef(s);\012  ASSERT_NE(o, nullptr);\012  env_-&gt;DeleteWeakGlobalRef(o);\012\012 // Currently, deleting an already-deleted reference is just a CheckJNI warning.\012 {\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      env_-&gt;DeleteWeakGlobalRef(o);\012 }\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012    env_-&gt;DeleteWeakGlobalRef(o);\012    std::string expected(StringPrintf(&quot;use of deleted weak global reference %p&quot;, o));\012    check_jni_abort_catcher.Check(expected.c_str());\012    EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012 }\012\012  jobject o1 = env_-&gt;NewWeakGlobalRef(s);\012  ASSERT_NE(o1, nullptr);\012  jobject o2 = env_-&gt;NewWeakGlobalRef(s);\012  ASSERT_NE(o2, nullptr);\012\012  env_-&gt;DeleteWeakGlobalRef(o1);\012  env_-&gt;DeleteWeakGlobalRef(o2);\012},TEST_F(JniInternalTest, DeleteWeakGlobalRef) {\012 // This tests leads to warnings and errors in the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012\012  jobject o = env_-&gt;NewWeakGlobalRef(s);\012  ASSERT_NE(o, nullptr);\012  env_-&gt;DeleteWeakGlobalRef(o);\012\012 // Currently, deleting an already-deleted reference is just a CheckJNI warning.\012 {\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      env_-&gt;DeleteWeakGlobalRef(o);\012 }\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012    env_-&gt;DeleteWeakGlobalRef(o);\012    std::string expected(StringPrintf(&quot;use of deleted weak global reference %p&quot;, o));\012    check_jni_abort_catcher.Check(expected.c_str());\012    EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012 }\012\012  jobject o1 = env_-&gt;NewWeakGlobalRef(s);\012  ASSERT_NE(o1, nullptr);\012  jobject o2 = env_-&gt;NewWeakGlobalRef(s);\012  ASSERT_NE(o2, nullptr);\012\012  env_-&gt;DeleteWeakGlobalRef(o1);\012  env_-&gt;DeleteWeakGlobalRef(o2);\012})<SUB>2286</SUB>> ]
-"17335" [label = <(UNKNOWN,TEST_F(JniInternalTest, ExceptionDescribe) {\012 // This checks how ExceptionDescribe handles call without exception.\012  env_-&gt;ExceptionClear();\012  env_-&gt;ExceptionDescribe();\012},TEST_F(JniInternalTest, ExceptionDescribe) {\012 // This checks how ExceptionDescribe handles call without exception.\012  env_-&gt;ExceptionClear();\012  env_-&gt;ExceptionDescribe();\012})<SUB>2321</SUB>> ]
-"17336" [label = <(UNKNOWN,TEST_F(JniInternalTest, Throw) {\012  jclass exception_class = env_-&gt;FindClass(&quot;java/lang/RuntimeException&quot;);\012  ASSERT_TRUE(exception_class != nullptr);\012  jthrowable exception = reinterpret_cast&lt;jthrowable&gt;(env_-&gt;AllocObject(exception_class));\012  ASSERT_TRUE(exception != nullptr);\012\012  EXPECT_EQ(JNI_OK, env_-&gt;Throw(exception));\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  jthrowable thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsSameObject(exception, thrown_exception));\012\012 // Bad argument.\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(JNI_ERR, env_-&gt;Throw(nullptr));\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  EXPECT_EQ(JNI_ERR, env_-&gt;Throw(nullptr));\012  check_jni_abort_catcher.Check(&quot;Throw received NULL jthrowable&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012},TEST_F(JniInternalTest, Throw) {\012  jclass exception_class = env_-&gt;FindClass(&quot;java/lang/RuntimeException&quot;);\012  ASSERT_TRUE(exception_class != nullptr);\012  jthrowable exception = reinterpret_cast&lt;jthrowable&gt;(env_-&gt;AllocObject(exception_class));\012  ASSERT_TRUE(exception != nullptr);\012\012  EXPECT_EQ(JNI_OK, env_-&gt;Throw(exception));\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  jthrowable thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsSameObject(exception, thrown_exception));\012\012 // Bad argument.\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(JNI_ERR, env_-&gt;Throw(nullptr));\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  EXPECT_EQ(JNI_ERR, env_-&gt;Throw(nullptr));\012  check_jni_abort_catcher.Check(&quot;Throw received NULL jthrowable&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012})<SUB>2327</SUB>> ]
-"17337" [label = <(UNKNOWN,TEST_F(JniInternalTest, ThrowNew) {\012  jclass exception_class = env_-&gt;FindClass(&quot;java/lang/RuntimeException&quot;);\012  ASSERT_TRUE(exception_class != nullptr);\012\012  jthrowable thrown_exception;\012\012  EXPECT_EQ(JNI_OK, env_-&gt;ThrowNew(exception_class, &quot;hello world&quot;));\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(thrown_exception, exception_class));\012\012  EXPECT_EQ(JNI_OK, env_-&gt;ThrowNew(exception_class, nullptr));\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(thrown_exception, exception_class));\012\012 // Bad argument.\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  EXPECT_EQ(JNI_ERR, env_-&gt;ThrowNew(nullptr, nullptr));\012  check_jni_abort_catcher.Check(&quot;c == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(JNI_ERR, env_-&gt;ThrowNew(nullptr, nullptr));\012  check_jni_abort_catcher.Check(&quot;ThrowNew received NULL jclass&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012},TEST_F(JniInternalTest, ThrowNew) {\012  jclass exception_class = env_-&gt;FindClass(&quot;java/lang/RuntimeException&quot;);\012  ASSERT_TRUE(exception_class != nullptr);\012\012  jthrowable thrown_exception;\012\012  EXPECT_EQ(JNI_OK, env_-&gt;ThrowNew(exception_class, &quot;hello world&quot;));\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(thrown_exception, exception_class));\012\012  EXPECT_EQ(JNI_OK, env_-&gt;ThrowNew(exception_class, nullptr));\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(thrown_exception, exception_class));\012\012 // Bad argument.\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  EXPECT_EQ(JNI_ERR, env_-&gt;ThrowNew(nullptr, nullptr));\012  check_jni_abort_catcher.Check(&quot;c == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(JNI_ERR, env_-&gt;ThrowNew(nullptr, nullptr));\012  check_jni_abort_catcher.Check(&quot;ThrowNew received NULL jclass&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012})<SUB>2349</SUB>> ]
-"17338" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewDirectBuffer_GetDirectBufferAddress_GetDirectBufferCapacity) {\012 // Start runtime.\012 Thread* self = Thread::Current();\012  self-&gt;TransitionFromSuspendedToRunnable();\012 MakeExecutable(nullptr, &quot;java.lang.Class&quot;);\012 MakeExecutable(nullptr, &quot;java.lang.Object&quot;);\012 MakeExecutable(nullptr, &quot;java.nio.DirectByteBuffer&quot;);\012 MakeExecutable(nullptr, &quot;java.nio.Bits&quot;);\012 MakeExecutable(nullptr, &quot;java.nio.MappedByteBuffer&quot;);\012 MakeExecutable(nullptr, &quot;java.nio.ByteBuffer&quot;);\012 MakeExecutable(nullptr, &quot;java.nio.Buffer&quot;);\012 // TODO: we only load a dex file here as starting the runtime relies upon it.\012 const char* class_name = &quot;StaticLeafMethods&quot;;\012 LoadDex(class_name);\012 bool started = runtime_-&gt;Start();\012  ASSERT_TRUE(started);\012\012  jclass buffer_class = env_-&gt;FindClass(&quot;java/nio/Buffer&quot;);\012  ASSERT_NE(buffer_class, nullptr);\012\012 char bytes[1024];\012  jobject buffer = env_-&gt;NewDirectByteBuffer(bytes, sizeof(bytes));\012  ASSERT_NE(buffer, nullptr);\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(buffer, buffer_class));\012  ASSERT_EQ(env_-&gt;GetDirectBufferAddress(buffer), bytes);\012  ASSERT_EQ(env_-&gt;GetDirectBufferCapacity(buffer), static_cast&lt;jlong&gt;(sizeof(bytes)));\012\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    env_-&gt;NewDirectByteBuffer(bytes, static_cast&lt;jlong&gt;(INT_MAX) + 1);\012    check_jni_abort_catcher.Check(&quot;in call to NewDirectByteBuffer&quot;);\012 }\012},TEST_F(JniInternalTest, NewDirectBuffer_GetDirectBufferAddress_GetDirectBufferCapacity) {\012 // Start runtime.\012 Thread* self = Thread::Current();\012  self-&gt;TransitionFromSuspendedToRunnable();\012 MakeExecutable(nullptr, &quot;java.lang.Class&quot;);\012 MakeExecutable(nullptr, &quot;java.lang.Object&quot;);\012 MakeExecutable(nullptr, &quot;java.nio.DirectByteBuffer&quot;);\012 MakeExecutable(nullptr, &quot;java.nio.Bits&quot;);\012 MakeExecutable(nullptr, &quot;java.nio.MappedByteBuffer&quot;);\012 MakeExecutable(nullptr, &quot;java.nio.ByteBuffer&quot;);\012 MakeExecutable(nullptr, &quot;java.nio.Buffer&quot;);\012 // TODO: we only load a dex file here as starting the runtime relies upon it.\012 const char* class_name = &quot;StaticLeafMethods&quot;;\012 LoadDex(class_name);\012 bool started = runtime_-&gt;Start();\012  ASSERT_TRUE(started);\012\012  jclass buffer_class = env_-&gt;FindClass(&quot;java/nio/Buffer&quot;);\012  ASSERT_NE(buffer_class, nullptr);\012\012 char bytes[1024];\012  jobject buffer = env_-&gt;NewDirectByteBuffer(bytes, sizeof(bytes));\012  ASSERT_NE(buffer, nullptr);\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(buffer, buffer_class));\012  ASSERT_EQ(env_-&gt;GetDirectBufferAddress(buffer), bytes);\012  ASSERT_EQ(env_-&gt;GetDirectBufferCapacity(buffer), static_cast&lt;jlong&gt;(sizeof(bytes)));\012\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    env_-&gt;NewDirectByteBuffer(bytes, static_cast&lt;jlong&gt;(INT_MAX) + 1);\012    check_jni_abort_catcher.Check(&quot;in call to NewDirectByteBuffer&quot;);\012 }\012})<SUB>2378</SUB>> ]
-"17339" [label = <(UNKNOWN,TEST_F(JniInternalTest, MonitorEnterExit) {\012 // This will print some error messages. Suppress.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012 // Create an object to torture.\012  jclass object_class = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_NE(object_class, nullptr);\012  jobject object = env_-&gt;AllocObject(object_class);\012  ASSERT_NE(object, nullptr);\012\012 // Expected class of exceptions\012  jclass imse_class = env_-&gt;FindClass(&quot;java/lang/IllegalMonitorStateException&quot;);\012  ASSERT_NE(imse_class, nullptr);\012\012  jthrowable thrown_exception;\012\012 // Unlock of unowned monitor\012  env_-&gt;MonitorExit(object);\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(thrown_exception, imse_class));\012\012 // Lock of unowned monitor\012  env_-&gt;MonitorEnter(object);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012 // Regular unlock\012  env_-&gt;MonitorExit(object);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Recursively lock a lot\012 size_t max_recursive_lock = 1024;\012 for (size_t i = 0; i &lt; max_recursive_lock; i++) {\012    env_-&gt;MonitorEnter(object);\012    EXPECT_FALSE(env_-&gt;ExceptionCheck());\012 }\012 // Recursively unlock a lot\012 for (size_t i = 0; i &lt; max_recursive_lock; i++) {\012    env_-&gt;MonitorExit(object);\012    EXPECT_FALSE(env_-&gt;ExceptionCheck());\012 }\012\012 // Unlock of unowned monitor\012  env_-&gt;MonitorExit(object);\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(thrown_exception, imse_class));\012\012 // It's an error to call MonitorEnter or MonitorExit on null.\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    env_-&gt;MonitorEnter(nullptr);\012    check_jni_abort_catcher.Check(&quot;in call to MonitorEnter&quot;);\012    env_-&gt;MonitorExit(nullptr);\012    check_jni_abort_catcher.Check(&quot;in call to MonitorExit&quot;);\012 }\012},TEST_F(JniInternalTest, MonitorEnterExit) {\012 // This will print some error messages. Suppress.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012 // Create an object to torture.\012  jclass object_class = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_NE(object_class, nullptr);\012  jobject object = env_-&gt;AllocObject(object_class);\012  ASSERT_NE(object, nullptr);\012\012 // Expected class of exceptions\012  jclass imse_class = env_-&gt;FindClass(&quot;java/lang/IllegalMonitorStateException&quot;);\012  ASSERT_NE(imse_class, nullptr);\012\012  jthrowable thrown_exception;\012\012 // Unlock of unowned monitor\012  env_-&gt;MonitorExit(object);\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(thrown_exception, imse_class));\012\012 // Lock of unowned monitor\012  env_-&gt;MonitorEnter(object);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012 // Regular unlock\012  env_-&gt;MonitorExit(object);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Recursively lock a lot\012 size_t max_recursive_lock = 1024;\012 for (size_t i = 0; i &lt; max_recursive_lock; i++) {\012    env_-&gt;MonitorEnter(object);\012    EXPECT_FALSE(env_-&gt;ExceptionCheck());\012 }\012 // Recursively unlock a lot\012 for (size_t i = 0; i &lt; max_recursive_lock; i++) {\012    env_-&gt;MonitorExit(object);\012    EXPECT_FALSE(env_-&gt;ExceptionCheck());\012 }\012\012 // Unlock of unowned monitor\012  env_-&gt;MonitorExit(object);\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(thrown_exception, imse_class));\012\012 // It's an error to call MonitorEnter or MonitorExit on null.\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    env_-&gt;MonitorEnter(nullptr);\012    check_jni_abort_catcher.Check(&quot;in call to MonitorEnter&quot;);\012    env_-&gt;MonitorExit(nullptr);\012    check_jni_abort_catcher.Check(&quot;in call to MonitorExit&quot;);\012 }\012})<SUB>2412</SUB>> ]
-"17351" [label = <(UNKNOWN,TEST_F(JniInternalTest, MonitorExitLockedInDifferentCall) {\012 SetUpForTest(false, &quot;foo&quot;, &quot;()V&quot;, reinterpret_cast&lt;void*&gt;(&amp;Java_MyClassNatives_foo_exit));\012  ASSERT_NE(jobj_, nullptr);\012\012  env_-&gt;MonitorEnter(jobj_);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  env_-&gt;CallNonvirtualVoidMethod(jobj_, jklass_, jmethod_);\012  check_jni_abort_catcher.Check(&quot;Unlocking monitor that wasn't locked here&quot;);\012},TEST_F(JniInternalTest, MonitorExitLockedInDifferentCall) {\012 SetUpForTest(false, &quot;foo&quot;, &quot;()V&quot;, reinterpret_cast&lt;void*&gt;(&amp;Java_MyClassNatives_foo_exit));\012  ASSERT_NE(jobj_, nullptr);\012\012  env_-&gt;MonitorEnter(jobj_);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  env_-&gt;CallNonvirtualVoidMethod(jobj_, jklass_, jmethod_);\012  check_jni_abort_catcher.Check(&quot;Unlocking monitor that wasn't locked here&quot;);\012})<SUB>2476</SUB>> ]
-"17363" [label = <(UNKNOWN,TEST_F(JniInternalTest, MonitorExitNotAllUnlocked) {\012 SetUpForTest(false,\012 &quot;foo&quot;,\012 &quot;()V&quot;,\012 reinterpret_cast&lt;void*&gt;(&amp;Java_MyClassNatives_foo_enter_no_exit));\012  ASSERT_NE(jobj_, nullptr);\012\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  env_-&gt;CallNonvirtualVoidMethod(jobj_, jklass_, jmethod_);\012  check_jni_abort_catcher.Check(&quot;Still holding a locked object on JNI end&quot;);\012},TEST_F(JniInternalTest, MonitorExitNotAllUnlocked) {\012 SetUpForTest(false,\012 &quot;foo&quot;,\012 &quot;()V&quot;,\012 reinterpret_cast&lt;void*&gt;(&amp;Java_MyClassNatives_foo_enter_no_exit));\012  ASSERT_NE(jobj_, nullptr);\012\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  env_-&gt;CallNonvirtualVoidMethod(jobj_, jklass_, jmethod_);\012  check_jni_abort_catcher.Check(&quot;Still holding a locked object on JNI end&quot;);\012})<SUB>2493</SUB>> ]
-"17435" [label = <(UNKNOWN,TEST_F(JniInternalTest, DetachThreadUnlockJNIMonitors) {\012 // We need to lock an object, detach, reattach, and check the locks.\012 //\012 // As re-attaching will create a different thread, we need to use a global\012 // ref to keep the object around.\012\012 // Create an object to torture.\012  jobject global_ref;\012 {\012    jclass object_class = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012    ASSERT_NE(object_class, nullptr);\012    jobject object = env_-&gt;AllocObject(object_class);\012    ASSERT_NE(object, nullptr);\012    global_ref = env_-&gt;NewGlobalRef(object);\012 }\012\012 // Lock it.\012  env_-&gt;MonitorEnter(global_ref);\012  ASSERT_TRUE(IsLocked(env_, global_ref));\012\012 // Detach and re-attach.\012  jint detach_result = vm_-&gt;DetachCurrentThread();\012  ASSERT_EQ(detach_result, JNI_OK);\012  jint attach_result = vm_-&gt;AttachCurrentThread(&amp;env_, nullptr);\012  ASSERT_EQ(attach_result, JNI_OK);\012\012 // Look at the global ref, check whether it's still locked.\012  ASSERT_FALSE(IsLocked(env_, global_ref));\012\012 // Delete the global ref.\012  env_-&gt;DeleteGlobalRef(global_ref);\012},TEST_F(JniInternalTest, DetachThreadUnlockJNIMonitors) {\012 // We need to lock an object, detach, reattach, and check the locks.\012 //\012 // As re-attaching will create a different thread, we need to use a global\012 // ref to keep the object around.\012\012 // Create an object to torture.\012  jobject global_ref;\012 {\012    jclass object_class = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012    ASSERT_NE(object_class, nullptr);\012    jobject object = env_-&gt;AllocObject(object_class);\012    ASSERT_NE(object, nullptr);\012    global_ref = env_-&gt;NewGlobalRef(object);\012 }\012\012 // Lock it.\012  env_-&gt;MonitorEnter(global_ref);\012  ASSERT_TRUE(IsLocked(env_, global_ref));\012\012 // Detach and re-attach.\012  jint detach_result = vm_-&gt;DetachCurrentThread();\012  ASSERT_EQ(detach_result, JNI_OK);\012  jint attach_result = vm_-&gt;AttachCurrentThread(&amp;env_, nullptr);\012  ASSERT_EQ(attach_result, JNI_OK);\012\012 // Look at the global ref, check whether it's still locked.\012  ASSERT_FALSE(IsLocked(env_, global_ref));\012\012 // Delete the global ref.\012  env_-&gt;DeleteGlobalRef(global_ref);\012})<SUB>2523</SUB>> ]
-"17436" [label = <(UNKNOWN,TEST_F(JniInternalTest, IndirectReferenceTableOffsets) {\012 // The segment_state_ field is private, and we want to avoid friend declaration. So we'll check\012 // by modifying memory.\012 // The parameters don't really matter here.\012  std::string error_msg;\012 IndirectReferenceTable irt(5,\012 IndirectRefKind::kGlobal,\012 IndirectReferenceTable::ResizableCapacity::kNo,\012 &amp;error_msg);\012  ASSERT_TRUE(irt.IsValid()) &lt;&lt; error_msg;\012 IRTSegmentState old_state = irt.GetSegmentState();\012\012 // Write some new state directly. We invert parts of old_state to ensure a new value.\012 IRTSegmentState new_state;\012  new_state.top_index = old_state.top_index ^ 0x07705005;\012  ASSERT_NE(old_state.top_index, new_state.top_index);\012\012 uint8_t* base = reinterpret_cast&lt;uint8_t*&gt;(&amp;irt);\012 int32_t segment_state_offset =\012 IndirectReferenceTable::SegmentStateOffset(sizeof(void*)).Int32Value();\012 *reinterpret_cast&lt;IRTSegmentState*&gt;(base + segment_state_offset) = new_state;\012\012 // Read and compare.\012  EXPECT_EQ(new_state.top_index, irt.GetSegmentState().top_index);\012},TEST_F(JniInternalTest, IndirectReferenceTableOffsets) {\012 // The segment_state_ field is private, and we want to avoid friend declaration. So we'll check\012 // by modifying memory.\012 // The parameters don't really matter here.\012  std::string error_msg;\012 IndirectReferenceTable irt(5,\012 IndirectRefKind::kGlobal,\012 IndirectReferenceTable::ResizableCapacity::kNo,\012 &amp;error_msg);\012  ASSERT_TRUE(irt.IsValid()) &lt;&lt; error_msg;\012 IRTSegmentState old_state = irt.GetSegmentState();\012\012 // Write some new state directly. We invert parts of old_state to ensure a new value.\012 IRTSegmentState new_state;\012  new_state.top_index = old_state.top_index ^ 0x07705005;\012  ASSERT_NE(old_state.top_index, new_state.top_index);\012\012 uint8_t* base = reinterpret_cast&lt;uint8_t*&gt;(&amp;irt);\012 int32_t segment_state_offset =\012 IndirectReferenceTable::SegmentStateOffset(sizeof(void*)).Int32Value();\012 *reinterpret_cast&lt;IRTSegmentState*&gt;(base + segment_state_offset) = new_state;\012\012 // Read and compare.\012  EXPECT_EQ(new_state.top_index, irt.GetSegmentState().top_index);\012})<SUB>2557</SUB>> ]
-"17437" [label = <(UNKNOWN,TEST_F(JniInternalTest, JNIEnvExtOffsets) {\012  EXPECT_EQ(OFFSETOF_MEMBER(JNIEnvExt, local_ref_cookie_),\012 JNIEnvExt::LocalRefCookieOffset(sizeof(void*)).Uint32Value());\012\012  EXPECT_EQ(OFFSETOF_MEMBER(JNIEnvExt, self_), JNIEnvExt::SelfOffset(sizeof(void*)).Uint32Value());\012\012 // segment_state_ is private in the IndirectReferenceTable. So this test isn't as good as we'd\012 // hope it to be.\012 uint32_t segment_state_now =\012      OFFSETOF_MEMBER(JNIEnvExt, locals_) +\012 IndirectReferenceTable::SegmentStateOffset(sizeof(void*)).Uint32Value();\012 uint32_t segment_state_computed = JNIEnvExt::SegmentStateOffset(sizeof(void*)).Uint32Value();\012  EXPECT_EQ(segment_state_now, segment_state_computed);\012},TEST_F(JniInternalTest, JNIEnvExtOffsets) {\012  EXPECT_EQ(OFFSETOF_MEMBER(JNIEnvExt, local_ref_cookie_),\012 JNIEnvExt::LocalRefCookieOffset(sizeof(void*)).Uint32Value());\012\012  EXPECT_EQ(OFFSETOF_MEMBER(JNIEnvExt, self_), JNIEnvExt::SelfOffset(sizeof(void*)).Uint32Value());\012\012 // segment_state_ is private in the IndirectReferenceTable. So this test isn't as good as we'd\012 // hope it to be.\012 uint32_t segment_state_now =\012      OFFSETOF_MEMBER(JNIEnvExt, locals_) +\012 IndirectReferenceTable::SegmentStateOffset(sizeof(void*)).Uint32Value();\012 uint32_t segment_state_computed = JNIEnvExt::SegmentStateOffset(sizeof(void*)).Uint32Value();\012  EXPECT_EQ(segment_state_now, segment_state_computed);\012})<SUB>2584</SUB>> ]
-"17439" [label = <(&lt;operator&gt;.assignment,gGlobalRefCount = 0)<SUB>2599</SUB>> ]
-"17443" [label = <(&lt;operator&gt;.assignment,* gOriginalEnv = nullptr)<SUB>2600</SUB>> ]
-"17461" [label = <(UNKNOWN,TEST_F(JniInternalTest, JNIEnvExtTableOverride) {\012 JNINativeInterface env_override;\012  memcpy(&amp;env_override, env_-&gt;functions, sizeof(JNINativeInterface));\012\012  gOriginalEnv = env_-&gt;functions;\012  env_override.NewGlobalRef = CountNewGlobalRef;\012  gGlobalRefCount = 0;\012\012  jclass local = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_TRUE(local != nullptr);\012\012 // Set the table, add a global ref, see whether the counter increases.\012 JNIEnvExt::SetTableOverride(&amp;env_override);\012\012  jobject global = env_-&gt;NewGlobalRef(local);\012  EXPECT_EQ(1u, gGlobalRefCount);\012  env_-&gt;DeleteGlobalRef(global);\012\012 // Reset\012 JNIEnvExt::SetTableOverride(nullptr);\012\012  jobject global2 = env_-&gt;NewGlobalRef(local);\012  EXPECT_EQ(1u, gGlobalRefCount);\012  env_-&gt;DeleteGlobalRef(global2);\012},TEST_F(JniInternalTest, JNIEnvExtTableOverride) {\012 JNINativeInterface env_override;\012  memcpy(&amp;env_override, env_-&gt;functions, sizeof(JNINativeInterface));\012\012  gOriginalEnv = env_-&gt;functions;\012  env_override.NewGlobalRef = CountNewGlobalRef;\012  gGlobalRefCount = 0;\012\012  jclass local = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_TRUE(local != nullptr);\012\012 // Set the table, add a global ref, see whether the counter increases.\012 JNIEnvExt::SetTableOverride(&amp;env_override);\012\012  jobject global = env_-&gt;NewGlobalRef(local);\012  EXPECT_EQ(1u, gGlobalRefCount);\012  env_-&gt;DeleteGlobalRef(global);\012\012 // Reset\012 JNIEnvExt::SetTableOverride(nullptr);\012\012  jobject global2 = env_-&gt;NewGlobalRef(local);\012  EXPECT_EQ(1u, gGlobalRefCount);\012  env_-&gt;DeleteGlobalRef(global2);\012})<SUB>2608</SUB>> ]
-"17462" [label = <(UNKNOWN,TEST_F(JniInternalTest, NonAttachedThread) {\012 // This tests leads to warnings and errors in the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012 CheckJniAbortCatcher check_jni_abort_catcher;\012\012 auto callee = [](void* env_ptr) -&gt; void* {\012 JNIEnv* env = reinterpret_cast&lt;JNIEnv*&gt;(env_ptr);\012    env-&gt;NewStringUTF(&quot;test&quot;);\012 return nullptr;\012 };\012\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  vm_-&gt;SetCheckJniEnabled(true);\012 {\012 pthread_t pthread;\012 int pthread_create_result = pthread_create(&amp;pthread,\012 /* pthread_attr */ nullptr,\012                                               callee,\012 reinterpret_cast&lt;void*&gt;(env_));\012    CHECK_EQ(pthread_create_result, 0);\012 int pthread_join_result = pthread_join(pthread, /* thread_return */ nullptr);\012    CHECK_EQ(pthread_join_result, 0);\012 }\012  vm_-&gt;SetCheckJniEnabled(old_check_jni);\012\012  check_jni_abort_catcher.Check(&quot;is making JNI calls without being attached&quot;);\012},TEST_F(JniInternalTest, NonAttachedThread) {\012 // This tests leads to warnings and errors in the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012 CheckJniAbortCatcher check_jni_abort_catcher;\012\012 auto callee = [](void* env_ptr) -&gt; void* {\012 JNIEnv* env = reinterpret_cast&lt;JNIEnv*&gt;(env_ptr);\012    env-&gt;NewStringUTF(&quot;test&quot;);\012 return nullptr;\012 };\012\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  vm_-&gt;SetCheckJniEnabled(true);\012 {\012 pthread_t pthread;\012 int pthread_create_result = pthread_create(&amp;pthread,\012 /* pthread_attr */ nullptr,\012                                               callee,\012 reinterpret_cast&lt;void*&gt;(env_));\012    CHECK_EQ(pthread_create_result, 0);\012 int pthread_join_result = pthread_join(pthread, /* thread_return */ nullptr);\012    CHECK_EQ(pthread_join_result, 0);\012 }\012  vm_-&gt;SetCheckJniEnabled(old_check_jni);\012\012  check_jni_abort_catcher.Check(&quot;is making JNI calls without being attached&quot;);\012})<SUB>2634</SUB>> ]
-"14789" [label = <(METHOD,&lt;global&gt;)<SUB>1</SUB>> ]
-"17463" [label = <(METHOD_RETURN,ANY)<SUB>1</SUB>> ]
-  "17245" -> "17246" 
-  "17246" -> "17247" 
-  "17247" -> "17248" 
-  "17248" -> "17249" 
-  "17249" -> "17250" 
-  "17250" -> "17251" 
-  "17251" -> "17252" 
-  "17252" -> "17253" 
-  "17253" -> "17254" 
-  "17254" -> "17273" 
-  "17273" -> "17274" 
-  "17274" -> "17279" 
-  "17279" -> "17280" 
-  "17280" -> "17281" 
-  "17281" -> "17282" 
-  "17282" -> "17283" 
-  "17283" -> "17284" 
-  "17284" -> "17285" 
-  "17285" -> "17286" 
-  "17286" -> "17287" 
-  "17287" -> "17288" 
-  "17288" -> "17289" 
-  "17289" -> "17290" 
-  "17290" -> "17291" 
-  "17291" -> "17292" 
-  "17292" -> "17293" 
-  "17293" -> "17294" 
-  "17294" -> "17295" 
-  "17295" -> "17296" 
-  "17296" -> "17297" 
-  "17297" -> "17298" 
-  "17298" -> "17299" 
-  "17299" -> "17300" 
-  "17300" -> "17301" 
-  "17301" -> "17302" 
-  "17302" -> "17303" 
-  "17303" -> "17304" 
-  "17304" -> "17305" 
-  "17305" -> "17306" 
-  "17306" -> "17307" 
-  "17307" -> "17308" 
-  "17308" -> "17309" 
-  "17309" -> "17310" 
-  "17310" -> "17311" 
-  "17311" -> "17312" 
-  "17312" -> "17313" 
-  "17313" -> "17314" 
-  "17314" -> "17315" 
-  "17315" -> "17316" 
-  "17316" -> "17317" 
-  "17317" -> "17318" 
-  "17318" -> "17319" 
-  "17319" -> "17320" 
-  "17320" -> "17321" 
-  "17321" -> "17322" 
-  "17322" -> "17323" 
-  "17323" -> "17324" 
-  "17324" -> "17325" 
-  "17325" -> "17326" 
-  "17326" -> "17327" 
-  "17327" -> "17328" 
-  "17328" -> "17329" 
-  "17329" -> "17330" 
-  "17330" -> "17331" 
-  "17331" -> "17332" 
-  "17332" -> "17333" 
-  "17333" -> "17334" 
-  "17334" -> "17335" 
-  "17335" -> "17336" 
-  "17336" -> "17337" 
-  "17337" -> "17338" 
-  "17338" -> "17339" 
-  "17339" -> "17351" 
-  "17351" -> "17363" 
-  "17363" -> "17435" 
-  "17435" -> "17436" 
-  "17436" -> "17437" 
-  "17437" -> "17439" 
-  "17439" -> "17443" 
-  "17443" -> "17461" 
-  "17461" -> "17462" 
-  "17462" -> "17463" 
-  "14789" -> "17245" 
+digraph "TearDown" {  
+"14641" [label = <(METHOD,TearDown)<SUB>87</SUB>> ]
+"14643" [label = <(METHOD_RETURN,void)<SUB>87</SUB>> ]
+  "14641" -> "14643" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/266-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/266-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/266-cfg.dot	2023-06-07 19:33:45.527394676 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/266-cfg.dot	2023-06-07 19:33:52.097393976 +0330
@@ -1,153 +1,29 @@
-digraph "SetUp" {  
-"14795" [label = <(CommonCompilerTest::SetUp,CommonCompilerTest::SetUp())<SUB>39</SUB>> ]
-"14799" [label = <(&lt;operator&gt;.assignment,vm_ = Runtime::Current()-&gt;GetJavaVM())<SUB>41</SUB>> ]
-"14808" [label = <(AttachCurrentThread,vm_-&gt;AttachCurrentThread(&amp;env_, nullptr))<SUB>46</SUB>> ]
-"14815" [label = <(&lt;operator&gt;.greaterThan,ScopedLocalRef&lt;jclass&gt; aioobe(env_,\012                                  env_-&gt;FindClass(&quot;java/lang/ArrayIndexOutOfBoundsException&quot;)))<SUB>48</SUB>> ]
-"14826" [label = <(CHECK,CHECK(aioobe.get() != nullptr))<SUB>50</SUB>> ]
-"14833" [label = <(&lt;operator&gt;.assignment,aioobe_ = reinterpret_cast&lt;jclass&gt;(env_-&gt;NewGlobalRef(aioobe.get())))<SUB>51</SUB>> ]
-"14845" [label = <(&lt;operator&gt;.greaterThan,ScopedLocalRef&lt;jclass&gt; ase(env_, env_-&gt;FindClass(&quot;java/lang/ArrayStoreException&quot;)))<SUB>53</SUB>> ]
-"14856" [label = <(CHECK,CHECK(ase.get() != nullptr))<SUB>54</SUB>> ]
-"14863" [label = <(&lt;operator&gt;.assignment,ase_ = reinterpret_cast&lt;jclass&gt;(env_-&gt;NewGlobalRef(ase.get())))<SUB>55</SUB>> ]
-"14875" [label = <(&lt;operator&gt;.greaterThan,ScopedLocalRef&lt;jclass&gt; sioobe(env_,\012                                  env_-&gt;FindClass(&quot;java/lang/StringIndexOutOfBoundsException&quot;)))<SUB>57</SUB>> ]
-"14886" [label = <(CHECK,CHECK(sioobe.get() != nullptr))<SUB>59</SUB>> ]
-"14893" [label = <(&lt;operator&gt;.assignment,sioobe_ = reinterpret_cast&lt;jclass&gt;(env_-&gt;NewGlobalRef(sioobe.get())))<SUB>60</SUB>> ]
-"14796" [label = <(&lt;operator&gt;.fieldAccess,CommonCompilerTest::SetUp)<SUB>39</SUB>> ]
-"14801" [label = <(GetJavaVM,Runtime::Current()-&gt;GetJavaVM())<SUB>41</SUB>> ]
-"14809" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;AttachCurrentThread)<SUB>46</SUB>> ]
-"14812" [label = <(&lt;operator&gt;.addressOf,&amp;env_)<SUB>46</SUB>> ]
-"14816" [label = <(&lt;operator&gt;.lessThan,ScopedLocalRef&lt;jclass)<SUB>48</SUB>> ]
-"14819" [label = <(aioobe,aioobe(env_,\012                                  env_-&gt;FindClass(&quot;java/lang/ArrayIndexOutOfBoundsException&quot;)))<SUB>48</SUB>> ]
-"14827" [label = <(&lt;operator&gt;.notEquals,aioobe.get() != nullptr)<SUB>50</SUB>> ]
-"14835" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jclass&gt;(env_-&gt;NewGlobalRef(aioobe.get())))<SUB>51</SUB>> ]
-"14846" [label = <(&lt;operator&gt;.lessThan,ScopedLocalRef&lt;jclass)<SUB>53</SUB>> ]
-"14849" [label = <(ase,ase(env_, env_-&gt;FindClass(&quot;java/lang/ArrayStoreException&quot;)))<SUB>53</SUB>> ]
-"14857" [label = <(&lt;operator&gt;.notEquals,ase.get() != nullptr)<SUB>54</SUB>> ]
-"14865" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jclass&gt;(env_-&gt;NewGlobalRef(ase.get())))<SUB>55</SUB>> ]
-"14876" [label = <(&lt;operator&gt;.lessThan,ScopedLocalRef&lt;jclass)<SUB>57</SUB>> ]
-"14879" [label = <(sioobe,sioobe(env_,\012                                  env_-&gt;FindClass(&quot;java/lang/StringIndexOutOfBoundsException&quot;)))<SUB>57</SUB>> ]
-"14887" [label = <(&lt;operator&gt;.notEquals,sioobe.get() != nullptr)<SUB>59</SUB>> ]
-"14895" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jclass&gt;(env_-&gt;NewGlobalRef(sioobe.get())))<SUB>60</SUB>> ]
-"14798" [label = <(FIELD_IDENTIFIER,SetUp,SetUp)<SUB>39</SUB>> ]
-"14802" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetJavaVM)<SUB>41</SUB>> ]
-"14811" [label = <(FIELD_IDENTIFIER,AttachCurrentThread,AttachCurrentThread)<SUB>46</SUB>> ]
-"14821" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/ArrayIndexOutOfBoundsException&quot;))<SUB>49</SUB>> ]
-"14828" [label = <(get,aioobe.get())<SUB>50</SUB>> ]
-"14836" [label = <(UNKNOWN,jclass,jclass)<SUB>51</SUB>> ]
-"14837" [label = <(NewGlobalRef,env_-&gt;NewGlobalRef(aioobe.get()))<SUB>51</SUB>> ]
-"14851" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/ArrayStoreException&quot;))<SUB>53</SUB>> ]
-"14858" [label = <(get,ase.get())<SUB>54</SUB>> ]
-"14866" [label = <(UNKNOWN,jclass,jclass)<SUB>55</SUB>> ]
-"14867" [label = <(NewGlobalRef,env_-&gt;NewGlobalRef(ase.get()))<SUB>55</SUB>> ]
-"14881" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/StringIndexOutOfBoundsException&quot;))<SUB>58</SUB>> ]
-"14888" [label = <(get,sioobe.get())<SUB>59</SUB>> ]
-"14896" [label = <(UNKNOWN,jclass,jclass)<SUB>60</SUB>> ]
-"14897" [label = <(NewGlobalRef,env_-&gt;NewGlobalRef(sioobe.get()))<SUB>60</SUB>> ]
-"14803" [label = <(Runtime::Current,Runtime::Current())<SUB>41</SUB>> ]
-"14807" [label = <(FIELD_IDENTIFIER,GetJavaVM,GetJavaVM)<SUB>41</SUB>> ]
-"14822" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>49</SUB>> ]
-"14829" [label = <(&lt;operator&gt;.fieldAccess,aioobe.get)<SUB>50</SUB>> ]
-"14838" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewGlobalRef)<SUB>51</SUB>> ]
-"14841" [label = <(get,aioobe.get())<SUB>51</SUB>> ]
-"14852" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>53</SUB>> ]
-"14859" [label = <(&lt;operator&gt;.fieldAccess,ase.get)<SUB>54</SUB>> ]
-"14868" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewGlobalRef)<SUB>55</SUB>> ]
-"14871" [label = <(get,ase.get())<SUB>55</SUB>> ]
-"14882" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>58</SUB>> ]
-"14889" [label = <(&lt;operator&gt;.fieldAccess,sioobe.get)<SUB>59</SUB>> ]
-"14898" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewGlobalRef)<SUB>60</SUB>> ]
-"14901" [label = <(get,sioobe.get())<SUB>60</SUB>> ]
-"14804" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>41</SUB>> ]
-"14824" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>49</SUB>> ]
-"14831" [label = <(FIELD_IDENTIFIER,get,get)<SUB>50</SUB>> ]
-"14840" [label = <(FIELD_IDENTIFIER,NewGlobalRef,NewGlobalRef)<SUB>51</SUB>> ]
-"14842" [label = <(&lt;operator&gt;.fieldAccess,aioobe.get)<SUB>51</SUB>> ]
-"14854" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>53</SUB>> ]
-"14861" [label = <(FIELD_IDENTIFIER,get,get)<SUB>54</SUB>> ]
-"14870" [label = <(FIELD_IDENTIFIER,NewGlobalRef,NewGlobalRef)<SUB>55</SUB>> ]
-"14872" [label = <(&lt;operator&gt;.fieldAccess,ase.get)<SUB>55</SUB>> ]
-"14884" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>58</SUB>> ]
-"14891" [label = <(FIELD_IDENTIFIER,get,get)<SUB>59</SUB>> ]
-"14900" [label = <(FIELD_IDENTIFIER,NewGlobalRef,NewGlobalRef)<SUB>60</SUB>> ]
-"14902" [label = <(&lt;operator&gt;.fieldAccess,sioobe.get)<SUB>60</SUB>> ]
-"14806" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>41</SUB>> ]
-"14844" [label = <(FIELD_IDENTIFIER,get,get)<SUB>51</SUB>> ]
-"14874" [label = <(FIELD_IDENTIFIER,get,get)<SUB>55</SUB>> ]
-"14904" [label = <(FIELD_IDENTIFIER,get,get)<SUB>60</SUB>> ]
-"14793" [label = <(METHOD,SetUp)<SUB>38</SUB>> ]
-"14905" [label = <(METHOD_RETURN,void)<SUB>38</SUB>> ]
-  "14795" -> "14806" 
-  "14799" -> "14811" 
-  "14808" -> "14816" 
-  "14815" -> "14831" 
-  "14826" -> "14836" 
-  "14833" -> "14846" 
-  "14845" -> "14861" 
-  "14856" -> "14866" 
-  "14863" -> "14876" 
-  "14875" -> "14891" 
-  "14886" -> "14896" 
-  "14893" -> "14905" 
-  "14796" -> "14795" 
-  "14801" -> "14799" 
-  "14809" -> "14812" 
-  "14812" -> "14808" 
-  "14816" -> "14824" 
-  "14819" -> "14815" 
-  "14827" -> "14826" 
-  "14835" -> "14833" 
-  "14846" -> "14854" 
-  "14849" -> "14845" 
-  "14857" -> "14856" 
-  "14865" -> "14863" 
-  "14876" -> "14884" 
-  "14879" -> "14875" 
-  "14887" -> "14886" 
-  "14895" -> "14893" 
-  "14798" -> "14796" 
-  "14802" -> "14801" 
-  "14811" -> "14809" 
-  "14821" -> "14819" 
-  "14828" -> "14827" 
-  "14836" -> "14840" 
-  "14837" -> "14835" 
-  "14851" -> "14849" 
-  "14858" -> "14857" 
-  "14866" -> "14870" 
-  "14867" -> "14865" 
-  "14881" -> "14879" 
-  "14888" -> "14887" 
-  "14896" -> "14900" 
-  "14897" -> "14895" 
-  "14803" -> "14807" 
-  "14807" -> "14802" 
-  "14822" -> "14821" 
-  "14829" -> "14828" 
-  "14838" -> "14844" 
-  "14841" -> "14837" 
-  "14852" -> "14851" 
-  "14859" -> "14858" 
-  "14868" -> "14874" 
-  "14871" -> "14867" 
-  "14882" -> "14881" 
-  "14889" -> "14888" 
-  "14898" -> "14904" 
-  "14901" -> "14897" 
-  "14804" -> "14803" 
-  "14824" -> "14822" 
-  "14831" -> "14829" 
-  "14840" -> "14838" 
-  "14842" -> "14841" 
-  "14854" -> "14852" 
-  "14861" -> "14859" 
-  "14870" -> "14868" 
-  "14872" -> "14871" 
-  "14884" -> "14882" 
-  "14891" -> "14889" 
-  "14900" -> "14898" 
-  "14902" -> "14901" 
-  "14806" -> "14804" 
-  "14844" -> "14842" 
-  "14874" -> "14872" 
-  "14904" -> "14902" 
-  "14793" -> "14798" 
+digraph "GetPrimitiveClass" {  
+"14651" [label = <(soa,soa(env_))<SUB>93</SUB>> ]
+"14654" [label = <(&lt;operator&gt;.assignment,* c = class_linker_-&gt;FindPrimitiveClass(descriptor))<SUB>94</SUB>> ]
+"14661" [label = <(CHECK,CHECK(c != nullptr))<SUB>95</SUB>> ]
+"14665" [label = <(RETURN,return soa.AddLocalReference&lt;jclass&gt;(c);,return soa.AddLocalReference&lt;jclass&gt;(c);)<SUB>96</SUB>> ]
+"14656" [label = <(FindPrimitiveClass,class_linker_-&gt;FindPrimitiveClass(descriptor))<SUB>94</SUB>> ]
+"14662" [label = <(&lt;operator&gt;.notEquals,c != nullptr)<SUB>95</SUB>> ]
+"14666" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jclass&gt;(c))<SUB>96</SUB>> ]
+"14657" [label = <(&lt;operator&gt;.indirectFieldAccess,class_linker_-&gt;FindPrimitiveClass)<SUB>94</SUB>> ]
+"14667" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jclass)<SUB>96</SUB>> ]
+"14659" [label = <(FIELD_IDENTIFIER,FindPrimitiveClass,FindPrimitiveClass)<SUB>94</SUB>> ]
+"14668" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>96</SUB>> ]
+"14670" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>96</SUB>> ]
+"14647" [label = <(METHOD,GetPrimitiveClass)<SUB>92</SUB>> ]
+"14673" [label = <(METHOD_RETURN,jclass)<SUB>92</SUB>> ]
+  "14651" -> "14659" 
+  "14654" -> "14662" 
+  "14661" -> "14670" 
+  "14665" -> "14673" 
+  "14656" -> "14654" 
+  "14662" -> "14661" 
+  "14666" -> "14665" 
+  "14657" -> "14656" 
+  "14667" -> "14666" 
+  "14659" -> "14657" 
+  "14668" -> "14667" 
+  "14670" -> "14668" 
+  "14647" -> "14651" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/267-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/267-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/267-cfg.dot	2023-06-07 19:33:45.527394676 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/267-cfg.dot	2023-06-07 19:33:52.097393976 +0330
@@ -1,61 +1,25 @@
-digraph "ExpectException" {  
-"14911" [label = <(soa,soa(env_))<SUB>64</SUB>> ]
-"14913" [label = <(&lt;operator&gt;.shiftLeft,EXPECT_TRUE(env_-&gt;ExceptionCheck())\012 &lt;&lt; mirror::Class::PrettyDescriptor(soa.Decode&lt;mirror::Class&gt;(exception_class)))<SUB>65</SUB>> ]
-"14935" [label = <(&lt;operator&gt;.assignment,exception = env_-&gt;ExceptionOccurred())<SUB>67</SUB>> ]
-"14941" [label = <(EXPECT_NE,EXPECT_NE(nullptr, exception))<SUB>68</SUB>> ]
-"14944" [label = <(ExceptionClear,env_-&gt;ExceptionClear())<SUB>69</SUB>> ]
-"14948" [label = <(EXPECT_TRUE,EXPECT_TRUE(env_-&gt;IsInstanceOf(exception, exception_class)))<SUB>70</SUB>> ]
-"14914" [label = <(EXPECT_TRUE,EXPECT_TRUE(env_-&gt;ExceptionCheck()))<SUB>65</SUB>> ]
-"14919" [label = <(mirror::Class::PrettyDescriptor,mirror::Class::PrettyDescriptor(soa.Decode&lt;mirror::Class&gt;(exception_class)))<SUB>66</SUB>> ]
-"14937" [label = <(ExceptionOccurred,env_-&gt;ExceptionOccurred())<SUB>67</SUB>> ]
-"14945" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ExceptionClear)<SUB>69</SUB>> ]
-"14949" [label = <(IsInstanceOf,env_-&gt;IsInstanceOf(exception, exception_class))<SUB>70</SUB>> ]
-"14915" [label = <(ExceptionCheck,env_-&gt;ExceptionCheck())<SUB>65</SUB>> ]
-"14920" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class::PrettyDescriptor)<SUB>66</SUB>> ]
-"14925" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(exception_class))<SUB>66</SUB>> ]
-"14938" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ExceptionOccurred)<SUB>67</SUB>> ]
-"14947" [label = <(FIELD_IDENTIFIER,ExceptionClear,ExceptionClear)<SUB>69</SUB>> ]
-"14950" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;IsInstanceOf)<SUB>70</SUB>> ]
-"14916" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ExceptionCheck)<SUB>65</SUB>> ]
-"14921" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>66</SUB>> ]
-"14924" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>66</SUB>> ]
-"14926" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>66</SUB>> ]
-"14940" [label = <(FIELD_IDENTIFIER,ExceptionOccurred,ExceptionOccurred)<SUB>67</SUB>> ]
-"14952" [label = <(FIELD_IDENTIFIER,IsInstanceOf,IsInstanceOf)<SUB>70</SUB>> ]
-"14918" [label = <(FIELD_IDENTIFIER,ExceptionCheck,ExceptionCheck)<SUB>65</SUB>> ]
-"14927" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>66</SUB>> ]
-"14930" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>66</SUB>> ]
-"14929" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>66</SUB>> ]
-"14932" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>66</SUB>> ]
-"14907" [label = <(METHOD,ExpectException)<SUB>63</SUB>> ]
-"14955" [label = <(METHOD_RETURN,void)<SUB>63</SUB>> ]
-  "14911" -> "14918" 
-  "14913" -> "14940" 
-  "14935" -> "14941" 
-  "14941" -> "14947" 
-  "14944" -> "14952" 
-  "14948" -> "14955" 
-  "14914" -> "14921" 
-  "14919" -> "14913" 
-  "14937" -> "14935" 
-  "14945" -> "14944" 
-  "14949" -> "14948" 
-  "14915" -> "14914" 
-  "14920" -> "14929" 
-  "14925" -> "14919" 
-  "14938" -> "14937" 
-  "14947" -> "14945" 
-  "14950" -> "14949" 
-  "14916" -> "14915" 
-  "14921" -> "14924" 
-  "14924" -> "14920" 
-  "14926" -> "14925" 
-  "14940" -> "14938" 
-  "14952" -> "14950" 
-  "14918" -> "14916" 
-  "14927" -> "14932" 
-  "14930" -> "14926" 
-  "14929" -> "14927" 
-  "14932" -> "14930" 
-  "14907" -> "14911" 
+digraph "ExpectClassFound" {  
+"14678" [label = <(&lt;operator&gt;.shiftLeft,EXPECT_NE(env_-&gt;FindClass(name), nullptr) &lt;&lt; name)<SUB>100</SUB>> ]
+"14687" [label = <(&lt;operator&gt;.shiftLeft,EXPECT_FALSE(env_-&gt;ExceptionCheck()) &lt;&lt; name)<SUB>101</SUB>> ]
+"14679" [label = <(EXPECT_NE,EXPECT_NE(env_-&gt;FindClass(name), nullptr))<SUB>100</SUB>> ]
+"14688" [label = <(EXPECT_FALSE,EXPECT_FALSE(env_-&gt;ExceptionCheck()))<SUB>101</SUB>> ]
+"14680" [label = <(FindClass,env_-&gt;FindClass(name))<SUB>100</SUB>> ]
+"14689" [label = <(ExceptionCheck,env_-&gt;ExceptionCheck())<SUB>101</SUB>> ]
+"14681" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>100</SUB>> ]
+"14690" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ExceptionCheck)<SUB>101</SUB>> ]
+"14683" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>100</SUB>> ]
+"14692" [label = <(FIELD_IDENTIFIER,ExceptionCheck,ExceptionCheck)<SUB>101</SUB>> ]
+"14675" [label = <(METHOD,ExpectClassFound)<SUB>99</SUB>> ]
+"14694" [label = <(METHOD_RETURN,void)<SUB>99</SUB>> ]
+  "14678" -> "14692" 
+  "14687" -> "14694" 
+  "14679" -> "14678" 
+  "14688" -> "14687" 
+  "14680" -> "14679" 
+  "14689" -> "14688" 
+  "14681" -> "14680" 
+  "14690" -> "14689" 
+  "14683" -> "14681" 
+  "14692" -> "14690" 
+  "14675" -> "14683" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/268-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/268-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/268-cfg.dot	2023-06-07 19:33:45.527394676 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/268-cfg.dot	2023-06-07 19:33:52.097393976 +0330
@@ -1,38 +1,45 @@
-digraph "CleanUpJniEnv" {  
-"14960" [label = <(&lt;operator&gt;.notEquals,aioobe_ != nullptr)<SUB>74</SUB>> ]
-"14973" [label = <(&lt;operator&gt;.notEquals,ase_ != nullptr)<SUB>78</SUB>> ]
-"14986" [label = <(&lt;operator&gt;.notEquals,sioobe_ != nullptr)<SUB>82</SUB>> ]
-"14964" [label = <(DeleteGlobalRef,env_-&gt;DeleteGlobalRef(aioobe_))<SUB>75</SUB>> ]
-"14969" [label = <(&lt;operator&gt;.assignment,aioobe_ = nullptr)<SUB>76</SUB>> ]
-"14977" [label = <(DeleteGlobalRef,env_-&gt;DeleteGlobalRef(ase_))<SUB>79</SUB>> ]
-"14982" [label = <(&lt;operator&gt;.assignment,ase_ = nullptr)<SUB>80</SUB>> ]
-"14990" [label = <(DeleteGlobalRef,env_-&gt;DeleteGlobalRef(sioobe_))<SUB>83</SUB>> ]
-"14995" [label = <(&lt;operator&gt;.assignment,sioobe_ = nullptr)<SUB>84</SUB>> ]
-"14965" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;DeleteGlobalRef)<SUB>75</SUB>> ]
-"14978" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;DeleteGlobalRef)<SUB>79</SUB>> ]
-"14991" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;DeleteGlobalRef)<SUB>83</SUB>> ]
-"14967" [label = <(FIELD_IDENTIFIER,DeleteGlobalRef,DeleteGlobalRef)<SUB>75</SUB>> ]
-"14980" [label = <(FIELD_IDENTIFIER,DeleteGlobalRef,DeleteGlobalRef)<SUB>79</SUB>> ]
-"14993" [label = <(FIELD_IDENTIFIER,DeleteGlobalRef,DeleteGlobalRef)<SUB>83</SUB>> ]
-"14957" [label = <(METHOD,CleanUpJniEnv)<SUB>73</SUB>> ]
-"14998" [label = <(METHOD_RETURN,void)<SUB>73</SUB>> ]
-  "14960" -> "14967" 
-  "14960" -> "14973" 
-  "14973" -> "14980" 
-  "14973" -> "14986" 
-  "14986" -> "14998" 
-  "14986" -> "14993" 
-  "14964" -> "14969" 
-  "14969" -> "14973" 
-  "14977" -> "14982" 
-  "14982" -> "14986" 
-  "14990" -> "14995" 
-  "14995" -> "14998" 
-  "14965" -> "14964" 
-  "14978" -> "14977" 
-  "14991" -> "14990" 
-  "14967" -> "14965" 
-  "14980" -> "14978" 
-  "14993" -> "14991" 
-  "14957" -> "14960" 
+digraph "ExpectClassNotFound" {  
+"14702" [label = <(&lt;operator&gt;.shiftLeft,EXPECT_EQ(env_-&gt;FindClass(name), nullptr) &lt;&lt; name)<SUB>106</SUB>> ]
+"14703" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;FindClass(name), nullptr))<SUB>106</SUB>> ]
+"14712" [label = <(&lt;operator&gt;.logicalOr,!check_jni || check_jni_msg == nullptr)<SUB>107</SUB>> ]
+"14704" [label = <(FindClass,env_-&gt;FindClass(name))<SUB>106</SUB>> ]
+"14713" [label = <(&lt;operator&gt;.logicalNot,!check_jni)<SUB>107</SUB>> ]
+"14715" [label = <(&lt;operator&gt;.equals,check_jni_msg == nullptr)<SUB>107</SUB>> ]
+"14719" [label = <(&lt;operator&gt;.shiftLeft,EXPECT_TRUE(env_-&gt;ExceptionCheck()) &lt;&lt; name)<SUB>108</SUB>> ]
+"14726" [label = <(ExceptionClear,env_-&gt;ExceptionClear())<SUB>109</SUB>> ]
+"14705" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>106</SUB>> ]
+"14720" [label = <(EXPECT_TRUE,EXPECT_TRUE(env_-&gt;ExceptionCheck()))<SUB>108</SUB>> ]
+"14727" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ExceptionClear)<SUB>109</SUB>> ]
+"14732" [label = <(Check,abort_catcher-&gt;Check(check_jni_msg))<SUB>111</SUB>> ]
+"14707" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>106</SUB>> ]
+"14721" [label = <(ExceptionCheck,env_-&gt;ExceptionCheck())<SUB>108</SUB>> ]
+"14729" [label = <(FIELD_IDENTIFIER,ExceptionClear,ExceptionClear)<SUB>109</SUB>> ]
+"14733" [label = <(&lt;operator&gt;.indirectFieldAccess,abort_catcher-&gt;Check)<SUB>111</SUB>> ]
+"14722" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ExceptionCheck)<SUB>108</SUB>> ]
+"14735" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>111</SUB>> ]
+"14724" [label = <(FIELD_IDENTIFIER,ExceptionCheck,ExceptionCheck)<SUB>108</SUB>> ]
+"14696" [label = <(METHOD,ExpectClassNotFound)<SUB>104</SUB>> ]
+"14737" [label = <(METHOD_RETURN,void)<SUB>104</SUB>> ]
+  "14702" -> "14713" 
+  "14703" -> "14702" 
+  "14712" -> "14724" 
+  "14712" -> "14735" 
+  "14704" -> "14703" 
+  "14713" -> "14712" 
+  "14713" -> "14715" 
+  "14715" -> "14712" 
+  "14719" -> "14729" 
+  "14726" -> "14737" 
+  "14705" -> "14704" 
+  "14720" -> "14719" 
+  "14727" -> "14726" 
+  "14732" -> "14737" 
+  "14707" -> "14705" 
+  "14721" -> "14720" 
+  "14729" -> "14727" 
+  "14733" -> "14732" 
+  "14722" -> "14721" 
+  "14735" -> "14733" 
+  "14724" -> "14722" 
+  "14696" -> "14707" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/269-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/269-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/269-cfg.dot	2023-06-07 19:33:45.527394676 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/269-cfg.dot	2023-06-07 19:33:52.107393974 +0330
@@ -1,5 +1,126 @@
-digraph "TearDown" {  
-"15000" [label = <(METHOD,TearDown)<SUB>88</SUB>> ]
-"15002" [label = <(METHOD_RETURN,void)<SUB>88</SUB>> ]
-  "15000" -> "15002" 
+digraph "FindClassTest" {  
+"14743" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>116</SUB>> ]
+"14751" [label = <(FindClass,env_-&gt;FindClass(nullptr))<SUB>120</SUB>> ]
+"14756" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;))<SUB>121</SUB>> ]
+"14764" [label = <(ExpectClassFound,ExpectClassFound(&quot;java/lang/String&quot;))<SUB>125</SUB>> ]
+"14766" [label = <(ExpectClassFound,ExpectClassFound(&quot;[Ljava/lang/String;&quot;))<SUB>127</SUB>> ]
+"14768" [label = <(ExpectClassFound,ExpectClassFound(&quot;[C&quot;))<SUB>129</SUB>> ]
+"14770" [label = <(ExpectClassNotFound,ExpectClassNotFound(&quot;C&quot;, check_jni, nullptr, &amp;check_jni_abort_catcher))<SUB>132</SUB>> ]
+"14776" [label = <(ExpectClassNotFound,ExpectClassNotFound(&quot;V&quot;, check_jni, nullptr, &amp;check_jni_abort_catcher))<SUB>133</SUB>> ]
+"14782" [label = <(ExpectClassNotFound,ExpectClassNotFound(&quot;K&quot;, check_jni, nullptr, &amp;check_jni_abort_catcher))<SUB>134</SUB>> ]
+"14831" [label = <(ExpectClassNotFound,ExpectClassNotFound(&quot;Ljava.lang.String;&quot;, check_jni, &quot;illegal class name 'Ljava.lang.String;'&quot;,\012 &amp;check_jni_abort_catcher))<SUB>151</SUB>> ]
+"14837" [label = <(ExpectClassNotFound,ExpectClassNotFound(&quot;[java.lang.String&quot;, check_jni, &quot;illegal class name '[java.lang.String'&quot;,\012 &amp;check_jni_abort_catcher))<SUB>153</SUB>> ]
+"14843" [label = <(ExpectClassNotFound,ExpectClassNotFound(&quot;Ljava/lang/String;&quot;, check_jni, &quot;illegal class name 'Ljava/lang/String;'&quot;,\012 &amp;check_jni_abort_catcher))<SUB>157</SUB>> ]
+"14849" [label = <(ExpectClassNotFound,ExpectClassNotFound(&quot;[java/lang/String&quot;, check_jni, &quot;illegal class name '[java/lang/String'&quot;,\012 &amp;check_jni_abort_catcher))<SUB>161</SUB>> ]
+"14855" [label = <(ExpectClassNotFound,ExpectClassNotFound(&quot;[K&quot;, check_jni, &quot;illegal class name '[K'&quot;, &amp;check_jni_abort_catcher))<SUB>164</SUB>> ]
+"14861" [label = <(ExpectClassNotFound,ExpectClassNotFound(&quot;[V&quot;, check_jni, &quot;illegal class name '[V'&quot;, &amp;check_jni_abort_catcher))<SUB>167</SUB>> ]
+"14867" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>169</SUB>> ]
+"14745" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>116</SUB>> ]
+"14752" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>120</SUB>> ]
+"14757" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>121</SUB>> ]
+"14760" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;)<SUB>121</SUB>> ]
+"14774" [label = <(&lt;operator&gt;.addressOf,&amp;check_jni_abort_catcher)<SUB>132</SUB>> ]
+"14780" [label = <(&lt;operator&gt;.addressOf,&amp;check_jni_abort_catcher)<SUB>133</SUB>> ]
+"14786" [label = <(&lt;operator&gt;.addressOf,&amp;check_jni_abort_catcher)<SUB>134</SUB>> ]
+"14835" [label = <(&lt;operator&gt;.addressOf,&amp;check_jni_abort_catcher)<SUB>152</SUB>> ]
+"14841" [label = <(&lt;operator&gt;.addressOf,&amp;check_jni_abort_catcher)<SUB>154</SUB>> ]
+"14847" [label = <(&lt;operator&gt;.addressOf,&amp;check_jni_abort_catcher)<SUB>158</SUB>> ]
+"14853" [label = <(&lt;operator&gt;.addressOf,&amp;check_jni_abort_catcher)<SUB>162</SUB>> ]
+"14859" [label = <(&lt;operator&gt;.addressOf,&amp;check_jni_abort_catcher)<SUB>164</SUB>> ]
+"14865" [label = <(&lt;operator&gt;.addressOf,&amp;check_jni_abort_catcher)<SUB>167</SUB>> ]
+"14869" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>169</SUB>> ]
+"14746" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>116</SUB>> ]
+"14754" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>120</SUB>> ]
+"14759" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>121</SUB>> ]
+"14791" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;FindClass(&quot;java.lang.String&quot;), nullptr))<SUB>138</SUB>> ]
+"14798" [label = <(EXPECT_FALSE,EXPECT_FALSE(env_-&gt;ExceptionCheck()))<SUB>139</SUB>> ]
+"14803" [label = <(Check,check_jni_abort_catcher.Check(&quot;illegal class name 'java.lang.String'&quot;))<SUB>140</SUB>> ]
+"14808" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;FindClass(&quot;[Ljava.lang.String;&quot;), nullptr))<SUB>142</SUB>> ]
+"14815" [label = <(EXPECT_FALSE,EXPECT_FALSE(env_-&gt;ExceptionCheck()))<SUB>143</SUB>> ]
+"14820" [label = <(Check,check_jni_abort_catcher.Check(&quot;illegal class name '[Ljava.lang.String;'&quot;))<SUB>144</SUB>> ]
+"14870" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>169</SUB>> ]
+"14748" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>116</SUB>> ]
+"14792" [label = <(FindClass,env_-&gt;FindClass(&quot;java.lang.String&quot;))<SUB>138</SUB>> ]
+"14799" [label = <(ExceptionCheck,env_-&gt;ExceptionCheck())<SUB>139</SUB>> ]
+"14804" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>140</SUB>> ]
+"14809" [label = <(FindClass,env_-&gt;FindClass(&quot;[Ljava.lang.String;&quot;))<SUB>142</SUB>> ]
+"14816" [label = <(ExceptionCheck,env_-&gt;ExceptionCheck())<SUB>143</SUB>> ]
+"14821" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>144</SUB>> ]
+"14827" [label = <(ExpectClassFound,ExpectClassFound(&quot;java.lang.String&quot;))<SUB>147</SUB>> ]
+"14829" [label = <(ExpectClassFound,ExpectClassFound(&quot;[Ljava.lang.String;&quot;))<SUB>148</SUB>> ]
+"14872" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>169</SUB>> ]
+"14793" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>138</SUB>> ]
+"14800" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ExceptionCheck)<SUB>139</SUB>> ]
+"14806" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>140</SUB>> ]
+"14810" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>142</SUB>> ]
+"14817" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ExceptionCheck)<SUB>143</SUB>> ]
+"14823" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>144</SUB>> ]
+"14795" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>138</SUB>> ]
+"14802" [label = <(FIELD_IDENTIFIER,ExceptionCheck,ExceptionCheck)<SUB>139</SUB>> ]
+"14812" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>142</SUB>> ]
+"14819" [label = <(FIELD_IDENTIFIER,ExceptionCheck,ExceptionCheck)<SUB>143</SUB>> ]
+"14739" [label = <(METHOD,FindClassTest)<SUB>115</SUB>> ]
+"14874" [label = <(METHOD_RETURN,void)<SUB>115</SUB>> ]
+  "14743" -> "14754" 
+  "14751" -> "14759" 
+  "14756" -> "14764" 
+  "14764" -> "14766" 
+  "14766" -> "14768" 
+  "14768" -> "14774" 
+  "14770" -> "14780" 
+  "14776" -> "14786" 
+  "14782" -> "14795" 
+  "14782" -> "14827" 
+  "14831" -> "14841" 
+  "14837" -> "14847" 
+  "14843" -> "14853" 
+  "14849" -> "14859" 
+  "14855" -> "14865" 
+  "14861" -> "14872" 
+  "14867" -> "14874" 
+  "14745" -> "14743" 
+  "14752" -> "14751" 
+  "14757" -> "14760" 
+  "14760" -> "14756" 
+  "14774" -> "14770" 
+  "14780" -> "14776" 
+  "14786" -> "14782" 
+  "14835" -> "14831" 
+  "14841" -> "14837" 
+  "14847" -> "14843" 
+  "14853" -> "14849" 
+  "14859" -> "14855" 
+  "14865" -> "14861" 
+  "14869" -> "14867" 
+  "14746" -> "14745" 
+  "14754" -> "14752" 
+  "14759" -> "14757" 
+  "14791" -> "14802" 
+  "14798" -> "14806" 
+  "14803" -> "14812" 
+  "14808" -> "14819" 
+  "14815" -> "14823" 
+  "14820" -> "14835" 
+  "14870" -> "14869" 
+  "14748" -> "14746" 
+  "14792" -> "14791" 
+  "14799" -> "14798" 
+  "14804" -> "14803" 
+  "14809" -> "14808" 
+  "14816" -> "14815" 
+  "14821" -> "14820" 
+  "14827" -> "14829" 
+  "14829" -> "14835" 
+  "14872" -> "14870" 
+  "14793" -> "14792" 
+  "14800" -> "14799" 
+  "14806" -> "14804" 
+  "14810" -> "14809" 
+  "14817" -> "14816" 
+  "14823" -> "14821" 
+  "14795" -> "14793" 
+  "14802" -> "14800" 
+  "14812" -> "14810" 
+  "14819" -> "14817" 
+  "14739" -> "14748" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/27-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/27-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/27-cfg.dot	2023-06-07 19:33:45.337394696 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/27-cfg.dot	2023-06-07 19:33:51.927393994 +0330
@@ -1,134 +1,63 @@
-digraph "FindClass" {  
-"606" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(name))<SUB>539</SUB>> ]
-"625" [label = <(&lt;operator&gt;.assignment,* runtime = Runtime::Current())<SUB>540</SUB>> ]
-"632" [label = <(&lt;operator&gt;.assignment,* class_linker = runtime-&gt;GetClassLinker())<SUB>541</SUB>> ]
-"639" [label = <(descriptor,descriptor(NormalizeJniClassDescriptor(name)))<SUB>542</SUB>> ]
-"643" [label = <(soa,soa(env))<SUB>543</SUB>> ]
-"646" [label = <(&lt;operator&gt;.assignment,* c = nullptr)<SUB>544</SUB>> ]
-"708" [label = <(RETURN,return soa.AddLocalReference&lt;jclass&gt;(c);,return soa.AddLocalReference&lt;jclass&gt;(c);)<SUB>552</SUB>> ]
-"627" [label = <(Runtime::Current,Runtime::Current())<SUB>540</SUB>> ]
-"634" [label = <(GetClassLinker,runtime-&gt;GetClassLinker())<SUB>541</SUB>> ]
-"640" [label = <(NormalizeJniClassDescriptor,NormalizeJniClassDescriptor(name))<SUB>542</SUB>> ]
-"650" [label = <(IsStarted,runtime-&gt;IsStarted())<SUB>545</SUB>> ]
-"709" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jclass&gt;(c))<SUB>552</SUB>> ]
-"628" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>540</SUB>> ]
-"635" [label = <(&lt;operator&gt;.indirectFieldAccess,runtime-&gt;GetClassLinker)<SUB>541</SUB>> ]
-"651" [label = <(&lt;operator&gt;.indirectFieldAccess,runtime-&gt;IsStarted)<SUB>545</SUB>> ]
-"655" [label = <(&lt;operator&gt;.greaterThan,StackHandleScope&lt;1&gt; hs(soa.Self()))<SUB>546</SUB>> ]
-"664" [label = <(&lt;operator&gt;.greaterThan,Handle&lt;mirror::ClassLoader&gt; class_loader(hs.NewHandle(GetClassLoader(soa))))<SUB>547</SUB>> ]
-"677" [label = <(&lt;operator&gt;.assignment,c = class_linker-&gt;FindClass(soa.Self(), descriptor.c_str(), class_loader))<SUB>548</SUB>> ]
-"710" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jclass)<SUB>552</SUB>> ]
-"610" [label = <(UNLIKELY,UNLIKELY((name) == nullptr))<SUB>539</SUB>> ]
-"630" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>540</SUB>> ]
-"637" [label = <(FIELD_IDENTIFIER,GetClassLinker,GetClassLinker)<SUB>541</SUB>> ]
-"653" [label = <(FIELD_IDENTIFIER,IsStarted,IsStarted)<SUB>545</SUB>> ]
-"656" [label = <(&lt;operator&gt;.lessThan,StackHandleScope&lt;1)<SUB>546</SUB>> ]
-"659" [label = <(hs,hs(soa.Self()))<SUB>546</SUB>> ]
-"665" [label = <(&lt;operator&gt;.lessThan,Handle&lt;mirror::ClassLoader)<SUB>547</SUB>> ]
-"670" [label = <(class_loader,class_loader(hs.NewHandle(GetClassLoader(soa))))<SUB>547</SUB>> ]
-"679" [label = <(FindClass,class_linker-&gt;FindClass(soa.Self(), descriptor.c_str(), class_loader))<SUB>548</SUB>> ]
-"694" [label = <(&lt;operator&gt;.assignment,c = class_linker-&gt;FindSystemClass(soa.Self(), descriptor.c_str()))<SUB>550</SUB>> ]
-"711" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>552</SUB>> ]
-"611" [label = <(&lt;operator&gt;.equals,(name) == nullptr)<SUB>539</SUB>> ]
-"615" [label = <(CHECK_NON_NULL_ARGUMENT(name),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;name == null&quot;))<SUB>539</SUB>> ]
-"622" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(name),CHECK_NON_NULL_ARGUMENT(name))<SUB>539</SUB>> ]
-"660" [label = <(Self,soa.Self())<SUB>546</SUB>> ]
-"667" [label = <(&lt;operator&gt;.fieldAccess,mirror::ClassLoader)<SUB>547</SUB>> ]
-"671" [label = <(NewHandle,hs.NewHandle(GetClassLoader(soa)))<SUB>547</SUB>> ]
-"680" [label = <(&lt;operator&gt;.indirectFieldAccess,class_linker-&gt;FindClass)<SUB>548</SUB>> ]
-"683" [label = <(Self,soa.Self())<SUB>548</SUB>> ]
-"687" [label = <(c_str,descriptor.c_str())<SUB>548</SUB>> ]
-"696" [label = <(FindSystemClass,class_linker-&gt;FindSystemClass(soa.Self(), descriptor.c_str()))<SUB>550</SUB>> ]
-"713" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>552</SUB>> ]
-"616" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>539</SUB>> ]
-"661" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>546</SUB>> ]
-"669" [label = <(FIELD_IDENTIFIER,ClassLoader,ClassLoader)<SUB>547</SUB>> ]
-"672" [label = <(&lt;operator&gt;.fieldAccess,hs.NewHandle)<SUB>547</SUB>> ]
-"675" [label = <(GetClassLoader,GetClassLoader(soa))<SUB>547</SUB>> ]
-"682" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>548</SUB>> ]
-"684" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>548</SUB>> ]
-"688" [label = <(&lt;operator&gt;.fieldAccess,descriptor.c_str)<SUB>548</SUB>> ]
-"697" [label = <(&lt;operator&gt;.indirectFieldAccess,class_linker-&gt;FindSystemClass)<SUB>550</SUB>> ]
-"700" [label = <(Self,soa.Self())<SUB>550</SUB>> ]
-"704" [label = <(c_str,descriptor.c_str())<SUB>550</SUB>> ]
-"617" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>539</SUB>> ]
-"619" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>539</SUB>> ]
-"663" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>546</SUB>> ]
-"674" [label = <(FIELD_IDENTIFIER,NewHandle,NewHandle)<SUB>547</SUB>> ]
-"686" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>548</SUB>> ]
-"690" [label = <(FIELD_IDENTIFIER,c_str,c_str)<SUB>548</SUB>> ]
-"699" [label = <(FIELD_IDENTIFIER,FindSystemClass,FindSystemClass)<SUB>550</SUB>> ]
-"701" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>550</SUB>> ]
-"705" [label = <(&lt;operator&gt;.fieldAccess,descriptor.c_str)<SUB>550</SUB>> ]
-"703" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>550</SUB>> ]
-"707" [label = <(FIELD_IDENTIFIER,c_str,c_str)<SUB>550</SUB>> ]
-"602" [label = <(METHOD,FindClass)<SUB>538</SUB>> ]
-"716" [label = <(METHOD_RETURN,jclass)<SUB>538</SUB>> ]
-  "606" -> "611" 
-  "606" -> "630" 
-  "625" -> "637" 
-  "632" -> "640" 
-  "639" -> "643" 
-  "643" -> "646" 
-  "646" -> "653" 
-  "708" -> "716" 
-  "627" -> "625" 
-  "634" -> "632" 
-  "640" -> "639" 
-  "650" -> "656" 
-  "650" -> "699" 
-  "709" -> "708" 
-  "628" -> "627" 
-  "635" -> "634" 
-  "651" -> "650" 
-  "655" -> "669" 
-  "664" -> "682" 
-  "677" -> "713" 
-  "710" -> "709" 
-  "610" -> "617" 
-  "610" -> "630" 
-  "630" -> "628" 
-  "637" -> "635" 
-  "653" -> "651" 
-  "656" -> "663" 
-  "659" -> "655" 
-  "665" -> "674" 
-  "670" -> "664" 
-  "679" -> "677" 
-  "694" -> "713" 
-  "711" -> "710" 
-  "611" -> "610" 
-  "615" -> "622" 
-  "622" -> "716" 
-  "660" -> "659" 
-  "667" -> "665" 
-  "671" -> "670" 
-  "680" -> "686" 
-  "683" -> "690" 
-  "687" -> "679" 
-  "696" -> "694" 
-  "713" -> "711" 
-  "616" -> "615" 
-  "661" -> "660" 
-  "669" -> "667" 
-  "672" -> "675" 
-  "675" -> "671" 
-  "682" -> "680" 
-  "684" -> "683" 
-  "688" -> "687" 
-  "697" -> "703" 
-  "700" -> "707" 
-  "704" -> "696" 
-  "617" -> "619" 
-  "619" -> "616" 
-  "663" -> "661" 
-  "674" -> "672" 
-  "686" -> "684" 
-  "690" -> "688" 
-  "699" -> "697" 
-  "701" -> "700" 
-  "705" -> "704" 
-  "703" -> "701" 
-  "707" -> "705" 
-  "602" -> "606" 
+digraph "ToReflectedField" {  
+"761" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(fid))<SUB>510</SUB>> ]
+"780" [label = <(soa,soa(env))<SUB>511</SUB>> ]
+"783" [label = <(&lt;operator&gt;.assignment,* f = jni::DecodeArtField(fid))<SUB>512</SUB>> ]
+"790" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(\012        mirror::Field::CreateFromArtField&lt;kRuntimePointerSize&gt;(soa.Self(), f, true));,return soa.AddLocalReference&lt;jobject&gt;(\012        mirror::Field::CreateFromArtField&lt;kRuntimePointerSize&gt;(soa.Self(), f, true));)<SUB>513</SUB>> ]
+"785" [label = <(jni::DecodeArtField,jni::DecodeArtField(fid))<SUB>512</SUB>> ]
+"791" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(\012        mirror::Field::CreateFromArtField&lt;kRuntimePointerSize&gt;(soa.Self(), f, true)))<SUB>513</SUB>> ]
+"786" [label = <(&lt;operator&gt;.fieldAccess,jni::DecodeArtField)<SUB>512</SUB>> ]
+"792" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>513</SUB>> ]
+"797" [label = <(&lt;operator&gt;.greaterThan,mirror::Field::CreateFromArtField&lt;kRuntimePointerSize&gt;(soa.Self(), f, true))<SUB>514</SUB>> ]
+"765" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>510</SUB>> ]
+"788" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>512</SUB>> ]
+"793" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>513</SUB>> ]
+"798" [label = <(&lt;operator&gt;.lessThan,mirror::Field::CreateFromArtField&lt;kRuntimePointerSize)<SUB>514</SUB>> ]
+"805" [label = <(&lt;operator&gt;.bracketedPrimary,(soa.Self(), f, true))<SUB>514</SUB>> ]
+"766" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>510</SUB>> ]
+"770" [label = <(CHECK_NON_NULL_ARGUMENT(fid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>510</SUB>> ]
+"777" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(fid),CHECK_NON_NULL_ARGUMENT(fid))<SUB>510</SUB>> ]
+"795" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>513</SUB>> ]
+"799" [label = <(&lt;operator&gt;.fieldAccess,mirror::Field::CreateFromArtField)<SUB>514</SUB>> ]
+"806" [label = <(&lt;operator&gt;.expressionList,soa.Self(), f, true)<SUB>514</SUB>> ]
+"771" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>510</SUB>> ]
+"800" [label = <(&lt;operator&gt;.fieldAccess,mirror::Field)<SUB>514</SUB>> ]
+"803" [label = <(FIELD_IDENTIFIER,CreateFromArtField,CreateFromArtField)<SUB>514</SUB>> ]
+"807" [label = <(Self,soa.Self())<SUB>514</SUB>> ]
+"772" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>510</SUB>> ]
+"774" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>510</SUB>> ]
+"808" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>514</SUB>> ]
+"810" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>514</SUB>> ]
+"755" [label = <(METHOD,ToReflectedField)<SUB>509</SUB>> ]
+"813" [label = <(METHOD_RETURN,jobject)<SUB>509</SUB>> ]
+  "761" -> "766" 
+  "761" -> "780" 
+  "780" -> "788" 
+  "783" -> "795" 
+  "790" -> "813" 
+  "785" -> "783" 
+  "791" -> "790" 
+  "786" -> "785" 
+  "792" -> "800" 
+  "797" -> "791" 
+  "765" -> "772" 
+  "765" -> "780" 
+  "788" -> "786" 
+  "793" -> "792" 
+  "798" -> "810" 
+  "805" -> "797" 
+  "766" -> "765" 
+  "770" -> "777" 
+  "777" -> "813" 
+  "795" -> "793" 
+  "799" -> "798" 
+  "806" -> "805" 
+  "771" -> "770" 
+  "800" -> "803" 
+  "803" -> "799" 
+  "807" -> "806" 
+  "772" -> "774" 
+  "774" -> "771" 
+  "808" -> "807" 
+  "810" -> "808" 
+  "755" -> "761" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/270-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/270-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/270-cfg.dot	2023-06-07 19:33:45.527394676 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/270-cfg.dot	2023-06-07 19:33:52.107393974 +0330
@@ -1,29 +1,85 @@
-digraph "GetPrimitiveClass" {  
-"15010" [label = <(soa,soa(env_))<SUB>94</SUB>> ]
-"15013" [label = <(&lt;operator&gt;.assignment,* c = class_linker_-&gt;FindPrimitiveClass(descriptor))<SUB>95</SUB>> ]
-"15020" [label = <(CHECK,CHECK(c != nullptr))<SUB>96</SUB>> ]
-"15024" [label = <(RETURN,return soa.AddLocalReference&lt;jclass&gt;(c);,return soa.AddLocalReference&lt;jclass&gt;(c);)<SUB>97</SUB>> ]
-"15015" [label = <(FindPrimitiveClass,class_linker_-&gt;FindPrimitiveClass(descriptor))<SUB>95</SUB>> ]
-"15021" [label = <(&lt;operator&gt;.notEquals,c != nullptr)<SUB>96</SUB>> ]
-"15025" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jclass&gt;(c))<SUB>97</SUB>> ]
-"15016" [label = <(&lt;operator&gt;.indirectFieldAccess,class_linker_-&gt;FindPrimitiveClass)<SUB>95</SUB>> ]
-"15026" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jclass)<SUB>97</SUB>> ]
-"15018" [label = <(FIELD_IDENTIFIER,FindPrimitiveClass,FindPrimitiveClass)<SUB>95</SUB>> ]
-"15027" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>97</SUB>> ]
-"15029" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>97</SUB>> ]
-"15006" [label = <(METHOD,GetPrimitiveClass)<SUB>93</SUB>> ]
-"15032" [label = <(METHOD_RETURN,jclass)<SUB>93</SUB>> ]
-  "15010" -> "15018" 
-  "15013" -> "15021" 
-  "15020" -> "15029" 
-  "15024" -> "15032" 
-  "15015" -> "15013" 
-  "15021" -> "15020" 
-  "15025" -> "15024" 
-  "15016" -> "15015" 
-  "15026" -> "15025" 
-  "15018" -> "15016" 
-  "15027" -> "15026" 
-  "15029" -> "15027" 
-  "15006" -> "15010" 
+digraph "GetFieldIdBadArgumentTest" {  
+"14880" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>173</SUB>> ]
+"14889" [label = <(&lt;operator&gt;.assignment,c = env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>176</SUB>> ]
+"14896" [label = <(ASSERT_NE,ASSERT_NE(c, nullptr))<SUB>177</SUB>> ]
+"14900" [label = <(&lt;operator&gt;.assignment,fid = env_-&gt;GetFieldID(nullptr, &quot;count&quot;, &quot;I&quot;))<SUB>179</SUB>> ]
+"14909" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, fid))<SUB>180</SUB>> ]
+"14912" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;GetFieldID received NULL jclass&quot;\012 : &quot;java_class == null&quot;))<SUB>181</SUB>> ]
+"14920" [label = <(&lt;operator&gt;.assignment,fid = env_-&gt;GetFieldID(c, nullptr, &quot;I&quot;))<SUB>183</SUB>> ]
+"14929" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, fid))<SUB>184</SUB>> ]
+"14932" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;))<SUB>185</SUB>> ]
+"14940" [label = <(&lt;operator&gt;.assignment,fid = env_-&gt;GetFieldID(c, &quot;count&quot;, nullptr))<SUB>187</SUB>> ]
+"14949" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, fid))<SUB>188</SUB>> ]
+"14952" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;sig == null&quot;))<SUB>189</SUB>> ]
+"14960" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>192</SUB>> ]
+"14882" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>173</SUB>> ]
+"14891" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>176</SUB>> ]
+"14902" [label = <(GetFieldID,env_-&gt;GetFieldID(nullptr, &quot;count&quot;, &quot;I&quot;))<SUB>179</SUB>> ]
+"14913" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>181</SUB>> ]
+"14916" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;GetFieldID received NULL jclass&quot;\012 : &quot;java_class == null&quot;)<SUB>181</SUB>> ]
+"14922" [label = <(GetFieldID,env_-&gt;GetFieldID(c, nullptr, &quot;I&quot;))<SUB>183</SUB>> ]
+"14933" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>185</SUB>> ]
+"14936" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;)<SUB>185</SUB>> ]
+"14942" [label = <(GetFieldID,env_-&gt;GetFieldID(c, &quot;count&quot;, nullptr))<SUB>187</SUB>> ]
+"14953" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>189</SUB>> ]
+"14956" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;sig == null&quot;)<SUB>189</SUB>> ]
+"14962" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>192</SUB>> ]
+"14883" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>173</SUB>> ]
+"14892" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>176</SUB>> ]
+"14903" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetFieldID)<SUB>179</SUB>> ]
+"14915" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>181</SUB>> ]
+"14923" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetFieldID)<SUB>183</SUB>> ]
+"14935" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>185</SUB>> ]
+"14943" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetFieldID)<SUB>187</SUB>> ]
+"14955" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>189</SUB>> ]
+"14963" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>192</SUB>> ]
+"14885" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>173</SUB>> ]
+"14894" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>176</SUB>> ]
+"14905" [label = <(FIELD_IDENTIFIER,GetFieldID,GetFieldID)<SUB>179</SUB>> ]
+"14925" [label = <(FIELD_IDENTIFIER,GetFieldID,GetFieldID)<SUB>183</SUB>> ]
+"14945" [label = <(FIELD_IDENTIFIER,GetFieldID,GetFieldID)<SUB>187</SUB>> ]
+"14965" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>192</SUB>> ]
+"14876" [label = <(METHOD,GetFieldIdBadArgumentTest)<SUB>172</SUB>> ]
+"14967" [label = <(METHOD_RETURN,void)<SUB>172</SUB>> ]
+  "14880" -> "14894" 
+  "14889" -> "14896" 
+  "14896" -> "14905" 
+  "14900" -> "14909" 
+  "14909" -> "14915" 
+  "14912" -> "14925" 
+  "14920" -> "14929" 
+  "14929" -> "14935" 
+  "14932" -> "14945" 
+  "14940" -> "14949" 
+  "14949" -> "14955" 
+  "14952" -> "14965" 
+  "14960" -> "14967" 
+  "14882" -> "14880" 
+  "14891" -> "14889" 
+  "14902" -> "14900" 
+  "14913" -> "14916" 
+  "14916" -> "14912" 
+  "14922" -> "14920" 
+  "14933" -> "14936" 
+  "14936" -> "14932" 
+  "14942" -> "14940" 
+  "14953" -> "14956" 
+  "14956" -> "14952" 
+  "14962" -> "14960" 
+  "14883" -> "14882" 
+  "14892" -> "14891" 
+  "14903" -> "14902" 
+  "14915" -> "14913" 
+  "14923" -> "14922" 
+  "14935" -> "14933" 
+  "14943" -> "14942" 
+  "14955" -> "14953" 
+  "14963" -> "14962" 
+  "14885" -> "14883" 
+  "14894" -> "14892" 
+  "14905" -> "14903" 
+  "14925" -> "14923" 
+  "14945" -> "14943" 
+  "14965" -> "14963" 
+  "14876" -> "14885" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/271-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/271-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/271-cfg.dot	2023-06-07 19:33:45.527394676 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/271-cfg.dot	2023-06-07 19:33:52.107393974 +0330
@@ -1,25 +1,85 @@
-digraph "ExpectClassFound" {  
-"15037" [label = <(&lt;operator&gt;.shiftLeft,EXPECT_NE(env_-&gt;FindClass(name), nullptr) &lt;&lt; name)<SUB>101</SUB>> ]
-"15046" [label = <(&lt;operator&gt;.shiftLeft,EXPECT_FALSE(env_-&gt;ExceptionCheck()) &lt;&lt; name)<SUB>102</SUB>> ]
-"15038" [label = <(EXPECT_NE,EXPECT_NE(env_-&gt;FindClass(name), nullptr))<SUB>101</SUB>> ]
-"15047" [label = <(EXPECT_FALSE,EXPECT_FALSE(env_-&gt;ExceptionCheck()))<SUB>102</SUB>> ]
-"15039" [label = <(FindClass,env_-&gt;FindClass(name))<SUB>101</SUB>> ]
-"15048" [label = <(ExceptionCheck,env_-&gt;ExceptionCheck())<SUB>102</SUB>> ]
-"15040" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>101</SUB>> ]
-"15049" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ExceptionCheck)<SUB>102</SUB>> ]
-"15042" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>101</SUB>> ]
-"15051" [label = <(FIELD_IDENTIFIER,ExceptionCheck,ExceptionCheck)<SUB>102</SUB>> ]
-"15034" [label = <(METHOD,ExpectClassFound)<SUB>100</SUB>> ]
-"15053" [label = <(METHOD_RETURN,void)<SUB>100</SUB>> ]
-  "15037" -> "15051" 
-  "15046" -> "15053" 
-  "15038" -> "15037" 
-  "15047" -> "15046" 
-  "15039" -> "15038" 
-  "15048" -> "15047" 
-  "15040" -> "15039" 
-  "15049" -> "15048" 
-  "15042" -> "15040" 
-  "15051" -> "15049" 
-  "15034" -> "15042" 
+digraph "GetStaticFieldIdBadArgumentTest" {  
+"14973" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>196</SUB>> ]
+"14982" [label = <(&lt;operator&gt;.assignment,c = env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>199</SUB>> ]
+"14989" [label = <(ASSERT_NE,ASSERT_NE(c, nullptr))<SUB>200</SUB>> ]
+"14993" [label = <(&lt;operator&gt;.assignment,fid = env_-&gt;GetStaticFieldID(nullptr, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;Ljava/util/Comparator;&quot;))<SUB>202</SUB>> ]
+"15002" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, fid))<SUB>203</SUB>> ]
+"15005" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;GetStaticFieldID received NULL jclass&quot;\012 : &quot;java_class == null&quot;))<SUB>204</SUB>> ]
+"15013" [label = <(&lt;operator&gt;.assignment,fid = env_-&gt;GetStaticFieldID(c, nullptr, &quot;Ljava/util/Comparator;&quot;))<SUB>206</SUB>> ]
+"15022" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, fid))<SUB>207</SUB>> ]
+"15025" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;))<SUB>208</SUB>> ]
+"15033" [label = <(&lt;operator&gt;.assignment,fid = env_-&gt;GetStaticFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, nullptr))<SUB>210</SUB>> ]
+"15042" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, fid))<SUB>211</SUB>> ]
+"15045" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;sig == null&quot;))<SUB>212</SUB>> ]
+"15053" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>215</SUB>> ]
+"14975" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>196</SUB>> ]
+"14984" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>199</SUB>> ]
+"14995" [label = <(GetStaticFieldID,env_-&gt;GetStaticFieldID(nullptr, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;Ljava/util/Comparator;&quot;))<SUB>202</SUB>> ]
+"15006" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>204</SUB>> ]
+"15009" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;GetStaticFieldID received NULL jclass&quot;\012 : &quot;java_class == null&quot;)<SUB>204</SUB>> ]
+"15015" [label = <(GetStaticFieldID,env_-&gt;GetStaticFieldID(c, nullptr, &quot;Ljava/util/Comparator;&quot;))<SUB>206</SUB>> ]
+"15026" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>208</SUB>> ]
+"15029" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;)<SUB>208</SUB>> ]
+"15035" [label = <(GetStaticFieldID,env_-&gt;GetStaticFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, nullptr))<SUB>210</SUB>> ]
+"15046" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>212</SUB>> ]
+"15049" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;sig == null&quot;)<SUB>212</SUB>> ]
+"15055" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>215</SUB>> ]
+"14976" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>196</SUB>> ]
+"14985" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>199</SUB>> ]
+"14996" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetStaticFieldID)<SUB>202</SUB>> ]
+"15008" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>204</SUB>> ]
+"15016" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetStaticFieldID)<SUB>206</SUB>> ]
+"15028" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>208</SUB>> ]
+"15036" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetStaticFieldID)<SUB>210</SUB>> ]
+"15048" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>212</SUB>> ]
+"15056" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>215</SUB>> ]
+"14978" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>196</SUB>> ]
+"14987" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>199</SUB>> ]
+"14998" [label = <(FIELD_IDENTIFIER,GetStaticFieldID,GetStaticFieldID)<SUB>202</SUB>> ]
+"15018" [label = <(FIELD_IDENTIFIER,GetStaticFieldID,GetStaticFieldID)<SUB>206</SUB>> ]
+"15038" [label = <(FIELD_IDENTIFIER,GetStaticFieldID,GetStaticFieldID)<SUB>210</SUB>> ]
+"15058" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>215</SUB>> ]
+"14969" [label = <(METHOD,GetStaticFieldIdBadArgumentTest)<SUB>195</SUB>> ]
+"15060" [label = <(METHOD_RETURN,void)<SUB>195</SUB>> ]
+  "14973" -> "14987" 
+  "14982" -> "14989" 
+  "14989" -> "14998" 
+  "14993" -> "15002" 
+  "15002" -> "15008" 
+  "15005" -> "15018" 
+  "15013" -> "15022" 
+  "15022" -> "15028" 
+  "15025" -> "15038" 
+  "15033" -> "15042" 
+  "15042" -> "15048" 
+  "15045" -> "15058" 
+  "15053" -> "15060" 
+  "14975" -> "14973" 
+  "14984" -> "14982" 
+  "14995" -> "14993" 
+  "15006" -> "15009" 
+  "15009" -> "15005" 
+  "15015" -> "15013" 
+  "15026" -> "15029" 
+  "15029" -> "15025" 
+  "15035" -> "15033" 
+  "15046" -> "15049" 
+  "15049" -> "15045" 
+  "15055" -> "15053" 
+  "14976" -> "14975" 
+  "14985" -> "14984" 
+  "14996" -> "14995" 
+  "15008" -> "15006" 
+  "15016" -> "15015" 
+  "15028" -> "15026" 
+  "15036" -> "15035" 
+  "15048" -> "15046" 
+  "15056" -> "15055" 
+  "14978" -> "14976" 
+  "14987" -> "14985" 
+  "14998" -> "14996" 
+  "15018" -> "15016" 
+  "15038" -> "15036" 
+  "15058" -> "15056" 
+  "14969" -> "14978" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/272-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/272-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/272-cfg.dot	2023-06-07 19:33:45.527394676 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/272-cfg.dot	2023-06-07 19:33:52.107393974 +0330
@@ -1,45 +1,87 @@
-digraph "ExpectClassNotFound" {  
-"15061" [label = <(&lt;operator&gt;.shiftLeft,EXPECT_EQ(env_-&gt;FindClass(name), nullptr) &lt;&lt; name)<SUB>107</SUB>> ]
-"15062" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;FindClass(name), nullptr))<SUB>107</SUB>> ]
-"15071" [label = <(&lt;operator&gt;.logicalOr,!check_jni || check_jni_msg == nullptr)<SUB>108</SUB>> ]
-"15063" [label = <(FindClass,env_-&gt;FindClass(name))<SUB>107</SUB>> ]
-"15072" [label = <(&lt;operator&gt;.logicalNot,!check_jni)<SUB>108</SUB>> ]
-"15074" [label = <(&lt;operator&gt;.equals,check_jni_msg == nullptr)<SUB>108</SUB>> ]
-"15078" [label = <(&lt;operator&gt;.shiftLeft,EXPECT_TRUE(env_-&gt;ExceptionCheck()) &lt;&lt; name)<SUB>109</SUB>> ]
-"15085" [label = <(ExceptionClear,env_-&gt;ExceptionClear())<SUB>110</SUB>> ]
-"15064" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>107</SUB>> ]
-"15079" [label = <(EXPECT_TRUE,EXPECT_TRUE(env_-&gt;ExceptionCheck()))<SUB>109</SUB>> ]
-"15086" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ExceptionClear)<SUB>110</SUB>> ]
-"15091" [label = <(Check,abort_catcher-&gt;Check(check_jni_msg))<SUB>112</SUB>> ]
-"15066" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>107</SUB>> ]
-"15080" [label = <(ExceptionCheck,env_-&gt;ExceptionCheck())<SUB>109</SUB>> ]
-"15088" [label = <(FIELD_IDENTIFIER,ExceptionClear,ExceptionClear)<SUB>110</SUB>> ]
-"15092" [label = <(&lt;operator&gt;.indirectFieldAccess,abort_catcher-&gt;Check)<SUB>112</SUB>> ]
-"15081" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ExceptionCheck)<SUB>109</SUB>> ]
-"15094" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>112</SUB>> ]
-"15083" [label = <(FIELD_IDENTIFIER,ExceptionCheck,ExceptionCheck)<SUB>109</SUB>> ]
-"15055" [label = <(METHOD,ExpectClassNotFound)<SUB>105</SUB>> ]
-"15096" [label = <(METHOD_RETURN,void)<SUB>105</SUB>> ]
-  "15061" -> "15072" 
-  "15062" -> "15061" 
-  "15071" -> "15083" 
-  "15071" -> "15094" 
-  "15063" -> "15062" 
-  "15072" -> "15071" 
-  "15072" -> "15074" 
-  "15074" -> "15071" 
-  "15078" -> "15088" 
-  "15085" -> "15096" 
-  "15064" -> "15063" 
-  "15079" -> "15078" 
-  "15086" -> "15085" 
-  "15091" -> "15096" 
-  "15066" -> "15064" 
-  "15080" -> "15079" 
-  "15088" -> "15086" 
-  "15092" -> "15091" 
-  "15081" -> "15080" 
-  "15094" -> "15092" 
-  "15083" -> "15081" 
-  "15055" -> "15066" 
+digraph "GetMethodIdBadArgumentTest" {  
+"15066" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>219</SUB>> ]
+"15075" [label = <(&lt;operator&gt;.assignment,method = env_-&gt;GetMethodID(nullptr, &quot;&lt;init&gt;&quot;, &quot;(Ljava/lang/String;)V&quot;))<SUB>222</SUB>> ]
+"15084" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, method))<SUB>223</SUB>> ]
+"15087" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;GetMethodID received NULL jclass&quot;\012 : &quot;java_class == null&quot;))<SUB>224</SUB>> ]
+"15096" [label = <(&lt;operator&gt;.assignment,jlnsme = env_-&gt;FindClass(&quot;java/lang/NoSuchMethodError&quot;))<SUB>226</SUB>> ]
+"15103" [label = <(ASSERT_TRUE,ASSERT_TRUE(jlnsme != nullptr))<SUB>227</SUB>> ]
+"15107" [label = <(&lt;operator&gt;.assignment,method = env_-&gt;GetMethodID(jlnsme, nullptr, &quot;(Ljava/lang/String;)V&quot;))<SUB>228</SUB>> ]
+"15116" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, method))<SUB>229</SUB>> ]
+"15119" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;))<SUB>230</SUB>> ]
+"15127" [label = <(&lt;operator&gt;.assignment,method = env_-&gt;GetMethodID(jlnsme, &quot;&lt;init&gt;&quot;, nullptr))<SUB>232</SUB>> ]
+"15136" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, method))<SUB>233</SUB>> ]
+"15139" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;sig == null&quot;))<SUB>234</SUB>> ]
+"15147" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>237</SUB>> ]
+"15068" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>219</SUB>> ]
+"15077" [label = <(GetMethodID,env_-&gt;GetMethodID(nullptr, &quot;&lt;init&gt;&quot;, &quot;(Ljava/lang/String;)V&quot;))<SUB>222</SUB>> ]
+"15088" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>224</SUB>> ]
+"15091" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;GetMethodID received NULL jclass&quot;\012 : &quot;java_class == null&quot;)<SUB>224</SUB>> ]
+"15098" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/NoSuchMethodError&quot;))<SUB>226</SUB>> ]
+"15104" [label = <(&lt;operator&gt;.notEquals,jlnsme != nullptr)<SUB>227</SUB>> ]
+"15109" [label = <(GetMethodID,env_-&gt;GetMethodID(jlnsme, nullptr, &quot;(Ljava/lang/String;)V&quot;))<SUB>228</SUB>> ]
+"15120" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>230</SUB>> ]
+"15123" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;)<SUB>230</SUB>> ]
+"15129" [label = <(GetMethodID,env_-&gt;GetMethodID(jlnsme, &quot;&lt;init&gt;&quot;, nullptr))<SUB>232</SUB>> ]
+"15140" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>234</SUB>> ]
+"15143" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;sig == null&quot;)<SUB>234</SUB>> ]
+"15149" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>237</SUB>> ]
+"15069" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>219</SUB>> ]
+"15078" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetMethodID)<SUB>222</SUB>> ]
+"15090" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>224</SUB>> ]
+"15099" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>226</SUB>> ]
+"15110" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetMethodID)<SUB>228</SUB>> ]
+"15122" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>230</SUB>> ]
+"15130" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetMethodID)<SUB>232</SUB>> ]
+"15142" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>234</SUB>> ]
+"15150" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>237</SUB>> ]
+"15071" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>219</SUB>> ]
+"15080" [label = <(FIELD_IDENTIFIER,GetMethodID,GetMethodID)<SUB>222</SUB>> ]
+"15101" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>226</SUB>> ]
+"15112" [label = <(FIELD_IDENTIFIER,GetMethodID,GetMethodID)<SUB>228</SUB>> ]
+"15132" [label = <(FIELD_IDENTIFIER,GetMethodID,GetMethodID)<SUB>232</SUB>> ]
+"15152" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>237</SUB>> ]
+"15062" [label = <(METHOD,GetMethodIdBadArgumentTest)<SUB>218</SUB>> ]
+"15154" [label = <(METHOD_RETURN,void)<SUB>218</SUB>> ]
+  "15066" -> "15080" 
+  "15075" -> "15084" 
+  "15084" -> "15090" 
+  "15087" -> "15101" 
+  "15096" -> "15104" 
+  "15103" -> "15112" 
+  "15107" -> "15116" 
+  "15116" -> "15122" 
+  "15119" -> "15132" 
+  "15127" -> "15136" 
+  "15136" -> "15142" 
+  "15139" -> "15152" 
+  "15147" -> "15154" 
+  "15068" -> "15066" 
+  "15077" -> "15075" 
+  "15088" -> "15091" 
+  "15091" -> "15087" 
+  "15098" -> "15096" 
+  "15104" -> "15103" 
+  "15109" -> "15107" 
+  "15120" -> "15123" 
+  "15123" -> "15119" 
+  "15129" -> "15127" 
+  "15140" -> "15143" 
+  "15143" -> "15139" 
+  "15149" -> "15147" 
+  "15069" -> "15068" 
+  "15078" -> "15077" 
+  "15090" -> "15088" 
+  "15099" -> "15098" 
+  "15110" -> "15109" 
+  "15122" -> "15120" 
+  "15130" -> "15129" 
+  "15142" -> "15140" 
+  "15150" -> "15149" 
+  "15071" -> "15069" 
+  "15080" -> "15078" 
+  "15101" -> "15099" 
+  "15112" -> "15110" 
+  "15132" -> "15130" 
+  "15152" -> "15150" 
+  "15062" -> "15071" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/273-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/273-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/273-cfg.dot	2023-06-07 19:33:45.527394676 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/273-cfg.dot	2023-06-07 19:33:52.107393974 +0330
@@ -1,126 +1,83 @@
-digraph "FindClassTest" {  
-"15102" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>117</SUB>> ]
-"15110" [label = <(FindClass,env_-&gt;FindClass(nullptr))<SUB>121</SUB>> ]
-"15115" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;))<SUB>122</SUB>> ]
-"15123" [label = <(ExpectClassFound,ExpectClassFound(&quot;java/lang/String&quot;))<SUB>126</SUB>> ]
-"15125" [label = <(ExpectClassFound,ExpectClassFound(&quot;[Ljava/lang/String;&quot;))<SUB>128</SUB>> ]
-"15127" [label = <(ExpectClassFound,ExpectClassFound(&quot;[C&quot;))<SUB>130</SUB>> ]
-"15129" [label = <(ExpectClassNotFound,ExpectClassNotFound(&quot;C&quot;, check_jni, nullptr, &amp;check_jni_abort_catcher))<SUB>133</SUB>> ]
-"15135" [label = <(ExpectClassNotFound,ExpectClassNotFound(&quot;V&quot;, check_jni, nullptr, &amp;check_jni_abort_catcher))<SUB>134</SUB>> ]
-"15141" [label = <(ExpectClassNotFound,ExpectClassNotFound(&quot;K&quot;, check_jni, nullptr, &amp;check_jni_abort_catcher))<SUB>135</SUB>> ]
-"15190" [label = <(ExpectClassNotFound,ExpectClassNotFound(&quot;Ljava.lang.String;&quot;, check_jni, &quot;illegal class name 'Ljava.lang.String;'&quot;,\012 &amp;check_jni_abort_catcher))<SUB>152</SUB>> ]
-"15196" [label = <(ExpectClassNotFound,ExpectClassNotFound(&quot;[java.lang.String&quot;, check_jni, &quot;illegal class name '[java.lang.String'&quot;,\012 &amp;check_jni_abort_catcher))<SUB>154</SUB>> ]
-"15202" [label = <(ExpectClassNotFound,ExpectClassNotFound(&quot;Ljava/lang/String;&quot;, check_jni, &quot;illegal class name 'Ljava/lang/String;'&quot;,\012 &amp;check_jni_abort_catcher))<SUB>158</SUB>> ]
-"15208" [label = <(ExpectClassNotFound,ExpectClassNotFound(&quot;[java/lang/String&quot;, check_jni, &quot;illegal class name '[java/lang/String'&quot;,\012 &amp;check_jni_abort_catcher))<SUB>162</SUB>> ]
-"15214" [label = <(ExpectClassNotFound,ExpectClassNotFound(&quot;[K&quot;, check_jni, &quot;illegal class name '[K'&quot;, &amp;check_jni_abort_catcher))<SUB>165</SUB>> ]
-"15220" [label = <(ExpectClassNotFound,ExpectClassNotFound(&quot;[V&quot;, check_jni, &quot;illegal class name '[V'&quot;, &amp;check_jni_abort_catcher))<SUB>168</SUB>> ]
-"15226" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>170</SUB>> ]
-"15104" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>117</SUB>> ]
-"15111" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>121</SUB>> ]
-"15116" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>122</SUB>> ]
-"15119" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;)<SUB>122</SUB>> ]
-"15133" [label = <(&lt;operator&gt;.addressOf,&amp;check_jni_abort_catcher)<SUB>133</SUB>> ]
-"15139" [label = <(&lt;operator&gt;.addressOf,&amp;check_jni_abort_catcher)<SUB>134</SUB>> ]
-"15145" [label = <(&lt;operator&gt;.addressOf,&amp;check_jni_abort_catcher)<SUB>135</SUB>> ]
-"15194" [label = <(&lt;operator&gt;.addressOf,&amp;check_jni_abort_catcher)<SUB>153</SUB>> ]
-"15200" [label = <(&lt;operator&gt;.addressOf,&amp;check_jni_abort_catcher)<SUB>155</SUB>> ]
-"15206" [label = <(&lt;operator&gt;.addressOf,&amp;check_jni_abort_catcher)<SUB>159</SUB>> ]
-"15212" [label = <(&lt;operator&gt;.addressOf,&amp;check_jni_abort_catcher)<SUB>163</SUB>> ]
-"15218" [label = <(&lt;operator&gt;.addressOf,&amp;check_jni_abort_catcher)<SUB>165</SUB>> ]
-"15224" [label = <(&lt;operator&gt;.addressOf,&amp;check_jni_abort_catcher)<SUB>168</SUB>> ]
-"15228" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>170</SUB>> ]
-"15105" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>117</SUB>> ]
-"15113" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>121</SUB>> ]
-"15118" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>122</SUB>> ]
-"15150" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;FindClass(&quot;java.lang.String&quot;), nullptr))<SUB>139</SUB>> ]
-"15157" [label = <(EXPECT_FALSE,EXPECT_FALSE(env_-&gt;ExceptionCheck()))<SUB>140</SUB>> ]
-"15162" [label = <(Check,check_jni_abort_catcher.Check(&quot;illegal class name 'java.lang.String'&quot;))<SUB>141</SUB>> ]
-"15167" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;FindClass(&quot;[Ljava.lang.String;&quot;), nullptr))<SUB>143</SUB>> ]
-"15174" [label = <(EXPECT_FALSE,EXPECT_FALSE(env_-&gt;ExceptionCheck()))<SUB>144</SUB>> ]
-"15179" [label = <(Check,check_jni_abort_catcher.Check(&quot;illegal class name '[Ljava.lang.String;'&quot;))<SUB>145</SUB>> ]
-"15229" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>170</SUB>> ]
-"15107" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>117</SUB>> ]
-"15151" [label = <(FindClass,env_-&gt;FindClass(&quot;java.lang.String&quot;))<SUB>139</SUB>> ]
-"15158" [label = <(ExceptionCheck,env_-&gt;ExceptionCheck())<SUB>140</SUB>> ]
-"15163" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>141</SUB>> ]
-"15168" [label = <(FindClass,env_-&gt;FindClass(&quot;[Ljava.lang.String;&quot;))<SUB>143</SUB>> ]
-"15175" [label = <(ExceptionCheck,env_-&gt;ExceptionCheck())<SUB>144</SUB>> ]
-"15180" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>145</SUB>> ]
-"15186" [label = <(ExpectClassFound,ExpectClassFound(&quot;java.lang.String&quot;))<SUB>148</SUB>> ]
-"15188" [label = <(ExpectClassFound,ExpectClassFound(&quot;[Ljava.lang.String;&quot;))<SUB>149</SUB>> ]
-"15231" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>170</SUB>> ]
-"15152" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>139</SUB>> ]
-"15159" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ExceptionCheck)<SUB>140</SUB>> ]
-"15165" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>141</SUB>> ]
-"15169" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>143</SUB>> ]
-"15176" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ExceptionCheck)<SUB>144</SUB>> ]
-"15182" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>145</SUB>> ]
-"15154" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>139</SUB>> ]
-"15161" [label = <(FIELD_IDENTIFIER,ExceptionCheck,ExceptionCheck)<SUB>140</SUB>> ]
-"15171" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>143</SUB>> ]
-"15178" [label = <(FIELD_IDENTIFIER,ExceptionCheck,ExceptionCheck)<SUB>144</SUB>> ]
-"15098" [label = <(METHOD,FindClassTest)<SUB>116</SUB>> ]
-"15233" [label = <(METHOD_RETURN,void)<SUB>116</SUB>> ]
-  "15102" -> "15113" 
-  "15110" -> "15118" 
-  "15115" -> "15123" 
-  "15123" -> "15125" 
-  "15125" -> "15127" 
-  "15127" -> "15133" 
-  "15129" -> "15139" 
-  "15135" -> "15145" 
-  "15141" -> "15154" 
-  "15141" -> "15186" 
-  "15190" -> "15200" 
-  "15196" -> "15206" 
-  "15202" -> "15212" 
-  "15208" -> "15218" 
-  "15214" -> "15224" 
-  "15220" -> "15231" 
-  "15226" -> "15233" 
-  "15104" -> "15102" 
-  "15111" -> "15110" 
-  "15116" -> "15119" 
-  "15119" -> "15115" 
-  "15133" -> "15129" 
-  "15139" -> "15135" 
-  "15145" -> "15141" 
-  "15194" -> "15190" 
-  "15200" -> "15196" 
-  "15206" -> "15202" 
-  "15212" -> "15208" 
-  "15218" -> "15214" 
-  "15224" -> "15220" 
-  "15228" -> "15226" 
-  "15105" -> "15104" 
-  "15113" -> "15111" 
-  "15118" -> "15116" 
-  "15150" -> "15161" 
-  "15157" -> "15165" 
-  "15162" -> "15171" 
-  "15167" -> "15178" 
-  "15174" -> "15182" 
-  "15179" -> "15194" 
-  "15229" -> "15228" 
-  "15107" -> "15105" 
-  "15151" -> "15150" 
-  "15158" -> "15157" 
+digraph "GetStaticMethodIdBadArgumentTest" {  
+"15160" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>241</SUB>> ]
+"15169" [label = <(&lt;operator&gt;.assignment,method = env_-&gt;GetStaticMethodID(nullptr, &quot;valueOf&quot;, &quot;(I)Ljava/lang/String;&quot;))<SUB>244</SUB>> ]
+"15178" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, method))<SUB>245</SUB>> ]
+"15181" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;GetStaticMethodID received NULL jclass&quot;\012 : &quot;java_class == null&quot;))<SUB>246</SUB>> ]
+"15190" [label = <(&lt;operator&gt;.assignment,jlstring = env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>248</SUB>> ]
+"15197" [label = <(&lt;operator&gt;.assignment,method = env_-&gt;GetStaticMethodID(jlstring, nullptr, &quot;(I)Ljava/lang/String;&quot;))<SUB>249</SUB>> ]
+"15206" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, method))<SUB>250</SUB>> ]
+"15209" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;))<SUB>251</SUB>> ]
+"15217" [label = <(&lt;operator&gt;.assignment,method = env_-&gt;GetStaticMethodID(jlstring, &quot;valueOf&quot;, nullptr))<SUB>253</SUB>> ]
+"15226" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, method))<SUB>254</SUB>> ]
+"15229" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;sig == null&quot;))<SUB>255</SUB>> ]
+"15237" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>258</SUB>> ]
+"15162" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>241</SUB>> ]
+"15171" [label = <(GetStaticMethodID,env_-&gt;GetStaticMethodID(nullptr, &quot;valueOf&quot;, &quot;(I)Ljava/lang/String;&quot;))<SUB>244</SUB>> ]
+"15182" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>246</SUB>> ]
+"15185" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;GetStaticMethodID received NULL jclass&quot;\012 : &quot;java_class == null&quot;)<SUB>246</SUB>> ]
+"15192" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>248</SUB>> ]
+"15199" [label = <(GetStaticMethodID,env_-&gt;GetStaticMethodID(jlstring, nullptr, &quot;(I)Ljava/lang/String;&quot;))<SUB>249</SUB>> ]
+"15210" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>251</SUB>> ]
+"15213" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;)<SUB>251</SUB>> ]
+"15219" [label = <(GetStaticMethodID,env_-&gt;GetStaticMethodID(jlstring, &quot;valueOf&quot;, nullptr))<SUB>253</SUB>> ]
+"15230" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>255</SUB>> ]
+"15233" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;sig == null&quot;)<SUB>255</SUB>> ]
+"15239" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>258</SUB>> ]
+"15163" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>241</SUB>> ]
+"15172" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetStaticMethodID)<SUB>244</SUB>> ]
+"15184" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>246</SUB>> ]
+"15193" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>248</SUB>> ]
+"15200" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetStaticMethodID)<SUB>249</SUB>> ]
+"15212" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>251</SUB>> ]
+"15220" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetStaticMethodID)<SUB>253</SUB>> ]
+"15232" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>255</SUB>> ]
+"15240" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>258</SUB>> ]
+"15165" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>241</SUB>> ]
+"15174" [label = <(FIELD_IDENTIFIER,GetStaticMethodID,GetStaticMethodID)<SUB>244</SUB>> ]
+"15195" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>248</SUB>> ]
+"15202" [label = <(FIELD_IDENTIFIER,GetStaticMethodID,GetStaticMethodID)<SUB>249</SUB>> ]
+"15222" [label = <(FIELD_IDENTIFIER,GetStaticMethodID,GetStaticMethodID)<SUB>253</SUB>> ]
+"15242" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>258</SUB>> ]
+"15156" [label = <(METHOD,GetStaticMethodIdBadArgumentTest)<SUB>240</SUB>> ]
+"15244" [label = <(METHOD_RETURN,void)<SUB>240</SUB>> ]
+  "15160" -> "15174" 
+  "15169" -> "15178" 
+  "15178" -> "15184" 
+  "15181" -> "15195" 
+  "15190" -> "15202" 
+  "15197" -> "15206" 
+  "15206" -> "15212" 
+  "15209" -> "15222" 
+  "15217" -> "15226" 
+  "15226" -> "15232" 
+  "15229" -> "15242" 
+  "15237" -> "15244" 
+  "15162" -> "15160" 
+  "15171" -> "15169" 
+  "15182" -> "15185" 
+  "15185" -> "15181" 
+  "15192" -> "15190" 
+  "15199" -> "15197" 
+  "15210" -> "15213" 
+  "15213" -> "15209" 
+  "15219" -> "15217" 
+  "15230" -> "15233" 
+  "15233" -> "15229" 
+  "15239" -> "15237" 
   "15163" -> "15162" 
-  "15168" -> "15167" 
-  "15175" -> "15174" 
-  "15180" -> "15179" 
-  "15186" -> "15188" 
-  "15188" -> "15194" 
-  "15231" -> "15229" 
-  "15152" -> "15151" 
-  "15159" -> "15158" 
+  "15172" -> "15171" 
+  "15184" -> "15182" 
+  "15193" -> "15192" 
+  "15200" -> "15199" 
+  "15212" -> "15210" 
+  "15220" -> "15219" 
+  "15232" -> "15230" 
+  "15240" -> "15239" 
   "15165" -> "15163" 
-  "15169" -> "15168" 
-  "15176" -> "15175" 
-  "15182" -> "15180" 
-  "15154" -> "15152" 
-  "15161" -> "15159" 
-  "15171" -> "15169" 
-  "15178" -> "15176" 
-  "15098" -> "15107" 
+  "15174" -> "15172" 
+  "15195" -> "15193" 
+  "15202" -> "15200" 
+  "15222" -> "15220" 
+  "15242" -> "15240" 
+  "15156" -> "15165" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/274-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/274-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/274-cfg.dot	2023-06-07 19:33:45.527394676 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/274-cfg.dot	2023-06-07 19:33:52.107393974 +0330
@@ -1,85 +1,96 @@
-digraph "GetFieldIdBadArgumentTest" {  
-"15239" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>174</SUB>> ]
-"15248" [label = <(&lt;operator&gt;.assignment,c = env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>177</SUB>> ]
-"15255" [label = <(ASSERT_NE,ASSERT_NE(c, nullptr))<SUB>178</SUB>> ]
-"15259" [label = <(&lt;operator&gt;.assignment,fid = env_-&gt;GetFieldID(nullptr, &quot;count&quot;, &quot;I&quot;))<SUB>180</SUB>> ]
-"15268" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, fid))<SUB>181</SUB>> ]
-"15271" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;GetFieldID received NULL jclass&quot;\012 : &quot;java_class == null&quot;))<SUB>182</SUB>> ]
-"15279" [label = <(&lt;operator&gt;.assignment,fid = env_-&gt;GetFieldID(c, nullptr, &quot;I&quot;))<SUB>184</SUB>> ]
-"15288" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, fid))<SUB>185</SUB>> ]
-"15291" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;))<SUB>186</SUB>> ]
-"15299" [label = <(&lt;operator&gt;.assignment,fid = env_-&gt;GetFieldID(c, &quot;count&quot;, nullptr))<SUB>188</SUB>> ]
-"15308" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, fid))<SUB>189</SUB>> ]
-"15311" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;sig == null&quot;))<SUB>190</SUB>> ]
-"15319" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>193</SUB>> ]
-"15241" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>174</SUB>> ]
-"15250" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>177</SUB>> ]
-"15261" [label = <(GetFieldID,env_-&gt;GetFieldID(nullptr, &quot;count&quot;, &quot;I&quot;))<SUB>180</SUB>> ]
-"15272" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>182</SUB>> ]
-"15275" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;GetFieldID received NULL jclass&quot;\012 : &quot;java_class == null&quot;)<SUB>182</SUB>> ]
-"15281" [label = <(GetFieldID,env_-&gt;GetFieldID(c, nullptr, &quot;I&quot;))<SUB>184</SUB>> ]
-"15292" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>186</SUB>> ]
-"15295" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;)<SUB>186</SUB>> ]
-"15301" [label = <(GetFieldID,env_-&gt;GetFieldID(c, &quot;count&quot;, nullptr))<SUB>188</SUB>> ]
-"15312" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>190</SUB>> ]
-"15315" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;sig == null&quot;)<SUB>190</SUB>> ]
-"15321" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>193</SUB>> ]
-"15242" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>174</SUB>> ]
-"15251" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>177</SUB>> ]
-"15262" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetFieldID)<SUB>180</SUB>> ]
-"15274" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>182</SUB>> ]
-"15282" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetFieldID)<SUB>184</SUB>> ]
-"15294" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>186</SUB>> ]
-"15302" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetFieldID)<SUB>188</SUB>> ]
-"15314" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>190</SUB>> ]
-"15322" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>193</SUB>> ]
-"15244" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>174</SUB>> ]
-"15253" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>177</SUB>> ]
-"15264" [label = <(FIELD_IDENTIFIER,GetFieldID,GetFieldID)<SUB>180</SUB>> ]
-"15284" [label = <(FIELD_IDENTIFIER,GetFieldID,GetFieldID)<SUB>184</SUB>> ]
-"15304" [label = <(FIELD_IDENTIFIER,GetFieldID,GetFieldID)<SUB>188</SUB>> ]
-"15324" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>193</SUB>> ]
-"15235" [label = <(METHOD,GetFieldIdBadArgumentTest)<SUB>173</SUB>> ]
-"15326" [label = <(METHOD_RETURN,void)<SUB>173</SUB>> ]
-  "15239" -> "15253" 
-  "15248" -> "15255" 
-  "15255" -> "15264" 
-  "15259" -> "15268" 
-  "15268" -> "15274" 
-  "15271" -> "15284" 
+digraph "GetFromReflectedField_ToReflectedFieldBadArgumentTest" {  
+"15250" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>262</SUB>> ]
+"15259" [label = <(&lt;operator&gt;.assignment,c = env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>265</SUB>> ]
+"15266" [label = <(ASSERT_NE,ASSERT_NE(c, nullptr))<SUB>266</SUB>> ]
+"15270" [label = <(&lt;operator&gt;.assignment,fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;))<SUB>267</SUB>> ]
+"15279" [label = <(ASSERT_NE,ASSERT_NE(fid, nullptr))<SUB>268</SUB>> ]
+"15283" [label = <(&lt;operator&gt;.assignment,field = env_-&gt;ToReflectedField(nullptr, fid, JNI_FALSE))<SUB>271</SUB>> ]
+"15308" [label = <(&lt;operator&gt;.assignment,field = env_-&gt;ToReflectedField(c, nullptr, JNI_FALSE))<SUB>279</SUB>> ]
+"15317" [label = <(EXPECT_EQ,EXPECT_EQ(field, nullptr))<SUB>280</SUB>> ]
+"15320" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;jfieldID was NULL&quot;\012 : &quot;fid == null&quot;))<SUB>281</SUB>> ]
+"15328" [label = <(&lt;operator&gt;.assignment,fid = env_-&gt;FromReflectedField(nullptr))<SUB>284</SUB>> ]
+"15335" [label = <(ASSERT_EQ,ASSERT_EQ(fid, nullptr))<SUB>285</SUB>> ]
+"15338" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;expected non-null java.lang.reflect.Field&quot;\012 : &quot;jlr_field == null&quot;))<SUB>286</SUB>> ]
+"15346" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>289</SUB>> ]
+"15252" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>262</SUB>> ]
+"15261" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>265</SUB>> ]
+"15272" [label = <(GetFieldID,env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;))<SUB>267</SUB>> ]
+"15285" [label = <(ToReflectedField,env_-&gt;ToReflectedField(nullptr, fid, JNI_FALSE))<SUB>271</SUB>> ]
+"15310" [label = <(ToReflectedField,env_-&gt;ToReflectedField(c, nullptr, JNI_FALSE))<SUB>279</SUB>> ]
+"15321" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>281</SUB>> ]
+"15324" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;jfieldID was NULL&quot;\012 : &quot;fid == null&quot;)<SUB>281</SUB>> ]
+"15330" [label = <(FromReflectedField,env_-&gt;FromReflectedField(nullptr))<SUB>284</SUB>> ]
+"15339" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>286</SUB>> ]
+"15342" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;expected non-null java.lang.reflect.Field&quot;\012 : &quot;jlr_field == null&quot;)<SUB>286</SUB>> ]
+"15348" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>289</SUB>> ]
+"15253" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>262</SUB>> ]
+"15262" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>265</SUB>> ]
+"15273" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetFieldID)<SUB>267</SUB>> ]
+"15286" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ToReflectedField)<SUB>271</SUB>> ]
+"15295" [label = <(EXPECT_EQ,EXPECT_EQ(field, nullptr))<SUB>273</SUB>> ]
+"15298" [label = <(Check,check_jni_abort_catcher.Check(&quot;ToReflectedField received NULL jclass&quot;))<SUB>274</SUB>> ]
+"15311" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ToReflectedField)<SUB>279</SUB>> ]
+"15323" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>281</SUB>> ]
+"15331" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FromReflectedField)<SUB>284</SUB>> ]
+"15341" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>286</SUB>> ]
+"15349" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>289</SUB>> ]
+"15255" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>262</SUB>> ]
+"15264" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>265</SUB>> ]
+"15275" [label = <(FIELD_IDENTIFIER,GetFieldID,GetFieldID)<SUB>267</SUB>> ]
+"15288" [label = <(FIELD_IDENTIFIER,ToReflectedField,ToReflectedField)<SUB>271</SUB>> ]
+"15299" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>274</SUB>> ]
+"15305" [label = <(EXPECT_NE,EXPECT_NE(field, nullptr))<SUB>276</SUB>> ]
+"15313" [label = <(FIELD_IDENTIFIER,ToReflectedField,ToReflectedField)<SUB>279</SUB>> ]
+"15333" [label = <(FIELD_IDENTIFIER,FromReflectedField,FromReflectedField)<SUB>284</SUB>> ]
+"15351" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>289</SUB>> ]
+"15301" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>274</SUB>> ]
+"15246" [label = <(METHOD,GetFromReflectedField_ToReflectedFieldBadArgumentTest)<SUB>261</SUB>> ]
+"15353" [label = <(METHOD_RETURN,void)<SUB>261</SUB>> ]
+  "15250" -> "15264" 
+  "15259" -> "15266" 
+  "15266" -> "15275" 
+  "15270" -> "15279" 
   "15279" -> "15288" 
-  "15288" -> "15294" 
-  "15291" -> "15304" 
-  "15299" -> "15308" 
-  "15308" -> "15314" 
-  "15311" -> "15324" 
-  "15319" -> "15326" 
-  "15241" -> "15239" 
-  "15250" -> "15248" 
+  "15283" -> "15295" 
+  "15283" -> "15305" 
+  "15308" -> "15317" 
+  "15317" -> "15323" 
+  "15320" -> "15333" 
+  "15328" -> "15335" 
+  "15335" -> "15341" 
+  "15338" -> "15351" 
+  "15346" -> "15353" 
+  "15252" -> "15250" 
   "15261" -> "15259" 
-  "15272" -> "15275" 
-  "15275" -> "15271" 
-  "15281" -> "15279" 
-  "15292" -> "15295" 
-  "15295" -> "15291" 
-  "15301" -> "15299" 
-  "15312" -> "15315" 
-  "15315" -> "15311" 
-  "15321" -> "15319" 
-  "15242" -> "15241" 
-  "15251" -> "15250" 
+  "15272" -> "15270" 
+  "15285" -> "15283" 
+  "15310" -> "15308" 
+  "15321" -> "15324" 
+  "15324" -> "15320" 
+  "15330" -> "15328" 
+  "15339" -> "15342" 
+  "15342" -> "15338" 
+  "15348" -> "15346" 
+  "15253" -> "15252" 
   "15262" -> "15261" 
-  "15274" -> "15272" 
-  "15282" -> "15281" 
-  "15294" -> "15292" 
-  "15302" -> "15301" 
-  "15314" -> "15312" 
-  "15322" -> "15321" 
-  "15244" -> "15242" 
-  "15253" -> "15251" 
+  "15273" -> "15272" 
+  "15286" -> "15285" 
+  "15295" -> "15301" 
+  "15298" -> "15313" 
+  "15311" -> "15310" 
+  "15323" -> "15321" 
+  "15331" -> "15330" 
+  "15341" -> "15339" 
+  "15349" -> "15348" 
+  "15255" -> "15253" 
   "15264" -> "15262" 
-  "15284" -> "15282" 
-  "15304" -> "15302" 
-  "15324" -> "15322" 
-  "15235" -> "15244" 
+  "15275" -> "15273" 
+  "15288" -> "15286" 
+  "15299" -> "15298" 
+  "15305" -> "15313" 
+  "15313" -> "15311" 
+  "15333" -> "15331" 
+  "15351" -> "15349" 
+  "15301" -> "15299" 
+  "15246" -> "15255" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/275-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/275-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/275-cfg.dot	2023-06-07 19:33:45.527394676 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/275-cfg.dot	2023-06-07 19:33:52.107393974 +0330
@@ -1,85 +1,96 @@
-digraph "GetStaticFieldIdBadArgumentTest" {  
-"15332" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>197</SUB>> ]
-"15341" [label = <(&lt;operator&gt;.assignment,c = env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>200</SUB>> ]
-"15348" [label = <(ASSERT_NE,ASSERT_NE(c, nullptr))<SUB>201</SUB>> ]
-"15352" [label = <(&lt;operator&gt;.assignment,fid = env_-&gt;GetStaticFieldID(nullptr, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;Ljava/util/Comparator;&quot;))<SUB>203</SUB>> ]
-"15361" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, fid))<SUB>204</SUB>> ]
-"15364" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;GetStaticFieldID received NULL jclass&quot;\012 : &quot;java_class == null&quot;))<SUB>205</SUB>> ]
-"15372" [label = <(&lt;operator&gt;.assignment,fid = env_-&gt;GetStaticFieldID(c, nullptr, &quot;Ljava/util/Comparator;&quot;))<SUB>207</SUB>> ]
-"15381" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, fid))<SUB>208</SUB>> ]
-"15384" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;))<SUB>209</SUB>> ]
-"15392" [label = <(&lt;operator&gt;.assignment,fid = env_-&gt;GetStaticFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, nullptr))<SUB>211</SUB>> ]
-"15401" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, fid))<SUB>212</SUB>> ]
-"15404" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;sig == null&quot;))<SUB>213</SUB>> ]
-"15412" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>216</SUB>> ]
-"15334" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>197</SUB>> ]
-"15343" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>200</SUB>> ]
-"15354" [label = <(GetStaticFieldID,env_-&gt;GetStaticFieldID(nullptr, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;Ljava/util/Comparator;&quot;))<SUB>203</SUB>> ]
-"15365" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>205</SUB>> ]
-"15368" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;GetStaticFieldID received NULL jclass&quot;\012 : &quot;java_class == null&quot;)<SUB>205</SUB>> ]
-"15374" [label = <(GetStaticFieldID,env_-&gt;GetStaticFieldID(c, nullptr, &quot;Ljava/util/Comparator;&quot;))<SUB>207</SUB>> ]
-"15385" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>209</SUB>> ]
-"15388" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;)<SUB>209</SUB>> ]
-"15394" [label = <(GetStaticFieldID,env_-&gt;GetStaticFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, nullptr))<SUB>211</SUB>> ]
-"15405" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>213</SUB>> ]
-"15408" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;sig == null&quot;)<SUB>213</SUB>> ]
-"15414" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>216</SUB>> ]
-"15335" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>197</SUB>> ]
-"15344" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>200</SUB>> ]
-"15355" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetStaticFieldID)<SUB>203</SUB>> ]
-"15367" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>205</SUB>> ]
-"15375" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetStaticFieldID)<SUB>207</SUB>> ]
-"15387" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>209</SUB>> ]
-"15395" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetStaticFieldID)<SUB>211</SUB>> ]
-"15407" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>213</SUB>> ]
-"15415" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>216</SUB>> ]
-"15337" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>197</SUB>> ]
-"15346" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>200</SUB>> ]
-"15357" [label = <(FIELD_IDENTIFIER,GetStaticFieldID,GetStaticFieldID)<SUB>203</SUB>> ]
-"15377" [label = <(FIELD_IDENTIFIER,GetStaticFieldID,GetStaticFieldID)<SUB>207</SUB>> ]
-"15397" [label = <(FIELD_IDENTIFIER,GetStaticFieldID,GetStaticFieldID)<SUB>211</SUB>> ]
-"15417" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>216</SUB>> ]
-"15328" [label = <(METHOD,GetStaticFieldIdBadArgumentTest)<SUB>196</SUB>> ]
-"15419" [label = <(METHOD_RETURN,void)<SUB>196</SUB>> ]
-  "15332" -> "15346" 
-  "15341" -> "15348" 
-  "15348" -> "15357" 
-  "15352" -> "15361" 
-  "15361" -> "15367" 
-  "15364" -> "15377" 
-  "15372" -> "15381" 
-  "15381" -> "15387" 
-  "15384" -> "15397" 
-  "15392" -> "15401" 
-  "15401" -> "15407" 
-  "15404" -> "15417" 
-  "15412" -> "15419" 
-  "15334" -> "15332" 
-  "15343" -> "15341" 
-  "15354" -> "15352" 
-  "15365" -> "15368" 
-  "15368" -> "15364" 
-  "15374" -> "15372" 
-  "15385" -> "15388" 
-  "15388" -> "15384" 
+digraph "GetFromReflectedMethod_ToReflectedMethodBadArgumentTest" {  
+"15359" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>293</SUB>> ]
+"15368" [label = <(&lt;operator&gt;.assignment,c = env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>296</SUB>> ]
+"15375" [label = <(ASSERT_NE,ASSERT_NE(c, nullptr))<SUB>297</SUB>> ]
+"15379" [label = <(&lt;operator&gt;.assignment,mid = env_-&gt;GetMethodID(c, &quot;&lt;init&gt;&quot;, &quot;()V&quot;))<SUB>298</SUB>> ]
+"15388" [label = <(ASSERT_NE,ASSERT_NE(mid, nullptr))<SUB>299</SUB>> ]
+"15392" [label = <(&lt;operator&gt;.assignment,method = env_-&gt;ToReflectedMethod(nullptr, mid, JNI_FALSE))<SUB>302</SUB>> ]
+"15417" [label = <(&lt;operator&gt;.assignment,method = env_-&gt;ToReflectedMethod(c, nullptr, JNI_FALSE))<SUB>310</SUB>> ]
+"15426" [label = <(EXPECT_EQ,EXPECT_EQ(method, nullptr))<SUB>311</SUB>> ]
+"15429" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;jmethodID was NULL&quot;\012 : &quot;mid == null&quot;))<SUB>312</SUB>> ]
+"15437" [label = <(&lt;operator&gt;.assignment,mid = env_-&gt;FromReflectedMethod(method))<SUB>314</SUB>> ]
+"15444" [label = <(ASSERT_EQ,ASSERT_EQ(mid, nullptr))<SUB>315</SUB>> ]
+"15447" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;expected non-null method&quot; : &quot;jlr_method == null&quot;))<SUB>316</SUB>> ]
+"15455" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>318</SUB>> ]
+"15361" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>293</SUB>> ]
+"15370" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>296</SUB>> ]
+"15381" [label = <(GetMethodID,env_-&gt;GetMethodID(c, &quot;&lt;init&gt;&quot;, &quot;()V&quot;))<SUB>298</SUB>> ]
+"15394" [label = <(ToReflectedMethod,env_-&gt;ToReflectedMethod(nullptr, mid, JNI_FALSE))<SUB>302</SUB>> ]
+"15419" [label = <(ToReflectedMethod,env_-&gt;ToReflectedMethod(c, nullptr, JNI_FALSE))<SUB>310</SUB>> ]
+"15430" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>312</SUB>> ]
+"15433" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;jmethodID was NULL&quot;\012 : &quot;mid == null&quot;)<SUB>312</SUB>> ]
+"15439" [label = <(FromReflectedMethod,env_-&gt;FromReflectedMethod(method))<SUB>314</SUB>> ]
+"15448" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>316</SUB>> ]
+"15451" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;expected non-null method&quot; : &quot;jlr_method == null&quot;)<SUB>316</SUB>> ]
+"15457" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>318</SUB>> ]
+"15362" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>293</SUB>> ]
+"15371" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>296</SUB>> ]
+"15382" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetMethodID)<SUB>298</SUB>> ]
+"15395" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ToReflectedMethod)<SUB>302</SUB>> ]
+"15404" [label = <(EXPECT_EQ,EXPECT_EQ(method, nullptr))<SUB>304</SUB>> ]
+"15407" [label = <(Check,check_jni_abort_catcher.Check(&quot;ToReflectedMethod received NULL jclass&quot;))<SUB>305</SUB>> ]
+"15420" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ToReflectedMethod)<SUB>310</SUB>> ]
+"15432" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>312</SUB>> ]
+"15440" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FromReflectedMethod)<SUB>314</SUB>> ]
+"15450" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>316</SUB>> ]
+"15458" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>318</SUB>> ]
+"15364" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>293</SUB>> ]
+"15373" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>296</SUB>> ]
+"15384" [label = <(FIELD_IDENTIFIER,GetMethodID,GetMethodID)<SUB>298</SUB>> ]
+"15397" [label = <(FIELD_IDENTIFIER,ToReflectedMethod,ToReflectedMethod)<SUB>302</SUB>> ]
+"15408" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>305</SUB>> ]
+"15414" [label = <(EXPECT_NE,EXPECT_NE(method, nullptr))<SUB>307</SUB>> ]
+"15422" [label = <(FIELD_IDENTIFIER,ToReflectedMethod,ToReflectedMethod)<SUB>310</SUB>> ]
+"15442" [label = <(FIELD_IDENTIFIER,FromReflectedMethod,FromReflectedMethod)<SUB>314</SUB>> ]
+"15460" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>318</SUB>> ]
+"15410" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>305</SUB>> ]
+"15355" [label = <(METHOD,GetFromReflectedMethod_ToReflectedMethodBadArgumentTest)<SUB>292</SUB>> ]
+"15462" [label = <(METHOD_RETURN,void)<SUB>292</SUB>> ]
+  "15359" -> "15373" 
+  "15368" -> "15375" 
+  "15375" -> "15384" 
+  "15379" -> "15388" 
+  "15388" -> "15397" 
+  "15392" -> "15404" 
+  "15392" -> "15414" 
+  "15417" -> "15426" 
+  "15426" -> "15432" 
+  "15429" -> "15442" 
+  "15437" -> "15444" 
+  "15444" -> "15450" 
+  "15447" -> "15460" 
+  "15455" -> "15462" 
+  "15361" -> "15359" 
+  "15370" -> "15368" 
+  "15381" -> "15379" 
   "15394" -> "15392" 
-  "15405" -> "15408" 
-  "15408" -> "15404" 
-  "15414" -> "15412" 
-  "15335" -> "15334" 
-  "15344" -> "15343" 
-  "15355" -> "15354" 
-  "15367" -> "15365" 
-  "15375" -> "15374" 
-  "15387" -> "15385" 
+  "15419" -> "15417" 
+  "15430" -> "15433" 
+  "15433" -> "15429" 
+  "15439" -> "15437" 
+  "15448" -> "15451" 
+  "15451" -> "15447" 
+  "15457" -> "15455" 
+  "15362" -> "15361" 
+  "15371" -> "15370" 
+  "15382" -> "15381" 
   "15395" -> "15394" 
-  "15407" -> "15405" 
-  "15415" -> "15414" 
-  "15337" -> "15335" 
-  "15346" -> "15344" 
-  "15357" -> "15355" 
-  "15377" -> "15375" 
+  "15404" -> "15410" 
+  "15407" -> "15422" 
+  "15420" -> "15419" 
+  "15432" -> "15430" 
+  "15440" -> "15439" 
+  "15450" -> "15448" 
+  "15458" -> "15457" 
+  "15364" -> "15362" 
+  "15373" -> "15371" 
+  "15384" -> "15382" 
   "15397" -> "15395" 
-  "15417" -> "15415" 
-  "15328" -> "15337" 
+  "15408" -> "15407" 
+  "15414" -> "15422" 
+  "15422" -> "15420" 
+  "15442" -> "15440" 
+  "15460" -> "15458" 
+  "15410" -> "15408" 
+  "15355" -> "15364" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/276-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/276-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/276-cfg.dot	2023-06-07 19:33:45.527394676 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/276-cfg.dot	2023-06-07 19:33:52.107393974 +0330
@@ -1,87 +1,79 @@
-digraph "GetMethodIdBadArgumentTest" {  
-"15425" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>220</SUB>> ]
-"15434" [label = <(&lt;operator&gt;.assignment,method = env_-&gt;GetMethodID(nullptr, &quot;&lt;init&gt;&quot;, &quot;(Ljava/lang/String;)V&quot;))<SUB>223</SUB>> ]
-"15443" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, method))<SUB>224</SUB>> ]
-"15446" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;GetMethodID received NULL jclass&quot;\012 : &quot;java_class == null&quot;))<SUB>225</SUB>> ]
-"15455" [label = <(&lt;operator&gt;.assignment,jlnsme = env_-&gt;FindClass(&quot;java/lang/NoSuchMethodError&quot;))<SUB>227</SUB>> ]
-"15462" [label = <(ASSERT_TRUE,ASSERT_TRUE(jlnsme != nullptr))<SUB>228</SUB>> ]
-"15466" [label = <(&lt;operator&gt;.assignment,method = env_-&gt;GetMethodID(jlnsme, nullptr, &quot;(Ljava/lang/String;)V&quot;))<SUB>229</SUB>> ]
-"15475" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, method))<SUB>230</SUB>> ]
-"15478" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;))<SUB>231</SUB>> ]
-"15486" [label = <(&lt;operator&gt;.assignment,method = env_-&gt;GetMethodID(jlnsme, &quot;&lt;init&gt;&quot;, nullptr))<SUB>233</SUB>> ]
-"15495" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, method))<SUB>234</SUB>> ]
-"15498" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;sig == null&quot;))<SUB>235</SUB>> ]
-"15506" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>238</SUB>> ]
-"15427" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>220</SUB>> ]
-"15436" [label = <(GetMethodID,env_-&gt;GetMethodID(nullptr, &quot;&lt;init&gt;&quot;, &quot;(Ljava/lang/String;)V&quot;))<SUB>223</SUB>> ]
-"15447" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>225</SUB>> ]
-"15450" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;GetMethodID received NULL jclass&quot;\012 : &quot;java_class == null&quot;)<SUB>225</SUB>> ]
-"15457" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/NoSuchMethodError&quot;))<SUB>227</SUB>> ]
-"15463" [label = <(&lt;operator&gt;.notEquals,jlnsme != nullptr)<SUB>228</SUB>> ]
-"15468" [label = <(GetMethodID,env_-&gt;GetMethodID(jlnsme, nullptr, &quot;(Ljava/lang/String;)V&quot;))<SUB>229</SUB>> ]
-"15479" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>231</SUB>> ]
-"15482" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;)<SUB>231</SUB>> ]
-"15488" [label = <(GetMethodID,env_-&gt;GetMethodID(jlnsme, &quot;&lt;init&gt;&quot;, nullptr))<SUB>233</SUB>> ]
-"15499" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>235</SUB>> ]
-"15502" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;sig == null&quot;)<SUB>235</SUB>> ]
-"15508" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>238</SUB>> ]
-"15428" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>220</SUB>> ]
-"15437" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetMethodID)<SUB>223</SUB>> ]
-"15449" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>225</SUB>> ]
-"15458" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>227</SUB>> ]
-"15469" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetMethodID)<SUB>229</SUB>> ]
-"15481" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>231</SUB>> ]
-"15489" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetMethodID)<SUB>233</SUB>> ]
-"15501" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>235</SUB>> ]
-"15509" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>238</SUB>> ]
-"15430" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>220</SUB>> ]
-"15439" [label = <(FIELD_IDENTIFIER,GetMethodID,GetMethodID)<SUB>223</SUB>> ]
-"15460" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>227</SUB>> ]
-"15471" [label = <(FIELD_IDENTIFIER,GetMethodID,GetMethodID)<SUB>229</SUB>> ]
-"15491" [label = <(FIELD_IDENTIFIER,GetMethodID,GetMethodID)<SUB>233</SUB>> ]
-"15511" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>238</SUB>> ]
-"15421" [label = <(METHOD,GetMethodIdBadArgumentTest)<SUB>219</SUB>> ]
-"15513" [label = <(METHOD_RETURN,void)<SUB>219</SUB>> ]
-  "15425" -> "15439" 
-  "15434" -> "15443" 
-  "15443" -> "15449" 
-  "15446" -> "15460" 
-  "15455" -> "15463" 
-  "15462" -> "15471" 
-  "15466" -> "15475" 
-  "15475" -> "15481" 
-  "15478" -> "15491" 
-  "15486" -> "15495" 
-  "15495" -> "15501" 
-  "15498" -> "15511" 
-  "15506" -> "15513" 
-  "15427" -> "15425" 
-  "15436" -> "15434" 
-  "15447" -> "15450" 
-  "15450" -> "15446" 
-  "15457" -> "15455" 
-  "15463" -> "15462" 
-  "15468" -> "15466" 
-  "15479" -> "15482" 
-  "15482" -> "15478" 
-  "15488" -> "15486" 
-  "15499" -> "15502" 
-  "15502" -> "15498" 
-  "15508" -> "15506" 
-  "15428" -> "15427" 
-  "15437" -> "15436" 
-  "15449" -> "15447" 
-  "15458" -> "15457" 
-  "15469" -> "15468" 
-  "15481" -> "15479" 
-  "15489" -> "15488" 
-  "15501" -> "15499" 
-  "15509" -> "15508" 
-  "15430" -> "15428" 
-  "15439" -> "15437" 
-  "15460" -> "15458" 
+digraph "RegisterAndUnregisterNativesBadArguments" {  
+"15469" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>323</SUB>> ]
+"15499" [label = <(&lt;operator&gt;.assignment,jlobject = env_-&gt;FindClass(&quot;java/lang/Object&quot;))<SUB>333</SUB>> ]
+"15506" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, nullptr, 1), JNI_ERR))<SUB>334</SUB>> ]
+"15515" [label = <(Check,check_jni_abort_catcher-&gt;Check(&quot;methods == null&quot;))<SUB>335</SUB>> ]
+"15520" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;UnregisterNatives(nullptr), JNI_ERR))<SUB>338</SUB>> ]
+"15527" [label = <(Check,check_jni_abort_catcher-&gt;Check(check_jni ? &quot;UnregisterNatives received NULL jclass&quot;\012 : &quot;java_class == null&quot;))<SUB>339</SUB>> ]
+"15535" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>342</SUB>> ]
+"15471" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>323</SUB>> ]
+"15478" [label = <(&lt;operator&gt;.assignment,methods[] = { })<SUB>326</SUB>> ]
+"15481" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;RegisterNatives(nullptr, methods, 0), JNI_ERR))<SUB>327</SUB>> ]
+"15490" [label = <(Check,check_jni_abort_catcher-&gt;Check(check_jni ? &quot;RegisterNatives received NULL jclass&quot;\012 : &quot;java_class == null&quot;))<SUB>328</SUB>> ]
+"15501" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/Object&quot;))<SUB>333</SUB>> ]
+"15507" [label = <(RegisterNatives,env_-&gt;RegisterNatives(jlobject, nullptr, 1))<SUB>334</SUB>> ]
+"15516" [label = <(&lt;operator&gt;.indirectFieldAccess,check_jni_abort_catcher-&gt;Check)<SUB>335</SUB>> ]
+"15521" [label = <(UnregisterNatives,env_-&gt;UnregisterNatives(nullptr))<SUB>338</SUB>> ]
+"15528" [label = <(&lt;operator&gt;.indirectFieldAccess,check_jni_abort_catcher-&gt;Check)<SUB>339</SUB>> ]
+"15531" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;UnregisterNatives received NULL jclass&quot;\012 : &quot;java_class == null&quot;)<SUB>339</SUB>> ]
+"15537" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>342</SUB>> ]
+"15472" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>323</SUB>> ]
+"15480" [label = <(&lt;operator&gt;.arrayInitializer,{ })<SUB>326</SUB>> ]
+"15482" [label = <(RegisterNatives,env_-&gt;RegisterNatives(nullptr, methods, 0))<SUB>327</SUB>> ]
+"15491" [label = <(&lt;operator&gt;.indirectFieldAccess,check_jni_abort_catcher-&gt;Check)<SUB>328</SUB>> ]
+"15494" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;RegisterNatives received NULL jclass&quot;\012 : &quot;java_class == null&quot;)<SUB>328</SUB>> ]
+"15502" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>333</SUB>> ]
+"15508" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;RegisterNatives)<SUB>334</SUB>> ]
+"15518" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>335</SUB>> ]
+"15522" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;UnregisterNatives)<SUB>338</SUB>> ]
+"15530" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>339</SUB>> ]
+"15538" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>342</SUB>> ]
+"15474" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>323</SUB>> ]
+"15483" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;RegisterNatives)<SUB>327</SUB>> ]
+"15493" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>328</SUB>> ]
+"15504" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>333</SUB>> ]
+"15510" [label = <(FIELD_IDENTIFIER,RegisterNatives,RegisterNatives)<SUB>334</SUB>> ]
+"15524" [label = <(FIELD_IDENTIFIER,UnregisterNatives,UnregisterNatives)<SUB>338</SUB>> ]
+"15540" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>342</SUB>> ]
+"15485" [label = <(FIELD_IDENTIFIER,RegisterNatives,RegisterNatives)<SUB>327</SUB>> ]
+"15464" [label = <(METHOD,RegisterAndUnregisterNativesBadArguments)<SUB>321</SUB>> ]
+"15542" [label = <(METHOD_RETURN,void)<SUB>321</SUB>> ]
+  "15469" -> "15480" 
+  "15499" -> "15510" 
+  "15506" -> "15518" 
+  "15515" -> "15524" 
+  "15520" -> "15530" 
+  "15527" -> "15540" 
+  "15535" -> "15542" 
   "15471" -> "15469" 
-  "15491" -> "15489" 
-  "15511" -> "15509" 
-  "15421" -> "15430" 
+  "15478" -> "15485" 
+  "15481" -> "15493" 
+  "15490" -> "15504" 
+  "15501" -> "15499" 
+  "15507" -> "15506" 
+  "15516" -> "15515" 
+  "15521" -> "15520" 
+  "15528" -> "15531" 
+  "15531" -> "15527" 
+  "15537" -> "15535" 
+  "15472" -> "15471" 
+  "15480" -> "15478" 
+  "15482" -> "15481" 
+  "15491" -> "15494" 
+  "15494" -> "15490" 
+  "15502" -> "15501" 
+  "15508" -> "15507" 
+  "15518" -> "15516" 
+  "15522" -> "15521" 
+  "15530" -> "15528" 
+  "15538" -> "15537" 
+  "15474" -> "15472" 
+  "15483" -> "15482" 
+  "15493" -> "15491" 
+  "15504" -> "15502" 
+  "15510" -> "15508" 
+  "15524" -> "15522" 
+  "15540" -> "15538" 
+  "15485" -> "15483" 
+  "15464" -> "15474" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/277-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/277-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/277-cfg.dot	2023-06-07 19:33:45.537394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/277-cfg.dot	2023-06-07 19:33:52.107393974 +0330
@@ -1,83 +1,243 @@
-digraph "GetStaticMethodIdBadArgumentTest" {  
-"15519" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>242</SUB>> ]
-"15528" [label = <(&lt;operator&gt;.assignment,method = env_-&gt;GetStaticMethodID(nullptr, &quot;valueOf&quot;, &quot;(I)Ljava/lang/String;&quot;))<SUB>245</SUB>> ]
-"15537" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, method))<SUB>246</SUB>> ]
-"15540" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;GetStaticMethodID received NULL jclass&quot;\012 : &quot;java_class == null&quot;))<SUB>247</SUB>> ]
-"15549" [label = <(&lt;operator&gt;.assignment,jlstring = env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>249</SUB>> ]
-"15556" [label = <(&lt;operator&gt;.assignment,method = env_-&gt;GetStaticMethodID(jlstring, nullptr, &quot;(I)Ljava/lang/String;&quot;))<SUB>250</SUB>> ]
-"15565" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, method))<SUB>251</SUB>> ]
-"15568" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;))<SUB>252</SUB>> ]
-"15576" [label = <(&lt;operator&gt;.assignment,method = env_-&gt;GetStaticMethodID(jlstring, &quot;valueOf&quot;, nullptr))<SUB>254</SUB>> ]
-"15585" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, method))<SUB>255</SUB>> ]
-"15588" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;sig == null&quot;))<SUB>256</SUB>> ]
-"15596" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>259</SUB>> ]
-"15521" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>242</SUB>> ]
-"15530" [label = <(GetStaticMethodID,env_-&gt;GetStaticMethodID(nullptr, &quot;valueOf&quot;, &quot;(I)Ljava/lang/String;&quot;))<SUB>245</SUB>> ]
-"15541" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>247</SUB>> ]
-"15544" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;GetStaticMethodID received NULL jclass&quot;\012 : &quot;java_class == null&quot;)<SUB>247</SUB>> ]
-"15551" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>249</SUB>> ]
-"15558" [label = <(GetStaticMethodID,env_-&gt;GetStaticMethodID(jlstring, nullptr, &quot;(I)Ljava/lang/String;&quot;))<SUB>250</SUB>> ]
-"15569" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>252</SUB>> ]
-"15572" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;)<SUB>252</SUB>> ]
-"15578" [label = <(GetStaticMethodID,env_-&gt;GetStaticMethodID(jlstring, &quot;valueOf&quot;, nullptr))<SUB>254</SUB>> ]
-"15589" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>256</SUB>> ]
-"15592" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;sig == null&quot;)<SUB>256</SUB>> ]
-"15598" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>259</SUB>> ]
-"15522" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>242</SUB>> ]
-"15531" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetStaticMethodID)<SUB>245</SUB>> ]
-"15543" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>247</SUB>> ]
-"15552" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>249</SUB>> ]
-"15559" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetStaticMethodID)<SUB>250</SUB>> ]
-"15571" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>252</SUB>> ]
-"15579" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetStaticMethodID)<SUB>254</SUB>> ]
-"15591" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>256</SUB>> ]
-"15599" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>259</SUB>> ]
-"15524" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>242</SUB>> ]
-"15533" [label = <(FIELD_IDENTIFIER,GetStaticMethodID,GetStaticMethodID)<SUB>245</SUB>> ]
-"15554" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>249</SUB>> ]
-"15561" [label = <(FIELD_IDENTIFIER,GetStaticMethodID,GetStaticMethodID)<SUB>250</SUB>> ]
-"15581" [label = <(FIELD_IDENTIFIER,GetStaticMethodID,GetStaticMethodID)<SUB>254</SUB>> ]
-"15601" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>259</SUB>> ]
-"15515" [label = <(METHOD,GetStaticMethodIdBadArgumentTest)<SUB>241</SUB>> ]
-"15603" [label = <(METHOD_RETURN,void)<SUB>241</SUB>> ]
-  "15519" -> "15533" 
-  "15528" -> "15537" 
-  "15537" -> "15543" 
-  "15540" -> "15554" 
-  "15549" -> "15561" 
-  "15556" -> "15565" 
-  "15565" -> "15571" 
-  "15568" -> "15581" 
-  "15576" -> "15585" 
-  "15585" -> "15591" 
-  "15588" -> "15601" 
-  "15596" -> "15603" 
-  "15521" -> "15519" 
-  "15530" -> "15528" 
-  "15541" -> "15544" 
-  "15544" -> "15540" 
-  "15551" -> "15549" 
-  "15558" -> "15556" 
-  "15569" -> "15572" 
-  "15572" -> "15568" 
-  "15578" -> "15576" 
+digraph "GetPrimitiveArrayElementsOfWrongType" {  
+"15548" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>347</SUB>> ]
+"15557" [label = <(&lt;operator&gt;.assignment,array = env_-&gt;NewBooleanArray(10))<SUB>350</SUB>> ]
+"15565" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;GetByteArrayElements(reinterpret_cast&lt;jbyteArray&gt;(array), &amp;is_copy), nullptr))<SUB>352</SUB>> ]
+"15576" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected byte[]&quot;\012 : &quot;attempt to get byte primitive array elements with an object of type boolean[]&quot;))<SUB>353</SUB>> ]
+"15584" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;GetShortArrayElements(reinterpret_cast&lt;jshortArray&gt;(array), &amp;is_copy), nullptr))<SUB>356</SUB>> ]
+"15595" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected short[]&quot;\012 : &quot;attempt to get short primitive array elements with an object of type boolean[]&quot;))<SUB>357</SUB>> ]
+"15603" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;GetCharArrayElements(reinterpret_cast&lt;jcharArray&gt;(array), &amp;is_copy), nullptr))<SUB>360</SUB>> ]
+"15614" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected char[]&quot;\012 : &quot;attempt to get char primitive array elements with an object of type boolean[]&quot;))<SUB>361</SUB>> ]
+"15622" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;GetIntArrayElements(reinterpret_cast&lt;jintArray&gt;(array), &amp;is_copy), nullptr))<SUB>364</SUB>> ]
+"15633" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected int[]&quot;\012 : &quot;attempt to get int primitive array elements with an object of type boolean[]&quot;))<SUB>365</SUB>> ]
+"15641" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;GetLongArrayElements(reinterpret_cast&lt;jlongArray&gt;(array), &amp;is_copy), nullptr))<SUB>368</SUB>> ]
+"15652" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected long[]&quot;\012 : &quot;attempt to get long primitive array elements with an object of type boolean[]&quot;))<SUB>369</SUB>> ]
+"15660" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;GetFloatArrayElements(reinterpret_cast&lt;jfloatArray&gt;(array), &amp;is_copy), nullptr))<SUB>372</SUB>> ]
+"15671" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected float[]&quot;\012 : &quot;attempt to get float primitive array elements with an object of type boolean[]&quot;))<SUB>373</SUB>> ]
+"15679" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;GetDoubleArrayElements(reinterpret_cast&lt;jdoubleArray&gt;(array), &amp;is_copy), nullptr))<SUB>376</SUB>> ]
+"15690" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected double[]&quot;\012 : &quot;attempt to get double primitive array elements with an object of type boolean[]&quot;))<SUB>377</SUB>> ]
+"15699" [label = <(&lt;operator&gt;.assignment,array2 = env_-&gt;NewByteArray(10))<SUB>380</SUB>> ]
+"15706" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;GetBooleanArrayElements(reinterpret_cast&lt;jbooleanArray&gt;(array2), &amp;is_copy),\012 nullptr))<SUB>381</SUB>> ]
+"15717" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type byte[] expected boolean[]&quot;\012 : &quot;attempt to get boolean primitive array elements with an object of type byte[]&quot;))<SUB>383</SUB>> ]
+"15726" [label = <(&lt;operator&gt;.assignment,object = env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>386</SUB>> ]
+"15733" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;GetBooleanArrayElements(reinterpret_cast&lt;jbooleanArray&gt;(object), &amp;is_copy),\012 nullptr))<SUB>387</SUB>> ]
+"15744" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;attempt to get boolean primitive array elements with an object of type java.lang.String&quot;))<SUB>389</SUB>> ]
+"15752" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>393</SUB>> ]
+"15550" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>347</SUB>> ]
+"15559" [label = <(NewBooleanArray,env_-&gt;NewBooleanArray(10))<SUB>350</SUB>> ]
+"15566" [label = <(GetByteArrayElements,env_-&gt;GetByteArrayElements(reinterpret_cast&lt;jbyteArray&gt;(array), &amp;is_copy))<SUB>352</SUB>> ]
+"15577" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>353</SUB>> ]
+"15580" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected byte[]&quot;\012 : &quot;attempt to get byte primitive array elements with an object of type boolean[]&quot;)<SUB>354</SUB>> ]
+"15585" [label = <(GetShortArrayElements,env_-&gt;GetShortArrayElements(reinterpret_cast&lt;jshortArray&gt;(array), &amp;is_copy))<SUB>356</SUB>> ]
+"15596" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>357</SUB>> ]
+"15599" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected short[]&quot;\012 : &quot;attempt to get short primitive array elements with an object of type boolean[]&quot;)<SUB>358</SUB>> ]
+"15604" [label = <(GetCharArrayElements,env_-&gt;GetCharArrayElements(reinterpret_cast&lt;jcharArray&gt;(array), &amp;is_copy))<SUB>360</SUB>> ]
+"15615" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>361</SUB>> ]
+"15618" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected char[]&quot;\012 : &quot;attempt to get char primitive array elements with an object of type boolean[]&quot;)<SUB>362</SUB>> ]
+"15623" [label = <(GetIntArrayElements,env_-&gt;GetIntArrayElements(reinterpret_cast&lt;jintArray&gt;(array), &amp;is_copy))<SUB>364</SUB>> ]
+"15634" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>365</SUB>> ]
+"15637" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected int[]&quot;\012 : &quot;attempt to get int primitive array elements with an object of type boolean[]&quot;)<SUB>366</SUB>> ]
+"15642" [label = <(GetLongArrayElements,env_-&gt;GetLongArrayElements(reinterpret_cast&lt;jlongArray&gt;(array), &amp;is_copy))<SUB>368</SUB>> ]
+"15653" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>369</SUB>> ]
+"15656" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected long[]&quot;\012 : &quot;attempt to get long primitive array elements with an object of type boolean[]&quot;)<SUB>370</SUB>> ]
+"15661" [label = <(GetFloatArrayElements,env_-&gt;GetFloatArrayElements(reinterpret_cast&lt;jfloatArray&gt;(array), &amp;is_copy))<SUB>372</SUB>> ]
+"15672" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>373</SUB>> ]
+"15675" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected float[]&quot;\012 : &quot;attempt to get float primitive array elements with an object of type boolean[]&quot;)<SUB>374</SUB>> ]
+"15680" [label = <(GetDoubleArrayElements,env_-&gt;GetDoubleArrayElements(reinterpret_cast&lt;jdoubleArray&gt;(array), &amp;is_copy))<SUB>376</SUB>> ]
+"15691" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>377</SUB>> ]
+"15694" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected double[]&quot;\012 : &quot;attempt to get double primitive array elements with an object of type boolean[]&quot;)<SUB>378</SUB>> ]
+"15701" [label = <(NewByteArray,env_-&gt;NewByteArray(10))<SUB>380</SUB>> ]
+"15707" [label = <(GetBooleanArrayElements,env_-&gt;GetBooleanArrayElements(reinterpret_cast&lt;jbooleanArray&gt;(array2), &amp;is_copy))<SUB>381</SUB>> ]
+"15718" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>383</SUB>> ]
+"15721" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type byte[] expected boolean[]&quot;\012 : &quot;attempt to get boolean primitive array elements with an object of type byte[]&quot;)<SUB>384</SUB>> ]
+"15728" [label = <(NewStringUTF,env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>386</SUB>> ]
+"15734" [label = <(GetBooleanArrayElements,env_-&gt;GetBooleanArrayElements(reinterpret_cast&lt;jbooleanArray&gt;(object), &amp;is_copy))<SUB>387</SUB>> ]
+"15745" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>389</SUB>> ]
+"15748" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;attempt to get boolean primitive array elements with an object of type java.lang.String&quot;)<SUB>390</SUB>> ]
+"15754" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>393</SUB>> ]
+"15551" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>347</SUB>> ]
+"15560" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewBooleanArray)<SUB>350</SUB>> ]
+"15567" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetByteArrayElements)<SUB>352</SUB>> ]
+"15570" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbyteArray&gt;(array))<SUB>352</SUB>> ]
+"15573" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>352</SUB>> ]
+"15579" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>353</SUB>> ]
+"15586" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetShortArrayElements)<SUB>356</SUB>> ]
+"15589" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jshortArray&gt;(array))<SUB>356</SUB>> ]
+"15592" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>356</SUB>> ]
+"15598" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>357</SUB>> ]
+"15605" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetCharArrayElements)<SUB>360</SUB>> ]
+"15608" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jcharArray&gt;(array))<SUB>360</SUB>> ]
+"15611" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>360</SUB>> ]
+"15617" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>361</SUB>> ]
+"15624" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetIntArrayElements)<SUB>364</SUB>> ]
+"15627" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jintArray&gt;(array))<SUB>364</SUB>> ]
+"15630" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>364</SUB>> ]
+"15636" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>365</SUB>> ]
+"15643" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetLongArrayElements)<SUB>368</SUB>> ]
+"15646" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jlongArray&gt;(array))<SUB>368</SUB>> ]
+"15649" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>368</SUB>> ]
+"15655" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>369</SUB>> ]
+"15662" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetFloatArrayElements)<SUB>372</SUB>> ]
+"15665" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jfloatArray&gt;(array))<SUB>372</SUB>> ]
+"15668" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>372</SUB>> ]
+"15674" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>373</SUB>> ]
+"15681" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetDoubleArrayElements)<SUB>376</SUB>> ]
+"15684" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jdoubleArray&gt;(array))<SUB>376</SUB>> ]
+"15687" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>376</SUB>> ]
+"15693" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>377</SUB>> ]
+"15702" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewByteArray)<SUB>380</SUB>> ]
+"15708" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetBooleanArrayElements)<SUB>381</SUB>> ]
+"15711" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbooleanArray&gt;(array2))<SUB>381</SUB>> ]
+"15714" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>381</SUB>> ]
+"15720" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>383</SUB>> ]
+"15729" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewStringUTF)<SUB>386</SUB>> ]
+"15735" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetBooleanArrayElements)<SUB>387</SUB>> ]
+"15738" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbooleanArray&gt;(object))<SUB>387</SUB>> ]
+"15741" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>387</SUB>> ]
+"15747" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>389</SUB>> ]
+"15755" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>393</SUB>> ]
+"15553" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>347</SUB>> ]
+"15562" [label = <(FIELD_IDENTIFIER,NewBooleanArray,NewBooleanArray)<SUB>350</SUB>> ]
+"15569" [label = <(FIELD_IDENTIFIER,GetByteArrayElements,GetByteArrayElements)<SUB>352</SUB>> ]
+"15571" [label = <(UNKNOWN,jbyteArray,jbyteArray)<SUB>352</SUB>> ]
+"15588" [label = <(FIELD_IDENTIFIER,GetShortArrayElements,GetShortArrayElements)<SUB>356</SUB>> ]
+"15590" [label = <(UNKNOWN,jshortArray,jshortArray)<SUB>356</SUB>> ]
+"15607" [label = <(FIELD_IDENTIFIER,GetCharArrayElements,GetCharArrayElements)<SUB>360</SUB>> ]
+"15609" [label = <(UNKNOWN,jcharArray,jcharArray)<SUB>360</SUB>> ]
+"15626" [label = <(FIELD_IDENTIFIER,GetIntArrayElements,GetIntArrayElements)<SUB>364</SUB>> ]
+"15628" [label = <(UNKNOWN,jintArray,jintArray)<SUB>364</SUB>> ]
+"15645" [label = <(FIELD_IDENTIFIER,GetLongArrayElements,GetLongArrayElements)<SUB>368</SUB>> ]
+"15647" [label = <(UNKNOWN,jlongArray,jlongArray)<SUB>368</SUB>> ]
+"15664" [label = <(FIELD_IDENTIFIER,GetFloatArrayElements,GetFloatArrayElements)<SUB>372</SUB>> ]
+"15666" [label = <(UNKNOWN,jfloatArray,jfloatArray)<SUB>372</SUB>> ]
+"15683" [label = <(FIELD_IDENTIFIER,GetDoubleArrayElements,GetDoubleArrayElements)<SUB>376</SUB>> ]
+"15685" [label = <(UNKNOWN,jdoubleArray,jdoubleArray)<SUB>376</SUB>> ]
+"15704" [label = <(FIELD_IDENTIFIER,NewByteArray,NewByteArray)<SUB>380</SUB>> ]
+"15710" [label = <(FIELD_IDENTIFIER,GetBooleanArrayElements,GetBooleanArrayElements)<SUB>381</SUB>> ]
+"15712" [label = <(UNKNOWN,jbooleanArray,jbooleanArray)<SUB>381</SUB>> ]
+"15731" [label = <(FIELD_IDENTIFIER,NewStringUTF,NewStringUTF)<SUB>386</SUB>> ]
+"15737" [label = <(FIELD_IDENTIFIER,GetBooleanArrayElements,GetBooleanArrayElements)<SUB>387</SUB>> ]
+"15739" [label = <(UNKNOWN,jbooleanArray,jbooleanArray)<SUB>387</SUB>> ]
+"15757" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>393</SUB>> ]
+"15544" [label = <(METHOD,GetPrimitiveArrayElementsOfWrongType)<SUB>346</SUB>> ]
+"15759" [label = <(METHOD_RETURN,void)<SUB>346</SUB>> ]
+  "15548" -> "15562" 
+  "15557" -> "15569" 
+  "15565" -> "15579" 
+  "15576" -> "15588" 
+  "15584" -> "15598" 
+  "15595" -> "15607" 
+  "15603" -> "15617" 
+  "15614" -> "15626" 
+  "15622" -> "15636" 
+  "15633" -> "15645" 
+  "15641" -> "15655" 
+  "15652" -> "15664" 
+  "15660" -> "15674" 
+  "15671" -> "15683" 
+  "15679" -> "15693" 
+  "15690" -> "15704" 
+  "15699" -> "15710" 
+  "15706" -> "15720" 
+  "15717" -> "15731" 
+  "15726" -> "15737" 
+  "15733" -> "15747" 
+  "15744" -> "15757" 
+  "15752" -> "15759" 
+  "15550" -> "15548" 
+  "15559" -> "15557" 
+  "15566" -> "15565" 
+  "15577" -> "15580" 
+  "15580" -> "15576" 
+  "15585" -> "15584" 
+  "15596" -> "15599" 
+  "15599" -> "15595" 
+  "15604" -> "15603" 
+  "15615" -> "15618" 
+  "15618" -> "15614" 
+  "15623" -> "15622" 
+  "15634" -> "15637" 
+  "15637" -> "15633" 
+  "15642" -> "15641" 
+  "15653" -> "15656" 
+  "15656" -> "15652" 
+  "15661" -> "15660" 
+  "15672" -> "15675" 
+  "15675" -> "15671" 
+  "15680" -> "15679" 
+  "15691" -> "15694" 
+  "15694" -> "15690" 
+  "15701" -> "15699" 
+  "15707" -> "15706" 
+  "15718" -> "15721" 
+  "15721" -> "15717" 
+  "15728" -> "15726" 
+  "15734" -> "15733" 
+  "15745" -> "15748" 
+  "15748" -> "15744" 
+  "15754" -> "15752" 
+  "15551" -> "15550" 
+  "15560" -> "15559" 
+  "15567" -> "15571" 
+  "15570" -> "15573" 
+  "15573" -> "15566" 
+  "15579" -> "15577" 
+  "15586" -> "15590" 
   "15589" -> "15592" 
-  "15592" -> "15588" 
+  "15592" -> "15585" 
   "15598" -> "15596" 
-  "15522" -> "15521" 
-  "15531" -> "15530" 
-  "15543" -> "15541" 
-  "15552" -> "15551" 
-  "15559" -> "15558" 
-  "15571" -> "15569" 
-  "15579" -> "15578" 
-  "15591" -> "15589" 
-  "15599" -> "15598" 
-  "15524" -> "15522" 
-  "15533" -> "15531" 
-  "15554" -> "15552" 
-  "15561" -> "15559" 
-  "15581" -> "15579" 
-  "15601" -> "15599" 
-  "15515" -> "15524" 
+  "15605" -> "15609" 
+  "15608" -> "15611" 
+  "15611" -> "15604" 
+  "15617" -> "15615" 
+  "15624" -> "15628" 
+  "15627" -> "15630" 
+  "15630" -> "15623" 
+  "15636" -> "15634" 
+  "15643" -> "15647" 
+  "15646" -> "15649" 
+  "15649" -> "15642" 
+  "15655" -> "15653" 
+  "15662" -> "15666" 
+  "15665" -> "15668" 
+  "15668" -> "15661" 
+  "15674" -> "15672" 
+  "15681" -> "15685" 
+  "15684" -> "15687" 
+  "15687" -> "15680" 
+  "15693" -> "15691" 
+  "15702" -> "15701" 
+  "15708" -> "15712" 
+  "15711" -> "15714" 
+  "15714" -> "15707" 
+  "15720" -> "15718" 
+  "15729" -> "15728" 
+  "15735" -> "15739" 
+  "15738" -> "15741" 
+  "15741" -> "15734" 
+  "15747" -> "15745" 
+  "15755" -> "15754" 
+  "15553" -> "15551" 
+  "15562" -> "15560" 
+  "15569" -> "15567" 
+  "15571" -> "15570" 
+  "15588" -> "15586" 
+  "15590" -> "15589" 
+  "15607" -> "15605" 
+  "15609" -> "15608" 
+  "15626" -> "15624" 
+  "15628" -> "15627" 
+  "15645" -> "15643" 
+  "15647" -> "15646" 
+  "15664" -> "15662" 
+  "15666" -> "15665" 
+  "15683" -> "15681" 
+  "15685" -> "15684" 
+  "15704" -> "15702" 
+  "15710" -> "15708" 
+  "15712" -> "15711" 
+  "15731" -> "15729" 
+  "15737" -> "15735" 
+  "15739" -> "15738" 
+  "15757" -> "15755" 
+  "15544" -> "15553" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/278-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/278-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/278-cfg.dot	2023-06-07 19:33:45.537394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/278-cfg.dot	2023-06-07 19:33:52.117393975 +0330
@@ -1,96 +1,283 @@
-digraph "GetFromReflectedField_ToReflectedFieldBadArgumentTest" {  
-"15609" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>263</SUB>> ]
-"15618" [label = <(&lt;operator&gt;.assignment,c = env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>266</SUB>> ]
-"15625" [label = <(ASSERT_NE,ASSERT_NE(c, nullptr))<SUB>267</SUB>> ]
-"15629" [label = <(&lt;operator&gt;.assignment,fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;))<SUB>268</SUB>> ]
-"15638" [label = <(ASSERT_NE,ASSERT_NE(fid, nullptr))<SUB>269</SUB>> ]
-"15642" [label = <(&lt;operator&gt;.assignment,field = env_-&gt;ToReflectedField(nullptr, fid, JNI_FALSE))<SUB>272</SUB>> ]
-"15667" [label = <(&lt;operator&gt;.assignment,field = env_-&gt;ToReflectedField(c, nullptr, JNI_FALSE))<SUB>280</SUB>> ]
-"15676" [label = <(EXPECT_EQ,EXPECT_EQ(field, nullptr))<SUB>281</SUB>> ]
-"15679" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;jfieldID was NULL&quot;\012 : &quot;fid == null&quot;))<SUB>282</SUB>> ]
-"15687" [label = <(&lt;operator&gt;.assignment,fid = env_-&gt;FromReflectedField(nullptr))<SUB>285</SUB>> ]
-"15694" [label = <(ASSERT_EQ,ASSERT_EQ(fid, nullptr))<SUB>286</SUB>> ]
-"15697" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;expected non-null java.lang.reflect.Field&quot;\012 : &quot;jlr_field == null&quot;))<SUB>287</SUB>> ]
-"15705" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>290</SUB>> ]
-"15611" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>263</SUB>> ]
-"15620" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>266</SUB>> ]
-"15631" [label = <(GetFieldID,env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;))<SUB>268</SUB>> ]
-"15644" [label = <(ToReflectedField,env_-&gt;ToReflectedField(nullptr, fid, JNI_FALSE))<SUB>272</SUB>> ]
-"15669" [label = <(ToReflectedField,env_-&gt;ToReflectedField(c, nullptr, JNI_FALSE))<SUB>280</SUB>> ]
-"15680" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>282</SUB>> ]
-"15683" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;jfieldID was NULL&quot;\012 : &quot;fid == null&quot;)<SUB>282</SUB>> ]
-"15689" [label = <(FromReflectedField,env_-&gt;FromReflectedField(nullptr))<SUB>285</SUB>> ]
-"15698" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>287</SUB>> ]
-"15701" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;expected non-null java.lang.reflect.Field&quot;\012 : &quot;jlr_field == null&quot;)<SUB>287</SUB>> ]
-"15707" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>290</SUB>> ]
-"15612" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>263</SUB>> ]
-"15621" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>266</SUB>> ]
-"15632" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetFieldID)<SUB>268</SUB>> ]
-"15645" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ToReflectedField)<SUB>272</SUB>> ]
-"15654" [label = <(EXPECT_EQ,EXPECT_EQ(field, nullptr))<SUB>274</SUB>> ]
-"15657" [label = <(Check,check_jni_abort_catcher.Check(&quot;ToReflectedField received NULL jclass&quot;))<SUB>275</SUB>> ]
-"15670" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ToReflectedField)<SUB>280</SUB>> ]
-"15682" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>282</SUB>> ]
-"15690" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FromReflectedField)<SUB>285</SUB>> ]
-"15700" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>287</SUB>> ]
-"15708" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>290</SUB>> ]
-"15614" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>263</SUB>> ]
-"15623" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>266</SUB>> ]
-"15634" [label = <(FIELD_IDENTIFIER,GetFieldID,GetFieldID)<SUB>268</SUB>> ]
-"15647" [label = <(FIELD_IDENTIFIER,ToReflectedField,ToReflectedField)<SUB>272</SUB>> ]
-"15658" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>275</SUB>> ]
-"15664" [label = <(EXPECT_NE,EXPECT_NE(field, nullptr))<SUB>277</SUB>> ]
-"15672" [label = <(FIELD_IDENTIFIER,ToReflectedField,ToReflectedField)<SUB>280</SUB>> ]
-"15692" [label = <(FIELD_IDENTIFIER,FromReflectedField,FromReflectedField)<SUB>285</SUB>> ]
-"15710" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>290</SUB>> ]
-"15660" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>275</SUB>> ]
-"15605" [label = <(METHOD,GetFromReflectedField_ToReflectedFieldBadArgumentTest)<SUB>262</SUB>> ]
-"15712" [label = <(METHOD_RETURN,void)<SUB>262</SUB>> ]
-  "15609" -> "15623" 
-  "15618" -> "15625" 
-  "15625" -> "15634" 
-  "15629" -> "15638" 
-  "15638" -> "15647" 
-  "15642" -> "15654" 
-  "15642" -> "15664" 
-  "15667" -> "15676" 
-  "15676" -> "15682" 
-  "15679" -> "15692" 
-  "15687" -> "15694" 
-  "15694" -> "15700" 
-  "15697" -> "15710" 
-  "15705" -> "15712" 
-  "15611" -> "15609" 
-  "15620" -> "15618" 
-  "15631" -> "15629" 
-  "15644" -> "15642" 
-  "15669" -> "15667" 
-  "15680" -> "15683" 
-  "15683" -> "15679" 
-  "15689" -> "15687" 
-  "15698" -> "15701" 
-  "15701" -> "15697" 
-  "15707" -> "15705" 
-  "15612" -> "15611" 
-  "15621" -> "15620" 
-  "15632" -> "15631" 
-  "15645" -> "15644" 
-  "15654" -> "15660" 
-  "15657" -> "15672" 
-  "15670" -> "15669" 
-  "15682" -> "15680" 
-  "15690" -> "15689" 
-  "15700" -> "15698" 
-  "15708" -> "15707" 
-  "15614" -> "15612" 
-  "15623" -> "15621" 
-  "15634" -> "15632" 
-  "15647" -> "15645" 
-  "15658" -> "15657" 
-  "15664" -> "15672" 
-  "15672" -> "15670" 
-  "15692" -> "15690" 
-  "15710" -> "15708" 
-  "15660" -> "15658" 
-  "15605" -> "15614" 
+digraph "ReleasePrimitiveArrayElementsOfWrongType" {  
+"15765" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>397</SUB>> ]
+"16014" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>465</SUB>> ]
+"15767" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>397</SUB>> ]
+"15775" [label = <(&lt;operator&gt;.assignment,array = env_-&gt;NewBooleanArray(10))<SUB>400</SUB>> ]
+"15782" [label = <(ASSERT_TRUE,ASSERT_TRUE(array != nullptr))<SUB>401</SUB>> ]
+"15788" [label = <(&lt;operator&gt;.assignment,* elements = env_-&gt;GetBooleanArrayElements(array, &amp;is_copy))<SUB>403</SUB>> ]
+"15797" [label = <(ASSERT_TRUE,ASSERT_TRUE(elements != nullptr))<SUB>404</SUB>> ]
+"15801" [label = <(ReleaseByteArrayElements,env_-&gt;ReleaseByteArrayElements(reinterpret_cast&lt;jbyteArray&gt;(array),\012 reinterpret_cast&lt;jbyte*&gt;(elements), 0))<SUB>405</SUB>> ]
+"15812" [label = <(Check,jni_abort_catcher.Check(\012          check_jni ? &quot;incompatible array type boolean[] expected byte[]&quot;\012 : &quot;attempt to release byte primitive array elements with an object of type boolean[]&quot;))<SUB>407</SUB>> ]
+"15820" [label = <(ReleaseShortArrayElements,env_-&gt;ReleaseShortArrayElements(reinterpret_cast&lt;jshortArray&gt;(array),\012 reinterpret_cast&lt;jshort*&gt;(elements), 0))<SUB>410</SUB>> ]
+"15831" [label = <(Check,jni_abort_catcher.Check(\012          check_jni ? &quot;incompatible array type boolean[] expected short[]&quot;\012 : &quot;attempt to release short primitive array elements with an object of type boolean[]&quot;))<SUB>412</SUB>> ]
+"15839" [label = <(ReleaseCharArrayElements,env_-&gt;ReleaseCharArrayElements(reinterpret_cast&lt;jcharArray&gt;(array),\012 reinterpret_cast&lt;jchar*&gt;(elements), 0))<SUB>415</SUB>> ]
+"15850" [label = <(Check,jni_abort_catcher.Check(\012          check_jni ? &quot;incompatible array type boolean[] expected char[]&quot;\012 : &quot;attempt to release char primitive array elements with an object of type boolean[]&quot;))<SUB>417</SUB>> ]
+"15858" [label = <(ReleaseIntArrayElements,env_-&gt;ReleaseIntArrayElements(reinterpret_cast&lt;jintArray&gt;(array),\012 reinterpret_cast&lt;jint*&gt;(elements), 0))<SUB>420</SUB>> ]
+"15869" [label = <(Check,jni_abort_catcher.Check(\012          check_jni ? &quot;incompatible array type boolean[] expected int[]&quot;\012 : &quot;attempt to release int primitive array elements with an object of type boolean[]&quot;))<SUB>422</SUB>> ]
+"15877" [label = <(ReleaseLongArrayElements,env_-&gt;ReleaseLongArrayElements(reinterpret_cast&lt;jlongArray&gt;(array),\012 reinterpret_cast&lt;jlong*&gt;(elements), 0))<SUB>425</SUB>> ]
+"15888" [label = <(Check,jni_abort_catcher.Check(\012          check_jni ? &quot;incompatible array type boolean[] expected long[]&quot;\012 : &quot;attempt to release long primitive array elements with an object of type boolean[]&quot;))<SUB>427</SUB>> ]
+"15896" [label = <(ReleaseFloatArrayElements,env_-&gt;ReleaseFloatArrayElements(reinterpret_cast&lt;jfloatArray&gt;(array),\012 reinterpret_cast&lt;jfloat*&gt;(elements), 0))<SUB>430</SUB>> ]
+"15907" [label = <(Check,jni_abort_catcher.Check(\012          check_jni ? &quot;incompatible array type boolean[] expected float[]&quot;\012 : &quot;attempt to release float primitive array elements with an object of type boolean[]&quot;))<SUB>432</SUB>> ]
+"15915" [label = <(ReleaseDoubleArrayElements,env_-&gt;ReleaseDoubleArrayElements(reinterpret_cast&lt;jdoubleArray&gt;(array),\012 reinterpret_cast&lt;jdouble*&gt;(elements), 0))<SUB>435</SUB>> ]
+"15926" [label = <(Check,jni_abort_catcher.Check(\012          check_jni ? &quot;incompatible array type boolean[] expected double[]&quot;\012 : &quot;attempt to release double primitive array elements with an object of type boolean[]&quot;))<SUB>437</SUB>> ]
+"15934" [label = <(ReleaseBooleanArrayElements,env_-&gt;ReleaseBooleanArrayElements(array, elements, 0))<SUB>442</SUB>> ]
+"15943" [label = <(&lt;operator&gt;.assignment,array = env_-&gt;NewByteArray(10))<SUB>445</SUB>> ]
+"15952" [label = <(&lt;operator&gt;.assignment,* elements = env_-&gt;GetByteArrayElements(array, &amp;is_copy))<SUB>447</SUB>> ]
+"15961" [label = <(ReleaseBooleanArrayElements,env_-&gt;ReleaseBooleanArrayElements(reinterpret_cast&lt;jbooleanArray&gt;(array),\012 reinterpret_cast&lt;jboolean*&gt;(elements), 0))<SUB>449</SUB>> ]
+"15972" [label = <(Check,jni_abort_catcher.Check(\012          check_jni ? &quot;incompatible array type byte[] expected boolean[]&quot;\012 : &quot;attempt to release boolean primitive array elements with an object of type byte[]&quot;))<SUB>451</SUB>> ]
+"15981" [label = <(&lt;operator&gt;.assignment,object = env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>454</SUB>> ]
+"15988" [label = <(ReleaseBooleanArrayElements,env_-&gt;ReleaseBooleanArrayElements(reinterpret_cast&lt;jbooleanArray&gt;(object),\012 reinterpret_cast&lt;jboolean*&gt;(elements), 0))<SUB>455</SUB>> ]
+"15999" [label = <(Check,jni_abort_catcher.Check(\012          check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;attempt to release boolean primitive array elements with an object of type &quot;\012 &quot;java.lang.String&quot;))<SUB>457</SUB>> ]
+"16007" [label = <(ReleaseByteArrayElements,env_-&gt;ReleaseByteArrayElements(array, elements, 0))<SUB>463</SUB>> ]
+"16016" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>465</SUB>> ]
+"15768" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>397</SUB>> ]
+"15777" [label = <(NewBooleanArray,env_-&gt;NewBooleanArray(10))<SUB>400</SUB>> ]
+"15783" [label = <(&lt;operator&gt;.notEquals,array != nullptr)<SUB>401</SUB>> ]
+"15790" [label = <(GetBooleanArrayElements,env_-&gt;GetBooleanArrayElements(array, &amp;is_copy))<SUB>403</SUB>> ]
+"15798" [label = <(&lt;operator&gt;.notEquals,elements != nullptr)<SUB>404</SUB>> ]
+"15802" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseByteArrayElements)<SUB>405</SUB>> ]
+"15805" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbyteArray&gt;(array))<SUB>405</SUB>> ]
+"15808" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbyte*&gt;(elements))<SUB>406</SUB>> ]
+"15813" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>407</SUB>> ]
+"15816" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected byte[]&quot;\012 : &quot;attempt to release byte primitive array elements with an object of type boolean[]&quot;)<SUB>408</SUB>> ]
+"15821" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseShortArrayElements)<SUB>410</SUB>> ]
+"15824" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jshortArray&gt;(array))<SUB>410</SUB>> ]
+"15827" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jshort*&gt;(elements))<SUB>411</SUB>> ]
+"15832" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>412</SUB>> ]
+"15835" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected short[]&quot;\012 : &quot;attempt to release short primitive array elements with an object of type boolean[]&quot;)<SUB>413</SUB>> ]
+"15840" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseCharArrayElements)<SUB>415</SUB>> ]
+"15843" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jcharArray&gt;(array))<SUB>415</SUB>> ]
+"15846" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jchar*&gt;(elements))<SUB>416</SUB>> ]
+"15851" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>417</SUB>> ]
+"15854" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected char[]&quot;\012 : &quot;attempt to release char primitive array elements with an object of type boolean[]&quot;)<SUB>418</SUB>> ]
+"15859" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseIntArrayElements)<SUB>420</SUB>> ]
+"15862" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jintArray&gt;(array))<SUB>420</SUB>> ]
+"15865" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jint*&gt;(elements))<SUB>421</SUB>> ]
+"15870" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>422</SUB>> ]
+"15873" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected int[]&quot;\012 : &quot;attempt to release int primitive array elements with an object of type boolean[]&quot;)<SUB>423</SUB>> ]
+"15878" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseLongArrayElements)<SUB>425</SUB>> ]
+"15881" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jlongArray&gt;(array))<SUB>425</SUB>> ]
+"15884" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jlong*&gt;(elements))<SUB>426</SUB>> ]
+"15889" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>427</SUB>> ]
+"15892" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected long[]&quot;\012 : &quot;attempt to release long primitive array elements with an object of type boolean[]&quot;)<SUB>428</SUB>> ]
+"15897" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseFloatArrayElements)<SUB>430</SUB>> ]
+"15900" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jfloatArray&gt;(array))<SUB>430</SUB>> ]
+"15903" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jfloat*&gt;(elements))<SUB>431</SUB>> ]
+"15908" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>432</SUB>> ]
+"15911" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected float[]&quot;\012 : &quot;attempt to release float primitive array elements with an object of type boolean[]&quot;)<SUB>433</SUB>> ]
+"15916" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseDoubleArrayElements)<SUB>435</SUB>> ]
+"15919" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jdoubleArray&gt;(array))<SUB>435</SUB>> ]
+"15922" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jdouble*&gt;(elements))<SUB>436</SUB>> ]
+"15927" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>437</SUB>> ]
+"15930" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected double[]&quot;\012 : &quot;attempt to release double primitive array elements with an object of type boolean[]&quot;)<SUB>438</SUB>> ]
+"15935" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseBooleanArrayElements)<SUB>442</SUB>> ]
+"15945" [label = <(NewByteArray,env_-&gt;NewByteArray(10))<SUB>445</SUB>> ]
+"15954" [label = <(GetByteArrayElements,env_-&gt;GetByteArrayElements(array, &amp;is_copy))<SUB>447</SUB>> ]
+"15962" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseBooleanArrayElements)<SUB>449</SUB>> ]
+"15965" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbooleanArray&gt;(array))<SUB>449</SUB>> ]
+"15968" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jboolean*&gt;(elements))<SUB>450</SUB>> ]
+"15973" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>451</SUB>> ]
+"15976" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type byte[] expected boolean[]&quot;\012 : &quot;attempt to release boolean primitive array elements with an object of type byte[]&quot;)<SUB>452</SUB>> ]
+"15983" [label = <(NewStringUTF,env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>454</SUB>> ]
+"15989" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseBooleanArrayElements)<SUB>455</SUB>> ]
+"15992" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbooleanArray&gt;(object))<SUB>455</SUB>> ]
+"15995" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jboolean*&gt;(elements))<SUB>456</SUB>> ]
+"16000" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>457</SUB>> ]
+"16003" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;attempt to release boolean primitive array elements with an object of type &quot;\012 &quot;java.lang.String&quot;)<SUB>458</SUB>> ]
+"16008" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseByteArrayElements)<SUB>463</SUB>> ]
+"16017" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>465</SUB>> ]
+"15770" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>397</SUB>> ]
+"15778" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewBooleanArray)<SUB>400</SUB>> ]
+"15791" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetBooleanArrayElements)<SUB>403</SUB>> ]
+"15795" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>403</SUB>> ]
+"15804" [label = <(FIELD_IDENTIFIER,ReleaseByteArrayElements,ReleaseByteArrayElements)<SUB>405</SUB>> ]
+"15806" [label = <(UNKNOWN,jbyteArray,jbyteArray)<SUB>405</SUB>> ]
+"15809" [label = <(UNKNOWN,jbyte*,jbyte*)<SUB>406</SUB>> ]
+"15815" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>407</SUB>> ]
+"15823" [label = <(FIELD_IDENTIFIER,ReleaseShortArrayElements,ReleaseShortArrayElements)<SUB>410</SUB>> ]
+"15825" [label = <(UNKNOWN,jshortArray,jshortArray)<SUB>410</SUB>> ]
+"15828" [label = <(UNKNOWN,jshort*,jshort*)<SUB>411</SUB>> ]
+"15834" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>412</SUB>> ]
+"15842" [label = <(FIELD_IDENTIFIER,ReleaseCharArrayElements,ReleaseCharArrayElements)<SUB>415</SUB>> ]
+"15844" [label = <(UNKNOWN,jcharArray,jcharArray)<SUB>415</SUB>> ]
+"15847" [label = <(UNKNOWN,jchar*,jchar*)<SUB>416</SUB>> ]
+"15853" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>417</SUB>> ]
+"15861" [label = <(FIELD_IDENTIFIER,ReleaseIntArrayElements,ReleaseIntArrayElements)<SUB>420</SUB>> ]
+"15863" [label = <(UNKNOWN,jintArray,jintArray)<SUB>420</SUB>> ]
+"15866" [label = <(UNKNOWN,jint*,jint*)<SUB>421</SUB>> ]
+"15872" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>422</SUB>> ]
+"15880" [label = <(FIELD_IDENTIFIER,ReleaseLongArrayElements,ReleaseLongArrayElements)<SUB>425</SUB>> ]
+"15882" [label = <(UNKNOWN,jlongArray,jlongArray)<SUB>425</SUB>> ]
+"15885" [label = <(UNKNOWN,jlong*,jlong*)<SUB>426</SUB>> ]
+"15891" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>427</SUB>> ]
+"15899" [label = <(FIELD_IDENTIFIER,ReleaseFloatArrayElements,ReleaseFloatArrayElements)<SUB>430</SUB>> ]
+"15901" [label = <(UNKNOWN,jfloatArray,jfloatArray)<SUB>430</SUB>> ]
+"15904" [label = <(UNKNOWN,jfloat*,jfloat*)<SUB>431</SUB>> ]
+"15910" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>432</SUB>> ]
+"15918" [label = <(FIELD_IDENTIFIER,ReleaseDoubleArrayElements,ReleaseDoubleArrayElements)<SUB>435</SUB>> ]
+"15920" [label = <(UNKNOWN,jdoubleArray,jdoubleArray)<SUB>435</SUB>> ]
+"15923" [label = <(UNKNOWN,jdouble*,jdouble*)<SUB>436</SUB>> ]
+"15929" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>437</SUB>> ]
+"15937" [label = <(FIELD_IDENTIFIER,ReleaseBooleanArrayElements,ReleaseBooleanArrayElements)<SUB>442</SUB>> ]
+"15946" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewByteArray)<SUB>445</SUB>> ]
+"15955" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetByteArrayElements)<SUB>447</SUB>> ]
+"15959" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>447</SUB>> ]
+"15964" [label = <(FIELD_IDENTIFIER,ReleaseBooleanArrayElements,ReleaseBooleanArrayElements)<SUB>449</SUB>> ]
+"15966" [label = <(UNKNOWN,jbooleanArray,jbooleanArray)<SUB>449</SUB>> ]
+"15969" [label = <(UNKNOWN,jboolean*,jboolean*)<SUB>450</SUB>> ]
+"15975" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>451</SUB>> ]
+"15984" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewStringUTF)<SUB>454</SUB>> ]
+"15991" [label = <(FIELD_IDENTIFIER,ReleaseBooleanArrayElements,ReleaseBooleanArrayElements)<SUB>455</SUB>> ]
+"15993" [label = <(UNKNOWN,jbooleanArray,jbooleanArray)<SUB>455</SUB>> ]
+"15996" [label = <(UNKNOWN,jboolean*,jboolean*)<SUB>456</SUB>> ]
+"16002" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>457</SUB>> ]
+"16010" [label = <(FIELD_IDENTIFIER,ReleaseByteArrayElements,ReleaseByteArrayElements)<SUB>463</SUB>> ]
+"16019" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>465</SUB>> ]
+"15780" [label = <(FIELD_IDENTIFIER,NewBooleanArray,NewBooleanArray)<SUB>400</SUB>> ]
+"15793" [label = <(FIELD_IDENTIFIER,GetBooleanArrayElements,GetBooleanArrayElements)<SUB>403</SUB>> ]
+"15948" [label = <(FIELD_IDENTIFIER,NewByteArray,NewByteArray)<SUB>445</SUB>> ]
+"15957" [label = <(FIELD_IDENTIFIER,GetByteArrayElements,GetByteArrayElements)<SUB>447</SUB>> ]
+"15986" [label = <(FIELD_IDENTIFIER,NewStringUTF,NewStringUTF)<SUB>454</SUB>> ]
+"15761" [label = <(METHOD,ReleasePrimitiveArrayElementsOfWrongType)<SUB>396</SUB>> ]
+"16021" [label = <(METHOD_RETURN,void)<SUB>396</SUB>> ]
+  "15765" -> "15780" 
+  "16014" -> "16021" 
+  "15767" -> "15765" 
+  "15775" -> "15783" 
+  "15782" -> "15793" 
+  "15788" -> "15798" 
+  "15797" -> "15804" 
+  "15801" -> "15815" 
+  "15812" -> "15823" 
+  "15820" -> "15834" 
+  "15831" -> "15842" 
+  "15839" -> "15853" 
+  "15850" -> "15861" 
+  "15858" -> "15872" 
+  "15869" -> "15880" 
+  "15877" -> "15891" 
+  "15888" -> "15899" 
+  "15896" -> "15910" 
+  "15907" -> "15918" 
+  "15915" -> "15929" 
+  "15926" -> "15937" 
+  "15934" -> "15948" 
+  "15943" -> "15957" 
+  "15952" -> "15964" 
+  "15961" -> "15975" 
+  "15972" -> "15986" 
+  "15981" -> "15991" 
+  "15988" -> "16002" 
+  "15999" -> "16010" 
+  "16007" -> "16019" 
+  "16016" -> "16014" 
+  "15768" -> "15767" 
+  "15777" -> "15775" 
+  "15783" -> "15782" 
+  "15790" -> "15788" 
+  "15798" -> "15797" 
+  "15802" -> "15806" 
+  "15805" -> "15809" 
+  "15808" -> "15801" 
+  "15813" -> "15816" 
+  "15816" -> "15812" 
+  "15821" -> "15825" 
+  "15824" -> "15828" 
+  "15827" -> "15820" 
+  "15832" -> "15835" 
+  "15835" -> "15831" 
+  "15840" -> "15844" 
+  "15843" -> "15847" 
+  "15846" -> "15839" 
+  "15851" -> "15854" 
+  "15854" -> "15850" 
+  "15859" -> "15863" 
+  "15862" -> "15866" 
+  "15865" -> "15858" 
+  "15870" -> "15873" 
+  "15873" -> "15869" 
+  "15878" -> "15882" 
+  "15881" -> "15885" 
+  "15884" -> "15877" 
+  "15889" -> "15892" 
+  "15892" -> "15888" 
+  "15897" -> "15901" 
+  "15900" -> "15904" 
+  "15903" -> "15896" 
+  "15908" -> "15911" 
+  "15911" -> "15907" 
+  "15916" -> "15920" 
+  "15919" -> "15923" 
+  "15922" -> "15915" 
+  "15927" -> "15930" 
+  "15930" -> "15926" 
+  "15935" -> "15934" 
+  "15945" -> "15943" 
+  "15954" -> "15952" 
+  "15962" -> "15966" 
+  "15965" -> "15969" 
+  "15968" -> "15961" 
+  "15973" -> "15976" 
+  "15976" -> "15972" 
+  "15983" -> "15981" 
+  "15989" -> "15993" 
+  "15992" -> "15996" 
+  "15995" -> "15988" 
+  "16000" -> "16003" 
+  "16003" -> "15999" 
+  "16008" -> "16007" 
+  "16017" -> "16016" 
+  "15770" -> "15768" 
+  "15778" -> "15777" 
+  "15791" -> "15795" 
+  "15795" -> "15790" 
+  "15804" -> "15802" 
+  "15806" -> "15805" 
+  "15809" -> "15808" 
+  "15815" -> "15813" 
+  "15823" -> "15821" 
+  "15825" -> "15824" 
+  "15828" -> "15827" 
+  "15834" -> "15832" 
+  "15842" -> "15840" 
+  "15844" -> "15843" 
+  "15847" -> "15846" 
+  "15853" -> "15851" 
+  "15861" -> "15859" 
+  "15863" -> "15862" 
+  "15866" -> "15865" 
+  "15872" -> "15870" 
+  "15880" -> "15878" 
+  "15882" -> "15881" 
+  "15885" -> "15884" 
+  "15891" -> "15889" 
+  "15899" -> "15897" 
+  "15901" -> "15900" 
+  "15904" -> "15903" 
+  "15910" -> "15908" 
+  "15918" -> "15916" 
+  "15920" -> "15919" 
+  "15923" -> "15922" 
+  "15929" -> "15927" 
+  "15937" -> "15935" 
+  "15946" -> "15945" 
+  "15955" -> "15959" 
+  "15959" -> "15954" 
+  "15964" -> "15962" 
+  "15966" -> "15965" 
+  "15969" -> "15968" 
+  "15975" -> "15973" 
+  "15984" -> "15983" 
+  "15991" -> "15989" 
+  "15993" -> "15992" 
+  "15996" -> "15995" 
+  "16002" -> "16000" 
+  "16010" -> "16008" 
+  "16019" -> "16017" 
+  "15780" -> "15778" 
+  "15793" -> "15791" 
+  "15948" -> "15946" 
+  "15957" -> "15955" 
+  "15986" -> "15984" 
+  "15761" -> "15770" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/279-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/279-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/279-cfg.dot	2023-06-07 19:33:45.537394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/279-cfg.dot	2023-06-07 19:33:52.117393975 +0330
@@ -1,96 +1,69 @@
-digraph "GetFromReflectedMethod_ToReflectedMethodBadArgumentTest" {  
-"15718" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>294</SUB>> ]
-"15727" [label = <(&lt;operator&gt;.assignment,c = env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>297</SUB>> ]
-"15734" [label = <(ASSERT_NE,ASSERT_NE(c, nullptr))<SUB>298</SUB>> ]
-"15738" [label = <(&lt;operator&gt;.assignment,mid = env_-&gt;GetMethodID(c, &quot;&lt;init&gt;&quot;, &quot;()V&quot;))<SUB>299</SUB>> ]
-"15747" [label = <(ASSERT_NE,ASSERT_NE(mid, nullptr))<SUB>300</SUB>> ]
-"15751" [label = <(&lt;operator&gt;.assignment,method = env_-&gt;ToReflectedMethod(nullptr, mid, JNI_FALSE))<SUB>303</SUB>> ]
-"15776" [label = <(&lt;operator&gt;.assignment,method = env_-&gt;ToReflectedMethod(c, nullptr, JNI_FALSE))<SUB>311</SUB>> ]
-"15785" [label = <(EXPECT_EQ,EXPECT_EQ(method, nullptr))<SUB>312</SUB>> ]
-"15788" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;jmethodID was NULL&quot;\012 : &quot;mid == null&quot;))<SUB>313</SUB>> ]
-"15796" [label = <(&lt;operator&gt;.assignment,mid = env_-&gt;FromReflectedMethod(method))<SUB>315</SUB>> ]
-"15803" [label = <(ASSERT_EQ,ASSERT_EQ(mid, nullptr))<SUB>316</SUB>> ]
-"15806" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;expected non-null method&quot; : &quot;jlr_method == null&quot;))<SUB>317</SUB>> ]
-"15814" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>319</SUB>> ]
-"15720" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>294</SUB>> ]
-"15729" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>297</SUB>> ]
-"15740" [label = <(GetMethodID,env_-&gt;GetMethodID(c, &quot;&lt;init&gt;&quot;, &quot;()V&quot;))<SUB>299</SUB>> ]
-"15753" [label = <(ToReflectedMethod,env_-&gt;ToReflectedMethod(nullptr, mid, JNI_FALSE))<SUB>303</SUB>> ]
-"15778" [label = <(ToReflectedMethod,env_-&gt;ToReflectedMethod(c, nullptr, JNI_FALSE))<SUB>311</SUB>> ]
-"15789" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>313</SUB>> ]
-"15792" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;jmethodID was NULL&quot;\012 : &quot;mid == null&quot;)<SUB>313</SUB>> ]
-"15798" [label = <(FromReflectedMethod,env_-&gt;FromReflectedMethod(method))<SUB>315</SUB>> ]
-"15807" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>317</SUB>> ]
-"15810" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;expected non-null method&quot; : &quot;jlr_method == null&quot;)<SUB>317</SUB>> ]
-"15816" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>319</SUB>> ]
-"15721" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>294</SUB>> ]
-"15730" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>297</SUB>> ]
-"15741" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetMethodID)<SUB>299</SUB>> ]
-"15754" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ToReflectedMethod)<SUB>303</SUB>> ]
-"15763" [label = <(EXPECT_EQ,EXPECT_EQ(method, nullptr))<SUB>305</SUB>> ]
-"15766" [label = <(Check,check_jni_abort_catcher.Check(&quot;ToReflectedMethod received NULL jclass&quot;))<SUB>306</SUB>> ]
-"15779" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ToReflectedMethod)<SUB>311</SUB>> ]
-"15791" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>313</SUB>> ]
-"15799" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FromReflectedMethod)<SUB>315</SUB>> ]
-"15809" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>317</SUB>> ]
-"15817" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>319</SUB>> ]
-"15723" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>294</SUB>> ]
-"15732" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>297</SUB>> ]
-"15743" [label = <(FIELD_IDENTIFIER,GetMethodID,GetMethodID)<SUB>299</SUB>> ]
-"15756" [label = <(FIELD_IDENTIFIER,ToReflectedMethod,ToReflectedMethod)<SUB>303</SUB>> ]
-"15767" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>306</SUB>> ]
-"15773" [label = <(EXPECT_NE,EXPECT_NE(method, nullptr))<SUB>308</SUB>> ]
-"15781" [label = <(FIELD_IDENTIFIER,ToReflectedMethod,ToReflectedMethod)<SUB>311</SUB>> ]
-"15801" [label = <(FIELD_IDENTIFIER,FromReflectedMethod,FromReflectedMethod)<SUB>315</SUB>> ]
-"15819" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>319</SUB>> ]
-"15769" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>306</SUB>> ]
-"15714" [label = <(METHOD,GetFromReflectedMethod_ToReflectedMethodBadArgumentTest)<SUB>293</SUB>> ]
-"15821" [label = <(METHOD_RETURN,void)<SUB>293</SUB>> ]
-  "15718" -> "15732" 
-  "15727" -> "15734" 
-  "15734" -> "15743" 
-  "15738" -> "15747" 
-  "15747" -> "15756" 
-  "15751" -> "15763" 
-  "15751" -> "15773" 
-  "15776" -> "15785" 
-  "15785" -> "15791" 
-  "15788" -> "15801" 
-  "15796" -> "15803" 
-  "15803" -> "15809" 
-  "15806" -> "15819" 
-  "15814" -> "15821" 
-  "15720" -> "15718" 
-  "15729" -> "15727" 
-  "15740" -> "15738" 
-  "15753" -> "15751" 
-  "15778" -> "15776" 
-  "15789" -> "15792" 
-  "15792" -> "15788" 
-  "15798" -> "15796" 
-  "15807" -> "15810" 
-  "15810" -> "15806" 
-  "15816" -> "15814" 
-  "15721" -> "15720" 
-  "15730" -> "15729" 
-  "15741" -> "15740" 
-  "15754" -> "15753" 
-  "15763" -> "15769" 
-  "15766" -> "15781" 
-  "15779" -> "15778" 
-  "15791" -> "15789" 
-  "15799" -> "15798" 
-  "15809" -> "15807" 
-  "15817" -> "15816" 
-  "15723" -> "15721" 
-  "15732" -> "15730" 
-  "15743" -> "15741" 
-  "15756" -> "15754" 
-  "15767" -> "15766" 
-  "15773" -> "15781" 
-  "15781" -> "15779" 
-  "15801" -> "15799" 
-  "15819" -> "15817" 
-  "15769" -> "15767" 
-  "15714" -> "15723" 
+digraph "GetReleasePrimitiveArrayCriticalOfWrongType" {  
+"16027" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>469</SUB>> ]
+"16036" [label = <(&lt;operator&gt;.assignment,object = env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>472</SUB>> ]
+"16045" [label = <(&lt;operator&gt;.assignment,* elements = env_-&gt;GetPrimitiveArrayCritical(reinterpret_cast&lt;jarray&gt;(object), &amp;is_copy))<SUB>474</SUB>> ]
+"16056" [label = <(Check,jni_abort_catcher.Check(check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;expected primitive array, given java.lang.String&quot;))<SUB>475</SUB>> ]
+"16064" [label = <(ReleasePrimitiveArrayCritical,env_-&gt;ReleasePrimitiveArrayCritical(reinterpret_cast&lt;jarray&gt;(object), elements, 0))<SUB>477</SUB>> ]
+"16073" [label = <(Check,jni_abort_catcher.Check(check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;expected primitive array, given java.lang.String&quot;))<SUB>478</SUB>> ]
+"16081" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>481</SUB>> ]
+"16029" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>469</SUB>> ]
+"16038" [label = <(NewStringUTF,env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>472</SUB>> ]
+"16047" [label = <(GetPrimitiveArrayCritical,env_-&gt;GetPrimitiveArrayCritical(reinterpret_cast&lt;jarray&gt;(object), &amp;is_copy))<SUB>474</SUB>> ]
+"16057" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>475</SUB>> ]
+"16060" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;expected primitive array, given java.lang.String&quot;)<SUB>475</SUB>> ]
+"16065" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleasePrimitiveArrayCritical)<SUB>477</SUB>> ]
+"16068" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jarray&gt;(object))<SUB>477</SUB>> ]
+"16074" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>478</SUB>> ]
+"16077" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;expected primitive array, given java.lang.String&quot;)<SUB>478</SUB>> ]
+"16083" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>481</SUB>> ]
+"16030" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>469</SUB>> ]
+"16039" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewStringUTF)<SUB>472</SUB>> ]
+"16048" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetPrimitiveArrayCritical)<SUB>474</SUB>> ]
+"16051" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jarray&gt;(object))<SUB>474</SUB>> ]
+"16054" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>474</SUB>> ]
+"16059" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>475</SUB>> ]
+"16067" [label = <(FIELD_IDENTIFIER,ReleasePrimitiveArrayCritical,ReleasePrimitiveArrayCritical)<SUB>477</SUB>> ]
+"16069" [label = <(UNKNOWN,jarray,jarray)<SUB>477</SUB>> ]
+"16076" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>478</SUB>> ]
+"16084" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>481</SUB>> ]
+"16032" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>469</SUB>> ]
+"16041" [label = <(FIELD_IDENTIFIER,NewStringUTF,NewStringUTF)<SUB>472</SUB>> ]
+"16050" [label = <(FIELD_IDENTIFIER,GetPrimitiveArrayCritical,GetPrimitiveArrayCritical)<SUB>474</SUB>> ]
+"16052" [label = <(UNKNOWN,jarray,jarray)<SUB>474</SUB>> ]
+"16086" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>481</SUB>> ]
+"16023" [label = <(METHOD,GetReleasePrimitiveArrayCriticalOfWrongType)<SUB>468</SUB>> ]
+"16088" [label = <(METHOD_RETURN,void)<SUB>468</SUB>> ]
+  "16027" -> "16041" 
+  "16036" -> "16050" 
+  "16045" -> "16059" 
+  "16056" -> "16067" 
+  "16064" -> "16076" 
+  "16073" -> "16086" 
+  "16081" -> "16088" 
+  "16029" -> "16027" 
+  "16038" -> "16036" 
+  "16047" -> "16045" 
+  "16057" -> "16060" 
+  "16060" -> "16056" 
+  "16065" -> "16069" 
+  "16068" -> "16064" 
+  "16074" -> "16077" 
+  "16077" -> "16073" 
+  "16083" -> "16081" 
+  "16030" -> "16029" 
+  "16039" -> "16038" 
+  "16048" -> "16052" 
+  "16051" -> "16054" 
+  "16054" -> "16047" 
+  "16059" -> "16057" 
+  "16067" -> "16065" 
+  "16069" -> "16068" 
+  "16076" -> "16074" 
+  "16084" -> "16083" 
+  "16032" -> "16030" 
+  "16041" -> "16039" 
+  "16050" -> "16048" 
+  "16052" -> "16051" 
+  "16086" -> "16084" 
+  "16023" -> "16032" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/28-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/28-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/28-cfg.dot	2023-06-07 19:33:45.347394697 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/28-cfg.dot	2023-06-07 19:33:51.927393994 +0330
@@ -1,39 +1,63 @@
-digraph "FromReflectedMethod" {  
-"722" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(jlr_method))<SUB>556</SUB>> ]
-"741" [label = <(soa,soa(env))<SUB>557</SUB>> ]
-"743" [label = <(RETURN,return jni::EncodeArtMethod(ArtMethod::FromReflectedMethod(soa, jlr_method));,return jni::EncodeArtMethod(ArtMethod::FromReflectedMethod(soa, jlr_method));)<SUB>558</SUB>> ]
-"744" [label = <(jni::EncodeArtMethod,jni::EncodeArtMethod(ArtMethod::FromReflectedMethod(soa, jlr_method)))<SUB>558</SUB>> ]
-"745" [label = <(&lt;operator&gt;.fieldAccess,jni::EncodeArtMethod)<SUB>558</SUB>> ]
-"748" [label = <(ArtMethod::FromReflectedMethod,ArtMethod::FromReflectedMethod(soa, jlr_method))<SUB>558</SUB>> ]
-"726" [label = <(UNLIKELY,UNLIKELY((jlr_method) == nullptr))<SUB>556</SUB>> ]
-"747" [label = <(FIELD_IDENTIFIER,EncodeArtMethod,EncodeArtMethod)<SUB>558</SUB>> ]
-"749" [label = <(&lt;operator&gt;.fieldAccess,ArtMethod::FromReflectedMethod)<SUB>558</SUB>> ]
-"727" [label = <(&lt;operator&gt;.equals,(jlr_method) == nullptr)<SUB>556</SUB>> ]
-"731" [label = <(CHECK_NON_NULL_ARGUMENT(jlr_method),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;jlr_method == null&quot;))<SUB>556</SUB>> ]
-"738" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(jlr_method),CHECK_NON_NULL_ARGUMENT(jlr_method))<SUB>556</SUB>> ]
-"751" [label = <(FIELD_IDENTIFIER,FromReflectedMethod,FromReflectedMethod)<SUB>558</SUB>> ]
-"732" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>556</SUB>> ]
-"733" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>556</SUB>> ]
-"735" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>556</SUB>> ]
-"718" [label = <(METHOD,FromReflectedMethod)<SUB>555</SUB>> ]
-"754" [label = <(METHOD_RETURN,jmethodID)<SUB>555</SUB>> ]
-  "722" -> "727" 
-  "722" -> "741" 
-  "741" -> "747" 
-  "743" -> "754" 
-  "744" -> "743" 
-  "745" -> "751" 
-  "748" -> "744" 
-  "726" -> "733" 
-  "726" -> "741" 
-  "747" -> "745" 
-  "749" -> "748" 
-  "727" -> "726" 
-  "731" -> "738" 
-  "738" -> "754" 
-  "751" -> "749" 
-  "732" -> "731" 
-  "733" -> "735" 
-  "735" -> "732" 
-  "718" -> "722" 
+digraph "GetObjectClass" {  
+"819" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_object))<SUB>518</SUB>> ]
+"838" [label = <(soa,soa(env))<SUB>519</SUB>> ]
+"840" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; o = soa.Decode&lt;mirror::Object&gt;(java_object))<SUB>520</SUB>> ]
+"857" [label = <(RETURN,return soa.AddLocalReference&lt;jclass&gt;(o-&gt;GetClass());,return soa.AddLocalReference&lt;jclass&gt;(o-&gt;GetClass());)<SUB>521</SUB>> ]
+"841" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; o)<SUB>520</SUB>> ]
+"848" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(java_object))<SUB>520</SUB>> ]
+"858" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jclass&gt;(o-&gt;GetClass()))<SUB>521</SUB>> ]
+"842" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>520</SUB>> ]
+"849" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>520</SUB>> ]
+"859" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jclass)<SUB>521</SUB>> ]
+"864" [label = <(GetClass,o-&gt;GetClass())<SUB>521</SUB>> ]
+"823" [label = <(UNLIKELY,UNLIKELY((java_object) == nullptr))<SUB>518</SUB>> ]
+"844" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>520</SUB>> ]
+"850" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>520</SUB>> ]
+"853" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>520</SUB>> ]
+"860" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>521</SUB>> ]
+"865" [label = <(&lt;operator&gt;.indirectFieldAccess,o-&gt;GetClass)<SUB>521</SUB>> ]
+"824" [label = <(&lt;operator&gt;.equals,(java_object) == nullptr)<SUB>518</SUB>> ]
+"828" [label = <(CHECK_NON_NULL_ARGUMENT(java_object),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_object == null&quot;))<SUB>518</SUB>> ]
+"835" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_object),CHECK_NON_NULL_ARGUMENT(java_object))<SUB>518</SUB>> ]
+"846" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>520</SUB>> ]
+"852" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>520</SUB>> ]
+"855" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>520</SUB>> ]
+"862" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>521</SUB>> ]
+"867" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>521</SUB>> ]
+"829" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>518</SUB>> ]
+"830" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>518</SUB>> ]
+"832" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>518</SUB>> ]
+"815" [label = <(METHOD,GetObjectClass)<SUB>517</SUB>> ]
+"868" [label = <(METHOD_RETURN,jclass)<SUB>517</SUB>> ]
+  "819" -> "824" 
+  "819" -> "838" 
+  "838" -> "846" 
+  "840" -> "862" 
+  "857" -> "868" 
+  "841" -> "852" 
+  "848" -> "840" 
+  "858" -> "857" 
+  "842" -> "841" 
+  "849" -> "848" 
+  "859" -> "867" 
+  "864" -> "858" 
+  "823" -> "830" 
+  "823" -> "838" 
+  "844" -> "842" 
+  "850" -> "855" 
+  "853" -> "849" 
+  "860" -> "859" 
+  "865" -> "864" 
+  "824" -> "823" 
+  "828" -> "835" 
+  "835" -> "868" 
+  "846" -> "844" 
+  "852" -> "850" 
+  "855" -> "853" 
+  "862" -> "860" 
+  "867" -> "865" 
+  "829" -> "828" 
+  "830" -> "832" 
+  "832" -> "829" 
+  "815" -> "819" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/280-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/280-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/280-cfg.dot	2023-06-07 19:33:45.537394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/280-cfg.dot	2023-06-07 19:33:52.117393975 +0330
@@ -1,79 +1,249 @@
-digraph "RegisterAndUnregisterNativesBadArguments" {  
-"15828" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>324</SUB>> ]
-"15858" [label = <(&lt;operator&gt;.assignment,jlobject = env_-&gt;FindClass(&quot;java/lang/Object&quot;))<SUB>334</SUB>> ]
-"15865" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, nullptr, 1), JNI_ERR))<SUB>335</SUB>> ]
-"15874" [label = <(Check,check_jni_abort_catcher-&gt;Check(&quot;methods == null&quot;))<SUB>336</SUB>> ]
-"15879" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;UnregisterNatives(nullptr), JNI_ERR))<SUB>339</SUB>> ]
-"15886" [label = <(Check,check_jni_abort_catcher-&gt;Check(check_jni ? &quot;UnregisterNatives received NULL jclass&quot;\012 : &quot;java_class == null&quot;))<SUB>340</SUB>> ]
-"15894" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>343</SUB>> ]
-"15830" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>324</SUB>> ]
-"15837" [label = <(&lt;operator&gt;.assignment,methods[] = { })<SUB>327</SUB>> ]
-"15840" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;RegisterNatives(nullptr, methods, 0), JNI_ERR))<SUB>328</SUB>> ]
-"15849" [label = <(Check,check_jni_abort_catcher-&gt;Check(check_jni ? &quot;RegisterNatives received NULL jclass&quot;\012 : &quot;java_class == null&quot;))<SUB>329</SUB>> ]
-"15860" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/Object&quot;))<SUB>334</SUB>> ]
-"15866" [label = <(RegisterNatives,env_-&gt;RegisterNatives(jlobject, nullptr, 1))<SUB>335</SUB>> ]
-"15875" [label = <(&lt;operator&gt;.indirectFieldAccess,check_jni_abort_catcher-&gt;Check)<SUB>336</SUB>> ]
-"15880" [label = <(UnregisterNatives,env_-&gt;UnregisterNatives(nullptr))<SUB>339</SUB>> ]
-"15887" [label = <(&lt;operator&gt;.indirectFieldAccess,check_jni_abort_catcher-&gt;Check)<SUB>340</SUB>> ]
-"15890" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;UnregisterNatives received NULL jclass&quot;\012 : &quot;java_class == null&quot;)<SUB>340</SUB>> ]
-"15896" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>343</SUB>> ]
-"15831" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>324</SUB>> ]
-"15839" [label = <(&lt;operator&gt;.arrayInitializer,{ })<SUB>327</SUB>> ]
-"15841" [label = <(RegisterNatives,env_-&gt;RegisterNatives(nullptr, methods, 0))<SUB>328</SUB>> ]
-"15850" [label = <(&lt;operator&gt;.indirectFieldAccess,check_jni_abort_catcher-&gt;Check)<SUB>329</SUB>> ]
-"15853" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;RegisterNatives received NULL jclass&quot;\012 : &quot;java_class == null&quot;)<SUB>329</SUB>> ]
-"15861" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>334</SUB>> ]
-"15867" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;RegisterNatives)<SUB>335</SUB>> ]
-"15877" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>336</SUB>> ]
-"15881" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;UnregisterNatives)<SUB>339</SUB>> ]
-"15889" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>340</SUB>> ]
-"15897" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>343</SUB>> ]
-"15833" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>324</SUB>> ]
-"15842" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;RegisterNatives)<SUB>328</SUB>> ]
-"15852" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>329</SUB>> ]
-"15863" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>334</SUB>> ]
-"15869" [label = <(FIELD_IDENTIFIER,RegisterNatives,RegisterNatives)<SUB>335</SUB>> ]
-"15883" [label = <(FIELD_IDENTIFIER,UnregisterNatives,UnregisterNatives)<SUB>339</SUB>> ]
-"15899" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>343</SUB>> ]
-"15844" [label = <(FIELD_IDENTIFIER,RegisterNatives,RegisterNatives)<SUB>328</SUB>> ]
-"15823" [label = <(METHOD,RegisterAndUnregisterNativesBadArguments)<SUB>322</SUB>> ]
-"15901" [label = <(METHOD_RETURN,void)<SUB>322</SUB>> ]
-  "15828" -> "15839" 
-  "15858" -> "15869" 
-  "15865" -> "15877" 
-  "15874" -> "15883" 
-  "15879" -> "15889" 
-  "15886" -> "15899" 
-  "15894" -> "15901" 
-  "15830" -> "15828" 
-  "15837" -> "15844" 
-  "15840" -> "15852" 
-  "15849" -> "15863" 
-  "15860" -> "15858" 
-  "15866" -> "15865" 
-  "15875" -> "15874" 
-  "15880" -> "15879" 
-  "15887" -> "15890" 
-  "15890" -> "15886" 
-  "15896" -> "15894" 
-  "15831" -> "15830" 
-  "15839" -> "15837" 
-  "15841" -> "15840" 
-  "15850" -> "15853" 
-  "15853" -> "15849" 
-  "15861" -> "15860" 
-  "15867" -> "15866" 
-  "15877" -> "15875" 
-  "15881" -> "15880" 
-  "15889" -> "15887" 
-  "15897" -> "15896" 
-  "15833" -> "15831" 
-  "15842" -> "15841" 
-  "15852" -> "15850" 
-  "15863" -> "15861" 
-  "15869" -> "15867" 
-  "15883" -> "15881" 
-  "15899" -> "15897" 
-  "15844" -> "15842" 
-  "15823" -> "15833" 
+digraph "GetPrimitiveArrayRegionElementsOfWrongType" {  
+"16094" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>485</SUB>> ]
+"16103" [label = <(&lt;operator&gt;.assignment,kLength = 10)<SUB>487</SUB>> ]
+"16107" [label = <(&lt;operator&gt;.assignment,array = env_-&gt;NewBooleanArray(kLength))<SUB>488</SUB>> ]
+"16114" [label = <(ASSERT_TRUE,ASSERT_TRUE(array != nullptr))<SUB>489</SUB>> ]
+"16119" [label = <(GetByteArrayRegion,env_-&gt;GetByteArrayRegion(reinterpret_cast&lt;jbyteArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jbyte*&gt;(elements)))<SUB>491</SUB>> ]
+"16131" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected byte[]&quot;\012 : &quot;attempt to get region of byte primitive array elements with an object of type boolean[]&quot;))<SUB>493</SUB>> ]
+"16139" [label = <(GetShortArrayRegion,env_-&gt;GetShortArrayRegion(reinterpret_cast&lt;jshortArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jshort*&gt;(elements)))<SUB>496</SUB>> ]
+"16151" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected short[]&quot;\012 : &quot;attempt to get region of short primitive array elements with an object of type boolean[]&quot;))<SUB>498</SUB>> ]
+"16159" [label = <(GetCharArrayRegion,env_-&gt;GetCharArrayRegion(reinterpret_cast&lt;jcharArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jchar*&gt;(elements)))<SUB>501</SUB>> ]
+"16171" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected char[]&quot;\012 : &quot;attempt to get region of char primitive array elements with an object of type boolean[]&quot;))<SUB>503</SUB>> ]
+"16179" [label = <(GetIntArrayRegion,env_-&gt;GetIntArrayRegion(reinterpret_cast&lt;jintArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jint*&gt;(elements)))<SUB>506</SUB>> ]
+"16191" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected int[]&quot;\012 : &quot;attempt to get region of int primitive array elements with an object of type boolean[]&quot;))<SUB>508</SUB>> ]
+"16199" [label = <(GetLongArrayRegion,env_-&gt;GetLongArrayRegion(reinterpret_cast&lt;jlongArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jlong*&gt;(elements)))<SUB>511</SUB>> ]
+"16211" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected long[]&quot;\012 : &quot;attempt to get region of long primitive array elements with an object of type boolean[]&quot;))<SUB>513</SUB>> ]
+"16219" [label = <(GetFloatArrayRegion,env_-&gt;GetFloatArrayRegion(reinterpret_cast&lt;jfloatArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jfloat*&gt;(elements)))<SUB>516</SUB>> ]
+"16231" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected float[]&quot;\012 : &quot;attempt to get region of float primitive array elements with an object of type boolean[]&quot;))<SUB>518</SUB>> ]
+"16239" [label = <(GetDoubleArrayRegion,env_-&gt;GetDoubleArrayRegion(reinterpret_cast&lt;jdoubleArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jdouble*&gt;(elements)))<SUB>521</SUB>> ]
+"16251" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected double[]&quot;\012 : &quot;attempt to get region of double primitive array elements with an object of type boolean[]&quot;))<SUB>523</SUB>> ]
+"16260" [label = <(&lt;operator&gt;.assignment,array2 = env_-&gt;NewByteArray(10))<SUB>526</SUB>> ]
+"16267" [label = <(GetBooleanArrayRegion,env_-&gt;GetBooleanArrayRegion(reinterpret_cast&lt;jbooleanArray&gt;(array2), 0, kLength,\012 reinterpret_cast&lt;jboolean*&gt;(elements)))<SUB>527</SUB>> ]
+"16279" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type byte[] expected boolean[]&quot;\012 : &quot;attempt to get region of boolean primitive array elements with an object of type byte[]&quot;))<SUB>529</SUB>> ]
+"16288" [label = <(&lt;operator&gt;.assignment,object = env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>532</SUB>> ]
+"16295" [label = <(GetBooleanArrayRegion,env_-&gt;GetBooleanArrayRegion(reinterpret_cast&lt;jbooleanArray&gt;(object), 0, kLength,\012 reinterpret_cast&lt;jboolean*&gt;(elements)))<SUB>533</SUB>> ]
+"16307" [label = <(Check,jni_abort_catcher.Check(check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;attempt to get region of boolean primitive array elements with an object of type &quot;\012 &quot;java.lang.String&quot;))<SUB>535</SUB>> ]
+"16315" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>539</SUB>> ]
+"16096" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>485</SUB>> ]
+"16109" [label = <(NewBooleanArray,env_-&gt;NewBooleanArray(kLength))<SUB>488</SUB>> ]
+"16115" [label = <(&lt;operator&gt;.notEquals,array != nullptr)<SUB>489</SUB>> ]
+"16120" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetByteArrayRegion)<SUB>491</SUB>> ]
+"16123" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbyteArray&gt;(array))<SUB>491</SUB>> ]
+"16128" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbyte*&gt;(elements))<SUB>492</SUB>> ]
+"16132" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>493</SUB>> ]
+"16135" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected byte[]&quot;\012 : &quot;attempt to get region of byte primitive array elements with an object of type boolean[]&quot;)<SUB>494</SUB>> ]
+"16140" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetShortArrayRegion)<SUB>496</SUB>> ]
+"16143" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jshortArray&gt;(array))<SUB>496</SUB>> ]
+"16148" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jshort*&gt;(elements))<SUB>497</SUB>> ]
+"16152" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>498</SUB>> ]
+"16155" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected short[]&quot;\012 : &quot;attempt to get region of short primitive array elements with an object of type boolean[]&quot;)<SUB>499</SUB>> ]
+"16160" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetCharArrayRegion)<SUB>501</SUB>> ]
+"16163" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jcharArray&gt;(array))<SUB>501</SUB>> ]
+"16168" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jchar*&gt;(elements))<SUB>502</SUB>> ]
+"16172" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>503</SUB>> ]
+"16175" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected char[]&quot;\012 : &quot;attempt to get region of char primitive array elements with an object of type boolean[]&quot;)<SUB>504</SUB>> ]
+"16180" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetIntArrayRegion)<SUB>506</SUB>> ]
+"16183" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jintArray&gt;(array))<SUB>506</SUB>> ]
+"16188" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jint*&gt;(elements))<SUB>507</SUB>> ]
+"16192" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>508</SUB>> ]
+"16195" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected int[]&quot;\012 : &quot;attempt to get region of int primitive array elements with an object of type boolean[]&quot;)<SUB>509</SUB>> ]
+"16200" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetLongArrayRegion)<SUB>511</SUB>> ]
+"16203" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jlongArray&gt;(array))<SUB>511</SUB>> ]
+"16208" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jlong*&gt;(elements))<SUB>512</SUB>> ]
+"16212" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>513</SUB>> ]
+"16215" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected long[]&quot;\012 : &quot;attempt to get region of long primitive array elements with an object of type boolean[]&quot;)<SUB>514</SUB>> ]
+"16220" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetFloatArrayRegion)<SUB>516</SUB>> ]
+"16223" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jfloatArray&gt;(array))<SUB>516</SUB>> ]
+"16228" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jfloat*&gt;(elements))<SUB>517</SUB>> ]
+"16232" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>518</SUB>> ]
+"16235" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected float[]&quot;\012 : &quot;attempt to get region of float primitive array elements with an object of type boolean[]&quot;)<SUB>519</SUB>> ]
+"16240" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetDoubleArrayRegion)<SUB>521</SUB>> ]
+"16243" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jdoubleArray&gt;(array))<SUB>521</SUB>> ]
+"16248" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jdouble*&gt;(elements))<SUB>522</SUB>> ]
+"16252" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>523</SUB>> ]
+"16255" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected double[]&quot;\012 : &quot;attempt to get region of double primitive array elements with an object of type boolean[]&quot;)<SUB>524</SUB>> ]
+"16262" [label = <(NewByteArray,env_-&gt;NewByteArray(10))<SUB>526</SUB>> ]
+"16268" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetBooleanArrayRegion)<SUB>527</SUB>> ]
+"16271" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbooleanArray&gt;(array2))<SUB>527</SUB>> ]
+"16276" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jboolean*&gt;(elements))<SUB>528</SUB>> ]
+"16280" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>529</SUB>> ]
+"16283" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type byte[] expected boolean[]&quot;\012 : &quot;attempt to get region of boolean primitive array elements with an object of type byte[]&quot;)<SUB>530</SUB>> ]
+"16290" [label = <(NewStringUTF,env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>532</SUB>> ]
+"16296" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetBooleanArrayRegion)<SUB>533</SUB>> ]
+"16299" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbooleanArray&gt;(object))<SUB>533</SUB>> ]
+"16304" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jboolean*&gt;(elements))<SUB>534</SUB>> ]
+"16308" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>535</SUB>> ]
+"16311" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;attempt to get region of boolean primitive array elements with an object of type &quot;\012 &quot;java.lang.String&quot;)<SUB>535</SUB>> ]
+"16317" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>539</SUB>> ]
+"16097" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>485</SUB>> ]
+"16110" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewBooleanArray)<SUB>488</SUB>> ]
+"16122" [label = <(FIELD_IDENTIFIER,GetByteArrayRegion,GetByteArrayRegion)<SUB>491</SUB>> ]
+"16124" [label = <(UNKNOWN,jbyteArray,jbyteArray)<SUB>491</SUB>> ]
+"16129" [label = <(UNKNOWN,jbyte*,jbyte*)<SUB>492</SUB>> ]
+"16134" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>493</SUB>> ]
+"16142" [label = <(FIELD_IDENTIFIER,GetShortArrayRegion,GetShortArrayRegion)<SUB>496</SUB>> ]
+"16144" [label = <(UNKNOWN,jshortArray,jshortArray)<SUB>496</SUB>> ]
+"16149" [label = <(UNKNOWN,jshort*,jshort*)<SUB>497</SUB>> ]
+"16154" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>498</SUB>> ]
+"16162" [label = <(FIELD_IDENTIFIER,GetCharArrayRegion,GetCharArrayRegion)<SUB>501</SUB>> ]
+"16164" [label = <(UNKNOWN,jcharArray,jcharArray)<SUB>501</SUB>> ]
+"16169" [label = <(UNKNOWN,jchar*,jchar*)<SUB>502</SUB>> ]
+"16174" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>503</SUB>> ]
+"16182" [label = <(FIELD_IDENTIFIER,GetIntArrayRegion,GetIntArrayRegion)<SUB>506</SUB>> ]
+"16184" [label = <(UNKNOWN,jintArray,jintArray)<SUB>506</SUB>> ]
+"16189" [label = <(UNKNOWN,jint*,jint*)<SUB>507</SUB>> ]
+"16194" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>508</SUB>> ]
+"16202" [label = <(FIELD_IDENTIFIER,GetLongArrayRegion,GetLongArrayRegion)<SUB>511</SUB>> ]
+"16204" [label = <(UNKNOWN,jlongArray,jlongArray)<SUB>511</SUB>> ]
+"16209" [label = <(UNKNOWN,jlong*,jlong*)<SUB>512</SUB>> ]
+"16214" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>513</SUB>> ]
+"16222" [label = <(FIELD_IDENTIFIER,GetFloatArrayRegion,GetFloatArrayRegion)<SUB>516</SUB>> ]
+"16224" [label = <(UNKNOWN,jfloatArray,jfloatArray)<SUB>516</SUB>> ]
+"16229" [label = <(UNKNOWN,jfloat*,jfloat*)<SUB>517</SUB>> ]
+"16234" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>518</SUB>> ]
+"16242" [label = <(FIELD_IDENTIFIER,GetDoubleArrayRegion,GetDoubleArrayRegion)<SUB>521</SUB>> ]
+"16244" [label = <(UNKNOWN,jdoubleArray,jdoubleArray)<SUB>521</SUB>> ]
+"16249" [label = <(UNKNOWN,jdouble*,jdouble*)<SUB>522</SUB>> ]
+"16254" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>523</SUB>> ]
+"16263" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewByteArray)<SUB>526</SUB>> ]
+"16270" [label = <(FIELD_IDENTIFIER,GetBooleanArrayRegion,GetBooleanArrayRegion)<SUB>527</SUB>> ]
+"16272" [label = <(UNKNOWN,jbooleanArray,jbooleanArray)<SUB>527</SUB>> ]
+"16277" [label = <(UNKNOWN,jboolean*,jboolean*)<SUB>528</SUB>> ]
+"16282" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>529</SUB>> ]
+"16291" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewStringUTF)<SUB>532</SUB>> ]
+"16298" [label = <(FIELD_IDENTIFIER,GetBooleanArrayRegion,GetBooleanArrayRegion)<SUB>533</SUB>> ]
+"16300" [label = <(UNKNOWN,jbooleanArray,jbooleanArray)<SUB>533</SUB>> ]
+"16305" [label = <(UNKNOWN,jboolean*,jboolean*)<SUB>534</SUB>> ]
+"16310" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>535</SUB>> ]
+"16318" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>539</SUB>> ]
+"16099" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>485</SUB>> ]
+"16112" [label = <(FIELD_IDENTIFIER,NewBooleanArray,NewBooleanArray)<SUB>488</SUB>> ]
+"16265" [label = <(FIELD_IDENTIFIER,NewByteArray,NewByteArray)<SUB>526</SUB>> ]
+"16293" [label = <(FIELD_IDENTIFIER,NewStringUTF,NewStringUTF)<SUB>532</SUB>> ]
+"16320" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>539</SUB>> ]
+"16090" [label = <(METHOD,GetPrimitiveArrayRegionElementsOfWrongType)<SUB>484</SUB>> ]
+"16322" [label = <(METHOD_RETURN,void)<SUB>484</SUB>> ]
+  "16094" -> "16103" 
+  "16103" -> "16112" 
+  "16107" -> "16115" 
+  "16114" -> "16122" 
+  "16119" -> "16134" 
+  "16131" -> "16142" 
+  "16139" -> "16154" 
+  "16151" -> "16162" 
+  "16159" -> "16174" 
+  "16171" -> "16182" 
+  "16179" -> "16194" 
+  "16191" -> "16202" 
+  "16199" -> "16214" 
+  "16211" -> "16222" 
+  "16219" -> "16234" 
+  "16231" -> "16242" 
+  "16239" -> "16254" 
+  "16251" -> "16265" 
+  "16260" -> "16270" 
+  "16267" -> "16282" 
+  "16279" -> "16293" 
+  "16288" -> "16298" 
+  "16295" -> "16310" 
+  "16307" -> "16320" 
+  "16315" -> "16322" 
+  "16096" -> "16094" 
+  "16109" -> "16107" 
+  "16115" -> "16114" 
+  "16120" -> "16124" 
+  "16123" -> "16129" 
+  "16128" -> "16119" 
+  "16132" -> "16135" 
+  "16135" -> "16131" 
+  "16140" -> "16144" 
+  "16143" -> "16149" 
+  "16148" -> "16139" 
+  "16152" -> "16155" 
+  "16155" -> "16151" 
+  "16160" -> "16164" 
+  "16163" -> "16169" 
+  "16168" -> "16159" 
+  "16172" -> "16175" 
+  "16175" -> "16171" 
+  "16180" -> "16184" 
+  "16183" -> "16189" 
+  "16188" -> "16179" 
+  "16192" -> "16195" 
+  "16195" -> "16191" 
+  "16200" -> "16204" 
+  "16203" -> "16209" 
+  "16208" -> "16199" 
+  "16212" -> "16215" 
+  "16215" -> "16211" 
+  "16220" -> "16224" 
+  "16223" -> "16229" 
+  "16228" -> "16219" 
+  "16232" -> "16235" 
+  "16235" -> "16231" 
+  "16240" -> "16244" 
+  "16243" -> "16249" 
+  "16248" -> "16239" 
+  "16252" -> "16255" 
+  "16255" -> "16251" 
+  "16262" -> "16260" 
+  "16268" -> "16272" 
+  "16271" -> "16277" 
+  "16276" -> "16267" 
+  "16280" -> "16283" 
+  "16283" -> "16279" 
+  "16290" -> "16288" 
+  "16296" -> "16300" 
+  "16299" -> "16305" 
+  "16304" -> "16295" 
+  "16308" -> "16311" 
+  "16311" -> "16307" 
+  "16317" -> "16315" 
+  "16097" -> "16096" 
+  "16110" -> "16109" 
+  "16122" -> "16120" 
+  "16124" -> "16123" 
+  "16129" -> "16128" 
+  "16134" -> "16132" 
+  "16142" -> "16140" 
+  "16144" -> "16143" 
+  "16149" -> "16148" 
+  "16154" -> "16152" 
+  "16162" -> "16160" 
+  "16164" -> "16163" 
+  "16169" -> "16168" 
+  "16174" -> "16172" 
+  "16182" -> "16180" 
+  "16184" -> "16183" 
+  "16189" -> "16188" 
+  "16194" -> "16192" 
+  "16202" -> "16200" 
+  "16204" -> "16203" 
+  "16209" -> "16208" 
+  "16214" -> "16212" 
+  "16222" -> "16220" 
+  "16224" -> "16223" 
+  "16229" -> "16228" 
+  "16234" -> "16232" 
+  "16242" -> "16240" 
+  "16244" -> "16243" 
+  "16249" -> "16248" 
+  "16254" -> "16252" 
+  "16263" -> "16262" 
+  "16270" -> "16268" 
+  "16272" -> "16271" 
+  "16277" -> "16276" 
+  "16282" -> "16280" 
+  "16291" -> "16290" 
+  "16298" -> "16296" 
+  "16300" -> "16299" 
+  "16305" -> "16304" 
+  "16310" -> "16308" 
+  "16318" -> "16317" 
+  "16099" -> "16097" 
+  "16112" -> "16110" 
+  "16265" -> "16263" 
+  "16293" -> "16291" 
+  "16320" -> "16318" 
+  "16090" -> "16099" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/281-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/281-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/281-cfg.dot	2023-06-07 19:33:45.537394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/281-cfg.dot	2023-06-07 19:33:52.117393975 +0330
@@ -1,243 +1,249 @@
-digraph "GetPrimitiveArrayElementsOfWrongType" {  
-"15907" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>348</SUB>> ]
-"15916" [label = <(&lt;operator&gt;.assignment,array = env_-&gt;NewBooleanArray(10))<SUB>351</SUB>> ]
-"15924" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;GetByteArrayElements(reinterpret_cast&lt;jbyteArray&gt;(array), &amp;is_copy), nullptr))<SUB>353</SUB>> ]
-"15935" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected byte[]&quot;\012 : &quot;attempt to get byte primitive array elements with an object of type boolean[]&quot;))<SUB>354</SUB>> ]
-"15943" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;GetShortArrayElements(reinterpret_cast&lt;jshortArray&gt;(array), &amp;is_copy), nullptr))<SUB>357</SUB>> ]
-"15954" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected short[]&quot;\012 : &quot;attempt to get short primitive array elements with an object of type boolean[]&quot;))<SUB>358</SUB>> ]
-"15962" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;GetCharArrayElements(reinterpret_cast&lt;jcharArray&gt;(array), &amp;is_copy), nullptr))<SUB>361</SUB>> ]
-"15973" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected char[]&quot;\012 : &quot;attempt to get char primitive array elements with an object of type boolean[]&quot;))<SUB>362</SUB>> ]
-"15981" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;GetIntArrayElements(reinterpret_cast&lt;jintArray&gt;(array), &amp;is_copy), nullptr))<SUB>365</SUB>> ]
-"15992" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected int[]&quot;\012 : &quot;attempt to get int primitive array elements with an object of type boolean[]&quot;))<SUB>366</SUB>> ]
-"16000" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;GetLongArrayElements(reinterpret_cast&lt;jlongArray&gt;(array), &amp;is_copy), nullptr))<SUB>369</SUB>> ]
-"16011" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected long[]&quot;\012 : &quot;attempt to get long primitive array elements with an object of type boolean[]&quot;))<SUB>370</SUB>> ]
-"16019" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;GetFloatArrayElements(reinterpret_cast&lt;jfloatArray&gt;(array), &amp;is_copy), nullptr))<SUB>373</SUB>> ]
-"16030" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected float[]&quot;\012 : &quot;attempt to get float primitive array elements with an object of type boolean[]&quot;))<SUB>374</SUB>> ]
-"16038" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;GetDoubleArrayElements(reinterpret_cast&lt;jdoubleArray&gt;(array), &amp;is_copy), nullptr))<SUB>377</SUB>> ]
-"16049" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected double[]&quot;\012 : &quot;attempt to get double primitive array elements with an object of type boolean[]&quot;))<SUB>378</SUB>> ]
-"16058" [label = <(&lt;operator&gt;.assignment,array2 = env_-&gt;NewByteArray(10))<SUB>381</SUB>> ]
-"16065" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;GetBooleanArrayElements(reinterpret_cast&lt;jbooleanArray&gt;(array2), &amp;is_copy),\012 nullptr))<SUB>382</SUB>> ]
-"16076" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type byte[] expected boolean[]&quot;\012 : &quot;attempt to get boolean primitive array elements with an object of type byte[]&quot;))<SUB>384</SUB>> ]
-"16085" [label = <(&lt;operator&gt;.assignment,object = env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>387</SUB>> ]
-"16092" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;GetBooleanArrayElements(reinterpret_cast&lt;jbooleanArray&gt;(object), &amp;is_copy),\012 nullptr))<SUB>388</SUB>> ]
-"16103" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;attempt to get boolean primitive array elements with an object of type java.lang.String&quot;))<SUB>390</SUB>> ]
-"16111" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>394</SUB>> ]
-"15909" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>348</SUB>> ]
-"15918" [label = <(NewBooleanArray,env_-&gt;NewBooleanArray(10))<SUB>351</SUB>> ]
-"15925" [label = <(GetByteArrayElements,env_-&gt;GetByteArrayElements(reinterpret_cast&lt;jbyteArray&gt;(array), &amp;is_copy))<SUB>353</SUB>> ]
-"15936" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>354</SUB>> ]
-"15939" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected byte[]&quot;\012 : &quot;attempt to get byte primitive array elements with an object of type boolean[]&quot;)<SUB>355</SUB>> ]
-"15944" [label = <(GetShortArrayElements,env_-&gt;GetShortArrayElements(reinterpret_cast&lt;jshortArray&gt;(array), &amp;is_copy))<SUB>357</SUB>> ]
-"15955" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>358</SUB>> ]
-"15958" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected short[]&quot;\012 : &quot;attempt to get short primitive array elements with an object of type boolean[]&quot;)<SUB>359</SUB>> ]
-"15963" [label = <(GetCharArrayElements,env_-&gt;GetCharArrayElements(reinterpret_cast&lt;jcharArray&gt;(array), &amp;is_copy))<SUB>361</SUB>> ]
-"15974" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>362</SUB>> ]
-"15977" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected char[]&quot;\012 : &quot;attempt to get char primitive array elements with an object of type boolean[]&quot;)<SUB>363</SUB>> ]
-"15982" [label = <(GetIntArrayElements,env_-&gt;GetIntArrayElements(reinterpret_cast&lt;jintArray&gt;(array), &amp;is_copy))<SUB>365</SUB>> ]
-"15993" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>366</SUB>> ]
-"15996" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected int[]&quot;\012 : &quot;attempt to get int primitive array elements with an object of type boolean[]&quot;)<SUB>367</SUB>> ]
-"16001" [label = <(GetLongArrayElements,env_-&gt;GetLongArrayElements(reinterpret_cast&lt;jlongArray&gt;(array), &amp;is_copy))<SUB>369</SUB>> ]
-"16012" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>370</SUB>> ]
-"16015" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected long[]&quot;\012 : &quot;attempt to get long primitive array elements with an object of type boolean[]&quot;)<SUB>371</SUB>> ]
-"16020" [label = <(GetFloatArrayElements,env_-&gt;GetFloatArrayElements(reinterpret_cast&lt;jfloatArray&gt;(array), &amp;is_copy))<SUB>373</SUB>> ]
-"16031" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>374</SUB>> ]
-"16034" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected float[]&quot;\012 : &quot;attempt to get float primitive array elements with an object of type boolean[]&quot;)<SUB>375</SUB>> ]
-"16039" [label = <(GetDoubleArrayElements,env_-&gt;GetDoubleArrayElements(reinterpret_cast&lt;jdoubleArray&gt;(array), &amp;is_copy))<SUB>377</SUB>> ]
-"16050" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>378</SUB>> ]
-"16053" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected double[]&quot;\012 : &quot;attempt to get double primitive array elements with an object of type boolean[]&quot;)<SUB>379</SUB>> ]
-"16060" [label = <(NewByteArray,env_-&gt;NewByteArray(10))<SUB>381</SUB>> ]
-"16066" [label = <(GetBooleanArrayElements,env_-&gt;GetBooleanArrayElements(reinterpret_cast&lt;jbooleanArray&gt;(array2), &amp;is_copy))<SUB>382</SUB>> ]
-"16077" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>384</SUB>> ]
-"16080" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type byte[] expected boolean[]&quot;\012 : &quot;attempt to get boolean primitive array elements with an object of type byte[]&quot;)<SUB>385</SUB>> ]
-"16087" [label = <(NewStringUTF,env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>387</SUB>> ]
-"16093" [label = <(GetBooleanArrayElements,env_-&gt;GetBooleanArrayElements(reinterpret_cast&lt;jbooleanArray&gt;(object), &amp;is_copy))<SUB>388</SUB>> ]
-"16104" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>390</SUB>> ]
-"16107" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;attempt to get boolean primitive array elements with an object of type java.lang.String&quot;)<SUB>391</SUB>> ]
-"16113" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>394</SUB>> ]
-"15910" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>348</SUB>> ]
-"15919" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewBooleanArray)<SUB>351</SUB>> ]
-"15926" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetByteArrayElements)<SUB>353</SUB>> ]
-"15929" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbyteArray&gt;(array))<SUB>353</SUB>> ]
-"15932" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>353</SUB>> ]
-"15938" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>354</SUB>> ]
-"15945" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetShortArrayElements)<SUB>357</SUB>> ]
-"15948" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jshortArray&gt;(array))<SUB>357</SUB>> ]
-"15951" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>357</SUB>> ]
-"15957" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>358</SUB>> ]
-"15964" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetCharArrayElements)<SUB>361</SUB>> ]
-"15967" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jcharArray&gt;(array))<SUB>361</SUB>> ]
-"15970" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>361</SUB>> ]
-"15976" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>362</SUB>> ]
-"15983" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetIntArrayElements)<SUB>365</SUB>> ]
-"15986" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jintArray&gt;(array))<SUB>365</SUB>> ]
-"15989" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>365</SUB>> ]
-"15995" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>366</SUB>> ]
-"16002" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetLongArrayElements)<SUB>369</SUB>> ]
-"16005" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jlongArray&gt;(array))<SUB>369</SUB>> ]
-"16008" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>369</SUB>> ]
-"16014" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>370</SUB>> ]
-"16021" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetFloatArrayElements)<SUB>373</SUB>> ]
-"16024" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jfloatArray&gt;(array))<SUB>373</SUB>> ]
-"16027" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>373</SUB>> ]
-"16033" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>374</SUB>> ]
-"16040" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetDoubleArrayElements)<SUB>377</SUB>> ]
-"16043" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jdoubleArray&gt;(array))<SUB>377</SUB>> ]
-"16046" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>377</SUB>> ]
-"16052" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>378</SUB>> ]
-"16061" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewByteArray)<SUB>381</SUB>> ]
-"16067" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetBooleanArrayElements)<SUB>382</SUB>> ]
-"16070" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbooleanArray&gt;(array2))<SUB>382</SUB>> ]
-"16073" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>382</SUB>> ]
-"16079" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>384</SUB>> ]
-"16088" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewStringUTF)<SUB>387</SUB>> ]
-"16094" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetBooleanArrayElements)<SUB>388</SUB>> ]
-"16097" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbooleanArray&gt;(object))<SUB>388</SUB>> ]
-"16100" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>388</SUB>> ]
-"16106" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>390</SUB>> ]
-"16114" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>394</SUB>> ]
-"15912" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>348</SUB>> ]
-"15921" [label = <(FIELD_IDENTIFIER,NewBooleanArray,NewBooleanArray)<SUB>351</SUB>> ]
-"15928" [label = <(FIELD_IDENTIFIER,GetByteArrayElements,GetByteArrayElements)<SUB>353</SUB>> ]
-"15930" [label = <(UNKNOWN,jbyteArray,jbyteArray)<SUB>353</SUB>> ]
-"15947" [label = <(FIELD_IDENTIFIER,GetShortArrayElements,GetShortArrayElements)<SUB>357</SUB>> ]
-"15949" [label = <(UNKNOWN,jshortArray,jshortArray)<SUB>357</SUB>> ]
-"15966" [label = <(FIELD_IDENTIFIER,GetCharArrayElements,GetCharArrayElements)<SUB>361</SUB>> ]
-"15968" [label = <(UNKNOWN,jcharArray,jcharArray)<SUB>361</SUB>> ]
-"15985" [label = <(FIELD_IDENTIFIER,GetIntArrayElements,GetIntArrayElements)<SUB>365</SUB>> ]
-"15987" [label = <(UNKNOWN,jintArray,jintArray)<SUB>365</SUB>> ]
-"16004" [label = <(FIELD_IDENTIFIER,GetLongArrayElements,GetLongArrayElements)<SUB>369</SUB>> ]
-"16006" [label = <(UNKNOWN,jlongArray,jlongArray)<SUB>369</SUB>> ]
-"16023" [label = <(FIELD_IDENTIFIER,GetFloatArrayElements,GetFloatArrayElements)<SUB>373</SUB>> ]
-"16025" [label = <(UNKNOWN,jfloatArray,jfloatArray)<SUB>373</SUB>> ]
-"16042" [label = <(FIELD_IDENTIFIER,GetDoubleArrayElements,GetDoubleArrayElements)<SUB>377</SUB>> ]
-"16044" [label = <(UNKNOWN,jdoubleArray,jdoubleArray)<SUB>377</SUB>> ]
-"16063" [label = <(FIELD_IDENTIFIER,NewByteArray,NewByteArray)<SUB>381</SUB>> ]
-"16069" [label = <(FIELD_IDENTIFIER,GetBooleanArrayElements,GetBooleanArrayElements)<SUB>382</SUB>> ]
-"16071" [label = <(UNKNOWN,jbooleanArray,jbooleanArray)<SUB>382</SUB>> ]
-"16090" [label = <(FIELD_IDENTIFIER,NewStringUTF,NewStringUTF)<SUB>387</SUB>> ]
-"16096" [label = <(FIELD_IDENTIFIER,GetBooleanArrayElements,GetBooleanArrayElements)<SUB>388</SUB>> ]
-"16098" [label = <(UNKNOWN,jbooleanArray,jbooleanArray)<SUB>388</SUB>> ]
-"16116" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>394</SUB>> ]
-"15903" [label = <(METHOD,GetPrimitiveArrayElementsOfWrongType)<SUB>347</SUB>> ]
-"16118" [label = <(METHOD_RETURN,void)<SUB>347</SUB>> ]
-  "15907" -> "15921" 
-  "15916" -> "15928" 
-  "15924" -> "15938" 
-  "15935" -> "15947" 
-  "15943" -> "15957" 
-  "15954" -> "15966" 
-  "15962" -> "15976" 
-  "15973" -> "15985" 
-  "15981" -> "15995" 
-  "15992" -> "16004" 
-  "16000" -> "16014" 
-  "16011" -> "16023" 
-  "16019" -> "16033" 
-  "16030" -> "16042" 
-  "16038" -> "16052" 
-  "16049" -> "16063" 
-  "16058" -> "16069" 
-  "16065" -> "16079" 
-  "16076" -> "16090" 
-  "16085" -> "16096" 
-  "16092" -> "16106" 
-  "16103" -> "16116" 
-  "16111" -> "16118" 
-  "15909" -> "15907" 
-  "15918" -> "15916" 
-  "15925" -> "15924" 
-  "15936" -> "15939" 
-  "15939" -> "15935" 
-  "15944" -> "15943" 
-  "15955" -> "15958" 
-  "15958" -> "15954" 
-  "15963" -> "15962" 
-  "15974" -> "15977" 
-  "15977" -> "15973" 
-  "15982" -> "15981" 
-  "15993" -> "15996" 
-  "15996" -> "15992" 
-  "16001" -> "16000" 
-  "16012" -> "16015" 
-  "16015" -> "16011" 
-  "16020" -> "16019" 
-  "16031" -> "16034" 
-  "16034" -> "16030" 
-  "16039" -> "16038" 
-  "16050" -> "16053" 
-  "16053" -> "16049" 
-  "16060" -> "16058" 
-  "16066" -> "16065" 
-  "16077" -> "16080" 
-  "16080" -> "16076" 
-  "16087" -> "16085" 
-  "16093" -> "16092" 
-  "16104" -> "16107" 
-  "16107" -> "16103" 
-  "16113" -> "16111" 
-  "15910" -> "15909" 
-  "15919" -> "15918" 
-  "15926" -> "15930" 
-  "15929" -> "15932" 
-  "15932" -> "15925" 
-  "15938" -> "15936" 
-  "15945" -> "15949" 
-  "15948" -> "15951" 
-  "15951" -> "15944" 
-  "15957" -> "15955" 
-  "15964" -> "15968" 
-  "15967" -> "15970" 
-  "15970" -> "15963" 
-  "15976" -> "15974" 
-  "15983" -> "15987" 
-  "15986" -> "15989" 
-  "15989" -> "15982" 
-  "15995" -> "15993" 
-  "16002" -> "16006" 
-  "16005" -> "16008" 
-  "16008" -> "16001" 
-  "16014" -> "16012" 
-  "16021" -> "16025" 
-  "16024" -> "16027" 
-  "16027" -> "16020" 
-  "16033" -> "16031" 
-  "16040" -> "16044" 
-  "16043" -> "16046" 
-  "16046" -> "16039" 
-  "16052" -> "16050" 
-  "16061" -> "16060" 
-  "16067" -> "16071" 
-  "16070" -> "16073" 
-  "16073" -> "16066" 
-  "16079" -> "16077" 
-  "16088" -> "16087" 
-  "16094" -> "16098" 
-  "16097" -> "16100" 
-  "16100" -> "16093" 
-  "16106" -> "16104" 
-  "16114" -> "16113" 
-  "15912" -> "15910" 
-  "15921" -> "15919" 
-  "15928" -> "15926" 
-  "15930" -> "15929" 
-  "15947" -> "15945" 
-  "15949" -> "15948" 
-  "15966" -> "15964" 
-  "15968" -> "15967" 
-  "15985" -> "15983" 
-  "15987" -> "15986" 
-  "16004" -> "16002" 
-  "16006" -> "16005" 
-  "16023" -> "16021" 
-  "16025" -> "16024" 
-  "16042" -> "16040" 
-  "16044" -> "16043" 
-  "16063" -> "16061" 
-  "16069" -> "16067" 
-  "16071" -> "16070" 
-  "16090" -> "16088" 
-  "16096" -> "16094" 
-  "16098" -> "16097" 
-  "16116" -> "16114" 
-  "15903" -> "15912" 
+digraph "SetPrimitiveArrayRegionElementsOfWrongType" {  
+"16328" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>543</SUB>> ]
+"16337" [label = <(&lt;operator&gt;.assignment,kLength = 10)<SUB>545</SUB>> ]
+"16341" [label = <(&lt;operator&gt;.assignment,array = env_-&gt;NewBooleanArray(kLength))<SUB>546</SUB>> ]
+"16348" [label = <(ASSERT_TRUE,ASSERT_TRUE(array != nullptr))<SUB>547</SUB>> ]
+"16353" [label = <(SetByteArrayRegion,env_-&gt;SetByteArrayRegion(reinterpret_cast&lt;jbyteArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jbyte*&gt;(elements)))<SUB>549</SUB>> ]
+"16365" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected byte[]&quot;\012 : &quot;attempt to set region of byte primitive array elements with an object of type boolean[]&quot;))<SUB>551</SUB>> ]
+"16373" [label = <(SetShortArrayRegion,env_-&gt;SetShortArrayRegion(reinterpret_cast&lt;jshortArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jshort*&gt;(elements)))<SUB>554</SUB>> ]
+"16385" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected short[]&quot;\012 : &quot;attempt to set region of short primitive array elements with an object of type boolean[]&quot;))<SUB>556</SUB>> ]
+"16393" [label = <(SetCharArrayRegion,env_-&gt;SetCharArrayRegion(reinterpret_cast&lt;jcharArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jchar*&gt;(elements)))<SUB>559</SUB>> ]
+"16405" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected char[]&quot;\012 : &quot;attempt to set region of char primitive array elements with an object of type boolean[]&quot;))<SUB>561</SUB>> ]
+"16413" [label = <(SetIntArrayRegion,env_-&gt;SetIntArrayRegion(reinterpret_cast&lt;jintArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jint*&gt;(elements)))<SUB>564</SUB>> ]
+"16425" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected int[]&quot;\012 : &quot;attempt to set region of int primitive array elements with an object of type boolean[]&quot;))<SUB>566</SUB>> ]
+"16433" [label = <(SetLongArrayRegion,env_-&gt;SetLongArrayRegion(reinterpret_cast&lt;jlongArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jlong*&gt;(elements)))<SUB>569</SUB>> ]
+"16445" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected long[]&quot;\012 : &quot;attempt to set region of long primitive array elements with an object of type boolean[]&quot;))<SUB>571</SUB>> ]
+"16453" [label = <(SetFloatArrayRegion,env_-&gt;SetFloatArrayRegion(reinterpret_cast&lt;jfloatArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jfloat*&gt;(elements)))<SUB>574</SUB>> ]
+"16465" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected float[]&quot;\012 : &quot;attempt to set region of float primitive array elements with an object of type boolean[]&quot;))<SUB>576</SUB>> ]
+"16473" [label = <(SetDoubleArrayRegion,env_-&gt;SetDoubleArrayRegion(reinterpret_cast&lt;jdoubleArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jdouble*&gt;(elements)))<SUB>579</SUB>> ]
+"16485" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected double[]&quot;\012 : &quot;attempt to set region of double primitive array elements with an object of type boolean[]&quot;))<SUB>581</SUB>> ]
+"16494" [label = <(&lt;operator&gt;.assignment,array2 = env_-&gt;NewByteArray(10))<SUB>584</SUB>> ]
+"16501" [label = <(SetBooleanArrayRegion,env_-&gt;SetBooleanArrayRegion(reinterpret_cast&lt;jbooleanArray&gt;(array2), 0, kLength,\012 reinterpret_cast&lt;jboolean*&gt;(elements)))<SUB>585</SUB>> ]
+"16513" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type byte[] expected boolean[]&quot;\012 : &quot;attempt to set region of boolean primitive array elements with an object of type byte[]&quot;))<SUB>587</SUB>> ]
+"16522" [label = <(&lt;operator&gt;.assignment,object = env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>590</SUB>> ]
+"16529" [label = <(SetBooleanArrayRegion,env_-&gt;SetBooleanArrayRegion(reinterpret_cast&lt;jbooleanArray&gt;(object), 0, kLength,\012 reinterpret_cast&lt;jboolean*&gt;(elements)))<SUB>591</SUB>> ]
+"16541" [label = <(Check,jni_abort_catcher.Check(check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;attempt to set region of boolean primitive array elements with an object of type &quot;\012 &quot;java.lang.String&quot;))<SUB>593</SUB>> ]
+"16549" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>596</SUB>> ]
+"16330" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>543</SUB>> ]
+"16343" [label = <(NewBooleanArray,env_-&gt;NewBooleanArray(kLength))<SUB>546</SUB>> ]
+"16349" [label = <(&lt;operator&gt;.notEquals,array != nullptr)<SUB>547</SUB>> ]
+"16354" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;SetByteArrayRegion)<SUB>549</SUB>> ]
+"16357" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbyteArray&gt;(array))<SUB>549</SUB>> ]
+"16362" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbyte*&gt;(elements))<SUB>550</SUB>> ]
+"16366" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>551</SUB>> ]
+"16369" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected byte[]&quot;\012 : &quot;attempt to set region of byte primitive array elements with an object of type boolean[]&quot;)<SUB>552</SUB>> ]
+"16374" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;SetShortArrayRegion)<SUB>554</SUB>> ]
+"16377" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jshortArray&gt;(array))<SUB>554</SUB>> ]
+"16382" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jshort*&gt;(elements))<SUB>555</SUB>> ]
+"16386" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>556</SUB>> ]
+"16389" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected short[]&quot;\012 : &quot;attempt to set region of short primitive array elements with an object of type boolean[]&quot;)<SUB>557</SUB>> ]
+"16394" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;SetCharArrayRegion)<SUB>559</SUB>> ]
+"16397" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jcharArray&gt;(array))<SUB>559</SUB>> ]
+"16402" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jchar*&gt;(elements))<SUB>560</SUB>> ]
+"16406" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>561</SUB>> ]
+"16409" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected char[]&quot;\012 : &quot;attempt to set region of char primitive array elements with an object of type boolean[]&quot;)<SUB>562</SUB>> ]
+"16414" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;SetIntArrayRegion)<SUB>564</SUB>> ]
+"16417" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jintArray&gt;(array))<SUB>564</SUB>> ]
+"16422" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jint*&gt;(elements))<SUB>565</SUB>> ]
+"16426" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>566</SUB>> ]
+"16429" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected int[]&quot;\012 : &quot;attempt to set region of int primitive array elements with an object of type boolean[]&quot;)<SUB>567</SUB>> ]
+"16434" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;SetLongArrayRegion)<SUB>569</SUB>> ]
+"16437" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jlongArray&gt;(array))<SUB>569</SUB>> ]
+"16442" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jlong*&gt;(elements))<SUB>570</SUB>> ]
+"16446" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>571</SUB>> ]
+"16449" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected long[]&quot;\012 : &quot;attempt to set region of long primitive array elements with an object of type boolean[]&quot;)<SUB>572</SUB>> ]
+"16454" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;SetFloatArrayRegion)<SUB>574</SUB>> ]
+"16457" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jfloatArray&gt;(array))<SUB>574</SUB>> ]
+"16462" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jfloat*&gt;(elements))<SUB>575</SUB>> ]
+"16466" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>576</SUB>> ]
+"16469" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected float[]&quot;\012 : &quot;attempt to set region of float primitive array elements with an object of type boolean[]&quot;)<SUB>577</SUB>> ]
+"16474" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;SetDoubleArrayRegion)<SUB>579</SUB>> ]
+"16477" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jdoubleArray&gt;(array))<SUB>579</SUB>> ]
+"16482" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jdouble*&gt;(elements))<SUB>580</SUB>> ]
+"16486" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>581</SUB>> ]
+"16489" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected double[]&quot;\012 : &quot;attempt to set region of double primitive array elements with an object of type boolean[]&quot;)<SUB>582</SUB>> ]
+"16496" [label = <(NewByteArray,env_-&gt;NewByteArray(10))<SUB>584</SUB>> ]
+"16502" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;SetBooleanArrayRegion)<SUB>585</SUB>> ]
+"16505" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbooleanArray&gt;(array2))<SUB>585</SUB>> ]
+"16510" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jboolean*&gt;(elements))<SUB>586</SUB>> ]
+"16514" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>587</SUB>> ]
+"16517" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type byte[] expected boolean[]&quot;\012 : &quot;attempt to set region of boolean primitive array elements with an object of type byte[]&quot;)<SUB>588</SUB>> ]
+"16524" [label = <(NewStringUTF,env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>590</SUB>> ]
+"16530" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;SetBooleanArrayRegion)<SUB>591</SUB>> ]
+"16533" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbooleanArray&gt;(object))<SUB>591</SUB>> ]
+"16538" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jboolean*&gt;(elements))<SUB>592</SUB>> ]
+"16542" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>593</SUB>> ]
+"16545" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;attempt to set region of boolean primitive array elements with an object of type &quot;\012 &quot;java.lang.String&quot;)<SUB>593</SUB>> ]
+"16551" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>596</SUB>> ]
+"16331" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>543</SUB>> ]
+"16344" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewBooleanArray)<SUB>546</SUB>> ]
+"16356" [label = <(FIELD_IDENTIFIER,SetByteArrayRegion,SetByteArrayRegion)<SUB>549</SUB>> ]
+"16358" [label = <(UNKNOWN,jbyteArray,jbyteArray)<SUB>549</SUB>> ]
+"16363" [label = <(UNKNOWN,jbyte*,jbyte*)<SUB>550</SUB>> ]
+"16368" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>551</SUB>> ]
+"16376" [label = <(FIELD_IDENTIFIER,SetShortArrayRegion,SetShortArrayRegion)<SUB>554</SUB>> ]
+"16378" [label = <(UNKNOWN,jshortArray,jshortArray)<SUB>554</SUB>> ]
+"16383" [label = <(UNKNOWN,jshort*,jshort*)<SUB>555</SUB>> ]
+"16388" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>556</SUB>> ]
+"16396" [label = <(FIELD_IDENTIFIER,SetCharArrayRegion,SetCharArrayRegion)<SUB>559</SUB>> ]
+"16398" [label = <(UNKNOWN,jcharArray,jcharArray)<SUB>559</SUB>> ]
+"16403" [label = <(UNKNOWN,jchar*,jchar*)<SUB>560</SUB>> ]
+"16408" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>561</SUB>> ]
+"16416" [label = <(FIELD_IDENTIFIER,SetIntArrayRegion,SetIntArrayRegion)<SUB>564</SUB>> ]
+"16418" [label = <(UNKNOWN,jintArray,jintArray)<SUB>564</SUB>> ]
+"16423" [label = <(UNKNOWN,jint*,jint*)<SUB>565</SUB>> ]
+"16428" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>566</SUB>> ]
+"16436" [label = <(FIELD_IDENTIFIER,SetLongArrayRegion,SetLongArrayRegion)<SUB>569</SUB>> ]
+"16438" [label = <(UNKNOWN,jlongArray,jlongArray)<SUB>569</SUB>> ]
+"16443" [label = <(UNKNOWN,jlong*,jlong*)<SUB>570</SUB>> ]
+"16448" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>571</SUB>> ]
+"16456" [label = <(FIELD_IDENTIFIER,SetFloatArrayRegion,SetFloatArrayRegion)<SUB>574</SUB>> ]
+"16458" [label = <(UNKNOWN,jfloatArray,jfloatArray)<SUB>574</SUB>> ]
+"16463" [label = <(UNKNOWN,jfloat*,jfloat*)<SUB>575</SUB>> ]
+"16468" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>576</SUB>> ]
+"16476" [label = <(FIELD_IDENTIFIER,SetDoubleArrayRegion,SetDoubleArrayRegion)<SUB>579</SUB>> ]
+"16478" [label = <(UNKNOWN,jdoubleArray,jdoubleArray)<SUB>579</SUB>> ]
+"16483" [label = <(UNKNOWN,jdouble*,jdouble*)<SUB>580</SUB>> ]
+"16488" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>581</SUB>> ]
+"16497" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewByteArray)<SUB>584</SUB>> ]
+"16504" [label = <(FIELD_IDENTIFIER,SetBooleanArrayRegion,SetBooleanArrayRegion)<SUB>585</SUB>> ]
+"16506" [label = <(UNKNOWN,jbooleanArray,jbooleanArray)<SUB>585</SUB>> ]
+"16511" [label = <(UNKNOWN,jboolean*,jboolean*)<SUB>586</SUB>> ]
+"16516" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>587</SUB>> ]
+"16525" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewStringUTF)<SUB>590</SUB>> ]
+"16532" [label = <(FIELD_IDENTIFIER,SetBooleanArrayRegion,SetBooleanArrayRegion)<SUB>591</SUB>> ]
+"16534" [label = <(UNKNOWN,jbooleanArray,jbooleanArray)<SUB>591</SUB>> ]
+"16539" [label = <(UNKNOWN,jboolean*,jboolean*)<SUB>592</SUB>> ]
+"16544" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>593</SUB>> ]
+"16552" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>596</SUB>> ]
+"16333" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>543</SUB>> ]
+"16346" [label = <(FIELD_IDENTIFIER,NewBooleanArray,NewBooleanArray)<SUB>546</SUB>> ]
+"16499" [label = <(FIELD_IDENTIFIER,NewByteArray,NewByteArray)<SUB>584</SUB>> ]
+"16527" [label = <(FIELD_IDENTIFIER,NewStringUTF,NewStringUTF)<SUB>590</SUB>> ]
+"16554" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>596</SUB>> ]
+"16324" [label = <(METHOD,SetPrimitiveArrayRegionElementsOfWrongType)<SUB>542</SUB>> ]
+"16556" [label = <(METHOD_RETURN,void)<SUB>542</SUB>> ]
+  "16328" -> "16337" 
+  "16337" -> "16346" 
+  "16341" -> "16349" 
+  "16348" -> "16356" 
+  "16353" -> "16368" 
+  "16365" -> "16376" 
+  "16373" -> "16388" 
+  "16385" -> "16396" 
+  "16393" -> "16408" 
+  "16405" -> "16416" 
+  "16413" -> "16428" 
+  "16425" -> "16436" 
+  "16433" -> "16448" 
+  "16445" -> "16456" 
+  "16453" -> "16468" 
+  "16465" -> "16476" 
+  "16473" -> "16488" 
+  "16485" -> "16499" 
+  "16494" -> "16504" 
+  "16501" -> "16516" 
+  "16513" -> "16527" 
+  "16522" -> "16532" 
+  "16529" -> "16544" 
+  "16541" -> "16554" 
+  "16549" -> "16556" 
+  "16330" -> "16328" 
+  "16343" -> "16341" 
+  "16349" -> "16348" 
+  "16354" -> "16358" 
+  "16357" -> "16363" 
+  "16362" -> "16353" 
+  "16366" -> "16369" 
+  "16369" -> "16365" 
+  "16374" -> "16378" 
+  "16377" -> "16383" 
+  "16382" -> "16373" 
+  "16386" -> "16389" 
+  "16389" -> "16385" 
+  "16394" -> "16398" 
+  "16397" -> "16403" 
+  "16402" -> "16393" 
+  "16406" -> "16409" 
+  "16409" -> "16405" 
+  "16414" -> "16418" 
+  "16417" -> "16423" 
+  "16422" -> "16413" 
+  "16426" -> "16429" 
+  "16429" -> "16425" 
+  "16434" -> "16438" 
+  "16437" -> "16443" 
+  "16442" -> "16433" 
+  "16446" -> "16449" 
+  "16449" -> "16445" 
+  "16454" -> "16458" 
+  "16457" -> "16463" 
+  "16462" -> "16453" 
+  "16466" -> "16469" 
+  "16469" -> "16465" 
+  "16474" -> "16478" 
+  "16477" -> "16483" 
+  "16482" -> "16473" 
+  "16486" -> "16489" 
+  "16489" -> "16485" 
+  "16496" -> "16494" 
+  "16502" -> "16506" 
+  "16505" -> "16511" 
+  "16510" -> "16501" 
+  "16514" -> "16517" 
+  "16517" -> "16513" 
+  "16524" -> "16522" 
+  "16530" -> "16534" 
+  "16533" -> "16539" 
+  "16538" -> "16529" 
+  "16542" -> "16545" 
+  "16545" -> "16541" 
+  "16551" -> "16549" 
+  "16331" -> "16330" 
+  "16344" -> "16343" 
+  "16356" -> "16354" 
+  "16358" -> "16357" 
+  "16363" -> "16362" 
+  "16368" -> "16366" 
+  "16376" -> "16374" 
+  "16378" -> "16377" 
+  "16383" -> "16382" 
+  "16388" -> "16386" 
+  "16396" -> "16394" 
+  "16398" -> "16397" 
+  "16403" -> "16402" 
+  "16408" -> "16406" 
+  "16416" -> "16414" 
+  "16418" -> "16417" 
+  "16423" -> "16422" 
+  "16428" -> "16426" 
+  "16436" -> "16434" 
+  "16438" -> "16437" 
+  "16443" -> "16442" 
+  "16448" -> "16446" 
+  "16456" -> "16454" 
+  "16458" -> "16457" 
+  "16463" -> "16462" 
+  "16468" -> "16466" 
+  "16476" -> "16474" 
+  "16478" -> "16477" 
+  "16483" -> "16482" 
+  "16488" -> "16486" 
+  "16497" -> "16496" 
+  "16504" -> "16502" 
+  "16506" -> "16505" 
+  "16511" -> "16510" 
+  "16516" -> "16514" 
+  "16525" -> "16524" 
+  "16532" -> "16530" 
+  "16534" -> "16533" 
+  "16539" -> "16538" 
+  "16544" -> "16542" 
+  "16552" -> "16551" 
+  "16333" -> "16331" 
+  "16346" -> "16344" 
+  "16499" -> "16497" 
+  "16527" -> "16525" 
+  "16554" -> "16552" 
+  "16324" -> "16333" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/282-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/282-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/282-cfg.dot	2023-06-07 19:33:45.537394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/282-cfg.dot	2023-06-07 19:33:52.117393975 +0330
@@ -1,283 +1,75 @@
-digraph "ReleasePrimitiveArrayElementsOfWrongType" {  
-"16124" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>398</SUB>> ]
-"16373" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>466</SUB>> ]
-"16126" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>398</SUB>> ]
-"16134" [label = <(&lt;operator&gt;.assignment,array = env_-&gt;NewBooleanArray(10))<SUB>401</SUB>> ]
-"16141" [label = <(ASSERT_TRUE,ASSERT_TRUE(array != nullptr))<SUB>402</SUB>> ]
-"16147" [label = <(&lt;operator&gt;.assignment,* elements = env_-&gt;GetBooleanArrayElements(array, &amp;is_copy))<SUB>404</SUB>> ]
-"16156" [label = <(ASSERT_TRUE,ASSERT_TRUE(elements != nullptr))<SUB>405</SUB>> ]
-"16160" [label = <(ReleaseByteArrayElements,env_-&gt;ReleaseByteArrayElements(reinterpret_cast&lt;jbyteArray&gt;(array),\012 reinterpret_cast&lt;jbyte*&gt;(elements), 0))<SUB>406</SUB>> ]
-"16171" [label = <(Check,jni_abort_catcher.Check(\012          check_jni ? &quot;incompatible array type boolean[] expected byte[]&quot;\012 : &quot;attempt to release byte primitive array elements with an object of type boolean[]&quot;))<SUB>408</SUB>> ]
-"16179" [label = <(ReleaseShortArrayElements,env_-&gt;ReleaseShortArrayElements(reinterpret_cast&lt;jshortArray&gt;(array),\012 reinterpret_cast&lt;jshort*&gt;(elements), 0))<SUB>411</SUB>> ]
-"16190" [label = <(Check,jni_abort_catcher.Check(\012          check_jni ? &quot;incompatible array type boolean[] expected short[]&quot;\012 : &quot;attempt to release short primitive array elements with an object of type boolean[]&quot;))<SUB>413</SUB>> ]
-"16198" [label = <(ReleaseCharArrayElements,env_-&gt;ReleaseCharArrayElements(reinterpret_cast&lt;jcharArray&gt;(array),\012 reinterpret_cast&lt;jchar*&gt;(elements), 0))<SUB>416</SUB>> ]
-"16209" [label = <(Check,jni_abort_catcher.Check(\012          check_jni ? &quot;incompatible array type boolean[] expected char[]&quot;\012 : &quot;attempt to release char primitive array elements with an object of type boolean[]&quot;))<SUB>418</SUB>> ]
-"16217" [label = <(ReleaseIntArrayElements,env_-&gt;ReleaseIntArrayElements(reinterpret_cast&lt;jintArray&gt;(array),\012 reinterpret_cast&lt;jint*&gt;(elements), 0))<SUB>421</SUB>> ]
-"16228" [label = <(Check,jni_abort_catcher.Check(\012          check_jni ? &quot;incompatible array type boolean[] expected int[]&quot;\012 : &quot;attempt to release int primitive array elements with an object of type boolean[]&quot;))<SUB>423</SUB>> ]
-"16236" [label = <(ReleaseLongArrayElements,env_-&gt;ReleaseLongArrayElements(reinterpret_cast&lt;jlongArray&gt;(array),\012 reinterpret_cast&lt;jlong*&gt;(elements), 0))<SUB>426</SUB>> ]
-"16247" [label = <(Check,jni_abort_catcher.Check(\012          check_jni ? &quot;incompatible array type boolean[] expected long[]&quot;\012 : &quot;attempt to release long primitive array elements with an object of type boolean[]&quot;))<SUB>428</SUB>> ]
-"16255" [label = <(ReleaseFloatArrayElements,env_-&gt;ReleaseFloatArrayElements(reinterpret_cast&lt;jfloatArray&gt;(array),\012 reinterpret_cast&lt;jfloat*&gt;(elements), 0))<SUB>431</SUB>> ]
-"16266" [label = <(Check,jni_abort_catcher.Check(\012          check_jni ? &quot;incompatible array type boolean[] expected float[]&quot;\012 : &quot;attempt to release float primitive array elements with an object of type boolean[]&quot;))<SUB>433</SUB>> ]
-"16274" [label = <(ReleaseDoubleArrayElements,env_-&gt;ReleaseDoubleArrayElements(reinterpret_cast&lt;jdoubleArray&gt;(array),\012 reinterpret_cast&lt;jdouble*&gt;(elements), 0))<SUB>436</SUB>> ]
-"16285" [label = <(Check,jni_abort_catcher.Check(\012          check_jni ? &quot;incompatible array type boolean[] expected double[]&quot;\012 : &quot;attempt to release double primitive array elements with an object of type boolean[]&quot;))<SUB>438</SUB>> ]
-"16293" [label = <(ReleaseBooleanArrayElements,env_-&gt;ReleaseBooleanArrayElements(array, elements, 0))<SUB>443</SUB>> ]
-"16302" [label = <(&lt;operator&gt;.assignment,array = env_-&gt;NewByteArray(10))<SUB>446</SUB>> ]
-"16311" [label = <(&lt;operator&gt;.assignment,* elements = env_-&gt;GetByteArrayElements(array, &amp;is_copy))<SUB>448</SUB>> ]
-"16320" [label = <(ReleaseBooleanArrayElements,env_-&gt;ReleaseBooleanArrayElements(reinterpret_cast&lt;jbooleanArray&gt;(array),\012 reinterpret_cast&lt;jboolean*&gt;(elements), 0))<SUB>450</SUB>> ]
-"16331" [label = <(Check,jni_abort_catcher.Check(\012          check_jni ? &quot;incompatible array type byte[] expected boolean[]&quot;\012 : &quot;attempt to release boolean primitive array elements with an object of type byte[]&quot;))<SUB>452</SUB>> ]
-"16340" [label = <(&lt;operator&gt;.assignment,object = env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>455</SUB>> ]
-"16347" [label = <(ReleaseBooleanArrayElements,env_-&gt;ReleaseBooleanArrayElements(reinterpret_cast&lt;jbooleanArray&gt;(object),\012 reinterpret_cast&lt;jboolean*&gt;(elements), 0))<SUB>456</SUB>> ]
-"16358" [label = <(Check,jni_abort_catcher.Check(\012          check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;attempt to release boolean primitive array elements with an object of type &quot;\012 &quot;java.lang.String&quot;))<SUB>458</SUB>> ]
-"16366" [label = <(ReleaseByteArrayElements,env_-&gt;ReleaseByteArrayElements(array, elements, 0))<SUB>464</SUB>> ]
-"16375" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>466</SUB>> ]
-"16127" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>398</SUB>> ]
-"16136" [label = <(NewBooleanArray,env_-&gt;NewBooleanArray(10))<SUB>401</SUB>> ]
-"16142" [label = <(&lt;operator&gt;.notEquals,array != nullptr)<SUB>402</SUB>> ]
-"16149" [label = <(GetBooleanArrayElements,env_-&gt;GetBooleanArrayElements(array, &amp;is_copy))<SUB>404</SUB>> ]
-"16157" [label = <(&lt;operator&gt;.notEquals,elements != nullptr)<SUB>405</SUB>> ]
-"16161" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseByteArrayElements)<SUB>406</SUB>> ]
-"16164" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbyteArray&gt;(array))<SUB>406</SUB>> ]
-"16167" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbyte*&gt;(elements))<SUB>407</SUB>> ]
-"16172" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>408</SUB>> ]
-"16175" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected byte[]&quot;\012 : &quot;attempt to release byte primitive array elements with an object of type boolean[]&quot;)<SUB>409</SUB>> ]
-"16180" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseShortArrayElements)<SUB>411</SUB>> ]
-"16183" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jshortArray&gt;(array))<SUB>411</SUB>> ]
-"16186" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jshort*&gt;(elements))<SUB>412</SUB>> ]
-"16191" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>413</SUB>> ]
-"16194" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected short[]&quot;\012 : &quot;attempt to release short primitive array elements with an object of type boolean[]&quot;)<SUB>414</SUB>> ]
-"16199" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseCharArrayElements)<SUB>416</SUB>> ]
-"16202" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jcharArray&gt;(array))<SUB>416</SUB>> ]
-"16205" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jchar*&gt;(elements))<SUB>417</SUB>> ]
-"16210" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>418</SUB>> ]
-"16213" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected char[]&quot;\012 : &quot;attempt to release char primitive array elements with an object of type boolean[]&quot;)<SUB>419</SUB>> ]
-"16218" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseIntArrayElements)<SUB>421</SUB>> ]
-"16221" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jintArray&gt;(array))<SUB>421</SUB>> ]
-"16224" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jint*&gt;(elements))<SUB>422</SUB>> ]
-"16229" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>423</SUB>> ]
-"16232" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected int[]&quot;\012 : &quot;attempt to release int primitive array elements with an object of type boolean[]&quot;)<SUB>424</SUB>> ]
-"16237" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseLongArrayElements)<SUB>426</SUB>> ]
-"16240" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jlongArray&gt;(array))<SUB>426</SUB>> ]
-"16243" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jlong*&gt;(elements))<SUB>427</SUB>> ]
-"16248" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>428</SUB>> ]
-"16251" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected long[]&quot;\012 : &quot;attempt to release long primitive array elements with an object of type boolean[]&quot;)<SUB>429</SUB>> ]
-"16256" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseFloatArrayElements)<SUB>431</SUB>> ]
-"16259" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jfloatArray&gt;(array))<SUB>431</SUB>> ]
-"16262" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jfloat*&gt;(elements))<SUB>432</SUB>> ]
-"16267" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>433</SUB>> ]
-"16270" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected float[]&quot;\012 : &quot;attempt to release float primitive array elements with an object of type boolean[]&quot;)<SUB>434</SUB>> ]
-"16275" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseDoubleArrayElements)<SUB>436</SUB>> ]
-"16278" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jdoubleArray&gt;(array))<SUB>436</SUB>> ]
-"16281" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jdouble*&gt;(elements))<SUB>437</SUB>> ]
-"16286" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>438</SUB>> ]
-"16289" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected double[]&quot;\012 : &quot;attempt to release double primitive array elements with an object of type boolean[]&quot;)<SUB>439</SUB>> ]
-"16294" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseBooleanArrayElements)<SUB>443</SUB>> ]
-"16304" [label = <(NewByteArray,env_-&gt;NewByteArray(10))<SUB>446</SUB>> ]
-"16313" [label = <(GetByteArrayElements,env_-&gt;GetByteArrayElements(array, &amp;is_copy))<SUB>448</SUB>> ]
-"16321" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseBooleanArrayElements)<SUB>450</SUB>> ]
-"16324" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbooleanArray&gt;(array))<SUB>450</SUB>> ]
-"16327" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jboolean*&gt;(elements))<SUB>451</SUB>> ]
-"16332" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>452</SUB>> ]
-"16335" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type byte[] expected boolean[]&quot;\012 : &quot;attempt to release boolean primitive array elements with an object of type byte[]&quot;)<SUB>453</SUB>> ]
-"16342" [label = <(NewStringUTF,env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>455</SUB>> ]
-"16348" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseBooleanArrayElements)<SUB>456</SUB>> ]
-"16351" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbooleanArray&gt;(object))<SUB>456</SUB>> ]
-"16354" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jboolean*&gt;(elements))<SUB>457</SUB>> ]
-"16359" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>458</SUB>> ]
-"16362" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;attempt to release boolean primitive array elements with an object of type &quot;\012 &quot;java.lang.String&quot;)<SUB>459</SUB>> ]
-"16367" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseByteArrayElements)<SUB>464</SUB>> ]
-"16376" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>466</SUB>> ]
-"16129" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>398</SUB>> ]
-"16137" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewBooleanArray)<SUB>401</SUB>> ]
-"16150" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetBooleanArrayElements)<SUB>404</SUB>> ]
-"16154" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>404</SUB>> ]
-"16163" [label = <(FIELD_IDENTIFIER,ReleaseByteArrayElements,ReleaseByteArrayElements)<SUB>406</SUB>> ]
-"16165" [label = <(UNKNOWN,jbyteArray,jbyteArray)<SUB>406</SUB>> ]
-"16168" [label = <(UNKNOWN,jbyte*,jbyte*)<SUB>407</SUB>> ]
-"16174" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>408</SUB>> ]
-"16182" [label = <(FIELD_IDENTIFIER,ReleaseShortArrayElements,ReleaseShortArrayElements)<SUB>411</SUB>> ]
-"16184" [label = <(UNKNOWN,jshortArray,jshortArray)<SUB>411</SUB>> ]
-"16187" [label = <(UNKNOWN,jshort*,jshort*)<SUB>412</SUB>> ]
-"16193" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>413</SUB>> ]
-"16201" [label = <(FIELD_IDENTIFIER,ReleaseCharArrayElements,ReleaseCharArrayElements)<SUB>416</SUB>> ]
-"16203" [label = <(UNKNOWN,jcharArray,jcharArray)<SUB>416</SUB>> ]
-"16206" [label = <(UNKNOWN,jchar*,jchar*)<SUB>417</SUB>> ]
-"16212" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>418</SUB>> ]
-"16220" [label = <(FIELD_IDENTIFIER,ReleaseIntArrayElements,ReleaseIntArrayElements)<SUB>421</SUB>> ]
-"16222" [label = <(UNKNOWN,jintArray,jintArray)<SUB>421</SUB>> ]
-"16225" [label = <(UNKNOWN,jint*,jint*)<SUB>422</SUB>> ]
-"16231" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>423</SUB>> ]
-"16239" [label = <(FIELD_IDENTIFIER,ReleaseLongArrayElements,ReleaseLongArrayElements)<SUB>426</SUB>> ]
-"16241" [label = <(UNKNOWN,jlongArray,jlongArray)<SUB>426</SUB>> ]
-"16244" [label = <(UNKNOWN,jlong*,jlong*)<SUB>427</SUB>> ]
-"16250" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>428</SUB>> ]
-"16258" [label = <(FIELD_IDENTIFIER,ReleaseFloatArrayElements,ReleaseFloatArrayElements)<SUB>431</SUB>> ]
-"16260" [label = <(UNKNOWN,jfloatArray,jfloatArray)<SUB>431</SUB>> ]
-"16263" [label = <(UNKNOWN,jfloat*,jfloat*)<SUB>432</SUB>> ]
-"16269" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>433</SUB>> ]
-"16277" [label = <(FIELD_IDENTIFIER,ReleaseDoubleArrayElements,ReleaseDoubleArrayElements)<SUB>436</SUB>> ]
-"16279" [label = <(UNKNOWN,jdoubleArray,jdoubleArray)<SUB>436</SUB>> ]
-"16282" [label = <(UNKNOWN,jdouble*,jdouble*)<SUB>437</SUB>> ]
-"16288" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>438</SUB>> ]
-"16296" [label = <(FIELD_IDENTIFIER,ReleaseBooleanArrayElements,ReleaseBooleanArrayElements)<SUB>443</SUB>> ]
-"16305" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewByteArray)<SUB>446</SUB>> ]
-"16314" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetByteArrayElements)<SUB>448</SUB>> ]
-"16318" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>448</SUB>> ]
-"16323" [label = <(FIELD_IDENTIFIER,ReleaseBooleanArrayElements,ReleaseBooleanArrayElements)<SUB>450</SUB>> ]
-"16325" [label = <(UNKNOWN,jbooleanArray,jbooleanArray)<SUB>450</SUB>> ]
-"16328" [label = <(UNKNOWN,jboolean*,jboolean*)<SUB>451</SUB>> ]
-"16334" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>452</SUB>> ]
-"16343" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewStringUTF)<SUB>455</SUB>> ]
-"16350" [label = <(FIELD_IDENTIFIER,ReleaseBooleanArrayElements,ReleaseBooleanArrayElements)<SUB>456</SUB>> ]
-"16352" [label = <(UNKNOWN,jbooleanArray,jbooleanArray)<SUB>456</SUB>> ]
-"16355" [label = <(UNKNOWN,jboolean*,jboolean*)<SUB>457</SUB>> ]
-"16361" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>458</SUB>> ]
-"16369" [label = <(FIELD_IDENTIFIER,ReleaseByteArrayElements,ReleaseByteArrayElements)<SUB>464</SUB>> ]
-"16378" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>466</SUB>> ]
-"16139" [label = <(FIELD_IDENTIFIER,NewBooleanArray,NewBooleanArray)<SUB>401</SUB>> ]
-"16152" [label = <(FIELD_IDENTIFIER,GetBooleanArrayElements,GetBooleanArrayElements)<SUB>404</SUB>> ]
-"16307" [label = <(FIELD_IDENTIFIER,NewByteArray,NewByteArray)<SUB>446</SUB>> ]
-"16316" [label = <(FIELD_IDENTIFIER,GetByteArrayElements,GetByteArrayElements)<SUB>448</SUB>> ]
-"16345" [label = <(FIELD_IDENTIFIER,NewStringUTF,NewStringUTF)<SUB>455</SUB>> ]
-"16120" [label = <(METHOD,ReleasePrimitiveArrayElementsOfWrongType)<SUB>397</SUB>> ]
-"16380" [label = <(METHOD_RETURN,void)<SUB>397</SUB>> ]
-  "16124" -> "16139" 
-  "16373" -> "16380" 
-  "16126" -> "16124" 
-  "16134" -> "16142" 
-  "16141" -> "16152" 
-  "16147" -> "16157" 
-  "16156" -> "16163" 
-  "16160" -> "16174" 
-  "16171" -> "16182" 
-  "16179" -> "16193" 
-  "16190" -> "16201" 
-  "16198" -> "16212" 
-  "16209" -> "16220" 
-  "16217" -> "16231" 
-  "16228" -> "16239" 
-  "16236" -> "16250" 
-  "16247" -> "16258" 
-  "16255" -> "16269" 
-  "16266" -> "16277" 
-  "16274" -> "16288" 
-  "16285" -> "16296" 
-  "16293" -> "16307" 
-  "16302" -> "16316" 
-  "16311" -> "16323" 
-  "16320" -> "16334" 
-  "16331" -> "16345" 
-  "16340" -> "16350" 
-  "16347" -> "16361" 
-  "16358" -> "16369" 
-  "16366" -> "16378" 
-  "16375" -> "16373" 
-  "16127" -> "16126" 
-  "16136" -> "16134" 
-  "16142" -> "16141" 
-  "16149" -> "16147" 
-  "16157" -> "16156" 
-  "16161" -> "16165" 
-  "16164" -> "16168" 
-  "16167" -> "16160" 
-  "16172" -> "16175" 
-  "16175" -> "16171" 
-  "16180" -> "16184" 
-  "16183" -> "16187" 
-  "16186" -> "16179" 
-  "16191" -> "16194" 
-  "16194" -> "16190" 
-  "16199" -> "16203" 
-  "16202" -> "16206" 
-  "16205" -> "16198" 
-  "16210" -> "16213" 
-  "16213" -> "16209" 
-  "16218" -> "16222" 
-  "16221" -> "16225" 
-  "16224" -> "16217" 
-  "16229" -> "16232" 
-  "16232" -> "16228" 
-  "16237" -> "16241" 
-  "16240" -> "16244" 
-  "16243" -> "16236" 
-  "16248" -> "16251" 
-  "16251" -> "16247" 
-  "16256" -> "16260" 
-  "16259" -> "16263" 
-  "16262" -> "16255" 
-  "16267" -> "16270" 
-  "16270" -> "16266" 
-  "16275" -> "16279" 
-  "16278" -> "16282" 
-  "16281" -> "16274" 
-  "16286" -> "16289" 
-  "16289" -> "16285" 
-  "16294" -> "16293" 
-  "16304" -> "16302" 
-  "16313" -> "16311" 
-  "16321" -> "16325" 
-  "16324" -> "16328" 
-  "16327" -> "16320" 
-  "16332" -> "16335" 
-  "16335" -> "16331" 
-  "16342" -> "16340" 
-  "16348" -> "16352" 
-  "16351" -> "16355" 
-  "16354" -> "16347" 
-  "16359" -> "16362" 
-  "16362" -> "16358" 
-  "16367" -> "16366" 
-  "16376" -> "16375" 
-  "16129" -> "16127" 
-  "16137" -> "16136" 
-  "16150" -> "16154" 
-  "16154" -> "16149" 
-  "16163" -> "16161" 
-  "16165" -> "16164" 
-  "16168" -> "16167" 
-  "16174" -> "16172" 
-  "16182" -> "16180" 
-  "16184" -> "16183" 
-  "16187" -> "16186" 
-  "16193" -> "16191" 
-  "16201" -> "16199" 
-  "16203" -> "16202" 
-  "16206" -> "16205" 
-  "16212" -> "16210" 
-  "16220" -> "16218" 
-  "16222" -> "16221" 
-  "16225" -> "16224" 
-  "16231" -> "16229" 
-  "16239" -> "16237" 
-  "16241" -> "16240" 
-  "16244" -> "16243" 
-  "16250" -> "16248" 
-  "16258" -> "16256" 
-  "16260" -> "16259" 
-  "16263" -> "16262" 
-  "16269" -> "16267" 
-  "16277" -> "16275" 
-  "16279" -> "16278" 
-  "16282" -> "16281" 
-  "16288" -> "16286" 
-  "16296" -> "16294" 
-  "16305" -> "16304" 
-  "16314" -> "16318" 
-  "16318" -> "16313" 
-  "16323" -> "16321" 
-  "16325" -> "16324" 
-  "16328" -> "16327" 
-  "16334" -> "16332" 
-  "16343" -> "16342" 
-  "16350" -> "16348" 
-  "16352" -> "16351" 
-  "16355" -> "16354" 
-  "16361" -> "16359" 
-  "16369" -> "16367" 
-  "16378" -> "16376" 
-  "16139" -> "16137" 
-  "16152" -> "16150" 
-  "16307" -> "16305" 
-  "16316" -> "16314" 
-  "16345" -> "16343" 
-  "16120" -> "16129" 
+digraph "NewObjectArrayBadArguments" {  
+"16562" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>600</SUB>> ]
+"16571" [label = <(&lt;operator&gt;.assignment,element_class = env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>603</SUB>> ]
+"16578" [label = <(ASSERT_NE,ASSERT_NE(element_class, nullptr))<SUB>604</SUB>> ]
+"16581" [label = <(NewObjectArray,env_-&gt;NewObjectArray(-1, element_class, nullptr))<SUB>606</SUB>> ]
+"16589" [label = <(Check,jni_abort_catcher.Check(check_jni ? &quot;negative jsize: -1&quot; : &quot;negative array length: -1&quot;))<SUB>607</SUB>> ]
+"16597" [label = <(NewObjectArray,env_-&gt;NewObjectArray(std::numeric_limits&lt;jint&gt;::min(), element_class, nullptr))<SUB>609</SUB>> ]
+"16613" [label = <(Check,jni_abort_catcher.Check(check_jni ? &quot;negative jsize: -2147483648&quot;\012 : &quot;negative array length: -2147483648&quot;))<SUB>610</SUB>> ]
+"16621" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>613</SUB>> ]
+"16564" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>600</SUB>> ]
+"16573" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>603</SUB>> ]
+"16582" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewObjectArray)<SUB>606</SUB>> ]
+"16585" [label = <(&lt;operator&gt;.minus,-1)<SUB>606</SUB>> ]
+"16590" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>607</SUB>> ]
+"16593" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;negative jsize: -1&quot; : &quot;negative array length: -1&quot;)<SUB>607</SUB>> ]
+"16598" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewObjectArray)<SUB>609</SUB>> ]
+"16601" [label = <(&lt;operator&gt;.greaterThan,std::numeric_limits&lt;jint&gt;::min())<SUB>609</SUB>> ]
+"16614" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>610</SUB>> ]
+"16617" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;negative jsize: -2147483648&quot;\012 : &quot;negative array length: -2147483648&quot;)<SUB>610</SUB>> ]
+"16623" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>613</SUB>> ]
+"16565" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>600</SUB>> ]
+"16574" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>603</SUB>> ]
+"16584" [label = <(FIELD_IDENTIFIER,NewObjectArray,NewObjectArray)<SUB>606</SUB>> ]
+"16592" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>607</SUB>> ]
+"16600" [label = <(FIELD_IDENTIFIER,NewObjectArray,NewObjectArray)<SUB>609</SUB>> ]
+"16602" [label = <(&lt;operator&gt;.lessThan,std::numeric_limits&lt;jint)<SUB>609</SUB>> ]
+"16607" [label = <(::min,::min())<SUB>609</SUB>> ]
+"16616" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>610</SUB>> ]
+"16624" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>613</SUB>> ]
+"16567" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>600</SUB>> ]
+"16576" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>603</SUB>> ]
+"16603" [label = <(&lt;operator&gt;.fieldAccess,std::numeric_limits)<SUB>609</SUB>> ]
+"16608" [label = <(&lt;operator&gt;.fieldAccess,::min)<SUB>609</SUB>> ]
+"16626" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>613</SUB>> ]
+"16605" [label = <(FIELD_IDENTIFIER,numeric_limits,numeric_limits)<SUB>609</SUB>> ]
+"16610" [label = <(FIELD_IDENTIFIER,min,min)<SUB>609</SUB>> ]
+"16558" [label = <(METHOD,NewObjectArrayBadArguments)<SUB>599</SUB>> ]
+"16628" [label = <(METHOD_RETURN,void)<SUB>599</SUB>> ]
+  "16562" -> "16576" 
+  "16571" -> "16578" 
+  "16578" -> "16584" 
+  "16581" -> "16592" 
+  "16589" -> "16600" 
+  "16597" -> "16616" 
+  "16613" -> "16626" 
+  "16621" -> "16628" 
+  "16564" -> "16562" 
+  "16573" -> "16571" 
+  "16582" -> "16585" 
+  "16585" -> "16581" 
+  "16590" -> "16593" 
+  "16593" -> "16589" 
+  "16598" -> "16605" 
+  "16601" -> "16597" 
+  "16614" -> "16617" 
+  "16617" -> "16613" 
+  "16623" -> "16621" 
+  "16565" -> "16564" 
+  "16574" -> "16573" 
+  "16584" -> "16582" 
+  "16592" -> "16590" 
+  "16600" -> "16598" 
+  "16602" -> "16610" 
+  "16607" -> "16601" 
+  "16616" -> "16614" 
+  "16624" -> "16623" 
+  "16567" -> "16565" 
+  "16576" -> "16574" 
+  "16603" -> "16602" 
+  "16608" -> "16607" 
+  "16626" -> "16624" 
+  "16605" -> "16603" 
+  "16610" -> "16608" 
+  "16558" -> "16567" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/283-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/283-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/283-cfg.dot	2023-06-07 19:33:45.537394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/283-cfg.dot	2023-06-07 19:33:52.117393975 +0330
@@ -1,69 +1,262 @@
-digraph "GetReleasePrimitiveArrayCriticalOfWrongType" {  
-"16386" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>470</SUB>> ]
-"16395" [label = <(&lt;operator&gt;.assignment,object = env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>473</SUB>> ]
-"16404" [label = <(&lt;operator&gt;.assignment,* elements = env_-&gt;GetPrimitiveArrayCritical(reinterpret_cast&lt;jarray&gt;(object), &amp;is_copy))<SUB>475</SUB>> ]
-"16415" [label = <(Check,jni_abort_catcher.Check(check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;expected primitive array, given java.lang.String&quot;))<SUB>476</SUB>> ]
-"16423" [label = <(ReleasePrimitiveArrayCritical,env_-&gt;ReleasePrimitiveArrayCritical(reinterpret_cast&lt;jarray&gt;(object), elements, 0))<SUB>478</SUB>> ]
-"16432" [label = <(Check,jni_abort_catcher.Check(check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;expected primitive array, given java.lang.String&quot;))<SUB>479</SUB>> ]
-"16440" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>482</SUB>> ]
-"16388" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>470</SUB>> ]
-"16397" [label = <(NewStringUTF,env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>473</SUB>> ]
-"16406" [label = <(GetPrimitiveArrayCritical,env_-&gt;GetPrimitiveArrayCritical(reinterpret_cast&lt;jarray&gt;(object), &amp;is_copy))<SUB>475</SUB>> ]
-"16416" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>476</SUB>> ]
-"16419" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;expected primitive array, given java.lang.String&quot;)<SUB>476</SUB>> ]
-"16424" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleasePrimitiveArrayCritical)<SUB>478</SUB>> ]
-"16427" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jarray&gt;(object))<SUB>478</SUB>> ]
-"16433" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>479</SUB>> ]
-"16436" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;expected primitive array, given java.lang.String&quot;)<SUB>479</SUB>> ]
-"16442" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>482</SUB>> ]
-"16389" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>470</SUB>> ]
-"16398" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewStringUTF)<SUB>473</SUB>> ]
-"16407" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetPrimitiveArrayCritical)<SUB>475</SUB>> ]
-"16410" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jarray&gt;(object))<SUB>475</SUB>> ]
-"16413" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>475</SUB>> ]
-"16418" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>476</SUB>> ]
-"16426" [label = <(FIELD_IDENTIFIER,ReleasePrimitiveArrayCritical,ReleasePrimitiveArrayCritical)<SUB>478</SUB>> ]
-"16428" [label = <(UNKNOWN,jarray,jarray)<SUB>478</SUB>> ]
-"16435" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>479</SUB>> ]
-"16443" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>482</SUB>> ]
-"16391" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>470</SUB>> ]
-"16400" [label = <(FIELD_IDENTIFIER,NewStringUTF,NewStringUTF)<SUB>473</SUB>> ]
-"16409" [label = <(FIELD_IDENTIFIER,GetPrimitiveArrayCritical,GetPrimitiveArrayCritical)<SUB>475</SUB>> ]
-"16411" [label = <(UNKNOWN,jarray,jarray)<SUB>475</SUB>> ]
-"16445" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>482</SUB>> ]
-"16382" [label = <(METHOD,GetReleasePrimitiveArrayCriticalOfWrongType)<SUB>469</SUB>> ]
-"16447" [label = <(METHOD_RETURN,void)<SUB>469</SUB>> ]
-  "16386" -> "16400" 
-  "16395" -> "16409" 
-  "16404" -> "16418" 
-  "16415" -> "16426" 
-  "16423" -> "16435" 
-  "16432" -> "16445" 
-  "16440" -> "16447" 
-  "16388" -> "16386" 
-  "16397" -> "16395" 
-  "16406" -> "16404" 
-  "16416" -> "16419" 
-  "16419" -> "16415" 
-  "16424" -> "16428" 
-  "16427" -> "16423" 
-  "16433" -> "16436" 
-  "16436" -> "16432" 
-  "16442" -> "16440" 
-  "16389" -> "16388" 
-  "16398" -> "16397" 
-  "16407" -> "16411" 
-  "16410" -> "16413" 
-  "16413" -> "16406" 
-  "16418" -> "16416" 
-  "16426" -> "16424" 
-  "16428" -> "16427" 
-  "16435" -> "16433" 
-  "16443" -> "16442" 
-  "16391" -> "16389" 
-  "16400" -> "16398" 
-  "16409" -> "16407" 
-  "16411" -> "16410" 
-  "16445" -> "16443" 
-  "16382" -> "16391" 
+digraph "SetUpForTest" {  
+"16753" [label = <(&lt;operator&gt;.assignment,env_ = Thread::Current()-&gt;GetJniEnv())<SUB>640</SUB>> ]
+"16762" [label = <(&lt;operator&gt;.assignment,jklass_ = env_-&gt;FindClass(&quot;MyClassNatives&quot;))<SUB>641</SUB>> ]
+"16769" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(jklass_ != nullptr) &lt;&lt; method_name &lt;&lt; &quot; &quot; &lt;&lt; method_sig)<SUB>642</SUB>> ]
+"16802" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(jmethod_ != nullptr) &lt;&lt; method_name &lt;&lt; &quot; &quot; &lt;&lt; method_sig)<SUB>649</SUB>> ]
+"16848" [label = <(&lt;operator&gt;.assignment,constructor = env_-&gt;GetMethodID(jklass_, &quot;&lt;init&gt;&quot;, &quot;()V&quot;))<SUB>659</SUB>> ]
+"16857" [label = <(&lt;operator&gt;.assignment,jobj_ = env_-&gt;NewObject(jklass_, constructor))<SUB>660</SUB>> ]
+"16865" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(jobj_ != nullptr) &lt;&lt; method_name &lt;&lt; &quot; &quot; &lt;&lt; method_sig)<SUB>661</SUB>> ]
+"16637" [label = <(&lt;operator&gt;.logicalNot,!runtime_-&gt;IsStarted())<SUB>620</SUB>> ]
+"16755" [label = <(GetJniEnv,Thread::Current()-&gt;GetJniEnv())<SUB>640</SUB>> ]
+"16764" [label = <(FindClass,env_-&gt;FindClass(&quot;MyClassNatives&quot;))<SUB>641</SUB>> ]
+"16770" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(jklass_ != nullptr) &lt;&lt; method_name &lt;&lt; &quot; &quot;)<SUB>642</SUB>> ]
+"16803" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(jmethod_ != nullptr) &lt;&lt; method_name &lt;&lt; &quot; &quot;)<SUB>649</SUB>> ]
+"16813" [label = <(&lt;operator&gt;.notEquals,native_fnptr != nullptr)<SUB>651</SUB>> ]
+"16850" [label = <(GetMethodID,env_-&gt;GetMethodID(jklass_, &quot;&lt;init&gt;&quot;, &quot;()V&quot;))<SUB>659</SUB>> ]
+"16859" [label = <(NewObject,env_-&gt;NewObject(jklass_, constructor))<SUB>660</SUB>> ]
+"16866" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(jobj_ != nullptr) &lt;&lt; method_name &lt;&lt; &quot; &quot;)<SUB>661</SUB>> ]
+"16638" [label = <(IsStarted,runtime_-&gt;IsStarted())<SUB>620</SUB>> ]
+"16737" [label = <(TransitionFromSuspendedToRunnable,Thread::Current()-&gt;TransitionFromSuspendedToRunnable())<SUB>635</SUB>> ]
+"16745" [label = <(&lt;operator&gt;.assignment,started = runtime_-&gt;Start())<SUB>636</SUB>> ]
+"16751" [label = <(CHECK,CHECK(started))<SUB>637</SUB>> ]
+"16756" [label = <(&lt;operator&gt;.indirectFieldAccess,Thread::Current()-&gt;GetJniEnv)<SUB>640</SUB>> ]
+"16765" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>641</SUB>> ]
+"16771" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(jklass_ != nullptr) &lt;&lt; method_name)<SUB>642</SUB>> ]
+"16782" [label = <(&lt;operator&gt;.assignment,jmethod_ = env_-&gt;GetStaticMethodID(jklass_, method_name, method_sig))<SUB>645</SUB>> ]
+"16804" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(jmethod_ != nullptr) &lt;&lt; method_name)<SUB>649</SUB>> ]
+"16818" [label = <(&lt;operator&gt;.assignment,methods[] = { { method_name, method_sig, native_fnptr } })<SUB>652</SUB>> ]
+"16825" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_EQ(JNI_OK, env_-&gt;RegisterNatives(jklass_, methods, 1))\012 &lt;&lt; method_name &lt;&lt; &quot; &quot; &lt;&lt; method_sig)<SUB>653</SUB>> ]
+"16851" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetMethodID)<SUB>659</SUB>> ]
+"16860" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewObject)<SUB>660</SUB>> ]
+"16867" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(jobj_ != nullptr) &lt;&lt; method_name)<SUB>661</SUB>> ]
+"16639" [label = <(&lt;operator&gt;.indirectFieldAccess,runtime_-&gt;IsStarted)<SUB>620</SUB>> ]
+"16645" [label = <(soa,soa(Thread::Current()))<SUB>622</SUB>> ]
+"16650" [label = <(&lt;operator&gt;.assignment,class_loader_ = LoadDex(&quot;MyClassNatives&quot;))<SUB>623</SUB>> ]
+"16654" [label = <(&lt;operator&gt;.greaterThan,StackHandleScope&lt;1&gt; hs(soa.Self()))<SUB>624</SUB>> ]
+"16663" [label = <(&lt;operator&gt;.greaterThan,Handle&lt;mirror::ClassLoader&gt; loader(\012            hs.NewHandle(soa.Decode&lt;mirror::ClassLoader&gt;(class_loader_))))<SUB>625</SUB>> ]
+"16684" [label = <(&lt;operator&gt;.assignment,* c = class_linker_-&gt;FindClass(soa.Self(), &quot;LMyClassNatives;&quot;, loader))<SUB>627</SUB>> ]
+"16697" [label = <(&lt;operator&gt;.assignment,pointer_size = class_linker_-&gt;GetImagePointerSize())<SUB>628</SUB>> ]
+"16704" [label = <(&lt;operator&gt;.assignment,* method = c-&gt;FindClassMethod(method_name, method_sig, pointer_size))<SUB>629</SUB>> ]
+"16713" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(method != nullptr) &lt;&lt; method_name &lt;&lt; &quot; &quot; &lt;&lt; method_sig)<SUB>630</SUB>> ]
+"16723" [label = <(ASSERT_EQ,ASSERT_EQ(direct, method-&gt;IsDirect()))<SUB>631</SUB>> ]
+"16729" [label = <(SetEntryPointFromQuickCompiledCode,method-&gt;SetEntryPointFromQuickCompiledCode(class_linker_-&gt;GetRuntimeQuickGenericJniStub()))<SUB>632</SUB>> ]
+"16738" [label = <(&lt;operator&gt;.indirectFieldAccess,Thread::Current()-&gt;TransitionFromSuspendedToRunnable)<SUB>635</SUB>> ]
+"16747" [label = <(Start,runtime_-&gt;Start())<SUB>636</SUB>> ]
+"16757" [label = <(Thread::Current,Thread::Current())<SUB>640</SUB>> ]
+"16761" [label = <(FIELD_IDENTIFIER,GetJniEnv,GetJniEnv)<SUB>640</SUB>> ]
+"16767" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>641</SUB>> ]
+"16772" [label = <(ASSERT_TRUE,ASSERT_TRUE(jklass_ != nullptr))<SUB>642</SUB>> ]
+"16784" [label = <(GetStaticMethodID,env_-&gt;GetStaticMethodID(jklass_, method_name, method_sig))<SUB>645</SUB>> ]
+"16793" [label = <(&lt;operator&gt;.assignment,jmethod_ = env_-&gt;GetMethodID(jklass_, method_name, method_sig))<SUB>647</SUB>> ]
+"16805" [label = <(ASSERT_TRUE,ASSERT_TRUE(jmethod_ != nullptr))<SUB>649</SUB>> ]
+"16820" [label = <(&lt;operator&gt;.arrayInitializer,{ { method_name, method_sig, native_fnptr } })<SUB>652</SUB>> ]
+"16826" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_EQ(JNI_OK, env_-&gt;RegisterNatives(jklass_, methods, 1))\012 &lt;&lt; method_name &lt;&lt; &quot; &quot;)<SUB>653</SUB>> ]
+"16842" [label = <(UnregisterNatives,env_-&gt;UnregisterNatives(jklass_))<SUB>656</SUB>> ]
+"16853" [label = <(FIELD_IDENTIFIER,GetMethodID,GetMethodID)<SUB>659</SUB>> ]
+"16862" [label = <(FIELD_IDENTIFIER,NewObject,NewObject)<SUB>660</SUB>> ]
+"16868" [label = <(ASSERT_TRUE,ASSERT_TRUE(jobj_ != nullptr))<SUB>661</SUB>> ]
+"16641" [label = <(FIELD_IDENTIFIER,IsStarted,IsStarted)<SUB>620</SUB>> ]
+"16646" [label = <(Thread::Current,Thread::Current())<SUB>622</SUB>> ]
+"16652" [label = <(LoadDex,LoadDex(&quot;MyClassNatives&quot;))<SUB>623</SUB>> ]
+"16655" [label = <(&lt;operator&gt;.lessThan,StackHandleScope&lt;1)<SUB>624</SUB>> ]
+"16658" [label = <(hs,hs(soa.Self()))<SUB>624</SUB>> ]
+"16664" [label = <(&lt;operator&gt;.lessThan,Handle&lt;mirror::ClassLoader)<SUB>625</SUB>> ]
+"16669" [label = <(loader,loader(\012            hs.NewHandle(soa.Decode&lt;mirror::ClassLoader&gt;(class_loader_))))<SUB>625</SUB>> ]
+"16686" [label = <(FindClass,class_linker_-&gt;FindClass(soa.Self(), &quot;LMyClassNatives;&quot;, loader))<SUB>627</SUB>> ]
+"16699" [label = <(GetImagePointerSize,class_linker_-&gt;GetImagePointerSize())<SUB>628</SUB>> ]
+"16706" [label = <(FindClassMethod,c-&gt;FindClassMethod(method_name, method_sig, pointer_size))<SUB>629</SUB>> ]
+"16714" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(method != nullptr) &lt;&lt; method_name &lt;&lt; &quot; &quot;)<SUB>630</SUB>> ]
+"16725" [label = <(IsDirect,method-&gt;IsDirect())<SUB>631</SUB>> ]
+"16730" [label = <(&lt;operator&gt;.indirectFieldAccess,method-&gt;SetEntryPointFromQuickCompiledCode)<SUB>632</SUB>> ]
+"16733" [label = <(GetRuntimeQuickGenericJniStub,class_linker_-&gt;GetRuntimeQuickGenericJniStub())<SUB>632</SUB>> ]
+"16739" [label = <(Thread::Current,Thread::Current())<SUB>635</SUB>> ]
+"16743" [label = <(FIELD_IDENTIFIER,TransitionFromSuspendedToRunnable,TransitionFromSuspendedToRunnable)<SUB>635</SUB>> ]
+"16748" [label = <(&lt;operator&gt;.indirectFieldAccess,runtime_-&gt;Start)<SUB>636</SUB>> ]
+"16758" [label = <(&lt;operator&gt;.fieldAccess,Thread::Current)<SUB>640</SUB>> ]
+"16773" [label = <(&lt;operator&gt;.notEquals,jklass_ != nullptr)<SUB>642</SUB>> ]
+"16785" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetStaticMethodID)<SUB>645</SUB>> ]
+"16795" [label = <(GetMethodID,env_-&gt;GetMethodID(jklass_, method_name, method_sig))<SUB>647</SUB>> ]
+"16806" [label = <(&lt;operator&gt;.notEquals,jmethod_ != nullptr)<SUB>649</SUB>> ]
+"16821" [label = <(&lt;operator&gt;.arrayInitializer,{ method_name, method_sig, native_fnptr })<SUB>652</SUB>> ]
+"16827" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_EQ(JNI_OK, env_-&gt;RegisterNatives(jklass_, methods, 1))\012 &lt;&lt; method_name)<SUB>653</SUB>> ]
+"16843" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;UnregisterNatives)<SUB>656</SUB>> ]
+"16869" [label = <(&lt;operator&gt;.notEquals,jobj_ != nullptr)<SUB>661</SUB>> ]
+"16647" [label = <(&lt;operator&gt;.fieldAccess,Thread::Current)<SUB>622</SUB>> ]
+"16659" [label = <(Self,soa.Self())<SUB>624</SUB>> ]
+"16666" [label = <(&lt;operator&gt;.fieldAccess,mirror::ClassLoader)<SUB>625</SUB>> ]
+"16670" [label = <(NewHandle,hs.NewHandle(soa.Decode&lt;mirror::ClassLoader&gt;(class_loader_)))<SUB>626</SUB>> ]
+"16687" [label = <(&lt;operator&gt;.indirectFieldAccess,class_linker_-&gt;FindClass)<SUB>627</SUB>> ]
+"16690" [label = <(Self,soa.Self())<SUB>627</SUB>> ]
+"16700" [label = <(&lt;operator&gt;.indirectFieldAccess,class_linker_-&gt;GetImagePointerSize)<SUB>628</SUB>> ]
+"16707" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;FindClassMethod)<SUB>629</SUB>> ]
+"16715" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(method != nullptr) &lt;&lt; method_name)<SUB>630</SUB>> ]
+"16726" [label = <(&lt;operator&gt;.indirectFieldAccess,method-&gt;IsDirect)<SUB>631</SUB>> ]
+"16732" [label = <(FIELD_IDENTIFIER,SetEntryPointFromQuickCompiledCode,SetEntryPointFromQuickCompiledCode)<SUB>632</SUB>> ]
+"16734" [label = <(&lt;operator&gt;.indirectFieldAccess,class_linker_-&gt;GetRuntimeQuickGenericJniStub)<SUB>632</SUB>> ]
+"16740" [label = <(&lt;operator&gt;.fieldAccess,Thread::Current)<SUB>635</SUB>> ]
+"16750" [label = <(FIELD_IDENTIFIER,Start,Start)<SUB>636</SUB>> ]
+"16760" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>640</SUB>> ]
+"16787" [label = <(FIELD_IDENTIFIER,GetStaticMethodID,GetStaticMethodID)<SUB>645</SUB>> ]
+"16796" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetMethodID)<SUB>647</SUB>> ]
+"16828" [label = <(ASSERT_EQ,ASSERT_EQ(JNI_OK, env_-&gt;RegisterNatives(jklass_, methods, 1)))<SUB>653</SUB>> ]
+"16845" [label = <(FIELD_IDENTIFIER,UnregisterNatives,UnregisterNatives)<SUB>656</SUB>> ]
+"16649" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>622</SUB>> ]
+"16660" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>624</SUB>> ]
+"16668" [label = <(FIELD_IDENTIFIER,ClassLoader,ClassLoader)<SUB>625</SUB>> ]
+"16671" [label = <(&lt;operator&gt;.fieldAccess,hs.NewHandle)<SUB>626</SUB>> ]
+"16674" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::ClassLoader&gt;(class_loader_))<SUB>626</SUB>> ]
+"16689" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>627</SUB>> ]
+"16691" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>627</SUB>> ]
+"16702" [label = <(FIELD_IDENTIFIER,GetImagePointerSize,GetImagePointerSize)<SUB>628</SUB>> ]
+"16709" [label = <(FIELD_IDENTIFIER,FindClassMethod,FindClassMethod)<SUB>629</SUB>> ]
+"16716" [label = <(ASSERT_TRUE,ASSERT_TRUE(method != nullptr))<SUB>630</SUB>> ]
+"16728" [label = <(FIELD_IDENTIFIER,IsDirect,IsDirect)<SUB>631</SUB>> ]
+"16736" [label = <(FIELD_IDENTIFIER,GetRuntimeQuickGenericJniStub,GetRuntimeQuickGenericJniStub)<SUB>632</SUB>> ]
+"16742" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>635</SUB>> ]
+"16798" [label = <(FIELD_IDENTIFIER,GetMethodID,GetMethodID)<SUB>647</SUB>> ]
+"16830" [label = <(RegisterNatives,env_-&gt;RegisterNatives(jklass_, methods, 1))<SUB>653</SUB>> ]
+"16662" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>624</SUB>> ]
+"16673" [label = <(FIELD_IDENTIFIER,NewHandle,NewHandle)<SUB>626</SUB>> ]
+"16675" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::ClassLoader)<SUB>626</SUB>> ]
+"16693" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>627</SUB>> ]
+"16717" [label = <(&lt;operator&gt;.notEquals,method != nullptr)<SUB>630</SUB>> ]
+"16831" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;RegisterNatives)<SUB>653</SUB>> ]
+"16676" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>626</SUB>> ]
+"16679" [label = <(&lt;operator&gt;.fieldAccess,mirror::ClassLoader)<SUB>626</SUB>> ]
+"16833" [label = <(FIELD_IDENTIFIER,RegisterNatives,RegisterNatives)<SUB>653</SUB>> ]
+"16678" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>626</SUB>> ]
+"16681" [label = <(FIELD_IDENTIFIER,ClassLoader,ClassLoader)<SUB>626</SUB>> ]
+"16630" [label = <(METHOD,SetUpForTest)<SUB>616</SUB>> ]
+"16875" [label = <(METHOD_RETURN,void)<SUB>616</SUB>> ]
+  "16753" -> "16767" 
+  "16762" -> "16773" 
+  "16769" -> "16787" 
+  "16769" -> "16798" 
+  "16802" -> "16813" 
+  "16848" -> "16862" 
+  "16857" -> "16869" 
+  "16865" -> "16875" 
+  "16637" -> "16649" 
+  "16637" -> "16760" 
+  "16755" -> "16753" 
+  "16764" -> "16762" 
+  "16770" -> "16769" 
+  "16803" -> "16802" 
+  "16813" -> "16821" 
+  "16813" -> "16845" 
+  "16850" -> "16848" 
+  "16859" -> "16857" 
+  "16866" -> "16865" 
+  "16638" -> "16637" 
+  "16737" -> "16750" 
+  "16745" -> "16751" 
+  "16751" -> "16760" 
+  "16756" -> "16755" 
+  "16765" -> "16764" 
+  "16771" -> "16770" 
+  "16782" -> "16806" 
+  "16804" -> "16803" 
+  "16818" -> "16833" 
+  "16825" -> "16853" 
+  "16851" -> "16850" 
+  "16860" -> "16859" 
+  "16867" -> "16866" 
+  "16639" -> "16638" 
+  "16645" -> "16652" 
+  "16650" -> "16655" 
+  "16654" -> "16668" 
+  "16663" -> "16689" 
+  "16684" -> "16702" 
+  "16697" -> "16709" 
+  "16704" -> "16717" 
+  "16713" -> "16728" 
+  "16723" -> "16732" 
+  "16729" -> "16742" 
+  "16738" -> "16737" 
+  "16747" -> "16745" 
+  "16757" -> "16761" 
+  "16761" -> "16756" 
+  "16767" -> "16765" 
+  "16772" -> "16771" 
+  "16784" -> "16782" 
+  "16793" -> "16806" 
+  "16805" -> "16804" 
+  "16820" -> "16818" 
+  "16826" -> "16825" 
+  "16842" -> "16853" 
+  "16853" -> "16851" 
+  "16862" -> "16860" 
+  "16868" -> "16867" 
+  "16641" -> "16639" 
+  "16646" -> "16645" 
+  "16652" -> "16650" 
+  "16655" -> "16662" 
+  "16658" -> "16654" 
+  "16664" -> "16673" 
+  "16669" -> "16663" 
+  "16686" -> "16684" 
+  "16699" -> "16697" 
+  "16706" -> "16704" 
+  "16714" -> "16713" 
+  "16725" -> "16723" 
+  "16730" -> "16736" 
+  "16733" -> "16729" 
+  "16739" -> "16743" 
+  "16743" -> "16738" 
+  "16748" -> "16747" 
+  "16758" -> "16757" 
+  "16773" -> "16772" 
+  "16785" -> "16784" 
+  "16795" -> "16793" 
+  "16806" -> "16805" 
+  "16821" -> "16820" 
+  "16827" -> "16826" 
+  "16843" -> "16842" 
+  "16869" -> "16868" 
+  "16647" -> "16646" 
+  "16659" -> "16658" 
+  "16666" -> "16664" 
+  "16670" -> "16669" 
+  "16687" -> "16693" 
+  "16690" -> "16686" 
+  "16700" -> "16699" 
+  "16707" -> "16706" 
+  "16715" -> "16714" 
+  "16726" -> "16725" 
+  "16732" -> "16730" 
+  "16734" -> "16733" 
+  "16740" -> "16739" 
+  "16750" -> "16748" 
+  "16760" -> "16758" 
+  "16787" -> "16785" 
+  "16796" -> "16795" 
+  "16828" -> "16827" 
+  "16845" -> "16843" 
+  "16649" -> "16647" 
+  "16660" -> "16659" 
+  "16668" -> "16666" 
+  "16671" -> "16678" 
+  "16674" -> "16670" 
+  "16689" -> "16687" 
+  "16691" -> "16690" 
+  "16702" -> "16700" 
+  "16709" -> "16707" 
+  "16716" -> "16715" 
+  "16728" -> "16726" 
+  "16736" -> "16734" 
+  "16742" -> "16740" 
+  "16798" -> "16796" 
+  "16830" -> "16828" 
+  "16662" -> "16660" 
+  "16673" -> "16671" 
+  "16675" -> "16674" 
+  "16693" -> "16691" 
+  "16717" -> "16716" 
+  "16831" -> "16830" 
+  "16676" -> "16681" 
+  "16679" -> "16675" 
+  "16833" -> "16831" 
+  "16678" -> "16676" 
+  "16681" -> "16679" 
+  "16630" -> "16641" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/284-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/284-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/284-cfg.dot	2023-06-07 19:33:45.537394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/284-cfg.dot	2023-06-07 19:33:52.117393975 +0330
@@ -1,249 +1,25 @@
-digraph "GetPrimitiveArrayRegionElementsOfWrongType" {  
-"16453" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>486</SUB>> ]
-"16462" [label = <(&lt;operator&gt;.assignment,kLength = 10)<SUB>488</SUB>> ]
-"16466" [label = <(&lt;operator&gt;.assignment,array = env_-&gt;NewBooleanArray(kLength))<SUB>489</SUB>> ]
-"16473" [label = <(ASSERT_TRUE,ASSERT_TRUE(array != nullptr))<SUB>490</SUB>> ]
-"16478" [label = <(GetByteArrayRegion,env_-&gt;GetByteArrayRegion(reinterpret_cast&lt;jbyteArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jbyte*&gt;(elements)))<SUB>492</SUB>> ]
-"16490" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected byte[]&quot;\012 : &quot;attempt to get region of byte primitive array elements with an object of type boolean[]&quot;))<SUB>494</SUB>> ]
-"16498" [label = <(GetShortArrayRegion,env_-&gt;GetShortArrayRegion(reinterpret_cast&lt;jshortArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jshort*&gt;(elements)))<SUB>497</SUB>> ]
-"16510" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected short[]&quot;\012 : &quot;attempt to get region of short primitive array elements with an object of type boolean[]&quot;))<SUB>499</SUB>> ]
-"16518" [label = <(GetCharArrayRegion,env_-&gt;GetCharArrayRegion(reinterpret_cast&lt;jcharArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jchar*&gt;(elements)))<SUB>502</SUB>> ]
-"16530" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected char[]&quot;\012 : &quot;attempt to get region of char primitive array elements with an object of type boolean[]&quot;))<SUB>504</SUB>> ]
-"16538" [label = <(GetIntArrayRegion,env_-&gt;GetIntArrayRegion(reinterpret_cast&lt;jintArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jint*&gt;(elements)))<SUB>507</SUB>> ]
-"16550" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected int[]&quot;\012 : &quot;attempt to get region of int primitive array elements with an object of type boolean[]&quot;))<SUB>509</SUB>> ]
-"16558" [label = <(GetLongArrayRegion,env_-&gt;GetLongArrayRegion(reinterpret_cast&lt;jlongArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jlong*&gt;(elements)))<SUB>512</SUB>> ]
-"16570" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected long[]&quot;\012 : &quot;attempt to get region of long primitive array elements with an object of type boolean[]&quot;))<SUB>514</SUB>> ]
-"16578" [label = <(GetFloatArrayRegion,env_-&gt;GetFloatArrayRegion(reinterpret_cast&lt;jfloatArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jfloat*&gt;(elements)))<SUB>517</SUB>> ]
-"16590" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected float[]&quot;\012 : &quot;attempt to get region of float primitive array elements with an object of type boolean[]&quot;))<SUB>519</SUB>> ]
-"16598" [label = <(GetDoubleArrayRegion,env_-&gt;GetDoubleArrayRegion(reinterpret_cast&lt;jdoubleArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jdouble*&gt;(elements)))<SUB>522</SUB>> ]
-"16610" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected double[]&quot;\012 : &quot;attempt to get region of double primitive array elements with an object of type boolean[]&quot;))<SUB>524</SUB>> ]
-"16619" [label = <(&lt;operator&gt;.assignment,array2 = env_-&gt;NewByteArray(10))<SUB>527</SUB>> ]
-"16626" [label = <(GetBooleanArrayRegion,env_-&gt;GetBooleanArrayRegion(reinterpret_cast&lt;jbooleanArray&gt;(array2), 0, kLength,\012 reinterpret_cast&lt;jboolean*&gt;(elements)))<SUB>528</SUB>> ]
-"16638" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type byte[] expected boolean[]&quot;\012 : &quot;attempt to get region of boolean primitive array elements with an object of type byte[]&quot;))<SUB>530</SUB>> ]
-"16647" [label = <(&lt;operator&gt;.assignment,object = env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>533</SUB>> ]
-"16654" [label = <(GetBooleanArrayRegion,env_-&gt;GetBooleanArrayRegion(reinterpret_cast&lt;jbooleanArray&gt;(object), 0, kLength,\012 reinterpret_cast&lt;jboolean*&gt;(elements)))<SUB>534</SUB>> ]
-"16666" [label = <(Check,jni_abort_catcher.Check(check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;attempt to get region of boolean primitive array elements with an object of type &quot;\012 &quot;java.lang.String&quot;))<SUB>536</SUB>> ]
-"16674" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>540</SUB>> ]
-"16455" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>486</SUB>> ]
-"16468" [label = <(NewBooleanArray,env_-&gt;NewBooleanArray(kLength))<SUB>489</SUB>> ]
-"16474" [label = <(&lt;operator&gt;.notEquals,array != nullptr)<SUB>490</SUB>> ]
-"16479" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetByteArrayRegion)<SUB>492</SUB>> ]
-"16482" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbyteArray&gt;(array))<SUB>492</SUB>> ]
-"16487" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbyte*&gt;(elements))<SUB>493</SUB>> ]
-"16491" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>494</SUB>> ]
-"16494" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected byte[]&quot;\012 : &quot;attempt to get region of byte primitive array elements with an object of type boolean[]&quot;)<SUB>495</SUB>> ]
-"16499" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetShortArrayRegion)<SUB>497</SUB>> ]
-"16502" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jshortArray&gt;(array))<SUB>497</SUB>> ]
-"16507" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jshort*&gt;(elements))<SUB>498</SUB>> ]
-"16511" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>499</SUB>> ]
-"16514" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected short[]&quot;\012 : &quot;attempt to get region of short primitive array elements with an object of type boolean[]&quot;)<SUB>500</SUB>> ]
-"16519" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetCharArrayRegion)<SUB>502</SUB>> ]
-"16522" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jcharArray&gt;(array))<SUB>502</SUB>> ]
-"16527" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jchar*&gt;(elements))<SUB>503</SUB>> ]
-"16531" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>504</SUB>> ]
-"16534" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected char[]&quot;\012 : &quot;attempt to get region of char primitive array elements with an object of type boolean[]&quot;)<SUB>505</SUB>> ]
-"16539" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetIntArrayRegion)<SUB>507</SUB>> ]
-"16542" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jintArray&gt;(array))<SUB>507</SUB>> ]
-"16547" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jint*&gt;(elements))<SUB>508</SUB>> ]
-"16551" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>509</SUB>> ]
-"16554" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected int[]&quot;\012 : &quot;attempt to get region of int primitive array elements with an object of type boolean[]&quot;)<SUB>510</SUB>> ]
-"16559" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetLongArrayRegion)<SUB>512</SUB>> ]
-"16562" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jlongArray&gt;(array))<SUB>512</SUB>> ]
-"16567" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jlong*&gt;(elements))<SUB>513</SUB>> ]
-"16571" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>514</SUB>> ]
-"16574" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected long[]&quot;\012 : &quot;attempt to get region of long primitive array elements with an object of type boolean[]&quot;)<SUB>515</SUB>> ]
-"16579" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetFloatArrayRegion)<SUB>517</SUB>> ]
-"16582" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jfloatArray&gt;(array))<SUB>517</SUB>> ]
-"16587" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jfloat*&gt;(elements))<SUB>518</SUB>> ]
-"16591" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>519</SUB>> ]
-"16594" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected float[]&quot;\012 : &quot;attempt to get region of float primitive array elements with an object of type boolean[]&quot;)<SUB>520</SUB>> ]
-"16599" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetDoubleArrayRegion)<SUB>522</SUB>> ]
-"16602" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jdoubleArray&gt;(array))<SUB>522</SUB>> ]
-"16607" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jdouble*&gt;(elements))<SUB>523</SUB>> ]
-"16611" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>524</SUB>> ]
-"16614" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected double[]&quot;\012 : &quot;attempt to get region of double primitive array elements with an object of type boolean[]&quot;)<SUB>525</SUB>> ]
-"16621" [label = <(NewByteArray,env_-&gt;NewByteArray(10))<SUB>527</SUB>> ]
-"16627" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetBooleanArrayRegion)<SUB>528</SUB>> ]
-"16630" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbooleanArray&gt;(array2))<SUB>528</SUB>> ]
-"16635" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jboolean*&gt;(elements))<SUB>529</SUB>> ]
-"16639" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>530</SUB>> ]
-"16642" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type byte[] expected boolean[]&quot;\012 : &quot;attempt to get region of boolean primitive array elements with an object of type byte[]&quot;)<SUB>531</SUB>> ]
-"16649" [label = <(NewStringUTF,env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>533</SUB>> ]
-"16655" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetBooleanArrayRegion)<SUB>534</SUB>> ]
-"16658" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbooleanArray&gt;(object))<SUB>534</SUB>> ]
-"16663" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jboolean*&gt;(elements))<SUB>535</SUB>> ]
-"16667" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>536</SUB>> ]
-"16670" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;attempt to get region of boolean primitive array elements with an object of type &quot;\012 &quot;java.lang.String&quot;)<SUB>536</SUB>> ]
-"16676" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>540</SUB>> ]
-"16456" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>486</SUB>> ]
-"16469" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewBooleanArray)<SUB>489</SUB>> ]
-"16481" [label = <(FIELD_IDENTIFIER,GetByteArrayRegion,GetByteArrayRegion)<SUB>492</SUB>> ]
-"16483" [label = <(UNKNOWN,jbyteArray,jbyteArray)<SUB>492</SUB>> ]
-"16488" [label = <(UNKNOWN,jbyte*,jbyte*)<SUB>493</SUB>> ]
-"16493" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>494</SUB>> ]
-"16501" [label = <(FIELD_IDENTIFIER,GetShortArrayRegion,GetShortArrayRegion)<SUB>497</SUB>> ]
-"16503" [label = <(UNKNOWN,jshortArray,jshortArray)<SUB>497</SUB>> ]
-"16508" [label = <(UNKNOWN,jshort*,jshort*)<SUB>498</SUB>> ]
-"16513" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>499</SUB>> ]
-"16521" [label = <(FIELD_IDENTIFIER,GetCharArrayRegion,GetCharArrayRegion)<SUB>502</SUB>> ]
-"16523" [label = <(UNKNOWN,jcharArray,jcharArray)<SUB>502</SUB>> ]
-"16528" [label = <(UNKNOWN,jchar*,jchar*)<SUB>503</SUB>> ]
-"16533" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>504</SUB>> ]
-"16541" [label = <(FIELD_IDENTIFIER,GetIntArrayRegion,GetIntArrayRegion)<SUB>507</SUB>> ]
-"16543" [label = <(UNKNOWN,jintArray,jintArray)<SUB>507</SUB>> ]
-"16548" [label = <(UNKNOWN,jint*,jint*)<SUB>508</SUB>> ]
-"16553" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>509</SUB>> ]
-"16561" [label = <(FIELD_IDENTIFIER,GetLongArrayRegion,GetLongArrayRegion)<SUB>512</SUB>> ]
-"16563" [label = <(UNKNOWN,jlongArray,jlongArray)<SUB>512</SUB>> ]
-"16568" [label = <(UNKNOWN,jlong*,jlong*)<SUB>513</SUB>> ]
-"16573" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>514</SUB>> ]
-"16581" [label = <(FIELD_IDENTIFIER,GetFloatArrayRegion,GetFloatArrayRegion)<SUB>517</SUB>> ]
-"16583" [label = <(UNKNOWN,jfloatArray,jfloatArray)<SUB>517</SUB>> ]
-"16588" [label = <(UNKNOWN,jfloat*,jfloat*)<SUB>518</SUB>> ]
-"16593" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>519</SUB>> ]
-"16601" [label = <(FIELD_IDENTIFIER,GetDoubleArrayRegion,GetDoubleArrayRegion)<SUB>522</SUB>> ]
-"16603" [label = <(UNKNOWN,jdoubleArray,jdoubleArray)<SUB>522</SUB>> ]
-"16608" [label = <(UNKNOWN,jdouble*,jdouble*)<SUB>523</SUB>> ]
-"16613" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>524</SUB>> ]
-"16622" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewByteArray)<SUB>527</SUB>> ]
-"16629" [label = <(FIELD_IDENTIFIER,GetBooleanArrayRegion,GetBooleanArrayRegion)<SUB>528</SUB>> ]
-"16631" [label = <(UNKNOWN,jbooleanArray,jbooleanArray)<SUB>528</SUB>> ]
-"16636" [label = <(UNKNOWN,jboolean*,jboolean*)<SUB>529</SUB>> ]
-"16641" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>530</SUB>> ]
-"16650" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewStringUTF)<SUB>533</SUB>> ]
-"16657" [label = <(FIELD_IDENTIFIER,GetBooleanArrayRegion,GetBooleanArrayRegion)<SUB>534</SUB>> ]
-"16659" [label = <(UNKNOWN,jbooleanArray,jbooleanArray)<SUB>534</SUB>> ]
-"16664" [label = <(UNKNOWN,jboolean*,jboolean*)<SUB>535</SUB>> ]
-"16669" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>536</SUB>> ]
-"16677" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>540</SUB>> ]
-"16458" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>486</SUB>> ]
-"16471" [label = <(FIELD_IDENTIFIER,NewBooleanArray,NewBooleanArray)<SUB>489</SUB>> ]
-"16624" [label = <(FIELD_IDENTIFIER,NewByteArray,NewByteArray)<SUB>527</SUB>> ]
-"16652" [label = <(FIELD_IDENTIFIER,NewStringUTF,NewStringUTF)<SUB>533</SUB>> ]
-"16679" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>540</SUB>> ]
-"16449" [label = <(METHOD,GetPrimitiveArrayRegionElementsOfWrongType)<SUB>485</SUB>> ]
-"16681" [label = <(METHOD_RETURN,void)<SUB>485</SUB>> ]
-  "16453" -> "16462" 
-  "16462" -> "16471" 
-  "16466" -> "16474" 
-  "16473" -> "16481" 
-  "16478" -> "16493" 
-  "16490" -> "16501" 
-  "16498" -> "16513" 
-  "16510" -> "16521" 
-  "16518" -> "16533" 
-  "16530" -> "16541" 
-  "16538" -> "16553" 
-  "16550" -> "16561" 
-  "16558" -> "16573" 
-  "16570" -> "16581" 
-  "16578" -> "16593" 
-  "16590" -> "16601" 
-  "16598" -> "16613" 
-  "16610" -> "16624" 
-  "16619" -> "16629" 
-  "16626" -> "16641" 
-  "16638" -> "16652" 
-  "16647" -> "16657" 
-  "16654" -> "16669" 
-  "16666" -> "16679" 
-  "16674" -> "16681" 
-  "16455" -> "16453" 
-  "16468" -> "16466" 
-  "16474" -> "16473" 
-  "16479" -> "16483" 
-  "16482" -> "16488" 
-  "16487" -> "16478" 
-  "16491" -> "16494" 
-  "16494" -> "16490" 
-  "16499" -> "16503" 
-  "16502" -> "16508" 
-  "16507" -> "16498" 
-  "16511" -> "16514" 
-  "16514" -> "16510" 
-  "16519" -> "16523" 
-  "16522" -> "16528" 
-  "16527" -> "16518" 
-  "16531" -> "16534" 
-  "16534" -> "16530" 
-  "16539" -> "16543" 
-  "16542" -> "16548" 
-  "16547" -> "16538" 
-  "16551" -> "16554" 
-  "16554" -> "16550" 
-  "16559" -> "16563" 
-  "16562" -> "16568" 
-  "16567" -> "16558" 
-  "16571" -> "16574" 
-  "16574" -> "16570" 
-  "16579" -> "16583" 
-  "16582" -> "16588" 
-  "16587" -> "16578" 
-  "16591" -> "16594" 
-  "16594" -> "16590" 
-  "16599" -> "16603" 
-  "16602" -> "16608" 
-  "16607" -> "16598" 
-  "16611" -> "16614" 
-  "16614" -> "16610" 
-  "16621" -> "16619" 
-  "16627" -> "16631" 
-  "16630" -> "16636" 
-  "16635" -> "16626" 
-  "16639" -> "16642" 
-  "16642" -> "16638" 
-  "16649" -> "16647" 
-  "16655" -> "16659" 
-  "16658" -> "16664" 
-  "16663" -> "16654" 
-  "16667" -> "16670" 
-  "16670" -> "16666" 
-  "16676" -> "16674" 
-  "16456" -> "16455" 
-  "16469" -> "16468" 
-  "16481" -> "16479" 
-  "16483" -> "16482" 
-  "16488" -> "16487" 
-  "16493" -> "16491" 
-  "16501" -> "16499" 
-  "16503" -> "16502" 
-  "16508" -> "16507" 
-  "16513" -> "16511" 
-  "16521" -> "16519" 
-  "16523" -> "16522" 
-  "16528" -> "16527" 
-  "16533" -> "16531" 
-  "16541" -> "16539" 
-  "16543" -> "16542" 
-  "16548" -> "16547" 
-  "16553" -> "16551" 
-  "16561" -> "16559" 
-  "16563" -> "16562" 
-  "16568" -> "16567" 
-  "16573" -> "16571" 
-  "16581" -> "16579" 
-  "16583" -> "16582" 
-  "16588" -> "16587" 
-  "16593" -> "16591" 
-  "16601" -> "16599" 
-  "16603" -> "16602" 
-  "16608" -> "16607" 
-  "16613" -> "16611" 
-  "16622" -> "16621" 
-  "16629" -> "16627" 
-  "16631" -> "16630" 
-  "16636" -> "16635" 
-  "16641" -> "16639" 
-  "16650" -> "16649" 
-  "16657" -> "16655" 
-  "16659" -> "16658" 
-  "16664" -> "16663" 
-  "16669" -> "16667" 
-  "16677" -> "16676" 
-  "16458" -> "16456" 
-  "16471" -> "16469" 
-  "16624" -> "16622" 
-  "16652" -> "16650" 
-  "16679" -> "16677" 
-  "16449" -> "16458" 
+digraph "GetLocalsCapacity" {  
+"16900" [label = <(soa,soa(Thread::Current()))<SUB>936</SUB>> ]
+"16905" [label = <(RETURN,return reinterpret_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetLocalsCapacity();,return reinterpret_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetLocalsCapacity();)<SUB>937</SUB>> ]
+"16901" [label = <(Thread::Current,Thread::Current())<SUB>936</SUB>> ]
+"16906" [label = <(GetLocalsCapacity,reinterpret_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetLocalsCapacity())<SUB>937</SUB>> ]
+"16902" [label = <(&lt;operator&gt;.fieldAccess,Thread::Current)<SUB>936</SUB>> ]
+"16907" [label = <(&lt;operator&gt;.indirectFieldAccess,reinterpret_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetLocalsCapacity)<SUB>937</SUB>> ]
+"16904" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>936</SUB>> ]
+"16908" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;JNIEnvExt*&gt;(env))<SUB>937</SUB>> ]
+"16911" [label = <(FIELD_IDENTIFIER,GetLocalsCapacity,GetLocalsCapacity)<SUB>937</SUB>> ]
+"16909" [label = <(UNKNOWN,JNIEnvExt*,JNIEnvExt*)<SUB>937</SUB>> ]
+"16896" [label = <(METHOD,GetLocalsCapacity)<SUB>935</SUB>> ]
+"16912" [label = <(METHOD_RETURN,size_t)<SUB>935</SUB>> ]
+  "16900" -> "16909" 
+  "16905" -> "16912" 
+  "16901" -> "16900" 
+  "16906" -> "16905" 
+  "16902" -> "16901" 
+  "16907" -> "16906" 
+  "16904" -> "16902" 
+  "16908" -> "16911" 
+  "16911" -> "16907" 
+  "16909" -> "16908" 
+  "16896" -> "16904" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/285-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/285-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/285-cfg.dot	2023-06-07 19:33:45.547394675 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/285-cfg.dot	2023-06-07 19:33:52.117393975 +0330
@@ -1,249 +1,5 @@
-digraph "SetPrimitiveArrayRegionElementsOfWrongType" {  
-"16687" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>544</SUB>> ]
-"16696" [label = <(&lt;operator&gt;.assignment,kLength = 10)<SUB>546</SUB>> ]
-"16700" [label = <(&lt;operator&gt;.assignment,array = env_-&gt;NewBooleanArray(kLength))<SUB>547</SUB>> ]
-"16707" [label = <(ASSERT_TRUE,ASSERT_TRUE(array != nullptr))<SUB>548</SUB>> ]
-"16712" [label = <(SetByteArrayRegion,env_-&gt;SetByteArrayRegion(reinterpret_cast&lt;jbyteArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jbyte*&gt;(elements)))<SUB>550</SUB>> ]
-"16724" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected byte[]&quot;\012 : &quot;attempt to set region of byte primitive array elements with an object of type boolean[]&quot;))<SUB>552</SUB>> ]
-"16732" [label = <(SetShortArrayRegion,env_-&gt;SetShortArrayRegion(reinterpret_cast&lt;jshortArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jshort*&gt;(elements)))<SUB>555</SUB>> ]
-"16744" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected short[]&quot;\012 : &quot;attempt to set region of short primitive array elements with an object of type boolean[]&quot;))<SUB>557</SUB>> ]
-"16752" [label = <(SetCharArrayRegion,env_-&gt;SetCharArrayRegion(reinterpret_cast&lt;jcharArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jchar*&gt;(elements)))<SUB>560</SUB>> ]
-"16764" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected char[]&quot;\012 : &quot;attempt to set region of char primitive array elements with an object of type boolean[]&quot;))<SUB>562</SUB>> ]
-"16772" [label = <(SetIntArrayRegion,env_-&gt;SetIntArrayRegion(reinterpret_cast&lt;jintArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jint*&gt;(elements)))<SUB>565</SUB>> ]
-"16784" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected int[]&quot;\012 : &quot;attempt to set region of int primitive array elements with an object of type boolean[]&quot;))<SUB>567</SUB>> ]
-"16792" [label = <(SetLongArrayRegion,env_-&gt;SetLongArrayRegion(reinterpret_cast&lt;jlongArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jlong*&gt;(elements)))<SUB>570</SUB>> ]
-"16804" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected long[]&quot;\012 : &quot;attempt to set region of long primitive array elements with an object of type boolean[]&quot;))<SUB>572</SUB>> ]
-"16812" [label = <(SetFloatArrayRegion,env_-&gt;SetFloatArrayRegion(reinterpret_cast&lt;jfloatArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jfloat*&gt;(elements)))<SUB>575</SUB>> ]
-"16824" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected float[]&quot;\012 : &quot;attempt to set region of float primitive array elements with an object of type boolean[]&quot;))<SUB>577</SUB>> ]
-"16832" [label = <(SetDoubleArrayRegion,env_-&gt;SetDoubleArrayRegion(reinterpret_cast&lt;jdoubleArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jdouble*&gt;(elements)))<SUB>580</SUB>> ]
-"16844" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected double[]&quot;\012 : &quot;attempt to set region of double primitive array elements with an object of type boolean[]&quot;))<SUB>582</SUB>> ]
-"16853" [label = <(&lt;operator&gt;.assignment,array2 = env_-&gt;NewByteArray(10))<SUB>585</SUB>> ]
-"16860" [label = <(SetBooleanArrayRegion,env_-&gt;SetBooleanArrayRegion(reinterpret_cast&lt;jbooleanArray&gt;(array2), 0, kLength,\012 reinterpret_cast&lt;jboolean*&gt;(elements)))<SUB>586</SUB>> ]
-"16872" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type byte[] expected boolean[]&quot;\012 : &quot;attempt to set region of boolean primitive array elements with an object of type byte[]&quot;))<SUB>588</SUB>> ]
-"16881" [label = <(&lt;operator&gt;.assignment,object = env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>591</SUB>> ]
-"16888" [label = <(SetBooleanArrayRegion,env_-&gt;SetBooleanArrayRegion(reinterpret_cast&lt;jbooleanArray&gt;(object), 0, kLength,\012 reinterpret_cast&lt;jboolean*&gt;(elements)))<SUB>592</SUB>> ]
-"16900" [label = <(Check,jni_abort_catcher.Check(check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;attempt to set region of boolean primitive array elements with an object of type &quot;\012 &quot;java.lang.String&quot;))<SUB>594</SUB>> ]
-"16908" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>597</SUB>> ]
-"16689" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>544</SUB>> ]
-"16702" [label = <(NewBooleanArray,env_-&gt;NewBooleanArray(kLength))<SUB>547</SUB>> ]
-"16708" [label = <(&lt;operator&gt;.notEquals,array != nullptr)<SUB>548</SUB>> ]
-"16713" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;SetByteArrayRegion)<SUB>550</SUB>> ]
-"16716" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbyteArray&gt;(array))<SUB>550</SUB>> ]
-"16721" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbyte*&gt;(elements))<SUB>551</SUB>> ]
-"16725" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>552</SUB>> ]
-"16728" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected byte[]&quot;\012 : &quot;attempt to set region of byte primitive array elements with an object of type boolean[]&quot;)<SUB>553</SUB>> ]
-"16733" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;SetShortArrayRegion)<SUB>555</SUB>> ]
-"16736" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jshortArray&gt;(array))<SUB>555</SUB>> ]
-"16741" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jshort*&gt;(elements))<SUB>556</SUB>> ]
-"16745" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>557</SUB>> ]
-"16748" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected short[]&quot;\012 : &quot;attempt to set region of short primitive array elements with an object of type boolean[]&quot;)<SUB>558</SUB>> ]
-"16753" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;SetCharArrayRegion)<SUB>560</SUB>> ]
-"16756" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jcharArray&gt;(array))<SUB>560</SUB>> ]
-"16761" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jchar*&gt;(elements))<SUB>561</SUB>> ]
-"16765" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>562</SUB>> ]
-"16768" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected char[]&quot;\012 : &quot;attempt to set region of char primitive array elements with an object of type boolean[]&quot;)<SUB>563</SUB>> ]
-"16773" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;SetIntArrayRegion)<SUB>565</SUB>> ]
-"16776" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jintArray&gt;(array))<SUB>565</SUB>> ]
-"16781" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jint*&gt;(elements))<SUB>566</SUB>> ]
-"16785" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>567</SUB>> ]
-"16788" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected int[]&quot;\012 : &quot;attempt to set region of int primitive array elements with an object of type boolean[]&quot;)<SUB>568</SUB>> ]
-"16793" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;SetLongArrayRegion)<SUB>570</SUB>> ]
-"16796" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jlongArray&gt;(array))<SUB>570</SUB>> ]
-"16801" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jlong*&gt;(elements))<SUB>571</SUB>> ]
-"16805" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>572</SUB>> ]
-"16808" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected long[]&quot;\012 : &quot;attempt to set region of long primitive array elements with an object of type boolean[]&quot;)<SUB>573</SUB>> ]
-"16813" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;SetFloatArrayRegion)<SUB>575</SUB>> ]
-"16816" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jfloatArray&gt;(array))<SUB>575</SUB>> ]
-"16821" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jfloat*&gt;(elements))<SUB>576</SUB>> ]
-"16825" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>577</SUB>> ]
-"16828" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected float[]&quot;\012 : &quot;attempt to set region of float primitive array elements with an object of type boolean[]&quot;)<SUB>578</SUB>> ]
-"16833" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;SetDoubleArrayRegion)<SUB>580</SUB>> ]
-"16836" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jdoubleArray&gt;(array))<SUB>580</SUB>> ]
-"16841" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jdouble*&gt;(elements))<SUB>581</SUB>> ]
-"16845" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>582</SUB>> ]
-"16848" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected double[]&quot;\012 : &quot;attempt to set region of double primitive array elements with an object of type boolean[]&quot;)<SUB>583</SUB>> ]
-"16855" [label = <(NewByteArray,env_-&gt;NewByteArray(10))<SUB>585</SUB>> ]
-"16861" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;SetBooleanArrayRegion)<SUB>586</SUB>> ]
-"16864" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbooleanArray&gt;(array2))<SUB>586</SUB>> ]
-"16869" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jboolean*&gt;(elements))<SUB>587</SUB>> ]
-"16873" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>588</SUB>> ]
-"16876" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type byte[] expected boolean[]&quot;\012 : &quot;attempt to set region of boolean primitive array elements with an object of type byte[]&quot;)<SUB>589</SUB>> ]
-"16883" [label = <(NewStringUTF,env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>591</SUB>> ]
-"16889" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;SetBooleanArrayRegion)<SUB>592</SUB>> ]
-"16892" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbooleanArray&gt;(object))<SUB>592</SUB>> ]
-"16897" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jboolean*&gt;(elements))<SUB>593</SUB>> ]
-"16901" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>594</SUB>> ]
-"16904" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;attempt to set region of boolean primitive array elements with an object of type &quot;\012 &quot;java.lang.String&quot;)<SUB>594</SUB>> ]
-"16910" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>597</SUB>> ]
-"16690" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>544</SUB>> ]
-"16703" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewBooleanArray)<SUB>547</SUB>> ]
-"16715" [label = <(FIELD_IDENTIFIER,SetByteArrayRegion,SetByteArrayRegion)<SUB>550</SUB>> ]
-"16717" [label = <(UNKNOWN,jbyteArray,jbyteArray)<SUB>550</SUB>> ]
-"16722" [label = <(UNKNOWN,jbyte*,jbyte*)<SUB>551</SUB>> ]
-"16727" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>552</SUB>> ]
-"16735" [label = <(FIELD_IDENTIFIER,SetShortArrayRegion,SetShortArrayRegion)<SUB>555</SUB>> ]
-"16737" [label = <(UNKNOWN,jshortArray,jshortArray)<SUB>555</SUB>> ]
-"16742" [label = <(UNKNOWN,jshort*,jshort*)<SUB>556</SUB>> ]
-"16747" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>557</SUB>> ]
-"16755" [label = <(FIELD_IDENTIFIER,SetCharArrayRegion,SetCharArrayRegion)<SUB>560</SUB>> ]
-"16757" [label = <(UNKNOWN,jcharArray,jcharArray)<SUB>560</SUB>> ]
-"16762" [label = <(UNKNOWN,jchar*,jchar*)<SUB>561</SUB>> ]
-"16767" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>562</SUB>> ]
-"16775" [label = <(FIELD_IDENTIFIER,SetIntArrayRegion,SetIntArrayRegion)<SUB>565</SUB>> ]
-"16777" [label = <(UNKNOWN,jintArray,jintArray)<SUB>565</SUB>> ]
-"16782" [label = <(UNKNOWN,jint*,jint*)<SUB>566</SUB>> ]
-"16787" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>567</SUB>> ]
-"16795" [label = <(FIELD_IDENTIFIER,SetLongArrayRegion,SetLongArrayRegion)<SUB>570</SUB>> ]
-"16797" [label = <(UNKNOWN,jlongArray,jlongArray)<SUB>570</SUB>> ]
-"16802" [label = <(UNKNOWN,jlong*,jlong*)<SUB>571</SUB>> ]
-"16807" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>572</SUB>> ]
-"16815" [label = <(FIELD_IDENTIFIER,SetFloatArrayRegion,SetFloatArrayRegion)<SUB>575</SUB>> ]
-"16817" [label = <(UNKNOWN,jfloatArray,jfloatArray)<SUB>575</SUB>> ]
-"16822" [label = <(UNKNOWN,jfloat*,jfloat*)<SUB>576</SUB>> ]
-"16827" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>577</SUB>> ]
-"16835" [label = <(FIELD_IDENTIFIER,SetDoubleArrayRegion,SetDoubleArrayRegion)<SUB>580</SUB>> ]
-"16837" [label = <(UNKNOWN,jdoubleArray,jdoubleArray)<SUB>580</SUB>> ]
-"16842" [label = <(UNKNOWN,jdouble*,jdouble*)<SUB>581</SUB>> ]
-"16847" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>582</SUB>> ]
-"16856" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewByteArray)<SUB>585</SUB>> ]
-"16863" [label = <(FIELD_IDENTIFIER,SetBooleanArrayRegion,SetBooleanArrayRegion)<SUB>586</SUB>> ]
-"16865" [label = <(UNKNOWN,jbooleanArray,jbooleanArray)<SUB>586</SUB>> ]
-"16870" [label = <(UNKNOWN,jboolean*,jboolean*)<SUB>587</SUB>> ]
-"16875" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>588</SUB>> ]
-"16884" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewStringUTF)<SUB>591</SUB>> ]
-"16891" [label = <(FIELD_IDENTIFIER,SetBooleanArrayRegion,SetBooleanArrayRegion)<SUB>592</SUB>> ]
-"16893" [label = <(UNKNOWN,jbooleanArray,jbooleanArray)<SUB>592</SUB>> ]
-"16898" [label = <(UNKNOWN,jboolean*,jboolean*)<SUB>593</SUB>> ]
-"16903" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>594</SUB>> ]
-"16911" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>597</SUB>> ]
-"16692" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>544</SUB>> ]
-"16705" [label = <(FIELD_IDENTIFIER,NewBooleanArray,NewBooleanArray)<SUB>547</SUB>> ]
-"16858" [label = <(FIELD_IDENTIFIER,NewByteArray,NewByteArray)<SUB>585</SUB>> ]
-"16886" [label = <(FIELD_IDENTIFIER,NewStringUTF,NewStringUTF)<SUB>591</SUB>> ]
-"16913" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>597</SUB>> ]
-"16683" [label = <(METHOD,SetPrimitiveArrayRegionElementsOfWrongType)<SUB>543</SUB>> ]
-"16915" [label = <(METHOD_RETURN,void)<SUB>543</SUB>> ]
-  "16687" -> "16696" 
-  "16696" -> "16705" 
-  "16700" -> "16708" 
-  "16707" -> "16715" 
-  "16712" -> "16727" 
-  "16724" -> "16735" 
-  "16732" -> "16747" 
-  "16744" -> "16755" 
-  "16752" -> "16767" 
-  "16764" -> "16775" 
-  "16772" -> "16787" 
-  "16784" -> "16795" 
-  "16792" -> "16807" 
-  "16804" -> "16815" 
-  "16812" -> "16827" 
-  "16824" -> "16835" 
-  "16832" -> "16847" 
-  "16844" -> "16858" 
-  "16853" -> "16863" 
-  "16860" -> "16875" 
-  "16872" -> "16886" 
-  "16881" -> "16891" 
-  "16888" -> "16903" 
-  "16900" -> "16913" 
-  "16908" -> "16915" 
-  "16689" -> "16687" 
-  "16702" -> "16700" 
-  "16708" -> "16707" 
-  "16713" -> "16717" 
-  "16716" -> "16722" 
-  "16721" -> "16712" 
-  "16725" -> "16728" 
-  "16728" -> "16724" 
-  "16733" -> "16737" 
-  "16736" -> "16742" 
-  "16741" -> "16732" 
-  "16745" -> "16748" 
-  "16748" -> "16744" 
-  "16753" -> "16757" 
-  "16756" -> "16762" 
-  "16761" -> "16752" 
-  "16765" -> "16768" 
-  "16768" -> "16764" 
-  "16773" -> "16777" 
-  "16776" -> "16782" 
-  "16781" -> "16772" 
-  "16785" -> "16788" 
-  "16788" -> "16784" 
-  "16793" -> "16797" 
-  "16796" -> "16802" 
-  "16801" -> "16792" 
-  "16805" -> "16808" 
-  "16808" -> "16804" 
-  "16813" -> "16817" 
-  "16816" -> "16822" 
-  "16821" -> "16812" 
-  "16825" -> "16828" 
-  "16828" -> "16824" 
-  "16833" -> "16837" 
-  "16836" -> "16842" 
-  "16841" -> "16832" 
-  "16845" -> "16848" 
-  "16848" -> "16844" 
-  "16855" -> "16853" 
-  "16861" -> "16865" 
-  "16864" -> "16870" 
-  "16869" -> "16860" 
-  "16873" -> "16876" 
-  "16876" -> "16872" 
-  "16883" -> "16881" 
-  "16889" -> "16893" 
-  "16892" -> "16898" 
-  "16897" -> "16888" 
-  "16901" -> "16904" 
-  "16904" -> "16900" 
-  "16910" -> "16908" 
-  "16690" -> "16689" 
-  "16703" -> "16702" 
-  "16715" -> "16713" 
-  "16717" -> "16716" 
-  "16722" -> "16721" 
-  "16727" -> "16725" 
-  "16735" -> "16733" 
-  "16737" -> "16736" 
-  "16742" -> "16741" 
-  "16747" -> "16745" 
-  "16755" -> "16753" 
-  "16757" -> "16756" 
-  "16762" -> "16761" 
-  "16767" -> "16765" 
-  "16775" -> "16773" 
-  "16777" -> "16776" 
-  "16782" -> "16781" 
-  "16787" -> "16785" 
-  "16795" -> "16793" 
-  "16797" -> "16796" 
-  "16802" -> "16801" 
-  "16807" -> "16805" 
-  "16815" -> "16813" 
-  "16817" -> "16816" 
-  "16822" -> "16821" 
-  "16827" -> "16825" 
-  "16835" -> "16833" 
-  "16837" -> "16836" 
-  "16842" -> "16841" 
-  "16847" -> "16845" 
-  "16856" -> "16855" 
-  "16863" -> "16861" 
-  "16865" -> "16864" 
-  "16870" -> "16869" 
-  "16875" -> "16873" 
-  "16884" -> "16883" 
-  "16891" -> "16889" 
-  "16893" -> "16892" 
-  "16898" -> "16897" 
-  "16903" -> "16901" 
-  "16911" -> "16910" 
-  "16692" -> "16690" 
-  "16705" -> "16703" 
-  "16858" -> "16856" 
-  "16886" -> "16884" 
-  "16913" -> "16911" 
-  "16683" -> "16692" 
+digraph "BogusMethod" {  
+"16916" [label = <(METHOD,BogusMethod)<SUB>1030</SUB>> ]
+"16918" [label = <(METHOD_RETURN,void)<SUB>1030</SUB>> ]
+  "16916" -> "16918" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/286-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/286-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/286-cfg.dot	2023-06-07 19:33:45.547394675 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/286-cfg.dot	2023-06-07 19:33:52.117393975 +0330
@@ -1,75 +1,11 @@
-digraph "NewObjectArrayBadArguments" {  
-"16921" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>601</SUB>> ]
-"16930" [label = <(&lt;operator&gt;.assignment,element_class = env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>604</SUB>> ]
-"16937" [label = <(ASSERT_NE,ASSERT_NE(element_class, nullptr))<SUB>605</SUB>> ]
-"16940" [label = <(NewObjectArray,env_-&gt;NewObjectArray(-1, element_class, nullptr))<SUB>607</SUB>> ]
-"16948" [label = <(Check,jni_abort_catcher.Check(check_jni ? &quot;negative jsize: -1&quot; : &quot;negative array length: -1&quot;))<SUB>608</SUB>> ]
-"16956" [label = <(NewObjectArray,env_-&gt;NewObjectArray(std::numeric_limits&lt;jint&gt;::min(), element_class, nullptr))<SUB>610</SUB>> ]
-"16972" [label = <(Check,jni_abort_catcher.Check(check_jni ? &quot;negative jsize: -2147483648&quot;\012 : &quot;negative array length: -2147483648&quot;))<SUB>611</SUB>> ]
-"16980" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>614</SUB>> ]
-"16923" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>601</SUB>> ]
-"16932" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>604</SUB>> ]
-"16941" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewObjectArray)<SUB>607</SUB>> ]
-"16944" [label = <(&lt;operator&gt;.minus,-1)<SUB>607</SUB>> ]
-"16949" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>608</SUB>> ]
-"16952" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;negative jsize: -1&quot; : &quot;negative array length: -1&quot;)<SUB>608</SUB>> ]
-"16957" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewObjectArray)<SUB>610</SUB>> ]
-"16960" [label = <(&lt;operator&gt;.greaterThan,std::numeric_limits&lt;jint&gt;::min())<SUB>610</SUB>> ]
-"16973" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>611</SUB>> ]
-"16976" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;negative jsize: -2147483648&quot;\012 : &quot;negative array length: -2147483648&quot;)<SUB>611</SUB>> ]
-"16982" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>614</SUB>> ]
-"16924" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>601</SUB>> ]
-"16933" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>604</SUB>> ]
-"16943" [label = <(FIELD_IDENTIFIER,NewObjectArray,NewObjectArray)<SUB>607</SUB>> ]
-"16951" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>608</SUB>> ]
-"16959" [label = <(FIELD_IDENTIFIER,NewObjectArray,NewObjectArray)<SUB>610</SUB>> ]
-"16961" [label = <(&lt;operator&gt;.lessThan,std::numeric_limits&lt;jint)<SUB>610</SUB>> ]
-"16966" [label = <(::min,::min())<SUB>610</SUB>> ]
-"16975" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>611</SUB>> ]
-"16983" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>614</SUB>> ]
-"16926" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>601</SUB>> ]
-"16935" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>604</SUB>> ]
-"16962" [label = <(&lt;operator&gt;.fieldAccess,std::numeric_limits)<SUB>610</SUB>> ]
-"16967" [label = <(&lt;operator&gt;.fieldAccess,::min)<SUB>610</SUB>> ]
-"16985" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>614</SUB>> ]
-"16964" [label = <(FIELD_IDENTIFIER,numeric_limits,numeric_limits)<SUB>610</SUB>> ]
-"16969" [label = <(FIELD_IDENTIFIER,min,min)<SUB>610</SUB>> ]
-"16917" [label = <(METHOD,NewObjectArrayBadArguments)<SUB>600</SUB>> ]
-"16987" [label = <(METHOD_RETURN,void)<SUB>600</SUB>> ]
-  "16921" -> "16935" 
-  "16930" -> "16937" 
-  "16937" -> "16943" 
-  "16940" -> "16951" 
-  "16948" -> "16959" 
-  "16956" -> "16975" 
-  "16972" -> "16985" 
+digraph "Java_MyClassNatives_foo_exit" {  
+"16984" [label = <(MonitorExit,env-&gt;MonitorExit(thisObj))<SUB>2359</SUB>> ]
+"16985" [label = <(&lt;operator&gt;.indirectFieldAccess,env-&gt;MonitorExit)<SUB>2359</SUB>> ]
+"16987" [label = <(FIELD_IDENTIFIER,MonitorExit,MonitorExit)<SUB>2359</SUB>> ]
+"16980" [label = <(METHOD,Java_MyClassNatives_foo_exit)<SUB>2357</SUB>> ]
+"16989" [label = <(METHOD_RETURN,void)<SUB>2357</SUB>> ]
+  "16984" -> "16989" 
+  "16985" -> "16984" 
+  "16987" -> "16985" 
   "16980" -> "16987" 
-  "16923" -> "16921" 
-  "16932" -> "16930" 
-  "16941" -> "16944" 
-  "16944" -> "16940" 
-  "16949" -> "16952" 
-  "16952" -> "16948" 
-  "16957" -> "16964" 
-  "16960" -> "16956" 
-  "16973" -> "16976" 
-  "16976" -> "16972" 
-  "16982" -> "16980" 
-  "16924" -> "16923" 
-  "16933" -> "16932" 
-  "16943" -> "16941" 
-  "16951" -> "16949" 
-  "16959" -> "16957" 
-  "16961" -> "16969" 
-  "16966" -> "16960" 
-  "16975" -> "16973" 
-  "16983" -> "16982" 
-  "16926" -> "16924" 
-  "16935" -> "16933" 
-  "16962" -> "16961" 
-  "16967" -> "16966" 
-  "16985" -> "16983" 
-  "16964" -> "16962" 
-  "16969" -> "16967" 
-  "16917" -> "16926" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/287-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/287-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/287-cfg.dot	2023-06-07 19:33:45.547394675 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/287-cfg.dot	2023-06-07 19:33:52.117393975 +0330
@@ -1,262 +1,11 @@
-digraph "SetUpForTest" {  
-"17112" [label = <(&lt;operator&gt;.assignment,env_ = Thread::Current()-&gt;GetJniEnv())<SUB>641</SUB>> ]
-"17121" [label = <(&lt;operator&gt;.assignment,jklass_ = env_-&gt;FindClass(&quot;MyClassNatives&quot;))<SUB>642</SUB>> ]
-"17128" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(jklass_ != nullptr) &lt;&lt; method_name &lt;&lt; &quot; &quot; &lt;&lt; method_sig)<SUB>643</SUB>> ]
-"17161" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(jmethod_ != nullptr) &lt;&lt; method_name &lt;&lt; &quot; &quot; &lt;&lt; method_sig)<SUB>650</SUB>> ]
-"17207" [label = <(&lt;operator&gt;.assignment,constructor = env_-&gt;GetMethodID(jklass_, &quot;&lt;init&gt;&quot;, &quot;()V&quot;))<SUB>660</SUB>> ]
-"17216" [label = <(&lt;operator&gt;.assignment,jobj_ = env_-&gt;NewObject(jklass_, constructor))<SUB>661</SUB>> ]
-"17224" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(jobj_ != nullptr) &lt;&lt; method_name &lt;&lt; &quot; &quot; &lt;&lt; method_sig)<SUB>662</SUB>> ]
-"16996" [label = <(&lt;operator&gt;.logicalNot,!runtime_-&gt;IsStarted())<SUB>621</SUB>> ]
-"17114" [label = <(GetJniEnv,Thread::Current()-&gt;GetJniEnv())<SUB>641</SUB>> ]
-"17123" [label = <(FindClass,env_-&gt;FindClass(&quot;MyClassNatives&quot;))<SUB>642</SUB>> ]
-"17129" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(jklass_ != nullptr) &lt;&lt; method_name &lt;&lt; &quot; &quot;)<SUB>643</SUB>> ]
-"17162" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(jmethod_ != nullptr) &lt;&lt; method_name &lt;&lt; &quot; &quot;)<SUB>650</SUB>> ]
-"17172" [label = <(&lt;operator&gt;.notEquals,native_fnptr != nullptr)<SUB>652</SUB>> ]
-"17209" [label = <(GetMethodID,env_-&gt;GetMethodID(jklass_, &quot;&lt;init&gt;&quot;, &quot;()V&quot;))<SUB>660</SUB>> ]
-"17218" [label = <(NewObject,env_-&gt;NewObject(jklass_, constructor))<SUB>661</SUB>> ]
-"17225" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(jobj_ != nullptr) &lt;&lt; method_name &lt;&lt; &quot; &quot;)<SUB>662</SUB>> ]
-"16997" [label = <(IsStarted,runtime_-&gt;IsStarted())<SUB>621</SUB>> ]
-"17096" [label = <(TransitionFromSuspendedToRunnable,Thread::Current()-&gt;TransitionFromSuspendedToRunnable())<SUB>636</SUB>> ]
-"17104" [label = <(&lt;operator&gt;.assignment,started = runtime_-&gt;Start())<SUB>637</SUB>> ]
-"17110" [label = <(CHECK,CHECK(started))<SUB>638</SUB>> ]
-"17115" [label = <(&lt;operator&gt;.indirectFieldAccess,Thread::Current()-&gt;GetJniEnv)<SUB>641</SUB>> ]
-"17124" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>642</SUB>> ]
-"17130" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(jklass_ != nullptr) &lt;&lt; method_name)<SUB>643</SUB>> ]
-"17141" [label = <(&lt;operator&gt;.assignment,jmethod_ = env_-&gt;GetStaticMethodID(jklass_, method_name, method_sig))<SUB>646</SUB>> ]
-"17163" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(jmethod_ != nullptr) &lt;&lt; method_name)<SUB>650</SUB>> ]
-"17177" [label = <(&lt;operator&gt;.assignment,methods[] = { { method_name, method_sig, native_fnptr } })<SUB>653</SUB>> ]
-"17184" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_EQ(JNI_OK, env_-&gt;RegisterNatives(jklass_, methods, 1))\012 &lt;&lt; method_name &lt;&lt; &quot; &quot; &lt;&lt; method_sig)<SUB>654</SUB>> ]
-"17210" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetMethodID)<SUB>660</SUB>> ]
-"17219" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewObject)<SUB>661</SUB>> ]
-"17226" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(jobj_ != nullptr) &lt;&lt; method_name)<SUB>662</SUB>> ]
-"16998" [label = <(&lt;operator&gt;.indirectFieldAccess,runtime_-&gt;IsStarted)<SUB>621</SUB>> ]
-"17004" [label = <(soa,soa(Thread::Current()))<SUB>623</SUB>> ]
-"17009" [label = <(&lt;operator&gt;.assignment,class_loader_ = LoadDex(&quot;MyClassNatives&quot;))<SUB>624</SUB>> ]
-"17013" [label = <(&lt;operator&gt;.greaterThan,StackHandleScope&lt;1&gt; hs(soa.Self()))<SUB>625</SUB>> ]
-"17022" [label = <(&lt;operator&gt;.greaterThan,Handle&lt;mirror::ClassLoader&gt; loader(\012            hs.NewHandle(soa.Decode&lt;mirror::ClassLoader&gt;(class_loader_))))<SUB>626</SUB>> ]
-"17043" [label = <(&lt;operator&gt;.assignment,* c = class_linker_-&gt;FindClass(soa.Self(), &quot;LMyClassNatives;&quot;, loader))<SUB>628</SUB>> ]
-"17056" [label = <(&lt;operator&gt;.assignment,pointer_size = class_linker_-&gt;GetImagePointerSize())<SUB>629</SUB>> ]
-"17063" [label = <(&lt;operator&gt;.assignment,* method = c-&gt;FindClassMethod(method_name, method_sig, pointer_size))<SUB>630</SUB>> ]
-"17072" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(method != nullptr) &lt;&lt; method_name &lt;&lt; &quot; &quot; &lt;&lt; method_sig)<SUB>631</SUB>> ]
-"17082" [label = <(ASSERT_EQ,ASSERT_EQ(direct, method-&gt;IsDirect()))<SUB>632</SUB>> ]
-"17088" [label = <(SetEntryPointFromQuickCompiledCode,method-&gt;SetEntryPointFromQuickCompiledCode(class_linker_-&gt;GetRuntimeQuickGenericJniStub()))<SUB>633</SUB>> ]
-"17097" [label = <(&lt;operator&gt;.indirectFieldAccess,Thread::Current()-&gt;TransitionFromSuspendedToRunnable)<SUB>636</SUB>> ]
-"17106" [label = <(Start,runtime_-&gt;Start())<SUB>637</SUB>> ]
-"17116" [label = <(Thread::Current,Thread::Current())<SUB>641</SUB>> ]
-"17120" [label = <(FIELD_IDENTIFIER,GetJniEnv,GetJniEnv)<SUB>641</SUB>> ]
-"17126" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>642</SUB>> ]
-"17131" [label = <(ASSERT_TRUE,ASSERT_TRUE(jklass_ != nullptr))<SUB>643</SUB>> ]
-"17143" [label = <(GetStaticMethodID,env_-&gt;GetStaticMethodID(jklass_, method_name, method_sig))<SUB>646</SUB>> ]
-"17152" [label = <(&lt;operator&gt;.assignment,jmethod_ = env_-&gt;GetMethodID(jklass_, method_name, method_sig))<SUB>648</SUB>> ]
-"17164" [label = <(ASSERT_TRUE,ASSERT_TRUE(jmethod_ != nullptr))<SUB>650</SUB>> ]
-"17179" [label = <(&lt;operator&gt;.arrayInitializer,{ { method_name, method_sig, native_fnptr } })<SUB>653</SUB>> ]
-"17185" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_EQ(JNI_OK, env_-&gt;RegisterNatives(jklass_, methods, 1))\012 &lt;&lt; method_name &lt;&lt; &quot; &quot;)<SUB>654</SUB>> ]
-"17201" [label = <(UnregisterNatives,env_-&gt;UnregisterNatives(jklass_))<SUB>657</SUB>> ]
-"17212" [label = <(FIELD_IDENTIFIER,GetMethodID,GetMethodID)<SUB>660</SUB>> ]
-"17221" [label = <(FIELD_IDENTIFIER,NewObject,NewObject)<SUB>661</SUB>> ]
-"17227" [label = <(ASSERT_TRUE,ASSERT_TRUE(jobj_ != nullptr))<SUB>662</SUB>> ]
-"17000" [label = <(FIELD_IDENTIFIER,IsStarted,IsStarted)<SUB>621</SUB>> ]
-"17005" [label = <(Thread::Current,Thread::Current())<SUB>623</SUB>> ]
-"17011" [label = <(LoadDex,LoadDex(&quot;MyClassNatives&quot;))<SUB>624</SUB>> ]
-"17014" [label = <(&lt;operator&gt;.lessThan,StackHandleScope&lt;1)<SUB>625</SUB>> ]
-"17017" [label = <(hs,hs(soa.Self()))<SUB>625</SUB>> ]
-"17023" [label = <(&lt;operator&gt;.lessThan,Handle&lt;mirror::ClassLoader)<SUB>626</SUB>> ]
-"17028" [label = <(loader,loader(\012            hs.NewHandle(soa.Decode&lt;mirror::ClassLoader&gt;(class_loader_))))<SUB>626</SUB>> ]
-"17045" [label = <(FindClass,class_linker_-&gt;FindClass(soa.Self(), &quot;LMyClassNatives;&quot;, loader))<SUB>628</SUB>> ]
-"17058" [label = <(GetImagePointerSize,class_linker_-&gt;GetImagePointerSize())<SUB>629</SUB>> ]
-"17065" [label = <(FindClassMethod,c-&gt;FindClassMethod(method_name, method_sig, pointer_size))<SUB>630</SUB>> ]
-"17073" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(method != nullptr) &lt;&lt; method_name &lt;&lt; &quot; &quot;)<SUB>631</SUB>> ]
-"17084" [label = <(IsDirect,method-&gt;IsDirect())<SUB>632</SUB>> ]
-"17089" [label = <(&lt;operator&gt;.indirectFieldAccess,method-&gt;SetEntryPointFromQuickCompiledCode)<SUB>633</SUB>> ]
-"17092" [label = <(GetRuntimeQuickGenericJniStub,class_linker_-&gt;GetRuntimeQuickGenericJniStub())<SUB>633</SUB>> ]
-"17098" [label = <(Thread::Current,Thread::Current())<SUB>636</SUB>> ]
-"17102" [label = <(FIELD_IDENTIFIER,TransitionFromSuspendedToRunnable,TransitionFromSuspendedToRunnable)<SUB>636</SUB>> ]
-"17107" [label = <(&lt;operator&gt;.indirectFieldAccess,runtime_-&gt;Start)<SUB>637</SUB>> ]
-"17117" [label = <(&lt;operator&gt;.fieldAccess,Thread::Current)<SUB>641</SUB>> ]
-"17132" [label = <(&lt;operator&gt;.notEquals,jklass_ != nullptr)<SUB>643</SUB>> ]
-"17144" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetStaticMethodID)<SUB>646</SUB>> ]
-"17154" [label = <(GetMethodID,env_-&gt;GetMethodID(jklass_, method_name, method_sig))<SUB>648</SUB>> ]
-"17165" [label = <(&lt;operator&gt;.notEquals,jmethod_ != nullptr)<SUB>650</SUB>> ]
-"17180" [label = <(&lt;operator&gt;.arrayInitializer,{ method_name, method_sig, native_fnptr })<SUB>653</SUB>> ]
-"17186" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_EQ(JNI_OK, env_-&gt;RegisterNatives(jklass_, methods, 1))\012 &lt;&lt; method_name)<SUB>654</SUB>> ]
-"17202" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;UnregisterNatives)<SUB>657</SUB>> ]
-"17228" [label = <(&lt;operator&gt;.notEquals,jobj_ != nullptr)<SUB>662</SUB>> ]
-"17006" [label = <(&lt;operator&gt;.fieldAccess,Thread::Current)<SUB>623</SUB>> ]
-"17018" [label = <(Self,soa.Self())<SUB>625</SUB>> ]
-"17025" [label = <(&lt;operator&gt;.fieldAccess,mirror::ClassLoader)<SUB>626</SUB>> ]
-"17029" [label = <(NewHandle,hs.NewHandle(soa.Decode&lt;mirror::ClassLoader&gt;(class_loader_)))<SUB>627</SUB>> ]
-"17046" [label = <(&lt;operator&gt;.indirectFieldAccess,class_linker_-&gt;FindClass)<SUB>628</SUB>> ]
-"17049" [label = <(Self,soa.Self())<SUB>628</SUB>> ]
-"17059" [label = <(&lt;operator&gt;.indirectFieldAccess,class_linker_-&gt;GetImagePointerSize)<SUB>629</SUB>> ]
-"17066" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;FindClassMethod)<SUB>630</SUB>> ]
-"17074" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(method != nullptr) &lt;&lt; method_name)<SUB>631</SUB>> ]
-"17085" [label = <(&lt;operator&gt;.indirectFieldAccess,method-&gt;IsDirect)<SUB>632</SUB>> ]
-"17091" [label = <(FIELD_IDENTIFIER,SetEntryPointFromQuickCompiledCode,SetEntryPointFromQuickCompiledCode)<SUB>633</SUB>> ]
-"17093" [label = <(&lt;operator&gt;.indirectFieldAccess,class_linker_-&gt;GetRuntimeQuickGenericJniStub)<SUB>633</SUB>> ]
-"17099" [label = <(&lt;operator&gt;.fieldAccess,Thread::Current)<SUB>636</SUB>> ]
-"17109" [label = <(FIELD_IDENTIFIER,Start,Start)<SUB>637</SUB>> ]
-"17119" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>641</SUB>> ]
-"17146" [label = <(FIELD_IDENTIFIER,GetStaticMethodID,GetStaticMethodID)<SUB>646</SUB>> ]
-"17155" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetMethodID)<SUB>648</SUB>> ]
-"17187" [label = <(ASSERT_EQ,ASSERT_EQ(JNI_OK, env_-&gt;RegisterNatives(jklass_, methods, 1)))<SUB>654</SUB>> ]
-"17204" [label = <(FIELD_IDENTIFIER,UnregisterNatives,UnregisterNatives)<SUB>657</SUB>> ]
-"17008" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>623</SUB>> ]
-"17019" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>625</SUB>> ]
-"17027" [label = <(FIELD_IDENTIFIER,ClassLoader,ClassLoader)<SUB>626</SUB>> ]
-"17030" [label = <(&lt;operator&gt;.fieldAccess,hs.NewHandle)<SUB>627</SUB>> ]
-"17033" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::ClassLoader&gt;(class_loader_))<SUB>627</SUB>> ]
-"17048" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>628</SUB>> ]
-"17050" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>628</SUB>> ]
-"17061" [label = <(FIELD_IDENTIFIER,GetImagePointerSize,GetImagePointerSize)<SUB>629</SUB>> ]
-"17068" [label = <(FIELD_IDENTIFIER,FindClassMethod,FindClassMethod)<SUB>630</SUB>> ]
-"17075" [label = <(ASSERT_TRUE,ASSERT_TRUE(method != nullptr))<SUB>631</SUB>> ]
-"17087" [label = <(FIELD_IDENTIFIER,IsDirect,IsDirect)<SUB>632</SUB>> ]
-"17095" [label = <(FIELD_IDENTIFIER,GetRuntimeQuickGenericJniStub,GetRuntimeQuickGenericJniStub)<SUB>633</SUB>> ]
-"17101" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>636</SUB>> ]
-"17157" [label = <(FIELD_IDENTIFIER,GetMethodID,GetMethodID)<SUB>648</SUB>> ]
-"17189" [label = <(RegisterNatives,env_-&gt;RegisterNatives(jklass_, methods, 1))<SUB>654</SUB>> ]
-"17021" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>625</SUB>> ]
-"17032" [label = <(FIELD_IDENTIFIER,NewHandle,NewHandle)<SUB>627</SUB>> ]
-"17034" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::ClassLoader)<SUB>627</SUB>> ]
-"17052" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>628</SUB>> ]
-"17076" [label = <(&lt;operator&gt;.notEquals,method != nullptr)<SUB>631</SUB>> ]
-"17190" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;RegisterNatives)<SUB>654</SUB>> ]
-"17035" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>627</SUB>> ]
-"17038" [label = <(&lt;operator&gt;.fieldAccess,mirror::ClassLoader)<SUB>627</SUB>> ]
-"17192" [label = <(FIELD_IDENTIFIER,RegisterNatives,RegisterNatives)<SUB>654</SUB>> ]
-"17037" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>627</SUB>> ]
-"17040" [label = <(FIELD_IDENTIFIER,ClassLoader,ClassLoader)<SUB>627</SUB>> ]
-"16989" [label = <(METHOD,SetUpForTest)<SUB>617</SUB>> ]
-"17234" [label = <(METHOD_RETURN,void)<SUB>617</SUB>> ]
-  "17112" -> "17126" 
-  "17121" -> "17132" 
-  "17128" -> "17146" 
-  "17128" -> "17157" 
-  "17161" -> "17172" 
-  "17207" -> "17221" 
-  "17216" -> "17228" 
-  "17224" -> "17234" 
-  "16996" -> "17008" 
-  "16996" -> "17119" 
-  "17114" -> "17112" 
-  "17123" -> "17121" 
-  "17129" -> "17128" 
-  "17162" -> "17161" 
-  "17172" -> "17180" 
-  "17172" -> "17204" 
-  "17209" -> "17207" 
-  "17218" -> "17216" 
-  "17225" -> "17224" 
+digraph "Java_MyClassNatives_foo_enter_no_exit" {  
+"16996" [label = <(MonitorEnter,env-&gt;MonitorEnter(thisObj))<SUB>2376</SUB>> ]
+"16997" [label = <(&lt;operator&gt;.indirectFieldAccess,env-&gt;MonitorEnter)<SUB>2376</SUB>> ]
+"16999" [label = <(FIELD_IDENTIFIER,MonitorEnter,MonitorEnter)<SUB>2376</SUB>> ]
+"16992" [label = <(METHOD,Java_MyClassNatives_foo_enter_no_exit)<SUB>2374</SUB>> ]
+"17001" [label = <(METHOD_RETURN,void)<SUB>2374</SUB>> ]
+  "16996" -> "17001" 
   "16997" -> "16996" 
-  "17096" -> "17109" 
-  "17104" -> "17110" 
-  "17110" -> "17119" 
-  "17115" -> "17114" 
-  "17124" -> "17123" 
-  "17130" -> "17129" 
-  "17141" -> "17165" 
-  "17163" -> "17162" 
-  "17177" -> "17192" 
-  "17184" -> "17212" 
-  "17210" -> "17209" 
-  "17219" -> "17218" 
-  "17226" -> "17225" 
-  "16998" -> "16997" 
-  "17004" -> "17011" 
-  "17009" -> "17014" 
-  "17013" -> "17027" 
-  "17022" -> "17048" 
-  "17043" -> "17061" 
-  "17056" -> "17068" 
-  "17063" -> "17076" 
-  "17072" -> "17087" 
-  "17082" -> "17091" 
-  "17088" -> "17101" 
-  "17097" -> "17096" 
-  "17106" -> "17104" 
-  "17116" -> "17120" 
-  "17120" -> "17115" 
-  "17126" -> "17124" 
-  "17131" -> "17130" 
-  "17143" -> "17141" 
-  "17152" -> "17165" 
-  "17164" -> "17163" 
-  "17179" -> "17177" 
-  "17185" -> "17184" 
-  "17201" -> "17212" 
-  "17212" -> "17210" 
-  "17221" -> "17219" 
-  "17227" -> "17226" 
-  "17000" -> "16998" 
-  "17005" -> "17004" 
-  "17011" -> "17009" 
-  "17014" -> "17021" 
-  "17017" -> "17013" 
-  "17023" -> "17032" 
-  "17028" -> "17022" 
-  "17045" -> "17043" 
-  "17058" -> "17056" 
-  "17065" -> "17063" 
-  "17073" -> "17072" 
-  "17084" -> "17082" 
-  "17089" -> "17095" 
-  "17092" -> "17088" 
-  "17098" -> "17102" 
-  "17102" -> "17097" 
-  "17107" -> "17106" 
-  "17117" -> "17116" 
-  "17132" -> "17131" 
-  "17144" -> "17143" 
-  "17154" -> "17152" 
-  "17165" -> "17164" 
-  "17180" -> "17179" 
-  "17186" -> "17185" 
-  "17202" -> "17201" 
-  "17228" -> "17227" 
-  "17006" -> "17005" 
-  "17018" -> "17017" 
-  "17025" -> "17023" 
-  "17029" -> "17028" 
-  "17046" -> "17052" 
-  "17049" -> "17045" 
-  "17059" -> "17058" 
-  "17066" -> "17065" 
-  "17074" -> "17073" 
-  "17085" -> "17084" 
-  "17091" -> "17089" 
-  "17093" -> "17092" 
-  "17099" -> "17098" 
-  "17109" -> "17107" 
-  "17119" -> "17117" 
-  "17146" -> "17144" 
-  "17155" -> "17154" 
-  "17187" -> "17186" 
-  "17204" -> "17202" 
-  "17008" -> "17006" 
-  "17019" -> "17018" 
-  "17027" -> "17025" 
-  "17030" -> "17037" 
-  "17033" -> "17029" 
-  "17048" -> "17046" 
-  "17050" -> "17049" 
-  "17061" -> "17059" 
-  "17068" -> "17066" 
-  "17075" -> "17074" 
-  "17087" -> "17085" 
-  "17095" -> "17093" 
-  "17101" -> "17099" 
-  "17157" -> "17155" 
-  "17189" -> "17187" 
-  "17021" -> "17019" 
-  "17032" -> "17030" 
-  "17034" -> "17033" 
-  "17052" -> "17050" 
-  "17076" -> "17075" 
-  "17190" -> "17189" 
-  "17035" -> "17040" 
-  "17038" -> "17034" 
-  "17192" -> "17190" 
-  "17037" -> "17035" 
-  "17040" -> "17038" 
-  "16989" -> "17000" 
+  "16999" -> "16997" 
+  "16992" -> "16999" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/288-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/288-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/288-cfg.dot	2023-06-07 19:33:45.547394675 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/288-cfg.dot	2023-06-07 19:33:52.117393975 +0330
@@ -1,25 +1,85 @@
-digraph "GetLocalsCapacity" {  
-"17259" [label = <(soa,soa(Thread::Current()))<SUB>937</SUB>> ]
-"17264" [label = <(RETURN,return reinterpret_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetLocalsCapacity();,return reinterpret_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetLocalsCapacity();)<SUB>938</SUB>> ]
-"17260" [label = <(Thread::Current,Thread::Current())<SUB>937</SUB>> ]
-"17265" [label = <(GetLocalsCapacity,reinterpret_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetLocalsCapacity())<SUB>938</SUB>> ]
-"17261" [label = <(&lt;operator&gt;.fieldAccess,Thread::Current)<SUB>937</SUB>> ]
-"17266" [label = <(&lt;operator&gt;.indirectFieldAccess,reinterpret_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetLocalsCapacity)<SUB>938</SUB>> ]
-"17263" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>937</SUB>> ]
-"17267" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;JNIEnvExt*&gt;(env))<SUB>938</SUB>> ]
-"17270" [label = <(FIELD_IDENTIFIER,GetLocalsCapacity,GetLocalsCapacity)<SUB>938</SUB>> ]
-"17268" [label = <(UNKNOWN,JNIEnvExt*,JNIEnvExt*)<SUB>938</SUB>> ]
-"17255" [label = <(METHOD,GetLocalsCapacity)<SUB>936</SUB>> ]
-"17271" [label = <(METHOD_RETURN,size_t)<SUB>936</SUB>> ]
-  "17259" -> "17268" 
-  "17264" -> "17271" 
-  "17260" -> "17259" 
-  "17265" -> "17264" 
-  "17261" -> "17260" 
-  "17266" -> "17265" 
-  "17263" -> "17261" 
-  "17267" -> "17270" 
-  "17270" -> "17266" 
-  "17268" -> "17267" 
-  "17255" -> "17263" 
+digraph "IsLocked" {  
+"17009" [label = <(soa,soa(env))<SUB>2392</SUB>> ]
+"17012" [label = <(&lt;operator&gt;.assignment,lock_word = soa.Decode&lt;mirror::Object&gt;(jobj)-&gt;GetLockWord(true))<SUB>2393</SUB>> ]
+"17014" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(jobj)-&gt;GetLockWord(true))<SUB>2393</SUB>> ]
+"17028" [label = <(GetState,lock_word.GetState())<SUB>2394</SUB>> ]
+"17015" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>2393</SUB>> ]
+"17022" [label = <(GetLockWord,(jobj)-&gt;GetLockWord(true))<SUB>2393</SUB>> ]
+"17029" [label = <(&lt;operator&gt;.fieldAccess,lock_word.GetState)<SUB>2394</SUB>> ]
+"17034" [label = <(&lt;operator&gt;.fieldAccess,LockWord::kHashCode)<SUB>2395</SUB>> ]
+"17038" [label = <(&lt;operator&gt;.fieldAccess,LockWord::kUnlocked)<SUB>2396</SUB>> ]
+"17041" [label = <(RETURN,return false;,return false;)<SUB>2397</SUB>> ]
+"17044" [label = <(&lt;operator&gt;.fieldAccess,LockWord::kThinLocked)<SUB>2398</SUB>> ]
+"17047" [label = <(RETURN,return true;,return true;)<SUB>2399</SUB>> ]
+"17050" [label = <(&lt;operator&gt;.fieldAccess,LockWord::kFatLocked)<SUB>2400</SUB>> ]
+"17053" [label = <(RETURN,return lock_word.FatLockMonitor()-&gt;IsLocked();,return lock_word.FatLockMonitor()-&gt;IsLocked();)<SUB>2401</SUB>> ]
+"17016" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2393</SUB>> ]
+"17019" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2393</SUB>> ]
+"17023" [label = <(&lt;operator&gt;.indirectFieldAccess,(jobj)-&gt;GetLockWord)<SUB>2393</SUB>> ]
+"17031" [label = <(FIELD_IDENTIFIER,GetState,GetState)<SUB>2394</SUB>> ]
+"17036" [label = <(FIELD_IDENTIFIER,kHashCode,kHashCode)<SUB>2395</SUB>> ]
+"17040" [label = <(FIELD_IDENTIFIER,kUnlocked,kUnlocked)<SUB>2396</SUB>> ]
+"17046" [label = <(FIELD_IDENTIFIER,kThinLocked,kThinLocked)<SUB>2398</SUB>> ]
+"17052" [label = <(FIELD_IDENTIFIER,kFatLocked,kFatLocked)<SUB>2400</SUB>> ]
+"17054" [label = <(IsLocked,lock_word.FatLockMonitor()-&gt;IsLocked())<SUB>2401</SUB>> ]
+"17063" [label = <(&lt;operator&gt;.shiftLeft,LOG(FATAL) &lt;&lt; &quot;Invalid monitor state &quot; &lt;&lt; lock_word.GetState())<SUB>2403</SUB>> ]
+"17072" [label = <(UNREACHABLE,UNREACHABLE())<SUB>2404</SUB>> ]
+"17018" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2393</SUB>> ]
+"17021" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2393</SUB>> ]
+"17025" [label = <(FIELD_IDENTIFIER,GetLockWord,GetLockWord)<SUB>2393</SUB>> ]
+"17055" [label = <(&lt;operator&gt;.indirectFieldAccess,lock_word.FatLockMonitor()-&gt;IsLocked)<SUB>2401</SUB>> ]
+"17064" [label = <(&lt;operator&gt;.shiftLeft,LOG(FATAL) &lt;&lt; &quot;Invalid monitor state &quot;)<SUB>2403</SUB>> ]
+"17068" [label = <(GetState,lock_word.GetState())<SUB>2403</SUB>> ]
+"17056" [label = <(FatLockMonitor,lock_word.FatLockMonitor())<SUB>2401</SUB>> ]
+"17060" [label = <(FIELD_IDENTIFIER,IsLocked,IsLocked)<SUB>2401</SUB>> ]
+"17065" [label = <(LOG,LOG(FATAL))<SUB>2403</SUB>> ]
+"17069" [label = <(&lt;operator&gt;.fieldAccess,lock_word.GetState)<SUB>2403</SUB>> ]
+"17057" [label = <(&lt;operator&gt;.fieldAccess,lock_word.FatLockMonitor)<SUB>2401</SUB>> ]
+"17071" [label = <(FIELD_IDENTIFIER,GetState,GetState)<SUB>2403</SUB>> ]
+"17059" [label = <(FIELD_IDENTIFIER,FatLockMonitor,FatLockMonitor)<SUB>2401</SUB>> ]
+"17004" [label = <(METHOD,IsLocked)<SUB>2391</SUB>> ]
+"17073" [label = <(METHOD_RETURN,bool)<SUB>2391</SUB>> ]
+  "17009" -> "17018" 
+  "17012" -> "17031" 
+  "17014" -> "17012" 
+  "17028" -> "17036" 
+  "17028" -> "17040" 
+  "17028" -> "17046" 
+  "17028" -> "17052" 
+  "17028" -> "17065" 
+  "17015" -> "17025" 
+  "17022" -> "17014" 
+  "17029" -> "17028" 
+  "17034" -> "17040" 
+  "17038" -> "17041" 
+  "17041" -> "17073" 
+  "17044" -> "17047" 
+  "17047" -> "17073" 
+  "17050" -> "17059" 
+  "17053" -> "17073" 
+  "17016" -> "17021" 
+  "17019" -> "17015" 
+  "17023" -> "17022" 
+  "17031" -> "17029" 
+  "17036" -> "17034" 
+  "17040" -> "17038" 
+  "17046" -> "17044" 
+  "17052" -> "17050" 
+  "17054" -> "17053" 
+  "17063" -> "17072" 
+  "17072" -> "17073" 
+  "17018" -> "17016" 
+  "17021" -> "17019" 
+  "17025" -> "17023" 
+  "17055" -> "17054" 
+  "17064" -> "17071" 
+  "17068" -> "17063" 
+  "17056" -> "17060" 
+  "17060" -> "17055" 
+  "17065" -> "17064" 
+  "17069" -> "17068" 
+  "17057" -> "17056" 
+  "17071" -> "17069" 
+  "17059" -> "17057" 
+  "17004" -> "17009" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/289-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/289-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/289-cfg.dot	2023-06-07 19:33:45.547394675 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/289-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,15 @@
-digraph "BogusMethod" {  
-"17275" [label = <(METHOD,BogusMethod)<SUB>1031</SUB>> ]
-"17277" [label = <(METHOD_RETURN,void)<SUB>1031</SUB>> ]
-  "17275" -> "17277" 
+digraph "CountNewGlobalRef" {  
+"17090" [label = <(&lt;operator&gt;.preIncrement,++gGlobalRefCount)<SUB>2489</SUB>> ]
+"17092" [label = <(RETURN,return gOriginalEnv-&gt;NewGlobalRef(env, o);,return gOriginalEnv-&gt;NewGlobalRef(env, o);)<SUB>2490</SUB>> ]
+"17093" [label = <(NewGlobalRef,gOriginalEnv-&gt;NewGlobalRef(env, o))<SUB>2490</SUB>> ]
+"17094" [label = <(&lt;operator&gt;.indirectFieldAccess,gOriginalEnv-&gt;NewGlobalRef)<SUB>2490</SUB>> ]
+"17096" [label = <(FIELD_IDENTIFIER,NewGlobalRef,NewGlobalRef)<SUB>2490</SUB>> ]
+"17086" [label = <(METHOD,CountNewGlobalRef)<SUB>2488</SUB>> ]
+"17099" [label = <(METHOD_RETURN,jobject)<SUB>2488</SUB>> ]
+  "17090" -> "17096" 
+  "17092" -> "17099" 
+  "17093" -> "17092" 
+  "17094" -> "17093" 
+  "17096" -> "17094" 
+  "17086" -> "17090" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/29-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/29-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/29-cfg.dot	2023-06-07 19:33:45.347394697 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/29-cfg.dot	2023-06-07 19:33:51.927393994 +0330
@@ -1,104 +1,72 @@
-digraph "FromReflectedField" {  
-"760" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(jlr_field))<SUB>562</SUB>> ]
-"779" [label = <(soa,soa(env))<SUB>563</SUB>> ]
-"781" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; obj_field = soa.Decode&lt;mirror::Object&gt;(jlr_field))<SUB>564</SUB>> ]
-"813" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Field&gt; field = ObjPtr&lt;mirror::Field&gt;::DownCast(obj_field))<SUB>569</SUB>> ]
-"832" [label = <(RETURN,return jni::EncodeArtField(field-&gt;GetArtField());,return jni::EncodeArtField(field-&gt;GetArtField());)<SUB>570</SUB>> ]
-"782" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; obj_field)<SUB>564</SUB>> ]
-"789" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(jlr_field))<SUB>564</SUB>> ]
-"799" [label = <(&lt;operator&gt;.notEquals,obj_field-&gt;GetClass() != mirror::Field::StaticClass())<SUB>565</SUB>> ]
-"814" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Field&gt; field)<SUB>569</SUB>> ]
-"821" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Field&gt;::DownCast(obj_field))<SUB>569</SUB>> ]
-"833" [label = <(jni::EncodeArtField,jni::EncodeArtField(field-&gt;GetArtField()))<SUB>570</SUB>> ]
-"783" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>564</SUB>> ]
-"790" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>564</SUB>> ]
-"800" [label = <(GetClass,obj_field-&gt;GetClass())<SUB>565</SUB>> ]
-"804" [label = <(mirror::Field::StaticClass,mirror::Field::StaticClass())<SUB>565</SUB>> ]
-"811" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>567</SUB>> ]
-"815" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Field)<SUB>569</SUB>> ]
-"822" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Field)<SUB>569</SUB>> ]
-"827" [label = <(::DownCast,::DownCast(obj_field))<SUB>569</SUB>> ]
-"834" [label = <(&lt;operator&gt;.fieldAccess,jni::EncodeArtField)<SUB>570</SUB>> ]
-"837" [label = <(GetArtField,field-&gt;GetArtField())<SUB>570</SUB>> ]
-"764" [label = <(UNLIKELY,UNLIKELY((jlr_field) == nullptr))<SUB>562</SUB>> ]
-"785" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>564</SUB>> ]
-"791" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>564</SUB>> ]
-"794" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>564</SUB>> ]
-"801" [label = <(&lt;operator&gt;.indirectFieldAccess,obj_field-&gt;GetClass)<SUB>565</SUB>> ]
-"805" [label = <(&lt;operator&gt;.fieldAccess,mirror::Field::StaticClass)<SUB>565</SUB>> ]
-"817" [label = <(&lt;operator&gt;.fieldAccess,mirror::Field)<SUB>569</SUB>> ]
-"824" [label = <(&lt;operator&gt;.fieldAccess,mirror::Field)<SUB>569</SUB>> ]
-"828" [label = <(&lt;operator&gt;.fieldAccess,::DownCast)<SUB>569</SUB>> ]
-"836" [label = <(FIELD_IDENTIFIER,EncodeArtField,EncodeArtField)<SUB>570</SUB>> ]
-"838" [label = <(&lt;operator&gt;.indirectFieldAccess,field-&gt;GetArtField)<SUB>570</SUB>> ]
-"765" [label = <(&lt;operator&gt;.equals,(jlr_field) == nullptr)<SUB>562</SUB>> ]
-"769" [label = <(CHECK_NON_NULL_ARGUMENT(jlr_field),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;jlr_field == null&quot;))<SUB>562</SUB>> ]
-"776" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(jlr_field),CHECK_NON_NULL_ARGUMENT(jlr_field))<SUB>562</SUB>> ]
-"787" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>564</SUB>> ]
-"793" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>564</SUB>> ]
-"796" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>564</SUB>> ]
-"803" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>565</SUB>> ]
-"806" [label = <(&lt;operator&gt;.fieldAccess,mirror::Field)<SUB>565</SUB>> ]
-"809" [label = <(FIELD_IDENTIFIER,StaticClass,StaticClass)<SUB>565</SUB>> ]
-"819" [label = <(FIELD_IDENTIFIER,Field,Field)<SUB>569</SUB>> ]
-"826" [label = <(FIELD_IDENTIFIER,Field,Field)<SUB>569</SUB>> ]
-"830" [label = <(FIELD_IDENTIFIER,DownCast,DownCast)<SUB>569</SUB>> ]
-"840" [label = <(FIELD_IDENTIFIER,GetArtField,GetArtField)<SUB>570</SUB>> ]
-"770" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>562</SUB>> ]
-"771" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>562</SUB>> ]
-"773" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>562</SUB>> ]
-"756" [label = <(METHOD,FromReflectedField)<SUB>561</SUB>> ]
-"841" [label = <(METHOD_RETURN,jfieldID)<SUB>561</SUB>> ]
-  "760" -> "765" 
-  "760" -> "779" 
-  "779" -> "787" 
-  "781" -> "803" 
-  "813" -> "836" 
-  "832" -> "841" 
-  "782" -> "793" 
-  "789" -> "781" 
-  "799" -> "811" 
-  "799" -> "819" 
-  "814" -> "826" 
-  "821" -> "813" 
-  "833" -> "832" 
-  "783" -> "782" 
-  "790" -> "789" 
-  "800" -> "806" 
-  "804" -> "799" 
-  "811" -> "841" 
-  "815" -> "814" 
-  "822" -> "830" 
-  "827" -> "821" 
-  "834" -> "840" 
-  "837" -> "833" 
-  "764" -> "771" 
-  "764" -> "779" 
-  "785" -> "783" 
-  "791" -> "796" 
-  "794" -> "790" 
-  "801" -> "800" 
-  "805" -> "804" 
-  "817" -> "815" 
-  "824" -> "822" 
-  "828" -> "827" 
-  "836" -> "834" 
-  "838" -> "837" 
-  "765" -> "764" 
-  "769" -> "776" 
-  "776" -> "841" 
-  "787" -> "785" 
-  "793" -> "791" 
-  "796" -> "794" 
-  "803" -> "801" 
-  "806" -> "809" 
-  "809" -> "805" 
-  "819" -> "817" 
-  "826" -> "824" 
-  "830" -> "828" 
-  "840" -> "838" 
-  "770" -> "769" 
-  "771" -> "773" 
-  "773" -> "770" 
-  "756" -> "760" 
+digraph "GetSuperclass" {  
+"874" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_class))<SUB>525</SUB>> ]
+"893" [label = <(soa,soa(env))<SUB>526</SUB>> ]
+"895" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c = soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>527</SUB>> ]
+"912" [label = <(RETURN,return soa.AddLocalReference&lt;jclass&gt;(c-&gt;IsInterface() ? nullptr : c-&gt;GetSuperClass());,return soa.AddLocalReference&lt;jclass&gt;(c-&gt;IsInterface() ? nullptr : c-&gt;GetSuperClass());)<SUB>528</SUB>> ]
+"896" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c)<SUB>527</SUB>> ]
+"903" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>527</SUB>> ]
+"913" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jclass&gt;(c-&gt;IsInterface() ? nullptr : c-&gt;GetSuperClass()))<SUB>528</SUB>> ]
+"897" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>527</SUB>> ]
+"904" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>527</SUB>> ]
+"914" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jclass)<SUB>528</SUB>> ]
+"919" [label = <(&lt;operator&gt;.conditional,c-&gt;IsInterface() ? nullptr : c-&gt;GetSuperClass())<SUB>528</SUB>> ]
+"878" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>525</SUB>> ]
+"899" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>527</SUB>> ]
+"905" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>527</SUB>> ]
+"908" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>527</SUB>> ]
+"915" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>528</SUB>> ]
+"920" [label = <(IsInterface,c-&gt;IsInterface())<SUB>528</SUB>> ]
+"925" [label = <(GetSuperClass,c-&gt;GetSuperClass())<SUB>528</SUB>> ]
+"879" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>525</SUB>> ]
+"883" [label = <(CHECK_NON_NULL_ARGUMENT(java_class),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class == null&quot;))<SUB>525</SUB>> ]
+"890" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_class),CHECK_NON_NULL_ARGUMENT(java_class))<SUB>525</SUB>> ]
+"901" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>527</SUB>> ]
+"907" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>527</SUB>> ]
+"910" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>527</SUB>> ]
+"917" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>528</SUB>> ]
+"921" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;IsInterface)<SUB>528</SUB>> ]
+"926" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;GetSuperClass)<SUB>528</SUB>> ]
+"884" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>525</SUB>> ]
+"923" [label = <(FIELD_IDENTIFIER,IsInterface,IsInterface)<SUB>528</SUB>> ]
+"928" [label = <(FIELD_IDENTIFIER,GetSuperClass,GetSuperClass)<SUB>528</SUB>> ]
+"885" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>525</SUB>> ]
+"887" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>525</SUB>> ]
+"870" [label = <(METHOD,GetSuperclass)<SUB>524</SUB>> ]
+"929" [label = <(METHOD_RETURN,jclass)<SUB>524</SUB>> ]
+  "874" -> "879" 
+  "874" -> "893" 
+  "893" -> "901" 
+  "895" -> "917" 
+  "912" -> "929" 
+  "896" -> "907" 
+  "903" -> "895" 
+  "913" -> "912" 
+  "897" -> "896" 
+  "904" -> "903" 
+  "914" -> "923" 
+  "919" -> "913" 
+  "878" -> "885" 
+  "878" -> "893" 
+  "899" -> "897" 
+  "905" -> "910" 
+  "908" -> "904" 
+  "915" -> "914" 
+  "920" -> "919" 
+  "920" -> "928" 
+  "925" -> "919" 
+  "879" -> "878" 
+  "883" -> "890" 
+  "890" -> "929" 
+  "901" -> "899" 
+  "907" -> "905" 
+  "910" -> "908" 
+  "917" -> "915" 
+  "921" -> "920" 
+  "926" -> "925" 
+  "884" -> "883" 
+  "923" -> "921" 
+  "928" -> "926" 
+  "885" -> "887" 
+  "887" -> "884" 
+  "870" -> "874" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/290-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/290-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/290-cfg.dot	2023-06-07 19:33:45.547394675 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/290-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,11 +1,7 @@
-digraph "Java_MyClassNatives_foo_exit" {  
-"17344" [label = <(MonitorExit,env-&gt;MonitorExit(thisObj))<SUB>2473</SUB>> ]
-"17345" [label = <(&lt;operator&gt;.indirectFieldAccess,env-&gt;MonitorExit)<SUB>2473</SUB>> ]
-"17347" [label = <(FIELD_IDENTIFIER,MonitorExit,MonitorExit)<SUB>2473</SUB>> ]
-"17340" [label = <(METHOD,Java_MyClassNatives_foo_exit)<SUB>2471</SUB>> ]
-"17349" [label = <(METHOD_RETURN,void)<SUB>2471</SUB>> ]
-  "17344" -> "17349" 
-  "17345" -> "17344" 
-  "17347" -> "17345" 
-  "17340" -> "17347" 
+digraph "&lt;global&gt;" {  
+"17108" [label = <(UNKNOWN,namespace art {\012\012template&lt;class T&gt; class Handle;\012struct StringOffsets;\012class StringPiece;\012class StubTest_ReadBarrierForRoot_Test;\012\012namespace mirror {\012\012// String Compression\012static constexpr bool kUseStringCompression = true;\012enum class StringCompressionFlag : uint32_t {\012    kCompressed = 0u,\012    kUncompressed = 1u\012};\012\012// C++ mirror of java.lang.String\012class MANAGED String FINAL : public Object {\012 public:\012 // Size of java.lang.String.class.\012 static uint32_t ClassSize(PointerSize pointer_size);\012\012 // Size of an instance of java.lang.String not including its value array.\012 static constexpr uint32_t InstanceSize() {\012 return sizeof(String);\012 }\012\012 static MemberOffset CountOffset() {\012 return OFFSET_OF_OBJECT_MEMBER(String, count_);\012 }\012\012 static MemberOffset ValueOffset() {\012 return OFFSET_OF_OBJECT_MEMBER(String, value_);\012 }\012\012 uint16_t* GetValue() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return &amp;value_[0];\012 }\012\012 uint8_t* GetValueCompressed() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return &amp;value_compressed_[0];\012 }\012\012 template&lt;VerifyObjectFlags kVerifyFlags = kDefaultVerifyFlags&gt;\012 size_t SizeOf() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // Taking out the first/uppermost bit because it is not part of actual length value\012 template&lt;VerifyObjectFlags kVerifyFlags = kDefaultVerifyFlags&gt;\012 int32_t GetLength() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return GetLengthFromCount(GetCount&lt;kVerifyFlags&gt;());\012 }\012\012 template&lt;VerifyObjectFlags kVerifyFlags = kDefaultVerifyFlags&gt;\012 int32_t GetCount() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return GetField32&lt;kVerifyFlags&gt;(OFFSET_OF_OBJECT_MEMBER(String, count_));\012 }\012\012 void SetCount(int32_t new_count) REQUIRES_SHARED(Locks::mutator_lock_) {\012 // Count is invariant so use non-transactional mode. Also disable check as we may run inside\012 // a transaction.\012 SetField32&lt;false, false&gt;(OFFSET_OF_OBJECT_MEMBER(String, count_), new_count);\012 }\012\012 int32_t GetHashCode() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // Computes, stores, and returns the hash code.\012 int32_t ComputeHashCode() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 int32_t GetUtfLength() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 uint16_t CharAt(int32_t index) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // Create a new string where all occurences of `old_c` are replaced with `new_c`.\012 // String.doReplace(char, char) is called from String.replace(char, char) when there is a match.\012 static ObjPtr&lt;String&gt; DoReplace(Thread* self, Handle&lt;String&gt; src, uint16_t old_c, uint16_t new_c)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 ObjPtr&lt;String&gt; Intern() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 template &lt;bool kIsInstrumented&gt;\012  ALWAYS_INLINE static String* AllocFromByteArray(Thread* self, int32_t byte_length,\012 Handle&lt;ByteArray&gt; array, int32_t offset,\012 int32_t high_byte,\012                                                  gc::AllocatorType allocator_type)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 template &lt;bool kIsInstrumented&gt;\012  ALWAYS_INLINE static String* AllocFromCharArray(Thread* self, int32_t count,\012 Handle&lt;CharArray&gt; array, int32_t offset,\012                                                  gc::AllocatorType allocator_type)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 template &lt;bool kIsInstrumented&gt;\012  ALWAYS_INLINE static String* AllocFromString(Thread* self, int32_t string_length,\012 Handle&lt;String&gt; string, int32_t offset,\012                                               gc::AllocatorType allocator_type)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 template &lt;bool kIsInstrumented&gt;\012  ALWAYS_INLINE static String* AllocEmptyString(Thread* self,\012                                                gc::AllocatorType allocator_type)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static String* AllocFromStrings(Thread* self, Handle&lt;String&gt; string, Handle&lt;String&gt; string2)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static String* AllocFromUtf16(Thread* self, int32_t utf16_length, const uint16_t* utf16_data_in)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static String* AllocFromModifiedUtf8(Thread* self, const char* utf)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static String* AllocFromModifiedUtf8(Thread* self, int32_t utf16_length,\012 const char* utf8_data_in, int32_t utf8_length)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static String* AllocFromModifiedUtf8(Thread* self, int32_t utf16_length, const char* utf8_data_in)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 // TODO: This is only used in the interpreter to compare against\012 // entries from a dex files constant pool (ArtField names). Should\012 // we unify this with Equals(const StringPiece&amp;); ?\012 bool Equals(const char* modified_utf8) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // TODO: This is only used to compare DexCache.location with\012 // a dex_file's location (which is an std::string). Do we really\012 // need this in mirror::String just for that one usage ?\012 bool Equals(const StringPiece&amp; modified_utf8)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 bool Equals(ObjPtr&lt;String&gt; that) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // Compare UTF-16 code point values not in a locale-sensitive manner\012 int Compare(int32_t utf16_length, const char* utf8_data_in);\012\012 // TODO: do we need this overload? give it a more intention-revealing name.\012 bool Equals(const uint16_t* that_chars, int32_t that_offset,\012 int32_t that_length)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // Create a modified UTF-8 encoded std::string from a java/lang/String object.\012  std::string ToModifiedUtf8() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 int32_t FastIndexOf(int32_t ch, int32_t start) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 template &lt;typename MemoryType&gt;\012 int32_t FastIndexOf(MemoryType* chars, int32_t ch, int32_t start)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 int32_t CompareTo(ObjPtr&lt;String&gt; other) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 CharArray* ToCharArray(Thread* self) REQUIRES_SHARED(Locks::mutator_lock_)\012      REQUIRES(!Roles::uninterruptible_);\012\012 void GetChars(int32_t start, int32_t end, Handle&lt;CharArray&gt; array, int32_t index)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 template&lt;VerifyObjectFlags kVerifyFlags = kDefaultVerifyFlags&gt;\012 bool IsCompressed() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return kUseStringCompression &amp;&amp; IsCompressed(GetCount());\012 }\012\012 bool IsValueNull() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 template&lt;typename MemoryType&gt;\012 static bool AllASCII(const MemoryType* chars, const int length);\012\012 static bool DexFileStringAllASCII(const char* chars, const int length);\012\012  ALWAYS_INLINE static bool IsCompressed(int32_t count) {\012 return GetCompressionFlagFromCount(count) == StringCompressionFlag::kCompressed;\012 }\012\012  ALWAYS_INLINE static StringCompressionFlag GetCompressionFlagFromCount(int32_t count) {\012 return kUseStringCompression\012 ? static_cast&lt;StringCompressionFlag&gt;(static_cast&lt;uint32_t&gt;(count) &amp; 1u)\012 : StringCompressionFlag::kUncompressed;\012 }\012\012  ALWAYS_INLINE static int32_t GetLengthFromCount(int32_t count) {\012 return kUseStringCompression ? static_cast&lt;int32_t&gt;(static_cast&lt;uint32_t&gt;(count) &gt;&gt; 1) : count;\012 }\012\012  ALWAYS_INLINE static int32_t GetFlaggedCount(int32_t length, bool compressible) {\012 return kUseStringCompression\012 ? static_cast&lt;int32_t&gt;((static_cast&lt;uint32_t&gt;(length) &lt;&lt; 1) |\012 (static_cast&lt;uint32_t&gt;(compressible\012 ? StringCompressionFlag::kCompressed\012 : StringCompressionFlag::kUncompressed)))\012 : length;\012 }\012\012 static Class* GetJavaLangString() REQUIRES_SHARED(Locks::mutator_lock_) {\012    DCHECK(!java_lang_String_.IsNull());\012 return java_lang_String_.Read();\012 }\012\012 static void SetClass(ObjPtr&lt;Class&gt; java_lang_String) REQUIRES_SHARED(Locks::mutator_lock_);\012 static void ResetClass() REQUIRES_SHARED(Locks::mutator_lock_);\012 static void VisitRoots(RootVisitor* visitor) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // Returns a human-readable equivalent of 'descriptor'. So &quot;I&quot; would be &quot;int&quot;,\012 // &quot;[[I&quot; would be &quot;int[][]&quot;, &quot;[Ljava/lang/String;&quot; would be\012 // &quot;java.lang.String[]&quot;, and so forth.\012 static std::string PrettyStringDescriptor(ObjPtr&lt;mirror::String&gt; descriptor)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012  std::string PrettyStringDescriptor()\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 private:\012 static constexpr bool IsASCII(uint16_t c) {\012 // Valid ASCII characters are in range 1..0x7f. Zero is not considered ASCII\012 // because it would complicate the detection of ASCII strings in Modified-UTF8.\012 return (c - 1u) &lt; 0x7fu;\012 }\012\012 static bool AllASCIIExcept(const uint16_t* chars, int32_t length, uint16_t non_ascii);\012\012 void SetHashCode(int32_t new_hash_code) REQUIRES_SHARED(Locks::mutator_lock_) {\012 // Hash code is invariant so use non-transactional mode. Also disable check as we may run inside\012 // a transaction.\012    DCHECK_EQ(0, GetField32(OFFSET_OF_OBJECT_MEMBER(String, hash_code_)));\012 SetField32&lt;false, false&gt;(OFFSET_OF_OBJECT_MEMBER(String, hash_code_), new_hash_code);\012 }\012\012 template &lt;bool kIsInstrumented, typename PreFenceVisitor&gt;\012  ALWAYS_INLINE static String* Alloc(Thread* self, int32_t utf16_length_with_flag,\012                                     gc::AllocatorType allocator_type,\012 const PreFenceVisitor&amp; pre_fence_visitor)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 // Field order required by test &quot;ValidateFieldOrderOfJavaCppUnionClasses&quot;.\012\012 // If string compression is enabled, count_ holds the StringCompressionFlag in the\012 // least significant bit and the length in the remaining bits, length = count_ &gt;&gt; 1.\012 int32_t count_;\012\012 uint32_t hash_code_;\012\012 // Compression of all-ASCII into 8-bit memory leads to usage one of these fields\012 union {\012 uint16_t value_[0];\012 uint8_t value_compressed_[0];\012 };\012\012 static GcRoot&lt;Class&gt; java_lang_String_;\012\012 friend struct art::StringOffsets; // for verifying offset information\012  ART_FRIEND_TEST(art::StubTest, ReadBarrierForRoot); // For java_lang_String_.\012\012  DISALLOW_IMPLICIT_CONSTRUCTORS(String);\012};\012\012} // namespace mirror\012},namespace art {\012\012template&lt;class T&gt; class Handle;\012struct StringOffsets;\012class StringPiece;\012class StubTest_ReadBarrierForRoot_Test;\012\012namespace mirror {\012\012// String Compression\012static constexpr bool kUseStringCompression = true;\012enum class StringCompressionFlag : uint32_t {\012    kCompressed = 0u,\012    kUncompressed = 1u\012};\012\012// C++ mirror of java.lang.String\012class MANAGED String FINAL : public Object {\012 public:\012 // Size of java.lang.String.class.\012 static uint32_t ClassSize(PointerSize pointer_size);\012\012 // Size of an instance of java.lang.String not including its value array.\012 static constexpr uint32_t InstanceSize() {\012 return sizeof(String);\012 }\012\012 static MemberOffset CountOffset() {\012 return OFFSET_OF_OBJECT_MEMBER(String, count_);\012 }\012\012 static MemberOffset ValueOffset() {\012 return OFFSET_OF_OBJECT_MEMBER(String, value_);\012 }\012\012 uint16_t* GetValue() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return &amp;value_[0];\012 }\012\012 uint8_t* GetValueCompressed() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return &amp;value_compressed_[0];\012 }\012\012 template&lt;VerifyObjectFlags kVerifyFlags = kDefaultVerifyFlags&gt;\012 size_t SizeOf() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // Taking out the first/uppermost bit because it is not part of actual length value\012 template&lt;VerifyObjectFlags kVerifyFlags = kDefaultVerifyFlags&gt;\012 int32_t GetLength() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return GetLengthFromCount(GetCount&lt;kVerifyFlags&gt;());\012 }\012\012 template&lt;VerifyObjectFlags kVerifyFlags = kDefaultVerifyFlags&gt;\012 int32_t GetCount() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return GetField32&lt;kVerifyFlags&gt;(OFFSET_OF_OBJECT_MEMBER(String, count_));\012 }\012\012 void SetCount(int32_t new_count) REQUIRES_SHARED(Locks::mutator_lock_) {\012 // Count is invariant so use non-transactional mode. Also disable check as we may run inside\012 // a transaction.\012 SetField32&lt;false, false&gt;(OFFSET_OF_OBJECT_MEMBER(String, count_), new_count);\012 }\012\012 int32_t GetHashCode() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // Computes, stores, and returns the hash code.\012 int32_t ComputeHashCode() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 int32_t GetUtfLength() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 uint16_t CharAt(int32_t index) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // Create a new string where all occurences of `old_c` are replaced with `new_c`.\012 // String.doReplace(char, char) is called from String.replace(char, char) when there is a match.\012 static ObjPtr&lt;String&gt; DoReplace(Thread* self, Handle&lt;String&gt; src, uint16_t old_c, uint16_t new_c)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 ObjPtr&lt;String&gt; Intern() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 template &lt;bool kIsInstrumented&gt;\012  ALWAYS_INLINE static String* AllocFromByteArray(Thread* self, int32_t byte_length,\012 Handle&lt;ByteArray&gt; array, int32_t offset,\012 int32_t high_byte,\012                                                  gc::AllocatorType allocator_type)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 template &lt;bool kIsInstrumented&gt;\012  ALWAYS_INLINE static String* AllocFromCharArray(Thread* self, int32_t count,\012 Handle&lt;CharArray&gt; array, int32_t offset,\012                                                  gc::AllocatorType allocator_type)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 template &lt;bool kIsInstrumented&gt;\012  ALWAYS_INLINE static String* AllocFromString(Thread* self, int32_t string_length,\012 Handle&lt;String&gt; string, int32_t offset,\012                                               gc::AllocatorType allocator_type)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 template &lt;bool kIsInstrumented&gt;\012  ALWAYS_INLINE static String* AllocEmptyString(Thread* self,\012                                                gc::AllocatorType allocator_type)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static String* AllocFromStrings(Thread* self, Handle&lt;String&gt; string, Handle&lt;String&gt; string2)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static String* AllocFromUtf16(Thread* self, int32_t utf16_length, const uint16_t* utf16_data_in)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static String* AllocFromModifiedUtf8(Thread* self, const char* utf)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static String* AllocFromModifiedUtf8(Thread* self, int32_t utf16_length,\012 const char* utf8_data_in, int32_t utf8_length)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static String* AllocFromModifiedUtf8(Thread* self, int32_t utf16_length, const char* utf8_data_in)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 // TODO: This is only used in the interpreter to compare against\012 // entries from a dex files constant pool (ArtField names). Should\012 // we unify this with Equals(const StringPiece&amp;); ?\012 bool Equals(const char* modified_utf8) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // TODO: This is only used to compare DexCache.location with\012 // a dex_file's location (which is an std::string). Do we really\012 // need this in mirror::String just for that one usage ?\012 bool Equals(const StringPiece&amp; modified_utf8)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 bool Equals(ObjPtr&lt;String&gt; that) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // Compare UTF-16 code point values not in a locale-sensitive manner\012 int Compare(int32_t utf16_length, const char* utf8_data_in);\012\012 // TODO: do we need this overload? give it a more intention-revealing name.\012 bool Equals(const uint16_t* that_chars, int32_t that_offset,\012 int32_t that_length)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // Create a modified UTF-8 encoded std::string from a java/lang/String object.\012  std::string ToModifiedUtf8() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 int32_t FastIndexOf(int32_t ch, int32_t start) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 template &lt;typename MemoryType&gt;\012 int32_t FastIndexOf(MemoryType* chars, int32_t ch, int32_t start)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 int32_t CompareTo(ObjPtr&lt;String&gt; other) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 CharArray* ToCharArray(Thread* self) REQUIRES_SHARED(Locks::mutator_lock_)\012      REQUIRES(!Roles::uninterruptible_);\012\012 void GetChars(int32_t start, int32_t end, Handle&lt;CharArray&gt; array, int32_t index)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 template&lt;VerifyObjectFlags kVerifyFlags = kDefaultVerifyFlags&gt;\012 bool IsCompressed() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return kUseStringCompression &amp;&amp; IsCompressed(GetCount());\012 }\012\012 bool IsValueNull() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 template&lt;typename MemoryType&gt;\012 static bool AllASCII(const MemoryType* chars, const int length);\012\012 static bool DexFileStringAllASCII(const char* chars, const int length);\012\012  ALWAYS_INLINE static bool IsCompressed(int32_t count) {\012 return GetCompressionFlagFromCount(count) == StringCompressionFlag::kCompressed;\012 }\012\012  ALWAYS_INLINE static StringCompressionFlag GetCompressionFlagFromCount(int32_t count) {\012 return kUseStringCompression\012 ? static_cast&lt;StringCompressionFlag&gt;(static_cast&lt;uint32_t&gt;(count) &amp; 1u)\012 : StringCompressionFlag::kUncompressed;\012 }\012\012  ALWAYS_INLINE static int32_t GetLengthFromCount(int32_t count) {\012 return kUseStringCompression ? static_cast&lt;int32_t&gt;(static_cast&lt;uint32_t&gt;(count) &gt;&gt; 1) : count;\012 }\012\012  ALWAYS_INLINE static int32_t GetFlaggedCount(int32_t length, bool compressible) {\012 return kUseStringCompression\012 ? static_cast&lt;int32_t&gt;((static_cast&lt;uint32_t&gt;(length) &lt;&lt; 1) |\012 (static_cast&lt;uint32_t&gt;(compressible\012 ? StringCompressionFlag::kCompressed\012 : StringCompressionFlag::kUncompressed)))\012 : length;\012 }\012\012 static Class* GetJavaLangString() REQUIRES_SHARED(Locks::mutator_lock_) {\012    DCHECK(!java_lang_String_.IsNull());\012 return java_lang_String_.Read();\012 }\012\012 static void SetClass(ObjPtr&lt;Class&gt; java_lang_String) REQUIRES_SHARED(Locks::mutator_lock_);\012 static void ResetClass() REQUIRES_SHARED(Locks::mutator_lock_);\012 static void VisitRoots(RootVisitor* visitor) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // Returns a human-readable equivalent of 'descriptor'. So &quot;I&quot; would be &quot;int&quot;,\012 // &quot;[[I&quot; would be &quot;int[][]&quot;, &quot;[Ljava/lang/String;&quot; would be\012 // &quot;java.lang.String[]&quot;, and so forth.\012 static std::string PrettyStringDescriptor(ObjPtr&lt;mirror::String&gt; descriptor)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012  std::string PrettyStringDescriptor()\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 private:\012 static constexpr bool IsASCII(uint16_t c) {\012 // Valid ASCII characters are in range 1..0x7f. Zero is not considered ASCII\012 // because it would complicate the detection of ASCII strings in Modified-UTF8.\012 return (c - 1u) &lt; 0x7fu;\012 }\012\012 static bool AllASCIIExcept(const uint16_t* chars, int32_t length, uint16_t non_ascii);\012\012 void SetHashCode(int32_t new_hash_code) REQUIRES_SHARED(Locks::mutator_lock_) {\012 // Hash code is invariant so use non-transactional mode. Also disable check as we may run inside\012 // a transaction.\012    DCHECK_EQ(0, GetField32(OFFSET_OF_OBJECT_MEMBER(String, hash_code_)));\012 SetField32&lt;false, false&gt;(OFFSET_OF_OBJECT_MEMBER(String, hash_code_), new_hash_code);\012 }\012\012 template &lt;bool kIsInstrumented, typename PreFenceVisitor&gt;\012  ALWAYS_INLINE static String* Alloc(Thread* self, int32_t utf16_length_with_flag,\012                                     gc::AllocatorType allocator_type,\012 const PreFenceVisitor&amp; pre_fence_visitor)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 // Field order required by test &quot;ValidateFieldOrderOfJavaCppUnionClasses&quot;.\012\012 // If string compression is enabled, count_ holds the StringCompressionFlag in the\012 // least significant bit and the length in the remaining bits, length = count_ &gt;&gt; 1.\012 int32_t count_;\012\012 uint32_t hash_code_;\012\012 // Compression of all-ASCII into 8-bit memory leads to usage one of these fields\012 union {\012 uint16_t value_[0];\012 uint8_t value_compressed_[0];\012 };\012\012 static GcRoot&lt;Class&gt; java_lang_String_;\012\012 friend struct art::StringOffsets; // for verifying offset information\012  ART_FRIEND_TEST(art::StubTest, ReadBarrierForRoot); // For java_lang_String_.\012\012  DISALLOW_IMPLICIT_CONSTRUCTORS(String);\012};\012\012} // namespace mirror\012})<SUB>24</SUB>> ]
+"17106" [label = <(METHOD,&lt;global&gt;)<SUB>1</SUB>> ]
+"17109" [label = <(METHOD_RETURN,ANY)<SUB>1</SUB>> ]
+  "17108" -> "17109" 
+  "17106" -> "17108" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/291-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/291-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/291-cfg.dot	2023-06-07 19:33:45.547394675 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/291-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,11 +1,5 @@
-digraph "Java_MyClassNatives_foo_enter_no_exit" {  
-"17356" [label = <(MonitorEnter,env-&gt;MonitorEnter(thisObj))<SUB>2490</SUB>> ]
-"17357" [label = <(&lt;operator&gt;.indirectFieldAccess,env-&gt;MonitorEnter)<SUB>2490</SUB>> ]
-"17359" [label = <(FIELD_IDENTIFIER,MonitorEnter,MonitorEnter)<SUB>2490</SUB>> ]
-"17352" [label = <(METHOD,Java_MyClassNatives_foo_enter_no_exit)<SUB>2488</SUB>> ]
-"17361" [label = <(METHOD_RETURN,void)<SUB>2488</SUB>> ]
-  "17356" -> "17361" 
-  "17357" -> "17356" 
-  "17359" -> "17357" 
-  "17352" -> "17359" 
+digraph "va_end" {  
+"17411" [label = <(METHOD,va_end)> ]
+"17414" [label = <(METHOD_RETURN,ANY)> ]
+  "17411" -> "17414" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/292-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/292-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/292-cfg.dot	2023-06-07 19:33:45.547394675 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/292-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,85 +1,5 @@
-digraph "IsLocked" {  
-"17369" [label = <(soa,soa(env))<SUB>2506</SUB>> ]
-"17372" [label = <(&lt;operator&gt;.assignment,lock_word = soa.Decode&lt;mirror::Object&gt;(jobj)-&gt;GetLockWord(true))<SUB>2507</SUB>> ]
-"17374" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(jobj)-&gt;GetLockWord(true))<SUB>2507</SUB>> ]
-"17388" [label = <(GetState,lock_word.GetState())<SUB>2508</SUB>> ]
-"17375" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>2507</SUB>> ]
-"17382" [label = <(GetLockWord,(jobj)-&gt;GetLockWord(true))<SUB>2507</SUB>> ]
-"17389" [label = <(&lt;operator&gt;.fieldAccess,lock_word.GetState)<SUB>2508</SUB>> ]
-"17394" [label = <(&lt;operator&gt;.fieldAccess,LockWord::kHashCode)<SUB>2509</SUB>> ]
-"17398" [label = <(&lt;operator&gt;.fieldAccess,LockWord::kUnlocked)<SUB>2510</SUB>> ]
-"17401" [label = <(RETURN,return false;,return false;)<SUB>2511</SUB>> ]
-"17404" [label = <(&lt;operator&gt;.fieldAccess,LockWord::kThinLocked)<SUB>2512</SUB>> ]
-"17407" [label = <(RETURN,return true;,return true;)<SUB>2513</SUB>> ]
-"17410" [label = <(&lt;operator&gt;.fieldAccess,LockWord::kFatLocked)<SUB>2514</SUB>> ]
-"17413" [label = <(RETURN,return lock_word.FatLockMonitor()-&gt;IsLocked();,return lock_word.FatLockMonitor()-&gt;IsLocked();)<SUB>2515</SUB>> ]
-"17376" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2507</SUB>> ]
-"17379" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2507</SUB>> ]
-"17383" [label = <(&lt;operator&gt;.indirectFieldAccess,(jobj)-&gt;GetLockWord)<SUB>2507</SUB>> ]
-"17391" [label = <(FIELD_IDENTIFIER,GetState,GetState)<SUB>2508</SUB>> ]
-"17396" [label = <(FIELD_IDENTIFIER,kHashCode,kHashCode)<SUB>2509</SUB>> ]
-"17400" [label = <(FIELD_IDENTIFIER,kUnlocked,kUnlocked)<SUB>2510</SUB>> ]
-"17406" [label = <(FIELD_IDENTIFIER,kThinLocked,kThinLocked)<SUB>2512</SUB>> ]
-"17412" [label = <(FIELD_IDENTIFIER,kFatLocked,kFatLocked)<SUB>2514</SUB>> ]
-"17414" [label = <(IsLocked,lock_word.FatLockMonitor()-&gt;IsLocked())<SUB>2515</SUB>> ]
-"17423" [label = <(&lt;operator&gt;.shiftLeft,LOG(FATAL) &lt;&lt; &quot;Invalid monitor state &quot; &lt;&lt; lock_word.GetState())<SUB>2517</SUB>> ]
-"17432" [label = <(UNREACHABLE,UNREACHABLE())<SUB>2518</SUB>> ]
-"17378" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2507</SUB>> ]
-"17381" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2507</SUB>> ]
-"17385" [label = <(FIELD_IDENTIFIER,GetLockWord,GetLockWord)<SUB>2507</SUB>> ]
-"17415" [label = <(&lt;operator&gt;.indirectFieldAccess,lock_word.FatLockMonitor()-&gt;IsLocked)<SUB>2515</SUB>> ]
-"17424" [label = <(&lt;operator&gt;.shiftLeft,LOG(FATAL) &lt;&lt; &quot;Invalid monitor state &quot;)<SUB>2517</SUB>> ]
-"17428" [label = <(GetState,lock_word.GetState())<SUB>2517</SUB>> ]
-"17416" [label = <(FatLockMonitor,lock_word.FatLockMonitor())<SUB>2515</SUB>> ]
-"17420" [label = <(FIELD_IDENTIFIER,IsLocked,IsLocked)<SUB>2515</SUB>> ]
-"17425" [label = <(LOG,LOG(FATAL))<SUB>2517</SUB>> ]
-"17429" [label = <(&lt;operator&gt;.fieldAccess,lock_word.GetState)<SUB>2517</SUB>> ]
-"17417" [label = <(&lt;operator&gt;.fieldAccess,lock_word.FatLockMonitor)<SUB>2515</SUB>> ]
-"17431" [label = <(FIELD_IDENTIFIER,GetState,GetState)<SUB>2517</SUB>> ]
-"17419" [label = <(FIELD_IDENTIFIER,FatLockMonitor,FatLockMonitor)<SUB>2515</SUB>> ]
-"17364" [label = <(METHOD,IsLocked)<SUB>2505</SUB>> ]
-"17433" [label = <(METHOD_RETURN,bool)<SUB>2505</SUB>> ]
-  "17369" -> "17378" 
-  "17372" -> "17391" 
-  "17374" -> "17372" 
-  "17388" -> "17396" 
-  "17388" -> "17400" 
-  "17388" -> "17406" 
-  "17388" -> "17412" 
-  "17388" -> "17425" 
-  "17375" -> "17385" 
-  "17382" -> "17374" 
-  "17389" -> "17388" 
-  "17394" -> "17400" 
-  "17398" -> "17401" 
-  "17401" -> "17433" 
-  "17404" -> "17407" 
-  "17407" -> "17433" 
-  "17410" -> "17419" 
-  "17413" -> "17433" 
-  "17376" -> "17381" 
-  "17379" -> "17375" 
-  "17383" -> "17382" 
-  "17391" -> "17389" 
-  "17396" -> "17394" 
-  "17400" -> "17398" 
-  "17406" -> "17404" 
-  "17412" -> "17410" 
-  "17414" -> "17413" 
-  "17423" -> "17432" 
-  "17432" -> "17433" 
-  "17378" -> "17376" 
-  "17381" -> "17379" 
-  "17385" -> "17383" 
-  "17415" -> "17414" 
-  "17424" -> "17431" 
-  "17428" -> "17423" 
-  "17416" -> "17420" 
-  "17420" -> "17415" 
-  "17425" -> "17424" 
-  "17429" -> "17428" 
-  "17417" -> "17416" 
-  "17431" -> "17429" 
-  "17419" -> "17417" 
-  "17364" -> "17369" 
+digraph "&lt;operator&gt;.indirection" {  
+"17415" [label = <(METHOD,&lt;operator&gt;.indirection)> ]
+"17418" [label = <(METHOD_RETURN,ANY)> ]
+  "17415" -> "17418" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/293-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/293-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/293-cfg.dot	2023-06-07 19:33:45.547394675 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/293-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,15 +1,5 @@
-digraph "CountNewGlobalRef" {  
-"17450" [label = <(&lt;operator&gt;.preIncrement,++gGlobalRefCount)<SUB>2603</SUB>> ]
-"17452" [label = <(RETURN,return gOriginalEnv-&gt;NewGlobalRef(env, o);,return gOriginalEnv-&gt;NewGlobalRef(env, o);)<SUB>2604</SUB>> ]
-"17453" [label = <(NewGlobalRef,gOriginalEnv-&gt;NewGlobalRef(env, o))<SUB>2604</SUB>> ]
-"17454" [label = <(&lt;operator&gt;.indirectFieldAccess,gOriginalEnv-&gt;NewGlobalRef)<SUB>2604</SUB>> ]
-"17456" [label = <(FIELD_IDENTIFIER,NewGlobalRef,NewGlobalRef)<SUB>2604</SUB>> ]
-"17446" [label = <(METHOD,CountNewGlobalRef)<SUB>2602</SUB>> ]
-"17459" [label = <(METHOD_RETURN,jobject)<SUB>2602</SUB>> ]
-  "17450" -> "17456" 
-  "17452" -> "17459" 
-  "17453" -> "17452" 
-  "17454" -> "17453" 
-  "17456" -> "17454" 
-  "17446" -> "17450" 
+digraph "&lt;operator&gt;.assignment" {  
+"17419" [label = <(METHOD,&lt;operator&gt;.assignment)> ]
+"17423" [label = <(METHOD_RETURN,ANY)> ]
+  "17419" -> "17423" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/294-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/294-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/294-cfg.dot	2023-06-07 19:33:45.547394675 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/294-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,7 +1,5 @@
-digraph "&lt;global&gt;" {  
-"17468" [label = <(UNKNOWN,namespace art {\012\012template&lt;class T&gt; class Handle;\012struct StringOffsets;\012class StringPiece;\012class StubTest_ReadBarrierForRoot_Test;\012\012namespace mirror {\012\012// String Compression\012static constexpr bool kUseStringCompression = true;\012enum class StringCompressionFlag : uint32_t {\012    kCompressed = 0u,\012    kUncompressed = 1u\012};\012\012// C++ mirror of java.lang.String\012class MANAGED String FINAL : public Object {\012 public:\012 // Size of java.lang.String.class.\012 static uint32_t ClassSize(PointerSize pointer_size);\012\012 // Size of an instance of java.lang.String not including its value array.\012 static constexpr uint32_t InstanceSize() {\012 return sizeof(String);\012 }\012\012 static MemberOffset CountOffset() {\012 return OFFSET_OF_OBJECT_MEMBER(String, count_);\012 }\012\012 static MemberOffset ValueOffset() {\012 return OFFSET_OF_OBJECT_MEMBER(String, value_);\012 }\012\012 uint16_t* GetValue() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return &amp;value_[0];\012 }\012\012 uint8_t* GetValueCompressed() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return &amp;value_compressed_[0];\012 }\012\012 template&lt;VerifyObjectFlags kVerifyFlags = kDefaultVerifyFlags&gt;\012 size_t SizeOf() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // Taking out the first/uppermost bit because it is not part of actual length value\012 template&lt;VerifyObjectFlags kVerifyFlags = kDefaultVerifyFlags&gt;\012 int32_t GetLength() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return GetLengthFromCount(GetCount&lt;kVerifyFlags&gt;());\012 }\012\012 template&lt;VerifyObjectFlags kVerifyFlags = kDefaultVerifyFlags&gt;\012 int32_t GetCount() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return GetField32&lt;kVerifyFlags&gt;(OFFSET_OF_OBJECT_MEMBER(String, count_));\012 }\012\012 void SetCount(int32_t new_count) REQUIRES_SHARED(Locks::mutator_lock_) {\012 // Count is invariant so use non-transactional mode. Also disable check as we may run inside\012 // a transaction.\012 SetField32&lt;false, false&gt;(OFFSET_OF_OBJECT_MEMBER(String, count_), new_count);\012 }\012\012 int32_t GetHashCode() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // Computes, stores, and returns the hash code.\012 int32_t ComputeHashCode() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 int32_t GetUtfLength() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 uint16_t CharAt(int32_t index) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // Create a new string where all occurences of `old_c` are replaced with `new_c`.\012 // String.doReplace(char, char) is called from String.replace(char, char) when there is a match.\012 static ObjPtr&lt;String&gt; DoReplace(Thread* self, Handle&lt;String&gt; src, uint16_t old_c, uint16_t new_c)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 ObjPtr&lt;String&gt; Intern() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 template &lt;bool kIsInstrumented&gt;\012  ALWAYS_INLINE static String* AllocFromByteArray(Thread* self, int32_t byte_length,\012 Handle&lt;ByteArray&gt; array, int32_t offset,\012 int32_t high_byte,\012                                                  gc::AllocatorType allocator_type)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 template &lt;bool kIsInstrumented&gt;\012  ALWAYS_INLINE static String* AllocFromCharArray(Thread* self, int32_t count,\012 Handle&lt;CharArray&gt; array, int32_t offset,\012                                                  gc::AllocatorType allocator_type)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 template &lt;bool kIsInstrumented&gt;\012  ALWAYS_INLINE static String* AllocFromString(Thread* self, int32_t string_length,\012 Handle&lt;String&gt; string, int32_t offset,\012                                               gc::AllocatorType allocator_type)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 template &lt;bool kIsInstrumented&gt;\012  ALWAYS_INLINE static String* AllocEmptyString(Thread* self,\012                                                gc::AllocatorType allocator_type)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static String* AllocFromStrings(Thread* self, Handle&lt;String&gt; string, Handle&lt;String&gt; string2)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static String* AllocFromUtf16(Thread* self, int32_t utf16_length, const uint16_t* utf16_data_in)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static String* AllocFromModifiedUtf8(Thread* self, const char* utf)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static String* AllocFromModifiedUtf8(Thread* self, int32_t utf16_length,\012 const char* utf8_data_in, int32_t utf8_length)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static String* AllocFromModifiedUtf8(Thread* self, int32_t utf16_length, const char* utf8_data_in)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 // TODO: This is only used in the interpreter to compare against\012 // entries from a dex files constant pool (ArtField names). Should\012 // we unify this with Equals(const StringPiece&amp;); ?\012 bool Equals(const char* modified_utf8) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // TODO: This is only used to compare DexCache.location with\012 // a dex_file's location (which is an std::string). Do we really\012 // need this in mirror::String just for that one usage ?\012 bool Equals(const StringPiece&amp; modified_utf8)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 bool Equals(ObjPtr&lt;String&gt; that) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // Compare UTF-16 code point values not in a locale-sensitive manner\012 int Compare(int32_t utf16_length, const char* utf8_data_in);\012\012 // TODO: do we need this overload? give it a more intention-revealing name.\012 bool Equals(const uint16_t* that_chars, int32_t that_offset,\012 int32_t that_length)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // Create a modified UTF-8 encoded std::string from a java/lang/String object.\012  std::string ToModifiedUtf8() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 int32_t FastIndexOf(int32_t ch, int32_t start) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 template &lt;typename MemoryType&gt;\012 int32_t FastIndexOf(MemoryType* chars, int32_t ch, int32_t start)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 int32_t CompareTo(ObjPtr&lt;String&gt; other) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 CharArray* ToCharArray(Thread* self) REQUIRES_SHARED(Locks::mutator_lock_)\012      REQUIRES(!Roles::uninterruptible_);\012\012 void GetChars(int32_t start, int32_t end, Handle&lt;CharArray&gt; array, int32_t index)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 template&lt;VerifyObjectFlags kVerifyFlags = kDefaultVerifyFlags&gt;\012 bool IsCompressed() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return kUseStringCompression &amp;&amp; IsCompressed(GetCount());\012 }\012\012 bool IsValueNull() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 template&lt;typename MemoryType&gt;\012 static bool AllASCII(const MemoryType* chars, const int length);\012\012 static bool DexFileStringAllASCII(const char* chars, const int length);\012\012  ALWAYS_INLINE static bool IsCompressed(int32_t count) {\012 return GetCompressionFlagFromCount(count) == StringCompressionFlag::kCompressed;\012 }\012\012  ALWAYS_INLINE static StringCompressionFlag GetCompressionFlagFromCount(int32_t count) {\012 return kUseStringCompression\012 ? static_cast&lt;StringCompressionFlag&gt;(static_cast&lt;uint32_t&gt;(count) &amp; 1u)\012 : StringCompressionFlag::kUncompressed;\012 }\012\012  ALWAYS_INLINE static int32_t GetLengthFromCount(int32_t count) {\012 return kUseStringCompression ? static_cast&lt;int32_t&gt;(static_cast&lt;uint32_t&gt;(count) &gt;&gt; 1) : count;\012 }\012\012  ALWAYS_INLINE static int32_t GetFlaggedCount(int32_t length, bool compressible) {\012 return kUseStringCompression\012 ? static_cast&lt;int32_t&gt;((static_cast&lt;uint32_t&gt;(length) &lt;&lt; 1) |\012 (static_cast&lt;uint32_t&gt;(compressible\012 ? StringCompressionFlag::kCompressed\012 : StringCompressionFlag::kUncompressed)))\012 : length;\012 }\012\012 static Class* GetJavaLangString() REQUIRES_SHARED(Locks::mutator_lock_) {\012    DCHECK(!java_lang_String_.IsNull());\012 return java_lang_String_.Read();\012 }\012\012 static void SetClass(ObjPtr&lt;Class&gt; java_lang_String) REQUIRES_SHARED(Locks::mutator_lock_);\012 static void ResetClass() REQUIRES_SHARED(Locks::mutator_lock_);\012 static void VisitRoots(RootVisitor* visitor) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // Returns a human-readable equivalent of 'descriptor'. So &quot;I&quot; would be &quot;int&quot;,\012 // &quot;[[I&quot; would be &quot;int[][]&quot;, &quot;[Ljava/lang/String;&quot; would be\012 // &quot;java.lang.String[]&quot;, and so forth.\012 static std::string PrettyStringDescriptor(ObjPtr&lt;mirror::String&gt; descriptor)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012  std::string PrettyStringDescriptor()\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 static constexpr bool IsASCII(uint16_t c) {\012 // Valid ASCII characters are in range 1..0x7f. Zero is not considered ASCII\012 // because it would complicate the detection of ASCII strings in Modified-UTF8.\012 return (c - 1u) &lt; 0x7fu;\012 }\012\012 private:\012 static bool AllASCIIExcept(const uint16_t* chars, int32_t length, uint16_t non_ascii);\012\012 void SetHashCode(int32_t new_hash_code) REQUIRES_SHARED(Locks::mutator_lock_) {\012 // Hash code is invariant so use non-transactional mode. Also disable check as we may run inside\012 // a transaction.\012    DCHECK_EQ(0, GetField32(OFFSET_OF_OBJECT_MEMBER(String, hash_code_)));\012 SetField32&lt;false, false&gt;(OFFSET_OF_OBJECT_MEMBER(String, hash_code_), new_hash_code);\012 }\012\012 template &lt;bool kIsInstrumented, typename PreFenceVisitor&gt;\012  ALWAYS_INLINE static String* Alloc(Thread* self, int32_t utf16_length_with_flag,\012                                     gc::AllocatorType allocator_type,\012 const PreFenceVisitor&amp; pre_fence_visitor)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 // Field order required by test &quot;ValidateFieldOrderOfJavaCppUnionClasses&quot;.\012\012 // If string compression is enabled, count_ holds the StringCompressionFlag in the\012 // least significant bit and the length in the remaining bits, length = count_ &gt;&gt; 1.\012 int32_t count_;\012\012 uint32_t hash_code_;\012\012 // Compression of all-ASCII into 8-bit memory leads to usage one of these fields\012 union {\012 uint16_t value_[0];\012 uint8_t value_compressed_[0];\012 };\012\012 static GcRoot&lt;Class&gt; java_lang_String_;\012\012 friend struct art::StringOffsets; // for verifying offset information\012  ART_FRIEND_TEST(art::StubTest, ReadBarrierForRoot); // For java_lang_String_.\012\012  DISALLOW_IMPLICIT_CONSTRUCTORS(String);\012};\012\012} // namespace mirror\012},namespace art {\012\012template&lt;class T&gt; class Handle;\012struct StringOffsets;\012class StringPiece;\012class StubTest_ReadBarrierForRoot_Test;\012\012namespace mirror {\012\012// String Compression\012static constexpr bool kUseStringCompression = true;\012enum class StringCompressionFlag : uint32_t {\012    kCompressed = 0u,\012    kUncompressed = 1u\012};\012\012// C++ mirror of java.lang.String\012class MANAGED String FINAL : public Object {\012 public:\012 // Size of java.lang.String.class.\012 static uint32_t ClassSize(PointerSize pointer_size);\012\012 // Size of an instance of java.lang.String not including its value array.\012 static constexpr uint32_t InstanceSize() {\012 return sizeof(String);\012 }\012\012 static MemberOffset CountOffset() {\012 return OFFSET_OF_OBJECT_MEMBER(String, count_);\012 }\012\012 static MemberOffset ValueOffset() {\012 return OFFSET_OF_OBJECT_MEMBER(String, value_);\012 }\012\012 uint16_t* GetValue() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return &amp;value_[0];\012 }\012\012 uint8_t* GetValueCompressed() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return &amp;value_compressed_[0];\012 }\012\012 template&lt;VerifyObjectFlags kVerifyFlags = kDefaultVerifyFlags&gt;\012 size_t SizeOf() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // Taking out the first/uppermost bit because it is not part of actual length value\012 template&lt;VerifyObjectFlags kVerifyFlags = kDefaultVerifyFlags&gt;\012 int32_t GetLength() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return GetLengthFromCount(GetCount&lt;kVerifyFlags&gt;());\012 }\012\012 template&lt;VerifyObjectFlags kVerifyFlags = kDefaultVerifyFlags&gt;\012 int32_t GetCount() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return GetField32&lt;kVerifyFlags&gt;(OFFSET_OF_OBJECT_MEMBER(String, count_));\012 }\012\012 void SetCount(int32_t new_count) REQUIRES_SHARED(Locks::mutator_lock_) {\012 // Count is invariant so use non-transactional mode. Also disable check as we may run inside\012 // a transaction.\012 SetField32&lt;false, false&gt;(OFFSET_OF_OBJECT_MEMBER(String, count_), new_count);\012 }\012\012 int32_t GetHashCode() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // Computes, stores, and returns the hash code.\012 int32_t ComputeHashCode() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 int32_t GetUtfLength() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 uint16_t CharAt(int32_t index) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // Create a new string where all occurences of `old_c` are replaced with `new_c`.\012 // String.doReplace(char, char) is called from String.replace(char, char) when there is a match.\012 static ObjPtr&lt;String&gt; DoReplace(Thread* self, Handle&lt;String&gt; src, uint16_t old_c, uint16_t new_c)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 ObjPtr&lt;String&gt; Intern() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 template &lt;bool kIsInstrumented&gt;\012  ALWAYS_INLINE static String* AllocFromByteArray(Thread* self, int32_t byte_length,\012 Handle&lt;ByteArray&gt; array, int32_t offset,\012 int32_t high_byte,\012                                                  gc::AllocatorType allocator_type)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 template &lt;bool kIsInstrumented&gt;\012  ALWAYS_INLINE static String* AllocFromCharArray(Thread* self, int32_t count,\012 Handle&lt;CharArray&gt; array, int32_t offset,\012                                                  gc::AllocatorType allocator_type)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 template &lt;bool kIsInstrumented&gt;\012  ALWAYS_INLINE static String* AllocFromString(Thread* self, int32_t string_length,\012 Handle&lt;String&gt; string, int32_t offset,\012                                               gc::AllocatorType allocator_type)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 template &lt;bool kIsInstrumented&gt;\012  ALWAYS_INLINE static String* AllocEmptyString(Thread* self,\012                                                gc::AllocatorType allocator_type)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static String* AllocFromStrings(Thread* self, Handle&lt;String&gt; string, Handle&lt;String&gt; string2)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static String* AllocFromUtf16(Thread* self, int32_t utf16_length, const uint16_t* utf16_data_in)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static String* AllocFromModifiedUtf8(Thread* self, const char* utf)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static String* AllocFromModifiedUtf8(Thread* self, int32_t utf16_length,\012 const char* utf8_data_in, int32_t utf8_length)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static String* AllocFromModifiedUtf8(Thread* self, int32_t utf16_length, const char* utf8_data_in)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 // TODO: This is only used in the interpreter to compare against\012 // entries from a dex files constant pool (ArtField names). Should\012 // we unify this with Equals(const StringPiece&amp;); ?\012 bool Equals(const char* modified_utf8) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // TODO: This is only used to compare DexCache.location with\012 // a dex_file's location (which is an std::string). Do we really\012 // need this in mirror::String just for that one usage ?\012 bool Equals(const StringPiece&amp; modified_utf8)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 bool Equals(ObjPtr&lt;String&gt; that) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // Compare UTF-16 code point values not in a locale-sensitive manner\012 int Compare(int32_t utf16_length, const char* utf8_data_in);\012\012 // TODO: do we need this overload? give it a more intention-revealing name.\012 bool Equals(const uint16_t* that_chars, int32_t that_offset,\012 int32_t that_length)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // Create a modified UTF-8 encoded std::string from a java/lang/String object.\012  std::string ToModifiedUtf8() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 int32_t FastIndexOf(int32_t ch, int32_t start) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 template &lt;typename MemoryType&gt;\012 int32_t FastIndexOf(MemoryType* chars, int32_t ch, int32_t start)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 int32_t CompareTo(ObjPtr&lt;String&gt; other) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 CharArray* ToCharArray(Thread* self) REQUIRES_SHARED(Locks::mutator_lock_)\012      REQUIRES(!Roles::uninterruptible_);\012\012 void GetChars(int32_t start, int32_t end, Handle&lt;CharArray&gt; array, int32_t index)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 template&lt;VerifyObjectFlags kVerifyFlags = kDefaultVerifyFlags&gt;\012 bool IsCompressed() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return kUseStringCompression &amp;&amp; IsCompressed(GetCount());\012 }\012\012 bool IsValueNull() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 template&lt;typename MemoryType&gt;\012 static bool AllASCII(const MemoryType* chars, const int length);\012\012 static bool DexFileStringAllASCII(const char* chars, const int length);\012\012  ALWAYS_INLINE static bool IsCompressed(int32_t count) {\012 return GetCompressionFlagFromCount(count) == StringCompressionFlag::kCompressed;\012 }\012\012  ALWAYS_INLINE static StringCompressionFlag GetCompressionFlagFromCount(int32_t count) {\012 return kUseStringCompression\012 ? static_cast&lt;StringCompressionFlag&gt;(static_cast&lt;uint32_t&gt;(count) &amp; 1u)\012 : StringCompressionFlag::kUncompressed;\012 }\012\012  ALWAYS_INLINE static int32_t GetLengthFromCount(int32_t count) {\012 return kUseStringCompression ? static_cast&lt;int32_t&gt;(static_cast&lt;uint32_t&gt;(count) &gt;&gt; 1) : count;\012 }\012\012  ALWAYS_INLINE static int32_t GetFlaggedCount(int32_t length, bool compressible) {\012 return kUseStringCompression\012 ? static_cast&lt;int32_t&gt;((static_cast&lt;uint32_t&gt;(length) &lt;&lt; 1) |\012 (static_cast&lt;uint32_t&gt;(compressible\012 ? StringCompressionFlag::kCompressed\012 : StringCompressionFlag::kUncompressed)))\012 : length;\012 }\012\012 static Class* GetJavaLangString() REQUIRES_SHARED(Locks::mutator_lock_) {\012    DCHECK(!java_lang_String_.IsNull());\012 return java_lang_String_.Read();\012 }\012\012 static void SetClass(ObjPtr&lt;Class&gt; java_lang_String) REQUIRES_SHARED(Locks::mutator_lock_);\012 static void ResetClass() REQUIRES_SHARED(Locks::mutator_lock_);\012 static void VisitRoots(RootVisitor* visitor) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // Returns a human-readable equivalent of 'descriptor'. So &quot;I&quot; would be &quot;int&quot;,\012 // &quot;[[I&quot; would be &quot;int[][]&quot;, &quot;[Ljava/lang/String;&quot; would be\012 // &quot;java.lang.String[]&quot;, and so forth.\012 static std::string PrettyStringDescriptor(ObjPtr&lt;mirror::String&gt; descriptor)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012  std::string PrettyStringDescriptor()\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 static constexpr bool IsASCII(uint16_t c) {\012 // Valid ASCII characters are in range 1..0x7f. Zero is not considered ASCII\012 // because it would complicate the detection of ASCII strings in Modified-UTF8.\012 return (c - 1u) &lt; 0x7fu;\012 }\012\012 private:\012 static bool AllASCIIExcept(const uint16_t* chars, int32_t length, uint16_t non_ascii);\012\012 void SetHashCode(int32_t new_hash_code) REQUIRES_SHARED(Locks::mutator_lock_) {\012 // Hash code is invariant so use non-transactional mode. Also disable check as we may run inside\012 // a transaction.\012    DCHECK_EQ(0, GetField32(OFFSET_OF_OBJECT_MEMBER(String, hash_code_)));\012 SetField32&lt;false, false&gt;(OFFSET_OF_OBJECT_MEMBER(String, hash_code_), new_hash_code);\012 }\012\012 template &lt;bool kIsInstrumented, typename PreFenceVisitor&gt;\012  ALWAYS_INLINE static String* Alloc(Thread* self, int32_t utf16_length_with_flag,\012                                     gc::AllocatorType allocator_type,\012 const PreFenceVisitor&amp; pre_fence_visitor)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 // Field order required by test &quot;ValidateFieldOrderOfJavaCppUnionClasses&quot;.\012\012 // If string compression is enabled, count_ holds the StringCompressionFlag in the\012 // least significant bit and the length in the remaining bits, length = count_ &gt;&gt; 1.\012 int32_t count_;\012\012 uint32_t hash_code_;\012\012 // Compression of all-ASCII into 8-bit memory leads to usage one of these fields\012 union {\012 uint16_t value_[0];\012 uint8_t value_compressed_[0];\012 };\012\012 static GcRoot&lt;Class&gt; java_lang_String_;\012\012 friend struct art::StringOffsets; // for verifying offset information\012  ART_FRIEND_TEST(art::StubTest, ReadBarrierForRoot); // For java_lang_String_.\012\012  DISALLOW_IMPLICIT_CONSTRUCTORS(String);\012};\012\012} // namespace mirror\012})<SUB>24</SUB>> ]
-"17466" [label = <(METHOD,&lt;global&gt;)<SUB>1</SUB>> ]
-"17469" [label = <(METHOD_RETURN,ANY)<SUB>1</SUB>> ]
-  "17468" -> "17469" 
-  "17466" -> "17468" 
+digraph "GetInstrumentation" {  
+"17424" [label = <(METHOD,GetInstrumentation)> ]
+"17427" [label = <(METHOD_RETURN,ANY)> ]
+  "17424" -> "17427" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/295-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/295-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/295-cfg.dot	2023-06-07 19:33:45.547394675 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/295-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "va_end" {  
-"17782" [label = <(METHOD,va_end)> ]
-"17785" [label = <(METHOD_RETURN,ANY)> ]
-  "17782" -> "17785" 
+digraph "&lt;operator&gt;.indirectFieldAccess" {  
+"17428" [label = <(METHOD,&lt;operator&gt;.indirectFieldAccess)> ]
+"17432" [label = <(METHOD_RETURN,ANY)> ]
+  "17428" -> "17432" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/296-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/296-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/296-cfg.dot	2023-06-07 19:33:45.547394675 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/296-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.indirection" {  
-"17786" [label = <(METHOD,&lt;operator&gt;.indirection)> ]
-"17789" [label = <(METHOD_RETURN,ANY)> ]
-  "17786" -> "17789" 
+digraph "Runtime::Current" {  
+"17433" [label = <(METHOD,Runtime::Current)> ]
+"17436" [label = <(METHOD_RETURN,ANY)> ]
+  "17433" -> "17436" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/297-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/297-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/297-cfg.dot	2023-06-07 19:33:45.547394675 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/297-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.assignment" {  
-"17790" [label = <(METHOD,&lt;operator&gt;.assignment)> ]
-"17794" [label = <(METHOD_RETURN,ANY)> ]
-  "17790" -> "17794" 
+digraph "&lt;operator&gt;.fieldAccess" {  
+"17437" [label = <(METHOD,&lt;operator&gt;.fieldAccess)> ]
+"17441" [label = <(METHOD_RETURN,ANY)> ]
+  "17437" -> "17441" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/298-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/298-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/298-cfg.dot	2023-06-07 19:33:45.547394675 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/298-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "DCHECK_LE" {  
-"17795" [label = <(METHOD,DCHECK_LE)> ]
-"17799" [label = <(METHOD_RETURN,ANY)> ]
-  "17795" -> "17799" 
+digraph "&lt;operator&gt;.equals" {  
+"17442" [label = <(METHOD,&lt;operator&gt;.equals)> ]
+"17446" [label = <(METHOD_RETURN,ANY)> ]
+  "17442" -> "17446" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/299-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/299-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/299-cfg.dot	2023-06-07 19:33:45.547394675 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/299-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "strlen" {  
-"17800" [label = <(METHOD,strlen)> ]
-"17803" [label = <(METHOD_RETURN,ANY)> ]
-  "17800" -> "17803" 
+digraph "&lt;operator&gt;.indirectIndexAccess" {  
+"17447" [label = <(METHOD,&lt;operator&gt;.indirectIndexAccess)> ]
+"17451" [label = <(METHOD_RETURN,ANY)> ]
+  "17447" -> "17451" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/3-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/3-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/3-cfg.dot	2023-06-07 19:33:45.327394699 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/3-cfg.dot	2023-06-07 19:33:51.917393996 +0330
@@ -1,1257 +1,5 @@
-digraph "&lt;global&gt;" {  
-"260" [label = <(UNKNOWN,),))<SUB>208</SUB>> ]
-"261" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012  DCHECK_NE(field-&gt;GetTypeAsPrimitiveType(), Primitive::kPrimNot);,REQUIRES_SHARED(Locks::mutator_lock_) {\012  DCHECK_NE(field-&gt;GetTypeAsPrimitiveType(), Primitive::kPrimNot);)<SUB>209</SUB>> ]
-"263" [label = <(&lt;operator&gt;.assignment,* instrumentation = Runtime::Current()-&gt;GetInstrumentation())<SUB>211</SUB>> ]
-"272" [label = <(UNKNOWN,if (UNLIKELY(instrumentation-&gt;HasFieldWriteListeners())) {\012 Thread* self = Thread::Current();\012 ArtMethod* cur_method = self-&gt;GetCurrentMethod(/*dex_pc*/ nullptr,\012 /*check_suspended*/ true,\012 /*abort_on_error*/ false);\012\012 if (cur_method == nullptr) {\012 // Set/Get Fields can be issued without a method during runtime startup/teardown. Ignore all\012 // of these changes.\012 return;\012 }\012    DCHECK(cur_method-&gt;IsNative());\012    instrumentation-&gt;FieldWriteEvent(self,\012                                     self-&gt;DecodeJObject(obj).Ptr(),\012                                     cur_method,\012 0, // dex_pc is always 0 since this is a native method.\012                                     field,\012                                     val);\012 },if (UNLIKELY(instrumentation-&gt;HasFieldWriteListeners())) {\012 Thread* self = Thread::Current();\012 ArtMethod* cur_method = self-&gt;GetCurrentMethod(/*dex_pc*/ nullptr,\012 /*check_suspended*/ true,\012 /*abort_on_error*/ false);\012\012 if (cur_method == nullptr) {\012 // Set/Get Fields can be issued without a method during runtime startup/teardown. Ignore all\012 // of these changes.\012 return;\012 }\012    DCHECK(cur_method-&gt;IsNative());\012    instrumentation-&gt;FieldWriteEvent(self,\012                                     self-&gt;DecodeJObject(obj).Ptr(),\012                                     cur_method,\012 0, // dex_pc is always 0 since this is a native method.\012                                     field,\012                                     val);\012 })<SUB>212</SUB>> ]
-"273" [label = <(UNKNOWN,},})<SUB>231</SUB>> ]
-"280" [label = <(UNKNOWN,),))<SUB>233</SUB>> ]
-"281" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012  instrumentation::Instrumentation* instrumentation = Runtime::Current()-&gt;GetInstrumentation();,REQUIRES_SHARED(Locks::mutator_lock_) {\012  instrumentation::Instrumentation* instrumentation = Runtime::Current()-&gt;GetInstrumentation();)<SUB>234</SUB>> ]
-"282" [label = <(UNKNOWN,if (UNLIKELY(instrumentation-&gt;HasFieldReadListeners())) {\012 Thread* self = Thread::Current();\012 ArtMethod* cur_method = self-&gt;GetCurrentMethod(/*dex_pc*/ nullptr,\012 /*check_suspended*/ true,\012 /*abort_on_error*/ false);\012\012 if (cur_method == nullptr) {\012 // Set/Get Fields can be issued without a method during runtime startup/teardown. Ignore all\012 // of these changes.\012 return;\012 }\012    DCHECK(cur_method-&gt;IsNative());\012    instrumentation-&gt;FieldReadEvent(self,\012                                    self-&gt;DecodeJObject(obj).Ptr(),\012                                    cur_method,\012 0, // dex_pc is always 0 since this is a native method.\012                                    field);\012 },if (UNLIKELY(instrumentation-&gt;HasFieldReadListeners())) {\012 Thread* self = Thread::Current();\012 ArtMethod* cur_method = self-&gt;GetCurrentMethod(/*dex_pc*/ nullptr,\012 /*check_suspended*/ true,\012 /*abort_on_error*/ false);\012\012 if (cur_method == nullptr) {\012 // Set/Get Fields can be issued without a method during runtime startup/teardown. Ignore all\012 // of these changes.\012 return;\012 }\012    DCHECK(cur_method-&gt;IsNative());\012    instrumentation-&gt;FieldReadEvent(self,\012                                    self-&gt;DecodeJObject(obj).Ptr(),\012                                    cur_method,\012 0, // dex_pc is always 0 since this is a native method.\012                                    field);\012 })<SUB>236</SUB>> ]
-"283" [label = <(UNKNOWN,},})<SUB>254</SUB>> ]
-"359" [label = <(UNKNOWN,),))<SUB>284</SUB>> ]
-"360" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012  std::string temp;,REQUIRES_SHARED(Locks::mutator_lock_) {\012  std::string temp;)<SUB>285</SUB>> ]
-"361" [label = <(UNKNOWN,soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/NoSuchMethodError;&quot;,\012 &quot;no %s method \&quot;%s.%s%s\&quot;&quot;,\012                                 kind,\012                                 c-&gt;GetDescriptor(&amp;temp),\012                                 name,\012                                 sig);,soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/NoSuchMethodError;&quot;,\012 &quot;no %s method \&quot;%s.%s%s\&quot;&quot;,\012                                 kind,\012                                 c-&gt;GetDescriptor(&amp;temp),\012                                 name,\012                                 sig);)<SUB>287</SUB>> ]
-"362" [label = <(UNKNOWN,},})<SUB>293</SUB>> ]
-"371" [label = <(UNKNOWN,),))<SUB>298</SUB>> ]
-"372" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012  LOG(ERROR)\012 &lt;&lt; &quot;Failed to register native method in &quot; &lt;&lt; c-&gt;PrettyDescriptor()\012 &lt;&lt; &quot; in &quot; &lt;&lt; c-&gt;GetDexCache()-&gt;GetLocation()-&gt;ToModifiedUtf8()\012 &lt;&lt; &quot;: &quot; &lt;&lt; kind &lt;&lt; &quot; is null at index &quot; &lt;&lt; idx;,REQUIRES_SHARED(Locks::mutator_lock_) {\012  LOG(ERROR)\012 &lt;&lt; &quot;Failed to register native method in &quot; &lt;&lt; c-&gt;PrettyDescriptor()\012 &lt;&lt; &quot; in &quot; &lt;&lt; c-&gt;GetDexCache()-&gt;GetLocation()-&gt;ToModifiedUtf8()\012 &lt;&lt; &quot;: &quot; &lt;&lt; kind &lt;&lt; &quot; is null at index &quot; &lt;&lt; idx;)<SUB>299</SUB>> ]
-"373" [label = <(UNKNOWN,soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/NoSuchMethodError;&quot;,\012 &quot;%s is null at index %d&quot;,\012                                 kind,\012                                 idx);,soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/NoSuchMethodError;&quot;,\012 &quot;%s is null at index %d&quot;,\012                                 kind,\012                                 idx);)<SUB>304</SUB>> ]
-"374" [label = <(UNKNOWN,},})<SUB>308</SUB>> ]
-"381" [label = <(UNKNOWN,),))<SUB>310</SUB>> ]
-"382" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012 if (LIKELY(klass-&gt;IsInitialized())) {\012 return klass;\012 },REQUIRES_SHARED(Locks::mutator_lock_) {\012 if (LIKELY(klass-&gt;IsInitialized())) {\012 return klass;\012 })<SUB>311</SUB>> ]
-"389" [label = <(h_klass,h_klass(hs.NewHandle(klass)))<SUB>316</SUB>> ]
-"395" [label = <(UNKNOWN,if (!Runtime::Current()-&gt;GetClassLinker()-&gt;EnsureInitialized(self, h_klass, true, true)) {\012 return nullptr;\012 },if (!Runtime::Current()-&gt;GetClassLinker()-&gt;EnsureInitialized(self, h_klass, true, true)) {\012 return nullptr;\012 })<SUB>317</SUB>> ]
-"396" [label = <(UNKNOWN,return h_klass.Get();,return h_klass.Get();)<SUB>320</SUB>> ]
-"397" [label = <(UNKNOWN,},})<SUB>321</SUB>> ]
-"407" [label = <(UNKNOWN,),))<SUB>324</SUB>> ]
-"408" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012 ObjPtr&lt;mirror::Class&gt; c = EnsureInitialized(soa.Self(), soa.Decode&lt;mirror::Class&gt;(jni_class));,REQUIRES_SHARED(Locks::mutator_lock_) {\012 ObjPtr&lt;mirror::Class&gt; c = EnsureInitialized(soa.Self(), soa.Decode&lt;mirror::Class&gt;(jni_class));)<SUB>325</SUB>> ]
-"409" [label = <(UNKNOWN,if (c == nullptr) {\012 return nullptr;\012 },if (c == nullptr) {\012 return nullptr;\012 })<SUB>327</SUB>> ]
-"411" [label = <(&lt;operator&gt;.assignment,* method = nullptr)<SUB>330</SUB>> ]
-"415" [label = <(&lt;operator&gt;.assignment,pointer_size = Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize())<SUB>331</SUB>> ]
-"427" [label = <(UNKNOWN,if (c-&gt;IsInterface()) {\012    method = c-&gt;FindInterfaceMethod(name, sig, pointer_size);\012 },if (c-&gt;IsInterface()) {\012    method = c-&gt;FindInterfaceMethod(name, sig, pointer_size);\012 })<SUB>332</SUB>> ]
-"428" [label = <(UNKNOWN,else {\012    method = c-&gt;FindClassMethod(name, sig, pointer_size);\012 },else {\012    method = c-&gt;FindClassMethod(name, sig, pointer_size);\012 })<SUB>334</SUB>> ]
-"429" [label = <(UNKNOWN,if (method != nullptr &amp;&amp; ShouldBlockAccessToMember(method, soa.Self())) {\012    method = nullptr;\012 },if (method != nullptr &amp;&amp; ShouldBlockAccessToMember(method, soa.Self())) {\012    method = nullptr;\012 })<SUB>337</SUB>> ]
-"430" [label = <(UNKNOWN,if (method == nullptr || method-&gt;IsStatic() != is_static) {\012 ThrowNoSuchMethodError(soa, c, name, sig, is_static ? &quot;static&quot; : &quot;non-static&quot;);\012 return nullptr;\012 },if (method == nullptr || method-&gt;IsStatic() != is_static) {\012 ThrowNoSuchMethodError(soa, c, name, sig, is_static ? &quot;static&quot; : &quot;non-static&quot;);\012 return nullptr;\012 })<SUB>340</SUB>> ]
-"431" [label = <(UNKNOWN,return jni::EncodeArtMethod(method);,return jni::EncodeArtMethod(method);)<SUB>344</SUB>> ]
-"432" [label = <(UNKNOWN,},})<SUB>345</SUB>> ]
-"438" [label = <(UNKNOWN,),))<SUB>347</SUB>> ]
-"439" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012 ArtMethod* method = soa.Self()-&gt;GetCurrentMethod(nullptr);,REQUIRES_SHARED(Locks::mutator_lock_) {\012 ArtMethod* method = soa.Self()-&gt;GetCurrentMethod(nullptr);)<SUB>348</SUB>> ]
-"440" [label = <(UNKNOWN,if (method == jni::DecodeArtMethod(WellKnownClasses::java_lang_Runtime_nativeLoad)) {\012 return soa.Decode&lt;mirror::ClassLoader&gt;(soa.Self()-&gt;GetClassLoaderOverride());\012 },if (method == jni::DecodeArtMethod(WellKnownClasses::java_lang_Runtime_nativeLoad)) {\012 return soa.Decode&lt;mirror::ClassLoader&gt;(soa.Self()-&gt;GetClassLoaderOverride());\012 })<SUB>351</SUB>> ]
-"441" [label = <(UNKNOWN,if (method != nullptr) {\012 return method-&gt;GetDeclaringClass()-&gt;GetClassLoader();\012 },if (method != nullptr) {\012 return method-&gt;GetDeclaringClass()-&gt;GetClassLoader();\012 })<SUB>355</SUB>> ]
-"443" [label = <(&lt;operator&gt;.assignment,class_loader =\012      soa.Decode&lt;mirror::ClassLoader&gt;(Runtime::Current()-&gt;GetSystemClassLoader()))<SUB>359</SUB>> ]
-"460" [label = <(UNKNOWN,if (class_loader != nullptr) {\012 return class_loader;\012 },if (class_loader != nullptr) {\012 return class_loader;\012 })<SUB>361</SUB>> ]
-"461" [label = <(UNKNOWN,class_loader = soa.Decode&lt;mirror::ClassLoader&gt;(soa.Self()-&gt;GetClassLoaderOverride());,class_loader = soa.Decode&lt;mirror::ClassLoader&gt;(soa.Self()-&gt;GetClassLoaderOverride());)<SUB>365</SUB>> ]
-"462" [label = <(UNKNOWN,if (class_loader != nullptr) {\012 // If so, CommonCompilerTest should have marked the runtime as a compiler not compiling an\012 // image.\012    CHECK(Runtime::Current()-&gt;IsAotCompiler());\012    CHECK(!Runtime::Current()-&gt;IsCompilingBootImage());\012 return class_loader;\012 },if (class_loader != nullptr) {\012 // If so, CommonCompilerTest should have marked the runtime as a compiler not compiling an\012 // image.\012    CHECK(Runtime::Current()-&gt;IsAotCompiler());\012    CHECK(!Runtime::Current()-&gt;IsCompilingBootImage());\012 return class_loader;\012 })<SUB>366</SUB>> ]
-"463" [label = <(UNKNOWN,return nullptr;,return nullptr;)<SUB>374</SUB>> ]
-"464" [label = <(UNKNOWN,},})<SUB>375</SUB>> ]
-"474" [label = <(UNKNOWN,),))<SUB>378</SUB>> ]
-"475" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012 StackHandleScope&lt;2&gt; hs(soa.Self());,REQUIRES_SHARED(Locks::mutator_lock_) {\012 StackHandleScope&lt;2&gt; hs(soa.Self());)<SUB>379</SUB>> ]
-"477" [label = <(c,c(\012      hs.NewHandle(EnsureInitialized(soa.Self(), soa.Decode&lt;mirror::Class&gt;(jni_class)))))<SUB>381</SUB>> ]
-"496" [label = <(UNKNOWN,if (c == nullptr) {\012 return nullptr;\012 },if (c == nullptr) {\012 return nullptr;\012 })<SUB>383</SUB>> ]
-"498" [label = <(&lt;operator&gt;.assignment,* field = nullptr)<SUB>386</SUB>> ]
-"503" [label = <(&lt;operator&gt;.assignment,* class_linker = Runtime::Current()-&gt;GetClassLinker())<SUB>388</SUB>> ]
-"512" [label = <(UNKNOWN,if (sig[1] != '\0') {\012 Handle&lt;mirror::ClassLoader&gt; class_loader(hs.NewHandle(c-&gt;GetClassLoader()));\012    field_type = class_linker-&gt;FindClass(soa.Self(), sig, class_loader);\012 },if (sig[1] != '\0') {\012 Handle&lt;mirror::ClassLoader&gt; class_loader(hs.NewHandle(c-&gt;GetClassLoader()));\012    field_type = class_linker-&gt;FindClass(soa.Self(), sig, class_loader);\012 })<SUB>389</SUB>> ]
-"513" [label = <(UNKNOWN,else {\012    field_type = class_linker-&gt;FindPrimitiveClass(*sig);\012 },else {\012    field_type = class_linker-&gt;FindPrimitiveClass(*sig);\012 })<SUB>392</SUB>> ]
-"514" [label = <(UNKNOWN,if (field_type == nullptr) {\012 // Failed to find type from the signature of the field.\012    DCHECK(soa.Self()-&gt;IsExceptionPending());\012 StackHandleScope&lt;1&gt; hs2(soa.Self());\012 Handle&lt;mirror::Throwable&gt; cause(hs2.NewHandle(soa.Self()-&gt;GetException()));\012    soa.Self()-&gt;ClearException();\012    std::string temp;\012    soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/NoSuchFieldError;&quot;,\012 &quot;no type \&quot;%s\&quot; found and so no field \&quot;%s\&quot; &quot;\012 &quot;could be found in class \&quot;%s\&quot; or its superclasses&quot;, sig, name,\012                                   c-&gt;GetDescriptor(&amp;temp));\012    soa.Self()-&gt;GetException()-&gt;SetCause(cause.Get());\012 return nullptr;\012 },if (field_type == nullptr) {\012 // Failed to find type from the signature of the field.\012    DCHECK(soa.Self()-&gt;IsExceptionPending());\012 StackHandleScope&lt;1&gt; hs2(soa.Self());\012 Handle&lt;mirror::Throwable&gt; cause(hs2.NewHandle(soa.Self()-&gt;GetException()));\012    soa.Self()-&gt;ClearException();\012    std::string temp;\012    soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/NoSuchFieldError;&quot;,\012 &quot;no type \&quot;%s\&quot; found and so no field \&quot;%s\&quot; &quot;\012 &quot;could be found in class \&quot;%s\&quot; or its superclasses&quot;, sig, name,\012                                   c-&gt;GetDescriptor(&amp;temp));\012    soa.Self()-&gt;GetException()-&gt;SetCause(cause.Get());\012 return nullptr;\012 })<SUB>395</SUB>> ]
-"516" [label = <(UNKNOWN,if (is_static) {\012    field = mirror::Class::FindStaticField(\012        soa.Self(), c.Get(), name, field_type-&gt;GetDescriptor(&amp;temp));\012 },if (is_static) {\012    field = mirror::Class::FindStaticField(\012        soa.Self(), c.Get(), name, field_type-&gt;GetDescriptor(&amp;temp));\012 })<SUB>410</SUB>> ]
-"517" [label = <(UNKNOWN,else {\012    field = c-&gt;FindInstanceField(name, field_type-&gt;GetDescriptor(&amp;temp));\012 },else {\012    field = c-&gt;FindInstanceField(name, field_type-&gt;GetDescriptor(&amp;temp));\012 })<SUB>413</SUB>> ]
-"518" [label = <(UNKNOWN,if (field != nullptr &amp;&amp; ShouldBlockAccessToMember(field, soa.Self())) {\012    field = nullptr;\012 },if (field != nullptr &amp;&amp; ShouldBlockAccessToMember(field, soa.Self())) {\012    field = nullptr;\012 })<SUB>416</SUB>> ]
-"519" [label = <(UNKNOWN,if (field == nullptr) {\012    soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/NoSuchFieldError;&quot;,\012 &quot;no \&quot;%s\&quot; field \&quot;%s\&quot; in class \&quot;%s\&quot; or its superclasses&quot;,\012                                   sig, name, c-&gt;GetDescriptor(&amp;temp));\012 return nullptr;\012 },if (field == nullptr) {\012    soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/NoSuchFieldError;&quot;,\012 &quot;no \&quot;%s\&quot; field \&quot;%s\&quot; in class \&quot;%s\&quot; or its superclasses&quot;,\012                                   sig, name, c-&gt;GetDescriptor(&amp;temp));\012 return nullptr;\012 })<SUB>419</SUB>> ]
-"520" [label = <(UNKNOWN,return jni::EncodeArtField(field);,return jni::EncodeArtField(field);)<SUB>425</SUB>> ]
-"521" [label = <(UNKNOWN,},})<SUB>426</SUB>> ]
-"531" [label = <(UNKNOWN,),))<SUB>429</SUB>> ]
-"532" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012  std::string type(array-&gt;PrettyTypeOf());,REQUIRES_SHARED(Locks::mutator_lock_) {\012  std::string type(array-&gt;PrettyTypeOf());)<SUB>430</SUB>> ]
-"533" [label = <(UNKNOWN,soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/ArrayIndexOutOfBoundsException;&quot;,\012 &quot;%s offset=%d length=%d %s.length=%d&quot;,\012                                 type.c_str(), start, length, identifier, array-&gt;GetLength());,soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/ArrayIndexOutOfBoundsException;&quot;,\012 &quot;%s offset=%d length=%d %s.length=%d&quot;,\012                                 type.c_str(), start, length, identifier, array-&gt;GetLength());)<SUB>432</SUB>> ]
-"534" [label = <(UNKNOWN,},})<SUB>435</SUB>> ]
-"543" [label = <(UNKNOWN,),))<SUB>438</SUB>> ]
-"544" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012  soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/StringIndexOutOfBoundsException;&quot;,\012 &quot;offset=%d length=%d string.length()=%d&quot;, start, length,\012                                 array_length);,REQUIRES_SHARED(Locks::mutator_lock_) {\012  soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/StringIndexOutOfBoundsException;&quot;,\012 &quot;offset=%d length=%d string.length()=%d&quot;, start, length,\012                                 array_length);)<SUB>439</SUB>> ]
-"545" [label = <(UNKNOWN,},})<SUB>443</SUB>> ]
-"554" [label = <(UNKNOWN,),))<SUB>445</SUB>> ]
-"555" [label = <(UNKNOWN,REQUIRES(!Locks::mutator_lock_) {\012 // Turn the const char* into a java.lang.String.\012 ScopedLocalRef&lt;jstring&gt; s(env, env-&gt;NewStringUTF(msg));\012 if (msg != nullptr &amp;&amp; s.get() == nullptr) {\012 return JNI_ERR;\012 }\012\012 // Choose an appropriate constructor and set up the arguments.\012  jvalue args[2];\012 const char* signature;\012 if (msg == nullptr &amp;&amp; cause == nullptr) {\012    signature = &quot;()V&quot;;\012 } else if (msg != nullptr &amp;&amp; cause == nullptr) {\012    signature = &quot;(Ljava/lang/String;)V&quot;;\012    args[0].l = s.get();\012 } else if (msg == nullptr &amp;&amp; cause != nullptr) {\012    signature = &quot;(Ljava/lang/Throwable;)V&quot;;\012    args[0].l = cause;\012 } else {\012    signature = &quot;(Ljava/lang/String;Ljava/lang/Throwable;)V&quot;;\012    args[0].l = s.get();\012    args[1].l = cause;\012 }\012  jmethodID mid = env-&gt;GetMethodID(exception_class, &quot;&lt;init&gt;&quot;, signature);\012 if (mid == nullptr) {\012 ScopedObjectAccess soa(env);\012    LOG(ERROR) &lt;&lt; &quot;No &lt;init&gt;&quot; &lt;&lt; signature &lt;&lt; &quot; in &quot;\012 &lt;&lt; mirror::Class::PrettyClass(soa.Decode&lt;mirror::Class&gt;(exception_class));\012 return JNI_ERR;\012 }\012\012 ScopedLocalRef&lt;jthrowable&gt; exception(\012      env, reinterpret_cast&lt;jthrowable&gt;(env-&gt;NewObjectA(exception_class, mid, args)));\012 if (exception.get() == nullptr) {\012 return JNI_ERR;\012 }\012 ScopedObjectAccess soa(env);\012  soa.Self()-&gt;SetException(soa.Decode&lt;mirror::Throwable&gt;(exception.get()));\012 return JNI_OK;\012},REQUIRES(!Locks::mutator_lock_) {\012 // Turn the const char* into a java.lang.String.\012 ScopedLocalRef&lt;jstring&gt; s(env, env-&gt;NewStringUTF(msg));\012 if (msg != nullptr &amp;&amp; s.get() == nullptr) {\012 return JNI_ERR;\012 }\012\012 // Choose an appropriate constructor and set up the arguments.\012  jvalue args[2];\012 const char* signature;\012 if (msg == nullptr &amp;&amp; cause == nullptr) {\012    signature = &quot;()V&quot;;\012 } else if (msg != nullptr &amp;&amp; cause == nullptr) {\012    signature = &quot;(Ljava/lang/String;)V&quot;;\012    args[0].l = s.get();\012 } else if (msg == nullptr &amp;&amp; cause != nullptr) {\012    signature = &quot;(Ljava/lang/Throwable;)V&quot;;\012    args[0].l = cause;\012 } else {\012    signature = &quot;(Ljava/lang/String;Ljava/lang/Throwable;)V&quot;;\012    args[0].l = s.get();\012    args[1].l = cause;\012 }\012  jmethodID mid = env-&gt;GetMethodID(exception_class, &quot;&lt;init&gt;&quot;, signature);\012 if (mid == nullptr) {\012 ScopedObjectAccess soa(env);\012    LOG(ERROR) &lt;&lt; &quot;No &lt;init&gt;&quot; &lt;&lt; signature &lt;&lt; &quot; in &quot;\012 &lt;&lt; mirror::Class::PrettyClass(soa.Decode&lt;mirror::Class&gt;(exception_class));\012 return JNI_ERR;\012 }\012\012 ScopedLocalRef&lt;jthrowable&gt; exception(\012      env, reinterpret_cast&lt;jthrowable&gt;(env-&gt;NewObjectA(exception_class, mid, args)));\012 if (exception.get() == nullptr) {\012 return JNI_ERR;\012 }\012 ScopedObjectAccess soa(env);\012  soa.Self()-&gt;SetException(soa.Decode&lt;mirror::Throwable&gt;(exception.get()));\012 return JNI_OK;\012})<SUB>446</SUB>> ]
-"575" [label = <(UNKNOWN,),))<SUB>516</SUB>> ]
-"576" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012 auto pointer_size = Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize();,REQUIRES_SHARED(Locks::mutator_lock_) {\012 auto pointer_size = Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize();)<SUB>517</SUB>> ]
-"577" [label = <(UNKNOWN,for (auto&amp; method : c-&gt;GetMethods(pointer_size)) {\012 if (kNative == method.IsNative() &amp;&amp; name == method.GetName() &amp;&amp; method.GetSignature() == sig) {\012 return &amp;method;\012 }\012 },for (auto&amp; method : c-&gt;GetMethods(pointer_size)) {\012 if (kNative == method.IsNative() &amp;&amp; name == method.GetName() &amp;&amp; method.GetSignature() == sig) {\012 return &amp;method;\012 }\012 })<SUB>519</SUB>> ]
-"578" [label = <(UNKNOWN,return nullptr;,return nullptr;)<SUB>524</SUB>> ]
-"579" [label = <(UNKNOWN,},})<SUB>525</SUB>> ]
-"13308" [label = <(UNKNOWN,},})<SUB>2676</SUB>> ]
-"13364" [label = <(UNKNOWN,),))<SUB>2691</SUB>> ]
-"13365" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012 ObjPtr&lt;ArtArrayT&gt; array = soa.Decode&lt;ArtArrayT&gt;(java_array);,REQUIRES_SHARED(Locks::mutator_lock_) {\012 ObjPtr&lt;ArtArrayT&gt; array = soa.Decode&lt;ArtArrayT&gt;(java_array);)<SUB>2692</SUB>> ]
-"13366" [label = <(UNKNOWN,if (UNLIKELY(ArtArrayT::GetArrayClass() != array-&gt;GetClass())) {\012      soa.Vm()-&gt;JniAbortF(fn_name,\012 &quot;attempt to %s %s primitive array elements with an object of type %s&quot;,\012                          operation,\012                          mirror::Class::PrettyDescriptor(\012 ArtArrayT::GetArrayClass()-&gt;GetComponentType()).c_str(),\012                          mirror::Class::PrettyDescriptor(array-&gt;GetClass()).c_str());\012 return nullptr;\012 },if (UNLIKELY(ArtArrayT::GetArrayClass() != array-&gt;GetClass())) {\012      soa.Vm()-&gt;JniAbortF(fn_name,\012 &quot;attempt to %s %s primitive array elements with an object of type %s&quot;,\012                          operation,\012                          mirror::Class::PrettyDescriptor(\012 ArtArrayT::GetArrayClass()-&gt;GetComponentType()).c_str(),\012                          mirror::Class::PrettyDescriptor(array-&gt;GetClass()).c_str());\012 return nullptr;\012 })<SUB>2694</SUB>> ]
-"13367" [label = <(UNKNOWN,DCHECK_EQ(sizeof(ElementT), array-&gt;GetClass()-&gt;GetComponentSize());,DCHECK_EQ(sizeof(ElementT), array-&gt;GetClass()-&gt;GetComponentSize());)<SUB>2703</SUB>> ]
-"13368" [label = <(UNKNOWN,return array.Ptr();,return array.Ptr();)<SUB>2704</SUB>> ]
-"13369" [label = <(UNKNOWN,},})<SUB>2705</SUB>> ]
-"13542" [label = <(UNKNOWN,),))<SUB>2749</SUB>> ]
-"13543" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012 void* array_data = array-&gt;GetRawData(component_size, 0);,REQUIRES_SHARED(Locks::mutator_lock_) {\012 void* array_data = array-&gt;GetRawData(component_size, 0);)<SUB>2750</SUB>> ]
-"13545" [label = <(&lt;operator&gt;.assignment,* heap = Runtime::Current()-&gt;GetHeap())<SUB>2752</SUB>> ]
-"13555" [label = <(&lt;operator&gt;.assignment,is_copy = array_data != elements)<SUB>2753</SUB>> ]
-"13561" [label = <(&lt;operator&gt;.assignment,bytes = array-&gt;GetLength() * component_size)<SUB>2754</SUB>> ]
-"13569" [label = <(UNKNOWN,if (is_copy) {\012 // Sanity check: If elements is not the same as the java array's data, it better not be a\012 // heap address. TODO: This might be slow to check, may be worth keeping track of which\012 // copies we make?\012 if (heap-&gt;IsNonDiscontinuousSpaceHeapAddress(elements)) {\012        soa.Vm()-&gt;JniAbortF(&quot;ReleaseArrayElements&quot;,\012 &quot;invalid element pointer %p, array elements are %p&quot;,\012 reinterpret_cast&lt;void*&gt;(elements), array_data);\012 return;\012 }\012 if (mode != JNI_ABORT) {\012        memcpy(array_data, elements, bytes);\012 } else if (kWarnJniAbort &amp;&amp; memcmp(array_data, elements, bytes) != 0) {\012 // Warn if we have JNI_ABORT and the arrays don't match since this is usually an error.\012        LOG(WARNING) &lt;&lt; &quot;Possible incorrect JNI_ABORT in Release*ArrayElements&quot;;\012        soa.Self()-&gt;DumpJavaStack(LOG_STREAM(WARNING));\012 }\012 },if (is_copy) {\012 // Sanity check: If elements is not the same as the java array's data, it better not be a\012 // heap address. TODO: This might be slow to check, may be worth keeping track of which\012 // copies we make?\012 if (heap-&gt;IsNonDiscontinuousSpaceHeapAddress(elements)) {\012        soa.Vm()-&gt;JniAbortF(&quot;ReleaseArrayElements&quot;,\012 &quot;invalid element pointer %p, array elements are %p&quot;,\012 reinterpret_cast&lt;void*&gt;(elements), array_data);\012 return;\012 }\012 if (mode != JNI_ABORT) {\012        memcpy(array_data, elements, bytes);\012 } else if (kWarnJniAbort &amp;&amp; memcmp(array_data, elements, bytes) != 0) {\012 // Warn if we have JNI_ABORT and the arrays don't match since this is usually an error.\012        LOG(WARNING) &lt;&lt; &quot;Possible incorrect JNI_ABORT in Release*ArrayElements&quot;;\012        soa.Self()-&gt;DumpJavaStack(LOG_STREAM(WARNING));\012 }\012 })<SUB>2755</SUB>> ]
-"13570" [label = <(UNKNOWN,if (mode != JNI_COMMIT) {\012 if (is_copy) {\012 delete[] reinterpret_cast&lt;uint64_t*&gt;(elements);\012 } else if (heap-&gt;IsMovableObject(array)) {\012 // Non copy to a movable object must means that we had disabled the moving GC.\012 if (!kUseReadBarrier) {\012          heap-&gt;DecrementDisableMovingGC(soa.Self());\012 } else {\012          heap-&gt;DecrementDisableThreadFlip(soa.Self());\012 }\012 }\012 },if (mode != JNI_COMMIT) {\012 if (is_copy) {\012 delete[] reinterpret_cast&lt;uint64_t*&gt;(elements);\012 } else if (heap-&gt;IsMovableObject(array)) {\012 // Non copy to a movable object must means that we had disabled the moving GC.\012 if (!kUseReadBarrier) {\012          heap-&gt;DecrementDisableMovingGC(soa.Self());\012 } else {\012          heap-&gt;DecrementDisableThreadFlip(soa.Self());\012 }\012 }\012 })<SUB>2773</SUB>> ]
-"13571" [label = <(UNKNOWN,},})<SUB>2785</SUB>> ]
-"13784" [label = <(UNKNOWN,};,};)<SUB>2826</SUB>> ]
-"13786" [label = <(&lt;operator&gt;.assignment,gJniNativeInterface = {\012 nullptr, // reserved0.\012 nullptr, // reserved1.\012 nullptr, // reserved2.\012 nullptr, // reserved3.\012  JNI::GetVersion,\012  JNI::DefineClass,\012  JNI::FindClass,\012  JNI::FromReflectedMethod,\012  JNI::FromReflectedField,\012  JNI::ToReflectedMethod,\012  JNI::GetSuperclass,\012  JNI::IsAssignableFrom,\012  JNI::ToReflectedField,\012  JNI::Throw,\012  JNI::ThrowNew,\012  JNI::ExceptionOccurred,\012  JNI::ExceptionDescribe,\012  JNI::ExceptionClear,\012  JNI::FatalError,\012  JNI::PushLocalFrame,\012  JNI::PopLocalFrame,\012  JNI::NewGlobalRef,\012  JNI::DeleteGlobalRef,\012  JNI::DeleteLocalRef,\012  JNI::IsSameObject,\012  JNI::NewLocalRef,\012  JNI::EnsureLocalCapacity,\012  JNI::AllocObject,\012  JNI::NewObject,\012  JNI::NewObjectV,\012  JNI::NewObjectA,\012  JNI::GetObjectClass,\012  JNI::IsInstanceOf,\012  JNI::GetMethodID,\012  JNI::CallObjectMethod,\012  JNI::CallObjectMethodV,\012  JNI::CallObjectMethodA,\012  JNI::CallBooleanMethod,\012  JNI::CallBooleanMethodV,\012  JNI::CallBooleanMethodA,\012  JNI::CallByteMethod,\012  JNI::CallByteMethodV,\012  JNI::CallByteMethodA,\012  JNI::CallCharMethod,\012  JNI::CallCharMethodV,\012  JNI::CallCharMethodA,\012  JNI::CallShortMethod,\012  JNI::CallShortMethodV,\012  JNI::CallShortMethodA,\012  JNI::CallIntMethod,\012  JNI::CallIntMethodV,\012  JNI::CallIntMethodA,\012  JNI::CallLongMethod,\012  JNI::CallLongMethodV,\012  JNI::CallLongMethodA,\012  JNI::CallFloatMethod,\012  JNI::CallFloatMethodV,\012  JNI::CallFloatMethodA,\012  JNI::CallDoubleMethod,\012  JNI::CallDoubleMethodV,\012  JNI::CallDoubleMethodA,\012  JNI::CallVoidMethod,\012  JNI::CallVoidMethodV,\012  JNI::CallVoidMethodA,\012  JNI::CallNonvirtualObjectMethod,\012  JNI::CallNonvirtualObjectMethodV,\012  JNI::CallNonvirtualObjectMethodA,\012  JNI::CallNonvirtualBooleanMethod,\012  JNI::CallNonvirtualBooleanMethodV,\012  JNI::CallNonvirtualBooleanMethodA,\012  JNI::CallNonvirtualByteMethod,\012  JNI::CallNonvirtualByteMethodV,\012  JNI::CallNonvirtualByteMethodA,\012  JNI::CallNonvirtualCharMethod,\012  JNI::CallNonvirtualCharMethodV,\012  JNI::CallNonvirtualCharMethodA,\012  JNI::CallNonvirtualShortMethod,\012  JNI::CallNonvirtualShortMethodV,\012  JNI::CallNonvirtualShortMethodA,\012  JNI::CallNonvirtualIntMethod,\012  JNI::CallNonvirtualIntMethodV,\012  JNI::CallNonvirtualIntMethodA,\012  JNI::CallNonvirtualLongMethod,\012  JNI::CallNonvirtualLongMethodV,\012  JNI::CallNonvirtualLongMethodA,\012  JNI::CallNonvirtualFloatMethod,\012  JNI::CallNonvirtualFloatMethodV,\012  JNI::CallNonvirtualFloatMethodA,\012  JNI::CallNonvirtualDoubleMethod,\012  JNI::CallNonvirtualDoubleMethodV,\012  JNI::CallNonvirtualDoubleMethodA,\012  JNI::CallNonvirtualVoidMethod,\012  JNI::CallNonvirtualVoidMethodV,\012  JNI::CallNonvirtualVoidMethodA,\012  JNI::GetFieldID,\012  JNI::GetObjectField,\012  JNI::GetBooleanField,\012  JNI::GetByteField,\012  JNI::GetCharField,\012  JNI::GetShortField,\012  JNI::GetIntField,\012  JNI::GetLongField,\012  JNI::GetFloatField,\012  JNI::GetDoubleField,\012  JNI::SetObjectField,\012  JNI::SetBooleanField,\012  JNI::SetByteField,\012  JNI::SetCharField,\012  JNI::SetShortField,\012  JNI::SetIntField,\012  JNI::SetLongField,\012  JNI::SetFloatField,\012  JNI::SetDoubleField,\012  JNI::GetStaticMethodID,\012  JNI::CallStaticObjectMethod,\012  JNI::CallStaticObjectMethodV,\012  JNI::CallStaticObjectMethodA,\012  JNI::CallStaticBooleanMethod,\012  JNI::CallStaticBooleanMethodV,\012  JNI::CallStaticBooleanMethodA,\012  JNI::CallStaticByteMethod,\012  JNI::CallStaticByteMethodV,\012  JNI::CallStaticByteMethodA,\012  JNI::CallStaticCharMethod,\012  JNI::CallStaticCharMethodV,\012  JNI::CallStaticCharMethodA,\012  JNI::CallStaticShortMethod,\012  JNI::CallStaticShortMethodV,\012  JNI::CallStaticShortMethodA,\012  JNI::CallStaticIntMethod,\012  JNI::CallStaticIntMethodV,\012  JNI::CallStaticIntMethodA,\012  JNI::CallStaticLongMethod,\012  JNI::CallStaticLongMethodV,\012  JNI::CallStaticLongMethodA,\012  JNI::CallStaticFloatMethod,\012  JNI::CallStaticFloatMethodV,\012  JNI::CallStaticFloatMethodA,\012  JNI::CallStaticDoubleMethod,\012  JNI::CallStaticDoubleMethodV,\012  JNI::CallStaticDoubleMethodA,\012  JNI::CallStaticVoidMethod,\012  JNI::CallStaticVoidMethodV,\012  JNI::CallStaticVoidMethodA,\012  JNI::GetStaticFieldID,\012  JNI::GetStaticObjectField,\012  JNI::GetStaticBooleanField,\012  JNI::GetStaticByteField,\012  JNI::GetStaticCharField,\012  JNI::GetStaticShortField,\012  JNI::GetStaticIntField,\012  JNI::GetStaticLongField,\012  JNI::GetStaticFloatField,\012  JNI::GetStaticDoubleField,\012  JNI::SetStaticObjectField,\012  JNI::SetStaticBooleanField,\012  JNI::SetStaticByteField,\012  JNI::SetStaticCharField,\012  JNI::SetStaticShortField,\012  JNI::SetStaticIntField,\012  JNI::SetStaticLongField,\012  JNI::SetStaticFloatField,\012  JNI::SetStaticDoubleField,\012  JNI::NewString,\012  JNI::GetStringLength,\012  JNI::GetStringChars,\012  JNI::ReleaseStringChars,\012  JNI::NewStringUTF,\012  JNI::GetStringUTFLength,\012  JNI::GetStringUTFChars,\012  JNI::ReleaseStringUTFChars,\012  JNI::GetArrayLength,\012  JNI::NewObjectArray,\012  JNI::GetObjectArrayElement,\012  JNI::SetObjectArrayElement,\012  JNI::NewBooleanArray,\012  JNI::NewByteArray,\012  JNI::NewCharArray,\012  JNI::NewShortArray,\012  JNI::NewIntArray,\012  JNI::NewLongArray,\012  JNI::NewFloatArray,\012  JNI::NewDoubleArray,\012  JNI::GetBooleanArrayElements,\012  JNI::GetByteArrayElements,\012  JNI::GetCharArrayElements,\012  JNI::GetShortArrayElements,\012  JNI::GetIntArrayElements,\012  JNI::GetLongArrayElements,\012  JNI::GetFloatArrayElements,\012  JNI::GetDoubleArrayElements,\012  JNI::ReleaseBooleanArrayElements,\012  JNI::ReleaseByteArrayElements,\012  JNI::ReleaseCharArrayElements,\012  JNI::ReleaseShortArrayElements,\012  JNI::ReleaseIntArrayElements,\012  JNI::ReleaseLongArrayElements,\012  JNI::ReleaseFloatArrayElements,\012  JNI::ReleaseDoubleArrayElements,\012  JNI::GetBooleanArrayRegion,\012  JNI::GetByteArrayRegion,\012  JNI::GetCharArrayRegion,\012  JNI::GetShortArrayRegion,\012  JNI::GetIntArrayRegion,\012  JNI::GetLongArrayRegion,\012  JNI::GetFloatArrayRegion,\012  JNI::GetDoubleArrayRegion,\012  JNI::SetBooleanArrayRegion,\012  JNI::SetByteArrayRegion,\012  JNI::SetCharArrayRegion,\012  JNI::SetShortArrayRegion,\012  JNI::SetIntArrayRegion,\012  JNI::SetLongArrayRegion,\012  JNI::SetFloatArrayRegion,\012  JNI::SetDoubleArrayRegion,\012  JNI::RegisterNatives,\012  JNI::UnregisterNatives,\012  JNI::MonitorEnter,\012  JNI::MonitorExit,\012  JNI::GetJavaVM,\012  JNI::GetStringRegion,\012  JNI::GetStringUTFRegion,\012  JNI::GetPrimitiveArrayCritical,\012  JNI::ReleasePrimitiveArrayCritical,\012  JNI::GetStringCritical,\012  JNI::ReleaseStringCritical,\012  JNI::NewWeakGlobalRef,\012  JNI::DeleteWeakGlobalRef,\012  JNI::ExceptionCheck,\012  JNI::NewDirectByteBuffer,\012  JNI::GetDirectBufferAddress,\012  JNI::GetDirectBufferCapacity,\012  JNI::GetObjectRefType,\012})<SUB>2828</SUB>> ]
-"14491" [label = <(&lt;operator&gt;.assignment,(*gJniSleepForeverStub[])() = {\012 nullptr, // reserved0.\012 nullptr, // reserved1.\012 nullptr, // reserved2.\012 nullptr, // reserved3.\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012})<SUB>3068</SUB>> ]
-"14736" [label = <(UNKNOWN,},})<SUB>3308</SUB>> ]
-"228" [label = <(&lt;operator&gt;.assignment,kWarnJniAbort = false)<SUB>160</SUB>> ]
-"231" [label = <(UNKNOWN,static bool IsCallerTrusted(Thread* self) REQUIRES_SHARED(Locks::mutator_lock_) {\012 return hiddenapi::IsCallerTrusted(GetCallingClass(self, /* num_frames */ 1));\012},static bool IsCallerTrusted(Thread* self) REQUIRES_SHARED(Locks::mutator_lock_) {\012 return hiddenapi::IsCallerTrusted(GetCallingClass(self, /* num_frames */ 1));\012})<SUB>162</SUB>> ]
-"232" [label = <(UNKNOWN,template&lt;typename T&gt;\012ALWAYS_INLINE static bool ShouldBlockAccessToMember(T* member, Thread* self)\012    REQUIRES_SHARED(Locks::mutator_lock_) {\012  hiddenapi::Action action = hiddenapi::GetMemberAction(\012      member, self, IsCallerTrusted, hiddenapi::kJNI);\012 if (action != hiddenapi::kAllow) {\012    hiddenapi::NotifyHiddenApiListener(member);\012 }\012\012 return action == hiddenapi::kDeny;\012},template&lt;typename T&gt;\012ALWAYS_INLINE static bool ShouldBlockAccessToMember(T* member, Thread* self)\012    REQUIRES_SHARED(Locks::mutator_lock_) {\012  hiddenapi::Action action = hiddenapi::GetMemberAction(\012      member, self, IsCallerTrusted, hiddenapi::kJNI);\012 if (action != hiddenapi::kAllow) {\012    hiddenapi::NotifyHiddenApiListener(member);\012 }\012\012 return action == hiddenapi::kDeny;\012})<SUB>166</SUB>> ]
-"240" [label = <(UNKNOWN,),))<SUB>181</SUB>> ]
-"241" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012  DCHECK_EQ(field-&gt;GetTypeAsPrimitiveType(), Primitive::kPrimNot);,REQUIRES_SHARED(Locks::mutator_lock_) {\012  DCHECK_EQ(field-&gt;GetTypeAsPrimitiveType(), Primitive::kPrimNot);)<SUB>182</SUB>> ]
-"243" [label = <(&lt;operator&gt;.assignment,* instrumentation = Runtime::Current()-&gt;GetInstrumentation())<SUB>184</SUB>> ]
-"252" [label = <(UNKNOWN,if (UNLIKELY(instrumentation-&gt;HasFieldWriteListeners())) {\012 Thread* self = Thread::Current();\012 ArtMethod* cur_method = self-&gt;GetCurrentMethod(/*dex_pc*/ nullptr,\012 /*check_suspended*/ true,\012 /*abort_on_error*/ false);\012\012 if (cur_method == nullptr) {\012 // Set/Get Fields can be issued without a method during runtime startup/teardown. Ignore all\012 // of these changes.\012 return;\012 }\012    DCHECK(cur_method-&gt;IsNative());\012 JValue val;\012    val.SetL(self-&gt;DecodeJObject(jval));\012    instrumentation-&gt;FieldWriteEvent(self,\012                                     self-&gt;DecodeJObject(obj).Ptr(),\012                                     cur_method,\012 0, // dex_pc is always 0 since this is a native method.\012                                     field,\012                                     val);\012 },if (UNLIKELY(instrumentation-&gt;HasFieldWriteListeners())) {\012 Thread* self = Thread::Current();\012 ArtMethod* cur_method = self-&gt;GetCurrentMethod(/*dex_pc*/ nullptr,\012 /*check_suspended*/ true,\012 /*abort_on_error*/ false);\012\012 if (cur_method == nullptr) {\012 // Set/Get Fields can be issued without a method during runtime startup/teardown. Ignore all\012 // of these changes.\012 return;\012 }\012    DCHECK(cur_method-&gt;IsNative());\012 JValue val;\012    val.SetL(self-&gt;DecodeJObject(jval));\012    instrumentation-&gt;FieldWriteEvent(self,\012                                     self-&gt;DecodeJObject(obj).Ptr(),\012                                     cur_method,\012 0, // dex_pc is always 0 since this is a native method.\012                                     field,\012                                     val);\012 })<SUB>185</SUB>> ]
-"265" [label = <(GetInstrumentation,Runtime::Current()-&gt;GetInstrumentation())<SUB>211</SUB>> ]
-"390" [label = <(NewHandle,hs.NewHandle(klass))<SUB>316</SUB>> ]
-"417" [label = <(GetImagePointerSize,Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize())<SUB>331</SUB>> ]
-"445" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::ClassLoader&gt;(Runtime::Current()-&gt;GetSystemClassLoader()))<SUB>360</SUB>> ]
-"478" [label = <(NewHandle,hs.NewHandle(EnsureInitialized(soa.Self(), soa.Decode&lt;mirror::Class&gt;(jni_class))))<SUB>382</SUB>> ]
-"505" [label = <(GetClassLinker,Runtime::Current()-&gt;GetClassLinker())<SUB>388</SUB>> ]
-"13547" [label = <(GetHeap,Runtime::Current()-&gt;GetHeap())<SUB>2752</SUB>> ]
-"13557" [label = <(&lt;operator&gt;.notEquals,array_data != elements)<SUB>2753</SUB>> ]
-"13563" [label = <(&lt;operator&gt;.multiplication,array-&gt;GetLength() * component_size)<SUB>2754</SUB>> ]
-"13788" [label = <(&lt;operator&gt;.arrayInitializer,{\012 nullptr, // reserved0.\012 nullptr, // reserved1.\012 nullptr, // reserved2.\012 nullptr, // reserved3.\012  JNI::GetVersion,\012  JNI::DefineClass,\012  JNI::FindClass,\012  JNI::FromReflectedMethod,\012  JNI::FromReflectedField,\012  JNI::ToReflectedMethod,\012  JNI::GetSuperclass,\012  JNI::IsAssignableFrom,\012  JNI::ToReflectedField,\012  JNI::Throw,\012  JNI::ThrowNew,\012  JNI::ExceptionOccurred,\012  JNI::ExceptionDescribe,\012  JNI::ExceptionClear,\012  JNI::FatalError,\012  JNI::PushLocalFrame,\012  JNI::PopLocalFrame,\012  JNI::NewGlobalRef,\012  JNI::DeleteGlobalRef,\012  JNI::DeleteLocalRef,\012  JNI::IsSameObject,\012  JNI::NewLocalRef,\012  JNI::EnsureLocalCapacity,\012  JNI::AllocObject,\012  JNI::NewObject,\012  JNI::NewObjectV,\012  JNI::NewObjectA,\012  JNI::GetObjectClass,\012  JNI::IsInstanceOf,\012  JNI::GetMethodID,\012  JNI::CallObjectMethod,\012  JNI::CallObjectMethodV,\012  JNI::CallObjectMethodA,\012  JNI::CallBooleanMethod,\012  JNI::CallBooleanMethodV,\012  JNI::CallBooleanMethodA,\012  JNI::CallByteMethod,\012  JNI::CallByteMethodV,\012  JNI::CallByteMethodA,\012  JNI::CallCharMethod,\012  JNI::CallCharMethodV,\012  JNI::CallCharMethodA,\012  JNI::CallShortMethod,\012  JNI::CallShortMethodV,\012  JNI::CallShortMethodA,\012  JNI::CallIntMethod,\012  JNI::CallIntMethodV,\012  JNI::CallIntMethodA,\012  JNI::CallLongMethod,\012  JNI::CallLongMethodV,\012  JNI::CallLongMethodA,\012  JNI::CallFloatMethod,\012  JNI::CallFloatMethodV,\012  JNI::CallFloatMethodA,\012  JNI::CallDoubleMethod,\012  JNI::CallDoubleMethodV,\012  JNI::CallDoubleMethodA,\012  JNI::CallVoidMethod,\012  JNI::CallVoidMethodV,\012  JNI::CallVoidMethodA,\012  JNI::CallNonvirtualObjectMethod,\012  JNI::CallNonvirtualObjectMethodV,\012  JNI::CallNonvirtualObjectMethodA,\012  JNI::CallNonvirtualBooleanMethod,\012  JNI::CallNonvirtualBooleanMethodV,\012  JNI::CallNonvirtualBooleanMethodA,\012  JNI::CallNonvirtualByteMethod,\012  JNI::CallNonvirtualByteMethodV,\012  JNI::CallNonvirtualByteMethodA,\012  JNI::CallNonvirtualCharMethod,\012  JNI::CallNonvirtualCharMethodV,\012  JNI::CallNonvirtualCharMethodA,\012  JNI::CallNonvirtualShortMethod,\012  JNI::CallNonvirtualShortMethodV,\012  JNI::CallNonvirtualShortMethodA,\012  JNI::CallNonvirtualIntMethod,\012  JNI::CallNonvirtualIntMethodV,\012  JNI::CallNonvirtualIntMethodA,\012  JNI::CallNonvirtualLongMethod,\012  JNI::CallNonvirtualLongMethodV,\012  JNI::CallNonvirtualLongMethodA,\012  JNI::CallNonvirtualFloatMethod,\012  JNI::CallNonvirtualFloatMethodV,\012  JNI::CallNonvirtualFloatMethodA,\012  JNI::CallNonvirtualDoubleMethod,\012  JNI::CallNonvirtualDoubleMethodV,\012  JNI::CallNonvirtualDoubleMethodA,\012  JNI::CallNonvirtualVoidMethod,\012  JNI::CallNonvirtualVoidMethodV,\012  JNI::CallNonvirtualVoidMethodA,\012  JNI::GetFieldID,\012  JNI::GetObjectField,\012  JNI::GetBooleanField,\012  JNI::GetByteField,\012  JNI::GetCharField,\012  JNI::GetShortField,\012  JNI::GetIntField,\012  JNI::GetLongField,\012  JNI::GetFloatField,\012  JNI::GetDoubleField,\012  JNI::SetObjectField,\012  JNI::SetBooleanField,\012  JNI::SetByteField,\012  JNI::SetCharField,\012  JNI::SetShortField,\012  JNI::SetIntField,\012  JNI::SetLongField,\012  JNI::SetFloatField,\012  JNI::SetDoubleField,\012  JNI::GetStaticMethodID,\012  JNI::CallStaticObjectMethod,\012  JNI::CallStaticObjectMethodV,\012  JNI::CallStaticObjectMethodA,\012  JNI::CallStaticBooleanMethod,\012  JNI::CallStaticBooleanMethodV,\012  JNI::CallStaticBooleanMethodA,\012  JNI::CallStaticByteMethod,\012  JNI::CallStaticByteMethodV,\012  JNI::CallStaticByteMethodA,\012  JNI::CallStaticCharMethod,\012  JNI::CallStaticCharMethodV,\012  JNI::CallStaticCharMethodA,\012  JNI::CallStaticShortMethod,\012  JNI::CallStaticShortMethodV,\012  JNI::CallStaticShortMethodA,\012  JNI::CallStaticIntMethod,\012  JNI::CallStaticIntMethodV,\012  JNI::CallStaticIntMethodA,\012  JNI::CallStaticLongMethod,\012  JNI::CallStaticLongMethodV,\012  JNI::CallStaticLongMethodA,\012  JNI::CallStaticFloatMethod,\012  JNI::CallStaticFloatMethodV,\012  JNI::CallStaticFloatMethodA,\012  JNI::CallStaticDoubleMethod,\012  JNI::CallStaticDoubleMethodV,\012  JNI::CallStaticDoubleMethodA,\012  JNI::CallStaticVoidMethod,\012  JNI::CallStaticVoidMethodV,\012  JNI::CallStaticVoidMethodA,\012  JNI::GetStaticFieldID,\012  JNI::GetStaticObjectField,\012  JNI::GetStaticBooleanField,\012  JNI::GetStaticByteField,\012  JNI::GetStaticCharField,\012  JNI::GetStaticShortField,\012  JNI::GetStaticIntField,\012  JNI::GetStaticLongField,\012  JNI::GetStaticFloatField,\012  JNI::GetStaticDoubleField,\012  JNI::SetStaticObjectField,\012  JNI::SetStaticBooleanField,\012  JNI::SetStaticByteField,\012  JNI::SetStaticCharField,\012  JNI::SetStaticShortField,\012  JNI::SetStaticIntField,\012  JNI::SetStaticLongField,\012  JNI::SetStaticFloatField,\012  JNI::SetStaticDoubleField,\012  JNI::NewString,\012  JNI::GetStringLength,\012  JNI::GetStringChars,\012  JNI::ReleaseStringChars,\012  JNI::NewStringUTF,\012  JNI::GetStringUTFLength,\012  JNI::GetStringUTFChars,\012  JNI::ReleaseStringUTFChars,\012  JNI::GetArrayLength,\012  JNI::NewObjectArray,\012  JNI::GetObjectArrayElement,\012  JNI::SetObjectArrayElement,\012  JNI::NewBooleanArray,\012  JNI::NewByteArray,\012  JNI::NewCharArray,\012  JNI::NewShortArray,\012  JNI::NewIntArray,\012  JNI::NewLongArray,\012  JNI::NewFloatArray,\012  JNI::NewDoubleArray,\012  JNI::GetBooleanArrayElements,\012  JNI::GetByteArrayElements,\012  JNI::GetCharArrayElements,\012  JNI::GetShortArrayElements,\012  JNI::GetIntArrayElements,\012  JNI::GetLongArrayElements,\012  JNI::GetFloatArrayElements,\012  JNI::GetDoubleArrayElements,\012  JNI::ReleaseBooleanArrayElements,\012  JNI::ReleaseByteArrayElements,\012  JNI::ReleaseCharArrayElements,\012  JNI::ReleaseShortArrayElements,\012  JNI::ReleaseIntArrayElements,\012  JNI::ReleaseLongArrayElements,\012  JNI::ReleaseFloatArrayElements,\012  JNI::ReleaseDoubleArrayElements,\012  JNI::GetBooleanArrayRegion,\012  JNI::GetByteArrayRegion,\012  JNI::GetCharArrayRegion,\012  JNI::GetShortArrayRegion,\012  JNI::GetIntArrayRegion,\012  JNI::GetLongArrayRegion,\012  JNI::GetFloatArrayRegion,\012  JNI::GetDoubleArrayRegion,\012  JNI::SetBooleanArrayRegion,\012  JNI::SetByteArrayRegion,\012  JNI::SetCharArrayRegion,\012  JNI::SetShortArrayRegion,\012  JNI::SetIntArrayRegion,\012  JNI::SetLongArrayRegion,\012  JNI::SetFloatArrayRegion,\012  JNI::SetDoubleArrayRegion,\012  JNI::RegisterNatives,\012  JNI::UnregisterNatives,\012  JNI::MonitorEnter,\012  JNI::MonitorExit,\012  JNI::GetJavaVM,\012  JNI::GetStringRegion,\012  JNI::GetStringUTFRegion,\012  JNI::GetPrimitiveArrayCritical,\012  JNI::ReleasePrimitiveArrayCritical,\012  JNI::GetStringCritical,\012  JNI::ReleaseStringCritical,\012  JNI::NewWeakGlobalRef,\012  JNI::DeleteWeakGlobalRef,\012  JNI::ExceptionCheck,\012  JNI::NewDirectByteBuffer,\012  JNI::GetDirectBufferAddress,\012  JNI::GetDirectBufferCapacity,\012  JNI::GetObjectRefType,\012})<SUB>2828</SUB>> ]
-"14493" [label = <(&lt;operator&gt;.arrayInitializer,{\012 nullptr, // reserved0.\012 nullptr, // reserved1.\012 nullptr, // reserved2.\012 nullptr, // reserved3.\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012})<SUB>3068</SUB>> ]
-"49" [label = <(&lt;operator&gt;.assignment,kBadUtf8ReplacementChar[] = &quot;?&quot;)<SUB>80</SUB>> ]
-"245" [label = <(GetInstrumentation,Runtime::Current()-&gt;GetInstrumentation())<SUB>184</SUB>> ]
-"266" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetInstrumentation)<SUB>211</SUB>> ]
-"391" [label = <(&lt;operator&gt;.fieldAccess,hs.NewHandle)<SUB>316</SUB>> ]
-"418" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize)<SUB>331</SUB>> ]
-"446" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::ClassLoader)<SUB>360</SUB>> ]
-"453" [label = <(GetSystemClassLoader,Runtime::Current()-&gt;GetSystemClassLoader())<SUB>360</SUB>> ]
-"479" [label = <(&lt;operator&gt;.fieldAccess,hs.NewHandle)<SUB>382</SUB>> ]
-"482" [label = <(EnsureInitialized,EnsureInitialized(soa.Self(), soa.Decode&lt;mirror::Class&gt;(jni_class)))<SUB>382</SUB>> ]
-"506" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetClassLinker)<SUB>388</SUB>> ]
-"13548" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetHeap)<SUB>2752</SUB>> ]
-"13564" [label = <(GetLength,array-&gt;GetLength())<SUB>2754</SUB>> ]
-"13793" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetVersion)<SUB>2833</SUB>> ]
-"13796" [label = <(&lt;operator&gt;.fieldAccess,JNI::DefineClass)<SUB>2834</SUB>> ]
-"13799" [label = <(&lt;operator&gt;.fieldAccess,JNI::FindClass)<SUB>2835</SUB>> ]
-"13802" [label = <(&lt;operator&gt;.fieldAccess,JNI::FromReflectedMethod)<SUB>2836</SUB>> ]
-"13805" [label = <(&lt;operator&gt;.fieldAccess,JNI::FromReflectedField)<SUB>2837</SUB>> ]
-"13808" [label = <(&lt;operator&gt;.fieldAccess,JNI::ToReflectedMethod)<SUB>2838</SUB>> ]
-"13811" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetSuperclass)<SUB>2839</SUB>> ]
-"13814" [label = <(&lt;operator&gt;.fieldAccess,JNI::IsAssignableFrom)<SUB>2840</SUB>> ]
-"13817" [label = <(&lt;operator&gt;.fieldAccess,JNI::ToReflectedField)<SUB>2841</SUB>> ]
-"13820" [label = <(&lt;operator&gt;.fieldAccess,JNI::Throw)<SUB>2842</SUB>> ]
-"13823" [label = <(&lt;operator&gt;.fieldAccess,JNI::ThrowNew)<SUB>2843</SUB>> ]
-"13826" [label = <(&lt;operator&gt;.fieldAccess,JNI::ExceptionOccurred)<SUB>2844</SUB>> ]
-"13829" [label = <(&lt;operator&gt;.fieldAccess,JNI::ExceptionDescribe)<SUB>2845</SUB>> ]
-"13832" [label = <(&lt;operator&gt;.fieldAccess,JNI::ExceptionClear)<SUB>2846</SUB>> ]
-"13835" [label = <(&lt;operator&gt;.fieldAccess,JNI::FatalError)<SUB>2847</SUB>> ]
-"13838" [label = <(&lt;operator&gt;.fieldAccess,JNI::PushLocalFrame)<SUB>2848</SUB>> ]
-"13841" [label = <(&lt;operator&gt;.fieldAccess,JNI::PopLocalFrame)<SUB>2849</SUB>> ]
-"13844" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewGlobalRef)<SUB>2850</SUB>> ]
-"13847" [label = <(&lt;operator&gt;.fieldAccess,JNI::DeleteGlobalRef)<SUB>2851</SUB>> ]
-"13850" [label = <(&lt;operator&gt;.fieldAccess,JNI::DeleteLocalRef)<SUB>2852</SUB>> ]
-"13853" [label = <(&lt;operator&gt;.fieldAccess,JNI::IsSameObject)<SUB>2853</SUB>> ]
-"13856" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewLocalRef)<SUB>2854</SUB>> ]
-"13859" [label = <(&lt;operator&gt;.fieldAccess,JNI::EnsureLocalCapacity)<SUB>2855</SUB>> ]
-"13862" [label = <(&lt;operator&gt;.fieldAccess,JNI::AllocObject)<SUB>2856</SUB>> ]
-"13865" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewObject)<SUB>2857</SUB>> ]
-"13868" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewObjectV)<SUB>2858</SUB>> ]
-"13871" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewObjectA)<SUB>2859</SUB>> ]
-"13874" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetObjectClass)<SUB>2860</SUB>> ]
-"13877" [label = <(&lt;operator&gt;.fieldAccess,JNI::IsInstanceOf)<SUB>2861</SUB>> ]
-"13880" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetMethodID)<SUB>2862</SUB>> ]
-"13883" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallObjectMethod)<SUB>2863</SUB>> ]
-"13886" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallObjectMethodV)<SUB>2864</SUB>> ]
-"13889" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallObjectMethodA)<SUB>2865</SUB>> ]
-"13892" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallBooleanMethod)<SUB>2866</SUB>> ]
-"13895" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallBooleanMethodV)<SUB>2867</SUB>> ]
-"13898" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallBooleanMethodA)<SUB>2868</SUB>> ]
-"13901" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallByteMethod)<SUB>2869</SUB>> ]
-"13904" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallByteMethodV)<SUB>2870</SUB>> ]
-"13907" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallByteMethodA)<SUB>2871</SUB>> ]
-"13910" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallCharMethod)<SUB>2872</SUB>> ]
-"13913" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallCharMethodV)<SUB>2873</SUB>> ]
-"13916" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallCharMethodA)<SUB>2874</SUB>> ]
-"13919" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallShortMethod)<SUB>2875</SUB>> ]
-"13922" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallShortMethodV)<SUB>2876</SUB>> ]
-"13925" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallShortMethodA)<SUB>2877</SUB>> ]
-"13928" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallIntMethod)<SUB>2878</SUB>> ]
-"13931" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallIntMethodV)<SUB>2879</SUB>> ]
-"13934" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallIntMethodA)<SUB>2880</SUB>> ]
-"13937" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallLongMethod)<SUB>2881</SUB>> ]
-"13940" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallLongMethodV)<SUB>2882</SUB>> ]
-"13943" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallLongMethodA)<SUB>2883</SUB>> ]
-"13946" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallFloatMethod)<SUB>2884</SUB>> ]
-"13949" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallFloatMethodV)<SUB>2885</SUB>> ]
-"13952" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallFloatMethodA)<SUB>2886</SUB>> ]
-"13955" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallDoubleMethod)<SUB>2887</SUB>> ]
-"13958" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallDoubleMethodV)<SUB>2888</SUB>> ]
-"13961" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallDoubleMethodA)<SUB>2889</SUB>> ]
-"13964" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallVoidMethod)<SUB>2890</SUB>> ]
-"13967" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallVoidMethodV)<SUB>2891</SUB>> ]
-"13970" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallVoidMethodA)<SUB>2892</SUB>> ]
-"13973" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualObjectMethod)<SUB>2893</SUB>> ]
-"13976" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualObjectMethodV)<SUB>2894</SUB>> ]
-"13979" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualObjectMethodA)<SUB>2895</SUB>> ]
-"13982" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualBooleanMethod)<SUB>2896</SUB>> ]
-"13985" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualBooleanMethodV)<SUB>2897</SUB>> ]
-"13988" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualBooleanMethodA)<SUB>2898</SUB>> ]
-"13991" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualByteMethod)<SUB>2899</SUB>> ]
-"13994" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualByteMethodV)<SUB>2900</SUB>> ]
-"13997" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualByteMethodA)<SUB>2901</SUB>> ]
-"14000" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualCharMethod)<SUB>2902</SUB>> ]
-"14003" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualCharMethodV)<SUB>2903</SUB>> ]
-"14006" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualCharMethodA)<SUB>2904</SUB>> ]
-"14009" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualShortMethod)<SUB>2905</SUB>> ]
-"14012" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualShortMethodV)<SUB>2906</SUB>> ]
-"14015" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualShortMethodA)<SUB>2907</SUB>> ]
-"14018" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualIntMethod)<SUB>2908</SUB>> ]
-"14021" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualIntMethodV)<SUB>2909</SUB>> ]
-"14024" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualIntMethodA)<SUB>2910</SUB>> ]
-"14027" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualLongMethod)<SUB>2911</SUB>> ]
-"14030" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualLongMethodV)<SUB>2912</SUB>> ]
-"14033" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualLongMethodA)<SUB>2913</SUB>> ]
-"14036" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualFloatMethod)<SUB>2914</SUB>> ]
-"14039" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualFloatMethodV)<SUB>2915</SUB>> ]
-"14042" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualFloatMethodA)<SUB>2916</SUB>> ]
-"14045" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualDoubleMethod)<SUB>2917</SUB>> ]
-"14048" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualDoubleMethodV)<SUB>2918</SUB>> ]
-"14051" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualDoubleMethodA)<SUB>2919</SUB>> ]
-"14054" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualVoidMethod)<SUB>2920</SUB>> ]
-"14057" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualVoidMethodV)<SUB>2921</SUB>> ]
-"14060" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualVoidMethodA)<SUB>2922</SUB>> ]
-"14063" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetFieldID)<SUB>2923</SUB>> ]
-"14066" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetObjectField)<SUB>2924</SUB>> ]
-"14069" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetBooleanField)<SUB>2925</SUB>> ]
-"14072" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetByteField)<SUB>2926</SUB>> ]
-"14075" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetCharField)<SUB>2927</SUB>> ]
-"14078" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetShortField)<SUB>2928</SUB>> ]
-"14081" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetIntField)<SUB>2929</SUB>> ]
-"14084" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetLongField)<SUB>2930</SUB>> ]
-"14087" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetFloatField)<SUB>2931</SUB>> ]
-"14090" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetDoubleField)<SUB>2932</SUB>> ]
-"14093" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetObjectField)<SUB>2933</SUB>> ]
-"14096" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetBooleanField)<SUB>2934</SUB>> ]
-"14099" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetByteField)<SUB>2935</SUB>> ]
-"14102" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetCharField)<SUB>2936</SUB>> ]
-"14105" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetShortField)<SUB>2937</SUB>> ]
-"14108" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetIntField)<SUB>2938</SUB>> ]
-"14111" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetLongField)<SUB>2939</SUB>> ]
-"14114" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetFloatField)<SUB>2940</SUB>> ]
-"14117" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetDoubleField)<SUB>2941</SUB>> ]
-"14120" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStaticMethodID)<SUB>2942</SUB>> ]
-"14123" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticObjectMethod)<SUB>2943</SUB>> ]
-"14126" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticObjectMethodV)<SUB>2944</SUB>> ]
-"14129" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticObjectMethodA)<SUB>2945</SUB>> ]
-"14132" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticBooleanMethod)<SUB>2946</SUB>> ]
-"14135" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticBooleanMethodV)<SUB>2947</SUB>> ]
-"14138" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticBooleanMethodA)<SUB>2948</SUB>> ]
-"14141" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticByteMethod)<SUB>2949</SUB>> ]
-"14144" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticByteMethodV)<SUB>2950</SUB>> ]
-"14147" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticByteMethodA)<SUB>2951</SUB>> ]
-"14150" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticCharMethod)<SUB>2952</SUB>> ]
-"14153" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticCharMethodV)<SUB>2953</SUB>> ]
-"14156" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticCharMethodA)<SUB>2954</SUB>> ]
-"14159" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticShortMethod)<SUB>2955</SUB>> ]
-"14162" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticShortMethodV)<SUB>2956</SUB>> ]
-"14165" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticShortMethodA)<SUB>2957</SUB>> ]
-"14168" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticIntMethod)<SUB>2958</SUB>> ]
-"14171" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticIntMethodV)<SUB>2959</SUB>> ]
-"14174" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticIntMethodA)<SUB>2960</SUB>> ]
-"14177" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticLongMethod)<SUB>2961</SUB>> ]
-"14180" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticLongMethodV)<SUB>2962</SUB>> ]
-"14183" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticLongMethodA)<SUB>2963</SUB>> ]
-"14186" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticFloatMethod)<SUB>2964</SUB>> ]
-"14189" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticFloatMethodV)<SUB>2965</SUB>> ]
-"14192" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticFloatMethodA)<SUB>2966</SUB>> ]
-"14195" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticDoubleMethod)<SUB>2967</SUB>> ]
-"14198" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticDoubleMethodV)<SUB>2968</SUB>> ]
-"14201" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticDoubleMethodA)<SUB>2969</SUB>> ]
-"14204" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticVoidMethod)<SUB>2970</SUB>> ]
-"14207" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticVoidMethodV)<SUB>2971</SUB>> ]
-"14210" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticVoidMethodA)<SUB>2972</SUB>> ]
-"14213" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStaticFieldID)<SUB>2973</SUB>> ]
-"14216" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStaticObjectField)<SUB>2974</SUB>> ]
-"14219" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStaticBooleanField)<SUB>2975</SUB>> ]
-"14222" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStaticByteField)<SUB>2976</SUB>> ]
-"14225" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStaticCharField)<SUB>2977</SUB>> ]
-"14228" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStaticShortField)<SUB>2978</SUB>> ]
-"14231" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStaticIntField)<SUB>2979</SUB>> ]
-"14234" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStaticLongField)<SUB>2980</SUB>> ]
-"14237" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStaticFloatField)<SUB>2981</SUB>> ]
-"14240" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStaticDoubleField)<SUB>2982</SUB>> ]
-"14243" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetStaticObjectField)<SUB>2983</SUB>> ]
-"14246" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetStaticBooleanField)<SUB>2984</SUB>> ]
-"14249" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetStaticByteField)<SUB>2985</SUB>> ]
-"14252" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetStaticCharField)<SUB>2986</SUB>> ]
-"14255" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetStaticShortField)<SUB>2987</SUB>> ]
-"14258" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetStaticIntField)<SUB>2988</SUB>> ]
-"14261" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetStaticLongField)<SUB>2989</SUB>> ]
-"14264" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetStaticFloatField)<SUB>2990</SUB>> ]
-"14267" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetStaticDoubleField)<SUB>2991</SUB>> ]
-"14270" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewString)<SUB>2992</SUB>> ]
-"14273" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStringLength)<SUB>2993</SUB>> ]
-"14276" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStringChars)<SUB>2994</SUB>> ]
-"14279" [label = <(&lt;operator&gt;.fieldAccess,JNI::ReleaseStringChars)<SUB>2995</SUB>> ]
-"14282" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewStringUTF)<SUB>2996</SUB>> ]
-"14285" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStringUTFLength)<SUB>2997</SUB>> ]
-"14288" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStringUTFChars)<SUB>2998</SUB>> ]
-"14291" [label = <(&lt;operator&gt;.fieldAccess,JNI::ReleaseStringUTFChars)<SUB>2999</SUB>> ]
-"14294" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetArrayLength)<SUB>3000</SUB>> ]
-"14297" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewObjectArray)<SUB>3001</SUB>> ]
-"14300" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetObjectArrayElement)<SUB>3002</SUB>> ]
-"14303" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetObjectArrayElement)<SUB>3003</SUB>> ]
-"14306" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewBooleanArray)<SUB>3004</SUB>> ]
-"14309" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewByteArray)<SUB>3005</SUB>> ]
-"14312" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewCharArray)<SUB>3006</SUB>> ]
-"14315" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewShortArray)<SUB>3007</SUB>> ]
-"14318" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewIntArray)<SUB>3008</SUB>> ]
-"14321" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewLongArray)<SUB>3009</SUB>> ]
-"14324" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewFloatArray)<SUB>3010</SUB>> ]
-"14327" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewDoubleArray)<SUB>3011</SUB>> ]
-"14330" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetBooleanArrayElements)<SUB>3012</SUB>> ]
-"14333" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetByteArrayElements)<SUB>3013</SUB>> ]
-"14336" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetCharArrayElements)<SUB>3014</SUB>> ]
-"14339" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetShortArrayElements)<SUB>3015</SUB>> ]
-"14342" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetIntArrayElements)<SUB>3016</SUB>> ]
-"14345" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetLongArrayElements)<SUB>3017</SUB>> ]
-"14348" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetFloatArrayElements)<SUB>3018</SUB>> ]
-"14351" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetDoubleArrayElements)<SUB>3019</SUB>> ]
-"14354" [label = <(&lt;operator&gt;.fieldAccess,JNI::ReleaseBooleanArrayElements)<SUB>3020</SUB>> ]
-"14357" [label = <(&lt;operator&gt;.fieldAccess,JNI::ReleaseByteArrayElements)<SUB>3021</SUB>> ]
-"14360" [label = <(&lt;operator&gt;.fieldAccess,JNI::ReleaseCharArrayElements)<SUB>3022</SUB>> ]
-"14363" [label = <(&lt;operator&gt;.fieldAccess,JNI::ReleaseShortArrayElements)<SUB>3023</SUB>> ]
-"14366" [label = <(&lt;operator&gt;.fieldAccess,JNI::ReleaseIntArrayElements)<SUB>3024</SUB>> ]
-"14369" [label = <(&lt;operator&gt;.fieldAccess,JNI::ReleaseLongArrayElements)<SUB>3025</SUB>> ]
-"14372" [label = <(&lt;operator&gt;.fieldAccess,JNI::ReleaseFloatArrayElements)<SUB>3026</SUB>> ]
-"14375" [label = <(&lt;operator&gt;.fieldAccess,JNI::ReleaseDoubleArrayElements)<SUB>3027</SUB>> ]
-"14378" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetBooleanArrayRegion)<SUB>3028</SUB>> ]
-"14381" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetByteArrayRegion)<SUB>3029</SUB>> ]
-"14384" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetCharArrayRegion)<SUB>3030</SUB>> ]
-"14387" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetShortArrayRegion)<SUB>3031</SUB>> ]
-"14390" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetIntArrayRegion)<SUB>3032</SUB>> ]
-"14393" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetLongArrayRegion)<SUB>3033</SUB>> ]
-"14396" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetFloatArrayRegion)<SUB>3034</SUB>> ]
-"14399" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetDoubleArrayRegion)<SUB>3035</SUB>> ]
-"14402" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetBooleanArrayRegion)<SUB>3036</SUB>> ]
-"14405" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetByteArrayRegion)<SUB>3037</SUB>> ]
-"14408" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetCharArrayRegion)<SUB>3038</SUB>> ]
-"14411" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetShortArrayRegion)<SUB>3039</SUB>> ]
-"14414" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetIntArrayRegion)<SUB>3040</SUB>> ]
-"14417" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetLongArrayRegion)<SUB>3041</SUB>> ]
-"14420" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetFloatArrayRegion)<SUB>3042</SUB>> ]
-"14423" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetDoubleArrayRegion)<SUB>3043</SUB>> ]
-"14426" [label = <(&lt;operator&gt;.fieldAccess,JNI::RegisterNatives)<SUB>3044</SUB>> ]
-"14429" [label = <(&lt;operator&gt;.fieldAccess,JNI::UnregisterNatives)<SUB>3045</SUB>> ]
-"14432" [label = <(&lt;operator&gt;.fieldAccess,JNI::MonitorEnter)<SUB>3046</SUB>> ]
-"14435" [label = <(&lt;operator&gt;.fieldAccess,JNI::MonitorExit)<SUB>3047</SUB>> ]
-"14438" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetJavaVM)<SUB>3048</SUB>> ]
-"14441" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStringRegion)<SUB>3049</SUB>> ]
-"14444" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStringUTFRegion)<SUB>3050</SUB>> ]
-"14447" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetPrimitiveArrayCritical)<SUB>3051</SUB>> ]
-"14450" [label = <(&lt;operator&gt;.fieldAccess,JNI::ReleasePrimitiveArrayCritical)<SUB>3052</SUB>> ]
-"14453" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStringCritical)<SUB>3053</SUB>> ]
-"14456" [label = <(&lt;operator&gt;.fieldAccess,JNI::ReleaseStringCritical)<SUB>3054</SUB>> ]
-"14459" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewWeakGlobalRef)<SUB>3055</SUB>> ]
-"14462" [label = <(&lt;operator&gt;.fieldAccess,JNI::DeleteWeakGlobalRef)<SUB>3056</SUB>> ]
-"14465" [label = <(&lt;operator&gt;.fieldAccess,JNI::ExceptionCheck)<SUB>3057</SUB>> ]
-"14468" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewDirectByteBuffer)<SUB>3058</SUB>> ]
-"14471" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetDirectBufferAddress)<SUB>3059</SUB>> ]
-"14474" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetDirectBufferCapacity)<SUB>3060</SUB>> ]
-"14477" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetObjectRefType)<SUB>3061</SUB>> ]
-"246" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetInstrumentation)<SUB>184</SUB>> ]
-"267" [label = <(Runtime::Current,Runtime::Current())<SUB>211</SUB>> ]
-"271" [label = <(FIELD_IDENTIFIER,GetInstrumentation,GetInstrumentation)<SUB>211</SUB>> ]
-"393" [label = <(FIELD_IDENTIFIER,NewHandle,NewHandle)<SUB>316</SUB>> ]
-"419" [label = <(GetClassLinker,Runtime::Current()-&gt;GetClassLinker())<SUB>331</SUB>> ]
-"426" [label = <(FIELD_IDENTIFIER,GetImagePointerSize,GetImagePointerSize)<SUB>331</SUB>> ]
-"447" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>360</SUB>> ]
-"450" [label = <(&lt;operator&gt;.fieldAccess,mirror::ClassLoader)<SUB>360</SUB>> ]
-"454" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetSystemClassLoader)<SUB>360</SUB>> ]
-"481" [label = <(FIELD_IDENTIFIER,NewHandle,NewHandle)<SUB>382</SUB>> ]
-"483" [label = <(Self,soa.Self())<SUB>382</SUB>> ]
-"487" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(jni_class))<SUB>382</SUB>> ]
-"507" [label = <(Runtime::Current,Runtime::Current())<SUB>388</SUB>> ]
-"511" [label = <(FIELD_IDENTIFIER,GetClassLinker,GetClassLinker)<SUB>388</SUB>> ]
-"13549" [label = <(Runtime::Current,Runtime::Current())<SUB>2752</SUB>> ]
-"13553" [label = <(FIELD_IDENTIFIER,GetHeap,GetHeap)<SUB>2752</SUB>> ]
-"13565" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetLength)<SUB>2754</SUB>> ]
-"13795" [label = <(FIELD_IDENTIFIER,GetVersion,GetVersion)<SUB>2833</SUB>> ]
-"13798" [label = <(FIELD_IDENTIFIER,DefineClass,DefineClass)<SUB>2834</SUB>> ]
-"13801" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>2835</SUB>> ]
-"13804" [label = <(FIELD_IDENTIFIER,FromReflectedMethod,FromReflectedMethod)<SUB>2836</SUB>> ]
-"13807" [label = <(FIELD_IDENTIFIER,FromReflectedField,FromReflectedField)<SUB>2837</SUB>> ]
-"13810" [label = <(FIELD_IDENTIFIER,ToReflectedMethod,ToReflectedMethod)<SUB>2838</SUB>> ]
-"13813" [label = <(FIELD_IDENTIFIER,GetSuperclass,GetSuperclass)<SUB>2839</SUB>> ]
-"13816" [label = <(FIELD_IDENTIFIER,IsAssignableFrom,IsAssignableFrom)<SUB>2840</SUB>> ]
-"13819" [label = <(FIELD_IDENTIFIER,ToReflectedField,ToReflectedField)<SUB>2841</SUB>> ]
-"13822" [label = <(FIELD_IDENTIFIER,Throw,Throw)<SUB>2842</SUB>> ]
-"13825" [label = <(FIELD_IDENTIFIER,ThrowNew,ThrowNew)<SUB>2843</SUB>> ]
-"13828" [label = <(FIELD_IDENTIFIER,ExceptionOccurred,ExceptionOccurred)<SUB>2844</SUB>> ]
-"13831" [label = <(FIELD_IDENTIFIER,ExceptionDescribe,ExceptionDescribe)<SUB>2845</SUB>> ]
-"13834" [label = <(FIELD_IDENTIFIER,ExceptionClear,ExceptionClear)<SUB>2846</SUB>> ]
-"13837" [label = <(FIELD_IDENTIFIER,FatalError,FatalError)<SUB>2847</SUB>> ]
-"13840" [label = <(FIELD_IDENTIFIER,PushLocalFrame,PushLocalFrame)<SUB>2848</SUB>> ]
-"13843" [label = <(FIELD_IDENTIFIER,PopLocalFrame,PopLocalFrame)<SUB>2849</SUB>> ]
-"13846" [label = <(FIELD_IDENTIFIER,NewGlobalRef,NewGlobalRef)<SUB>2850</SUB>> ]
-"13849" [label = <(FIELD_IDENTIFIER,DeleteGlobalRef,DeleteGlobalRef)<SUB>2851</SUB>> ]
-"13852" [label = <(FIELD_IDENTIFIER,DeleteLocalRef,DeleteLocalRef)<SUB>2852</SUB>> ]
-"13855" [label = <(FIELD_IDENTIFIER,IsSameObject,IsSameObject)<SUB>2853</SUB>> ]
-"13858" [label = <(FIELD_IDENTIFIER,NewLocalRef,NewLocalRef)<SUB>2854</SUB>> ]
-"13861" [label = <(FIELD_IDENTIFIER,EnsureLocalCapacity,EnsureLocalCapacity)<SUB>2855</SUB>> ]
-"13864" [label = <(FIELD_IDENTIFIER,AllocObject,AllocObject)<SUB>2856</SUB>> ]
-"13867" [label = <(FIELD_IDENTIFIER,NewObject,NewObject)<SUB>2857</SUB>> ]
-"13870" [label = <(FIELD_IDENTIFIER,NewObjectV,NewObjectV)<SUB>2858</SUB>> ]
-"13873" [label = <(FIELD_IDENTIFIER,NewObjectA,NewObjectA)<SUB>2859</SUB>> ]
-"13876" [label = <(FIELD_IDENTIFIER,GetObjectClass,GetObjectClass)<SUB>2860</SUB>> ]
-"13879" [label = <(FIELD_IDENTIFIER,IsInstanceOf,IsInstanceOf)<SUB>2861</SUB>> ]
-"13882" [label = <(FIELD_IDENTIFIER,GetMethodID,GetMethodID)<SUB>2862</SUB>> ]
-"13885" [label = <(FIELD_IDENTIFIER,CallObjectMethod,CallObjectMethod)<SUB>2863</SUB>> ]
-"13888" [label = <(FIELD_IDENTIFIER,CallObjectMethodV,CallObjectMethodV)<SUB>2864</SUB>> ]
-"13891" [label = <(FIELD_IDENTIFIER,CallObjectMethodA,CallObjectMethodA)<SUB>2865</SUB>> ]
-"13894" [label = <(FIELD_IDENTIFIER,CallBooleanMethod,CallBooleanMethod)<SUB>2866</SUB>> ]
-"13897" [label = <(FIELD_IDENTIFIER,CallBooleanMethodV,CallBooleanMethodV)<SUB>2867</SUB>> ]
-"13900" [label = <(FIELD_IDENTIFIER,CallBooleanMethodA,CallBooleanMethodA)<SUB>2868</SUB>> ]
-"13903" [label = <(FIELD_IDENTIFIER,CallByteMethod,CallByteMethod)<SUB>2869</SUB>> ]
-"13906" [label = <(FIELD_IDENTIFIER,CallByteMethodV,CallByteMethodV)<SUB>2870</SUB>> ]
-"13909" [label = <(FIELD_IDENTIFIER,CallByteMethodA,CallByteMethodA)<SUB>2871</SUB>> ]
-"13912" [label = <(FIELD_IDENTIFIER,CallCharMethod,CallCharMethod)<SUB>2872</SUB>> ]
-"13915" [label = <(FIELD_IDENTIFIER,CallCharMethodV,CallCharMethodV)<SUB>2873</SUB>> ]
-"13918" [label = <(FIELD_IDENTIFIER,CallCharMethodA,CallCharMethodA)<SUB>2874</SUB>> ]
-"13921" [label = <(FIELD_IDENTIFIER,CallShortMethod,CallShortMethod)<SUB>2875</SUB>> ]
-"13924" [label = <(FIELD_IDENTIFIER,CallShortMethodV,CallShortMethodV)<SUB>2876</SUB>> ]
-"13927" [label = <(FIELD_IDENTIFIER,CallShortMethodA,CallShortMethodA)<SUB>2877</SUB>> ]
-"13930" [label = <(FIELD_IDENTIFIER,CallIntMethod,CallIntMethod)<SUB>2878</SUB>> ]
-"13933" [label = <(FIELD_IDENTIFIER,CallIntMethodV,CallIntMethodV)<SUB>2879</SUB>> ]
-"13936" [label = <(FIELD_IDENTIFIER,CallIntMethodA,CallIntMethodA)<SUB>2880</SUB>> ]
-"13939" [label = <(FIELD_IDENTIFIER,CallLongMethod,CallLongMethod)<SUB>2881</SUB>> ]
-"13942" [label = <(FIELD_IDENTIFIER,CallLongMethodV,CallLongMethodV)<SUB>2882</SUB>> ]
-"13945" [label = <(FIELD_IDENTIFIER,CallLongMethodA,CallLongMethodA)<SUB>2883</SUB>> ]
-"13948" [label = <(FIELD_IDENTIFIER,CallFloatMethod,CallFloatMethod)<SUB>2884</SUB>> ]
-"13951" [label = <(FIELD_IDENTIFIER,CallFloatMethodV,CallFloatMethodV)<SUB>2885</SUB>> ]
-"13954" [label = <(FIELD_IDENTIFIER,CallFloatMethodA,CallFloatMethodA)<SUB>2886</SUB>> ]
-"13957" [label = <(FIELD_IDENTIFIER,CallDoubleMethod,CallDoubleMethod)<SUB>2887</SUB>> ]
-"13960" [label = <(FIELD_IDENTIFIER,CallDoubleMethodV,CallDoubleMethodV)<SUB>2888</SUB>> ]
-"13963" [label = <(FIELD_IDENTIFIER,CallDoubleMethodA,CallDoubleMethodA)<SUB>2889</SUB>> ]
-"13966" [label = <(FIELD_IDENTIFIER,CallVoidMethod,CallVoidMethod)<SUB>2890</SUB>> ]
-"13969" [label = <(FIELD_IDENTIFIER,CallVoidMethodV,CallVoidMethodV)<SUB>2891</SUB>> ]
-"13972" [label = <(FIELD_IDENTIFIER,CallVoidMethodA,CallVoidMethodA)<SUB>2892</SUB>> ]
-"13975" [label = <(FIELD_IDENTIFIER,CallNonvirtualObjectMethod,CallNonvirtualObjectMethod)<SUB>2893</SUB>> ]
-"13978" [label = <(FIELD_IDENTIFIER,CallNonvirtualObjectMethodV,CallNonvirtualObjectMethodV)<SUB>2894</SUB>> ]
-"13981" [label = <(FIELD_IDENTIFIER,CallNonvirtualObjectMethodA,CallNonvirtualObjectMethodA)<SUB>2895</SUB>> ]
-"13984" [label = <(FIELD_IDENTIFIER,CallNonvirtualBooleanMethod,CallNonvirtualBooleanMethod)<SUB>2896</SUB>> ]
-"13987" [label = <(FIELD_IDENTIFIER,CallNonvirtualBooleanMethodV,CallNonvirtualBooleanMethodV)<SUB>2897</SUB>> ]
-"13990" [label = <(FIELD_IDENTIFIER,CallNonvirtualBooleanMethodA,CallNonvirtualBooleanMethodA)<SUB>2898</SUB>> ]
-"13993" [label = <(FIELD_IDENTIFIER,CallNonvirtualByteMethod,CallNonvirtualByteMethod)<SUB>2899</SUB>> ]
-"13996" [label = <(FIELD_IDENTIFIER,CallNonvirtualByteMethodV,CallNonvirtualByteMethodV)<SUB>2900</SUB>> ]
-"13999" [label = <(FIELD_IDENTIFIER,CallNonvirtualByteMethodA,CallNonvirtualByteMethodA)<SUB>2901</SUB>> ]
-"14002" [label = <(FIELD_IDENTIFIER,CallNonvirtualCharMethod,CallNonvirtualCharMethod)<SUB>2902</SUB>> ]
-"14005" [label = <(FIELD_IDENTIFIER,CallNonvirtualCharMethodV,CallNonvirtualCharMethodV)<SUB>2903</SUB>> ]
-"14008" [label = <(FIELD_IDENTIFIER,CallNonvirtualCharMethodA,CallNonvirtualCharMethodA)<SUB>2904</SUB>> ]
-"14011" [label = <(FIELD_IDENTIFIER,CallNonvirtualShortMethod,CallNonvirtualShortMethod)<SUB>2905</SUB>> ]
-"14014" [label = <(FIELD_IDENTIFIER,CallNonvirtualShortMethodV,CallNonvirtualShortMethodV)<SUB>2906</SUB>> ]
-"14017" [label = <(FIELD_IDENTIFIER,CallNonvirtualShortMethodA,CallNonvirtualShortMethodA)<SUB>2907</SUB>> ]
-"14020" [label = <(FIELD_IDENTIFIER,CallNonvirtualIntMethod,CallNonvirtualIntMethod)<SUB>2908</SUB>> ]
-"14023" [label = <(FIELD_IDENTIFIER,CallNonvirtualIntMethodV,CallNonvirtualIntMethodV)<SUB>2909</SUB>> ]
-"14026" [label = <(FIELD_IDENTIFIER,CallNonvirtualIntMethodA,CallNonvirtualIntMethodA)<SUB>2910</SUB>> ]
-"14029" [label = <(FIELD_IDENTIFIER,CallNonvirtualLongMethod,CallNonvirtualLongMethod)<SUB>2911</SUB>> ]
-"14032" [label = <(FIELD_IDENTIFIER,CallNonvirtualLongMethodV,CallNonvirtualLongMethodV)<SUB>2912</SUB>> ]
-"14035" [label = <(FIELD_IDENTIFIER,CallNonvirtualLongMethodA,CallNonvirtualLongMethodA)<SUB>2913</SUB>> ]
-"14038" [label = <(FIELD_IDENTIFIER,CallNonvirtualFloatMethod,CallNonvirtualFloatMethod)<SUB>2914</SUB>> ]
-"14041" [label = <(FIELD_IDENTIFIER,CallNonvirtualFloatMethodV,CallNonvirtualFloatMethodV)<SUB>2915</SUB>> ]
-"14044" [label = <(FIELD_IDENTIFIER,CallNonvirtualFloatMethodA,CallNonvirtualFloatMethodA)<SUB>2916</SUB>> ]
-"14047" [label = <(FIELD_IDENTIFIER,CallNonvirtualDoubleMethod,CallNonvirtualDoubleMethod)<SUB>2917</SUB>> ]
-"14050" [label = <(FIELD_IDENTIFIER,CallNonvirtualDoubleMethodV,CallNonvirtualDoubleMethodV)<SUB>2918</SUB>> ]
-"14053" [label = <(FIELD_IDENTIFIER,CallNonvirtualDoubleMethodA,CallNonvirtualDoubleMethodA)<SUB>2919</SUB>> ]
-"14056" [label = <(FIELD_IDENTIFIER,CallNonvirtualVoidMethod,CallNonvirtualVoidMethod)<SUB>2920</SUB>> ]
-"14059" [label = <(FIELD_IDENTIFIER,CallNonvirtualVoidMethodV,CallNonvirtualVoidMethodV)<SUB>2921</SUB>> ]
-"14062" [label = <(FIELD_IDENTIFIER,CallNonvirtualVoidMethodA,CallNonvirtualVoidMethodA)<SUB>2922</SUB>> ]
-"14065" [label = <(FIELD_IDENTIFIER,GetFieldID,GetFieldID)<SUB>2923</SUB>> ]
-"14068" [label = <(FIELD_IDENTIFIER,GetObjectField,GetObjectField)<SUB>2924</SUB>> ]
-"14071" [label = <(FIELD_IDENTIFIER,GetBooleanField,GetBooleanField)<SUB>2925</SUB>> ]
-"14074" [label = <(FIELD_IDENTIFIER,GetByteField,GetByteField)<SUB>2926</SUB>> ]
-"14077" [label = <(FIELD_IDENTIFIER,GetCharField,GetCharField)<SUB>2927</SUB>> ]
-"14080" [label = <(FIELD_IDENTIFIER,GetShortField,GetShortField)<SUB>2928</SUB>> ]
-"14083" [label = <(FIELD_IDENTIFIER,GetIntField,GetIntField)<SUB>2929</SUB>> ]
-"14086" [label = <(FIELD_IDENTIFIER,GetLongField,GetLongField)<SUB>2930</SUB>> ]
-"14089" [label = <(FIELD_IDENTIFIER,GetFloatField,GetFloatField)<SUB>2931</SUB>> ]
-"14092" [label = <(FIELD_IDENTIFIER,GetDoubleField,GetDoubleField)<SUB>2932</SUB>> ]
-"14095" [label = <(FIELD_IDENTIFIER,SetObjectField,SetObjectField)<SUB>2933</SUB>> ]
-"14098" [label = <(FIELD_IDENTIFIER,SetBooleanField,SetBooleanField)<SUB>2934</SUB>> ]
-"14101" [label = <(FIELD_IDENTIFIER,SetByteField,SetByteField)<SUB>2935</SUB>> ]
-"14104" [label = <(FIELD_IDENTIFIER,SetCharField,SetCharField)<SUB>2936</SUB>> ]
-"14107" [label = <(FIELD_IDENTIFIER,SetShortField,SetShortField)<SUB>2937</SUB>> ]
-"14110" [label = <(FIELD_IDENTIFIER,SetIntField,SetIntField)<SUB>2938</SUB>> ]
-"14113" [label = <(FIELD_IDENTIFIER,SetLongField,SetLongField)<SUB>2939</SUB>> ]
-"14116" [label = <(FIELD_IDENTIFIER,SetFloatField,SetFloatField)<SUB>2940</SUB>> ]
-"14119" [label = <(FIELD_IDENTIFIER,SetDoubleField,SetDoubleField)<SUB>2941</SUB>> ]
-"14122" [label = <(FIELD_IDENTIFIER,GetStaticMethodID,GetStaticMethodID)<SUB>2942</SUB>> ]
-"14125" [label = <(FIELD_IDENTIFIER,CallStaticObjectMethod,CallStaticObjectMethod)<SUB>2943</SUB>> ]
-"14128" [label = <(FIELD_IDENTIFIER,CallStaticObjectMethodV,CallStaticObjectMethodV)<SUB>2944</SUB>> ]
-"14131" [label = <(FIELD_IDENTIFIER,CallStaticObjectMethodA,CallStaticObjectMethodA)<SUB>2945</SUB>> ]
-"14134" [label = <(FIELD_IDENTIFIER,CallStaticBooleanMethod,CallStaticBooleanMethod)<SUB>2946</SUB>> ]
-"14137" [label = <(FIELD_IDENTIFIER,CallStaticBooleanMethodV,CallStaticBooleanMethodV)<SUB>2947</SUB>> ]
-"14140" [label = <(FIELD_IDENTIFIER,CallStaticBooleanMethodA,CallStaticBooleanMethodA)<SUB>2948</SUB>> ]
-"14143" [label = <(FIELD_IDENTIFIER,CallStaticByteMethod,CallStaticByteMethod)<SUB>2949</SUB>> ]
-"14146" [label = <(FIELD_IDENTIFIER,CallStaticByteMethodV,CallStaticByteMethodV)<SUB>2950</SUB>> ]
-"14149" [label = <(FIELD_IDENTIFIER,CallStaticByteMethodA,CallStaticByteMethodA)<SUB>2951</SUB>> ]
-"14152" [label = <(FIELD_IDENTIFIER,CallStaticCharMethod,CallStaticCharMethod)<SUB>2952</SUB>> ]
-"14155" [label = <(FIELD_IDENTIFIER,CallStaticCharMethodV,CallStaticCharMethodV)<SUB>2953</SUB>> ]
-"14158" [label = <(FIELD_IDENTIFIER,CallStaticCharMethodA,CallStaticCharMethodA)<SUB>2954</SUB>> ]
-"14161" [label = <(FIELD_IDENTIFIER,CallStaticShortMethod,CallStaticShortMethod)<SUB>2955</SUB>> ]
-"14164" [label = <(FIELD_IDENTIFIER,CallStaticShortMethodV,CallStaticShortMethodV)<SUB>2956</SUB>> ]
-"14167" [label = <(FIELD_IDENTIFIER,CallStaticShortMethodA,CallStaticShortMethodA)<SUB>2957</SUB>> ]
-"14170" [label = <(FIELD_IDENTIFIER,CallStaticIntMethod,CallStaticIntMethod)<SUB>2958</SUB>> ]
-"14173" [label = <(FIELD_IDENTIFIER,CallStaticIntMethodV,CallStaticIntMethodV)<SUB>2959</SUB>> ]
-"14176" [label = <(FIELD_IDENTIFIER,CallStaticIntMethodA,CallStaticIntMethodA)<SUB>2960</SUB>> ]
-"14179" [label = <(FIELD_IDENTIFIER,CallStaticLongMethod,CallStaticLongMethod)<SUB>2961</SUB>> ]
-"14182" [label = <(FIELD_IDENTIFIER,CallStaticLongMethodV,CallStaticLongMethodV)<SUB>2962</SUB>> ]
-"14185" [label = <(FIELD_IDENTIFIER,CallStaticLongMethodA,CallStaticLongMethodA)<SUB>2963</SUB>> ]
-"14188" [label = <(FIELD_IDENTIFIER,CallStaticFloatMethod,CallStaticFloatMethod)<SUB>2964</SUB>> ]
-"14191" [label = <(FIELD_IDENTIFIER,CallStaticFloatMethodV,CallStaticFloatMethodV)<SUB>2965</SUB>> ]
-"14194" [label = <(FIELD_IDENTIFIER,CallStaticFloatMethodA,CallStaticFloatMethodA)<SUB>2966</SUB>> ]
-"14197" [label = <(FIELD_IDENTIFIER,CallStaticDoubleMethod,CallStaticDoubleMethod)<SUB>2967</SUB>> ]
-"14200" [label = <(FIELD_IDENTIFIER,CallStaticDoubleMethodV,CallStaticDoubleMethodV)<SUB>2968</SUB>> ]
-"14203" [label = <(FIELD_IDENTIFIER,CallStaticDoubleMethodA,CallStaticDoubleMethodA)<SUB>2969</SUB>> ]
-"14206" [label = <(FIELD_IDENTIFIER,CallStaticVoidMethod,CallStaticVoidMethod)<SUB>2970</SUB>> ]
-"14209" [label = <(FIELD_IDENTIFIER,CallStaticVoidMethodV,CallStaticVoidMethodV)<SUB>2971</SUB>> ]
-"14212" [label = <(FIELD_IDENTIFIER,CallStaticVoidMethodA,CallStaticVoidMethodA)<SUB>2972</SUB>> ]
-"14215" [label = <(FIELD_IDENTIFIER,GetStaticFieldID,GetStaticFieldID)<SUB>2973</SUB>> ]
-"14218" [label = <(FIELD_IDENTIFIER,GetStaticObjectField,GetStaticObjectField)<SUB>2974</SUB>> ]
-"14221" [label = <(FIELD_IDENTIFIER,GetStaticBooleanField,GetStaticBooleanField)<SUB>2975</SUB>> ]
-"14224" [label = <(FIELD_IDENTIFIER,GetStaticByteField,GetStaticByteField)<SUB>2976</SUB>> ]
-"14227" [label = <(FIELD_IDENTIFIER,GetStaticCharField,GetStaticCharField)<SUB>2977</SUB>> ]
-"14230" [label = <(FIELD_IDENTIFIER,GetStaticShortField,GetStaticShortField)<SUB>2978</SUB>> ]
-"14233" [label = <(FIELD_IDENTIFIER,GetStaticIntField,GetStaticIntField)<SUB>2979</SUB>> ]
-"14236" [label = <(FIELD_IDENTIFIER,GetStaticLongField,GetStaticLongField)<SUB>2980</SUB>> ]
-"14239" [label = <(FIELD_IDENTIFIER,GetStaticFloatField,GetStaticFloatField)<SUB>2981</SUB>> ]
-"14242" [label = <(FIELD_IDENTIFIER,GetStaticDoubleField,GetStaticDoubleField)<SUB>2982</SUB>> ]
-"14245" [label = <(FIELD_IDENTIFIER,SetStaticObjectField,SetStaticObjectField)<SUB>2983</SUB>> ]
-"14248" [label = <(FIELD_IDENTIFIER,SetStaticBooleanField,SetStaticBooleanField)<SUB>2984</SUB>> ]
-"14251" [label = <(FIELD_IDENTIFIER,SetStaticByteField,SetStaticByteField)<SUB>2985</SUB>> ]
-"14254" [label = <(FIELD_IDENTIFIER,SetStaticCharField,SetStaticCharField)<SUB>2986</SUB>> ]
-"14257" [label = <(FIELD_IDENTIFIER,SetStaticShortField,SetStaticShortField)<SUB>2987</SUB>> ]
-"14260" [label = <(FIELD_IDENTIFIER,SetStaticIntField,SetStaticIntField)<SUB>2988</SUB>> ]
-"14263" [label = <(FIELD_IDENTIFIER,SetStaticLongField,SetStaticLongField)<SUB>2989</SUB>> ]
-"14266" [label = <(FIELD_IDENTIFIER,SetStaticFloatField,SetStaticFloatField)<SUB>2990</SUB>> ]
-"14269" [label = <(FIELD_IDENTIFIER,SetStaticDoubleField,SetStaticDoubleField)<SUB>2991</SUB>> ]
-"14272" [label = <(FIELD_IDENTIFIER,NewString,NewString)<SUB>2992</SUB>> ]
-"14275" [label = <(FIELD_IDENTIFIER,GetStringLength,GetStringLength)<SUB>2993</SUB>> ]
-"14278" [label = <(FIELD_IDENTIFIER,GetStringChars,GetStringChars)<SUB>2994</SUB>> ]
-"14281" [label = <(FIELD_IDENTIFIER,ReleaseStringChars,ReleaseStringChars)<SUB>2995</SUB>> ]
-"14284" [label = <(FIELD_IDENTIFIER,NewStringUTF,NewStringUTF)<SUB>2996</SUB>> ]
-"14287" [label = <(FIELD_IDENTIFIER,GetStringUTFLength,GetStringUTFLength)<SUB>2997</SUB>> ]
-"14290" [label = <(FIELD_IDENTIFIER,GetStringUTFChars,GetStringUTFChars)<SUB>2998</SUB>> ]
-"14293" [label = <(FIELD_IDENTIFIER,ReleaseStringUTFChars,ReleaseStringUTFChars)<SUB>2999</SUB>> ]
-"14296" [label = <(FIELD_IDENTIFIER,GetArrayLength,GetArrayLength)<SUB>3000</SUB>> ]
-"14299" [label = <(FIELD_IDENTIFIER,NewObjectArray,NewObjectArray)<SUB>3001</SUB>> ]
-"14302" [label = <(FIELD_IDENTIFIER,GetObjectArrayElement,GetObjectArrayElement)<SUB>3002</SUB>> ]
-"14305" [label = <(FIELD_IDENTIFIER,SetObjectArrayElement,SetObjectArrayElement)<SUB>3003</SUB>> ]
-"14308" [label = <(FIELD_IDENTIFIER,NewBooleanArray,NewBooleanArray)<SUB>3004</SUB>> ]
-"14311" [label = <(FIELD_IDENTIFIER,NewByteArray,NewByteArray)<SUB>3005</SUB>> ]
-"14314" [label = <(FIELD_IDENTIFIER,NewCharArray,NewCharArray)<SUB>3006</SUB>> ]
-"14317" [label = <(FIELD_IDENTIFIER,NewShortArray,NewShortArray)<SUB>3007</SUB>> ]
-"14320" [label = <(FIELD_IDENTIFIER,NewIntArray,NewIntArray)<SUB>3008</SUB>> ]
-"14323" [label = <(FIELD_IDENTIFIER,NewLongArray,NewLongArray)<SUB>3009</SUB>> ]
-"14326" [label = <(FIELD_IDENTIFIER,NewFloatArray,NewFloatArray)<SUB>3010</SUB>> ]
-"14329" [label = <(FIELD_IDENTIFIER,NewDoubleArray,NewDoubleArray)<SUB>3011</SUB>> ]
-"14332" [label = <(FIELD_IDENTIFIER,GetBooleanArrayElements,GetBooleanArrayElements)<SUB>3012</SUB>> ]
-"14335" [label = <(FIELD_IDENTIFIER,GetByteArrayElements,GetByteArrayElements)<SUB>3013</SUB>> ]
-"14338" [label = <(FIELD_IDENTIFIER,GetCharArrayElements,GetCharArrayElements)<SUB>3014</SUB>> ]
-"14341" [label = <(FIELD_IDENTIFIER,GetShortArrayElements,GetShortArrayElements)<SUB>3015</SUB>> ]
-"14344" [label = <(FIELD_IDENTIFIER,GetIntArrayElements,GetIntArrayElements)<SUB>3016</SUB>> ]
-"14347" [label = <(FIELD_IDENTIFIER,GetLongArrayElements,GetLongArrayElements)<SUB>3017</SUB>> ]
-"14350" [label = <(FIELD_IDENTIFIER,GetFloatArrayElements,GetFloatArrayElements)<SUB>3018</SUB>> ]
-"14353" [label = <(FIELD_IDENTIFIER,GetDoubleArrayElements,GetDoubleArrayElements)<SUB>3019</SUB>> ]
-"14356" [label = <(FIELD_IDENTIFIER,ReleaseBooleanArrayElements,ReleaseBooleanArrayElements)<SUB>3020</SUB>> ]
-"14359" [label = <(FIELD_IDENTIFIER,ReleaseByteArrayElements,ReleaseByteArrayElements)<SUB>3021</SUB>> ]
-"14362" [label = <(FIELD_IDENTIFIER,ReleaseCharArrayElements,ReleaseCharArrayElements)<SUB>3022</SUB>> ]
-"14365" [label = <(FIELD_IDENTIFIER,ReleaseShortArrayElements,ReleaseShortArrayElements)<SUB>3023</SUB>> ]
-"14368" [label = <(FIELD_IDENTIFIER,ReleaseIntArrayElements,ReleaseIntArrayElements)<SUB>3024</SUB>> ]
-"14371" [label = <(FIELD_IDENTIFIER,ReleaseLongArrayElements,ReleaseLongArrayElements)<SUB>3025</SUB>> ]
-"14374" [label = <(FIELD_IDENTIFIER,ReleaseFloatArrayElements,ReleaseFloatArrayElements)<SUB>3026</SUB>> ]
-"14377" [label = <(FIELD_IDENTIFIER,ReleaseDoubleArrayElements,ReleaseDoubleArrayElements)<SUB>3027</SUB>> ]
-"14380" [label = <(FIELD_IDENTIFIER,GetBooleanArrayRegion,GetBooleanArrayRegion)<SUB>3028</SUB>> ]
-"14383" [label = <(FIELD_IDENTIFIER,GetByteArrayRegion,GetByteArrayRegion)<SUB>3029</SUB>> ]
-"14386" [label = <(FIELD_IDENTIFIER,GetCharArrayRegion,GetCharArrayRegion)<SUB>3030</SUB>> ]
-"14389" [label = <(FIELD_IDENTIFIER,GetShortArrayRegion,GetShortArrayRegion)<SUB>3031</SUB>> ]
-"14392" [label = <(FIELD_IDENTIFIER,GetIntArrayRegion,GetIntArrayRegion)<SUB>3032</SUB>> ]
-"14395" [label = <(FIELD_IDENTIFIER,GetLongArrayRegion,GetLongArrayRegion)<SUB>3033</SUB>> ]
-"14398" [label = <(FIELD_IDENTIFIER,GetFloatArrayRegion,GetFloatArrayRegion)<SUB>3034</SUB>> ]
-"14401" [label = <(FIELD_IDENTIFIER,GetDoubleArrayRegion,GetDoubleArrayRegion)<SUB>3035</SUB>> ]
-"14404" [label = <(FIELD_IDENTIFIER,SetBooleanArrayRegion,SetBooleanArrayRegion)<SUB>3036</SUB>> ]
-"14407" [label = <(FIELD_IDENTIFIER,SetByteArrayRegion,SetByteArrayRegion)<SUB>3037</SUB>> ]
-"14410" [label = <(FIELD_IDENTIFIER,SetCharArrayRegion,SetCharArrayRegion)<SUB>3038</SUB>> ]
-"14413" [label = <(FIELD_IDENTIFIER,SetShortArrayRegion,SetShortArrayRegion)<SUB>3039</SUB>> ]
-"14416" [label = <(FIELD_IDENTIFIER,SetIntArrayRegion,SetIntArrayRegion)<SUB>3040</SUB>> ]
-"14419" [label = <(FIELD_IDENTIFIER,SetLongArrayRegion,SetLongArrayRegion)<SUB>3041</SUB>> ]
-"14422" [label = <(FIELD_IDENTIFIER,SetFloatArrayRegion,SetFloatArrayRegion)<SUB>3042</SUB>> ]
-"14425" [label = <(FIELD_IDENTIFIER,SetDoubleArrayRegion,SetDoubleArrayRegion)<SUB>3043</SUB>> ]
-"14428" [label = <(FIELD_IDENTIFIER,RegisterNatives,RegisterNatives)<SUB>3044</SUB>> ]
-"14431" [label = <(FIELD_IDENTIFIER,UnregisterNatives,UnregisterNatives)<SUB>3045</SUB>> ]
-"14434" [label = <(FIELD_IDENTIFIER,MonitorEnter,MonitorEnter)<SUB>3046</SUB>> ]
-"14437" [label = <(FIELD_IDENTIFIER,MonitorExit,MonitorExit)<SUB>3047</SUB>> ]
-"14440" [label = <(FIELD_IDENTIFIER,GetJavaVM,GetJavaVM)<SUB>3048</SUB>> ]
-"14443" [label = <(FIELD_IDENTIFIER,GetStringRegion,GetStringRegion)<SUB>3049</SUB>> ]
-"14446" [label = <(FIELD_IDENTIFIER,GetStringUTFRegion,GetStringUTFRegion)<SUB>3050</SUB>> ]
-"14449" [label = <(FIELD_IDENTIFIER,GetPrimitiveArrayCritical,GetPrimitiveArrayCritical)<SUB>3051</SUB>> ]
-"14452" [label = <(FIELD_IDENTIFIER,ReleasePrimitiveArrayCritical,ReleasePrimitiveArrayCritical)<SUB>3052</SUB>> ]
-"14455" [label = <(FIELD_IDENTIFIER,GetStringCritical,GetStringCritical)<SUB>3053</SUB>> ]
-"14458" [label = <(FIELD_IDENTIFIER,ReleaseStringCritical,ReleaseStringCritical)<SUB>3054</SUB>> ]
-"14461" [label = <(FIELD_IDENTIFIER,NewWeakGlobalRef,NewWeakGlobalRef)<SUB>3055</SUB>> ]
-"14464" [label = <(FIELD_IDENTIFIER,DeleteWeakGlobalRef,DeleteWeakGlobalRef)<SUB>3056</SUB>> ]
-"14467" [label = <(FIELD_IDENTIFIER,ExceptionCheck,ExceptionCheck)<SUB>3057</SUB>> ]
-"14470" [label = <(FIELD_IDENTIFIER,NewDirectByteBuffer,NewDirectByteBuffer)<SUB>3058</SUB>> ]
-"14473" [label = <(FIELD_IDENTIFIER,GetDirectBufferAddress,GetDirectBufferAddress)<SUB>3059</SUB>> ]
-"14476" [label = <(FIELD_IDENTIFIER,GetDirectBufferCapacity,GetDirectBufferCapacity)<SUB>3060</SUB>> ]
-"14479" [label = <(FIELD_IDENTIFIER,GetObjectRefType,GetObjectRefType)<SUB>3061</SUB>> ]
-"247" [label = <(Runtime::Current,Runtime::Current())<SUB>184</SUB>> ]
-"251" [label = <(FIELD_IDENTIFIER,GetInstrumentation,GetInstrumentation)<SUB>184</SUB>> ]
-"268" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>211</SUB>> ]
-"420" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetClassLinker)<SUB>331</SUB>> ]
-"449" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>360</SUB>> ]
-"452" [label = <(FIELD_IDENTIFIER,ClassLoader,ClassLoader)<SUB>360</SUB>> ]
-"455" [label = <(Runtime::Current,Runtime::Current())<SUB>360</SUB>> ]
-"459" [label = <(FIELD_IDENTIFIER,GetSystemClassLoader,GetSystemClassLoader)<SUB>360</SUB>> ]
-"484" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>382</SUB>> ]
-"488" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>382</SUB>> ]
-"508" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>388</SUB>> ]
-"13550" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>2752</SUB>> ]
-"13567" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>2754</SUB>> ]
-"248" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>184</SUB>> ]
-"270" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>211</SUB>> ]
-"421" [label = <(Runtime::Current,Runtime::Current())<SUB>331</SUB>> ]
-"425" [label = <(FIELD_IDENTIFIER,GetClassLinker,GetClassLinker)<SUB>331</SUB>> ]
-"456" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>360</SUB>> ]
-"486" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>382</SUB>> ]
-"489" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>382</SUB>> ]
-"492" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>382</SUB>> ]
-"510" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>388</SUB>> ]
-"13552" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>2752</SUB>> ]
-"250" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>184</SUB>> ]
-"422" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>331</SUB>> ]
-"458" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>360</SUB>> ]
-"491" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>382</SUB>> ]
-"494" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>382</SUB>> ]
-"424" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>331</SUB>> ]
-"20" [label = <(METHOD,&lt;global&gt;)<SUB>1</SUB>> ]
-"14786" [label = <(METHOD_RETURN,ANY)<SUB>1</SUB>> ]
-  "260" -> "261" 
-  "261" -> "270" 
-  "263" -> "272" 
-  "272" -> "273" 
-  "273" -> "280" 
-  "280" -> "281" 
-  "281" -> "282" 
-  "282" -> "283" 
-  "283" -> "359" 
-  "359" -> "360" 
-  "360" -> "361" 
-  "361" -> "362" 
-  "362" -> "371" 
-  "371" -> "372" 
-  "372" -> "373" 
-  "373" -> "374" 
-  "374" -> "381" 
-  "381" -> "382" 
-  "382" -> "393" 
-  "389" -> "395" 
-  "395" -> "396" 
-  "396" -> "397" 
-  "397" -> "407" 
-  "407" -> "408" 
-  "408" -> "409" 
-  "409" -> "411" 
-  "411" -> "424" 
-  "415" -> "427" 
-  "427" -> "428" 
-  "428" -> "429" 
-  "429" -> "430" 
-  "430" -> "431" 
-  "431" -> "432" 
-  "432" -> "438" 
-  "438" -> "439" 
-  "439" -> "440" 
-  "440" -> "441" 
-  "441" -> "449" 
-  "443" -> "460" 
-  "460" -> "461" 
-  "461" -> "462" 
-  "462" -> "463" 
-  "463" -> "464" 
-  "464" -> "474" 
-  "474" -> "475" 
-  "475" -> "481" 
-  "477" -> "496" 
-  "496" -> "498" 
-  "498" -> "510" 
-  "503" -> "512" 
-  "512" -> "513" 
-  "513" -> "514" 
-  "514" -> "516" 
-  "516" -> "517" 
-  "517" -> "518" 
-  "518" -> "519" 
-  "519" -> "520" 
-  "520" -> "521" 
-  "521" -> "531" 
-  "531" -> "532" 
-  "532" -> "533" 
-  "533" -> "534" 
-  "534" -> "543" 
-  "543" -> "544" 
-  "544" -> "545" 
-  "545" -> "554" 
-  "554" -> "555" 
-  "555" -> "575" 
-  "575" -> "576" 
-  "576" -> "577" 
-  "577" -> "578" 
-  "578" -> "579" 
-  "579" -> "13308" 
-  "13308" -> "13364" 
-  "13364" -> "13365" 
-  "13365" -> "13366" 
-  "13366" -> "13367" 
-  "13367" -> "13368" 
-  "13368" -> "13369" 
-  "13369" -> "13542" 
-  "13542" -> "13543" 
-  "13543" -> "13552" 
-  "13545" -> "13557" 
-  "13555" -> "13567" 
-  "13561" -> "13569" 
-  "13569" -> "13570" 
-  "13570" -> "13571" 
-  "13571" -> "13784" 
-  "13784" -> "13795" 
-  "13786" -> "14493" 
-  "14491" -> "14736" 
-  "14736" -> "14786" 
-  "228" -> "231" 
-  "231" -> "232" 
-  "232" -> "240" 
-  "240" -> "241" 
-  "241" -> "250" 
-  "243" -> "252" 
-  "252" -> "260" 
-  "265" -> "263" 
-  "390" -> "389" 
-  "417" -> "415" 
-  "445" -> "443" 
-  "478" -> "477" 
-  "505" -> "503" 
-  "13547" -> "13545" 
-  "13557" -> "13555" 
-  "13563" -> "13561" 
-  "13788" -> "13786" 
-  "14493" -> "14491" 
-  "49" -> "228" 
-  "245" -> "243" 
-  "266" -> "265" 
-  "391" -> "390" 
-  "418" -> "417" 
-  "446" -> "458" 
-  "453" -> "445" 
-  "479" -> "486" 
-  "482" -> "478" 
-  "506" -> "505" 
-  "13548" -> "13547" 
-  "13564" -> "13563" 
-  "13793" -> "13798" 
-  "13796" -> "13801" 
-  "13799" -> "13804" 
-  "13802" -> "13807" 
-  "13805" -> "13810" 
-  "13808" -> "13813" 
-  "13811" -> "13816" 
-  "13814" -> "13819" 
-  "13817" -> "13822" 
-  "13820" -> "13825" 
-  "13823" -> "13828" 
-  "13826" -> "13831" 
-  "13829" -> "13834" 
-  "13832" -> "13837" 
-  "13835" -> "13840" 
-  "13838" -> "13843" 
-  "13841" -> "13846" 
-  "13844" -> "13849" 
-  "13847" -> "13852" 
-  "13850" -> "13855" 
-  "13853" -> "13858" 
-  "13856" -> "13861" 
-  "13859" -> "13864" 
-  "13862" -> "13867" 
-  "13865" -> "13870" 
-  "13868" -> "13873" 
-  "13871" -> "13876" 
-  "13874" -> "13879" 
-  "13877" -> "13882" 
-  "13880" -> "13885" 
-  "13883" -> "13888" 
-  "13886" -> "13891" 
-  "13889" -> "13894" 
-  "13892" -> "13897" 
-  "13895" -> "13900" 
-  "13898" -> "13903" 
-  "13901" -> "13906" 
-  "13904" -> "13909" 
-  "13907" -> "13912" 
-  "13910" -> "13915" 
-  "13913" -> "13918" 
-  "13916" -> "13921" 
-  "13919" -> "13924" 
-  "13922" -> "13927" 
-  "13925" -> "13930" 
-  "13928" -> "13933" 
-  "13931" -> "13936" 
-  "13934" -> "13939" 
-  "13937" -> "13942" 
-  "13940" -> "13945" 
-  "13943" -> "13948" 
-  "13946" -> "13951" 
-  "13949" -> "13954" 
-  "13952" -> "13957" 
-  "13955" -> "13960" 
-  "13958" -> "13963" 
-  "13961" -> "13966" 
-  "13964" -> "13969" 
-  "13967" -> "13972" 
-  "13970" -> "13975" 
-  "13973" -> "13978" 
-  "13976" -> "13981" 
-  "13979" -> "13984" 
-  "13982" -> "13987" 
-  "13985" -> "13990" 
-  "13988" -> "13993" 
-  "13991" -> "13996" 
-  "13994" -> "13999" 
-  "13997" -> "14002" 
-  "14000" -> "14005" 
-  "14003" -> "14008" 
-  "14006" -> "14011" 
-  "14009" -> "14014" 
-  "14012" -> "14017" 
-  "14015" -> "14020" 
-  "14018" -> "14023" 
-  "14021" -> "14026" 
-  "14024" -> "14029" 
-  "14027" -> "14032" 
-  "14030" -> "14035" 
-  "14033" -> "14038" 
-  "14036" -> "14041" 
-  "14039" -> "14044" 
-  "14042" -> "14047" 
-  "14045" -> "14050" 
-  "14048" -> "14053" 
-  "14051" -> "14056" 
-  "14054" -> "14059" 
-  "14057" -> "14062" 
-  "14060" -> "14065" 
-  "14063" -> "14068" 
-  "14066" -> "14071" 
-  "14069" -> "14074" 
-  "14072" -> "14077" 
-  "14075" -> "14080" 
-  "14078" -> "14083" 
-  "14081" -> "14086" 
-  "14084" -> "14089" 
-  "14087" -> "14092" 
-  "14090" -> "14095" 
-  "14093" -> "14098" 
-  "14096" -> "14101" 
-  "14099" -> "14104" 
-  "14102" -> "14107" 
-  "14105" -> "14110" 
-  "14108" -> "14113" 
-  "14111" -> "14116" 
-  "14114" -> "14119" 
-  "14117" -> "14122" 
-  "14120" -> "14125" 
-  "14123" -> "14128" 
-  "14126" -> "14131" 
-  "14129" -> "14134" 
-  "14132" -> "14137" 
-  "14135" -> "14140" 
-  "14138" -> "14143" 
-  "14141" -> "14146" 
-  "14144" -> "14149" 
-  "14147" -> "14152" 
-  "14150" -> "14155" 
-  "14153" -> "14158" 
-  "14156" -> "14161" 
-  "14159" -> "14164" 
-  "14162" -> "14167" 
-  "14165" -> "14170" 
-  "14168" -> "14173" 
-  "14171" -> "14176" 
-  "14174" -> "14179" 
-  "14177" -> "14182" 
-  "14180" -> "14185" 
-  "14183" -> "14188" 
-  "14186" -> "14191" 
-  "14189" -> "14194" 
-  "14192" -> "14197" 
-  "14195" -> "14200" 
-  "14198" -> "14203" 
-  "14201" -> "14206" 
-  "14204" -> "14209" 
-  "14207" -> "14212" 
-  "14210" -> "14215" 
-  "14213" -> "14218" 
-  "14216" -> "14221" 
-  "14219" -> "14224" 
-  "14222" -> "14227" 
-  "14225" -> "14230" 
-  "14228" -> "14233" 
-  "14231" -> "14236" 
-  "14234" -> "14239" 
-  "14237" -> "14242" 
-  "14240" -> "14245" 
-  "14243" -> "14248" 
-  "14246" -> "14251" 
-  "14249" -> "14254" 
-  "14252" -> "14257" 
-  "14255" -> "14260" 
-  "14258" -> "14263" 
-  "14261" -> "14266" 
-  "14264" -> "14269" 
-  "14267" -> "14272" 
-  "14270" -> "14275" 
-  "14273" -> "14278" 
-  "14276" -> "14281" 
-  "14279" -> "14284" 
-  "14282" -> "14287" 
-  "14285" -> "14290" 
-  "14288" -> "14293" 
-  "14291" -> "14296" 
-  "14294" -> "14299" 
-  "14297" -> "14302" 
-  "14300" -> "14305" 
-  "14303" -> "14308" 
-  "14306" -> "14311" 
-  "14309" -> "14314" 
-  "14312" -> "14317" 
-  "14315" -> "14320" 
-  "14318" -> "14323" 
-  "14321" -> "14326" 
-  "14324" -> "14329" 
-  "14327" -> "14332" 
-  "14330" -> "14335" 
-  "14333" -> "14338" 
-  "14336" -> "14341" 
-  "14339" -> "14344" 
-  "14342" -> "14347" 
-  "14345" -> "14350" 
-  "14348" -> "14353" 
-  "14351" -> "14356" 
-  "14354" -> "14359" 
-  "14357" -> "14362" 
-  "14360" -> "14365" 
-  "14363" -> "14368" 
-  "14366" -> "14371" 
-  "14369" -> "14374" 
-  "14372" -> "14377" 
-  "14375" -> "14380" 
-  "14378" -> "14383" 
-  "14381" -> "14386" 
-  "14384" -> "14389" 
-  "14387" -> "14392" 
-  "14390" -> "14395" 
-  "14393" -> "14398" 
-  "14396" -> "14401" 
-  "14399" -> "14404" 
-  "14402" -> "14407" 
-  "14405" -> "14410" 
-  "14408" -> "14413" 
-  "14411" -> "14416" 
-  "14414" -> "14419" 
-  "14417" -> "14422" 
-  "14420" -> "14425" 
-  "14423" -> "14428" 
-  "14426" -> "14431" 
-  "14429" -> "14434" 
-  "14432" -> "14437" 
-  "14435" -> "14440" 
-  "14438" -> "14443" 
-  "14441" -> "14446" 
-  "14444" -> "14449" 
-  "14447" -> "14452" 
-  "14450" -> "14455" 
-  "14453" -> "14458" 
-  "14456" -> "14461" 
-  "14459" -> "14464" 
-  "14462" -> "14467" 
-  "14465" -> "14470" 
-  "14468" -> "14473" 
-  "14471" -> "14476" 
-  "14474" -> "14479" 
-  "14477" -> "13788" 
-  "246" -> "245" 
-  "267" -> "271" 
-  "271" -> "266" 
-  "393" -> "391" 
-  "419" -> "426" 
-  "426" -> "418" 
-  "447" -> "452" 
-  "450" -> "446" 
-  "454" -> "453" 
-  "481" -> "479" 
-  "483" -> "491" 
-  "487" -> "482" 
-  "507" -> "511" 
-  "511" -> "506" 
-  "13549" -> "13553" 
-  "13553" -> "13548" 
-  "13565" -> "13564" 
-  "13795" -> "13793" 
-  "13798" -> "13796" 
-  "13801" -> "13799" 
-  "13804" -> "13802" 
-  "13807" -> "13805" 
-  "13810" -> "13808" 
-  "13813" -> "13811" 
-  "13816" -> "13814" 
-  "13819" -> "13817" 
-  "13822" -> "13820" 
-  "13825" -> "13823" 
-  "13828" -> "13826" 
-  "13831" -> "13829" 
-  "13834" -> "13832" 
-  "13837" -> "13835" 
-  "13840" -> "13838" 
-  "13843" -> "13841" 
-  "13846" -> "13844" 
-  "13849" -> "13847" 
-  "13852" -> "13850" 
-  "13855" -> "13853" 
-  "13858" -> "13856" 
-  "13861" -> "13859" 
-  "13864" -> "13862" 
-  "13867" -> "13865" 
-  "13870" -> "13868" 
-  "13873" -> "13871" 
-  "13876" -> "13874" 
-  "13879" -> "13877" 
-  "13882" -> "13880" 
-  "13885" -> "13883" 
-  "13888" -> "13886" 
-  "13891" -> "13889" 
-  "13894" -> "13892" 
-  "13897" -> "13895" 
-  "13900" -> "13898" 
-  "13903" -> "13901" 
-  "13906" -> "13904" 
-  "13909" -> "13907" 
-  "13912" -> "13910" 
-  "13915" -> "13913" 
-  "13918" -> "13916" 
-  "13921" -> "13919" 
-  "13924" -> "13922" 
-  "13927" -> "13925" 
-  "13930" -> "13928" 
-  "13933" -> "13931" 
-  "13936" -> "13934" 
-  "13939" -> "13937" 
-  "13942" -> "13940" 
-  "13945" -> "13943" 
-  "13948" -> "13946" 
-  "13951" -> "13949" 
-  "13954" -> "13952" 
-  "13957" -> "13955" 
-  "13960" -> "13958" 
-  "13963" -> "13961" 
-  "13966" -> "13964" 
-  "13969" -> "13967" 
-  "13972" -> "13970" 
-  "13975" -> "13973" 
-  "13978" -> "13976" 
-  "13981" -> "13979" 
-  "13984" -> "13982" 
-  "13987" -> "13985" 
-  "13990" -> "13988" 
-  "13993" -> "13991" 
-  "13996" -> "13994" 
-  "13999" -> "13997" 
-  "14002" -> "14000" 
-  "14005" -> "14003" 
-  "14008" -> "14006" 
-  "14011" -> "14009" 
-  "14014" -> "14012" 
-  "14017" -> "14015" 
-  "14020" -> "14018" 
-  "14023" -> "14021" 
-  "14026" -> "14024" 
-  "14029" -> "14027" 
-  "14032" -> "14030" 
-  "14035" -> "14033" 
-  "14038" -> "14036" 
-  "14041" -> "14039" 
-  "14044" -> "14042" 
-  "14047" -> "14045" 
-  "14050" -> "14048" 
-  "14053" -> "14051" 
-  "14056" -> "14054" 
-  "14059" -> "14057" 
-  "14062" -> "14060" 
-  "14065" -> "14063" 
-  "14068" -> "14066" 
-  "14071" -> "14069" 
-  "14074" -> "14072" 
-  "14077" -> "14075" 
-  "14080" -> "14078" 
-  "14083" -> "14081" 
-  "14086" -> "14084" 
-  "14089" -> "14087" 
-  "14092" -> "14090" 
-  "14095" -> "14093" 
-  "14098" -> "14096" 
-  "14101" -> "14099" 
-  "14104" -> "14102" 
-  "14107" -> "14105" 
-  "14110" -> "14108" 
-  "14113" -> "14111" 
-  "14116" -> "14114" 
-  "14119" -> "14117" 
-  "14122" -> "14120" 
-  "14125" -> "14123" 
-  "14128" -> "14126" 
-  "14131" -> "14129" 
-  "14134" -> "14132" 
-  "14137" -> "14135" 
-  "14140" -> "14138" 
-  "14143" -> "14141" 
-  "14146" -> "14144" 
-  "14149" -> "14147" 
-  "14152" -> "14150" 
-  "14155" -> "14153" 
-  "14158" -> "14156" 
-  "14161" -> "14159" 
-  "14164" -> "14162" 
-  "14167" -> "14165" 
-  "14170" -> "14168" 
-  "14173" -> "14171" 
-  "14176" -> "14174" 
-  "14179" -> "14177" 
-  "14182" -> "14180" 
-  "14185" -> "14183" 
-  "14188" -> "14186" 
-  "14191" -> "14189" 
-  "14194" -> "14192" 
-  "14197" -> "14195" 
-  "14200" -> "14198" 
-  "14203" -> "14201" 
-  "14206" -> "14204" 
-  "14209" -> "14207" 
-  "14212" -> "14210" 
-  "14215" -> "14213" 
-  "14218" -> "14216" 
-  "14221" -> "14219" 
-  "14224" -> "14222" 
-  "14227" -> "14225" 
-  "14230" -> "14228" 
-  "14233" -> "14231" 
-  "14236" -> "14234" 
-  "14239" -> "14237" 
-  "14242" -> "14240" 
-  "14245" -> "14243" 
-  "14248" -> "14246" 
-  "14251" -> "14249" 
-  "14254" -> "14252" 
-  "14257" -> "14255" 
-  "14260" -> "14258" 
-  "14263" -> "14261" 
-  "14266" -> "14264" 
-  "14269" -> "14267" 
-  "14272" -> "14270" 
-  "14275" -> "14273" 
-  "14278" -> "14276" 
-  "14281" -> "14279" 
-  "14284" -> "14282" 
-  "14287" -> "14285" 
-  "14290" -> "14288" 
-  "14293" -> "14291" 
-  "14296" -> "14294" 
-  "14299" -> "14297" 
-  "14302" -> "14300" 
-  "14305" -> "14303" 
-  "14308" -> "14306" 
-  "14311" -> "14309" 
-  "14314" -> "14312" 
-  "14317" -> "14315" 
-  "14320" -> "14318" 
-  "14323" -> "14321" 
-  "14326" -> "14324" 
-  "14329" -> "14327" 
-  "14332" -> "14330" 
-  "14335" -> "14333" 
-  "14338" -> "14336" 
-  "14341" -> "14339" 
-  "14344" -> "14342" 
-  "14347" -> "14345" 
-  "14350" -> "14348" 
-  "14353" -> "14351" 
-  "14356" -> "14354" 
-  "14359" -> "14357" 
-  "14362" -> "14360" 
-  "14365" -> "14363" 
-  "14368" -> "14366" 
-  "14371" -> "14369" 
-  "14374" -> "14372" 
-  "14377" -> "14375" 
-  "14380" -> "14378" 
-  "14383" -> "14381" 
-  "14386" -> "14384" 
-  "14389" -> "14387" 
-  "14392" -> "14390" 
-  "14395" -> "14393" 
-  "14398" -> "14396" 
-  "14401" -> "14399" 
-  "14404" -> "14402" 
-  "14407" -> "14405" 
-  "14410" -> "14408" 
-  "14413" -> "14411" 
-  "14416" -> "14414" 
-  "14419" -> "14417" 
-  "14422" -> "14420" 
-  "14425" -> "14423" 
-  "14428" -> "14426" 
-  "14431" -> "14429" 
-  "14434" -> "14432" 
-  "14437" -> "14435" 
-  "14440" -> "14438" 
-  "14443" -> "14441" 
-  "14446" -> "14444" 
-  "14449" -> "14447" 
-  "14452" -> "14450" 
-  "14455" -> "14453" 
-  "14458" -> "14456" 
-  "14461" -> "14459" 
-  "14464" -> "14462" 
-  "14467" -> "14465" 
-  "14470" -> "14468" 
-  "14473" -> "14471" 
-  "14476" -> "14474" 
-  "14479" -> "14477" 
-  "247" -> "251" 
-  "251" -> "246" 
-  "268" -> "267" 
-  "420" -> "419" 
-  "449" -> "447" 
-  "452" -> "450" 
-  "455" -> "459" 
-  "459" -> "454" 
-  "484" -> "483" 
-  "488" -> "487" 
-  "508" -> "507" 
-  "13550" -> "13549" 
-  "13567" -> "13565" 
-  "248" -> "247" 
-  "270" -> "268" 
-  "421" -> "425" 
-  "425" -> "420" 
-  "456" -> "455" 
-  "486" -> "484" 
-  "489" -> "494" 
-  "492" -> "488" 
-  "510" -> "508" 
-  "13552" -> "13550" 
-  "250" -> "248" 
-  "422" -> "421" 
-  "458" -> "456" 
-  "491" -> "489" 
-  "494" -> "492" 
-  "424" -> "422" 
-  "20" -> "49" 
+digraph "ScopedVAArgs" {  
+"19" [label = <(METHOD,ScopedVAArgs)<SUB>69</SUB>> ]
+"22" [label = <(METHOD_RETURN,ANY)<SUB>69</SUB>> ]
+  "19" -> "22" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/30-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/30-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/30-cfg.dot	2023-06-07 19:33:45.347394697 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/30-cfg.dot	2023-06-07 19:33:51.937393993 +0330
@@ -1,124 +1,97 @@
-digraph "ToReflectedMethod" {  
-"849" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>574</SUB>> ]
-"868" [label = <(soa,soa(env))<SUB>575</SUB>> ]
-"871" [label = <(&lt;operator&gt;.assignment,* m = jni::DecodeArtMethod(mid))<SUB>576</SUB>> ]
-"878" [label = <(&lt;operator&gt;.multiplication,mirror::Executable* method)<SUB>577</SUB>> ]
-"883" [label = <(DCHECK_EQ,DCHECK_EQ(Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize(), kRuntimePointerSize))<SUB>578</SUB>> ]
-"895" [label = <(DCHECK,DCHECK(!Runtime::Current()-&gt;IsActiveTransaction()))<SUB>579</SUB>> ]
-"938" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(method);,return soa.AddLocalReference&lt;jobject&gt;(method);)<SUB>585</SUB>> ]
-"873" [label = <(jni::DecodeArtMethod,jni::DecodeArtMethod(mid))<SUB>576</SUB>> ]
-"879" [label = <(&lt;operator&gt;.fieldAccess,mirror::Executable)<SUB>577</SUB>> ]
-"884" [label = <(GetImagePointerSize,Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize())<SUB>578</SUB>> ]
-"896" [label = <(&lt;operator&gt;.logicalNot,!Runtime::Current()-&gt;IsActiveTransaction())<SUB>579</SUB>> ]
-"905" [label = <(IsConstructor,m-&gt;IsConstructor())<SUB>580</SUB>> ]
-"939" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(method))<SUB>585</SUB>> ]
-"874" [label = <(&lt;operator&gt;.fieldAccess,jni::DecodeArtMethod)<SUB>576</SUB>> ]
-"881" [label = <(FIELD_IDENTIFIER,Executable,Executable)<SUB>577</SUB>> ]
-"885" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize)<SUB>578</SUB>> ]
-"897" [label = <(IsActiveTransaction,Runtime::Current()-&gt;IsActiveTransaction())<SUB>579</SUB>> ]
-"906" [label = <(&lt;operator&gt;.indirectFieldAccess,m-&gt;IsConstructor)<SUB>580</SUB>> ]
-"910" [label = <(&lt;operator&gt;.assignment,method = mirror::Constructor::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;(soa.Self(), m))<SUB>581</SUB>> ]
-"940" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>585</SUB>> ]
-"853" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>574</SUB>> ]
-"876" [label = <(FIELD_IDENTIFIER,DecodeArtMethod,DecodeArtMethod)<SUB>576</SUB>> ]
-"886" [label = <(GetClassLinker,Runtime::Current()-&gt;GetClassLinker())<SUB>578</SUB>> ]
-"893" [label = <(FIELD_IDENTIFIER,GetImagePointerSize,GetImagePointerSize)<SUB>578</SUB>> ]
-"898" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;IsActiveTransaction)<SUB>579</SUB>> ]
-"908" [label = <(FIELD_IDENTIFIER,IsConstructor,IsConstructor)<SUB>580</SUB>> ]
-"912" [label = <(mirror::Constructor::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;,mirror::Constructor::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;(soa.Self(), m))<SUB>581</SUB>> ]
-"925" [label = <(&lt;operator&gt;.assignment,method = mirror::Method::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;(soa.Self(), m))<SUB>583</SUB>> ]
-"941" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>585</SUB>> ]
-"854" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>574</SUB>> ]
-"858" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>574</SUB>> ]
-"865" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>574</SUB>> ]
-"887" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetClassLinker)<SUB>578</SUB>> ]
-"899" [label = <(Runtime::Current,Runtime::Current())<SUB>579</SUB>> ]
-"903" [label = <(FIELD_IDENTIFIER,IsActiveTransaction,IsActiveTransaction)<SUB>579</SUB>> ]
-"913" [label = <(&lt;operator&gt;.fieldAccess,mirror::Constructor::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;)<SUB>581</SUB>> ]
-"918" [label = <(Self,soa.Self())<SUB>581</SUB>> ]
-"927" [label = <(mirror::Method::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;,mirror::Method::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;(soa.Self(), m))<SUB>583</SUB>> ]
-"943" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>585</SUB>> ]
-"859" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>574</SUB>> ]
-"888" [label = <(Runtime::Current,Runtime::Current())<SUB>578</SUB>> ]
-"892" [label = <(FIELD_IDENTIFIER,GetClassLinker,GetClassLinker)<SUB>578</SUB>> ]
-"900" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>579</SUB>> ]
-"914" [label = <(&lt;operator&gt;.fieldAccess,mirror::Constructor)<SUB>581</SUB>> ]
-"917" [label = <(FIELD_IDENTIFIER,CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;,CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;)<SUB>581</SUB>> ]
-"919" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>581</SUB>> ]
-"928" [label = <(&lt;operator&gt;.fieldAccess,mirror::Method::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;)<SUB>583</SUB>> ]
-"933" [label = <(Self,soa.Self())<SUB>583</SUB>> ]
-"860" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>574</SUB>> ]
-"862" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>574</SUB>> ]
-"889" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>578</SUB>> ]
-"902" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>579</SUB>> ]
-"921" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>581</SUB>> ]
-"929" [label = <(&lt;operator&gt;.fieldAccess,mirror::Method)<SUB>583</SUB>> ]
-"932" [label = <(FIELD_IDENTIFIER,CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;,CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;)<SUB>583</SUB>> ]
-"934" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>583</SUB>> ]
-"891" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>578</SUB>> ]
-"936" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>583</SUB>> ]
-"843" [label = <(METHOD,ToReflectedMethod)<SUB>573</SUB>> ]
-"946" [label = <(METHOD_RETURN,jobject)<SUB>573</SUB>> ]
-  "849" -> "854" 
-  "849" -> "868" 
-  "868" -> "876" 
-  "871" -> "881" 
-  "878" -> "891" 
-  "883" -> "902" 
-  "895" -> "908" 
-  "938" -> "946" 
-  "873" -> "871" 
-  "879" -> "878" 
-  "884" -> "883" 
-  "896" -> "895" 
-  "905" -> "914" 
-  "905" -> "929" 
-  "939" -> "938" 
-  "874" -> "873" 
-  "881" -> "879" 
-  "885" -> "884" 
-  "897" -> "896" 
-  "906" -> "905" 
-  "910" -> "943" 
-  "940" -> "939" 
-  "853" -> "860" 
-  "853" -> "868" 
-  "876" -> "874" 
-  "886" -> "893" 
-  "893" -> "885" 
-  "898" -> "897" 
-  "908" -> "906" 
-  "912" -> "910" 
-  "925" -> "943" 
-  "941" -> "940" 
-  "854" -> "853" 
-  "858" -> "865" 
-  "865" -> "946" 
-  "887" -> "886" 
-  "899" -> "903" 
-  "903" -> "898" 
-  "913" -> "921" 
-  "918" -> "912" 
-  "927" -> "925" 
-  "943" -> "941" 
-  "859" -> "858" 
-  "888" -> "892" 
-  "892" -> "887" 
-  "900" -> "899" 
-  "914" -> "917" 
-  "917" -> "913" 
-  "919" -> "918" 
-  "928" -> "936" 
-  "933" -> "927" 
-  "860" -> "862" 
-  "862" -> "859" 
-  "889" -> "888" 
-  "902" -> "900" 
-  "921" -> "919" 
-  "929" -> "932" 
-  "932" -> "928" 
-  "934" -> "933" 
-  "891" -> "889" 
-  "936" -> "934" 
-  "843" -> "849" 
+digraph "IsAssignableFrom" {  
+"936" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(java_class1, JNI_FALSE))<SUB>534</SUB>> ]
+"955" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(java_class2, JNI_FALSE))<SUB>535</SUB>> ]
+"975" [label = <(soa,soa(env))<SUB>536</SUB>> ]
+"977" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c1 = soa.Decode&lt;mirror::Class&gt;(java_class1))<SUB>537</SUB>> ]
+"994" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c2 = soa.Decode&lt;mirror::Class&gt;(java_class2))<SUB>538</SUB>> ]
+"1011" [label = <(RETURN,return c2-&gt;IsAssignableFrom(c1) ? JNI_TRUE : JNI_FALSE;,return c2-&gt;IsAssignableFrom(c1) ? JNI_TRUE : JNI_FALSE;)<SUB>539</SUB>> ]
+"978" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c1)<SUB>537</SUB>> ]
+"985" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(java_class1))<SUB>537</SUB>> ]
+"995" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c2)<SUB>538</SUB>> ]
+"1002" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(java_class2))<SUB>538</SUB>> ]
+"1012" [label = <(&lt;operator&gt;.conditional,c2-&gt;IsAssignableFrom(c1) ? JNI_TRUE : JNI_FALSE)<SUB>539</SUB>> ]
+"979" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>537</SUB>> ]
+"986" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>537</SUB>> ]
+"996" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>538</SUB>> ]
+"1003" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>538</SUB>> ]
+"1013" [label = <(IsAssignableFrom,c2-&gt;IsAssignableFrom(c1))<SUB>539</SUB>> ]
+"941" [label = <(UNLIKELY,UNLIKELY((java_class1) == nullptr))<SUB>534</SUB>> ]
+"960" [label = <(UNLIKELY,UNLIKELY((java_class2) == nullptr))<SUB>535</SUB>> ]
+"981" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>537</SUB>> ]
+"987" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>537</SUB>> ]
+"990" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>537</SUB>> ]
+"998" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>538</SUB>> ]
+"1004" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>538</SUB>> ]
+"1007" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>538</SUB>> ]
+"1014" [label = <(&lt;operator&gt;.indirectFieldAccess,c2-&gt;IsAssignableFrom)<SUB>539</SUB>> ]
+"942" [label = <(&lt;operator&gt;.equals,(java_class1) == nullptr)<SUB>534</SUB>> ]
+"946" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN(java_class1, JNI_FALSE),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class1 == null&quot;))<SUB>534</SUB>> ]
+"953" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(java_class1, JNI_FALSE),CHECK_NON_NULL_ARGUMENT_RETURN(java_class1, JNI_FALSE))<SUB>534</SUB>> ]
+"961" [label = <(&lt;operator&gt;.equals,(java_class2) == nullptr)<SUB>535</SUB>> ]
+"965" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN(java_class2, JNI_FALSE),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class2 == null&quot;))<SUB>535</SUB>> ]
+"972" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(java_class2, JNI_FALSE),CHECK_NON_NULL_ARGUMENT_RETURN(java_class2, JNI_FALSE))<SUB>535</SUB>> ]
+"983" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>537</SUB>> ]
+"989" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>537</SUB>> ]
+"992" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>537</SUB>> ]
+"1000" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>538</SUB>> ]
+"1006" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>538</SUB>> ]
+"1009" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>538</SUB>> ]
+"1016" [label = <(FIELD_IDENTIFIER,IsAssignableFrom,IsAssignableFrom)<SUB>539</SUB>> ]
+"947" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>534</SUB>> ]
+"966" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>535</SUB>> ]
+"948" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>534</SUB>> ]
+"950" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>534</SUB>> ]
+"967" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>535</SUB>> ]
+"969" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>535</SUB>> ]
+"931" [label = <(METHOD,IsAssignableFrom)<SUB>533</SUB>> ]
+"1020" [label = <(METHOD_RETURN,jboolean)<SUB>533</SUB>> ]
+  "936" -> "942" 
+  "936" -> "955" 
+  "955" -> "961" 
+  "955" -> "975" 
+  "975" -> "983" 
+  "977" -> "1000" 
+  "994" -> "1016" 
+  "1011" -> "1020" 
+  "978" -> "989" 
+  "985" -> "977" 
+  "995" -> "1006" 
+  "1002" -> "994" 
+  "1012" -> "1011" 
+  "979" -> "978" 
+  "986" -> "985" 
+  "996" -> "995" 
+  "1003" -> "1002" 
+  "1013" -> "1012" 
+  "941" -> "948" 
+  "941" -> "955" 
+  "960" -> "967" 
+  "960" -> "975" 
+  "981" -> "979" 
+  "987" -> "992" 
+  "990" -> "986" 
+  "998" -> "996" 
+  "1004" -> "1009" 
+  "1007" -> "1003" 
+  "1014" -> "1013" 
+  "942" -> "941" 
+  "946" -> "953" 
+  "953" -> "1020" 
+  "961" -> "960" 
+  "965" -> "972" 
+  "972" -> "1020" 
+  "983" -> "981" 
+  "989" -> "987" 
+  "992" -> "990" 
+  "1000" -> "998" 
+  "1006" -> "1004" 
+  "1009" -> "1007" 
+  "1016" -> "1014" 
+  "947" -> "946" 
+  "966" -> "965" 
+  "948" -> "950" 
+  "950" -> "947" 
+  "967" -> "969" 
+  "969" -> "966" 
+  "931" -> "936" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/300-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/300-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/300-cfg.dot	2023-06-07 19:33:45.547394675 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/300-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.addition" {  
-"17804" [label = <(METHOD,&lt;operator&gt;.addition)> ]
-"17808" [label = <(METHOD_RETURN,ANY)> ]
-  "17804" -> "17808" 
+digraph "&lt;operator&gt;.assignmentPlus" {  
+"17452" [label = <(METHOD,&lt;operator&gt;.assignmentPlus)> ]
+"17456" [label = <(METHOD_RETURN,ANY)> ]
+  "17452" -> "17456" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/301-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/301-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/301-cfg.dot	2023-06-07 19:33:45.547394675 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/301-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
 digraph "&lt;operator&gt;.notEquals" {  
-"17809" [label = <(METHOD,&lt;operator&gt;.notEquals)> ]
-"17813" [label = <(METHOD_RETURN,ANY)> ]
-  "17809" -> "17813" 
+"17457" [label = <(METHOD,&lt;operator&gt;.notEquals)> ]
+"17461" [label = <(METHOD_RETURN,ANY)> ]
+  "17457" -> "17461" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/302-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/302-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/302-cfg.dot	2023-06-07 19:33:45.547394675 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/302-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "LIKELY" {  
-"17814" [label = <(METHOD,LIKELY)> ]
-"17817" [label = <(METHOD_RETURN,ANY)> ]
-  "17814" -> "17817" 
+digraph "find" {  
+"17462" [label = <(METHOD,find)> ]
+"17466" [label = <(METHOD_RETURN,ANY)> ]
+  "17462" -> "17466" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/303-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/303-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/303-cfg.dot	2023-06-07 19:33:45.547394675 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/303-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.equals" {  
-"17818" [label = <(METHOD,&lt;operator&gt;.equals)> ]
-"17822" [label = <(METHOD_RETURN,ANY)> ]
-  "17818" -> "17822" 
+digraph "&lt;operator&gt;.shiftLeft" {  
+"17467" [label = <(METHOD,&lt;operator&gt;.shiftLeft)> ]
+"17471" [label = <(METHOD_RETURN,ANY)> ]
+  "17467" -> "17471" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/304-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/304-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/304-cfg.dot	2023-06-07 19:33:45.547394675 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/304-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.and" {  
-"17823" [label = <(METHOD,&lt;operator&gt;.and)> ]
-"17827" [label = <(METHOD_RETURN,ANY)> ]
-  "17823" -> "17827" 
+digraph "LOG" {  
+"17472" [label = <(METHOD,LOG)> ]
+"17475" [label = <(METHOD_RETURN,ANY)> ]
+  "17472" -> "17475" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/305-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/305-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/305-cfg.dot	2023-06-07 19:33:45.547394675 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/305-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "good" {  
-"17828" [label = <(METHOD,good)> ]
-"17832" [label = <(METHOD_RETURN,ANY)> ]
-  "17828" -> "17832" 
+digraph "std::replace" {  
+"17476" [label = <(METHOD,std::replace)> ]
+"17483" [label = <(METHOD_RETURN,ANY)> ]
+  "17476" -> "17483" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/306-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/306-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/306-cfg.dot	2023-06-07 19:33:45.547394675 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/306-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.assignmentPlus" {  
-"17833" [label = <(METHOD,&lt;operator&gt;.assignmentPlus)> ]
-"17837" [label = <(METHOD_RETURN,ANY)> ]
-  "17833" -> "17837" 
+digraph "begin" {  
+"17484" [label = <(METHOD,begin)> ]
+"17487" [label = <(METHOD_RETURN,ANY)> ]
+  "17484" -> "17487" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/307-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/307-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/307-cfg.dot	2023-06-07 19:33:45.547394675 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/307-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.lessThan" {  
-"17838" [label = <(METHOD,&lt;operator&gt;.lessThan)> ]
-"17842" [label = <(METHOD_RETURN,ANY)> ]
-  "17838" -> "17842" 
+digraph "end" {  
+"17488" [label = <(METHOD,end)> ]
+"17491" [label = <(METHOD_RETURN,ANY)> ]
+  "17488" -> "17491" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/308-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/308-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/308-cfg.dot	2023-06-07 19:33:45.547394675 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/308-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.cast" {  
-"17843" [label = <(METHOD,&lt;operator&gt;.cast)> ]
-"17847" [label = <(METHOD_RETURN,ANY)> ]
-  "17843" -> "17847" 
+digraph "h_klass" {  
+"17492" [label = <(METHOD,h_klass)> ]
+"17495" [label = <(METHOD_RETURN,ANY)> ]
+  "17492" -> "17495" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/309-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/309-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/309-cfg.dot	2023-06-07 19:33:45.547394675 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/309-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.subtraction" {  
-"17848" [label = <(METHOD,&lt;operator&gt;.subtraction)> ]
-"17852" [label = <(METHOD_RETURN,ANY)> ]
-  "17848" -> "17852" 
+digraph "NewHandle" {  
+"17496" [label = <(METHOD,NewHandle)> ]
+"17500" [label = <(METHOD_RETURN,ANY)> ]
+  "17496" -> "17500" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/31-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/31-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/31-cfg.dot	2023-06-07 19:33:45.347394697 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/31-cfg.dot	2023-06-07 19:33:51.937393993 +0330
@@ -1,63 +1,84 @@
-digraph "ToReflectedField" {  
-"954" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(fid))<SUB>589</SUB>> ]
-"973" [label = <(soa,soa(env))<SUB>590</SUB>> ]
-"976" [label = <(&lt;operator&gt;.assignment,* f = jni::DecodeArtField(fid))<SUB>591</SUB>> ]
-"983" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(\012        mirror::Field::CreateFromArtField&lt;kRuntimePointerSize&gt;(soa.Self(), f, true));,return soa.AddLocalReference&lt;jobject&gt;(\012        mirror::Field::CreateFromArtField&lt;kRuntimePointerSize&gt;(soa.Self(), f, true));)<SUB>592</SUB>> ]
-"978" [label = <(jni::DecodeArtField,jni::DecodeArtField(fid))<SUB>591</SUB>> ]
-"984" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(\012        mirror::Field::CreateFromArtField&lt;kRuntimePointerSize&gt;(soa.Self(), f, true)))<SUB>592</SUB>> ]
-"979" [label = <(&lt;operator&gt;.fieldAccess,jni::DecodeArtField)<SUB>591</SUB>> ]
-"985" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>592</SUB>> ]
-"990" [label = <(&lt;operator&gt;.greaterThan,mirror::Field::CreateFromArtField&lt;kRuntimePointerSize&gt;(soa.Self(), f, true))<SUB>593</SUB>> ]
-"958" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>589</SUB>> ]
-"981" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>591</SUB>> ]
-"986" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>592</SUB>> ]
-"991" [label = <(&lt;operator&gt;.lessThan,mirror::Field::CreateFromArtField&lt;kRuntimePointerSize)<SUB>593</SUB>> ]
-"998" [label = <(&lt;operator&gt;.bracketedPrimary,(soa.Self(), f, true))<SUB>593</SUB>> ]
-"959" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>589</SUB>> ]
-"963" [label = <(CHECK_NON_NULL_ARGUMENT(fid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>589</SUB>> ]
-"970" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(fid),CHECK_NON_NULL_ARGUMENT(fid))<SUB>589</SUB>> ]
-"988" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>592</SUB>> ]
-"992" [label = <(&lt;operator&gt;.fieldAccess,mirror::Field::CreateFromArtField)<SUB>593</SUB>> ]
-"999" [label = <(&lt;operator&gt;.expressionList,soa.Self(), f, true)<SUB>593</SUB>> ]
-"964" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>589</SUB>> ]
-"993" [label = <(&lt;operator&gt;.fieldAccess,mirror::Field)<SUB>593</SUB>> ]
-"996" [label = <(FIELD_IDENTIFIER,CreateFromArtField,CreateFromArtField)<SUB>593</SUB>> ]
-"1000" [label = <(Self,soa.Self())<SUB>593</SUB>> ]
-"965" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>589</SUB>> ]
-"967" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>589</SUB>> ]
-"1001" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>593</SUB>> ]
-"1003" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>593</SUB>> ]
-"948" [label = <(METHOD,ToReflectedField)<SUB>588</SUB>> ]
-"1006" [label = <(METHOD_RETURN,jobject)<SUB>588</SUB>> ]
-  "954" -> "959" 
-  "954" -> "973" 
-  "973" -> "981" 
-  "976" -> "988" 
-  "983" -> "1006" 
-  "978" -> "976" 
-  "984" -> "983" 
-  "979" -> "978" 
-  "985" -> "993" 
-  "990" -> "984" 
-  "958" -> "965" 
-  "958" -> "973" 
-  "981" -> "979" 
-  "986" -> "985" 
-  "991" -> "1003" 
-  "998" -> "990" 
-  "959" -> "958" 
-  "963" -> "970" 
-  "970" -> "1006" 
-  "988" -> "986" 
-  "992" -> "991" 
-  "999" -> "998" 
-  "964" -> "963" 
-  "993" -> "996" 
-  "996" -> "992" 
-  "1000" -> "999" 
-  "965" -> "967" 
-  "967" -> "964" 
-  "1001" -> "1000" 
-  "1003" -> "1001" 
-  "948" -> "954" 
+digraph "IsInstanceOf" {  
+"1027" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_FALSE))<SUB>543</SUB>> ]
+"1047" [label = <(&lt;operator&gt;.equals,jobj == nullptr)<SUB>544</SUB>> ]
+"1051" [label = <(RETURN,return JNI_TRUE;,return JNI_TRUE;)<SUB>546</SUB>> ]
+"1032" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>543</SUB>> ]
+"1056" [label = <(soa,soa(env))<SUB>548</SUB>> ]
+"1058" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; obj = soa.Decode&lt;mirror::Object&gt;(jobj))<SUB>549</SUB>> ]
+"1075" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c = soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>550</SUB>> ]
+"1092" [label = <(RETURN,return obj-&gt;InstanceOf(c) ? JNI_TRUE : JNI_FALSE;,return obj-&gt;InstanceOf(c) ? JNI_TRUE : JNI_FALSE;)<SUB>551</SUB>> ]
+"1033" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>543</SUB>> ]
+"1037" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_FALSE),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class == null&quot;))<SUB>543</SUB>> ]
+"1044" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_FALSE),CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_FALSE))<SUB>543</SUB>> ]
+"1059" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; obj)<SUB>549</SUB>> ]
+"1066" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(jobj))<SUB>549</SUB>> ]
+"1076" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c)<SUB>550</SUB>> ]
+"1083" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>550</SUB>> ]
+"1093" [label = <(&lt;operator&gt;.conditional,obj-&gt;InstanceOf(c) ? JNI_TRUE : JNI_FALSE)<SUB>551</SUB>> ]
+"1038" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>543</SUB>> ]
+"1060" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>549</SUB>> ]
+"1067" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>549</SUB>> ]
+"1077" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>550</SUB>> ]
+"1084" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>550</SUB>> ]
+"1094" [label = <(InstanceOf,obj-&gt;InstanceOf(c))<SUB>551</SUB>> ]
+"1039" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>543</SUB>> ]
+"1041" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>543</SUB>> ]
+"1062" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>549</SUB>> ]
+"1068" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>549</SUB>> ]
+"1071" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>549</SUB>> ]
+"1079" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>550</SUB>> ]
+"1085" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>550</SUB>> ]
+"1088" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>550</SUB>> ]
+"1095" [label = <(&lt;operator&gt;.indirectFieldAccess,obj-&gt;InstanceOf)<SUB>551</SUB>> ]
+"1064" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>549</SUB>> ]
+"1070" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>549</SUB>> ]
+"1073" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>549</SUB>> ]
+"1081" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>550</SUB>> ]
+"1087" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>550</SUB>> ]
+"1090" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>550</SUB>> ]
+"1097" [label = <(FIELD_IDENTIFIER,InstanceOf,InstanceOf)<SUB>551</SUB>> ]
+"1022" [label = <(METHOD,IsInstanceOf)<SUB>542</SUB>> ]
+"1101" [label = <(METHOD_RETURN,jboolean)<SUB>542</SUB>> ]
+  "1027" -> "1033" 
+  "1027" -> "1047" 
+  "1047" -> "1051" 
+  "1047" -> "1056" 
+  "1051" -> "1101" 
+  "1032" -> "1039" 
+  "1032" -> "1047" 
+  "1056" -> "1064" 
+  "1058" -> "1081" 
+  "1075" -> "1097" 
+  "1092" -> "1101" 
+  "1033" -> "1032" 
+  "1037" -> "1044" 
+  "1044" -> "1101" 
+  "1059" -> "1070" 
+  "1066" -> "1058" 
+  "1076" -> "1087" 
+  "1083" -> "1075" 
+  "1093" -> "1092" 
+  "1038" -> "1037" 
+  "1060" -> "1059" 
+  "1067" -> "1066" 
+  "1077" -> "1076" 
+  "1084" -> "1083" 
+  "1094" -> "1093" 
+  "1039" -> "1041" 
+  "1041" -> "1038" 
+  "1062" -> "1060" 
+  "1068" -> "1073" 
+  "1071" -> "1067" 
+  "1079" -> "1077" 
+  "1085" -> "1090" 
+  "1088" -> "1084" 
+  "1095" -> "1094" 
+  "1064" -> "1062" 
+  "1070" -> "1068" 
+  "1073" -> "1071" 
+  "1081" -> "1079" 
+  "1087" -> "1085" 
+  "1090" -> "1088" 
+  "1097" -> "1095" 
+  "1022" -> "1027" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/310-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/310-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/310-cfg.dot	2023-06-07 19:33:45.547394675 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/310-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.conditional" {  
-"17853" [label = <(METHOD,&lt;operator&gt;.conditional)> ]
-"17858" [label = <(METHOD_RETURN,ANY)> ]
-  "17853" -> "17858" 
+digraph "GetImagePointerSize" {  
+"17501" [label = <(METHOD,GetImagePointerSize)> ]
+"17504" [label = <(METHOD_RETURN,ANY)> ]
+  "17501" -> "17504" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/311-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/311-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/311-cfg.dot	2023-06-07 19:33:45.547394675 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/311-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "bad" {  
-"17859" [label = <(METHOD,bad)> ]
-"17861" [label = <(METHOD_RETURN,ANY)> ]
-  "17859" -> "17861" 
+digraph "GetClassLinker" {  
+"17505" [label = <(METHOD,GetClassLinker)> ]
+"17508" [label = <(METHOD_RETURN,ANY)> ]
+  "17505" -> "17508" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/312-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/312-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/312-cfg.dot	2023-06-07 19:33:45.547394675 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/312-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.logicalAnd" {  
-"17862" [label = <(METHOD,&lt;operator&gt;.logicalAnd)> ]
-"17866" [label = <(METHOD_RETURN,ANY)> ]
-  "17862" -> "17866" 
+digraph "&lt;operator&gt;.greaterThan" {  
+"17509" [label = <(METHOD,&lt;operator&gt;.greaterThan)> ]
+"17513" [label = <(METHOD_RETURN,ANY)> ]
+  "17509" -> "17513" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/313-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/313-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/313-cfg.dot	2023-06-07 19:33:45.547394675 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/313-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.fieldAccess" {  
-"17867" [label = <(METHOD,&lt;operator&gt;.fieldAccess)> ]
-"17871" [label = <(METHOD_RETURN,ANY)> ]
-  "17867" -> "17871" 
+digraph "&lt;operator&gt;.lessThan" {  
+"17514" [label = <(METHOD,&lt;operator&gt;.lessThan)> ]
+"17518" [label = <(METHOD_RETURN,ANY)> ]
+  "17514" -> "17518" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/314-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/314-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/314-cfg.dot	2023-06-07 19:33:45.547394675 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/314-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "is_ascii" {  
-"17872" [label = <(METHOD,is_ascii)> ]
-"17874" [label = <(METHOD_RETURN,ANY)> ]
-  "17872" -> "17874" 
+digraph "GetSystemClassLoader" {  
+"17519" [label = <(METHOD,GetSystemClassLoader)> ]
+"17522" [label = <(METHOD_RETURN,ANY)> ]
+  "17519" -> "17522" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/315-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/315-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/315-cfg.dot	2023-06-07 19:33:45.547394675 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/315-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "GetInstrumentation" {  
-"17875" [label = <(METHOD,GetInstrumentation)> ]
-"17878" [label = <(METHOD_RETURN,ANY)> ]
-  "17875" -> "17878" 
+digraph "c" {  
+"17523" [label = <(METHOD,c)> ]
+"17526" [label = <(METHOD_RETURN,ANY)> ]
+  "17523" -> "17526" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/316-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/316-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/316-cfg.dot	2023-06-07 19:33:45.547394675 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/316-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.indirectFieldAccess" {  
-"17879" [label = <(METHOD,&lt;operator&gt;.indirectFieldAccess)> ]
-"17883" [label = <(METHOD_RETURN,ANY)> ]
-  "17879" -> "17883" 
+digraph "Self" {  
+"17527" [label = <(METHOD,Self)> ]
+"17530" [label = <(METHOD_RETURN,ANY)> ]
+  "17527" -> "17530" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/317-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/317-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/317-cfg.dot	2023-06-07 19:33:45.547394675 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/317-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "Runtime::Current" {  
-"17884" [label = <(METHOD,Runtime::Current)> ]
-"17887" [label = <(METHOD_RETURN,ANY)> ]
-  "17884" -> "17887" 
+digraph "GetVm" {  
+"17531" [label = <(METHOD,GetVm)> ]
+"17534" [label = <(METHOD_RETURN,ANY)> ]
+  "17531" -> "17534" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/318-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/318-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/318-cfg.dot	2023-06-07 19:33:45.547394675 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/318-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.indirectIndexAccess" {  
-"17888" [label = <(METHOD,&lt;operator&gt;.indirectIndexAccess)> ]
-"17892" [label = <(METHOD_RETURN,ANY)> ]
-  "17888" -> "17892" 
+digraph "&lt;operator&gt;.cast" {  
+"17535" [label = <(METHOD,&lt;operator&gt;.cast)> ]
+"17539" [label = <(METHOD_RETURN,ANY)> ]
+  "17535" -> "17539" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/319-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/319-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/319-cfg.dot	2023-06-07 19:33:45.547394675 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/319-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "find" {  
-"17893" [label = <(METHOD,find)> ]
-"17897" [label = <(METHOD_RETURN,ANY)> ]
-  "17893" -> "17897" 
+digraph "CHECK_NON_NULL_ARGUMENT" {  
+"17540" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT)<SUB>412</SUB>> ]
+"17543" [label = <(METHOD_RETURN,ANY)> ]
+  "17540" -> "17543" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/32-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/32-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/32-cfg.dot	2023-06-07 19:33:45.347394697 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/32-cfg.dot	2023-06-07 19:33:51.937393993 +0330
@@ -1,63 +1,48 @@
-digraph "GetObjectClass" {  
-"1012" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_object))<SUB>597</SUB>> ]
-"1031" [label = <(soa,soa(env))<SUB>598</SUB>> ]
-"1033" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; o = soa.Decode&lt;mirror::Object&gt;(java_object))<SUB>599</SUB>> ]
-"1050" [label = <(RETURN,return soa.AddLocalReference&lt;jclass&gt;(o-&gt;GetClass());,return soa.AddLocalReference&lt;jclass&gt;(o-&gt;GetClass());)<SUB>600</SUB>> ]
-"1034" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; o)<SUB>599</SUB>> ]
-"1041" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(java_object))<SUB>599</SUB>> ]
-"1051" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jclass&gt;(o-&gt;GetClass()))<SUB>600</SUB>> ]
-"1035" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>599</SUB>> ]
-"1042" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>599</SUB>> ]
-"1052" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jclass)<SUB>600</SUB>> ]
-"1057" [label = <(GetClass,o-&gt;GetClass())<SUB>600</SUB>> ]
-"1016" [label = <(UNLIKELY,UNLIKELY((java_object) == nullptr))<SUB>597</SUB>> ]
-"1037" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>599</SUB>> ]
-"1043" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>599</SUB>> ]
-"1046" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>599</SUB>> ]
-"1053" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>600</SUB>> ]
-"1058" [label = <(&lt;operator&gt;.indirectFieldAccess,o-&gt;GetClass)<SUB>600</SUB>> ]
-"1017" [label = <(&lt;operator&gt;.equals,(java_object) == nullptr)<SUB>597</SUB>> ]
-"1021" [label = <(CHECK_NON_NULL_ARGUMENT(java_object),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_object == null&quot;))<SUB>597</SUB>> ]
-"1028" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_object),CHECK_NON_NULL_ARGUMENT(java_object))<SUB>597</SUB>> ]
-"1039" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>599</SUB>> ]
-"1045" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>599</SUB>> ]
-"1048" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>599</SUB>> ]
-"1055" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>600</SUB>> ]
-"1060" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>600</SUB>> ]
-"1022" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>597</SUB>> ]
-"1023" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>597</SUB>> ]
-"1025" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>597</SUB>> ]
-"1008" [label = <(METHOD,GetObjectClass)<SUB>596</SUB>> ]
-"1061" [label = <(METHOD_RETURN,jclass)<SUB>596</SUB>> ]
-  "1012" -> "1017" 
-  "1012" -> "1031" 
-  "1031" -> "1039" 
-  "1033" -> "1055" 
-  "1050" -> "1061" 
-  "1034" -> "1045" 
-  "1041" -> "1033" 
-  "1051" -> "1050" 
-  "1035" -> "1034" 
-  "1042" -> "1041" 
-  "1052" -> "1060" 
-  "1057" -> "1051" 
-  "1016" -> "1023" 
-  "1016" -> "1031" 
-  "1037" -> "1035" 
-  "1043" -> "1048" 
-  "1046" -> "1042" 
-  "1053" -> "1052" 
-  "1058" -> "1057" 
-  "1017" -> "1016" 
-  "1021" -> "1028" 
-  "1028" -> "1061" 
-  "1039" -> "1037" 
-  "1045" -> "1043" 
-  "1048" -> "1046" 
-  "1055" -> "1053" 
-  "1060" -> "1058" 
-  "1022" -> "1021" 
-  "1023" -> "1025" 
-  "1025" -> "1022" 
-  "1008" -> "1012" 
+digraph "Throw" {  
+"1108" [label = <(soa,soa(env))<SUB>556</SUB>> ]
+"1110" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Throwable&gt; exception = soa.Decode&lt;mirror::Throwable&gt;(java_exception))<SUB>557</SUB>> ]
+"1134" [label = <(SetException,soa.Self()-&gt;SetException(exception))<SUB>561</SUB>> ]
+"1142" [label = <(RETURN,return JNI_OK;,return JNI_OK;)<SUB>562</SUB>> ]
+"1111" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Throwable&gt; exception)<SUB>557</SUB>> ]
+"1118" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Throwable&gt;(java_exception))<SUB>557</SUB>> ]
+"1128" [label = <(&lt;operator&gt;.equals,exception == nullptr)<SUB>558</SUB>> ]
+"1135" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;SetException)<SUB>561</SUB>> ]
+"1112" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Throwable)<SUB>557</SUB>> ]
+"1119" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Throwable)<SUB>557</SUB>> ]
+"1132" [label = <(RETURN,return JNI_ERR;,return JNI_ERR;)<SUB>559</SUB>> ]
+"1136" [label = <(Self,soa.Self())<SUB>561</SUB>> ]
+"1140" [label = <(FIELD_IDENTIFIER,SetException,SetException)<SUB>561</SUB>> ]
+"1114" [label = <(&lt;operator&gt;.fieldAccess,mirror::Throwable)<SUB>557</SUB>> ]
+"1120" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>557</SUB>> ]
+"1123" [label = <(&lt;operator&gt;.fieldAccess,mirror::Throwable)<SUB>557</SUB>> ]
+"1137" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>561</SUB>> ]
+"1116" [label = <(FIELD_IDENTIFIER,Throwable,Throwable)<SUB>557</SUB>> ]
+"1122" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>557</SUB>> ]
+"1125" [label = <(FIELD_IDENTIFIER,Throwable,Throwable)<SUB>557</SUB>> ]
+"1139" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>561</SUB>> ]
+"1103" [label = <(METHOD,Throw)<SUB>555</SUB>> ]
+"1144" [label = <(METHOD_RETURN,jint)<SUB>555</SUB>> ]
+  "1108" -> "1116" 
+  "1110" -> "1128" 
+  "1134" -> "1142" 
+  "1142" -> "1144" 
+  "1111" -> "1122" 
+  "1118" -> "1110" 
+  "1128" -> "1132" 
+  "1128" -> "1139" 
+  "1135" -> "1134" 
+  "1112" -> "1111" 
+  "1119" -> "1118" 
+  "1132" -> "1144" 
+  "1136" -> "1140" 
+  "1140" -> "1135" 
+  "1114" -> "1112" 
+  "1120" -> "1125" 
+  "1123" -> "1119" 
+  "1137" -> "1136" 
+  "1116" -> "1114" 
+  "1122" -> "1120" 
+  "1125" -> "1123" 
+  "1139" -> "1137" 
+  "1103" -> "1108" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/320-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/320-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/320-cfg.dot	2023-06-07 19:33:45.547394675 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/320-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.shiftLeft" {  
-"17898" [label = <(METHOD,&lt;operator&gt;.shiftLeft)> ]
-"17902" [label = <(METHOD_RETURN,ANY)> ]
-  "17898" -> "17902" 
+digraph "UNLIKELY" {  
+"17544" [label = <(METHOD,UNLIKELY)> ]
+"17547" [label = <(METHOD_RETURN,ANY)> ]
+  "17544" -> "17547" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/321-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/321-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/321-cfg.dot	2023-06-07 19:33:45.547394675 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/321-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "LOG" {  
-"17903" [label = <(METHOD,LOG)> ]
-"17906" [label = <(METHOD_RETURN,ANY)> ]
-  "17903" -> "17906" 
+digraph "CHECK_NON_NULL_ARGUMENT(name)" {  
+"17548" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(name))> ]
+"17553" [label = <(METHOD_RETURN,ANY)> ]
+  "17548" -> "17553" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/322-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/322-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/322-cfg.dot	2023-06-07 19:33:45.547394675 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/322-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "std::replace" {  
-"17907" [label = <(METHOD,std::replace)> ]
-"17914" [label = <(METHOD_RETURN,ANY)> ]
-  "17907" -> "17914" 
+digraph "descriptor" {  
+"17554" [label = <(METHOD,descriptor)> ]
+"17557" [label = <(METHOD_RETURN,ANY)> ]
+  "17554" -> "17557" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/323-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/323-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/323-cfg.dot	2023-06-07 19:33:45.547394675 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/323-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "begin" {  
-"17915" [label = <(METHOD,begin)> ]
-"17918" [label = <(METHOD_RETURN,ANY)> ]
-  "17915" -> "17918" 
+digraph "soa" {  
+"17558" [label = <(METHOD,soa)> ]
+"17561" [label = <(METHOD_RETURN,ANY)> ]
+  "17558" -> "17561" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/324-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/324-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/324-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/324-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "end" {  
-"17919" [label = <(METHOD,end)> ]
-"17922" [label = <(METHOD_RETURN,ANY)> ]
-  "17919" -> "17922" 
+digraph "IsStarted" {  
+"17562" [label = <(METHOD,IsStarted)> ]
+"17565" [label = <(METHOD_RETURN,ANY)> ]
+  "17562" -> "17565" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/325-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/325-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/325-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/325-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "h_klass" {  
-"17923" [label = <(METHOD,h_klass)> ]
-"17926" [label = <(METHOD_RETURN,ANY)> ]
-  "17923" -> "17926" 
+digraph "class_loader" {  
+"17566" [label = <(METHOD,class_loader)> ]
+"17569" [label = <(METHOD_RETURN,ANY)> ]
+  "17566" -> "17569" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/326-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/326-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/326-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/326-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "NewHandle" {  
-"17927" [label = <(METHOD,NewHandle)> ]
-"17931" [label = <(METHOD_RETURN,ANY)> ]
-  "17927" -> "17931" 
+digraph "FindClass" {  
+"17570" [label = <(METHOD,FindClass)> ]
+"17574" [label = <(METHOD_RETURN,ANY)> ]
+  "17570" -> "17574" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/327-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/327-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/327-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/327-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "GetImagePointerSize" {  
-"17932" [label = <(METHOD,GetImagePointerSize)> ]
-"17935" [label = <(METHOD_RETURN,ANY)> ]
-  "17932" -> "17935" 
+digraph "c_str" {  
+"17575" [label = <(METHOD,c_str)> ]
+"17578" [label = <(METHOD_RETURN,ANY)> ]
+  "17575" -> "17578" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/328-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/328-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/328-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/328-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "GetClassLinker" {  
-"17936" [label = <(METHOD,GetClassLinker)> ]
-"17939" [label = <(METHOD_RETURN,ANY)> ]
-  "17936" -> "17939" 
+digraph "FindSystemClass" {  
+"17579" [label = <(METHOD,FindSystemClass)> ]
+"17584" [label = <(METHOD_RETURN,ANY)> ]
+  "17579" -> "17584" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/329-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/329-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/329-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/329-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.greaterThan" {  
-"17940" [label = <(METHOD,&lt;operator&gt;.greaterThan)> ]
-"17944" [label = <(METHOD_RETURN,ANY)> ]
-  "17940" -> "17944" 
+digraph "CHECK_NON_NULL_ARGUMENT(jlr_method)" {  
+"17585" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(jlr_method))> ]
+"17590" [label = <(METHOD_RETURN,ANY)> ]
+  "17585" -> "17590" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/33-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/33-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/33-cfg.dot	2023-06-07 19:33:45.347394697 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/33-cfg.dot	2023-06-07 19:33:51.937393993 +0330
@@ -1,72 +1,27 @@
-digraph "GetSuperclass" {  
-"1067" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_class))<SUB>604</SUB>> ]
-"1086" [label = <(soa,soa(env))<SUB>605</SUB>> ]
-"1088" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c = soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>606</SUB>> ]
-"1105" [label = <(RETURN,return soa.AddLocalReference&lt;jclass&gt;(c-&gt;IsInterface() ? nullptr : c-&gt;GetSuperClass());,return soa.AddLocalReference&lt;jclass&gt;(c-&gt;IsInterface() ? nullptr : c-&gt;GetSuperClass());)<SUB>607</SUB>> ]
-"1089" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c)<SUB>606</SUB>> ]
-"1096" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>606</SUB>> ]
-"1106" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jclass&gt;(c-&gt;IsInterface() ? nullptr : c-&gt;GetSuperClass()))<SUB>607</SUB>> ]
-"1090" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>606</SUB>> ]
-"1097" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>606</SUB>> ]
-"1107" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jclass)<SUB>607</SUB>> ]
-"1112" [label = <(&lt;operator&gt;.conditional,c-&gt;IsInterface() ? nullptr : c-&gt;GetSuperClass())<SUB>607</SUB>> ]
-"1071" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>604</SUB>> ]
-"1092" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>606</SUB>> ]
-"1098" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>606</SUB>> ]
-"1101" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>606</SUB>> ]
-"1108" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>607</SUB>> ]
-"1113" [label = <(IsInterface,c-&gt;IsInterface())<SUB>607</SUB>> ]
-"1118" [label = <(GetSuperClass,c-&gt;GetSuperClass())<SUB>607</SUB>> ]
-"1072" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>604</SUB>> ]
-"1076" [label = <(CHECK_NON_NULL_ARGUMENT(java_class),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class == null&quot;))<SUB>604</SUB>> ]
-"1083" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_class),CHECK_NON_NULL_ARGUMENT(java_class))<SUB>604</SUB>> ]
-"1094" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>606</SUB>> ]
-"1100" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>606</SUB>> ]
-"1103" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>606</SUB>> ]
-"1110" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>607</SUB>> ]
-"1114" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;IsInterface)<SUB>607</SUB>> ]
-"1119" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;GetSuperClass)<SUB>607</SUB>> ]
-"1077" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>604</SUB>> ]
-"1116" [label = <(FIELD_IDENTIFIER,IsInterface,IsInterface)<SUB>607</SUB>> ]
-"1121" [label = <(FIELD_IDENTIFIER,GetSuperClass,GetSuperClass)<SUB>607</SUB>> ]
-"1078" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>604</SUB>> ]
-"1080" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>604</SUB>> ]
-"1063" [label = <(METHOD,GetSuperclass)<SUB>603</SUB>> ]
-"1122" [label = <(METHOD_RETURN,jclass)<SUB>603</SUB>> ]
-  "1067" -> "1072" 
-  "1067" -> "1086" 
-  "1086" -> "1094" 
-  "1088" -> "1110" 
-  "1105" -> "1122" 
-  "1089" -> "1100" 
-  "1096" -> "1088" 
-  "1106" -> "1105" 
-  "1090" -> "1089" 
-  "1097" -> "1096" 
-  "1107" -> "1116" 
-  "1112" -> "1106" 
-  "1071" -> "1078" 
-  "1071" -> "1086" 
-  "1092" -> "1090" 
-  "1098" -> "1103" 
-  "1101" -> "1097" 
-  "1108" -> "1107" 
-  "1113" -> "1112" 
-  "1113" -> "1121" 
-  "1118" -> "1112" 
-  "1072" -> "1071" 
-  "1076" -> "1083" 
-  "1083" -> "1122" 
-  "1094" -> "1092" 
-  "1100" -> "1098" 
-  "1103" -> "1101" 
-  "1110" -> "1108" 
-  "1114" -> "1113" 
-  "1119" -> "1118" 
-  "1077" -> "1076" 
-  "1116" -> "1114" 
-  "1121" -> "1119" 
-  "1078" -> "1080" 
-  "1080" -> "1077" 
-  "1063" -> "1067" 
+digraph "ThrowNew" {  
+"1151" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(c, JNI_ERR))<SUB>566</SUB>> ]
+"1170" [label = <(RETURN,return ThrowNewException(env, c, msg, nullptr);,return ThrowNewException(env, c, msg, nullptr);)<SUB>567</SUB>> ]
+"1171" [label = <(ThrowNewException,ThrowNewException(env, c, msg, nullptr))<SUB>567</SUB>> ]
+"1156" [label = <(UNLIKELY,UNLIKELY((c) == nullptr))<SUB>566</SUB>> ]
+"1157" [label = <(&lt;operator&gt;.equals,(c) == nullptr)<SUB>566</SUB>> ]
+"1161" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN(c, JNI_ERR),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;c == null&quot;))<SUB>566</SUB>> ]
+"1168" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(c, JNI_ERR),CHECK_NON_NULL_ARGUMENT_RETURN(c, JNI_ERR))<SUB>566</SUB>> ]
+"1162" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>566</SUB>> ]
+"1163" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>566</SUB>> ]
+"1165" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>566</SUB>> ]
+"1146" [label = <(METHOD,ThrowNew)<SUB>565</SUB>> ]
+"1176" [label = <(METHOD_RETURN,jint)<SUB>565</SUB>> ]
+  "1151" -> "1157" 
+  "1151" -> "1171" 
+  "1170" -> "1176" 
+  "1171" -> "1170" 
+  "1156" -> "1163" 
+  "1156" -> "1171" 
+  "1157" -> "1156" 
+  "1161" -> "1168" 
+  "1168" -> "1176" 
+  "1162" -> "1161" 
+  "1163" -> "1165" 
+  "1165" -> "1162" 
+  "1146" -> "1151" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/330-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/330-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/330-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/330-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "GetSystemClassLoader" {  
-"17945" [label = <(METHOD,GetSystemClassLoader)> ]
-"17948" [label = <(METHOD_RETURN,ANY)> ]
-  "17945" -> "17948" 
+digraph "jni::EncodeArtMethod" {  
+"17591" [label = <(METHOD,jni::EncodeArtMethod)> ]
+"17595" [label = <(METHOD_RETURN,ANY)> ]
+  "17591" -> "17595" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/331-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/331-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/331-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/331-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "c" {  
-"17949" [label = <(METHOD,c)> ]
-"17952" [label = <(METHOD_RETURN,ANY)> ]
-  "17949" -> "17952" 
+digraph "ArtMethod::FromReflectedMethod" {  
+"17596" [label = <(METHOD,ArtMethod::FromReflectedMethod)> ]
+"17601" [label = <(METHOD_RETURN,ANY)> ]
+  "17596" -> "17601" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/332-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/332-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/332-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/332-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "Self" {  
-"17953" [label = <(METHOD,Self)> ]
-"17956" [label = <(METHOD_RETURN,ANY)> ]
-  "17953" -> "17956" 
+digraph "CHECK_NON_NULL_ARGUMENT(jlr_field)" {  
+"17602" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(jlr_field))> ]
+"17607" [label = <(METHOD_RETURN,ANY)> ]
+  "17602" -> "17607" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/333-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/333-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/333-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/333-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "GetVm" {  
-"17957" [label = <(METHOD,GetVm)> ]
-"17960" [label = <(METHOD_RETURN,ANY)> ]
-  "17957" -> "17960" 
+digraph "GetClass" {  
+"17608" [label = <(METHOD,GetClass)> ]
+"17611" [label = <(METHOD_RETURN,ANY)> ]
+  "17608" -> "17611" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/334-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/334-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/334-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/334-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT" {  
-"17961" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT)<SUB>491</SUB>> ]
-"17964" [label = <(METHOD_RETURN,ANY)> ]
-  "17961" -> "17964" 
+digraph "mirror::Field::StaticClass" {  
+"17612" [label = <(METHOD,mirror::Field::StaticClass)> ]
+"17615" [label = <(METHOD_RETURN,ANY)> ]
+  "17612" -> "17615" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/335-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/335-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/335-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/335-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "UNLIKELY" {  
-"17965" [label = <(METHOD,UNLIKELY)> ]
-"17968" [label = <(METHOD_RETURN,ANY)> ]
-  "17965" -> "17968" 
+digraph "::DownCast" {  
+"17616" [label = <(METHOD,::DownCast)> ]
+"17620" [label = <(METHOD_RETURN,ANY)> ]
+  "17616" -> "17620" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/336-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/336-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/336-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/336-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT(name)" {  
-"17969" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(name))> ]
-"17974" [label = <(METHOD_RETURN,ANY)> ]
-  "17969" -> "17974" 
+digraph "jni::EncodeArtField" {  
+"17621" [label = <(METHOD,jni::EncodeArtField)> ]
+"17625" [label = <(METHOD_RETURN,ANY)> ]
+  "17621" -> "17625" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/337-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/337-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/337-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/337-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "descriptor" {  
-"17975" [label = <(METHOD,descriptor)> ]
-"17978" [label = <(METHOD_RETURN,ANY)> ]
-  "17975" -> "17978" 
+digraph "GetArtField" {  
+"17626" [label = <(METHOD,GetArtField)> ]
+"17629" [label = <(METHOD_RETURN,ANY)> ]
+  "17626" -> "17629" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/338-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/338-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/338-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/338-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "soa" {  
-"17979" [label = <(METHOD,soa)> ]
-"17982" [label = <(METHOD_RETURN,ANY)> ]
-  "17979" -> "17982" 
+digraph "CHECK_NON_NULL_ARGUMENT(mid)" {  
+"17630" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(mid))> ]
+"17635" [label = <(METHOD_RETURN,ANY)> ]
+  "17630" -> "17635" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/339-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/339-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/339-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/339-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "IsStarted" {  
-"17983" [label = <(METHOD,IsStarted)> ]
-"17986" [label = <(METHOD_RETURN,ANY)> ]
-  "17983" -> "17986" 
+digraph "jni::DecodeArtMethod" {  
+"17636" [label = <(METHOD,jni::DecodeArtMethod)> ]
+"17640" [label = <(METHOD_RETURN,ANY)> ]
+  "17636" -> "17640" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/34-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/34-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/34-cfg.dot	2023-06-07 19:33:45.347394697 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/34-cfg.dot	2023-06-07 19:33:51.937393993 +0330
@@ -1,97 +1,23 @@
-digraph "IsAssignableFrom" {  
-"1129" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(java_class1, JNI_FALSE))<SUB>613</SUB>> ]
-"1148" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(java_class2, JNI_FALSE))<SUB>614</SUB>> ]
-"1168" [label = <(soa,soa(env))<SUB>615</SUB>> ]
-"1170" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c1 = soa.Decode&lt;mirror::Class&gt;(java_class1))<SUB>616</SUB>> ]
-"1187" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c2 = soa.Decode&lt;mirror::Class&gt;(java_class2))<SUB>617</SUB>> ]
-"1204" [label = <(RETURN,return c2-&gt;IsAssignableFrom(c1) ? JNI_TRUE : JNI_FALSE;,return c2-&gt;IsAssignableFrom(c1) ? JNI_TRUE : JNI_FALSE;)<SUB>618</SUB>> ]
-"1171" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c1)<SUB>616</SUB>> ]
-"1178" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(java_class1))<SUB>616</SUB>> ]
-"1188" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c2)<SUB>617</SUB>> ]
-"1195" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(java_class2))<SUB>617</SUB>> ]
-"1205" [label = <(&lt;operator&gt;.conditional,c2-&gt;IsAssignableFrom(c1) ? JNI_TRUE : JNI_FALSE)<SUB>618</SUB>> ]
-"1172" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>616</SUB>> ]
-"1179" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>616</SUB>> ]
-"1189" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>617</SUB>> ]
-"1196" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>617</SUB>> ]
-"1206" [label = <(IsAssignableFrom,c2-&gt;IsAssignableFrom(c1))<SUB>618</SUB>> ]
-"1134" [label = <(UNLIKELY,UNLIKELY((java_class1) == nullptr))<SUB>613</SUB>> ]
-"1153" [label = <(UNLIKELY,UNLIKELY((java_class2) == nullptr))<SUB>614</SUB>> ]
-"1174" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>616</SUB>> ]
-"1180" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>616</SUB>> ]
-"1183" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>616</SUB>> ]
-"1191" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>617</SUB>> ]
-"1197" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>617</SUB>> ]
-"1200" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>617</SUB>> ]
-"1207" [label = <(&lt;operator&gt;.indirectFieldAccess,c2-&gt;IsAssignableFrom)<SUB>618</SUB>> ]
-"1135" [label = <(&lt;operator&gt;.equals,(java_class1) == nullptr)<SUB>613</SUB>> ]
-"1139" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN(java_class1, JNI_FALSE),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class1 == null&quot;))<SUB>613</SUB>> ]
-"1146" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(java_class1, JNI_FALSE),CHECK_NON_NULL_ARGUMENT_RETURN(java_class1, JNI_FALSE))<SUB>613</SUB>> ]
-"1154" [label = <(&lt;operator&gt;.equals,(java_class2) == nullptr)<SUB>614</SUB>> ]
-"1158" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN(java_class2, JNI_FALSE),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class2 == null&quot;))<SUB>614</SUB>> ]
-"1165" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(java_class2, JNI_FALSE),CHECK_NON_NULL_ARGUMENT_RETURN(java_class2, JNI_FALSE))<SUB>614</SUB>> ]
-"1176" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>616</SUB>> ]
-"1182" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>616</SUB>> ]
-"1185" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>616</SUB>> ]
-"1193" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>617</SUB>> ]
-"1199" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>617</SUB>> ]
-"1202" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>617</SUB>> ]
-"1209" [label = <(FIELD_IDENTIFIER,IsAssignableFrom,IsAssignableFrom)<SUB>618</SUB>> ]
-"1140" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>613</SUB>> ]
-"1159" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>614</SUB>> ]
-"1141" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>613</SUB>> ]
-"1143" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>613</SUB>> ]
-"1160" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>614</SUB>> ]
-"1162" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>614</SUB>> ]
-"1124" [label = <(METHOD,IsAssignableFrom)<SUB>612</SUB>> ]
-"1213" [label = <(METHOD_RETURN,jboolean)<SUB>612</SUB>> ]
-  "1129" -> "1135" 
-  "1129" -> "1148" 
-  "1148" -> "1154" 
-  "1148" -> "1168" 
-  "1168" -> "1176" 
-  "1170" -> "1193" 
-  "1187" -> "1209" 
-  "1204" -> "1213" 
-  "1171" -> "1182" 
-  "1178" -> "1170" 
-  "1188" -> "1199" 
-  "1195" -> "1187" 
-  "1205" -> "1204" 
-  "1172" -> "1171" 
-  "1179" -> "1178" 
-  "1189" -> "1188" 
-  "1196" -> "1195" 
-  "1206" -> "1205" 
-  "1134" -> "1141" 
-  "1134" -> "1148" 
-  "1153" -> "1160" 
-  "1153" -> "1168" 
-  "1174" -> "1172" 
-  "1180" -> "1185" 
-  "1183" -> "1179" 
-  "1191" -> "1189" 
-  "1197" -> "1202" 
-  "1200" -> "1196" 
-  "1207" -> "1206" 
-  "1135" -> "1134" 
-  "1139" -> "1146" 
-  "1146" -> "1213" 
-  "1154" -> "1153" 
-  "1158" -> "1165" 
-  "1165" -> "1213" 
-  "1176" -> "1174" 
-  "1182" -> "1180" 
-  "1185" -> "1183" 
-  "1193" -> "1191" 
-  "1199" -> "1197" 
-  "1202" -> "1200" 
-  "1209" -> "1207" 
-  "1140" -> "1139" 
-  "1159" -> "1158" 
-  "1141" -> "1143" 
-  "1143" -> "1140" 
-  "1160" -> "1162" 
-  "1162" -> "1159" 
-  "1124" -> "1129" 
+digraph "ExceptionCheck" {  
+"1181" [label = <(RETURN,return static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_-&gt;IsExceptionPending() ? JNI_TRUE : JNI_FALSE;,return static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_-&gt;IsExceptionPending() ? JNI_TRUE : JNI_FALSE;)<SUB>571</SUB>> ]
+"1182" [label = <(&lt;operator&gt;.conditional,static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_-&gt;IsExceptionPending() ? JNI_TRUE : JNI_FALSE)<SUB>571</SUB>> ]
+"1183" [label = <(IsExceptionPending,static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_-&gt;IsExceptionPending())<SUB>571</SUB>> ]
+"1184" [label = <(&lt;operator&gt;.indirectFieldAccess,static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_-&gt;IsExceptionPending)<SUB>571</SUB>> ]
+"1185" [label = <(&lt;operator&gt;.indirectFieldAccess,static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_)<SUB>571</SUB>> ]
+"1190" [label = <(FIELD_IDENTIFIER,IsExceptionPending,IsExceptionPending)<SUB>571</SUB>> ]
+"1186" [label = <(&lt;operator&gt;.cast,static_cast&lt;JNIEnvExt*&gt;(env))<SUB>571</SUB>> ]
+"1189" [label = <(FIELD_IDENTIFIER,self_,self_)<SUB>571</SUB>> ]
+"1187" [label = <(UNKNOWN,JNIEnvExt*,JNIEnvExt*)<SUB>571</SUB>> ]
+"1178" [label = <(METHOD,ExceptionCheck)<SUB>570</SUB>> ]
+"1193" [label = <(METHOD_RETURN,jboolean)<SUB>570</SUB>> ]
+  "1181" -> "1193" 
+  "1182" -> "1181" 
+  "1183" -> "1182" 
+  "1184" -> "1183" 
+  "1185" -> "1190" 
+  "1190" -> "1184" 
+  "1186" -> "1189" 
+  "1189" -> "1185" 
+  "1187" -> "1186" 
+  "1178" -> "1187" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/340-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/340-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/340-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/340-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "class_loader" {  
-"17987" [label = <(METHOD,class_loader)> ]
-"17990" [label = <(METHOD_RETURN,ANY)> ]
-  "17987" -> "17990" 
+digraph "&lt;operator&gt;.multiplication" {  
+"17641" [label = <(METHOD,&lt;operator&gt;.multiplication)> ]
+"17645" [label = <(METHOD_RETURN,ANY)> ]
+  "17641" -> "17645" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/341-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/341-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/341-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/341-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "FindClass" {  
-"17991" [label = <(METHOD,FindClass)> ]
-"17995" [label = <(METHOD_RETURN,ANY)> ]
-  "17991" -> "17995" 
+digraph "DCHECK_EQ" {  
+"17646" [label = <(METHOD,DCHECK_EQ)> ]
+"17650" [label = <(METHOD_RETURN,ANY)> ]
+  "17646" -> "17650" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/342-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/342-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/342-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/342-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "c_str" {  
-"17996" [label = <(METHOD,c_str)> ]
-"17999" [label = <(METHOD_RETURN,ANY)> ]
-  "17996" -> "17999" 
+digraph "DCHECK" {  
+"17651" [label = <(METHOD,DCHECK)> ]
+"17654" [label = <(METHOD_RETURN,ANY)> ]
+  "17651" -> "17654" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/343-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/343-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/343-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/343-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "FindSystemClass" {  
-"18000" [label = <(METHOD,FindSystemClass)> ]
-"18005" [label = <(METHOD_RETURN,ANY)> ]
-  "18000" -> "18005" 
+digraph "&lt;operator&gt;.logicalNot" {  
+"17655" [label = <(METHOD,&lt;operator&gt;.logicalNot)> ]
+"17658" [label = <(METHOD_RETURN,ANY)> ]
+  "17655" -> "17658" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/344-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/344-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/344-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/344-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT(jlr_method)" {  
-"18006" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(jlr_method))> ]
-"18011" [label = <(METHOD_RETURN,ANY)> ]
-  "18006" -> "18011" 
+digraph "IsActiveTransaction" {  
+"17659" [label = <(METHOD,IsActiveTransaction)> ]
+"17662" [label = <(METHOD_RETURN,ANY)> ]
+  "17659" -> "17662" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/345-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/345-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/345-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/345-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "jni::EncodeArtMethod" {  
-"18012" [label = <(METHOD,jni::EncodeArtMethod)> ]
-"18016" [label = <(METHOD_RETURN,ANY)> ]
-  "18012" -> "18016" 
+digraph "IsConstructor" {  
+"17663" [label = <(METHOD,IsConstructor)> ]
+"17666" [label = <(METHOD_RETURN,ANY)> ]
+  "17663" -> "17666" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/346-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/346-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/346-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/346-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "ArtMethod::FromReflectedMethod" {  
-"18017" [label = <(METHOD,ArtMethod::FromReflectedMethod)> ]
-"18022" [label = <(METHOD_RETURN,ANY)> ]
-  "18017" -> "18022" 
+digraph "mirror::Constructor::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;" {  
+"17667" [label = <(METHOD,mirror::Constructor::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;)> ]
+"17672" [label = <(METHOD_RETURN,ANY)> ]
+  "17667" -> "17672" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/347-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/347-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/347-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/347-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT(jlr_field)" {  
-"18023" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(jlr_field))> ]
-"18028" [label = <(METHOD_RETURN,ANY)> ]
-  "18023" -> "18028" 
+digraph "mirror::Method::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;" {  
+"17673" [label = <(METHOD,mirror::Method::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;)> ]
+"17678" [label = <(METHOD_RETURN,ANY)> ]
+  "17673" -> "17678" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/348-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/348-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/348-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/348-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "GetClass" {  
-"18029" [label = <(METHOD,GetClass)> ]
-"18032" [label = <(METHOD_RETURN,ANY)> ]
-  "18029" -> "18032" 
+digraph "CHECK_NON_NULL_ARGUMENT(fid)" {  
+"17679" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(fid))> ]
+"17684" [label = <(METHOD_RETURN,ANY)> ]
+  "17679" -> "17684" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/349-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/349-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/349-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/349-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "mirror::Field::StaticClass" {  
-"18033" [label = <(METHOD,mirror::Field::StaticClass)> ]
-"18036" [label = <(METHOD_RETURN,ANY)> ]
-  "18033" -> "18036" 
+digraph "jni::DecodeArtField" {  
+"17685" [label = <(METHOD,jni::DecodeArtField)> ]
+"17689" [label = <(METHOD_RETURN,ANY)> ]
+  "17685" -> "17689" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/35-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/35-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/35-cfg.dot	2023-06-07 19:33:45.347394697 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/35-cfg.dot	2023-06-07 19:33:51.937393993 +0330
@@ -1,84 +1,19 @@
-digraph "IsInstanceOf" {  
-"1220" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_FALSE))<SUB>622</SUB>> ]
-"1240" [label = <(&lt;operator&gt;.equals,jobj == nullptr)<SUB>623</SUB>> ]
-"1244" [label = <(RETURN,return JNI_TRUE;,return JNI_TRUE;)<SUB>625</SUB>> ]
-"1225" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>622</SUB>> ]
-"1249" [label = <(soa,soa(env))<SUB>627</SUB>> ]
-"1251" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; obj = soa.Decode&lt;mirror::Object&gt;(jobj))<SUB>628</SUB>> ]
-"1268" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c = soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>629</SUB>> ]
-"1285" [label = <(RETURN,return obj-&gt;InstanceOf(c) ? JNI_TRUE : JNI_FALSE;,return obj-&gt;InstanceOf(c) ? JNI_TRUE : JNI_FALSE;)<SUB>630</SUB>> ]
-"1226" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>622</SUB>> ]
-"1230" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_FALSE),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class == null&quot;))<SUB>622</SUB>> ]
-"1237" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_FALSE),CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_FALSE))<SUB>622</SUB>> ]
-"1252" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; obj)<SUB>628</SUB>> ]
-"1259" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(jobj))<SUB>628</SUB>> ]
-"1269" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c)<SUB>629</SUB>> ]
-"1276" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>629</SUB>> ]
-"1286" [label = <(&lt;operator&gt;.conditional,obj-&gt;InstanceOf(c) ? JNI_TRUE : JNI_FALSE)<SUB>630</SUB>> ]
-"1231" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>622</SUB>> ]
-"1253" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>628</SUB>> ]
-"1260" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>628</SUB>> ]
-"1270" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>629</SUB>> ]
-"1277" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>629</SUB>> ]
-"1287" [label = <(InstanceOf,obj-&gt;InstanceOf(c))<SUB>630</SUB>> ]
-"1232" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>622</SUB>> ]
-"1234" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>622</SUB>> ]
-"1255" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>628</SUB>> ]
-"1261" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>628</SUB>> ]
-"1264" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>628</SUB>> ]
-"1272" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>629</SUB>> ]
-"1278" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>629</SUB>> ]
-"1281" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>629</SUB>> ]
-"1288" [label = <(&lt;operator&gt;.indirectFieldAccess,obj-&gt;InstanceOf)<SUB>630</SUB>> ]
-"1257" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>628</SUB>> ]
-"1263" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>628</SUB>> ]
-"1266" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>628</SUB>> ]
-"1274" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>629</SUB>> ]
-"1280" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>629</SUB>> ]
-"1283" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>629</SUB>> ]
-"1290" [label = <(FIELD_IDENTIFIER,InstanceOf,InstanceOf)<SUB>630</SUB>> ]
-"1215" [label = <(METHOD,IsInstanceOf)<SUB>621</SUB>> ]
-"1294" [label = <(METHOD_RETURN,jboolean)<SUB>621</SUB>> ]
-  "1220" -> "1226" 
-  "1220" -> "1240" 
-  "1240" -> "1244" 
-  "1240" -> "1249" 
-  "1244" -> "1294" 
-  "1225" -> "1232" 
-  "1225" -> "1240" 
-  "1249" -> "1257" 
-  "1251" -> "1274" 
-  "1268" -> "1290" 
-  "1285" -> "1294" 
-  "1226" -> "1225" 
-  "1230" -> "1237" 
-  "1237" -> "1294" 
-  "1252" -> "1263" 
-  "1259" -> "1251" 
-  "1269" -> "1280" 
-  "1276" -> "1268" 
-  "1286" -> "1285" 
-  "1231" -> "1230" 
-  "1253" -> "1252" 
-  "1260" -> "1259" 
-  "1270" -> "1269" 
-  "1277" -> "1276" 
-  "1287" -> "1286" 
-  "1232" -> "1234" 
-  "1234" -> "1231" 
-  "1255" -> "1253" 
-  "1261" -> "1266" 
-  "1264" -> "1260" 
-  "1272" -> "1270" 
-  "1278" -> "1283" 
-  "1281" -> "1277" 
-  "1288" -> "1287" 
-  "1257" -> "1255" 
-  "1263" -> "1261" 
-  "1266" -> "1264" 
-  "1274" -> "1272" 
-  "1280" -> "1278" 
-  "1283" -> "1281" 
-  "1290" -> "1288" 
-  "1215" -> "1220" 
+digraph "ExceptionClear" {  
+"1199" [label = <(soa,soa(env))<SUB>575</SUB>> ]
+"1201" [label = <(ClearException,soa.Self()-&gt;ClearException())<SUB>576</SUB>> ]
+"1202" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;ClearException)<SUB>576</SUB>> ]
+"1203" [label = <(Self,soa.Self())<SUB>576</SUB>> ]
+"1207" [label = <(FIELD_IDENTIFIER,ClearException,ClearException)<SUB>576</SUB>> ]
+"1204" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>576</SUB>> ]
+"1206" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>576</SUB>> ]
+"1195" [label = <(METHOD,ExceptionClear)<SUB>574</SUB>> ]
+"1208" [label = <(METHOD_RETURN,void)<SUB>574</SUB>> ]
+  "1199" -> "1206" 
+  "1201" -> "1208" 
+  "1202" -> "1201" 
+  "1203" -> "1207" 
+  "1207" -> "1202" 
+  "1204" -> "1203" 
+  "1206" -> "1204" 
+  "1195" -> "1199" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/350-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/350-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/350-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/350-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "::DownCast" {  
-"18037" [label = <(METHOD,::DownCast)> ]
-"18041" [label = <(METHOD_RETURN,ANY)> ]
-  "18037" -> "18041" 
+digraph "&lt;operator&gt;.bracketedPrimary" {  
+"17690" [label = <(METHOD,&lt;operator&gt;.bracketedPrimary)> ]
+"17693" [label = <(METHOD_RETURN,ANY)> ]
+  "17690" -> "17693" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/351-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/351-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/351-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/351-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "jni::EncodeArtField" {  
-"18042" [label = <(METHOD,jni::EncodeArtField)> ]
-"18046" [label = <(METHOD_RETURN,ANY)> ]
-  "18042" -> "18046" 
+digraph "&lt;operator&gt;.expressionList" {  
+"17694" [label = <(METHOD,&lt;operator&gt;.expressionList)> ]
+"17699" [label = <(METHOD_RETURN,ANY)> ]
+  "17694" -> "17699" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/352-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/352-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/352-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/352-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "GetArtField" {  
-"18047" [label = <(METHOD,GetArtField)> ]
-"18050" [label = <(METHOD_RETURN,ANY)> ]
-  "18047" -> "18050" 
+digraph "CHECK_NON_NULL_ARGUMENT(java_object)" {  
+"17700" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(java_object))> ]
+"17705" [label = <(METHOD_RETURN,ANY)> ]
+  "17700" -> "17705" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/353-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/353-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/353-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/353-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT(mid)" {  
-"18051" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(mid))> ]
-"18056" [label = <(METHOD_RETURN,ANY)> ]
-  "18051" -> "18056" 
+digraph "CHECK_NON_NULL_ARGUMENT(java_class)" {  
+"17706" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(java_class))> ]
+"17711" [label = <(METHOD_RETURN,ANY)> ]
+  "17706" -> "17711" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/354-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/354-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/354-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/354-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "jni::DecodeArtMethod" {  
-"18057" [label = <(METHOD,jni::DecodeArtMethod)> ]
-"18061" [label = <(METHOD_RETURN,ANY)> ]
-  "18057" -> "18061" 
+digraph "&lt;operator&gt;.conditional" {  
+"17712" [label = <(METHOD,&lt;operator&gt;.conditional)> ]
+"17717" [label = <(METHOD_RETURN,ANY)> ]
+  "17712" -> "17717" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/355-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/355-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/355-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/355-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.multiplication" {  
-"18062" [label = <(METHOD,&lt;operator&gt;.multiplication)> ]
-"18066" [label = <(METHOD_RETURN,ANY)> ]
-  "18062" -> "18066" 
+digraph "IsInterface" {  
+"17718" [label = <(METHOD,IsInterface)> ]
+"17721" [label = <(METHOD_RETURN,ANY)> ]
+  "17718" -> "17721" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/356-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/356-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/356-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/356-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "DCHECK_EQ" {  
-"18067" [label = <(METHOD,DCHECK_EQ)> ]
-"18071" [label = <(METHOD_RETURN,ANY)> ]
-  "18067" -> "18071" 
+digraph "GetSuperClass" {  
+"17722" [label = <(METHOD,GetSuperClass)> ]
+"17725" [label = <(METHOD_RETURN,ANY)> ]
+  "17722" -> "17725" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/357-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/357-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/357-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/357-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "DCHECK" {  
-"18072" [label = <(METHOD,DCHECK)> ]
-"18075" [label = <(METHOD_RETURN,ANY)> ]
-  "18072" -> "18075" 
+digraph "CHECK_NON_NULL_ARGUMENT_RETURN" {  
+"17726" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN)<SUB>421</SUB>> ]
+"17730" [label = <(METHOD_RETURN,ANY)> ]
+  "17726" -> "17730" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/358-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/358-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/358-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/358-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.logicalNot" {  
-"18076" [label = <(METHOD,&lt;operator&gt;.logicalNot)> ]
-"18079" [label = <(METHOD_RETURN,ANY)> ]
-  "18076" -> "18079" 
+digraph "CHECK_NON_NULL_ARGUMENT_RETURN(java_class1, JNI_FALSE)" {  
+"17731" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN(java_class1, JNI_FALSE))> ]
+"17736" [label = <(METHOD_RETURN,ANY)> ]
+  "17731" -> "17736" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/359-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/359-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/359-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/359-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "IsActiveTransaction" {  
-"18080" [label = <(METHOD,IsActiveTransaction)> ]
-"18083" [label = <(METHOD_RETURN,ANY)> ]
-  "18080" -> "18083" 
+digraph "CHECK_NON_NULL_ARGUMENT_RETURN(java_class2, JNI_FALSE)" {  
+"17737" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN(java_class2, JNI_FALSE))> ]
+"17742" [label = <(METHOD_RETURN,ANY)> ]
+  "17737" -> "17742" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/36-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/36-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/36-cfg.dot	2023-06-07 19:33:45.347394697 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/36-cfg.dot	2023-06-07 19:33:51.937393993 +0330
@@ -1,48 +1,240 @@
-digraph "Throw" {  
-"1301" [label = <(soa,soa(env))<SUB>635</SUB>> ]
-"1303" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Throwable&gt; exception = soa.Decode&lt;mirror::Throwable&gt;(java_exception))<SUB>636</SUB>> ]
-"1327" [label = <(SetException,soa.Self()-&gt;SetException(exception))<SUB>640</SUB>> ]
-"1335" [label = <(RETURN,return JNI_OK;,return JNI_OK;)<SUB>641</SUB>> ]
-"1304" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Throwable&gt; exception)<SUB>636</SUB>> ]
-"1311" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Throwable&gt;(java_exception))<SUB>636</SUB>> ]
-"1321" [label = <(&lt;operator&gt;.equals,exception == nullptr)<SUB>637</SUB>> ]
-"1328" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;SetException)<SUB>640</SUB>> ]
-"1305" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Throwable)<SUB>636</SUB>> ]
-"1312" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Throwable)<SUB>636</SUB>> ]
-"1325" [label = <(RETURN,return JNI_ERR;,return JNI_ERR;)<SUB>638</SUB>> ]
-"1329" [label = <(Self,soa.Self())<SUB>640</SUB>> ]
-"1333" [label = <(FIELD_IDENTIFIER,SetException,SetException)<SUB>640</SUB>> ]
-"1307" [label = <(&lt;operator&gt;.fieldAccess,mirror::Throwable)<SUB>636</SUB>> ]
-"1313" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>636</SUB>> ]
-"1316" [label = <(&lt;operator&gt;.fieldAccess,mirror::Throwable)<SUB>636</SUB>> ]
-"1330" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>640</SUB>> ]
-"1309" [label = <(FIELD_IDENTIFIER,Throwable,Throwable)<SUB>636</SUB>> ]
-"1315" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>636</SUB>> ]
-"1318" [label = <(FIELD_IDENTIFIER,Throwable,Throwable)<SUB>636</SUB>> ]
-"1332" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>640</SUB>> ]
-"1296" [label = <(METHOD,Throw)<SUB>634</SUB>> ]
-"1337" [label = <(METHOD_RETURN,jint)<SUB>634</SUB>> ]
-  "1301" -> "1309" 
-  "1303" -> "1321" 
-  "1327" -> "1335" 
-  "1335" -> "1337" 
-  "1304" -> "1315" 
-  "1311" -> "1303" 
-  "1321" -> "1325" 
-  "1321" -> "1332" 
-  "1328" -> "1327" 
-  "1305" -> "1304" 
-  "1312" -> "1311" 
-  "1325" -> "1337" 
-  "1329" -> "1333" 
-  "1333" -> "1328" 
-  "1307" -> "1305" 
-  "1313" -> "1318" 
-  "1316" -> "1312" 
-  "1330" -> "1329" 
-  "1309" -> "1307" 
-  "1315" -> "1313" 
-  "1318" -> "1316" 
-  "1332" -> "1330" 
-  "1296" -> "1301" 
+digraph "ExceptionDescribe" {  
+"1214" [label = <(soa,soa(env))<SUB>580</SUB>> ]
+"1227" [label = <(&lt;operator&gt;.greaterThan,StackHandleScope&lt;1&gt; hs(soa.Self()))<SUB>587</SUB>> ]
+"1236" [label = <(&lt;operator&gt;.greaterThan,Handle&lt;mirror::Throwable&gt; old_exception(\012        hs.NewHandle&lt;mirror::Throwable&gt;(soa.Self()-&gt;GetException())))<SUB>588</SUB>> ]
+"1258" [label = <(ClearException,soa.Self()-&gt;ClearException())<SUB>590</SUB>> ]
+"1265" [label = <(&lt;operator&gt;.greaterThan,ScopedLocalRef&lt;jthrowable&gt; exception(env,\012                                         soa.AddLocalReference&lt;jthrowable&gt;(old_exception.Get())))<SUB>591</SUB>> ]
+"1281" [label = <(&lt;operator&gt;.greaterThan,ScopedLocalRef&lt;jclass&gt; exception_class(env, env-&gt;GetObjectClass(exception.get())))<SUB>593</SUB>> ]
+"1296" [label = <(&lt;operator&gt;.assignment,mid = env-&gt;GetMethodID(exception_class.get(), &quot;printStackTrace&quot;, &quot;()V&quot;))<SUB>594</SUB>> ]
+"1375" [label = <(SetException,soa.Self()-&gt;SetException(old_exception.Get()))<SUB>606</SUB>> ]
+"1217" [label = <(&lt;operator&gt;.logicalNot,!soa.Self()-&gt;GetException())<SUB>583</SUB>> ]
+"1228" [label = <(&lt;operator&gt;.lessThan,StackHandleScope&lt;1)<SUB>587</SUB>> ]
+"1231" [label = <(hs,hs(soa.Self()))<SUB>587</SUB>> ]
+"1237" [label = <(&lt;operator&gt;.lessThan,Handle&lt;mirror::Throwable)<SUB>588</SUB>> ]
+"1242" [label = <(old_exception,old_exception(\012        hs.NewHandle&lt;mirror::Throwable&gt;(soa.Self()-&gt;GetException())))<SUB>588</SUB>> ]
+"1259" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;ClearException)<SUB>590</SUB>> ]
+"1266" [label = <(&lt;operator&gt;.lessThan,ScopedLocalRef&lt;jthrowable)<SUB>591</SUB>> ]
+"1269" [label = <(exception,exception(env,\012                                         soa.AddLocalReference&lt;jthrowable&gt;(old_exception.Get())))<SUB>591</SUB>> ]
+"1282" [label = <(&lt;operator&gt;.lessThan,ScopedLocalRef&lt;jclass)<SUB>593</SUB>> ]
+"1285" [label = <(exception_class,exception_class(env, env-&gt;GetObjectClass(exception.get())))<SUB>593</SUB>> ]
+"1298" [label = <(GetMethodID,env-&gt;GetMethodID(exception_class.get(), &quot;printStackTrace&quot;, &quot;()V&quot;))<SUB>594</SUB>> ]
+"1309" [label = <(&lt;operator&gt;.equals,mid == nullptr)<SUB>595</SUB>> ]
+"1376" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;SetException)<SUB>606</SUB>> ]
+"1382" [label = <(Get,old_exception.Get())<SUB>606</SUB>> ]
+"1218" [label = <(GetException,soa.Self()-&gt;GetException())<SUB>583</SUB>> ]
+"1226" [label = <(RETURN,return;,return;)<SUB>584</SUB>> ]
+"1232" [label = <(Self,soa.Self())<SUB>587</SUB>> ]
+"1239" [label = <(&lt;operator&gt;.fieldAccess,mirror::Throwable)<SUB>588</SUB>> ]
+"1243" [label = <(&lt;operator&gt;.greaterThan,hs.NewHandle&lt;mirror::Throwable&gt;(soa.Self()-&gt;GetException()))<SUB>589</SUB>> ]
+"1260" [label = <(Self,soa.Self())<SUB>590</SUB>> ]
+"1264" [label = <(FIELD_IDENTIFIER,ClearException,ClearException)<SUB>590</SUB>> ]
+"1271" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jthrowable&gt;(old_exception.Get()))<SUB>592</SUB>> ]
+"1287" [label = <(GetObjectClass,env-&gt;GetObjectClass(exception.get()))<SUB>593</SUB>> ]
+"1299" [label = <(&lt;operator&gt;.indirectFieldAccess,env-&gt;GetMethodID)<SUB>594</SUB>> ]
+"1302" [label = <(get,exception_class.get())<SUB>594</SUB>> ]
+"1313" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI WARNING: no printStackTrace()V in &quot;\012 &lt;&lt; mirror::Object::PrettyTypeOf(old_exception.Get()))<SUB>596</SUB>> ]
+"1377" [label = <(Self,soa.Self())<SUB>606</SUB>> ]
+"1381" [label = <(FIELD_IDENTIFIER,SetException,SetException)<SUB>606</SUB>> ]
+"1383" [label = <(&lt;operator&gt;.fieldAccess,old_exception.Get)<SUB>606</SUB>> ]
+"1219" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;GetException)<SUB>583</SUB>> ]
+"1233" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>587</SUB>> ]
+"1241" [label = <(FIELD_IDENTIFIER,Throwable,Throwable)<SUB>588</SUB>> ]
+"1244" [label = <(&lt;operator&gt;.lessThan,hs.NewHandle&lt;mirror::Throwable)<SUB>589</SUB>> ]
+"1251" [label = <(GetException,soa.Self()-&gt;GetException())<SUB>589</SUB>> ]
+"1261" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>590</SUB>> ]
+"1272" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jthrowable)<SUB>592</SUB>> ]
+"1277" [label = <(Get,old_exception.Get())<SUB>592</SUB>> ]
+"1288" [label = <(&lt;operator&gt;.indirectFieldAccess,env-&gt;GetObjectClass)<SUB>593</SUB>> ]
+"1291" [label = <(get,exception.get())<SUB>593</SUB>> ]
+"1301" [label = <(FIELD_IDENTIFIER,GetMethodID,GetMethodID)<SUB>594</SUB>> ]
+"1303" [label = <(&lt;operator&gt;.fieldAccess,exception_class.get)<SUB>594</SUB>> ]
+"1314" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI WARNING: no printStackTrace()V in &quot;)<SUB>596</SUB>> ]
+"1318" [label = <(mirror::Object::PrettyTypeOf,mirror::Object::PrettyTypeOf(old_exception.Get()))<SUB>597</SUB>> ]
+"1330" [label = <(CallVoidMethod,env-&gt;CallVoidMethod(exception.get(), mid))<SUB>599</SUB>> ]
+"1378" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>606</SUB>> ]
+"1385" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>606</SUB>> ]
+"1220" [label = <(Self,soa.Self())<SUB>583</SUB>> ]
+"1224" [label = <(FIELD_IDENTIFIER,GetException,GetException)<SUB>583</SUB>> ]
+"1235" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>587</SUB>> ]
+"1245" [label = <(&lt;operator&gt;.fieldAccess,hs.NewHandle)<SUB>589</SUB>> ]
+"1248" [label = <(&lt;operator&gt;.fieldAccess,mirror::Throwable)<SUB>589</SUB>> ]
+"1252" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;GetException)<SUB>589</SUB>> ]
+"1263" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>590</SUB>> ]
+"1273" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>592</SUB>> ]
+"1278" [label = <(&lt;operator&gt;.fieldAccess,old_exception.Get)<SUB>592</SUB>> ]
+"1290" [label = <(FIELD_IDENTIFIER,GetObjectClass,GetObjectClass)<SUB>593</SUB>> ]
+"1292" [label = <(&lt;operator&gt;.fieldAccess,exception.get)<SUB>593</SUB>> ]
+"1305" [label = <(FIELD_IDENTIFIER,get,get)<SUB>594</SUB>> ]
+"1315" [label = <(LOG,LOG(WARNING))<SUB>596</SUB>> ]
+"1319" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object::PrettyTypeOf)<SUB>597</SUB>> ]
+"1324" [label = <(Get,old_exception.Get())<SUB>597</SUB>> ]
+"1331" [label = <(&lt;operator&gt;.indirectFieldAccess,env-&gt;CallVoidMethod)<SUB>599</SUB>> ]
+"1334" [label = <(get,exception.get())<SUB>599</SUB>> ]
+"1340" [label = <(IsExceptionPending,soa.Self()-&gt;IsExceptionPending())<SUB>600</SUB>> ]
+"1380" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>606</SUB>> ]
+"1221" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>583</SUB>> ]
+"1247" [label = <(FIELD_IDENTIFIER,NewHandle,NewHandle)<SUB>589</SUB>> ]
+"1250" [label = <(FIELD_IDENTIFIER,Throwable,Throwable)<SUB>589</SUB>> ]
+"1253" [label = <(Self,soa.Self())<SUB>589</SUB>> ]
+"1257" [label = <(FIELD_IDENTIFIER,GetException,GetException)<SUB>589</SUB>> ]
+"1275" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>592</SUB>> ]
+"1280" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>592</SUB>> ]
+"1294" [label = <(FIELD_IDENTIFIER,get,get)<SUB>593</SUB>> ]
+"1320" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>597</SUB>> ]
+"1323" [label = <(FIELD_IDENTIFIER,PrettyTypeOf,PrettyTypeOf)<SUB>597</SUB>> ]
+"1325" [label = <(&lt;operator&gt;.fieldAccess,old_exception.Get)<SUB>597</SUB>> ]
+"1333" [label = <(FIELD_IDENTIFIER,CallVoidMethod,CallVoidMethod)<SUB>599</SUB>> ]
+"1335" [label = <(&lt;operator&gt;.fieldAccess,exception.get)<SUB>599</SUB>> ]
+"1341" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;IsExceptionPending)<SUB>600</SUB>> ]
+"1348" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI WARNING: &quot; &lt;&lt; mirror::Object::PrettyTypeOf(soa.Self()-&gt;GetException())\012 &lt;&lt; &quot; thrown while calling printStackTrace&quot;)<SUB>601</SUB>> ]
+"1368" [label = <(ClearException,soa.Self()-&gt;ClearException())<SUB>603</SUB>> ]
+"1223" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>583</SUB>> ]
+"1254" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>589</SUB>> ]
+"1327" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>597</SUB>> ]
+"1337" [label = <(FIELD_IDENTIFIER,get,get)<SUB>599</SUB>> ]
+"1342" [label = <(Self,soa.Self())<SUB>600</SUB>> ]
+"1346" [label = <(FIELD_IDENTIFIER,IsExceptionPending,IsExceptionPending)<SUB>600</SUB>> ]
+"1349" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI WARNING: &quot; &lt;&lt; mirror::Object::PrettyTypeOf(soa.Self()-&gt;GetException()))<SUB>601</SUB>> ]
+"1369" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;ClearException)<SUB>603</SUB>> ]
+"1256" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>589</SUB>> ]
+"1343" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>600</SUB>> ]
+"1350" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI WARNING: &quot;)<SUB>601</SUB>> ]
+"1354" [label = <(mirror::Object::PrettyTypeOf,mirror::Object::PrettyTypeOf(soa.Self()-&gt;GetException()))<SUB>601</SUB>> ]
+"1370" [label = <(Self,soa.Self())<SUB>603</SUB>> ]
+"1374" [label = <(FIELD_IDENTIFIER,ClearException,ClearException)<SUB>603</SUB>> ]
+"1345" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>600</SUB>> ]
+"1351" [label = <(LOG,LOG(WARNING))<SUB>601</SUB>> ]
+"1355" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object::PrettyTypeOf)<SUB>601</SUB>> ]
+"1360" [label = <(GetException,soa.Self()-&gt;GetException())<SUB>601</SUB>> ]
+"1371" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>603</SUB>> ]
+"1356" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>601</SUB>> ]
+"1359" [label = <(FIELD_IDENTIFIER,PrettyTypeOf,PrettyTypeOf)<SUB>601</SUB>> ]
+"1361" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;GetException)<SUB>601</SUB>> ]
+"1373" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>603</SUB>> ]
+"1362" [label = <(Self,soa.Self())<SUB>601</SUB>> ]
+"1366" [label = <(FIELD_IDENTIFIER,GetException,GetException)<SUB>601</SUB>> ]
+"1363" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>601</SUB>> ]
+"1365" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>601</SUB>> ]
+"1210" [label = <(METHOD,ExceptionDescribe)<SUB>579</SUB>> ]
+"1386" [label = <(METHOD_RETURN,void)<SUB>579</SUB>> ]
+  "1214" -> "1223" 
+  "1227" -> "1241" 
+  "1236" -> "1263" 
+  "1258" -> "1266" 
+  "1265" -> "1282" 
+  "1281" -> "1301" 
+  "1296" -> "1309" 
+  "1375" -> "1386" 
+  "1217" -> "1226" 
+  "1217" -> "1228" 
+  "1228" -> "1235" 
+  "1231" -> "1227" 
+  "1237" -> "1247" 
+  "1242" -> "1236" 
+  "1259" -> "1258" 
+  "1266" -> "1275" 
+  "1269" -> "1265" 
+  "1282" -> "1290" 
+  "1285" -> "1281" 
+  "1298" -> "1296" 
+  "1309" -> "1315" 
+  "1309" -> "1333" 
+  "1376" -> "1385" 
+  "1382" -> "1375" 
+  "1218" -> "1217" 
+  "1226" -> "1386" 
+  "1232" -> "1231" 
+  "1239" -> "1237" 
+  "1243" -> "1242" 
+  "1260" -> "1264" 
+  "1264" -> "1259" 
+  "1271" -> "1269" 
+  "1287" -> "1285" 
+  "1299" -> "1305" 
+  "1302" -> "1298" 
+  "1313" -> "1380" 
+  "1377" -> "1381" 
+  "1381" -> "1376" 
+  "1383" -> "1382" 
+  "1219" -> "1218" 
+  "1233" -> "1232" 
+  "1241" -> "1239" 
+  "1244" -> "1256" 
+  "1251" -> "1243" 
+  "1261" -> "1260" 
+  "1272" -> "1280" 
+  "1277" -> "1271" 
+  "1288" -> "1294" 
+  "1291" -> "1287" 
+  "1301" -> "1299" 
+  "1303" -> "1302" 
+  "1314" -> "1320" 
+  "1318" -> "1313" 
+  "1330" -> "1345" 
+  "1378" -> "1377" 
+  "1385" -> "1383" 
+  "1220" -> "1224" 
+  "1224" -> "1219" 
+  "1235" -> "1233" 
+  "1245" -> "1250" 
+  "1248" -> "1244" 
+  "1252" -> "1251" 
+  "1263" -> "1261" 
+  "1273" -> "1272" 
+  "1278" -> "1277" 
+  "1290" -> "1288" 
+  "1292" -> "1291" 
+  "1305" -> "1303" 
+  "1315" -> "1314" 
+  "1319" -> "1327" 
+  "1324" -> "1318" 
+  "1331" -> "1337" 
+  "1334" -> "1330" 
+  "1340" -> "1351" 
+  "1340" -> "1380" 
+  "1380" -> "1378" 
+  "1221" -> "1220" 
+  "1247" -> "1245" 
+  "1250" -> "1248" 
+  "1253" -> "1257" 
+  "1257" -> "1252" 
+  "1275" -> "1273" 
+  "1280" -> "1278" 
+  "1294" -> "1292" 
+  "1320" -> "1323" 
+  "1323" -> "1319" 
+  "1325" -> "1324" 
+  "1333" -> "1331" 
+  "1335" -> "1334" 
+  "1341" -> "1340" 
+  "1348" -> "1373" 
+  "1368" -> "1380" 
+  "1223" -> "1221" 
+  "1254" -> "1253" 
+  "1327" -> "1325" 
+  "1337" -> "1335" 
+  "1342" -> "1346" 
+  "1346" -> "1341" 
+  "1349" -> "1348" 
+  "1369" -> "1368" 
+  "1256" -> "1254" 
+  "1343" -> "1342" 
+  "1350" -> "1356" 
+  "1354" -> "1349" 
+  "1370" -> "1374" 
+  "1374" -> "1369" 
+  "1345" -> "1343" 
+  "1351" -> "1350" 
+  "1355" -> "1365" 
+  "1360" -> "1354" 
+  "1371" -> "1370" 
+  "1356" -> "1359" 
+  "1359" -> "1355" 
+  "1361" -> "1360" 
+  "1373" -> "1371" 
+  "1362" -> "1366" 
+  "1366" -> "1361" 
+  "1363" -> "1362" 
+  "1365" -> "1363" 
+  "1210" -> "1214" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/360-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/360-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/360-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/360-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "IsConstructor" {  
-"18084" [label = <(METHOD,IsConstructor)> ]
-"18087" [label = <(METHOD_RETURN,ANY)> ]
-  "18084" -> "18087" 
+digraph "IsAssignableFrom" {  
+"17743" [label = <(METHOD,IsAssignableFrom)> ]
+"17747" [label = <(METHOD_RETURN,ANY)> ]
+  "17743" -> "17747" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/361-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/361-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/361-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/361-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "mirror::Constructor::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;" {  
-"18088" [label = <(METHOD,mirror::Constructor::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;)> ]
-"18093" [label = <(METHOD_RETURN,ANY)> ]
-  "18088" -> "18093" 
+digraph "CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_FALSE)" {  
+"17748" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_FALSE))> ]
+"17753" [label = <(METHOD_RETURN,ANY)> ]
+  "17748" -> "17753" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/362-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/362-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/362-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/362-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "mirror::Method::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;" {  
-"18094" [label = <(METHOD,mirror::Method::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;)> ]
-"18099" [label = <(METHOD_RETURN,ANY)> ]
-  "18094" -> "18099" 
+digraph "InstanceOf" {  
+"17754" [label = <(METHOD,InstanceOf)> ]
+"17758" [label = <(METHOD_RETURN,ANY)> ]
+  "17754" -> "17758" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/363-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/363-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/363-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/363-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT(fid)" {  
-"18100" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(fid))> ]
-"18105" [label = <(METHOD_RETURN,ANY)> ]
-  "18100" -> "18105" 
+digraph "SetException" {  
+"17759" [label = <(METHOD,SetException)> ]
+"17763" [label = <(METHOD_RETURN,ANY)> ]
+  "17759" -> "17763" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/364-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/364-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/364-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/364-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "jni::DecodeArtField" {  
-"18106" [label = <(METHOD,jni::DecodeArtField)> ]
-"18110" [label = <(METHOD_RETURN,ANY)> ]
-  "18106" -> "18110" 
+digraph "CHECK_NON_NULL_ARGUMENT_RETURN(c, JNI_ERR)" {  
+"17764" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN(c, JNI_ERR))> ]
+"17769" [label = <(METHOD_RETURN,ANY)> ]
+  "17764" -> "17769" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/365-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/365-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/365-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/365-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.bracketedPrimary" {  
-"18111" [label = <(METHOD,&lt;operator&gt;.bracketedPrimary)> ]
-"18114" [label = <(METHOD_RETURN,ANY)> ]
-  "18111" -> "18114" 
+digraph "IsExceptionPending" {  
+"17770" [label = <(METHOD,IsExceptionPending)> ]
+"17773" [label = <(METHOD_RETURN,ANY)> ]
+  "17770" -> "17773" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/366-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/366-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/366-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/366-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.expressionList" {  
-"18115" [label = <(METHOD,&lt;operator&gt;.expressionList)> ]
-"18120" [label = <(METHOD_RETURN,ANY)> ]
-  "18115" -> "18120" 
+digraph "ClearException" {  
+"17774" [label = <(METHOD,ClearException)> ]
+"17777" [label = <(METHOD_RETURN,ANY)> ]
+  "17774" -> "17777" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/367-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/367-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/367-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/367-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT(java_object)" {  
-"18121" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(java_object))> ]
-"18126" [label = <(METHOD_RETURN,ANY)> ]
-  "18121" -> "18126" 
+digraph "GetException" {  
+"17778" [label = <(METHOD,GetException)> ]
+"17781" [label = <(METHOD_RETURN,ANY)> ]
+  "17778" -> "17781" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/368-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/368-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/368-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/368-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT(java_class)" {  
-"18127" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(java_class))> ]
-"18132" [label = <(METHOD_RETURN,ANY)> ]
-  "18127" -> "18132" 
+digraph "old_exception" {  
+"17782" [label = <(METHOD,old_exception)> ]
+"17785" [label = <(METHOD_RETURN,ANY)> ]
+  "17782" -> "17785" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/369-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/369-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/369-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/369-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "IsInterface" {  
-"18133" [label = <(METHOD,IsInterface)> ]
-"18136" [label = <(METHOD_RETURN,ANY)> ]
-  "18133" -> "18136" 
+digraph "exception" {  
+"17786" [label = <(METHOD,exception)> ]
+"17790" [label = <(METHOD_RETURN,ANY)> ]
+  "17786" -> "17790" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/37-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/37-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/37-cfg.dot	2023-06-07 19:33:45.357394696 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/37-cfg.dot	2023-06-07 19:33:51.937393993 +0330
@@ -1,27 +1,31 @@
-digraph "ThrowNew" {  
-"1344" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(c, JNI_ERR))<SUB>645</SUB>> ]
-"1363" [label = <(RETURN,return ThrowNewException(env, c, msg, nullptr);,return ThrowNewException(env, c, msg, nullptr);)<SUB>646</SUB>> ]
-"1364" [label = <(ThrowNewException,ThrowNewException(env, c, msg, nullptr))<SUB>646</SUB>> ]
-"1349" [label = <(UNLIKELY,UNLIKELY((c) == nullptr))<SUB>645</SUB>> ]
-"1350" [label = <(&lt;operator&gt;.equals,(c) == nullptr)<SUB>645</SUB>> ]
-"1354" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN(c, JNI_ERR),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;c == null&quot;))<SUB>645</SUB>> ]
-"1361" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(c, JNI_ERR),CHECK_NON_NULL_ARGUMENT_RETURN(c, JNI_ERR))<SUB>645</SUB>> ]
-"1355" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>645</SUB>> ]
-"1356" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>645</SUB>> ]
-"1358" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>645</SUB>> ]
-"1339" [label = <(METHOD,ThrowNew)<SUB>644</SUB>> ]
-"1369" [label = <(METHOD_RETURN,jint)<SUB>644</SUB>> ]
-  "1344" -> "1350" 
-  "1344" -> "1364" 
-  "1363" -> "1369" 
-  "1364" -> "1363" 
-  "1349" -> "1356" 
-  "1349" -> "1364" 
-  "1350" -> "1349" 
-  "1354" -> "1361" 
-  "1361" -> "1369" 
-  "1355" -> "1354" 
-  "1356" -> "1358" 
-  "1358" -> "1355" 
-  "1339" -> "1344" 
+digraph "ExceptionOccurred" {  
+"1392" [label = <(soa,soa(env))<SUB>610</SUB>> ]
+"1395" [label = <(&lt;operator&gt;.assignment,* exception = soa.Self()-&gt;GetException())<SUB>611</SUB>> ]
+"1404" [label = <(RETURN,return soa.AddLocalReference&lt;jthrowable&gt;(exception);,return soa.AddLocalReference&lt;jthrowable&gt;(exception);)<SUB>612</SUB>> ]
+"1397" [label = <(GetException,soa.Self()-&gt;GetException())<SUB>611</SUB>> ]
+"1405" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jthrowable&gt;(exception))<SUB>612</SUB>> ]
+"1398" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;GetException)<SUB>611</SUB>> ]
+"1406" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jthrowable)<SUB>612</SUB>> ]
+"1399" [label = <(Self,soa.Self())<SUB>611</SUB>> ]
+"1403" [label = <(FIELD_IDENTIFIER,GetException,GetException)<SUB>611</SUB>> ]
+"1407" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>612</SUB>> ]
+"1400" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>611</SUB>> ]
+"1409" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>612</SUB>> ]
+"1402" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>611</SUB>> ]
+"1388" [label = <(METHOD,ExceptionOccurred)<SUB>609</SUB>> ]
+"1412" [label = <(METHOD_RETURN,jthrowable)<SUB>609</SUB>> ]
+  "1392" -> "1402" 
+  "1395" -> "1409" 
+  "1404" -> "1412" 
+  "1397" -> "1395" 
+  "1405" -> "1404" 
+  "1398" -> "1397" 
+  "1406" -> "1405" 
+  "1399" -> "1403" 
+  "1403" -> "1398" 
+  "1407" -> "1406" 
+  "1400" -> "1399" 
+  "1409" -> "1407" 
+  "1402" -> "1400" 
+  "1388" -> "1392" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/370-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/370-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/370-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/370-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "GetSuperClass" {  
-"18137" [label = <(METHOD,GetSuperClass)> ]
-"18140" [label = <(METHOD_RETURN,ANY)> ]
-  "18137" -> "18140" 
+digraph "Get" {  
+"17791" [label = <(METHOD,Get)> ]
+"17794" [label = <(METHOD_RETURN,ANY)> ]
+  "17791" -> "17794" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/371-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/371-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/371-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/371-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_RETURN" {  
-"18141" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN)<SUB>500</SUB>> ]
-"18145" [label = <(METHOD_RETURN,ANY)> ]
-  "18141" -> "18145" 
+digraph "exception_class" {  
+"17795" [label = <(METHOD,exception_class)> ]
+"17799" [label = <(METHOD_RETURN,ANY)> ]
+  "17795" -> "17799" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/372-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/372-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/372-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/372-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_RETURN(java_class1, JNI_FALSE)" {  
-"18146" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN(java_class1, JNI_FALSE))> ]
-"18151" [label = <(METHOD_RETURN,ANY)> ]
-  "18146" -> "18151" 
+digraph "GetObjectClass" {  
+"17800" [label = <(METHOD,GetObjectClass)> ]
+"17804" [label = <(METHOD_RETURN,ANY)> ]
+  "17800" -> "17804" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/373-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/373-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/373-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/373-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_RETURN(java_class2, JNI_FALSE)" {  
-"18152" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN(java_class2, JNI_FALSE))> ]
-"18157" [label = <(METHOD_RETURN,ANY)> ]
-  "18152" -> "18157" 
+digraph "get" {  
+"17805" [label = <(METHOD,get)> ]
+"17808" [label = <(METHOD_RETURN,ANY)> ]
+  "17805" -> "17808" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/374-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/374-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/374-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/374-cfg.dot	2023-06-07 19:33:52.127393974 +0330
@@ -1,5 +1,5 @@
-digraph "IsAssignableFrom" {  
-"18158" [label = <(METHOD,IsAssignableFrom)> ]
-"18162" [label = <(METHOD_RETURN,ANY)> ]
-  "18158" -> "18162" 
+digraph "GetMethodID" {  
+"17809" [label = <(METHOD,GetMethodID)> ]
+"17815" [label = <(METHOD_RETURN,ANY)> ]
+  "17809" -> "17815" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/375-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/375-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/375-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/375-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_FALSE)" {  
-"18163" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_FALSE))> ]
-"18168" [label = <(METHOD_RETURN,ANY)> ]
-  "18163" -> "18168" 
+digraph "mirror::Object::PrettyTypeOf" {  
+"17816" [label = <(METHOD,mirror::Object::PrettyTypeOf)> ]
+"17820" [label = <(METHOD_RETURN,ANY)> ]
+  "17816" -> "17820" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/376-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/376-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/376-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/376-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "InstanceOf" {  
-"18169" [label = <(METHOD,InstanceOf)> ]
-"18173" [label = <(METHOD_RETURN,ANY)> ]
-  "18169" -> "18173" 
+digraph "CallVoidMethod" {  
+"17821" [label = <(METHOD,CallVoidMethod)> ]
+"17826" [label = <(METHOD_RETURN,ANY)> ]
+  "17821" -> "17826" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/377-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/377-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/377-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/377-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "SetException" {  
-"18174" [label = <(METHOD,SetException)> ]
-"18178" [label = <(METHOD_RETURN,ANY)> ]
-  "18174" -> "18178" 
+digraph "EnsureLocalCapacityInternal" {  
+"17827" [label = <(METHOD,EnsureLocalCapacityInternal)> ]
+"17832" [label = <(METHOD_RETURN,ANY)> ]
+  "17827" -> "17832" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/378-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/378-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/378-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/378-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_RETURN(c, JNI_ERR)" {  
-"18179" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN(c, JNI_ERR))> ]
-"18184" [label = <(METHOD_RETURN,ANY)> ]
-  "18179" -> "18184" 
+digraph "PushFrame" {  
+"17833" [label = <(METHOD,PushFrame)> ]
+"17837" [label = <(METHOD_RETURN,ANY)> ]
+  "17833" -> "17837" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/379-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/379-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/379-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/379-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "IsExceptionPending" {  
-"18185" [label = <(METHOD,IsExceptionPending)> ]
-"18188" [label = <(METHOD_RETURN,ANY)> ]
-  "18185" -> "18188" 
+digraph "down_cast&lt;JNIEnvExt*&gt;" {  
+"17838" [label = <(METHOD,down_cast&lt;JNIEnvExt*&gt;)> ]
+"17841" [label = <(METHOD_RETURN,ANY)> ]
+  "17838" -> "17841" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/38-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/38-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/38-cfg.dot	2023-06-07 19:33:45.357394696 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/38-cfg.dot	2023-06-07 19:33:51.937393993 +0330
@@ -1,23 +1,11 @@
-digraph "ExceptionCheck" {  
-"1374" [label = <(RETURN,return static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_-&gt;IsExceptionPending() ? JNI_TRUE : JNI_FALSE;,return static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_-&gt;IsExceptionPending() ? JNI_TRUE : JNI_FALSE;)<SUB>650</SUB>> ]
-"1375" [label = <(&lt;operator&gt;.conditional,static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_-&gt;IsExceptionPending() ? JNI_TRUE : JNI_FALSE)<SUB>650</SUB>> ]
-"1376" [label = <(IsExceptionPending,static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_-&gt;IsExceptionPending())<SUB>650</SUB>> ]
-"1377" [label = <(&lt;operator&gt;.indirectFieldAccess,static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_-&gt;IsExceptionPending)<SUB>650</SUB>> ]
-"1378" [label = <(&lt;operator&gt;.indirectFieldAccess,static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_)<SUB>650</SUB>> ]
-"1383" [label = <(FIELD_IDENTIFIER,IsExceptionPending,IsExceptionPending)<SUB>650</SUB>> ]
-"1379" [label = <(&lt;operator&gt;.cast,static_cast&lt;JNIEnvExt*&gt;(env))<SUB>650</SUB>> ]
-"1382" [label = <(FIELD_IDENTIFIER,self_,self_)<SUB>650</SUB>> ]
-"1380" [label = <(UNKNOWN,JNIEnvExt*,JNIEnvExt*)<SUB>650</SUB>> ]
-"1371" [label = <(METHOD,ExceptionCheck)<SUB>649</SUB>> ]
-"1386" [label = <(METHOD_RETURN,jboolean)<SUB>649</SUB>> ]
-  "1374" -> "1386" 
-  "1375" -> "1374" 
-  "1376" -> "1375" 
-  "1377" -> "1376" 
-  "1378" -> "1383" 
-  "1383" -> "1377" 
-  "1379" -> "1382" 
-  "1382" -> "1378" 
-  "1380" -> "1379" 
-  "1371" -> "1380" 
+digraph "FatalError" {  
+"1418" [label = <(&lt;operator&gt;.shiftLeft,LOG(FATAL) &lt;&lt; &quot;JNI FatalError called: &quot; &lt;&lt; msg)<SUB>616</SUB>> ]
+"1419" [label = <(&lt;operator&gt;.shiftLeft,LOG(FATAL) &lt;&lt; &quot;JNI FatalError called: &quot;)<SUB>616</SUB>> ]
+"1420" [label = <(LOG,LOG(FATAL))<SUB>616</SUB>> ]
+"1414" [label = <(METHOD,FatalError)<SUB>615</SUB>> ]
+"1424" [label = <(METHOD_RETURN,void)<SUB>615</SUB>> ]
+  "1418" -> "1424" 
+  "1419" -> "1418" 
+  "1420" -> "1419" 
+  "1414" -> "1420" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/380-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/380-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/380-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/380-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "ClearException" {  
-"18189" [label = <(METHOD,ClearException)> ]
-"18192" [label = <(METHOD_RETURN,ANY)> ]
-  "18189" -> "18192" 
+digraph "PopFrame" {  
+"17842" [label = <(METHOD,PopFrame)> ]
+"17845" [label = <(METHOD_RETURN,ANY)> ]
+  "17842" -> "17845" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/381-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/381-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/381-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/381-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "GetException" {  
-"18193" [label = <(METHOD,GetException)> ]
-"18196" [label = <(METHOD_RETURN,ANY)> ]
-  "18193" -> "18196" 
+digraph "Env" {  
+"17846" [label = <(METHOD,Env)> ]
+"17849" [label = <(METHOD_RETURN,ANY)> ]
+  "17846" -> "17849" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/382-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/382-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/382-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/382-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "old_exception" {  
-"18197" [label = <(METHOD,old_exception)> ]
-"18200" [label = <(METHOD_RETURN,ANY)> ]
-  "18197" -> "18200" 
+digraph "AddGlobalRef" {  
+"17850" [label = <(METHOD,AddGlobalRef)> ]
+"17855" [label = <(METHOD_RETURN,ANY)> ]
+  "17850" -> "17855" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/383-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/383-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/383-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/383-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "exception" {  
-"18201" [label = <(METHOD,exception)> ]
-"18205" [label = <(METHOD_RETURN,ANY)> ]
-  "18201" -> "18205" 
+digraph "Vm" {  
+"17856" [label = <(METHOD,Vm)> ]
+"17859" [label = <(METHOD_RETURN,ANY)> ]
+  "17856" -> "17859" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/384-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/384-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/384-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/384-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "Get" {  
-"18206" [label = <(METHOD,Get)> ]
-"18209" [label = <(METHOD_RETURN,ANY)> ]
-  "18206" -> "18209" 
+digraph "DeleteGlobalRef" {  
+"17860" [label = <(METHOD,DeleteGlobalRef)> ]
+"17864" [label = <(METHOD_RETURN,ANY)> ]
+  "17860" -> "17864" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/385-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/385-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/385-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/385-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "exception_class" {  
-"18210" [label = <(METHOD,exception_class)> ]
-"18214" [label = <(METHOD_RETURN,ANY)> ]
-  "18210" -> "18214" 
+digraph "AddWeakGlobalRef" {  
+"17865" [label = <(METHOD,AddWeakGlobalRef)> ]
+"17870" [label = <(METHOD_RETURN,ANY)> ]
+  "17865" -> "17870" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/386-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/386-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/386-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/386-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "GetObjectClass" {  
-"18215" [label = <(METHOD,GetObjectClass)> ]
-"18219" [label = <(METHOD_RETURN,ANY)> ]
-  "18215" -> "18219" 
+digraph "DeleteWeakGlobalRef" {  
+"17871" [label = <(METHOD,DeleteWeakGlobalRef)> ]
+"17876" [label = <(METHOD_RETURN,ANY)> ]
+  "17871" -> "17876" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/387-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/387-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/387-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/387-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "get" {  
-"18220" [label = <(METHOD,get)> ]
-"18223" [label = <(METHOD_RETURN,ANY)> ]
-  "18220" -> "18223" 
+digraph "Remove" {  
+"17877" [label = <(METHOD,Remove)> ]
+"17882" [label = <(METHOD_RETURN,ANY)> ]
+  "17877" -> "17882" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/388-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/388-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/388-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/388-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "GetMethodID" {  
-"18224" [label = <(METHOD,GetMethodID)> ]
-"18230" [label = <(METHOD_RETURN,ANY)> ]
-  "18224" -> "18230" 
+digraph "IsStringClass" {  
+"17883" [label = <(METHOD,IsStringClass)> ]
+"17886" [label = <(METHOD_RETURN,ANY)> ]
+  "17883" -> "17886" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/389-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/389-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/389-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/389-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "mirror::Object::PrettyTypeOf" {  
-"18231" [label = <(METHOD,mirror::Object::PrettyTypeOf)> ]
-"18235" [label = <(METHOD_RETURN,ANY)> ]
-  "18231" -> "18235" 
+digraph "GetCurrentAllocator" {  
+"17887" [label = <(METHOD,GetCurrentAllocator)> ]
+"17890" [label = <(METHOD_RETURN,ANY)> ]
+  "17887" -> "17890" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/39-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/39-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/39-cfg.dot	2023-06-07 19:33:45.357394696 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/39-cfg.dot	2023-06-07 19:33:51.937393993 +0330
@@ -1,19 +1,24 @@
-digraph "ExceptionClear" {  
-"1392" [label = <(soa,soa(env))<SUB>654</SUB>> ]
-"1394" [label = <(ClearException,soa.Self()-&gt;ClearException())<SUB>655</SUB>> ]
-"1395" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;ClearException)<SUB>655</SUB>> ]
-"1396" [label = <(Self,soa.Self())<SUB>655</SUB>> ]
-"1400" [label = <(FIELD_IDENTIFIER,ClearException,ClearException)<SUB>655</SUB>> ]
-"1397" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>655</SUB>> ]
-"1399" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>655</SUB>> ]
-"1388" [label = <(METHOD,ExceptionClear)<SUB>653</SUB>> ]
-"1401" [label = <(METHOD_RETURN,void)<SUB>653</SUB>> ]
-  "1392" -> "1399" 
-  "1394" -> "1401" 
-  "1395" -> "1394" 
-  "1396" -> "1400" 
-  "1400" -> "1395" 
-  "1397" -> "1396" 
-  "1399" -> "1397" 
-  "1388" -> "1392" 
+digraph "PushLocalFrame" {  
+"1431" [label = <(soa,soa(env))<SUB>621</SUB>> ]
+"1443" [label = <(PushFrame,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;PushFrame(capacity))<SUB>625</SUB>> ]
+"1449" [label = <(RETURN,return JNI_OK;,return JNI_OK;)<SUB>626</SUB>> ]
+"1434" [label = <(&lt;operator&gt;.notEquals,EnsureLocalCapacityInternal(soa, capacity, &quot;PushLocalFrame&quot;) != JNI_OK)<SUB>622</SUB>> ]
+"1444" [label = <(&lt;operator&gt;.indirectFieldAccess,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;PushFrame)<SUB>625</SUB>> ]
+"1435" [label = <(EnsureLocalCapacityInternal,EnsureLocalCapacityInternal(soa, capacity, &quot;PushLocalFrame&quot;))<SUB>622</SUB>> ]
+"1441" [label = <(RETURN,return JNI_ERR;,return JNI_ERR;)<SUB>623</SUB>> ]
+"1445" [label = <(down_cast&lt;JNIEnvExt*&gt;,down_cast&lt;JNIEnvExt*&gt;(env))<SUB>625</SUB>> ]
+"1447" [label = <(FIELD_IDENTIFIER,PushFrame,PushFrame)<SUB>625</SUB>> ]
+"1426" [label = <(METHOD,PushLocalFrame)<SUB>619</SUB>> ]
+"1451" [label = <(METHOD_RETURN,jint)<SUB>619</SUB>> ]
+  "1431" -> "1435" 
+  "1443" -> "1449" 
+  "1449" -> "1451" 
+  "1434" -> "1441" 
+  "1434" -> "1445" 
+  "1444" -> "1443" 
+  "1435" -> "1434" 
+  "1441" -> "1451" 
+  "1445" -> "1447" 
+  "1447" -> "1444" 
+  "1426" -> "1431" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/390-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/390-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/390-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/390-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "CallVoidMethod" {  
-"18236" [label = <(METHOD,CallVoidMethod)> ]
-"18241" [label = <(METHOD_RETURN,ANY)> ]
-  "18236" -> "18241" 
+digraph "GetHeap" {  
+"17891" [label = <(METHOD,GetHeap)> ]
+"17894" [label = <(METHOD_RETURN,ANY)> ]
+  "17891" -> "17894" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/391-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/391-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/391-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/391-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "EnsureLocalCapacityInternal" {  
-"18242" [label = <(METHOD,EnsureLocalCapacityInternal)> ]
-"18247" [label = <(METHOD_RETURN,ANY)> ]
-  "18242" -> "18247" 
+digraph "AllocObject" {  
+"17895" [label = <(METHOD,AllocObject)> ]
+"17899" [label = <(METHOD_RETURN,ANY)> ]
+  "17895" -> "17899" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/392-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/392-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/392-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/392-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "PushFrame" {  
-"18248" [label = <(METHOD,PushFrame)> ]
-"18252" [label = <(METHOD_RETURN,ANY)> ]
-  "18248" -> "18252" 
+digraph "va_start" {  
+"17900" [label = <(METHOD,va_start)> ]
+"17904" [label = <(METHOD_RETURN,ANY)> ]
+  "17900" -> "17904" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/393-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/393-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/393-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/393-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "down_cast&lt;JNIEnvExt*&gt;" {  
-"18253" [label = <(METHOD,down_cast&lt;JNIEnvExt*&gt;)> ]
-"18256" [label = <(METHOD_RETURN,ANY)> ]
-  "18253" -> "18256" 
+digraph "free_args_later" {  
+"17905" [label = <(METHOD,free_args_later)> ]
+"17908" [label = <(METHOD_RETURN,ANY)> ]
+  "17905" -> "17908" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/394-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/394-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/394-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/394-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "PopFrame" {  
-"18257" [label = <(METHOD,PopFrame)> ]
-"18260" [label = <(METHOD_RETURN,ANY)> ]
-  "18257" -> "18260" 
+digraph "&lt;operator&gt;.addressOf" {  
+"17909" [label = <(METHOD,&lt;operator&gt;.addressOf)> ]
+"17912" [label = <(METHOD_RETURN,ANY)> ]
+  "17909" -> "17912" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/395-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/395-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/395-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/395-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "Env" {  
-"18261" [label = <(METHOD,Env)> ]
-"18264" [label = <(METHOD_RETURN,ANY)> ]
-  "18261" -> "18264" 
+digraph "NewObjectV" {  
+"17913" [label = <(METHOD,NewObjectV)> ]
+"17919" [label = <(METHOD_RETURN,ANY)> ]
+  "17913" -> "17919" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/396-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/396-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/396-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/396-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "AddGlobalRef" {  
-"18265" [label = <(METHOD,AddGlobalRef)> ]
-"18270" [label = <(METHOD_RETURN,ANY)> ]
-  "18265" -> "18270" 
+digraph "WellKnownClasses::StringInitToStringFactory" {  
+"17920" [label = <(METHOD,WellKnownClasses::StringInitToStringFactory)> ]
+"17924" [label = <(METHOD_RETURN,ANY)> ]
+  "17920" -> "17924" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/397-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/397-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/397-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/397-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "Vm" {  
-"18271" [label = <(METHOD,Vm)> ]
-"18274" [label = <(METHOD_RETURN,ANY)> ]
-  "18271" -> "18274" 
+digraph "CallStaticObjectMethodV" {  
+"17925" [label = <(METHOD,CallStaticObjectMethodV)> ]
+"17931" [label = <(METHOD_RETURN,ANY)> ]
+  "17925" -> "17931" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/398-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/398-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/398-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/398-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "DeleteGlobalRef" {  
-"18275" [label = <(METHOD,DeleteGlobalRef)> ]
-"18279" [label = <(METHOD_RETURN,ANY)> ]
-  "18275" -> "18279" 
+digraph "CallNonvirtualVoidMethodV" {  
+"17932" [label = <(METHOD,CallNonvirtualVoidMethodV)> ]
+"17939" [label = <(METHOD_RETURN,ANY)> ]
+  "17932" -> "17939" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/399-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/399-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/399-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/399-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "AddWeakGlobalRef" {  
-"18280" [label = <(METHOD,AddWeakGlobalRef)> ]
-"18285" [label = <(METHOD_RETURN,ANY)> ]
-  "18280" -> "18285" 
+digraph "CallStaticObjectMethodA" {  
+"17940" [label = <(METHOD,CallStaticObjectMethodA)> ]
+"17946" [label = <(METHOD_RETURN,ANY)> ]
+  "17940" -> "17946" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/4-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/4-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/4-cfg.dot	2023-06-07 19:33:45.327394699 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/4-cfg.dot	2023-06-07 19:33:51.917393996 +0330
@@ -1,5 +1,9 @@
-digraph "ScopedVAArgs" {  
-"25" [label = <(METHOD,ScopedVAArgs)<SUB>71</SUB>> ]
-"28" [label = <(METHOD_RETURN,ANY)<SUB>71</SUB>> ]
-  "25" -> "28" 
+digraph "~ScopedVAArgs" {  
+"26" [label = <(va_end,va_end(*args))<SUB>70</SUB>> ]
+"27" [label = <(&lt;operator&gt;.indirection,*args)<SUB>70</SUB>> ]
+"24" [label = <(METHOD,~ScopedVAArgs)<SUB>70</SUB>> ]
+"29" [label = <(METHOD_RETURN,ANY)<SUB>70</SUB>> ]
+  "26" -> "29" 
+  "27" -> "26" 
+  "24" -> "27" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/40-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/40-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/40-cfg.dot	2023-06-07 19:33:45.357394696 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/40-cfg.dot	2023-06-07 19:33:51.937393993 +0330
@@ -1,240 +1,51 @@
-digraph "ExceptionDescribe" {  
-"1407" [label = <(soa,soa(env))<SUB>659</SUB>> ]
-"1420" [label = <(&lt;operator&gt;.greaterThan,StackHandleScope&lt;1&gt; hs(soa.Self()))<SUB>666</SUB>> ]
-"1429" [label = <(&lt;operator&gt;.greaterThan,Handle&lt;mirror::Throwable&gt; old_exception(\012        hs.NewHandle&lt;mirror::Throwable&gt;(soa.Self()-&gt;GetException())))<SUB>667</SUB>> ]
-"1451" [label = <(ClearException,soa.Self()-&gt;ClearException())<SUB>669</SUB>> ]
-"1458" [label = <(&lt;operator&gt;.greaterThan,ScopedLocalRef&lt;jthrowable&gt; exception(env,\012                                         soa.AddLocalReference&lt;jthrowable&gt;(old_exception.Get())))<SUB>670</SUB>> ]
-"1474" [label = <(&lt;operator&gt;.greaterThan,ScopedLocalRef&lt;jclass&gt; exception_class(env, env-&gt;GetObjectClass(exception.get())))<SUB>672</SUB>> ]
-"1489" [label = <(&lt;operator&gt;.assignment,mid = env-&gt;GetMethodID(exception_class.get(), &quot;printStackTrace&quot;, &quot;()V&quot;))<SUB>673</SUB>> ]
-"1568" [label = <(SetException,soa.Self()-&gt;SetException(old_exception.Get()))<SUB>685</SUB>> ]
-"1410" [label = <(&lt;operator&gt;.logicalNot,!soa.Self()-&gt;GetException())<SUB>662</SUB>> ]
-"1421" [label = <(&lt;operator&gt;.lessThan,StackHandleScope&lt;1)<SUB>666</SUB>> ]
-"1424" [label = <(hs,hs(soa.Self()))<SUB>666</SUB>> ]
-"1430" [label = <(&lt;operator&gt;.lessThan,Handle&lt;mirror::Throwable)<SUB>667</SUB>> ]
-"1435" [label = <(old_exception,old_exception(\012        hs.NewHandle&lt;mirror::Throwable&gt;(soa.Self()-&gt;GetException())))<SUB>667</SUB>> ]
-"1452" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;ClearException)<SUB>669</SUB>> ]
-"1459" [label = <(&lt;operator&gt;.lessThan,ScopedLocalRef&lt;jthrowable)<SUB>670</SUB>> ]
-"1462" [label = <(exception,exception(env,\012                                         soa.AddLocalReference&lt;jthrowable&gt;(old_exception.Get())))<SUB>670</SUB>> ]
-"1475" [label = <(&lt;operator&gt;.lessThan,ScopedLocalRef&lt;jclass)<SUB>672</SUB>> ]
-"1478" [label = <(exception_class,exception_class(env, env-&gt;GetObjectClass(exception.get())))<SUB>672</SUB>> ]
-"1491" [label = <(GetMethodID,env-&gt;GetMethodID(exception_class.get(), &quot;printStackTrace&quot;, &quot;()V&quot;))<SUB>673</SUB>> ]
-"1502" [label = <(&lt;operator&gt;.equals,mid == nullptr)<SUB>674</SUB>> ]
-"1569" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;SetException)<SUB>685</SUB>> ]
-"1575" [label = <(Get,old_exception.Get())<SUB>685</SUB>> ]
-"1411" [label = <(GetException,soa.Self()-&gt;GetException())<SUB>662</SUB>> ]
-"1419" [label = <(RETURN,return;,return;)<SUB>663</SUB>> ]
-"1425" [label = <(Self,soa.Self())<SUB>666</SUB>> ]
-"1432" [label = <(&lt;operator&gt;.fieldAccess,mirror::Throwable)<SUB>667</SUB>> ]
-"1436" [label = <(&lt;operator&gt;.greaterThan,hs.NewHandle&lt;mirror::Throwable&gt;(soa.Self()-&gt;GetException()))<SUB>668</SUB>> ]
-"1453" [label = <(Self,soa.Self())<SUB>669</SUB>> ]
-"1457" [label = <(FIELD_IDENTIFIER,ClearException,ClearException)<SUB>669</SUB>> ]
-"1464" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jthrowable&gt;(old_exception.Get()))<SUB>671</SUB>> ]
-"1480" [label = <(GetObjectClass,env-&gt;GetObjectClass(exception.get()))<SUB>672</SUB>> ]
-"1492" [label = <(&lt;operator&gt;.indirectFieldAccess,env-&gt;GetMethodID)<SUB>673</SUB>> ]
-"1495" [label = <(get,exception_class.get())<SUB>673</SUB>> ]
-"1506" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI WARNING: no printStackTrace()V in &quot;\012 &lt;&lt; mirror::Object::PrettyTypeOf(old_exception.Get()))<SUB>675</SUB>> ]
-"1570" [label = <(Self,soa.Self())<SUB>685</SUB>> ]
-"1574" [label = <(FIELD_IDENTIFIER,SetException,SetException)<SUB>685</SUB>> ]
-"1576" [label = <(&lt;operator&gt;.fieldAccess,old_exception.Get)<SUB>685</SUB>> ]
-"1412" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;GetException)<SUB>662</SUB>> ]
-"1426" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>666</SUB>> ]
-"1434" [label = <(FIELD_IDENTIFIER,Throwable,Throwable)<SUB>667</SUB>> ]
-"1437" [label = <(&lt;operator&gt;.lessThan,hs.NewHandle&lt;mirror::Throwable)<SUB>668</SUB>> ]
-"1444" [label = <(GetException,soa.Self()-&gt;GetException())<SUB>668</SUB>> ]
-"1454" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>669</SUB>> ]
-"1465" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jthrowable)<SUB>671</SUB>> ]
-"1470" [label = <(Get,old_exception.Get())<SUB>671</SUB>> ]
-"1481" [label = <(&lt;operator&gt;.indirectFieldAccess,env-&gt;GetObjectClass)<SUB>672</SUB>> ]
-"1484" [label = <(get,exception.get())<SUB>672</SUB>> ]
-"1494" [label = <(FIELD_IDENTIFIER,GetMethodID,GetMethodID)<SUB>673</SUB>> ]
-"1496" [label = <(&lt;operator&gt;.fieldAccess,exception_class.get)<SUB>673</SUB>> ]
-"1507" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI WARNING: no printStackTrace()V in &quot;)<SUB>675</SUB>> ]
-"1511" [label = <(mirror::Object::PrettyTypeOf,mirror::Object::PrettyTypeOf(old_exception.Get()))<SUB>676</SUB>> ]
-"1523" [label = <(CallVoidMethod,env-&gt;CallVoidMethod(exception.get(), mid))<SUB>678</SUB>> ]
-"1571" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>685</SUB>> ]
-"1578" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>685</SUB>> ]
-"1413" [label = <(Self,soa.Self())<SUB>662</SUB>> ]
-"1417" [label = <(FIELD_IDENTIFIER,GetException,GetException)<SUB>662</SUB>> ]
-"1428" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>666</SUB>> ]
-"1438" [label = <(&lt;operator&gt;.fieldAccess,hs.NewHandle)<SUB>668</SUB>> ]
-"1441" [label = <(&lt;operator&gt;.fieldAccess,mirror::Throwable)<SUB>668</SUB>> ]
-"1445" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;GetException)<SUB>668</SUB>> ]
-"1456" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>669</SUB>> ]
-"1466" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>671</SUB>> ]
-"1471" [label = <(&lt;operator&gt;.fieldAccess,old_exception.Get)<SUB>671</SUB>> ]
-"1483" [label = <(FIELD_IDENTIFIER,GetObjectClass,GetObjectClass)<SUB>672</SUB>> ]
-"1485" [label = <(&lt;operator&gt;.fieldAccess,exception.get)<SUB>672</SUB>> ]
-"1498" [label = <(FIELD_IDENTIFIER,get,get)<SUB>673</SUB>> ]
-"1508" [label = <(LOG,LOG(WARNING))<SUB>675</SUB>> ]
-"1512" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object::PrettyTypeOf)<SUB>676</SUB>> ]
-"1517" [label = <(Get,old_exception.Get())<SUB>676</SUB>> ]
-"1524" [label = <(&lt;operator&gt;.indirectFieldAccess,env-&gt;CallVoidMethod)<SUB>678</SUB>> ]
-"1527" [label = <(get,exception.get())<SUB>678</SUB>> ]
-"1533" [label = <(IsExceptionPending,soa.Self()-&gt;IsExceptionPending())<SUB>679</SUB>> ]
-"1573" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>685</SUB>> ]
-"1414" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>662</SUB>> ]
-"1440" [label = <(FIELD_IDENTIFIER,NewHandle,NewHandle)<SUB>668</SUB>> ]
-"1443" [label = <(FIELD_IDENTIFIER,Throwable,Throwable)<SUB>668</SUB>> ]
-"1446" [label = <(Self,soa.Self())<SUB>668</SUB>> ]
-"1450" [label = <(FIELD_IDENTIFIER,GetException,GetException)<SUB>668</SUB>> ]
-"1468" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>671</SUB>> ]
-"1473" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>671</SUB>> ]
-"1487" [label = <(FIELD_IDENTIFIER,get,get)<SUB>672</SUB>> ]
-"1513" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>676</SUB>> ]
-"1516" [label = <(FIELD_IDENTIFIER,PrettyTypeOf,PrettyTypeOf)<SUB>676</SUB>> ]
-"1518" [label = <(&lt;operator&gt;.fieldAccess,old_exception.Get)<SUB>676</SUB>> ]
-"1526" [label = <(FIELD_IDENTIFIER,CallVoidMethod,CallVoidMethod)<SUB>678</SUB>> ]
-"1528" [label = <(&lt;operator&gt;.fieldAccess,exception.get)<SUB>678</SUB>> ]
-"1534" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;IsExceptionPending)<SUB>679</SUB>> ]
-"1541" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI WARNING: &quot; &lt;&lt; mirror::Object::PrettyTypeOf(soa.Self()-&gt;GetException())\012 &lt;&lt; &quot; thrown while calling printStackTrace&quot;)<SUB>680</SUB>> ]
-"1561" [label = <(ClearException,soa.Self()-&gt;ClearException())<SUB>682</SUB>> ]
-"1416" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>662</SUB>> ]
-"1447" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>668</SUB>> ]
-"1520" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>676</SUB>> ]
-"1530" [label = <(FIELD_IDENTIFIER,get,get)<SUB>678</SUB>> ]
-"1535" [label = <(Self,soa.Self())<SUB>679</SUB>> ]
-"1539" [label = <(FIELD_IDENTIFIER,IsExceptionPending,IsExceptionPending)<SUB>679</SUB>> ]
-"1542" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI WARNING: &quot; &lt;&lt; mirror::Object::PrettyTypeOf(soa.Self()-&gt;GetException()))<SUB>680</SUB>> ]
-"1562" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;ClearException)<SUB>682</SUB>> ]
-"1449" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>668</SUB>> ]
-"1536" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>679</SUB>> ]
-"1543" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI WARNING: &quot;)<SUB>680</SUB>> ]
-"1547" [label = <(mirror::Object::PrettyTypeOf,mirror::Object::PrettyTypeOf(soa.Self()-&gt;GetException()))<SUB>680</SUB>> ]
-"1563" [label = <(Self,soa.Self())<SUB>682</SUB>> ]
-"1567" [label = <(FIELD_IDENTIFIER,ClearException,ClearException)<SUB>682</SUB>> ]
-"1538" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>679</SUB>> ]
-"1544" [label = <(LOG,LOG(WARNING))<SUB>680</SUB>> ]
-"1548" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object::PrettyTypeOf)<SUB>680</SUB>> ]
-"1553" [label = <(GetException,soa.Self()-&gt;GetException())<SUB>680</SUB>> ]
-"1564" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>682</SUB>> ]
-"1549" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>680</SUB>> ]
-"1552" [label = <(FIELD_IDENTIFIER,PrettyTypeOf,PrettyTypeOf)<SUB>680</SUB>> ]
-"1554" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;GetException)<SUB>680</SUB>> ]
-"1566" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>682</SUB>> ]
-"1555" [label = <(Self,soa.Self())<SUB>680</SUB>> ]
-"1559" [label = <(FIELD_IDENTIFIER,GetException,GetException)<SUB>680</SUB>> ]
-"1556" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>680</SUB>> ]
-"1558" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>680</SUB>> ]
-"1403" [label = <(METHOD,ExceptionDescribe)<SUB>658</SUB>> ]
-"1579" [label = <(METHOD_RETURN,void)<SUB>658</SUB>> ]
-  "1407" -> "1416" 
-  "1420" -> "1434" 
-  "1429" -> "1456" 
-  "1451" -> "1459" 
-  "1458" -> "1475" 
-  "1474" -> "1494" 
-  "1489" -> "1502" 
-  "1568" -> "1579" 
-  "1410" -> "1419" 
-  "1410" -> "1421" 
-  "1421" -> "1428" 
-  "1424" -> "1420" 
-  "1430" -> "1440" 
-  "1435" -> "1429" 
-  "1452" -> "1451" 
-  "1459" -> "1468" 
-  "1462" -> "1458" 
-  "1475" -> "1483" 
-  "1478" -> "1474" 
-  "1491" -> "1489" 
-  "1502" -> "1508" 
-  "1502" -> "1526" 
-  "1569" -> "1578" 
-  "1575" -> "1568" 
-  "1411" -> "1410" 
-  "1419" -> "1579" 
-  "1425" -> "1424" 
-  "1432" -> "1430" 
-  "1436" -> "1435" 
-  "1453" -> "1457" 
-  "1457" -> "1452" 
-  "1464" -> "1462" 
-  "1480" -> "1478" 
-  "1492" -> "1498" 
-  "1495" -> "1491" 
-  "1506" -> "1573" 
-  "1570" -> "1574" 
-  "1574" -> "1569" 
-  "1576" -> "1575" 
-  "1412" -> "1411" 
-  "1426" -> "1425" 
-  "1434" -> "1432" 
-  "1437" -> "1449" 
-  "1444" -> "1436" 
-  "1454" -> "1453" 
-  "1465" -> "1473" 
-  "1470" -> "1464" 
-  "1481" -> "1487" 
-  "1484" -> "1480" 
-  "1494" -> "1492" 
-  "1496" -> "1495" 
-  "1507" -> "1513" 
-  "1511" -> "1506" 
-  "1523" -> "1538" 
-  "1571" -> "1570" 
-  "1578" -> "1576" 
-  "1413" -> "1417" 
-  "1417" -> "1412" 
-  "1428" -> "1426" 
-  "1438" -> "1443" 
-  "1441" -> "1437" 
-  "1445" -> "1444" 
-  "1456" -> "1454" 
-  "1466" -> "1465" 
-  "1471" -> "1470" 
-  "1483" -> "1481" 
+digraph "PopLocalFrame" {  
+"1458" [label = <(soa,soa(env))<SUB>630</SUB>> ]
+"1460" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; survivor = soa.Decode&lt;mirror::Object&gt;(java_survivor))<SUB>631</SUB>> ]
+"1477" [label = <(PopFrame,soa.Env()-&gt;PopFrame())<SUB>632</SUB>> ]
+"1484" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(survivor);,return soa.AddLocalReference&lt;jobject&gt;(survivor);)<SUB>633</SUB>> ]
+"1461" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; survivor)<SUB>631</SUB>> ]
+"1468" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(java_survivor))<SUB>631</SUB>> ]
+"1478" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Env()-&gt;PopFrame)<SUB>632</SUB>> ]
+"1485" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(survivor))<SUB>633</SUB>> ]
+"1462" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>631</SUB>> ]
+"1469" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>631</SUB>> ]
+"1479" [label = <(Env,soa.Env())<SUB>632</SUB>> ]
+"1483" [label = <(FIELD_IDENTIFIER,PopFrame,PopFrame)<SUB>632</SUB>> ]
+"1486" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>633</SUB>> ]
+"1464" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>631</SUB>> ]
+"1470" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>631</SUB>> ]
+"1473" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>631</SUB>> ]
+"1480" [label = <(&lt;operator&gt;.fieldAccess,soa.Env)<SUB>632</SUB>> ]
+"1487" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>633</SUB>> ]
+"1466" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>631</SUB>> ]
+"1472" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>631</SUB>> ]
+"1475" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>631</SUB>> ]
+"1482" [label = <(FIELD_IDENTIFIER,Env,Env)<SUB>632</SUB>> ]
+"1489" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>633</SUB>> ]
+"1453" [label = <(METHOD,PopLocalFrame)<SUB>629</SUB>> ]
+"1492" [label = <(METHOD_RETURN,jobject)<SUB>629</SUB>> ]
+  "1458" -> "1466" 
+  "1460" -> "1482" 
+  "1477" -> "1489" 
+  "1484" -> "1492" 
+  "1461" -> "1472" 
+  "1468" -> "1460" 
+  "1478" -> "1477" 
   "1485" -> "1484" 
-  "1498" -> "1496" 
-  "1508" -> "1507" 
-  "1512" -> "1520" 
-  "1517" -> "1511" 
-  "1524" -> "1530" 
-  "1527" -> "1523" 
-  "1533" -> "1544" 
-  "1533" -> "1573" 
-  "1573" -> "1571" 
-  "1414" -> "1413" 
-  "1440" -> "1438" 
-  "1443" -> "1441" 
-  "1446" -> "1450" 
-  "1450" -> "1445" 
-  "1468" -> "1466" 
-  "1473" -> "1471" 
-  "1487" -> "1485" 
-  "1513" -> "1516" 
-  "1516" -> "1512" 
-  "1518" -> "1517" 
-  "1526" -> "1524" 
-  "1528" -> "1527" 
-  "1534" -> "1533" 
-  "1541" -> "1566" 
-  "1561" -> "1573" 
-  "1416" -> "1414" 
-  "1447" -> "1446" 
-  "1520" -> "1518" 
-  "1530" -> "1528" 
-  "1535" -> "1539" 
-  "1539" -> "1534" 
-  "1542" -> "1541" 
-  "1562" -> "1561" 
-  "1449" -> "1447" 
-  "1536" -> "1535" 
-  "1543" -> "1549" 
-  "1547" -> "1542" 
-  "1563" -> "1567" 
-  "1567" -> "1562" 
-  "1538" -> "1536" 
-  "1544" -> "1543" 
-  "1548" -> "1558" 
-  "1553" -> "1547" 
-  "1564" -> "1563" 
-  "1549" -> "1552" 
-  "1552" -> "1548" 
-  "1554" -> "1553" 
-  "1566" -> "1564" 
-  "1555" -> "1559" 
-  "1559" -> "1554" 
-  "1556" -> "1555" 
-  "1558" -> "1556" 
-  "1403" -> "1407" 
+  "1462" -> "1461" 
+  "1469" -> "1468" 
+  "1479" -> "1483" 
+  "1483" -> "1478" 
+  "1486" -> "1485" 
+  "1464" -> "1462" 
+  "1470" -> "1475" 
+  "1473" -> "1469" 
+  "1480" -> "1479" 
+  "1487" -> "1486" 
+  "1466" -> "1464" 
+  "1472" -> "1470" 
+  "1475" -> "1473" 
+  "1482" -> "1480" 
+  "1489" -> "1487" 
+  "1453" -> "1458" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/400-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/400-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/400-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/400-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "DeleteWeakGlobalRef" {  
-"18286" [label = <(METHOD,DeleteWeakGlobalRef)> ]
-"18291" [label = <(METHOD_RETURN,ANY)> ]
-  "18286" -> "18291" 
+digraph "CallNonvirtualVoidMethodA" {  
+"17947" [label = <(METHOD,CallNonvirtualVoidMethodA)> ]
+"17954" [label = <(METHOD_RETURN,ANY)> ]
+  "17947" -> "17954" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/401-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/401-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/401-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/401-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "Remove" {  
-"18292" [label = <(METHOD,Remove)> ]
-"18297" [label = <(METHOD_RETURN,ANY)> ]
-  "18292" -> "18297" 
+digraph "CHECK_NON_NULL_ARGUMENT(sig)" {  
+"17955" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(sig))> ]
+"17960" [label = <(METHOD_RETURN,ANY)> ]
+  "17955" -> "17960" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/402-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/402-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/402-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/402-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "IsStringClass" {  
-"18298" [label = <(METHOD,IsStringClass)> ]
-"18301" [label = <(METHOD_RETURN,ANY)> ]
-  "18298" -> "18301" 
+digraph "CHECK_NON_NULL_ARGUMENT(obj)" {  
+"17961" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(obj))> ]
+"17966" [label = <(METHOD_RETURN,ANY)> ]
+  "17961" -> "17966" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/403-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/403-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/403-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/403-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "GetCurrentAllocator" {  
-"18302" [label = <(METHOD,GetCurrentAllocator)> ]
-"18305" [label = <(METHOD_RETURN,ANY)> ]
-  "18302" -> "18305" 
+digraph "result" {  
+"17967" [label = <(METHOD,result)> ]
+"17970" [label = <(METHOD_RETURN,ANY)> ]
+  "17967" -> "17970" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/404-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/404-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/404-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/404-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "GetHeap" {  
-"18306" [label = <(METHOD,GetHeap)> ]
-"18309" [label = <(METHOD_RETURN,ANY)> ]
-  "18306" -> "18309" 
+digraph "InvokeVirtualOrInterfaceWithVarArgs" {  
+"17971" [label = <(METHOD,InvokeVirtualOrInterfaceWithVarArgs)> ]
+"17977" [label = <(METHOD_RETURN,ANY)> ]
+  "17971" -> "17977" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/405-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/405-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/405-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/405-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "AllocObject" {  
-"18310" [label = <(METHOD,AllocObject)> ]
-"18314" [label = <(METHOD_RETURN,ANY)> ]
-  "18310" -> "18314" 
+digraph "GetL" {  
+"17978" [label = <(METHOD,GetL)> ]
+"17981" [label = <(METHOD_RETURN,ANY)> ]
+  "17978" -> "17981" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/406-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/406-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/406-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/406-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "va_start" {  
-"18315" [label = <(METHOD,va_start)> ]
-"18319" [label = <(METHOD_RETURN,ANY)> ]
-  "18315" -> "18319" 
+digraph "InvokeVirtualOrInterfaceWithJValues" {  
+"17982" [label = <(METHOD,InvokeVirtualOrInterfaceWithJValues)> ]
+"17988" [label = <(METHOD_RETURN,ANY)> ]
+  "17982" -> "17988" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/407-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/407-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/407-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/407-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "free_args_later" {  
-"18320" [label = <(METHOD,free_args_later)> ]
-"18323" [label = <(METHOD_RETURN,ANY)> ]
-  "18320" -> "18323" 
+digraph "CHECK_NON_NULL_ARGUMENT_RETURN_ZERO" {  
+"17989" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO)<SUB>418</SUB>> ]
+"17992" [label = <(METHOD_RETURN,ANY)> ]
+  "17989" -> "17992" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/408-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/408-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/408-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/408-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.addressOf" {  
-"18324" [label = <(METHOD,&lt;operator&gt;.addressOf)> ]
-"18327" [label = <(METHOD_RETURN,ANY)> ]
-  "18324" -> "18327" 
+digraph "CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj)" {  
+"17993" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))> ]
+"17998" [label = <(METHOD_RETURN,ANY)> ]
+  "17993" -> "17998" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/409-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/409-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/409-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/409-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "NewObjectV" {  
-"18328" [label = <(METHOD,NewObjectV)> ]
-"18334" [label = <(METHOD_RETURN,ANY)> ]
-  "18328" -> "18334" 
+digraph "CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid)" {  
+"17999" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))> ]
+"18004" [label = <(METHOD_RETURN,ANY)> ]
+  "17999" -> "18004" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/41-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/41-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/41-cfg.dot	2023-06-07 19:33:45.357394696 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/41-cfg.dot	2023-06-07 19:33:51.937393993 +0330
@@ -1,31 +1,11 @@
-digraph "ExceptionOccurred" {  
-"1585" [label = <(soa,soa(env))<SUB>689</SUB>> ]
-"1588" [label = <(&lt;operator&gt;.assignment,* exception = soa.Self()-&gt;GetException())<SUB>690</SUB>> ]
-"1597" [label = <(RETURN,return soa.AddLocalReference&lt;jthrowable&gt;(exception);,return soa.AddLocalReference&lt;jthrowable&gt;(exception);)<SUB>691</SUB>> ]
-"1590" [label = <(GetException,soa.Self()-&gt;GetException())<SUB>690</SUB>> ]
-"1598" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jthrowable&gt;(exception))<SUB>691</SUB>> ]
-"1591" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;GetException)<SUB>690</SUB>> ]
-"1599" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jthrowable)<SUB>691</SUB>> ]
-"1592" [label = <(Self,soa.Self())<SUB>690</SUB>> ]
-"1596" [label = <(FIELD_IDENTIFIER,GetException,GetException)<SUB>690</SUB>> ]
-"1600" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>691</SUB>> ]
-"1593" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>690</SUB>> ]
-"1602" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>691</SUB>> ]
-"1595" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>690</SUB>> ]
-"1581" [label = <(METHOD,ExceptionOccurred)<SUB>688</SUB>> ]
-"1605" [label = <(METHOD_RETURN,jthrowable)<SUB>688</SUB>> ]
-  "1585" -> "1595" 
-  "1588" -> "1602" 
-  "1597" -> "1605" 
-  "1590" -> "1588" 
-  "1598" -> "1597" 
-  "1591" -> "1590" 
-  "1599" -> "1598" 
-  "1592" -> "1596" 
-  "1596" -> "1591" 
-  "1600" -> "1599" 
-  "1593" -> "1592" 
-  "1602" -> "1600" 
-  "1595" -> "1593" 
-  "1581" -> "1585" 
+digraph "EnsureLocalCapacity" {  
+"1499" [label = <(soa,soa(env))<SUB>638</SUB>> ]
+"1501" [label = <(RETURN,return EnsureLocalCapacityInternal(soa, desired_capacity, &quot;EnsureLocalCapacity&quot;);,return EnsureLocalCapacityInternal(soa, desired_capacity, &quot;EnsureLocalCapacity&quot;);)<SUB>639</SUB>> ]
+"1502" [label = <(EnsureLocalCapacityInternal,EnsureLocalCapacityInternal(soa, desired_capacity, &quot;EnsureLocalCapacity&quot;))<SUB>639</SUB>> ]
+"1494" [label = <(METHOD,EnsureLocalCapacity)<SUB>636</SUB>> ]
+"1506" [label = <(METHOD_RETURN,jint)<SUB>636</SUB>> ]
+  "1499" -> "1502" 
+  "1501" -> "1506" 
+  "1502" -> "1501" 
+  "1494" -> "1499" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/410-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/410-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/410-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/410-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "WellKnownClasses::StringInitToStringFactory" {  
-"18335" [label = <(METHOD,WellKnownClasses::StringInitToStringFactory)> ]
-"18339" [label = <(METHOD_RETURN,ANY)> ]
-  "18335" -> "18339" 
+digraph "GetZ" {  
+"18005" [label = <(METHOD,GetZ)> ]
+"18008" [label = <(METHOD_RETURN,ANY)> ]
+  "18005" -> "18008" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/411-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/411-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/411-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/411-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "CallStaticObjectMethodV" {  
-"18340" [label = <(METHOD,CallStaticObjectMethodV)> ]
-"18346" [label = <(METHOD_RETURN,ANY)> ]
-  "18340" -> "18346" 
+digraph "GetB" {  
+"18009" [label = <(METHOD,GetB)> ]
+"18012" [label = <(METHOD_RETURN,ANY)> ]
+  "18009" -> "18012" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/412-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/412-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/412-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/412-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "CallNonvirtualVoidMethodV" {  
-"18347" [label = <(METHOD,CallNonvirtualVoidMethodV)> ]
-"18354" [label = <(METHOD_RETURN,ANY)> ]
-  "18347" -> "18354" 
+digraph "GetC" {  
+"18013" [label = <(METHOD,GetC)> ]
+"18016" [label = <(METHOD_RETURN,ANY)> ]
+  "18013" -> "18016" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/413-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/413-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/413-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/413-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "CallStaticObjectMethodA" {  
-"18355" [label = <(METHOD,CallStaticObjectMethodA)> ]
-"18361" [label = <(METHOD_RETURN,ANY)> ]
-  "18355" -> "18361" 
+digraph "GetD" {  
+"18017" [label = <(METHOD,GetD)> ]
+"18020" [label = <(METHOD_RETURN,ANY)> ]
+  "18017" -> "18020" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/414-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/414-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/414-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/414-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "CallNonvirtualVoidMethodA" {  
-"18362" [label = <(METHOD,CallNonvirtualVoidMethodA)> ]
-"18369" [label = <(METHOD_RETURN,ANY)> ]
-  "18362" -> "18369" 
+digraph "GetF" {  
+"18021" [label = <(METHOD,GetF)> ]
+"18024" [label = <(METHOD_RETURN,ANY)> ]
+  "18021" -> "18024" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/415-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/415-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/415-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/415-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT(sig)" {  
-"18370" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(sig))> ]
-"18375" [label = <(METHOD_RETURN,ANY)> ]
-  "18370" -> "18375" 
+digraph "GetI" {  
+"18025" [label = <(METHOD,GetI)> ]
+"18028" [label = <(METHOD_RETURN,ANY)> ]
+  "18025" -> "18028" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/416-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/416-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/416-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/416-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT(obj)" {  
-"18376" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(obj))> ]
-"18381" [label = <(METHOD_RETURN,ANY)> ]
-  "18376" -> "18381" 
+digraph "GetJ" {  
+"18029" [label = <(METHOD,GetJ)> ]
+"18032" [label = <(METHOD_RETURN,ANY)> ]
+  "18029" -> "18032" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/417-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/417-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/417-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/417-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "result" {  
-"18382" [label = <(METHOD,result)> ]
-"18385" [label = <(METHOD_RETURN,ANY)> ]
-  "18382" -> "18385" 
+digraph "GetS" {  
+"18033" [label = <(METHOD,GetS)> ]
+"18036" [label = <(METHOD_RETURN,ANY)> ]
+  "18033" -> "18036" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/418-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/418-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/418-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/418-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "InvokeVirtualOrInterfaceWithVarArgs" {  
-"18386" [label = <(METHOD,InvokeVirtualOrInterfaceWithVarArgs)> ]
-"18392" [label = <(METHOD_RETURN,ANY)> ]
-  "18386" -> "18392" 
+digraph "CHECK_NON_NULL_ARGUMENT_RETURN_VOID" {  
+"18037" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_VOID)<SUB>415</SUB>> ]
+"18040" [label = <(METHOD_RETURN,ANY)> ]
+  "18037" -> "18040" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/419-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/419-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/419-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/419-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "GetL" {  
-"18393" [label = <(METHOD,GetL)> ]
-"18396" [label = <(METHOD_RETURN,ANY)> ]
-  "18393" -> "18396" 
+digraph "CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj)" {  
+"18041" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))> ]
+"18046" [label = <(METHOD_RETURN,ANY)> ]
+  "18041" -> "18046" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/42-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/42-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/42-cfg.dot	2023-06-07 19:33:45.357394696 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/42-cfg.dot	2023-06-07 19:33:51.937393993 +0330
@@ -1,11 +1,49 @@
-digraph "FatalError" {  
-"1611" [label = <(&lt;operator&gt;.shiftLeft,LOG(FATAL) &lt;&lt; &quot;JNI FatalError called: &quot; &lt;&lt; msg)<SUB>695</SUB>> ]
-"1612" [label = <(&lt;operator&gt;.shiftLeft,LOG(FATAL) &lt;&lt; &quot;JNI FatalError called: &quot;)<SUB>695</SUB>> ]
-"1613" [label = <(LOG,LOG(FATAL))<SUB>695</SUB>> ]
-"1607" [label = <(METHOD,FatalError)<SUB>694</SUB>> ]
-"1617" [label = <(METHOD_RETURN,void)<SUB>694</SUB>> ]
-  "1611" -> "1617" 
-  "1612" -> "1611" 
-  "1613" -> "1612" 
-  "1607" -> "1613" 
+digraph "NewGlobalRef" {  
+"1513" [label = <(soa,soa(env))<SUB>643</SUB>> ]
+"1515" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; decoded_obj = soa.Decode&lt;mirror::Object&gt;(obj))<SUB>644</SUB>> ]
+"1532" [label = <(RETURN,return soa.Vm()-&gt;AddGlobalRef(soa.Self(), decoded_obj);,return soa.Vm()-&gt;AddGlobalRef(soa.Self(), decoded_obj);)<SUB>645</SUB>> ]
+"1516" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; decoded_obj)<SUB>644</SUB>> ]
+"1523" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(obj))<SUB>644</SUB>> ]
+"1533" [label = <(AddGlobalRef,soa.Vm()-&gt;AddGlobalRef(soa.Self(), decoded_obj))<SUB>645</SUB>> ]
+"1517" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>644</SUB>> ]
+"1524" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>644</SUB>> ]
+"1534" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Vm()-&gt;AddGlobalRef)<SUB>645</SUB>> ]
+"1540" [label = <(Self,soa.Self())<SUB>645</SUB>> ]
+"1519" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>644</SUB>> ]
+"1525" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>644</SUB>> ]
+"1528" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>644</SUB>> ]
+"1535" [label = <(Vm,soa.Vm())<SUB>645</SUB>> ]
+"1539" [label = <(FIELD_IDENTIFIER,AddGlobalRef,AddGlobalRef)<SUB>645</SUB>> ]
+"1541" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>645</SUB>> ]
+"1521" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>644</SUB>> ]
+"1527" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>644</SUB>> ]
+"1530" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>644</SUB>> ]
+"1536" [label = <(&lt;operator&gt;.fieldAccess,soa.Vm)<SUB>645</SUB>> ]
+"1543" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>645</SUB>> ]
+"1538" [label = <(FIELD_IDENTIFIER,Vm,Vm)<SUB>645</SUB>> ]
+"1508" [label = <(METHOD,NewGlobalRef)<SUB>642</SUB>> ]
+"1545" [label = <(METHOD_RETURN,jobject)<SUB>642</SUB>> ]
+  "1513" -> "1521" 
+  "1515" -> "1538" 
+  "1532" -> "1545" 
+  "1516" -> "1527" 
+  "1523" -> "1515" 
+  "1533" -> "1532" 
+  "1517" -> "1516" 
+  "1524" -> "1523" 
+  "1534" -> "1543" 
+  "1540" -> "1533" 
+  "1519" -> "1517" 
+  "1525" -> "1530" 
+  "1528" -> "1524" 
+  "1535" -> "1539" 
+  "1539" -> "1534" 
+  "1541" -> "1540" 
+  "1521" -> "1519" 
+  "1527" -> "1525" 
+  "1530" -> "1528" 
+  "1536" -> "1535" 
+  "1543" -> "1541" 
+  "1538" -> "1536" 
+  "1508" -> "1513" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/420-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/420-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/420-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/420-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "InvokeVirtualOrInterfaceWithJValues" {  
-"18397" [label = <(METHOD,InvokeVirtualOrInterfaceWithJValues)> ]
-"18403" [label = <(METHOD_RETURN,ANY)> ]
-  "18397" -> "18403" 
+digraph "CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid)" {  
+"18047" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))> ]
+"18052" [label = <(METHOD_RETURN,ANY)> ]
+  "18047" -> "18052" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/421-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/421-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/421-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/421-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_RETURN_ZERO" {  
-"18404" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO)<SUB>497</SUB>> ]
-"18407" [label = <(METHOD_RETURN,ANY)> ]
-  "18404" -> "18407" 
+digraph "InvokeWithVarArgs" {  
+"18053" [label = <(METHOD,InvokeWithVarArgs)> ]
+"18059" [label = <(METHOD_RETURN,ANY)> ]
+  "18053" -> "18059" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/422-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/422-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/422-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/422-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj)" {  
-"18408" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))> ]
-"18413" [label = <(METHOD_RETURN,ANY)> ]
-  "18408" -> "18413" 
+digraph "InvokeWithJValues" {  
+"18060" [label = <(METHOD,InvokeWithJValues)> ]
+"18066" [label = <(METHOD_RETURN,ANY)> ]
+  "18060" -> "18066" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/423-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/423-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/423-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/423-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid)" {  
-"18414" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))> ]
-"18419" [label = <(METHOD_RETURN,ANY)> ]
-  "18414" -> "18419" 
+digraph "GetObject" {  
+"18067" [label = <(METHOD,GetObject)> ]
+"18071" [label = <(METHOD_RETURN,ANY)> ]
+  "18067" -> "18071" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/424-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/424-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/424-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/424-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "GetZ" {  
-"18420" [label = <(METHOD,GetZ)> ]
-"18423" [label = <(METHOD_RETURN,ANY)> ]
-  "18420" -> "18423" 
+digraph "GetDeclaringClass" {  
+"18072" [label = <(METHOD,GetDeclaringClass)> ]
+"18075" [label = <(METHOD_RETURN,ANY)> ]
+  "18072" -> "18075" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/425-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/425-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/425-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/425-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "GetB" {  
-"18424" [label = <(METHOD,GetB)> ]
-"18427" [label = <(METHOD_RETURN,ANY)> ]
-  "18424" -> "18427" 
+digraph "CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_object)" {  
+"18076" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_object))> ]
+"18081" [label = <(METHOD_RETURN,ANY)> ]
+  "18076" -> "18081" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/426-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/426-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/426-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/426-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "GetC" {  
-"18428" [label = <(METHOD,GetC)> ]
-"18431" [label = <(METHOD_RETURN,ANY)> ]
-  "18428" -> "18431" 
+digraph "CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid)" {  
+"18082" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid))> ]
+"18087" [label = <(METHOD_RETURN,ANY)> ]
+  "18082" -> "18087" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/427-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/427-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/427-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/427-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "GetD" {  
-"18432" [label = <(METHOD,GetD)> ]
-"18435" [label = <(METHOD_RETURN,ANY)> ]
-  "18432" -> "18435" 
+digraph "NotifySetObjectField" {  
+"18088" [label = <(METHOD,NotifySetObjectField)> ]
+"18093" [label = <(METHOD_RETURN,ANY)> ]
+  "18088" -> "18093" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/428-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/428-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/428-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/428-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "GetF" {  
-"18436" [label = <(METHOD,GetF)> ]
-"18439" [label = <(METHOD_RETURN,ANY)> ]
-  "18436" -> "18439" 
+digraph "GET_PRIMITIVE_FIELD" {  
+"18094" [label = <(METHOD,GET_PRIMITIVE_FIELD)<SUB>1381</SUB>> ]
+"18097" [label = <(METHOD_RETURN,ANY)> ]
+  "18094" -> "18097" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/429-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/429-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/429-cfg.dot	2023-06-07 19:33:45.557394674 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/429-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "GetI" {  
-"18440" [label = <(METHOD,GetI)> ]
-"18443" [label = <(METHOD_RETURN,ANY)> ]
-  "18440" -> "18443" 
+digraph "GET_PRIMITIVE_FIELD(Boolean, obj)" {  
+"18098" [label = <(METHOD,GET_PRIMITIVE_FIELD(Boolean, obj))> ]
+"18102" [label = <(METHOD_RETURN,ANY)> ]
+  "18098" -> "18102" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/43-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/43-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/43-cfg.dot	2023-06-07 19:33:45.357394696 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/43-cfg.dot	2023-06-07 19:33:51.937393993 +0330
@@ -1,24 +1,29 @@
-digraph "PushLocalFrame" {  
-"1624" [label = <(soa,soa(env))<SUB>700</SUB>> ]
-"1636" [label = <(PushFrame,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;PushFrame(capacity))<SUB>704</SUB>> ]
-"1642" [label = <(RETURN,return JNI_OK;,return JNI_OK;)<SUB>705</SUB>> ]
-"1627" [label = <(&lt;operator&gt;.notEquals,EnsureLocalCapacityInternal(soa, capacity, &quot;PushLocalFrame&quot;) != JNI_OK)<SUB>701</SUB>> ]
-"1637" [label = <(&lt;operator&gt;.indirectFieldAccess,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;PushFrame)<SUB>704</SUB>> ]
-"1628" [label = <(EnsureLocalCapacityInternal,EnsureLocalCapacityInternal(soa, capacity, &quot;PushLocalFrame&quot;))<SUB>701</SUB>> ]
-"1634" [label = <(RETURN,return JNI_ERR;,return JNI_ERR;)<SUB>702</SUB>> ]
-"1638" [label = <(down_cast&lt;JNIEnvExt*&gt;,down_cast&lt;JNIEnvExt*&gt;(env))<SUB>704</SUB>> ]
-"1640" [label = <(FIELD_IDENTIFIER,PushFrame,PushFrame)<SUB>704</SUB>> ]
-"1619" [label = <(METHOD,PushLocalFrame)<SUB>698</SUB>> ]
-"1644" [label = <(METHOD_RETURN,jint)<SUB>698</SUB>> ]
-  "1624" -> "1628" 
-  "1636" -> "1642" 
-  "1642" -> "1644" 
-  "1627" -> "1634" 
-  "1627" -> "1638" 
-  "1637" -> "1636" 
-  "1628" -> "1627" 
-  "1634" -> "1644" 
-  "1638" -> "1640" 
-  "1640" -> "1637" 
-  "1619" -> "1624" 
+digraph "DeleteGlobalRef" {  
+"1552" [label = <(&lt;operator&gt;.assignment,* vm = down_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm())<SUB>649</SUB>> ]
+"1560" [label = <(&lt;operator&gt;.assignment,* self = down_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_)<SUB>650</SUB>> ]
+"1566" [label = <(DeleteGlobalRef,vm-&gt;DeleteGlobalRef(self, obj))<SUB>651</SUB>> ]
+"1554" [label = <(GetVm,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm())<SUB>649</SUB>> ]
+"1562" [label = <(&lt;operator&gt;.indirectFieldAccess,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_)<SUB>650</SUB>> ]
+"1567" [label = <(&lt;operator&gt;.indirectFieldAccess,vm-&gt;DeleteGlobalRef)<SUB>651</SUB>> ]
+"1555" [label = <(&lt;operator&gt;.indirectFieldAccess,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm)<SUB>649</SUB>> ]
+"1563" [label = <(down_cast&lt;JNIEnvExt*&gt;,down_cast&lt;JNIEnvExt*&gt;(env))<SUB>650</SUB>> ]
+"1565" [label = <(FIELD_IDENTIFIER,self_,self_)<SUB>650</SUB>> ]
+"1569" [label = <(FIELD_IDENTIFIER,DeleteGlobalRef,DeleteGlobalRef)<SUB>651</SUB>> ]
+"1556" [label = <(down_cast&lt;JNIEnvExt*&gt;,down_cast&lt;JNIEnvExt*&gt;(env))<SUB>649</SUB>> ]
+"1558" [label = <(FIELD_IDENTIFIER,GetVm,GetVm)<SUB>649</SUB>> ]
+"1547" [label = <(METHOD,DeleteGlobalRef)<SUB>648</SUB>> ]
+"1572" [label = <(METHOD_RETURN,void)<SUB>648</SUB>> ]
+  "1552" -> "1563" 
+  "1560" -> "1569" 
+  "1566" -> "1572" 
+  "1554" -> "1552" 
+  "1562" -> "1560" 
+  "1567" -> "1566" 
+  "1555" -> "1554" 
+  "1563" -> "1565" 
+  "1565" -> "1562" 
+  "1569" -> "1567" 
+  "1556" -> "1558" 
+  "1558" -> "1555" 
+  "1547" -> "1556" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/430-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/430-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/430-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/430-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "GetJ" {  
-"18444" [label = <(METHOD,GetJ)> ]
-"18447" [label = <(METHOD_RETURN,ANY)> ]
-  "18444" -> "18447" 
+digraph "GET_PRIMITIVE_FIELD(Byte, obj)" {  
+"18103" [label = <(METHOD,GET_PRIMITIVE_FIELD(Byte, obj))> ]
+"18107" [label = <(METHOD_RETURN,ANY)> ]
+  "18103" -> "18107" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/431-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/431-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/431-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/431-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "GetS" {  
-"18448" [label = <(METHOD,GetS)> ]
-"18451" [label = <(METHOD_RETURN,ANY)> ]
-  "18448" -> "18451" 
+digraph "GET_PRIMITIVE_FIELD(Char, obj)" {  
+"18108" [label = <(METHOD,GET_PRIMITIVE_FIELD(Char, obj))> ]
+"18112" [label = <(METHOD_RETURN,ANY)> ]
+  "18108" -> "18112" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/432-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/432-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/432-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/432-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_RETURN_VOID" {  
-"18452" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_VOID)<SUB>494</SUB>> ]
-"18455" [label = <(METHOD_RETURN,ANY)> ]
-  "18452" -> "18455" 
+digraph "GET_PRIMITIVE_FIELD(Short, obj)" {  
+"18113" [label = <(METHOD,GET_PRIMITIVE_FIELD(Short, obj))> ]
+"18117" [label = <(METHOD_RETURN,ANY)> ]
+  "18113" -> "18117" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/433-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/433-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/433-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/433-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj)" {  
-"18456" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))> ]
-"18461" [label = <(METHOD_RETURN,ANY)> ]
-  "18456" -> "18461" 
+digraph "GET_PRIMITIVE_FIELD(Int, obj)" {  
+"18118" [label = <(METHOD,GET_PRIMITIVE_FIELD(Int, obj))> ]
+"18122" [label = <(METHOD_RETURN,ANY)> ]
+  "18118" -> "18122" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/434-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/434-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/434-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/434-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid)" {  
-"18462" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))> ]
-"18467" [label = <(METHOD_RETURN,ANY)> ]
-  "18462" -> "18467" 
+digraph "GET_PRIMITIVE_FIELD(Long, obj)" {  
+"18123" [label = <(METHOD,GET_PRIMITIVE_FIELD(Long, obj))> ]
+"18127" [label = <(METHOD_RETURN,ANY)> ]
+  "18123" -> "18127" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/435-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/435-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/435-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/435-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "InvokeWithVarArgs" {  
-"18468" [label = <(METHOD,InvokeWithVarArgs)> ]
-"18474" [label = <(METHOD_RETURN,ANY)> ]
-  "18468" -> "18474" 
+digraph "GET_PRIMITIVE_FIELD(Float, obj)" {  
+"18128" [label = <(METHOD,GET_PRIMITIVE_FIELD(Float, obj))> ]
+"18132" [label = <(METHOD_RETURN,ANY)> ]
+  "18128" -> "18132" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/436-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/436-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/436-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/436-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "InvokeWithJValues" {  
-"18475" [label = <(METHOD,InvokeWithJValues)> ]
-"18481" [label = <(METHOD_RETURN,ANY)> ]
-  "18475" -> "18481" 
+digraph "GET_PRIMITIVE_FIELD(Double, obj)" {  
+"18133" [label = <(METHOD,GET_PRIMITIVE_FIELD(Double, obj))> ]
+"18137" [label = <(METHOD_RETURN,ANY)> ]
+  "18133" -> "18137" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/437-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/437-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/437-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/437-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "GetObject" {  
-"18482" [label = <(METHOD,GetObject)> ]
-"18486" [label = <(METHOD_RETURN,ANY)> ]
-  "18482" -> "18486" 
+digraph "GET_STATIC_PRIMITIVE_FIELD" {  
+"18138" [label = <(METHOD,GET_STATIC_PRIMITIVE_FIELD)<SUB>1390</SUB>> ]
+"18140" [label = <(METHOD_RETURN,ANY)> ]
+  "18138" -> "18140" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/438-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/438-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/438-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/438-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "GetDeclaringClass" {  
-"18487" [label = <(METHOD,GetDeclaringClass)> ]
-"18490" [label = <(METHOD_RETURN,ANY)> ]
-  "18487" -> "18490" 
+digraph "GET_STATIC_PRIMITIVE_FIELD(Boolean)" {  
+"18141" [label = <(METHOD,GET_STATIC_PRIMITIVE_FIELD(Boolean))> ]
+"18144" [label = <(METHOD_RETURN,ANY)> ]
+  "18141" -> "18144" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/439-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/439-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/439-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/439-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_object)" {  
-"18491" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_object))> ]
-"18496" [label = <(METHOD_RETURN,ANY)> ]
-  "18491" -> "18496" 
+digraph "GET_STATIC_PRIMITIVE_FIELD(Byte)" {  
+"18145" [label = <(METHOD,GET_STATIC_PRIMITIVE_FIELD(Byte))> ]
+"18148" [label = <(METHOD_RETURN,ANY)> ]
+  "18145" -> "18148" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/44-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/44-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/44-cfg.dot	2023-06-07 19:33:45.357394696 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/44-cfg.dot	2023-06-07 19:33:51.937393993 +0330
@@ -1,51 +1,49 @@
-digraph "PopLocalFrame" {  
-"1651" [label = <(soa,soa(env))<SUB>709</SUB>> ]
-"1653" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; survivor = soa.Decode&lt;mirror::Object&gt;(java_survivor))<SUB>710</SUB>> ]
-"1670" [label = <(PopFrame,soa.Env()-&gt;PopFrame())<SUB>711</SUB>> ]
-"1677" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(survivor);,return soa.AddLocalReference&lt;jobject&gt;(survivor);)<SUB>712</SUB>> ]
-"1654" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; survivor)<SUB>710</SUB>> ]
-"1661" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(java_survivor))<SUB>710</SUB>> ]
-"1671" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Env()-&gt;PopFrame)<SUB>711</SUB>> ]
-"1678" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(survivor))<SUB>712</SUB>> ]
-"1655" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>710</SUB>> ]
-"1662" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>710</SUB>> ]
-"1672" [label = <(Env,soa.Env())<SUB>711</SUB>> ]
-"1676" [label = <(FIELD_IDENTIFIER,PopFrame,PopFrame)<SUB>711</SUB>> ]
-"1679" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>712</SUB>> ]
-"1657" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>710</SUB>> ]
-"1663" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>710</SUB>> ]
-"1666" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>710</SUB>> ]
-"1673" [label = <(&lt;operator&gt;.fieldAccess,soa.Env)<SUB>711</SUB>> ]
-"1680" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>712</SUB>> ]
-"1659" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>710</SUB>> ]
-"1665" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>710</SUB>> ]
-"1668" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>710</SUB>> ]
-"1675" [label = <(FIELD_IDENTIFIER,Env,Env)<SUB>711</SUB>> ]
-"1682" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>712</SUB>> ]
-"1646" [label = <(METHOD,PopLocalFrame)<SUB>708</SUB>> ]
-"1685" [label = <(METHOD_RETURN,jobject)<SUB>708</SUB>> ]
-  "1651" -> "1659" 
-  "1653" -> "1675" 
-  "1670" -> "1682" 
-  "1677" -> "1685" 
-  "1654" -> "1665" 
-  "1661" -> "1653" 
-  "1671" -> "1670" 
-  "1678" -> "1677" 
-  "1655" -> "1654" 
-  "1662" -> "1661" 
-  "1672" -> "1676" 
-  "1676" -> "1671" 
-  "1679" -> "1678" 
-  "1657" -> "1655" 
-  "1663" -> "1668" 
-  "1666" -> "1662" 
-  "1673" -> "1672" 
-  "1680" -> "1679" 
-  "1659" -> "1657" 
-  "1665" -> "1663" 
-  "1668" -> "1666" 
-  "1675" -> "1673" 
-  "1682" -> "1680" 
-  "1646" -> "1651" 
+digraph "NewWeakGlobalRef" {  
+"1579" [label = <(soa,soa(env))<SUB>655</SUB>> ]
+"1581" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; decoded_obj = soa.Decode&lt;mirror::Object&gt;(obj))<SUB>656</SUB>> ]
+"1598" [label = <(RETURN,return soa.Vm()-&gt;AddWeakGlobalRef(soa.Self(), decoded_obj);,return soa.Vm()-&gt;AddWeakGlobalRef(soa.Self(), decoded_obj);)<SUB>657</SUB>> ]
+"1582" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; decoded_obj)<SUB>656</SUB>> ]
+"1589" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(obj))<SUB>656</SUB>> ]
+"1599" [label = <(AddWeakGlobalRef,soa.Vm()-&gt;AddWeakGlobalRef(soa.Self(), decoded_obj))<SUB>657</SUB>> ]
+"1583" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>656</SUB>> ]
+"1590" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>656</SUB>> ]
+"1600" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Vm()-&gt;AddWeakGlobalRef)<SUB>657</SUB>> ]
+"1606" [label = <(Self,soa.Self())<SUB>657</SUB>> ]
+"1585" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>656</SUB>> ]
+"1591" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>656</SUB>> ]
+"1594" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>656</SUB>> ]
+"1601" [label = <(Vm,soa.Vm())<SUB>657</SUB>> ]
+"1605" [label = <(FIELD_IDENTIFIER,AddWeakGlobalRef,AddWeakGlobalRef)<SUB>657</SUB>> ]
+"1607" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>657</SUB>> ]
+"1587" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>656</SUB>> ]
+"1593" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>656</SUB>> ]
+"1596" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>656</SUB>> ]
+"1602" [label = <(&lt;operator&gt;.fieldAccess,soa.Vm)<SUB>657</SUB>> ]
+"1609" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>657</SUB>> ]
+"1604" [label = <(FIELD_IDENTIFIER,Vm,Vm)<SUB>657</SUB>> ]
+"1574" [label = <(METHOD,NewWeakGlobalRef)<SUB>654</SUB>> ]
+"1611" [label = <(METHOD_RETURN,jweak)<SUB>654</SUB>> ]
+  "1579" -> "1587" 
+  "1581" -> "1604" 
+  "1598" -> "1611" 
+  "1582" -> "1593" 
+  "1589" -> "1581" 
+  "1599" -> "1598" 
+  "1583" -> "1582" 
+  "1590" -> "1589" 
+  "1600" -> "1609" 
+  "1606" -> "1599" 
+  "1585" -> "1583" 
+  "1591" -> "1596" 
+  "1594" -> "1590" 
+  "1601" -> "1605" 
+  "1605" -> "1600" 
+  "1607" -> "1606" 
+  "1587" -> "1585" 
+  "1593" -> "1591" 
+  "1596" -> "1594" 
+  "1602" -> "1601" 
+  "1609" -> "1607" 
+  "1604" -> "1602" 
+  "1574" -> "1579" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/440-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/440-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/440-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/440-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid)" {  
-"18497" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid))> ]
-"18502" [label = <(METHOD_RETURN,ANY)> ]
-  "18497" -> "18502" 
+digraph "GET_STATIC_PRIMITIVE_FIELD(Char)" {  
+"18149" [label = <(METHOD,GET_STATIC_PRIMITIVE_FIELD(Char))> ]
+"18152" [label = <(METHOD_RETURN,ANY)> ]
+  "18149" -> "18152" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/441-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/441-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/441-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/441-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "NotifySetObjectField" {  
-"18503" [label = <(METHOD,NotifySetObjectField)> ]
-"18508" [label = <(METHOD_RETURN,ANY)> ]
-  "18503" -> "18508" 
+digraph "GET_STATIC_PRIMITIVE_FIELD(Short)" {  
+"18153" [label = <(METHOD,GET_STATIC_PRIMITIVE_FIELD(Short))> ]
+"18156" [label = <(METHOD_RETURN,ANY)> ]
+  "18153" -> "18156" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/442-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/442-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/442-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/442-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "GET_PRIMITIVE_FIELD" {  
-"18509" [label = <(METHOD,GET_PRIMITIVE_FIELD)<SUB>1460</SUB>> ]
-"18512" [label = <(METHOD_RETURN,ANY)> ]
-  "18509" -> "18512" 
+digraph "GET_STATIC_PRIMITIVE_FIELD(Int)" {  
+"18157" [label = <(METHOD,GET_STATIC_PRIMITIVE_FIELD(Int))> ]
+"18160" [label = <(METHOD_RETURN,ANY)> ]
+  "18157" -> "18160" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/443-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/443-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/443-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/443-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "GET_PRIMITIVE_FIELD(Boolean, obj)" {  
-"18513" [label = <(METHOD,GET_PRIMITIVE_FIELD(Boolean, obj))> ]
-"18517" [label = <(METHOD_RETURN,ANY)> ]
-  "18513" -> "18517" 
+digraph "GET_STATIC_PRIMITIVE_FIELD(Long)" {  
+"18161" [label = <(METHOD,GET_STATIC_PRIMITIVE_FIELD(Long))> ]
+"18164" [label = <(METHOD_RETURN,ANY)> ]
+  "18161" -> "18164" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/444-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/444-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/444-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/444-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "GET_PRIMITIVE_FIELD(Byte, obj)" {  
-"18518" [label = <(METHOD,GET_PRIMITIVE_FIELD(Byte, obj))> ]
-"18522" [label = <(METHOD_RETURN,ANY)> ]
-  "18518" -> "18522" 
+digraph "GET_STATIC_PRIMITIVE_FIELD(Float)" {  
+"18165" [label = <(METHOD,GET_STATIC_PRIMITIVE_FIELD(Float))> ]
+"18168" [label = <(METHOD_RETURN,ANY)> ]
+  "18165" -> "18168" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/445-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/445-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/445-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/445-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "GET_PRIMITIVE_FIELD(Char, obj)" {  
-"18523" [label = <(METHOD,GET_PRIMITIVE_FIELD(Char, obj))> ]
-"18527" [label = <(METHOD_RETURN,ANY)> ]
-  "18523" -> "18527" 
+digraph "GET_STATIC_PRIMITIVE_FIELD(Double)" {  
+"18169" [label = <(METHOD,GET_STATIC_PRIMITIVE_FIELD(Double))> ]
+"18172" [label = <(METHOD_RETURN,ANY)> ]
+  "18169" -> "18172" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/446-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/446-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/446-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/446-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "GET_PRIMITIVE_FIELD(Short, obj)" {  
-"18528" [label = <(METHOD,GET_PRIMITIVE_FIELD(Short, obj))> ]
-"18532" [label = <(METHOD_RETURN,ANY)> ]
-  "18528" -> "18532" 
+digraph "SET_PRIMITIVE_FIELD" {  
+"18173" [label = <(METHOD,SET_PRIMITIVE_FIELD)<SUB>1397</SUB>> ]
+"18176" [label = <(METHOD_RETURN,ANY)> ]
+  "18173" -> "18176" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/447-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/447-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/447-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/447-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "GET_PRIMITIVE_FIELD(Int, obj)" {  
-"18533" [label = <(METHOD,GET_PRIMITIVE_FIELD(Int, obj))> ]
-"18537" [label = <(METHOD_RETURN,ANY)> ]
-  "18533" -> "18537" 
+digraph "SET_PRIMITIVE_FIELD(Boolean, obj, v)" {  
+"18177" [label = <(METHOD,SET_PRIMITIVE_FIELD(Boolean, obj, v))> ]
+"18181" [label = <(METHOD_RETURN,ANY)> ]
+  "18177" -> "18181" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/448-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/448-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/448-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/448-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "GET_PRIMITIVE_FIELD(Long, obj)" {  
-"18538" [label = <(METHOD,GET_PRIMITIVE_FIELD(Long, obj))> ]
-"18542" [label = <(METHOD_RETURN,ANY)> ]
-  "18538" -> "18542" 
+digraph "SET_PRIMITIVE_FIELD(Byte, obj, v)" {  
+"18182" [label = <(METHOD,SET_PRIMITIVE_FIELD(Byte, obj, v))> ]
+"18186" [label = <(METHOD_RETURN,ANY)> ]
+  "18182" -> "18186" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/449-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/449-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/449-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/449-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "GET_PRIMITIVE_FIELD(Float, obj)" {  
-"18543" [label = <(METHOD,GET_PRIMITIVE_FIELD(Float, obj))> ]
-"18547" [label = <(METHOD_RETURN,ANY)> ]
-  "18543" -> "18547" 
+digraph "SET_PRIMITIVE_FIELD(Char, obj, v)" {  
+"18187" [label = <(METHOD,SET_PRIMITIVE_FIELD(Char, obj, v))> ]
+"18191" [label = <(METHOD_RETURN,ANY)> ]
+  "18187" -> "18191" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/45-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/45-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/45-cfg.dot	2023-06-07 19:33:45.357394696 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/45-cfg.dot	2023-06-07 19:33:51.937393993 +0330
@@ -1,11 +1,29 @@
-digraph "EnsureLocalCapacity" {  
-"1692" [label = <(soa,soa(env))<SUB>717</SUB>> ]
-"1694" [label = <(RETURN,return EnsureLocalCapacityInternal(soa, desired_capacity, &quot;EnsureLocalCapacity&quot;);,return EnsureLocalCapacityInternal(soa, desired_capacity, &quot;EnsureLocalCapacity&quot;);)<SUB>718</SUB>> ]
-"1695" [label = <(EnsureLocalCapacityInternal,EnsureLocalCapacityInternal(soa, desired_capacity, &quot;EnsureLocalCapacity&quot;))<SUB>718</SUB>> ]
-"1687" [label = <(METHOD,EnsureLocalCapacity)<SUB>715</SUB>> ]
-"1699" [label = <(METHOD_RETURN,jint)<SUB>715</SUB>> ]
-  "1692" -> "1695" 
-  "1694" -> "1699" 
-  "1695" -> "1694" 
-  "1687" -> "1692" 
+digraph "DeleteWeakGlobalRef" {  
+"1618" [label = <(&lt;operator&gt;.assignment,* vm = down_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm())<SUB>661</SUB>> ]
+"1626" [label = <(&lt;operator&gt;.assignment,* self = down_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_)<SUB>662</SUB>> ]
+"1632" [label = <(DeleteWeakGlobalRef,vm-&gt;DeleteWeakGlobalRef(self, obj))<SUB>663</SUB>> ]
+"1620" [label = <(GetVm,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm())<SUB>661</SUB>> ]
+"1628" [label = <(&lt;operator&gt;.indirectFieldAccess,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_)<SUB>662</SUB>> ]
+"1633" [label = <(&lt;operator&gt;.indirectFieldAccess,vm-&gt;DeleteWeakGlobalRef)<SUB>663</SUB>> ]
+"1621" [label = <(&lt;operator&gt;.indirectFieldAccess,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm)<SUB>661</SUB>> ]
+"1629" [label = <(down_cast&lt;JNIEnvExt*&gt;,down_cast&lt;JNIEnvExt*&gt;(env))<SUB>662</SUB>> ]
+"1631" [label = <(FIELD_IDENTIFIER,self_,self_)<SUB>662</SUB>> ]
+"1635" [label = <(FIELD_IDENTIFIER,DeleteWeakGlobalRef,DeleteWeakGlobalRef)<SUB>663</SUB>> ]
+"1622" [label = <(down_cast&lt;JNIEnvExt*&gt;,down_cast&lt;JNIEnvExt*&gt;(env))<SUB>661</SUB>> ]
+"1624" [label = <(FIELD_IDENTIFIER,GetVm,GetVm)<SUB>661</SUB>> ]
+"1613" [label = <(METHOD,DeleteWeakGlobalRef)<SUB>660</SUB>> ]
+"1638" [label = <(METHOD_RETURN,void)<SUB>660</SUB>> ]
+  "1618" -> "1629" 
+  "1626" -> "1635" 
+  "1632" -> "1638" 
+  "1620" -> "1618" 
+  "1628" -> "1626" 
+  "1633" -> "1632" 
+  "1621" -> "1620" 
+  "1629" -> "1631" 
+  "1631" -> "1628" 
+  "1635" -> "1633" 
+  "1622" -> "1624" 
+  "1624" -> "1621" 
+  "1613" -> "1622" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/450-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/450-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/450-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/450-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "GET_PRIMITIVE_FIELD(Double, obj)" {  
-"18548" [label = <(METHOD,GET_PRIMITIVE_FIELD(Double, obj))> ]
-"18552" [label = <(METHOD_RETURN,ANY)> ]
-  "18548" -> "18552" 
+digraph "SET_PRIMITIVE_FIELD(Float, obj, v)" {  
+"18192" [label = <(METHOD,SET_PRIMITIVE_FIELD(Float, obj, v))> ]
+"18196" [label = <(METHOD_RETURN,ANY)> ]
+  "18192" -> "18196" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/451-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/451-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/451-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/451-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "GET_STATIC_PRIMITIVE_FIELD" {  
-"18553" [label = <(METHOD,GET_STATIC_PRIMITIVE_FIELD)<SUB>1469</SUB>> ]
-"18555" [label = <(METHOD_RETURN,ANY)> ]
-  "18553" -> "18555" 
+digraph "SET_PRIMITIVE_FIELD(Double, obj, v)" {  
+"18197" [label = <(METHOD,SET_PRIMITIVE_FIELD(Double, obj, v))> ]
+"18201" [label = <(METHOD_RETURN,ANY)> ]
+  "18197" -> "18201" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/452-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/452-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/452-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/452-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "GET_STATIC_PRIMITIVE_FIELD(Boolean)" {  
-"18556" [label = <(METHOD,GET_STATIC_PRIMITIVE_FIELD(Boolean))> ]
-"18559" [label = <(METHOD_RETURN,ANY)> ]
-  "18556" -> "18559" 
+digraph "SET_PRIMITIVE_FIELD(Int, obj, v)" {  
+"18202" [label = <(METHOD,SET_PRIMITIVE_FIELD(Int, obj, v))> ]
+"18206" [label = <(METHOD_RETURN,ANY)> ]
+  "18202" -> "18206" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/453-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/453-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/453-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/453-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "GET_STATIC_PRIMITIVE_FIELD(Byte)" {  
-"18560" [label = <(METHOD,GET_STATIC_PRIMITIVE_FIELD(Byte))> ]
-"18563" [label = <(METHOD_RETURN,ANY)> ]
-  "18560" -> "18563" 
+digraph "SET_PRIMITIVE_FIELD(Long, obj, v)" {  
+"18207" [label = <(METHOD,SET_PRIMITIVE_FIELD(Long, obj, v))> ]
+"18211" [label = <(METHOD_RETURN,ANY)> ]
+  "18207" -> "18211" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/454-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/454-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/454-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/454-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "GET_STATIC_PRIMITIVE_FIELD(Char)" {  
-"18564" [label = <(METHOD,GET_STATIC_PRIMITIVE_FIELD(Char))> ]
-"18567" [label = <(METHOD_RETURN,ANY)> ]
-  "18564" -> "18567" 
+digraph "SET_PRIMITIVE_FIELD(Short, obj, v)" {  
+"18212" [label = <(METHOD,SET_PRIMITIVE_FIELD(Short, obj, v))> ]
+"18216" [label = <(METHOD_RETURN,ANY)> ]
+  "18212" -> "18216" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/455-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/455-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/455-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/455-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "GET_STATIC_PRIMITIVE_FIELD(Short)" {  
-"18568" [label = <(METHOD,GET_STATIC_PRIMITIVE_FIELD(Short))> ]
-"18571" [label = <(METHOD_RETURN,ANY)> ]
-  "18568" -> "18571" 
+digraph "SET_STATIC_PRIMITIVE_FIELD" {  
+"18217" [label = <(METHOD,SET_STATIC_PRIMITIVE_FIELD)<SUB>1406</SUB>> ]
+"18219" [label = <(METHOD_RETURN,ANY)> ]
+  "18217" -> "18219" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/456-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/456-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/456-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/456-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "GET_STATIC_PRIMITIVE_FIELD(Int)" {  
-"18572" [label = <(METHOD,GET_STATIC_PRIMITIVE_FIELD(Int))> ]
-"18575" [label = <(METHOD_RETURN,ANY)> ]
-  "18572" -> "18575" 
+digraph "SET_STATIC_PRIMITIVE_FIELD(Boolean, v)" {  
+"18220" [label = <(METHOD,SET_STATIC_PRIMITIVE_FIELD(Boolean, v))> ]
+"18223" [label = <(METHOD_RETURN,ANY)> ]
+  "18220" -> "18223" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/457-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/457-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/457-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/457-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "GET_STATIC_PRIMITIVE_FIELD(Long)" {  
-"18576" [label = <(METHOD,GET_STATIC_PRIMITIVE_FIELD(Long))> ]
-"18579" [label = <(METHOD_RETURN,ANY)> ]
-  "18576" -> "18579" 
+digraph "SET_STATIC_PRIMITIVE_FIELD(Byte, v)" {  
+"18224" [label = <(METHOD,SET_STATIC_PRIMITIVE_FIELD(Byte, v))> ]
+"18227" [label = <(METHOD_RETURN,ANY)> ]
+  "18224" -> "18227" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/458-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/458-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/458-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/458-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "GET_STATIC_PRIMITIVE_FIELD(Float)" {  
-"18580" [label = <(METHOD,GET_STATIC_PRIMITIVE_FIELD(Float))> ]
-"18583" [label = <(METHOD_RETURN,ANY)> ]
-  "18580" -> "18583" 
+digraph "SET_STATIC_PRIMITIVE_FIELD(Char, v)" {  
+"18228" [label = <(METHOD,SET_STATIC_PRIMITIVE_FIELD(Char, v))> ]
+"18231" [label = <(METHOD_RETURN,ANY)> ]
+  "18228" -> "18231" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/459-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/459-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/459-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/459-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "GET_STATIC_PRIMITIVE_FIELD(Double)" {  
-"18584" [label = <(METHOD,GET_STATIC_PRIMITIVE_FIELD(Double))> ]
-"18587" [label = <(METHOD_RETURN,ANY)> ]
-  "18584" -> "18587" 
+digraph "SET_STATIC_PRIMITIVE_FIELD(Float, v)" {  
+"18232" [label = <(METHOD,SET_STATIC_PRIMITIVE_FIELD(Float, v))> ]
+"18235" [label = <(METHOD_RETURN,ANY)> ]
+  "18232" -> "18235" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/46-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/46-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/46-cfg.dot	2023-06-07 19:33:45.357394696 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/46-cfg.dot	2023-06-07 19:33:51.947393991 +0330
@@ -1,49 +1,44 @@
-digraph "NewGlobalRef" {  
-"1706" [label = <(soa,soa(env))<SUB>722</SUB>> ]
-"1708" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; decoded_obj = soa.Decode&lt;mirror::Object&gt;(obj))<SUB>723</SUB>> ]
-"1725" [label = <(RETURN,return soa.Vm()-&gt;AddGlobalRef(soa.Self(), decoded_obj);,return soa.Vm()-&gt;AddGlobalRef(soa.Self(), decoded_obj);)<SUB>724</SUB>> ]
-"1709" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; decoded_obj)<SUB>723</SUB>> ]
-"1716" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(obj))<SUB>723</SUB>> ]
-"1726" [label = <(AddGlobalRef,soa.Vm()-&gt;AddGlobalRef(soa.Self(), decoded_obj))<SUB>724</SUB>> ]
-"1710" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>723</SUB>> ]
-"1717" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>723</SUB>> ]
-"1727" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Vm()-&gt;AddGlobalRef)<SUB>724</SUB>> ]
-"1733" [label = <(Self,soa.Self())<SUB>724</SUB>> ]
-"1712" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>723</SUB>> ]
-"1718" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>723</SUB>> ]
-"1721" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>723</SUB>> ]
-"1728" [label = <(Vm,soa.Vm())<SUB>724</SUB>> ]
-"1732" [label = <(FIELD_IDENTIFIER,AddGlobalRef,AddGlobalRef)<SUB>724</SUB>> ]
-"1734" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>724</SUB>> ]
-"1714" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>723</SUB>> ]
-"1720" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>723</SUB>> ]
-"1723" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>723</SUB>> ]
-"1729" [label = <(&lt;operator&gt;.fieldAccess,soa.Vm)<SUB>724</SUB>> ]
-"1736" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>724</SUB>> ]
-"1731" [label = <(FIELD_IDENTIFIER,Vm,Vm)<SUB>724</SUB>> ]
-"1701" [label = <(METHOD,NewGlobalRef)<SUB>721</SUB>> ]
-"1738" [label = <(METHOD_RETURN,jobject)<SUB>721</SUB>> ]
-  "1706" -> "1714" 
-  "1708" -> "1731" 
-  "1725" -> "1738" 
-  "1709" -> "1720" 
-  "1716" -> "1708" 
-  "1726" -> "1725" 
-  "1710" -> "1709" 
-  "1717" -> "1716" 
-  "1727" -> "1736" 
-  "1733" -> "1726" 
-  "1712" -> "1710" 
-  "1718" -> "1723" 
-  "1721" -> "1717" 
-  "1728" -> "1732" 
-  "1732" -> "1727" 
-  "1734" -> "1733" 
-  "1714" -> "1712" 
-  "1720" -> "1718" 
-  "1723" -> "1721" 
-  "1729" -> "1728" 
-  "1736" -> "1734" 
-  "1731" -> "1729" 
-  "1701" -> "1706" 
+digraph "NewLocalRef" {  
+"1645" [label = <(soa,soa(env))<SUB>667</SUB>> ]
+"1647" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; decoded_obj = soa.Decode&lt;mirror::Object&gt;(obj))<SUB>668</SUB>> ]
+"1671" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(decoded_obj);,return soa.AddLocalReference&lt;jobject&gt;(decoded_obj);)<SUB>673</SUB>> ]
+"1648" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; decoded_obj)<SUB>668</SUB>> ]
+"1655" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(obj))<SUB>668</SUB>> ]
+"1665" [label = <(&lt;operator&gt;.equals,decoded_obj == nullptr)<SUB>670</SUB>> ]
+"1672" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(decoded_obj))<SUB>673</SUB>> ]
+"1649" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>668</SUB>> ]
+"1656" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>668</SUB>> ]
+"1669" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>671</SUB>> ]
+"1673" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>673</SUB>> ]
+"1651" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>668</SUB>> ]
+"1657" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>668</SUB>> ]
+"1660" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>668</SUB>> ]
+"1674" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>673</SUB>> ]
+"1653" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>668</SUB>> ]
+"1659" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>668</SUB>> ]
+"1662" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>668</SUB>> ]
+"1676" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>673</SUB>> ]
+"1640" [label = <(METHOD,NewLocalRef)<SUB>666</SUB>> ]
+"1679" [label = <(METHOD_RETURN,jobject)<SUB>666</SUB>> ]
+  "1645" -> "1653" 
+  "1647" -> "1665" 
+  "1671" -> "1679" 
+  "1648" -> "1659" 
+  "1655" -> "1647" 
+  "1665" -> "1669" 
+  "1665" -> "1676" 
+  "1672" -> "1671" 
+  "1649" -> "1648" 
+  "1656" -> "1655" 
+  "1669" -> "1679" 
+  "1673" -> "1672" 
+  "1651" -> "1649" 
+  "1657" -> "1662" 
+  "1660" -> "1656" 
+  "1674" -> "1673" 
+  "1653" -> "1651" 
+  "1659" -> "1657" 
+  "1662" -> "1660" 
+  "1676" -> "1674" 
+  "1640" -> "1645" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/460-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/460-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/460-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/460-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "SET_PRIMITIVE_FIELD" {  
-"18588" [label = <(METHOD,SET_PRIMITIVE_FIELD)<SUB>1476</SUB>> ]
-"18591" [label = <(METHOD_RETURN,ANY)> ]
-  "18588" -> "18591" 
+digraph "SET_STATIC_PRIMITIVE_FIELD(Double, v)" {  
+"18236" [label = <(METHOD,SET_STATIC_PRIMITIVE_FIELD(Double, v))> ]
+"18239" [label = <(METHOD_RETURN,ANY)> ]
+  "18236" -> "18239" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/461-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/461-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/461-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/461-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "SET_PRIMITIVE_FIELD(Boolean, obj, v)" {  
-"18592" [label = <(METHOD,SET_PRIMITIVE_FIELD(Boolean, obj, v))> ]
-"18596" [label = <(METHOD_RETURN,ANY)> ]
-  "18592" -> "18596" 
+digraph "SET_STATIC_PRIMITIVE_FIELD(Int, v)" {  
+"18240" [label = <(METHOD,SET_STATIC_PRIMITIVE_FIELD(Int, v))> ]
+"18243" [label = <(METHOD_RETURN,ANY)> ]
+  "18240" -> "18243" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/462-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/462-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/462-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/462-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "SET_PRIMITIVE_FIELD(Byte, obj, v)" {  
-"18597" [label = <(METHOD,SET_PRIMITIVE_FIELD(Byte, obj, v))> ]
-"18601" [label = <(METHOD_RETURN,ANY)> ]
-  "18597" -> "18601" 
+digraph "SET_STATIC_PRIMITIVE_FIELD(Long, v)" {  
+"18244" [label = <(METHOD,SET_STATIC_PRIMITIVE_FIELD(Long, v))> ]
+"18247" [label = <(METHOD_RETURN,ANY)> ]
+  "18244" -> "18247" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/463-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/463-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/463-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/463-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "SET_PRIMITIVE_FIELD(Char, obj, v)" {  
-"18602" [label = <(METHOD,SET_PRIMITIVE_FIELD(Char, obj, v))> ]
-"18606" [label = <(METHOD_RETURN,ANY)> ]
-  "18602" -> "18606" 
+digraph "SET_STATIC_PRIMITIVE_FIELD(Short, v)" {  
+"18248" [label = <(METHOD,SET_STATIC_PRIMITIVE_FIELD(Short, v))> ]
+"18251" [label = <(METHOD_RETURN,ANY)> ]
+  "18248" -> "18251" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/464-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/464-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/464-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/464-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "SET_PRIMITIVE_FIELD(Float, obj, v)" {  
-"18607" [label = <(METHOD,SET_PRIMITIVE_FIELD(Float, obj, v))> ]
-"18611" [label = <(METHOD_RETURN,ANY)> ]
-  "18607" -> "18611" 
+digraph "JniAbortF" {  
+"18252" [label = <(METHOD,JniAbortF)> ]
+"18258" [label = <(METHOD_RETURN,ANY)> ]
+  "18252" -> "18258" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/465-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/465-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/465-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/465-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "SET_PRIMITIVE_FIELD(Double, obj, v)" {  
-"18612" [label = <(METHOD,SET_PRIMITIVE_FIELD(Double, obj, v))> ]
-"18616" [label = <(METHOD_RETURN,ANY)> ]
-  "18612" -> "18616" 
+digraph "&lt;operator&gt;.logicalAnd" {  
+"18259" [label = <(METHOD,&lt;operator&gt;.logicalAnd)> ]
+"18263" [label = <(METHOD_RETURN,ANY)> ]
+  "18259" -> "18263" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/466-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/466-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/466-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/466-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "SET_PRIMITIVE_FIELD(Int, obj, v)" {  
-"18617" [label = <(METHOD,SET_PRIMITIVE_FIELD(Int, obj, v))> ]
-"18621" [label = <(METHOD_RETURN,ANY)> ]
-  "18617" -> "18621" 
+digraph "mirror::String::AllocFromUtf16" {  
+"18264" [label = <(METHOD,mirror::String::AllocFromUtf16)> ]
+"18270" [label = <(METHOD_RETURN,ANY)> ]
+  "18264" -> "18270" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/467-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/467-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/467-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/467-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "SET_PRIMITIVE_FIELD(Long, obj, v)" {  
-"18622" [label = <(METHOD,SET_PRIMITIVE_FIELD(Long, obj, v))> ]
-"18626" [label = <(METHOD_RETURN,ANY)> ]
-  "18622" -> "18626" 
+digraph "mirror::String::AllocFromModifiedUtf8" {  
+"18271" [label = <(METHOD,mirror::String::AllocFromModifiedUtf8)> ]
+"18276" [label = <(METHOD_RETURN,ANY)> ]
+  "18271" -> "18276" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/468-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/468-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/468-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/468-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "SET_PRIMITIVE_FIELD(Short, obj, v)" {  
-"18627" [label = <(METHOD,SET_PRIMITIVE_FIELD(Short, obj, v))> ]
-"18631" [label = <(METHOD_RETURN,ANY)> ]
-  "18627" -> "18631" 
+digraph "CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string)" {  
+"18277" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string))> ]
+"18282" [label = <(METHOD_RETURN,ANY)> ]
+  "18277" -> "18282" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/469-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/469-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/469-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/469-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "SET_STATIC_PRIMITIVE_FIELD" {  
-"18632" [label = <(METHOD,SET_STATIC_PRIMITIVE_FIELD)<SUB>1485</SUB>> ]
-"18634" [label = <(METHOD_RETURN,ANY)> ]
-  "18632" -> "18634" 
+digraph "GetLength" {  
+"18283" [label = <(METHOD,GetLength)> ]
+"18286" [label = <(METHOD_RETURN,ANY)> ]
+  "18283" -> "18286" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/47-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/47-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/47-cfg.dot	2023-06-07 19:33:45.357394696 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/47-cfg.dot	2023-06-07 19:33:51.947393991 +0330
@@ -1,29 +1,43 @@
-digraph "DeleteGlobalRef" {  
-"1745" [label = <(&lt;operator&gt;.assignment,* vm = down_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm())<SUB>728</SUB>> ]
-"1753" [label = <(&lt;operator&gt;.assignment,* self = down_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_)<SUB>729</SUB>> ]
-"1759" [label = <(DeleteGlobalRef,vm-&gt;DeleteGlobalRef(self, obj))<SUB>730</SUB>> ]
-"1747" [label = <(GetVm,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm())<SUB>728</SUB>> ]
-"1755" [label = <(&lt;operator&gt;.indirectFieldAccess,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_)<SUB>729</SUB>> ]
-"1760" [label = <(&lt;operator&gt;.indirectFieldAccess,vm-&gt;DeleteGlobalRef)<SUB>730</SUB>> ]
-"1748" [label = <(&lt;operator&gt;.indirectFieldAccess,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm)<SUB>728</SUB>> ]
-"1756" [label = <(down_cast&lt;JNIEnvExt*&gt;,down_cast&lt;JNIEnvExt*&gt;(env))<SUB>729</SUB>> ]
-"1758" [label = <(FIELD_IDENTIFIER,self_,self_)<SUB>729</SUB>> ]
-"1762" [label = <(FIELD_IDENTIFIER,DeleteGlobalRef,DeleteGlobalRef)<SUB>730</SUB>> ]
-"1749" [label = <(down_cast&lt;JNIEnvExt*&gt;,down_cast&lt;JNIEnvExt*&gt;(env))<SUB>728</SUB>> ]
-"1751" [label = <(FIELD_IDENTIFIER,GetVm,GetVm)<SUB>728</SUB>> ]
-"1740" [label = <(METHOD,DeleteGlobalRef)<SUB>727</SUB>> ]
-"1765" [label = <(METHOD_RETURN,void)<SUB>727</SUB>> ]
-  "1745" -> "1756" 
-  "1753" -> "1762" 
-  "1759" -> "1765" 
-  "1747" -> "1745" 
-  "1755" -> "1753" 
-  "1760" -> "1759" 
-  "1748" -> "1747" 
-  "1756" -> "1758" 
-  "1758" -> "1755" 
-  "1762" -> "1760" 
-  "1749" -> "1751" 
-  "1751" -> "1748" 
-  "1740" -> "1749" 
+digraph "DeleteLocalRef" {  
+"1692" [label = <(soa,soa(env))<SUB>683</SUB>> ]
+"1695" [label = <(&lt;operator&gt;.assignment,* ext_env = down_cast&lt;JNIEnvExt*&gt;(env))<SUB>684</SUB>> ]
+"1686" [label = <(&lt;operator&gt;.equals,obj == nullptr)<SUB>677</SUB>> ]
+"1697" [label = <(down_cast&lt;JNIEnvExt*&gt;,down_cast&lt;JNIEnvExt*&gt;(env))<SUB>684</SUB>> ]
+"1700" [label = <(&lt;operator&gt;.logicalNot,!ext_env-&gt;locals_.Remove(ext_env-&gt;local_ref_cookie_, obj))<SUB>685</SUB>> ]
+"1690" [label = <(RETURN,return;,return;)<SUB>678</SUB>> ]
+"1701" [label = <(Remove,ext_env-&gt;locals_.Remove(ext_env-&gt;local_ref_cookie_, obj))<SUB>685</SUB>> ]
+"1712" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI WARNING: DeleteLocalRef(&quot; &lt;&lt; obj &lt;&lt; &quot;) &quot;\012 &lt;&lt; &quot;failed to find entry&quot;)<SUB>691</SUB>> ]
+"1702" [label = <(&lt;operator&gt;.fieldAccess,ext_env-&gt;locals_.Remove)<SUB>685</SUB>> ]
+"1707" [label = <(&lt;operator&gt;.indirectFieldAccess,ext_env-&gt;local_ref_cookie_)<SUB>685</SUB>> ]
+"1713" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI WARNING: DeleteLocalRef(&quot; &lt;&lt; obj &lt;&lt; &quot;) &quot;)<SUB>691</SUB>> ]
+"1703" [label = <(&lt;operator&gt;.indirectFieldAccess,ext_env-&gt;locals_)<SUB>685</SUB>> ]
+"1706" [label = <(FIELD_IDENTIFIER,Remove,Remove)<SUB>685</SUB>> ]
+"1709" [label = <(FIELD_IDENTIFIER,local_ref_cookie_,local_ref_cookie_)<SUB>685</SUB>> ]
+"1714" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI WARNING: DeleteLocalRef(&quot; &lt;&lt; obj)<SUB>691</SUB>> ]
+"1705" [label = <(FIELD_IDENTIFIER,locals_,locals_)<SUB>685</SUB>> ]
+"1715" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI WARNING: DeleteLocalRef(&quot;)<SUB>691</SUB>> ]
+"1716" [label = <(LOG,LOG(WARNING))<SUB>691</SUB>> ]
+"1681" [label = <(METHOD,DeleteLocalRef)<SUB>676</SUB>> ]
+"1722" [label = <(METHOD_RETURN,void)<SUB>676</SUB>> ]
+  "1692" -> "1697" 
+  "1695" -> "1705" 
+  "1686" -> "1690" 
+  "1686" -> "1692" 
+  "1697" -> "1695" 
+  "1700" -> "1722" 
+  "1700" -> "1716" 
+  "1690" -> "1722" 
+  "1701" -> "1700" 
+  "1712" -> "1722" 
+  "1702" -> "1709" 
+  "1707" -> "1701" 
+  "1713" -> "1712" 
+  "1703" -> "1706" 
+  "1706" -> "1702" 
+  "1709" -> "1707" 
+  "1714" -> "1713" 
+  "1705" -> "1703" 
+  "1715" -> "1714" 
+  "1716" -> "1715" 
+  "1681" -> "1686" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/470-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/470-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/470-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/470-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "SET_STATIC_PRIMITIVE_FIELD(Boolean, v)" {  
-"18635" [label = <(METHOD,SET_STATIC_PRIMITIVE_FIELD(Boolean, v))> ]
-"18638" [label = <(METHOD_RETURN,ANY)> ]
-  "18635" -> "18638" 
+digraph "GetUtfLength" {  
+"18287" [label = <(METHOD,GetUtfLength)> ]
+"18290" [label = <(METHOD_RETURN,ANY)> ]
+  "18287" -> "18290" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/471-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/471-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/471-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/471-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "SET_STATIC_PRIMITIVE_FIELD(Byte, v)" {  
-"18639" [label = <(METHOD,SET_STATIC_PRIMITIVE_FIELD(Byte, v))> ]
-"18642" [label = <(METHOD_RETURN,ANY)> ]
-  "18639" -> "18642" 
+digraph "CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string)" {  
+"18291" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string))> ]
+"18296" [label = <(METHOD_RETURN,ANY)> ]
+  "18291" -> "18296" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/472-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/472-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/472-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/472-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "SET_STATIC_PRIMITIVE_FIELD(Char, v)" {  
-"18643" [label = <(METHOD,SET_STATIC_PRIMITIVE_FIELD(Char, v))> ]
-"18646" [label = <(METHOD_RETURN,ANY)> ]
-  "18643" -> "18646" 
+digraph "&lt;operator&gt;.logicalOr" {  
+"18297" [label = <(METHOD,&lt;operator&gt;.logicalOr)> ]
+"18301" [label = <(METHOD_RETURN,ANY)> ]
+  "18297" -> "18301" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/473-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/473-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/473-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/473-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "SET_STATIC_PRIMITIVE_FIELD(Float, v)" {  
-"18647" [label = <(METHOD,SET_STATIC_PRIMITIVE_FIELD(Float, v))> ]
-"18650" [label = <(METHOD_RETURN,ANY)> ]
-  "18647" -> "18650" 
+digraph "&lt;operator&gt;.subtraction" {  
+"18302" [label = <(METHOD,&lt;operator&gt;.subtraction)> ]
+"18306" [label = <(METHOD_RETURN,ANY)> ]
+  "18302" -> "18306" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/474-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/474-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/474-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/474-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "SET_STATIC_PRIMITIVE_FIELD(Double, v)" {  
-"18651" [label = <(METHOD,SET_STATIC_PRIMITIVE_FIELD(Double, v))> ]
-"18654" [label = <(METHOD_RETURN,ANY)> ]
-  "18651" -> "18654" 
+digraph "CHECK_NON_NULL_MEMCPY_ARGUMENT" {  
+"18307" [label = <(METHOD,CHECK_NON_NULL_MEMCPY_ARGUMENT)<SUB>430</SUB>> ]
+"18311" [label = <(METHOD_RETURN,ANY)> ]
+  "18307" -> "18311" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/475-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/475-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/475-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/475-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "SET_STATIC_PRIMITIVE_FIELD(Int, v)" {  
-"18655" [label = <(METHOD,SET_STATIC_PRIMITIVE_FIELD(Int, v))> ]
-"18658" [label = <(METHOD_RETURN,ANY)> ]
-  "18655" -> "18658" 
+digraph "CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf)" {  
+"18312" [label = <(METHOD,CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf))> ]
+"18317" [label = <(METHOD_RETURN,ANY)> ]
+  "18312" -> "18317" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/476-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/476-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/476-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/476-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "SET_STATIC_PRIMITIVE_FIELD(Long, v)" {  
-"18659" [label = <(METHOD,SET_STATIC_PRIMITIVE_FIELD(Long, v))> ]
-"18662" [label = <(METHOD_RETURN,ANY)> ]
-  "18659" -> "18662" 
+digraph "IsCompressed" {  
+"18318" [label = <(METHOD,IsCompressed)> ]
+"18321" [label = <(METHOD_RETURN,ANY)> ]
+  "18318" -> "18321" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/477-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/477-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/477-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/477-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "SET_STATIC_PRIMITIVE_FIELD(Short, v)" {  
-"18663" [label = <(METHOD,SET_STATIC_PRIMITIVE_FIELD(Short, v))> ]
-"18666" [label = <(METHOD_RETURN,ANY)> ]
-  "18663" -> "18666" 
+digraph "&lt;operator&gt;.preIncrement" {  
+"18322" [label = <(METHOD,&lt;operator&gt;.preIncrement)> ]
+"18325" [label = <(METHOD_RETURN,ANY)> ]
+  "18322" -> "18325" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/478-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/478-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/478-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/478-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "JniAbortF" {  
-"18667" [label = <(METHOD,JniAbortF)> ]
-"18673" [label = <(METHOD_RETURN,ANY)> ]
-  "18667" -> "18673" 
+digraph "CharAt" {  
+"18326" [label = <(METHOD,CharAt)> ]
+"18330" [label = <(METHOD_RETURN,ANY)> ]
+  "18326" -> "18330" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/479-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/479-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/479-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/479-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "mirror::String::AllocFromUtf16" {  
-"18674" [label = <(METHOD,mirror::String::AllocFromUtf16)> ]
-"18680" [label = <(METHOD_RETURN,ANY)> ]
-  "18674" -> "18680" 
+digraph "&lt;operator&gt;.addition" {  
+"18331" [label = <(METHOD,&lt;operator&gt;.addition)> ]
+"18335" [label = <(METHOD_RETURN,ANY)> ]
+  "18331" -> "18335" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/48-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/48-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/48-cfg.dot	2023-06-07 19:33:45.357394696 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/48-cfg.dot	2023-06-07 19:33:51.947393991 +0330
@@ -1,49 +1,42 @@
-digraph "NewWeakGlobalRef" {  
-"1772" [label = <(soa,soa(env))<SUB>734</SUB>> ]
-"1774" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; decoded_obj = soa.Decode&lt;mirror::Object&gt;(obj))<SUB>735</SUB>> ]
-"1791" [label = <(RETURN,return soa.Vm()-&gt;AddWeakGlobalRef(soa.Self(), decoded_obj);,return soa.Vm()-&gt;AddWeakGlobalRef(soa.Self(), decoded_obj);)<SUB>736</SUB>> ]
-"1775" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; decoded_obj)<SUB>735</SUB>> ]
-"1782" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(obj))<SUB>735</SUB>> ]
-"1792" [label = <(AddWeakGlobalRef,soa.Vm()-&gt;AddWeakGlobalRef(soa.Self(), decoded_obj))<SUB>736</SUB>> ]
-"1776" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>735</SUB>> ]
-"1783" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>735</SUB>> ]
-"1793" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Vm()-&gt;AddWeakGlobalRef)<SUB>736</SUB>> ]
-"1799" [label = <(Self,soa.Self())<SUB>736</SUB>> ]
-"1778" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>735</SUB>> ]
-"1784" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>735</SUB>> ]
-"1787" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>735</SUB>> ]
-"1794" [label = <(Vm,soa.Vm())<SUB>736</SUB>> ]
-"1798" [label = <(FIELD_IDENTIFIER,AddWeakGlobalRef,AddWeakGlobalRef)<SUB>736</SUB>> ]
-"1800" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>736</SUB>> ]
-"1780" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>735</SUB>> ]
-"1786" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>735</SUB>> ]
-"1789" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>735</SUB>> ]
-"1795" [label = <(&lt;operator&gt;.fieldAccess,soa.Vm)<SUB>736</SUB>> ]
-"1802" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>736</SUB>> ]
-"1797" [label = <(FIELD_IDENTIFIER,Vm,Vm)<SUB>736</SUB>> ]
-"1767" [label = <(METHOD,NewWeakGlobalRef)<SUB>733</SUB>> ]
-"1804" [label = <(METHOD_RETURN,jweak)<SUB>733</SUB>> ]
-  "1772" -> "1780" 
-  "1774" -> "1797" 
-  "1791" -> "1804" 
-  "1775" -> "1786" 
-  "1782" -> "1774" 
-  "1792" -> "1791" 
-  "1776" -> "1775" 
-  "1783" -> "1782" 
-  "1793" -> "1802" 
-  "1799" -> "1792" 
-  "1778" -> "1776" 
-  "1784" -> "1789" 
-  "1787" -> "1783" 
-  "1794" -> "1798" 
-  "1798" -> "1793" 
-  "1800" -> "1799" 
-  "1780" -> "1778" 
-  "1786" -> "1784" 
-  "1789" -> "1787" 
-  "1795" -> "1794" 
-  "1802" -> "1800" 
-  "1797" -> "1795" 
-  "1767" -> "1772" 
+digraph "IsSameObject" {  
+"1730" [label = <(&lt;operator&gt;.equals,obj1 == obj2)<SUB>697</SUB>> ]
+"1734" [label = <(RETURN,return JNI_TRUE;,return JNI_TRUE;)<SUB>698</SUB>> ]
+"1739" [label = <(soa,soa(env))<SUB>700</SUB>> ]
+"1741" [label = <(RETURN,return (soa.Decode&lt;mirror::Object&gt;(obj1) == soa.Decode&lt;mirror::Object&gt;(obj2))\012 ? JNI_TRUE : JNI_FALSE;,return (soa.Decode&lt;mirror::Object&gt;(obj1) == soa.Decode&lt;mirror::Object&gt;(obj2))\012 ? JNI_TRUE : JNI_FALSE;)<SUB>701</SUB>> ]
+"1742" [label = <(&lt;operator&gt;.conditional,(soa.Decode&lt;mirror::Object&gt;(obj1) == soa.Decode&lt;mirror::Object&gt;(obj2))\012 ? JNI_TRUE : JNI_FALSE)<SUB>701</SUB>> ]
+"1743" [label = <(&lt;operator&gt;.equals,soa.Decode&lt;mirror::Object&gt;(obj1) == soa.Decode&lt;mirror::Object&gt;(obj2))<SUB>701</SUB>> ]
+"1744" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(obj1))<SUB>701</SUB>> ]
+"1753" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(obj2))<SUB>701</SUB>> ]
+"1745" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>701</SUB>> ]
+"1754" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>701</SUB>> ]
+"1746" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>701</SUB>> ]
+"1749" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>701</SUB>> ]
+"1755" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>701</SUB>> ]
+"1758" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>701</SUB>> ]
+"1748" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>701</SUB>> ]
+"1751" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>701</SUB>> ]
+"1757" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>701</SUB>> ]
+"1760" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>701</SUB>> ]
+"1724" [label = <(METHOD,IsSameObject)<SUB>696</SUB>> ]
+"1764" [label = <(METHOD_RETURN,jboolean)<SUB>696</SUB>> ]
+  "1730" -> "1734" 
+  "1730" -> "1739" 
+  "1734" -> "1764" 
+  "1739" -> "1748" 
+  "1741" -> "1764" 
+  "1742" -> "1741" 
+  "1743" -> "1742" 
+  "1744" -> "1757" 
+  "1753" -> "1743" 
+  "1745" -> "1744" 
+  "1754" -> "1753" 
+  "1746" -> "1751" 
+  "1749" -> "1745" 
+  "1755" -> "1760" 
+  "1758" -> "1754" 
+  "1748" -> "1746" 
+  "1751" -> "1749" 
+  "1757" -> "1755" 
+  "1760" -> "1758" 
+  "1724" -> "1730" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/480-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/480-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/480-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/480-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "::max" {  
-"18681" [label = <(METHOD,::max)> ]
-"18684" [label = <(METHOD_RETURN,ANY)> ]
-  "18681" -> "18684" 
+digraph "GetValue" {  
+"18336" [label = <(METHOD,GetValue)> ]
+"18339" [label = <(METHOD_RETURN,ANY)> ]
+  "18336" -> "18339" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/481-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/481-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/481-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/481-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "android::base::StringPrintf" {  
-"18685" [label = <(METHOD,android::base::StringPrintf)> ]
-"18690" [label = <(METHOD_RETURN,ANY)> ]
-  "18685" -> "18690" 
+digraph "memcpy" {  
+"18340" [label = <(METHOD,memcpy)> ]
+"18345" [label = <(METHOD_RETURN,ANY)> ]
+  "18340" -> "18345" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/482-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/482-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/482-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/482-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "ThrowOutOfMemoryError" {  
-"18691" [label = <(METHOD,ThrowOutOfMemoryError)> ]
-"18695" [label = <(METHOD_RETURN,ANY)> ]
-  "18691" -> "18695" 
+digraph "&lt;operator&gt;.sizeOf" {  
+"18346" [label = <(METHOD,&lt;operator&gt;.sizeOf)> ]
+"18349" [label = <(METHOD_RETURN,ANY)> ]
+  "18346" -> "18349" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/483-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/483-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/483-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/483-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "UINT64_C" {  
-"18696" [label = <(METHOD,UINT64_C)> ]
-"18699" [label = <(METHOD_RETURN,ANY)> ]
-  "18696" -> "18699" 
+digraph "CountUtf8Bytes" {  
+"18350" [label = <(METHOD,CountUtf8Bytes)> ]
+"18354" [label = <(METHOD_RETURN,ANY)> ]
+  "18350" -> "18354" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/484-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/484-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/484-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/484-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "prev_bad_input_time" {  
-"18700" [label = <(METHOD,prev_bad_input_time)> ]
-"18703" [label = <(METHOD_RETURN,ANY)> ]
-  "18700" -> "18703" 
+digraph "ConvertUtf16ToModifiedUtf8" {  
+"18355" [label = <(METHOD,ConvertUtf16ToModifiedUtf8)> ]
+"18361" [label = <(METHOD_RETURN,ANY)> ]
+  "18355" -> "18361" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/485-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/485-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/485-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/485-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "load" {  
-"18704" [label = <(METHOD,load)> ]
-"18708" [label = <(METHOD_RETURN,ANY)> ]
-  "18704" -> "18708" 
+digraph "CHECK_NON_NULL_ARGUMENT(java_string)" {  
+"18362" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(java_string))> ]
+"18367" [label = <(METHOD_RETURN,ANY)> ]
+  "18362" -> "18367" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/486-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/486-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/486-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/486-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "NanoTime" {  
-"18709" [label = <(METHOD,NanoTime)> ]
-"18711" [label = <(METHOD_RETURN,ANY)> ]
-  "18709" -> "18711" 
+digraph "IsMovableObject" {  
+"18368" [label = <(METHOD,IsMovableObject)> ]
+"18372" [label = <(METHOD_RETURN,ANY)> ]
+  "18368" -> "18372" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/487-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/487-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/487-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/487-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.logicalOr" {  
-"18712" [label = <(METHOD,&lt;operator&gt;.logicalOr)> ]
-"18716" [label = <(METHOD_RETURN,ANY)> ]
-  "18712" -> "18716" 
+digraph "&lt;operator&gt;.new" {  
+"18373" [label = <(METHOD,&lt;operator&gt;.new)> ]
+"18376" [label = <(METHOD_RETURN,ANY)> ]
+  "18373" -> "18376" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/488-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/488-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/488-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/488-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.greaterEqualsThan" {  
-"18717" [label = <(METHOD,&lt;operator&gt;.greaterEqualsThan)> ]
-"18721" [label = <(METHOD_RETURN,ANY)> ]
-  "18717" -> "18721" 
+digraph "&lt;operator&gt;.delete" {  
+"18377" [label = <(METHOD,&lt;operator&gt;.delete)> ]
+"18380" [label = <(METHOD_RETURN,ANY)> ]
+  "18377" -> "18380" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/489-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/489-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/489-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/489-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "compare_exchange_strong" {  
-"18722" [label = <(METHOD,compare_exchange_strong)> ]
-"18728" [label = <(METHOD_RETURN,ANY)> ]
-  "18722" -> "18728" 
+digraph "h" {  
+"18381" [label = <(METHOD,h)> ]
+"18384" [label = <(METHOD_RETURN,ANY)> ]
+  "18381" -> "18384" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/49-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/49-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/49-cfg.dot	2023-06-07 19:33:45.357394696 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/49-cfg.dot	2023-06-07 19:33:51.947393991 +0330
@@ -1,29 +1,139 @@
-digraph "DeleteWeakGlobalRef" {  
-"1811" [label = <(&lt;operator&gt;.assignment,* vm = down_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm())<SUB>740</SUB>> ]
-"1819" [label = <(&lt;operator&gt;.assignment,* self = down_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_)<SUB>741</SUB>> ]
-"1825" [label = <(DeleteWeakGlobalRef,vm-&gt;DeleteWeakGlobalRef(self, obj))<SUB>742</SUB>> ]
-"1813" [label = <(GetVm,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm())<SUB>740</SUB>> ]
-"1821" [label = <(&lt;operator&gt;.indirectFieldAccess,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_)<SUB>741</SUB>> ]
-"1826" [label = <(&lt;operator&gt;.indirectFieldAccess,vm-&gt;DeleteWeakGlobalRef)<SUB>742</SUB>> ]
-"1814" [label = <(&lt;operator&gt;.indirectFieldAccess,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm)<SUB>740</SUB>> ]
-"1822" [label = <(down_cast&lt;JNIEnvExt*&gt;,down_cast&lt;JNIEnvExt*&gt;(env))<SUB>741</SUB>> ]
-"1824" [label = <(FIELD_IDENTIFIER,self_,self_)<SUB>741</SUB>> ]
-"1828" [label = <(FIELD_IDENTIFIER,DeleteWeakGlobalRef,DeleteWeakGlobalRef)<SUB>742</SUB>> ]
-"1815" [label = <(down_cast&lt;JNIEnvExt*&gt;,down_cast&lt;JNIEnvExt*&gt;(env))<SUB>740</SUB>> ]
-"1817" [label = <(FIELD_IDENTIFIER,GetVm,GetVm)<SUB>740</SUB>> ]
-"1806" [label = <(METHOD,DeleteWeakGlobalRef)<SUB>739</SUB>> ]
-"1831" [label = <(METHOD_RETURN,void)<SUB>739</SUB>> ]
-  "1811" -> "1822" 
-  "1819" -> "1828" 
-  "1825" -> "1831" 
-  "1813" -> "1811" 
-  "1821" -> "1819" 
-  "1826" -> "1825" 
-  "1814" -> "1813" 
-  "1822" -> "1824" 
-  "1824" -> "1821" 
-  "1828" -> "1826" 
-  "1815" -> "1817" 
-  "1817" -> "1814" 
-  "1806" -> "1815" 
+digraph "AllocObject" {  
+"1770" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_class))<SUB>707</SUB>> ]
+"1789" [label = <(soa,soa(env))<SUB>708</SUB>> ]
+"1791" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c = EnsureInitialized(soa.Self(), soa.Decode&lt;mirror::Class&gt;(java_class)))<SUB>709</SUB>> ]
+"1861" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(c-&gt;AllocObject(soa.Self()));,return soa.AddLocalReference&lt;jobject&gt;(c-&gt;AllocObject(soa.Self()));)<SUB>718</SUB>> ]
+"1792" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c)<SUB>709</SUB>> ]
+"1799" [label = <(EnsureInitialized,EnsureInitialized(soa.Self(), soa.Decode&lt;mirror::Class&gt;(java_class)))<SUB>709</SUB>> ]
+"1814" [label = <(&lt;operator&gt;.equals,c == nullptr)<SUB>710</SUB>> ]
+"1821" [label = <(IsStringClass,c-&gt;IsStringClass())<SUB>713</SUB>> ]
+"1862" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(c-&gt;AllocObject(soa.Self())))<SUB>718</SUB>> ]
+"1793" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>709</SUB>> ]
+"1800" [label = <(Self,soa.Self())<SUB>709</SUB>> ]
+"1804" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>709</SUB>> ]
+"1818" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>711</SUB>> ]
+"1822" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;IsStringClass)<SUB>713</SUB>> ]
+"1827" [label = <(&lt;operator&gt;.assignment,allocator_type = Runtime::Current()-&gt;GetHeap()-&gt;GetCurrentAllocator())<SUB>714</SUB>> ]
+"1839" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(mirror::String::AllocEmptyString&lt;true&gt;(soa.Self(),\012                                                                              allocator_type));,return soa.AddLocalReference&lt;jobject&gt;(mirror::String::AllocEmptyString&lt;true&gt;(soa.Self(),\012                                                                              allocator_type));)<SUB>715</SUB>> ]
+"1863" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>718</SUB>> ]
+"1868" [label = <(AllocObject,c-&gt;AllocObject(soa.Self()))<SUB>718</SUB>> ]
+"1774" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>707</SUB>> ]
+"1795" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>709</SUB>> ]
+"1801" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>709</SUB>> ]
+"1805" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>709</SUB>> ]
+"1824" [label = <(FIELD_IDENTIFIER,IsStringClass,IsStringClass)<SUB>713</SUB>> ]
+"1829" [label = <(GetCurrentAllocator,Runtime::Current()-&gt;GetHeap()-&gt;GetCurrentAllocator())<SUB>714</SUB>> ]
+"1840" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(mirror::String::AllocEmptyString&lt;true&gt;(soa.Self(),\012                                                                              allocator_type)))<SUB>715</SUB>> ]
+"1864" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>718</SUB>> ]
+"1869" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;AllocObject)<SUB>718</SUB>> ]
+"1872" [label = <(Self,soa.Self())<SUB>718</SUB>> ]
+"1775" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>707</SUB>> ]
+"1779" [label = <(CHECK_NON_NULL_ARGUMENT(java_class),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class == null&quot;))<SUB>707</SUB>> ]
+"1786" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_class),CHECK_NON_NULL_ARGUMENT(java_class))<SUB>707</SUB>> ]
+"1797" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>709</SUB>> ]
+"1803" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>709</SUB>> ]
+"1806" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>709</SUB>> ]
+"1809" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>709</SUB>> ]
+"1830" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetHeap()-&gt;GetCurrentAllocator)<SUB>714</SUB>> ]
+"1841" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>715</SUB>> ]
+"1846" [label = <(&lt;operator&gt;.greaterThan,mirror::String::AllocEmptyString&lt;true&gt;(soa.Self(),\012                                                                              allocator_type))<SUB>715</SUB>> ]
+"1866" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>718</SUB>> ]
+"1871" [label = <(FIELD_IDENTIFIER,AllocObject,AllocObject)<SUB>718</SUB>> ]
+"1873" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>718</SUB>> ]
+"1780" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>707</SUB>> ]
+"1808" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>709</SUB>> ]
+"1811" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>709</SUB>> ]
+"1831" [label = <(GetHeap,Runtime::Current()-&gt;GetHeap())<SUB>714</SUB>> ]
+"1838" [label = <(FIELD_IDENTIFIER,GetCurrentAllocator,GetCurrentAllocator)<SUB>714</SUB>> ]
+"1842" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>715</SUB>> ]
+"1847" [label = <(&lt;operator&gt;.lessThan,mirror::String::AllocEmptyString&lt;true)<SUB>715</SUB>> ]
+"1854" [label = <(&lt;operator&gt;.bracketedPrimary,(soa.Self(),\012                                                                              allocator_type))<SUB>715</SUB>> ]
+"1875" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>718</SUB>> ]
+"1781" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>707</SUB>> ]
+"1783" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>707</SUB>> ]
+"1832" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetHeap)<SUB>714</SUB>> ]
+"1844" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>715</SUB>> ]
+"1848" [label = <(&lt;operator&gt;.fieldAccess,mirror::String::AllocEmptyString)<SUB>715</SUB>> ]
+"1855" [label = <(&lt;operator&gt;.expressionList,soa.Self(),\012                                                                              allocator_type)<SUB>715</SUB>> ]
+"1833" [label = <(Runtime::Current,Runtime::Current())<SUB>714</SUB>> ]
+"1837" [label = <(FIELD_IDENTIFIER,GetHeap,GetHeap)<SUB>714</SUB>> ]
+"1849" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>715</SUB>> ]
+"1852" [label = <(FIELD_IDENTIFIER,AllocEmptyString,AllocEmptyString)<SUB>715</SUB>> ]
+"1856" [label = <(Self,soa.Self())<SUB>715</SUB>> ]
+"1834" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>714</SUB>> ]
+"1857" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>715</SUB>> ]
+"1836" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>714</SUB>> ]
+"1859" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>715</SUB>> ]
+"1766" [label = <(METHOD,AllocObject)<SUB>706</SUB>> ]
+"1876" [label = <(METHOD_RETURN,jobject)<SUB>706</SUB>> ]
+  "1770" -> "1775" 
+  "1770" -> "1789" 
+  "1789" -> "1797" 
+  "1791" -> "1814" 
+  "1861" -> "1876" 
+  "1792" -> "1803" 
+  "1799" -> "1791" 
+  "1814" -> "1818" 
+  "1814" -> "1824" 
+  "1821" -> "1836" 
+  "1821" -> "1866" 
+  "1862" -> "1861" 
+  "1793" -> "1792" 
+  "1800" -> "1808" 
+  "1804" -> "1799" 
+  "1818" -> "1876" 
+  "1822" -> "1821" 
+  "1827" -> "1844" 
+  "1839" -> "1876" 
+  "1863" -> "1871" 
+  "1868" -> "1862" 
+  "1774" -> "1781" 
+  "1774" -> "1789" 
+  "1795" -> "1793" 
+  "1801" -> "1800" 
+  "1805" -> "1804" 
+  "1824" -> "1822" 
+  "1829" -> "1827" 
+  "1840" -> "1839" 
+  "1864" -> "1863" 
+  "1869" -> "1875" 
+  "1872" -> "1868" 
+  "1775" -> "1774" 
+  "1779" -> "1786" 
+  "1786" -> "1876" 
+  "1797" -> "1795" 
+  "1803" -> "1801" 
+  "1806" -> "1811" 
+  "1809" -> "1805" 
+  "1830" -> "1829" 
+  "1841" -> "1849" 
+  "1846" -> "1840" 
+  "1866" -> "1864" 
+  "1871" -> "1869" 
+  "1873" -> "1872" 
+  "1780" -> "1779" 
+  "1808" -> "1806" 
+  "1811" -> "1809" 
+  "1831" -> "1838" 
+  "1838" -> "1830" 
+  "1842" -> "1841" 
+  "1847" -> "1859" 
+  "1854" -> "1846" 
+  "1875" -> "1873" 
+  "1781" -> "1783" 
+  "1783" -> "1780" 
+  "1832" -> "1831" 
+  "1844" -> "1842" 
+  "1848" -> "1847" 
+  "1855" -> "1854" 
+  "1833" -> "1837" 
+  "1837" -> "1832" 
+  "1849" -> "1852" 
+  "1852" -> "1848" 
+  "1856" -> "1855" 
+  "1834" -> "1833" 
+  "1857" -> "1856" 
+  "1836" -> "1834" 
+  "1859" -> "1857" 
+  "1766" -> "1770" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/490-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/490-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/490-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/490-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "reset" {  
-"18729" [label = <(METHOD,reset)> ]
-"18733" [label = <(METHOD_RETURN,ANY)> ]
-  "18729" -> "18733" 
+digraph "NewHandleWrapper" {  
+"18385" [label = <(METHOD,NewHandleWrapper)> ]
+"18389" [label = <(METHOD_RETURN,ANY)> ]
+  "18385" -> "18389" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/491-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/491-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/491-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/491-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.new" {  
-"18734" [label = <(METHOD,&lt;operator&gt;.new)> ]
-"18737" [label = <(METHOD_RETURN,ANY)> ]
-  "18734" -> "18737" 
+digraph "IncrementDisableMovingGC" {  
+"18390" [label = <(METHOD,IncrementDisableMovingGC)> ]
+"18394" [label = <(METHOD_RETURN,ANY)> ]
+  "18390" -> "18394" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/492-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/492-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/492-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/492-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "VisitModifiedUtf8Chars" {  
-"18738" [label = <(METHOD,VisitModifiedUtf8Chars)> ]
-"18744" [label = <(METHOD_RETURN,ANY)> ]
-  "18738" -> "18744" 
+digraph "IncrementDisableThreadFlip" {  
+"18395" [label = <(METHOD,IncrementDisableThreadFlip)> ]
+"18399" [label = <(METHOD_RETURN,ANY)> ]
+  "18395" -> "18399" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/493-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/493-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/493-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/493-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "mirror::String::AllocFromModifiedUtf8" {  
-"18745" [label = <(METHOD,mirror::String::AllocFromModifiedUtf8)> ]
-"18752" [label = <(METHOD_RETURN,ANY)> ]
-  "18745" -> "18752" 
+digraph "DecrementDisableMovingGC" {  
+"18400" [label = <(METHOD,DecrementDisableMovingGC)> ]
+"18404" [label = <(METHOD_RETURN,ANY)> ]
+  "18400" -> "18404" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/494-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/494-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/494-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/494-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string)" {  
-"18753" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string))> ]
-"18758" [label = <(METHOD_RETURN,ANY)> ]
-  "18753" -> "18758" 
+digraph "DecrementDisableThreadFlip" {  
+"18405" [label = <(METHOD,DecrementDisableThreadFlip)> ]
+"18409" [label = <(METHOD_RETURN,ANY)> ]
+  "18405" -> "18409" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/495-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/495-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/495-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/495-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "GetLength" {  
-"18759" [label = <(METHOD,GetLength)> ]
-"18762" [label = <(METHOD_RETURN,ANY)> ]
-  "18759" -> "18762" 
+digraph "CHECK" {  
+"18410" [label = <(METHOD,CHECK)> ]
+"18413" [label = <(METHOD_RETURN,ANY)> ]
+  "18410" -> "18413" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/496-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/496-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/496-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/496-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "GetUtfLength" {  
-"18763" [label = <(METHOD,GetUtfLength)> ]
-"18766" [label = <(METHOD_RETURN,ANY)> ]
-  "18763" -> "18766" 
+digraph "CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_array)" {  
+"18414" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_array))> ]
+"18419" [label = <(METHOD_RETURN,ANY)> ]
+  "18414" -> "18419" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/497-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/497-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/497-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/497-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string)" {  
-"18767" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string))> ]
-"18772" [label = <(METHOD_RETURN,ANY)> ]
-  "18767" -> "18772" 
+digraph "IsArrayInstance" {  
+"18420" [label = <(METHOD,IsArrayInstance)> ]
+"18423" [label = <(METHOD_RETURN,ANY)> ]
+  "18420" -> "18423" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/498-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/498-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/498-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/498-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_MEMCPY_ARGUMENT" {  
-"18773" [label = <(METHOD,CHECK_NON_NULL_MEMCPY_ARGUMENT)<SUB>509</SUB>> ]
-"18777" [label = <(METHOD_RETURN,ANY)> ]
-  "18773" -> "18777" 
+digraph "PrettyTypeOf" {  
+"18424" [label = <(METHOD,PrettyTypeOf)> ]
+"18427" [label = <(METHOD_RETURN,ANY)> ]
+  "18424" -> "18427" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/499-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/499-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/499-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/499-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf)" {  
-"18778" [label = <(METHOD,CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf))> ]
-"18783" [label = <(METHOD_RETURN,ANY)> ]
-  "18778" -> "18783" 
+digraph "AsArray" {  
+"18428" [label = <(METHOD,AsArray)> ]
+"18431" [label = <(METHOD_RETURN,ANY)> ]
+  "18428" -> "18431" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/5-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/5-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/5-cfg.dot	2023-06-07 19:33:45.327394699 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/5-cfg.dot	2023-06-07 19:33:51.917393996 +0330
@@ -1,5 +1,5 @@
-digraph "ScopedVAArgs" {  
-"30" [label = <(METHOD,ScopedVAArgs)<SUB>72</SUB>> ]
-"33" [label = <(METHOD_RETURN,ANY)<SUB>72</SUB>> ]
-  "30" -> "33" 
+digraph "NotifySetObjectField" {  
+"39" [label = <(METHOD,NotifySetObjectField)<SUB>102</SUB>> ]
+"44" [label = <(METHOD_RETURN,void)<SUB>102</SUB>> ]
+  "39" -> "44" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/50-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/50-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/50-cfg.dot	2023-06-07 19:33:45.357394696 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/50-cfg.dot	2023-06-07 19:33:51.947393991 +0330
@@ -1,44 +1,53 @@
-digraph "NewLocalRef" {  
-"1838" [label = <(soa,soa(env))<SUB>746</SUB>> ]
-"1840" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; decoded_obj = soa.Decode&lt;mirror::Object&gt;(obj))<SUB>747</SUB>> ]
-"1864" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(decoded_obj);,return soa.AddLocalReference&lt;jobject&gt;(decoded_obj);)<SUB>752</SUB>> ]
-"1841" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; decoded_obj)<SUB>747</SUB>> ]
-"1848" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(obj))<SUB>747</SUB>> ]
-"1858" [label = <(&lt;operator&gt;.equals,decoded_obj == nullptr)<SUB>749</SUB>> ]
-"1865" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(decoded_obj))<SUB>752</SUB>> ]
-"1842" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>747</SUB>> ]
-"1849" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>747</SUB>> ]
-"1862" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>750</SUB>> ]
-"1866" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>752</SUB>> ]
-"1844" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>747</SUB>> ]
-"1850" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>747</SUB>> ]
-"1853" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>747</SUB>> ]
-"1867" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>752</SUB>> ]
-"1846" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>747</SUB>> ]
-"1852" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>747</SUB>> ]
-"1855" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>747</SUB>> ]
-"1869" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>752</SUB>> ]
-"1833" [label = <(METHOD,NewLocalRef)<SUB>745</SUB>> ]
-"1872" [label = <(METHOD_RETURN,jobject)<SUB>745</SUB>> ]
-  "1838" -> "1846" 
-  "1840" -> "1858" 
-  "1864" -> "1872" 
-  "1841" -> "1852" 
-  "1848" -> "1840" 
-  "1858" -> "1862" 
-  "1858" -> "1869" 
-  "1865" -> "1864" 
-  "1842" -> "1841" 
-  "1849" -> "1848" 
-  "1862" -> "1872" 
-  "1866" -> "1865" 
-  "1844" -> "1842" 
-  "1850" -> "1855" 
-  "1853" -> "1849" 
-  "1867" -> "1866" 
-  "1846" -> "1844" 
-  "1852" -> "1850" 
-  "1855" -> "1853" 
-  "1869" -> "1867" 
-  "1833" -> "1838" 
+digraph "NewObject" {  
+"1884" [label = <(va_start,va_start(args, mid))<SUB>723</SUB>> ]
+"1888" [label = <(free_args_later,free_args_later(&amp;args))<SUB>724</SUB>> ]
+"1891" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_class))<SUB>725</SUB>> ]
+"1909" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>726</SUB>> ]
+"1928" [label = <(&lt;operator&gt;.assignment,result = NewObjectV(env, java_class, mid, args))<SUB>727</SUB>> ]
+"1935" [label = <(RETURN,return result;,return result;)<SUB>728</SUB>> ]
+"1889" [label = <(&lt;operator&gt;.addressOf,&amp;args)<SUB>724</SUB>> ]
+"1930" [label = <(NewObjectV,NewObjectV(env, java_class, mid, args))<SUB>727</SUB>> ]
+"1895" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>725</SUB>> ]
+"1913" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>726</SUB>> ]
+"1896" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>725</SUB>> ]
+"1900" [label = <(CHECK_NON_NULL_ARGUMENT(java_class),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class == null&quot;))<SUB>725</SUB>> ]
+"1907" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_class),CHECK_NON_NULL_ARGUMENT(java_class))<SUB>725</SUB>> ]
+"1914" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>726</SUB>> ]
+"1918" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>726</SUB>> ]
+"1925" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>726</SUB>> ]
+"1901" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>725</SUB>> ]
+"1919" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>726</SUB>> ]
+"1902" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>725</SUB>> ]
+"1904" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>725</SUB>> ]
+"1920" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>726</SUB>> ]
+"1922" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>726</SUB>> ]
+"1878" [label = <(METHOD,NewObject)<SUB>721</SUB>> ]
+"1937" [label = <(METHOD_RETURN,jobject)<SUB>721</SUB>> ]
+  "1884" -> "1889" 
+  "1888" -> "1891" 
+  "1891" -> "1896" 
+  "1891" -> "1909" 
+  "1909" -> "1914" 
+  "1909" -> "1930" 
+  "1928" -> "1935" 
+  "1935" -> "1937" 
+  "1889" -> "1888" 
+  "1930" -> "1928" 
+  "1895" -> "1902" 
+  "1895" -> "1909" 
+  "1913" -> "1920" 
+  "1913" -> "1930" 
+  "1896" -> "1895" 
+  "1900" -> "1907" 
+  "1907" -> "1937" 
+  "1914" -> "1913" 
+  "1918" -> "1925" 
+  "1925" -> "1937" 
+  "1901" -> "1900" 
+  "1919" -> "1918" 
+  "1902" -> "1904" 
+  "1904" -> "1901" 
+  "1920" -> "1922" 
+  "1922" -> "1919" 
+  "1878" -> "1884" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/500-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/500-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/500-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/500-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "IsCompressed" {  
-"18784" [label = <(METHOD,IsCompressed)> ]
-"18787" [label = <(METHOD_RETURN,ANY)> ]
-  "18784" -> "18787" 
+digraph "CHECK_NON_NULL_ARGUMENT(java_array)" {  
+"18432" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(java_array))> ]
+"18437" [label = <(METHOD_RETURN,ANY)> ]
+  "18432" -> "18437" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/501-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/501-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/501-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/501-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.preIncrement" {  
-"18788" [label = <(METHOD,&lt;operator&gt;.preIncrement)> ]
-"18791" [label = <(METHOD_RETURN,ANY)> ]
-  "18788" -> "18791" 
+digraph "&lt;operator&gt;.arithmeticShiftRight" {  
+"18438" [label = <(METHOD,&lt;operator&gt;.arithmeticShiftRight)> ]
+"18442" [label = <(METHOD_RETURN,ANY)> ]
+  "18438" -> "18442" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/502-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/502-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/502-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/502-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "CharAt" {  
-"18792" [label = <(METHOD,CharAt)> ]
-"18796" [label = <(METHOD_RETURN,ANY)> ]
-  "18792" -> "18796" 
+digraph "CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array)" {  
+"18443" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))> ]
+"18448" [label = <(METHOD_RETURN,ANY)> ]
+  "18443" -> "18448" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/503-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/503-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/503-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/503-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "GetValue" {  
-"18797" [label = <(METHOD,GetValue)> ]
-"18800" [label = <(METHOD_RETURN,ANY)> ]
-  "18797" -> "18800" 
+digraph "Ptr" {  
+"18449" [label = <(METHOD,Ptr)> ]
+"18452" [label = <(METHOD_RETURN,ANY)> ]
+  "18449" -> "18452" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/504-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/504-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/504-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/504-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "memcpy" {  
-"18801" [label = <(METHOD,memcpy)> ]
-"18806" [label = <(METHOD_RETURN,ANY)> ]
-  "18801" -> "18806" 
+digraph "NewPrimitiveArray&lt;jbooleanArray,mirror::BooleanArray&gt;" {  
+"18453" [label = <(METHOD,NewPrimitiveArray&lt;jbooleanArray,mirror::BooleanArray&gt;)> ]
+"18457" [label = <(METHOD_RETURN,ANY)> ]
+  "18453" -> "18457" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/505-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/505-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/505-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/505-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.sizeOf" {  
-"18807" [label = <(METHOD,&lt;operator&gt;.sizeOf)> ]
-"18810" [label = <(METHOD_RETURN,ANY)> ]
-  "18807" -> "18810" 
+digraph "NewPrimitiveArray&lt;jbyteArray,mirror::ByteArray&gt;" {  
+"18458" [label = <(METHOD,NewPrimitiveArray&lt;jbyteArray,mirror::ByteArray&gt;)> ]
+"18462" [label = <(METHOD_RETURN,ANY)> ]
+  "18458" -> "18462" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/506-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/506-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/506-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/506-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "CountUtf8Bytes" {  
-"18811" [label = <(METHOD,CountUtf8Bytes)> ]
-"18815" [label = <(METHOD_RETURN,ANY)> ]
-  "18811" -> "18815" 
+digraph "NewPrimitiveArray&lt;jcharArray,mirror::CharArray&gt;" {  
+"18463" [label = <(METHOD,NewPrimitiveArray&lt;jcharArray,mirror::CharArray&gt;)> ]
+"18467" [label = <(METHOD_RETURN,ANY)> ]
+  "18463" -> "18467" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/507-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/507-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/507-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/507-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "ConvertUtf16ToModifiedUtf8" {  
-"18816" [label = <(METHOD,ConvertUtf16ToModifiedUtf8)> ]
-"18822" [label = <(METHOD_RETURN,ANY)> ]
-  "18816" -> "18822" 
+digraph "NewPrimitiveArray&lt;jdoubleArray,mirror::DoubleArray&gt;" {  
+"18468" [label = <(METHOD,NewPrimitiveArray&lt;jdoubleArray,mirror::DoubleArray&gt;)> ]
+"18472" [label = <(METHOD_RETURN,ANY)> ]
+  "18468" -> "18472" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/508-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/508-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/508-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/508-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT(java_string)" {  
-"18823" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(java_string))> ]
-"18828" [label = <(METHOD_RETURN,ANY)> ]
-  "18823" -> "18828" 
+digraph "NewPrimitiveArray&lt;jfloatArray,mirror::FloatArray&gt;" {  
+"18473" [label = <(METHOD,NewPrimitiveArray&lt;jfloatArray,mirror::FloatArray&gt;)> ]
+"18477" [label = <(METHOD_RETURN,ANY)> ]
+  "18473" -> "18477" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/509-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/509-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/509-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/509-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "IsMovableObject" {  
-"18829" [label = <(METHOD,IsMovableObject)> ]
-"18833" [label = <(METHOD_RETURN,ANY)> ]
-  "18829" -> "18833" 
+digraph "NewPrimitiveArray&lt;jintArray,mirror::IntArray&gt;" {  
+"18478" [label = <(METHOD,NewPrimitiveArray&lt;jintArray,mirror::IntArray&gt;)> ]
+"18482" [label = <(METHOD_RETURN,ANY)> ]
+  "18478" -> "18482" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/51-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/51-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/51-cfg.dot	2023-06-07 19:33:45.357394696 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/51-cfg.dot	2023-06-07 19:33:51.947393991 +0330
@@ -1,43 +1,169 @@
-digraph "DeleteLocalRef" {  
-"1885" [label = <(soa,soa(env))<SUB>762</SUB>> ]
-"1888" [label = <(&lt;operator&gt;.assignment,* ext_env = down_cast&lt;JNIEnvExt*&gt;(env))<SUB>763</SUB>> ]
-"1879" [label = <(&lt;operator&gt;.equals,obj == nullptr)<SUB>756</SUB>> ]
-"1890" [label = <(down_cast&lt;JNIEnvExt*&gt;,down_cast&lt;JNIEnvExt*&gt;(env))<SUB>763</SUB>> ]
-"1893" [label = <(&lt;operator&gt;.logicalNot,!ext_env-&gt;locals_.Remove(ext_env-&gt;local_ref_cookie_, obj))<SUB>764</SUB>> ]
-"1883" [label = <(RETURN,return;,return;)<SUB>757</SUB>> ]
-"1894" [label = <(Remove,ext_env-&gt;locals_.Remove(ext_env-&gt;local_ref_cookie_, obj))<SUB>764</SUB>> ]
-"1905" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI WARNING: DeleteLocalRef(&quot; &lt;&lt; obj &lt;&lt; &quot;) &quot;\012 &lt;&lt; &quot;failed to find entry&quot;)<SUB>770</SUB>> ]
-"1895" [label = <(&lt;operator&gt;.fieldAccess,ext_env-&gt;locals_.Remove)<SUB>764</SUB>> ]
-"1900" [label = <(&lt;operator&gt;.indirectFieldAccess,ext_env-&gt;local_ref_cookie_)<SUB>764</SUB>> ]
-"1906" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI WARNING: DeleteLocalRef(&quot; &lt;&lt; obj &lt;&lt; &quot;) &quot;)<SUB>770</SUB>> ]
-"1896" [label = <(&lt;operator&gt;.indirectFieldAccess,ext_env-&gt;locals_)<SUB>764</SUB>> ]
-"1899" [label = <(FIELD_IDENTIFIER,Remove,Remove)<SUB>764</SUB>> ]
-"1902" [label = <(FIELD_IDENTIFIER,local_ref_cookie_,local_ref_cookie_)<SUB>764</SUB>> ]
-"1907" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI WARNING: DeleteLocalRef(&quot; &lt;&lt; obj)<SUB>770</SUB>> ]
-"1898" [label = <(FIELD_IDENTIFIER,locals_,locals_)<SUB>764</SUB>> ]
-"1908" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI WARNING: DeleteLocalRef(&quot;)<SUB>770</SUB>> ]
-"1909" [label = <(LOG,LOG(WARNING))<SUB>770</SUB>> ]
-"1874" [label = <(METHOD,DeleteLocalRef)<SUB>755</SUB>> ]
-"1915" [label = <(METHOD_RETURN,void)<SUB>755</SUB>> ]
-  "1885" -> "1890" 
-  "1888" -> "1898" 
-  "1879" -> "1883" 
-  "1879" -> "1885" 
-  "1890" -> "1888" 
-  "1893" -> "1915" 
-  "1893" -> "1909" 
-  "1883" -> "1915" 
-  "1894" -> "1893" 
-  "1905" -> "1915" 
-  "1895" -> "1902" 
-  "1900" -> "1894" 
-  "1906" -> "1905" 
-  "1896" -> "1899" 
-  "1899" -> "1895" 
-  "1902" -> "1900" 
-  "1907" -> "1906" 
-  "1898" -> "1896" 
-  "1908" -> "1907" 
-  "1909" -> "1908" 
-  "1874" -> "1879" 
+digraph "NewObjectV" {  
+"1945" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_class))<SUB>732</SUB>> ]
+"1963" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>733</SUB>> ]
+"1982" [label = <(soa,soa(env))<SUB>734</SUB>> ]
+"1984" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c = EnsureInitialized(soa.Self(),\012                                                soa.Decode&lt;mirror::Class&gt;(java_class)))<SUB>735</SUB>> ]
+"2043" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; result = c-&gt;AllocObject(soa.Self()))<SUB>746</SUB>> ]
+"2067" [label = <(&lt;operator&gt;.assignment,local_result = soa.AddLocalReference&lt;jobject&gt;(result))<SUB>750</SUB>> ]
+"2076" [label = <(CallNonvirtualVoidMethodV,CallNonvirtualVoidMethodV(env, local_result, java_class, mid, args))<SUB>751</SUB>> ]
+"2093" [label = <(RETURN,return local_result;,return local_result;)<SUB>755</SUB>> ]
+"1985" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c)<SUB>735</SUB>> ]
+"1992" [label = <(EnsureInitialized,EnsureInitialized(soa.Self(),\012                                                soa.Decode&lt;mirror::Class&gt;(java_class)))<SUB>735</SUB>> ]
+"2007" [label = <(&lt;operator&gt;.equals,c == nullptr)<SUB>737</SUB>> ]
+"2014" [label = <(IsStringClass,c-&gt;IsStringClass())<SUB>740</SUB>> ]
+"2044" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; result)<SUB>746</SUB>> ]
+"2051" [label = <(AllocObject,c-&gt;AllocObject(soa.Self()))<SUB>746</SUB>> ]
+"2060" [label = <(&lt;operator&gt;.equals,result == nullptr)<SUB>747</SUB>> ]
+"2069" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result))<SUB>750</SUB>> ]
+"2083" [label = <(IsExceptionPending,soa.Self()-&gt;IsExceptionPending())<SUB>752</SUB>> ]
+"1986" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>735</SUB>> ]
+"1993" [label = <(Self,soa.Self())<SUB>735</SUB>> ]
+"1997" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>736</SUB>> ]
+"2011" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>738</SUB>> ]
+"2015" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;IsStringClass)<SUB>740</SUB>> ]
+"2020" [label = <(&lt;operator&gt;.assignment,sf_mid = jni::EncodeArtMethod(\012 WellKnownClasses::StringInitToStringFactory(jni::DecodeArtMethod(mid))))<SUB>742</SUB>> ]
+"2035" [label = <(RETURN,return CallStaticObjectMethodV(env, WellKnownClasses::java_lang_StringFactory, sf_mid, args);,return CallStaticObjectMethodV(env, WellKnownClasses::java_lang_StringFactory, sf_mid, args);)<SUB>744</SUB>> ]
+"2045" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>746</SUB>> ]
+"2052" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;AllocObject)<SUB>746</SUB>> ]
+"2055" [label = <(Self,soa.Self())<SUB>746</SUB>> ]
+"2064" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>748</SUB>> ]
+"2070" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>750</SUB>> ]
+"2084" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;IsExceptionPending)<SUB>752</SUB>> ]
+"2091" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>753</SUB>> ]
+"1949" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>732</SUB>> ]
+"1967" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>733</SUB>> ]
+"1988" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>735</SUB>> ]
+"1994" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>735</SUB>> ]
+"1998" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>736</SUB>> ]
+"2017" [label = <(FIELD_IDENTIFIER,IsStringClass,IsStringClass)<SUB>740</SUB>> ]
+"2022" [label = <(jni::EncodeArtMethod,jni::EncodeArtMethod(\012 WellKnownClasses::StringInitToStringFactory(jni::DecodeArtMethod(mid))))<SUB>742</SUB>> ]
+"2036" [label = <(CallStaticObjectMethodV,CallStaticObjectMethodV(env, WellKnownClasses::java_lang_StringFactory, sf_mid, args))<SUB>744</SUB>> ]
+"2047" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>746</SUB>> ]
+"2054" [label = <(FIELD_IDENTIFIER,AllocObject,AllocObject)<SUB>746</SUB>> ]
+"2056" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>746</SUB>> ]
+"2071" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>750</SUB>> ]
+"2085" [label = <(Self,soa.Self())<SUB>752</SUB>> ]
+"2089" [label = <(FIELD_IDENTIFIER,IsExceptionPending,IsExceptionPending)<SUB>752</SUB>> ]
+"1950" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>732</SUB>> ]
+"1954" [label = <(CHECK_NON_NULL_ARGUMENT(java_class),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class == null&quot;))<SUB>732</SUB>> ]
+"1961" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_class),CHECK_NON_NULL_ARGUMENT(java_class))<SUB>732</SUB>> ]
+"1968" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>733</SUB>> ]
+"1972" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>733</SUB>> ]
+"1979" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>733</SUB>> ]
+"1990" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>735</SUB>> ]
+"1996" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>735</SUB>> ]
+"1999" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>736</SUB>> ]
+"2002" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>736</SUB>> ]
+"2023" [label = <(&lt;operator&gt;.fieldAccess,jni::EncodeArtMethod)<SUB>742</SUB>> ]
+"2026" [label = <(WellKnownClasses::StringInitToStringFactory,WellKnownClasses::StringInitToStringFactory(jni::DecodeArtMethod(mid)))<SUB>743</SUB>> ]
+"2038" [label = <(&lt;operator&gt;.fieldAccess,WellKnownClasses::java_lang_StringFactory)<SUB>744</SUB>> ]
+"2049" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>746</SUB>> ]
+"2058" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>746</SUB>> ]
+"2073" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>750</SUB>> ]
+"2086" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>752</SUB>> ]
+"1955" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>732</SUB>> ]
+"1973" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>733</SUB>> ]
+"2001" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>736</SUB>> ]
+"2004" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>736</SUB>> ]
+"2025" [label = <(FIELD_IDENTIFIER,EncodeArtMethod,EncodeArtMethod)<SUB>742</SUB>> ]
+"2027" [label = <(&lt;operator&gt;.fieldAccess,WellKnownClasses::StringInitToStringFactory)<SUB>743</SUB>> ]
+"2030" [label = <(jni::DecodeArtMethod,jni::DecodeArtMethod(mid))<SUB>743</SUB>> ]
+"2040" [label = <(FIELD_IDENTIFIER,java_lang_StringFactory,java_lang_StringFactory)<SUB>744</SUB>> ]
+"2088" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>752</SUB>> ]
+"1956" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>732</SUB>> ]
+"1958" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>732</SUB>> ]
+"1974" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>733</SUB>> ]
+"1976" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>733</SUB>> ]
+"2029" [label = <(FIELD_IDENTIFIER,StringInitToStringFactory,StringInitToStringFactory)<SUB>743</SUB>> ]
+"2031" [label = <(&lt;operator&gt;.fieldAccess,jni::DecodeArtMethod)<SUB>743</SUB>> ]
+"2033" [label = <(FIELD_IDENTIFIER,DecodeArtMethod,DecodeArtMethod)<SUB>743</SUB>> ]
+"1939" [label = <(METHOD,NewObjectV)<SUB>731</SUB>> ]
+"2095" [label = <(METHOD_RETURN,jobject)<SUB>731</SUB>> ]
+  "1945" -> "1950" 
+  "1945" -> "1963" 
+  "1963" -> "1968" 
+  "1963" -> "1982" 
+  "1982" -> "1990" 
+  "1984" -> "2007" 
+  "2043" -> "2060" 
+  "2067" -> "2076" 
+  "2076" -> "2088" 
+  "2093" -> "2095" 
+  "1985" -> "1996" 
+  "1992" -> "1984" 
+  "2007" -> "2011" 
+  "2007" -> "2017" 
+  "2014" -> "2025" 
+  "2014" -> "2049" 
+  "2044" -> "2054" 
+  "2051" -> "2043" 
+  "2060" -> "2064" 
+  "2060" -> "2073" 
+  "2069" -> "2067" 
+  "2083" -> "2091" 
+  "2083" -> "2093" 
+  "1986" -> "1985" 
+  "1993" -> "2001" 
+  "1997" -> "1992" 
+  "2011" -> "2095" 
+  "2015" -> "2014" 
+  "2020" -> "2040" 
+  "2035" -> "2095" 
+  "2045" -> "2044" 
+  "2052" -> "2058" 
+  "2055" -> "2051" 
+  "2064" -> "2095" 
+  "2070" -> "2069" 
+  "2084" -> "2083" 
+  "2091" -> "2095" 
+  "1949" -> "1956" 
+  "1949" -> "1963" 
+  "1967" -> "1974" 
+  "1967" -> "1982" 
+  "1988" -> "1986" 
+  "1994" -> "1993" 
+  "1998" -> "1997" 
+  "2017" -> "2015" 
+  "2022" -> "2020" 
+  "2036" -> "2035" 
+  "2047" -> "2045" 
+  "2054" -> "2052" 
+  "2056" -> "2055" 
+  "2071" -> "2070" 
+  "2085" -> "2089" 
+  "2089" -> "2084" 
+  "1950" -> "1949" 
+  "1954" -> "1961" 
+  "1961" -> "2095" 
+  "1968" -> "1967" 
+  "1972" -> "1979" 
+  "1979" -> "2095" 
+  "1990" -> "1988" 
+  "1996" -> "1994" 
+  "1999" -> "2004" 
+  "2002" -> "1998" 
+  "2023" -> "2029" 
+  "2026" -> "2022" 
+  "2038" -> "2036" 
+  "2049" -> "2047" 
+  "2058" -> "2056" 
+  "2073" -> "2071" 
+  "2086" -> "2085" 
+  "1955" -> "1954" 
+  "1973" -> "1972" 
+  "2001" -> "1999" 
+  "2004" -> "2002" 
+  "2025" -> "2023" 
+  "2027" -> "2033" 
+  "2030" -> "2026" 
+  "2040" -> "2038" 
+  "2088" -> "2086" 
+  "1956" -> "1958" 
+  "1958" -> "1955" 
+  "1974" -> "1976" 
+  "1976" -> "1973" 
+  "2029" -> "2027" 
+  "2031" -> "2030" 
+  "2033" -> "2031" 
+  "1939" -> "1945" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/510-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/510-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/510-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/510-cfg.dot	2023-06-07 19:33:52.137393972 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.delete" {  
-"18834" [label = <(METHOD,&lt;operator&gt;.delete)> ]
-"18837" [label = <(METHOD_RETURN,ANY)> ]
-  "18834" -> "18837" 
+digraph "NewPrimitiveArray&lt;jlongArray,mirror::LongArray&gt;" {  
+"18483" [label = <(METHOD,NewPrimitiveArray&lt;jlongArray,mirror::LongArray&gt;)> ]
+"18487" [label = <(METHOD_RETURN,ANY)> ]
+  "18483" -> "18487" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/511-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/511-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/511-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/511-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "h" {  
-"18838" [label = <(METHOD,h)> ]
-"18841" [label = <(METHOD_RETURN,ANY)> ]
-  "18838" -> "18841" 
+digraph "CHECK_NON_NULL_ARGUMENT(element_jclass)" {  
+"18488" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(element_jclass))> ]
+"18493" [label = <(METHOD_RETURN,ANY)> ]
+  "18488" -> "18493" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/512-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/512-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/512-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/512-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "NewHandleWrapper" {  
-"18842" [label = <(METHOD,NewHandleWrapper)> ]
-"18846" [label = <(METHOD_RETURN,ANY)> ]
-  "18842" -> "18846" 
+digraph "IsPrimitive" {  
+"18494" [label = <(METHOD,IsPrimitive)> ]
+"18497" [label = <(METHOD_RETURN,ANY)> ]
+  "18494" -> "18497" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/513-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/513-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/513-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/513-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "IncrementDisableMovingGC" {  
-"18847" [label = <(METHOD,IncrementDisableMovingGC)> ]
-"18851" [label = <(METHOD_RETURN,ANY)> ]
-  "18847" -> "18851" 
+digraph "PrettyDescriptor" {  
+"18498" [label = <(METHOD,PrettyDescriptor)> ]
+"18501" [label = <(METHOD_RETURN,ANY)> ]
+  "18498" -> "18501" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/514-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/514-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/514-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/514-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "IncrementDisableThreadFlip" {  
-"18852" [label = <(METHOD,IncrementDisableThreadFlip)> ]
-"18856" [label = <(METHOD_RETURN,ANY)> ]
-  "18852" -> "18856" 
+digraph "FindArrayClass" {  
+"18502" [label = <(METHOD,FindArrayClass)> ]
+"18507" [label = <(METHOD_RETURN,ANY)> ]
+  "18502" -> "18507" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/515-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/515-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/515-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/515-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "DecrementDisableMovingGC" {  
-"18857" [label = <(METHOD,DecrementDisableMovingGC)> ]
-"18861" [label = <(METHOD_RETURN,ANY)> ]
-  "18857" -> "18861" 
+digraph "::Alloc" {  
+"18508" [label = <(METHOD,::Alloc)> ]
+"18514" [label = <(METHOD_RETURN,ANY)> ]
+  "18508" -> "18514" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/516-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/516-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/516-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/516-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "DecrementDisableThreadFlip" {  
-"18862" [label = <(METHOD,DecrementDisableThreadFlip)> ]
-"18866" [label = <(METHOD_RETURN,ANY)> ]
-  "18862" -> "18866" 
+digraph "GetComponentType" {  
+"18515" [label = <(METHOD,GetComponentType)> ]
+"18518" [label = <(METHOD_RETURN,ANY)> ]
+  "18515" -> "18518" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/517-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/517-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/517-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/517-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK" {  
-"18867" [label = <(METHOD,CHECK)> ]
-"18870" [label = <(METHOD_RETURN,ANY)> ]
-  "18867" -> "18870" 
+digraph "mirror::Class::PrettyDescriptor" {  
+"18519" [label = <(METHOD,mirror::Class::PrettyDescriptor)> ]
+"18523" [label = <(METHOD_RETURN,ANY)> ]
+  "18519" -> "18523" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/518-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/518-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/518-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/518-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_array)" {  
-"18871" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_array))> ]
-"18876" [label = <(METHOD_RETURN,ANY)> ]
-  "18871" -> "18876" 
+digraph "NewPrimitiveArray&lt;jshortArray,mirror::ShortArray&gt;" {  
+"18524" [label = <(METHOD,NewPrimitiveArray&lt;jshortArray,mirror::ShortArray&gt;)> ]
+"18528" [label = <(METHOD_RETURN,ANY)> ]
+  "18524" -> "18528" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/519-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/519-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/519-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/519-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "IsArrayInstance" {  
-"18877" [label = <(METHOD,IsArrayInstance)> ]
-"18880" [label = <(METHOD_RETURN,ANY)> ]
-  "18877" -> "18880" 
+digraph "IsPrimitiveArray" {  
+"18529" [label = <(METHOD,IsPrimitiveArray)> ]
+"18532" [label = <(METHOD_RETURN,ANY)> ]
+  "18529" -> "18532" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/52-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/52-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/52-cfg.dot	2023-06-07 19:33:45.357394696 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/52-cfg.dot	2023-06-07 19:33:51.947393991 +0330
@@ -1,42 +1,169 @@
-digraph "IsSameObject" {  
-"1923" [label = <(&lt;operator&gt;.equals,obj1 == obj2)<SUB>776</SUB>> ]
-"1927" [label = <(RETURN,return JNI_TRUE;,return JNI_TRUE;)<SUB>777</SUB>> ]
-"1932" [label = <(soa,soa(env))<SUB>779</SUB>> ]
-"1934" [label = <(RETURN,return (soa.Decode&lt;mirror::Object&gt;(obj1) == soa.Decode&lt;mirror::Object&gt;(obj2))\012 ? JNI_TRUE : JNI_FALSE;,return (soa.Decode&lt;mirror::Object&gt;(obj1) == soa.Decode&lt;mirror::Object&gt;(obj2))\012 ? JNI_TRUE : JNI_FALSE;)<SUB>780</SUB>> ]
-"1935" [label = <(&lt;operator&gt;.conditional,(soa.Decode&lt;mirror::Object&gt;(obj1) == soa.Decode&lt;mirror::Object&gt;(obj2))\012 ? JNI_TRUE : JNI_FALSE)<SUB>780</SUB>> ]
-"1936" [label = <(&lt;operator&gt;.equals,soa.Decode&lt;mirror::Object&gt;(obj1) == soa.Decode&lt;mirror::Object&gt;(obj2))<SUB>780</SUB>> ]
-"1937" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(obj1))<SUB>780</SUB>> ]
-"1946" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(obj2))<SUB>780</SUB>> ]
-"1938" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>780</SUB>> ]
-"1947" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>780</SUB>> ]
-"1939" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>780</SUB>> ]
-"1942" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>780</SUB>> ]
-"1948" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>780</SUB>> ]
-"1951" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>780</SUB>> ]
-"1941" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>780</SUB>> ]
-"1944" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>780</SUB>> ]
-"1950" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>780</SUB>> ]
-"1953" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>780</SUB>> ]
-"1917" [label = <(METHOD,IsSameObject)<SUB>775</SUB>> ]
-"1957" [label = <(METHOD_RETURN,jboolean)<SUB>775</SUB>> ]
-  "1923" -> "1927" 
-  "1923" -> "1932" 
-  "1927" -> "1957" 
-  "1932" -> "1941" 
-  "1934" -> "1957" 
-  "1935" -> "1934" 
-  "1936" -> "1935" 
-  "1937" -> "1950" 
-  "1946" -> "1936" 
-  "1938" -> "1937" 
-  "1947" -> "1946" 
-  "1939" -> "1944" 
-  "1942" -> "1938" 
-  "1948" -> "1953" 
-  "1951" -> "1947" 
-  "1941" -> "1939" 
-  "1944" -> "1942" 
-  "1950" -> "1948" 
-  "1953" -> "1951" 
-  "1917" -> "1923" 
+digraph "NewObjectA" {  
+"2103" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_class))<SUB>759</SUB>> ]
+"2121" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>760</SUB>> ]
+"2140" [label = <(soa,soa(env))<SUB>761</SUB>> ]
+"2142" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c = EnsureInitialized(soa.Self(),\012                                                soa.Decode&lt;mirror::Class&gt;(java_class)))<SUB>762</SUB>> ]
+"2201" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; result = c-&gt;AllocObject(soa.Self()))<SUB>773</SUB>> ]
+"2225" [label = <(&lt;operator&gt;.assignment,local_result = soa.AddLocalReference&lt;jobjectArray&gt;(result))<SUB>777</SUB>> ]
+"2234" [label = <(CallNonvirtualVoidMethodA,CallNonvirtualVoidMethodA(env, local_result, java_class, mid, args))<SUB>778</SUB>> ]
+"2251" [label = <(RETURN,return local_result;,return local_result;)<SUB>782</SUB>> ]
+"2143" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c)<SUB>762</SUB>> ]
+"2150" [label = <(EnsureInitialized,EnsureInitialized(soa.Self(),\012                                                soa.Decode&lt;mirror::Class&gt;(java_class)))<SUB>762</SUB>> ]
+"2165" [label = <(&lt;operator&gt;.equals,c == nullptr)<SUB>764</SUB>> ]
+"2172" [label = <(IsStringClass,c-&gt;IsStringClass())<SUB>767</SUB>> ]
+"2202" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; result)<SUB>773</SUB>> ]
+"2209" [label = <(AllocObject,c-&gt;AllocObject(soa.Self()))<SUB>773</SUB>> ]
+"2218" [label = <(&lt;operator&gt;.equals,result == nullptr)<SUB>774</SUB>> ]
+"2227" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobjectArray&gt;(result))<SUB>777</SUB>> ]
+"2241" [label = <(IsExceptionPending,soa.Self()-&gt;IsExceptionPending())<SUB>779</SUB>> ]
+"2144" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>762</SUB>> ]
+"2151" [label = <(Self,soa.Self())<SUB>762</SUB>> ]
+"2155" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>763</SUB>> ]
+"2169" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>765</SUB>> ]
+"2173" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;IsStringClass)<SUB>767</SUB>> ]
+"2178" [label = <(&lt;operator&gt;.assignment,sf_mid = jni::EncodeArtMethod(\012 WellKnownClasses::StringInitToStringFactory(jni::DecodeArtMethod(mid))))<SUB>769</SUB>> ]
+"2193" [label = <(RETURN,return CallStaticObjectMethodA(env, WellKnownClasses::java_lang_StringFactory, sf_mid, args);,return CallStaticObjectMethodA(env, WellKnownClasses::java_lang_StringFactory, sf_mid, args);)<SUB>771</SUB>> ]
+"2203" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>773</SUB>> ]
+"2210" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;AllocObject)<SUB>773</SUB>> ]
+"2213" [label = <(Self,soa.Self())<SUB>773</SUB>> ]
+"2222" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>775</SUB>> ]
+"2228" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobjectArray)<SUB>777</SUB>> ]
+"2242" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;IsExceptionPending)<SUB>779</SUB>> ]
+"2249" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>780</SUB>> ]
+"2107" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>759</SUB>> ]
+"2125" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>760</SUB>> ]
+"2146" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>762</SUB>> ]
+"2152" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>762</SUB>> ]
+"2156" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>763</SUB>> ]
+"2175" [label = <(FIELD_IDENTIFIER,IsStringClass,IsStringClass)<SUB>767</SUB>> ]
+"2180" [label = <(jni::EncodeArtMethod,jni::EncodeArtMethod(\012 WellKnownClasses::StringInitToStringFactory(jni::DecodeArtMethod(mid))))<SUB>769</SUB>> ]
+"2194" [label = <(CallStaticObjectMethodA,CallStaticObjectMethodA(env, WellKnownClasses::java_lang_StringFactory, sf_mid, args))<SUB>771</SUB>> ]
+"2205" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>773</SUB>> ]
+"2212" [label = <(FIELD_IDENTIFIER,AllocObject,AllocObject)<SUB>773</SUB>> ]
+"2214" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>773</SUB>> ]
+"2229" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>777</SUB>> ]
+"2243" [label = <(Self,soa.Self())<SUB>779</SUB>> ]
+"2247" [label = <(FIELD_IDENTIFIER,IsExceptionPending,IsExceptionPending)<SUB>779</SUB>> ]
+"2108" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>759</SUB>> ]
+"2112" [label = <(CHECK_NON_NULL_ARGUMENT(java_class),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class == null&quot;))<SUB>759</SUB>> ]
+"2119" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_class),CHECK_NON_NULL_ARGUMENT(java_class))<SUB>759</SUB>> ]
+"2126" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>760</SUB>> ]
+"2130" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>760</SUB>> ]
+"2137" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>760</SUB>> ]
+"2148" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>762</SUB>> ]
+"2154" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>762</SUB>> ]
+"2157" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>763</SUB>> ]
+"2160" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>763</SUB>> ]
+"2181" [label = <(&lt;operator&gt;.fieldAccess,jni::EncodeArtMethod)<SUB>769</SUB>> ]
+"2184" [label = <(WellKnownClasses::StringInitToStringFactory,WellKnownClasses::StringInitToStringFactory(jni::DecodeArtMethod(mid)))<SUB>770</SUB>> ]
+"2196" [label = <(&lt;operator&gt;.fieldAccess,WellKnownClasses::java_lang_StringFactory)<SUB>771</SUB>> ]
+"2207" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>773</SUB>> ]
+"2216" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>773</SUB>> ]
+"2231" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>777</SUB>> ]
+"2244" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>779</SUB>> ]
+"2113" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>759</SUB>> ]
+"2131" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>760</SUB>> ]
+"2159" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>763</SUB>> ]
+"2162" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>763</SUB>> ]
+"2183" [label = <(FIELD_IDENTIFIER,EncodeArtMethod,EncodeArtMethod)<SUB>769</SUB>> ]
+"2185" [label = <(&lt;operator&gt;.fieldAccess,WellKnownClasses::StringInitToStringFactory)<SUB>770</SUB>> ]
+"2188" [label = <(jni::DecodeArtMethod,jni::DecodeArtMethod(mid))<SUB>770</SUB>> ]
+"2198" [label = <(FIELD_IDENTIFIER,java_lang_StringFactory,java_lang_StringFactory)<SUB>771</SUB>> ]
+"2246" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>779</SUB>> ]
+"2114" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>759</SUB>> ]
+"2116" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>759</SUB>> ]
+"2132" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>760</SUB>> ]
+"2134" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>760</SUB>> ]
+"2187" [label = <(FIELD_IDENTIFIER,StringInitToStringFactory,StringInitToStringFactory)<SUB>770</SUB>> ]
+"2189" [label = <(&lt;operator&gt;.fieldAccess,jni::DecodeArtMethod)<SUB>770</SUB>> ]
+"2191" [label = <(FIELD_IDENTIFIER,DecodeArtMethod,DecodeArtMethod)<SUB>770</SUB>> ]
+"2097" [label = <(METHOD,NewObjectA)<SUB>758</SUB>> ]
+"2253" [label = <(METHOD_RETURN,jobject)<SUB>758</SUB>> ]
+  "2103" -> "2108" 
+  "2103" -> "2121" 
+  "2121" -> "2126" 
+  "2121" -> "2140" 
+  "2140" -> "2148" 
+  "2142" -> "2165" 
+  "2201" -> "2218" 
+  "2225" -> "2234" 
+  "2234" -> "2246" 
+  "2251" -> "2253" 
+  "2143" -> "2154" 
+  "2150" -> "2142" 
+  "2165" -> "2169" 
+  "2165" -> "2175" 
+  "2172" -> "2183" 
+  "2172" -> "2207" 
+  "2202" -> "2212" 
+  "2209" -> "2201" 
+  "2218" -> "2222" 
+  "2218" -> "2231" 
+  "2227" -> "2225" 
+  "2241" -> "2249" 
+  "2241" -> "2251" 
+  "2144" -> "2143" 
+  "2151" -> "2159" 
+  "2155" -> "2150" 
+  "2169" -> "2253" 
+  "2173" -> "2172" 
+  "2178" -> "2198" 
+  "2193" -> "2253" 
+  "2203" -> "2202" 
+  "2210" -> "2216" 
+  "2213" -> "2209" 
+  "2222" -> "2253" 
+  "2228" -> "2227" 
+  "2242" -> "2241" 
+  "2249" -> "2253" 
+  "2107" -> "2114" 
+  "2107" -> "2121" 
+  "2125" -> "2132" 
+  "2125" -> "2140" 
+  "2146" -> "2144" 
+  "2152" -> "2151" 
+  "2156" -> "2155" 
+  "2175" -> "2173" 
+  "2180" -> "2178" 
+  "2194" -> "2193" 
+  "2205" -> "2203" 
+  "2212" -> "2210" 
+  "2214" -> "2213" 
+  "2229" -> "2228" 
+  "2243" -> "2247" 
+  "2247" -> "2242" 
+  "2108" -> "2107" 
+  "2112" -> "2119" 
+  "2119" -> "2253" 
+  "2126" -> "2125" 
+  "2130" -> "2137" 
+  "2137" -> "2253" 
+  "2148" -> "2146" 
+  "2154" -> "2152" 
+  "2157" -> "2162" 
+  "2160" -> "2156" 
+  "2181" -> "2187" 
+  "2184" -> "2180" 
+  "2196" -> "2194" 
+  "2207" -> "2205" 
+  "2216" -> "2214" 
+  "2231" -> "2229" 
+  "2244" -> "2243" 
+  "2113" -> "2112" 
+  "2131" -> "2130" 
+  "2159" -> "2157" 
+  "2162" -> "2160" 
+  "2183" -> "2181" 
+  "2185" -> "2191" 
+  "2188" -> "2184" 
+  "2198" -> "2196" 
+  "2246" -> "2244" 
+  "2114" -> "2116" 
+  "2116" -> "2113" 
+  "2132" -> "2134" 
+  "2134" -> "2131" 
+  "2187" -> "2185" 
+  "2189" -> "2188" 
+  "2191" -> "2189" 
+  "2097" -> "2103" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/520-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/520-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/520-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/520-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "PrettyTypeOf" {  
-"18881" [label = <(METHOD,PrettyTypeOf)> ]
-"18884" [label = <(METHOD_RETURN,ANY)> ]
-  "18881" -> "18884" 
+digraph "GetRawData" {  
+"18533" [label = <(METHOD,GetRawData)> ]
+"18538" [label = <(METHOD_RETURN,ANY)> ]
+  "18533" -> "18538" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/521-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/521-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/521-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/521-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "AsArray" {  
-"18885" [label = <(METHOD,AsArray)> ]
-"18888" [label = <(METHOD_RETURN,ANY)> ]
-  "18885" -> "18888" 
+digraph "GetComponentSize" {  
+"18539" [label = <(METHOD,GetComponentSize)> ]
+"18542" [label = <(METHOD_RETURN,ANY)> ]
+  "18539" -> "18542" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/522-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/522-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/522-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/522-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT(java_array)" {  
-"18889" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(java_array))> ]
-"18894" [label = <(METHOD_RETURN,ANY)> ]
-  "18889" -> "18894" 
+digraph "GetPrimitiveArray&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;" {  
+"18543" [label = <(METHOD,GetPrimitiveArray&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;)> ]
+"18548" [label = <(METHOD_RETURN,ANY)> ]
+  "18543" -> "18548" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/523-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/523-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/523-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/523-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.arithmeticShiftRight" {  
-"18895" [label = <(METHOD,&lt;operator&gt;.arithmeticShiftRight)> ]
-"18899" [label = <(METHOD_RETURN,ANY)> ]
-  "18895" -> "18899" 
+digraph "GetPrimitiveArray&lt;jbyteArray,jbyte,mirror::ByteArray&gt;" {  
+"18549" [label = <(METHOD,GetPrimitiveArray&lt;jbyteArray,jbyte,mirror::ByteArray&gt;)> ]
+"18554" [label = <(METHOD_RETURN,ANY)> ]
+  "18549" -> "18554" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/524-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/524-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/524-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/524-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array)" {  
-"18900" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))> ]
-"18905" [label = <(METHOD_RETURN,ANY)> ]
-  "18900" -> "18905" 
+digraph "GetPrimitiveArray&lt;jcharArray,jchar,mirror::CharArray&gt;" {  
+"18555" [label = <(METHOD,GetPrimitiveArray&lt;jcharArray,jchar,mirror::CharArray&gt;)> ]
+"18560" [label = <(METHOD_RETURN,ANY)> ]
+  "18555" -> "18560" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/525-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/525-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/525-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/525-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "Ptr" {  
-"18906" [label = <(METHOD,Ptr)> ]
-"18909" [label = <(METHOD_RETURN,ANY)> ]
-  "18906" -> "18909" 
+digraph "GetPrimitiveArray&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;" {  
+"18561" [label = <(METHOD,GetPrimitiveArray&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;)> ]
+"18566" [label = <(METHOD_RETURN,ANY)> ]
+  "18561" -> "18566" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/526-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/526-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/526-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/526-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "NewPrimitiveArray&lt;jbooleanArray,mirror::BooleanArray&gt;" {  
-"18910" [label = <(METHOD,NewPrimitiveArray&lt;jbooleanArray,mirror::BooleanArray&gt;)> ]
-"18914" [label = <(METHOD_RETURN,ANY)> ]
-  "18910" -> "18914" 
+digraph "GetPrimitiveArray&lt;jfloatArray,jfloat,mirror::FloatArray&gt;" {  
+"18567" [label = <(METHOD,GetPrimitiveArray&lt;jfloatArray,jfloat,mirror::FloatArray&gt;)> ]
+"18572" [label = <(METHOD_RETURN,ANY)> ]
+  "18567" -> "18572" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/527-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/527-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/527-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/527-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "NewPrimitiveArray&lt;jbyteArray,mirror::ByteArray&gt;" {  
-"18915" [label = <(METHOD,NewPrimitiveArray&lt;jbyteArray,mirror::ByteArray&gt;)> ]
-"18919" [label = <(METHOD_RETURN,ANY)> ]
-  "18915" -> "18919" 
+digraph "GetPrimitiveArray&lt;jintArray,jint,mirror::IntArray&gt;" {  
+"18573" [label = <(METHOD,GetPrimitiveArray&lt;jintArray,jint,mirror::IntArray&gt;)> ]
+"18578" [label = <(METHOD_RETURN,ANY)> ]
+  "18573" -> "18578" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/528-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/528-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/528-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/528-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "NewPrimitiveArray&lt;jcharArray,mirror::CharArray&gt;" {  
-"18920" [label = <(METHOD,NewPrimitiveArray&lt;jcharArray,mirror::CharArray&gt;)> ]
-"18924" [label = <(METHOD_RETURN,ANY)> ]
-  "18920" -> "18924" 
+digraph "GetPrimitiveArray&lt;jlongArray,jlong,mirror::LongArray&gt;" {  
+"18579" [label = <(METHOD,GetPrimitiveArray&lt;jlongArray,jlong,mirror::LongArray&gt;)> ]
+"18584" [label = <(METHOD_RETURN,ANY)> ]
+  "18579" -> "18584" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/529-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/529-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/529-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/529-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "NewPrimitiveArray&lt;jdoubleArray,mirror::DoubleArray&gt;" {  
-"18925" [label = <(METHOD,NewPrimitiveArray&lt;jdoubleArray,mirror::DoubleArray&gt;)> ]
-"18929" [label = <(METHOD_RETURN,ANY)> ]
-  "18925" -> "18929" 
+digraph "GetPrimitiveArray&lt;jshortArray,jshort,mirror::ShortArray&gt;" {  
+"18585" [label = <(METHOD,GetPrimitiveArray&lt;jshortArray,jshort,mirror::ShortArray&gt;)> ]
+"18590" [label = <(METHOD_RETURN,ANY)> ]
+  "18585" -> "18590" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/53-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/53-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/53-cfg.dot	2023-06-07 19:33:45.367394695 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/53-cfg.dot	2023-06-07 19:33:51.947393991 +0330
@@ -1,139 +1,65 @@
-digraph "AllocObject" {  
-"1963" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_class))<SUB>786</SUB>> ]
-"1982" [label = <(soa,soa(env))<SUB>787</SUB>> ]
-"1984" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c = EnsureInitialized(soa.Self(), soa.Decode&lt;mirror::Class&gt;(java_class)))<SUB>788</SUB>> ]
-"2054" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(c-&gt;AllocObject(soa.Self()));,return soa.AddLocalReference&lt;jobject&gt;(c-&gt;AllocObject(soa.Self()));)<SUB>797</SUB>> ]
-"1985" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c)<SUB>788</SUB>> ]
-"1992" [label = <(EnsureInitialized,EnsureInitialized(soa.Self(), soa.Decode&lt;mirror::Class&gt;(java_class)))<SUB>788</SUB>> ]
-"2007" [label = <(&lt;operator&gt;.equals,c == nullptr)<SUB>789</SUB>> ]
-"2014" [label = <(IsStringClass,c-&gt;IsStringClass())<SUB>792</SUB>> ]
-"2055" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(c-&gt;AllocObject(soa.Self())))<SUB>797</SUB>> ]
-"1986" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>788</SUB>> ]
-"1993" [label = <(Self,soa.Self())<SUB>788</SUB>> ]
-"1997" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>788</SUB>> ]
-"2011" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>790</SUB>> ]
-"2015" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;IsStringClass)<SUB>792</SUB>> ]
-"2020" [label = <(&lt;operator&gt;.assignment,allocator_type = Runtime::Current()-&gt;GetHeap()-&gt;GetCurrentAllocator())<SUB>793</SUB>> ]
-"2032" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(mirror::String::AllocEmptyString&lt;true&gt;(soa.Self(),\012                                                                              allocator_type));,return soa.AddLocalReference&lt;jobject&gt;(mirror::String::AllocEmptyString&lt;true&gt;(soa.Self(),\012                                                                              allocator_type));)<SUB>794</SUB>> ]
-"2056" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>797</SUB>> ]
-"2061" [label = <(AllocObject,c-&gt;AllocObject(soa.Self()))<SUB>797</SUB>> ]
-"1967" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>786</SUB>> ]
-"1988" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>788</SUB>> ]
-"1994" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>788</SUB>> ]
-"1998" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>788</SUB>> ]
-"2017" [label = <(FIELD_IDENTIFIER,IsStringClass,IsStringClass)<SUB>792</SUB>> ]
-"2022" [label = <(GetCurrentAllocator,Runtime::Current()-&gt;GetHeap()-&gt;GetCurrentAllocator())<SUB>793</SUB>> ]
-"2033" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(mirror::String::AllocEmptyString&lt;true&gt;(soa.Self(),\012                                                                              allocator_type)))<SUB>794</SUB>> ]
-"2057" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>797</SUB>> ]
-"2062" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;AllocObject)<SUB>797</SUB>> ]
-"2065" [label = <(Self,soa.Self())<SUB>797</SUB>> ]
-"1968" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>786</SUB>> ]
-"1972" [label = <(CHECK_NON_NULL_ARGUMENT(java_class),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class == null&quot;))<SUB>786</SUB>> ]
-"1979" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_class),CHECK_NON_NULL_ARGUMENT(java_class))<SUB>786</SUB>> ]
-"1990" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>788</SUB>> ]
-"1996" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>788</SUB>> ]
-"1999" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>788</SUB>> ]
-"2002" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>788</SUB>> ]
-"2023" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetHeap()-&gt;GetCurrentAllocator)<SUB>793</SUB>> ]
-"2034" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>794</SUB>> ]
-"2039" [label = <(&lt;operator&gt;.greaterThan,mirror::String::AllocEmptyString&lt;true&gt;(soa.Self(),\012                                                                              allocator_type))<SUB>794</SUB>> ]
-"2059" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>797</SUB>> ]
-"2064" [label = <(FIELD_IDENTIFIER,AllocObject,AllocObject)<SUB>797</SUB>> ]
-"2066" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>797</SUB>> ]
-"1973" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>786</SUB>> ]
-"2001" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>788</SUB>> ]
-"2004" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>788</SUB>> ]
-"2024" [label = <(GetHeap,Runtime::Current()-&gt;GetHeap())<SUB>793</SUB>> ]
-"2031" [label = <(FIELD_IDENTIFIER,GetCurrentAllocator,GetCurrentAllocator)<SUB>793</SUB>> ]
-"2035" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>794</SUB>> ]
-"2040" [label = <(&lt;operator&gt;.lessThan,mirror::String::AllocEmptyString&lt;true)<SUB>794</SUB>> ]
-"2047" [label = <(&lt;operator&gt;.bracketedPrimary,(soa.Self(),\012                                                                              allocator_type))<SUB>794</SUB>> ]
-"2068" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>797</SUB>> ]
-"1974" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>786</SUB>> ]
-"1976" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>786</SUB>> ]
-"2025" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetHeap)<SUB>793</SUB>> ]
-"2037" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>794</SUB>> ]
-"2041" [label = <(&lt;operator&gt;.fieldAccess,mirror::String::AllocEmptyString)<SUB>794</SUB>> ]
-"2048" [label = <(&lt;operator&gt;.expressionList,soa.Self(),\012                                                                              allocator_type)<SUB>794</SUB>> ]
-"2026" [label = <(Runtime::Current,Runtime::Current())<SUB>793</SUB>> ]
-"2030" [label = <(FIELD_IDENTIFIER,GetHeap,GetHeap)<SUB>793</SUB>> ]
-"2042" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>794</SUB>> ]
-"2045" [label = <(FIELD_IDENTIFIER,AllocEmptyString,AllocEmptyString)<SUB>794</SUB>> ]
-"2049" [label = <(Self,soa.Self())<SUB>794</SUB>> ]
-"2027" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>793</SUB>> ]
-"2050" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>794</SUB>> ]
-"2029" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>793</SUB>> ]
-"2052" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>794</SUB>> ]
-"1959" [label = <(METHOD,AllocObject)<SUB>785</SUB>> ]
-"2069" [label = <(METHOD_RETURN,jobject)<SUB>785</SUB>> ]
-  "1963" -> "1968" 
-  "1963" -> "1982" 
-  "1982" -> "1990" 
-  "1984" -> "2007" 
-  "2054" -> "2069" 
-  "1985" -> "1996" 
-  "1992" -> "1984" 
-  "2007" -> "2011" 
-  "2007" -> "2017" 
-  "2014" -> "2029" 
-  "2014" -> "2059" 
-  "2055" -> "2054" 
-  "1986" -> "1985" 
-  "1993" -> "2001" 
-  "1997" -> "1992" 
-  "2011" -> "2069" 
-  "2015" -> "2014" 
-  "2020" -> "2037" 
-  "2032" -> "2069" 
-  "2056" -> "2064" 
-  "2061" -> "2055" 
-  "1967" -> "1974" 
-  "1967" -> "1982" 
-  "1988" -> "1986" 
-  "1994" -> "1993" 
-  "1998" -> "1997" 
-  "2017" -> "2015" 
-  "2022" -> "2020" 
-  "2033" -> "2032" 
-  "2057" -> "2056" 
-  "2062" -> "2068" 
-  "2065" -> "2061" 
-  "1968" -> "1967" 
-  "1972" -> "1979" 
-  "1979" -> "2069" 
-  "1990" -> "1988" 
-  "1996" -> "1994" 
-  "1999" -> "2004" 
-  "2002" -> "1998" 
-  "2023" -> "2022" 
-  "2034" -> "2042" 
-  "2039" -> "2033" 
-  "2059" -> "2057" 
-  "2064" -> "2062" 
-  "2066" -> "2065" 
-  "1973" -> "1972" 
-  "2001" -> "1999" 
-  "2004" -> "2002" 
-  "2024" -> "2031" 
-  "2031" -> "2023" 
-  "2035" -> "2034" 
-  "2040" -> "2052" 
-  "2047" -> "2039" 
-  "2068" -> "2066" 
-  "1974" -> "1976" 
-  "1976" -> "1973" 
-  "2025" -> "2024" 
-  "2037" -> "2035" 
-  "2041" -> "2040" 
-  "2048" -> "2047" 
-  "2026" -> "2030" 
-  "2030" -> "2025" 
-  "2042" -> "2045" 
-  "2045" -> "2041" 
-  "2049" -> "2048" 
-  "2027" -> "2026" 
-  "2050" -> "2049" 
-  "2029" -> "2027" 
-  "2052" -> "2050" 
-  "1959" -> "1963" 
+digraph "GetMethodID" {  
+"2261" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_class))<SUB>786</SUB>> ]
+"2279" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(name))<SUB>787</SUB>> ]
+"2297" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(sig))<SUB>788</SUB>> ]
+"2316" [label = <(soa,soa(env))<SUB>789</SUB>> ]
+"2318" [label = <(RETURN,return FindMethodID(soa, java_class, name, sig, false);,return FindMethodID(soa, java_class, name, sig, false);)<SUB>790</SUB>> ]
+"2319" [label = <(FindMethodID,FindMethodID(soa, java_class, name, sig, false))<SUB>790</SUB>> ]
+"2265" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>786</SUB>> ]
+"2283" [label = <(UNLIKELY,UNLIKELY((name) == nullptr))<SUB>787</SUB>> ]
+"2301" [label = <(UNLIKELY,UNLIKELY((sig) == nullptr))<SUB>788</SUB>> ]
+"2266" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>786</SUB>> ]
+"2270" [label = <(CHECK_NON_NULL_ARGUMENT(java_class),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class == null&quot;))<SUB>786</SUB>> ]
+"2277" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_class),CHECK_NON_NULL_ARGUMENT(java_class))<SUB>786</SUB>> ]
+"2284" [label = <(&lt;operator&gt;.equals,(name) == nullptr)<SUB>787</SUB>> ]
+"2288" [label = <(CHECK_NON_NULL_ARGUMENT(name),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;name == null&quot;))<SUB>787</SUB>> ]
+"2295" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(name),CHECK_NON_NULL_ARGUMENT(name))<SUB>787</SUB>> ]
+"2302" [label = <(&lt;operator&gt;.equals,(sig) == nullptr)<SUB>788</SUB>> ]
+"2306" [label = <(CHECK_NON_NULL_ARGUMENT(sig),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;sig == null&quot;))<SUB>788</SUB>> ]
+"2313" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(sig),CHECK_NON_NULL_ARGUMENT(sig))<SUB>788</SUB>> ]
+"2271" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>786</SUB>> ]
+"2289" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>787</SUB>> ]
+"2307" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>788</SUB>> ]
+"2272" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>786</SUB>> ]
+"2274" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>786</SUB>> ]
+"2290" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>787</SUB>> ]
+"2292" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>787</SUB>> ]
+"2308" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>788</SUB>> ]
+"2310" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>788</SUB>> ]
+"2255" [label = <(METHOD,GetMethodID)<SUB>785</SUB>> ]
+"2325" [label = <(METHOD_RETURN,jmethodID)<SUB>785</SUB>> ]
+  "2261" -> "2266" 
+  "2261" -> "2279" 
+  "2279" -> "2284" 
+  "2279" -> "2297" 
+  "2297" -> "2302" 
+  "2297" -> "2316" 
+  "2316" -> "2319" 
+  "2318" -> "2325" 
+  "2319" -> "2318" 
+  "2265" -> "2272" 
+  "2265" -> "2279" 
+  "2283" -> "2290" 
+  "2283" -> "2297" 
+  "2301" -> "2308" 
+  "2301" -> "2316" 
+  "2266" -> "2265" 
+  "2270" -> "2277" 
+  "2277" -> "2325" 
+  "2284" -> "2283" 
+  "2288" -> "2295" 
+  "2295" -> "2325" 
+  "2302" -> "2301" 
+  "2306" -> "2313" 
+  "2313" -> "2325" 
+  "2271" -> "2270" 
+  "2289" -> "2288" 
+  "2307" -> "2306" 
+  "2272" -> "2274" 
+  "2274" -> "2271" 
+  "2290" -> "2292" 
+  "2292" -> "2289" 
+  "2308" -> "2310" 
+  "2310" -> "2307" 
+  "2255" -> "2261" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/530-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/530-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/530-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/530-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "NewPrimitiveArray&lt;jfloatArray,mirror::FloatArray&gt;" {  
-"18930" [label = <(METHOD,NewPrimitiveArray&lt;jfloatArray,mirror::FloatArray&gt;)> ]
-"18934" [label = <(METHOD_RETURN,ANY)> ]
-  "18930" -> "18934" 
+digraph "ReleasePrimitiveArray&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;" {  
+"18591" [label = <(METHOD,ReleasePrimitiveArray&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;)> ]
+"18597" [label = <(METHOD_RETURN,ANY)> ]
+  "18591" -> "18597" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/531-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/531-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/531-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/531-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "NewPrimitiveArray&lt;jintArray,mirror::IntArray&gt;" {  
-"18935" [label = <(METHOD,NewPrimitiveArray&lt;jintArray,mirror::IntArray&gt;)> ]
-"18939" [label = <(METHOD_RETURN,ANY)> ]
-  "18935" -> "18939" 
+digraph "ReleasePrimitiveArray&lt;jbyteArray,jbyte,mirror::ByteArray&gt;" {  
+"18598" [label = <(METHOD,ReleasePrimitiveArray&lt;jbyteArray,jbyte,mirror::ByteArray&gt;)> ]
+"18604" [label = <(METHOD_RETURN,ANY)> ]
+  "18598" -> "18604" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/532-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/532-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/532-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/532-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "NewPrimitiveArray&lt;jlongArray,mirror::LongArray&gt;" {  
-"18940" [label = <(METHOD,NewPrimitiveArray&lt;jlongArray,mirror::LongArray&gt;)> ]
-"18944" [label = <(METHOD_RETURN,ANY)> ]
-  "18940" -> "18944" 
+digraph "ReleasePrimitiveArray&lt;jcharArray,jchar,mirror::CharArray&gt;" {  
+"18605" [label = <(METHOD,ReleasePrimitiveArray&lt;jcharArray,jchar,mirror::CharArray&gt;)> ]
+"18611" [label = <(METHOD_RETURN,ANY)> ]
+  "18605" -> "18611" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/533-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/533-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/533-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/533-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT(element_jclass)" {  
-"18945" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(element_jclass))> ]
-"18950" [label = <(METHOD_RETURN,ANY)> ]
-  "18945" -> "18950" 
+digraph "ReleasePrimitiveArray&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;" {  
+"18612" [label = <(METHOD,ReleasePrimitiveArray&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;)> ]
+"18618" [label = <(METHOD_RETURN,ANY)> ]
+  "18612" -> "18618" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/534-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/534-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/534-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/534-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "IsPrimitive" {  
-"18951" [label = <(METHOD,IsPrimitive)> ]
-"18954" [label = <(METHOD_RETURN,ANY)> ]
-  "18951" -> "18954" 
+digraph "ReleasePrimitiveArray&lt;jfloatArray,jfloat,mirror::FloatArray&gt;" {  
+"18619" [label = <(METHOD,ReleasePrimitiveArray&lt;jfloatArray,jfloat,mirror::FloatArray&gt;)> ]
+"18625" [label = <(METHOD_RETURN,ANY)> ]
+  "18619" -> "18625" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/535-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/535-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/535-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/535-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "PrettyDescriptor" {  
-"18955" [label = <(METHOD,PrettyDescriptor)> ]
-"18958" [label = <(METHOD_RETURN,ANY)> ]
-  "18955" -> "18958" 
+digraph "ReleasePrimitiveArray&lt;jintArray,jint,mirror::IntArray&gt;" {  
+"18626" [label = <(METHOD,ReleasePrimitiveArray&lt;jintArray,jint,mirror::IntArray&gt;)> ]
+"18632" [label = <(METHOD_RETURN,ANY)> ]
+  "18626" -> "18632" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/536-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/536-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/536-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/536-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "FindArrayClass" {  
-"18959" [label = <(METHOD,FindArrayClass)> ]
-"18964" [label = <(METHOD_RETURN,ANY)> ]
-  "18959" -> "18964" 
+digraph "ReleasePrimitiveArray&lt;jlongArray,jlong,mirror::LongArray&gt;" {  
+"18633" [label = <(METHOD,ReleasePrimitiveArray&lt;jlongArray,jlong,mirror::LongArray&gt;)> ]
+"18639" [label = <(METHOD_RETURN,ANY)> ]
+  "18633" -> "18639" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/537-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/537-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/537-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/537-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "::Alloc" {  
-"18965" [label = <(METHOD,::Alloc)> ]
-"18971" [label = <(METHOD_RETURN,ANY)> ]
-  "18965" -> "18971" 
+digraph "ReleasePrimitiveArray&lt;jshortArray,jshort,mirror::ShortArray&gt;" {  
+"18640" [label = <(METHOD,ReleasePrimitiveArray&lt;jshortArray,jshort,mirror::ShortArray&gt;)> ]
+"18646" [label = <(METHOD_RETURN,ANY)> ]
+  "18640" -> "18646" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/538-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/538-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/538-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/538-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "GetComponentType" {  
-"18972" [label = <(METHOD,GetComponentType)> ]
-"18975" [label = <(METHOD_RETURN,ANY)> ]
-  "18972" -> "18975" 
+digraph "GetPrimitiveArrayRegion&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;" {  
+"18647" [label = <(METHOD,GetPrimitiveArrayRegion&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;)> ]
+"18654" [label = <(METHOD_RETURN,ANY)> ]
+  "18647" -> "18654" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/539-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/539-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/539-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/539-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "mirror::Class::PrettyDescriptor" {  
-"18976" [label = <(METHOD,mirror::Class::PrettyDescriptor)> ]
-"18980" [label = <(METHOD_RETURN,ANY)> ]
-  "18976" -> "18980" 
+digraph "GetPrimitiveArrayRegion&lt;jbyteArray,jbyte,mirror::ByteArray&gt;" {  
+"18655" [label = <(METHOD,GetPrimitiveArrayRegion&lt;jbyteArray,jbyte,mirror::ByteArray&gt;)> ]
+"18662" [label = <(METHOD_RETURN,ANY)> ]
+  "18655" -> "18662" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/54-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/54-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/54-cfg.dot	2023-06-07 19:33:45.367394695 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/54-cfg.dot	2023-06-07 19:33:51.947393991 +0330
@@ -1,53 +1,65 @@
-digraph "NewObject" {  
-"2077" [label = <(va_start,va_start(args, mid))<SUB>802</SUB>> ]
-"2081" [label = <(free_args_later,free_args_later(&amp;args))<SUB>803</SUB>> ]
-"2084" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_class))<SUB>804</SUB>> ]
-"2102" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>805</SUB>> ]
-"2121" [label = <(&lt;operator&gt;.assignment,result = NewObjectV(env, java_class, mid, args))<SUB>806</SUB>> ]
-"2128" [label = <(RETURN,return result;,return result;)<SUB>807</SUB>> ]
-"2082" [label = <(&lt;operator&gt;.addressOf,&amp;args)<SUB>803</SUB>> ]
-"2123" [label = <(NewObjectV,NewObjectV(env, java_class, mid, args))<SUB>806</SUB>> ]
-"2088" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>804</SUB>> ]
-"2106" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>805</SUB>> ]
-"2089" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>804</SUB>> ]
-"2093" [label = <(CHECK_NON_NULL_ARGUMENT(java_class),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class == null&quot;))<SUB>804</SUB>> ]
-"2100" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_class),CHECK_NON_NULL_ARGUMENT(java_class))<SUB>804</SUB>> ]
-"2107" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>805</SUB>> ]
-"2111" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>805</SUB>> ]
-"2118" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>805</SUB>> ]
-"2094" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>804</SUB>> ]
-"2112" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>805</SUB>> ]
-"2095" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>804</SUB>> ]
-"2097" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>804</SUB>> ]
-"2113" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>805</SUB>> ]
-"2115" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>805</SUB>> ]
-"2071" [label = <(METHOD,NewObject)<SUB>800</SUB>> ]
-"2130" [label = <(METHOD_RETURN,jobject)<SUB>800</SUB>> ]
-  "2077" -> "2082" 
-  "2081" -> "2084" 
-  "2084" -> "2089" 
-  "2084" -> "2102" 
-  "2102" -> "2107" 
-  "2102" -> "2123" 
-  "2121" -> "2128" 
-  "2128" -> "2130" 
-  "2082" -> "2081" 
-  "2123" -> "2121" 
-  "2088" -> "2095" 
-  "2088" -> "2102" 
-  "2106" -> "2113" 
-  "2106" -> "2123" 
-  "2089" -> "2088" 
-  "2093" -> "2100" 
-  "2100" -> "2130" 
-  "2107" -> "2106" 
-  "2111" -> "2118" 
-  "2118" -> "2130" 
-  "2094" -> "2093" 
-  "2112" -> "2111" 
-  "2095" -> "2097" 
-  "2097" -> "2094" 
-  "2113" -> "2115" 
-  "2115" -> "2112" 
-  "2071" -> "2077" 
+digraph "GetStaticMethodID" {  
+"2333" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_class))<SUB>795</SUB>> ]
+"2351" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(name))<SUB>796</SUB>> ]
+"2369" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(sig))<SUB>797</SUB>> ]
+"2388" [label = <(soa,soa(env))<SUB>798</SUB>> ]
+"2390" [label = <(RETURN,return FindMethodID(soa, java_class, name, sig, true);,return FindMethodID(soa, java_class, name, sig, true);)<SUB>799</SUB>> ]
+"2391" [label = <(FindMethodID,FindMethodID(soa, java_class, name, sig, true))<SUB>799</SUB>> ]
+"2337" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>795</SUB>> ]
+"2355" [label = <(UNLIKELY,UNLIKELY((name) == nullptr))<SUB>796</SUB>> ]
+"2373" [label = <(UNLIKELY,UNLIKELY((sig) == nullptr))<SUB>797</SUB>> ]
+"2338" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>795</SUB>> ]
+"2342" [label = <(CHECK_NON_NULL_ARGUMENT(java_class),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class == null&quot;))<SUB>795</SUB>> ]
+"2349" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_class),CHECK_NON_NULL_ARGUMENT(java_class))<SUB>795</SUB>> ]
+"2356" [label = <(&lt;operator&gt;.equals,(name) == nullptr)<SUB>796</SUB>> ]
+"2360" [label = <(CHECK_NON_NULL_ARGUMENT(name),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;name == null&quot;))<SUB>796</SUB>> ]
+"2367" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(name),CHECK_NON_NULL_ARGUMENT(name))<SUB>796</SUB>> ]
+"2374" [label = <(&lt;operator&gt;.equals,(sig) == nullptr)<SUB>797</SUB>> ]
+"2378" [label = <(CHECK_NON_NULL_ARGUMENT(sig),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;sig == null&quot;))<SUB>797</SUB>> ]
+"2385" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(sig),CHECK_NON_NULL_ARGUMENT(sig))<SUB>797</SUB>> ]
+"2343" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>795</SUB>> ]
+"2361" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>796</SUB>> ]
+"2379" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>797</SUB>> ]
+"2344" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>795</SUB>> ]
+"2346" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>795</SUB>> ]
+"2362" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>796</SUB>> ]
+"2364" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>796</SUB>> ]
+"2380" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>797</SUB>> ]
+"2382" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>797</SUB>> ]
+"2327" [label = <(METHOD,GetStaticMethodID)<SUB>793</SUB>> ]
+"2397" [label = <(METHOD_RETURN,jmethodID)<SUB>793</SUB>> ]
+  "2333" -> "2338" 
+  "2333" -> "2351" 
+  "2351" -> "2356" 
+  "2351" -> "2369" 
+  "2369" -> "2374" 
+  "2369" -> "2388" 
+  "2388" -> "2391" 
+  "2390" -> "2397" 
+  "2391" -> "2390" 
+  "2337" -> "2344" 
+  "2337" -> "2351" 
+  "2355" -> "2362" 
+  "2355" -> "2369" 
+  "2373" -> "2380" 
+  "2373" -> "2388" 
+  "2338" -> "2337" 
+  "2342" -> "2349" 
+  "2349" -> "2397" 
+  "2356" -> "2355" 
+  "2360" -> "2367" 
+  "2367" -> "2397" 
+  "2374" -> "2373" 
+  "2378" -> "2385" 
+  "2385" -> "2397" 
+  "2343" -> "2342" 
+  "2361" -> "2360" 
+  "2379" -> "2378" 
+  "2344" -> "2346" 
+  "2346" -> "2343" 
+  "2362" -> "2364" 
+  "2364" -> "2361" 
+  "2380" -> "2382" 
+  "2382" -> "2379" 
+  "2327" -> "2333" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/540-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/540-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/540-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/540-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "NewPrimitiveArray&lt;jshortArray,mirror::ShortArray&gt;" {  
-"18981" [label = <(METHOD,NewPrimitiveArray&lt;jshortArray,mirror::ShortArray&gt;)> ]
-"18985" [label = <(METHOD_RETURN,ANY)> ]
-  "18981" -> "18985" 
+digraph "GetPrimitiveArrayRegion&lt;jcharArray,jchar,mirror::CharArray&gt;" {  
+"18663" [label = <(METHOD,GetPrimitiveArrayRegion&lt;jcharArray,jchar,mirror::CharArray&gt;)> ]
+"18670" [label = <(METHOD_RETURN,ANY)> ]
+  "18663" -> "18670" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/541-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/541-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/541-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/541-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "IsPrimitiveArray" {  
-"18986" [label = <(METHOD,IsPrimitiveArray)> ]
-"18989" [label = <(METHOD_RETURN,ANY)> ]
-  "18986" -> "18989" 
+digraph "GetPrimitiveArrayRegion&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;" {  
+"18671" [label = <(METHOD,GetPrimitiveArrayRegion&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;)> ]
+"18678" [label = <(METHOD_RETURN,ANY)> ]
+  "18671" -> "18678" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/542-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/542-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/542-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/542-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "GetRawData" {  
-"18990" [label = <(METHOD,GetRawData)> ]
-"18995" [label = <(METHOD_RETURN,ANY)> ]
-  "18990" -> "18995" 
+digraph "GetPrimitiveArrayRegion&lt;jfloatArray,jfloat,mirror::FloatArray&gt;" {  
+"18679" [label = <(METHOD,GetPrimitiveArrayRegion&lt;jfloatArray,jfloat,mirror::FloatArray&gt;)> ]
+"18686" [label = <(METHOD_RETURN,ANY)> ]
+  "18679" -> "18686" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/543-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/543-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/543-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/543-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "GetComponentSize" {  
-"18996" [label = <(METHOD,GetComponentSize)> ]
-"18999" [label = <(METHOD_RETURN,ANY)> ]
-  "18996" -> "18999" 
+digraph "GetPrimitiveArrayRegion&lt;jintArray,jint,mirror::IntArray&gt;" {  
+"18687" [label = <(METHOD,GetPrimitiveArrayRegion&lt;jintArray,jint,mirror::IntArray&gt;)> ]
+"18694" [label = <(METHOD_RETURN,ANY)> ]
+  "18687" -> "18694" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/544-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/544-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/544-cfg.dot	2023-06-07 19:33:45.567394672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/544-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "GetPrimitiveArray&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;" {  
-"19000" [label = <(METHOD,GetPrimitiveArray&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;)> ]
-"19005" [label = <(METHOD_RETURN,ANY)> ]
-  "19000" -> "19005" 
+digraph "GetPrimitiveArrayRegion&lt;jlongArray,jlong,mirror::LongArray&gt;" {  
+"18695" [label = <(METHOD,GetPrimitiveArrayRegion&lt;jlongArray,jlong,mirror::LongArray&gt;)> ]
+"18702" [label = <(METHOD_RETURN,ANY)> ]
+  "18695" -> "18702" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/545-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/545-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/545-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/545-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "GetPrimitiveArray&lt;jbyteArray,jbyte,mirror::ByteArray&gt;" {  
-"19006" [label = <(METHOD,GetPrimitiveArray&lt;jbyteArray,jbyte,mirror::ByteArray&gt;)> ]
-"19011" [label = <(METHOD_RETURN,ANY)> ]
-  "19006" -> "19011" 
+digraph "GetPrimitiveArrayRegion&lt;jshortArray,jshort,mirror::ShortArray&gt;" {  
+"18703" [label = <(METHOD,GetPrimitiveArrayRegion&lt;jshortArray,jshort,mirror::ShortArray&gt;)> ]
+"18710" [label = <(METHOD_RETURN,ANY)> ]
+  "18703" -> "18710" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/546-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/546-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/546-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/546-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "GetPrimitiveArray&lt;jcharArray,jchar,mirror::CharArray&gt;" {  
-"19012" [label = <(METHOD,GetPrimitiveArray&lt;jcharArray,jchar,mirror::CharArray&gt;)> ]
-"19017" [label = <(METHOD_RETURN,ANY)> ]
-  "19012" -> "19017" 
+digraph "SetPrimitiveArrayRegion&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;" {  
+"18711" [label = <(METHOD,SetPrimitiveArrayRegion&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;)> ]
+"18718" [label = <(METHOD_RETURN,ANY)> ]
+  "18711" -> "18718" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/547-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/547-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/547-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/547-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "GetPrimitiveArray&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;" {  
-"19018" [label = <(METHOD,GetPrimitiveArray&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;)> ]
-"19023" [label = <(METHOD_RETURN,ANY)> ]
-  "19018" -> "19023" 
+digraph "SetPrimitiveArrayRegion&lt;jbyteArray,jbyte,mirror::ByteArray&gt;" {  
+"18719" [label = <(METHOD,SetPrimitiveArrayRegion&lt;jbyteArray,jbyte,mirror::ByteArray&gt;)> ]
+"18726" [label = <(METHOD_RETURN,ANY)> ]
+  "18719" -> "18726" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/548-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/548-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/548-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/548-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "GetPrimitiveArray&lt;jfloatArray,jfloat,mirror::FloatArray&gt;" {  
-"19024" [label = <(METHOD,GetPrimitiveArray&lt;jfloatArray,jfloat,mirror::FloatArray&gt;)> ]
-"19029" [label = <(METHOD_RETURN,ANY)> ]
-  "19024" -> "19029" 
+digraph "SetPrimitiveArrayRegion&lt;jcharArray,jchar,mirror::CharArray&gt;" {  
+"18727" [label = <(METHOD,SetPrimitiveArrayRegion&lt;jcharArray,jchar,mirror::CharArray&gt;)> ]
+"18734" [label = <(METHOD_RETURN,ANY)> ]
+  "18727" -> "18734" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/549-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/549-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/549-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/549-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "GetPrimitiveArray&lt;jintArray,jint,mirror::IntArray&gt;" {  
-"19030" [label = <(METHOD,GetPrimitiveArray&lt;jintArray,jint,mirror::IntArray&gt;)> ]
-"19035" [label = <(METHOD_RETURN,ANY)> ]
-  "19030" -> "19035" 
+digraph "SetPrimitiveArrayRegion&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;" {  
+"18735" [label = <(METHOD,SetPrimitiveArrayRegion&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;)> ]
+"18742" [label = <(METHOD_RETURN,ANY)> ]
+  "18735" -> "18742" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/55-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/55-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/55-cfg.dot	2023-06-07 19:33:45.367394695 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/55-cfg.dot	2023-06-07 19:33:51.947393991 +0330
@@ -1,169 +1,69 @@
-digraph "NewObjectV" {  
-"2138" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_class))<SUB>811</SUB>> ]
-"2156" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>812</SUB>> ]
-"2175" [label = <(soa,soa(env))<SUB>813</SUB>> ]
-"2177" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c = EnsureInitialized(soa.Self(),\012                                                soa.Decode&lt;mirror::Class&gt;(java_class)))<SUB>814</SUB>> ]
-"2236" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; result = c-&gt;AllocObject(soa.Self()))<SUB>825</SUB>> ]
-"2260" [label = <(&lt;operator&gt;.assignment,local_result = soa.AddLocalReference&lt;jobject&gt;(result))<SUB>829</SUB>> ]
-"2269" [label = <(CallNonvirtualVoidMethodV,CallNonvirtualVoidMethodV(env, local_result, java_class, mid, args))<SUB>830</SUB>> ]
-"2286" [label = <(RETURN,return local_result;,return local_result;)<SUB>834</SUB>> ]
-"2178" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c)<SUB>814</SUB>> ]
-"2185" [label = <(EnsureInitialized,EnsureInitialized(soa.Self(),\012                                                soa.Decode&lt;mirror::Class&gt;(java_class)))<SUB>814</SUB>> ]
-"2200" [label = <(&lt;operator&gt;.equals,c == nullptr)<SUB>816</SUB>> ]
-"2207" [label = <(IsStringClass,c-&gt;IsStringClass())<SUB>819</SUB>> ]
-"2237" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; result)<SUB>825</SUB>> ]
-"2244" [label = <(AllocObject,c-&gt;AllocObject(soa.Self()))<SUB>825</SUB>> ]
-"2253" [label = <(&lt;operator&gt;.equals,result == nullptr)<SUB>826</SUB>> ]
-"2262" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result))<SUB>829</SUB>> ]
-"2276" [label = <(IsExceptionPending,soa.Self()-&gt;IsExceptionPending())<SUB>831</SUB>> ]
-"2179" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>814</SUB>> ]
-"2186" [label = <(Self,soa.Self())<SUB>814</SUB>> ]
-"2190" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>815</SUB>> ]
-"2204" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>817</SUB>> ]
-"2208" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;IsStringClass)<SUB>819</SUB>> ]
-"2213" [label = <(&lt;operator&gt;.assignment,sf_mid = jni::EncodeArtMethod(\012 WellKnownClasses::StringInitToStringFactory(jni::DecodeArtMethod(mid))))<SUB>821</SUB>> ]
-"2228" [label = <(RETURN,return CallStaticObjectMethodV(env, WellKnownClasses::java_lang_StringFactory, sf_mid, args);,return CallStaticObjectMethodV(env, WellKnownClasses::java_lang_StringFactory, sf_mid, args);)<SUB>823</SUB>> ]
-"2238" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>825</SUB>> ]
-"2245" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;AllocObject)<SUB>825</SUB>> ]
-"2248" [label = <(Self,soa.Self())<SUB>825</SUB>> ]
-"2257" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>827</SUB>> ]
-"2263" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>829</SUB>> ]
-"2277" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;IsExceptionPending)<SUB>831</SUB>> ]
-"2284" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>832</SUB>> ]
-"2142" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>811</SUB>> ]
-"2160" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>812</SUB>> ]
-"2181" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>814</SUB>> ]
-"2187" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>814</SUB>> ]
-"2191" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>815</SUB>> ]
-"2210" [label = <(FIELD_IDENTIFIER,IsStringClass,IsStringClass)<SUB>819</SUB>> ]
-"2215" [label = <(jni::EncodeArtMethod,jni::EncodeArtMethod(\012 WellKnownClasses::StringInitToStringFactory(jni::DecodeArtMethod(mid))))<SUB>821</SUB>> ]
-"2229" [label = <(CallStaticObjectMethodV,CallStaticObjectMethodV(env, WellKnownClasses::java_lang_StringFactory, sf_mid, args))<SUB>823</SUB>> ]
-"2240" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>825</SUB>> ]
-"2247" [label = <(FIELD_IDENTIFIER,AllocObject,AllocObject)<SUB>825</SUB>> ]
-"2249" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>825</SUB>> ]
-"2264" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>829</SUB>> ]
-"2278" [label = <(Self,soa.Self())<SUB>831</SUB>> ]
-"2282" [label = <(FIELD_IDENTIFIER,IsExceptionPending,IsExceptionPending)<SUB>831</SUB>> ]
-"2143" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>811</SUB>> ]
-"2147" [label = <(CHECK_NON_NULL_ARGUMENT(java_class),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class == null&quot;))<SUB>811</SUB>> ]
-"2154" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_class),CHECK_NON_NULL_ARGUMENT(java_class))<SUB>811</SUB>> ]
-"2161" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>812</SUB>> ]
-"2165" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>812</SUB>> ]
-"2172" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>812</SUB>> ]
-"2183" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>814</SUB>> ]
-"2189" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>814</SUB>> ]
-"2192" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>815</SUB>> ]
-"2195" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>815</SUB>> ]
-"2216" [label = <(&lt;operator&gt;.fieldAccess,jni::EncodeArtMethod)<SUB>821</SUB>> ]
-"2219" [label = <(WellKnownClasses::StringInitToStringFactory,WellKnownClasses::StringInitToStringFactory(jni::DecodeArtMethod(mid)))<SUB>822</SUB>> ]
-"2231" [label = <(&lt;operator&gt;.fieldAccess,WellKnownClasses::java_lang_StringFactory)<SUB>823</SUB>> ]
-"2242" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>825</SUB>> ]
-"2251" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>825</SUB>> ]
-"2266" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>829</SUB>> ]
-"2279" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>831</SUB>> ]
-"2148" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>811</SUB>> ]
-"2166" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>812</SUB>> ]
-"2194" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>815</SUB>> ]
-"2197" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>815</SUB>> ]
-"2218" [label = <(FIELD_IDENTIFIER,EncodeArtMethod,EncodeArtMethod)<SUB>821</SUB>> ]
-"2220" [label = <(&lt;operator&gt;.fieldAccess,WellKnownClasses::StringInitToStringFactory)<SUB>822</SUB>> ]
-"2223" [label = <(jni::DecodeArtMethod,jni::DecodeArtMethod(mid))<SUB>822</SUB>> ]
-"2233" [label = <(FIELD_IDENTIFIER,java_lang_StringFactory,java_lang_StringFactory)<SUB>823</SUB>> ]
-"2281" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>831</SUB>> ]
-"2149" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>811</SUB>> ]
-"2151" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>811</SUB>> ]
-"2167" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>812</SUB>> ]
-"2169" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>812</SUB>> ]
-"2222" [label = <(FIELD_IDENTIFIER,StringInitToStringFactory,StringInitToStringFactory)<SUB>822</SUB>> ]
-"2224" [label = <(&lt;operator&gt;.fieldAccess,jni::DecodeArtMethod)<SUB>822</SUB>> ]
-"2226" [label = <(FIELD_IDENTIFIER,DecodeArtMethod,DecodeArtMethod)<SUB>822</SUB>> ]
-"2132" [label = <(METHOD,NewObjectV)<SUB>810</SUB>> ]
-"2288" [label = <(METHOD_RETURN,jobject)<SUB>810</SUB>> ]
-  "2138" -> "2143" 
-  "2138" -> "2156" 
-  "2156" -> "2161" 
-  "2156" -> "2175" 
-  "2175" -> "2183" 
-  "2177" -> "2200" 
-  "2236" -> "2253" 
-  "2260" -> "2269" 
-  "2269" -> "2281" 
-  "2286" -> "2288" 
-  "2178" -> "2189" 
-  "2185" -> "2177" 
-  "2200" -> "2204" 
-  "2200" -> "2210" 
-  "2207" -> "2218" 
-  "2207" -> "2242" 
-  "2237" -> "2247" 
-  "2244" -> "2236" 
-  "2253" -> "2257" 
-  "2253" -> "2266" 
-  "2262" -> "2260" 
-  "2276" -> "2284" 
-  "2276" -> "2286" 
-  "2179" -> "2178" 
-  "2186" -> "2194" 
-  "2190" -> "2185" 
-  "2204" -> "2288" 
-  "2208" -> "2207" 
-  "2213" -> "2233" 
-  "2228" -> "2288" 
-  "2238" -> "2237" 
-  "2245" -> "2251" 
-  "2248" -> "2244" 
-  "2257" -> "2288" 
-  "2263" -> "2262" 
-  "2277" -> "2276" 
-  "2284" -> "2288" 
-  "2142" -> "2149" 
-  "2142" -> "2156" 
-  "2160" -> "2167" 
-  "2160" -> "2175" 
-  "2181" -> "2179" 
-  "2187" -> "2186" 
-  "2191" -> "2190" 
-  "2210" -> "2208" 
-  "2215" -> "2213" 
-  "2229" -> "2228" 
-  "2240" -> "2238" 
-  "2247" -> "2245" 
-  "2249" -> "2248" 
-  "2264" -> "2263" 
-  "2278" -> "2282" 
-  "2282" -> "2277" 
-  "2143" -> "2142" 
-  "2147" -> "2154" 
-  "2154" -> "2288" 
-  "2161" -> "2160" 
-  "2165" -> "2172" 
-  "2172" -> "2288" 
-  "2183" -> "2181" 
-  "2189" -> "2187" 
-  "2192" -> "2197" 
-  "2195" -> "2191" 
-  "2216" -> "2222" 
-  "2219" -> "2215" 
-  "2231" -> "2229" 
-  "2242" -> "2240" 
-  "2251" -> "2249" 
-  "2266" -> "2264" 
-  "2279" -> "2278" 
-  "2148" -> "2147" 
-  "2166" -> "2165" 
-  "2194" -> "2192" 
-  "2197" -> "2195" 
-  "2218" -> "2216" 
-  "2220" -> "2226" 
-  "2223" -> "2219" 
-  "2233" -> "2231" 
-  "2281" -> "2279" 
-  "2149" -> "2151" 
-  "2151" -> "2148" 
-  "2167" -> "2169" 
-  "2169" -> "2166" 
-  "2222" -> "2220" 
-  "2224" -> "2223" 
-  "2226" -> "2224" 
-  "2132" -> "2138" 
+digraph "CallObjectMethod" {  
+"2405" [label = <(va_start,va_start(ap, mid))<SUB>804</SUB>> ]
+"2409" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>805</SUB>> ]
+"2412" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(obj))<SUB>806</SUB>> ]
+"2430" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>807</SUB>> ]
+"2449" [label = <(soa,soa(env))<SUB>808</SUB>> ]
+"2452" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap)))<SUB>809</SUB>> ]
+"2458" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());)<SUB>810</SUB>> ]
+"2410" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>805</SUB>> ]
+"2453" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>809</SUB>> ]
+"2459" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>810</SUB>> ]
+"2460" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>810</SUB>> ]
+"2465" [label = <(GetL,result.GetL())<SUB>810</SUB>> ]
+"2416" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>806</SUB>> ]
+"2434" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>807</SUB>> ]
+"2461" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>810</SUB>> ]
+"2466" [label = <(&lt;operator&gt;.fieldAccess,result.GetL)<SUB>810</SUB>> ]
+"2417" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>806</SUB>> ]
+"2421" [label = <(CHECK_NON_NULL_ARGUMENT(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>806</SUB>> ]
+"2428" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(obj),CHECK_NON_NULL_ARGUMENT(obj))<SUB>806</SUB>> ]
+"2435" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>807</SUB>> ]
+"2439" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>807</SUB>> ]
+"2446" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>807</SUB>> ]
+"2463" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>810</SUB>> ]
+"2468" [label = <(FIELD_IDENTIFIER,GetL,GetL)<SUB>810</SUB>> ]
+"2422" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>806</SUB>> ]
+"2440" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>807</SUB>> ]
+"2423" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>806</SUB>> ]
+"2425" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>806</SUB>> ]
+"2441" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>807</SUB>> ]
+"2443" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>807</SUB>> ]
+"2399" [label = <(METHOD,CallObjectMethod)<SUB>802</SUB>> ]
+"2469" [label = <(METHOD_RETURN,jobject)<SUB>802</SUB>> ]
+  "2405" -> "2410" 
+  "2409" -> "2412" 
+  "2412" -> "2417" 
+  "2412" -> "2430" 
+  "2430" -> "2435" 
+  "2430" -> "2449" 
+  "2449" -> "2453" 
+  "2452" -> "2463" 
+  "2458" -> "2469" 
+  "2410" -> "2409" 
+  "2453" -> "2452" 
+  "2459" -> "2458" 
+  "2460" -> "2468" 
+  "2465" -> "2459" 
+  "2416" -> "2423" 
+  "2416" -> "2430" 
+  "2434" -> "2441" 
+  "2434" -> "2449" 
+  "2461" -> "2460" 
+  "2466" -> "2465" 
+  "2417" -> "2416" 
+  "2421" -> "2428" 
+  "2428" -> "2469" 
+  "2435" -> "2434" 
+  "2439" -> "2446" 
+  "2446" -> "2469" 
+  "2463" -> "2461" 
+  "2468" -> "2466" 
+  "2422" -> "2421" 
+  "2440" -> "2439" 
+  "2423" -> "2425" 
+  "2425" -> "2422" 
+  "2441" -> "2443" 
+  "2443" -> "2440" 
+  "2399" -> "2405" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/550-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/550-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/550-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/550-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "GetPrimitiveArray&lt;jlongArray,jlong,mirror::LongArray&gt;" {  
-"19036" [label = <(METHOD,GetPrimitiveArray&lt;jlongArray,jlong,mirror::LongArray&gt;)> ]
-"19041" [label = <(METHOD_RETURN,ANY)> ]
-  "19036" -> "19041" 
+digraph "SetPrimitiveArrayRegion&lt;jfloatArray,jfloat,mirror::FloatArray&gt;" {  
+"18743" [label = <(METHOD,SetPrimitiveArrayRegion&lt;jfloatArray,jfloat,mirror::FloatArray&gt;)> ]
+"18750" [label = <(METHOD_RETURN,ANY)> ]
+  "18743" -> "18750" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/551-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/551-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/551-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/551-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "GetPrimitiveArray&lt;jshortArray,jshort,mirror::ShortArray&gt;" {  
-"19042" [label = <(METHOD,GetPrimitiveArray&lt;jshortArray,jshort,mirror::ShortArray&gt;)> ]
-"19047" [label = <(METHOD_RETURN,ANY)> ]
-  "19042" -> "19047" 
+digraph "SetPrimitiveArrayRegion&lt;jintArray,jint,mirror::IntArray&gt;" {  
+"18751" [label = <(METHOD,SetPrimitiveArrayRegion&lt;jintArray,jint,mirror::IntArray&gt;)> ]
+"18758" [label = <(METHOD_RETURN,ANY)> ]
+  "18751" -> "18758" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/552-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/552-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/552-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/552-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "ReleasePrimitiveArray&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;" {  
-"19048" [label = <(METHOD,ReleasePrimitiveArray&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;)> ]
-"19054" [label = <(METHOD_RETURN,ANY)> ]
-  "19048" -> "19054" 
+digraph "SetPrimitiveArrayRegion&lt;jlongArray,jlong,mirror::LongArray&gt;" {  
+"18759" [label = <(METHOD,SetPrimitiveArrayRegion&lt;jlongArray,jlong,mirror::LongArray&gt;)> ]
+"18766" [label = <(METHOD_RETURN,ANY)> ]
+  "18759" -> "18766" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/553-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/553-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/553-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/553-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "ReleasePrimitiveArray&lt;jbyteArray,jbyte,mirror::ByteArray&gt;" {  
-"19055" [label = <(METHOD,ReleasePrimitiveArray&lt;jbyteArray,jbyte,mirror::ByteArray&gt;)> ]
-"19061" [label = <(METHOD_RETURN,ANY)> ]
-  "19055" -> "19061" 
+digraph "SetPrimitiveArrayRegion&lt;jshortArray,jshort,mirror::ShortArray&gt;" {  
+"18767" [label = <(METHOD,SetPrimitiveArrayRegion&lt;jshortArray,jshort,mirror::ShortArray&gt;)> ]
+"18774" [label = <(METHOD_RETURN,ANY)> ]
+  "18767" -> "18774" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/554-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/554-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/554-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/554-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "ReleasePrimitiveArray&lt;jcharArray,jchar,mirror::CharArray&gt;" {  
-"19062" [label = <(METHOD,ReleasePrimitiveArray&lt;jcharArray,jchar,mirror::CharArray&gt;)> ]
-"19068" [label = <(METHOD_RETURN,ANY)> ]
-  "19062" -> "19068" 
+digraph "CHECK_NON_NULL_ARGUMENT_FN_NAME" {  
+"18775" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_FN_NAME)<SUB>424</SUB>> ]
+"18780" [label = <(METHOD_RETURN,ANY)> ]
+  "18775" -> "18780" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/555-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/555-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/555-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/555-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "ReleasePrimitiveArray&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;" {  
-"19069" [label = <(METHOD,ReleasePrimitiveArray&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;)> ]
-"19075" [label = <(METHOD_RETURN,ANY)> ]
-  "19069" -> "19075" 
+digraph "CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, java_class, JNI_ERR)" {  
+"18781" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, java_class, JNI_ERR))> ]
+"18786" [label = <(METHOD_RETURN,ANY)> ]
+  "18781" -> "18786" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/556-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/556-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/556-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/556-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "ReleasePrimitiveArray&lt;jfloatArray,jfloat,mirror::FloatArray&gt;" {  
-"19076" [label = <(METHOD,ReleasePrimitiveArray&lt;jfloatArray,jfloat,mirror::FloatArray&gt;)> ]
-"19082" [label = <(METHOD_RETURN,ANY)> ]
-  "19076" -> "19082" 
+digraph "CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, methods, JNI_ERR)" {  
+"18787" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, methods, JNI_ERR))> ]
+"18792" [label = <(METHOD_RETURN,ANY)> ]
+  "18787" -> "18792" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/557-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/557-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/557-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/557-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "ReleasePrimitiveArray&lt;jintArray,jint,mirror::IntArray&gt;" {  
-"19083" [label = <(METHOD,ReleasePrimitiveArray&lt;jintArray,jint,mirror::IntArray&gt;)> ]
-"19089" [label = <(METHOD_RETURN,ANY)> ]
-  "19083" -> "19089" 
+digraph "IsCheckJniEnabled" {  
+"18793" [label = <(METHOD,IsCheckJniEnabled)> ]
+"18796" [label = <(METHOD_RETURN,ANY)> ]
+  "18793" -> "18796" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/558-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/558-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/558-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/558-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "ReleasePrimitiveArray&lt;jlongArray,jlong,mirror::LongArray&gt;" {  
-"19090" [label = <(METHOD,ReleasePrimitiveArray&lt;jlongArray,jlong,mirror::LongArray&gt;)> ]
-"19096" [label = <(METHOD_RETURN,ANY)> ]
-  "19090" -> "19096" 
+digraph "DumpClass" {  
+"18797" [label = <(METHOD,DumpClass)> ]
+"18802" [label = <(METHOD_RETURN,ANY)> ]
+  "18797" -> "18802" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/559-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/559-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/559-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/559-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "ReleasePrimitiveArray&lt;jshortArray,jshort,mirror::ShortArray&gt;" {  
-"19097" [label = <(METHOD,ReleasePrimitiveArray&lt;jshortArray,jshort,mirror::ShortArray&gt;)> ]
-"19103" [label = <(METHOD_RETURN,ANY)> ]
-  "19097" -> "19103" 
+digraph "LOG_STREAM" {  
+"18803" [label = <(METHOD,LOG_STREAM)> ]
+"18806" [label = <(METHOD_RETURN,ANY)> ]
+  "18803" -> "18806" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/56-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/56-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/56-cfg.dot	2023-06-07 19:33:45.367394695 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/56-cfg.dot	2023-06-07 19:33:51.957393992 +0330
@@ -1,169 +1,63 @@
-digraph "NewObjectA" {  
-"2296" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_class))<SUB>838</SUB>> ]
-"2314" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>839</SUB>> ]
-"2333" [label = <(soa,soa(env))<SUB>840</SUB>> ]
-"2335" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c = EnsureInitialized(soa.Self(),\012                                                soa.Decode&lt;mirror::Class&gt;(java_class)))<SUB>841</SUB>> ]
-"2394" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; result = c-&gt;AllocObject(soa.Self()))<SUB>852</SUB>> ]
-"2418" [label = <(&lt;operator&gt;.assignment,local_result = soa.AddLocalReference&lt;jobjectArray&gt;(result))<SUB>856</SUB>> ]
-"2427" [label = <(CallNonvirtualVoidMethodA,CallNonvirtualVoidMethodA(env, local_result, java_class, mid, args))<SUB>857</SUB>> ]
-"2444" [label = <(RETURN,return local_result;,return local_result;)<SUB>861</SUB>> ]
-"2336" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c)<SUB>841</SUB>> ]
-"2343" [label = <(EnsureInitialized,EnsureInitialized(soa.Self(),\012                                                soa.Decode&lt;mirror::Class&gt;(java_class)))<SUB>841</SUB>> ]
-"2358" [label = <(&lt;operator&gt;.equals,c == nullptr)<SUB>843</SUB>> ]
-"2365" [label = <(IsStringClass,c-&gt;IsStringClass())<SUB>846</SUB>> ]
-"2395" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; result)<SUB>852</SUB>> ]
-"2402" [label = <(AllocObject,c-&gt;AllocObject(soa.Self()))<SUB>852</SUB>> ]
-"2411" [label = <(&lt;operator&gt;.equals,result == nullptr)<SUB>853</SUB>> ]
-"2420" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobjectArray&gt;(result))<SUB>856</SUB>> ]
-"2434" [label = <(IsExceptionPending,soa.Self()-&gt;IsExceptionPending())<SUB>858</SUB>> ]
-"2337" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>841</SUB>> ]
-"2344" [label = <(Self,soa.Self())<SUB>841</SUB>> ]
-"2348" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>842</SUB>> ]
-"2362" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>844</SUB>> ]
-"2366" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;IsStringClass)<SUB>846</SUB>> ]
-"2371" [label = <(&lt;operator&gt;.assignment,sf_mid = jni::EncodeArtMethod(\012 WellKnownClasses::StringInitToStringFactory(jni::DecodeArtMethod(mid))))<SUB>848</SUB>> ]
-"2386" [label = <(RETURN,return CallStaticObjectMethodA(env, WellKnownClasses::java_lang_StringFactory, sf_mid, args);,return CallStaticObjectMethodA(env, WellKnownClasses::java_lang_StringFactory, sf_mid, args);)<SUB>850</SUB>> ]
-"2396" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>852</SUB>> ]
-"2403" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;AllocObject)<SUB>852</SUB>> ]
-"2406" [label = <(Self,soa.Self())<SUB>852</SUB>> ]
-"2415" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>854</SUB>> ]
-"2421" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobjectArray)<SUB>856</SUB>> ]
-"2435" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;IsExceptionPending)<SUB>858</SUB>> ]
-"2442" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>859</SUB>> ]
-"2300" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>838</SUB>> ]
-"2318" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>839</SUB>> ]
-"2339" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>841</SUB>> ]
-"2345" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>841</SUB>> ]
-"2349" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>842</SUB>> ]
-"2368" [label = <(FIELD_IDENTIFIER,IsStringClass,IsStringClass)<SUB>846</SUB>> ]
-"2373" [label = <(jni::EncodeArtMethod,jni::EncodeArtMethod(\012 WellKnownClasses::StringInitToStringFactory(jni::DecodeArtMethod(mid))))<SUB>848</SUB>> ]
-"2387" [label = <(CallStaticObjectMethodA,CallStaticObjectMethodA(env, WellKnownClasses::java_lang_StringFactory, sf_mid, args))<SUB>850</SUB>> ]
-"2398" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>852</SUB>> ]
-"2405" [label = <(FIELD_IDENTIFIER,AllocObject,AllocObject)<SUB>852</SUB>> ]
-"2407" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>852</SUB>> ]
-"2422" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>856</SUB>> ]
-"2436" [label = <(Self,soa.Self())<SUB>858</SUB>> ]
-"2440" [label = <(FIELD_IDENTIFIER,IsExceptionPending,IsExceptionPending)<SUB>858</SUB>> ]
-"2301" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>838</SUB>> ]
-"2305" [label = <(CHECK_NON_NULL_ARGUMENT(java_class),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class == null&quot;))<SUB>838</SUB>> ]
-"2312" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_class),CHECK_NON_NULL_ARGUMENT(java_class))<SUB>838</SUB>> ]
-"2319" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>839</SUB>> ]
-"2323" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>839</SUB>> ]
-"2330" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>839</SUB>> ]
-"2341" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>841</SUB>> ]
-"2347" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>841</SUB>> ]
-"2350" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>842</SUB>> ]
-"2353" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>842</SUB>> ]
-"2374" [label = <(&lt;operator&gt;.fieldAccess,jni::EncodeArtMethod)<SUB>848</SUB>> ]
-"2377" [label = <(WellKnownClasses::StringInitToStringFactory,WellKnownClasses::StringInitToStringFactory(jni::DecodeArtMethod(mid)))<SUB>849</SUB>> ]
-"2389" [label = <(&lt;operator&gt;.fieldAccess,WellKnownClasses::java_lang_StringFactory)<SUB>850</SUB>> ]
-"2400" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>852</SUB>> ]
-"2409" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>852</SUB>> ]
-"2424" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>856</SUB>> ]
-"2437" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>858</SUB>> ]
-"2306" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>838</SUB>> ]
-"2324" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>839</SUB>> ]
-"2352" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>842</SUB>> ]
-"2355" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>842</SUB>> ]
-"2376" [label = <(FIELD_IDENTIFIER,EncodeArtMethod,EncodeArtMethod)<SUB>848</SUB>> ]
-"2378" [label = <(&lt;operator&gt;.fieldAccess,WellKnownClasses::StringInitToStringFactory)<SUB>849</SUB>> ]
-"2381" [label = <(jni::DecodeArtMethod,jni::DecodeArtMethod(mid))<SUB>849</SUB>> ]
-"2391" [label = <(FIELD_IDENTIFIER,java_lang_StringFactory,java_lang_StringFactory)<SUB>850</SUB>> ]
-"2439" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>858</SUB>> ]
-"2307" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>838</SUB>> ]
-"2309" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>838</SUB>> ]
-"2325" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>839</SUB>> ]
-"2327" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>839</SUB>> ]
-"2380" [label = <(FIELD_IDENTIFIER,StringInitToStringFactory,StringInitToStringFactory)<SUB>849</SUB>> ]
-"2382" [label = <(&lt;operator&gt;.fieldAccess,jni::DecodeArtMethod)<SUB>849</SUB>> ]
-"2384" [label = <(FIELD_IDENTIFIER,DecodeArtMethod,DecodeArtMethod)<SUB>849</SUB>> ]
-"2290" [label = <(METHOD,NewObjectA)<SUB>837</SUB>> ]
-"2446" [label = <(METHOD_RETURN,jobject)<SUB>837</SUB>> ]
-  "2296" -> "2301" 
-  "2296" -> "2314" 
-  "2314" -> "2319" 
-  "2314" -> "2333" 
-  "2333" -> "2341" 
-  "2335" -> "2358" 
-  "2394" -> "2411" 
-  "2418" -> "2427" 
-  "2427" -> "2439" 
-  "2444" -> "2446" 
-  "2336" -> "2347" 
-  "2343" -> "2335" 
-  "2358" -> "2362" 
-  "2358" -> "2368" 
-  "2365" -> "2376" 
-  "2365" -> "2400" 
-  "2395" -> "2405" 
-  "2402" -> "2394" 
-  "2411" -> "2415" 
-  "2411" -> "2424" 
-  "2420" -> "2418" 
-  "2434" -> "2442" 
-  "2434" -> "2444" 
-  "2337" -> "2336" 
-  "2344" -> "2352" 
-  "2348" -> "2343" 
-  "2362" -> "2446" 
-  "2366" -> "2365" 
-  "2371" -> "2391" 
-  "2386" -> "2446" 
-  "2396" -> "2395" 
-  "2403" -> "2409" 
-  "2406" -> "2402" 
-  "2415" -> "2446" 
-  "2421" -> "2420" 
-  "2435" -> "2434" 
-  "2442" -> "2446" 
-  "2300" -> "2307" 
-  "2300" -> "2314" 
-  "2318" -> "2325" 
-  "2318" -> "2333" 
-  "2339" -> "2337" 
-  "2345" -> "2344" 
-  "2349" -> "2348" 
-  "2368" -> "2366" 
-  "2373" -> "2371" 
-  "2387" -> "2386" 
-  "2398" -> "2396" 
-  "2405" -> "2403" 
-  "2407" -> "2406" 
-  "2422" -> "2421" 
-  "2436" -> "2440" 
-  "2440" -> "2435" 
-  "2301" -> "2300" 
-  "2305" -> "2312" 
-  "2312" -> "2446" 
-  "2319" -> "2318" 
-  "2323" -> "2330" 
-  "2330" -> "2446" 
-  "2341" -> "2339" 
-  "2347" -> "2345" 
-  "2350" -> "2355" 
-  "2353" -> "2349" 
-  "2374" -> "2380" 
-  "2377" -> "2373" 
-  "2389" -> "2387" 
-  "2400" -> "2398" 
-  "2409" -> "2407" 
-  "2424" -> "2422" 
-  "2437" -> "2436" 
-  "2306" -> "2305" 
-  "2324" -> "2323" 
-  "2352" -> "2350" 
-  "2355" -> "2353" 
-  "2376" -> "2374" 
-  "2378" -> "2384" 
-  "2381" -> "2377" 
-  "2391" -> "2389" 
-  "2439" -> "2437" 
-  "2307" -> "2309" 
-  "2309" -> "2306" 
-  "2325" -> "2327" 
-  "2327" -> "2324" 
-  "2380" -> "2378" 
-  "2382" -> "2381" 
-  "2384" -> "2382" 
-  "2290" -> "2296" 
+digraph "CallObjectMethodV" {  
+"2477" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(obj))<SUB>814</SUB>> ]
+"2495" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>815</SUB>> ]
+"2514" [label = <(soa,soa(env))<SUB>816</SUB>> ]
+"2517" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args)))<SUB>817</SUB>> ]
+"2523" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());)<SUB>818</SUB>> ]
+"2518" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>817</SUB>> ]
+"2524" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>818</SUB>> ]
+"2525" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>818</SUB>> ]
+"2530" [label = <(GetL,result.GetL())<SUB>818</SUB>> ]
+"2481" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>814</SUB>> ]
+"2499" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>815</SUB>> ]
+"2526" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>818</SUB>> ]
+"2531" [label = <(&lt;operator&gt;.fieldAccess,result.GetL)<SUB>818</SUB>> ]
+"2482" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>814</SUB>> ]
+"2486" [label = <(CHECK_NON_NULL_ARGUMENT(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>814</SUB>> ]
+"2493" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(obj),CHECK_NON_NULL_ARGUMENT(obj))<SUB>814</SUB>> ]
+"2500" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>815</SUB>> ]
+"2504" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>815</SUB>> ]
+"2511" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>815</SUB>> ]
+"2528" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>818</SUB>> ]
+"2533" [label = <(FIELD_IDENTIFIER,GetL,GetL)<SUB>818</SUB>> ]
+"2487" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>814</SUB>> ]
+"2505" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>815</SUB>> ]
+"2488" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>814</SUB>> ]
+"2490" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>814</SUB>> ]
+"2506" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>815</SUB>> ]
+"2508" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>815</SUB>> ]
+"2471" [label = <(METHOD,CallObjectMethodV)<SUB>813</SUB>> ]
+"2534" [label = <(METHOD_RETURN,jobject)<SUB>813</SUB>> ]
+  "2477" -> "2482" 
+  "2477" -> "2495" 
+  "2495" -> "2500" 
+  "2495" -> "2514" 
+  "2514" -> "2518" 
+  "2517" -> "2528" 
+  "2523" -> "2534" 
+  "2518" -> "2517" 
+  "2524" -> "2523" 
+  "2525" -> "2533" 
+  "2530" -> "2524" 
+  "2481" -> "2488" 
+  "2481" -> "2495" 
+  "2499" -> "2506" 
+  "2499" -> "2514" 
+  "2526" -> "2525" 
+  "2531" -> "2530" 
+  "2482" -> "2481" 
+  "2486" -> "2493" 
+  "2493" -> "2534" 
+  "2500" -> "2499" 
+  "2504" -> "2511" 
+  "2511" -> "2534" 
+  "2528" -> "2526" 
+  "2533" -> "2531" 
+  "2487" -> "2486" 
+  "2505" -> "2504" 
+  "2488" -> "2490" 
+  "2490" -> "2487" 
+  "2506" -> "2508" 
+  "2508" -> "2505" 
+  "2471" -> "2477" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/560-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/560-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/560-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/560-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "GetPrimitiveArrayRegion&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;" {  
-"19104" [label = <(METHOD,GetPrimitiveArrayRegion&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;)> ]
-"19111" [label = <(METHOD_RETURN,ANY)> ]
-  "19104" -> "19111" 
+digraph "ToModifiedUtf8" {  
+"18807" [label = <(METHOD,ToModifiedUtf8)> ]
+"18810" [label = <(METHOD_RETURN,ANY)> ]
+  "18807" -> "18810" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/561-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/561-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/561-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/561-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "GetPrimitiveArrayRegion&lt;jbyteArray,jbyte,mirror::ByteArray&gt;" {  
-"19112" [label = <(METHOD,GetPrimitiveArrayRegion&lt;jbyteArray,jbyte,mirror::ByteArray&gt;)> ]
-"19119" [label = <(METHOD_RETURN,ANY)> ]
-  "19112" -> "19119" 
+digraph "GetLocation" {  
+"18811" [label = <(METHOD,GetLocation)> ]
+"18814" [label = <(METHOD_RETURN,ANY)> ]
+  "18811" -> "18814" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/562-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/562-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/562-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/562-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "GetPrimitiveArrayRegion&lt;jcharArray,jchar,mirror::CharArray&gt;" {  
-"19120" [label = <(METHOD,GetPrimitiveArrayRegion&lt;jcharArray,jchar,mirror::CharArray&gt;)> ]
-"19127" [label = <(METHOD_RETURN,ANY)> ]
-  "19120" -> "19127" 
+digraph "GetDexCache" {  
+"18815" [label = <(METHOD,GetDexCache)> ]
+"18818" [label = <(METHOD_RETURN,ANY)> ]
+  "18815" -> "18818" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/563-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/563-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/563-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/563-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "GetPrimitiveArrayRegion&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;" {  
-"19128" [label = <(METHOD,GetPrimitiveArrayRegion&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;)> ]
-"19135" [label = <(METHOD_RETURN,ANY)> ]
-  "19128" -> "19135" 
+digraph "IsNative" {  
+"18819" [label = <(METHOD,IsNative)> ]
+"18822" [label = <(METHOD_RETURN,ANY)> ]
+  "18819" -> "18822" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/564-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/564-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/564-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/564-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "GetPrimitiveArrayRegion&lt;jfloatArray,jfloat,mirror::FloatArray&gt;" {  
-"19136" [label = <(METHOD,GetPrimitiveArrayRegion&lt;jfloatArray,jfloat,mirror::FloatArray&gt;)> ]
-"19143" [label = <(METHOD_RETURN,ANY)> ]
-  "19136" -> "19143" 
+digraph "VLOG" {  
+"18823" [label = <(METHOD,VLOG)> ]
+"18826" [label = <(METHOD_RETURN,ANY)> ]
+  "18823" -> "18826" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/565-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/565-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/565-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/565-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "GetPrimitiveArrayRegion&lt;jintArray,jint,mirror::IntArray&gt;" {  
-"19144" [label = <(METHOD,GetPrimitiveArrayRegion&lt;jintArray,jint,mirror::IntArray&gt;)> ]
-"19151" [label = <(METHOD_RETURN,ANY)> ]
-  "19144" -> "19151" 
+digraph "PrettyMethod" {  
+"18827" [label = <(METHOD,PrettyMethod)> ]
+"18830" [label = <(METHOD_RETURN,ANY)> ]
+  "18827" -> "18830" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/566-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/566-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/566-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/566-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "GetPrimitiveArrayRegion&lt;jlongArray,jlong,mirror::LongArray&gt;" {  
-"19152" [label = <(METHOD,GetPrimitiveArrayRegion&lt;jlongArray,jlong,mirror::LongArray&gt;)> ]
-"19159" [label = <(METHOD_RETURN,ANY)> ]
-  "19152" -> "19159" 
+digraph "RegisterNative" {  
+"18831" [label = <(METHOD,RegisterNative)> ]
+"18835" [label = <(METHOD_RETURN,ANY)> ]
+  "18831" -> "18835" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/567-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/567-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/567-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/567-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "GetPrimitiveArrayRegion&lt;jshortArray,jshort,mirror::ShortArray&gt;" {  
-"19160" [label = <(METHOD,GetPrimitiveArrayRegion&lt;jshortArray,jshort,mirror::ShortArray&gt;)> ]
-"19167" [label = <(METHOD_RETURN,ANY)> ]
-  "19160" -> "19167" 
+digraph "UNUSED" {  
+"18836" [label = <(METHOD,UNUSED)> ]
+"18839" [label = <(METHOD_RETURN,ANY)> ]
+  "18836" -> "18839" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/568-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/568-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/568-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/568-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "SetPrimitiveArrayRegion&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;" {  
-"19168" [label = <(METHOD,SetPrimitiveArrayRegion&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;)> ]
-"19175" [label = <(METHOD_RETURN,ANY)> ]
-  "19168" -> "19175" 
+digraph "CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_ERR)" {  
+"18840" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_ERR))> ]
+"18845" [label = <(METHOD_RETURN,ANY)> ]
+  "18840" -> "18845" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/569-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/569-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/569-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/569-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "SetPrimitiveArrayRegion&lt;jbyteArray,jbyte,mirror::ByteArray&gt;" {  
-"19176" [label = <(METHOD,SetPrimitiveArrayRegion&lt;jbyteArray,jbyte,mirror::ByteArray&gt;)> ]
-"19183" [label = <(METHOD_RETURN,ANY)> ]
-  "19176" -> "19183" 
+digraph "mirror::Class::PrettyClass" {  
+"18846" [label = <(METHOD,mirror::Class::PrettyClass)> ]
+"18850" [label = <(METHOD_RETURN,ANY)> ]
+  "18846" -> "18850" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/57-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/57-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/57-cfg.dot	2023-06-07 19:33:45.367394695 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/57-cfg.dot	2023-06-07 19:33:51.957393992 +0330
@@ -1,65 +1,63 @@
-digraph "GetMethodID" {  
-"2454" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_class))<SUB>865</SUB>> ]
-"2472" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(name))<SUB>866</SUB>> ]
-"2490" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(sig))<SUB>867</SUB>> ]
-"2509" [label = <(soa,soa(env))<SUB>868</SUB>> ]
-"2511" [label = <(RETURN,return FindMethodID(soa, java_class, name, sig, false);,return FindMethodID(soa, java_class, name, sig, false);)<SUB>869</SUB>> ]
-"2512" [label = <(FindMethodID,FindMethodID(soa, java_class, name, sig, false))<SUB>869</SUB>> ]
-"2458" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>865</SUB>> ]
-"2476" [label = <(UNLIKELY,UNLIKELY((name) == nullptr))<SUB>866</SUB>> ]
-"2494" [label = <(UNLIKELY,UNLIKELY((sig) == nullptr))<SUB>867</SUB>> ]
-"2459" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>865</SUB>> ]
-"2463" [label = <(CHECK_NON_NULL_ARGUMENT(java_class),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class == null&quot;))<SUB>865</SUB>> ]
-"2470" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_class),CHECK_NON_NULL_ARGUMENT(java_class))<SUB>865</SUB>> ]
-"2477" [label = <(&lt;operator&gt;.equals,(name) == nullptr)<SUB>866</SUB>> ]
-"2481" [label = <(CHECK_NON_NULL_ARGUMENT(name),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;name == null&quot;))<SUB>866</SUB>> ]
-"2488" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(name),CHECK_NON_NULL_ARGUMENT(name))<SUB>866</SUB>> ]
-"2495" [label = <(&lt;operator&gt;.equals,(sig) == nullptr)<SUB>867</SUB>> ]
-"2499" [label = <(CHECK_NON_NULL_ARGUMENT(sig),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;sig == null&quot;))<SUB>867</SUB>> ]
-"2506" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(sig),CHECK_NON_NULL_ARGUMENT(sig))<SUB>867</SUB>> ]
-"2464" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>865</SUB>> ]
-"2482" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>866</SUB>> ]
-"2500" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>867</SUB>> ]
-"2465" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>865</SUB>> ]
-"2467" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>865</SUB>> ]
-"2483" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>866</SUB>> ]
-"2485" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>866</SUB>> ]
-"2501" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>867</SUB>> ]
-"2503" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>867</SUB>> ]
-"2448" [label = <(METHOD,GetMethodID)<SUB>864</SUB>> ]
-"2518" [label = <(METHOD_RETURN,jmethodID)<SUB>864</SUB>> ]
-  "2454" -> "2459" 
-  "2454" -> "2472" 
-  "2472" -> "2477" 
-  "2472" -> "2490" 
-  "2490" -> "2495" 
-  "2490" -> "2509" 
-  "2509" -> "2512" 
-  "2511" -> "2518" 
-  "2512" -> "2511" 
-  "2458" -> "2465" 
-  "2458" -> "2472" 
-  "2476" -> "2483" 
-  "2476" -> "2490" 
-  "2494" -> "2501" 
-  "2494" -> "2509" 
-  "2459" -> "2458" 
-  "2463" -> "2470" 
-  "2470" -> "2518" 
-  "2477" -> "2476" 
-  "2481" -> "2488" 
-  "2488" -> "2518" 
-  "2495" -> "2494" 
-  "2499" -> "2506" 
-  "2506" -> "2518" 
-  "2464" -> "2463" 
-  "2482" -> "2481" 
-  "2500" -> "2499" 
-  "2465" -> "2467" 
-  "2467" -> "2464" 
-  "2483" -> "2485" 
-  "2485" -> "2482" 
-  "2501" -> "2503" 
-  "2503" -> "2500" 
-  "2448" -> "2454" 
+digraph "CallObjectMethodA" {  
+"2542" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(obj))<SUB>822</SUB>> ]
+"2560" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>823</SUB>> ]
+"2579" [label = <(soa,soa(env))<SUB>824</SUB>> ]
+"2582" [label = <(result,result(InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args)))<SUB>825</SUB>> ]
+"2588" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());)<SUB>826</SUB>> ]
+"2583" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>825</SUB>> ]
+"2589" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>826</SUB>> ]
+"2590" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>826</SUB>> ]
+"2595" [label = <(GetL,result.GetL())<SUB>826</SUB>> ]
+"2546" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>822</SUB>> ]
+"2564" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>823</SUB>> ]
+"2591" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>826</SUB>> ]
+"2596" [label = <(&lt;operator&gt;.fieldAccess,result.GetL)<SUB>826</SUB>> ]
+"2547" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>822</SUB>> ]
+"2551" [label = <(CHECK_NON_NULL_ARGUMENT(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>822</SUB>> ]
+"2558" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(obj),CHECK_NON_NULL_ARGUMENT(obj))<SUB>822</SUB>> ]
+"2565" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>823</SUB>> ]
+"2569" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>823</SUB>> ]
+"2576" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>823</SUB>> ]
+"2593" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>826</SUB>> ]
+"2598" [label = <(FIELD_IDENTIFIER,GetL,GetL)<SUB>826</SUB>> ]
+"2552" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>822</SUB>> ]
+"2570" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>823</SUB>> ]
+"2553" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>822</SUB>> ]
+"2555" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>822</SUB>> ]
+"2571" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>823</SUB>> ]
+"2573" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>823</SUB>> ]
+"2536" [label = <(METHOD,CallObjectMethodA)<SUB>821</SUB>> ]
+"2599" [label = <(METHOD_RETURN,jobject)<SUB>821</SUB>> ]
+  "2542" -> "2547" 
+  "2542" -> "2560" 
+  "2560" -> "2565" 
+  "2560" -> "2579" 
+  "2579" -> "2583" 
+  "2582" -> "2593" 
+  "2588" -> "2599" 
+  "2583" -> "2582" 
+  "2589" -> "2588" 
+  "2590" -> "2598" 
+  "2595" -> "2589" 
+  "2546" -> "2553" 
+  "2546" -> "2560" 
+  "2564" -> "2571" 
+  "2564" -> "2579" 
+  "2591" -> "2590" 
+  "2596" -> "2595" 
+  "2547" -> "2546" 
+  "2551" -> "2558" 
+  "2558" -> "2599" 
+  "2565" -> "2564" 
+  "2569" -> "2576" 
+  "2576" -> "2599" 
+  "2593" -> "2591" 
+  "2598" -> "2596" 
+  "2552" -> "2551" 
+  "2570" -> "2569" 
+  "2553" -> "2555" 
+  "2555" -> "2552" 
+  "2571" -> "2573" 
+  "2573" -> "2570" 
+  "2536" -> "2542" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/570-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/570-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/570-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/570-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "SetPrimitiveArrayRegion&lt;jcharArray,jchar,mirror::CharArray&gt;" {  
-"19184" [label = <(METHOD,SetPrimitiveArrayRegion&lt;jcharArray,jchar,mirror::CharArray&gt;)> ]
-"19191" [label = <(METHOD_RETURN,ANY)> ]
-  "19184" -> "19191" 
+digraph "GetMethods" {  
+"18851" [label = <(METHOD,GetMethods)> ]
+"18855" [label = <(METHOD_RETURN,ANY)> ]
+  "18851" -> "18855" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/571-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/571-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/571-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/571-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "SetPrimitiveArrayRegion&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;" {  
-"19192" [label = <(METHOD,SetPrimitiveArrayRegion&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;)> ]
-"19199" [label = <(METHOD_RETURN,ANY)> ]
-  "19192" -> "19199" 
+digraph "UnregisterNative" {  
+"18856" [label = <(METHOD,UnregisterNative)> ]
+"18859" [label = <(METHOD_RETURN,ANY)> ]
+  "18856" -> "18859" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/572-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/572-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/572-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/572-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "SetPrimitiveArrayRegion&lt;jfloatArray,jfloat,mirror::FloatArray&gt;" {  
-"19200" [label = <(METHOD,SetPrimitiveArrayRegion&lt;jfloatArray,jfloat,mirror::FloatArray&gt;)> ]
-"19207" [label = <(METHOD_RETURN,ANY)> ]
-  "19200" -> "19207" 
+digraph "&lt;operator&gt;.postIncrement" {  
+"18860" [label = <(METHOD,&lt;operator&gt;.postIncrement)> ]
+"18863" [label = <(METHOD_RETURN,ANY)> ]
+  "18860" -> "18863" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/573-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/573-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/573-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/573-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "SetPrimitiveArrayRegion&lt;jintArray,jint,mirror::IntArray&gt;" {  
-"19208" [label = <(METHOD,SetPrimitiveArrayRegion&lt;jintArray,jint,mirror::IntArray&gt;)> ]
-"19215" [label = <(METHOD_RETURN,ANY)> ]
-  "19208" -> "19215" 
+digraph "CHECK_NON_NULL_ARGUMENT_RETURN(vm, JNI_ERR)" {  
+"18864" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN(vm, JNI_ERR))> ]
+"18869" [label = <(METHOD_RETURN,ANY)> ]
+  "18864" -> "18869" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/574-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/574-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/574-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/574-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "SetPrimitiveArrayRegion&lt;jlongArray,jlong,mirror::LongArray&gt;" {  
-"19216" [label = <(METHOD,SetPrimitiveArrayRegion&lt;jlongArray,jlong,mirror::LongArray&gt;)> ]
-"19223" [label = <(METHOD_RETURN,ANY)> ]
-  "19216" -> "19223" 
+digraph "GetJavaVM" {  
+"18870" [label = <(METHOD,GetJavaVM)> ]
+"18873" [label = <(METHOD_RETURN,ANY)> ]
+  "18870" -> "18873" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/575-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/575-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/575-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/575-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "SetPrimitiveArrayRegion&lt;jshortArray,jshort,mirror::ShortArray&gt;" {  
-"19224" [label = <(METHOD,SetPrimitiveArrayRegion&lt;jshortArray,jshort,mirror::ShortArray&gt;)> ]
-"19231" [label = <(METHOD_RETURN,ANY)> ]
-  "19224" -> "19231" 
+digraph "NewObject" {  
+"18874" [label = <(METHOD,NewObject)> ]
+"18879" [label = <(METHOD_RETURN,ANY)> ]
+  "18874" -> "18879" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/576-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/576-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/576-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/576-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_FN_NAME" {  
-"19232" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_FN_NAME)<SUB>503</SUB>> ]
-"19237" [label = <(METHOD_RETURN,ANY)> ]
-  "19232" -> "19237" 
+digraph "GetLongField" {  
+"18880" [label = <(METHOD,GetLongField)> ]
+"18885" [label = <(METHOD_RETURN,ANY)> ]
+  "18880" -> "18885" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/577-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/577-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/577-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/577-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, java_class, JNI_ERR)" {  
-"19238" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, java_class, JNI_ERR))> ]
-"19243" [label = <(METHOD_RETURN,ANY)> ]
-  "19238" -> "19243" 
+digraph "GetIntField" {  
+"18886" [label = <(METHOD,GetIntField)> ]
+"18891" [label = <(METHOD_RETURN,ANY)> ]
+  "18886" -> "18891" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/578-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/578-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/578-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/578-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, methods, JNI_ERR)" {  
-"19244" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, methods, JNI_ERR))> ]
-"19249" [label = <(METHOD_RETURN,ANY)> ]
-  "19244" -> "19249" 
+digraph "ArtT::Alloc" {  
+"18892" [label = <(METHOD,ArtT::Alloc)> ]
+"18897" [label = <(METHOD_RETURN,ANY)> ]
+  "18892" -> "18897" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/579-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/579-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/579-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/579-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "IsCheckJniEnabled" {  
-"19250" [label = <(METHOD,IsCheckJniEnabled)> ]
-"19253" [label = <(METHOD_RETURN,ANY)> ]
-  "19250" -> "19253" 
+digraph "DecodeAndCheckArrayType&lt;ArrayT,ElementT,ArtArrayT&gt;" {  
+"18898" [label = <(METHOD,DecodeAndCheckArrayType&lt;ArrayT,ElementT,ArtArrayT&gt;)> ]
+"18904" [label = <(METHOD_RETURN,ANY)> ]
+  "18898" -> "18904" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/58-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/58-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/58-cfg.dot	2023-06-07 19:33:45.367394695 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/58-cfg.dot	2023-06-07 19:33:51.957393992 +0330
@@ -1,65 +1,61 @@
-digraph "GetStaticMethodID" {  
-"2526" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_class))<SUB>874</SUB>> ]
-"2544" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(name))<SUB>875</SUB>> ]
-"2562" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(sig))<SUB>876</SUB>> ]
-"2581" [label = <(soa,soa(env))<SUB>877</SUB>> ]
-"2583" [label = <(RETURN,return FindMethodID(soa, java_class, name, sig, true);,return FindMethodID(soa, java_class, name, sig, true);)<SUB>878</SUB>> ]
-"2584" [label = <(FindMethodID,FindMethodID(soa, java_class, name, sig, true))<SUB>878</SUB>> ]
-"2530" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>874</SUB>> ]
-"2548" [label = <(UNLIKELY,UNLIKELY((name) == nullptr))<SUB>875</SUB>> ]
-"2566" [label = <(UNLIKELY,UNLIKELY((sig) == nullptr))<SUB>876</SUB>> ]
-"2531" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>874</SUB>> ]
-"2535" [label = <(CHECK_NON_NULL_ARGUMENT(java_class),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class == null&quot;))<SUB>874</SUB>> ]
-"2542" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_class),CHECK_NON_NULL_ARGUMENT(java_class))<SUB>874</SUB>> ]
-"2549" [label = <(&lt;operator&gt;.equals,(name) == nullptr)<SUB>875</SUB>> ]
-"2553" [label = <(CHECK_NON_NULL_ARGUMENT(name),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;name == null&quot;))<SUB>875</SUB>> ]
-"2560" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(name),CHECK_NON_NULL_ARGUMENT(name))<SUB>875</SUB>> ]
-"2567" [label = <(&lt;operator&gt;.equals,(sig) == nullptr)<SUB>876</SUB>> ]
-"2571" [label = <(CHECK_NON_NULL_ARGUMENT(sig),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;sig == null&quot;))<SUB>876</SUB>> ]
-"2578" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(sig),CHECK_NON_NULL_ARGUMENT(sig))<SUB>876</SUB>> ]
-"2536" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>874</SUB>> ]
-"2554" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>875</SUB>> ]
-"2572" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>876</SUB>> ]
-"2537" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>874</SUB>> ]
-"2539" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>874</SUB>> ]
-"2555" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>875</SUB>> ]
-"2557" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>875</SUB>> ]
-"2573" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>876</SUB>> ]
-"2575" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>876</SUB>> ]
-"2520" [label = <(METHOD,GetStaticMethodID)<SUB>872</SUB>> ]
-"2590" [label = <(METHOD_RETURN,jmethodID)<SUB>872</SUB>> ]
-  "2526" -> "2531" 
-  "2526" -> "2544" 
-  "2544" -> "2549" 
-  "2544" -> "2562" 
-  "2562" -> "2567" 
-  "2562" -> "2581" 
-  "2581" -> "2584" 
-  "2583" -> "2590" 
-  "2584" -> "2583" 
-  "2530" -> "2537" 
-  "2530" -> "2544" 
-  "2548" -> "2555" 
-  "2548" -> "2562" 
-  "2566" -> "2573" 
-  "2566" -> "2581" 
-  "2531" -> "2530" 
-  "2535" -> "2542" 
-  "2542" -> "2590" 
-  "2549" -> "2548" 
-  "2553" -> "2560" 
-  "2560" -> "2590" 
-  "2567" -> "2566" 
-  "2571" -> "2578" 
-  "2578" -> "2590" 
-  "2536" -> "2535" 
-  "2554" -> "2553" 
-  "2572" -> "2571" 
-  "2537" -> "2539" 
-  "2539" -> "2536" 
-  "2555" -> "2557" 
-  "2557" -> "2554" 
-  "2573" -> "2575" 
-  "2575" -> "2572" 
-  "2520" -> "2526" 
+digraph "CallBooleanMethod" {  
+"2607" [label = <(va_start,va_start(ap, mid))<SUB>831</SUB>> ]
+"2611" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>832</SUB>> ]
+"2614" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>833</SUB>> ]
+"2632" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>834</SUB>> ]
+"2651" [label = <(soa,soa(env))<SUB>835</SUB>> ]
+"2654" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap)))<SUB>836</SUB>> ]
+"2660" [label = <(RETURN,return result.GetZ();,return result.GetZ();)<SUB>837</SUB>> ]
+"2612" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>832</SUB>> ]
+"2655" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>836</SUB>> ]
+"2661" [label = <(GetZ,result.GetZ())<SUB>837</SUB>> ]
+"2662" [label = <(&lt;operator&gt;.fieldAccess,result.GetZ)<SUB>837</SUB>> ]
+"2618" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>833</SUB>> ]
+"2636" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>834</SUB>> ]
+"2664" [label = <(FIELD_IDENTIFIER,GetZ,GetZ)<SUB>837</SUB>> ]
+"2619" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>833</SUB>> ]
+"2623" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>833</SUB>> ]
+"2630" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>833</SUB>> ]
+"2637" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>834</SUB>> ]
+"2641" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>834</SUB>> ]
+"2648" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>834</SUB>> ]
+"2624" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>833</SUB>> ]
+"2642" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>834</SUB>> ]
+"2625" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>833</SUB>> ]
+"2627" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>833</SUB>> ]
+"2643" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>834</SUB>> ]
+"2645" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>834</SUB>> ]
+"2601" [label = <(METHOD,CallBooleanMethod)<SUB>829</SUB>> ]
+"2665" [label = <(METHOD_RETURN,jboolean)<SUB>829</SUB>> ]
+  "2607" -> "2612" 
+  "2611" -> "2614" 
+  "2614" -> "2619" 
+  "2614" -> "2632" 
+  "2632" -> "2637" 
+  "2632" -> "2651" 
+  "2651" -> "2655" 
+  "2654" -> "2664" 
+  "2660" -> "2665" 
+  "2612" -> "2611" 
+  "2655" -> "2654" 
+  "2661" -> "2660" 
+  "2662" -> "2661" 
+  "2618" -> "2625" 
+  "2618" -> "2632" 
+  "2636" -> "2643" 
+  "2636" -> "2651" 
+  "2664" -> "2662" 
+  "2619" -> "2618" 
+  "2623" -> "2630" 
+  "2630" -> "2665" 
+  "2637" -> "2636" 
+  "2641" -> "2648" 
+  "2648" -> "2665" 
+  "2624" -> "2623" 
+  "2642" -> "2641" 
+  "2625" -> "2627" 
+  "2627" -> "2624" 
+  "2643" -> "2645" 
+  "2645" -> "2642" 
+  "2601" -> "2607" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/580-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/580-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/580-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/580-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "DumpClass" {  
-"19254" [label = <(METHOD,DumpClass)> ]
-"19259" [label = <(METHOD_RETURN,ANY)> ]
-  "19254" -> "19259" 
+digraph "GetData" {  
+"18905" [label = <(METHOD,GetData)> ]
+"18908" [label = <(METHOD_RETURN,ANY)> ]
+  "18905" -> "18908" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/581-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/581-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/581-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/581-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "LOG_STREAM" {  
-"19260" [label = <(METHOD,LOG_STREAM)> ]
-"19263" [label = <(METHOD_RETURN,ANY)> ]
-  "19260" -> "19263" 
+digraph "DecodeAndCheckArrayType&lt;JArrayT,ElementT,ArtArrayT&gt;" {  
+"18909" [label = <(METHOD,DecodeAndCheckArrayType&lt;JArrayT,ElementT,ArtArrayT&gt;)> ]
+"18915" [label = <(METHOD_RETURN,ANY)> ]
+  "18909" -> "18915" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/582-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/582-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/582-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/582-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "ToModifiedUtf8" {  
-"19264" [label = <(METHOD,ToModifiedUtf8)> ]
-"19267" [label = <(METHOD_RETURN,ANY)> ]
-  "19264" -> "19267" 
+digraph "&lt;operator&gt;.arrayInitializer" {  
+"18916" [label = <(METHOD,&lt;operator&gt;.arrayInitializer)> ]
+"18921" [label = <(METHOD_RETURN,ANY)> ]
+  "18916" -> "18921" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/583-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/583-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/583-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/583-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "GetLocation" {  
-"19268" [label = <(METHOD,GetLocation)> ]
-"19271" [label = <(METHOD_RETURN,ANY)> ]
-  "19268" -> "19271" 
+digraph "UNREACHABLE" {  
+"18922" [label = <(METHOD,UNREACHABLE)> ]
+"18924" [label = <(METHOD_RETURN,ANY)> ]
+  "18922" -> "18924" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/584-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/584-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/584-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/584-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "GetDexCache" {  
-"19272" [label = <(METHOD,GetDexCache)> ]
-"19275" [label = <(METHOD_RETURN,ANY)> ]
-  "19272" -> "19275" 
+digraph "CommonCompilerTest::SetUp" {  
+"18925" [label = <(METHOD,CommonCompilerTest::SetUp)> ]
+"18928" [label = <(METHOD_RETURN,ANY)> ]
+  "18925" -> "18928" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/585-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/585-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/585-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/585-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "IsNative" {  
-"19276" [label = <(METHOD,IsNative)> ]
-"19279" [label = <(METHOD_RETURN,ANY)> ]
-  "19276" -> "19279" 
+digraph "AttachCurrentThread" {  
+"18929" [label = <(METHOD,AttachCurrentThread)> ]
+"18934" [label = <(METHOD_RETURN,ANY)> ]
+  "18929" -> "18934" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/586-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/586-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/586-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/586-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "VLOG" {  
-"19280" [label = <(METHOD,VLOG)> ]
-"19283" [label = <(METHOD_RETURN,ANY)> ]
-  "19280" -> "19283" 
+digraph "aioobe" {  
+"18935" [label = <(METHOD,aioobe)> ]
+"18939" [label = <(METHOD_RETURN,ANY)> ]
+  "18935" -> "18939" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/587-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/587-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/587-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/587-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "PrettyMethod" {  
-"19284" [label = <(METHOD,PrettyMethod)> ]
-"19287" [label = <(METHOD_RETURN,ANY)> ]
-  "19284" -> "19287" 
+digraph "NewGlobalRef" {  
+"18940" [label = <(METHOD,NewGlobalRef)> ]
+"18945" [label = <(METHOD_RETURN,ANY)> ]
+  "18940" -> "18945" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/588-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/588-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/588-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/588-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "RegisterNative" {  
-"19288" [label = <(METHOD,RegisterNative)> ]
-"19292" [label = <(METHOD_RETURN,ANY)> ]
-  "19288" -> "19292" 
+digraph "ase" {  
+"18946" [label = <(METHOD,ase)> ]
+"18950" [label = <(METHOD_RETURN,ANY)> ]
+  "18946" -> "18950" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/589-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/589-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/589-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/589-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "UNUSED" {  
-"19293" [label = <(METHOD,UNUSED)> ]
-"19296" [label = <(METHOD_RETURN,ANY)> ]
-  "19293" -> "19296" 
+digraph "sioobe" {  
+"18951" [label = <(METHOD,sioobe)> ]
+"18955" [label = <(METHOD_RETURN,ANY)> ]
+  "18951" -> "18955" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/59-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/59-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/59-cfg.dot	2023-06-07 19:33:45.367394695 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/59-cfg.dot	2023-06-07 19:33:51.957393992 +0330
@@ -1,69 +1,53 @@
-digraph "CallObjectMethod" {  
-"2598" [label = <(va_start,va_start(ap, mid))<SUB>883</SUB>> ]
-"2602" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>884</SUB>> ]
-"2605" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(obj))<SUB>885</SUB>> ]
-"2623" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>886</SUB>> ]
-"2642" [label = <(soa,soa(env))<SUB>887</SUB>> ]
-"2645" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap)))<SUB>888</SUB>> ]
-"2651" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());)<SUB>889</SUB>> ]
-"2603" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>884</SUB>> ]
-"2646" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>888</SUB>> ]
-"2652" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>889</SUB>> ]
-"2653" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>889</SUB>> ]
-"2658" [label = <(GetL,result.GetL())<SUB>889</SUB>> ]
-"2609" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>885</SUB>> ]
-"2627" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>886</SUB>> ]
-"2654" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>889</SUB>> ]
-"2659" [label = <(&lt;operator&gt;.fieldAccess,result.GetL)<SUB>889</SUB>> ]
-"2610" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>885</SUB>> ]
-"2614" [label = <(CHECK_NON_NULL_ARGUMENT(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>885</SUB>> ]
-"2621" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(obj),CHECK_NON_NULL_ARGUMENT(obj))<SUB>885</SUB>> ]
-"2628" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>886</SUB>> ]
-"2632" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>886</SUB>> ]
-"2639" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>886</SUB>> ]
-"2656" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>889</SUB>> ]
-"2661" [label = <(FIELD_IDENTIFIER,GetL,GetL)<SUB>889</SUB>> ]
-"2615" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>885</SUB>> ]
-"2633" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>886</SUB>> ]
-"2616" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>885</SUB>> ]
-"2618" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>885</SUB>> ]
-"2634" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>886</SUB>> ]
-"2636" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>886</SUB>> ]
-"2592" [label = <(METHOD,CallObjectMethod)<SUB>881</SUB>> ]
-"2662" [label = <(METHOD_RETURN,jobject)<SUB>881</SUB>> ]
-  "2598" -> "2603" 
-  "2602" -> "2605" 
-  "2605" -> "2610" 
-  "2605" -> "2623" 
-  "2623" -> "2628" 
-  "2623" -> "2642" 
-  "2642" -> "2646" 
-  "2645" -> "2656" 
-  "2651" -> "2662" 
-  "2603" -> "2602" 
-  "2646" -> "2645" 
-  "2652" -> "2651" 
-  "2653" -> "2661" 
-  "2658" -> "2652" 
-  "2609" -> "2616" 
-  "2609" -> "2623" 
-  "2627" -> "2634" 
-  "2627" -> "2642" 
-  "2654" -> "2653" 
-  "2659" -> "2658" 
-  "2610" -> "2609" 
-  "2614" -> "2621" 
-  "2621" -> "2662" 
-  "2628" -> "2627" 
-  "2632" -> "2639" 
-  "2639" -> "2662" 
-  "2656" -> "2654" 
-  "2661" -> "2659" 
-  "2615" -> "2614" 
-  "2633" -> "2632" 
-  "2616" -> "2618" 
-  "2618" -> "2615" 
-  "2634" -> "2636" 
-  "2636" -> "2633" 
-  "2592" -> "2598" 
+digraph "CallBooleanMethodV" {  
+"2673" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>841</SUB>> ]
+"2691" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>842</SUB>> ]
+"2710" [label = <(soa,soa(env))<SUB>843</SUB>> ]
+"2712" [label = <(RETURN,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetZ();,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetZ();)<SUB>844</SUB>> ]
+"2713" [label = <(GetZ,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetZ())<SUB>844</SUB>> ]
+"2714" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetZ)<SUB>844</SUB>> ]
+"2677" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>841</SUB>> ]
+"2695" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>842</SUB>> ]
+"2715" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>844</SUB>> ]
+"2720" [label = <(FIELD_IDENTIFIER,GetZ,GetZ)<SUB>844</SUB>> ]
+"2678" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>841</SUB>> ]
+"2682" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>841</SUB>> ]
+"2689" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>841</SUB>> ]
+"2696" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>842</SUB>> ]
+"2700" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>842</SUB>> ]
+"2707" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>842</SUB>> ]
+"2683" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>841</SUB>> ]
+"2701" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>842</SUB>> ]
+"2684" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>841</SUB>> ]
+"2686" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>841</SUB>> ]
+"2702" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>842</SUB>> ]
+"2704" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>842</SUB>> ]
+"2667" [label = <(METHOD,CallBooleanMethodV)<SUB>840</SUB>> ]
+"2721" [label = <(METHOD_RETURN,jboolean)<SUB>840</SUB>> ]
+  "2673" -> "2678" 
+  "2673" -> "2691" 
+  "2691" -> "2696" 
+  "2691" -> "2710" 
+  "2710" -> "2715" 
+  "2712" -> "2721" 
+  "2713" -> "2712" 
+  "2714" -> "2713" 
+  "2677" -> "2684" 
+  "2677" -> "2691" 
+  "2695" -> "2702" 
+  "2695" -> "2710" 
+  "2715" -> "2720" 
+  "2720" -> "2714" 
+  "2678" -> "2677" 
+  "2682" -> "2689" 
+  "2689" -> "2721" 
+  "2696" -> "2695" 
+  "2700" -> "2707" 
+  "2707" -> "2721" 
+  "2683" -> "2682" 
+  "2701" -> "2700" 
+  "2684" -> "2686" 
+  "2686" -> "2683" 
+  "2702" -> "2704" 
+  "2704" -> "2701" 
+  "2667" -> "2673" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/590-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/590-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/590-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/590-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_ERR)" {  
-"19297" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_ERR))> ]
-"19302" [label = <(METHOD_RETURN,ANY)> ]
-  "19297" -> "19302" 
+digraph "EXPECT_TRUE" {  
+"18956" [label = <(METHOD,EXPECT_TRUE)> ]
+"18959" [label = <(METHOD_RETURN,ANY)> ]
+  "18956" -> "18959" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/591-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/591-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/591-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/591-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "mirror::Class::PrettyClass" {  
-"19303" [label = <(METHOD,mirror::Class::PrettyClass)> ]
-"19307" [label = <(METHOD_RETURN,ANY)> ]
-  "19303" -> "19307" 
+digraph "ExceptionCheck" {  
+"18960" [label = <(METHOD,ExceptionCheck)> ]
+"18963" [label = <(METHOD_RETURN,ANY)> ]
+  "18960" -> "18963" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/592-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/592-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/592-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/592-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "GetMethods" {  
-"19308" [label = <(METHOD,GetMethods)> ]
-"19312" [label = <(METHOD_RETURN,ANY)> ]
-  "19308" -> "19312" 
+digraph "ExceptionOccurred" {  
+"18964" [label = <(METHOD,ExceptionOccurred)> ]
+"18967" [label = <(METHOD_RETURN,ANY)> ]
+  "18964" -> "18967" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/593-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/593-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/593-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/593-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "UnregisterNative" {  
-"19313" [label = <(METHOD,UnregisterNative)> ]
-"19316" [label = <(METHOD_RETURN,ANY)> ]
-  "19313" -> "19316" 
+digraph "EXPECT_NE" {  
+"18968" [label = <(METHOD,EXPECT_NE)> ]
+"18972" [label = <(METHOD_RETURN,ANY)> ]
+  "18968" -> "18972" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/594-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/594-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/594-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/594-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.postIncrement" {  
-"19317" [label = <(METHOD,&lt;operator&gt;.postIncrement)> ]
-"19320" [label = <(METHOD_RETURN,ANY)> ]
-  "19317" -> "19320" 
+digraph "ExceptionClear" {  
+"18973" [label = <(METHOD,ExceptionClear)> ]
+"18976" [label = <(METHOD_RETURN,ANY)> ]
+  "18973" -> "18976" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/595-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/595-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/595-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/595-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_RETURN(vm, JNI_ERR)" {  
-"19321" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN(vm, JNI_ERR))> ]
-"19326" [label = <(METHOD_RETURN,ANY)> ]
-  "19321" -> "19326" 
+digraph "IsInstanceOf" {  
+"18977" [label = <(METHOD,IsInstanceOf)> ]
+"18982" [label = <(METHOD_RETURN,ANY)> ]
+  "18977" -> "18982" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/596-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/596-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/596-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/596-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "GetJavaVM" {  
-"19327" [label = <(METHOD,GetJavaVM)> ]
-"19330" [label = <(METHOD_RETURN,ANY)> ]
-  "19327" -> "19330" 
+digraph "FindPrimitiveClass" {  
+"18983" [label = <(METHOD,FindPrimitiveClass)> ]
+"18987" [label = <(METHOD_RETURN,ANY)> ]
+  "18983" -> "18987" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/597-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/597-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/597-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/597-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "NewObject" {  
-"19331" [label = <(METHOD,NewObject)> ]
-"19336" [label = <(METHOD_RETURN,ANY)> ]
-  "19331" -> "19336" 
+digraph "EXPECT_FALSE" {  
+"18988" [label = <(METHOD,EXPECT_FALSE)> ]
+"18991" [label = <(METHOD_RETURN,ANY)> ]
+  "18988" -> "18991" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/598-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/598-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/598-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/598-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "GetLongField" {  
-"19337" [label = <(METHOD,GetLongField)> ]
-"19342" [label = <(METHOD_RETURN,ANY)> ]
-  "19337" -> "19342" 
+digraph "EXPECT_EQ" {  
+"18992" [label = <(METHOD,EXPECT_EQ)> ]
+"18996" [label = <(METHOD_RETURN,ANY)> ]
+  "18992" -> "18996" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/599-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/599-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/599-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/599-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "GetIntField" {  
-"19343" [label = <(METHOD,GetIntField)> ]
-"19348" [label = <(METHOD_RETURN,ANY)> ]
-  "19343" -> "19348" 
+digraph "Check" {  
+"18997" [label = <(METHOD,Check)> ]
+"19001" [label = <(METHOD_RETURN,ANY)> ]
+  "18997" -> "19001" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/6-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/6-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/6-cfg.dot	2023-06-07 19:33:45.327394699 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/6-cfg.dot	2023-06-07 19:33:51.917393996 +0330
@@ -1,5 +1,5 @@
-digraph "ScopedVAArgs" {  
-"35" [label = <(METHOD,ScopedVAArgs)<SUB>73</SUB>> ]
-"38" [label = <(METHOD_RETURN,ANY)<SUB>73</SUB>> ]
-  "35" -> "38" 
+digraph "NotifySetPrimitiveField" {  
+"59" [label = <(METHOD,NotifySetPrimitiveField)<SUB>129</SUB>> ]
+"64" [label = <(METHOD_RETURN,void)<SUB>129</SUB>> ]
+  "59" -> "64" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/60-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/60-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/60-cfg.dot	2023-06-07 19:33:45.367394695 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/60-cfg.dot	2023-06-07 19:33:51.957393992 +0330
@@ -1,63 +1,53 @@
-digraph "CallObjectMethodV" {  
-"2670" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(obj))<SUB>893</SUB>> ]
-"2688" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>894</SUB>> ]
-"2707" [label = <(soa,soa(env))<SUB>895</SUB>> ]
-"2710" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args)))<SUB>896</SUB>> ]
-"2716" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());)<SUB>897</SUB>> ]
-"2711" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>896</SUB>> ]
-"2717" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>897</SUB>> ]
-"2718" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>897</SUB>> ]
-"2723" [label = <(GetL,result.GetL())<SUB>897</SUB>> ]
-"2674" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>893</SUB>> ]
-"2692" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>894</SUB>> ]
-"2719" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>897</SUB>> ]
-"2724" [label = <(&lt;operator&gt;.fieldAccess,result.GetL)<SUB>897</SUB>> ]
-"2675" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>893</SUB>> ]
-"2679" [label = <(CHECK_NON_NULL_ARGUMENT(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>893</SUB>> ]
-"2686" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(obj),CHECK_NON_NULL_ARGUMENT(obj))<SUB>893</SUB>> ]
-"2693" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>894</SUB>> ]
-"2697" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>894</SUB>> ]
-"2704" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>894</SUB>> ]
-"2721" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>897</SUB>> ]
-"2726" [label = <(FIELD_IDENTIFIER,GetL,GetL)<SUB>897</SUB>> ]
-"2680" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>893</SUB>> ]
-"2698" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>894</SUB>> ]
-"2681" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>893</SUB>> ]
-"2683" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>893</SUB>> ]
-"2699" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>894</SUB>> ]
-"2701" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>894</SUB>> ]
-"2664" [label = <(METHOD,CallObjectMethodV)<SUB>892</SUB>> ]
-"2727" [label = <(METHOD_RETURN,jobject)<SUB>892</SUB>> ]
-  "2670" -> "2675" 
-  "2670" -> "2688" 
-  "2688" -> "2693" 
-  "2688" -> "2707" 
-  "2707" -> "2711" 
-  "2710" -> "2721" 
-  "2716" -> "2727" 
-  "2711" -> "2710" 
-  "2717" -> "2716" 
-  "2718" -> "2726" 
-  "2723" -> "2717" 
-  "2674" -> "2681" 
-  "2674" -> "2688" 
-  "2692" -> "2699" 
-  "2692" -> "2707" 
-  "2719" -> "2718" 
-  "2724" -> "2723" 
-  "2675" -> "2674" 
-  "2679" -> "2686" 
-  "2686" -> "2727" 
-  "2693" -> "2692" 
-  "2697" -> "2704" 
-  "2704" -> "2727" 
-  "2721" -> "2719" 
-  "2726" -> "2724" 
-  "2680" -> "2679" 
-  "2698" -> "2697" 
-  "2681" -> "2683" 
-  "2683" -> "2680" 
-  "2699" -> "2701" 
-  "2701" -> "2698" 
-  "2664" -> "2670" 
+digraph "CallBooleanMethodA" {  
+"2729" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>848</SUB>> ]
+"2747" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>849</SUB>> ]
+"2766" [label = <(soa,soa(env))<SUB>850</SUB>> ]
+"2768" [label = <(RETURN,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetZ();,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetZ();)<SUB>851</SUB>> ]
+"2769" [label = <(GetZ,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetZ())<SUB>851</SUB>> ]
+"2770" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetZ)<SUB>851</SUB>> ]
+"2733" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>848</SUB>> ]
+"2751" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>849</SUB>> ]
+"2771" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>851</SUB>> ]
+"2776" [label = <(FIELD_IDENTIFIER,GetZ,GetZ)<SUB>851</SUB>> ]
+"2734" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>848</SUB>> ]
+"2738" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>848</SUB>> ]
+"2745" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>848</SUB>> ]
+"2752" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>849</SUB>> ]
+"2756" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>849</SUB>> ]
+"2763" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>849</SUB>> ]
+"2739" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>848</SUB>> ]
+"2757" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>849</SUB>> ]
+"2740" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>848</SUB>> ]
+"2742" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>848</SUB>> ]
+"2758" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>849</SUB>> ]
+"2760" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>849</SUB>> ]
+"2723" [label = <(METHOD,CallBooleanMethodA)<SUB>847</SUB>> ]
+"2777" [label = <(METHOD_RETURN,jboolean)<SUB>847</SUB>> ]
+  "2729" -> "2734" 
+  "2729" -> "2747" 
+  "2747" -> "2752" 
+  "2747" -> "2766" 
+  "2766" -> "2771" 
+  "2768" -> "2777" 
+  "2769" -> "2768" 
+  "2770" -> "2769" 
+  "2733" -> "2740" 
+  "2733" -> "2747" 
+  "2751" -> "2758" 
+  "2751" -> "2766" 
+  "2771" -> "2776" 
+  "2776" -> "2770" 
+  "2734" -> "2733" 
+  "2738" -> "2745" 
+  "2745" -> "2777" 
+  "2752" -> "2751" 
+  "2756" -> "2763" 
+  "2763" -> "2777" 
+  "2739" -> "2738" 
+  "2757" -> "2756" 
+  "2740" -> "2742" 
+  "2742" -> "2739" 
+  "2758" -> "2760" 
+  "2760" -> "2757" 
+  "2723" -> "2729" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/600-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/600-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/600-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/600-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "ArtT::Alloc" {  
-"19349" [label = <(METHOD,ArtT::Alloc)> ]
-"19354" [label = <(METHOD_RETURN,ANY)> ]
-  "19349" -> "19354" 
+digraph "SetCheckJniEnabled" {  
+"19002" [label = <(METHOD,SetCheckJniEnabled)> ]
+"19006" [label = <(METHOD_RETURN,ANY)> ]
+  "19002" -> "19006" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/601-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/601-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/601-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/601-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "DecodeAndCheckArrayType&lt;ArrayT,ElementT,ArtArrayT&gt;" {  
-"19355" [label = <(METHOD,DecodeAndCheckArrayType&lt;ArrayT,ElementT,ArtArrayT&gt;)> ]
-"19361" [label = <(METHOD_RETURN,ANY)> ]
-  "19355" -> "19361" 
+digraph "ExpectClassFound" {  
+"19007" [label = <(METHOD,ExpectClassFound)> ]
+"19010" [label = <(METHOD_RETURN,ANY)> ]
+  "19007" -> "19010" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/602-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/602-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/602-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/602-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "GetData" {  
-"19362" [label = <(METHOD,GetData)> ]
-"19365" [label = <(METHOD_RETURN,ANY)> ]
-  "19362" -> "19365" 
+digraph "ExpectClassNotFound" {  
+"19011" [label = <(METHOD,ExpectClassNotFound)> ]
+"19017" [label = <(METHOD_RETURN,ANY)> ]
+  "19011" -> "19017" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/603-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/603-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/603-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/603-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "DecodeAndCheckArrayType&lt;JArrayT,ElementT,ArtArrayT&gt;" {  
-"19366" [label = <(METHOD,DecodeAndCheckArrayType&lt;JArrayT,ElementT,ArtArrayT&gt;)> ]
-"19372" [label = <(METHOD_RETURN,ANY)> ]
-  "19366" -> "19372" 
+digraph "ASSERT_NE" {  
+"19018" [label = <(METHOD,ASSERT_NE)> ]
+"19022" [label = <(METHOD_RETURN,ANY)> ]
+  "19018" -> "19022" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/604-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/604-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/604-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/604-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.arrayInitializer" {  
-"19373" [label = <(METHOD,&lt;operator&gt;.arrayInitializer)> ]
-"19378" [label = <(METHOD_RETURN,ANY)> ]
-  "19373" -> "19378" 
+digraph "GetFieldID" {  
+"19023" [label = <(METHOD,GetFieldID)> ]
+"19029" [label = <(METHOD_RETURN,ANY)> ]
+  "19023" -> "19029" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/605-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/605-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/605-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/605-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "UNREACHABLE" {  
-"19379" [label = <(METHOD,UNREACHABLE)> ]
-"19381" [label = <(METHOD_RETURN,ANY)> ]
-  "19379" -> "19381" 
+digraph "GetStaticFieldID" {  
+"19030" [label = <(METHOD,GetStaticFieldID)> ]
+"19036" [label = <(METHOD_RETURN,ANY)> ]
+  "19030" -> "19036" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/606-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/606-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/606-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/606-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "CommonCompilerTest::SetUp" {  
-"19382" [label = <(METHOD,CommonCompilerTest::SetUp)> ]
-"19385" [label = <(METHOD_RETURN,ANY)> ]
-  "19382" -> "19385" 
+digraph "ASSERT_TRUE" {  
+"19037" [label = <(METHOD,ASSERT_TRUE)> ]
+"19040" [label = <(METHOD_RETURN,ANY)> ]
+  "19037" -> "19040" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/607-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/607-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/607-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/607-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "AttachCurrentThread" {  
-"19386" [label = <(METHOD,AttachCurrentThread)> ]
-"19391" [label = <(METHOD_RETURN,ANY)> ]
-  "19386" -> "19391" 
+digraph "GetStaticMethodID" {  
+"19041" [label = <(METHOD,GetStaticMethodID)> ]
+"19047" [label = <(METHOD_RETURN,ANY)> ]
+  "19041" -> "19047" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/608-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/608-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/608-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/608-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "aioobe" {  
-"19392" [label = <(METHOD,aioobe)> ]
-"19396" [label = <(METHOD_RETURN,ANY)> ]
-  "19392" -> "19396" 
+digraph "ToReflectedField" {  
+"19048" [label = <(METHOD,ToReflectedField)> ]
+"19054" [label = <(METHOD_RETURN,ANY)> ]
+  "19048" -> "19054" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/609-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/609-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/609-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/609-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "NewGlobalRef" {  
-"19397" [label = <(METHOD,NewGlobalRef)> ]
-"19402" [label = <(METHOD_RETURN,ANY)> ]
-  "19397" -> "19402" 
+digraph "FromReflectedField" {  
+"19055" [label = <(METHOD,FromReflectedField)> ]
+"19059" [label = <(METHOD_RETURN,ANY)> ]
+  "19055" -> "19059" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/61-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/61-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/61-cfg.dot	2023-06-07 19:33:45.377394693 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/61-cfg.dot	2023-06-07 19:33:51.957393992 +0330
@@ -1,63 +1,61 @@
-digraph "CallObjectMethodA" {  
-"2735" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(obj))<SUB>901</SUB>> ]
-"2753" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>902</SUB>> ]
-"2772" [label = <(soa,soa(env))<SUB>903</SUB>> ]
-"2775" [label = <(result,result(InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args)))<SUB>904</SUB>> ]
-"2781" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());)<SUB>905</SUB>> ]
-"2776" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>904</SUB>> ]
-"2782" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>905</SUB>> ]
-"2783" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>905</SUB>> ]
-"2788" [label = <(GetL,result.GetL())<SUB>905</SUB>> ]
-"2739" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>901</SUB>> ]
-"2757" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>902</SUB>> ]
-"2784" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>905</SUB>> ]
-"2789" [label = <(&lt;operator&gt;.fieldAccess,result.GetL)<SUB>905</SUB>> ]
-"2740" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>901</SUB>> ]
-"2744" [label = <(CHECK_NON_NULL_ARGUMENT(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>901</SUB>> ]
-"2751" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(obj),CHECK_NON_NULL_ARGUMENT(obj))<SUB>901</SUB>> ]
-"2758" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>902</SUB>> ]
-"2762" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>902</SUB>> ]
-"2769" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>902</SUB>> ]
-"2786" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>905</SUB>> ]
-"2791" [label = <(FIELD_IDENTIFIER,GetL,GetL)<SUB>905</SUB>> ]
-"2745" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>901</SUB>> ]
-"2763" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>902</SUB>> ]
-"2746" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>901</SUB>> ]
-"2748" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>901</SUB>> ]
-"2764" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>902</SUB>> ]
-"2766" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>902</SUB>> ]
-"2729" [label = <(METHOD,CallObjectMethodA)<SUB>900</SUB>> ]
-"2792" [label = <(METHOD_RETURN,jobject)<SUB>900</SUB>> ]
-  "2735" -> "2740" 
-  "2735" -> "2753" 
-  "2753" -> "2758" 
-  "2753" -> "2772" 
-  "2772" -> "2776" 
-  "2775" -> "2786" 
-  "2781" -> "2792" 
-  "2776" -> "2775" 
-  "2782" -> "2781" 
-  "2783" -> "2791" 
-  "2788" -> "2782" 
-  "2739" -> "2746" 
-  "2739" -> "2753" 
-  "2757" -> "2764" 
-  "2757" -> "2772" 
-  "2784" -> "2783" 
-  "2789" -> "2788" 
-  "2740" -> "2739" 
-  "2744" -> "2751" 
-  "2751" -> "2792" 
-  "2758" -> "2757" 
-  "2762" -> "2769" 
-  "2769" -> "2792" 
-  "2786" -> "2784" 
-  "2791" -> "2789" 
-  "2745" -> "2744" 
-  "2763" -> "2762" 
-  "2746" -> "2748" 
-  "2748" -> "2745" 
-  "2764" -> "2766" 
-  "2766" -> "2763" 
-  "2729" -> "2735" 
+digraph "CallByteMethod" {  
+"2785" [label = <(va_start,va_start(ap, mid))<SUB>856</SUB>> ]
+"2789" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>857</SUB>> ]
+"2792" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>858</SUB>> ]
+"2810" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>859</SUB>> ]
+"2829" [label = <(soa,soa(env))<SUB>860</SUB>> ]
+"2832" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap)))<SUB>861</SUB>> ]
+"2838" [label = <(RETURN,return result.GetB();,return result.GetB();)<SUB>862</SUB>> ]
+"2790" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>857</SUB>> ]
+"2833" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>861</SUB>> ]
+"2839" [label = <(GetB,result.GetB())<SUB>862</SUB>> ]
+"2840" [label = <(&lt;operator&gt;.fieldAccess,result.GetB)<SUB>862</SUB>> ]
+"2796" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>858</SUB>> ]
+"2814" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>859</SUB>> ]
+"2842" [label = <(FIELD_IDENTIFIER,GetB,GetB)<SUB>862</SUB>> ]
+"2797" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>858</SUB>> ]
+"2801" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>858</SUB>> ]
+"2808" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>858</SUB>> ]
+"2815" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>859</SUB>> ]
+"2819" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>859</SUB>> ]
+"2826" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>859</SUB>> ]
+"2802" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>858</SUB>> ]
+"2820" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>859</SUB>> ]
+"2803" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>858</SUB>> ]
+"2805" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>858</SUB>> ]
+"2821" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>859</SUB>> ]
+"2823" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>859</SUB>> ]
+"2779" [label = <(METHOD,CallByteMethod)<SUB>854</SUB>> ]
+"2843" [label = <(METHOD_RETURN,jbyte)<SUB>854</SUB>> ]
+  "2785" -> "2790" 
+  "2789" -> "2792" 
+  "2792" -> "2797" 
+  "2792" -> "2810" 
+  "2810" -> "2815" 
+  "2810" -> "2829" 
+  "2829" -> "2833" 
+  "2832" -> "2842" 
+  "2838" -> "2843" 
+  "2790" -> "2789" 
+  "2833" -> "2832" 
+  "2839" -> "2838" 
+  "2840" -> "2839" 
+  "2796" -> "2803" 
+  "2796" -> "2810" 
+  "2814" -> "2821" 
+  "2814" -> "2829" 
+  "2842" -> "2840" 
+  "2797" -> "2796" 
+  "2801" -> "2808" 
+  "2808" -> "2843" 
+  "2815" -> "2814" 
+  "2819" -> "2826" 
+  "2826" -> "2843" 
+  "2802" -> "2801" 
+  "2820" -> "2819" 
+  "2803" -> "2805" 
+  "2805" -> "2802" 
+  "2821" -> "2823" 
+  "2823" -> "2820" 
+  "2779" -> "2785" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/610-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/610-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/610-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/610-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "ase" {  
-"19403" [label = <(METHOD,ase)> ]
-"19407" [label = <(METHOD_RETURN,ANY)> ]
-  "19403" -> "19407" 
+digraph "ASSERT_EQ" {  
+"19060" [label = <(METHOD,ASSERT_EQ)> ]
+"19064" [label = <(METHOD_RETURN,ANY)> ]
+  "19060" -> "19064" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/611-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/611-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/611-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/611-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "sioobe" {  
-"19408" [label = <(METHOD,sioobe)> ]
-"19412" [label = <(METHOD_RETURN,ANY)> ]
-  "19408" -> "19412" 
+digraph "ToReflectedMethod" {  
+"19065" [label = <(METHOD,ToReflectedMethod)> ]
+"19071" [label = <(METHOD_RETURN,ANY)> ]
+  "19065" -> "19071" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/612-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/612-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/612-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/612-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "EXPECT_TRUE" {  
-"19413" [label = <(METHOD,EXPECT_TRUE)> ]
-"19416" [label = <(METHOD_RETURN,ANY)> ]
-  "19413" -> "19416" 
+digraph "FromReflectedMethod" {  
+"19072" [label = <(METHOD,FromReflectedMethod)> ]
+"19076" [label = <(METHOD_RETURN,ANY)> ]
+  "19072" -> "19076" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/613-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/613-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/613-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/613-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "ExceptionCheck" {  
-"19417" [label = <(METHOD,ExceptionCheck)> ]
-"19420" [label = <(METHOD_RETURN,ANY)> ]
-  "19417" -> "19420" 
+digraph "RegisterNatives" {  
+"19077" [label = <(METHOD,RegisterNatives)> ]
+"19083" [label = <(METHOD_RETURN,ANY)> ]
+  "19077" -> "19083" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/614-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/614-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/614-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/614-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "ExceptionOccurred" {  
-"19421" [label = <(METHOD,ExceptionOccurred)> ]
-"19424" [label = <(METHOD_RETURN,ANY)> ]
-  "19421" -> "19424" 
+digraph "UnregisterNatives" {  
+"19084" [label = <(METHOD,UnregisterNatives)> ]
+"19088" [label = <(METHOD_RETURN,ANY)> ]
+  "19084" -> "19088" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/615-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/615-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/615-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/615-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "EXPECT_NE" {  
-"19425" [label = <(METHOD,EXPECT_NE)> ]
-"19429" [label = <(METHOD_RETURN,ANY)> ]
-  "19425" -> "19429" 
+digraph "NewBooleanArray" {  
+"19089" [label = <(METHOD,NewBooleanArray)> ]
+"19093" [label = <(METHOD_RETURN,ANY)> ]
+  "19089" -> "19093" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/616-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/616-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/616-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/616-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "ExceptionClear" {  
-"19430" [label = <(METHOD,ExceptionClear)> ]
-"19433" [label = <(METHOD_RETURN,ANY)> ]
-  "19430" -> "19433" 
+digraph "GetByteArrayElements" {  
+"19094" [label = <(METHOD,GetByteArrayElements)> ]
+"19099" [label = <(METHOD_RETURN,ANY)> ]
+  "19094" -> "19099" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/617-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/617-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/617-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/617-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "IsInstanceOf" {  
-"19434" [label = <(METHOD,IsInstanceOf)> ]
-"19439" [label = <(METHOD_RETURN,ANY)> ]
-  "19434" -> "19439" 
+digraph "GetShortArrayElements" {  
+"19100" [label = <(METHOD,GetShortArrayElements)> ]
+"19105" [label = <(METHOD_RETURN,ANY)> ]
+  "19100" -> "19105" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/618-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/618-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/618-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/618-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "FindPrimitiveClass" {  
-"19440" [label = <(METHOD,FindPrimitiveClass)> ]
-"19444" [label = <(METHOD_RETURN,ANY)> ]
-  "19440" -> "19444" 
+digraph "GetCharArrayElements" {  
+"19106" [label = <(METHOD,GetCharArrayElements)> ]
+"19111" [label = <(METHOD_RETURN,ANY)> ]
+  "19106" -> "19111" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/619-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/619-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/619-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/619-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "EXPECT_FALSE" {  
-"19445" [label = <(METHOD,EXPECT_FALSE)> ]
-"19448" [label = <(METHOD_RETURN,ANY)> ]
-  "19445" -> "19448" 
+digraph "GetIntArrayElements" {  
+"19112" [label = <(METHOD,GetIntArrayElements)> ]
+"19117" [label = <(METHOD_RETURN,ANY)> ]
+  "19112" -> "19117" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/62-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/62-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/62-cfg.dot	2023-06-07 19:33:45.377394693 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/62-cfg.dot	2023-06-07 19:33:51.957393992 +0330
@@ -1,61 +1,53 @@
-digraph "CallBooleanMethod" {  
-"2800" [label = <(va_start,va_start(ap, mid))<SUB>910</SUB>> ]
-"2804" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>911</SUB>> ]
-"2807" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>912</SUB>> ]
-"2825" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>913</SUB>> ]
-"2844" [label = <(soa,soa(env))<SUB>914</SUB>> ]
-"2847" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap)))<SUB>915</SUB>> ]
-"2853" [label = <(RETURN,return result.GetZ();,return result.GetZ();)<SUB>916</SUB>> ]
-"2805" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>911</SUB>> ]
-"2848" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>915</SUB>> ]
-"2854" [label = <(GetZ,result.GetZ())<SUB>916</SUB>> ]
-"2855" [label = <(&lt;operator&gt;.fieldAccess,result.GetZ)<SUB>916</SUB>> ]
-"2811" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>912</SUB>> ]
-"2829" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>913</SUB>> ]
-"2857" [label = <(FIELD_IDENTIFIER,GetZ,GetZ)<SUB>916</SUB>> ]
-"2812" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>912</SUB>> ]
-"2816" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>912</SUB>> ]
-"2823" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>912</SUB>> ]
-"2830" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>913</SUB>> ]
-"2834" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>913</SUB>> ]
-"2841" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>913</SUB>> ]
-"2817" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>912</SUB>> ]
-"2835" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>913</SUB>> ]
-"2818" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>912</SUB>> ]
-"2820" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>912</SUB>> ]
-"2836" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>913</SUB>> ]
-"2838" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>913</SUB>> ]
-"2794" [label = <(METHOD,CallBooleanMethod)<SUB>908</SUB>> ]
-"2858" [label = <(METHOD_RETURN,jboolean)<SUB>908</SUB>> ]
-  "2800" -> "2805" 
-  "2804" -> "2807" 
-  "2807" -> "2812" 
-  "2807" -> "2825" 
-  "2825" -> "2830" 
-  "2825" -> "2844" 
-  "2844" -> "2848" 
-  "2847" -> "2857" 
-  "2853" -> "2858" 
-  "2805" -> "2804" 
-  "2848" -> "2847" 
-  "2854" -> "2853" 
-  "2855" -> "2854" 
-  "2811" -> "2818" 
-  "2811" -> "2825" 
-  "2829" -> "2836" 
-  "2829" -> "2844" 
-  "2857" -> "2855" 
-  "2812" -> "2811" 
-  "2816" -> "2823" 
-  "2823" -> "2858" 
-  "2830" -> "2829" 
-  "2834" -> "2841" 
-  "2841" -> "2858" 
-  "2817" -> "2816" 
-  "2835" -> "2834" 
-  "2818" -> "2820" 
-  "2820" -> "2817" 
-  "2836" -> "2838" 
-  "2838" -> "2835" 
-  "2794" -> "2800" 
+digraph "CallByteMethodV" {  
+"2851" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>866</SUB>> ]
+"2869" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>867</SUB>> ]
+"2888" [label = <(soa,soa(env))<SUB>868</SUB>> ]
+"2890" [label = <(RETURN,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetB();,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetB();)<SUB>869</SUB>> ]
+"2891" [label = <(GetB,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetB())<SUB>869</SUB>> ]
+"2892" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetB)<SUB>869</SUB>> ]
+"2855" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>866</SUB>> ]
+"2873" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>867</SUB>> ]
+"2893" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>869</SUB>> ]
+"2898" [label = <(FIELD_IDENTIFIER,GetB,GetB)<SUB>869</SUB>> ]
+"2856" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>866</SUB>> ]
+"2860" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>866</SUB>> ]
+"2867" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>866</SUB>> ]
+"2874" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>867</SUB>> ]
+"2878" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>867</SUB>> ]
+"2885" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>867</SUB>> ]
+"2861" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>866</SUB>> ]
+"2879" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>867</SUB>> ]
+"2862" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>866</SUB>> ]
+"2864" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>866</SUB>> ]
+"2880" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>867</SUB>> ]
+"2882" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>867</SUB>> ]
+"2845" [label = <(METHOD,CallByteMethodV)<SUB>865</SUB>> ]
+"2899" [label = <(METHOD_RETURN,jbyte)<SUB>865</SUB>> ]
+  "2851" -> "2856" 
+  "2851" -> "2869" 
+  "2869" -> "2874" 
+  "2869" -> "2888" 
+  "2888" -> "2893" 
+  "2890" -> "2899" 
+  "2891" -> "2890" 
+  "2892" -> "2891" 
+  "2855" -> "2862" 
+  "2855" -> "2869" 
+  "2873" -> "2880" 
+  "2873" -> "2888" 
+  "2893" -> "2898" 
+  "2898" -> "2892" 
+  "2856" -> "2855" 
+  "2860" -> "2867" 
+  "2867" -> "2899" 
+  "2874" -> "2873" 
+  "2878" -> "2885" 
+  "2885" -> "2899" 
+  "2861" -> "2860" 
+  "2879" -> "2878" 
+  "2862" -> "2864" 
+  "2864" -> "2861" 
+  "2880" -> "2882" 
+  "2882" -> "2879" 
+  "2845" -> "2851" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/620-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/620-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/620-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/620-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "EXPECT_EQ" {  
-"19449" [label = <(METHOD,EXPECT_EQ)> ]
-"19453" [label = <(METHOD_RETURN,ANY)> ]
-  "19449" -> "19453" 
+digraph "GetLongArrayElements" {  
+"19118" [label = <(METHOD,GetLongArrayElements)> ]
+"19123" [label = <(METHOD_RETURN,ANY)> ]
+  "19118" -> "19123" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/621-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/621-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/621-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/621-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "Check" {  
-"19454" [label = <(METHOD,Check)> ]
-"19458" [label = <(METHOD_RETURN,ANY)> ]
-  "19454" -> "19458" 
+digraph "GetFloatArrayElements" {  
+"19124" [label = <(METHOD,GetFloatArrayElements)> ]
+"19129" [label = <(METHOD_RETURN,ANY)> ]
+  "19124" -> "19129" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/622-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/622-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/622-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/622-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "SetCheckJniEnabled" {  
-"19459" [label = <(METHOD,SetCheckJniEnabled)> ]
-"19463" [label = <(METHOD_RETURN,ANY)> ]
-  "19459" -> "19463" 
+digraph "GetDoubleArrayElements" {  
+"19130" [label = <(METHOD,GetDoubleArrayElements)> ]
+"19135" [label = <(METHOD_RETURN,ANY)> ]
+  "19130" -> "19135" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/623-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/623-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/623-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/623-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "ExpectClassFound" {  
-"19464" [label = <(METHOD,ExpectClassFound)> ]
-"19467" [label = <(METHOD_RETURN,ANY)> ]
-  "19464" -> "19467" 
+digraph "NewByteArray" {  
+"19136" [label = <(METHOD,NewByteArray)> ]
+"19140" [label = <(METHOD_RETURN,ANY)> ]
+  "19136" -> "19140" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/624-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/624-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/624-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/624-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "ExpectClassNotFound" {  
-"19468" [label = <(METHOD,ExpectClassNotFound)> ]
-"19474" [label = <(METHOD_RETURN,ANY)> ]
-  "19468" -> "19474" 
+digraph "GetBooleanArrayElements" {  
+"19141" [label = <(METHOD,GetBooleanArrayElements)> ]
+"19146" [label = <(METHOD_RETURN,ANY)> ]
+  "19141" -> "19146" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/625-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/625-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/625-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/625-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "ASSERT_NE" {  
-"19475" [label = <(METHOD,ASSERT_NE)> ]
-"19479" [label = <(METHOD_RETURN,ANY)> ]
-  "19475" -> "19479" 
+digraph "NewStringUTF" {  
+"19147" [label = <(METHOD,NewStringUTF)> ]
+"19151" [label = <(METHOD_RETURN,ANY)> ]
+  "19147" -> "19151" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/626-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/626-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/626-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/626-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "GetFieldID" {  
-"19480" [label = <(METHOD,GetFieldID)> ]
-"19486" [label = <(METHOD_RETURN,ANY)> ]
-  "19480" -> "19486" 
+digraph "ReleaseByteArrayElements" {  
+"19152" [label = <(METHOD,ReleaseByteArrayElements)> ]
+"19158" [label = <(METHOD_RETURN,ANY)> ]
+  "19152" -> "19158" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/627-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/627-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/627-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/627-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "GetStaticFieldID" {  
-"19487" [label = <(METHOD,GetStaticFieldID)> ]
-"19493" [label = <(METHOD_RETURN,ANY)> ]
-  "19487" -> "19493" 
+digraph "ReleaseShortArrayElements" {  
+"19159" [label = <(METHOD,ReleaseShortArrayElements)> ]
+"19165" [label = <(METHOD_RETURN,ANY)> ]
+  "19159" -> "19165" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/628-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/628-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/628-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/628-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "ASSERT_TRUE" {  
-"19494" [label = <(METHOD,ASSERT_TRUE)> ]
-"19497" [label = <(METHOD_RETURN,ANY)> ]
-  "19494" -> "19497" 
+digraph "ReleaseCharArrayElements" {  
+"19166" [label = <(METHOD,ReleaseCharArrayElements)> ]
+"19172" [label = <(METHOD_RETURN,ANY)> ]
+  "19166" -> "19172" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/629-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/629-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/629-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/629-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "GetStaticMethodID" {  
-"19498" [label = <(METHOD,GetStaticMethodID)> ]
-"19504" [label = <(METHOD_RETURN,ANY)> ]
-  "19498" -> "19504" 
+digraph "ReleaseIntArrayElements" {  
+"19173" [label = <(METHOD,ReleaseIntArrayElements)> ]
+"19179" [label = <(METHOD_RETURN,ANY)> ]
+  "19173" -> "19179" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/63-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/63-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/63-cfg.dot	2023-06-07 19:33:45.377394693 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/63-cfg.dot	2023-06-07 19:33:51.957393992 +0330
@@ -1,53 +1,53 @@
-digraph "CallBooleanMethodV" {  
-"2866" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>920</SUB>> ]
-"2884" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>921</SUB>> ]
-"2903" [label = <(soa,soa(env))<SUB>922</SUB>> ]
-"2905" [label = <(RETURN,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetZ();,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetZ();)<SUB>923</SUB>> ]
-"2906" [label = <(GetZ,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetZ())<SUB>923</SUB>> ]
-"2907" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetZ)<SUB>923</SUB>> ]
-"2870" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>920</SUB>> ]
-"2888" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>921</SUB>> ]
-"2908" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>923</SUB>> ]
-"2913" [label = <(FIELD_IDENTIFIER,GetZ,GetZ)<SUB>923</SUB>> ]
-"2871" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>920</SUB>> ]
-"2875" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>920</SUB>> ]
-"2882" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>920</SUB>> ]
-"2889" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>921</SUB>> ]
-"2893" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>921</SUB>> ]
-"2900" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>921</SUB>> ]
-"2876" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>920</SUB>> ]
-"2894" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>921</SUB>> ]
-"2877" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>920</SUB>> ]
-"2879" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>920</SUB>> ]
-"2895" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>921</SUB>> ]
-"2897" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>921</SUB>> ]
-"2860" [label = <(METHOD,CallBooleanMethodV)<SUB>919</SUB>> ]
-"2914" [label = <(METHOD_RETURN,jboolean)<SUB>919</SUB>> ]
-  "2866" -> "2871" 
-  "2866" -> "2884" 
-  "2884" -> "2889" 
-  "2884" -> "2903" 
-  "2903" -> "2908" 
-  "2905" -> "2914" 
-  "2906" -> "2905" 
-  "2907" -> "2906" 
-  "2870" -> "2877" 
-  "2870" -> "2884" 
-  "2888" -> "2895" 
-  "2888" -> "2903" 
-  "2908" -> "2913" 
-  "2913" -> "2907" 
-  "2871" -> "2870" 
-  "2875" -> "2882" 
-  "2882" -> "2914" 
-  "2889" -> "2888" 
-  "2893" -> "2900" 
-  "2900" -> "2914" 
-  "2876" -> "2875" 
-  "2894" -> "2893" 
-  "2877" -> "2879" 
-  "2879" -> "2876" 
-  "2895" -> "2897" 
-  "2897" -> "2894" 
-  "2860" -> "2866" 
+digraph "CallByteMethodA" {  
+"2907" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>873</SUB>> ]
+"2925" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>874</SUB>> ]
+"2944" [label = <(soa,soa(env))<SUB>875</SUB>> ]
+"2946" [label = <(RETURN,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetB();,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetB();)<SUB>876</SUB>> ]
+"2947" [label = <(GetB,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetB())<SUB>876</SUB>> ]
+"2948" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetB)<SUB>876</SUB>> ]
+"2911" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>873</SUB>> ]
+"2929" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>874</SUB>> ]
+"2949" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>876</SUB>> ]
+"2954" [label = <(FIELD_IDENTIFIER,GetB,GetB)<SUB>876</SUB>> ]
+"2912" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>873</SUB>> ]
+"2916" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>873</SUB>> ]
+"2923" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>873</SUB>> ]
+"2930" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>874</SUB>> ]
+"2934" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>874</SUB>> ]
+"2941" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>874</SUB>> ]
+"2917" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>873</SUB>> ]
+"2935" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>874</SUB>> ]
+"2918" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>873</SUB>> ]
+"2920" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>873</SUB>> ]
+"2936" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>874</SUB>> ]
+"2938" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>874</SUB>> ]
+"2901" [label = <(METHOD,CallByteMethodA)<SUB>872</SUB>> ]
+"2955" [label = <(METHOD_RETURN,jbyte)<SUB>872</SUB>> ]
+  "2907" -> "2912" 
+  "2907" -> "2925" 
+  "2925" -> "2930" 
+  "2925" -> "2944" 
+  "2944" -> "2949" 
+  "2946" -> "2955" 
+  "2947" -> "2946" 
+  "2948" -> "2947" 
+  "2911" -> "2918" 
+  "2911" -> "2925" 
+  "2929" -> "2936" 
+  "2929" -> "2944" 
+  "2949" -> "2954" 
+  "2954" -> "2948" 
+  "2912" -> "2911" 
+  "2916" -> "2923" 
+  "2923" -> "2955" 
+  "2930" -> "2929" 
+  "2934" -> "2941" 
+  "2941" -> "2955" 
+  "2917" -> "2916" 
+  "2935" -> "2934" 
+  "2918" -> "2920" 
+  "2920" -> "2917" 
+  "2936" -> "2938" 
+  "2938" -> "2935" 
+  "2901" -> "2907" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/630-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/630-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/630-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/630-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "ToReflectedField" {  
-"19505" [label = <(METHOD,ToReflectedField)> ]
-"19511" [label = <(METHOD_RETURN,ANY)> ]
-  "19505" -> "19511" 
+digraph "ReleaseLongArrayElements" {  
+"19180" [label = <(METHOD,ReleaseLongArrayElements)> ]
+"19186" [label = <(METHOD_RETURN,ANY)> ]
+  "19180" -> "19186" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/631-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/631-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/631-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/631-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "FromReflectedField" {  
-"19512" [label = <(METHOD,FromReflectedField)> ]
-"19516" [label = <(METHOD_RETURN,ANY)> ]
-  "19512" -> "19516" 
+digraph "ReleaseFloatArrayElements" {  
+"19187" [label = <(METHOD,ReleaseFloatArrayElements)> ]
+"19193" [label = <(METHOD_RETURN,ANY)> ]
+  "19187" -> "19193" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/632-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/632-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/632-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/632-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "ASSERT_EQ" {  
-"19517" [label = <(METHOD,ASSERT_EQ)> ]
-"19521" [label = <(METHOD_RETURN,ANY)> ]
-  "19517" -> "19521" 
+digraph "ReleaseDoubleArrayElements" {  
+"19194" [label = <(METHOD,ReleaseDoubleArrayElements)> ]
+"19200" [label = <(METHOD_RETURN,ANY)> ]
+  "19194" -> "19200" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/633-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/633-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/633-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/633-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "ToReflectedMethod" {  
-"19522" [label = <(METHOD,ToReflectedMethod)> ]
-"19528" [label = <(METHOD_RETURN,ANY)> ]
-  "19522" -> "19528" 
+digraph "ReleaseBooleanArrayElements" {  
+"19201" [label = <(METHOD,ReleaseBooleanArrayElements)> ]
+"19207" [label = <(METHOD_RETURN,ANY)> ]
+  "19201" -> "19207" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/634-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/634-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/634-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/634-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "FromReflectedMethod" {  
-"19529" [label = <(METHOD,FromReflectedMethod)> ]
-"19533" [label = <(METHOD_RETURN,ANY)> ]
-  "19529" -> "19533" 
+digraph "GetPrimitiveArrayCritical" {  
+"19208" [label = <(METHOD,GetPrimitiveArrayCritical)> ]
+"19213" [label = <(METHOD_RETURN,ANY)> ]
+  "19208" -> "19213" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/635-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/635-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/635-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/635-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "RegisterNatives" {  
-"19534" [label = <(METHOD,RegisterNatives)> ]
-"19540" [label = <(METHOD_RETURN,ANY)> ]
-  "19534" -> "19540" 
+digraph "ReleasePrimitiveArrayCritical" {  
+"19214" [label = <(METHOD,ReleasePrimitiveArrayCritical)> ]
+"19220" [label = <(METHOD_RETURN,ANY)> ]
+  "19214" -> "19220" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/636-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/636-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/636-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/636-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "UnregisterNatives" {  
-"19541" [label = <(METHOD,UnregisterNatives)> ]
-"19545" [label = <(METHOD_RETURN,ANY)> ]
-  "19541" -> "19545" 
+digraph "GetByteArrayRegion" {  
+"19221" [label = <(METHOD,GetByteArrayRegion)> ]
+"19228" [label = <(METHOD_RETURN,ANY)> ]
+  "19221" -> "19228" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/637-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/637-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/637-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/637-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "NewBooleanArray" {  
-"19546" [label = <(METHOD,NewBooleanArray)> ]
-"19550" [label = <(METHOD_RETURN,ANY)> ]
-  "19546" -> "19550" 
+digraph "GetShortArrayRegion" {  
+"19229" [label = <(METHOD,GetShortArrayRegion)> ]
+"19236" [label = <(METHOD_RETURN,ANY)> ]
+  "19229" -> "19236" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/638-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/638-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/638-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/638-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "GetByteArrayElements" {  
-"19551" [label = <(METHOD,GetByteArrayElements)> ]
-"19556" [label = <(METHOD_RETURN,ANY)> ]
-  "19551" -> "19556" 
+digraph "GetCharArrayRegion" {  
+"19237" [label = <(METHOD,GetCharArrayRegion)> ]
+"19244" [label = <(METHOD_RETURN,ANY)> ]
+  "19237" -> "19244" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/639-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/639-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/639-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/639-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "GetShortArrayElements" {  
-"19557" [label = <(METHOD,GetShortArrayElements)> ]
-"19562" [label = <(METHOD_RETURN,ANY)> ]
-  "19557" -> "19562" 
+digraph "GetIntArrayRegion" {  
+"19245" [label = <(METHOD,GetIntArrayRegion)> ]
+"19252" [label = <(METHOD_RETURN,ANY)> ]
+  "19245" -> "19252" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/64-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/64-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/64-cfg.dot	2023-06-07 19:33:45.377394693 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/64-cfg.dot	2023-06-07 19:33:51.957393992 +0330
@@ -1,53 +1,61 @@
-digraph "CallBooleanMethodA" {  
-"2922" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>927</SUB>> ]
-"2940" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>928</SUB>> ]
-"2959" [label = <(soa,soa(env))<SUB>929</SUB>> ]
-"2961" [label = <(RETURN,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetZ();,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetZ();)<SUB>930</SUB>> ]
-"2962" [label = <(GetZ,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetZ())<SUB>930</SUB>> ]
-"2963" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetZ)<SUB>930</SUB>> ]
-"2926" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>927</SUB>> ]
-"2944" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>928</SUB>> ]
-"2964" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>930</SUB>> ]
-"2969" [label = <(FIELD_IDENTIFIER,GetZ,GetZ)<SUB>930</SUB>> ]
-"2927" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>927</SUB>> ]
-"2931" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>927</SUB>> ]
-"2938" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>927</SUB>> ]
-"2945" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>928</SUB>> ]
-"2949" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>928</SUB>> ]
-"2956" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>928</SUB>> ]
-"2932" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>927</SUB>> ]
-"2950" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>928</SUB>> ]
-"2933" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>927</SUB>> ]
-"2935" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>927</SUB>> ]
-"2951" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>928</SUB>> ]
-"2953" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>928</SUB>> ]
-"2916" [label = <(METHOD,CallBooleanMethodA)<SUB>926</SUB>> ]
-"2970" [label = <(METHOD_RETURN,jboolean)<SUB>926</SUB>> ]
-  "2922" -> "2927" 
-  "2922" -> "2940" 
-  "2940" -> "2945" 
-  "2940" -> "2959" 
-  "2959" -> "2964" 
-  "2961" -> "2970" 
-  "2962" -> "2961" 
-  "2963" -> "2962" 
-  "2926" -> "2933" 
-  "2926" -> "2940" 
-  "2944" -> "2951" 
-  "2944" -> "2959" 
-  "2964" -> "2969" 
-  "2969" -> "2963" 
-  "2927" -> "2926" 
-  "2931" -> "2938" 
-  "2938" -> "2970" 
-  "2945" -> "2944" 
-  "2949" -> "2956" 
-  "2956" -> "2970" 
-  "2932" -> "2931" 
-  "2950" -> "2949" 
-  "2933" -> "2935" 
-  "2935" -> "2932" 
-  "2951" -> "2953" 
-  "2953" -> "2950" 
-  "2916" -> "2922" 
+digraph "CallCharMethod" {  
+"2963" [label = <(va_start,va_start(ap, mid))<SUB>881</SUB>> ]
+"2967" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>882</SUB>> ]
+"2970" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>883</SUB>> ]
+"2988" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>884</SUB>> ]
+"3007" [label = <(soa,soa(env))<SUB>885</SUB>> ]
+"3010" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap)))<SUB>886</SUB>> ]
+"3016" [label = <(RETURN,return result.GetC();,return result.GetC();)<SUB>887</SUB>> ]
+"2968" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>882</SUB>> ]
+"3011" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>886</SUB>> ]
+"3017" [label = <(GetC,result.GetC())<SUB>887</SUB>> ]
+"3018" [label = <(&lt;operator&gt;.fieldAccess,result.GetC)<SUB>887</SUB>> ]
+"2974" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>883</SUB>> ]
+"2992" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>884</SUB>> ]
+"3020" [label = <(FIELD_IDENTIFIER,GetC,GetC)<SUB>887</SUB>> ]
+"2975" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>883</SUB>> ]
+"2979" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>883</SUB>> ]
+"2986" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>883</SUB>> ]
+"2993" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>884</SUB>> ]
+"2997" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>884</SUB>> ]
+"3004" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>884</SUB>> ]
+"2980" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>883</SUB>> ]
+"2998" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>884</SUB>> ]
+"2981" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>883</SUB>> ]
+"2983" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>883</SUB>> ]
+"2999" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>884</SUB>> ]
+"3001" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>884</SUB>> ]
+"2957" [label = <(METHOD,CallCharMethod)<SUB>879</SUB>> ]
+"3021" [label = <(METHOD_RETURN,jchar)<SUB>879</SUB>> ]
+  "2963" -> "2968" 
+  "2967" -> "2970" 
+  "2970" -> "2975" 
+  "2970" -> "2988" 
+  "2988" -> "2993" 
+  "2988" -> "3007" 
+  "3007" -> "3011" 
+  "3010" -> "3020" 
+  "3016" -> "3021" 
+  "2968" -> "2967" 
+  "3011" -> "3010" 
+  "3017" -> "3016" 
+  "3018" -> "3017" 
+  "2974" -> "2981" 
+  "2974" -> "2988" 
+  "2992" -> "2999" 
+  "2992" -> "3007" 
+  "3020" -> "3018" 
+  "2975" -> "2974" 
+  "2979" -> "2986" 
+  "2986" -> "3021" 
+  "2993" -> "2992" 
+  "2997" -> "3004" 
+  "3004" -> "3021" 
+  "2980" -> "2979" 
+  "2998" -> "2997" 
+  "2981" -> "2983" 
+  "2983" -> "2980" 
+  "2999" -> "3001" 
+  "3001" -> "2998" 
+  "2957" -> "2963" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/640-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/640-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/640-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/640-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "GetCharArrayElements" {  
-"19563" [label = <(METHOD,GetCharArrayElements)> ]
-"19568" [label = <(METHOD_RETURN,ANY)> ]
-  "19563" -> "19568" 
+digraph "GetLongArrayRegion" {  
+"19253" [label = <(METHOD,GetLongArrayRegion)> ]
+"19260" [label = <(METHOD_RETURN,ANY)> ]
+  "19253" -> "19260" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/641-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/641-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/641-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/641-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "GetIntArrayElements" {  
-"19569" [label = <(METHOD,GetIntArrayElements)> ]
-"19574" [label = <(METHOD_RETURN,ANY)> ]
-  "19569" -> "19574" 
+digraph "GetFloatArrayRegion" {  
+"19261" [label = <(METHOD,GetFloatArrayRegion)> ]
+"19268" [label = <(METHOD_RETURN,ANY)> ]
+  "19261" -> "19268" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/642-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/642-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/642-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/642-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "GetLongArrayElements" {  
-"19575" [label = <(METHOD,GetLongArrayElements)> ]
-"19580" [label = <(METHOD_RETURN,ANY)> ]
-  "19575" -> "19580" 
+digraph "GetDoubleArrayRegion" {  
+"19269" [label = <(METHOD,GetDoubleArrayRegion)> ]
+"19276" [label = <(METHOD_RETURN,ANY)> ]
+  "19269" -> "19276" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/643-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/643-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/643-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/643-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "GetFloatArrayElements" {  
-"19581" [label = <(METHOD,GetFloatArrayElements)> ]
-"19586" [label = <(METHOD_RETURN,ANY)> ]
-  "19581" -> "19586" 
+digraph "GetBooleanArrayRegion" {  
+"19277" [label = <(METHOD,GetBooleanArrayRegion)> ]
+"19284" [label = <(METHOD_RETURN,ANY)> ]
+  "19277" -> "19284" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/644-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/644-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/644-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/644-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "GetDoubleArrayElements" {  
-"19587" [label = <(METHOD,GetDoubleArrayElements)> ]
-"19592" [label = <(METHOD_RETURN,ANY)> ]
-  "19587" -> "19592" 
+digraph "SetByteArrayRegion" {  
+"19285" [label = <(METHOD,SetByteArrayRegion)> ]
+"19292" [label = <(METHOD_RETURN,ANY)> ]
+  "19285" -> "19292" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/645-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/645-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/645-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/645-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "NewByteArray" {  
-"19593" [label = <(METHOD,NewByteArray)> ]
-"19597" [label = <(METHOD_RETURN,ANY)> ]
-  "19593" -> "19597" 
+digraph "SetShortArrayRegion" {  
+"19293" [label = <(METHOD,SetShortArrayRegion)> ]
+"19300" [label = <(METHOD_RETURN,ANY)> ]
+  "19293" -> "19300" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/646-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/646-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/646-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/646-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "GetBooleanArrayElements" {  
-"19598" [label = <(METHOD,GetBooleanArrayElements)> ]
-"19603" [label = <(METHOD_RETURN,ANY)> ]
-  "19598" -> "19603" 
+digraph "SetCharArrayRegion" {  
+"19301" [label = <(METHOD,SetCharArrayRegion)> ]
+"19308" [label = <(METHOD_RETURN,ANY)> ]
+  "19301" -> "19308" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/647-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/647-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/647-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/647-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "NewStringUTF" {  
-"19604" [label = <(METHOD,NewStringUTF)> ]
-"19608" [label = <(METHOD_RETURN,ANY)> ]
-  "19604" -> "19608" 
+digraph "SetIntArrayRegion" {  
+"19309" [label = <(METHOD,SetIntArrayRegion)> ]
+"19316" [label = <(METHOD_RETURN,ANY)> ]
+  "19309" -> "19316" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/648-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/648-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/648-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/648-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "ReleaseByteArrayElements" {  
-"19609" [label = <(METHOD,ReleaseByteArrayElements)> ]
-"19615" [label = <(METHOD_RETURN,ANY)> ]
-  "19609" -> "19615" 
+digraph "SetLongArrayRegion" {  
+"19317" [label = <(METHOD,SetLongArrayRegion)> ]
+"19324" [label = <(METHOD_RETURN,ANY)> ]
+  "19317" -> "19324" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/649-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/649-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/649-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/649-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "ReleaseShortArrayElements" {  
-"19616" [label = <(METHOD,ReleaseShortArrayElements)> ]
-"19622" [label = <(METHOD_RETURN,ANY)> ]
-  "19616" -> "19622" 
+digraph "SetFloatArrayRegion" {  
+"19325" [label = <(METHOD,SetFloatArrayRegion)> ]
+"19332" [label = <(METHOD_RETURN,ANY)> ]
+  "19325" -> "19332" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/65-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/65-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/65-cfg.dot	2023-06-07 19:33:45.377394693 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/65-cfg.dot	2023-06-07 19:33:51.957393992 +0330
@@ -1,61 +1,53 @@
-digraph "CallByteMethod" {  
-"2978" [label = <(va_start,va_start(ap, mid))<SUB>935</SUB>> ]
-"2982" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>936</SUB>> ]
-"2985" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>937</SUB>> ]
-"3003" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>938</SUB>> ]
-"3022" [label = <(soa,soa(env))<SUB>939</SUB>> ]
-"3025" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap)))<SUB>940</SUB>> ]
-"3031" [label = <(RETURN,return result.GetB();,return result.GetB();)<SUB>941</SUB>> ]
-"2983" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>936</SUB>> ]
-"3026" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>940</SUB>> ]
-"3032" [label = <(GetB,result.GetB())<SUB>941</SUB>> ]
-"3033" [label = <(&lt;operator&gt;.fieldAccess,result.GetB)<SUB>941</SUB>> ]
-"2989" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>937</SUB>> ]
-"3007" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>938</SUB>> ]
-"3035" [label = <(FIELD_IDENTIFIER,GetB,GetB)<SUB>941</SUB>> ]
-"2990" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>937</SUB>> ]
-"2994" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>937</SUB>> ]
-"3001" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>937</SUB>> ]
-"3008" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>938</SUB>> ]
-"3012" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>938</SUB>> ]
-"3019" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>938</SUB>> ]
-"2995" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>937</SUB>> ]
-"3013" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>938</SUB>> ]
-"2996" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>937</SUB>> ]
-"2998" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>937</SUB>> ]
-"3014" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>938</SUB>> ]
-"3016" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>938</SUB>> ]
-"2972" [label = <(METHOD,CallByteMethod)<SUB>933</SUB>> ]
-"3036" [label = <(METHOD_RETURN,jbyte)<SUB>933</SUB>> ]
-  "2978" -> "2983" 
-  "2982" -> "2985" 
-  "2985" -> "2990" 
-  "2985" -> "3003" 
-  "3003" -> "3008" 
-  "3003" -> "3022" 
-  "3022" -> "3026" 
-  "3025" -> "3035" 
-  "3031" -> "3036" 
-  "2983" -> "2982" 
-  "3026" -> "3025" 
-  "3032" -> "3031" 
-  "3033" -> "3032" 
-  "2989" -> "2996" 
-  "2989" -> "3003" 
-  "3007" -> "3014" 
-  "3007" -> "3022" 
-  "3035" -> "3033" 
-  "2990" -> "2989" 
-  "2994" -> "3001" 
-  "3001" -> "3036" 
-  "3008" -> "3007" 
-  "3012" -> "3019" 
-  "3019" -> "3036" 
-  "2995" -> "2994" 
-  "3013" -> "3012" 
-  "2996" -> "2998" 
-  "2998" -> "2995" 
-  "3014" -> "3016" 
-  "3016" -> "3013" 
-  "2972" -> "2978" 
+digraph "CallCharMethodV" {  
+"3029" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>891</SUB>> ]
+"3047" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>892</SUB>> ]
+"3066" [label = <(soa,soa(env))<SUB>893</SUB>> ]
+"3068" [label = <(RETURN,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetC();,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetC();)<SUB>894</SUB>> ]
+"3069" [label = <(GetC,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetC())<SUB>894</SUB>> ]
+"3070" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetC)<SUB>894</SUB>> ]
+"3033" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>891</SUB>> ]
+"3051" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>892</SUB>> ]
+"3071" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>894</SUB>> ]
+"3076" [label = <(FIELD_IDENTIFIER,GetC,GetC)<SUB>894</SUB>> ]
+"3034" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>891</SUB>> ]
+"3038" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>891</SUB>> ]
+"3045" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>891</SUB>> ]
+"3052" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>892</SUB>> ]
+"3056" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>892</SUB>> ]
+"3063" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>892</SUB>> ]
+"3039" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>891</SUB>> ]
+"3057" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>892</SUB>> ]
+"3040" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>891</SUB>> ]
+"3042" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>891</SUB>> ]
+"3058" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>892</SUB>> ]
+"3060" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>892</SUB>> ]
+"3023" [label = <(METHOD,CallCharMethodV)<SUB>890</SUB>> ]
+"3077" [label = <(METHOD_RETURN,jchar)<SUB>890</SUB>> ]
+  "3029" -> "3034" 
+  "3029" -> "3047" 
+  "3047" -> "3052" 
+  "3047" -> "3066" 
+  "3066" -> "3071" 
+  "3068" -> "3077" 
+  "3069" -> "3068" 
+  "3070" -> "3069" 
+  "3033" -> "3040" 
+  "3033" -> "3047" 
+  "3051" -> "3058" 
+  "3051" -> "3066" 
+  "3071" -> "3076" 
+  "3076" -> "3070" 
+  "3034" -> "3033" 
+  "3038" -> "3045" 
+  "3045" -> "3077" 
+  "3052" -> "3051" 
+  "3056" -> "3063" 
+  "3063" -> "3077" 
+  "3039" -> "3038" 
+  "3057" -> "3056" 
+  "3040" -> "3042" 
+  "3042" -> "3039" 
+  "3058" -> "3060" 
+  "3060" -> "3057" 
+  "3023" -> "3029" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/650-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/650-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/650-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/650-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "ReleaseCharArrayElements" {  
-"19623" [label = <(METHOD,ReleaseCharArrayElements)> ]
-"19629" [label = <(METHOD_RETURN,ANY)> ]
-  "19623" -> "19629" 
+digraph "SetDoubleArrayRegion" {  
+"19333" [label = <(METHOD,SetDoubleArrayRegion)> ]
+"19340" [label = <(METHOD_RETURN,ANY)> ]
+  "19333" -> "19340" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/651-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/651-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/651-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/651-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "ReleaseIntArrayElements" {  
-"19630" [label = <(METHOD,ReleaseIntArrayElements)> ]
-"19636" [label = <(METHOD_RETURN,ANY)> ]
-  "19630" -> "19636" 
+digraph "SetBooleanArrayRegion" {  
+"19341" [label = <(METHOD,SetBooleanArrayRegion)> ]
+"19348" [label = <(METHOD_RETURN,ANY)> ]
+  "19341" -> "19348" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/652-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/652-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/652-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/652-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "ReleaseLongArrayElements" {  
-"19637" [label = <(METHOD,ReleaseLongArrayElements)> ]
-"19643" [label = <(METHOD_RETURN,ANY)> ]
-  "19637" -> "19643" 
+digraph "NewObjectArray" {  
+"19349" [label = <(METHOD,NewObjectArray)> ]
+"19355" [label = <(METHOD_RETURN,ANY)> ]
+  "19349" -> "19355" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/653-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/653-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/653-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/653-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "ReleaseFloatArrayElements" {  
-"19644" [label = <(METHOD,ReleaseFloatArrayElements)> ]
-"19650" [label = <(METHOD_RETURN,ANY)> ]
-  "19644" -> "19650" 
+digraph "&lt;operator&gt;.minus" {  
+"19356" [label = <(METHOD,&lt;operator&gt;.minus)> ]
+"19359" [label = <(METHOD_RETURN,ANY)> ]
+  "19356" -> "19359" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/654-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/654-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/654-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/654-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "ReleaseDoubleArrayElements" {  
-"19651" [label = <(METHOD,ReleaseDoubleArrayElements)> ]
-"19657" [label = <(METHOD_RETURN,ANY)> ]
-  "19651" -> "19657" 
+digraph "::min" {  
+"19360" [label = <(METHOD,::min)> ]
+"19363" [label = <(METHOD_RETURN,ANY)> ]
+  "19360" -> "19363" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/655-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/655-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/655-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/655-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "ReleaseBooleanArrayElements" {  
-"19658" [label = <(METHOD,ReleaseBooleanArrayElements)> ]
-"19664" [label = <(METHOD_RETURN,ANY)> ]
-  "19658" -> "19664" 
+digraph "Thread::Current" {  
+"19364" [label = <(METHOD,Thread::Current)> ]
+"19367" [label = <(METHOD_RETURN,ANY)> ]
+  "19364" -> "19367" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/656-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/656-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/656-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/656-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "GetPrimitiveArrayCritical" {  
-"19665" [label = <(METHOD,GetPrimitiveArrayCritical)> ]
-"19670" [label = <(METHOD_RETURN,ANY)> ]
-  "19665" -> "19670" 
+digraph "LoadDex" {  
+"19368" [label = <(METHOD,LoadDex)> ]
+"19371" [label = <(METHOD_RETURN,ANY)> ]
+  "19368" -> "19371" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/657-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/657-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/657-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/657-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "ReleasePrimitiveArrayCritical" {  
-"19671" [label = <(METHOD,ReleasePrimitiveArrayCritical)> ]
-"19677" [label = <(METHOD_RETURN,ANY)> ]
-  "19671" -> "19677" 
+digraph "loader" {  
+"19372" [label = <(METHOD,loader)> ]
+"19375" [label = <(METHOD_RETURN,ANY)> ]
+  "19372" -> "19375" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/658-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/658-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/658-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/658-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "GetByteArrayRegion" {  
-"19678" [label = <(METHOD,GetByteArrayRegion)> ]
-"19685" [label = <(METHOD_RETURN,ANY)> ]
-  "19678" -> "19685" 
+digraph "FindClassMethod" {  
+"19376" [label = <(METHOD,FindClassMethod)> ]
+"19382" [label = <(METHOD_RETURN,ANY)> ]
+  "19376" -> "19382" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/659-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/659-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/659-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/659-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "GetShortArrayRegion" {  
-"19686" [label = <(METHOD,GetShortArrayRegion)> ]
-"19693" [label = <(METHOD_RETURN,ANY)> ]
-  "19686" -> "19693" 
+digraph "IsDirect" {  
+"19383" [label = <(METHOD,IsDirect)> ]
+"19386" [label = <(METHOD_RETURN,ANY)> ]
+  "19383" -> "19386" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/66-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/66-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/66-cfg.dot	2023-06-07 19:33:45.377394693 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/66-cfg.dot	2023-06-07 19:33:51.957393992 +0330
@@ -1,53 +1,53 @@
-digraph "CallByteMethodV" {  
-"3044" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>945</SUB>> ]
-"3062" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>946</SUB>> ]
-"3081" [label = <(soa,soa(env))<SUB>947</SUB>> ]
-"3083" [label = <(RETURN,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetB();,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetB();)<SUB>948</SUB>> ]
-"3084" [label = <(GetB,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetB())<SUB>948</SUB>> ]
-"3085" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetB)<SUB>948</SUB>> ]
-"3048" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>945</SUB>> ]
-"3066" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>946</SUB>> ]
-"3086" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>948</SUB>> ]
-"3091" [label = <(FIELD_IDENTIFIER,GetB,GetB)<SUB>948</SUB>> ]
-"3049" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>945</SUB>> ]
-"3053" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>945</SUB>> ]
-"3060" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>945</SUB>> ]
-"3067" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>946</SUB>> ]
-"3071" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>946</SUB>> ]
-"3078" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>946</SUB>> ]
-"3054" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>945</SUB>> ]
-"3072" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>946</SUB>> ]
-"3055" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>945</SUB>> ]
-"3057" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>945</SUB>> ]
-"3073" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>946</SUB>> ]
-"3075" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>946</SUB>> ]
-"3038" [label = <(METHOD,CallByteMethodV)<SUB>944</SUB>> ]
-"3092" [label = <(METHOD_RETURN,jbyte)<SUB>944</SUB>> ]
-  "3044" -> "3049" 
-  "3044" -> "3062" 
-  "3062" -> "3067" 
-  "3062" -> "3081" 
-  "3081" -> "3086" 
-  "3083" -> "3092" 
-  "3084" -> "3083" 
-  "3085" -> "3084" 
-  "3048" -> "3055" 
-  "3048" -> "3062" 
-  "3066" -> "3073" 
-  "3066" -> "3081" 
-  "3086" -> "3091" 
-  "3091" -> "3085" 
-  "3049" -> "3048" 
-  "3053" -> "3060" 
-  "3060" -> "3092" 
-  "3067" -> "3066" 
-  "3071" -> "3078" 
-  "3078" -> "3092" 
-  "3054" -> "3053" 
-  "3072" -> "3071" 
-  "3055" -> "3057" 
-  "3057" -> "3054" 
-  "3073" -> "3075" 
-  "3075" -> "3072" 
-  "3038" -> "3044" 
+digraph "CallCharMethodA" {  
+"3085" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>898</SUB>> ]
+"3103" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>899</SUB>> ]
+"3122" [label = <(soa,soa(env))<SUB>900</SUB>> ]
+"3124" [label = <(RETURN,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetC();,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetC();)<SUB>901</SUB>> ]
+"3125" [label = <(GetC,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetC())<SUB>901</SUB>> ]
+"3126" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetC)<SUB>901</SUB>> ]
+"3089" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>898</SUB>> ]
+"3107" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>899</SUB>> ]
+"3127" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>901</SUB>> ]
+"3132" [label = <(FIELD_IDENTIFIER,GetC,GetC)<SUB>901</SUB>> ]
+"3090" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>898</SUB>> ]
+"3094" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>898</SUB>> ]
+"3101" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>898</SUB>> ]
+"3108" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>899</SUB>> ]
+"3112" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>899</SUB>> ]
+"3119" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>899</SUB>> ]
+"3095" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>898</SUB>> ]
+"3113" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>899</SUB>> ]
+"3096" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>898</SUB>> ]
+"3098" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>898</SUB>> ]
+"3114" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>899</SUB>> ]
+"3116" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>899</SUB>> ]
+"3079" [label = <(METHOD,CallCharMethodA)<SUB>897</SUB>> ]
+"3133" [label = <(METHOD_RETURN,jchar)<SUB>897</SUB>> ]
+  "3085" -> "3090" 
+  "3085" -> "3103" 
+  "3103" -> "3108" 
+  "3103" -> "3122" 
+  "3122" -> "3127" 
+  "3124" -> "3133" 
+  "3125" -> "3124" 
+  "3126" -> "3125" 
+  "3089" -> "3096" 
+  "3089" -> "3103" 
+  "3107" -> "3114" 
+  "3107" -> "3122" 
+  "3127" -> "3132" 
+  "3132" -> "3126" 
+  "3090" -> "3089" 
+  "3094" -> "3101" 
+  "3101" -> "3133" 
+  "3108" -> "3107" 
+  "3112" -> "3119" 
+  "3119" -> "3133" 
+  "3095" -> "3094" 
+  "3113" -> "3112" 
+  "3096" -> "3098" 
+  "3098" -> "3095" 
+  "3114" -> "3116" 
+  "3116" -> "3113" 
+  "3079" -> "3085" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/660-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/660-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/660-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/660-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "GetCharArrayRegion" {  
-"19694" [label = <(METHOD,GetCharArrayRegion)> ]
-"19701" [label = <(METHOD_RETURN,ANY)> ]
-  "19694" -> "19701" 
+digraph "SetEntryPointFromQuickCompiledCode" {  
+"19387" [label = <(METHOD,SetEntryPointFromQuickCompiledCode)> ]
+"19391" [label = <(METHOD_RETURN,ANY)> ]
+  "19387" -> "19391" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/661-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/661-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/661-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/661-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "GetIntArrayRegion" {  
-"19702" [label = <(METHOD,GetIntArrayRegion)> ]
-"19709" [label = <(METHOD_RETURN,ANY)> ]
-  "19702" -> "19709" 
+digraph "GetRuntimeQuickGenericJniStub" {  
+"19392" [label = <(METHOD,GetRuntimeQuickGenericJniStub)> ]
+"19395" [label = <(METHOD_RETURN,ANY)> ]
+  "19392" -> "19395" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/662-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/662-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/662-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/662-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "GetLongArrayRegion" {  
-"19710" [label = <(METHOD,GetLongArrayRegion)> ]
-"19717" [label = <(METHOD_RETURN,ANY)> ]
-  "19710" -> "19717" 
+digraph "TransitionFromSuspendedToRunnable" {  
+"19396" [label = <(METHOD,TransitionFromSuspendedToRunnable)> ]
+"19399" [label = <(METHOD_RETURN,ANY)> ]
+  "19396" -> "19399" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/663-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/663-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/663-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/663-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "GetFloatArrayRegion" {  
-"19718" [label = <(METHOD,GetFloatArrayRegion)> ]
-"19725" [label = <(METHOD_RETURN,ANY)> ]
-  "19718" -> "19725" 
+digraph "Start" {  
+"19400" [label = <(METHOD,Start)> ]
+"19403" [label = <(METHOD_RETURN,ANY)> ]
+  "19400" -> "19403" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/664-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/664-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/664-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/664-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "GetDoubleArrayRegion" {  
-"19726" [label = <(METHOD,GetDoubleArrayRegion)> ]
-"19733" [label = <(METHOD_RETURN,ANY)> ]
-  "19726" -> "19733" 
+digraph "GetJniEnv" {  
+"19404" [label = <(METHOD,GetJniEnv)> ]
+"19407" [label = <(METHOD_RETURN,ANY)> ]
+  "19404" -> "19407" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/665-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/665-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/665-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/665-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "GetBooleanArrayRegion" {  
-"19734" [label = <(METHOD,GetBooleanArrayRegion)> ]
-"19741" [label = <(METHOD_RETURN,ANY)> ]
-  "19734" -> "19741" 
+digraph "GetLocalsCapacity" {  
+"19408" [label = <(METHOD,GetLocalsCapacity)> ]
+"19411" [label = <(METHOD_RETURN,ANY)> ]
+  "19408" -> "19411" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/666-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/666-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/666-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/666-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "SetByteArrayRegion" {  
-"19742" [label = <(METHOD,SetByteArrayRegion)> ]
-"19749" [label = <(METHOD_RETURN,ANY)> ]
-  "19742" -> "19749" 
+digraph "MonitorExit" {  
+"19412" [label = <(METHOD,MonitorExit)> ]
+"19416" [label = <(METHOD_RETURN,ANY)> ]
+  "19412" -> "19416" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/667-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/667-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/667-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/667-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "SetShortArrayRegion" {  
-"19750" [label = <(METHOD,SetShortArrayRegion)> ]
-"19757" [label = <(METHOD_RETURN,ANY)> ]
-  "19750" -> "19757" 
+digraph "MonitorEnter" {  
+"19417" [label = <(METHOD,MonitorEnter)> ]
+"19421" [label = <(METHOD_RETURN,ANY)> ]
+  "19417" -> "19421" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/668-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/668-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/668-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/668-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "SetCharArrayRegion" {  
-"19758" [label = <(METHOD,SetCharArrayRegion)> ]
-"19765" [label = <(METHOD_RETURN,ANY)> ]
-  "19758" -> "19765" 
+digraph "GetLockWord" {  
+"19422" [label = <(METHOD,GetLockWord)> ]
+"19426" [label = <(METHOD_RETURN,ANY)> ]
+  "19422" -> "19426" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/669-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/669-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/669-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/669-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "SetIntArrayRegion" {  
-"19766" [label = <(METHOD,SetIntArrayRegion)> ]
-"19773" [label = <(METHOD_RETURN,ANY)> ]
-  "19766" -> "19773" 
+digraph "GetState" {  
+"19427" [label = <(METHOD,GetState)> ]
+"19430" [label = <(METHOD_RETURN,ANY)> ]
+  "19427" -> "19430" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/67-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/67-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/67-cfg.dot	2023-06-07 19:33:45.377394693 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/67-cfg.dot	2023-06-07 19:33:51.957393992 +0330
@@ -1,53 +1,61 @@
-digraph "CallByteMethodA" {  
-"3100" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>952</SUB>> ]
-"3118" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>953</SUB>> ]
-"3137" [label = <(soa,soa(env))<SUB>954</SUB>> ]
-"3139" [label = <(RETURN,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetB();,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetB();)<SUB>955</SUB>> ]
-"3140" [label = <(GetB,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetB())<SUB>955</SUB>> ]
-"3141" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetB)<SUB>955</SUB>> ]
-"3104" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>952</SUB>> ]
-"3122" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>953</SUB>> ]
-"3142" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>955</SUB>> ]
-"3147" [label = <(FIELD_IDENTIFIER,GetB,GetB)<SUB>955</SUB>> ]
-"3105" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>952</SUB>> ]
-"3109" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>952</SUB>> ]
-"3116" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>952</SUB>> ]
-"3123" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>953</SUB>> ]
-"3127" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>953</SUB>> ]
-"3134" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>953</SUB>> ]
-"3110" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>952</SUB>> ]
-"3128" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>953</SUB>> ]
-"3111" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>952</SUB>> ]
-"3113" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>952</SUB>> ]
-"3129" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>953</SUB>> ]
-"3131" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>953</SUB>> ]
-"3094" [label = <(METHOD,CallByteMethodA)<SUB>951</SUB>> ]
-"3148" [label = <(METHOD_RETURN,jbyte)<SUB>951</SUB>> ]
-  "3100" -> "3105" 
-  "3100" -> "3118" 
-  "3118" -> "3123" 
-  "3118" -> "3137" 
-  "3137" -> "3142" 
-  "3139" -> "3148" 
-  "3140" -> "3139" 
-  "3141" -> "3140" 
-  "3104" -> "3111" 
-  "3104" -> "3118" 
-  "3122" -> "3129" 
-  "3122" -> "3137" 
-  "3142" -> "3147" 
-  "3147" -> "3141" 
-  "3105" -> "3104" 
-  "3109" -> "3116" 
-  "3116" -> "3148" 
-  "3123" -> "3122" 
-  "3127" -> "3134" 
-  "3134" -> "3148" 
-  "3110" -> "3109" 
-  "3128" -> "3127" 
-  "3111" -> "3113" 
-  "3113" -> "3110" 
-  "3129" -> "3131" 
-  "3131" -> "3128" 
-  "3094" -> "3100" 
+digraph "CallDoubleMethod" {  
+"3141" [label = <(va_start,va_start(ap, mid))<SUB>906</SUB>> ]
+"3145" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>907</SUB>> ]
+"3148" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>908</SUB>> ]
+"3166" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>909</SUB>> ]
+"3185" [label = <(soa,soa(env))<SUB>910</SUB>> ]
+"3188" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap)))<SUB>911</SUB>> ]
+"3194" [label = <(RETURN,return result.GetD();,return result.GetD();)<SUB>912</SUB>> ]
+"3146" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>907</SUB>> ]
+"3189" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>911</SUB>> ]
+"3195" [label = <(GetD,result.GetD())<SUB>912</SUB>> ]
+"3196" [label = <(&lt;operator&gt;.fieldAccess,result.GetD)<SUB>912</SUB>> ]
+"3152" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>908</SUB>> ]
+"3170" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>909</SUB>> ]
+"3198" [label = <(FIELD_IDENTIFIER,GetD,GetD)<SUB>912</SUB>> ]
+"3153" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>908</SUB>> ]
+"3157" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>908</SUB>> ]
+"3164" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>908</SUB>> ]
+"3171" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>909</SUB>> ]
+"3175" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>909</SUB>> ]
+"3182" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>909</SUB>> ]
+"3158" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>908</SUB>> ]
+"3176" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>909</SUB>> ]
+"3159" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>908</SUB>> ]
+"3161" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>908</SUB>> ]
+"3177" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>909</SUB>> ]
+"3179" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>909</SUB>> ]
+"3135" [label = <(METHOD,CallDoubleMethod)<SUB>904</SUB>> ]
+"3199" [label = <(METHOD_RETURN,jdouble)<SUB>904</SUB>> ]
+  "3141" -> "3146" 
+  "3145" -> "3148" 
+  "3148" -> "3153" 
+  "3148" -> "3166" 
+  "3166" -> "3171" 
+  "3166" -> "3185" 
+  "3185" -> "3189" 
+  "3188" -> "3198" 
+  "3194" -> "3199" 
+  "3146" -> "3145" 
+  "3189" -> "3188" 
+  "3195" -> "3194" 
+  "3196" -> "3195" 
+  "3152" -> "3159" 
+  "3152" -> "3166" 
+  "3170" -> "3177" 
+  "3170" -> "3185" 
+  "3198" -> "3196" 
+  "3153" -> "3152" 
+  "3157" -> "3164" 
+  "3164" -> "3199" 
+  "3171" -> "3170" 
+  "3175" -> "3182" 
+  "3182" -> "3199" 
+  "3158" -> "3157" 
+  "3176" -> "3175" 
+  "3159" -> "3161" 
+  "3161" -> "3158" 
+  "3177" -> "3179" 
+  "3179" -> "3176" 
+  "3135" -> "3141" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/670-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/670-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/670-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/670-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "SetLongArrayRegion" {  
-"19774" [label = <(METHOD,SetLongArrayRegion)> ]
-"19781" [label = <(METHOD_RETURN,ANY)> ]
-  "19774" -> "19781" 
+digraph "IsLocked" {  
+"19431" [label = <(METHOD,IsLocked)> ]
+"19434" [label = <(METHOD_RETURN,ANY)> ]
+  "19431" -> "19434" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/671-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/671-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/671-cfg.dot	2023-06-07 19:33:45.577394671 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/671-cfg.dot	2023-06-07 19:33:52.147393970 +0330
@@ -1,5 +1,5 @@
-digraph "SetFloatArrayRegion" {  
-"19782" [label = <(METHOD,SetFloatArrayRegion)> ]
-"19789" [label = <(METHOD_RETURN,ANY)> ]
-  "19782" -> "19789" 
+digraph "FatLockMonitor" {  
+"19435" [label = <(METHOD,FatLockMonitor)> ]
+"19438" [label = <(METHOD_RETURN,ANY)> ]
+  "19435" -> "19438" 
 }
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out: 672-cfg.dot
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out: 673-cfg.dot
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out: 674-cfg.dot
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out: 675-cfg.dot
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out: 676-cfg.dot
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out: 677-cfg.dot
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out: 678-cfg.dot
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out: 679-cfg.dot
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/68-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/68-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/68-cfg.dot	2023-06-07 19:33:45.377394693 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/68-cfg.dot	2023-06-07 19:33:51.957393992 +0330
@@ -1,61 +1,53 @@
-digraph "CallCharMethod" {  
-"3156" [label = <(va_start,va_start(ap, mid))<SUB>960</SUB>> ]
-"3160" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>961</SUB>> ]
-"3163" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>962</SUB>> ]
-"3181" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>963</SUB>> ]
-"3200" [label = <(soa,soa(env))<SUB>964</SUB>> ]
-"3203" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap)))<SUB>965</SUB>> ]
-"3209" [label = <(RETURN,return result.GetC();,return result.GetC();)<SUB>966</SUB>> ]
-"3161" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>961</SUB>> ]
-"3204" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>965</SUB>> ]
-"3210" [label = <(GetC,result.GetC())<SUB>966</SUB>> ]
-"3211" [label = <(&lt;operator&gt;.fieldAccess,result.GetC)<SUB>966</SUB>> ]
-"3167" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>962</SUB>> ]
-"3185" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>963</SUB>> ]
-"3213" [label = <(FIELD_IDENTIFIER,GetC,GetC)<SUB>966</SUB>> ]
-"3168" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>962</SUB>> ]
-"3172" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>962</SUB>> ]
-"3179" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>962</SUB>> ]
-"3186" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>963</SUB>> ]
-"3190" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>963</SUB>> ]
-"3197" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>963</SUB>> ]
-"3173" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>962</SUB>> ]
-"3191" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>963</SUB>> ]
-"3174" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>962</SUB>> ]
-"3176" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>962</SUB>> ]
-"3192" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>963</SUB>> ]
-"3194" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>963</SUB>> ]
-"3150" [label = <(METHOD,CallCharMethod)<SUB>958</SUB>> ]
-"3214" [label = <(METHOD_RETURN,jchar)<SUB>958</SUB>> ]
-  "3156" -> "3161" 
-  "3160" -> "3163" 
-  "3163" -> "3168" 
-  "3163" -> "3181" 
-  "3181" -> "3186" 
-  "3181" -> "3200" 
-  "3200" -> "3204" 
-  "3203" -> "3213" 
-  "3209" -> "3214" 
-  "3161" -> "3160" 
-  "3204" -> "3203" 
-  "3210" -> "3209" 
-  "3211" -> "3210" 
-  "3167" -> "3174" 
-  "3167" -> "3181" 
-  "3185" -> "3192" 
-  "3185" -> "3200" 
-  "3213" -> "3211" 
-  "3168" -> "3167" 
-  "3172" -> "3179" 
-  "3179" -> "3214" 
-  "3186" -> "3185" 
-  "3190" -> "3197" 
-  "3197" -> "3214" 
-  "3173" -> "3172" 
-  "3191" -> "3190" 
-  "3174" -> "3176" 
-  "3176" -> "3173" 
-  "3192" -> "3194" 
-  "3194" -> "3191" 
-  "3150" -> "3156" 
+digraph "CallDoubleMethodV" {  
+"3207" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>916</SUB>> ]
+"3225" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>917</SUB>> ]
+"3244" [label = <(soa,soa(env))<SUB>918</SUB>> ]
+"3246" [label = <(RETURN,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetD();,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetD();)<SUB>919</SUB>> ]
+"3247" [label = <(GetD,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetD())<SUB>919</SUB>> ]
+"3248" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetD)<SUB>919</SUB>> ]
+"3211" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>916</SUB>> ]
+"3229" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>917</SUB>> ]
+"3249" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>919</SUB>> ]
+"3254" [label = <(FIELD_IDENTIFIER,GetD,GetD)<SUB>919</SUB>> ]
+"3212" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>916</SUB>> ]
+"3216" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>916</SUB>> ]
+"3223" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>916</SUB>> ]
+"3230" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>917</SUB>> ]
+"3234" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>917</SUB>> ]
+"3241" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>917</SUB>> ]
+"3217" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>916</SUB>> ]
+"3235" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>917</SUB>> ]
+"3218" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>916</SUB>> ]
+"3220" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>916</SUB>> ]
+"3236" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>917</SUB>> ]
+"3238" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>917</SUB>> ]
+"3201" [label = <(METHOD,CallDoubleMethodV)<SUB>915</SUB>> ]
+"3255" [label = <(METHOD_RETURN,jdouble)<SUB>915</SUB>> ]
+  "3207" -> "3212" 
+  "3207" -> "3225" 
+  "3225" -> "3230" 
+  "3225" -> "3244" 
+  "3244" -> "3249" 
+  "3246" -> "3255" 
+  "3247" -> "3246" 
+  "3248" -> "3247" 
+  "3211" -> "3218" 
+  "3211" -> "3225" 
+  "3229" -> "3236" 
+  "3229" -> "3244" 
+  "3249" -> "3254" 
+  "3254" -> "3248" 
+  "3212" -> "3211" 
+  "3216" -> "3223" 
+  "3223" -> "3255" 
+  "3230" -> "3229" 
+  "3234" -> "3241" 
+  "3241" -> "3255" 
+  "3217" -> "3216" 
+  "3235" -> "3234" 
+  "3218" -> "3220" 
+  "3220" -> "3217" 
+  "3236" -> "3238" 
+  "3238" -> "3235" 
+  "3201" -> "3207" 
 }
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out: 680-cfg.dot
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out: 681-cfg.dot
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out: 682-cfg.dot
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out: 683-cfg.dot
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out: 684-cfg.dot
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out: 685-cfg.dot
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out: 686-cfg.dot
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out: 687-cfg.dot
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out: 688-cfg.dot
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out: 689-cfg.dot
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/69-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/69-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/69-cfg.dot	2023-06-07 19:33:45.377394693 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/69-cfg.dot	2023-06-07 19:33:51.967393990 +0330
@@ -1,53 +1,53 @@
-digraph "CallCharMethodV" {  
-"3222" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>970</SUB>> ]
-"3240" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>971</SUB>> ]
-"3259" [label = <(soa,soa(env))<SUB>972</SUB>> ]
-"3261" [label = <(RETURN,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetC();,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetC();)<SUB>973</SUB>> ]
-"3262" [label = <(GetC,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetC())<SUB>973</SUB>> ]
-"3263" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetC)<SUB>973</SUB>> ]
-"3226" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>970</SUB>> ]
-"3244" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>971</SUB>> ]
-"3264" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>973</SUB>> ]
-"3269" [label = <(FIELD_IDENTIFIER,GetC,GetC)<SUB>973</SUB>> ]
-"3227" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>970</SUB>> ]
-"3231" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>970</SUB>> ]
-"3238" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>970</SUB>> ]
-"3245" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>971</SUB>> ]
-"3249" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>971</SUB>> ]
-"3256" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>971</SUB>> ]
-"3232" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>970</SUB>> ]
-"3250" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>971</SUB>> ]
-"3233" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>970</SUB>> ]
-"3235" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>970</SUB>> ]
-"3251" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>971</SUB>> ]
-"3253" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>971</SUB>> ]
-"3216" [label = <(METHOD,CallCharMethodV)<SUB>969</SUB>> ]
-"3270" [label = <(METHOD_RETURN,jchar)<SUB>969</SUB>> ]
-  "3222" -> "3227" 
-  "3222" -> "3240" 
-  "3240" -> "3245" 
-  "3240" -> "3259" 
-  "3259" -> "3264" 
-  "3261" -> "3270" 
-  "3262" -> "3261" 
-  "3263" -> "3262" 
-  "3226" -> "3233" 
-  "3226" -> "3240" 
-  "3244" -> "3251" 
-  "3244" -> "3259" 
-  "3264" -> "3269" 
-  "3269" -> "3263" 
-  "3227" -> "3226" 
-  "3231" -> "3238" 
-  "3238" -> "3270" 
-  "3245" -> "3244" 
-  "3249" -> "3256" 
-  "3256" -> "3270" 
-  "3232" -> "3231" 
-  "3250" -> "3249" 
-  "3233" -> "3235" 
-  "3235" -> "3232" 
-  "3251" -> "3253" 
-  "3253" -> "3250" 
-  "3216" -> "3222" 
+digraph "CallDoubleMethodA" {  
+"3263" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>923</SUB>> ]
+"3281" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>924</SUB>> ]
+"3300" [label = <(soa,soa(env))<SUB>925</SUB>> ]
+"3302" [label = <(RETURN,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetD();,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetD();)<SUB>926</SUB>> ]
+"3303" [label = <(GetD,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetD())<SUB>926</SUB>> ]
+"3304" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetD)<SUB>926</SUB>> ]
+"3267" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>923</SUB>> ]
+"3285" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>924</SUB>> ]
+"3305" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>926</SUB>> ]
+"3310" [label = <(FIELD_IDENTIFIER,GetD,GetD)<SUB>926</SUB>> ]
+"3268" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>923</SUB>> ]
+"3272" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>923</SUB>> ]
+"3279" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>923</SUB>> ]
+"3286" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>924</SUB>> ]
+"3290" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>924</SUB>> ]
+"3297" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>924</SUB>> ]
+"3273" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>923</SUB>> ]
+"3291" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>924</SUB>> ]
+"3274" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>923</SUB>> ]
+"3276" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>923</SUB>> ]
+"3292" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>924</SUB>> ]
+"3294" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>924</SUB>> ]
+"3257" [label = <(METHOD,CallDoubleMethodA)<SUB>922</SUB>> ]
+"3311" [label = <(METHOD_RETURN,jdouble)<SUB>922</SUB>> ]
+  "3263" -> "3268" 
+  "3263" -> "3281" 
+  "3281" -> "3286" 
+  "3281" -> "3300" 
+  "3300" -> "3305" 
+  "3302" -> "3311" 
+  "3303" -> "3302" 
+  "3304" -> "3303" 
+  "3267" -> "3274" 
+  "3267" -> "3281" 
+  "3285" -> "3292" 
+  "3285" -> "3300" 
+  "3305" -> "3310" 
+  "3310" -> "3304" 
+  "3268" -> "3267" 
+  "3272" -> "3279" 
+  "3279" -> "3311" 
+  "3286" -> "3285" 
+  "3290" -> "3297" 
+  "3297" -> "3311" 
+  "3273" -> "3272" 
+  "3291" -> "3290" 
+  "3274" -> "3276" 
+  "3276" -> "3273" 
+  "3292" -> "3294" 
+  "3294" -> "3291" 
+  "3257" -> "3263" 
 }
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out: 690-cfg.dot
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out: 691-cfg.dot
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out: 692-cfg.dot
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out: 693-cfg.dot
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/7-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/7-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/7-cfg.dot	2023-06-07 19:33:45.327394699 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/7-cfg.dot	2023-06-07 19:33:51.917393996 +0330
@@ -1,9 +1,5 @@
-digraph "~ScopedVAArgs" {  
-"42" [label = <(va_end,va_end(*args))<SUB>74</SUB>> ]
-"43" [label = <(&lt;operator&gt;.indirection,*args)<SUB>74</SUB>> ]
-"40" [label = <(METHOD,~ScopedVAArgs)<SUB>74</SUB>> ]
-"45" [label = <(METHOD_RETURN,ANY)<SUB>74</SUB>> ]
-  "42" -> "45" 
-  "43" -> "42" 
-  "40" -> "43" 
+digraph "NotifyGetField" {  
+"80" [label = <(METHOD,NotifyGetField)<SUB>154</SUB>> ]
+"84" [label = <(METHOD_RETURN,void)<SUB>154</SUB>> ]
+  "80" -> "84" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/70-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/70-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/70-cfg.dot	2023-06-07 19:33:45.377394693 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/70-cfg.dot	2023-06-07 19:33:51.967393990 +0330
@@ -1,53 +1,61 @@
-digraph "CallCharMethodA" {  
-"3278" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>977</SUB>> ]
-"3296" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>978</SUB>> ]
-"3315" [label = <(soa,soa(env))<SUB>979</SUB>> ]
-"3317" [label = <(RETURN,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetC();,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetC();)<SUB>980</SUB>> ]
-"3318" [label = <(GetC,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetC())<SUB>980</SUB>> ]
-"3319" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetC)<SUB>980</SUB>> ]
-"3282" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>977</SUB>> ]
-"3300" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>978</SUB>> ]
-"3320" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>980</SUB>> ]
-"3325" [label = <(FIELD_IDENTIFIER,GetC,GetC)<SUB>980</SUB>> ]
-"3283" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>977</SUB>> ]
-"3287" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>977</SUB>> ]
-"3294" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>977</SUB>> ]
-"3301" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>978</SUB>> ]
-"3305" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>978</SUB>> ]
-"3312" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>978</SUB>> ]
-"3288" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>977</SUB>> ]
-"3306" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>978</SUB>> ]
-"3289" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>977</SUB>> ]
-"3291" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>977</SUB>> ]
-"3307" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>978</SUB>> ]
-"3309" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>978</SUB>> ]
-"3272" [label = <(METHOD,CallCharMethodA)<SUB>976</SUB>> ]
-"3326" [label = <(METHOD_RETURN,jchar)<SUB>976</SUB>> ]
-  "3278" -> "3283" 
-  "3278" -> "3296" 
-  "3296" -> "3301" 
-  "3296" -> "3315" 
-  "3315" -> "3320" 
-  "3317" -> "3326" 
-  "3318" -> "3317" 
-  "3319" -> "3318" 
-  "3282" -> "3289" 
-  "3282" -> "3296" 
-  "3300" -> "3307" 
-  "3300" -> "3315" 
-  "3320" -> "3325" 
-  "3325" -> "3319" 
-  "3283" -> "3282" 
-  "3287" -> "3294" 
-  "3294" -> "3326" 
-  "3301" -> "3300" 
-  "3305" -> "3312" 
-  "3312" -> "3326" 
-  "3288" -> "3287" 
-  "3306" -> "3305" 
-  "3289" -> "3291" 
-  "3291" -> "3288" 
-  "3307" -> "3309" 
-  "3309" -> "3306" 
-  "3272" -> "3278" 
+digraph "CallFloatMethod" {  
+"3319" [label = <(va_start,va_start(ap, mid))<SUB>931</SUB>> ]
+"3323" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>932</SUB>> ]
+"3326" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>933</SUB>> ]
+"3344" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>934</SUB>> ]
+"3363" [label = <(soa,soa(env))<SUB>935</SUB>> ]
+"3366" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap)))<SUB>936</SUB>> ]
+"3372" [label = <(RETURN,return result.GetF();,return result.GetF();)<SUB>937</SUB>> ]
+"3324" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>932</SUB>> ]
+"3367" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>936</SUB>> ]
+"3373" [label = <(GetF,result.GetF())<SUB>937</SUB>> ]
+"3374" [label = <(&lt;operator&gt;.fieldAccess,result.GetF)<SUB>937</SUB>> ]
+"3330" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>933</SUB>> ]
+"3348" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>934</SUB>> ]
+"3376" [label = <(FIELD_IDENTIFIER,GetF,GetF)<SUB>937</SUB>> ]
+"3331" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>933</SUB>> ]
+"3335" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>933</SUB>> ]
+"3342" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>933</SUB>> ]
+"3349" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>934</SUB>> ]
+"3353" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>934</SUB>> ]
+"3360" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>934</SUB>> ]
+"3336" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>933</SUB>> ]
+"3354" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>934</SUB>> ]
+"3337" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>933</SUB>> ]
+"3339" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>933</SUB>> ]
+"3355" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>934</SUB>> ]
+"3357" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>934</SUB>> ]
+"3313" [label = <(METHOD,CallFloatMethod)<SUB>929</SUB>> ]
+"3377" [label = <(METHOD_RETURN,jfloat)<SUB>929</SUB>> ]
+  "3319" -> "3324" 
+  "3323" -> "3326" 
+  "3326" -> "3331" 
+  "3326" -> "3344" 
+  "3344" -> "3349" 
+  "3344" -> "3363" 
+  "3363" -> "3367" 
+  "3366" -> "3376" 
+  "3372" -> "3377" 
+  "3324" -> "3323" 
+  "3367" -> "3366" 
+  "3373" -> "3372" 
+  "3374" -> "3373" 
+  "3330" -> "3337" 
+  "3330" -> "3344" 
+  "3348" -> "3355" 
+  "3348" -> "3363" 
+  "3376" -> "3374" 
+  "3331" -> "3330" 
+  "3335" -> "3342" 
+  "3342" -> "3377" 
+  "3349" -> "3348" 
+  "3353" -> "3360" 
+  "3360" -> "3377" 
+  "3336" -> "3335" 
+  "3354" -> "3353" 
+  "3337" -> "3339" 
+  "3339" -> "3336" 
+  "3355" -> "3357" 
+  "3357" -> "3354" 
+  "3313" -> "3319" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/71-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/71-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/71-cfg.dot	2023-06-07 19:33:45.377394693 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/71-cfg.dot	2023-06-07 19:33:51.967393990 +0330
@@ -1,61 +1,53 @@
-digraph "CallDoubleMethod" {  
-"3334" [label = <(va_start,va_start(ap, mid))<SUB>985</SUB>> ]
-"3338" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>986</SUB>> ]
-"3341" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>987</SUB>> ]
-"3359" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>988</SUB>> ]
-"3378" [label = <(soa,soa(env))<SUB>989</SUB>> ]
-"3381" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap)))<SUB>990</SUB>> ]
-"3387" [label = <(RETURN,return result.GetD();,return result.GetD();)<SUB>991</SUB>> ]
-"3339" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>986</SUB>> ]
-"3382" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>990</SUB>> ]
-"3388" [label = <(GetD,result.GetD())<SUB>991</SUB>> ]
-"3389" [label = <(&lt;operator&gt;.fieldAccess,result.GetD)<SUB>991</SUB>> ]
-"3345" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>987</SUB>> ]
-"3363" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>988</SUB>> ]
-"3391" [label = <(FIELD_IDENTIFIER,GetD,GetD)<SUB>991</SUB>> ]
-"3346" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>987</SUB>> ]
-"3350" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>987</SUB>> ]
-"3357" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>987</SUB>> ]
-"3364" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>988</SUB>> ]
-"3368" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>988</SUB>> ]
-"3375" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>988</SUB>> ]
-"3351" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>987</SUB>> ]
-"3369" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>988</SUB>> ]
-"3352" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>987</SUB>> ]
-"3354" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>987</SUB>> ]
-"3370" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>988</SUB>> ]
-"3372" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>988</SUB>> ]
-"3328" [label = <(METHOD,CallDoubleMethod)<SUB>983</SUB>> ]
-"3392" [label = <(METHOD_RETURN,jdouble)<SUB>983</SUB>> ]
-  "3334" -> "3339" 
-  "3338" -> "3341" 
-  "3341" -> "3346" 
-  "3341" -> "3359" 
-  "3359" -> "3364" 
-  "3359" -> "3378" 
-  "3378" -> "3382" 
-  "3381" -> "3391" 
-  "3387" -> "3392" 
-  "3339" -> "3338" 
-  "3382" -> "3381" 
-  "3388" -> "3387" 
-  "3389" -> "3388" 
-  "3345" -> "3352" 
-  "3345" -> "3359" 
-  "3363" -> "3370" 
-  "3363" -> "3378" 
-  "3391" -> "3389" 
-  "3346" -> "3345" 
-  "3350" -> "3357" 
-  "3357" -> "3392" 
-  "3364" -> "3363" 
-  "3368" -> "3375" 
-  "3375" -> "3392" 
-  "3351" -> "3350" 
-  "3369" -> "3368" 
-  "3352" -> "3354" 
-  "3354" -> "3351" 
-  "3370" -> "3372" 
-  "3372" -> "3369" 
-  "3328" -> "3334" 
+digraph "CallFloatMethodV" {  
+"3385" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>941</SUB>> ]
+"3403" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>942</SUB>> ]
+"3422" [label = <(soa,soa(env))<SUB>943</SUB>> ]
+"3424" [label = <(RETURN,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetF();,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetF();)<SUB>944</SUB>> ]
+"3425" [label = <(GetF,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetF())<SUB>944</SUB>> ]
+"3426" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetF)<SUB>944</SUB>> ]
+"3389" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>941</SUB>> ]
+"3407" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>942</SUB>> ]
+"3427" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>944</SUB>> ]
+"3432" [label = <(FIELD_IDENTIFIER,GetF,GetF)<SUB>944</SUB>> ]
+"3390" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>941</SUB>> ]
+"3394" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>941</SUB>> ]
+"3401" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>941</SUB>> ]
+"3408" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>942</SUB>> ]
+"3412" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>942</SUB>> ]
+"3419" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>942</SUB>> ]
+"3395" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>941</SUB>> ]
+"3413" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>942</SUB>> ]
+"3396" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>941</SUB>> ]
+"3398" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>941</SUB>> ]
+"3414" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>942</SUB>> ]
+"3416" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>942</SUB>> ]
+"3379" [label = <(METHOD,CallFloatMethodV)<SUB>940</SUB>> ]
+"3433" [label = <(METHOD_RETURN,jfloat)<SUB>940</SUB>> ]
+  "3385" -> "3390" 
+  "3385" -> "3403" 
+  "3403" -> "3408" 
+  "3403" -> "3422" 
+  "3422" -> "3427" 
+  "3424" -> "3433" 
+  "3425" -> "3424" 
+  "3426" -> "3425" 
+  "3389" -> "3396" 
+  "3389" -> "3403" 
+  "3407" -> "3414" 
+  "3407" -> "3422" 
+  "3427" -> "3432" 
+  "3432" -> "3426" 
+  "3390" -> "3389" 
+  "3394" -> "3401" 
+  "3401" -> "3433" 
+  "3408" -> "3407" 
+  "3412" -> "3419" 
+  "3419" -> "3433" 
+  "3395" -> "3394" 
+  "3413" -> "3412" 
+  "3396" -> "3398" 
+  "3398" -> "3395" 
+  "3414" -> "3416" 
+  "3416" -> "3413" 
+  "3379" -> "3385" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/72-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/72-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/72-cfg.dot	2023-06-07 19:33:45.377394693 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/72-cfg.dot	2023-06-07 19:33:51.967393990 +0330
@@ -1,53 +1,53 @@
-digraph "CallDoubleMethodV" {  
-"3400" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>995</SUB>> ]
-"3418" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>996</SUB>> ]
-"3437" [label = <(soa,soa(env))<SUB>997</SUB>> ]
-"3439" [label = <(RETURN,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetD();,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetD();)<SUB>998</SUB>> ]
-"3440" [label = <(GetD,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetD())<SUB>998</SUB>> ]
-"3441" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetD)<SUB>998</SUB>> ]
-"3404" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>995</SUB>> ]
-"3422" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>996</SUB>> ]
-"3442" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>998</SUB>> ]
-"3447" [label = <(FIELD_IDENTIFIER,GetD,GetD)<SUB>998</SUB>> ]
-"3405" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>995</SUB>> ]
-"3409" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>995</SUB>> ]
-"3416" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>995</SUB>> ]
-"3423" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>996</SUB>> ]
-"3427" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>996</SUB>> ]
-"3434" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>996</SUB>> ]
-"3410" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>995</SUB>> ]
-"3428" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>996</SUB>> ]
-"3411" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>995</SUB>> ]
-"3413" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>995</SUB>> ]
-"3429" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>996</SUB>> ]
-"3431" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>996</SUB>> ]
-"3394" [label = <(METHOD,CallDoubleMethodV)<SUB>994</SUB>> ]
-"3448" [label = <(METHOD_RETURN,jdouble)<SUB>994</SUB>> ]
-  "3400" -> "3405" 
-  "3400" -> "3418" 
-  "3418" -> "3423" 
-  "3418" -> "3437" 
-  "3437" -> "3442" 
-  "3439" -> "3448" 
-  "3440" -> "3439" 
-  "3441" -> "3440" 
-  "3404" -> "3411" 
-  "3404" -> "3418" 
-  "3422" -> "3429" 
-  "3422" -> "3437" 
-  "3442" -> "3447" 
-  "3447" -> "3441" 
-  "3405" -> "3404" 
-  "3409" -> "3416" 
-  "3416" -> "3448" 
-  "3423" -> "3422" 
-  "3427" -> "3434" 
-  "3434" -> "3448" 
-  "3410" -> "3409" 
-  "3428" -> "3427" 
-  "3411" -> "3413" 
-  "3413" -> "3410" 
-  "3429" -> "3431" 
-  "3431" -> "3428" 
-  "3394" -> "3400" 
+digraph "CallFloatMethodA" {  
+"3441" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>948</SUB>> ]
+"3459" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>949</SUB>> ]
+"3478" [label = <(soa,soa(env))<SUB>950</SUB>> ]
+"3480" [label = <(RETURN,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetF();,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetF();)<SUB>951</SUB>> ]
+"3481" [label = <(GetF,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetF())<SUB>951</SUB>> ]
+"3482" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetF)<SUB>951</SUB>> ]
+"3445" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>948</SUB>> ]
+"3463" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>949</SUB>> ]
+"3483" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>951</SUB>> ]
+"3488" [label = <(FIELD_IDENTIFIER,GetF,GetF)<SUB>951</SUB>> ]
+"3446" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>948</SUB>> ]
+"3450" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>948</SUB>> ]
+"3457" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>948</SUB>> ]
+"3464" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>949</SUB>> ]
+"3468" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>949</SUB>> ]
+"3475" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>949</SUB>> ]
+"3451" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>948</SUB>> ]
+"3469" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>949</SUB>> ]
+"3452" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>948</SUB>> ]
+"3454" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>948</SUB>> ]
+"3470" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>949</SUB>> ]
+"3472" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>949</SUB>> ]
+"3435" [label = <(METHOD,CallFloatMethodA)<SUB>947</SUB>> ]
+"3489" [label = <(METHOD_RETURN,jfloat)<SUB>947</SUB>> ]
+  "3441" -> "3446" 
+  "3441" -> "3459" 
+  "3459" -> "3464" 
+  "3459" -> "3478" 
+  "3478" -> "3483" 
+  "3480" -> "3489" 
+  "3481" -> "3480" 
+  "3482" -> "3481" 
+  "3445" -> "3452" 
+  "3445" -> "3459" 
+  "3463" -> "3470" 
+  "3463" -> "3478" 
+  "3483" -> "3488" 
+  "3488" -> "3482" 
+  "3446" -> "3445" 
+  "3450" -> "3457" 
+  "3457" -> "3489" 
+  "3464" -> "3463" 
+  "3468" -> "3475" 
+  "3475" -> "3489" 
+  "3451" -> "3450" 
+  "3469" -> "3468" 
+  "3452" -> "3454" 
+  "3454" -> "3451" 
+  "3470" -> "3472" 
+  "3472" -> "3469" 
+  "3435" -> "3441" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/73-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/73-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/73-cfg.dot	2023-06-07 19:33:45.387394691 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/73-cfg.dot	2023-06-07 19:33:51.967393990 +0330
@@ -1,53 +1,61 @@
-digraph "CallDoubleMethodA" {  
-"3456" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1002</SUB>> ]
-"3474" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1003</SUB>> ]
-"3493" [label = <(soa,soa(env))<SUB>1004</SUB>> ]
-"3495" [label = <(RETURN,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetD();,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetD();)<SUB>1005</SUB>> ]
-"3496" [label = <(GetD,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetD())<SUB>1005</SUB>> ]
-"3497" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetD)<SUB>1005</SUB>> ]
-"3460" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1002</SUB>> ]
-"3478" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1003</SUB>> ]
-"3498" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>1005</SUB>> ]
-"3503" [label = <(FIELD_IDENTIFIER,GetD,GetD)<SUB>1005</SUB>> ]
-"3461" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1002</SUB>> ]
-"3465" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1002</SUB>> ]
-"3472" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1002</SUB>> ]
-"3479" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1003</SUB>> ]
-"3483" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1003</SUB>> ]
-"3490" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1003</SUB>> ]
-"3466" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1002</SUB>> ]
-"3484" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1003</SUB>> ]
-"3467" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1002</SUB>> ]
-"3469" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1002</SUB>> ]
-"3485" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1003</SUB>> ]
-"3487" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1003</SUB>> ]
-"3450" [label = <(METHOD,CallDoubleMethodA)<SUB>1001</SUB>> ]
-"3504" [label = <(METHOD_RETURN,jdouble)<SUB>1001</SUB>> ]
-  "3456" -> "3461" 
-  "3456" -> "3474" 
-  "3474" -> "3479" 
-  "3474" -> "3493" 
-  "3493" -> "3498" 
-  "3495" -> "3504" 
-  "3496" -> "3495" 
-  "3497" -> "3496" 
-  "3460" -> "3467" 
-  "3460" -> "3474" 
-  "3478" -> "3485" 
-  "3478" -> "3493" 
-  "3498" -> "3503" 
-  "3503" -> "3497" 
-  "3461" -> "3460" 
-  "3465" -> "3472" 
-  "3472" -> "3504" 
-  "3479" -> "3478" 
-  "3483" -> "3490" 
-  "3490" -> "3504" 
-  "3466" -> "3465" 
-  "3484" -> "3483" 
-  "3467" -> "3469" 
-  "3469" -> "3466" 
-  "3485" -> "3487" 
-  "3487" -> "3484" 
-  "3450" -> "3456" 
+digraph "CallIntMethod" {  
+"3497" [label = <(va_start,va_start(ap, mid))<SUB>956</SUB>> ]
+"3501" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>957</SUB>> ]
+"3504" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>958</SUB>> ]
+"3522" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>959</SUB>> ]
+"3541" [label = <(soa,soa(env))<SUB>960</SUB>> ]
+"3544" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap)))<SUB>961</SUB>> ]
+"3550" [label = <(RETURN,return result.GetI();,return result.GetI();)<SUB>962</SUB>> ]
+"3502" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>957</SUB>> ]
+"3545" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>961</SUB>> ]
+"3551" [label = <(GetI,result.GetI())<SUB>962</SUB>> ]
+"3552" [label = <(&lt;operator&gt;.fieldAccess,result.GetI)<SUB>962</SUB>> ]
+"3508" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>958</SUB>> ]
+"3526" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>959</SUB>> ]
+"3554" [label = <(FIELD_IDENTIFIER,GetI,GetI)<SUB>962</SUB>> ]
+"3509" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>958</SUB>> ]
+"3513" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>958</SUB>> ]
+"3520" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>958</SUB>> ]
+"3527" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>959</SUB>> ]
+"3531" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>959</SUB>> ]
+"3538" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>959</SUB>> ]
+"3514" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>958</SUB>> ]
+"3532" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>959</SUB>> ]
+"3515" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>958</SUB>> ]
+"3517" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>958</SUB>> ]
+"3533" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>959</SUB>> ]
+"3535" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>959</SUB>> ]
+"3491" [label = <(METHOD,CallIntMethod)<SUB>954</SUB>> ]
+"3555" [label = <(METHOD_RETURN,jint)<SUB>954</SUB>> ]
+  "3497" -> "3502" 
+  "3501" -> "3504" 
+  "3504" -> "3509" 
+  "3504" -> "3522" 
+  "3522" -> "3527" 
+  "3522" -> "3541" 
+  "3541" -> "3545" 
+  "3544" -> "3554" 
+  "3550" -> "3555" 
+  "3502" -> "3501" 
+  "3545" -> "3544" 
+  "3551" -> "3550" 
+  "3552" -> "3551" 
+  "3508" -> "3515" 
+  "3508" -> "3522" 
+  "3526" -> "3533" 
+  "3526" -> "3541" 
+  "3554" -> "3552" 
+  "3509" -> "3508" 
+  "3513" -> "3520" 
+  "3520" -> "3555" 
+  "3527" -> "3526" 
+  "3531" -> "3538" 
+  "3538" -> "3555" 
+  "3514" -> "3513" 
+  "3532" -> "3531" 
+  "3515" -> "3517" 
+  "3517" -> "3514" 
+  "3533" -> "3535" 
+  "3535" -> "3532" 
+  "3491" -> "3497" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/74-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/74-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/74-cfg.dot	2023-06-07 19:33:45.387394691 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/74-cfg.dot	2023-06-07 19:33:51.967393990 +0330
@@ -1,61 +1,53 @@
-digraph "CallFloatMethod" {  
-"3512" [label = <(va_start,va_start(ap, mid))<SUB>1010</SUB>> ]
-"3516" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1011</SUB>> ]
-"3519" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1012</SUB>> ]
-"3537" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1013</SUB>> ]
-"3556" [label = <(soa,soa(env))<SUB>1014</SUB>> ]
-"3559" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap)))<SUB>1015</SUB>> ]
-"3565" [label = <(RETURN,return result.GetF();,return result.GetF();)<SUB>1016</SUB>> ]
-"3517" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1011</SUB>> ]
-"3560" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>1015</SUB>> ]
-"3566" [label = <(GetF,result.GetF())<SUB>1016</SUB>> ]
-"3567" [label = <(&lt;operator&gt;.fieldAccess,result.GetF)<SUB>1016</SUB>> ]
-"3523" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1012</SUB>> ]
-"3541" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1013</SUB>> ]
-"3569" [label = <(FIELD_IDENTIFIER,GetF,GetF)<SUB>1016</SUB>> ]
-"3524" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1012</SUB>> ]
-"3528" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1012</SUB>> ]
-"3535" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1012</SUB>> ]
-"3542" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1013</SUB>> ]
-"3546" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1013</SUB>> ]
-"3553" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1013</SUB>> ]
-"3529" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1012</SUB>> ]
-"3547" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1013</SUB>> ]
-"3530" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1012</SUB>> ]
-"3532" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1012</SUB>> ]
-"3548" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1013</SUB>> ]
-"3550" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1013</SUB>> ]
-"3506" [label = <(METHOD,CallFloatMethod)<SUB>1008</SUB>> ]
-"3570" [label = <(METHOD_RETURN,jfloat)<SUB>1008</SUB>> ]
-  "3512" -> "3517" 
-  "3516" -> "3519" 
-  "3519" -> "3524" 
-  "3519" -> "3537" 
-  "3537" -> "3542" 
-  "3537" -> "3556" 
-  "3556" -> "3560" 
-  "3559" -> "3569" 
-  "3565" -> "3570" 
-  "3517" -> "3516" 
-  "3560" -> "3559" 
-  "3566" -> "3565" 
-  "3567" -> "3566" 
-  "3523" -> "3530" 
-  "3523" -> "3537" 
-  "3541" -> "3548" 
-  "3541" -> "3556" 
-  "3569" -> "3567" 
-  "3524" -> "3523" 
-  "3528" -> "3535" 
-  "3535" -> "3570" 
-  "3542" -> "3541" 
-  "3546" -> "3553" 
-  "3553" -> "3570" 
-  "3529" -> "3528" 
-  "3547" -> "3546" 
-  "3530" -> "3532" 
-  "3532" -> "3529" 
-  "3548" -> "3550" 
-  "3550" -> "3547" 
-  "3506" -> "3512" 
+digraph "CallIntMethodV" {  
+"3563" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>966</SUB>> ]
+"3581" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>967</SUB>> ]
+"3600" [label = <(soa,soa(env))<SUB>968</SUB>> ]
+"3602" [label = <(RETURN,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetI();,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetI();)<SUB>969</SUB>> ]
+"3603" [label = <(GetI,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetI())<SUB>969</SUB>> ]
+"3604" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetI)<SUB>969</SUB>> ]
+"3567" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>966</SUB>> ]
+"3585" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>967</SUB>> ]
+"3605" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>969</SUB>> ]
+"3610" [label = <(FIELD_IDENTIFIER,GetI,GetI)<SUB>969</SUB>> ]
+"3568" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>966</SUB>> ]
+"3572" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>966</SUB>> ]
+"3579" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>966</SUB>> ]
+"3586" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>967</SUB>> ]
+"3590" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>967</SUB>> ]
+"3597" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>967</SUB>> ]
+"3573" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>966</SUB>> ]
+"3591" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>967</SUB>> ]
+"3574" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>966</SUB>> ]
+"3576" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>966</SUB>> ]
+"3592" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>967</SUB>> ]
+"3594" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>967</SUB>> ]
+"3557" [label = <(METHOD,CallIntMethodV)<SUB>965</SUB>> ]
+"3611" [label = <(METHOD_RETURN,jint)<SUB>965</SUB>> ]
+  "3563" -> "3568" 
+  "3563" -> "3581" 
+  "3581" -> "3586" 
+  "3581" -> "3600" 
+  "3600" -> "3605" 
+  "3602" -> "3611" 
+  "3603" -> "3602" 
+  "3604" -> "3603" 
+  "3567" -> "3574" 
+  "3567" -> "3581" 
+  "3585" -> "3592" 
+  "3585" -> "3600" 
+  "3605" -> "3610" 
+  "3610" -> "3604" 
+  "3568" -> "3567" 
+  "3572" -> "3579" 
+  "3579" -> "3611" 
+  "3586" -> "3585" 
+  "3590" -> "3597" 
+  "3597" -> "3611" 
+  "3573" -> "3572" 
+  "3591" -> "3590" 
+  "3574" -> "3576" 
+  "3576" -> "3573" 
+  "3592" -> "3594" 
+  "3594" -> "3591" 
+  "3557" -> "3563" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/75-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/75-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/75-cfg.dot	2023-06-07 19:33:45.387394691 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/75-cfg.dot	2023-06-07 19:33:51.967393990 +0330
@@ -1,53 +1,53 @@
-digraph "CallFloatMethodV" {  
-"3578" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1020</SUB>> ]
-"3596" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1021</SUB>> ]
-"3615" [label = <(soa,soa(env))<SUB>1022</SUB>> ]
-"3617" [label = <(RETURN,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetF();,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetF();)<SUB>1023</SUB>> ]
-"3618" [label = <(GetF,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetF())<SUB>1023</SUB>> ]
-"3619" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetF)<SUB>1023</SUB>> ]
-"3582" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1020</SUB>> ]
-"3600" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1021</SUB>> ]
-"3620" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>1023</SUB>> ]
-"3625" [label = <(FIELD_IDENTIFIER,GetF,GetF)<SUB>1023</SUB>> ]
-"3583" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1020</SUB>> ]
-"3587" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1020</SUB>> ]
-"3594" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1020</SUB>> ]
-"3601" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1021</SUB>> ]
-"3605" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1021</SUB>> ]
-"3612" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1021</SUB>> ]
-"3588" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1020</SUB>> ]
-"3606" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1021</SUB>> ]
-"3589" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1020</SUB>> ]
-"3591" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1020</SUB>> ]
-"3607" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1021</SUB>> ]
-"3609" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1021</SUB>> ]
-"3572" [label = <(METHOD,CallFloatMethodV)<SUB>1019</SUB>> ]
-"3626" [label = <(METHOD_RETURN,jfloat)<SUB>1019</SUB>> ]
-  "3578" -> "3583" 
-  "3578" -> "3596" 
-  "3596" -> "3601" 
-  "3596" -> "3615" 
-  "3615" -> "3620" 
-  "3617" -> "3626" 
-  "3618" -> "3617" 
-  "3619" -> "3618" 
-  "3582" -> "3589" 
-  "3582" -> "3596" 
-  "3600" -> "3607" 
-  "3600" -> "3615" 
-  "3620" -> "3625" 
-  "3625" -> "3619" 
-  "3583" -> "3582" 
-  "3587" -> "3594" 
-  "3594" -> "3626" 
-  "3601" -> "3600" 
-  "3605" -> "3612" 
-  "3612" -> "3626" 
-  "3588" -> "3587" 
-  "3606" -> "3605" 
-  "3589" -> "3591" 
-  "3591" -> "3588" 
-  "3607" -> "3609" 
-  "3609" -> "3606" 
-  "3572" -> "3578" 
+digraph "CallIntMethodA" {  
+"3619" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>973</SUB>> ]
+"3637" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>974</SUB>> ]
+"3656" [label = <(soa,soa(env))<SUB>975</SUB>> ]
+"3658" [label = <(RETURN,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetI();,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetI();)<SUB>976</SUB>> ]
+"3659" [label = <(GetI,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetI())<SUB>976</SUB>> ]
+"3660" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetI)<SUB>976</SUB>> ]
+"3623" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>973</SUB>> ]
+"3641" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>974</SUB>> ]
+"3661" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>976</SUB>> ]
+"3666" [label = <(FIELD_IDENTIFIER,GetI,GetI)<SUB>976</SUB>> ]
+"3624" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>973</SUB>> ]
+"3628" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>973</SUB>> ]
+"3635" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>973</SUB>> ]
+"3642" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>974</SUB>> ]
+"3646" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>974</SUB>> ]
+"3653" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>974</SUB>> ]
+"3629" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>973</SUB>> ]
+"3647" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>974</SUB>> ]
+"3630" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>973</SUB>> ]
+"3632" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>973</SUB>> ]
+"3648" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>974</SUB>> ]
+"3650" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>974</SUB>> ]
+"3613" [label = <(METHOD,CallIntMethodA)<SUB>972</SUB>> ]
+"3667" [label = <(METHOD_RETURN,jint)<SUB>972</SUB>> ]
+  "3619" -> "3624" 
+  "3619" -> "3637" 
+  "3637" -> "3642" 
+  "3637" -> "3656" 
+  "3656" -> "3661" 
+  "3658" -> "3667" 
+  "3659" -> "3658" 
+  "3660" -> "3659" 
+  "3623" -> "3630" 
+  "3623" -> "3637" 
+  "3641" -> "3648" 
+  "3641" -> "3656" 
+  "3661" -> "3666" 
+  "3666" -> "3660" 
+  "3624" -> "3623" 
+  "3628" -> "3635" 
+  "3635" -> "3667" 
+  "3642" -> "3641" 
+  "3646" -> "3653" 
+  "3653" -> "3667" 
+  "3629" -> "3628" 
+  "3647" -> "3646" 
+  "3630" -> "3632" 
+  "3632" -> "3629" 
+  "3648" -> "3650" 
+  "3650" -> "3647" 
+  "3613" -> "3619" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/76-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/76-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/76-cfg.dot	2023-06-07 19:33:45.387394691 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/76-cfg.dot	2023-06-07 19:33:51.967393990 +0330
@@ -1,53 +1,61 @@
-digraph "CallFloatMethodA" {  
-"3634" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1027</SUB>> ]
-"3652" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1028</SUB>> ]
-"3671" [label = <(soa,soa(env))<SUB>1029</SUB>> ]
-"3673" [label = <(RETURN,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetF();,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetF();)<SUB>1030</SUB>> ]
-"3674" [label = <(GetF,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetF())<SUB>1030</SUB>> ]
-"3675" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetF)<SUB>1030</SUB>> ]
-"3638" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1027</SUB>> ]
-"3656" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1028</SUB>> ]
-"3676" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>1030</SUB>> ]
-"3681" [label = <(FIELD_IDENTIFIER,GetF,GetF)<SUB>1030</SUB>> ]
-"3639" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1027</SUB>> ]
-"3643" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1027</SUB>> ]
-"3650" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1027</SUB>> ]
-"3657" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1028</SUB>> ]
-"3661" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1028</SUB>> ]
-"3668" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1028</SUB>> ]
-"3644" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1027</SUB>> ]
-"3662" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1028</SUB>> ]
-"3645" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1027</SUB>> ]
-"3647" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1027</SUB>> ]
-"3663" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1028</SUB>> ]
-"3665" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1028</SUB>> ]
-"3628" [label = <(METHOD,CallFloatMethodA)<SUB>1026</SUB>> ]
-"3682" [label = <(METHOD_RETURN,jfloat)<SUB>1026</SUB>> ]
-  "3634" -> "3639" 
-  "3634" -> "3652" 
-  "3652" -> "3657" 
-  "3652" -> "3671" 
-  "3671" -> "3676" 
-  "3673" -> "3682" 
-  "3674" -> "3673" 
-  "3675" -> "3674" 
-  "3638" -> "3645" 
-  "3638" -> "3652" 
-  "3656" -> "3663" 
-  "3656" -> "3671" 
-  "3676" -> "3681" 
-  "3681" -> "3675" 
-  "3639" -> "3638" 
-  "3643" -> "3650" 
-  "3650" -> "3682" 
-  "3657" -> "3656" 
-  "3661" -> "3668" 
-  "3668" -> "3682" 
-  "3644" -> "3643" 
-  "3662" -> "3661" 
-  "3645" -> "3647" 
-  "3647" -> "3644" 
-  "3663" -> "3665" 
-  "3665" -> "3662" 
-  "3628" -> "3634" 
+digraph "CallLongMethod" {  
+"3675" [label = <(va_start,va_start(ap, mid))<SUB>981</SUB>> ]
+"3679" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>982</SUB>> ]
+"3682" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>983</SUB>> ]
+"3700" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>984</SUB>> ]
+"3719" [label = <(soa,soa(env))<SUB>985</SUB>> ]
+"3722" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap)))<SUB>986</SUB>> ]
+"3728" [label = <(RETURN,return result.GetJ();,return result.GetJ();)<SUB>987</SUB>> ]
+"3680" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>982</SUB>> ]
+"3723" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>986</SUB>> ]
+"3729" [label = <(GetJ,result.GetJ())<SUB>987</SUB>> ]
+"3730" [label = <(&lt;operator&gt;.fieldAccess,result.GetJ)<SUB>987</SUB>> ]
+"3686" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>983</SUB>> ]
+"3704" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>984</SUB>> ]
+"3732" [label = <(FIELD_IDENTIFIER,GetJ,GetJ)<SUB>987</SUB>> ]
+"3687" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>983</SUB>> ]
+"3691" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>983</SUB>> ]
+"3698" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>983</SUB>> ]
+"3705" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>984</SUB>> ]
+"3709" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>984</SUB>> ]
+"3716" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>984</SUB>> ]
+"3692" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>983</SUB>> ]
+"3710" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>984</SUB>> ]
+"3693" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>983</SUB>> ]
+"3695" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>983</SUB>> ]
+"3711" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>984</SUB>> ]
+"3713" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>984</SUB>> ]
+"3669" [label = <(METHOD,CallLongMethod)<SUB>979</SUB>> ]
+"3733" [label = <(METHOD_RETURN,jlong)<SUB>979</SUB>> ]
+  "3675" -> "3680" 
+  "3679" -> "3682" 
+  "3682" -> "3687" 
+  "3682" -> "3700" 
+  "3700" -> "3705" 
+  "3700" -> "3719" 
+  "3719" -> "3723" 
+  "3722" -> "3732" 
+  "3728" -> "3733" 
+  "3680" -> "3679" 
+  "3723" -> "3722" 
+  "3729" -> "3728" 
+  "3730" -> "3729" 
+  "3686" -> "3693" 
+  "3686" -> "3700" 
+  "3704" -> "3711" 
+  "3704" -> "3719" 
+  "3732" -> "3730" 
+  "3687" -> "3686" 
+  "3691" -> "3698" 
+  "3698" -> "3733" 
+  "3705" -> "3704" 
+  "3709" -> "3716" 
+  "3716" -> "3733" 
+  "3692" -> "3691" 
+  "3710" -> "3709" 
+  "3693" -> "3695" 
+  "3695" -> "3692" 
+  "3711" -> "3713" 
+  "3713" -> "3710" 
+  "3669" -> "3675" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/77-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/77-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/77-cfg.dot	2023-06-07 19:33:45.387394691 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/77-cfg.dot	2023-06-07 19:33:51.967393990 +0330
@@ -1,61 +1,53 @@
-digraph "CallIntMethod" {  
-"3690" [label = <(va_start,va_start(ap, mid))<SUB>1035</SUB>> ]
-"3694" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1036</SUB>> ]
-"3697" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1037</SUB>> ]
-"3715" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1038</SUB>> ]
-"3734" [label = <(soa,soa(env))<SUB>1039</SUB>> ]
-"3737" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap)))<SUB>1040</SUB>> ]
-"3743" [label = <(RETURN,return result.GetI();,return result.GetI();)<SUB>1041</SUB>> ]
-"3695" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1036</SUB>> ]
-"3738" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>1040</SUB>> ]
-"3744" [label = <(GetI,result.GetI())<SUB>1041</SUB>> ]
-"3745" [label = <(&lt;operator&gt;.fieldAccess,result.GetI)<SUB>1041</SUB>> ]
-"3701" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1037</SUB>> ]
-"3719" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1038</SUB>> ]
-"3747" [label = <(FIELD_IDENTIFIER,GetI,GetI)<SUB>1041</SUB>> ]
-"3702" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1037</SUB>> ]
-"3706" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1037</SUB>> ]
-"3713" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1037</SUB>> ]
-"3720" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1038</SUB>> ]
-"3724" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1038</SUB>> ]
-"3731" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1038</SUB>> ]
-"3707" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1037</SUB>> ]
-"3725" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1038</SUB>> ]
-"3708" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1037</SUB>> ]
-"3710" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1037</SUB>> ]
-"3726" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1038</SUB>> ]
-"3728" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1038</SUB>> ]
-"3684" [label = <(METHOD,CallIntMethod)<SUB>1033</SUB>> ]
-"3748" [label = <(METHOD_RETURN,jint)<SUB>1033</SUB>> ]
-  "3690" -> "3695" 
-  "3694" -> "3697" 
-  "3697" -> "3702" 
-  "3697" -> "3715" 
-  "3715" -> "3720" 
-  "3715" -> "3734" 
-  "3734" -> "3738" 
-  "3737" -> "3747" 
-  "3743" -> "3748" 
-  "3695" -> "3694" 
-  "3738" -> "3737" 
-  "3744" -> "3743" 
-  "3745" -> "3744" 
-  "3701" -> "3708" 
-  "3701" -> "3715" 
-  "3719" -> "3726" 
-  "3719" -> "3734" 
-  "3747" -> "3745" 
-  "3702" -> "3701" 
-  "3706" -> "3713" 
-  "3713" -> "3748" 
-  "3720" -> "3719" 
-  "3724" -> "3731" 
-  "3731" -> "3748" 
-  "3707" -> "3706" 
-  "3725" -> "3724" 
-  "3708" -> "3710" 
-  "3710" -> "3707" 
-  "3726" -> "3728" 
-  "3728" -> "3725" 
-  "3684" -> "3690" 
+digraph "CallLongMethodV" {  
+"3741" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>991</SUB>> ]
+"3759" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>992</SUB>> ]
+"3778" [label = <(soa,soa(env))<SUB>993</SUB>> ]
+"3780" [label = <(RETURN,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetJ();,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetJ();)<SUB>994</SUB>> ]
+"3781" [label = <(GetJ,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetJ())<SUB>994</SUB>> ]
+"3782" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetJ)<SUB>994</SUB>> ]
+"3745" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>991</SUB>> ]
+"3763" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>992</SUB>> ]
+"3783" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>994</SUB>> ]
+"3788" [label = <(FIELD_IDENTIFIER,GetJ,GetJ)<SUB>994</SUB>> ]
+"3746" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>991</SUB>> ]
+"3750" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>991</SUB>> ]
+"3757" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>991</SUB>> ]
+"3764" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>992</SUB>> ]
+"3768" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>992</SUB>> ]
+"3775" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>992</SUB>> ]
+"3751" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>991</SUB>> ]
+"3769" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>992</SUB>> ]
+"3752" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>991</SUB>> ]
+"3754" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>991</SUB>> ]
+"3770" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>992</SUB>> ]
+"3772" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>992</SUB>> ]
+"3735" [label = <(METHOD,CallLongMethodV)<SUB>990</SUB>> ]
+"3789" [label = <(METHOD_RETURN,jlong)<SUB>990</SUB>> ]
+  "3741" -> "3746" 
+  "3741" -> "3759" 
+  "3759" -> "3764" 
+  "3759" -> "3778" 
+  "3778" -> "3783" 
+  "3780" -> "3789" 
+  "3781" -> "3780" 
+  "3782" -> "3781" 
+  "3745" -> "3752" 
+  "3745" -> "3759" 
+  "3763" -> "3770" 
+  "3763" -> "3778" 
+  "3783" -> "3788" 
+  "3788" -> "3782" 
+  "3746" -> "3745" 
+  "3750" -> "3757" 
+  "3757" -> "3789" 
+  "3764" -> "3763" 
+  "3768" -> "3775" 
+  "3775" -> "3789" 
+  "3751" -> "3750" 
+  "3769" -> "3768" 
+  "3752" -> "3754" 
+  "3754" -> "3751" 
+  "3770" -> "3772" 
+  "3772" -> "3769" 
+  "3735" -> "3741" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/78-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/78-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/78-cfg.dot	2023-06-07 19:33:45.387394691 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/78-cfg.dot	2023-06-07 19:33:51.967393990 +0330
@@ -1,53 +1,53 @@
-digraph "CallIntMethodV" {  
-"3756" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1045</SUB>> ]
-"3774" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1046</SUB>> ]
-"3793" [label = <(soa,soa(env))<SUB>1047</SUB>> ]
-"3795" [label = <(RETURN,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetI();,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetI();)<SUB>1048</SUB>> ]
-"3796" [label = <(GetI,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetI())<SUB>1048</SUB>> ]
-"3797" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetI)<SUB>1048</SUB>> ]
-"3760" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1045</SUB>> ]
-"3778" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1046</SUB>> ]
-"3798" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>1048</SUB>> ]
-"3803" [label = <(FIELD_IDENTIFIER,GetI,GetI)<SUB>1048</SUB>> ]
-"3761" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1045</SUB>> ]
-"3765" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1045</SUB>> ]
-"3772" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1045</SUB>> ]
-"3779" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1046</SUB>> ]
-"3783" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1046</SUB>> ]
-"3790" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1046</SUB>> ]
-"3766" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1045</SUB>> ]
-"3784" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1046</SUB>> ]
-"3767" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1045</SUB>> ]
-"3769" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1045</SUB>> ]
-"3785" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1046</SUB>> ]
-"3787" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1046</SUB>> ]
-"3750" [label = <(METHOD,CallIntMethodV)<SUB>1044</SUB>> ]
-"3804" [label = <(METHOD_RETURN,jint)<SUB>1044</SUB>> ]
-  "3756" -> "3761" 
-  "3756" -> "3774" 
-  "3774" -> "3779" 
-  "3774" -> "3793" 
-  "3793" -> "3798" 
-  "3795" -> "3804" 
-  "3796" -> "3795" 
-  "3797" -> "3796" 
-  "3760" -> "3767" 
-  "3760" -> "3774" 
-  "3778" -> "3785" 
-  "3778" -> "3793" 
-  "3798" -> "3803" 
-  "3803" -> "3797" 
-  "3761" -> "3760" 
-  "3765" -> "3772" 
-  "3772" -> "3804" 
-  "3779" -> "3778" 
-  "3783" -> "3790" 
-  "3790" -> "3804" 
-  "3766" -> "3765" 
-  "3784" -> "3783" 
-  "3767" -> "3769" 
-  "3769" -> "3766" 
-  "3785" -> "3787" 
-  "3787" -> "3784" 
-  "3750" -> "3756" 
+digraph "CallLongMethodA" {  
+"3797" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>998</SUB>> ]
+"3815" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>999</SUB>> ]
+"3834" [label = <(soa,soa(env))<SUB>1000</SUB>> ]
+"3836" [label = <(RETURN,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetJ();,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetJ();)<SUB>1001</SUB>> ]
+"3837" [label = <(GetJ,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetJ())<SUB>1001</SUB>> ]
+"3838" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetJ)<SUB>1001</SUB>> ]
+"3801" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>998</SUB>> ]
+"3819" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>999</SUB>> ]
+"3839" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>1001</SUB>> ]
+"3844" [label = <(FIELD_IDENTIFIER,GetJ,GetJ)<SUB>1001</SUB>> ]
+"3802" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>998</SUB>> ]
+"3806" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>998</SUB>> ]
+"3813" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>998</SUB>> ]
+"3820" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>999</SUB>> ]
+"3824" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>999</SUB>> ]
+"3831" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>999</SUB>> ]
+"3807" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>998</SUB>> ]
+"3825" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>999</SUB>> ]
+"3808" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>998</SUB>> ]
+"3810" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>998</SUB>> ]
+"3826" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>999</SUB>> ]
+"3828" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>999</SUB>> ]
+"3791" [label = <(METHOD,CallLongMethodA)<SUB>997</SUB>> ]
+"3845" [label = <(METHOD_RETURN,jlong)<SUB>997</SUB>> ]
+  "3797" -> "3802" 
+  "3797" -> "3815" 
+  "3815" -> "3820" 
+  "3815" -> "3834" 
+  "3834" -> "3839" 
+  "3836" -> "3845" 
+  "3837" -> "3836" 
+  "3838" -> "3837" 
+  "3801" -> "3808" 
+  "3801" -> "3815" 
+  "3819" -> "3826" 
+  "3819" -> "3834" 
+  "3839" -> "3844" 
+  "3844" -> "3838" 
+  "3802" -> "3801" 
+  "3806" -> "3813" 
+  "3813" -> "3845" 
+  "3820" -> "3819" 
+  "3824" -> "3831" 
+  "3831" -> "3845" 
+  "3807" -> "3806" 
+  "3825" -> "3824" 
+  "3808" -> "3810" 
+  "3810" -> "3807" 
+  "3826" -> "3828" 
+  "3828" -> "3825" 
+  "3791" -> "3797" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/79-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/79-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/79-cfg.dot	2023-06-07 19:33:45.387394691 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/79-cfg.dot	2023-06-07 19:33:51.967393990 +0330
@@ -1,53 +1,61 @@
-digraph "CallIntMethodA" {  
-"3812" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1052</SUB>> ]
-"3830" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1053</SUB>> ]
-"3849" [label = <(soa,soa(env))<SUB>1054</SUB>> ]
-"3851" [label = <(RETURN,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetI();,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetI();)<SUB>1055</SUB>> ]
-"3852" [label = <(GetI,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetI())<SUB>1055</SUB>> ]
-"3853" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetI)<SUB>1055</SUB>> ]
-"3816" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1052</SUB>> ]
-"3834" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1053</SUB>> ]
-"3854" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>1055</SUB>> ]
-"3859" [label = <(FIELD_IDENTIFIER,GetI,GetI)<SUB>1055</SUB>> ]
-"3817" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1052</SUB>> ]
-"3821" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1052</SUB>> ]
-"3828" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1052</SUB>> ]
-"3835" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1053</SUB>> ]
-"3839" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1053</SUB>> ]
-"3846" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1053</SUB>> ]
-"3822" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1052</SUB>> ]
-"3840" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1053</SUB>> ]
-"3823" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1052</SUB>> ]
-"3825" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1052</SUB>> ]
-"3841" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1053</SUB>> ]
-"3843" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1053</SUB>> ]
-"3806" [label = <(METHOD,CallIntMethodA)<SUB>1051</SUB>> ]
-"3860" [label = <(METHOD_RETURN,jint)<SUB>1051</SUB>> ]
-  "3812" -> "3817" 
-  "3812" -> "3830" 
-  "3830" -> "3835" 
-  "3830" -> "3849" 
-  "3849" -> "3854" 
-  "3851" -> "3860" 
-  "3852" -> "3851" 
-  "3853" -> "3852" 
-  "3816" -> "3823" 
-  "3816" -> "3830" 
-  "3834" -> "3841" 
-  "3834" -> "3849" 
-  "3854" -> "3859" 
-  "3859" -> "3853" 
-  "3817" -> "3816" 
-  "3821" -> "3828" 
-  "3828" -> "3860" 
-  "3835" -> "3834" 
-  "3839" -> "3846" 
-  "3846" -> "3860" 
-  "3822" -> "3821" 
-  "3840" -> "3839" 
-  "3823" -> "3825" 
-  "3825" -> "3822" 
-  "3841" -> "3843" 
-  "3843" -> "3840" 
-  "3806" -> "3812" 
+digraph "CallShortMethod" {  
+"3853" [label = <(va_start,va_start(ap, mid))<SUB>1006</SUB>> ]
+"3857" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1007</SUB>> ]
+"3860" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1008</SUB>> ]
+"3878" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1009</SUB>> ]
+"3897" [label = <(soa,soa(env))<SUB>1010</SUB>> ]
+"3900" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap)))<SUB>1011</SUB>> ]
+"3906" [label = <(RETURN,return result.GetS();,return result.GetS();)<SUB>1012</SUB>> ]
+"3858" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1007</SUB>> ]
+"3901" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>1011</SUB>> ]
+"3907" [label = <(GetS,result.GetS())<SUB>1012</SUB>> ]
+"3908" [label = <(&lt;operator&gt;.fieldAccess,result.GetS)<SUB>1012</SUB>> ]
+"3864" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1008</SUB>> ]
+"3882" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1009</SUB>> ]
+"3910" [label = <(FIELD_IDENTIFIER,GetS,GetS)<SUB>1012</SUB>> ]
+"3865" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1008</SUB>> ]
+"3869" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1008</SUB>> ]
+"3876" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1008</SUB>> ]
+"3883" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1009</SUB>> ]
+"3887" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1009</SUB>> ]
+"3894" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1009</SUB>> ]
+"3870" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1008</SUB>> ]
+"3888" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1009</SUB>> ]
+"3871" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1008</SUB>> ]
+"3873" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1008</SUB>> ]
+"3889" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1009</SUB>> ]
+"3891" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1009</SUB>> ]
+"3847" [label = <(METHOD,CallShortMethod)<SUB>1004</SUB>> ]
+"3911" [label = <(METHOD_RETURN,jshort)<SUB>1004</SUB>> ]
+  "3853" -> "3858" 
+  "3857" -> "3860" 
+  "3860" -> "3865" 
+  "3860" -> "3878" 
+  "3878" -> "3883" 
+  "3878" -> "3897" 
+  "3897" -> "3901" 
+  "3900" -> "3910" 
+  "3906" -> "3911" 
+  "3858" -> "3857" 
+  "3901" -> "3900" 
+  "3907" -> "3906" 
+  "3908" -> "3907" 
+  "3864" -> "3871" 
+  "3864" -> "3878" 
+  "3882" -> "3889" 
+  "3882" -> "3897" 
+  "3910" -> "3908" 
+  "3865" -> "3864" 
+  "3869" -> "3876" 
+  "3876" -> "3911" 
+  "3883" -> "3882" 
+  "3887" -> "3894" 
+  "3894" -> "3911" 
+  "3870" -> "3869" 
+  "3888" -> "3887" 
+  "3871" -> "3873" 
+  "3873" -> "3870" 
+  "3889" -> "3891" 
+  "3891" -> "3888" 
+  "3847" -> "3853" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/8-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/8-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/8-cfg.dot	2023-06-07 19:33:45.337394696 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/8-cfg.dot	2023-06-07 19:33:51.917393996 +0330
@@ -1,153 +1,63 @@
-digraph "VisitModifiedUtf8Chars" {  
-"58" [label = <(DCHECK_LE,DCHECK_LE(byte_count, strlen(utf8)))<SUB>93</SUB>> ]
-"63" [label = <(&lt;operator&gt;.assignment,len = 0)<SUB>94</SUB>> ]
-"67" [label = <(&lt;operator&gt;.assignment,* end = utf8 + byte_count)<SUB>95</SUB>> ]
-"223" [label = <(RETURN,return len;,return len;)<SUB>153</SUB>> ]
-"60" [label = <(strlen,strlen(utf8))<SUB>93</SUB>> ]
-"69" [label = <(&lt;operator&gt;.addition,utf8 + byte_count)<SUB>95</SUB>> ]
-"73" [label = <(&lt;operator&gt;.notEquals,utf8 != end)<SUB>96</SUB>> ]
-"78" [label = <(&lt;operator&gt;.assignment,ic = *utf8)<SUB>97</SUB>> ]
-"101" [label = <(&lt;operator&gt;.assignment,is_ascii = [utf8]() {\012 const char* ptr = utf8; // Make a copy that can be modified by GetUtf16FromUtf8().\012 return mirror::String::IsASCII(dchecked_integral_cast&lt;uint16_t&gt;(GetUtf16FromUtf8(&amp;ptr)));\012 })<SUB>105</SUB>> ]
-"214" [label = <(good,good(utf8, 4u))<SUB>149</SUB>> ]
-"217" [label = <(&lt;operator&gt;.assignmentPlus,utf8 += 4u)<SUB>150</SUB>> ]
-"220" [label = <(&lt;operator&gt;.assignmentPlus,len += 2u)<SUB>151</SUB>> ]
-"80" [label = <(&lt;operator&gt;.indirection,*utf8)<SUB>97</SUB>> ]
-"83" [label = <(LIKELY,LIKELY((ic &amp; 0x80) == 0))<SUB>98</SUB>> ]
-"103" [label = <(METHOD_REF,ANY anonymous_lambda_8 (),is_ascii = [utf8]() {\012 const char* ptr = utf8; // Make a copy that can be modified by GetUtf16FromUtf8().\012 return mirror::String::IsASCII(dchecked_integral_cast&lt;uint16_t&gt;(GetUtf16FromUtf8(&amp;ptr)));\012 })<SUB>105</SUB>> ]
-"105" [label = <(&lt;operator&gt;.equals,(ic &amp; 0x20) == 0)<SUB>111</SUB>> ]
-"152" [label = <(&lt;operator&gt;.equals,(ic &amp; 0x10) == 0)<SUB>127</SUB>> ]
-"199" [label = <(&lt;operator&gt;.lessThan,static_cast&lt;size_t&gt;(end - utf8) &lt; 4u)<SUB>146</SUB>> ]
-"84" [label = <(&lt;operator&gt;.equals,(ic &amp; 0x80) == 0)<SUB>98</SUB>> ]
-"90" [label = <(good,good(utf8, 1u))<SUB>100</SUB>> ]
-"93" [label = <(&lt;operator&gt;.assignmentPlus,utf8 += 1u)<SUB>101</SUB>> ]
-"96" [label = <(&lt;operator&gt;.assignmentPlus,len += 1u)<SUB>102</SUB>> ]
-"106" [label = <(&lt;operator&gt;.and,ic &amp; 0x20)<SUB>111</SUB>> ]
-"144" [label = <(&lt;operator&gt;.assignmentPlus,utf8 += 2u)<SUB>123</SUB>> ]
-"147" [label = <(&lt;operator&gt;.assignmentPlus,len += 1u)<SUB>124</SUB>> ]
-"153" [label = <(&lt;operator&gt;.and,ic &amp; 0x10)<SUB>127</SUB>> ]
-"191" [label = <(&lt;operator&gt;.assignmentPlus,utf8 += 3u)<SUB>139</SUB>> ]
-"194" [label = <(&lt;operator&gt;.assignmentPlus,len += 1u)<SUB>140</SUB>> ]
-"200" [label = <(&lt;operator&gt;.cast,static_cast&lt;size_t&gt;(end - utf8))<SUB>146</SUB>> ]
-"207" [label = <(RETURN,return bad() ? 0u : len + 1u;,return bad() ? 0u : len + 1u;)<SUB>147</SUB>> ]
-"85" [label = <(&lt;operator&gt;.and,ic &amp; 0x80)<SUB>98</SUB>> ]
-"112" [label = <(&lt;operator&gt;.lessThan,static_cast&lt;size_t&gt;(end - utf8) &lt; 2u)<SUB>113</SUB>> ]
-"128" [label = <(&lt;operator&gt;.logicalAnd,mirror::kUseStringCompression &amp;&amp; is_ascii())<SUB>116</SUB>> ]
-"159" [label = <(&lt;operator&gt;.lessThan,static_cast&lt;size_t&gt;(end - utf8) &lt; 3u)<SUB>129</SUB>> ]
-"175" [label = <(&lt;operator&gt;.logicalAnd,mirror::kUseStringCompression &amp;&amp; is_ascii())<SUB>132</SUB>> ]
-"201" [label = <(UNKNOWN,size_t,size_t)<SUB>146</SUB>> ]
-"202" [label = <(&lt;operator&gt;.subtraction,end - utf8)<SUB>146</SUB>> ]
-"208" [label = <(&lt;operator&gt;.conditional,bad() ? 0u : len + 1u)<SUB>147</SUB>> ]
-"113" [label = <(&lt;operator&gt;.cast,static_cast&lt;size_t&gt;(end - utf8))<SUB>113</SUB>> ]
-"120" [label = <(RETURN,return bad() ? 0u : len + 1u;,return bad() ? 0u : len + 1u;)<SUB>114</SUB>> ]
-"129" [label = <(&lt;operator&gt;.fieldAccess,mirror::kUseStringCompression)<SUB>116</SUB>> ]
-"132" [label = <(is_ascii,is_ascii())<SUB>116</SUB>> ]
-"160" [label = <(&lt;operator&gt;.cast,static_cast&lt;size_t&gt;(end - utf8))<SUB>129</SUB>> ]
-"167" [label = <(RETURN,return bad() ? 0u : len + 1u;,return bad() ? 0u : len + 1u;)<SUB>130</SUB>> ]
-"176" [label = <(&lt;operator&gt;.fieldAccess,mirror::kUseStringCompression)<SUB>132</SUB>> ]
-"179" [label = <(is_ascii,is_ascii())<SUB>132</SUB>> ]
-"209" [label = <(bad,bad())<SUB>147</SUB>> ]
-"211" [label = <(&lt;operator&gt;.addition,len + 1u)<SUB>147</SUB>> ]
-"114" [label = <(UNKNOWN,size_t,size_t)<SUB>113</SUB>> ]
-"115" [label = <(&lt;operator&gt;.subtraction,end - utf8)<SUB>113</SUB>> ]
-"121" [label = <(&lt;operator&gt;.conditional,bad() ? 0u : len + 1u)<SUB>114</SUB>> ]
-"131" [label = <(FIELD_IDENTIFIER,kUseStringCompression,kUseStringCompression)<SUB>116</SUB>> ]
-"135" [label = <(bad,bad())<SUB>117</SUB>> ]
-"141" [label = <(good,good(utf8, 2u))<SUB>121</SUB>> ]
-"161" [label = <(UNKNOWN,size_t,size_t)<SUB>129</SUB>> ]
-"162" [label = <(&lt;operator&gt;.subtraction,end - utf8)<SUB>129</SUB>> ]
-"168" [label = <(&lt;operator&gt;.conditional,bad() ? 0u : len + 1u)<SUB>130</SUB>> ]
-"178" [label = <(FIELD_IDENTIFIER,kUseStringCompression,kUseStringCompression)<SUB>132</SUB>> ]
-"182" [label = <(bad,bad())<SUB>133</SUB>> ]
-"188" [label = <(good,good(utf8, 3u))<SUB>137</SUB>> ]
-"122" [label = <(bad,bad())<SUB>114</SUB>> ]
-"124" [label = <(&lt;operator&gt;.addition,len + 1u)<SUB>114</SUB>> ]
-"137" [label = <(RETURN,return 0u;,return 0u;)<SUB>118</SUB>> ]
-"169" [label = <(bad,bad())<SUB>130</SUB>> ]
-"171" [label = <(&lt;operator&gt;.addition,len + 1u)<SUB>130</SUB>> ]
-"184" [label = <(RETURN,return 0u;,return 0u;)<SUB>134</SUB>> ]
-"52" [label = <(METHOD,VisitModifiedUtf8Chars)<SUB>92</SUB>> ]
-"225" [label = <(METHOD_RETURN,size_t)<SUB>92</SUB>> ]
-  "58" -> "63" 
-  "63" -> "69" 
-  "67" -> "73" 
-  "223" -> "225" 
-  "60" -> "58" 
-  "69" -> "67" 
-  "73" -> "80" 
-  "73" -> "223" 
-  "78" -> "85" 
-  "101" -> "106" 
-  "214" -> "217" 
-  "217" -> "220" 
-  "220" -> "73" 
-  "80" -> "78" 
-  "83" -> "90" 
-  "83" -> "103" 
-  "103" -> "101" 
-  "105" -> "114" 
-  "105" -> "153" 
-  "152" -> "161" 
-  "152" -> "201" 
-  "199" -> "209" 
-  "199" -> "214" 
-  "84" -> "83" 
-  "90" -> "93" 
-  "93" -> "96" 
-  "96" -> "73" 
-  "106" -> "105" 
-  "144" -> "147" 
-  "147" -> "73" 
-  "153" -> "152" 
-  "191" -> "194" 
-  "194" -> "73" 
-  "200" -> "199" 
-  "207" -> "225" 
-  "85" -> "84" 
-  "112" -> "122" 
-  "112" -> "131" 
-  "128" -> "135" 
+digraph "NormalizeJniClassDescriptor" {  
+"152" [label = <(RETURN,return result;,return result;)<SUB>198</SUB>> ]
+"95" [label = <(&lt;operator&gt;.equals,name[0] == '[')<SUB>185</SUB>> ]
+"116" [label = <(&lt;operator&gt;.notEquals,result.find('.') != std::string::npos)<SUB>193</SUB>> ]
+"96" [label = <(&lt;operator&gt;.indirectIndexAccess,name[0])<SUB>185</SUB>> ]
+"101" [label = <(&lt;operator&gt;.assignment,result = name)<SUB>186</SUB>> ]
+"117" [label = <(find,result.find('.'))<SUB>193</SUB>> ]
+"122" [label = <(&lt;operator&gt;.fieldAccess,std::string::npos)<SUB>193</SUB>> ]
+"128" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;Call to JNI FindClass with dots in name: &quot;\012 &lt;&lt; &quot;\&quot;&quot; &lt;&lt; name &lt;&lt; &quot;\&quot;&quot;)<SUB>194</SUB>> ]
+"138" [label = <(std::replace,std::replace(result.begin(), result.end(), '.', '/'))<SUB>196</SUB>> ]
+"106" [label = <(&lt;operator&gt;.assignmentPlus,result += 'L')<SUB>188</SUB>> ]
+"109" [label = <(&lt;operator&gt;.assignmentPlus,result += name)<SUB>189</SUB>> ]
+"112" [label = <(&lt;operator&gt;.assignmentPlus,result += ';')<SUB>190</SUB>> ]
+"118" [label = <(&lt;operator&gt;.fieldAccess,result.find)<SUB>193</SUB>> ]
+"123" [label = <(&lt;operator&gt;.fieldAccess,std::string)<SUB>193</SUB>> ]
+"126" [label = <(FIELD_IDENTIFIER,npos,npos)<SUB>193</SUB>> ]
+"129" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;Call to JNI FindClass with dots in name: &quot;\012 &lt;&lt; &quot;\&quot;&quot; &lt;&lt; name)<SUB>194</SUB>> ]
+"139" [label = <(&lt;operator&gt;.fieldAccess,std::replace)<SUB>196</SUB>> ]
+"142" [label = <(begin,result.begin())<SUB>196</SUB>> ]
+"146" [label = <(end,result.end())<SUB>196</SUB>> ]
+"120" [label = <(FIELD_IDENTIFIER,find,find)<SUB>193</SUB>> ]
+"130" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;Call to JNI FindClass with dots in name: &quot;\012 &lt;&lt; &quot;\&quot;&quot;)<SUB>194</SUB>> ]
+"141" [label = <(FIELD_IDENTIFIER,replace,replace)<SUB>196</SUB>> ]
+"143" [label = <(&lt;operator&gt;.fieldAccess,result.begin)<SUB>196</SUB>> ]
+"147" [label = <(&lt;operator&gt;.fieldAccess,result.end)<SUB>196</SUB>> ]
+"131" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;Call to JNI FindClass with dots in name: &quot;)<SUB>194</SUB>> ]
+"145" [label = <(FIELD_IDENTIFIER,begin,begin)<SUB>196</SUB>> ]
+"149" [label = <(FIELD_IDENTIFIER,end,end)<SUB>196</SUB>> ]
+"132" [label = <(LOG,LOG(WARNING))<SUB>194</SUB>> ]
+"90" [label = <(METHOD,NormalizeJniClassDescriptor)<SUB>182</SUB>> ]
+"154" [label = <(METHOD_RETURN,string)<SUB>182</SUB>> ]
+  "152" -> "154" 
+  "95" -> "101" 
+  "95" -> "106" 
+  "116" -> "132" 
+  "116" -> "152" 
+  "96" -> "95" 
+  "101" -> "120" 
+  "117" -> "123" 
+  "122" -> "116" 
   "128" -> "141" 
-  "159" -> "169" 
-  "159" -> "178" 
-  "175" -> "182" 
-  "175" -> "188" 
-  "201" -> "202" 
-  "202" -> "200" 
-  "208" -> "207" 
-  "113" -> "112" 
-  "120" -> "225" 
-  "129" -> "132" 
+  "138" -> "152" 
+  "106" -> "109" 
+  "109" -> "112" 
+  "112" -> "120" 
+  "118" -> "117" 
+  "123" -> "126" 
+  "126" -> "122" 
   "129" -> "128" 
-  "132" -> "128" 
-  "160" -> "159" 
-  "167" -> "225" 
-  "176" -> "179" 
-  "176" -> "175" 
-  "179" -> "175" 
-  "209" -> "208" 
-  "209" -> "211" 
-  "211" -> "208" 
-  "114" -> "115" 
-  "115" -> "113" 
-  "121" -> "120" 
-  "131" -> "129" 
-  "135" -> "137" 
-  "135" -> "144" 
-  "141" -> "144" 
-  "161" -> "162" 
-  "162" -> "160" 
-  "168" -> "167" 
-  "178" -> "176" 
-  "182" -> "184" 
-  "182" -> "191" 
-  "188" -> "191" 
-  "122" -> "121" 
-  "122" -> "124" 
-  "124" -> "121" 
-  "137" -> "225" 
-  "169" -> "168" 
-  "169" -> "171" 
-  "171" -> "168" 
-  "184" -> "225" 
-  "52" -> "60" 
+  "139" -> "145" 
+  "142" -> "149" 
+  "146" -> "138" 
+  "120" -> "118" 
+  "130" -> "129" 
+  "141" -> "139" 
+  "143" -> "142" 
+  "147" -> "146" 
+  "131" -> "130" 
+  "145" -> "143" 
+  "149" -> "147" 
+  "132" -> "131" 
+  "90" -> "96" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/80-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/80-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/80-cfg.dot	2023-06-07 19:33:45.387394691 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/80-cfg.dot	2023-06-07 19:33:51.967393990 +0330
@@ -1,61 +1,53 @@
-digraph "CallLongMethod" {  
-"3868" [label = <(va_start,va_start(ap, mid))<SUB>1060</SUB>> ]
-"3872" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1061</SUB>> ]
-"3875" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1062</SUB>> ]
-"3893" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1063</SUB>> ]
-"3912" [label = <(soa,soa(env))<SUB>1064</SUB>> ]
-"3915" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap)))<SUB>1065</SUB>> ]
-"3921" [label = <(RETURN,return result.GetJ();,return result.GetJ();)<SUB>1066</SUB>> ]
-"3873" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1061</SUB>> ]
-"3916" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>1065</SUB>> ]
-"3922" [label = <(GetJ,result.GetJ())<SUB>1066</SUB>> ]
-"3923" [label = <(&lt;operator&gt;.fieldAccess,result.GetJ)<SUB>1066</SUB>> ]
-"3879" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1062</SUB>> ]
-"3897" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1063</SUB>> ]
-"3925" [label = <(FIELD_IDENTIFIER,GetJ,GetJ)<SUB>1066</SUB>> ]
-"3880" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1062</SUB>> ]
-"3884" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1062</SUB>> ]
-"3891" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1062</SUB>> ]
-"3898" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1063</SUB>> ]
-"3902" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1063</SUB>> ]
-"3909" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1063</SUB>> ]
-"3885" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1062</SUB>> ]
-"3903" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1063</SUB>> ]
-"3886" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1062</SUB>> ]
-"3888" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1062</SUB>> ]
-"3904" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1063</SUB>> ]
-"3906" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1063</SUB>> ]
-"3862" [label = <(METHOD,CallLongMethod)<SUB>1058</SUB>> ]
-"3926" [label = <(METHOD_RETURN,jlong)<SUB>1058</SUB>> ]
-  "3868" -> "3873" 
-  "3872" -> "3875" 
-  "3875" -> "3880" 
-  "3875" -> "3893" 
-  "3893" -> "3898" 
-  "3893" -> "3912" 
-  "3912" -> "3916" 
-  "3915" -> "3925" 
-  "3921" -> "3926" 
-  "3873" -> "3872" 
-  "3916" -> "3915" 
-  "3922" -> "3921" 
-  "3923" -> "3922" 
-  "3879" -> "3886" 
-  "3879" -> "3893" 
-  "3897" -> "3904" 
-  "3897" -> "3912" 
-  "3925" -> "3923" 
-  "3880" -> "3879" 
-  "3884" -> "3891" 
-  "3891" -> "3926" 
-  "3898" -> "3897" 
-  "3902" -> "3909" 
-  "3909" -> "3926" 
-  "3885" -> "3884" 
-  "3903" -> "3902" 
-  "3886" -> "3888" 
-  "3888" -> "3885" 
-  "3904" -> "3906" 
-  "3906" -> "3903" 
-  "3862" -> "3868" 
+digraph "CallShortMethodV" {  
+"3919" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1016</SUB>> ]
+"3937" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1017</SUB>> ]
+"3956" [label = <(soa,soa(env))<SUB>1018</SUB>> ]
+"3958" [label = <(RETURN,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetS();,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetS();)<SUB>1019</SUB>> ]
+"3959" [label = <(GetS,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetS())<SUB>1019</SUB>> ]
+"3960" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetS)<SUB>1019</SUB>> ]
+"3923" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1016</SUB>> ]
+"3941" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1017</SUB>> ]
+"3961" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>1019</SUB>> ]
+"3966" [label = <(FIELD_IDENTIFIER,GetS,GetS)<SUB>1019</SUB>> ]
+"3924" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1016</SUB>> ]
+"3928" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1016</SUB>> ]
+"3935" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1016</SUB>> ]
+"3942" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1017</SUB>> ]
+"3946" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1017</SUB>> ]
+"3953" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1017</SUB>> ]
+"3929" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1016</SUB>> ]
+"3947" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1017</SUB>> ]
+"3930" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1016</SUB>> ]
+"3932" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1016</SUB>> ]
+"3948" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1017</SUB>> ]
+"3950" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1017</SUB>> ]
+"3913" [label = <(METHOD,CallShortMethodV)<SUB>1015</SUB>> ]
+"3967" [label = <(METHOD_RETURN,jshort)<SUB>1015</SUB>> ]
+  "3919" -> "3924" 
+  "3919" -> "3937" 
+  "3937" -> "3942" 
+  "3937" -> "3956" 
+  "3956" -> "3961" 
+  "3958" -> "3967" 
+  "3959" -> "3958" 
+  "3960" -> "3959" 
+  "3923" -> "3930" 
+  "3923" -> "3937" 
+  "3941" -> "3948" 
+  "3941" -> "3956" 
+  "3961" -> "3966" 
+  "3966" -> "3960" 
+  "3924" -> "3923" 
+  "3928" -> "3935" 
+  "3935" -> "3967" 
+  "3942" -> "3941" 
+  "3946" -> "3953" 
+  "3953" -> "3967" 
+  "3929" -> "3928" 
+  "3947" -> "3946" 
+  "3930" -> "3932" 
+  "3932" -> "3929" 
+  "3948" -> "3950" 
+  "3950" -> "3947" 
+  "3913" -> "3919" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/81-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/81-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/81-cfg.dot	2023-06-07 19:33:45.387394691 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/81-cfg.dot	2023-06-07 19:33:51.967393990 +0330
@@ -1,53 +1,53 @@
-digraph "CallLongMethodV" {  
-"3934" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1070</SUB>> ]
-"3952" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1071</SUB>> ]
-"3971" [label = <(soa,soa(env))<SUB>1072</SUB>> ]
-"3973" [label = <(RETURN,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetJ();,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetJ();)<SUB>1073</SUB>> ]
-"3974" [label = <(GetJ,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetJ())<SUB>1073</SUB>> ]
-"3975" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetJ)<SUB>1073</SUB>> ]
-"3938" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1070</SUB>> ]
-"3956" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1071</SUB>> ]
-"3976" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>1073</SUB>> ]
-"3981" [label = <(FIELD_IDENTIFIER,GetJ,GetJ)<SUB>1073</SUB>> ]
-"3939" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1070</SUB>> ]
-"3943" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1070</SUB>> ]
-"3950" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1070</SUB>> ]
-"3957" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1071</SUB>> ]
-"3961" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1071</SUB>> ]
-"3968" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1071</SUB>> ]
-"3944" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1070</SUB>> ]
-"3962" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1071</SUB>> ]
-"3945" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1070</SUB>> ]
-"3947" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1070</SUB>> ]
-"3963" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1071</SUB>> ]
-"3965" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1071</SUB>> ]
-"3928" [label = <(METHOD,CallLongMethodV)<SUB>1069</SUB>> ]
-"3982" [label = <(METHOD_RETURN,jlong)<SUB>1069</SUB>> ]
-  "3934" -> "3939" 
-  "3934" -> "3952" 
-  "3952" -> "3957" 
-  "3952" -> "3971" 
-  "3971" -> "3976" 
-  "3973" -> "3982" 
-  "3974" -> "3973" 
-  "3975" -> "3974" 
-  "3938" -> "3945" 
-  "3938" -> "3952" 
-  "3956" -> "3963" 
-  "3956" -> "3971" 
-  "3976" -> "3981" 
-  "3981" -> "3975" 
-  "3939" -> "3938" 
-  "3943" -> "3950" 
-  "3950" -> "3982" 
-  "3957" -> "3956" 
-  "3961" -> "3968" 
-  "3968" -> "3982" 
-  "3944" -> "3943" 
-  "3962" -> "3961" 
-  "3945" -> "3947" 
-  "3947" -> "3944" 
-  "3963" -> "3965" 
-  "3965" -> "3962" 
-  "3928" -> "3934" 
+digraph "CallShortMethodA" {  
+"3975" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1023</SUB>> ]
+"3993" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1024</SUB>> ]
+"4012" [label = <(soa,soa(env))<SUB>1025</SUB>> ]
+"4014" [label = <(RETURN,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetS();,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetS();)<SUB>1026</SUB>> ]
+"4015" [label = <(GetS,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetS())<SUB>1026</SUB>> ]
+"4016" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetS)<SUB>1026</SUB>> ]
+"3979" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1023</SUB>> ]
+"3997" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1024</SUB>> ]
+"4017" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>1026</SUB>> ]
+"4022" [label = <(FIELD_IDENTIFIER,GetS,GetS)<SUB>1026</SUB>> ]
+"3980" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1023</SUB>> ]
+"3984" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1023</SUB>> ]
+"3991" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1023</SUB>> ]
+"3998" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1024</SUB>> ]
+"4002" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1024</SUB>> ]
+"4009" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1024</SUB>> ]
+"3985" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1023</SUB>> ]
+"4003" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1024</SUB>> ]
+"3986" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1023</SUB>> ]
+"3988" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1023</SUB>> ]
+"4004" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1024</SUB>> ]
+"4006" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1024</SUB>> ]
+"3969" [label = <(METHOD,CallShortMethodA)<SUB>1022</SUB>> ]
+"4023" [label = <(METHOD_RETURN,jshort)<SUB>1022</SUB>> ]
+  "3975" -> "3980" 
+  "3975" -> "3993" 
+  "3993" -> "3998" 
+  "3993" -> "4012" 
+  "4012" -> "4017" 
+  "4014" -> "4023" 
+  "4015" -> "4014" 
+  "4016" -> "4015" 
+  "3979" -> "3986" 
+  "3979" -> "3993" 
+  "3997" -> "4004" 
+  "3997" -> "4012" 
+  "4017" -> "4022" 
+  "4022" -> "4016" 
+  "3980" -> "3979" 
+  "3984" -> "3991" 
+  "3991" -> "4023" 
+  "3998" -> "3997" 
+  "4002" -> "4009" 
+  "4009" -> "4023" 
+  "3985" -> "3984" 
+  "4003" -> "4002" 
+  "3986" -> "3988" 
+  "3988" -> "3985" 
+  "4004" -> "4006" 
+  "4006" -> "4003" 
+  "3969" -> "3975" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/82-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/82-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/82-cfg.dot	2023-06-07 19:33:45.387394691 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/82-cfg.dot	2023-06-07 19:33:51.967393990 +0330
@@ -1,53 +1,51 @@
-digraph "CallLongMethodA" {  
-"3990" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1077</SUB>> ]
-"4008" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1078</SUB>> ]
-"4027" [label = <(soa,soa(env))<SUB>1079</SUB>> ]
-"4029" [label = <(RETURN,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetJ();,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetJ();)<SUB>1080</SUB>> ]
-"4030" [label = <(GetJ,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetJ())<SUB>1080</SUB>> ]
-"4031" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetJ)<SUB>1080</SUB>> ]
-"3994" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1077</SUB>> ]
-"4012" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1078</SUB>> ]
-"4032" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>1080</SUB>> ]
-"4037" [label = <(FIELD_IDENTIFIER,GetJ,GetJ)<SUB>1080</SUB>> ]
-"3995" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1077</SUB>> ]
-"3999" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1077</SUB>> ]
-"4006" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1077</SUB>> ]
-"4013" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1078</SUB>> ]
-"4017" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1078</SUB>> ]
-"4024" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1078</SUB>> ]
-"4000" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1077</SUB>> ]
-"4018" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1078</SUB>> ]
-"4001" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1077</SUB>> ]
-"4003" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1077</SUB>> ]
-"4019" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1078</SUB>> ]
-"4021" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1078</SUB>> ]
-"3984" [label = <(METHOD,CallLongMethodA)<SUB>1076</SUB>> ]
-"4038" [label = <(METHOD_RETURN,jlong)<SUB>1076</SUB>> ]
-  "3990" -> "3995" 
-  "3990" -> "4008" 
-  "4008" -> "4013" 
-  "4008" -> "4027" 
-  "4027" -> "4032" 
-  "4029" -> "4038" 
-  "4030" -> "4029" 
-  "4031" -> "4030" 
-  "3994" -> "4001" 
-  "3994" -> "4008" 
-  "4012" -> "4019" 
-  "4012" -> "4027" 
-  "4032" -> "4037" 
-  "4037" -> "4031" 
-  "3995" -> "3994" 
-  "3999" -> "4006" 
-  "4006" -> "4038" 
-  "4013" -> "4012" 
-  "4017" -> "4024" 
-  "4024" -> "4038" 
-  "4000" -> "3999" 
-  "4018" -> "4017" 
-  "4001" -> "4003" 
-  "4003" -> "4000" 
-  "4019" -> "4021" 
-  "4021" -> "4018" 
-  "3984" -> "3990" 
+digraph "CallVoidMethod" {  
+"4031" [label = <(va_start,va_start(ap, mid))<SUB>1031</SUB>> ]
+"4035" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1032</SUB>> ]
+"4038" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1033</SUB>> ]
+"4055" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1034</SUB>> ]
+"4073" [label = <(soa,soa(env))<SUB>1035</SUB>> ]
+"4075" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>1036</SUB>> ]
+"4036" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1032</SUB>> ]
+"4042" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1033</SUB>> ]
+"4059" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1034</SUB>> ]
+"4043" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1033</SUB>> ]
+"4047" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1033</SUB>> ]
+"4054" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1033</SUB>> ]
+"4060" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1034</SUB>> ]
+"4064" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1034</SUB>> ]
+"4071" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1034</SUB>> ]
+"4048" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1033</SUB>> ]
+"4065" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1034</SUB>> ]
+"4049" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1033</SUB>> ]
+"4051" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1033</SUB>> ]
+"4066" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1034</SUB>> ]
+"4068" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1034</SUB>> ]
+"4025" [label = <(METHOD,CallVoidMethod)<SUB>1029</SUB>> ]
+"4080" [label = <(METHOD_RETURN,void)<SUB>1029</SUB>> ]
+  "4031" -> "4036" 
+  "4035" -> "4038" 
+  "4038" -> "4043" 
+  "4038" -> "4055" 
+  "4055" -> "4060" 
+  "4055" -> "4073" 
+  "4073" -> "4075" 
+  "4075" -> "4080" 
+  "4036" -> "4035" 
+  "4042" -> "4049" 
+  "4042" -> "4055" 
+  "4059" -> "4066" 
+  "4059" -> "4073" 
+  "4043" -> "4042" 
+  "4047" -> "4054" 
+  "4054" -> "4080" 
+  "4060" -> "4059" 
+  "4064" -> "4071" 
+  "4071" -> "4080" 
+  "4048" -> "4047" 
+  "4065" -> "4064" 
+  "4049" -> "4051" 
+  "4051" -> "4048" 
+  "4066" -> "4068" 
+  "4068" -> "4065" 
+  "4025" -> "4031" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/83-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/83-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/83-cfg.dot	2023-06-07 19:33:45.387394691 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/83-cfg.dot	2023-06-07 19:33:51.977393989 +0330
@@ -1,61 +1,45 @@
-digraph "CallShortMethod" {  
-"4046" [label = <(va_start,va_start(ap, mid))<SUB>1085</SUB>> ]
-"4050" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1086</SUB>> ]
-"4053" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1087</SUB>> ]
-"4071" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1088</SUB>> ]
-"4090" [label = <(soa,soa(env))<SUB>1089</SUB>> ]
-"4093" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap)))<SUB>1090</SUB>> ]
-"4099" [label = <(RETURN,return result.GetS();,return result.GetS();)<SUB>1091</SUB>> ]
-"4051" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1086</SUB>> ]
-"4094" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>1090</SUB>> ]
-"4100" [label = <(GetS,result.GetS())<SUB>1091</SUB>> ]
-"4101" [label = <(&lt;operator&gt;.fieldAccess,result.GetS)<SUB>1091</SUB>> ]
-"4057" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1087</SUB>> ]
-"4075" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1088</SUB>> ]
-"4103" [label = <(FIELD_IDENTIFIER,GetS,GetS)<SUB>1091</SUB>> ]
-"4058" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1087</SUB>> ]
-"4062" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1087</SUB>> ]
-"4069" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1087</SUB>> ]
-"4076" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1088</SUB>> ]
-"4080" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1088</SUB>> ]
-"4087" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1088</SUB>> ]
-"4063" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1087</SUB>> ]
-"4081" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1088</SUB>> ]
-"4064" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1087</SUB>> ]
-"4066" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1087</SUB>> ]
-"4082" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1088</SUB>> ]
-"4084" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1088</SUB>> ]
-"4040" [label = <(METHOD,CallShortMethod)<SUB>1083</SUB>> ]
-"4104" [label = <(METHOD_RETURN,jshort)<SUB>1083</SUB>> ]
-  "4046" -> "4051" 
-  "4050" -> "4053" 
-  "4053" -> "4058" 
-  "4053" -> "4071" 
-  "4071" -> "4076" 
-  "4071" -> "4090" 
-  "4090" -> "4094" 
-  "4093" -> "4103" 
-  "4099" -> "4104" 
-  "4051" -> "4050" 
-  "4094" -> "4093" 
-  "4100" -> "4099" 
-  "4101" -> "4100" 
-  "4057" -> "4064" 
-  "4057" -> "4071" 
-  "4075" -> "4082" 
-  "4075" -> "4090" 
-  "4103" -> "4101" 
-  "4058" -> "4057" 
-  "4062" -> "4069" 
-  "4069" -> "4104" 
-  "4076" -> "4075" 
-  "4080" -> "4087" 
-  "4087" -> "4104" 
-  "4063" -> "4062" 
-  "4081" -> "4080" 
-  "4064" -> "4066" 
-  "4066" -> "4063" 
-  "4082" -> "4084" 
-  "4084" -> "4081" 
-  "4040" -> "4046" 
+digraph "CallVoidMethodV" {  
+"4088" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1040</SUB>> ]
+"4105" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1041</SUB>> ]
+"4123" [label = <(soa,soa(env))<SUB>1042</SUB>> ]
+"4125" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>1043</SUB>> ]
+"4092" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1040</SUB>> ]
+"4109" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1041</SUB>> ]
+"4093" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1040</SUB>> ]
+"4097" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1040</SUB>> ]
+"4104" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1040</SUB>> ]
+"4110" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1041</SUB>> ]
+"4114" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1041</SUB>> ]
+"4121" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1041</SUB>> ]
+"4098" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1040</SUB>> ]
+"4115" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1041</SUB>> ]
+"4099" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1040</SUB>> ]
+"4101" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1040</SUB>> ]
+"4116" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1041</SUB>> ]
+"4118" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1041</SUB>> ]
+"4082" [label = <(METHOD,CallVoidMethodV)<SUB>1039</SUB>> ]
+"4130" [label = <(METHOD_RETURN,void)<SUB>1039</SUB>> ]
+  "4088" -> "4093" 
+  "4088" -> "4105" 
+  "4105" -> "4110" 
+  "4105" -> "4123" 
+  "4123" -> "4125" 
+  "4125" -> "4130" 
+  "4092" -> "4099" 
+  "4092" -> "4105" 
+  "4109" -> "4116" 
+  "4109" -> "4123" 
+  "4093" -> "4092" 
+  "4097" -> "4104" 
+  "4104" -> "4130" 
+  "4110" -> "4109" 
+  "4114" -> "4121" 
+  "4121" -> "4130" 
+  "4098" -> "4097" 
+  "4115" -> "4114" 
+  "4099" -> "4101" 
+  "4101" -> "4098" 
+  "4116" -> "4118" 
+  "4118" -> "4115" 
+  "4082" -> "4088" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/84-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/84-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/84-cfg.dot	2023-06-07 19:33:45.387394691 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/84-cfg.dot	2023-06-07 19:33:51.977393989 +0330
@@ -1,53 +1,45 @@
-digraph "CallShortMethodV" {  
-"4112" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1095</SUB>> ]
-"4130" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1096</SUB>> ]
-"4149" [label = <(soa,soa(env))<SUB>1097</SUB>> ]
-"4151" [label = <(RETURN,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetS();,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetS();)<SUB>1098</SUB>> ]
-"4152" [label = <(GetS,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetS())<SUB>1098</SUB>> ]
-"4153" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetS)<SUB>1098</SUB>> ]
-"4116" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1095</SUB>> ]
-"4134" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1096</SUB>> ]
-"4154" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>1098</SUB>> ]
-"4159" [label = <(FIELD_IDENTIFIER,GetS,GetS)<SUB>1098</SUB>> ]
-"4117" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1095</SUB>> ]
-"4121" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1095</SUB>> ]
-"4128" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1095</SUB>> ]
-"4135" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1096</SUB>> ]
-"4139" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1096</SUB>> ]
-"4146" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1096</SUB>> ]
-"4122" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1095</SUB>> ]
-"4140" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1096</SUB>> ]
-"4123" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1095</SUB>> ]
-"4125" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1095</SUB>> ]
-"4141" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1096</SUB>> ]
-"4143" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1096</SUB>> ]
-"4106" [label = <(METHOD,CallShortMethodV)<SUB>1094</SUB>> ]
-"4160" [label = <(METHOD_RETURN,jshort)<SUB>1094</SUB>> ]
-  "4112" -> "4117" 
-  "4112" -> "4130" 
-  "4130" -> "4135" 
-  "4130" -> "4149" 
-  "4149" -> "4154" 
-  "4151" -> "4160" 
-  "4152" -> "4151" 
-  "4153" -> "4152" 
-  "4116" -> "4123" 
-  "4116" -> "4130" 
-  "4134" -> "4141" 
-  "4134" -> "4149" 
-  "4154" -> "4159" 
-  "4159" -> "4153" 
-  "4117" -> "4116" 
-  "4121" -> "4128" 
-  "4128" -> "4160" 
-  "4135" -> "4134" 
-  "4139" -> "4146" 
-  "4146" -> "4160" 
-  "4122" -> "4121" 
-  "4140" -> "4139" 
-  "4123" -> "4125" 
-  "4125" -> "4122" 
-  "4141" -> "4143" 
-  "4143" -> "4140" 
-  "4106" -> "4112" 
+digraph "CallVoidMethodA" {  
+"4138" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1047</SUB>> ]
+"4155" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1048</SUB>> ]
+"4173" [label = <(soa,soa(env))<SUB>1049</SUB>> ]
+"4175" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>1050</SUB>> ]
+"4142" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1047</SUB>> ]
+"4159" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1048</SUB>> ]
+"4143" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1047</SUB>> ]
+"4147" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1047</SUB>> ]
+"4154" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1047</SUB>> ]
+"4160" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1048</SUB>> ]
+"4164" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1048</SUB>> ]
+"4171" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1048</SUB>> ]
+"4148" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1047</SUB>> ]
+"4165" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1048</SUB>> ]
+"4149" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1047</SUB>> ]
+"4151" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1047</SUB>> ]
+"4166" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1048</SUB>> ]
+"4168" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1048</SUB>> ]
+"4132" [label = <(METHOD,CallVoidMethodA)<SUB>1046</SUB>> ]
+"4180" [label = <(METHOD_RETURN,void)<SUB>1046</SUB>> ]
+  "4138" -> "4143" 
+  "4138" -> "4155" 
+  "4155" -> "4160" 
+  "4155" -> "4173" 
+  "4173" -> "4175" 
+  "4175" -> "4180" 
+  "4142" -> "4149" 
+  "4142" -> "4155" 
+  "4159" -> "4166" 
+  "4159" -> "4173" 
+  "4143" -> "4142" 
+  "4147" -> "4154" 
+  "4154" -> "4180" 
+  "4160" -> "4159" 
+  "4164" -> "4171" 
+  "4171" -> "4180" 
+  "4148" -> "4147" 
+  "4165" -> "4164" 
+  "4149" -> "4151" 
+  "4151" -> "4148" 
+  "4166" -> "4168" 
+  "4168" -> "4165" 
+  "4132" -> "4138" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/85-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/85-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/85-cfg.dot	2023-06-07 19:33:45.397394692 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/85-cfg.dot	2023-06-07 19:33:51.977393989 +0330
@@ -1,53 +1,71 @@
-digraph "CallShortMethodA" {  
-"4168" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1102</SUB>> ]
-"4186" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1103</SUB>> ]
-"4205" [label = <(soa,soa(env))<SUB>1104</SUB>> ]
-"4207" [label = <(RETURN,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetS();,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetS();)<SUB>1105</SUB>> ]
-"4208" [label = <(GetS,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetS())<SUB>1105</SUB>> ]
-"4209" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetS)<SUB>1105</SUB>> ]
-"4172" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1102</SUB>> ]
-"4190" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1103</SUB>> ]
-"4210" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>1105</SUB>> ]
-"4215" [label = <(FIELD_IDENTIFIER,GetS,GetS)<SUB>1105</SUB>> ]
-"4173" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1102</SUB>> ]
-"4177" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1102</SUB>> ]
-"4184" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1102</SUB>> ]
-"4191" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1103</SUB>> ]
-"4195" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1103</SUB>> ]
-"4202" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1103</SUB>> ]
-"4178" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1102</SUB>> ]
-"4196" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1103</SUB>> ]
-"4179" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1102</SUB>> ]
-"4181" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1102</SUB>> ]
-"4197" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1103</SUB>> ]
-"4199" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1103</SUB>> ]
-"4162" [label = <(METHOD,CallShortMethodA)<SUB>1101</SUB>> ]
-"4216" [label = <(METHOD_RETURN,jshort)<SUB>1101</SUB>> ]
-  "4168" -> "4173" 
-  "4168" -> "4186" 
-  "4186" -> "4191" 
-  "4186" -> "4205" 
-  "4205" -> "4210" 
-  "4207" -> "4216" 
-  "4208" -> "4207" 
-  "4209" -> "4208" 
-  "4172" -> "4179" 
-  "4172" -> "4186" 
-  "4190" -> "4197" 
-  "4190" -> "4205" 
-  "4210" -> "4215" 
-  "4215" -> "4209" 
-  "4173" -> "4172" 
-  "4177" -> "4184" 
-  "4184" -> "4216" 
-  "4191" -> "4190" 
-  "4195" -> "4202" 
-  "4202" -> "4216" 
-  "4178" -> "4177" 
-  "4196" -> "4195" 
-  "4179" -> "4181" 
-  "4181" -> "4178" 
-  "4197" -> "4199" 
-  "4199" -> "4196" 
-  "4162" -> "4168" 
+digraph "CallNonvirtualObjectMethod" {  
+"4189" [label = <(va_start,va_start(ap, mid))<SUB>1055</SUB>> ]
+"4193" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1056</SUB>> ]
+"4196" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(obj))<SUB>1057</SUB>> ]
+"4214" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>1058</SUB>> ]
+"4233" [label = <(soa,soa(env))<SUB>1059</SUB>> ]
+"4236" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, ap)))<SUB>1060</SUB>> ]
+"4243" [label = <(&lt;operator&gt;.assignment,local_result = soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>1061</SUB>> ]
+"4255" [label = <(RETURN,return local_result;,return local_result;)<SUB>1062</SUB>> ]
+"4194" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1056</SUB>> ]
+"4237" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1060</SUB>> ]
+"4245" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>1061</SUB>> ]
+"4246" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>1061</SUB>> ]
+"4251" [label = <(GetL,result.GetL())<SUB>1061</SUB>> ]
+"4200" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1057</SUB>> ]
+"4218" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1058</SUB>> ]
+"4247" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1061</SUB>> ]
+"4252" [label = <(&lt;operator&gt;.fieldAccess,result.GetL)<SUB>1061</SUB>> ]
+"4201" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1057</SUB>> ]
+"4205" [label = <(CHECK_NON_NULL_ARGUMENT(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1057</SUB>> ]
+"4212" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(obj),CHECK_NON_NULL_ARGUMENT(obj))<SUB>1057</SUB>> ]
+"4219" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1058</SUB>> ]
+"4223" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1058</SUB>> ]
+"4230" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>1058</SUB>> ]
+"4249" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1061</SUB>> ]
+"4254" [label = <(FIELD_IDENTIFIER,GetL,GetL)<SUB>1061</SUB>> ]
+"4206" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1057</SUB>> ]
+"4224" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1058</SUB>> ]
+"4207" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1057</SUB>> ]
+"4209" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1057</SUB>> ]
+"4225" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1058</SUB>> ]
+"4227" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1058</SUB>> ]
+"4182" [label = <(METHOD,CallNonvirtualObjectMethod)<SUB>1053</SUB>> ]
+"4257" [label = <(METHOD_RETURN,jobject)<SUB>1053</SUB>> ]
+  "4189" -> "4194" 
+  "4193" -> "4196" 
+  "4196" -> "4201" 
+  "4196" -> "4214" 
+  "4214" -> "4219" 
+  "4214" -> "4233" 
+  "4233" -> "4237" 
+  "4236" -> "4249" 
+  "4243" -> "4255" 
+  "4255" -> "4257" 
+  "4194" -> "4193" 
+  "4237" -> "4236" 
+  "4245" -> "4243" 
+  "4246" -> "4254" 
+  "4251" -> "4245" 
+  "4200" -> "4207" 
+  "4200" -> "4214" 
+  "4218" -> "4225" 
+  "4218" -> "4233" 
+  "4247" -> "4246" 
+  "4252" -> "4251" 
+  "4201" -> "4200" 
+  "4205" -> "4212" 
+  "4212" -> "4257" 
+  "4219" -> "4218" 
+  "4223" -> "4230" 
+  "4230" -> "4257" 
+  "4249" -> "4247" 
+  "4254" -> "4252" 
+  "4206" -> "4205" 
+  "4224" -> "4223" 
+  "4207" -> "4209" 
+  "4209" -> "4206" 
+  "4225" -> "4227" 
+  "4227" -> "4224" 
+  "4182" -> "4189" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/86-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/86-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/86-cfg.dot	2023-06-07 19:33:45.397394692 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/86-cfg.dot	2023-06-07 19:33:51.977393989 +0330
@@ -1,51 +1,63 @@
-digraph "CallVoidMethod" {  
-"4224" [label = <(va_start,va_start(ap, mid))<SUB>1110</SUB>> ]
-"4228" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1111</SUB>> ]
-"4231" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1112</SUB>> ]
-"4248" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1113</SUB>> ]
-"4266" [label = <(soa,soa(env))<SUB>1114</SUB>> ]
-"4268" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>1115</SUB>> ]
-"4229" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1111</SUB>> ]
-"4235" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1112</SUB>> ]
-"4252" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1113</SUB>> ]
-"4236" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1112</SUB>> ]
-"4240" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1112</SUB>> ]
-"4247" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1112</SUB>> ]
-"4253" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1113</SUB>> ]
-"4257" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1113</SUB>> ]
-"4264" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1113</SUB>> ]
-"4241" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1112</SUB>> ]
-"4258" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1113</SUB>> ]
-"4242" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1112</SUB>> ]
-"4244" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1112</SUB>> ]
-"4259" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1113</SUB>> ]
-"4261" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1113</SUB>> ]
-"4218" [label = <(METHOD,CallVoidMethod)<SUB>1108</SUB>> ]
-"4273" [label = <(METHOD_RETURN,void)<SUB>1108</SUB>> ]
-  "4224" -> "4229" 
-  "4228" -> "4231" 
-  "4231" -> "4236" 
-  "4231" -> "4248" 
-  "4248" -> "4253" 
-  "4248" -> "4266" 
-  "4266" -> "4268" 
-  "4268" -> "4273" 
-  "4229" -> "4228" 
-  "4235" -> "4242" 
-  "4235" -> "4248" 
-  "4252" -> "4259" 
-  "4252" -> "4266" 
-  "4236" -> "4235" 
-  "4240" -> "4247" 
-  "4247" -> "4273" 
-  "4253" -> "4252" 
-  "4257" -> "4264" 
-  "4264" -> "4273" 
-  "4241" -> "4240" 
-  "4258" -> "4257" 
-  "4242" -> "4244" 
-  "4244" -> "4241" 
-  "4259" -> "4261" 
-  "4261" -> "4258" 
-  "4218" -> "4224" 
+digraph "CallNonvirtualObjectMethodV" {  
+"4266" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(obj))<SUB>1067</SUB>> ]
+"4284" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>1068</SUB>> ]
+"4303" [label = <(soa,soa(env))<SUB>1069</SUB>> ]
+"4306" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, args)))<SUB>1070</SUB>> ]
+"4312" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());)<SUB>1071</SUB>> ]
+"4307" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1070</SUB>> ]
+"4313" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>1071</SUB>> ]
+"4314" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>1071</SUB>> ]
+"4319" [label = <(GetL,result.GetL())<SUB>1071</SUB>> ]
+"4270" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1067</SUB>> ]
+"4288" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1068</SUB>> ]
+"4315" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1071</SUB>> ]
+"4320" [label = <(&lt;operator&gt;.fieldAccess,result.GetL)<SUB>1071</SUB>> ]
+"4271" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1067</SUB>> ]
+"4275" [label = <(CHECK_NON_NULL_ARGUMENT(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1067</SUB>> ]
+"4282" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(obj),CHECK_NON_NULL_ARGUMENT(obj))<SUB>1067</SUB>> ]
+"4289" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1068</SUB>> ]
+"4293" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1068</SUB>> ]
+"4300" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>1068</SUB>> ]
+"4317" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1071</SUB>> ]
+"4322" [label = <(FIELD_IDENTIFIER,GetL,GetL)<SUB>1071</SUB>> ]
+"4276" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1067</SUB>> ]
+"4294" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1068</SUB>> ]
+"4277" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1067</SUB>> ]
+"4279" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1067</SUB>> ]
+"4295" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1068</SUB>> ]
+"4297" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1068</SUB>> ]
+"4259" [label = <(METHOD,CallNonvirtualObjectMethodV)<SUB>1065</SUB>> ]
+"4323" [label = <(METHOD_RETURN,jobject)<SUB>1065</SUB>> ]
+  "4266" -> "4271" 
+  "4266" -> "4284" 
+  "4284" -> "4289" 
+  "4284" -> "4303" 
+  "4303" -> "4307" 
+  "4306" -> "4317" 
+  "4312" -> "4323" 
+  "4307" -> "4306" 
+  "4313" -> "4312" 
+  "4314" -> "4322" 
+  "4319" -> "4313" 
+  "4270" -> "4277" 
+  "4270" -> "4284" 
+  "4288" -> "4295" 
+  "4288" -> "4303" 
+  "4315" -> "4314" 
+  "4320" -> "4319" 
+  "4271" -> "4270" 
+  "4275" -> "4282" 
+  "4282" -> "4323" 
+  "4289" -> "4288" 
+  "4293" -> "4300" 
+  "4300" -> "4323" 
+  "4317" -> "4315" 
+  "4322" -> "4320" 
+  "4276" -> "4275" 
+  "4294" -> "4293" 
+  "4277" -> "4279" 
+  "4279" -> "4276" 
+  "4295" -> "4297" 
+  "4297" -> "4294" 
+  "4259" -> "4266" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/87-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/87-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/87-cfg.dot	2023-06-07 19:33:45.397394692 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/87-cfg.dot	2023-06-07 19:33:51.977393989 +0330
@@ -1,45 +1,63 @@
-digraph "CallVoidMethodV" {  
-"4281" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1119</SUB>> ]
-"4298" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1120</SUB>> ]
-"4316" [label = <(soa,soa(env))<SUB>1121</SUB>> ]
-"4318" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>1122</SUB>> ]
-"4285" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1119</SUB>> ]
-"4302" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1120</SUB>> ]
-"4286" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1119</SUB>> ]
-"4290" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1119</SUB>> ]
-"4297" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1119</SUB>> ]
-"4303" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1120</SUB>> ]
-"4307" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1120</SUB>> ]
-"4314" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1120</SUB>> ]
-"4291" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1119</SUB>> ]
-"4308" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1120</SUB>> ]
-"4292" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1119</SUB>> ]
-"4294" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1119</SUB>> ]
-"4309" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1120</SUB>> ]
-"4311" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1120</SUB>> ]
-"4275" [label = <(METHOD,CallVoidMethodV)<SUB>1118</SUB>> ]
-"4323" [label = <(METHOD_RETURN,void)<SUB>1118</SUB>> ]
-  "4281" -> "4286" 
-  "4281" -> "4298" 
-  "4298" -> "4303" 
-  "4298" -> "4316" 
-  "4316" -> "4318" 
-  "4318" -> "4323" 
-  "4285" -> "4292" 
-  "4285" -> "4298" 
-  "4302" -> "4309" 
-  "4302" -> "4316" 
-  "4286" -> "4285" 
-  "4290" -> "4297" 
-  "4297" -> "4323" 
-  "4303" -> "4302" 
-  "4307" -> "4314" 
-  "4314" -> "4323" 
-  "4291" -> "4290" 
-  "4308" -> "4307" 
-  "4292" -> "4294" 
-  "4294" -> "4291" 
-  "4309" -> "4311" 
-  "4311" -> "4308" 
-  "4275" -> "4281" 
+digraph "CallNonvirtualObjectMethodA" {  
+"4332" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(obj))<SUB>1076</SUB>> ]
+"4350" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>1077</SUB>> ]
+"4369" [label = <(soa,soa(env))<SUB>1078</SUB>> ]
+"4372" [label = <(result,result(InvokeWithJValues(soa, obj, mid, args)))<SUB>1079</SUB>> ]
+"4378" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());)<SUB>1080</SUB>> ]
+"4373" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1079</SUB>> ]
+"4379" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>1080</SUB>> ]
+"4380" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>1080</SUB>> ]
+"4385" [label = <(GetL,result.GetL())<SUB>1080</SUB>> ]
+"4336" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1076</SUB>> ]
+"4354" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1077</SUB>> ]
+"4381" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1080</SUB>> ]
+"4386" [label = <(&lt;operator&gt;.fieldAccess,result.GetL)<SUB>1080</SUB>> ]
+"4337" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1076</SUB>> ]
+"4341" [label = <(CHECK_NON_NULL_ARGUMENT(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1076</SUB>> ]
+"4348" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(obj),CHECK_NON_NULL_ARGUMENT(obj))<SUB>1076</SUB>> ]
+"4355" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1077</SUB>> ]
+"4359" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1077</SUB>> ]
+"4366" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>1077</SUB>> ]
+"4383" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1080</SUB>> ]
+"4388" [label = <(FIELD_IDENTIFIER,GetL,GetL)<SUB>1080</SUB>> ]
+"4342" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1076</SUB>> ]
+"4360" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1077</SUB>> ]
+"4343" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1076</SUB>> ]
+"4345" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1076</SUB>> ]
+"4361" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1077</SUB>> ]
+"4363" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1077</SUB>> ]
+"4325" [label = <(METHOD,CallNonvirtualObjectMethodA)<SUB>1074</SUB>> ]
+"4389" [label = <(METHOD_RETURN,jobject)<SUB>1074</SUB>> ]
+  "4332" -> "4337" 
+  "4332" -> "4350" 
+  "4350" -> "4355" 
+  "4350" -> "4369" 
+  "4369" -> "4373" 
+  "4372" -> "4383" 
+  "4378" -> "4389" 
+  "4373" -> "4372" 
+  "4379" -> "4378" 
+  "4380" -> "4388" 
+  "4385" -> "4379" 
+  "4336" -> "4343" 
+  "4336" -> "4350" 
+  "4354" -> "4361" 
+  "4354" -> "4369" 
+  "4381" -> "4380" 
+  "4386" -> "4385" 
+  "4337" -> "4336" 
+  "4341" -> "4348" 
+  "4348" -> "4389" 
+  "4355" -> "4354" 
+  "4359" -> "4366" 
+  "4366" -> "4389" 
+  "4383" -> "4381" 
+  "4388" -> "4386" 
+  "4342" -> "4341" 
+  "4360" -> "4359" 
+  "4343" -> "4345" 
+  "4345" -> "4342" 
+  "4361" -> "4363" 
+  "4363" -> "4360" 
+  "4325" -> "4332" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/88-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/88-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/88-cfg.dot	2023-06-07 19:33:45.397394692 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/88-cfg.dot	2023-06-07 19:33:51.977393989 +0330
@@ -1,45 +1,61 @@
-digraph "CallVoidMethodA" {  
-"4331" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1126</SUB>> ]
-"4348" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1127</SUB>> ]
-"4366" [label = <(soa,soa(env))<SUB>1128</SUB>> ]
-"4368" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>1129</SUB>> ]
-"4335" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1126</SUB>> ]
-"4352" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1127</SUB>> ]
-"4336" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1126</SUB>> ]
-"4340" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1126</SUB>> ]
-"4347" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1126</SUB>> ]
-"4353" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1127</SUB>> ]
-"4357" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1127</SUB>> ]
-"4364" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1127</SUB>> ]
-"4341" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1126</SUB>> ]
-"4358" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1127</SUB>> ]
-"4342" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1126</SUB>> ]
-"4344" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1126</SUB>> ]
-"4359" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1127</SUB>> ]
-"4361" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1127</SUB>> ]
-"4325" [label = <(METHOD,CallVoidMethodA)<SUB>1125</SUB>> ]
-"4373" [label = <(METHOD_RETURN,void)<SUB>1125</SUB>> ]
-  "4331" -> "4336" 
-  "4331" -> "4348" 
-  "4348" -> "4353" 
-  "4348" -> "4366" 
-  "4366" -> "4368" 
-  "4368" -> "4373" 
-  "4335" -> "4342" 
-  "4335" -> "4348" 
-  "4352" -> "4359" 
-  "4352" -> "4366" 
-  "4336" -> "4335" 
-  "4340" -> "4347" 
-  "4347" -> "4373" 
-  "4353" -> "4352" 
-  "4357" -> "4364" 
-  "4364" -> "4373" 
-  "4341" -> "4340" 
-  "4358" -> "4357" 
-  "4342" -> "4344" 
-  "4344" -> "4341" 
-  "4359" -> "4361" 
-  "4361" -> "4358" 
-  "4325" -> "4331" 
+digraph "CallNonvirtualBooleanMethod" {  
+"4398" [label = <(va_start,va_start(ap, mid))<SUB>1086</SUB>> ]
+"4402" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1087</SUB>> ]
+"4405" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1088</SUB>> ]
+"4423" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1089</SUB>> ]
+"4442" [label = <(soa,soa(env))<SUB>1090</SUB>> ]
+"4445" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, ap)))<SUB>1091</SUB>> ]
+"4451" [label = <(RETURN,return result.GetZ();,return result.GetZ();)<SUB>1092</SUB>> ]
+"4403" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1087</SUB>> ]
+"4446" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1091</SUB>> ]
+"4452" [label = <(GetZ,result.GetZ())<SUB>1092</SUB>> ]
+"4453" [label = <(&lt;operator&gt;.fieldAccess,result.GetZ)<SUB>1092</SUB>> ]
+"4409" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1088</SUB>> ]
+"4427" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1089</SUB>> ]
+"4455" [label = <(FIELD_IDENTIFIER,GetZ,GetZ)<SUB>1092</SUB>> ]
+"4410" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1088</SUB>> ]
+"4414" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1088</SUB>> ]
+"4421" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1088</SUB>> ]
+"4428" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1089</SUB>> ]
+"4432" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1089</SUB>> ]
+"4439" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1089</SUB>> ]
+"4415" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1088</SUB>> ]
+"4433" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1089</SUB>> ]
+"4416" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1088</SUB>> ]
+"4418" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1088</SUB>> ]
+"4434" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1089</SUB>> ]
+"4436" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1089</SUB>> ]
+"4391" [label = <(METHOD,CallNonvirtualBooleanMethod)<SUB>1083</SUB>> ]
+"4456" [label = <(METHOD_RETURN,jboolean)<SUB>1083</SUB>> ]
+  "4398" -> "4403" 
+  "4402" -> "4405" 
+  "4405" -> "4410" 
+  "4405" -> "4423" 
+  "4423" -> "4428" 
+  "4423" -> "4442" 
+  "4442" -> "4446" 
+  "4445" -> "4455" 
+  "4451" -> "4456" 
+  "4403" -> "4402" 
+  "4446" -> "4445" 
+  "4452" -> "4451" 
+  "4453" -> "4452" 
+  "4409" -> "4416" 
+  "4409" -> "4423" 
+  "4427" -> "4434" 
+  "4427" -> "4442" 
+  "4455" -> "4453" 
+  "4410" -> "4409" 
+  "4414" -> "4421" 
+  "4421" -> "4456" 
+  "4428" -> "4427" 
+  "4432" -> "4439" 
+  "4439" -> "4456" 
+  "4415" -> "4414" 
+  "4433" -> "4432" 
+  "4416" -> "4418" 
+  "4418" -> "4415" 
+  "4434" -> "4436" 
+  "4436" -> "4433" 
+  "4391" -> "4398" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/89-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/89-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/89-cfg.dot	2023-06-07 19:33:45.397394692 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/89-cfg.dot	2023-06-07 19:33:51.977393989 +0330
@@ -1,71 +1,53 @@
-digraph "CallNonvirtualObjectMethod" {  
-"4382" [label = <(va_start,va_start(ap, mid))<SUB>1134</SUB>> ]
-"4386" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1135</SUB>> ]
-"4389" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(obj))<SUB>1136</SUB>> ]
-"4407" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>1137</SUB>> ]
-"4426" [label = <(soa,soa(env))<SUB>1138</SUB>> ]
-"4429" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, ap)))<SUB>1139</SUB>> ]
-"4436" [label = <(&lt;operator&gt;.assignment,local_result = soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>1140</SUB>> ]
-"4448" [label = <(RETURN,return local_result;,return local_result;)<SUB>1141</SUB>> ]
-"4387" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1135</SUB>> ]
-"4430" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1139</SUB>> ]
-"4438" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>1140</SUB>> ]
-"4439" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>1140</SUB>> ]
-"4444" [label = <(GetL,result.GetL())<SUB>1140</SUB>> ]
-"4393" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1136</SUB>> ]
-"4411" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1137</SUB>> ]
-"4440" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1140</SUB>> ]
-"4445" [label = <(&lt;operator&gt;.fieldAccess,result.GetL)<SUB>1140</SUB>> ]
-"4394" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1136</SUB>> ]
-"4398" [label = <(CHECK_NON_NULL_ARGUMENT(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1136</SUB>> ]
-"4405" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(obj),CHECK_NON_NULL_ARGUMENT(obj))<SUB>1136</SUB>> ]
-"4412" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1137</SUB>> ]
-"4416" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1137</SUB>> ]
-"4423" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>1137</SUB>> ]
-"4442" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1140</SUB>> ]
-"4447" [label = <(FIELD_IDENTIFIER,GetL,GetL)<SUB>1140</SUB>> ]
-"4399" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1136</SUB>> ]
-"4417" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1137</SUB>> ]
-"4400" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1136</SUB>> ]
-"4402" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1136</SUB>> ]
-"4418" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1137</SUB>> ]
-"4420" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1137</SUB>> ]
-"4375" [label = <(METHOD,CallNonvirtualObjectMethod)<SUB>1132</SUB>> ]
-"4450" [label = <(METHOD_RETURN,jobject)<SUB>1132</SUB>> ]
-  "4382" -> "4387" 
-  "4386" -> "4389" 
-  "4389" -> "4394" 
-  "4389" -> "4407" 
-  "4407" -> "4412" 
-  "4407" -> "4426" 
-  "4426" -> "4430" 
-  "4429" -> "4442" 
-  "4436" -> "4448" 
-  "4448" -> "4450" 
-  "4387" -> "4386" 
-  "4430" -> "4429" 
-  "4438" -> "4436" 
-  "4439" -> "4447" 
-  "4444" -> "4438" 
-  "4393" -> "4400" 
-  "4393" -> "4407" 
-  "4411" -> "4418" 
-  "4411" -> "4426" 
-  "4440" -> "4439" 
-  "4445" -> "4444" 
-  "4394" -> "4393" 
-  "4398" -> "4405" 
-  "4405" -> "4450" 
-  "4412" -> "4411" 
-  "4416" -> "4423" 
-  "4423" -> "4450" 
-  "4442" -> "4440" 
-  "4447" -> "4445" 
-  "4399" -> "4398" 
-  "4417" -> "4416" 
-  "4400" -> "4402" 
-  "4402" -> "4399" 
-  "4418" -> "4420" 
-  "4420" -> "4417" 
-  "4375" -> "4382" 
+digraph "CallNonvirtualBooleanMethodV" {  
+"4465" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1097</SUB>> ]
+"4483" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1098</SUB>> ]
+"4502" [label = <(soa,soa(env))<SUB>1099</SUB>> ]
+"4504" [label = <(RETURN,return InvokeWithVarArgs(soa, obj, mid, args).GetZ();,return InvokeWithVarArgs(soa, obj, mid, args).GetZ();)<SUB>1100</SUB>> ]
+"4505" [label = <(GetZ,InvokeWithVarArgs(soa, obj, mid, args).GetZ())<SUB>1100</SUB>> ]
+"4506" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, obj, mid, args).GetZ)<SUB>1100</SUB>> ]
+"4469" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1097</SUB>> ]
+"4487" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1098</SUB>> ]
+"4507" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1100</SUB>> ]
+"4512" [label = <(FIELD_IDENTIFIER,GetZ,GetZ)<SUB>1100</SUB>> ]
+"4470" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1097</SUB>> ]
+"4474" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1097</SUB>> ]
+"4481" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1097</SUB>> ]
+"4488" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1098</SUB>> ]
+"4492" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1098</SUB>> ]
+"4499" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1098</SUB>> ]
+"4475" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1097</SUB>> ]
+"4493" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1098</SUB>> ]
+"4476" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1097</SUB>> ]
+"4478" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1097</SUB>> ]
+"4494" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1098</SUB>> ]
+"4496" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1098</SUB>> ]
+"4458" [label = <(METHOD,CallNonvirtualBooleanMethodV)<SUB>1095</SUB>> ]
+"4513" [label = <(METHOD_RETURN,jboolean)<SUB>1095</SUB>> ]
+  "4465" -> "4470" 
+  "4465" -> "4483" 
+  "4483" -> "4488" 
+  "4483" -> "4502" 
+  "4502" -> "4507" 
+  "4504" -> "4513" 
+  "4505" -> "4504" 
+  "4506" -> "4505" 
+  "4469" -> "4476" 
+  "4469" -> "4483" 
+  "4487" -> "4494" 
+  "4487" -> "4502" 
+  "4507" -> "4512" 
+  "4512" -> "4506" 
+  "4470" -> "4469" 
+  "4474" -> "4481" 
+  "4481" -> "4513" 
+  "4488" -> "4487" 
+  "4492" -> "4499" 
+  "4499" -> "4513" 
+  "4475" -> "4474" 
+  "4493" -> "4492" 
+  "4476" -> "4478" 
+  "4478" -> "4475" 
+  "4494" -> "4496" 
+  "4496" -> "4493" 
+  "4458" -> "4465" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/9-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/9-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/9-cfg.dot	2023-06-07 19:33:45.337394696 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/9-cfg.dot	2023-06-07 19:33:51.917393996 +0330
@@ -1,5 +1,5 @@
-digraph "NotifySetObjectField" {  
-"233" [label = <(METHOD,NotifySetObjectField)<SUB>181</SUB>> ]
-"238" [label = <(METHOD_RETURN,void)<SUB>181</SUB>> ]
-  "233" -> "238" 
+digraph "ThrowNoSuchMethodError" {  
+"156" [label = <(METHOD,ThrowNoSuchMethodError)<SUB>201</SUB>> ]
+"163" [label = <(METHOD_RETURN,void)<SUB>201</SUB>> ]
+  "156" -> "163" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/90-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/90-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/90-cfg.dot	2023-06-07 19:33:45.397394692 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/90-cfg.dot	2023-06-07 19:33:51.977393989 +0330
@@ -1,63 +1,53 @@
-digraph "CallNonvirtualObjectMethodV" {  
-"4459" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(obj))<SUB>1146</SUB>> ]
-"4477" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>1147</SUB>> ]
-"4496" [label = <(soa,soa(env))<SUB>1148</SUB>> ]
-"4499" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, args)))<SUB>1149</SUB>> ]
-"4505" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());)<SUB>1150</SUB>> ]
-"4500" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1149</SUB>> ]
-"4506" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>1150</SUB>> ]
-"4507" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>1150</SUB>> ]
-"4512" [label = <(GetL,result.GetL())<SUB>1150</SUB>> ]
-"4463" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1146</SUB>> ]
-"4481" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1147</SUB>> ]
-"4508" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1150</SUB>> ]
-"4513" [label = <(&lt;operator&gt;.fieldAccess,result.GetL)<SUB>1150</SUB>> ]
-"4464" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1146</SUB>> ]
-"4468" [label = <(CHECK_NON_NULL_ARGUMENT(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1146</SUB>> ]
-"4475" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(obj),CHECK_NON_NULL_ARGUMENT(obj))<SUB>1146</SUB>> ]
-"4482" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1147</SUB>> ]
-"4486" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1147</SUB>> ]
-"4493" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>1147</SUB>> ]
-"4510" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1150</SUB>> ]
-"4515" [label = <(FIELD_IDENTIFIER,GetL,GetL)<SUB>1150</SUB>> ]
-"4469" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1146</SUB>> ]
-"4487" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1147</SUB>> ]
-"4470" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1146</SUB>> ]
-"4472" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1146</SUB>> ]
-"4488" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1147</SUB>> ]
-"4490" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1147</SUB>> ]
-"4452" [label = <(METHOD,CallNonvirtualObjectMethodV)<SUB>1144</SUB>> ]
-"4516" [label = <(METHOD_RETURN,jobject)<SUB>1144</SUB>> ]
-  "4459" -> "4464" 
-  "4459" -> "4477" 
-  "4477" -> "4482" 
-  "4477" -> "4496" 
-  "4496" -> "4500" 
-  "4499" -> "4510" 
-  "4505" -> "4516" 
-  "4500" -> "4499" 
-  "4506" -> "4505" 
-  "4507" -> "4515" 
-  "4512" -> "4506" 
-  "4463" -> "4470" 
-  "4463" -> "4477" 
-  "4481" -> "4488" 
-  "4481" -> "4496" 
-  "4508" -> "4507" 
-  "4513" -> "4512" 
-  "4464" -> "4463" 
-  "4468" -> "4475" 
-  "4475" -> "4516" 
-  "4482" -> "4481" 
-  "4486" -> "4493" 
-  "4493" -> "4516" 
-  "4510" -> "4508" 
-  "4515" -> "4513" 
-  "4469" -> "4468" 
-  "4487" -> "4486" 
-  "4470" -> "4472" 
-  "4472" -> "4469" 
-  "4488" -> "4490" 
-  "4490" -> "4487" 
-  "4452" -> "4459" 
+digraph "CallNonvirtualBooleanMethodA" {  
+"4522" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1105</SUB>> ]
+"4540" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1106</SUB>> ]
+"4559" [label = <(soa,soa(env))<SUB>1107</SUB>> ]
+"4561" [label = <(RETURN,return InvokeWithJValues(soa, obj, mid, args).GetZ();,return InvokeWithJValues(soa, obj, mid, args).GetZ();)<SUB>1108</SUB>> ]
+"4562" [label = <(GetZ,InvokeWithJValues(soa, obj, mid, args).GetZ())<SUB>1108</SUB>> ]
+"4563" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, obj, mid, args).GetZ)<SUB>1108</SUB>> ]
+"4526" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1105</SUB>> ]
+"4544" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1106</SUB>> ]
+"4564" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1108</SUB>> ]
+"4569" [label = <(FIELD_IDENTIFIER,GetZ,GetZ)<SUB>1108</SUB>> ]
+"4527" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1105</SUB>> ]
+"4531" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1105</SUB>> ]
+"4538" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1105</SUB>> ]
+"4545" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1106</SUB>> ]
+"4549" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1106</SUB>> ]
+"4556" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1106</SUB>> ]
+"4532" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1105</SUB>> ]
+"4550" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1106</SUB>> ]
+"4533" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1105</SUB>> ]
+"4535" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1105</SUB>> ]
+"4551" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1106</SUB>> ]
+"4553" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1106</SUB>> ]
+"4515" [label = <(METHOD,CallNonvirtualBooleanMethodA)<SUB>1103</SUB>> ]
+"4570" [label = <(METHOD_RETURN,jboolean)<SUB>1103</SUB>> ]
+  "4522" -> "4527" 
+  "4522" -> "4540" 
+  "4540" -> "4545" 
+  "4540" -> "4559" 
+  "4559" -> "4564" 
+  "4561" -> "4570" 
+  "4562" -> "4561" 
+  "4563" -> "4562" 
+  "4526" -> "4533" 
+  "4526" -> "4540" 
+  "4544" -> "4551" 
+  "4544" -> "4559" 
+  "4564" -> "4569" 
+  "4569" -> "4563" 
+  "4527" -> "4526" 
+  "4531" -> "4538" 
+  "4538" -> "4570" 
+  "4545" -> "4544" 
+  "4549" -> "4556" 
+  "4556" -> "4570" 
+  "4532" -> "4531" 
+  "4550" -> "4549" 
+  "4533" -> "4535" 
+  "4535" -> "4532" 
+  "4551" -> "4553" 
+  "4553" -> "4550" 
+  "4515" -> "4522" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/91-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/91-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/91-cfg.dot	2023-06-07 19:33:45.397394692 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/91-cfg.dot	2023-06-07 19:33:51.977393989 +0330
@@ -1,63 +1,61 @@
-digraph "CallNonvirtualObjectMethodA" {  
-"4525" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(obj))<SUB>1155</SUB>> ]
-"4543" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>1156</SUB>> ]
-"4562" [label = <(soa,soa(env))<SUB>1157</SUB>> ]
-"4565" [label = <(result,result(InvokeWithJValues(soa, obj, mid, args)))<SUB>1158</SUB>> ]
-"4571" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());)<SUB>1159</SUB>> ]
-"4566" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1158</SUB>> ]
-"4572" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>1159</SUB>> ]
-"4573" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>1159</SUB>> ]
-"4578" [label = <(GetL,result.GetL())<SUB>1159</SUB>> ]
-"4529" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1155</SUB>> ]
-"4547" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1156</SUB>> ]
-"4574" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1159</SUB>> ]
-"4579" [label = <(&lt;operator&gt;.fieldAccess,result.GetL)<SUB>1159</SUB>> ]
-"4530" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1155</SUB>> ]
-"4534" [label = <(CHECK_NON_NULL_ARGUMENT(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1155</SUB>> ]
-"4541" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(obj),CHECK_NON_NULL_ARGUMENT(obj))<SUB>1155</SUB>> ]
-"4548" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1156</SUB>> ]
-"4552" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1156</SUB>> ]
-"4559" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>1156</SUB>> ]
-"4576" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1159</SUB>> ]
-"4581" [label = <(FIELD_IDENTIFIER,GetL,GetL)<SUB>1159</SUB>> ]
-"4535" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1155</SUB>> ]
-"4553" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1156</SUB>> ]
-"4536" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1155</SUB>> ]
-"4538" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1155</SUB>> ]
-"4554" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1156</SUB>> ]
-"4556" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1156</SUB>> ]
-"4518" [label = <(METHOD,CallNonvirtualObjectMethodA)<SUB>1153</SUB>> ]
-"4582" [label = <(METHOD_RETURN,jobject)<SUB>1153</SUB>> ]
-  "4525" -> "4530" 
-  "4525" -> "4543" 
-  "4543" -> "4548" 
-  "4543" -> "4562" 
-  "4562" -> "4566" 
-  "4565" -> "4576" 
-  "4571" -> "4582" 
-  "4566" -> "4565" 
-  "4572" -> "4571" 
-  "4573" -> "4581" 
-  "4578" -> "4572" 
-  "4529" -> "4536" 
-  "4529" -> "4543" 
-  "4547" -> "4554" 
-  "4547" -> "4562" 
-  "4574" -> "4573" 
-  "4579" -> "4578" 
-  "4530" -> "4529" 
-  "4534" -> "4541" 
-  "4541" -> "4582" 
-  "4548" -> "4547" 
-  "4552" -> "4559" 
-  "4559" -> "4582" 
-  "4576" -> "4574" 
-  "4581" -> "4579" 
-  "4535" -> "4534" 
-  "4553" -> "4552" 
-  "4536" -> "4538" 
-  "4538" -> "4535" 
-  "4554" -> "4556" 
-  "4556" -> "4553" 
-  "4518" -> "4525" 
+digraph "CallNonvirtualByteMethod" {  
+"4579" [label = <(va_start,va_start(ap, mid))<SUB>1113</SUB>> ]
+"4583" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1114</SUB>> ]
+"4586" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1115</SUB>> ]
+"4604" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1116</SUB>> ]
+"4623" [label = <(soa,soa(env))<SUB>1117</SUB>> ]
+"4626" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, ap)))<SUB>1118</SUB>> ]
+"4632" [label = <(RETURN,return result.GetB();,return result.GetB();)<SUB>1119</SUB>> ]
+"4584" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1114</SUB>> ]
+"4627" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1118</SUB>> ]
+"4633" [label = <(GetB,result.GetB())<SUB>1119</SUB>> ]
+"4634" [label = <(&lt;operator&gt;.fieldAccess,result.GetB)<SUB>1119</SUB>> ]
+"4590" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1115</SUB>> ]
+"4608" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1116</SUB>> ]
+"4636" [label = <(FIELD_IDENTIFIER,GetB,GetB)<SUB>1119</SUB>> ]
+"4591" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1115</SUB>> ]
+"4595" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1115</SUB>> ]
+"4602" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1115</SUB>> ]
+"4609" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1116</SUB>> ]
+"4613" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1116</SUB>> ]
+"4620" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1116</SUB>> ]
+"4596" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1115</SUB>> ]
+"4614" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1116</SUB>> ]
+"4597" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1115</SUB>> ]
+"4599" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1115</SUB>> ]
+"4615" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1116</SUB>> ]
+"4617" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1116</SUB>> ]
+"4572" [label = <(METHOD,CallNonvirtualByteMethod)<SUB>1111</SUB>> ]
+"4637" [label = <(METHOD_RETURN,jbyte)<SUB>1111</SUB>> ]
+  "4579" -> "4584" 
+  "4583" -> "4586" 
+  "4586" -> "4591" 
+  "4586" -> "4604" 
+  "4604" -> "4609" 
+  "4604" -> "4623" 
+  "4623" -> "4627" 
+  "4626" -> "4636" 
+  "4632" -> "4637" 
+  "4584" -> "4583" 
+  "4627" -> "4626" 
+  "4633" -> "4632" 
+  "4634" -> "4633" 
+  "4590" -> "4597" 
+  "4590" -> "4604" 
+  "4608" -> "4615" 
+  "4608" -> "4623" 
+  "4636" -> "4634" 
+  "4591" -> "4590" 
+  "4595" -> "4602" 
+  "4602" -> "4637" 
+  "4609" -> "4608" 
+  "4613" -> "4620" 
+  "4620" -> "4637" 
+  "4596" -> "4595" 
+  "4614" -> "4613" 
+  "4597" -> "4599" 
+  "4599" -> "4596" 
+  "4615" -> "4617" 
+  "4617" -> "4614" 
+  "4572" -> "4579" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/92-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/92-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/92-cfg.dot	2023-06-07 19:33:45.397394692 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/92-cfg.dot	2023-06-07 19:33:51.977393989 +0330
@@ -1,61 +1,53 @@
-digraph "CallNonvirtualBooleanMethod" {  
-"4591" [label = <(va_start,va_start(ap, mid))<SUB>1165</SUB>> ]
-"4595" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1166</SUB>> ]
-"4598" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1167</SUB>> ]
-"4616" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1168</SUB>> ]
-"4635" [label = <(soa,soa(env))<SUB>1169</SUB>> ]
-"4638" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, ap)))<SUB>1170</SUB>> ]
-"4644" [label = <(RETURN,return result.GetZ();,return result.GetZ();)<SUB>1171</SUB>> ]
-"4596" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1166</SUB>> ]
-"4639" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1170</SUB>> ]
-"4645" [label = <(GetZ,result.GetZ())<SUB>1171</SUB>> ]
-"4646" [label = <(&lt;operator&gt;.fieldAccess,result.GetZ)<SUB>1171</SUB>> ]
-"4602" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1167</SUB>> ]
-"4620" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1168</SUB>> ]
-"4648" [label = <(FIELD_IDENTIFIER,GetZ,GetZ)<SUB>1171</SUB>> ]
-"4603" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1167</SUB>> ]
-"4607" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1167</SUB>> ]
-"4614" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1167</SUB>> ]
-"4621" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1168</SUB>> ]
-"4625" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1168</SUB>> ]
-"4632" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1168</SUB>> ]
-"4608" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1167</SUB>> ]
-"4626" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1168</SUB>> ]
-"4609" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1167</SUB>> ]
-"4611" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1167</SUB>> ]
-"4627" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1168</SUB>> ]
-"4629" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1168</SUB>> ]
-"4584" [label = <(METHOD,CallNonvirtualBooleanMethod)<SUB>1162</SUB>> ]
-"4649" [label = <(METHOD_RETURN,jboolean)<SUB>1162</SUB>> ]
-  "4591" -> "4596" 
-  "4595" -> "4598" 
-  "4598" -> "4603" 
-  "4598" -> "4616" 
-  "4616" -> "4621" 
-  "4616" -> "4635" 
-  "4635" -> "4639" 
-  "4638" -> "4648" 
-  "4644" -> "4649" 
-  "4596" -> "4595" 
-  "4639" -> "4638" 
-  "4645" -> "4644" 
-  "4646" -> "4645" 
-  "4602" -> "4609" 
-  "4602" -> "4616" 
-  "4620" -> "4627" 
-  "4620" -> "4635" 
-  "4648" -> "4646" 
-  "4603" -> "4602" 
-  "4607" -> "4614" 
-  "4614" -> "4649" 
-  "4621" -> "4620" 
-  "4625" -> "4632" 
-  "4632" -> "4649" 
-  "4608" -> "4607" 
-  "4626" -> "4625" 
-  "4609" -> "4611" 
-  "4611" -> "4608" 
-  "4627" -> "4629" 
-  "4629" -> "4626" 
-  "4584" -> "4591" 
+digraph "CallNonvirtualByteMethodV" {  
+"4646" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1124</SUB>> ]
+"4664" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1125</SUB>> ]
+"4683" [label = <(soa,soa(env))<SUB>1126</SUB>> ]
+"4685" [label = <(RETURN,return InvokeWithVarArgs(soa, obj, mid, args).GetB();,return InvokeWithVarArgs(soa, obj, mid, args).GetB();)<SUB>1127</SUB>> ]
+"4686" [label = <(GetB,InvokeWithVarArgs(soa, obj, mid, args).GetB())<SUB>1127</SUB>> ]
+"4687" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, obj, mid, args).GetB)<SUB>1127</SUB>> ]
+"4650" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1124</SUB>> ]
+"4668" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1125</SUB>> ]
+"4688" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1127</SUB>> ]
+"4693" [label = <(FIELD_IDENTIFIER,GetB,GetB)<SUB>1127</SUB>> ]
+"4651" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1124</SUB>> ]
+"4655" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1124</SUB>> ]
+"4662" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1124</SUB>> ]
+"4669" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1125</SUB>> ]
+"4673" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1125</SUB>> ]
+"4680" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1125</SUB>> ]
+"4656" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1124</SUB>> ]
+"4674" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1125</SUB>> ]
+"4657" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1124</SUB>> ]
+"4659" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1124</SUB>> ]
+"4675" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1125</SUB>> ]
+"4677" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1125</SUB>> ]
+"4639" [label = <(METHOD,CallNonvirtualByteMethodV)<SUB>1122</SUB>> ]
+"4694" [label = <(METHOD_RETURN,jbyte)<SUB>1122</SUB>> ]
+  "4646" -> "4651" 
+  "4646" -> "4664" 
+  "4664" -> "4669" 
+  "4664" -> "4683" 
+  "4683" -> "4688" 
+  "4685" -> "4694" 
+  "4686" -> "4685" 
+  "4687" -> "4686" 
+  "4650" -> "4657" 
+  "4650" -> "4664" 
+  "4668" -> "4675" 
+  "4668" -> "4683" 
+  "4688" -> "4693" 
+  "4693" -> "4687" 
+  "4651" -> "4650" 
+  "4655" -> "4662" 
+  "4662" -> "4694" 
+  "4669" -> "4668" 
+  "4673" -> "4680" 
+  "4680" -> "4694" 
+  "4656" -> "4655" 
+  "4674" -> "4673" 
+  "4657" -> "4659" 
+  "4659" -> "4656" 
+  "4675" -> "4677" 
+  "4677" -> "4674" 
+  "4639" -> "4646" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/93-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/93-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/93-cfg.dot	2023-06-07 19:33:45.397394692 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/93-cfg.dot	2023-06-07 19:33:51.977393989 +0330
@@ -1,53 +1,53 @@
-digraph "CallNonvirtualBooleanMethodV" {  
-"4658" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1176</SUB>> ]
-"4676" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1177</SUB>> ]
-"4695" [label = <(soa,soa(env))<SUB>1178</SUB>> ]
-"4697" [label = <(RETURN,return InvokeWithVarArgs(soa, obj, mid, args).GetZ();,return InvokeWithVarArgs(soa, obj, mid, args).GetZ();)<SUB>1179</SUB>> ]
-"4698" [label = <(GetZ,InvokeWithVarArgs(soa, obj, mid, args).GetZ())<SUB>1179</SUB>> ]
-"4699" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, obj, mid, args).GetZ)<SUB>1179</SUB>> ]
-"4662" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1176</SUB>> ]
-"4680" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1177</SUB>> ]
-"4700" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1179</SUB>> ]
-"4705" [label = <(FIELD_IDENTIFIER,GetZ,GetZ)<SUB>1179</SUB>> ]
-"4663" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1176</SUB>> ]
-"4667" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1176</SUB>> ]
-"4674" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1176</SUB>> ]
-"4681" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1177</SUB>> ]
-"4685" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1177</SUB>> ]
-"4692" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1177</SUB>> ]
-"4668" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1176</SUB>> ]
-"4686" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1177</SUB>> ]
-"4669" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1176</SUB>> ]
-"4671" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1176</SUB>> ]
-"4687" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1177</SUB>> ]
-"4689" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1177</SUB>> ]
-"4651" [label = <(METHOD,CallNonvirtualBooleanMethodV)<SUB>1174</SUB>> ]
-"4706" [label = <(METHOD_RETURN,jboolean)<SUB>1174</SUB>> ]
-  "4658" -> "4663" 
-  "4658" -> "4676" 
-  "4676" -> "4681" 
-  "4676" -> "4695" 
-  "4695" -> "4700" 
-  "4697" -> "4706" 
-  "4698" -> "4697" 
-  "4699" -> "4698" 
-  "4662" -> "4669" 
-  "4662" -> "4676" 
-  "4680" -> "4687" 
-  "4680" -> "4695" 
-  "4700" -> "4705" 
-  "4705" -> "4699" 
-  "4663" -> "4662" 
-  "4667" -> "4674" 
-  "4674" -> "4706" 
-  "4681" -> "4680" 
-  "4685" -> "4692" 
-  "4692" -> "4706" 
-  "4668" -> "4667" 
-  "4686" -> "4685" 
-  "4669" -> "4671" 
-  "4671" -> "4668" 
-  "4687" -> "4689" 
-  "4689" -> "4686" 
-  "4651" -> "4658" 
+digraph "CallNonvirtualByteMethodA" {  
+"4703" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1132</SUB>> ]
+"4721" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1133</SUB>> ]
+"4740" [label = <(soa,soa(env))<SUB>1134</SUB>> ]
+"4742" [label = <(RETURN,return InvokeWithJValues(soa, obj, mid, args).GetB();,return InvokeWithJValues(soa, obj, mid, args).GetB();)<SUB>1135</SUB>> ]
+"4743" [label = <(GetB,InvokeWithJValues(soa, obj, mid, args).GetB())<SUB>1135</SUB>> ]
+"4744" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, obj, mid, args).GetB)<SUB>1135</SUB>> ]
+"4707" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1132</SUB>> ]
+"4725" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1133</SUB>> ]
+"4745" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1135</SUB>> ]
+"4750" [label = <(FIELD_IDENTIFIER,GetB,GetB)<SUB>1135</SUB>> ]
+"4708" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1132</SUB>> ]
+"4712" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1132</SUB>> ]
+"4719" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1132</SUB>> ]
+"4726" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1133</SUB>> ]
+"4730" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1133</SUB>> ]
+"4737" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1133</SUB>> ]
+"4713" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1132</SUB>> ]
+"4731" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1133</SUB>> ]
+"4714" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1132</SUB>> ]
+"4716" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1132</SUB>> ]
+"4732" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1133</SUB>> ]
+"4734" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1133</SUB>> ]
+"4696" [label = <(METHOD,CallNonvirtualByteMethodA)<SUB>1130</SUB>> ]
+"4751" [label = <(METHOD_RETURN,jbyte)<SUB>1130</SUB>> ]
+  "4703" -> "4708" 
+  "4703" -> "4721" 
+  "4721" -> "4726" 
+  "4721" -> "4740" 
+  "4740" -> "4745" 
+  "4742" -> "4751" 
+  "4743" -> "4742" 
+  "4744" -> "4743" 
+  "4707" -> "4714" 
+  "4707" -> "4721" 
+  "4725" -> "4732" 
+  "4725" -> "4740" 
+  "4745" -> "4750" 
+  "4750" -> "4744" 
+  "4708" -> "4707" 
+  "4712" -> "4719" 
+  "4719" -> "4751" 
+  "4726" -> "4725" 
+  "4730" -> "4737" 
+  "4737" -> "4751" 
+  "4713" -> "4712" 
+  "4731" -> "4730" 
+  "4714" -> "4716" 
+  "4716" -> "4713" 
+  "4732" -> "4734" 
+  "4734" -> "4731" 
+  "4696" -> "4703" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/94-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/94-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/94-cfg.dot	2023-06-07 19:33:45.397394692 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/94-cfg.dot	2023-06-07 19:33:51.977393989 +0330
@@ -1,53 +1,61 @@
-digraph "CallNonvirtualBooleanMethodA" {  
-"4715" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1184</SUB>> ]
-"4733" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1185</SUB>> ]
-"4752" [label = <(soa,soa(env))<SUB>1186</SUB>> ]
-"4754" [label = <(RETURN,return InvokeWithJValues(soa, obj, mid, args).GetZ();,return InvokeWithJValues(soa, obj, mid, args).GetZ();)<SUB>1187</SUB>> ]
-"4755" [label = <(GetZ,InvokeWithJValues(soa, obj, mid, args).GetZ())<SUB>1187</SUB>> ]
-"4756" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, obj, mid, args).GetZ)<SUB>1187</SUB>> ]
-"4719" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1184</SUB>> ]
-"4737" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1185</SUB>> ]
-"4757" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1187</SUB>> ]
-"4762" [label = <(FIELD_IDENTIFIER,GetZ,GetZ)<SUB>1187</SUB>> ]
-"4720" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1184</SUB>> ]
-"4724" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1184</SUB>> ]
-"4731" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1184</SUB>> ]
-"4738" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1185</SUB>> ]
-"4742" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1185</SUB>> ]
-"4749" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1185</SUB>> ]
-"4725" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1184</SUB>> ]
-"4743" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1185</SUB>> ]
-"4726" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1184</SUB>> ]
-"4728" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1184</SUB>> ]
-"4744" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1185</SUB>> ]
-"4746" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1185</SUB>> ]
-"4708" [label = <(METHOD,CallNonvirtualBooleanMethodA)<SUB>1182</SUB>> ]
-"4763" [label = <(METHOD_RETURN,jboolean)<SUB>1182</SUB>> ]
-  "4715" -> "4720" 
-  "4715" -> "4733" 
-  "4733" -> "4738" 
-  "4733" -> "4752" 
-  "4752" -> "4757" 
-  "4754" -> "4763" 
-  "4755" -> "4754" 
-  "4756" -> "4755" 
-  "4719" -> "4726" 
-  "4719" -> "4733" 
-  "4737" -> "4744" 
-  "4737" -> "4752" 
-  "4757" -> "4762" 
-  "4762" -> "4756" 
-  "4720" -> "4719" 
-  "4724" -> "4731" 
-  "4731" -> "4763" 
-  "4738" -> "4737" 
-  "4742" -> "4749" 
-  "4749" -> "4763" 
-  "4725" -> "4724" 
-  "4743" -> "4742" 
-  "4726" -> "4728" 
-  "4728" -> "4725" 
-  "4744" -> "4746" 
-  "4746" -> "4743" 
-  "4708" -> "4715" 
+digraph "CallNonvirtualCharMethod" {  
+"4760" [label = <(va_start,va_start(ap, mid))<SUB>1140</SUB>> ]
+"4764" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1141</SUB>> ]
+"4767" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1142</SUB>> ]
+"4785" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1143</SUB>> ]
+"4804" [label = <(soa,soa(env))<SUB>1144</SUB>> ]
+"4807" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, ap)))<SUB>1145</SUB>> ]
+"4813" [label = <(RETURN,return result.GetC();,return result.GetC();)<SUB>1146</SUB>> ]
+"4765" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1141</SUB>> ]
+"4808" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1145</SUB>> ]
+"4814" [label = <(GetC,result.GetC())<SUB>1146</SUB>> ]
+"4815" [label = <(&lt;operator&gt;.fieldAccess,result.GetC)<SUB>1146</SUB>> ]
+"4771" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1142</SUB>> ]
+"4789" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1143</SUB>> ]
+"4817" [label = <(FIELD_IDENTIFIER,GetC,GetC)<SUB>1146</SUB>> ]
+"4772" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1142</SUB>> ]
+"4776" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1142</SUB>> ]
+"4783" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1142</SUB>> ]
+"4790" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1143</SUB>> ]
+"4794" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1143</SUB>> ]
+"4801" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1143</SUB>> ]
+"4777" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1142</SUB>> ]
+"4795" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1143</SUB>> ]
+"4778" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1142</SUB>> ]
+"4780" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1142</SUB>> ]
+"4796" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1143</SUB>> ]
+"4798" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1143</SUB>> ]
+"4753" [label = <(METHOD,CallNonvirtualCharMethod)<SUB>1138</SUB>> ]
+"4818" [label = <(METHOD_RETURN,jchar)<SUB>1138</SUB>> ]
+  "4760" -> "4765" 
+  "4764" -> "4767" 
+  "4767" -> "4772" 
+  "4767" -> "4785" 
+  "4785" -> "4790" 
+  "4785" -> "4804" 
+  "4804" -> "4808" 
+  "4807" -> "4817" 
+  "4813" -> "4818" 
+  "4765" -> "4764" 
+  "4808" -> "4807" 
+  "4814" -> "4813" 
+  "4815" -> "4814" 
+  "4771" -> "4778" 
+  "4771" -> "4785" 
+  "4789" -> "4796" 
+  "4789" -> "4804" 
+  "4817" -> "4815" 
+  "4772" -> "4771" 
+  "4776" -> "4783" 
+  "4783" -> "4818" 
+  "4790" -> "4789" 
+  "4794" -> "4801" 
+  "4801" -> "4818" 
+  "4777" -> "4776" 
+  "4795" -> "4794" 
+  "4778" -> "4780" 
+  "4780" -> "4777" 
+  "4796" -> "4798" 
+  "4798" -> "4795" 
+  "4753" -> "4760" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/95-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/95-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/95-cfg.dot	2023-06-07 19:33:45.397394692 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/95-cfg.dot	2023-06-07 19:33:51.977393989 +0330
@@ -1,61 +1,53 @@
-digraph "CallNonvirtualByteMethod" {  
-"4772" [label = <(va_start,va_start(ap, mid))<SUB>1192</SUB>> ]
-"4776" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1193</SUB>> ]
-"4779" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1194</SUB>> ]
-"4797" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1195</SUB>> ]
-"4816" [label = <(soa,soa(env))<SUB>1196</SUB>> ]
-"4819" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, ap)))<SUB>1197</SUB>> ]
-"4825" [label = <(RETURN,return result.GetB();,return result.GetB();)<SUB>1198</SUB>> ]
-"4777" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1193</SUB>> ]
-"4820" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1197</SUB>> ]
-"4826" [label = <(GetB,result.GetB())<SUB>1198</SUB>> ]
-"4827" [label = <(&lt;operator&gt;.fieldAccess,result.GetB)<SUB>1198</SUB>> ]
-"4783" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1194</SUB>> ]
-"4801" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1195</SUB>> ]
-"4829" [label = <(FIELD_IDENTIFIER,GetB,GetB)<SUB>1198</SUB>> ]
-"4784" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1194</SUB>> ]
-"4788" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1194</SUB>> ]
-"4795" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1194</SUB>> ]
-"4802" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1195</SUB>> ]
-"4806" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1195</SUB>> ]
-"4813" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1195</SUB>> ]
-"4789" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1194</SUB>> ]
-"4807" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1195</SUB>> ]
-"4790" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1194</SUB>> ]
-"4792" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1194</SUB>> ]
-"4808" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1195</SUB>> ]
-"4810" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1195</SUB>> ]
-"4765" [label = <(METHOD,CallNonvirtualByteMethod)<SUB>1190</SUB>> ]
-"4830" [label = <(METHOD_RETURN,jbyte)<SUB>1190</SUB>> ]
-  "4772" -> "4777" 
-  "4776" -> "4779" 
-  "4779" -> "4784" 
-  "4779" -> "4797" 
-  "4797" -> "4802" 
-  "4797" -> "4816" 
-  "4816" -> "4820" 
-  "4819" -> "4829" 
-  "4825" -> "4830" 
-  "4777" -> "4776" 
-  "4820" -> "4819" 
-  "4826" -> "4825" 
-  "4827" -> "4826" 
-  "4783" -> "4790" 
-  "4783" -> "4797" 
-  "4801" -> "4808" 
-  "4801" -> "4816" 
-  "4829" -> "4827" 
-  "4784" -> "4783" 
-  "4788" -> "4795" 
-  "4795" -> "4830" 
-  "4802" -> "4801" 
-  "4806" -> "4813" 
-  "4813" -> "4830" 
-  "4789" -> "4788" 
-  "4807" -> "4806" 
-  "4790" -> "4792" 
-  "4792" -> "4789" 
-  "4808" -> "4810" 
-  "4810" -> "4807" 
-  "4765" -> "4772" 
+digraph "CallNonvirtualCharMethodV" {  
+"4827" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1151</SUB>> ]
+"4845" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1152</SUB>> ]
+"4864" [label = <(soa,soa(env))<SUB>1153</SUB>> ]
+"4866" [label = <(RETURN,return InvokeWithVarArgs(soa, obj, mid, args).GetC();,return InvokeWithVarArgs(soa, obj, mid, args).GetC();)<SUB>1154</SUB>> ]
+"4867" [label = <(GetC,InvokeWithVarArgs(soa, obj, mid, args).GetC())<SUB>1154</SUB>> ]
+"4868" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, obj, mid, args).GetC)<SUB>1154</SUB>> ]
+"4831" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1151</SUB>> ]
+"4849" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1152</SUB>> ]
+"4869" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1154</SUB>> ]
+"4874" [label = <(FIELD_IDENTIFIER,GetC,GetC)<SUB>1154</SUB>> ]
+"4832" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1151</SUB>> ]
+"4836" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1151</SUB>> ]
+"4843" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1151</SUB>> ]
+"4850" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1152</SUB>> ]
+"4854" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1152</SUB>> ]
+"4861" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1152</SUB>> ]
+"4837" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1151</SUB>> ]
+"4855" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1152</SUB>> ]
+"4838" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1151</SUB>> ]
+"4840" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1151</SUB>> ]
+"4856" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1152</SUB>> ]
+"4858" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1152</SUB>> ]
+"4820" [label = <(METHOD,CallNonvirtualCharMethodV)<SUB>1149</SUB>> ]
+"4875" [label = <(METHOD_RETURN,jchar)<SUB>1149</SUB>> ]
+  "4827" -> "4832" 
+  "4827" -> "4845" 
+  "4845" -> "4850" 
+  "4845" -> "4864" 
+  "4864" -> "4869" 
+  "4866" -> "4875" 
+  "4867" -> "4866" 
+  "4868" -> "4867" 
+  "4831" -> "4838" 
+  "4831" -> "4845" 
+  "4849" -> "4856" 
+  "4849" -> "4864" 
+  "4869" -> "4874" 
+  "4874" -> "4868" 
+  "4832" -> "4831" 
+  "4836" -> "4843" 
+  "4843" -> "4875" 
+  "4850" -> "4849" 
+  "4854" -> "4861" 
+  "4861" -> "4875" 
+  "4837" -> "4836" 
+  "4855" -> "4854" 
+  "4838" -> "4840" 
+  "4840" -> "4837" 
+  "4856" -> "4858" 
+  "4858" -> "4855" 
+  "4820" -> "4827" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/96-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/96-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/96-cfg.dot	2023-06-07 19:33:45.397394692 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/96-cfg.dot	2023-06-07 19:33:51.977393989 +0330
@@ -1,53 +1,53 @@
-digraph "CallNonvirtualByteMethodV" {  
-"4839" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1203</SUB>> ]
-"4857" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1204</SUB>> ]
-"4876" [label = <(soa,soa(env))<SUB>1205</SUB>> ]
-"4878" [label = <(RETURN,return InvokeWithVarArgs(soa, obj, mid, args).GetB();,return InvokeWithVarArgs(soa, obj, mid, args).GetB();)<SUB>1206</SUB>> ]
-"4879" [label = <(GetB,InvokeWithVarArgs(soa, obj, mid, args).GetB())<SUB>1206</SUB>> ]
-"4880" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, obj, mid, args).GetB)<SUB>1206</SUB>> ]
-"4843" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1203</SUB>> ]
-"4861" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1204</SUB>> ]
-"4881" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1206</SUB>> ]
-"4886" [label = <(FIELD_IDENTIFIER,GetB,GetB)<SUB>1206</SUB>> ]
-"4844" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1203</SUB>> ]
-"4848" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1203</SUB>> ]
-"4855" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1203</SUB>> ]
-"4862" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1204</SUB>> ]
-"4866" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1204</SUB>> ]
-"4873" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1204</SUB>> ]
-"4849" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1203</SUB>> ]
-"4867" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1204</SUB>> ]
-"4850" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1203</SUB>> ]
-"4852" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1203</SUB>> ]
-"4868" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1204</SUB>> ]
-"4870" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1204</SUB>> ]
-"4832" [label = <(METHOD,CallNonvirtualByteMethodV)<SUB>1201</SUB>> ]
-"4887" [label = <(METHOD_RETURN,jbyte)<SUB>1201</SUB>> ]
-  "4839" -> "4844" 
-  "4839" -> "4857" 
-  "4857" -> "4862" 
-  "4857" -> "4876" 
-  "4876" -> "4881" 
-  "4878" -> "4887" 
-  "4879" -> "4878" 
-  "4880" -> "4879" 
-  "4843" -> "4850" 
-  "4843" -> "4857" 
-  "4861" -> "4868" 
-  "4861" -> "4876" 
-  "4881" -> "4886" 
-  "4886" -> "4880" 
-  "4844" -> "4843" 
-  "4848" -> "4855" 
-  "4855" -> "4887" 
-  "4862" -> "4861" 
-  "4866" -> "4873" 
-  "4873" -> "4887" 
-  "4849" -> "4848" 
-  "4867" -> "4866" 
-  "4850" -> "4852" 
-  "4852" -> "4849" 
-  "4868" -> "4870" 
-  "4870" -> "4867" 
-  "4832" -> "4839" 
+digraph "CallNonvirtualCharMethodA" {  
+"4884" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1159</SUB>> ]
+"4902" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1160</SUB>> ]
+"4921" [label = <(soa,soa(env))<SUB>1161</SUB>> ]
+"4923" [label = <(RETURN,return InvokeWithJValues(soa, obj, mid, args).GetC();,return InvokeWithJValues(soa, obj, mid, args).GetC();)<SUB>1162</SUB>> ]
+"4924" [label = <(GetC,InvokeWithJValues(soa, obj, mid, args).GetC())<SUB>1162</SUB>> ]
+"4925" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, obj, mid, args).GetC)<SUB>1162</SUB>> ]
+"4888" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1159</SUB>> ]
+"4906" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1160</SUB>> ]
+"4926" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1162</SUB>> ]
+"4931" [label = <(FIELD_IDENTIFIER,GetC,GetC)<SUB>1162</SUB>> ]
+"4889" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1159</SUB>> ]
+"4893" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1159</SUB>> ]
+"4900" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1159</SUB>> ]
+"4907" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1160</SUB>> ]
+"4911" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1160</SUB>> ]
+"4918" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1160</SUB>> ]
+"4894" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1159</SUB>> ]
+"4912" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1160</SUB>> ]
+"4895" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1159</SUB>> ]
+"4897" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1159</SUB>> ]
+"4913" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1160</SUB>> ]
+"4915" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1160</SUB>> ]
+"4877" [label = <(METHOD,CallNonvirtualCharMethodA)<SUB>1157</SUB>> ]
+"4932" [label = <(METHOD_RETURN,jchar)<SUB>1157</SUB>> ]
+  "4884" -> "4889" 
+  "4884" -> "4902" 
+  "4902" -> "4907" 
+  "4902" -> "4921" 
+  "4921" -> "4926" 
+  "4923" -> "4932" 
+  "4924" -> "4923" 
+  "4925" -> "4924" 
+  "4888" -> "4895" 
+  "4888" -> "4902" 
+  "4906" -> "4913" 
+  "4906" -> "4921" 
+  "4926" -> "4931" 
+  "4931" -> "4925" 
+  "4889" -> "4888" 
+  "4893" -> "4900" 
+  "4900" -> "4932" 
+  "4907" -> "4906" 
+  "4911" -> "4918" 
+  "4918" -> "4932" 
+  "4894" -> "4893" 
+  "4912" -> "4911" 
+  "4895" -> "4897" 
+  "4897" -> "4894" 
+  "4913" -> "4915" 
+  "4915" -> "4912" 
+  "4877" -> "4884" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/97-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/97-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/97-cfg.dot	2023-06-07 19:33:45.397394692 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/97-cfg.dot	2023-06-07 19:33:51.987393986 +0330
@@ -1,53 +1,61 @@
-digraph "CallNonvirtualByteMethodA" {  
-"4896" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1211</SUB>> ]
-"4914" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1212</SUB>> ]
-"4933" [label = <(soa,soa(env))<SUB>1213</SUB>> ]
-"4935" [label = <(RETURN,return InvokeWithJValues(soa, obj, mid, args).GetB();,return InvokeWithJValues(soa, obj, mid, args).GetB();)<SUB>1214</SUB>> ]
-"4936" [label = <(GetB,InvokeWithJValues(soa, obj, mid, args).GetB())<SUB>1214</SUB>> ]
-"4937" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, obj, mid, args).GetB)<SUB>1214</SUB>> ]
-"4900" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1211</SUB>> ]
-"4918" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1212</SUB>> ]
-"4938" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1214</SUB>> ]
-"4943" [label = <(FIELD_IDENTIFIER,GetB,GetB)<SUB>1214</SUB>> ]
-"4901" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1211</SUB>> ]
-"4905" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1211</SUB>> ]
-"4912" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1211</SUB>> ]
-"4919" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1212</SUB>> ]
-"4923" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1212</SUB>> ]
-"4930" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1212</SUB>> ]
-"4906" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1211</SUB>> ]
-"4924" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1212</SUB>> ]
-"4907" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1211</SUB>> ]
-"4909" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1211</SUB>> ]
-"4925" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1212</SUB>> ]
-"4927" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1212</SUB>> ]
-"4889" [label = <(METHOD,CallNonvirtualByteMethodA)<SUB>1209</SUB>> ]
-"4944" [label = <(METHOD_RETURN,jbyte)<SUB>1209</SUB>> ]
-  "4896" -> "4901" 
-  "4896" -> "4914" 
-  "4914" -> "4919" 
-  "4914" -> "4933" 
-  "4933" -> "4938" 
-  "4935" -> "4944" 
-  "4936" -> "4935" 
-  "4937" -> "4936" 
-  "4900" -> "4907" 
-  "4900" -> "4914" 
-  "4918" -> "4925" 
-  "4918" -> "4933" 
-  "4938" -> "4943" 
-  "4943" -> "4937" 
-  "4901" -> "4900" 
-  "4905" -> "4912" 
-  "4912" -> "4944" 
-  "4919" -> "4918" 
-  "4923" -> "4930" 
-  "4930" -> "4944" 
-  "4906" -> "4905" 
-  "4924" -> "4923" 
-  "4907" -> "4909" 
-  "4909" -> "4906" 
-  "4925" -> "4927" 
-  "4927" -> "4924" 
-  "4889" -> "4896" 
+digraph "CallNonvirtualShortMethod" {  
+"4941" [label = <(va_start,va_start(ap, mid))<SUB>1167</SUB>> ]
+"4945" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1168</SUB>> ]
+"4948" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1169</SUB>> ]
+"4966" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1170</SUB>> ]
+"4985" [label = <(soa,soa(env))<SUB>1171</SUB>> ]
+"4988" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, ap)))<SUB>1172</SUB>> ]
+"4994" [label = <(RETURN,return result.GetS();,return result.GetS();)<SUB>1173</SUB>> ]
+"4946" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1168</SUB>> ]
+"4989" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1172</SUB>> ]
+"4995" [label = <(GetS,result.GetS())<SUB>1173</SUB>> ]
+"4996" [label = <(&lt;operator&gt;.fieldAccess,result.GetS)<SUB>1173</SUB>> ]
+"4952" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1169</SUB>> ]
+"4970" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1170</SUB>> ]
+"4998" [label = <(FIELD_IDENTIFIER,GetS,GetS)<SUB>1173</SUB>> ]
+"4953" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1169</SUB>> ]
+"4957" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1169</SUB>> ]
+"4964" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1169</SUB>> ]
+"4971" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1170</SUB>> ]
+"4975" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1170</SUB>> ]
+"4982" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1170</SUB>> ]
+"4958" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1169</SUB>> ]
+"4976" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1170</SUB>> ]
+"4959" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1169</SUB>> ]
+"4961" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1169</SUB>> ]
+"4977" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1170</SUB>> ]
+"4979" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1170</SUB>> ]
+"4934" [label = <(METHOD,CallNonvirtualShortMethod)<SUB>1165</SUB>> ]
+"4999" [label = <(METHOD_RETURN,jshort)<SUB>1165</SUB>> ]
+  "4941" -> "4946" 
+  "4945" -> "4948" 
+  "4948" -> "4953" 
+  "4948" -> "4966" 
+  "4966" -> "4971" 
+  "4966" -> "4985" 
+  "4985" -> "4989" 
+  "4988" -> "4998" 
+  "4994" -> "4999" 
+  "4946" -> "4945" 
+  "4989" -> "4988" 
+  "4995" -> "4994" 
+  "4996" -> "4995" 
+  "4952" -> "4959" 
+  "4952" -> "4966" 
+  "4970" -> "4977" 
+  "4970" -> "4985" 
+  "4998" -> "4996" 
+  "4953" -> "4952" 
+  "4957" -> "4964" 
+  "4964" -> "4999" 
+  "4971" -> "4970" 
+  "4975" -> "4982" 
+  "4982" -> "4999" 
+  "4958" -> "4957" 
+  "4976" -> "4975" 
+  "4959" -> "4961" 
+  "4961" -> "4958" 
+  "4977" -> "4979" 
+  "4979" -> "4976" 
+  "4934" -> "4941" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/98-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/98-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/98-cfg.dot	2023-06-07 19:33:45.407394690 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/98-cfg.dot	2023-06-07 19:33:51.987393986 +0330
@@ -1,61 +1,53 @@
-digraph "CallNonvirtualCharMethod" {  
-"4953" [label = <(va_start,va_start(ap, mid))<SUB>1219</SUB>> ]
-"4957" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1220</SUB>> ]
-"4960" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1221</SUB>> ]
-"4978" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1222</SUB>> ]
-"4997" [label = <(soa,soa(env))<SUB>1223</SUB>> ]
-"5000" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, ap)))<SUB>1224</SUB>> ]
-"5006" [label = <(RETURN,return result.GetC();,return result.GetC();)<SUB>1225</SUB>> ]
-"4958" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1220</SUB>> ]
-"5001" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1224</SUB>> ]
-"5007" [label = <(GetC,result.GetC())<SUB>1225</SUB>> ]
-"5008" [label = <(&lt;operator&gt;.fieldAccess,result.GetC)<SUB>1225</SUB>> ]
-"4964" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1221</SUB>> ]
-"4982" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1222</SUB>> ]
-"5010" [label = <(FIELD_IDENTIFIER,GetC,GetC)<SUB>1225</SUB>> ]
-"4965" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1221</SUB>> ]
-"4969" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1221</SUB>> ]
-"4976" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1221</SUB>> ]
-"4983" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1222</SUB>> ]
-"4987" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1222</SUB>> ]
-"4994" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1222</SUB>> ]
-"4970" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1221</SUB>> ]
-"4988" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1222</SUB>> ]
-"4971" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1221</SUB>> ]
-"4973" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1221</SUB>> ]
-"4989" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1222</SUB>> ]
-"4991" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1222</SUB>> ]
-"4946" [label = <(METHOD,CallNonvirtualCharMethod)<SUB>1217</SUB>> ]
-"5011" [label = <(METHOD_RETURN,jchar)<SUB>1217</SUB>> ]
-  "4953" -> "4958" 
-  "4957" -> "4960" 
-  "4960" -> "4965" 
-  "4960" -> "4978" 
-  "4978" -> "4983" 
-  "4978" -> "4997" 
-  "4997" -> "5001" 
-  "5000" -> "5010" 
-  "5006" -> "5011" 
-  "4958" -> "4957" 
-  "5001" -> "5000" 
-  "5007" -> "5006" 
-  "5008" -> "5007" 
-  "4964" -> "4971" 
-  "4964" -> "4978" 
-  "4982" -> "4989" 
-  "4982" -> "4997" 
-  "5010" -> "5008" 
-  "4965" -> "4964" 
-  "4969" -> "4976" 
-  "4976" -> "5011" 
-  "4983" -> "4982" 
-  "4987" -> "4994" 
-  "4994" -> "5011" 
-  "4970" -> "4969" 
-  "4988" -> "4987" 
-  "4971" -> "4973" 
-  "4973" -> "4970" 
-  "4989" -> "4991" 
-  "4991" -> "4988" 
-  "4946" -> "4953" 
+digraph "CallNonvirtualShortMethodV" {  
+"5008" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1178</SUB>> ]
+"5026" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1179</SUB>> ]
+"5045" [label = <(soa,soa(env))<SUB>1180</SUB>> ]
+"5047" [label = <(RETURN,return InvokeWithVarArgs(soa, obj, mid, args).GetS();,return InvokeWithVarArgs(soa, obj, mid, args).GetS();)<SUB>1181</SUB>> ]
+"5048" [label = <(GetS,InvokeWithVarArgs(soa, obj, mid, args).GetS())<SUB>1181</SUB>> ]
+"5049" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, obj, mid, args).GetS)<SUB>1181</SUB>> ]
+"5012" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1178</SUB>> ]
+"5030" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1179</SUB>> ]
+"5050" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1181</SUB>> ]
+"5055" [label = <(FIELD_IDENTIFIER,GetS,GetS)<SUB>1181</SUB>> ]
+"5013" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1178</SUB>> ]
+"5017" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1178</SUB>> ]
+"5024" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1178</SUB>> ]
+"5031" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1179</SUB>> ]
+"5035" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1179</SUB>> ]
+"5042" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1179</SUB>> ]
+"5018" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1178</SUB>> ]
+"5036" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1179</SUB>> ]
+"5019" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1178</SUB>> ]
+"5021" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1178</SUB>> ]
+"5037" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1179</SUB>> ]
+"5039" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1179</SUB>> ]
+"5001" [label = <(METHOD,CallNonvirtualShortMethodV)<SUB>1176</SUB>> ]
+"5056" [label = <(METHOD_RETURN,jshort)<SUB>1176</SUB>> ]
+  "5008" -> "5013" 
+  "5008" -> "5026" 
+  "5026" -> "5031" 
+  "5026" -> "5045" 
+  "5045" -> "5050" 
+  "5047" -> "5056" 
+  "5048" -> "5047" 
+  "5049" -> "5048" 
+  "5012" -> "5019" 
+  "5012" -> "5026" 
+  "5030" -> "5037" 
+  "5030" -> "5045" 
+  "5050" -> "5055" 
+  "5055" -> "5049" 
+  "5013" -> "5012" 
+  "5017" -> "5024" 
+  "5024" -> "5056" 
+  "5031" -> "5030" 
+  "5035" -> "5042" 
+  "5042" -> "5056" 
+  "5018" -> "5017" 
+  "5036" -> "5035" 
+  "5019" -> "5021" 
+  "5021" -> "5018" 
+  "5037" -> "5039" 
+  "5039" -> "5036" 
+  "5001" -> "5008" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/99-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/99-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/secure/out/99-cfg.dot	2023-06-07 19:33:45.407394690 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_1/vulnerable/out/99-cfg.dot	2023-06-07 19:33:51.987393986 +0330
@@ -1,53 +1,53 @@
-digraph "CallNonvirtualCharMethodV" {  
-"5020" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1230</SUB>> ]
-"5038" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1231</SUB>> ]
-"5057" [label = <(soa,soa(env))<SUB>1232</SUB>> ]
-"5059" [label = <(RETURN,return InvokeWithVarArgs(soa, obj, mid, args).GetC();,return InvokeWithVarArgs(soa, obj, mid, args).GetC();)<SUB>1233</SUB>> ]
-"5060" [label = <(GetC,InvokeWithVarArgs(soa, obj, mid, args).GetC())<SUB>1233</SUB>> ]
-"5061" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, obj, mid, args).GetC)<SUB>1233</SUB>> ]
-"5024" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1230</SUB>> ]
-"5042" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1231</SUB>> ]
-"5062" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1233</SUB>> ]
-"5067" [label = <(FIELD_IDENTIFIER,GetC,GetC)<SUB>1233</SUB>> ]
-"5025" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1230</SUB>> ]
-"5029" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1230</SUB>> ]
-"5036" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1230</SUB>> ]
-"5043" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1231</SUB>> ]
-"5047" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1231</SUB>> ]
-"5054" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1231</SUB>> ]
-"5030" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1230</SUB>> ]
-"5048" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1231</SUB>> ]
-"5031" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1230</SUB>> ]
-"5033" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1230</SUB>> ]
-"5049" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1231</SUB>> ]
-"5051" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1231</SUB>> ]
-"5013" [label = <(METHOD,CallNonvirtualCharMethodV)<SUB>1228</SUB>> ]
-"5068" [label = <(METHOD_RETURN,jchar)<SUB>1228</SUB>> ]
-  "5020" -> "5025" 
-  "5020" -> "5038" 
-  "5038" -> "5043" 
-  "5038" -> "5057" 
-  "5057" -> "5062" 
-  "5059" -> "5068" 
-  "5060" -> "5059" 
-  "5061" -> "5060" 
-  "5024" -> "5031" 
-  "5024" -> "5038" 
-  "5042" -> "5049" 
-  "5042" -> "5057" 
-  "5062" -> "5067" 
-  "5067" -> "5061" 
-  "5025" -> "5024" 
-  "5029" -> "5036" 
-  "5036" -> "5068" 
-  "5043" -> "5042" 
-  "5047" -> "5054" 
-  "5054" -> "5068" 
-  "5030" -> "5029" 
-  "5048" -> "5047" 
-  "5031" -> "5033" 
-  "5033" -> "5030" 
-  "5049" -> "5051" 
-  "5051" -> "5048" 
-  "5013" -> "5020" 
+digraph "CallNonvirtualShortMethodA" {  
+"5065" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1186</SUB>> ]
+"5083" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1187</SUB>> ]
+"5102" [label = <(soa,soa(env))<SUB>1188</SUB>> ]
+"5104" [label = <(RETURN,return InvokeWithJValues(soa, obj, mid, args).GetS();,return InvokeWithJValues(soa, obj, mid, args).GetS();)<SUB>1189</SUB>> ]
+"5105" [label = <(GetS,InvokeWithJValues(soa, obj, mid, args).GetS())<SUB>1189</SUB>> ]
+"5106" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, obj, mid, args).GetS)<SUB>1189</SUB>> ]
+"5069" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1186</SUB>> ]
+"5087" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1187</SUB>> ]
+"5107" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1189</SUB>> ]
+"5112" [label = <(FIELD_IDENTIFIER,GetS,GetS)<SUB>1189</SUB>> ]
+"5070" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1186</SUB>> ]
+"5074" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1186</SUB>> ]
+"5081" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1186</SUB>> ]
+"5088" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1187</SUB>> ]
+"5092" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1187</SUB>> ]
+"5099" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1187</SUB>> ]
+"5075" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1186</SUB>> ]
+"5093" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1187</SUB>> ]
+"5076" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1186</SUB>> ]
+"5078" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1186</SUB>> ]
+"5094" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1187</SUB>> ]
+"5096" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1187</SUB>> ]
+"5058" [label = <(METHOD,CallNonvirtualShortMethodA)<SUB>1184</SUB>> ]
+"5113" [label = <(METHOD_RETURN,jshort)<SUB>1184</SUB>> ]
+  "5065" -> "5070" 
+  "5065" -> "5083" 
+  "5083" -> "5088" 
+  "5083" -> "5102" 
+  "5102" -> "5107" 
+  "5104" -> "5113" 
+  "5105" -> "5104" 
+  "5106" -> "5105" 
+  "5069" -> "5076" 
+  "5069" -> "5083" 
+  "5087" -> "5094" 
+  "5087" -> "5102" 
+  "5107" -> "5112" 
+  "5112" -> "5106" 
+  "5070" -> "5069" 
+  "5074" -> "5081" 
+  "5081" -> "5113" 
+  "5088" -> "5087" 
+  "5092" -> "5099" 
+  "5099" -> "5113" 
+  "5075" -> "5074" 
+  "5093" -> "5092" 
+  "5076" -> "5078" 
+  "5078" -> "5075" 
+  "5094" -> "5096" 
+  "5096" -> "5093" 
+  "5058" -> "5065" 
 }
