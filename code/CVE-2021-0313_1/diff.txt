diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/secure/out/0-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/vulnerable/out/0-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/secure/out/0-cfg.dot	2023-06-07 19:31:59.477404672 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/vulnerable/out/0-cfg.dot	2023-06-07 19:32:03.017404332 +0330
@@ -3,13 +3,11 @@
 "246" [label = <(UNKNOWN,TEST(LayoutSplitterTest, RTL_Latin) {\012 struct TestCase {\012        std::string testStr;\012        std::vector&lt;std::string&gt; expects;\012 } testCases[] = {\012 {&quot;(This is an example text.)&quot;,\012 {\012 &quot;This is an example [(text.)]&quot;, &quot;This is an example[( )]text.&quot;,\012 &quot;This is an [(example)] text.&quot;, &quot;This is an[( )]example text.&quot;,\012 &quot;This is [(an)] example text.&quot;, &quot;This is[( )]an example text.&quot;,\012 &quot;This [(is)] an example text.&quot;, &quot;This[( )]is an example text.&quot;,\012 &quot;[(This)] is an example text.&quot;,\012 }},\012 {&quot;This( is an example )text.&quot;,\012 {\012 &quot;This is an example[( )]text.&quot;, &quot;This is an [(example)] text.&quot;,\012 &quot;This is an[( )]example text.&quot;, &quot;This is [(an)] example text.&quot;,\012 &quot;This is[( )]an example text.&quot;, &quot;This [(is)] an example text.&quot;,\012 &quot;This[( )]is an example text.&quot;,\012 }},\012 {&quot;This (is an example) text.&quot;,\012 {\012 &quot;This is an [(example)] text.&quot;, &quot;This is an[( )]example text.&quot;,\012 &quot;This is [(an)] example text.&quot;, &quot;This is[( )]an example text.&quot;,\012 &quot;This [(is)] an example text.&quot;,\012 }},\012 {&quot;Th(is is an example te)xt.&quot;,\012 {\012 &quot;This is an example [(te)xt.]&quot;, &quot;This is an example[( )]text.&quot;,\012 &quot;This is an [(example)] text.&quot;, &quot;This is an[( )]example text.&quot;,\012 &quot;This is [(an)] example text.&quot;, &quot;This is[( )]an example text.&quot;,\012 &quot;This [(is)] an example text.&quot;, &quot;This[( )]is an example text.&quot;,\012 &quot;[Th(is)] is an example text.&quot;,\012 }},\012 {&quot;This is an ex(amp)le text.&quot;,\012 {\012 &quot;This is an [ex(amp)le] text.&quot;,\012 }},\012 {&quot;There are (three   spaces.)&quot;,\012 {\012 &quot;There are three   [(spaces.)]&quot;, &quot;There are three  [( )]spaces.&quot;,\012 &quot;There are three [( )] spaces.&quot;, &quot;There are three[( )]  spaces.&quot;,\012 &quot;There are [(three)]   spaces.&quot;,\012 }},\012 };\012\012 for (const auto&amp; testCase : testCases) {\012 auto[text, range] = parseTestString(testCase.testStr);\012 uint32_t expectationIndex = 0;\012 for (auto[acContext, acPiece] : LayoutSplitter(text, range, true /* isRtl */)) {\012            ASSERT_NE(expectationIndex, testCase.expects.size());\012 const std::string expectString = testCase.expects[expectationIndex++];\012 auto[exContext, exPiece] = parseExpectString(expectString);\012            EXPECT_EQ(acContext, exContext)\012 &lt;&lt; expectString &lt;&lt; &quot; vs &quot; &lt;&lt; buildDebugString(text, acContext, acPiece);\012            EXPECT_EQ(acPiece, exPiece)\012 &lt;&lt; expectString &lt;&lt; &quot; vs &quot; &lt;&lt; buildDebugString(text, acContext, acPiece);\012 }\012        EXPECT_EQ(expectationIndex, testCase.expects.size()) &lt;&lt; &quot;Expectations Remains&quot;;\012 }\012},TEST(LayoutSplitterTest, RTL_Latin) {\012 struct TestCase {\012        std::string testStr;\012        std::vector&lt;std::string&gt; expects;\012 } testCases[] = {\012 {&quot;(This is an example text.)&quot;,\012 {\012 &quot;This is an example [(text.)]&quot;, &quot;This is an example[( )]text.&quot;,\012 &quot;This is an [(example)] text.&quot;, &quot;This is an[( )]example text.&quot;,\012 &quot;This is [(an)] example text.&quot;, &quot;This is[( )]an example text.&quot;,\012 &quot;This [(is)] an example text.&quot;, &quot;This[( )]is an example text.&quot;,\012 &quot;[(This)] is an example text.&quot;,\012 }},\012 {&quot;This( is an example )text.&quot;,\012 {\012 &quot;This is an example[( )]text.&quot;, &quot;This is an [(example)] text.&quot;,\012 &quot;This is an[( )]example text.&quot;, &quot;This is [(an)] example text.&quot;,\012 &quot;This is[( )]an example text.&quot;, &quot;This [(is)] an example text.&quot;,\012 &quot;This[( )]is an example text.&quot;,\012 }},\012 {&quot;This (is an example) text.&quot;,\012 {\012 &quot;This is an [(example)] text.&quot;, &quot;This is an[( )]example text.&quot;,\012 &quot;This is [(an)] example text.&quot;, &quot;This is[( )]an example text.&quot;,\012 &quot;This [(is)] an example text.&quot;,\012 }},\012 {&quot;Th(is is an example te)xt.&quot;,\012 {\012 &quot;This is an example [(te)xt.]&quot;, &quot;This is an example[( )]text.&quot;,\012 &quot;This is an [(example)] text.&quot;, &quot;This is an[( )]example text.&quot;,\012 &quot;This is [(an)] example text.&quot;, &quot;This is[( )]an example text.&quot;,\012 &quot;This [(is)] an example text.&quot;, &quot;This[( )]is an example text.&quot;,\012 &quot;[Th(is)] is an example text.&quot;,\012 }},\012 {&quot;This is an ex(amp)le text.&quot;,\012 {\012 &quot;This is an [ex(amp)le] text.&quot;,\012 }},\012 {&quot;There are (three   spaces.)&quot;,\012 {\012 &quot;There are three   [(spaces.)]&quot;, &quot;There are three  [( )]spaces.&quot;,\012 &quot;There are three [( )] spaces.&quot;, &quot;There are three[( )]  spaces.&quot;,\012 &quot;There are [(three)]   spaces.&quot;,\012 }},\012 };\012\012 for (const auto&amp; testCase : testCases) {\012 auto[text, range] = parseTestString(testCase.testStr);\012 uint32_t expectationIndex = 0;\012 for (auto[acContext, acPiece] : LayoutSplitter(text, range, true /* isRtl */)) {\012            ASSERT_NE(expectationIndex, testCase.expects.size());\012 const std::string expectString = testCase.expects[expectationIndex++];\012 auto[exContext, exPiece] = parseExpectString(expectString);\012            EXPECT_EQ(acContext, exContext)\012 &lt;&lt; expectString &lt;&lt; &quot; vs &quot; &lt;&lt; buildDebugString(text, acContext, acPiece);\012            EXPECT_EQ(acPiece, exPiece)\012 &lt;&lt; expectString &lt;&lt; &quot; vs &quot; &lt;&lt; buildDebugString(text, acContext, acPiece);\012 }\012        EXPECT_EQ(expectationIndex, testCase.expects.size()) &lt;&lt; &quot;Expectations Remains&quot;;\012 }\012})<SUB>160</SUB>> ]
 "247" [label = <(UNKNOWN,TEST(LayoutSplitterTest, LTR_CJK) {\012 struct TestCase {\012        std::string testStr;\012        std::vector&lt;std::string&gt; expects;\012 } testCases[] = {\012 {// All Kanji text\012 &quot;(\u6614\u8005\u8358\u5468\u5922\u70BA\u80E1\u8776)&quot;,\012 {\012 &quot;[(\u6614)]\u8005\u8358\u5468\u5922\u70BA\u80E1\u8776&quot;,\012 &quot;\u6614[(\u8005)]\u8358\u5468\u5922\u70BA\u80E1\u8776&quot;,\012 &quot;\u6614\u8005[(\u8358)]\u5468\u5922\u70BA\u80E1\u8776&quot;,\012 &quot;\u6614\u8005\u8358[(\u5468)]\u5922\u70BA\u80E1\u8776&quot;,\012 &quot;\u6614\u8005\u8358\u5468[(\u5922)]\u70BA\u80E1\u8776&quot;,\012 &quot;\u6614\u8005\u8358\u5468\u5922[(\u70BA)]\u80E1\u8776&quot;,\012 &quot;\u6614\u8005\u8358\u5468\u5922\u70BA[(\u80E1)]\u8776&quot;,\012 &quot;\u6614\u8005\u8358\u5468\u5922\u70BA\u80E1[(\u8776)]&quot;,\012 }},\012 {// Japanese text like as follows\012 // [Kanji][Kanji][Kana][Kanji][Kanji][Kana][Kana][Kana]\012 &quot;(\u672C\u65E5\u306F\u6674\u5929\u306A\u308A\u3002)&quot;,\012 {\012 &quot;[(\u672C)]\u65E5\u306F\u6674\u5929\u306A\u308A\u3002&quot;,\012 &quot;\u672C[(\u65E5\u306F)]\u6674\u5929\u306A\u308A\u3002&quot;,\012 &quot;\u672C\u65E5\u306F[(\u6674)]\u5929\u306A\u308A\u3002&quot;,\012 &quot;\u672C\u65E5\u306F\u6674[(\u5929\u306A\u308A\u3002)]&quot;,\012 }},\012 {// Japanese text like as follows\012 // [Kanji][Kanji][Kana][Kanji][Kanji][Kana][Kana][Kana]\012 &quot;\u672C\u65E5(\u306F\u6674\u5929\u306A)\u308A\u3002&quot;,\012 {\012 &quot;\u672C[\u65E5(\u306F)]\u6674\u5929\u306A\u308A\u3002&quot;,\012 &quot;\u672C\u65E5\u306F[(\u6674)]\u5929\u306A\u308A\u3002&quot;,\012 &quot;\u672C\u65E5\u306F\u6674[(\u5929\u306A)\u308A\u3002]&quot;,\012 }},\012 };\012\012 for (const auto&amp; testCase : testCases) {\012 auto[text, range] = parseTestString(testCase.testStr);\012 uint32_t expectationIndex = 0;\012 for (auto[acContext, acPiece] : LayoutSplitter(text, range, false /* isRtl */)) {\012            ASSERT_NE(expectationIndex, testCase.expects.size());\012 const std::string expectString = testCase.expects[expectationIndex++];\012 auto[exContext, exPiece] = parseExpectString(expectString);\012            EXPECT_EQ(acContext, exContext)\012 &lt;&lt; expectString &lt;&lt; &quot; vs &quot; &lt;&lt; buildDebugString(text, acContext, acPiece);\012            EXPECT_EQ(acPiece, exPiece)\012 &lt;&lt; expectString &lt;&lt; &quot; vs &quot; &lt;&lt; buildDebugString(text, acContext, acPiece);\012 }\012        EXPECT_EQ(expectationIndex, testCase.expects.size()) &lt;&lt; &quot;Expectations Remains&quot;;\012 }\012},TEST(LayoutSplitterTest, LTR_CJK) {\012 struct TestCase {\012        std::string testStr;\012        std::vector&lt;std::string&gt; expects;\012 } testCases[] = {\012 {// All Kanji text\012 &quot;(\u6614\u8005\u8358\u5468\u5922\u70BA\u80E1\u8776)&quot;,\012 {\012 &quot;[(\u6614)]\u8005\u8358\u5468\u5922\u70BA\u80E1\u8776&quot;,\012 &quot;\u6614[(\u8005)]\u8358\u5468\u5922\u70BA\u80E1\u8776&quot;,\012 &quot;\u6614\u8005[(\u8358)]\u5468\u5922\u70BA\u80E1\u8776&quot;,\012 &quot;\u6614\u8005\u8358[(\u5468)]\u5922\u70BA\u80E1\u8776&quot;,\012 &quot;\u6614\u8005\u8358\u5468[(\u5922)]\u70BA\u80E1\u8776&quot;,\012 &quot;\u6614\u8005\u8358\u5468\u5922[(\u70BA)]\u80E1\u8776&quot;,\012 &quot;\u6614\u8005\u8358\u5468\u5922\u70BA[(\u80E1)]\u8776&quot;,\012 &quot;\u6614\u8005\u8358\u5468\u5922\u70BA\u80E1[(\u8776)]&quot;,\012 }},\012 {// Japanese text like as follows\012 // [Kanji][Kanji][Kana][Kanji][Kanji][Kana][Kana][Kana]\012 &quot;(\u672C\u65E5\u306F\u6674\u5929\u306A\u308A\u3002)&quot;,\012 {\012 &quot;[(\u672C)]\u65E5\u306F\u6674\u5929\u306A\u308A\u3002&quot;,\012 &quot;\u672C[(\u65E5\u306F)]\u6674\u5929\u306A\u308A\u3002&quot;,\012 &quot;\u672C\u65E5\u306F[(\u6674)]\u5929\u306A\u308A\u3002&quot;,\012 &quot;\u672C\u65E5\u306F\u6674[(\u5929\u306A\u308A\u3002)]&quot;,\012 }},\012 {// Japanese text like as follows\012 // [Kanji][Kanji][Kana][Kanji][Kanji][Kana][Kana][Kana]\012 &quot;\u672C\u65E5(\u306F\u6674\u5929\u306A)\u308A\u3002&quot;,\012 {\012 &quot;\u672C[\u65E5(\u306F)]\u6674\u5929\u306A\u308A\u3002&quot;,\012 &quot;\u672C\u65E5\u306F[(\u6674)]\u5929\u306A\u308A\u3002&quot;,\012 &quot;\u672C\u65E5\u306F\u6674[(\u5929\u306A)\u308A\u3002]&quot;,\012 }},\012 };\012\012 for (const auto&amp; testCase : testCases) {\012 auto[text, range] = parseTestString(testCase.testStr);\012 uint32_t expectationIndex = 0;\012 for (auto[acContext, acPiece] : LayoutSplitter(text, range, false /* isRtl */)) {\012            ASSERT_NE(expectationIndex, testCase.expects.size());\012 const std::string expectString = testCase.expects[expectationIndex++];\012 auto[exContext, exPiece] = parseExpectString(expectString);\012            EXPECT_EQ(acContext, exContext)\012 &lt;&lt; expectString &lt;&lt; &quot; vs &quot; &lt;&lt; buildDebugString(text, acContext, acPiece);\012            EXPECT_EQ(acPiece, exPiece)\012 &lt;&lt; expectString &lt;&lt; &quot; vs &quot; &lt;&lt; buildDebugString(text, acContext, acPiece);\012 }\012        EXPECT_EQ(expectationIndex, testCase.expects.size()) &lt;&lt; &quot;Expectations Remains&quot;;\012 }\012})<SUB>222</SUB>> ]
 "248" [label = <(UNKNOWN,TEST(LayoutSplitterTest, RTL_CJK) {\012 struct TestCase {\012        std::string testStr;\012        std::vector&lt;std::string&gt; expects;\012 } testCases[] = {\012 {// All Kanji text\012 &quot;(\u6614\u8005\u8358\u5468\u5922\u70BA\u80E1\u8776)&quot;,\012 {\012 &quot;\u6614\u8005\u8358\u5468\u5922\u70BA\u80E1[(\u8776)]&quot;,\012 &quot;\u6614\u8005\u8358\u5468\u5922\u70BA[(\u80E1)]\u8776&quot;,\012 &quot;\u6614\u8005\u8358\u5468\u5922[(\u70BA)]\u80E1\u8776&quot;,\012 &quot;\u6614\u8005\u8358\u5468[(\u5922)]\u70BA\u80E1\u8776&quot;,\012 &quot;\u6614\u8005\u8358[(\u5468)]\u5922\u70BA\u80E1\u8776&quot;,\012 &quot;\u6614\u8005[(\u8358)]\u5468\u5922\u70BA\u80E1\u8776&quot;,\012 &quot;\u6614[(\u8005)]\u8358\u5468\u5922\u70BA\u80E1\u8776&quot;,\012 &quot;[(\u6614)]\u8005\u8358\u5468\u5922\u70BA\u80E1\u8776&quot;,\012 }},\012 {// Japanese text like as follows\012 // [Kanji][Kanji][Kana][Kanji][Kanji][Kana][Kana][Kana]\012 &quot;(\u672C\u65E5\u306F\u6674\u5929\u306A\u308A\u3002)&quot;,\012 {\012 &quot;\u672C\u65E5\u306F\u6674[(\u5929\u306A\u308A\u3002)]&quot;,\012 &quot;\u672C\u65E5\u306F[(\u6674)]\u5929\u306A\u308A\u3002&quot;,\012 &quot;\u672C[(\u65E5\u306F)]\u6674\u5929\u306A\u308A\u3002&quot;,\012 &quot;[(\u672C)]\u65E5\u306F\u6674\u5929\u306A\u308A\u3002&quot;,\012 }},\012 {// Japanese text like as follows\012 // [Kanji][Kanji][Kana][Kanji][Kanji][Kana][Kana][Kana]\012 &quot;\u672C\u65E5(\u306F\u6674\u5929\u306A)\u308A\u3002&quot;,\012 {\012 &quot;\u672C\u65E5\u306F\u6674[(\u5929\u306A)\u308A\u3002]&quot;,\012 &quot;\u672C\u65E5\u306F[(\u6674)]\u5929\u306A\u308A\u3002&quot;,\012 &quot;\u672C[\u65E5(\u306F)]\u6674\u5929\u306A\u308A\u3002&quot;,\012 }},\012 };\012\012 for (const auto&amp; testCase : testCases) {\012 auto[text, range] = parseTestString(testCase.testStr);\012 uint32_t expectationIndex = 0;\012 for (auto[acContext, acPiece] : LayoutSplitter(text, range, true /* isRtl */)) {\012            ASSERT_NE(expectationIndex, testCase.expects.size());\012 const std::string expectString = testCase.expects[expectationIndex++];\012 auto[exContext, exPiece] = parseExpectString(expectString);\012            EXPECT_EQ(acContext, exContext)\012 &lt;&lt; expectString &lt;&lt; &quot; vs &quot; &lt;&lt; buildDebugString(text, acContext, acPiece);\012            EXPECT_EQ(acPiece, exPiece)\012 &lt;&lt; expectString &lt;&lt; &quot; vs &quot; &lt;&lt; buildDebugString(text, acContext, acPiece);\012 }\012        EXPECT_EQ(expectationIndex, testCase.expects.size()) &lt;&lt; &quot;Expectations Remains&quot;;\012 }\012},TEST(LayoutSplitterTest, RTL_CJK) {\012 struct TestCase {\012        std::string testStr;\012        std::vector&lt;std::string&gt; expects;\012 } testCases[] = {\012 {// All Kanji text\012 &quot;(\u6614\u8005\u8358\u5468\u5922\u70BA\u80E1\u8776)&quot;,\012 {\012 &quot;\u6614\u8005\u8358\u5468\u5922\u70BA\u80E1[(\u8776)]&quot;,\012 &quot;\u6614\u8005\u8358\u5468\u5922\u70BA[(\u80E1)]\u8776&quot;,\012 &quot;\u6614\u8005\u8358\u5468\u5922[(\u70BA)]\u80E1\u8776&quot;,\012 &quot;\u6614\u8005\u8358\u5468[(\u5922)]\u70BA\u80E1\u8776&quot;,\012 &quot;\u6614\u8005\u8358[(\u5468)]\u5922\u70BA\u80E1\u8776&quot;,\012 &quot;\u6614\u8005[(\u8358)]\u5468\u5922\u70BA\u80E1\u8776&quot;,\012 &quot;\u6614[(\u8005)]\u8358\u5468\u5922\u70BA\u80E1\u8776&quot;,\012 &quot;[(\u6614)]\u8005\u8358\u5468\u5922\u70BA\u80E1\u8776&quot;,\012 }},\012 {// Japanese text like as follows\012 // [Kanji][Kanji][Kana][Kanji][Kanji][Kana][Kana][Kana]\012 &quot;(\u672C\u65E5\u306F\u6674\u5929\u306A\u308A\u3002)&quot;,\012 {\012 &quot;\u672C\u65E5\u306F\u6674[(\u5929\u306A\u308A\u3002)]&quot;,\012 &quot;\u672C\u65E5\u306F[(\u6674)]\u5929\u306A\u308A\u3002&quot;,\012 &quot;\u672C[(\u65E5\u306F)]\u6674\u5929\u306A\u308A\u3002&quot;,\012 &quot;[(\u672C)]\u65E5\u306F\u6674\u5929\u306A\u308A\u3002&quot;,\012 }},\012 {// Japanese text like as follows\012 // [Kanji][Kanji][Kana][Kanji][Kanji][Kana][Kana][Kana]\012 &quot;\u672C\u65E5(\u306F\u6674\u5929\u306A)\u308A\u3002&quot;,\012 {\012 &quot;\u672C\u65E5\u306F\u6674[(\u5929\u306A)\u308A\u3002]&quot;,\012 &quot;\u672C\u65E5\u306F[(\u6674)]\u5929\u306A\u308A\u3002&quot;,\012 &quot;\u672C[\u65E5(\u306F)]\u6674\u5929\u306A\u308A\u3002&quot;,\012 }},\012 };\012\012 for (const auto&amp; testCase : testCases) {\012 auto[text, range] = parseTestString(testCase.testStr);\012 uint32_t expectationIndex = 0;\012 for (auto[acContext, acPiece] : LayoutSplitter(text, range, true /* isRtl */)) {\012            ASSERT_NE(expectationIndex, testCase.expects.size());\012 const std::string expectString = testCase.expects[expectationIndex++];\012 auto[exContext, exPiece] = parseExpectString(expectString);\012            EXPECT_EQ(acContext, exContext)\012 &lt;&lt; expectString &lt;&lt; &quot; vs &quot; &lt;&lt; buildDebugString(text, acContext, acPiece);\012            EXPECT_EQ(acPiece, exPiece)\012 &lt;&lt; expectString &lt;&lt; &quot; vs &quot; &lt;&lt; buildDebugString(text, acContext, acPiece);\012 }\012        EXPECT_EQ(expectationIndex, testCase.expects.size()) &lt;&lt; &quot;Expectations Remains&quot;;\012 }\012})<SUB>274</SUB>> ]
-"249" [label = <(UNKNOWN,TEST(LayoutSplitterTest, BidiCtrl) {\012 struct TestCase {\012        std::string testStr;\012        std::vector&lt;std::string&gt; expects;\012 } testCases[] = {\012 {// Repeated Bidi sequence\012 &quot;(a\u2066\u2069\u202A\u202E\u200E\u200Fb)&quot;,\012 {\012 &quot;[(a)]\u2066\u2069\u202A\u202E\u200E\u200Fb&quot;,\012 &quot;a[(\u2066)]\u2069\u202A\u202E\u200E\u200Fb&quot;,\012 &quot;a\u2066[(\u2069)]\u202A\u202E\u200E\u200Fb&quot;,\012 &quot;a\u2066\u2069[(\u202A)]\u202E\u200E\u200Fb&quot;,\012 &quot;a\u2066\u2069\u202A[(\u202E)]\u200E\u200Fb&quot;,\012 &quot;a\u2066\u2069\u202A\u202E[(\u200E)]\u200Fb&quot;,\012 &quot;a\u2066\u2069\u202A\u202E\u200E[(\u200F)]b&quot;,\012 &quot;a\u2066\u2069\u202A\u202E\u200E\u200F[(b)]&quot;,\012 }},\012 };\012\012 for (const auto&amp; testCase : testCases) {\012 auto [text, range] = parseTestString(testCase.testStr);\012 uint32_t expectationIndex = 0;\012 for (auto [acContext, acPiece] : LayoutSplitter(text, range, false /* isRtl */)) {\012            ASSERT_NE(expectationIndex, testCase.expects.size());\012 const std::string expectString = testCase.expects[expectationIndex++];\012 auto [exContext, exPiece] = parseExpectString(expectString);\012            EXPECT_EQ(acContext, exContext)\012 &lt;&lt; expectString &lt;&lt; &quot; vs &quot; &lt;&lt; buildDebugString(text, acContext, acPiece);\012            EXPECT_EQ(acPiece, exPiece)\012 &lt;&lt; expectString &lt;&lt; &quot; vs &quot; &lt;&lt; buildDebugString(text, acContext, acPiece);\012 }\012        EXPECT_EQ(expectationIndex, testCase.expects.size()) &lt;&lt; &quot;Expectations Remains&quot;;\012 }\012},TEST(LayoutSplitterTest, BidiCtrl) {\012 struct TestCase {\012        std::string testStr;\012        std::vector&lt;std::string&gt; expects;\012 } testCases[] = {\012 {// Repeated Bidi sequence\012 &quot;(a\u2066\u2069\u202A\u202E\u200E\u200Fb)&quot;,\012 {\012 &quot;[(a)]\u2066\u2069\u202A\u202E\u200E\u200Fb&quot;,\012 &quot;a[(\u2066)]\u2069\u202A\u202E\u200E\u200Fb&quot;,\012 &quot;a\u2066[(\u2069)]\u202A\u202E\u200E\u200Fb&quot;,\012 &quot;a\u2066\u2069[(\u202A)]\u202E\u200E\u200Fb&quot;,\012 &quot;a\u2066\u2069\u202A[(\u202E)]\u200E\u200Fb&quot;,\012 &quot;a\u2066\u2069\u202A\u202E[(\u200E)]\u200Fb&quot;,\012 &quot;a\u2066\u2069\u202A\u202E\u200E[(\u200F)]b&quot;,\012 &quot;a\u2066\u2069\u202A\u202E\u200E\u200F[(b)]&quot;,\012 }},\012 };\012\012 for (const auto&amp; testCase : testCases) {\012 auto [text, range] = parseTestString(testCase.testStr);\012 uint32_t expectationIndex = 0;\012 for (auto [acContext, acPiece] : LayoutSplitter(text, range, false /* isRtl */)) {\012            ASSERT_NE(expectationIndex, testCase.expects.size());\012 const std::string expectString = testCase.expects[expectationIndex++];\012 auto [exContext, exPiece] = parseExpectString(expectString);\012            EXPECT_EQ(acContext, exContext)\012 &lt;&lt; expectString &lt;&lt; &quot; vs &quot; &lt;&lt; buildDebugString(text, acContext, acPiece);\012            EXPECT_EQ(acPiece, exPiece)\012 &lt;&lt; expectString &lt;&lt; &quot; vs &quot; &lt;&lt; buildDebugString(text, acContext, acPiece);\012 }\012        EXPECT_EQ(expectationIndex, testCase.expects.size()) &lt;&lt; &quot;Expectations Remains&quot;;\012 }\012})<SUB>326</SUB>> ]
 "5" [label = <(METHOD,&lt;global&gt;)<SUB>1</SUB>> ]
-"250" [label = <(METHOD_RETURN,ANY)<SUB>1</SUB>> ]
+"249" [label = <(METHOD_RETURN,ANY)<SUB>1</SUB>> ]
   "245" -> "246" 
   "246" -> "247" 
   "247" -> "248" 
   "248" -> "249" 
-  "249" -> "250" 
   "5" -> "245" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/secure/out/10-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/vulnerable/out/10-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/secure/out/10-cfg.dot	2023-06-07 19:31:59.517404667 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/vulnerable/out/10-cfg.dot	2023-06-07 19:32:03.057404328 +0330
@@ -1,5 +1,5 @@
 digraph "&lt;operator&gt;.assignment" {  
-"497" [label = <(METHOD,&lt;operator&gt;.assignment)> ]
-"501" [label = <(METHOD_RETURN,ANY)> ]
-  "497" -> "501" 
+"469" [label = <(METHOD,&lt;operator&gt;.assignment)> ]
+"473" [label = <(METHOD_RETURN,ANY)> ]
+  "469" -> "473" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/secure/out/11-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/vulnerable/out/11-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/secure/out/11-cfg.dot	2023-06-07 19:31:59.517404667 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/vulnerable/out/11-cfg.dot	2023-06-07 19:32:03.057404328 +0330
@@ -1,5 +1,5 @@
 digraph "utf8ToUtf16" {  
-"502" [label = <(METHOD,utf8ToUtf16)> ]
-"505" [label = <(METHOD_RETURN,ANY)> ]
-  "502" -> "505" 
+"474" [label = <(METHOD,utf8ToUtf16)> ]
+"477" [label = <(METHOD_RETURN,ANY)> ]
+  "474" -> "477" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/secure/out/12-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/vulnerable/out/12-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/secure/out/12-cfg.dot	2023-06-07 19:31:59.517404667 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/vulnerable/out/12-cfg.dot	2023-06-07 19:32:03.057404328 +0330
@@ -1,5 +1,5 @@
 digraph "&lt;operator&gt;.greaterThan" {  
-"506" [label = <(METHOD,&lt;operator&gt;.greaterThan)> ]
-"510" [label = <(METHOD_RETURN,ANY)> ]
-  "506" -> "510" 
+"478" [label = <(METHOD,&lt;operator&gt;.greaterThan)> ]
+"482" [label = <(METHOD_RETURN,ANY)> ]
+  "478" -> "482" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/secure/out/13-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/vulnerable/out/13-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/secure/out/13-cfg.dot	2023-06-07 19:31:59.517404667 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/vulnerable/out/13-cfg.dot	2023-06-07 19:32:03.057404328 +0330
@@ -1,5 +1,5 @@
 digraph "&lt;operator&gt;.lessThan" {  
-"511" [label = <(METHOD,&lt;operator&gt;.lessThan)> ]
-"515" [label = <(METHOD_RETURN,ANY)> ]
-  "511" -> "515" 
+"483" [label = <(METHOD,&lt;operator&gt;.lessThan)> ]
+"487" [label = <(METHOD_RETURN,ANY)> ]
+  "483" -> "487" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/secure/out/14-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/vulnerable/out/14-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/secure/out/14-cfg.dot	2023-06-07 19:31:59.517404667 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/vulnerable/out/14-cfg.dot	2023-06-07 19:32:03.057404328 +0330
@@ -1,5 +1,5 @@
 digraph "&lt;operator&gt;.fieldAccess" {  
-"516" [label = <(METHOD,&lt;operator&gt;.fieldAccess)> ]
-"520" [label = <(METHOD_RETURN,ANY)> ]
-  "516" -> "520" 
+"488" [label = <(METHOD,&lt;operator&gt;.fieldAccess)> ]
+"492" [label = <(METHOD_RETURN,ANY)> ]
+  "488" -> "492" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/secure/out/15-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/vulnerable/out/15-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/secure/out/15-cfg.dot	2023-06-07 19:31:59.517404667 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/vulnerable/out/15-cfg.dot	2023-06-07 19:32:03.057404328 +0330
@@ -1,5 +1,5 @@
 digraph "setStart" {  
-"521" [label = <(METHOD,setStart)> ]
-"525" [label = <(METHOD_RETURN,ANY)> ]
-  "521" -> "525" 
+"493" [label = <(METHOD,setStart)> ]
+"497" [label = <(METHOD_RETURN,ANY)> ]
+  "493" -> "497" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/secure/out/16-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/vulnerable/out/16-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/secure/out/16-cfg.dot	2023-06-07 19:31:59.517404667 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/vulnerable/out/16-cfg.dot	2023-06-07 19:32:03.057404328 +0330
@@ -1,5 +1,5 @@
 digraph "size" {  
-"526" [label = <(METHOD,size)> ]
-"529" [label = <(METHOD_RETURN,ANY)> ]
-  "526" -> "529" 
+"498" [label = <(METHOD,size)> ]
+"501" [label = <(METHOD_RETURN,ANY)> ]
+  "498" -> "501" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/secure/out/17-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/vulnerable/out/17-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/secure/out/17-cfg.dot	2023-06-07 19:31:59.517404667 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/vulnerable/out/17-cfg.dot	2023-06-07 19:32:03.057404328 +0330
@@ -1,5 +1,5 @@
 digraph "setEnd" {  
-"530" [label = <(METHOD,setEnd)> ]
-"534" [label = <(METHOD_RETURN,ANY)> ]
-  "530" -> "534" 
+"502" [label = <(METHOD,setEnd)> ]
+"506" [label = <(METHOD_RETURN,ANY)> ]
+  "502" -> "506" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/secure/out/18-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/vulnerable/out/18-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/secure/out/18-cfg.dot	2023-06-07 19:31:59.517404667 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/vulnerable/out/18-cfg.dot	2023-06-07 19:32:03.057404328 +0330
@@ -1,5 +1,5 @@
 digraph "push_back" {  
-"535" [label = <(METHOD,push_back)> ]
-"539" [label = <(METHOD_RETURN,ANY)> ]
-  "535" -> "539" 
+"507" [label = <(METHOD,push_back)> ]
+"511" [label = <(METHOD_RETURN,ANY)> ]
+  "507" -> "511" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/secure/out/19-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/vulnerable/out/19-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/secure/out/19-cfg.dot	2023-06-07 19:31:59.517404667 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/vulnerable/out/19-cfg.dot	2023-06-07 19:32:03.057404328 +0330
@@ -1,5 +1,5 @@
 digraph "std::make_pair" {  
-"540" [label = <(METHOD,std::make_pair)> ]
-"545" [label = <(METHOD_RETURN,ANY)> ]
-  "540" -> "545" 
+"512" [label = <(METHOD,std::make_pair)> ]
+"517" [label = <(METHOD_RETURN,ANY)> ]
+  "512" -> "517" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/secure/out/20-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/vulnerable/out/20-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/secure/out/20-cfg.dot	2023-06-07 19:31:59.517404667 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/vulnerable/out/20-cfg.dot	2023-06-07 19:32:03.057404328 +0330
@@ -1,5 +1,5 @@
 digraph "&lt;operator&gt;.postIncrement" {  
-"546" [label = <(METHOD,&lt;operator&gt;.postIncrement)> ]
-"549" [label = <(METHOD_RETURN,ANY)> ]
-  "546" -> "549" 
+"518" [label = <(METHOD,&lt;operator&gt;.postIncrement)> ]
+"521" [label = <(METHOD_RETURN,ANY)> ]
+  "518" -> "521" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/secure/out/21-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/vulnerable/out/21-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/secure/out/21-cfg.dot	2023-06-07 19:31:59.517404667 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/vulnerable/out/21-cfg.dot	2023-06-07 19:32:03.057404328 +0330
@@ -1,5 +1,5 @@
 digraph "reserve" {  
-"550" [label = <(METHOD,reserve)> ]
-"554" [label = <(METHOD_RETURN,ANY)> ]
-  "550" -> "554" 
+"522" [label = <(METHOD,reserve)> ]
+"526" [label = <(METHOD_RETURN,ANY)> ]
+  "522" -> "526" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/secure/out/22-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/vulnerable/out/22-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/secure/out/22-cfg.dot	2023-06-07 19:31:59.517404667 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/vulnerable/out/22-cfg.dot	2023-06-07 19:32:03.057404328 +0330
@@ -1,5 +1,5 @@
 digraph "&lt;operator&gt;.addition" {  
-"555" [label = <(METHOD,&lt;operator&gt;.addition)> ]
-"559" [label = <(METHOD_RETURN,ANY)> ]
-  "555" -> "559" 
+"527" [label = <(METHOD,&lt;operator&gt;.addition)> ]
+"531" [label = <(METHOD_RETURN,ANY)> ]
+  "527" -> "531" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/secure/out/23-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/vulnerable/out/23-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/secure/out/23-cfg.dot	2023-06-07 19:31:59.517404667 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/vulnerable/out/23-cfg.dot	2023-06-07 19:32:03.057404328 +0330
@@ -1,5 +1,5 @@
 digraph "&lt;operator&gt;.preIncrement" {  
-"560" [label = <(METHOD,&lt;operator&gt;.preIncrement)> ]
-"563" [label = <(METHOD_RETURN,ANY)> ]
-  "560" -> "563" 
+"532" [label = <(METHOD,&lt;operator&gt;.preIncrement)> ]
+"535" [label = <(METHOD_RETURN,ANY)> ]
+  "532" -> "535" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/secure/out/24-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/vulnerable/out/24-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/secure/out/24-cfg.dot	2023-06-07 19:31:59.517404667 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/vulnerable/out/24-cfg.dot	2023-06-07 19:32:03.057404328 +0330
@@ -1,5 +1,5 @@
 digraph "&lt;operator&gt;.equals" {  
-"564" [label = <(METHOD,&lt;operator&gt;.equals)> ]
-"568" [label = <(METHOD_RETURN,ANY)> ]
-  "564" -> "568" 
+"536" [label = <(METHOD,&lt;operator&gt;.equals)> ]
+"540" [label = <(METHOD_RETURN,ANY)> ]
+  "536" -> "540" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/secure/out/25-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/vulnerable/out/25-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/secure/out/25-cfg.dot	2023-06-07 19:31:59.517404667 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/vulnerable/out/25-cfg.dot	2023-06-07 19:32:03.057404328 +0330
@@ -1,5 +1,5 @@
 digraph "getStart" {  
-"569" [label = <(METHOD,getStart)> ]
-"572" [label = <(METHOD_RETURN,ANY)> ]
-  "569" -> "572" 
+"541" [label = <(METHOD,getStart)> ]
+"544" [label = <(METHOD_RETURN,ANY)> ]
+  "541" -> "544" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/secure/out/26-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/vulnerable/out/26-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/secure/out/26-cfg.dot	2023-06-07 19:31:59.517404667 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/vulnerable/out/26-cfg.dot	2023-06-07 19:32:03.057404328 +0330
@@ -1,5 +1,5 @@
 digraph "getEnd" {  
-"573" [label = <(METHOD,getEnd)> ]
-"576" [label = <(METHOD_RETURN,ANY)> ]
-  "573" -> "576" 
+"545" [label = <(METHOD,getEnd)> ]
+"548" [label = <(METHOD_RETURN,ANY)> ]
+  "545" -> "548" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/secure/out/27-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/vulnerable/out/27-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/secure/out/27-cfg.dot	2023-06-07 19:31:59.517404667 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/vulnerable/out/27-cfg.dot	2023-06-07 19:32:03.057404328 +0330
@@ -1,5 +1,5 @@
 digraph "&lt;operator&gt;.notEquals" {  
-"577" [label = <(METHOD,&lt;operator&gt;.notEquals)> ]
-"581" [label = <(METHOD_RETURN,ANY)> ]
-  "577" -> "581" 
+"549" [label = <(METHOD,&lt;operator&gt;.notEquals)> ]
+"553" [label = <(METHOD_RETURN,ANY)> ]
+  "549" -> "553" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/secure/out/28-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/vulnerable/out/28-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/secure/out/28-cfg.dot	2023-06-07 19:31:59.517404667 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/vulnerable/out/28-cfg.dot	2023-06-07 19:32:03.057404328 +0330
@@ -1,5 +1,5 @@
 digraph "&lt;operator&gt;.indirectIndexAccess" {  
-"582" [label = <(METHOD,&lt;operator&gt;.indirectIndexAccess)> ]
-"586" [label = <(METHOD_RETURN,ANY)> ]
-  "582" -> "586" 
+"554" [label = <(METHOD,&lt;operator&gt;.indirectIndexAccess)> ]
+"558" [label = <(METHOD_RETURN,ANY)> ]
+  "554" -> "558" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/secure/out/29-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/vulnerable/out/29-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/secure/out/29-cfg.dot	2023-06-07 19:31:59.517404667 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/vulnerable/out/29-cfg.dot	2023-06-07 19:32:03.057404328 +0330
@@ -1,5 +1,5 @@
 digraph "utf16ToUtf8" {  
-"587" [label = <(METHOD,utf16ToUtf8)> ]
-"590" [label = <(METHOD_RETURN,ANY)> ]
-  "587" -> "590" 
+"559" [label = <(METHOD,utf16ToUtf8)> ]
+"562" [label = <(METHOD_RETURN,ANY)> ]
+  "559" -> "562" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/secure/out/30-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/vulnerable/out/30-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/secure/out/30-cfg.dot	2023-06-07 19:31:59.517404667 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/vulnerable/out/30-cfg.dot	2023-06-07 19:32:03.057404328 +0330
@@ -1,5 +1,5 @@
 digraph "&lt;operator&gt;.logicalOr" {  
-"591" [label = <(METHOD,&lt;operator&gt;.logicalOr)> ]
-"595" [label = <(METHOD_RETURN,ANY)> ]
-  "591" -> "595" 
+"563" [label = <(METHOD,&lt;operator&gt;.logicalOr)> ]
+"567" [label = <(METHOD_RETURN,ANY)> ]
+  "563" -> "567" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/secure/out/31-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/vulnerable/out/31-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/secure/out/31-cfg.dot	2023-06-07 19:31:59.517404667 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/vulnerable/out/31-cfg.dot	2023-06-07 19:32:03.057404328 +0330
@@ -1,5 +1,5 @@
 digraph "&lt;operator&gt;.logicalAnd" {  
-"596" [label = <(METHOD,&lt;operator&gt;.logicalAnd)> ]
-"600" [label = <(METHOD_RETURN,ANY)> ]
-  "596" -> "600" 
+"568" [label = <(METHOD,&lt;operator&gt;.logicalAnd)> ]
+"572" [label = <(METHOD_RETURN,ANY)> ]
+  "568" -> "572" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/secure/out/32-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/vulnerable/out/32-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/secure/out/32-cfg.dot	2023-06-07 19:31:59.517404667 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/vulnerable/out/32-cfg.dot	2023-06-07 19:32:03.057404328 +0330
@@ -1,5 +1,5 @@
 digraph "&lt;operator&gt;.lessEqualsThan" {  
-"601" [label = <(METHOD,&lt;operator&gt;.lessEqualsThan)> ]
-"605" [label = <(METHOD_RETURN,ANY)> ]
-  "601" -> "605" 
+"573" [label = <(METHOD,&lt;operator&gt;.lessEqualsThan)> ]
+"577" [label = <(METHOD_RETURN,ANY)> ]
+  "573" -> "577" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/secure/out/33-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/vulnerable/out/33-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/secure/out/33-cfg.dot	2023-06-07 19:31:59.527404668 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/vulnerable/out/33-cfg.dot	2023-06-07 19:32:03.067404325 +0330
@@ -1,5 +1,5 @@
 digraph "isWordBreakAfter" {  
-"606" [label = <(METHOD,isWordBreakAfter)> ]
-"609" [label = <(METHOD_RETURN,ANY)> ]
-  "606" -> "609" 
+"578" [label = <(METHOD,isWordBreakAfter)> ]
+"581" [label = <(METHOD_RETURN,ANY)> ]
+  "578" -> "581" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/secure/out/34-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/vulnerable/out/34-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/secure/out/34-cfg.dot	2023-06-07 19:31:59.527404668 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/vulnerable/out/34-cfg.dot	2023-06-07 19:32:03.067404325 +0330
@@ -1,5 +1,5 @@
 digraph "isWordBreakBefore" {  
-"610" [label = <(METHOD,isWordBreakBefore)> ]
-"613" [label = <(METHOD_RETURN,ANY)> ]
-  "610" -> "613" 
+"582" [label = <(METHOD,isWordBreakBefore)> ]
+"585" [label = <(METHOD_RETURN,ANY)> ]
+  "582" -> "585" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/secure/out/35-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/vulnerable/out/35-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/secure/out/35-cfg.dot	2023-06-07 19:31:59.527404668 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/vulnerable/out/35-cfg.dot	2023-06-07 19:32:03.067404325 +0330
@@ -1,5 +1,5 @@
 digraph "&lt;operator&gt;.subtraction" {  
-"614" [label = <(METHOD,&lt;operator&gt;.subtraction)> ]
-"618" [label = <(METHOD_RETURN,ANY)> ]
-  "614" -> "618" 
+"586" [label = <(METHOD,&lt;operator&gt;.subtraction)> ]
+"590" [label = <(METHOD_RETURN,ANY)> ]
+  "586" -> "590" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/secure/out/36-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/vulnerable/out/36-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/secure/out/36-cfg.dot	2023-06-07 19:31:59.527404668 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/vulnerable/out/36-cfg.dot	2023-06-07 19:32:03.067404325 +0330
@@ -1,5 +1,5 @@
 digraph "&lt;operator&gt;.postDecrement" {  
-"619" [label = <(METHOD,&lt;operator&gt;.postDecrement)> ]
-"622" [label = <(METHOD_RETURN,ANY)> ]
-  "619" -> "622" 
+"591" [label = <(METHOD,&lt;operator&gt;.postDecrement)> ]
+"594" [label = <(METHOD_RETURN,ANY)> ]
+  "591" -> "594" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/secure/out/37-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/vulnerable/out/37-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/secure/out/37-cfg.dot	2023-06-07 19:31:59.527404668 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/vulnerable/out/37-cfg.dot	2023-06-07 19:32:03.067404325 +0330
@@ -1,5 +1,5 @@
 digraph "&lt;operator&gt;.greaterEqualsThan" {  
-"623" [label = <(METHOD,&lt;operator&gt;.greaterEqualsThan)> ]
-"627" [label = <(METHOD_RETURN,ANY)> ]
-  "623" -> "627" 
+"595" [label = <(METHOD,&lt;operator&gt;.greaterEqualsThan)> ]
+"599" [label = <(METHOD_RETURN,ANY)> ]
+  "595" -> "599" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/secure/out/4-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/vulnerable/out/4-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/secure/out/4-cfg.dot	2023-06-07 19:31:59.507404670 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/vulnerable/out/4-cfg.dot	2023-06-07 19:32:03.047404329 +0330
@@ -1,5 +1,5 @@
 digraph "&lt;global&gt;" {  
-"253" [label = <(METHOD,&lt;global&gt;)<SUB>1</SUB>> ]
-"463" [label = <(METHOD_RETURN,ANY)<SUB>1</SUB>> ]
-  "253" -> "463" 
+"252" [label = <(METHOD,&lt;global&gt;)<SUB>1</SUB>> ]
+"435" [label = <(METHOD_RETURN,ANY)<SUB>1</SUB>> ]
+  "252" -> "435" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/secure/out/5-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/vulnerable/out/5-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/secure/out/5-cfg.dot	2023-06-07 19:31:59.507404670 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/vulnerable/out/5-cfg.dot	2023-06-07 19:32:03.047404329 +0330
@@ -1,9 +1,9 @@
 digraph "isWordSpace" {  
-"259" [label = <(RETURN,return code_unit == ' ';,return code_unit == ' ';)<SUB>26</SUB>> ]
-"260" [label = <(&lt;operator&gt;.equals,code_unit == ' ')<SUB>26</SUB>> ]
-"256" [label = <(METHOD,isWordSpace)<SUB>25</SUB>> ]
-"263" [label = <(METHOD_RETURN,bool)<SUB>25</SUB>> ]
-  "259" -> "263" 
-  "260" -> "259" 
-  "256" -> "260" 
+"258" [label = <(RETURN,return code_unit == ' ';,return code_unit == ' ';)<SUB>26</SUB>> ]
+"259" [label = <(&lt;operator&gt;.equals,code_unit == ' ')<SUB>26</SUB>> ]
+"255" [label = <(METHOD,isWordSpace)<SUB>25</SUB>> ]
+"262" [label = <(METHOD_RETURN,bool)<SUB>25</SUB>> ]
+  "258" -> "262" 
+  "259" -> "258" 
+  "255" -> "259" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/secure/out/6-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/vulnerable/out/6-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/secure/out/6-cfg.dot	2023-06-07 19:31:59.507404670 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/vulnerable/out/6-cfg.dot	2023-06-07 19:32:03.047404329 +0330
@@ -1,57 +1,27 @@
 digraph "isWordBreakAfter" {  
-"314" [label = <(RETURN,return false;,return false;)<SUB>45</SUB>> ]
-"269" [label = <(&lt;operator&gt;.logicalOr,c == ' ' || (0x2000 &lt;= c &amp;&amp; c &lt;= 0x200A) || c == 0x3000)<SUB>35</SUB>> ]
-"288" [label = <(&lt;operator&gt;.logicalOr,(0x2066 &lt;= c &amp;&amp; c &lt;= 0x2069) || (0x202A &lt;= c &amp;&amp; c &lt;= 0x202E) || c == 0x200E ||\012        c == 0x200F)<SUB>40</SUB>> ]
-"270" [label = <(&lt;operator&gt;.logicalOr,c == ' ' || (0x2000 &lt;= c &amp;&amp; c &lt;= 0x200A))<SUB>35</SUB>> ]
-"281" [label = <(&lt;operator&gt;.equals,c == 0x3000)<SUB>35</SUB>> ]
-"285" [label = <(RETURN,return true;,return true;)<SUB>37</SUB>> ]
-"289" [label = <(&lt;operator&gt;.logicalOr,(0x2066 &lt;= c &amp;&amp; c &lt;= 0x2069) || (0x202A &lt;= c &amp;&amp; c &lt;= 0x202E) || c == 0x200E)<SUB>40</SUB>> ]
-"308" [label = <(&lt;operator&gt;.equals,c == 0x200F)<SUB>41</SUB>> ]
-"312" [label = <(RETURN,return true;,return true;)<SUB>42</SUB>> ]
-"271" [label = <(&lt;operator&gt;.equals,c == ' ')<SUB>35</SUB>> ]
-"274" [label = <(&lt;operator&gt;.logicalAnd,0x2000 &lt;= c &amp;&amp; c &lt;= 0x200A)<SUB>35</SUB>> ]
-"290" [label = <(&lt;operator&gt;.logicalOr,(0x2066 &lt;= c &amp;&amp; c &lt;= 0x2069) || (0x202A &lt;= c &amp;&amp; c &lt;= 0x202E))<SUB>40</SUB>> ]
-"305" [label = <(&lt;operator&gt;.equals,c == 0x200E)<SUB>40</SUB>> ]
-"275" [label = <(&lt;operator&gt;.lessEqualsThan,0x2000 &lt;= c)<SUB>35</SUB>> ]
-"278" [label = <(&lt;operator&gt;.lessEqualsThan,c &lt;= 0x200A)<SUB>35</SUB>> ]
-"291" [label = <(&lt;operator&gt;.logicalAnd,0x2066 &lt;= c &amp;&amp; c &lt;= 0x2069)<SUB>40</SUB>> ]
-"298" [label = <(&lt;operator&gt;.logicalAnd,0x202A &lt;= c &amp;&amp; c &lt;= 0x202E)<SUB>40</SUB>> ]
-"292" [label = <(&lt;operator&gt;.lessEqualsThan,0x2066 &lt;= c)<SUB>40</SUB>> ]
-"295" [label = <(&lt;operator&gt;.lessEqualsThan,c &lt;= 0x2069)<SUB>40</SUB>> ]
-"299" [label = <(&lt;operator&gt;.lessEqualsThan,0x202A &lt;= c)<SUB>40</SUB>> ]
-"302" [label = <(&lt;operator&gt;.lessEqualsThan,c &lt;= 0x202E)<SUB>40</SUB>> ]
-"265" [label = <(METHOD,isWordBreakAfter)<SUB>34</SUB>> ]
-"316" [label = <(METHOD_RETURN,bool)<SUB>34</SUB>> ]
-  "314" -> "316" 
-  "269" -> "285" 
-  "269" -> "292" 
-  "288" -> "312" 
-  "288" -> "314" 
+"286" [label = <(RETURN,return false;,return false;)<SUB>40</SUB>> ]
+"268" [label = <(&lt;operator&gt;.logicalOr,c == ' ' || (0x2000 &lt;= c &amp;&amp; c &lt;= 0x200A) || c == 0x3000)<SUB>35</SUB>> ]
+"269" [label = <(&lt;operator&gt;.logicalOr,c == ' ' || (0x2000 &lt;= c &amp;&amp; c &lt;= 0x200A))<SUB>35</SUB>> ]
+"280" [label = <(&lt;operator&gt;.equals,c == 0x3000)<SUB>35</SUB>> ]
+"284" [label = <(RETURN,return true;,return true;)<SUB>37</SUB>> ]
+"270" [label = <(&lt;operator&gt;.equals,c == ' ')<SUB>35</SUB>> ]
+"273" [label = <(&lt;operator&gt;.logicalAnd,0x2000 &lt;= c &amp;&amp; c &lt;= 0x200A)<SUB>35</SUB>> ]
+"274" [label = <(&lt;operator&gt;.lessEqualsThan,0x2000 &lt;= c)<SUB>35</SUB>> ]
+"277" [label = <(&lt;operator&gt;.lessEqualsThan,c &lt;= 0x200A)<SUB>35</SUB>> ]
+"264" [label = <(METHOD,isWordBreakAfter)<SUB>34</SUB>> ]
+"288" [label = <(METHOD_RETURN,bool)<SUB>34</SUB>> ]
+  "286" -> "288" 
+  "268" -> "284" 
+  "268" -> "286" 
+  "269" -> "268" 
+  "269" -> "280" 
+  "280" -> "268" 
+  "284" -> "288" 
   "270" -> "269" 
-  "270" -> "281" 
-  "281" -> "269" 
-  "285" -> "316" 
-  "289" -> "288" 
-  "289" -> "308" 
-  "308" -> "288" 
-  "312" -> "316" 
-  "271" -> "270" 
-  "271" -> "275" 
-  "274" -> "270" 
-  "290" -> "289" 
-  "290" -> "305" 
-  "305" -> "289" 
-  "275" -> "274" 
-  "275" -> "278" 
-  "278" -> "274" 
-  "291" -> "290" 
-  "291" -> "299" 
-  "298" -> "290" 
-  "292" -> "291" 
-  "292" -> "295" 
-  "295" -> "291" 
-  "299" -> "298" 
-  "299" -> "302" 
-  "302" -> "298" 
-  "265" -> "271" 
+  "270" -> "274" 
+  "273" -> "269" 
+  "274" -> "273" 
+  "274" -> "277" 
+  "277" -> "273" 
+  "264" -> "270" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/secure/out/7-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/vulnerable/out/7-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/secure/out/7-cfg.dot	2023-06-07 19:31:59.507404670 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/vulnerable/out/7-cfg.dot	2023-06-07 19:32:03.047404329 +0330
@@ -1,19 +1,19 @@
 digraph "isWordBreakBefore" {  
-"321" [label = <(RETURN,return isWordBreakAfter(c) || (0x3400 &lt;= c &amp;&amp; c &lt;= 0x9FFF);,return isWordBreakAfter(c) || (0x3400 &lt;= c &amp;&amp; c &lt;= 0x9FFF);)<SUB>50</SUB>> ]
-"322" [label = <(&lt;operator&gt;.logicalOr,isWordBreakAfter(c) || (0x3400 &lt;= c &amp;&amp; c &lt;= 0x9FFF))<SUB>50</SUB>> ]
-"323" [label = <(isWordBreakAfter,isWordBreakAfter(c))<SUB>50</SUB>> ]
-"325" [label = <(&lt;operator&gt;.logicalAnd,0x3400 &lt;= c &amp;&amp; c &lt;= 0x9FFF)<SUB>50</SUB>> ]
-"326" [label = <(&lt;operator&gt;.lessEqualsThan,0x3400 &lt;= c)<SUB>50</SUB>> ]
-"329" [label = <(&lt;operator&gt;.lessEqualsThan,c &lt;= 0x9FFF)<SUB>50</SUB>> ]
-"318" [label = <(METHOD,isWordBreakBefore)<SUB>48</SUB>> ]
-"332" [label = <(METHOD_RETURN,bool)<SUB>48</SUB>> ]
-  "321" -> "332" 
-  "322" -> "321" 
-  "323" -> "322" 
-  "323" -> "326" 
-  "325" -> "322" 
-  "326" -> "325" 
-  "326" -> "329" 
-  "329" -> "325" 
-  "318" -> "323" 
+"293" [label = <(RETURN,return isWordBreakAfter(c) || (0x3400 &lt;= c &amp;&amp; c &lt;= 0x9FFF);,return isWordBreakAfter(c) || (0x3400 &lt;= c &amp;&amp; c &lt;= 0x9FFF);)<SUB>45</SUB>> ]
+"294" [label = <(&lt;operator&gt;.logicalOr,isWordBreakAfter(c) || (0x3400 &lt;= c &amp;&amp; c &lt;= 0x9FFF))<SUB>45</SUB>> ]
+"295" [label = <(isWordBreakAfter,isWordBreakAfter(c))<SUB>45</SUB>> ]
+"297" [label = <(&lt;operator&gt;.logicalAnd,0x3400 &lt;= c &amp;&amp; c &lt;= 0x9FFF)<SUB>45</SUB>> ]
+"298" [label = <(&lt;operator&gt;.lessEqualsThan,0x3400 &lt;= c)<SUB>45</SUB>> ]
+"301" [label = <(&lt;operator&gt;.lessEqualsThan,c &lt;= 0x9FFF)<SUB>45</SUB>> ]
+"290" [label = <(METHOD,isWordBreakBefore)<SUB>43</SUB>> ]
+"304" [label = <(METHOD_RETURN,bool)<SUB>43</SUB>> ]
+  "293" -> "304" 
+  "294" -> "293" 
+  "295" -> "294" 
+  "295" -> "298" 
+  "297" -> "294" 
+  "298" -> "297" 
+  "298" -> "301" 
+  "301" -> "297" 
+  "290" -> "295" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/secure/out/8-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/vulnerable/out/8-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/secure/out/8-cfg.dot	2023-06-07 19:31:59.507404670 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/vulnerable/out/8-cfg.dot	2023-06-07 19:32:03.047404329 +0330
@@ -1,65 +1,65 @@
 digraph "getPrevWordBreakForCache" {  
-"400" [label = <(RETURN,return 0;,return 0;)<SUB>67</SUB>> ]
-"339" [label = <(&lt;operator&gt;.equals,offset == 0)<SUB>57</SUB>> ]
-"346" [label = <(&lt;operator&gt;.greaterThan,offset &gt; textBuf.size())<SUB>58</SUB>> ]
-"360" [label = <(isWordBreakBefore,isWordBreakBefore(textBuf[offset - 1]))<SUB>59</SUB>> ]
-"379" [label = <(&lt;operator&gt;.greaterThan,i &gt; 0)<SUB>62</SUB>> ]
-"382" [label = <(&lt;operator&gt;.postDecrement,i--)<SUB>62</SUB>> ]
-"343" [label = <(RETURN,return 0;,return 0;)<SUB>57</SUB>> ]
-"348" [label = <(size,textBuf.size())<SUB>58</SUB>> ]
-"353" [label = <(&lt;operator&gt;.assignment,offset = textBuf.size())<SUB>58</SUB>> ]
-"361" [label = <(&lt;operator&gt;.indirectIndexAccess,textBuf[offset - 1])<SUB>59</SUB>> ]
-"367" [label = <(RETURN,return offset - 1;,return offset - 1;)<SUB>60</SUB>> ]
-"374" [label = <(&lt;operator&gt;.assignment,i = offset - 1)<SUB>62</SUB>> ]
-"349" [label = <(&lt;operator&gt;.fieldAccess,textBuf.size)<SUB>58</SUB>> ]
-"355" [label = <(size,textBuf.size())<SUB>58</SUB>> ]
-"363" [label = <(&lt;operator&gt;.subtraction,offset - 1)<SUB>59</SUB>> ]
-"368" [label = <(&lt;operator&gt;.subtraction,offset - 1)<SUB>60</SUB>> ]
-"376" [label = <(&lt;operator&gt;.subtraction,offset - 1)<SUB>62</SUB>> ]
-"386" [label = <(&lt;operator&gt;.logicalOr,isWordBreakBefore(textBuf[i]) || isWordBreakAfter(textBuf[i - 1]))<SUB>63</SUB>> ]
-"351" [label = <(FIELD_IDENTIFIER,size,size)<SUB>58</SUB>> ]
-"356" [label = <(&lt;operator&gt;.fieldAccess,textBuf.size)<SUB>58</SUB>> ]
-"387" [label = <(isWordBreakBefore,isWordBreakBefore(textBuf[i]))<SUB>63</SUB>> ]
-"391" [label = <(isWordBreakAfter,isWordBreakAfter(textBuf[i - 1]))<SUB>63</SUB>> ]
-"398" [label = <(RETURN,return i;,return i;)<SUB>64</SUB>> ]
-"358" [label = <(FIELD_IDENTIFIER,size,size)<SUB>58</SUB>> ]
-"388" [label = <(&lt;operator&gt;.indirectIndexAccess,textBuf[i])<SUB>63</SUB>> ]
-"392" [label = <(&lt;operator&gt;.indirectIndexAccess,textBuf[i - 1])<SUB>63</SUB>> ]
-"394" [label = <(&lt;operator&gt;.subtraction,i - 1)<SUB>63</SUB>> ]
-"334" [label = <(METHOD,getPrevWordBreakForCache)<SUB>56</SUB>> ]
-"402" [label = <(METHOD_RETURN,uint32_t)<SUB>56</SUB>> ]
-  "400" -> "402" 
-  "339" -> "343" 
-  "339" -> "351" 
-  "346" -> "358" 
-  "346" -> "363" 
-  "360" -> "368" 
-  "360" -> "376" 
-  "379" -> "388" 
-  "379" -> "400" 
-  "382" -> "379" 
-  "343" -> "402" 
+"372" [label = <(RETURN,return 0;,return 0;)<SUB>62</SUB>> ]
+"311" [label = <(&lt;operator&gt;.equals,offset == 0)<SUB>52</SUB>> ]
+"318" [label = <(&lt;operator&gt;.greaterThan,offset &gt; textBuf.size())<SUB>53</SUB>> ]
+"332" [label = <(isWordBreakBefore,isWordBreakBefore(textBuf[offset - 1]))<SUB>54</SUB>> ]
+"351" [label = <(&lt;operator&gt;.greaterThan,i &gt; 0)<SUB>57</SUB>> ]
+"354" [label = <(&lt;operator&gt;.postDecrement,i--)<SUB>57</SUB>> ]
+"315" [label = <(RETURN,return 0;,return 0;)<SUB>52</SUB>> ]
+"320" [label = <(size,textBuf.size())<SUB>53</SUB>> ]
+"325" [label = <(&lt;operator&gt;.assignment,offset = textBuf.size())<SUB>53</SUB>> ]
+"333" [label = <(&lt;operator&gt;.indirectIndexAccess,textBuf[offset - 1])<SUB>54</SUB>> ]
+"339" [label = <(RETURN,return offset - 1;,return offset - 1;)<SUB>55</SUB>> ]
+"346" [label = <(&lt;operator&gt;.assignment,i = offset - 1)<SUB>57</SUB>> ]
+"321" [label = <(&lt;operator&gt;.fieldAccess,textBuf.size)<SUB>53</SUB>> ]
+"327" [label = <(size,textBuf.size())<SUB>53</SUB>> ]
+"335" [label = <(&lt;operator&gt;.subtraction,offset - 1)<SUB>54</SUB>> ]
+"340" [label = <(&lt;operator&gt;.subtraction,offset - 1)<SUB>55</SUB>> ]
+"348" [label = <(&lt;operator&gt;.subtraction,offset - 1)<SUB>57</SUB>> ]
+"358" [label = <(&lt;operator&gt;.logicalOr,isWordBreakBefore(textBuf[i]) || isWordBreakAfter(textBuf[i - 1]))<SUB>58</SUB>> ]
+"323" [label = <(FIELD_IDENTIFIER,size,size)<SUB>53</SUB>> ]
+"328" [label = <(&lt;operator&gt;.fieldAccess,textBuf.size)<SUB>53</SUB>> ]
+"359" [label = <(isWordBreakBefore,isWordBreakBefore(textBuf[i]))<SUB>58</SUB>> ]
+"363" [label = <(isWordBreakAfter,isWordBreakAfter(textBuf[i - 1]))<SUB>58</SUB>> ]
+"370" [label = <(RETURN,return i;,return i;)<SUB>59</SUB>> ]
+"330" [label = <(FIELD_IDENTIFIER,size,size)<SUB>53</SUB>> ]
+"360" [label = <(&lt;operator&gt;.indirectIndexAccess,textBuf[i])<SUB>58</SUB>> ]
+"364" [label = <(&lt;operator&gt;.indirectIndexAccess,textBuf[i - 1])<SUB>58</SUB>> ]
+"366" [label = <(&lt;operator&gt;.subtraction,i - 1)<SUB>58</SUB>> ]
+"306" [label = <(METHOD,getPrevWordBreakForCache)<SUB>51</SUB>> ]
+"374" [label = <(METHOD_RETURN,uint32_t)<SUB>51</SUB>> ]
+  "372" -> "374" 
+  "311" -> "315" 
+  "311" -> "323" 
+  "318" -> "330" 
+  "318" -> "335" 
+  "332" -> "340" 
+  "332" -> "348" 
+  "351" -> "360" 
+  "351" -> "372" 
+  "354" -> "351" 
+  "315" -> "374" 
+  "320" -> "318" 
+  "325" -> "335" 
+  "333" -> "332" 
+  "339" -> "374" 
+  "346" -> "351" 
+  "321" -> "320" 
+  "327" -> "325" 
+  "335" -> "333" 
+  "340" -> "339" 
   "348" -> "346" 
-  "353" -> "363" 
-  "361" -> "360" 
-  "367" -> "402" 
-  "374" -> "379" 
-  "349" -> "348" 
-  "355" -> "353" 
-  "363" -> "361" 
-  "368" -> "367" 
-  "376" -> "374" 
-  "386" -> "398" 
-  "386" -> "382" 
-  "351" -> "349" 
-  "356" -> "355" 
-  "387" -> "386" 
-  "387" -> "394" 
-  "391" -> "386" 
-  "398" -> "402" 
-  "358" -> "356" 
-  "388" -> "387" 
-  "392" -> "391" 
-  "394" -> "392" 
-  "334" -> "339" 
+  "358" -> "370" 
+  "358" -> "354" 
+  "323" -> "321" 
+  "328" -> "327" 
+  "359" -> "358" 
+  "359" -> "366" 
+  "363" -> "358" 
+  "370" -> "374" 
+  "330" -> "328" 
+  "360" -> "359" 
+  "364" -> "363" 
+  "366" -> "364" 
+  "306" -> "311" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/secure/out/9-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/vulnerable/out/9-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/secure/out/9-cfg.dot	2023-06-07 19:31:59.517404667 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0313_1/vulnerable/out/9-cfg.dot	2023-06-07 19:32:03.057404328 +0330
@@ -1,61 +1,61 @@
 digraph "getNextWordBreakForCache" {  
-"456" [label = <(RETURN,return textBuf.size();,return textBuf.size();)<SUB>86</SUB>> ]
-"409" [label = <(&lt;operator&gt;.greaterEqualsThan,offset &gt;= textBuf.size())<SUB>74</SUB>> ]
-"422" [label = <(isWordBreakAfter,isWordBreakAfter(textBuf[offset]))<SUB>75</SUB>> ]
-"439" [label = <(&lt;operator&gt;.lessThan,i &lt; textBuf.size())<SUB>78</SUB>> ]
-"445" [label = <(&lt;operator&gt;.postIncrement,i++)<SUB>78</SUB>> ]
-"457" [label = <(size,textBuf.size())<SUB>86</SUB>> ]
-"411" [label = <(size,textBuf.size())<SUB>74</SUB>> ]
-"416" [label = <(RETURN,return textBuf.size();,return textBuf.size();)<SUB>74</SUB>> ]
-"423" [label = <(&lt;operator&gt;.indirectIndexAccess,textBuf[offset])<SUB>75</SUB>> ]
-"427" [label = <(RETURN,return offset + 1;,return offset + 1;)<SUB>76</SUB>> ]
-"434" [label = <(&lt;operator&gt;.assignment,i = offset + 1)<SUB>78</SUB>> ]
-"441" [label = <(size,textBuf.size())<SUB>78</SUB>> ]
-"458" [label = <(&lt;operator&gt;.fieldAccess,textBuf.size)<SUB>86</SUB>> ]
-"412" [label = <(&lt;operator&gt;.fieldAccess,textBuf.size)<SUB>74</SUB>> ]
-"417" [label = <(size,textBuf.size())<SUB>74</SUB>> ]
-"428" [label = <(&lt;operator&gt;.addition,offset + 1)<SUB>76</SUB>> ]
-"436" [label = <(&lt;operator&gt;.addition,offset + 1)<SUB>78</SUB>> ]
-"442" [label = <(&lt;operator&gt;.fieldAccess,textBuf.size)<SUB>78</SUB>> ]
-"449" [label = <(isWordBreakBefore,isWordBreakBefore(textBuf[i]))<SUB>82</SUB>> ]
-"460" [label = <(FIELD_IDENTIFIER,size,size)<SUB>86</SUB>> ]
-"414" [label = <(FIELD_IDENTIFIER,size,size)<SUB>74</SUB>> ]
-"418" [label = <(&lt;operator&gt;.fieldAccess,textBuf.size)<SUB>74</SUB>> ]
-"444" [label = <(FIELD_IDENTIFIER,size,size)<SUB>78</SUB>> ]
-"450" [label = <(&lt;operator&gt;.indirectIndexAccess,textBuf[i])<SUB>82</SUB>> ]
-"454" [label = <(RETURN,return i;,return i;)<SUB>83</SUB>> ]
-"420" [label = <(FIELD_IDENTIFIER,size,size)<SUB>74</SUB>> ]
-"404" [label = <(METHOD,getNextWordBreakForCache)<SUB>73</SUB>> ]
-"461" [label = <(METHOD_RETURN,uint32_t)<SUB>73</SUB>> ]
-  "456" -> "461" 
-  "409" -> "420" 
-  "409" -> "423" 
-  "422" -> "428" 
-  "422" -> "436" 
-  "439" -> "450" 
-  "439" -> "460" 
-  "445" -> "444" 
-  "457" -> "456" 
-  "411" -> "409" 
-  "416" -> "461" 
-  "423" -> "422" 
-  "427" -> "461" 
-  "434" -> "444" 
-  "441" -> "439" 
-  "458" -> "457" 
-  "412" -> "411" 
+"428" [label = <(RETURN,return textBuf.size();,return textBuf.size();)<SUB>81</SUB>> ]
+"381" [label = <(&lt;operator&gt;.greaterEqualsThan,offset &gt;= textBuf.size())<SUB>69</SUB>> ]
+"394" [label = <(isWordBreakAfter,isWordBreakAfter(textBuf[offset]))<SUB>70</SUB>> ]
+"411" [label = <(&lt;operator&gt;.lessThan,i &lt; textBuf.size())<SUB>73</SUB>> ]
+"417" [label = <(&lt;operator&gt;.postIncrement,i++)<SUB>73</SUB>> ]
+"429" [label = <(size,textBuf.size())<SUB>81</SUB>> ]
+"383" [label = <(size,textBuf.size())<SUB>69</SUB>> ]
+"388" [label = <(RETURN,return textBuf.size();,return textBuf.size();)<SUB>69</SUB>> ]
+"395" [label = <(&lt;operator&gt;.indirectIndexAccess,textBuf[offset])<SUB>70</SUB>> ]
+"399" [label = <(RETURN,return offset + 1;,return offset + 1;)<SUB>71</SUB>> ]
+"406" [label = <(&lt;operator&gt;.assignment,i = offset + 1)<SUB>73</SUB>> ]
+"413" [label = <(size,textBuf.size())<SUB>73</SUB>> ]
+"430" [label = <(&lt;operator&gt;.fieldAccess,textBuf.size)<SUB>81</SUB>> ]
+"384" [label = <(&lt;operator&gt;.fieldAccess,textBuf.size)<SUB>69</SUB>> ]
+"389" [label = <(size,textBuf.size())<SUB>69</SUB>> ]
+"400" [label = <(&lt;operator&gt;.addition,offset + 1)<SUB>71</SUB>> ]
+"408" [label = <(&lt;operator&gt;.addition,offset + 1)<SUB>73</SUB>> ]
+"414" [label = <(&lt;operator&gt;.fieldAccess,textBuf.size)<SUB>73</SUB>> ]
+"421" [label = <(isWordBreakBefore,isWordBreakBefore(textBuf[i]))<SUB>77</SUB>> ]
+"432" [label = <(FIELD_IDENTIFIER,size,size)<SUB>81</SUB>> ]
+"386" [label = <(FIELD_IDENTIFIER,size,size)<SUB>69</SUB>> ]
+"390" [label = <(&lt;operator&gt;.fieldAccess,textBuf.size)<SUB>69</SUB>> ]
+"416" [label = <(FIELD_IDENTIFIER,size,size)<SUB>73</SUB>> ]
+"422" [label = <(&lt;operator&gt;.indirectIndexAccess,textBuf[i])<SUB>77</SUB>> ]
+"426" [label = <(RETURN,return i;,return i;)<SUB>78</SUB>> ]
+"392" [label = <(FIELD_IDENTIFIER,size,size)<SUB>69</SUB>> ]
+"376" [label = <(METHOD,getNextWordBreakForCache)<SUB>68</SUB>> ]
+"433" [label = <(METHOD_RETURN,uint32_t)<SUB>68</SUB>> ]
+  "428" -> "433" 
+  "381" -> "392" 
+  "381" -> "395" 
+  "394" -> "400" 
+  "394" -> "408" 
+  "411" -> "422" 
+  "411" -> "432" 
   "417" -> "416" 
-  "428" -> "427" 
-  "436" -> "434" 
-  "442" -> "441" 
-  "449" -> "454" 
-  "449" -> "445" 
-  "460" -> "458" 
-  "414" -> "412" 
-  "418" -> "417" 
-  "444" -> "442" 
-  "450" -> "449" 
-  "454" -> "461" 
-  "420" -> "418" 
-  "404" -> "414" 
+  "429" -> "428" 
+  "383" -> "381" 
+  "388" -> "433" 
+  "395" -> "394" 
+  "399" -> "433" 
+  "406" -> "416" 
+  "413" -> "411" 
+  "430" -> "429" 
+  "384" -> "383" 
+  "389" -> "388" 
+  "400" -> "399" 
+  "408" -> "406" 
+  "414" -> "413" 
+  "421" -> "426" 
+  "421" -> "417" 
+  "432" -> "430" 
+  "386" -> "384" 
+  "390" -> "389" 
+  "416" -> "414" 
+  "422" -> "421" 
+  "426" -> "433" 
+  "392" -> "390" 
+  "376" -> "386" 
 }
