diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/0-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/0-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/0-cfg.dot	2023-06-07 19:35:28.017384366 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/0-cfg.dot	2023-06-07 19:35:34.737383779 +0330
@@ -1,5 +1,1261 @@
-digraph "anonymous_lambda_8" {  
-"3" [label = <(METHOD,anonymous_lambda_8)<SUB>113</SUB>> ]
-"5" [label = <(METHOD_RETURN,ANY)<SUB>113</SUB>> ]
-  "3" -> "5" 
+digraph "&lt;global&gt;" {  
+"408" [label = <(UNKNOWN,),))<SUB>315</SUB>> ]
+"409" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012  DCHECK_NE(field-&gt;GetTypeAsPrimitiveType(), Primitive::kPrimNot);,REQUIRES_SHARED(Locks::mutator_lock_) {\012  DCHECK_NE(field-&gt;GetTypeAsPrimitiveType(), Primitive::kPrimNot);)<SUB>316</SUB>> ]
+"411" [label = <(&lt;operator&gt;.assignment,* instrumentation = Runtime::Current()-&gt;GetInstrumentation())<SUB>318</SUB>> ]
+"420" [label = <(UNKNOWN,if (UNLIKELY(instrumentation-&gt;HasFieldWriteListeners())) {\012 Thread* self = Thread::Current();\012 ArtMethod* cur_method = self-&gt;GetCurrentMethod(/*dex_pc=*/ nullptr,\012 /*check_suspended=*/ true,\012 /*abort_on_error=*/ false);\012\012 if (cur_method == nullptr) {\012 // Set/Get Fields can be issued without a method during runtime startup/teardown. Ignore all\012 // of these changes.\012 return;\012 }\012    DCHECK(cur_method-&gt;IsNative());\012    instrumentation-&gt;FieldWriteEvent(self,\012                                     self-&gt;DecodeJObject(obj).Ptr(),\012                                     cur_method,\012 0, // dex_pc is always 0 since this is a native method.\012                                     field,\012                                     val);\012 },if (UNLIKELY(instrumentation-&gt;HasFieldWriteListeners())) {\012 Thread* self = Thread::Current();\012 ArtMethod* cur_method = self-&gt;GetCurrentMethod(/*dex_pc=*/ nullptr,\012 /*check_suspended=*/ true,\012 /*abort_on_error=*/ false);\012\012 if (cur_method == nullptr) {\012 // Set/Get Fields can be issued without a method during runtime startup/teardown. Ignore all\012 // of these changes.\012 return;\012 }\012    DCHECK(cur_method-&gt;IsNative());\012    instrumentation-&gt;FieldWriteEvent(self,\012                                     self-&gt;DecodeJObject(obj).Ptr(),\012                                     cur_method,\012 0, // dex_pc is always 0 since this is a native method.\012                                     field,\012                                     val);\012 })<SUB>319</SUB>> ]
+"421" [label = <(UNKNOWN,},})<SUB>338</SUB>> ]
+"428" [label = <(UNKNOWN,),))<SUB>340</SUB>> ]
+"429" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012  instrumentation::Instrumentation* instrumentation = Runtime::Current()-&gt;GetInstrumentation();,REQUIRES_SHARED(Locks::mutator_lock_) {\012  instrumentation::Instrumentation* instrumentation = Runtime::Current()-&gt;GetInstrumentation();)<SUB>341</SUB>> ]
+"430" [label = <(UNKNOWN,if (UNLIKELY(instrumentation-&gt;HasFieldReadListeners())) {\012 Thread* self = Thread::Current();\012 ArtMethod* cur_method = self-&gt;GetCurrentMethod(/*dex_pc=*/ nullptr,\012 /*check_suspended=*/ true,\012 /*abort_on_error=*/ false);\012\012 if (cur_method == nullptr) {\012 // Set/Get Fields can be issued without a method during runtime startup/teardown. Ignore all\012 // of these changes.\012 return;\012 }\012    DCHECK(cur_method-&gt;IsNative());\012    instrumentation-&gt;FieldReadEvent(self,\012                                    self-&gt;DecodeJObject(obj).Ptr(),\012                                    cur_method,\012 0, // dex_pc is always 0 since this is a native method.\012                                    field);\012 },if (UNLIKELY(instrumentation-&gt;HasFieldReadListeners())) {\012 Thread* self = Thread::Current();\012 ArtMethod* cur_method = self-&gt;GetCurrentMethod(/*dex_pc=*/ nullptr,\012 /*check_suspended=*/ true,\012 /*abort_on_error=*/ false);\012\012 if (cur_method == nullptr) {\012 // Set/Get Fields can be issued without a method during runtime startup/teardown. Ignore all\012 // of these changes.\012 return;\012 }\012    DCHECK(cur_method-&gt;IsNative());\012    instrumentation-&gt;FieldReadEvent(self,\012                                    self-&gt;DecodeJObject(obj).Ptr(),\012                                    cur_method,\012 0, // dex_pc is always 0 since this is a native method.\012                                    field);\012 })<SUB>343</SUB>> ]
+"431" [label = <(UNKNOWN,},})<SUB>361</SUB>> ]
+"507" [label = <(UNKNOWN,),))<SUB>391</SUB>> ]
+"508" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012  std::string temp;,REQUIRES_SHARED(Locks::mutator_lock_) {\012  std::string temp;)<SUB>392</SUB>> ]
+"509" [label = <(UNKNOWN,soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/NoSuchMethodError;&quot;,\012 &quot;no %s method \&quot;%s.%s%s\&quot;&quot;,\012                                 kind,\012                                 c-&gt;GetDescriptor(&amp;temp),\012                                 name,\012                                 sig);,soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/NoSuchMethodError;&quot;,\012 &quot;no %s method \&quot;%s.%s%s\&quot;&quot;,\012                                 kind,\012                                 c-&gt;GetDescriptor(&amp;temp),\012                                 name,\012                                 sig);)<SUB>394</SUB>> ]
+"510" [label = <(UNKNOWN,},})<SUB>400</SUB>> ]
+"519" [label = <(UNKNOWN,),))<SUB>405</SUB>> ]
+"520" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012  LOG(ERROR)\012 &lt;&lt; &quot;Failed to register native method in &quot; &lt;&lt; c-&gt;PrettyDescriptor()\012 &lt;&lt; &quot; in &quot; &lt;&lt; c-&gt;GetDexCache()-&gt;GetLocation()-&gt;ToModifiedUtf8()\012 &lt;&lt; &quot;: &quot; &lt;&lt; kind &lt;&lt; &quot; is null at index &quot; &lt;&lt; idx;,REQUIRES_SHARED(Locks::mutator_lock_) {\012  LOG(ERROR)\012 &lt;&lt; &quot;Failed to register native method in &quot; &lt;&lt; c-&gt;PrettyDescriptor()\012 &lt;&lt; &quot; in &quot; &lt;&lt; c-&gt;GetDexCache()-&gt;GetLocation()-&gt;ToModifiedUtf8()\012 &lt;&lt; &quot;: &quot; &lt;&lt; kind &lt;&lt; &quot; is null at index &quot; &lt;&lt; idx;)<SUB>406</SUB>> ]
+"521" [label = <(UNKNOWN,soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/NoSuchMethodError;&quot;,\012 &quot;%s is null at index %d&quot;,\012                                 kind,\012                                 idx);,soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/NoSuchMethodError;&quot;,\012 &quot;%s is null at index %d&quot;,\012                                 kind,\012                                 idx);)<SUB>411</SUB>> ]
+"522" [label = <(UNKNOWN,},})<SUB>415</SUB>> ]
+"529" [label = <(UNKNOWN,),))<SUB>417</SUB>> ]
+"530" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012 if (LIKELY(klass-&gt;IsInitialized())) {\012 return klass;\012 },REQUIRES_SHARED(Locks::mutator_lock_) {\012 if (LIKELY(klass-&gt;IsInitialized())) {\012 return klass;\012 })<SUB>418</SUB>> ]
+"537" [label = <(h_klass,h_klass(hs.NewHandle(klass)))<SUB>423</SUB>> ]
+"543" [label = <(UNKNOWN,if (!Runtime::Current()-&gt;GetClassLinker()-&gt;EnsureInitialized(self, h_klass, true, true)) {\012 return nullptr;\012 },if (!Runtime::Current()-&gt;GetClassLinker()-&gt;EnsureInitialized(self, h_klass, true, true)) {\012 return nullptr;\012 })<SUB>424</SUB>> ]
+"544" [label = <(UNKNOWN,return h_klass.Get();,return h_klass.Get();)<SUB>427</SUB>> ]
+"545" [label = <(UNKNOWN,},})<SUB>428</SUB>> ]
+"555" [label = <(UNKNOWN,),))<SUB>431</SUB>> ]
+"556" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012 ObjPtr&lt;mirror::Class&gt; c = EnsureInitialized(soa.Self(), soa.Decode&lt;mirror::Class&gt;(jni_class));,REQUIRES_SHARED(Locks::mutator_lock_) {\012 ObjPtr&lt;mirror::Class&gt; c = EnsureInitialized(soa.Self(), soa.Decode&lt;mirror::Class&gt;(jni_class));)<SUB>432</SUB>> ]
+"557" [label = <(UNKNOWN,if (c == nullptr) {\012 return nullptr;\012 },if (c == nullptr) {\012 return nullptr;\012 })<SUB>434</SUB>> ]
+"559" [label = <(&lt;operator&gt;.assignment,* method = nullptr)<SUB>437</SUB>> ]
+"563" [label = <(&lt;operator&gt;.assignment,pointer_size = Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize())<SUB>438</SUB>> ]
+"575" [label = <(UNKNOWN,if (c-&gt;IsInterface()) {\012    method = c-&gt;FindInterfaceMethod(name, sig, pointer_size);\012 },if (c-&gt;IsInterface()) {\012    method = c-&gt;FindInterfaceMethod(name, sig, pointer_size);\012 })<SUB>439</SUB>> ]
+"576" [label = <(UNKNOWN,else {\012    method = c-&gt;FindClassMethod(name, sig, pointer_size);\012 },else {\012    method = c-&gt;FindClassMethod(name, sig, pointer_size);\012 })<SUB>441</SUB>> ]
+"577" [label = <(UNKNOWN,if (method != nullptr &amp;&amp; ShouldDenyAccessToMember(method, soa.Self())) {\012    method = nullptr;\012 },if (method != nullptr &amp;&amp; ShouldDenyAccessToMember(method, soa.Self())) {\012    method = nullptr;\012 })<SUB>444</SUB>> ]
+"578" [label = <(UNKNOWN,if (method == nullptr || method-&gt;IsStatic() != is_static) {\012 ThrowNoSuchMethodError(soa, c, name, sig, is_static ? &quot;static&quot; : &quot;non-static&quot;);\012 return nullptr;\012 },if (method == nullptr || method-&gt;IsStatic() != is_static) {\012 ThrowNoSuchMethodError(soa, c, name, sig, is_static ? &quot;static&quot; : &quot;non-static&quot;);\012 return nullptr;\012 })<SUB>447</SUB>> ]
+"579" [label = <(UNKNOWN,return jni::EncodeArtMethod(method);,return jni::EncodeArtMethod(method);)<SUB>451</SUB>> ]
+"580" [label = <(UNKNOWN,},})<SUB>452</SUB>> ]
+"586" [label = <(UNKNOWN,),))<SUB>454</SUB>> ]
+"587" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012 ArtMethod* method = soa.Self()-&gt;GetCurrentMethod(nullptr);,REQUIRES_SHARED(Locks::mutator_lock_) {\012 ArtMethod* method = soa.Self()-&gt;GetCurrentMethod(nullptr);)<SUB>455</SUB>> ]
+"588" [label = <(UNKNOWN,if (method == jni::DecodeArtMethod(WellKnownClasses::java_lang_Runtime_nativeLoad)) {\012 return soa.Decode&lt;mirror::ClassLoader&gt;(soa.Self()-&gt;GetClassLoaderOverride());\012 },if (method == jni::DecodeArtMethod(WellKnownClasses::java_lang_Runtime_nativeLoad)) {\012 return soa.Decode&lt;mirror::ClassLoader&gt;(soa.Self()-&gt;GetClassLoaderOverride());\012 })<SUB>458</SUB>> ]
+"589" [label = <(UNKNOWN,if (method != nullptr) {\012 return method-&gt;GetDeclaringClass()-&gt;GetClassLoader();\012 },if (method != nullptr) {\012 return method-&gt;GetDeclaringClass()-&gt;GetClassLoader();\012 })<SUB>462</SUB>> ]
+"591" [label = <(&lt;operator&gt;.assignment,class_loader =\012      soa.Decode&lt;mirror::ClassLoader&gt;(Runtime::Current()-&gt;GetSystemClassLoader()))<SUB>466</SUB>> ]
+"608" [label = <(UNKNOWN,if (class_loader != nullptr) {\012 return class_loader;\012 },if (class_loader != nullptr) {\012 return class_loader;\012 })<SUB>468</SUB>> ]
+"609" [label = <(UNKNOWN,class_loader = soa.Decode&lt;mirror::ClassLoader&gt;(soa.Self()-&gt;GetClassLoaderOverride());,class_loader = soa.Decode&lt;mirror::ClassLoader&gt;(soa.Self()-&gt;GetClassLoaderOverride());)<SUB>472</SUB>> ]
+"610" [label = <(UNKNOWN,if (class_loader != nullptr) {\012 // If so, CommonCompilerTest should have marked the runtime as a compiler not compiling an\012 // image.\012    CHECK(Runtime::Current()-&gt;IsAotCompiler());\012    CHECK(!Runtime::Current()-&gt;IsCompilingBootImage());\012 return class_loader;\012 },if (class_loader != nullptr) {\012 // If so, CommonCompilerTest should have marked the runtime as a compiler not compiling an\012 // image.\012    CHECK(Runtime::Current()-&gt;IsAotCompiler());\012    CHECK(!Runtime::Current()-&gt;IsCompilingBootImage());\012 return class_loader;\012 })<SUB>473</SUB>> ]
+"611" [label = <(UNKNOWN,return nullptr;,return nullptr;)<SUB>481</SUB>> ]
+"612" [label = <(UNKNOWN,},})<SUB>482</SUB>> ]
+"622" [label = <(UNKNOWN,),))<SUB>485</SUB>> ]
+"623" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012 StackHandleScope&lt;2&gt; hs(soa.Self());,REQUIRES_SHARED(Locks::mutator_lock_) {\012 StackHandleScope&lt;2&gt; hs(soa.Self());)<SUB>486</SUB>> ]
+"625" [label = <(c,c(\012      hs.NewHandle(EnsureInitialized(soa.Self(), soa.Decode&lt;mirror::Class&gt;(jni_class)))))<SUB>488</SUB>> ]
+"644" [label = <(UNKNOWN,if (c == nullptr) {\012 return nullptr;\012 },if (c == nullptr) {\012 return nullptr;\012 })<SUB>490</SUB>> ]
+"646" [label = <(&lt;operator&gt;.assignment,* field = nullptr)<SUB>493</SUB>> ]
+"651" [label = <(&lt;operator&gt;.assignment,* class_linker = Runtime::Current()-&gt;GetClassLinker())<SUB>495</SUB>> ]
+"660" [label = <(UNKNOWN,if (UNLIKELY(sig[0] == '\0')) {\012    DCHECK(field == nullptr);\012 },if (UNLIKELY(sig[0] == '\0')) {\012    DCHECK(field == nullptr);\012 })<SUB>496</SUB>> ]
+"661" [label = <(UNKNOWN,else if (sig[1] != '\0') {\012 Handle&lt;mirror::ClassLoader&gt; class_loader(hs.NewHandle(c-&gt;GetClassLoader()));\012    field_type = class_linker-&gt;FindClass(soa.Self(), sig, class_loader);\012 },else if (sig[1] != '\0') {\012 Handle&lt;mirror::ClassLoader&gt; class_loader(hs.NewHandle(c-&gt;GetClassLoader()));\012    field_type = class_linker-&gt;FindClass(soa.Self(), sig, class_loader);\012 })<SUB>498</SUB>> ]
+"662" [label = <(UNKNOWN,else {\012    field_type = class_linker-&gt;FindPrimitiveClass(*sig);\012 },else {\012    field_type = class_linker-&gt;FindPrimitiveClass(*sig);\012 })<SUB>501</SUB>> ]
+"663" [label = <(UNKNOWN,if (field_type == nullptr) {\012 // Failed to find type from the signature of the field.\012    DCHECK(sig[0] == '\0' || soa.Self()-&gt;IsExceptionPending());\012 StackHandleScope&lt;1&gt; hs2(soa.Self());\012 Handle&lt;mirror::Throwable&gt; cause(hs2.NewHandle(soa.Self()-&gt;GetException()));\012    soa.Self()-&gt;ClearException();\012    std::string temp;\012    soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/NoSuchFieldError;&quot;,\012 &quot;no type \&quot;%s\&quot; found and so no field \&quot;%s\&quot; &quot;\012 &quot;could be found in class \&quot;%s\&quot; or its superclasses&quot;, sig, name,\012                                   c-&gt;GetDescriptor(&amp;temp));\012 if (cause != nullptr) {\012      soa.Self()-&gt;GetException()-&gt;SetCause(cause.Get());\012 }\012 return nullptr;\012 },if (field_type == nullptr) {\012 // Failed to find type from the signature of the field.\012    DCHECK(sig[0] == '\0' || soa.Self()-&gt;IsExceptionPending());\012 StackHandleScope&lt;1&gt; hs2(soa.Self());\012 Handle&lt;mirror::Throwable&gt; cause(hs2.NewHandle(soa.Self()-&gt;GetException()));\012    soa.Self()-&gt;ClearException();\012    std::string temp;\012    soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/NoSuchFieldError;&quot;,\012 &quot;no type \&quot;%s\&quot; found and so no field \&quot;%s\&quot; &quot;\012 &quot;could be found in class \&quot;%s\&quot; or its superclasses&quot;, sig, name,\012                                   c-&gt;GetDescriptor(&amp;temp));\012 if (cause != nullptr) {\012      soa.Self()-&gt;GetException()-&gt;SetCause(cause.Get());\012 }\012 return nullptr;\012 })<SUB>504</SUB>> ]
+"665" [label = <(UNKNOWN,if (is_static) {\012    field = mirror::Class::FindStaticField(\012        soa.Self(), c.Get(), name, field_type-&gt;GetDescriptor(&amp;temp));\012 },if (is_static) {\012    field = mirror::Class::FindStaticField(\012        soa.Self(), c.Get(), name, field_type-&gt;GetDescriptor(&amp;temp));\012 })<SUB>521</SUB>> ]
+"666" [label = <(UNKNOWN,else {\012    field = c-&gt;FindInstanceField(name, field_type-&gt;GetDescriptor(&amp;temp));\012 },else {\012    field = c-&gt;FindInstanceField(name, field_type-&gt;GetDescriptor(&amp;temp));\012 })<SUB>524</SUB>> ]
+"667" [label = <(UNKNOWN,if (field != nullptr &amp;&amp; ShouldDenyAccessToMember(field, soa.Self())) {\012    field = nullptr;\012 },if (field != nullptr &amp;&amp; ShouldDenyAccessToMember(field, soa.Self())) {\012    field = nullptr;\012 })<SUB>527</SUB>> ]
+"668" [label = <(UNKNOWN,if (field == nullptr) {\012    soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/NoSuchFieldError;&quot;,\012 &quot;no \&quot;%s\&quot; field \&quot;%s\&quot; in class \&quot;%s\&quot; or its superclasses&quot;,\012                                   sig, name, c-&gt;GetDescriptor(&amp;temp));\012 return nullptr;\012 },if (field == nullptr) {\012    soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/NoSuchFieldError;&quot;,\012 &quot;no \&quot;%s\&quot; field \&quot;%s\&quot; in class \&quot;%s\&quot; or its superclasses&quot;,\012                                   sig, name, c-&gt;GetDescriptor(&amp;temp));\012 return nullptr;\012 })<SUB>530</SUB>> ]
+"669" [label = <(UNKNOWN,return jni::EncodeArtField(field);,return jni::EncodeArtField(field);)<SUB>536</SUB>> ]
+"670" [label = <(UNKNOWN,},})<SUB>537</SUB>> ]
+"680" [label = <(UNKNOWN,),))<SUB>543</SUB>> ]
+"681" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012  std::string type(array-&gt;PrettyTypeOf());,REQUIRES_SHARED(Locks::mutator_lock_) {\012  std::string type(array-&gt;PrettyTypeOf());)<SUB>544</SUB>> ]
+"682" [label = <(UNKNOWN,soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/ArrayIndexOutOfBoundsException;&quot;,\012 &quot;%s offset=%d length=%d %s.length=%d&quot;,\012                                 type.c_str(), start, length, identifier, array-&gt;GetLength());,soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/ArrayIndexOutOfBoundsException;&quot;,\012 &quot;%s offset=%d length=%d %s.length=%d&quot;,\012                                 type.c_str(), start, length, identifier, array-&gt;GetLength());)<SUB>546</SUB>> ]
+"683" [label = <(UNKNOWN,},})<SUB>549</SUB>> ]
+"692" [label = <(UNKNOWN,),))<SUB>552</SUB>> ]
+"693" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012  soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/StringIndexOutOfBoundsException;&quot;,\012 &quot;offset=%d length=%d string.length()=%d&quot;, start, length,\012                                 array_length);,REQUIRES_SHARED(Locks::mutator_lock_) {\012  soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/StringIndexOutOfBoundsException;&quot;,\012 &quot;offset=%d length=%d string.length()=%d&quot;, start, length,\012                                 array_length);)<SUB>553</SUB>> ]
+"694" [label = <(UNKNOWN,},})<SUB>557</SUB>> ]
+"703" [label = <(UNKNOWN,),))<SUB>559</SUB>> ]
+"704" [label = <(UNKNOWN,REQUIRES(!Locks::mutator_lock_) {\012 // Turn the const char* into a java.lang.String.\012 ScopedLocalRef&lt;jstring&gt; s(env, env-&gt;NewStringUTF(msg));\012 if (msg != nullptr &amp;&amp; s.get() == nullptr) {\012 return JNI_ERR;\012 }\012\012 // Choose an appropriate constructor and set up the arguments.\012  jvalue args[2];\012 const char* signature;\012 if (msg == nullptr &amp;&amp; cause == nullptr) {\012    signature = &quot;()V&quot;;\012 } else if (msg != nullptr &amp;&amp; cause == nullptr) {\012    signature = &quot;(Ljava/lang/String;)V&quot;;\012    args[0].l = s.get();\012 } else if (msg == nullptr &amp;&amp; cause != nullptr) {\012    signature = &quot;(Ljava/lang/Throwable;)V&quot;;\012    args[0].l = cause;\012 } else {\012    signature = &quot;(Ljava/lang/String;Ljava/lang/Throwable;)V&quot;;\012    args[0].l = s.get();\012    args[1].l = cause;\012 }\012  jmethodID mid = env-&gt;GetMethodID(exception_class, &quot;&lt;init&gt;&quot;, signature);\012 if (mid == nullptr) {\012 ScopedObjectAccess soa(env);\012    LOG(ERROR) &lt;&lt; &quot;No &lt;init&gt;&quot; &lt;&lt; signature &lt;&lt; &quot; in &quot;\012 &lt;&lt; mirror::Class::PrettyClass(soa.Decode&lt;mirror::Class&gt;(exception_class));\012 return JNI_ERR;\012 }\012\012 ScopedLocalRef&lt;jthrowable&gt; exception(\012      env, reinterpret_cast&lt;jthrowable&gt;(env-&gt;NewObjectA(exception_class, mid, args)));\012 if (exception.get() == nullptr) {\012 return JNI_ERR;\012 }\012 ScopedObjectAccess soa(env);\012  soa.Self()-&gt;SetException(soa.Decode&lt;mirror::Throwable&gt;(exception.get()));\012 return JNI_OK;\012},REQUIRES(!Locks::mutator_lock_) {\012 // Turn the const char* into a java.lang.String.\012 ScopedLocalRef&lt;jstring&gt; s(env, env-&gt;NewStringUTF(msg));\012 if (msg != nullptr &amp;&amp; s.get() == nullptr) {\012 return JNI_ERR;\012 }\012\012 // Choose an appropriate constructor and set up the arguments.\012  jvalue args[2];\012 const char* signature;\012 if (msg == nullptr &amp;&amp; cause == nullptr) {\012    signature = &quot;()V&quot;;\012 } else if (msg != nullptr &amp;&amp; cause == nullptr) {\012    signature = &quot;(Ljava/lang/String;)V&quot;;\012    args[0].l = s.get();\012 } else if (msg == nullptr &amp;&amp; cause != nullptr) {\012    signature = &quot;(Ljava/lang/Throwable;)V&quot;;\012    args[0].l = cause;\012 } else {\012    signature = &quot;(Ljava/lang/String;Ljava/lang/Throwable;)V&quot;;\012    args[0].l = s.get();\012    args[1].l = cause;\012 }\012  jmethodID mid = env-&gt;GetMethodID(exception_class, &quot;&lt;init&gt;&quot;, signature);\012 if (mid == nullptr) {\012 ScopedObjectAccess soa(env);\012    LOG(ERROR) &lt;&lt; &quot;No &lt;init&gt;&quot; &lt;&lt; signature &lt;&lt; &quot; in &quot;\012 &lt;&lt; mirror::Class::PrettyClass(soa.Decode&lt;mirror::Class&gt;(exception_class));\012 return JNI_ERR;\012 }\012\012 ScopedLocalRef&lt;jthrowable&gt; exception(\012      env, reinterpret_cast&lt;jthrowable&gt;(env-&gt;NewObjectA(exception_class, mid, args)));\012 if (exception.get() == nullptr) {\012 return JNI_ERR;\012 }\012 ScopedObjectAccess soa(env);\012  soa.Self()-&gt;SetException(soa.Decode&lt;mirror::Throwable&gt;(exception.get()));\012 return JNI_OK;\012})<SUB>560</SUB>> ]
+"724" [label = <(UNKNOWN,),))<SUB>632</SUB>> ]
+"725" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012 auto pointer_size = Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize();,REQUIRES_SHARED(Locks::mutator_lock_) {\012 auto pointer_size = Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize();)<SUB>633</SUB>> ]
+"726" [label = <(UNKNOWN,for (auto&amp; method : c-&gt;GetMethods(pointer_size)) {\012 if (kNative == method.IsNative() &amp;&amp; name == method.GetName() &amp;&amp; method.GetSignature() == sig) {\012 return &amp;method;\012 }\012 },for (auto&amp; method : c-&gt;GetMethods(pointer_size)) {\012 if (kNative == method.IsNative() &amp;&amp; name == method.GetName() &amp;&amp; method.GetSignature() == sig) {\012 return &amp;method;\012 }\012 })<SUB>635</SUB>> ]
+"727" [label = <(UNKNOWN,return nullptr;,return nullptr;)<SUB>640</SUB>> ]
+"728" [label = <(UNKNOWN,},})<SUB>641</SUB>> ]
+"13301" [label = <(UNKNOWN,},})<SUB>2731</SUB>> ]
+"13357" [label = <(UNKNOWN,),))<SUB>2748</SUB>> ]
+"13358" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012 ObjPtr&lt;ArtArrayT&gt; array = soa.Decode&lt;ArtArrayT&gt;(java_array);,REQUIRES_SHARED(Locks::mutator_lock_) {\012 ObjPtr&lt;ArtArrayT&gt; array = soa.Decode&lt;ArtArrayT&gt;(java_array);)<SUB>2749</SUB>> ]
+"13360" [label = <(&lt;operator&gt;.assignment,expected_array_class = GetClassRoot&lt;ArtArrayT&gt;())<SUB>2751</SUB>> ]
+"13363" [label = <(UNKNOWN,if (UNLIKELY(expected_array_class != array-&gt;GetClass())) {\012      soa.Vm()-&gt;JniAbortF(fn_name,\012 &quot;attempt to %s %s primitive array elements with an object of type %s&quot;,\012                          operation,\012                          mirror::Class::PrettyDescriptor(\012                              expected_array_class-&gt;GetComponentType()).c_str(),\012                          mirror::Class::PrettyDescriptor(array-&gt;GetClass()).c_str());\012 return nullptr;\012 },if (UNLIKELY(expected_array_class != array-&gt;GetClass())) {\012      soa.Vm()-&gt;JniAbortF(fn_name,\012 &quot;attempt to %s %s primitive array elements with an object of type %s&quot;,\012                          operation,\012                          mirror::Class::PrettyDescriptor(\012                              expected_array_class-&gt;GetComponentType()).c_str(),\012                          mirror::Class::PrettyDescriptor(array-&gt;GetClass()).c_str());\012 return nullptr;\012 })<SUB>2752</SUB>> ]
+"13364" [label = <(UNKNOWN,DCHECK_EQ(sizeof(ElementT), array-&gt;GetClass()-&gt;GetComponentSize());,DCHECK_EQ(sizeof(ElementT), array-&gt;GetClass()-&gt;GetComponentSize());)<SUB>2761</SUB>> ]
+"13365" [label = <(UNKNOWN,return array;,return array;)<SUB>2762</SUB>> ]
+"13366" [label = <(UNKNOWN,},})<SUB>2763</SUB>> ]
+"13539" [label = <(UNKNOWN,),))<SUB>2808</SUB>> ]
+"13540" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012 void* array_data = array-&gt;GetRawData(component_size, 0);,REQUIRES_SHARED(Locks::mutator_lock_) {\012 void* array_data = array-&gt;GetRawData(component_size, 0);)<SUB>2809</SUB>> ]
+"13542" [label = <(&lt;operator&gt;.assignment,* heap = Runtime::Current()-&gt;GetHeap())<SUB>2811</SUB>> ]
+"13552" [label = <(&lt;operator&gt;.assignment,is_copy = array_data != elements)<SUB>2812</SUB>> ]
+"13558" [label = <(&lt;operator&gt;.assignment,bytes = array-&gt;GetLength() * component_size)<SUB>2813</SUB>> ]
+"13566" [label = <(UNKNOWN,if (is_copy) {\012 // Sanity check: If elements is not the same as the java array's data, it better not be a\012 // heap address. TODO: This might be slow to check, may be worth keeping track of which\012 // copies we make?\012 if (heap-&gt;IsNonDiscontinuousSpaceHeapAddress(elements)) {\012        soa.Vm()-&gt;JniAbortF(&quot;ReleaseArrayElements&quot;,\012 &quot;invalid element pointer %p, array elements are %p&quot;,\012 reinterpret_cast&lt;void*&gt;(elements), array_data);\012 return;\012 }\012 if (mode != JNI_ABORT) {\012        memcpy(array_data, elements, bytes);\012 } else if (kWarnJniAbort &amp;&amp; memcmp(array_data, elements, bytes) != 0) {\012 // Warn if we have JNI_ABORT and the arrays don't match since this is usually an error.\012        LOG(WARNING) &lt;&lt; &quot;Possible incorrect JNI_ABORT in Release*ArrayElements&quot;;\012        soa.Self()-&gt;DumpJavaStack(LOG_STREAM(WARNING));\012 }\012 },if (is_copy) {\012 // Sanity check: If elements is not the same as the java array's data, it better not be a\012 // heap address. TODO: This might be slow to check, may be worth keeping track of which\012 // copies we make?\012 if (heap-&gt;IsNonDiscontinuousSpaceHeapAddress(elements)) {\012        soa.Vm()-&gt;JniAbortF(&quot;ReleaseArrayElements&quot;,\012 &quot;invalid element pointer %p, array elements are %p&quot;,\012 reinterpret_cast&lt;void*&gt;(elements), array_data);\012 return;\012 }\012 if (mode != JNI_ABORT) {\012        memcpy(array_data, elements, bytes);\012 } else if (kWarnJniAbort &amp;&amp; memcmp(array_data, elements, bytes) != 0) {\012 // Warn if we have JNI_ABORT and the arrays don't match since this is usually an error.\012        LOG(WARNING) &lt;&lt; &quot;Possible incorrect JNI_ABORT in Release*ArrayElements&quot;;\012        soa.Self()-&gt;DumpJavaStack(LOG_STREAM(WARNING));\012 }\012 })<SUB>2814</SUB>> ]
+"13567" [label = <(UNKNOWN,if (mode != JNI_COMMIT) {\012 if (is_copy) {\012 delete[] reinterpret_cast&lt;uint64_t*&gt;(elements);\012 } else if (heap-&gt;IsMovableObject(array)) {\012 // Non copy to a movable object must means that we had disabled the moving GC.\012 if (!kUseReadBarrier) {\012          heap-&gt;DecrementDisableMovingGC(soa.Self());\012 } else {\012          heap-&gt;DecrementDisableThreadFlip(soa.Self());\012 }\012 }\012 },if (mode != JNI_COMMIT) {\012 if (is_copy) {\012 delete[] reinterpret_cast&lt;uint64_t*&gt;(elements);\012 } else if (heap-&gt;IsMovableObject(array)) {\012 // Non copy to a movable object must means that we had disabled the moving GC.\012 if (!kUseReadBarrier) {\012          heap-&gt;DecrementDisableMovingGC(soa.Self());\012 } else {\012          heap-&gt;DecrementDisableThreadFlip(soa.Self());\012 }\012 }\012 })<SUB>2832</SUB>> ]
+"13568" [label = <(UNKNOWN,},})<SUB>2844</SUB>> ]
+"13781" [label = <(UNKNOWN,};,};)<SUB>2881</SUB>> ]
+"13783" [label = <(&lt;operator&gt;.assignment,gJniNativeInterface = {\012 nullptr, // reserved0.\012 nullptr, // reserved1.\012 nullptr, // reserved2.\012 nullptr, // reserved3.\012  JNI::GetVersion,\012  JNI::DefineClass,\012  JNI::FindClass,\012  JNI::FromReflectedMethod,\012  JNI::FromReflectedField,\012  JNI::ToReflectedMethod,\012  JNI::GetSuperclass,\012  JNI::IsAssignableFrom,\012  JNI::ToReflectedField,\012  JNI::Throw,\012  JNI::ThrowNew,\012  JNI::ExceptionOccurred,\012  JNI::ExceptionDescribe,\012  JNI::ExceptionClear,\012  JNI::FatalError,\012  JNI::PushLocalFrame,\012  JNI::PopLocalFrame,\012  JNI::NewGlobalRef,\012  JNI::DeleteGlobalRef,\012  JNI::DeleteLocalRef,\012  JNI::IsSameObject,\012  JNI::NewLocalRef,\012  JNI::EnsureLocalCapacity,\012  JNI::AllocObject,\012  JNI::NewObject,\012  JNI::NewObjectV,\012  JNI::NewObjectA,\012  JNI::GetObjectClass,\012  JNI::IsInstanceOf,\012  JNI::GetMethodID,\012  JNI::CallObjectMethod,\012  JNI::CallObjectMethodV,\012  JNI::CallObjectMethodA,\012  JNI::CallBooleanMethod,\012  JNI::CallBooleanMethodV,\012  JNI::CallBooleanMethodA,\012  JNI::CallByteMethod,\012  JNI::CallByteMethodV,\012  JNI::CallByteMethodA,\012  JNI::CallCharMethod,\012  JNI::CallCharMethodV,\012  JNI::CallCharMethodA,\012  JNI::CallShortMethod,\012  JNI::CallShortMethodV,\012  JNI::CallShortMethodA,\012  JNI::CallIntMethod,\012  JNI::CallIntMethodV,\012  JNI::CallIntMethodA,\012  JNI::CallLongMethod,\012  JNI::CallLongMethodV,\012  JNI::CallLongMethodA,\012  JNI::CallFloatMethod,\012  JNI::CallFloatMethodV,\012  JNI::CallFloatMethodA,\012  JNI::CallDoubleMethod,\012  JNI::CallDoubleMethodV,\012  JNI::CallDoubleMethodA,\012  JNI::CallVoidMethod,\012  JNI::CallVoidMethodV,\012  JNI::CallVoidMethodA,\012  JNI::CallNonvirtualObjectMethod,\012  JNI::CallNonvirtualObjectMethodV,\012  JNI::CallNonvirtualObjectMethodA,\012  JNI::CallNonvirtualBooleanMethod,\012  JNI::CallNonvirtualBooleanMethodV,\012  JNI::CallNonvirtualBooleanMethodA,\012  JNI::CallNonvirtualByteMethod,\012  JNI::CallNonvirtualByteMethodV,\012  JNI::CallNonvirtualByteMethodA,\012  JNI::CallNonvirtualCharMethod,\012  JNI::CallNonvirtualCharMethodV,\012  JNI::CallNonvirtualCharMethodA,\012  JNI::CallNonvirtualShortMethod,\012  JNI::CallNonvirtualShortMethodV,\012  JNI::CallNonvirtualShortMethodA,\012  JNI::CallNonvirtualIntMethod,\012  JNI::CallNonvirtualIntMethodV,\012  JNI::CallNonvirtualIntMethodA,\012  JNI::CallNonvirtualLongMethod,\012  JNI::CallNonvirtualLongMethodV,\012  JNI::CallNonvirtualLongMethodA,\012  JNI::CallNonvirtualFloatMethod,\012  JNI::CallNonvirtualFloatMethodV,\012  JNI::CallNonvirtualFloatMethodA,\012  JNI::CallNonvirtualDoubleMethod,\012  JNI::CallNonvirtualDoubleMethodV,\012  JNI::CallNonvirtualDoubleMethodA,\012  JNI::CallNonvirtualVoidMethod,\012  JNI::CallNonvirtualVoidMethodV,\012  JNI::CallNonvirtualVoidMethodA,\012  JNI::GetFieldID,\012  JNI::GetObjectField,\012  JNI::GetBooleanField,\012  JNI::GetByteField,\012  JNI::GetCharField,\012  JNI::GetShortField,\012  JNI::GetIntField,\012  JNI::GetLongField,\012  JNI::GetFloatField,\012  JNI::GetDoubleField,\012  JNI::SetObjectField,\012  JNI::SetBooleanField,\012  JNI::SetByteField,\012  JNI::SetCharField,\012  JNI::SetShortField,\012  JNI::SetIntField,\012  JNI::SetLongField,\012  JNI::SetFloatField,\012  JNI::SetDoubleField,\012  JNI::GetStaticMethodID,\012  JNI::CallStaticObjectMethod,\012  JNI::CallStaticObjectMethodV,\012  JNI::CallStaticObjectMethodA,\012  JNI::CallStaticBooleanMethod,\012  JNI::CallStaticBooleanMethodV,\012  JNI::CallStaticBooleanMethodA,\012  JNI::CallStaticByteMethod,\012  JNI::CallStaticByteMethodV,\012  JNI::CallStaticByteMethodA,\012  JNI::CallStaticCharMethod,\012  JNI::CallStaticCharMethodV,\012  JNI::CallStaticCharMethodA,\012  JNI::CallStaticShortMethod,\012  JNI::CallStaticShortMethodV,\012  JNI::CallStaticShortMethodA,\012  JNI::CallStaticIntMethod,\012  JNI::CallStaticIntMethodV,\012  JNI::CallStaticIntMethodA,\012  JNI::CallStaticLongMethod,\012  JNI::CallStaticLongMethodV,\012  JNI::CallStaticLongMethodA,\012  JNI::CallStaticFloatMethod,\012  JNI::CallStaticFloatMethodV,\012  JNI::CallStaticFloatMethodA,\012  JNI::CallStaticDoubleMethod,\012  JNI::CallStaticDoubleMethodV,\012  JNI::CallStaticDoubleMethodA,\012  JNI::CallStaticVoidMethod,\012  JNI::CallStaticVoidMethodV,\012  JNI::CallStaticVoidMethodA,\012  JNI::GetStaticFieldID,\012  JNI::GetStaticObjectField,\012  JNI::GetStaticBooleanField,\012  JNI::GetStaticByteField,\012  JNI::GetStaticCharField,\012  JNI::GetStaticShortField,\012  JNI::GetStaticIntField,\012  JNI::GetStaticLongField,\012  JNI::GetStaticFloatField,\012  JNI::GetStaticDoubleField,\012  JNI::SetStaticObjectField,\012  JNI::SetStaticBooleanField,\012  JNI::SetStaticByteField,\012  JNI::SetStaticCharField,\012  JNI::SetStaticShortField,\012  JNI::SetStaticIntField,\012  JNI::SetStaticLongField,\012  JNI::SetStaticFloatField,\012  JNI::SetStaticDoubleField,\012  JNI::NewString,\012  JNI::GetStringLength,\012  JNI::GetStringChars,\012  JNI::ReleaseStringChars,\012  JNI::NewStringUTF,\012  JNI::GetStringUTFLength,\012  JNI::GetStringUTFChars,\012  JNI::ReleaseStringUTFChars,\012  JNI::GetArrayLength,\012  JNI::NewObjectArray,\012  JNI::GetObjectArrayElement,\012  JNI::SetObjectArrayElement,\012  JNI::NewBooleanArray,\012  JNI::NewByteArray,\012  JNI::NewCharArray,\012  JNI::NewShortArray,\012  JNI::NewIntArray,\012  JNI::NewLongArray,\012  JNI::NewFloatArray,\012  JNI::NewDoubleArray,\012  JNI::GetBooleanArrayElements,\012  JNI::GetByteArrayElements,\012  JNI::GetCharArrayElements,\012  JNI::GetShortArrayElements,\012  JNI::GetIntArrayElements,\012  JNI::GetLongArrayElements,\012  JNI::GetFloatArrayElements,\012  JNI::GetDoubleArrayElements,\012  JNI::ReleaseBooleanArrayElements,\012  JNI::ReleaseByteArrayElements,\012  JNI::ReleaseCharArrayElements,\012  JNI::ReleaseShortArrayElements,\012  JNI::ReleaseIntArrayElements,\012  JNI::ReleaseLongArrayElements,\012  JNI::ReleaseFloatArrayElements,\012  JNI::ReleaseDoubleArrayElements,\012  JNI::GetBooleanArrayRegion,\012  JNI::GetByteArrayRegion,\012  JNI::GetCharArrayRegion,\012  JNI::GetShortArrayRegion,\012  JNI::GetIntArrayRegion,\012  JNI::GetLongArrayRegion,\012  JNI::GetFloatArrayRegion,\012  JNI::GetDoubleArrayRegion,\012  JNI::SetBooleanArrayRegion,\012  JNI::SetByteArrayRegion,\012  JNI::SetCharArrayRegion,\012  JNI::SetShortArrayRegion,\012  JNI::SetIntArrayRegion,\012  JNI::SetLongArrayRegion,\012  JNI::SetFloatArrayRegion,\012  JNI::SetDoubleArrayRegion,\012  JNI::RegisterNatives,\012  JNI::UnregisterNatives,\012  JNI::MonitorEnter,\012  JNI::MonitorExit,\012  JNI::GetJavaVM,\012  JNI::GetStringRegion,\012  JNI::GetStringUTFRegion,\012  JNI::GetPrimitiveArrayCritical,\012  JNI::ReleasePrimitiveArrayCritical,\012  JNI::GetStringCritical,\012  JNI::ReleaseStringCritical,\012  JNI::NewWeakGlobalRef,\012  JNI::DeleteWeakGlobalRef,\012  JNI::ExceptionCheck,\012  JNI::NewDirectByteBuffer,\012  JNI::GetDirectBufferAddress,\012  JNI::GetDirectBufferCapacity,\012  JNI::GetObjectRefType,\012})<SUB>2883</SUB>> ]
+"14488" [label = <(&lt;operator&gt;.assignment,(*gJniSleepForeverStub[])() = {\012 nullptr, // reserved0.\012 nullptr, // reserved1.\012 nullptr, // reserved2.\012 nullptr, // reserved3.\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012})<SUB>3123</SUB>> ]
+"14764" [label = <(UNKNOWN,},})<SUB>3373</SUB>> ]
+"33" [label = <(&lt;operator&gt;.assignment,kMaxReturnAddressDepth = 4)<SUB>84</SUB>> ]
+"377" [label = <(&lt;operator&gt;.assignment,kWarnJniAbort = false)<SUB>264</SUB>> ]
+"380" [label = <(UNKNOWN,template&lt;typename T&gt;\012ALWAYS_INLINE static bool ShouldDenyAccessToMember(T* member, Thread* self)\012    REQUIRES_SHARED(Locks::mutator_lock_) {\012 if (IsWhitelistedNativeCaller()) {\012 return false;\012 }\012 return hiddenapi::ShouldDenyAccessToMember(\012      member,\012 [&amp;]() REQUIRES_SHARED(Locks::mutator_lock_) {\012 // Construct AccessContext from the first calling class on stack.\012 // If the calling class cannot be determined, e.g. unattached threads,\012 // we conservatively assume the caller is trusted.\012 ObjPtr&lt;mirror::Class&gt; caller = GetCallingClass(self, /* num_frames */ 1);\012 return caller.IsNull() ? hiddenapi::AccessContext(/* is_trusted= */ true)\012 : hiddenapi::AccessContext(caller);\012 },\012      hiddenapi::AccessMethod::kJNI);\012},template&lt;typename T&gt;\012ALWAYS_INLINE static bool ShouldDenyAccessToMember(T* member, Thread* self)\012    REQUIRES_SHARED(Locks::mutator_lock_) {\012 if (IsWhitelistedNativeCaller()) {\012 return false;\012 }\012 return hiddenapi::ShouldDenyAccessToMember(\012      member,\012 [&amp;]() REQUIRES_SHARED(Locks::mutator_lock_) {\012 // Construct AccessContext from the first calling class on stack.\012 // If the calling class cannot be determined, e.g. unattached threads,\012 // we conservatively assume the caller is trusted.\012 ObjPtr&lt;mirror::Class&gt; caller = GetCallingClass(self, /* num_frames */ 1);\012 return caller.IsNull() ? hiddenapi::AccessContext(/* is_trusted= */ true)\012 : hiddenapi::AccessContext(caller);\012 },\012      hiddenapi::AccessMethod::kJNI);\012})<SUB>266</SUB>> ]
+"388" [label = <(UNKNOWN,),))<SUB>288</SUB>> ]
+"389" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012  DCHECK_EQ(field-&gt;GetTypeAsPrimitiveType(), Primitive::kPrimNot);,REQUIRES_SHARED(Locks::mutator_lock_) {\012  DCHECK_EQ(field-&gt;GetTypeAsPrimitiveType(), Primitive::kPrimNot);)<SUB>289</SUB>> ]
+"391" [label = <(&lt;operator&gt;.assignment,* instrumentation = Runtime::Current()-&gt;GetInstrumentation())<SUB>291</SUB>> ]
+"400" [label = <(UNKNOWN,if (UNLIKELY(instrumentation-&gt;HasFieldWriteListeners())) {\012 Thread* self = Thread::Current();\012 ArtMethod* cur_method = self-&gt;GetCurrentMethod(/*dex_pc=*/ nullptr,\012 /*check_suspended=*/ true,\012 /*abort_on_error=*/ false);\012\012 if (cur_method == nullptr) {\012 // Set/Get Fields can be issued without a method during runtime startup/teardown. Ignore all\012 // of these changes.\012 return;\012 }\012    DCHECK(cur_method-&gt;IsNative());\012 JValue val;\012    val.SetL(self-&gt;DecodeJObject(jval));\012    instrumentation-&gt;FieldWriteEvent(self,\012                                     self-&gt;DecodeJObject(obj).Ptr(),\012                                     cur_method,\012 0, // dex_pc is always 0 since this is a native method.\012                                     field,\012                                     val);\012 },if (UNLIKELY(instrumentation-&gt;HasFieldWriteListeners())) {\012 Thread* self = Thread::Current();\012 ArtMethod* cur_method = self-&gt;GetCurrentMethod(/*dex_pc=*/ nullptr,\012 /*check_suspended=*/ true,\012 /*abort_on_error=*/ false);\012\012 if (cur_method == nullptr) {\012 // Set/Get Fields can be issued without a method during runtime startup/teardown. Ignore all\012 // of these changes.\012 return;\012 }\012    DCHECK(cur_method-&gt;IsNative());\012 JValue val;\012    val.SetL(self-&gt;DecodeJObject(jval));\012    instrumentation-&gt;FieldWriteEvent(self,\012                                     self-&gt;DecodeJObject(obj).Ptr(),\012                                     cur_method,\012 0, // dex_pc is always 0 since this is a native method.\012                                     field,\012                                     val);\012 })<SUB>292</SUB>> ]
+"413" [label = <(GetInstrumentation,Runtime::Current()-&gt;GetInstrumentation())<SUB>318</SUB>> ]
+"538" [label = <(NewHandle,hs.NewHandle(klass))<SUB>423</SUB>> ]
+"565" [label = <(GetImagePointerSize,Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize())<SUB>438</SUB>> ]
+"593" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::ClassLoader&gt;(Runtime::Current()-&gt;GetSystemClassLoader()))<SUB>467</SUB>> ]
+"626" [label = <(NewHandle,hs.NewHandle(EnsureInitialized(soa.Self(), soa.Decode&lt;mirror::Class&gt;(jni_class))))<SUB>489</SUB>> ]
+"653" [label = <(GetClassLinker,Runtime::Current()-&gt;GetClassLinker())<SUB>495</SUB>> ]
+"13362" [label = <(GetClassRoot&lt;ArtArrayT&gt;,GetClassRoot&lt;ArtArrayT&gt;())<SUB>2751</SUB>> ]
+"13544" [label = <(GetHeap,Runtime::Current()-&gt;GetHeap())<SUB>2811</SUB>> ]
+"13554" [label = <(&lt;operator&gt;.notEquals,array_data != elements)<SUB>2812</SUB>> ]
+"13560" [label = <(&lt;operator&gt;.multiplication,array-&gt;GetLength() * component_size)<SUB>2813</SUB>> ]
+"13785" [label = <(&lt;operator&gt;.arrayInitializer,{\012 nullptr, // reserved0.\012 nullptr, // reserved1.\012 nullptr, // reserved2.\012 nullptr, // reserved3.\012  JNI::GetVersion,\012  JNI::DefineClass,\012  JNI::FindClass,\012  JNI::FromReflectedMethod,\012  JNI::FromReflectedField,\012  JNI::ToReflectedMethod,\012  JNI::GetSuperclass,\012  JNI::IsAssignableFrom,\012  JNI::ToReflectedField,\012  JNI::Throw,\012  JNI::ThrowNew,\012  JNI::ExceptionOccurred,\012  JNI::ExceptionDescribe,\012  JNI::ExceptionClear,\012  JNI::FatalError,\012  JNI::PushLocalFrame,\012  JNI::PopLocalFrame,\012  JNI::NewGlobalRef,\012  JNI::DeleteGlobalRef,\012  JNI::DeleteLocalRef,\012  JNI::IsSameObject,\012  JNI::NewLocalRef,\012  JNI::EnsureLocalCapacity,\012  JNI::AllocObject,\012  JNI::NewObject,\012  JNI::NewObjectV,\012  JNI::NewObjectA,\012  JNI::GetObjectClass,\012  JNI::IsInstanceOf,\012  JNI::GetMethodID,\012  JNI::CallObjectMethod,\012  JNI::CallObjectMethodV,\012  JNI::CallObjectMethodA,\012  JNI::CallBooleanMethod,\012  JNI::CallBooleanMethodV,\012  JNI::CallBooleanMethodA,\012  JNI::CallByteMethod,\012  JNI::CallByteMethodV,\012  JNI::CallByteMethodA,\012  JNI::CallCharMethod,\012  JNI::CallCharMethodV,\012  JNI::CallCharMethodA,\012  JNI::CallShortMethod,\012  JNI::CallShortMethodV,\012  JNI::CallShortMethodA,\012  JNI::CallIntMethod,\012  JNI::CallIntMethodV,\012  JNI::CallIntMethodA,\012  JNI::CallLongMethod,\012  JNI::CallLongMethodV,\012  JNI::CallLongMethodA,\012  JNI::CallFloatMethod,\012  JNI::CallFloatMethodV,\012  JNI::CallFloatMethodA,\012  JNI::CallDoubleMethod,\012  JNI::CallDoubleMethodV,\012  JNI::CallDoubleMethodA,\012  JNI::CallVoidMethod,\012  JNI::CallVoidMethodV,\012  JNI::CallVoidMethodA,\012  JNI::CallNonvirtualObjectMethod,\012  JNI::CallNonvirtualObjectMethodV,\012  JNI::CallNonvirtualObjectMethodA,\012  JNI::CallNonvirtualBooleanMethod,\012  JNI::CallNonvirtualBooleanMethodV,\012  JNI::CallNonvirtualBooleanMethodA,\012  JNI::CallNonvirtualByteMethod,\012  JNI::CallNonvirtualByteMethodV,\012  JNI::CallNonvirtualByteMethodA,\012  JNI::CallNonvirtualCharMethod,\012  JNI::CallNonvirtualCharMethodV,\012  JNI::CallNonvirtualCharMethodA,\012  JNI::CallNonvirtualShortMethod,\012  JNI::CallNonvirtualShortMethodV,\012  JNI::CallNonvirtualShortMethodA,\012  JNI::CallNonvirtualIntMethod,\012  JNI::CallNonvirtualIntMethodV,\012  JNI::CallNonvirtualIntMethodA,\012  JNI::CallNonvirtualLongMethod,\012  JNI::CallNonvirtualLongMethodV,\012  JNI::CallNonvirtualLongMethodA,\012  JNI::CallNonvirtualFloatMethod,\012  JNI::CallNonvirtualFloatMethodV,\012  JNI::CallNonvirtualFloatMethodA,\012  JNI::CallNonvirtualDoubleMethod,\012  JNI::CallNonvirtualDoubleMethodV,\012  JNI::CallNonvirtualDoubleMethodA,\012  JNI::CallNonvirtualVoidMethod,\012  JNI::CallNonvirtualVoidMethodV,\012  JNI::CallNonvirtualVoidMethodA,\012  JNI::GetFieldID,\012  JNI::GetObjectField,\012  JNI::GetBooleanField,\012  JNI::GetByteField,\012  JNI::GetCharField,\012  JNI::GetShortField,\012  JNI::GetIntField,\012  JNI::GetLongField,\012  JNI::GetFloatField,\012  JNI::GetDoubleField,\012  JNI::SetObjectField,\012  JNI::SetBooleanField,\012  JNI::SetByteField,\012  JNI::SetCharField,\012  JNI::SetShortField,\012  JNI::SetIntField,\012  JNI::SetLongField,\012  JNI::SetFloatField,\012  JNI::SetDoubleField,\012  JNI::GetStaticMethodID,\012  JNI::CallStaticObjectMethod,\012  JNI::CallStaticObjectMethodV,\012  JNI::CallStaticObjectMethodA,\012  JNI::CallStaticBooleanMethod,\012  JNI::CallStaticBooleanMethodV,\012  JNI::CallStaticBooleanMethodA,\012  JNI::CallStaticByteMethod,\012  JNI::CallStaticByteMethodV,\012  JNI::CallStaticByteMethodA,\012  JNI::CallStaticCharMethod,\012  JNI::CallStaticCharMethodV,\012  JNI::CallStaticCharMethodA,\012  JNI::CallStaticShortMethod,\012  JNI::CallStaticShortMethodV,\012  JNI::CallStaticShortMethodA,\012  JNI::CallStaticIntMethod,\012  JNI::CallStaticIntMethodV,\012  JNI::CallStaticIntMethodA,\012  JNI::CallStaticLongMethod,\012  JNI::CallStaticLongMethodV,\012  JNI::CallStaticLongMethodA,\012  JNI::CallStaticFloatMethod,\012  JNI::CallStaticFloatMethodV,\012  JNI::CallStaticFloatMethodA,\012  JNI::CallStaticDoubleMethod,\012  JNI::CallStaticDoubleMethodV,\012  JNI::CallStaticDoubleMethodA,\012  JNI::CallStaticVoidMethod,\012  JNI::CallStaticVoidMethodV,\012  JNI::CallStaticVoidMethodA,\012  JNI::GetStaticFieldID,\012  JNI::GetStaticObjectField,\012  JNI::GetStaticBooleanField,\012  JNI::GetStaticByteField,\012  JNI::GetStaticCharField,\012  JNI::GetStaticShortField,\012  JNI::GetStaticIntField,\012  JNI::GetStaticLongField,\012  JNI::GetStaticFloatField,\012  JNI::GetStaticDoubleField,\012  JNI::SetStaticObjectField,\012  JNI::SetStaticBooleanField,\012  JNI::SetStaticByteField,\012  JNI::SetStaticCharField,\012  JNI::SetStaticShortField,\012  JNI::SetStaticIntField,\012  JNI::SetStaticLongField,\012  JNI::SetStaticFloatField,\012  JNI::SetStaticDoubleField,\012  JNI::NewString,\012  JNI::GetStringLength,\012  JNI::GetStringChars,\012  JNI::ReleaseStringChars,\012  JNI::NewStringUTF,\012  JNI::GetStringUTFLength,\012  JNI::GetStringUTFChars,\012  JNI::ReleaseStringUTFChars,\012  JNI::GetArrayLength,\012  JNI::NewObjectArray,\012  JNI::GetObjectArrayElement,\012  JNI::SetObjectArrayElement,\012  JNI::NewBooleanArray,\012  JNI::NewByteArray,\012  JNI::NewCharArray,\012  JNI::NewShortArray,\012  JNI::NewIntArray,\012  JNI::NewLongArray,\012  JNI::NewFloatArray,\012  JNI::NewDoubleArray,\012  JNI::GetBooleanArrayElements,\012  JNI::GetByteArrayElements,\012  JNI::GetCharArrayElements,\012  JNI::GetShortArrayElements,\012  JNI::GetIntArrayElements,\012  JNI::GetLongArrayElements,\012  JNI::GetFloatArrayElements,\012  JNI::GetDoubleArrayElements,\012  JNI::ReleaseBooleanArrayElements,\012  JNI::ReleaseByteArrayElements,\012  JNI::ReleaseCharArrayElements,\012  JNI::ReleaseShortArrayElements,\012  JNI::ReleaseIntArrayElements,\012  JNI::ReleaseLongArrayElements,\012  JNI::ReleaseFloatArrayElements,\012  JNI::ReleaseDoubleArrayElements,\012  JNI::GetBooleanArrayRegion,\012  JNI::GetByteArrayRegion,\012  JNI::GetCharArrayRegion,\012  JNI::GetShortArrayRegion,\012  JNI::GetIntArrayRegion,\012  JNI::GetLongArrayRegion,\012  JNI::GetFloatArrayRegion,\012  JNI::GetDoubleArrayRegion,\012  JNI::SetBooleanArrayRegion,\012  JNI::SetByteArrayRegion,\012  JNI::SetCharArrayRegion,\012  JNI::SetShortArrayRegion,\012  JNI::SetIntArrayRegion,\012  JNI::SetLongArrayRegion,\012  JNI::SetFloatArrayRegion,\012  JNI::SetDoubleArrayRegion,\012  JNI::RegisterNatives,\012  JNI::UnregisterNatives,\012  JNI::MonitorEnter,\012  JNI::MonitorExit,\012  JNI::GetJavaVM,\012  JNI::GetStringRegion,\012  JNI::GetStringUTFRegion,\012  JNI::GetPrimitiveArrayCritical,\012  JNI::ReleasePrimitiveArrayCritical,\012  JNI::GetStringCritical,\012  JNI::ReleaseStringCritical,\012  JNI::NewWeakGlobalRef,\012  JNI::DeleteWeakGlobalRef,\012  JNI::ExceptionCheck,\012  JNI::NewDirectByteBuffer,\012  JNI::GetDirectBufferAddress,\012  JNI::GetDirectBufferCapacity,\012  JNI::GetObjectRefType,\012})<SUB>2883</SUB>> ]
+"14490" [label = <(&lt;operator&gt;.arrayInitializer,{\012 nullptr, // reserved0.\012 nullptr, // reserved1.\012 nullptr, // reserved2.\012 nullptr, // reserved3.\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012})<SUB>3123</SUB>> ]
+"393" [label = <(GetInstrumentation,Runtime::Current()-&gt;GetInstrumentation())<SUB>291</SUB>> ]
+"414" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetInstrumentation)<SUB>318</SUB>> ]
+"539" [label = <(&lt;operator&gt;.fieldAccess,hs.NewHandle)<SUB>423</SUB>> ]
+"566" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize)<SUB>438</SUB>> ]
+"594" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::ClassLoader)<SUB>467</SUB>> ]
+"601" [label = <(GetSystemClassLoader,Runtime::Current()-&gt;GetSystemClassLoader())<SUB>467</SUB>> ]
+"627" [label = <(&lt;operator&gt;.fieldAccess,hs.NewHandle)<SUB>489</SUB>> ]
+"630" [label = <(EnsureInitialized,EnsureInitialized(soa.Self(), soa.Decode&lt;mirror::Class&gt;(jni_class)))<SUB>489</SUB>> ]
+"654" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetClassLinker)<SUB>495</SUB>> ]
+"13545" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetHeap)<SUB>2811</SUB>> ]
+"13561" [label = <(GetLength,array-&gt;GetLength())<SUB>2813</SUB>> ]
+"13790" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetVersion)<SUB>2888</SUB>> ]
+"13793" [label = <(&lt;operator&gt;.fieldAccess,JNI::DefineClass)<SUB>2889</SUB>> ]
+"13796" [label = <(&lt;operator&gt;.fieldAccess,JNI::FindClass)<SUB>2890</SUB>> ]
+"13799" [label = <(&lt;operator&gt;.fieldAccess,JNI::FromReflectedMethod)<SUB>2891</SUB>> ]
+"13802" [label = <(&lt;operator&gt;.fieldAccess,JNI::FromReflectedField)<SUB>2892</SUB>> ]
+"13805" [label = <(&lt;operator&gt;.fieldAccess,JNI::ToReflectedMethod)<SUB>2893</SUB>> ]
+"13808" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetSuperclass)<SUB>2894</SUB>> ]
+"13811" [label = <(&lt;operator&gt;.fieldAccess,JNI::IsAssignableFrom)<SUB>2895</SUB>> ]
+"13814" [label = <(&lt;operator&gt;.fieldAccess,JNI::ToReflectedField)<SUB>2896</SUB>> ]
+"13817" [label = <(&lt;operator&gt;.fieldAccess,JNI::Throw)<SUB>2897</SUB>> ]
+"13820" [label = <(&lt;operator&gt;.fieldAccess,JNI::ThrowNew)<SUB>2898</SUB>> ]
+"13823" [label = <(&lt;operator&gt;.fieldAccess,JNI::ExceptionOccurred)<SUB>2899</SUB>> ]
+"13826" [label = <(&lt;operator&gt;.fieldAccess,JNI::ExceptionDescribe)<SUB>2900</SUB>> ]
+"13829" [label = <(&lt;operator&gt;.fieldAccess,JNI::ExceptionClear)<SUB>2901</SUB>> ]
+"13832" [label = <(&lt;operator&gt;.fieldAccess,JNI::FatalError)<SUB>2902</SUB>> ]
+"13835" [label = <(&lt;operator&gt;.fieldAccess,JNI::PushLocalFrame)<SUB>2903</SUB>> ]
+"13838" [label = <(&lt;operator&gt;.fieldAccess,JNI::PopLocalFrame)<SUB>2904</SUB>> ]
+"13841" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewGlobalRef)<SUB>2905</SUB>> ]
+"13844" [label = <(&lt;operator&gt;.fieldAccess,JNI::DeleteGlobalRef)<SUB>2906</SUB>> ]
+"13847" [label = <(&lt;operator&gt;.fieldAccess,JNI::DeleteLocalRef)<SUB>2907</SUB>> ]
+"13850" [label = <(&lt;operator&gt;.fieldAccess,JNI::IsSameObject)<SUB>2908</SUB>> ]
+"13853" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewLocalRef)<SUB>2909</SUB>> ]
+"13856" [label = <(&lt;operator&gt;.fieldAccess,JNI::EnsureLocalCapacity)<SUB>2910</SUB>> ]
+"13859" [label = <(&lt;operator&gt;.fieldAccess,JNI::AllocObject)<SUB>2911</SUB>> ]
+"13862" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewObject)<SUB>2912</SUB>> ]
+"13865" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewObjectV)<SUB>2913</SUB>> ]
+"13868" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewObjectA)<SUB>2914</SUB>> ]
+"13871" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetObjectClass)<SUB>2915</SUB>> ]
+"13874" [label = <(&lt;operator&gt;.fieldAccess,JNI::IsInstanceOf)<SUB>2916</SUB>> ]
+"13877" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetMethodID)<SUB>2917</SUB>> ]
+"13880" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallObjectMethod)<SUB>2918</SUB>> ]
+"13883" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallObjectMethodV)<SUB>2919</SUB>> ]
+"13886" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallObjectMethodA)<SUB>2920</SUB>> ]
+"13889" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallBooleanMethod)<SUB>2921</SUB>> ]
+"13892" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallBooleanMethodV)<SUB>2922</SUB>> ]
+"13895" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallBooleanMethodA)<SUB>2923</SUB>> ]
+"13898" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallByteMethod)<SUB>2924</SUB>> ]
+"13901" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallByteMethodV)<SUB>2925</SUB>> ]
+"13904" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallByteMethodA)<SUB>2926</SUB>> ]
+"13907" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallCharMethod)<SUB>2927</SUB>> ]
+"13910" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallCharMethodV)<SUB>2928</SUB>> ]
+"13913" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallCharMethodA)<SUB>2929</SUB>> ]
+"13916" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallShortMethod)<SUB>2930</SUB>> ]
+"13919" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallShortMethodV)<SUB>2931</SUB>> ]
+"13922" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallShortMethodA)<SUB>2932</SUB>> ]
+"13925" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallIntMethod)<SUB>2933</SUB>> ]
+"13928" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallIntMethodV)<SUB>2934</SUB>> ]
+"13931" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallIntMethodA)<SUB>2935</SUB>> ]
+"13934" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallLongMethod)<SUB>2936</SUB>> ]
+"13937" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallLongMethodV)<SUB>2937</SUB>> ]
+"13940" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallLongMethodA)<SUB>2938</SUB>> ]
+"13943" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallFloatMethod)<SUB>2939</SUB>> ]
+"13946" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallFloatMethodV)<SUB>2940</SUB>> ]
+"13949" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallFloatMethodA)<SUB>2941</SUB>> ]
+"13952" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallDoubleMethod)<SUB>2942</SUB>> ]
+"13955" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallDoubleMethodV)<SUB>2943</SUB>> ]
+"13958" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallDoubleMethodA)<SUB>2944</SUB>> ]
+"13961" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallVoidMethod)<SUB>2945</SUB>> ]
+"13964" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallVoidMethodV)<SUB>2946</SUB>> ]
+"13967" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallVoidMethodA)<SUB>2947</SUB>> ]
+"13970" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualObjectMethod)<SUB>2948</SUB>> ]
+"13973" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualObjectMethodV)<SUB>2949</SUB>> ]
+"13976" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualObjectMethodA)<SUB>2950</SUB>> ]
+"13979" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualBooleanMethod)<SUB>2951</SUB>> ]
+"13982" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualBooleanMethodV)<SUB>2952</SUB>> ]
+"13985" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualBooleanMethodA)<SUB>2953</SUB>> ]
+"13988" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualByteMethod)<SUB>2954</SUB>> ]
+"13991" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualByteMethodV)<SUB>2955</SUB>> ]
+"13994" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualByteMethodA)<SUB>2956</SUB>> ]
+"13997" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualCharMethod)<SUB>2957</SUB>> ]
+"14000" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualCharMethodV)<SUB>2958</SUB>> ]
+"14003" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualCharMethodA)<SUB>2959</SUB>> ]
+"14006" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualShortMethod)<SUB>2960</SUB>> ]
+"14009" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualShortMethodV)<SUB>2961</SUB>> ]
+"14012" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualShortMethodA)<SUB>2962</SUB>> ]
+"14015" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualIntMethod)<SUB>2963</SUB>> ]
+"14018" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualIntMethodV)<SUB>2964</SUB>> ]
+"14021" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualIntMethodA)<SUB>2965</SUB>> ]
+"14024" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualLongMethod)<SUB>2966</SUB>> ]
+"14027" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualLongMethodV)<SUB>2967</SUB>> ]
+"14030" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualLongMethodA)<SUB>2968</SUB>> ]
+"14033" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualFloatMethod)<SUB>2969</SUB>> ]
+"14036" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualFloatMethodV)<SUB>2970</SUB>> ]
+"14039" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualFloatMethodA)<SUB>2971</SUB>> ]
+"14042" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualDoubleMethod)<SUB>2972</SUB>> ]
+"14045" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualDoubleMethodV)<SUB>2973</SUB>> ]
+"14048" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualDoubleMethodA)<SUB>2974</SUB>> ]
+"14051" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualVoidMethod)<SUB>2975</SUB>> ]
+"14054" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualVoidMethodV)<SUB>2976</SUB>> ]
+"14057" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualVoidMethodA)<SUB>2977</SUB>> ]
+"14060" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetFieldID)<SUB>2978</SUB>> ]
+"14063" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetObjectField)<SUB>2979</SUB>> ]
+"14066" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetBooleanField)<SUB>2980</SUB>> ]
+"14069" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetByteField)<SUB>2981</SUB>> ]
+"14072" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetCharField)<SUB>2982</SUB>> ]
+"14075" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetShortField)<SUB>2983</SUB>> ]
+"14078" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetIntField)<SUB>2984</SUB>> ]
+"14081" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetLongField)<SUB>2985</SUB>> ]
+"14084" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetFloatField)<SUB>2986</SUB>> ]
+"14087" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetDoubleField)<SUB>2987</SUB>> ]
+"14090" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetObjectField)<SUB>2988</SUB>> ]
+"14093" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetBooleanField)<SUB>2989</SUB>> ]
+"14096" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetByteField)<SUB>2990</SUB>> ]
+"14099" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetCharField)<SUB>2991</SUB>> ]
+"14102" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetShortField)<SUB>2992</SUB>> ]
+"14105" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetIntField)<SUB>2993</SUB>> ]
+"14108" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetLongField)<SUB>2994</SUB>> ]
+"14111" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetFloatField)<SUB>2995</SUB>> ]
+"14114" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetDoubleField)<SUB>2996</SUB>> ]
+"14117" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStaticMethodID)<SUB>2997</SUB>> ]
+"14120" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticObjectMethod)<SUB>2998</SUB>> ]
+"14123" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticObjectMethodV)<SUB>2999</SUB>> ]
+"14126" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticObjectMethodA)<SUB>3000</SUB>> ]
+"14129" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticBooleanMethod)<SUB>3001</SUB>> ]
+"14132" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticBooleanMethodV)<SUB>3002</SUB>> ]
+"14135" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticBooleanMethodA)<SUB>3003</SUB>> ]
+"14138" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticByteMethod)<SUB>3004</SUB>> ]
+"14141" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticByteMethodV)<SUB>3005</SUB>> ]
+"14144" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticByteMethodA)<SUB>3006</SUB>> ]
+"14147" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticCharMethod)<SUB>3007</SUB>> ]
+"14150" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticCharMethodV)<SUB>3008</SUB>> ]
+"14153" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticCharMethodA)<SUB>3009</SUB>> ]
+"14156" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticShortMethod)<SUB>3010</SUB>> ]
+"14159" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticShortMethodV)<SUB>3011</SUB>> ]
+"14162" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticShortMethodA)<SUB>3012</SUB>> ]
+"14165" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticIntMethod)<SUB>3013</SUB>> ]
+"14168" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticIntMethodV)<SUB>3014</SUB>> ]
+"14171" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticIntMethodA)<SUB>3015</SUB>> ]
+"14174" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticLongMethod)<SUB>3016</SUB>> ]
+"14177" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticLongMethodV)<SUB>3017</SUB>> ]
+"14180" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticLongMethodA)<SUB>3018</SUB>> ]
+"14183" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticFloatMethod)<SUB>3019</SUB>> ]
+"14186" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticFloatMethodV)<SUB>3020</SUB>> ]
+"14189" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticFloatMethodA)<SUB>3021</SUB>> ]
+"14192" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticDoubleMethod)<SUB>3022</SUB>> ]
+"14195" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticDoubleMethodV)<SUB>3023</SUB>> ]
+"14198" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticDoubleMethodA)<SUB>3024</SUB>> ]
+"14201" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticVoidMethod)<SUB>3025</SUB>> ]
+"14204" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticVoidMethodV)<SUB>3026</SUB>> ]
+"14207" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticVoidMethodA)<SUB>3027</SUB>> ]
+"14210" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStaticFieldID)<SUB>3028</SUB>> ]
+"14213" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStaticObjectField)<SUB>3029</SUB>> ]
+"14216" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStaticBooleanField)<SUB>3030</SUB>> ]
+"14219" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStaticByteField)<SUB>3031</SUB>> ]
+"14222" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStaticCharField)<SUB>3032</SUB>> ]
+"14225" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStaticShortField)<SUB>3033</SUB>> ]
+"14228" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStaticIntField)<SUB>3034</SUB>> ]
+"14231" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStaticLongField)<SUB>3035</SUB>> ]
+"14234" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStaticFloatField)<SUB>3036</SUB>> ]
+"14237" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStaticDoubleField)<SUB>3037</SUB>> ]
+"14240" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetStaticObjectField)<SUB>3038</SUB>> ]
+"14243" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetStaticBooleanField)<SUB>3039</SUB>> ]
+"14246" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetStaticByteField)<SUB>3040</SUB>> ]
+"14249" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetStaticCharField)<SUB>3041</SUB>> ]
+"14252" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetStaticShortField)<SUB>3042</SUB>> ]
+"14255" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetStaticIntField)<SUB>3043</SUB>> ]
+"14258" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetStaticLongField)<SUB>3044</SUB>> ]
+"14261" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetStaticFloatField)<SUB>3045</SUB>> ]
+"14264" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetStaticDoubleField)<SUB>3046</SUB>> ]
+"14267" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewString)<SUB>3047</SUB>> ]
+"14270" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStringLength)<SUB>3048</SUB>> ]
+"14273" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStringChars)<SUB>3049</SUB>> ]
+"14276" [label = <(&lt;operator&gt;.fieldAccess,JNI::ReleaseStringChars)<SUB>3050</SUB>> ]
+"14279" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewStringUTF)<SUB>3051</SUB>> ]
+"14282" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStringUTFLength)<SUB>3052</SUB>> ]
+"14285" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStringUTFChars)<SUB>3053</SUB>> ]
+"14288" [label = <(&lt;operator&gt;.fieldAccess,JNI::ReleaseStringUTFChars)<SUB>3054</SUB>> ]
+"14291" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetArrayLength)<SUB>3055</SUB>> ]
+"14294" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewObjectArray)<SUB>3056</SUB>> ]
+"14297" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetObjectArrayElement)<SUB>3057</SUB>> ]
+"14300" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetObjectArrayElement)<SUB>3058</SUB>> ]
+"14303" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewBooleanArray)<SUB>3059</SUB>> ]
+"14306" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewByteArray)<SUB>3060</SUB>> ]
+"14309" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewCharArray)<SUB>3061</SUB>> ]
+"14312" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewShortArray)<SUB>3062</SUB>> ]
+"14315" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewIntArray)<SUB>3063</SUB>> ]
+"14318" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewLongArray)<SUB>3064</SUB>> ]
+"14321" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewFloatArray)<SUB>3065</SUB>> ]
+"14324" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewDoubleArray)<SUB>3066</SUB>> ]
+"14327" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetBooleanArrayElements)<SUB>3067</SUB>> ]
+"14330" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetByteArrayElements)<SUB>3068</SUB>> ]
+"14333" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetCharArrayElements)<SUB>3069</SUB>> ]
+"14336" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetShortArrayElements)<SUB>3070</SUB>> ]
+"14339" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetIntArrayElements)<SUB>3071</SUB>> ]
+"14342" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetLongArrayElements)<SUB>3072</SUB>> ]
+"14345" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetFloatArrayElements)<SUB>3073</SUB>> ]
+"14348" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetDoubleArrayElements)<SUB>3074</SUB>> ]
+"14351" [label = <(&lt;operator&gt;.fieldAccess,JNI::ReleaseBooleanArrayElements)<SUB>3075</SUB>> ]
+"14354" [label = <(&lt;operator&gt;.fieldAccess,JNI::ReleaseByteArrayElements)<SUB>3076</SUB>> ]
+"14357" [label = <(&lt;operator&gt;.fieldAccess,JNI::ReleaseCharArrayElements)<SUB>3077</SUB>> ]
+"14360" [label = <(&lt;operator&gt;.fieldAccess,JNI::ReleaseShortArrayElements)<SUB>3078</SUB>> ]
+"14363" [label = <(&lt;operator&gt;.fieldAccess,JNI::ReleaseIntArrayElements)<SUB>3079</SUB>> ]
+"14366" [label = <(&lt;operator&gt;.fieldAccess,JNI::ReleaseLongArrayElements)<SUB>3080</SUB>> ]
+"14369" [label = <(&lt;operator&gt;.fieldAccess,JNI::ReleaseFloatArrayElements)<SUB>3081</SUB>> ]
+"14372" [label = <(&lt;operator&gt;.fieldAccess,JNI::ReleaseDoubleArrayElements)<SUB>3082</SUB>> ]
+"14375" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetBooleanArrayRegion)<SUB>3083</SUB>> ]
+"14378" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetByteArrayRegion)<SUB>3084</SUB>> ]
+"14381" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetCharArrayRegion)<SUB>3085</SUB>> ]
+"14384" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetShortArrayRegion)<SUB>3086</SUB>> ]
+"14387" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetIntArrayRegion)<SUB>3087</SUB>> ]
+"14390" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetLongArrayRegion)<SUB>3088</SUB>> ]
+"14393" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetFloatArrayRegion)<SUB>3089</SUB>> ]
+"14396" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetDoubleArrayRegion)<SUB>3090</SUB>> ]
+"14399" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetBooleanArrayRegion)<SUB>3091</SUB>> ]
+"14402" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetByteArrayRegion)<SUB>3092</SUB>> ]
+"14405" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetCharArrayRegion)<SUB>3093</SUB>> ]
+"14408" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetShortArrayRegion)<SUB>3094</SUB>> ]
+"14411" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetIntArrayRegion)<SUB>3095</SUB>> ]
+"14414" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetLongArrayRegion)<SUB>3096</SUB>> ]
+"14417" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetFloatArrayRegion)<SUB>3097</SUB>> ]
+"14420" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetDoubleArrayRegion)<SUB>3098</SUB>> ]
+"14423" [label = <(&lt;operator&gt;.fieldAccess,JNI::RegisterNatives)<SUB>3099</SUB>> ]
+"14426" [label = <(&lt;operator&gt;.fieldAccess,JNI::UnregisterNatives)<SUB>3100</SUB>> ]
+"14429" [label = <(&lt;operator&gt;.fieldAccess,JNI::MonitorEnter)<SUB>3101</SUB>> ]
+"14432" [label = <(&lt;operator&gt;.fieldAccess,JNI::MonitorExit)<SUB>3102</SUB>> ]
+"14435" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetJavaVM)<SUB>3103</SUB>> ]
+"14438" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStringRegion)<SUB>3104</SUB>> ]
+"14441" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStringUTFRegion)<SUB>3105</SUB>> ]
+"14444" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetPrimitiveArrayCritical)<SUB>3106</SUB>> ]
+"14447" [label = <(&lt;operator&gt;.fieldAccess,JNI::ReleasePrimitiveArrayCritical)<SUB>3107</SUB>> ]
+"14450" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStringCritical)<SUB>3108</SUB>> ]
+"14453" [label = <(&lt;operator&gt;.fieldAccess,JNI::ReleaseStringCritical)<SUB>3109</SUB>> ]
+"14456" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewWeakGlobalRef)<SUB>3110</SUB>> ]
+"14459" [label = <(&lt;operator&gt;.fieldAccess,JNI::DeleteWeakGlobalRef)<SUB>3111</SUB>> ]
+"14462" [label = <(&lt;operator&gt;.fieldAccess,JNI::ExceptionCheck)<SUB>3112</SUB>> ]
+"14465" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewDirectByteBuffer)<SUB>3113</SUB>> ]
+"14468" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetDirectBufferAddress)<SUB>3114</SUB>> ]
+"14471" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetDirectBufferCapacity)<SUB>3115</SUB>> ]
+"14474" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetObjectRefType)<SUB>3116</SUB>> ]
+"394" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetInstrumentation)<SUB>291</SUB>> ]
+"415" [label = <(Runtime::Current,Runtime::Current())<SUB>318</SUB>> ]
+"419" [label = <(FIELD_IDENTIFIER,GetInstrumentation,GetInstrumentation)<SUB>318</SUB>> ]
+"541" [label = <(FIELD_IDENTIFIER,NewHandle,NewHandle)<SUB>423</SUB>> ]
+"567" [label = <(GetClassLinker,Runtime::Current()-&gt;GetClassLinker())<SUB>438</SUB>> ]
+"574" [label = <(FIELD_IDENTIFIER,GetImagePointerSize,GetImagePointerSize)<SUB>438</SUB>> ]
+"595" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>467</SUB>> ]
+"598" [label = <(&lt;operator&gt;.fieldAccess,mirror::ClassLoader)<SUB>467</SUB>> ]
+"602" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetSystemClassLoader)<SUB>467</SUB>> ]
+"629" [label = <(FIELD_IDENTIFIER,NewHandle,NewHandle)<SUB>489</SUB>> ]
+"631" [label = <(Self,soa.Self())<SUB>489</SUB>> ]
+"635" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(jni_class))<SUB>489</SUB>> ]
+"655" [label = <(Runtime::Current,Runtime::Current())<SUB>495</SUB>> ]
+"659" [label = <(FIELD_IDENTIFIER,GetClassLinker,GetClassLinker)<SUB>495</SUB>> ]
+"13546" [label = <(Runtime::Current,Runtime::Current())<SUB>2811</SUB>> ]
+"13550" [label = <(FIELD_IDENTIFIER,GetHeap,GetHeap)<SUB>2811</SUB>> ]
+"13562" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetLength)<SUB>2813</SUB>> ]
+"13792" [label = <(FIELD_IDENTIFIER,GetVersion,GetVersion)<SUB>2888</SUB>> ]
+"13795" [label = <(FIELD_IDENTIFIER,DefineClass,DefineClass)<SUB>2889</SUB>> ]
+"13798" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>2890</SUB>> ]
+"13801" [label = <(FIELD_IDENTIFIER,FromReflectedMethod,FromReflectedMethod)<SUB>2891</SUB>> ]
+"13804" [label = <(FIELD_IDENTIFIER,FromReflectedField,FromReflectedField)<SUB>2892</SUB>> ]
+"13807" [label = <(FIELD_IDENTIFIER,ToReflectedMethod,ToReflectedMethod)<SUB>2893</SUB>> ]
+"13810" [label = <(FIELD_IDENTIFIER,GetSuperclass,GetSuperclass)<SUB>2894</SUB>> ]
+"13813" [label = <(FIELD_IDENTIFIER,IsAssignableFrom,IsAssignableFrom)<SUB>2895</SUB>> ]
+"13816" [label = <(FIELD_IDENTIFIER,ToReflectedField,ToReflectedField)<SUB>2896</SUB>> ]
+"13819" [label = <(FIELD_IDENTIFIER,Throw,Throw)<SUB>2897</SUB>> ]
+"13822" [label = <(FIELD_IDENTIFIER,ThrowNew,ThrowNew)<SUB>2898</SUB>> ]
+"13825" [label = <(FIELD_IDENTIFIER,ExceptionOccurred,ExceptionOccurred)<SUB>2899</SUB>> ]
+"13828" [label = <(FIELD_IDENTIFIER,ExceptionDescribe,ExceptionDescribe)<SUB>2900</SUB>> ]
+"13831" [label = <(FIELD_IDENTIFIER,ExceptionClear,ExceptionClear)<SUB>2901</SUB>> ]
+"13834" [label = <(FIELD_IDENTIFIER,FatalError,FatalError)<SUB>2902</SUB>> ]
+"13837" [label = <(FIELD_IDENTIFIER,PushLocalFrame,PushLocalFrame)<SUB>2903</SUB>> ]
+"13840" [label = <(FIELD_IDENTIFIER,PopLocalFrame,PopLocalFrame)<SUB>2904</SUB>> ]
+"13843" [label = <(FIELD_IDENTIFIER,NewGlobalRef,NewGlobalRef)<SUB>2905</SUB>> ]
+"13846" [label = <(FIELD_IDENTIFIER,DeleteGlobalRef,DeleteGlobalRef)<SUB>2906</SUB>> ]
+"13849" [label = <(FIELD_IDENTIFIER,DeleteLocalRef,DeleteLocalRef)<SUB>2907</SUB>> ]
+"13852" [label = <(FIELD_IDENTIFIER,IsSameObject,IsSameObject)<SUB>2908</SUB>> ]
+"13855" [label = <(FIELD_IDENTIFIER,NewLocalRef,NewLocalRef)<SUB>2909</SUB>> ]
+"13858" [label = <(FIELD_IDENTIFIER,EnsureLocalCapacity,EnsureLocalCapacity)<SUB>2910</SUB>> ]
+"13861" [label = <(FIELD_IDENTIFIER,AllocObject,AllocObject)<SUB>2911</SUB>> ]
+"13864" [label = <(FIELD_IDENTIFIER,NewObject,NewObject)<SUB>2912</SUB>> ]
+"13867" [label = <(FIELD_IDENTIFIER,NewObjectV,NewObjectV)<SUB>2913</SUB>> ]
+"13870" [label = <(FIELD_IDENTIFIER,NewObjectA,NewObjectA)<SUB>2914</SUB>> ]
+"13873" [label = <(FIELD_IDENTIFIER,GetObjectClass,GetObjectClass)<SUB>2915</SUB>> ]
+"13876" [label = <(FIELD_IDENTIFIER,IsInstanceOf,IsInstanceOf)<SUB>2916</SUB>> ]
+"13879" [label = <(FIELD_IDENTIFIER,GetMethodID,GetMethodID)<SUB>2917</SUB>> ]
+"13882" [label = <(FIELD_IDENTIFIER,CallObjectMethod,CallObjectMethod)<SUB>2918</SUB>> ]
+"13885" [label = <(FIELD_IDENTIFIER,CallObjectMethodV,CallObjectMethodV)<SUB>2919</SUB>> ]
+"13888" [label = <(FIELD_IDENTIFIER,CallObjectMethodA,CallObjectMethodA)<SUB>2920</SUB>> ]
+"13891" [label = <(FIELD_IDENTIFIER,CallBooleanMethod,CallBooleanMethod)<SUB>2921</SUB>> ]
+"13894" [label = <(FIELD_IDENTIFIER,CallBooleanMethodV,CallBooleanMethodV)<SUB>2922</SUB>> ]
+"13897" [label = <(FIELD_IDENTIFIER,CallBooleanMethodA,CallBooleanMethodA)<SUB>2923</SUB>> ]
+"13900" [label = <(FIELD_IDENTIFIER,CallByteMethod,CallByteMethod)<SUB>2924</SUB>> ]
+"13903" [label = <(FIELD_IDENTIFIER,CallByteMethodV,CallByteMethodV)<SUB>2925</SUB>> ]
+"13906" [label = <(FIELD_IDENTIFIER,CallByteMethodA,CallByteMethodA)<SUB>2926</SUB>> ]
+"13909" [label = <(FIELD_IDENTIFIER,CallCharMethod,CallCharMethod)<SUB>2927</SUB>> ]
+"13912" [label = <(FIELD_IDENTIFIER,CallCharMethodV,CallCharMethodV)<SUB>2928</SUB>> ]
+"13915" [label = <(FIELD_IDENTIFIER,CallCharMethodA,CallCharMethodA)<SUB>2929</SUB>> ]
+"13918" [label = <(FIELD_IDENTIFIER,CallShortMethod,CallShortMethod)<SUB>2930</SUB>> ]
+"13921" [label = <(FIELD_IDENTIFIER,CallShortMethodV,CallShortMethodV)<SUB>2931</SUB>> ]
+"13924" [label = <(FIELD_IDENTIFIER,CallShortMethodA,CallShortMethodA)<SUB>2932</SUB>> ]
+"13927" [label = <(FIELD_IDENTIFIER,CallIntMethod,CallIntMethod)<SUB>2933</SUB>> ]
+"13930" [label = <(FIELD_IDENTIFIER,CallIntMethodV,CallIntMethodV)<SUB>2934</SUB>> ]
+"13933" [label = <(FIELD_IDENTIFIER,CallIntMethodA,CallIntMethodA)<SUB>2935</SUB>> ]
+"13936" [label = <(FIELD_IDENTIFIER,CallLongMethod,CallLongMethod)<SUB>2936</SUB>> ]
+"13939" [label = <(FIELD_IDENTIFIER,CallLongMethodV,CallLongMethodV)<SUB>2937</SUB>> ]
+"13942" [label = <(FIELD_IDENTIFIER,CallLongMethodA,CallLongMethodA)<SUB>2938</SUB>> ]
+"13945" [label = <(FIELD_IDENTIFIER,CallFloatMethod,CallFloatMethod)<SUB>2939</SUB>> ]
+"13948" [label = <(FIELD_IDENTIFIER,CallFloatMethodV,CallFloatMethodV)<SUB>2940</SUB>> ]
+"13951" [label = <(FIELD_IDENTIFIER,CallFloatMethodA,CallFloatMethodA)<SUB>2941</SUB>> ]
+"13954" [label = <(FIELD_IDENTIFIER,CallDoubleMethod,CallDoubleMethod)<SUB>2942</SUB>> ]
+"13957" [label = <(FIELD_IDENTIFIER,CallDoubleMethodV,CallDoubleMethodV)<SUB>2943</SUB>> ]
+"13960" [label = <(FIELD_IDENTIFIER,CallDoubleMethodA,CallDoubleMethodA)<SUB>2944</SUB>> ]
+"13963" [label = <(FIELD_IDENTIFIER,CallVoidMethod,CallVoidMethod)<SUB>2945</SUB>> ]
+"13966" [label = <(FIELD_IDENTIFIER,CallVoidMethodV,CallVoidMethodV)<SUB>2946</SUB>> ]
+"13969" [label = <(FIELD_IDENTIFIER,CallVoidMethodA,CallVoidMethodA)<SUB>2947</SUB>> ]
+"13972" [label = <(FIELD_IDENTIFIER,CallNonvirtualObjectMethod,CallNonvirtualObjectMethod)<SUB>2948</SUB>> ]
+"13975" [label = <(FIELD_IDENTIFIER,CallNonvirtualObjectMethodV,CallNonvirtualObjectMethodV)<SUB>2949</SUB>> ]
+"13978" [label = <(FIELD_IDENTIFIER,CallNonvirtualObjectMethodA,CallNonvirtualObjectMethodA)<SUB>2950</SUB>> ]
+"13981" [label = <(FIELD_IDENTIFIER,CallNonvirtualBooleanMethod,CallNonvirtualBooleanMethod)<SUB>2951</SUB>> ]
+"13984" [label = <(FIELD_IDENTIFIER,CallNonvirtualBooleanMethodV,CallNonvirtualBooleanMethodV)<SUB>2952</SUB>> ]
+"13987" [label = <(FIELD_IDENTIFIER,CallNonvirtualBooleanMethodA,CallNonvirtualBooleanMethodA)<SUB>2953</SUB>> ]
+"13990" [label = <(FIELD_IDENTIFIER,CallNonvirtualByteMethod,CallNonvirtualByteMethod)<SUB>2954</SUB>> ]
+"13993" [label = <(FIELD_IDENTIFIER,CallNonvirtualByteMethodV,CallNonvirtualByteMethodV)<SUB>2955</SUB>> ]
+"13996" [label = <(FIELD_IDENTIFIER,CallNonvirtualByteMethodA,CallNonvirtualByteMethodA)<SUB>2956</SUB>> ]
+"13999" [label = <(FIELD_IDENTIFIER,CallNonvirtualCharMethod,CallNonvirtualCharMethod)<SUB>2957</SUB>> ]
+"14002" [label = <(FIELD_IDENTIFIER,CallNonvirtualCharMethodV,CallNonvirtualCharMethodV)<SUB>2958</SUB>> ]
+"14005" [label = <(FIELD_IDENTIFIER,CallNonvirtualCharMethodA,CallNonvirtualCharMethodA)<SUB>2959</SUB>> ]
+"14008" [label = <(FIELD_IDENTIFIER,CallNonvirtualShortMethod,CallNonvirtualShortMethod)<SUB>2960</SUB>> ]
+"14011" [label = <(FIELD_IDENTIFIER,CallNonvirtualShortMethodV,CallNonvirtualShortMethodV)<SUB>2961</SUB>> ]
+"14014" [label = <(FIELD_IDENTIFIER,CallNonvirtualShortMethodA,CallNonvirtualShortMethodA)<SUB>2962</SUB>> ]
+"14017" [label = <(FIELD_IDENTIFIER,CallNonvirtualIntMethod,CallNonvirtualIntMethod)<SUB>2963</SUB>> ]
+"14020" [label = <(FIELD_IDENTIFIER,CallNonvirtualIntMethodV,CallNonvirtualIntMethodV)<SUB>2964</SUB>> ]
+"14023" [label = <(FIELD_IDENTIFIER,CallNonvirtualIntMethodA,CallNonvirtualIntMethodA)<SUB>2965</SUB>> ]
+"14026" [label = <(FIELD_IDENTIFIER,CallNonvirtualLongMethod,CallNonvirtualLongMethod)<SUB>2966</SUB>> ]
+"14029" [label = <(FIELD_IDENTIFIER,CallNonvirtualLongMethodV,CallNonvirtualLongMethodV)<SUB>2967</SUB>> ]
+"14032" [label = <(FIELD_IDENTIFIER,CallNonvirtualLongMethodA,CallNonvirtualLongMethodA)<SUB>2968</SUB>> ]
+"14035" [label = <(FIELD_IDENTIFIER,CallNonvirtualFloatMethod,CallNonvirtualFloatMethod)<SUB>2969</SUB>> ]
+"14038" [label = <(FIELD_IDENTIFIER,CallNonvirtualFloatMethodV,CallNonvirtualFloatMethodV)<SUB>2970</SUB>> ]
+"14041" [label = <(FIELD_IDENTIFIER,CallNonvirtualFloatMethodA,CallNonvirtualFloatMethodA)<SUB>2971</SUB>> ]
+"14044" [label = <(FIELD_IDENTIFIER,CallNonvirtualDoubleMethod,CallNonvirtualDoubleMethod)<SUB>2972</SUB>> ]
+"14047" [label = <(FIELD_IDENTIFIER,CallNonvirtualDoubleMethodV,CallNonvirtualDoubleMethodV)<SUB>2973</SUB>> ]
+"14050" [label = <(FIELD_IDENTIFIER,CallNonvirtualDoubleMethodA,CallNonvirtualDoubleMethodA)<SUB>2974</SUB>> ]
+"14053" [label = <(FIELD_IDENTIFIER,CallNonvirtualVoidMethod,CallNonvirtualVoidMethod)<SUB>2975</SUB>> ]
+"14056" [label = <(FIELD_IDENTIFIER,CallNonvirtualVoidMethodV,CallNonvirtualVoidMethodV)<SUB>2976</SUB>> ]
+"14059" [label = <(FIELD_IDENTIFIER,CallNonvirtualVoidMethodA,CallNonvirtualVoidMethodA)<SUB>2977</SUB>> ]
+"14062" [label = <(FIELD_IDENTIFIER,GetFieldID,GetFieldID)<SUB>2978</SUB>> ]
+"14065" [label = <(FIELD_IDENTIFIER,GetObjectField,GetObjectField)<SUB>2979</SUB>> ]
+"14068" [label = <(FIELD_IDENTIFIER,GetBooleanField,GetBooleanField)<SUB>2980</SUB>> ]
+"14071" [label = <(FIELD_IDENTIFIER,GetByteField,GetByteField)<SUB>2981</SUB>> ]
+"14074" [label = <(FIELD_IDENTIFIER,GetCharField,GetCharField)<SUB>2982</SUB>> ]
+"14077" [label = <(FIELD_IDENTIFIER,GetShortField,GetShortField)<SUB>2983</SUB>> ]
+"14080" [label = <(FIELD_IDENTIFIER,GetIntField,GetIntField)<SUB>2984</SUB>> ]
+"14083" [label = <(FIELD_IDENTIFIER,GetLongField,GetLongField)<SUB>2985</SUB>> ]
+"14086" [label = <(FIELD_IDENTIFIER,GetFloatField,GetFloatField)<SUB>2986</SUB>> ]
+"14089" [label = <(FIELD_IDENTIFIER,GetDoubleField,GetDoubleField)<SUB>2987</SUB>> ]
+"14092" [label = <(FIELD_IDENTIFIER,SetObjectField,SetObjectField)<SUB>2988</SUB>> ]
+"14095" [label = <(FIELD_IDENTIFIER,SetBooleanField,SetBooleanField)<SUB>2989</SUB>> ]
+"14098" [label = <(FIELD_IDENTIFIER,SetByteField,SetByteField)<SUB>2990</SUB>> ]
+"14101" [label = <(FIELD_IDENTIFIER,SetCharField,SetCharField)<SUB>2991</SUB>> ]
+"14104" [label = <(FIELD_IDENTIFIER,SetShortField,SetShortField)<SUB>2992</SUB>> ]
+"14107" [label = <(FIELD_IDENTIFIER,SetIntField,SetIntField)<SUB>2993</SUB>> ]
+"14110" [label = <(FIELD_IDENTIFIER,SetLongField,SetLongField)<SUB>2994</SUB>> ]
+"14113" [label = <(FIELD_IDENTIFIER,SetFloatField,SetFloatField)<SUB>2995</SUB>> ]
+"14116" [label = <(FIELD_IDENTIFIER,SetDoubleField,SetDoubleField)<SUB>2996</SUB>> ]
+"14119" [label = <(FIELD_IDENTIFIER,GetStaticMethodID,GetStaticMethodID)<SUB>2997</SUB>> ]
+"14122" [label = <(FIELD_IDENTIFIER,CallStaticObjectMethod,CallStaticObjectMethod)<SUB>2998</SUB>> ]
+"14125" [label = <(FIELD_IDENTIFIER,CallStaticObjectMethodV,CallStaticObjectMethodV)<SUB>2999</SUB>> ]
+"14128" [label = <(FIELD_IDENTIFIER,CallStaticObjectMethodA,CallStaticObjectMethodA)<SUB>3000</SUB>> ]
+"14131" [label = <(FIELD_IDENTIFIER,CallStaticBooleanMethod,CallStaticBooleanMethod)<SUB>3001</SUB>> ]
+"14134" [label = <(FIELD_IDENTIFIER,CallStaticBooleanMethodV,CallStaticBooleanMethodV)<SUB>3002</SUB>> ]
+"14137" [label = <(FIELD_IDENTIFIER,CallStaticBooleanMethodA,CallStaticBooleanMethodA)<SUB>3003</SUB>> ]
+"14140" [label = <(FIELD_IDENTIFIER,CallStaticByteMethod,CallStaticByteMethod)<SUB>3004</SUB>> ]
+"14143" [label = <(FIELD_IDENTIFIER,CallStaticByteMethodV,CallStaticByteMethodV)<SUB>3005</SUB>> ]
+"14146" [label = <(FIELD_IDENTIFIER,CallStaticByteMethodA,CallStaticByteMethodA)<SUB>3006</SUB>> ]
+"14149" [label = <(FIELD_IDENTIFIER,CallStaticCharMethod,CallStaticCharMethod)<SUB>3007</SUB>> ]
+"14152" [label = <(FIELD_IDENTIFIER,CallStaticCharMethodV,CallStaticCharMethodV)<SUB>3008</SUB>> ]
+"14155" [label = <(FIELD_IDENTIFIER,CallStaticCharMethodA,CallStaticCharMethodA)<SUB>3009</SUB>> ]
+"14158" [label = <(FIELD_IDENTIFIER,CallStaticShortMethod,CallStaticShortMethod)<SUB>3010</SUB>> ]
+"14161" [label = <(FIELD_IDENTIFIER,CallStaticShortMethodV,CallStaticShortMethodV)<SUB>3011</SUB>> ]
+"14164" [label = <(FIELD_IDENTIFIER,CallStaticShortMethodA,CallStaticShortMethodA)<SUB>3012</SUB>> ]
+"14167" [label = <(FIELD_IDENTIFIER,CallStaticIntMethod,CallStaticIntMethod)<SUB>3013</SUB>> ]
+"14170" [label = <(FIELD_IDENTIFIER,CallStaticIntMethodV,CallStaticIntMethodV)<SUB>3014</SUB>> ]
+"14173" [label = <(FIELD_IDENTIFIER,CallStaticIntMethodA,CallStaticIntMethodA)<SUB>3015</SUB>> ]
+"14176" [label = <(FIELD_IDENTIFIER,CallStaticLongMethod,CallStaticLongMethod)<SUB>3016</SUB>> ]
+"14179" [label = <(FIELD_IDENTIFIER,CallStaticLongMethodV,CallStaticLongMethodV)<SUB>3017</SUB>> ]
+"14182" [label = <(FIELD_IDENTIFIER,CallStaticLongMethodA,CallStaticLongMethodA)<SUB>3018</SUB>> ]
+"14185" [label = <(FIELD_IDENTIFIER,CallStaticFloatMethod,CallStaticFloatMethod)<SUB>3019</SUB>> ]
+"14188" [label = <(FIELD_IDENTIFIER,CallStaticFloatMethodV,CallStaticFloatMethodV)<SUB>3020</SUB>> ]
+"14191" [label = <(FIELD_IDENTIFIER,CallStaticFloatMethodA,CallStaticFloatMethodA)<SUB>3021</SUB>> ]
+"14194" [label = <(FIELD_IDENTIFIER,CallStaticDoubleMethod,CallStaticDoubleMethod)<SUB>3022</SUB>> ]
+"14197" [label = <(FIELD_IDENTIFIER,CallStaticDoubleMethodV,CallStaticDoubleMethodV)<SUB>3023</SUB>> ]
+"14200" [label = <(FIELD_IDENTIFIER,CallStaticDoubleMethodA,CallStaticDoubleMethodA)<SUB>3024</SUB>> ]
+"14203" [label = <(FIELD_IDENTIFIER,CallStaticVoidMethod,CallStaticVoidMethod)<SUB>3025</SUB>> ]
+"14206" [label = <(FIELD_IDENTIFIER,CallStaticVoidMethodV,CallStaticVoidMethodV)<SUB>3026</SUB>> ]
+"14209" [label = <(FIELD_IDENTIFIER,CallStaticVoidMethodA,CallStaticVoidMethodA)<SUB>3027</SUB>> ]
+"14212" [label = <(FIELD_IDENTIFIER,GetStaticFieldID,GetStaticFieldID)<SUB>3028</SUB>> ]
+"14215" [label = <(FIELD_IDENTIFIER,GetStaticObjectField,GetStaticObjectField)<SUB>3029</SUB>> ]
+"14218" [label = <(FIELD_IDENTIFIER,GetStaticBooleanField,GetStaticBooleanField)<SUB>3030</SUB>> ]
+"14221" [label = <(FIELD_IDENTIFIER,GetStaticByteField,GetStaticByteField)<SUB>3031</SUB>> ]
+"14224" [label = <(FIELD_IDENTIFIER,GetStaticCharField,GetStaticCharField)<SUB>3032</SUB>> ]
+"14227" [label = <(FIELD_IDENTIFIER,GetStaticShortField,GetStaticShortField)<SUB>3033</SUB>> ]
+"14230" [label = <(FIELD_IDENTIFIER,GetStaticIntField,GetStaticIntField)<SUB>3034</SUB>> ]
+"14233" [label = <(FIELD_IDENTIFIER,GetStaticLongField,GetStaticLongField)<SUB>3035</SUB>> ]
+"14236" [label = <(FIELD_IDENTIFIER,GetStaticFloatField,GetStaticFloatField)<SUB>3036</SUB>> ]
+"14239" [label = <(FIELD_IDENTIFIER,GetStaticDoubleField,GetStaticDoubleField)<SUB>3037</SUB>> ]
+"14242" [label = <(FIELD_IDENTIFIER,SetStaticObjectField,SetStaticObjectField)<SUB>3038</SUB>> ]
+"14245" [label = <(FIELD_IDENTIFIER,SetStaticBooleanField,SetStaticBooleanField)<SUB>3039</SUB>> ]
+"14248" [label = <(FIELD_IDENTIFIER,SetStaticByteField,SetStaticByteField)<SUB>3040</SUB>> ]
+"14251" [label = <(FIELD_IDENTIFIER,SetStaticCharField,SetStaticCharField)<SUB>3041</SUB>> ]
+"14254" [label = <(FIELD_IDENTIFIER,SetStaticShortField,SetStaticShortField)<SUB>3042</SUB>> ]
+"14257" [label = <(FIELD_IDENTIFIER,SetStaticIntField,SetStaticIntField)<SUB>3043</SUB>> ]
+"14260" [label = <(FIELD_IDENTIFIER,SetStaticLongField,SetStaticLongField)<SUB>3044</SUB>> ]
+"14263" [label = <(FIELD_IDENTIFIER,SetStaticFloatField,SetStaticFloatField)<SUB>3045</SUB>> ]
+"14266" [label = <(FIELD_IDENTIFIER,SetStaticDoubleField,SetStaticDoubleField)<SUB>3046</SUB>> ]
+"14269" [label = <(FIELD_IDENTIFIER,NewString,NewString)<SUB>3047</SUB>> ]
+"14272" [label = <(FIELD_IDENTIFIER,GetStringLength,GetStringLength)<SUB>3048</SUB>> ]
+"14275" [label = <(FIELD_IDENTIFIER,GetStringChars,GetStringChars)<SUB>3049</SUB>> ]
+"14278" [label = <(FIELD_IDENTIFIER,ReleaseStringChars,ReleaseStringChars)<SUB>3050</SUB>> ]
+"14281" [label = <(FIELD_IDENTIFIER,NewStringUTF,NewStringUTF)<SUB>3051</SUB>> ]
+"14284" [label = <(FIELD_IDENTIFIER,GetStringUTFLength,GetStringUTFLength)<SUB>3052</SUB>> ]
+"14287" [label = <(FIELD_IDENTIFIER,GetStringUTFChars,GetStringUTFChars)<SUB>3053</SUB>> ]
+"14290" [label = <(FIELD_IDENTIFIER,ReleaseStringUTFChars,ReleaseStringUTFChars)<SUB>3054</SUB>> ]
+"14293" [label = <(FIELD_IDENTIFIER,GetArrayLength,GetArrayLength)<SUB>3055</SUB>> ]
+"14296" [label = <(FIELD_IDENTIFIER,NewObjectArray,NewObjectArray)<SUB>3056</SUB>> ]
+"14299" [label = <(FIELD_IDENTIFIER,GetObjectArrayElement,GetObjectArrayElement)<SUB>3057</SUB>> ]
+"14302" [label = <(FIELD_IDENTIFIER,SetObjectArrayElement,SetObjectArrayElement)<SUB>3058</SUB>> ]
+"14305" [label = <(FIELD_IDENTIFIER,NewBooleanArray,NewBooleanArray)<SUB>3059</SUB>> ]
+"14308" [label = <(FIELD_IDENTIFIER,NewByteArray,NewByteArray)<SUB>3060</SUB>> ]
+"14311" [label = <(FIELD_IDENTIFIER,NewCharArray,NewCharArray)<SUB>3061</SUB>> ]
+"14314" [label = <(FIELD_IDENTIFIER,NewShortArray,NewShortArray)<SUB>3062</SUB>> ]
+"14317" [label = <(FIELD_IDENTIFIER,NewIntArray,NewIntArray)<SUB>3063</SUB>> ]
+"14320" [label = <(FIELD_IDENTIFIER,NewLongArray,NewLongArray)<SUB>3064</SUB>> ]
+"14323" [label = <(FIELD_IDENTIFIER,NewFloatArray,NewFloatArray)<SUB>3065</SUB>> ]
+"14326" [label = <(FIELD_IDENTIFIER,NewDoubleArray,NewDoubleArray)<SUB>3066</SUB>> ]
+"14329" [label = <(FIELD_IDENTIFIER,GetBooleanArrayElements,GetBooleanArrayElements)<SUB>3067</SUB>> ]
+"14332" [label = <(FIELD_IDENTIFIER,GetByteArrayElements,GetByteArrayElements)<SUB>3068</SUB>> ]
+"14335" [label = <(FIELD_IDENTIFIER,GetCharArrayElements,GetCharArrayElements)<SUB>3069</SUB>> ]
+"14338" [label = <(FIELD_IDENTIFIER,GetShortArrayElements,GetShortArrayElements)<SUB>3070</SUB>> ]
+"14341" [label = <(FIELD_IDENTIFIER,GetIntArrayElements,GetIntArrayElements)<SUB>3071</SUB>> ]
+"14344" [label = <(FIELD_IDENTIFIER,GetLongArrayElements,GetLongArrayElements)<SUB>3072</SUB>> ]
+"14347" [label = <(FIELD_IDENTIFIER,GetFloatArrayElements,GetFloatArrayElements)<SUB>3073</SUB>> ]
+"14350" [label = <(FIELD_IDENTIFIER,GetDoubleArrayElements,GetDoubleArrayElements)<SUB>3074</SUB>> ]
+"14353" [label = <(FIELD_IDENTIFIER,ReleaseBooleanArrayElements,ReleaseBooleanArrayElements)<SUB>3075</SUB>> ]
+"14356" [label = <(FIELD_IDENTIFIER,ReleaseByteArrayElements,ReleaseByteArrayElements)<SUB>3076</SUB>> ]
+"14359" [label = <(FIELD_IDENTIFIER,ReleaseCharArrayElements,ReleaseCharArrayElements)<SUB>3077</SUB>> ]
+"14362" [label = <(FIELD_IDENTIFIER,ReleaseShortArrayElements,ReleaseShortArrayElements)<SUB>3078</SUB>> ]
+"14365" [label = <(FIELD_IDENTIFIER,ReleaseIntArrayElements,ReleaseIntArrayElements)<SUB>3079</SUB>> ]
+"14368" [label = <(FIELD_IDENTIFIER,ReleaseLongArrayElements,ReleaseLongArrayElements)<SUB>3080</SUB>> ]
+"14371" [label = <(FIELD_IDENTIFIER,ReleaseFloatArrayElements,ReleaseFloatArrayElements)<SUB>3081</SUB>> ]
+"14374" [label = <(FIELD_IDENTIFIER,ReleaseDoubleArrayElements,ReleaseDoubleArrayElements)<SUB>3082</SUB>> ]
+"14377" [label = <(FIELD_IDENTIFIER,GetBooleanArrayRegion,GetBooleanArrayRegion)<SUB>3083</SUB>> ]
+"14380" [label = <(FIELD_IDENTIFIER,GetByteArrayRegion,GetByteArrayRegion)<SUB>3084</SUB>> ]
+"14383" [label = <(FIELD_IDENTIFIER,GetCharArrayRegion,GetCharArrayRegion)<SUB>3085</SUB>> ]
+"14386" [label = <(FIELD_IDENTIFIER,GetShortArrayRegion,GetShortArrayRegion)<SUB>3086</SUB>> ]
+"14389" [label = <(FIELD_IDENTIFIER,GetIntArrayRegion,GetIntArrayRegion)<SUB>3087</SUB>> ]
+"14392" [label = <(FIELD_IDENTIFIER,GetLongArrayRegion,GetLongArrayRegion)<SUB>3088</SUB>> ]
+"14395" [label = <(FIELD_IDENTIFIER,GetFloatArrayRegion,GetFloatArrayRegion)<SUB>3089</SUB>> ]
+"14398" [label = <(FIELD_IDENTIFIER,GetDoubleArrayRegion,GetDoubleArrayRegion)<SUB>3090</SUB>> ]
+"14401" [label = <(FIELD_IDENTIFIER,SetBooleanArrayRegion,SetBooleanArrayRegion)<SUB>3091</SUB>> ]
+"14404" [label = <(FIELD_IDENTIFIER,SetByteArrayRegion,SetByteArrayRegion)<SUB>3092</SUB>> ]
+"14407" [label = <(FIELD_IDENTIFIER,SetCharArrayRegion,SetCharArrayRegion)<SUB>3093</SUB>> ]
+"14410" [label = <(FIELD_IDENTIFIER,SetShortArrayRegion,SetShortArrayRegion)<SUB>3094</SUB>> ]
+"14413" [label = <(FIELD_IDENTIFIER,SetIntArrayRegion,SetIntArrayRegion)<SUB>3095</SUB>> ]
+"14416" [label = <(FIELD_IDENTIFIER,SetLongArrayRegion,SetLongArrayRegion)<SUB>3096</SUB>> ]
+"14419" [label = <(FIELD_IDENTIFIER,SetFloatArrayRegion,SetFloatArrayRegion)<SUB>3097</SUB>> ]
+"14422" [label = <(FIELD_IDENTIFIER,SetDoubleArrayRegion,SetDoubleArrayRegion)<SUB>3098</SUB>> ]
+"14425" [label = <(FIELD_IDENTIFIER,RegisterNatives,RegisterNatives)<SUB>3099</SUB>> ]
+"14428" [label = <(FIELD_IDENTIFIER,UnregisterNatives,UnregisterNatives)<SUB>3100</SUB>> ]
+"14431" [label = <(FIELD_IDENTIFIER,MonitorEnter,MonitorEnter)<SUB>3101</SUB>> ]
+"14434" [label = <(FIELD_IDENTIFIER,MonitorExit,MonitorExit)<SUB>3102</SUB>> ]
+"14437" [label = <(FIELD_IDENTIFIER,GetJavaVM,GetJavaVM)<SUB>3103</SUB>> ]
+"14440" [label = <(FIELD_IDENTIFIER,GetStringRegion,GetStringRegion)<SUB>3104</SUB>> ]
+"14443" [label = <(FIELD_IDENTIFIER,GetStringUTFRegion,GetStringUTFRegion)<SUB>3105</SUB>> ]
+"14446" [label = <(FIELD_IDENTIFIER,GetPrimitiveArrayCritical,GetPrimitiveArrayCritical)<SUB>3106</SUB>> ]
+"14449" [label = <(FIELD_IDENTIFIER,ReleasePrimitiveArrayCritical,ReleasePrimitiveArrayCritical)<SUB>3107</SUB>> ]
+"14452" [label = <(FIELD_IDENTIFIER,GetStringCritical,GetStringCritical)<SUB>3108</SUB>> ]
+"14455" [label = <(FIELD_IDENTIFIER,ReleaseStringCritical,ReleaseStringCritical)<SUB>3109</SUB>> ]
+"14458" [label = <(FIELD_IDENTIFIER,NewWeakGlobalRef,NewWeakGlobalRef)<SUB>3110</SUB>> ]
+"14461" [label = <(FIELD_IDENTIFIER,DeleteWeakGlobalRef,DeleteWeakGlobalRef)<SUB>3111</SUB>> ]
+"14464" [label = <(FIELD_IDENTIFIER,ExceptionCheck,ExceptionCheck)<SUB>3112</SUB>> ]
+"14467" [label = <(FIELD_IDENTIFIER,NewDirectByteBuffer,NewDirectByteBuffer)<SUB>3113</SUB>> ]
+"14470" [label = <(FIELD_IDENTIFIER,GetDirectBufferAddress,GetDirectBufferAddress)<SUB>3114</SUB>> ]
+"14473" [label = <(FIELD_IDENTIFIER,GetDirectBufferCapacity,GetDirectBufferCapacity)<SUB>3115</SUB>> ]
+"14476" [label = <(FIELD_IDENTIFIER,GetObjectRefType,GetObjectRefType)<SUB>3116</SUB>> ]
+"395" [label = <(Runtime::Current,Runtime::Current())<SUB>291</SUB>> ]
+"399" [label = <(FIELD_IDENTIFIER,GetInstrumentation,GetInstrumentation)<SUB>291</SUB>> ]
+"416" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>318</SUB>> ]
+"568" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetClassLinker)<SUB>438</SUB>> ]
+"597" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>467</SUB>> ]
+"600" [label = <(FIELD_IDENTIFIER,ClassLoader,ClassLoader)<SUB>467</SUB>> ]
+"603" [label = <(Runtime::Current,Runtime::Current())<SUB>467</SUB>> ]
+"607" [label = <(FIELD_IDENTIFIER,GetSystemClassLoader,GetSystemClassLoader)<SUB>467</SUB>> ]
+"632" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>489</SUB>> ]
+"636" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>489</SUB>> ]
+"656" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>495</SUB>> ]
+"13547" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>2811</SUB>> ]
+"13564" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>2813</SUB>> ]
+"396" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>291</SUB>> ]
+"418" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>318</SUB>> ]
+"569" [label = <(Runtime::Current,Runtime::Current())<SUB>438</SUB>> ]
+"573" [label = <(FIELD_IDENTIFIER,GetClassLinker,GetClassLinker)<SUB>438</SUB>> ]
+"604" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>467</SUB>> ]
+"634" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>489</SUB>> ]
+"637" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>489</SUB>> ]
+"640" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>489</SUB>> ]
+"658" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>495</SUB>> ]
+"13549" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>2811</SUB>> ]
+"398" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>291</SUB>> ]
+"570" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>438</SUB>> ]
+"606" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>467</SUB>> ]
+"639" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>489</SUB>> ]
+"642" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>489</SUB>> ]
+"572" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>438</SUB>> ]
+"5" [label = <(METHOD,&lt;global&gt;)<SUB>1</SUB>> ]
+"14814" [label = <(METHOD_RETURN,ANY)<SUB>1</SUB>> ]
+  "408" -> "409" 
+  "409" -> "418" 
+  "411" -> "420" 
+  "420" -> "421" 
+  "421" -> "428" 
+  "428" -> "429" 
+  "429" -> "430" 
+  "430" -> "431" 
+  "431" -> "507" 
+  "507" -> "508" 
+  "508" -> "509" 
+  "509" -> "510" 
+  "510" -> "519" 
+  "519" -> "520" 
+  "520" -> "521" 
+  "521" -> "522" 
+  "522" -> "529" 
+  "529" -> "530" 
+  "530" -> "541" 
+  "537" -> "543" 
+  "543" -> "544" 
+  "544" -> "545" 
+  "545" -> "555" 
+  "555" -> "556" 
+  "556" -> "557" 
+  "557" -> "559" 
+  "559" -> "572" 
+  "563" -> "575" 
+  "575" -> "576" 
+  "576" -> "577" 
+  "577" -> "578" 
+  "578" -> "579" 
+  "579" -> "580" 
+  "580" -> "586" 
+  "586" -> "587" 
+  "587" -> "588" 
+  "588" -> "589" 
+  "589" -> "597" 
+  "591" -> "608" 
+  "608" -> "609" 
+  "609" -> "610" 
+  "610" -> "611" 
+  "611" -> "612" 
+  "612" -> "622" 
+  "622" -> "623" 
+  "623" -> "629" 
+  "625" -> "644" 
+  "644" -> "646" 
+  "646" -> "658" 
+  "651" -> "660" 
+  "660" -> "661" 
+  "661" -> "662" 
+  "662" -> "663" 
+  "663" -> "665" 
+  "665" -> "666" 
+  "666" -> "667" 
+  "667" -> "668" 
+  "668" -> "669" 
+  "669" -> "670" 
+  "670" -> "680" 
+  "680" -> "681" 
+  "681" -> "682" 
+  "682" -> "683" 
+  "683" -> "692" 
+  "692" -> "693" 
+  "693" -> "694" 
+  "694" -> "703" 
+  "703" -> "704" 
+  "704" -> "724" 
+  "724" -> "725" 
+  "725" -> "726" 
+  "726" -> "727" 
+  "727" -> "728" 
+  "728" -> "13301" 
+  "13301" -> "13357" 
+  "13357" -> "13358" 
+  "13358" -> "13362" 
+  "13360" -> "13363" 
+  "13363" -> "13364" 
+  "13364" -> "13365" 
+  "13365" -> "13366" 
+  "13366" -> "13539" 
+  "13539" -> "13540" 
+  "13540" -> "13549" 
+  "13542" -> "13554" 
+  "13552" -> "13564" 
+  "13558" -> "13566" 
+  "13566" -> "13567" 
+  "13567" -> "13568" 
+  "13568" -> "13781" 
+  "13781" -> "13792" 
+  "13783" -> "14490" 
+  "14488" -> "14764" 
+  "14764" -> "14814" 
+  "33" -> "377" 
+  "377" -> "380" 
+  "380" -> "388" 
+  "388" -> "389" 
+  "389" -> "398" 
+  "391" -> "400" 
+  "400" -> "408" 
+  "413" -> "411" 
+  "538" -> "537" 
+  "565" -> "563" 
+  "593" -> "591" 
+  "626" -> "625" 
+  "653" -> "651" 
+  "13362" -> "13360" 
+  "13544" -> "13542" 
+  "13554" -> "13552" 
+  "13560" -> "13558" 
+  "13785" -> "13783" 
+  "14490" -> "14488" 
+  "393" -> "391" 
+  "414" -> "413" 
+  "539" -> "538" 
+  "566" -> "565" 
+  "594" -> "606" 
+  "601" -> "593" 
+  "627" -> "634" 
+  "630" -> "626" 
+  "654" -> "653" 
+  "13545" -> "13544" 
+  "13561" -> "13560" 
+  "13790" -> "13795" 
+  "13793" -> "13798" 
+  "13796" -> "13801" 
+  "13799" -> "13804" 
+  "13802" -> "13807" 
+  "13805" -> "13810" 
+  "13808" -> "13813" 
+  "13811" -> "13816" 
+  "13814" -> "13819" 
+  "13817" -> "13822" 
+  "13820" -> "13825" 
+  "13823" -> "13828" 
+  "13826" -> "13831" 
+  "13829" -> "13834" 
+  "13832" -> "13837" 
+  "13835" -> "13840" 
+  "13838" -> "13843" 
+  "13841" -> "13846" 
+  "13844" -> "13849" 
+  "13847" -> "13852" 
+  "13850" -> "13855" 
+  "13853" -> "13858" 
+  "13856" -> "13861" 
+  "13859" -> "13864" 
+  "13862" -> "13867" 
+  "13865" -> "13870" 
+  "13868" -> "13873" 
+  "13871" -> "13876" 
+  "13874" -> "13879" 
+  "13877" -> "13882" 
+  "13880" -> "13885" 
+  "13883" -> "13888" 
+  "13886" -> "13891" 
+  "13889" -> "13894" 
+  "13892" -> "13897" 
+  "13895" -> "13900" 
+  "13898" -> "13903" 
+  "13901" -> "13906" 
+  "13904" -> "13909" 
+  "13907" -> "13912" 
+  "13910" -> "13915" 
+  "13913" -> "13918" 
+  "13916" -> "13921" 
+  "13919" -> "13924" 
+  "13922" -> "13927" 
+  "13925" -> "13930" 
+  "13928" -> "13933" 
+  "13931" -> "13936" 
+  "13934" -> "13939" 
+  "13937" -> "13942" 
+  "13940" -> "13945" 
+  "13943" -> "13948" 
+  "13946" -> "13951" 
+  "13949" -> "13954" 
+  "13952" -> "13957" 
+  "13955" -> "13960" 
+  "13958" -> "13963" 
+  "13961" -> "13966" 
+  "13964" -> "13969" 
+  "13967" -> "13972" 
+  "13970" -> "13975" 
+  "13973" -> "13978" 
+  "13976" -> "13981" 
+  "13979" -> "13984" 
+  "13982" -> "13987" 
+  "13985" -> "13990" 
+  "13988" -> "13993" 
+  "13991" -> "13996" 
+  "13994" -> "13999" 
+  "13997" -> "14002" 
+  "14000" -> "14005" 
+  "14003" -> "14008" 
+  "14006" -> "14011" 
+  "14009" -> "14014" 
+  "14012" -> "14017" 
+  "14015" -> "14020" 
+  "14018" -> "14023" 
+  "14021" -> "14026" 
+  "14024" -> "14029" 
+  "14027" -> "14032" 
+  "14030" -> "14035" 
+  "14033" -> "14038" 
+  "14036" -> "14041" 
+  "14039" -> "14044" 
+  "14042" -> "14047" 
+  "14045" -> "14050" 
+  "14048" -> "14053" 
+  "14051" -> "14056" 
+  "14054" -> "14059" 
+  "14057" -> "14062" 
+  "14060" -> "14065" 
+  "14063" -> "14068" 
+  "14066" -> "14071" 
+  "14069" -> "14074" 
+  "14072" -> "14077" 
+  "14075" -> "14080" 
+  "14078" -> "14083" 
+  "14081" -> "14086" 
+  "14084" -> "14089" 
+  "14087" -> "14092" 
+  "14090" -> "14095" 
+  "14093" -> "14098" 
+  "14096" -> "14101" 
+  "14099" -> "14104" 
+  "14102" -> "14107" 
+  "14105" -> "14110" 
+  "14108" -> "14113" 
+  "14111" -> "14116" 
+  "14114" -> "14119" 
+  "14117" -> "14122" 
+  "14120" -> "14125" 
+  "14123" -> "14128" 
+  "14126" -> "14131" 
+  "14129" -> "14134" 
+  "14132" -> "14137" 
+  "14135" -> "14140" 
+  "14138" -> "14143" 
+  "14141" -> "14146" 
+  "14144" -> "14149" 
+  "14147" -> "14152" 
+  "14150" -> "14155" 
+  "14153" -> "14158" 
+  "14156" -> "14161" 
+  "14159" -> "14164" 
+  "14162" -> "14167" 
+  "14165" -> "14170" 
+  "14168" -> "14173" 
+  "14171" -> "14176" 
+  "14174" -> "14179" 
+  "14177" -> "14182" 
+  "14180" -> "14185" 
+  "14183" -> "14188" 
+  "14186" -> "14191" 
+  "14189" -> "14194" 
+  "14192" -> "14197" 
+  "14195" -> "14200" 
+  "14198" -> "14203" 
+  "14201" -> "14206" 
+  "14204" -> "14209" 
+  "14207" -> "14212" 
+  "14210" -> "14215" 
+  "14213" -> "14218" 
+  "14216" -> "14221" 
+  "14219" -> "14224" 
+  "14222" -> "14227" 
+  "14225" -> "14230" 
+  "14228" -> "14233" 
+  "14231" -> "14236" 
+  "14234" -> "14239" 
+  "14237" -> "14242" 
+  "14240" -> "14245" 
+  "14243" -> "14248" 
+  "14246" -> "14251" 
+  "14249" -> "14254" 
+  "14252" -> "14257" 
+  "14255" -> "14260" 
+  "14258" -> "14263" 
+  "14261" -> "14266" 
+  "14264" -> "14269" 
+  "14267" -> "14272" 
+  "14270" -> "14275" 
+  "14273" -> "14278" 
+  "14276" -> "14281" 
+  "14279" -> "14284" 
+  "14282" -> "14287" 
+  "14285" -> "14290" 
+  "14288" -> "14293" 
+  "14291" -> "14296" 
+  "14294" -> "14299" 
+  "14297" -> "14302" 
+  "14300" -> "14305" 
+  "14303" -> "14308" 
+  "14306" -> "14311" 
+  "14309" -> "14314" 
+  "14312" -> "14317" 
+  "14315" -> "14320" 
+  "14318" -> "14323" 
+  "14321" -> "14326" 
+  "14324" -> "14329" 
+  "14327" -> "14332" 
+  "14330" -> "14335" 
+  "14333" -> "14338" 
+  "14336" -> "14341" 
+  "14339" -> "14344" 
+  "14342" -> "14347" 
+  "14345" -> "14350" 
+  "14348" -> "14353" 
+  "14351" -> "14356" 
+  "14354" -> "14359" 
+  "14357" -> "14362" 
+  "14360" -> "14365" 
+  "14363" -> "14368" 
+  "14366" -> "14371" 
+  "14369" -> "14374" 
+  "14372" -> "14377" 
+  "14375" -> "14380" 
+  "14378" -> "14383" 
+  "14381" -> "14386" 
+  "14384" -> "14389" 
+  "14387" -> "14392" 
+  "14390" -> "14395" 
+  "14393" -> "14398" 
+  "14396" -> "14401" 
+  "14399" -> "14404" 
+  "14402" -> "14407" 
+  "14405" -> "14410" 
+  "14408" -> "14413" 
+  "14411" -> "14416" 
+  "14414" -> "14419" 
+  "14417" -> "14422" 
+  "14420" -> "14425" 
+  "14423" -> "14428" 
+  "14426" -> "14431" 
+  "14429" -> "14434" 
+  "14432" -> "14437" 
+  "14435" -> "14440" 
+  "14438" -> "14443" 
+  "14441" -> "14446" 
+  "14444" -> "14449" 
+  "14447" -> "14452" 
+  "14450" -> "14455" 
+  "14453" -> "14458" 
+  "14456" -> "14461" 
+  "14459" -> "14464" 
+  "14462" -> "14467" 
+  "14465" -> "14470" 
+  "14468" -> "14473" 
+  "14471" -> "14476" 
+  "14474" -> "13785" 
+  "394" -> "393" 
+  "415" -> "419" 
+  "419" -> "414" 
+  "541" -> "539" 
+  "567" -> "574" 
+  "574" -> "566" 
+  "595" -> "600" 
+  "598" -> "594" 
+  "602" -> "601" 
+  "629" -> "627" 
+  "631" -> "639" 
+  "635" -> "630" 
+  "655" -> "659" 
+  "659" -> "654" 
+  "13546" -> "13550" 
+  "13550" -> "13545" 
+  "13562" -> "13561" 
+  "13792" -> "13790" 
+  "13795" -> "13793" 
+  "13798" -> "13796" 
+  "13801" -> "13799" 
+  "13804" -> "13802" 
+  "13807" -> "13805" 
+  "13810" -> "13808" 
+  "13813" -> "13811" 
+  "13816" -> "13814" 
+  "13819" -> "13817" 
+  "13822" -> "13820" 
+  "13825" -> "13823" 
+  "13828" -> "13826" 
+  "13831" -> "13829" 
+  "13834" -> "13832" 
+  "13837" -> "13835" 
+  "13840" -> "13838" 
+  "13843" -> "13841" 
+  "13846" -> "13844" 
+  "13849" -> "13847" 
+  "13852" -> "13850" 
+  "13855" -> "13853" 
+  "13858" -> "13856" 
+  "13861" -> "13859" 
+  "13864" -> "13862" 
+  "13867" -> "13865" 
+  "13870" -> "13868" 
+  "13873" -> "13871" 
+  "13876" -> "13874" 
+  "13879" -> "13877" 
+  "13882" -> "13880" 
+  "13885" -> "13883" 
+  "13888" -> "13886" 
+  "13891" -> "13889" 
+  "13894" -> "13892" 
+  "13897" -> "13895" 
+  "13900" -> "13898" 
+  "13903" -> "13901" 
+  "13906" -> "13904" 
+  "13909" -> "13907" 
+  "13912" -> "13910" 
+  "13915" -> "13913" 
+  "13918" -> "13916" 
+  "13921" -> "13919" 
+  "13924" -> "13922" 
+  "13927" -> "13925" 
+  "13930" -> "13928" 
+  "13933" -> "13931" 
+  "13936" -> "13934" 
+  "13939" -> "13937" 
+  "13942" -> "13940" 
+  "13945" -> "13943" 
+  "13948" -> "13946" 
+  "13951" -> "13949" 
+  "13954" -> "13952" 
+  "13957" -> "13955" 
+  "13960" -> "13958" 
+  "13963" -> "13961" 
+  "13966" -> "13964" 
+  "13969" -> "13967" 
+  "13972" -> "13970" 
+  "13975" -> "13973" 
+  "13978" -> "13976" 
+  "13981" -> "13979" 
+  "13984" -> "13982" 
+  "13987" -> "13985" 
+  "13990" -> "13988" 
+  "13993" -> "13991" 
+  "13996" -> "13994" 
+  "13999" -> "13997" 
+  "14002" -> "14000" 
+  "14005" -> "14003" 
+  "14008" -> "14006" 
+  "14011" -> "14009" 
+  "14014" -> "14012" 
+  "14017" -> "14015" 
+  "14020" -> "14018" 
+  "14023" -> "14021" 
+  "14026" -> "14024" 
+  "14029" -> "14027" 
+  "14032" -> "14030" 
+  "14035" -> "14033" 
+  "14038" -> "14036" 
+  "14041" -> "14039" 
+  "14044" -> "14042" 
+  "14047" -> "14045" 
+  "14050" -> "14048" 
+  "14053" -> "14051" 
+  "14056" -> "14054" 
+  "14059" -> "14057" 
+  "14062" -> "14060" 
+  "14065" -> "14063" 
+  "14068" -> "14066" 
+  "14071" -> "14069" 
+  "14074" -> "14072" 
+  "14077" -> "14075" 
+  "14080" -> "14078" 
+  "14083" -> "14081" 
+  "14086" -> "14084" 
+  "14089" -> "14087" 
+  "14092" -> "14090" 
+  "14095" -> "14093" 
+  "14098" -> "14096" 
+  "14101" -> "14099" 
+  "14104" -> "14102" 
+  "14107" -> "14105" 
+  "14110" -> "14108" 
+  "14113" -> "14111" 
+  "14116" -> "14114" 
+  "14119" -> "14117" 
+  "14122" -> "14120" 
+  "14125" -> "14123" 
+  "14128" -> "14126" 
+  "14131" -> "14129" 
+  "14134" -> "14132" 
+  "14137" -> "14135" 
+  "14140" -> "14138" 
+  "14143" -> "14141" 
+  "14146" -> "14144" 
+  "14149" -> "14147" 
+  "14152" -> "14150" 
+  "14155" -> "14153" 
+  "14158" -> "14156" 
+  "14161" -> "14159" 
+  "14164" -> "14162" 
+  "14167" -> "14165" 
+  "14170" -> "14168" 
+  "14173" -> "14171" 
+  "14176" -> "14174" 
+  "14179" -> "14177" 
+  "14182" -> "14180" 
+  "14185" -> "14183" 
+  "14188" -> "14186" 
+  "14191" -> "14189" 
+  "14194" -> "14192" 
+  "14197" -> "14195" 
+  "14200" -> "14198" 
+  "14203" -> "14201" 
+  "14206" -> "14204" 
+  "14209" -> "14207" 
+  "14212" -> "14210" 
+  "14215" -> "14213" 
+  "14218" -> "14216" 
+  "14221" -> "14219" 
+  "14224" -> "14222" 
+  "14227" -> "14225" 
+  "14230" -> "14228" 
+  "14233" -> "14231" 
+  "14236" -> "14234" 
+  "14239" -> "14237" 
+  "14242" -> "14240" 
+  "14245" -> "14243" 
+  "14248" -> "14246" 
+  "14251" -> "14249" 
+  "14254" -> "14252" 
+  "14257" -> "14255" 
+  "14260" -> "14258" 
+  "14263" -> "14261" 
+  "14266" -> "14264" 
+  "14269" -> "14267" 
+  "14272" -> "14270" 
+  "14275" -> "14273" 
+  "14278" -> "14276" 
+  "14281" -> "14279" 
+  "14284" -> "14282" 
+  "14287" -> "14285" 
+  "14290" -> "14288" 
+  "14293" -> "14291" 
+  "14296" -> "14294" 
+  "14299" -> "14297" 
+  "14302" -> "14300" 
+  "14305" -> "14303" 
+  "14308" -> "14306" 
+  "14311" -> "14309" 
+  "14314" -> "14312" 
+  "14317" -> "14315" 
+  "14320" -> "14318" 
+  "14323" -> "14321" 
+  "14326" -> "14324" 
+  "14329" -> "14327" 
+  "14332" -> "14330" 
+  "14335" -> "14333" 
+  "14338" -> "14336" 
+  "14341" -> "14339" 
+  "14344" -> "14342" 
+  "14347" -> "14345" 
+  "14350" -> "14348" 
+  "14353" -> "14351" 
+  "14356" -> "14354" 
+  "14359" -> "14357" 
+  "14362" -> "14360" 
+  "14365" -> "14363" 
+  "14368" -> "14366" 
+  "14371" -> "14369" 
+  "14374" -> "14372" 
+  "14377" -> "14375" 
+  "14380" -> "14378" 
+  "14383" -> "14381" 
+  "14386" -> "14384" 
+  "14389" -> "14387" 
+  "14392" -> "14390" 
+  "14395" -> "14393" 
+  "14398" -> "14396" 
+  "14401" -> "14399" 
+  "14404" -> "14402" 
+  "14407" -> "14405" 
+  "14410" -> "14408" 
+  "14413" -> "14411" 
+  "14416" -> "14414" 
+  "14419" -> "14417" 
+  "14422" -> "14420" 
+  "14425" -> "14423" 
+  "14428" -> "14426" 
+  "14431" -> "14429" 
+  "14434" -> "14432" 
+  "14437" -> "14435" 
+  "14440" -> "14438" 
+  "14443" -> "14441" 
+  "14446" -> "14444" 
+  "14449" -> "14447" 
+  "14452" -> "14450" 
+  "14455" -> "14453" 
+  "14458" -> "14456" 
+  "14461" -> "14459" 
+  "14464" -> "14462" 
+  "14467" -> "14465" 
+  "14470" -> "14468" 
+  "14473" -> "14471" 
+  "14476" -> "14474" 
+  "395" -> "399" 
+  "399" -> "394" 
+  "416" -> "415" 
+  "568" -> "567" 
+  "597" -> "595" 
+  "600" -> "598" 
+  "603" -> "607" 
+  "607" -> "602" 
+  "632" -> "631" 
+  "636" -> "635" 
+  "656" -> "655" 
+  "13547" -> "13546" 
+  "13564" -> "13562" 
+  "396" -> "395" 
+  "418" -> "416" 
+  "569" -> "573" 
+  "573" -> "568" 
+  "604" -> "603" 
+  "634" -> "632" 
+  "637" -> "642" 
+  "640" -> "636" 
+  "658" -> "656" 
+  "13549" -> "13547" 
+  "398" -> "396" 
+  "570" -> "569" 
+  "606" -> "604" 
+  "639" -> "637" 
+  "642" -> "640" 
+  "572" -> "570" 
+  "5" -> "33" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/1-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/1-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/1-cfg.dot	2023-06-07 19:35:28.017384366 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/1-cfg.dot	2023-06-07 19:35:34.737383779 +0330
@@ -1,5 +1,5 @@
-digraph "anonymous_lambda_22" {  
-"8" [label = <(METHOD,anonymous_lambda_22)<SUB>2093</SUB>> ]
-"12" [label = <(METHOD_RETURN,ANY)<SUB>2093</SUB>> ]
-  "8" -> "12" 
+digraph "ScopedVAArgs" {  
+"9" [label = <(METHOD,ScopedVAArgs)<SUB>75</SUB>> ]
+"12" [label = <(METHOD_RETURN,ANY)<SUB>75</SUB>> ]
+  "9" -> "12" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/10-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/10-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/10-cfg.dot	2023-06-07 19:35:28.217384348 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/10-cfg.dot	2023-06-07 19:35:34.737383779 +0330
@@ -1,11 +1,15 @@
-digraph "&lt;clinit&gt;" {  
-"271" [label = <(&lt;operator&gt;.assignment,kRuntime = 0)<SUB>179</SUB>> ]
-"274" [label = <(&lt;operator&gt;.assignment,kApexModule = 1)<SUB>180</SUB>> ]
-"277" [label = <(&lt;operator&gt;.assignment,kOther = 2)<SUB>181</SUB>> ]
-"269" [label = <(METHOD,&lt;clinit&gt;)> ]
-"281" [label = <(METHOD_RETURN,ANY)> ]
-  "271" -> "274" 
-  "274" -> "277" 
-  "277" -> "281" 
-  "269" -> "271" 
+digraph "HasCache" {  
+"156" [label = <(RETURN,return memory_type_table_.Size() != 0;,return memory_type_table_.Size() != 0;)<SUB>138</SUB>> ]
+"157" [label = <(&lt;operator&gt;.notEquals,memory_type_table_.Size() != 0)<SUB>138</SUB>> ]
+"158" [label = <(Size,memory_type_table_.Size())<SUB>138</SUB>> ]
+"159" [label = <(&lt;operator&gt;.fieldAccess,memory_type_table_.Size)<SUB>138</SUB>> ]
+"161" [label = <(FIELD_IDENTIFIER,Size,Size)<SUB>138</SUB>> ]
+"154" [label = <(METHOD,HasCache)<SUB>137</SUB>> ]
+"163" [label = <(METHOD_RETURN,bool)<SUB>137</SUB>> ]
+  "156" -> "163" 
+  "157" -> "156" 
+  "158" -> "157" 
+  "159" -> "158" 
+  "161" -> "159" 
+  "154" -> "161" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/100-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/100-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/100-cfg.dot	2023-06-07 19:35:28.277384343 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/100-cfg.dot	2023-06-07 19:35:34.807383771 +0330
@@ -1,45 +1,63 @@
-digraph "CallVoidMethodV" {  
-"4631" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1313</SUB>> ]
-"4648" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1314</SUB>> ]
-"4666" [label = <(soa,soa(env))<SUB>1315</SUB>> ]
-"4668" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>1316</SUB>> ]
-"4635" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1313</SUB>> ]
-"4652" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1314</SUB>> ]
-"4636" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1313</SUB>> ]
-"4640" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1313</SUB>> ]
-"4647" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1313</SUB>> ]
-"4653" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1314</SUB>> ]
-"4657" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1314</SUB>> ]
-"4664" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1314</SUB>> ]
-"4641" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1313</SUB>> ]
-"4658" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1314</SUB>> ]
-"4642" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1313</SUB>> ]
-"4644" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1313</SUB>> ]
-"4659" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1314</SUB>> ]
-"4661" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1314</SUB>> ]
-"4625" [label = <(METHOD,CallVoidMethodV)<SUB>1312</SUB>> ]
-"4673" [label = <(METHOD_RETURN,void)<SUB>1312</SUB>> ]
-  "4631" -> "4636" 
-  "4631" -> "4648" 
-  "4648" -> "4653" 
-  "4648" -> "4666" 
-  "4666" -> "4668" 
-  "4668" -> "4673" 
-  "4635" -> "4642" 
-  "4635" -> "4648" 
-  "4652" -> "4659" 
-  "4652" -> "4666" 
-  "4636" -> "4635" 
-  "4640" -> "4647" 
-  "4647" -> "4673" 
-  "4653" -> "4652" 
-  "4657" -> "4664" 
-  "4664" -> "4673" 
-  "4641" -> "4640" 
-  "4658" -> "4657" 
-  "4642" -> "4644" 
-  "4644" -> "4641" 
-  "4659" -> "4661" 
-  "4661" -> "4658" 
-  "4625" -> "4631" 
+digraph "CallNonvirtualObjectMethodA" {  
+"4682" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(obj))<SUB>1271</SUB>> ]
+"4700" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>1272</SUB>> ]
+"4719" [label = <(soa,soa(env))<SUB>1273</SUB>> ]
+"4722" [label = <(result,result(InvokeWithJValues(soa, obj, mid, args)))<SUB>1274</SUB>> ]
+"4728" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());)<SUB>1275</SUB>> ]
+"4723" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1274</SUB>> ]
+"4729" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>1275</SUB>> ]
+"4730" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>1275</SUB>> ]
+"4735" [label = <(GetL,result.GetL())<SUB>1275</SUB>> ]
+"4686" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1271</SUB>> ]
+"4704" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1272</SUB>> ]
+"4731" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1275</SUB>> ]
+"4736" [label = <(&lt;operator&gt;.fieldAccess,result.GetL)<SUB>1275</SUB>> ]
+"4687" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1271</SUB>> ]
+"4691" [label = <(CHECK_NON_NULL_ARGUMENT(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1271</SUB>> ]
+"4698" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(obj),CHECK_NON_NULL_ARGUMENT(obj))<SUB>1271</SUB>> ]
+"4705" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1272</SUB>> ]
+"4709" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1272</SUB>> ]
+"4716" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>1272</SUB>> ]
+"4733" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1275</SUB>> ]
+"4738" [label = <(FIELD_IDENTIFIER,GetL,GetL)<SUB>1275</SUB>> ]
+"4692" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1271</SUB>> ]
+"4710" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1272</SUB>> ]
+"4693" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1271</SUB>> ]
+"4695" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1271</SUB>> ]
+"4711" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1272</SUB>> ]
+"4713" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1272</SUB>> ]
+"4675" [label = <(METHOD,CallNonvirtualObjectMethodA)<SUB>1269</SUB>> ]
+"4739" [label = <(METHOD_RETURN,jobject)<SUB>1269</SUB>> ]
+  "4682" -> "4687" 
+  "4682" -> "4700" 
+  "4700" -> "4705" 
+  "4700" -> "4719" 
+  "4719" -> "4723" 
+  "4722" -> "4733" 
+  "4728" -> "4739" 
+  "4723" -> "4722" 
+  "4729" -> "4728" 
+  "4730" -> "4738" 
+  "4735" -> "4729" 
+  "4686" -> "4693" 
+  "4686" -> "4700" 
+  "4704" -> "4711" 
+  "4704" -> "4719" 
+  "4731" -> "4730" 
+  "4736" -> "4735" 
+  "4687" -> "4686" 
+  "4691" -> "4698" 
+  "4698" -> "4739" 
+  "4705" -> "4704" 
+  "4709" -> "4716" 
+  "4716" -> "4739" 
+  "4733" -> "4731" 
+  "4738" -> "4736" 
+  "4692" -> "4691" 
+  "4710" -> "4709" 
+  "4693" -> "4695" 
+  "4695" -> "4692" 
+  "4711" -> "4713" 
+  "4713" -> "4710" 
+  "4675" -> "4682" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/101-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/101-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/101-cfg.dot	2023-06-07 19:35:28.277384343 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/101-cfg.dot	2023-06-07 19:35:34.807383771 +0330
@@ -1,45 +1,61 @@
-digraph "CallVoidMethodA" {  
-"4681" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1320</SUB>> ]
-"4698" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1321</SUB>> ]
-"4716" [label = <(soa,soa(env))<SUB>1322</SUB>> ]
-"4718" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>1323</SUB>> ]
-"4685" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1320</SUB>> ]
-"4702" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1321</SUB>> ]
-"4686" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1320</SUB>> ]
-"4690" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1320</SUB>> ]
-"4697" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1320</SUB>> ]
-"4703" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1321</SUB>> ]
-"4707" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1321</SUB>> ]
-"4714" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1321</SUB>> ]
-"4691" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1320</SUB>> ]
-"4708" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1321</SUB>> ]
-"4692" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1320</SUB>> ]
-"4694" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1320</SUB>> ]
-"4709" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1321</SUB>> ]
-"4711" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1321</SUB>> ]
-"4675" [label = <(METHOD,CallVoidMethodA)<SUB>1319</SUB>> ]
-"4723" [label = <(METHOD_RETURN,void)<SUB>1319</SUB>> ]
-  "4681" -> "4686" 
-  "4681" -> "4698" 
-  "4698" -> "4703" 
-  "4698" -> "4716" 
-  "4716" -> "4718" 
-  "4718" -> "4723" 
-  "4685" -> "4692" 
-  "4685" -> "4698" 
-  "4702" -> "4709" 
-  "4702" -> "4716" 
-  "4686" -> "4685" 
-  "4690" -> "4697" 
-  "4697" -> "4723" 
-  "4703" -> "4702" 
-  "4707" -> "4714" 
-  "4714" -> "4723" 
-  "4691" -> "4690" 
-  "4708" -> "4707" 
-  "4692" -> "4694" 
-  "4694" -> "4691" 
-  "4709" -> "4711" 
-  "4711" -> "4708" 
-  "4675" -> "4681" 
+digraph "CallNonvirtualBooleanMethod" {  
+"4748" [label = <(va_start,va_start(ap, mid))<SUB>1281</SUB>> ]
+"4752" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1282</SUB>> ]
+"4755" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1283</SUB>> ]
+"4773" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1284</SUB>> ]
+"4792" [label = <(soa,soa(env))<SUB>1285</SUB>> ]
+"4795" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, ap)))<SUB>1286</SUB>> ]
+"4801" [label = <(RETURN,return result.GetZ();,return result.GetZ();)<SUB>1287</SUB>> ]
+"4753" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1282</SUB>> ]
+"4796" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1286</SUB>> ]
+"4802" [label = <(GetZ,result.GetZ())<SUB>1287</SUB>> ]
+"4803" [label = <(&lt;operator&gt;.fieldAccess,result.GetZ)<SUB>1287</SUB>> ]
+"4759" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1283</SUB>> ]
+"4777" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1284</SUB>> ]
+"4805" [label = <(FIELD_IDENTIFIER,GetZ,GetZ)<SUB>1287</SUB>> ]
+"4760" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1283</SUB>> ]
+"4764" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1283</SUB>> ]
+"4771" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1283</SUB>> ]
+"4778" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1284</SUB>> ]
+"4782" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1284</SUB>> ]
+"4789" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1284</SUB>> ]
+"4765" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1283</SUB>> ]
+"4783" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1284</SUB>> ]
+"4766" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1283</SUB>> ]
+"4768" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1283</SUB>> ]
+"4784" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1284</SUB>> ]
+"4786" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1284</SUB>> ]
+"4741" [label = <(METHOD,CallNonvirtualBooleanMethod)<SUB>1278</SUB>> ]
+"4806" [label = <(METHOD_RETURN,jboolean)<SUB>1278</SUB>> ]
+  "4748" -> "4753" 
+  "4752" -> "4755" 
+  "4755" -> "4760" 
+  "4755" -> "4773" 
+  "4773" -> "4778" 
+  "4773" -> "4792" 
+  "4792" -> "4796" 
+  "4795" -> "4805" 
+  "4801" -> "4806" 
+  "4753" -> "4752" 
+  "4796" -> "4795" 
+  "4802" -> "4801" 
+  "4803" -> "4802" 
+  "4759" -> "4766" 
+  "4759" -> "4773" 
+  "4777" -> "4784" 
+  "4777" -> "4792" 
+  "4805" -> "4803" 
+  "4760" -> "4759" 
+  "4764" -> "4771" 
+  "4771" -> "4806" 
+  "4778" -> "4777" 
+  "4782" -> "4789" 
+  "4789" -> "4806" 
+  "4765" -> "4764" 
+  "4783" -> "4782" 
+  "4766" -> "4768" 
+  "4768" -> "4765" 
+  "4784" -> "4786" 
+  "4786" -> "4783" 
+  "4741" -> "4748" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/102-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/102-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/102-cfg.dot	2023-06-07 19:35:28.277384343 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/102-cfg.dot	2023-06-07 19:35:34.807383771 +0330
@@ -1,71 +1,53 @@
-digraph "CallNonvirtualObjectMethod" {  
-"4732" [label = <(va_start,va_start(ap, mid))<SUB>1328</SUB>> ]
-"4736" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1329</SUB>> ]
-"4739" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(obj))<SUB>1330</SUB>> ]
-"4757" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>1331</SUB>> ]
-"4776" [label = <(soa,soa(env))<SUB>1332</SUB>> ]
-"4779" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, ap)))<SUB>1333</SUB>> ]
-"4786" [label = <(&lt;operator&gt;.assignment,local_result = soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>1334</SUB>> ]
-"4798" [label = <(RETURN,return local_result;,return local_result;)<SUB>1335</SUB>> ]
-"4737" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1329</SUB>> ]
-"4780" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1333</SUB>> ]
-"4788" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>1334</SUB>> ]
-"4789" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>1334</SUB>> ]
-"4794" [label = <(GetL,result.GetL())<SUB>1334</SUB>> ]
-"4743" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1330</SUB>> ]
-"4761" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1331</SUB>> ]
-"4790" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1334</SUB>> ]
-"4795" [label = <(&lt;operator&gt;.fieldAccess,result.GetL)<SUB>1334</SUB>> ]
-"4744" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1330</SUB>> ]
-"4748" [label = <(CHECK_NON_NULL_ARGUMENT(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1330</SUB>> ]
-"4755" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(obj),CHECK_NON_NULL_ARGUMENT(obj))<SUB>1330</SUB>> ]
-"4762" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1331</SUB>> ]
-"4766" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1331</SUB>> ]
-"4773" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>1331</SUB>> ]
-"4792" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1334</SUB>> ]
-"4797" [label = <(FIELD_IDENTIFIER,GetL,GetL)<SUB>1334</SUB>> ]
-"4749" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1330</SUB>> ]
-"4767" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1331</SUB>> ]
-"4750" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1330</SUB>> ]
-"4752" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1330</SUB>> ]
-"4768" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1331</SUB>> ]
-"4770" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1331</SUB>> ]
-"4725" [label = <(METHOD,CallNonvirtualObjectMethod)<SUB>1326</SUB>> ]
-"4800" [label = <(METHOD_RETURN,jobject)<SUB>1326</SUB>> ]
-  "4732" -> "4737" 
-  "4736" -> "4739" 
-  "4739" -> "4744" 
-  "4739" -> "4757" 
-  "4757" -> "4762" 
-  "4757" -> "4776" 
-  "4776" -> "4780" 
-  "4779" -> "4792" 
-  "4786" -> "4798" 
-  "4798" -> "4800" 
-  "4737" -> "4736" 
-  "4780" -> "4779" 
-  "4788" -> "4786" 
-  "4789" -> "4797" 
-  "4794" -> "4788" 
-  "4743" -> "4750" 
-  "4743" -> "4757" 
-  "4761" -> "4768" 
-  "4761" -> "4776" 
-  "4790" -> "4789" 
-  "4795" -> "4794" 
-  "4744" -> "4743" 
-  "4748" -> "4755" 
-  "4755" -> "4800" 
-  "4762" -> "4761" 
-  "4766" -> "4773" 
-  "4773" -> "4800" 
-  "4792" -> "4790" 
-  "4797" -> "4795" 
-  "4749" -> "4748" 
-  "4767" -> "4766" 
-  "4750" -> "4752" 
-  "4752" -> "4749" 
-  "4768" -> "4770" 
-  "4770" -> "4767" 
-  "4725" -> "4732" 
+digraph "CallNonvirtualBooleanMethodV" {  
+"4815" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1292</SUB>> ]
+"4833" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1293</SUB>> ]
+"4852" [label = <(soa,soa(env))<SUB>1294</SUB>> ]
+"4854" [label = <(RETURN,return InvokeWithVarArgs(soa, obj, mid, args).GetZ();,return InvokeWithVarArgs(soa, obj, mid, args).GetZ();)<SUB>1295</SUB>> ]
+"4855" [label = <(GetZ,InvokeWithVarArgs(soa, obj, mid, args).GetZ())<SUB>1295</SUB>> ]
+"4856" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, obj, mid, args).GetZ)<SUB>1295</SUB>> ]
+"4819" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1292</SUB>> ]
+"4837" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1293</SUB>> ]
+"4857" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1295</SUB>> ]
+"4862" [label = <(FIELD_IDENTIFIER,GetZ,GetZ)<SUB>1295</SUB>> ]
+"4820" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1292</SUB>> ]
+"4824" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1292</SUB>> ]
+"4831" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1292</SUB>> ]
+"4838" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1293</SUB>> ]
+"4842" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1293</SUB>> ]
+"4849" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1293</SUB>> ]
+"4825" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1292</SUB>> ]
+"4843" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1293</SUB>> ]
+"4826" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1292</SUB>> ]
+"4828" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1292</SUB>> ]
+"4844" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1293</SUB>> ]
+"4846" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1293</SUB>> ]
+"4808" [label = <(METHOD,CallNonvirtualBooleanMethodV)<SUB>1290</SUB>> ]
+"4863" [label = <(METHOD_RETURN,jboolean)<SUB>1290</SUB>> ]
+  "4815" -> "4820" 
+  "4815" -> "4833" 
+  "4833" -> "4838" 
+  "4833" -> "4852" 
+  "4852" -> "4857" 
+  "4854" -> "4863" 
+  "4855" -> "4854" 
+  "4856" -> "4855" 
+  "4819" -> "4826" 
+  "4819" -> "4833" 
+  "4837" -> "4844" 
+  "4837" -> "4852" 
+  "4857" -> "4862" 
+  "4862" -> "4856" 
+  "4820" -> "4819" 
+  "4824" -> "4831" 
+  "4831" -> "4863" 
+  "4838" -> "4837" 
+  "4842" -> "4849" 
+  "4849" -> "4863" 
+  "4825" -> "4824" 
+  "4843" -> "4842" 
+  "4826" -> "4828" 
+  "4828" -> "4825" 
+  "4844" -> "4846" 
+  "4846" -> "4843" 
+  "4808" -> "4815" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/103-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/103-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/103-cfg.dot	2023-06-07 19:35:28.277384343 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/103-cfg.dot	2023-06-07 19:35:34.807383771 +0330
@@ -1,63 +1,53 @@
-digraph "CallNonvirtualObjectMethodV" {  
-"4809" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(obj))<SUB>1340</SUB>> ]
-"4827" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>1341</SUB>> ]
-"4846" [label = <(soa,soa(env))<SUB>1342</SUB>> ]
-"4849" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, args)))<SUB>1343</SUB>> ]
-"4855" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());)<SUB>1344</SUB>> ]
-"4850" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1343</SUB>> ]
-"4856" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>1344</SUB>> ]
-"4857" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>1344</SUB>> ]
-"4862" [label = <(GetL,result.GetL())<SUB>1344</SUB>> ]
-"4813" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1340</SUB>> ]
-"4831" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1341</SUB>> ]
-"4858" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1344</SUB>> ]
-"4863" [label = <(&lt;operator&gt;.fieldAccess,result.GetL)<SUB>1344</SUB>> ]
-"4814" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1340</SUB>> ]
-"4818" [label = <(CHECK_NON_NULL_ARGUMENT(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1340</SUB>> ]
-"4825" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(obj),CHECK_NON_NULL_ARGUMENT(obj))<SUB>1340</SUB>> ]
-"4832" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1341</SUB>> ]
-"4836" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1341</SUB>> ]
-"4843" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>1341</SUB>> ]
-"4860" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1344</SUB>> ]
-"4865" [label = <(FIELD_IDENTIFIER,GetL,GetL)<SUB>1344</SUB>> ]
-"4819" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1340</SUB>> ]
-"4837" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1341</SUB>> ]
-"4820" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1340</SUB>> ]
-"4822" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1340</SUB>> ]
-"4838" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1341</SUB>> ]
-"4840" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1341</SUB>> ]
-"4802" [label = <(METHOD,CallNonvirtualObjectMethodV)<SUB>1338</SUB>> ]
-"4866" [label = <(METHOD_RETURN,jobject)<SUB>1338</SUB>> ]
-  "4809" -> "4814" 
-  "4809" -> "4827" 
-  "4827" -> "4832" 
-  "4827" -> "4846" 
-  "4846" -> "4850" 
-  "4849" -> "4860" 
-  "4855" -> "4866" 
-  "4850" -> "4849" 
-  "4856" -> "4855" 
-  "4857" -> "4865" 
-  "4862" -> "4856" 
-  "4813" -> "4820" 
-  "4813" -> "4827" 
-  "4831" -> "4838" 
-  "4831" -> "4846" 
-  "4858" -> "4857" 
-  "4863" -> "4862" 
-  "4814" -> "4813" 
-  "4818" -> "4825" 
-  "4825" -> "4866" 
-  "4832" -> "4831" 
-  "4836" -> "4843" 
-  "4843" -> "4866" 
-  "4860" -> "4858" 
-  "4865" -> "4863" 
-  "4819" -> "4818" 
-  "4837" -> "4836" 
-  "4820" -> "4822" 
-  "4822" -> "4819" 
-  "4838" -> "4840" 
-  "4840" -> "4837" 
-  "4802" -> "4809" 
+digraph "CallNonvirtualBooleanMethodA" {  
+"4872" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1300</SUB>> ]
+"4890" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1301</SUB>> ]
+"4909" [label = <(soa,soa(env))<SUB>1302</SUB>> ]
+"4911" [label = <(RETURN,return InvokeWithJValues(soa, obj, mid, args).GetZ();,return InvokeWithJValues(soa, obj, mid, args).GetZ();)<SUB>1303</SUB>> ]
+"4912" [label = <(GetZ,InvokeWithJValues(soa, obj, mid, args).GetZ())<SUB>1303</SUB>> ]
+"4913" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, obj, mid, args).GetZ)<SUB>1303</SUB>> ]
+"4876" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1300</SUB>> ]
+"4894" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1301</SUB>> ]
+"4914" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1303</SUB>> ]
+"4919" [label = <(FIELD_IDENTIFIER,GetZ,GetZ)<SUB>1303</SUB>> ]
+"4877" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1300</SUB>> ]
+"4881" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1300</SUB>> ]
+"4888" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1300</SUB>> ]
+"4895" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1301</SUB>> ]
+"4899" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1301</SUB>> ]
+"4906" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1301</SUB>> ]
+"4882" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1300</SUB>> ]
+"4900" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1301</SUB>> ]
+"4883" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1300</SUB>> ]
+"4885" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1300</SUB>> ]
+"4901" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1301</SUB>> ]
+"4903" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1301</SUB>> ]
+"4865" [label = <(METHOD,CallNonvirtualBooleanMethodA)<SUB>1298</SUB>> ]
+"4920" [label = <(METHOD_RETURN,jboolean)<SUB>1298</SUB>> ]
+  "4872" -> "4877" 
+  "4872" -> "4890" 
+  "4890" -> "4895" 
+  "4890" -> "4909" 
+  "4909" -> "4914" 
+  "4911" -> "4920" 
+  "4912" -> "4911" 
+  "4913" -> "4912" 
+  "4876" -> "4883" 
+  "4876" -> "4890" 
+  "4894" -> "4901" 
+  "4894" -> "4909" 
+  "4914" -> "4919" 
+  "4919" -> "4913" 
+  "4877" -> "4876" 
+  "4881" -> "4888" 
+  "4888" -> "4920" 
+  "4895" -> "4894" 
+  "4899" -> "4906" 
+  "4906" -> "4920" 
+  "4882" -> "4881" 
+  "4900" -> "4899" 
+  "4883" -> "4885" 
+  "4885" -> "4882" 
+  "4901" -> "4903" 
+  "4903" -> "4900" 
+  "4865" -> "4872" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/104-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/104-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/104-cfg.dot	2023-06-07 19:35:28.277384343 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/104-cfg.dot	2023-06-07 19:35:34.807383771 +0330
@@ -1,63 +1,61 @@
-digraph "CallNonvirtualObjectMethodA" {  
-"4875" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(obj))<SUB>1349</SUB>> ]
-"4893" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>1350</SUB>> ]
-"4912" [label = <(soa,soa(env))<SUB>1351</SUB>> ]
-"4915" [label = <(result,result(InvokeWithJValues(soa, obj, mid, args)))<SUB>1352</SUB>> ]
-"4921" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());)<SUB>1353</SUB>> ]
-"4916" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1352</SUB>> ]
-"4922" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>1353</SUB>> ]
-"4923" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>1353</SUB>> ]
-"4928" [label = <(GetL,result.GetL())<SUB>1353</SUB>> ]
-"4879" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1349</SUB>> ]
-"4897" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1350</SUB>> ]
-"4924" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1353</SUB>> ]
-"4929" [label = <(&lt;operator&gt;.fieldAccess,result.GetL)<SUB>1353</SUB>> ]
-"4880" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1349</SUB>> ]
-"4884" [label = <(CHECK_NON_NULL_ARGUMENT(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1349</SUB>> ]
-"4891" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(obj),CHECK_NON_NULL_ARGUMENT(obj))<SUB>1349</SUB>> ]
-"4898" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1350</SUB>> ]
-"4902" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1350</SUB>> ]
-"4909" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>1350</SUB>> ]
-"4926" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1353</SUB>> ]
-"4931" [label = <(FIELD_IDENTIFIER,GetL,GetL)<SUB>1353</SUB>> ]
-"4885" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1349</SUB>> ]
-"4903" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1350</SUB>> ]
-"4886" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1349</SUB>> ]
-"4888" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1349</SUB>> ]
-"4904" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1350</SUB>> ]
-"4906" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1350</SUB>> ]
-"4868" [label = <(METHOD,CallNonvirtualObjectMethodA)<SUB>1347</SUB>> ]
-"4932" [label = <(METHOD_RETURN,jobject)<SUB>1347</SUB>> ]
-  "4875" -> "4880" 
-  "4875" -> "4893" 
-  "4893" -> "4898" 
-  "4893" -> "4912" 
-  "4912" -> "4916" 
-  "4915" -> "4926" 
-  "4921" -> "4932" 
-  "4916" -> "4915" 
-  "4922" -> "4921" 
-  "4923" -> "4931" 
-  "4928" -> "4922" 
-  "4879" -> "4886" 
-  "4879" -> "4893" 
-  "4897" -> "4904" 
-  "4897" -> "4912" 
-  "4924" -> "4923" 
-  "4929" -> "4928" 
-  "4880" -> "4879" 
-  "4884" -> "4891" 
-  "4891" -> "4932" 
-  "4898" -> "4897" 
-  "4902" -> "4909" 
-  "4909" -> "4932" 
-  "4926" -> "4924" 
-  "4931" -> "4929" 
-  "4885" -> "4884" 
-  "4903" -> "4902" 
-  "4886" -> "4888" 
-  "4888" -> "4885" 
-  "4904" -> "4906" 
-  "4906" -> "4903" 
-  "4868" -> "4875" 
+digraph "CallNonvirtualByteMethod" {  
+"4929" [label = <(va_start,va_start(ap, mid))<SUB>1308</SUB>> ]
+"4933" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1309</SUB>> ]
+"4936" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1310</SUB>> ]
+"4954" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1311</SUB>> ]
+"4973" [label = <(soa,soa(env))<SUB>1312</SUB>> ]
+"4976" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, ap)))<SUB>1313</SUB>> ]
+"4982" [label = <(RETURN,return result.GetB();,return result.GetB();)<SUB>1314</SUB>> ]
+"4934" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1309</SUB>> ]
+"4977" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1313</SUB>> ]
+"4983" [label = <(GetB,result.GetB())<SUB>1314</SUB>> ]
+"4984" [label = <(&lt;operator&gt;.fieldAccess,result.GetB)<SUB>1314</SUB>> ]
+"4940" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1310</SUB>> ]
+"4958" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1311</SUB>> ]
+"4986" [label = <(FIELD_IDENTIFIER,GetB,GetB)<SUB>1314</SUB>> ]
+"4941" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1310</SUB>> ]
+"4945" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1310</SUB>> ]
+"4952" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1310</SUB>> ]
+"4959" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1311</SUB>> ]
+"4963" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1311</SUB>> ]
+"4970" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1311</SUB>> ]
+"4946" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1310</SUB>> ]
+"4964" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1311</SUB>> ]
+"4947" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1310</SUB>> ]
+"4949" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1310</SUB>> ]
+"4965" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1311</SUB>> ]
+"4967" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1311</SUB>> ]
+"4922" [label = <(METHOD,CallNonvirtualByteMethod)<SUB>1306</SUB>> ]
+"4987" [label = <(METHOD_RETURN,jbyte)<SUB>1306</SUB>> ]
+  "4929" -> "4934" 
+  "4933" -> "4936" 
+  "4936" -> "4941" 
+  "4936" -> "4954" 
+  "4954" -> "4959" 
+  "4954" -> "4973" 
+  "4973" -> "4977" 
+  "4976" -> "4986" 
+  "4982" -> "4987" 
+  "4934" -> "4933" 
+  "4977" -> "4976" 
+  "4983" -> "4982" 
+  "4984" -> "4983" 
+  "4940" -> "4947" 
+  "4940" -> "4954" 
+  "4958" -> "4965" 
+  "4958" -> "4973" 
+  "4986" -> "4984" 
+  "4941" -> "4940" 
+  "4945" -> "4952" 
+  "4952" -> "4987" 
+  "4959" -> "4958" 
+  "4963" -> "4970" 
+  "4970" -> "4987" 
+  "4946" -> "4945" 
+  "4964" -> "4963" 
+  "4947" -> "4949" 
+  "4949" -> "4946" 
+  "4965" -> "4967" 
+  "4967" -> "4964" 
+  "4922" -> "4929" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/105-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/105-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/105-cfg.dot	2023-06-07 19:35:28.277384343 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/105-cfg.dot	2023-06-07 19:35:34.807383771 +0330
@@ -1,61 +1,53 @@
-digraph "CallNonvirtualBooleanMethod" {  
-"4941" [label = <(va_start,va_start(ap, mid))<SUB>1359</SUB>> ]
-"4945" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1360</SUB>> ]
-"4948" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1361</SUB>> ]
-"4966" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1362</SUB>> ]
-"4985" [label = <(soa,soa(env))<SUB>1363</SUB>> ]
-"4988" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, ap)))<SUB>1364</SUB>> ]
-"4994" [label = <(RETURN,return result.GetZ();,return result.GetZ();)<SUB>1365</SUB>> ]
-"4946" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1360</SUB>> ]
-"4989" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1364</SUB>> ]
-"4995" [label = <(GetZ,result.GetZ())<SUB>1365</SUB>> ]
-"4996" [label = <(&lt;operator&gt;.fieldAccess,result.GetZ)<SUB>1365</SUB>> ]
-"4952" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1361</SUB>> ]
-"4970" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1362</SUB>> ]
-"4998" [label = <(FIELD_IDENTIFIER,GetZ,GetZ)<SUB>1365</SUB>> ]
-"4953" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1361</SUB>> ]
-"4957" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1361</SUB>> ]
-"4964" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1361</SUB>> ]
-"4971" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1362</SUB>> ]
-"4975" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1362</SUB>> ]
-"4982" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1362</SUB>> ]
-"4958" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1361</SUB>> ]
-"4976" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1362</SUB>> ]
-"4959" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1361</SUB>> ]
-"4961" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1361</SUB>> ]
-"4977" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1362</SUB>> ]
-"4979" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1362</SUB>> ]
-"4934" [label = <(METHOD,CallNonvirtualBooleanMethod)<SUB>1356</SUB>> ]
-"4999" [label = <(METHOD_RETURN,jboolean)<SUB>1356</SUB>> ]
-  "4941" -> "4946" 
-  "4945" -> "4948" 
-  "4948" -> "4953" 
-  "4948" -> "4966" 
-  "4966" -> "4971" 
-  "4966" -> "4985" 
-  "4985" -> "4989" 
-  "4988" -> "4998" 
-  "4994" -> "4999" 
-  "4946" -> "4945" 
-  "4989" -> "4988" 
-  "4995" -> "4994" 
-  "4996" -> "4995" 
-  "4952" -> "4959" 
-  "4952" -> "4966" 
-  "4970" -> "4977" 
-  "4970" -> "4985" 
-  "4998" -> "4996" 
-  "4953" -> "4952" 
-  "4957" -> "4964" 
-  "4964" -> "4999" 
-  "4971" -> "4970" 
-  "4975" -> "4982" 
-  "4982" -> "4999" 
-  "4958" -> "4957" 
-  "4976" -> "4975" 
-  "4959" -> "4961" 
-  "4961" -> "4958" 
-  "4977" -> "4979" 
-  "4979" -> "4976" 
-  "4934" -> "4941" 
+digraph "CallNonvirtualByteMethodV" {  
+"4996" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1319</SUB>> ]
+"5014" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1320</SUB>> ]
+"5033" [label = <(soa,soa(env))<SUB>1321</SUB>> ]
+"5035" [label = <(RETURN,return InvokeWithVarArgs(soa, obj, mid, args).GetB();,return InvokeWithVarArgs(soa, obj, mid, args).GetB();)<SUB>1322</SUB>> ]
+"5036" [label = <(GetB,InvokeWithVarArgs(soa, obj, mid, args).GetB())<SUB>1322</SUB>> ]
+"5037" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, obj, mid, args).GetB)<SUB>1322</SUB>> ]
+"5000" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1319</SUB>> ]
+"5018" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1320</SUB>> ]
+"5038" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1322</SUB>> ]
+"5043" [label = <(FIELD_IDENTIFIER,GetB,GetB)<SUB>1322</SUB>> ]
+"5001" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1319</SUB>> ]
+"5005" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1319</SUB>> ]
+"5012" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1319</SUB>> ]
+"5019" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1320</SUB>> ]
+"5023" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1320</SUB>> ]
+"5030" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1320</SUB>> ]
+"5006" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1319</SUB>> ]
+"5024" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1320</SUB>> ]
+"5007" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1319</SUB>> ]
+"5009" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1319</SUB>> ]
+"5025" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1320</SUB>> ]
+"5027" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1320</SUB>> ]
+"4989" [label = <(METHOD,CallNonvirtualByteMethodV)<SUB>1317</SUB>> ]
+"5044" [label = <(METHOD_RETURN,jbyte)<SUB>1317</SUB>> ]
+  "4996" -> "5001" 
+  "4996" -> "5014" 
+  "5014" -> "5019" 
+  "5014" -> "5033" 
+  "5033" -> "5038" 
+  "5035" -> "5044" 
+  "5036" -> "5035" 
+  "5037" -> "5036" 
+  "5000" -> "5007" 
+  "5000" -> "5014" 
+  "5018" -> "5025" 
+  "5018" -> "5033" 
+  "5038" -> "5043" 
+  "5043" -> "5037" 
+  "5001" -> "5000" 
+  "5005" -> "5012" 
+  "5012" -> "5044" 
+  "5019" -> "5018" 
+  "5023" -> "5030" 
+  "5030" -> "5044" 
+  "5006" -> "5005" 
+  "5024" -> "5023" 
+  "5007" -> "5009" 
+  "5009" -> "5006" 
+  "5025" -> "5027" 
+  "5027" -> "5024" 
+  "4989" -> "4996" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/106-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/106-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/106-cfg.dot	2023-06-07 19:35:28.287384344 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/106-cfg.dot	2023-06-07 19:35:34.807383771 +0330
@@ -1,53 +1,53 @@
-digraph "CallNonvirtualBooleanMethodV" {  
-"5008" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1370</SUB>> ]
-"5026" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1371</SUB>> ]
-"5045" [label = <(soa,soa(env))<SUB>1372</SUB>> ]
-"5047" [label = <(RETURN,return InvokeWithVarArgs(soa, obj, mid, args).GetZ();,return InvokeWithVarArgs(soa, obj, mid, args).GetZ();)<SUB>1373</SUB>> ]
-"5048" [label = <(GetZ,InvokeWithVarArgs(soa, obj, mid, args).GetZ())<SUB>1373</SUB>> ]
-"5049" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, obj, mid, args).GetZ)<SUB>1373</SUB>> ]
-"5012" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1370</SUB>> ]
-"5030" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1371</SUB>> ]
-"5050" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1373</SUB>> ]
-"5055" [label = <(FIELD_IDENTIFIER,GetZ,GetZ)<SUB>1373</SUB>> ]
-"5013" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1370</SUB>> ]
-"5017" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1370</SUB>> ]
-"5024" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1370</SUB>> ]
-"5031" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1371</SUB>> ]
-"5035" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1371</SUB>> ]
-"5042" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1371</SUB>> ]
-"5018" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1370</SUB>> ]
-"5036" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1371</SUB>> ]
-"5019" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1370</SUB>> ]
-"5021" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1370</SUB>> ]
-"5037" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1371</SUB>> ]
-"5039" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1371</SUB>> ]
-"5001" [label = <(METHOD,CallNonvirtualBooleanMethodV)<SUB>1368</SUB>> ]
-"5056" [label = <(METHOD_RETURN,jboolean)<SUB>1368</SUB>> ]
-  "5008" -> "5013" 
-  "5008" -> "5026" 
-  "5026" -> "5031" 
-  "5026" -> "5045" 
-  "5045" -> "5050" 
-  "5047" -> "5056" 
-  "5048" -> "5047" 
-  "5049" -> "5048" 
-  "5012" -> "5019" 
-  "5012" -> "5026" 
-  "5030" -> "5037" 
-  "5030" -> "5045" 
-  "5050" -> "5055" 
-  "5055" -> "5049" 
-  "5013" -> "5012" 
-  "5017" -> "5024" 
-  "5024" -> "5056" 
-  "5031" -> "5030" 
-  "5035" -> "5042" 
-  "5042" -> "5056" 
-  "5018" -> "5017" 
-  "5036" -> "5035" 
-  "5019" -> "5021" 
-  "5021" -> "5018" 
-  "5037" -> "5039" 
-  "5039" -> "5036" 
-  "5001" -> "5008" 
+digraph "CallNonvirtualByteMethodA" {  
+"5053" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1327</SUB>> ]
+"5071" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1328</SUB>> ]
+"5090" [label = <(soa,soa(env))<SUB>1329</SUB>> ]
+"5092" [label = <(RETURN,return InvokeWithJValues(soa, obj, mid, args).GetB();,return InvokeWithJValues(soa, obj, mid, args).GetB();)<SUB>1330</SUB>> ]
+"5093" [label = <(GetB,InvokeWithJValues(soa, obj, mid, args).GetB())<SUB>1330</SUB>> ]
+"5094" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, obj, mid, args).GetB)<SUB>1330</SUB>> ]
+"5057" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1327</SUB>> ]
+"5075" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1328</SUB>> ]
+"5095" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1330</SUB>> ]
+"5100" [label = <(FIELD_IDENTIFIER,GetB,GetB)<SUB>1330</SUB>> ]
+"5058" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1327</SUB>> ]
+"5062" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1327</SUB>> ]
+"5069" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1327</SUB>> ]
+"5076" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1328</SUB>> ]
+"5080" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1328</SUB>> ]
+"5087" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1328</SUB>> ]
+"5063" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1327</SUB>> ]
+"5081" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1328</SUB>> ]
+"5064" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1327</SUB>> ]
+"5066" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1327</SUB>> ]
+"5082" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1328</SUB>> ]
+"5084" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1328</SUB>> ]
+"5046" [label = <(METHOD,CallNonvirtualByteMethodA)<SUB>1325</SUB>> ]
+"5101" [label = <(METHOD_RETURN,jbyte)<SUB>1325</SUB>> ]
+  "5053" -> "5058" 
+  "5053" -> "5071" 
+  "5071" -> "5076" 
+  "5071" -> "5090" 
+  "5090" -> "5095" 
+  "5092" -> "5101" 
+  "5093" -> "5092" 
+  "5094" -> "5093" 
+  "5057" -> "5064" 
+  "5057" -> "5071" 
+  "5075" -> "5082" 
+  "5075" -> "5090" 
+  "5095" -> "5100" 
+  "5100" -> "5094" 
+  "5058" -> "5057" 
+  "5062" -> "5069" 
+  "5069" -> "5101" 
+  "5076" -> "5075" 
+  "5080" -> "5087" 
+  "5087" -> "5101" 
+  "5063" -> "5062" 
+  "5081" -> "5080" 
+  "5064" -> "5066" 
+  "5066" -> "5063" 
+  "5082" -> "5084" 
+  "5084" -> "5081" 
+  "5046" -> "5053" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/107-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/107-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/107-cfg.dot	2023-06-07 19:35:28.287384344 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/107-cfg.dot	2023-06-07 19:35:34.807383771 +0330
@@ -1,53 +1,61 @@
-digraph "CallNonvirtualBooleanMethodA" {  
-"5065" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1378</SUB>> ]
-"5083" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1379</SUB>> ]
-"5102" [label = <(soa,soa(env))<SUB>1380</SUB>> ]
-"5104" [label = <(RETURN,return InvokeWithJValues(soa, obj, mid, args).GetZ();,return InvokeWithJValues(soa, obj, mid, args).GetZ();)<SUB>1381</SUB>> ]
-"5105" [label = <(GetZ,InvokeWithJValues(soa, obj, mid, args).GetZ())<SUB>1381</SUB>> ]
-"5106" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, obj, mid, args).GetZ)<SUB>1381</SUB>> ]
-"5069" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1378</SUB>> ]
-"5087" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1379</SUB>> ]
-"5107" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1381</SUB>> ]
-"5112" [label = <(FIELD_IDENTIFIER,GetZ,GetZ)<SUB>1381</SUB>> ]
-"5070" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1378</SUB>> ]
-"5074" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1378</SUB>> ]
-"5081" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1378</SUB>> ]
-"5088" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1379</SUB>> ]
-"5092" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1379</SUB>> ]
-"5099" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1379</SUB>> ]
-"5075" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1378</SUB>> ]
-"5093" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1379</SUB>> ]
-"5076" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1378</SUB>> ]
-"5078" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1378</SUB>> ]
-"5094" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1379</SUB>> ]
-"5096" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1379</SUB>> ]
-"5058" [label = <(METHOD,CallNonvirtualBooleanMethodA)<SUB>1376</SUB>> ]
-"5113" [label = <(METHOD_RETURN,jboolean)<SUB>1376</SUB>> ]
-  "5065" -> "5070" 
-  "5065" -> "5083" 
-  "5083" -> "5088" 
-  "5083" -> "5102" 
-  "5102" -> "5107" 
-  "5104" -> "5113" 
-  "5105" -> "5104" 
-  "5106" -> "5105" 
-  "5069" -> "5076" 
-  "5069" -> "5083" 
-  "5087" -> "5094" 
-  "5087" -> "5102" 
-  "5107" -> "5112" 
-  "5112" -> "5106" 
-  "5070" -> "5069" 
-  "5074" -> "5081" 
-  "5081" -> "5113" 
-  "5088" -> "5087" 
-  "5092" -> "5099" 
-  "5099" -> "5113" 
-  "5075" -> "5074" 
-  "5093" -> "5092" 
-  "5076" -> "5078" 
-  "5078" -> "5075" 
-  "5094" -> "5096" 
-  "5096" -> "5093" 
-  "5058" -> "5065" 
+digraph "CallNonvirtualCharMethod" {  
+"5110" [label = <(va_start,va_start(ap, mid))<SUB>1335</SUB>> ]
+"5114" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1336</SUB>> ]
+"5117" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1337</SUB>> ]
+"5135" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1338</SUB>> ]
+"5154" [label = <(soa,soa(env))<SUB>1339</SUB>> ]
+"5157" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, ap)))<SUB>1340</SUB>> ]
+"5163" [label = <(RETURN,return result.GetC();,return result.GetC();)<SUB>1341</SUB>> ]
+"5115" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1336</SUB>> ]
+"5158" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1340</SUB>> ]
+"5164" [label = <(GetC,result.GetC())<SUB>1341</SUB>> ]
+"5165" [label = <(&lt;operator&gt;.fieldAccess,result.GetC)<SUB>1341</SUB>> ]
+"5121" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1337</SUB>> ]
+"5139" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1338</SUB>> ]
+"5167" [label = <(FIELD_IDENTIFIER,GetC,GetC)<SUB>1341</SUB>> ]
+"5122" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1337</SUB>> ]
+"5126" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1337</SUB>> ]
+"5133" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1337</SUB>> ]
+"5140" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1338</SUB>> ]
+"5144" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1338</SUB>> ]
+"5151" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1338</SUB>> ]
+"5127" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1337</SUB>> ]
+"5145" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1338</SUB>> ]
+"5128" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1337</SUB>> ]
+"5130" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1337</SUB>> ]
+"5146" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1338</SUB>> ]
+"5148" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1338</SUB>> ]
+"5103" [label = <(METHOD,CallNonvirtualCharMethod)<SUB>1333</SUB>> ]
+"5168" [label = <(METHOD_RETURN,jchar)<SUB>1333</SUB>> ]
+  "5110" -> "5115" 
+  "5114" -> "5117" 
+  "5117" -> "5122" 
+  "5117" -> "5135" 
+  "5135" -> "5140" 
+  "5135" -> "5154" 
+  "5154" -> "5158" 
+  "5157" -> "5167" 
+  "5163" -> "5168" 
+  "5115" -> "5114" 
+  "5158" -> "5157" 
+  "5164" -> "5163" 
+  "5165" -> "5164" 
+  "5121" -> "5128" 
+  "5121" -> "5135" 
+  "5139" -> "5146" 
+  "5139" -> "5154" 
+  "5167" -> "5165" 
+  "5122" -> "5121" 
+  "5126" -> "5133" 
+  "5133" -> "5168" 
+  "5140" -> "5139" 
+  "5144" -> "5151" 
+  "5151" -> "5168" 
+  "5127" -> "5126" 
+  "5145" -> "5144" 
+  "5128" -> "5130" 
+  "5130" -> "5127" 
+  "5146" -> "5148" 
+  "5148" -> "5145" 
+  "5103" -> "5110" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/108-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/108-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/108-cfg.dot	2023-06-07 19:35:28.287384344 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/108-cfg.dot	2023-06-07 19:35:34.807383771 +0330
@@ -1,61 +1,53 @@
-digraph "CallNonvirtualByteMethod" {  
-"5122" [label = <(va_start,va_start(ap, mid))<SUB>1386</SUB>> ]
-"5126" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1387</SUB>> ]
-"5129" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1388</SUB>> ]
-"5147" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1389</SUB>> ]
-"5166" [label = <(soa,soa(env))<SUB>1390</SUB>> ]
-"5169" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, ap)))<SUB>1391</SUB>> ]
-"5175" [label = <(RETURN,return result.GetB();,return result.GetB();)<SUB>1392</SUB>> ]
-"5127" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1387</SUB>> ]
-"5170" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1391</SUB>> ]
-"5176" [label = <(GetB,result.GetB())<SUB>1392</SUB>> ]
-"5177" [label = <(&lt;operator&gt;.fieldAccess,result.GetB)<SUB>1392</SUB>> ]
-"5133" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1388</SUB>> ]
-"5151" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1389</SUB>> ]
-"5179" [label = <(FIELD_IDENTIFIER,GetB,GetB)<SUB>1392</SUB>> ]
-"5134" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1388</SUB>> ]
-"5138" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1388</SUB>> ]
-"5145" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1388</SUB>> ]
-"5152" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1389</SUB>> ]
-"5156" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1389</SUB>> ]
-"5163" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1389</SUB>> ]
-"5139" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1388</SUB>> ]
-"5157" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1389</SUB>> ]
-"5140" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1388</SUB>> ]
-"5142" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1388</SUB>> ]
-"5158" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1389</SUB>> ]
-"5160" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1389</SUB>> ]
-"5115" [label = <(METHOD,CallNonvirtualByteMethod)<SUB>1384</SUB>> ]
-"5180" [label = <(METHOD_RETURN,jbyte)<SUB>1384</SUB>> ]
-  "5122" -> "5127" 
-  "5126" -> "5129" 
-  "5129" -> "5134" 
-  "5129" -> "5147" 
-  "5147" -> "5152" 
-  "5147" -> "5166" 
-  "5166" -> "5170" 
-  "5169" -> "5179" 
-  "5175" -> "5180" 
-  "5127" -> "5126" 
-  "5170" -> "5169" 
-  "5176" -> "5175" 
-  "5177" -> "5176" 
-  "5133" -> "5140" 
-  "5133" -> "5147" 
-  "5151" -> "5158" 
-  "5151" -> "5166" 
-  "5179" -> "5177" 
-  "5134" -> "5133" 
-  "5138" -> "5145" 
-  "5145" -> "5180" 
-  "5152" -> "5151" 
-  "5156" -> "5163" 
-  "5163" -> "5180" 
-  "5139" -> "5138" 
-  "5157" -> "5156" 
-  "5140" -> "5142" 
-  "5142" -> "5139" 
-  "5158" -> "5160" 
-  "5160" -> "5157" 
-  "5115" -> "5122" 
+digraph "CallNonvirtualCharMethodV" {  
+"5177" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1346</SUB>> ]
+"5195" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1347</SUB>> ]
+"5214" [label = <(soa,soa(env))<SUB>1348</SUB>> ]
+"5216" [label = <(RETURN,return InvokeWithVarArgs(soa, obj, mid, args).GetC();,return InvokeWithVarArgs(soa, obj, mid, args).GetC();)<SUB>1349</SUB>> ]
+"5217" [label = <(GetC,InvokeWithVarArgs(soa, obj, mid, args).GetC())<SUB>1349</SUB>> ]
+"5218" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, obj, mid, args).GetC)<SUB>1349</SUB>> ]
+"5181" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1346</SUB>> ]
+"5199" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1347</SUB>> ]
+"5219" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1349</SUB>> ]
+"5224" [label = <(FIELD_IDENTIFIER,GetC,GetC)<SUB>1349</SUB>> ]
+"5182" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1346</SUB>> ]
+"5186" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1346</SUB>> ]
+"5193" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1346</SUB>> ]
+"5200" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1347</SUB>> ]
+"5204" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1347</SUB>> ]
+"5211" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1347</SUB>> ]
+"5187" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1346</SUB>> ]
+"5205" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1347</SUB>> ]
+"5188" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1346</SUB>> ]
+"5190" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1346</SUB>> ]
+"5206" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1347</SUB>> ]
+"5208" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1347</SUB>> ]
+"5170" [label = <(METHOD,CallNonvirtualCharMethodV)<SUB>1344</SUB>> ]
+"5225" [label = <(METHOD_RETURN,jchar)<SUB>1344</SUB>> ]
+  "5177" -> "5182" 
+  "5177" -> "5195" 
+  "5195" -> "5200" 
+  "5195" -> "5214" 
+  "5214" -> "5219" 
+  "5216" -> "5225" 
+  "5217" -> "5216" 
+  "5218" -> "5217" 
+  "5181" -> "5188" 
+  "5181" -> "5195" 
+  "5199" -> "5206" 
+  "5199" -> "5214" 
+  "5219" -> "5224" 
+  "5224" -> "5218" 
+  "5182" -> "5181" 
+  "5186" -> "5193" 
+  "5193" -> "5225" 
+  "5200" -> "5199" 
+  "5204" -> "5211" 
+  "5211" -> "5225" 
+  "5187" -> "5186" 
+  "5205" -> "5204" 
+  "5188" -> "5190" 
+  "5190" -> "5187" 
+  "5206" -> "5208" 
+  "5208" -> "5205" 
+  "5170" -> "5177" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/109-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/109-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/109-cfg.dot	2023-06-07 19:35:28.287384344 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/109-cfg.dot	2023-06-07 19:35:34.807383771 +0330
@@ -1,53 +1,53 @@
-digraph "CallNonvirtualByteMethodV" {  
-"5189" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1397</SUB>> ]
-"5207" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1398</SUB>> ]
-"5226" [label = <(soa,soa(env))<SUB>1399</SUB>> ]
-"5228" [label = <(RETURN,return InvokeWithVarArgs(soa, obj, mid, args).GetB();,return InvokeWithVarArgs(soa, obj, mid, args).GetB();)<SUB>1400</SUB>> ]
-"5229" [label = <(GetB,InvokeWithVarArgs(soa, obj, mid, args).GetB())<SUB>1400</SUB>> ]
-"5230" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, obj, mid, args).GetB)<SUB>1400</SUB>> ]
-"5193" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1397</SUB>> ]
-"5211" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1398</SUB>> ]
-"5231" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1400</SUB>> ]
-"5236" [label = <(FIELD_IDENTIFIER,GetB,GetB)<SUB>1400</SUB>> ]
-"5194" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1397</SUB>> ]
-"5198" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1397</SUB>> ]
-"5205" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1397</SUB>> ]
-"5212" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1398</SUB>> ]
-"5216" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1398</SUB>> ]
-"5223" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1398</SUB>> ]
-"5199" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1397</SUB>> ]
-"5217" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1398</SUB>> ]
-"5200" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1397</SUB>> ]
-"5202" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1397</SUB>> ]
-"5218" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1398</SUB>> ]
-"5220" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1398</SUB>> ]
-"5182" [label = <(METHOD,CallNonvirtualByteMethodV)<SUB>1395</SUB>> ]
-"5237" [label = <(METHOD_RETURN,jbyte)<SUB>1395</SUB>> ]
-  "5189" -> "5194" 
-  "5189" -> "5207" 
-  "5207" -> "5212" 
-  "5207" -> "5226" 
-  "5226" -> "5231" 
-  "5228" -> "5237" 
-  "5229" -> "5228" 
-  "5230" -> "5229" 
-  "5193" -> "5200" 
-  "5193" -> "5207" 
-  "5211" -> "5218" 
-  "5211" -> "5226" 
-  "5231" -> "5236" 
-  "5236" -> "5230" 
-  "5194" -> "5193" 
-  "5198" -> "5205" 
-  "5205" -> "5237" 
-  "5212" -> "5211" 
-  "5216" -> "5223" 
-  "5223" -> "5237" 
-  "5199" -> "5198" 
-  "5217" -> "5216" 
-  "5200" -> "5202" 
-  "5202" -> "5199" 
-  "5218" -> "5220" 
-  "5220" -> "5217" 
-  "5182" -> "5189" 
+digraph "CallNonvirtualCharMethodA" {  
+"5234" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1354</SUB>> ]
+"5252" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1355</SUB>> ]
+"5271" [label = <(soa,soa(env))<SUB>1356</SUB>> ]
+"5273" [label = <(RETURN,return InvokeWithJValues(soa, obj, mid, args).GetC();,return InvokeWithJValues(soa, obj, mid, args).GetC();)<SUB>1357</SUB>> ]
+"5274" [label = <(GetC,InvokeWithJValues(soa, obj, mid, args).GetC())<SUB>1357</SUB>> ]
+"5275" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, obj, mid, args).GetC)<SUB>1357</SUB>> ]
+"5238" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1354</SUB>> ]
+"5256" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1355</SUB>> ]
+"5276" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1357</SUB>> ]
+"5281" [label = <(FIELD_IDENTIFIER,GetC,GetC)<SUB>1357</SUB>> ]
+"5239" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1354</SUB>> ]
+"5243" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1354</SUB>> ]
+"5250" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1354</SUB>> ]
+"5257" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1355</SUB>> ]
+"5261" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1355</SUB>> ]
+"5268" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1355</SUB>> ]
+"5244" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1354</SUB>> ]
+"5262" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1355</SUB>> ]
+"5245" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1354</SUB>> ]
+"5247" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1354</SUB>> ]
+"5263" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1355</SUB>> ]
+"5265" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1355</SUB>> ]
+"5227" [label = <(METHOD,CallNonvirtualCharMethodA)<SUB>1352</SUB>> ]
+"5282" [label = <(METHOD_RETURN,jchar)<SUB>1352</SUB>> ]
+  "5234" -> "5239" 
+  "5234" -> "5252" 
+  "5252" -> "5257" 
+  "5252" -> "5271" 
+  "5271" -> "5276" 
+  "5273" -> "5282" 
+  "5274" -> "5273" 
+  "5275" -> "5274" 
+  "5238" -> "5245" 
+  "5238" -> "5252" 
+  "5256" -> "5263" 
+  "5256" -> "5271" 
+  "5276" -> "5281" 
+  "5281" -> "5275" 
+  "5239" -> "5238" 
+  "5243" -> "5250" 
+  "5250" -> "5282" 
+  "5257" -> "5256" 
+  "5261" -> "5268" 
+  "5268" -> "5282" 
+  "5244" -> "5243" 
+  "5262" -> "5261" 
+  "5245" -> "5247" 
+  "5247" -> "5244" 
+  "5263" -> "5265" 
+  "5265" -> "5262" 
+  "5227" -> "5234" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/11-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/11-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/11-cfg.dot	2023-06-07 19:35:28.217384348 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/11-cfg.dot	2023-06-07 19:35:34.737383779 +0330
@@ -1,28 +1,39 @@
-digraph "operator &lt;&lt;" {  
-"313" [label = <(RETURN,return os;,return os;)<SUB>196</SUB>> ]
-"290" [label = <(&lt;operator&gt;.fieldAccess,SharedObjectKind::kRuntime)<SUB>186</SUB>> ]
-"293" [label = <(&lt;operator&gt;.shiftLeft,os &lt;&lt; &quot;Runtime&quot;)<SUB>187</SUB>> ]
-"298" [label = <(&lt;operator&gt;.fieldAccess,SharedObjectKind::kApexModule)<SUB>189</SUB>> ]
-"301" [label = <(&lt;operator&gt;.shiftLeft,os &lt;&lt; &quot;APEX Module&quot;)<SUB>190</SUB>> ]
-"306" [label = <(&lt;operator&gt;.fieldAccess,SharedObjectKind::kOther)<SUB>192</SUB>> ]
-"309" [label = <(&lt;operator&gt;.shiftLeft,os &lt;&lt; &quot;Other&quot;)<SUB>193</SUB>> ]
-"292" [label = <(FIELD_IDENTIFIER,kRuntime,kRuntime)<SUB>186</SUB>> ]
-"300" [label = <(FIELD_IDENTIFIER,kApexModule,kApexModule)<SUB>189</SUB>> ]
-"308" [label = <(FIELD_IDENTIFIER,kOther,kOther)<SUB>192</SUB>> ]
-"282" [label = <(METHOD,operator &lt;&lt;)<SUB>184</SUB>> ]
-"315" [label = <(METHOD_RETURN,ostream)<SUB>184</SUB>> ]
-  "313" -> "315" 
-  "290" -> "293" 
-  "293" -> "313" 
-  "298" -> "301" 
-  "301" -> "313" 
-  "306" -> "309" 
-  "309" -> "313" 
-  "292" -> "290" 
-  "300" -> "298" 
-  "308" -> "306" 
-  "282" -> "292" 
-  "282" -> "300" 
-  "282" -> "308" 
-  "282" -> "313" 
+digraph "BuildCache" {  
+"167" [label = <(DCHECK,DCHECK(!HasCache()))<SUB>142</SUB>> ]
+"171" [label = <(&lt;operator&gt;.assignment,builder_ = &amp;builder)<SUB>144</SUB>> ]
+"175" [label = <(&lt;operator&gt;.assignment,libjavacore_loaded_ = false)<SUB>145</SUB>> ]
+"178" [label = <(&lt;operator&gt;.assignment,libnativehelper_loaded_ = false)<SUB>146</SUB>> ]
+"181" [label = <(&lt;operator&gt;.assignment,libopenjdk_loaded_ = false)<SUB>147</SUB>> ]
+"184" [label = <(dl_iterate_phdr,dl_iterate_phdr(VisitElfInfo, this))<SUB>150</SUB>> ]
+"187" [label = <(&lt;operator&gt;.assignment,memory_type_table_ = builder_-&gt;Build())<SUB>151</SUB>> ]
+"193" [label = <(CHECK,CHECK(libjavacore_loaded_))<SUB>154</SUB>> ]
+"195" [label = <(CHECK,CHECK(libnativehelper_loaded_))<SUB>155</SUB>> ]
+"197" [label = <(CHECK,CHECK(libopenjdk_loaded_))<SUB>156</SUB>> ]
+"199" [label = <(&lt;operator&gt;.assignment,builder_ = nullptr)<SUB>157</SUB>> ]
+"168" [label = <(&lt;operator&gt;.logicalNot,!HasCache())<SUB>142</SUB>> ]
+"173" [label = <(&lt;operator&gt;.addressOf,&amp;builder)<SUB>144</SUB>> ]
+"189" [label = <(Build,builder_-&gt;Build())<SUB>151</SUB>> ]
+"169" [label = <(HasCache,HasCache())<SUB>142</SUB>> ]
+"190" [label = <(&lt;operator&gt;.indirectFieldAccess,builder_-&gt;Build)<SUB>151</SUB>> ]
+"192" [label = <(FIELD_IDENTIFIER,Build,Build)<SUB>151</SUB>> ]
+"165" [label = <(METHOD,BuildCache)<SUB>141</SUB>> ]
+"202" [label = <(METHOD_RETURN,void)<SUB>141</SUB>> ]
+  "167" -> "173" 
+  "171" -> "175" 
+  "175" -> "178" 
+  "178" -> "181" 
+  "181" -> "184" 
+  "184" -> "192" 
+  "187" -> "193" 
+  "193" -> "195" 
+  "195" -> "197" 
+  "197" -> "199" 
+  "199" -> "202" 
+  "168" -> "167" 
+  "173" -> "171" 
+  "189" -> "187" 
+  "169" -> "168" 
+  "190" -> "189" 
+  "192" -> "190" 
+  "165" -> "169" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/110-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/110-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/110-cfg.dot	2023-06-07 19:35:28.287384344 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/110-cfg.dot	2023-06-07 19:35:34.807383771 +0330
@@ -1,53 +1,61 @@
-digraph "CallNonvirtualByteMethodA" {  
-"5246" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1405</SUB>> ]
-"5264" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1406</SUB>> ]
-"5283" [label = <(soa,soa(env))<SUB>1407</SUB>> ]
-"5285" [label = <(RETURN,return InvokeWithJValues(soa, obj, mid, args).GetB();,return InvokeWithJValues(soa, obj, mid, args).GetB();)<SUB>1408</SUB>> ]
-"5286" [label = <(GetB,InvokeWithJValues(soa, obj, mid, args).GetB())<SUB>1408</SUB>> ]
-"5287" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, obj, mid, args).GetB)<SUB>1408</SUB>> ]
-"5250" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1405</SUB>> ]
-"5268" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1406</SUB>> ]
-"5288" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1408</SUB>> ]
-"5293" [label = <(FIELD_IDENTIFIER,GetB,GetB)<SUB>1408</SUB>> ]
-"5251" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1405</SUB>> ]
-"5255" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1405</SUB>> ]
-"5262" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1405</SUB>> ]
-"5269" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1406</SUB>> ]
-"5273" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1406</SUB>> ]
-"5280" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1406</SUB>> ]
-"5256" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1405</SUB>> ]
-"5274" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1406</SUB>> ]
-"5257" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1405</SUB>> ]
-"5259" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1405</SUB>> ]
-"5275" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1406</SUB>> ]
-"5277" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1406</SUB>> ]
-"5239" [label = <(METHOD,CallNonvirtualByteMethodA)<SUB>1403</SUB>> ]
-"5294" [label = <(METHOD_RETURN,jbyte)<SUB>1403</SUB>> ]
-  "5246" -> "5251" 
-  "5246" -> "5264" 
-  "5264" -> "5269" 
-  "5264" -> "5283" 
-  "5283" -> "5288" 
-  "5285" -> "5294" 
-  "5286" -> "5285" 
-  "5287" -> "5286" 
-  "5250" -> "5257" 
-  "5250" -> "5264" 
-  "5268" -> "5275" 
-  "5268" -> "5283" 
-  "5288" -> "5293" 
-  "5293" -> "5287" 
-  "5251" -> "5250" 
-  "5255" -> "5262" 
-  "5262" -> "5294" 
-  "5269" -> "5268" 
-  "5273" -> "5280" 
-  "5280" -> "5294" 
-  "5256" -> "5255" 
-  "5274" -> "5273" 
-  "5257" -> "5259" 
-  "5259" -> "5256" 
-  "5275" -> "5277" 
-  "5277" -> "5274" 
-  "5239" -> "5246" 
+digraph "CallNonvirtualShortMethod" {  
+"5291" [label = <(va_start,va_start(ap, mid))<SUB>1362</SUB>> ]
+"5295" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1363</SUB>> ]
+"5298" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1364</SUB>> ]
+"5316" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1365</SUB>> ]
+"5335" [label = <(soa,soa(env))<SUB>1366</SUB>> ]
+"5338" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, ap)))<SUB>1367</SUB>> ]
+"5344" [label = <(RETURN,return result.GetS();,return result.GetS();)<SUB>1368</SUB>> ]
+"5296" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1363</SUB>> ]
+"5339" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1367</SUB>> ]
+"5345" [label = <(GetS,result.GetS())<SUB>1368</SUB>> ]
+"5346" [label = <(&lt;operator&gt;.fieldAccess,result.GetS)<SUB>1368</SUB>> ]
+"5302" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1364</SUB>> ]
+"5320" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1365</SUB>> ]
+"5348" [label = <(FIELD_IDENTIFIER,GetS,GetS)<SUB>1368</SUB>> ]
+"5303" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1364</SUB>> ]
+"5307" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1364</SUB>> ]
+"5314" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1364</SUB>> ]
+"5321" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1365</SUB>> ]
+"5325" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1365</SUB>> ]
+"5332" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1365</SUB>> ]
+"5308" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1364</SUB>> ]
+"5326" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1365</SUB>> ]
+"5309" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1364</SUB>> ]
+"5311" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1364</SUB>> ]
+"5327" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1365</SUB>> ]
+"5329" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1365</SUB>> ]
+"5284" [label = <(METHOD,CallNonvirtualShortMethod)<SUB>1360</SUB>> ]
+"5349" [label = <(METHOD_RETURN,jshort)<SUB>1360</SUB>> ]
+  "5291" -> "5296" 
+  "5295" -> "5298" 
+  "5298" -> "5303" 
+  "5298" -> "5316" 
+  "5316" -> "5321" 
+  "5316" -> "5335" 
+  "5335" -> "5339" 
+  "5338" -> "5348" 
+  "5344" -> "5349" 
+  "5296" -> "5295" 
+  "5339" -> "5338" 
+  "5345" -> "5344" 
+  "5346" -> "5345" 
+  "5302" -> "5309" 
+  "5302" -> "5316" 
+  "5320" -> "5327" 
+  "5320" -> "5335" 
+  "5348" -> "5346" 
+  "5303" -> "5302" 
+  "5307" -> "5314" 
+  "5314" -> "5349" 
+  "5321" -> "5320" 
+  "5325" -> "5332" 
+  "5332" -> "5349" 
+  "5308" -> "5307" 
+  "5326" -> "5325" 
+  "5309" -> "5311" 
+  "5311" -> "5308" 
+  "5327" -> "5329" 
+  "5329" -> "5326" 
+  "5284" -> "5291" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/111-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/111-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/111-cfg.dot	2023-06-07 19:35:28.287384344 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/111-cfg.dot	2023-06-07 19:35:34.817383772 +0330
@@ -1,61 +1,53 @@
-digraph "CallNonvirtualCharMethod" {  
-"5303" [label = <(va_start,va_start(ap, mid))<SUB>1413</SUB>> ]
-"5307" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1414</SUB>> ]
-"5310" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1415</SUB>> ]
-"5328" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1416</SUB>> ]
-"5347" [label = <(soa,soa(env))<SUB>1417</SUB>> ]
-"5350" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, ap)))<SUB>1418</SUB>> ]
-"5356" [label = <(RETURN,return result.GetC();,return result.GetC();)<SUB>1419</SUB>> ]
-"5308" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1414</SUB>> ]
-"5351" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1418</SUB>> ]
-"5357" [label = <(GetC,result.GetC())<SUB>1419</SUB>> ]
-"5358" [label = <(&lt;operator&gt;.fieldAccess,result.GetC)<SUB>1419</SUB>> ]
-"5314" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1415</SUB>> ]
-"5332" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1416</SUB>> ]
-"5360" [label = <(FIELD_IDENTIFIER,GetC,GetC)<SUB>1419</SUB>> ]
-"5315" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1415</SUB>> ]
-"5319" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1415</SUB>> ]
-"5326" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1415</SUB>> ]
-"5333" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1416</SUB>> ]
-"5337" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1416</SUB>> ]
-"5344" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1416</SUB>> ]
-"5320" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1415</SUB>> ]
-"5338" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1416</SUB>> ]
-"5321" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1415</SUB>> ]
-"5323" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1415</SUB>> ]
-"5339" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1416</SUB>> ]
-"5341" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1416</SUB>> ]
-"5296" [label = <(METHOD,CallNonvirtualCharMethod)<SUB>1411</SUB>> ]
-"5361" [label = <(METHOD_RETURN,jchar)<SUB>1411</SUB>> ]
-  "5303" -> "5308" 
-  "5307" -> "5310" 
-  "5310" -> "5315" 
-  "5310" -> "5328" 
-  "5328" -> "5333" 
-  "5328" -> "5347" 
-  "5347" -> "5351" 
-  "5350" -> "5360" 
-  "5356" -> "5361" 
-  "5308" -> "5307" 
-  "5351" -> "5350" 
-  "5357" -> "5356" 
-  "5358" -> "5357" 
-  "5314" -> "5321" 
-  "5314" -> "5328" 
-  "5332" -> "5339" 
-  "5332" -> "5347" 
-  "5360" -> "5358" 
-  "5315" -> "5314" 
-  "5319" -> "5326" 
-  "5326" -> "5361" 
-  "5333" -> "5332" 
-  "5337" -> "5344" 
-  "5344" -> "5361" 
-  "5320" -> "5319" 
-  "5338" -> "5337" 
-  "5321" -> "5323" 
-  "5323" -> "5320" 
-  "5339" -> "5341" 
-  "5341" -> "5338" 
-  "5296" -> "5303" 
+digraph "CallNonvirtualShortMethodV" {  
+"5358" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1373</SUB>> ]
+"5376" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1374</SUB>> ]
+"5395" [label = <(soa,soa(env))<SUB>1375</SUB>> ]
+"5397" [label = <(RETURN,return InvokeWithVarArgs(soa, obj, mid, args).GetS();,return InvokeWithVarArgs(soa, obj, mid, args).GetS();)<SUB>1376</SUB>> ]
+"5398" [label = <(GetS,InvokeWithVarArgs(soa, obj, mid, args).GetS())<SUB>1376</SUB>> ]
+"5399" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, obj, mid, args).GetS)<SUB>1376</SUB>> ]
+"5362" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1373</SUB>> ]
+"5380" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1374</SUB>> ]
+"5400" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1376</SUB>> ]
+"5405" [label = <(FIELD_IDENTIFIER,GetS,GetS)<SUB>1376</SUB>> ]
+"5363" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1373</SUB>> ]
+"5367" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1373</SUB>> ]
+"5374" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1373</SUB>> ]
+"5381" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1374</SUB>> ]
+"5385" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1374</SUB>> ]
+"5392" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1374</SUB>> ]
+"5368" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1373</SUB>> ]
+"5386" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1374</SUB>> ]
+"5369" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1373</SUB>> ]
+"5371" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1373</SUB>> ]
+"5387" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1374</SUB>> ]
+"5389" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1374</SUB>> ]
+"5351" [label = <(METHOD,CallNonvirtualShortMethodV)<SUB>1371</SUB>> ]
+"5406" [label = <(METHOD_RETURN,jshort)<SUB>1371</SUB>> ]
+  "5358" -> "5363" 
+  "5358" -> "5376" 
+  "5376" -> "5381" 
+  "5376" -> "5395" 
+  "5395" -> "5400" 
+  "5397" -> "5406" 
+  "5398" -> "5397" 
+  "5399" -> "5398" 
+  "5362" -> "5369" 
+  "5362" -> "5376" 
+  "5380" -> "5387" 
+  "5380" -> "5395" 
+  "5400" -> "5405" 
+  "5405" -> "5399" 
+  "5363" -> "5362" 
+  "5367" -> "5374" 
+  "5374" -> "5406" 
+  "5381" -> "5380" 
+  "5385" -> "5392" 
+  "5392" -> "5406" 
+  "5368" -> "5367" 
+  "5386" -> "5385" 
+  "5369" -> "5371" 
+  "5371" -> "5368" 
+  "5387" -> "5389" 
+  "5389" -> "5386" 
+  "5351" -> "5358" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/112-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/112-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/112-cfg.dot	2023-06-07 19:35:28.287384344 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/112-cfg.dot	2023-06-07 19:35:34.817383772 +0330
@@ -1,53 +1,53 @@
-digraph "CallNonvirtualCharMethodV" {  
-"5370" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1424</SUB>> ]
-"5388" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1425</SUB>> ]
-"5407" [label = <(soa,soa(env))<SUB>1426</SUB>> ]
-"5409" [label = <(RETURN,return InvokeWithVarArgs(soa, obj, mid, args).GetC();,return InvokeWithVarArgs(soa, obj, mid, args).GetC();)<SUB>1427</SUB>> ]
-"5410" [label = <(GetC,InvokeWithVarArgs(soa, obj, mid, args).GetC())<SUB>1427</SUB>> ]
-"5411" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, obj, mid, args).GetC)<SUB>1427</SUB>> ]
-"5374" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1424</SUB>> ]
-"5392" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1425</SUB>> ]
-"5412" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1427</SUB>> ]
-"5417" [label = <(FIELD_IDENTIFIER,GetC,GetC)<SUB>1427</SUB>> ]
-"5375" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1424</SUB>> ]
-"5379" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1424</SUB>> ]
-"5386" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1424</SUB>> ]
-"5393" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1425</SUB>> ]
-"5397" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1425</SUB>> ]
-"5404" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1425</SUB>> ]
-"5380" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1424</SUB>> ]
-"5398" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1425</SUB>> ]
-"5381" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1424</SUB>> ]
-"5383" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1424</SUB>> ]
-"5399" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1425</SUB>> ]
-"5401" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1425</SUB>> ]
-"5363" [label = <(METHOD,CallNonvirtualCharMethodV)<SUB>1422</SUB>> ]
-"5418" [label = <(METHOD_RETURN,jchar)<SUB>1422</SUB>> ]
-  "5370" -> "5375" 
-  "5370" -> "5388" 
-  "5388" -> "5393" 
-  "5388" -> "5407" 
-  "5407" -> "5412" 
-  "5409" -> "5418" 
-  "5410" -> "5409" 
-  "5411" -> "5410" 
-  "5374" -> "5381" 
-  "5374" -> "5388" 
-  "5392" -> "5399" 
-  "5392" -> "5407" 
-  "5412" -> "5417" 
-  "5417" -> "5411" 
-  "5375" -> "5374" 
-  "5379" -> "5386" 
-  "5386" -> "5418" 
-  "5393" -> "5392" 
-  "5397" -> "5404" 
-  "5404" -> "5418" 
-  "5380" -> "5379" 
-  "5398" -> "5397" 
-  "5381" -> "5383" 
-  "5383" -> "5380" 
-  "5399" -> "5401" 
-  "5401" -> "5398" 
-  "5363" -> "5370" 
+digraph "CallNonvirtualShortMethodA" {  
+"5415" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1381</SUB>> ]
+"5433" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1382</SUB>> ]
+"5452" [label = <(soa,soa(env))<SUB>1383</SUB>> ]
+"5454" [label = <(RETURN,return InvokeWithJValues(soa, obj, mid, args).GetS();,return InvokeWithJValues(soa, obj, mid, args).GetS();)<SUB>1384</SUB>> ]
+"5455" [label = <(GetS,InvokeWithJValues(soa, obj, mid, args).GetS())<SUB>1384</SUB>> ]
+"5456" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, obj, mid, args).GetS)<SUB>1384</SUB>> ]
+"5419" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1381</SUB>> ]
+"5437" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1382</SUB>> ]
+"5457" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1384</SUB>> ]
+"5462" [label = <(FIELD_IDENTIFIER,GetS,GetS)<SUB>1384</SUB>> ]
+"5420" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1381</SUB>> ]
+"5424" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1381</SUB>> ]
+"5431" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1381</SUB>> ]
+"5438" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1382</SUB>> ]
+"5442" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1382</SUB>> ]
+"5449" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1382</SUB>> ]
+"5425" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1381</SUB>> ]
+"5443" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1382</SUB>> ]
+"5426" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1381</SUB>> ]
+"5428" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1381</SUB>> ]
+"5444" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1382</SUB>> ]
+"5446" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1382</SUB>> ]
+"5408" [label = <(METHOD,CallNonvirtualShortMethodA)<SUB>1379</SUB>> ]
+"5463" [label = <(METHOD_RETURN,jshort)<SUB>1379</SUB>> ]
+  "5415" -> "5420" 
+  "5415" -> "5433" 
+  "5433" -> "5438" 
+  "5433" -> "5452" 
+  "5452" -> "5457" 
+  "5454" -> "5463" 
+  "5455" -> "5454" 
+  "5456" -> "5455" 
+  "5419" -> "5426" 
+  "5419" -> "5433" 
+  "5437" -> "5444" 
+  "5437" -> "5452" 
+  "5457" -> "5462" 
+  "5462" -> "5456" 
+  "5420" -> "5419" 
+  "5424" -> "5431" 
+  "5431" -> "5463" 
+  "5438" -> "5437" 
+  "5442" -> "5449" 
+  "5449" -> "5463" 
+  "5425" -> "5424" 
+  "5443" -> "5442" 
+  "5426" -> "5428" 
+  "5428" -> "5425" 
+  "5444" -> "5446" 
+  "5446" -> "5443" 
+  "5408" -> "5415" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/113-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/113-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/113-cfg.dot	2023-06-07 19:35:28.287384344 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/113-cfg.dot	2023-06-07 19:35:34.817383772 +0330
@@ -1,53 +1,61 @@
-digraph "CallNonvirtualCharMethodA" {  
-"5427" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1432</SUB>> ]
-"5445" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1433</SUB>> ]
-"5464" [label = <(soa,soa(env))<SUB>1434</SUB>> ]
-"5466" [label = <(RETURN,return InvokeWithJValues(soa, obj, mid, args).GetC();,return InvokeWithJValues(soa, obj, mid, args).GetC();)<SUB>1435</SUB>> ]
-"5467" [label = <(GetC,InvokeWithJValues(soa, obj, mid, args).GetC())<SUB>1435</SUB>> ]
-"5468" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, obj, mid, args).GetC)<SUB>1435</SUB>> ]
-"5431" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1432</SUB>> ]
-"5449" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1433</SUB>> ]
-"5469" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1435</SUB>> ]
-"5474" [label = <(FIELD_IDENTIFIER,GetC,GetC)<SUB>1435</SUB>> ]
-"5432" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1432</SUB>> ]
-"5436" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1432</SUB>> ]
-"5443" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1432</SUB>> ]
-"5450" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1433</SUB>> ]
-"5454" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1433</SUB>> ]
-"5461" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1433</SUB>> ]
-"5437" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1432</SUB>> ]
-"5455" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1433</SUB>> ]
-"5438" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1432</SUB>> ]
-"5440" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1432</SUB>> ]
-"5456" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1433</SUB>> ]
-"5458" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1433</SUB>> ]
-"5420" [label = <(METHOD,CallNonvirtualCharMethodA)<SUB>1430</SUB>> ]
-"5475" [label = <(METHOD_RETURN,jchar)<SUB>1430</SUB>> ]
-  "5427" -> "5432" 
-  "5427" -> "5445" 
-  "5445" -> "5450" 
-  "5445" -> "5464" 
-  "5464" -> "5469" 
-  "5466" -> "5475" 
-  "5467" -> "5466" 
-  "5468" -> "5467" 
-  "5431" -> "5438" 
-  "5431" -> "5445" 
-  "5449" -> "5456" 
-  "5449" -> "5464" 
-  "5469" -> "5474" 
-  "5474" -> "5468" 
-  "5432" -> "5431" 
-  "5436" -> "5443" 
-  "5443" -> "5475" 
-  "5450" -> "5449" 
-  "5454" -> "5461" 
-  "5461" -> "5475" 
-  "5437" -> "5436" 
-  "5455" -> "5454" 
-  "5438" -> "5440" 
-  "5440" -> "5437" 
-  "5456" -> "5458" 
-  "5458" -> "5455" 
-  "5420" -> "5427" 
+digraph "CallNonvirtualIntMethod" {  
+"5472" [label = <(va_start,va_start(ap, mid))<SUB>1389</SUB>> ]
+"5476" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1390</SUB>> ]
+"5479" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1391</SUB>> ]
+"5497" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1392</SUB>> ]
+"5516" [label = <(soa,soa(env))<SUB>1393</SUB>> ]
+"5519" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, ap)))<SUB>1394</SUB>> ]
+"5525" [label = <(RETURN,return result.GetI();,return result.GetI();)<SUB>1395</SUB>> ]
+"5477" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1390</SUB>> ]
+"5520" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1394</SUB>> ]
+"5526" [label = <(GetI,result.GetI())<SUB>1395</SUB>> ]
+"5527" [label = <(&lt;operator&gt;.fieldAccess,result.GetI)<SUB>1395</SUB>> ]
+"5483" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1391</SUB>> ]
+"5501" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1392</SUB>> ]
+"5529" [label = <(FIELD_IDENTIFIER,GetI,GetI)<SUB>1395</SUB>> ]
+"5484" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1391</SUB>> ]
+"5488" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1391</SUB>> ]
+"5495" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1391</SUB>> ]
+"5502" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1392</SUB>> ]
+"5506" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1392</SUB>> ]
+"5513" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1392</SUB>> ]
+"5489" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1391</SUB>> ]
+"5507" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1392</SUB>> ]
+"5490" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1391</SUB>> ]
+"5492" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1391</SUB>> ]
+"5508" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1392</SUB>> ]
+"5510" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1392</SUB>> ]
+"5465" [label = <(METHOD,CallNonvirtualIntMethod)<SUB>1387</SUB>> ]
+"5530" [label = <(METHOD_RETURN,jint)<SUB>1387</SUB>> ]
+  "5472" -> "5477" 
+  "5476" -> "5479" 
+  "5479" -> "5484" 
+  "5479" -> "5497" 
+  "5497" -> "5502" 
+  "5497" -> "5516" 
+  "5516" -> "5520" 
+  "5519" -> "5529" 
+  "5525" -> "5530" 
+  "5477" -> "5476" 
+  "5520" -> "5519" 
+  "5526" -> "5525" 
+  "5527" -> "5526" 
+  "5483" -> "5490" 
+  "5483" -> "5497" 
+  "5501" -> "5508" 
+  "5501" -> "5516" 
+  "5529" -> "5527" 
+  "5484" -> "5483" 
+  "5488" -> "5495" 
+  "5495" -> "5530" 
+  "5502" -> "5501" 
+  "5506" -> "5513" 
+  "5513" -> "5530" 
+  "5489" -> "5488" 
+  "5507" -> "5506" 
+  "5490" -> "5492" 
+  "5492" -> "5489" 
+  "5508" -> "5510" 
+  "5510" -> "5507" 
+  "5465" -> "5472" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/114-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/114-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/114-cfg.dot	2023-06-07 19:35:28.287384344 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/114-cfg.dot	2023-06-07 19:35:34.817383772 +0330
@@ -1,61 +1,53 @@
-digraph "CallNonvirtualShortMethod" {  
-"5484" [label = <(va_start,va_start(ap, mid))<SUB>1440</SUB>> ]
-"5488" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1441</SUB>> ]
-"5491" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1442</SUB>> ]
-"5509" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1443</SUB>> ]
-"5528" [label = <(soa,soa(env))<SUB>1444</SUB>> ]
-"5531" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, ap)))<SUB>1445</SUB>> ]
-"5537" [label = <(RETURN,return result.GetS();,return result.GetS();)<SUB>1446</SUB>> ]
-"5489" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1441</SUB>> ]
-"5532" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1445</SUB>> ]
-"5538" [label = <(GetS,result.GetS())<SUB>1446</SUB>> ]
-"5539" [label = <(&lt;operator&gt;.fieldAccess,result.GetS)<SUB>1446</SUB>> ]
-"5495" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1442</SUB>> ]
-"5513" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1443</SUB>> ]
-"5541" [label = <(FIELD_IDENTIFIER,GetS,GetS)<SUB>1446</SUB>> ]
-"5496" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1442</SUB>> ]
-"5500" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1442</SUB>> ]
-"5507" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1442</SUB>> ]
-"5514" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1443</SUB>> ]
-"5518" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1443</SUB>> ]
-"5525" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1443</SUB>> ]
-"5501" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1442</SUB>> ]
-"5519" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1443</SUB>> ]
-"5502" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1442</SUB>> ]
-"5504" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1442</SUB>> ]
-"5520" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1443</SUB>> ]
-"5522" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1443</SUB>> ]
-"5477" [label = <(METHOD,CallNonvirtualShortMethod)<SUB>1438</SUB>> ]
-"5542" [label = <(METHOD_RETURN,jshort)<SUB>1438</SUB>> ]
-  "5484" -> "5489" 
-  "5488" -> "5491" 
-  "5491" -> "5496" 
-  "5491" -> "5509" 
-  "5509" -> "5514" 
-  "5509" -> "5528" 
-  "5528" -> "5532" 
-  "5531" -> "5541" 
-  "5537" -> "5542" 
-  "5489" -> "5488" 
-  "5532" -> "5531" 
-  "5538" -> "5537" 
-  "5539" -> "5538" 
-  "5495" -> "5502" 
-  "5495" -> "5509" 
-  "5513" -> "5520" 
-  "5513" -> "5528" 
-  "5541" -> "5539" 
-  "5496" -> "5495" 
-  "5500" -> "5507" 
-  "5507" -> "5542" 
-  "5514" -> "5513" 
-  "5518" -> "5525" 
-  "5525" -> "5542" 
-  "5501" -> "5500" 
-  "5519" -> "5518" 
-  "5502" -> "5504" 
-  "5504" -> "5501" 
-  "5520" -> "5522" 
-  "5522" -> "5519" 
-  "5477" -> "5484" 
+digraph "CallNonvirtualIntMethodV" {  
+"5539" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1400</SUB>> ]
+"5557" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1401</SUB>> ]
+"5576" [label = <(soa,soa(env))<SUB>1402</SUB>> ]
+"5578" [label = <(RETURN,return InvokeWithVarArgs(soa, obj, mid, args).GetI();,return InvokeWithVarArgs(soa, obj, mid, args).GetI();)<SUB>1403</SUB>> ]
+"5579" [label = <(GetI,InvokeWithVarArgs(soa, obj, mid, args).GetI())<SUB>1403</SUB>> ]
+"5580" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, obj, mid, args).GetI)<SUB>1403</SUB>> ]
+"5543" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1400</SUB>> ]
+"5561" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1401</SUB>> ]
+"5581" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1403</SUB>> ]
+"5586" [label = <(FIELD_IDENTIFIER,GetI,GetI)<SUB>1403</SUB>> ]
+"5544" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1400</SUB>> ]
+"5548" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1400</SUB>> ]
+"5555" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1400</SUB>> ]
+"5562" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1401</SUB>> ]
+"5566" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1401</SUB>> ]
+"5573" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1401</SUB>> ]
+"5549" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1400</SUB>> ]
+"5567" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1401</SUB>> ]
+"5550" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1400</SUB>> ]
+"5552" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1400</SUB>> ]
+"5568" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1401</SUB>> ]
+"5570" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1401</SUB>> ]
+"5532" [label = <(METHOD,CallNonvirtualIntMethodV)<SUB>1398</SUB>> ]
+"5587" [label = <(METHOD_RETURN,jint)<SUB>1398</SUB>> ]
+  "5539" -> "5544" 
+  "5539" -> "5557" 
+  "5557" -> "5562" 
+  "5557" -> "5576" 
+  "5576" -> "5581" 
+  "5578" -> "5587" 
+  "5579" -> "5578" 
+  "5580" -> "5579" 
+  "5543" -> "5550" 
+  "5543" -> "5557" 
+  "5561" -> "5568" 
+  "5561" -> "5576" 
+  "5581" -> "5586" 
+  "5586" -> "5580" 
+  "5544" -> "5543" 
+  "5548" -> "5555" 
+  "5555" -> "5587" 
+  "5562" -> "5561" 
+  "5566" -> "5573" 
+  "5573" -> "5587" 
+  "5549" -> "5548" 
+  "5567" -> "5566" 
+  "5550" -> "5552" 
+  "5552" -> "5549" 
+  "5568" -> "5570" 
+  "5570" -> "5567" 
+  "5532" -> "5539" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/115-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/115-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/115-cfg.dot	2023-06-07 19:35:28.287384344 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/115-cfg.dot	2023-06-07 19:35:34.817383772 +0330
@@ -1,53 +1,53 @@
-digraph "CallNonvirtualShortMethodV" {  
-"5551" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1451</SUB>> ]
-"5569" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1452</SUB>> ]
-"5588" [label = <(soa,soa(env))<SUB>1453</SUB>> ]
-"5590" [label = <(RETURN,return InvokeWithVarArgs(soa, obj, mid, args).GetS();,return InvokeWithVarArgs(soa, obj, mid, args).GetS();)<SUB>1454</SUB>> ]
-"5591" [label = <(GetS,InvokeWithVarArgs(soa, obj, mid, args).GetS())<SUB>1454</SUB>> ]
-"5592" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, obj, mid, args).GetS)<SUB>1454</SUB>> ]
-"5555" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1451</SUB>> ]
-"5573" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1452</SUB>> ]
-"5593" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1454</SUB>> ]
-"5598" [label = <(FIELD_IDENTIFIER,GetS,GetS)<SUB>1454</SUB>> ]
-"5556" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1451</SUB>> ]
-"5560" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1451</SUB>> ]
-"5567" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1451</SUB>> ]
-"5574" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1452</SUB>> ]
-"5578" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1452</SUB>> ]
-"5585" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1452</SUB>> ]
-"5561" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1451</SUB>> ]
-"5579" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1452</SUB>> ]
-"5562" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1451</SUB>> ]
-"5564" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1451</SUB>> ]
-"5580" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1452</SUB>> ]
-"5582" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1452</SUB>> ]
-"5544" [label = <(METHOD,CallNonvirtualShortMethodV)<SUB>1449</SUB>> ]
-"5599" [label = <(METHOD_RETURN,jshort)<SUB>1449</SUB>> ]
-  "5551" -> "5556" 
-  "5551" -> "5569" 
-  "5569" -> "5574" 
-  "5569" -> "5588" 
-  "5588" -> "5593" 
-  "5590" -> "5599" 
-  "5591" -> "5590" 
-  "5592" -> "5591" 
-  "5555" -> "5562" 
-  "5555" -> "5569" 
-  "5573" -> "5580" 
-  "5573" -> "5588" 
-  "5593" -> "5598" 
-  "5598" -> "5592" 
-  "5556" -> "5555" 
-  "5560" -> "5567" 
-  "5567" -> "5599" 
-  "5574" -> "5573" 
-  "5578" -> "5585" 
-  "5585" -> "5599" 
-  "5561" -> "5560" 
-  "5579" -> "5578" 
-  "5562" -> "5564" 
-  "5564" -> "5561" 
-  "5580" -> "5582" 
-  "5582" -> "5579" 
-  "5544" -> "5551" 
+digraph "CallNonvirtualIntMethodA" {  
+"5596" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1408</SUB>> ]
+"5614" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1409</SUB>> ]
+"5633" [label = <(soa,soa(env))<SUB>1410</SUB>> ]
+"5635" [label = <(RETURN,return InvokeWithJValues(soa, obj, mid, args).GetI();,return InvokeWithJValues(soa, obj, mid, args).GetI();)<SUB>1411</SUB>> ]
+"5636" [label = <(GetI,InvokeWithJValues(soa, obj, mid, args).GetI())<SUB>1411</SUB>> ]
+"5637" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, obj, mid, args).GetI)<SUB>1411</SUB>> ]
+"5600" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1408</SUB>> ]
+"5618" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1409</SUB>> ]
+"5638" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1411</SUB>> ]
+"5643" [label = <(FIELD_IDENTIFIER,GetI,GetI)<SUB>1411</SUB>> ]
+"5601" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1408</SUB>> ]
+"5605" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1408</SUB>> ]
+"5612" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1408</SUB>> ]
+"5619" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1409</SUB>> ]
+"5623" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1409</SUB>> ]
+"5630" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1409</SUB>> ]
+"5606" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1408</SUB>> ]
+"5624" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1409</SUB>> ]
+"5607" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1408</SUB>> ]
+"5609" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1408</SUB>> ]
+"5625" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1409</SUB>> ]
+"5627" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1409</SUB>> ]
+"5589" [label = <(METHOD,CallNonvirtualIntMethodA)<SUB>1406</SUB>> ]
+"5644" [label = <(METHOD_RETURN,jint)<SUB>1406</SUB>> ]
+  "5596" -> "5601" 
+  "5596" -> "5614" 
+  "5614" -> "5619" 
+  "5614" -> "5633" 
+  "5633" -> "5638" 
+  "5635" -> "5644" 
+  "5636" -> "5635" 
+  "5637" -> "5636" 
+  "5600" -> "5607" 
+  "5600" -> "5614" 
+  "5618" -> "5625" 
+  "5618" -> "5633" 
+  "5638" -> "5643" 
+  "5643" -> "5637" 
+  "5601" -> "5600" 
+  "5605" -> "5612" 
+  "5612" -> "5644" 
+  "5619" -> "5618" 
+  "5623" -> "5630" 
+  "5630" -> "5644" 
+  "5606" -> "5605" 
+  "5624" -> "5623" 
+  "5607" -> "5609" 
+  "5609" -> "5606" 
+  "5625" -> "5627" 
+  "5627" -> "5624" 
+  "5589" -> "5596" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/116-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/116-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/116-cfg.dot	2023-06-07 19:35:28.287384344 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/116-cfg.dot	2023-06-07 19:35:34.817383772 +0330
@@ -1,53 +1,61 @@
-digraph "CallNonvirtualShortMethodA" {  
-"5608" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1459</SUB>> ]
-"5626" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1460</SUB>> ]
-"5645" [label = <(soa,soa(env))<SUB>1461</SUB>> ]
-"5647" [label = <(RETURN,return InvokeWithJValues(soa, obj, mid, args).GetS();,return InvokeWithJValues(soa, obj, mid, args).GetS();)<SUB>1462</SUB>> ]
-"5648" [label = <(GetS,InvokeWithJValues(soa, obj, mid, args).GetS())<SUB>1462</SUB>> ]
-"5649" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, obj, mid, args).GetS)<SUB>1462</SUB>> ]
-"5612" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1459</SUB>> ]
-"5630" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1460</SUB>> ]
-"5650" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1462</SUB>> ]
-"5655" [label = <(FIELD_IDENTIFIER,GetS,GetS)<SUB>1462</SUB>> ]
-"5613" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1459</SUB>> ]
-"5617" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1459</SUB>> ]
-"5624" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1459</SUB>> ]
-"5631" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1460</SUB>> ]
-"5635" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1460</SUB>> ]
-"5642" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1460</SUB>> ]
-"5618" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1459</SUB>> ]
-"5636" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1460</SUB>> ]
-"5619" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1459</SUB>> ]
-"5621" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1459</SUB>> ]
-"5637" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1460</SUB>> ]
-"5639" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1460</SUB>> ]
-"5601" [label = <(METHOD,CallNonvirtualShortMethodA)<SUB>1457</SUB>> ]
-"5656" [label = <(METHOD_RETURN,jshort)<SUB>1457</SUB>> ]
-  "5608" -> "5613" 
-  "5608" -> "5626" 
-  "5626" -> "5631" 
-  "5626" -> "5645" 
-  "5645" -> "5650" 
-  "5647" -> "5656" 
-  "5648" -> "5647" 
-  "5649" -> "5648" 
-  "5612" -> "5619" 
-  "5612" -> "5626" 
-  "5630" -> "5637" 
-  "5630" -> "5645" 
-  "5650" -> "5655" 
-  "5655" -> "5649" 
-  "5613" -> "5612" 
-  "5617" -> "5624" 
-  "5624" -> "5656" 
-  "5631" -> "5630" 
-  "5635" -> "5642" 
-  "5642" -> "5656" 
-  "5618" -> "5617" 
-  "5636" -> "5635" 
-  "5619" -> "5621" 
-  "5621" -> "5618" 
-  "5637" -> "5639" 
-  "5639" -> "5636" 
-  "5601" -> "5608" 
+digraph "CallNonvirtualLongMethod" {  
+"5653" [label = <(va_start,va_start(ap, mid))<SUB>1416</SUB>> ]
+"5657" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1417</SUB>> ]
+"5660" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1418</SUB>> ]
+"5678" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1419</SUB>> ]
+"5697" [label = <(soa,soa(env))<SUB>1420</SUB>> ]
+"5700" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, ap)))<SUB>1421</SUB>> ]
+"5706" [label = <(RETURN,return result.GetJ();,return result.GetJ();)<SUB>1422</SUB>> ]
+"5658" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1417</SUB>> ]
+"5701" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1421</SUB>> ]
+"5707" [label = <(GetJ,result.GetJ())<SUB>1422</SUB>> ]
+"5708" [label = <(&lt;operator&gt;.fieldAccess,result.GetJ)<SUB>1422</SUB>> ]
+"5664" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1418</SUB>> ]
+"5682" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1419</SUB>> ]
+"5710" [label = <(FIELD_IDENTIFIER,GetJ,GetJ)<SUB>1422</SUB>> ]
+"5665" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1418</SUB>> ]
+"5669" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1418</SUB>> ]
+"5676" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1418</SUB>> ]
+"5683" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1419</SUB>> ]
+"5687" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1419</SUB>> ]
+"5694" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1419</SUB>> ]
+"5670" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1418</SUB>> ]
+"5688" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1419</SUB>> ]
+"5671" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1418</SUB>> ]
+"5673" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1418</SUB>> ]
+"5689" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1419</SUB>> ]
+"5691" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1419</SUB>> ]
+"5646" [label = <(METHOD,CallNonvirtualLongMethod)<SUB>1414</SUB>> ]
+"5711" [label = <(METHOD_RETURN,jlong)<SUB>1414</SUB>> ]
+  "5653" -> "5658" 
+  "5657" -> "5660" 
+  "5660" -> "5665" 
+  "5660" -> "5678" 
+  "5678" -> "5683" 
+  "5678" -> "5697" 
+  "5697" -> "5701" 
+  "5700" -> "5710" 
+  "5706" -> "5711" 
+  "5658" -> "5657" 
+  "5701" -> "5700" 
+  "5707" -> "5706" 
+  "5708" -> "5707" 
+  "5664" -> "5671" 
+  "5664" -> "5678" 
+  "5682" -> "5689" 
+  "5682" -> "5697" 
+  "5710" -> "5708" 
+  "5665" -> "5664" 
+  "5669" -> "5676" 
+  "5676" -> "5711" 
+  "5683" -> "5682" 
+  "5687" -> "5694" 
+  "5694" -> "5711" 
+  "5670" -> "5669" 
+  "5688" -> "5687" 
+  "5671" -> "5673" 
+  "5673" -> "5670" 
+  "5689" -> "5691" 
+  "5691" -> "5688" 
+  "5646" -> "5653" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/117-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/117-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/117-cfg.dot	2023-06-07 19:35:28.287384344 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/117-cfg.dot	2023-06-07 19:35:34.817383772 +0330
@@ -1,61 +1,53 @@
-digraph "CallNonvirtualIntMethod" {  
-"5665" [label = <(va_start,va_start(ap, mid))<SUB>1467</SUB>> ]
-"5669" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1468</SUB>> ]
-"5672" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1469</SUB>> ]
-"5690" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1470</SUB>> ]
-"5709" [label = <(soa,soa(env))<SUB>1471</SUB>> ]
-"5712" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, ap)))<SUB>1472</SUB>> ]
-"5718" [label = <(RETURN,return result.GetI();,return result.GetI();)<SUB>1473</SUB>> ]
-"5670" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1468</SUB>> ]
-"5713" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1472</SUB>> ]
-"5719" [label = <(GetI,result.GetI())<SUB>1473</SUB>> ]
-"5720" [label = <(&lt;operator&gt;.fieldAccess,result.GetI)<SUB>1473</SUB>> ]
-"5676" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1469</SUB>> ]
-"5694" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1470</SUB>> ]
-"5722" [label = <(FIELD_IDENTIFIER,GetI,GetI)<SUB>1473</SUB>> ]
-"5677" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1469</SUB>> ]
-"5681" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1469</SUB>> ]
-"5688" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1469</SUB>> ]
-"5695" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1470</SUB>> ]
-"5699" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1470</SUB>> ]
-"5706" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1470</SUB>> ]
-"5682" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1469</SUB>> ]
-"5700" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1470</SUB>> ]
-"5683" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1469</SUB>> ]
-"5685" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1469</SUB>> ]
-"5701" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1470</SUB>> ]
-"5703" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1470</SUB>> ]
-"5658" [label = <(METHOD,CallNonvirtualIntMethod)<SUB>1465</SUB>> ]
-"5723" [label = <(METHOD_RETURN,jint)<SUB>1465</SUB>> ]
-  "5665" -> "5670" 
-  "5669" -> "5672" 
-  "5672" -> "5677" 
-  "5672" -> "5690" 
-  "5690" -> "5695" 
-  "5690" -> "5709" 
-  "5709" -> "5713" 
-  "5712" -> "5722" 
-  "5718" -> "5723" 
-  "5670" -> "5669" 
-  "5713" -> "5712" 
-  "5719" -> "5718" 
-  "5720" -> "5719" 
-  "5676" -> "5683" 
-  "5676" -> "5690" 
-  "5694" -> "5701" 
-  "5694" -> "5709" 
-  "5722" -> "5720" 
-  "5677" -> "5676" 
-  "5681" -> "5688" 
-  "5688" -> "5723" 
-  "5695" -> "5694" 
-  "5699" -> "5706" 
-  "5706" -> "5723" 
-  "5682" -> "5681" 
-  "5700" -> "5699" 
-  "5683" -> "5685" 
-  "5685" -> "5682" 
-  "5701" -> "5703" 
-  "5703" -> "5700" 
-  "5658" -> "5665" 
+digraph "CallNonvirtualLongMethodV" {  
+"5720" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1427</SUB>> ]
+"5738" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1428</SUB>> ]
+"5757" [label = <(soa,soa(env))<SUB>1429</SUB>> ]
+"5759" [label = <(RETURN,return InvokeWithVarArgs(soa, obj, mid, args).GetJ();,return InvokeWithVarArgs(soa, obj, mid, args).GetJ();)<SUB>1430</SUB>> ]
+"5760" [label = <(GetJ,InvokeWithVarArgs(soa, obj, mid, args).GetJ())<SUB>1430</SUB>> ]
+"5761" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, obj, mid, args).GetJ)<SUB>1430</SUB>> ]
+"5724" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1427</SUB>> ]
+"5742" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1428</SUB>> ]
+"5762" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1430</SUB>> ]
+"5767" [label = <(FIELD_IDENTIFIER,GetJ,GetJ)<SUB>1430</SUB>> ]
+"5725" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1427</SUB>> ]
+"5729" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1427</SUB>> ]
+"5736" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1427</SUB>> ]
+"5743" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1428</SUB>> ]
+"5747" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1428</SUB>> ]
+"5754" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1428</SUB>> ]
+"5730" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1427</SUB>> ]
+"5748" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1428</SUB>> ]
+"5731" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1427</SUB>> ]
+"5733" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1427</SUB>> ]
+"5749" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1428</SUB>> ]
+"5751" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1428</SUB>> ]
+"5713" [label = <(METHOD,CallNonvirtualLongMethodV)<SUB>1425</SUB>> ]
+"5768" [label = <(METHOD_RETURN,jlong)<SUB>1425</SUB>> ]
+  "5720" -> "5725" 
+  "5720" -> "5738" 
+  "5738" -> "5743" 
+  "5738" -> "5757" 
+  "5757" -> "5762" 
+  "5759" -> "5768" 
+  "5760" -> "5759" 
+  "5761" -> "5760" 
+  "5724" -> "5731" 
+  "5724" -> "5738" 
+  "5742" -> "5749" 
+  "5742" -> "5757" 
+  "5762" -> "5767" 
+  "5767" -> "5761" 
+  "5725" -> "5724" 
+  "5729" -> "5736" 
+  "5736" -> "5768" 
+  "5743" -> "5742" 
+  "5747" -> "5754" 
+  "5754" -> "5768" 
+  "5730" -> "5729" 
+  "5748" -> "5747" 
+  "5731" -> "5733" 
+  "5733" -> "5730" 
+  "5749" -> "5751" 
+  "5751" -> "5748" 
+  "5713" -> "5720" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/118-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/118-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/118-cfg.dot	2023-06-07 19:35:28.287384344 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/118-cfg.dot	2023-06-07 19:35:34.817383772 +0330
@@ -1,53 +1,53 @@
-digraph "CallNonvirtualIntMethodV" {  
-"5732" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1478</SUB>> ]
-"5750" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1479</SUB>> ]
-"5769" [label = <(soa,soa(env))<SUB>1480</SUB>> ]
-"5771" [label = <(RETURN,return InvokeWithVarArgs(soa, obj, mid, args).GetI();,return InvokeWithVarArgs(soa, obj, mid, args).GetI();)<SUB>1481</SUB>> ]
-"5772" [label = <(GetI,InvokeWithVarArgs(soa, obj, mid, args).GetI())<SUB>1481</SUB>> ]
-"5773" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, obj, mid, args).GetI)<SUB>1481</SUB>> ]
-"5736" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1478</SUB>> ]
-"5754" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1479</SUB>> ]
-"5774" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1481</SUB>> ]
-"5779" [label = <(FIELD_IDENTIFIER,GetI,GetI)<SUB>1481</SUB>> ]
-"5737" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1478</SUB>> ]
-"5741" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1478</SUB>> ]
-"5748" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1478</SUB>> ]
-"5755" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1479</SUB>> ]
-"5759" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1479</SUB>> ]
-"5766" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1479</SUB>> ]
-"5742" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1478</SUB>> ]
-"5760" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1479</SUB>> ]
-"5743" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1478</SUB>> ]
-"5745" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1478</SUB>> ]
-"5761" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1479</SUB>> ]
-"5763" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1479</SUB>> ]
-"5725" [label = <(METHOD,CallNonvirtualIntMethodV)<SUB>1476</SUB>> ]
-"5780" [label = <(METHOD_RETURN,jint)<SUB>1476</SUB>> ]
-  "5732" -> "5737" 
-  "5732" -> "5750" 
-  "5750" -> "5755" 
-  "5750" -> "5769" 
-  "5769" -> "5774" 
-  "5771" -> "5780" 
-  "5772" -> "5771" 
-  "5773" -> "5772" 
-  "5736" -> "5743" 
-  "5736" -> "5750" 
-  "5754" -> "5761" 
-  "5754" -> "5769" 
-  "5774" -> "5779" 
-  "5779" -> "5773" 
-  "5737" -> "5736" 
-  "5741" -> "5748" 
-  "5748" -> "5780" 
-  "5755" -> "5754" 
-  "5759" -> "5766" 
-  "5766" -> "5780" 
-  "5742" -> "5741" 
-  "5760" -> "5759" 
-  "5743" -> "5745" 
-  "5745" -> "5742" 
-  "5761" -> "5763" 
-  "5763" -> "5760" 
-  "5725" -> "5732" 
+digraph "CallNonvirtualLongMethodA" {  
+"5777" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1435</SUB>> ]
+"5795" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1436</SUB>> ]
+"5814" [label = <(soa,soa(env))<SUB>1437</SUB>> ]
+"5816" [label = <(RETURN,return InvokeWithJValues(soa, obj, mid, args).GetJ();,return InvokeWithJValues(soa, obj, mid, args).GetJ();)<SUB>1438</SUB>> ]
+"5817" [label = <(GetJ,InvokeWithJValues(soa, obj, mid, args).GetJ())<SUB>1438</SUB>> ]
+"5818" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, obj, mid, args).GetJ)<SUB>1438</SUB>> ]
+"5781" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1435</SUB>> ]
+"5799" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1436</SUB>> ]
+"5819" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1438</SUB>> ]
+"5824" [label = <(FIELD_IDENTIFIER,GetJ,GetJ)<SUB>1438</SUB>> ]
+"5782" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1435</SUB>> ]
+"5786" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1435</SUB>> ]
+"5793" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1435</SUB>> ]
+"5800" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1436</SUB>> ]
+"5804" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1436</SUB>> ]
+"5811" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1436</SUB>> ]
+"5787" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1435</SUB>> ]
+"5805" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1436</SUB>> ]
+"5788" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1435</SUB>> ]
+"5790" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1435</SUB>> ]
+"5806" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1436</SUB>> ]
+"5808" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1436</SUB>> ]
+"5770" [label = <(METHOD,CallNonvirtualLongMethodA)<SUB>1433</SUB>> ]
+"5825" [label = <(METHOD_RETURN,jlong)<SUB>1433</SUB>> ]
+  "5777" -> "5782" 
+  "5777" -> "5795" 
+  "5795" -> "5800" 
+  "5795" -> "5814" 
+  "5814" -> "5819" 
+  "5816" -> "5825" 
+  "5817" -> "5816" 
+  "5818" -> "5817" 
+  "5781" -> "5788" 
+  "5781" -> "5795" 
+  "5799" -> "5806" 
+  "5799" -> "5814" 
+  "5819" -> "5824" 
+  "5824" -> "5818" 
+  "5782" -> "5781" 
+  "5786" -> "5793" 
+  "5793" -> "5825" 
+  "5800" -> "5799" 
+  "5804" -> "5811" 
+  "5811" -> "5825" 
+  "5787" -> "5786" 
+  "5805" -> "5804" 
+  "5788" -> "5790" 
+  "5790" -> "5787" 
+  "5806" -> "5808" 
+  "5808" -> "5805" 
+  "5770" -> "5777" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/119-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/119-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/119-cfg.dot	2023-06-07 19:35:28.287384344 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/119-cfg.dot	2023-06-07 19:35:34.817383772 +0330
@@ -1,53 +1,61 @@
-digraph "CallNonvirtualIntMethodA" {  
-"5789" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1486</SUB>> ]
-"5807" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1487</SUB>> ]
-"5826" [label = <(soa,soa(env))<SUB>1488</SUB>> ]
-"5828" [label = <(RETURN,return InvokeWithJValues(soa, obj, mid, args).GetI();,return InvokeWithJValues(soa, obj, mid, args).GetI();)<SUB>1489</SUB>> ]
-"5829" [label = <(GetI,InvokeWithJValues(soa, obj, mid, args).GetI())<SUB>1489</SUB>> ]
-"5830" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, obj, mid, args).GetI)<SUB>1489</SUB>> ]
-"5793" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1486</SUB>> ]
-"5811" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1487</SUB>> ]
-"5831" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1489</SUB>> ]
-"5836" [label = <(FIELD_IDENTIFIER,GetI,GetI)<SUB>1489</SUB>> ]
-"5794" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1486</SUB>> ]
-"5798" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1486</SUB>> ]
-"5805" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1486</SUB>> ]
-"5812" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1487</SUB>> ]
-"5816" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1487</SUB>> ]
-"5823" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1487</SUB>> ]
-"5799" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1486</SUB>> ]
-"5817" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1487</SUB>> ]
-"5800" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1486</SUB>> ]
-"5802" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1486</SUB>> ]
-"5818" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1487</SUB>> ]
-"5820" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1487</SUB>> ]
-"5782" [label = <(METHOD,CallNonvirtualIntMethodA)<SUB>1484</SUB>> ]
-"5837" [label = <(METHOD_RETURN,jint)<SUB>1484</SUB>> ]
-  "5789" -> "5794" 
-  "5789" -> "5807" 
-  "5807" -> "5812" 
-  "5807" -> "5826" 
-  "5826" -> "5831" 
-  "5828" -> "5837" 
-  "5829" -> "5828" 
-  "5830" -> "5829" 
-  "5793" -> "5800" 
-  "5793" -> "5807" 
-  "5811" -> "5818" 
-  "5811" -> "5826" 
-  "5831" -> "5836" 
-  "5836" -> "5830" 
-  "5794" -> "5793" 
-  "5798" -> "5805" 
-  "5805" -> "5837" 
-  "5812" -> "5811" 
-  "5816" -> "5823" 
-  "5823" -> "5837" 
-  "5799" -> "5798" 
-  "5817" -> "5816" 
-  "5800" -> "5802" 
-  "5802" -> "5799" 
-  "5818" -> "5820" 
-  "5820" -> "5817" 
-  "5782" -> "5789" 
+digraph "CallNonvirtualFloatMethod" {  
+"5834" [label = <(va_start,va_start(ap, mid))<SUB>1443</SUB>> ]
+"5838" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1444</SUB>> ]
+"5841" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1445</SUB>> ]
+"5859" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1446</SUB>> ]
+"5878" [label = <(soa,soa(env))<SUB>1447</SUB>> ]
+"5881" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, ap)))<SUB>1448</SUB>> ]
+"5887" [label = <(RETURN,return result.GetF();,return result.GetF();)<SUB>1449</SUB>> ]
+"5839" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1444</SUB>> ]
+"5882" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1448</SUB>> ]
+"5888" [label = <(GetF,result.GetF())<SUB>1449</SUB>> ]
+"5889" [label = <(&lt;operator&gt;.fieldAccess,result.GetF)<SUB>1449</SUB>> ]
+"5845" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1445</SUB>> ]
+"5863" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1446</SUB>> ]
+"5891" [label = <(FIELD_IDENTIFIER,GetF,GetF)<SUB>1449</SUB>> ]
+"5846" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1445</SUB>> ]
+"5850" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1445</SUB>> ]
+"5857" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1445</SUB>> ]
+"5864" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1446</SUB>> ]
+"5868" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1446</SUB>> ]
+"5875" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1446</SUB>> ]
+"5851" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1445</SUB>> ]
+"5869" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1446</SUB>> ]
+"5852" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1445</SUB>> ]
+"5854" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1445</SUB>> ]
+"5870" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1446</SUB>> ]
+"5872" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1446</SUB>> ]
+"5827" [label = <(METHOD,CallNonvirtualFloatMethod)<SUB>1441</SUB>> ]
+"5892" [label = <(METHOD_RETURN,jfloat)<SUB>1441</SUB>> ]
+  "5834" -> "5839" 
+  "5838" -> "5841" 
+  "5841" -> "5846" 
+  "5841" -> "5859" 
+  "5859" -> "5864" 
+  "5859" -> "5878" 
+  "5878" -> "5882" 
+  "5881" -> "5891" 
+  "5887" -> "5892" 
+  "5839" -> "5838" 
+  "5882" -> "5881" 
+  "5888" -> "5887" 
+  "5889" -> "5888" 
+  "5845" -> "5852" 
+  "5845" -> "5859" 
+  "5863" -> "5870" 
+  "5863" -> "5878" 
+  "5891" -> "5889" 
+  "5846" -> "5845" 
+  "5850" -> "5857" 
+  "5857" -> "5892" 
+  "5864" -> "5863" 
+  "5868" -> "5875" 
+  "5875" -> "5892" 
+  "5851" -> "5850" 
+  "5869" -> "5868" 
+  "5852" -> "5854" 
+  "5854" -> "5851" 
+  "5870" -> "5872" 
+  "5872" -> "5869" 
+  "5827" -> "5834" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/12-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/12-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/12-cfg.dot	2023-06-07 19:35:28.217384348 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/12-cfg.dot	2023-06-07 19:35:34.737383779 +0330
@@ -1,7 +1,7 @@
-digraph "GetSingleton" {  
-"321" [label = <(RETURN,return Singleton;,return Singleton;)<SUB>205</SUB>> ]
-"318" [label = <(METHOD,GetSingleton)<SUB>203</SUB>> ]
-"323" [label = <(METHOD_RETURN,CodeRangeCache)<SUB>203</SUB>> ]
-  "321" -> "323" 
-  "318" -> "321" 
+digraph "DropCache" {  
+"206" [label = <(&lt;operator&gt;.assignment,memory_type_table_ = {})<SUB>161</SUB>> ]
+"204" [label = <(METHOD,DropCache)<SUB>160</SUB>> ]
+"208" [label = <(METHOD_RETURN,void)<SUB>160</SUB>> ]
+  "206" -> "208" 
+  "204" -> "206" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/120-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/120-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/120-cfg.dot	2023-06-07 19:35:28.297384342 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/120-cfg.dot	2023-06-07 19:35:34.817383772 +0330
@@ -1,61 +1,53 @@
-digraph "CallNonvirtualLongMethod" {  
-"5846" [label = <(va_start,va_start(ap, mid))<SUB>1494</SUB>> ]
-"5850" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1495</SUB>> ]
-"5853" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1496</SUB>> ]
-"5871" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1497</SUB>> ]
-"5890" [label = <(soa,soa(env))<SUB>1498</SUB>> ]
-"5893" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, ap)))<SUB>1499</SUB>> ]
-"5899" [label = <(RETURN,return result.GetJ();,return result.GetJ();)<SUB>1500</SUB>> ]
-"5851" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1495</SUB>> ]
-"5894" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1499</SUB>> ]
-"5900" [label = <(GetJ,result.GetJ())<SUB>1500</SUB>> ]
-"5901" [label = <(&lt;operator&gt;.fieldAccess,result.GetJ)<SUB>1500</SUB>> ]
-"5857" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1496</SUB>> ]
-"5875" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1497</SUB>> ]
-"5903" [label = <(FIELD_IDENTIFIER,GetJ,GetJ)<SUB>1500</SUB>> ]
-"5858" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1496</SUB>> ]
-"5862" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1496</SUB>> ]
-"5869" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1496</SUB>> ]
-"5876" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1497</SUB>> ]
-"5880" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1497</SUB>> ]
-"5887" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1497</SUB>> ]
-"5863" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1496</SUB>> ]
-"5881" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1497</SUB>> ]
-"5864" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1496</SUB>> ]
-"5866" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1496</SUB>> ]
-"5882" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1497</SUB>> ]
-"5884" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1497</SUB>> ]
-"5839" [label = <(METHOD,CallNonvirtualLongMethod)<SUB>1492</SUB>> ]
-"5904" [label = <(METHOD_RETURN,jlong)<SUB>1492</SUB>> ]
-  "5846" -> "5851" 
-  "5850" -> "5853" 
-  "5853" -> "5858" 
-  "5853" -> "5871" 
-  "5871" -> "5876" 
-  "5871" -> "5890" 
-  "5890" -> "5894" 
-  "5893" -> "5903" 
-  "5899" -> "5904" 
-  "5851" -> "5850" 
-  "5894" -> "5893" 
-  "5900" -> "5899" 
-  "5901" -> "5900" 
-  "5857" -> "5864" 
-  "5857" -> "5871" 
-  "5875" -> "5882" 
-  "5875" -> "5890" 
-  "5903" -> "5901" 
-  "5858" -> "5857" 
-  "5862" -> "5869" 
-  "5869" -> "5904" 
-  "5876" -> "5875" 
-  "5880" -> "5887" 
-  "5887" -> "5904" 
-  "5863" -> "5862" 
-  "5881" -> "5880" 
-  "5864" -> "5866" 
-  "5866" -> "5863" 
-  "5882" -> "5884" 
-  "5884" -> "5881" 
-  "5839" -> "5846" 
+digraph "CallNonvirtualFloatMethodV" {  
+"5901" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1454</SUB>> ]
+"5919" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1455</SUB>> ]
+"5938" [label = <(soa,soa(env))<SUB>1456</SUB>> ]
+"5940" [label = <(RETURN,return InvokeWithVarArgs(soa, obj, mid, args).GetF();,return InvokeWithVarArgs(soa, obj, mid, args).GetF();)<SUB>1457</SUB>> ]
+"5941" [label = <(GetF,InvokeWithVarArgs(soa, obj, mid, args).GetF())<SUB>1457</SUB>> ]
+"5942" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, obj, mid, args).GetF)<SUB>1457</SUB>> ]
+"5905" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1454</SUB>> ]
+"5923" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1455</SUB>> ]
+"5943" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1457</SUB>> ]
+"5948" [label = <(FIELD_IDENTIFIER,GetF,GetF)<SUB>1457</SUB>> ]
+"5906" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1454</SUB>> ]
+"5910" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1454</SUB>> ]
+"5917" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1454</SUB>> ]
+"5924" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1455</SUB>> ]
+"5928" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1455</SUB>> ]
+"5935" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1455</SUB>> ]
+"5911" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1454</SUB>> ]
+"5929" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1455</SUB>> ]
+"5912" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1454</SUB>> ]
+"5914" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1454</SUB>> ]
+"5930" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1455</SUB>> ]
+"5932" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1455</SUB>> ]
+"5894" [label = <(METHOD,CallNonvirtualFloatMethodV)<SUB>1452</SUB>> ]
+"5949" [label = <(METHOD_RETURN,jfloat)<SUB>1452</SUB>> ]
+  "5901" -> "5906" 
+  "5901" -> "5919" 
+  "5919" -> "5924" 
+  "5919" -> "5938" 
+  "5938" -> "5943" 
+  "5940" -> "5949" 
+  "5941" -> "5940" 
+  "5942" -> "5941" 
+  "5905" -> "5912" 
+  "5905" -> "5919" 
+  "5923" -> "5930" 
+  "5923" -> "5938" 
+  "5943" -> "5948" 
+  "5948" -> "5942" 
+  "5906" -> "5905" 
+  "5910" -> "5917" 
+  "5917" -> "5949" 
+  "5924" -> "5923" 
+  "5928" -> "5935" 
+  "5935" -> "5949" 
+  "5911" -> "5910" 
+  "5929" -> "5928" 
+  "5912" -> "5914" 
+  "5914" -> "5911" 
+  "5930" -> "5932" 
+  "5932" -> "5929" 
+  "5894" -> "5901" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/121-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/121-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/121-cfg.dot	2023-06-07 19:35:28.297384342 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/121-cfg.dot	2023-06-07 19:35:34.817383772 +0330
@@ -1,53 +1,53 @@
-digraph "CallNonvirtualLongMethodV" {  
-"5913" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1505</SUB>> ]
-"5931" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1506</SUB>> ]
-"5950" [label = <(soa,soa(env))<SUB>1507</SUB>> ]
-"5952" [label = <(RETURN,return InvokeWithVarArgs(soa, obj, mid, args).GetJ();,return InvokeWithVarArgs(soa, obj, mid, args).GetJ();)<SUB>1508</SUB>> ]
-"5953" [label = <(GetJ,InvokeWithVarArgs(soa, obj, mid, args).GetJ())<SUB>1508</SUB>> ]
-"5954" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, obj, mid, args).GetJ)<SUB>1508</SUB>> ]
-"5917" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1505</SUB>> ]
-"5935" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1506</SUB>> ]
-"5955" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1508</SUB>> ]
-"5960" [label = <(FIELD_IDENTIFIER,GetJ,GetJ)<SUB>1508</SUB>> ]
-"5918" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1505</SUB>> ]
-"5922" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1505</SUB>> ]
-"5929" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1505</SUB>> ]
-"5936" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1506</SUB>> ]
-"5940" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1506</SUB>> ]
-"5947" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1506</SUB>> ]
-"5923" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1505</SUB>> ]
-"5941" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1506</SUB>> ]
-"5924" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1505</SUB>> ]
-"5926" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1505</SUB>> ]
-"5942" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1506</SUB>> ]
-"5944" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1506</SUB>> ]
-"5906" [label = <(METHOD,CallNonvirtualLongMethodV)<SUB>1503</SUB>> ]
-"5961" [label = <(METHOD_RETURN,jlong)<SUB>1503</SUB>> ]
-  "5913" -> "5918" 
-  "5913" -> "5931" 
-  "5931" -> "5936" 
-  "5931" -> "5950" 
-  "5950" -> "5955" 
-  "5952" -> "5961" 
-  "5953" -> "5952" 
-  "5954" -> "5953" 
-  "5917" -> "5924" 
-  "5917" -> "5931" 
-  "5935" -> "5942" 
-  "5935" -> "5950" 
-  "5955" -> "5960" 
-  "5960" -> "5954" 
-  "5918" -> "5917" 
-  "5922" -> "5929" 
-  "5929" -> "5961" 
-  "5936" -> "5935" 
-  "5940" -> "5947" 
-  "5947" -> "5961" 
-  "5923" -> "5922" 
-  "5941" -> "5940" 
-  "5924" -> "5926" 
-  "5926" -> "5923" 
-  "5942" -> "5944" 
-  "5944" -> "5941" 
-  "5906" -> "5913" 
+digraph "CallNonvirtualFloatMethodA" {  
+"5958" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1462</SUB>> ]
+"5976" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1463</SUB>> ]
+"5995" [label = <(soa,soa(env))<SUB>1464</SUB>> ]
+"5997" [label = <(RETURN,return InvokeWithJValues(soa, obj, mid, args).GetF();,return InvokeWithJValues(soa, obj, mid, args).GetF();)<SUB>1465</SUB>> ]
+"5998" [label = <(GetF,InvokeWithJValues(soa, obj, mid, args).GetF())<SUB>1465</SUB>> ]
+"5999" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, obj, mid, args).GetF)<SUB>1465</SUB>> ]
+"5962" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1462</SUB>> ]
+"5980" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1463</SUB>> ]
+"6000" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1465</SUB>> ]
+"6005" [label = <(FIELD_IDENTIFIER,GetF,GetF)<SUB>1465</SUB>> ]
+"5963" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1462</SUB>> ]
+"5967" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1462</SUB>> ]
+"5974" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1462</SUB>> ]
+"5981" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1463</SUB>> ]
+"5985" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1463</SUB>> ]
+"5992" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1463</SUB>> ]
+"5968" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1462</SUB>> ]
+"5986" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1463</SUB>> ]
+"5969" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1462</SUB>> ]
+"5971" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1462</SUB>> ]
+"5987" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1463</SUB>> ]
+"5989" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1463</SUB>> ]
+"5951" [label = <(METHOD,CallNonvirtualFloatMethodA)<SUB>1460</SUB>> ]
+"6006" [label = <(METHOD_RETURN,jfloat)<SUB>1460</SUB>> ]
+  "5958" -> "5963" 
+  "5958" -> "5976" 
+  "5976" -> "5981" 
+  "5976" -> "5995" 
+  "5995" -> "6000" 
+  "5997" -> "6006" 
+  "5998" -> "5997" 
+  "5999" -> "5998" 
+  "5962" -> "5969" 
+  "5962" -> "5976" 
+  "5980" -> "5987" 
+  "5980" -> "5995" 
+  "6000" -> "6005" 
+  "6005" -> "5999" 
+  "5963" -> "5962" 
+  "5967" -> "5974" 
+  "5974" -> "6006" 
+  "5981" -> "5980" 
+  "5985" -> "5992" 
+  "5992" -> "6006" 
+  "5968" -> "5967" 
+  "5986" -> "5985" 
+  "5969" -> "5971" 
+  "5971" -> "5968" 
+  "5987" -> "5989" 
+  "5989" -> "5986" 
+  "5951" -> "5958" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/122-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/122-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/122-cfg.dot	2023-06-07 19:35:28.297384342 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/122-cfg.dot	2023-06-07 19:35:34.817383772 +0330
@@ -1,53 +1,61 @@
-digraph "CallNonvirtualLongMethodA" {  
-"5970" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1513</SUB>> ]
-"5988" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1514</SUB>> ]
-"6007" [label = <(soa,soa(env))<SUB>1515</SUB>> ]
-"6009" [label = <(RETURN,return InvokeWithJValues(soa, obj, mid, args).GetJ();,return InvokeWithJValues(soa, obj, mid, args).GetJ();)<SUB>1516</SUB>> ]
-"6010" [label = <(GetJ,InvokeWithJValues(soa, obj, mid, args).GetJ())<SUB>1516</SUB>> ]
-"6011" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, obj, mid, args).GetJ)<SUB>1516</SUB>> ]
-"5974" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1513</SUB>> ]
-"5992" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1514</SUB>> ]
-"6012" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1516</SUB>> ]
-"6017" [label = <(FIELD_IDENTIFIER,GetJ,GetJ)<SUB>1516</SUB>> ]
-"5975" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1513</SUB>> ]
-"5979" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1513</SUB>> ]
-"5986" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1513</SUB>> ]
-"5993" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1514</SUB>> ]
-"5997" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1514</SUB>> ]
-"6004" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1514</SUB>> ]
-"5980" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1513</SUB>> ]
-"5998" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1514</SUB>> ]
-"5981" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1513</SUB>> ]
-"5983" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1513</SUB>> ]
-"5999" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1514</SUB>> ]
-"6001" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1514</SUB>> ]
-"5963" [label = <(METHOD,CallNonvirtualLongMethodA)<SUB>1511</SUB>> ]
-"6018" [label = <(METHOD_RETURN,jlong)<SUB>1511</SUB>> ]
-  "5970" -> "5975" 
-  "5970" -> "5988" 
-  "5988" -> "5993" 
-  "5988" -> "6007" 
-  "6007" -> "6012" 
-  "6009" -> "6018" 
-  "6010" -> "6009" 
-  "6011" -> "6010" 
-  "5974" -> "5981" 
-  "5974" -> "5988" 
-  "5992" -> "5999" 
-  "5992" -> "6007" 
-  "6012" -> "6017" 
-  "6017" -> "6011" 
-  "5975" -> "5974" 
-  "5979" -> "5986" 
-  "5986" -> "6018" 
-  "5993" -> "5992" 
-  "5997" -> "6004" 
-  "6004" -> "6018" 
-  "5980" -> "5979" 
-  "5998" -> "5997" 
-  "5981" -> "5983" 
-  "5983" -> "5980" 
-  "5999" -> "6001" 
-  "6001" -> "5998" 
-  "5963" -> "5970" 
+digraph "CallNonvirtualDoubleMethod" {  
+"6015" [label = <(va_start,va_start(ap, mid))<SUB>1470</SUB>> ]
+"6019" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1471</SUB>> ]
+"6022" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1472</SUB>> ]
+"6040" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1473</SUB>> ]
+"6059" [label = <(soa,soa(env))<SUB>1474</SUB>> ]
+"6062" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, ap)))<SUB>1475</SUB>> ]
+"6068" [label = <(RETURN,return result.GetD();,return result.GetD();)<SUB>1476</SUB>> ]
+"6020" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1471</SUB>> ]
+"6063" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1475</SUB>> ]
+"6069" [label = <(GetD,result.GetD())<SUB>1476</SUB>> ]
+"6070" [label = <(&lt;operator&gt;.fieldAccess,result.GetD)<SUB>1476</SUB>> ]
+"6026" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1472</SUB>> ]
+"6044" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1473</SUB>> ]
+"6072" [label = <(FIELD_IDENTIFIER,GetD,GetD)<SUB>1476</SUB>> ]
+"6027" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1472</SUB>> ]
+"6031" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1472</SUB>> ]
+"6038" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1472</SUB>> ]
+"6045" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1473</SUB>> ]
+"6049" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1473</SUB>> ]
+"6056" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1473</SUB>> ]
+"6032" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1472</SUB>> ]
+"6050" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1473</SUB>> ]
+"6033" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1472</SUB>> ]
+"6035" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1472</SUB>> ]
+"6051" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1473</SUB>> ]
+"6053" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1473</SUB>> ]
+"6008" [label = <(METHOD,CallNonvirtualDoubleMethod)<SUB>1468</SUB>> ]
+"6073" [label = <(METHOD_RETURN,jdouble)<SUB>1468</SUB>> ]
+  "6015" -> "6020" 
+  "6019" -> "6022" 
+  "6022" -> "6027" 
+  "6022" -> "6040" 
+  "6040" -> "6045" 
+  "6040" -> "6059" 
+  "6059" -> "6063" 
+  "6062" -> "6072" 
+  "6068" -> "6073" 
+  "6020" -> "6019" 
+  "6063" -> "6062" 
+  "6069" -> "6068" 
+  "6070" -> "6069" 
+  "6026" -> "6033" 
+  "6026" -> "6040" 
+  "6044" -> "6051" 
+  "6044" -> "6059" 
+  "6072" -> "6070" 
+  "6027" -> "6026" 
+  "6031" -> "6038" 
+  "6038" -> "6073" 
+  "6045" -> "6044" 
+  "6049" -> "6056" 
+  "6056" -> "6073" 
+  "6032" -> "6031" 
+  "6050" -> "6049" 
+  "6033" -> "6035" 
+  "6035" -> "6032" 
+  "6051" -> "6053" 
+  "6053" -> "6050" 
+  "6008" -> "6015" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/123-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/123-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/123-cfg.dot	2023-06-07 19:35:28.297384342 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/123-cfg.dot	2023-06-07 19:35:34.817383772 +0330
@@ -1,61 +1,53 @@
-digraph "CallNonvirtualFloatMethod" {  
-"6027" [label = <(va_start,va_start(ap, mid))<SUB>1521</SUB>> ]
-"6031" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1522</SUB>> ]
-"6034" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1523</SUB>> ]
-"6052" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1524</SUB>> ]
-"6071" [label = <(soa,soa(env))<SUB>1525</SUB>> ]
-"6074" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, ap)))<SUB>1526</SUB>> ]
-"6080" [label = <(RETURN,return result.GetF();,return result.GetF();)<SUB>1527</SUB>> ]
-"6032" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1522</SUB>> ]
-"6075" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1526</SUB>> ]
-"6081" [label = <(GetF,result.GetF())<SUB>1527</SUB>> ]
-"6082" [label = <(&lt;operator&gt;.fieldAccess,result.GetF)<SUB>1527</SUB>> ]
-"6038" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1523</SUB>> ]
-"6056" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1524</SUB>> ]
-"6084" [label = <(FIELD_IDENTIFIER,GetF,GetF)<SUB>1527</SUB>> ]
-"6039" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1523</SUB>> ]
-"6043" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1523</SUB>> ]
-"6050" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1523</SUB>> ]
-"6057" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1524</SUB>> ]
-"6061" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1524</SUB>> ]
-"6068" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1524</SUB>> ]
-"6044" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1523</SUB>> ]
-"6062" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1524</SUB>> ]
-"6045" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1523</SUB>> ]
-"6047" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1523</SUB>> ]
-"6063" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1524</SUB>> ]
-"6065" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1524</SUB>> ]
-"6020" [label = <(METHOD,CallNonvirtualFloatMethod)<SUB>1519</SUB>> ]
-"6085" [label = <(METHOD_RETURN,jfloat)<SUB>1519</SUB>> ]
-  "6027" -> "6032" 
-  "6031" -> "6034" 
-  "6034" -> "6039" 
-  "6034" -> "6052" 
-  "6052" -> "6057" 
-  "6052" -> "6071" 
-  "6071" -> "6075" 
-  "6074" -> "6084" 
-  "6080" -> "6085" 
-  "6032" -> "6031" 
-  "6075" -> "6074" 
-  "6081" -> "6080" 
-  "6082" -> "6081" 
-  "6038" -> "6045" 
-  "6038" -> "6052" 
-  "6056" -> "6063" 
-  "6056" -> "6071" 
-  "6084" -> "6082" 
-  "6039" -> "6038" 
-  "6043" -> "6050" 
-  "6050" -> "6085" 
-  "6057" -> "6056" 
-  "6061" -> "6068" 
-  "6068" -> "6085" 
-  "6044" -> "6043" 
-  "6062" -> "6061" 
-  "6045" -> "6047" 
-  "6047" -> "6044" 
-  "6063" -> "6065" 
-  "6065" -> "6062" 
-  "6020" -> "6027" 
+digraph "CallNonvirtualDoubleMethodV" {  
+"6082" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1481</SUB>> ]
+"6100" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1482</SUB>> ]
+"6119" [label = <(soa,soa(env))<SUB>1483</SUB>> ]
+"6121" [label = <(RETURN,return InvokeWithVarArgs(soa, obj, mid, args).GetD();,return InvokeWithVarArgs(soa, obj, mid, args).GetD();)<SUB>1484</SUB>> ]
+"6122" [label = <(GetD,InvokeWithVarArgs(soa, obj, mid, args).GetD())<SUB>1484</SUB>> ]
+"6123" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, obj, mid, args).GetD)<SUB>1484</SUB>> ]
+"6086" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1481</SUB>> ]
+"6104" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1482</SUB>> ]
+"6124" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1484</SUB>> ]
+"6129" [label = <(FIELD_IDENTIFIER,GetD,GetD)<SUB>1484</SUB>> ]
+"6087" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1481</SUB>> ]
+"6091" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1481</SUB>> ]
+"6098" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1481</SUB>> ]
+"6105" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1482</SUB>> ]
+"6109" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1482</SUB>> ]
+"6116" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1482</SUB>> ]
+"6092" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1481</SUB>> ]
+"6110" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1482</SUB>> ]
+"6093" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1481</SUB>> ]
+"6095" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1481</SUB>> ]
+"6111" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1482</SUB>> ]
+"6113" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1482</SUB>> ]
+"6075" [label = <(METHOD,CallNonvirtualDoubleMethodV)<SUB>1479</SUB>> ]
+"6130" [label = <(METHOD_RETURN,jdouble)<SUB>1479</SUB>> ]
+  "6082" -> "6087" 
+  "6082" -> "6100" 
+  "6100" -> "6105" 
+  "6100" -> "6119" 
+  "6119" -> "6124" 
+  "6121" -> "6130" 
+  "6122" -> "6121" 
+  "6123" -> "6122" 
+  "6086" -> "6093" 
+  "6086" -> "6100" 
+  "6104" -> "6111" 
+  "6104" -> "6119" 
+  "6124" -> "6129" 
+  "6129" -> "6123" 
+  "6087" -> "6086" 
+  "6091" -> "6098" 
+  "6098" -> "6130" 
+  "6105" -> "6104" 
+  "6109" -> "6116" 
+  "6116" -> "6130" 
+  "6092" -> "6091" 
+  "6110" -> "6109" 
+  "6093" -> "6095" 
+  "6095" -> "6092" 
+  "6111" -> "6113" 
+  "6113" -> "6110" 
+  "6075" -> "6082" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/124-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/124-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/124-cfg.dot	2023-06-07 19:35:28.297384342 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/124-cfg.dot	2023-06-07 19:35:34.817383772 +0330
@@ -1,53 +1,53 @@
-digraph "CallNonvirtualFloatMethodV" {  
-"6094" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1532</SUB>> ]
-"6112" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1533</SUB>> ]
-"6131" [label = <(soa,soa(env))<SUB>1534</SUB>> ]
-"6133" [label = <(RETURN,return InvokeWithVarArgs(soa, obj, mid, args).GetF();,return InvokeWithVarArgs(soa, obj, mid, args).GetF();)<SUB>1535</SUB>> ]
-"6134" [label = <(GetF,InvokeWithVarArgs(soa, obj, mid, args).GetF())<SUB>1535</SUB>> ]
-"6135" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, obj, mid, args).GetF)<SUB>1535</SUB>> ]
-"6098" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1532</SUB>> ]
-"6116" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1533</SUB>> ]
-"6136" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1535</SUB>> ]
-"6141" [label = <(FIELD_IDENTIFIER,GetF,GetF)<SUB>1535</SUB>> ]
-"6099" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1532</SUB>> ]
-"6103" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1532</SUB>> ]
-"6110" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1532</SUB>> ]
-"6117" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1533</SUB>> ]
-"6121" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1533</SUB>> ]
-"6128" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1533</SUB>> ]
-"6104" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1532</SUB>> ]
-"6122" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1533</SUB>> ]
-"6105" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1532</SUB>> ]
-"6107" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1532</SUB>> ]
-"6123" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1533</SUB>> ]
-"6125" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1533</SUB>> ]
-"6087" [label = <(METHOD,CallNonvirtualFloatMethodV)<SUB>1530</SUB>> ]
-"6142" [label = <(METHOD_RETURN,jfloat)<SUB>1530</SUB>> ]
-  "6094" -> "6099" 
-  "6094" -> "6112" 
-  "6112" -> "6117" 
-  "6112" -> "6131" 
-  "6131" -> "6136" 
-  "6133" -> "6142" 
-  "6134" -> "6133" 
-  "6135" -> "6134" 
-  "6098" -> "6105" 
-  "6098" -> "6112" 
-  "6116" -> "6123" 
-  "6116" -> "6131" 
-  "6136" -> "6141" 
-  "6141" -> "6135" 
-  "6099" -> "6098" 
-  "6103" -> "6110" 
-  "6110" -> "6142" 
-  "6117" -> "6116" 
-  "6121" -> "6128" 
-  "6128" -> "6142" 
-  "6104" -> "6103" 
-  "6122" -> "6121" 
-  "6105" -> "6107" 
-  "6107" -> "6104" 
-  "6123" -> "6125" 
-  "6125" -> "6122" 
-  "6087" -> "6094" 
+digraph "CallNonvirtualDoubleMethodA" {  
+"6139" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1489</SUB>> ]
+"6157" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1490</SUB>> ]
+"6176" [label = <(soa,soa(env))<SUB>1491</SUB>> ]
+"6178" [label = <(RETURN,return InvokeWithJValues(soa, obj, mid, args).GetD();,return InvokeWithJValues(soa, obj, mid, args).GetD();)<SUB>1492</SUB>> ]
+"6179" [label = <(GetD,InvokeWithJValues(soa, obj, mid, args).GetD())<SUB>1492</SUB>> ]
+"6180" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, obj, mid, args).GetD)<SUB>1492</SUB>> ]
+"6143" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1489</SUB>> ]
+"6161" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1490</SUB>> ]
+"6181" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1492</SUB>> ]
+"6186" [label = <(FIELD_IDENTIFIER,GetD,GetD)<SUB>1492</SUB>> ]
+"6144" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1489</SUB>> ]
+"6148" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1489</SUB>> ]
+"6155" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1489</SUB>> ]
+"6162" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1490</SUB>> ]
+"6166" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1490</SUB>> ]
+"6173" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1490</SUB>> ]
+"6149" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1489</SUB>> ]
+"6167" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1490</SUB>> ]
+"6150" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1489</SUB>> ]
+"6152" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1489</SUB>> ]
+"6168" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1490</SUB>> ]
+"6170" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1490</SUB>> ]
+"6132" [label = <(METHOD,CallNonvirtualDoubleMethodA)<SUB>1487</SUB>> ]
+"6187" [label = <(METHOD_RETURN,jdouble)<SUB>1487</SUB>> ]
+  "6139" -> "6144" 
+  "6139" -> "6157" 
+  "6157" -> "6162" 
+  "6157" -> "6176" 
+  "6176" -> "6181" 
+  "6178" -> "6187" 
+  "6179" -> "6178" 
+  "6180" -> "6179" 
+  "6143" -> "6150" 
+  "6143" -> "6157" 
+  "6161" -> "6168" 
+  "6161" -> "6176" 
+  "6181" -> "6186" 
+  "6186" -> "6180" 
+  "6144" -> "6143" 
+  "6148" -> "6155" 
+  "6155" -> "6187" 
+  "6162" -> "6161" 
+  "6166" -> "6173" 
+  "6173" -> "6187" 
+  "6149" -> "6148" 
+  "6167" -> "6166" 
+  "6150" -> "6152" 
+  "6152" -> "6149" 
+  "6168" -> "6170" 
+  "6170" -> "6167" 
+  "6132" -> "6139" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/125-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/125-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/125-cfg.dot	2023-06-07 19:35:28.297384342 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/125-cfg.dot	2023-06-07 19:35:34.817383772 +0330
@@ -1,53 +1,51 @@
-digraph "CallNonvirtualFloatMethodA" {  
-"6151" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1540</SUB>> ]
-"6169" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1541</SUB>> ]
-"6188" [label = <(soa,soa(env))<SUB>1542</SUB>> ]
-"6190" [label = <(RETURN,return InvokeWithJValues(soa, obj, mid, args).GetF();,return InvokeWithJValues(soa, obj, mid, args).GetF();)<SUB>1543</SUB>> ]
-"6191" [label = <(GetF,InvokeWithJValues(soa, obj, mid, args).GetF())<SUB>1543</SUB>> ]
-"6192" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, obj, mid, args).GetF)<SUB>1543</SUB>> ]
-"6155" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1540</SUB>> ]
-"6173" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1541</SUB>> ]
-"6193" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1543</SUB>> ]
-"6198" [label = <(FIELD_IDENTIFIER,GetF,GetF)<SUB>1543</SUB>> ]
-"6156" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1540</SUB>> ]
-"6160" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1540</SUB>> ]
-"6167" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1540</SUB>> ]
-"6174" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1541</SUB>> ]
-"6178" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1541</SUB>> ]
-"6185" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1541</SUB>> ]
-"6161" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1540</SUB>> ]
-"6179" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1541</SUB>> ]
-"6162" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1540</SUB>> ]
-"6164" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1540</SUB>> ]
-"6180" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1541</SUB>> ]
-"6182" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1541</SUB>> ]
-"6144" [label = <(METHOD,CallNonvirtualFloatMethodA)<SUB>1538</SUB>> ]
-"6199" [label = <(METHOD_RETURN,jfloat)<SUB>1538</SUB>> ]
-  "6151" -> "6156" 
-  "6151" -> "6169" 
-  "6169" -> "6174" 
-  "6169" -> "6188" 
-  "6188" -> "6193" 
-  "6190" -> "6199" 
-  "6191" -> "6190" 
-  "6192" -> "6191" 
-  "6155" -> "6162" 
-  "6155" -> "6169" 
-  "6173" -> "6180" 
-  "6173" -> "6188" 
-  "6193" -> "6198" 
-  "6198" -> "6192" 
-  "6156" -> "6155" 
-  "6160" -> "6167" 
-  "6167" -> "6199" 
-  "6174" -> "6173" 
-  "6178" -> "6185" 
-  "6185" -> "6199" 
-  "6161" -> "6160" 
-  "6179" -> "6178" 
-  "6162" -> "6164" 
-  "6164" -> "6161" 
-  "6180" -> "6182" 
-  "6182" -> "6179" 
-  "6144" -> "6151" 
+digraph "CallNonvirtualVoidMethod" {  
+"6196" [label = <(va_start,va_start(ap, mid))<SUB>1497</SUB>> ]
+"6200" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1498</SUB>> ]
+"6203" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1499</SUB>> ]
+"6220" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1500</SUB>> ]
+"6238" [label = <(soa,soa(env))<SUB>1501</SUB>> ]
+"6240" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1502</SUB>> ]
+"6201" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1498</SUB>> ]
+"6207" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1499</SUB>> ]
+"6224" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1500</SUB>> ]
+"6208" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1499</SUB>> ]
+"6212" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1499</SUB>> ]
+"6219" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1499</SUB>> ]
+"6225" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1500</SUB>> ]
+"6229" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1500</SUB>> ]
+"6236" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1500</SUB>> ]
+"6213" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1499</SUB>> ]
+"6230" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1500</SUB>> ]
+"6214" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1499</SUB>> ]
+"6216" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1499</SUB>> ]
+"6231" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1500</SUB>> ]
+"6233" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1500</SUB>> ]
+"6189" [label = <(METHOD,CallNonvirtualVoidMethod)<SUB>1495</SUB>> ]
+"6245" [label = <(METHOD_RETURN,void)<SUB>1495</SUB>> ]
+  "6196" -> "6201" 
+  "6200" -> "6203" 
+  "6203" -> "6208" 
+  "6203" -> "6220" 
+  "6220" -> "6225" 
+  "6220" -> "6238" 
+  "6238" -> "6240" 
+  "6240" -> "6245" 
+  "6201" -> "6200" 
+  "6207" -> "6214" 
+  "6207" -> "6220" 
+  "6224" -> "6231" 
+  "6224" -> "6238" 
+  "6208" -> "6207" 
+  "6212" -> "6219" 
+  "6219" -> "6245" 
+  "6225" -> "6224" 
+  "6229" -> "6236" 
+  "6236" -> "6245" 
+  "6213" -> "6212" 
+  "6230" -> "6229" 
+  "6214" -> "6216" 
+  "6216" -> "6213" 
+  "6231" -> "6233" 
+  "6233" -> "6230" 
+  "6189" -> "6196" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/126-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/126-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/126-cfg.dot	2023-06-07 19:35:28.297384342 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/126-cfg.dot	2023-06-07 19:35:34.827383771 +0330
@@ -1,61 +1,45 @@
-digraph "CallNonvirtualDoubleMethod" {  
-"6208" [label = <(va_start,va_start(ap, mid))<SUB>1548</SUB>> ]
-"6212" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1549</SUB>> ]
-"6215" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1550</SUB>> ]
-"6233" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1551</SUB>> ]
-"6252" [label = <(soa,soa(env))<SUB>1552</SUB>> ]
-"6255" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, ap)))<SUB>1553</SUB>> ]
-"6261" [label = <(RETURN,return result.GetD();,return result.GetD();)<SUB>1554</SUB>> ]
-"6213" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1549</SUB>> ]
-"6256" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1553</SUB>> ]
-"6262" [label = <(GetD,result.GetD())<SUB>1554</SUB>> ]
-"6263" [label = <(&lt;operator&gt;.fieldAccess,result.GetD)<SUB>1554</SUB>> ]
-"6219" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1550</SUB>> ]
-"6237" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1551</SUB>> ]
-"6265" [label = <(FIELD_IDENTIFIER,GetD,GetD)<SUB>1554</SUB>> ]
-"6220" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1550</SUB>> ]
-"6224" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1550</SUB>> ]
-"6231" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1550</SUB>> ]
-"6238" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1551</SUB>> ]
-"6242" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1551</SUB>> ]
-"6249" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1551</SUB>> ]
-"6225" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1550</SUB>> ]
-"6243" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1551</SUB>> ]
-"6226" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1550</SUB>> ]
-"6228" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1550</SUB>> ]
-"6244" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1551</SUB>> ]
-"6246" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1551</SUB>> ]
-"6201" [label = <(METHOD,CallNonvirtualDoubleMethod)<SUB>1546</SUB>> ]
-"6266" [label = <(METHOD_RETURN,jdouble)<SUB>1546</SUB>> ]
-  "6208" -> "6213" 
-  "6212" -> "6215" 
-  "6215" -> "6220" 
-  "6215" -> "6233" 
-  "6233" -> "6238" 
-  "6233" -> "6252" 
-  "6252" -> "6256" 
-  "6255" -> "6265" 
-  "6261" -> "6266" 
-  "6213" -> "6212" 
-  "6256" -> "6255" 
-  "6262" -> "6261" 
-  "6263" -> "6262" 
-  "6219" -> "6226" 
-  "6219" -> "6233" 
-  "6237" -> "6244" 
-  "6237" -> "6252" 
-  "6265" -> "6263" 
-  "6220" -> "6219" 
-  "6224" -> "6231" 
-  "6231" -> "6266" 
-  "6238" -> "6237" 
-  "6242" -> "6249" 
-  "6249" -> "6266" 
-  "6225" -> "6224" 
-  "6243" -> "6242" 
-  "6226" -> "6228" 
-  "6228" -> "6225" 
-  "6244" -> "6246" 
-  "6246" -> "6243" 
-  "6201" -> "6208" 
+digraph "CallNonvirtualVoidMethodV" {  
+"6254" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1507</SUB>> ]
+"6271" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1508</SUB>> ]
+"6289" [label = <(soa,soa(env))<SUB>1509</SUB>> ]
+"6291" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1510</SUB>> ]
+"6258" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1507</SUB>> ]
+"6275" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1508</SUB>> ]
+"6259" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1507</SUB>> ]
+"6263" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1507</SUB>> ]
+"6270" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1507</SUB>> ]
+"6276" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1508</SUB>> ]
+"6280" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1508</SUB>> ]
+"6287" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1508</SUB>> ]
+"6264" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1507</SUB>> ]
+"6281" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1508</SUB>> ]
+"6265" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1507</SUB>> ]
+"6267" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1507</SUB>> ]
+"6282" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1508</SUB>> ]
+"6284" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1508</SUB>> ]
+"6247" [label = <(METHOD,CallNonvirtualVoidMethodV)<SUB>1505</SUB>> ]
+"6296" [label = <(METHOD_RETURN,void)<SUB>1505</SUB>> ]
+  "6254" -> "6259" 
+  "6254" -> "6271" 
+  "6271" -> "6276" 
+  "6271" -> "6289" 
+  "6289" -> "6291" 
+  "6291" -> "6296" 
+  "6258" -> "6265" 
+  "6258" -> "6271" 
+  "6275" -> "6282" 
+  "6275" -> "6289" 
+  "6259" -> "6258" 
+  "6263" -> "6270" 
+  "6270" -> "6296" 
+  "6276" -> "6275" 
+  "6280" -> "6287" 
+  "6287" -> "6296" 
+  "6264" -> "6263" 
+  "6281" -> "6280" 
+  "6265" -> "6267" 
+  "6267" -> "6264" 
+  "6282" -> "6284" 
+  "6284" -> "6281" 
+  "6247" -> "6254" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/127-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/127-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/127-cfg.dot	2023-06-07 19:35:28.297384342 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/127-cfg.dot	2023-06-07 19:35:34.827383771 +0330
@@ -1,53 +1,45 @@
-digraph "CallNonvirtualDoubleMethodV" {  
-"6275" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1559</SUB>> ]
-"6293" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1560</SUB>> ]
-"6312" [label = <(soa,soa(env))<SUB>1561</SUB>> ]
-"6314" [label = <(RETURN,return InvokeWithVarArgs(soa, obj, mid, args).GetD();,return InvokeWithVarArgs(soa, obj, mid, args).GetD();)<SUB>1562</SUB>> ]
-"6315" [label = <(GetD,InvokeWithVarArgs(soa, obj, mid, args).GetD())<SUB>1562</SUB>> ]
-"6316" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, obj, mid, args).GetD)<SUB>1562</SUB>> ]
-"6279" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1559</SUB>> ]
-"6297" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1560</SUB>> ]
-"6317" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1562</SUB>> ]
-"6322" [label = <(FIELD_IDENTIFIER,GetD,GetD)<SUB>1562</SUB>> ]
-"6280" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1559</SUB>> ]
-"6284" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1559</SUB>> ]
-"6291" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1559</SUB>> ]
-"6298" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1560</SUB>> ]
-"6302" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1560</SUB>> ]
-"6309" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1560</SUB>> ]
-"6285" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1559</SUB>> ]
-"6303" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1560</SUB>> ]
-"6286" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1559</SUB>> ]
-"6288" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1559</SUB>> ]
-"6304" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1560</SUB>> ]
-"6306" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1560</SUB>> ]
-"6268" [label = <(METHOD,CallNonvirtualDoubleMethodV)<SUB>1557</SUB>> ]
-"6323" [label = <(METHOD_RETURN,jdouble)<SUB>1557</SUB>> ]
-  "6275" -> "6280" 
-  "6275" -> "6293" 
-  "6293" -> "6298" 
-  "6293" -> "6312" 
-  "6312" -> "6317" 
-  "6314" -> "6323" 
+digraph "CallNonvirtualVoidMethodA" {  
+"6305" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1515</SUB>> ]
+"6322" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1516</SUB>> ]
+"6340" [label = <(soa,soa(env))<SUB>1517</SUB>> ]
+"6342" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1518</SUB>> ]
+"6309" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1515</SUB>> ]
+"6326" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1516</SUB>> ]
+"6310" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1515</SUB>> ]
+"6314" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1515</SUB>> ]
+"6321" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1515</SUB>> ]
+"6327" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1516</SUB>> ]
+"6331" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1516</SUB>> ]
+"6338" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1516</SUB>> ]
+"6315" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1515</SUB>> ]
+"6332" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1516</SUB>> ]
+"6316" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1515</SUB>> ]
+"6318" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1515</SUB>> ]
+"6333" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1516</SUB>> ]
+"6335" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1516</SUB>> ]
+"6298" [label = <(METHOD,CallNonvirtualVoidMethodA)<SUB>1513</SUB>> ]
+"6347" [label = <(METHOD_RETURN,void)<SUB>1513</SUB>> ]
+  "6305" -> "6310" 
+  "6305" -> "6322" 
+  "6322" -> "6327" 
+  "6322" -> "6340" 
+  "6340" -> "6342" 
+  "6342" -> "6347" 
+  "6309" -> "6316" 
+  "6309" -> "6322" 
+  "6326" -> "6333" 
+  "6326" -> "6340" 
+  "6310" -> "6309" 
+  "6314" -> "6321" 
+  "6321" -> "6347" 
+  "6327" -> "6326" 
+  "6331" -> "6338" 
+  "6338" -> "6347" 
   "6315" -> "6314" 
-  "6316" -> "6315" 
-  "6279" -> "6286" 
-  "6279" -> "6293" 
-  "6297" -> "6304" 
-  "6297" -> "6312" 
-  "6317" -> "6322" 
-  "6322" -> "6316" 
-  "6280" -> "6279" 
-  "6284" -> "6291" 
-  "6291" -> "6323" 
-  "6298" -> "6297" 
-  "6302" -> "6309" 
-  "6309" -> "6323" 
-  "6285" -> "6284" 
-  "6303" -> "6302" 
-  "6286" -> "6288" 
-  "6288" -> "6285" 
-  "6304" -> "6306" 
-  "6306" -> "6303" 
-  "6268" -> "6275" 
+  "6332" -> "6331" 
+  "6316" -> "6318" 
+  "6318" -> "6315" 
+  "6333" -> "6335" 
+  "6335" -> "6332" 
+  "6298" -> "6305" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/128-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/128-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/128-cfg.dot	2023-06-07 19:35:28.297384342 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/128-cfg.dot	2023-06-07 19:35:34.827383771 +0330
@@ -1,53 +1,65 @@
-digraph "CallNonvirtualDoubleMethodA" {  
-"6332" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1567</SUB>> ]
-"6350" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1568</SUB>> ]
-"6369" [label = <(soa,soa(env))<SUB>1569</SUB>> ]
-"6371" [label = <(RETURN,return InvokeWithJValues(soa, obj, mid, args).GetD();,return InvokeWithJValues(soa, obj, mid, args).GetD();)<SUB>1570</SUB>> ]
-"6372" [label = <(GetD,InvokeWithJValues(soa, obj, mid, args).GetD())<SUB>1570</SUB>> ]
-"6373" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, obj, mid, args).GetD)<SUB>1570</SUB>> ]
-"6336" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1567</SUB>> ]
-"6354" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1568</SUB>> ]
-"6374" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1570</SUB>> ]
-"6379" [label = <(FIELD_IDENTIFIER,GetD,GetD)<SUB>1570</SUB>> ]
-"6337" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1567</SUB>> ]
-"6341" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1567</SUB>> ]
-"6348" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1567</SUB>> ]
-"6355" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1568</SUB>> ]
-"6359" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1568</SUB>> ]
-"6366" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1568</SUB>> ]
-"6342" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1567</SUB>> ]
-"6360" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1568</SUB>> ]
-"6343" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1567</SUB>> ]
-"6345" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1567</SUB>> ]
-"6361" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1568</SUB>> ]
-"6363" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1568</SUB>> ]
-"6325" [label = <(METHOD,CallNonvirtualDoubleMethodA)<SUB>1565</SUB>> ]
-"6380" [label = <(METHOD_RETURN,jdouble)<SUB>1565</SUB>> ]
-  "6332" -> "6337" 
-  "6332" -> "6350" 
-  "6350" -> "6355" 
-  "6350" -> "6369" 
-  "6369" -> "6374" 
-  "6371" -> "6380" 
-  "6372" -> "6371" 
-  "6373" -> "6372" 
-  "6336" -> "6343" 
-  "6336" -> "6350" 
-  "6354" -> "6361" 
-  "6354" -> "6369" 
-  "6374" -> "6379" 
-  "6379" -> "6373" 
-  "6337" -> "6336" 
-  "6341" -> "6348" 
-  "6348" -> "6380" 
-  "6355" -> "6354" 
+digraph "GetFieldID" {  
+"6355" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_class))<SUB>1522</SUB>> ]
+"6373" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(name))<SUB>1523</SUB>> ]
+"6391" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(sig))<SUB>1524</SUB>> ]
+"6410" [label = <(soa,soa(env))<SUB>1525</SUB>> ]
+"6412" [label = <(RETURN,return FindFieldID(soa, java_class, name, sig, false);,return FindFieldID(soa, java_class, name, sig, false);)<SUB>1526</SUB>> ]
+"6413" [label = <(FindFieldID,FindFieldID(soa, java_class, name, sig, false))<SUB>1526</SUB>> ]
+"6359" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>1522</SUB>> ]
+"6377" [label = <(UNLIKELY,UNLIKELY((name) == nullptr))<SUB>1523</SUB>> ]
+"6395" [label = <(UNLIKELY,UNLIKELY((sig) == nullptr))<SUB>1524</SUB>> ]
+"6360" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>1522</SUB>> ]
+"6364" [label = <(CHECK_NON_NULL_ARGUMENT(java_class),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class == null&quot;))<SUB>1522</SUB>> ]
+"6371" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_class),CHECK_NON_NULL_ARGUMENT(java_class))<SUB>1522</SUB>> ]
+"6378" [label = <(&lt;operator&gt;.equals,(name) == nullptr)<SUB>1523</SUB>> ]
+"6382" [label = <(CHECK_NON_NULL_ARGUMENT(name),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;name == null&quot;))<SUB>1523</SUB>> ]
+"6389" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(name),CHECK_NON_NULL_ARGUMENT(name))<SUB>1523</SUB>> ]
+"6396" [label = <(&lt;operator&gt;.equals,(sig) == nullptr)<SUB>1524</SUB>> ]
+"6400" [label = <(CHECK_NON_NULL_ARGUMENT(sig),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;sig == null&quot;))<SUB>1524</SUB>> ]
+"6407" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(sig),CHECK_NON_NULL_ARGUMENT(sig))<SUB>1524</SUB>> ]
+"6365" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1522</SUB>> ]
+"6383" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1523</SUB>> ]
+"6401" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1524</SUB>> ]
+"6366" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1522</SUB>> ]
+"6368" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1522</SUB>> ]
+"6384" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1523</SUB>> ]
+"6386" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1523</SUB>> ]
+"6402" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1524</SUB>> ]
+"6404" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1524</SUB>> ]
+"6349" [label = <(METHOD,GetFieldID)<SUB>1521</SUB>> ]
+"6419" [label = <(METHOD_RETURN,jfieldID)<SUB>1521</SUB>> ]
+  "6355" -> "6360" 
+  "6355" -> "6373" 
+  "6373" -> "6378" 
+  "6373" -> "6391" 
+  "6391" -> "6396" 
+  "6391" -> "6410" 
+  "6410" -> "6413" 
+  "6412" -> "6419" 
+  "6413" -> "6412" 
   "6359" -> "6366" 
-  "6366" -> "6380" 
-  "6342" -> "6341" 
+  "6359" -> "6373" 
+  "6377" -> "6384" 
+  "6377" -> "6391" 
+  "6395" -> "6402" 
+  "6395" -> "6410" 
   "6360" -> "6359" 
-  "6343" -> "6345" 
-  "6345" -> "6342" 
-  "6361" -> "6363" 
-  "6363" -> "6360" 
-  "6325" -> "6332" 
+  "6364" -> "6371" 
+  "6371" -> "6419" 
+  "6378" -> "6377" 
+  "6382" -> "6389" 
+  "6389" -> "6419" 
+  "6396" -> "6395" 
+  "6400" -> "6407" 
+  "6407" -> "6419" 
+  "6365" -> "6364" 
+  "6383" -> "6382" 
+  "6401" -> "6400" 
+  "6366" -> "6368" 
+  "6368" -> "6365" 
+  "6384" -> "6386" 
+  "6386" -> "6383" 
+  "6402" -> "6404" 
+  "6404" -> "6401" 
+  "6349" -> "6355" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/129-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/129-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/129-cfg.dot	2023-06-07 19:35:28.297384342 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/129-cfg.dot	2023-06-07 19:35:34.827383771 +0330
@@ -1,51 +1,65 @@
-digraph "CallNonvirtualVoidMethod" {  
-"6389" [label = <(va_start,va_start(ap, mid))<SUB>1575</SUB>> ]
-"6393" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1576</SUB>> ]
-"6396" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1577</SUB>> ]
-"6413" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1578</SUB>> ]
-"6431" [label = <(soa,soa(env))<SUB>1579</SUB>> ]
-"6433" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1580</SUB>> ]
-"6394" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1576</SUB>> ]
-"6400" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1577</SUB>> ]
-"6417" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1578</SUB>> ]
-"6401" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1577</SUB>> ]
-"6405" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1577</SUB>> ]
-"6412" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1577</SUB>> ]
-"6418" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1578</SUB>> ]
-"6422" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1578</SUB>> ]
-"6429" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1578</SUB>> ]
-"6406" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1577</SUB>> ]
-"6423" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1578</SUB>> ]
-"6407" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1577</SUB>> ]
-"6409" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1577</SUB>> ]
-"6424" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1578</SUB>> ]
-"6426" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1578</SUB>> ]
-"6382" [label = <(METHOD,CallNonvirtualVoidMethod)<SUB>1573</SUB>> ]
-"6438" [label = <(METHOD_RETURN,void)<SUB>1573</SUB>> ]
-  "6389" -> "6394" 
-  "6393" -> "6396" 
-  "6396" -> "6401" 
-  "6396" -> "6413" 
-  "6413" -> "6418" 
-  "6413" -> "6431" 
-  "6431" -> "6433" 
-  "6433" -> "6438" 
-  "6394" -> "6393" 
-  "6400" -> "6407" 
-  "6400" -> "6413" 
-  "6417" -> "6424" 
-  "6417" -> "6431" 
-  "6401" -> "6400" 
-  "6405" -> "6412" 
-  "6412" -> "6438" 
-  "6418" -> "6417" 
-  "6422" -> "6429" 
-  "6429" -> "6438" 
-  "6406" -> "6405" 
-  "6423" -> "6422" 
-  "6407" -> "6409" 
-  "6409" -> "6406" 
-  "6424" -> "6426" 
-  "6426" -> "6423" 
-  "6382" -> "6389" 
+digraph "GetStaticFieldID" {  
+"6427" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_class))<SUB>1531</SUB>> ]
+"6445" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(name))<SUB>1532</SUB>> ]
+"6463" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(sig))<SUB>1533</SUB>> ]
+"6482" [label = <(soa,soa(env))<SUB>1534</SUB>> ]
+"6484" [label = <(RETURN,return FindFieldID(soa, java_class, name, sig, true);,return FindFieldID(soa, java_class, name, sig, true);)<SUB>1535</SUB>> ]
+"6485" [label = <(FindFieldID,FindFieldID(soa, java_class, name, sig, true))<SUB>1535</SUB>> ]
+"6431" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>1531</SUB>> ]
+"6449" [label = <(UNLIKELY,UNLIKELY((name) == nullptr))<SUB>1532</SUB>> ]
+"6467" [label = <(UNLIKELY,UNLIKELY((sig) == nullptr))<SUB>1533</SUB>> ]
+"6432" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>1531</SUB>> ]
+"6436" [label = <(CHECK_NON_NULL_ARGUMENT(java_class),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class == null&quot;))<SUB>1531</SUB>> ]
+"6443" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_class),CHECK_NON_NULL_ARGUMENT(java_class))<SUB>1531</SUB>> ]
+"6450" [label = <(&lt;operator&gt;.equals,(name) == nullptr)<SUB>1532</SUB>> ]
+"6454" [label = <(CHECK_NON_NULL_ARGUMENT(name),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;name == null&quot;))<SUB>1532</SUB>> ]
+"6461" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(name),CHECK_NON_NULL_ARGUMENT(name))<SUB>1532</SUB>> ]
+"6468" [label = <(&lt;operator&gt;.equals,(sig) == nullptr)<SUB>1533</SUB>> ]
+"6472" [label = <(CHECK_NON_NULL_ARGUMENT(sig),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;sig == null&quot;))<SUB>1533</SUB>> ]
+"6479" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(sig),CHECK_NON_NULL_ARGUMENT(sig))<SUB>1533</SUB>> ]
+"6437" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1531</SUB>> ]
+"6455" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1532</SUB>> ]
+"6473" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1533</SUB>> ]
+"6438" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1531</SUB>> ]
+"6440" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1531</SUB>> ]
+"6456" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1532</SUB>> ]
+"6458" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1532</SUB>> ]
+"6474" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1533</SUB>> ]
+"6476" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1533</SUB>> ]
+"6421" [label = <(METHOD,GetStaticFieldID)<SUB>1529</SUB>> ]
+"6491" [label = <(METHOD_RETURN,jfieldID)<SUB>1529</SUB>> ]
+  "6427" -> "6432" 
+  "6427" -> "6445" 
+  "6445" -> "6450" 
+  "6445" -> "6463" 
+  "6463" -> "6468" 
+  "6463" -> "6482" 
+  "6482" -> "6485" 
+  "6484" -> "6491" 
+  "6485" -> "6484" 
+  "6431" -> "6438" 
+  "6431" -> "6445" 
+  "6449" -> "6456" 
+  "6449" -> "6463" 
+  "6467" -> "6474" 
+  "6467" -> "6482" 
+  "6432" -> "6431" 
+  "6436" -> "6443" 
+  "6443" -> "6491" 
+  "6450" -> "6449" 
+  "6454" -> "6461" 
+  "6461" -> "6491" 
+  "6468" -> "6467" 
+  "6472" -> "6479" 
+  "6479" -> "6491" 
+  "6437" -> "6436" 
+  "6455" -> "6454" 
+  "6473" -> "6472" 
+  "6438" -> "6440" 
+  "6440" -> "6437" 
+  "6456" -> "6458" 
+  "6458" -> "6455" 
+  "6474" -> "6476" 
+  "6476" -> "6473" 
+  "6421" -> "6427" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/13-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/13-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/13-cfg.dot	2023-06-07 19:35:28.217384348 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/13-cfg.dot	2023-06-07 19:35:34.747383777 +0330
@@ -1,24 +1,5 @@
-digraph "GetSharedObjectKind" {  
-"329" [label = <(&lt;operator&gt;.assignment,address = reinterpret_cast&lt;uintptr_t&gt;(pc))<SUB>209</SUB>> ]
-"343" [label = <(RETURN,return SharedObjectKind::kOther;,return SharedObjectKind::kOther;)<SUB>214</SUB>> ]
-"331" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;uintptr_t&gt;(pc))<SUB>209</SUB>> ]
-"336" [label = <(Find,Find(address, &amp;kind))<SUB>211</SUB>> ]
-"344" [label = <(&lt;operator&gt;.fieldAccess,SharedObjectKind::kOther)<SUB>214</SUB>> ]
-"332" [label = <(UNKNOWN,uintptr_t,uintptr_t)<SUB>209</SUB>> ]
-"338" [label = <(&lt;operator&gt;.addressOf,&amp;kind)<SUB>211</SUB>> ]
-"341" [label = <(RETURN,return kind;,return kind;)<SUB>212</SUB>> ]
-"346" [label = <(FIELD_IDENTIFIER,kOther,kOther)<SUB>214</SUB>> ]
-"325" [label = <(METHOD,GetSharedObjectKind)<SUB>208</SUB>> ]
-"347" [label = <(METHOD_RETURN,SharedObjectKind)<SUB>208</SUB>> ]
-  "329" -> "338" 
-  "343" -> "347" 
-  "331" -> "329" 
-  "336" -> "341" 
-  "336" -> "346" 
-  "344" -> "343" 
-  "332" -> "331" 
-  "338" -> "336" 
-  "341" -> "347" 
-  "346" -> "344" 
-  "325" -> "332" 
+digraph "CodeRangeCache" {  
+"210" [label = <(METHOD,CodeRangeCache)<SUB>165</SUB>> ]
+"212" [label = <(METHOD_RETURN,ANY)<SUB>165</SUB>> ]
+  "210" -> "212" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/130-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/130-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/130-cfg.dot	2023-06-07 19:35:28.307384340 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/130-cfg.dot	2023-06-07 19:35:34.827383771 +0330
@@ -1,45 +1,91 @@
-digraph "CallNonvirtualVoidMethodV" {  
-"6447" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1585</SUB>> ]
-"6464" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1586</SUB>> ]
-"6482" [label = <(soa,soa(env))<SUB>1587</SUB>> ]
-"6484" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1588</SUB>> ]
-"6451" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1585</SUB>> ]
-"6468" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1586</SUB>> ]
-"6452" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1585</SUB>> ]
-"6456" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1585</SUB>> ]
-"6463" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1585</SUB>> ]
-"6469" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1586</SUB>> ]
-"6473" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1586</SUB>> ]
-"6480" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1586</SUB>> ]
-"6457" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1585</SUB>> ]
-"6474" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1586</SUB>> ]
-"6458" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1585</SUB>> ]
-"6460" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1585</SUB>> ]
-"6475" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1586</SUB>> ]
-"6477" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1586</SUB>> ]
-"6440" [label = <(METHOD,CallNonvirtualVoidMethodV)<SUB>1583</SUB>> ]
-"6489" [label = <(METHOD_RETURN,void)<SUB>1583</SUB>> ]
-  "6447" -> "6452" 
-  "6447" -> "6464" 
-  "6464" -> "6469" 
-  "6464" -> "6482" 
-  "6482" -> "6484" 
-  "6484" -> "6489" 
-  "6451" -> "6458" 
-  "6451" -> "6464" 
-  "6468" -> "6475" 
-  "6468" -> "6482" 
-  "6452" -> "6451" 
-  "6456" -> "6463" 
-  "6463" -> "6489" 
-  "6469" -> "6468" 
-  "6473" -> "6480" 
-  "6480" -> "6489" 
-  "6457" -> "6456" 
-  "6474" -> "6473" 
-  "6458" -> "6460" 
-  "6460" -> "6457" 
-  "6475" -> "6477" 
-  "6477" -> "6474" 
-  "6440" -> "6447" 
+digraph "GetObjectField" {  
+"6498" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(obj))<SUB>1539</SUB>> ]
+"6516" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(fid))<SUB>1540</SUB>> ]
+"6535" [label = <(soa,soa(env))<SUB>1541</SUB>> ]
+"6538" [label = <(&lt;operator&gt;.assignment,* f = jni::DecodeArtField(fid))<SUB>1542</SUB>> ]
+"6545" [label = <(NotifyGetField,NotifyGetField(f, obj))<SUB>1543</SUB>> ]
+"6548" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; o = soa.Decode&lt;mirror::Object&gt;(obj))<SUB>1544</SUB>> ]
+"6565" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(f-&gt;GetObject(o));,return soa.AddLocalReference&lt;jobject&gt;(f-&gt;GetObject(o));)<SUB>1545</SUB>> ]
+"6540" [label = <(jni::DecodeArtField,jni::DecodeArtField(fid))<SUB>1542</SUB>> ]
+"6549" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; o)<SUB>1544</SUB>> ]
+"6556" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(obj))<SUB>1544</SUB>> ]
+"6566" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(f-&gt;GetObject(o)))<SUB>1545</SUB>> ]
+"6541" [label = <(&lt;operator&gt;.fieldAccess,jni::DecodeArtField)<SUB>1542</SUB>> ]
+"6550" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>1544</SUB>> ]
+"6557" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>1544</SUB>> ]
+"6567" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>1545</SUB>> ]
+"6572" [label = <(GetObject,f-&gt;GetObject(o))<SUB>1545</SUB>> ]
+"6502" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1539</SUB>> ]
+"6520" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1540</SUB>> ]
+"6543" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1542</SUB>> ]
+"6552" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1544</SUB>> ]
+"6558" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1544</SUB>> ]
+"6561" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1544</SUB>> ]
+"6568" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1545</SUB>> ]
+"6573" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetObject)<SUB>1545</SUB>> ]
+"6503" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1539</SUB>> ]
+"6507" [label = <(CHECK_NON_NULL_ARGUMENT(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1539</SUB>> ]
+"6514" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(obj),CHECK_NON_NULL_ARGUMENT(obj))<SUB>1539</SUB>> ]
+"6521" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1540</SUB>> ]
+"6525" [label = <(CHECK_NON_NULL_ARGUMENT(fid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1540</SUB>> ]
+"6532" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(fid),CHECK_NON_NULL_ARGUMENT(fid))<SUB>1540</SUB>> ]
+"6554" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1544</SUB>> ]
+"6560" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1544</SUB>> ]
+"6563" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1544</SUB>> ]
+"6570" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1545</SUB>> ]
+"6575" [label = <(FIELD_IDENTIFIER,GetObject,GetObject)<SUB>1545</SUB>> ]
+"6508" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1539</SUB>> ]
+"6526" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1540</SUB>> ]
+"6509" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1539</SUB>> ]
+"6511" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1539</SUB>> ]
+"6527" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1540</SUB>> ]
+"6529" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1540</SUB>> ]
+"6493" [label = <(METHOD,GetObjectField)<SUB>1538</SUB>> ]
+"6577" [label = <(METHOD_RETURN,jobject)<SUB>1538</SUB>> ]
+  "6498" -> "6503" 
+  "6498" -> "6516" 
+  "6516" -> "6521" 
+  "6516" -> "6535" 
+  "6535" -> "6543" 
+  "6538" -> "6545" 
+  "6545" -> "6554" 
+  "6548" -> "6570" 
+  "6565" -> "6577" 
+  "6540" -> "6538" 
+  "6549" -> "6560" 
+  "6556" -> "6548" 
+  "6566" -> "6565" 
+  "6541" -> "6540" 
+  "6550" -> "6549" 
+  "6557" -> "6556" 
+  "6567" -> "6575" 
+  "6572" -> "6566" 
+  "6502" -> "6509" 
+  "6502" -> "6516" 
+  "6520" -> "6527" 
+  "6520" -> "6535" 
+  "6543" -> "6541" 
+  "6552" -> "6550" 
+  "6558" -> "6563" 
+  "6561" -> "6557" 
+  "6568" -> "6567" 
+  "6573" -> "6572" 
+  "6503" -> "6502" 
+  "6507" -> "6514" 
+  "6514" -> "6577" 
+  "6521" -> "6520" 
+  "6525" -> "6532" 
+  "6532" -> "6577" 
+  "6554" -> "6552" 
+  "6560" -> "6558" 
+  "6563" -> "6561" 
+  "6570" -> "6568" 
+  "6575" -> "6573" 
+  "6508" -> "6507" 
+  "6526" -> "6525" 
+  "6509" -> "6511" 
+  "6511" -> "6508" 
+  "6527" -> "6529" 
+  "6529" -> "6526" 
+  "6493" -> "6498" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/131-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/131-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/131-cfg.dot	2023-06-07 19:35:28.307384340 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/131-cfg.dot	2023-06-07 19:35:34.827383771 +0330
@@ -1,45 +1,57 @@
-digraph "CallNonvirtualVoidMethodA" {  
-"6498" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1593</SUB>> ]
-"6515" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1594</SUB>> ]
-"6533" [label = <(soa,soa(env))<SUB>1595</SUB>> ]
-"6535" [label = <(InvokeWithJValues,InvokeWithJValues(soa, obj, mid, args))<SUB>1596</SUB>> ]
-"6502" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1593</SUB>> ]
-"6519" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1594</SUB>> ]
-"6503" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1593</SUB>> ]
-"6507" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1593</SUB>> ]
-"6514" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1593</SUB>> ]
-"6520" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1594</SUB>> ]
-"6524" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1594</SUB>> ]
-"6531" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1594</SUB>> ]
-"6508" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1593</SUB>> ]
-"6525" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1594</SUB>> ]
-"6509" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1593</SUB>> ]
-"6511" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1593</SUB>> ]
-"6526" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1594</SUB>> ]
-"6528" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1594</SUB>> ]
-"6491" [label = <(METHOD,CallNonvirtualVoidMethodA)<SUB>1591</SUB>> ]
-"6540" [label = <(METHOD_RETURN,void)<SUB>1591</SUB>> ]
-  "6498" -> "6503" 
-  "6498" -> "6515" 
-  "6515" -> "6520" 
-  "6515" -> "6533" 
-  "6533" -> "6535" 
-  "6535" -> "6540" 
-  "6502" -> "6509" 
-  "6502" -> "6515" 
-  "6519" -> "6526" 
-  "6519" -> "6533" 
-  "6503" -> "6502" 
-  "6507" -> "6514" 
-  "6514" -> "6540" 
-  "6520" -> "6519" 
-  "6524" -> "6531" 
-  "6531" -> "6540" 
-  "6508" -> "6507" 
-  "6525" -> "6524" 
-  "6509" -> "6511" 
-  "6511" -> "6508" 
-  "6526" -> "6528" 
-  "6528" -> "6525" 
-  "6491" -> "6498" 
+digraph "GetStaticObjectField" {  
+"6584" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(fid))<SUB>1549</SUB>> ]
+"6603" [label = <(soa,soa(env))<SUB>1550</SUB>> ]
+"6606" [label = <(&lt;operator&gt;.assignment,* f = jni::DecodeArtField(fid))<SUB>1551</SUB>> ]
+"6613" [label = <(NotifyGetField,NotifyGetField(f, nullptr))<SUB>1552</SUB>> ]
+"6616" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(f-&gt;GetObject(f-&gt;GetDeclaringClass()));,return soa.AddLocalReference&lt;jobject&gt;(f-&gt;GetObject(f-&gt;GetDeclaringClass()));)<SUB>1553</SUB>> ]
+"6608" [label = <(jni::DecodeArtField,jni::DecodeArtField(fid))<SUB>1551</SUB>> ]
+"6617" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(f-&gt;GetObject(f-&gt;GetDeclaringClass())))<SUB>1553</SUB>> ]
+"6609" [label = <(&lt;operator&gt;.fieldAccess,jni::DecodeArtField)<SUB>1551</SUB>> ]
+"6618" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>1553</SUB>> ]
+"6623" [label = <(GetObject,f-&gt;GetObject(f-&gt;GetDeclaringClass()))<SUB>1553</SUB>> ]
+"6588" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1549</SUB>> ]
+"6611" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1551</SUB>> ]
+"6619" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1553</SUB>> ]
+"6624" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetObject)<SUB>1553</SUB>> ]
+"6627" [label = <(GetDeclaringClass,f-&gt;GetDeclaringClass())<SUB>1553</SUB>> ]
+"6589" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1549</SUB>> ]
+"6593" [label = <(CHECK_NON_NULL_ARGUMENT(fid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1549</SUB>> ]
+"6600" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(fid),CHECK_NON_NULL_ARGUMENT(fid))<SUB>1549</SUB>> ]
+"6621" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1553</SUB>> ]
+"6626" [label = <(FIELD_IDENTIFIER,GetObject,GetObject)<SUB>1553</SUB>> ]
+"6628" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1553</SUB>> ]
+"6594" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1549</SUB>> ]
+"6630" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1553</SUB>> ]
+"6595" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1549</SUB>> ]
+"6597" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1549</SUB>> ]
+"6579" [label = <(METHOD,GetStaticObjectField)<SUB>1548</SUB>> ]
+"6631" [label = <(METHOD_RETURN,jobject)<SUB>1548</SUB>> ]
+  "6584" -> "6589" 
+  "6584" -> "6603" 
+  "6603" -> "6611" 
+  "6606" -> "6613" 
+  "6613" -> "6621" 
+  "6616" -> "6631" 
+  "6608" -> "6606" 
+  "6617" -> "6616" 
+  "6609" -> "6608" 
+  "6618" -> "6626" 
+  "6623" -> "6617" 
+  "6588" -> "6595" 
+  "6588" -> "6603" 
+  "6611" -> "6609" 
+  "6619" -> "6618" 
+  "6624" -> "6630" 
+  "6627" -> "6623" 
+  "6589" -> "6588" 
+  "6593" -> "6600" 
+  "6600" -> "6631" 
+  "6621" -> "6619" 
+  "6626" -> "6624" 
+  "6628" -> "6627" 
+  "6594" -> "6593" 
+  "6630" -> "6628" 
+  "6595" -> "6597" 
+  "6597" -> "6594" 
+  "6579" -> "6584" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/132-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/132-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/132-cfg.dot	2023-06-07 19:35:28.307384340 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/132-cfg.dot	2023-06-07 19:35:34.827383771 +0330
@@ -1,65 +1,109 @@
-digraph "GetFieldID" {  
-"6548" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_class))<SUB>1600</SUB>> ]
-"6566" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(name))<SUB>1601</SUB>> ]
-"6584" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(sig))<SUB>1602</SUB>> ]
-"6603" [label = <(soa,soa(env))<SUB>1603</SUB>> ]
-"6605" [label = <(RETURN,return FindFieldID(soa, java_class, name, sig, false);,return FindFieldID(soa, java_class, name, sig, false);)<SUB>1604</SUB>> ]
-"6606" [label = <(FindFieldID,FindFieldID(soa, java_class, name, sig, false))<SUB>1604</SUB>> ]
-"6552" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>1600</SUB>> ]
-"6570" [label = <(UNLIKELY,UNLIKELY((name) == nullptr))<SUB>1601</SUB>> ]
-"6588" [label = <(UNLIKELY,UNLIKELY((sig) == nullptr))<SUB>1602</SUB>> ]
-"6553" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>1600</SUB>> ]
-"6557" [label = <(CHECK_NON_NULL_ARGUMENT(java_class),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class == null&quot;))<SUB>1600</SUB>> ]
-"6564" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_class),CHECK_NON_NULL_ARGUMENT(java_class))<SUB>1600</SUB>> ]
-"6571" [label = <(&lt;operator&gt;.equals,(name) == nullptr)<SUB>1601</SUB>> ]
-"6575" [label = <(CHECK_NON_NULL_ARGUMENT(name),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;name == null&quot;))<SUB>1601</SUB>> ]
-"6582" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(name),CHECK_NON_NULL_ARGUMENT(name))<SUB>1601</SUB>> ]
-"6589" [label = <(&lt;operator&gt;.equals,(sig) == nullptr)<SUB>1602</SUB>> ]
-"6593" [label = <(CHECK_NON_NULL_ARGUMENT(sig),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;sig == null&quot;))<SUB>1602</SUB>> ]
-"6600" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(sig),CHECK_NON_NULL_ARGUMENT(sig))<SUB>1602</SUB>> ]
-"6558" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1600</SUB>> ]
-"6576" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1601</SUB>> ]
-"6594" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1602</SUB>> ]
-"6559" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1600</SUB>> ]
-"6561" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1600</SUB>> ]
-"6577" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1601</SUB>> ]
-"6579" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1601</SUB>> ]
-"6595" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1602</SUB>> ]
-"6597" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1602</SUB>> ]
-"6542" [label = <(METHOD,GetFieldID)<SUB>1599</SUB>> ]
-"6612" [label = <(METHOD_RETURN,jfieldID)<SUB>1599</SUB>> ]
-  "6548" -> "6553" 
-  "6548" -> "6566" 
-  "6566" -> "6571" 
-  "6566" -> "6584" 
-  "6584" -> "6589" 
-  "6584" -> "6603" 
-  "6603" -> "6606" 
-  "6605" -> "6612" 
-  "6606" -> "6605" 
-  "6552" -> "6559" 
-  "6552" -> "6566" 
-  "6570" -> "6577" 
-  "6570" -> "6584" 
-  "6588" -> "6595" 
-  "6588" -> "6603" 
-  "6553" -> "6552" 
-  "6557" -> "6564" 
-  "6564" -> "6612" 
-  "6571" -> "6570" 
-  "6575" -> "6582" 
-  "6582" -> "6612" 
-  "6589" -> "6588" 
-  "6593" -> "6600" 
-  "6600" -> "6612" 
-  "6558" -> "6557" 
-  "6576" -> "6575" 
-  "6594" -> "6593" 
-  "6559" -> "6561" 
-  "6561" -> "6558" 
-  "6577" -> "6579" 
-  "6579" -> "6576" 
-  "6595" -> "6597" 
-  "6597" -> "6594" 
-  "6542" -> "6548" 
+digraph "SetObjectField" {  
+"6639" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_object))<SUB>1557</SUB>> ]
+"6656" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid))<SUB>1558</SUB>> ]
+"6674" [label = <(soa,soa(env))<SUB>1559</SUB>> ]
+"6677" [label = <(&lt;operator&gt;.assignment,* f = jni::DecodeArtField(fid))<SUB>1560</SUB>> ]
+"6684" [label = <(NotifySetObjectField,NotifySetObjectField(f, java_object, java_value))<SUB>1561</SUB>> ]
+"6688" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; o = soa.Decode&lt;mirror::Object&gt;(java_object))<SUB>1562</SUB>> ]
+"6705" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; v = soa.Decode&lt;mirror::Object&gt;(java_value))<SUB>1563</SUB>> ]
+"6722" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetObject&lt;false&gt;(o, v))<SUB>1564</SUB>> ]
+"6679" [label = <(jni::DecodeArtField,jni::DecodeArtField(fid))<SUB>1560</SUB>> ]
+"6689" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; o)<SUB>1562</SUB>> ]
+"6696" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(java_object))<SUB>1562</SUB>> ]
+"6706" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; v)<SUB>1563</SUB>> ]
+"6713" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(java_value))<SUB>1563</SUB>> ]
+"6723" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetObject&lt;false)<SUB>1564</SUB>> ]
+"6728" [label = <(&lt;operator&gt;.bracketedPrimary,(o, v))<SUB>1564</SUB>> ]
+"6680" [label = <(&lt;operator&gt;.fieldAccess,jni::DecodeArtField)<SUB>1560</SUB>> ]
+"6690" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>1562</SUB>> ]
+"6697" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>1562</SUB>> ]
+"6707" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>1563</SUB>> ]
+"6714" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>1563</SUB>> ]
+"6724" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetObject)<SUB>1564</SUB>> ]
+"6729" [label = <(&lt;operator&gt;.expressionList,o, v)<SUB>1564</SUB>> ]
+"6643" [label = <(UNLIKELY,UNLIKELY((java_object) == nullptr))<SUB>1557</SUB>> ]
+"6660" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1558</SUB>> ]
+"6682" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1560</SUB>> ]
+"6692" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1562</SUB>> ]
+"6698" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1562</SUB>> ]
+"6701" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1562</SUB>> ]
+"6709" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1563</SUB>> ]
+"6715" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1563</SUB>> ]
+"6718" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1563</SUB>> ]
+"6726" [label = <(FIELD_IDENTIFIER,SetObject,SetObject)<SUB>1564</SUB>> ]
+"6644" [label = <(&lt;operator&gt;.equals,(java_object) == nullptr)<SUB>1557</SUB>> ]
+"6648" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_object),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_object == null&quot;))<SUB>1557</SUB>> ]
+"6655" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_object),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_object))<SUB>1557</SUB>> ]
+"6661" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1558</SUB>> ]
+"6665" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1558</SUB>> ]
+"6672" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid))<SUB>1558</SUB>> ]
+"6694" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1562</SUB>> ]
+"6700" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1562</SUB>> ]
+"6703" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1562</SUB>> ]
+"6711" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1563</SUB>> ]
+"6717" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1563</SUB>> ]
+"6720" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1563</SUB>> ]
+"6649" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1557</SUB>> ]
+"6666" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1558</SUB>> ]
+"6650" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1557</SUB>> ]
+"6652" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1557</SUB>> ]
+"6667" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1558</SUB>> ]
+"6669" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1558</SUB>> ]
+"6633" [label = <(METHOD,SetObjectField)<SUB>1556</SUB>> ]
+"6732" [label = <(METHOD_RETURN,void)<SUB>1556</SUB>> ]
+  "6639" -> "6644" 
+  "6639" -> "6656" 
+  "6656" -> "6661" 
+  "6656" -> "6674" 
+  "6674" -> "6682" 
+  "6677" -> "6684" 
+  "6684" -> "6694" 
+  "6688" -> "6711" 
+  "6705" -> "6726" 
+  "6722" -> "6732" 
+  "6679" -> "6677" 
+  "6689" -> "6700" 
+  "6696" -> "6688" 
+  "6706" -> "6717" 
+  "6713" -> "6705" 
+  "6723" -> "6729" 
+  "6728" -> "6722" 
+  "6680" -> "6679" 
+  "6690" -> "6689" 
+  "6697" -> "6696" 
+  "6707" -> "6706" 
+  "6714" -> "6713" 
+  "6724" -> "6723" 
+  "6729" -> "6728" 
+  "6643" -> "6650" 
+  "6643" -> "6656" 
+  "6660" -> "6667" 
+  "6660" -> "6674" 
+  "6682" -> "6680" 
+  "6692" -> "6690" 
+  "6698" -> "6703" 
+  "6701" -> "6697" 
+  "6709" -> "6707" 
+  "6715" -> "6720" 
+  "6718" -> "6714" 
+  "6726" -> "6724" 
+  "6644" -> "6643" 
+  "6648" -> "6655" 
+  "6655" -> "6732" 
+  "6661" -> "6660" 
+  "6665" -> "6672" 
+  "6672" -> "6732" 
+  "6694" -> "6692" 
+  "6700" -> "6698" 
+  "6703" -> "6701" 
+  "6711" -> "6709" 
+  "6717" -> "6715" 
+  "6720" -> "6718" 
+  "6649" -> "6648" 
+  "6666" -> "6665" 
+  "6650" -> "6652" 
+  "6652" -> "6649" 
+  "6667" -> "6669" 
+  "6669" -> "6666" 
+  "6633" -> "6639" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/133-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/133-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/133-cfg.dot	2023-06-07 19:35:28.307384340 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/133-cfg.dot	2023-06-07 19:35:34.827383771 +0330
@@ -1,65 +1,75 @@
-digraph "GetStaticFieldID" {  
-"6620" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_class))<SUB>1609</SUB>> ]
-"6638" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(name))<SUB>1610</SUB>> ]
-"6656" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(sig))<SUB>1611</SUB>> ]
-"6675" [label = <(soa,soa(env))<SUB>1612</SUB>> ]
-"6677" [label = <(RETURN,return FindFieldID(soa, java_class, name, sig, true);,return FindFieldID(soa, java_class, name, sig, true);)<SUB>1613</SUB>> ]
-"6678" [label = <(FindFieldID,FindFieldID(soa, java_class, name, sig, true))<SUB>1613</SUB>> ]
-"6624" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>1609</SUB>> ]
-"6642" [label = <(UNLIKELY,UNLIKELY((name) == nullptr))<SUB>1610</SUB>> ]
-"6660" [label = <(UNLIKELY,UNLIKELY((sig) == nullptr))<SUB>1611</SUB>> ]
-"6625" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>1609</SUB>> ]
-"6629" [label = <(CHECK_NON_NULL_ARGUMENT(java_class),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class == null&quot;))<SUB>1609</SUB>> ]
-"6636" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_class),CHECK_NON_NULL_ARGUMENT(java_class))<SUB>1609</SUB>> ]
-"6643" [label = <(&lt;operator&gt;.equals,(name) == nullptr)<SUB>1610</SUB>> ]
-"6647" [label = <(CHECK_NON_NULL_ARGUMENT(name),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;name == null&quot;))<SUB>1610</SUB>> ]
-"6654" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(name),CHECK_NON_NULL_ARGUMENT(name))<SUB>1610</SUB>> ]
-"6661" [label = <(&lt;operator&gt;.equals,(sig) == nullptr)<SUB>1611</SUB>> ]
-"6665" [label = <(CHECK_NON_NULL_ARGUMENT(sig),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;sig == null&quot;))<SUB>1611</SUB>> ]
-"6672" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(sig),CHECK_NON_NULL_ARGUMENT(sig))<SUB>1611</SUB>> ]
-"6630" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1609</SUB>> ]
-"6648" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1610</SUB>> ]
-"6666" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1611</SUB>> ]
-"6631" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1609</SUB>> ]
-"6633" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1609</SUB>> ]
-"6649" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1610</SUB>> ]
-"6651" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1610</SUB>> ]
-"6667" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1611</SUB>> ]
-"6669" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1611</SUB>> ]
-"6614" [label = <(METHOD,GetStaticFieldID)<SUB>1607</SUB>> ]
-"6684" [label = <(METHOD_RETURN,jfieldID)<SUB>1607</SUB>> ]
-  "6620" -> "6625" 
-  "6620" -> "6638" 
-  "6638" -> "6643" 
-  "6638" -> "6656" 
-  "6656" -> "6661" 
-  "6656" -> "6675" 
-  "6675" -> "6678" 
-  "6677" -> "6684" 
-  "6678" -> "6677" 
-  "6624" -> "6631" 
-  "6624" -> "6638" 
-  "6642" -> "6649" 
-  "6642" -> "6656" 
-  "6660" -> "6667" 
-  "6660" -> "6675" 
-  "6625" -> "6624" 
-  "6629" -> "6636" 
-  "6636" -> "6684" 
-  "6643" -> "6642" 
-  "6647" -> "6654" 
-  "6654" -> "6684" 
-  "6661" -> "6660" 
-  "6665" -> "6672" 
-  "6672" -> "6684" 
-  "6630" -> "6629" 
-  "6648" -> "6647" 
-  "6666" -> "6665" 
-  "6631" -> "6633" 
-  "6633" -> "6630" 
-  "6649" -> "6651" 
-  "6651" -> "6648" 
-  "6667" -> "6669" 
-  "6669" -> "6666" 
-  "6614" -> "6620" 
+digraph "SetStaticObjectField" {  
+"6740" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid))<SUB>1568</SUB>> ]
+"6758" [label = <(soa,soa(env))<SUB>1569</SUB>> ]
+"6761" [label = <(&lt;operator&gt;.assignment,* f = jni::DecodeArtField(fid))<SUB>1570</SUB>> ]
+"6768" [label = <(NotifySetObjectField,NotifySetObjectField(f, nullptr, java_value))<SUB>1571</SUB>> ]
+"6772" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; v = soa.Decode&lt;mirror::Object&gt;(java_value))<SUB>1572</SUB>> ]
+"6789" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetObject&lt;false&gt;(f-&gt;GetDeclaringClass(), v))<SUB>1573</SUB>> ]
+"6763" [label = <(jni::DecodeArtField,jni::DecodeArtField(fid))<SUB>1570</SUB>> ]
+"6773" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; v)<SUB>1572</SUB>> ]
+"6780" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(java_value))<SUB>1572</SUB>> ]
+"6790" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetObject&lt;false)<SUB>1573</SUB>> ]
+"6795" [label = <(&lt;operator&gt;.bracketedPrimary,(f-&gt;GetDeclaringClass(), v))<SUB>1573</SUB>> ]
+"6764" [label = <(&lt;operator&gt;.fieldAccess,jni::DecodeArtField)<SUB>1570</SUB>> ]
+"6774" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>1572</SUB>> ]
+"6781" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>1572</SUB>> ]
+"6791" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetObject)<SUB>1573</SUB>> ]
+"6796" [label = <(&lt;operator&gt;.expressionList,f-&gt;GetDeclaringClass(), v)<SUB>1573</SUB>> ]
+"6744" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1568</SUB>> ]
+"6766" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1570</SUB>> ]
+"6776" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1572</SUB>> ]
+"6782" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1572</SUB>> ]
+"6785" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1572</SUB>> ]
+"6793" [label = <(FIELD_IDENTIFIER,SetObject,SetObject)<SUB>1573</SUB>> ]
+"6797" [label = <(GetDeclaringClass,f-&gt;GetDeclaringClass())<SUB>1573</SUB>> ]
+"6745" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1568</SUB>> ]
+"6749" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1568</SUB>> ]
+"6756" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid))<SUB>1568</SUB>> ]
+"6778" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1572</SUB>> ]
+"6784" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1572</SUB>> ]
+"6787" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1572</SUB>> ]
+"6798" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1573</SUB>> ]
+"6750" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1568</SUB>> ]
+"6800" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1573</SUB>> ]
+"6751" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1568</SUB>> ]
+"6753" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1568</SUB>> ]
+"6734" [label = <(METHOD,SetStaticObjectField)<SUB>1567</SUB>> ]
+"6802" [label = <(METHOD_RETURN,void)<SUB>1567</SUB>> ]
+  "6740" -> "6745" 
+  "6740" -> "6758" 
+  "6758" -> "6766" 
+  "6761" -> "6768" 
+  "6768" -> "6778" 
+  "6772" -> "6793" 
+  "6789" -> "6802" 
+  "6763" -> "6761" 
+  "6773" -> "6784" 
+  "6780" -> "6772" 
+  "6790" -> "6800" 
+  "6795" -> "6789" 
+  "6764" -> "6763" 
+  "6774" -> "6773" 
+  "6781" -> "6780" 
+  "6791" -> "6790" 
+  "6796" -> "6795" 
+  "6744" -> "6751" 
+  "6744" -> "6758" 
+  "6766" -> "6764" 
+  "6776" -> "6774" 
+  "6782" -> "6787" 
+  "6785" -> "6781" 
+  "6793" -> "6791" 
+  "6797" -> "6796" 
+  "6745" -> "6744" 
+  "6749" -> "6756" 
+  "6756" -> "6802" 
+  "6778" -> "6776" 
+  "6784" -> "6782" 
+  "6787" -> "6785" 
+  "6798" -> "6797" 
+  "6750" -> "6749" 
+  "6800" -> "6798" 
+  "6751" -> "6753" 
+  "6753" -> "6750" 
+  "6734" -> "6740" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/134-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/134-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/134-cfg.dot	2023-06-07 19:35:28.307384340 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/134-cfg.dot	2023-06-07 19:35:34.827383771 +0330
@@ -1,91 +1,80 @@
-digraph "GetObjectField" {  
-"6691" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(obj))<SUB>1617</SUB>> ]
-"6709" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(fid))<SUB>1618</SUB>> ]
-"6728" [label = <(soa,soa(env))<SUB>1619</SUB>> ]
-"6731" [label = <(&lt;operator&gt;.assignment,* f = jni::DecodeArtField(fid))<SUB>1620</SUB>> ]
-"6738" [label = <(NotifyGetField,NotifyGetField(f, obj))<SUB>1621</SUB>> ]
-"6741" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; o = soa.Decode&lt;mirror::Object&gt;(obj))<SUB>1622</SUB>> ]
-"6758" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(f-&gt;GetObject(o));,return soa.AddLocalReference&lt;jobject&gt;(f-&gt;GetObject(o));)<SUB>1623</SUB>> ]
-"6733" [label = <(jni::DecodeArtField,jni::DecodeArtField(fid))<SUB>1620</SUB>> ]
-"6742" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; o)<SUB>1622</SUB>> ]
-"6749" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(obj))<SUB>1622</SUB>> ]
-"6759" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(f-&gt;GetObject(o)))<SUB>1623</SUB>> ]
-"6734" [label = <(&lt;operator&gt;.fieldAccess,jni::DecodeArtField)<SUB>1620</SUB>> ]
-"6743" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>1622</SUB>> ]
-"6750" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>1622</SUB>> ]
-"6760" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>1623</SUB>> ]
-"6765" [label = <(GetObject,f-&gt;GetObject(o))<SUB>1623</SUB>> ]
-"6695" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1617</SUB>> ]
-"6713" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1618</SUB>> ]
-"6736" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1620</SUB>> ]
-"6745" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1622</SUB>> ]
-"6751" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1622</SUB>> ]
-"6754" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1622</SUB>> ]
-"6761" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1623</SUB>> ]
-"6766" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetObject)<SUB>1623</SUB>> ]
-"6696" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1617</SUB>> ]
-"6700" [label = <(CHECK_NON_NULL_ARGUMENT(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1617</SUB>> ]
-"6707" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(obj),CHECK_NON_NULL_ARGUMENT(obj))<SUB>1617</SUB>> ]
-"6714" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1618</SUB>> ]
-"6718" [label = <(CHECK_NON_NULL_ARGUMENT(fid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1618</SUB>> ]
-"6725" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(fid),CHECK_NON_NULL_ARGUMENT(fid))<SUB>1618</SUB>> ]
-"6747" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1622</SUB>> ]
-"6753" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1622</SUB>> ]
-"6756" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1622</SUB>> ]
-"6763" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1623</SUB>> ]
-"6768" [label = <(FIELD_IDENTIFIER,GetObject,GetObject)<SUB>1623</SUB>> ]
-"6701" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1617</SUB>> ]
-"6719" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1618</SUB>> ]
-"6702" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1617</SUB>> ]
-"6704" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1617</SUB>> ]
-"6720" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1618</SUB>> ]
-"6722" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1618</SUB>> ]
-"6686" [label = <(METHOD,GetObjectField)<SUB>1616</SUB>> ]
-"6770" [label = <(METHOD_RETURN,jobject)<SUB>1616</SUB>> ]
-  "6691" -> "6696" 
-  "6691" -> "6709" 
-  "6709" -> "6714" 
-  "6709" -> "6728" 
-  "6728" -> "6736" 
-  "6731" -> "6738" 
-  "6738" -> "6747" 
-  "6741" -> "6763" 
-  "6758" -> "6770" 
-  "6733" -> "6731" 
-  "6742" -> "6753" 
-  "6749" -> "6741" 
-  "6759" -> "6758" 
-  "6734" -> "6733" 
-  "6743" -> "6742" 
-  "6750" -> "6749" 
-  "6760" -> "6768" 
-  "6765" -> "6759" 
-  "6695" -> "6702" 
-  "6695" -> "6709" 
-  "6713" -> "6720" 
-  "6713" -> "6728" 
-  "6736" -> "6734" 
-  "6745" -> "6743" 
-  "6751" -> "6756" 
-  "6754" -> "6750" 
-  "6761" -> "6760" 
-  "6766" -> "6765" 
-  "6696" -> "6695" 
-  "6700" -> "6707" 
-  "6707" -> "6770" 
-  "6714" -> "6713" 
-  "6718" -> "6725" 
-  "6725" -> "6770" 
-  "6747" -> "6745" 
-  "6753" -> "6751" 
-  "6756" -> "6754" 
-  "6763" -> "6761" 
-  "6768" -> "6766" 
-  "6701" -> "6700" 
-  "6719" -> "6718" 
-  "6702" -> "6704" 
-  "6704" -> "6701" 
-  "6720" -> "6722" 
-  "6722" -> "6719" 
-  "6686" -> "6691" 
+digraph "GetBooleanField" {  
+"6809" [label = <(GET_PRIMITIVE_FIELD,GET_PRIMITIVE_FIELD(Boolean, obj))<SUB>1609</SUB>> ]
+"6843" [label = <(soa,ScopedObjectAccess)<SUB>1609</SUB>> ]
+"6846" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1609</SUB>> ]
+"6853" [label = <(NotifyGetField,NotifyGetField(f, obj))<SUB>1609</SUB>> ]
+"6856" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1609</SUB>> ]
+"6873" [label = <(RETURN,GET_PRIMITIVE_FIELD(Boolean, obj);,GET_PRIMITIVE_FIELD(Boolean, obj);)<SUB>1609</SUB>> ]
+"6828" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1609</SUB>> ]
+"6848" [label = <(GET_PRIMITIVE_FIELD(Boolean, obj),jni::DecodeArtField(fid))<SUB>1609</SUB>> ]
+"6857" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1609</SUB>> ]
+"6864" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1609</SUB>> ]
+"6874" [label = <(GET_PRIMITIVE_FIELD(Boolean, obj),f-&gt;GetBoolean(o))<SUB>1609</SUB>> ]
+"6829" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1609</SUB>> ]
+"6833" [label = <(GET_PRIMITIVE_FIELD(Boolean, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1609</SUB>> ]
+"6840" [label = <(RETURN,GET_PRIMITIVE_FIELD(Boolean, obj),GET_PRIMITIVE_FIELD(Boolean, obj))<SUB>1609</SUB>> ]
+"6849" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Boolean, obj))<SUB>1609</SUB>> ]
+"6858" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1609</SUB>> ]
+"6865" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1609</SUB>> ]
+"6875" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetBoolean)<SUB>1609</SUB>> ]
+"6813" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1609</SUB>> ]
+"6834" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1609</SUB>> ]
+"6851" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1609</SUB>> ]
+"6860" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Boolean, obj))<SUB>1609</SUB>> ]
+"6866" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1609</SUB>> ]
+"6869" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Boolean, obj))<SUB>1609</SUB>> ]
+"6877" [label = <(FIELD_IDENTIFIER,GetBoolean,GetBoolean)<SUB>1609</SUB>> ]
+"6814" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1609</SUB>> ]
+"6818" [label = <(GET_PRIMITIVE_FIELD(Boolean, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1609</SUB>> ]
+"6825" [label = <(RETURN,GET_PRIMITIVE_FIELD(Boolean, obj),GET_PRIMITIVE_FIELD(Boolean, obj))<SUB>1609</SUB>> ]
+"6835" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1609</SUB>> ]
+"6837" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1609</SUB>> ]
+"6862" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1609</SUB>> ]
+"6868" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1609</SUB>> ]
+"6871" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1609</SUB>> ]
+"6819" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1609</SUB>> ]
+"6820" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1609</SUB>> ]
+"6822" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1609</SUB>> ]
+"6804" [label = <(METHOD,GetBooleanField)<SUB>1608</SUB>> ]
+"6879" [label = <(METHOD_RETURN,jboolean)<SUB>1608</SUB>> ]
+  "6809" -> "6814" 
+  "6809" -> "6829" 
+  "6843" -> "6851" 
+  "6846" -> "6853" 
+  "6853" -> "6862" 
+  "6856" -> "6877" 
+  "6873" -> "6879" 
+  "6828" -> "6835" 
+  "6828" -> "6843" 
+  "6848" -> "6846" 
+  "6857" -> "6868" 
+  "6864" -> "6856" 
+  "6874" -> "6873" 
+  "6829" -> "6828" 
+  "6833" -> "6840" 
+  "6840" -> "6879" 
+  "6849" -> "6848" 
+  "6858" -> "6857" 
+  "6865" -> "6864" 
+  "6875" -> "6874" 
+  "6813" -> "6820" 
+  "6813" -> "6829" 
+  "6834" -> "6833" 
+  "6851" -> "6849" 
+  "6860" -> "6858" 
+  "6866" -> "6871" 
+  "6869" -> "6865" 
+  "6877" -> "6875" 
+  "6814" -> "6813" 
+  "6818" -> "6825" 
+  "6825" -> "6879" 
+  "6835" -> "6837" 
+  "6837" -> "6834" 
+  "6862" -> "6860" 
+  "6868" -> "6866" 
+  "6871" -> "6869" 
+  "6819" -> "6818" 
+  "6820" -> "6822" 
+  "6822" -> "6819" 
+  "6804" -> "6809" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/135-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/135-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/135-cfg.dot	2023-06-07 19:35:28.307384340 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/135-cfg.dot	2023-06-07 19:35:34.827383771 +0330
@@ -1,57 +1,80 @@
-digraph "GetStaticObjectField" {  
-"6777" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(fid))<SUB>1627</SUB>> ]
-"6796" [label = <(soa,soa(env))<SUB>1628</SUB>> ]
-"6799" [label = <(&lt;operator&gt;.assignment,* f = jni::DecodeArtField(fid))<SUB>1629</SUB>> ]
-"6806" [label = <(NotifyGetField,NotifyGetField(f, nullptr))<SUB>1630</SUB>> ]
-"6809" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(f-&gt;GetObject(f-&gt;GetDeclaringClass()));,return soa.AddLocalReference&lt;jobject&gt;(f-&gt;GetObject(f-&gt;GetDeclaringClass()));)<SUB>1631</SUB>> ]
-"6801" [label = <(jni::DecodeArtField,jni::DecodeArtField(fid))<SUB>1629</SUB>> ]
-"6810" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(f-&gt;GetObject(f-&gt;GetDeclaringClass())))<SUB>1631</SUB>> ]
-"6802" [label = <(&lt;operator&gt;.fieldAccess,jni::DecodeArtField)<SUB>1629</SUB>> ]
-"6811" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>1631</SUB>> ]
-"6816" [label = <(GetObject,f-&gt;GetObject(f-&gt;GetDeclaringClass()))<SUB>1631</SUB>> ]
-"6781" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1627</SUB>> ]
-"6804" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1629</SUB>> ]
-"6812" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1631</SUB>> ]
-"6817" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetObject)<SUB>1631</SUB>> ]
-"6820" [label = <(GetDeclaringClass,f-&gt;GetDeclaringClass())<SUB>1631</SUB>> ]
-"6782" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1627</SUB>> ]
-"6786" [label = <(CHECK_NON_NULL_ARGUMENT(fid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1627</SUB>> ]
-"6793" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(fid),CHECK_NON_NULL_ARGUMENT(fid))<SUB>1627</SUB>> ]
-"6814" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1631</SUB>> ]
-"6819" [label = <(FIELD_IDENTIFIER,GetObject,GetObject)<SUB>1631</SUB>> ]
-"6821" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1631</SUB>> ]
-"6787" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1627</SUB>> ]
-"6823" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1631</SUB>> ]
-"6788" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1627</SUB>> ]
-"6790" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1627</SUB>> ]
-"6772" [label = <(METHOD,GetStaticObjectField)<SUB>1626</SUB>> ]
-"6824" [label = <(METHOD_RETURN,jobject)<SUB>1626</SUB>> ]
-  "6777" -> "6782" 
-  "6777" -> "6796" 
-  "6796" -> "6804" 
-  "6799" -> "6806" 
-  "6806" -> "6814" 
-  "6809" -> "6824" 
-  "6801" -> "6799" 
-  "6810" -> "6809" 
-  "6802" -> "6801" 
-  "6811" -> "6819" 
-  "6816" -> "6810" 
-  "6781" -> "6788" 
-  "6781" -> "6796" 
-  "6804" -> "6802" 
-  "6812" -> "6811" 
-  "6817" -> "6823" 
-  "6820" -> "6816" 
-  "6782" -> "6781" 
-  "6786" -> "6793" 
-  "6793" -> "6824" 
-  "6814" -> "6812" 
-  "6819" -> "6817" 
-  "6821" -> "6820" 
-  "6787" -> "6786" 
-  "6823" -> "6821" 
-  "6788" -> "6790" 
-  "6790" -> "6787" 
-  "6772" -> "6777" 
+digraph "GetByteField" {  
+"6886" [label = <(GET_PRIMITIVE_FIELD,GET_PRIMITIVE_FIELD(Byte, obj))<SUB>1613</SUB>> ]
+"6920" [label = <(soa,ScopedObjectAccess)<SUB>1613</SUB>> ]
+"6923" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1613</SUB>> ]
+"6930" [label = <(NotifyGetField,NotifyGetField(f, obj))<SUB>1613</SUB>> ]
+"6933" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1613</SUB>> ]
+"6950" [label = <(RETURN,GET_PRIMITIVE_FIELD(Byte, obj);,GET_PRIMITIVE_FIELD(Byte, obj);)<SUB>1613</SUB>> ]
+"6905" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1613</SUB>> ]
+"6925" [label = <(GET_PRIMITIVE_FIELD(Byte, obj),jni::DecodeArtField(fid))<SUB>1613</SUB>> ]
+"6934" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1613</SUB>> ]
+"6941" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1613</SUB>> ]
+"6951" [label = <(GET_PRIMITIVE_FIELD(Byte, obj),f-&gt;GetByte(o))<SUB>1613</SUB>> ]
+"6906" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1613</SUB>> ]
+"6910" [label = <(GET_PRIMITIVE_FIELD(Byte, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1613</SUB>> ]
+"6917" [label = <(RETURN,GET_PRIMITIVE_FIELD(Byte, obj),GET_PRIMITIVE_FIELD(Byte, obj))<SUB>1613</SUB>> ]
+"6926" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Byte, obj))<SUB>1613</SUB>> ]
+"6935" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1613</SUB>> ]
+"6942" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1613</SUB>> ]
+"6952" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetByte)<SUB>1613</SUB>> ]
+"6890" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1613</SUB>> ]
+"6911" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1613</SUB>> ]
+"6928" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1613</SUB>> ]
+"6937" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Byte, obj))<SUB>1613</SUB>> ]
+"6943" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1613</SUB>> ]
+"6946" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Byte, obj))<SUB>1613</SUB>> ]
+"6954" [label = <(FIELD_IDENTIFIER,GetByte,GetByte)<SUB>1613</SUB>> ]
+"6891" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1613</SUB>> ]
+"6895" [label = <(GET_PRIMITIVE_FIELD(Byte, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1613</SUB>> ]
+"6902" [label = <(RETURN,GET_PRIMITIVE_FIELD(Byte, obj),GET_PRIMITIVE_FIELD(Byte, obj))<SUB>1613</SUB>> ]
+"6912" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1613</SUB>> ]
+"6914" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1613</SUB>> ]
+"6939" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1613</SUB>> ]
+"6945" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1613</SUB>> ]
+"6948" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1613</SUB>> ]
+"6896" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1613</SUB>> ]
+"6897" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1613</SUB>> ]
+"6899" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1613</SUB>> ]
+"6881" [label = <(METHOD,GetByteField)<SUB>1612</SUB>> ]
+"6956" [label = <(METHOD_RETURN,jbyte)<SUB>1612</SUB>> ]
+  "6886" -> "6891" 
+  "6886" -> "6906" 
+  "6920" -> "6928" 
+  "6923" -> "6930" 
+  "6930" -> "6939" 
+  "6933" -> "6954" 
+  "6950" -> "6956" 
+  "6905" -> "6912" 
+  "6905" -> "6920" 
+  "6925" -> "6923" 
+  "6934" -> "6945" 
+  "6941" -> "6933" 
+  "6951" -> "6950" 
+  "6906" -> "6905" 
+  "6910" -> "6917" 
+  "6917" -> "6956" 
+  "6926" -> "6925" 
+  "6935" -> "6934" 
+  "6942" -> "6941" 
+  "6952" -> "6951" 
+  "6890" -> "6897" 
+  "6890" -> "6906" 
+  "6911" -> "6910" 
+  "6928" -> "6926" 
+  "6937" -> "6935" 
+  "6943" -> "6948" 
+  "6946" -> "6942" 
+  "6954" -> "6952" 
+  "6891" -> "6890" 
+  "6895" -> "6902" 
+  "6902" -> "6956" 
+  "6912" -> "6914" 
+  "6914" -> "6911" 
+  "6939" -> "6937" 
+  "6945" -> "6943" 
+  "6948" -> "6946" 
+  "6896" -> "6895" 
+  "6897" -> "6899" 
+  "6899" -> "6896" 
+  "6881" -> "6886" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/136-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/136-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/136-cfg.dot	2023-06-07 19:35:28.307384340 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/136-cfg.dot	2023-06-07 19:35:34.827383771 +0330
@@ -1,109 +1,80 @@
-digraph "SetObjectField" {  
-"6832" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_object))<SUB>1635</SUB>> ]
-"6849" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid))<SUB>1636</SUB>> ]
-"6867" [label = <(soa,soa(env))<SUB>1637</SUB>> ]
-"6870" [label = <(&lt;operator&gt;.assignment,* f = jni::DecodeArtField(fid))<SUB>1638</SUB>> ]
-"6877" [label = <(NotifySetObjectField,NotifySetObjectField(f, java_object, java_value))<SUB>1639</SUB>> ]
-"6881" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; o = soa.Decode&lt;mirror::Object&gt;(java_object))<SUB>1640</SUB>> ]
-"6898" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; v = soa.Decode&lt;mirror::Object&gt;(java_value))<SUB>1641</SUB>> ]
-"6915" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetObject&lt;false&gt;(o, v))<SUB>1642</SUB>> ]
-"6872" [label = <(jni::DecodeArtField,jni::DecodeArtField(fid))<SUB>1638</SUB>> ]
-"6882" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; o)<SUB>1640</SUB>> ]
-"6889" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(java_object))<SUB>1640</SUB>> ]
-"6899" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; v)<SUB>1641</SUB>> ]
-"6906" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(java_value))<SUB>1641</SUB>> ]
-"6916" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetObject&lt;false)<SUB>1642</SUB>> ]
-"6921" [label = <(&lt;operator&gt;.bracketedPrimary,(o, v))<SUB>1642</SUB>> ]
-"6873" [label = <(&lt;operator&gt;.fieldAccess,jni::DecodeArtField)<SUB>1638</SUB>> ]
-"6883" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>1640</SUB>> ]
-"6890" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>1640</SUB>> ]
-"6900" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>1641</SUB>> ]
-"6907" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>1641</SUB>> ]
-"6917" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetObject)<SUB>1642</SUB>> ]
-"6922" [label = <(&lt;operator&gt;.expressionList,o, v)<SUB>1642</SUB>> ]
-"6836" [label = <(UNLIKELY,UNLIKELY((java_object) == nullptr))<SUB>1635</SUB>> ]
-"6853" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1636</SUB>> ]
-"6875" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1638</SUB>> ]
-"6885" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1640</SUB>> ]
-"6891" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1640</SUB>> ]
-"6894" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1640</SUB>> ]
-"6902" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1641</SUB>> ]
-"6908" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1641</SUB>> ]
-"6911" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1641</SUB>> ]
-"6919" [label = <(FIELD_IDENTIFIER,SetObject,SetObject)<SUB>1642</SUB>> ]
-"6837" [label = <(&lt;operator&gt;.equals,(java_object) == nullptr)<SUB>1635</SUB>> ]
-"6841" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_object),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_object == null&quot;))<SUB>1635</SUB>> ]
-"6848" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_object),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_object))<SUB>1635</SUB>> ]
-"6854" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1636</SUB>> ]
-"6858" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1636</SUB>> ]
-"6865" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid))<SUB>1636</SUB>> ]
-"6887" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1640</SUB>> ]
-"6893" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1640</SUB>> ]
-"6896" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1640</SUB>> ]
-"6904" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1641</SUB>> ]
-"6910" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1641</SUB>> ]
-"6913" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1641</SUB>> ]
-"6842" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1635</SUB>> ]
-"6859" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1636</SUB>> ]
-"6843" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1635</SUB>> ]
-"6845" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1635</SUB>> ]
-"6860" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1636</SUB>> ]
-"6862" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1636</SUB>> ]
-"6826" [label = <(METHOD,SetObjectField)<SUB>1634</SUB>> ]
-"6925" [label = <(METHOD_RETURN,void)<SUB>1634</SUB>> ]
-  "6832" -> "6837" 
-  "6832" -> "6849" 
-  "6849" -> "6854" 
-  "6849" -> "6867" 
-  "6867" -> "6875" 
-  "6870" -> "6877" 
-  "6877" -> "6887" 
-  "6881" -> "6904" 
-  "6898" -> "6919" 
-  "6915" -> "6925" 
-  "6872" -> "6870" 
-  "6882" -> "6893" 
-  "6889" -> "6881" 
-  "6899" -> "6910" 
-  "6906" -> "6898" 
-  "6916" -> "6922" 
-  "6921" -> "6915" 
-  "6873" -> "6872" 
-  "6883" -> "6882" 
-  "6890" -> "6889" 
-  "6900" -> "6899" 
-  "6907" -> "6906" 
-  "6917" -> "6916" 
-  "6922" -> "6921" 
-  "6836" -> "6843" 
-  "6836" -> "6849" 
-  "6853" -> "6860" 
-  "6853" -> "6867" 
-  "6875" -> "6873" 
-  "6885" -> "6883" 
-  "6891" -> "6896" 
-  "6894" -> "6890" 
-  "6902" -> "6900" 
-  "6908" -> "6913" 
-  "6911" -> "6907" 
-  "6919" -> "6917" 
-  "6837" -> "6836" 
-  "6841" -> "6848" 
-  "6848" -> "6925" 
-  "6854" -> "6853" 
-  "6858" -> "6865" 
-  "6865" -> "6925" 
-  "6887" -> "6885" 
-  "6893" -> "6891" 
-  "6896" -> "6894" 
-  "6904" -> "6902" 
-  "6910" -> "6908" 
-  "6913" -> "6911" 
-  "6842" -> "6841" 
-  "6859" -> "6858" 
-  "6843" -> "6845" 
-  "6845" -> "6842" 
-  "6860" -> "6862" 
-  "6862" -> "6859" 
-  "6826" -> "6832" 
+digraph "GetCharField" {  
+"6963" [label = <(GET_PRIMITIVE_FIELD,GET_PRIMITIVE_FIELD(Char, obj))<SUB>1617</SUB>> ]
+"6997" [label = <(soa,ScopedObjectAccess)<SUB>1617</SUB>> ]
+"7000" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1617</SUB>> ]
+"7007" [label = <(NotifyGetField,NotifyGetField(f, obj))<SUB>1617</SUB>> ]
+"7010" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1617</SUB>> ]
+"7027" [label = <(RETURN,GET_PRIMITIVE_FIELD(Char, obj);,GET_PRIMITIVE_FIELD(Char, obj);)<SUB>1617</SUB>> ]
+"6982" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1617</SUB>> ]
+"7002" [label = <(GET_PRIMITIVE_FIELD(Char, obj),jni::DecodeArtField(fid))<SUB>1617</SUB>> ]
+"7011" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1617</SUB>> ]
+"7018" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1617</SUB>> ]
+"7028" [label = <(GET_PRIMITIVE_FIELD(Char, obj),f-&gt;GetChar(o))<SUB>1617</SUB>> ]
+"6983" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1617</SUB>> ]
+"6987" [label = <(GET_PRIMITIVE_FIELD(Char, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1617</SUB>> ]
+"6994" [label = <(RETURN,GET_PRIMITIVE_FIELD(Char, obj),GET_PRIMITIVE_FIELD(Char, obj))<SUB>1617</SUB>> ]
+"7003" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Char, obj))<SUB>1617</SUB>> ]
+"7012" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1617</SUB>> ]
+"7019" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1617</SUB>> ]
+"7029" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetChar)<SUB>1617</SUB>> ]
+"6967" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1617</SUB>> ]
+"6988" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1617</SUB>> ]
+"7005" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1617</SUB>> ]
+"7014" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Char, obj))<SUB>1617</SUB>> ]
+"7020" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1617</SUB>> ]
+"7023" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Char, obj))<SUB>1617</SUB>> ]
+"7031" [label = <(FIELD_IDENTIFIER,GetChar,GetChar)<SUB>1617</SUB>> ]
+"6968" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1617</SUB>> ]
+"6972" [label = <(GET_PRIMITIVE_FIELD(Char, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1617</SUB>> ]
+"6979" [label = <(RETURN,GET_PRIMITIVE_FIELD(Char, obj),GET_PRIMITIVE_FIELD(Char, obj))<SUB>1617</SUB>> ]
+"6989" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1617</SUB>> ]
+"6991" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1617</SUB>> ]
+"7016" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1617</SUB>> ]
+"7022" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1617</SUB>> ]
+"7025" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1617</SUB>> ]
+"6973" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1617</SUB>> ]
+"6974" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1617</SUB>> ]
+"6976" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1617</SUB>> ]
+"6958" [label = <(METHOD,GetCharField)<SUB>1616</SUB>> ]
+"7033" [label = <(METHOD_RETURN,jchar)<SUB>1616</SUB>> ]
+  "6963" -> "6968" 
+  "6963" -> "6983" 
+  "6997" -> "7005" 
+  "7000" -> "7007" 
+  "7007" -> "7016" 
+  "7010" -> "7031" 
+  "7027" -> "7033" 
+  "6982" -> "6989" 
+  "6982" -> "6997" 
+  "7002" -> "7000" 
+  "7011" -> "7022" 
+  "7018" -> "7010" 
+  "7028" -> "7027" 
+  "6983" -> "6982" 
+  "6987" -> "6994" 
+  "6994" -> "7033" 
+  "7003" -> "7002" 
+  "7012" -> "7011" 
+  "7019" -> "7018" 
+  "7029" -> "7028" 
+  "6967" -> "6974" 
+  "6967" -> "6983" 
+  "6988" -> "6987" 
+  "7005" -> "7003" 
+  "7014" -> "7012" 
+  "7020" -> "7025" 
+  "7023" -> "7019" 
+  "7031" -> "7029" 
+  "6968" -> "6967" 
+  "6972" -> "6979" 
+  "6979" -> "7033" 
+  "6989" -> "6991" 
+  "6991" -> "6988" 
+  "7016" -> "7014" 
+  "7022" -> "7020" 
+  "7025" -> "7023" 
+  "6973" -> "6972" 
+  "6974" -> "6976" 
+  "6976" -> "6973" 
+  "6958" -> "6963" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/137-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/137-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/137-cfg.dot	2023-06-07 19:35:28.307384340 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/137-cfg.dot	2023-06-07 19:35:34.837383769 +0330
@@ -1,75 +1,80 @@
-digraph "SetStaticObjectField" {  
-"6933" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid))<SUB>1646</SUB>> ]
-"6951" [label = <(soa,soa(env))<SUB>1647</SUB>> ]
-"6954" [label = <(&lt;operator&gt;.assignment,* f = jni::DecodeArtField(fid))<SUB>1648</SUB>> ]
-"6961" [label = <(NotifySetObjectField,NotifySetObjectField(f, nullptr, java_value))<SUB>1649</SUB>> ]
-"6965" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; v = soa.Decode&lt;mirror::Object&gt;(java_value))<SUB>1650</SUB>> ]
-"6982" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetObject&lt;false&gt;(f-&gt;GetDeclaringClass(), v))<SUB>1651</SUB>> ]
-"6956" [label = <(jni::DecodeArtField,jni::DecodeArtField(fid))<SUB>1648</SUB>> ]
-"6966" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; v)<SUB>1650</SUB>> ]
-"6973" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(java_value))<SUB>1650</SUB>> ]
-"6983" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetObject&lt;false)<SUB>1651</SUB>> ]
-"6988" [label = <(&lt;operator&gt;.bracketedPrimary,(f-&gt;GetDeclaringClass(), v))<SUB>1651</SUB>> ]
-"6957" [label = <(&lt;operator&gt;.fieldAccess,jni::DecodeArtField)<SUB>1648</SUB>> ]
-"6967" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>1650</SUB>> ]
-"6974" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>1650</SUB>> ]
-"6984" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetObject)<SUB>1651</SUB>> ]
-"6989" [label = <(&lt;operator&gt;.expressionList,f-&gt;GetDeclaringClass(), v)<SUB>1651</SUB>> ]
-"6937" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1646</SUB>> ]
-"6959" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1648</SUB>> ]
-"6969" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1650</SUB>> ]
-"6975" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1650</SUB>> ]
-"6978" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1650</SUB>> ]
-"6986" [label = <(FIELD_IDENTIFIER,SetObject,SetObject)<SUB>1651</SUB>> ]
-"6990" [label = <(GetDeclaringClass,f-&gt;GetDeclaringClass())<SUB>1651</SUB>> ]
-"6938" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1646</SUB>> ]
-"6942" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1646</SUB>> ]
-"6949" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid))<SUB>1646</SUB>> ]
-"6971" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1650</SUB>> ]
-"6977" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1650</SUB>> ]
-"6980" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1650</SUB>> ]
-"6991" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1651</SUB>> ]
-"6943" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1646</SUB>> ]
-"6993" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1651</SUB>> ]
-"6944" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1646</SUB>> ]
-"6946" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1646</SUB>> ]
-"6927" [label = <(METHOD,SetStaticObjectField)<SUB>1645</SUB>> ]
-"6995" [label = <(METHOD_RETURN,void)<SUB>1645</SUB>> ]
-  "6933" -> "6938" 
-  "6933" -> "6951" 
-  "6951" -> "6959" 
-  "6954" -> "6961" 
-  "6961" -> "6971" 
-  "6965" -> "6986" 
-  "6982" -> "6995" 
-  "6956" -> "6954" 
-  "6966" -> "6977" 
-  "6973" -> "6965" 
-  "6983" -> "6993" 
-  "6988" -> "6982" 
-  "6957" -> "6956" 
-  "6967" -> "6966" 
-  "6974" -> "6973" 
-  "6984" -> "6983" 
-  "6989" -> "6988" 
-  "6937" -> "6944" 
-  "6937" -> "6951" 
-  "6959" -> "6957" 
-  "6969" -> "6967" 
-  "6975" -> "6980" 
-  "6978" -> "6974" 
-  "6986" -> "6984" 
-  "6990" -> "6989" 
-  "6938" -> "6937" 
-  "6942" -> "6949" 
-  "6949" -> "6995" 
-  "6971" -> "6969" 
-  "6977" -> "6975" 
-  "6980" -> "6978" 
-  "6991" -> "6990" 
-  "6943" -> "6942" 
-  "6993" -> "6991" 
-  "6944" -> "6946" 
-  "6946" -> "6943" 
-  "6927" -> "6933" 
+digraph "GetShortField" {  
+"7040" [label = <(GET_PRIMITIVE_FIELD,GET_PRIMITIVE_FIELD(Short, obj))<SUB>1621</SUB>> ]
+"7074" [label = <(soa,ScopedObjectAccess)<SUB>1621</SUB>> ]
+"7077" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1621</SUB>> ]
+"7084" [label = <(NotifyGetField,NotifyGetField(f, obj))<SUB>1621</SUB>> ]
+"7087" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1621</SUB>> ]
+"7104" [label = <(RETURN,GET_PRIMITIVE_FIELD(Short, obj);,GET_PRIMITIVE_FIELD(Short, obj);)<SUB>1621</SUB>> ]
+"7059" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1621</SUB>> ]
+"7079" [label = <(GET_PRIMITIVE_FIELD(Short, obj),jni::DecodeArtField(fid))<SUB>1621</SUB>> ]
+"7088" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1621</SUB>> ]
+"7095" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1621</SUB>> ]
+"7105" [label = <(GET_PRIMITIVE_FIELD(Short, obj),f-&gt;GetShort(o))<SUB>1621</SUB>> ]
+"7060" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1621</SUB>> ]
+"7064" [label = <(GET_PRIMITIVE_FIELD(Short, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1621</SUB>> ]
+"7071" [label = <(RETURN,GET_PRIMITIVE_FIELD(Short, obj),GET_PRIMITIVE_FIELD(Short, obj))<SUB>1621</SUB>> ]
+"7080" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Short, obj))<SUB>1621</SUB>> ]
+"7089" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1621</SUB>> ]
+"7096" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1621</SUB>> ]
+"7106" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetShort)<SUB>1621</SUB>> ]
+"7044" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1621</SUB>> ]
+"7065" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1621</SUB>> ]
+"7082" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1621</SUB>> ]
+"7091" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Short, obj))<SUB>1621</SUB>> ]
+"7097" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1621</SUB>> ]
+"7100" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Short, obj))<SUB>1621</SUB>> ]
+"7108" [label = <(FIELD_IDENTIFIER,GetShort,GetShort)<SUB>1621</SUB>> ]
+"7045" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1621</SUB>> ]
+"7049" [label = <(GET_PRIMITIVE_FIELD(Short, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1621</SUB>> ]
+"7056" [label = <(RETURN,GET_PRIMITIVE_FIELD(Short, obj),GET_PRIMITIVE_FIELD(Short, obj))<SUB>1621</SUB>> ]
+"7066" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1621</SUB>> ]
+"7068" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1621</SUB>> ]
+"7093" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1621</SUB>> ]
+"7099" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1621</SUB>> ]
+"7102" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1621</SUB>> ]
+"7050" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1621</SUB>> ]
+"7051" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1621</SUB>> ]
+"7053" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1621</SUB>> ]
+"7035" [label = <(METHOD,GetShortField)<SUB>1620</SUB>> ]
+"7110" [label = <(METHOD_RETURN,jshort)<SUB>1620</SUB>> ]
+  "7040" -> "7045" 
+  "7040" -> "7060" 
+  "7074" -> "7082" 
+  "7077" -> "7084" 
+  "7084" -> "7093" 
+  "7087" -> "7108" 
+  "7104" -> "7110" 
+  "7059" -> "7066" 
+  "7059" -> "7074" 
+  "7079" -> "7077" 
+  "7088" -> "7099" 
+  "7095" -> "7087" 
+  "7105" -> "7104" 
+  "7060" -> "7059" 
+  "7064" -> "7071" 
+  "7071" -> "7110" 
+  "7080" -> "7079" 
+  "7089" -> "7088" 
+  "7096" -> "7095" 
+  "7106" -> "7105" 
+  "7044" -> "7051" 
+  "7044" -> "7060" 
+  "7065" -> "7064" 
+  "7082" -> "7080" 
+  "7091" -> "7089" 
+  "7097" -> "7102" 
+  "7100" -> "7096" 
+  "7108" -> "7106" 
+  "7045" -> "7044" 
+  "7049" -> "7056" 
+  "7056" -> "7110" 
+  "7066" -> "7068" 
+  "7068" -> "7065" 
+  "7093" -> "7091" 
+  "7099" -> "7097" 
+  "7102" -> "7100" 
+  "7050" -> "7049" 
+  "7051" -> "7053" 
+  "7053" -> "7050" 
+  "7035" -> "7040" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/138-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/138-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/138-cfg.dot	2023-06-07 19:35:28.307384340 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/138-cfg.dot	2023-06-07 19:35:34.837383769 +0330
@@ -1,80 +1,80 @@
-digraph "GetBooleanField" {  
-"7002" [label = <(GET_PRIMITIVE_FIELD,GET_PRIMITIVE_FIELD(Boolean, obj))<SUB>1687</SUB>> ]
-"7036" [label = <(soa,ScopedObjectAccess)<SUB>1687</SUB>> ]
-"7039" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1687</SUB>> ]
-"7046" [label = <(NotifyGetField,NotifyGetField(f, obj))<SUB>1687</SUB>> ]
-"7049" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1687</SUB>> ]
-"7066" [label = <(RETURN,GET_PRIMITIVE_FIELD(Boolean, obj);,GET_PRIMITIVE_FIELD(Boolean, obj);)<SUB>1687</SUB>> ]
-"7021" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1687</SUB>> ]
-"7041" [label = <(GET_PRIMITIVE_FIELD(Boolean, obj),jni::DecodeArtField(fid))<SUB>1687</SUB>> ]
-"7050" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1687</SUB>> ]
-"7057" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1687</SUB>> ]
-"7067" [label = <(GET_PRIMITIVE_FIELD(Boolean, obj),f-&gt;GetBoolean(o))<SUB>1687</SUB>> ]
-"7022" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1687</SUB>> ]
-"7026" [label = <(GET_PRIMITIVE_FIELD(Boolean, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1687</SUB>> ]
-"7033" [label = <(RETURN,GET_PRIMITIVE_FIELD(Boolean, obj),GET_PRIMITIVE_FIELD(Boolean, obj))<SUB>1687</SUB>> ]
-"7042" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Boolean, obj))<SUB>1687</SUB>> ]
-"7051" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1687</SUB>> ]
-"7058" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1687</SUB>> ]
-"7068" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetBoolean)<SUB>1687</SUB>> ]
-"7006" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1687</SUB>> ]
-"7027" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1687</SUB>> ]
-"7044" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1687</SUB>> ]
-"7053" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Boolean, obj))<SUB>1687</SUB>> ]
-"7059" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1687</SUB>> ]
-"7062" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Boolean, obj))<SUB>1687</SUB>> ]
-"7070" [label = <(FIELD_IDENTIFIER,GetBoolean,GetBoolean)<SUB>1687</SUB>> ]
-"7007" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1687</SUB>> ]
-"7011" [label = <(GET_PRIMITIVE_FIELD(Boolean, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1687</SUB>> ]
-"7018" [label = <(RETURN,GET_PRIMITIVE_FIELD(Boolean, obj),GET_PRIMITIVE_FIELD(Boolean, obj))<SUB>1687</SUB>> ]
-"7028" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1687</SUB>> ]
-"7030" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1687</SUB>> ]
-"7055" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1687</SUB>> ]
-"7061" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1687</SUB>> ]
-"7064" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1687</SUB>> ]
-"7012" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1687</SUB>> ]
-"7013" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1687</SUB>> ]
-"7015" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1687</SUB>> ]
-"6997" [label = <(METHOD,GetBooleanField)<SUB>1686</SUB>> ]
-"7072" [label = <(METHOD_RETURN,jboolean)<SUB>1686</SUB>> ]
-  "7002" -> "7007" 
-  "7002" -> "7022" 
-  "7036" -> "7044" 
-  "7039" -> "7046" 
-  "7046" -> "7055" 
-  "7049" -> "7070" 
-  "7066" -> "7072" 
-  "7021" -> "7028" 
-  "7021" -> "7036" 
-  "7041" -> "7039" 
-  "7050" -> "7061" 
-  "7057" -> "7049" 
-  "7067" -> "7066" 
-  "7022" -> "7021" 
-  "7026" -> "7033" 
-  "7033" -> "7072" 
-  "7042" -> "7041" 
-  "7051" -> "7050" 
-  "7058" -> "7057" 
-  "7068" -> "7067" 
-  "7006" -> "7013" 
-  "7006" -> "7022" 
-  "7027" -> "7026" 
-  "7044" -> "7042" 
-  "7053" -> "7051" 
-  "7059" -> "7064" 
-  "7062" -> "7058" 
-  "7070" -> "7068" 
-  "7007" -> "7006" 
-  "7011" -> "7018" 
-  "7018" -> "7072" 
-  "7028" -> "7030" 
-  "7030" -> "7027" 
-  "7055" -> "7053" 
-  "7061" -> "7059" 
-  "7064" -> "7062" 
-  "7012" -> "7011" 
-  "7013" -> "7015" 
-  "7015" -> "7012" 
-  "6997" -> "7002" 
+digraph "GetIntField" {  
+"7117" [label = <(GET_PRIMITIVE_FIELD,GET_PRIMITIVE_FIELD(Int, obj))<SUB>1625</SUB>> ]
+"7151" [label = <(soa,ScopedObjectAccess)<SUB>1625</SUB>> ]
+"7154" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1625</SUB>> ]
+"7161" [label = <(NotifyGetField,NotifyGetField(f, obj))<SUB>1625</SUB>> ]
+"7164" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1625</SUB>> ]
+"7181" [label = <(RETURN,GET_PRIMITIVE_FIELD(Int, obj);,GET_PRIMITIVE_FIELD(Int, obj);)<SUB>1625</SUB>> ]
+"7136" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1625</SUB>> ]
+"7156" [label = <(GET_PRIMITIVE_FIELD(Int, obj),jni::DecodeArtField(fid))<SUB>1625</SUB>> ]
+"7165" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1625</SUB>> ]
+"7172" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1625</SUB>> ]
+"7182" [label = <(GET_PRIMITIVE_FIELD(Int, obj),f-&gt;GetInt(o))<SUB>1625</SUB>> ]
+"7137" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1625</SUB>> ]
+"7141" [label = <(GET_PRIMITIVE_FIELD(Int, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1625</SUB>> ]
+"7148" [label = <(RETURN,GET_PRIMITIVE_FIELD(Int, obj),GET_PRIMITIVE_FIELD(Int, obj))<SUB>1625</SUB>> ]
+"7157" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Int, obj))<SUB>1625</SUB>> ]
+"7166" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1625</SUB>> ]
+"7173" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1625</SUB>> ]
+"7183" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetInt)<SUB>1625</SUB>> ]
+"7121" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1625</SUB>> ]
+"7142" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1625</SUB>> ]
+"7159" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1625</SUB>> ]
+"7168" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Int, obj))<SUB>1625</SUB>> ]
+"7174" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1625</SUB>> ]
+"7177" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Int, obj))<SUB>1625</SUB>> ]
+"7185" [label = <(FIELD_IDENTIFIER,GetInt,GetInt)<SUB>1625</SUB>> ]
+"7122" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1625</SUB>> ]
+"7126" [label = <(GET_PRIMITIVE_FIELD(Int, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1625</SUB>> ]
+"7133" [label = <(RETURN,GET_PRIMITIVE_FIELD(Int, obj),GET_PRIMITIVE_FIELD(Int, obj))<SUB>1625</SUB>> ]
+"7143" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1625</SUB>> ]
+"7145" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1625</SUB>> ]
+"7170" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1625</SUB>> ]
+"7176" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1625</SUB>> ]
+"7179" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1625</SUB>> ]
+"7127" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1625</SUB>> ]
+"7128" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1625</SUB>> ]
+"7130" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1625</SUB>> ]
+"7112" [label = <(METHOD,GetIntField)<SUB>1624</SUB>> ]
+"7187" [label = <(METHOD_RETURN,jint)<SUB>1624</SUB>> ]
+  "7117" -> "7122" 
+  "7117" -> "7137" 
+  "7151" -> "7159" 
+  "7154" -> "7161" 
+  "7161" -> "7170" 
+  "7164" -> "7185" 
+  "7181" -> "7187" 
+  "7136" -> "7143" 
+  "7136" -> "7151" 
+  "7156" -> "7154" 
+  "7165" -> "7176" 
+  "7172" -> "7164" 
+  "7182" -> "7181" 
+  "7137" -> "7136" 
+  "7141" -> "7148" 
+  "7148" -> "7187" 
+  "7157" -> "7156" 
+  "7166" -> "7165" 
+  "7173" -> "7172" 
+  "7183" -> "7182" 
+  "7121" -> "7128" 
+  "7121" -> "7137" 
+  "7142" -> "7141" 
+  "7159" -> "7157" 
+  "7168" -> "7166" 
+  "7174" -> "7179" 
+  "7177" -> "7173" 
+  "7185" -> "7183" 
+  "7122" -> "7121" 
+  "7126" -> "7133" 
+  "7133" -> "7187" 
+  "7143" -> "7145" 
+  "7145" -> "7142" 
+  "7170" -> "7168" 
+  "7176" -> "7174" 
+  "7179" -> "7177" 
+  "7127" -> "7126" 
+  "7128" -> "7130" 
+  "7130" -> "7127" 
+  "7112" -> "7117" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/139-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/139-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/139-cfg.dot	2023-06-07 19:35:28.307384340 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/139-cfg.dot	2023-06-07 19:35:34.837383769 +0330
@@ -1,80 +1,80 @@
-digraph "GetByteField" {  
-"7079" [label = <(GET_PRIMITIVE_FIELD,GET_PRIMITIVE_FIELD(Byte, obj))<SUB>1691</SUB>> ]
-"7113" [label = <(soa,ScopedObjectAccess)<SUB>1691</SUB>> ]
-"7116" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1691</SUB>> ]
-"7123" [label = <(NotifyGetField,NotifyGetField(f, obj))<SUB>1691</SUB>> ]
-"7126" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1691</SUB>> ]
-"7143" [label = <(RETURN,GET_PRIMITIVE_FIELD(Byte, obj);,GET_PRIMITIVE_FIELD(Byte, obj);)<SUB>1691</SUB>> ]
-"7098" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1691</SUB>> ]
-"7118" [label = <(GET_PRIMITIVE_FIELD(Byte, obj),jni::DecodeArtField(fid))<SUB>1691</SUB>> ]
-"7127" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1691</SUB>> ]
-"7134" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1691</SUB>> ]
-"7144" [label = <(GET_PRIMITIVE_FIELD(Byte, obj),f-&gt;GetByte(o))<SUB>1691</SUB>> ]
-"7099" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1691</SUB>> ]
-"7103" [label = <(GET_PRIMITIVE_FIELD(Byte, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1691</SUB>> ]
-"7110" [label = <(RETURN,GET_PRIMITIVE_FIELD(Byte, obj),GET_PRIMITIVE_FIELD(Byte, obj))<SUB>1691</SUB>> ]
-"7119" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Byte, obj))<SUB>1691</SUB>> ]
-"7128" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1691</SUB>> ]
-"7135" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1691</SUB>> ]
-"7145" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetByte)<SUB>1691</SUB>> ]
-"7083" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1691</SUB>> ]
-"7104" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1691</SUB>> ]
-"7121" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1691</SUB>> ]
-"7130" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Byte, obj))<SUB>1691</SUB>> ]
-"7136" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1691</SUB>> ]
-"7139" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Byte, obj))<SUB>1691</SUB>> ]
-"7147" [label = <(FIELD_IDENTIFIER,GetByte,GetByte)<SUB>1691</SUB>> ]
-"7084" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1691</SUB>> ]
-"7088" [label = <(GET_PRIMITIVE_FIELD(Byte, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1691</SUB>> ]
-"7095" [label = <(RETURN,GET_PRIMITIVE_FIELD(Byte, obj),GET_PRIMITIVE_FIELD(Byte, obj))<SUB>1691</SUB>> ]
-"7105" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1691</SUB>> ]
-"7107" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1691</SUB>> ]
-"7132" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1691</SUB>> ]
-"7138" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1691</SUB>> ]
-"7141" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1691</SUB>> ]
-"7089" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1691</SUB>> ]
-"7090" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1691</SUB>> ]
-"7092" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1691</SUB>> ]
-"7074" [label = <(METHOD,GetByteField)<SUB>1690</SUB>> ]
-"7149" [label = <(METHOD_RETURN,jbyte)<SUB>1690</SUB>> ]
-  "7079" -> "7084" 
-  "7079" -> "7099" 
-  "7113" -> "7121" 
-  "7116" -> "7123" 
-  "7123" -> "7132" 
-  "7126" -> "7147" 
-  "7143" -> "7149" 
-  "7098" -> "7105" 
-  "7098" -> "7113" 
-  "7118" -> "7116" 
-  "7127" -> "7138" 
-  "7134" -> "7126" 
-  "7144" -> "7143" 
-  "7099" -> "7098" 
-  "7103" -> "7110" 
-  "7110" -> "7149" 
-  "7119" -> "7118" 
-  "7128" -> "7127" 
-  "7135" -> "7134" 
-  "7145" -> "7144" 
-  "7083" -> "7090" 
-  "7083" -> "7099" 
-  "7104" -> "7103" 
-  "7121" -> "7119" 
-  "7130" -> "7128" 
-  "7136" -> "7141" 
-  "7139" -> "7135" 
-  "7147" -> "7145" 
-  "7084" -> "7083" 
-  "7088" -> "7095" 
-  "7095" -> "7149" 
-  "7105" -> "7107" 
-  "7107" -> "7104" 
-  "7132" -> "7130" 
-  "7138" -> "7136" 
-  "7141" -> "7139" 
-  "7089" -> "7088" 
-  "7090" -> "7092" 
-  "7092" -> "7089" 
-  "7074" -> "7079" 
+digraph "GetLongField" {  
+"7194" [label = <(GET_PRIMITIVE_FIELD,GET_PRIMITIVE_FIELD(Long, obj))<SUB>1629</SUB>> ]
+"7228" [label = <(soa,ScopedObjectAccess)<SUB>1629</SUB>> ]
+"7231" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1629</SUB>> ]
+"7238" [label = <(NotifyGetField,NotifyGetField(f, obj))<SUB>1629</SUB>> ]
+"7241" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1629</SUB>> ]
+"7258" [label = <(RETURN,GET_PRIMITIVE_FIELD(Long, obj);,GET_PRIMITIVE_FIELD(Long, obj);)<SUB>1629</SUB>> ]
+"7213" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1629</SUB>> ]
+"7233" [label = <(GET_PRIMITIVE_FIELD(Long, obj),jni::DecodeArtField(fid))<SUB>1629</SUB>> ]
+"7242" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1629</SUB>> ]
+"7249" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1629</SUB>> ]
+"7259" [label = <(GET_PRIMITIVE_FIELD(Long, obj),f-&gt;GetLong(o))<SUB>1629</SUB>> ]
+"7214" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1629</SUB>> ]
+"7218" [label = <(GET_PRIMITIVE_FIELD(Long, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1629</SUB>> ]
+"7225" [label = <(RETURN,GET_PRIMITIVE_FIELD(Long, obj),GET_PRIMITIVE_FIELD(Long, obj))<SUB>1629</SUB>> ]
+"7234" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Long, obj))<SUB>1629</SUB>> ]
+"7243" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1629</SUB>> ]
+"7250" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1629</SUB>> ]
+"7260" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetLong)<SUB>1629</SUB>> ]
+"7198" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1629</SUB>> ]
+"7219" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1629</SUB>> ]
+"7236" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1629</SUB>> ]
+"7245" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Long, obj))<SUB>1629</SUB>> ]
+"7251" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1629</SUB>> ]
+"7254" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Long, obj))<SUB>1629</SUB>> ]
+"7262" [label = <(FIELD_IDENTIFIER,GetLong,GetLong)<SUB>1629</SUB>> ]
+"7199" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1629</SUB>> ]
+"7203" [label = <(GET_PRIMITIVE_FIELD(Long, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1629</SUB>> ]
+"7210" [label = <(RETURN,GET_PRIMITIVE_FIELD(Long, obj),GET_PRIMITIVE_FIELD(Long, obj))<SUB>1629</SUB>> ]
+"7220" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1629</SUB>> ]
+"7222" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1629</SUB>> ]
+"7247" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1629</SUB>> ]
+"7253" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1629</SUB>> ]
+"7256" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1629</SUB>> ]
+"7204" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1629</SUB>> ]
+"7205" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1629</SUB>> ]
+"7207" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1629</SUB>> ]
+"7189" [label = <(METHOD,GetLongField)<SUB>1628</SUB>> ]
+"7264" [label = <(METHOD_RETURN,jlong)<SUB>1628</SUB>> ]
+  "7194" -> "7199" 
+  "7194" -> "7214" 
+  "7228" -> "7236" 
+  "7231" -> "7238" 
+  "7238" -> "7247" 
+  "7241" -> "7262" 
+  "7258" -> "7264" 
+  "7213" -> "7220" 
+  "7213" -> "7228" 
+  "7233" -> "7231" 
+  "7242" -> "7253" 
+  "7249" -> "7241" 
+  "7259" -> "7258" 
+  "7214" -> "7213" 
+  "7218" -> "7225" 
+  "7225" -> "7264" 
+  "7234" -> "7233" 
+  "7243" -> "7242" 
+  "7250" -> "7249" 
+  "7260" -> "7259" 
+  "7198" -> "7205" 
+  "7198" -> "7214" 
+  "7219" -> "7218" 
+  "7236" -> "7234" 
+  "7245" -> "7243" 
+  "7251" -> "7256" 
+  "7254" -> "7250" 
+  "7262" -> "7260" 
+  "7199" -> "7198" 
+  "7203" -> "7210" 
+  "7210" -> "7264" 
+  "7220" -> "7222" 
+  "7222" -> "7219" 
+  "7247" -> "7245" 
+  "7253" -> "7251" 
+  "7256" -> "7254" 
+  "7204" -> "7203" 
+  "7205" -> "7207" 
+  "7207" -> "7204" 
+  "7189" -> "7194" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/14-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/14-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/14-cfg.dot	2023-06-07 19:35:28.217384348 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/14-cfg.dot	2023-06-07 19:35:34.747383777 +0330
@@ -1,15 +1,30 @@
-digraph "HasCache" {  
-"351" [label = <(RETURN,return memory_type_table_.Size() != 0;,return memory_type_table_.Size() != 0;)<SUB>218</SUB>> ]
-"352" [label = <(&lt;operator&gt;.notEquals,memory_type_table_.Size() != 0)<SUB>218</SUB>> ]
-"353" [label = <(Size,memory_type_table_.Size())<SUB>218</SUB>> ]
-"354" [label = <(&lt;operator&gt;.fieldAccess,memory_type_table_.Size)<SUB>218</SUB>> ]
-"356" [label = <(FIELD_IDENTIFIER,Size,Size)<SUB>218</SUB>> ]
-"349" [label = <(METHOD,HasCache)<SUB>217</SUB>> ]
-"358" [label = <(METHOD_RETURN,bool)<SUB>217</SUB>> ]
-  "351" -> "358" 
-  "352" -> "351" 
-  "353" -> "352" 
-  "354" -> "353" 
-  "356" -> "354" 
-  "349" -> "356" 
+digraph "Find" {  
+"219" [label = <(&lt;operator&gt;.assignment,* range = memory_type_table_.Lookup(address))<SUB>168</SUB>> ]
+"233" [label = <(&lt;operator&gt;.assignment,*kind = range-&gt;Type())<SUB>172</SUB>> ]
+"240" [label = <(RETURN,return true;,return true;)<SUB>173</SUB>> ]
+"221" [label = <(Lookup,memory_type_table_.Lookup(address))<SUB>168</SUB>> ]
+"227" [label = <(&lt;operator&gt;.equals,range == nullptr)<SUB>169</SUB>> ]
+"234" [label = <(&lt;operator&gt;.indirection,*kind)<SUB>172</SUB>> ]
+"236" [label = <(Type,range-&gt;Type())<SUB>172</SUB>> ]
+"222" [label = <(&lt;operator&gt;.fieldAccess,memory_type_table_.Lookup)<SUB>168</SUB>> ]
+"231" [label = <(RETURN,return false;,return false;)<SUB>170</SUB>> ]
+"237" [label = <(&lt;operator&gt;.indirectFieldAccess,range-&gt;Type)<SUB>172</SUB>> ]
+"224" [label = <(FIELD_IDENTIFIER,Lookup,Lookup)<SUB>168</SUB>> ]
+"239" [label = <(FIELD_IDENTIFIER,Type,Type)<SUB>172</SUB>> ]
+"214" [label = <(METHOD,Find)<SUB>167</SUB>> ]
+"242" [label = <(METHOD_RETURN,bool)<SUB>167</SUB>> ]
+  "219" -> "227" 
+  "233" -> "240" 
+  "240" -> "242" 
+  "221" -> "219" 
+  "227" -> "231" 
+  "227" -> "234" 
+  "234" -> "239" 
+  "236" -> "233" 
+  "222" -> "221" 
+  "231" -> "242" 
+  "237" -> "236" 
+  "224" -> "222" 
+  "239" -> "237" 
+  "214" -> "224" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/140-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/140-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/140-cfg.dot	2023-06-07 19:35:28.307384340 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/140-cfg.dot	2023-06-07 19:35:34.837383769 +0330
@@ -1,80 +1,80 @@
-digraph "GetCharField" {  
-"7156" [label = <(GET_PRIMITIVE_FIELD,GET_PRIMITIVE_FIELD(Char, obj))<SUB>1695</SUB>> ]
-"7190" [label = <(soa,ScopedObjectAccess)<SUB>1695</SUB>> ]
-"7193" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1695</SUB>> ]
-"7200" [label = <(NotifyGetField,NotifyGetField(f, obj))<SUB>1695</SUB>> ]
-"7203" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1695</SUB>> ]
-"7220" [label = <(RETURN,GET_PRIMITIVE_FIELD(Char, obj);,GET_PRIMITIVE_FIELD(Char, obj);)<SUB>1695</SUB>> ]
-"7175" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1695</SUB>> ]
-"7195" [label = <(GET_PRIMITIVE_FIELD(Char, obj),jni::DecodeArtField(fid))<SUB>1695</SUB>> ]
-"7204" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1695</SUB>> ]
-"7211" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1695</SUB>> ]
-"7221" [label = <(GET_PRIMITIVE_FIELD(Char, obj),f-&gt;GetChar(o))<SUB>1695</SUB>> ]
-"7176" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1695</SUB>> ]
-"7180" [label = <(GET_PRIMITIVE_FIELD(Char, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1695</SUB>> ]
-"7187" [label = <(RETURN,GET_PRIMITIVE_FIELD(Char, obj),GET_PRIMITIVE_FIELD(Char, obj))<SUB>1695</SUB>> ]
-"7196" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Char, obj))<SUB>1695</SUB>> ]
-"7205" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1695</SUB>> ]
-"7212" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1695</SUB>> ]
-"7222" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetChar)<SUB>1695</SUB>> ]
-"7160" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1695</SUB>> ]
-"7181" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1695</SUB>> ]
-"7198" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1695</SUB>> ]
-"7207" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Char, obj))<SUB>1695</SUB>> ]
-"7213" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1695</SUB>> ]
-"7216" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Char, obj))<SUB>1695</SUB>> ]
-"7224" [label = <(FIELD_IDENTIFIER,GetChar,GetChar)<SUB>1695</SUB>> ]
-"7161" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1695</SUB>> ]
-"7165" [label = <(GET_PRIMITIVE_FIELD(Char, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1695</SUB>> ]
-"7172" [label = <(RETURN,GET_PRIMITIVE_FIELD(Char, obj),GET_PRIMITIVE_FIELD(Char, obj))<SUB>1695</SUB>> ]
-"7182" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1695</SUB>> ]
-"7184" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1695</SUB>> ]
-"7209" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1695</SUB>> ]
-"7215" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1695</SUB>> ]
-"7218" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1695</SUB>> ]
-"7166" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1695</SUB>> ]
-"7167" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1695</SUB>> ]
-"7169" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1695</SUB>> ]
-"7151" [label = <(METHOD,GetCharField)<SUB>1694</SUB>> ]
-"7226" [label = <(METHOD_RETURN,jchar)<SUB>1694</SUB>> ]
-  "7156" -> "7161" 
-  "7156" -> "7176" 
-  "7190" -> "7198" 
-  "7193" -> "7200" 
-  "7200" -> "7209" 
-  "7203" -> "7224" 
-  "7220" -> "7226" 
-  "7175" -> "7182" 
-  "7175" -> "7190" 
-  "7195" -> "7193" 
-  "7204" -> "7215" 
-  "7211" -> "7203" 
-  "7221" -> "7220" 
-  "7176" -> "7175" 
-  "7180" -> "7187" 
-  "7187" -> "7226" 
-  "7196" -> "7195" 
-  "7205" -> "7204" 
-  "7212" -> "7211" 
-  "7222" -> "7221" 
-  "7160" -> "7167" 
-  "7160" -> "7176" 
-  "7181" -> "7180" 
-  "7198" -> "7196" 
-  "7207" -> "7205" 
-  "7213" -> "7218" 
-  "7216" -> "7212" 
-  "7224" -> "7222" 
-  "7161" -> "7160" 
-  "7165" -> "7172" 
-  "7172" -> "7226" 
-  "7182" -> "7184" 
-  "7184" -> "7181" 
-  "7209" -> "7207" 
-  "7215" -> "7213" 
-  "7218" -> "7216" 
-  "7166" -> "7165" 
-  "7167" -> "7169" 
-  "7169" -> "7166" 
-  "7151" -> "7156" 
+digraph "GetFloatField" {  
+"7271" [label = <(GET_PRIMITIVE_FIELD,GET_PRIMITIVE_FIELD(Float, obj))<SUB>1633</SUB>> ]
+"7305" [label = <(soa,ScopedObjectAccess)<SUB>1633</SUB>> ]
+"7308" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1633</SUB>> ]
+"7315" [label = <(NotifyGetField,NotifyGetField(f, obj))<SUB>1633</SUB>> ]
+"7318" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1633</SUB>> ]
+"7335" [label = <(RETURN,GET_PRIMITIVE_FIELD(Float, obj);,GET_PRIMITIVE_FIELD(Float, obj);)<SUB>1633</SUB>> ]
+"7290" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1633</SUB>> ]
+"7310" [label = <(GET_PRIMITIVE_FIELD(Float, obj),jni::DecodeArtField(fid))<SUB>1633</SUB>> ]
+"7319" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1633</SUB>> ]
+"7326" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1633</SUB>> ]
+"7336" [label = <(GET_PRIMITIVE_FIELD(Float, obj),f-&gt;GetFloat(o))<SUB>1633</SUB>> ]
+"7291" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1633</SUB>> ]
+"7295" [label = <(GET_PRIMITIVE_FIELD(Float, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1633</SUB>> ]
+"7302" [label = <(RETURN,GET_PRIMITIVE_FIELD(Float, obj),GET_PRIMITIVE_FIELD(Float, obj))<SUB>1633</SUB>> ]
+"7311" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Float, obj))<SUB>1633</SUB>> ]
+"7320" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1633</SUB>> ]
+"7327" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1633</SUB>> ]
+"7337" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetFloat)<SUB>1633</SUB>> ]
+"7275" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1633</SUB>> ]
+"7296" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1633</SUB>> ]
+"7313" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1633</SUB>> ]
+"7322" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Float, obj))<SUB>1633</SUB>> ]
+"7328" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1633</SUB>> ]
+"7331" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Float, obj))<SUB>1633</SUB>> ]
+"7339" [label = <(FIELD_IDENTIFIER,GetFloat,GetFloat)<SUB>1633</SUB>> ]
+"7276" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1633</SUB>> ]
+"7280" [label = <(GET_PRIMITIVE_FIELD(Float, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1633</SUB>> ]
+"7287" [label = <(RETURN,GET_PRIMITIVE_FIELD(Float, obj),GET_PRIMITIVE_FIELD(Float, obj))<SUB>1633</SUB>> ]
+"7297" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1633</SUB>> ]
+"7299" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1633</SUB>> ]
+"7324" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1633</SUB>> ]
+"7330" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1633</SUB>> ]
+"7333" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1633</SUB>> ]
+"7281" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1633</SUB>> ]
+"7282" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1633</SUB>> ]
+"7284" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1633</SUB>> ]
+"7266" [label = <(METHOD,GetFloatField)<SUB>1632</SUB>> ]
+"7341" [label = <(METHOD_RETURN,jfloat)<SUB>1632</SUB>> ]
+  "7271" -> "7276" 
+  "7271" -> "7291" 
+  "7305" -> "7313" 
+  "7308" -> "7315" 
+  "7315" -> "7324" 
+  "7318" -> "7339" 
+  "7335" -> "7341" 
+  "7290" -> "7297" 
+  "7290" -> "7305" 
+  "7310" -> "7308" 
+  "7319" -> "7330" 
+  "7326" -> "7318" 
+  "7336" -> "7335" 
+  "7291" -> "7290" 
+  "7295" -> "7302" 
+  "7302" -> "7341" 
+  "7311" -> "7310" 
+  "7320" -> "7319" 
+  "7327" -> "7326" 
+  "7337" -> "7336" 
+  "7275" -> "7282" 
+  "7275" -> "7291" 
+  "7296" -> "7295" 
+  "7313" -> "7311" 
+  "7322" -> "7320" 
+  "7328" -> "7333" 
+  "7331" -> "7327" 
+  "7339" -> "7337" 
+  "7276" -> "7275" 
+  "7280" -> "7287" 
+  "7287" -> "7341" 
+  "7297" -> "7299" 
+  "7299" -> "7296" 
+  "7324" -> "7322" 
+  "7330" -> "7328" 
+  "7333" -> "7331" 
+  "7281" -> "7280" 
+  "7282" -> "7284" 
+  "7284" -> "7281" 
+  "7266" -> "7271" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/141-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/141-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/141-cfg.dot	2023-06-07 19:35:28.307384340 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/141-cfg.dot	2023-06-07 19:35:34.837383769 +0330
@@ -1,80 +1,80 @@
-digraph "GetShortField" {  
-"7233" [label = <(GET_PRIMITIVE_FIELD,GET_PRIMITIVE_FIELD(Short, obj))<SUB>1699</SUB>> ]
-"7267" [label = <(soa,ScopedObjectAccess)<SUB>1699</SUB>> ]
-"7270" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1699</SUB>> ]
-"7277" [label = <(NotifyGetField,NotifyGetField(f, obj))<SUB>1699</SUB>> ]
-"7280" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1699</SUB>> ]
-"7297" [label = <(RETURN,GET_PRIMITIVE_FIELD(Short, obj);,GET_PRIMITIVE_FIELD(Short, obj);)<SUB>1699</SUB>> ]
-"7252" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1699</SUB>> ]
-"7272" [label = <(GET_PRIMITIVE_FIELD(Short, obj),jni::DecodeArtField(fid))<SUB>1699</SUB>> ]
-"7281" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1699</SUB>> ]
-"7288" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1699</SUB>> ]
-"7298" [label = <(GET_PRIMITIVE_FIELD(Short, obj),f-&gt;GetShort(o))<SUB>1699</SUB>> ]
-"7253" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1699</SUB>> ]
-"7257" [label = <(GET_PRIMITIVE_FIELD(Short, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1699</SUB>> ]
-"7264" [label = <(RETURN,GET_PRIMITIVE_FIELD(Short, obj),GET_PRIMITIVE_FIELD(Short, obj))<SUB>1699</SUB>> ]
-"7273" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Short, obj))<SUB>1699</SUB>> ]
-"7282" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1699</SUB>> ]
-"7289" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1699</SUB>> ]
-"7299" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetShort)<SUB>1699</SUB>> ]
-"7237" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1699</SUB>> ]
-"7258" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1699</SUB>> ]
-"7275" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1699</SUB>> ]
-"7284" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Short, obj))<SUB>1699</SUB>> ]
-"7290" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1699</SUB>> ]
-"7293" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Short, obj))<SUB>1699</SUB>> ]
-"7301" [label = <(FIELD_IDENTIFIER,GetShort,GetShort)<SUB>1699</SUB>> ]
-"7238" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1699</SUB>> ]
-"7242" [label = <(GET_PRIMITIVE_FIELD(Short, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1699</SUB>> ]
-"7249" [label = <(RETURN,GET_PRIMITIVE_FIELD(Short, obj),GET_PRIMITIVE_FIELD(Short, obj))<SUB>1699</SUB>> ]
-"7259" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1699</SUB>> ]
-"7261" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1699</SUB>> ]
-"7286" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1699</SUB>> ]
-"7292" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1699</SUB>> ]
-"7295" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1699</SUB>> ]
-"7243" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1699</SUB>> ]
-"7244" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1699</SUB>> ]
-"7246" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1699</SUB>> ]
-"7228" [label = <(METHOD,GetShortField)<SUB>1698</SUB>> ]
-"7303" [label = <(METHOD_RETURN,jshort)<SUB>1698</SUB>> ]
-  "7233" -> "7238" 
-  "7233" -> "7253" 
-  "7267" -> "7275" 
-  "7270" -> "7277" 
-  "7277" -> "7286" 
-  "7280" -> "7301" 
-  "7297" -> "7303" 
-  "7252" -> "7259" 
-  "7252" -> "7267" 
-  "7272" -> "7270" 
-  "7281" -> "7292" 
-  "7288" -> "7280" 
-  "7298" -> "7297" 
-  "7253" -> "7252" 
-  "7257" -> "7264" 
-  "7264" -> "7303" 
-  "7273" -> "7272" 
-  "7282" -> "7281" 
-  "7289" -> "7288" 
-  "7299" -> "7298" 
-  "7237" -> "7244" 
-  "7237" -> "7253" 
-  "7258" -> "7257" 
-  "7275" -> "7273" 
-  "7284" -> "7282" 
-  "7290" -> "7295" 
-  "7293" -> "7289" 
-  "7301" -> "7299" 
-  "7238" -> "7237" 
-  "7242" -> "7249" 
-  "7249" -> "7303" 
-  "7259" -> "7261" 
-  "7261" -> "7258" 
-  "7286" -> "7284" 
-  "7292" -> "7290" 
-  "7295" -> "7293" 
-  "7243" -> "7242" 
-  "7244" -> "7246" 
-  "7246" -> "7243" 
-  "7228" -> "7233" 
+digraph "GetDoubleField" {  
+"7348" [label = <(GET_PRIMITIVE_FIELD,GET_PRIMITIVE_FIELD(Double, obj))<SUB>1637</SUB>> ]
+"7382" [label = <(soa,ScopedObjectAccess)<SUB>1637</SUB>> ]
+"7385" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1637</SUB>> ]
+"7392" [label = <(NotifyGetField,NotifyGetField(f, obj))<SUB>1637</SUB>> ]
+"7395" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1637</SUB>> ]
+"7412" [label = <(RETURN,GET_PRIMITIVE_FIELD(Double, obj);,GET_PRIMITIVE_FIELD(Double, obj);)<SUB>1637</SUB>> ]
+"7367" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1637</SUB>> ]
+"7387" [label = <(GET_PRIMITIVE_FIELD(Double, obj),jni::DecodeArtField(fid))<SUB>1637</SUB>> ]
+"7396" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1637</SUB>> ]
+"7403" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1637</SUB>> ]
+"7413" [label = <(GET_PRIMITIVE_FIELD(Double, obj),f-&gt;GetDouble(o))<SUB>1637</SUB>> ]
+"7368" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1637</SUB>> ]
+"7372" [label = <(GET_PRIMITIVE_FIELD(Double, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1637</SUB>> ]
+"7379" [label = <(RETURN,GET_PRIMITIVE_FIELD(Double, obj),GET_PRIMITIVE_FIELD(Double, obj))<SUB>1637</SUB>> ]
+"7388" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Double, obj))<SUB>1637</SUB>> ]
+"7397" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1637</SUB>> ]
+"7404" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1637</SUB>> ]
+"7414" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDouble)<SUB>1637</SUB>> ]
+"7352" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1637</SUB>> ]
+"7373" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1637</SUB>> ]
+"7390" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1637</SUB>> ]
+"7399" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Double, obj))<SUB>1637</SUB>> ]
+"7405" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1637</SUB>> ]
+"7408" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Double, obj))<SUB>1637</SUB>> ]
+"7416" [label = <(FIELD_IDENTIFIER,GetDouble,GetDouble)<SUB>1637</SUB>> ]
+"7353" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1637</SUB>> ]
+"7357" [label = <(GET_PRIMITIVE_FIELD(Double, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1637</SUB>> ]
+"7364" [label = <(RETURN,GET_PRIMITIVE_FIELD(Double, obj),GET_PRIMITIVE_FIELD(Double, obj))<SUB>1637</SUB>> ]
+"7374" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1637</SUB>> ]
+"7376" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1637</SUB>> ]
+"7401" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1637</SUB>> ]
+"7407" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1637</SUB>> ]
+"7410" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1637</SUB>> ]
+"7358" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1637</SUB>> ]
+"7359" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1637</SUB>> ]
+"7361" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1637</SUB>> ]
+"7343" [label = <(METHOD,GetDoubleField)<SUB>1636</SUB>> ]
+"7418" [label = <(METHOD_RETURN,jdouble)<SUB>1636</SUB>> ]
+  "7348" -> "7353" 
+  "7348" -> "7368" 
+  "7382" -> "7390" 
+  "7385" -> "7392" 
+  "7392" -> "7401" 
+  "7395" -> "7416" 
+  "7412" -> "7418" 
+  "7367" -> "7374" 
+  "7367" -> "7382" 
+  "7387" -> "7385" 
+  "7396" -> "7407" 
+  "7403" -> "7395" 
+  "7413" -> "7412" 
+  "7368" -> "7367" 
+  "7372" -> "7379" 
+  "7379" -> "7418" 
+  "7388" -> "7387" 
+  "7397" -> "7396" 
+  "7404" -> "7403" 
+  "7414" -> "7413" 
+  "7352" -> "7359" 
+  "7352" -> "7368" 
+  "7373" -> "7372" 
+  "7390" -> "7388" 
+  "7399" -> "7397" 
+  "7405" -> "7410" 
+  "7408" -> "7404" 
+  "7416" -> "7414" 
+  "7353" -> "7352" 
+  "7357" -> "7364" 
+  "7364" -> "7418" 
+  "7374" -> "7376" 
+  "7376" -> "7373" 
+  "7401" -> "7399" 
+  "7407" -> "7405" 
+  "7410" -> "7408" 
+  "7358" -> "7357" 
+  "7359" -> "7361" 
+  "7361" -> "7358" 
+  "7343" -> "7348" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/142-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/142-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/142-cfg.dot	2023-06-07 19:35:28.317384341 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/142-cfg.dot	2023-06-07 19:35:34.837383769 +0330
@@ -1,80 +1,49 @@
-digraph "GetIntField" {  
-"7310" [label = <(GET_PRIMITIVE_FIELD,GET_PRIMITIVE_FIELD(Int, obj))<SUB>1703</SUB>> ]
-"7344" [label = <(soa,ScopedObjectAccess)<SUB>1703</SUB>> ]
-"7347" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1703</SUB>> ]
-"7354" [label = <(NotifyGetField,NotifyGetField(f, obj))<SUB>1703</SUB>> ]
-"7357" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1703</SUB>> ]
-"7374" [label = <(RETURN,GET_PRIMITIVE_FIELD(Int, obj);,GET_PRIMITIVE_FIELD(Int, obj);)<SUB>1703</SUB>> ]
-"7329" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1703</SUB>> ]
-"7349" [label = <(GET_PRIMITIVE_FIELD(Int, obj),jni::DecodeArtField(fid))<SUB>1703</SUB>> ]
-"7358" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1703</SUB>> ]
-"7365" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1703</SUB>> ]
-"7375" [label = <(GET_PRIMITIVE_FIELD(Int, obj),f-&gt;GetInt(o))<SUB>1703</SUB>> ]
-"7330" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1703</SUB>> ]
-"7334" [label = <(GET_PRIMITIVE_FIELD(Int, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1703</SUB>> ]
-"7341" [label = <(RETURN,GET_PRIMITIVE_FIELD(Int, obj),GET_PRIMITIVE_FIELD(Int, obj))<SUB>1703</SUB>> ]
-"7350" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Int, obj))<SUB>1703</SUB>> ]
-"7359" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1703</SUB>> ]
-"7366" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1703</SUB>> ]
-"7376" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetInt)<SUB>1703</SUB>> ]
-"7314" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1703</SUB>> ]
-"7335" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1703</SUB>> ]
-"7352" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1703</SUB>> ]
-"7361" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Int, obj))<SUB>1703</SUB>> ]
-"7367" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1703</SUB>> ]
-"7370" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Int, obj))<SUB>1703</SUB>> ]
-"7378" [label = <(FIELD_IDENTIFIER,GetInt,GetInt)<SUB>1703</SUB>> ]
-"7315" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1703</SUB>> ]
-"7319" [label = <(GET_PRIMITIVE_FIELD(Int, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1703</SUB>> ]
-"7326" [label = <(RETURN,GET_PRIMITIVE_FIELD(Int, obj),GET_PRIMITIVE_FIELD(Int, obj))<SUB>1703</SUB>> ]
-"7336" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1703</SUB>> ]
-"7338" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1703</SUB>> ]
-"7363" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1703</SUB>> ]
-"7369" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1703</SUB>> ]
-"7372" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1703</SUB>> ]
-"7320" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1703</SUB>> ]
-"7321" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1703</SUB>> ]
-"7323" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1703</SUB>> ]
-"7305" [label = <(METHOD,GetIntField)<SUB>1702</SUB>> ]
-"7380" [label = <(METHOD_RETURN,jint)<SUB>1702</SUB>> ]
-  "7310" -> "7315" 
-  "7310" -> "7330" 
-  "7344" -> "7352" 
-  "7347" -> "7354" 
-  "7354" -> "7363" 
-  "7357" -> "7378" 
-  "7374" -> "7380" 
-  "7329" -> "7336" 
-  "7329" -> "7344" 
-  "7349" -> "7347" 
-  "7358" -> "7369" 
-  "7365" -> "7357" 
-  "7375" -> "7374" 
-  "7330" -> "7329" 
-  "7334" -> "7341" 
-  "7341" -> "7380" 
-  "7350" -> "7349" 
-  "7359" -> "7358" 
-  "7366" -> "7365" 
-  "7376" -> "7375" 
-  "7314" -> "7321" 
-  "7314" -> "7330" 
-  "7335" -> "7334" 
-  "7352" -> "7350" 
-  "7361" -> "7359" 
-  "7367" -> "7372" 
-  "7370" -> "7366" 
-  "7378" -> "7376" 
-  "7315" -> "7314" 
-  "7319" -> "7326" 
-  "7326" -> "7380" 
-  "7336" -> "7338" 
-  "7338" -> "7335" 
-  "7363" -> "7361" 
-  "7369" -> "7367" 
-  "7372" -> "7370" 
-  "7320" -> "7319" 
-  "7321" -> "7323" 
-  "7323" -> "7320" 
-  "7305" -> "7310" 
+digraph "GetStaticBooleanField" {  
+"7425" [label = <(GET_STATIC_PRIMITIVE_FIELD,GET_STATIC_PRIMITIVE_FIELD(Boolean))<SUB>1641</SUB>> ]
+"7443" [label = <(soa,ScopedObjectAccess)<SUB>1641</SUB>> ]
+"7446" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1641</SUB>> ]
+"7453" [label = <(NotifyGetField,NotifyGetField(f, nullptr))<SUB>1641</SUB>> ]
+"7456" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Boolean);,GET_STATIC_PRIMITIVE_FIELD(Boolean);)<SUB>1641</SUB>> ]
+"7448" [label = <(GET_STATIC_PRIMITIVE_FIELD(Boolean),jni::DecodeArtField(fid))<SUB>1641</SUB>> ]
+"7457" [label = <(GET_STATIC_PRIMITIVE_FIELD(Boolean),f-&gt;GetBoolean(f-&gt;GetDeclaringClass()))<SUB>1641</SUB>> ]
+"7449" [label = <(&lt;operator&gt;.fieldAccess,GET_STATIC_PRIMITIVE_FIELD(Boolean))<SUB>1641</SUB>> ]
+"7458" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetBoolean)<SUB>1641</SUB>> ]
+"7461" [label = <(GET_STATIC_PRIMITIVE_FIELD(Boolean),f-&gt;GetDeclaringClass())<SUB>1641</SUB>> ]
+"7428" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1641</SUB>> ]
+"7451" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1641</SUB>> ]
+"7460" [label = <(FIELD_IDENTIFIER,GetBoolean,GetBoolean)<SUB>1641</SUB>> ]
+"7462" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1641</SUB>> ]
+"7429" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1641</SUB>> ]
+"7433" [label = <(GET_STATIC_PRIMITIVE_FIELD(Boolean),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1641</SUB>> ]
+"7440" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Boolean),GET_STATIC_PRIMITIVE_FIELD(Boolean))<SUB>1641</SUB>> ]
+"7464" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1641</SUB>> ]
+"7434" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1641</SUB>> ]
+"7435" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1641</SUB>> ]
+"7437" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1641</SUB>> ]
+"7420" [label = <(METHOD,GetStaticBooleanField)<SUB>1640</SUB>> ]
+"7465" [label = <(METHOD_RETURN,jboolean)<SUB>1640</SUB>> ]
+  "7425" -> "7429" 
+  "7425" -> "7443" 
+  "7443" -> "7451" 
+  "7446" -> "7453" 
+  "7453" -> "7460" 
+  "7456" -> "7465" 
+  "7448" -> "7446" 
+  "7457" -> "7456" 
+  "7449" -> "7448" 
+  "7458" -> "7464" 
+  "7461" -> "7457" 
+  "7428" -> "7435" 
+  "7428" -> "7443" 
+  "7451" -> "7449" 
+  "7460" -> "7458" 
+  "7462" -> "7461" 
+  "7429" -> "7428" 
+  "7433" -> "7440" 
+  "7440" -> "7465" 
+  "7464" -> "7462" 
+  "7434" -> "7433" 
+  "7435" -> "7437" 
+  "7437" -> "7434" 
+  "7420" -> "7425" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/143-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/143-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/143-cfg.dot	2023-06-07 19:35:28.317384341 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/143-cfg.dot	2023-06-07 19:35:34.837383769 +0330
@@ -1,80 +1,49 @@
-digraph "GetLongField" {  
-"7387" [label = <(GET_PRIMITIVE_FIELD,GET_PRIMITIVE_FIELD(Long, obj))<SUB>1707</SUB>> ]
-"7421" [label = <(soa,ScopedObjectAccess)<SUB>1707</SUB>> ]
-"7424" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1707</SUB>> ]
-"7431" [label = <(NotifyGetField,NotifyGetField(f, obj))<SUB>1707</SUB>> ]
-"7434" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1707</SUB>> ]
-"7451" [label = <(RETURN,GET_PRIMITIVE_FIELD(Long, obj);,GET_PRIMITIVE_FIELD(Long, obj);)<SUB>1707</SUB>> ]
-"7406" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1707</SUB>> ]
-"7426" [label = <(GET_PRIMITIVE_FIELD(Long, obj),jni::DecodeArtField(fid))<SUB>1707</SUB>> ]
-"7435" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1707</SUB>> ]
-"7442" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1707</SUB>> ]
-"7452" [label = <(GET_PRIMITIVE_FIELD(Long, obj),f-&gt;GetLong(o))<SUB>1707</SUB>> ]
-"7407" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1707</SUB>> ]
-"7411" [label = <(GET_PRIMITIVE_FIELD(Long, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1707</SUB>> ]
-"7418" [label = <(RETURN,GET_PRIMITIVE_FIELD(Long, obj),GET_PRIMITIVE_FIELD(Long, obj))<SUB>1707</SUB>> ]
-"7427" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Long, obj))<SUB>1707</SUB>> ]
-"7436" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1707</SUB>> ]
-"7443" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1707</SUB>> ]
-"7453" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetLong)<SUB>1707</SUB>> ]
-"7391" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1707</SUB>> ]
-"7412" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1707</SUB>> ]
-"7429" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1707</SUB>> ]
-"7438" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Long, obj))<SUB>1707</SUB>> ]
-"7444" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1707</SUB>> ]
-"7447" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Long, obj))<SUB>1707</SUB>> ]
-"7455" [label = <(FIELD_IDENTIFIER,GetLong,GetLong)<SUB>1707</SUB>> ]
-"7392" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1707</SUB>> ]
-"7396" [label = <(GET_PRIMITIVE_FIELD(Long, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1707</SUB>> ]
-"7403" [label = <(RETURN,GET_PRIMITIVE_FIELD(Long, obj),GET_PRIMITIVE_FIELD(Long, obj))<SUB>1707</SUB>> ]
-"7413" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1707</SUB>> ]
-"7415" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1707</SUB>> ]
-"7440" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1707</SUB>> ]
-"7446" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1707</SUB>> ]
-"7449" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1707</SUB>> ]
-"7397" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1707</SUB>> ]
-"7398" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1707</SUB>> ]
-"7400" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1707</SUB>> ]
-"7382" [label = <(METHOD,GetLongField)<SUB>1706</SUB>> ]
-"7457" [label = <(METHOD_RETURN,jlong)<SUB>1706</SUB>> ]
-  "7387" -> "7392" 
-  "7387" -> "7407" 
-  "7421" -> "7429" 
-  "7424" -> "7431" 
-  "7431" -> "7440" 
-  "7434" -> "7455" 
-  "7451" -> "7457" 
-  "7406" -> "7413" 
-  "7406" -> "7421" 
-  "7426" -> "7424" 
-  "7435" -> "7446" 
-  "7442" -> "7434" 
-  "7452" -> "7451" 
-  "7407" -> "7406" 
-  "7411" -> "7418" 
-  "7418" -> "7457" 
-  "7427" -> "7426" 
-  "7436" -> "7435" 
-  "7443" -> "7442" 
-  "7453" -> "7452" 
-  "7391" -> "7398" 
-  "7391" -> "7407" 
-  "7412" -> "7411" 
-  "7429" -> "7427" 
-  "7438" -> "7436" 
-  "7444" -> "7449" 
-  "7447" -> "7443" 
-  "7455" -> "7453" 
-  "7392" -> "7391" 
-  "7396" -> "7403" 
-  "7403" -> "7457" 
-  "7413" -> "7415" 
-  "7415" -> "7412" 
-  "7440" -> "7438" 
-  "7446" -> "7444" 
-  "7449" -> "7447" 
-  "7397" -> "7396" 
-  "7398" -> "7400" 
-  "7400" -> "7397" 
-  "7382" -> "7387" 
+digraph "GetStaticByteField" {  
+"7472" [label = <(GET_STATIC_PRIMITIVE_FIELD,GET_STATIC_PRIMITIVE_FIELD(Byte))<SUB>1645</SUB>> ]
+"7490" [label = <(soa,ScopedObjectAccess)<SUB>1645</SUB>> ]
+"7493" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1645</SUB>> ]
+"7500" [label = <(NotifyGetField,NotifyGetField(f, nullptr))<SUB>1645</SUB>> ]
+"7503" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Byte);,GET_STATIC_PRIMITIVE_FIELD(Byte);)<SUB>1645</SUB>> ]
+"7495" [label = <(GET_STATIC_PRIMITIVE_FIELD(Byte),jni::DecodeArtField(fid))<SUB>1645</SUB>> ]
+"7504" [label = <(GET_STATIC_PRIMITIVE_FIELD(Byte),f-&gt;GetByte(f-&gt;GetDeclaringClass()))<SUB>1645</SUB>> ]
+"7496" [label = <(&lt;operator&gt;.fieldAccess,GET_STATIC_PRIMITIVE_FIELD(Byte))<SUB>1645</SUB>> ]
+"7505" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetByte)<SUB>1645</SUB>> ]
+"7508" [label = <(GET_STATIC_PRIMITIVE_FIELD(Byte),f-&gt;GetDeclaringClass())<SUB>1645</SUB>> ]
+"7475" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1645</SUB>> ]
+"7498" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1645</SUB>> ]
+"7507" [label = <(FIELD_IDENTIFIER,GetByte,GetByte)<SUB>1645</SUB>> ]
+"7509" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1645</SUB>> ]
+"7476" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1645</SUB>> ]
+"7480" [label = <(GET_STATIC_PRIMITIVE_FIELD(Byte),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1645</SUB>> ]
+"7487" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Byte),GET_STATIC_PRIMITIVE_FIELD(Byte))<SUB>1645</SUB>> ]
+"7511" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1645</SUB>> ]
+"7481" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1645</SUB>> ]
+"7482" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1645</SUB>> ]
+"7484" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1645</SUB>> ]
+"7467" [label = <(METHOD,GetStaticByteField)<SUB>1644</SUB>> ]
+"7512" [label = <(METHOD_RETURN,jbyte)<SUB>1644</SUB>> ]
+  "7472" -> "7476" 
+  "7472" -> "7490" 
+  "7490" -> "7498" 
+  "7493" -> "7500" 
+  "7500" -> "7507" 
+  "7503" -> "7512" 
+  "7495" -> "7493" 
+  "7504" -> "7503" 
+  "7496" -> "7495" 
+  "7505" -> "7511" 
+  "7508" -> "7504" 
+  "7475" -> "7482" 
+  "7475" -> "7490" 
+  "7498" -> "7496" 
+  "7507" -> "7505" 
+  "7509" -> "7508" 
+  "7476" -> "7475" 
+  "7480" -> "7487" 
+  "7487" -> "7512" 
+  "7511" -> "7509" 
+  "7481" -> "7480" 
+  "7482" -> "7484" 
+  "7484" -> "7481" 
+  "7467" -> "7472" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/144-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/144-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/144-cfg.dot	2023-06-07 19:35:28.317384341 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/144-cfg.dot	2023-06-07 19:35:34.837383769 +0330
@@ -1,80 +1,49 @@
-digraph "GetFloatField" {  
-"7464" [label = <(GET_PRIMITIVE_FIELD,GET_PRIMITIVE_FIELD(Float, obj))<SUB>1711</SUB>> ]
-"7498" [label = <(soa,ScopedObjectAccess)<SUB>1711</SUB>> ]
-"7501" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1711</SUB>> ]
-"7508" [label = <(NotifyGetField,NotifyGetField(f, obj))<SUB>1711</SUB>> ]
-"7511" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1711</SUB>> ]
-"7528" [label = <(RETURN,GET_PRIMITIVE_FIELD(Float, obj);,GET_PRIMITIVE_FIELD(Float, obj);)<SUB>1711</SUB>> ]
-"7483" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1711</SUB>> ]
-"7503" [label = <(GET_PRIMITIVE_FIELD(Float, obj),jni::DecodeArtField(fid))<SUB>1711</SUB>> ]
-"7512" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1711</SUB>> ]
-"7519" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1711</SUB>> ]
-"7529" [label = <(GET_PRIMITIVE_FIELD(Float, obj),f-&gt;GetFloat(o))<SUB>1711</SUB>> ]
-"7484" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1711</SUB>> ]
-"7488" [label = <(GET_PRIMITIVE_FIELD(Float, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1711</SUB>> ]
-"7495" [label = <(RETURN,GET_PRIMITIVE_FIELD(Float, obj),GET_PRIMITIVE_FIELD(Float, obj))<SUB>1711</SUB>> ]
-"7504" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Float, obj))<SUB>1711</SUB>> ]
-"7513" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1711</SUB>> ]
-"7520" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1711</SUB>> ]
-"7530" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetFloat)<SUB>1711</SUB>> ]
-"7468" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1711</SUB>> ]
-"7489" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1711</SUB>> ]
-"7506" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1711</SUB>> ]
-"7515" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Float, obj))<SUB>1711</SUB>> ]
-"7521" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1711</SUB>> ]
-"7524" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Float, obj))<SUB>1711</SUB>> ]
-"7532" [label = <(FIELD_IDENTIFIER,GetFloat,GetFloat)<SUB>1711</SUB>> ]
-"7469" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1711</SUB>> ]
-"7473" [label = <(GET_PRIMITIVE_FIELD(Float, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1711</SUB>> ]
-"7480" [label = <(RETURN,GET_PRIMITIVE_FIELD(Float, obj),GET_PRIMITIVE_FIELD(Float, obj))<SUB>1711</SUB>> ]
-"7490" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1711</SUB>> ]
-"7492" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1711</SUB>> ]
-"7517" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1711</SUB>> ]
-"7523" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1711</SUB>> ]
-"7526" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1711</SUB>> ]
-"7474" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1711</SUB>> ]
-"7475" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1711</SUB>> ]
-"7477" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1711</SUB>> ]
-"7459" [label = <(METHOD,GetFloatField)<SUB>1710</SUB>> ]
-"7534" [label = <(METHOD_RETURN,jfloat)<SUB>1710</SUB>> ]
-  "7464" -> "7469" 
-  "7464" -> "7484" 
-  "7498" -> "7506" 
-  "7501" -> "7508" 
-  "7508" -> "7517" 
-  "7511" -> "7532" 
-  "7528" -> "7534" 
-  "7483" -> "7490" 
-  "7483" -> "7498" 
-  "7503" -> "7501" 
-  "7512" -> "7523" 
-  "7519" -> "7511" 
-  "7529" -> "7528" 
-  "7484" -> "7483" 
-  "7488" -> "7495" 
-  "7495" -> "7534" 
-  "7504" -> "7503" 
-  "7513" -> "7512" 
-  "7520" -> "7519" 
-  "7530" -> "7529" 
-  "7468" -> "7475" 
-  "7468" -> "7484" 
-  "7489" -> "7488" 
-  "7506" -> "7504" 
-  "7515" -> "7513" 
-  "7521" -> "7526" 
-  "7524" -> "7520" 
-  "7532" -> "7530" 
-  "7469" -> "7468" 
-  "7473" -> "7480" 
-  "7480" -> "7534" 
-  "7490" -> "7492" 
-  "7492" -> "7489" 
-  "7517" -> "7515" 
-  "7523" -> "7521" 
-  "7526" -> "7524" 
-  "7474" -> "7473" 
-  "7475" -> "7477" 
-  "7477" -> "7474" 
-  "7459" -> "7464" 
+digraph "GetStaticCharField" {  
+"7519" [label = <(GET_STATIC_PRIMITIVE_FIELD,GET_STATIC_PRIMITIVE_FIELD(Char))<SUB>1649</SUB>> ]
+"7537" [label = <(soa,ScopedObjectAccess)<SUB>1649</SUB>> ]
+"7540" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1649</SUB>> ]
+"7547" [label = <(NotifyGetField,NotifyGetField(f, nullptr))<SUB>1649</SUB>> ]
+"7550" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Char);,GET_STATIC_PRIMITIVE_FIELD(Char);)<SUB>1649</SUB>> ]
+"7542" [label = <(GET_STATIC_PRIMITIVE_FIELD(Char),jni::DecodeArtField(fid))<SUB>1649</SUB>> ]
+"7551" [label = <(GET_STATIC_PRIMITIVE_FIELD(Char),f-&gt;GetChar(f-&gt;GetDeclaringClass()))<SUB>1649</SUB>> ]
+"7543" [label = <(&lt;operator&gt;.fieldAccess,GET_STATIC_PRIMITIVE_FIELD(Char))<SUB>1649</SUB>> ]
+"7552" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetChar)<SUB>1649</SUB>> ]
+"7555" [label = <(GET_STATIC_PRIMITIVE_FIELD(Char),f-&gt;GetDeclaringClass())<SUB>1649</SUB>> ]
+"7522" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1649</SUB>> ]
+"7545" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1649</SUB>> ]
+"7554" [label = <(FIELD_IDENTIFIER,GetChar,GetChar)<SUB>1649</SUB>> ]
+"7556" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1649</SUB>> ]
+"7523" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1649</SUB>> ]
+"7527" [label = <(GET_STATIC_PRIMITIVE_FIELD(Char),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1649</SUB>> ]
+"7534" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Char),GET_STATIC_PRIMITIVE_FIELD(Char))<SUB>1649</SUB>> ]
+"7558" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1649</SUB>> ]
+"7528" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1649</SUB>> ]
+"7529" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1649</SUB>> ]
+"7531" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1649</SUB>> ]
+"7514" [label = <(METHOD,GetStaticCharField)<SUB>1648</SUB>> ]
+"7559" [label = <(METHOD_RETURN,jchar)<SUB>1648</SUB>> ]
+  "7519" -> "7523" 
+  "7519" -> "7537" 
+  "7537" -> "7545" 
+  "7540" -> "7547" 
+  "7547" -> "7554" 
+  "7550" -> "7559" 
+  "7542" -> "7540" 
+  "7551" -> "7550" 
+  "7543" -> "7542" 
+  "7552" -> "7558" 
+  "7555" -> "7551" 
+  "7522" -> "7529" 
+  "7522" -> "7537" 
+  "7545" -> "7543" 
+  "7554" -> "7552" 
+  "7556" -> "7555" 
+  "7523" -> "7522" 
+  "7527" -> "7534" 
+  "7534" -> "7559" 
+  "7558" -> "7556" 
+  "7528" -> "7527" 
+  "7529" -> "7531" 
+  "7531" -> "7528" 
+  "7514" -> "7519" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/145-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/145-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/145-cfg.dot	2023-06-07 19:35:28.317384341 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/145-cfg.dot	2023-06-07 19:35:34.837383769 +0330
@@ -1,80 +1,49 @@
-digraph "GetDoubleField" {  
-"7541" [label = <(GET_PRIMITIVE_FIELD,GET_PRIMITIVE_FIELD(Double, obj))<SUB>1715</SUB>> ]
-"7575" [label = <(soa,ScopedObjectAccess)<SUB>1715</SUB>> ]
-"7578" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1715</SUB>> ]
-"7585" [label = <(NotifyGetField,NotifyGetField(f, obj))<SUB>1715</SUB>> ]
-"7588" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1715</SUB>> ]
-"7605" [label = <(RETURN,GET_PRIMITIVE_FIELD(Double, obj);,GET_PRIMITIVE_FIELD(Double, obj);)<SUB>1715</SUB>> ]
-"7560" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1715</SUB>> ]
-"7580" [label = <(GET_PRIMITIVE_FIELD(Double, obj),jni::DecodeArtField(fid))<SUB>1715</SUB>> ]
-"7589" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1715</SUB>> ]
-"7596" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1715</SUB>> ]
-"7606" [label = <(GET_PRIMITIVE_FIELD(Double, obj),f-&gt;GetDouble(o))<SUB>1715</SUB>> ]
-"7561" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1715</SUB>> ]
-"7565" [label = <(GET_PRIMITIVE_FIELD(Double, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1715</SUB>> ]
-"7572" [label = <(RETURN,GET_PRIMITIVE_FIELD(Double, obj),GET_PRIMITIVE_FIELD(Double, obj))<SUB>1715</SUB>> ]
-"7581" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Double, obj))<SUB>1715</SUB>> ]
-"7590" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1715</SUB>> ]
-"7597" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1715</SUB>> ]
-"7607" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDouble)<SUB>1715</SUB>> ]
-"7545" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1715</SUB>> ]
-"7566" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1715</SUB>> ]
-"7583" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1715</SUB>> ]
-"7592" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Double, obj))<SUB>1715</SUB>> ]
-"7598" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1715</SUB>> ]
-"7601" [label = <(&lt;operator&gt;.fieldAccess,GET_PRIMITIVE_FIELD(Double, obj))<SUB>1715</SUB>> ]
-"7609" [label = <(FIELD_IDENTIFIER,GetDouble,GetDouble)<SUB>1715</SUB>> ]
-"7546" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1715</SUB>> ]
-"7550" [label = <(GET_PRIMITIVE_FIELD(Double, obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1715</SUB>> ]
-"7557" [label = <(RETURN,GET_PRIMITIVE_FIELD(Double, obj),GET_PRIMITIVE_FIELD(Double, obj))<SUB>1715</SUB>> ]
-"7567" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1715</SUB>> ]
-"7569" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1715</SUB>> ]
-"7594" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1715</SUB>> ]
-"7600" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1715</SUB>> ]
-"7603" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1715</SUB>> ]
-"7551" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1715</SUB>> ]
-"7552" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1715</SUB>> ]
-"7554" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1715</SUB>> ]
-"7536" [label = <(METHOD,GetDoubleField)<SUB>1714</SUB>> ]
-"7611" [label = <(METHOD_RETURN,jdouble)<SUB>1714</SUB>> ]
-  "7541" -> "7546" 
-  "7541" -> "7561" 
-  "7575" -> "7583" 
-  "7578" -> "7585" 
-  "7585" -> "7594" 
-  "7588" -> "7609" 
-  "7605" -> "7611" 
-  "7560" -> "7567" 
-  "7560" -> "7575" 
-  "7580" -> "7578" 
-  "7589" -> "7600" 
-  "7596" -> "7588" 
-  "7606" -> "7605" 
-  "7561" -> "7560" 
-  "7565" -> "7572" 
-  "7572" -> "7611" 
-  "7581" -> "7580" 
+digraph "GetStaticShortField" {  
+"7566" [label = <(GET_STATIC_PRIMITIVE_FIELD,GET_STATIC_PRIMITIVE_FIELD(Short))<SUB>1653</SUB>> ]
+"7584" [label = <(soa,ScopedObjectAccess)<SUB>1653</SUB>> ]
+"7587" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1653</SUB>> ]
+"7594" [label = <(NotifyGetField,NotifyGetField(f, nullptr))<SUB>1653</SUB>> ]
+"7597" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Short);,GET_STATIC_PRIMITIVE_FIELD(Short);)<SUB>1653</SUB>> ]
+"7589" [label = <(GET_STATIC_PRIMITIVE_FIELD(Short),jni::DecodeArtField(fid))<SUB>1653</SUB>> ]
+"7598" [label = <(GET_STATIC_PRIMITIVE_FIELD(Short),f-&gt;GetShort(f-&gt;GetDeclaringClass()))<SUB>1653</SUB>> ]
+"7590" [label = <(&lt;operator&gt;.fieldAccess,GET_STATIC_PRIMITIVE_FIELD(Short))<SUB>1653</SUB>> ]
+"7599" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetShort)<SUB>1653</SUB>> ]
+"7602" [label = <(GET_STATIC_PRIMITIVE_FIELD(Short),f-&gt;GetDeclaringClass())<SUB>1653</SUB>> ]
+"7569" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1653</SUB>> ]
+"7592" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1653</SUB>> ]
+"7601" [label = <(FIELD_IDENTIFIER,GetShort,GetShort)<SUB>1653</SUB>> ]
+"7603" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1653</SUB>> ]
+"7570" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1653</SUB>> ]
+"7574" [label = <(GET_STATIC_PRIMITIVE_FIELD(Short),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1653</SUB>> ]
+"7581" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Short),GET_STATIC_PRIMITIVE_FIELD(Short))<SUB>1653</SUB>> ]
+"7605" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1653</SUB>> ]
+"7575" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1653</SUB>> ]
+"7576" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1653</SUB>> ]
+"7578" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1653</SUB>> ]
+"7561" [label = <(METHOD,GetStaticShortField)<SUB>1652</SUB>> ]
+"7606" [label = <(METHOD_RETURN,jshort)<SUB>1652</SUB>> ]
+  "7566" -> "7570" 
+  "7566" -> "7584" 
+  "7584" -> "7592" 
+  "7587" -> "7594" 
+  "7594" -> "7601" 
+  "7597" -> "7606" 
+  "7589" -> "7587" 
+  "7598" -> "7597" 
   "7590" -> "7589" 
-  "7597" -> "7596" 
-  "7607" -> "7606" 
-  "7545" -> "7552" 
-  "7545" -> "7561" 
-  "7566" -> "7565" 
-  "7583" -> "7581" 
+  "7599" -> "7605" 
+  "7602" -> "7598" 
+  "7569" -> "7576" 
+  "7569" -> "7584" 
   "7592" -> "7590" 
-  "7598" -> "7603" 
-  "7601" -> "7597" 
-  "7609" -> "7607" 
-  "7546" -> "7545" 
-  "7550" -> "7557" 
-  "7557" -> "7611" 
-  "7567" -> "7569" 
-  "7569" -> "7566" 
-  "7594" -> "7592" 
-  "7600" -> "7598" 
-  "7603" -> "7601" 
-  "7551" -> "7550" 
-  "7552" -> "7554" 
-  "7554" -> "7551" 
-  "7536" -> "7541" 
+  "7601" -> "7599" 
+  "7603" -> "7602" 
+  "7570" -> "7569" 
+  "7574" -> "7581" 
+  "7581" -> "7606" 
+  "7605" -> "7603" 
+  "7575" -> "7574" 
+  "7576" -> "7578" 
+  "7578" -> "7575" 
+  "7561" -> "7566" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/146-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/146-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/146-cfg.dot	2023-06-07 19:35:28.317384341 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/146-cfg.dot	2023-06-07 19:35:34.837383769 +0330
@@ -1,49 +1,49 @@
-digraph "GetStaticBooleanField" {  
-"7618" [label = <(GET_STATIC_PRIMITIVE_FIELD,GET_STATIC_PRIMITIVE_FIELD(Boolean))<SUB>1719</SUB>> ]
-"7636" [label = <(soa,ScopedObjectAccess)<SUB>1719</SUB>> ]
-"7639" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1719</SUB>> ]
-"7646" [label = <(NotifyGetField,NotifyGetField(f, nullptr))<SUB>1719</SUB>> ]
-"7649" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Boolean);,GET_STATIC_PRIMITIVE_FIELD(Boolean);)<SUB>1719</SUB>> ]
-"7641" [label = <(GET_STATIC_PRIMITIVE_FIELD(Boolean),jni::DecodeArtField(fid))<SUB>1719</SUB>> ]
-"7650" [label = <(GET_STATIC_PRIMITIVE_FIELD(Boolean),f-&gt;GetBoolean(f-&gt;GetDeclaringClass()))<SUB>1719</SUB>> ]
-"7642" [label = <(&lt;operator&gt;.fieldAccess,GET_STATIC_PRIMITIVE_FIELD(Boolean))<SUB>1719</SUB>> ]
-"7651" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetBoolean)<SUB>1719</SUB>> ]
-"7654" [label = <(GET_STATIC_PRIMITIVE_FIELD(Boolean),f-&gt;GetDeclaringClass())<SUB>1719</SUB>> ]
-"7621" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1719</SUB>> ]
-"7644" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1719</SUB>> ]
-"7653" [label = <(FIELD_IDENTIFIER,GetBoolean,GetBoolean)<SUB>1719</SUB>> ]
-"7655" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1719</SUB>> ]
-"7622" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1719</SUB>> ]
-"7626" [label = <(GET_STATIC_PRIMITIVE_FIELD(Boolean),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1719</SUB>> ]
-"7633" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Boolean),GET_STATIC_PRIMITIVE_FIELD(Boolean))<SUB>1719</SUB>> ]
-"7657" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1719</SUB>> ]
-"7627" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1719</SUB>> ]
-"7628" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1719</SUB>> ]
-"7630" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1719</SUB>> ]
-"7613" [label = <(METHOD,GetStaticBooleanField)<SUB>1718</SUB>> ]
-"7658" [label = <(METHOD_RETURN,jboolean)<SUB>1718</SUB>> ]
-  "7618" -> "7622" 
-  "7618" -> "7636" 
-  "7636" -> "7644" 
-  "7639" -> "7646" 
-  "7646" -> "7653" 
-  "7649" -> "7658" 
-  "7641" -> "7639" 
+digraph "GetStaticIntField" {  
+"7613" [label = <(GET_STATIC_PRIMITIVE_FIELD,GET_STATIC_PRIMITIVE_FIELD(Int))<SUB>1657</SUB>> ]
+"7631" [label = <(soa,ScopedObjectAccess)<SUB>1657</SUB>> ]
+"7634" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1657</SUB>> ]
+"7641" [label = <(NotifyGetField,NotifyGetField(f, nullptr))<SUB>1657</SUB>> ]
+"7644" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Int);,GET_STATIC_PRIMITIVE_FIELD(Int);)<SUB>1657</SUB>> ]
+"7636" [label = <(GET_STATIC_PRIMITIVE_FIELD(Int),jni::DecodeArtField(fid))<SUB>1657</SUB>> ]
+"7645" [label = <(GET_STATIC_PRIMITIVE_FIELD(Int),f-&gt;GetInt(f-&gt;GetDeclaringClass()))<SUB>1657</SUB>> ]
+"7637" [label = <(&lt;operator&gt;.fieldAccess,GET_STATIC_PRIMITIVE_FIELD(Int))<SUB>1657</SUB>> ]
+"7646" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetInt)<SUB>1657</SUB>> ]
+"7649" [label = <(GET_STATIC_PRIMITIVE_FIELD(Int),f-&gt;GetDeclaringClass())<SUB>1657</SUB>> ]
+"7616" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1657</SUB>> ]
+"7639" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1657</SUB>> ]
+"7648" [label = <(FIELD_IDENTIFIER,GetInt,GetInt)<SUB>1657</SUB>> ]
+"7650" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1657</SUB>> ]
+"7617" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1657</SUB>> ]
+"7621" [label = <(GET_STATIC_PRIMITIVE_FIELD(Int),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1657</SUB>> ]
+"7628" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Int),GET_STATIC_PRIMITIVE_FIELD(Int))<SUB>1657</SUB>> ]
+"7652" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1657</SUB>> ]
+"7622" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1657</SUB>> ]
+"7623" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1657</SUB>> ]
+"7625" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1657</SUB>> ]
+"7608" [label = <(METHOD,GetStaticIntField)<SUB>1656</SUB>> ]
+"7653" [label = <(METHOD_RETURN,jint)<SUB>1656</SUB>> ]
+  "7613" -> "7617" 
+  "7613" -> "7631" 
+  "7631" -> "7639" 
+  "7634" -> "7641" 
+  "7641" -> "7648" 
+  "7644" -> "7653" 
+  "7636" -> "7634" 
+  "7645" -> "7644" 
+  "7637" -> "7636" 
+  "7646" -> "7652" 
+  "7649" -> "7645" 
+  "7616" -> "7623" 
+  "7616" -> "7631" 
+  "7639" -> "7637" 
+  "7648" -> "7646" 
   "7650" -> "7649" 
-  "7642" -> "7641" 
-  "7651" -> "7657" 
-  "7654" -> "7650" 
+  "7617" -> "7616" 
   "7621" -> "7628" 
-  "7621" -> "7636" 
-  "7644" -> "7642" 
-  "7653" -> "7651" 
-  "7655" -> "7654" 
+  "7628" -> "7653" 
+  "7652" -> "7650" 
   "7622" -> "7621" 
-  "7626" -> "7633" 
-  "7633" -> "7658" 
-  "7657" -> "7655" 
-  "7627" -> "7626" 
-  "7628" -> "7630" 
-  "7630" -> "7627" 
-  "7613" -> "7618" 
+  "7623" -> "7625" 
+  "7625" -> "7622" 
+  "7608" -> "7613" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/147-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/147-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/147-cfg.dot	2023-06-07 19:35:28.317384341 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/147-cfg.dot	2023-06-07 19:35:34.837383769 +0330
@@ -1,49 +1,49 @@
-digraph "GetStaticByteField" {  
-"7665" [label = <(GET_STATIC_PRIMITIVE_FIELD,GET_STATIC_PRIMITIVE_FIELD(Byte))<SUB>1723</SUB>> ]
-"7683" [label = <(soa,ScopedObjectAccess)<SUB>1723</SUB>> ]
-"7686" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1723</SUB>> ]
-"7693" [label = <(NotifyGetField,NotifyGetField(f, nullptr))<SUB>1723</SUB>> ]
-"7696" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Byte);,GET_STATIC_PRIMITIVE_FIELD(Byte);)<SUB>1723</SUB>> ]
-"7688" [label = <(GET_STATIC_PRIMITIVE_FIELD(Byte),jni::DecodeArtField(fid))<SUB>1723</SUB>> ]
-"7697" [label = <(GET_STATIC_PRIMITIVE_FIELD(Byte),f-&gt;GetByte(f-&gt;GetDeclaringClass()))<SUB>1723</SUB>> ]
-"7689" [label = <(&lt;operator&gt;.fieldAccess,GET_STATIC_PRIMITIVE_FIELD(Byte))<SUB>1723</SUB>> ]
-"7698" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetByte)<SUB>1723</SUB>> ]
-"7701" [label = <(GET_STATIC_PRIMITIVE_FIELD(Byte),f-&gt;GetDeclaringClass())<SUB>1723</SUB>> ]
-"7668" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1723</SUB>> ]
-"7691" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1723</SUB>> ]
-"7700" [label = <(FIELD_IDENTIFIER,GetByte,GetByte)<SUB>1723</SUB>> ]
-"7702" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1723</SUB>> ]
-"7669" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1723</SUB>> ]
-"7673" [label = <(GET_STATIC_PRIMITIVE_FIELD(Byte),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1723</SUB>> ]
-"7680" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Byte),GET_STATIC_PRIMITIVE_FIELD(Byte))<SUB>1723</SUB>> ]
-"7704" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1723</SUB>> ]
-"7674" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1723</SUB>> ]
-"7675" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1723</SUB>> ]
-"7677" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1723</SUB>> ]
-"7660" [label = <(METHOD,GetStaticByteField)<SUB>1722</SUB>> ]
-"7705" [label = <(METHOD_RETURN,jbyte)<SUB>1722</SUB>> ]
-  "7665" -> "7669" 
-  "7665" -> "7683" 
-  "7683" -> "7691" 
-  "7686" -> "7693" 
-  "7693" -> "7700" 
-  "7696" -> "7705" 
-  "7688" -> "7686" 
+digraph "GetStaticLongField" {  
+"7660" [label = <(GET_STATIC_PRIMITIVE_FIELD,GET_STATIC_PRIMITIVE_FIELD(Long))<SUB>1661</SUB>> ]
+"7678" [label = <(soa,ScopedObjectAccess)<SUB>1661</SUB>> ]
+"7681" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1661</SUB>> ]
+"7688" [label = <(NotifyGetField,NotifyGetField(f, nullptr))<SUB>1661</SUB>> ]
+"7691" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Long);,GET_STATIC_PRIMITIVE_FIELD(Long);)<SUB>1661</SUB>> ]
+"7683" [label = <(GET_STATIC_PRIMITIVE_FIELD(Long),jni::DecodeArtField(fid))<SUB>1661</SUB>> ]
+"7692" [label = <(GET_STATIC_PRIMITIVE_FIELD(Long),f-&gt;GetLong(f-&gt;GetDeclaringClass()))<SUB>1661</SUB>> ]
+"7684" [label = <(&lt;operator&gt;.fieldAccess,GET_STATIC_PRIMITIVE_FIELD(Long))<SUB>1661</SUB>> ]
+"7693" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetLong)<SUB>1661</SUB>> ]
+"7696" [label = <(GET_STATIC_PRIMITIVE_FIELD(Long),f-&gt;GetDeclaringClass())<SUB>1661</SUB>> ]
+"7663" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1661</SUB>> ]
+"7686" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1661</SUB>> ]
+"7695" [label = <(FIELD_IDENTIFIER,GetLong,GetLong)<SUB>1661</SUB>> ]
+"7697" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1661</SUB>> ]
+"7664" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1661</SUB>> ]
+"7668" [label = <(GET_STATIC_PRIMITIVE_FIELD(Long),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1661</SUB>> ]
+"7675" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Long),GET_STATIC_PRIMITIVE_FIELD(Long))<SUB>1661</SUB>> ]
+"7699" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1661</SUB>> ]
+"7669" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1661</SUB>> ]
+"7670" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1661</SUB>> ]
+"7672" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1661</SUB>> ]
+"7655" [label = <(METHOD,GetStaticLongField)<SUB>1660</SUB>> ]
+"7700" [label = <(METHOD_RETURN,jlong)<SUB>1660</SUB>> ]
+  "7660" -> "7664" 
+  "7660" -> "7678" 
+  "7678" -> "7686" 
+  "7681" -> "7688" 
+  "7688" -> "7695" 
+  "7691" -> "7700" 
+  "7683" -> "7681" 
+  "7692" -> "7691" 
+  "7684" -> "7683" 
+  "7693" -> "7699" 
+  "7696" -> "7692" 
+  "7663" -> "7670" 
+  "7663" -> "7678" 
+  "7686" -> "7684" 
+  "7695" -> "7693" 
   "7697" -> "7696" 
-  "7689" -> "7688" 
-  "7698" -> "7704" 
-  "7701" -> "7697" 
+  "7664" -> "7663" 
   "7668" -> "7675" 
-  "7668" -> "7683" 
-  "7691" -> "7689" 
-  "7700" -> "7698" 
-  "7702" -> "7701" 
+  "7675" -> "7700" 
+  "7699" -> "7697" 
   "7669" -> "7668" 
-  "7673" -> "7680" 
-  "7680" -> "7705" 
-  "7704" -> "7702" 
-  "7674" -> "7673" 
-  "7675" -> "7677" 
-  "7677" -> "7674" 
-  "7660" -> "7665" 
+  "7670" -> "7672" 
+  "7672" -> "7669" 
+  "7655" -> "7660" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/148-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/148-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/148-cfg.dot	2023-06-07 19:35:28.317384341 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/148-cfg.dot	2023-06-07 19:35:34.837383769 +0330
@@ -1,49 +1,49 @@
-digraph "GetStaticCharField" {  
-"7712" [label = <(GET_STATIC_PRIMITIVE_FIELD,GET_STATIC_PRIMITIVE_FIELD(Char))<SUB>1727</SUB>> ]
-"7730" [label = <(soa,ScopedObjectAccess)<SUB>1727</SUB>> ]
-"7733" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1727</SUB>> ]
-"7740" [label = <(NotifyGetField,NotifyGetField(f, nullptr))<SUB>1727</SUB>> ]
-"7743" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Char);,GET_STATIC_PRIMITIVE_FIELD(Char);)<SUB>1727</SUB>> ]
-"7735" [label = <(GET_STATIC_PRIMITIVE_FIELD(Char),jni::DecodeArtField(fid))<SUB>1727</SUB>> ]
-"7744" [label = <(GET_STATIC_PRIMITIVE_FIELD(Char),f-&gt;GetChar(f-&gt;GetDeclaringClass()))<SUB>1727</SUB>> ]
-"7736" [label = <(&lt;operator&gt;.fieldAccess,GET_STATIC_PRIMITIVE_FIELD(Char))<SUB>1727</SUB>> ]
-"7745" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetChar)<SUB>1727</SUB>> ]
-"7748" [label = <(GET_STATIC_PRIMITIVE_FIELD(Char),f-&gt;GetDeclaringClass())<SUB>1727</SUB>> ]
-"7715" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1727</SUB>> ]
-"7738" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1727</SUB>> ]
-"7747" [label = <(FIELD_IDENTIFIER,GetChar,GetChar)<SUB>1727</SUB>> ]
-"7749" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1727</SUB>> ]
-"7716" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1727</SUB>> ]
-"7720" [label = <(GET_STATIC_PRIMITIVE_FIELD(Char),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1727</SUB>> ]
-"7727" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Char),GET_STATIC_PRIMITIVE_FIELD(Char))<SUB>1727</SUB>> ]
-"7751" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1727</SUB>> ]
-"7721" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1727</SUB>> ]
-"7722" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1727</SUB>> ]
-"7724" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1727</SUB>> ]
-"7707" [label = <(METHOD,GetStaticCharField)<SUB>1726</SUB>> ]
-"7752" [label = <(METHOD_RETURN,jchar)<SUB>1726</SUB>> ]
-  "7712" -> "7716" 
-  "7712" -> "7730" 
-  "7730" -> "7738" 
-  "7733" -> "7740" 
-  "7740" -> "7747" 
-  "7743" -> "7752" 
-  "7735" -> "7733" 
+digraph "GetStaticFloatField" {  
+"7707" [label = <(GET_STATIC_PRIMITIVE_FIELD,GET_STATIC_PRIMITIVE_FIELD(Float))<SUB>1665</SUB>> ]
+"7725" [label = <(soa,ScopedObjectAccess)<SUB>1665</SUB>> ]
+"7728" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1665</SUB>> ]
+"7735" [label = <(NotifyGetField,NotifyGetField(f, nullptr))<SUB>1665</SUB>> ]
+"7738" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Float);,GET_STATIC_PRIMITIVE_FIELD(Float);)<SUB>1665</SUB>> ]
+"7730" [label = <(GET_STATIC_PRIMITIVE_FIELD(Float),jni::DecodeArtField(fid))<SUB>1665</SUB>> ]
+"7739" [label = <(GET_STATIC_PRIMITIVE_FIELD(Float),f-&gt;GetFloat(f-&gt;GetDeclaringClass()))<SUB>1665</SUB>> ]
+"7731" [label = <(&lt;operator&gt;.fieldAccess,GET_STATIC_PRIMITIVE_FIELD(Float))<SUB>1665</SUB>> ]
+"7740" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetFloat)<SUB>1665</SUB>> ]
+"7743" [label = <(GET_STATIC_PRIMITIVE_FIELD(Float),f-&gt;GetDeclaringClass())<SUB>1665</SUB>> ]
+"7710" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1665</SUB>> ]
+"7733" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1665</SUB>> ]
+"7742" [label = <(FIELD_IDENTIFIER,GetFloat,GetFloat)<SUB>1665</SUB>> ]
+"7744" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1665</SUB>> ]
+"7711" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1665</SUB>> ]
+"7715" [label = <(GET_STATIC_PRIMITIVE_FIELD(Float),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1665</SUB>> ]
+"7722" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Float),GET_STATIC_PRIMITIVE_FIELD(Float))<SUB>1665</SUB>> ]
+"7746" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1665</SUB>> ]
+"7716" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1665</SUB>> ]
+"7717" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1665</SUB>> ]
+"7719" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1665</SUB>> ]
+"7702" [label = <(METHOD,GetStaticFloatField)<SUB>1664</SUB>> ]
+"7747" [label = <(METHOD_RETURN,jfloat)<SUB>1664</SUB>> ]
+  "7707" -> "7711" 
+  "7707" -> "7725" 
+  "7725" -> "7733" 
+  "7728" -> "7735" 
+  "7735" -> "7742" 
+  "7738" -> "7747" 
+  "7730" -> "7728" 
+  "7739" -> "7738" 
+  "7731" -> "7730" 
+  "7740" -> "7746" 
+  "7743" -> "7739" 
+  "7710" -> "7717" 
+  "7710" -> "7725" 
+  "7733" -> "7731" 
+  "7742" -> "7740" 
   "7744" -> "7743" 
-  "7736" -> "7735" 
-  "7745" -> "7751" 
-  "7748" -> "7744" 
+  "7711" -> "7710" 
   "7715" -> "7722" 
-  "7715" -> "7730" 
-  "7738" -> "7736" 
-  "7747" -> "7745" 
-  "7749" -> "7748" 
+  "7722" -> "7747" 
+  "7746" -> "7744" 
   "7716" -> "7715" 
-  "7720" -> "7727" 
-  "7727" -> "7752" 
-  "7751" -> "7749" 
-  "7721" -> "7720" 
-  "7722" -> "7724" 
-  "7724" -> "7721" 
-  "7707" -> "7712" 
+  "7717" -> "7719" 
+  "7719" -> "7716" 
+  "7702" -> "7707" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/149-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/149-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/149-cfg.dot	2023-06-07 19:35:28.317384341 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/149-cfg.dot	2023-06-07 19:35:34.837383769 +0330
@@ -1,49 +1,49 @@
-digraph "GetStaticShortField" {  
-"7759" [label = <(GET_STATIC_PRIMITIVE_FIELD,GET_STATIC_PRIMITIVE_FIELD(Short))<SUB>1731</SUB>> ]
-"7777" [label = <(soa,ScopedObjectAccess)<SUB>1731</SUB>> ]
-"7780" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1731</SUB>> ]
-"7787" [label = <(NotifyGetField,NotifyGetField(f, nullptr))<SUB>1731</SUB>> ]
-"7790" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Short);,GET_STATIC_PRIMITIVE_FIELD(Short);)<SUB>1731</SUB>> ]
-"7782" [label = <(GET_STATIC_PRIMITIVE_FIELD(Short),jni::DecodeArtField(fid))<SUB>1731</SUB>> ]
-"7791" [label = <(GET_STATIC_PRIMITIVE_FIELD(Short),f-&gt;GetShort(f-&gt;GetDeclaringClass()))<SUB>1731</SUB>> ]
-"7783" [label = <(&lt;operator&gt;.fieldAccess,GET_STATIC_PRIMITIVE_FIELD(Short))<SUB>1731</SUB>> ]
-"7792" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetShort)<SUB>1731</SUB>> ]
-"7795" [label = <(GET_STATIC_PRIMITIVE_FIELD(Short),f-&gt;GetDeclaringClass())<SUB>1731</SUB>> ]
-"7762" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1731</SUB>> ]
-"7785" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1731</SUB>> ]
-"7794" [label = <(FIELD_IDENTIFIER,GetShort,GetShort)<SUB>1731</SUB>> ]
-"7796" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1731</SUB>> ]
-"7763" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1731</SUB>> ]
-"7767" [label = <(GET_STATIC_PRIMITIVE_FIELD(Short),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1731</SUB>> ]
-"7774" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Short),GET_STATIC_PRIMITIVE_FIELD(Short))<SUB>1731</SUB>> ]
-"7798" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1731</SUB>> ]
-"7768" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1731</SUB>> ]
-"7769" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1731</SUB>> ]
-"7771" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1731</SUB>> ]
-"7754" [label = <(METHOD,GetStaticShortField)<SUB>1730</SUB>> ]
-"7799" [label = <(METHOD_RETURN,jshort)<SUB>1730</SUB>> ]
-  "7759" -> "7763" 
-  "7759" -> "7777" 
-  "7777" -> "7785" 
-  "7780" -> "7787" 
-  "7787" -> "7794" 
-  "7790" -> "7799" 
-  "7782" -> "7780" 
+digraph "GetStaticDoubleField" {  
+"7754" [label = <(GET_STATIC_PRIMITIVE_FIELD,GET_STATIC_PRIMITIVE_FIELD(Double))<SUB>1669</SUB>> ]
+"7772" [label = <(soa,ScopedObjectAccess)<SUB>1669</SUB>> ]
+"7775" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1669</SUB>> ]
+"7782" [label = <(NotifyGetField,NotifyGetField(f, nullptr))<SUB>1669</SUB>> ]
+"7785" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Double);,GET_STATIC_PRIMITIVE_FIELD(Double);)<SUB>1669</SUB>> ]
+"7777" [label = <(GET_STATIC_PRIMITIVE_FIELD(Double),jni::DecodeArtField(fid))<SUB>1669</SUB>> ]
+"7786" [label = <(GET_STATIC_PRIMITIVE_FIELD(Double),f-&gt;GetDouble(f-&gt;GetDeclaringClass()))<SUB>1669</SUB>> ]
+"7778" [label = <(&lt;operator&gt;.fieldAccess,GET_STATIC_PRIMITIVE_FIELD(Double))<SUB>1669</SUB>> ]
+"7787" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDouble)<SUB>1669</SUB>> ]
+"7790" [label = <(GET_STATIC_PRIMITIVE_FIELD(Double),f-&gt;GetDeclaringClass())<SUB>1669</SUB>> ]
+"7757" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1669</SUB>> ]
+"7780" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1669</SUB>> ]
+"7789" [label = <(FIELD_IDENTIFIER,GetDouble,GetDouble)<SUB>1669</SUB>> ]
+"7791" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1669</SUB>> ]
+"7758" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1669</SUB>> ]
+"7762" [label = <(GET_STATIC_PRIMITIVE_FIELD(Double),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1669</SUB>> ]
+"7769" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Double),GET_STATIC_PRIMITIVE_FIELD(Double))<SUB>1669</SUB>> ]
+"7793" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1669</SUB>> ]
+"7763" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1669</SUB>> ]
+"7764" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1669</SUB>> ]
+"7766" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1669</SUB>> ]
+"7749" [label = <(METHOD,GetStaticDoubleField)<SUB>1668</SUB>> ]
+"7794" [label = <(METHOD_RETURN,jdouble)<SUB>1668</SUB>> ]
+  "7754" -> "7758" 
+  "7754" -> "7772" 
+  "7772" -> "7780" 
+  "7775" -> "7782" 
+  "7782" -> "7789" 
+  "7785" -> "7794" 
+  "7777" -> "7775" 
+  "7786" -> "7785" 
+  "7778" -> "7777" 
+  "7787" -> "7793" 
+  "7790" -> "7786" 
+  "7757" -> "7764" 
+  "7757" -> "7772" 
+  "7780" -> "7778" 
+  "7789" -> "7787" 
   "7791" -> "7790" 
-  "7783" -> "7782" 
-  "7792" -> "7798" 
-  "7795" -> "7791" 
+  "7758" -> "7757" 
   "7762" -> "7769" 
-  "7762" -> "7777" 
-  "7785" -> "7783" 
-  "7794" -> "7792" 
-  "7796" -> "7795" 
+  "7769" -> "7794" 
+  "7793" -> "7791" 
   "7763" -> "7762" 
-  "7767" -> "7774" 
-  "7774" -> "7799" 
-  "7798" -> "7796" 
-  "7768" -> "7767" 
-  "7769" -> "7771" 
-  "7771" -> "7768" 
-  "7754" -> "7759" 
+  "7764" -> "7766" 
+  "7766" -> "7763" 
+  "7749" -> "7754" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/15-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/15-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/15-cfg.dot	2023-06-07 19:35:28.217384348 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/15-cfg.dot	2023-06-07 19:35:34.747383777 +0330
@@ -1,39 +1,48 @@
-digraph "BuildCache" {  
-"362" [label = <(DCHECK,DCHECK(!HasCache()))<SUB>222</SUB>> ]
-"366" [label = <(&lt;operator&gt;.assignment,builder_ = &amp;builder)<SUB>224</SUB>> ]
-"370" [label = <(&lt;operator&gt;.assignment,libjavacore_loaded_ = false)<SUB>225</SUB>> ]
-"373" [label = <(&lt;operator&gt;.assignment,libnativehelper_loaded_ = false)<SUB>226</SUB>> ]
-"376" [label = <(&lt;operator&gt;.assignment,libopenjdk_loaded_ = false)<SUB>227</SUB>> ]
-"379" [label = <(dl_iterate_phdr,dl_iterate_phdr(VisitElfInfo, this))<SUB>230</SUB>> ]
-"382" [label = <(&lt;operator&gt;.assignment,memory_type_table_ = builder_-&gt;Build())<SUB>231</SUB>> ]
-"388" [label = <(CHECK,CHECK(libjavacore_loaded_))<SUB>234</SUB>> ]
-"390" [label = <(CHECK,CHECK(libnativehelper_loaded_))<SUB>235</SUB>> ]
-"392" [label = <(CHECK,CHECK(libopenjdk_loaded_))<SUB>236</SUB>> ]
-"394" [label = <(&lt;operator&gt;.assignment,builder_ = nullptr)<SUB>237</SUB>> ]
-"363" [label = <(&lt;operator&gt;.logicalNot,!HasCache())<SUB>222</SUB>> ]
-"368" [label = <(&lt;operator&gt;.addressOf,&amp;builder)<SUB>224</SUB>> ]
-"384" [label = <(Build,builder_-&gt;Build())<SUB>231</SUB>> ]
-"364" [label = <(HasCache,HasCache())<SUB>222</SUB>> ]
-"385" [label = <(&lt;operator&gt;.indirectFieldAccess,builder_-&gt;Build)<SUB>231</SUB>> ]
-"387" [label = <(FIELD_IDENTIFIER,Build,Build)<SUB>231</SUB>> ]
-"360" [label = <(METHOD,BuildCache)<SUB>221</SUB>> ]
-"397" [label = <(METHOD_RETURN,void)<SUB>221</SUB>> ]
-  "362" -> "368" 
-  "366" -> "370" 
-  "370" -> "373" 
-  "373" -> "376" 
-  "376" -> "379" 
-  "379" -> "387" 
-  "382" -> "388" 
-  "388" -> "390" 
-  "390" -> "392" 
-  "392" -> "394" 
-  "394" -> "397" 
-  "363" -> "362" 
-  "368" -> "366" 
-  "384" -> "382" 
-  "364" -> "363" 
-  "385" -> "384" 
-  "387" -> "385" 
-  "360" -> "364" 
+digraph "GetKind" {  
+"251" [label = <(&lt;operator&gt;.assignment,runtime_method = reinterpret_cast&lt;uintptr_t&gt;(art::GetJniNativeInterface))<SUB>211</SUB>> ]
+"271" [label = <(RETURN,return art::LocationIsOnApex(so_name) ? SharedObjectKind::kApexModule\012 : SharedObjectKind::kOther;,return art::LocationIsOnApex(so_name) ? SharedObjectKind::kApexModule\012 : SharedObjectKind::kOther;)<SUB>215</SUB>> ]
+"253" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;uintptr_t&gt;(art::GetJniNativeInterface))<SUB>211</SUB>> ]
+"259" [label = <(&lt;operator&gt;.logicalAnd,runtime_method &gt;= start &amp;&amp; runtime_method &lt; limit)<SUB>212</SUB>> ]
+"272" [label = <(&lt;operator&gt;.conditional,art::LocationIsOnApex(so_name) ? SharedObjectKind::kApexModule\012 : SharedObjectKind::kOther)<SUB>215</SUB>> ]
+"254" [label = <(UNKNOWN,uintptr_t,uintptr_t)<SUB>211</SUB>> ]
+"255" [label = <(&lt;operator&gt;.fieldAccess,art::GetJniNativeInterface)<SUB>211</SUB>> ]
+"260" [label = <(&lt;operator&gt;.greaterEqualsThan,runtime_method &gt;= start)<SUB>212</SUB>> ]
+"263" [label = <(&lt;operator&gt;.lessThan,runtime_method &lt; limit)<SUB>212</SUB>> ]
+"267" [label = <(RETURN,return SharedObjectKind::kRuntime;,return SharedObjectKind::kRuntime;)<SUB>213</SUB>> ]
+"273" [label = <(art::LocationIsOnApex,art::LocationIsOnApex(so_name))<SUB>215</SUB>> ]
+"278" [label = <(&lt;operator&gt;.fieldAccess,SharedObjectKind::kApexModule)<SUB>215</SUB>> ]
+"281" [label = <(&lt;operator&gt;.fieldAccess,SharedObjectKind::kOther)<SUB>216</SUB>> ]
+"257" [label = <(FIELD_IDENTIFIER,GetJniNativeInterface,GetJniNativeInterface)<SUB>211</SUB>> ]
+"268" [label = <(&lt;operator&gt;.fieldAccess,SharedObjectKind::kRuntime)<SUB>213</SUB>> ]
+"274" [label = <(&lt;operator&gt;.fieldAccess,art::LocationIsOnApex)<SUB>215</SUB>> ]
+"280" [label = <(FIELD_IDENTIFIER,kApexModule,kApexModule)<SUB>215</SUB>> ]
+"283" [label = <(FIELD_IDENTIFIER,kOther,kOther)<SUB>216</SUB>> ]
+"270" [label = <(FIELD_IDENTIFIER,kRuntime,kRuntime)<SUB>213</SUB>> ]
+"276" [label = <(FIELD_IDENTIFIER,LocationIsOnApex,LocationIsOnApex)<SUB>215</SUB>> ]
+"245" [label = <(METHOD,GetKind)<SUB>210</SUB>> ]
+"284" [label = <(METHOD_RETURN,SharedObjectKind)<SUB>210</SUB>> ]
+  "251" -> "260" 
+  "271" -> "284" 
+  "253" -> "251" 
+  "259" -> "270" 
+  "259" -> "276" 
+  "272" -> "271" 
+  "254" -> "257" 
+  "255" -> "253" 
+  "260" -> "259" 
+  "260" -> "263" 
+  "263" -> "259" 
+  "267" -> "284" 
+  "273" -> "280" 
+  "273" -> "283" 
+  "278" -> "272" 
+  "281" -> "272" 
+  "257" -> "255" 
+  "268" -> "267" 
+  "274" -> "273" 
+  "280" -> "278" 
+  "283" -> "281" 
+  "270" -> "268" 
+  "276" -> "274" 
+  "245" -> "254" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/150-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/150-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/150-cfg.dot	2023-06-07 19:35:28.317384341 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/150-cfg.dot	2023-06-07 19:35:34.837383769 +0330
@@ -1,49 +1,90 @@
-digraph "GetStaticIntField" {  
-"7806" [label = <(GET_STATIC_PRIMITIVE_FIELD,GET_STATIC_PRIMITIVE_FIELD(Int))<SUB>1735</SUB>> ]
-"7824" [label = <(soa,ScopedObjectAccess)<SUB>1735</SUB>> ]
-"7827" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1735</SUB>> ]
-"7834" [label = <(NotifyGetField,NotifyGetField(f, nullptr))<SUB>1735</SUB>> ]
-"7837" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Int);,GET_STATIC_PRIMITIVE_FIELD(Int);)<SUB>1735</SUB>> ]
-"7829" [label = <(GET_STATIC_PRIMITIVE_FIELD(Int),jni::DecodeArtField(fid))<SUB>1735</SUB>> ]
-"7838" [label = <(GET_STATIC_PRIMITIVE_FIELD(Int),f-&gt;GetInt(f-&gt;GetDeclaringClass()))<SUB>1735</SUB>> ]
-"7830" [label = <(&lt;operator&gt;.fieldAccess,GET_STATIC_PRIMITIVE_FIELD(Int))<SUB>1735</SUB>> ]
-"7839" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetInt)<SUB>1735</SUB>> ]
-"7842" [label = <(GET_STATIC_PRIMITIVE_FIELD(Int),f-&gt;GetDeclaringClass())<SUB>1735</SUB>> ]
-"7809" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1735</SUB>> ]
-"7832" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1735</SUB>> ]
-"7841" [label = <(FIELD_IDENTIFIER,GetInt,GetInt)<SUB>1735</SUB>> ]
-"7843" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1735</SUB>> ]
-"7810" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1735</SUB>> ]
-"7814" [label = <(GET_STATIC_PRIMITIVE_FIELD(Int),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1735</SUB>> ]
-"7821" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Int),GET_STATIC_PRIMITIVE_FIELD(Int))<SUB>1735</SUB>> ]
-"7845" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1735</SUB>> ]
-"7815" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1735</SUB>> ]
-"7816" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1735</SUB>> ]
-"7818" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1735</SUB>> ]
-"7801" [label = <(METHOD,GetStaticIntField)<SUB>1734</SUB>> ]
-"7846" [label = <(METHOD_RETURN,jint)<SUB>1734</SUB>> ]
-  "7806" -> "7810" 
-  "7806" -> "7824" 
-  "7824" -> "7832" 
-  "7827" -> "7834" 
-  "7834" -> "7841" 
-  "7837" -> "7846" 
-  "7829" -> "7827" 
-  "7838" -> "7837" 
-  "7830" -> "7829" 
-  "7839" -> "7845" 
-  "7842" -> "7838" 
-  "7809" -> "7816" 
-  "7809" -> "7824" 
-  "7832" -> "7830" 
-  "7841" -> "7839" 
-  "7843" -> "7842" 
-  "7810" -> "7809" 
-  "7814" -> "7821" 
-  "7821" -> "7846" 
-  "7845" -> "7843" 
-  "7815" -> "7814" 
-  "7816" -> "7818" 
-  "7818" -> "7815" 
-  "7801" -> "7806" 
+digraph "SetBooleanField" {  
+"7802" [label = <(SET_PRIMITIVE_FIELD,SET_PRIMITIVE_FIELD(Boolean, obj, v))<SUB>1673</SUB>> ]
+"7834" [label = <(soa,ScopedObjectAccess)<SUB>1673</SUB>> ]
+"7837" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1673</SUB>> ]
+"7844" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, obj, JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Boolean, obj, v)&gt;(v)))<SUB>1673</SUB>> ]
+"7852" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1673</SUB>> ]
+"7869" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetBoolean &lt; false &gt; (o, v))<SUB>1673</SUB>> ]
+"7820" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1673</SUB>> ]
+"7839" [label = <(SET_PRIMITIVE_FIELD(Boolean, obj, v),jni::DecodeArtField(fid))<SUB>1673</SUB>> ]
+"7847" [label = <(SET_PRIMITIVE_FIELD(Boolean, obj, v),JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Boolean, obj, v)&gt;(v))<SUB>1673</SUB>> ]
+"7853" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1673</SUB>> ]
+"7860" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1673</SUB>> ]
+"7870" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetBoolean &lt; false)<SUB>1673</SUB>> ]
+"7875" [label = <(&lt;operator&gt;.bracketedPrimary,(o, v))<SUB>1673</SUB>> ]
+"7821" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1673</SUB>> ]
+"7825" [label = <(SET_PRIMITIVE_FIELD(Boolean, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1673</SUB>> ]
+"7832" [label = <(RETURN,SET_PRIMITIVE_FIELD(Boolean, obj, v),SET_PRIMITIVE_FIELD(Boolean, obj, v))<SUB>1673</SUB>> ]
+"7840" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Boolean, obj, v))<SUB>1673</SUB>> ]
+"7848" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Boolean, obj, v))<SUB>1673</SUB>> ]
+"7854" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1673</SUB>> ]
+"7861" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1673</SUB>> ]
+"7871" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetBoolean)<SUB>1673</SUB>> ]
+"7876" [label = <(&lt;operator&gt;.expressionList,o, v)<SUB>1673</SUB>> ]
+"7806" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1673</SUB>> ]
+"7826" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1673</SUB>> ]
+"7842" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1673</SUB>> ]
+"7850" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Boolean, obj, v)&gt;,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Boolean, obj, v)&gt;)<SUB>1673</SUB>> ]
+"7856" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Boolean, obj, v))<SUB>1673</SUB>> ]
+"7862" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1673</SUB>> ]
+"7865" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Boolean, obj, v))<SUB>1673</SUB>> ]
+"7873" [label = <(FIELD_IDENTIFIER,SetBoolean,SetBoolean)<SUB>1673</SUB>> ]
+"7807" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1673</SUB>> ]
+"7811" [label = <(SET_PRIMITIVE_FIELD(Boolean, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1673</SUB>> ]
+"7818" [label = <(RETURN,SET_PRIMITIVE_FIELD(Boolean, obj, v),SET_PRIMITIVE_FIELD(Boolean, obj, v))<SUB>1673</SUB>> ]
+"7827" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1673</SUB>> ]
+"7829" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1673</SUB>> ]
+"7858" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1673</SUB>> ]
+"7864" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1673</SUB>> ]
+"7867" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1673</SUB>> ]
+"7812" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1673</SUB>> ]
+"7813" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1673</SUB>> ]
+"7815" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1673</SUB>> ]
+"7796" [label = <(METHOD,SetBooleanField)<SUB>1672</SUB>> ]
+"7879" [label = <(METHOD_RETURN,void)<SUB>1672</SUB>> ]
+  "7802" -> "7807" 
+  "7802" -> "7821" 
+  "7834" -> "7842" 
+  "7837" -> "7850" 
+  "7844" -> "7858" 
+  "7852" -> "7873" 
+  "7869" -> "7879" 
+  "7820" -> "7827" 
+  "7820" -> "7834" 
+  "7839" -> "7837" 
+  "7847" -> "7844" 
+  "7853" -> "7864" 
+  "7860" -> "7852" 
+  "7870" -> "7876" 
+  "7875" -> "7869" 
+  "7821" -> "7820" 
+  "7825" -> "7832" 
+  "7832" -> "7879" 
+  "7840" -> "7839" 
+  "7848" -> "7847" 
+  "7854" -> "7853" 
+  "7861" -> "7860" 
+  "7871" -> "7870" 
+  "7876" -> "7875" 
+  "7806" -> "7813" 
+  "7806" -> "7821" 
+  "7826" -> "7825" 
+  "7842" -> "7840" 
+  "7850" -> "7848" 
+  "7856" -> "7854" 
+  "7862" -> "7867" 
+  "7865" -> "7861" 
+  "7873" -> "7871" 
+  "7807" -> "7806" 
+  "7811" -> "7818" 
+  "7818" -> "7879" 
+  "7827" -> "7829" 
+  "7829" -> "7826" 
+  "7858" -> "7856" 
+  "7864" -> "7862" 
+  "7867" -> "7865" 
+  "7812" -> "7811" 
+  "7813" -> "7815" 
+  "7815" -> "7812" 
+  "7796" -> "7802" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/151-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/151-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/151-cfg.dot	2023-06-07 19:35:28.317384341 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/151-cfg.dot	2023-06-07 19:35:34.837383769 +0330
@@ -1,49 +1,90 @@
-digraph "GetStaticLongField" {  
-"7853" [label = <(GET_STATIC_PRIMITIVE_FIELD,GET_STATIC_PRIMITIVE_FIELD(Long))<SUB>1739</SUB>> ]
-"7871" [label = <(soa,ScopedObjectAccess)<SUB>1739</SUB>> ]
-"7874" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1739</SUB>> ]
-"7881" [label = <(NotifyGetField,NotifyGetField(f, nullptr))<SUB>1739</SUB>> ]
-"7884" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Long);,GET_STATIC_PRIMITIVE_FIELD(Long);)<SUB>1739</SUB>> ]
-"7876" [label = <(GET_STATIC_PRIMITIVE_FIELD(Long),jni::DecodeArtField(fid))<SUB>1739</SUB>> ]
-"7885" [label = <(GET_STATIC_PRIMITIVE_FIELD(Long),f-&gt;GetLong(f-&gt;GetDeclaringClass()))<SUB>1739</SUB>> ]
-"7877" [label = <(&lt;operator&gt;.fieldAccess,GET_STATIC_PRIMITIVE_FIELD(Long))<SUB>1739</SUB>> ]
-"7886" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetLong)<SUB>1739</SUB>> ]
-"7889" [label = <(GET_STATIC_PRIMITIVE_FIELD(Long),f-&gt;GetDeclaringClass())<SUB>1739</SUB>> ]
-"7856" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1739</SUB>> ]
-"7879" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1739</SUB>> ]
-"7888" [label = <(FIELD_IDENTIFIER,GetLong,GetLong)<SUB>1739</SUB>> ]
-"7890" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1739</SUB>> ]
-"7857" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1739</SUB>> ]
-"7861" [label = <(GET_STATIC_PRIMITIVE_FIELD(Long),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1739</SUB>> ]
-"7868" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Long),GET_STATIC_PRIMITIVE_FIELD(Long))<SUB>1739</SUB>> ]
-"7892" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1739</SUB>> ]
-"7862" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1739</SUB>> ]
-"7863" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1739</SUB>> ]
-"7865" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1739</SUB>> ]
-"7848" [label = <(METHOD,GetStaticLongField)<SUB>1738</SUB>> ]
-"7893" [label = <(METHOD_RETURN,jlong)<SUB>1738</SUB>> ]
-  "7853" -> "7857" 
-  "7853" -> "7871" 
-  "7871" -> "7879" 
-  "7874" -> "7881" 
-  "7881" -> "7888" 
-  "7884" -> "7893" 
-  "7876" -> "7874" 
-  "7885" -> "7884" 
-  "7877" -> "7876" 
-  "7886" -> "7892" 
-  "7889" -> "7885" 
-  "7856" -> "7863" 
-  "7856" -> "7871" 
-  "7879" -> "7877" 
-  "7888" -> "7886" 
-  "7890" -> "7889" 
-  "7857" -> "7856" 
-  "7861" -> "7868" 
-  "7868" -> "7893" 
-  "7892" -> "7890" 
-  "7862" -> "7861" 
-  "7863" -> "7865" 
-  "7865" -> "7862" 
-  "7848" -> "7853" 
+digraph "SetByteField" {  
+"7887" [label = <(SET_PRIMITIVE_FIELD,SET_PRIMITIVE_FIELD(Byte, obj, v))<SUB>1677</SUB>> ]
+"7919" [label = <(soa,ScopedObjectAccess)<SUB>1677</SUB>> ]
+"7922" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1677</SUB>> ]
+"7929" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, obj, JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Byte, obj, v)&gt;(v)))<SUB>1677</SUB>> ]
+"7937" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1677</SUB>> ]
+"7954" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetByte &lt; false &gt; (o, v))<SUB>1677</SUB>> ]
+"7905" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1677</SUB>> ]
+"7924" [label = <(SET_PRIMITIVE_FIELD(Byte, obj, v),jni::DecodeArtField(fid))<SUB>1677</SUB>> ]
+"7932" [label = <(SET_PRIMITIVE_FIELD(Byte, obj, v),JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Byte, obj, v)&gt;(v))<SUB>1677</SUB>> ]
+"7938" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1677</SUB>> ]
+"7945" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1677</SUB>> ]
+"7955" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetByte &lt; false)<SUB>1677</SUB>> ]
+"7960" [label = <(&lt;operator&gt;.bracketedPrimary,(o, v))<SUB>1677</SUB>> ]
+"7906" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1677</SUB>> ]
+"7910" [label = <(SET_PRIMITIVE_FIELD(Byte, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1677</SUB>> ]
+"7917" [label = <(RETURN,SET_PRIMITIVE_FIELD(Byte, obj, v),SET_PRIMITIVE_FIELD(Byte, obj, v))<SUB>1677</SUB>> ]
+"7925" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Byte, obj, v))<SUB>1677</SUB>> ]
+"7933" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Byte, obj, v))<SUB>1677</SUB>> ]
+"7939" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1677</SUB>> ]
+"7946" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1677</SUB>> ]
+"7956" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetByte)<SUB>1677</SUB>> ]
+"7961" [label = <(&lt;operator&gt;.expressionList,o, v)<SUB>1677</SUB>> ]
+"7891" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1677</SUB>> ]
+"7911" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1677</SUB>> ]
+"7927" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1677</SUB>> ]
+"7935" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Byte, obj, v)&gt;,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Byte, obj, v)&gt;)<SUB>1677</SUB>> ]
+"7941" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Byte, obj, v))<SUB>1677</SUB>> ]
+"7947" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1677</SUB>> ]
+"7950" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Byte, obj, v))<SUB>1677</SUB>> ]
+"7958" [label = <(FIELD_IDENTIFIER,SetByte,SetByte)<SUB>1677</SUB>> ]
+"7892" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1677</SUB>> ]
+"7896" [label = <(SET_PRIMITIVE_FIELD(Byte, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1677</SUB>> ]
+"7903" [label = <(RETURN,SET_PRIMITIVE_FIELD(Byte, obj, v),SET_PRIMITIVE_FIELD(Byte, obj, v))<SUB>1677</SUB>> ]
+"7912" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1677</SUB>> ]
+"7914" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1677</SUB>> ]
+"7943" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1677</SUB>> ]
+"7949" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1677</SUB>> ]
+"7952" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1677</SUB>> ]
+"7897" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1677</SUB>> ]
+"7898" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1677</SUB>> ]
+"7900" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1677</SUB>> ]
+"7881" [label = <(METHOD,SetByteField)<SUB>1676</SUB>> ]
+"7964" [label = <(METHOD_RETURN,void)<SUB>1676</SUB>> ]
+  "7887" -> "7892" 
+  "7887" -> "7906" 
+  "7919" -> "7927" 
+  "7922" -> "7935" 
+  "7929" -> "7943" 
+  "7937" -> "7958" 
+  "7954" -> "7964" 
+  "7905" -> "7912" 
+  "7905" -> "7919" 
+  "7924" -> "7922" 
+  "7932" -> "7929" 
+  "7938" -> "7949" 
+  "7945" -> "7937" 
+  "7955" -> "7961" 
+  "7960" -> "7954" 
+  "7906" -> "7905" 
+  "7910" -> "7917" 
+  "7917" -> "7964" 
+  "7925" -> "7924" 
+  "7933" -> "7932" 
+  "7939" -> "7938" 
+  "7946" -> "7945" 
+  "7956" -> "7955" 
+  "7961" -> "7960" 
+  "7891" -> "7898" 
+  "7891" -> "7906" 
+  "7911" -> "7910" 
+  "7927" -> "7925" 
+  "7935" -> "7933" 
+  "7941" -> "7939" 
+  "7947" -> "7952" 
+  "7950" -> "7946" 
+  "7958" -> "7956" 
+  "7892" -> "7891" 
+  "7896" -> "7903" 
+  "7903" -> "7964" 
+  "7912" -> "7914" 
+  "7914" -> "7911" 
+  "7943" -> "7941" 
+  "7949" -> "7947" 
+  "7952" -> "7950" 
+  "7897" -> "7896" 
+  "7898" -> "7900" 
+  "7900" -> "7897" 
+  "7881" -> "7887" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/152-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/152-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/152-cfg.dot	2023-06-07 19:35:28.317384341 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/152-cfg.dot	2023-06-07 19:35:34.847383770 +0330
@@ -1,49 +1,90 @@
-digraph "GetStaticFloatField" {  
-"7900" [label = <(GET_STATIC_PRIMITIVE_FIELD,GET_STATIC_PRIMITIVE_FIELD(Float))<SUB>1743</SUB>> ]
-"7918" [label = <(soa,ScopedObjectAccess)<SUB>1743</SUB>> ]
-"7921" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1743</SUB>> ]
-"7928" [label = <(NotifyGetField,NotifyGetField(f, nullptr))<SUB>1743</SUB>> ]
-"7931" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Float);,GET_STATIC_PRIMITIVE_FIELD(Float);)<SUB>1743</SUB>> ]
-"7923" [label = <(GET_STATIC_PRIMITIVE_FIELD(Float),jni::DecodeArtField(fid))<SUB>1743</SUB>> ]
-"7932" [label = <(GET_STATIC_PRIMITIVE_FIELD(Float),f-&gt;GetFloat(f-&gt;GetDeclaringClass()))<SUB>1743</SUB>> ]
-"7924" [label = <(&lt;operator&gt;.fieldAccess,GET_STATIC_PRIMITIVE_FIELD(Float))<SUB>1743</SUB>> ]
-"7933" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetFloat)<SUB>1743</SUB>> ]
-"7936" [label = <(GET_STATIC_PRIMITIVE_FIELD(Float),f-&gt;GetDeclaringClass())<SUB>1743</SUB>> ]
-"7903" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1743</SUB>> ]
-"7926" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1743</SUB>> ]
-"7935" [label = <(FIELD_IDENTIFIER,GetFloat,GetFloat)<SUB>1743</SUB>> ]
-"7937" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1743</SUB>> ]
-"7904" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1743</SUB>> ]
-"7908" [label = <(GET_STATIC_PRIMITIVE_FIELD(Float),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1743</SUB>> ]
-"7915" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Float),GET_STATIC_PRIMITIVE_FIELD(Float))<SUB>1743</SUB>> ]
-"7939" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1743</SUB>> ]
-"7909" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1743</SUB>> ]
-"7910" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1743</SUB>> ]
-"7912" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1743</SUB>> ]
-"7895" [label = <(METHOD,GetStaticFloatField)<SUB>1742</SUB>> ]
-"7940" [label = <(METHOD_RETURN,jfloat)<SUB>1742</SUB>> ]
-  "7900" -> "7904" 
-  "7900" -> "7918" 
-  "7918" -> "7926" 
-  "7921" -> "7928" 
-  "7928" -> "7935" 
-  "7931" -> "7940" 
-  "7923" -> "7921" 
-  "7932" -> "7931" 
-  "7924" -> "7923" 
-  "7933" -> "7939" 
-  "7936" -> "7932" 
-  "7903" -> "7910" 
-  "7903" -> "7918" 
-  "7926" -> "7924" 
-  "7935" -> "7933" 
-  "7937" -> "7936" 
-  "7904" -> "7903" 
-  "7908" -> "7915" 
-  "7915" -> "7940" 
-  "7939" -> "7937" 
-  "7909" -> "7908" 
-  "7910" -> "7912" 
-  "7912" -> "7909" 
-  "7895" -> "7900" 
+digraph "SetCharField" {  
+"7972" [label = <(SET_PRIMITIVE_FIELD,SET_PRIMITIVE_FIELD(Char, obj, v))<SUB>1681</SUB>> ]
+"8004" [label = <(soa,ScopedObjectAccess)<SUB>1681</SUB>> ]
+"8007" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1681</SUB>> ]
+"8014" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, obj, JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Char, obj, v)&gt;(v)))<SUB>1681</SUB>> ]
+"8022" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1681</SUB>> ]
+"8039" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetChar &lt; false &gt; (o, v))<SUB>1681</SUB>> ]
+"7990" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1681</SUB>> ]
+"8009" [label = <(SET_PRIMITIVE_FIELD(Char, obj, v),jni::DecodeArtField(fid))<SUB>1681</SUB>> ]
+"8017" [label = <(SET_PRIMITIVE_FIELD(Char, obj, v),JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Char, obj, v)&gt;(v))<SUB>1681</SUB>> ]
+"8023" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1681</SUB>> ]
+"8030" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1681</SUB>> ]
+"8040" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetChar &lt; false)<SUB>1681</SUB>> ]
+"8045" [label = <(&lt;operator&gt;.bracketedPrimary,(o, v))<SUB>1681</SUB>> ]
+"7991" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1681</SUB>> ]
+"7995" [label = <(SET_PRIMITIVE_FIELD(Char, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1681</SUB>> ]
+"8002" [label = <(RETURN,SET_PRIMITIVE_FIELD(Char, obj, v),SET_PRIMITIVE_FIELD(Char, obj, v))<SUB>1681</SUB>> ]
+"8010" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Char, obj, v))<SUB>1681</SUB>> ]
+"8018" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Char, obj, v))<SUB>1681</SUB>> ]
+"8024" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1681</SUB>> ]
+"8031" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1681</SUB>> ]
+"8041" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetChar)<SUB>1681</SUB>> ]
+"8046" [label = <(&lt;operator&gt;.expressionList,o, v)<SUB>1681</SUB>> ]
+"7976" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1681</SUB>> ]
+"7996" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1681</SUB>> ]
+"8012" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1681</SUB>> ]
+"8020" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Char, obj, v)&gt;,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Char, obj, v)&gt;)<SUB>1681</SUB>> ]
+"8026" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Char, obj, v))<SUB>1681</SUB>> ]
+"8032" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1681</SUB>> ]
+"8035" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Char, obj, v))<SUB>1681</SUB>> ]
+"8043" [label = <(FIELD_IDENTIFIER,SetChar,SetChar)<SUB>1681</SUB>> ]
+"7977" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1681</SUB>> ]
+"7981" [label = <(SET_PRIMITIVE_FIELD(Char, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1681</SUB>> ]
+"7988" [label = <(RETURN,SET_PRIMITIVE_FIELD(Char, obj, v),SET_PRIMITIVE_FIELD(Char, obj, v))<SUB>1681</SUB>> ]
+"7997" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1681</SUB>> ]
+"7999" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1681</SUB>> ]
+"8028" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1681</SUB>> ]
+"8034" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1681</SUB>> ]
+"8037" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1681</SUB>> ]
+"7982" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1681</SUB>> ]
+"7983" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1681</SUB>> ]
+"7985" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1681</SUB>> ]
+"7966" [label = <(METHOD,SetCharField)<SUB>1680</SUB>> ]
+"8049" [label = <(METHOD_RETURN,void)<SUB>1680</SUB>> ]
+  "7972" -> "7977" 
+  "7972" -> "7991" 
+  "8004" -> "8012" 
+  "8007" -> "8020" 
+  "8014" -> "8028" 
+  "8022" -> "8043" 
+  "8039" -> "8049" 
+  "7990" -> "7997" 
+  "7990" -> "8004" 
+  "8009" -> "8007" 
+  "8017" -> "8014" 
+  "8023" -> "8034" 
+  "8030" -> "8022" 
+  "8040" -> "8046" 
+  "8045" -> "8039" 
+  "7991" -> "7990" 
+  "7995" -> "8002" 
+  "8002" -> "8049" 
+  "8010" -> "8009" 
+  "8018" -> "8017" 
+  "8024" -> "8023" 
+  "8031" -> "8030" 
+  "8041" -> "8040" 
+  "8046" -> "8045" 
+  "7976" -> "7983" 
+  "7976" -> "7991" 
+  "7996" -> "7995" 
+  "8012" -> "8010" 
+  "8020" -> "8018" 
+  "8026" -> "8024" 
+  "8032" -> "8037" 
+  "8035" -> "8031" 
+  "8043" -> "8041" 
+  "7977" -> "7976" 
+  "7981" -> "7988" 
+  "7988" -> "8049" 
+  "7997" -> "7999" 
+  "7999" -> "7996" 
+  "8028" -> "8026" 
+  "8034" -> "8032" 
+  "8037" -> "8035" 
+  "7982" -> "7981" 
+  "7983" -> "7985" 
+  "7985" -> "7982" 
+  "7966" -> "7972" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/153-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/153-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/153-cfg.dot	2023-06-07 19:35:28.317384341 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/153-cfg.dot	2023-06-07 19:35:34.847383770 +0330
@@ -1,49 +1,90 @@
-digraph "GetStaticDoubleField" {  
-"7947" [label = <(GET_STATIC_PRIMITIVE_FIELD,GET_STATIC_PRIMITIVE_FIELD(Double))<SUB>1747</SUB>> ]
-"7965" [label = <(soa,ScopedObjectAccess)<SUB>1747</SUB>> ]
-"7968" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1747</SUB>> ]
-"7975" [label = <(NotifyGetField,NotifyGetField(f, nullptr))<SUB>1747</SUB>> ]
-"7978" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Double);,GET_STATIC_PRIMITIVE_FIELD(Double);)<SUB>1747</SUB>> ]
-"7970" [label = <(GET_STATIC_PRIMITIVE_FIELD(Double),jni::DecodeArtField(fid))<SUB>1747</SUB>> ]
-"7979" [label = <(GET_STATIC_PRIMITIVE_FIELD(Double),f-&gt;GetDouble(f-&gt;GetDeclaringClass()))<SUB>1747</SUB>> ]
-"7971" [label = <(&lt;operator&gt;.fieldAccess,GET_STATIC_PRIMITIVE_FIELD(Double))<SUB>1747</SUB>> ]
-"7980" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDouble)<SUB>1747</SUB>> ]
-"7983" [label = <(GET_STATIC_PRIMITIVE_FIELD(Double),f-&gt;GetDeclaringClass())<SUB>1747</SUB>> ]
-"7950" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1747</SUB>> ]
-"7973" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1747</SUB>> ]
-"7982" [label = <(FIELD_IDENTIFIER,GetDouble,GetDouble)<SUB>1747</SUB>> ]
-"7984" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1747</SUB>> ]
-"7951" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1747</SUB>> ]
-"7955" [label = <(GET_STATIC_PRIMITIVE_FIELD(Double),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1747</SUB>> ]
-"7962" [label = <(RETURN,GET_STATIC_PRIMITIVE_FIELD(Double),GET_STATIC_PRIMITIVE_FIELD(Double))<SUB>1747</SUB>> ]
-"7986" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1747</SUB>> ]
-"7956" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1747</SUB>> ]
-"7957" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1747</SUB>> ]
-"7959" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1747</SUB>> ]
-"7942" [label = <(METHOD,GetStaticDoubleField)<SUB>1746</SUB>> ]
-"7987" [label = <(METHOD_RETURN,jdouble)<SUB>1746</SUB>> ]
-  "7947" -> "7951" 
-  "7947" -> "7965" 
-  "7965" -> "7973" 
-  "7968" -> "7975" 
-  "7975" -> "7982" 
-  "7978" -> "7987" 
-  "7970" -> "7968" 
-  "7979" -> "7978" 
-  "7971" -> "7970" 
-  "7980" -> "7986" 
-  "7983" -> "7979" 
-  "7950" -> "7957" 
-  "7950" -> "7965" 
-  "7973" -> "7971" 
-  "7982" -> "7980" 
-  "7984" -> "7983" 
-  "7951" -> "7950" 
-  "7955" -> "7962" 
-  "7962" -> "7987" 
-  "7986" -> "7984" 
-  "7956" -> "7955" 
-  "7957" -> "7959" 
-  "7959" -> "7956" 
-  "7942" -> "7947" 
+digraph "SetFloatField" {  
+"8057" [label = <(SET_PRIMITIVE_FIELD,SET_PRIMITIVE_FIELD(Float, obj, v))<SUB>1685</SUB>> ]
+"8089" [label = <(soa,ScopedObjectAccess)<SUB>1685</SUB>> ]
+"8092" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1685</SUB>> ]
+"8099" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, obj, JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Float, obj, v)&gt;(v)))<SUB>1685</SUB>> ]
+"8107" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1685</SUB>> ]
+"8124" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetFloat &lt; false &gt; (o, v))<SUB>1685</SUB>> ]
+"8075" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1685</SUB>> ]
+"8094" [label = <(SET_PRIMITIVE_FIELD(Float, obj, v),jni::DecodeArtField(fid))<SUB>1685</SUB>> ]
+"8102" [label = <(SET_PRIMITIVE_FIELD(Float, obj, v),JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Float, obj, v)&gt;(v))<SUB>1685</SUB>> ]
+"8108" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1685</SUB>> ]
+"8115" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1685</SUB>> ]
+"8125" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetFloat &lt; false)<SUB>1685</SUB>> ]
+"8130" [label = <(&lt;operator&gt;.bracketedPrimary,(o, v))<SUB>1685</SUB>> ]
+"8076" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1685</SUB>> ]
+"8080" [label = <(SET_PRIMITIVE_FIELD(Float, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1685</SUB>> ]
+"8087" [label = <(RETURN,SET_PRIMITIVE_FIELD(Float, obj, v),SET_PRIMITIVE_FIELD(Float, obj, v))<SUB>1685</SUB>> ]
+"8095" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Float, obj, v))<SUB>1685</SUB>> ]
+"8103" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Float, obj, v))<SUB>1685</SUB>> ]
+"8109" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1685</SUB>> ]
+"8116" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1685</SUB>> ]
+"8126" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetFloat)<SUB>1685</SUB>> ]
+"8131" [label = <(&lt;operator&gt;.expressionList,o, v)<SUB>1685</SUB>> ]
+"8061" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1685</SUB>> ]
+"8081" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1685</SUB>> ]
+"8097" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1685</SUB>> ]
+"8105" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Float, obj, v)&gt;,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Float, obj, v)&gt;)<SUB>1685</SUB>> ]
+"8111" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Float, obj, v))<SUB>1685</SUB>> ]
+"8117" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1685</SUB>> ]
+"8120" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Float, obj, v))<SUB>1685</SUB>> ]
+"8128" [label = <(FIELD_IDENTIFIER,SetFloat,SetFloat)<SUB>1685</SUB>> ]
+"8062" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1685</SUB>> ]
+"8066" [label = <(SET_PRIMITIVE_FIELD(Float, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1685</SUB>> ]
+"8073" [label = <(RETURN,SET_PRIMITIVE_FIELD(Float, obj, v),SET_PRIMITIVE_FIELD(Float, obj, v))<SUB>1685</SUB>> ]
+"8082" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1685</SUB>> ]
+"8084" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1685</SUB>> ]
+"8113" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1685</SUB>> ]
+"8119" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1685</SUB>> ]
+"8122" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1685</SUB>> ]
+"8067" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1685</SUB>> ]
+"8068" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1685</SUB>> ]
+"8070" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1685</SUB>> ]
+"8051" [label = <(METHOD,SetFloatField)<SUB>1684</SUB>> ]
+"8134" [label = <(METHOD_RETURN,void)<SUB>1684</SUB>> ]
+  "8057" -> "8062" 
+  "8057" -> "8076" 
+  "8089" -> "8097" 
+  "8092" -> "8105" 
+  "8099" -> "8113" 
+  "8107" -> "8128" 
+  "8124" -> "8134" 
+  "8075" -> "8082" 
+  "8075" -> "8089" 
+  "8094" -> "8092" 
+  "8102" -> "8099" 
+  "8108" -> "8119" 
+  "8115" -> "8107" 
+  "8125" -> "8131" 
+  "8130" -> "8124" 
+  "8076" -> "8075" 
+  "8080" -> "8087" 
+  "8087" -> "8134" 
+  "8095" -> "8094" 
+  "8103" -> "8102" 
+  "8109" -> "8108" 
+  "8116" -> "8115" 
+  "8126" -> "8125" 
+  "8131" -> "8130" 
+  "8061" -> "8068" 
+  "8061" -> "8076" 
+  "8081" -> "8080" 
+  "8097" -> "8095" 
+  "8105" -> "8103" 
+  "8111" -> "8109" 
+  "8117" -> "8122" 
+  "8120" -> "8116" 
+  "8128" -> "8126" 
+  "8062" -> "8061" 
+  "8066" -> "8073" 
+  "8073" -> "8134" 
+  "8082" -> "8084" 
+  "8084" -> "8081" 
+  "8113" -> "8111" 
+  "8119" -> "8117" 
+  "8122" -> "8120" 
+  "8067" -> "8066" 
+  "8068" -> "8070" 
+  "8070" -> "8067" 
+  "8051" -> "8057" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/154-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/154-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/154-cfg.dot	2023-06-07 19:35:28.317384341 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/154-cfg.dot	2023-06-07 19:35:34.847383770 +0330
@@ -1,90 +1,90 @@
-digraph "SetBooleanField" {  
-"7995" [label = <(SET_PRIMITIVE_FIELD,SET_PRIMITIVE_FIELD(Boolean, obj, v))<SUB>1751</SUB>> ]
-"8027" [label = <(soa,ScopedObjectAccess)<SUB>1751</SUB>> ]
-"8030" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1751</SUB>> ]
-"8037" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, obj, JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Boolean, obj, v)&gt;(v)))<SUB>1751</SUB>> ]
-"8045" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1751</SUB>> ]
-"8062" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetBoolean &lt; false &gt; (o, v))<SUB>1751</SUB>> ]
-"8013" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1751</SUB>> ]
-"8032" [label = <(SET_PRIMITIVE_FIELD(Boolean, obj, v),jni::DecodeArtField(fid))<SUB>1751</SUB>> ]
-"8040" [label = <(SET_PRIMITIVE_FIELD(Boolean, obj, v),JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Boolean, obj, v)&gt;(v))<SUB>1751</SUB>> ]
-"8046" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1751</SUB>> ]
-"8053" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1751</SUB>> ]
-"8063" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetBoolean &lt; false)<SUB>1751</SUB>> ]
-"8068" [label = <(&lt;operator&gt;.bracketedPrimary,(o, v))<SUB>1751</SUB>> ]
-"8014" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1751</SUB>> ]
-"8018" [label = <(SET_PRIMITIVE_FIELD(Boolean, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1751</SUB>> ]
-"8025" [label = <(RETURN,SET_PRIMITIVE_FIELD(Boolean, obj, v),SET_PRIMITIVE_FIELD(Boolean, obj, v))<SUB>1751</SUB>> ]
-"8033" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Boolean, obj, v))<SUB>1751</SUB>> ]
-"8041" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Boolean, obj, v))<SUB>1751</SUB>> ]
-"8047" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1751</SUB>> ]
-"8054" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1751</SUB>> ]
-"8064" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetBoolean)<SUB>1751</SUB>> ]
-"8069" [label = <(&lt;operator&gt;.expressionList,o, v)<SUB>1751</SUB>> ]
-"7999" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1751</SUB>> ]
-"8019" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1751</SUB>> ]
-"8035" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1751</SUB>> ]
-"8043" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Boolean, obj, v)&gt;,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Boolean, obj, v)&gt;)<SUB>1751</SUB>> ]
-"8049" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Boolean, obj, v))<SUB>1751</SUB>> ]
-"8055" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1751</SUB>> ]
-"8058" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Boolean, obj, v))<SUB>1751</SUB>> ]
-"8066" [label = <(FIELD_IDENTIFIER,SetBoolean,SetBoolean)<SUB>1751</SUB>> ]
-"8000" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1751</SUB>> ]
-"8004" [label = <(SET_PRIMITIVE_FIELD(Boolean, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1751</SUB>> ]
-"8011" [label = <(RETURN,SET_PRIMITIVE_FIELD(Boolean, obj, v),SET_PRIMITIVE_FIELD(Boolean, obj, v))<SUB>1751</SUB>> ]
-"8020" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1751</SUB>> ]
-"8022" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1751</SUB>> ]
-"8051" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1751</SUB>> ]
-"8057" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1751</SUB>> ]
-"8060" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1751</SUB>> ]
-"8005" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1751</SUB>> ]
-"8006" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1751</SUB>> ]
-"8008" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1751</SUB>> ]
-"7989" [label = <(METHOD,SetBooleanField)<SUB>1750</SUB>> ]
-"8072" [label = <(METHOD_RETURN,void)<SUB>1750</SUB>> ]
-  "7995" -> "8000" 
-  "7995" -> "8014" 
-  "8027" -> "8035" 
-  "8030" -> "8043" 
-  "8037" -> "8051" 
-  "8045" -> "8066" 
-  "8062" -> "8072" 
-  "8013" -> "8020" 
-  "8013" -> "8027" 
-  "8032" -> "8030" 
-  "8040" -> "8037" 
-  "8046" -> "8057" 
-  "8053" -> "8045" 
-  "8063" -> "8069" 
-  "8068" -> "8062" 
-  "8014" -> "8013" 
-  "8018" -> "8025" 
-  "8025" -> "8072" 
-  "8033" -> "8032" 
-  "8041" -> "8040" 
-  "8047" -> "8046" 
-  "8054" -> "8053" 
-  "8064" -> "8063" 
-  "8069" -> "8068" 
-  "7999" -> "8006" 
-  "7999" -> "8014" 
-  "8019" -> "8018" 
-  "8035" -> "8033" 
-  "8043" -> "8041" 
-  "8049" -> "8047" 
-  "8055" -> "8060" 
-  "8058" -> "8054" 
-  "8066" -> "8064" 
-  "8000" -> "7999" 
-  "8004" -> "8011" 
-  "8011" -> "8072" 
-  "8020" -> "8022" 
-  "8022" -> "8019" 
-  "8051" -> "8049" 
-  "8057" -> "8055" 
-  "8060" -> "8058" 
-  "8005" -> "8004" 
-  "8006" -> "8008" 
-  "8008" -> "8005" 
-  "7989" -> "7995" 
+digraph "SetDoubleField" {  
+"8142" [label = <(SET_PRIMITIVE_FIELD,SET_PRIMITIVE_FIELD(Double, obj, v))<SUB>1689</SUB>> ]
+"8174" [label = <(soa,ScopedObjectAccess)<SUB>1689</SUB>> ]
+"8177" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1689</SUB>> ]
+"8184" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, obj, JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Double, obj, v)&gt;(v)))<SUB>1689</SUB>> ]
+"8192" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1689</SUB>> ]
+"8209" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetDouble &lt; false &gt; (o, v))<SUB>1689</SUB>> ]
+"8160" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1689</SUB>> ]
+"8179" [label = <(SET_PRIMITIVE_FIELD(Double, obj, v),jni::DecodeArtField(fid))<SUB>1689</SUB>> ]
+"8187" [label = <(SET_PRIMITIVE_FIELD(Double, obj, v),JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Double, obj, v)&gt;(v))<SUB>1689</SUB>> ]
+"8193" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1689</SUB>> ]
+"8200" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1689</SUB>> ]
+"8210" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetDouble &lt; false)<SUB>1689</SUB>> ]
+"8215" [label = <(&lt;operator&gt;.bracketedPrimary,(o, v))<SUB>1689</SUB>> ]
+"8161" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1689</SUB>> ]
+"8165" [label = <(SET_PRIMITIVE_FIELD(Double, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1689</SUB>> ]
+"8172" [label = <(RETURN,SET_PRIMITIVE_FIELD(Double, obj, v),SET_PRIMITIVE_FIELD(Double, obj, v))<SUB>1689</SUB>> ]
+"8180" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Double, obj, v))<SUB>1689</SUB>> ]
+"8188" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Double, obj, v))<SUB>1689</SUB>> ]
+"8194" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1689</SUB>> ]
+"8201" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1689</SUB>> ]
+"8211" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetDouble)<SUB>1689</SUB>> ]
+"8216" [label = <(&lt;operator&gt;.expressionList,o, v)<SUB>1689</SUB>> ]
+"8146" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1689</SUB>> ]
+"8166" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1689</SUB>> ]
+"8182" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1689</SUB>> ]
+"8190" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Double, obj, v)&gt;,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Double, obj, v)&gt;)<SUB>1689</SUB>> ]
+"8196" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Double, obj, v))<SUB>1689</SUB>> ]
+"8202" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1689</SUB>> ]
+"8205" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Double, obj, v))<SUB>1689</SUB>> ]
+"8213" [label = <(FIELD_IDENTIFIER,SetDouble,SetDouble)<SUB>1689</SUB>> ]
+"8147" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1689</SUB>> ]
+"8151" [label = <(SET_PRIMITIVE_FIELD(Double, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1689</SUB>> ]
+"8158" [label = <(RETURN,SET_PRIMITIVE_FIELD(Double, obj, v),SET_PRIMITIVE_FIELD(Double, obj, v))<SUB>1689</SUB>> ]
+"8167" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1689</SUB>> ]
+"8169" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1689</SUB>> ]
+"8198" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1689</SUB>> ]
+"8204" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1689</SUB>> ]
+"8207" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1689</SUB>> ]
+"8152" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1689</SUB>> ]
+"8153" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1689</SUB>> ]
+"8155" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1689</SUB>> ]
+"8136" [label = <(METHOD,SetDoubleField)<SUB>1688</SUB>> ]
+"8219" [label = <(METHOD_RETURN,void)<SUB>1688</SUB>> ]
+  "8142" -> "8147" 
+  "8142" -> "8161" 
+  "8174" -> "8182" 
+  "8177" -> "8190" 
+  "8184" -> "8198" 
+  "8192" -> "8213" 
+  "8209" -> "8219" 
+  "8160" -> "8167" 
+  "8160" -> "8174" 
+  "8179" -> "8177" 
+  "8187" -> "8184" 
+  "8193" -> "8204" 
+  "8200" -> "8192" 
+  "8210" -> "8216" 
+  "8215" -> "8209" 
+  "8161" -> "8160" 
+  "8165" -> "8172" 
+  "8172" -> "8219" 
+  "8180" -> "8179" 
+  "8188" -> "8187" 
+  "8194" -> "8193" 
+  "8201" -> "8200" 
+  "8211" -> "8210" 
+  "8216" -> "8215" 
+  "8146" -> "8153" 
+  "8146" -> "8161" 
+  "8166" -> "8165" 
+  "8182" -> "8180" 
+  "8190" -> "8188" 
+  "8196" -> "8194" 
+  "8202" -> "8207" 
+  "8205" -> "8201" 
+  "8213" -> "8211" 
+  "8147" -> "8146" 
+  "8151" -> "8158" 
+  "8158" -> "8219" 
+  "8167" -> "8169" 
+  "8169" -> "8166" 
+  "8198" -> "8196" 
+  "8204" -> "8202" 
+  "8207" -> "8205" 
+  "8152" -> "8151" 
+  "8153" -> "8155" 
+  "8155" -> "8152" 
+  "8136" -> "8142" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/155-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/155-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/155-cfg.dot	2023-06-07 19:35:28.317384341 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/155-cfg.dot	2023-06-07 19:35:34.847383770 +0330
@@ -1,90 +1,90 @@
-digraph "SetByteField" {  
-"8080" [label = <(SET_PRIMITIVE_FIELD,SET_PRIMITIVE_FIELD(Byte, obj, v))<SUB>1755</SUB>> ]
-"8112" [label = <(soa,ScopedObjectAccess)<SUB>1755</SUB>> ]
-"8115" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1755</SUB>> ]
-"8122" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, obj, JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Byte, obj, v)&gt;(v)))<SUB>1755</SUB>> ]
-"8130" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1755</SUB>> ]
-"8147" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetByte &lt; false &gt; (o, v))<SUB>1755</SUB>> ]
-"8098" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1755</SUB>> ]
-"8117" [label = <(SET_PRIMITIVE_FIELD(Byte, obj, v),jni::DecodeArtField(fid))<SUB>1755</SUB>> ]
-"8125" [label = <(SET_PRIMITIVE_FIELD(Byte, obj, v),JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Byte, obj, v)&gt;(v))<SUB>1755</SUB>> ]
-"8131" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1755</SUB>> ]
-"8138" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1755</SUB>> ]
-"8148" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetByte &lt; false)<SUB>1755</SUB>> ]
-"8153" [label = <(&lt;operator&gt;.bracketedPrimary,(o, v))<SUB>1755</SUB>> ]
-"8099" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1755</SUB>> ]
-"8103" [label = <(SET_PRIMITIVE_FIELD(Byte, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1755</SUB>> ]
-"8110" [label = <(RETURN,SET_PRIMITIVE_FIELD(Byte, obj, v),SET_PRIMITIVE_FIELD(Byte, obj, v))<SUB>1755</SUB>> ]
-"8118" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Byte, obj, v))<SUB>1755</SUB>> ]
-"8126" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Byte, obj, v))<SUB>1755</SUB>> ]
-"8132" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1755</SUB>> ]
-"8139" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1755</SUB>> ]
-"8149" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetByte)<SUB>1755</SUB>> ]
-"8154" [label = <(&lt;operator&gt;.expressionList,o, v)<SUB>1755</SUB>> ]
-"8084" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1755</SUB>> ]
-"8104" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1755</SUB>> ]
-"8120" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1755</SUB>> ]
-"8128" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Byte, obj, v)&gt;,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Byte, obj, v)&gt;)<SUB>1755</SUB>> ]
-"8134" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Byte, obj, v))<SUB>1755</SUB>> ]
-"8140" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1755</SUB>> ]
-"8143" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Byte, obj, v))<SUB>1755</SUB>> ]
-"8151" [label = <(FIELD_IDENTIFIER,SetByte,SetByte)<SUB>1755</SUB>> ]
-"8085" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1755</SUB>> ]
-"8089" [label = <(SET_PRIMITIVE_FIELD(Byte, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1755</SUB>> ]
-"8096" [label = <(RETURN,SET_PRIMITIVE_FIELD(Byte, obj, v),SET_PRIMITIVE_FIELD(Byte, obj, v))<SUB>1755</SUB>> ]
-"8105" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1755</SUB>> ]
-"8107" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1755</SUB>> ]
-"8136" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1755</SUB>> ]
-"8142" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1755</SUB>> ]
-"8145" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1755</SUB>> ]
-"8090" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1755</SUB>> ]
-"8091" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1755</SUB>> ]
-"8093" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1755</SUB>> ]
-"8074" [label = <(METHOD,SetByteField)<SUB>1754</SUB>> ]
-"8157" [label = <(METHOD_RETURN,void)<SUB>1754</SUB>> ]
-  "8080" -> "8085" 
-  "8080" -> "8099" 
-  "8112" -> "8120" 
-  "8115" -> "8128" 
-  "8122" -> "8136" 
-  "8130" -> "8151" 
-  "8147" -> "8157" 
-  "8098" -> "8105" 
-  "8098" -> "8112" 
-  "8117" -> "8115" 
-  "8125" -> "8122" 
-  "8131" -> "8142" 
-  "8138" -> "8130" 
-  "8148" -> "8154" 
-  "8153" -> "8147" 
-  "8099" -> "8098" 
-  "8103" -> "8110" 
-  "8110" -> "8157" 
-  "8118" -> "8117" 
-  "8126" -> "8125" 
-  "8132" -> "8131" 
-  "8139" -> "8138" 
-  "8149" -> "8148" 
-  "8154" -> "8153" 
-  "8084" -> "8091" 
-  "8084" -> "8099" 
-  "8104" -> "8103" 
-  "8120" -> "8118" 
-  "8128" -> "8126" 
-  "8134" -> "8132" 
-  "8140" -> "8145" 
-  "8143" -> "8139" 
-  "8151" -> "8149" 
-  "8085" -> "8084" 
-  "8089" -> "8096" 
-  "8096" -> "8157" 
-  "8105" -> "8107" 
-  "8107" -> "8104" 
-  "8136" -> "8134" 
-  "8142" -> "8140" 
-  "8145" -> "8143" 
-  "8090" -> "8089" 
-  "8091" -> "8093" 
-  "8093" -> "8090" 
-  "8074" -> "8080" 
+digraph "SetIntField" {  
+"8227" [label = <(SET_PRIMITIVE_FIELD,SET_PRIMITIVE_FIELD(Int, obj, v))<SUB>1693</SUB>> ]
+"8259" [label = <(soa,ScopedObjectAccess)<SUB>1693</SUB>> ]
+"8262" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1693</SUB>> ]
+"8269" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, obj, JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Int, obj, v)&gt;(v)))<SUB>1693</SUB>> ]
+"8277" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1693</SUB>> ]
+"8294" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetInt &lt; false &gt; (o, v))<SUB>1693</SUB>> ]
+"8245" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1693</SUB>> ]
+"8264" [label = <(SET_PRIMITIVE_FIELD(Int, obj, v),jni::DecodeArtField(fid))<SUB>1693</SUB>> ]
+"8272" [label = <(SET_PRIMITIVE_FIELD(Int, obj, v),JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Int, obj, v)&gt;(v))<SUB>1693</SUB>> ]
+"8278" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1693</SUB>> ]
+"8285" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1693</SUB>> ]
+"8295" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetInt &lt; false)<SUB>1693</SUB>> ]
+"8300" [label = <(&lt;operator&gt;.bracketedPrimary,(o, v))<SUB>1693</SUB>> ]
+"8246" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1693</SUB>> ]
+"8250" [label = <(SET_PRIMITIVE_FIELD(Int, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1693</SUB>> ]
+"8257" [label = <(RETURN,SET_PRIMITIVE_FIELD(Int, obj, v),SET_PRIMITIVE_FIELD(Int, obj, v))<SUB>1693</SUB>> ]
+"8265" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Int, obj, v))<SUB>1693</SUB>> ]
+"8273" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Int, obj, v))<SUB>1693</SUB>> ]
+"8279" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1693</SUB>> ]
+"8286" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1693</SUB>> ]
+"8296" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetInt)<SUB>1693</SUB>> ]
+"8301" [label = <(&lt;operator&gt;.expressionList,o, v)<SUB>1693</SUB>> ]
+"8231" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1693</SUB>> ]
+"8251" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1693</SUB>> ]
+"8267" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1693</SUB>> ]
+"8275" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Int, obj, v)&gt;,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Int, obj, v)&gt;)<SUB>1693</SUB>> ]
+"8281" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Int, obj, v))<SUB>1693</SUB>> ]
+"8287" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1693</SUB>> ]
+"8290" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Int, obj, v))<SUB>1693</SUB>> ]
+"8298" [label = <(FIELD_IDENTIFIER,SetInt,SetInt)<SUB>1693</SUB>> ]
+"8232" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1693</SUB>> ]
+"8236" [label = <(SET_PRIMITIVE_FIELD(Int, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1693</SUB>> ]
+"8243" [label = <(RETURN,SET_PRIMITIVE_FIELD(Int, obj, v),SET_PRIMITIVE_FIELD(Int, obj, v))<SUB>1693</SUB>> ]
+"8252" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1693</SUB>> ]
+"8254" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1693</SUB>> ]
+"8283" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1693</SUB>> ]
+"8289" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1693</SUB>> ]
+"8292" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1693</SUB>> ]
+"8237" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1693</SUB>> ]
+"8238" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1693</SUB>> ]
+"8240" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1693</SUB>> ]
+"8221" [label = <(METHOD,SetIntField)<SUB>1692</SUB>> ]
+"8304" [label = <(METHOD_RETURN,void)<SUB>1692</SUB>> ]
+  "8227" -> "8232" 
+  "8227" -> "8246" 
+  "8259" -> "8267" 
+  "8262" -> "8275" 
+  "8269" -> "8283" 
+  "8277" -> "8298" 
+  "8294" -> "8304" 
+  "8245" -> "8252" 
+  "8245" -> "8259" 
+  "8264" -> "8262" 
+  "8272" -> "8269" 
+  "8278" -> "8289" 
+  "8285" -> "8277" 
+  "8295" -> "8301" 
+  "8300" -> "8294" 
+  "8246" -> "8245" 
+  "8250" -> "8257" 
+  "8257" -> "8304" 
+  "8265" -> "8264" 
+  "8273" -> "8272" 
+  "8279" -> "8278" 
+  "8286" -> "8285" 
+  "8296" -> "8295" 
+  "8301" -> "8300" 
+  "8231" -> "8238" 
+  "8231" -> "8246" 
+  "8251" -> "8250" 
+  "8267" -> "8265" 
+  "8275" -> "8273" 
+  "8281" -> "8279" 
+  "8287" -> "8292" 
+  "8290" -> "8286" 
+  "8298" -> "8296" 
+  "8232" -> "8231" 
+  "8236" -> "8243" 
+  "8243" -> "8304" 
+  "8252" -> "8254" 
+  "8254" -> "8251" 
+  "8283" -> "8281" 
+  "8289" -> "8287" 
+  "8292" -> "8290" 
+  "8237" -> "8236" 
+  "8238" -> "8240" 
+  "8240" -> "8237" 
+  "8221" -> "8227" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/156-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/156-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/156-cfg.dot	2023-06-07 19:35:28.327384340 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/156-cfg.dot	2023-06-07 19:35:34.847383770 +0330
@@ -1,90 +1,90 @@
-digraph "SetCharField" {  
-"8165" [label = <(SET_PRIMITIVE_FIELD,SET_PRIMITIVE_FIELD(Char, obj, v))<SUB>1759</SUB>> ]
-"8197" [label = <(soa,ScopedObjectAccess)<SUB>1759</SUB>> ]
-"8200" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1759</SUB>> ]
-"8207" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, obj, JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Char, obj, v)&gt;(v)))<SUB>1759</SUB>> ]
-"8215" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1759</SUB>> ]
-"8232" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetChar &lt; false &gt; (o, v))<SUB>1759</SUB>> ]
-"8183" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1759</SUB>> ]
-"8202" [label = <(SET_PRIMITIVE_FIELD(Char, obj, v),jni::DecodeArtField(fid))<SUB>1759</SUB>> ]
-"8210" [label = <(SET_PRIMITIVE_FIELD(Char, obj, v),JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Char, obj, v)&gt;(v))<SUB>1759</SUB>> ]
-"8216" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1759</SUB>> ]
-"8223" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1759</SUB>> ]
-"8233" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetChar &lt; false)<SUB>1759</SUB>> ]
-"8238" [label = <(&lt;operator&gt;.bracketedPrimary,(o, v))<SUB>1759</SUB>> ]
-"8184" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1759</SUB>> ]
-"8188" [label = <(SET_PRIMITIVE_FIELD(Char, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1759</SUB>> ]
-"8195" [label = <(RETURN,SET_PRIMITIVE_FIELD(Char, obj, v),SET_PRIMITIVE_FIELD(Char, obj, v))<SUB>1759</SUB>> ]
-"8203" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Char, obj, v))<SUB>1759</SUB>> ]
-"8211" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Char, obj, v))<SUB>1759</SUB>> ]
-"8217" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1759</SUB>> ]
-"8224" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1759</SUB>> ]
-"8234" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetChar)<SUB>1759</SUB>> ]
-"8239" [label = <(&lt;operator&gt;.expressionList,o, v)<SUB>1759</SUB>> ]
-"8169" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1759</SUB>> ]
-"8189" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1759</SUB>> ]
-"8205" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1759</SUB>> ]
-"8213" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Char, obj, v)&gt;,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Char, obj, v)&gt;)<SUB>1759</SUB>> ]
-"8219" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Char, obj, v))<SUB>1759</SUB>> ]
-"8225" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1759</SUB>> ]
-"8228" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Char, obj, v))<SUB>1759</SUB>> ]
-"8236" [label = <(FIELD_IDENTIFIER,SetChar,SetChar)<SUB>1759</SUB>> ]
-"8170" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1759</SUB>> ]
-"8174" [label = <(SET_PRIMITIVE_FIELD(Char, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1759</SUB>> ]
-"8181" [label = <(RETURN,SET_PRIMITIVE_FIELD(Char, obj, v),SET_PRIMITIVE_FIELD(Char, obj, v))<SUB>1759</SUB>> ]
-"8190" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1759</SUB>> ]
-"8192" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1759</SUB>> ]
-"8221" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1759</SUB>> ]
-"8227" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1759</SUB>> ]
-"8230" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1759</SUB>> ]
-"8175" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1759</SUB>> ]
-"8176" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1759</SUB>> ]
-"8178" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1759</SUB>> ]
-"8159" [label = <(METHOD,SetCharField)<SUB>1758</SUB>> ]
-"8242" [label = <(METHOD_RETURN,void)<SUB>1758</SUB>> ]
-  "8165" -> "8170" 
-  "8165" -> "8184" 
-  "8197" -> "8205" 
-  "8200" -> "8213" 
-  "8207" -> "8221" 
-  "8215" -> "8236" 
-  "8232" -> "8242" 
-  "8183" -> "8190" 
-  "8183" -> "8197" 
-  "8202" -> "8200" 
-  "8210" -> "8207" 
-  "8216" -> "8227" 
-  "8223" -> "8215" 
-  "8233" -> "8239" 
-  "8238" -> "8232" 
-  "8184" -> "8183" 
-  "8188" -> "8195" 
-  "8195" -> "8242" 
-  "8203" -> "8202" 
-  "8211" -> "8210" 
-  "8217" -> "8216" 
-  "8224" -> "8223" 
-  "8234" -> "8233" 
-  "8239" -> "8238" 
-  "8169" -> "8176" 
-  "8169" -> "8184" 
-  "8189" -> "8188" 
-  "8205" -> "8203" 
-  "8213" -> "8211" 
-  "8219" -> "8217" 
-  "8225" -> "8230" 
-  "8228" -> "8224" 
-  "8236" -> "8234" 
-  "8170" -> "8169" 
-  "8174" -> "8181" 
-  "8181" -> "8242" 
-  "8190" -> "8192" 
-  "8192" -> "8189" 
-  "8221" -> "8219" 
-  "8227" -> "8225" 
-  "8230" -> "8228" 
-  "8175" -> "8174" 
-  "8176" -> "8178" 
-  "8178" -> "8175" 
-  "8159" -> "8165" 
+digraph "SetLongField" {  
+"8312" [label = <(SET_PRIMITIVE_FIELD,SET_PRIMITIVE_FIELD(Long, obj, v))<SUB>1697</SUB>> ]
+"8344" [label = <(soa,ScopedObjectAccess)<SUB>1697</SUB>> ]
+"8347" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1697</SUB>> ]
+"8354" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, obj, JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Long, obj, v)&gt;(v)))<SUB>1697</SUB>> ]
+"8362" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1697</SUB>> ]
+"8379" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetLong &lt; false &gt; (o, v))<SUB>1697</SUB>> ]
+"8330" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1697</SUB>> ]
+"8349" [label = <(SET_PRIMITIVE_FIELD(Long, obj, v),jni::DecodeArtField(fid))<SUB>1697</SUB>> ]
+"8357" [label = <(SET_PRIMITIVE_FIELD(Long, obj, v),JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Long, obj, v)&gt;(v))<SUB>1697</SUB>> ]
+"8363" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1697</SUB>> ]
+"8370" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1697</SUB>> ]
+"8380" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetLong &lt; false)<SUB>1697</SUB>> ]
+"8385" [label = <(&lt;operator&gt;.bracketedPrimary,(o, v))<SUB>1697</SUB>> ]
+"8331" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1697</SUB>> ]
+"8335" [label = <(SET_PRIMITIVE_FIELD(Long, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1697</SUB>> ]
+"8342" [label = <(RETURN,SET_PRIMITIVE_FIELD(Long, obj, v),SET_PRIMITIVE_FIELD(Long, obj, v))<SUB>1697</SUB>> ]
+"8350" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Long, obj, v))<SUB>1697</SUB>> ]
+"8358" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Long, obj, v))<SUB>1697</SUB>> ]
+"8364" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1697</SUB>> ]
+"8371" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1697</SUB>> ]
+"8381" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetLong)<SUB>1697</SUB>> ]
+"8386" [label = <(&lt;operator&gt;.expressionList,o, v)<SUB>1697</SUB>> ]
+"8316" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1697</SUB>> ]
+"8336" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1697</SUB>> ]
+"8352" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1697</SUB>> ]
+"8360" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Long, obj, v)&gt;,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Long, obj, v)&gt;)<SUB>1697</SUB>> ]
+"8366" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Long, obj, v))<SUB>1697</SUB>> ]
+"8372" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1697</SUB>> ]
+"8375" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Long, obj, v))<SUB>1697</SUB>> ]
+"8383" [label = <(FIELD_IDENTIFIER,SetLong,SetLong)<SUB>1697</SUB>> ]
+"8317" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1697</SUB>> ]
+"8321" [label = <(SET_PRIMITIVE_FIELD(Long, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1697</SUB>> ]
+"8328" [label = <(RETURN,SET_PRIMITIVE_FIELD(Long, obj, v),SET_PRIMITIVE_FIELD(Long, obj, v))<SUB>1697</SUB>> ]
+"8337" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1697</SUB>> ]
+"8339" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1697</SUB>> ]
+"8368" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1697</SUB>> ]
+"8374" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1697</SUB>> ]
+"8377" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1697</SUB>> ]
+"8322" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1697</SUB>> ]
+"8323" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1697</SUB>> ]
+"8325" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1697</SUB>> ]
+"8306" [label = <(METHOD,SetLongField)<SUB>1696</SUB>> ]
+"8389" [label = <(METHOD_RETURN,void)<SUB>1696</SUB>> ]
+  "8312" -> "8317" 
+  "8312" -> "8331" 
+  "8344" -> "8352" 
+  "8347" -> "8360" 
+  "8354" -> "8368" 
+  "8362" -> "8383" 
+  "8379" -> "8389" 
+  "8330" -> "8337" 
+  "8330" -> "8344" 
+  "8349" -> "8347" 
+  "8357" -> "8354" 
+  "8363" -> "8374" 
+  "8370" -> "8362" 
+  "8380" -> "8386" 
+  "8385" -> "8379" 
+  "8331" -> "8330" 
+  "8335" -> "8342" 
+  "8342" -> "8389" 
+  "8350" -> "8349" 
+  "8358" -> "8357" 
+  "8364" -> "8363" 
+  "8371" -> "8370" 
+  "8381" -> "8380" 
+  "8386" -> "8385" 
+  "8316" -> "8323" 
+  "8316" -> "8331" 
+  "8336" -> "8335" 
+  "8352" -> "8350" 
+  "8360" -> "8358" 
+  "8366" -> "8364" 
+  "8372" -> "8377" 
+  "8375" -> "8371" 
+  "8383" -> "8381" 
+  "8317" -> "8316" 
+  "8321" -> "8328" 
+  "8328" -> "8389" 
+  "8337" -> "8339" 
+  "8339" -> "8336" 
+  "8368" -> "8366" 
+  "8374" -> "8372" 
+  "8377" -> "8375" 
+  "8322" -> "8321" 
+  "8323" -> "8325" 
+  "8325" -> "8322" 
+  "8306" -> "8312" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/157-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/157-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/157-cfg.dot	2023-06-07 19:35:28.327384340 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/157-cfg.dot	2023-06-07 19:35:34.847383770 +0330
@@ -1,90 +1,90 @@
-digraph "SetFloatField" {  
-"8250" [label = <(SET_PRIMITIVE_FIELD,SET_PRIMITIVE_FIELD(Float, obj, v))<SUB>1763</SUB>> ]
-"8282" [label = <(soa,ScopedObjectAccess)<SUB>1763</SUB>> ]
-"8285" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1763</SUB>> ]
-"8292" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, obj, JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Float, obj, v)&gt;(v)))<SUB>1763</SUB>> ]
-"8300" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1763</SUB>> ]
-"8317" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetFloat &lt; false &gt; (o, v))<SUB>1763</SUB>> ]
-"8268" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1763</SUB>> ]
-"8287" [label = <(SET_PRIMITIVE_FIELD(Float, obj, v),jni::DecodeArtField(fid))<SUB>1763</SUB>> ]
-"8295" [label = <(SET_PRIMITIVE_FIELD(Float, obj, v),JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Float, obj, v)&gt;(v))<SUB>1763</SUB>> ]
-"8301" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1763</SUB>> ]
-"8308" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1763</SUB>> ]
-"8318" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetFloat &lt; false)<SUB>1763</SUB>> ]
-"8323" [label = <(&lt;operator&gt;.bracketedPrimary,(o, v))<SUB>1763</SUB>> ]
-"8269" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1763</SUB>> ]
-"8273" [label = <(SET_PRIMITIVE_FIELD(Float, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1763</SUB>> ]
-"8280" [label = <(RETURN,SET_PRIMITIVE_FIELD(Float, obj, v),SET_PRIMITIVE_FIELD(Float, obj, v))<SUB>1763</SUB>> ]
-"8288" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Float, obj, v))<SUB>1763</SUB>> ]
-"8296" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Float, obj, v))<SUB>1763</SUB>> ]
-"8302" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1763</SUB>> ]
-"8309" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1763</SUB>> ]
-"8319" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetFloat)<SUB>1763</SUB>> ]
-"8324" [label = <(&lt;operator&gt;.expressionList,o, v)<SUB>1763</SUB>> ]
-"8254" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1763</SUB>> ]
-"8274" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1763</SUB>> ]
-"8290" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1763</SUB>> ]
-"8298" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Float, obj, v)&gt;,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Float, obj, v)&gt;)<SUB>1763</SUB>> ]
-"8304" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Float, obj, v))<SUB>1763</SUB>> ]
-"8310" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1763</SUB>> ]
-"8313" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Float, obj, v))<SUB>1763</SUB>> ]
-"8321" [label = <(FIELD_IDENTIFIER,SetFloat,SetFloat)<SUB>1763</SUB>> ]
-"8255" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1763</SUB>> ]
-"8259" [label = <(SET_PRIMITIVE_FIELD(Float, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1763</SUB>> ]
-"8266" [label = <(RETURN,SET_PRIMITIVE_FIELD(Float, obj, v),SET_PRIMITIVE_FIELD(Float, obj, v))<SUB>1763</SUB>> ]
-"8275" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1763</SUB>> ]
-"8277" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1763</SUB>> ]
-"8306" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1763</SUB>> ]
-"8312" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1763</SUB>> ]
-"8315" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1763</SUB>> ]
-"8260" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1763</SUB>> ]
-"8261" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1763</SUB>> ]
-"8263" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1763</SUB>> ]
-"8244" [label = <(METHOD,SetFloatField)<SUB>1762</SUB>> ]
-"8327" [label = <(METHOD_RETURN,void)<SUB>1762</SUB>> ]
-  "8250" -> "8255" 
-  "8250" -> "8269" 
-  "8282" -> "8290" 
-  "8285" -> "8298" 
-  "8292" -> "8306" 
-  "8300" -> "8321" 
-  "8317" -> "8327" 
-  "8268" -> "8275" 
-  "8268" -> "8282" 
-  "8287" -> "8285" 
-  "8295" -> "8292" 
-  "8301" -> "8312" 
-  "8308" -> "8300" 
-  "8318" -> "8324" 
-  "8323" -> "8317" 
-  "8269" -> "8268" 
-  "8273" -> "8280" 
-  "8280" -> "8327" 
-  "8288" -> "8287" 
-  "8296" -> "8295" 
-  "8302" -> "8301" 
-  "8309" -> "8308" 
-  "8319" -> "8318" 
-  "8324" -> "8323" 
-  "8254" -> "8261" 
-  "8254" -> "8269" 
-  "8274" -> "8273" 
-  "8290" -> "8288" 
-  "8298" -> "8296" 
-  "8304" -> "8302" 
-  "8310" -> "8315" 
-  "8313" -> "8309" 
-  "8321" -> "8319" 
-  "8255" -> "8254" 
-  "8259" -> "8266" 
-  "8266" -> "8327" 
-  "8275" -> "8277" 
-  "8277" -> "8274" 
-  "8306" -> "8304" 
-  "8312" -> "8310" 
-  "8315" -> "8313" 
-  "8260" -> "8259" 
-  "8261" -> "8263" 
-  "8263" -> "8260" 
-  "8244" -> "8250" 
+digraph "SetShortField" {  
+"8397" [label = <(SET_PRIMITIVE_FIELD,SET_PRIMITIVE_FIELD(Short, obj, v))<SUB>1701</SUB>> ]
+"8429" [label = <(soa,ScopedObjectAccess)<SUB>1701</SUB>> ]
+"8432" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1701</SUB>> ]
+"8439" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, obj, JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Short, obj, v)&gt;(v)))<SUB>1701</SUB>> ]
+"8447" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1701</SUB>> ]
+"8464" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetShort &lt; false &gt; (o, v))<SUB>1701</SUB>> ]
+"8415" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1701</SUB>> ]
+"8434" [label = <(SET_PRIMITIVE_FIELD(Short, obj, v),jni::DecodeArtField(fid))<SUB>1701</SUB>> ]
+"8442" [label = <(SET_PRIMITIVE_FIELD(Short, obj, v),JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Short, obj, v)&gt;(v))<SUB>1701</SUB>> ]
+"8448" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1701</SUB>> ]
+"8455" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1701</SUB>> ]
+"8465" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetShort &lt; false)<SUB>1701</SUB>> ]
+"8470" [label = <(&lt;operator&gt;.bracketedPrimary,(o, v))<SUB>1701</SUB>> ]
+"8416" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1701</SUB>> ]
+"8420" [label = <(SET_PRIMITIVE_FIELD(Short, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1701</SUB>> ]
+"8427" [label = <(RETURN,SET_PRIMITIVE_FIELD(Short, obj, v),SET_PRIMITIVE_FIELD(Short, obj, v))<SUB>1701</SUB>> ]
+"8435" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Short, obj, v))<SUB>1701</SUB>> ]
+"8443" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Short, obj, v))<SUB>1701</SUB>> ]
+"8449" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1701</SUB>> ]
+"8456" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1701</SUB>> ]
+"8466" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetShort)<SUB>1701</SUB>> ]
+"8471" [label = <(&lt;operator&gt;.expressionList,o, v)<SUB>1701</SUB>> ]
+"8401" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1701</SUB>> ]
+"8421" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1701</SUB>> ]
+"8437" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1701</SUB>> ]
+"8445" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Short, obj, v)&gt;,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Short, obj, v)&gt;)<SUB>1701</SUB>> ]
+"8451" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Short, obj, v))<SUB>1701</SUB>> ]
+"8457" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1701</SUB>> ]
+"8460" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Short, obj, v))<SUB>1701</SUB>> ]
+"8468" [label = <(FIELD_IDENTIFIER,SetShort,SetShort)<SUB>1701</SUB>> ]
+"8402" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1701</SUB>> ]
+"8406" [label = <(SET_PRIMITIVE_FIELD(Short, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1701</SUB>> ]
+"8413" [label = <(RETURN,SET_PRIMITIVE_FIELD(Short, obj, v),SET_PRIMITIVE_FIELD(Short, obj, v))<SUB>1701</SUB>> ]
+"8422" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1701</SUB>> ]
+"8424" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1701</SUB>> ]
+"8453" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1701</SUB>> ]
+"8459" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1701</SUB>> ]
+"8462" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1701</SUB>> ]
+"8407" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1701</SUB>> ]
+"8408" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1701</SUB>> ]
+"8410" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1701</SUB>> ]
+"8391" [label = <(METHOD,SetShortField)<SUB>1700</SUB>> ]
+"8474" [label = <(METHOD_RETURN,void)<SUB>1700</SUB>> ]
+  "8397" -> "8402" 
+  "8397" -> "8416" 
+  "8429" -> "8437" 
+  "8432" -> "8445" 
+  "8439" -> "8453" 
+  "8447" -> "8468" 
+  "8464" -> "8474" 
+  "8415" -> "8422" 
+  "8415" -> "8429" 
+  "8434" -> "8432" 
+  "8442" -> "8439" 
+  "8448" -> "8459" 
+  "8455" -> "8447" 
+  "8465" -> "8471" 
+  "8470" -> "8464" 
+  "8416" -> "8415" 
+  "8420" -> "8427" 
+  "8427" -> "8474" 
+  "8435" -> "8434" 
+  "8443" -> "8442" 
+  "8449" -> "8448" 
+  "8456" -> "8455" 
+  "8466" -> "8465" 
+  "8471" -> "8470" 
+  "8401" -> "8408" 
+  "8401" -> "8416" 
+  "8421" -> "8420" 
+  "8437" -> "8435" 
+  "8445" -> "8443" 
+  "8451" -> "8449" 
+  "8457" -> "8462" 
+  "8460" -> "8456" 
+  "8468" -> "8466" 
+  "8402" -> "8401" 
+  "8406" -> "8413" 
+  "8413" -> "8474" 
+  "8422" -> "8424" 
+  "8424" -> "8421" 
+  "8453" -> "8451" 
+  "8459" -> "8457" 
+  "8462" -> "8460" 
+  "8407" -> "8406" 
+  "8408" -> "8410" 
+  "8410" -> "8407" 
+  "8391" -> "8397" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/158-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/158-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/158-cfg.dot	2023-06-07 19:35:28.327384340 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/158-cfg.dot	2023-06-07 19:35:34.847383770 +0330
@@ -1,90 +1,59 @@
-digraph "SetDoubleField" {  
-"8335" [label = <(SET_PRIMITIVE_FIELD,SET_PRIMITIVE_FIELD(Double, obj, v))<SUB>1767</SUB>> ]
-"8367" [label = <(soa,ScopedObjectAccess)<SUB>1767</SUB>> ]
-"8370" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1767</SUB>> ]
-"8377" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, obj, JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Double, obj, v)&gt;(v)))<SUB>1767</SUB>> ]
-"8385" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1767</SUB>> ]
-"8402" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetDouble &lt; false &gt; (o, v))<SUB>1767</SUB>> ]
-"8353" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1767</SUB>> ]
-"8372" [label = <(SET_PRIMITIVE_FIELD(Double, obj, v),jni::DecodeArtField(fid))<SUB>1767</SUB>> ]
-"8380" [label = <(SET_PRIMITIVE_FIELD(Double, obj, v),JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Double, obj, v)&gt;(v))<SUB>1767</SUB>> ]
-"8386" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1767</SUB>> ]
-"8393" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1767</SUB>> ]
-"8403" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetDouble &lt; false)<SUB>1767</SUB>> ]
-"8408" [label = <(&lt;operator&gt;.bracketedPrimary,(o, v))<SUB>1767</SUB>> ]
-"8354" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1767</SUB>> ]
-"8358" [label = <(SET_PRIMITIVE_FIELD(Double, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1767</SUB>> ]
-"8365" [label = <(RETURN,SET_PRIMITIVE_FIELD(Double, obj, v),SET_PRIMITIVE_FIELD(Double, obj, v))<SUB>1767</SUB>> ]
-"8373" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Double, obj, v))<SUB>1767</SUB>> ]
-"8381" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Double, obj, v))<SUB>1767</SUB>> ]
-"8387" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1767</SUB>> ]
-"8394" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1767</SUB>> ]
-"8404" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetDouble)<SUB>1767</SUB>> ]
-"8409" [label = <(&lt;operator&gt;.expressionList,o, v)<SUB>1767</SUB>> ]
-"8339" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1767</SUB>> ]
-"8359" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1767</SUB>> ]
-"8375" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1767</SUB>> ]
-"8383" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Double, obj, v)&gt;,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Double, obj, v)&gt;)<SUB>1767</SUB>> ]
-"8389" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Double, obj, v))<SUB>1767</SUB>> ]
-"8395" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1767</SUB>> ]
-"8398" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Double, obj, v))<SUB>1767</SUB>> ]
-"8406" [label = <(FIELD_IDENTIFIER,SetDouble,SetDouble)<SUB>1767</SUB>> ]
-"8340" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1767</SUB>> ]
-"8344" [label = <(SET_PRIMITIVE_FIELD(Double, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1767</SUB>> ]
-"8351" [label = <(RETURN,SET_PRIMITIVE_FIELD(Double, obj, v),SET_PRIMITIVE_FIELD(Double, obj, v))<SUB>1767</SUB>> ]
-"8360" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1767</SUB>> ]
-"8362" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1767</SUB>> ]
-"8391" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1767</SUB>> ]
-"8397" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1767</SUB>> ]
-"8400" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1767</SUB>> ]
-"8345" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1767</SUB>> ]
-"8346" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1767</SUB>> ]
-"8348" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1767</SUB>> ]
-"8329" [label = <(METHOD,SetDoubleField)<SUB>1766</SUB>> ]
-"8412" [label = <(METHOD_RETURN,void)<SUB>1766</SUB>> ]
-  "8335" -> "8340" 
-  "8335" -> "8354" 
-  "8367" -> "8375" 
-  "8370" -> "8383" 
-  "8377" -> "8391" 
-  "8385" -> "8406" 
-  "8402" -> "8412" 
-  "8353" -> "8360" 
-  "8353" -> "8367" 
-  "8372" -> "8370" 
-  "8380" -> "8377" 
-  "8386" -> "8397" 
-  "8393" -> "8385" 
-  "8403" -> "8409" 
-  "8408" -> "8402" 
-  "8354" -> "8353" 
-  "8358" -> "8365" 
-  "8365" -> "8412" 
-  "8373" -> "8372" 
-  "8381" -> "8380" 
-  "8387" -> "8386" 
-  "8394" -> "8393" 
-  "8404" -> "8403" 
-  "8409" -> "8408" 
-  "8339" -> "8346" 
-  "8339" -> "8354" 
-  "8359" -> "8358" 
-  "8375" -> "8373" 
-  "8383" -> "8381" 
-  "8389" -> "8387" 
-  "8395" -> "8400" 
-  "8398" -> "8394" 
-  "8406" -> "8404" 
-  "8340" -> "8339" 
-  "8344" -> "8351" 
-  "8351" -> "8412" 
-  "8360" -> "8362" 
-  "8362" -> "8359" 
-  "8391" -> "8389" 
-  "8397" -> "8395" 
-  "8400" -> "8398" 
-  "8345" -> "8344" 
-  "8346" -> "8348" 
-  "8348" -> "8345" 
-  "8329" -> "8335" 
+digraph "SetStaticBooleanField" {  
+"8482" [label = <(SET_STATIC_PRIMITIVE_FIELD,SET_STATIC_PRIMITIVE_FIELD(Boolean, v))<SUB>1705</SUB>> ]
+"8499" [label = <(soa,ScopedObjectAccess)<SUB>1705</SUB>> ]
+"8502" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1705</SUB>> ]
+"8509" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, nullptr, JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Boolean, v)&gt;(v)))<SUB>1705</SUB>> ]
+"8517" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetBoolean &lt; false &gt; (f-&gt;GetDeclaringClass(), v))<SUB>1705</SUB>> ]
+"8504" [label = <(SET_STATIC_PRIMITIVE_FIELD(Boolean, v),jni::DecodeArtField(fid))<SUB>1705</SUB>> ]
+"8512" [label = <(SET_STATIC_PRIMITIVE_FIELD(Boolean, v),JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Boolean, v)&gt;(v))<SUB>1705</SUB>> ]
+"8518" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetBoolean &lt; false)<SUB>1705</SUB>> ]
+"8523" [label = <(&lt;operator&gt;.bracketedPrimary,(f-&gt;GetDeclaringClass(), v))<SUB>1705</SUB>> ]
+"8505" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Boolean, v))<SUB>1705</SUB>> ]
+"8513" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Boolean, v))<SUB>1705</SUB>> ]
+"8519" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetBoolean)<SUB>1705</SUB>> ]
+"8524" [label = <(&lt;operator&gt;.expressionList,f-&gt;GetDeclaringClass(), v)<SUB>1705</SUB>> ]
+"8485" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1705</SUB>> ]
+"8507" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1705</SUB>> ]
+"8515" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Boolean, v)&gt;,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Boolean, v)&gt;)<SUB>1705</SUB>> ]
+"8521" [label = <(FIELD_IDENTIFIER,SetBoolean,SetBoolean)<SUB>1705</SUB>> ]
+"8525" [label = <(SET_STATIC_PRIMITIVE_FIELD(Boolean, v),f-&gt;GetDeclaringClass())<SUB>1705</SUB>> ]
+"8486" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1705</SUB>> ]
+"8490" [label = <(SET_STATIC_PRIMITIVE_FIELD(Boolean, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1705</SUB>> ]
+"8497" [label = <(RETURN,SET_STATIC_PRIMITIVE_FIELD(Boolean, v),SET_STATIC_PRIMITIVE_FIELD(Boolean, v))<SUB>1705</SUB>> ]
+"8526" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1705</SUB>> ]
+"8491" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1705</SUB>> ]
+"8528" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1705</SUB>> ]
+"8492" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1705</SUB>> ]
+"8494" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1705</SUB>> ]
+"8476" [label = <(METHOD,SetStaticBooleanField)<SUB>1704</SUB>> ]
+"8530" [label = <(METHOD_RETURN,void)<SUB>1704</SUB>> ]
+  "8482" -> "8486" 
+  "8482" -> "8499" 
+  "8499" -> "8507" 
+  "8502" -> "8515" 
+  "8509" -> "8521" 
+  "8517" -> "8530" 
+  "8504" -> "8502" 
+  "8512" -> "8509" 
+  "8518" -> "8528" 
+  "8523" -> "8517" 
+  "8505" -> "8504" 
+  "8513" -> "8512" 
+  "8519" -> "8518" 
+  "8524" -> "8523" 
+  "8485" -> "8492" 
+  "8485" -> "8499" 
+  "8507" -> "8505" 
+  "8515" -> "8513" 
+  "8521" -> "8519" 
+  "8525" -> "8524" 
+  "8486" -> "8485" 
+  "8490" -> "8497" 
+  "8497" -> "8530" 
+  "8526" -> "8525" 
+  "8491" -> "8490" 
+  "8528" -> "8526" 
+  "8492" -> "8494" 
+  "8494" -> "8491" 
+  "8476" -> "8482" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/159-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/159-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/159-cfg.dot	2023-06-07 19:35:28.327384340 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/159-cfg.dot	2023-06-07 19:35:34.847383770 +0330
@@ -1,90 +1,59 @@
-digraph "SetIntField" {  
-"8420" [label = <(SET_PRIMITIVE_FIELD,SET_PRIMITIVE_FIELD(Int, obj, v))<SUB>1771</SUB>> ]
-"8452" [label = <(soa,ScopedObjectAccess)<SUB>1771</SUB>> ]
-"8455" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1771</SUB>> ]
-"8462" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, obj, JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Int, obj, v)&gt;(v)))<SUB>1771</SUB>> ]
-"8470" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1771</SUB>> ]
-"8487" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetInt &lt; false &gt; (o, v))<SUB>1771</SUB>> ]
-"8438" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1771</SUB>> ]
-"8457" [label = <(SET_PRIMITIVE_FIELD(Int, obj, v),jni::DecodeArtField(fid))<SUB>1771</SUB>> ]
-"8465" [label = <(SET_PRIMITIVE_FIELD(Int, obj, v),JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Int, obj, v)&gt;(v))<SUB>1771</SUB>> ]
-"8471" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1771</SUB>> ]
-"8478" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1771</SUB>> ]
-"8488" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetInt &lt; false)<SUB>1771</SUB>> ]
-"8493" [label = <(&lt;operator&gt;.bracketedPrimary,(o, v))<SUB>1771</SUB>> ]
-"8439" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1771</SUB>> ]
-"8443" [label = <(SET_PRIMITIVE_FIELD(Int, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1771</SUB>> ]
-"8450" [label = <(RETURN,SET_PRIMITIVE_FIELD(Int, obj, v),SET_PRIMITIVE_FIELD(Int, obj, v))<SUB>1771</SUB>> ]
-"8458" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Int, obj, v))<SUB>1771</SUB>> ]
-"8466" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Int, obj, v))<SUB>1771</SUB>> ]
-"8472" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1771</SUB>> ]
-"8479" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1771</SUB>> ]
-"8489" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetInt)<SUB>1771</SUB>> ]
-"8494" [label = <(&lt;operator&gt;.expressionList,o, v)<SUB>1771</SUB>> ]
-"8424" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1771</SUB>> ]
-"8444" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1771</SUB>> ]
-"8460" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1771</SUB>> ]
-"8468" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Int, obj, v)&gt;,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Int, obj, v)&gt;)<SUB>1771</SUB>> ]
-"8474" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Int, obj, v))<SUB>1771</SUB>> ]
-"8480" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1771</SUB>> ]
-"8483" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Int, obj, v))<SUB>1771</SUB>> ]
-"8491" [label = <(FIELD_IDENTIFIER,SetInt,SetInt)<SUB>1771</SUB>> ]
-"8425" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1771</SUB>> ]
-"8429" [label = <(SET_PRIMITIVE_FIELD(Int, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1771</SUB>> ]
-"8436" [label = <(RETURN,SET_PRIMITIVE_FIELD(Int, obj, v),SET_PRIMITIVE_FIELD(Int, obj, v))<SUB>1771</SUB>> ]
-"8445" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1771</SUB>> ]
-"8447" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1771</SUB>> ]
-"8476" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1771</SUB>> ]
-"8482" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1771</SUB>> ]
-"8485" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1771</SUB>> ]
-"8430" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1771</SUB>> ]
-"8431" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1771</SUB>> ]
-"8433" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1771</SUB>> ]
-"8414" [label = <(METHOD,SetIntField)<SUB>1770</SUB>> ]
-"8497" [label = <(METHOD_RETURN,void)<SUB>1770</SUB>> ]
-  "8420" -> "8425" 
-  "8420" -> "8439" 
-  "8452" -> "8460" 
-  "8455" -> "8468" 
-  "8462" -> "8476" 
-  "8470" -> "8491" 
-  "8487" -> "8497" 
-  "8438" -> "8445" 
-  "8438" -> "8452" 
-  "8457" -> "8455" 
-  "8465" -> "8462" 
-  "8471" -> "8482" 
-  "8478" -> "8470" 
-  "8488" -> "8494" 
-  "8493" -> "8487" 
-  "8439" -> "8438" 
-  "8443" -> "8450" 
-  "8450" -> "8497" 
-  "8458" -> "8457" 
-  "8466" -> "8465" 
-  "8472" -> "8471" 
-  "8479" -> "8478" 
-  "8489" -> "8488" 
-  "8494" -> "8493" 
-  "8424" -> "8431" 
-  "8424" -> "8439" 
-  "8444" -> "8443" 
-  "8460" -> "8458" 
-  "8468" -> "8466" 
-  "8474" -> "8472" 
-  "8480" -> "8485" 
-  "8483" -> "8479" 
-  "8491" -> "8489" 
-  "8425" -> "8424" 
-  "8429" -> "8436" 
-  "8436" -> "8497" 
-  "8445" -> "8447" 
-  "8447" -> "8444" 
-  "8476" -> "8474" 
-  "8482" -> "8480" 
-  "8485" -> "8483" 
-  "8430" -> "8429" 
-  "8431" -> "8433" 
-  "8433" -> "8430" 
-  "8414" -> "8420" 
+digraph "SetStaticByteField" {  
+"8538" [label = <(SET_STATIC_PRIMITIVE_FIELD,SET_STATIC_PRIMITIVE_FIELD(Byte, v))<SUB>1709</SUB>> ]
+"8555" [label = <(soa,ScopedObjectAccess)<SUB>1709</SUB>> ]
+"8558" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1709</SUB>> ]
+"8565" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, nullptr, JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Byte, v)&gt;(v)))<SUB>1709</SUB>> ]
+"8573" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetByte &lt; false &gt; (f-&gt;GetDeclaringClass(), v))<SUB>1709</SUB>> ]
+"8560" [label = <(SET_STATIC_PRIMITIVE_FIELD(Byte, v),jni::DecodeArtField(fid))<SUB>1709</SUB>> ]
+"8568" [label = <(SET_STATIC_PRIMITIVE_FIELD(Byte, v),JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Byte, v)&gt;(v))<SUB>1709</SUB>> ]
+"8574" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetByte &lt; false)<SUB>1709</SUB>> ]
+"8579" [label = <(&lt;operator&gt;.bracketedPrimary,(f-&gt;GetDeclaringClass(), v))<SUB>1709</SUB>> ]
+"8561" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Byte, v))<SUB>1709</SUB>> ]
+"8569" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Byte, v))<SUB>1709</SUB>> ]
+"8575" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetByte)<SUB>1709</SUB>> ]
+"8580" [label = <(&lt;operator&gt;.expressionList,f-&gt;GetDeclaringClass(), v)<SUB>1709</SUB>> ]
+"8541" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1709</SUB>> ]
+"8563" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1709</SUB>> ]
+"8571" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Byte, v)&gt;,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Byte, v)&gt;)<SUB>1709</SUB>> ]
+"8577" [label = <(FIELD_IDENTIFIER,SetByte,SetByte)<SUB>1709</SUB>> ]
+"8581" [label = <(SET_STATIC_PRIMITIVE_FIELD(Byte, v),f-&gt;GetDeclaringClass())<SUB>1709</SUB>> ]
+"8542" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1709</SUB>> ]
+"8546" [label = <(SET_STATIC_PRIMITIVE_FIELD(Byte, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1709</SUB>> ]
+"8553" [label = <(RETURN,SET_STATIC_PRIMITIVE_FIELD(Byte, v),SET_STATIC_PRIMITIVE_FIELD(Byte, v))<SUB>1709</SUB>> ]
+"8582" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1709</SUB>> ]
+"8547" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1709</SUB>> ]
+"8584" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1709</SUB>> ]
+"8548" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1709</SUB>> ]
+"8550" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1709</SUB>> ]
+"8532" [label = <(METHOD,SetStaticByteField)<SUB>1708</SUB>> ]
+"8586" [label = <(METHOD_RETURN,void)<SUB>1708</SUB>> ]
+  "8538" -> "8542" 
+  "8538" -> "8555" 
+  "8555" -> "8563" 
+  "8558" -> "8571" 
+  "8565" -> "8577" 
+  "8573" -> "8586" 
+  "8560" -> "8558" 
+  "8568" -> "8565" 
+  "8574" -> "8584" 
+  "8579" -> "8573" 
+  "8561" -> "8560" 
+  "8569" -> "8568" 
+  "8575" -> "8574" 
+  "8580" -> "8579" 
+  "8541" -> "8548" 
+  "8541" -> "8555" 
+  "8563" -> "8561" 
+  "8571" -> "8569" 
+  "8577" -> "8575" 
+  "8581" -> "8580" 
+  "8542" -> "8541" 
+  "8546" -> "8553" 
+  "8553" -> "8586" 
+  "8582" -> "8581" 
+  "8547" -> "8546" 
+  "8584" -> "8582" 
+  "8548" -> "8550" 
+  "8550" -> "8547" 
+  "8532" -> "8538" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/16-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/16-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/16-cfg.dot	2023-06-07 19:35:28.217384348 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/16-cfg.dot	2023-06-07 19:35:34.747383777 +0330
@@ -1,7 +1,17 @@
-digraph "DropCache" {  
-"401" [label = <(&lt;operator&gt;.assignment,memory_type_table_ = {})<SUB>241</SUB>> ]
-"399" [label = <(METHOD,DropCache)<SUB>240</SUB>> ]
-"403" [label = <(METHOD_RETURN,void)<SUB>240</SUB>> ]
-  "401" -> "403" 
-  "399" -> "401" 
+digraph "&lt;clinit&gt;" {  
+"297" [label = <(&lt;operator&gt;.assignment,kLibjavacore = &quot;libjavacore.so&quot;)<SUB>229</SUB>> ]
+"300" [label = <(&lt;operator&gt;.assignment,kLibnativehelper = &quot;libnativehelper.so&quot;)<SUB>230</SUB>> ]
+"303" [label = <(&lt;operator&gt;.assignment,kLibopenjdk = art::kIsDebugBuild ? &quot;libopenjdkd.so&quot;\012 : &quot;libopenjdk.so&quot;)<SUB>231</SUB>> ]
+"305" [label = <(&lt;operator&gt;.conditional,art::kIsDebugBuild ? &quot;libopenjdkd.so&quot;\012 : &quot;libopenjdk.so&quot;)<SUB>231</SUB>> ]
+"306" [label = <(&lt;operator&gt;.fieldAccess,art::kIsDebugBuild)<SUB>231</SUB>> ]
+"308" [label = <(FIELD_IDENTIFIER,kIsDebugBuild,kIsDebugBuild)<SUB>231</SUB>> ]
+"295" [label = <(METHOD,&lt;clinit&gt;)> ]
+"312" [label = <(METHOD_RETURN,ANY)> ]
+  "297" -> "300" 
+  "300" -> "308" 
+  "303" -> "312" 
+  "305" -> "303" 
+  "306" -> "305" 
+  "308" -> "306" 
+  "295" -> "297" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/160-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/160-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/160-cfg.dot	2023-06-07 19:35:28.327384340 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/160-cfg.dot	2023-06-07 19:35:34.847383770 +0330
@@ -1,90 +1,59 @@
-digraph "SetLongField" {  
-"8505" [label = <(SET_PRIMITIVE_FIELD,SET_PRIMITIVE_FIELD(Long, obj, v))<SUB>1775</SUB>> ]
-"8537" [label = <(soa,ScopedObjectAccess)<SUB>1775</SUB>> ]
-"8540" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1775</SUB>> ]
-"8547" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, obj, JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Long, obj, v)&gt;(v)))<SUB>1775</SUB>> ]
-"8555" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1775</SUB>> ]
-"8572" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetLong &lt; false &gt; (o, v))<SUB>1775</SUB>> ]
-"8523" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1775</SUB>> ]
-"8542" [label = <(SET_PRIMITIVE_FIELD(Long, obj, v),jni::DecodeArtField(fid))<SUB>1775</SUB>> ]
-"8550" [label = <(SET_PRIMITIVE_FIELD(Long, obj, v),JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Long, obj, v)&gt;(v))<SUB>1775</SUB>> ]
-"8556" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1775</SUB>> ]
-"8563" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1775</SUB>> ]
-"8573" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetLong &lt; false)<SUB>1775</SUB>> ]
-"8578" [label = <(&lt;operator&gt;.bracketedPrimary,(o, v))<SUB>1775</SUB>> ]
-"8524" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1775</SUB>> ]
-"8528" [label = <(SET_PRIMITIVE_FIELD(Long, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1775</SUB>> ]
-"8535" [label = <(RETURN,SET_PRIMITIVE_FIELD(Long, obj, v),SET_PRIMITIVE_FIELD(Long, obj, v))<SUB>1775</SUB>> ]
-"8543" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Long, obj, v))<SUB>1775</SUB>> ]
-"8551" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Long, obj, v))<SUB>1775</SUB>> ]
-"8557" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1775</SUB>> ]
-"8564" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1775</SUB>> ]
-"8574" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetLong)<SUB>1775</SUB>> ]
-"8579" [label = <(&lt;operator&gt;.expressionList,o, v)<SUB>1775</SUB>> ]
-"8509" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1775</SUB>> ]
-"8529" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1775</SUB>> ]
-"8545" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1775</SUB>> ]
-"8553" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Long, obj, v)&gt;,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Long, obj, v)&gt;)<SUB>1775</SUB>> ]
-"8559" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Long, obj, v))<SUB>1775</SUB>> ]
-"8565" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1775</SUB>> ]
-"8568" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Long, obj, v))<SUB>1775</SUB>> ]
-"8576" [label = <(FIELD_IDENTIFIER,SetLong,SetLong)<SUB>1775</SUB>> ]
-"8510" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1775</SUB>> ]
-"8514" [label = <(SET_PRIMITIVE_FIELD(Long, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1775</SUB>> ]
-"8521" [label = <(RETURN,SET_PRIMITIVE_FIELD(Long, obj, v),SET_PRIMITIVE_FIELD(Long, obj, v))<SUB>1775</SUB>> ]
-"8530" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1775</SUB>> ]
-"8532" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1775</SUB>> ]
-"8561" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1775</SUB>> ]
-"8567" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1775</SUB>> ]
-"8570" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1775</SUB>> ]
-"8515" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1775</SUB>> ]
-"8516" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1775</SUB>> ]
-"8518" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1775</SUB>> ]
-"8499" [label = <(METHOD,SetLongField)<SUB>1774</SUB>> ]
-"8582" [label = <(METHOD_RETURN,void)<SUB>1774</SUB>> ]
-  "8505" -> "8510" 
-  "8505" -> "8524" 
-  "8537" -> "8545" 
-  "8540" -> "8553" 
-  "8547" -> "8561" 
-  "8555" -> "8576" 
-  "8572" -> "8582" 
-  "8523" -> "8530" 
-  "8523" -> "8537" 
-  "8542" -> "8540" 
-  "8550" -> "8547" 
-  "8556" -> "8567" 
-  "8563" -> "8555" 
-  "8573" -> "8579" 
-  "8578" -> "8572" 
-  "8524" -> "8523" 
-  "8528" -> "8535" 
-  "8535" -> "8582" 
-  "8543" -> "8542" 
-  "8551" -> "8550" 
-  "8557" -> "8556" 
-  "8564" -> "8563" 
-  "8574" -> "8573" 
-  "8579" -> "8578" 
-  "8509" -> "8516" 
-  "8509" -> "8524" 
-  "8529" -> "8528" 
-  "8545" -> "8543" 
-  "8553" -> "8551" 
-  "8559" -> "8557" 
-  "8565" -> "8570" 
-  "8568" -> "8564" 
-  "8576" -> "8574" 
-  "8510" -> "8509" 
-  "8514" -> "8521" 
-  "8521" -> "8582" 
-  "8530" -> "8532" 
-  "8532" -> "8529" 
-  "8561" -> "8559" 
-  "8567" -> "8565" 
-  "8570" -> "8568" 
-  "8515" -> "8514" 
-  "8516" -> "8518" 
-  "8518" -> "8515" 
-  "8499" -> "8505" 
+digraph "SetStaticCharField" {  
+"8594" [label = <(SET_STATIC_PRIMITIVE_FIELD,SET_STATIC_PRIMITIVE_FIELD(Char, v))<SUB>1713</SUB>> ]
+"8611" [label = <(soa,ScopedObjectAccess)<SUB>1713</SUB>> ]
+"8614" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1713</SUB>> ]
+"8621" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, nullptr, JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Char, v)&gt;(v)))<SUB>1713</SUB>> ]
+"8629" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetChar &lt; false &gt; (f-&gt;GetDeclaringClass(), v))<SUB>1713</SUB>> ]
+"8616" [label = <(SET_STATIC_PRIMITIVE_FIELD(Char, v),jni::DecodeArtField(fid))<SUB>1713</SUB>> ]
+"8624" [label = <(SET_STATIC_PRIMITIVE_FIELD(Char, v),JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Char, v)&gt;(v))<SUB>1713</SUB>> ]
+"8630" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetChar &lt; false)<SUB>1713</SUB>> ]
+"8635" [label = <(&lt;operator&gt;.bracketedPrimary,(f-&gt;GetDeclaringClass(), v))<SUB>1713</SUB>> ]
+"8617" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Char, v))<SUB>1713</SUB>> ]
+"8625" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Char, v))<SUB>1713</SUB>> ]
+"8631" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetChar)<SUB>1713</SUB>> ]
+"8636" [label = <(&lt;operator&gt;.expressionList,f-&gt;GetDeclaringClass(), v)<SUB>1713</SUB>> ]
+"8597" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1713</SUB>> ]
+"8619" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1713</SUB>> ]
+"8627" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Char, v)&gt;,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Char, v)&gt;)<SUB>1713</SUB>> ]
+"8633" [label = <(FIELD_IDENTIFIER,SetChar,SetChar)<SUB>1713</SUB>> ]
+"8637" [label = <(SET_STATIC_PRIMITIVE_FIELD(Char, v),f-&gt;GetDeclaringClass())<SUB>1713</SUB>> ]
+"8598" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1713</SUB>> ]
+"8602" [label = <(SET_STATIC_PRIMITIVE_FIELD(Char, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1713</SUB>> ]
+"8609" [label = <(RETURN,SET_STATIC_PRIMITIVE_FIELD(Char, v),SET_STATIC_PRIMITIVE_FIELD(Char, v))<SUB>1713</SUB>> ]
+"8638" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1713</SUB>> ]
+"8603" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1713</SUB>> ]
+"8640" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1713</SUB>> ]
+"8604" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1713</SUB>> ]
+"8606" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1713</SUB>> ]
+"8588" [label = <(METHOD,SetStaticCharField)<SUB>1712</SUB>> ]
+"8642" [label = <(METHOD_RETURN,void)<SUB>1712</SUB>> ]
+  "8594" -> "8598" 
+  "8594" -> "8611" 
+  "8611" -> "8619" 
+  "8614" -> "8627" 
+  "8621" -> "8633" 
+  "8629" -> "8642" 
+  "8616" -> "8614" 
+  "8624" -> "8621" 
+  "8630" -> "8640" 
+  "8635" -> "8629" 
+  "8617" -> "8616" 
+  "8625" -> "8624" 
+  "8631" -> "8630" 
+  "8636" -> "8635" 
+  "8597" -> "8604" 
+  "8597" -> "8611" 
+  "8619" -> "8617" 
+  "8627" -> "8625" 
+  "8633" -> "8631" 
+  "8637" -> "8636" 
+  "8598" -> "8597" 
+  "8602" -> "8609" 
+  "8609" -> "8642" 
+  "8638" -> "8637" 
+  "8603" -> "8602" 
+  "8640" -> "8638" 
+  "8604" -> "8606" 
+  "8606" -> "8603" 
+  "8588" -> "8594" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/161-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/161-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/161-cfg.dot	2023-06-07 19:35:28.327384340 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/161-cfg.dot	2023-06-07 19:35:34.847383770 +0330
@@ -1,90 +1,59 @@
-digraph "SetShortField" {  
-"8590" [label = <(SET_PRIMITIVE_FIELD,SET_PRIMITIVE_FIELD(Short, obj, v))<SUB>1779</SUB>> ]
-"8622" [label = <(soa,ScopedObjectAccess)<SUB>1779</SUB>> ]
-"8625" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1779</SUB>> ]
-"8632" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, obj, JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Short, obj, v)&gt;(v)))<SUB>1779</SUB>> ]
-"8640" [label = <(&lt;operator&gt;.assignment,ObjPtr &lt; mirror::Object &gt; o = soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1779</SUB>> ]
-"8657" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetShort &lt; false &gt; (o, v))<SUB>1779</SUB>> ]
-"8608" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1779</SUB>> ]
-"8627" [label = <(SET_PRIMITIVE_FIELD(Short, obj, v),jni::DecodeArtField(fid))<SUB>1779</SUB>> ]
-"8635" [label = <(SET_PRIMITIVE_FIELD(Short, obj, v),JValue::FromPrimitive&lt;SET_PRIMITIVE_FIELD(Short, obj, v)&gt;(v))<SUB>1779</SUB>> ]
-"8641" [label = <(&lt;operator&gt;.greaterThan,ObjPtr &lt; mirror::Object &gt; o)<SUB>1779</SUB>> ]
-"8648" [label = <(&lt;operator&gt;.greaterThan,soa.Decode &lt; mirror::Object &gt; (obj))<SUB>1779</SUB>> ]
-"8658" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetShort &lt; false)<SUB>1779</SUB>> ]
-"8663" [label = <(&lt;operator&gt;.bracketedPrimary,(o, v))<SUB>1779</SUB>> ]
-"8609" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1779</SUB>> ]
-"8613" [label = <(SET_PRIMITIVE_FIELD(Short, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1779</SUB>> ]
-"8620" [label = <(RETURN,SET_PRIMITIVE_FIELD(Short, obj, v),SET_PRIMITIVE_FIELD(Short, obj, v))<SUB>1779</SUB>> ]
-"8628" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Short, obj, v))<SUB>1779</SUB>> ]
-"8636" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Short, obj, v))<SUB>1779</SUB>> ]
-"8642" [label = <(&lt;operator&gt;.lessThan,ObjPtr &lt; mirror::Object)<SUB>1779</SUB>> ]
-"8649" [label = <(&lt;operator&gt;.lessThan,soa.Decode &lt; mirror::Object)<SUB>1779</SUB>> ]
-"8659" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetShort)<SUB>1779</SUB>> ]
-"8664" [label = <(&lt;operator&gt;.expressionList,o, v)<SUB>1779</SUB>> ]
-"8594" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1779</SUB>> ]
-"8614" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1779</SUB>> ]
-"8630" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1779</SUB>> ]
-"8638" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Short, obj, v)&gt;,FromPrimitive&lt;SET_PRIMITIVE_FIELD(Short, obj, v)&gt;)<SUB>1779</SUB>> ]
-"8644" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Short, obj, v))<SUB>1779</SUB>> ]
-"8650" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1779</SUB>> ]
-"8653" [label = <(&lt;operator&gt;.fieldAccess,SET_PRIMITIVE_FIELD(Short, obj, v))<SUB>1779</SUB>> ]
-"8661" [label = <(FIELD_IDENTIFIER,SetShort,SetShort)<SUB>1779</SUB>> ]
-"8595" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1779</SUB>> ]
-"8599" [label = <(SET_PRIMITIVE_FIELD(Short, obj, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1779</SUB>> ]
-"8606" [label = <(RETURN,SET_PRIMITIVE_FIELD(Short, obj, v),SET_PRIMITIVE_FIELD(Short, obj, v))<SUB>1779</SUB>> ]
-"8615" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1779</SUB>> ]
-"8617" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1779</SUB>> ]
-"8646" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1779</SUB>> ]
-"8652" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1779</SUB>> ]
-"8655" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1779</SUB>> ]
-"8600" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1779</SUB>> ]
-"8601" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1779</SUB>> ]
-"8603" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1779</SUB>> ]
-"8584" [label = <(METHOD,SetShortField)<SUB>1778</SUB>> ]
-"8667" [label = <(METHOD_RETURN,void)<SUB>1778</SUB>> ]
-  "8590" -> "8595" 
-  "8590" -> "8609" 
-  "8622" -> "8630" 
-  "8625" -> "8638" 
-  "8632" -> "8646" 
-  "8640" -> "8661" 
-  "8657" -> "8667" 
-  "8608" -> "8615" 
-  "8608" -> "8622" 
-  "8627" -> "8625" 
-  "8635" -> "8632" 
-  "8641" -> "8652" 
-  "8648" -> "8640" 
-  "8658" -> "8664" 
-  "8663" -> "8657" 
-  "8609" -> "8608" 
-  "8613" -> "8620" 
-  "8620" -> "8667" 
-  "8628" -> "8627" 
-  "8636" -> "8635" 
-  "8642" -> "8641" 
-  "8649" -> "8648" 
+digraph "SetStaticFloatField" {  
+"8650" [label = <(SET_STATIC_PRIMITIVE_FIELD,SET_STATIC_PRIMITIVE_FIELD(Float, v))<SUB>1717</SUB>> ]
+"8667" [label = <(soa,ScopedObjectAccess)<SUB>1717</SUB>> ]
+"8670" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1717</SUB>> ]
+"8677" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, nullptr, JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Float, v)&gt;(v)))<SUB>1717</SUB>> ]
+"8685" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetFloat &lt; false &gt; (f-&gt;GetDeclaringClass(), v))<SUB>1717</SUB>> ]
+"8672" [label = <(SET_STATIC_PRIMITIVE_FIELD(Float, v),jni::DecodeArtField(fid))<SUB>1717</SUB>> ]
+"8680" [label = <(SET_STATIC_PRIMITIVE_FIELD(Float, v),JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Float, v)&gt;(v))<SUB>1717</SUB>> ]
+"8686" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetFloat &lt; false)<SUB>1717</SUB>> ]
+"8691" [label = <(&lt;operator&gt;.bracketedPrimary,(f-&gt;GetDeclaringClass(), v))<SUB>1717</SUB>> ]
+"8673" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Float, v))<SUB>1717</SUB>> ]
+"8681" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Float, v))<SUB>1717</SUB>> ]
+"8687" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetFloat)<SUB>1717</SUB>> ]
+"8692" [label = <(&lt;operator&gt;.expressionList,f-&gt;GetDeclaringClass(), v)<SUB>1717</SUB>> ]
+"8653" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1717</SUB>> ]
+"8675" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1717</SUB>> ]
+"8683" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Float, v)&gt;,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Float, v)&gt;)<SUB>1717</SUB>> ]
+"8689" [label = <(FIELD_IDENTIFIER,SetFloat,SetFloat)<SUB>1717</SUB>> ]
+"8693" [label = <(SET_STATIC_PRIMITIVE_FIELD(Float, v),f-&gt;GetDeclaringClass())<SUB>1717</SUB>> ]
+"8654" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1717</SUB>> ]
+"8658" [label = <(SET_STATIC_PRIMITIVE_FIELD(Float, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1717</SUB>> ]
+"8665" [label = <(RETURN,SET_STATIC_PRIMITIVE_FIELD(Float, v),SET_STATIC_PRIMITIVE_FIELD(Float, v))<SUB>1717</SUB>> ]
+"8694" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1717</SUB>> ]
+"8659" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1717</SUB>> ]
+"8696" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1717</SUB>> ]
+"8660" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1717</SUB>> ]
+"8662" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1717</SUB>> ]
+"8644" [label = <(METHOD,SetStaticFloatField)<SUB>1716</SUB>> ]
+"8698" [label = <(METHOD_RETURN,void)<SUB>1716</SUB>> ]
+  "8650" -> "8654" 
+  "8650" -> "8667" 
+  "8667" -> "8675" 
+  "8670" -> "8683" 
+  "8677" -> "8689" 
+  "8685" -> "8698" 
+  "8672" -> "8670" 
+  "8680" -> "8677" 
+  "8686" -> "8696" 
+  "8691" -> "8685" 
+  "8673" -> "8672" 
+  "8681" -> "8680" 
+  "8687" -> "8686" 
+  "8692" -> "8691" 
+  "8653" -> "8660" 
+  "8653" -> "8667" 
+  "8675" -> "8673" 
+  "8683" -> "8681" 
+  "8689" -> "8687" 
+  "8693" -> "8692" 
+  "8654" -> "8653" 
+  "8658" -> "8665" 
+  "8665" -> "8698" 
+  "8694" -> "8693" 
   "8659" -> "8658" 
-  "8664" -> "8663" 
-  "8594" -> "8601" 
-  "8594" -> "8609" 
-  "8614" -> "8613" 
-  "8630" -> "8628" 
-  "8638" -> "8636" 
-  "8644" -> "8642" 
-  "8650" -> "8655" 
-  "8653" -> "8649" 
-  "8661" -> "8659" 
-  "8595" -> "8594" 
-  "8599" -> "8606" 
-  "8606" -> "8667" 
-  "8615" -> "8617" 
-  "8617" -> "8614" 
-  "8646" -> "8644" 
-  "8652" -> "8650" 
-  "8655" -> "8653" 
-  "8600" -> "8599" 
-  "8601" -> "8603" 
-  "8603" -> "8600" 
-  "8584" -> "8590" 
+  "8696" -> "8694" 
+  "8660" -> "8662" 
+  "8662" -> "8659" 
+  "8644" -> "8650" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/162-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/162-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/162-cfg.dot	2023-06-07 19:35:28.327384340 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/162-cfg.dot	2023-06-07 19:35:34.847383770 +0330
@@ -1,59 +1,59 @@
-digraph "SetStaticBooleanField" {  
-"8675" [label = <(SET_STATIC_PRIMITIVE_FIELD,SET_STATIC_PRIMITIVE_FIELD(Boolean, v))<SUB>1783</SUB>> ]
-"8692" [label = <(soa,ScopedObjectAccess)<SUB>1783</SUB>> ]
-"8695" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1783</SUB>> ]
-"8702" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, nullptr, JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Boolean, v)&gt;(v)))<SUB>1783</SUB>> ]
-"8710" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetBoolean &lt; false &gt; (f-&gt;GetDeclaringClass(), v))<SUB>1783</SUB>> ]
-"8697" [label = <(SET_STATIC_PRIMITIVE_FIELD(Boolean, v),jni::DecodeArtField(fid))<SUB>1783</SUB>> ]
-"8705" [label = <(SET_STATIC_PRIMITIVE_FIELD(Boolean, v),JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Boolean, v)&gt;(v))<SUB>1783</SUB>> ]
-"8711" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetBoolean &lt; false)<SUB>1783</SUB>> ]
-"8716" [label = <(&lt;operator&gt;.bracketedPrimary,(f-&gt;GetDeclaringClass(), v))<SUB>1783</SUB>> ]
-"8698" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Boolean, v))<SUB>1783</SUB>> ]
-"8706" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Boolean, v))<SUB>1783</SUB>> ]
-"8712" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetBoolean)<SUB>1783</SUB>> ]
-"8717" [label = <(&lt;operator&gt;.expressionList,f-&gt;GetDeclaringClass(), v)<SUB>1783</SUB>> ]
-"8678" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1783</SUB>> ]
-"8700" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1783</SUB>> ]
-"8708" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Boolean, v)&gt;,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Boolean, v)&gt;)<SUB>1783</SUB>> ]
-"8714" [label = <(FIELD_IDENTIFIER,SetBoolean,SetBoolean)<SUB>1783</SUB>> ]
-"8718" [label = <(SET_STATIC_PRIMITIVE_FIELD(Boolean, v),f-&gt;GetDeclaringClass())<SUB>1783</SUB>> ]
-"8679" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1783</SUB>> ]
-"8683" [label = <(SET_STATIC_PRIMITIVE_FIELD(Boolean, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1783</SUB>> ]
-"8690" [label = <(RETURN,SET_STATIC_PRIMITIVE_FIELD(Boolean, v),SET_STATIC_PRIMITIVE_FIELD(Boolean, v))<SUB>1783</SUB>> ]
-"8719" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1783</SUB>> ]
-"8684" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1783</SUB>> ]
-"8721" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1783</SUB>> ]
-"8685" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1783</SUB>> ]
-"8687" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1783</SUB>> ]
-"8669" [label = <(METHOD,SetStaticBooleanField)<SUB>1782</SUB>> ]
-"8723" [label = <(METHOD_RETURN,void)<SUB>1782</SUB>> ]
-  "8675" -> "8679" 
-  "8675" -> "8692" 
-  "8692" -> "8700" 
-  "8695" -> "8708" 
-  "8702" -> "8714" 
-  "8710" -> "8723" 
-  "8697" -> "8695" 
-  "8705" -> "8702" 
-  "8711" -> "8721" 
-  "8716" -> "8710" 
-  "8698" -> "8697" 
-  "8706" -> "8705" 
-  "8712" -> "8711" 
-  "8717" -> "8716" 
-  "8678" -> "8685" 
-  "8678" -> "8692" 
-  "8700" -> "8698" 
-  "8708" -> "8706" 
-  "8714" -> "8712" 
-  "8718" -> "8717" 
-  "8679" -> "8678" 
-  "8683" -> "8690" 
-  "8690" -> "8723" 
-  "8719" -> "8718" 
-  "8684" -> "8683" 
-  "8721" -> "8719" 
-  "8685" -> "8687" 
-  "8687" -> "8684" 
-  "8669" -> "8675" 
+digraph "SetStaticDoubleField" {  
+"8706" [label = <(SET_STATIC_PRIMITIVE_FIELD,SET_STATIC_PRIMITIVE_FIELD(Double, v))<SUB>1721</SUB>> ]
+"8723" [label = <(soa,ScopedObjectAccess)<SUB>1721</SUB>> ]
+"8726" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1721</SUB>> ]
+"8733" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, nullptr, JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Double, v)&gt;(v)))<SUB>1721</SUB>> ]
+"8741" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetDouble &lt; false &gt; (f-&gt;GetDeclaringClass(), v))<SUB>1721</SUB>> ]
+"8728" [label = <(SET_STATIC_PRIMITIVE_FIELD(Double, v),jni::DecodeArtField(fid))<SUB>1721</SUB>> ]
+"8736" [label = <(SET_STATIC_PRIMITIVE_FIELD(Double, v),JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Double, v)&gt;(v))<SUB>1721</SUB>> ]
+"8742" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetDouble &lt; false)<SUB>1721</SUB>> ]
+"8747" [label = <(&lt;operator&gt;.bracketedPrimary,(f-&gt;GetDeclaringClass(), v))<SUB>1721</SUB>> ]
+"8729" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Double, v))<SUB>1721</SUB>> ]
+"8737" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Double, v))<SUB>1721</SUB>> ]
+"8743" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetDouble)<SUB>1721</SUB>> ]
+"8748" [label = <(&lt;operator&gt;.expressionList,f-&gt;GetDeclaringClass(), v)<SUB>1721</SUB>> ]
+"8709" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1721</SUB>> ]
+"8731" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1721</SUB>> ]
+"8739" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Double, v)&gt;,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Double, v)&gt;)<SUB>1721</SUB>> ]
+"8745" [label = <(FIELD_IDENTIFIER,SetDouble,SetDouble)<SUB>1721</SUB>> ]
+"8749" [label = <(SET_STATIC_PRIMITIVE_FIELD(Double, v),f-&gt;GetDeclaringClass())<SUB>1721</SUB>> ]
+"8710" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1721</SUB>> ]
+"8714" [label = <(SET_STATIC_PRIMITIVE_FIELD(Double, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1721</SUB>> ]
+"8721" [label = <(RETURN,SET_STATIC_PRIMITIVE_FIELD(Double, v),SET_STATIC_PRIMITIVE_FIELD(Double, v))<SUB>1721</SUB>> ]
+"8750" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1721</SUB>> ]
+"8715" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1721</SUB>> ]
+"8752" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1721</SUB>> ]
+"8716" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1721</SUB>> ]
+"8718" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1721</SUB>> ]
+"8700" [label = <(METHOD,SetStaticDoubleField)<SUB>1720</SUB>> ]
+"8754" [label = <(METHOD_RETURN,void)<SUB>1720</SUB>> ]
+  "8706" -> "8710" 
+  "8706" -> "8723" 
+  "8723" -> "8731" 
+  "8726" -> "8739" 
+  "8733" -> "8745" 
+  "8741" -> "8754" 
+  "8728" -> "8726" 
+  "8736" -> "8733" 
+  "8742" -> "8752" 
+  "8747" -> "8741" 
+  "8729" -> "8728" 
+  "8737" -> "8736" 
+  "8743" -> "8742" 
+  "8748" -> "8747" 
+  "8709" -> "8716" 
+  "8709" -> "8723" 
+  "8731" -> "8729" 
+  "8739" -> "8737" 
+  "8745" -> "8743" 
+  "8749" -> "8748" 
+  "8710" -> "8709" 
+  "8714" -> "8721" 
+  "8721" -> "8754" 
+  "8750" -> "8749" 
+  "8715" -> "8714" 
+  "8752" -> "8750" 
+  "8716" -> "8718" 
+  "8718" -> "8715" 
+  "8700" -> "8706" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/163-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/163-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/163-cfg.dot	2023-06-07 19:35:28.327384340 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/163-cfg.dot	2023-06-07 19:35:34.847383770 +0330
@@ -1,59 +1,59 @@
-digraph "SetStaticByteField" {  
-"8731" [label = <(SET_STATIC_PRIMITIVE_FIELD,SET_STATIC_PRIMITIVE_FIELD(Byte, v))<SUB>1787</SUB>> ]
-"8748" [label = <(soa,ScopedObjectAccess)<SUB>1787</SUB>> ]
-"8751" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1787</SUB>> ]
-"8758" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, nullptr, JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Byte, v)&gt;(v)))<SUB>1787</SUB>> ]
-"8766" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetByte &lt; false &gt; (f-&gt;GetDeclaringClass(), v))<SUB>1787</SUB>> ]
-"8753" [label = <(SET_STATIC_PRIMITIVE_FIELD(Byte, v),jni::DecodeArtField(fid))<SUB>1787</SUB>> ]
-"8761" [label = <(SET_STATIC_PRIMITIVE_FIELD(Byte, v),JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Byte, v)&gt;(v))<SUB>1787</SUB>> ]
-"8767" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetByte &lt; false)<SUB>1787</SUB>> ]
-"8772" [label = <(&lt;operator&gt;.bracketedPrimary,(f-&gt;GetDeclaringClass(), v))<SUB>1787</SUB>> ]
-"8754" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Byte, v))<SUB>1787</SUB>> ]
-"8762" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Byte, v))<SUB>1787</SUB>> ]
-"8768" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetByte)<SUB>1787</SUB>> ]
-"8773" [label = <(&lt;operator&gt;.expressionList,f-&gt;GetDeclaringClass(), v)<SUB>1787</SUB>> ]
-"8734" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1787</SUB>> ]
-"8756" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1787</SUB>> ]
-"8764" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Byte, v)&gt;,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Byte, v)&gt;)<SUB>1787</SUB>> ]
-"8770" [label = <(FIELD_IDENTIFIER,SetByte,SetByte)<SUB>1787</SUB>> ]
-"8774" [label = <(SET_STATIC_PRIMITIVE_FIELD(Byte, v),f-&gt;GetDeclaringClass())<SUB>1787</SUB>> ]
-"8735" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1787</SUB>> ]
-"8739" [label = <(SET_STATIC_PRIMITIVE_FIELD(Byte, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1787</SUB>> ]
-"8746" [label = <(RETURN,SET_STATIC_PRIMITIVE_FIELD(Byte, v),SET_STATIC_PRIMITIVE_FIELD(Byte, v))<SUB>1787</SUB>> ]
-"8775" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1787</SUB>> ]
-"8740" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1787</SUB>> ]
-"8777" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1787</SUB>> ]
-"8741" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1787</SUB>> ]
-"8743" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1787</SUB>> ]
-"8725" [label = <(METHOD,SetStaticByteField)<SUB>1786</SUB>> ]
-"8779" [label = <(METHOD_RETURN,void)<SUB>1786</SUB>> ]
-  "8731" -> "8735" 
-  "8731" -> "8748" 
-  "8748" -> "8756" 
-  "8751" -> "8764" 
-  "8758" -> "8770" 
-  "8766" -> "8779" 
-  "8753" -> "8751" 
-  "8761" -> "8758" 
-  "8767" -> "8777" 
-  "8772" -> "8766" 
-  "8754" -> "8753" 
-  "8762" -> "8761" 
-  "8768" -> "8767" 
-  "8773" -> "8772" 
-  "8734" -> "8741" 
-  "8734" -> "8748" 
-  "8756" -> "8754" 
-  "8764" -> "8762" 
-  "8770" -> "8768" 
-  "8774" -> "8773" 
-  "8735" -> "8734" 
-  "8739" -> "8746" 
-  "8746" -> "8779" 
-  "8775" -> "8774" 
-  "8740" -> "8739" 
-  "8777" -> "8775" 
-  "8741" -> "8743" 
-  "8743" -> "8740" 
-  "8725" -> "8731" 
+digraph "SetStaticIntField" {  
+"8762" [label = <(SET_STATIC_PRIMITIVE_FIELD,SET_STATIC_PRIMITIVE_FIELD(Int, v))<SUB>1725</SUB>> ]
+"8779" [label = <(soa,ScopedObjectAccess)<SUB>1725</SUB>> ]
+"8782" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1725</SUB>> ]
+"8789" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, nullptr, JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Int, v)&gt;(v)))<SUB>1725</SUB>> ]
+"8797" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetInt &lt; false &gt; (f-&gt;GetDeclaringClass(), v))<SUB>1725</SUB>> ]
+"8784" [label = <(SET_STATIC_PRIMITIVE_FIELD(Int, v),jni::DecodeArtField(fid))<SUB>1725</SUB>> ]
+"8792" [label = <(SET_STATIC_PRIMITIVE_FIELD(Int, v),JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Int, v)&gt;(v))<SUB>1725</SUB>> ]
+"8798" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetInt &lt; false)<SUB>1725</SUB>> ]
+"8803" [label = <(&lt;operator&gt;.bracketedPrimary,(f-&gt;GetDeclaringClass(), v))<SUB>1725</SUB>> ]
+"8785" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Int, v))<SUB>1725</SUB>> ]
+"8793" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Int, v))<SUB>1725</SUB>> ]
+"8799" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetInt)<SUB>1725</SUB>> ]
+"8804" [label = <(&lt;operator&gt;.expressionList,f-&gt;GetDeclaringClass(), v)<SUB>1725</SUB>> ]
+"8765" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1725</SUB>> ]
+"8787" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1725</SUB>> ]
+"8795" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Int, v)&gt;,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Int, v)&gt;)<SUB>1725</SUB>> ]
+"8801" [label = <(FIELD_IDENTIFIER,SetInt,SetInt)<SUB>1725</SUB>> ]
+"8805" [label = <(SET_STATIC_PRIMITIVE_FIELD(Int, v),f-&gt;GetDeclaringClass())<SUB>1725</SUB>> ]
+"8766" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1725</SUB>> ]
+"8770" [label = <(SET_STATIC_PRIMITIVE_FIELD(Int, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1725</SUB>> ]
+"8777" [label = <(RETURN,SET_STATIC_PRIMITIVE_FIELD(Int, v),SET_STATIC_PRIMITIVE_FIELD(Int, v))<SUB>1725</SUB>> ]
+"8806" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1725</SUB>> ]
+"8771" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1725</SUB>> ]
+"8808" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1725</SUB>> ]
+"8772" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1725</SUB>> ]
+"8774" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1725</SUB>> ]
+"8756" [label = <(METHOD,SetStaticIntField)<SUB>1724</SUB>> ]
+"8810" [label = <(METHOD_RETURN,void)<SUB>1724</SUB>> ]
+  "8762" -> "8766" 
+  "8762" -> "8779" 
+  "8779" -> "8787" 
+  "8782" -> "8795" 
+  "8789" -> "8801" 
+  "8797" -> "8810" 
+  "8784" -> "8782" 
+  "8792" -> "8789" 
+  "8798" -> "8808" 
+  "8803" -> "8797" 
+  "8785" -> "8784" 
+  "8793" -> "8792" 
+  "8799" -> "8798" 
+  "8804" -> "8803" 
+  "8765" -> "8772" 
+  "8765" -> "8779" 
+  "8787" -> "8785" 
+  "8795" -> "8793" 
+  "8801" -> "8799" 
+  "8805" -> "8804" 
+  "8766" -> "8765" 
+  "8770" -> "8777" 
+  "8777" -> "8810" 
+  "8806" -> "8805" 
+  "8771" -> "8770" 
+  "8808" -> "8806" 
+  "8772" -> "8774" 
+  "8774" -> "8771" 
+  "8756" -> "8762" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/164-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/164-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/164-cfg.dot	2023-06-07 19:35:28.327384340 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/164-cfg.dot	2023-06-07 19:35:34.847383770 +0330
@@ -1,59 +1,59 @@
-digraph "SetStaticCharField" {  
-"8787" [label = <(SET_STATIC_PRIMITIVE_FIELD,SET_STATIC_PRIMITIVE_FIELD(Char, v))<SUB>1791</SUB>> ]
-"8804" [label = <(soa,ScopedObjectAccess)<SUB>1791</SUB>> ]
-"8807" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1791</SUB>> ]
-"8814" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, nullptr, JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Char, v)&gt;(v)))<SUB>1791</SUB>> ]
-"8822" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetChar &lt; false &gt; (f-&gt;GetDeclaringClass(), v))<SUB>1791</SUB>> ]
-"8809" [label = <(SET_STATIC_PRIMITIVE_FIELD(Char, v),jni::DecodeArtField(fid))<SUB>1791</SUB>> ]
-"8817" [label = <(SET_STATIC_PRIMITIVE_FIELD(Char, v),JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Char, v)&gt;(v))<SUB>1791</SUB>> ]
-"8823" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetChar &lt; false)<SUB>1791</SUB>> ]
-"8828" [label = <(&lt;operator&gt;.bracketedPrimary,(f-&gt;GetDeclaringClass(), v))<SUB>1791</SUB>> ]
-"8810" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Char, v))<SUB>1791</SUB>> ]
-"8818" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Char, v))<SUB>1791</SUB>> ]
-"8824" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetChar)<SUB>1791</SUB>> ]
-"8829" [label = <(&lt;operator&gt;.expressionList,f-&gt;GetDeclaringClass(), v)<SUB>1791</SUB>> ]
-"8790" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1791</SUB>> ]
-"8812" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1791</SUB>> ]
-"8820" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Char, v)&gt;,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Char, v)&gt;)<SUB>1791</SUB>> ]
-"8826" [label = <(FIELD_IDENTIFIER,SetChar,SetChar)<SUB>1791</SUB>> ]
-"8830" [label = <(SET_STATIC_PRIMITIVE_FIELD(Char, v),f-&gt;GetDeclaringClass())<SUB>1791</SUB>> ]
-"8791" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1791</SUB>> ]
-"8795" [label = <(SET_STATIC_PRIMITIVE_FIELD(Char, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1791</SUB>> ]
-"8802" [label = <(RETURN,SET_STATIC_PRIMITIVE_FIELD(Char, v),SET_STATIC_PRIMITIVE_FIELD(Char, v))<SUB>1791</SUB>> ]
-"8831" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1791</SUB>> ]
-"8796" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1791</SUB>> ]
-"8833" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1791</SUB>> ]
-"8797" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1791</SUB>> ]
-"8799" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1791</SUB>> ]
-"8781" [label = <(METHOD,SetStaticCharField)<SUB>1790</SUB>> ]
-"8835" [label = <(METHOD_RETURN,void)<SUB>1790</SUB>> ]
-  "8787" -> "8791" 
-  "8787" -> "8804" 
-  "8804" -> "8812" 
-  "8807" -> "8820" 
-  "8814" -> "8826" 
-  "8822" -> "8835" 
-  "8809" -> "8807" 
-  "8817" -> "8814" 
-  "8823" -> "8833" 
-  "8828" -> "8822" 
-  "8810" -> "8809" 
-  "8818" -> "8817" 
-  "8824" -> "8823" 
-  "8829" -> "8828" 
-  "8790" -> "8797" 
-  "8790" -> "8804" 
-  "8812" -> "8810" 
-  "8820" -> "8818" 
-  "8826" -> "8824" 
-  "8830" -> "8829" 
-  "8791" -> "8790" 
-  "8795" -> "8802" 
-  "8802" -> "8835" 
-  "8831" -> "8830" 
-  "8796" -> "8795" 
-  "8833" -> "8831" 
-  "8797" -> "8799" 
-  "8799" -> "8796" 
-  "8781" -> "8787" 
+digraph "SetStaticLongField" {  
+"8818" [label = <(SET_STATIC_PRIMITIVE_FIELD,SET_STATIC_PRIMITIVE_FIELD(Long, v))<SUB>1729</SUB>> ]
+"8835" [label = <(soa,ScopedObjectAccess)<SUB>1729</SUB>> ]
+"8838" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1729</SUB>> ]
+"8845" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, nullptr, JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Long, v)&gt;(v)))<SUB>1729</SUB>> ]
+"8853" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetLong &lt; false &gt; (f-&gt;GetDeclaringClass(), v))<SUB>1729</SUB>> ]
+"8840" [label = <(SET_STATIC_PRIMITIVE_FIELD(Long, v),jni::DecodeArtField(fid))<SUB>1729</SUB>> ]
+"8848" [label = <(SET_STATIC_PRIMITIVE_FIELD(Long, v),JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Long, v)&gt;(v))<SUB>1729</SUB>> ]
+"8854" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetLong &lt; false)<SUB>1729</SUB>> ]
+"8859" [label = <(&lt;operator&gt;.bracketedPrimary,(f-&gt;GetDeclaringClass(), v))<SUB>1729</SUB>> ]
+"8841" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Long, v))<SUB>1729</SUB>> ]
+"8849" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Long, v))<SUB>1729</SUB>> ]
+"8855" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetLong)<SUB>1729</SUB>> ]
+"8860" [label = <(&lt;operator&gt;.expressionList,f-&gt;GetDeclaringClass(), v)<SUB>1729</SUB>> ]
+"8821" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1729</SUB>> ]
+"8843" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1729</SUB>> ]
+"8851" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Long, v)&gt;,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Long, v)&gt;)<SUB>1729</SUB>> ]
+"8857" [label = <(FIELD_IDENTIFIER,SetLong,SetLong)<SUB>1729</SUB>> ]
+"8861" [label = <(SET_STATIC_PRIMITIVE_FIELD(Long, v),f-&gt;GetDeclaringClass())<SUB>1729</SUB>> ]
+"8822" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1729</SUB>> ]
+"8826" [label = <(SET_STATIC_PRIMITIVE_FIELD(Long, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1729</SUB>> ]
+"8833" [label = <(RETURN,SET_STATIC_PRIMITIVE_FIELD(Long, v),SET_STATIC_PRIMITIVE_FIELD(Long, v))<SUB>1729</SUB>> ]
+"8862" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1729</SUB>> ]
+"8827" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1729</SUB>> ]
+"8864" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1729</SUB>> ]
+"8828" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1729</SUB>> ]
+"8830" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1729</SUB>> ]
+"8812" [label = <(METHOD,SetStaticLongField)<SUB>1728</SUB>> ]
+"8866" [label = <(METHOD_RETURN,void)<SUB>1728</SUB>> ]
+  "8818" -> "8822" 
+  "8818" -> "8835" 
+  "8835" -> "8843" 
+  "8838" -> "8851" 
+  "8845" -> "8857" 
+  "8853" -> "8866" 
+  "8840" -> "8838" 
+  "8848" -> "8845" 
+  "8854" -> "8864" 
+  "8859" -> "8853" 
+  "8841" -> "8840" 
+  "8849" -> "8848" 
+  "8855" -> "8854" 
+  "8860" -> "8859" 
+  "8821" -> "8828" 
+  "8821" -> "8835" 
+  "8843" -> "8841" 
+  "8851" -> "8849" 
+  "8857" -> "8855" 
+  "8861" -> "8860" 
+  "8822" -> "8821" 
+  "8826" -> "8833" 
+  "8833" -> "8866" 
+  "8862" -> "8861" 
+  "8827" -> "8826" 
+  "8864" -> "8862" 
+  "8828" -> "8830" 
+  "8830" -> "8827" 
+  "8812" -> "8818" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/165-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/165-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/165-cfg.dot	2023-06-07 19:35:28.327384340 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/165-cfg.dot	2023-06-07 19:35:34.847383770 +0330
@@ -1,59 +1,59 @@
-digraph "SetStaticFloatField" {  
-"8843" [label = <(SET_STATIC_PRIMITIVE_FIELD,SET_STATIC_PRIMITIVE_FIELD(Float, v))<SUB>1795</SUB>> ]
-"8860" [label = <(soa,ScopedObjectAccess)<SUB>1795</SUB>> ]
-"8863" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1795</SUB>> ]
-"8870" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, nullptr, JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Float, v)&gt;(v)))<SUB>1795</SUB>> ]
-"8878" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetFloat &lt; false &gt; (f-&gt;GetDeclaringClass(), v))<SUB>1795</SUB>> ]
-"8865" [label = <(SET_STATIC_PRIMITIVE_FIELD(Float, v),jni::DecodeArtField(fid))<SUB>1795</SUB>> ]
-"8873" [label = <(SET_STATIC_PRIMITIVE_FIELD(Float, v),JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Float, v)&gt;(v))<SUB>1795</SUB>> ]
-"8879" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetFloat &lt; false)<SUB>1795</SUB>> ]
-"8884" [label = <(&lt;operator&gt;.bracketedPrimary,(f-&gt;GetDeclaringClass(), v))<SUB>1795</SUB>> ]
-"8866" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Float, v))<SUB>1795</SUB>> ]
-"8874" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Float, v))<SUB>1795</SUB>> ]
-"8880" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetFloat)<SUB>1795</SUB>> ]
-"8885" [label = <(&lt;operator&gt;.expressionList,f-&gt;GetDeclaringClass(), v)<SUB>1795</SUB>> ]
-"8846" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1795</SUB>> ]
-"8868" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1795</SUB>> ]
-"8876" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Float, v)&gt;,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Float, v)&gt;)<SUB>1795</SUB>> ]
-"8882" [label = <(FIELD_IDENTIFIER,SetFloat,SetFloat)<SUB>1795</SUB>> ]
-"8886" [label = <(SET_STATIC_PRIMITIVE_FIELD(Float, v),f-&gt;GetDeclaringClass())<SUB>1795</SUB>> ]
-"8847" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1795</SUB>> ]
-"8851" [label = <(SET_STATIC_PRIMITIVE_FIELD(Float, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1795</SUB>> ]
-"8858" [label = <(RETURN,SET_STATIC_PRIMITIVE_FIELD(Float, v),SET_STATIC_PRIMITIVE_FIELD(Float, v))<SUB>1795</SUB>> ]
-"8887" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1795</SUB>> ]
-"8852" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1795</SUB>> ]
-"8889" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1795</SUB>> ]
-"8853" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1795</SUB>> ]
-"8855" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1795</SUB>> ]
-"8837" [label = <(METHOD,SetStaticFloatField)<SUB>1794</SUB>> ]
-"8891" [label = <(METHOD_RETURN,void)<SUB>1794</SUB>> ]
-  "8843" -> "8847" 
-  "8843" -> "8860" 
-  "8860" -> "8868" 
-  "8863" -> "8876" 
-  "8870" -> "8882" 
-  "8878" -> "8891" 
-  "8865" -> "8863" 
-  "8873" -> "8870" 
-  "8879" -> "8889" 
-  "8884" -> "8878" 
-  "8866" -> "8865" 
-  "8874" -> "8873" 
-  "8880" -> "8879" 
-  "8885" -> "8884" 
-  "8846" -> "8853" 
-  "8846" -> "8860" 
-  "8868" -> "8866" 
-  "8876" -> "8874" 
-  "8882" -> "8880" 
-  "8886" -> "8885" 
-  "8847" -> "8846" 
-  "8851" -> "8858" 
-  "8858" -> "8891" 
-  "8887" -> "8886" 
-  "8852" -> "8851" 
-  "8889" -> "8887" 
-  "8853" -> "8855" 
-  "8855" -> "8852" 
-  "8837" -> "8843" 
+digraph "SetStaticShortField" {  
+"8874" [label = <(SET_STATIC_PRIMITIVE_FIELD,SET_STATIC_PRIMITIVE_FIELD(Short, v))<SUB>1733</SUB>> ]
+"8891" [label = <(soa,ScopedObjectAccess)<SUB>1733</SUB>> ]
+"8894" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1733</SUB>> ]
+"8901" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, nullptr, JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Short, v)&gt;(v)))<SUB>1733</SUB>> ]
+"8909" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetShort &lt; false &gt; (f-&gt;GetDeclaringClass(), v))<SUB>1733</SUB>> ]
+"8896" [label = <(SET_STATIC_PRIMITIVE_FIELD(Short, v),jni::DecodeArtField(fid))<SUB>1733</SUB>> ]
+"8904" [label = <(SET_STATIC_PRIMITIVE_FIELD(Short, v),JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Short, v)&gt;(v))<SUB>1733</SUB>> ]
+"8910" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetShort &lt; false)<SUB>1733</SUB>> ]
+"8915" [label = <(&lt;operator&gt;.bracketedPrimary,(f-&gt;GetDeclaringClass(), v))<SUB>1733</SUB>> ]
+"8897" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Short, v))<SUB>1733</SUB>> ]
+"8905" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Short, v))<SUB>1733</SUB>> ]
+"8911" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetShort)<SUB>1733</SUB>> ]
+"8916" [label = <(&lt;operator&gt;.expressionList,f-&gt;GetDeclaringClass(), v)<SUB>1733</SUB>> ]
+"8877" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1733</SUB>> ]
+"8899" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1733</SUB>> ]
+"8907" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Short, v)&gt;,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Short, v)&gt;)<SUB>1733</SUB>> ]
+"8913" [label = <(FIELD_IDENTIFIER,SetShort,SetShort)<SUB>1733</SUB>> ]
+"8917" [label = <(SET_STATIC_PRIMITIVE_FIELD(Short, v),f-&gt;GetDeclaringClass())<SUB>1733</SUB>> ]
+"8878" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1733</SUB>> ]
+"8882" [label = <(SET_STATIC_PRIMITIVE_FIELD(Short, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1733</SUB>> ]
+"8889" [label = <(RETURN,SET_STATIC_PRIMITIVE_FIELD(Short, v),SET_STATIC_PRIMITIVE_FIELD(Short, v))<SUB>1733</SUB>> ]
+"8918" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1733</SUB>> ]
+"8883" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1733</SUB>> ]
+"8920" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1733</SUB>> ]
+"8884" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1733</SUB>> ]
+"8886" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1733</SUB>> ]
+"8868" [label = <(METHOD,SetStaticShortField)<SUB>1732</SUB>> ]
+"8922" [label = <(METHOD_RETURN,void)<SUB>1732</SUB>> ]
+  "8874" -> "8878" 
+  "8874" -> "8891" 
+  "8891" -> "8899" 
+  "8894" -> "8907" 
+  "8901" -> "8913" 
+  "8909" -> "8922" 
+  "8896" -> "8894" 
+  "8904" -> "8901" 
+  "8910" -> "8920" 
+  "8915" -> "8909" 
+  "8897" -> "8896" 
+  "8905" -> "8904" 
+  "8911" -> "8910" 
+  "8916" -> "8915" 
+  "8877" -> "8884" 
+  "8877" -> "8891" 
+  "8899" -> "8897" 
+  "8907" -> "8905" 
+  "8913" -> "8911" 
+  "8917" -> "8916" 
+  "8878" -> "8877" 
+  "8882" -> "8889" 
+  "8889" -> "8922" 
+  "8918" -> "8917" 
+  "8883" -> "8882" 
+  "8920" -> "8918" 
+  "8884" -> "8886" 
+  "8886" -> "8883" 
+  "8868" -> "8874" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/166-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/166-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/166-cfg.dot	2023-06-07 19:35:28.327384340 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/166-cfg.dot	2023-06-07 19:35:34.847383770 +0330
@@ -1,59 +1,53 @@
-digraph "SetStaticDoubleField" {  
-"8899" [label = <(SET_STATIC_PRIMITIVE_FIELD,SET_STATIC_PRIMITIVE_FIELD(Double, v))<SUB>1799</SUB>> ]
-"8916" [label = <(soa,ScopedObjectAccess)<SUB>1799</SUB>> ]
-"8919" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1799</SUB>> ]
-"8926" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, nullptr, JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Double, v)&gt;(v)))<SUB>1799</SUB>> ]
-"8934" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetDouble &lt; false &gt; (f-&gt;GetDeclaringClass(), v))<SUB>1799</SUB>> ]
-"8921" [label = <(SET_STATIC_PRIMITIVE_FIELD(Double, v),jni::DecodeArtField(fid))<SUB>1799</SUB>> ]
-"8929" [label = <(SET_STATIC_PRIMITIVE_FIELD(Double, v),JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Double, v)&gt;(v))<SUB>1799</SUB>> ]
-"8935" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetDouble &lt; false)<SUB>1799</SUB>> ]
-"8940" [label = <(&lt;operator&gt;.bracketedPrimary,(f-&gt;GetDeclaringClass(), v))<SUB>1799</SUB>> ]
-"8922" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Double, v))<SUB>1799</SUB>> ]
-"8930" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Double, v))<SUB>1799</SUB>> ]
-"8936" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetDouble)<SUB>1799</SUB>> ]
-"8941" [label = <(&lt;operator&gt;.expressionList,f-&gt;GetDeclaringClass(), v)<SUB>1799</SUB>> ]
-"8902" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1799</SUB>> ]
-"8924" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1799</SUB>> ]
-"8932" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Double, v)&gt;,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Double, v)&gt;)<SUB>1799</SUB>> ]
-"8938" [label = <(FIELD_IDENTIFIER,SetDouble,SetDouble)<SUB>1799</SUB>> ]
-"8942" [label = <(SET_STATIC_PRIMITIVE_FIELD(Double, v),f-&gt;GetDeclaringClass())<SUB>1799</SUB>> ]
-"8903" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1799</SUB>> ]
-"8907" [label = <(SET_STATIC_PRIMITIVE_FIELD(Double, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1799</SUB>> ]
-"8914" [label = <(RETURN,SET_STATIC_PRIMITIVE_FIELD(Double, v),SET_STATIC_PRIMITIVE_FIELD(Double, v))<SUB>1799</SUB>> ]
-"8943" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1799</SUB>> ]
-"8908" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1799</SUB>> ]
-"8945" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1799</SUB>> ]
-"8909" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1799</SUB>> ]
-"8911" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1799</SUB>> ]
-"8893" [label = <(METHOD,SetStaticDoubleField)<SUB>1798</SUB>> ]
-"8947" [label = <(METHOD_RETURN,void)<SUB>1798</SUB>> ]
-  "8899" -> "8903" 
-  "8899" -> "8916" 
-  "8916" -> "8924" 
-  "8919" -> "8932" 
-  "8926" -> "8938" 
-  "8934" -> "8947" 
-  "8921" -> "8919" 
-  "8929" -> "8926" 
-  "8935" -> "8945" 
-  "8940" -> "8934" 
-  "8922" -> "8921" 
-  "8930" -> "8929" 
-  "8936" -> "8935" 
-  "8941" -> "8940" 
-  "8902" -> "8909" 
-  "8902" -> "8916" 
-  "8924" -> "8922" 
-  "8932" -> "8930" 
-  "8938" -> "8936" 
+digraph "CallStaticObjectMethod" {  
+"8930" [label = <(va_start,va_start(ap, mid))<SUB>1738</SUB>> ]
+"8934" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1739</SUB>> ]
+"8937" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>1740</SUB>> ]
+"8956" [label = <(soa,soa(env))<SUB>1741</SUB>> ]
+"8959" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, ap)))<SUB>1742</SUB>> ]
+"8966" [label = <(&lt;operator&gt;.assignment,local_result = soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>1743</SUB>> ]
+"8978" [label = <(RETURN,return local_result;,return local_result;)<SUB>1744</SUB>> ]
+"8935" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1739</SUB>> ]
+"8960" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1742</SUB>> ]
+"8968" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>1743</SUB>> ]
+"8969" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>1743</SUB>> ]
+"8974" [label = <(GetL,result.GetL())<SUB>1743</SUB>> ]
+"8941" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1740</SUB>> ]
+"8970" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1743</SUB>> ]
+"8975" [label = <(&lt;operator&gt;.fieldAccess,result.GetL)<SUB>1743</SUB>> ]
+"8942" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1740</SUB>> ]
+"8946" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1740</SUB>> ]
+"8953" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>1740</SUB>> ]
+"8972" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1743</SUB>> ]
+"8977" [label = <(FIELD_IDENTIFIER,GetL,GetL)<SUB>1743</SUB>> ]
+"8947" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1740</SUB>> ]
+"8948" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1740</SUB>> ]
+"8950" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1740</SUB>> ]
+"8924" [label = <(METHOD,CallStaticObjectMethod)<SUB>1736</SUB>> ]
+"8980" [label = <(METHOD_RETURN,jobject)<SUB>1736</SUB>> ]
+  "8930" -> "8935" 
+  "8934" -> "8937" 
+  "8937" -> "8942" 
+  "8937" -> "8956" 
+  "8956" -> "8960" 
+  "8959" -> "8972" 
+  "8966" -> "8978" 
+  "8978" -> "8980" 
+  "8935" -> "8934" 
+  "8960" -> "8959" 
+  "8968" -> "8966" 
+  "8969" -> "8977" 
+  "8974" -> "8968" 
+  "8941" -> "8948" 
+  "8941" -> "8956" 
+  "8970" -> "8969" 
+  "8975" -> "8974" 
   "8942" -> "8941" 
-  "8903" -> "8902" 
-  "8907" -> "8914" 
-  "8914" -> "8947" 
-  "8943" -> "8942" 
-  "8908" -> "8907" 
-  "8945" -> "8943" 
-  "8909" -> "8911" 
-  "8911" -> "8908" 
-  "8893" -> "8899" 
+  "8946" -> "8953" 
+  "8953" -> "8980" 
+  "8972" -> "8970" 
+  "8977" -> "8975" 
+  "8947" -> "8946" 
+  "8948" -> "8950" 
+  "8950" -> "8947" 
+  "8924" -> "8930" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/167-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/167-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/167-cfg.dot	2023-06-07 19:35:28.327384340 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/167-cfg.dot	2023-06-07 19:35:34.857383767 +0330
@@ -1,59 +1,45 @@
-digraph "SetStaticIntField" {  
-"8955" [label = <(SET_STATIC_PRIMITIVE_FIELD,SET_STATIC_PRIMITIVE_FIELD(Int, v))<SUB>1803</SUB>> ]
-"8972" [label = <(soa,ScopedObjectAccess)<SUB>1803</SUB>> ]
-"8975" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1803</SUB>> ]
-"8982" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, nullptr, JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Int, v)&gt;(v)))<SUB>1803</SUB>> ]
-"8990" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetInt &lt; false &gt; (f-&gt;GetDeclaringClass(), v))<SUB>1803</SUB>> ]
-"8977" [label = <(SET_STATIC_PRIMITIVE_FIELD(Int, v),jni::DecodeArtField(fid))<SUB>1803</SUB>> ]
-"8985" [label = <(SET_STATIC_PRIMITIVE_FIELD(Int, v),JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Int, v)&gt;(v))<SUB>1803</SUB>> ]
-"8991" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetInt &lt; false)<SUB>1803</SUB>> ]
-"8996" [label = <(&lt;operator&gt;.bracketedPrimary,(f-&gt;GetDeclaringClass(), v))<SUB>1803</SUB>> ]
-"8978" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Int, v))<SUB>1803</SUB>> ]
-"8986" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Int, v))<SUB>1803</SUB>> ]
-"8992" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetInt)<SUB>1803</SUB>> ]
-"8997" [label = <(&lt;operator&gt;.expressionList,f-&gt;GetDeclaringClass(), v)<SUB>1803</SUB>> ]
-"8958" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1803</SUB>> ]
-"8980" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1803</SUB>> ]
-"8988" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Int, v)&gt;,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Int, v)&gt;)<SUB>1803</SUB>> ]
-"8994" [label = <(FIELD_IDENTIFIER,SetInt,SetInt)<SUB>1803</SUB>> ]
-"8998" [label = <(SET_STATIC_PRIMITIVE_FIELD(Int, v),f-&gt;GetDeclaringClass())<SUB>1803</SUB>> ]
-"8959" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1803</SUB>> ]
-"8963" [label = <(SET_STATIC_PRIMITIVE_FIELD(Int, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1803</SUB>> ]
-"8970" [label = <(RETURN,SET_STATIC_PRIMITIVE_FIELD(Int, v),SET_STATIC_PRIMITIVE_FIELD(Int, v))<SUB>1803</SUB>> ]
-"8999" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1803</SUB>> ]
-"8964" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1803</SUB>> ]
-"9001" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1803</SUB>> ]
-"8965" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1803</SUB>> ]
-"8967" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1803</SUB>> ]
-"8949" [label = <(METHOD,SetStaticIntField)<SUB>1802</SUB>> ]
-"9003" [label = <(METHOD_RETURN,void)<SUB>1802</SUB>> ]
-  "8955" -> "8959" 
-  "8955" -> "8972" 
-  "8972" -> "8980" 
-  "8975" -> "8988" 
-  "8982" -> "8994" 
-  "8990" -> "9003" 
-  "8977" -> "8975" 
-  "8985" -> "8982" 
-  "8991" -> "9001" 
-  "8996" -> "8990" 
-  "8978" -> "8977" 
-  "8986" -> "8985" 
-  "8992" -> "8991" 
-  "8997" -> "8996" 
-  "8958" -> "8965" 
-  "8958" -> "8972" 
-  "8980" -> "8978" 
-  "8988" -> "8986" 
-  "8994" -> "8992" 
+digraph "CallStaticObjectMethodV" {  
+"8988" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>1748</SUB>> ]
+"9007" [label = <(soa,soa(env))<SUB>1749</SUB>> ]
+"9010" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, args)))<SUB>1750</SUB>> ]
+"9016" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());)<SUB>1751</SUB>> ]
+"9011" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1750</SUB>> ]
+"9017" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>1751</SUB>> ]
+"9018" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>1751</SUB>> ]
+"9023" [label = <(GetL,result.GetL())<SUB>1751</SUB>> ]
+"8992" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1748</SUB>> ]
+"9019" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1751</SUB>> ]
+"9024" [label = <(&lt;operator&gt;.fieldAccess,result.GetL)<SUB>1751</SUB>> ]
+"8993" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1748</SUB>> ]
+"8997" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1748</SUB>> ]
+"9004" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>1748</SUB>> ]
+"9021" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1751</SUB>> ]
+"9026" [label = <(FIELD_IDENTIFIER,GetL,GetL)<SUB>1751</SUB>> ]
+"8998" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1748</SUB>> ]
+"8999" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1748</SUB>> ]
+"9001" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1748</SUB>> ]
+"8982" [label = <(METHOD,CallStaticObjectMethodV)<SUB>1747</SUB>> ]
+"9027" [label = <(METHOD_RETURN,jobject)<SUB>1747</SUB>> ]
+  "8988" -> "8993" 
+  "8988" -> "9007" 
+  "9007" -> "9011" 
+  "9010" -> "9021" 
+  "9016" -> "9027" 
+  "9011" -> "9010" 
+  "9017" -> "9016" 
+  "9018" -> "9026" 
+  "9023" -> "9017" 
+  "8992" -> "8999" 
+  "8992" -> "9007" 
+  "9019" -> "9018" 
+  "9024" -> "9023" 
+  "8993" -> "8992" 
+  "8997" -> "9004" 
+  "9004" -> "9027" 
+  "9021" -> "9019" 
+  "9026" -> "9024" 
   "8998" -> "8997" 
-  "8959" -> "8958" 
-  "8963" -> "8970" 
-  "8970" -> "9003" 
-  "8999" -> "8998" 
-  "8964" -> "8963" 
-  "9001" -> "8999" 
-  "8965" -> "8967" 
-  "8967" -> "8964" 
-  "8949" -> "8955" 
+  "8999" -> "9001" 
+  "9001" -> "8998" 
+  "8982" -> "8988" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/168-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/168-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/168-cfg.dot	2023-06-07 19:35:28.327384340 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/168-cfg.dot	2023-06-07 19:35:34.857383767 +0330
@@ -1,59 +1,45 @@
-digraph "SetStaticLongField" {  
-"9011" [label = <(SET_STATIC_PRIMITIVE_FIELD,SET_STATIC_PRIMITIVE_FIELD(Long, v))<SUB>1807</SUB>> ]
-"9028" [label = <(soa,ScopedObjectAccess)<SUB>1807</SUB>> ]
-"9031" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1807</SUB>> ]
-"9038" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, nullptr, JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Long, v)&gt;(v)))<SUB>1807</SUB>> ]
-"9046" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetLong &lt; false &gt; (f-&gt;GetDeclaringClass(), v))<SUB>1807</SUB>> ]
-"9033" [label = <(SET_STATIC_PRIMITIVE_FIELD(Long, v),jni::DecodeArtField(fid))<SUB>1807</SUB>> ]
-"9041" [label = <(SET_STATIC_PRIMITIVE_FIELD(Long, v),JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Long, v)&gt;(v))<SUB>1807</SUB>> ]
-"9047" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetLong &lt; false)<SUB>1807</SUB>> ]
-"9052" [label = <(&lt;operator&gt;.bracketedPrimary,(f-&gt;GetDeclaringClass(), v))<SUB>1807</SUB>> ]
-"9034" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Long, v))<SUB>1807</SUB>> ]
-"9042" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Long, v))<SUB>1807</SUB>> ]
-"9048" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetLong)<SUB>1807</SUB>> ]
-"9053" [label = <(&lt;operator&gt;.expressionList,f-&gt;GetDeclaringClass(), v)<SUB>1807</SUB>> ]
-"9014" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1807</SUB>> ]
-"9036" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1807</SUB>> ]
-"9044" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Long, v)&gt;,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Long, v)&gt;)<SUB>1807</SUB>> ]
-"9050" [label = <(FIELD_IDENTIFIER,SetLong,SetLong)<SUB>1807</SUB>> ]
-"9054" [label = <(SET_STATIC_PRIMITIVE_FIELD(Long, v),f-&gt;GetDeclaringClass())<SUB>1807</SUB>> ]
-"9015" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1807</SUB>> ]
-"9019" [label = <(SET_STATIC_PRIMITIVE_FIELD(Long, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1807</SUB>> ]
-"9026" [label = <(RETURN,SET_STATIC_PRIMITIVE_FIELD(Long, v),SET_STATIC_PRIMITIVE_FIELD(Long, v))<SUB>1807</SUB>> ]
-"9055" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1807</SUB>> ]
-"9020" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1807</SUB>> ]
-"9057" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1807</SUB>> ]
-"9021" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1807</SUB>> ]
-"9023" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1807</SUB>> ]
-"9005" [label = <(METHOD,SetStaticLongField)<SUB>1806</SUB>> ]
-"9059" [label = <(METHOD_RETURN,void)<SUB>1806</SUB>> ]
-  "9011" -> "9015" 
-  "9011" -> "9028" 
-  "9028" -> "9036" 
-  "9031" -> "9044" 
-  "9038" -> "9050" 
-  "9046" -> "9059" 
-  "9033" -> "9031" 
-  "9041" -> "9038" 
-  "9047" -> "9057" 
-  "9052" -> "9046" 
-  "9034" -> "9033" 
-  "9042" -> "9041" 
-  "9048" -> "9047" 
-  "9053" -> "9052" 
-  "9014" -> "9021" 
-  "9014" -> "9028" 
-  "9036" -> "9034" 
-  "9044" -> "9042" 
-  "9050" -> "9048" 
-  "9054" -> "9053" 
-  "9015" -> "9014" 
-  "9019" -> "9026" 
-  "9026" -> "9059" 
-  "9055" -> "9054" 
-  "9020" -> "9019" 
-  "9057" -> "9055" 
-  "9021" -> "9023" 
-  "9023" -> "9020" 
-  "9005" -> "9011" 
+digraph "CallStaticObjectMethodA" {  
+"9035" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>1755</SUB>> ]
+"9054" [label = <(soa,soa(env))<SUB>1756</SUB>> ]
+"9057" [label = <(result,result(InvokeWithJValues(soa, nullptr, mid, args)))<SUB>1757</SUB>> ]
+"9063" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());)<SUB>1758</SUB>> ]
+"9058" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1757</SUB>> ]
+"9064" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>1758</SUB>> ]
+"9065" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>1758</SUB>> ]
+"9070" [label = <(GetL,result.GetL())<SUB>1758</SUB>> ]
+"9039" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1755</SUB>> ]
+"9066" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1758</SUB>> ]
+"9071" [label = <(&lt;operator&gt;.fieldAccess,result.GetL)<SUB>1758</SUB>> ]
+"9040" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1755</SUB>> ]
+"9044" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1755</SUB>> ]
+"9051" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>1755</SUB>> ]
+"9068" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1758</SUB>> ]
+"9073" [label = <(FIELD_IDENTIFIER,GetL,GetL)<SUB>1758</SUB>> ]
+"9045" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1755</SUB>> ]
+"9046" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1755</SUB>> ]
+"9048" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1755</SUB>> ]
+"9029" [label = <(METHOD,CallStaticObjectMethodA)<SUB>1754</SUB>> ]
+"9074" [label = <(METHOD_RETURN,jobject)<SUB>1754</SUB>> ]
+  "9035" -> "9040" 
+  "9035" -> "9054" 
+  "9054" -> "9058" 
+  "9057" -> "9068" 
+  "9063" -> "9074" 
+  "9058" -> "9057" 
+  "9064" -> "9063" 
+  "9065" -> "9073" 
+  "9070" -> "9064" 
+  "9039" -> "9046" 
+  "9039" -> "9054" 
+  "9066" -> "9065" 
+  "9071" -> "9070" 
+  "9040" -> "9039" 
+  "9044" -> "9051" 
+  "9051" -> "9074" 
+  "9068" -> "9066" 
+  "9073" -> "9071" 
+  "9045" -> "9044" 
+  "9046" -> "9048" 
+  "9048" -> "9045" 
+  "9029" -> "9035" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/169-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/169-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/169-cfg.dot	2023-06-07 19:35:28.327384340 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/169-cfg.dot	2023-06-07 19:35:34.857383767 +0330
@@ -1,59 +1,43 @@
-digraph "SetStaticShortField" {  
-"9067" [label = <(SET_STATIC_PRIMITIVE_FIELD,SET_STATIC_PRIMITIVE_FIELD(Short, v))<SUB>1811</SUB>> ]
-"9084" [label = <(soa,ScopedObjectAccess)<SUB>1811</SUB>> ]
-"9087" [label = <(&lt;operator&gt;.assignment,ArtField *)<SUB>1811</SUB>> ]
-"9094" [label = <(NotifySetPrimitiveField,NotifySetPrimitiveField(f, nullptr, JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Short, v)&gt;(v)))<SUB>1811</SUB>> ]
-"9102" [label = <(&lt;operator&gt;.greaterThan,f-&gt;SetShort &lt; false &gt; (f-&gt;GetDeclaringClass(), v))<SUB>1811</SUB>> ]
-"9089" [label = <(SET_STATIC_PRIMITIVE_FIELD(Short, v),jni::DecodeArtField(fid))<SUB>1811</SUB>> ]
-"9097" [label = <(SET_STATIC_PRIMITIVE_FIELD(Short, v),JValue::FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Short, v)&gt;(v))<SUB>1811</SUB>> ]
-"9103" [label = <(&lt;operator&gt;.lessThan,f-&gt;SetShort &lt; false)<SUB>1811</SUB>> ]
-"9108" [label = <(&lt;operator&gt;.bracketedPrimary,(f-&gt;GetDeclaringClass(), v))<SUB>1811</SUB>> ]
-"9090" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Short, v))<SUB>1811</SUB>> ]
-"9098" [label = <(&lt;operator&gt;.fieldAccess,SET_STATIC_PRIMITIVE_FIELD(Short, v))<SUB>1811</SUB>> ]
-"9104" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;SetShort)<SUB>1811</SUB>> ]
-"9109" [label = <(&lt;operator&gt;.expressionList,f-&gt;GetDeclaringClass(), v)<SUB>1811</SUB>> ]
-"9070" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>1811</SUB>> ]
-"9092" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>1811</SUB>> ]
-"9100" [label = <(FIELD_IDENTIFIER,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Short, v)&gt;,FromPrimitive&lt;SET_STATIC_PRIMITIVE_FIELD(Short, v)&gt;)<SUB>1811</SUB>> ]
-"9106" [label = <(FIELD_IDENTIFIER,SetShort,SetShort)<SUB>1811</SUB>> ]
-"9110" [label = <(SET_STATIC_PRIMITIVE_FIELD(Short, v),f-&gt;GetDeclaringClass())<SUB>1811</SUB>> ]
-"9071" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>1811</SUB>> ]
-"9075" [label = <(SET_STATIC_PRIMITIVE_FIELD(Short, v),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>1811</SUB>> ]
-"9082" [label = <(RETURN,SET_STATIC_PRIMITIVE_FIELD(Short, v),SET_STATIC_PRIMITIVE_FIELD(Short, v))<SUB>1811</SUB>> ]
-"9111" [label = <(&lt;operator&gt;.indirectFieldAccess,f-&gt;GetDeclaringClass)<SUB>1811</SUB>> ]
-"9076" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1811</SUB>> ]
-"9113" [label = <(FIELD_IDENTIFIER,GetDeclaringClass,GetDeclaringClass)<SUB>1811</SUB>> ]
-"9077" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1811</SUB>> ]
-"9079" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1811</SUB>> ]
-"9061" [label = <(METHOD,SetStaticShortField)<SUB>1810</SUB>> ]
-"9115" [label = <(METHOD_RETURN,void)<SUB>1810</SUB>> ]
-  "9067" -> "9071" 
-  "9067" -> "9084" 
-  "9084" -> "9092" 
-  "9087" -> "9100" 
-  "9094" -> "9106" 
-  "9102" -> "9115" 
-  "9089" -> "9087" 
-  "9097" -> "9094" 
-  "9103" -> "9113" 
-  "9108" -> "9102" 
-  "9090" -> "9089" 
-  "9098" -> "9097" 
-  "9104" -> "9103" 
-  "9109" -> "9108" 
-  "9070" -> "9077" 
-  "9070" -> "9084" 
-  "9092" -> "9090" 
-  "9100" -> "9098" 
-  "9106" -> "9104" 
-  "9110" -> "9109" 
-  "9071" -> "9070" 
-  "9075" -> "9082" 
-  "9082" -> "9115" 
-  "9111" -> "9110" 
-  "9076" -> "9075" 
-  "9113" -> "9111" 
-  "9077" -> "9079" 
-  "9079" -> "9076" 
-  "9061" -> "9067" 
+digraph "CallStaticBooleanMethod" {  
+"9082" [label = <(va_start,va_start(ap, mid))<SUB>1763</SUB>> ]
+"9086" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1764</SUB>> ]
+"9089" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1765</SUB>> ]
+"9108" [label = <(soa,soa(env))<SUB>1766</SUB>> ]
+"9111" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, ap)))<SUB>1767</SUB>> ]
+"9117" [label = <(RETURN,return result.GetZ();,return result.GetZ();)<SUB>1768</SUB>> ]
+"9087" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1764</SUB>> ]
+"9112" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1767</SUB>> ]
+"9118" [label = <(GetZ,result.GetZ())<SUB>1768</SUB>> ]
+"9119" [label = <(&lt;operator&gt;.fieldAccess,result.GetZ)<SUB>1768</SUB>> ]
+"9093" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1765</SUB>> ]
+"9121" [label = <(FIELD_IDENTIFIER,GetZ,GetZ)<SUB>1768</SUB>> ]
+"9094" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1765</SUB>> ]
+"9098" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1765</SUB>> ]
+"9105" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1765</SUB>> ]
+"9099" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1765</SUB>> ]
+"9100" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1765</SUB>> ]
+"9102" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1765</SUB>> ]
+"9076" [label = <(METHOD,CallStaticBooleanMethod)<SUB>1761</SUB>> ]
+"9122" [label = <(METHOD_RETURN,jboolean)<SUB>1761</SUB>> ]
+  "9082" -> "9087" 
+  "9086" -> "9089" 
+  "9089" -> "9094" 
+  "9089" -> "9108" 
+  "9108" -> "9112" 
+  "9111" -> "9121" 
+  "9117" -> "9122" 
+  "9087" -> "9086" 
+  "9112" -> "9111" 
+  "9118" -> "9117" 
+  "9119" -> "9118" 
+  "9093" -> "9100" 
+  "9093" -> "9108" 
+  "9121" -> "9119" 
+  "9094" -> "9093" 
+  "9098" -> "9105" 
+  "9105" -> "9122" 
+  "9099" -> "9098" 
+  "9100" -> "9102" 
+  "9102" -> "9099" 
+  "9076" -> "9082" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/17-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/17-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/17-cfg.dot	2023-06-07 19:35:28.217384348 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/17-cfg.dot	2023-06-07 19:35:34.747383777 +0330
@@ -1,5 +1,61 @@
-digraph "CodeRangeCache" {  
-"405" [label = <(METHOD,CodeRangeCache)<SUB>245</SUB>> ]
-"407" [label = <(METHOD_RETURN,ANY)<SUB>245</SUB>> ]
-  "405" -> "407" 
+digraph "IsWhitelistedNativeCaller" {  
+"371" [label = <(RETURN,return false;,return false;)<SUB>255</SUB>> ]
+"316" [label = <(&lt;operator&gt;.logicalNot,!art::kIsTargetBuild)<SUB>242</SUB>> ]
+"329" [label = <(&lt;operator&gt;.lessThan,i &lt; kMaxReturnAddressDepth)<SUB>245</SUB>> ]
+"332" [label = <(&lt;operator&gt;.preIncrement,++i)<SUB>245</SUB>> ]
+"317" [label = <(&lt;operator&gt;.fieldAccess,art::kIsTargetBuild)<SUB>242</SUB>> ]
+"321" [label = <(RETURN,return false;,return false;)<SUB>243</SUB>> ]
+"326" [label = <(&lt;operator&gt;.assignment,i = 0)<SUB>245</SUB>> ]
+"336" [label = <(&lt;operator&gt;.assignment,* return_address = GetReturnAddress(i))<SUB>246</SUB>> ]
+"348" [label = <(&lt;operator&gt;.assignment,kind = CodeRangeCache::GetSingleton().GetSharedObjectKind(return_address))<SUB>250</SUB>> ]
+"319" [label = <(FIELD_IDENTIFIER,kIsTargetBuild,kIsTargetBuild)<SUB>242</SUB>> ]
+"338" [label = <(GetReturnAddress,GetReturnAddress(i))<SUB>246</SUB>> ]
+"341" [label = <(&lt;operator&gt;.equals,return_address == nullptr)<SUB>247</SUB>> ]
+"350" [label = <(GetSharedObjectKind,CodeRangeCache::GetSingleton().GetSharedObjectKind(return_address))<SUB>250</SUB>> ]
+"359" [label = <(&lt;operator&gt;.notEquals,kind != SharedObjectKind::kRuntime)<SUB>251</SUB>> ]
+"345" [label = <(RETURN,return false;,return false;)<SUB>248</SUB>> ]
+"351" [label = <(&lt;operator&gt;.fieldAccess,CodeRangeCache::GetSingleton().GetSharedObjectKind)<SUB>250</SUB>> ]
+"361" [label = <(&lt;operator&gt;.fieldAccess,SharedObjectKind::kRuntime)<SUB>251</SUB>> ]
+"365" [label = <(RETURN,return kind == SharedObjectKind::kApexModule;,return kind == SharedObjectKind::kApexModule;)<SUB>252</SUB>> ]
+"352" [label = <(CodeRangeCache::GetSingleton,CodeRangeCache::GetSingleton())<SUB>250</SUB>> ]
+"356" [label = <(FIELD_IDENTIFIER,GetSharedObjectKind,GetSharedObjectKind)<SUB>250</SUB>> ]
+"363" [label = <(FIELD_IDENTIFIER,kRuntime,kRuntime)<SUB>251</SUB>> ]
+"366" [label = <(&lt;operator&gt;.equals,kind == SharedObjectKind::kApexModule)<SUB>252</SUB>> ]
+"353" [label = <(&lt;operator&gt;.fieldAccess,CodeRangeCache::GetSingleton)<SUB>250</SUB>> ]
+"368" [label = <(&lt;operator&gt;.fieldAccess,SharedObjectKind::kApexModule)<SUB>252</SUB>> ]
+"355" [label = <(FIELD_IDENTIFIER,GetSingleton,GetSingleton)<SUB>250</SUB>> ]
+"370" [label = <(FIELD_IDENTIFIER,kApexModule,kApexModule)<SUB>252</SUB>> ]
+"313" [label = <(METHOD,IsWhitelistedNativeCaller)<SUB>241</SUB>> ]
+"373" [label = <(METHOD_RETURN,bool)<SUB>241</SUB>> ]
+  "371" -> "373" 
+  "316" -> "321" 
+  "316" -> "326" 
+  "329" -> "338" 
+  "329" -> "371" 
+  "332" -> "329" 
+  "317" -> "316" 
+  "321" -> "373" 
+  "326" -> "329" 
+  "336" -> "341" 
+  "348" -> "363" 
+  "319" -> "317" 
+  "338" -> "336" 
+  "341" -> "345" 
+  "341" -> "355" 
+  "350" -> "348" 
+  "359" -> "370" 
+  "359" -> "332" 
+  "345" -> "373" 
+  "351" -> "350" 
+  "361" -> "359" 
+  "365" -> "373" 
+  "352" -> "356" 
+  "356" -> "351" 
+  "363" -> "361" 
+  "366" -> "365" 
+  "353" -> "352" 
+  "368" -> "366" 
+  "355" -> "353" 
+  "370" -> "368" 
+  "313" -> "319" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/170-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/170-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/170-cfg.dot	2023-06-07 19:35:28.327384340 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/170-cfg.dot	2023-06-07 19:35:34.857383767 +0330
@@ -1,53 +1,35 @@
-digraph "CallStaticObjectMethod" {  
-"9123" [label = <(va_start,va_start(ap, mid))<SUB>1816</SUB>> ]
-"9127" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1817</SUB>> ]
-"9130" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>1818</SUB>> ]
-"9149" [label = <(soa,soa(env))<SUB>1819</SUB>> ]
-"9152" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, ap)))<SUB>1820</SUB>> ]
-"9159" [label = <(&lt;operator&gt;.assignment,local_result = soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>1821</SUB>> ]
-"9171" [label = <(RETURN,return local_result;,return local_result;)<SUB>1822</SUB>> ]
-"9128" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1817</SUB>> ]
-"9153" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1820</SUB>> ]
-"9161" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>1821</SUB>> ]
-"9162" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>1821</SUB>> ]
-"9167" [label = <(GetL,result.GetL())<SUB>1821</SUB>> ]
-"9134" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1818</SUB>> ]
-"9163" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1821</SUB>> ]
-"9168" [label = <(&lt;operator&gt;.fieldAccess,result.GetL)<SUB>1821</SUB>> ]
-"9135" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1818</SUB>> ]
-"9139" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1818</SUB>> ]
-"9146" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>1818</SUB>> ]
-"9165" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1821</SUB>> ]
-"9170" [label = <(FIELD_IDENTIFIER,GetL,GetL)<SUB>1821</SUB>> ]
-"9140" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1818</SUB>> ]
-"9141" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1818</SUB>> ]
-"9143" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1818</SUB>> ]
-"9117" [label = <(METHOD,CallStaticObjectMethod)<SUB>1814</SUB>> ]
-"9173" [label = <(METHOD_RETURN,jobject)<SUB>1814</SUB>> ]
-  "9123" -> "9128" 
-  "9127" -> "9130" 
+digraph "CallStaticBooleanMethodV" {  
+"9130" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1772</SUB>> ]
+"9149" [label = <(soa,soa(env))<SUB>1773</SUB>> ]
+"9151" [label = <(RETURN,return InvokeWithVarArgs(soa, nullptr, mid, args).GetZ();,return InvokeWithVarArgs(soa, nullptr, mid, args).GetZ();)<SUB>1774</SUB>> ]
+"9152" [label = <(GetZ,InvokeWithVarArgs(soa, nullptr, mid, args).GetZ())<SUB>1774</SUB>> ]
+"9153" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, nullptr, mid, args).GetZ)<SUB>1774</SUB>> ]
+"9134" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1772</SUB>> ]
+"9154" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1774</SUB>> ]
+"9159" [label = <(FIELD_IDENTIFIER,GetZ,GetZ)<SUB>1774</SUB>> ]
+"9135" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1772</SUB>> ]
+"9139" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1772</SUB>> ]
+"9146" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1772</SUB>> ]
+"9140" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1772</SUB>> ]
+"9141" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1772</SUB>> ]
+"9143" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1772</SUB>> ]
+"9124" [label = <(METHOD,CallStaticBooleanMethodV)<SUB>1771</SUB>> ]
+"9160" [label = <(METHOD_RETURN,jboolean)<SUB>1771</SUB>> ]
   "9130" -> "9135" 
   "9130" -> "9149" 
-  "9149" -> "9153" 
-  "9152" -> "9165" 
-  "9159" -> "9171" 
-  "9171" -> "9173" 
-  "9128" -> "9127" 
+  "9149" -> "9154" 
+  "9151" -> "9160" 
+  "9152" -> "9151" 
   "9153" -> "9152" 
-  "9161" -> "9159" 
-  "9162" -> "9170" 
-  "9167" -> "9161" 
   "9134" -> "9141" 
   "9134" -> "9149" 
-  "9163" -> "9162" 
-  "9168" -> "9167" 
+  "9154" -> "9159" 
+  "9159" -> "9153" 
   "9135" -> "9134" 
   "9139" -> "9146" 
-  "9146" -> "9173" 
-  "9165" -> "9163" 
-  "9170" -> "9168" 
+  "9146" -> "9160" 
   "9140" -> "9139" 
   "9141" -> "9143" 
   "9143" -> "9140" 
-  "9117" -> "9123" 
+  "9124" -> "9130" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/171-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/171-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/171-cfg.dot	2023-06-07 19:35:28.327384340 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/171-cfg.dot	2023-06-07 19:35:34.857383767 +0330
@@ -1,45 +1,35 @@
-digraph "CallStaticObjectMethodV" {  
-"9181" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>1826</SUB>> ]
-"9200" [label = <(soa,soa(env))<SUB>1827</SUB>> ]
-"9203" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, args)))<SUB>1828</SUB>> ]
-"9209" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());)<SUB>1829</SUB>> ]
-"9204" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1828</SUB>> ]
-"9210" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>1829</SUB>> ]
-"9211" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>1829</SUB>> ]
-"9216" [label = <(GetL,result.GetL())<SUB>1829</SUB>> ]
-"9185" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1826</SUB>> ]
-"9212" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1829</SUB>> ]
-"9217" [label = <(&lt;operator&gt;.fieldAccess,result.GetL)<SUB>1829</SUB>> ]
-"9186" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1826</SUB>> ]
-"9190" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1826</SUB>> ]
-"9197" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>1826</SUB>> ]
-"9214" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1829</SUB>> ]
-"9219" [label = <(FIELD_IDENTIFIER,GetL,GetL)<SUB>1829</SUB>> ]
-"9191" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1826</SUB>> ]
-"9192" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1826</SUB>> ]
-"9194" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1826</SUB>> ]
-"9175" [label = <(METHOD,CallStaticObjectMethodV)<SUB>1825</SUB>> ]
-"9220" [label = <(METHOD_RETURN,jobject)<SUB>1825</SUB>> ]
-  "9181" -> "9186" 
-  "9181" -> "9200" 
-  "9200" -> "9204" 
-  "9203" -> "9214" 
-  "9209" -> "9220" 
-  "9204" -> "9203" 
-  "9210" -> "9209" 
-  "9211" -> "9219" 
-  "9216" -> "9210" 
-  "9185" -> "9192" 
-  "9185" -> "9200" 
-  "9212" -> "9211" 
-  "9217" -> "9216" 
-  "9186" -> "9185" 
-  "9190" -> "9197" 
-  "9197" -> "9220" 
-  "9214" -> "9212" 
-  "9219" -> "9217" 
+digraph "CallStaticBooleanMethodA" {  
+"9168" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1778</SUB>> ]
+"9187" [label = <(soa,soa(env))<SUB>1779</SUB>> ]
+"9189" [label = <(RETURN,return InvokeWithJValues(soa, nullptr, mid, args).GetZ();,return InvokeWithJValues(soa, nullptr, mid, args).GetZ();)<SUB>1780</SUB>> ]
+"9190" [label = <(GetZ,InvokeWithJValues(soa, nullptr, mid, args).GetZ())<SUB>1780</SUB>> ]
+"9191" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, nullptr, mid, args).GetZ)<SUB>1780</SUB>> ]
+"9172" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1778</SUB>> ]
+"9192" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1780</SUB>> ]
+"9197" [label = <(FIELD_IDENTIFIER,GetZ,GetZ)<SUB>1780</SUB>> ]
+"9173" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1778</SUB>> ]
+"9177" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1778</SUB>> ]
+"9184" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1778</SUB>> ]
+"9178" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1778</SUB>> ]
+"9179" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1778</SUB>> ]
+"9181" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1778</SUB>> ]
+"9162" [label = <(METHOD,CallStaticBooleanMethodA)<SUB>1777</SUB>> ]
+"9198" [label = <(METHOD_RETURN,jboolean)<SUB>1777</SUB>> ]
+  "9168" -> "9173" 
+  "9168" -> "9187" 
+  "9187" -> "9192" 
+  "9189" -> "9198" 
+  "9190" -> "9189" 
   "9191" -> "9190" 
-  "9192" -> "9194" 
-  "9194" -> "9191" 
-  "9175" -> "9181" 
+  "9172" -> "9179" 
+  "9172" -> "9187" 
+  "9192" -> "9197" 
+  "9197" -> "9191" 
+  "9173" -> "9172" 
+  "9177" -> "9184" 
+  "9184" -> "9198" 
+  "9178" -> "9177" 
+  "9179" -> "9181" 
+  "9181" -> "9178" 
+  "9162" -> "9168" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/172-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/172-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/172-cfg.dot	2023-06-07 19:35:28.337384337 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/172-cfg.dot	2023-06-07 19:35:34.857383767 +0330
@@ -1,45 +1,43 @@
-digraph "CallStaticObjectMethodA" {  
-"9228" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>1833</SUB>> ]
-"9247" [label = <(soa,soa(env))<SUB>1834</SUB>> ]
-"9250" [label = <(result,result(InvokeWithJValues(soa, nullptr, mid, args)))<SUB>1835</SUB>> ]
-"9256" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());)<SUB>1836</SUB>> ]
-"9251" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1835</SUB>> ]
-"9257" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>1836</SUB>> ]
-"9258" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>1836</SUB>> ]
-"9263" [label = <(GetL,result.GetL())<SUB>1836</SUB>> ]
-"9232" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1833</SUB>> ]
-"9259" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1836</SUB>> ]
-"9264" [label = <(&lt;operator&gt;.fieldAccess,result.GetL)<SUB>1836</SUB>> ]
-"9233" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1833</SUB>> ]
-"9237" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1833</SUB>> ]
-"9244" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>1833</SUB>> ]
-"9261" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1836</SUB>> ]
-"9266" [label = <(FIELD_IDENTIFIER,GetL,GetL)<SUB>1836</SUB>> ]
-"9238" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1833</SUB>> ]
-"9239" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1833</SUB>> ]
-"9241" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1833</SUB>> ]
-"9222" [label = <(METHOD,CallStaticObjectMethodA)<SUB>1832</SUB>> ]
-"9267" [label = <(METHOD_RETURN,jobject)<SUB>1832</SUB>> ]
-  "9228" -> "9233" 
-  "9228" -> "9247" 
-  "9247" -> "9251" 
-  "9250" -> "9261" 
-  "9256" -> "9267" 
-  "9251" -> "9250" 
-  "9257" -> "9256" 
-  "9258" -> "9266" 
-  "9263" -> "9257" 
-  "9232" -> "9239" 
-  "9232" -> "9247" 
-  "9259" -> "9258" 
-  "9264" -> "9263" 
-  "9233" -> "9232" 
-  "9237" -> "9244" 
-  "9244" -> "9267" 
-  "9261" -> "9259" 
-  "9266" -> "9264" 
-  "9238" -> "9237" 
-  "9239" -> "9241" 
-  "9241" -> "9238" 
-  "9222" -> "9228" 
+digraph "CallStaticByteMethod" {  
+"9206" [label = <(va_start,va_start(ap, mid))<SUB>1785</SUB>> ]
+"9210" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1786</SUB>> ]
+"9213" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1787</SUB>> ]
+"9232" [label = <(soa,soa(env))<SUB>1788</SUB>> ]
+"9235" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, ap)))<SUB>1789</SUB>> ]
+"9241" [label = <(RETURN,return result.GetB();,return result.GetB();)<SUB>1790</SUB>> ]
+"9211" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1786</SUB>> ]
+"9236" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1789</SUB>> ]
+"9242" [label = <(GetB,result.GetB())<SUB>1790</SUB>> ]
+"9243" [label = <(&lt;operator&gt;.fieldAccess,result.GetB)<SUB>1790</SUB>> ]
+"9217" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1787</SUB>> ]
+"9245" [label = <(FIELD_IDENTIFIER,GetB,GetB)<SUB>1790</SUB>> ]
+"9218" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1787</SUB>> ]
+"9222" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1787</SUB>> ]
+"9229" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1787</SUB>> ]
+"9223" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1787</SUB>> ]
+"9224" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1787</SUB>> ]
+"9226" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1787</SUB>> ]
+"9200" [label = <(METHOD,CallStaticByteMethod)<SUB>1783</SUB>> ]
+"9246" [label = <(METHOD_RETURN,jbyte)<SUB>1783</SUB>> ]
+  "9206" -> "9211" 
+  "9210" -> "9213" 
+  "9213" -> "9218" 
+  "9213" -> "9232" 
+  "9232" -> "9236" 
+  "9235" -> "9245" 
+  "9241" -> "9246" 
+  "9211" -> "9210" 
+  "9236" -> "9235" 
+  "9242" -> "9241" 
+  "9243" -> "9242" 
+  "9217" -> "9224" 
+  "9217" -> "9232" 
+  "9245" -> "9243" 
+  "9218" -> "9217" 
+  "9222" -> "9229" 
+  "9229" -> "9246" 
+  "9223" -> "9222" 
+  "9224" -> "9226" 
+  "9226" -> "9223" 
+  "9200" -> "9206" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/173-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/173-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/173-cfg.dot	2023-06-07 19:35:28.337384337 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/173-cfg.dot	2023-06-07 19:35:34.857383767 +0330
@@ -1,43 +1,35 @@
-digraph "CallStaticBooleanMethod" {  
-"9275" [label = <(va_start,va_start(ap, mid))<SUB>1841</SUB>> ]
-"9279" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1842</SUB>> ]
-"9282" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1843</SUB>> ]
-"9301" [label = <(soa,soa(env))<SUB>1844</SUB>> ]
-"9304" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, ap)))<SUB>1845</SUB>> ]
-"9310" [label = <(RETURN,return result.GetZ();,return result.GetZ();)<SUB>1846</SUB>> ]
-"9280" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1842</SUB>> ]
-"9305" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1845</SUB>> ]
-"9311" [label = <(GetZ,result.GetZ())<SUB>1846</SUB>> ]
-"9312" [label = <(&lt;operator&gt;.fieldAccess,result.GetZ)<SUB>1846</SUB>> ]
-"9286" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1843</SUB>> ]
-"9314" [label = <(FIELD_IDENTIFIER,GetZ,GetZ)<SUB>1846</SUB>> ]
-"9287" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1843</SUB>> ]
-"9291" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1843</SUB>> ]
-"9298" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1843</SUB>> ]
-"9292" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1843</SUB>> ]
-"9293" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1843</SUB>> ]
-"9295" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1843</SUB>> ]
-"9269" [label = <(METHOD,CallStaticBooleanMethod)<SUB>1839</SUB>> ]
-"9315" [label = <(METHOD_RETURN,jboolean)<SUB>1839</SUB>> ]
-  "9275" -> "9280" 
-  "9279" -> "9282" 
-  "9282" -> "9287" 
-  "9282" -> "9301" 
-  "9301" -> "9305" 
-  "9304" -> "9314" 
-  "9310" -> "9315" 
-  "9280" -> "9279" 
-  "9305" -> "9304" 
-  "9311" -> "9310" 
-  "9312" -> "9311" 
-  "9286" -> "9293" 
-  "9286" -> "9301" 
-  "9314" -> "9312" 
-  "9287" -> "9286" 
-  "9291" -> "9298" 
-  "9298" -> "9315" 
-  "9292" -> "9291" 
-  "9293" -> "9295" 
-  "9295" -> "9292" 
-  "9269" -> "9275" 
+digraph "CallStaticByteMethodV" {  
+"9254" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1794</SUB>> ]
+"9273" [label = <(soa,soa(env))<SUB>1795</SUB>> ]
+"9275" [label = <(RETURN,return InvokeWithVarArgs(soa, nullptr, mid, args).GetB();,return InvokeWithVarArgs(soa, nullptr, mid, args).GetB();)<SUB>1796</SUB>> ]
+"9276" [label = <(GetB,InvokeWithVarArgs(soa, nullptr, mid, args).GetB())<SUB>1796</SUB>> ]
+"9277" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, nullptr, mid, args).GetB)<SUB>1796</SUB>> ]
+"9258" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1794</SUB>> ]
+"9278" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1796</SUB>> ]
+"9283" [label = <(FIELD_IDENTIFIER,GetB,GetB)<SUB>1796</SUB>> ]
+"9259" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1794</SUB>> ]
+"9263" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1794</SUB>> ]
+"9270" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1794</SUB>> ]
+"9264" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1794</SUB>> ]
+"9265" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1794</SUB>> ]
+"9267" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1794</SUB>> ]
+"9248" [label = <(METHOD,CallStaticByteMethodV)<SUB>1793</SUB>> ]
+"9284" [label = <(METHOD_RETURN,jbyte)<SUB>1793</SUB>> ]
+  "9254" -> "9259" 
+  "9254" -> "9273" 
+  "9273" -> "9278" 
+  "9275" -> "9284" 
+  "9276" -> "9275" 
+  "9277" -> "9276" 
+  "9258" -> "9265" 
+  "9258" -> "9273" 
+  "9278" -> "9283" 
+  "9283" -> "9277" 
+  "9259" -> "9258" 
+  "9263" -> "9270" 
+  "9270" -> "9284" 
+  "9264" -> "9263" 
+  "9265" -> "9267" 
+  "9267" -> "9264" 
+  "9248" -> "9254" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/174-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/174-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/174-cfg.dot	2023-06-07 19:35:28.337384337 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/174-cfg.dot	2023-06-07 19:35:34.857383767 +0330
@@ -1,35 +1,35 @@
-digraph "CallStaticBooleanMethodV" {  
-"9323" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1850</SUB>> ]
-"9342" [label = <(soa,soa(env))<SUB>1851</SUB>> ]
-"9344" [label = <(RETURN,return InvokeWithVarArgs(soa, nullptr, mid, args).GetZ();,return InvokeWithVarArgs(soa, nullptr, mid, args).GetZ();)<SUB>1852</SUB>> ]
-"9345" [label = <(GetZ,InvokeWithVarArgs(soa, nullptr, mid, args).GetZ())<SUB>1852</SUB>> ]
-"9346" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, nullptr, mid, args).GetZ)<SUB>1852</SUB>> ]
-"9327" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1850</SUB>> ]
-"9347" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1852</SUB>> ]
-"9352" [label = <(FIELD_IDENTIFIER,GetZ,GetZ)<SUB>1852</SUB>> ]
-"9328" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1850</SUB>> ]
-"9332" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1850</SUB>> ]
-"9339" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1850</SUB>> ]
-"9333" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1850</SUB>> ]
-"9334" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1850</SUB>> ]
-"9336" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1850</SUB>> ]
-"9317" [label = <(METHOD,CallStaticBooleanMethodV)<SUB>1849</SUB>> ]
-"9353" [label = <(METHOD_RETURN,jboolean)<SUB>1849</SUB>> ]
-  "9323" -> "9328" 
-  "9323" -> "9342" 
-  "9342" -> "9347" 
-  "9344" -> "9353" 
-  "9345" -> "9344" 
-  "9346" -> "9345" 
-  "9327" -> "9334" 
-  "9327" -> "9342" 
-  "9347" -> "9352" 
-  "9352" -> "9346" 
-  "9328" -> "9327" 
-  "9332" -> "9339" 
-  "9339" -> "9353" 
-  "9333" -> "9332" 
-  "9334" -> "9336" 
-  "9336" -> "9333" 
-  "9317" -> "9323" 
+digraph "CallStaticByteMethodA" {  
+"9292" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1800</SUB>> ]
+"9311" [label = <(soa,soa(env))<SUB>1801</SUB>> ]
+"9313" [label = <(RETURN,return InvokeWithJValues(soa, nullptr, mid, args).GetB();,return InvokeWithJValues(soa, nullptr, mid, args).GetB();)<SUB>1802</SUB>> ]
+"9314" [label = <(GetB,InvokeWithJValues(soa, nullptr, mid, args).GetB())<SUB>1802</SUB>> ]
+"9315" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, nullptr, mid, args).GetB)<SUB>1802</SUB>> ]
+"9296" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1800</SUB>> ]
+"9316" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1802</SUB>> ]
+"9321" [label = <(FIELD_IDENTIFIER,GetB,GetB)<SUB>1802</SUB>> ]
+"9297" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1800</SUB>> ]
+"9301" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1800</SUB>> ]
+"9308" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1800</SUB>> ]
+"9302" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1800</SUB>> ]
+"9303" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1800</SUB>> ]
+"9305" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1800</SUB>> ]
+"9286" [label = <(METHOD,CallStaticByteMethodA)<SUB>1799</SUB>> ]
+"9322" [label = <(METHOD_RETURN,jbyte)<SUB>1799</SUB>> ]
+  "9292" -> "9297" 
+  "9292" -> "9311" 
+  "9311" -> "9316" 
+  "9313" -> "9322" 
+  "9314" -> "9313" 
+  "9315" -> "9314" 
+  "9296" -> "9303" 
+  "9296" -> "9311" 
+  "9316" -> "9321" 
+  "9321" -> "9315" 
+  "9297" -> "9296" 
+  "9301" -> "9308" 
+  "9308" -> "9322" 
+  "9302" -> "9301" 
+  "9303" -> "9305" 
+  "9305" -> "9302" 
+  "9286" -> "9292" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/175-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/175-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/175-cfg.dot	2023-06-07 19:35:28.337384337 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/175-cfg.dot	2023-06-07 19:35:34.857383767 +0330
@@ -1,35 +1,43 @@
-digraph "CallStaticBooleanMethodA" {  
-"9361" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1856</SUB>> ]
-"9380" [label = <(soa,soa(env))<SUB>1857</SUB>> ]
-"9382" [label = <(RETURN,return InvokeWithJValues(soa, nullptr, mid, args).GetZ();,return InvokeWithJValues(soa, nullptr, mid, args).GetZ();)<SUB>1858</SUB>> ]
-"9383" [label = <(GetZ,InvokeWithJValues(soa, nullptr, mid, args).GetZ())<SUB>1858</SUB>> ]
-"9384" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, nullptr, mid, args).GetZ)<SUB>1858</SUB>> ]
-"9365" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1856</SUB>> ]
-"9385" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1858</SUB>> ]
-"9390" [label = <(FIELD_IDENTIFIER,GetZ,GetZ)<SUB>1858</SUB>> ]
-"9366" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1856</SUB>> ]
-"9370" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1856</SUB>> ]
-"9377" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1856</SUB>> ]
-"9371" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1856</SUB>> ]
-"9372" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1856</SUB>> ]
-"9374" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1856</SUB>> ]
-"9355" [label = <(METHOD,CallStaticBooleanMethodA)<SUB>1855</SUB>> ]
-"9391" [label = <(METHOD_RETURN,jboolean)<SUB>1855</SUB>> ]
-  "9361" -> "9366" 
-  "9361" -> "9380" 
-  "9380" -> "9385" 
-  "9382" -> "9391" 
-  "9383" -> "9382" 
-  "9384" -> "9383" 
-  "9365" -> "9372" 
-  "9365" -> "9380" 
-  "9385" -> "9390" 
-  "9390" -> "9384" 
+digraph "CallStaticCharMethod" {  
+"9330" [label = <(va_start,va_start(ap, mid))<SUB>1807</SUB>> ]
+"9334" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1808</SUB>> ]
+"9337" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1809</SUB>> ]
+"9356" [label = <(soa,soa(env))<SUB>1810</SUB>> ]
+"9359" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, ap)))<SUB>1811</SUB>> ]
+"9365" [label = <(RETURN,return result.GetC();,return result.GetC();)<SUB>1812</SUB>> ]
+"9335" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1808</SUB>> ]
+"9360" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1811</SUB>> ]
+"9366" [label = <(GetC,result.GetC())<SUB>1812</SUB>> ]
+"9367" [label = <(&lt;operator&gt;.fieldAccess,result.GetC)<SUB>1812</SUB>> ]
+"9341" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1809</SUB>> ]
+"9369" [label = <(FIELD_IDENTIFIER,GetC,GetC)<SUB>1812</SUB>> ]
+"9342" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1809</SUB>> ]
+"9346" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1809</SUB>> ]
+"9353" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1809</SUB>> ]
+"9347" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1809</SUB>> ]
+"9348" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1809</SUB>> ]
+"9350" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1809</SUB>> ]
+"9324" [label = <(METHOD,CallStaticCharMethod)<SUB>1805</SUB>> ]
+"9370" [label = <(METHOD_RETURN,jchar)<SUB>1805</SUB>> ]
+  "9330" -> "9335" 
+  "9334" -> "9337" 
+  "9337" -> "9342" 
+  "9337" -> "9356" 
+  "9356" -> "9360" 
+  "9359" -> "9369" 
+  "9365" -> "9370" 
+  "9335" -> "9334" 
+  "9360" -> "9359" 
   "9366" -> "9365" 
-  "9370" -> "9377" 
-  "9377" -> "9391" 
-  "9371" -> "9370" 
-  "9372" -> "9374" 
-  "9374" -> "9371" 
-  "9355" -> "9361" 
+  "9367" -> "9366" 
+  "9341" -> "9348" 
+  "9341" -> "9356" 
+  "9369" -> "9367" 
+  "9342" -> "9341" 
+  "9346" -> "9353" 
+  "9353" -> "9370" 
+  "9347" -> "9346" 
+  "9348" -> "9350" 
+  "9350" -> "9347" 
+  "9324" -> "9330" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/176-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/176-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/176-cfg.dot	2023-06-07 19:35:28.337384337 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/176-cfg.dot	2023-06-07 19:35:34.857383767 +0330
@@ -1,43 +1,35 @@
-digraph "CallStaticByteMethod" {  
-"9399" [label = <(va_start,va_start(ap, mid))<SUB>1863</SUB>> ]
-"9403" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1864</SUB>> ]
-"9406" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1865</SUB>> ]
-"9425" [label = <(soa,soa(env))<SUB>1866</SUB>> ]
-"9428" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, ap)))<SUB>1867</SUB>> ]
-"9434" [label = <(RETURN,return result.GetB();,return result.GetB();)<SUB>1868</SUB>> ]
-"9404" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1864</SUB>> ]
-"9429" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1867</SUB>> ]
-"9435" [label = <(GetB,result.GetB())<SUB>1868</SUB>> ]
-"9436" [label = <(&lt;operator&gt;.fieldAccess,result.GetB)<SUB>1868</SUB>> ]
-"9410" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1865</SUB>> ]
-"9438" [label = <(FIELD_IDENTIFIER,GetB,GetB)<SUB>1868</SUB>> ]
-"9411" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1865</SUB>> ]
-"9415" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1865</SUB>> ]
-"9422" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1865</SUB>> ]
-"9416" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1865</SUB>> ]
-"9417" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1865</SUB>> ]
-"9419" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1865</SUB>> ]
-"9393" [label = <(METHOD,CallStaticByteMethod)<SUB>1861</SUB>> ]
-"9439" [label = <(METHOD_RETURN,jbyte)<SUB>1861</SUB>> ]
-  "9399" -> "9404" 
-  "9403" -> "9406" 
-  "9406" -> "9411" 
-  "9406" -> "9425" 
-  "9425" -> "9429" 
-  "9428" -> "9438" 
-  "9434" -> "9439" 
-  "9404" -> "9403" 
-  "9429" -> "9428" 
-  "9435" -> "9434" 
-  "9436" -> "9435" 
-  "9410" -> "9417" 
-  "9410" -> "9425" 
-  "9438" -> "9436" 
-  "9411" -> "9410" 
-  "9415" -> "9422" 
-  "9422" -> "9439" 
-  "9416" -> "9415" 
-  "9417" -> "9419" 
-  "9419" -> "9416" 
-  "9393" -> "9399" 
+digraph "CallStaticCharMethodV" {  
+"9378" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1816</SUB>> ]
+"9397" [label = <(soa,soa(env))<SUB>1817</SUB>> ]
+"9399" [label = <(RETURN,return InvokeWithVarArgs(soa, nullptr, mid, args).GetC();,return InvokeWithVarArgs(soa, nullptr, mid, args).GetC();)<SUB>1818</SUB>> ]
+"9400" [label = <(GetC,InvokeWithVarArgs(soa, nullptr, mid, args).GetC())<SUB>1818</SUB>> ]
+"9401" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, nullptr, mid, args).GetC)<SUB>1818</SUB>> ]
+"9382" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1816</SUB>> ]
+"9402" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1818</SUB>> ]
+"9407" [label = <(FIELD_IDENTIFIER,GetC,GetC)<SUB>1818</SUB>> ]
+"9383" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1816</SUB>> ]
+"9387" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1816</SUB>> ]
+"9394" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1816</SUB>> ]
+"9388" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1816</SUB>> ]
+"9389" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1816</SUB>> ]
+"9391" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1816</SUB>> ]
+"9372" [label = <(METHOD,CallStaticCharMethodV)<SUB>1815</SUB>> ]
+"9408" [label = <(METHOD_RETURN,jchar)<SUB>1815</SUB>> ]
+  "9378" -> "9383" 
+  "9378" -> "9397" 
+  "9397" -> "9402" 
+  "9399" -> "9408" 
+  "9400" -> "9399" 
+  "9401" -> "9400" 
+  "9382" -> "9389" 
+  "9382" -> "9397" 
+  "9402" -> "9407" 
+  "9407" -> "9401" 
+  "9383" -> "9382" 
+  "9387" -> "9394" 
+  "9394" -> "9408" 
+  "9388" -> "9387" 
+  "9389" -> "9391" 
+  "9391" -> "9388" 
+  "9372" -> "9378" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/177-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/177-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/177-cfg.dot	2023-06-07 19:35:28.337384337 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/177-cfg.dot	2023-06-07 19:35:34.857383767 +0330
@@ -1,35 +1,35 @@
-digraph "CallStaticByteMethodV" {  
-"9447" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1872</SUB>> ]
-"9466" [label = <(soa,soa(env))<SUB>1873</SUB>> ]
-"9468" [label = <(RETURN,return InvokeWithVarArgs(soa, nullptr, mid, args).GetB();,return InvokeWithVarArgs(soa, nullptr, mid, args).GetB();)<SUB>1874</SUB>> ]
-"9469" [label = <(GetB,InvokeWithVarArgs(soa, nullptr, mid, args).GetB())<SUB>1874</SUB>> ]
-"9470" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, nullptr, mid, args).GetB)<SUB>1874</SUB>> ]
-"9451" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1872</SUB>> ]
-"9471" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1874</SUB>> ]
-"9476" [label = <(FIELD_IDENTIFIER,GetB,GetB)<SUB>1874</SUB>> ]
-"9452" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1872</SUB>> ]
-"9456" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1872</SUB>> ]
-"9463" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1872</SUB>> ]
-"9457" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1872</SUB>> ]
-"9458" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1872</SUB>> ]
-"9460" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1872</SUB>> ]
-"9441" [label = <(METHOD,CallStaticByteMethodV)<SUB>1871</SUB>> ]
-"9477" [label = <(METHOD_RETURN,jbyte)<SUB>1871</SUB>> ]
-  "9447" -> "9452" 
-  "9447" -> "9466" 
-  "9466" -> "9471" 
-  "9468" -> "9477" 
-  "9469" -> "9468" 
-  "9470" -> "9469" 
-  "9451" -> "9458" 
-  "9451" -> "9466" 
-  "9471" -> "9476" 
-  "9476" -> "9470" 
-  "9452" -> "9451" 
-  "9456" -> "9463" 
-  "9463" -> "9477" 
-  "9457" -> "9456" 
-  "9458" -> "9460" 
-  "9460" -> "9457" 
-  "9441" -> "9447" 
+digraph "CallStaticCharMethodA" {  
+"9416" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1822</SUB>> ]
+"9435" [label = <(soa,soa(env))<SUB>1823</SUB>> ]
+"9437" [label = <(RETURN,return InvokeWithJValues(soa, nullptr, mid, args).GetC();,return InvokeWithJValues(soa, nullptr, mid, args).GetC();)<SUB>1824</SUB>> ]
+"9438" [label = <(GetC,InvokeWithJValues(soa, nullptr, mid, args).GetC())<SUB>1824</SUB>> ]
+"9439" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, nullptr, mid, args).GetC)<SUB>1824</SUB>> ]
+"9420" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1822</SUB>> ]
+"9440" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1824</SUB>> ]
+"9445" [label = <(FIELD_IDENTIFIER,GetC,GetC)<SUB>1824</SUB>> ]
+"9421" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1822</SUB>> ]
+"9425" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1822</SUB>> ]
+"9432" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1822</SUB>> ]
+"9426" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1822</SUB>> ]
+"9427" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1822</SUB>> ]
+"9429" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1822</SUB>> ]
+"9410" [label = <(METHOD,CallStaticCharMethodA)<SUB>1821</SUB>> ]
+"9446" [label = <(METHOD_RETURN,jchar)<SUB>1821</SUB>> ]
+  "9416" -> "9421" 
+  "9416" -> "9435" 
+  "9435" -> "9440" 
+  "9437" -> "9446" 
+  "9438" -> "9437" 
+  "9439" -> "9438" 
+  "9420" -> "9427" 
+  "9420" -> "9435" 
+  "9440" -> "9445" 
+  "9445" -> "9439" 
+  "9421" -> "9420" 
+  "9425" -> "9432" 
+  "9432" -> "9446" 
+  "9426" -> "9425" 
+  "9427" -> "9429" 
+  "9429" -> "9426" 
+  "9410" -> "9416" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/178-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/178-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/178-cfg.dot	2023-06-07 19:35:28.337384337 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/178-cfg.dot	2023-06-07 19:35:34.857383767 +0330
@@ -1,35 +1,43 @@
-digraph "CallStaticByteMethodA" {  
-"9485" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1878</SUB>> ]
-"9504" [label = <(soa,soa(env))<SUB>1879</SUB>> ]
-"9506" [label = <(RETURN,return InvokeWithJValues(soa, nullptr, mid, args).GetB();,return InvokeWithJValues(soa, nullptr, mid, args).GetB();)<SUB>1880</SUB>> ]
-"9507" [label = <(GetB,InvokeWithJValues(soa, nullptr, mid, args).GetB())<SUB>1880</SUB>> ]
-"9508" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, nullptr, mid, args).GetB)<SUB>1880</SUB>> ]
-"9489" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1878</SUB>> ]
-"9509" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1880</SUB>> ]
-"9514" [label = <(FIELD_IDENTIFIER,GetB,GetB)<SUB>1880</SUB>> ]
-"9490" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1878</SUB>> ]
-"9494" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1878</SUB>> ]
-"9501" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1878</SUB>> ]
-"9495" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1878</SUB>> ]
-"9496" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1878</SUB>> ]
-"9498" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1878</SUB>> ]
-"9479" [label = <(METHOD,CallStaticByteMethodA)<SUB>1877</SUB>> ]
-"9515" [label = <(METHOD_RETURN,jbyte)<SUB>1877</SUB>> ]
-  "9485" -> "9490" 
-  "9485" -> "9504" 
-  "9504" -> "9509" 
-  "9506" -> "9515" 
-  "9507" -> "9506" 
-  "9508" -> "9507" 
-  "9489" -> "9496" 
-  "9489" -> "9504" 
-  "9509" -> "9514" 
-  "9514" -> "9508" 
+digraph "CallStaticShortMethod" {  
+"9454" [label = <(va_start,va_start(ap, mid))<SUB>1829</SUB>> ]
+"9458" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1830</SUB>> ]
+"9461" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1831</SUB>> ]
+"9480" [label = <(soa,soa(env))<SUB>1832</SUB>> ]
+"9483" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, ap)))<SUB>1833</SUB>> ]
+"9489" [label = <(RETURN,return result.GetS();,return result.GetS();)<SUB>1834</SUB>> ]
+"9459" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1830</SUB>> ]
+"9484" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1833</SUB>> ]
+"9490" [label = <(GetS,result.GetS())<SUB>1834</SUB>> ]
+"9491" [label = <(&lt;operator&gt;.fieldAccess,result.GetS)<SUB>1834</SUB>> ]
+"9465" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1831</SUB>> ]
+"9493" [label = <(FIELD_IDENTIFIER,GetS,GetS)<SUB>1834</SUB>> ]
+"9466" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1831</SUB>> ]
+"9470" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1831</SUB>> ]
+"9477" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1831</SUB>> ]
+"9471" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1831</SUB>> ]
+"9472" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1831</SUB>> ]
+"9474" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1831</SUB>> ]
+"9448" [label = <(METHOD,CallStaticShortMethod)<SUB>1827</SUB>> ]
+"9494" [label = <(METHOD_RETURN,jshort)<SUB>1827</SUB>> ]
+  "9454" -> "9459" 
+  "9458" -> "9461" 
+  "9461" -> "9466" 
+  "9461" -> "9480" 
+  "9480" -> "9484" 
+  "9483" -> "9493" 
+  "9489" -> "9494" 
+  "9459" -> "9458" 
+  "9484" -> "9483" 
   "9490" -> "9489" 
-  "9494" -> "9501" 
-  "9501" -> "9515" 
-  "9495" -> "9494" 
-  "9496" -> "9498" 
-  "9498" -> "9495" 
-  "9479" -> "9485" 
+  "9491" -> "9490" 
+  "9465" -> "9472" 
+  "9465" -> "9480" 
+  "9493" -> "9491" 
+  "9466" -> "9465" 
+  "9470" -> "9477" 
+  "9477" -> "9494" 
+  "9471" -> "9470" 
+  "9472" -> "9474" 
+  "9474" -> "9471" 
+  "9448" -> "9454" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/179-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/179-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/179-cfg.dot	2023-06-07 19:35:28.337384337 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/179-cfg.dot	2023-06-07 19:35:34.857383767 +0330
@@ -1,43 +1,35 @@
-digraph "CallStaticCharMethod" {  
-"9523" [label = <(va_start,va_start(ap, mid))<SUB>1885</SUB>> ]
-"9527" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1886</SUB>> ]
-"9530" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1887</SUB>> ]
-"9549" [label = <(soa,soa(env))<SUB>1888</SUB>> ]
-"9552" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, ap)))<SUB>1889</SUB>> ]
-"9558" [label = <(RETURN,return result.GetC();,return result.GetC();)<SUB>1890</SUB>> ]
-"9528" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1886</SUB>> ]
-"9553" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1889</SUB>> ]
-"9559" [label = <(GetC,result.GetC())<SUB>1890</SUB>> ]
-"9560" [label = <(&lt;operator&gt;.fieldAccess,result.GetC)<SUB>1890</SUB>> ]
-"9534" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1887</SUB>> ]
-"9562" [label = <(FIELD_IDENTIFIER,GetC,GetC)<SUB>1890</SUB>> ]
-"9535" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1887</SUB>> ]
-"9539" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1887</SUB>> ]
-"9546" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1887</SUB>> ]
-"9540" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1887</SUB>> ]
-"9541" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1887</SUB>> ]
-"9543" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1887</SUB>> ]
-"9517" [label = <(METHOD,CallStaticCharMethod)<SUB>1883</SUB>> ]
-"9563" [label = <(METHOD_RETURN,jchar)<SUB>1883</SUB>> ]
-  "9523" -> "9528" 
-  "9527" -> "9530" 
-  "9530" -> "9535" 
-  "9530" -> "9549" 
-  "9549" -> "9553" 
-  "9552" -> "9562" 
-  "9558" -> "9563" 
-  "9528" -> "9527" 
-  "9553" -> "9552" 
-  "9559" -> "9558" 
-  "9560" -> "9559" 
-  "9534" -> "9541" 
-  "9534" -> "9549" 
-  "9562" -> "9560" 
-  "9535" -> "9534" 
-  "9539" -> "9546" 
-  "9546" -> "9563" 
-  "9540" -> "9539" 
-  "9541" -> "9543" 
-  "9543" -> "9540" 
-  "9517" -> "9523" 
+digraph "CallStaticShortMethodV" {  
+"9502" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1838</SUB>> ]
+"9521" [label = <(soa,soa(env))<SUB>1839</SUB>> ]
+"9523" [label = <(RETURN,return InvokeWithVarArgs(soa, nullptr, mid, args).GetS();,return InvokeWithVarArgs(soa, nullptr, mid, args).GetS();)<SUB>1840</SUB>> ]
+"9524" [label = <(GetS,InvokeWithVarArgs(soa, nullptr, mid, args).GetS())<SUB>1840</SUB>> ]
+"9525" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, nullptr, mid, args).GetS)<SUB>1840</SUB>> ]
+"9506" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1838</SUB>> ]
+"9526" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1840</SUB>> ]
+"9531" [label = <(FIELD_IDENTIFIER,GetS,GetS)<SUB>1840</SUB>> ]
+"9507" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1838</SUB>> ]
+"9511" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1838</SUB>> ]
+"9518" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1838</SUB>> ]
+"9512" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1838</SUB>> ]
+"9513" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1838</SUB>> ]
+"9515" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1838</SUB>> ]
+"9496" [label = <(METHOD,CallStaticShortMethodV)<SUB>1837</SUB>> ]
+"9532" [label = <(METHOD_RETURN,jshort)<SUB>1837</SUB>> ]
+  "9502" -> "9507" 
+  "9502" -> "9521" 
+  "9521" -> "9526" 
+  "9523" -> "9532" 
+  "9524" -> "9523" 
+  "9525" -> "9524" 
+  "9506" -> "9513" 
+  "9506" -> "9521" 
+  "9526" -> "9531" 
+  "9531" -> "9525" 
+  "9507" -> "9506" 
+  "9511" -> "9518" 
+  "9518" -> "9532" 
+  "9512" -> "9511" 
+  "9513" -> "9515" 
+  "9515" -> "9512" 
+  "9496" -> "9502" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/18-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/18-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/18-cfg.dot	2023-06-07 19:35:28.217384348 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/18-cfg.dot	2023-06-07 19:35:34.747383777 +0330
@@ -1,30 +1,5 @@
-digraph "Find" {  
-"414" [label = <(&lt;operator&gt;.assignment,* range = memory_type_table_.Lookup(address))<SUB>248</SUB>> ]
-"428" [label = <(&lt;operator&gt;.assignment,*kind = range-&gt;Type())<SUB>252</SUB>> ]
-"435" [label = <(RETURN,return true;,return true;)<SUB>253</SUB>> ]
-"416" [label = <(Lookup,memory_type_table_.Lookup(address))<SUB>248</SUB>> ]
-"422" [label = <(&lt;operator&gt;.equals,range == nullptr)<SUB>249</SUB>> ]
-"429" [label = <(&lt;operator&gt;.indirection,*kind)<SUB>252</SUB>> ]
-"431" [label = <(Type,range-&gt;Type())<SUB>252</SUB>> ]
-"417" [label = <(&lt;operator&gt;.fieldAccess,memory_type_table_.Lookup)<SUB>248</SUB>> ]
-"426" [label = <(RETURN,return false;,return false;)<SUB>250</SUB>> ]
-"432" [label = <(&lt;operator&gt;.indirectFieldAccess,range-&gt;Type)<SUB>252</SUB>> ]
-"419" [label = <(FIELD_IDENTIFIER,Lookup,Lookup)<SUB>248</SUB>> ]
-"434" [label = <(FIELD_IDENTIFIER,Type,Type)<SUB>252</SUB>> ]
-"409" [label = <(METHOD,Find)<SUB>247</SUB>> ]
-"437" [label = <(METHOD_RETURN,bool)<SUB>247</SUB>> ]
-  "414" -> "422" 
-  "428" -> "435" 
-  "435" -> "437" 
-  "416" -> "414" 
-  "422" -> "426" 
-  "422" -> "429" 
-  "429" -> "434" 
-  "431" -> "428" 
-  "417" -> "416" 
-  "426" -> "437" 
-  "432" -> "431" 
-  "419" -> "417" 
-  "434" -> "432" 
-  "409" -> "419" 
+digraph "NotifySetObjectField" {  
+"381" [label = <(METHOD,NotifySetObjectField)<SUB>288</SUB>> ]
+"386" [label = <(METHOD_RETURN,void)<SUB>288</SUB>> ]
+  "381" -> "386" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/180-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/180-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/180-cfg.dot	2023-06-07 19:35:28.337384337 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/180-cfg.dot	2023-06-07 19:35:34.857383767 +0330
@@ -1,35 +1,35 @@
-digraph "CallStaticCharMethodV" {  
-"9571" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1894</SUB>> ]
-"9590" [label = <(soa,soa(env))<SUB>1895</SUB>> ]
-"9592" [label = <(RETURN,return InvokeWithVarArgs(soa, nullptr, mid, args).GetC();,return InvokeWithVarArgs(soa, nullptr, mid, args).GetC();)<SUB>1896</SUB>> ]
-"9593" [label = <(GetC,InvokeWithVarArgs(soa, nullptr, mid, args).GetC())<SUB>1896</SUB>> ]
-"9594" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, nullptr, mid, args).GetC)<SUB>1896</SUB>> ]
-"9575" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1894</SUB>> ]
-"9595" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1896</SUB>> ]
-"9600" [label = <(FIELD_IDENTIFIER,GetC,GetC)<SUB>1896</SUB>> ]
-"9576" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1894</SUB>> ]
-"9580" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1894</SUB>> ]
-"9587" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1894</SUB>> ]
-"9581" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1894</SUB>> ]
-"9582" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1894</SUB>> ]
-"9584" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1894</SUB>> ]
-"9565" [label = <(METHOD,CallStaticCharMethodV)<SUB>1893</SUB>> ]
-"9601" [label = <(METHOD_RETURN,jchar)<SUB>1893</SUB>> ]
-  "9571" -> "9576" 
-  "9571" -> "9590" 
-  "9590" -> "9595" 
-  "9592" -> "9601" 
-  "9593" -> "9592" 
-  "9594" -> "9593" 
-  "9575" -> "9582" 
-  "9575" -> "9590" 
-  "9595" -> "9600" 
-  "9600" -> "9594" 
-  "9576" -> "9575" 
-  "9580" -> "9587" 
-  "9587" -> "9601" 
-  "9581" -> "9580" 
-  "9582" -> "9584" 
-  "9584" -> "9581" 
-  "9565" -> "9571" 
+digraph "CallStaticShortMethodA" {  
+"9540" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1844</SUB>> ]
+"9559" [label = <(soa,soa(env))<SUB>1845</SUB>> ]
+"9561" [label = <(RETURN,return InvokeWithJValues(soa, nullptr, mid, args).GetS();,return InvokeWithJValues(soa, nullptr, mid, args).GetS();)<SUB>1846</SUB>> ]
+"9562" [label = <(GetS,InvokeWithJValues(soa, nullptr, mid, args).GetS())<SUB>1846</SUB>> ]
+"9563" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, nullptr, mid, args).GetS)<SUB>1846</SUB>> ]
+"9544" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1844</SUB>> ]
+"9564" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1846</SUB>> ]
+"9569" [label = <(FIELD_IDENTIFIER,GetS,GetS)<SUB>1846</SUB>> ]
+"9545" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1844</SUB>> ]
+"9549" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1844</SUB>> ]
+"9556" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1844</SUB>> ]
+"9550" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1844</SUB>> ]
+"9551" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1844</SUB>> ]
+"9553" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1844</SUB>> ]
+"9534" [label = <(METHOD,CallStaticShortMethodA)<SUB>1843</SUB>> ]
+"9570" [label = <(METHOD_RETURN,jshort)<SUB>1843</SUB>> ]
+  "9540" -> "9545" 
+  "9540" -> "9559" 
+  "9559" -> "9564" 
+  "9561" -> "9570" 
+  "9562" -> "9561" 
+  "9563" -> "9562" 
+  "9544" -> "9551" 
+  "9544" -> "9559" 
+  "9564" -> "9569" 
+  "9569" -> "9563" 
+  "9545" -> "9544" 
+  "9549" -> "9556" 
+  "9556" -> "9570" 
+  "9550" -> "9549" 
+  "9551" -> "9553" 
+  "9553" -> "9550" 
+  "9534" -> "9540" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/181-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/181-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/181-cfg.dot	2023-06-07 19:35:28.337384337 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/181-cfg.dot	2023-06-07 19:35:34.857383767 +0330
@@ -1,35 +1,43 @@
-digraph "CallStaticCharMethodA" {  
-"9609" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1900</SUB>> ]
-"9628" [label = <(soa,soa(env))<SUB>1901</SUB>> ]
-"9630" [label = <(RETURN,return InvokeWithJValues(soa, nullptr, mid, args).GetC();,return InvokeWithJValues(soa, nullptr, mid, args).GetC();)<SUB>1902</SUB>> ]
-"9631" [label = <(GetC,InvokeWithJValues(soa, nullptr, mid, args).GetC())<SUB>1902</SUB>> ]
-"9632" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, nullptr, mid, args).GetC)<SUB>1902</SUB>> ]
-"9613" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1900</SUB>> ]
-"9633" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1902</SUB>> ]
-"9638" [label = <(FIELD_IDENTIFIER,GetC,GetC)<SUB>1902</SUB>> ]
-"9614" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1900</SUB>> ]
-"9618" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1900</SUB>> ]
-"9625" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1900</SUB>> ]
-"9619" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1900</SUB>> ]
-"9620" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1900</SUB>> ]
-"9622" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1900</SUB>> ]
-"9603" [label = <(METHOD,CallStaticCharMethodA)<SUB>1899</SUB>> ]
-"9639" [label = <(METHOD_RETURN,jchar)<SUB>1899</SUB>> ]
-  "9609" -> "9614" 
-  "9609" -> "9628" 
-  "9628" -> "9633" 
-  "9630" -> "9639" 
-  "9631" -> "9630" 
-  "9632" -> "9631" 
-  "9613" -> "9620" 
-  "9613" -> "9628" 
-  "9633" -> "9638" 
-  "9638" -> "9632" 
+digraph "CallStaticIntMethod" {  
+"9578" [label = <(va_start,va_start(ap, mid))<SUB>1851</SUB>> ]
+"9582" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1852</SUB>> ]
+"9585" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1853</SUB>> ]
+"9604" [label = <(soa,soa(env))<SUB>1854</SUB>> ]
+"9607" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, ap)))<SUB>1855</SUB>> ]
+"9613" [label = <(RETURN,return result.GetI();,return result.GetI();)<SUB>1856</SUB>> ]
+"9583" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1852</SUB>> ]
+"9608" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1855</SUB>> ]
+"9614" [label = <(GetI,result.GetI())<SUB>1856</SUB>> ]
+"9615" [label = <(&lt;operator&gt;.fieldAccess,result.GetI)<SUB>1856</SUB>> ]
+"9589" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1853</SUB>> ]
+"9617" [label = <(FIELD_IDENTIFIER,GetI,GetI)<SUB>1856</SUB>> ]
+"9590" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1853</SUB>> ]
+"9594" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1853</SUB>> ]
+"9601" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1853</SUB>> ]
+"9595" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1853</SUB>> ]
+"9596" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1853</SUB>> ]
+"9598" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1853</SUB>> ]
+"9572" [label = <(METHOD,CallStaticIntMethod)<SUB>1849</SUB>> ]
+"9618" [label = <(METHOD_RETURN,jint)<SUB>1849</SUB>> ]
+  "9578" -> "9583" 
+  "9582" -> "9585" 
+  "9585" -> "9590" 
+  "9585" -> "9604" 
+  "9604" -> "9608" 
+  "9607" -> "9617" 
+  "9613" -> "9618" 
+  "9583" -> "9582" 
+  "9608" -> "9607" 
   "9614" -> "9613" 
-  "9618" -> "9625" 
-  "9625" -> "9639" 
-  "9619" -> "9618" 
-  "9620" -> "9622" 
-  "9622" -> "9619" 
-  "9603" -> "9609" 
+  "9615" -> "9614" 
+  "9589" -> "9596" 
+  "9589" -> "9604" 
+  "9617" -> "9615" 
+  "9590" -> "9589" 
+  "9594" -> "9601" 
+  "9601" -> "9618" 
+  "9595" -> "9594" 
+  "9596" -> "9598" 
+  "9598" -> "9595" 
+  "9572" -> "9578" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/182-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/182-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/182-cfg.dot	2023-06-07 19:35:28.337384337 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/182-cfg.dot	2023-06-07 19:35:34.857383767 +0330
@@ -1,43 +1,35 @@
-digraph "CallStaticShortMethod" {  
-"9647" [label = <(va_start,va_start(ap, mid))<SUB>1907</SUB>> ]
-"9651" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1908</SUB>> ]
-"9654" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1909</SUB>> ]
-"9673" [label = <(soa,soa(env))<SUB>1910</SUB>> ]
-"9676" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, ap)))<SUB>1911</SUB>> ]
-"9682" [label = <(RETURN,return result.GetS();,return result.GetS();)<SUB>1912</SUB>> ]
-"9652" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1908</SUB>> ]
-"9677" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1911</SUB>> ]
-"9683" [label = <(GetS,result.GetS())<SUB>1912</SUB>> ]
-"9684" [label = <(&lt;operator&gt;.fieldAccess,result.GetS)<SUB>1912</SUB>> ]
-"9658" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1909</SUB>> ]
-"9686" [label = <(FIELD_IDENTIFIER,GetS,GetS)<SUB>1912</SUB>> ]
-"9659" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1909</SUB>> ]
-"9663" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1909</SUB>> ]
-"9670" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1909</SUB>> ]
-"9664" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1909</SUB>> ]
-"9665" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1909</SUB>> ]
-"9667" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1909</SUB>> ]
-"9641" [label = <(METHOD,CallStaticShortMethod)<SUB>1905</SUB>> ]
-"9687" [label = <(METHOD_RETURN,jshort)<SUB>1905</SUB>> ]
-  "9647" -> "9652" 
-  "9651" -> "9654" 
-  "9654" -> "9659" 
-  "9654" -> "9673" 
-  "9673" -> "9677" 
-  "9676" -> "9686" 
-  "9682" -> "9687" 
-  "9652" -> "9651" 
-  "9677" -> "9676" 
-  "9683" -> "9682" 
-  "9684" -> "9683" 
-  "9658" -> "9665" 
-  "9658" -> "9673" 
-  "9686" -> "9684" 
-  "9659" -> "9658" 
-  "9663" -> "9670" 
-  "9670" -> "9687" 
-  "9664" -> "9663" 
-  "9665" -> "9667" 
-  "9667" -> "9664" 
-  "9641" -> "9647" 
+digraph "CallStaticIntMethodV" {  
+"9626" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1860</SUB>> ]
+"9645" [label = <(soa,soa(env))<SUB>1861</SUB>> ]
+"9647" [label = <(RETURN,return InvokeWithVarArgs(soa, nullptr, mid, args).GetI();,return InvokeWithVarArgs(soa, nullptr, mid, args).GetI();)<SUB>1862</SUB>> ]
+"9648" [label = <(GetI,InvokeWithVarArgs(soa, nullptr, mid, args).GetI())<SUB>1862</SUB>> ]
+"9649" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, nullptr, mid, args).GetI)<SUB>1862</SUB>> ]
+"9630" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1860</SUB>> ]
+"9650" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1862</SUB>> ]
+"9655" [label = <(FIELD_IDENTIFIER,GetI,GetI)<SUB>1862</SUB>> ]
+"9631" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1860</SUB>> ]
+"9635" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1860</SUB>> ]
+"9642" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1860</SUB>> ]
+"9636" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1860</SUB>> ]
+"9637" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1860</SUB>> ]
+"9639" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1860</SUB>> ]
+"9620" [label = <(METHOD,CallStaticIntMethodV)<SUB>1859</SUB>> ]
+"9656" [label = <(METHOD_RETURN,jint)<SUB>1859</SUB>> ]
+  "9626" -> "9631" 
+  "9626" -> "9645" 
+  "9645" -> "9650" 
+  "9647" -> "9656" 
+  "9648" -> "9647" 
+  "9649" -> "9648" 
+  "9630" -> "9637" 
+  "9630" -> "9645" 
+  "9650" -> "9655" 
+  "9655" -> "9649" 
+  "9631" -> "9630" 
+  "9635" -> "9642" 
+  "9642" -> "9656" 
+  "9636" -> "9635" 
+  "9637" -> "9639" 
+  "9639" -> "9636" 
+  "9620" -> "9626" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/183-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/183-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/183-cfg.dot	2023-06-07 19:35:28.337384337 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/183-cfg.dot	2023-06-07 19:35:34.857383767 +0330
@@ -1,35 +1,35 @@
-digraph "CallStaticShortMethodV" {  
-"9695" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1916</SUB>> ]
-"9714" [label = <(soa,soa(env))<SUB>1917</SUB>> ]
-"9716" [label = <(RETURN,return InvokeWithVarArgs(soa, nullptr, mid, args).GetS();,return InvokeWithVarArgs(soa, nullptr, mid, args).GetS();)<SUB>1918</SUB>> ]
-"9717" [label = <(GetS,InvokeWithVarArgs(soa, nullptr, mid, args).GetS())<SUB>1918</SUB>> ]
-"9718" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, nullptr, mid, args).GetS)<SUB>1918</SUB>> ]
-"9699" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1916</SUB>> ]
-"9719" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1918</SUB>> ]
-"9724" [label = <(FIELD_IDENTIFIER,GetS,GetS)<SUB>1918</SUB>> ]
-"9700" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1916</SUB>> ]
-"9704" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1916</SUB>> ]
-"9711" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1916</SUB>> ]
-"9705" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1916</SUB>> ]
-"9706" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1916</SUB>> ]
-"9708" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1916</SUB>> ]
-"9689" [label = <(METHOD,CallStaticShortMethodV)<SUB>1915</SUB>> ]
-"9725" [label = <(METHOD_RETURN,jshort)<SUB>1915</SUB>> ]
-  "9695" -> "9700" 
-  "9695" -> "9714" 
-  "9714" -> "9719" 
-  "9716" -> "9725" 
-  "9717" -> "9716" 
-  "9718" -> "9717" 
-  "9699" -> "9706" 
-  "9699" -> "9714" 
-  "9719" -> "9724" 
-  "9724" -> "9718" 
-  "9700" -> "9699" 
-  "9704" -> "9711" 
-  "9711" -> "9725" 
-  "9705" -> "9704" 
-  "9706" -> "9708" 
-  "9708" -> "9705" 
-  "9689" -> "9695" 
+digraph "CallStaticIntMethodA" {  
+"9664" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1866</SUB>> ]
+"9683" [label = <(soa,soa(env))<SUB>1867</SUB>> ]
+"9685" [label = <(RETURN,return InvokeWithJValues(soa, nullptr, mid, args).GetI();,return InvokeWithJValues(soa, nullptr, mid, args).GetI();)<SUB>1868</SUB>> ]
+"9686" [label = <(GetI,InvokeWithJValues(soa, nullptr, mid, args).GetI())<SUB>1868</SUB>> ]
+"9687" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, nullptr, mid, args).GetI)<SUB>1868</SUB>> ]
+"9668" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1866</SUB>> ]
+"9688" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1868</SUB>> ]
+"9693" [label = <(FIELD_IDENTIFIER,GetI,GetI)<SUB>1868</SUB>> ]
+"9669" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1866</SUB>> ]
+"9673" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1866</SUB>> ]
+"9680" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1866</SUB>> ]
+"9674" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1866</SUB>> ]
+"9675" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1866</SUB>> ]
+"9677" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1866</SUB>> ]
+"9658" [label = <(METHOD,CallStaticIntMethodA)<SUB>1865</SUB>> ]
+"9694" [label = <(METHOD_RETURN,jint)<SUB>1865</SUB>> ]
+  "9664" -> "9669" 
+  "9664" -> "9683" 
+  "9683" -> "9688" 
+  "9685" -> "9694" 
+  "9686" -> "9685" 
+  "9687" -> "9686" 
+  "9668" -> "9675" 
+  "9668" -> "9683" 
+  "9688" -> "9693" 
+  "9693" -> "9687" 
+  "9669" -> "9668" 
+  "9673" -> "9680" 
+  "9680" -> "9694" 
+  "9674" -> "9673" 
+  "9675" -> "9677" 
+  "9677" -> "9674" 
+  "9658" -> "9664" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/184-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/184-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/184-cfg.dot	2023-06-07 19:35:28.337384337 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/184-cfg.dot	2023-06-07 19:35:34.857383767 +0330
@@ -1,35 +1,43 @@
-digraph "CallStaticShortMethodA" {  
-"9733" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1922</SUB>> ]
-"9752" [label = <(soa,soa(env))<SUB>1923</SUB>> ]
-"9754" [label = <(RETURN,return InvokeWithJValues(soa, nullptr, mid, args).GetS();,return InvokeWithJValues(soa, nullptr, mid, args).GetS();)<SUB>1924</SUB>> ]
-"9755" [label = <(GetS,InvokeWithJValues(soa, nullptr, mid, args).GetS())<SUB>1924</SUB>> ]
-"9756" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, nullptr, mid, args).GetS)<SUB>1924</SUB>> ]
-"9737" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1922</SUB>> ]
-"9757" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1924</SUB>> ]
-"9762" [label = <(FIELD_IDENTIFIER,GetS,GetS)<SUB>1924</SUB>> ]
-"9738" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1922</SUB>> ]
-"9742" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1922</SUB>> ]
-"9749" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1922</SUB>> ]
-"9743" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1922</SUB>> ]
-"9744" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1922</SUB>> ]
-"9746" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1922</SUB>> ]
-"9727" [label = <(METHOD,CallStaticShortMethodA)<SUB>1921</SUB>> ]
-"9763" [label = <(METHOD_RETURN,jshort)<SUB>1921</SUB>> ]
-  "9733" -> "9738" 
-  "9733" -> "9752" 
-  "9752" -> "9757" 
-  "9754" -> "9763" 
-  "9755" -> "9754" 
-  "9756" -> "9755" 
-  "9737" -> "9744" 
-  "9737" -> "9752" 
-  "9757" -> "9762" 
-  "9762" -> "9756" 
+digraph "CallStaticLongMethod" {  
+"9702" [label = <(va_start,va_start(ap, mid))<SUB>1873</SUB>> ]
+"9706" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1874</SUB>> ]
+"9709" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1875</SUB>> ]
+"9728" [label = <(soa,soa(env))<SUB>1876</SUB>> ]
+"9731" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, ap)))<SUB>1877</SUB>> ]
+"9737" [label = <(RETURN,return result.GetJ();,return result.GetJ();)<SUB>1878</SUB>> ]
+"9707" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1874</SUB>> ]
+"9732" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1877</SUB>> ]
+"9738" [label = <(GetJ,result.GetJ())<SUB>1878</SUB>> ]
+"9739" [label = <(&lt;operator&gt;.fieldAccess,result.GetJ)<SUB>1878</SUB>> ]
+"9713" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1875</SUB>> ]
+"9741" [label = <(FIELD_IDENTIFIER,GetJ,GetJ)<SUB>1878</SUB>> ]
+"9714" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1875</SUB>> ]
+"9718" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1875</SUB>> ]
+"9725" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1875</SUB>> ]
+"9719" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1875</SUB>> ]
+"9720" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1875</SUB>> ]
+"9722" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1875</SUB>> ]
+"9696" [label = <(METHOD,CallStaticLongMethod)<SUB>1871</SUB>> ]
+"9742" [label = <(METHOD_RETURN,jlong)<SUB>1871</SUB>> ]
+  "9702" -> "9707" 
+  "9706" -> "9709" 
+  "9709" -> "9714" 
+  "9709" -> "9728" 
+  "9728" -> "9732" 
+  "9731" -> "9741" 
+  "9737" -> "9742" 
+  "9707" -> "9706" 
+  "9732" -> "9731" 
   "9738" -> "9737" 
-  "9742" -> "9749" 
-  "9749" -> "9763" 
-  "9743" -> "9742" 
-  "9744" -> "9746" 
-  "9746" -> "9743" 
-  "9727" -> "9733" 
+  "9739" -> "9738" 
+  "9713" -> "9720" 
+  "9713" -> "9728" 
+  "9741" -> "9739" 
+  "9714" -> "9713" 
+  "9718" -> "9725" 
+  "9725" -> "9742" 
+  "9719" -> "9718" 
+  "9720" -> "9722" 
+  "9722" -> "9719" 
+  "9696" -> "9702" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/185-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/185-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/185-cfg.dot	2023-06-07 19:35:28.337384337 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/185-cfg.dot	2023-06-07 19:35:34.857383767 +0330
@@ -1,43 +1,35 @@
-digraph "CallStaticIntMethod" {  
-"9771" [label = <(va_start,va_start(ap, mid))<SUB>1929</SUB>> ]
-"9775" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1930</SUB>> ]
-"9778" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1931</SUB>> ]
-"9797" [label = <(soa,soa(env))<SUB>1932</SUB>> ]
-"9800" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, ap)))<SUB>1933</SUB>> ]
-"9806" [label = <(RETURN,return result.GetI();,return result.GetI();)<SUB>1934</SUB>> ]
-"9776" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1930</SUB>> ]
-"9801" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1933</SUB>> ]
-"9807" [label = <(GetI,result.GetI())<SUB>1934</SUB>> ]
-"9808" [label = <(&lt;operator&gt;.fieldAccess,result.GetI)<SUB>1934</SUB>> ]
-"9782" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1931</SUB>> ]
-"9810" [label = <(FIELD_IDENTIFIER,GetI,GetI)<SUB>1934</SUB>> ]
-"9783" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1931</SUB>> ]
-"9787" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1931</SUB>> ]
-"9794" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1931</SUB>> ]
-"9788" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1931</SUB>> ]
-"9789" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1931</SUB>> ]
-"9791" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1931</SUB>> ]
-"9765" [label = <(METHOD,CallStaticIntMethod)<SUB>1927</SUB>> ]
-"9811" [label = <(METHOD_RETURN,jint)<SUB>1927</SUB>> ]
-  "9771" -> "9776" 
-  "9775" -> "9778" 
-  "9778" -> "9783" 
-  "9778" -> "9797" 
-  "9797" -> "9801" 
-  "9800" -> "9810" 
-  "9806" -> "9811" 
-  "9776" -> "9775" 
-  "9801" -> "9800" 
-  "9807" -> "9806" 
-  "9808" -> "9807" 
-  "9782" -> "9789" 
-  "9782" -> "9797" 
-  "9810" -> "9808" 
-  "9783" -> "9782" 
-  "9787" -> "9794" 
-  "9794" -> "9811" 
-  "9788" -> "9787" 
-  "9789" -> "9791" 
-  "9791" -> "9788" 
-  "9765" -> "9771" 
+digraph "CallStaticLongMethodV" {  
+"9750" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1882</SUB>> ]
+"9769" [label = <(soa,soa(env))<SUB>1883</SUB>> ]
+"9771" [label = <(RETURN,return InvokeWithVarArgs(soa, nullptr, mid, args).GetJ();,return InvokeWithVarArgs(soa, nullptr, mid, args).GetJ();)<SUB>1884</SUB>> ]
+"9772" [label = <(GetJ,InvokeWithVarArgs(soa, nullptr, mid, args).GetJ())<SUB>1884</SUB>> ]
+"9773" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, nullptr, mid, args).GetJ)<SUB>1884</SUB>> ]
+"9754" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1882</SUB>> ]
+"9774" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1884</SUB>> ]
+"9779" [label = <(FIELD_IDENTIFIER,GetJ,GetJ)<SUB>1884</SUB>> ]
+"9755" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1882</SUB>> ]
+"9759" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1882</SUB>> ]
+"9766" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1882</SUB>> ]
+"9760" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1882</SUB>> ]
+"9761" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1882</SUB>> ]
+"9763" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1882</SUB>> ]
+"9744" [label = <(METHOD,CallStaticLongMethodV)<SUB>1881</SUB>> ]
+"9780" [label = <(METHOD_RETURN,jlong)<SUB>1881</SUB>> ]
+  "9750" -> "9755" 
+  "9750" -> "9769" 
+  "9769" -> "9774" 
+  "9771" -> "9780" 
+  "9772" -> "9771" 
+  "9773" -> "9772" 
+  "9754" -> "9761" 
+  "9754" -> "9769" 
+  "9774" -> "9779" 
+  "9779" -> "9773" 
+  "9755" -> "9754" 
+  "9759" -> "9766" 
+  "9766" -> "9780" 
+  "9760" -> "9759" 
+  "9761" -> "9763" 
+  "9763" -> "9760" 
+  "9744" -> "9750" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/186-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/186-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/186-cfg.dot	2023-06-07 19:35:28.337384337 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/186-cfg.dot	2023-06-07 19:35:34.867383768 +0330
@@ -1,35 +1,35 @@
-digraph "CallStaticIntMethodV" {  
-"9819" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1938</SUB>> ]
-"9838" [label = <(soa,soa(env))<SUB>1939</SUB>> ]
-"9840" [label = <(RETURN,return InvokeWithVarArgs(soa, nullptr, mid, args).GetI();,return InvokeWithVarArgs(soa, nullptr, mid, args).GetI();)<SUB>1940</SUB>> ]
-"9841" [label = <(GetI,InvokeWithVarArgs(soa, nullptr, mid, args).GetI())<SUB>1940</SUB>> ]
-"9842" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, nullptr, mid, args).GetI)<SUB>1940</SUB>> ]
-"9823" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1938</SUB>> ]
-"9843" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1940</SUB>> ]
-"9848" [label = <(FIELD_IDENTIFIER,GetI,GetI)<SUB>1940</SUB>> ]
-"9824" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1938</SUB>> ]
-"9828" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1938</SUB>> ]
-"9835" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1938</SUB>> ]
-"9829" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1938</SUB>> ]
-"9830" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1938</SUB>> ]
-"9832" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1938</SUB>> ]
-"9813" [label = <(METHOD,CallStaticIntMethodV)<SUB>1937</SUB>> ]
-"9849" [label = <(METHOD_RETURN,jint)<SUB>1937</SUB>> ]
-  "9819" -> "9824" 
-  "9819" -> "9838" 
-  "9838" -> "9843" 
-  "9840" -> "9849" 
-  "9841" -> "9840" 
-  "9842" -> "9841" 
-  "9823" -> "9830" 
-  "9823" -> "9838" 
-  "9843" -> "9848" 
-  "9848" -> "9842" 
-  "9824" -> "9823" 
-  "9828" -> "9835" 
-  "9835" -> "9849" 
-  "9829" -> "9828" 
-  "9830" -> "9832" 
-  "9832" -> "9829" 
-  "9813" -> "9819" 
+digraph "CallStaticLongMethodA" {  
+"9788" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1888</SUB>> ]
+"9807" [label = <(soa,soa(env))<SUB>1889</SUB>> ]
+"9809" [label = <(RETURN,return InvokeWithJValues(soa, nullptr, mid, args).GetJ();,return InvokeWithJValues(soa, nullptr, mid, args).GetJ();)<SUB>1890</SUB>> ]
+"9810" [label = <(GetJ,InvokeWithJValues(soa, nullptr, mid, args).GetJ())<SUB>1890</SUB>> ]
+"9811" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, nullptr, mid, args).GetJ)<SUB>1890</SUB>> ]
+"9792" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1888</SUB>> ]
+"9812" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1890</SUB>> ]
+"9817" [label = <(FIELD_IDENTIFIER,GetJ,GetJ)<SUB>1890</SUB>> ]
+"9793" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1888</SUB>> ]
+"9797" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1888</SUB>> ]
+"9804" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1888</SUB>> ]
+"9798" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1888</SUB>> ]
+"9799" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1888</SUB>> ]
+"9801" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1888</SUB>> ]
+"9782" [label = <(METHOD,CallStaticLongMethodA)<SUB>1887</SUB>> ]
+"9818" [label = <(METHOD_RETURN,jlong)<SUB>1887</SUB>> ]
+  "9788" -> "9793" 
+  "9788" -> "9807" 
+  "9807" -> "9812" 
+  "9809" -> "9818" 
+  "9810" -> "9809" 
+  "9811" -> "9810" 
+  "9792" -> "9799" 
+  "9792" -> "9807" 
+  "9812" -> "9817" 
+  "9817" -> "9811" 
+  "9793" -> "9792" 
+  "9797" -> "9804" 
+  "9804" -> "9818" 
+  "9798" -> "9797" 
+  "9799" -> "9801" 
+  "9801" -> "9798" 
+  "9782" -> "9788" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/187-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/187-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/187-cfg.dot	2023-06-07 19:35:28.337384337 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/187-cfg.dot	2023-06-07 19:35:34.867383768 +0330
@@ -1,35 +1,43 @@
-digraph "CallStaticIntMethodA" {  
-"9857" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1944</SUB>> ]
-"9876" [label = <(soa,soa(env))<SUB>1945</SUB>> ]
-"9878" [label = <(RETURN,return InvokeWithJValues(soa, nullptr, mid, args).GetI();,return InvokeWithJValues(soa, nullptr, mid, args).GetI();)<SUB>1946</SUB>> ]
-"9879" [label = <(GetI,InvokeWithJValues(soa, nullptr, mid, args).GetI())<SUB>1946</SUB>> ]
-"9880" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, nullptr, mid, args).GetI)<SUB>1946</SUB>> ]
-"9861" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1944</SUB>> ]
-"9881" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1946</SUB>> ]
-"9886" [label = <(FIELD_IDENTIFIER,GetI,GetI)<SUB>1946</SUB>> ]
-"9862" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1944</SUB>> ]
-"9866" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1944</SUB>> ]
-"9873" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1944</SUB>> ]
-"9867" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1944</SUB>> ]
-"9868" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1944</SUB>> ]
-"9870" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1944</SUB>> ]
-"9851" [label = <(METHOD,CallStaticIntMethodA)<SUB>1943</SUB>> ]
-"9887" [label = <(METHOD_RETURN,jint)<SUB>1943</SUB>> ]
-  "9857" -> "9862" 
-  "9857" -> "9876" 
-  "9876" -> "9881" 
-  "9878" -> "9887" 
-  "9879" -> "9878" 
-  "9880" -> "9879" 
-  "9861" -> "9868" 
-  "9861" -> "9876" 
-  "9881" -> "9886" 
-  "9886" -> "9880" 
+digraph "CallStaticFloatMethod" {  
+"9826" [label = <(va_start,va_start(ap, mid))<SUB>1895</SUB>> ]
+"9830" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1896</SUB>> ]
+"9833" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1897</SUB>> ]
+"9852" [label = <(soa,soa(env))<SUB>1898</SUB>> ]
+"9855" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, ap)))<SUB>1899</SUB>> ]
+"9861" [label = <(RETURN,return result.GetF();,return result.GetF();)<SUB>1900</SUB>> ]
+"9831" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1896</SUB>> ]
+"9856" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1899</SUB>> ]
+"9862" [label = <(GetF,result.GetF())<SUB>1900</SUB>> ]
+"9863" [label = <(&lt;operator&gt;.fieldAccess,result.GetF)<SUB>1900</SUB>> ]
+"9837" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1897</SUB>> ]
+"9865" [label = <(FIELD_IDENTIFIER,GetF,GetF)<SUB>1900</SUB>> ]
+"9838" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1897</SUB>> ]
+"9842" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1897</SUB>> ]
+"9849" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1897</SUB>> ]
+"9843" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1897</SUB>> ]
+"9844" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1897</SUB>> ]
+"9846" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1897</SUB>> ]
+"9820" [label = <(METHOD,CallStaticFloatMethod)<SUB>1893</SUB>> ]
+"9866" [label = <(METHOD_RETURN,jfloat)<SUB>1893</SUB>> ]
+  "9826" -> "9831" 
+  "9830" -> "9833" 
+  "9833" -> "9838" 
+  "9833" -> "9852" 
+  "9852" -> "9856" 
+  "9855" -> "9865" 
+  "9861" -> "9866" 
+  "9831" -> "9830" 
+  "9856" -> "9855" 
   "9862" -> "9861" 
-  "9866" -> "9873" 
-  "9873" -> "9887" 
-  "9867" -> "9866" 
-  "9868" -> "9870" 
-  "9870" -> "9867" 
-  "9851" -> "9857" 
+  "9863" -> "9862" 
+  "9837" -> "9844" 
+  "9837" -> "9852" 
+  "9865" -> "9863" 
+  "9838" -> "9837" 
+  "9842" -> "9849" 
+  "9849" -> "9866" 
+  "9843" -> "9842" 
+  "9844" -> "9846" 
+  "9846" -> "9843" 
+  "9820" -> "9826" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/188-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/188-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/188-cfg.dot	2023-06-07 19:35:28.337384337 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/188-cfg.dot	2023-06-07 19:35:34.867383768 +0330
@@ -1,43 +1,35 @@
-digraph "CallStaticLongMethod" {  
-"9895" [label = <(va_start,va_start(ap, mid))<SUB>1951</SUB>> ]
-"9899" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1952</SUB>> ]
-"9902" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1953</SUB>> ]
-"9921" [label = <(soa,soa(env))<SUB>1954</SUB>> ]
-"9924" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, ap)))<SUB>1955</SUB>> ]
-"9930" [label = <(RETURN,return result.GetJ();,return result.GetJ();)<SUB>1956</SUB>> ]
-"9900" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1952</SUB>> ]
-"9925" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1955</SUB>> ]
-"9931" [label = <(GetJ,result.GetJ())<SUB>1956</SUB>> ]
-"9932" [label = <(&lt;operator&gt;.fieldAccess,result.GetJ)<SUB>1956</SUB>> ]
-"9906" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1953</SUB>> ]
-"9934" [label = <(FIELD_IDENTIFIER,GetJ,GetJ)<SUB>1956</SUB>> ]
-"9907" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1953</SUB>> ]
-"9911" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1953</SUB>> ]
-"9918" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1953</SUB>> ]
-"9912" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1953</SUB>> ]
-"9913" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1953</SUB>> ]
-"9915" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1953</SUB>> ]
-"9889" [label = <(METHOD,CallStaticLongMethod)<SUB>1949</SUB>> ]
-"9935" [label = <(METHOD_RETURN,jlong)<SUB>1949</SUB>> ]
-  "9895" -> "9900" 
-  "9899" -> "9902" 
-  "9902" -> "9907" 
-  "9902" -> "9921" 
-  "9921" -> "9925" 
-  "9924" -> "9934" 
-  "9930" -> "9935" 
-  "9900" -> "9899" 
-  "9925" -> "9924" 
-  "9931" -> "9930" 
-  "9932" -> "9931" 
-  "9906" -> "9913" 
-  "9906" -> "9921" 
-  "9934" -> "9932" 
-  "9907" -> "9906" 
-  "9911" -> "9918" 
-  "9918" -> "9935" 
-  "9912" -> "9911" 
-  "9913" -> "9915" 
-  "9915" -> "9912" 
-  "9889" -> "9895" 
+digraph "CallStaticFloatMethodV" {  
+"9874" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1904</SUB>> ]
+"9893" [label = <(soa,soa(env))<SUB>1905</SUB>> ]
+"9895" [label = <(RETURN,return InvokeWithVarArgs(soa, nullptr, mid, args).GetF();,return InvokeWithVarArgs(soa, nullptr, mid, args).GetF();)<SUB>1906</SUB>> ]
+"9896" [label = <(GetF,InvokeWithVarArgs(soa, nullptr, mid, args).GetF())<SUB>1906</SUB>> ]
+"9897" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, nullptr, mid, args).GetF)<SUB>1906</SUB>> ]
+"9878" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1904</SUB>> ]
+"9898" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1906</SUB>> ]
+"9903" [label = <(FIELD_IDENTIFIER,GetF,GetF)<SUB>1906</SUB>> ]
+"9879" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1904</SUB>> ]
+"9883" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1904</SUB>> ]
+"9890" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1904</SUB>> ]
+"9884" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1904</SUB>> ]
+"9885" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1904</SUB>> ]
+"9887" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1904</SUB>> ]
+"9868" [label = <(METHOD,CallStaticFloatMethodV)<SUB>1903</SUB>> ]
+"9904" [label = <(METHOD_RETURN,jfloat)<SUB>1903</SUB>> ]
+  "9874" -> "9879" 
+  "9874" -> "9893" 
+  "9893" -> "9898" 
+  "9895" -> "9904" 
+  "9896" -> "9895" 
+  "9897" -> "9896" 
+  "9878" -> "9885" 
+  "9878" -> "9893" 
+  "9898" -> "9903" 
+  "9903" -> "9897" 
+  "9879" -> "9878" 
+  "9883" -> "9890" 
+  "9890" -> "9904" 
+  "9884" -> "9883" 
+  "9885" -> "9887" 
+  "9887" -> "9884" 
+  "9868" -> "9874" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/189-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/189-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/189-cfg.dot	2023-06-07 19:35:28.337384337 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/189-cfg.dot	2023-06-07 19:35:34.867383768 +0330
@@ -1,35 +1,35 @@
-digraph "CallStaticLongMethodV" {  
-"9943" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1960</SUB>> ]
-"9962" [label = <(soa,soa(env))<SUB>1961</SUB>> ]
-"9964" [label = <(RETURN,return InvokeWithVarArgs(soa, nullptr, mid, args).GetJ();,return InvokeWithVarArgs(soa, nullptr, mid, args).GetJ();)<SUB>1962</SUB>> ]
-"9965" [label = <(GetJ,InvokeWithVarArgs(soa, nullptr, mid, args).GetJ())<SUB>1962</SUB>> ]
-"9966" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, nullptr, mid, args).GetJ)<SUB>1962</SUB>> ]
-"9947" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1960</SUB>> ]
-"9967" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1962</SUB>> ]
-"9972" [label = <(FIELD_IDENTIFIER,GetJ,GetJ)<SUB>1962</SUB>> ]
-"9948" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1960</SUB>> ]
-"9952" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1960</SUB>> ]
-"9959" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1960</SUB>> ]
-"9953" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1960</SUB>> ]
-"9954" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1960</SUB>> ]
-"9956" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1960</SUB>> ]
-"9937" [label = <(METHOD,CallStaticLongMethodV)<SUB>1959</SUB>> ]
-"9973" [label = <(METHOD_RETURN,jlong)<SUB>1959</SUB>> ]
-  "9943" -> "9948" 
-  "9943" -> "9962" 
-  "9962" -> "9967" 
-  "9964" -> "9973" 
-  "9965" -> "9964" 
-  "9966" -> "9965" 
-  "9947" -> "9954" 
-  "9947" -> "9962" 
-  "9967" -> "9972" 
-  "9972" -> "9966" 
-  "9948" -> "9947" 
-  "9952" -> "9959" 
-  "9959" -> "9973" 
-  "9953" -> "9952" 
-  "9954" -> "9956" 
-  "9956" -> "9953" 
-  "9937" -> "9943" 
+digraph "CallStaticFloatMethodA" {  
+"9912" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1910</SUB>> ]
+"9931" [label = <(soa,soa(env))<SUB>1911</SUB>> ]
+"9933" [label = <(RETURN,return InvokeWithJValues(soa, nullptr, mid, args).GetF();,return InvokeWithJValues(soa, nullptr, mid, args).GetF();)<SUB>1912</SUB>> ]
+"9934" [label = <(GetF,InvokeWithJValues(soa, nullptr, mid, args).GetF())<SUB>1912</SUB>> ]
+"9935" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, nullptr, mid, args).GetF)<SUB>1912</SUB>> ]
+"9916" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1910</SUB>> ]
+"9936" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1912</SUB>> ]
+"9941" [label = <(FIELD_IDENTIFIER,GetF,GetF)<SUB>1912</SUB>> ]
+"9917" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1910</SUB>> ]
+"9921" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1910</SUB>> ]
+"9928" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1910</SUB>> ]
+"9922" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1910</SUB>> ]
+"9923" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1910</SUB>> ]
+"9925" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1910</SUB>> ]
+"9906" [label = <(METHOD,CallStaticFloatMethodA)<SUB>1909</SUB>> ]
+"9942" [label = <(METHOD_RETURN,jfloat)<SUB>1909</SUB>> ]
+  "9912" -> "9917" 
+  "9912" -> "9931" 
+  "9931" -> "9936" 
+  "9933" -> "9942" 
+  "9934" -> "9933" 
+  "9935" -> "9934" 
+  "9916" -> "9923" 
+  "9916" -> "9931" 
+  "9936" -> "9941" 
+  "9941" -> "9935" 
+  "9917" -> "9916" 
+  "9921" -> "9928" 
+  "9928" -> "9942" 
+  "9922" -> "9921" 
+  "9923" -> "9925" 
+  "9925" -> "9922" 
+  "9906" -> "9912" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/19-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/19-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/19-cfg.dot	2023-06-07 19:35:28.217384348 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/19-cfg.dot	2023-06-07 19:35:34.747383777 +0330
@@ -1,48 +1,5 @@
-digraph "GetKind" {  
-"446" [label = <(&lt;operator&gt;.assignment,runtime_method = reinterpret_cast&lt;uintptr_t&gt;(art::GetJniNativeInterface))<SUB>291</SUB>> ]
-"466" [label = <(RETURN,return art::LocationIsOnApex(so_name) ? SharedObjectKind::kApexModule\012 : SharedObjectKind::kOther;,return art::LocationIsOnApex(so_name) ? SharedObjectKind::kApexModule\012 : SharedObjectKind::kOther;)<SUB>295</SUB>> ]
-"448" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;uintptr_t&gt;(art::GetJniNativeInterface))<SUB>291</SUB>> ]
-"454" [label = <(&lt;operator&gt;.logicalAnd,runtime_method &gt;= start &amp;&amp; runtime_method &lt; limit)<SUB>292</SUB>> ]
-"467" [label = <(&lt;operator&gt;.conditional,art::LocationIsOnApex(so_name) ? SharedObjectKind::kApexModule\012 : SharedObjectKind::kOther)<SUB>295</SUB>> ]
-"449" [label = <(UNKNOWN,uintptr_t,uintptr_t)<SUB>291</SUB>> ]
-"450" [label = <(&lt;operator&gt;.fieldAccess,art::GetJniNativeInterface)<SUB>291</SUB>> ]
-"455" [label = <(&lt;operator&gt;.greaterEqualsThan,runtime_method &gt;= start)<SUB>292</SUB>> ]
-"458" [label = <(&lt;operator&gt;.lessThan,runtime_method &lt; limit)<SUB>292</SUB>> ]
-"462" [label = <(RETURN,return SharedObjectKind::kRuntime;,return SharedObjectKind::kRuntime;)<SUB>293</SUB>> ]
-"468" [label = <(art::LocationIsOnApex,art::LocationIsOnApex(so_name))<SUB>295</SUB>> ]
-"473" [label = <(&lt;operator&gt;.fieldAccess,SharedObjectKind::kApexModule)<SUB>295</SUB>> ]
-"476" [label = <(&lt;operator&gt;.fieldAccess,SharedObjectKind::kOther)<SUB>296</SUB>> ]
-"452" [label = <(FIELD_IDENTIFIER,GetJniNativeInterface,GetJniNativeInterface)<SUB>291</SUB>> ]
-"463" [label = <(&lt;operator&gt;.fieldAccess,SharedObjectKind::kRuntime)<SUB>293</SUB>> ]
-"469" [label = <(&lt;operator&gt;.fieldAccess,art::LocationIsOnApex)<SUB>295</SUB>> ]
-"475" [label = <(FIELD_IDENTIFIER,kApexModule,kApexModule)<SUB>295</SUB>> ]
-"478" [label = <(FIELD_IDENTIFIER,kOther,kOther)<SUB>296</SUB>> ]
-"465" [label = <(FIELD_IDENTIFIER,kRuntime,kRuntime)<SUB>293</SUB>> ]
-"471" [label = <(FIELD_IDENTIFIER,LocationIsOnApex,LocationIsOnApex)<SUB>295</SUB>> ]
-"440" [label = <(METHOD,GetKind)<SUB>290</SUB>> ]
-"479" [label = <(METHOD_RETURN,SharedObjectKind)<SUB>290</SUB>> ]
-  "446" -> "455" 
-  "466" -> "479" 
-  "448" -> "446" 
-  "454" -> "465" 
-  "454" -> "471" 
-  "467" -> "466" 
-  "449" -> "452" 
-  "450" -> "448" 
-  "455" -> "454" 
-  "455" -> "458" 
-  "458" -> "454" 
-  "462" -> "479" 
-  "468" -> "475" 
-  "468" -> "478" 
-  "473" -> "467" 
-  "476" -> "467" 
-  "452" -> "450" 
-  "463" -> "462" 
-  "469" -> "468" 
-  "475" -> "473" 
-  "478" -> "476" 
-  "465" -> "463" 
-  "471" -> "469" 
-  "440" -> "449" 
+digraph "NotifySetPrimitiveField" {  
+"401" [label = <(METHOD,NotifySetPrimitiveField)<SUB>315</SUB>> ]
+"406" [label = <(METHOD_RETURN,void)<SUB>315</SUB>> ]
+  "401" -> "406" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/190-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/190-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/190-cfg.dot	2023-06-07 19:35:28.337384337 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/190-cfg.dot	2023-06-07 19:35:34.867383768 +0330
@@ -1,35 +1,43 @@
-digraph "CallStaticLongMethodA" {  
-"9981" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1966</SUB>> ]
-"10000" [label = <(soa,soa(env))<SUB>1967</SUB>> ]
-"10002" [label = <(RETURN,return InvokeWithJValues(soa, nullptr, mid, args).GetJ();,return InvokeWithJValues(soa, nullptr, mid, args).GetJ();)<SUB>1968</SUB>> ]
-"10003" [label = <(GetJ,InvokeWithJValues(soa, nullptr, mid, args).GetJ())<SUB>1968</SUB>> ]
-"10004" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, nullptr, mid, args).GetJ)<SUB>1968</SUB>> ]
-"9985" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1966</SUB>> ]
-"10005" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1968</SUB>> ]
-"10010" [label = <(FIELD_IDENTIFIER,GetJ,GetJ)<SUB>1968</SUB>> ]
-"9986" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1966</SUB>> ]
-"9990" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1966</SUB>> ]
-"9997" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1966</SUB>> ]
-"9991" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1966</SUB>> ]
-"9992" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1966</SUB>> ]
-"9994" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1966</SUB>> ]
-"9975" [label = <(METHOD,CallStaticLongMethodA)<SUB>1965</SUB>> ]
-"10011" [label = <(METHOD_RETURN,jlong)<SUB>1965</SUB>> ]
-  "9981" -> "9986" 
-  "9981" -> "10000" 
-  "10000" -> "10005" 
-  "10002" -> "10011" 
-  "10003" -> "10002" 
-  "10004" -> "10003" 
-  "9985" -> "9992" 
-  "9985" -> "10000" 
-  "10005" -> "10010" 
-  "10010" -> "10004" 
+digraph "CallStaticDoubleMethod" {  
+"9950" [label = <(va_start,va_start(ap, mid))<SUB>1917</SUB>> ]
+"9954" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1918</SUB>> ]
+"9957" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1919</SUB>> ]
+"9976" [label = <(soa,soa(env))<SUB>1920</SUB>> ]
+"9979" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, ap)))<SUB>1921</SUB>> ]
+"9985" [label = <(RETURN,return result.GetD();,return result.GetD();)<SUB>1922</SUB>> ]
+"9955" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1918</SUB>> ]
+"9980" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1921</SUB>> ]
+"9986" [label = <(GetD,result.GetD())<SUB>1922</SUB>> ]
+"9987" [label = <(&lt;operator&gt;.fieldAccess,result.GetD)<SUB>1922</SUB>> ]
+"9961" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1919</SUB>> ]
+"9989" [label = <(FIELD_IDENTIFIER,GetD,GetD)<SUB>1922</SUB>> ]
+"9962" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1919</SUB>> ]
+"9966" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1919</SUB>> ]
+"9973" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1919</SUB>> ]
+"9967" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1919</SUB>> ]
+"9968" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1919</SUB>> ]
+"9970" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1919</SUB>> ]
+"9944" [label = <(METHOD,CallStaticDoubleMethod)<SUB>1915</SUB>> ]
+"9990" [label = <(METHOD_RETURN,jdouble)<SUB>1915</SUB>> ]
+  "9950" -> "9955" 
+  "9954" -> "9957" 
+  "9957" -> "9962" 
+  "9957" -> "9976" 
+  "9976" -> "9980" 
+  "9979" -> "9989" 
+  "9985" -> "9990" 
+  "9955" -> "9954" 
+  "9980" -> "9979" 
   "9986" -> "9985" 
-  "9990" -> "9997" 
-  "9997" -> "10011" 
-  "9991" -> "9990" 
-  "9992" -> "9994" 
-  "9994" -> "9991" 
-  "9975" -> "9981" 
+  "9987" -> "9986" 
+  "9961" -> "9968" 
+  "9961" -> "9976" 
+  "9989" -> "9987" 
+  "9962" -> "9961" 
+  "9966" -> "9973" 
+  "9973" -> "9990" 
+  "9967" -> "9966" 
+  "9968" -> "9970" 
+  "9970" -> "9967" 
+  "9944" -> "9950" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/191-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/191-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/191-cfg.dot	2023-06-07 19:35:28.337384337 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/191-cfg.dot	2023-06-07 19:35:34.867383768 +0330
@@ -1,43 +1,35 @@
-digraph "CallStaticFloatMethod" {  
-"10019" [label = <(va_start,va_start(ap, mid))<SUB>1973</SUB>> ]
-"10023" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1974</SUB>> ]
-"10026" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1975</SUB>> ]
-"10045" [label = <(soa,soa(env))<SUB>1976</SUB>> ]
-"10048" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, ap)))<SUB>1977</SUB>> ]
-"10054" [label = <(RETURN,return result.GetF();,return result.GetF();)<SUB>1978</SUB>> ]
-"10024" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1974</SUB>> ]
-"10049" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1977</SUB>> ]
-"10055" [label = <(GetF,result.GetF())<SUB>1978</SUB>> ]
-"10056" [label = <(&lt;operator&gt;.fieldAccess,result.GetF)<SUB>1978</SUB>> ]
-"10030" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1975</SUB>> ]
-"10058" [label = <(FIELD_IDENTIFIER,GetF,GetF)<SUB>1978</SUB>> ]
-"10031" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1975</SUB>> ]
-"10035" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1975</SUB>> ]
-"10042" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1975</SUB>> ]
-"10036" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1975</SUB>> ]
-"10037" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1975</SUB>> ]
-"10039" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1975</SUB>> ]
-"10013" [label = <(METHOD,CallStaticFloatMethod)<SUB>1971</SUB>> ]
-"10059" [label = <(METHOD_RETURN,jfloat)<SUB>1971</SUB>> ]
-  "10019" -> "10024" 
-  "10023" -> "10026" 
-  "10026" -> "10031" 
-  "10026" -> "10045" 
-  "10045" -> "10049" 
-  "10048" -> "10058" 
-  "10054" -> "10059" 
-  "10024" -> "10023" 
-  "10049" -> "10048" 
-  "10055" -> "10054" 
-  "10056" -> "10055" 
-  "10030" -> "10037" 
-  "10030" -> "10045" 
-  "10058" -> "10056" 
-  "10031" -> "10030" 
-  "10035" -> "10042" 
-  "10042" -> "10059" 
-  "10036" -> "10035" 
-  "10037" -> "10039" 
-  "10039" -> "10036" 
-  "10013" -> "10019" 
+digraph "CallStaticDoubleMethodV" {  
+"9998" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1926</SUB>> ]
+"10017" [label = <(soa,soa(env))<SUB>1927</SUB>> ]
+"10019" [label = <(RETURN,return InvokeWithVarArgs(soa, nullptr, mid, args).GetD();,return InvokeWithVarArgs(soa, nullptr, mid, args).GetD();)<SUB>1928</SUB>> ]
+"10020" [label = <(GetD,InvokeWithVarArgs(soa, nullptr, mid, args).GetD())<SUB>1928</SUB>> ]
+"10021" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, nullptr, mid, args).GetD)<SUB>1928</SUB>> ]
+"10002" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1926</SUB>> ]
+"10022" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1928</SUB>> ]
+"10027" [label = <(FIELD_IDENTIFIER,GetD,GetD)<SUB>1928</SUB>> ]
+"10003" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1926</SUB>> ]
+"10007" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1926</SUB>> ]
+"10014" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1926</SUB>> ]
+"10008" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1926</SUB>> ]
+"10009" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1926</SUB>> ]
+"10011" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1926</SUB>> ]
+"9992" [label = <(METHOD,CallStaticDoubleMethodV)<SUB>1925</SUB>> ]
+"10028" [label = <(METHOD_RETURN,jdouble)<SUB>1925</SUB>> ]
+  "9998" -> "10003" 
+  "9998" -> "10017" 
+  "10017" -> "10022" 
+  "10019" -> "10028" 
+  "10020" -> "10019" 
+  "10021" -> "10020" 
+  "10002" -> "10009" 
+  "10002" -> "10017" 
+  "10022" -> "10027" 
+  "10027" -> "10021" 
+  "10003" -> "10002" 
+  "10007" -> "10014" 
+  "10014" -> "10028" 
+  "10008" -> "10007" 
+  "10009" -> "10011" 
+  "10011" -> "10008" 
+  "9992" -> "9998" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/192-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/192-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/192-cfg.dot	2023-06-07 19:35:28.337384337 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/192-cfg.dot	2023-06-07 19:35:34.867383768 +0330
@@ -1,35 +1,35 @@
-digraph "CallStaticFloatMethodV" {  
-"10067" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1982</SUB>> ]
-"10086" [label = <(soa,soa(env))<SUB>1983</SUB>> ]
-"10088" [label = <(RETURN,return InvokeWithVarArgs(soa, nullptr, mid, args).GetF();,return InvokeWithVarArgs(soa, nullptr, mid, args).GetF();)<SUB>1984</SUB>> ]
-"10089" [label = <(GetF,InvokeWithVarArgs(soa, nullptr, mid, args).GetF())<SUB>1984</SUB>> ]
-"10090" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, nullptr, mid, args).GetF)<SUB>1984</SUB>> ]
-"10071" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1982</SUB>> ]
-"10091" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1984</SUB>> ]
-"10096" [label = <(FIELD_IDENTIFIER,GetF,GetF)<SUB>1984</SUB>> ]
-"10072" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1982</SUB>> ]
-"10076" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1982</SUB>> ]
-"10083" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1982</SUB>> ]
-"10077" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1982</SUB>> ]
-"10078" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1982</SUB>> ]
-"10080" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1982</SUB>> ]
-"10061" [label = <(METHOD,CallStaticFloatMethodV)<SUB>1981</SUB>> ]
-"10097" [label = <(METHOD_RETURN,jfloat)<SUB>1981</SUB>> ]
-  "10067" -> "10072" 
-  "10067" -> "10086" 
-  "10086" -> "10091" 
-  "10088" -> "10097" 
-  "10089" -> "10088" 
-  "10090" -> "10089" 
-  "10071" -> "10078" 
-  "10071" -> "10086" 
-  "10091" -> "10096" 
-  "10096" -> "10090" 
-  "10072" -> "10071" 
-  "10076" -> "10083" 
-  "10083" -> "10097" 
-  "10077" -> "10076" 
-  "10078" -> "10080" 
-  "10080" -> "10077" 
-  "10061" -> "10067" 
+digraph "CallStaticDoubleMethodA" {  
+"10036" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1932</SUB>> ]
+"10055" [label = <(soa,soa(env))<SUB>1933</SUB>> ]
+"10057" [label = <(RETURN,return InvokeWithJValues(soa, nullptr, mid, args).GetD();,return InvokeWithJValues(soa, nullptr, mid, args).GetD();)<SUB>1934</SUB>> ]
+"10058" [label = <(GetD,InvokeWithJValues(soa, nullptr, mid, args).GetD())<SUB>1934</SUB>> ]
+"10059" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, nullptr, mid, args).GetD)<SUB>1934</SUB>> ]
+"10040" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1932</SUB>> ]
+"10060" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1934</SUB>> ]
+"10065" [label = <(FIELD_IDENTIFIER,GetD,GetD)<SUB>1934</SUB>> ]
+"10041" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1932</SUB>> ]
+"10045" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1932</SUB>> ]
+"10052" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1932</SUB>> ]
+"10046" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1932</SUB>> ]
+"10047" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1932</SUB>> ]
+"10049" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1932</SUB>> ]
+"10030" [label = <(METHOD,CallStaticDoubleMethodA)<SUB>1931</SUB>> ]
+"10066" [label = <(METHOD_RETURN,jdouble)<SUB>1931</SUB>> ]
+  "10036" -> "10041" 
+  "10036" -> "10055" 
+  "10055" -> "10060" 
+  "10057" -> "10066" 
+  "10058" -> "10057" 
+  "10059" -> "10058" 
+  "10040" -> "10047" 
+  "10040" -> "10055" 
+  "10060" -> "10065" 
+  "10065" -> "10059" 
+  "10041" -> "10040" 
+  "10045" -> "10052" 
+  "10052" -> "10066" 
+  "10046" -> "10045" 
+  "10047" -> "10049" 
+  "10049" -> "10046" 
+  "10030" -> "10036" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/193-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/193-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/193-cfg.dot	2023-06-07 19:35:28.337384337 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/193-cfg.dot	2023-06-07 19:35:34.867383768 +0330
@@ -1,35 +1,33 @@
-digraph "CallStaticFloatMethodA" {  
-"10105" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1988</SUB>> ]
-"10124" [label = <(soa,soa(env))<SUB>1989</SUB>> ]
-"10126" [label = <(RETURN,return InvokeWithJValues(soa, nullptr, mid, args).GetF();,return InvokeWithJValues(soa, nullptr, mid, args).GetF();)<SUB>1990</SUB>> ]
-"10127" [label = <(GetF,InvokeWithJValues(soa, nullptr, mid, args).GetF())<SUB>1990</SUB>> ]
-"10128" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, nullptr, mid, args).GetF)<SUB>1990</SUB>> ]
-"10109" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1988</SUB>> ]
-"10129" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1990</SUB>> ]
-"10134" [label = <(FIELD_IDENTIFIER,GetF,GetF)<SUB>1990</SUB>> ]
-"10110" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1988</SUB>> ]
-"10114" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1988</SUB>> ]
-"10121" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1988</SUB>> ]
-"10115" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1988</SUB>> ]
-"10116" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1988</SUB>> ]
-"10118" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1988</SUB>> ]
-"10099" [label = <(METHOD,CallStaticFloatMethodA)<SUB>1987</SUB>> ]
-"10135" [label = <(METHOD_RETURN,jfloat)<SUB>1987</SUB>> ]
-  "10105" -> "10110" 
-  "10105" -> "10124" 
-  "10124" -> "10129" 
-  "10126" -> "10135" 
-  "10127" -> "10126" 
-  "10128" -> "10127" 
-  "10109" -> "10116" 
-  "10109" -> "10124" 
-  "10129" -> "10134" 
-  "10134" -> "10128" 
-  "10110" -> "10109" 
-  "10114" -> "10121" 
-  "10121" -> "10135" 
-  "10115" -> "10114" 
-  "10116" -> "10118" 
-  "10118" -> "10115" 
-  "10099" -> "10105" 
+digraph "CallStaticVoidMethod" {  
+"10074" [label = <(va_start,va_start(ap, mid))<SUB>1939</SUB>> ]
+"10078" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1940</SUB>> ]
+"10081" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1941</SUB>> ]
+"10099" [label = <(soa,soa(env))<SUB>1942</SUB>> ]
+"10101" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1943</SUB>> ]
+"10079" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1940</SUB>> ]
+"10085" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1941</SUB>> ]
+"10086" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1941</SUB>> ]
+"10090" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1941</SUB>> ]
+"10097" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1941</SUB>> ]
+"10091" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1941</SUB>> ]
+"10092" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1941</SUB>> ]
+"10094" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1941</SUB>> ]
+"10068" [label = <(METHOD,CallStaticVoidMethod)<SUB>1937</SUB>> ]
+"10106" [label = <(METHOD_RETURN,void)<SUB>1937</SUB>> ]
+  "10074" -> "10079" 
+  "10078" -> "10081" 
+  "10081" -> "10086" 
+  "10081" -> "10099" 
+  "10099" -> "10101" 
+  "10101" -> "10106" 
+  "10079" -> "10078" 
+  "10085" -> "10092" 
+  "10085" -> "10099" 
+  "10086" -> "10085" 
+  "10090" -> "10097" 
+  "10097" -> "10106" 
+  "10091" -> "10090" 
+  "10092" -> "10094" 
+  "10094" -> "10091" 
+  "10068" -> "10074" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/194-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/194-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/194-cfg.dot	2023-06-07 19:35:28.337384337 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/194-cfg.dot	2023-06-07 19:35:34.867383768 +0330
@@ -1,43 +1,27 @@
-digraph "CallStaticDoubleMethod" {  
-"10143" [label = <(va_start,va_start(ap, mid))<SUB>1995</SUB>> ]
-"10147" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1996</SUB>> ]
-"10150" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1997</SUB>> ]
-"10169" [label = <(soa,soa(env))<SUB>1998</SUB>> ]
-"10172" [label = <(result,result(InvokeWithVarArgs(soa, nullptr, mid, ap)))<SUB>1999</SUB>> ]
-"10178" [label = <(RETURN,return result.GetD();,return result.GetD();)<SUB>2000</SUB>> ]
-"10148" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1996</SUB>> ]
-"10173" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>1999</SUB>> ]
-"10179" [label = <(GetD,result.GetD())<SUB>2000</SUB>> ]
-"10180" [label = <(&lt;operator&gt;.fieldAccess,result.GetD)<SUB>2000</SUB>> ]
-"10154" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1997</SUB>> ]
-"10182" [label = <(FIELD_IDENTIFIER,GetD,GetD)<SUB>2000</SUB>> ]
-"10155" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1997</SUB>> ]
-"10159" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1997</SUB>> ]
-"10166" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1997</SUB>> ]
-"10160" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1997</SUB>> ]
-"10161" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1997</SUB>> ]
-"10163" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1997</SUB>> ]
-"10137" [label = <(METHOD,CallStaticDoubleMethod)<SUB>1993</SUB>> ]
-"10183" [label = <(METHOD_RETURN,jdouble)<SUB>1993</SUB>> ]
-  "10143" -> "10148" 
-  "10147" -> "10150" 
-  "10150" -> "10155" 
-  "10150" -> "10169" 
-  "10169" -> "10173" 
-  "10172" -> "10182" 
-  "10178" -> "10183" 
-  "10148" -> "10147" 
-  "10173" -> "10172" 
-  "10179" -> "10178" 
-  "10180" -> "10179" 
-  "10154" -> "10161" 
-  "10154" -> "10169" 
-  "10182" -> "10180" 
-  "10155" -> "10154" 
-  "10159" -> "10166" 
-  "10166" -> "10183" 
-  "10160" -> "10159" 
-  "10161" -> "10163" 
-  "10163" -> "10160" 
-  "10137" -> "10143" 
+digraph "CallStaticVoidMethodV" {  
+"10114" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1947</SUB>> ]
+"10132" [label = <(soa,soa(env))<SUB>1948</SUB>> ]
+"10134" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>1949</SUB>> ]
+"10118" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1947</SUB>> ]
+"10119" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1947</SUB>> ]
+"10123" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1947</SUB>> ]
+"10130" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1947</SUB>> ]
+"10124" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1947</SUB>> ]
+"10125" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1947</SUB>> ]
+"10127" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1947</SUB>> ]
+"10108" [label = <(METHOD,CallStaticVoidMethodV)<SUB>1946</SUB>> ]
+"10139" [label = <(METHOD_RETURN,void)<SUB>1946</SUB>> ]
+  "10114" -> "10119" 
+  "10114" -> "10132" 
+  "10132" -> "10134" 
+  "10134" -> "10139" 
+  "10118" -> "10125" 
+  "10118" -> "10132" 
+  "10119" -> "10118" 
+  "10123" -> "10130" 
+  "10130" -> "10139" 
+  "10124" -> "10123" 
+  "10125" -> "10127" 
+  "10127" -> "10124" 
+  "10108" -> "10114" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/195-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/195-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/195-cfg.dot	2023-06-07 19:35:28.347384338 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/195-cfg.dot	2023-06-07 19:35:34.867383768 +0330
@@ -1,35 +1,27 @@
-digraph "CallStaticDoubleMethodV" {  
-"10191" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>2004</SUB>> ]
-"10210" [label = <(soa,soa(env))<SUB>2005</SUB>> ]
-"10212" [label = <(RETURN,return InvokeWithVarArgs(soa, nullptr, mid, args).GetD();,return InvokeWithVarArgs(soa, nullptr, mid, args).GetD();)<SUB>2006</SUB>> ]
-"10213" [label = <(GetD,InvokeWithVarArgs(soa, nullptr, mid, args).GetD())<SUB>2006</SUB>> ]
-"10214" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithVarArgs(soa, nullptr, mid, args).GetD)<SUB>2006</SUB>> ]
-"10195" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>2004</SUB>> ]
-"10215" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>2006</SUB>> ]
-"10220" [label = <(FIELD_IDENTIFIER,GetD,GetD)<SUB>2006</SUB>> ]
-"10196" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>2004</SUB>> ]
-"10200" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>2004</SUB>> ]
-"10207" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>2004</SUB>> ]
-"10201" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2004</SUB>> ]
-"10202" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2004</SUB>> ]
-"10204" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2004</SUB>> ]
-"10185" [label = <(METHOD,CallStaticDoubleMethodV)<SUB>2003</SUB>> ]
-"10221" [label = <(METHOD_RETURN,jdouble)<SUB>2003</SUB>> ]
-  "10191" -> "10196" 
-  "10191" -> "10210" 
-  "10210" -> "10215" 
-  "10212" -> "10221" 
-  "10213" -> "10212" 
-  "10214" -> "10213" 
-  "10195" -> "10202" 
-  "10195" -> "10210" 
-  "10215" -> "10220" 
-  "10220" -> "10214" 
-  "10196" -> "10195" 
-  "10200" -> "10207" 
-  "10207" -> "10221" 
-  "10201" -> "10200" 
-  "10202" -> "10204" 
-  "10204" -> "10201" 
-  "10185" -> "10191" 
+digraph "CallStaticVoidMethodA" {  
+"10147" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1953</SUB>> ]
+"10165" [label = <(soa,soa(env))<SUB>1954</SUB>> ]
+"10167" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>1955</SUB>> ]
+"10151" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1953</SUB>> ]
+"10152" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1953</SUB>> ]
+"10156" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1953</SUB>> ]
+"10163" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1953</SUB>> ]
+"10157" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1953</SUB>> ]
+"10158" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1953</SUB>> ]
+"10160" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1953</SUB>> ]
+"10141" [label = <(METHOD,CallStaticVoidMethodA)<SUB>1952</SUB>> ]
+"10172" [label = <(METHOD_RETURN,void)<SUB>1952</SUB>> ]
+  "10147" -> "10152" 
+  "10147" -> "10165" 
+  "10165" -> "10167" 
+  "10167" -> "10172" 
+  "10151" -> "10158" 
+  "10151" -> "10165" 
+  "10152" -> "10151" 
+  "10156" -> "10163" 
+  "10163" -> "10172" 
+  "10157" -> "10156" 
+  "10158" -> "10160" 
+  "10160" -> "10157" 
+  "10141" -> "10147" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/196-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/196-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/196-cfg.dot	2023-06-07 19:35:28.347384338 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/196-cfg.dot	2023-06-07 19:35:34.867383768 +0330
@@ -1,35 +1,76 @@
-digraph "CallStaticDoubleMethodA" {  
-"10229" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>2010</SUB>> ]
-"10248" [label = <(soa,soa(env))<SUB>2011</SUB>> ]
-"10250" [label = <(RETURN,return InvokeWithJValues(soa, nullptr, mid, args).GetD();,return InvokeWithJValues(soa, nullptr, mid, args).GetD();)<SUB>2012</SUB>> ]
-"10251" [label = <(GetD,InvokeWithJValues(soa, nullptr, mid, args).GetD())<SUB>2012</SUB>> ]
-"10252" [label = <(&lt;operator&gt;.fieldAccess,InvokeWithJValues(soa, nullptr, mid, args).GetD)<SUB>2012</SUB>> ]
-"10233" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>2010</SUB>> ]
-"10253" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>2012</SUB>> ]
-"10258" [label = <(FIELD_IDENTIFIER,GetD,GetD)<SUB>2012</SUB>> ]
-"10234" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>2010</SUB>> ]
-"10238" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>2010</SUB>> ]
-"10245" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>2010</SUB>> ]
-"10239" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2010</SUB>> ]
-"10240" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2010</SUB>> ]
-"10242" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2010</SUB>> ]
-"10223" [label = <(METHOD,CallStaticDoubleMethodA)<SUB>2009</SUB>> ]
-"10259" [label = <(METHOD_RETURN,jdouble)<SUB>2009</SUB>> ]
-  "10229" -> "10234" 
-  "10229" -> "10248" 
-  "10248" -> "10253" 
-  "10250" -> "10259" 
-  "10251" -> "10250" 
-  "10252" -> "10251" 
-  "10233" -> "10240" 
-  "10233" -> "10248" 
-  "10253" -> "10258" 
-  "10258" -> "10252" 
-  "10234" -> "10233" 
-  "10238" -> "10245" 
-  "10245" -> "10259" 
+digraph "NewString" {  
+"10215" [label = <(soa,soa(env))<SUB>1967</SUB>> ]
+"10217" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::String&gt; result = mirror::String::AllocFromUtf16(soa.Self(), char_count, chars))<SUB>1968</SUB>> ]
+"10237" [label = <(RETURN,return soa.AddLocalReference&lt;jstring&gt;(result);,return soa.AddLocalReference&lt;jstring&gt;(result);)<SUB>1969</SUB>> ]
+"10180" [label = <(UNLIKELY,UNLIKELY(char_count &lt; 0))<SUB>1959</SUB>> ]
+"10196" [label = <(UNLIKELY,UNLIKELY(chars == nullptr &amp;&amp; char_count &gt; 0))<SUB>1963</SUB>> ]
+"10218" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::String&gt; result)<SUB>1968</SUB>> ]
+"10225" [label = <(mirror::String::AllocFromUtf16,mirror::String::AllocFromUtf16(soa.Self(), char_count, chars))<SUB>1968</SUB>> ]
+"10238" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jstring&gt;(result))<SUB>1969</SUB>> ]
+"10181" [label = <(&lt;operator&gt;.lessThan,char_count &lt; 0)<SUB>1959</SUB>> ]
+"10185" [label = <(JniAbortF,JavaVmExtFromEnv(env)-&gt;JniAbortF(&quot;NewString&quot;, &quot;char_count &lt; 0: %d&quot;, char_count))<SUB>1960</SUB>> ]
+"10193" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>1961</SUB>> ]
+"10197" [label = <(&lt;operator&gt;.logicalAnd,chars == nullptr &amp;&amp; char_count &gt; 0)<SUB>1963</SUB>> ]
+"10205" [label = <(JniAbortF,JavaVmExtFromEnv(env)-&gt;JniAbortF(&quot;NewString&quot;, &quot;chars == null &amp;&amp; char_count &gt; 0&quot;))<SUB>1964</SUB>> ]
+"10212" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>1965</SUB>> ]
+"10219" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::String)<SUB>1968</SUB>> ]
+"10226" [label = <(&lt;operator&gt;.fieldAccess,mirror::String::AllocFromUtf16)<SUB>1968</SUB>> ]
+"10231" [label = <(Self,soa.Self())<SUB>1968</SUB>> ]
+"10239" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jstring)<SUB>1969</SUB>> ]
+"10186" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1960</SUB>> ]
+"10198" [label = <(&lt;operator&gt;.equals,chars == nullptr)<SUB>1963</SUB>> ]
+"10201" [label = <(&lt;operator&gt;.greaterThan,char_count &gt; 0)<SUB>1963</SUB>> ]
+"10206" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>1964</SUB>> ]
+"10221" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1968</SUB>> ]
+"10227" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1968</SUB>> ]
+"10230" [label = <(FIELD_IDENTIFIER,AllocFromUtf16,AllocFromUtf16)<SUB>1968</SUB>> ]
+"10232" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>1968</SUB>> ]
+"10240" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1969</SUB>> ]
+"10187" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1960</SUB>> ]
+"10189" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1960</SUB>> ]
+"10207" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1964</SUB>> ]
+"10209" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>1964</SUB>> ]
+"10223" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1968</SUB>> ]
+"10234" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>1968</SUB>> ]
+"10242" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1969</SUB>> ]
+"10174" [label = <(METHOD,NewString)<SUB>1958</SUB>> ]
+"10245" [label = <(METHOD_RETURN,jstring)<SUB>1958</SUB>> ]
+  "10215" -> "10223" 
+  "10217" -> "10242" 
+  "10237" -> "10245" 
+  "10180" -> "10187" 
+  "10180" -> "10198" 
+  "10196" -> "10207" 
+  "10196" -> "10215" 
+  "10218" -> "10227" 
+  "10225" -> "10217" 
+  "10238" -> "10237" 
+  "10181" -> "10180" 
+  "10185" -> "10193" 
+  "10193" -> "10245" 
+  "10197" -> "10196" 
+  "10205" -> "10212" 
+  "10212" -> "10245" 
+  "10219" -> "10218" 
+  "10226" -> "10234" 
+  "10231" -> "10225" 
   "10239" -> "10238" 
-  "10240" -> "10242" 
-  "10242" -> "10239" 
-  "10223" -> "10229" 
+  "10186" -> "10185" 
+  "10198" -> "10197" 
+  "10198" -> "10201" 
+  "10201" -> "10197" 
+  "10206" -> "10205" 
+  "10221" -> "10219" 
+  "10227" -> "10230" 
+  "10230" -> "10226" 
+  "10232" -> "10231" 
+  "10240" -> "10239" 
+  "10187" -> "10189" 
+  "10189" -> "10186" 
+  "10207" -> "10209" 
+  "10209" -> "10206" 
+  "10223" -> "10221" 
+  "10234" -> "10232" 
+  "10242" -> "10240" 
+  "10174" -> "10181" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/197-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/197-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/197-cfg.dot	2023-06-07 19:35:28.347384338 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/197-cfg.dot	2023-06-07 19:35:34.867383768 +0330
@@ -1,33 +1,46 @@
-digraph "CallStaticVoidMethod" {  
-"10267" [label = <(va_start,va_start(ap, mid))<SUB>2017</SUB>> ]
-"10271" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>2018</SUB>> ]
-"10274" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>2019</SUB>> ]
-"10292" [label = <(soa,soa(env))<SUB>2020</SUB>> ]
-"10294" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, ap))<SUB>2021</SUB>> ]
-"10272" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>2018</SUB>> ]
-"10278" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>2019</SUB>> ]
-"10279" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>2019</SUB>> ]
-"10283" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>2019</SUB>> ]
-"10290" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>2019</SUB>> ]
-"10284" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2019</SUB>> ]
-"10285" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2019</SUB>> ]
-"10287" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2019</SUB>> ]
-"10261" [label = <(METHOD,CallStaticVoidMethod)<SUB>2015</SUB>> ]
-"10299" [label = <(METHOD_RETURN,void)<SUB>2015</SUB>> ]
-  "10267" -> "10272" 
+digraph "NewStringUTF" {  
+"10259" [label = <(soa,soa(env))<SUB>1976</SUB>> ]
+"10261" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::String&gt; result = mirror::String::AllocFromModifiedUtf8(soa.Self(), utf))<SUB>1977</SUB>> ]
+"10280" [label = <(RETURN,return soa.AddLocalReference&lt;jstring&gt;(result);,return soa.AddLocalReference&lt;jstring&gt;(result);)<SUB>1978</SUB>> ]
+"10252" [label = <(&lt;operator&gt;.equals,utf == nullptr)<SUB>1973</SUB>> ]
+"10262" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::String&gt; result)<SUB>1977</SUB>> ]
+"10269" [label = <(mirror::String::AllocFromModifiedUtf8,mirror::String::AllocFromModifiedUtf8(soa.Self(), utf))<SUB>1977</SUB>> ]
+"10281" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jstring&gt;(result))<SUB>1978</SUB>> ]
+"10256" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>1974</SUB>> ]
+"10263" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::String)<SUB>1977</SUB>> ]
+"10270" [label = <(&lt;operator&gt;.fieldAccess,mirror::String::AllocFromModifiedUtf8)<SUB>1977</SUB>> ]
+"10275" [label = <(Self,soa.Self())<SUB>1977</SUB>> ]
+"10282" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jstring)<SUB>1978</SUB>> ]
+"10265" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1977</SUB>> ]
+"10271" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1977</SUB>> ]
+"10274" [label = <(FIELD_IDENTIFIER,AllocFromModifiedUtf8,AllocFromModifiedUtf8)<SUB>1977</SUB>> ]
+"10276" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>1977</SUB>> ]
+"10283" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1978</SUB>> ]
+"10267" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1977</SUB>> ]
+"10278" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>1977</SUB>> ]
+"10285" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1978</SUB>> ]
+"10247" [label = <(METHOD,NewStringUTF)<SUB>1972</SUB>> ]
+"10288" [label = <(METHOD_RETURN,jstring)<SUB>1972</SUB>> ]
+  "10259" -> "10267" 
+  "10261" -> "10285" 
+  "10280" -> "10288" 
+  "10252" -> "10256" 
+  "10252" -> "10259" 
+  "10262" -> "10271" 
+  "10269" -> "10261" 
+  "10281" -> "10280" 
+  "10256" -> "10288" 
+  "10263" -> "10262" 
+  "10270" -> "10278" 
+  "10275" -> "10269" 
+  "10282" -> "10281" 
+  "10265" -> "10263" 
   "10271" -> "10274" 
-  "10274" -> "10279" 
-  "10274" -> "10292" 
-  "10292" -> "10294" 
-  "10294" -> "10299" 
-  "10272" -> "10271" 
-  "10278" -> "10285" 
-  "10278" -> "10292" 
-  "10279" -> "10278" 
-  "10283" -> "10290" 
-  "10290" -> "10299" 
-  "10284" -> "10283" 
-  "10285" -> "10287" 
-  "10287" -> "10284" 
-  "10261" -> "10267" 
+  "10274" -> "10270" 
+  "10276" -> "10275" 
+  "10283" -> "10282" 
+  "10267" -> "10265" 
+  "10278" -> "10276" 
+  "10285" -> "10283" 
+  "10247" -> "10252" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/198-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/198-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/198-cfg.dot	2023-06-07 19:35:28.347384338 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/198-cfg.dot	2023-06-07 19:35:34.867383768 +0330
@@ -1,27 +1,45 @@
-digraph "CallStaticVoidMethodV" {  
-"10307" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>2025</SUB>> ]
-"10325" [label = <(soa,soa(env))<SUB>2026</SUB>> ]
-"10327" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, nullptr, mid, args))<SUB>2027</SUB>> ]
-"10311" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>2025</SUB>> ]
-"10312" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>2025</SUB>> ]
-"10316" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>2025</SUB>> ]
-"10323" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>2025</SUB>> ]
-"10317" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2025</SUB>> ]
-"10318" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2025</SUB>> ]
-"10320" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2025</SUB>> ]
-"10301" [label = <(METHOD,CallStaticVoidMethodV)<SUB>2024</SUB>> ]
-"10332" [label = <(METHOD_RETURN,void)<SUB>2024</SUB>> ]
-  "10307" -> "10312" 
-  "10307" -> "10325" 
-  "10325" -> "10327" 
-  "10327" -> "10332" 
-  "10311" -> "10318" 
-  "10311" -> "10325" 
-  "10312" -> "10311" 
-  "10316" -> "10323" 
-  "10323" -> "10332" 
-  "10317" -> "10316" 
-  "10318" -> "10320" 
-  "10320" -> "10317" 
-  "10301" -> "10307" 
+digraph "GetStringLength" {  
+"10294" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string))<SUB>1982</SUB>> ]
+"10313" [label = <(soa,soa(env))<SUB>1983</SUB>> ]
+"10315" [label = <(RETURN,return soa.Decode&lt;mirror::String&gt;(java_string)-&gt;GetLength();,return soa.Decode&lt;mirror::String&gt;(java_string)-&gt;GetLength();)<SUB>1984</SUB>> ]
+"10316" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::String&gt;(java_string)-&gt;GetLength())<SUB>1984</SUB>> ]
+"10317" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::String)<SUB>1984</SUB>> ]
+"10324" [label = <(GetLength,(java_string)-&gt;GetLength())<SUB>1984</SUB>> ]
+"10298" [label = <(UNLIKELY,UNLIKELY((java_string) == nullptr))<SUB>1982</SUB>> ]
+"10318" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1984</SUB>> ]
+"10321" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1984</SUB>> ]
+"10325" [label = <(&lt;operator&gt;.indirectFieldAccess,(java_string)-&gt;GetLength)<SUB>1984</SUB>> ]
+"10299" [label = <(&lt;operator&gt;.equals,(java_string) == nullptr)<SUB>1982</SUB>> ]
+"10303" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_string == null&quot;))<SUB>1982</SUB>> ]
+"10310" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string))<SUB>1982</SUB>> ]
+"10320" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1984</SUB>> ]
+"10323" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1984</SUB>> ]
+"10327" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>1984</SUB>> ]
+"10304" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1982</SUB>> ]
+"10305" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1982</SUB>> ]
+"10307" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1982</SUB>> ]
+"10290" [label = <(METHOD,GetStringLength)<SUB>1981</SUB>> ]
+"10328" [label = <(METHOD_RETURN,jsize)<SUB>1981</SUB>> ]
+  "10294" -> "10299" 
+  "10294" -> "10313" 
+  "10313" -> "10320" 
+  "10315" -> "10328" 
+  "10316" -> "10315" 
+  "10317" -> "10327" 
+  "10324" -> "10316" 
+  "10298" -> "10305" 
+  "10298" -> "10313" 
+  "10318" -> "10323" 
+  "10321" -> "10317" 
+  "10325" -> "10324" 
+  "10299" -> "10298" 
+  "10303" -> "10310" 
+  "10310" -> "10328" 
+  "10320" -> "10318" 
+  "10323" -> "10321" 
+  "10327" -> "10325" 
+  "10304" -> "10303" 
+  "10305" -> "10307" 
+  "10307" -> "10304" 
+  "10290" -> "10294" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/199-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/199-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/199-cfg.dot	2023-06-07 19:35:28.347384338 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/199-cfg.dot	2023-06-07 19:35:34.867383768 +0330
@@ -1,27 +1,45 @@
-digraph "CallStaticVoidMethodA" {  
-"10340" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>2031</SUB>> ]
-"10358" [label = <(soa,soa(env))<SUB>2032</SUB>> ]
-"10360" [label = <(InvokeWithJValues,InvokeWithJValues(soa, nullptr, mid, args))<SUB>2033</SUB>> ]
-"10344" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>2031</SUB>> ]
-"10345" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>2031</SUB>> ]
-"10349" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>2031</SUB>> ]
-"10356" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>2031</SUB>> ]
-"10350" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2031</SUB>> ]
-"10351" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2031</SUB>> ]
-"10353" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2031</SUB>> ]
-"10334" [label = <(METHOD,CallStaticVoidMethodA)<SUB>2030</SUB>> ]
-"10365" [label = <(METHOD_RETURN,void)<SUB>2030</SUB>> ]
-  "10340" -> "10345" 
-  "10340" -> "10358" 
-  "10358" -> "10360" 
-  "10360" -> "10365" 
-  "10344" -> "10351" 
-  "10344" -> "10358" 
-  "10345" -> "10344" 
-  "10349" -> "10356" 
-  "10356" -> "10365" 
-  "10350" -> "10349" 
-  "10351" -> "10353" 
-  "10353" -> "10350" 
-  "10334" -> "10340" 
+digraph "GetStringUTFLength" {  
+"10334" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string))<SUB>1988</SUB>> ]
+"10353" [label = <(soa,soa(env))<SUB>1989</SUB>> ]
+"10355" [label = <(RETURN,return soa.Decode&lt;mirror::String&gt;(java_string)-&gt;GetUtfLength();,return soa.Decode&lt;mirror::String&gt;(java_string)-&gt;GetUtfLength();)<SUB>1990</SUB>> ]
+"10356" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::String&gt;(java_string)-&gt;GetUtfLength())<SUB>1990</SUB>> ]
+"10357" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::String)<SUB>1990</SUB>> ]
+"10364" [label = <(GetUtfLength,(java_string)-&gt;GetUtfLength())<SUB>1990</SUB>> ]
+"10338" [label = <(UNLIKELY,UNLIKELY((java_string) == nullptr))<SUB>1988</SUB>> ]
+"10358" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1990</SUB>> ]
+"10361" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1990</SUB>> ]
+"10365" [label = <(&lt;operator&gt;.indirectFieldAccess,(java_string)-&gt;GetUtfLength)<SUB>1990</SUB>> ]
+"10339" [label = <(&lt;operator&gt;.equals,(java_string) == nullptr)<SUB>1988</SUB>> ]
+"10343" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_string == null&quot;))<SUB>1988</SUB>> ]
+"10350" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string))<SUB>1988</SUB>> ]
+"10360" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1990</SUB>> ]
+"10363" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1990</SUB>> ]
+"10367" [label = <(FIELD_IDENTIFIER,GetUtfLength,GetUtfLength)<SUB>1990</SUB>> ]
+"10344" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1988</SUB>> ]
+"10345" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1988</SUB>> ]
+"10347" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1988</SUB>> ]
+"10330" [label = <(METHOD,GetStringUTFLength)<SUB>1987</SUB>> ]
+"10368" [label = <(METHOD_RETURN,jsize)<SUB>1987</SUB>> ]
+  "10334" -> "10339" 
+  "10334" -> "10353" 
+  "10353" -> "10360" 
+  "10355" -> "10368" 
+  "10356" -> "10355" 
+  "10357" -> "10367" 
+  "10364" -> "10356" 
+  "10338" -> "10345" 
+  "10338" -> "10353" 
+  "10358" -> "10363" 
+  "10361" -> "10357" 
+  "10365" -> "10364" 
+  "10339" -> "10338" 
+  "10343" -> "10350" 
+  "10350" -> "10368" 
+  "10360" -> "10358" 
+  "10363" -> "10361" 
+  "10367" -> "10365" 
+  "10344" -> "10343" 
+  "10345" -> "10347" 
+  "10347" -> "10344" 
+  "10330" -> "10334" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/2-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/2-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/2-cfg.dot	2023-06-07 19:35:28.017384366 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/2-cfg.dot	2023-06-07 19:35:34.737383779 +0330
@@ -1,5 +1,5 @@
-digraph "anonymous_lambda_23" {  
-"15" [label = <(METHOD,anonymous_lambda_23)<SUB>2096</SUB>> ]
-"17" [label = <(METHOD_RETURN,ANY)<SUB>2096</SUB>> ]
-  "15" -> "17" 
+digraph "ScopedVAArgs" {  
+"14" [label = <(METHOD,ScopedVAArgs)<SUB>76</SUB>> ]
+"17" [label = <(METHOD_RETURN,ANY)<SUB>76</SUB>> ]
+  "14" -> "17" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/20-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/20-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/20-cfg.dot	2023-06-07 19:35:28.217384348 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/20-cfg.dot	2023-06-07 19:35:34.747383777 +0330
@@ -1,17 +1,5 @@
-digraph "&lt;clinit&gt;" {  
-"492" [label = <(&lt;operator&gt;.assignment,kLibjavacore = &quot;libjavacore.so&quot;)<SUB>309</SUB>> ]
-"495" [label = <(&lt;operator&gt;.assignment,kLibnativehelper = &quot;libnativehelper.so&quot;)<SUB>310</SUB>> ]
-"498" [label = <(&lt;operator&gt;.assignment,kLibopenjdk = art::kIsDebugBuild ? &quot;libopenjdkd.so&quot;\012 : &quot;libopenjdk.so&quot;)<SUB>311</SUB>> ]
-"500" [label = <(&lt;operator&gt;.conditional,art::kIsDebugBuild ? &quot;libopenjdkd.so&quot;\012 : &quot;libopenjdk.so&quot;)<SUB>311</SUB>> ]
-"501" [label = <(&lt;operator&gt;.fieldAccess,art::kIsDebugBuild)<SUB>311</SUB>> ]
-"503" [label = <(FIELD_IDENTIFIER,kIsDebugBuild,kIsDebugBuild)<SUB>311</SUB>> ]
-"490" [label = <(METHOD,&lt;clinit&gt;)> ]
-"507" [label = <(METHOD_RETURN,ANY)> ]
-  "492" -> "495" 
-  "495" -> "503" 
-  "498" -> "507" 
-  "500" -> "498" 
-  "501" -> "500" 
-  "503" -> "501" 
-  "490" -> "492" 
+digraph "NotifyGetField" {  
+"422" [label = <(METHOD,NotifyGetField)<SUB>340</SUB>> ]
+"426" [label = <(METHOD_RETURN,void)<SUB>340</SUB>> ]
+  "422" -> "426" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/200-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/200-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/200-cfg.dot	2023-06-07 19:35:28.347384338 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/200-cfg.dot	2023-06-07 19:35:34.867383768 +0330
@@ -1,76 +1,149 @@
-digraph "NewString" {  
-"10408" [label = <(soa,soa(env))<SUB>2045</SUB>> ]
-"10410" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::String&gt; result = mirror::String::AllocFromUtf16(soa.Self(), char_count, chars))<SUB>2046</SUB>> ]
-"10430" [label = <(RETURN,return soa.AddLocalReference&lt;jstring&gt;(result);,return soa.AddLocalReference&lt;jstring&gt;(result);)<SUB>2047</SUB>> ]
-"10373" [label = <(UNLIKELY,UNLIKELY(char_count &lt; 0))<SUB>2037</SUB>> ]
-"10389" [label = <(UNLIKELY,UNLIKELY(chars == nullptr &amp;&amp; char_count &gt; 0))<SUB>2041</SUB>> ]
-"10411" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::String&gt; result)<SUB>2046</SUB>> ]
-"10418" [label = <(mirror::String::AllocFromUtf16,mirror::String::AllocFromUtf16(soa.Self(), char_count, chars))<SUB>2046</SUB>> ]
-"10431" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jstring&gt;(result))<SUB>2047</SUB>> ]
-"10374" [label = <(&lt;operator&gt;.lessThan,char_count &lt; 0)<SUB>2037</SUB>> ]
-"10378" [label = <(JniAbortF,JavaVmExtFromEnv(env)-&gt;JniAbortF(&quot;NewString&quot;, &quot;char_count &lt; 0: %d&quot;, char_count))<SUB>2038</SUB>> ]
-"10386" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2039</SUB>> ]
-"10390" [label = <(&lt;operator&gt;.logicalAnd,chars == nullptr &amp;&amp; char_count &gt; 0)<SUB>2041</SUB>> ]
-"10398" [label = <(JniAbortF,JavaVmExtFromEnv(env)-&gt;JniAbortF(&quot;NewString&quot;, &quot;chars == null &amp;&amp; char_count &gt; 0&quot;))<SUB>2042</SUB>> ]
-"10405" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2043</SUB>> ]
-"10412" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::String)<SUB>2046</SUB>> ]
-"10419" [label = <(&lt;operator&gt;.fieldAccess,mirror::String::AllocFromUtf16)<SUB>2046</SUB>> ]
-"10424" [label = <(Self,soa.Self())<SUB>2046</SUB>> ]
-"10432" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jstring)<SUB>2047</SUB>> ]
-"10379" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>2038</SUB>> ]
-"10391" [label = <(&lt;operator&gt;.equals,chars == nullptr)<SUB>2041</SUB>> ]
-"10394" [label = <(&lt;operator&gt;.greaterThan,char_count &gt; 0)<SUB>2041</SUB>> ]
-"10399" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>2042</SUB>> ]
-"10414" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>2046</SUB>> ]
-"10420" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>2046</SUB>> ]
-"10423" [label = <(FIELD_IDENTIFIER,AllocFromUtf16,AllocFromUtf16)<SUB>2046</SUB>> ]
-"10425" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>2046</SUB>> ]
-"10433" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>2047</SUB>> ]
-"10380" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2038</SUB>> ]
-"10382" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2038</SUB>> ]
-"10400" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2042</SUB>> ]
-"10402" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2042</SUB>> ]
-"10416" [label = <(FIELD_IDENTIFIER,String,String)<SUB>2046</SUB>> ]
-"10427" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>2046</SUB>> ]
-"10435" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>2047</SUB>> ]
-"10367" [label = <(METHOD,NewString)<SUB>2036</SUB>> ]
-"10438" [label = <(METHOD_RETURN,jstring)<SUB>2036</SUB>> ]
-  "10408" -> "10416" 
-  "10410" -> "10435" 
-  "10430" -> "10438" 
-  "10373" -> "10380" 
-  "10373" -> "10391" 
-  "10389" -> "10400" 
-  "10389" -> "10408" 
-  "10411" -> "10420" 
-  "10418" -> "10410" 
-  "10431" -> "10430" 
-  "10374" -> "10373" 
-  "10378" -> "10386" 
-  "10386" -> "10438" 
-  "10390" -> "10389" 
-  "10398" -> "10405" 
-  "10405" -> "10438" 
-  "10412" -> "10411" 
-  "10419" -> "10427" 
-  "10424" -> "10418" 
-  "10432" -> "10431" 
-  "10379" -> "10378" 
-  "10391" -> "10390" 
-  "10391" -> "10394" 
-  "10394" -> "10390" 
+digraph "GetStringRegion" {  
+"10377" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string))<SUB>1995</SUB>> ]
+"10395" [label = <(soa,soa(env))<SUB>1996</SUB>> ]
+"10397" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::String&gt; s = soa.Decode&lt;mirror::String&gt;(java_string))<SUB>1997</SUB>> ]
+"10398" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::String&gt; s)<SUB>1997</SUB>> ]
+"10405" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::String&gt;(java_string))<SUB>1997</SUB>> ]
+"10415" [label = <(&lt;operator&gt;.logicalOr,start &lt; 0 || length &lt; 0 || length &gt; s-&gt;GetLength() - start)<SUB>1998</SUB>> ]
+"10399" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::String)<SUB>1997</SUB>> ]
+"10406" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::String)<SUB>1997</SUB>> ]
+"10416" [label = <(&lt;operator&gt;.logicalOr,start &lt; 0 || length &lt; 0)<SUB>1998</SUB>> ]
+"10423" [label = <(&lt;operator&gt;.greaterThan,length &gt; s-&gt;GetLength() - start)<SUB>1998</SUB>> ]
+"10432" [label = <(ThrowSIOOBE,ThrowSIOOBE(soa, start, length, s-&gt;GetLength()))<SUB>1999</SUB>> ]
+"10381" [label = <(UNLIKELY,UNLIKELY((java_string) == nullptr))<SUB>1995</SUB>> ]
+"10401" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1997</SUB>> ]
+"10407" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1997</SUB>> ]
+"10410" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>1997</SUB>> ]
+"10417" [label = <(&lt;operator&gt;.lessThan,start &lt; 0)<SUB>1998</SUB>> ]
+"10420" [label = <(&lt;operator&gt;.lessThan,length &lt; 0)<SUB>1998</SUB>> ]
+"10425" [label = <(&lt;operator&gt;.subtraction,s-&gt;GetLength() - start)<SUB>1998</SUB>> ]
+"10436" [label = <(GetLength,s-&gt;GetLength())<SUB>1999</SUB>> ]
+"10442" [label = <(CHECK_NON_NULL_MEMCPY_ARGUMENT,CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf))<SUB>2001</SUB>> ]
+"10382" [label = <(&lt;operator&gt;.equals,(java_string) == nullptr)<SUB>1995</SUB>> ]
+"10386" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_string == null&quot;))<SUB>1995</SUB>> ]
+"10393" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string))<SUB>1995</SUB>> ]
+"10403" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1997</SUB>> ]
+"10409" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1997</SUB>> ]
+"10412" [label = <(FIELD_IDENTIFIER,String,String)<SUB>1997</SUB>> ]
+"10426" [label = <(GetLength,s-&gt;GetLength())<SUB>1998</SUB>> ]
+"10437" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetLength)<SUB>1999</SUB>> ]
+"10465" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>2002</SUB>> ]
+"10387" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1995</SUB>> ]
+"10427" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetLength)<SUB>1998</SUB>> ]
+"10439" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>1999</SUB>> ]
+"10466" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>2002</SUB>> ]
+"10388" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1995</SUB>> ]
+"10390" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1995</SUB>> ]
+"10429" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>1998</SUB>> ]
+"10447" [label = <(UNLIKELY,UNLIKELY((length) != 0 &amp;&amp; (buf) == nullptr))<SUB>2001</SUB>> ]
+"10468" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>2002</SUB>> ]
+"10476" [label = <(&lt;operator&gt;.lessThan,i &lt; length)<SUB>2003</SUB>> ]
+"10479" [label = <(&lt;operator&gt;.preIncrement,++i)<SUB>2003</SUB>> ]
+"10498" [label = <(&lt;operator&gt;.assignment,* chars = static_cast&lt;jchar*&gt;(s-&gt;GetValue()))<SUB>2007</SUB>> ]
+"10506" [label = <(memcpy,memcpy(buf, chars + start, length * sizeof(jchar)))<SUB>2008</SUB>> ]
+"10448" [label = <(&lt;operator&gt;.logicalAnd,(length) != 0 &amp;&amp; (buf) == nullptr)<SUB>2001</SUB>> ]
+"10456" [label = <(CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;buf == null&quot;))<SUB>2001</SUB>> ]
+"10463" [label = <(RETURN,CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf),CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf))<SUB>2001</SUB>> ]
+"10473" [label = <(&lt;operator&gt;.assignment,i = 0)<SUB>2003</SUB>> ]
+"10482" [label = <(&lt;operator&gt;.assignment,buf[i] = static_cast&lt;jchar&gt;(s-&gt;CharAt(start+i)))<SUB>2004</SUB>> ]
+"10500" [label = <(&lt;operator&gt;.cast,static_cast&lt;jchar*&gt;(s-&gt;GetValue()))<SUB>2007</SUB>> ]
+"10508" [label = <(&lt;operator&gt;.addition,chars + start)<SUB>2008</SUB>> ]
+"10511" [label = <(&lt;operator&gt;.multiplication,length * sizeof(jchar))<SUB>2008</SUB>> ]
+"10449" [label = <(&lt;operator&gt;.notEquals,(length) != 0)<SUB>2001</SUB>> ]
+"10452" [label = <(&lt;operator&gt;.equals,(buf) == nullptr)<SUB>2001</SUB>> ]
+"10457" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2001</SUB>> ]
+"10483" [label = <(&lt;operator&gt;.indirectIndexAccess,buf[i])<SUB>2004</SUB>> ]
+"10486" [label = <(&lt;operator&gt;.cast,static_cast&lt;jchar&gt;(s-&gt;CharAt(start+i)))<SUB>2004</SUB>> ]
+"10501" [label = <(UNKNOWN,jchar*,jchar*)<SUB>2007</SUB>> ]
+"10502" [label = <(GetValue,s-&gt;GetValue())<SUB>2007</SUB>> ]
+"10513" [label = <(&lt;operator&gt;.sizeOf,sizeof(jchar))<SUB>2008</SUB>> ]
+"10458" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2001</SUB>> ]
+"10460" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2001</SUB>> ]
+"10487" [label = <(UNKNOWN,jchar,jchar)<SUB>2004</SUB>> ]
+"10488" [label = <(CharAt,s-&gt;CharAt(start+i))<SUB>2004</SUB>> ]
+"10503" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetValue)<SUB>2007</SUB>> ]
+"10489" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;CharAt)<SUB>2004</SUB>> ]
+"10492" [label = <(&lt;operator&gt;.addition,start+i)<SUB>2004</SUB>> ]
+"10505" [label = <(FIELD_IDENTIFIER,GetValue,GetValue)<SUB>2007</SUB>> ]
+"10491" [label = <(FIELD_IDENTIFIER,CharAt,CharAt)<SUB>2004</SUB>> ]
+"10370" [label = <(METHOD,GetStringRegion)<SUB>1993</SUB>> ]
+"10515" [label = <(METHOD_RETURN,void)<SUB>1993</SUB>> ]
+  "10377" -> "10382" 
+  "10377" -> "10395" 
+  "10395" -> "10403" 
+  "10397" -> "10417" 
+  "10398" -> "10409" 
+  "10405" -> "10397" 
+  "10415" -> "10439" 
+  "10415" -> "10442" 
   "10399" -> "10398" 
-  "10414" -> "10412" 
-  "10420" -> "10423" 
-  "10423" -> "10419" 
-  "10425" -> "10424" 
-  "10433" -> "10432" 
-  "10380" -> "10382" 
-  "10382" -> "10379" 
-  "10400" -> "10402" 
-  "10402" -> "10399" 
-  "10416" -> "10414" 
-  "10427" -> "10425" 
-  "10435" -> "10433" 
-  "10367" -> "10374" 
+  "10406" -> "10405" 
+  "10416" -> "10415" 
+  "10416" -> "10429" 
+  "10423" -> "10415" 
+  "10432" -> "10515" 
+  "10381" -> "10388" 
+  "10381" -> "10395" 
+  "10401" -> "10399" 
+  "10407" -> "10412" 
+  "10410" -> "10406" 
+  "10417" -> "10416" 
+  "10417" -> "10420" 
+  "10420" -> "10416" 
+  "10425" -> "10423" 
+  "10436" -> "10432" 
+  "10442" -> "10449" 
+  "10442" -> "10468" 
+  "10382" -> "10381" 
+  "10386" -> "10393" 
+  "10393" -> "10515" 
+  "10403" -> "10401" 
+  "10409" -> "10407" 
+  "10412" -> "10410" 
+  "10426" -> "10425" 
+  "10437" -> "10436" 
+  "10465" -> "10473" 
+  "10465" -> "10501" 
+  "10387" -> "10386" 
+  "10427" -> "10426" 
+  "10439" -> "10437" 
+  "10466" -> "10465" 
+  "10388" -> "10390" 
+  "10390" -> "10387" 
+  "10429" -> "10427" 
+  "10447" -> "10458" 
+  "10447" -> "10468" 
+  "10468" -> "10466" 
+  "10476" -> "10515" 
+  "10476" -> "10483" 
+  "10479" -> "10476" 
+  "10498" -> "10508" 
+  "10506" -> "10515" 
+  "10448" -> "10447" 
+  "10456" -> "10463" 
+  "10463" -> "10515" 
+  "10473" -> "10476" 
+  "10482" -> "10479" 
+  "10500" -> "10498" 
+  "10508" -> "10513" 
+  "10511" -> "10506" 
+  "10449" -> "10448" 
+  "10449" -> "10452" 
+  "10452" -> "10448" 
+  "10457" -> "10456" 
+  "10483" -> "10487" 
+  "10486" -> "10482" 
+  "10501" -> "10505" 
+  "10502" -> "10500" 
+  "10513" -> "10511" 
+  "10458" -> "10460" 
+  "10460" -> "10457" 
+  "10487" -> "10491" 
+  "10488" -> "10486" 
+  "10503" -> "10502" 
+  "10489" -> "10492" 
+  "10492" -> "10488" 
+  "10505" -> "10503" 
+  "10491" -> "10489" 
+  "10370" -> "10377" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/201-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/201-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/201-cfg.dot	2023-06-07 19:35:28.347384338 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/201-cfg.dot	2023-06-07 19:35:34.867383768 +0330
@@ -1,244 +1,143 @@
-digraph "NewStringUTF" {  
-"10452" [label = <(&lt;operator&gt;.assignment,utf8_length = strlen(utf))<SUB>2059</SUB>> ]
-"10500" [label = <(&lt;operator&gt;.greaterThan,std::optional&lt;std::string&gt; replacement_utf)<SUB>2070</SUB>> ]
-"10510" [label = <(UNKNOWN,t,t)<SUB>2071</SUB>> ]
-"10511" [label = <(UNKNOWN,utf16_length = VisitModifiedUtf8Chars(\012        utf,\012        utf8_length,\012 /*good=*/ [](const char* ptr ATTRIBUTE_UNUSED, size_t length ATTRIBUTE_UNUSED) {},utf16_length = VisitModifiedUtf8Chars(\012        utf,\012        utf8_length,\012 /*good=*/ [](const char* ptr ATTRIBUTE_UNUSED, size_t length ATTRIBUTE_UNUSED) {})<SUB>2071</SUB>> ]
-"10512" [label = <(UNKNOWN,,\012 /*bad=*/ []() { return true; },,\012 /*bad=*/ []() { return true; })<SUB>2074</SUB>> ]
-"10513" [label = <(UNKNOWN,);,);)<SUB>2075</SUB>> ]
-"10600" [label = <(DCHECK_LE,DCHECK_LE(utf16_length, utf8_length))<SUB>2103</SUB>> ]
-"10603" [label = <(DCHECK_LE,DCHECK_LE(utf8_length, static_cast&lt;uint32_t&gt;(std::numeric_limits&lt;int32_t&gt;::max())))<SUB>2104</SUB>> ]
-"10618" [label = <(soa,soa(env))<SUB>2106</SUB>> ]
-"10620" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::String&gt; result =\012        mirror::String::AllocFromModifiedUtf8(soa.Self(), utf16_length, utf, utf8_length))<SUB>2107</SUB>> ]
-"10641" [label = <(RETURN,return soa.AddLocalReference&lt;jstring&gt;(result);,return soa.AddLocalReference&lt;jstring&gt;(result);)<SUB>2109</SUB>> ]
-"10445" [label = <(&lt;operator&gt;.equals,utf == nullptr)<SUB>2051</SUB>> ]
-"10454" [label = <(strlen,strlen(utf))<SUB>2059</SUB>> ]
-"10457" [label = <(UNLIKELY,UNLIKELY(utf8_length &gt; static_cast&lt;uint32_t&gt;(std::numeric_limits&lt;int32_t&gt;::max())))<SUB>2060</SUB>> ]
-"10501" [label = <(&lt;operator&gt;.lessThan,std::optional&lt;std::string)<SUB>2070</SUB>> ]
-"10515" [label = <(UNLIKELY,UNLIKELY(utf8_length != 0u &amp;&amp; utf16_length == 0u))<SUB>2076</SUB>> ]
-"10605" [label = <(&lt;operator&gt;.cast,static_cast&lt;uint32_t&gt;(std::numeric_limits&lt;int32_t&gt;::max()))<SUB>2104</SUB>> ]
-"10621" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::String&gt; result)<SUB>2107</SUB>> ]
-"10628" [label = <(mirror::String::AllocFromModifiedUtf8,mirror::String::AllocFromModifiedUtf8(soa.Self(), utf16_length, utf, utf8_length))<SUB>2108</SUB>> ]
-"10642" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jstring&gt;(result))<SUB>2109</SUB>> ]
-"10449" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2052</SUB>> ]
-"10458" [label = <(&lt;operator&gt;.greaterThan,utf8_length &gt; static_cast&lt;uint32_t&gt;(std::numeric_limits&lt;int32_t&gt;::max()))<SUB>2060</SUB>> ]
-"10474" [label = <(&lt;operator&gt;.assignment,error =\012          android::base::StringPrintf(&quot;NewStringUTF input is 2 GiB or more: %zu&quot;, utf8_length))<SUB>2064</SUB>> ]
-"10485" [label = <(soa,soa(env))<SUB>2066</SUB>> ]
-"10487" [label = <(ThrowOutOfMemoryError,soa.Self()-&gt;ThrowOutOfMemoryError(error.c_str()))<SUB>2067</SUB>> ]
-"10498" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2068</SUB>> ]
-"10502" [label = <(&lt;operator&gt;.fieldAccess,std::optional)<SUB>2070</SUB>> ]
-"10505" [label = <(&lt;operator&gt;.fieldAccess,std::string)<SUB>2070</SUB>> ]
-"10516" [label = <(&lt;operator&gt;.logicalAnd,utf8_length != 0u &amp;&amp; utf16_length == 0u)<SUB>2076</SUB>> ]
-"10525" [label = <(&lt;operator&gt;.assignment,kMinDelay = UINT64_C(10000000000))<SUB>2079</SUB>> ]
-"10530" [label = <(prev_bad_input_time,prev_bad_input_time(UINT64_C(0)))<SUB>2080</SUB>> ]
-"10534" [label = <(&lt;operator&gt;.assignment,prev_time = prev_bad_input_time.load(std::memory_order_relaxed))<SUB>2081</SUB>> ]
-"10544" [label = <(&lt;operator&gt;.assignment,now = NanoTime())<SUB>2082</SUB>> ]
-"10572" [label = <(emplace,replacement_utf.emplace())<SUB>2088</SUB>> ]
-"10576" [label = <(reserve,replacement_utf-&gt;reserve(utf8_length))<SUB>2089</SUB>> ]
-"10581" [label = <(&lt;operator&gt;.assignment,utf16_length = VisitModifiedUtf8Chars(\012          utf,\012          utf8_length,\012 /*good=*/ [&amp;](const char* ptr, size_t length) {\012            replacement_utf-&gt;append(ptr, length);\012 },\012 /*bad=*/ [&amp;]() {\012            replacement_utf-&gt;append(kBadUtf8ReplacementChar, sizeof(kBadUtf8ReplacementChar) - 1u);\012 return false; // Continue processing.\012 }))<SUB>2090</SUB>> ]
-"10588" [label = <(&lt;operator&gt;.assignment,utf = replacement_utf-&gt;c_str())<SUB>2100</SUB>> ]
-"10594" [label = <(&lt;operator&gt;.assignment,utf8_length = replacement_utf-&gt;length())<SUB>2101</SUB>> ]
-"10606" [label = <(UNKNOWN,uint32_t,uint32_t)<SUB>2104</SUB>> ]
-"10607" [label = <(&lt;operator&gt;.greaterThan,std::numeric_limits&lt;int32_t&gt;::max())<SUB>2104</SUB>> ]
-"10622" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::String)<SUB>2107</SUB>> ]
-"10629" [label = <(&lt;operator&gt;.fieldAccess,mirror::String::AllocFromModifiedUtf8)<SUB>2108</SUB>> ]
-"10634" [label = <(Self,soa.Self())<SUB>2108</SUB>> ]
-"10643" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jstring)<SUB>2109</SUB>> ]
-"10460" [label = <(&lt;operator&gt;.cast,static_cast&lt;uint32_t&gt;(std::numeric_limits&lt;int32_t&gt;::max()))<SUB>2060</SUB>> ]
-"10476" [label = <(android::base::StringPrintf,android::base::StringPrintf(&quot;NewStringUTF input is 2 GiB or more: %zu&quot;, utf8_length))<SUB>2065</SUB>> ]
-"10488" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;ThrowOutOfMemoryError)<SUB>2067</SUB>> ]
-"10494" [label = <(c_str,error.c_str())<SUB>2067</SUB>> ]
-"10504" [label = <(FIELD_IDENTIFIER,optional,optional)<SUB>2070</SUB>> ]
-"10507" [label = <(FIELD_IDENTIFIER,string,string)<SUB>2070</SUB>> ]
-"10517" [label = <(&lt;operator&gt;.notEquals,utf8_length != 0u)<SUB>2076</SUB>> ]
-"10520" [label = <(&lt;operator&gt;.equals,utf16_length == 0u)<SUB>2076</SUB>> ]
-"10527" [label = <(UINT64_C,UINT64_C(10000000000))<SUB>2079</SUB>> ]
-"10531" [label = <(UINT64_C,UINT64_C(0))<SUB>2080</SUB>> ]
-"10536" [label = <(load,prev_bad_input_time.load(std::memory_order_relaxed))<SUB>2081</SUB>> ]
-"10546" [label = <(NanoTime,NanoTime())<SUB>2082</SUB>> ]
-"10548" [label = <(&lt;operator&gt;.logicalAnd,(prev_time == 0u || now - prev_time &gt;= kMinDelay) &amp;&amp;\012          prev_bad_input_time.compare_exchange_strong(prev_time, now, std::memory_order_relaxed))<SUB>2083</SUB>> ]
-"10573" [label = <(&lt;operator&gt;.fieldAccess,replacement_utf.emplace)<SUB>2088</SUB>> ]
-"10577" [label = <(&lt;operator&gt;.indirectFieldAccess,replacement_utf-&gt;reserve)<SUB>2089</SUB>> ]
-"10583" [label = <(VisitModifiedUtf8Chars,VisitModifiedUtf8Chars(\012          utf,\012          utf8_length,\012 /*good=*/ [&amp;](const char* ptr, size_t length) {\012            replacement_utf-&gt;append(ptr, length);\012 },\012 /*bad=*/ [&amp;]() {\012            replacement_utf-&gt;append(kBadUtf8ReplacementChar, sizeof(kBadUtf8ReplacementChar) - 1u);\012 return false; // Continue processing.\012 }))<SUB>2090</SUB>> ]
-"10590" [label = <(c_str,replacement_utf-&gt;c_str())<SUB>2100</SUB>> ]
-"10596" [label = <(length,replacement_utf-&gt;length())<SUB>2101</SUB>> ]
-"10608" [label = <(&lt;operator&gt;.lessThan,std::numeric_limits&lt;int32_t)<SUB>2104</SUB>> ]
-"10613" [label = <(::max,::max())<SUB>2104</SUB>> ]
-"10624" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>2107</SUB>> ]
-"10630" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>2108</SUB>> ]
-"10633" [label = <(FIELD_IDENTIFIER,AllocFromModifiedUtf8,AllocFromModifiedUtf8)<SUB>2108</SUB>> ]
-"10635" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>2108</SUB>> ]
-"10644" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>2109</SUB>> ]
-"10461" [label = <(UNKNOWN,uint32_t,uint32_t)<SUB>2060</SUB>> ]
-"10462" [label = <(&lt;operator&gt;.greaterThan,std::numeric_limits&lt;int32_t&gt;::max())<SUB>2060</SUB>> ]
-"10477" [label = <(&lt;operator&gt;.fieldAccess,android::base::StringPrintf)<SUB>2065</SUB>> ]
-"10489" [label = <(Self,soa.Self())<SUB>2067</SUB>> ]
-"10493" [label = <(FIELD_IDENTIFIER,ThrowOutOfMemoryError,ThrowOutOfMemoryError)<SUB>2067</SUB>> ]
-"10495" [label = <(&lt;operator&gt;.fieldAccess,error.c_str)<SUB>2067</SUB>> ]
-"10537" [label = <(&lt;operator&gt;.fieldAccess,prev_bad_input_time.load)<SUB>2081</SUB>> ]
-"10540" [label = <(&lt;operator&gt;.fieldAccess,std::memory_order_relaxed)<SUB>2081</SUB>> ]
-"10549" [label = <(&lt;operator&gt;.logicalOr,prev_time == 0u || now - prev_time &gt;= kMinDelay)<SUB>2083</SUB>> ]
-"10558" [label = <(compare_exchange_strong,prev_bad_input_time.compare_exchange_strong(prev_time, now, std::memory_order_relaxed))<SUB>2084</SUB>> ]
-"10568" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR) &lt;&lt; &quot;Invalid UTF-8 input to JNI::NewStringUTF()&quot;)<SUB>2085</SUB>> ]
-"10575" [label = <(FIELD_IDENTIFIER,emplace,emplace)<SUB>2088</SUB>> ]
-"10579" [label = <(FIELD_IDENTIFIER,reserve,reserve)<SUB>2089</SUB>> ]
-"10586" [label = <(METHOD_REF,ANY anonymous_lambda_22 (const char* ptr,size_t length),VisitModifiedUtf8Chars(\012          utf,\012          utf8_length,\012 /*good=*/ [&amp;](const char* ptr, size_t length) {\012            replacement_utf-&gt;append(ptr, length);\012 },\012 /*bad=*/ [&amp;]() {\012            replacement_utf-&gt;append(kBadUtf8ReplacementChar, sizeof(kBadUtf8ReplacementChar) - 1u);\012 return false; // Continue processing.\012 }))<SUB>2093</SUB>> ]
-"10587" [label = <(METHOD_REF,ANY anonymous_lambda_23 (),VisitModifiedUtf8Chars(\012          utf,\012          utf8_length,\012 /*good=*/ [&amp;](const char* ptr, size_t length) {\012            replacement_utf-&gt;append(ptr, length);\012 },\012 /*bad=*/ [&amp;]() {\012            replacement_utf-&gt;append(kBadUtf8ReplacementChar, sizeof(kBadUtf8ReplacementChar) - 1u);\012 return false; // Continue processing.\012 }))<SUB>2096</SUB>> ]
-"10591" [label = <(&lt;operator&gt;.indirectFieldAccess,replacement_utf-&gt;c_str)<SUB>2100</SUB>> ]
-"10597" [label = <(&lt;operator&gt;.indirectFieldAccess,replacement_utf-&gt;length)<SUB>2101</SUB>> ]
-"10609" [label = <(&lt;operator&gt;.fieldAccess,std::numeric_limits)<SUB>2104</SUB>> ]
-"10614" [label = <(&lt;operator&gt;.fieldAccess,::max)<SUB>2104</SUB>> ]
-"10626" [label = <(FIELD_IDENTIFIER,String,String)<SUB>2107</SUB>> ]
-"10637" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>2108</SUB>> ]
-"10646" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>2109</SUB>> ]
-"10463" [label = <(&lt;operator&gt;.lessThan,std::numeric_limits&lt;int32_t)<SUB>2060</SUB>> ]
-"10468" [label = <(::max,::max())<SUB>2060</SUB>> ]
-"10478" [label = <(&lt;operator&gt;.fieldAccess,android::base)<SUB>2065</SUB>> ]
-"10481" [label = <(FIELD_IDENTIFIER,StringPrintf,StringPrintf)<SUB>2065</SUB>> ]
-"10490" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>2067</SUB>> ]
-"10497" [label = <(FIELD_IDENTIFIER,c_str,c_str)<SUB>2067</SUB>> ]
-"10539" [label = <(FIELD_IDENTIFIER,load,load)<SUB>2081</SUB>> ]
-"10542" [label = <(FIELD_IDENTIFIER,memory_order_relaxed,memory_order_relaxed)<SUB>2081</SUB>> ]
-"10550" [label = <(&lt;operator&gt;.equals,prev_time == 0u)<SUB>2083</SUB>> ]
-"10553" [label = <(&lt;operator&gt;.greaterEqualsThan,now - prev_time &gt;= kMinDelay)<SUB>2083</SUB>> ]
-"10559" [label = <(&lt;operator&gt;.fieldAccess,prev_bad_input_time.compare_exchange_strong)<SUB>2084</SUB>> ]
-"10564" [label = <(&lt;operator&gt;.fieldAccess,std::memory_order_relaxed)<SUB>2084</SUB>> ]
-"10569" [label = <(LOG,LOG(ERROR))<SUB>2085</SUB>> ]
-"10593" [label = <(FIELD_IDENTIFIER,c_str,c_str)<SUB>2100</SUB>> ]
-"10599" [label = <(FIELD_IDENTIFIER,length,length)<SUB>2101</SUB>> ]
-"10611" [label = <(FIELD_IDENTIFIER,numeric_limits,numeric_limits)<SUB>2104</SUB>> ]
-"10616" [label = <(FIELD_IDENTIFIER,max,max)<SUB>2104</SUB>> ]
-"10464" [label = <(&lt;operator&gt;.fieldAccess,std::numeric_limits)<SUB>2060</SUB>> ]
-"10469" [label = <(&lt;operator&gt;.fieldAccess,::max)<SUB>2060</SUB>> ]
-"10492" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>2067</SUB>> ]
-"10554" [label = <(&lt;operator&gt;.subtraction,now - prev_time)<SUB>2083</SUB>> ]
-"10561" [label = <(FIELD_IDENTIFIER,compare_exchange_strong,compare_exchange_strong)<SUB>2084</SUB>> ]
-"10566" [label = <(FIELD_IDENTIFIER,memory_order_relaxed,memory_order_relaxed)<SUB>2084</SUB>> ]
-"10466" [label = <(FIELD_IDENTIFIER,numeric_limits,numeric_limits)<SUB>2060</SUB>> ]
-"10471" [label = <(FIELD_IDENTIFIER,max,max)<SUB>2060</SUB>> ]
-"10440" [label = <(METHOD,NewStringUTF)<SUB>2050</SUB>> ]
-"10649" [label = <(METHOD_RETURN,jstring)<SUB>2050</SUB>> ]
-  "10452" -> "10461" 
-  "10500" -> "10510" 
-  "10510" -> "10511" 
-  "10511" -> "10512" 
-  "10512" -> "10513" 
-  "10513" -> "10517" 
-  "10600" -> "10606" 
-  "10603" -> "10618" 
-  "10618" -> "10626" 
-  "10620" -> "10646" 
-  "10641" -> "10649" 
-  "10445" -> "10449" 
-  "10445" -> "10454" 
-  "10454" -> "10452" 
-  "10457" -> "10478" 
-  "10457" -> "10504" 
-  "10501" -> "10500" 
-  "10515" -> "10527" 
-  "10515" -> "10600" 
-  "10605" -> "10603" 
-  "10621" -> "10630" 
-  "10628" -> "10620" 
-  "10642" -> "10641" 
-  "10449" -> "10649" 
-  "10458" -> "10457" 
-  "10474" -> "10485" 
-  "10485" -> "10492" 
-  "10487" -> "10498" 
-  "10498" -> "10649" 
-  "10502" -> "10507" 
-  "10505" -> "10501" 
-  "10516" -> "10515" 
-  "10525" -> "10531" 
-  "10530" -> "10539" 
-  "10534" -> "10546" 
-  "10544" -> "10550" 
-  "10572" -> "10579" 
-  "10576" -> "10586" 
-  "10581" -> "10593" 
-  "10588" -> "10599" 
-  "10594" -> "10600" 
-  "10606" -> "10611" 
-  "10607" -> "10605" 
-  "10622" -> "10621" 
-  "10629" -> "10637" 
-  "10634" -> "10628" 
-  "10643" -> "10642" 
-  "10460" -> "10458" 
-  "10476" -> "10474" 
-  "10488" -> "10497" 
-  "10494" -> "10487" 
-  "10504" -> "10502" 
-  "10507" -> "10505" 
-  "10517" -> "10516" 
-  "10517" -> "10520" 
-  "10520" -> "10516" 
-  "10527" -> "10525" 
-  "10531" -> "10530" 
-  "10536" -> "10534" 
-  "10546" -> "10544" 
-  "10548" -> "10569" 
-  "10548" -> "10575" 
+digraph "GetStringUTFRegion" {  
+"10524" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string))<SUB>2015</SUB>> ]
+"10542" [label = <(soa,soa(env))<SUB>2016</SUB>> ]
+"10544" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::String&gt; s = soa.Decode&lt;mirror::String&gt;(java_string))<SUB>2017</SUB>> ]
+"10545" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::String&gt; s)<SUB>2017</SUB>> ]
+"10552" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::String&gt;(java_string))<SUB>2017</SUB>> ]
+"10562" [label = <(&lt;operator&gt;.logicalOr,start &lt; 0 || length &lt; 0 || length &gt; s-&gt;GetLength() - start)<SUB>2018</SUB>> ]
+"10546" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::String)<SUB>2017</SUB>> ]
+"10553" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::String)<SUB>2017</SUB>> ]
+"10563" [label = <(&lt;operator&gt;.logicalOr,start &lt; 0 || length &lt; 0)<SUB>2018</SUB>> ]
+"10570" [label = <(&lt;operator&gt;.greaterThan,length &gt; s-&gt;GetLength() - start)<SUB>2018</SUB>> ]
+"10579" [label = <(ThrowSIOOBE,ThrowSIOOBE(soa, start, length, s-&gt;GetLength()))<SUB>2019</SUB>> ]
+"10528" [label = <(UNLIKELY,UNLIKELY((java_string) == nullptr))<SUB>2015</SUB>> ]
+"10548" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>2017</SUB>> ]
+"10554" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2017</SUB>> ]
+"10557" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>2017</SUB>> ]
+"10564" [label = <(&lt;operator&gt;.lessThan,start &lt; 0)<SUB>2018</SUB>> ]
+"10567" [label = <(&lt;operator&gt;.lessThan,length &lt; 0)<SUB>2018</SUB>> ]
+"10572" [label = <(&lt;operator&gt;.subtraction,s-&gt;GetLength() - start)<SUB>2018</SUB>> ]
+"10583" [label = <(GetLength,s-&gt;GetLength())<SUB>2019</SUB>> ]
+"10589" [label = <(CHECK_NON_NULL_MEMCPY_ARGUMENT,CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf))<SUB>2021</SUB>> ]
+"10529" [label = <(&lt;operator&gt;.equals,(java_string) == nullptr)<SUB>2015</SUB>> ]
+"10533" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_string == null&quot;))<SUB>2015</SUB>> ]
+"10540" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string))<SUB>2015</SUB>> ]
+"10550" [label = <(FIELD_IDENTIFIER,String,String)<SUB>2017</SUB>> ]
+"10556" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2017</SUB>> ]
+"10559" [label = <(FIELD_IDENTIFIER,String,String)<SUB>2017</SUB>> ]
+"10573" [label = <(GetLength,s-&gt;GetLength())<SUB>2018</SUB>> ]
+"10584" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetLength)<SUB>2019</SUB>> ]
+"10612" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>2022</SUB>> ]
+"10534" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2015</SUB>> ]
+"10574" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetLength)<SUB>2018</SUB>> ]
+"10586" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>2019</SUB>> ]
+"10613" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>2022</SUB>> ]
+"10535" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2015</SUB>> ]
+"10537" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2015</SUB>> ]
+"10576" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>2018</SUB>> ]
+"10594" [label = <(UNLIKELY,UNLIKELY((length) != 0 &amp;&amp; (buf) == nullptr))<SUB>2021</SUB>> ]
+"10615" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>2022</SUB>> ]
+"10623" [label = <(&lt;operator&gt;.lessThan,i &lt; length)<SUB>2023</SUB>> ]
+"10626" [label = <(&lt;operator&gt;.preIncrement,++i)<SUB>2023</SUB>> ]
+"10643" [label = <(&lt;operator&gt;.assignment,* chars = s-&gt;GetValue())<SUB>2027</SUB>> ]
+"10650" [label = <(&lt;operator&gt;.assignment,bytes = CountUtf8Bytes(chars + start, length))<SUB>2028</SUB>> ]
+"10657" [label = <(ConvertUtf16ToModifiedUtf8,ConvertUtf16ToModifiedUtf8(buf, bytes, chars + start, length))<SUB>2029</SUB>> ]
+"10595" [label = <(&lt;operator&gt;.logicalAnd,(length) != 0 &amp;&amp; (buf) == nullptr)<SUB>2021</SUB>> ]
+"10603" [label = <(CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;buf == null&quot;))<SUB>2021</SUB>> ]
+"10610" [label = <(RETURN,CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf),CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf))<SUB>2021</SUB>> ]
+"10620" [label = <(&lt;operator&gt;.assignment,i = 0)<SUB>2023</SUB>> ]
+"10629" [label = <(&lt;operator&gt;.assignment,buf[i] = s-&gt;CharAt(start+i))<SUB>2024</SUB>> ]
+"10645" [label = <(GetValue,s-&gt;GetValue())<SUB>2027</SUB>> ]
+"10652" [label = <(CountUtf8Bytes,CountUtf8Bytes(chars + start, length))<SUB>2028</SUB>> ]
+"10660" [label = <(&lt;operator&gt;.addition,chars + start)<SUB>2029</SUB>> ]
+"10596" [label = <(&lt;operator&gt;.notEquals,(length) != 0)<SUB>2021</SUB>> ]
+"10599" [label = <(&lt;operator&gt;.equals,(buf) == nullptr)<SUB>2021</SUB>> ]
+"10604" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2021</SUB>> ]
+"10630" [label = <(&lt;operator&gt;.indirectIndexAccess,buf[i])<SUB>2024</SUB>> ]
+"10633" [label = <(CharAt,s-&gt;CharAt(start+i))<SUB>2024</SUB>> ]
+"10646" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetValue)<SUB>2027</SUB>> ]
+"10653" [label = <(&lt;operator&gt;.addition,chars + start)<SUB>2028</SUB>> ]
+"10605" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2021</SUB>> ]
+"10607" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2021</SUB>> ]
+"10634" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;CharAt)<SUB>2024</SUB>> ]
+"10637" [label = <(&lt;operator&gt;.addition,start+i)<SUB>2024</SUB>> ]
+"10648" [label = <(FIELD_IDENTIFIER,GetValue,GetValue)<SUB>2027</SUB>> ]
+"10636" [label = <(FIELD_IDENTIFIER,CharAt,CharAt)<SUB>2024</SUB>> ]
+"10517" [label = <(METHOD,GetStringUTFRegion)<SUB>2013</SUB>> ]
+"10664" [label = <(METHOD_RETURN,void)<SUB>2013</SUB>> ]
+  "10524" -> "10529" 
+  "10524" -> "10542" 
+  "10542" -> "10550" 
+  "10544" -> "10564" 
+  "10545" -> "10556" 
+  "10552" -> "10544" 
+  "10562" -> "10586" 
+  "10562" -> "10589" 
+  "10546" -> "10545" 
+  "10553" -> "10552" 
+  "10563" -> "10562" 
+  "10563" -> "10576" 
+  "10570" -> "10562" 
+  "10579" -> "10664" 
+  "10528" -> "10535" 
+  "10528" -> "10542" 
+  "10548" -> "10546" 
+  "10554" -> "10559" 
+  "10557" -> "10553" 
+  "10564" -> "10563" 
+  "10564" -> "10567" 
+  "10567" -> "10563" 
+  "10572" -> "10570" 
+  "10583" -> "10579" 
+  "10589" -> "10596" 
+  "10589" -> "10615" 
+  "10529" -> "10528" 
+  "10533" -> "10540" 
+  "10540" -> "10664" 
+  "10550" -> "10548" 
+  "10556" -> "10554" 
+  "10559" -> "10557" 
   "10573" -> "10572" 
-  "10577" -> "10576" 
-  "10583" -> "10581" 
-  "10590" -> "10588" 
-  "10596" -> "10594" 
-  "10608" -> "10616" 
-  "10613" -> "10607" 
-  "10624" -> "10622" 
-  "10630" -> "10633" 
+  "10584" -> "10583" 
+  "10612" -> "10620" 
+  "10612" -> "10648" 
+  "10534" -> "10533" 
+  "10574" -> "10573" 
+  "10586" -> "10584" 
+  "10613" -> "10612" 
+  "10535" -> "10537" 
+  "10537" -> "10534" 
+  "10576" -> "10574" 
+  "10594" -> "10605" 
+  "10594" -> "10615" 
+  "10615" -> "10613" 
+  "10623" -> "10664" 
+  "10623" -> "10630" 
+  "10626" -> "10623" 
+  "10643" -> "10653" 
+  "10650" -> "10660" 
+  "10657" -> "10664" 
+  "10595" -> "10594" 
+  "10603" -> "10610" 
+  "10610" -> "10664" 
+  "10620" -> "10623" 
+  "10629" -> "10626" 
+  "10645" -> "10643" 
+  "10652" -> "10650" 
+  "10660" -> "10657" 
+  "10596" -> "10595" 
+  "10596" -> "10599" 
+  "10599" -> "10595" 
+  "10604" -> "10603" 
+  "10630" -> "10636" 
   "10633" -> "10629" 
-  "10635" -> "10634" 
-  "10644" -> "10643" 
-  "10461" -> "10466" 
-  "10462" -> "10460" 
-  "10477" -> "10476" 
-  "10489" -> "10493" 
-  "10493" -> "10488" 
-  "10495" -> "10494" 
-  "10537" -> "10542" 
-  "10540" -> "10536" 
-  "10549" -> "10548" 
-  "10549" -> "10561" 
-  "10558" -> "10548" 
-  "10568" -> "10575" 
-  "10575" -> "10573" 
-  "10579" -> "10577" 
-  "10586" -> "10587" 
-  "10587" -> "10583" 
-  "10591" -> "10590" 
-  "10597" -> "10596" 
-  "10609" -> "10608" 
-  "10614" -> "10613" 
-  "10626" -> "10624" 
-  "10637" -> "10635" 
-  "10646" -> "10644" 
-  "10463" -> "10471" 
-  "10468" -> "10462" 
-  "10478" -> "10481" 
-  "10481" -> "10477" 
-  "10490" -> "10489" 
-  "10497" -> "10495" 
-  "10539" -> "10537" 
-  "10542" -> "10540" 
-  "10550" -> "10549" 
-  "10550" -> "10554" 
-  "10553" -> "10549" 
-  "10559" -> "10566" 
-  "10564" -> "10558" 
-  "10569" -> "10568" 
-  "10593" -> "10591" 
-  "10599" -> "10597" 
-  "10611" -> "10609" 
-  "10616" -> "10614" 
-  "10464" -> "10463" 
-  "10469" -> "10468" 
-  "10492" -> "10490" 
-  "10554" -> "10553" 
-  "10561" -> "10559" 
-  "10566" -> "10564" 
-  "10466" -> "10464" 
-  "10471" -> "10469" 
-  "10440" -> "10445" 
+  "10646" -> "10645" 
+  "10653" -> "10652" 
+  "10605" -> "10607" 
+  "10607" -> "10604" 
+  "10634" -> "10637" 
+  "10637" -> "10633" 
+  "10648" -> "10646" 
+  "10636" -> "10634" 
+  "10517" -> "10524" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/202-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/202-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/202-cfg.dot	2023-06-07 19:35:28.347384338 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/202-cfg.dot	2023-06-07 19:35:34.867383768 +0330
@@ -1,45 +1,159 @@
-digraph "GetStringLength" {  
-"10655" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string))<SUB>2113</SUB>> ]
-"10674" [label = <(soa,soa(env))<SUB>2114</SUB>> ]
-"10676" [label = <(RETURN,return soa.Decode&lt;mirror::String&gt;(java_string)-&gt;GetLength();,return soa.Decode&lt;mirror::String&gt;(java_string)-&gt;GetLength();)<SUB>2115</SUB>> ]
-"10677" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::String&gt;(java_string)-&gt;GetLength())<SUB>2115</SUB>> ]
-"10678" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::String)<SUB>2115</SUB>> ]
-"10685" [label = <(GetLength,(java_string)-&gt;GetLength())<SUB>2115</SUB>> ]
-"10659" [label = <(UNLIKELY,UNLIKELY((java_string) == nullptr))<SUB>2113</SUB>> ]
-"10679" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2115</SUB>> ]
-"10682" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>2115</SUB>> ]
-"10686" [label = <(&lt;operator&gt;.indirectFieldAccess,(java_string)-&gt;GetLength)<SUB>2115</SUB>> ]
-"10660" [label = <(&lt;operator&gt;.equals,(java_string) == nullptr)<SUB>2113</SUB>> ]
-"10664" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_string == null&quot;))<SUB>2113</SUB>> ]
-"10671" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string))<SUB>2113</SUB>> ]
-"10681" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2115</SUB>> ]
-"10684" [label = <(FIELD_IDENTIFIER,String,String)<SUB>2115</SUB>> ]
-"10688" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>2115</SUB>> ]
-"10665" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2113</SUB>> ]
-"10666" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2113</SUB>> ]
-"10668" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2113</SUB>> ]
-"10651" [label = <(METHOD,GetStringLength)<SUB>2112</SUB>> ]
-"10689" [label = <(METHOD_RETURN,jsize)<SUB>2112</SUB>> ]
-  "10655" -> "10660" 
-  "10655" -> "10674" 
-  "10674" -> "10681" 
-  "10676" -> "10689" 
-  "10677" -> "10676" 
-  "10678" -> "10688" 
-  "10685" -> "10677" 
-  "10659" -> "10666" 
-  "10659" -> "10674" 
-  "10679" -> "10684" 
-  "10682" -> "10678" 
-  "10686" -> "10685" 
-  "10660" -> "10659" 
-  "10664" -> "10671" 
-  "10671" -> "10689" 
-  "10681" -> "10679" 
-  "10684" -> "10682" 
-  "10688" -> "10686" 
-  "10665" -> "10664" 
-  "10666" -> "10668" 
-  "10668" -> "10665" 
-  "10651" -> "10655" 
+digraph "GetStringChars" {  
+"10671" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_string))<SUB>2035</SUB>> ]
+"10690" [label = <(soa,soa(env))<SUB>2036</SUB>> ]
+"10692" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::String&gt; s = soa.Decode&lt;mirror::String&gt;(java_string))<SUB>2037</SUB>> ]
+"10710" [label = <(&lt;operator&gt;.assignment,* heap = Runtime::Current()-&gt;GetHeap())<SUB>2038</SUB>> ]
+"10805" [label = <(RETURN,return static_cast&lt;jchar*&gt;(s-&gt;GetValue());,return static_cast&lt;jchar*&gt;(s-&gt;GetValue());)<SUB>2057</SUB>> ]
+"10693" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::String&gt; s)<SUB>2037</SUB>> ]
+"10700" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::String&gt;(java_string))<SUB>2037</SUB>> ]
+"10712" [label = <(GetHeap,Runtime::Current()-&gt;GetHeap())<SUB>2038</SUB>> ]
+"10720" [label = <(&lt;operator&gt;.logicalOr,heap-&gt;IsMovableObject(s) || s-&gt;IsCompressed())<SUB>2039</SUB>> ]
+"10797" [label = <(&lt;operator&gt;.notEquals,is_copy != nullptr)<SUB>2054</SUB>> ]
+"10806" [label = <(&lt;operator&gt;.cast,static_cast&lt;jchar*&gt;(s-&gt;GetValue()))<SUB>2057</SUB>> ]
+"10694" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::String)<SUB>2037</SUB>> ]
+"10701" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::String)<SUB>2037</SUB>> ]
+"10713" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetHeap)<SUB>2038</SUB>> ]
+"10721" [label = <(IsMovableObject,heap-&gt;IsMovableObject(s))<SUB>2039</SUB>> ]
+"10726" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>2039</SUB>> ]
+"10732" [label = <(&lt;operator&gt;.assignment,* chars = new jchar[s-&gt;GetLength()])<SUB>2040</SUB>> ]
+"10794" [label = <(RETURN,return chars;,return chars;)<SUB>2052</SUB>> ]
+"10801" [label = <(&lt;operator&gt;.assignment,*is_copy = JNI_FALSE)<SUB>2055</SUB>> ]
+"10807" [label = <(UNKNOWN,jchar*,jchar*)<SUB>2057</SUB>> ]
+"10808" [label = <(GetValue,s-&gt;GetValue())<SUB>2057</SUB>> ]
+"10675" [label = <(UNLIKELY,UNLIKELY((java_string) == nullptr))<SUB>2035</SUB>> ]
+"10696" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>2037</SUB>> ]
+"10702" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2037</SUB>> ]
+"10705" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>2037</SUB>> ]
+"10714" [label = <(Runtime::Current,Runtime::Current())<SUB>2038</SUB>> ]
+"10718" [label = <(FIELD_IDENTIFIER,GetHeap,GetHeap)<SUB>2038</SUB>> ]
+"10722" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;IsMovableObject)<SUB>2039</SUB>> ]
+"10727" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>2039</SUB>> ]
+"10734" [label = <(&lt;operator&gt;.new,new jchar[s-&gt;GetLength()])<SUB>2040</SUB>> ]
+"10737" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>2041</SUB>> ]
+"10786" [label = <(&lt;operator&gt;.notEquals,is_copy != nullptr)<SUB>2049</SUB>> ]
+"10802" [label = <(&lt;operator&gt;.indirection,*is_copy)<SUB>2055</SUB>> ]
+"10809" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetValue)<SUB>2057</SUB>> ]
+"10676" [label = <(&lt;operator&gt;.equals,(java_string) == nullptr)<SUB>2035</SUB>> ]
+"10680" [label = <(CHECK_NON_NULL_ARGUMENT(java_string),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_string == null&quot;))<SUB>2035</SUB>> ]
+"10687" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_string),CHECK_NON_NULL_ARGUMENT(java_string))<SUB>2035</SUB>> ]
+"10698" [label = <(FIELD_IDENTIFIER,String,String)<SUB>2037</SUB>> ]
+"10704" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2037</SUB>> ]
+"10707" [label = <(FIELD_IDENTIFIER,String,String)<SUB>2037</SUB>> ]
+"10715" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>2038</SUB>> ]
+"10724" [label = <(FIELD_IDENTIFIER,IsMovableObject,IsMovableObject)<SUB>2039</SUB>> ]
+"10729" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>2039</SUB>> ]
+"10738" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>2041</SUB>> ]
+"10743" [label = <(&lt;operator&gt;.assignment,length = s-&gt;GetLength())<SUB>2042</SUB>> ]
+"10790" [label = <(&lt;operator&gt;.assignment,*is_copy = JNI_TRUE)<SUB>2050</SUB>> ]
+"10811" [label = <(FIELD_IDENTIFIER,GetValue,GetValue)<SUB>2057</SUB>> ]
+"10681" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2035</SUB>> ]
+"10717" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>2038</SUB>> ]
+"10740" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>2041</SUB>> ]
+"10745" [label = <(GetLength,s-&gt;GetLength())<SUB>2042</SUB>> ]
+"10755" [label = <(&lt;operator&gt;.lessThan,i &lt; length)<SUB>2043</SUB>> ]
+"10758" [label = <(&lt;operator&gt;.preIncrement,++i)<SUB>2043</SUB>> ]
+"10772" [label = <(memcpy,memcpy(chars, s-&gt;GetValue(), sizeof(jchar) * s-&gt;GetLength()))<SUB>2047</SUB>> ]
+"10791" [label = <(&lt;operator&gt;.indirection,*is_copy)<SUB>2050</SUB>> ]
+"10682" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2035</SUB>> ]
+"10684" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2035</SUB>> ]
+"10746" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetLength)<SUB>2042</SUB>> ]
+"10752" [label = <(&lt;operator&gt;.assignment,i = 0)<SUB>2043</SUB>> ]
+"10761" [label = <(&lt;operator&gt;.assignment,chars[i] = s-&gt;CharAt(i))<SUB>2044</SUB>> ]
+"10774" [label = <(GetValue,s-&gt;GetValue())<SUB>2047</SUB>> ]
+"10778" [label = <(&lt;operator&gt;.multiplication,sizeof(jchar) * s-&gt;GetLength())<SUB>2047</SUB>> ]
+"10748" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>2042</SUB>> ]
+"10762" [label = <(&lt;operator&gt;.indirectIndexAccess,chars[i])<SUB>2044</SUB>> ]
+"10765" [label = <(CharAt,s-&gt;CharAt(i))<SUB>2044</SUB>> ]
+"10775" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetValue)<SUB>2047</SUB>> ]
+"10779" [label = <(&lt;operator&gt;.sizeOf,sizeof(jchar))<SUB>2047</SUB>> ]
+"10781" [label = <(GetLength,s-&gt;GetLength())<SUB>2047</SUB>> ]
+"10766" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;CharAt)<SUB>2044</SUB>> ]
+"10777" [label = <(FIELD_IDENTIFIER,GetValue,GetValue)<SUB>2047</SUB>> ]
+"10782" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetLength)<SUB>2047</SUB>> ]
+"10768" [label = <(FIELD_IDENTIFIER,CharAt,CharAt)<SUB>2044</SUB>> ]
+"10784" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>2047</SUB>> ]
+"10666" [label = <(METHOD,GetStringChars)<SUB>2034</SUB>> ]
+"10812" [label = <(METHOD_RETURN,jchar)<SUB>2034</SUB>> ]
+  "10671" -> "10676" 
+  "10671" -> "10690" 
+  "10690" -> "10698" 
+  "10692" -> "10717" 
+  "10710" -> "10724" 
+  "10805" -> "10812" 
+  "10693" -> "10704" 
+  "10700" -> "10692" 
+  "10712" -> "10710" 
+  "10720" -> "10734" 
+  "10720" -> "10797" 
+  "10797" -> "10807" 
+  "10797" -> "10802" 
+  "10806" -> "10805" 
+  "10694" -> "10693" 
+  "10701" -> "10700" 
+  "10713" -> "10712" 
+  "10721" -> "10720" 
+  "10721" -> "10729" 
+  "10726" -> "10720" 
+  "10732" -> "10740" 
+  "10794" -> "10812" 
+  "10801" -> "10807" 
+  "10807" -> "10811" 
+  "10808" -> "10806" 
+  "10675" -> "10682" 
+  "10675" -> "10690" 
+  "10696" -> "10694" 
+  "10702" -> "10707" 
+  "10705" -> "10701" 
+  "10714" -> "10718" 
+  "10718" -> "10713" 
+  "10722" -> "10721" 
+  "10727" -> "10726" 
+  "10734" -> "10732" 
+  "10737" -> "10748" 
+  "10737" -> "10777" 
+  "10786" -> "10791" 
+  "10786" -> "10794" 
+  "10802" -> "10801" 
+  "10809" -> "10808" 
+  "10676" -> "10675" 
+  "10680" -> "10687" 
+  "10687" -> "10812" 
+  "10698" -> "10696" 
+  "10704" -> "10702" 
+  "10707" -> "10705" 
+  "10715" -> "10714" 
+  "10724" -> "10722" 
+  "10729" -> "10727" 
+  "10738" -> "10737" 
+  "10743" -> "10752" 
+  "10790" -> "10794" 
+  "10811" -> "10809" 
+  "10681" -> "10680" 
+  "10717" -> "10715" 
+  "10740" -> "10738" 
+  "10745" -> "10743" 
+  "10755" -> "10762" 
+  "10755" -> "10786" 
+  "10758" -> "10755" 
+  "10772" -> "10786" 
+  "10791" -> "10790" 
+  "10682" -> "10684" 
+  "10684" -> "10681" 
+  "10746" -> "10745" 
+  "10752" -> "10755" 
+  "10761" -> "10758" 
+  "10774" -> "10779" 
+  "10778" -> "10772" 
+  "10748" -> "10746" 
+  "10762" -> "10768" 
+  "10765" -> "10761" 
+  "10775" -> "10774" 
+  "10779" -> "10784" 
+  "10781" -> "10778" 
+  "10766" -> "10765" 
+  "10777" -> "10775" 
+  "10782" -> "10781" 
+  "10768" -> "10766" 
+  "10784" -> "10782" 
+  "10666" -> "10671" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/203-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/203-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/203-cfg.dot	2023-06-07 19:35:28.347384338 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/203-cfg.dot	2023-06-07 19:35:34.877383767 +0330
@@ -1,45 +1,78 @@
-digraph "GetStringUTFLength" {  
-"10695" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string))<SUB>2119</SUB>> ]
-"10714" [label = <(soa,soa(env))<SUB>2120</SUB>> ]
-"10716" [label = <(RETURN,return soa.Decode&lt;mirror::String&gt;(java_string)-&gt;GetUtfLength();,return soa.Decode&lt;mirror::String&gt;(java_string)-&gt;GetUtfLength();)<SUB>2121</SUB>> ]
-"10717" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::String&gt;(java_string)-&gt;GetUtfLength())<SUB>2121</SUB>> ]
-"10718" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::String)<SUB>2121</SUB>> ]
-"10725" [label = <(GetUtfLength,(java_string)-&gt;GetUtfLength())<SUB>2121</SUB>> ]
-"10699" [label = <(UNLIKELY,UNLIKELY((java_string) == nullptr))<SUB>2119</SUB>> ]
-"10719" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2121</SUB>> ]
-"10722" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>2121</SUB>> ]
-"10726" [label = <(&lt;operator&gt;.indirectFieldAccess,(java_string)-&gt;GetUtfLength)<SUB>2121</SUB>> ]
-"10700" [label = <(&lt;operator&gt;.equals,(java_string) == nullptr)<SUB>2119</SUB>> ]
-"10704" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_string == null&quot;))<SUB>2119</SUB>> ]
-"10711" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string))<SUB>2119</SUB>> ]
-"10721" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2121</SUB>> ]
-"10724" [label = <(FIELD_IDENTIFIER,String,String)<SUB>2121</SUB>> ]
-"10728" [label = <(FIELD_IDENTIFIER,GetUtfLength,GetUtfLength)<SUB>2121</SUB>> ]
-"10705" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2119</SUB>> ]
-"10706" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2119</SUB>> ]
-"10708" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2119</SUB>> ]
-"10691" [label = <(METHOD,GetStringUTFLength)<SUB>2118</SUB>> ]
-"10729" [label = <(METHOD_RETURN,jsize)<SUB>2118</SUB>> ]
-  "10695" -> "10700" 
-  "10695" -> "10714" 
-  "10714" -> "10721" 
-  "10716" -> "10729" 
-  "10717" -> "10716" 
-  "10718" -> "10728" 
-  "10725" -> "10717" 
-  "10699" -> "10706" 
-  "10699" -> "10714" 
-  "10719" -> "10724" 
-  "10722" -> "10718" 
-  "10726" -> "10725" 
-  "10700" -> "10699" 
-  "10704" -> "10711" 
-  "10711" -> "10729" 
-  "10721" -> "10719" 
-  "10724" -> "10722" 
-  "10728" -> "10726" 
-  "10705" -> "10704" 
-  "10706" -> "10708" 
-  "10708" -> "10705" 
-  "10691" -> "10695" 
+digraph "ReleaseStringChars" {  
+"10819" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string))<SUB>2061</SUB>> ]
+"10837" [label = <(soa,soa(env))<SUB>2062</SUB>> ]
+"10839" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::String&gt; s = soa.Decode&lt;mirror::String&gt;(java_string))<SUB>2063</SUB>> ]
+"10840" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::String&gt; s)<SUB>2063</SUB>> ]
+"10847" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::String&gt;(java_string))<SUB>2063</SUB>> ]
+"10857" [label = <(&lt;operator&gt;.logicalOr,s-&gt;IsCompressed() || (s-&gt;IsCompressed() == false &amp;&amp; chars != s-&gt;GetValue()))<SUB>2064</SUB>> ]
+"10841" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::String)<SUB>2063</SUB>> ]
+"10848" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::String)<SUB>2063</SUB>> ]
+"10858" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>2064</SUB>> ]
+"10862" [label = <(&lt;operator&gt;.logicalAnd,s-&gt;IsCompressed() == false &amp;&amp; chars != s-&gt;GetValue())<SUB>2064</SUB>> ]
+"10876" [label = <(&lt;operator&gt;.delete,delete[] chars)<SUB>2065</SUB>> ]
+"10823" [label = <(UNLIKELY,UNLIKELY((java_string) == nullptr))<SUB>2061</SUB>> ]
+"10843" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>2063</SUB>> ]
+"10849" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2063</SUB>> ]
+"10852" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>2063</SUB>> ]
+"10859" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>2064</SUB>> ]
+"10863" [label = <(&lt;operator&gt;.equals,s-&gt;IsCompressed() == false)<SUB>2064</SUB>> ]
+"10869" [label = <(&lt;operator&gt;.notEquals,chars != s-&gt;GetValue())<SUB>2064</SUB>> ]
+"10824" [label = <(&lt;operator&gt;.equals,(java_string) == nullptr)<SUB>2061</SUB>> ]
+"10828" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_string == null&quot;))<SUB>2061</SUB>> ]
+"10835" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string))<SUB>2061</SUB>> ]
+"10845" [label = <(FIELD_IDENTIFIER,String,String)<SUB>2063</SUB>> ]
+"10851" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2063</SUB>> ]
+"10854" [label = <(FIELD_IDENTIFIER,String,String)<SUB>2063</SUB>> ]
+"10861" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>2064</SUB>> ]
+"10864" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>2064</SUB>> ]
+"10871" [label = <(GetValue,s-&gt;GetValue())<SUB>2064</SUB>> ]
+"10829" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2061</SUB>> ]
+"10865" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>2064</SUB>> ]
+"10872" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetValue)<SUB>2064</SUB>> ]
+"10830" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2061</SUB>> ]
+"10832" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2061</SUB>> ]
+"10867" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>2064</SUB>> ]
+"10874" [label = <(FIELD_IDENTIFIER,GetValue,GetValue)<SUB>2064</SUB>> ]
+"10814" [label = <(METHOD,ReleaseStringChars)<SUB>2060</SUB>> ]
+"10878" [label = <(METHOD_RETURN,void)<SUB>2060</SUB>> ]
+  "10819" -> "10824" 
+  "10819" -> "10837" 
+  "10837" -> "10845" 
+  "10839" -> "10861" 
+  "10840" -> "10851" 
+  "10847" -> "10839" 
+  "10857" -> "10878" 
+  "10857" -> "10876" 
+  "10841" -> "10840" 
+  "10848" -> "10847" 
+  "10858" -> "10857" 
+  "10858" -> "10867" 
+  "10862" -> "10857" 
+  "10876" -> "10878" 
+  "10823" -> "10830" 
+  "10823" -> "10837" 
+  "10843" -> "10841" 
+  "10849" -> "10854" 
+  "10852" -> "10848" 
+  "10859" -> "10858" 
+  "10863" -> "10862" 
+  "10863" -> "10874" 
+  "10869" -> "10862" 
+  "10824" -> "10823" 
+  "10828" -> "10835" 
+  "10835" -> "10878" 
+  "10845" -> "10843" 
+  "10851" -> "10849" 
+  "10854" -> "10852" 
+  "10861" -> "10859" 
+  "10864" -> "10863" 
+  "10871" -> "10869" 
+  "10829" -> "10828" 
+  "10865" -> "10864" 
+  "10872" -> "10871" 
+  "10830" -> "10832" 
+  "10832" -> "10829" 
+  "10867" -> "10865" 
+  "10874" -> "10872" 
+  "10814" -> "10819" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/204-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/204-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/204-cfg.dot	2023-06-07 19:35:28.347384338 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/204-cfg.dot	2023-06-07 19:35:34.877383767 +0330
@@ -1,149 +1,189 @@
-digraph "GetStringRegion" {  
-"10738" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string))<SUB>2126</SUB>> ]
-"10756" [label = <(soa,soa(env))<SUB>2127</SUB>> ]
-"10758" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::String&gt; s = soa.Decode&lt;mirror::String&gt;(java_string))<SUB>2128</SUB>> ]
-"10759" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::String&gt; s)<SUB>2128</SUB>> ]
-"10766" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::String&gt;(java_string))<SUB>2128</SUB>> ]
-"10776" [label = <(&lt;operator&gt;.logicalOr,start &lt; 0 || length &lt; 0 || length &gt; s-&gt;GetLength() - start)<SUB>2129</SUB>> ]
-"10760" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::String)<SUB>2128</SUB>> ]
-"10767" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::String)<SUB>2128</SUB>> ]
-"10777" [label = <(&lt;operator&gt;.logicalOr,start &lt; 0 || length &lt; 0)<SUB>2129</SUB>> ]
-"10784" [label = <(&lt;operator&gt;.greaterThan,length &gt; s-&gt;GetLength() - start)<SUB>2129</SUB>> ]
-"10793" [label = <(ThrowSIOOBE,ThrowSIOOBE(soa, start, length, s-&gt;GetLength()))<SUB>2130</SUB>> ]
-"10742" [label = <(UNLIKELY,UNLIKELY((java_string) == nullptr))<SUB>2126</SUB>> ]
-"10762" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>2128</SUB>> ]
-"10768" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2128</SUB>> ]
-"10771" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>2128</SUB>> ]
-"10778" [label = <(&lt;operator&gt;.lessThan,start &lt; 0)<SUB>2129</SUB>> ]
-"10781" [label = <(&lt;operator&gt;.lessThan,length &lt; 0)<SUB>2129</SUB>> ]
-"10786" [label = <(&lt;operator&gt;.subtraction,s-&gt;GetLength() - start)<SUB>2129</SUB>> ]
-"10797" [label = <(GetLength,s-&gt;GetLength())<SUB>2130</SUB>> ]
-"10803" [label = <(CHECK_NON_NULL_MEMCPY_ARGUMENT,CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf))<SUB>2132</SUB>> ]
-"10743" [label = <(&lt;operator&gt;.equals,(java_string) == nullptr)<SUB>2126</SUB>> ]
-"10747" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_string == null&quot;))<SUB>2126</SUB>> ]
-"10754" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string))<SUB>2126</SUB>> ]
-"10764" [label = <(FIELD_IDENTIFIER,String,String)<SUB>2128</SUB>> ]
-"10770" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2128</SUB>> ]
-"10773" [label = <(FIELD_IDENTIFIER,String,String)<SUB>2128</SUB>> ]
-"10787" [label = <(GetLength,s-&gt;GetLength())<SUB>2129</SUB>> ]
-"10798" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetLength)<SUB>2130</SUB>> ]
-"10826" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>2133</SUB>> ]
-"10748" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2126</SUB>> ]
-"10788" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetLength)<SUB>2129</SUB>> ]
-"10800" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>2130</SUB>> ]
-"10827" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>2133</SUB>> ]
-"10749" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2126</SUB>> ]
-"10751" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2126</SUB>> ]
-"10790" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>2129</SUB>> ]
-"10808" [label = <(UNLIKELY,UNLIKELY((length) != 0 &amp;&amp; (buf) == nullptr))<SUB>2132</SUB>> ]
-"10829" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>2133</SUB>> ]
-"10837" [label = <(&lt;operator&gt;.lessThan,i &lt; length)<SUB>2134</SUB>> ]
-"10840" [label = <(&lt;operator&gt;.preIncrement,++i)<SUB>2134</SUB>> ]
-"10859" [label = <(&lt;operator&gt;.assignment,* chars = static_cast&lt;jchar*&gt;(s-&gt;GetValue()))<SUB>2138</SUB>> ]
-"10867" [label = <(memcpy,memcpy(buf, chars + start, length * sizeof(jchar)))<SUB>2139</SUB>> ]
-"10809" [label = <(&lt;operator&gt;.logicalAnd,(length) != 0 &amp;&amp; (buf) == nullptr)<SUB>2132</SUB>> ]
-"10817" [label = <(CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;buf == null&quot;))<SUB>2132</SUB>> ]
-"10824" [label = <(RETURN,CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf),CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf))<SUB>2132</SUB>> ]
-"10834" [label = <(&lt;operator&gt;.assignment,i = 0)<SUB>2134</SUB>> ]
-"10843" [label = <(&lt;operator&gt;.assignment,buf[i] = static_cast&lt;jchar&gt;(s-&gt;CharAt(start+i)))<SUB>2135</SUB>> ]
-"10861" [label = <(&lt;operator&gt;.cast,static_cast&lt;jchar*&gt;(s-&gt;GetValue()))<SUB>2138</SUB>> ]
-"10869" [label = <(&lt;operator&gt;.addition,chars + start)<SUB>2139</SUB>> ]
-"10872" [label = <(&lt;operator&gt;.multiplication,length * sizeof(jchar))<SUB>2139</SUB>> ]
-"10810" [label = <(&lt;operator&gt;.notEquals,(length) != 0)<SUB>2132</SUB>> ]
-"10813" [label = <(&lt;operator&gt;.equals,(buf) == nullptr)<SUB>2132</SUB>> ]
-"10818" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2132</SUB>> ]
-"10844" [label = <(&lt;operator&gt;.indirectIndexAccess,buf[i])<SUB>2135</SUB>> ]
-"10847" [label = <(&lt;operator&gt;.cast,static_cast&lt;jchar&gt;(s-&gt;CharAt(start+i)))<SUB>2135</SUB>> ]
-"10862" [label = <(UNKNOWN,jchar*,jchar*)<SUB>2138</SUB>> ]
-"10863" [label = <(GetValue,s-&gt;GetValue())<SUB>2138</SUB>> ]
-"10874" [label = <(&lt;operator&gt;.sizeOf,sizeof(jchar))<SUB>2139</SUB>> ]
-"10819" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2132</SUB>> ]
-"10821" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2132</SUB>> ]
-"10848" [label = <(UNKNOWN,jchar,jchar)<SUB>2135</SUB>> ]
-"10849" [label = <(CharAt,s-&gt;CharAt(start+i))<SUB>2135</SUB>> ]
-"10864" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetValue)<SUB>2138</SUB>> ]
-"10850" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;CharAt)<SUB>2135</SUB>> ]
-"10853" [label = <(&lt;operator&gt;.addition,start+i)<SUB>2135</SUB>> ]
-"10866" [label = <(FIELD_IDENTIFIER,GetValue,GetValue)<SUB>2138</SUB>> ]
-"10852" [label = <(FIELD_IDENTIFIER,CharAt,CharAt)<SUB>2135</SUB>> ]
-"10731" [label = <(METHOD,GetStringRegion)<SUB>2124</SUB>> ]
-"10876" [label = <(METHOD_RETURN,void)<SUB>2124</SUB>> ]
-  "10738" -> "10743" 
-  "10738" -> "10756" 
-  "10756" -> "10764" 
-  "10758" -> "10778" 
-  "10759" -> "10770" 
-  "10766" -> "10758" 
-  "10776" -> "10800" 
-  "10776" -> "10803" 
-  "10760" -> "10759" 
-  "10767" -> "10766" 
-  "10777" -> "10776" 
-  "10777" -> "10790" 
-  "10784" -> "10776" 
-  "10793" -> "10876" 
-  "10742" -> "10749" 
-  "10742" -> "10756" 
-  "10762" -> "10760" 
-  "10768" -> "10773" 
-  "10771" -> "10767" 
-  "10778" -> "10777" 
-  "10778" -> "10781" 
-  "10781" -> "10777" 
-  "10786" -> "10784" 
-  "10797" -> "10793" 
-  "10803" -> "10810" 
-  "10803" -> "10829" 
-  "10743" -> "10742" 
-  "10747" -> "10754" 
-  "10754" -> "10876" 
-  "10764" -> "10762" 
-  "10770" -> "10768" 
-  "10773" -> "10771" 
-  "10787" -> "10786" 
-  "10798" -> "10797" 
-  "10826" -> "10834" 
-  "10826" -> "10862" 
-  "10748" -> "10747" 
-  "10788" -> "10787" 
-  "10800" -> "10798" 
-  "10827" -> "10826" 
-  "10749" -> "10751" 
-  "10751" -> "10748" 
-  "10790" -> "10788" 
-  "10808" -> "10819" 
-  "10808" -> "10829" 
-  "10829" -> "10827" 
-  "10837" -> "10876" 
-  "10837" -> "10844" 
-  "10840" -> "10837" 
-  "10859" -> "10869" 
-  "10867" -> "10876" 
-  "10809" -> "10808" 
-  "10817" -> "10824" 
-  "10824" -> "10876" 
-  "10834" -> "10837" 
-  "10843" -> "10840" 
-  "10861" -> "10859" 
-  "10869" -> "10874" 
-  "10872" -> "10867" 
-  "10810" -> "10809" 
-  "10810" -> "10813" 
-  "10813" -> "10809" 
-  "10818" -> "10817" 
-  "10844" -> "10848" 
-  "10847" -> "10843" 
-  "10862" -> "10866" 
-  "10863" -> "10861" 
-  "10874" -> "10872" 
-  "10819" -> "10821" 
-  "10821" -> "10818" 
-  "10848" -> "10852" 
-  "10849" -> "10847" 
-  "10864" -> "10863" 
-  "10850" -> "10853" 
-  "10853" -> "10849" 
-  "10866" -> "10864" 
-  "10852" -> "10850" 
-  "10731" -> "10738" 
+digraph "GetStringCritical" {  
+"10885" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_string))<SUB>2070</SUB>> ]
+"10904" [label = <(soa,soa(env))<SUB>2071</SUB>> ]
+"10906" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::String&gt; s = soa.Decode&lt;mirror::String&gt;(java_string))<SUB>2072</SUB>> ]
+"10924" [label = <(&lt;operator&gt;.assignment,* heap = Runtime::Current()-&gt;GetHeap())<SUB>2073</SUB>> ]
+"10907" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::String&gt; s)<SUB>2072</SUB>> ]
+"10914" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::String&gt;(java_string))<SUB>2072</SUB>> ]
+"10926" [label = <(GetHeap,Runtime::Current()-&gt;GetHeap())<SUB>2073</SUB>> ]
+"10934" [label = <(IsMovableObject,heap-&gt;IsMovableObject(s))<SUB>2074</SUB>> ]
+"10985" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>2085</SUB>> ]
+"10908" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::String)<SUB>2072</SUB>> ]
+"10915" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::String)<SUB>2072</SUB>> ]
+"10927" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetHeap)<SUB>2073</SUB>> ]
+"10935" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;IsMovableObject)<SUB>2074</SUB>> ]
+"10940" [label = <(&lt;operator&gt;.greaterThan,StackHandleScope&lt;1&gt; hs(soa.Self()))<SUB>2075</SUB>> ]
+"10949" [label = <(&lt;operator&gt;.greaterThan,HandleWrapperObjPtr&lt;mirror::String&gt; h(hs.NewHandleWrapper(&amp;s)))<SUB>2076</SUB>> ]
+"10986" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>2085</SUB>> ]
+"11000" [label = <(&lt;operator&gt;.assignment,length = s-&gt;GetLength())<SUB>2089</SUB>> ]
+"11007" [label = <(&lt;operator&gt;.assignment,* chars = new jchar[length])<SUB>2090</SUB>> ]
+"11032" [label = <(RETURN,return chars;,return chars;)<SUB>2094</SUB>> ]
+"10889" [label = <(UNLIKELY,UNLIKELY((java_string) == nullptr))<SUB>2070</SUB>> ]
+"10910" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>2072</SUB>> ]
+"10916" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2072</SUB>> ]
+"10919" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>2072</SUB>> ]
+"10928" [label = <(Runtime::Current,Runtime::Current())<SUB>2073</SUB>> ]
+"10932" [label = <(FIELD_IDENTIFIER,GetHeap,GetHeap)<SUB>2073</SUB>> ]
+"10937" [label = <(FIELD_IDENTIFIER,IsMovableObject,IsMovableObject)<SUB>2074</SUB>> ]
+"10941" [label = <(&lt;operator&gt;.lessThan,StackHandleScope&lt;1)<SUB>2075</SUB>> ]
+"10944" [label = <(hs,hs(soa.Self()))<SUB>2075</SUB>> ]
+"10950" [label = <(&lt;operator&gt;.lessThan,HandleWrapperObjPtr&lt;mirror::String)<SUB>2076</SUB>> ]
+"10955" [label = <(h,h(hs.NewHandleWrapper(&amp;s)))<SUB>2076</SUB>> ]
+"10963" [label = <(&lt;operator&gt;.logicalNot,!kUseReadBarrier)<SUB>2077</SUB>> ]
+"10988" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>2085</SUB>> ]
+"10991" [label = <(&lt;operator&gt;.notEquals,is_copy != nullptr)<SUB>2086</SUB>> ]
+"11002" [label = <(GetLength,s-&gt;GetLength())<SUB>2089</SUB>> ]
+"11009" [label = <(&lt;operator&gt;.new,new jchar[length])<SUB>2090</SUB>> ]
+"11017" [label = <(&lt;operator&gt;.lessThan,i &lt; length)<SUB>2091</SUB>> ]
+"11020" [label = <(&lt;operator&gt;.preIncrement,++i)<SUB>2091</SUB>> ]
+"11045" [label = <(RETURN,return static_cast&lt;jchar*&gt;(s-&gt;GetValue());,return static_cast&lt;jchar*&gt;(s-&gt;GetValue());)<SUB>2099</SUB>> ]
+"10890" [label = <(&lt;operator&gt;.equals,(java_string) == nullptr)<SUB>2070</SUB>> ]
+"10894" [label = <(CHECK_NON_NULL_ARGUMENT(java_string),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_string == null&quot;))<SUB>2070</SUB>> ]
+"10901" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_string),CHECK_NON_NULL_ARGUMENT(java_string))<SUB>2070</SUB>> ]
+"10912" [label = <(FIELD_IDENTIFIER,String,String)<SUB>2072</SUB>> ]
+"10918" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2072</SUB>> ]
+"10921" [label = <(FIELD_IDENTIFIER,String,String)<SUB>2072</SUB>> ]
+"10929" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>2073</SUB>> ]
+"10945" [label = <(Self,soa.Self())<SUB>2075</SUB>> ]
+"10952" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>2076</SUB>> ]
+"10956" [label = <(NewHandleWrapper,hs.NewHandleWrapper(&amp;s))<SUB>2076</SUB>> ]
+"10966" [label = <(IncrementDisableMovingGC,heap-&gt;IncrementDisableMovingGC(soa.Self()))<SUB>2078</SUB>> ]
+"10995" [label = <(&lt;operator&gt;.assignment,*is_copy = JNI_TRUE)<SUB>2087</SUB>> ]
+"11003" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetLength)<SUB>2089</SUB>> ]
+"11014" [label = <(&lt;operator&gt;.assignment,i = 0)<SUB>2091</SUB>> ]
+"11023" [label = <(&lt;operator&gt;.assignment,chars[i] = s-&gt;CharAt(i))<SUB>2092</SUB>> ]
+"11037" [label = <(&lt;operator&gt;.notEquals,is_copy != nullptr)<SUB>2096</SUB>> ]
+"11046" [label = <(&lt;operator&gt;.cast,static_cast&lt;jchar*&gt;(s-&gt;GetValue()))<SUB>2099</SUB>> ]
+"10895" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2070</SUB>> ]
+"10931" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>2073</SUB>> ]
+"10946" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>2075</SUB>> ]
+"10954" [label = <(FIELD_IDENTIFIER,String,String)<SUB>2076</SUB>> ]
+"10957" [label = <(&lt;operator&gt;.fieldAccess,hs.NewHandleWrapper)<SUB>2076</SUB>> ]
+"10960" [label = <(&lt;operator&gt;.addressOf,&amp;s)<SUB>2076</SUB>> ]
+"10967" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;IncrementDisableMovingGC)<SUB>2078</SUB>> ]
+"10970" [label = <(Self,soa.Self())<SUB>2078</SUB>> ]
+"10976" [label = <(IncrementDisableThreadFlip,heap-&gt;IncrementDisableThreadFlip(soa.Self()))<SUB>2082</SUB>> ]
+"10996" [label = <(&lt;operator&gt;.indirection,*is_copy)<SUB>2087</SUB>> ]
+"11005" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>2089</SUB>> ]
+"11024" [label = <(&lt;operator&gt;.indirectIndexAccess,chars[i])<SUB>2092</SUB>> ]
+"11027" [label = <(CharAt,s-&gt;CharAt(i))<SUB>2092</SUB>> ]
+"11041" [label = <(&lt;operator&gt;.assignment,*is_copy = JNI_FALSE)<SUB>2097</SUB>> ]
+"11047" [label = <(UNKNOWN,jchar*,jchar*)<SUB>2099</SUB>> ]
+"11048" [label = <(GetValue,s-&gt;GetValue())<SUB>2099</SUB>> ]
+"10896" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2070</SUB>> ]
+"10898" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2070</SUB>> ]
+"10948" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>2075</SUB>> ]
+"10959" [label = <(FIELD_IDENTIFIER,NewHandleWrapper,NewHandleWrapper)<SUB>2076</SUB>> ]
+"10969" [label = <(FIELD_IDENTIFIER,IncrementDisableMovingGC,IncrementDisableMovingGC)<SUB>2078</SUB>> ]
+"10971" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>2078</SUB>> ]
+"10977" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;IncrementDisableThreadFlip)<SUB>2082</SUB>> ]
+"10980" [label = <(Self,soa.Self())<SUB>2082</SUB>> ]
+"11028" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;CharAt)<SUB>2092</SUB>> ]
+"11042" [label = <(&lt;operator&gt;.indirection,*is_copy)<SUB>2097</SUB>> ]
+"11049" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetValue)<SUB>2099</SUB>> ]
+"10973" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>2078</SUB>> ]
+"10979" [label = <(FIELD_IDENTIFIER,IncrementDisableThreadFlip,IncrementDisableThreadFlip)<SUB>2082</SUB>> ]
+"10981" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>2082</SUB>> ]
+"11030" [label = <(FIELD_IDENTIFIER,CharAt,CharAt)<SUB>2092</SUB>> ]
+"11051" [label = <(FIELD_IDENTIFIER,GetValue,GetValue)<SUB>2099</SUB>> ]
+"10983" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>2082</SUB>> ]
+"10880" [label = <(METHOD,GetStringCritical)<SUB>2069</SUB>> ]
+"11052" [label = <(METHOD_RETURN,jchar)<SUB>2069</SUB>> ]
+  "10885" -> "10890" 
+  "10885" -> "10904" 
+  "10904" -> "10912" 
+  "10906" -> "10931" 
+  "10924" -> "10937" 
+  "10907" -> "10918" 
+  "10914" -> "10906" 
+  "10926" -> "10924" 
+  "10934" -> "10941" 
+  "10934" -> "10988" 
+  "10985" -> "10991" 
+  "10985" -> "11037" 
+  "10908" -> "10907" 
+  "10915" -> "10914" 
+  "10927" -> "10926" 
+  "10935" -> "10934" 
+  "10940" -> "10954" 
+  "10949" -> "10963" 
+  "10986" -> "10985" 
+  "11000" -> "11009" 
+  "11007" -> "11014" 
+  "11032" -> "11052" 
+  "10889" -> "10896" 
+  "10889" -> "10904" 
+  "10910" -> "10908" 
+  "10916" -> "10921" 
+  "10919" -> "10915" 
+  "10928" -> "10932" 
+  "10932" -> "10927" 
+  "10937" -> "10935" 
+  "10941" -> "10948" 
+  "10944" -> "10940" 
+  "10950" -> "10959" 
+  "10955" -> "10949" 
+  "10963" -> "10969" 
+  "10963" -> "10979" 
+  "10988" -> "10986" 
+  "10991" -> "10996" 
+  "10991" -> "11005" 
+  "11002" -> "11000" 
+  "11009" -> "11007" 
+  "11017" -> "11024" 
+  "11017" -> "11032" 
+  "11020" -> "11017" 
+  "11045" -> "11052" 
+  "10890" -> "10889" 
+  "10894" -> "10901" 
+  "10901" -> "11052" 
+  "10912" -> "10910" 
+  "10918" -> "10916" 
+  "10921" -> "10919" 
+  "10929" -> "10928" 
+  "10945" -> "10944" 
+  "10952" -> "10950" 
+  "10956" -> "10955" 
+  "10966" -> "10988" 
+  "10995" -> "11005" 
+  "11003" -> "11002" 
+  "11014" -> "11017" 
+  "11023" -> "11020" 
+  "11037" -> "11047" 
+  "11037" -> "11042" 
+  "11046" -> "11045" 
+  "10895" -> "10894" 
+  "10931" -> "10929" 
+  "10946" -> "10945" 
+  "10954" -> "10952" 
+  "10957" -> "10960" 
+  "10960" -> "10956" 
+  "10967" -> "10973" 
+  "10970" -> "10966" 
+  "10976" -> "10988" 
+  "10996" -> "10995" 
+  "11005" -> "11003" 
+  "11024" -> "11030" 
+  "11027" -> "11023" 
+  "11041" -> "11047" 
+  "11047" -> "11051" 
+  "11048" -> "11046" 
+  "10896" -> "10898" 
+  "10898" -> "10895" 
+  "10948" -> "10946" 
+  "10959" -> "10957" 
+  "10969" -> "10967" 
+  "10971" -> "10970" 
+  "10977" -> "10983" 
+  "10980" -> "10976" 
+  "11028" -> "11027" 
+  "11042" -> "11041" 
+  "11049" -> "11048" 
+  "10973" -> "10971" 
+  "10979" -> "10977" 
+  "10981" -> "10980" 
+  "11030" -> "11028" 
+  "11051" -> "11049" 
+  "10983" -> "10981" 
+  "10880" -> "10885" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/205-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/205-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/205-cfg.dot	2023-06-07 19:35:28.347384338 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/205-cfg.dot	2023-06-07 19:35:34.877383767 +0330
@@ -1,143 +1,126 @@
-digraph "GetStringUTFRegion" {  
-"10885" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string))<SUB>2146</SUB>> ]
-"10903" [label = <(soa,soa(env))<SUB>2147</SUB>> ]
-"10905" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::String&gt; s = soa.Decode&lt;mirror::String&gt;(java_string))<SUB>2148</SUB>> ]
-"10906" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::String&gt; s)<SUB>2148</SUB>> ]
-"10913" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::String&gt;(java_string))<SUB>2148</SUB>> ]
-"10923" [label = <(&lt;operator&gt;.logicalOr,start &lt; 0 || length &lt; 0 || length &gt; s-&gt;GetLength() - start)<SUB>2149</SUB>> ]
-"10907" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::String)<SUB>2148</SUB>> ]
-"10914" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::String)<SUB>2148</SUB>> ]
-"10924" [label = <(&lt;operator&gt;.logicalOr,start &lt; 0 || length &lt; 0)<SUB>2149</SUB>> ]
-"10931" [label = <(&lt;operator&gt;.greaterThan,length &gt; s-&gt;GetLength() - start)<SUB>2149</SUB>> ]
-"10940" [label = <(ThrowSIOOBE,ThrowSIOOBE(soa, start, length, s-&gt;GetLength()))<SUB>2150</SUB>> ]
-"10889" [label = <(UNLIKELY,UNLIKELY((java_string) == nullptr))<SUB>2146</SUB>> ]
-"10909" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>2148</SUB>> ]
-"10915" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2148</SUB>> ]
-"10918" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>2148</SUB>> ]
-"10925" [label = <(&lt;operator&gt;.lessThan,start &lt; 0)<SUB>2149</SUB>> ]
-"10928" [label = <(&lt;operator&gt;.lessThan,length &lt; 0)<SUB>2149</SUB>> ]
-"10933" [label = <(&lt;operator&gt;.subtraction,s-&gt;GetLength() - start)<SUB>2149</SUB>> ]
-"10944" [label = <(GetLength,s-&gt;GetLength())<SUB>2150</SUB>> ]
-"10950" [label = <(CHECK_NON_NULL_MEMCPY_ARGUMENT,CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf))<SUB>2152</SUB>> ]
-"10890" [label = <(&lt;operator&gt;.equals,(java_string) == nullptr)<SUB>2146</SUB>> ]
-"10894" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_string == null&quot;))<SUB>2146</SUB>> ]
-"10901" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string))<SUB>2146</SUB>> ]
-"10911" [label = <(FIELD_IDENTIFIER,String,String)<SUB>2148</SUB>> ]
-"10917" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2148</SUB>> ]
-"10920" [label = <(FIELD_IDENTIFIER,String,String)<SUB>2148</SUB>> ]
-"10934" [label = <(GetLength,s-&gt;GetLength())<SUB>2149</SUB>> ]
-"10945" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetLength)<SUB>2150</SUB>> ]
-"10973" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>2153</SUB>> ]
-"10895" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2146</SUB>> ]
-"10935" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetLength)<SUB>2149</SUB>> ]
-"10947" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>2150</SUB>> ]
-"10974" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>2153</SUB>> ]
-"10896" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2146</SUB>> ]
-"10898" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2146</SUB>> ]
-"10937" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>2149</SUB>> ]
-"10955" [label = <(UNLIKELY,UNLIKELY((length) != 0 &amp;&amp; (buf) == nullptr))<SUB>2152</SUB>> ]
-"10976" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>2153</SUB>> ]
-"10984" [label = <(&lt;operator&gt;.lessThan,i &lt; length)<SUB>2154</SUB>> ]
-"10987" [label = <(&lt;operator&gt;.preIncrement,++i)<SUB>2154</SUB>> ]
-"11004" [label = <(&lt;operator&gt;.assignment,* chars = s-&gt;GetValue())<SUB>2158</SUB>> ]
-"11011" [label = <(&lt;operator&gt;.assignment,bytes = CountUtf8Bytes(chars + start, length))<SUB>2159</SUB>> ]
-"11018" [label = <(ConvertUtf16ToModifiedUtf8,ConvertUtf16ToModifiedUtf8(buf, bytes, chars + start, length))<SUB>2160</SUB>> ]
-"10956" [label = <(&lt;operator&gt;.logicalAnd,(length) != 0 &amp;&amp; (buf) == nullptr)<SUB>2152</SUB>> ]
-"10964" [label = <(CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;buf == null&quot;))<SUB>2152</SUB>> ]
-"10971" [label = <(RETURN,CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf),CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf))<SUB>2152</SUB>> ]
-"10981" [label = <(&lt;operator&gt;.assignment,i = 0)<SUB>2154</SUB>> ]
-"10990" [label = <(&lt;operator&gt;.assignment,buf[i] = s-&gt;CharAt(start+i))<SUB>2155</SUB>> ]
-"11006" [label = <(GetValue,s-&gt;GetValue())<SUB>2158</SUB>> ]
-"11013" [label = <(CountUtf8Bytes,CountUtf8Bytes(chars + start, length))<SUB>2159</SUB>> ]
-"11021" [label = <(&lt;operator&gt;.addition,chars + start)<SUB>2160</SUB>> ]
-"10957" [label = <(&lt;operator&gt;.notEquals,(length) != 0)<SUB>2152</SUB>> ]
-"10960" [label = <(&lt;operator&gt;.equals,(buf) == nullptr)<SUB>2152</SUB>> ]
-"10965" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2152</SUB>> ]
-"10991" [label = <(&lt;operator&gt;.indirectIndexAccess,buf[i])<SUB>2155</SUB>> ]
-"10994" [label = <(CharAt,s-&gt;CharAt(start+i))<SUB>2155</SUB>> ]
-"11007" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetValue)<SUB>2158</SUB>> ]
-"11014" [label = <(&lt;operator&gt;.addition,chars + start)<SUB>2159</SUB>> ]
-"10966" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2152</SUB>> ]
-"10968" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2152</SUB>> ]
-"10995" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;CharAt)<SUB>2155</SUB>> ]
-"10998" [label = <(&lt;operator&gt;.addition,start+i)<SUB>2155</SUB>> ]
-"11009" [label = <(FIELD_IDENTIFIER,GetValue,GetValue)<SUB>2158</SUB>> ]
-"10997" [label = <(FIELD_IDENTIFIER,CharAt,CharAt)<SUB>2155</SUB>> ]
-"10878" [label = <(METHOD,GetStringUTFRegion)<SUB>2144</SUB>> ]
-"11025" [label = <(METHOD_RETURN,void)<SUB>2144</SUB>> ]
-  "10885" -> "10890" 
-  "10885" -> "10903" 
-  "10903" -> "10911" 
-  "10905" -> "10925" 
-  "10906" -> "10917" 
-  "10913" -> "10905" 
-  "10923" -> "10947" 
-  "10923" -> "10950" 
-  "10907" -> "10906" 
-  "10914" -> "10913" 
-  "10924" -> "10923" 
-  "10924" -> "10937" 
-  "10931" -> "10923" 
-  "10940" -> "11025" 
-  "10889" -> "10896" 
-  "10889" -> "10903" 
-  "10909" -> "10907" 
-  "10915" -> "10920" 
-  "10918" -> "10914" 
-  "10925" -> "10924" 
-  "10925" -> "10928" 
-  "10928" -> "10924" 
-  "10933" -> "10931" 
-  "10944" -> "10940" 
-  "10950" -> "10957" 
-  "10950" -> "10976" 
-  "10890" -> "10889" 
-  "10894" -> "10901" 
-  "10901" -> "11025" 
-  "10911" -> "10909" 
-  "10917" -> "10915" 
-  "10920" -> "10918" 
-  "10934" -> "10933" 
-  "10945" -> "10944" 
-  "10973" -> "10981" 
-  "10973" -> "11009" 
-  "10895" -> "10894" 
-  "10935" -> "10934" 
-  "10947" -> "10945" 
-  "10974" -> "10973" 
-  "10896" -> "10898" 
-  "10898" -> "10895" 
-  "10937" -> "10935" 
-  "10955" -> "10966" 
-  "10955" -> "10976" 
-  "10976" -> "10974" 
-  "10984" -> "11025" 
-  "10984" -> "10991" 
-  "10987" -> "10984" 
-  "11004" -> "11014" 
-  "11011" -> "11021" 
-  "11018" -> "11025" 
-  "10956" -> "10955" 
-  "10964" -> "10971" 
-  "10971" -> "11025" 
-  "10981" -> "10984" 
-  "10990" -> "10987" 
-  "11006" -> "11004" 
-  "11013" -> "11011" 
-  "11021" -> "11018" 
-  "10957" -> "10956" 
-  "10957" -> "10960" 
-  "10960" -> "10956" 
-  "10965" -> "10964" 
-  "10991" -> "10997" 
-  "10994" -> "10990" 
-  "11007" -> "11006" 
-  "11014" -> "11013" 
-  "10966" -> "10968" 
-  "10968" -> "10965" 
-  "10995" -> "10998" 
-  "10998" -> "10994" 
-  "11009" -> "11007" 
-  "10997" -> "10995" 
-  "10878" -> "10885" 
+digraph "ReleaseStringCritical" {  
+"11059" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string))<SUB>2106</SUB>> ]
+"11077" [label = <(soa,soa(env))<SUB>2107</SUB>> ]
+"11080" [label = <(&lt;operator&gt;.assignment,* heap = Runtime::Current()-&gt;GetHeap())<SUB>2108</SUB>> ]
+"11089" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::String&gt; s = soa.Decode&lt;mirror::String&gt;(java_string))<SUB>2109</SUB>> ]
+"11082" [label = <(GetHeap,Runtime::Current()-&gt;GetHeap())<SUB>2108</SUB>> ]
+"11090" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::String&gt; s)<SUB>2109</SUB>> ]
+"11097" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::String&gt;(java_string))<SUB>2109</SUB>> ]
+"11107" [label = <(IsMovableObject,heap-&gt;IsMovableObject(s))<SUB>2110</SUB>> ]
+"11136" [label = <(&lt;operator&gt;.logicalOr,s-&gt;IsCompressed() || (s-&gt;IsCompressed() == false &amp;&amp; s-&gt;GetValue() != chars))<SUB>2117</SUB>> ]
+"11083" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetHeap)<SUB>2108</SUB>> ]
+"11091" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::String)<SUB>2109</SUB>> ]
+"11098" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::String)<SUB>2109</SUB>> ]
+"11108" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;IsMovableObject)<SUB>2110</SUB>> ]
+"11137" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>2117</SUB>> ]
+"11141" [label = <(&lt;operator&gt;.logicalAnd,s-&gt;IsCompressed() == false &amp;&amp; s-&gt;GetValue() != chars)<SUB>2117</SUB>> ]
+"11155" [label = <(&lt;operator&gt;.delete,delete[] chars)<SUB>2118</SUB>> ]
+"11063" [label = <(UNLIKELY,UNLIKELY((java_string) == nullptr))<SUB>2106</SUB>> ]
+"11084" [label = <(Runtime::Current,Runtime::Current())<SUB>2108</SUB>> ]
+"11088" [label = <(FIELD_IDENTIFIER,GetHeap,GetHeap)<SUB>2108</SUB>> ]
+"11093" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>2109</SUB>> ]
+"11099" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2109</SUB>> ]
+"11102" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>2109</SUB>> ]
+"11110" [label = <(FIELD_IDENTIFIER,IsMovableObject,IsMovableObject)<SUB>2110</SUB>> ]
+"11114" [label = <(&lt;operator&gt;.logicalNot,!kUseReadBarrier)<SUB>2111</SUB>> ]
+"11138" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>2117</SUB>> ]
+"11142" [label = <(&lt;operator&gt;.equals,s-&gt;IsCompressed() == false)<SUB>2117</SUB>> ]
+"11148" [label = <(&lt;operator&gt;.notEquals,s-&gt;GetValue() != chars)<SUB>2117</SUB>> ]
+"11064" [label = <(&lt;operator&gt;.equals,(java_string) == nullptr)<SUB>2106</SUB>> ]
+"11068" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_string == null&quot;))<SUB>2106</SUB>> ]
+"11075" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string))<SUB>2106</SUB>> ]
+"11085" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>2108</SUB>> ]
+"11095" [label = <(FIELD_IDENTIFIER,String,String)<SUB>2109</SUB>> ]
+"11101" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2109</SUB>> ]
+"11104" [label = <(FIELD_IDENTIFIER,String,String)<SUB>2109</SUB>> ]
+"11117" [label = <(DecrementDisableMovingGC,heap-&gt;DecrementDisableMovingGC(soa.Self()))<SUB>2112</SUB>> ]
+"11140" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>2117</SUB>> ]
+"11143" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>2117</SUB>> ]
+"11149" [label = <(GetValue,s-&gt;GetValue())<SUB>2117</SUB>> ]
+"11069" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2106</SUB>> ]
+"11087" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>2108</SUB>> ]
+"11118" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;DecrementDisableMovingGC)<SUB>2112</SUB>> ]
+"11121" [label = <(Self,soa.Self())<SUB>2112</SUB>> ]
+"11127" [label = <(DecrementDisableThreadFlip,heap-&gt;DecrementDisableThreadFlip(soa.Self()))<SUB>2114</SUB>> ]
+"11144" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>2117</SUB>> ]
+"11150" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetValue)<SUB>2117</SUB>> ]
+"11070" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2106</SUB>> ]
+"11072" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2106</SUB>> ]
+"11120" [label = <(FIELD_IDENTIFIER,DecrementDisableMovingGC,DecrementDisableMovingGC)<SUB>2112</SUB>> ]
+"11122" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>2112</SUB>> ]
+"11128" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;DecrementDisableThreadFlip)<SUB>2114</SUB>> ]
+"11131" [label = <(Self,soa.Self())<SUB>2114</SUB>> ]
+"11146" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>2117</SUB>> ]
+"11152" [label = <(FIELD_IDENTIFIER,GetValue,GetValue)<SUB>2117</SUB>> ]
+"11124" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>2112</SUB>> ]
+"11130" [label = <(FIELD_IDENTIFIER,DecrementDisableThreadFlip,DecrementDisableThreadFlip)<SUB>2114</SUB>> ]
+"11132" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>2114</SUB>> ]
+"11134" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>2114</SUB>> ]
+"11054" [label = <(METHOD,ReleaseStringCritical)<SUB>2103</SUB>> ]
+"11157" [label = <(METHOD_RETURN,void)<SUB>2103</SUB>> ]
+  "11059" -> "11064" 
+  "11059" -> "11077" 
+  "11077" -> "11087" 
+  "11080" -> "11095" 
+  "11089" -> "11110" 
+  "11082" -> "11080" 
+  "11090" -> "11101" 
+  "11097" -> "11089" 
+  "11107" -> "11114" 
+  "11107" -> "11140" 
+  "11136" -> "11157" 
+  "11136" -> "11155" 
+  "11083" -> "11082" 
+  "11091" -> "11090" 
+  "11098" -> "11097" 
+  "11108" -> "11107" 
+  "11137" -> "11136" 
+  "11137" -> "11146" 
+  "11141" -> "11136" 
+  "11155" -> "11157" 
+  "11063" -> "11070" 
+  "11063" -> "11077" 
+  "11084" -> "11088" 
+  "11088" -> "11083" 
+  "11093" -> "11091" 
+  "11099" -> "11104" 
+  "11102" -> "11098" 
+  "11110" -> "11108" 
+  "11114" -> "11120" 
+  "11114" -> "11130" 
+  "11138" -> "11137" 
+  "11142" -> "11141" 
+  "11142" -> "11152" 
+  "11148" -> "11141" 
+  "11064" -> "11063" 
+  "11068" -> "11075" 
+  "11075" -> "11157" 
+  "11085" -> "11084" 
+  "11095" -> "11093" 
+  "11101" -> "11099" 
+  "11104" -> "11102" 
+  "11117" -> "11140" 
+  "11140" -> "11138" 
+  "11143" -> "11142" 
+  "11149" -> "11148" 
+  "11069" -> "11068" 
+  "11087" -> "11085" 
+  "11118" -> "11124" 
+  "11121" -> "11117" 
+  "11127" -> "11140" 
+  "11144" -> "11143" 
+  "11150" -> "11149" 
+  "11070" -> "11072" 
+  "11072" -> "11069" 
+  "11120" -> "11118" 
+  "11122" -> "11121" 
+  "11128" -> "11134" 
+  "11131" -> "11127" 
+  "11146" -> "11144" 
+  "11152" -> "11150" 
+  "11124" -> "11122" 
+  "11130" -> "11128" 
+  "11132" -> "11131" 
+  "11134" -> "11132" 
+  "11054" -> "11059" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/206-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/206-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/206-cfg.dot	2023-06-07 19:35:28.347384338 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/206-cfg.dot	2023-06-07 19:35:34.877383767 +0330
@@ -1,159 +1,103 @@
-digraph "GetStringChars" {  
-"11032" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_string))<SUB>2166</SUB>> ]
-"11051" [label = <(soa,soa(env))<SUB>2167</SUB>> ]
-"11053" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::String&gt; s = soa.Decode&lt;mirror::String&gt;(java_string))<SUB>2168</SUB>> ]
-"11071" [label = <(&lt;operator&gt;.assignment,* heap = Runtime::Current()-&gt;GetHeap())<SUB>2169</SUB>> ]
-"11166" [label = <(RETURN,return static_cast&lt;jchar*&gt;(s-&gt;GetValue());,return static_cast&lt;jchar*&gt;(s-&gt;GetValue());)<SUB>2188</SUB>> ]
-"11054" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::String&gt; s)<SUB>2168</SUB>> ]
-"11061" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::String&gt;(java_string))<SUB>2168</SUB>> ]
-"11073" [label = <(GetHeap,Runtime::Current()-&gt;GetHeap())<SUB>2169</SUB>> ]
-"11081" [label = <(&lt;operator&gt;.logicalOr,heap-&gt;IsMovableObject(s) || s-&gt;IsCompressed())<SUB>2170</SUB>> ]
-"11158" [label = <(&lt;operator&gt;.notEquals,is_copy != nullptr)<SUB>2185</SUB>> ]
-"11167" [label = <(&lt;operator&gt;.cast,static_cast&lt;jchar*&gt;(s-&gt;GetValue()))<SUB>2188</SUB>> ]
-"11055" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::String)<SUB>2168</SUB>> ]
-"11062" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::String)<SUB>2168</SUB>> ]
-"11074" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetHeap)<SUB>2169</SUB>> ]
-"11082" [label = <(IsMovableObject,heap-&gt;IsMovableObject(s))<SUB>2170</SUB>> ]
-"11087" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>2170</SUB>> ]
-"11093" [label = <(&lt;operator&gt;.assignment,* chars = new jchar[s-&gt;GetLength()])<SUB>2171</SUB>> ]
-"11155" [label = <(RETURN,return chars;,return chars;)<SUB>2183</SUB>> ]
-"11162" [label = <(&lt;operator&gt;.assignment,*is_copy = JNI_FALSE)<SUB>2186</SUB>> ]
-"11168" [label = <(UNKNOWN,jchar*,jchar*)<SUB>2188</SUB>> ]
-"11169" [label = <(GetValue,s-&gt;GetValue())<SUB>2188</SUB>> ]
-"11036" [label = <(UNLIKELY,UNLIKELY((java_string) == nullptr))<SUB>2166</SUB>> ]
-"11057" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>2168</SUB>> ]
-"11063" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2168</SUB>> ]
-"11066" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>2168</SUB>> ]
-"11075" [label = <(Runtime::Current,Runtime::Current())<SUB>2169</SUB>> ]
-"11079" [label = <(FIELD_IDENTIFIER,GetHeap,GetHeap)<SUB>2169</SUB>> ]
-"11083" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;IsMovableObject)<SUB>2170</SUB>> ]
-"11088" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>2170</SUB>> ]
-"11095" [label = <(&lt;operator&gt;.new,new jchar[s-&gt;GetLength()])<SUB>2171</SUB>> ]
-"11098" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>2172</SUB>> ]
-"11147" [label = <(&lt;operator&gt;.notEquals,is_copy != nullptr)<SUB>2180</SUB>> ]
-"11163" [label = <(&lt;operator&gt;.indirection,*is_copy)<SUB>2186</SUB>> ]
-"11170" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetValue)<SUB>2188</SUB>> ]
-"11037" [label = <(&lt;operator&gt;.equals,(java_string) == nullptr)<SUB>2166</SUB>> ]
-"11041" [label = <(CHECK_NON_NULL_ARGUMENT(java_string),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_string == null&quot;))<SUB>2166</SUB>> ]
-"11048" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_string),CHECK_NON_NULL_ARGUMENT(java_string))<SUB>2166</SUB>> ]
-"11059" [label = <(FIELD_IDENTIFIER,String,String)<SUB>2168</SUB>> ]
-"11065" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2168</SUB>> ]
-"11068" [label = <(FIELD_IDENTIFIER,String,String)<SUB>2168</SUB>> ]
-"11076" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>2169</SUB>> ]
-"11085" [label = <(FIELD_IDENTIFIER,IsMovableObject,IsMovableObject)<SUB>2170</SUB>> ]
-"11090" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>2170</SUB>> ]
-"11099" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>2172</SUB>> ]
-"11104" [label = <(&lt;operator&gt;.assignment,length = s-&gt;GetLength())<SUB>2173</SUB>> ]
-"11151" [label = <(&lt;operator&gt;.assignment,*is_copy = JNI_TRUE)<SUB>2181</SUB>> ]
-"11172" [label = <(FIELD_IDENTIFIER,GetValue,GetValue)<SUB>2188</SUB>> ]
-"11042" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2166</SUB>> ]
-"11078" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>2169</SUB>> ]
-"11101" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>2172</SUB>> ]
-"11106" [label = <(GetLength,s-&gt;GetLength())<SUB>2173</SUB>> ]
-"11116" [label = <(&lt;operator&gt;.lessThan,i &lt; length)<SUB>2174</SUB>> ]
-"11119" [label = <(&lt;operator&gt;.preIncrement,++i)<SUB>2174</SUB>> ]
-"11133" [label = <(memcpy,memcpy(chars, s-&gt;GetValue(), sizeof(jchar) * s-&gt;GetLength()))<SUB>2178</SUB>> ]
-"11152" [label = <(&lt;operator&gt;.indirection,*is_copy)<SUB>2181</SUB>> ]
-"11043" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2166</SUB>> ]
-"11045" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2166</SUB>> ]
-"11107" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetLength)<SUB>2173</SUB>> ]
-"11113" [label = <(&lt;operator&gt;.assignment,i = 0)<SUB>2174</SUB>> ]
-"11122" [label = <(&lt;operator&gt;.assignment,chars[i] = s-&gt;CharAt(i))<SUB>2175</SUB>> ]
-"11135" [label = <(GetValue,s-&gt;GetValue())<SUB>2178</SUB>> ]
-"11139" [label = <(&lt;operator&gt;.multiplication,sizeof(jchar) * s-&gt;GetLength())<SUB>2178</SUB>> ]
-"11109" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>2173</SUB>> ]
-"11123" [label = <(&lt;operator&gt;.indirectIndexAccess,chars[i])<SUB>2175</SUB>> ]
-"11126" [label = <(CharAt,s-&gt;CharAt(i))<SUB>2175</SUB>> ]
-"11136" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetValue)<SUB>2178</SUB>> ]
-"11140" [label = <(&lt;operator&gt;.sizeOf,sizeof(jchar))<SUB>2178</SUB>> ]
-"11142" [label = <(GetLength,s-&gt;GetLength())<SUB>2178</SUB>> ]
-"11127" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;CharAt)<SUB>2175</SUB>> ]
-"11138" [label = <(FIELD_IDENTIFIER,GetValue,GetValue)<SUB>2178</SUB>> ]
-"11143" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetLength)<SUB>2178</SUB>> ]
-"11129" [label = <(FIELD_IDENTIFIER,CharAt,CharAt)<SUB>2175</SUB>> ]
-"11145" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>2178</SUB>> ]
-"11027" [label = <(METHOD,GetStringChars)<SUB>2165</SUB>> ]
-"11173" [label = <(METHOD_RETURN,jchar)<SUB>2165</SUB>> ]
-  "11032" -> "11037" 
-  "11032" -> "11051" 
-  "11051" -> "11059" 
-  "11053" -> "11078" 
-  "11071" -> "11085" 
-  "11166" -> "11173" 
-  "11054" -> "11065" 
-  "11061" -> "11053" 
-  "11073" -> "11071" 
-  "11081" -> "11095" 
-  "11081" -> "11158" 
-  "11158" -> "11168" 
-  "11158" -> "11163" 
-  "11167" -> "11166" 
-  "11055" -> "11054" 
-  "11062" -> "11061" 
-  "11074" -> "11073" 
-  "11082" -> "11081" 
-  "11082" -> "11090" 
-  "11087" -> "11081" 
-  "11093" -> "11101" 
-  "11155" -> "11173" 
-  "11162" -> "11168" 
-  "11168" -> "11172" 
-  "11169" -> "11167" 
-  "11036" -> "11043" 
-  "11036" -> "11051" 
-  "11057" -> "11055" 
-  "11063" -> "11068" 
-  "11066" -> "11062" 
-  "11075" -> "11079" 
-  "11079" -> "11074" 
-  "11083" -> "11082" 
-  "11088" -> "11087" 
-  "11095" -> "11093" 
-  "11098" -> "11109" 
-  "11098" -> "11138" 
-  "11147" -> "11152" 
-  "11147" -> "11155" 
-  "11163" -> "11162" 
-  "11170" -> "11169" 
-  "11037" -> "11036" 
-  "11041" -> "11048" 
-  "11048" -> "11173" 
-  "11059" -> "11057" 
-  "11065" -> "11063" 
-  "11068" -> "11066" 
-  "11076" -> "11075" 
-  "11085" -> "11083" 
-  "11090" -> "11088" 
-  "11099" -> "11098" 
-  "11104" -> "11113" 
-  "11151" -> "11155" 
-  "11172" -> "11170" 
-  "11042" -> "11041" 
-  "11078" -> "11076" 
-  "11101" -> "11099" 
-  "11106" -> "11104" 
-  "11116" -> "11123" 
-  "11116" -> "11147" 
-  "11119" -> "11116" 
-  "11133" -> "11147" 
-  "11152" -> "11151" 
-  "11043" -> "11045" 
-  "11045" -> "11042" 
-  "11107" -> "11106" 
-  "11113" -> "11116" 
-  "11122" -> "11119" 
-  "11135" -> "11140" 
-  "11139" -> "11133" 
-  "11109" -> "11107" 
-  "11123" -> "11129" 
-  "11126" -> "11122" 
-  "11136" -> "11135" 
-  "11140" -> "11145" 
-  "11142" -> "11139" 
-  "11127" -> "11126" 
-  "11138" -> "11136" 
-  "11143" -> "11142" 
-  "11129" -> "11127" 
-  "11145" -> "11143" 
-  "11027" -> "11032" 
+digraph "GetStringUTFChars" {  
+"11181" [label = <(soa,soa(env))<SUB>2129</SUB>> ]
+"11183" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::String&gt; s = soa.Decode&lt;mirror::String&gt;(java_string))<SUB>2130</SUB>> ]
+"11201" [label = <(&lt;operator&gt;.assignment,byte_count = s-&gt;GetUtfLength())<SUB>2131</SUB>> ]
+"11208" [label = <(&lt;operator&gt;.assignment,* bytes = new char[byte_count + 1])<SUB>2132</SUB>> ]
+"11212" [label = <(CHECK,CHECK(bytes != nullptr))<SUB>2133</SUB>> ]
+"11260" [label = <(&lt;operator&gt;.assignment,bytes[byte_count] = '\0')<SUB>2142</SUB>> ]
+"11265" [label = <(RETURN,return bytes;,return bytes;)<SUB>2143</SUB>> ]
+"11165" [label = <(&lt;operator&gt;.equals,java_string == nullptr)<SUB>2123</SUB>> ]
+"11172" [label = <(&lt;operator&gt;.notEquals,is_copy != nullptr)<SUB>2126</SUB>> ]
+"11184" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::String&gt; s)<SUB>2130</SUB>> ]
+"11191" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::String&gt;(java_string))<SUB>2130</SUB>> ]
+"11203" [label = <(GetUtfLength,s-&gt;GetUtfLength())<SUB>2131</SUB>> ]
+"11210" [label = <(&lt;operator&gt;.new,new char[byte_count + 1])<SUB>2132</SUB>> ]
+"11213" [label = <(&lt;operator&gt;.notEquals,bytes != nullptr)<SUB>2133</SUB>> ]
+"11217" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>2134</SUB>> ]
+"11261" [label = <(&lt;operator&gt;.indirectIndexAccess,bytes[byte_count])<SUB>2142</SUB>> ]
+"11169" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2124</SUB>> ]
+"11176" [label = <(&lt;operator&gt;.assignment,*is_copy = JNI_TRUE)<SUB>2127</SUB>> ]
+"11185" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::String)<SUB>2130</SUB>> ]
+"11192" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::String)<SUB>2130</SUB>> ]
+"11204" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetUtfLength)<SUB>2131</SUB>> ]
+"11218" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>2134</SUB>> ]
+"11177" [label = <(&lt;operator&gt;.indirection,*is_copy)<SUB>2127</SUB>> ]
+"11187" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>2130</SUB>> ]
+"11193" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2130</SUB>> ]
+"11196" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>2130</SUB>> ]
+"11206" [label = <(FIELD_IDENTIFIER,GetUtfLength,GetUtfLength)<SUB>2131</SUB>> ]
+"11220" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>2134</SUB>> ]
+"11228" [label = <(&lt;operator&gt;.lessThan,i &lt; byte_count)<SUB>2135</SUB>> ]
+"11231" [label = <(&lt;operator&gt;.preIncrement,++i)<SUB>2135</SUB>> ]
+"11246" [label = <(&lt;operator&gt;.assignment,* chars = s-&gt;GetValue())<SUB>2139</SUB>> ]
+"11252" [label = <(ConvertUtf16ToModifiedUtf8,ConvertUtf16ToModifiedUtf8(bytes, byte_count, chars, s-&gt;GetLength()))<SUB>2140</SUB>> ]
+"11189" [label = <(FIELD_IDENTIFIER,String,String)<SUB>2130</SUB>> ]
+"11195" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2130</SUB>> ]
+"11198" [label = <(FIELD_IDENTIFIER,String,String)<SUB>2130</SUB>> ]
+"11225" [label = <(&lt;operator&gt;.assignment,i = 0)<SUB>2135</SUB>> ]
+"11234" [label = <(&lt;operator&gt;.assignment,bytes[i] = s-&gt;CharAt(i))<SUB>2136</SUB>> ]
+"11248" [label = <(GetValue,s-&gt;GetValue())<SUB>2139</SUB>> ]
+"11256" [label = <(GetLength,s-&gt;GetLength())<SUB>2140</SUB>> ]
+"11235" [label = <(&lt;operator&gt;.indirectIndexAccess,bytes[i])<SUB>2136</SUB>> ]
+"11238" [label = <(CharAt,s-&gt;CharAt(i))<SUB>2136</SUB>> ]
+"11249" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetValue)<SUB>2139</SUB>> ]
+"11257" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetLength)<SUB>2140</SUB>> ]
+"11239" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;CharAt)<SUB>2136</SUB>> ]
+"11251" [label = <(FIELD_IDENTIFIER,GetValue,GetValue)<SUB>2139</SUB>> ]
+"11259" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>2140</SUB>> ]
+"11241" [label = <(FIELD_IDENTIFIER,CharAt,CharAt)<SUB>2136</SUB>> ]
+"11159" [label = <(METHOD,GetStringUTFChars)<SUB>2122</SUB>> ]
+"11267" [label = <(METHOD_RETURN,const char*)<SUB>2122</SUB>> ]
+  "11181" -> "11189" 
+  "11183" -> "11206" 
+  "11201" -> "11210" 
+  "11208" -> "11213" 
+  "11212" -> "11220" 
+  "11260" -> "11265" 
+  "11265" -> "11267" 
+  "11165" -> "11169" 
+  "11165" -> "11172" 
+  "11172" -> "11177" 
+  "11172" -> "11181" 
+  "11184" -> "11195" 
+  "11191" -> "11183" 
+  "11203" -> "11201" 
+  "11210" -> "11208" 
+  "11213" -> "11212" 
+  "11217" -> "11225" 
+  "11217" -> "11251" 
+  "11261" -> "11260" 
+  "11169" -> "11267" 
+  "11176" -> "11181" 
+  "11185" -> "11184" 
+  "11192" -> "11191" 
+  "11204" -> "11203" 
+  "11218" -> "11217" 
+  "11177" -> "11176" 
+  "11187" -> "11185" 
+  "11193" -> "11198" 
+  "11196" -> "11192" 
+  "11206" -> "11204" 
+  "11220" -> "11218" 
+  "11228" -> "11235" 
+  "11228" -> "11261" 
+  "11231" -> "11228" 
+  "11246" -> "11259" 
+  "11252" -> "11261" 
+  "11189" -> "11187" 
+  "11195" -> "11193" 
+  "11198" -> "11196" 
+  "11225" -> "11228" 
+  "11234" -> "11231" 
+  "11248" -> "11246" 
+  "11256" -> "11252" 
+  "11235" -> "11241" 
+  "11238" -> "11234" 
+  "11249" -> "11248" 
+  "11257" -> "11256" 
+  "11239" -> "11238" 
+  "11251" -> "11249" 
+  "11259" -> "11257" 
+  "11241" -> "11239" 
+  "11159" -> "11165" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/207-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/207-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/207-cfg.dot	2023-06-07 19:35:28.357384336 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/207-cfg.dot	2023-06-07 19:35:34.877383767 +0330
@@ -1,78 +1,7 @@
-digraph "ReleaseStringChars" {  
-"11180" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string))<SUB>2192</SUB>> ]
-"11198" [label = <(soa,soa(env))<SUB>2193</SUB>> ]
-"11200" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::String&gt; s = soa.Decode&lt;mirror::String&gt;(java_string))<SUB>2194</SUB>> ]
-"11201" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::String&gt; s)<SUB>2194</SUB>> ]
-"11208" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::String&gt;(java_string))<SUB>2194</SUB>> ]
-"11218" [label = <(&lt;operator&gt;.logicalOr,s-&gt;IsCompressed() || (s-&gt;IsCompressed() == false &amp;&amp; chars != s-&gt;GetValue()))<SUB>2195</SUB>> ]
-"11202" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::String)<SUB>2194</SUB>> ]
-"11209" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::String)<SUB>2194</SUB>> ]
-"11219" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>2195</SUB>> ]
-"11223" [label = <(&lt;operator&gt;.logicalAnd,s-&gt;IsCompressed() == false &amp;&amp; chars != s-&gt;GetValue())<SUB>2195</SUB>> ]
-"11237" [label = <(&lt;operator&gt;.delete,delete[] chars)<SUB>2196</SUB>> ]
-"11184" [label = <(UNLIKELY,UNLIKELY((java_string) == nullptr))<SUB>2192</SUB>> ]
-"11204" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>2194</SUB>> ]
-"11210" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2194</SUB>> ]
-"11213" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>2194</SUB>> ]
-"11220" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>2195</SUB>> ]
-"11224" [label = <(&lt;operator&gt;.equals,s-&gt;IsCompressed() == false)<SUB>2195</SUB>> ]
-"11230" [label = <(&lt;operator&gt;.notEquals,chars != s-&gt;GetValue())<SUB>2195</SUB>> ]
-"11185" [label = <(&lt;operator&gt;.equals,(java_string) == nullptr)<SUB>2192</SUB>> ]
-"11189" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_string == null&quot;))<SUB>2192</SUB>> ]
-"11196" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string))<SUB>2192</SUB>> ]
-"11206" [label = <(FIELD_IDENTIFIER,String,String)<SUB>2194</SUB>> ]
-"11212" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2194</SUB>> ]
-"11215" [label = <(FIELD_IDENTIFIER,String,String)<SUB>2194</SUB>> ]
-"11222" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>2195</SUB>> ]
-"11225" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>2195</SUB>> ]
-"11232" [label = <(GetValue,s-&gt;GetValue())<SUB>2195</SUB>> ]
-"11190" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2192</SUB>> ]
-"11226" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>2195</SUB>> ]
-"11233" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetValue)<SUB>2195</SUB>> ]
-"11191" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2192</SUB>> ]
-"11193" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2192</SUB>> ]
-"11228" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>2195</SUB>> ]
-"11235" [label = <(FIELD_IDENTIFIER,GetValue,GetValue)<SUB>2195</SUB>> ]
-"11175" [label = <(METHOD,ReleaseStringChars)<SUB>2191</SUB>> ]
-"11239" [label = <(METHOD_RETURN,void)<SUB>2191</SUB>> ]
-  "11180" -> "11185" 
-  "11180" -> "11198" 
-  "11198" -> "11206" 
-  "11200" -> "11222" 
-  "11201" -> "11212" 
-  "11208" -> "11200" 
-  "11218" -> "11239" 
-  "11218" -> "11237" 
-  "11202" -> "11201" 
-  "11209" -> "11208" 
-  "11219" -> "11218" 
-  "11219" -> "11228" 
-  "11223" -> "11218" 
-  "11237" -> "11239" 
-  "11184" -> "11191" 
-  "11184" -> "11198" 
-  "11204" -> "11202" 
-  "11210" -> "11215" 
-  "11213" -> "11209" 
-  "11220" -> "11219" 
-  "11224" -> "11223" 
-  "11224" -> "11235" 
-  "11230" -> "11223" 
-  "11185" -> "11184" 
-  "11189" -> "11196" 
-  "11196" -> "11239" 
-  "11206" -> "11204" 
-  "11212" -> "11210" 
-  "11215" -> "11213" 
-  "11222" -> "11220" 
-  "11225" -> "11224" 
-  "11232" -> "11230" 
-  "11190" -> "11189" 
-  "11226" -> "11225" 
-  "11233" -> "11232" 
-  "11191" -> "11193" 
-  "11193" -> "11190" 
-  "11228" -> "11226" 
-  "11235" -> "11233" 
-  "11175" -> "11180" 
+digraph "ReleaseStringUTFChars" {  
+"11274" [label = <(&lt;operator&gt;.delete,delete[] chars)<SUB>2147</SUB>> ]
+"11269" [label = <(METHOD,ReleaseStringUTFChars)<SUB>2146</SUB>> ]
+"11276" [label = <(METHOD_RETURN,void)<SUB>2146</SUB>> ]
+  "11274" -> "11276" 
+  "11269" -> "11274" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/208-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/208-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/208-cfg.dot	2023-06-07 19:35:28.357384336 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/208-cfg.dot	2023-06-07 19:35:34.877383767 +0330
@@ -1,189 +1,108 @@
-digraph "GetStringCritical" {  
-"11246" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_string))<SUB>2201</SUB>> ]
-"11265" [label = <(soa,soa(env))<SUB>2202</SUB>> ]
-"11267" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::String&gt; s = soa.Decode&lt;mirror::String&gt;(java_string))<SUB>2203</SUB>> ]
-"11285" [label = <(&lt;operator&gt;.assignment,* heap = Runtime::Current()-&gt;GetHeap())<SUB>2204</SUB>> ]
-"11268" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::String&gt; s)<SUB>2203</SUB>> ]
-"11275" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::String&gt;(java_string))<SUB>2203</SUB>> ]
-"11287" [label = <(GetHeap,Runtime::Current()-&gt;GetHeap())<SUB>2204</SUB>> ]
-"11295" [label = <(IsMovableObject,heap-&gt;IsMovableObject(s))<SUB>2205</SUB>> ]
-"11346" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>2216</SUB>> ]
-"11269" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::String)<SUB>2203</SUB>> ]
-"11276" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::String)<SUB>2203</SUB>> ]
-"11288" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetHeap)<SUB>2204</SUB>> ]
-"11296" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;IsMovableObject)<SUB>2205</SUB>> ]
-"11301" [label = <(&lt;operator&gt;.greaterThan,StackHandleScope&lt;1&gt; hs(soa.Self()))<SUB>2206</SUB>> ]
-"11310" [label = <(&lt;operator&gt;.greaterThan,HandleWrapperObjPtr&lt;mirror::String&gt; h(hs.NewHandleWrapper(&amp;s)))<SUB>2207</SUB>> ]
-"11347" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>2216</SUB>> ]
-"11361" [label = <(&lt;operator&gt;.assignment,length = s-&gt;GetLength())<SUB>2220</SUB>> ]
-"11368" [label = <(&lt;operator&gt;.assignment,* chars = new jchar[length])<SUB>2221</SUB>> ]
-"11393" [label = <(RETURN,return chars;,return chars;)<SUB>2225</SUB>> ]
-"11250" [label = <(UNLIKELY,UNLIKELY((java_string) == nullptr))<SUB>2201</SUB>> ]
-"11271" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>2203</SUB>> ]
-"11277" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2203</SUB>> ]
-"11280" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>2203</SUB>> ]
-"11289" [label = <(Runtime::Current,Runtime::Current())<SUB>2204</SUB>> ]
-"11293" [label = <(FIELD_IDENTIFIER,GetHeap,GetHeap)<SUB>2204</SUB>> ]
-"11298" [label = <(FIELD_IDENTIFIER,IsMovableObject,IsMovableObject)<SUB>2205</SUB>> ]
-"11302" [label = <(&lt;operator&gt;.lessThan,StackHandleScope&lt;1)<SUB>2206</SUB>> ]
-"11305" [label = <(hs,hs(soa.Self()))<SUB>2206</SUB>> ]
-"11311" [label = <(&lt;operator&gt;.lessThan,HandleWrapperObjPtr&lt;mirror::String)<SUB>2207</SUB>> ]
-"11316" [label = <(h,h(hs.NewHandleWrapper(&amp;s)))<SUB>2207</SUB>> ]
-"11324" [label = <(&lt;operator&gt;.logicalNot,!kUseReadBarrier)<SUB>2208</SUB>> ]
-"11349" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>2216</SUB>> ]
-"11352" [label = <(&lt;operator&gt;.notEquals,is_copy != nullptr)<SUB>2217</SUB>> ]
-"11363" [label = <(GetLength,s-&gt;GetLength())<SUB>2220</SUB>> ]
-"11370" [label = <(&lt;operator&gt;.new,new jchar[length])<SUB>2221</SUB>> ]
-"11378" [label = <(&lt;operator&gt;.lessThan,i &lt; length)<SUB>2222</SUB>> ]
-"11381" [label = <(&lt;operator&gt;.preIncrement,++i)<SUB>2222</SUB>> ]
-"11406" [label = <(RETURN,return static_cast&lt;jchar*&gt;(s-&gt;GetValue());,return static_cast&lt;jchar*&gt;(s-&gt;GetValue());)<SUB>2230</SUB>> ]
-"11251" [label = <(&lt;operator&gt;.equals,(java_string) == nullptr)<SUB>2201</SUB>> ]
-"11255" [label = <(CHECK_NON_NULL_ARGUMENT(java_string),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_string == null&quot;))<SUB>2201</SUB>> ]
-"11262" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_string),CHECK_NON_NULL_ARGUMENT(java_string))<SUB>2201</SUB>> ]
-"11273" [label = <(FIELD_IDENTIFIER,String,String)<SUB>2203</SUB>> ]
-"11279" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2203</SUB>> ]
-"11282" [label = <(FIELD_IDENTIFIER,String,String)<SUB>2203</SUB>> ]
-"11290" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>2204</SUB>> ]
-"11306" [label = <(Self,soa.Self())<SUB>2206</SUB>> ]
-"11313" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>2207</SUB>> ]
-"11317" [label = <(NewHandleWrapper,hs.NewHandleWrapper(&amp;s))<SUB>2207</SUB>> ]
-"11327" [label = <(IncrementDisableMovingGC,heap-&gt;IncrementDisableMovingGC(soa.Self()))<SUB>2209</SUB>> ]
-"11356" [label = <(&lt;operator&gt;.assignment,*is_copy = JNI_TRUE)<SUB>2218</SUB>> ]
-"11364" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetLength)<SUB>2220</SUB>> ]
-"11375" [label = <(&lt;operator&gt;.assignment,i = 0)<SUB>2222</SUB>> ]
-"11384" [label = <(&lt;operator&gt;.assignment,chars[i] = s-&gt;CharAt(i))<SUB>2223</SUB>> ]
-"11398" [label = <(&lt;operator&gt;.notEquals,is_copy != nullptr)<SUB>2227</SUB>> ]
-"11407" [label = <(&lt;operator&gt;.cast,static_cast&lt;jchar*&gt;(s-&gt;GetValue()))<SUB>2230</SUB>> ]
-"11256" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2201</SUB>> ]
-"11292" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>2204</SUB>> ]
-"11307" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>2206</SUB>> ]
-"11315" [label = <(FIELD_IDENTIFIER,String,String)<SUB>2207</SUB>> ]
-"11318" [label = <(&lt;operator&gt;.fieldAccess,hs.NewHandleWrapper)<SUB>2207</SUB>> ]
-"11321" [label = <(&lt;operator&gt;.addressOf,&amp;s)<SUB>2207</SUB>> ]
-"11328" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;IncrementDisableMovingGC)<SUB>2209</SUB>> ]
-"11331" [label = <(Self,soa.Self())<SUB>2209</SUB>> ]
-"11337" [label = <(IncrementDisableThreadFlip,heap-&gt;IncrementDisableThreadFlip(soa.Self()))<SUB>2213</SUB>> ]
-"11357" [label = <(&lt;operator&gt;.indirection,*is_copy)<SUB>2218</SUB>> ]
-"11366" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>2220</SUB>> ]
-"11385" [label = <(&lt;operator&gt;.indirectIndexAccess,chars[i])<SUB>2223</SUB>> ]
-"11388" [label = <(CharAt,s-&gt;CharAt(i))<SUB>2223</SUB>> ]
-"11402" [label = <(&lt;operator&gt;.assignment,*is_copy = JNI_FALSE)<SUB>2228</SUB>> ]
-"11408" [label = <(UNKNOWN,jchar*,jchar*)<SUB>2230</SUB>> ]
-"11409" [label = <(GetValue,s-&gt;GetValue())<SUB>2230</SUB>> ]
-"11257" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2201</SUB>> ]
-"11259" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2201</SUB>> ]
-"11309" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>2206</SUB>> ]
-"11320" [label = <(FIELD_IDENTIFIER,NewHandleWrapper,NewHandleWrapper)<SUB>2207</SUB>> ]
-"11330" [label = <(FIELD_IDENTIFIER,IncrementDisableMovingGC,IncrementDisableMovingGC)<SUB>2209</SUB>> ]
-"11332" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>2209</SUB>> ]
-"11338" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;IncrementDisableThreadFlip)<SUB>2213</SUB>> ]
-"11341" [label = <(Self,soa.Self())<SUB>2213</SUB>> ]
-"11389" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;CharAt)<SUB>2223</SUB>> ]
-"11403" [label = <(&lt;operator&gt;.indirection,*is_copy)<SUB>2228</SUB>> ]
-"11410" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetValue)<SUB>2230</SUB>> ]
-"11334" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>2209</SUB>> ]
-"11340" [label = <(FIELD_IDENTIFIER,IncrementDisableThreadFlip,IncrementDisableThreadFlip)<SUB>2213</SUB>> ]
-"11342" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>2213</SUB>> ]
-"11391" [label = <(FIELD_IDENTIFIER,CharAt,CharAt)<SUB>2223</SUB>> ]
-"11412" [label = <(FIELD_IDENTIFIER,GetValue,GetValue)<SUB>2230</SUB>> ]
-"11344" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>2213</SUB>> ]
-"11241" [label = <(METHOD,GetStringCritical)<SUB>2200</SUB>> ]
-"11413" [label = <(METHOD_RETURN,jchar)<SUB>2200</SUB>> ]
-  "11246" -> "11251" 
-  "11246" -> "11265" 
-  "11265" -> "11273" 
-  "11267" -> "11292" 
-  "11285" -> "11298" 
-  "11268" -> "11279" 
-  "11275" -> "11267" 
-  "11287" -> "11285" 
-  "11295" -> "11302" 
-  "11295" -> "11349" 
-  "11346" -> "11352" 
-  "11346" -> "11398" 
-  "11269" -> "11268" 
-  "11276" -> "11275" 
-  "11288" -> "11287" 
-  "11296" -> "11295" 
-  "11301" -> "11315" 
-  "11310" -> "11324" 
-  "11347" -> "11346" 
-  "11361" -> "11370" 
-  "11368" -> "11375" 
-  "11393" -> "11413" 
-  "11250" -> "11257" 
-  "11250" -> "11265" 
-  "11271" -> "11269" 
-  "11277" -> "11282" 
-  "11280" -> "11276" 
-  "11289" -> "11293" 
-  "11293" -> "11288" 
-  "11298" -> "11296" 
-  "11302" -> "11309" 
-  "11305" -> "11301" 
-  "11311" -> "11320" 
-  "11316" -> "11310" 
-  "11324" -> "11330" 
-  "11324" -> "11340" 
-  "11349" -> "11347" 
-  "11352" -> "11357" 
-  "11352" -> "11366" 
-  "11363" -> "11361" 
-  "11370" -> "11368" 
-  "11378" -> "11385" 
-  "11378" -> "11393" 
-  "11381" -> "11378" 
-  "11406" -> "11413" 
-  "11251" -> "11250" 
-  "11255" -> "11262" 
-  "11262" -> "11413" 
-  "11273" -> "11271" 
-  "11279" -> "11277" 
-  "11282" -> "11280" 
-  "11290" -> "11289" 
-  "11306" -> "11305" 
-  "11313" -> "11311" 
-  "11317" -> "11316" 
-  "11327" -> "11349" 
-  "11356" -> "11366" 
-  "11364" -> "11363" 
-  "11375" -> "11378" 
-  "11384" -> "11381" 
-  "11398" -> "11408" 
-  "11398" -> "11403" 
-  "11407" -> "11406" 
-  "11256" -> "11255" 
-  "11292" -> "11290" 
-  "11307" -> "11306" 
-  "11315" -> "11313" 
-  "11318" -> "11321" 
-  "11321" -> "11317" 
-  "11328" -> "11334" 
-  "11331" -> "11327" 
-  "11337" -> "11349" 
-  "11357" -> "11356" 
-  "11366" -> "11364" 
-  "11385" -> "11391" 
-  "11388" -> "11384" 
-  "11402" -> "11408" 
-  "11408" -> "11412" 
-  "11409" -> "11407" 
-  "11257" -> "11259" 
-  "11259" -> "11256" 
+digraph "GetArrayLength" {  
+"11282" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_array))<SUB>2151</SUB>> ]
+"11301" [label = <(soa,soa(env))<SUB>2152</SUB>> ]
+"11303" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; obj = soa.Decode&lt;mirror::Object&gt;(java_array))<SUB>2153</SUB>> ]
+"11346" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Array&gt; array = obj-&gt;AsArray())<SUB>2158</SUB>> ]
+"11358" [label = <(RETURN,return array-&gt;GetLength();,return array-&gt;GetLength();)<SUB>2159</SUB>> ]
+"11304" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; obj)<SUB>2153</SUB>> ]
+"11311" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(java_array))<SUB>2153</SUB>> ]
+"11321" [label = <(UNLIKELY,UNLIKELY(!obj-&gt;IsArrayInstance()))<SUB>2154</SUB>> ]
+"11347" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Array&gt; array)<SUB>2158</SUB>> ]
+"11354" [label = <(AsArray,obj-&gt;AsArray())<SUB>2158</SUB>> ]
+"11359" [label = <(GetLength,array-&gt;GetLength())<SUB>2159</SUB>> ]
+"11305" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>2153</SUB>> ]
+"11312" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>2153</SUB>> ]
+"11322" [label = <(&lt;operator&gt;.logicalNot,!obj-&gt;IsArrayInstance())<SUB>2154</SUB>> ]
+"11328" [label = <(JniAbortF,soa.Vm()-&gt;JniAbortF(&quot;GetArrayLength&quot;, &quot;not an array: %s&quot;, obj-&gt;PrettyTypeOf().c_str()))<SUB>2155</SUB>> ]
+"11344" [label = <(RETURN,return 0;,return 0;)<SUB>2156</SUB>> ]
+"11348" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Array)<SUB>2158</SUB>> ]
+"11355" [label = <(&lt;operator&gt;.indirectFieldAccess,obj-&gt;AsArray)<SUB>2158</SUB>> ]
+"11360" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetLength)<SUB>2159</SUB>> ]
+"11286" [label = <(UNLIKELY,UNLIKELY((java_array) == nullptr))<SUB>2151</SUB>> ]
+"11307" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2153</SUB>> ]
+"11313" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2153</SUB>> ]
+"11316" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2153</SUB>> ]
+"11323" [label = <(IsArrayInstance,obj-&gt;IsArrayInstance())<SUB>2154</SUB>> ]
+"11329" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Vm()-&gt;JniAbortF)<SUB>2155</SUB>> ]
+"11337" [label = <(c_str,obj-&gt;PrettyTypeOf().c_str())<SUB>2155</SUB>> ]
+"11350" [label = <(&lt;operator&gt;.fieldAccess,mirror::Array)<SUB>2158</SUB>> ]
+"11357" [label = <(FIELD_IDENTIFIER,AsArray,AsArray)<SUB>2158</SUB>> ]
+"11362" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>2159</SUB>> ]
+"11287" [label = <(&lt;operator&gt;.equals,(java_array) == nullptr)<SUB>2151</SUB>> ]
+"11291" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_array),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_array == null&quot;))<SUB>2151</SUB>> ]
+"11298" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_array),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_array))<SUB>2151</SUB>> ]
+"11309" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2153</SUB>> ]
+"11315" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2153</SUB>> ]
+"11318" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2153</SUB>> ]
+"11324" [label = <(&lt;operator&gt;.indirectFieldAccess,obj-&gt;IsArrayInstance)<SUB>2154</SUB>> ]
+"11330" [label = <(Vm,soa.Vm())<SUB>2155</SUB>> ]
+"11334" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2155</SUB>> ]
+"11338" [label = <(&lt;operator&gt;.fieldAccess,obj-&gt;PrettyTypeOf().c_str)<SUB>2155</SUB>> ]
+"11352" [label = <(FIELD_IDENTIFIER,Array,Array)<SUB>2158</SUB>> ]
+"11292" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2151</SUB>> ]
+"11326" [label = <(FIELD_IDENTIFIER,IsArrayInstance,IsArrayInstance)<SUB>2154</SUB>> ]
+"11331" [label = <(&lt;operator&gt;.fieldAccess,soa.Vm)<SUB>2155</SUB>> ]
+"11339" [label = <(PrettyTypeOf,obj-&gt;PrettyTypeOf())<SUB>2155</SUB>> ]
+"11343" [label = <(FIELD_IDENTIFIER,c_str,c_str)<SUB>2155</SUB>> ]
+"11293" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2151</SUB>> ]
+"11295" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2151</SUB>> ]
+"11333" [label = <(FIELD_IDENTIFIER,Vm,Vm)<SUB>2155</SUB>> ]
+"11340" [label = <(&lt;operator&gt;.indirectFieldAccess,obj-&gt;PrettyTypeOf)<SUB>2155</SUB>> ]
+"11342" [label = <(FIELD_IDENTIFIER,PrettyTypeOf,PrettyTypeOf)<SUB>2155</SUB>> ]
+"11278" [label = <(METHOD,GetArrayLength)<SUB>2150</SUB>> ]
+"11363" [label = <(METHOD_RETURN,jsize)<SUB>2150</SUB>> ]
+  "11282" -> "11287" 
+  "11282" -> "11301" 
+  "11301" -> "11309" 
+  "11303" -> "11326" 
+  "11346" -> "11362" 
+  "11358" -> "11363" 
+  "11304" -> "11315" 
+  "11311" -> "11303" 
+  "11321" -> "11333" 
+  "11321" -> "11352" 
+  "11347" -> "11357" 
+  "11354" -> "11346" 
+  "11359" -> "11358" 
+  "11305" -> "11304" 
+  "11312" -> "11311" 
+  "11322" -> "11321" 
+  "11328" -> "11344" 
+  "11344" -> "11363" 
+  "11348" -> "11347" 
+  "11355" -> "11354" 
+  "11360" -> "11359" 
+  "11286" -> "11293" 
+  "11286" -> "11301" 
+  "11307" -> "11305" 
+  "11313" -> "11318" 
+  "11316" -> "11312" 
+  "11323" -> "11322" 
+  "11329" -> "11342" 
+  "11337" -> "11328" 
+  "11350" -> "11348" 
+  "11357" -> "11355" 
+  "11362" -> "11360" 
+  "11287" -> "11286" 
+  "11291" -> "11298" 
+  "11298" -> "11363" 
   "11309" -> "11307" 
-  "11320" -> "11318" 
-  "11330" -> "11328" 
-  "11332" -> "11331" 
-  "11338" -> "11344" 
-  "11341" -> "11337" 
-  "11389" -> "11388" 
-  "11403" -> "11402" 
-  "11410" -> "11409" 
-  "11334" -> "11332" 
-  "11340" -> "11338" 
-  "11342" -> "11341" 
-  "11391" -> "11389" 
-  "11412" -> "11410" 
-  "11344" -> "11342" 
-  "11241" -> "11246" 
+  "11315" -> "11313" 
+  "11318" -> "11316" 
+  "11324" -> "11323" 
+  "11330" -> "11334" 
+  "11334" -> "11329" 
+  "11338" -> "11337" 
+  "11352" -> "11350" 
+  "11292" -> "11291" 
+  "11326" -> "11324" 
+  "11331" -> "11330" 
+  "11339" -> "11343" 
+  "11343" -> "11338" 
+  "11293" -> "11295" 
+  "11295" -> "11292" 
+  "11333" -> "11331" 
+  "11340" -> "11339" 
+  "11342" -> "11340" 
+  "11278" -> "11282" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/209-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/209-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/209-cfg.dot	2023-06-07 19:35:28.357384336 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/209-cfg.dot	2023-06-07 19:35:34.877383767 +0330
@@ -1,126 +1,75 @@
-digraph "ReleaseStringCritical" {  
-"11420" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string))<SUB>2237</SUB>> ]
-"11438" [label = <(soa,soa(env))<SUB>2238</SUB>> ]
-"11441" [label = <(&lt;operator&gt;.assignment,* heap = Runtime::Current()-&gt;GetHeap())<SUB>2239</SUB>> ]
-"11450" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::String&gt; s = soa.Decode&lt;mirror::String&gt;(java_string))<SUB>2240</SUB>> ]
-"11443" [label = <(GetHeap,Runtime::Current()-&gt;GetHeap())<SUB>2239</SUB>> ]
-"11451" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::String&gt; s)<SUB>2240</SUB>> ]
-"11458" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::String&gt;(java_string))<SUB>2240</SUB>> ]
-"11468" [label = <(IsMovableObject,heap-&gt;IsMovableObject(s))<SUB>2241</SUB>> ]
-"11497" [label = <(&lt;operator&gt;.logicalOr,s-&gt;IsCompressed() || (s-&gt;IsCompressed() == false &amp;&amp; s-&gt;GetValue() != chars))<SUB>2248</SUB>> ]
-"11444" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetHeap)<SUB>2239</SUB>> ]
-"11452" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::String)<SUB>2240</SUB>> ]
-"11459" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::String)<SUB>2240</SUB>> ]
-"11469" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;IsMovableObject)<SUB>2241</SUB>> ]
-"11498" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>2248</SUB>> ]
-"11502" [label = <(&lt;operator&gt;.logicalAnd,s-&gt;IsCompressed() == false &amp;&amp; s-&gt;GetValue() != chars)<SUB>2248</SUB>> ]
-"11516" [label = <(&lt;operator&gt;.delete,delete[] chars)<SUB>2249</SUB>> ]
-"11424" [label = <(UNLIKELY,UNLIKELY((java_string) == nullptr))<SUB>2237</SUB>> ]
-"11445" [label = <(Runtime::Current,Runtime::Current())<SUB>2239</SUB>> ]
-"11449" [label = <(FIELD_IDENTIFIER,GetHeap,GetHeap)<SUB>2239</SUB>> ]
-"11454" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>2240</SUB>> ]
-"11460" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2240</SUB>> ]
-"11463" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>2240</SUB>> ]
-"11471" [label = <(FIELD_IDENTIFIER,IsMovableObject,IsMovableObject)<SUB>2241</SUB>> ]
-"11475" [label = <(&lt;operator&gt;.logicalNot,!kUseReadBarrier)<SUB>2242</SUB>> ]
-"11499" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>2248</SUB>> ]
-"11503" [label = <(&lt;operator&gt;.equals,s-&gt;IsCompressed() == false)<SUB>2248</SUB>> ]
-"11509" [label = <(&lt;operator&gt;.notEquals,s-&gt;GetValue() != chars)<SUB>2248</SUB>> ]
-"11425" [label = <(&lt;operator&gt;.equals,(java_string) == nullptr)<SUB>2237</SUB>> ]
-"11429" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_string == null&quot;))<SUB>2237</SUB>> ]
-"11436" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string))<SUB>2237</SUB>> ]
-"11446" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>2239</SUB>> ]
-"11456" [label = <(FIELD_IDENTIFIER,String,String)<SUB>2240</SUB>> ]
-"11462" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2240</SUB>> ]
-"11465" [label = <(FIELD_IDENTIFIER,String,String)<SUB>2240</SUB>> ]
-"11478" [label = <(DecrementDisableMovingGC,heap-&gt;DecrementDisableMovingGC(soa.Self()))<SUB>2243</SUB>> ]
-"11501" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>2248</SUB>> ]
-"11504" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>2248</SUB>> ]
-"11510" [label = <(GetValue,s-&gt;GetValue())<SUB>2248</SUB>> ]
-"11430" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2237</SUB>> ]
-"11448" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>2239</SUB>> ]
-"11479" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;DecrementDisableMovingGC)<SUB>2243</SUB>> ]
-"11482" [label = <(Self,soa.Self())<SUB>2243</SUB>> ]
-"11488" [label = <(DecrementDisableThreadFlip,heap-&gt;DecrementDisableThreadFlip(soa.Self()))<SUB>2245</SUB>> ]
-"11505" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>2248</SUB>> ]
-"11511" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetValue)<SUB>2248</SUB>> ]
-"11431" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2237</SUB>> ]
-"11433" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2237</SUB>> ]
-"11481" [label = <(FIELD_IDENTIFIER,DecrementDisableMovingGC,DecrementDisableMovingGC)<SUB>2243</SUB>> ]
-"11483" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>2243</SUB>> ]
-"11489" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;DecrementDisableThreadFlip)<SUB>2245</SUB>> ]
-"11492" [label = <(Self,soa.Self())<SUB>2245</SUB>> ]
-"11507" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>2248</SUB>> ]
-"11513" [label = <(FIELD_IDENTIFIER,GetValue,GetValue)<SUB>2248</SUB>> ]
-"11485" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>2243</SUB>> ]
-"11491" [label = <(FIELD_IDENTIFIER,DecrementDisableThreadFlip,DecrementDisableThreadFlip)<SUB>2245</SUB>> ]
-"11493" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>2245</SUB>> ]
-"11495" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>2245</SUB>> ]
-"11415" [label = <(METHOD,ReleaseStringCritical)<SUB>2234</SUB>> ]
-"11518" [label = <(METHOD_RETURN,void)<SUB>2234</SUB>> ]
-  "11420" -> "11425" 
-  "11420" -> "11438" 
-  "11438" -> "11448" 
-  "11441" -> "11456" 
-  "11450" -> "11471" 
-  "11443" -> "11441" 
-  "11451" -> "11462" 
-  "11458" -> "11450" 
-  "11468" -> "11475" 
-  "11468" -> "11501" 
-  "11497" -> "11518" 
-  "11497" -> "11516" 
-  "11444" -> "11443" 
-  "11452" -> "11451" 
-  "11459" -> "11458" 
-  "11469" -> "11468" 
-  "11498" -> "11497" 
-  "11498" -> "11507" 
-  "11502" -> "11497" 
-  "11516" -> "11518" 
-  "11424" -> "11431" 
-  "11424" -> "11438" 
-  "11445" -> "11449" 
-  "11449" -> "11444" 
-  "11454" -> "11452" 
-  "11460" -> "11465" 
-  "11463" -> "11459" 
-  "11471" -> "11469" 
-  "11475" -> "11481" 
-  "11475" -> "11491" 
-  "11499" -> "11498" 
-  "11503" -> "11502" 
-  "11503" -> "11513" 
-  "11509" -> "11502" 
-  "11425" -> "11424" 
-  "11429" -> "11436" 
-  "11436" -> "11518" 
-  "11446" -> "11445" 
-  "11456" -> "11454" 
-  "11462" -> "11460" 
-  "11465" -> "11463" 
-  "11478" -> "11501" 
-  "11501" -> "11499" 
-  "11504" -> "11503" 
-  "11510" -> "11509" 
-  "11430" -> "11429" 
-  "11448" -> "11446" 
-  "11479" -> "11485" 
-  "11482" -> "11478" 
-  "11488" -> "11501" 
-  "11505" -> "11504" 
-  "11511" -> "11510" 
-  "11431" -> "11433" 
-  "11433" -> "11430" 
-  "11481" -> "11479" 
-  "11483" -> "11482" 
-  "11489" -> "11495" 
-  "11492" -> "11488" 
-  "11507" -> "11505" 
-  "11513" -> "11511" 
-  "11485" -> "11483" 
-  "11491" -> "11489" 
-  "11493" -> "11492" 
-  "11495" -> "11493" 
-  "11415" -> "11420" 
+digraph "GetObjectArrayElement" {  
+"11370" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_array))<SUB>2163</SUB>> ]
+"11389" [label = <(soa,soa(env))<SUB>2164</SUB>> ]
+"11391" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::ObjectArray&lt;mirror::Object&gt;&gt; array =\012        soa.Decode&lt;mirror::ObjectArray&lt;mirror::Object&gt;&gt;(java_array))<SUB>2165</SUB>> ]
+"11416" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(array-&gt;Get(index));,return soa.AddLocalReference&lt;jobject&gt;(array-&gt;Get(index));)<SUB>2167</SUB>> ]
+"11392" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::ObjectArray&lt;mirror::Object&gt;&gt; array)<SUB>2165</SUB>> ]
+"11403" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::ObjectArray&lt;mirror::Object&gt;&gt;(java_array))<SUB>2166</SUB>> ]
+"11417" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(array-&gt;Get(index)))<SUB>2167</SUB>> ]
+"11393" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::ObjectArray)<SUB>2165</SUB>> ]
+"11398" [label = <(&lt;operator&gt;.arithmeticShiftRight,mirror::Object&gt;&gt; array)<SUB>2165</SUB>> ]
+"11404" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::ObjectArray)<SUB>2166</SUB>> ]
+"11411" [label = <(&lt;operator&gt;.arithmeticShiftRight,mirror::Object&gt;&gt;(java_array))<SUB>2166</SUB>> ]
+"11418" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>2167</SUB>> ]
+"11423" [label = <(Get,array-&gt;Get(index))<SUB>2167</SUB>> ]
+"11374" [label = <(UNLIKELY,UNLIKELY((java_array) == nullptr))<SUB>2163</SUB>> ]
+"11395" [label = <(&lt;operator&gt;.fieldAccess,mirror::ObjectArray)<SUB>2165</SUB>> ]
+"11399" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2165</SUB>> ]
+"11405" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2166</SUB>> ]
+"11408" [label = <(&lt;operator&gt;.fieldAccess,mirror::ObjectArray)<SUB>2166</SUB>> ]
+"11412" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2166</SUB>> ]
+"11419" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>2167</SUB>> ]
+"11424" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;Get)<SUB>2167</SUB>> ]
+"11375" [label = <(&lt;operator&gt;.equals,(java_array) == nullptr)<SUB>2163</SUB>> ]
+"11379" [label = <(CHECK_NON_NULL_ARGUMENT(java_array),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_array == null&quot;))<SUB>2163</SUB>> ]
+"11386" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_array),CHECK_NON_NULL_ARGUMENT(java_array))<SUB>2163</SUB>> ]
+"11397" [label = <(FIELD_IDENTIFIER,ObjectArray,ObjectArray)<SUB>2165</SUB>> ]
+"11401" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2165</SUB>> ]
+"11407" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2166</SUB>> ]
+"11410" [label = <(FIELD_IDENTIFIER,ObjectArray,ObjectArray)<SUB>2166</SUB>> ]
+"11414" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2166</SUB>> ]
+"11421" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>2167</SUB>> ]
+"11426" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>2167</SUB>> ]
+"11380" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2163</SUB>> ]
+"11381" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2163</SUB>> ]
+"11383" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2163</SUB>> ]
+"11365" [label = <(METHOD,GetObjectArrayElement)<SUB>2162</SUB>> ]
+"11428" [label = <(METHOD_RETURN,jobject)<SUB>2162</SUB>> ]
+  "11370" -> "11375" 
+  "11370" -> "11389" 
+  "11389" -> "11397" 
+  "11391" -> "11421" 
+  "11416" -> "11428" 
+  "11392" -> "11407" 
+  "11403" -> "11391" 
+  "11417" -> "11416" 
+  "11393" -> "11401" 
+  "11398" -> "11392" 
+  "11404" -> "11414" 
+  "11411" -> "11403" 
+  "11418" -> "11426" 
+  "11423" -> "11417" 
+  "11374" -> "11381" 
+  "11374" -> "11389" 
+  "11395" -> "11393" 
+  "11399" -> "11398" 
+  "11405" -> "11410" 
+  "11408" -> "11404" 
+  "11412" -> "11411" 
+  "11419" -> "11418" 
+  "11424" -> "11423" 
+  "11375" -> "11374" 
+  "11379" -> "11386" 
+  "11386" -> "11428" 
+  "11397" -> "11395" 
+  "11401" -> "11399" 
+  "11407" -> "11405" 
+  "11410" -> "11408" 
+  "11414" -> "11412" 
+  "11421" -> "11419" 
+  "11426" -> "11424" 
+  "11380" -> "11379" 
+  "11381" -> "11383" 
+  "11383" -> "11380" 
+  "11365" -> "11370" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/21-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/21-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/21-cfg.dot	2023-06-07 19:35:28.217384348 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/21-cfg.dot	2023-06-07 19:35:34.747383777 +0330
@@ -1,61 +1,63 @@
-digraph "IsWhitelistedNativeCaller" {  
-"566" [label = <(RETURN,return false;,return false;)<SUB>335</SUB>> ]
-"511" [label = <(&lt;operator&gt;.logicalNot,!art::kIsTargetBuild)<SUB>322</SUB>> ]
-"524" [label = <(&lt;operator&gt;.lessThan,i &lt; kMaxReturnAddressDepth)<SUB>325</SUB>> ]
-"527" [label = <(&lt;operator&gt;.preIncrement,++i)<SUB>325</SUB>> ]
-"512" [label = <(&lt;operator&gt;.fieldAccess,art::kIsTargetBuild)<SUB>322</SUB>> ]
-"516" [label = <(RETURN,return false;,return false;)<SUB>323</SUB>> ]
-"521" [label = <(&lt;operator&gt;.assignment,i = 0)<SUB>325</SUB>> ]
-"531" [label = <(&lt;operator&gt;.assignment,* return_address = GetReturnAddress(i))<SUB>326</SUB>> ]
-"543" [label = <(&lt;operator&gt;.assignment,kind = CodeRangeCache::GetSingleton().GetSharedObjectKind(return_address))<SUB>330</SUB>> ]
-"514" [label = <(FIELD_IDENTIFIER,kIsTargetBuild,kIsTargetBuild)<SUB>322</SUB>> ]
-"533" [label = <(GetReturnAddress,GetReturnAddress(i))<SUB>326</SUB>> ]
-"536" [label = <(&lt;operator&gt;.equals,return_address == nullptr)<SUB>327</SUB>> ]
-"545" [label = <(GetSharedObjectKind,CodeRangeCache::GetSingleton().GetSharedObjectKind(return_address))<SUB>330</SUB>> ]
-"554" [label = <(&lt;operator&gt;.notEquals,kind != SharedObjectKind::kRuntime)<SUB>331</SUB>> ]
-"540" [label = <(RETURN,return false;,return false;)<SUB>328</SUB>> ]
-"546" [label = <(&lt;operator&gt;.fieldAccess,CodeRangeCache::GetSingleton().GetSharedObjectKind)<SUB>330</SUB>> ]
-"556" [label = <(&lt;operator&gt;.fieldAccess,SharedObjectKind::kRuntime)<SUB>331</SUB>> ]
-"560" [label = <(RETURN,return kind == SharedObjectKind::kApexModule;,return kind == SharedObjectKind::kApexModule;)<SUB>332</SUB>> ]
-"547" [label = <(CodeRangeCache::GetSingleton,CodeRangeCache::GetSingleton())<SUB>330</SUB>> ]
-"551" [label = <(FIELD_IDENTIFIER,GetSharedObjectKind,GetSharedObjectKind)<SUB>330</SUB>> ]
-"558" [label = <(FIELD_IDENTIFIER,kRuntime,kRuntime)<SUB>331</SUB>> ]
-"561" [label = <(&lt;operator&gt;.equals,kind == SharedObjectKind::kApexModule)<SUB>332</SUB>> ]
-"548" [label = <(&lt;operator&gt;.fieldAccess,CodeRangeCache::GetSingleton)<SUB>330</SUB>> ]
-"563" [label = <(&lt;operator&gt;.fieldAccess,SharedObjectKind::kApexModule)<SUB>332</SUB>> ]
-"550" [label = <(FIELD_IDENTIFIER,GetSingleton,GetSingleton)<SUB>330</SUB>> ]
-"565" [label = <(FIELD_IDENTIFIER,kApexModule,kApexModule)<SUB>332</SUB>> ]
-"508" [label = <(METHOD,IsWhitelistedNativeCaller)<SUB>321</SUB>> ]
-"568" [label = <(METHOD_RETURN,bool)<SUB>321</SUB>> ]
-  "566" -> "568" 
-  "511" -> "516" 
-  "511" -> "521" 
-  "524" -> "533" 
-  "524" -> "566" 
-  "527" -> "524" 
-  "512" -> "511" 
-  "516" -> "568" 
-  "521" -> "524" 
-  "531" -> "536" 
-  "543" -> "558" 
-  "514" -> "512" 
-  "533" -> "531" 
-  "536" -> "540" 
-  "536" -> "550" 
-  "545" -> "543" 
-  "554" -> "565" 
-  "554" -> "527" 
-  "540" -> "568" 
-  "546" -> "545" 
-  "556" -> "554" 
-  "560" -> "568" 
-  "547" -> "551" 
-  "551" -> "546" 
-  "558" -> "556" 
-  "561" -> "560" 
-  "548" -> "547" 
-  "563" -> "561" 
-  "550" -> "548" 
-  "565" -> "563" 
-  "508" -> "514" 
+digraph "NormalizeJniClassDescriptor" {  
+"494" [label = <(RETURN,return result;,return result;)<SUB>384</SUB>> ]
+"437" [label = <(&lt;operator&gt;.equals,name[0] == '[')<SUB>371</SUB>> ]
+"458" [label = <(&lt;operator&gt;.notEquals,result.find('.') != std::string::npos)<SUB>379</SUB>> ]
+"438" [label = <(&lt;operator&gt;.indirectIndexAccess,name[0])<SUB>371</SUB>> ]
+"443" [label = <(&lt;operator&gt;.assignment,result = name)<SUB>372</SUB>> ]
+"459" [label = <(find,result.find('.'))<SUB>379</SUB>> ]
+"464" [label = <(&lt;operator&gt;.fieldAccess,std::string::npos)<SUB>379</SUB>> ]
+"470" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;Call to JNI FindClass with dots in name: &quot;\012 &lt;&lt; &quot;\&quot;&quot; &lt;&lt; name &lt;&lt; &quot;\&quot;&quot;)<SUB>380</SUB>> ]
+"480" [label = <(std::replace,std::replace(result.begin(), result.end(), '.', '/'))<SUB>382</SUB>> ]
+"448" [label = <(&lt;operator&gt;.assignmentPlus,result += 'L')<SUB>374</SUB>> ]
+"451" [label = <(&lt;operator&gt;.assignmentPlus,result += name)<SUB>375</SUB>> ]
+"454" [label = <(&lt;operator&gt;.assignmentPlus,result += ';')<SUB>376</SUB>> ]
+"460" [label = <(&lt;operator&gt;.fieldAccess,result.find)<SUB>379</SUB>> ]
+"465" [label = <(&lt;operator&gt;.fieldAccess,std::string)<SUB>379</SUB>> ]
+"468" [label = <(FIELD_IDENTIFIER,npos,npos)<SUB>379</SUB>> ]
+"471" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;Call to JNI FindClass with dots in name: &quot;\012 &lt;&lt; &quot;\&quot;&quot; &lt;&lt; name)<SUB>380</SUB>> ]
+"481" [label = <(&lt;operator&gt;.fieldAccess,std::replace)<SUB>382</SUB>> ]
+"484" [label = <(begin,result.begin())<SUB>382</SUB>> ]
+"488" [label = <(end,result.end())<SUB>382</SUB>> ]
+"462" [label = <(FIELD_IDENTIFIER,find,find)<SUB>379</SUB>> ]
+"472" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;Call to JNI FindClass with dots in name: &quot;\012 &lt;&lt; &quot;\&quot;&quot;)<SUB>380</SUB>> ]
+"483" [label = <(FIELD_IDENTIFIER,replace,replace)<SUB>382</SUB>> ]
+"485" [label = <(&lt;operator&gt;.fieldAccess,result.begin)<SUB>382</SUB>> ]
+"489" [label = <(&lt;operator&gt;.fieldAccess,result.end)<SUB>382</SUB>> ]
+"473" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;Call to JNI FindClass with dots in name: &quot;)<SUB>380</SUB>> ]
+"487" [label = <(FIELD_IDENTIFIER,begin,begin)<SUB>382</SUB>> ]
+"491" [label = <(FIELD_IDENTIFIER,end,end)<SUB>382</SUB>> ]
+"474" [label = <(LOG,LOG(WARNING))<SUB>380</SUB>> ]
+"432" [label = <(METHOD,NormalizeJniClassDescriptor)<SUB>368</SUB>> ]
+"496" [label = <(METHOD_RETURN,string)<SUB>368</SUB>> ]
+  "494" -> "496" 
+  "437" -> "443" 
+  "437" -> "448" 
+  "458" -> "474" 
+  "458" -> "494" 
+  "438" -> "437" 
+  "443" -> "462" 
+  "459" -> "465" 
+  "464" -> "458" 
+  "470" -> "483" 
+  "480" -> "494" 
+  "448" -> "451" 
+  "451" -> "454" 
+  "454" -> "462" 
+  "460" -> "459" 
+  "465" -> "468" 
+  "468" -> "464" 
+  "471" -> "470" 
+  "481" -> "487" 
+  "484" -> "491" 
+  "488" -> "480" 
+  "462" -> "460" 
+  "472" -> "471" 
+  "483" -> "481" 
+  "485" -> "484" 
+  "489" -> "488" 
+  "473" -> "472" 
+  "487" -> "485" 
+  "491" -> "489" 
+  "474" -> "473" 
+  "432" -> "438" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/210-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/210-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/210-cfg.dot	2023-06-07 19:35:28.357384336 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/210-cfg.dot	2023-06-07 19:35:34.887383765 +0330
@@ -1,103 +1,93 @@
-digraph "GetStringUTFChars" {  
-"11542" [label = <(soa,soa(env))<SUB>2260</SUB>> ]
-"11544" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::String&gt; s = soa.Decode&lt;mirror::String&gt;(java_string))<SUB>2261</SUB>> ]
-"11562" [label = <(&lt;operator&gt;.assignment,byte_count = s-&gt;GetUtfLength())<SUB>2262</SUB>> ]
-"11569" [label = <(&lt;operator&gt;.assignment,* bytes = new char[byte_count + 1])<SUB>2263</SUB>> ]
-"11573" [label = <(CHECK,CHECK(bytes != nullptr))<SUB>2264</SUB>> ]
-"11621" [label = <(&lt;operator&gt;.assignment,bytes[byte_count] = '\0')<SUB>2273</SUB>> ]
-"11626" [label = <(RETURN,return bytes;,return bytes;)<SUB>2274</SUB>> ]
-"11526" [label = <(&lt;operator&gt;.equals,java_string == nullptr)<SUB>2254</SUB>> ]
-"11533" [label = <(&lt;operator&gt;.notEquals,is_copy != nullptr)<SUB>2257</SUB>> ]
-"11545" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::String&gt; s)<SUB>2261</SUB>> ]
-"11552" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::String&gt;(java_string))<SUB>2261</SUB>> ]
-"11564" [label = <(GetUtfLength,s-&gt;GetUtfLength())<SUB>2262</SUB>> ]
-"11571" [label = <(&lt;operator&gt;.new,new char[byte_count + 1])<SUB>2263</SUB>> ]
-"11574" [label = <(&lt;operator&gt;.notEquals,bytes != nullptr)<SUB>2264</SUB>> ]
-"11578" [label = <(IsCompressed,s-&gt;IsCompressed())<SUB>2265</SUB>> ]
-"11622" [label = <(&lt;operator&gt;.indirectIndexAccess,bytes[byte_count])<SUB>2273</SUB>> ]
-"11530" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2255</SUB>> ]
-"11537" [label = <(&lt;operator&gt;.assignment,*is_copy = JNI_TRUE)<SUB>2258</SUB>> ]
-"11546" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::String)<SUB>2261</SUB>> ]
-"11553" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::String)<SUB>2261</SUB>> ]
-"11565" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetUtfLength)<SUB>2262</SUB>> ]
-"11579" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;IsCompressed)<SUB>2265</SUB>> ]
-"11538" [label = <(&lt;operator&gt;.indirection,*is_copy)<SUB>2258</SUB>> ]
-"11548" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>2261</SUB>> ]
-"11554" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2261</SUB>> ]
-"11557" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>2261</SUB>> ]
-"11567" [label = <(FIELD_IDENTIFIER,GetUtfLength,GetUtfLength)<SUB>2262</SUB>> ]
-"11581" [label = <(FIELD_IDENTIFIER,IsCompressed,IsCompressed)<SUB>2265</SUB>> ]
-"11589" [label = <(&lt;operator&gt;.lessThan,i &lt; byte_count)<SUB>2266</SUB>> ]
-"11592" [label = <(&lt;operator&gt;.preIncrement,++i)<SUB>2266</SUB>> ]
-"11607" [label = <(&lt;operator&gt;.assignment,* chars = s-&gt;GetValue())<SUB>2270</SUB>> ]
-"11613" [label = <(ConvertUtf16ToModifiedUtf8,ConvertUtf16ToModifiedUtf8(bytes, byte_count, chars, s-&gt;GetLength()))<SUB>2271</SUB>> ]
-"11550" [label = <(FIELD_IDENTIFIER,String,String)<SUB>2261</SUB>> ]
-"11556" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2261</SUB>> ]
-"11559" [label = <(FIELD_IDENTIFIER,String,String)<SUB>2261</SUB>> ]
-"11586" [label = <(&lt;operator&gt;.assignment,i = 0)<SUB>2266</SUB>> ]
-"11595" [label = <(&lt;operator&gt;.assignment,bytes[i] = s-&gt;CharAt(i))<SUB>2267</SUB>> ]
-"11609" [label = <(GetValue,s-&gt;GetValue())<SUB>2270</SUB>> ]
-"11617" [label = <(GetLength,s-&gt;GetLength())<SUB>2271</SUB>> ]
-"11596" [label = <(&lt;operator&gt;.indirectIndexAccess,bytes[i])<SUB>2267</SUB>> ]
-"11599" [label = <(CharAt,s-&gt;CharAt(i))<SUB>2267</SUB>> ]
-"11610" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetValue)<SUB>2270</SUB>> ]
-"11618" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;GetLength)<SUB>2271</SUB>> ]
-"11600" [label = <(&lt;operator&gt;.indirectFieldAccess,s-&gt;CharAt)<SUB>2267</SUB>> ]
-"11612" [label = <(FIELD_IDENTIFIER,GetValue,GetValue)<SUB>2270</SUB>> ]
-"11620" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>2271</SUB>> ]
-"11602" [label = <(FIELD_IDENTIFIER,CharAt,CharAt)<SUB>2267</SUB>> ]
-"11520" [label = <(METHOD,GetStringUTFChars)<SUB>2253</SUB>> ]
-"11628" [label = <(METHOD_RETURN,const char*)<SUB>2253</SUB>> ]
-  "11542" -> "11550" 
-  "11544" -> "11567" 
-  "11562" -> "11571" 
-  "11569" -> "11574" 
-  "11573" -> "11581" 
-  "11621" -> "11626" 
-  "11626" -> "11628" 
-  "11526" -> "11530" 
-  "11526" -> "11533" 
-  "11533" -> "11538" 
-  "11533" -> "11542" 
-  "11545" -> "11556" 
-  "11552" -> "11544" 
-  "11564" -> "11562" 
-  "11571" -> "11569" 
-  "11574" -> "11573" 
-  "11578" -> "11586" 
-  "11578" -> "11612" 
-  "11622" -> "11621" 
-  "11530" -> "11628" 
-  "11537" -> "11542" 
-  "11546" -> "11545" 
-  "11553" -> "11552" 
-  "11565" -> "11564" 
-  "11579" -> "11578" 
-  "11538" -> "11537" 
-  "11548" -> "11546" 
-  "11554" -> "11559" 
-  "11557" -> "11553" 
-  "11567" -> "11565" 
-  "11581" -> "11579" 
-  "11589" -> "11596" 
-  "11589" -> "11622" 
-  "11592" -> "11589" 
-  "11607" -> "11620" 
-  "11613" -> "11622" 
-  "11550" -> "11548" 
-  "11556" -> "11554" 
-  "11559" -> "11557" 
-  "11586" -> "11589" 
-  "11595" -> "11592" 
-  "11609" -> "11607" 
-  "11617" -> "11613" 
-  "11596" -> "11602" 
-  "11599" -> "11595" 
-  "11610" -> "11609" 
-  "11618" -> "11617" 
-  "11600" -> "11599" 
-  "11612" -> "11610" 
-  "11620" -> "11618" 
-  "11602" -> "11600" 
-  "11520" -> "11526" 
+digraph "SetObjectArrayElement" {  
+"11436" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>2172</SUB>> ]
+"11454" [label = <(soa,soa(env))<SUB>2173</SUB>> ]
+"11456" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::ObjectArray&lt;mirror::Object&gt;&gt; array =\012        soa.Decode&lt;mirror::ObjectArray&lt;mirror::Object&gt;&gt;(java_array))<SUB>2174</SUB>> ]
+"11481" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; value = soa.Decode&lt;mirror::Object&gt;(java_value))<SUB>2176</SUB>> ]
+"11498" [label = <(&lt;operator&gt;.greaterThan,array-&gt;Set&lt;false&gt;(index, value))<SUB>2177</SUB>> ]
+"11457" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::ObjectArray&lt;mirror::Object&gt;&gt; array)<SUB>2174</SUB>> ]
+"11468" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::ObjectArray&lt;mirror::Object&gt;&gt;(java_array))<SUB>2175</SUB>> ]
+"11482" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; value)<SUB>2176</SUB>> ]
+"11489" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(java_value))<SUB>2176</SUB>> ]
+"11499" [label = <(&lt;operator&gt;.lessThan,array-&gt;Set&lt;false)<SUB>2177</SUB>> ]
+"11504" [label = <(&lt;operator&gt;.bracketedPrimary,(index, value))<SUB>2177</SUB>> ]
+"11458" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::ObjectArray)<SUB>2174</SUB>> ]
+"11463" [label = <(&lt;operator&gt;.arithmeticShiftRight,mirror::Object&gt;&gt; array)<SUB>2174</SUB>> ]
+"11469" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::ObjectArray)<SUB>2175</SUB>> ]
+"11476" [label = <(&lt;operator&gt;.arithmeticShiftRight,mirror::Object&gt;&gt;(java_array))<SUB>2175</SUB>> ]
+"11483" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>2176</SUB>> ]
+"11490" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>2176</SUB>> ]
+"11500" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;Set)<SUB>2177</SUB>> ]
+"11505" [label = <(&lt;operator&gt;.expressionList,index, value)<SUB>2177</SUB>> ]
+"11440" [label = <(UNLIKELY,UNLIKELY((java_array) == nullptr))<SUB>2172</SUB>> ]
+"11460" [label = <(&lt;operator&gt;.fieldAccess,mirror::ObjectArray)<SUB>2174</SUB>> ]
+"11464" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2174</SUB>> ]
+"11470" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2175</SUB>> ]
+"11473" [label = <(&lt;operator&gt;.fieldAccess,mirror::ObjectArray)<SUB>2175</SUB>> ]
+"11477" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2175</SUB>> ]
+"11485" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2176</SUB>> ]
+"11491" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2176</SUB>> ]
+"11494" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2176</SUB>> ]
+"11502" [label = <(FIELD_IDENTIFIER,Set,Set)<SUB>2177</SUB>> ]
+"11441" [label = <(&lt;operator&gt;.equals,(java_array) == nullptr)<SUB>2172</SUB>> ]
+"11445" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_array == null&quot;))<SUB>2172</SUB>> ]
+"11452" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>2172</SUB>> ]
+"11462" [label = <(FIELD_IDENTIFIER,ObjectArray,ObjectArray)<SUB>2174</SUB>> ]
+"11466" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2174</SUB>> ]
+"11472" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2175</SUB>> ]
+"11475" [label = <(FIELD_IDENTIFIER,ObjectArray,ObjectArray)<SUB>2175</SUB>> ]
+"11479" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2175</SUB>> ]
+"11487" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2176</SUB>> ]
+"11493" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2176</SUB>> ]
+"11496" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2176</SUB>> ]
+"11446" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2172</SUB>> ]
+"11447" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2172</SUB>> ]
+"11449" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2172</SUB>> ]
+"11430" [label = <(METHOD,SetObjectArrayElement)<SUB>2170</SUB>> ]
+"11508" [label = <(METHOD_RETURN,void)<SUB>2170</SUB>> ]
+  "11436" -> "11441" 
+  "11436" -> "11454" 
+  "11454" -> "11462" 
+  "11456" -> "11487" 
+  "11481" -> "11502" 
+  "11498" -> "11508" 
+  "11457" -> "11472" 
+  "11468" -> "11456" 
+  "11482" -> "11493" 
+  "11489" -> "11481" 
+  "11499" -> "11505" 
+  "11504" -> "11498" 
+  "11458" -> "11466" 
+  "11463" -> "11457" 
+  "11469" -> "11479" 
+  "11476" -> "11468" 
+  "11483" -> "11482" 
+  "11490" -> "11489" 
+  "11500" -> "11499" 
+  "11505" -> "11504" 
+  "11440" -> "11447" 
+  "11440" -> "11454" 
+  "11460" -> "11458" 
+  "11464" -> "11463" 
+  "11470" -> "11475" 
+  "11473" -> "11469" 
+  "11477" -> "11476" 
+  "11485" -> "11483" 
+  "11491" -> "11496" 
+  "11494" -> "11490" 
+  "11502" -> "11500" 
+  "11441" -> "11440" 
+  "11445" -> "11452" 
+  "11452" -> "11508" 
+  "11462" -> "11460" 
+  "11466" -> "11464" 
+  "11472" -> "11470" 
+  "11475" -> "11473" 
+  "11479" -> "11477" 
+  "11487" -> "11485" 
+  "11493" -> "11491" 
+  "11496" -> "11494" 
+  "11446" -> "11445" 
+  "11447" -> "11449" 
+  "11449" -> "11446" 
+  "11430" -> "11436" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/211-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/211-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/211-cfg.dot	2023-06-07 19:35:28.357384336 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/211-cfg.dot	2023-06-07 19:35:34.887383765 +0330
@@ -1,7 +1,9 @@
-digraph "ReleaseStringUTFChars" {  
-"11635" [label = <(&lt;operator&gt;.delete,delete[] chars)<SUB>2278</SUB>> ]
-"11630" [label = <(METHOD,ReleaseStringUTFChars)<SUB>2277</SUB>> ]
-"11637" [label = <(METHOD_RETURN,void)<SUB>2277</SUB>> ]
-  "11635" -> "11637" 
-  "11630" -> "11635" 
+digraph "NewBooleanArray" {  
+"11514" [label = <(RETURN,return NewPrimitiveArray&lt;jbooleanArray, mirror::BooleanArray&gt;(env, length);,return NewPrimitiveArray&lt;jbooleanArray, mirror::BooleanArray&gt;(env, length);)<SUB>2181</SUB>> ]
+"11515" [label = <(NewPrimitiveArray&lt;jbooleanArray,mirror::BooleanArray&gt;,NewPrimitiveArray&lt;jbooleanArray, mirror::BooleanArray&gt;(env, length))<SUB>2181</SUB>> ]
+"11510" [label = <(METHOD,NewBooleanArray)<SUB>2180</SUB>> ]
+"11518" [label = <(METHOD_RETURN,jbooleanArray)<SUB>2180</SUB>> ]
+  "11514" -> "11518" 
+  "11515" -> "11514" 
+  "11510" -> "11515" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/212-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/212-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/212-cfg.dot	2023-06-07 19:35:28.357384336 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/212-cfg.dot	2023-06-07 19:35:34.887383765 +0330
@@ -1,108 +1,9 @@
-digraph "GetArrayLength" {  
-"11643" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_array))<SUB>2282</SUB>> ]
-"11662" [label = <(soa,soa(env))<SUB>2283</SUB>> ]
-"11664" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; obj = soa.Decode&lt;mirror::Object&gt;(java_array))<SUB>2284</SUB>> ]
-"11707" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Array&gt; array = obj-&gt;AsArray())<SUB>2289</SUB>> ]
-"11719" [label = <(RETURN,return array-&gt;GetLength();,return array-&gt;GetLength();)<SUB>2290</SUB>> ]
-"11665" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; obj)<SUB>2284</SUB>> ]
-"11672" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(java_array))<SUB>2284</SUB>> ]
-"11682" [label = <(UNLIKELY,UNLIKELY(!obj-&gt;IsArrayInstance()))<SUB>2285</SUB>> ]
-"11708" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Array&gt; array)<SUB>2289</SUB>> ]
-"11715" [label = <(AsArray,obj-&gt;AsArray())<SUB>2289</SUB>> ]
-"11720" [label = <(GetLength,array-&gt;GetLength())<SUB>2290</SUB>> ]
-"11666" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>2284</SUB>> ]
-"11673" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>2284</SUB>> ]
-"11683" [label = <(&lt;operator&gt;.logicalNot,!obj-&gt;IsArrayInstance())<SUB>2285</SUB>> ]
-"11689" [label = <(JniAbortF,soa.Vm()-&gt;JniAbortF(&quot;GetArrayLength&quot;, &quot;not an array: %s&quot;, obj-&gt;PrettyTypeOf().c_str()))<SUB>2286</SUB>> ]
-"11705" [label = <(RETURN,return 0;,return 0;)<SUB>2287</SUB>> ]
-"11709" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Array)<SUB>2289</SUB>> ]
-"11716" [label = <(&lt;operator&gt;.indirectFieldAccess,obj-&gt;AsArray)<SUB>2289</SUB>> ]
-"11721" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetLength)<SUB>2290</SUB>> ]
-"11647" [label = <(UNLIKELY,UNLIKELY((java_array) == nullptr))<SUB>2282</SUB>> ]
-"11668" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2284</SUB>> ]
-"11674" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2284</SUB>> ]
-"11677" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2284</SUB>> ]
-"11684" [label = <(IsArrayInstance,obj-&gt;IsArrayInstance())<SUB>2285</SUB>> ]
-"11690" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Vm()-&gt;JniAbortF)<SUB>2286</SUB>> ]
-"11698" [label = <(c_str,obj-&gt;PrettyTypeOf().c_str())<SUB>2286</SUB>> ]
-"11711" [label = <(&lt;operator&gt;.fieldAccess,mirror::Array)<SUB>2289</SUB>> ]
-"11718" [label = <(FIELD_IDENTIFIER,AsArray,AsArray)<SUB>2289</SUB>> ]
-"11723" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>2290</SUB>> ]
-"11648" [label = <(&lt;operator&gt;.equals,(java_array) == nullptr)<SUB>2282</SUB>> ]
-"11652" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_array),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_array == null&quot;))<SUB>2282</SUB>> ]
-"11659" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_array),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_array))<SUB>2282</SUB>> ]
-"11670" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2284</SUB>> ]
-"11676" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2284</SUB>> ]
-"11679" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2284</SUB>> ]
-"11685" [label = <(&lt;operator&gt;.indirectFieldAccess,obj-&gt;IsArrayInstance)<SUB>2285</SUB>> ]
-"11691" [label = <(Vm,soa.Vm())<SUB>2286</SUB>> ]
-"11695" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2286</SUB>> ]
-"11699" [label = <(&lt;operator&gt;.fieldAccess,obj-&gt;PrettyTypeOf().c_str)<SUB>2286</SUB>> ]
-"11713" [label = <(FIELD_IDENTIFIER,Array,Array)<SUB>2289</SUB>> ]
-"11653" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2282</SUB>> ]
-"11687" [label = <(FIELD_IDENTIFIER,IsArrayInstance,IsArrayInstance)<SUB>2285</SUB>> ]
-"11692" [label = <(&lt;operator&gt;.fieldAccess,soa.Vm)<SUB>2286</SUB>> ]
-"11700" [label = <(PrettyTypeOf,obj-&gt;PrettyTypeOf())<SUB>2286</SUB>> ]
-"11704" [label = <(FIELD_IDENTIFIER,c_str,c_str)<SUB>2286</SUB>> ]
-"11654" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2282</SUB>> ]
-"11656" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2282</SUB>> ]
-"11694" [label = <(FIELD_IDENTIFIER,Vm,Vm)<SUB>2286</SUB>> ]
-"11701" [label = <(&lt;operator&gt;.indirectFieldAccess,obj-&gt;PrettyTypeOf)<SUB>2286</SUB>> ]
-"11703" [label = <(FIELD_IDENTIFIER,PrettyTypeOf,PrettyTypeOf)<SUB>2286</SUB>> ]
-"11639" [label = <(METHOD,GetArrayLength)<SUB>2281</SUB>> ]
-"11724" [label = <(METHOD_RETURN,jsize)<SUB>2281</SUB>> ]
-  "11643" -> "11648" 
-  "11643" -> "11662" 
-  "11662" -> "11670" 
-  "11664" -> "11687" 
-  "11707" -> "11723" 
-  "11719" -> "11724" 
-  "11665" -> "11676" 
-  "11672" -> "11664" 
-  "11682" -> "11694" 
-  "11682" -> "11713" 
-  "11708" -> "11718" 
-  "11715" -> "11707" 
-  "11720" -> "11719" 
-  "11666" -> "11665" 
-  "11673" -> "11672" 
-  "11683" -> "11682" 
-  "11689" -> "11705" 
-  "11705" -> "11724" 
-  "11709" -> "11708" 
-  "11716" -> "11715" 
-  "11721" -> "11720" 
-  "11647" -> "11654" 
-  "11647" -> "11662" 
-  "11668" -> "11666" 
-  "11674" -> "11679" 
-  "11677" -> "11673" 
-  "11684" -> "11683" 
-  "11690" -> "11703" 
-  "11698" -> "11689" 
-  "11711" -> "11709" 
-  "11718" -> "11716" 
-  "11723" -> "11721" 
-  "11648" -> "11647" 
-  "11652" -> "11659" 
-  "11659" -> "11724" 
-  "11670" -> "11668" 
-  "11676" -> "11674" 
-  "11679" -> "11677" 
-  "11685" -> "11684" 
-  "11691" -> "11695" 
-  "11695" -> "11690" 
-  "11699" -> "11698" 
-  "11713" -> "11711" 
-  "11653" -> "11652" 
-  "11687" -> "11685" 
-  "11692" -> "11691" 
-  "11700" -> "11704" 
-  "11704" -> "11699" 
-  "11654" -> "11656" 
-  "11656" -> "11653" 
-  "11694" -> "11692" 
-  "11701" -> "11700" 
-  "11703" -> "11701" 
-  "11639" -> "11643" 
+digraph "NewByteArray" {  
+"11524" [label = <(RETURN,return NewPrimitiveArray&lt;jbyteArray, mirror::ByteArray&gt;(env, length);,return NewPrimitiveArray&lt;jbyteArray, mirror::ByteArray&gt;(env, length);)<SUB>2185</SUB>> ]
+"11525" [label = <(NewPrimitiveArray&lt;jbyteArray,mirror::ByteArray&gt;,NewPrimitiveArray&lt;jbyteArray, mirror::ByteArray&gt;(env, length))<SUB>2185</SUB>> ]
+"11520" [label = <(METHOD,NewByteArray)<SUB>2184</SUB>> ]
+"11528" [label = <(METHOD_RETURN,jbyteArray)<SUB>2184</SUB>> ]
+  "11524" -> "11528" 
+  "11525" -> "11524" 
+  "11520" -> "11525" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/213-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/213-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/213-cfg.dot	2023-06-07 19:35:28.367384337 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/213-cfg.dot	2023-06-07 19:35:34.887383765 +0330
@@ -1,75 +1,9 @@
-digraph "GetObjectArrayElement" {  
-"11731" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_array))<SUB>2294</SUB>> ]
-"11750" [label = <(soa,soa(env))<SUB>2295</SUB>> ]
-"11752" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::ObjectArray&lt;mirror::Object&gt;&gt; array =\012        soa.Decode&lt;mirror::ObjectArray&lt;mirror::Object&gt;&gt;(java_array))<SUB>2296</SUB>> ]
-"11777" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(array-&gt;Get(index));,return soa.AddLocalReference&lt;jobject&gt;(array-&gt;Get(index));)<SUB>2298</SUB>> ]
-"11753" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::ObjectArray&lt;mirror::Object&gt;&gt; array)<SUB>2296</SUB>> ]
-"11764" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::ObjectArray&lt;mirror::Object&gt;&gt;(java_array))<SUB>2297</SUB>> ]
-"11778" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(array-&gt;Get(index)))<SUB>2298</SUB>> ]
-"11754" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::ObjectArray)<SUB>2296</SUB>> ]
-"11759" [label = <(&lt;operator&gt;.arithmeticShiftRight,mirror::Object&gt;&gt; array)<SUB>2296</SUB>> ]
-"11765" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::ObjectArray)<SUB>2297</SUB>> ]
-"11772" [label = <(&lt;operator&gt;.arithmeticShiftRight,mirror::Object&gt;&gt;(java_array))<SUB>2297</SUB>> ]
-"11779" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>2298</SUB>> ]
-"11784" [label = <(Get,array-&gt;Get(index))<SUB>2298</SUB>> ]
-"11735" [label = <(UNLIKELY,UNLIKELY((java_array) == nullptr))<SUB>2294</SUB>> ]
-"11756" [label = <(&lt;operator&gt;.fieldAccess,mirror::ObjectArray)<SUB>2296</SUB>> ]
-"11760" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2296</SUB>> ]
-"11766" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2297</SUB>> ]
-"11769" [label = <(&lt;operator&gt;.fieldAccess,mirror::ObjectArray)<SUB>2297</SUB>> ]
-"11773" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2297</SUB>> ]
-"11780" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>2298</SUB>> ]
-"11785" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;Get)<SUB>2298</SUB>> ]
-"11736" [label = <(&lt;operator&gt;.equals,(java_array) == nullptr)<SUB>2294</SUB>> ]
-"11740" [label = <(CHECK_NON_NULL_ARGUMENT(java_array),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_array == null&quot;))<SUB>2294</SUB>> ]
-"11747" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_array),CHECK_NON_NULL_ARGUMENT(java_array))<SUB>2294</SUB>> ]
-"11758" [label = <(FIELD_IDENTIFIER,ObjectArray,ObjectArray)<SUB>2296</SUB>> ]
-"11762" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2296</SUB>> ]
-"11768" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2297</SUB>> ]
-"11771" [label = <(FIELD_IDENTIFIER,ObjectArray,ObjectArray)<SUB>2297</SUB>> ]
-"11775" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2297</SUB>> ]
-"11782" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>2298</SUB>> ]
-"11787" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>2298</SUB>> ]
-"11741" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2294</SUB>> ]
-"11742" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2294</SUB>> ]
-"11744" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2294</SUB>> ]
-"11726" [label = <(METHOD,GetObjectArrayElement)<SUB>2293</SUB>> ]
-"11789" [label = <(METHOD_RETURN,jobject)<SUB>2293</SUB>> ]
-  "11731" -> "11736" 
-  "11731" -> "11750" 
-  "11750" -> "11758" 
-  "11752" -> "11782" 
-  "11777" -> "11789" 
-  "11753" -> "11768" 
-  "11764" -> "11752" 
-  "11778" -> "11777" 
-  "11754" -> "11762" 
-  "11759" -> "11753" 
-  "11765" -> "11775" 
-  "11772" -> "11764" 
-  "11779" -> "11787" 
-  "11784" -> "11778" 
-  "11735" -> "11742" 
-  "11735" -> "11750" 
-  "11756" -> "11754" 
-  "11760" -> "11759" 
-  "11766" -> "11771" 
-  "11769" -> "11765" 
-  "11773" -> "11772" 
-  "11780" -> "11779" 
-  "11785" -> "11784" 
-  "11736" -> "11735" 
-  "11740" -> "11747" 
-  "11747" -> "11789" 
-  "11758" -> "11756" 
-  "11762" -> "11760" 
-  "11768" -> "11766" 
-  "11771" -> "11769" 
-  "11775" -> "11773" 
-  "11782" -> "11780" 
-  "11787" -> "11785" 
-  "11741" -> "11740" 
-  "11742" -> "11744" 
-  "11744" -> "11741" 
-  "11726" -> "11731" 
+digraph "NewCharArray" {  
+"11534" [label = <(RETURN,return NewPrimitiveArray&lt;jcharArray, mirror::CharArray&gt;(env, length);,return NewPrimitiveArray&lt;jcharArray, mirror::CharArray&gt;(env, length);)<SUB>2189</SUB>> ]
+"11535" [label = <(NewPrimitiveArray&lt;jcharArray,mirror::CharArray&gt;,NewPrimitiveArray&lt;jcharArray, mirror::CharArray&gt;(env, length))<SUB>2189</SUB>> ]
+"11530" [label = <(METHOD,NewCharArray)<SUB>2188</SUB>> ]
+"11538" [label = <(METHOD_RETURN,jcharArray)<SUB>2188</SUB>> ]
+  "11534" -> "11538" 
+  "11535" -> "11534" 
+  "11530" -> "11535" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/214-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/214-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/214-cfg.dot	2023-06-07 19:35:28.367384337 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/214-cfg.dot	2023-06-07 19:35:34.887383765 +0330
@@ -1,93 +1,9 @@
-digraph "SetObjectArrayElement" {  
-"11797" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>2303</SUB>> ]
-"11815" [label = <(soa,soa(env))<SUB>2304</SUB>> ]
-"11817" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::ObjectArray&lt;mirror::Object&gt;&gt; array =\012        soa.Decode&lt;mirror::ObjectArray&lt;mirror::Object&gt;&gt;(java_array))<SUB>2305</SUB>> ]
-"11842" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; value = soa.Decode&lt;mirror::Object&gt;(java_value))<SUB>2307</SUB>> ]
-"11859" [label = <(&lt;operator&gt;.greaterThan,array-&gt;Set&lt;false&gt;(index, value))<SUB>2308</SUB>> ]
-"11818" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::ObjectArray&lt;mirror::Object&gt;&gt; array)<SUB>2305</SUB>> ]
-"11829" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::ObjectArray&lt;mirror::Object&gt;&gt;(java_array))<SUB>2306</SUB>> ]
-"11843" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; value)<SUB>2307</SUB>> ]
-"11850" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(java_value))<SUB>2307</SUB>> ]
-"11860" [label = <(&lt;operator&gt;.lessThan,array-&gt;Set&lt;false)<SUB>2308</SUB>> ]
-"11865" [label = <(&lt;operator&gt;.bracketedPrimary,(index, value))<SUB>2308</SUB>> ]
-"11819" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::ObjectArray)<SUB>2305</SUB>> ]
-"11824" [label = <(&lt;operator&gt;.arithmeticShiftRight,mirror::Object&gt;&gt; array)<SUB>2305</SUB>> ]
-"11830" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::ObjectArray)<SUB>2306</SUB>> ]
-"11837" [label = <(&lt;operator&gt;.arithmeticShiftRight,mirror::Object&gt;&gt;(java_array))<SUB>2306</SUB>> ]
-"11844" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>2307</SUB>> ]
-"11851" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>2307</SUB>> ]
-"11861" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;Set)<SUB>2308</SUB>> ]
-"11866" [label = <(&lt;operator&gt;.expressionList,index, value)<SUB>2308</SUB>> ]
-"11801" [label = <(UNLIKELY,UNLIKELY((java_array) == nullptr))<SUB>2303</SUB>> ]
-"11821" [label = <(&lt;operator&gt;.fieldAccess,mirror::ObjectArray)<SUB>2305</SUB>> ]
-"11825" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2305</SUB>> ]
-"11831" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2306</SUB>> ]
-"11834" [label = <(&lt;operator&gt;.fieldAccess,mirror::ObjectArray)<SUB>2306</SUB>> ]
-"11838" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2306</SUB>> ]
-"11846" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2307</SUB>> ]
-"11852" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2307</SUB>> ]
-"11855" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2307</SUB>> ]
-"11863" [label = <(FIELD_IDENTIFIER,Set,Set)<SUB>2308</SUB>> ]
-"11802" [label = <(&lt;operator&gt;.equals,(java_array) == nullptr)<SUB>2303</SUB>> ]
-"11806" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_array == null&quot;))<SUB>2303</SUB>> ]
-"11813" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>2303</SUB>> ]
-"11823" [label = <(FIELD_IDENTIFIER,ObjectArray,ObjectArray)<SUB>2305</SUB>> ]
-"11827" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2305</SUB>> ]
-"11833" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2306</SUB>> ]
-"11836" [label = <(FIELD_IDENTIFIER,ObjectArray,ObjectArray)<SUB>2306</SUB>> ]
-"11840" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2306</SUB>> ]
-"11848" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2307</SUB>> ]
-"11854" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2307</SUB>> ]
-"11857" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2307</SUB>> ]
-"11807" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2303</SUB>> ]
-"11808" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2303</SUB>> ]
-"11810" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2303</SUB>> ]
-"11791" [label = <(METHOD,SetObjectArrayElement)<SUB>2301</SUB>> ]
-"11869" [label = <(METHOD_RETURN,void)<SUB>2301</SUB>> ]
-  "11797" -> "11802" 
-  "11797" -> "11815" 
-  "11815" -> "11823" 
-  "11817" -> "11848" 
-  "11842" -> "11863" 
-  "11859" -> "11869" 
-  "11818" -> "11833" 
-  "11829" -> "11817" 
-  "11843" -> "11854" 
-  "11850" -> "11842" 
-  "11860" -> "11866" 
-  "11865" -> "11859" 
-  "11819" -> "11827" 
-  "11824" -> "11818" 
-  "11830" -> "11840" 
-  "11837" -> "11829" 
-  "11844" -> "11843" 
-  "11851" -> "11850" 
-  "11861" -> "11860" 
-  "11866" -> "11865" 
-  "11801" -> "11808" 
-  "11801" -> "11815" 
-  "11821" -> "11819" 
-  "11825" -> "11824" 
-  "11831" -> "11836" 
-  "11834" -> "11830" 
-  "11838" -> "11837" 
-  "11846" -> "11844" 
-  "11852" -> "11857" 
-  "11855" -> "11851" 
-  "11863" -> "11861" 
-  "11802" -> "11801" 
-  "11806" -> "11813" 
-  "11813" -> "11869" 
-  "11823" -> "11821" 
-  "11827" -> "11825" 
-  "11833" -> "11831" 
-  "11836" -> "11834" 
-  "11840" -> "11838" 
-  "11848" -> "11846" 
-  "11854" -> "11852" 
-  "11857" -> "11855" 
-  "11807" -> "11806" 
-  "11808" -> "11810" 
-  "11810" -> "11807" 
-  "11791" -> "11797" 
+digraph "NewDoubleArray" {  
+"11544" [label = <(RETURN,return NewPrimitiveArray&lt;jdoubleArray, mirror::DoubleArray&gt;(env, length);,return NewPrimitiveArray&lt;jdoubleArray, mirror::DoubleArray&gt;(env, length);)<SUB>2193</SUB>> ]
+"11545" [label = <(NewPrimitiveArray&lt;jdoubleArray,mirror::DoubleArray&gt;,NewPrimitiveArray&lt;jdoubleArray, mirror::DoubleArray&gt;(env, length))<SUB>2193</SUB>> ]
+"11540" [label = <(METHOD,NewDoubleArray)<SUB>2192</SUB>> ]
+"11548" [label = <(METHOD_RETURN,jdoubleArray)<SUB>2192</SUB>> ]
+  "11544" -> "11548" 
+  "11545" -> "11544" 
+  "11540" -> "11545" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/215-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/215-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/215-cfg.dot	2023-06-07 19:35:28.367384337 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/215-cfg.dot	2023-06-07 19:35:34.887383765 +0330
@@ -1,9 +1,9 @@
-digraph "NewBooleanArray" {  
-"11875" [label = <(RETURN,return NewPrimitiveArray&lt;jbooleanArray, mirror::BooleanArray&gt;(env, length);,return NewPrimitiveArray&lt;jbooleanArray, mirror::BooleanArray&gt;(env, length);)<SUB>2312</SUB>> ]
-"11876" [label = <(NewPrimitiveArray&lt;jbooleanArray,mirror::BooleanArray&gt;,NewPrimitiveArray&lt;jbooleanArray, mirror::BooleanArray&gt;(env, length))<SUB>2312</SUB>> ]
-"11871" [label = <(METHOD,NewBooleanArray)<SUB>2311</SUB>> ]
-"11879" [label = <(METHOD_RETURN,jbooleanArray)<SUB>2311</SUB>> ]
-  "11875" -> "11879" 
-  "11876" -> "11875" 
-  "11871" -> "11876" 
+digraph "NewFloatArray" {  
+"11554" [label = <(RETURN,return NewPrimitiveArray&lt;jfloatArray, mirror::FloatArray&gt;(env, length);,return NewPrimitiveArray&lt;jfloatArray, mirror::FloatArray&gt;(env, length);)<SUB>2197</SUB>> ]
+"11555" [label = <(NewPrimitiveArray&lt;jfloatArray,mirror::FloatArray&gt;,NewPrimitiveArray&lt;jfloatArray, mirror::FloatArray&gt;(env, length))<SUB>2197</SUB>> ]
+"11550" [label = <(METHOD,NewFloatArray)<SUB>2196</SUB>> ]
+"11558" [label = <(METHOD_RETURN,jfloatArray)<SUB>2196</SUB>> ]
+  "11554" -> "11558" 
+  "11555" -> "11554" 
+  "11550" -> "11555" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/216-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/216-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/216-cfg.dot	2023-06-07 19:35:28.367384337 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/216-cfg.dot	2023-06-07 19:35:34.887383765 +0330
@@ -1,9 +1,9 @@
-digraph "NewByteArray" {  
-"11885" [label = <(RETURN,return NewPrimitiveArray&lt;jbyteArray, mirror::ByteArray&gt;(env, length);,return NewPrimitiveArray&lt;jbyteArray, mirror::ByteArray&gt;(env, length);)<SUB>2316</SUB>> ]
-"11886" [label = <(NewPrimitiveArray&lt;jbyteArray,mirror::ByteArray&gt;,NewPrimitiveArray&lt;jbyteArray, mirror::ByteArray&gt;(env, length))<SUB>2316</SUB>> ]
-"11881" [label = <(METHOD,NewByteArray)<SUB>2315</SUB>> ]
-"11889" [label = <(METHOD_RETURN,jbyteArray)<SUB>2315</SUB>> ]
-  "11885" -> "11889" 
-  "11886" -> "11885" 
-  "11881" -> "11886" 
+digraph "NewIntArray" {  
+"11564" [label = <(RETURN,return NewPrimitiveArray&lt;jintArray, mirror::IntArray&gt;(env, length);,return NewPrimitiveArray&lt;jintArray, mirror::IntArray&gt;(env, length);)<SUB>2201</SUB>> ]
+"11565" [label = <(NewPrimitiveArray&lt;jintArray,mirror::IntArray&gt;,NewPrimitiveArray&lt;jintArray, mirror::IntArray&gt;(env, length))<SUB>2201</SUB>> ]
+"11560" [label = <(METHOD,NewIntArray)<SUB>2200</SUB>> ]
+"11568" [label = <(METHOD_RETURN,jintArray)<SUB>2200</SUB>> ]
+  "11564" -> "11568" 
+  "11565" -> "11564" 
+  "11560" -> "11565" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/217-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/217-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/217-cfg.dot	2023-06-07 19:35:28.367384337 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/217-cfg.dot	2023-06-07 19:35:34.887383765 +0330
@@ -1,9 +1,9 @@
-digraph "NewCharArray" {  
-"11895" [label = <(RETURN,return NewPrimitiveArray&lt;jcharArray, mirror::CharArray&gt;(env, length);,return NewPrimitiveArray&lt;jcharArray, mirror::CharArray&gt;(env, length);)<SUB>2320</SUB>> ]
-"11896" [label = <(NewPrimitiveArray&lt;jcharArray,mirror::CharArray&gt;,NewPrimitiveArray&lt;jcharArray, mirror::CharArray&gt;(env, length))<SUB>2320</SUB>> ]
-"11891" [label = <(METHOD,NewCharArray)<SUB>2319</SUB>> ]
-"11899" [label = <(METHOD_RETURN,jcharArray)<SUB>2319</SUB>> ]
-  "11895" -> "11899" 
-  "11896" -> "11895" 
-  "11891" -> "11896" 
+digraph "NewLongArray" {  
+"11574" [label = <(RETURN,return NewPrimitiveArray&lt;jlongArray, mirror::LongArray&gt;(env, length);,return NewPrimitiveArray&lt;jlongArray, mirror::LongArray&gt;(env, length);)<SUB>2205</SUB>> ]
+"11575" [label = <(NewPrimitiveArray&lt;jlongArray,mirror::LongArray&gt;,NewPrimitiveArray&lt;jlongArray, mirror::LongArray&gt;(env, length))<SUB>2205</SUB>> ]
+"11570" [label = <(METHOD,NewLongArray)<SUB>2204</SUB>> ]
+"11578" [label = <(METHOD_RETURN,jlongArray)<SUB>2204</SUB>> ]
+  "11574" -> "11578" 
+  "11575" -> "11574" 
+  "11570" -> "11575" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/218-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/218-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/218-cfg.dot	2023-06-07 19:35:28.367384337 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/218-cfg.dot	2023-06-07 19:35:34.887383765 +0330
@@ -1,9 +1,327 @@
-digraph "NewDoubleArray" {  
-"11905" [label = <(RETURN,return NewPrimitiveArray&lt;jdoubleArray, mirror::DoubleArray&gt;(env, length);,return NewPrimitiveArray&lt;jdoubleArray, mirror::DoubleArray&gt;(env, length);)<SUB>2324</SUB>> ]
-"11906" [label = <(NewPrimitiveArray&lt;jdoubleArray,mirror::DoubleArray&gt;,NewPrimitiveArray&lt;jdoubleArray, mirror::DoubleArray&gt;(env, length))<SUB>2324</SUB>> ]
-"11901" [label = <(METHOD,NewDoubleArray)<SUB>2323</SUB>> ]
-"11909" [label = <(METHOD_RETURN,jdoubleArray)<SUB>2323</SUB>> ]
-  "11905" -> "11909" 
-  "11906" -> "11905" 
-  "11901" -> "11906" 
+digraph "NewObjectArray" {  
+"11602" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(element_jclass))<SUB>2214</SUB>> ]
+"11621" [label = <(soa,soa(env))<SUB>2217</SUB>> ]
+"11623" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; array_class)<SUB>2218</SUB>> ]
+"11702" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::ObjectArray&lt;mirror::Object&gt;&gt; result =\012        mirror::ObjectArray&lt;mirror::Object&gt;::Alloc(soa.Self(), array_class, length))<SUB>2235</SUB>> ]
+"11845" [label = <(RETURN,return soa.AddLocalReference&lt;jobjectArray&gt;(result);,return soa.AddLocalReference&lt;jobjectArray&gt;(result);)<SUB>2254</SUB>> ]
+"11587" [label = <(UNLIKELY,UNLIKELY(length &lt; 0))<SUB>2210</SUB>> ]
+"11624" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>2218</SUB>> ]
+"11631" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; element_class = soa.Decode&lt;mirror::Class&gt;(element_jclass))<SUB>2220</SUB>> ]
+"11674" [label = <(&lt;operator&gt;.assignment,* class_linker = Runtime::Current()-&gt;GetClassLinker())<SUB>2227</SUB>> ]
+"11683" [label = <(&lt;operator&gt;.assignment,array_class = class_linker-&gt;FindArrayClass(soa.Self(), element_class))<SUB>2228</SUB>> ]
+"11703" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::ObjectArray&lt;mirror::Object&gt;&gt; result)<SUB>2235</SUB>> ]
+"11714" [label = <(&lt;operator&gt;.greaterThan,mirror::ObjectArray&lt;mirror::Object&gt;::Alloc(soa.Self(), array_class, length))<SUB>2236</SUB>> ]
+"11733" [label = <(&lt;operator&gt;.logicalAnd,result != nullptr &amp;&amp; initial_element != nullptr)<SUB>2237</SUB>> ]
+"11846" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobjectArray&gt;(result))<SUB>2254</SUB>> ]
+"11588" [label = <(&lt;operator&gt;.lessThan,length &lt; 0)<SUB>2210</SUB>> ]
+"11592" [label = <(JniAbortF,JavaVmExtFromEnv(env)-&gt;JniAbortF(&quot;NewObjectArray&quot;, &quot;negative array length: %d&quot;, length))<SUB>2211</SUB>> ]
+"11600" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2212</SUB>> ]
+"11626" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2218</SUB>> ]
+"11632" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; element_class)<SUB>2220</SUB>> ]
+"11639" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(element_jclass))<SUB>2220</SUB>> ]
+"11649" [label = <(UNLIKELY,UNLIKELY(element_class-&gt;IsPrimitive()))<SUB>2221</SUB>> ]
+"11676" [label = <(GetClassLinker,Runtime::Current()-&gt;GetClassLinker())<SUB>2227</SUB>> ]
+"11685" [label = <(FindArrayClass,class_linker-&gt;FindArrayClass(soa.Self(), element_class))<SUB>2228</SUB>> ]
+"11695" [label = <(UNLIKELY,UNLIKELY(array_class == nullptr))<SUB>2229</SUB>> ]
+"11704" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::ObjectArray)<SUB>2235</SUB>> ]
+"11709" [label = <(&lt;operator&gt;.arithmeticShiftRight,mirror::Object&gt;&gt; result)<SUB>2235</SUB>> ]
+"11715" [label = <(&lt;operator&gt;.lessThan,mirror::ObjectArray&lt;mirror::Object)<SUB>2236</SUB>> ]
+"11722" [label = <(::Alloc,::Alloc(soa.Self(), array_class, length))<SUB>2236</SUB>> ]
+"11734" [label = <(&lt;operator&gt;.notEquals,result != nullptr)<SUB>2237</SUB>> ]
+"11737" [label = <(&lt;operator&gt;.notEquals,initial_element != nullptr)<SUB>2237</SUB>> ]
+"11741" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; initial_object = soa.Decode&lt;mirror::Object&gt;(initial_element))<SUB>2238</SUB>> ]
+"11847" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobjectArray)<SUB>2254</SUB>> ]
+"11593" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>2211</SUB>> ]
+"11606" [label = <(UNLIKELY,UNLIKELY((element_jclass) == nullptr))<SUB>2214</SUB>> ]
+"11628" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>2218</SUB>> ]
+"11633" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>2220</SUB>> ]
+"11640" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>2220</SUB>> ]
+"11650" [label = <(IsPrimitive,element_class-&gt;IsPrimitive())<SUB>2221</SUB>> ]
+"11655" [label = <(JniAbortF,soa.Vm()-&gt;JniAbortF(&quot;NewObjectArray&quot;,\012 &quot;not an object type: %s&quot;,\012                            element_class-&gt;PrettyDescriptor().c_str()))<SUB>2222</SUB>> ]
+"11671" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2225</SUB>> ]
+"11677" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetClassLinker)<SUB>2227</SUB>> ]
+"11686" [label = <(&lt;operator&gt;.indirectFieldAccess,class_linker-&gt;FindArrayClass)<SUB>2228</SUB>> ]
+"11689" [label = <(Self,soa.Self())<SUB>2228</SUB>> ]
+"11696" [label = <(&lt;operator&gt;.equals,array_class == nullptr)<SUB>2229</SUB>> ]
+"11700" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2230</SUB>> ]
+"11706" [label = <(&lt;operator&gt;.fieldAccess,mirror::ObjectArray)<SUB>2235</SUB>> ]
+"11710" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2235</SUB>> ]
+"11716" [label = <(&lt;operator&gt;.fieldAccess,mirror::ObjectArray)<SUB>2236</SUB>> ]
+"11719" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2236</SUB>> ]
+"11723" [label = <(&lt;operator&gt;.fieldAccess,::Alloc)<SUB>2236</SUB>> ]
+"11726" [label = <(Self,soa.Self())<SUB>2236</SUB>> ]
+"11742" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; initial_object)<SUB>2238</SUB>> ]
+"11749" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(initial_element))<SUB>2238</SUB>> ]
+"11759" [label = <(&lt;operator&gt;.notEquals,initial_object != nullptr)<SUB>2239</SUB>> ]
+"11848" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>2254</SUB>> ]
+"11594" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2211</SUB>> ]
+"11596" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2211</SUB>> ]
+"11607" [label = <(&lt;operator&gt;.equals,(element_jclass) == nullptr)<SUB>2214</SUB>> ]
+"11611" [label = <(CHECK_NON_NULL_ARGUMENT(element_jclass),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;element_jclass == null&quot;))<SUB>2214</SUB>> ]
+"11618" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(element_jclass),CHECK_NON_NULL_ARGUMENT(element_jclass))<SUB>2214</SUB>> ]
+"11635" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2220</SUB>> ]
+"11641" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2220</SUB>> ]
+"11644" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2220</SUB>> ]
+"11651" [label = <(&lt;operator&gt;.indirectFieldAccess,element_class-&gt;IsPrimitive)<SUB>2221</SUB>> ]
+"11656" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Vm()-&gt;JniAbortF)<SUB>2222</SUB>> ]
+"11664" [label = <(c_str,element_class-&gt;PrettyDescriptor().c_str())<SUB>2224</SUB>> ]
+"11678" [label = <(Runtime::Current,Runtime::Current())<SUB>2227</SUB>> ]
+"11682" [label = <(FIELD_IDENTIFIER,GetClassLinker,GetClassLinker)<SUB>2227</SUB>> ]
+"11688" [label = <(FIELD_IDENTIFIER,FindArrayClass,FindArrayClass)<SUB>2228</SUB>> ]
+"11690" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>2228</SUB>> ]
+"11708" [label = <(FIELD_IDENTIFIER,ObjectArray,ObjectArray)<SUB>2235</SUB>> ]
+"11712" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2235</SUB>> ]
+"11718" [label = <(FIELD_IDENTIFIER,ObjectArray,ObjectArray)<SUB>2236</SUB>> ]
+"11721" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2236</SUB>> ]
+"11725" [label = <(FIELD_IDENTIFIER,Alloc,Alloc)<SUB>2236</SUB>> ]
+"11727" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>2236</SUB>> ]
+"11743" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>2238</SUB>> ]
+"11750" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>2238</SUB>> ]
+"11763" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; element_class = result-&gt;GetClass()-&gt;GetComponentType())<SUB>2240</SUB>> ]
+"11850" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>2254</SUB>> ]
+"11612" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2214</SUB>> ]
+"11637" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>2220</SUB>> ]
+"11643" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2220</SUB>> ]
+"11646" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>2220</SUB>> ]
+"11653" [label = <(FIELD_IDENTIFIER,IsPrimitive,IsPrimitive)<SUB>2221</SUB>> ]
+"11657" [label = <(Vm,soa.Vm())<SUB>2222</SUB>> ]
+"11661" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2222</SUB>> ]
+"11665" [label = <(&lt;operator&gt;.fieldAccess,element_class-&gt;PrettyDescriptor().c_str)<SUB>2224</SUB>> ]
+"11679" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>2227</SUB>> ]
+"11692" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>2228</SUB>> ]
+"11729" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>2236</SUB>> ]
+"11745" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2238</SUB>> ]
+"11751" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2238</SUB>> ]
+"11754" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2238</SUB>> ]
+"11764" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; element_class)<SUB>2240</SUB>> ]
+"11771" [label = <(GetComponentType,result-&gt;GetClass()-&gt;GetComponentType())<SUB>2240</SUB>> ]
+"11779" [label = <(UNLIKELY,UNLIKELY(!element_class-&gt;IsAssignableFrom(initial_object-&gt;GetClass())))<SUB>2241</SUB>> ]
+"11613" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2214</SUB>> ]
+"11615" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2214</SUB>> ]
+"11658" [label = <(&lt;operator&gt;.fieldAccess,soa.Vm)<SUB>2222</SUB>> ]
+"11666" [label = <(PrettyDescriptor,element_class-&gt;PrettyDescriptor())<SUB>2224</SUB>> ]
+"11670" [label = <(FIELD_IDENTIFIER,c_str,c_str)<SUB>2224</SUB>> ]
+"11681" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>2227</SUB>> ]
+"11747" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2238</SUB>> ]
+"11753" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2238</SUB>> ]
+"11756" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2238</SUB>> ]
+"11765" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>2240</SUB>> ]
+"11772" [label = <(&lt;operator&gt;.indirectFieldAccess,result-&gt;GetClass()-&gt;GetComponentType)<SUB>2240</SUB>> ]
+"11780" [label = <(&lt;operator&gt;.logicalNot,!element_class-&gt;IsAssignableFrom(initial_object-&gt;GetClass()))<SUB>2241</SUB>> ]
+"11790" [label = <(JniAbortF,soa.Vm()-&gt;JniAbortF(&quot;NewObjectArray&quot;, &quot;cannot assign object of type '%s' to array with &quot;\012 &quot;element type of '%s'&quot;,\012                              mirror::Class::PrettyDescriptor(initial_object-&gt;GetClass()).c_str(),\012                              element_class-&gt;PrettyDescriptor().c_str()))<SUB>2242</SUB>> ]
+"11819" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2246</SUB>> ]
+"11660" [label = <(FIELD_IDENTIFIER,Vm,Vm)<SUB>2222</SUB>> ]
+"11667" [label = <(&lt;operator&gt;.indirectFieldAccess,element_class-&gt;PrettyDescriptor)<SUB>2224</SUB>> ]
+"11767" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2240</SUB>> ]
+"11773" [label = <(GetClass,result-&gt;GetClass())<SUB>2240</SUB>> ]
+"11777" [label = <(FIELD_IDENTIFIER,GetComponentType,GetComponentType)<SUB>2240</SUB>> ]
+"11781" [label = <(IsAssignableFrom,element_class-&gt;IsAssignableFrom(initial_object-&gt;GetClass()))<SUB>2241</SUB>> ]
+"11791" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Vm()-&gt;JniAbortF)<SUB>2242</SUB>> ]
+"11799" [label = <(c_str,mirror::Class::PrettyDescriptor(initial_object-&gt;GetClass()).c_str())<SUB>2244</SUB>> ]
+"11812" [label = <(c_str,element_class-&gt;PrettyDescriptor().c_str())<SUB>2245</SUB>> ]
+"11669" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>2224</SUB>> ]
+"11769" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>2240</SUB>> ]
+"11774" [label = <(&lt;operator&gt;.indirectFieldAccess,result-&gt;GetClass)<SUB>2240</SUB>> ]
+"11782" [label = <(&lt;operator&gt;.indirectFieldAccess,element_class-&gt;IsAssignableFrom)<SUB>2241</SUB>> ]
+"11785" [label = <(GetClass,initial_object-&gt;GetClass())<SUB>2241</SUB>> ]
+"11792" [label = <(Vm,soa.Vm())<SUB>2242</SUB>> ]
+"11796" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2242</SUB>> ]
+"11800" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class::PrettyDescriptor(initial_object-&gt;GetClass()).c_str)<SUB>2244</SUB>> ]
+"11813" [label = <(&lt;operator&gt;.fieldAccess,element_class-&gt;PrettyDescriptor().c_str)<SUB>2245</SUB>> ]
+"11829" [label = <(&lt;operator&gt;.lessThan,i &lt; length)<SUB>2248</SUB>> ]
+"11832" [label = <(&lt;operator&gt;.preIncrement,++i)<SUB>2248</SUB>> ]
+"11776" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>2240</SUB>> ]
+"11784" [label = <(FIELD_IDENTIFIER,IsAssignableFrom,IsAssignableFrom)<SUB>2241</SUB>> ]
+"11786" [label = <(&lt;operator&gt;.indirectFieldAccess,initial_object-&gt;GetClass)<SUB>2241</SUB>> ]
+"11793" [label = <(&lt;operator&gt;.fieldAccess,soa.Vm)<SUB>2242</SUB>> ]
+"11801" [label = <(mirror::Class::PrettyDescriptor,mirror::Class::PrettyDescriptor(initial_object-&gt;GetClass()))<SUB>2244</SUB>> ]
+"11811" [label = <(FIELD_IDENTIFIER,c_str,c_str)<SUB>2244</SUB>> ]
+"11814" [label = <(PrettyDescriptor,element_class-&gt;PrettyDescriptor())<SUB>2245</SUB>> ]
+"11818" [label = <(FIELD_IDENTIFIER,c_str,c_str)<SUB>2245</SUB>> ]
+"11826" [label = <(&lt;operator&gt;.assignment,i = 0)<SUB>2248</SUB>> ]
+"11835" [label = <(&lt;operator&gt;.greaterThan,result-&gt;SetWithoutChecks&lt;false&gt;(i, initial_object))<SUB>2249</SUB>> ]
+"11788" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>2241</SUB>> ]
+"11795" [label = <(FIELD_IDENTIFIER,Vm,Vm)<SUB>2242</SUB>> ]
+"11802" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class::PrettyDescriptor)<SUB>2244</SUB>> ]
+"11807" [label = <(GetClass,initial_object-&gt;GetClass())<SUB>2244</SUB>> ]
+"11815" [label = <(&lt;operator&gt;.indirectFieldAccess,element_class-&gt;PrettyDescriptor)<SUB>2245</SUB>> ]
+"11836" [label = <(&lt;operator&gt;.lessThan,result-&gt;SetWithoutChecks&lt;false)<SUB>2249</SUB>> ]
+"11841" [label = <(&lt;operator&gt;.bracketedPrimary,(i, initial_object))<SUB>2249</SUB>> ]
+"11803" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2244</SUB>> ]
+"11806" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>2244</SUB>> ]
+"11808" [label = <(&lt;operator&gt;.indirectFieldAccess,initial_object-&gt;GetClass)<SUB>2244</SUB>> ]
+"11817" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>2245</SUB>> ]
+"11837" [label = <(&lt;operator&gt;.indirectFieldAccess,result-&gt;SetWithoutChecks)<SUB>2249</SUB>> ]
+"11842" [label = <(&lt;operator&gt;.expressionList,i, initial_object)<SUB>2249</SUB>> ]
+"11810" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>2244</SUB>> ]
+"11839" [label = <(FIELD_IDENTIFIER,SetWithoutChecks,SetWithoutChecks)<SUB>2249</SUB>> ]
+"11580" [label = <(METHOD,NewObjectArray)<SUB>2208</SUB>> ]
+"11853" [label = <(METHOD_RETURN,jobjectArray)<SUB>2208</SUB>> ]
+  "11602" -> "11607" 
+  "11602" -> "11621" 
+  "11621" -> "11628" 
+  "11623" -> "11637" 
+  "11702" -> "11734" 
+  "11845" -> "11853" 
+  "11587" -> "11594" 
+  "11587" -> "11602" 
+  "11624" -> "11623" 
+  "11631" -> "11653" 
+  "11674" -> "11688" 
+  "11683" -> "11696" 
+  "11703" -> "11718" 
+  "11714" -> "11702" 
+  "11733" -> "11747" 
+  "11733" -> "11850" 
+  "11846" -> "11845" 
+  "11588" -> "11587" 
+  "11592" -> "11600" 
+  "11600" -> "11853" 
+  "11626" -> "11624" 
+  "11632" -> "11643" 
+  "11639" -> "11631" 
+  "11649" -> "11660" 
+  "11649" -> "11681" 
+  "11676" -> "11674" 
+  "11685" -> "11683" 
+  "11695" -> "11700" 
+  "11695" -> "11708" 
+  "11704" -> "11712" 
+  "11709" -> "11703" 
+  "11715" -> "11725" 
+  "11722" -> "11714" 
+  "11734" -> "11733" 
+  "11734" -> "11737" 
+  "11737" -> "11733" 
+  "11741" -> "11759" 
+  "11847" -> "11846" 
+  "11593" -> "11592" 
+  "11606" -> "11613" 
+  "11606" -> "11621" 
+  "11628" -> "11626" 
+  "11633" -> "11632" 
+  "11640" -> "11639" 
+  "11650" -> "11649" 
+  "11655" -> "11671" 
+  "11671" -> "11853" 
+  "11677" -> "11676" 
+  "11686" -> "11692" 
+  "11689" -> "11685" 
+  "11696" -> "11695" 
+  "11700" -> "11853" 
+  "11706" -> "11704" 
+  "11710" -> "11709" 
+  "11716" -> "11721" 
+  "11719" -> "11715" 
+  "11723" -> "11729" 
+  "11726" -> "11722" 
+  "11742" -> "11753" 
+  "11749" -> "11741" 
+  "11759" -> "11769" 
+  "11759" -> "11850" 
+  "11848" -> "11847" 
+  "11594" -> "11596" 
+  "11596" -> "11593" 
+  "11607" -> "11606" 
+  "11611" -> "11618" 
+  "11618" -> "11853" 
+  "11635" -> "11633" 
+  "11641" -> "11646" 
+  "11644" -> "11640" 
+  "11651" -> "11650" 
+  "11656" -> "11669" 
+  "11664" -> "11655" 
+  "11678" -> "11682" 
+  "11682" -> "11677" 
+  "11688" -> "11686" 
+  "11690" -> "11689" 
+  "11708" -> "11706" 
+  "11712" -> "11710" 
+  "11718" -> "11716" 
+  "11721" -> "11719" 
+  "11725" -> "11723" 
+  "11727" -> "11726" 
+  "11743" -> "11742" 
+  "11750" -> "11749" 
+  "11763" -> "11784" 
+  "11850" -> "11848" 
+  "11612" -> "11611" 
+  "11637" -> "11635" 
+  "11643" -> "11641" 
+  "11646" -> "11644" 
+  "11653" -> "11651" 
+  "11657" -> "11661" 
+  "11661" -> "11656" 
+  "11665" -> "11664" 
+  "11679" -> "11678" 
+  "11692" -> "11690" 
+  "11729" -> "11727" 
+  "11745" -> "11743" 
+  "11751" -> "11756" 
+  "11754" -> "11750" 
+  "11764" -> "11776" 
+  "11771" -> "11763" 
+  "11779" -> "11795" 
+  "11779" -> "11826" 
+  "11613" -> "11615" 
+  "11615" -> "11612" 
+  "11658" -> "11657" 
+  "11666" -> "11670" 
+  "11670" -> "11665" 
+  "11681" -> "11679" 
+  "11747" -> "11745" 
+  "11753" -> "11751" 
+  "11756" -> "11754" 
+  "11765" -> "11764" 
+  "11772" -> "11771" 
+  "11780" -> "11779" 
+  "11790" -> "11819" 
+  "11819" -> "11853" 
+  "11660" -> "11658" 
+  "11667" -> "11666" 
+  "11767" -> "11765" 
+  "11773" -> "11777" 
+  "11777" -> "11772" 
+  "11781" -> "11780" 
+  "11791" -> "11803" 
+  "11799" -> "11817" 
+  "11812" -> "11790" 
+  "11669" -> "11667" 
+  "11769" -> "11767" 
+  "11774" -> "11773" 
+  "11782" -> "11788" 
+  "11785" -> "11781" 
+  "11792" -> "11796" 
+  "11796" -> "11791" 
+  "11800" -> "11799" 
+  "11813" -> "11812" 
+  "11829" -> "11839" 
+  "11829" -> "11850" 
+  "11832" -> "11829" 
+  "11776" -> "11774" 
+  "11784" -> "11782" 
+  "11786" -> "11785" 
+  "11793" -> "11792" 
+  "11801" -> "11811" 
+  "11811" -> "11800" 
+  "11814" -> "11818" 
+  "11818" -> "11813" 
+  "11826" -> "11829" 
+  "11835" -> "11832" 
+  "11788" -> "11786" 
+  "11795" -> "11793" 
+  "11802" -> "11810" 
+  "11807" -> "11801" 
+  "11815" -> "11814" 
+  "11836" -> "11842" 
+  "11841" -> "11835" 
+  "11803" -> "11806" 
+  "11806" -> "11802" 
+  "11808" -> "11807" 
+  "11817" -> "11815" 
+  "11837" -> "11836" 
+  "11842" -> "11841" 
+  "11810" -> "11808" 
+  "11839" -> "11837" 
+  "11580" -> "11588" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/219-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/219-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/219-cfg.dot	2023-06-07 19:35:28.367384337 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/219-cfg.dot	2023-06-07 19:35:34.887383765 +0330
@@ -1,9 +1,9 @@
-digraph "NewFloatArray" {  
-"11915" [label = <(RETURN,return NewPrimitiveArray&lt;jfloatArray, mirror::FloatArray&gt;(env, length);,return NewPrimitiveArray&lt;jfloatArray, mirror::FloatArray&gt;(env, length);)<SUB>2328</SUB>> ]
-"11916" [label = <(NewPrimitiveArray&lt;jfloatArray,mirror::FloatArray&gt;,NewPrimitiveArray&lt;jfloatArray, mirror::FloatArray&gt;(env, length))<SUB>2328</SUB>> ]
-"11911" [label = <(METHOD,NewFloatArray)<SUB>2327</SUB>> ]
-"11919" [label = <(METHOD_RETURN,jfloatArray)<SUB>2327</SUB>> ]
-  "11915" -> "11919" 
-  "11916" -> "11915" 
-  "11911" -> "11916" 
+digraph "NewShortArray" {  
+"11859" [label = <(RETURN,return NewPrimitiveArray&lt;jshortArray, mirror::ShortArray&gt;(env, length);,return NewPrimitiveArray&lt;jshortArray, mirror::ShortArray&gt;(env, length);)<SUB>2258</SUB>> ]
+"11860" [label = <(NewPrimitiveArray&lt;jshortArray,mirror::ShortArray&gt;,NewPrimitiveArray&lt;jshortArray, mirror::ShortArray&gt;(env, length))<SUB>2258</SUB>> ]
+"11855" [label = <(METHOD,NewShortArray)<SUB>2257</SUB>> ]
+"11863" [label = <(METHOD_RETURN,jshortArray)<SUB>2257</SUB>> ]
+  "11859" -> "11863" 
+  "11860" -> "11859" 
+  "11855" -> "11860" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/22-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/22-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/22-cfg.dot	2023-06-07 19:35:28.217384348 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/22-cfg.dot	2023-06-07 19:35:34.747383777 +0330
@@ -1,5 +1,5 @@
-digraph "NotifySetObjectField" {  
-"575" [label = <(METHOD,NotifySetObjectField)<SUB>366</SUB>> ]
-"580" [label = <(METHOD_RETURN,void)<SUB>366</SUB>> ]
-  "575" -> "580" 
+digraph "ThrowNoSuchMethodError" {  
+"498" [label = <(METHOD,ThrowNoSuchMethodError)<SUB>387</SUB>> ]
+"505" [label = <(METHOD_RETURN,void)<SUB>387</SUB>> ]
+  "498" -> "505" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/220-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/220-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/220-cfg.dot	2023-06-07 19:35:28.367384337 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/220-cfg.dot	2023-06-07 19:35:34.887383765 +0330
@@ -1,9 +1,185 @@
-digraph "NewIntArray" {  
-"11925" [label = <(RETURN,return NewPrimitiveArray&lt;jintArray, mirror::IntArray&gt;(env, length);,return NewPrimitiveArray&lt;jintArray, mirror::IntArray&gt;(env, length);)<SUB>2332</SUB>> ]
-"11926" [label = <(NewPrimitiveArray&lt;jintArray,mirror::IntArray&gt;,NewPrimitiveArray&lt;jintArray, mirror::IntArray&gt;(env, length))<SUB>2332</SUB>> ]
-"11921" [label = <(METHOD,NewIntArray)<SUB>2331</SUB>> ]
-"11929" [label = <(METHOD_RETURN,jintArray)<SUB>2331</SUB>> ]
-  "11925" -> "11929" 
-  "11926" -> "11925" 
-  "11921" -> "11926" 
+digraph "GetPrimitiveArrayCritical" {  
+"11870" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_array))<SUB>2262</SUB>> ]
+"11889" [label = <(soa,soa(env))<SUB>2263</SUB>> ]
+"11891" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Array&gt; array = soa.Decode&lt;mirror::Array&gt;(java_array))<SUB>2264</SUB>> ]
+"11941" [label = <(&lt;operator&gt;.assignment,* heap = Runtime::Current()-&gt;GetHeap())<SUB>2270</SUB>> ]
+"11999" [label = <(RETURN,return array-&gt;GetRawData(array-&gt;GetClass()-&gt;GetComponentSize(), 0);,return array-&gt;GetRawData(array-&gt;GetClass()-&gt;GetComponentSize(), 0);)<SUB>2285</SUB>> ]
+"11892" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Array&gt; array)<SUB>2264</SUB>> ]
+"11899" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Array&gt;(java_array))<SUB>2264</SUB>> ]
+"11909" [label = <(UNLIKELY,UNLIKELY(!array-&gt;GetClass()-&gt;IsPrimitiveArray()))<SUB>2265</SUB>> ]
+"11943" [label = <(GetHeap,Runtime::Current()-&gt;GetHeap())<SUB>2270</SUB>> ]
+"11951" [label = <(IsMovableObject,heap-&gt;IsMovableObject(array))<SUB>2271</SUB>> ]
+"11991" [label = <(&lt;operator&gt;.notEquals,is_copy != nullptr)<SUB>2282</SUB>> ]
+"12000" [label = <(GetRawData,array-&gt;GetRawData(array-&gt;GetClass()-&gt;GetComponentSize(), 0))<SUB>2285</SUB>> ]
+"11893" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Array)<SUB>2264</SUB>> ]
+"11900" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Array)<SUB>2264</SUB>> ]
+"11910" [label = <(&lt;operator&gt;.logicalNot,!array-&gt;GetClass()-&gt;IsPrimitiveArray())<SUB>2265</SUB>> ]
+"11919" [label = <(JniAbortF,soa.Vm()-&gt;JniAbortF(&quot;GetPrimitiveArrayCritical&quot;, &quot;expected primitive array, given %s&quot;,\012                          array-&gt;GetClass()-&gt;PrettyDescriptor().c_str()))<SUB>2266</SUB>> ]
+"11938" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2268</SUB>> ]
+"11944" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetHeap)<SUB>2270</SUB>> ]
+"11952" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;IsMovableObject)<SUB>2271</SUB>> ]
+"11979" [label = <(&lt;operator&gt;.assignment,array = soa.Decode&lt;mirror::Array&gt;(java_array))<SUB>2280</SUB>> ]
+"11995" [label = <(&lt;operator&gt;.assignment,*is_copy = JNI_FALSE)<SUB>2283</SUB>> ]
+"12001" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetRawData)<SUB>2285</SUB>> ]
+"12004" [label = <(GetComponentSize,array-&gt;GetClass()-&gt;GetComponentSize())<SUB>2285</SUB>> ]
+"11874" [label = <(UNLIKELY,UNLIKELY((java_array) == nullptr))<SUB>2262</SUB>> ]
+"11895" [label = <(&lt;operator&gt;.fieldAccess,mirror::Array)<SUB>2264</SUB>> ]
+"11901" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2264</SUB>> ]
+"11904" [label = <(&lt;operator&gt;.fieldAccess,mirror::Array)<SUB>2264</SUB>> ]
+"11911" [label = <(IsPrimitiveArray,array-&gt;GetClass()-&gt;IsPrimitiveArray())<SUB>2265</SUB>> ]
+"11920" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Vm()-&gt;JniAbortF)<SUB>2266</SUB>> ]
+"11928" [label = <(c_str,array-&gt;GetClass()-&gt;PrettyDescriptor().c_str())<SUB>2267</SUB>> ]
+"11945" [label = <(Runtime::Current,Runtime::Current())<SUB>2270</SUB>> ]
+"11949" [label = <(FIELD_IDENTIFIER,GetHeap,GetHeap)<SUB>2270</SUB>> ]
+"11954" [label = <(FIELD_IDENTIFIER,IsMovableObject,IsMovableObject)<SUB>2271</SUB>> ]
+"11958" [label = <(&lt;operator&gt;.logicalNot,!kUseReadBarrier)<SUB>2272</SUB>> ]
+"11981" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Array&gt;(java_array))<SUB>2280</SUB>> ]
+"11996" [label = <(&lt;operator&gt;.indirection,*is_copy)<SUB>2283</SUB>> ]
+"12003" [label = <(FIELD_IDENTIFIER,GetRawData,GetRawData)<SUB>2285</SUB>> ]
+"12005" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass()-&gt;GetComponentSize)<SUB>2285</SUB>> ]
+"11875" [label = <(&lt;operator&gt;.equals,(java_array) == nullptr)<SUB>2262</SUB>> ]
+"11879" [label = <(CHECK_NON_NULL_ARGUMENT(java_array),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_array == null&quot;))<SUB>2262</SUB>> ]
+"11886" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_array),CHECK_NON_NULL_ARGUMENT(java_array))<SUB>2262</SUB>> ]
+"11897" [label = <(FIELD_IDENTIFIER,Array,Array)<SUB>2264</SUB>> ]
+"11903" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2264</SUB>> ]
+"11906" [label = <(FIELD_IDENTIFIER,Array,Array)<SUB>2264</SUB>> ]
+"11912" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass()-&gt;IsPrimitiveArray)<SUB>2265</SUB>> ]
+"11921" [label = <(Vm,soa.Vm())<SUB>2266</SUB>> ]
+"11925" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2266</SUB>> ]
+"11929" [label = <(&lt;operator&gt;.fieldAccess,array-&gt;GetClass()-&gt;PrettyDescriptor().c_str)<SUB>2267</SUB>> ]
+"11946" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>2270</SUB>> ]
+"11961" [label = <(IncrementDisableMovingGC,heap-&gt;IncrementDisableMovingGC(soa.Self()))<SUB>2273</SUB>> ]
+"11982" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Array)<SUB>2280</SUB>> ]
+"12006" [label = <(GetClass,array-&gt;GetClass())<SUB>2285</SUB>> ]
+"12010" [label = <(FIELD_IDENTIFIER,GetComponentSize,GetComponentSize)<SUB>2285</SUB>> ]
+"11880" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2262</SUB>> ]
+"11913" [label = <(GetClass,array-&gt;GetClass())<SUB>2265</SUB>> ]
+"11917" [label = <(FIELD_IDENTIFIER,IsPrimitiveArray,IsPrimitiveArray)<SUB>2265</SUB>> ]
+"11922" [label = <(&lt;operator&gt;.fieldAccess,soa.Vm)<SUB>2266</SUB>> ]
+"11930" [label = <(PrettyDescriptor,array-&gt;GetClass()-&gt;PrettyDescriptor())<SUB>2267</SUB>> ]
+"11937" [label = <(FIELD_IDENTIFIER,c_str,c_str)<SUB>2267</SUB>> ]
+"11948" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>2270</SUB>> ]
+"11962" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;IncrementDisableMovingGC)<SUB>2273</SUB>> ]
+"11965" [label = <(Self,soa.Self())<SUB>2273</SUB>> ]
+"11971" [label = <(IncrementDisableThreadFlip,heap-&gt;IncrementDisableThreadFlip(soa.Self()))<SUB>2277</SUB>> ]
+"11983" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2280</SUB>> ]
+"11986" [label = <(&lt;operator&gt;.fieldAccess,mirror::Array)<SUB>2280</SUB>> ]
+"12007" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass)<SUB>2285</SUB>> ]
+"11881" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2262</SUB>> ]
+"11883" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2262</SUB>> ]
+"11914" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass)<SUB>2265</SUB>> ]
+"11924" [label = <(FIELD_IDENTIFIER,Vm,Vm)<SUB>2266</SUB>> ]
+"11931" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass()-&gt;PrettyDescriptor)<SUB>2267</SUB>> ]
+"11964" [label = <(FIELD_IDENTIFIER,IncrementDisableMovingGC,IncrementDisableMovingGC)<SUB>2273</SUB>> ]
+"11966" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>2273</SUB>> ]
+"11972" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;IncrementDisableThreadFlip)<SUB>2277</SUB>> ]
+"11975" [label = <(Self,soa.Self())<SUB>2277</SUB>> ]
+"11985" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2280</SUB>> ]
+"11988" [label = <(FIELD_IDENTIFIER,Array,Array)<SUB>2280</SUB>> ]
+"12009" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>2285</SUB>> ]
+"11916" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>2265</SUB>> ]
+"11932" [label = <(GetClass,array-&gt;GetClass())<SUB>2267</SUB>> ]
+"11936" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>2267</SUB>> ]
+"11968" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>2273</SUB>> ]
+"11974" [label = <(FIELD_IDENTIFIER,IncrementDisableThreadFlip,IncrementDisableThreadFlip)<SUB>2277</SUB>> ]
+"11976" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>2277</SUB>> ]
+"11933" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass)<SUB>2267</SUB>> ]
+"11978" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>2277</SUB>> ]
+"11935" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>2267</SUB>> ]
+"11865" [label = <(METHOD,GetPrimitiveArrayCritical)<SUB>2261</SUB>> ]
+"12012" [label = <(METHOD_RETURN,void*)<SUB>2261</SUB>> ]
+  "11870" -> "11875" 
+  "11870" -> "11889" 
+  "11889" -> "11897" 
+  "11891" -> "11916" 
+  "11941" -> "11954" 
+  "11999" -> "12012" 
+  "11892" -> "11903" 
+  "11899" -> "11891" 
+  "11909" -> "11924" 
+  "11909" -> "11948" 
+  "11943" -> "11941" 
+  "11951" -> "11958" 
+  "11951" -> "11991" 
+  "11991" -> "11996" 
+  "11991" -> "12003" 
+  "12000" -> "11999" 
+  "11893" -> "11892" 
+  "11900" -> "11899" 
+  "11910" -> "11909" 
+  "11919" -> "11938" 
+  "11938" -> "12012" 
+  "11944" -> "11943" 
+  "11952" -> "11951" 
+  "11979" -> "11991" 
+  "11995" -> "12003" 
+  "12001" -> "12009" 
+  "12004" -> "12000" 
+  "11874" -> "11881" 
+  "11874" -> "11889" 
+  "11895" -> "11893" 
+  "11901" -> "11906" 
+  "11904" -> "11900" 
+  "11911" -> "11910" 
+  "11920" -> "11935" 
+  "11928" -> "11919" 
+  "11945" -> "11949" 
+  "11949" -> "11944" 
+  "11954" -> "11952" 
+  "11958" -> "11964" 
+  "11958" -> "11974" 
+  "11981" -> "11979" 
+  "11996" -> "11995" 
+  "12003" -> "12001" 
+  "12005" -> "12004" 
+  "11875" -> "11874" 
+  "11879" -> "11886" 
+  "11886" -> "12012" 
+  "11897" -> "11895" 
+  "11903" -> "11901" 
+  "11906" -> "11904" 
+  "11912" -> "11911" 
+  "11921" -> "11925" 
+  "11925" -> "11920" 
+  "11929" -> "11928" 
+  "11946" -> "11945" 
+  "11961" -> "11985" 
+  "11982" -> "11981" 
+  "12006" -> "12010" 
+  "12010" -> "12005" 
+  "11880" -> "11879" 
+  "11913" -> "11917" 
+  "11917" -> "11912" 
+  "11922" -> "11921" 
+  "11930" -> "11937" 
+  "11937" -> "11929" 
+  "11948" -> "11946" 
+  "11962" -> "11968" 
+  "11965" -> "11961" 
+  "11971" -> "11985" 
+  "11983" -> "11988" 
+  "11986" -> "11982" 
+  "12007" -> "12006" 
+  "11881" -> "11883" 
+  "11883" -> "11880" 
+  "11914" -> "11913" 
+  "11924" -> "11922" 
+  "11931" -> "11930" 
+  "11964" -> "11962" 
+  "11966" -> "11965" 
+  "11972" -> "11978" 
+  "11975" -> "11971" 
+  "11985" -> "11983" 
+  "11988" -> "11986" 
+  "12009" -> "12007" 
+  "11916" -> "11914" 
+  "11932" -> "11936" 
+  "11936" -> "11931" 
+  "11968" -> "11966" 
+  "11974" -> "11972" 
+  "11976" -> "11975" 
+  "11933" -> "11932" 
+  "11978" -> "11976" 
+  "11935" -> "11933" 
+  "11865" -> "11870" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/221-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/221-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/221-cfg.dot	2023-06-07 19:35:28.367384337 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/221-cfg.dot	2023-06-07 19:35:34.887383765 +0330
@@ -1,9 +1,112 @@
-digraph "NewLongArray" {  
-"11935" [label = <(RETURN,return NewPrimitiveArray&lt;jlongArray, mirror::LongArray&gt;(env, length);,return NewPrimitiveArray&lt;jlongArray, mirror::LongArray&gt;(env, length);)<SUB>2336</SUB>> ]
-"11936" [label = <(NewPrimitiveArray&lt;jlongArray,mirror::LongArray&gt;,NewPrimitiveArray&lt;jlongArray, mirror::LongArray&gt;(env, length))<SUB>2336</SUB>> ]
-"11931" [label = <(METHOD,NewLongArray)<SUB>2335</SUB>> ]
-"11939" [label = <(METHOD_RETURN,jlongArray)<SUB>2335</SUB>> ]
-  "11935" -> "11939" 
-  "11936" -> "11935" 
-  "11931" -> "11936" 
+digraph "ReleasePrimitiveArrayCritical" {  
+"12020" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>2290</SUB>> ]
+"12038" [label = <(soa,soa(env))<SUB>2291</SUB>> ]
+"12040" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Array&gt; array = soa.Decode&lt;mirror::Array&gt;(java_array))<SUB>2292</SUB>> ]
+"12089" [label = <(&lt;operator&gt;.assignment,component_size = array-&gt;GetClass()-&gt;GetComponentSize())<SUB>2298</SUB>> ]
+"12098" [label = <(ReleasePrimitiveArray,ReleasePrimitiveArray(soa, array, component_size, elements, mode))<SUB>2299</SUB>> ]
+"12041" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Array&gt; array)<SUB>2292</SUB>> ]
+"12048" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Array&gt;(java_array))<SUB>2292</SUB>> ]
+"12058" [label = <(UNLIKELY,UNLIKELY(!array-&gt;GetClass()-&gt;IsPrimitiveArray()))<SUB>2293</SUB>> ]
+"12091" [label = <(GetComponentSize,array-&gt;GetClass()-&gt;GetComponentSize())<SUB>2298</SUB>> ]
+"12042" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Array)<SUB>2292</SUB>> ]
+"12049" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Array)<SUB>2292</SUB>> ]
+"12059" [label = <(&lt;operator&gt;.logicalNot,!array-&gt;GetClass()-&gt;IsPrimitiveArray())<SUB>2293</SUB>> ]
+"12068" [label = <(JniAbortF,soa.Vm()-&gt;JniAbortF(&quot;ReleasePrimitiveArrayCritical&quot;, &quot;expected primitive array, given %s&quot;,\012                          array-&gt;GetClass()-&gt;PrettyDescriptor().c_str()))<SUB>2294</SUB>> ]
+"12087" [label = <(RETURN,return;,return;)<SUB>2296</SUB>> ]
+"12092" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass()-&gt;GetComponentSize)<SUB>2298</SUB>> ]
+"12024" [label = <(UNLIKELY,UNLIKELY((java_array) == nullptr))<SUB>2290</SUB>> ]
+"12044" [label = <(&lt;operator&gt;.fieldAccess,mirror::Array)<SUB>2292</SUB>> ]
+"12050" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2292</SUB>> ]
+"12053" [label = <(&lt;operator&gt;.fieldAccess,mirror::Array)<SUB>2292</SUB>> ]
+"12060" [label = <(IsPrimitiveArray,array-&gt;GetClass()-&gt;IsPrimitiveArray())<SUB>2293</SUB>> ]
+"12069" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Vm()-&gt;JniAbortF)<SUB>2294</SUB>> ]
+"12077" [label = <(c_str,array-&gt;GetClass()-&gt;PrettyDescriptor().c_str())<SUB>2295</SUB>> ]
+"12093" [label = <(GetClass,array-&gt;GetClass())<SUB>2298</SUB>> ]
+"12097" [label = <(FIELD_IDENTIFIER,GetComponentSize,GetComponentSize)<SUB>2298</SUB>> ]
+"12025" [label = <(&lt;operator&gt;.equals,(java_array) == nullptr)<SUB>2290</SUB>> ]
+"12029" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_array == null&quot;))<SUB>2290</SUB>> ]
+"12036" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>2290</SUB>> ]
+"12046" [label = <(FIELD_IDENTIFIER,Array,Array)<SUB>2292</SUB>> ]
+"12052" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2292</SUB>> ]
+"12055" [label = <(FIELD_IDENTIFIER,Array,Array)<SUB>2292</SUB>> ]
+"12061" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass()-&gt;IsPrimitiveArray)<SUB>2293</SUB>> ]
+"12070" [label = <(Vm,soa.Vm())<SUB>2294</SUB>> ]
+"12074" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2294</SUB>> ]
+"12078" [label = <(&lt;operator&gt;.fieldAccess,array-&gt;GetClass()-&gt;PrettyDescriptor().c_str)<SUB>2295</SUB>> ]
+"12094" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass)<SUB>2298</SUB>> ]
+"12030" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2290</SUB>> ]
+"12062" [label = <(GetClass,array-&gt;GetClass())<SUB>2293</SUB>> ]
+"12066" [label = <(FIELD_IDENTIFIER,IsPrimitiveArray,IsPrimitiveArray)<SUB>2293</SUB>> ]
+"12071" [label = <(&lt;operator&gt;.fieldAccess,soa.Vm)<SUB>2294</SUB>> ]
+"12079" [label = <(PrettyDescriptor,array-&gt;GetClass()-&gt;PrettyDescriptor())<SUB>2295</SUB>> ]
+"12086" [label = <(FIELD_IDENTIFIER,c_str,c_str)<SUB>2295</SUB>> ]
+"12096" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>2298</SUB>> ]
+"12031" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2290</SUB>> ]
+"12033" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2290</SUB>> ]
+"12063" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass)<SUB>2293</SUB>> ]
+"12073" [label = <(FIELD_IDENTIFIER,Vm,Vm)<SUB>2294</SUB>> ]
+"12080" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass()-&gt;PrettyDescriptor)<SUB>2295</SUB>> ]
+"12065" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>2293</SUB>> ]
+"12081" [label = <(GetClass,array-&gt;GetClass())<SUB>2295</SUB>> ]
+"12085" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>2295</SUB>> ]
+"12082" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass)<SUB>2295</SUB>> ]
+"12084" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>2295</SUB>> ]
+"12014" [label = <(METHOD,ReleasePrimitiveArrayCritical)<SUB>2288</SUB>> ]
+"12104" [label = <(METHOD_RETURN,void)<SUB>2288</SUB>> ]
+  "12020" -> "12025" 
+  "12020" -> "12038" 
+  "12038" -> "12046" 
+  "12040" -> "12065" 
+  "12089" -> "12098" 
+  "12098" -> "12104" 
+  "12041" -> "12052" 
+  "12048" -> "12040" 
+  "12058" -> "12073" 
+  "12058" -> "12096" 
+  "12091" -> "12089" 
+  "12042" -> "12041" 
+  "12049" -> "12048" 
+  "12059" -> "12058" 
+  "12068" -> "12087" 
+  "12087" -> "12104" 
+  "12092" -> "12091" 
+  "12024" -> "12031" 
+  "12024" -> "12038" 
+  "12044" -> "12042" 
+  "12050" -> "12055" 
+  "12053" -> "12049" 
+  "12060" -> "12059" 
+  "12069" -> "12084" 
+  "12077" -> "12068" 
+  "12093" -> "12097" 
+  "12097" -> "12092" 
+  "12025" -> "12024" 
+  "12029" -> "12036" 
+  "12036" -> "12104" 
+  "12046" -> "12044" 
+  "12052" -> "12050" 
+  "12055" -> "12053" 
+  "12061" -> "12060" 
+  "12070" -> "12074" 
+  "12074" -> "12069" 
+  "12078" -> "12077" 
+  "12094" -> "12093" 
+  "12030" -> "12029" 
+  "12062" -> "12066" 
+  "12066" -> "12061" 
+  "12071" -> "12070" 
+  "12079" -> "12086" 
+  "12086" -> "12078" 
+  "12096" -> "12094" 
+  "12031" -> "12033" 
+  "12033" -> "12030" 
+  "12063" -> "12062" 
+  "12073" -> "12071" 
+  "12080" -> "12079" 
+  "12065" -> "12063" 
+  "12081" -> "12085" 
+  "12085" -> "12080" 
+  "12082" -> "12081" 
+  "12084" -> "12082" 
+  "12014" -> "12020" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/222-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/222-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/222-cfg.dot	2023-06-07 19:35:28.367384337 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/222-cfg.dot	2023-06-07 19:35:34.887383765 +0330
@@ -1,327 +1,9 @@
-digraph "NewObjectArray" {  
-"11963" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(element_jclass))<SUB>2345</SUB>> ]
-"11982" [label = <(soa,soa(env))<SUB>2348</SUB>> ]
-"11984" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; array_class)<SUB>2349</SUB>> ]
-"12063" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::ObjectArray&lt;mirror::Object&gt;&gt; result =\012        mirror::ObjectArray&lt;mirror::Object&gt;::Alloc(soa.Self(), array_class, length))<SUB>2366</SUB>> ]
-"12206" [label = <(RETURN,return soa.AddLocalReference&lt;jobjectArray&gt;(result);,return soa.AddLocalReference&lt;jobjectArray&gt;(result);)<SUB>2385</SUB>> ]
-"11948" [label = <(UNLIKELY,UNLIKELY(length &lt; 0))<SUB>2341</SUB>> ]
-"11985" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>2349</SUB>> ]
-"11992" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; element_class = soa.Decode&lt;mirror::Class&gt;(element_jclass))<SUB>2351</SUB>> ]
-"12035" [label = <(&lt;operator&gt;.assignment,* class_linker = Runtime::Current()-&gt;GetClassLinker())<SUB>2358</SUB>> ]
-"12044" [label = <(&lt;operator&gt;.assignment,array_class = class_linker-&gt;FindArrayClass(soa.Self(), element_class))<SUB>2359</SUB>> ]
-"12064" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::ObjectArray&lt;mirror::Object&gt;&gt; result)<SUB>2366</SUB>> ]
-"12075" [label = <(&lt;operator&gt;.greaterThan,mirror::ObjectArray&lt;mirror::Object&gt;::Alloc(soa.Self(), array_class, length))<SUB>2367</SUB>> ]
-"12094" [label = <(&lt;operator&gt;.logicalAnd,result != nullptr &amp;&amp; initial_element != nullptr)<SUB>2368</SUB>> ]
-"12207" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobjectArray&gt;(result))<SUB>2385</SUB>> ]
-"11949" [label = <(&lt;operator&gt;.lessThan,length &lt; 0)<SUB>2341</SUB>> ]
-"11953" [label = <(JniAbortF,JavaVmExtFromEnv(env)-&gt;JniAbortF(&quot;NewObjectArray&quot;, &quot;negative array length: %d&quot;, length))<SUB>2342</SUB>> ]
-"11961" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2343</SUB>> ]
-"11987" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2349</SUB>> ]
-"11993" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; element_class)<SUB>2351</SUB>> ]
-"12000" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(element_jclass))<SUB>2351</SUB>> ]
-"12010" [label = <(UNLIKELY,UNLIKELY(element_class-&gt;IsPrimitive()))<SUB>2352</SUB>> ]
-"12037" [label = <(GetClassLinker,Runtime::Current()-&gt;GetClassLinker())<SUB>2358</SUB>> ]
-"12046" [label = <(FindArrayClass,class_linker-&gt;FindArrayClass(soa.Self(), element_class))<SUB>2359</SUB>> ]
-"12056" [label = <(UNLIKELY,UNLIKELY(array_class == nullptr))<SUB>2360</SUB>> ]
-"12065" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::ObjectArray)<SUB>2366</SUB>> ]
-"12070" [label = <(&lt;operator&gt;.arithmeticShiftRight,mirror::Object&gt;&gt; result)<SUB>2366</SUB>> ]
-"12076" [label = <(&lt;operator&gt;.lessThan,mirror::ObjectArray&lt;mirror::Object)<SUB>2367</SUB>> ]
-"12083" [label = <(::Alloc,::Alloc(soa.Self(), array_class, length))<SUB>2367</SUB>> ]
-"12095" [label = <(&lt;operator&gt;.notEquals,result != nullptr)<SUB>2368</SUB>> ]
-"12098" [label = <(&lt;operator&gt;.notEquals,initial_element != nullptr)<SUB>2368</SUB>> ]
-"12102" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; initial_object = soa.Decode&lt;mirror::Object&gt;(initial_element))<SUB>2369</SUB>> ]
-"12208" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobjectArray)<SUB>2385</SUB>> ]
-"11954" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>2342</SUB>> ]
-"11967" [label = <(UNLIKELY,UNLIKELY((element_jclass) == nullptr))<SUB>2345</SUB>> ]
-"11989" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>2349</SUB>> ]
-"11994" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>2351</SUB>> ]
-"12001" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>2351</SUB>> ]
-"12011" [label = <(IsPrimitive,element_class-&gt;IsPrimitive())<SUB>2352</SUB>> ]
-"12016" [label = <(JniAbortF,soa.Vm()-&gt;JniAbortF(&quot;NewObjectArray&quot;,\012 &quot;not an object type: %s&quot;,\012                            element_class-&gt;PrettyDescriptor().c_str()))<SUB>2353</SUB>> ]
-"12032" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2356</SUB>> ]
-"12038" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetClassLinker)<SUB>2358</SUB>> ]
-"12047" [label = <(&lt;operator&gt;.indirectFieldAccess,class_linker-&gt;FindArrayClass)<SUB>2359</SUB>> ]
-"12050" [label = <(Self,soa.Self())<SUB>2359</SUB>> ]
-"12057" [label = <(&lt;operator&gt;.equals,array_class == nullptr)<SUB>2360</SUB>> ]
-"12061" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2361</SUB>> ]
-"12067" [label = <(&lt;operator&gt;.fieldAccess,mirror::ObjectArray)<SUB>2366</SUB>> ]
-"12071" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2366</SUB>> ]
-"12077" [label = <(&lt;operator&gt;.fieldAccess,mirror::ObjectArray)<SUB>2367</SUB>> ]
-"12080" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2367</SUB>> ]
-"12084" [label = <(&lt;operator&gt;.fieldAccess,::Alloc)<SUB>2367</SUB>> ]
-"12087" [label = <(Self,soa.Self())<SUB>2367</SUB>> ]
-"12103" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; initial_object)<SUB>2369</SUB>> ]
-"12110" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(initial_element))<SUB>2369</SUB>> ]
-"12120" [label = <(&lt;operator&gt;.notEquals,initial_object != nullptr)<SUB>2370</SUB>> ]
-"12209" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>2385</SUB>> ]
-"11955" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2342</SUB>> ]
-"11957" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2342</SUB>> ]
-"11968" [label = <(&lt;operator&gt;.equals,(element_jclass) == nullptr)<SUB>2345</SUB>> ]
-"11972" [label = <(CHECK_NON_NULL_ARGUMENT(element_jclass),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;element_jclass == null&quot;))<SUB>2345</SUB>> ]
-"11979" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(element_jclass),CHECK_NON_NULL_ARGUMENT(element_jclass))<SUB>2345</SUB>> ]
-"11996" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2351</SUB>> ]
-"12002" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2351</SUB>> ]
-"12005" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2351</SUB>> ]
-"12012" [label = <(&lt;operator&gt;.indirectFieldAccess,element_class-&gt;IsPrimitive)<SUB>2352</SUB>> ]
-"12017" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Vm()-&gt;JniAbortF)<SUB>2353</SUB>> ]
-"12025" [label = <(c_str,element_class-&gt;PrettyDescriptor().c_str())<SUB>2355</SUB>> ]
-"12039" [label = <(Runtime::Current,Runtime::Current())<SUB>2358</SUB>> ]
-"12043" [label = <(FIELD_IDENTIFIER,GetClassLinker,GetClassLinker)<SUB>2358</SUB>> ]
-"12049" [label = <(FIELD_IDENTIFIER,FindArrayClass,FindArrayClass)<SUB>2359</SUB>> ]
-"12051" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>2359</SUB>> ]
-"12069" [label = <(FIELD_IDENTIFIER,ObjectArray,ObjectArray)<SUB>2366</SUB>> ]
-"12073" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2366</SUB>> ]
-"12079" [label = <(FIELD_IDENTIFIER,ObjectArray,ObjectArray)<SUB>2367</SUB>> ]
-"12082" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2367</SUB>> ]
-"12086" [label = <(FIELD_IDENTIFIER,Alloc,Alloc)<SUB>2367</SUB>> ]
-"12088" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>2367</SUB>> ]
-"12104" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>2369</SUB>> ]
-"12111" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>2369</SUB>> ]
-"12124" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; element_class = result-&gt;GetClass()-&gt;GetComponentType())<SUB>2371</SUB>> ]
-"12211" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>2385</SUB>> ]
-"11973" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2345</SUB>> ]
-"11998" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>2351</SUB>> ]
-"12004" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2351</SUB>> ]
-"12007" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>2351</SUB>> ]
-"12014" [label = <(FIELD_IDENTIFIER,IsPrimitive,IsPrimitive)<SUB>2352</SUB>> ]
-"12018" [label = <(Vm,soa.Vm())<SUB>2353</SUB>> ]
-"12022" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2353</SUB>> ]
-"12026" [label = <(&lt;operator&gt;.fieldAccess,element_class-&gt;PrettyDescriptor().c_str)<SUB>2355</SUB>> ]
-"12040" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>2358</SUB>> ]
-"12053" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>2359</SUB>> ]
-"12090" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>2367</SUB>> ]
-"12106" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2369</SUB>> ]
-"12112" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2369</SUB>> ]
-"12115" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2369</SUB>> ]
-"12125" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; element_class)<SUB>2371</SUB>> ]
-"12132" [label = <(GetComponentType,result-&gt;GetClass()-&gt;GetComponentType())<SUB>2371</SUB>> ]
-"12140" [label = <(UNLIKELY,UNLIKELY(!element_class-&gt;IsAssignableFrom(initial_object-&gt;GetClass())))<SUB>2372</SUB>> ]
-"11974" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2345</SUB>> ]
-"11976" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2345</SUB>> ]
-"12019" [label = <(&lt;operator&gt;.fieldAccess,soa.Vm)<SUB>2353</SUB>> ]
-"12027" [label = <(PrettyDescriptor,element_class-&gt;PrettyDescriptor())<SUB>2355</SUB>> ]
-"12031" [label = <(FIELD_IDENTIFIER,c_str,c_str)<SUB>2355</SUB>> ]
-"12042" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>2358</SUB>> ]
-"12108" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2369</SUB>> ]
-"12114" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2369</SUB>> ]
-"12117" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2369</SUB>> ]
-"12126" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>2371</SUB>> ]
-"12133" [label = <(&lt;operator&gt;.indirectFieldAccess,result-&gt;GetClass()-&gt;GetComponentType)<SUB>2371</SUB>> ]
-"12141" [label = <(&lt;operator&gt;.logicalNot,!element_class-&gt;IsAssignableFrom(initial_object-&gt;GetClass()))<SUB>2372</SUB>> ]
-"12151" [label = <(JniAbortF,soa.Vm()-&gt;JniAbortF(&quot;NewObjectArray&quot;, &quot;cannot assign object of type '%s' to array with &quot;\012 &quot;element type of '%s'&quot;,\012                              mirror::Class::PrettyDescriptor(initial_object-&gt;GetClass()).c_str(),\012                              element_class-&gt;PrettyDescriptor().c_str()))<SUB>2373</SUB>> ]
-"12180" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2377</SUB>> ]
-"12021" [label = <(FIELD_IDENTIFIER,Vm,Vm)<SUB>2353</SUB>> ]
-"12028" [label = <(&lt;operator&gt;.indirectFieldAccess,element_class-&gt;PrettyDescriptor)<SUB>2355</SUB>> ]
-"12128" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2371</SUB>> ]
-"12134" [label = <(GetClass,result-&gt;GetClass())<SUB>2371</SUB>> ]
-"12138" [label = <(FIELD_IDENTIFIER,GetComponentType,GetComponentType)<SUB>2371</SUB>> ]
-"12142" [label = <(IsAssignableFrom,element_class-&gt;IsAssignableFrom(initial_object-&gt;GetClass()))<SUB>2372</SUB>> ]
-"12152" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Vm()-&gt;JniAbortF)<SUB>2373</SUB>> ]
-"12160" [label = <(c_str,mirror::Class::PrettyDescriptor(initial_object-&gt;GetClass()).c_str())<SUB>2375</SUB>> ]
-"12173" [label = <(c_str,element_class-&gt;PrettyDescriptor().c_str())<SUB>2376</SUB>> ]
-"12030" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>2355</SUB>> ]
-"12130" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>2371</SUB>> ]
-"12135" [label = <(&lt;operator&gt;.indirectFieldAccess,result-&gt;GetClass)<SUB>2371</SUB>> ]
-"12143" [label = <(&lt;operator&gt;.indirectFieldAccess,element_class-&gt;IsAssignableFrom)<SUB>2372</SUB>> ]
-"12146" [label = <(GetClass,initial_object-&gt;GetClass())<SUB>2372</SUB>> ]
-"12153" [label = <(Vm,soa.Vm())<SUB>2373</SUB>> ]
-"12157" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2373</SUB>> ]
-"12161" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class::PrettyDescriptor(initial_object-&gt;GetClass()).c_str)<SUB>2375</SUB>> ]
-"12174" [label = <(&lt;operator&gt;.fieldAccess,element_class-&gt;PrettyDescriptor().c_str)<SUB>2376</SUB>> ]
-"12190" [label = <(&lt;operator&gt;.lessThan,i &lt; length)<SUB>2379</SUB>> ]
-"12193" [label = <(&lt;operator&gt;.preIncrement,++i)<SUB>2379</SUB>> ]
-"12137" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>2371</SUB>> ]
-"12145" [label = <(FIELD_IDENTIFIER,IsAssignableFrom,IsAssignableFrom)<SUB>2372</SUB>> ]
-"12147" [label = <(&lt;operator&gt;.indirectFieldAccess,initial_object-&gt;GetClass)<SUB>2372</SUB>> ]
-"12154" [label = <(&lt;operator&gt;.fieldAccess,soa.Vm)<SUB>2373</SUB>> ]
-"12162" [label = <(mirror::Class::PrettyDescriptor,mirror::Class::PrettyDescriptor(initial_object-&gt;GetClass()))<SUB>2375</SUB>> ]
-"12172" [label = <(FIELD_IDENTIFIER,c_str,c_str)<SUB>2375</SUB>> ]
-"12175" [label = <(PrettyDescriptor,element_class-&gt;PrettyDescriptor())<SUB>2376</SUB>> ]
-"12179" [label = <(FIELD_IDENTIFIER,c_str,c_str)<SUB>2376</SUB>> ]
-"12187" [label = <(&lt;operator&gt;.assignment,i = 0)<SUB>2379</SUB>> ]
-"12196" [label = <(&lt;operator&gt;.greaterThan,result-&gt;SetWithoutChecks&lt;false&gt;(i, initial_object))<SUB>2380</SUB>> ]
-"12149" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>2372</SUB>> ]
-"12156" [label = <(FIELD_IDENTIFIER,Vm,Vm)<SUB>2373</SUB>> ]
-"12163" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class::PrettyDescriptor)<SUB>2375</SUB>> ]
-"12168" [label = <(GetClass,initial_object-&gt;GetClass())<SUB>2375</SUB>> ]
-"12176" [label = <(&lt;operator&gt;.indirectFieldAccess,element_class-&gt;PrettyDescriptor)<SUB>2376</SUB>> ]
-"12197" [label = <(&lt;operator&gt;.lessThan,result-&gt;SetWithoutChecks&lt;false)<SUB>2380</SUB>> ]
-"12202" [label = <(&lt;operator&gt;.bracketedPrimary,(i, initial_object))<SUB>2380</SUB>> ]
-"12164" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2375</SUB>> ]
-"12167" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>2375</SUB>> ]
-"12169" [label = <(&lt;operator&gt;.indirectFieldAccess,initial_object-&gt;GetClass)<SUB>2375</SUB>> ]
-"12178" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>2376</SUB>> ]
-"12198" [label = <(&lt;operator&gt;.indirectFieldAccess,result-&gt;SetWithoutChecks)<SUB>2380</SUB>> ]
-"12203" [label = <(&lt;operator&gt;.expressionList,i, initial_object)<SUB>2380</SUB>> ]
-"12171" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>2375</SUB>> ]
-"12200" [label = <(FIELD_IDENTIFIER,SetWithoutChecks,SetWithoutChecks)<SUB>2380</SUB>> ]
-"11941" [label = <(METHOD,NewObjectArray)<SUB>2339</SUB>> ]
-"12214" [label = <(METHOD_RETURN,jobjectArray)<SUB>2339</SUB>> ]
-  "11963" -> "11968" 
-  "11963" -> "11982" 
-  "11982" -> "11989" 
-  "11984" -> "11998" 
-  "12063" -> "12095" 
-  "12206" -> "12214" 
-  "11948" -> "11955" 
-  "11948" -> "11963" 
-  "11985" -> "11984" 
-  "11992" -> "12014" 
-  "12035" -> "12049" 
-  "12044" -> "12057" 
-  "12064" -> "12079" 
-  "12075" -> "12063" 
-  "12094" -> "12108" 
-  "12094" -> "12211" 
-  "12207" -> "12206" 
-  "11949" -> "11948" 
-  "11953" -> "11961" 
-  "11961" -> "12214" 
-  "11987" -> "11985" 
-  "11993" -> "12004" 
-  "12000" -> "11992" 
-  "12010" -> "12021" 
-  "12010" -> "12042" 
-  "12037" -> "12035" 
-  "12046" -> "12044" 
-  "12056" -> "12061" 
-  "12056" -> "12069" 
-  "12065" -> "12073" 
-  "12070" -> "12064" 
-  "12076" -> "12086" 
-  "12083" -> "12075" 
-  "12095" -> "12094" 
-  "12095" -> "12098" 
-  "12098" -> "12094" 
-  "12102" -> "12120" 
-  "12208" -> "12207" 
-  "11954" -> "11953" 
-  "11967" -> "11974" 
-  "11967" -> "11982" 
-  "11989" -> "11987" 
-  "11994" -> "11993" 
-  "12001" -> "12000" 
-  "12011" -> "12010" 
-  "12016" -> "12032" 
-  "12032" -> "12214" 
-  "12038" -> "12037" 
-  "12047" -> "12053" 
-  "12050" -> "12046" 
-  "12057" -> "12056" 
-  "12061" -> "12214" 
-  "12067" -> "12065" 
-  "12071" -> "12070" 
-  "12077" -> "12082" 
-  "12080" -> "12076" 
-  "12084" -> "12090" 
-  "12087" -> "12083" 
-  "12103" -> "12114" 
-  "12110" -> "12102" 
-  "12120" -> "12130" 
-  "12120" -> "12211" 
-  "12209" -> "12208" 
-  "11955" -> "11957" 
-  "11957" -> "11954" 
-  "11968" -> "11967" 
-  "11972" -> "11979" 
-  "11979" -> "12214" 
-  "11996" -> "11994" 
-  "12002" -> "12007" 
-  "12005" -> "12001" 
-  "12012" -> "12011" 
-  "12017" -> "12030" 
-  "12025" -> "12016" 
-  "12039" -> "12043" 
-  "12043" -> "12038" 
-  "12049" -> "12047" 
-  "12051" -> "12050" 
-  "12069" -> "12067" 
-  "12073" -> "12071" 
-  "12079" -> "12077" 
-  "12082" -> "12080" 
-  "12086" -> "12084" 
-  "12088" -> "12087" 
-  "12104" -> "12103" 
-  "12111" -> "12110" 
-  "12124" -> "12145" 
-  "12211" -> "12209" 
-  "11973" -> "11972" 
-  "11998" -> "11996" 
-  "12004" -> "12002" 
-  "12007" -> "12005" 
-  "12014" -> "12012" 
-  "12018" -> "12022" 
-  "12022" -> "12017" 
-  "12026" -> "12025" 
-  "12040" -> "12039" 
-  "12053" -> "12051" 
-  "12090" -> "12088" 
-  "12106" -> "12104" 
-  "12112" -> "12117" 
-  "12115" -> "12111" 
-  "12125" -> "12137" 
-  "12132" -> "12124" 
-  "12140" -> "12156" 
-  "12140" -> "12187" 
-  "11974" -> "11976" 
-  "11976" -> "11973" 
-  "12019" -> "12018" 
-  "12027" -> "12031" 
-  "12031" -> "12026" 
-  "12042" -> "12040" 
-  "12108" -> "12106" 
-  "12114" -> "12112" 
-  "12117" -> "12115" 
-  "12126" -> "12125" 
-  "12133" -> "12132" 
-  "12141" -> "12140" 
-  "12151" -> "12180" 
-  "12180" -> "12214" 
-  "12021" -> "12019" 
-  "12028" -> "12027" 
-  "12128" -> "12126" 
-  "12134" -> "12138" 
-  "12138" -> "12133" 
-  "12142" -> "12141" 
-  "12152" -> "12164" 
-  "12160" -> "12178" 
-  "12173" -> "12151" 
-  "12030" -> "12028" 
-  "12130" -> "12128" 
-  "12135" -> "12134" 
-  "12143" -> "12149" 
-  "12146" -> "12142" 
-  "12153" -> "12157" 
-  "12157" -> "12152" 
-  "12161" -> "12160" 
-  "12174" -> "12173" 
-  "12190" -> "12200" 
-  "12190" -> "12211" 
-  "12193" -> "12190" 
-  "12137" -> "12135" 
-  "12145" -> "12143" 
-  "12147" -> "12146" 
-  "12154" -> "12153" 
-  "12162" -> "12172" 
-  "12172" -> "12161" 
-  "12175" -> "12179" 
-  "12179" -> "12174" 
-  "12187" -> "12190" 
-  "12196" -> "12193" 
-  "12149" -> "12147" 
-  "12156" -> "12154" 
-  "12163" -> "12171" 
-  "12168" -> "12162" 
-  "12176" -> "12175" 
-  "12197" -> "12203" 
-  "12202" -> "12196" 
-  "12164" -> "12167" 
-  "12167" -> "12163" 
-  "12169" -> "12168" 
-  "12178" -> "12176" 
-  "12198" -> "12197" 
-  "12203" -> "12202" 
-  "12171" -> "12169" 
-  "12200" -> "12198" 
-  "11941" -> "11949" 
+digraph "GetBooleanArrayElements" {  
+"12111" [label = <(RETURN,return GetPrimitiveArray&lt;jbooleanArray, jboolean, mirror::BooleanArray&gt;(env, array, is_copy);,return GetPrimitiveArray&lt;jbooleanArray, jboolean, mirror::BooleanArray&gt;(env, array, is_copy);)<SUB>2303</SUB>> ]
+"12112" [label = <(GetPrimitiveArray&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;,GetPrimitiveArray&lt;jbooleanArray, jboolean, mirror::BooleanArray&gt;(env, array, is_copy))<SUB>2303</SUB>> ]
+"12106" [label = <(METHOD,GetBooleanArrayElements)<SUB>2302</SUB>> ]
+"12116" [label = <(METHOD_RETURN,jboolean)<SUB>2302</SUB>> ]
+  "12111" -> "12116" 
+  "12112" -> "12111" 
+  "12106" -> "12112" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/223-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/223-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/223-cfg.dot	2023-06-07 19:35:28.367384337 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/223-cfg.dot	2023-06-07 19:35:34.887383765 +0330
@@ -1,9 +1,9 @@
-digraph "NewShortArray" {  
-"12220" [label = <(RETURN,return NewPrimitiveArray&lt;jshortArray, mirror::ShortArray&gt;(env, length);,return NewPrimitiveArray&lt;jshortArray, mirror::ShortArray&gt;(env, length);)<SUB>2389</SUB>> ]
-"12221" [label = <(NewPrimitiveArray&lt;jshortArray,mirror::ShortArray&gt;,NewPrimitiveArray&lt;jshortArray, mirror::ShortArray&gt;(env, length))<SUB>2389</SUB>> ]
-"12216" [label = <(METHOD,NewShortArray)<SUB>2388</SUB>> ]
-"12224" [label = <(METHOD_RETURN,jshortArray)<SUB>2388</SUB>> ]
-  "12220" -> "12224" 
-  "12221" -> "12220" 
-  "12216" -> "12221" 
+digraph "GetByteArrayElements" {  
+"12123" [label = <(RETURN,return GetPrimitiveArray&lt;jbyteArray, jbyte, mirror::ByteArray&gt;(env, array, is_copy);,return GetPrimitiveArray&lt;jbyteArray, jbyte, mirror::ByteArray&gt;(env, array, is_copy);)<SUB>2307</SUB>> ]
+"12124" [label = <(GetPrimitiveArray&lt;jbyteArray,jbyte,mirror::ByteArray&gt;,GetPrimitiveArray&lt;jbyteArray, jbyte, mirror::ByteArray&gt;(env, array, is_copy))<SUB>2307</SUB>> ]
+"12118" [label = <(METHOD,GetByteArrayElements)<SUB>2306</SUB>> ]
+"12128" [label = <(METHOD_RETURN,jbyte)<SUB>2306</SUB>> ]
+  "12123" -> "12128" 
+  "12124" -> "12123" 
+  "12118" -> "12124" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/224-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/224-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/224-cfg.dot	2023-06-07 19:35:28.377384336 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/224-cfg.dot	2023-06-07 19:35:34.887383765 +0330
@@ -1,185 +1,9 @@
-digraph "GetPrimitiveArrayCritical" {  
-"12231" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_array))<SUB>2393</SUB>> ]
-"12250" [label = <(soa,soa(env))<SUB>2394</SUB>> ]
-"12252" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Array&gt; array = soa.Decode&lt;mirror::Array&gt;(java_array))<SUB>2395</SUB>> ]
-"12302" [label = <(&lt;operator&gt;.assignment,* heap = Runtime::Current()-&gt;GetHeap())<SUB>2401</SUB>> ]
-"12360" [label = <(RETURN,return array-&gt;GetRawData(array-&gt;GetClass()-&gt;GetComponentSize(), 0);,return array-&gt;GetRawData(array-&gt;GetClass()-&gt;GetComponentSize(), 0);)<SUB>2416</SUB>> ]
-"12253" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Array&gt; array)<SUB>2395</SUB>> ]
-"12260" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Array&gt;(java_array))<SUB>2395</SUB>> ]
-"12270" [label = <(UNLIKELY,UNLIKELY(!array-&gt;GetClass()-&gt;IsPrimitiveArray()))<SUB>2396</SUB>> ]
-"12304" [label = <(GetHeap,Runtime::Current()-&gt;GetHeap())<SUB>2401</SUB>> ]
-"12312" [label = <(IsMovableObject,heap-&gt;IsMovableObject(array))<SUB>2402</SUB>> ]
-"12352" [label = <(&lt;operator&gt;.notEquals,is_copy != nullptr)<SUB>2413</SUB>> ]
-"12361" [label = <(GetRawData,array-&gt;GetRawData(array-&gt;GetClass()-&gt;GetComponentSize(), 0))<SUB>2416</SUB>> ]
-"12254" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Array)<SUB>2395</SUB>> ]
-"12261" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Array)<SUB>2395</SUB>> ]
-"12271" [label = <(&lt;operator&gt;.logicalNot,!array-&gt;GetClass()-&gt;IsPrimitiveArray())<SUB>2396</SUB>> ]
-"12280" [label = <(JniAbortF,soa.Vm()-&gt;JniAbortF(&quot;GetPrimitiveArrayCritical&quot;, &quot;expected primitive array, given %s&quot;,\012                          array-&gt;GetClass()-&gt;PrettyDescriptor().c_str()))<SUB>2397</SUB>> ]
-"12299" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2399</SUB>> ]
-"12305" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetHeap)<SUB>2401</SUB>> ]
-"12313" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;IsMovableObject)<SUB>2402</SUB>> ]
-"12340" [label = <(&lt;operator&gt;.assignment,array = soa.Decode&lt;mirror::Array&gt;(java_array))<SUB>2411</SUB>> ]
-"12356" [label = <(&lt;operator&gt;.assignment,*is_copy = JNI_FALSE)<SUB>2414</SUB>> ]
-"12362" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetRawData)<SUB>2416</SUB>> ]
-"12365" [label = <(GetComponentSize,array-&gt;GetClass()-&gt;GetComponentSize())<SUB>2416</SUB>> ]
-"12235" [label = <(UNLIKELY,UNLIKELY((java_array) == nullptr))<SUB>2393</SUB>> ]
-"12256" [label = <(&lt;operator&gt;.fieldAccess,mirror::Array)<SUB>2395</SUB>> ]
-"12262" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2395</SUB>> ]
-"12265" [label = <(&lt;operator&gt;.fieldAccess,mirror::Array)<SUB>2395</SUB>> ]
-"12272" [label = <(IsPrimitiveArray,array-&gt;GetClass()-&gt;IsPrimitiveArray())<SUB>2396</SUB>> ]
-"12281" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Vm()-&gt;JniAbortF)<SUB>2397</SUB>> ]
-"12289" [label = <(c_str,array-&gt;GetClass()-&gt;PrettyDescriptor().c_str())<SUB>2398</SUB>> ]
-"12306" [label = <(Runtime::Current,Runtime::Current())<SUB>2401</SUB>> ]
-"12310" [label = <(FIELD_IDENTIFIER,GetHeap,GetHeap)<SUB>2401</SUB>> ]
-"12315" [label = <(FIELD_IDENTIFIER,IsMovableObject,IsMovableObject)<SUB>2402</SUB>> ]
-"12319" [label = <(&lt;operator&gt;.logicalNot,!kUseReadBarrier)<SUB>2403</SUB>> ]
-"12342" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Array&gt;(java_array))<SUB>2411</SUB>> ]
-"12357" [label = <(&lt;operator&gt;.indirection,*is_copy)<SUB>2414</SUB>> ]
-"12364" [label = <(FIELD_IDENTIFIER,GetRawData,GetRawData)<SUB>2416</SUB>> ]
-"12366" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass()-&gt;GetComponentSize)<SUB>2416</SUB>> ]
-"12236" [label = <(&lt;operator&gt;.equals,(java_array) == nullptr)<SUB>2393</SUB>> ]
-"12240" [label = <(CHECK_NON_NULL_ARGUMENT(java_array),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_array == null&quot;))<SUB>2393</SUB>> ]
-"12247" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_array),CHECK_NON_NULL_ARGUMENT(java_array))<SUB>2393</SUB>> ]
-"12258" [label = <(FIELD_IDENTIFIER,Array,Array)<SUB>2395</SUB>> ]
-"12264" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2395</SUB>> ]
-"12267" [label = <(FIELD_IDENTIFIER,Array,Array)<SUB>2395</SUB>> ]
-"12273" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass()-&gt;IsPrimitiveArray)<SUB>2396</SUB>> ]
-"12282" [label = <(Vm,soa.Vm())<SUB>2397</SUB>> ]
-"12286" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2397</SUB>> ]
-"12290" [label = <(&lt;operator&gt;.fieldAccess,array-&gt;GetClass()-&gt;PrettyDescriptor().c_str)<SUB>2398</SUB>> ]
-"12307" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>2401</SUB>> ]
-"12322" [label = <(IncrementDisableMovingGC,heap-&gt;IncrementDisableMovingGC(soa.Self()))<SUB>2404</SUB>> ]
-"12343" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Array)<SUB>2411</SUB>> ]
-"12367" [label = <(GetClass,array-&gt;GetClass())<SUB>2416</SUB>> ]
-"12371" [label = <(FIELD_IDENTIFIER,GetComponentSize,GetComponentSize)<SUB>2416</SUB>> ]
-"12241" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2393</SUB>> ]
-"12274" [label = <(GetClass,array-&gt;GetClass())<SUB>2396</SUB>> ]
-"12278" [label = <(FIELD_IDENTIFIER,IsPrimitiveArray,IsPrimitiveArray)<SUB>2396</SUB>> ]
-"12283" [label = <(&lt;operator&gt;.fieldAccess,soa.Vm)<SUB>2397</SUB>> ]
-"12291" [label = <(PrettyDescriptor,array-&gt;GetClass()-&gt;PrettyDescriptor())<SUB>2398</SUB>> ]
-"12298" [label = <(FIELD_IDENTIFIER,c_str,c_str)<SUB>2398</SUB>> ]
-"12309" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>2401</SUB>> ]
-"12323" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;IncrementDisableMovingGC)<SUB>2404</SUB>> ]
-"12326" [label = <(Self,soa.Self())<SUB>2404</SUB>> ]
-"12332" [label = <(IncrementDisableThreadFlip,heap-&gt;IncrementDisableThreadFlip(soa.Self()))<SUB>2408</SUB>> ]
-"12344" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2411</SUB>> ]
-"12347" [label = <(&lt;operator&gt;.fieldAccess,mirror::Array)<SUB>2411</SUB>> ]
-"12368" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass)<SUB>2416</SUB>> ]
-"12242" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2393</SUB>> ]
-"12244" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2393</SUB>> ]
-"12275" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass)<SUB>2396</SUB>> ]
-"12285" [label = <(FIELD_IDENTIFIER,Vm,Vm)<SUB>2397</SUB>> ]
-"12292" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass()-&gt;PrettyDescriptor)<SUB>2398</SUB>> ]
-"12325" [label = <(FIELD_IDENTIFIER,IncrementDisableMovingGC,IncrementDisableMovingGC)<SUB>2404</SUB>> ]
-"12327" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>2404</SUB>> ]
-"12333" [label = <(&lt;operator&gt;.indirectFieldAccess,heap-&gt;IncrementDisableThreadFlip)<SUB>2408</SUB>> ]
-"12336" [label = <(Self,soa.Self())<SUB>2408</SUB>> ]
-"12346" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2411</SUB>> ]
-"12349" [label = <(FIELD_IDENTIFIER,Array,Array)<SUB>2411</SUB>> ]
-"12370" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>2416</SUB>> ]
-"12277" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>2396</SUB>> ]
-"12293" [label = <(GetClass,array-&gt;GetClass())<SUB>2398</SUB>> ]
-"12297" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>2398</SUB>> ]
-"12329" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>2404</SUB>> ]
-"12335" [label = <(FIELD_IDENTIFIER,IncrementDisableThreadFlip,IncrementDisableThreadFlip)<SUB>2408</SUB>> ]
-"12337" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>2408</SUB>> ]
-"12294" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass)<SUB>2398</SUB>> ]
-"12339" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>2408</SUB>> ]
-"12296" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>2398</SUB>> ]
-"12226" [label = <(METHOD,GetPrimitiveArrayCritical)<SUB>2392</SUB>> ]
-"12373" [label = <(METHOD_RETURN,void*)<SUB>2392</SUB>> ]
-  "12231" -> "12236" 
-  "12231" -> "12250" 
-  "12250" -> "12258" 
-  "12252" -> "12277" 
-  "12302" -> "12315" 
-  "12360" -> "12373" 
-  "12253" -> "12264" 
-  "12260" -> "12252" 
-  "12270" -> "12285" 
-  "12270" -> "12309" 
-  "12304" -> "12302" 
-  "12312" -> "12319" 
-  "12312" -> "12352" 
-  "12352" -> "12357" 
-  "12352" -> "12364" 
-  "12361" -> "12360" 
-  "12254" -> "12253" 
-  "12261" -> "12260" 
-  "12271" -> "12270" 
-  "12280" -> "12299" 
-  "12299" -> "12373" 
-  "12305" -> "12304" 
-  "12313" -> "12312" 
-  "12340" -> "12352" 
-  "12356" -> "12364" 
-  "12362" -> "12370" 
-  "12365" -> "12361" 
-  "12235" -> "12242" 
-  "12235" -> "12250" 
-  "12256" -> "12254" 
-  "12262" -> "12267" 
-  "12265" -> "12261" 
-  "12272" -> "12271" 
-  "12281" -> "12296" 
-  "12289" -> "12280" 
-  "12306" -> "12310" 
-  "12310" -> "12305" 
-  "12315" -> "12313" 
-  "12319" -> "12325" 
-  "12319" -> "12335" 
-  "12342" -> "12340" 
-  "12357" -> "12356" 
-  "12364" -> "12362" 
-  "12366" -> "12365" 
-  "12236" -> "12235" 
-  "12240" -> "12247" 
-  "12247" -> "12373" 
-  "12258" -> "12256" 
-  "12264" -> "12262" 
-  "12267" -> "12265" 
-  "12273" -> "12272" 
-  "12282" -> "12286" 
-  "12286" -> "12281" 
-  "12290" -> "12289" 
-  "12307" -> "12306" 
-  "12322" -> "12346" 
-  "12343" -> "12342" 
-  "12367" -> "12371" 
-  "12371" -> "12366" 
-  "12241" -> "12240" 
-  "12274" -> "12278" 
-  "12278" -> "12273" 
-  "12283" -> "12282" 
-  "12291" -> "12298" 
-  "12298" -> "12290" 
-  "12309" -> "12307" 
-  "12323" -> "12329" 
-  "12326" -> "12322" 
-  "12332" -> "12346" 
-  "12344" -> "12349" 
-  "12347" -> "12343" 
-  "12368" -> "12367" 
-  "12242" -> "12244" 
-  "12244" -> "12241" 
-  "12275" -> "12274" 
-  "12285" -> "12283" 
-  "12292" -> "12291" 
-  "12325" -> "12323" 
-  "12327" -> "12326" 
-  "12333" -> "12339" 
-  "12336" -> "12332" 
-  "12346" -> "12344" 
-  "12349" -> "12347" 
-  "12370" -> "12368" 
-  "12277" -> "12275" 
-  "12293" -> "12297" 
-  "12297" -> "12292" 
-  "12329" -> "12327" 
-  "12335" -> "12333" 
-  "12337" -> "12336" 
-  "12294" -> "12293" 
-  "12339" -> "12337" 
-  "12296" -> "12294" 
-  "12226" -> "12231" 
+digraph "GetCharArrayElements" {  
+"12135" [label = <(RETURN,return GetPrimitiveArray&lt;jcharArray, jchar, mirror::CharArray&gt;(env, array, is_copy);,return GetPrimitiveArray&lt;jcharArray, jchar, mirror::CharArray&gt;(env, array, is_copy);)<SUB>2311</SUB>> ]
+"12136" [label = <(GetPrimitiveArray&lt;jcharArray,jchar,mirror::CharArray&gt;,GetPrimitiveArray&lt;jcharArray, jchar, mirror::CharArray&gt;(env, array, is_copy))<SUB>2311</SUB>> ]
+"12130" [label = <(METHOD,GetCharArrayElements)<SUB>2310</SUB>> ]
+"12140" [label = <(METHOD_RETURN,jchar)<SUB>2310</SUB>> ]
+  "12135" -> "12140" 
+  "12136" -> "12135" 
+  "12130" -> "12136" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/225-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/225-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/225-cfg.dot	2023-06-07 19:35:28.377384336 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/225-cfg.dot	2023-06-07 19:35:34.887383765 +0330
@@ -1,112 +1,9 @@
-digraph "ReleasePrimitiveArrayCritical" {  
-"12381" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>2421</SUB>> ]
-"12399" [label = <(soa,soa(env))<SUB>2422</SUB>> ]
-"12401" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Array&gt; array = soa.Decode&lt;mirror::Array&gt;(java_array))<SUB>2423</SUB>> ]
-"12450" [label = <(&lt;operator&gt;.assignment,component_size = array-&gt;GetClass()-&gt;GetComponentSize())<SUB>2429</SUB>> ]
-"12459" [label = <(ReleasePrimitiveArray,ReleasePrimitiveArray(soa, array, component_size, elements, mode))<SUB>2430</SUB>> ]
-"12402" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Array&gt; array)<SUB>2423</SUB>> ]
-"12409" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Array&gt;(java_array))<SUB>2423</SUB>> ]
-"12419" [label = <(UNLIKELY,UNLIKELY(!array-&gt;GetClass()-&gt;IsPrimitiveArray()))<SUB>2424</SUB>> ]
-"12452" [label = <(GetComponentSize,array-&gt;GetClass()-&gt;GetComponentSize())<SUB>2429</SUB>> ]
-"12403" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Array)<SUB>2423</SUB>> ]
-"12410" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Array)<SUB>2423</SUB>> ]
-"12420" [label = <(&lt;operator&gt;.logicalNot,!array-&gt;GetClass()-&gt;IsPrimitiveArray())<SUB>2424</SUB>> ]
-"12429" [label = <(JniAbortF,soa.Vm()-&gt;JniAbortF(&quot;ReleasePrimitiveArrayCritical&quot;, &quot;expected primitive array, given %s&quot;,\012                          array-&gt;GetClass()-&gt;PrettyDescriptor().c_str()))<SUB>2425</SUB>> ]
-"12448" [label = <(RETURN,return;,return;)<SUB>2427</SUB>> ]
-"12453" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass()-&gt;GetComponentSize)<SUB>2429</SUB>> ]
-"12385" [label = <(UNLIKELY,UNLIKELY((java_array) == nullptr))<SUB>2421</SUB>> ]
-"12405" [label = <(&lt;operator&gt;.fieldAccess,mirror::Array)<SUB>2423</SUB>> ]
-"12411" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2423</SUB>> ]
-"12414" [label = <(&lt;operator&gt;.fieldAccess,mirror::Array)<SUB>2423</SUB>> ]
-"12421" [label = <(IsPrimitiveArray,array-&gt;GetClass()-&gt;IsPrimitiveArray())<SUB>2424</SUB>> ]
-"12430" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Vm()-&gt;JniAbortF)<SUB>2425</SUB>> ]
-"12438" [label = <(c_str,array-&gt;GetClass()-&gt;PrettyDescriptor().c_str())<SUB>2426</SUB>> ]
-"12454" [label = <(GetClass,array-&gt;GetClass())<SUB>2429</SUB>> ]
-"12458" [label = <(FIELD_IDENTIFIER,GetComponentSize,GetComponentSize)<SUB>2429</SUB>> ]
-"12386" [label = <(&lt;operator&gt;.equals,(java_array) == nullptr)<SUB>2421</SUB>> ]
-"12390" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_array == null&quot;))<SUB>2421</SUB>> ]
-"12397" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>2421</SUB>> ]
-"12407" [label = <(FIELD_IDENTIFIER,Array,Array)<SUB>2423</SUB>> ]
-"12413" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2423</SUB>> ]
-"12416" [label = <(FIELD_IDENTIFIER,Array,Array)<SUB>2423</SUB>> ]
-"12422" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass()-&gt;IsPrimitiveArray)<SUB>2424</SUB>> ]
-"12431" [label = <(Vm,soa.Vm())<SUB>2425</SUB>> ]
-"12435" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2425</SUB>> ]
-"12439" [label = <(&lt;operator&gt;.fieldAccess,array-&gt;GetClass()-&gt;PrettyDescriptor().c_str)<SUB>2426</SUB>> ]
-"12455" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass)<SUB>2429</SUB>> ]
-"12391" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2421</SUB>> ]
-"12423" [label = <(GetClass,array-&gt;GetClass())<SUB>2424</SUB>> ]
-"12427" [label = <(FIELD_IDENTIFIER,IsPrimitiveArray,IsPrimitiveArray)<SUB>2424</SUB>> ]
-"12432" [label = <(&lt;operator&gt;.fieldAccess,soa.Vm)<SUB>2425</SUB>> ]
-"12440" [label = <(PrettyDescriptor,array-&gt;GetClass()-&gt;PrettyDescriptor())<SUB>2426</SUB>> ]
-"12447" [label = <(FIELD_IDENTIFIER,c_str,c_str)<SUB>2426</SUB>> ]
-"12457" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>2429</SUB>> ]
-"12392" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2421</SUB>> ]
-"12394" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2421</SUB>> ]
-"12424" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass)<SUB>2424</SUB>> ]
-"12434" [label = <(FIELD_IDENTIFIER,Vm,Vm)<SUB>2425</SUB>> ]
-"12441" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass()-&gt;PrettyDescriptor)<SUB>2426</SUB>> ]
-"12426" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>2424</SUB>> ]
-"12442" [label = <(GetClass,array-&gt;GetClass())<SUB>2426</SUB>> ]
-"12446" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>2426</SUB>> ]
-"12443" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetClass)<SUB>2426</SUB>> ]
-"12445" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>2426</SUB>> ]
-"12375" [label = <(METHOD,ReleasePrimitiveArrayCritical)<SUB>2419</SUB>> ]
-"12465" [label = <(METHOD_RETURN,void)<SUB>2419</SUB>> ]
-  "12381" -> "12386" 
-  "12381" -> "12399" 
-  "12399" -> "12407" 
-  "12401" -> "12426" 
-  "12450" -> "12459" 
-  "12459" -> "12465" 
-  "12402" -> "12413" 
-  "12409" -> "12401" 
-  "12419" -> "12434" 
-  "12419" -> "12457" 
-  "12452" -> "12450" 
-  "12403" -> "12402" 
-  "12410" -> "12409" 
-  "12420" -> "12419" 
-  "12429" -> "12448" 
-  "12448" -> "12465" 
-  "12453" -> "12452" 
-  "12385" -> "12392" 
-  "12385" -> "12399" 
-  "12405" -> "12403" 
-  "12411" -> "12416" 
-  "12414" -> "12410" 
-  "12421" -> "12420" 
-  "12430" -> "12445" 
-  "12438" -> "12429" 
-  "12454" -> "12458" 
-  "12458" -> "12453" 
-  "12386" -> "12385" 
-  "12390" -> "12397" 
-  "12397" -> "12465" 
-  "12407" -> "12405" 
-  "12413" -> "12411" 
-  "12416" -> "12414" 
-  "12422" -> "12421" 
-  "12431" -> "12435" 
-  "12435" -> "12430" 
-  "12439" -> "12438" 
-  "12455" -> "12454" 
-  "12391" -> "12390" 
-  "12423" -> "12427" 
-  "12427" -> "12422" 
-  "12432" -> "12431" 
-  "12440" -> "12447" 
-  "12447" -> "12439" 
-  "12457" -> "12455" 
-  "12392" -> "12394" 
-  "12394" -> "12391" 
-  "12424" -> "12423" 
-  "12434" -> "12432" 
-  "12441" -> "12440" 
-  "12426" -> "12424" 
-  "12442" -> "12446" 
-  "12446" -> "12441" 
-  "12443" -> "12442" 
-  "12445" -> "12443" 
-  "12375" -> "12381" 
+digraph "GetDoubleArrayElements" {  
+"12147" [label = <(RETURN,return GetPrimitiveArray&lt;jdoubleArray, jdouble, mirror::DoubleArray&gt;(env, array, is_copy);,return GetPrimitiveArray&lt;jdoubleArray, jdouble, mirror::DoubleArray&gt;(env, array, is_copy);)<SUB>2315</SUB>> ]
+"12148" [label = <(GetPrimitiveArray&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;,GetPrimitiveArray&lt;jdoubleArray, jdouble, mirror::DoubleArray&gt;(env, array, is_copy))<SUB>2315</SUB>> ]
+"12142" [label = <(METHOD,GetDoubleArrayElements)<SUB>2314</SUB>> ]
+"12152" [label = <(METHOD_RETURN,jdouble)<SUB>2314</SUB>> ]
+  "12147" -> "12152" 
+  "12148" -> "12147" 
+  "12142" -> "12148" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/226-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/226-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/226-cfg.dot	2023-06-07 19:35:28.377384336 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/226-cfg.dot	2023-06-07 19:35:34.887383765 +0330
@@ -1,9 +1,9 @@
-digraph "GetBooleanArrayElements" {  
-"12472" [label = <(RETURN,return GetPrimitiveArray&lt;jbooleanArray, jboolean, mirror::BooleanArray&gt;(env, array, is_copy);,return GetPrimitiveArray&lt;jbooleanArray, jboolean, mirror::BooleanArray&gt;(env, array, is_copy);)<SUB>2434</SUB>> ]
-"12473" [label = <(GetPrimitiveArray&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;,GetPrimitiveArray&lt;jbooleanArray, jboolean, mirror::BooleanArray&gt;(env, array, is_copy))<SUB>2434</SUB>> ]
-"12467" [label = <(METHOD,GetBooleanArrayElements)<SUB>2433</SUB>> ]
-"12477" [label = <(METHOD_RETURN,jboolean)<SUB>2433</SUB>> ]
-  "12472" -> "12477" 
-  "12473" -> "12472" 
-  "12467" -> "12473" 
+digraph "GetFloatArrayElements" {  
+"12159" [label = <(RETURN,return GetPrimitiveArray&lt;jfloatArray, jfloat, mirror::FloatArray&gt;(env, array, is_copy);,return GetPrimitiveArray&lt;jfloatArray, jfloat, mirror::FloatArray&gt;(env, array, is_copy);)<SUB>2319</SUB>> ]
+"12160" [label = <(GetPrimitiveArray&lt;jfloatArray,jfloat,mirror::FloatArray&gt;,GetPrimitiveArray&lt;jfloatArray, jfloat, mirror::FloatArray&gt;(env, array, is_copy))<SUB>2319</SUB>> ]
+"12154" [label = <(METHOD,GetFloatArrayElements)<SUB>2318</SUB>> ]
+"12164" [label = <(METHOD_RETURN,jfloat)<SUB>2318</SUB>> ]
+  "12159" -> "12164" 
+  "12160" -> "12159" 
+  "12154" -> "12160" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/227-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/227-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/227-cfg.dot	2023-06-07 19:35:28.377384336 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/227-cfg.dot	2023-06-07 19:35:34.887383765 +0330
@@ -1,9 +1,9 @@
-digraph "GetByteArrayElements" {  
-"12484" [label = <(RETURN,return GetPrimitiveArray&lt;jbyteArray, jbyte, mirror::ByteArray&gt;(env, array, is_copy);,return GetPrimitiveArray&lt;jbyteArray, jbyte, mirror::ByteArray&gt;(env, array, is_copy);)<SUB>2438</SUB>> ]
-"12485" [label = <(GetPrimitiveArray&lt;jbyteArray,jbyte,mirror::ByteArray&gt;,GetPrimitiveArray&lt;jbyteArray, jbyte, mirror::ByteArray&gt;(env, array, is_copy))<SUB>2438</SUB>> ]
-"12479" [label = <(METHOD,GetByteArrayElements)<SUB>2437</SUB>> ]
-"12489" [label = <(METHOD_RETURN,jbyte)<SUB>2437</SUB>> ]
-  "12484" -> "12489" 
-  "12485" -> "12484" 
-  "12479" -> "12485" 
+digraph "GetIntArrayElements" {  
+"12171" [label = <(RETURN,return GetPrimitiveArray&lt;jintArray, jint, mirror::IntArray&gt;(env, array, is_copy);,return GetPrimitiveArray&lt;jintArray, jint, mirror::IntArray&gt;(env, array, is_copy);)<SUB>2323</SUB>> ]
+"12172" [label = <(GetPrimitiveArray&lt;jintArray,jint,mirror::IntArray&gt;,GetPrimitiveArray&lt;jintArray, jint, mirror::IntArray&gt;(env, array, is_copy))<SUB>2323</SUB>> ]
+"12166" [label = <(METHOD,GetIntArrayElements)<SUB>2322</SUB>> ]
+"12176" [label = <(METHOD_RETURN,jint)<SUB>2322</SUB>> ]
+  "12171" -> "12176" 
+  "12172" -> "12171" 
+  "12166" -> "12172" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/228-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/228-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/228-cfg.dot	2023-06-07 19:35:28.377384336 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/228-cfg.dot	2023-06-07 19:35:34.887383765 +0330
@@ -1,9 +1,9 @@
-digraph "GetCharArrayElements" {  
-"12496" [label = <(RETURN,return GetPrimitiveArray&lt;jcharArray, jchar, mirror::CharArray&gt;(env, array, is_copy);,return GetPrimitiveArray&lt;jcharArray, jchar, mirror::CharArray&gt;(env, array, is_copy);)<SUB>2442</SUB>> ]
-"12497" [label = <(GetPrimitiveArray&lt;jcharArray,jchar,mirror::CharArray&gt;,GetPrimitiveArray&lt;jcharArray, jchar, mirror::CharArray&gt;(env, array, is_copy))<SUB>2442</SUB>> ]
-"12491" [label = <(METHOD,GetCharArrayElements)<SUB>2441</SUB>> ]
-"12501" [label = <(METHOD_RETURN,jchar)<SUB>2441</SUB>> ]
-  "12496" -> "12501" 
-  "12497" -> "12496" 
-  "12491" -> "12497" 
+digraph "GetLongArrayElements" {  
+"12183" [label = <(RETURN,return GetPrimitiveArray&lt;jlongArray, jlong, mirror::LongArray&gt;(env, array, is_copy);,return GetPrimitiveArray&lt;jlongArray, jlong, mirror::LongArray&gt;(env, array, is_copy);)<SUB>2327</SUB>> ]
+"12184" [label = <(GetPrimitiveArray&lt;jlongArray,jlong,mirror::LongArray&gt;,GetPrimitiveArray&lt;jlongArray, jlong, mirror::LongArray&gt;(env, array, is_copy))<SUB>2327</SUB>> ]
+"12178" [label = <(METHOD,GetLongArrayElements)<SUB>2326</SUB>> ]
+"12188" [label = <(METHOD_RETURN,jlong)<SUB>2326</SUB>> ]
+  "12183" -> "12188" 
+  "12184" -> "12183" 
+  "12178" -> "12184" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/229-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/229-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/229-cfg.dot	2023-06-07 19:35:28.377384336 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/229-cfg.dot	2023-06-07 19:35:34.887383765 +0330
@@ -1,9 +1,9 @@
-digraph "GetDoubleArrayElements" {  
-"12508" [label = <(RETURN,return GetPrimitiveArray&lt;jdoubleArray, jdouble, mirror::DoubleArray&gt;(env, array, is_copy);,return GetPrimitiveArray&lt;jdoubleArray, jdouble, mirror::DoubleArray&gt;(env, array, is_copy);)<SUB>2446</SUB>> ]
-"12509" [label = <(GetPrimitiveArray&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;,GetPrimitiveArray&lt;jdoubleArray, jdouble, mirror::DoubleArray&gt;(env, array, is_copy))<SUB>2446</SUB>> ]
-"12503" [label = <(METHOD,GetDoubleArrayElements)<SUB>2445</SUB>> ]
-"12513" [label = <(METHOD_RETURN,jdouble)<SUB>2445</SUB>> ]
-  "12508" -> "12513" 
-  "12509" -> "12508" 
-  "12503" -> "12509" 
+digraph "GetShortArrayElements" {  
+"12195" [label = <(RETURN,return GetPrimitiveArray&lt;jshortArray, jshort, mirror::ShortArray&gt;(env, array, is_copy);,return GetPrimitiveArray&lt;jshortArray, jshort, mirror::ShortArray&gt;(env, array, is_copy);)<SUB>2331</SUB>> ]
+"12196" [label = <(GetPrimitiveArray&lt;jshortArray,jshort,mirror::ShortArray&gt;,GetPrimitiveArray&lt;jshortArray, jshort, mirror::ShortArray&gt;(env, array, is_copy))<SUB>2331</SUB>> ]
+"12190" [label = <(METHOD,GetShortArrayElements)<SUB>2330</SUB>> ]
+"12200" [label = <(METHOD_RETURN,jshort)<SUB>2330</SUB>> ]
+  "12195" -> "12200" 
+  "12196" -> "12195" 
+  "12190" -> "12196" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/23-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/23-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/23-cfg.dot	2023-06-07 19:35:28.217384348 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/23-cfg.dot	2023-06-07 19:35:34.747383777 +0330
@@ -1,5 +1,5 @@
-digraph "NotifySetPrimitiveField" {  
-"595" [label = <(METHOD,NotifySetPrimitiveField)<SUB>393</SUB>> ]
-"600" [label = <(METHOD_RETURN,void)<SUB>393</SUB>> ]
-  "595" -> "600" 
+digraph "ReportInvalidJNINativeMethod" {  
+"511" [label = <(METHOD,ReportInvalidJNINativeMethod)<SUB>402</SUB>> ]
+"517" [label = <(METHOD_RETURN,void)<SUB>402</SUB>> ]
+  "511" -> "517" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/230-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/230-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/230-cfg.dot	2023-06-07 19:35:28.377384336 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/230-cfg.dot	2023-06-07 19:35:34.887383765 +0330
@@ -1,9 +1,7 @@
-digraph "GetFloatArrayElements" {  
-"12520" [label = <(RETURN,return GetPrimitiveArray&lt;jfloatArray, jfloat, mirror::FloatArray&gt;(env, array, is_copy);,return GetPrimitiveArray&lt;jfloatArray, jfloat, mirror::FloatArray&gt;(env, array, is_copy);)<SUB>2450</SUB>> ]
-"12521" [label = <(GetPrimitiveArray&lt;jfloatArray,jfloat,mirror::FloatArray&gt;,GetPrimitiveArray&lt;jfloatArray, jfloat, mirror::FloatArray&gt;(env, array, is_copy))<SUB>2450</SUB>> ]
-"12515" [label = <(METHOD,GetFloatArrayElements)<SUB>2449</SUB>> ]
-"12525" [label = <(METHOD_RETURN,jfloat)<SUB>2449</SUB>> ]
-  "12520" -> "12525" 
-  "12521" -> "12520" 
-  "12515" -> "12521" 
+digraph "ReleaseBooleanArrayElements" {  
+"12208" [label = <(ReleasePrimitiveArray&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;,ReleasePrimitiveArray&lt;jbooleanArray, jboolean, mirror::BooleanArray&gt;(env, array, elements,\012                                                                         mode))<SUB>2336</SUB>> ]
+"12202" [label = <(METHOD,ReleaseBooleanArrayElements)<SUB>2334</SUB>> ]
+"12213" [label = <(METHOD_RETURN,void)<SUB>2334</SUB>> ]
+  "12208" -> "12213" 
+  "12202" -> "12208" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/231-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/231-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/231-cfg.dot	2023-06-07 19:35:28.377384336 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/231-cfg.dot	2023-06-07 19:35:34.887383765 +0330
@@ -1,9 +1,7 @@
-digraph "GetIntArrayElements" {  
-"12532" [label = <(RETURN,return GetPrimitiveArray&lt;jintArray, jint, mirror::IntArray&gt;(env, array, is_copy);,return GetPrimitiveArray&lt;jintArray, jint, mirror::IntArray&gt;(env, array, is_copy);)<SUB>2454</SUB>> ]
-"12533" [label = <(GetPrimitiveArray&lt;jintArray,jint,mirror::IntArray&gt;,GetPrimitiveArray&lt;jintArray, jint, mirror::IntArray&gt;(env, array, is_copy))<SUB>2454</SUB>> ]
-"12527" [label = <(METHOD,GetIntArrayElements)<SUB>2453</SUB>> ]
-"12537" [label = <(METHOD_RETURN,jint)<SUB>2453</SUB>> ]
-  "12532" -> "12537" 
-  "12533" -> "12532" 
-  "12527" -> "12533" 
+digraph "ReleaseByteArrayElements" {  
+"12221" [label = <(ReleasePrimitiveArray&lt;jbyteArray,jbyte,mirror::ByteArray&gt;,ReleasePrimitiveArray&lt;jbyteArray, jbyte, mirror::ByteArray&gt;(env, array, elements, mode))<SUB>2341</SUB>> ]
+"12215" [label = <(METHOD,ReleaseByteArrayElements)<SUB>2340</SUB>> ]
+"12226" [label = <(METHOD_RETURN,void)<SUB>2340</SUB>> ]
+  "12221" -> "12226" 
+  "12215" -> "12221" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/232-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/232-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/232-cfg.dot	2023-06-07 19:35:28.377384336 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/232-cfg.dot	2023-06-07 19:35:34.887383765 +0330
@@ -1,9 +1,7 @@
-digraph "GetLongArrayElements" {  
-"12544" [label = <(RETURN,return GetPrimitiveArray&lt;jlongArray, jlong, mirror::LongArray&gt;(env, array, is_copy);,return GetPrimitiveArray&lt;jlongArray, jlong, mirror::LongArray&gt;(env, array, is_copy);)<SUB>2458</SUB>> ]
-"12545" [label = <(GetPrimitiveArray&lt;jlongArray,jlong,mirror::LongArray&gt;,GetPrimitiveArray&lt;jlongArray, jlong, mirror::LongArray&gt;(env, array, is_copy))<SUB>2458</SUB>> ]
-"12539" [label = <(METHOD,GetLongArrayElements)<SUB>2457</SUB>> ]
-"12549" [label = <(METHOD_RETURN,jlong)<SUB>2457</SUB>> ]
-  "12544" -> "12549" 
-  "12545" -> "12544" 
-  "12539" -> "12545" 
+digraph "ReleaseCharArrayElements" {  
+"12234" [label = <(ReleasePrimitiveArray&lt;jcharArray,jchar,mirror::CharArray&gt;,ReleasePrimitiveArray&lt;jcharArray, jchar, mirror::CharArray&gt;(env, array, elements, mode))<SUB>2345</SUB>> ]
+"12228" [label = <(METHOD,ReleaseCharArrayElements)<SUB>2344</SUB>> ]
+"12239" [label = <(METHOD_RETURN,void)<SUB>2344</SUB>> ]
+  "12234" -> "12239" 
+  "12228" -> "12234" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/233-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/233-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/233-cfg.dot	2023-06-07 19:35:28.377384336 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/233-cfg.dot	2023-06-07 19:35:34.887383765 +0330
@@ -1,9 +1,7 @@
-digraph "GetShortArrayElements" {  
-"12556" [label = <(RETURN,return GetPrimitiveArray&lt;jshortArray, jshort, mirror::ShortArray&gt;(env, array, is_copy);,return GetPrimitiveArray&lt;jshortArray, jshort, mirror::ShortArray&gt;(env, array, is_copy);)<SUB>2462</SUB>> ]
-"12557" [label = <(GetPrimitiveArray&lt;jshortArray,jshort,mirror::ShortArray&gt;,GetPrimitiveArray&lt;jshortArray, jshort, mirror::ShortArray&gt;(env, array, is_copy))<SUB>2462</SUB>> ]
-"12551" [label = <(METHOD,GetShortArrayElements)<SUB>2461</SUB>> ]
-"12561" [label = <(METHOD_RETURN,jshort)<SUB>2461</SUB>> ]
-  "12556" -> "12561" 
-  "12557" -> "12556" 
-  "12551" -> "12557" 
+digraph "ReleaseDoubleArrayElements" {  
+"12247" [label = <(ReleasePrimitiveArray&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;,ReleasePrimitiveArray&lt;jdoubleArray, jdouble, mirror::DoubleArray&gt;(env, array, elements, mode))<SUB>2350</SUB>> ]
+"12241" [label = <(METHOD,ReleaseDoubleArrayElements)<SUB>2348</SUB>> ]
+"12252" [label = <(METHOD_RETURN,void)<SUB>2348</SUB>> ]
+  "12247" -> "12252" 
+  "12241" -> "12247" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/234-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/234-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/234-cfg.dot	2023-06-07 19:35:28.377384336 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/234-cfg.dot	2023-06-07 19:35:34.887383765 +0330
@@ -1,7 +1,7 @@
-digraph "ReleaseBooleanArrayElements" {  
-"12569" [label = <(ReleasePrimitiveArray&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;,ReleasePrimitiveArray&lt;jbooleanArray, jboolean, mirror::BooleanArray&gt;(env, array, elements,\012                                                                         mode))<SUB>2467</SUB>> ]
-"12563" [label = <(METHOD,ReleaseBooleanArrayElements)<SUB>2465</SUB>> ]
-"12574" [label = <(METHOD_RETURN,void)<SUB>2465</SUB>> ]
-  "12569" -> "12574" 
-  "12563" -> "12569" 
+digraph "ReleaseFloatArrayElements" {  
+"12260" [label = <(ReleasePrimitiveArray&lt;jfloatArray,jfloat,mirror::FloatArray&gt;,ReleasePrimitiveArray&lt;jfloatArray, jfloat, mirror::FloatArray&gt;(env, array, elements, mode))<SUB>2355</SUB>> ]
+"12254" [label = <(METHOD,ReleaseFloatArrayElements)<SUB>2353</SUB>> ]
+"12265" [label = <(METHOD_RETURN,void)<SUB>2353</SUB>> ]
+  "12260" -> "12265" 
+  "12254" -> "12260" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/235-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/235-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/235-cfg.dot	2023-06-07 19:35:28.377384336 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/235-cfg.dot	2023-06-07 19:35:34.887383765 +0330
@@ -1,7 +1,7 @@
-digraph "ReleaseByteArrayElements" {  
-"12582" [label = <(ReleasePrimitiveArray&lt;jbyteArray,jbyte,mirror::ByteArray&gt;,ReleasePrimitiveArray&lt;jbyteArray, jbyte, mirror::ByteArray&gt;(env, array, elements, mode))<SUB>2472</SUB>> ]
-"12576" [label = <(METHOD,ReleaseByteArrayElements)<SUB>2471</SUB>> ]
-"12587" [label = <(METHOD_RETURN,void)<SUB>2471</SUB>> ]
-  "12582" -> "12587" 
-  "12576" -> "12582" 
+digraph "ReleaseIntArrayElements" {  
+"12273" [label = <(ReleasePrimitiveArray&lt;jintArray,jint,mirror::IntArray&gt;,ReleasePrimitiveArray&lt;jintArray, jint, mirror::IntArray&gt;(env, array, elements, mode))<SUB>2359</SUB>> ]
+"12267" [label = <(METHOD,ReleaseIntArrayElements)<SUB>2358</SUB>> ]
+"12278" [label = <(METHOD_RETURN,void)<SUB>2358</SUB>> ]
+  "12273" -> "12278" 
+  "12267" -> "12273" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/236-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/236-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/236-cfg.dot	2023-06-07 19:35:28.377384336 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/236-cfg.dot	2023-06-07 19:35:34.887383765 +0330
@@ -1,7 +1,7 @@
-digraph "ReleaseCharArrayElements" {  
-"12595" [label = <(ReleasePrimitiveArray&lt;jcharArray,jchar,mirror::CharArray&gt;,ReleasePrimitiveArray&lt;jcharArray, jchar, mirror::CharArray&gt;(env, array, elements, mode))<SUB>2476</SUB>> ]
-"12589" [label = <(METHOD,ReleaseCharArrayElements)<SUB>2475</SUB>> ]
-"12600" [label = <(METHOD_RETURN,void)<SUB>2475</SUB>> ]
-  "12595" -> "12600" 
-  "12589" -> "12595" 
+digraph "ReleaseLongArrayElements" {  
+"12286" [label = <(ReleasePrimitiveArray&lt;jlongArray,jlong,mirror::LongArray&gt;,ReleasePrimitiveArray&lt;jlongArray, jlong, mirror::LongArray&gt;(env, array, elements, mode))<SUB>2363</SUB>> ]
+"12280" [label = <(METHOD,ReleaseLongArrayElements)<SUB>2362</SUB>> ]
+"12291" [label = <(METHOD_RETURN,void)<SUB>2362</SUB>> ]
+  "12286" -> "12291" 
+  "12280" -> "12286" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/237-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/237-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/237-cfg.dot	2023-06-07 19:35:28.377384336 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/237-cfg.dot	2023-06-07 19:35:34.897383766 +0330
@@ -1,7 +1,7 @@
-digraph "ReleaseDoubleArrayElements" {  
-"12608" [label = <(ReleasePrimitiveArray&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;,ReleasePrimitiveArray&lt;jdoubleArray, jdouble, mirror::DoubleArray&gt;(env, array, elements, mode))<SUB>2481</SUB>> ]
-"12602" [label = <(METHOD,ReleaseDoubleArrayElements)<SUB>2479</SUB>> ]
-"12613" [label = <(METHOD_RETURN,void)<SUB>2479</SUB>> ]
-  "12608" -> "12613" 
-  "12602" -> "12608" 
+digraph "ReleaseShortArrayElements" {  
+"12299" [label = <(ReleasePrimitiveArray&lt;jshortArray,jshort,mirror::ShortArray&gt;,ReleasePrimitiveArray&lt;jshortArray, jshort, mirror::ShortArray&gt;(env, array, elements, mode))<SUB>2368</SUB>> ]
+"12293" [label = <(METHOD,ReleaseShortArrayElements)<SUB>2366</SUB>> ]
+"12304" [label = <(METHOD_RETURN,void)<SUB>2366</SUB>> ]
+  "12299" -> "12304" 
+  "12293" -> "12299" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/238-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/238-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/238-cfg.dot	2023-06-07 19:35:28.377384336 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/238-cfg.dot	2023-06-07 19:35:34.897383766 +0330
@@ -1,7 +1,7 @@
-digraph "ReleaseFloatArrayElements" {  
-"12621" [label = <(ReleasePrimitiveArray&lt;jfloatArray,jfloat,mirror::FloatArray&gt;,ReleasePrimitiveArray&lt;jfloatArray, jfloat, mirror::FloatArray&gt;(env, array, elements, mode))<SUB>2486</SUB>> ]
-"12615" [label = <(METHOD,ReleaseFloatArrayElements)<SUB>2484</SUB>> ]
-"12626" [label = <(METHOD_RETURN,void)<SUB>2484</SUB>> ]
-  "12621" -> "12626" 
-  "12615" -> "12621" 
+digraph "GetBooleanArrayRegion" {  
+"12313" [label = <(GetPrimitiveArrayRegion&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;,GetPrimitiveArrayRegion&lt;jbooleanArray, jboolean, mirror::BooleanArray&gt;(env, array, start,\012                                                                           length, buf))<SUB>2373</SUB>> ]
+"12306" [label = <(METHOD,GetBooleanArrayRegion)<SUB>2371</SUB>> ]
+"12319" [label = <(METHOD_RETURN,void)<SUB>2371</SUB>> ]
+  "12313" -> "12319" 
+  "12306" -> "12313" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/239-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/239-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/239-cfg.dot	2023-06-07 19:35:28.377384336 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/239-cfg.dot	2023-06-07 19:35:34.897383766 +0330
@@ -1,7 +1,7 @@
-digraph "ReleaseIntArrayElements" {  
-"12634" [label = <(ReleasePrimitiveArray&lt;jintArray,jint,mirror::IntArray&gt;,ReleasePrimitiveArray&lt;jintArray, jint, mirror::IntArray&gt;(env, array, elements, mode))<SUB>2490</SUB>> ]
-"12628" [label = <(METHOD,ReleaseIntArrayElements)<SUB>2489</SUB>> ]
-"12639" [label = <(METHOD_RETURN,void)<SUB>2489</SUB>> ]
-  "12634" -> "12639" 
-  "12628" -> "12634" 
+digraph "GetByteArrayRegion" {  
+"12328" [label = <(GetPrimitiveArrayRegion&lt;jbyteArray,jbyte,mirror::ByteArray&gt;,GetPrimitiveArrayRegion&lt;jbyteArray, jbyte, mirror::ByteArray&gt;(env, array, start, length, buf))<SUB>2379</SUB>> ]
+"12321" [label = <(METHOD,GetByteArrayRegion)<SUB>2377</SUB>> ]
+"12334" [label = <(METHOD_RETURN,void)<SUB>2377</SUB>> ]
+  "12328" -> "12334" 
+  "12321" -> "12328" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/24-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/24-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/24-cfg.dot	2023-06-07 19:35:28.217384348 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/24-cfg.dot	2023-06-07 19:35:34.747383777 +0330
@@ -1,5 +1,5 @@
-digraph "NotifyGetField" {  
-"616" [label = <(METHOD,NotifyGetField)<SUB>418</SUB>> ]
-"620" [label = <(METHOD_RETURN,void)<SUB>418</SUB>> ]
-  "616" -> "620" 
+digraph "EnsureInitialized" {  
+"523" [label = <(METHOD,EnsureInitialized)<SUB>417</SUB>> ]
+"527" [label = <(METHOD_RETURN,ANY)<SUB>417</SUB>> ]
+  "523" -> "527" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/240-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/240-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/240-cfg.dot	2023-06-07 19:35:28.377384336 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/240-cfg.dot	2023-06-07 19:35:34.897383766 +0330
@@ -1,7 +1,7 @@
-digraph "ReleaseLongArrayElements" {  
-"12647" [label = <(ReleasePrimitiveArray&lt;jlongArray,jlong,mirror::LongArray&gt;,ReleasePrimitiveArray&lt;jlongArray, jlong, mirror::LongArray&gt;(env, array, elements, mode))<SUB>2494</SUB>> ]
-"12641" [label = <(METHOD,ReleaseLongArrayElements)<SUB>2493</SUB>> ]
-"12652" [label = <(METHOD_RETURN,void)<SUB>2493</SUB>> ]
-  "12647" -> "12652" 
-  "12641" -> "12647" 
+digraph "GetCharArrayRegion" {  
+"12343" [label = <(GetPrimitiveArrayRegion&lt;jcharArray,jchar,mirror::CharArray&gt;,GetPrimitiveArrayRegion&lt;jcharArray, jchar, mirror::CharArray&gt;(env, array, start, length, buf))<SUB>2384</SUB>> ]
+"12336" [label = <(METHOD,GetCharArrayRegion)<SUB>2382</SUB>> ]
+"12349" [label = <(METHOD_RETURN,void)<SUB>2382</SUB>> ]
+  "12343" -> "12349" 
+  "12336" -> "12343" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/241-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/241-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/241-cfg.dot	2023-06-07 19:35:28.377384336 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/241-cfg.dot	2023-06-07 19:35:34.897383766 +0330
@@ -1,7 +1,7 @@
-digraph "ReleaseShortArrayElements" {  
-"12660" [label = <(ReleasePrimitiveArray&lt;jshortArray,jshort,mirror::ShortArray&gt;,ReleasePrimitiveArray&lt;jshortArray, jshort, mirror::ShortArray&gt;(env, array, elements, mode))<SUB>2499</SUB>> ]
-"12654" [label = <(METHOD,ReleaseShortArrayElements)<SUB>2497</SUB>> ]
-"12665" [label = <(METHOD_RETURN,void)<SUB>2497</SUB>> ]
-  "12660" -> "12665" 
-  "12654" -> "12660" 
+digraph "GetDoubleArrayRegion" {  
+"12358" [label = <(GetPrimitiveArrayRegion&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;,GetPrimitiveArrayRegion&lt;jdoubleArray, jdouble, mirror::DoubleArray&gt;(env, array, start, length,\012                                                                        buf))<SUB>2389</SUB>> ]
+"12351" [label = <(METHOD,GetDoubleArrayRegion)<SUB>2387</SUB>> ]
+"12364" [label = <(METHOD_RETURN,void)<SUB>2387</SUB>> ]
+  "12358" -> "12364" 
+  "12351" -> "12358" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/242-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/242-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/242-cfg.dot	2023-06-07 19:35:28.377384336 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/242-cfg.dot	2023-06-07 19:35:34.897383766 +0330
@@ -1,7 +1,7 @@
-digraph "GetBooleanArrayRegion" {  
-"12674" [label = <(GetPrimitiveArrayRegion&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;,GetPrimitiveArrayRegion&lt;jbooleanArray, jboolean, mirror::BooleanArray&gt;(env, array, start,\012                                                                           length, buf))<SUB>2504</SUB>> ]
-"12667" [label = <(METHOD,GetBooleanArrayRegion)<SUB>2502</SUB>> ]
-"12680" [label = <(METHOD_RETURN,void)<SUB>2502</SUB>> ]
-  "12674" -> "12680" 
-  "12667" -> "12674" 
+digraph "GetFloatArrayRegion" {  
+"12373" [label = <(GetPrimitiveArrayRegion&lt;jfloatArray,jfloat,mirror::FloatArray&gt;,GetPrimitiveArrayRegion&lt;jfloatArray, jfloat, mirror::FloatArray&gt;(env, array, start, length,\012                                                                     buf))<SUB>2395</SUB>> ]
+"12366" [label = <(METHOD,GetFloatArrayRegion)<SUB>2393</SUB>> ]
+"12379" [label = <(METHOD_RETURN,void)<SUB>2393</SUB>> ]
+  "12373" -> "12379" 
+  "12366" -> "12373" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/243-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/243-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/243-cfg.dot	2023-06-07 19:35:28.377384336 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/243-cfg.dot	2023-06-07 19:35:34.897383766 +0330
@@ -1,7 +1,7 @@
-digraph "GetByteArrayRegion" {  
-"12689" [label = <(GetPrimitiveArrayRegion&lt;jbyteArray,jbyte,mirror::ByteArray&gt;,GetPrimitiveArrayRegion&lt;jbyteArray, jbyte, mirror::ByteArray&gt;(env, array, start, length, buf))<SUB>2510</SUB>> ]
-"12682" [label = <(METHOD,GetByteArrayRegion)<SUB>2508</SUB>> ]
-"12695" [label = <(METHOD_RETURN,void)<SUB>2508</SUB>> ]
-  "12689" -> "12695" 
-  "12682" -> "12689" 
+digraph "GetIntArrayRegion" {  
+"12388" [label = <(GetPrimitiveArrayRegion&lt;jintArray,jint,mirror::IntArray&gt;,GetPrimitiveArrayRegion&lt;jintArray, jint, mirror::IntArray&gt;(env, array, start, length, buf))<SUB>2401</SUB>> ]
+"12381" [label = <(METHOD,GetIntArrayRegion)<SUB>2399</SUB>> ]
+"12394" [label = <(METHOD_RETURN,void)<SUB>2399</SUB>> ]
+  "12388" -> "12394" 
+  "12381" -> "12388" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/244-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/244-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/244-cfg.dot	2023-06-07 19:35:28.377384336 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/244-cfg.dot	2023-06-07 19:35:34.897383766 +0330
@@ -1,7 +1,7 @@
-digraph "GetCharArrayRegion" {  
-"12704" [label = <(GetPrimitiveArrayRegion&lt;jcharArray,jchar,mirror::CharArray&gt;,GetPrimitiveArrayRegion&lt;jcharArray, jchar, mirror::CharArray&gt;(env, array, start, length, buf))<SUB>2515</SUB>> ]
-"12697" [label = <(METHOD,GetCharArrayRegion)<SUB>2513</SUB>> ]
-"12710" [label = <(METHOD_RETURN,void)<SUB>2513</SUB>> ]
-  "12704" -> "12710" 
-  "12697" -> "12704" 
+digraph "GetLongArrayRegion" {  
+"12403" [label = <(GetPrimitiveArrayRegion&lt;jlongArray,jlong,mirror::LongArray&gt;,GetPrimitiveArrayRegion&lt;jlongArray, jlong, mirror::LongArray&gt;(env, array, start, length, buf))<SUB>2406</SUB>> ]
+"12396" [label = <(METHOD,GetLongArrayRegion)<SUB>2404</SUB>> ]
+"12409" [label = <(METHOD_RETURN,void)<SUB>2404</SUB>> ]
+  "12403" -> "12409" 
+  "12396" -> "12403" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/245-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/245-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/245-cfg.dot	2023-06-07 19:35:28.377384336 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/245-cfg.dot	2023-06-07 19:35:34.897383766 +0330
@@ -1,7 +1,7 @@
-digraph "GetDoubleArrayRegion" {  
-"12719" [label = <(GetPrimitiveArrayRegion&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;,GetPrimitiveArrayRegion&lt;jdoubleArray, jdouble, mirror::DoubleArray&gt;(env, array, start, length,\012                                                                        buf))<SUB>2520</SUB>> ]
-"12712" [label = <(METHOD,GetDoubleArrayRegion)<SUB>2518</SUB>> ]
-"12725" [label = <(METHOD_RETURN,void)<SUB>2518</SUB>> ]
-  "12719" -> "12725" 
-  "12712" -> "12719" 
+digraph "GetShortArrayRegion" {  
+"12418" [label = <(GetPrimitiveArrayRegion&lt;jshortArray,jshort,mirror::ShortArray&gt;,GetPrimitiveArrayRegion&lt;jshortArray, jshort, mirror::ShortArray&gt;(env, array, start, length,\012                                                                     buf))<SUB>2411</SUB>> ]
+"12411" [label = <(METHOD,GetShortArrayRegion)<SUB>2409</SUB>> ]
+"12424" [label = <(METHOD_RETURN,void)<SUB>2409</SUB>> ]
+  "12418" -> "12424" 
+  "12411" -> "12418" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/246-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/246-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/246-cfg.dot	2023-06-07 19:35:28.377384336 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/246-cfg.dot	2023-06-07 19:35:34.897383766 +0330
@@ -1,7 +1,7 @@
-digraph "GetFloatArrayRegion" {  
-"12734" [label = <(GetPrimitiveArrayRegion&lt;jfloatArray,jfloat,mirror::FloatArray&gt;,GetPrimitiveArrayRegion&lt;jfloatArray, jfloat, mirror::FloatArray&gt;(env, array, start, length,\012                                                                     buf))<SUB>2526</SUB>> ]
-"12727" [label = <(METHOD,GetFloatArrayRegion)<SUB>2524</SUB>> ]
-"12740" [label = <(METHOD_RETURN,void)<SUB>2524</SUB>> ]
-  "12734" -> "12740" 
-  "12727" -> "12734" 
+digraph "SetBooleanArrayRegion" {  
+"12433" [label = <(SetPrimitiveArrayRegion&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;,SetPrimitiveArrayRegion&lt;jbooleanArray, jboolean, mirror::BooleanArray&gt;(env, array, start,\012                                                                           length, buf))<SUB>2417</SUB>> ]
+"12426" [label = <(METHOD,SetBooleanArrayRegion)<SUB>2415</SUB>> ]
+"12439" [label = <(METHOD_RETURN,void)<SUB>2415</SUB>> ]
+  "12433" -> "12439" 
+  "12426" -> "12433" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/247-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/247-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/247-cfg.dot	2023-06-07 19:35:28.377384336 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/247-cfg.dot	2023-06-07 19:35:34.897383766 +0330
@@ -1,7 +1,7 @@
-digraph "GetIntArrayRegion" {  
-"12749" [label = <(GetPrimitiveArrayRegion&lt;jintArray,jint,mirror::IntArray&gt;,GetPrimitiveArrayRegion&lt;jintArray, jint, mirror::IntArray&gt;(env, array, start, length, buf))<SUB>2532</SUB>> ]
-"12742" [label = <(METHOD,GetIntArrayRegion)<SUB>2530</SUB>> ]
-"12755" [label = <(METHOD_RETURN,void)<SUB>2530</SUB>> ]
-  "12749" -> "12755" 
-  "12742" -> "12749" 
+digraph "SetByteArrayRegion" {  
+"12448" [label = <(SetPrimitiveArrayRegion&lt;jbyteArray,jbyte,mirror::ByteArray&gt;,SetPrimitiveArrayRegion&lt;jbyteArray, jbyte, mirror::ByteArray&gt;(env, array, start, length, buf))<SUB>2423</SUB>> ]
+"12441" [label = <(METHOD,SetByteArrayRegion)<SUB>2421</SUB>> ]
+"12454" [label = <(METHOD_RETURN,void)<SUB>2421</SUB>> ]
+  "12448" -> "12454" 
+  "12441" -> "12448" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/248-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/248-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/248-cfg.dot	2023-06-07 19:35:28.377384336 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/248-cfg.dot	2023-06-07 19:35:34.897383766 +0330
@@ -1,7 +1,7 @@
-digraph "GetLongArrayRegion" {  
-"12764" [label = <(GetPrimitiveArrayRegion&lt;jlongArray,jlong,mirror::LongArray&gt;,GetPrimitiveArrayRegion&lt;jlongArray, jlong, mirror::LongArray&gt;(env, array, start, length, buf))<SUB>2537</SUB>> ]
-"12757" [label = <(METHOD,GetLongArrayRegion)<SUB>2535</SUB>> ]
-"12770" [label = <(METHOD_RETURN,void)<SUB>2535</SUB>> ]
-  "12764" -> "12770" 
-  "12757" -> "12764" 
+digraph "SetCharArrayRegion" {  
+"12463" [label = <(SetPrimitiveArrayRegion&lt;jcharArray,jchar,mirror::CharArray&gt;,SetPrimitiveArrayRegion&lt;jcharArray, jchar, mirror::CharArray&gt;(env, array, start, length, buf))<SUB>2428</SUB>> ]
+"12456" [label = <(METHOD,SetCharArrayRegion)<SUB>2426</SUB>> ]
+"12469" [label = <(METHOD_RETURN,void)<SUB>2426</SUB>> ]
+  "12463" -> "12469" 
+  "12456" -> "12463" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/249-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/249-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/249-cfg.dot	2023-06-07 19:35:28.377384336 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/249-cfg.dot	2023-06-07 19:35:34.897383766 +0330
@@ -1,7 +1,7 @@
-digraph "GetShortArrayRegion" {  
-"12779" [label = <(GetPrimitiveArrayRegion&lt;jshortArray,jshort,mirror::ShortArray&gt;,GetPrimitiveArrayRegion&lt;jshortArray, jshort, mirror::ShortArray&gt;(env, array, start, length,\012                                                                     buf))<SUB>2542</SUB>> ]
-"12772" [label = <(METHOD,GetShortArrayRegion)<SUB>2540</SUB>> ]
-"12785" [label = <(METHOD_RETURN,void)<SUB>2540</SUB>> ]
-  "12779" -> "12785" 
-  "12772" -> "12779" 
+digraph "SetDoubleArrayRegion" {  
+"12478" [label = <(SetPrimitiveArrayRegion&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;,SetPrimitiveArrayRegion&lt;jdoubleArray, jdouble, mirror::DoubleArray&gt;(env, array, start, length,\012                                                                        buf))<SUB>2433</SUB>> ]
+"12471" [label = <(METHOD,SetDoubleArrayRegion)<SUB>2431</SUB>> ]
+"12484" [label = <(METHOD_RETURN,void)<SUB>2431</SUB>> ]
+  "12478" -> "12484" 
+  "12471" -> "12478" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/25-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/25-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/25-cfg.dot	2023-06-07 19:35:28.217384348 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/25-cfg.dot	2023-06-07 19:35:34.747383777 +0330
@@ -1,63 +1,5 @@
-digraph "NormalizeJniClassDescriptor" {  
-"688" [label = <(RETURN,return result;,return result;)<SUB>462</SUB>> ]
-"631" [label = <(&lt;operator&gt;.equals,name[0] == '[')<SUB>449</SUB>> ]
-"652" [label = <(&lt;operator&gt;.notEquals,result.find('.') != std::string::npos)<SUB>457</SUB>> ]
-"632" [label = <(&lt;operator&gt;.indirectIndexAccess,name[0])<SUB>449</SUB>> ]
-"637" [label = <(&lt;operator&gt;.assignment,result = name)<SUB>450</SUB>> ]
-"653" [label = <(find,result.find('.'))<SUB>457</SUB>> ]
-"658" [label = <(&lt;operator&gt;.fieldAccess,std::string::npos)<SUB>457</SUB>> ]
-"664" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;Call to JNI FindClass with dots in name: &quot;\012 &lt;&lt; &quot;\&quot;&quot; &lt;&lt; name &lt;&lt; &quot;\&quot;&quot;)<SUB>458</SUB>> ]
-"674" [label = <(std::replace,std::replace(result.begin(), result.end(), '.', '/'))<SUB>460</SUB>> ]
-"642" [label = <(&lt;operator&gt;.assignmentPlus,result += 'L')<SUB>452</SUB>> ]
-"645" [label = <(&lt;operator&gt;.assignmentPlus,result += name)<SUB>453</SUB>> ]
-"648" [label = <(&lt;operator&gt;.assignmentPlus,result += ';')<SUB>454</SUB>> ]
-"654" [label = <(&lt;operator&gt;.fieldAccess,result.find)<SUB>457</SUB>> ]
-"659" [label = <(&lt;operator&gt;.fieldAccess,std::string)<SUB>457</SUB>> ]
-"662" [label = <(FIELD_IDENTIFIER,npos,npos)<SUB>457</SUB>> ]
-"665" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;Call to JNI FindClass with dots in name: &quot;\012 &lt;&lt; &quot;\&quot;&quot; &lt;&lt; name)<SUB>458</SUB>> ]
-"675" [label = <(&lt;operator&gt;.fieldAccess,std::replace)<SUB>460</SUB>> ]
-"678" [label = <(begin,result.begin())<SUB>460</SUB>> ]
-"682" [label = <(end,result.end())<SUB>460</SUB>> ]
-"656" [label = <(FIELD_IDENTIFIER,find,find)<SUB>457</SUB>> ]
-"666" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;Call to JNI FindClass with dots in name: &quot;\012 &lt;&lt; &quot;\&quot;&quot;)<SUB>458</SUB>> ]
-"677" [label = <(FIELD_IDENTIFIER,replace,replace)<SUB>460</SUB>> ]
-"679" [label = <(&lt;operator&gt;.fieldAccess,result.begin)<SUB>460</SUB>> ]
-"683" [label = <(&lt;operator&gt;.fieldAccess,result.end)<SUB>460</SUB>> ]
-"667" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;Call to JNI FindClass with dots in name: &quot;)<SUB>458</SUB>> ]
-"681" [label = <(FIELD_IDENTIFIER,begin,begin)<SUB>460</SUB>> ]
-"685" [label = <(FIELD_IDENTIFIER,end,end)<SUB>460</SUB>> ]
-"668" [label = <(LOG,LOG(WARNING))<SUB>458</SUB>> ]
-"626" [label = <(METHOD,NormalizeJniClassDescriptor)<SUB>446</SUB>> ]
-"690" [label = <(METHOD_RETURN,string)<SUB>446</SUB>> ]
-  "688" -> "690" 
-  "631" -> "637" 
-  "631" -> "642" 
-  "652" -> "668" 
-  "652" -> "688" 
-  "632" -> "631" 
-  "637" -> "656" 
-  "653" -> "659" 
-  "658" -> "652" 
-  "664" -> "677" 
-  "674" -> "688" 
-  "642" -> "645" 
-  "645" -> "648" 
-  "648" -> "656" 
-  "654" -> "653" 
-  "659" -> "662" 
-  "662" -> "658" 
-  "665" -> "664" 
-  "675" -> "681" 
-  "678" -> "685" 
-  "682" -> "674" 
-  "656" -> "654" 
-  "666" -> "665" 
-  "677" -> "675" 
-  "679" -> "678" 
-  "683" -> "682" 
-  "667" -> "666" 
-  "681" -> "679" 
-  "685" -> "683" 
-  "668" -> "667" 
-  "626" -> "632" 
+digraph "hs" {  
+"531" [label = <(METHOD,hs)<SUB>422</SUB>> ]
+"534" [label = <(METHOD_RETURN,StackHandleScope&lt;1&gt;)<SUB>422</SUB>> ]
+  "531" -> "534" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/250-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/250-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/250-cfg.dot	2023-06-07 19:35:28.377384336 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/250-cfg.dot	2023-06-07 19:35:34.897383766 +0330
@@ -1,7 +1,7 @@
-digraph "SetBooleanArrayRegion" {  
-"12794" [label = <(SetPrimitiveArrayRegion&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;,SetPrimitiveArrayRegion&lt;jbooleanArray, jboolean, mirror::BooleanArray&gt;(env, array, start,\012                                                                           length, buf))<SUB>2548</SUB>> ]
-"12787" [label = <(METHOD,SetBooleanArrayRegion)<SUB>2546</SUB>> ]
-"12800" [label = <(METHOD_RETURN,void)<SUB>2546</SUB>> ]
-  "12794" -> "12800" 
-  "12787" -> "12794" 
+digraph "SetFloatArrayRegion" {  
+"12493" [label = <(SetPrimitiveArrayRegion&lt;jfloatArray,jfloat,mirror::FloatArray&gt;,SetPrimitiveArrayRegion&lt;jfloatArray, jfloat, mirror::FloatArray&gt;(env, array, start, length,\012                                                                     buf))<SUB>2439</SUB>> ]
+"12486" [label = <(METHOD,SetFloatArrayRegion)<SUB>2437</SUB>> ]
+"12499" [label = <(METHOD_RETURN,void)<SUB>2437</SUB>> ]
+  "12493" -> "12499" 
+  "12486" -> "12493" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/251-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/251-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/251-cfg.dot	2023-06-07 19:35:28.377384336 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/251-cfg.dot	2023-06-07 19:35:34.897383766 +0330
@@ -1,7 +1,7 @@
-digraph "SetByteArrayRegion" {  
-"12809" [label = <(SetPrimitiveArrayRegion&lt;jbyteArray,jbyte,mirror::ByteArray&gt;,SetPrimitiveArrayRegion&lt;jbyteArray, jbyte, mirror::ByteArray&gt;(env, array, start, length, buf))<SUB>2554</SUB>> ]
-"12802" [label = <(METHOD,SetByteArrayRegion)<SUB>2552</SUB>> ]
-"12815" [label = <(METHOD_RETURN,void)<SUB>2552</SUB>> ]
-  "12809" -> "12815" 
-  "12802" -> "12809" 
+digraph "SetIntArrayRegion" {  
+"12508" [label = <(SetPrimitiveArrayRegion&lt;jintArray,jint,mirror::IntArray&gt;,SetPrimitiveArrayRegion&lt;jintArray, jint, mirror::IntArray&gt;(env, array, start, length, buf))<SUB>2445</SUB>> ]
+"12501" [label = <(METHOD,SetIntArrayRegion)<SUB>2443</SUB>> ]
+"12514" [label = <(METHOD_RETURN,void)<SUB>2443</SUB>> ]
+  "12508" -> "12514" 
+  "12501" -> "12508" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/252-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/252-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/252-cfg.dot	2023-06-07 19:35:28.377384336 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/252-cfg.dot	2023-06-07 19:35:34.897383766 +0330
@@ -1,7 +1,7 @@
-digraph "SetCharArrayRegion" {  
-"12824" [label = <(SetPrimitiveArrayRegion&lt;jcharArray,jchar,mirror::CharArray&gt;,SetPrimitiveArrayRegion&lt;jcharArray, jchar, mirror::CharArray&gt;(env, array, start, length, buf))<SUB>2559</SUB>> ]
-"12817" [label = <(METHOD,SetCharArrayRegion)<SUB>2557</SUB>> ]
-"12830" [label = <(METHOD_RETURN,void)<SUB>2557</SUB>> ]
-  "12824" -> "12830" 
-  "12817" -> "12824" 
+digraph "SetLongArrayRegion" {  
+"12523" [label = <(SetPrimitiveArrayRegion&lt;jlongArray,jlong,mirror::LongArray&gt;,SetPrimitiveArrayRegion&lt;jlongArray, jlong, mirror::LongArray&gt;(env, array, start, length, buf))<SUB>2450</SUB>> ]
+"12516" [label = <(METHOD,SetLongArrayRegion)<SUB>2448</SUB>> ]
+"12529" [label = <(METHOD_RETURN,void)<SUB>2448</SUB>> ]
+  "12523" -> "12529" 
+  "12516" -> "12523" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/253-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/253-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/253-cfg.dot	2023-06-07 19:35:28.387384333 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/253-cfg.dot	2023-06-07 19:35:34.897383766 +0330
@@ -1,7 +1,7 @@
-digraph "SetDoubleArrayRegion" {  
-"12839" [label = <(SetPrimitiveArrayRegion&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;,SetPrimitiveArrayRegion&lt;jdoubleArray, jdouble, mirror::DoubleArray&gt;(env, array, start, length,\012                                                                        buf))<SUB>2564</SUB>> ]
-"12832" [label = <(METHOD,SetDoubleArrayRegion)<SUB>2562</SUB>> ]
-"12845" [label = <(METHOD_RETURN,void)<SUB>2562</SUB>> ]
-  "12839" -> "12845" 
-  "12832" -> "12839" 
+digraph "SetShortArrayRegion" {  
+"12538" [label = <(SetPrimitiveArrayRegion&lt;jshortArray,jshort,mirror::ShortArray&gt;,SetPrimitiveArrayRegion&lt;jshortArray, jshort, mirror::ShortArray&gt;(env, array, start, length,\012                                                                     buf))<SUB>2455</SUB>> ]
+"12531" [label = <(METHOD,SetShortArrayRegion)<SUB>2453</SUB>> ]
+"12544" [label = <(METHOD_RETURN,void)<SUB>2453</SUB>> ]
+  "12538" -> "12544" 
+  "12531" -> "12538" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/254-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/254-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/254-cfg.dot	2023-06-07 19:35:28.387384333 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/254-cfg.dot	2023-06-07 19:35:34.897383766 +0330
@@ -1,7 +1,437 @@
-digraph "SetFloatArrayRegion" {  
-"12854" [label = <(SetPrimitiveArrayRegion&lt;jfloatArray,jfloat,mirror::FloatArray&gt;,SetPrimitiveArrayRegion&lt;jfloatArray, jfloat, mirror::FloatArray&gt;(env, array, start, length,\012                                                                     buf))<SUB>2570</SUB>> ]
-"12847" [label = <(METHOD,SetFloatArrayRegion)<SUB>2568</SUB>> ]
-"12860" [label = <(METHOD_RETURN,void)<SUB>2568</SUB>> ]
-  "12854" -> "12860" 
-  "12847" -> "12854" 
+digraph "RegisterNatives" {  
+"12568" [label = <(CHECK_NON_NULL_ARGUMENT_FN_NAME,CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, java_class, JNI_ERR))<SUB>2468</SUB>> ]
+"12589" [label = <(soa,soa(env))<SUB>2469</SUB>> ]
+"12591" [label = <(&lt;operator&gt;.greaterThan,StackHandleScope&lt;1&gt; hs(soa.Self()))<SUB>2470</SUB>> ]
+"12600" [label = <(&lt;operator&gt;.assignment,Handle&lt;mirror::Class&gt; c = hs.NewHandle(soa.Decode&lt;mirror::Class&gt;(java_class)))<SUB>2471</SUB>> ]
+"12638" [label = <(CHECK_NON_NULL_ARGUMENT_FN_NAME,CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, methods, JNI_ERR))<SUB>2477</SUB>> ]
+"12979" [label = <(RETURN,return JNI_OK;,return JNI_OK;)<SUB>2588</SUB>> ]
+"12553" [label = <(UNLIKELY,UNLIKELY(method_count &lt; 0))<SUB>2463</SUB>> ]
+"12592" [label = <(&lt;operator&gt;.lessThan,StackHandleScope&lt;1)<SUB>2470</SUB>> ]
+"12595" [label = <(hs,hs(soa.Self()))<SUB>2470</SUB>> ]
+"12601" [label = <(&lt;operator&gt;.greaterThan,Handle&lt;mirror::Class&gt; c)<SUB>2471</SUB>> ]
+"12608" [label = <(NewHandle,hs.NewHandle(soa.Decode&lt;mirror::Class&gt;(java_class)))<SUB>2471</SUB>> ]
+"12622" [label = <(UNLIKELY,UNLIKELY(method_count == 0))<SUB>2472</SUB>> ]
+"12664" [label = <(&lt;operator&gt;.lessThan,i &lt; method_count)<SUB>2478</SUB>> ]
+"12667" [label = <(&lt;operator&gt;.preIncrement,++i)<SUB>2478</SUB>> ]
+"12554" [label = <(&lt;operator&gt;.lessThan,method_count &lt; 0)<SUB>2463</SUB>> ]
+"12558" [label = <(JniAbortF,JavaVmExtFromEnv(env)-&gt;JniAbortF(&quot;RegisterNatives&quot;, &quot;negative method count: %d&quot;,\012                                       method_count))<SUB>2464</SUB>> ]
+"12566" [label = <(RETURN,return JNI_ERR;,return JNI_ERR;)<SUB>2466</SUB>> ]
+"12596" [label = <(Self,soa.Self())<SUB>2470</SUB>> ]
+"12602" [label = <(&lt;operator&gt;.lessThan,Handle&lt;mirror::Class)<SUB>2471</SUB>> ]
+"12609" [label = <(&lt;operator&gt;.fieldAccess,hs.NewHandle)<SUB>2471</SUB>> ]
+"12612" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>2471</SUB>> ]
+"12623" [label = <(&lt;operator&gt;.equals,method_count == 0)<SUB>2472</SUB>> ]
+"12627" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI RegisterNativeMethods: attempt to register 0 native methods for &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor())<SUB>2473</SUB>> ]
+"12636" [label = <(RETURN,return JNI_OK;,return JNI_OK;)<SUB>2475</SUB>> ]
+"12661" [label = <(&lt;operator&gt;.assignment,i = 0)<SUB>2478</SUB>> ]
+"12671" [label = <(&lt;operator&gt;.assignment,* name = methods[i].name)<SUB>2479</SUB>> ]
+"12679" [label = <(&lt;operator&gt;.assignment,* sig = methods[i].signature)<SUB>2480</SUB>> ]
+"12687" [label = <(&lt;operator&gt;.assignment,* fnPtr = methods[i].fnPtr)<SUB>2481</SUB>> ]
+"12747" [label = <(&lt;operator&gt;.assignment,is_fast = false)<SUB>2492</SUB>> ]
+"12762" [label = <(&lt;operator&gt;.assignment,* m = nullptr)<SUB>2530</SUB>> ]
+"12766" [label = <(&lt;operator&gt;.assignment,warn_on_going_to_parent = down_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm()-&gt;IsCheckJniEnabled())<SUB>2531</SUB>> ]
+"12942" [label = <(&lt;operator&gt;.shiftLeft,VLOG(jni) &lt;&lt; &quot;[Registering JNI native method &quot; &lt;&lt; m-&gt;PrettyMethod() &lt;&lt; &quot;]&quot;)<SUB>2571</SUB>> ]
+"12970" [label = <(&lt;operator&gt;.assignment,* final_function_ptr = m-&gt;RegisterNative(fnPtr))<SUB>2585</SUB>> ]
+"12977" [label = <(UNUSED,UNUSED(final_function_ptr))<SUB>2586</SUB>> ]
+"12559" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>2464</SUB>> ]
+"12574" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>2468</SUB>> ]
+"12597" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>2470</SUB>> ]
+"12604" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2471</SUB>> ]
+"12611" [label = <(FIELD_IDENTIFIER,NewHandle,NewHandle)<SUB>2471</SUB>> ]
+"12613" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>2471</SUB>> ]
+"12628" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI RegisterNativeMethods: attempt to register 0 native methods for &quot;)<SUB>2473</SUB>> ]
+"12632" [label = <(PrettyDescriptor,c-&gt;PrettyDescriptor())<SUB>2474</SUB>> ]
+"12644" [label = <(UNLIKELY,UNLIKELY((methods) == nullptr))<SUB>2477</SUB>> ]
+"12673" [label = <(&lt;operator&gt;.fieldAccess,methods[i].name)<SUB>2479</SUB>> ]
+"12681" [label = <(&lt;operator&gt;.fieldAccess,methods[i].signature)<SUB>2480</SUB>> ]
+"12689" [label = <(&lt;operator&gt;.fieldAccess,methods[i].fnPtr)<SUB>2481</SUB>> ]
+"12695" [label = <(UNLIKELY,UNLIKELY(name == nullptr))<SUB>2482</SUB>> ]
+"12751" [label = <(&lt;operator&gt;.equals,*sig == '!')<SUB>2522</SUB>> ]
+"12768" [label = <(IsCheckJniEnabled,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm()-&gt;IsCheckJniEnabled())<SUB>2531</SUB>> ]
+"12790" [label = <(&lt;operator&gt;.notEquals,current_class != nullptr)<SUB>2533</SUB>> ]
+"12793" [label = <(&lt;operator&gt;.assignment,current_class = current_class-&gt;GetSuperClass())<SUB>2534</SUB>> ]
+"12851" [label = <(&lt;operator&gt;.equals,m == nullptr)<SUB>2554</SUB>> ]
+"12943" [label = <(&lt;operator&gt;.shiftLeft,VLOG(jni) &lt;&lt; &quot;[Registering JNI native method &quot; &lt;&lt; m-&gt;PrettyMethod())<SUB>2571</SUB>> ]
+"12954" [label = <(UNLIKELY,UNLIKELY(is_fast))<SUB>2573</SUB>> ]
+"12972" [label = <(RegisterNative,m-&gt;RegisterNative(fnPtr))<SUB>2585</SUB>> ]
+"12560" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2464</SUB>> ]
+"12562" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2464</SUB>> ]
+"12575" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>2468</SUB>> ]
+"12579" [label = <(CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, java_class, JNI_ERR),JavaVmExtFromEnv(env)-&gt;JniAbort(&quot;RegisterNatives&quot;, &quot;java_class == null&quot;))<SUB>2468</SUB>> ]
+"12586" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, java_class, JNI_ERR),CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, java_class, JNI_ERR))<SUB>2468</SUB>> ]
+"12599" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>2470</SUB>> ]
+"12606" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>2471</SUB>> ]
+"12614" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2471</SUB>> ]
+"12617" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2471</SUB>> ]
+"12629" [label = <(LOG,LOG(WARNING))<SUB>2473</SUB>> ]
+"12633" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;PrettyDescriptor)<SUB>2474</SUB>> ]
+"12645" [label = <(&lt;operator&gt;.equals,(methods) == nullptr)<SUB>2477</SUB>> ]
+"12649" [label = <(CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, methods, JNI_ERR),JavaVmExtFromEnv(env)-&gt;JniAbort(&quot;RegisterNatives&quot;, &quot;methods == null&quot;))<SUB>2477</SUB>> ]
+"12656" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, methods, JNI_ERR),CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, methods, JNI_ERR))<SUB>2477</SUB>> ]
+"12674" [label = <(&lt;operator&gt;.indirectIndexAccess,methods[i])<SUB>2479</SUB>> ]
+"12677" [label = <(FIELD_IDENTIFIER,name,name)<SUB>2479</SUB>> ]
+"12682" [label = <(&lt;operator&gt;.indirectIndexAccess,methods[i])<SUB>2480</SUB>> ]
+"12685" [label = <(FIELD_IDENTIFIER,signature,signature)<SUB>2480</SUB>> ]
+"12690" [label = <(&lt;operator&gt;.indirectIndexAccess,methods[i])<SUB>2481</SUB>> ]
+"12693" [label = <(FIELD_IDENTIFIER,fnPtr,fnPtr)<SUB>2481</SUB>> ]
+"12696" [label = <(&lt;operator&gt;.equals,name == nullptr)<SUB>2482</SUB>> ]
+"12700" [label = <(ReportInvalidJNINativeMethod,ReportInvalidJNINativeMethod(soa, c.Get(), &quot;method name&quot;, i))<SUB>2483</SUB>> ]
+"12708" [label = <(RETURN,return JNI_ERR;,return JNI_ERR;)<SUB>2484</SUB>> ]
+"12752" [label = <(&lt;operator&gt;.indirection,*sig)<SUB>2522</SUB>> ]
+"12756" [label = <(&lt;operator&gt;.assignment,is_fast = true)<SUB>2523</SUB>> ]
+"12759" [label = <(&lt;operator&gt;.preIncrement,++sig)<SUB>2524</SUB>> ]
+"12769" [label = <(&lt;operator&gt;.indirectFieldAccess,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm()-&gt;IsCheckJniEnabled)<SUB>2531</SUB>> ]
+"12778" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; current_class = c.Get())<SUB>2532</SUB>> ]
+"12795" [label = <(GetSuperClass,current_class-&gt;GetSuperClass())<SUB>2534</SUB>> ]
+"12800" [label = <(&lt;operator&gt;.assignment,m = FindMethod&lt;true&gt;(current_class, name, sig))<SUB>2536</SUB>> ]
+"12817" [label = <(&lt;operator&gt;.assignment,m = FindMethod&lt;false&gt;(current_class, name, sig))<SUB>2542</SUB>> ]
+"12855" [label = <(DumpClass,c-&gt;DumpClass(LOG_STREAM(ERROR), mirror::Class::kDumpClassFullDetail))<SUB>2555</SUB>> ]
+"12866" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor() &lt;&lt; &quot;.&quot; &lt;&lt; name &lt;&lt; sig &lt;&lt; &quot; in &quot;\012 &lt;&lt; c-&gt;GetDexCache()-&gt;GetLocation()-&gt;ToModifiedUtf8())<SUB>2556</SUB>> ]
+"12894" [label = <(ThrowNoSuchMethodError,ThrowNoSuchMethodError(soa, c.Get(), name, sig, &quot;static or non-static&quot;))<SUB>2560</SUB>> ]
+"12903" [label = <(RETURN,return JNI_ERR;,return JNI_ERR;)<SUB>2561</SUB>> ]
+"12944" [label = <(&lt;operator&gt;.shiftLeft,VLOG(jni) &lt;&lt; &quot;[Registering JNI native method &quot;)<SUB>2571</SUB>> ]
+"12948" [label = <(PrettyMethod,m-&gt;PrettyMethod())<SUB>2571</SUB>> ]
+"12957" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;!bang JNI is deprecated. Switch to @FastNative for &quot; &lt;&lt; m-&gt;PrettyMethod())<SUB>2580</SUB>> ]
+"12966" [label = <(&lt;operator&gt;.assignment,is_fast = false)<SUB>2581</SUB>> ]
+"12973" [label = <(&lt;operator&gt;.indirectFieldAccess,m-&gt;RegisterNative)<SUB>2585</SUB>> ]
+"12580" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2468</SUB>> ]
+"12616" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2471</SUB>> ]
+"12619" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>2471</SUB>> ]
+"12635" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>2474</SUB>> ]
+"12650" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2477</SUB>> ]
+"12702" [label = <(Get,c.Get())<SUB>2483</SUB>> ]
+"12770" [label = <(GetVm,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm())<SUB>2531</SUB>> ]
+"12775" [label = <(FIELD_IDENTIFIER,IsCheckJniEnabled,IsCheckJniEnabled)<SUB>2531</SUB>> ]
+"12779" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; current_class)<SUB>2532</SUB>> ]
+"12786" [label = <(Get,c.Get())<SUB>2532</SUB>> ]
+"12796" [label = <(&lt;operator&gt;.indirectFieldAccess,current_class-&gt;GetSuperClass)<SUB>2534</SUB>> ]
+"12802" [label = <(&lt;operator&gt;.greaterThan,FindMethod&lt;true&gt;(current_class, name, sig))<SUB>2536</SUB>> ]
+"12812" [label = <(&lt;operator&gt;.notEquals,m != nullptr)<SUB>2537</SUB>> ]
+"12819" [label = <(&lt;operator&gt;.greaterThan,FindMethod&lt;false&gt;(current_class, name, sig))<SUB>2542</SUB>> ]
+"12829" [label = <(&lt;operator&gt;.notEquals,m != nullptr)<SUB>2543</SUB>> ]
+"12856" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;DumpClass)<SUB>2555</SUB>> ]
+"12859" [label = <(LOG_STREAM,LOG_STREAM(ERROR))<SUB>2555</SUB>> ]
+"12861" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class::kDumpClassFullDetail)<SUB>2555</SUB>> ]
+"12867" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor() &lt;&lt; &quot;.&quot; &lt;&lt; name &lt;&lt; sig &lt;&lt; &quot; in &quot;)<SUB>2556</SUB>> ]
+"12884" [label = <(ToModifiedUtf8,c-&gt;GetDexCache()-&gt;GetLocation()-&gt;ToModifiedUtf8())<SUB>2559</SUB>> ]
+"12896" [label = <(Get,c.Get())<SUB>2560</SUB>> ]
+"12945" [label = <(VLOG,VLOG(jni))<SUB>2571</SUB>> ]
+"12949" [label = <(&lt;operator&gt;.indirectFieldAccess,m-&gt;PrettyMethod)<SUB>2571</SUB>> ]
+"12958" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;!bang JNI is deprecated. Switch to @FastNative for &quot;)<SUB>2580</SUB>> ]
+"12962" [label = <(PrettyMethod,m-&gt;PrettyMethod())<SUB>2580</SUB>> ]
+"12975" [label = <(FIELD_IDENTIFIER,RegisterNative,RegisterNative)<SUB>2585</SUB>> ]
+"12581" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2468</SUB>> ]
+"12583" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2468</SUB>> ]
+"12651" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2477</SUB>> ]
+"12653" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2477</SUB>> ]
+"12703" [label = <(&lt;operator&gt;.fieldAccess,c.Get)<SUB>2483</SUB>> ]
+"12713" [label = <(UNLIKELY,UNLIKELY(sig == nullptr))<SUB>2485</SUB>> ]
+"12771" [label = <(&lt;operator&gt;.indirectFieldAccess,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm)<SUB>2531</SUB>> ]
+"12780" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>2532</SUB>> ]
+"12787" [label = <(&lt;operator&gt;.fieldAccess,c.Get)<SUB>2532</SUB>> ]
+"12798" [label = <(FIELD_IDENTIFIER,GetSuperClass,GetSuperClass)<SUB>2534</SUB>> ]
+"12803" [label = <(&lt;operator&gt;.lessThan,FindMethod&lt;true)<SUB>2536</SUB>> ]
+"12806" [label = <(&lt;operator&gt;.bracketedPrimary,(current_class, name, sig))<SUB>2536</SUB>> ]
+"12820" [label = <(&lt;operator&gt;.lessThan,FindMethod&lt;false)<SUB>2542</SUB>> ]
+"12823" [label = <(&lt;operator&gt;.bracketedPrimary,(current_class, name, sig))<SUB>2542</SUB>> ]
+"12837" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;CheckJNI: method to register \&quot;&quot; &lt;&lt; name &lt;&lt; &quot;\&quot; not in the given class. &quot;\012 &lt;&lt; &quot;This is slow, consider changing your RegisterNatives calls.&quot;)<SUB>2548</SUB>> ]
+"12847" [label = <(&lt;operator&gt;.assignment,warn_on_going_to_parent = false)<SUB>2550</SUB>> ]
+"12858" [label = <(FIELD_IDENTIFIER,DumpClass,DumpClass)<SUB>2555</SUB>> ]
+"12862" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2555</SUB>> ]
+"12865" [label = <(FIELD_IDENTIFIER,kDumpClassFullDetail,kDumpClassFullDetail)<SUB>2555</SUB>> ]
+"12868" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor() &lt;&lt; &quot;.&quot; &lt;&lt; name &lt;&lt; sig)<SUB>2556</SUB>> ]
+"12885" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;GetDexCache()-&gt;GetLocation()-&gt;ToModifiedUtf8)<SUB>2559</SUB>> ]
+"12897" [label = <(&lt;operator&gt;.fieldAccess,c.Get)<SUB>2560</SUB>> ]
+"12908" [label = <(&lt;operator&gt;.logicalNot,!m-&gt;IsNative())<SUB>2562</SUB>> ]
+"12951" [label = <(FIELD_IDENTIFIER,PrettyMethod,PrettyMethod)<SUB>2571</SUB>> ]
+"12959" [label = <(LOG,LOG(WARNING))<SUB>2580</SUB>> ]
+"12963" [label = <(&lt;operator&gt;.indirectFieldAccess,m-&gt;PrettyMethod)<SUB>2580</SUB>> ]
+"12705" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>2483</SUB>> ]
+"12714" [label = <(&lt;operator&gt;.equals,sig == nullptr)<SUB>2485</SUB>> ]
+"12718" [label = <(ReportInvalidJNINativeMethod,ReportInvalidJNINativeMethod(soa, c.Get(), &quot;method signature&quot;, i))<SUB>2486</SUB>> ]
+"12726" [label = <(RETURN,return JNI_ERR;,return JNI_ERR;)<SUB>2487</SUB>> ]
+"12772" [label = <(down_cast&lt;JNIEnvExt*&gt;,down_cast&lt;JNIEnvExt*&gt;(env))<SUB>2531</SUB>> ]
+"12774" [label = <(FIELD_IDENTIFIER,GetVm,GetVm)<SUB>2531</SUB>> ]
+"12782" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2532</SUB>> ]
+"12789" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>2532</SUB>> ]
+"12807" [label = <(&lt;operator&gt;.expressionList,current_class, name, sig)<SUB>2536</SUB>> ]
+"12824" [label = <(&lt;operator&gt;.expressionList,current_class, name, sig)<SUB>2542</SUB>> ]
+"12838" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;CheckJNI: method to register \&quot;&quot; &lt;&lt; name &lt;&lt; &quot;\&quot; not in the given class. &quot;)<SUB>2548</SUB>> ]
+"12869" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor() &lt;&lt; &quot;.&quot; &lt;&lt; name)<SUB>2556</SUB>> ]
+"12886" [label = <(GetLocation,c-&gt;GetDexCache()-&gt;GetLocation())<SUB>2559</SUB>> ]
+"12893" [label = <(FIELD_IDENTIFIER,ToModifiedUtf8,ToModifiedUtf8)<SUB>2559</SUB>> ]
+"12899" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>2560</SUB>> ]
+"12909" [label = <(IsNative,m-&gt;IsNative())<SUB>2562</SUB>> ]
+"12914" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register non-native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor() &lt;&lt; &quot;.&quot; &lt;&lt; name &lt;&lt; sig\012 &lt;&lt; &quot; as native&quot;)<SUB>2563</SUB>> ]
+"12931" [label = <(ThrowNoSuchMethodError,ThrowNoSuchMethodError(soa, c.Get(), name, sig, &quot;native&quot;))<SUB>2567</SUB>> ]
+"12940" [label = <(RETURN,return JNI_ERR;,return JNI_ERR;)<SUB>2568</SUB>> ]
+"12965" [label = <(FIELD_IDENTIFIER,PrettyMethod,PrettyMethod)<SUB>2580</SUB>> ]
+"12720" [label = <(Get,c.Get())<SUB>2486</SUB>> ]
+"12784" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>2532</SUB>> ]
+"12839" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;CheckJNI: method to register \&quot;&quot; &lt;&lt; name)<SUB>2548</SUB>> ]
+"12870" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor() &lt;&lt; &quot;.&quot;)<SUB>2556</SUB>> ]
+"12887" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;GetDexCache()-&gt;GetLocation)<SUB>2559</SUB>> ]
+"12910" [label = <(&lt;operator&gt;.indirectFieldAccess,m-&gt;IsNative)<SUB>2562</SUB>> ]
+"12915" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register non-native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor() &lt;&lt; &quot;.&quot; &lt;&lt; name &lt;&lt; sig)<SUB>2563</SUB>> ]
+"12933" [label = <(Get,c.Get())<SUB>2567</SUB>> ]
+"12721" [label = <(&lt;operator&gt;.fieldAccess,c.Get)<SUB>2486</SUB>> ]
+"12731" [label = <(UNLIKELY,UNLIKELY(fnPtr == nullptr))<SUB>2488</SUB>> ]
+"12840" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;CheckJNI: method to register \&quot;&quot;)<SUB>2548</SUB>> ]
+"12871" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor())<SUB>2556</SUB>> ]
+"12888" [label = <(GetDexCache,c-&gt;GetDexCache())<SUB>2559</SUB>> ]
+"12892" [label = <(FIELD_IDENTIFIER,GetLocation,GetLocation)<SUB>2559</SUB>> ]
+"12912" [label = <(FIELD_IDENTIFIER,IsNative,IsNative)<SUB>2562</SUB>> ]
+"12916" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register non-native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor() &lt;&lt; &quot;.&quot; &lt;&lt; name)<SUB>2563</SUB>> ]
+"12934" [label = <(&lt;operator&gt;.fieldAccess,c.Get)<SUB>2567</SUB>> ]
+"12723" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>2486</SUB>> ]
+"12732" [label = <(&lt;operator&gt;.equals,fnPtr == nullptr)<SUB>2488</SUB>> ]
+"12736" [label = <(ReportInvalidJNINativeMethod,ReportInvalidJNINativeMethod(soa, c.Get(), &quot;native function&quot;, i))<SUB>2489</SUB>> ]
+"12744" [label = <(RETURN,return JNI_ERR;,return JNI_ERR;)<SUB>2490</SUB>> ]
+"12841" [label = <(LOG,LOG(WARNING))<SUB>2548</SUB>> ]
+"12872" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register native method &quot;)<SUB>2556</SUB>> ]
+"12876" [label = <(PrettyDescriptor,c-&gt;PrettyDescriptor())<SUB>2558</SUB>> ]
+"12889" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;GetDexCache)<SUB>2559</SUB>> ]
+"12917" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register non-native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor() &lt;&lt; &quot;.&quot;)<SUB>2563</SUB>> ]
+"12936" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>2567</SUB>> ]
+"12738" [label = <(Get,c.Get())<SUB>2489</SUB>> ]
+"12873" [label = <(LOG,LOG(ERROR))<SUB>2556</SUB>> ]
+"12877" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;PrettyDescriptor)<SUB>2558</SUB>> ]
+"12891" [label = <(FIELD_IDENTIFIER,GetDexCache,GetDexCache)<SUB>2559</SUB>> ]
+"12918" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register non-native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor())<SUB>2563</SUB>> ]
+"12739" [label = <(&lt;operator&gt;.fieldAccess,c.Get)<SUB>2489</SUB>> ]
+"12879" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>2558</SUB>> ]
+"12919" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register non-native method &quot;)<SUB>2563</SUB>> ]
+"12923" [label = <(PrettyDescriptor,c-&gt;PrettyDescriptor())<SUB>2565</SUB>> ]
+"12741" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>2489</SUB>> ]
+"12920" [label = <(LOG,LOG(ERROR))<SUB>2563</SUB>> ]
+"12924" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;PrettyDescriptor)<SUB>2565</SUB>> ]
+"12926" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>2565</SUB>> ]
+"12546" [label = <(METHOD,RegisterNatives)<SUB>2459</SUB>> ]
+"12981" [label = <(METHOD_RETURN,jint)<SUB>2459</SUB>> ]
+  "12568" -> "12575" 
+  "12568" -> "12589" 
+  "12589" -> "12592" 
+  "12591" -> "12606" 
+  "12600" -> "12623" 
+  "12638" -> "12645" 
+  "12638" -> "12661" 
+  "12979" -> "12981" 
+  "12553" -> "12560" 
+  "12553" -> "12568" 
+  "12592" -> "12599" 
+  "12595" -> "12591" 
+  "12601" -> "12611" 
+  "12608" -> "12600" 
+  "12622" -> "12629" 
+  "12622" -> "12638" 
+  "12664" -> "12674" 
+  "12664" -> "12979" 
+  "12667" -> "12664" 
+  "12554" -> "12553" 
+  "12558" -> "12566" 
+  "12566" -> "12981" 
+  "12596" -> "12595" 
+  "12602" -> "12601" 
+  "12609" -> "12616" 
+  "12612" -> "12608" 
+  "12623" -> "12622" 
+  "12627" -> "12636" 
+  "12636" -> "12981" 
+  "12661" -> "12664" 
+  "12671" -> "12682" 
+  "12679" -> "12690" 
+  "12687" -> "12696" 
+  "12747" -> "12752" 
+  "12762" -> "12772" 
+  "12766" -> "12784" 
+  "12942" -> "12954" 
+  "12970" -> "12977" 
+  "12977" -> "12667" 
+  "12559" -> "12558" 
+  "12574" -> "12581" 
+  "12574" -> "12589" 
+  "12597" -> "12596" 
+  "12604" -> "12602" 
+  "12611" -> "12609" 
+  "12613" -> "12612" 
+  "12628" -> "12635" 
+  "12632" -> "12627" 
+  "12644" -> "12651" 
+  "12644" -> "12661" 
+  "12673" -> "12671" 
+  "12681" -> "12679" 
+  "12689" -> "12687" 
+  "12695" -> "12705" 
+  "12695" -> "12714" 
+  "12751" -> "12756" 
+  "12751" -> "12762" 
+  "12768" -> "12766" 
+  "12790" -> "12803" 
+  "12790" -> "12851" 
+  "12793" -> "12790" 
+  "12851" -> "12858" 
+  "12851" -> "12912" 
+  "12943" -> "12942" 
+  "12954" -> "12959" 
+  "12954" -> "12975" 
+  "12972" -> "12970" 
+  "12560" -> "12562" 
+  "12562" -> "12559" 
+  "12575" -> "12574" 
+  "12579" -> "12586" 
+  "12586" -> "12981" 
+  "12599" -> "12597" 
+  "12606" -> "12604" 
+  "12614" -> "12619" 
+  "12617" -> "12613" 
+  "12629" -> "12628" 
+  "12633" -> "12632" 
+  "12645" -> "12644" 
+  "12649" -> "12656" 
+  "12656" -> "12981" 
+  "12674" -> "12677" 
+  "12677" -> "12673" 
+  "12682" -> "12685" 
+  "12685" -> "12681" 
+  "12690" -> "12693" 
+  "12693" -> "12689" 
+  "12696" -> "12695" 
+  "12700" -> "12708" 
+  "12708" -> "12981" 
+  "12752" -> "12751" 
+  "12756" -> "12759" 
+  "12759" -> "12762" 
+  "12769" -> "12768" 
+  "12778" -> "12790" 
+  "12795" -> "12793" 
+  "12800" -> "12812" 
+  "12817" -> "12829" 
+  "12855" -> "12873" 
+  "12866" -> "12899" 
+  "12894" -> "12903" 
+  "12903" -> "12981" 
+  "12944" -> "12951" 
+  "12948" -> "12943" 
+  "12957" -> "12966" 
+  "12966" -> "12975" 
+  "12973" -> "12972" 
+  "12580" -> "12579" 
+  "12616" -> "12614" 
+  "12619" -> "12617" 
+  "12635" -> "12633" 
+  "12650" -> "12649" 
+  "12702" -> "12700" 
+  "12770" -> "12775" 
+  "12775" -> "12769" 
+  "12779" -> "12789" 
+  "12786" -> "12778" 
+  "12796" -> "12795" 
+  "12802" -> "12800" 
+  "12812" -> "12851" 
+  "12812" -> "12820" 
+  "12819" -> "12817" 
+  "12829" -> "12851" 
+  "12829" -> "12841" 
+  "12829" -> "12798" 
+  "12856" -> "12859" 
+  "12859" -> "12862" 
+  "12861" -> "12855" 
+  "12867" -> "12891" 
+  "12884" -> "12866" 
+  "12896" -> "12894" 
+  "12945" -> "12944" 
+  "12949" -> "12948" 
+  "12958" -> "12965" 
+  "12962" -> "12957" 
+  "12975" -> "12973" 
+  "12581" -> "12583" 
+  "12583" -> "12580" 
+  "12651" -> "12653" 
+  "12653" -> "12650" 
+  "12703" -> "12702" 
+  "12713" -> "12723" 
+  "12713" -> "12732" 
+  "12771" -> "12770" 
+  "12780" -> "12779" 
+  "12787" -> "12786" 
+  "12798" -> "12796" 
+  "12803" -> "12807" 
+  "12806" -> "12802" 
+  "12820" -> "12824" 
+  "12823" -> "12819" 
+  "12837" -> "12847" 
+  "12847" -> "12798" 
+  "12858" -> "12856" 
+  "12862" -> "12865" 
+  "12865" -> "12861" 
+  "12868" -> "12867" 
+  "12885" -> "12884" 
+  "12897" -> "12896" 
+  "12908" -> "12920" 
+  "12908" -> "12945" 
+  "12951" -> "12949" 
+  "12959" -> "12958" 
+  "12963" -> "12962" 
+  "12705" -> "12703" 
+  "12714" -> "12713" 
+  "12718" -> "12726" 
+  "12726" -> "12981" 
+  "12772" -> "12774" 
+  "12774" -> "12771" 
+  "12782" -> "12780" 
+  "12789" -> "12787" 
+  "12807" -> "12806" 
+  "12824" -> "12823" 
+  "12838" -> "12837" 
+  "12869" -> "12868" 
+  "12886" -> "12893" 
+  "12893" -> "12885" 
+  "12899" -> "12897" 
+  "12909" -> "12908" 
+  "12914" -> "12936" 
+  "12931" -> "12940" 
+  "12940" -> "12981" 
+  "12965" -> "12963" 
+  "12720" -> "12718" 
+  "12784" -> "12782" 
+  "12839" -> "12838" 
+  "12870" -> "12869" 
+  "12887" -> "12886" 
+  "12910" -> "12909" 
+  "12915" -> "12914" 
+  "12933" -> "12931" 
+  "12721" -> "12720" 
+  "12731" -> "12741" 
+  "12731" -> "12747" 
+  "12840" -> "12839" 
+  "12871" -> "12870" 
+  "12888" -> "12892" 
+  "12892" -> "12887" 
+  "12912" -> "12910" 
+  "12916" -> "12915" 
+  "12934" -> "12933" 
+  "12723" -> "12721" 
+  "12732" -> "12731" 
+  "12736" -> "12744" 
+  "12744" -> "12981" 
+  "12841" -> "12840" 
+  "12872" -> "12879" 
+  "12876" -> "12871" 
+  "12889" -> "12888" 
+  "12917" -> "12916" 
+  "12936" -> "12934" 
+  "12738" -> "12736" 
+  "12873" -> "12872" 
+  "12877" -> "12876" 
+  "12891" -> "12889" 
+  "12918" -> "12917" 
+  "12739" -> "12738" 
+  "12879" -> "12877" 
+  "12919" -> "12926" 
+  "12923" -> "12918" 
+  "12741" -> "12739" 
+  "12920" -> "12919" 
+  "12924" -> "12923" 
+  "12926" -> "12924" 
+  "12546" -> "12554" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/255-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/255-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/255-cfg.dot	2023-06-07 19:35:28.387384333 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/255-cfg.dot	2023-06-07 19:35:34.897383766 +0330
@@ -1,7 +1,123 @@
-digraph "SetIntArrayRegion" {  
-"12869" [label = <(SetPrimitiveArrayRegion&lt;jintArray,jint,mirror::IntArray&gt;,SetPrimitiveArrayRegion&lt;jintArray, jint, mirror::IntArray&gt;(env, array, start, length, buf))<SUB>2576</SUB>> ]
-"12862" [label = <(METHOD,SetIntArrayRegion)<SUB>2574</SUB>> ]
-"12875" [label = <(METHOD_RETURN,void)<SUB>2574</SUB>> ]
-  "12869" -> "12875" 
-  "12862" -> "12869" 
+digraph "UnregisterNatives" {  
+"12987" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_ERR))<SUB>2592</SUB>> ]
+"13007" [label = <(soa,soa(env))<SUB>2593</SUB>> ]
+"13009" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c = soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>2594</SUB>> ]
+"13026" [label = <(&lt;operator&gt;.shiftLeft,VLOG(jni) &lt;&lt; &quot;[Unregistering JNI native methods for &quot; &lt;&lt; mirror::Class::PrettyClass(c) &lt;&lt; &quot;]&quot;)<SUB>2596</SUB>> ]
+"13041" [label = <(&lt;operator&gt;.assignment,unregistered_count = 0)<SUB>2598</SUB>> ]
+"13045" [label = <(&lt;operator&gt;.assignment,pointer_size = Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize())<SUB>2599</SUB>> ]
+"13096" [label = <(RETURN,return JNI_OK;,return JNI_OK;)<SUB>2611</SUB>> ]
+"13010" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c)<SUB>2594</SUB>> ]
+"13017" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>2594</SUB>> ]
+"13027" [label = <(&lt;operator&gt;.shiftLeft,VLOG(jni) &lt;&lt; &quot;[Unregistering JNI native methods for &quot; &lt;&lt; mirror::Class::PrettyClass(c))<SUB>2596</SUB>> ]
+"13047" [label = <(GetImagePointerSize,Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize())<SUB>2599</SUB>> ]
+"13078" [label = <(&lt;operator&gt;.equals,unregistered_count == 0)<SUB>2607</SUB>> ]
+"13011" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>2594</SUB>> ]
+"13018" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>2594</SUB>> ]
+"13028" [label = <(&lt;operator&gt;.shiftLeft,VLOG(jni) &lt;&lt; &quot;[Unregistering JNI native methods for &quot;)<SUB>2596</SUB>> ]
+"13032" [label = <(mirror::Class::PrettyClass,mirror::Class::PrettyClass(c))<SUB>2596</SUB>> ]
+"13048" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize)<SUB>2599</SUB>> ]
+"13082" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI UnregisterNatives: attempt to unregister native methods of class '&quot;\012 &lt;&lt; mirror::Class::PrettyDescriptor(c) &lt;&lt; &quot;' that contains no native methods&quot;)<SUB>2608</SUB>> ]
+"12992" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>2592</SUB>> ]
+"13013" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2594</SUB>> ]
+"13019" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2594</SUB>> ]
+"13022" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2594</SUB>> ]
+"13029" [label = <(VLOG,VLOG(jni))<SUB>2596</SUB>> ]
+"13033" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class::PrettyClass)<SUB>2596</SUB>> ]
+"13049" [label = <(GetClassLinker,Runtime::Current()-&gt;GetClassLinker())<SUB>2599</SUB>> ]
+"13056" [label = <(FIELD_IDENTIFIER,GetImagePointerSize,GetImagePointerSize)<SUB>2599</SUB>> ]
+"13066" [label = <(IsNative,m.IsNative())<SUB>2601</SUB>> ]
+"13083" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI UnregisterNatives: attempt to unregister native methods of class '&quot;\012 &lt;&lt; mirror::Class::PrettyDescriptor(c))<SUB>2608</SUB>> ]
+"12993" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>2592</SUB>> ]
+"12997" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_ERR),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class == null&quot;))<SUB>2592</SUB>> ]
+"13004" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_ERR),CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_ERR))<SUB>2592</SUB>> ]
+"13015" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>2594</SUB>> ]
+"13021" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2594</SUB>> ]
+"13024" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>2594</SUB>> ]
+"13034" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2596</SUB>> ]
+"13037" [label = <(FIELD_IDENTIFIER,PrettyClass,PrettyClass)<SUB>2596</SUB>> ]
+"13050" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetClassLinker)<SUB>2599</SUB>> ]
+"13067" [label = <(&lt;operator&gt;.fieldAccess,m.IsNative)<SUB>2601</SUB>> ]
+"13071" [label = <(UnregisterNative,m.UnregisterNative())<SUB>2602</SUB>> ]
+"13075" [label = <(&lt;operator&gt;.postIncrement,unregistered_count++)<SUB>2603</SUB>> ]
+"13084" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI UnregisterNatives: attempt to unregister native methods of class '&quot;)<SUB>2608</SUB>> ]
+"13088" [label = <(mirror::Class::PrettyDescriptor,mirror::Class::PrettyDescriptor(c))<SUB>2609</SUB>> ]
+"12998" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2592</SUB>> ]
+"13051" [label = <(Runtime::Current,Runtime::Current())<SUB>2599</SUB>> ]
+"13055" [label = <(FIELD_IDENTIFIER,GetClassLinker,GetClassLinker)<SUB>2599</SUB>> ]
+"13069" [label = <(FIELD_IDENTIFIER,IsNative,IsNative)<SUB>2601</SUB>> ]
+"13072" [label = <(&lt;operator&gt;.fieldAccess,m.UnregisterNative)<SUB>2602</SUB>> ]
+"13085" [label = <(LOG,LOG(WARNING))<SUB>2608</SUB>> ]
+"13089" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class::PrettyDescriptor)<SUB>2609</SUB>> ]
+"12999" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2592</SUB>> ]
+"13001" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2592</SUB>> ]
+"13052" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>2599</SUB>> ]
+"13074" [label = <(FIELD_IDENTIFIER,UnregisterNative,UnregisterNative)<SUB>2602</SUB>> ]
+"13090" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2609</SUB>> ]
+"13093" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>2609</SUB>> ]
+"13054" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>2599</SUB>> ]
+"12983" [label = <(METHOD,UnregisterNatives)<SUB>2591</SUB>> ]
+"13098" [label = <(METHOD_RETURN,jint)<SUB>2591</SUB>> ]
+  "12987" -> "12993" 
+  "12987" -> "13007" 
+  "13007" -> "13015" 
+  "13009" -> "13029" 
+  "13026" -> "13041" 
+  "13041" -> "13054" 
+  "13045" -> "13069" 
+  "13096" -> "13098" 
+  "13010" -> "13021" 
+  "13017" -> "13009" 
+  "13027" -> "13026" 
+  "13047" -> "13045" 
+  "13078" -> "13085" 
+  "13078" -> "13096" 
+  "13011" -> "13010" 
+  "13018" -> "13017" 
+  "13028" -> "13034" 
+  "13032" -> "13027" 
+  "13048" -> "13047" 
+  "13082" -> "13096" 
+  "12992" -> "12999" 
+  "12992" -> "13007" 
+  "13013" -> "13011" 
+  "13019" -> "13024" 
+  "13022" -> "13018" 
+  "13029" -> "13028" 
+  "13033" -> "13032" 
+  "13049" -> "13056" 
+  "13056" -> "13048" 
+  "13066" -> "13069" 
+  "13066" -> "13074" 
+  "13066" -> "13078" 
+  "13083" -> "13082" 
+  "12993" -> "12992" 
+  "12997" -> "13004" 
+  "13004" -> "13098" 
+  "13015" -> "13013" 
+  "13021" -> "13019" 
+  "13024" -> "13022" 
+  "13034" -> "13037" 
+  "13037" -> "13033" 
+  "13050" -> "13049" 
+  "13067" -> "13066" 
+  "13071" -> "13075" 
+  "13075" -> "13069" 
+  "13075" -> "13078" 
+  "13084" -> "13090" 
+  "13088" -> "13083" 
+  "12998" -> "12997" 
+  "13051" -> "13055" 
+  "13055" -> "13050" 
+  "13069" -> "13067" 
+  "13072" -> "13071" 
+  "13085" -> "13084" 
+  "13089" -> "13088" 
+  "12999" -> "13001" 
+  "13001" -> "12998" 
+  "13052" -> "13051" 
+  "13074" -> "13072" 
+  "13090" -> "13093" 
+  "13093" -> "13089" 
+  "13054" -> "13052" 
+  "12983" -> "12987" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/256-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/256-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/256-cfg.dot	2023-06-07 19:35:28.387384333 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/256-cfg.dot	2023-06-07 19:35:34.897383766 +0330
@@ -1,7 +1,5 @@
-digraph "SetLongArrayRegion" {  
-"12884" [label = <(SetPrimitiveArrayRegion&lt;jlongArray,jlong,mirror::LongArray&gt;,SetPrimitiveArrayRegion&lt;jlongArray, jlong, mirror::LongArray&gt;(env, array, start, length, buf))<SUB>2581</SUB>> ]
-"12877" [label = <(METHOD,SetLongArrayRegion)<SUB>2579</SUB>> ]
-"12890" [label = <(METHOD_RETURN,void)<SUB>2579</SUB>> ]
-  "12884" -> "12890" 
-  "12877" -> "12884" 
+digraph "MonitorEnter" {  
+"13100" [label = <(METHOD,MonitorEnter)<SUB>2614</SUB>> ]
+"13104" [label = <(METHOD_RETURN,jint)<SUB>2614</SUB>> ]
+  "13100" -> "13104" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/257-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/257-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/257-cfg.dot	2023-06-07 19:35:28.387384333 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/257-cfg.dot	2023-06-07 19:35:34.897383766 +0330
@@ -1,7 +1,5 @@
-digraph "SetShortArrayRegion" {  
-"12899" [label = <(SetPrimitiveArrayRegion&lt;jshortArray,jshort,mirror::ShortArray&gt;,SetPrimitiveArrayRegion&lt;jshortArray, jshort, mirror::ShortArray&gt;(env, array, start, length,\012                                                                     buf))<SUB>2586</SUB>> ]
-"12892" [label = <(METHOD,SetShortArrayRegion)<SUB>2584</SUB>> ]
-"12905" [label = <(METHOD_RETURN,void)<SUB>2584</SUB>> ]
-  "12899" -> "12905" 
-  "12892" -> "12899" 
+digraph "MonitorExit" {  
+"13108" [label = <(METHOD,MonitorExit)<SUB>2628</SUB>> ]
+"13112" [label = <(METHOD_RETURN,jint)<SUB>2628</SUB>> ]
+  "13108" -> "13112" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/258-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/258-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/258-cfg.dot	2023-06-07 19:35:28.387384333 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/258-cfg.dot	2023-06-07 19:35:34.897383766 +0330
@@ -1,437 +1,56 @@
-digraph "RegisterNatives" {  
-"12929" [label = <(CHECK_NON_NULL_ARGUMENT_FN_NAME,CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, java_class, JNI_ERR))<SUB>2599</SUB>> ]
-"12950" [label = <(soa,soa(env))<SUB>2600</SUB>> ]
-"12952" [label = <(&lt;operator&gt;.greaterThan,StackHandleScope&lt;1&gt; hs(soa.Self()))<SUB>2601</SUB>> ]
-"12961" [label = <(&lt;operator&gt;.assignment,Handle&lt;mirror::Class&gt; c = hs.NewHandle(soa.Decode&lt;mirror::Class&gt;(java_class)))<SUB>2602</SUB>> ]
-"12999" [label = <(CHECK_NON_NULL_ARGUMENT_FN_NAME,CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, methods, JNI_ERR))<SUB>2608</SUB>> ]
-"13340" [label = <(RETURN,return JNI_OK;,return JNI_OK;)<SUB>2719</SUB>> ]
-"12914" [label = <(UNLIKELY,UNLIKELY(method_count &lt; 0))<SUB>2594</SUB>> ]
-"12953" [label = <(&lt;operator&gt;.lessThan,StackHandleScope&lt;1)<SUB>2601</SUB>> ]
-"12956" [label = <(hs,hs(soa.Self()))<SUB>2601</SUB>> ]
-"12962" [label = <(&lt;operator&gt;.greaterThan,Handle&lt;mirror::Class&gt; c)<SUB>2602</SUB>> ]
-"12969" [label = <(NewHandle,hs.NewHandle(soa.Decode&lt;mirror::Class&gt;(java_class)))<SUB>2602</SUB>> ]
-"12983" [label = <(UNLIKELY,UNLIKELY(method_count == 0))<SUB>2603</SUB>> ]
-"13025" [label = <(&lt;operator&gt;.lessThan,i &lt; method_count)<SUB>2609</SUB>> ]
-"13028" [label = <(&lt;operator&gt;.preIncrement,++i)<SUB>2609</SUB>> ]
-"12915" [label = <(&lt;operator&gt;.lessThan,method_count &lt; 0)<SUB>2594</SUB>> ]
-"12919" [label = <(JniAbortF,JavaVmExtFromEnv(env)-&gt;JniAbortF(&quot;RegisterNatives&quot;, &quot;negative method count: %d&quot;,\012                                       method_count))<SUB>2595</SUB>> ]
-"12927" [label = <(RETURN,return JNI_ERR;,return JNI_ERR;)<SUB>2597</SUB>> ]
-"12957" [label = <(Self,soa.Self())<SUB>2601</SUB>> ]
-"12963" [label = <(&lt;operator&gt;.lessThan,Handle&lt;mirror::Class)<SUB>2602</SUB>> ]
-"12970" [label = <(&lt;operator&gt;.fieldAccess,hs.NewHandle)<SUB>2602</SUB>> ]
-"12973" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>2602</SUB>> ]
-"12984" [label = <(&lt;operator&gt;.equals,method_count == 0)<SUB>2603</SUB>> ]
-"12988" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI RegisterNativeMethods: attempt to register 0 native methods for &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor())<SUB>2604</SUB>> ]
-"12997" [label = <(RETURN,return JNI_OK;,return JNI_OK;)<SUB>2606</SUB>> ]
-"13022" [label = <(&lt;operator&gt;.assignment,i = 0)<SUB>2609</SUB>> ]
-"13032" [label = <(&lt;operator&gt;.assignment,* name = methods[i].name)<SUB>2610</SUB>> ]
-"13040" [label = <(&lt;operator&gt;.assignment,* sig = methods[i].signature)<SUB>2611</SUB>> ]
-"13048" [label = <(&lt;operator&gt;.assignment,* fnPtr = methods[i].fnPtr)<SUB>2612</SUB>> ]
-"13108" [label = <(&lt;operator&gt;.assignment,is_fast = false)<SUB>2623</SUB>> ]
-"13123" [label = <(&lt;operator&gt;.assignment,* m = nullptr)<SUB>2661</SUB>> ]
-"13127" [label = <(&lt;operator&gt;.assignment,warn_on_going_to_parent = down_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm()-&gt;IsCheckJniEnabled())<SUB>2662</SUB>> ]
-"13303" [label = <(&lt;operator&gt;.shiftLeft,VLOG(jni) &lt;&lt; &quot;[Registering JNI native method &quot; &lt;&lt; m-&gt;PrettyMethod() &lt;&lt; &quot;]&quot;)<SUB>2702</SUB>> ]
-"13331" [label = <(&lt;operator&gt;.assignment,* final_function_ptr = m-&gt;RegisterNative(fnPtr))<SUB>2716</SUB>> ]
-"13338" [label = <(UNUSED,UNUSED(final_function_ptr))<SUB>2717</SUB>> ]
-"12920" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbortF)<SUB>2595</SUB>> ]
-"12935" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>2599</SUB>> ]
-"12958" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>2601</SUB>> ]
-"12965" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2602</SUB>> ]
-"12972" [label = <(FIELD_IDENTIFIER,NewHandle,NewHandle)<SUB>2602</SUB>> ]
-"12974" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>2602</SUB>> ]
-"12989" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI RegisterNativeMethods: attempt to register 0 native methods for &quot;)<SUB>2604</SUB>> ]
-"12993" [label = <(PrettyDescriptor,c-&gt;PrettyDescriptor())<SUB>2605</SUB>> ]
-"13005" [label = <(UNLIKELY,UNLIKELY((methods) == nullptr))<SUB>2608</SUB>> ]
-"13034" [label = <(&lt;operator&gt;.fieldAccess,methods[i].name)<SUB>2610</SUB>> ]
-"13042" [label = <(&lt;operator&gt;.fieldAccess,methods[i].signature)<SUB>2611</SUB>> ]
-"13050" [label = <(&lt;operator&gt;.fieldAccess,methods[i].fnPtr)<SUB>2612</SUB>> ]
-"13056" [label = <(UNLIKELY,UNLIKELY(name == nullptr))<SUB>2613</SUB>> ]
-"13112" [label = <(&lt;operator&gt;.equals,*sig == '!')<SUB>2653</SUB>> ]
-"13129" [label = <(IsCheckJniEnabled,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm()-&gt;IsCheckJniEnabled())<SUB>2662</SUB>> ]
-"13151" [label = <(&lt;operator&gt;.notEquals,current_class != nullptr)<SUB>2664</SUB>> ]
-"13154" [label = <(&lt;operator&gt;.assignment,current_class = current_class-&gt;GetSuperClass())<SUB>2665</SUB>> ]
-"13212" [label = <(&lt;operator&gt;.equals,m == nullptr)<SUB>2685</SUB>> ]
-"13304" [label = <(&lt;operator&gt;.shiftLeft,VLOG(jni) &lt;&lt; &quot;[Registering JNI native method &quot; &lt;&lt; m-&gt;PrettyMethod())<SUB>2702</SUB>> ]
-"13315" [label = <(UNLIKELY,UNLIKELY(is_fast))<SUB>2704</SUB>> ]
-"13333" [label = <(RegisterNative,m-&gt;RegisterNative(fnPtr))<SUB>2716</SUB>> ]
-"12921" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2595</SUB>> ]
-"12923" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2595</SUB>> ]
-"12936" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>2599</SUB>> ]
-"12940" [label = <(CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, java_class, JNI_ERR),JavaVmExtFromEnv(env)-&gt;JniAbort(&quot;RegisterNatives&quot;, &quot;java_class == null&quot;))<SUB>2599</SUB>> ]
-"12947" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, java_class, JNI_ERR),CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, java_class, JNI_ERR))<SUB>2599</SUB>> ]
-"12960" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>2601</SUB>> ]
-"12967" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>2602</SUB>> ]
-"12975" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2602</SUB>> ]
-"12978" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2602</SUB>> ]
-"12990" [label = <(LOG,LOG(WARNING))<SUB>2604</SUB>> ]
-"12994" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;PrettyDescriptor)<SUB>2605</SUB>> ]
-"13006" [label = <(&lt;operator&gt;.equals,(methods) == nullptr)<SUB>2608</SUB>> ]
-"13010" [label = <(CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, methods, JNI_ERR),JavaVmExtFromEnv(env)-&gt;JniAbort(&quot;RegisterNatives&quot;, &quot;methods == null&quot;))<SUB>2608</SUB>> ]
-"13017" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, methods, JNI_ERR),CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, methods, JNI_ERR))<SUB>2608</SUB>> ]
-"13035" [label = <(&lt;operator&gt;.indirectIndexAccess,methods[i])<SUB>2610</SUB>> ]
-"13038" [label = <(FIELD_IDENTIFIER,name,name)<SUB>2610</SUB>> ]
-"13043" [label = <(&lt;operator&gt;.indirectIndexAccess,methods[i])<SUB>2611</SUB>> ]
-"13046" [label = <(FIELD_IDENTIFIER,signature,signature)<SUB>2611</SUB>> ]
-"13051" [label = <(&lt;operator&gt;.indirectIndexAccess,methods[i])<SUB>2612</SUB>> ]
-"13054" [label = <(FIELD_IDENTIFIER,fnPtr,fnPtr)<SUB>2612</SUB>> ]
-"13057" [label = <(&lt;operator&gt;.equals,name == nullptr)<SUB>2613</SUB>> ]
-"13061" [label = <(ReportInvalidJNINativeMethod,ReportInvalidJNINativeMethod(soa, c.Get(), &quot;method name&quot;, i))<SUB>2614</SUB>> ]
-"13069" [label = <(RETURN,return JNI_ERR;,return JNI_ERR;)<SUB>2615</SUB>> ]
-"13113" [label = <(&lt;operator&gt;.indirection,*sig)<SUB>2653</SUB>> ]
-"13117" [label = <(&lt;operator&gt;.assignment,is_fast = true)<SUB>2654</SUB>> ]
-"13120" [label = <(&lt;operator&gt;.preIncrement,++sig)<SUB>2655</SUB>> ]
-"13130" [label = <(&lt;operator&gt;.indirectFieldAccess,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm()-&gt;IsCheckJniEnabled)<SUB>2662</SUB>> ]
-"13139" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; current_class = c.Get())<SUB>2663</SUB>> ]
-"13156" [label = <(GetSuperClass,current_class-&gt;GetSuperClass())<SUB>2665</SUB>> ]
-"13161" [label = <(&lt;operator&gt;.assignment,m = FindMethod&lt;true&gt;(current_class, name, sig))<SUB>2667</SUB>> ]
-"13178" [label = <(&lt;operator&gt;.assignment,m = FindMethod&lt;false&gt;(current_class, name, sig))<SUB>2673</SUB>> ]
-"13216" [label = <(DumpClass,c-&gt;DumpClass(LOG_STREAM(ERROR), mirror::Class::kDumpClassFullDetail))<SUB>2686</SUB>> ]
-"13227" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor() &lt;&lt; &quot;.&quot; &lt;&lt; name &lt;&lt; sig &lt;&lt; &quot; in &quot;\012 &lt;&lt; c-&gt;GetDexCache()-&gt;GetLocation()-&gt;ToModifiedUtf8())<SUB>2687</SUB>> ]
-"13255" [label = <(ThrowNoSuchMethodError,ThrowNoSuchMethodError(soa, c.Get(), name, sig, &quot;static or non-static&quot;))<SUB>2691</SUB>> ]
-"13264" [label = <(RETURN,return JNI_ERR;,return JNI_ERR;)<SUB>2692</SUB>> ]
-"13305" [label = <(&lt;operator&gt;.shiftLeft,VLOG(jni) &lt;&lt; &quot;[Registering JNI native method &quot;)<SUB>2702</SUB>> ]
-"13309" [label = <(PrettyMethod,m-&gt;PrettyMethod())<SUB>2702</SUB>> ]
-"13318" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;!bang JNI is deprecated. Switch to @FastNative for &quot; &lt;&lt; m-&gt;PrettyMethod())<SUB>2711</SUB>> ]
-"13327" [label = <(&lt;operator&gt;.assignment,is_fast = false)<SUB>2712</SUB>> ]
-"13334" [label = <(&lt;operator&gt;.indirectFieldAccess,m-&gt;RegisterNative)<SUB>2716</SUB>> ]
-"12941" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2599</SUB>> ]
-"12977" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2602</SUB>> ]
-"12980" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>2602</SUB>> ]
-"12996" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>2605</SUB>> ]
-"13011" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2608</SUB>> ]
-"13063" [label = <(Get,c.Get())<SUB>2614</SUB>> ]
-"13131" [label = <(GetVm,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm())<SUB>2662</SUB>> ]
-"13136" [label = <(FIELD_IDENTIFIER,IsCheckJniEnabled,IsCheckJniEnabled)<SUB>2662</SUB>> ]
-"13140" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; current_class)<SUB>2663</SUB>> ]
-"13147" [label = <(Get,c.Get())<SUB>2663</SUB>> ]
-"13157" [label = <(&lt;operator&gt;.indirectFieldAccess,current_class-&gt;GetSuperClass)<SUB>2665</SUB>> ]
-"13163" [label = <(&lt;operator&gt;.greaterThan,FindMethod&lt;true&gt;(current_class, name, sig))<SUB>2667</SUB>> ]
-"13173" [label = <(&lt;operator&gt;.notEquals,m != nullptr)<SUB>2668</SUB>> ]
-"13180" [label = <(&lt;operator&gt;.greaterThan,FindMethod&lt;false&gt;(current_class, name, sig))<SUB>2673</SUB>> ]
-"13190" [label = <(&lt;operator&gt;.notEquals,m != nullptr)<SUB>2674</SUB>> ]
-"13217" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;DumpClass)<SUB>2686</SUB>> ]
-"13220" [label = <(LOG_STREAM,LOG_STREAM(ERROR))<SUB>2686</SUB>> ]
-"13222" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class::kDumpClassFullDetail)<SUB>2686</SUB>> ]
-"13228" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor() &lt;&lt; &quot;.&quot; &lt;&lt; name &lt;&lt; sig &lt;&lt; &quot; in &quot;)<SUB>2687</SUB>> ]
-"13245" [label = <(ToModifiedUtf8,c-&gt;GetDexCache()-&gt;GetLocation()-&gt;ToModifiedUtf8())<SUB>2690</SUB>> ]
-"13257" [label = <(Get,c.Get())<SUB>2691</SUB>> ]
-"13306" [label = <(VLOG,VLOG(jni))<SUB>2702</SUB>> ]
-"13310" [label = <(&lt;operator&gt;.indirectFieldAccess,m-&gt;PrettyMethod)<SUB>2702</SUB>> ]
-"13319" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;!bang JNI is deprecated. Switch to @FastNative for &quot;)<SUB>2711</SUB>> ]
-"13323" [label = <(PrettyMethod,m-&gt;PrettyMethod())<SUB>2711</SUB>> ]
-"13336" [label = <(FIELD_IDENTIFIER,RegisterNative,RegisterNative)<SUB>2716</SUB>> ]
-"12942" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2599</SUB>> ]
-"12944" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2599</SUB>> ]
-"13012" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2608</SUB>> ]
-"13014" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2608</SUB>> ]
-"13064" [label = <(&lt;operator&gt;.fieldAccess,c.Get)<SUB>2614</SUB>> ]
-"13074" [label = <(UNLIKELY,UNLIKELY(sig == nullptr))<SUB>2616</SUB>> ]
-"13132" [label = <(&lt;operator&gt;.indirectFieldAccess,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm)<SUB>2662</SUB>> ]
-"13141" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>2663</SUB>> ]
-"13148" [label = <(&lt;operator&gt;.fieldAccess,c.Get)<SUB>2663</SUB>> ]
-"13159" [label = <(FIELD_IDENTIFIER,GetSuperClass,GetSuperClass)<SUB>2665</SUB>> ]
-"13164" [label = <(&lt;operator&gt;.lessThan,FindMethod&lt;true)<SUB>2667</SUB>> ]
-"13167" [label = <(&lt;operator&gt;.bracketedPrimary,(current_class, name, sig))<SUB>2667</SUB>> ]
-"13181" [label = <(&lt;operator&gt;.lessThan,FindMethod&lt;false)<SUB>2673</SUB>> ]
-"13184" [label = <(&lt;operator&gt;.bracketedPrimary,(current_class, name, sig))<SUB>2673</SUB>> ]
-"13198" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;CheckJNI: method to register \&quot;&quot; &lt;&lt; name &lt;&lt; &quot;\&quot; not in the given class. &quot;\012 &lt;&lt; &quot;This is slow, consider changing your RegisterNatives calls.&quot;)<SUB>2679</SUB>> ]
-"13208" [label = <(&lt;operator&gt;.assignment,warn_on_going_to_parent = false)<SUB>2681</SUB>> ]
-"13219" [label = <(FIELD_IDENTIFIER,DumpClass,DumpClass)<SUB>2686</SUB>> ]
-"13223" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2686</SUB>> ]
-"13226" [label = <(FIELD_IDENTIFIER,kDumpClassFullDetail,kDumpClassFullDetail)<SUB>2686</SUB>> ]
-"13229" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor() &lt;&lt; &quot;.&quot; &lt;&lt; name &lt;&lt; sig)<SUB>2687</SUB>> ]
-"13246" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;GetDexCache()-&gt;GetLocation()-&gt;ToModifiedUtf8)<SUB>2690</SUB>> ]
-"13258" [label = <(&lt;operator&gt;.fieldAccess,c.Get)<SUB>2691</SUB>> ]
-"13269" [label = <(&lt;operator&gt;.logicalNot,!m-&gt;IsNative())<SUB>2693</SUB>> ]
-"13312" [label = <(FIELD_IDENTIFIER,PrettyMethod,PrettyMethod)<SUB>2702</SUB>> ]
-"13320" [label = <(LOG,LOG(WARNING))<SUB>2711</SUB>> ]
-"13324" [label = <(&lt;operator&gt;.indirectFieldAccess,m-&gt;PrettyMethod)<SUB>2711</SUB>> ]
-"13066" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>2614</SUB>> ]
-"13075" [label = <(&lt;operator&gt;.equals,sig == nullptr)<SUB>2616</SUB>> ]
-"13079" [label = <(ReportInvalidJNINativeMethod,ReportInvalidJNINativeMethod(soa, c.Get(), &quot;method signature&quot;, i))<SUB>2617</SUB>> ]
-"13087" [label = <(RETURN,return JNI_ERR;,return JNI_ERR;)<SUB>2618</SUB>> ]
-"13133" [label = <(down_cast&lt;JNIEnvExt*&gt;,down_cast&lt;JNIEnvExt*&gt;(env))<SUB>2662</SUB>> ]
-"13135" [label = <(FIELD_IDENTIFIER,GetVm,GetVm)<SUB>2662</SUB>> ]
-"13143" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2663</SUB>> ]
-"13150" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>2663</SUB>> ]
-"13168" [label = <(&lt;operator&gt;.expressionList,current_class, name, sig)<SUB>2667</SUB>> ]
-"13185" [label = <(&lt;operator&gt;.expressionList,current_class, name, sig)<SUB>2673</SUB>> ]
-"13199" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;CheckJNI: method to register \&quot;&quot; &lt;&lt; name &lt;&lt; &quot;\&quot; not in the given class. &quot;)<SUB>2679</SUB>> ]
-"13230" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor() &lt;&lt; &quot;.&quot; &lt;&lt; name)<SUB>2687</SUB>> ]
-"13247" [label = <(GetLocation,c-&gt;GetDexCache()-&gt;GetLocation())<SUB>2690</SUB>> ]
-"13254" [label = <(FIELD_IDENTIFIER,ToModifiedUtf8,ToModifiedUtf8)<SUB>2690</SUB>> ]
-"13260" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>2691</SUB>> ]
-"13270" [label = <(IsNative,m-&gt;IsNative())<SUB>2693</SUB>> ]
-"13275" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register non-native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor() &lt;&lt; &quot;.&quot; &lt;&lt; name &lt;&lt; sig\012 &lt;&lt; &quot; as native&quot;)<SUB>2694</SUB>> ]
-"13292" [label = <(ThrowNoSuchMethodError,ThrowNoSuchMethodError(soa, c.Get(), name, sig, &quot;native&quot;))<SUB>2698</SUB>> ]
-"13301" [label = <(RETURN,return JNI_ERR;,return JNI_ERR;)<SUB>2699</SUB>> ]
-"13326" [label = <(FIELD_IDENTIFIER,PrettyMethod,PrettyMethod)<SUB>2711</SUB>> ]
-"13081" [label = <(Get,c.Get())<SUB>2617</SUB>> ]
-"13145" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>2663</SUB>> ]
-"13200" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;CheckJNI: method to register \&quot;&quot; &lt;&lt; name)<SUB>2679</SUB>> ]
-"13231" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor() &lt;&lt; &quot;.&quot;)<SUB>2687</SUB>> ]
-"13248" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;GetDexCache()-&gt;GetLocation)<SUB>2690</SUB>> ]
-"13271" [label = <(&lt;operator&gt;.indirectFieldAccess,m-&gt;IsNative)<SUB>2693</SUB>> ]
-"13276" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register non-native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor() &lt;&lt; &quot;.&quot; &lt;&lt; name &lt;&lt; sig)<SUB>2694</SUB>> ]
-"13294" [label = <(Get,c.Get())<SUB>2698</SUB>> ]
-"13082" [label = <(&lt;operator&gt;.fieldAccess,c.Get)<SUB>2617</SUB>> ]
-"13092" [label = <(UNLIKELY,UNLIKELY(fnPtr == nullptr))<SUB>2619</SUB>> ]
-"13201" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;CheckJNI: method to register \&quot;&quot;)<SUB>2679</SUB>> ]
-"13232" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor())<SUB>2687</SUB>> ]
-"13249" [label = <(GetDexCache,c-&gt;GetDexCache())<SUB>2690</SUB>> ]
-"13253" [label = <(FIELD_IDENTIFIER,GetLocation,GetLocation)<SUB>2690</SUB>> ]
-"13273" [label = <(FIELD_IDENTIFIER,IsNative,IsNative)<SUB>2693</SUB>> ]
-"13277" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register non-native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor() &lt;&lt; &quot;.&quot; &lt;&lt; name)<SUB>2694</SUB>> ]
-"13295" [label = <(&lt;operator&gt;.fieldAccess,c.Get)<SUB>2698</SUB>> ]
-"13084" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>2617</SUB>> ]
-"13093" [label = <(&lt;operator&gt;.equals,fnPtr == nullptr)<SUB>2619</SUB>> ]
-"13097" [label = <(ReportInvalidJNINativeMethod,ReportInvalidJNINativeMethod(soa, c.Get(), &quot;native function&quot;, i))<SUB>2620</SUB>> ]
-"13105" [label = <(RETURN,return JNI_ERR;,return JNI_ERR;)<SUB>2621</SUB>> ]
-"13202" [label = <(LOG,LOG(WARNING))<SUB>2679</SUB>> ]
-"13233" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register native method &quot;)<SUB>2687</SUB>> ]
-"13237" [label = <(PrettyDescriptor,c-&gt;PrettyDescriptor())<SUB>2689</SUB>> ]
-"13250" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;GetDexCache)<SUB>2690</SUB>> ]
-"13278" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register non-native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor() &lt;&lt; &quot;.&quot;)<SUB>2694</SUB>> ]
-"13297" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>2698</SUB>> ]
-"13099" [label = <(Get,c.Get())<SUB>2620</SUB>> ]
-"13234" [label = <(LOG,LOG(ERROR))<SUB>2687</SUB>> ]
-"13238" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;PrettyDescriptor)<SUB>2689</SUB>> ]
-"13252" [label = <(FIELD_IDENTIFIER,GetDexCache,GetDexCache)<SUB>2690</SUB>> ]
-"13279" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register non-native method &quot;\012 &lt;&lt; c-&gt;PrettyDescriptor())<SUB>2694</SUB>> ]
-"13100" [label = <(&lt;operator&gt;.fieldAccess,c.Get)<SUB>2620</SUB>> ]
-"13240" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>2689</SUB>> ]
-"13280" [label = <(&lt;operator&gt;.shiftLeft,LOG(ERROR)\012 &lt;&lt; &quot;Failed to register non-native method &quot;)<SUB>2694</SUB>> ]
-"13284" [label = <(PrettyDescriptor,c-&gt;PrettyDescriptor())<SUB>2696</SUB>> ]
-"13102" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>2620</SUB>> ]
-"13281" [label = <(LOG,LOG(ERROR))<SUB>2694</SUB>> ]
-"13285" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;PrettyDescriptor)<SUB>2696</SUB>> ]
-"13287" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>2696</SUB>> ]
-"12907" [label = <(METHOD,RegisterNatives)<SUB>2590</SUB>> ]
-"13342" [label = <(METHOD_RETURN,jint)<SUB>2590</SUB>> ]
-  "12929" -> "12936" 
-  "12929" -> "12950" 
-  "12950" -> "12953" 
-  "12952" -> "12967" 
-  "12961" -> "12984" 
-  "12999" -> "13006" 
-  "12999" -> "13022" 
-  "13340" -> "13342" 
-  "12914" -> "12921" 
-  "12914" -> "12929" 
-  "12953" -> "12960" 
-  "12956" -> "12952" 
-  "12962" -> "12972" 
-  "12969" -> "12961" 
-  "12983" -> "12990" 
-  "12983" -> "12999" 
-  "13025" -> "13035" 
-  "13025" -> "13340" 
-  "13028" -> "13025" 
-  "12915" -> "12914" 
-  "12919" -> "12927" 
-  "12927" -> "13342" 
-  "12957" -> "12956" 
-  "12963" -> "12962" 
-  "12970" -> "12977" 
-  "12973" -> "12969" 
-  "12984" -> "12983" 
-  "12988" -> "12997" 
-  "12997" -> "13342" 
-  "13022" -> "13025" 
-  "13032" -> "13043" 
-  "13040" -> "13051" 
-  "13048" -> "13057" 
-  "13108" -> "13113" 
-  "13123" -> "13133" 
-  "13127" -> "13145" 
-  "13303" -> "13315" 
-  "13331" -> "13338" 
-  "13338" -> "13028" 
-  "12920" -> "12919" 
-  "12935" -> "12942" 
-  "12935" -> "12950" 
-  "12958" -> "12957" 
-  "12965" -> "12963" 
-  "12972" -> "12970" 
-  "12974" -> "12973" 
-  "12989" -> "12996" 
-  "12993" -> "12988" 
-  "13005" -> "13012" 
-  "13005" -> "13022" 
-  "13034" -> "13032" 
-  "13042" -> "13040" 
-  "13050" -> "13048" 
-  "13056" -> "13066" 
-  "13056" -> "13075" 
-  "13112" -> "13117" 
-  "13112" -> "13123" 
-  "13129" -> "13127" 
-  "13151" -> "13164" 
-  "13151" -> "13212" 
-  "13154" -> "13151" 
-  "13212" -> "13219" 
-  "13212" -> "13273" 
-  "13304" -> "13303" 
-  "13315" -> "13320" 
-  "13315" -> "13336" 
-  "13333" -> "13331" 
-  "12921" -> "12923" 
-  "12923" -> "12920" 
-  "12936" -> "12935" 
-  "12940" -> "12947" 
-  "12947" -> "13342" 
-  "12960" -> "12958" 
-  "12967" -> "12965" 
-  "12975" -> "12980" 
-  "12978" -> "12974" 
-  "12990" -> "12989" 
-  "12994" -> "12993" 
-  "13006" -> "13005" 
-  "13010" -> "13017" 
-  "13017" -> "13342" 
-  "13035" -> "13038" 
-  "13038" -> "13034" 
-  "13043" -> "13046" 
-  "13046" -> "13042" 
-  "13051" -> "13054" 
-  "13054" -> "13050" 
-  "13057" -> "13056" 
-  "13061" -> "13069" 
-  "13069" -> "13342" 
-  "13113" -> "13112" 
-  "13117" -> "13120" 
-  "13120" -> "13123" 
-  "13130" -> "13129" 
-  "13139" -> "13151" 
-  "13156" -> "13154" 
-  "13161" -> "13173" 
-  "13178" -> "13190" 
-  "13216" -> "13234" 
-  "13227" -> "13260" 
-  "13255" -> "13264" 
-  "13264" -> "13342" 
-  "13305" -> "13312" 
-  "13309" -> "13304" 
-  "13318" -> "13327" 
-  "13327" -> "13336" 
-  "13334" -> "13333" 
-  "12941" -> "12940" 
-  "12977" -> "12975" 
-  "12980" -> "12978" 
-  "12996" -> "12994" 
-  "13011" -> "13010" 
-  "13063" -> "13061" 
-  "13131" -> "13136" 
-  "13136" -> "13130" 
-  "13140" -> "13150" 
-  "13147" -> "13139" 
-  "13157" -> "13156" 
-  "13163" -> "13161" 
-  "13173" -> "13212" 
-  "13173" -> "13181" 
-  "13180" -> "13178" 
-  "13190" -> "13212" 
-  "13190" -> "13202" 
-  "13190" -> "13159" 
-  "13217" -> "13220" 
-  "13220" -> "13223" 
-  "13222" -> "13216" 
-  "13228" -> "13252" 
-  "13245" -> "13227" 
-  "13257" -> "13255" 
-  "13306" -> "13305" 
-  "13310" -> "13309" 
-  "13319" -> "13326" 
-  "13323" -> "13318" 
-  "13336" -> "13334" 
-  "12942" -> "12944" 
-  "12944" -> "12941" 
-  "13012" -> "13014" 
-  "13014" -> "13011" 
-  "13064" -> "13063" 
-  "13074" -> "13084" 
-  "13074" -> "13093" 
-  "13132" -> "13131" 
-  "13141" -> "13140" 
-  "13148" -> "13147" 
-  "13159" -> "13157" 
-  "13164" -> "13168" 
-  "13167" -> "13163" 
-  "13181" -> "13185" 
-  "13184" -> "13180" 
-  "13198" -> "13208" 
-  "13208" -> "13159" 
-  "13219" -> "13217" 
-  "13223" -> "13226" 
-  "13226" -> "13222" 
-  "13229" -> "13228" 
-  "13246" -> "13245" 
-  "13258" -> "13257" 
-  "13269" -> "13281" 
-  "13269" -> "13306" 
-  "13312" -> "13310" 
-  "13320" -> "13319" 
-  "13324" -> "13323" 
-  "13066" -> "13064" 
-  "13075" -> "13074" 
-  "13079" -> "13087" 
-  "13087" -> "13342" 
-  "13133" -> "13135" 
-  "13135" -> "13132" 
-  "13143" -> "13141" 
-  "13150" -> "13148" 
-  "13168" -> "13167" 
-  "13185" -> "13184" 
-  "13199" -> "13198" 
-  "13230" -> "13229" 
-  "13247" -> "13254" 
-  "13254" -> "13246" 
-  "13260" -> "13258" 
-  "13270" -> "13269" 
-  "13275" -> "13297" 
-  "13292" -> "13301" 
-  "13301" -> "13342" 
-  "13326" -> "13324" 
-  "13081" -> "13079" 
+digraph "GetJavaVM" {  
+"13120" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(vm, JNI_ERR))<SUB>2644</SUB>> ]
+"13140" [label = <(&lt;operator&gt;.assignment,* runtime = Runtime::Current())<SUB>2645</SUB>> ]
+"13164" [label = <(RETURN,return (*vm != nullptr) ? JNI_OK : JNI_ERR;,return (*vm != nullptr) ? JNI_OK : JNI_ERR;)<SUB>2651</SUB>> ]
+"13142" [label = <(Runtime::Current,Runtime::Current())<SUB>2645</SUB>> ]
+"13147" [label = <(&lt;operator&gt;.notEquals,runtime != nullptr)<SUB>2646</SUB>> ]
+"13165" [label = <(&lt;operator&gt;.conditional,(*vm != nullptr) ? JNI_OK : JNI_ERR)<SUB>2651</SUB>> ]
+"13143" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>2645</SUB>> ]
+"13151" [label = <(&lt;operator&gt;.assignment,*vm = runtime-&gt;GetJavaVM())<SUB>2647</SUB>> ]
+"13166" [label = <(&lt;operator&gt;.notEquals,*vm != nullptr)<SUB>2651</SUB>> ]
+"13125" [label = <(UNLIKELY,UNLIKELY((vm) == nullptr))<SUB>2644</SUB>> ]
+"13145" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>2645</SUB>> ]
+"13152" [label = <(&lt;operator&gt;.indirection,*vm)<SUB>2647</SUB>> ]
+"13154" [label = <(GetJavaVM,runtime-&gt;GetJavaVM())<SUB>2647</SUB>> ]
+"13160" [label = <(&lt;operator&gt;.assignment,*vm = nullptr)<SUB>2649</SUB>> ]
+"13167" [label = <(&lt;operator&gt;.indirection,*vm)<SUB>2651</SUB>> ]
+"13126" [label = <(&lt;operator&gt;.equals,(vm) == nullptr)<SUB>2644</SUB>> ]
+"13130" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN(vm, JNI_ERR),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;vm == null&quot;))<SUB>2644</SUB>> ]
+"13137" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(vm, JNI_ERR),CHECK_NON_NULL_ARGUMENT_RETURN(vm, JNI_ERR))<SUB>2644</SUB>> ]
+"13155" [label = <(&lt;operator&gt;.indirectFieldAccess,runtime-&gt;GetJavaVM)<SUB>2647</SUB>> ]
+"13161" [label = <(&lt;operator&gt;.indirection,*vm)<SUB>2649</SUB>> ]
+"13131" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2644</SUB>> ]
+"13157" [label = <(FIELD_IDENTIFIER,GetJavaVM,GetJavaVM)<SUB>2647</SUB>> ]
+"13132" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2644</SUB>> ]
+"13134" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2644</SUB>> ]
+"13116" [label = <(METHOD,GetJavaVM)<SUB>2643</SUB>> ]
+"13172" [label = <(METHOD_RETURN,jint)<SUB>2643</SUB>> ]
+  "13120" -> "13126" 
+  "13120" -> "13145" 
+  "13140" -> "13147" 
+  "13164" -> "13172" 
+  "13142" -> "13140" 
+  "13147" -> "13152" 
+  "13147" -> "13161" 
+  "13165" -> "13164" 
+  "13143" -> "13142" 
+  "13151" -> "13167" 
+  "13166" -> "13165" 
+  "13125" -> "13132" 
+  "13125" -> "13145" 
   "13145" -> "13143" 
-  "13200" -> "13199" 
-  "13231" -> "13230" 
-  "13248" -> "13247" 
-  "13271" -> "13270" 
-  "13276" -> "13275" 
-  "13294" -> "13292" 
-  "13082" -> "13081" 
-  "13092" -> "13102" 
-  "13092" -> "13108" 
-  "13201" -> "13200" 
-  "13232" -> "13231" 
-  "13249" -> "13253" 
-  "13253" -> "13248" 
-  "13273" -> "13271" 
-  "13277" -> "13276" 
-  "13295" -> "13294" 
-  "13084" -> "13082" 
-  "13093" -> "13092" 
-  "13097" -> "13105" 
-  "13105" -> "13342" 
-  "13202" -> "13201" 
-  "13233" -> "13240" 
-  "13237" -> "13232" 
-  "13250" -> "13249" 
-  "13278" -> "13277" 
-  "13297" -> "13295" 
-  "13099" -> "13097" 
-  "13234" -> "13233" 
-  "13238" -> "13237" 
-  "13252" -> "13250" 
-  "13279" -> "13278" 
-  "13100" -> "13099" 
-  "13240" -> "13238" 
-  "13280" -> "13287" 
-  "13284" -> "13279" 
-  "13102" -> "13100" 
-  "13281" -> "13280" 
-  "13285" -> "13284" 
-  "13287" -> "13285" 
-  "12907" -> "12915" 
+  "13152" -> "13157" 
+  "13154" -> "13151" 
+  "13160" -> "13167" 
+  "13167" -> "13166" 
+  "13126" -> "13125" 
+  "13130" -> "13137" 
+  "13137" -> "13172" 
+  "13155" -> "13154" 
+  "13161" -> "13160" 
+  "13131" -> "13130" 
+  "13157" -> "13155" 
+  "13132" -> "13134" 
+  "13134" -> "13131" 
+  "13116" -> "13120" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/259-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/259-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/259-cfg.dot	2023-06-07 19:35:28.387384333 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/259-cfg.dot	2023-06-07 19:35:34.907383764 +0330
@@ -1,123 +1,83 @@
-digraph "UnregisterNatives" {  
-"13348" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_ERR))<SUB>2723</SUB>> ]
-"13368" [label = <(soa,soa(env))<SUB>2724</SUB>> ]
-"13370" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c = soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>2725</SUB>> ]
-"13387" [label = <(&lt;operator&gt;.shiftLeft,VLOG(jni) &lt;&lt; &quot;[Unregistering JNI native methods for &quot; &lt;&lt; mirror::Class::PrettyClass(c) &lt;&lt; &quot;]&quot;)<SUB>2727</SUB>> ]
-"13402" [label = <(&lt;operator&gt;.assignment,unregistered_count = 0)<SUB>2729</SUB>> ]
-"13406" [label = <(&lt;operator&gt;.assignment,pointer_size = Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize())<SUB>2730</SUB>> ]
-"13457" [label = <(RETURN,return JNI_OK;,return JNI_OK;)<SUB>2742</SUB>> ]
-"13371" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c)<SUB>2725</SUB>> ]
-"13378" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>2725</SUB>> ]
-"13388" [label = <(&lt;operator&gt;.shiftLeft,VLOG(jni) &lt;&lt; &quot;[Unregistering JNI native methods for &quot; &lt;&lt; mirror::Class::PrettyClass(c))<SUB>2727</SUB>> ]
-"13408" [label = <(GetImagePointerSize,Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize())<SUB>2730</SUB>> ]
-"13439" [label = <(&lt;operator&gt;.equals,unregistered_count == 0)<SUB>2738</SUB>> ]
-"13372" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>2725</SUB>> ]
-"13379" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>2725</SUB>> ]
-"13389" [label = <(&lt;operator&gt;.shiftLeft,VLOG(jni) &lt;&lt; &quot;[Unregistering JNI native methods for &quot;)<SUB>2727</SUB>> ]
-"13393" [label = <(mirror::Class::PrettyClass,mirror::Class::PrettyClass(c))<SUB>2727</SUB>> ]
-"13409" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize)<SUB>2730</SUB>> ]
-"13443" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI UnregisterNatives: attempt to unregister native methods of class '&quot;\012 &lt;&lt; mirror::Class::PrettyDescriptor(c) &lt;&lt; &quot;' that contains no native methods&quot;)<SUB>2739</SUB>> ]
-"13353" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>2723</SUB>> ]
-"13374" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2725</SUB>> ]
-"13380" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2725</SUB>> ]
-"13383" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2725</SUB>> ]
-"13390" [label = <(VLOG,VLOG(jni))<SUB>2727</SUB>> ]
-"13394" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class::PrettyClass)<SUB>2727</SUB>> ]
-"13410" [label = <(GetClassLinker,Runtime::Current()-&gt;GetClassLinker())<SUB>2730</SUB>> ]
-"13417" [label = <(FIELD_IDENTIFIER,GetImagePointerSize,GetImagePointerSize)<SUB>2730</SUB>> ]
-"13427" [label = <(IsNative,m.IsNative())<SUB>2732</SUB>> ]
-"13444" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI UnregisterNatives: attempt to unregister native methods of class '&quot;\012 &lt;&lt; mirror::Class::PrettyDescriptor(c))<SUB>2739</SUB>> ]
-"13354" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>2723</SUB>> ]
-"13358" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_ERR),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class == null&quot;))<SUB>2723</SUB>> ]
-"13365" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_ERR),CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_ERR))<SUB>2723</SUB>> ]
-"13376" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>2725</SUB>> ]
-"13382" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2725</SUB>> ]
-"13385" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>2725</SUB>> ]
-"13395" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2727</SUB>> ]
-"13398" [label = <(FIELD_IDENTIFIER,PrettyClass,PrettyClass)<SUB>2727</SUB>> ]
-"13411" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetClassLinker)<SUB>2730</SUB>> ]
-"13428" [label = <(&lt;operator&gt;.fieldAccess,m.IsNative)<SUB>2732</SUB>> ]
-"13432" [label = <(UnregisterNative,m.UnregisterNative())<SUB>2733</SUB>> ]
-"13436" [label = <(&lt;operator&gt;.postIncrement,unregistered_count++)<SUB>2734</SUB>> ]
-"13445" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI UnregisterNatives: attempt to unregister native methods of class '&quot;)<SUB>2739</SUB>> ]
-"13449" [label = <(mirror::Class::PrettyDescriptor,mirror::Class::PrettyDescriptor(c))<SUB>2740</SUB>> ]
-"13359" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2723</SUB>> ]
-"13412" [label = <(Runtime::Current,Runtime::Current())<SUB>2730</SUB>> ]
-"13416" [label = <(FIELD_IDENTIFIER,GetClassLinker,GetClassLinker)<SUB>2730</SUB>> ]
-"13430" [label = <(FIELD_IDENTIFIER,IsNative,IsNative)<SUB>2732</SUB>> ]
-"13433" [label = <(&lt;operator&gt;.fieldAccess,m.UnregisterNative)<SUB>2733</SUB>> ]
-"13446" [label = <(LOG,LOG(WARNING))<SUB>2739</SUB>> ]
-"13450" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class::PrettyDescriptor)<SUB>2740</SUB>> ]
-"13360" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2723</SUB>> ]
-"13362" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2723</SUB>> ]
-"13413" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>2730</SUB>> ]
-"13435" [label = <(FIELD_IDENTIFIER,UnregisterNative,UnregisterNative)<SUB>2733</SUB>> ]
-"13451" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>2740</SUB>> ]
-"13454" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>2740</SUB>> ]
-"13415" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>2730</SUB>> ]
-"13344" [label = <(METHOD,UnregisterNatives)<SUB>2722</SUB>> ]
-"13459" [label = <(METHOD_RETURN,jint)<SUB>2722</SUB>> ]
-  "13348" -> "13354" 
-  "13348" -> "13368" 
-  "13368" -> "13376" 
-  "13370" -> "13390" 
-  "13387" -> "13402" 
-  "13402" -> "13415" 
-  "13406" -> "13430" 
-  "13457" -> "13459" 
-  "13371" -> "13382" 
-  "13378" -> "13370" 
-  "13388" -> "13387" 
-  "13408" -> "13406" 
-  "13439" -> "13446" 
-  "13439" -> "13457" 
-  "13372" -> "13371" 
-  "13379" -> "13378" 
-  "13389" -> "13395" 
-  "13393" -> "13388" 
-  "13409" -> "13408" 
-  "13443" -> "13457" 
-  "13353" -> "13360" 
-  "13353" -> "13368" 
-  "13374" -> "13372" 
-  "13380" -> "13385" 
-  "13383" -> "13379" 
-  "13390" -> "13389" 
-  "13394" -> "13393" 
-  "13410" -> "13417" 
-  "13417" -> "13409" 
-  "13427" -> "13430" 
-  "13427" -> "13435" 
-  "13427" -> "13439" 
-  "13444" -> "13443" 
-  "13354" -> "13353" 
-  "13358" -> "13365" 
-  "13365" -> "13459" 
-  "13376" -> "13374" 
-  "13382" -> "13380" 
-  "13385" -> "13383" 
-  "13395" -> "13398" 
-  "13398" -> "13394" 
-  "13411" -> "13410" 
-  "13428" -> "13427" 
-  "13432" -> "13436" 
-  "13436" -> "13430" 
-  "13436" -> "13439" 
-  "13445" -> "13451" 
-  "13449" -> "13444" 
-  "13359" -> "13358" 
-  "13412" -> "13416" 
-  "13416" -> "13411" 
-  "13430" -> "13428" 
-  "13433" -> "13432" 
-  "13446" -> "13445" 
-  "13450" -> "13449" 
-  "13360" -> "13362" 
-  "13362" -> "13359" 
-  "13413" -> "13412" 
-  "13435" -> "13433" 
-  "13451" -> "13454" 
-  "13454" -> "13450" 
-  "13415" -> "13413" 
-  "13344" -> "13348" 
+digraph "NewDirectByteBuffer" {  
+"13214" [label = <(&lt;operator&gt;.assignment,address_arg = reinterpret_cast&lt;jlong&gt;(address))<SUB>2673</SUB>> ]
+"13220" [label = <(&lt;operator&gt;.assignment,capacity_arg = static_cast&lt;jint&gt;(capacity))<SUB>2674</SUB>> ]
+"13226" [label = <(&lt;operator&gt;.assignment,result = env-&gt;NewObject(WellKnownClasses::java_nio_DirectByteBuffer,\012 WellKnownClasses::java_nio_DirectByteBuffer_init,\012                                    address_arg, capacity_arg))<SUB>2676</SUB>> ]
+"13240" [label = <(RETURN,return static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_-&gt;IsExceptionPending() ? nullptr : result;,return static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_-&gt;IsExceptionPending() ? nullptr : result;)<SUB>2679</SUB>> ]
+"13180" [label = <(&lt;operator&gt;.lessThan,capacity &lt; 0)<SUB>2655</SUB>> ]
+"13190" [label = <(&lt;operator&gt;.logicalAnd,address == nullptr &amp;&amp; capacity != 0)<SUB>2660</SUB>> ]
+"13204" [label = <(&lt;operator&gt;.greaterThan,capacity &gt; INT_MAX)<SUB>2667</SUB>> ]
+"13216" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jlong&gt;(address))<SUB>2673</SUB>> ]
+"13222" [label = <(&lt;operator&gt;.cast,static_cast&lt;jint&gt;(capacity))<SUB>2674</SUB>> ]
+"13228" [label = <(NewObject,env-&gt;NewObject(WellKnownClasses::java_nio_DirectByteBuffer,\012 WellKnownClasses::java_nio_DirectByteBuffer_init,\012                                    address_arg, capacity_arg))<SUB>2676</SUB>> ]
+"13241" [label = <(&lt;operator&gt;.conditional,static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_-&gt;IsExceptionPending() ? nullptr : result)<SUB>2679</SUB>> ]
+"13185" [label = <(UNKNOWN,),))<SUB>2656</SUB>> ]
+"13186" [label = <(UNKNOWN,-&gt;JniAbortF(&quot;NewDirectByteBuffer&quot;, &quot;negative buffer capacity: %&quot; PRId64,\012                                       capacity);,-&gt;JniAbortF(&quot;NewDirectByteBuffer&quot;, &quot;negative buffer capacity: %&quot; PRId64,\012                                       capacity);)<SUB>2656</SUB>> ]
+"13187" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2658</SUB>> ]
+"13191" [label = <(&lt;operator&gt;.equals,address == nullptr)<SUB>2660</SUB>> ]
+"13194" [label = <(&lt;operator&gt;.notEquals,capacity != 0)<SUB>2660</SUB>> ]
+"13199" [label = <(UNKNOWN,),))<SUB>2661</SUB>> ]
+"13200" [label = <(UNKNOWN,-&gt;JniAbortF(&quot;NewDirectByteBuffer&quot;,\012 &quot;non-zero capacity for nullptr pointer: %&quot; PRId64, capacity);,-&gt;JniAbortF(&quot;NewDirectByteBuffer&quot;,\012 &quot;non-zero capacity for nullptr pointer: %&quot; PRId64, capacity);)<SUB>2661</SUB>> ]
+"13201" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2663</SUB>> ]
+"13209" [label = <(UNKNOWN,),))<SUB>2668</SUB>> ]
+"13210" [label = <(UNKNOWN,-&gt;JniAbortF(&quot;NewDirectByteBuffer&quot;,\012 &quot;buffer capacity greater than maximum jint: %&quot; PRId64,\012                                       capacity);,-&gt;JniAbortF(&quot;NewDirectByteBuffer&quot;,\012 &quot;buffer capacity greater than maximum jint: %&quot; PRId64,\012                                       capacity);)<SUB>2668</SUB>> ]
+"13211" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2671</SUB>> ]
+"13217" [label = <(UNKNOWN,jlong,jlong)<SUB>2673</SUB>> ]
+"13223" [label = <(UNKNOWN,jint,jint)<SUB>2674</SUB>> ]
+"13229" [label = <(&lt;operator&gt;.indirectFieldAccess,env-&gt;NewObject)<SUB>2676</SUB>> ]
+"13232" [label = <(&lt;operator&gt;.fieldAccess,WellKnownClasses::java_nio_DirectByteBuffer)<SUB>2676</SUB>> ]
+"13235" [label = <(&lt;operator&gt;.fieldAccess,WellKnownClasses::java_nio_DirectByteBuffer_init)<SUB>2677</SUB>> ]
+"13242" [label = <(IsExceptionPending,static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_-&gt;IsExceptionPending())<SUB>2679</SUB>> ]
+"13231" [label = <(FIELD_IDENTIFIER,NewObject,NewObject)<SUB>2676</SUB>> ]
+"13234" [label = <(FIELD_IDENTIFIER,java_nio_DirectByteBuffer,java_nio_DirectByteBuffer)<SUB>2676</SUB>> ]
+"13237" [label = <(FIELD_IDENTIFIER,java_nio_DirectByteBuffer_init,java_nio_DirectByteBuffer_init)<SUB>2677</SUB>> ]
+"13243" [label = <(&lt;operator&gt;.indirectFieldAccess,static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_-&gt;IsExceptionPending)<SUB>2679</SUB>> ]
+"13244" [label = <(&lt;operator&gt;.indirectFieldAccess,static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_)<SUB>2679</SUB>> ]
+"13249" [label = <(FIELD_IDENTIFIER,IsExceptionPending,IsExceptionPending)<SUB>2679</SUB>> ]
+"13245" [label = <(&lt;operator&gt;.cast,static_cast&lt;JNIEnvExt*&gt;(env))<SUB>2679</SUB>> ]
+"13248" [label = <(FIELD_IDENTIFIER,self_,self_)<SUB>2679</SUB>> ]
+"13246" [label = <(UNKNOWN,JNIEnvExt*,JNIEnvExt*)<SUB>2679</SUB>> ]
+"13174" [label = <(METHOD,NewDirectByteBuffer)<SUB>2654</SUB>> ]
+"13252" [label = <(METHOD_RETURN,jobject)<SUB>2654</SUB>> ]
+  "13214" -> "13223" 
+  "13220" -> "13231" 
+  "13226" -> "13246" 
+  "13240" -> "13252" 
+  "13180" -> "13185" 
+  "13180" -> "13191" 
+  "13190" -> "13199" 
+  "13190" -> "13204" 
+  "13204" -> "13209" 
+  "13204" -> "13217" 
+  "13216" -> "13214" 
+  "13222" -> "13220" 
+  "13228" -> "13226" 
+  "13241" -> "13240" 
+  "13185" -> "13186" 
+  "13186" -> "13187" 
+  "13187" -> "13252" 
+  "13191" -> "13190" 
+  "13191" -> "13194" 
+  "13194" -> "13190" 
+  "13199" -> "13200" 
+  "13200" -> "13201" 
+  "13201" -> "13252" 
+  "13209" -> "13210" 
+  "13210" -> "13211" 
+  "13211" -> "13252" 
+  "13217" -> "13216" 
+  "13223" -> "13222" 
+  "13229" -> "13234" 
+  "13232" -> "13237" 
+  "13235" -> "13228" 
+  "13242" -> "13241" 
+  "13231" -> "13229" 
+  "13234" -> "13232" 
+  "13237" -> "13235" 
+  "13243" -> "13242" 
+  "13244" -> "13249" 
+  "13249" -> "13243" 
+  "13245" -> "13248" 
+  "13248" -> "13244" 
+  "13246" -> "13245" 
+  "13174" -> "13180" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/26-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/26-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/26-cfg.dot	2023-06-07 19:35:28.217384348 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/26-cfg.dot	2023-06-07 19:35:34.747383777 +0330
@@ -1,5 +1,5 @@
-digraph "ThrowNoSuchMethodError" {  
-"692" [label = <(METHOD,ThrowNoSuchMethodError)<SUB>465</SUB>> ]
-"699" [label = <(METHOD_RETURN,void)<SUB>465</SUB>> ]
-  "692" -> "699" 
+digraph "FindMethodID" {  
+"546" [label = <(METHOD,FindMethodID)<SUB>430</SUB>> ]
+"553" [label = <(METHOD_RETURN,jmethodID)<SUB>430</SUB>> ]
+  "546" -> "553" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/260-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/260-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/260-cfg.dot	2023-06-07 19:35:28.387384333 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/260-cfg.dot	2023-06-07 19:35:34.907383764 +0330
@@ -1,5 +1,21 @@
-digraph "MonitorEnter" {  
-"13461" [label = <(METHOD,MonitorEnter)<SUB>2745</SUB>> ]
-"13465" [label = <(METHOD_RETURN,jint)<SUB>2745</SUB>> ]
-  "13461" -> "13465" 
+digraph "GetDirectBufferAddress" {  
+"13258" [label = <(RETURN,return reinterpret_cast&lt;void*&gt;(env-&gt;GetLongField(\012        java_buffer, WellKnownClasses::java_nio_DirectByteBuffer_effectiveDirectAddress));,return reinterpret_cast&lt;void*&gt;(env-&gt;GetLongField(\012        java_buffer, WellKnownClasses::java_nio_DirectByteBuffer_effectiveDirectAddress));)<SUB>2683</SUB>> ]
+"13259" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;void*&gt;(env-&gt;GetLongField(\012        java_buffer, WellKnownClasses::java_nio_DirectByteBuffer_effectiveDirectAddress)))<SUB>2683</SUB>> ]
+"13260" [label = <(UNKNOWN,void*,void*)<SUB>2683</SUB>> ]
+"13261" [label = <(GetLongField,env-&gt;GetLongField(\012        java_buffer, WellKnownClasses::java_nio_DirectByteBuffer_effectiveDirectAddress))<SUB>2683</SUB>> ]
+"13262" [label = <(&lt;operator&gt;.indirectFieldAccess,env-&gt;GetLongField)<SUB>2683</SUB>> ]
+"13266" [label = <(&lt;operator&gt;.fieldAccess,WellKnownClasses::java_nio_DirectByteBuffer_effectiveDirectAddress)<SUB>2684</SUB>> ]
+"13264" [label = <(FIELD_IDENTIFIER,GetLongField,GetLongField)<SUB>2683</SUB>> ]
+"13268" [label = <(FIELD_IDENTIFIER,java_nio_DirectByteBuffer_effectiveDirectAddress,java_nio_DirectByteBuffer_effectiveDirectAddress)<SUB>2684</SUB>> ]
+"13254" [label = <(METHOD,GetDirectBufferAddress)<SUB>2682</SUB>> ]
+"13269" [label = <(METHOD_RETURN,void*)<SUB>2682</SUB>> ]
+  "13258" -> "13269" 
+  "13259" -> "13258" 
+  "13260" -> "13264" 
+  "13261" -> "13259" 
+  "13262" -> "13268" 
+  "13266" -> "13261" 
+  "13264" -> "13262" 
+  "13268" -> "13266" 
+  "13254" -> "13260" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/261-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/261-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/261-cfg.dot	2023-06-07 19:35:28.387384333 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/261-cfg.dot	2023-06-07 19:35:34.907383764 +0330
@@ -1,5 +1,21 @@
-digraph "MonitorExit" {  
-"13469" [label = <(METHOD,MonitorExit)<SUB>2759</SUB>> ]
-"13473" [label = <(METHOD_RETURN,jint)<SUB>2759</SUB>> ]
-  "13469" -> "13473" 
+digraph "GetDirectBufferCapacity" {  
+"13275" [label = <(RETURN,return static_cast&lt;jlong&gt;(env-&gt;GetIntField(\012        java_buffer, WellKnownClasses::java_nio_DirectByteBuffer_capacity));,return static_cast&lt;jlong&gt;(env-&gt;GetIntField(\012        java_buffer, WellKnownClasses::java_nio_DirectByteBuffer_capacity));)<SUB>2688</SUB>> ]
+"13276" [label = <(&lt;operator&gt;.cast,static_cast&lt;jlong&gt;(env-&gt;GetIntField(\012        java_buffer, WellKnownClasses::java_nio_DirectByteBuffer_capacity)))<SUB>2688</SUB>> ]
+"13277" [label = <(UNKNOWN,jlong,jlong)<SUB>2688</SUB>> ]
+"13278" [label = <(GetIntField,env-&gt;GetIntField(\012        java_buffer, WellKnownClasses::java_nio_DirectByteBuffer_capacity))<SUB>2688</SUB>> ]
+"13279" [label = <(&lt;operator&gt;.indirectFieldAccess,env-&gt;GetIntField)<SUB>2688</SUB>> ]
+"13283" [label = <(&lt;operator&gt;.fieldAccess,WellKnownClasses::java_nio_DirectByteBuffer_capacity)<SUB>2689</SUB>> ]
+"13281" [label = <(FIELD_IDENTIFIER,GetIntField,GetIntField)<SUB>2688</SUB>> ]
+"13285" [label = <(FIELD_IDENTIFIER,java_nio_DirectByteBuffer_capacity,java_nio_DirectByteBuffer_capacity)<SUB>2689</SUB>> ]
+"13271" [label = <(METHOD,GetDirectBufferCapacity)<SUB>2687</SUB>> ]
+"13286" [label = <(METHOD_RETURN,jlong)<SUB>2687</SUB>> ]
+  "13275" -> "13286" 
+  "13276" -> "13275" 
+  "13277" -> "13281" 
+  "13278" -> "13276" 
+  "13279" -> "13285" 
+  "13283" -> "13278" 
+  "13281" -> "13279" 
+  "13285" -> "13283" 
+  "13271" -> "13277" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/262-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/262-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/262-cfg.dot	2023-06-07 19:35:28.387384333 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/262-cfg.dot	2023-06-07 19:35:34.907383764 +0330
@@ -1,56 +1,5 @@
-digraph "GetJavaVM" {  
-"13481" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(vm, JNI_ERR))<SUB>2775</SUB>> ]
-"13501" [label = <(&lt;operator&gt;.assignment,* runtime = Runtime::Current())<SUB>2776</SUB>> ]
-"13525" [label = <(RETURN,return (*vm != nullptr) ? JNI_OK : JNI_ERR;,return (*vm != nullptr) ? JNI_OK : JNI_ERR;)<SUB>2782</SUB>> ]
-"13503" [label = <(Runtime::Current,Runtime::Current())<SUB>2776</SUB>> ]
-"13508" [label = <(&lt;operator&gt;.notEquals,runtime != nullptr)<SUB>2777</SUB>> ]
-"13526" [label = <(&lt;operator&gt;.conditional,(*vm != nullptr) ? JNI_OK : JNI_ERR)<SUB>2782</SUB>> ]
-"13504" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>2776</SUB>> ]
-"13512" [label = <(&lt;operator&gt;.assignment,*vm = runtime-&gt;GetJavaVM())<SUB>2778</SUB>> ]
-"13527" [label = <(&lt;operator&gt;.notEquals,*vm != nullptr)<SUB>2782</SUB>> ]
-"13486" [label = <(UNLIKELY,UNLIKELY((vm) == nullptr))<SUB>2775</SUB>> ]
-"13506" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>2776</SUB>> ]
-"13513" [label = <(&lt;operator&gt;.indirection,*vm)<SUB>2778</SUB>> ]
-"13515" [label = <(GetJavaVM,runtime-&gt;GetJavaVM())<SUB>2778</SUB>> ]
-"13521" [label = <(&lt;operator&gt;.assignment,*vm = nullptr)<SUB>2780</SUB>> ]
-"13528" [label = <(&lt;operator&gt;.indirection,*vm)<SUB>2782</SUB>> ]
-"13487" [label = <(&lt;operator&gt;.equals,(vm) == nullptr)<SUB>2775</SUB>> ]
-"13491" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN(vm, JNI_ERR),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;vm == null&quot;))<SUB>2775</SUB>> ]
-"13498" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(vm, JNI_ERR),CHECK_NON_NULL_ARGUMENT_RETURN(vm, JNI_ERR))<SUB>2775</SUB>> ]
-"13516" [label = <(&lt;operator&gt;.indirectFieldAccess,runtime-&gt;GetJavaVM)<SUB>2778</SUB>> ]
-"13522" [label = <(&lt;operator&gt;.indirection,*vm)<SUB>2780</SUB>> ]
-"13492" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2775</SUB>> ]
-"13518" [label = <(FIELD_IDENTIFIER,GetJavaVM,GetJavaVM)<SUB>2778</SUB>> ]
-"13493" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2775</SUB>> ]
-"13495" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2775</SUB>> ]
-"13477" [label = <(METHOD,GetJavaVM)<SUB>2774</SUB>> ]
-"13533" [label = <(METHOD_RETURN,jint)<SUB>2774</SUB>> ]
-  "13481" -> "13487" 
-  "13481" -> "13506" 
-  "13501" -> "13508" 
-  "13525" -> "13533" 
-  "13503" -> "13501" 
-  "13508" -> "13513" 
-  "13508" -> "13522" 
-  "13526" -> "13525" 
-  "13504" -> "13503" 
-  "13512" -> "13528" 
-  "13527" -> "13526" 
-  "13486" -> "13493" 
-  "13486" -> "13506" 
-  "13506" -> "13504" 
-  "13513" -> "13518" 
-  "13515" -> "13512" 
-  "13521" -> "13528" 
-  "13528" -> "13527" 
-  "13487" -> "13486" 
-  "13491" -> "13498" 
-  "13498" -> "13533" 
-  "13516" -> "13515" 
-  "13522" -> "13521" 
-  "13492" -> "13491" 
-  "13518" -> "13516" 
-  "13493" -> "13495" 
-  "13495" -> "13492" 
-  "13477" -> "13481" 
+digraph "EnsureLocalCapacityInternal" {  
+"13289" [label = <(METHOD,EnsureLocalCapacityInternal)<SUB>2716</SUB>> ]
+"13294" [label = <(METHOD_RETURN,jint)<SUB>2716</SUB>> ]
+  "13289" -> "13294" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/263-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/263-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/263-cfg.dot	2023-06-07 19:35:28.387384333 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/263-cfg.dot	2023-06-07 19:35:34.907383764 +0330
@@ -1,83 +1,50 @@
-digraph "NewDirectByteBuffer" {  
-"13575" [label = <(&lt;operator&gt;.assignment,address_arg = reinterpret_cast&lt;jlong&gt;(address))<SUB>2804</SUB>> ]
-"13581" [label = <(&lt;operator&gt;.assignment,capacity_arg = static_cast&lt;jint&gt;(capacity))<SUB>2805</SUB>> ]
-"13587" [label = <(&lt;operator&gt;.assignment,result = env-&gt;NewObject(WellKnownClasses::java_nio_DirectByteBuffer,\012 WellKnownClasses::java_nio_DirectByteBuffer_init,\012                                    address_arg, capacity_arg))<SUB>2807</SUB>> ]
-"13601" [label = <(RETURN,return static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_-&gt;IsExceptionPending() ? nullptr : result;,return static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_-&gt;IsExceptionPending() ? nullptr : result;)<SUB>2810</SUB>> ]
-"13541" [label = <(&lt;operator&gt;.lessThan,capacity &lt; 0)<SUB>2786</SUB>> ]
-"13551" [label = <(&lt;operator&gt;.logicalAnd,address == nullptr &amp;&amp; capacity != 0)<SUB>2791</SUB>> ]
-"13565" [label = <(&lt;operator&gt;.greaterThan,capacity &gt; INT_MAX)<SUB>2798</SUB>> ]
-"13577" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jlong&gt;(address))<SUB>2804</SUB>> ]
-"13583" [label = <(&lt;operator&gt;.cast,static_cast&lt;jint&gt;(capacity))<SUB>2805</SUB>> ]
-"13589" [label = <(NewObject,env-&gt;NewObject(WellKnownClasses::java_nio_DirectByteBuffer,\012 WellKnownClasses::java_nio_DirectByteBuffer_init,\012                                    address_arg, capacity_arg))<SUB>2807</SUB>> ]
-"13602" [label = <(&lt;operator&gt;.conditional,static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_-&gt;IsExceptionPending() ? nullptr : result)<SUB>2810</SUB>> ]
-"13546" [label = <(UNKNOWN,),))<SUB>2787</SUB>> ]
-"13547" [label = <(UNKNOWN,-&gt;JniAbortF(&quot;NewDirectByteBuffer&quot;, &quot;negative buffer capacity: %&quot; PRId64,\012                                       capacity);,-&gt;JniAbortF(&quot;NewDirectByteBuffer&quot;, &quot;negative buffer capacity: %&quot; PRId64,\012                                       capacity);)<SUB>2787</SUB>> ]
-"13548" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2789</SUB>> ]
-"13552" [label = <(&lt;operator&gt;.equals,address == nullptr)<SUB>2791</SUB>> ]
-"13555" [label = <(&lt;operator&gt;.notEquals,capacity != 0)<SUB>2791</SUB>> ]
-"13560" [label = <(UNKNOWN,),))<SUB>2792</SUB>> ]
-"13561" [label = <(UNKNOWN,-&gt;JniAbortF(&quot;NewDirectByteBuffer&quot;,\012 &quot;non-zero capacity for nullptr pointer: %&quot; PRId64, capacity);,-&gt;JniAbortF(&quot;NewDirectByteBuffer&quot;,\012 &quot;non-zero capacity for nullptr pointer: %&quot; PRId64, capacity);)<SUB>2792</SUB>> ]
-"13562" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2794</SUB>> ]
-"13570" [label = <(UNKNOWN,),))<SUB>2799</SUB>> ]
-"13571" [label = <(UNKNOWN,-&gt;JniAbortF(&quot;NewDirectByteBuffer&quot;,\012 &quot;buffer capacity greater than maximum jint: %&quot; PRId64,\012                                       capacity);,-&gt;JniAbortF(&quot;NewDirectByteBuffer&quot;,\012 &quot;buffer capacity greater than maximum jint: %&quot; PRId64,\012                                       capacity);)<SUB>2799</SUB>> ]
-"13572" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2802</SUB>> ]
-"13578" [label = <(UNKNOWN,jlong,jlong)<SUB>2804</SUB>> ]
-"13584" [label = <(UNKNOWN,jint,jint)<SUB>2805</SUB>> ]
-"13590" [label = <(&lt;operator&gt;.indirectFieldAccess,env-&gt;NewObject)<SUB>2807</SUB>> ]
-"13593" [label = <(&lt;operator&gt;.fieldAccess,WellKnownClasses::java_nio_DirectByteBuffer)<SUB>2807</SUB>> ]
-"13596" [label = <(&lt;operator&gt;.fieldAccess,WellKnownClasses::java_nio_DirectByteBuffer_init)<SUB>2808</SUB>> ]
-"13603" [label = <(IsExceptionPending,static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_-&gt;IsExceptionPending())<SUB>2810</SUB>> ]
-"13592" [label = <(FIELD_IDENTIFIER,NewObject,NewObject)<SUB>2807</SUB>> ]
-"13595" [label = <(FIELD_IDENTIFIER,java_nio_DirectByteBuffer,java_nio_DirectByteBuffer)<SUB>2807</SUB>> ]
-"13598" [label = <(FIELD_IDENTIFIER,java_nio_DirectByteBuffer_init,java_nio_DirectByteBuffer_init)<SUB>2808</SUB>> ]
-"13604" [label = <(&lt;operator&gt;.indirectFieldAccess,static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_-&gt;IsExceptionPending)<SUB>2810</SUB>> ]
-"13605" [label = <(&lt;operator&gt;.indirectFieldAccess,static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_)<SUB>2810</SUB>> ]
-"13610" [label = <(FIELD_IDENTIFIER,IsExceptionPending,IsExceptionPending)<SUB>2810</SUB>> ]
-"13606" [label = <(&lt;operator&gt;.cast,static_cast&lt;JNIEnvExt*&gt;(env))<SUB>2810</SUB>> ]
-"13609" [label = <(FIELD_IDENTIFIER,self_,self_)<SUB>2810</SUB>> ]
-"13607" [label = <(UNKNOWN,JNIEnvExt*,JNIEnvExt*)<SUB>2810</SUB>> ]
-"13535" [label = <(METHOD,NewDirectByteBuffer)<SUB>2785</SUB>> ]
-"13613" [label = <(METHOD_RETURN,jobject)<SUB>2785</SUB>> ]
-  "13575" -> "13584" 
-  "13581" -> "13592" 
-  "13587" -> "13607" 
-  "13601" -> "13613" 
-  "13541" -> "13546" 
-  "13541" -> "13552" 
-  "13551" -> "13560" 
-  "13551" -> "13565" 
-  "13565" -> "13570" 
-  "13565" -> "13578" 
-  "13577" -> "13575" 
-  "13583" -> "13581" 
-  "13589" -> "13587" 
-  "13602" -> "13601" 
-  "13546" -> "13547" 
-  "13547" -> "13548" 
-  "13548" -> "13613" 
-  "13552" -> "13551" 
-  "13552" -> "13555" 
-  "13555" -> "13551" 
-  "13560" -> "13561" 
-  "13561" -> "13562" 
-  "13562" -> "13613" 
-  "13570" -> "13571" 
-  "13571" -> "13572" 
-  "13572" -> "13613" 
-  "13578" -> "13577" 
-  "13584" -> "13583" 
-  "13590" -> "13595" 
-  "13593" -> "13598" 
-  "13596" -> "13589" 
-  "13603" -> "13602" 
-  "13592" -> "13590" 
-  "13595" -> "13593" 
-  "13598" -> "13596" 
-  "13604" -> "13603" 
-  "13605" -> "13610" 
-  "13610" -> "13604" 
-  "13606" -> "13609" 
-  "13609" -> "13605" 
-  "13607" -> "13606" 
-  "13535" -> "13541" 
+digraph "NewPrimitiveArray" {  
+"13307" [label = <(soa,soa(env))<SUB>2735</SUB>> ]
+"13328" [label = <(&lt;operator&gt;.assignment,result = ArtT::Alloc(soa.Self(), length))<SUB>2740</SUB>> ]
+"13339" [label = <(RETURN,return soa.AddLocalReference&lt;JniT&gt;(result);,return soa.AddLocalReference&lt;JniT&gt;(result);)<SUB>2741</SUB>> ]
+"13310" [label = <(UNLIKELY,UNLIKELY(length &lt; 0))<SUB>2736</SUB>> ]
+"13330" [label = <(ArtT::Alloc,ArtT::Alloc(soa.Self(), length))<SUB>2740</SUB>> ]
+"13340" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;JniT&gt;(result))<SUB>2741</SUB>> ]
+"13311" [label = <(&lt;operator&gt;.lessThan,length &lt; 0)<SUB>2736</SUB>> ]
+"13315" [label = <(JniAbortF,soa.Vm()-&gt;JniAbortF(&quot;NewPrimitiveArray&quot;, &quot;negative array length: %d&quot;, length))<SUB>2737</SUB>> ]
+"13325" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2738</SUB>> ]
+"13331" [label = <(&lt;operator&gt;.fieldAccess,ArtT::Alloc)<SUB>2740</SUB>> ]
+"13334" [label = <(Self,soa.Self())<SUB>2740</SUB>> ]
+"13341" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;JniT)<SUB>2741</SUB>> ]
+"13316" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Vm()-&gt;JniAbortF)<SUB>2737</SUB>> ]
+"13333" [label = <(FIELD_IDENTIFIER,Alloc,Alloc)<SUB>2740</SUB>> ]
+"13335" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>2740</SUB>> ]
+"13342" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>2741</SUB>> ]
+"13317" [label = <(Vm,soa.Vm())<SUB>2737</SUB>> ]
+"13321" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2737</SUB>> ]
+"13337" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>2740</SUB>> ]
+"13344" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>2741</SUB>> ]
+"13318" [label = <(&lt;operator&gt;.fieldAccess,soa.Vm)<SUB>2737</SUB>> ]
+"13320" [label = <(FIELD_IDENTIFIER,Vm,Vm)<SUB>2737</SUB>> ]
+"13302" [label = <(METHOD,NewPrimitiveArray)<SUB>2734</SUB>> ]
+"13347" [label = <(METHOD_RETURN,JniT)<SUB>2734</SUB>> ]
+  "13307" -> "13311" 
+  "13328" -> "13344" 
+  "13339" -> "13347" 
+  "13310" -> "13320" 
+  "13310" -> "13333" 
+  "13330" -> "13328" 
+  "13340" -> "13339" 
+  "13311" -> "13310" 
+  "13315" -> "13325" 
+  "13325" -> "13347" 
+  "13331" -> "13337" 
+  "13334" -> "13330" 
+  "13341" -> "13340" 
+  "13316" -> "13315" 
+  "13333" -> "13331" 
+  "13335" -> "13334" 
+  "13342" -> "13341" 
+  "13317" -> "13321" 
+  "13321" -> "13316" 
+  "13337" -> "13335" 
+  "13344" -> "13342" 
+  "13318" -> "13317" 
+  "13320" -> "13318" 
+  "13302" -> "13307" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/264-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/264-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/264-cfg.dot	2023-06-07 19:35:28.387384333 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/264-cfg.dot	2023-06-07 19:35:34.907383764 +0330
@@ -1,21 +1,5 @@
-digraph "GetDirectBufferAddress" {  
-"13619" [label = <(RETURN,return reinterpret_cast&lt;void*&gt;(env-&gt;GetLongField(\012        java_buffer, WellKnownClasses::java_nio_DirectByteBuffer_effectiveDirectAddress));,return reinterpret_cast&lt;void*&gt;(env-&gt;GetLongField(\012        java_buffer, WellKnownClasses::java_nio_DirectByteBuffer_effectiveDirectAddress));)<SUB>2814</SUB>> ]
-"13620" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;void*&gt;(env-&gt;GetLongField(\012        java_buffer, WellKnownClasses::java_nio_DirectByteBuffer_effectiveDirectAddress)))<SUB>2814</SUB>> ]
-"13621" [label = <(UNKNOWN,void*,void*)<SUB>2814</SUB>> ]
-"13622" [label = <(GetLongField,env-&gt;GetLongField(\012        java_buffer, WellKnownClasses::java_nio_DirectByteBuffer_effectiveDirectAddress))<SUB>2814</SUB>> ]
-"13623" [label = <(&lt;operator&gt;.indirectFieldAccess,env-&gt;GetLongField)<SUB>2814</SUB>> ]
-"13627" [label = <(&lt;operator&gt;.fieldAccess,WellKnownClasses::java_nio_DirectByteBuffer_effectiveDirectAddress)<SUB>2815</SUB>> ]
-"13625" [label = <(FIELD_IDENTIFIER,GetLongField,GetLongField)<SUB>2814</SUB>> ]
-"13629" [label = <(FIELD_IDENTIFIER,java_nio_DirectByteBuffer_effectiveDirectAddress,java_nio_DirectByteBuffer_effectiveDirectAddress)<SUB>2815</SUB>> ]
-"13615" [label = <(METHOD,GetDirectBufferAddress)<SUB>2813</SUB>> ]
-"13630" [label = <(METHOD_RETURN,void*)<SUB>2813</SUB>> ]
-  "13619" -> "13630" 
-  "13620" -> "13619" 
-  "13621" -> "13625" 
-  "13622" -> "13620" 
-  "13623" -> "13629" 
-  "13627" -> "13622" 
-  "13625" -> "13623" 
-  "13629" -> "13627" 
-  "13615" -> "13621" 
+digraph "DecodeAndCheckArrayType" {  
+"13349" [label = <(METHOD,DecodeAndCheckArrayType)<SUB>2745</SUB>> ]
+"13355" [label = <(METHOD_RETURN,ObjPtr&lt;ArtArrayT&gt;)<SUB>2745</SUB>> ]
+  "13349" -> "13355" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/265-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/265-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/265-cfg.dot	2023-06-07 19:35:28.387384333 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/265-cfg.dot	2023-06-07 19:35:34.907383764 +0330
@@ -1,21 +1,113 @@
-digraph "GetDirectBufferCapacity" {  
-"13636" [label = <(RETURN,return static_cast&lt;jlong&gt;(env-&gt;GetIntField(\012        java_buffer, WellKnownClasses::java_nio_DirectByteBuffer_capacity));,return static_cast&lt;jlong&gt;(env-&gt;GetIntField(\012        java_buffer, WellKnownClasses::java_nio_DirectByteBuffer_capacity));)<SUB>2819</SUB>> ]
-"13637" [label = <(&lt;operator&gt;.cast,static_cast&lt;jlong&gt;(env-&gt;GetIntField(\012        java_buffer, WellKnownClasses::java_nio_DirectByteBuffer_capacity)))<SUB>2819</SUB>> ]
-"13638" [label = <(UNKNOWN,jlong,jlong)<SUB>2819</SUB>> ]
-"13639" [label = <(GetIntField,env-&gt;GetIntField(\012        java_buffer, WellKnownClasses::java_nio_DirectByteBuffer_capacity))<SUB>2819</SUB>> ]
-"13640" [label = <(&lt;operator&gt;.indirectFieldAccess,env-&gt;GetIntField)<SUB>2819</SUB>> ]
-"13644" [label = <(&lt;operator&gt;.fieldAccess,WellKnownClasses::java_nio_DirectByteBuffer_capacity)<SUB>2820</SUB>> ]
-"13642" [label = <(FIELD_IDENTIFIER,GetIntField,GetIntField)<SUB>2819</SUB>> ]
-"13646" [label = <(FIELD_IDENTIFIER,java_nio_DirectByteBuffer_capacity,java_nio_DirectByteBuffer_capacity)<SUB>2820</SUB>> ]
-"13632" [label = <(METHOD,GetDirectBufferCapacity)<SUB>2818</SUB>> ]
-"13647" [label = <(METHOD_RETURN,jlong)<SUB>2818</SUB>> ]
-  "13636" -> "13647" 
-  "13637" -> "13636" 
-  "13638" -> "13642" 
-  "13639" -> "13637" 
-  "13640" -> "13646" 
-  "13644" -> "13639" 
-  "13642" -> "13640" 
-  "13646" -> "13644" 
-  "13632" -> "13638" 
+digraph "GetPrimitiveArray" {  
+"13372" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_array))<SUB>2767</SUB>> ]
+"13391" [label = <(soa,soa(env))<SUB>2768</SUB>> ]
+"13394" [label = <(&lt;operator&gt;.assignment,array = DecodeAndCheckArrayType&lt;ArrayT, ElementT, ArtArrayT&gt;(\012        soa, java_array, &quot;GetArrayElements&quot;, &quot;get&quot;))<SUB>2769</SUB>> ]
+"13396" [label = <(DecodeAndCheckArrayType&lt;ArrayT,ElementT,ArtArrayT&gt;,DecodeAndCheckArrayType&lt;ArrayT, ElementT, ArtArrayT&gt;(\012        soa, java_array, &quot;GetArrayElements&quot;, &quot;get&quot;))<SUB>2769</SUB>> ]
+"13402" [label = <(UNLIKELY,UNLIKELY(array == nullptr))<SUB>2771</SUB>> ]
+"13410" [label = <(IsMovableObject,Runtime::Current()-&gt;GetHeap()-&gt;IsMovableObject(array))<SUB>2775</SUB>> ]
+"13403" [label = <(&lt;operator&gt;.equals,array == nullptr)<SUB>2771</SUB>> ]
+"13407" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2772</SUB>> ]
+"13411" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetHeap()-&gt;IsMovableObject)<SUB>2775</SUB>> ]
+"13432" [label = <(&lt;operator&gt;.assignment,component_size = sizeof(ElementT))<SUB>2779</SUB>> ]
+"13437" [label = <(&lt;operator&gt;.assignment,size = array-&gt;GetLength() * component_size)<SUB>2780</SUB>> ]
+"13446" [label = <(&lt;operator&gt;.assignment,* data = new uint64_t[RoundUp(size, 8) / 8])<SUB>2781</SUB>> ]
+"13450" [label = <(memcpy,memcpy(data, array-&gt;GetData(), size))<SUB>2782</SUB>> ]
+"13457" [label = <(RETURN,return reinterpret_cast&lt;ElementT*&gt;(data);,return reinterpret_cast&lt;ElementT*&gt;(data);)<SUB>2783</SUB>> ]
+"13376" [label = <(UNLIKELY,UNLIKELY((java_array) == nullptr))<SUB>2767</SUB>> ]
+"13412" [label = <(GetHeap,Runtime::Current()-&gt;GetHeap())<SUB>2775</SUB>> ]
+"13419" [label = <(FIELD_IDENTIFIER,IsMovableObject,IsMovableObject)<SUB>2775</SUB>> ]
+"13423" [label = <(&lt;operator&gt;.notEquals,is_copy != nullptr)<SUB>2776</SUB>> ]
+"13434" [label = <(&lt;operator&gt;.sizeOf,sizeof(ElementT))<SUB>2779</SUB>> ]
+"13439" [label = <(&lt;operator&gt;.multiplication,array-&gt;GetLength() * component_size)<SUB>2780</SUB>> ]
+"13448" [label = <(&lt;operator&gt;.new,new uint64_t[RoundUp(size, 8) / 8])<SUB>2781</SUB>> ]
+"13452" [label = <(GetData,array-&gt;GetData())<SUB>2782</SUB>> ]
+"13458" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;ElementT*&gt;(data))<SUB>2783</SUB>> ]
+"13472" [label = <(RETURN,return reinterpret_cast&lt;ElementT*&gt;(array-&gt;GetData());,return reinterpret_cast&lt;ElementT*&gt;(array-&gt;GetData());)<SUB>2788</SUB>> ]
+"13377" [label = <(&lt;operator&gt;.equals,(java_array) == nullptr)<SUB>2767</SUB>> ]
+"13381" [label = <(CHECK_NON_NULL_ARGUMENT(java_array),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_array == null&quot;))<SUB>2767</SUB>> ]
+"13388" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_array),CHECK_NON_NULL_ARGUMENT(java_array))<SUB>2767</SUB>> ]
+"13413" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetHeap)<SUB>2775</SUB>> ]
+"13427" [label = <(&lt;operator&gt;.assignment,*is_copy = JNI_TRUE)<SUB>2777</SUB>> ]
+"13440" [label = <(GetLength,array-&gt;GetLength())<SUB>2780</SUB>> ]
+"13453" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetData)<SUB>2782</SUB>> ]
+"13459" [label = <(UNKNOWN,ElementT*,ElementT*)<SUB>2783</SUB>> ]
+"13464" [label = <(&lt;operator&gt;.notEquals,is_copy != nullptr)<SUB>2785</SUB>> ]
+"13473" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;ElementT*&gt;(array-&gt;GetData()))<SUB>2788</SUB>> ]
+"13382" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2767</SUB>> ]
+"13414" [label = <(Runtime::Current,Runtime::Current())<SUB>2775</SUB>> ]
+"13418" [label = <(FIELD_IDENTIFIER,GetHeap,GetHeap)<SUB>2775</SUB>> ]
+"13428" [label = <(&lt;operator&gt;.indirection,*is_copy)<SUB>2777</SUB>> ]
+"13441" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetLength)<SUB>2780</SUB>> ]
+"13455" [label = <(FIELD_IDENTIFIER,GetData,GetData)<SUB>2782</SUB>> ]
+"13468" [label = <(&lt;operator&gt;.assignment,*is_copy = JNI_FALSE)<SUB>2786</SUB>> ]
+"13474" [label = <(UNKNOWN,ElementT*,ElementT*)<SUB>2788</SUB>> ]
+"13475" [label = <(GetData,array-&gt;GetData())<SUB>2788</SUB>> ]
+"13383" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2767</SUB>> ]
+"13385" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2767</SUB>> ]
+"13415" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>2775</SUB>> ]
+"13443" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>2780</SUB>> ]
+"13469" [label = <(&lt;operator&gt;.indirection,*is_copy)<SUB>2786</SUB>> ]
+"13476" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetData)<SUB>2788</SUB>> ]
+"13417" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>2775</SUB>> ]
+"13478" [label = <(FIELD_IDENTIFIER,GetData,GetData)<SUB>2788</SUB>> ]
+"13367" [label = <(METHOD,GetPrimitiveArray)<SUB>2766</SUB>> ]
+"13479" [label = <(METHOD_RETURN,ElementT)<SUB>2766</SUB>> ]
+  "13372" -> "13377" 
+  "13372" -> "13391" 
+  "13391" -> "13396" 
+  "13394" -> "13403" 
+  "13396" -> "13394" 
+  "13402" -> "13407" 
+  "13402" -> "13417" 
+  "13410" -> "13423" 
+  "13410" -> "13464" 
+  "13403" -> "13402" 
+  "13407" -> "13479" 
+  "13411" -> "13410" 
+  "13432" -> "13443" 
+  "13437" -> "13448" 
+  "13446" -> "13455" 
+  "13450" -> "13459" 
+  "13457" -> "13479" 
+  "13376" -> "13383" 
+  "13376" -> "13391" 
+  "13412" -> "13419" 
+  "13419" -> "13411" 
+  "13423" -> "13428" 
+  "13423" -> "13434" 
+  "13434" -> "13432" 
+  "13439" -> "13437" 
+  "13448" -> "13446" 
+  "13452" -> "13450" 
+  "13458" -> "13457" 
+  "13472" -> "13479" 
+  "13377" -> "13376" 
+  "13381" -> "13388" 
+  "13388" -> "13479" 
+  "13413" -> "13412" 
+  "13427" -> "13434" 
+  "13440" -> "13439" 
+  "13453" -> "13452" 
+  "13459" -> "13458" 
+  "13464" -> "13474" 
+  "13464" -> "13469" 
+  "13473" -> "13472" 
+  "13382" -> "13381" 
+  "13414" -> "13418" 
+  "13418" -> "13413" 
+  "13428" -> "13427" 
+  "13441" -> "13440" 
+  "13455" -> "13453" 
+  "13468" -> "13474" 
+  "13474" -> "13478" 
+  "13475" -> "13473" 
+  "13383" -> "13385" 
+  "13385" -> "13382" 
+  "13415" -> "13414" 
+  "13443" -> "13441" 
+  "13469" -> "13468" 
+  "13476" -> "13475" 
+  "13417" -> "13415" 
+  "13478" -> "13476" 
+  "13367" -> "13372" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/266-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/266-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/266-cfg.dot	2023-06-07 19:35:28.387384333 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/266-cfg.dot	2023-06-07 19:35:34.907383764 +0330
@@ -1,5 +1,38 @@
-digraph "EnsureLocalCapacityInternal" {  
-"13650" [label = <(METHOD,EnsureLocalCapacityInternal)<SUB>2847</SUB>> ]
-"13655" [label = <(METHOD_RETURN,jint)<SUB>2847</SUB>> ]
-  "13650" -> "13655" 
+digraph "ReleasePrimitiveArray" {  
+"13487" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>2794</SUB>> ]
+"13505" [label = <(soa,soa(env))<SUB>2795</SUB>> ]
+"13508" [label = <(&lt;operator&gt;.assignment,array = DecodeAndCheckArrayType&lt;ArrayT, ElementT, ArtArrayT&gt;(\012        soa, java_array, &quot;ReleaseArrayElements&quot;, &quot;release&quot;))<SUB>2796</SUB>> ]
+"13521" [label = <(ReleasePrimitiveArray,ReleasePrimitiveArray(soa, array, sizeof(ElementT), elements, mode))<SUB>2801</SUB>> ]
+"13510" [label = <(DecodeAndCheckArrayType&lt;ArrayT,ElementT,ArtArrayT&gt;,DecodeAndCheckArrayType&lt;ArrayT, ElementT, ArtArrayT&gt;(\012        soa, java_array, &quot;ReleaseArrayElements&quot;, &quot;release&quot;))<SUB>2796</SUB>> ]
+"13516" [label = <(&lt;operator&gt;.equals,array == nullptr)<SUB>2798</SUB>> ]
+"13524" [label = <(&lt;operator&gt;.sizeOf,sizeof(ElementT))<SUB>2801</SUB>> ]
+"13520" [label = <(RETURN,return;,return;)<SUB>2799</SUB>> ]
+"13491" [label = <(UNLIKELY,UNLIKELY((java_array) == nullptr))<SUB>2794</SUB>> ]
+"13492" [label = <(&lt;operator&gt;.equals,(java_array) == nullptr)<SUB>2794</SUB>> ]
+"13496" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_array == null&quot;))<SUB>2794</SUB>> ]
+"13503" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>2794</SUB>> ]
+"13497" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2794</SUB>> ]
+"13498" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2794</SUB>> ]
+"13500" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2794</SUB>> ]
+"13481" [label = <(METHOD,ReleasePrimitiveArray)<SUB>2793</SUB>> ]
+"13528" [label = <(METHOD_RETURN,void)<SUB>2793</SUB>> ]
+  "13487" -> "13492" 
+  "13487" -> "13505" 
+  "13505" -> "13510" 
+  "13508" -> "13516" 
+  "13521" -> "13528" 
+  "13510" -> "13508" 
+  "13516" -> "13520" 
+  "13516" -> "13524" 
+  "13524" -> "13521" 
+  "13520" -> "13528" 
+  "13491" -> "13498" 
+  "13491" -> "13505" 
+  "13492" -> "13491" 
+  "13496" -> "13503" 
+  "13503" -> "13528" 
+  "13497" -> "13496" 
+  "13498" -> "13500" 
+  "13500" -> "13497" 
+  "13481" -> "13487" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/267-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/267-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/267-cfg.dot	2023-06-07 19:35:28.387384333 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/267-cfg.dot	2023-06-07 19:35:34.907383764 +0330
@@ -1,50 +1,5 @@
-digraph "NewPrimitiveArray" {  
-"13668" [label = <(soa,soa(env))<SUB>2866</SUB>> ]
-"13689" [label = <(&lt;operator&gt;.assignment,result = ArtT::Alloc(soa.Self(), length))<SUB>2871</SUB>> ]
-"13700" [label = <(RETURN,return soa.AddLocalReference&lt;JniT&gt;(result);,return soa.AddLocalReference&lt;JniT&gt;(result);)<SUB>2872</SUB>> ]
-"13671" [label = <(UNLIKELY,UNLIKELY(length &lt; 0))<SUB>2867</SUB>> ]
-"13691" [label = <(ArtT::Alloc,ArtT::Alloc(soa.Self(), length))<SUB>2871</SUB>> ]
-"13701" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;JniT&gt;(result))<SUB>2872</SUB>> ]
-"13672" [label = <(&lt;operator&gt;.lessThan,length &lt; 0)<SUB>2867</SUB>> ]
-"13676" [label = <(JniAbortF,soa.Vm()-&gt;JniAbortF(&quot;NewPrimitiveArray&quot;, &quot;negative array length: %d&quot;, length))<SUB>2868</SUB>> ]
-"13686" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2869</SUB>> ]
-"13692" [label = <(&lt;operator&gt;.fieldAccess,ArtT::Alloc)<SUB>2871</SUB>> ]
-"13695" [label = <(Self,soa.Self())<SUB>2871</SUB>> ]
-"13702" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;JniT)<SUB>2872</SUB>> ]
-"13677" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Vm()-&gt;JniAbortF)<SUB>2868</SUB>> ]
-"13694" [label = <(FIELD_IDENTIFIER,Alloc,Alloc)<SUB>2871</SUB>> ]
-"13696" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>2871</SUB>> ]
-"13703" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>2872</SUB>> ]
-"13678" [label = <(Vm,soa.Vm())<SUB>2868</SUB>> ]
-"13682" [label = <(FIELD_IDENTIFIER,JniAbortF,JniAbortF)<SUB>2868</SUB>> ]
-"13698" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>2871</SUB>> ]
-"13705" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>2872</SUB>> ]
-"13679" [label = <(&lt;operator&gt;.fieldAccess,soa.Vm)<SUB>2868</SUB>> ]
-"13681" [label = <(FIELD_IDENTIFIER,Vm,Vm)<SUB>2868</SUB>> ]
-"13663" [label = <(METHOD,NewPrimitiveArray)<SUB>2865</SUB>> ]
-"13708" [label = <(METHOD_RETURN,JniT)<SUB>2865</SUB>> ]
-  "13668" -> "13672" 
-  "13689" -> "13705" 
-  "13700" -> "13708" 
-  "13671" -> "13681" 
-  "13671" -> "13694" 
-  "13691" -> "13689" 
-  "13701" -> "13700" 
-  "13672" -> "13671" 
-  "13676" -> "13686" 
-  "13686" -> "13708" 
-  "13692" -> "13698" 
-  "13695" -> "13691" 
-  "13702" -> "13701" 
-  "13677" -> "13676" 
-  "13694" -> "13692" 
-  "13696" -> "13695" 
-  "13703" -> "13702" 
-  "13678" -> "13682" 
-  "13682" -> "13677" 
-  "13698" -> "13696" 
-  "13705" -> "13703" 
-  "13679" -> "13678" 
-  "13681" -> "13679" 
-  "13663" -> "13668" 
+digraph "ReleasePrimitiveArray" {  
+"13530" [label = <(METHOD,ReleasePrimitiveArray)<SUB>2804</SUB>> ]
+"13537" [label = <(METHOD_RETURN,void)<SUB>2804</SUB>> ]
+  "13530" -> "13537" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/268-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/268-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/268-cfg.dot	2023-06-07 19:35:28.387384333 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/268-cfg.dot	2023-06-07 19:35:34.907383764 +0330
@@ -1,5 +1,94 @@
-digraph "DecodeAndCheckArrayType" {  
-"13710" [label = <(METHOD,DecodeAndCheckArrayType)<SUB>2876</SUB>> ]
-"13716" [label = <(METHOD_RETURN,ObjPtr&lt;ArtArrayT&gt;)<SUB>2876</SUB>> ]
-  "13710" -> "13716" 
+digraph "GetPrimitiveArrayRegion" {  
+"13576" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>2849</SUB>> ]
+"13594" [label = <(soa,soa(env))<SUB>2850</SUB>> ]
+"13597" [label = <(&lt;operator&gt;.assignment,array = DecodeAndCheckArrayType&lt;JArrayT, ElementT, ArtArrayT&gt;(\012        soa, java_array, &quot;GetPrimitiveArrayRegion&quot;, &quot;get region of&quot;))<SUB>2851</SUB>> ]
+"13599" [label = <(DecodeAndCheckArrayType&lt;JArrayT,ElementT,ArtArrayT&gt;,DecodeAndCheckArrayType&lt;JArrayT, ElementT, ArtArrayT&gt;(\012        soa, java_array, &quot;GetPrimitiveArrayRegion&quot;, &quot;get region of&quot;))<SUB>2851</SUB>> ]
+"13605" [label = <(&lt;operator&gt;.notEquals,array != nullptr)<SUB>2853</SUB>> ]
+"13580" [label = <(UNLIKELY,UNLIKELY((java_array) == nullptr))<SUB>2849</SUB>> ]
+"13610" [label = <(&lt;operator&gt;.logicalOr,start &lt; 0 || length &lt; 0 || length &gt; array-&gt;GetLength() - start)<SUB>2854</SUB>> ]
+"13581" [label = <(&lt;operator&gt;.equals,(java_array) == nullptr)<SUB>2849</SUB>> ]
+"13585" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_array == null&quot;))<SUB>2849</SUB>> ]
+"13592" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>2849</SUB>> ]
+"13611" [label = <(&lt;operator&gt;.logicalOr,start &lt; 0 || length &lt; 0)<SUB>2854</SUB>> ]
+"13618" [label = <(&lt;operator&gt;.greaterThan,length &gt; array-&gt;GetLength() - start)<SUB>2854</SUB>> ]
+"13627" [label = <(ThrowAIOOBE,ThrowAIOOBE(soa, array, start, length, &quot;src&quot;))<SUB>2855</SUB>> ]
+"13586" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2849</SUB>> ]
+"13612" [label = <(&lt;operator&gt;.lessThan,start &lt; 0)<SUB>2854</SUB>> ]
+"13615" [label = <(&lt;operator&gt;.lessThan,length &lt; 0)<SUB>2854</SUB>> ]
+"13620" [label = <(&lt;operator&gt;.subtraction,array-&gt;GetLength() - start)<SUB>2854</SUB>> ]
+"13635" [label = <(CHECK_NON_NULL_MEMCPY_ARGUMENT,CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf))<SUB>2857</SUB>> ]
+"13658" [label = <(&lt;operator&gt;.assignment,* data = array-&gt;GetData())<SUB>2858</SUB>> ]
+"13664" [label = <(memcpy,memcpy(buf, data + start, length * sizeof(ElementT)))<SUB>2859</SUB>> ]
+"13587" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2849</SUB>> ]
+"13589" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2849</SUB>> ]
+"13621" [label = <(GetLength,array-&gt;GetLength())<SUB>2854</SUB>> ]
+"13660" [label = <(GetData,array-&gt;GetData())<SUB>2858</SUB>> ]
+"13666" [label = <(&lt;operator&gt;.addition,data + start)<SUB>2859</SUB>> ]
+"13669" [label = <(&lt;operator&gt;.multiplication,length * sizeof(ElementT))<SUB>2859</SUB>> ]
+"13622" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetLength)<SUB>2854</SUB>> ]
+"13661" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetData)<SUB>2858</SUB>> ]
+"13671" [label = <(&lt;operator&gt;.sizeOf,sizeof(ElementT))<SUB>2859</SUB>> ]
+"13624" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>2854</SUB>> ]
+"13640" [label = <(UNLIKELY,UNLIKELY((length) != 0 &amp;&amp; (buf) == nullptr))<SUB>2857</SUB>> ]
+"13663" [label = <(FIELD_IDENTIFIER,GetData,GetData)<SUB>2858</SUB>> ]
+"13641" [label = <(&lt;operator&gt;.logicalAnd,(length) != 0 &amp;&amp; (buf) == nullptr)<SUB>2857</SUB>> ]
+"13649" [label = <(CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;buf == null&quot;))<SUB>2857</SUB>> ]
+"13656" [label = <(RETURN,CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf),CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf))<SUB>2857</SUB>> ]
+"13642" [label = <(&lt;operator&gt;.notEquals,(length) != 0)<SUB>2857</SUB>> ]
+"13645" [label = <(&lt;operator&gt;.equals,(buf) == nullptr)<SUB>2857</SUB>> ]
+"13650" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2857</SUB>> ]
+"13651" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2857</SUB>> ]
+"13653" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2857</SUB>> ]
+"13569" [label = <(METHOD,GetPrimitiveArrayRegion)<SUB>2847</SUB>> ]
+"13673" [label = <(METHOD_RETURN,void)<SUB>2847</SUB>> ]
+  "13576" -> "13581" 
+  "13576" -> "13594" 
+  "13594" -> "13599" 
+  "13597" -> "13605" 
+  "13599" -> "13597" 
+  "13605" -> "13673" 
+  "13605" -> "13612" 
+  "13580" -> "13587" 
+  "13580" -> "13594" 
+  "13610" -> "13627" 
+  "13610" -> "13635" 
+  "13581" -> "13580" 
+  "13585" -> "13592" 
+  "13592" -> "13673" 
+  "13611" -> "13610" 
+  "13611" -> "13624" 
+  "13618" -> "13610" 
+  "13627" -> "13673" 
+  "13586" -> "13585" 
+  "13612" -> "13611" 
+  "13612" -> "13615" 
+  "13615" -> "13611" 
+  "13620" -> "13618" 
+  "13635" -> "13642" 
+  "13635" -> "13663" 
+  "13658" -> "13666" 
+  "13664" -> "13673" 
+  "13587" -> "13589" 
+  "13589" -> "13586" 
+  "13621" -> "13620" 
+  "13660" -> "13658" 
+  "13666" -> "13671" 
+  "13669" -> "13664" 
+  "13622" -> "13621" 
+  "13661" -> "13660" 
+  "13671" -> "13669" 
+  "13624" -> "13622" 
+  "13640" -> "13651" 
+  "13640" -> "13663" 
+  "13663" -> "13661" 
+  "13641" -> "13640" 
+  "13649" -> "13656" 
+  "13656" -> "13673" 
+  "13642" -> "13641" 
+  "13642" -> "13645" 
+  "13645" -> "13641" 
+  "13650" -> "13649" 
+  "13651" -> "13653" 
+  "13653" -> "13650" 
+  "13569" -> "13576" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/269-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/269-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/269-cfg.dot	2023-06-07 19:35:28.387384333 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/269-cfg.dot	2023-06-07 19:35:34.907383764 +0330
@@ -1,113 +1,94 @@
-digraph "GetPrimitiveArray" {  
-"13733" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_array))<SUB>2898</SUB>> ]
-"13752" [label = <(soa,soa(env))<SUB>2899</SUB>> ]
-"13755" [label = <(&lt;operator&gt;.assignment,array = DecodeAndCheckArrayType&lt;ArrayT, ElementT, ArtArrayT&gt;(\012        soa, java_array, &quot;GetArrayElements&quot;, &quot;get&quot;))<SUB>2900</SUB>> ]
-"13757" [label = <(DecodeAndCheckArrayType&lt;ArrayT,ElementT,ArtArrayT&gt;,DecodeAndCheckArrayType&lt;ArrayT, ElementT, ArtArrayT&gt;(\012        soa, java_array, &quot;GetArrayElements&quot;, &quot;get&quot;))<SUB>2900</SUB>> ]
-"13763" [label = <(UNLIKELY,UNLIKELY(array == nullptr))<SUB>2902</SUB>> ]
-"13771" [label = <(IsMovableObject,Runtime::Current()-&gt;GetHeap()-&gt;IsMovableObject(array))<SUB>2906</SUB>> ]
-"13764" [label = <(&lt;operator&gt;.equals,array == nullptr)<SUB>2902</SUB>> ]
-"13768" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>2903</SUB>> ]
-"13772" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetHeap()-&gt;IsMovableObject)<SUB>2906</SUB>> ]
-"13793" [label = <(&lt;operator&gt;.assignment,component_size = sizeof(ElementT))<SUB>2910</SUB>> ]
-"13798" [label = <(&lt;operator&gt;.assignment,size = array-&gt;GetLength() * component_size)<SUB>2911</SUB>> ]
-"13807" [label = <(&lt;operator&gt;.assignment,* data = new uint64_t[RoundUp(size, 8) / 8])<SUB>2912</SUB>> ]
-"13811" [label = <(memcpy,memcpy(data, array-&gt;GetData(), size))<SUB>2913</SUB>> ]
-"13818" [label = <(RETURN,return reinterpret_cast&lt;ElementT*&gt;(data);,return reinterpret_cast&lt;ElementT*&gt;(data);)<SUB>2914</SUB>> ]
-"13737" [label = <(UNLIKELY,UNLIKELY((java_array) == nullptr))<SUB>2898</SUB>> ]
-"13773" [label = <(GetHeap,Runtime::Current()-&gt;GetHeap())<SUB>2906</SUB>> ]
-"13780" [label = <(FIELD_IDENTIFIER,IsMovableObject,IsMovableObject)<SUB>2906</SUB>> ]
-"13784" [label = <(&lt;operator&gt;.notEquals,is_copy != nullptr)<SUB>2907</SUB>> ]
-"13795" [label = <(&lt;operator&gt;.sizeOf,sizeof(ElementT))<SUB>2910</SUB>> ]
-"13800" [label = <(&lt;operator&gt;.multiplication,array-&gt;GetLength() * component_size)<SUB>2911</SUB>> ]
-"13809" [label = <(&lt;operator&gt;.new,new uint64_t[RoundUp(size, 8) / 8])<SUB>2912</SUB>> ]
-"13813" [label = <(GetData,array-&gt;GetData())<SUB>2913</SUB>> ]
-"13819" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;ElementT*&gt;(data))<SUB>2914</SUB>> ]
-"13833" [label = <(RETURN,return reinterpret_cast&lt;ElementT*&gt;(array-&gt;GetData());,return reinterpret_cast&lt;ElementT*&gt;(array-&gt;GetData());)<SUB>2919</SUB>> ]
-"13738" [label = <(&lt;operator&gt;.equals,(java_array) == nullptr)<SUB>2898</SUB>> ]
-"13742" [label = <(CHECK_NON_NULL_ARGUMENT(java_array),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_array == null&quot;))<SUB>2898</SUB>> ]
-"13749" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_array),CHECK_NON_NULL_ARGUMENT(java_array))<SUB>2898</SUB>> ]
-"13774" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetHeap)<SUB>2906</SUB>> ]
-"13788" [label = <(&lt;operator&gt;.assignment,*is_copy = JNI_TRUE)<SUB>2908</SUB>> ]
-"13801" [label = <(GetLength,array-&gt;GetLength())<SUB>2911</SUB>> ]
-"13814" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetData)<SUB>2913</SUB>> ]
-"13820" [label = <(UNKNOWN,ElementT*,ElementT*)<SUB>2914</SUB>> ]
-"13825" [label = <(&lt;operator&gt;.notEquals,is_copy != nullptr)<SUB>2916</SUB>> ]
-"13834" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;ElementT*&gt;(array-&gt;GetData()))<SUB>2919</SUB>> ]
-"13743" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2898</SUB>> ]
-"13775" [label = <(Runtime::Current,Runtime::Current())<SUB>2906</SUB>> ]
-"13779" [label = <(FIELD_IDENTIFIER,GetHeap,GetHeap)<SUB>2906</SUB>> ]
-"13789" [label = <(&lt;operator&gt;.indirection,*is_copy)<SUB>2908</SUB>> ]
-"13802" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetLength)<SUB>2911</SUB>> ]
-"13816" [label = <(FIELD_IDENTIFIER,GetData,GetData)<SUB>2913</SUB>> ]
-"13829" [label = <(&lt;operator&gt;.assignment,*is_copy = JNI_FALSE)<SUB>2917</SUB>> ]
-"13835" [label = <(UNKNOWN,ElementT*,ElementT*)<SUB>2919</SUB>> ]
-"13836" [label = <(GetData,array-&gt;GetData())<SUB>2919</SUB>> ]
-"13744" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2898</SUB>> ]
-"13746" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2898</SUB>> ]
-"13776" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>2906</SUB>> ]
-"13804" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>2911</SUB>> ]
-"13830" [label = <(&lt;operator&gt;.indirection,*is_copy)<SUB>2917</SUB>> ]
-"13837" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetData)<SUB>2919</SUB>> ]
-"13778" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>2906</SUB>> ]
-"13839" [label = <(FIELD_IDENTIFIER,GetData,GetData)<SUB>2919</SUB>> ]
-"13728" [label = <(METHOD,GetPrimitiveArray)<SUB>2897</SUB>> ]
-"13840" [label = <(METHOD_RETURN,ElementT)<SUB>2897</SUB>> ]
-  "13733" -> "13738" 
-  "13733" -> "13752" 
-  "13752" -> "13757" 
-  "13755" -> "13764" 
-  "13757" -> "13755" 
-  "13763" -> "13768" 
-  "13763" -> "13778" 
-  "13771" -> "13784" 
-  "13771" -> "13825" 
-  "13764" -> "13763" 
-  "13768" -> "13840" 
-  "13772" -> "13771" 
-  "13793" -> "13804" 
-  "13798" -> "13809" 
-  "13807" -> "13816" 
-  "13811" -> "13820" 
-  "13818" -> "13840" 
-  "13737" -> "13744" 
-  "13737" -> "13752" 
-  "13773" -> "13780" 
-  "13780" -> "13772" 
-  "13784" -> "13789" 
-  "13784" -> "13795" 
-  "13795" -> "13793" 
-  "13800" -> "13798" 
-  "13809" -> "13807" 
-  "13813" -> "13811" 
-  "13819" -> "13818" 
-  "13833" -> "13840" 
-  "13738" -> "13737" 
-  "13742" -> "13749" 
-  "13749" -> "13840" 
-  "13774" -> "13773" 
-  "13788" -> "13795" 
-  "13801" -> "13800" 
-  "13814" -> "13813" 
-  "13820" -> "13819" 
-  "13825" -> "13835" 
-  "13825" -> "13830" 
-  "13834" -> "13833" 
-  "13743" -> "13742" 
-  "13775" -> "13779" 
-  "13779" -> "13774" 
-  "13789" -> "13788" 
-  "13802" -> "13801" 
-  "13816" -> "13814" 
-  "13829" -> "13835" 
-  "13835" -> "13839" 
-  "13836" -> "13834" 
-  "13744" -> "13746" 
-  "13746" -> "13743" 
-  "13776" -> "13775" 
-  "13804" -> "13802" 
-  "13830" -> "13829" 
-  "13837" -> "13836" 
-  "13778" -> "13776" 
-  "13839" -> "13837" 
-  "13728" -> "13733" 
+digraph "SetPrimitiveArrayRegion" {  
+"13682" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>2867</SUB>> ]
+"13700" [label = <(soa,soa(env))<SUB>2868</SUB>> ]
+"13703" [label = <(&lt;operator&gt;.assignment,array = DecodeAndCheckArrayType&lt;JArrayT, ElementT, ArtArrayT&gt;(\012        soa, java_array, &quot;SetPrimitiveArrayRegion&quot;, &quot;set region of&quot;))<SUB>2869</SUB>> ]
+"13705" [label = <(DecodeAndCheckArrayType&lt;JArrayT,ElementT,ArtArrayT&gt;,DecodeAndCheckArrayType&lt;JArrayT, ElementT, ArtArrayT&gt;(\012        soa, java_array, &quot;SetPrimitiveArrayRegion&quot;, &quot;set region of&quot;))<SUB>2869</SUB>> ]
+"13711" [label = <(&lt;operator&gt;.notEquals,array != nullptr)<SUB>2871</SUB>> ]
+"13686" [label = <(UNLIKELY,UNLIKELY((java_array) == nullptr))<SUB>2867</SUB>> ]
+"13716" [label = <(&lt;operator&gt;.logicalOr,start &lt; 0 || length &lt; 0 || length &gt; array-&gt;GetLength() - start)<SUB>2872</SUB>> ]
+"13687" [label = <(&lt;operator&gt;.equals,(java_array) == nullptr)<SUB>2867</SUB>> ]
+"13691" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_array == null&quot;))<SUB>2867</SUB>> ]
+"13698" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>2867</SUB>> ]
+"13717" [label = <(&lt;operator&gt;.logicalOr,start &lt; 0 || length &lt; 0)<SUB>2872</SUB>> ]
+"13724" [label = <(&lt;operator&gt;.greaterThan,length &gt; array-&gt;GetLength() - start)<SUB>2872</SUB>> ]
+"13733" [label = <(ThrowAIOOBE,ThrowAIOOBE(soa, array, start, length, &quot;dst&quot;))<SUB>2873</SUB>> ]
+"13692" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2867</SUB>> ]
+"13718" [label = <(&lt;operator&gt;.lessThan,start &lt; 0)<SUB>2872</SUB>> ]
+"13721" [label = <(&lt;operator&gt;.lessThan,length &lt; 0)<SUB>2872</SUB>> ]
+"13726" [label = <(&lt;operator&gt;.subtraction,array-&gt;GetLength() - start)<SUB>2872</SUB>> ]
+"13741" [label = <(CHECK_NON_NULL_MEMCPY_ARGUMENT,CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf))<SUB>2875</SUB>> ]
+"13764" [label = <(&lt;operator&gt;.assignment,* data = array-&gt;GetData())<SUB>2876</SUB>> ]
+"13770" [label = <(memcpy,memcpy(data + start, buf, length * sizeof(ElementT)))<SUB>2877</SUB>> ]
+"13693" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2867</SUB>> ]
+"13695" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2867</SUB>> ]
+"13727" [label = <(GetLength,array-&gt;GetLength())<SUB>2872</SUB>> ]
+"13766" [label = <(GetData,array-&gt;GetData())<SUB>2876</SUB>> ]
+"13771" [label = <(&lt;operator&gt;.addition,data + start)<SUB>2877</SUB>> ]
+"13775" [label = <(&lt;operator&gt;.multiplication,length * sizeof(ElementT))<SUB>2877</SUB>> ]
+"13728" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetLength)<SUB>2872</SUB>> ]
+"13767" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetData)<SUB>2876</SUB>> ]
+"13777" [label = <(&lt;operator&gt;.sizeOf,sizeof(ElementT))<SUB>2877</SUB>> ]
+"13730" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>2872</SUB>> ]
+"13746" [label = <(UNLIKELY,UNLIKELY((length) != 0 &amp;&amp; (buf) == nullptr))<SUB>2875</SUB>> ]
+"13769" [label = <(FIELD_IDENTIFIER,GetData,GetData)<SUB>2876</SUB>> ]
+"13747" [label = <(&lt;operator&gt;.logicalAnd,(length) != 0 &amp;&amp; (buf) == nullptr)<SUB>2875</SUB>> ]
+"13755" [label = <(CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;buf == null&quot;))<SUB>2875</SUB>> ]
+"13762" [label = <(RETURN,CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf),CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf))<SUB>2875</SUB>> ]
+"13748" [label = <(&lt;operator&gt;.notEquals,(length) != 0)<SUB>2875</SUB>> ]
+"13751" [label = <(&lt;operator&gt;.equals,(buf) == nullptr)<SUB>2875</SUB>> ]
+"13756" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2875</SUB>> ]
+"13757" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2875</SUB>> ]
+"13759" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2875</SUB>> ]
+"13675" [label = <(METHOD,SetPrimitiveArrayRegion)<SUB>2865</SUB>> ]
+"13779" [label = <(METHOD_RETURN,void)<SUB>2865</SUB>> ]
+  "13682" -> "13687" 
+  "13682" -> "13700" 
+  "13700" -> "13705" 
+  "13703" -> "13711" 
+  "13705" -> "13703" 
+  "13711" -> "13779" 
+  "13711" -> "13718" 
+  "13686" -> "13693" 
+  "13686" -> "13700" 
+  "13716" -> "13733" 
+  "13716" -> "13741" 
+  "13687" -> "13686" 
+  "13691" -> "13698" 
+  "13698" -> "13779" 
+  "13717" -> "13716" 
+  "13717" -> "13730" 
+  "13724" -> "13716" 
+  "13733" -> "13779" 
+  "13692" -> "13691" 
+  "13718" -> "13717" 
+  "13718" -> "13721" 
+  "13721" -> "13717" 
+  "13726" -> "13724" 
+  "13741" -> "13748" 
+  "13741" -> "13769" 
+  "13764" -> "13771" 
+  "13770" -> "13779" 
+  "13693" -> "13695" 
+  "13695" -> "13692" 
+  "13727" -> "13726" 
+  "13766" -> "13764" 
+  "13771" -> "13777" 
+  "13775" -> "13770" 
+  "13728" -> "13727" 
+  "13767" -> "13766" 
+  "13777" -> "13775" 
+  "13730" -> "13728" 
+  "13746" -> "13757" 
+  "13746" -> "13769" 
+  "13769" -> "13767" 
+  "13747" -> "13746" 
+  "13755" -> "13762" 
+  "13762" -> "13779" 
+  "13748" -> "13747" 
+  "13748" -> "13751" 
+  "13751" -> "13747" 
+  "13756" -> "13755" 
+  "13757" -> "13759" 
+  "13759" -> "13756" 
+  "13675" -> "13682" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/27-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/27-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/27-cfg.dot	2023-06-07 19:35:28.217384348 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/27-cfg.dot	2023-06-07 19:35:34.747383777 +0330
@@ -1,5 +1,5 @@
-digraph "ReportInvalidJNINativeMethod" {  
-"705" [label = <(METHOD,ReportInvalidJNINativeMethod)<SUB>480</SUB>> ]
-"711" [label = <(METHOD_RETURN,void)<SUB>480</SUB>> ]
-  "705" -> "711" 
+digraph "GetClassLoader" {  
+"581" [label = <(METHOD,GetClassLoader)<SUB>454</SUB>> ]
+"584" [label = <(METHOD_RETURN,ANY)<SUB>454</SUB>> ]
+  "581" -> "584" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/270-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/270-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/270-cfg.dot	2023-06-07 19:35:28.387384333 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/270-cfg.dot	2023-06-07 19:35:34.907383764 +0330
@@ -1,38 +1,9 @@
-digraph "ReleasePrimitiveArray" {  
-"13848" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>2925</SUB>> ]
-"13866" [label = <(soa,soa(env))<SUB>2926</SUB>> ]
-"13869" [label = <(&lt;operator&gt;.assignment,array = DecodeAndCheckArrayType&lt;ArrayT, ElementT, ArtArrayT&gt;(\012        soa, java_array, &quot;ReleaseArrayElements&quot;, &quot;release&quot;))<SUB>2927</SUB>> ]
-"13882" [label = <(ReleasePrimitiveArray,ReleasePrimitiveArray(soa, array, sizeof(ElementT), elements, mode))<SUB>2932</SUB>> ]
-"13871" [label = <(DecodeAndCheckArrayType&lt;ArrayT,ElementT,ArtArrayT&gt;,DecodeAndCheckArrayType&lt;ArrayT, ElementT, ArtArrayT&gt;(\012        soa, java_array, &quot;ReleaseArrayElements&quot;, &quot;release&quot;))<SUB>2927</SUB>> ]
-"13877" [label = <(&lt;operator&gt;.equals,array == nullptr)<SUB>2929</SUB>> ]
-"13885" [label = <(&lt;operator&gt;.sizeOf,sizeof(ElementT))<SUB>2932</SUB>> ]
-"13881" [label = <(RETURN,return;,return;)<SUB>2930</SUB>> ]
-"13852" [label = <(UNLIKELY,UNLIKELY((java_array) == nullptr))<SUB>2925</SUB>> ]
-"13853" [label = <(&lt;operator&gt;.equals,(java_array) == nullptr)<SUB>2925</SUB>> ]
-"13857" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_array == null&quot;))<SUB>2925</SUB>> ]
-"13864" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>2925</SUB>> ]
-"13858" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2925</SUB>> ]
-"13859" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2925</SUB>> ]
-"13861" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2925</SUB>> ]
-"13842" [label = <(METHOD,ReleasePrimitiveArray)<SUB>2924</SUB>> ]
-"13889" [label = <(METHOD_RETURN,void)<SUB>2924</SUB>> ]
-  "13848" -> "13853" 
-  "13848" -> "13866" 
-  "13866" -> "13871" 
-  "13869" -> "13877" 
-  "13882" -> "13889" 
-  "13871" -> "13869" 
-  "13877" -> "13881" 
-  "13877" -> "13885" 
-  "13885" -> "13882" 
-  "13881" -> "13889" 
-  "13852" -> "13859" 
-  "13852" -> "13866" 
-  "13853" -> "13852" 
-  "13857" -> "13864" 
-  "13864" -> "13889" 
-  "13858" -> "13857" 
-  "13859" -> "13861" 
-  "13861" -> "13858" 
-  "13842" -> "13848" 
+digraph "GetJniNativeInterface" {  
+"14479" [label = <(RETURN,return &amp;gJniNativeInterface;,return &amp;gJniNativeInterface;)<SUB>3120</SUB>> ]
+"14480" [label = <(&lt;operator&gt;.addressOf,&amp;gJniNativeInterface)<SUB>3120</SUB>> ]
+"14477" [label = <(METHOD,GetJniNativeInterface)<SUB>3119</SUB>> ]
+"14482" [label = <(METHOD_RETURN,JNINativeInterface)<SUB>3119</SUB>> ]
+  "14479" -> "14482" 
+  "14480" -> "14479" 
+  "14477" -> "14480" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/271-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/271-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/271-cfg.dot	2023-06-07 19:35:28.387384333 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/271-cfg.dot	2023-06-07 19:35:34.907383764 +0330
@@ -1,5 +1,5 @@
-digraph "ReleasePrimitiveArray" {  
-"13891" [label = <(METHOD,ReleasePrimitiveArray)<SUB>2935</SUB>> ]
-"13898" [label = <(METHOD_RETURN,void)<SUB>2935</SUB>> ]
-  "13891" -> "13898" 
+digraph "gJniSleepForeverStub" {  
+"14484" [label = <(METHOD,gJniSleepForeverStub)<SUB>3123</SUB>> ]
+"14486" [label = <(METHOD_RETURN,void)<SUB>3123</SUB>> ]
+  "14484" -> "14486" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/272-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/272-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/272-cfg.dot	2023-06-07 19:35:28.397384334 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/272-cfg.dot	2023-06-07 19:35:34.907383764 +0330
@@ -1,94 +1,13 @@
-digraph "GetPrimitiveArrayRegion" {  
-"13937" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>2980</SUB>> ]
-"13955" [label = <(soa,soa(env))<SUB>2981</SUB>> ]
-"13958" [label = <(&lt;operator&gt;.assignment,array = DecodeAndCheckArrayType&lt;JArrayT, ElementT, ArtArrayT&gt;(\012        soa, java_array, &quot;GetPrimitiveArrayRegion&quot;, &quot;get region of&quot;))<SUB>2982</SUB>> ]
-"13960" [label = <(DecodeAndCheckArrayType&lt;JArrayT,ElementT,ArtArrayT&gt;,DecodeAndCheckArrayType&lt;JArrayT, ElementT, ArtArrayT&gt;(\012        soa, java_array, &quot;GetPrimitiveArrayRegion&quot;, &quot;get region of&quot;))<SUB>2982</SUB>> ]
-"13966" [label = <(&lt;operator&gt;.notEquals,array != nullptr)<SUB>2984</SUB>> ]
-"13941" [label = <(UNLIKELY,UNLIKELY((java_array) == nullptr))<SUB>2980</SUB>> ]
-"13971" [label = <(&lt;operator&gt;.logicalOr,start &lt; 0 || length &lt; 0 || length &gt; array-&gt;GetLength() - start)<SUB>2985</SUB>> ]
-"13942" [label = <(&lt;operator&gt;.equals,(java_array) == nullptr)<SUB>2980</SUB>> ]
-"13946" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_array == null&quot;))<SUB>2980</SUB>> ]
-"13953" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>2980</SUB>> ]
-"13972" [label = <(&lt;operator&gt;.logicalOr,start &lt; 0 || length &lt; 0)<SUB>2985</SUB>> ]
-"13979" [label = <(&lt;operator&gt;.greaterThan,length &gt; array-&gt;GetLength() - start)<SUB>2985</SUB>> ]
-"13988" [label = <(ThrowAIOOBE,ThrowAIOOBE(soa, array, start, length, &quot;src&quot;))<SUB>2986</SUB>> ]
-"13947" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2980</SUB>> ]
-"13973" [label = <(&lt;operator&gt;.lessThan,start &lt; 0)<SUB>2985</SUB>> ]
-"13976" [label = <(&lt;operator&gt;.lessThan,length &lt; 0)<SUB>2985</SUB>> ]
-"13981" [label = <(&lt;operator&gt;.subtraction,array-&gt;GetLength() - start)<SUB>2985</SUB>> ]
-"13996" [label = <(CHECK_NON_NULL_MEMCPY_ARGUMENT,CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf))<SUB>2988</SUB>> ]
-"14019" [label = <(&lt;operator&gt;.assignment,* data = array-&gt;GetData())<SUB>2989</SUB>> ]
-"14025" [label = <(memcpy,memcpy(buf, data + start, length * sizeof(ElementT)))<SUB>2990</SUB>> ]
-"13948" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2980</SUB>> ]
-"13950" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2980</SUB>> ]
-"13982" [label = <(GetLength,array-&gt;GetLength())<SUB>2985</SUB>> ]
-"14021" [label = <(GetData,array-&gt;GetData())<SUB>2989</SUB>> ]
-"14027" [label = <(&lt;operator&gt;.addition,data + start)<SUB>2990</SUB>> ]
-"14030" [label = <(&lt;operator&gt;.multiplication,length * sizeof(ElementT))<SUB>2990</SUB>> ]
-"13983" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetLength)<SUB>2985</SUB>> ]
-"14022" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetData)<SUB>2989</SUB>> ]
-"14032" [label = <(&lt;operator&gt;.sizeOf,sizeof(ElementT))<SUB>2990</SUB>> ]
-"13985" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>2985</SUB>> ]
-"14001" [label = <(UNLIKELY,UNLIKELY((length) != 0 &amp;&amp; (buf) == nullptr))<SUB>2988</SUB>> ]
-"14024" [label = <(FIELD_IDENTIFIER,GetData,GetData)<SUB>2989</SUB>> ]
-"14002" [label = <(&lt;operator&gt;.logicalAnd,(length) != 0 &amp;&amp; (buf) == nullptr)<SUB>2988</SUB>> ]
-"14010" [label = <(CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;buf == null&quot;))<SUB>2988</SUB>> ]
-"14017" [label = <(RETURN,CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf),CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf))<SUB>2988</SUB>> ]
-"14003" [label = <(&lt;operator&gt;.notEquals,(length) != 0)<SUB>2988</SUB>> ]
-"14006" [label = <(&lt;operator&gt;.equals,(buf) == nullptr)<SUB>2988</SUB>> ]
-"14011" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2988</SUB>> ]
-"14012" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2988</SUB>> ]
-"14014" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2988</SUB>> ]
-"13930" [label = <(METHOD,GetPrimitiveArrayRegion)<SUB>2978</SUB>> ]
-"14034" [label = <(METHOD_RETURN,void)<SUB>2978</SUB>> ]
-  "13937" -> "13942" 
-  "13937" -> "13955" 
-  "13955" -> "13960" 
-  "13958" -> "13966" 
-  "13960" -> "13958" 
-  "13966" -> "14034" 
-  "13966" -> "13973" 
-  "13941" -> "13948" 
-  "13941" -> "13955" 
-  "13971" -> "13988" 
-  "13971" -> "13996" 
-  "13942" -> "13941" 
-  "13946" -> "13953" 
-  "13953" -> "14034" 
-  "13972" -> "13971" 
-  "13972" -> "13985" 
-  "13979" -> "13971" 
-  "13988" -> "14034" 
-  "13947" -> "13946" 
-  "13973" -> "13972" 
-  "13973" -> "13976" 
-  "13976" -> "13972" 
-  "13981" -> "13979" 
-  "13996" -> "14003" 
-  "13996" -> "14024" 
-  "14019" -> "14027" 
-  "14025" -> "14034" 
-  "13948" -> "13950" 
-  "13950" -> "13947" 
-  "13982" -> "13981" 
-  "14021" -> "14019" 
-  "14027" -> "14032" 
-  "14030" -> "14025" 
-  "13983" -> "13982" 
-  "14022" -> "14021" 
-  "14032" -> "14030" 
-  "13985" -> "13983" 
-  "14001" -> "14012" 
-  "14001" -> "14024" 
-  "14024" -> "14022" 
-  "14002" -> "14001" 
-  "14010" -> "14017" 
-  "14017" -> "14034" 
-  "14003" -> "14002" 
-  "14003" -> "14006" 
-  "14006" -> "14002" 
-  "14011" -> "14010" 
-  "14012" -> "14014" 
-  "14014" -> "14011" 
-  "13930" -> "13937" 
+digraph "GetRuntimeShutdownNativeInterface" {  
+"14726" [label = <(RETURN,return reinterpret_cast&lt;JNINativeInterface*&gt;(&amp;gJniSleepForeverStub);,return reinterpret_cast&lt;JNINativeInterface*&gt;(&amp;gJniSleepForeverStub);)<SUB>3360</SUB>> ]
+"14727" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;JNINativeInterface*&gt;(&amp;gJniSleepForeverStub))<SUB>3360</SUB>> ]
+"14728" [label = <(UNKNOWN,JNINativeInterface*,JNINativeInterface*)<SUB>3360</SUB>> ]
+"14729" [label = <(&lt;operator&gt;.addressOf,&amp;gJniSleepForeverStub)<SUB>3360</SUB>> ]
+"14724" [label = <(METHOD,GetRuntimeShutdownNativeInterface)<SUB>3359</SUB>> ]
+"14731" [label = <(METHOD_RETURN,JNINativeInterface)<SUB>3359</SUB>> ]
+  "14726" -> "14731" 
+  "14727" -> "14726" 
+  "14728" -> "14729" 
+  "14729" -> "14727" 
+  "14724" -> "14728" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/273-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/273-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/273-cfg.dot	2023-06-07 19:35:28.397384334 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/273-cfg.dot	2023-06-07 19:35:34.907383764 +0330
@@ -1,94 +1,33 @@
-digraph "SetPrimitiveArrayRegion" {  
-"14043" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>2998</SUB>> ]
-"14061" [label = <(soa,soa(env))<SUB>2999</SUB>> ]
-"14064" [label = <(&lt;operator&gt;.assignment,array = DecodeAndCheckArrayType&lt;JArrayT, ElementT, ArtArrayT&gt;(\012        soa, java_array, &quot;SetPrimitiveArrayRegion&quot;, &quot;set region of&quot;))<SUB>3000</SUB>> ]
-"14066" [label = <(DecodeAndCheckArrayType&lt;JArrayT,ElementT,ArtArrayT&gt;,DecodeAndCheckArrayType&lt;JArrayT, ElementT, ArtArrayT&gt;(\012        soa, java_array, &quot;SetPrimitiveArrayRegion&quot;, &quot;set region of&quot;))<SUB>3000</SUB>> ]
-"14072" [label = <(&lt;operator&gt;.notEquals,array != nullptr)<SUB>3002</SUB>> ]
-"14047" [label = <(UNLIKELY,UNLIKELY((java_array) == nullptr))<SUB>2998</SUB>> ]
-"14077" [label = <(&lt;operator&gt;.logicalOr,start &lt; 0 || length &lt; 0 || length &gt; array-&gt;GetLength() - start)<SUB>3003</SUB>> ]
-"14048" [label = <(&lt;operator&gt;.equals,(java_array) == nullptr)<SUB>2998</SUB>> ]
-"14052" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_array == null&quot;))<SUB>2998</SUB>> ]
-"14059" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))<SUB>2998</SUB>> ]
-"14078" [label = <(&lt;operator&gt;.logicalOr,start &lt; 0 || length &lt; 0)<SUB>3003</SUB>> ]
-"14085" [label = <(&lt;operator&gt;.greaterThan,length &gt; array-&gt;GetLength() - start)<SUB>3003</SUB>> ]
-"14094" [label = <(ThrowAIOOBE,ThrowAIOOBE(soa, array, start, length, &quot;dst&quot;))<SUB>3004</SUB>> ]
-"14053" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>2998</SUB>> ]
-"14079" [label = <(&lt;operator&gt;.lessThan,start &lt; 0)<SUB>3003</SUB>> ]
-"14082" [label = <(&lt;operator&gt;.lessThan,length &lt; 0)<SUB>3003</SUB>> ]
-"14087" [label = <(&lt;operator&gt;.subtraction,array-&gt;GetLength() - start)<SUB>3003</SUB>> ]
-"14102" [label = <(CHECK_NON_NULL_MEMCPY_ARGUMENT,CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf))<SUB>3006</SUB>> ]
-"14125" [label = <(&lt;operator&gt;.assignment,* data = array-&gt;GetData())<SUB>3007</SUB>> ]
-"14131" [label = <(memcpy,memcpy(data + start, buf, length * sizeof(ElementT)))<SUB>3008</SUB>> ]
-"14054" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>2998</SUB>> ]
-"14056" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>2998</SUB>> ]
-"14088" [label = <(GetLength,array-&gt;GetLength())<SUB>3003</SUB>> ]
-"14127" [label = <(GetData,array-&gt;GetData())<SUB>3007</SUB>> ]
-"14132" [label = <(&lt;operator&gt;.addition,data + start)<SUB>3008</SUB>> ]
-"14136" [label = <(&lt;operator&gt;.multiplication,length * sizeof(ElementT))<SUB>3008</SUB>> ]
-"14089" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetLength)<SUB>3003</SUB>> ]
-"14128" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetData)<SUB>3007</SUB>> ]
-"14138" [label = <(&lt;operator&gt;.sizeOf,sizeof(ElementT))<SUB>3008</SUB>> ]
-"14091" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>3003</SUB>> ]
-"14107" [label = <(UNLIKELY,UNLIKELY((length) != 0 &amp;&amp; (buf) == nullptr))<SUB>3006</SUB>> ]
-"14130" [label = <(FIELD_IDENTIFIER,GetData,GetData)<SUB>3007</SUB>> ]
-"14108" [label = <(&lt;operator&gt;.logicalAnd,(length) != 0 &amp;&amp; (buf) == nullptr)<SUB>3006</SUB>> ]
-"14116" [label = <(CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;buf == null&quot;))<SUB>3006</SUB>> ]
-"14123" [label = <(RETURN,CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf),CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf))<SUB>3006</SUB>> ]
-"14109" [label = <(&lt;operator&gt;.notEquals,(length) != 0)<SUB>3006</SUB>> ]
-"14112" [label = <(&lt;operator&gt;.equals,(buf) == nullptr)<SUB>3006</SUB>> ]
-"14117" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>3006</SUB>> ]
-"14118" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>3006</SUB>> ]
-"14120" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>3006</SUB>> ]
-"14036" [label = <(METHOD,SetPrimitiveArrayRegion)<SUB>2996</SUB>> ]
-"14140" [label = <(METHOD_RETURN,void)<SUB>2996</SUB>> ]
-  "14043" -> "14048" 
-  "14043" -> "14061" 
-  "14061" -> "14066" 
-  "14064" -> "14072" 
-  "14066" -> "14064" 
-  "14072" -> "14140" 
-  "14072" -> "14079" 
-  "14047" -> "14054" 
-  "14047" -> "14061" 
-  "14077" -> "14094" 
-  "14077" -> "14102" 
-  "14048" -> "14047" 
-  "14052" -> "14059" 
-  "14059" -> "14140" 
-  "14078" -> "14077" 
-  "14078" -> "14091" 
-  "14085" -> "14077" 
-  "14094" -> "14140" 
-  "14053" -> "14052" 
-  "14079" -> "14078" 
-  "14079" -> "14082" 
-  "14082" -> "14078" 
-  "14087" -> "14085" 
-  "14102" -> "14109" 
-  "14102" -> "14130" 
-  "14125" -> "14132" 
-  "14131" -> "14140" 
-  "14054" -> "14056" 
-  "14056" -> "14053" 
-  "14088" -> "14087" 
-  "14127" -> "14125" 
-  "14132" -> "14138" 
-  "14136" -> "14131" 
-  "14089" -> "14088" 
-  "14128" -> "14127" 
-  "14138" -> "14136" 
-  "14091" -> "14089" 
-  "14107" -> "14118" 
-  "14107" -> "14130" 
-  "14130" -> "14128" 
-  "14108" -> "14107" 
-  "14116" -> "14123" 
-  "14123" -> "14140" 
-  "14109" -> "14108" 
-  "14109" -> "14112" 
-  "14112" -> "14108" 
-  "14117" -> "14116" 
-  "14118" -> "14120" 
-  "14120" -> "14117" 
-  "14036" -> "14043" 
+digraph "JniInitializeNativeCallerCheck" {  
+"14735" [label = <(DCHECK,DCHECK(!CodeRangeCache::GetSingleton().HasCache()))<SUB>3365</SUB>> ]
+"14744" [label = <(BuildCache,CodeRangeCache::GetSingleton().BuildCache())<SUB>3366</SUB>> ]
+"14736" [label = <(&lt;operator&gt;.logicalNot,!CodeRangeCache::GetSingleton().HasCache())<SUB>3365</SUB>> ]
+"14745" [label = <(&lt;operator&gt;.fieldAccess,CodeRangeCache::GetSingleton().BuildCache)<SUB>3366</SUB>> ]
+"14737" [label = <(HasCache,CodeRangeCache::GetSingleton().HasCache())<SUB>3365</SUB>> ]
+"14746" [label = <(CodeRangeCache::GetSingleton,CodeRangeCache::GetSingleton())<SUB>3366</SUB>> ]
+"14750" [label = <(FIELD_IDENTIFIER,BuildCache,BuildCache)<SUB>3366</SUB>> ]
+"14738" [label = <(&lt;operator&gt;.fieldAccess,CodeRangeCache::GetSingleton().HasCache)<SUB>3365</SUB>> ]
+"14747" [label = <(&lt;operator&gt;.fieldAccess,CodeRangeCache::GetSingleton)<SUB>3366</SUB>> ]
+"14739" [label = <(CodeRangeCache::GetSingleton,CodeRangeCache::GetSingleton())<SUB>3365</SUB>> ]
+"14743" [label = <(FIELD_IDENTIFIER,HasCache,HasCache)<SUB>3365</SUB>> ]
+"14749" [label = <(FIELD_IDENTIFIER,GetSingleton,GetSingleton)<SUB>3366</SUB>> ]
+"14740" [label = <(&lt;operator&gt;.fieldAccess,CodeRangeCache::GetSingleton)<SUB>3365</SUB>> ]
+"14742" [label = <(FIELD_IDENTIFIER,GetSingleton,GetSingleton)<SUB>3365</SUB>> ]
+"14733" [label = <(METHOD,JniInitializeNativeCallerCheck)<SUB>3363</SUB>> ]
+"14751" [label = <(METHOD_RETURN,void)<SUB>3363</SUB>> ]
+  "14735" -> "14749" 
+  "14744" -> "14751" 
+  "14736" -> "14735" 
+  "14745" -> "14744" 
+  "14737" -> "14736" 
+  "14746" -> "14750" 
+  "14750" -> "14745" 
+  "14738" -> "14737" 
+  "14747" -> "14746" 
+  "14739" -> "14743" 
+  "14743" -> "14738" 
+  "14749" -> "14747" 
+  "14740" -> "14739" 
+  "14742" -> "14740" 
+  "14733" -> "14742" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/274-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/274-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/274-cfg.dot	2023-06-07 19:35:28.397384334 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/274-cfg.dot	2023-06-07 19:35:34.907383764 +0330
@@ -1,9 +1,17 @@
-digraph "GetJniNativeInterface" {  
-"14840" [label = <(RETURN,return &amp;gJniNativeInterface;,return &amp;gJniNativeInterface;)<SUB>3251</SUB>> ]
-"14841" [label = <(&lt;operator&gt;.addressOf,&amp;gJniNativeInterface)<SUB>3251</SUB>> ]
-"14838" [label = <(METHOD,GetJniNativeInterface)<SUB>3250</SUB>> ]
-"14843" [label = <(METHOD_RETURN,JNINativeInterface)<SUB>3250</SUB>> ]
-  "14840" -> "14843" 
-  "14841" -> "14840" 
-  "14838" -> "14841" 
+digraph "JniShutdownNativeCallerCheck" {  
+"14755" [label = <(DropCache,CodeRangeCache::GetSingleton().DropCache())<SUB>3370</SUB>> ]
+"14756" [label = <(&lt;operator&gt;.fieldAccess,CodeRangeCache::GetSingleton().DropCache)<SUB>3370</SUB>> ]
+"14757" [label = <(CodeRangeCache::GetSingleton,CodeRangeCache::GetSingleton())<SUB>3370</SUB>> ]
+"14761" [label = <(FIELD_IDENTIFIER,DropCache,DropCache)<SUB>3370</SUB>> ]
+"14758" [label = <(&lt;operator&gt;.fieldAccess,CodeRangeCache::GetSingleton)<SUB>3370</SUB>> ]
+"14760" [label = <(FIELD_IDENTIFIER,GetSingleton,GetSingleton)<SUB>3370</SUB>> ]
+"14753" [label = <(METHOD,JniShutdownNativeCallerCheck)<SUB>3369</SUB>> ]
+"14762" [label = <(METHOD_RETURN,void)<SUB>3369</SUB>> ]
+  "14755" -> "14762" 
+  "14756" -> "14755" 
+  "14757" -> "14761" 
+  "14761" -> "14756" 
+  "14758" -> "14757" 
+  "14760" -> "14758" 
+  "14753" -> "14760" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/275-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/275-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/275-cfg.dot	2023-06-07 19:35:28.397384334 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/275-cfg.dot	2023-06-07 19:35:34.907383764 +0330
@@ -1,5 +1,39 @@
-digraph "gJniSleepForeverStub" {  
-"14845" [label = <(METHOD,gJniSleepForeverStub)<SUB>3254</SUB>> ]
-"14847" [label = <(METHOD_RETURN,void)<SUB>3254</SUB>> ]
-  "14845" -> "14847" 
+digraph "operator &lt;&lt;" {  
+"14774" [label = <(&lt;operator&gt;.shiftLeft,os &lt;&lt; &quot;JNIInvalidRefType&quot;)<SUB>3378</SUB>> ]
+"14777" [label = <(RETURN,return os;,return os;)<SUB>3379</SUB>> ]
+"14781" [label = <(&lt;operator&gt;.shiftLeft,os &lt;&lt; &quot;JNILocalRefType&quot;)<SUB>3381</SUB>> ]
+"14784" [label = <(RETURN,return os;,return os;)<SUB>3382</SUB>> ]
+"14788" [label = <(&lt;operator&gt;.shiftLeft,os &lt;&lt; &quot;JNIGlobalRefType&quot;)<SUB>3384</SUB>> ]
+"14791" [label = <(RETURN,return os;,return os;)<SUB>3385</SUB>> ]
+"14795" [label = <(&lt;operator&gt;.shiftLeft,os &lt;&lt; &quot;JNIWeakGlobalRefType&quot;)<SUB>3387</SUB>> ]
+"14798" [label = <(RETURN,return os;,return os;)<SUB>3388</SUB>> ]
+"14801" [label = <(&lt;operator&gt;.shiftLeft,LOG(FATAL) &lt;&lt; &quot;jobjectRefType[&quot; &lt;&lt; static_cast&lt;int&gt;(rhs) &lt;&lt; &quot;]&quot;)<SUB>3390</SUB>> ]
+"14811" [label = <(UNREACHABLE,UNREACHABLE())<SUB>3391</SUB>> ]
+"14802" [label = <(&lt;operator&gt;.shiftLeft,LOG(FATAL) &lt;&lt; &quot;jobjectRefType[&quot; &lt;&lt; static_cast&lt;int&gt;(rhs))<SUB>3390</SUB>> ]
+"14803" [label = <(&lt;operator&gt;.shiftLeft,LOG(FATAL) &lt;&lt; &quot;jobjectRefType[&quot;)<SUB>3390</SUB>> ]
+"14807" [label = <(&lt;operator&gt;.cast,static_cast&lt;int&gt;(rhs))<SUB>3390</SUB>> ]
+"14804" [label = <(LOG,LOG(FATAL))<SUB>3390</SUB>> ]
+"14808" [label = <(UNKNOWN,int,int)<SUB>3390</SUB>> ]
+"14765" [label = <(METHOD,operator &lt;&lt;)<SUB>3375</SUB>> ]
+"14812" [label = <(METHOD_RETURN,ostream)<SUB>3375</SUB>> ]
+  "14774" -> "14777" 
+  "14777" -> "14812" 
+  "14781" -> "14784" 
+  "14784" -> "14812" 
+  "14788" -> "14791" 
+  "14791" -> "14812" 
+  "14795" -> "14798" 
+  "14798" -> "14812" 
+  "14801" -> "14811" 
+  "14811" -> "14812" 
+  "14802" -> "14801" 
+  "14803" -> "14808" 
+  "14807" -> "14802" 
+  "14804" -> "14803" 
+  "14808" -> "14807" 
+  "14765" -> "14774" 
+  "14765" -> "14781" 
+  "14765" -> "14788" 
+  "14765" -> "14795" 
+  "14765" -> "14804" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/276-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/276-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/276-cfg.dot	2023-06-07 19:35:28.397384334 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/276-cfg.dot	2023-06-07 19:35:34.907383764 +0330
@@ -1,13 +1,167 @@
-digraph "GetRuntimeShutdownNativeInterface" {  
-"15087" [label = <(RETURN,return reinterpret_cast&lt;JNINativeInterface*&gt;(&amp;gJniSleepForeverStub);,return reinterpret_cast&lt;JNINativeInterface*&gt;(&amp;gJniSleepForeverStub);)<SUB>3491</SUB>> ]
-"15088" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;JNINativeInterface*&gt;(&amp;gJniSleepForeverStub))<SUB>3491</SUB>> ]
-"15089" [label = <(UNKNOWN,JNINativeInterface*,JNINativeInterface*)<SUB>3491</SUB>> ]
-"15090" [label = <(&lt;operator&gt;.addressOf,&amp;gJniSleepForeverStub)<SUB>3491</SUB>> ]
-"15085" [label = <(METHOD,GetRuntimeShutdownNativeInterface)<SUB>3490</SUB>> ]
-"15092" [label = <(METHOD_RETURN,JNINativeInterface)<SUB>3490</SUB>> ]
-  "15087" -> "15092" 
-  "15088" -> "15087" 
-  "15089" -> "15090" 
-  "15090" -> "15088" 
-  "15085" -> "15089" 
+digraph "&lt;global&gt;" {  
+"17286" [label = <(UNKNOWN,TEST_F(JniInternalTest, AllocObject) {\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012  jobject o = env_-&gt;AllocObject(c);\012  ASSERT_NE(o, nullptr);\012\012 // We have an instance of the class we asked for...\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(o, c));\012 // ...whose fields haven't been initialized because\012 // we didn't call a constructor.\012 // Even with string compression empty string has `count == 0`.\012  ASSERT_EQ(0, env_-&gt;GetIntField(o, env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;)));\012},TEST_F(JniInternalTest, AllocObject) {\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012  jobject o = env_-&gt;AllocObject(c);\012  ASSERT_NE(o, nullptr);\012\012 // We have an instance of the class we asked for...\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(o, c));\012 // ...whose fields haven't been initialized because\012 // we didn't call a constructor.\012 // Even with string compression empty string has `count == 0`.\012  ASSERT_EQ(0, env_-&gt;GetIntField(o, env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;)));\012})<SUB>675</SUB>> ]
+"17287" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetVersion) {\012  ASSERT_EQ(JNI_VERSION_1_6, env_-&gt;GetVersion());\012},TEST_F(JniInternalTest, GetVersion) {\012  ASSERT_EQ(JNI_VERSION_1_6, env_-&gt;GetVersion());\012})<SUB>689</SUB>> ]
+"17288" [label = <(UNKNOWN,TEST_F(JniInternalTest, FindClass) {\012 // This tests leads to warnings in the log.\012 ScopedLogSeverity sls(LogSeverity::ERROR);\012\012 FindClassTest(false);\012 FindClassTest(true);\012},TEST_F(JniInternalTest, FindClass) {\012 // This tests leads to warnings in the log.\012 ScopedLogSeverity sls(LogSeverity::ERROR);\012\012 FindClassTest(false);\012 FindClassTest(true);\012})<SUB>693</SUB>> ]
+"17289" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetFieldID) {\012  jclass jlnsfe = env_-&gt;FindClass(&quot;java/lang/NoSuchFieldError&quot;);\012  ASSERT_NE(jlnsfe, nullptr);\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012\012 // Wrong type.\012  jfieldID fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;J&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Wrong type where type doesn't exist.\012  fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;Lrod/jane/freddy;&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Wrong name.\012  fid = env_-&gt;GetFieldID(c, &quot;Count&quot;, &quot;I&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Good declared field lookup.\012  fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;);\012  EXPECT_NE(nullptr, fid);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Good superclass field lookup.\012  c = env_-&gt;FindClass(&quot;java/lang/StringBuilder&quot;);\012  fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;);\012  EXPECT_NE(nullptr, fid);\012  EXPECT_NE(fid, nullptr);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Not instance.\012  fid = env_-&gt;GetFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;Ljava/util/Comparator;&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Bad arguments.\012 GetFieldIdBadArgumentTest(false);\012 GetFieldIdBadArgumentTest(true);\012},TEST_F(JniInternalTest, GetFieldID) {\012  jclass jlnsfe = env_-&gt;FindClass(&quot;java/lang/NoSuchFieldError&quot;);\012  ASSERT_NE(jlnsfe, nullptr);\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012\012 // Wrong type.\012  jfieldID fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;J&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Wrong type where type doesn't exist.\012  fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;Lrod/jane/freddy;&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Wrong name.\012  fid = env_-&gt;GetFieldID(c, &quot;Count&quot;, &quot;I&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Good declared field lookup.\012  fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;);\012  EXPECT_NE(nullptr, fid);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Good superclass field lookup.\012  c = env_-&gt;FindClass(&quot;java/lang/StringBuilder&quot;);\012  fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;);\012  EXPECT_NE(nullptr, fid);\012  EXPECT_NE(fid, nullptr);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Not instance.\012  fid = env_-&gt;GetFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;Ljava/util/Comparator;&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Bad arguments.\012 GetFieldIdBadArgumentTest(false);\012 GetFieldIdBadArgumentTest(true);\012})<SUB>701</SUB>> ]
+"17290" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetStaticFieldID) {\012  jclass jlnsfe = env_-&gt;FindClass(&quot;java/lang/NoSuchFieldError&quot;);\012  ASSERT_NE(jlnsfe, nullptr);\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012\012 // Wrong type.\012  jfieldID fid = env_-&gt;GetStaticFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;J&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Wrong type where type doesn't exist.\012  fid = env_-&gt;GetStaticFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;Lrod/jane/freddy;&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Wrong name.\012  fid = env_-&gt;GetStaticFieldID(c, &quot;cASE_INSENSITIVE_ORDER&quot;, &quot;Ljava/util/Comparator;&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Good declared field lookup.\012  fid = env_-&gt;GetStaticFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;Ljava/util/Comparator;&quot;);\012  EXPECT_NE(nullptr, fid);\012  EXPECT_NE(fid, nullptr);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Not static.\012  fid = env_-&gt;GetStaticFieldID(c, &quot;count&quot;, &quot;I&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Bad arguments.\012 GetStaticFieldIdBadArgumentTest(false);\012 GetStaticFieldIdBadArgumentTest(true);\012},TEST_F(JniInternalTest, GetStaticFieldID) {\012  jclass jlnsfe = env_-&gt;FindClass(&quot;java/lang/NoSuchFieldError&quot;);\012  ASSERT_NE(jlnsfe, nullptr);\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012\012 // Wrong type.\012  jfieldID fid = env_-&gt;GetStaticFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;J&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Wrong type where type doesn't exist.\012  fid = env_-&gt;GetStaticFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;Lrod/jane/freddy;&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Wrong name.\012  fid = env_-&gt;GetStaticFieldID(c, &quot;cASE_INSENSITIVE_ORDER&quot;, &quot;Ljava/util/Comparator;&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Good declared field lookup.\012  fid = env_-&gt;GetStaticFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;Ljava/util/Comparator;&quot;);\012  EXPECT_NE(nullptr, fid);\012  EXPECT_NE(fid, nullptr);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Not static.\012  fid = env_-&gt;GetStaticFieldID(c, &quot;count&quot;, &quot;I&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Bad arguments.\012 GetStaticFieldIdBadArgumentTest(false);\012 GetStaticFieldIdBadArgumentTest(true);\012})<SUB>744</SUB>> ]
+"17291" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetMethodID) {\012  jclass jlobject = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  jclass jlstring = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  jclass jlnsme = env_-&gt;FindClass(&quot;java/lang/NoSuchMethodError&quot;);\012  jclass jncrbc = env_-&gt;FindClass(&quot;java/nio/channels/ReadableByteChannel&quot;);\012\012 // Sanity check that no exceptions are pending.\012  ASSERT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Check that java.lang.Object.foo() doesn't exist and NoSuchMethodError is\012 // a pending exception.\012  jmethodID method = env_-&gt;GetMethodID(jlobject, &quot;foo&quot;, &quot;()V&quot;);\012  EXPECT_EQ(nullptr, method);\012 ExpectException(jlnsme);\012\012 // Check that java.lang.Object.equals() does exist.\012  method = env_-&gt;GetMethodID(jlobject, &quot;equals&quot;, &quot;(Ljava/lang/Object;)Z&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Check that GetMethodID for java.lang.String.valueOf(int) fails as the\012 // method is static.\012  method = env_-&gt;GetMethodID(jlstring, &quot;valueOf&quot;, &quot;(I)Ljava/lang/String;&quot;);\012  EXPECT_EQ(nullptr, method);\012 ExpectException(jlnsme);\012\012 // Check that GetMethodID for java.lang.NoSuchMethodError.&lt;init&gt;(String) finds the constructor.\012  method = env_-&gt;GetMethodID(jlnsme, &quot;&lt;init&gt;&quot;, &quot;(Ljava/lang/String;)V&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Check that GetMethodID can find a interface method inherited from another interface.\012  method = env_-&gt;GetMethodID(jncrbc, &quot;close&quot;, &quot;()V&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Bad arguments.\012 GetMethodIdBadArgumentTest(false);\012 GetMethodIdBadArgumentTest(true);\012},TEST_F(JniInternalTest, GetMethodID) {\012  jclass jlobject = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  jclass jlstring = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  jclass jlnsme = env_-&gt;FindClass(&quot;java/lang/NoSuchMethodError&quot;);\012  jclass jncrbc = env_-&gt;FindClass(&quot;java/nio/channels/ReadableByteChannel&quot;);\012\012 // Sanity check that no exceptions are pending.\012  ASSERT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Check that java.lang.Object.foo() doesn't exist and NoSuchMethodError is\012 // a pending exception.\012  jmethodID method = env_-&gt;GetMethodID(jlobject, &quot;foo&quot;, &quot;()V&quot;);\012  EXPECT_EQ(nullptr, method);\012 ExpectException(jlnsme);\012\012 // Check that java.lang.Object.equals() does exist.\012  method = env_-&gt;GetMethodID(jlobject, &quot;equals&quot;, &quot;(Ljava/lang/Object;)Z&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Check that GetMethodID for java.lang.String.valueOf(int) fails as the\012 // method is static.\012  method = env_-&gt;GetMethodID(jlstring, &quot;valueOf&quot;, &quot;(I)Ljava/lang/String;&quot;);\012  EXPECT_EQ(nullptr, method);\012 ExpectException(jlnsme);\012\012 // Check that GetMethodID for java.lang.NoSuchMethodError.&lt;init&gt;(String) finds the constructor.\012  method = env_-&gt;GetMethodID(jlnsme, &quot;&lt;init&gt;&quot;, &quot;(Ljava/lang/String;)V&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Check that GetMethodID can find a interface method inherited from another interface.\012  method = env_-&gt;GetMethodID(jncrbc, &quot;close&quot;, &quot;()V&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Bad arguments.\012 GetMethodIdBadArgumentTest(false);\012 GetMethodIdBadArgumentTest(true);\012})<SUB>781</SUB>> ]
+"17292" [label = <(UNKNOWN,TEST_F(JniInternalTest, CallVoidMethodNullReceiver) {\012  jclass jlobject = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  jmethodID method;\012\012 // Check that GetMethodID for java.lang.NoSuchMethodError.&lt;init&gt;(String) finds the constructor.\012  method = env_-&gt;GetMethodID(jlobject, &quot;&lt;init&gt;&quot;, &quot;()V&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Null object to CallVoidMethod.\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  env_-&gt;CallVoidMethod(nullptr, method);\012  check_jni_abort_catcher.Check(&quot;null&quot;);\012},TEST_F(JniInternalTest, CallVoidMethodNullReceiver) {\012  jclass jlobject = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  jmethodID method;\012\012 // Check that GetMethodID for java.lang.NoSuchMethodError.&lt;init&gt;(String) finds the constructor.\012  method = env_-&gt;GetMethodID(jlobject, &quot;&lt;init&gt;&quot;, &quot;()V&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Null object to CallVoidMethod.\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  env_-&gt;CallVoidMethod(nullptr, method);\012  check_jni_abort_catcher.Check(&quot;null&quot;);\012})<SUB>822</SUB>> ]
+"17293" [label = <(UNKNOWN,TEST_F(JniInternalTest, CallVarArgMethodBadPrimitive) {\012 // Check that bad primitive values cause check JNI to abort when\012 // passed out-of-range primitive value var args. As var args can't\012 // differentiate type sizes less than an int, and this isn't\012 // corrected by JNI, this helps ensure JNI code is valid.\012#define DoCall(boxed_type, shorty, c_type, bad_value)                   \\012 {                                                                     \\012    jclass prim_class = env_-&gt;FindClass(&quot;java/lang/&quot; #boxed_type);      \\012    jmethodID method = env_-&gt;GetStaticMethodID(prim_class, &quot;valueOf&quot;,   \\012 &quot;(&quot; #shorty &quot;)Ljava/lang/&quot; #boxed_type &quot;;&quot;); \\012    EXPECT_NE(nullptr, method);                                         \\012    EXPECT_FALSE(env_-&gt;ExceptionCheck());                               \\012 CheckJniAbortCatcher check_jni_abort_catcher;                       \\012    env_-&gt;CallStaticObjectMethod(prim_class, method, bad_value);        \\012    check_jni_abort_catcher.Check(&quot;unexpected &quot; #c_type &quot; value: &quot; #bad_value); \\012 }\012\012 DoCall(Boolean, Z, jboolean, 2);\012 DoCall(Byte, B, jbyte, 128);\012 DoCall(Byte, B, jbyte, -129);\012 DoCall(Short, S, jshort, 32768);\012 DoCall(Short, S, jshort, -32769);\012 DoCall(Character, C, jchar, 65536);\012 DoCall(Character, C, jchar, -1);\012#undef DoCall\012},TEST_F(JniInternalTest, CallVarArgMethodBadPrimitive) {\012 // Check that bad primitive values cause check JNI to abort when\012 // passed out-of-range primitive value var args. As var args can't\012 // differentiate type sizes less than an int, and this isn't\012 // corrected by JNI, this helps ensure JNI code is valid.\012#define DoCall(boxed_type, shorty, c_type, bad_value)                   \\012 {                                                                     \\012    jclass prim_class = env_-&gt;FindClass(&quot;java/lang/&quot; #boxed_type);      \\012    jmethodID method = env_-&gt;GetStaticMethodID(prim_class, &quot;valueOf&quot;,   \\012 &quot;(&quot; #shorty &quot;)Ljava/lang/&quot; #boxed_type &quot;;&quot;); \\012    EXPECT_NE(nullptr, method);                                         \\012    EXPECT_FALSE(env_-&gt;ExceptionCheck());                               \\012 CheckJniAbortCatcher check_jni_abort_catcher;                       \\012    env_-&gt;CallStaticObjectMethod(prim_class, method, bad_value);        \\012    check_jni_abort_catcher.Check(&quot;unexpected &quot; #c_type &quot; value: &quot; #bad_value); \\012 }\012\012 DoCall(Boolean, Z, jboolean, 2);\012 DoCall(Byte, B, jbyte, 128);\012 DoCall(Byte, B, jbyte, -129);\012 DoCall(Short, S, jshort, 32768);\012 DoCall(Short, S, jshort, -32769);\012 DoCall(Character, C, jchar, 65536);\012 DoCall(Character, C, jchar, -1);\012#undef DoCall\012})<SUB>837</SUB>> ]
+"17294" [label = <(UNKNOWN,TEST_F(JniInternalTest, CallJValueMethodBadPrimitive) {\012 // Check that bad primitive values, passed as jvalues, cause check\012 // JNI to abort. Unlike with var args, sizes less than an int should\012 // be truncated or sign extended and not cause an abort except for\012 // jbooleans that are passed as bytes.\012#define DoFailCall(boxed_type, shorty, c_type, bad_value)               \\012 {                                                                     \\012    jclass prim_class = env_-&gt;FindClass(&quot;java/lang/&quot; #boxed_type);      \\012    jmethodID method = env_-&gt;GetStaticMethodID(prim_class, &quot;valueOf&quot;,   \\012 &quot;(&quot; #shorty &quot;)Ljava/lang/&quot; #boxed_type &quot;;&quot;); \\012    EXPECT_NE(nullptr, method);                                         \\012    EXPECT_FALSE(env_-&gt;ExceptionCheck());                               \\012 CheckJniAbortCatcher check_jni_abort_catcher;                       \\012    jvalue jval;                                                        \\012    jval.i = bad_value;                                                 \\012    env_-&gt;CallStaticObjectMethodA(prim_class, method, &amp;jval);           \\012    check_jni_abort_catcher.Check(&quot;unexpected &quot; #c_type &quot; value: &quot; #bad_value); \\012 }\012#define DoGoodCall(boxed_type, shorty, c_type, bad_value)               \\012 {                                                                     \\012    jclass prim_class = env_-&gt;FindClass(&quot;java/lang/&quot; #boxed_type);      \\012    jmethodID method = env_-&gt;GetStaticMethodID(prim_class, &quot;valueOf&quot;,   \\012 &quot;(&quot; #shorty &quot;)Ljava/lang/&quot; #boxed_type &quot;;&quot;); \\012    EXPECT_NE(nullptr, method);                                         \\012    EXPECT_FALSE(env_-&gt;ExceptionCheck());                               \\012    jvalue jval;                                                        \\012    jval.i = bad_value;                                                 \\012    env_-&gt;CallStaticObjectMethodA(prim_class, method, &amp;jval);           \\012 }\012\012 DoFailCall(Boolean, Z, jboolean, 2);\012 DoGoodCall(Byte, B, jbyte, 128);\012 DoGoodCall(Byte, B, jbyte, -129);\012 DoGoodCall(Short, S, jshort, 32768);\012 DoGoodCall(Short, S, jshort, -32769);\012 DoGoodCall(Character, C, jchar, 65536);\012 DoGoodCall(Character, C, jchar, -1);\012#undef DoCall\012},TEST_F(JniInternalTest, CallJValueMethodBadPrimitive) {\012 // Check that bad primitive values, passed as jvalues, cause check\012 // JNI to abort. Unlike with var args, sizes less than an int should\012 // be truncated or sign extended and not cause an abort except for\012 // jbooleans that are passed as bytes.\012#define DoFailCall(boxed_type, shorty, c_type, bad_value)               \\012 {                                                                     \\012    jclass prim_class = env_-&gt;FindClass(&quot;java/lang/&quot; #boxed_type);      \\012    jmethodID method = env_-&gt;GetStaticMethodID(prim_class, &quot;valueOf&quot;,   \\012 &quot;(&quot; #shorty &quot;)Ljava/lang/&quot; #boxed_type &quot;;&quot;); \\012    EXPECT_NE(nullptr, method);                                         \\012    EXPECT_FALSE(env_-&gt;ExceptionCheck());                               \\012 CheckJniAbortCatcher check_jni_abort_catcher;                       \\012    jvalue jval;                                                        \\012    jval.i = bad_value;                                                 \\012    env_-&gt;CallStaticObjectMethodA(prim_class, method, &amp;jval);           \\012    check_jni_abort_catcher.Check(&quot;unexpected &quot; #c_type &quot; value: &quot; #bad_value); \\012 }\012#define DoGoodCall(boxed_type, shorty, c_type, bad_value)               \\012 {                                                                     \\012    jclass prim_class = env_-&gt;FindClass(&quot;java/lang/&quot; #boxed_type);      \\012    jmethodID method = env_-&gt;GetStaticMethodID(prim_class, &quot;valueOf&quot;,   \\012 &quot;(&quot; #shorty &quot;)Ljava/lang/&quot; #boxed_type &quot;;&quot;); \\012    EXPECT_NE(nullptr, method);                                         \\012    EXPECT_FALSE(env_-&gt;ExceptionCheck());                               \\012    jvalue jval;                                                        \\012    jval.i = bad_value;                                                 \\012    env_-&gt;CallStaticObjectMethodA(prim_class, method, &amp;jval);           \\012 }\012\012 DoFailCall(Boolean, Z, jboolean, 2);\012 DoGoodCall(Byte, B, jbyte, 128);\012 DoGoodCall(Byte, B, jbyte, -129);\012 DoGoodCall(Short, S, jshort, 32768);\012 DoGoodCall(Short, S, jshort, -32769);\012 DoGoodCall(Character, C, jchar, 65536);\012 DoGoodCall(Character, C, jchar, -1);\012#undef DoCall\012})<SUB>864</SUB>> ]
+"17295" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetStaticMethodID) {\012  jclass jlobject = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  jclass jlnsme = env_-&gt;FindClass(&quot;java/lang/NoSuchMethodError&quot;);\012\012 // Sanity check that no exceptions are pending\012  ASSERT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Check that java.lang.Object.foo() doesn't exist and NoSuchMethodError is\012 // a pending exception\012  jmethodID method = env_-&gt;GetStaticMethodID(jlobject, &quot;foo&quot;, &quot;()V&quot;);\012  EXPECT_EQ(nullptr, method);\012 ExpectException(jlnsme);\012\012 // Check that GetStaticMethodID for java.lang.Object.equals(Object) fails as\012 // the method is not static\012  method = env_-&gt;GetStaticMethodID(jlobject, &quot;equals&quot;, &quot;(Ljava/lang/Object;)Z&quot;);\012  EXPECT_EQ(nullptr, method);\012 ExpectException(jlnsme);\012\012 // Check that java.lang.String.valueOf(int) does exist\012  jclass jlstring = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  method = env_-&gt;GetStaticMethodID(jlstring, &quot;valueOf&quot;, &quot;(I)Ljava/lang/String;&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Bad arguments.\012 GetStaticMethodIdBadArgumentTest(false);\012 GetStaticMethodIdBadArgumentTest(true);\012},TEST_F(JniInternalTest, GetStaticMethodID) {\012  jclass jlobject = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  jclass jlnsme = env_-&gt;FindClass(&quot;java/lang/NoSuchMethodError&quot;);\012\012 // Sanity check that no exceptions are pending\012  ASSERT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Check that java.lang.Object.foo() doesn't exist and NoSuchMethodError is\012 // a pending exception\012  jmethodID method = env_-&gt;GetStaticMethodID(jlobject, &quot;foo&quot;, &quot;()V&quot;);\012  EXPECT_EQ(nullptr, method);\012 ExpectException(jlnsme);\012\012 // Check that GetStaticMethodID for java.lang.Object.equals(Object) fails as\012 // the method is not static\012  method = env_-&gt;GetStaticMethodID(jlobject, &quot;equals&quot;, &quot;(Ljava/lang/Object;)Z&quot;);\012  EXPECT_EQ(nullptr, method);\012 ExpectException(jlnsme);\012\012 // Check that java.lang.String.valueOf(int) does exist\012  jclass jlstring = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  method = env_-&gt;GetStaticMethodID(jlstring, &quot;valueOf&quot;, &quot;(I)Ljava/lang/String;&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Bad arguments.\012 GetStaticMethodIdBadArgumentTest(false);\012 GetStaticMethodIdBadArgumentTest(true);\012})<SUB>904</SUB>> ]
+"17314" [label = <(UNKNOWN,TEST_F(JniInternalTest, FromReflectedField_ToReflectedField) {\012  jclass jlrField = env_-&gt;FindClass(&quot;java/lang/reflect/Field&quot;);\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012  jfieldID fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;);\012  ASSERT_NE(fid, nullptr);\012 // Turn the fid into a java.lang.reflect.Field...\012  jobject field = env_-&gt;ToReflectedField(c, fid, JNI_FALSE);\012 size_t capacity_before = GetLocalsCapacity(env_);\012 for (size_t i = 0; i &lt;= 10; ++i) {\012 // Regression test for b/18396311, ToReflectedField leaking local refs causing a local\012 // reference table overflows with 512 references to ArtField\012    env_-&gt;DeleteLocalRef(env_-&gt;ToReflectedField(c, fid, JNI_FALSE));\012 }\012 size_t capacity_after = GetLocalsCapacity(env_);\012  ASSERT_EQ(capacity_before, capacity_after);\012\012  ASSERT_NE(c, nullptr);\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(field, jlrField));\012 // ...and back again.\012  jfieldID fid2 = env_-&gt;FromReflectedField(field);\012  ASSERT_NE(fid2, nullptr);\012 // Make sure we can actually use it.\012  jstring s = env_-&gt;NewStringUTF(&quot;poop&quot;);\012 if (mirror::kUseStringCompression) {\012    ASSERT_EQ(mirror::String::GetFlaggedCount(4, /* compressible= */ true),\012              env_-&gt;GetIntField(s, fid2));\012 // Create incompressible string\012    jstring s_16 = env_-&gt;NewStringUTF(&quot;\u0444\u0444&quot;);\012    ASSERT_EQ(mirror::String::GetFlaggedCount(2, /* compressible= */ false),\012              env_-&gt;GetIntField(s_16, fid2));\012 } else {\012    ASSERT_EQ(4, env_-&gt;GetIntField(s, fid2));\012 }\012 // Bad arguments.\012 GetFromReflectedField_ToReflectedFieldBadArgumentTest(false);\012 GetFromReflectedField_ToReflectedFieldBadArgumentTest(true);\012},TEST_F(JniInternalTest, FromReflectedField_ToReflectedField) {\012  jclass jlrField = env_-&gt;FindClass(&quot;java/lang/reflect/Field&quot;);\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012  jfieldID fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;);\012  ASSERT_NE(fid, nullptr);\012 // Turn the fid into a java.lang.reflect.Field...\012  jobject field = env_-&gt;ToReflectedField(c, fid, JNI_FALSE);\012 size_t capacity_before = GetLocalsCapacity(env_);\012 for (size_t i = 0; i &lt;= 10; ++i) {\012 // Regression test for b/18396311, ToReflectedField leaking local refs causing a local\012 // reference table overflows with 512 references to ArtField\012    env_-&gt;DeleteLocalRef(env_-&gt;ToReflectedField(c, fid, JNI_FALSE));\012 }\012 size_t capacity_after = GetLocalsCapacity(env_);\012  ASSERT_EQ(capacity_before, capacity_after);\012\012  ASSERT_NE(c, nullptr);\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(field, jlrField));\012 // ...and back again.\012  jfieldID fid2 = env_-&gt;FromReflectedField(field);\012  ASSERT_NE(fid2, nullptr);\012 // Make sure we can actually use it.\012  jstring s = env_-&gt;NewStringUTF(&quot;poop&quot;);\012 if (mirror::kUseStringCompression) {\012    ASSERT_EQ(mirror::String::GetFlaggedCount(4, /* compressible= */ true),\012              env_-&gt;GetIntField(s, fid2));\012 // Create incompressible string\012    jstring s_16 = env_-&gt;NewStringUTF(&quot;\u0444\u0444&quot;);\012    ASSERT_EQ(mirror::String::GetFlaggedCount(2, /* compressible= */ false),\012              env_-&gt;GetIntField(s_16, fid2));\012 } else {\012    ASSERT_EQ(4, env_-&gt;GetIntField(s, fid2));\012 }\012 // Bad arguments.\012 GetFromReflectedField_ToReflectedFieldBadArgumentTest(false);\012 GetFromReflectedField_ToReflectedFieldBadArgumentTest(true);\012})<SUB>939</SUB>> ]
+"17315" [label = <(UNKNOWN,TEST_F(JniInternalTest, FromReflectedMethod_ToReflectedMethod) {\012  jclass jlrMethod = env_-&gt;FindClass(&quot;java/lang/reflect/Method&quot;);\012  ASSERT_NE(jlrMethod, nullptr);\012  jclass jlrConstructor = env_-&gt;FindClass(&quot;java/lang/reflect/Constructor&quot;);\012  ASSERT_NE(jlrConstructor, nullptr);\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012\012  jmethodID mid = env_-&gt;GetMethodID(c, &quot;&lt;init&gt;&quot;, &quot;()V&quot;);\012  ASSERT_NE(mid, nullptr);\012 // Turn the mid into a java.lang.reflect.Constructor...\012  jobject method = env_-&gt;ToReflectedMethod(c, mid, JNI_FALSE);\012 size_t capacity_before = GetLocalsCapacity(env_);\012 for (size_t i = 0; i &lt;= 10; ++i) {\012 // Regression test for b/18396311, ToReflectedMethod leaking local refs causing a local\012 // reference table overflows with 512 references to ArtMethod\012    env_-&gt;DeleteLocalRef(env_-&gt;ToReflectedMethod(c, mid, JNI_FALSE));\012 }\012 size_t capacity_after = GetLocalsCapacity(env_);\012  ASSERT_EQ(capacity_before, capacity_after);\012  ASSERT_NE(method, nullptr);\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(method, jlrConstructor));\012 // ...and back again.\012  jmethodID mid2 = env_-&gt;FromReflectedMethod(method);\012  ASSERT_NE(mid2, nullptr);\012 // Make sure we can actually use it.\012  jstring s = reinterpret_cast&lt;jstring&gt;(env_-&gt;AllocObject(c));\012  ASSERT_NE(s, nullptr);\012  env_-&gt;CallVoidMethod(s, mid2);\012  ASSERT_EQ(JNI_FALSE, env_-&gt;ExceptionCheck());\012  env_-&gt;ExceptionClear();\012\012  mid = env_-&gt;GetMethodID(c, &quot;length&quot;, &quot;()I&quot;);\012  ASSERT_NE(mid, nullptr);\012 // Turn the mid into a java.lang.reflect.Method...\012  method = env_-&gt;ToReflectedMethod(c, mid, JNI_FALSE);\012  ASSERT_NE(method, nullptr);\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(method, jlrMethod));\012 // ...and back again.\012  mid2 = env_-&gt;FromReflectedMethod(method);\012  ASSERT_NE(mid2, nullptr);\012 // Make sure we can actually use it.\012  s = env_-&gt;NewStringUTF(&quot;poop&quot;);\012  ASSERT_NE(s, nullptr);\012  ASSERT_EQ(4, env_-&gt;CallIntMethod(s, mid2));\012\012 // Bad arguments.\012 GetFromReflectedMethod_ToReflectedMethodBadArgumentTest(false);\012 GetFromReflectedMethod_ToReflectedMethodBadArgumentTest(true);\012},TEST_F(JniInternalTest, FromReflectedMethod_ToReflectedMethod) {\012  jclass jlrMethod = env_-&gt;FindClass(&quot;java/lang/reflect/Method&quot;);\012  ASSERT_NE(jlrMethod, nullptr);\012  jclass jlrConstructor = env_-&gt;FindClass(&quot;java/lang/reflect/Constructor&quot;);\012  ASSERT_NE(jlrConstructor, nullptr);\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012\012  jmethodID mid = env_-&gt;GetMethodID(c, &quot;&lt;init&gt;&quot;, &quot;()V&quot;);\012  ASSERT_NE(mid, nullptr);\012 // Turn the mid into a java.lang.reflect.Constructor...\012  jobject method = env_-&gt;ToReflectedMethod(c, mid, JNI_FALSE);\012 size_t capacity_before = GetLocalsCapacity(env_);\012 for (size_t i = 0; i &lt;= 10; ++i) {\012 // Regression test for b/18396311, ToReflectedMethod leaking local refs causing a local\012 // reference table overflows with 512 references to ArtMethod\012    env_-&gt;DeleteLocalRef(env_-&gt;ToReflectedMethod(c, mid, JNI_FALSE));\012 }\012 size_t capacity_after = GetLocalsCapacity(env_);\012  ASSERT_EQ(capacity_before, capacity_after);\012  ASSERT_NE(method, nullptr);\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(method, jlrConstructor));\012 // ...and back again.\012  jmethodID mid2 = env_-&gt;FromReflectedMethod(method);\012  ASSERT_NE(mid2, nullptr);\012 // Make sure we can actually use it.\012  jstring s = reinterpret_cast&lt;jstring&gt;(env_-&gt;AllocObject(c));\012  ASSERT_NE(s, nullptr);\012  env_-&gt;CallVoidMethod(s, mid2);\012  ASSERT_EQ(JNI_FALSE, env_-&gt;ExceptionCheck());\012  env_-&gt;ExceptionClear();\012\012  mid = env_-&gt;GetMethodID(c, &quot;length&quot;, &quot;()I&quot;);\012  ASSERT_NE(mid, nullptr);\012 // Turn the mid into a java.lang.reflect.Method...\012  method = env_-&gt;ToReflectedMethod(c, mid, JNI_FALSE);\012  ASSERT_NE(method, nullptr);\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(method, jlrMethod));\012 // ...and back again.\012  mid2 = env_-&gt;FromReflectedMethod(method);\012  ASSERT_NE(mid2, nullptr);\012 // Make sure we can actually use it.\012  s = env_-&gt;NewStringUTF(&quot;poop&quot;);\012  ASSERT_NE(s, nullptr);\012  ASSERT_EQ(4, env_-&gt;CallIntMethod(s, mid2));\012\012 // Bad arguments.\012 GetFromReflectedMethod_ToReflectedMethodBadArgumentTest(false);\012 GetFromReflectedMethod_ToReflectedMethodBadArgumentTest(true);\012})<SUB>978</SUB>> ]
+"17320" [label = <(UNKNOWN,TEST_F(JniInternalTest, RegisterAndUnregisterNatives) {\012  jclass jlobject = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  jclass jlnsme = env_-&gt;FindClass(&quot;java/lang/NoSuchMethodError&quot;);\012 void* native_function = reinterpret_cast&lt;void*&gt;(BogusMethod);\012\012 // Sanity check that no exceptions are pending.\012  ASSERT_FALSE(env_-&gt;ExceptionCheck());\012\012 // The following can print errors to the log we'd like to ignore.\012 {\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012 // Check that registering method without name causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { nullptr, &quot;()V&quot;, native_function } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012\012 // Check that registering method without signature causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { &quot;notify&quot;, nullptr, native_function } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012\012 // Check that registering method without function causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { &quot;notify&quot;, &quot;()V&quot;, nullptr } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012\012 // Check that registering to a non-existent java.lang.Object.foo() causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { &quot;foo&quot;, &quot;()V&quot;, native_function } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012\012 // Check that registering non-native methods causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { &quot;equals&quot;, &quot;(Ljava/lang/Object;)Z&quot;, native_function } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012 }\012\012 // Check that registering native methods is successful.\012 {\012 JNINativeMethod methods[] = { { &quot;notify&quot;, &quot;()V&quot;, native_function } };\012    EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_OK);\012 }\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012  EXPECT_EQ(env_-&gt;UnregisterNatives(jlobject), JNI_OK);\012\012 // Check that registering no methods isn't a failure.\012 {\012 JNINativeMethod methods[] = { };\012    EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 0), JNI_OK);\012 }\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012  EXPECT_EQ(env_-&gt;UnregisterNatives(jlobject), JNI_OK);\012\012 // Check that registering a -ve number of methods is a failure.\012 CheckJniAbortCatcher check_jni_abort_catcher;\012 for (int i = -10; i &lt; 0; ++i) {\012 JNINativeMethod methods[] = { };\012    EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, i), JNI_ERR);\012    check_jni_abort_catcher.Check(&quot;negative method count: &quot;);\012 }\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Unregistering a class with no natives is a warning.\012  EXPECT_EQ(env_-&gt;UnregisterNatives(jlnsme), JNI_OK);\012\012 RegisterAndUnregisterNativesBadArguments(false, &amp;check_jni_abort_catcher);\012 RegisterAndUnregisterNativesBadArguments(true, &amp;check_jni_abort_catcher);\012},TEST_F(JniInternalTest, RegisterAndUnregisterNatives) {\012  jclass jlobject = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  jclass jlnsme = env_-&gt;FindClass(&quot;java/lang/NoSuchMethodError&quot;);\012 void* native_function = reinterpret_cast&lt;void*&gt;(BogusMethod);\012\012 // Sanity check that no exceptions are pending.\012  ASSERT_FALSE(env_-&gt;ExceptionCheck());\012\012 // The following can print errors to the log we'd like to ignore.\012 {\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012 // Check that registering method without name causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { nullptr, &quot;()V&quot;, native_function } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012\012 // Check that registering method without signature causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { &quot;notify&quot;, nullptr, native_function } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012\012 // Check that registering method without function causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { &quot;notify&quot;, &quot;()V&quot;, nullptr } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012\012 // Check that registering to a non-existent java.lang.Object.foo() causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { &quot;foo&quot;, &quot;()V&quot;, native_function } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012\012 // Check that registering non-native methods causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { &quot;equals&quot;, &quot;(Ljava/lang/Object;)Z&quot;, native_function } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012 }\012\012 // Check that registering native methods is successful.\012 {\012 JNINativeMethod methods[] = { { &quot;notify&quot;, &quot;()V&quot;, native_function } };\012    EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_OK);\012 }\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012  EXPECT_EQ(env_-&gt;UnregisterNatives(jlobject), JNI_OK);\012\012 // Check that registering no methods isn't a failure.\012 {\012 JNINativeMethod methods[] = { };\012    EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 0), JNI_OK);\012 }\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012  EXPECT_EQ(env_-&gt;UnregisterNatives(jlobject), JNI_OK);\012\012 // Check that registering a -ve number of methods is a failure.\012 CheckJniAbortCatcher check_jni_abort_catcher;\012 for (int i = -10; i &lt; 0; ++i) {\012 JNINativeMethod methods[] = { };\012    EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, i), JNI_ERR);\012    check_jni_abort_catcher.Check(&quot;negative method count: &quot;);\012 }\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Unregistering a class with no natives is a warning.\012  EXPECT_EQ(env_-&gt;UnregisterNatives(jlnsme), JNI_OK);\012\012 RegisterAndUnregisterNativesBadArguments(false, &amp;check_jni_abort_catcher);\012 RegisterAndUnregisterNativesBadArguments(true, &amp;check_jni_abort_catcher);\012})<SUB>1033</SUB>> ]
+"17321" [label = <(UNKNOWN,TEST_F(JniInternalTest, BooleanArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewBooleanArray, GetBooleanArrayRegion, SetBooleanArrayRegion,\012 GetBooleanArrayElements, ReleaseBooleanArrayElements, jboolean, &quot;[Z&quot;);\012},TEST_F(JniInternalTest, BooleanArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewBooleanArray, GetBooleanArrayRegion, SetBooleanArrayRegion,\012 GetBooleanArrayElements, ReleaseBooleanArrayElements, jboolean, &quot;[Z&quot;);\012})<SUB>1224</SUB>> ]
+"17322" [label = <(UNKNOWN,TEST_F(JniInternalTest, ByteArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewByteArray, GetByteArrayRegion, SetByteArrayRegion,\012 GetByteArrayElements, ReleaseByteArrayElements, jbyte, &quot;[B&quot;);\012},TEST_F(JniInternalTest, ByteArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewByteArray, GetByteArrayRegion, SetByteArrayRegion,\012 GetByteArrayElements, ReleaseByteArrayElements, jbyte, &quot;[B&quot;);\012})<SUB>1228</SUB>> ]
+"17323" [label = <(UNKNOWN,TEST_F(JniInternalTest, CharArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewCharArray, GetCharArrayRegion, SetCharArrayRegion,\012 GetCharArrayElements, ReleaseCharArrayElements, jchar, &quot;[C&quot;);\012},TEST_F(JniInternalTest, CharArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewCharArray, GetCharArrayRegion, SetCharArrayRegion,\012 GetCharArrayElements, ReleaseCharArrayElements, jchar, &quot;[C&quot;);\012})<SUB>1232</SUB>> ]
+"17324" [label = <(UNKNOWN,TEST_F(JniInternalTest, DoubleArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewDoubleArray, GetDoubleArrayRegion, SetDoubleArrayRegion,\012 GetDoubleArrayElements, ReleaseDoubleArrayElements, jdouble, &quot;[D&quot;);\012},TEST_F(JniInternalTest, DoubleArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewDoubleArray, GetDoubleArrayRegion, SetDoubleArrayRegion,\012 GetDoubleArrayElements, ReleaseDoubleArrayElements, jdouble, &quot;[D&quot;);\012})<SUB>1236</SUB>> ]
+"17325" [label = <(UNKNOWN,TEST_F(JniInternalTest, FloatArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewFloatArray, GetFloatArrayRegion, SetFloatArrayRegion,\012 GetFloatArrayElements, ReleaseFloatArrayElements, jfloat, &quot;[F&quot;);\012},TEST_F(JniInternalTest, FloatArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewFloatArray, GetFloatArrayRegion, SetFloatArrayRegion,\012 GetFloatArrayElements, ReleaseFloatArrayElements, jfloat, &quot;[F&quot;);\012})<SUB>1240</SUB>> ]
+"17326" [label = <(UNKNOWN,TEST_F(JniInternalTest, IntArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewIntArray, GetIntArrayRegion, SetIntArrayRegion,\012 GetIntArrayElements, ReleaseIntArrayElements, jint, &quot;[I&quot;);\012},TEST_F(JniInternalTest, IntArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewIntArray, GetIntArrayRegion, SetIntArrayRegion,\012 GetIntArrayElements, ReleaseIntArrayElements, jint, &quot;[I&quot;);\012})<SUB>1244</SUB>> ]
+"17327" [label = <(UNKNOWN,TEST_F(JniInternalTest, LongArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewLongArray, GetLongArrayRegion, SetLongArrayRegion,\012 GetLongArrayElements, ReleaseLongArrayElements, jlong, &quot;[J&quot;);\012},TEST_F(JniInternalTest, LongArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewLongArray, GetLongArrayRegion, SetLongArrayRegion,\012 GetLongArrayElements, ReleaseLongArrayElements, jlong, &quot;[J&quot;);\012})<SUB>1248</SUB>> ]
+"17328" [label = <(UNKNOWN,TEST_F(JniInternalTest, ShortArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewShortArray, GetShortArrayRegion, SetShortArrayRegion,\012 GetShortArrayElements, ReleaseShortArrayElements, jshort, &quot;[S&quot;);\012},TEST_F(JniInternalTest, ShortArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewShortArray, GetShortArrayRegion, SetShortArrayRegion,\012 GetShortArrayElements, ReleaseShortArrayElements, jshort, &quot;[S&quot;);\012})<SUB>1252</SUB>> ]
+"17329" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetPrimitiveArrayElementsOfWrongType) {\012 GetPrimitiveArrayElementsOfWrongType(false);\012 GetPrimitiveArrayElementsOfWrongType(true);\012},TEST_F(JniInternalTest, GetPrimitiveArrayElementsOfWrongType) {\012 GetPrimitiveArrayElementsOfWrongType(false);\012 GetPrimitiveArrayElementsOfWrongType(true);\012})<SUB>1257</SUB>> ]
+"17330" [label = <(UNKNOWN,TEST_F(JniInternalTest, ReleasePrimitiveArrayElementsOfWrongType) {\012 ReleasePrimitiveArrayElementsOfWrongType(false);\012 ReleasePrimitiveArrayElementsOfWrongType(true);\012},TEST_F(JniInternalTest, ReleasePrimitiveArrayElementsOfWrongType) {\012 ReleasePrimitiveArrayElementsOfWrongType(false);\012 ReleasePrimitiveArrayElementsOfWrongType(true);\012})<SUB>1262</SUB>> ]
+"17331" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetReleasePrimitiveArrayCriticalOfWrongType) {\012 GetReleasePrimitiveArrayCriticalOfWrongType(false);\012 GetReleasePrimitiveArrayCriticalOfWrongType(true);\012},TEST_F(JniInternalTest, GetReleasePrimitiveArrayCriticalOfWrongType) {\012 GetReleasePrimitiveArrayCriticalOfWrongType(false);\012 GetReleasePrimitiveArrayCriticalOfWrongType(true);\012})<SUB>1267</SUB>> ]
+"17332" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetPrimitiveArrayRegionElementsOfWrongType) {\012 GetPrimitiveArrayRegionElementsOfWrongType(false);\012 GetPrimitiveArrayRegionElementsOfWrongType(true);\012},TEST_F(JniInternalTest, GetPrimitiveArrayRegionElementsOfWrongType) {\012 GetPrimitiveArrayRegionElementsOfWrongType(false);\012 GetPrimitiveArrayRegionElementsOfWrongType(true);\012})<SUB>1272</SUB>> ]
+"17333" [label = <(UNKNOWN,TEST_F(JniInternalTest, SetPrimitiveArrayRegionElementsOfWrongType) {\012 SetPrimitiveArrayRegionElementsOfWrongType(false);\012 SetPrimitiveArrayRegionElementsOfWrongType(true);\012},TEST_F(JniInternalTest, SetPrimitiveArrayRegionElementsOfWrongType) {\012 SetPrimitiveArrayRegionElementsOfWrongType(false);\012 SetPrimitiveArrayRegionElementsOfWrongType(true);\012})<SUB>1277</SUB>> ]
+"17334" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewObjectArray) {\012  jclass element_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(element_class, nullptr);\012  jclass array_class = env_-&gt;FindClass(&quot;[Ljava/lang/String;&quot;);\012  ASSERT_NE(array_class, nullptr);\012\012  jobjectArray a = env_-&gt;NewObjectArray(0, element_class, nullptr);\012  EXPECT_NE(a, nullptr);\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(a, array_class));\012  EXPECT_EQ(0, env_-&gt;GetArrayLength(a));\012\012  a = env_-&gt;NewObjectArray(1, element_class, nullptr);\012  EXPECT_NE(a, nullptr);\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(a, array_class));\012  EXPECT_EQ(1, env_-&gt;GetArrayLength(a));\012  EXPECT_TRUE(env_-&gt;IsSameObject(env_-&gt;GetObjectArrayElement(a, 0), nullptr));\012\012 // Negative array length checks.\012 NewObjectArrayBadArguments(false);\012 NewObjectArrayBadArguments(true);\012},TEST_F(JniInternalTest, NewObjectArray) {\012  jclass element_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(element_class, nullptr);\012  jclass array_class = env_-&gt;FindClass(&quot;[Ljava/lang/String;&quot;);\012  ASSERT_NE(array_class, nullptr);\012\012  jobjectArray a = env_-&gt;NewObjectArray(0, element_class, nullptr);\012  EXPECT_NE(a, nullptr);\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(a, array_class));\012  EXPECT_EQ(0, env_-&gt;GetArrayLength(a));\012\012  a = env_-&gt;NewObjectArray(1, element_class, nullptr);\012  EXPECT_NE(a, nullptr);\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(a, array_class));\012  EXPECT_EQ(1, env_-&gt;GetArrayLength(a));\012  EXPECT_TRUE(env_-&gt;IsSameObject(env_-&gt;GetObjectArrayElement(a, 0), nullptr));\012\012 // Negative array length checks.\012 NewObjectArrayBadArguments(false);\012 NewObjectArrayBadArguments(true);\012})<SUB>1282</SUB>> ]
+"17335" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewObjectArrayWithPrimitiveClasses) {\012 const char* primitive_descriptors = &quot;VZBSCIJFD&quot;;\012 const char* primitive_names[] = {\012 &quot;void&quot;, &quot;boolean&quot;, &quot;byte&quot;, &quot;short&quot;, &quot;char&quot;, &quot;int&quot;, &quot;long&quot;, &quot;float&quot;, &quot;double&quot;\012 };\012  ASSERT_EQ(strlen(primitive_descriptors), arraysize(primitive_names));\012\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 CheckJniAbortCatcher jni_abort_catcher;\012 for (size_t i = 0; i &lt; strlen(primitive_descriptors); ++i) {\012    env_-&gt;NewObjectArray(0, nullptr, nullptr);\012    jni_abort_catcher.Check(&quot;element_jclass == null&quot;);\012    jclass primitive_class = GetPrimitiveClass(primitive_descriptors[i]);\012    env_-&gt;NewObjectArray(1, primitive_class, nullptr);\012    std::string error_msg(StringPrintf(&quot;not an object type: %s&quot;, primitive_names[i]));\012    jni_abort_catcher.Check(error_msg.c_str());\012 }\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012 for (size_t i = 0; i &lt; strlen(primitive_descriptors); ++i) {\012    env_-&gt;NewObjectArray(0, nullptr, nullptr);\012    jni_abort_catcher.Check(&quot;NewObjectArray received NULL jclass&quot;);\012    jclass primitive_class = GetPrimitiveClass(primitive_descriptors[i]);\012    env_-&gt;NewObjectArray(1, primitive_class, nullptr);\012    std::string error_msg(StringPrintf(&quot;not an object type: %s&quot;, primitive_names[i]));\012    jni_abort_catcher.Check(error_msg.c_str());\012 }\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012},TEST_F(JniInternalTest, NewObjectArrayWithPrimitiveClasses) {\012 const char* primitive_descriptors = &quot;VZBSCIJFD&quot;;\012 const char* primitive_names[] = {\012 &quot;void&quot;, &quot;boolean&quot;, &quot;byte&quot;, &quot;short&quot;, &quot;char&quot;, &quot;int&quot;, &quot;long&quot;, &quot;float&quot;, &quot;double&quot;\012 };\012  ASSERT_EQ(strlen(primitive_descriptors), arraysize(primitive_names));\012\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 CheckJniAbortCatcher jni_abort_catcher;\012 for (size_t i = 0; i &lt; strlen(primitive_descriptors); ++i) {\012    env_-&gt;NewObjectArray(0, nullptr, nullptr);\012    jni_abort_catcher.Check(&quot;element_jclass == null&quot;);\012    jclass primitive_class = GetPrimitiveClass(primitive_descriptors[i]);\012    env_-&gt;NewObjectArray(1, primitive_class, nullptr);\012    std::string error_msg(StringPrintf(&quot;not an object type: %s&quot;, primitive_names[i]));\012    jni_abort_catcher.Check(error_msg.c_str());\012 }\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012 for (size_t i = 0; i &lt; strlen(primitive_descriptors); ++i) {\012    env_-&gt;NewObjectArray(0, nullptr, nullptr);\012    jni_abort_catcher.Check(&quot;NewObjectArray received NULL jclass&quot;);\012    jclass primitive_class = GetPrimitiveClass(primitive_descriptors[i]);\012    env_-&gt;NewObjectArray(1, primitive_class, nullptr);\012    std::string error_msg(StringPrintf(&quot;not an object type: %s&quot;, primitive_names[i]));\012    jni_abort_catcher.Check(error_msg.c_str());\012 }\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012})<SUB>1304</SUB>> ]
+"17336" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewObjectArrayWithInitialValue) {\012  jclass element_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(element_class, nullptr);\012  jclass array_class = env_-&gt;FindClass(&quot;[Ljava/lang/String;&quot;);\012  ASSERT_NE(array_class, nullptr);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;poop&quot;);\012  jobjectArray a = env_-&gt;NewObjectArray(2, element_class, s);\012  EXPECT_NE(a, nullptr);\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(a, array_class));\012  EXPECT_EQ(2, env_-&gt;GetArrayLength(a));\012  EXPECT_TRUE(env_-&gt;IsSameObject(env_-&gt;GetObjectArrayElement(a, 0), s));\012  EXPECT_TRUE(env_-&gt;IsSameObject(env_-&gt;GetObjectArrayElement(a, 1), s));\012\012 // Attempt to incorrect create an array of strings with initial value of string arrays.\012 CheckJniAbortCatcher jni_abort_catcher;\012  env_-&gt;NewObjectArray(2, element_class, a);\012  jni_abort_catcher.Check(&quot;cannot assign object of type 'java.lang.String[]' to array with element &quot;\012 &quot;type of 'java.lang.String'&quot;);\012},TEST_F(JniInternalTest, NewObjectArrayWithInitialValue) {\012  jclass element_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(element_class, nullptr);\012  jclass array_class = env_-&gt;FindClass(&quot;[Ljava/lang/String;&quot;);\012  ASSERT_NE(array_class, nullptr);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;poop&quot;);\012  jobjectArray a = env_-&gt;NewObjectArray(2, element_class, s);\012  EXPECT_NE(a, nullptr);\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(a, array_class));\012  EXPECT_EQ(2, env_-&gt;GetArrayLength(a));\012  EXPECT_TRUE(env_-&gt;IsSameObject(env_-&gt;GetObjectArrayElement(a, 0), s));\012  EXPECT_TRUE(env_-&gt;IsSameObject(env_-&gt;GetObjectArrayElement(a, 1), s));\012\012 // Attempt to incorrect create an array of strings with initial value of string arrays.\012 CheckJniAbortCatcher jni_abort_catcher;\012  env_-&gt;NewObjectArray(2, element_class, a);\012  jni_abort_catcher.Check(&quot;cannot assign object of type 'java.lang.String[]' to array with element &quot;\012 &quot;type of 'java.lang.String'&quot;);\012})<SUB>1333</SUB>> ]
+"17337" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetArrayLength) {\012 // Already tested in NewObjectArray/NewPrimitiveArray except for null.\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(0, env_-&gt;GetArrayLength(nullptr));\012  jni_abort_catcher.Check(&quot;java_array == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(JNI_ERR, env_-&gt;GetArrayLength(nullptr));\012  jni_abort_catcher.Check(&quot;jarray was NULL&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012},TEST_F(JniInternalTest, GetArrayLength) {\012 // Already tested in NewObjectArray/NewPrimitiveArray except for null.\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(0, env_-&gt;GetArrayLength(nullptr));\012  jni_abort_catcher.Check(&quot;java_array == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(JNI_ERR, env_-&gt;GetArrayLength(nullptr));\012  jni_abort_catcher.Check(&quot;jarray was NULL&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012})<SUB>1354</SUB>> ]
+"17338" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetObjectClass) {\012  jclass string_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(string_class, nullptr);\012  jclass class_class = env_-&gt;FindClass(&quot;java/lang/Class&quot;);\012  ASSERT_NE(class_class, nullptr);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;poop&quot;);\012  jclass c = env_-&gt;GetObjectClass(s);\012  ASSERT_TRUE(env_-&gt;IsSameObject(string_class, c));\012\012  jclass c2 = env_-&gt;GetObjectClass(c);\012  ASSERT_TRUE(env_-&gt;IsSameObject(class_class, env_-&gt;GetObjectClass(c2)));\012\012 // Null as object should fail.\012 CheckJniAbortCatcher jni_abort_catcher;\012  EXPECT_EQ(env_-&gt;GetObjectClass(nullptr), nullptr);\012  jni_abort_catcher.Check(&quot;java_object == null&quot;);\012},TEST_F(JniInternalTest, GetObjectClass) {\012  jclass string_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(string_class, nullptr);\012  jclass class_class = env_-&gt;FindClass(&quot;java/lang/Class&quot;);\012  ASSERT_NE(class_class, nullptr);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;poop&quot;);\012  jclass c = env_-&gt;GetObjectClass(s);\012  ASSERT_TRUE(env_-&gt;IsSameObject(string_class, c));\012\012  jclass c2 = env_-&gt;GetObjectClass(c);\012  ASSERT_TRUE(env_-&gt;IsSameObject(class_class, env_-&gt;GetObjectClass(c2)));\012\012 // Null as object should fail.\012 CheckJniAbortCatcher jni_abort_catcher;\012  EXPECT_EQ(env_-&gt;GetObjectClass(nullptr), nullptr);\012  jni_abort_catcher.Check(&quot;java_object == null&quot;);\012})<SUB>1366</SUB>> ]
+"17339" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetSuperclass) {\012  jclass object_class = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_NE(object_class, nullptr);\012  jclass string_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(string_class, nullptr);\012  jclass runnable_interface = env_-&gt;FindClass(&quot;java/lang/Runnable&quot;);\012  ASSERT_NE(runnable_interface, nullptr);\012  ASSERT_TRUE(env_-&gt;IsSameObject(object_class, env_-&gt;GetSuperclass(string_class)));\012  ASSERT_EQ(env_-&gt;GetSuperclass(object_class), nullptr);\012  ASSERT_EQ(env_-&gt;GetSuperclass(runnable_interface), nullptr);\012\012 // Null as class should fail.\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(env_-&gt;GetSuperclass(nullptr), nullptr);\012  jni_abort_catcher.Check(&quot;java_class == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(env_-&gt;GetSuperclass(nullptr), nullptr);\012  jni_abort_catcher.Check(&quot;GetSuperclass received NULL jclass&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012},TEST_F(JniInternalTest, GetSuperclass) {\012  jclass object_class = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_NE(object_class, nullptr);\012  jclass string_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(string_class, nullptr);\012  jclass runnable_interface = env_-&gt;FindClass(&quot;java/lang/Runnable&quot;);\012  ASSERT_NE(runnable_interface, nullptr);\012  ASSERT_TRUE(env_-&gt;IsSameObject(object_class, env_-&gt;GetSuperclass(string_class)));\012  ASSERT_EQ(env_-&gt;GetSuperclass(object_class), nullptr);\012  ASSERT_EQ(env_-&gt;GetSuperclass(runnable_interface), nullptr);\012\012 // Null as class should fail.\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(env_-&gt;GetSuperclass(nullptr), nullptr);\012  jni_abort_catcher.Check(&quot;java_class == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(env_-&gt;GetSuperclass(nullptr), nullptr);\012  jni_abort_catcher.Check(&quot;GetSuperclass received NULL jclass&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012})<SUB>1385</SUB>> ]
+"17340" [label = <(UNKNOWN,TEST_F(JniInternalTest, IsAssignableFrom) {\012  jclass object_class = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_NE(object_class, nullptr);\012  jclass string_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(string_class, nullptr);\012\012 // A superclass is assignable from an instance of its\012 // subclass but not vice versa.\012  ASSERT_TRUE(env_-&gt;IsAssignableFrom(string_class, object_class));\012  ASSERT_FALSE(env_-&gt;IsAssignableFrom(object_class, string_class));\012\012  jclass charsequence_interface = env_-&gt;FindClass(&quot;java/lang/CharSequence&quot;);\012  ASSERT_NE(charsequence_interface, nullptr);\012\012 // An interface is assignable from an instance of an implementing\012 // class but not vice versa.\012  ASSERT_TRUE(env_-&gt;IsAssignableFrom(string_class, charsequence_interface));\012  ASSERT_FALSE(env_-&gt;IsAssignableFrom(charsequence_interface, string_class));\012\012 // Check that arrays are covariant.\012  jclass string_array_class = env_-&gt;FindClass(&quot;[Ljava/lang/String;&quot;);\012  ASSERT_NE(string_array_class, nullptr);\012  jclass object_array_class = env_-&gt;FindClass(&quot;[Ljava/lang/Object;&quot;);\012  ASSERT_NE(object_array_class, nullptr);\012  ASSERT_TRUE(env_-&gt;IsAssignableFrom(string_array_class, object_array_class));\012  ASSERT_FALSE(env_-&gt;IsAssignableFrom(object_array_class, string_array_class));\012\012 // Primitive types are tested in 004-JniTest.\012\012 // Null as either class should fail.\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(env_-&gt;IsAssignableFrom(nullptr, string_class), JNI_FALSE);\012  jni_abort_catcher.Check(&quot;java_class1 == null&quot;);\012  EXPECT_EQ(env_-&gt;IsAssignableFrom(object_class, nullptr), JNI_FALSE);\012  jni_abort_catcher.Check(&quot;java_class2 == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(env_-&gt;IsAssignableFrom(nullptr, string_class), JNI_FALSE);\012  jni_abort_catcher.Check(&quot;IsAssignableFrom received NULL jclass&quot;);\012  EXPECT_EQ(env_-&gt;IsAssignableFrom(object_class, nullptr), JNI_FALSE);\012  jni_abort_catcher.Check(&quot;IsAssignableFrom received NULL jclass&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012},TEST_F(JniInternalTest, IsAssignableFrom) {\012  jclass object_class = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_NE(object_class, nullptr);\012  jclass string_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(string_class, nullptr);\012\012 // A superclass is assignable from an instance of its\012 // subclass but not vice versa.\012  ASSERT_TRUE(env_-&gt;IsAssignableFrom(string_class, object_class));\012  ASSERT_FALSE(env_-&gt;IsAssignableFrom(object_class, string_class));\012\012  jclass charsequence_interface = env_-&gt;FindClass(&quot;java/lang/CharSequence&quot;);\012  ASSERT_NE(charsequence_interface, nullptr);\012\012 // An interface is assignable from an instance of an implementing\012 // class but not vice versa.\012  ASSERT_TRUE(env_-&gt;IsAssignableFrom(string_class, charsequence_interface));\012  ASSERT_FALSE(env_-&gt;IsAssignableFrom(charsequence_interface, string_class));\012\012 // Check that arrays are covariant.\012  jclass string_array_class = env_-&gt;FindClass(&quot;[Ljava/lang/String;&quot;);\012  ASSERT_NE(string_array_class, nullptr);\012  jclass object_array_class = env_-&gt;FindClass(&quot;[Ljava/lang/Object;&quot;);\012  ASSERT_NE(object_array_class, nullptr);\012  ASSERT_TRUE(env_-&gt;IsAssignableFrom(string_array_class, object_array_class));\012  ASSERT_FALSE(env_-&gt;IsAssignableFrom(object_array_class, string_array_class));\012\012 // Primitive types are tested in 004-JniTest.\012\012 // Null as either class should fail.\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(env_-&gt;IsAssignableFrom(nullptr, string_class), JNI_FALSE);\012  jni_abort_catcher.Check(&quot;java_class1 == null&quot;);\012  EXPECT_EQ(env_-&gt;IsAssignableFrom(object_class, nullptr), JNI_FALSE);\012  jni_abort_catcher.Check(&quot;java_class2 == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(env_-&gt;IsAssignableFrom(nullptr, string_class), JNI_FALSE);\012  jni_abort_catcher.Check(&quot;IsAssignableFrom received NULL jclass&quot;);\012  EXPECT_EQ(env_-&gt;IsAssignableFrom(object_class, nullptr), JNI_FALSE);\012  jni_abort_catcher.Check(&quot;IsAssignableFrom received NULL jclass&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012})<SUB>1407</SUB>> ]
+"17341" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetObjectRefType) {\012  jclass local = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_TRUE(local != nullptr);\012  EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(local));\012\012  jobject global = env_-&gt;NewGlobalRef(local);\012  EXPECT_EQ(JNIGlobalRefType, env_-&gt;GetObjectRefType(global));\012\012  jweak weak_global = env_-&gt;NewWeakGlobalRef(local);\012  EXPECT_EQ(JNIWeakGlobalRefType, env_-&gt;GetObjectRefType(weak_global));\012\012 {\012 CheckJniAbortCatcher jni_abort_catcher;\012    jobject invalid = reinterpret_cast&lt;jobject&gt;(this);\012    EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(invalid));\012    jni_abort_catcher.Check(&quot;use of invalid jobject&quot;);\012 }\012\012 // TODO: invoke a native method and test that its arguments are considered local references.\012\012 // Null as pointer should not fail and return invalid-ref. b/18820997\012  EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(nullptr));\012\012 // TODO: Null as reference should return the original type.\012 // This requires running a GC so a non-null object gets freed.\012},TEST_F(JniInternalTest, GetObjectRefType) {\012  jclass local = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_TRUE(local != nullptr);\012  EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(local));\012\012  jobject global = env_-&gt;NewGlobalRef(local);\012  EXPECT_EQ(JNIGlobalRefType, env_-&gt;GetObjectRefType(global));\012\012  jweak weak_global = env_-&gt;NewWeakGlobalRef(local);\012  EXPECT_EQ(JNIWeakGlobalRefType, env_-&gt;GetObjectRefType(weak_global));\012\012 {\012 CheckJniAbortCatcher jni_abort_catcher;\012    jobject invalid = reinterpret_cast&lt;jobject&gt;(this);\012    EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(invalid));\012    jni_abort_catcher.Check(&quot;use of invalid jobject&quot;);\012 }\012\012 // TODO: invoke a native method and test that its arguments are considered local references.\012\012 // Null as pointer should not fail and return invalid-ref. b/18820997\012  EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(nullptr));\012\012 // TODO: Null as reference should return the original type.\012 // This requires running a GC so a non-null object gets freed.\012})<SUB>1451</SUB>> ]
+"17342" [label = <(UNKNOWN,TEST_F(JniInternalTest, StaleWeakGlobal) {\012  jclass java_lang_Class = env_-&gt;FindClass(&quot;java/lang/Class&quot;);\012  ASSERT_NE(java_lang_Class, nullptr);\012  jobjectArray local_ref = env_-&gt;NewObjectArray(1, java_lang_Class, nullptr);\012  ASSERT_NE(local_ref, nullptr);\012  jweak weak_global = env_-&gt;NewWeakGlobalRef(local_ref);\012  ASSERT_NE(weak_global, nullptr);\012  env_-&gt;DeleteLocalRef(local_ref);\012 // GC should clear the weak global.\012 Runtime::Current()-&gt;GetHeap()-&gt;CollectGarbage(/* clear_soft_references= */ false);\012  jobject new_global_ref = env_-&gt;NewGlobalRef(weak_global);\012  EXPECT_EQ(new_global_ref, nullptr);\012  jobject new_local_ref = env_-&gt;NewLocalRef(weak_global);\012  EXPECT_EQ(new_local_ref, nullptr);\012},TEST_F(JniInternalTest, StaleWeakGlobal) {\012  jclass java_lang_Class = env_-&gt;FindClass(&quot;java/lang/Class&quot;);\012  ASSERT_NE(java_lang_Class, nullptr);\012  jobjectArray local_ref = env_-&gt;NewObjectArray(1, java_lang_Class, nullptr);\012  ASSERT_NE(local_ref, nullptr);\012  jweak weak_global = env_-&gt;NewWeakGlobalRef(local_ref);\012  ASSERT_NE(weak_global, nullptr);\012  env_-&gt;DeleteLocalRef(local_ref);\012 // GC should clear the weak global.\012 Runtime::Current()-&gt;GetHeap()-&gt;CollectGarbage(/* clear_soft_references= */ false);\012  jobject new_global_ref = env_-&gt;NewGlobalRef(weak_global);\012  EXPECT_EQ(new_global_ref, nullptr);\012  jobject new_local_ref = env_-&gt;NewLocalRef(weak_global);\012  EXPECT_EQ(new_local_ref, nullptr);\012})<SUB>1478</SUB>> ]
+"17343" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewStringUTF) {\012  EXPECT_EQ(env_-&gt;NewStringUTF(nullptr), nullptr);\012  jstring s;\012\012  s = env_-&gt;NewStringUTF(&quot;&quot;);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(0, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(0, env_-&gt;GetStringUTFLength(s));\012  s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(5, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(5, env_-&gt;GetStringUTFLength(s));\012\012 // Encoded surrogate pair.\012  s = env_-&gt;NewStringUTF(&quot;\xed\xa0\x81\xed\xb0\x80&quot;);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(2, env_-&gt;GetStringLength(s));\012\012 // The surrogate pair gets encoded into a 4 byte UTF sequence..\012  EXPECT_EQ(4, env_-&gt;GetStringUTFLength(s));\012 const char* chars = env_-&gt;GetStringUTFChars(s, nullptr);\012  EXPECT_STREQ(&quot;\xf0\x90\x90\x80&quot;, chars);\012  env_-&gt;ReleaseStringUTFChars(s, chars);\012\012 // .. but is stored as is in the utf-16 representation.\012 const jchar* jchars = env_-&gt;GetStringChars(s, nullptr);\012  EXPECT_EQ(0xd801, jchars[0]);\012  EXPECT_EQ(0xdc00, jchars[1]);\012  env_-&gt;ReleaseStringChars(s, jchars);\012\012 // 4 byte UTF sequence appended to an encoded surrogate pair.\012  s = env_-&gt;NewStringUTF(&quot;\xed\xa0\x81\xed\xb0\x80 \xf0\x9f\x8f\xa0&quot;);\012  EXPECT_NE(s, nullptr);\012\012 // The 4 byte sequence {0xf0, 0x9f, 0x8f, 0xa0} is converted into a surrogate\012 // pair {0xd83c, 0xdfe0}.\012  EXPECT_EQ(5, env_-&gt;GetStringLength(s));\012  jchars = env_-&gt;GetStringChars(s, nullptr);\012 // The first surrogate pair, encoded as such in the input.\012  EXPECT_EQ(0xd801, jchars[0]);\012  EXPECT_EQ(0xdc00, jchars[1]);\012 // The second surrogate pair, from the 4 byte UTF sequence in the input.\012  EXPECT_EQ(0xd83c, jchars[3]);\012  EXPECT_EQ(0xdfe0, jchars[4]);\012  env_-&gt;ReleaseStringChars(s, jchars);\012\012  EXPECT_EQ(9, env_-&gt;GetStringUTFLength(s));\012  chars = env_-&gt;GetStringUTFChars(s, nullptr);\012  EXPECT_STREQ(&quot;\xf0\x90\x90\x80 \xf0\x9f\x8f\xa0&quot;, chars);\012  env_-&gt;ReleaseStringUTFChars(s, chars);\012\012 // A string with 1, 2, 3 and 4 byte UTF sequences with spaces\012 // between them\012  s = env_-&gt;NewStringUTF(&quot;\x24 \xc2\xa2 \xe2\x82\xac \xf0\x9f\x8f\xa0&quot;);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(8, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(13, env_-&gt;GetStringUTFLength(s));\012},TEST_F(JniInternalTest, NewStringUTF) {\012  EXPECT_EQ(env_-&gt;NewStringUTF(nullptr), nullptr);\012  jstring s;\012\012  s = env_-&gt;NewStringUTF(&quot;&quot;);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(0, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(0, env_-&gt;GetStringUTFLength(s));\012  s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(5, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(5, env_-&gt;GetStringUTFLength(s));\012\012 // Encoded surrogate pair.\012  s = env_-&gt;NewStringUTF(&quot;\xed\xa0\x81\xed\xb0\x80&quot;);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(2, env_-&gt;GetStringLength(s));\012\012 // The surrogate pair gets encoded into a 4 byte UTF sequence..\012  EXPECT_EQ(4, env_-&gt;GetStringUTFLength(s));\012 const char* chars = env_-&gt;GetStringUTFChars(s, nullptr);\012  EXPECT_STREQ(&quot;\xf0\x90\x90\x80&quot;, chars);\012  env_-&gt;ReleaseStringUTFChars(s, chars);\012\012 // .. but is stored as is in the utf-16 representation.\012 const jchar* jchars = env_-&gt;GetStringChars(s, nullptr);\012  EXPECT_EQ(0xd801, jchars[0]);\012  EXPECT_EQ(0xdc00, jchars[1]);\012  env_-&gt;ReleaseStringChars(s, jchars);\012\012 // 4 byte UTF sequence appended to an encoded surrogate pair.\012  s = env_-&gt;NewStringUTF(&quot;\xed\xa0\x81\xed\xb0\x80 \xf0\x9f\x8f\xa0&quot;);\012  EXPECT_NE(s, nullptr);\012\012 // The 4 byte sequence {0xf0, 0x9f, 0x8f, 0xa0} is converted into a surrogate\012 // pair {0xd83c, 0xdfe0}.\012  EXPECT_EQ(5, env_-&gt;GetStringLength(s));\012  jchars = env_-&gt;GetStringChars(s, nullptr);\012 // The first surrogate pair, encoded as such in the input.\012  EXPECT_EQ(0xd801, jchars[0]);\012  EXPECT_EQ(0xdc00, jchars[1]);\012 // The second surrogate pair, from the 4 byte UTF sequence in the input.\012  EXPECT_EQ(0xd83c, jchars[3]);\012  EXPECT_EQ(0xdfe0, jchars[4]);\012  env_-&gt;ReleaseStringChars(s, jchars);\012\012  EXPECT_EQ(9, env_-&gt;GetStringUTFLength(s));\012  chars = env_-&gt;GetStringUTFChars(s, nullptr);\012  EXPECT_STREQ(&quot;\xf0\x90\x90\x80 \xf0\x9f\x8f\xa0&quot;, chars);\012  env_-&gt;ReleaseStringUTFChars(s, chars);\012\012 // A string with 1, 2, 3 and 4 byte UTF sequences with spaces\012 // between them\012  s = env_-&gt;NewStringUTF(&quot;\x24 \xc2\xa2 \xe2\x82\xac \xf0\x9f\x8f\xa0&quot;);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(8, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(13, env_-&gt;GetStringUTFLength(s));\012})<SUB>1494</SUB>> ]
+"17344" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewString) {\012  jchar chars[] = { 'h', 'i' };\012  jstring s;\012  s = env_-&gt;NewString(chars, 0);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(0, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(0, env_-&gt;GetStringUTFLength(s));\012  s = env_-&gt;NewString(chars, 2);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(2, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(2, env_-&gt;GetStringUTFLength(s));\012\012 // TODO: check some non-ASCII strings.\012},TEST_F(JniInternalTest, NewString) {\012  jchar chars[] = { 'h', 'i' };\012  jstring s;\012  s = env_-&gt;NewString(chars, 0);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(0, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(0, env_-&gt;GetStringUTFLength(s));\012  s = env_-&gt;NewString(chars, 2);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(2, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(2, env_-&gt;GetStringUTFLength(s));\012\012 // TODO: check some non-ASCII strings.\012})<SUB>1553</SUB>> ]
+"17345" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewStringNullCharsZeroLength) {\012  jstring s = env_-&gt;NewString(nullptr, 0);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(0, env_-&gt;GetStringLength(s));\012},TEST_F(JniInternalTest, NewStringNullCharsZeroLength) {\012  jstring s = env_-&gt;NewString(nullptr, 0);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(0, env_-&gt;GetStringLength(s));\012})<SUB>1568</SUB>> ]
+"17346" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewStringNullCharsNonzeroLength) {\012 CheckJniAbortCatcher jni_abort_catcher;\012  env_-&gt;NewString(nullptr, 1);\012  jni_abort_catcher.Check(&quot;chars == null &amp;&amp; char_count &gt; 0&quot;);\012},TEST_F(JniInternalTest, NewStringNullCharsNonzeroLength) {\012 CheckJniAbortCatcher jni_abort_catcher;\012  env_-&gt;NewString(nullptr, 1);\012  jni_abort_catcher.Check(&quot;chars == null &amp;&amp; char_count &gt; 0&quot;);\012})<SUB>1574</SUB>> ]
+"17347" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewStringNegativeLength) {\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  env_-&gt;NewString(nullptr, -1);\012  jni_abort_catcher.Check(&quot;char_count &lt; 0: -1&quot;);\012  env_-&gt;NewString(nullptr, std::numeric_limits&lt;jint&gt;::min());\012  jni_abort_catcher.Check(&quot;char_count &lt; 0: -2147483648&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  env_-&gt;NewString(nullptr, -1);\012  jni_abort_catcher.Check(&quot;negative jsize: -1&quot;);\012  env_-&gt;NewString(nullptr, std::numeric_limits&lt;jint&gt;::min());\012  jni_abort_catcher.Check(&quot;negative jsize: -2147483648&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012},TEST_F(JniInternalTest, NewStringNegativeLength) {\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  env_-&gt;NewString(nullptr, -1);\012  jni_abort_catcher.Check(&quot;char_count &lt; 0: -1&quot;);\012  env_-&gt;NewString(nullptr, std::numeric_limits&lt;jint&gt;::min());\012  jni_abort_catcher.Check(&quot;char_count &lt; 0: -2147483648&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  env_-&gt;NewString(nullptr, -1);\012  jni_abort_catcher.Check(&quot;negative jsize: -1&quot;);\012  env_-&gt;NewString(nullptr, std::numeric_limits&lt;jint&gt;::min());\012  jni_abort_catcher.Check(&quot;negative jsize: -2147483648&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012})<SUB>1580</SUB>> ]
+"17348" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetStringLength_GetStringUTFLength) {\012 // Already tested in the NewString/NewStringUTF tests.\012},TEST_F(JniInternalTest, GetStringLength_GetStringUTFLength) {\012 // Already tested in the NewString/NewStringUTF tests.\012})<SUB>1595</SUB>> ]
+"17349" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetStringRegion_GetStringUTFRegion) {\012  jstring s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012  ASSERT_TRUE(s != nullptr);\012\012  env_-&gt;GetStringRegion(s, -1, 0, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringRegion(s, 0, -1, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringRegion(s, 0, 10, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringRegion(s, 10, 1, nullptr);\012 ExpectException(sioobe_);\012 // Regression test against integer overflow in range check.\012  env_-&gt;GetStringRegion(s, 0x7fffffff, 0x7fffffff, nullptr);\012 ExpectException(sioobe_);\012\012  jchar chars[4] = { 'x', 'x', 'x', 'x' };\012  env_-&gt;GetStringRegion(s, 1, 2, &amp;chars[1]);\012  EXPECT_EQ('x', chars[0]);\012  EXPECT_EQ('e', chars[1]);\012  EXPECT_EQ('l', chars[2]);\012  EXPECT_EQ('x', chars[3]);\012\012 // It's okay for the buffer to be null as long as the length is 0.\012  env_-&gt;GetStringRegion(s, 2, 0, nullptr);\012 // Even if the offset is invalid...\012  env_-&gt;GetStringRegion(s, 123, 0, nullptr);\012 ExpectException(sioobe_);\012\012  env_-&gt;GetStringUTFRegion(s, -1, 0, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringUTFRegion(s, 0, -1, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringUTFRegion(s, 0, 10, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringUTFRegion(s, 10, 1, nullptr);\012 ExpectException(sioobe_);\012 // Regression test against integer overflow in range check.\012  env_-&gt;GetStringUTFRegion(s, 0x7fffffff, 0x7fffffff, nullptr);\012 ExpectException(sioobe_);\012\012 char bytes[4] = { 'x', 'x', 'x', 'x' };\012  env_-&gt;GetStringUTFRegion(s, 1, 2, &amp;bytes[1]);\012  EXPECT_EQ('x', bytes[0]);\012  EXPECT_EQ('e', bytes[1]);\012  EXPECT_EQ('l', bytes[2]);\012  EXPECT_EQ('x', bytes[3]);\012\012 // It's okay for the buffer to be null as long as the length is 0.\012  env_-&gt;GetStringUTFRegion(s, 2, 0, nullptr);\012 // Even if the offset is invalid...\012  env_-&gt;GetStringUTFRegion(s, 123, 0, nullptr);\012 ExpectException(sioobe_);\012},TEST_F(JniInternalTest, GetStringRegion_GetStringUTFRegion) {\012  jstring s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012  ASSERT_TRUE(s != nullptr);\012\012  env_-&gt;GetStringRegion(s, -1, 0, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringRegion(s, 0, -1, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringRegion(s, 0, 10, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringRegion(s, 10, 1, nullptr);\012 ExpectException(sioobe_);\012 // Regression test against integer overflow in range check.\012  env_-&gt;GetStringRegion(s, 0x7fffffff, 0x7fffffff, nullptr);\012 ExpectException(sioobe_);\012\012  jchar chars[4] = { 'x', 'x', 'x', 'x' };\012  env_-&gt;GetStringRegion(s, 1, 2, &amp;chars[1]);\012  EXPECT_EQ('x', chars[0]);\012  EXPECT_EQ('e', chars[1]);\012  EXPECT_EQ('l', chars[2]);\012  EXPECT_EQ('x', chars[3]);\012\012 // It's okay for the buffer to be null as long as the length is 0.\012  env_-&gt;GetStringRegion(s, 2, 0, nullptr);\012 // Even if the offset is invalid...\012  env_-&gt;GetStringRegion(s, 123, 0, nullptr);\012 ExpectException(sioobe_);\012\012  env_-&gt;GetStringUTFRegion(s, -1, 0, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringUTFRegion(s, 0, -1, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringUTFRegion(s, 0, 10, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringUTFRegion(s, 10, 1, nullptr);\012 ExpectException(sioobe_);\012 // Regression test against integer overflow in range check.\012  env_-&gt;GetStringUTFRegion(s, 0x7fffffff, 0x7fffffff, nullptr);\012 ExpectException(sioobe_);\012\012 char bytes[4] = { 'x', 'x', 'x', 'x' };\012  env_-&gt;GetStringUTFRegion(s, 1, 2, &amp;bytes[1]);\012  EXPECT_EQ('x', bytes[0]);\012  EXPECT_EQ('e', bytes[1]);\012  EXPECT_EQ('l', bytes[2]);\012  EXPECT_EQ('x', bytes[3]);\012\012 // It's okay for the buffer to be null as long as the length is 0.\012  env_-&gt;GetStringUTFRegion(s, 2, 0, nullptr);\012 // Even if the offset is invalid...\012  env_-&gt;GetStringUTFRegion(s, 123, 0, nullptr);\012 ExpectException(sioobe_);\012})<SUB>1599</SUB>> ]
+"17350" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetStringUTFChars_ReleaseStringUTFChars) {\012 // Passing in a null jstring is ignored normally, but caught by -Xcheck:jni.\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_EQ(env_-&gt;GetStringUTFChars(nullptr, nullptr), nullptr);\012 }\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012    EXPECT_EQ(env_-&gt;GetStringUTFChars(nullptr, nullptr), nullptr);\012    check_jni_abort_catcher.Check(&quot;GetStringUTFChars received NULL jstring&quot;);\012    EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012 }\012\012  jstring s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012  ASSERT_TRUE(s != nullptr);\012\012 const char* utf = env_-&gt;GetStringUTFChars(s, nullptr);\012  EXPECT_STREQ(&quot;hello&quot;, utf);\012  env_-&gt;ReleaseStringUTFChars(s, utf);\012\012  jboolean is_copy = JNI_FALSE;\012  utf = env_-&gt;GetStringUTFChars(s, &amp;is_copy);\012  EXPECT_EQ(JNI_TRUE, is_copy);\012  EXPECT_STREQ(&quot;hello&quot;, utf);\012  env_-&gt;ReleaseStringUTFChars(s, utf);\012},TEST_F(JniInternalTest, GetStringUTFChars_ReleaseStringUTFChars) {\012 // Passing in a null jstring is ignored normally, but caught by -Xcheck:jni.\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_EQ(env_-&gt;GetStringUTFChars(nullptr, nullptr), nullptr);\012 }\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012    EXPECT_EQ(env_-&gt;GetStringUTFChars(nullptr, nullptr), nullptr);\012    check_jni_abort_catcher.Check(&quot;GetStringUTFChars received NULL jstring&quot;);\012    EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012 }\012\012  jstring s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012  ASSERT_TRUE(s != nullptr);\012\012 const char* utf = env_-&gt;GetStringUTFChars(s, nullptr);\012  EXPECT_STREQ(&quot;hello&quot;, utf);\012  env_-&gt;ReleaseStringUTFChars(s, utf);\012\012  jboolean is_copy = JNI_FALSE;\012  utf = env_-&gt;GetStringUTFChars(s, &amp;is_copy);\012  EXPECT_EQ(JNI_TRUE, is_copy);\012  EXPECT_STREQ(&quot;hello&quot;, utf);\012  env_-&gt;ReleaseStringUTFChars(s, utf);\012})<SUB>1654</SUB>> ]
+"17351" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetStringChars_ReleaseStringChars) {\012  jstring s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012 ScopedObjectAccess soa(env_);\012 ObjPtr&lt;mirror::String&gt; s_m = soa.Decode&lt;mirror::String&gt;(s);\012  ASSERT_TRUE(s != nullptr);\012\012  jchar expected[] = { 'h', 'e', 'l', 'l', 'o' };\012 const jchar* chars = env_-&gt;GetStringChars(s, nullptr);\012  EXPECT_EQ(expected[0], chars[0]);\012  EXPECT_EQ(expected[1], chars[1]);\012  EXPECT_EQ(expected[2], chars[2]);\012  EXPECT_EQ(expected[3], chars[3]);\012  EXPECT_EQ(expected[4], chars[4]);\012  env_-&gt;ReleaseStringChars(s, chars);\012\012  jboolean is_copy = JNI_FALSE;\012  chars = env_-&gt;GetStringChars(s, &amp;is_copy);\012 if (Runtime::Current()-&gt;GetHeap()-&gt;IsMovableObject(s_m)) {\012    EXPECT_EQ(JNI_TRUE, is_copy);\012 } else {\012    EXPECT_EQ(JNI_FALSE, is_copy);\012 }\012  EXPECT_EQ(expected[0], chars[0]);\012  EXPECT_EQ(expected[1], chars[1]);\012  EXPECT_EQ(expected[2], chars[2]);\012  EXPECT_EQ(expected[3], chars[3]);\012  EXPECT_EQ(expected[4], chars[4]);\012  env_-&gt;ReleaseStringChars(s, chars);\012},TEST_F(JniInternalTest, GetStringChars_ReleaseStringChars) {\012  jstring s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012 ScopedObjectAccess soa(env_);\012 ObjPtr&lt;mirror::String&gt; s_m = soa.Decode&lt;mirror::String&gt;(s);\012  ASSERT_TRUE(s != nullptr);\012\012  jchar expected[] = { 'h', 'e', 'l', 'l', 'o' };\012 const jchar* chars = env_-&gt;GetStringChars(s, nullptr);\012  EXPECT_EQ(expected[0], chars[0]);\012  EXPECT_EQ(expected[1], chars[1]);\012  EXPECT_EQ(expected[2], chars[2]);\012  EXPECT_EQ(expected[3], chars[3]);\012  EXPECT_EQ(expected[4], chars[4]);\012  env_-&gt;ReleaseStringChars(s, chars);\012\012  jboolean is_copy = JNI_FALSE;\012  chars = env_-&gt;GetStringChars(s, &amp;is_copy);\012 if (Runtime::Current()-&gt;GetHeap()-&gt;IsMovableObject(s_m)) {\012    EXPECT_EQ(JNI_TRUE, is_copy);\012 } else {\012    EXPECT_EQ(JNI_FALSE, is_copy);\012 }\012  EXPECT_EQ(expected[0], chars[0]);\012  EXPECT_EQ(expected[1], chars[1]);\012  EXPECT_EQ(expected[2], chars[2]);\012  EXPECT_EQ(expected[3], chars[3]);\012  EXPECT_EQ(expected[4], chars[4]);\012  env_-&gt;ReleaseStringChars(s, chars);\012})<SUB>1683</SUB>> ]
+"17352" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetStringCritical_ReleaseStringCritical) {\012  jstring s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012  ASSERT_TRUE(s != nullptr);\012\012  jchar expected[] = { 'h', 'e', 'l', 'l', 'o' };\012 const jchar* chars = env_-&gt;GetStringCritical(s, nullptr);\012  EXPECT_EQ(expected[0], chars[0]);\012  EXPECT_EQ(expected[1], chars[1]);\012  EXPECT_EQ(expected[2], chars[2]);\012  EXPECT_EQ(expected[3], chars[3]);\012  EXPECT_EQ(expected[4], chars[4]);\012  env_-&gt;ReleaseStringCritical(s, chars);\012\012  jboolean is_copy = JNI_TRUE;\012  chars = env_-&gt;GetStringCritical(s, &amp;is_copy);\012 if (mirror::kUseStringCompression) {\012 // is_copy has to be JNI_TRUE because &quot;hello&quot; is all-ASCII\012    EXPECT_EQ(JNI_TRUE, is_copy);\012 } else {\012    EXPECT_EQ(JNI_FALSE, is_copy);\012 }\012  EXPECT_EQ(expected[0], chars[0]);\012  EXPECT_EQ(expected[1], chars[1]);\012  EXPECT_EQ(expected[2], chars[2]);\012  EXPECT_EQ(expected[3], chars[3]);\012  EXPECT_EQ(expected[4], chars[4]);\012  env_-&gt;ReleaseStringCritical(s, chars);\012\012 if (mirror::kUseStringCompression) {\012 // is_copy has to be JNI_FALSE because &quot;\xed\xa0\x81\xed\xb0\x80&quot; is incompressible\012    jboolean is_copy_16 = JNI_TRUE;\012    jstring s_16 = env_-&gt;NewStringUTF(&quot;\xed\xa0\x81\xed\xb0\x80&quot;);\012    chars = env_-&gt;GetStringCritical(s_16, &amp;is_copy_16);\012    EXPECT_EQ(2, env_-&gt;GetStringLength(s_16));\012    EXPECT_EQ(4, env_-&gt;GetStringUTFLength(s_16));\012    env_-&gt;ReleaseStringCritical(s_16, chars);\012 }\012},TEST_F(JniInternalTest, GetStringCritical_ReleaseStringCritical) {\012  jstring s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012  ASSERT_TRUE(s != nullptr);\012\012  jchar expected[] = { 'h', 'e', 'l', 'l', 'o' };\012 const jchar* chars = env_-&gt;GetStringCritical(s, nullptr);\012  EXPECT_EQ(expected[0], chars[0]);\012  EXPECT_EQ(expected[1], chars[1]);\012  EXPECT_EQ(expected[2], chars[2]);\012  EXPECT_EQ(expected[3], chars[3]);\012  EXPECT_EQ(expected[4], chars[4]);\012  env_-&gt;ReleaseStringCritical(s, chars);\012\012  jboolean is_copy = JNI_TRUE;\012  chars = env_-&gt;GetStringCritical(s, &amp;is_copy);\012 if (mirror::kUseStringCompression) {\012 // is_copy has to be JNI_TRUE because &quot;hello&quot; is all-ASCII\012    EXPECT_EQ(JNI_TRUE, is_copy);\012 } else {\012    EXPECT_EQ(JNI_FALSE, is_copy);\012 }\012  EXPECT_EQ(expected[0], chars[0]);\012  EXPECT_EQ(expected[1], chars[1]);\012  EXPECT_EQ(expected[2], chars[2]);\012  EXPECT_EQ(expected[3], chars[3]);\012  EXPECT_EQ(expected[4], chars[4]);\012  env_-&gt;ReleaseStringCritical(s, chars);\012\012 if (mirror::kUseStringCompression) {\012 // is_copy has to be JNI_FALSE because &quot;\xed\xa0\x81\xed\xb0\x80&quot; is incompressible\012    jboolean is_copy_16 = JNI_TRUE;\012    jstring s_16 = env_-&gt;NewStringUTF(&quot;\xed\xa0\x81\xed\xb0\x80&quot;);\012    chars = env_-&gt;GetStringCritical(s_16, &amp;is_copy_16);\012    EXPECT_EQ(2, env_-&gt;GetStringLength(s_16));\012    EXPECT_EQ(4, env_-&gt;GetStringUTFLength(s_16));\012    env_-&gt;ReleaseStringCritical(s_16, chars);\012 }\012})<SUB>1713</SUB>> ]
+"17353" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetObjectArrayElement_SetObjectArrayElement) {\012  jclass java_lang_Class = env_-&gt;FindClass(&quot;java/lang/Class&quot;);\012  ASSERT_TRUE(java_lang_Class != nullptr);\012\012  jobjectArray array = env_-&gt;NewObjectArray(1, java_lang_Class, nullptr);\012  EXPECT_NE(array, nullptr);\012  EXPECT_EQ(env_-&gt;GetObjectArrayElement(array, 0), nullptr);\012  env_-&gt;SetObjectArrayElement(array, 0, java_lang_Class);\012  EXPECT_TRUE(env_-&gt;IsSameObject(env_-&gt;GetObjectArrayElement(array, 0), java_lang_Class));\012\012 // ArrayIndexOutOfBounds for negative index.\012  env_-&gt;SetObjectArrayElement(array, -1, java_lang_Class);\012 ExpectException(aioobe_);\012\012 // ArrayIndexOutOfBounds for too-large index.\012  env_-&gt;SetObjectArrayElement(array, 1, java_lang_Class);\012 ExpectException(aioobe_);\012\012 // ArrayStoreException thrown for bad types.\012  env_-&gt;SetObjectArrayElement(array, 0, env_-&gt;NewStringUTF(&quot;not a jclass!&quot;));\012 ExpectException(ase_);\012\012 // Null as array should fail.\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(nullptr, env_-&gt;GetObjectArrayElement(nullptr, 0));\012  jni_abort_catcher.Check(&quot;java_array == null&quot;);\012  env_-&gt;SetObjectArrayElement(nullptr, 0, nullptr);\012  jni_abort_catcher.Check(&quot;java_array == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(nullptr, env_-&gt;GetObjectArrayElement(nullptr, 0));\012  jni_abort_catcher.Check(&quot;jarray was NULL&quot;);\012  env_-&gt;SetObjectArrayElement(nullptr, 0, nullptr);\012  jni_abort_catcher.Check(&quot;jarray was NULL&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012},TEST_F(JniInternalTest, GetObjectArrayElement_SetObjectArrayElement) {\012  jclass java_lang_Class = env_-&gt;FindClass(&quot;java/lang/Class&quot;);\012  ASSERT_TRUE(java_lang_Class != nullptr);\012\012  jobjectArray array = env_-&gt;NewObjectArray(1, java_lang_Class, nullptr);\012  EXPECT_NE(array, nullptr);\012  EXPECT_EQ(env_-&gt;GetObjectArrayElement(array, 0), nullptr);\012  env_-&gt;SetObjectArrayElement(array, 0, java_lang_Class);\012  EXPECT_TRUE(env_-&gt;IsSameObject(env_-&gt;GetObjectArrayElement(array, 0), java_lang_Class));\012\012 // ArrayIndexOutOfBounds for negative index.\012  env_-&gt;SetObjectArrayElement(array, -1, java_lang_Class);\012 ExpectException(aioobe_);\012\012 // ArrayIndexOutOfBounds for too-large index.\012  env_-&gt;SetObjectArrayElement(array, 1, java_lang_Class);\012 ExpectException(aioobe_);\012\012 // ArrayStoreException thrown for bad types.\012  env_-&gt;SetObjectArrayElement(array, 0, env_-&gt;NewStringUTF(&quot;not a jclass!&quot;));\012 ExpectException(ase_);\012\012 // Null as array should fail.\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(nullptr, env_-&gt;GetObjectArrayElement(nullptr, 0));\012  jni_abort_catcher.Check(&quot;java_array == null&quot;);\012  env_-&gt;SetObjectArrayElement(nullptr, 0, nullptr);\012  jni_abort_catcher.Check(&quot;java_array == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(nullptr, env_-&gt;GetObjectArrayElement(nullptr, 0));\012  jni_abort_catcher.Check(&quot;jarray was NULL&quot;);\012  env_-&gt;SetObjectArrayElement(nullptr, 0, nullptr);\012  jni_abort_catcher.Check(&quot;jarray was NULL&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012})<SUB>1752</SUB>> ]
+"17354" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetPrimitiveField_SetPrimitiveField) {\012  TEST_PRIMITIVE_FIELD_FOR_CLASS(&quot;AllFields&quot;);\012},TEST_F(JniInternalTest, GetPrimitiveField_SetPrimitiveField) {\012  TEST_PRIMITIVE_FIELD_FOR_CLASS(&quot;AllFields&quot;);\012})<SUB>1883</SUB>> ]
+"17355" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetPrimitiveField_SetPrimitiveField_Subclass) {\012  TEST_PRIMITIVE_FIELD_FOR_CLASS(&quot;AllFieldsSub&quot;);\012},TEST_F(JniInternalTest, GetPrimitiveField_SetPrimitiveField_Subclass) {\012  TEST_PRIMITIVE_FIELD_FOR_CLASS(&quot;AllFieldsSub&quot;);\012})<SUB>1887</SUB>> ]
+"17356" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetField_SetField_unrelated) {\012 Thread::Current()-&gt;TransitionFromSuspendedToRunnable();\012 LoadDex(&quot;AllFields&quot;);\012 bool started = runtime_-&gt;Start();\012  ASSERT_TRUE(started);\012  jclass c = env_-&gt;FindClass(&quot;AllFields&quot;);\012  ASSERT_NE(c, nullptr);\012  jclass uc = env_-&gt;FindClass(&quot;AllFieldsUnrelated&quot;);\012  ASSERT_NE(uc, nullptr);\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(true);\012  EXPECT_UNRELATED_FIELD_FAILURE(Boolean, &quot;sZ&quot;, &quot;Z&quot;, JNI_TRUE);\012  EXPECT_UNRELATED_FIELD_FAILURE(Byte, &quot;sB&quot;, &quot;B&quot;, 1);\012  EXPECT_UNRELATED_FIELD_FAILURE(Char, &quot;sC&quot;, &quot;C&quot;, 'a');\012  EXPECT_UNRELATED_FIELD_FAILURE(Double, &quot;sD&quot;, &quot;D&quot;, 1.0);\012  EXPECT_UNRELATED_FIELD_FAILURE(Float, &quot;sF&quot;, &quot;F&quot;, 1.0);\012  EXPECT_UNRELATED_FIELD_FAILURE(Int, &quot;sI&quot;, &quot;I&quot;, 1);\012  EXPECT_UNRELATED_FIELD_FAILURE(Long, &quot;sJ&quot;, &quot;J&quot;, 1);\012  EXPECT_UNRELATED_FIELD_FAILURE(Short, &quot;sS&quot;, &quot;S&quot;, 1);\012  EXPECT_UNRELATED_FIELD_FAILURE(Object, &quot;sObject&quot;, &quot;Ljava/lang/Object;&quot;, c);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012},TEST_F(JniInternalTest, GetField_SetField_unrelated) {\012 Thread::Current()-&gt;TransitionFromSuspendedToRunnable();\012 LoadDex(&quot;AllFields&quot;);\012 bool started = runtime_-&gt;Start();\012  ASSERT_TRUE(started);\012  jclass c = env_-&gt;FindClass(&quot;AllFields&quot;);\012  ASSERT_NE(c, nullptr);\012  jclass uc = env_-&gt;FindClass(&quot;AllFieldsUnrelated&quot;);\012  ASSERT_NE(uc, nullptr);\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(true);\012  EXPECT_UNRELATED_FIELD_FAILURE(Boolean, &quot;sZ&quot;, &quot;Z&quot;, JNI_TRUE);\012  EXPECT_UNRELATED_FIELD_FAILURE(Byte, &quot;sB&quot;, &quot;B&quot;, 1);\012  EXPECT_UNRELATED_FIELD_FAILURE(Char, &quot;sC&quot;, &quot;C&quot;, 'a');\012  EXPECT_UNRELATED_FIELD_FAILURE(Double, &quot;sD&quot;, &quot;D&quot;, 1.0);\012  EXPECT_UNRELATED_FIELD_FAILURE(Float, &quot;sF&quot;, &quot;F&quot;, 1.0);\012  EXPECT_UNRELATED_FIELD_FAILURE(Int, &quot;sI&quot;, &quot;I&quot;, 1);\012  EXPECT_UNRELATED_FIELD_FAILURE(Long, &quot;sJ&quot;, &quot;J&quot;, 1);\012  EXPECT_UNRELATED_FIELD_FAILURE(Short, &quot;sS&quot;, &quot;S&quot;, 1);\012  EXPECT_UNRELATED_FIELD_FAILURE(Object, &quot;sObject&quot;, &quot;Ljava/lang/Object;&quot;, c);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012})<SUB>1902</SUB>> ]
+"17357" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetObjectField_SetObjectField) {\012  TEST_OBJECT_FIELD_FOR_CLASS(&quot;AllFields&quot;);\012},TEST_F(JniInternalTest, GetObjectField_SetObjectField) {\012  TEST_OBJECT_FIELD_FOR_CLASS(&quot;AllFields&quot;);\012})<SUB>1956</SUB>> ]
+"17358" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetObjectField_SetObjectField_subclass) {\012  TEST_OBJECT_FIELD_FOR_CLASS(&quot;AllFieldsSub&quot;);\012},TEST_F(JniInternalTest, GetObjectField_SetObjectField_subclass) {\012  TEST_OBJECT_FIELD_FOR_CLASS(&quot;AllFieldsSub&quot;);\012})<SUB>1960</SUB>> ]
+"17359" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewLocalRef_nullptr) {\012  EXPECT_EQ(env_-&gt;NewLocalRef(nullptr), nullptr);\012},TEST_F(JniInternalTest, NewLocalRef_nullptr) {\012  EXPECT_EQ(env_-&gt;NewLocalRef(nullptr), nullptr);\012})<SUB>1964</SUB>> ]
+"17360" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewLocalRef) {\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  jobject o = env_-&gt;NewLocalRef(s);\012  EXPECT_NE(o, nullptr);\012  EXPECT_NE(o, s);\012\012  EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(o));\012},TEST_F(JniInternalTest, NewLocalRef) {\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  jobject o = env_-&gt;NewLocalRef(s);\012  EXPECT_NE(o, nullptr);\012  EXPECT_NE(o, s);\012\012  EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(o));\012})<SUB>1968</SUB>> ]
+"17361" [label = <(UNKNOWN,TEST_F(JniInternalTest, DeleteLocalRef_nullptr) {\012  env_-&gt;DeleteLocalRef(nullptr);\012},TEST_F(JniInternalTest, DeleteLocalRef_nullptr) {\012  env_-&gt;DeleteLocalRef(nullptr);\012})<SUB>1978</SUB>> ]
+"17362" [label = <(UNKNOWN,TEST_F(JniInternalTest, DeleteLocalRef) {\012 // This tests leads to warnings and errors in the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  env_-&gt;DeleteLocalRef(s);\012\012 // Currently, deleting an already-deleted reference is just a CheckJNI warning.\012 {\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      env_-&gt;DeleteLocalRef(s);\012 }\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012    env_-&gt;DeleteLocalRef(s);\012    std::string expected(StringPrintf(&quot;use of deleted local reference %p&quot;, s));\012    check_jni_abort_catcher.Check(expected.c_str());\012    EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012 }\012\012  s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  jobject o = env_-&gt;NewLocalRef(s);\012  ASSERT_NE(o, nullptr);\012\012  env_-&gt;DeleteLocalRef(s);\012  env_-&gt;DeleteLocalRef(o);\012},TEST_F(JniInternalTest, DeleteLocalRef) {\012 // This tests leads to warnings and errors in the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  env_-&gt;DeleteLocalRef(s);\012\012 // Currently, deleting an already-deleted reference is just a CheckJNI warning.\012 {\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      env_-&gt;DeleteLocalRef(s);\012 }\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012    env_-&gt;DeleteLocalRef(s);\012    std::string expected(StringPrintf(&quot;use of deleted local reference %p&quot;, s));\012    check_jni_abort_catcher.Check(expected.c_str());\012    EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012 }\012\012  s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  jobject o = env_-&gt;NewLocalRef(s);\012  ASSERT_NE(o, nullptr);\012\012  env_-&gt;DeleteLocalRef(s);\012  env_-&gt;DeleteLocalRef(o);\012})<SUB>1982</SUB>> ]
+"17363" [label = <(UNKNOWN,TEST_F(JniInternalTest, PushLocalFrame_10395422) {\012 // The JNI specification is ambiguous about whether the given capacity is to be interpreted as a\012 // maximum or as a minimum, but it seems like it's supposed to be a minimum, and that's how\012 // Android historically treated it, and it's how the RI treats it. It's also the more useful\012 // interpretation!\012  ASSERT_EQ(JNI_OK, env_-&gt;PushLocalFrame(0));\012  env_-&gt;PopLocalFrame(nullptr);\012\012 // The following two tests will print errors to the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012 // Negative capacities are not allowed.\012  ASSERT_EQ(JNI_ERR, env_-&gt;PushLocalFrame(-1));\012},TEST_F(JniInternalTest, PushLocalFrame_10395422) {\012 // The JNI specification is ambiguous about whether the given capacity is to be interpreted as a\012 // maximum or as a minimum, but it seems like it's supposed to be a minimum, and that's how\012 // Android historically treated it, and it's how the RI treats it. It's also the more useful\012 // interpretation!\012  ASSERT_EQ(JNI_OK, env_-&gt;PushLocalFrame(0));\012  env_-&gt;PopLocalFrame(nullptr);\012\012 // The following two tests will print errors to the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012 // Negative capacities are not allowed.\012  ASSERT_EQ(JNI_ERR, env_-&gt;PushLocalFrame(-1));\012})<SUB>2014</SUB>> ]
+"17364" [label = <(UNKNOWN,TEST_F(JniInternalTest, PushLocalFrame_PopLocalFrame) {\012 // This tests leads to errors in the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012  jobject original = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(original, nullptr);\012\012  jobject outer;\012  jobject inner1, inner2;\012 ScopedObjectAccess soa(env_);\012 {\012    ASSERT_EQ(JNI_OK, env_-&gt;PushLocalFrame(4));\012    outer = env_-&gt;NewLocalRef(original);\012\012 {\012      ASSERT_EQ(JNI_OK, env_-&gt;PushLocalFrame(4));\012      inner1 = env_-&gt;NewLocalRef(outer);\012      inner2 = env_-&gt;NewStringUTF(&quot;survivor&quot;);\012      EXPECT_NE(env_-&gt;PopLocalFrame(inner2), nullptr);\012 }\012\012    EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(original));\012    EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(outer));\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(inner1));\012      check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012 }\012\012 // Our local reference for the survivor is invalid because the survivor\012 // gets a new local reference...\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(inner2));\012      check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012 }\012\012    EXPECT_EQ(env_-&gt;PopLocalFrame(nullptr), nullptr);\012 }\012  EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(original));\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(outer));\012  check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012  EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(inner1));\012  check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012  EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(inner2));\012  check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012},TEST_F(JniInternalTest, PushLocalFrame_PopLocalFrame) {\012 // This tests leads to errors in the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012  jobject original = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(original, nullptr);\012\012  jobject outer;\012  jobject inner1, inner2;\012 ScopedObjectAccess soa(env_);\012 {\012    ASSERT_EQ(JNI_OK, env_-&gt;PushLocalFrame(4));\012    outer = env_-&gt;NewLocalRef(original);\012\012 {\012      ASSERT_EQ(JNI_OK, env_-&gt;PushLocalFrame(4));\012      inner1 = env_-&gt;NewLocalRef(outer);\012      inner2 = env_-&gt;NewStringUTF(&quot;survivor&quot;);\012      EXPECT_NE(env_-&gt;PopLocalFrame(inner2), nullptr);\012 }\012\012    EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(original));\012    EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(outer));\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(inner1));\012      check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012 }\012\012 // Our local reference for the survivor is invalid because the survivor\012 // gets a new local reference...\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(inner2));\012      check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012 }\012\012    EXPECT_EQ(env_-&gt;PopLocalFrame(nullptr), nullptr);\012 }\012  EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(original));\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(outer));\012  check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012  EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(inner1));\012  check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012  EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(inner2));\012  check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012})<SUB>2029</SUB>> ]
+"17365" [label = <(UNKNOWN,TEST_F(JniInternalTest, PushLocalFrame_LimitAndOverflow) {\012 // Try a very large value that should fail.\012  ASSERT_NE(JNI_OK, env_-&gt;PushLocalFrame(std::numeric_limits&lt;jint&gt;::max()));\012  ASSERT_TRUE(env_-&gt;ExceptionCheck());\012  env_-&gt;ExceptionClear();\012\012 // On 32-bit, also check for some overflow conditions.\012#ifndef __LP64__\012  ASSERT_EQ(JNI_OK, env_-&gt;PushLocalFrame(10));\012  ASSERT_NE(JNI_OK, env_-&gt;PushLocalFrame(std::numeric_limits&lt;jint&gt;::max() - 10));\012  ASSERT_TRUE(env_-&gt;ExceptionCheck());\012  env_-&gt;ExceptionClear();\012  EXPECT_EQ(env_-&gt;PopLocalFrame(nullptr), nullptr);\012#endif\012},TEST_F(JniInternalTest, PushLocalFrame_LimitAndOverflow) {\012 // Try a very large value that should fail.\012  ASSERT_NE(JNI_OK, env_-&gt;PushLocalFrame(std::numeric_limits&lt;jint&gt;::max()));\012  ASSERT_TRUE(env_-&gt;ExceptionCheck());\012  env_-&gt;ExceptionClear();\012\012 // On 32-bit, also check for some overflow conditions.\012#ifndef __LP64__\012  ASSERT_EQ(JNI_OK, env_-&gt;PushLocalFrame(10));\012  ASSERT_NE(JNI_OK, env_-&gt;PushLocalFrame(std::numeric_limits&lt;jint&gt;::max() - 10));\012  ASSERT_TRUE(env_-&gt;ExceptionCheck());\012  env_-&gt;ExceptionClear();\012  EXPECT_EQ(env_-&gt;PopLocalFrame(nullptr), nullptr);\012#endif\012})<SUB>2078</SUB>> ]
+"17366" [label = <(UNKNOWN,TEST_F(JniInternalTest, PushLocalFrame_b62223672) {\012 // The 512 entry limit has been lifted, try a larger value.\012  ASSERT_EQ(JNI_OK, env_-&gt;PushLocalFrame(1024));\012  EXPECT_EQ(env_-&gt;PopLocalFrame(nullptr), nullptr);\012},TEST_F(JniInternalTest, PushLocalFrame_b62223672) {\012 // The 512 entry limit has been lifted, try a larger value.\012  ASSERT_EQ(JNI_OK, env_-&gt;PushLocalFrame(1024));\012  EXPECT_EQ(env_-&gt;PopLocalFrame(nullptr), nullptr);\012})<SUB>2094</SUB>> ]
+"17367" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewGlobalRef_nullptr) {\012  EXPECT_EQ(env_-&gt;NewGlobalRef(nullptr), nullptr);\012},TEST_F(JniInternalTest, NewGlobalRef_nullptr) {\012  EXPECT_EQ(env_-&gt;NewGlobalRef(nullptr), nullptr);\012})<SUB>2100</SUB>> ]
+"17368" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewGlobalRef) {\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  jobject o = env_-&gt;NewGlobalRef(s);\012  EXPECT_NE(o, nullptr);\012  EXPECT_NE(o, s);\012\012  EXPECT_EQ(env_-&gt;GetObjectRefType(o), JNIGlobalRefType);\012},TEST_F(JniInternalTest, NewGlobalRef) {\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  jobject o = env_-&gt;NewGlobalRef(s);\012  EXPECT_NE(o, nullptr);\012  EXPECT_NE(o, s);\012\012  EXPECT_EQ(env_-&gt;GetObjectRefType(o), JNIGlobalRefType);\012})<SUB>2104</SUB>> ]
+"17369" [label = <(UNKNOWN,TEST_F(JniInternalTest, DeleteGlobalRef_nullptr) {\012  env_-&gt;DeleteGlobalRef(nullptr);\012},TEST_F(JniInternalTest, DeleteGlobalRef_nullptr) {\012  env_-&gt;DeleteGlobalRef(nullptr);\012})<SUB>2114</SUB>> ]
+"17370" [label = <(UNKNOWN,TEST_F(JniInternalTest, DeleteGlobalRef) {\012 // This tests leads to warnings and errors in the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012\012  jobject o = env_-&gt;NewGlobalRef(s);\012  ASSERT_NE(o, nullptr);\012  env_-&gt;DeleteGlobalRef(o);\012\012 // Currently, deleting an already-deleted reference is just a CheckJNI warning.\012 {\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      env_-&gt;DeleteGlobalRef(o);\012 }\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012    env_-&gt;DeleteGlobalRef(o);\012    std::string expected(StringPrintf(&quot;use of deleted global reference %p&quot;, o));\012    check_jni_abort_catcher.Check(expected.c_str());\012    EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012 }\012\012  jobject o1 = env_-&gt;NewGlobalRef(s);\012  ASSERT_NE(o1, nullptr);\012  jobject o2 = env_-&gt;NewGlobalRef(s);\012  ASSERT_NE(o2, nullptr);\012\012  env_-&gt;DeleteGlobalRef(o1);\012  env_-&gt;DeleteGlobalRef(o2);\012},TEST_F(JniInternalTest, DeleteGlobalRef) {\012 // This tests leads to warnings and errors in the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012\012  jobject o = env_-&gt;NewGlobalRef(s);\012  ASSERT_NE(o, nullptr);\012  env_-&gt;DeleteGlobalRef(o);\012\012 // Currently, deleting an already-deleted reference is just a CheckJNI warning.\012 {\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      env_-&gt;DeleteGlobalRef(o);\012 }\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012    env_-&gt;DeleteGlobalRef(o);\012    std::string expected(StringPrintf(&quot;use of deleted global reference %p&quot;, o));\012    check_jni_abort_catcher.Check(expected.c_str());\012    EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012 }\012\012  jobject o1 = env_-&gt;NewGlobalRef(s);\012  ASSERT_NE(o1, nullptr);\012  jobject o2 = env_-&gt;NewGlobalRef(s);\012  ASSERT_NE(o2, nullptr);\012\012  env_-&gt;DeleteGlobalRef(o1);\012  env_-&gt;DeleteGlobalRef(o2);\012})<SUB>2118</SUB>> ]
+"17371" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewWeakGlobalRef_nullptr) {\012  EXPECT_EQ(env_-&gt;NewWeakGlobalRef(nullptr), nullptr);\012},TEST_F(JniInternalTest, NewWeakGlobalRef_nullptr) {\012  EXPECT_EQ(env_-&gt;NewWeakGlobalRef(nullptr), nullptr);\012})<SUB>2153</SUB>> ]
+"17372" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewWeakGlobalRef) {\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  jobject o = env_-&gt;NewWeakGlobalRef(s);\012  EXPECT_NE(o, nullptr);\012  EXPECT_NE(o, s);\012\012  EXPECT_EQ(env_-&gt;GetObjectRefType(o), JNIWeakGlobalRefType);\012},TEST_F(JniInternalTest, NewWeakGlobalRef) {\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  jobject o = env_-&gt;NewWeakGlobalRef(s);\012  EXPECT_NE(o, nullptr);\012  EXPECT_NE(o, s);\012\012  EXPECT_EQ(env_-&gt;GetObjectRefType(o), JNIWeakGlobalRefType);\012})<SUB>2157</SUB>> ]
+"17373" [label = <(UNKNOWN,TEST_F(JniInternalTest, DeleteWeakGlobalRef_nullptr) {\012  env_-&gt;DeleteWeakGlobalRef(nullptr);\012},TEST_F(JniInternalTest, DeleteWeakGlobalRef_nullptr) {\012  env_-&gt;DeleteWeakGlobalRef(nullptr);\012})<SUB>2167</SUB>> ]
+"17374" [label = <(UNKNOWN,TEST_F(JniInternalTest, DeleteWeakGlobalRef) {\012 // This tests leads to warnings and errors in the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012\012  jobject o = env_-&gt;NewWeakGlobalRef(s);\012  ASSERT_NE(o, nullptr);\012  env_-&gt;DeleteWeakGlobalRef(o);\012\012 // Currently, deleting an already-deleted reference is just a CheckJNI warning.\012 {\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      env_-&gt;DeleteWeakGlobalRef(o);\012 }\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012    env_-&gt;DeleteWeakGlobalRef(o);\012    std::string expected(StringPrintf(&quot;use of deleted weak global reference %p&quot;, o));\012    check_jni_abort_catcher.Check(expected.c_str());\012    EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012 }\012\012  jobject o1 = env_-&gt;NewWeakGlobalRef(s);\012  ASSERT_NE(o1, nullptr);\012  jobject o2 = env_-&gt;NewWeakGlobalRef(s);\012  ASSERT_NE(o2, nullptr);\012\012  env_-&gt;DeleteWeakGlobalRef(o1);\012  env_-&gt;DeleteWeakGlobalRef(o2);\012},TEST_F(JniInternalTest, DeleteWeakGlobalRef) {\012 // This tests leads to warnings and errors in the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012\012  jobject o = env_-&gt;NewWeakGlobalRef(s);\012  ASSERT_NE(o, nullptr);\012  env_-&gt;DeleteWeakGlobalRef(o);\012\012 // Currently, deleting an already-deleted reference is just a CheckJNI warning.\012 {\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      env_-&gt;DeleteWeakGlobalRef(o);\012 }\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012    env_-&gt;DeleteWeakGlobalRef(o);\012    std::string expected(StringPrintf(&quot;use of deleted weak global reference %p&quot;, o));\012    check_jni_abort_catcher.Check(expected.c_str());\012    EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012 }\012\012  jobject o1 = env_-&gt;NewWeakGlobalRef(s);\012  ASSERT_NE(o1, nullptr);\012  jobject o2 = env_-&gt;NewWeakGlobalRef(s);\012  ASSERT_NE(o2, nullptr);\012\012  env_-&gt;DeleteWeakGlobalRef(o1);\012  env_-&gt;DeleteWeakGlobalRef(o2);\012})<SUB>2171</SUB>> ]
+"17375" [label = <(UNKNOWN,TEST_F(JniInternalTest, ExceptionDescribe) {\012 // This checks how ExceptionDescribe handles call without exception.\012  env_-&gt;ExceptionClear();\012  env_-&gt;ExceptionDescribe();\012},TEST_F(JniInternalTest, ExceptionDescribe) {\012 // This checks how ExceptionDescribe handles call without exception.\012  env_-&gt;ExceptionClear();\012  env_-&gt;ExceptionDescribe();\012})<SUB>2206</SUB>> ]
+"17376" [label = <(UNKNOWN,TEST_F(JniInternalTest, Throw) {\012  jclass exception_class = env_-&gt;FindClass(&quot;java/lang/RuntimeException&quot;);\012  ASSERT_TRUE(exception_class != nullptr);\012  jthrowable exception = reinterpret_cast&lt;jthrowable&gt;(env_-&gt;AllocObject(exception_class));\012  ASSERT_TRUE(exception != nullptr);\012\012  EXPECT_EQ(JNI_OK, env_-&gt;Throw(exception));\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  jthrowable thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsSameObject(exception, thrown_exception));\012\012 // Bad argument.\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(JNI_ERR, env_-&gt;Throw(nullptr));\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  EXPECT_EQ(JNI_ERR, env_-&gt;Throw(nullptr));\012  check_jni_abort_catcher.Check(&quot;Throw received NULL jthrowable&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012},TEST_F(JniInternalTest, Throw) {\012  jclass exception_class = env_-&gt;FindClass(&quot;java/lang/RuntimeException&quot;);\012  ASSERT_TRUE(exception_class != nullptr);\012  jthrowable exception = reinterpret_cast&lt;jthrowable&gt;(env_-&gt;AllocObject(exception_class));\012  ASSERT_TRUE(exception != nullptr);\012\012  EXPECT_EQ(JNI_OK, env_-&gt;Throw(exception));\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  jthrowable thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsSameObject(exception, thrown_exception));\012\012 // Bad argument.\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(JNI_ERR, env_-&gt;Throw(nullptr));\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  EXPECT_EQ(JNI_ERR, env_-&gt;Throw(nullptr));\012  check_jni_abort_catcher.Check(&quot;Throw received NULL jthrowable&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012})<SUB>2212</SUB>> ]
+"17377" [label = <(UNKNOWN,TEST_F(JniInternalTest, ThrowNew) {\012  jclass exception_class = env_-&gt;FindClass(&quot;java/lang/RuntimeException&quot;);\012  ASSERT_TRUE(exception_class != nullptr);\012\012  jthrowable thrown_exception;\012\012  EXPECT_EQ(JNI_OK, env_-&gt;ThrowNew(exception_class, &quot;hello world&quot;));\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(thrown_exception, exception_class));\012\012  EXPECT_EQ(JNI_OK, env_-&gt;ThrowNew(exception_class, nullptr));\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(thrown_exception, exception_class));\012\012 // Bad argument.\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  EXPECT_EQ(JNI_ERR, env_-&gt;ThrowNew(nullptr, nullptr));\012  check_jni_abort_catcher.Check(&quot;c == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(JNI_ERR, env_-&gt;ThrowNew(nullptr, nullptr));\012  check_jni_abort_catcher.Check(&quot;ThrowNew received NULL jclass&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012},TEST_F(JniInternalTest, ThrowNew) {\012  jclass exception_class = env_-&gt;FindClass(&quot;java/lang/RuntimeException&quot;);\012  ASSERT_TRUE(exception_class != nullptr);\012\012  jthrowable thrown_exception;\012\012  EXPECT_EQ(JNI_OK, env_-&gt;ThrowNew(exception_class, &quot;hello world&quot;));\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(thrown_exception, exception_class));\012\012  EXPECT_EQ(JNI_OK, env_-&gt;ThrowNew(exception_class, nullptr));\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(thrown_exception, exception_class));\012\012 // Bad argument.\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  EXPECT_EQ(JNI_ERR, env_-&gt;ThrowNew(nullptr, nullptr));\012  check_jni_abort_catcher.Check(&quot;c == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(JNI_ERR, env_-&gt;ThrowNew(nullptr, nullptr));\012  check_jni_abort_catcher.Check(&quot;ThrowNew received NULL jclass&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012})<SUB>2234</SUB>> ]
+"17378" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewDirectBuffer_GetDirectBufferAddress_GetDirectBufferCapacity) {\012 // Start runtime.\012 Thread* self = Thread::Current();\012  self-&gt;TransitionFromSuspendedToRunnable();\012 MakeInterpreted(class_linker_-&gt;FindSystemClass(self, &quot;Ljava/lang/Class;&quot;));\012 MakeInterpreted(class_linker_-&gt;FindSystemClass(self, &quot;Ljava/lang/Object;&quot;));\012 MakeInterpreted(class_linker_-&gt;FindSystemClass(self, &quot;Ljava/nio/DirectByteBuffer;&quot;));\012 MakeInterpreted(class_linker_-&gt;FindSystemClass(self, &quot;Ljava/nio/Bits;&quot;));\012 MakeInterpreted(class_linker_-&gt;FindSystemClass(self, &quot;Ljava/nio/MappedByteBuffer;&quot;));\012 MakeInterpreted(class_linker_-&gt;FindSystemClass(self, &quot;Ljava/nio/ByteBuffer;&quot;));\012 MakeInterpreted(class_linker_-&gt;FindSystemClass(self, &quot;Ljava/nio/Buffer;&quot;));\012 // TODO: we only load a dex file here as starting the runtime relies upon it.\012 const char* class_name = &quot;StaticLeafMethods&quot;;\012 LoadDex(class_name);\012 bool started = runtime_-&gt;Start();\012  ASSERT_TRUE(started);\012\012  jclass buffer_class = env_-&gt;FindClass(&quot;java/nio/Buffer&quot;);\012  ASSERT_NE(buffer_class, nullptr);\012\012 char bytes[1024];\012  jobject buffer = env_-&gt;NewDirectByteBuffer(bytes, sizeof(bytes));\012  ASSERT_NE(buffer, nullptr);\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(buffer, buffer_class));\012  ASSERT_EQ(env_-&gt;GetDirectBufferAddress(buffer), bytes);\012  ASSERT_EQ(env_-&gt;GetDirectBufferCapacity(buffer), static_cast&lt;jlong&gt;(sizeof(bytes)));\012\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    env_-&gt;NewDirectByteBuffer(bytes, static_cast&lt;jlong&gt;(INT_MAX) + 1);\012    check_jni_abort_catcher.Check(&quot;in call to NewDirectByteBuffer&quot;);\012 }\012},TEST_F(JniInternalTest, NewDirectBuffer_GetDirectBufferAddress_GetDirectBufferCapacity) {\012 // Start runtime.\012 Thread* self = Thread::Current();\012  self-&gt;TransitionFromSuspendedToRunnable();\012 MakeInterpreted(class_linker_-&gt;FindSystemClass(self, &quot;Ljava/lang/Class;&quot;));\012 MakeInterpreted(class_linker_-&gt;FindSystemClass(self, &quot;Ljava/lang/Object;&quot;));\012 MakeInterpreted(class_linker_-&gt;FindSystemClass(self, &quot;Ljava/nio/DirectByteBuffer;&quot;));\012 MakeInterpreted(class_linker_-&gt;FindSystemClass(self, &quot;Ljava/nio/Bits;&quot;));\012 MakeInterpreted(class_linker_-&gt;FindSystemClass(self, &quot;Ljava/nio/MappedByteBuffer;&quot;));\012 MakeInterpreted(class_linker_-&gt;FindSystemClass(self, &quot;Ljava/nio/ByteBuffer;&quot;));\012 MakeInterpreted(class_linker_-&gt;FindSystemClass(self, &quot;Ljava/nio/Buffer;&quot;));\012 // TODO: we only load a dex file here as starting the runtime relies upon it.\012 const char* class_name = &quot;StaticLeafMethods&quot;;\012 LoadDex(class_name);\012 bool started = runtime_-&gt;Start();\012  ASSERT_TRUE(started);\012\012  jclass buffer_class = env_-&gt;FindClass(&quot;java/nio/Buffer&quot;);\012  ASSERT_NE(buffer_class, nullptr);\012\012 char bytes[1024];\012  jobject buffer = env_-&gt;NewDirectByteBuffer(bytes, sizeof(bytes));\012  ASSERT_NE(buffer, nullptr);\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(buffer, buffer_class));\012  ASSERT_EQ(env_-&gt;GetDirectBufferAddress(buffer), bytes);\012  ASSERT_EQ(env_-&gt;GetDirectBufferCapacity(buffer), static_cast&lt;jlong&gt;(sizeof(bytes)));\012\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    env_-&gt;NewDirectByteBuffer(bytes, static_cast&lt;jlong&gt;(INT_MAX) + 1);\012    check_jni_abort_catcher.Check(&quot;in call to NewDirectByteBuffer&quot;);\012 }\012})<SUB>2263</SUB>> ]
+"17379" [label = <(UNKNOWN,TEST_F(JniInternalTest, MonitorEnterExit) {\012 // This will print some error messages. Suppress.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012 // Create an object to torture.\012  jclass object_class = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_NE(object_class, nullptr);\012  jobject object = env_-&gt;AllocObject(object_class);\012  ASSERT_NE(object, nullptr);\012\012 // Expected class of exceptions\012  jclass imse_class = env_-&gt;FindClass(&quot;java/lang/IllegalMonitorStateException&quot;);\012  ASSERT_NE(imse_class, nullptr);\012\012  jthrowable thrown_exception;\012\012 // Unlock of unowned monitor\012  env_-&gt;MonitorExit(object);\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(thrown_exception, imse_class));\012\012 // Lock of unowned monitor\012  env_-&gt;MonitorEnter(object);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012 // Regular unlock\012  env_-&gt;MonitorExit(object);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Recursively lock a lot\012 size_t max_recursive_lock = 1024;\012 for (size_t i = 0; i &lt; max_recursive_lock; i++) {\012    env_-&gt;MonitorEnter(object);\012    EXPECT_FALSE(env_-&gt;ExceptionCheck());\012 }\012 // Recursively unlock a lot\012 for (size_t i = 0; i &lt; max_recursive_lock; i++) {\012    env_-&gt;MonitorExit(object);\012    EXPECT_FALSE(env_-&gt;ExceptionCheck());\012 }\012\012 // Unlock of unowned monitor\012  env_-&gt;MonitorExit(object);\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(thrown_exception, imse_class));\012\012 // It's an error to call MonitorEnter or MonitorExit on null.\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    env_-&gt;MonitorEnter(nullptr);\012    check_jni_abort_catcher.Check(&quot;in call to MonitorEnter&quot;);\012    env_-&gt;MonitorExit(nullptr);\012    check_jni_abort_catcher.Check(&quot;in call to MonitorExit&quot;);\012 }\012},TEST_F(JniInternalTest, MonitorEnterExit) {\012 // This will print some error messages. Suppress.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012 // Create an object to torture.\012  jclass object_class = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_NE(object_class, nullptr);\012  jobject object = env_-&gt;AllocObject(object_class);\012  ASSERT_NE(object, nullptr);\012\012 // Expected class of exceptions\012  jclass imse_class = env_-&gt;FindClass(&quot;java/lang/IllegalMonitorStateException&quot;);\012  ASSERT_NE(imse_class, nullptr);\012\012  jthrowable thrown_exception;\012\012 // Unlock of unowned monitor\012  env_-&gt;MonitorExit(object);\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(thrown_exception, imse_class));\012\012 // Lock of unowned monitor\012  env_-&gt;MonitorEnter(object);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012 // Regular unlock\012  env_-&gt;MonitorExit(object);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Recursively lock a lot\012 size_t max_recursive_lock = 1024;\012 for (size_t i = 0; i &lt; max_recursive_lock; i++) {\012    env_-&gt;MonitorEnter(object);\012    EXPECT_FALSE(env_-&gt;ExceptionCheck());\012 }\012 // Recursively unlock a lot\012 for (size_t i = 0; i &lt; max_recursive_lock; i++) {\012    env_-&gt;MonitorExit(object);\012    EXPECT_FALSE(env_-&gt;ExceptionCheck());\012 }\012\012 // Unlock of unowned monitor\012  env_-&gt;MonitorExit(object);\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(thrown_exception, imse_class));\012\012 // It's an error to call MonitorEnter or MonitorExit on null.\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    env_-&gt;MonitorEnter(nullptr);\012    check_jni_abort_catcher.Check(&quot;in call to MonitorEnter&quot;);\012    env_-&gt;MonitorExit(nullptr);\012    check_jni_abort_catcher.Check(&quot;in call to MonitorExit&quot;);\012 }\012})<SUB>2297</SUB>> ]
+"17391" [label = <(UNKNOWN,TEST_F(JniInternalTest, MonitorExitLockedInDifferentCall) {\012 SetUpForTest(false, &quot;foo&quot;, &quot;()V&quot;, reinterpret_cast&lt;void*&gt;(&amp;Java_MyClassNatives_foo_exit));\012  ASSERT_NE(jobj_, nullptr);\012\012  env_-&gt;MonitorEnter(jobj_);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  env_-&gt;CallNonvirtualVoidMethod(jobj_, jklass_, jmethod_);\012  check_jni_abort_catcher.Check(&quot;Unlocking monitor that wasn't locked here&quot;);\012},TEST_F(JniInternalTest, MonitorExitLockedInDifferentCall) {\012 SetUpForTest(false, &quot;foo&quot;, &quot;()V&quot;, reinterpret_cast&lt;void*&gt;(&amp;Java_MyClassNatives_foo_exit));\012  ASSERT_NE(jobj_, nullptr);\012\012  env_-&gt;MonitorEnter(jobj_);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  env_-&gt;CallNonvirtualVoidMethod(jobj_, jklass_, jmethod_);\012  check_jni_abort_catcher.Check(&quot;Unlocking monitor that wasn't locked here&quot;);\012})<SUB>2361</SUB>> ]
+"17403" [label = <(UNKNOWN,TEST_F(JniInternalTest, MonitorExitNotAllUnlocked) {\012 SetUpForTest(false,\012 &quot;foo&quot;,\012 &quot;()V&quot;,\012 reinterpret_cast&lt;void*&gt;(&amp;Java_MyClassNatives_foo_enter_no_exit));\012  ASSERT_NE(jobj_, nullptr);\012\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  env_-&gt;CallNonvirtualVoidMethod(jobj_, jklass_, jmethod_);\012  check_jni_abort_catcher.Check(&quot;Still holding a locked object on JNI end&quot;);\012},TEST_F(JniInternalTest, MonitorExitNotAllUnlocked) {\012 SetUpForTest(false,\012 &quot;foo&quot;,\012 &quot;()V&quot;,\012 reinterpret_cast&lt;void*&gt;(&amp;Java_MyClassNatives_foo_enter_no_exit));\012  ASSERT_NE(jobj_, nullptr);\012\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  env_-&gt;CallNonvirtualVoidMethod(jobj_, jklass_, jmethod_);\012  check_jni_abort_catcher.Check(&quot;Still holding a locked object on JNI end&quot;);\012})<SUB>2378</SUB>> ]
+"17475" [label = <(UNKNOWN,TEST_F(JniInternalTest, DetachThreadUnlockJNIMonitors) {\012 // We need to lock an object, detach, reattach, and check the locks.\012 //\012 // As re-attaching will create a different thread, we need to use a global\012 // ref to keep the object around.\012\012 // Create an object to torture.\012  jobject global_ref;\012 {\012    jclass object_class = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012    ASSERT_NE(object_class, nullptr);\012    jobject object = env_-&gt;AllocObject(object_class);\012    ASSERT_NE(object, nullptr);\012    global_ref = env_-&gt;NewGlobalRef(object);\012 }\012\012 // Lock it.\012  env_-&gt;MonitorEnter(global_ref);\012  ASSERT_TRUE(IsLocked(env_, global_ref));\012\012 // Detach and re-attach.\012  jint detach_result = vm_-&gt;DetachCurrentThread();\012  ASSERT_EQ(detach_result, JNI_OK);\012  jint attach_result = vm_-&gt;AttachCurrentThread(&amp;env_, nullptr);\012  ASSERT_EQ(attach_result, JNI_OK);\012\012 // Look at the global ref, check whether it's still locked.\012  ASSERT_FALSE(IsLocked(env_, global_ref));\012\012 // Delete the global ref.\012  env_-&gt;DeleteGlobalRef(global_ref);\012},TEST_F(JniInternalTest, DetachThreadUnlockJNIMonitors) {\012 // We need to lock an object, detach, reattach, and check the locks.\012 //\012 // As re-attaching will create a different thread, we need to use a global\012 // ref to keep the object around.\012\012 // Create an object to torture.\012  jobject global_ref;\012 {\012    jclass object_class = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012    ASSERT_NE(object_class, nullptr);\012    jobject object = env_-&gt;AllocObject(object_class);\012    ASSERT_NE(object, nullptr);\012    global_ref = env_-&gt;NewGlobalRef(object);\012 }\012\012 // Lock it.\012  env_-&gt;MonitorEnter(global_ref);\012  ASSERT_TRUE(IsLocked(env_, global_ref));\012\012 // Detach and re-attach.\012  jint detach_result = vm_-&gt;DetachCurrentThread();\012  ASSERT_EQ(detach_result, JNI_OK);\012  jint attach_result = vm_-&gt;AttachCurrentThread(&amp;env_, nullptr);\012  ASSERT_EQ(attach_result, JNI_OK);\012\012 // Look at the global ref, check whether it's still locked.\012  ASSERT_FALSE(IsLocked(env_, global_ref));\012\012 // Delete the global ref.\012  env_-&gt;DeleteGlobalRef(global_ref);\012})<SUB>2408</SUB>> ]
+"17476" [label = <(UNKNOWN,TEST_F(JniInternalTest, IndirectReferenceTableOffsets) {\012 // The segment_state_ field is private, and we want to avoid friend declaration. So we'll check\012 // by modifying memory.\012 // The parameters don't really matter here.\012  std::string error_msg;\012 IndirectReferenceTable irt(5,\012 IndirectRefKind::kGlobal,\012 IndirectReferenceTable::ResizableCapacity::kNo,\012 &amp;error_msg);\012  ASSERT_TRUE(irt.IsValid()) &lt;&lt; error_msg;\012 IRTSegmentState old_state = irt.GetSegmentState();\012\012 // Write some new state directly. We invert parts of old_state to ensure a new value.\012 IRTSegmentState new_state;\012  new_state.top_index = old_state.top_index ^ 0x07705005;\012  ASSERT_NE(old_state.top_index, new_state.top_index);\012\012 uint8_t* base = reinterpret_cast&lt;uint8_t*&gt;(&amp;irt);\012 int32_t segment_state_offset =\012 IndirectReferenceTable::SegmentStateOffset(sizeof(void*)).Int32Value();\012 *reinterpret_cast&lt;IRTSegmentState*&gt;(base + segment_state_offset) = new_state;\012\012 // Read and compare.\012  EXPECT_EQ(new_state.top_index, irt.GetSegmentState().top_index);\012},TEST_F(JniInternalTest, IndirectReferenceTableOffsets) {\012 // The segment_state_ field is private, and we want to avoid friend declaration. So we'll check\012 // by modifying memory.\012 // The parameters don't really matter here.\012  std::string error_msg;\012 IndirectReferenceTable irt(5,\012 IndirectRefKind::kGlobal,\012 IndirectReferenceTable::ResizableCapacity::kNo,\012 &amp;error_msg);\012  ASSERT_TRUE(irt.IsValid()) &lt;&lt; error_msg;\012 IRTSegmentState old_state = irt.GetSegmentState();\012\012 // Write some new state directly. We invert parts of old_state to ensure a new value.\012 IRTSegmentState new_state;\012  new_state.top_index = old_state.top_index ^ 0x07705005;\012  ASSERT_NE(old_state.top_index, new_state.top_index);\012\012 uint8_t* base = reinterpret_cast&lt;uint8_t*&gt;(&amp;irt);\012 int32_t segment_state_offset =\012 IndirectReferenceTable::SegmentStateOffset(sizeof(void*)).Int32Value();\012 *reinterpret_cast&lt;IRTSegmentState*&gt;(base + segment_state_offset) = new_state;\012\012 // Read and compare.\012  EXPECT_EQ(new_state.top_index, irt.GetSegmentState().top_index);\012})<SUB>2442</SUB>> ]
+"17477" [label = <(UNKNOWN,TEST_F(JniInternalTest, JNIEnvExtOffsets) {\012  EXPECT_EQ(OFFSETOF_MEMBER(JNIEnvExt, local_ref_cookie_),\012 JNIEnvExt::LocalRefCookieOffset(sizeof(void*)).Uint32Value());\012\012  EXPECT_EQ(OFFSETOF_MEMBER(JNIEnvExt, self_), JNIEnvExt::SelfOffset(sizeof(void*)).Uint32Value());\012\012 // segment_state_ is private in the IndirectReferenceTable. So this test isn't as good as we'd\012 // hope it to be.\012 uint32_t segment_state_now =\012      OFFSETOF_MEMBER(JNIEnvExt, locals_) +\012 IndirectReferenceTable::SegmentStateOffset(sizeof(void*)).Uint32Value();\012 uint32_t segment_state_computed = JNIEnvExt::SegmentStateOffset(sizeof(void*)).Uint32Value();\012  EXPECT_EQ(segment_state_now, segment_state_computed);\012},TEST_F(JniInternalTest, JNIEnvExtOffsets) {\012  EXPECT_EQ(OFFSETOF_MEMBER(JNIEnvExt, local_ref_cookie_),\012 JNIEnvExt::LocalRefCookieOffset(sizeof(void*)).Uint32Value());\012\012  EXPECT_EQ(OFFSETOF_MEMBER(JNIEnvExt, self_), JNIEnvExt::SelfOffset(sizeof(void*)).Uint32Value());\012\012 // segment_state_ is private in the IndirectReferenceTable. So this test isn't as good as we'd\012 // hope it to be.\012 uint32_t segment_state_now =\012      OFFSETOF_MEMBER(JNIEnvExt, locals_) +\012 IndirectReferenceTable::SegmentStateOffset(sizeof(void*)).Uint32Value();\012 uint32_t segment_state_computed = JNIEnvExt::SegmentStateOffset(sizeof(void*)).Uint32Value();\012  EXPECT_EQ(segment_state_now, segment_state_computed);\012})<SUB>2469</SUB>> ]
+"17479" [label = <(&lt;operator&gt;.assignment,gGlobalRefCount = 0)<SUB>2484</SUB>> ]
+"17483" [label = <(&lt;operator&gt;.assignment,* gOriginalEnv = nullptr)<SUB>2485</SUB>> ]
+"17501" [label = <(UNKNOWN,TEST_F(JniInternalTest, JNIEnvExtTableOverride) {\012 JNINativeInterface env_override;\012  memcpy(&amp;env_override, env_-&gt;functions, sizeof(JNINativeInterface));\012\012  gOriginalEnv = env_-&gt;functions;\012  env_override.NewGlobalRef = CountNewGlobalRef;\012  gGlobalRefCount = 0;\012\012  jclass local = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_TRUE(local != nullptr);\012\012 // Set the table, add a global ref, see whether the counter increases.\012 JNIEnvExt::SetTableOverride(&amp;env_override);\012\012  jobject global = env_-&gt;NewGlobalRef(local);\012  EXPECT_EQ(1u, gGlobalRefCount);\012  env_-&gt;DeleteGlobalRef(global);\012\012 // Reset\012 JNIEnvExt::SetTableOverride(nullptr);\012\012  jobject global2 = env_-&gt;NewGlobalRef(local);\012  EXPECT_EQ(1u, gGlobalRefCount);\012  env_-&gt;DeleteGlobalRef(global2);\012},TEST_F(JniInternalTest, JNIEnvExtTableOverride) {\012 JNINativeInterface env_override;\012  memcpy(&amp;env_override, env_-&gt;functions, sizeof(JNINativeInterface));\012\012  gOriginalEnv = env_-&gt;functions;\012  env_override.NewGlobalRef = CountNewGlobalRef;\012  gGlobalRefCount = 0;\012\012  jclass local = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_TRUE(local != nullptr);\012\012 // Set the table, add a global ref, see whether the counter increases.\012 JNIEnvExt::SetTableOverride(&amp;env_override);\012\012  jobject global = env_-&gt;NewGlobalRef(local);\012  EXPECT_EQ(1u, gGlobalRefCount);\012  env_-&gt;DeleteGlobalRef(global);\012\012 // Reset\012 JNIEnvExt::SetTableOverride(nullptr);\012\012  jobject global2 = env_-&gt;NewGlobalRef(local);\012  EXPECT_EQ(1u, gGlobalRefCount);\012  env_-&gt;DeleteGlobalRef(global2);\012})<SUB>2493</SUB>> ]
+"17502" [label = <(UNKNOWN,TEST_F(JniInternalTest, NonAttachedThread) {\012 // This tests leads to warnings and errors in the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012 CheckJniAbortCatcher check_jni_abort_catcher;\012\012 auto callee = [](void* env_ptr) -&gt; void* {\012 JNIEnv* env = reinterpret_cast&lt;JNIEnv*&gt;(env_ptr);\012    env-&gt;NewStringUTF(&quot;test&quot;);\012 return nullptr;\012 };\012\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  vm_-&gt;SetCheckJniEnabled(true);\012 {\012 pthread_t pthread;\012 int pthread_create_result = pthread_create(&amp;pthread,\012 /* pthread_attr */ nullptr,\012                                               callee,\012 reinterpret_cast&lt;void*&gt;(env_));\012    CHECK_EQ(pthread_create_result, 0);\012 int pthread_join_result = pthread_join(pthread, /* thread_return */ nullptr);\012    CHECK_EQ(pthread_join_result, 0);\012 }\012  vm_-&gt;SetCheckJniEnabled(old_check_jni);\012\012  check_jni_abort_catcher.Check(&quot;is making JNI calls without being attached&quot;);\012},TEST_F(JniInternalTest, NonAttachedThread) {\012 // This tests leads to warnings and errors in the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012 CheckJniAbortCatcher check_jni_abort_catcher;\012\012 auto callee = [](void* env_ptr) -&gt; void* {\012 JNIEnv* env = reinterpret_cast&lt;JNIEnv*&gt;(env_ptr);\012    env-&gt;NewStringUTF(&quot;test&quot;);\012 return nullptr;\012 };\012\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  vm_-&gt;SetCheckJniEnabled(true);\012 {\012 pthread_t pthread;\012 int pthread_create_result = pthread_create(&amp;pthread,\012 /* pthread_attr */ nullptr,\012                                               callee,\012 reinterpret_cast&lt;void*&gt;(env_));\012    CHECK_EQ(pthread_create_result, 0);\012 int pthread_join_result = pthread_join(pthread, /* thread_return */ nullptr);\012    CHECK_EQ(pthread_join_result, 0);\012 }\012  vm_-&gt;SetCheckJniEnabled(old_check_jni);\012\012  check_jni_abort_catcher.Check(&quot;is making JNI calls without being attached&quot;);\012})<SUB>2519</SUB>> ]
+"14817" [label = <(METHOD,&lt;global&gt;)<SUB>1</SUB>> ]
+"17503" [label = <(METHOD_RETURN,ANY)<SUB>1</SUB>> ]
+  "17286" -> "17287" 
+  "17287" -> "17288" 
+  "17288" -> "17289" 
+  "17289" -> "17290" 
+  "17290" -> "17291" 
+  "17291" -> "17292" 
+  "17292" -> "17293" 
+  "17293" -> "17294" 
+  "17294" -> "17295" 
+  "17295" -> "17314" 
+  "17314" -> "17315" 
+  "17315" -> "17320" 
+  "17320" -> "17321" 
+  "17321" -> "17322" 
+  "17322" -> "17323" 
+  "17323" -> "17324" 
+  "17324" -> "17325" 
+  "17325" -> "17326" 
+  "17326" -> "17327" 
+  "17327" -> "17328" 
+  "17328" -> "17329" 
+  "17329" -> "17330" 
+  "17330" -> "17331" 
+  "17331" -> "17332" 
+  "17332" -> "17333" 
+  "17333" -> "17334" 
+  "17334" -> "17335" 
+  "17335" -> "17336" 
+  "17336" -> "17337" 
+  "17337" -> "17338" 
+  "17338" -> "17339" 
+  "17339" -> "17340" 
+  "17340" -> "17341" 
+  "17341" -> "17342" 
+  "17342" -> "17343" 
+  "17343" -> "17344" 
+  "17344" -> "17345" 
+  "17345" -> "17346" 
+  "17346" -> "17347" 
+  "17347" -> "17348" 
+  "17348" -> "17349" 
+  "17349" -> "17350" 
+  "17350" -> "17351" 
+  "17351" -> "17352" 
+  "17352" -> "17353" 
+  "17353" -> "17354" 
+  "17354" -> "17355" 
+  "17355" -> "17356" 
+  "17356" -> "17357" 
+  "17357" -> "17358" 
+  "17358" -> "17359" 
+  "17359" -> "17360" 
+  "17360" -> "17361" 
+  "17361" -> "17362" 
+  "17362" -> "17363" 
+  "17363" -> "17364" 
+  "17364" -> "17365" 
+  "17365" -> "17366" 
+  "17366" -> "17367" 
+  "17367" -> "17368" 
+  "17368" -> "17369" 
+  "17369" -> "17370" 
+  "17370" -> "17371" 
+  "17371" -> "17372" 
+  "17372" -> "17373" 
+  "17373" -> "17374" 
+  "17374" -> "17375" 
+  "17375" -> "17376" 
+  "17376" -> "17377" 
+  "17377" -> "17378" 
+  "17378" -> "17379" 
+  "17379" -> "17391" 
+  "17391" -> "17403" 
+  "17403" -> "17475" 
+  "17475" -> "17476" 
+  "17476" -> "17477" 
+  "17477" -> "17479" 
+  "17479" -> "17483" 
+  "17483" -> "17501" 
+  "17501" -> "17502" 
+  "17502" -> "17503" 
+  "14817" -> "17286" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/277-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/277-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/277-cfg.dot	2023-06-07 19:35:28.397384334 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/277-cfg.dot	2023-06-07 19:35:34.907383764 +0330
@@ -1,33 +1,153 @@
-digraph "JniInitializeNativeCallerCheck" {  
-"15096" [label = <(DCHECK,DCHECK(!CodeRangeCache::GetSingleton().HasCache()))<SUB>3496</SUB>> ]
-"15105" [label = <(BuildCache,CodeRangeCache::GetSingleton().BuildCache())<SUB>3497</SUB>> ]
-"15097" [label = <(&lt;operator&gt;.logicalNot,!CodeRangeCache::GetSingleton().HasCache())<SUB>3496</SUB>> ]
-"15106" [label = <(&lt;operator&gt;.fieldAccess,CodeRangeCache::GetSingleton().BuildCache)<SUB>3497</SUB>> ]
-"15098" [label = <(HasCache,CodeRangeCache::GetSingleton().HasCache())<SUB>3496</SUB>> ]
-"15107" [label = <(CodeRangeCache::GetSingleton,CodeRangeCache::GetSingleton())<SUB>3497</SUB>> ]
-"15111" [label = <(FIELD_IDENTIFIER,BuildCache,BuildCache)<SUB>3497</SUB>> ]
-"15099" [label = <(&lt;operator&gt;.fieldAccess,CodeRangeCache::GetSingleton().HasCache)<SUB>3496</SUB>> ]
-"15108" [label = <(&lt;operator&gt;.fieldAccess,CodeRangeCache::GetSingleton)<SUB>3497</SUB>> ]
-"15100" [label = <(CodeRangeCache::GetSingleton,CodeRangeCache::GetSingleton())<SUB>3496</SUB>> ]
-"15104" [label = <(FIELD_IDENTIFIER,HasCache,HasCache)<SUB>3496</SUB>> ]
-"15110" [label = <(FIELD_IDENTIFIER,GetSingleton,GetSingleton)<SUB>3497</SUB>> ]
-"15101" [label = <(&lt;operator&gt;.fieldAccess,CodeRangeCache::GetSingleton)<SUB>3496</SUB>> ]
-"15103" [label = <(FIELD_IDENTIFIER,GetSingleton,GetSingleton)<SUB>3496</SUB>> ]
-"15094" [label = <(METHOD,JniInitializeNativeCallerCheck)<SUB>3494</SUB>> ]
-"15112" [label = <(METHOD_RETURN,void)<SUB>3494</SUB>> ]
-  "15096" -> "15110" 
-  "15105" -> "15112" 
-  "15097" -> "15096" 
-  "15106" -> "15105" 
-  "15098" -> "15097" 
-  "15107" -> "15111" 
-  "15111" -> "15106" 
-  "15099" -> "15098" 
-  "15108" -> "15107" 
-  "15100" -> "15104" 
-  "15104" -> "15099" 
-  "15110" -> "15108" 
-  "15101" -> "15100" 
-  "15103" -> "15101" 
-  "15094" -> "15103" 
+digraph "SetUp" {  
+"14823" [label = <(CommonRuntimeTest::SetUp,CommonRuntimeTest::SetUp())<SUB>37</SUB>> ]
+"14827" [label = <(&lt;operator&gt;.assignment,vm_ = Runtime::Current()-&gt;GetJavaVM())<SUB>39</SUB>> ]
+"14836" [label = <(AttachCurrentThread,vm_-&gt;AttachCurrentThread(&amp;env_, nullptr))<SUB>44</SUB>> ]
+"14843" [label = <(&lt;operator&gt;.greaterThan,ScopedLocalRef&lt;jclass&gt; aioobe(env_,\012                                  env_-&gt;FindClass(&quot;java/lang/ArrayIndexOutOfBoundsException&quot;)))<SUB>46</SUB>> ]
+"14854" [label = <(CHECK,CHECK(aioobe.get() != nullptr))<SUB>48</SUB>> ]
+"14861" [label = <(&lt;operator&gt;.assignment,aioobe_ = reinterpret_cast&lt;jclass&gt;(env_-&gt;NewGlobalRef(aioobe.get())))<SUB>49</SUB>> ]
+"14873" [label = <(&lt;operator&gt;.greaterThan,ScopedLocalRef&lt;jclass&gt; ase(env_, env_-&gt;FindClass(&quot;java/lang/ArrayStoreException&quot;)))<SUB>51</SUB>> ]
+"14884" [label = <(CHECK,CHECK(ase.get() != nullptr))<SUB>52</SUB>> ]
+"14891" [label = <(&lt;operator&gt;.assignment,ase_ = reinterpret_cast&lt;jclass&gt;(env_-&gt;NewGlobalRef(ase.get())))<SUB>53</SUB>> ]
+"14903" [label = <(&lt;operator&gt;.greaterThan,ScopedLocalRef&lt;jclass&gt; sioobe(env_,\012                                  env_-&gt;FindClass(&quot;java/lang/StringIndexOutOfBoundsException&quot;)))<SUB>55</SUB>> ]
+"14914" [label = <(CHECK,CHECK(sioobe.get() != nullptr))<SUB>57</SUB>> ]
+"14921" [label = <(&lt;operator&gt;.assignment,sioobe_ = reinterpret_cast&lt;jclass&gt;(env_-&gt;NewGlobalRef(sioobe.get())))<SUB>58</SUB>> ]
+"14824" [label = <(&lt;operator&gt;.fieldAccess,CommonRuntimeTest::SetUp)<SUB>37</SUB>> ]
+"14829" [label = <(GetJavaVM,Runtime::Current()-&gt;GetJavaVM())<SUB>39</SUB>> ]
+"14837" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;AttachCurrentThread)<SUB>44</SUB>> ]
+"14840" [label = <(&lt;operator&gt;.addressOf,&amp;env_)<SUB>44</SUB>> ]
+"14844" [label = <(&lt;operator&gt;.lessThan,ScopedLocalRef&lt;jclass)<SUB>46</SUB>> ]
+"14847" [label = <(aioobe,aioobe(env_,\012                                  env_-&gt;FindClass(&quot;java/lang/ArrayIndexOutOfBoundsException&quot;)))<SUB>46</SUB>> ]
+"14855" [label = <(&lt;operator&gt;.notEquals,aioobe.get() != nullptr)<SUB>48</SUB>> ]
+"14863" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jclass&gt;(env_-&gt;NewGlobalRef(aioobe.get())))<SUB>49</SUB>> ]
+"14874" [label = <(&lt;operator&gt;.lessThan,ScopedLocalRef&lt;jclass)<SUB>51</SUB>> ]
+"14877" [label = <(ase,ase(env_, env_-&gt;FindClass(&quot;java/lang/ArrayStoreException&quot;)))<SUB>51</SUB>> ]
+"14885" [label = <(&lt;operator&gt;.notEquals,ase.get() != nullptr)<SUB>52</SUB>> ]
+"14893" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jclass&gt;(env_-&gt;NewGlobalRef(ase.get())))<SUB>53</SUB>> ]
+"14904" [label = <(&lt;operator&gt;.lessThan,ScopedLocalRef&lt;jclass)<SUB>55</SUB>> ]
+"14907" [label = <(sioobe,sioobe(env_,\012                                  env_-&gt;FindClass(&quot;java/lang/StringIndexOutOfBoundsException&quot;)))<SUB>55</SUB>> ]
+"14915" [label = <(&lt;operator&gt;.notEquals,sioobe.get() != nullptr)<SUB>57</SUB>> ]
+"14923" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jclass&gt;(env_-&gt;NewGlobalRef(sioobe.get())))<SUB>58</SUB>> ]
+"14826" [label = <(FIELD_IDENTIFIER,SetUp,SetUp)<SUB>37</SUB>> ]
+"14830" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetJavaVM)<SUB>39</SUB>> ]
+"14839" [label = <(FIELD_IDENTIFIER,AttachCurrentThread,AttachCurrentThread)<SUB>44</SUB>> ]
+"14849" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/ArrayIndexOutOfBoundsException&quot;))<SUB>47</SUB>> ]
+"14856" [label = <(get,aioobe.get())<SUB>48</SUB>> ]
+"14864" [label = <(UNKNOWN,jclass,jclass)<SUB>49</SUB>> ]
+"14865" [label = <(NewGlobalRef,env_-&gt;NewGlobalRef(aioobe.get()))<SUB>49</SUB>> ]
+"14879" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/ArrayStoreException&quot;))<SUB>51</SUB>> ]
+"14886" [label = <(get,ase.get())<SUB>52</SUB>> ]
+"14894" [label = <(UNKNOWN,jclass,jclass)<SUB>53</SUB>> ]
+"14895" [label = <(NewGlobalRef,env_-&gt;NewGlobalRef(ase.get()))<SUB>53</SUB>> ]
+"14909" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/StringIndexOutOfBoundsException&quot;))<SUB>56</SUB>> ]
+"14916" [label = <(get,sioobe.get())<SUB>57</SUB>> ]
+"14924" [label = <(UNKNOWN,jclass,jclass)<SUB>58</SUB>> ]
+"14925" [label = <(NewGlobalRef,env_-&gt;NewGlobalRef(sioobe.get()))<SUB>58</SUB>> ]
+"14831" [label = <(Runtime::Current,Runtime::Current())<SUB>39</SUB>> ]
+"14835" [label = <(FIELD_IDENTIFIER,GetJavaVM,GetJavaVM)<SUB>39</SUB>> ]
+"14850" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>47</SUB>> ]
+"14857" [label = <(&lt;operator&gt;.fieldAccess,aioobe.get)<SUB>48</SUB>> ]
+"14866" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewGlobalRef)<SUB>49</SUB>> ]
+"14869" [label = <(get,aioobe.get())<SUB>49</SUB>> ]
+"14880" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>51</SUB>> ]
+"14887" [label = <(&lt;operator&gt;.fieldAccess,ase.get)<SUB>52</SUB>> ]
+"14896" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewGlobalRef)<SUB>53</SUB>> ]
+"14899" [label = <(get,ase.get())<SUB>53</SUB>> ]
+"14910" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>56</SUB>> ]
+"14917" [label = <(&lt;operator&gt;.fieldAccess,sioobe.get)<SUB>57</SUB>> ]
+"14926" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewGlobalRef)<SUB>58</SUB>> ]
+"14929" [label = <(get,sioobe.get())<SUB>58</SUB>> ]
+"14832" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>39</SUB>> ]
+"14852" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>47</SUB>> ]
+"14859" [label = <(FIELD_IDENTIFIER,get,get)<SUB>48</SUB>> ]
+"14868" [label = <(FIELD_IDENTIFIER,NewGlobalRef,NewGlobalRef)<SUB>49</SUB>> ]
+"14870" [label = <(&lt;operator&gt;.fieldAccess,aioobe.get)<SUB>49</SUB>> ]
+"14882" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>51</SUB>> ]
+"14889" [label = <(FIELD_IDENTIFIER,get,get)<SUB>52</SUB>> ]
+"14898" [label = <(FIELD_IDENTIFIER,NewGlobalRef,NewGlobalRef)<SUB>53</SUB>> ]
+"14900" [label = <(&lt;operator&gt;.fieldAccess,ase.get)<SUB>53</SUB>> ]
+"14912" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>56</SUB>> ]
+"14919" [label = <(FIELD_IDENTIFIER,get,get)<SUB>57</SUB>> ]
+"14928" [label = <(FIELD_IDENTIFIER,NewGlobalRef,NewGlobalRef)<SUB>58</SUB>> ]
+"14930" [label = <(&lt;operator&gt;.fieldAccess,sioobe.get)<SUB>58</SUB>> ]
+"14834" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>39</SUB>> ]
+"14872" [label = <(FIELD_IDENTIFIER,get,get)<SUB>49</SUB>> ]
+"14902" [label = <(FIELD_IDENTIFIER,get,get)<SUB>53</SUB>> ]
+"14932" [label = <(FIELD_IDENTIFIER,get,get)<SUB>58</SUB>> ]
+"14821" [label = <(METHOD,SetUp)<SUB>36</SUB>> ]
+"14933" [label = <(METHOD_RETURN,void)<SUB>36</SUB>> ]
+  "14823" -> "14834" 
+  "14827" -> "14839" 
+  "14836" -> "14844" 
+  "14843" -> "14859" 
+  "14854" -> "14864" 
+  "14861" -> "14874" 
+  "14873" -> "14889" 
+  "14884" -> "14894" 
+  "14891" -> "14904" 
+  "14903" -> "14919" 
+  "14914" -> "14924" 
+  "14921" -> "14933" 
+  "14824" -> "14823" 
+  "14829" -> "14827" 
+  "14837" -> "14840" 
+  "14840" -> "14836" 
+  "14844" -> "14852" 
+  "14847" -> "14843" 
+  "14855" -> "14854" 
+  "14863" -> "14861" 
+  "14874" -> "14882" 
+  "14877" -> "14873" 
+  "14885" -> "14884" 
+  "14893" -> "14891" 
+  "14904" -> "14912" 
+  "14907" -> "14903" 
+  "14915" -> "14914" 
+  "14923" -> "14921" 
+  "14826" -> "14824" 
+  "14830" -> "14829" 
+  "14839" -> "14837" 
+  "14849" -> "14847" 
+  "14856" -> "14855" 
+  "14864" -> "14868" 
+  "14865" -> "14863" 
+  "14879" -> "14877" 
+  "14886" -> "14885" 
+  "14894" -> "14898" 
+  "14895" -> "14893" 
+  "14909" -> "14907" 
+  "14916" -> "14915" 
+  "14924" -> "14928" 
+  "14925" -> "14923" 
+  "14831" -> "14835" 
+  "14835" -> "14830" 
+  "14850" -> "14849" 
+  "14857" -> "14856" 
+  "14866" -> "14872" 
+  "14869" -> "14865" 
+  "14880" -> "14879" 
+  "14887" -> "14886" 
+  "14896" -> "14902" 
+  "14899" -> "14895" 
+  "14910" -> "14909" 
+  "14917" -> "14916" 
+  "14926" -> "14932" 
+  "14929" -> "14925" 
+  "14832" -> "14831" 
+  "14852" -> "14850" 
+  "14859" -> "14857" 
+  "14868" -> "14866" 
+  "14870" -> "14869" 
+  "14882" -> "14880" 
+  "14889" -> "14887" 
+  "14898" -> "14896" 
+  "14900" -> "14899" 
+  "14912" -> "14910" 
+  "14919" -> "14917" 
+  "14928" -> "14926" 
+  "14930" -> "14929" 
+  "14834" -> "14832" 
+  "14872" -> "14870" 
+  "14902" -> "14900" 
+  "14932" -> "14930" 
+  "14821" -> "14826" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/278-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/278-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/278-cfg.dot	2023-06-07 19:35:28.397384334 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/278-cfg.dot	2023-06-07 19:35:34.907383764 +0330
@@ -1,17 +1,61 @@
-digraph "JniShutdownNativeCallerCheck" {  
-"15116" [label = <(DropCache,CodeRangeCache::GetSingleton().DropCache())<SUB>3501</SUB>> ]
-"15117" [label = <(&lt;operator&gt;.fieldAccess,CodeRangeCache::GetSingleton().DropCache)<SUB>3501</SUB>> ]
-"15118" [label = <(CodeRangeCache::GetSingleton,CodeRangeCache::GetSingleton())<SUB>3501</SUB>> ]
-"15122" [label = <(FIELD_IDENTIFIER,DropCache,DropCache)<SUB>3501</SUB>> ]
-"15119" [label = <(&lt;operator&gt;.fieldAccess,CodeRangeCache::GetSingleton)<SUB>3501</SUB>> ]
-"15121" [label = <(FIELD_IDENTIFIER,GetSingleton,GetSingleton)<SUB>3501</SUB>> ]
-"15114" [label = <(METHOD,JniShutdownNativeCallerCheck)<SUB>3500</SUB>> ]
-"15123" [label = <(METHOD_RETURN,void)<SUB>3500</SUB>> ]
-  "15116" -> "15123" 
-  "15117" -> "15116" 
-  "15118" -> "15122" 
-  "15122" -> "15117" 
-  "15119" -> "15118" 
-  "15121" -> "15119" 
-  "15114" -> "15121" 
+digraph "ExpectException" {  
+"14939" [label = <(soa,soa(env_))<SUB>62</SUB>> ]
+"14941" [label = <(&lt;operator&gt;.shiftLeft,EXPECT_TRUE(env_-&gt;ExceptionCheck())\012 &lt;&lt; mirror::Class::PrettyDescriptor(soa.Decode&lt;mirror::Class&gt;(exception_class)))<SUB>63</SUB>> ]
+"14963" [label = <(&lt;operator&gt;.assignment,exception = env_-&gt;ExceptionOccurred())<SUB>65</SUB>> ]
+"14969" [label = <(EXPECT_NE,EXPECT_NE(nullptr, exception))<SUB>66</SUB>> ]
+"14972" [label = <(ExceptionClear,env_-&gt;ExceptionClear())<SUB>67</SUB>> ]
+"14976" [label = <(EXPECT_TRUE,EXPECT_TRUE(env_-&gt;IsInstanceOf(exception, exception_class)))<SUB>68</SUB>> ]
+"14942" [label = <(EXPECT_TRUE,EXPECT_TRUE(env_-&gt;ExceptionCheck()))<SUB>63</SUB>> ]
+"14947" [label = <(mirror::Class::PrettyDescriptor,mirror::Class::PrettyDescriptor(soa.Decode&lt;mirror::Class&gt;(exception_class)))<SUB>64</SUB>> ]
+"14965" [label = <(ExceptionOccurred,env_-&gt;ExceptionOccurred())<SUB>65</SUB>> ]
+"14973" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ExceptionClear)<SUB>67</SUB>> ]
+"14977" [label = <(IsInstanceOf,env_-&gt;IsInstanceOf(exception, exception_class))<SUB>68</SUB>> ]
+"14943" [label = <(ExceptionCheck,env_-&gt;ExceptionCheck())<SUB>63</SUB>> ]
+"14948" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class::PrettyDescriptor)<SUB>64</SUB>> ]
+"14953" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(exception_class))<SUB>64</SUB>> ]
+"14966" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ExceptionOccurred)<SUB>65</SUB>> ]
+"14975" [label = <(FIELD_IDENTIFIER,ExceptionClear,ExceptionClear)<SUB>67</SUB>> ]
+"14978" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;IsInstanceOf)<SUB>68</SUB>> ]
+"14944" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ExceptionCheck)<SUB>63</SUB>> ]
+"14949" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>64</SUB>> ]
+"14952" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>64</SUB>> ]
+"14954" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>64</SUB>> ]
+"14968" [label = <(FIELD_IDENTIFIER,ExceptionOccurred,ExceptionOccurred)<SUB>65</SUB>> ]
+"14980" [label = <(FIELD_IDENTIFIER,IsInstanceOf,IsInstanceOf)<SUB>68</SUB>> ]
+"14946" [label = <(FIELD_IDENTIFIER,ExceptionCheck,ExceptionCheck)<SUB>63</SUB>> ]
+"14955" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>64</SUB>> ]
+"14958" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>64</SUB>> ]
+"14957" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>64</SUB>> ]
+"14960" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>64</SUB>> ]
+"14935" [label = <(METHOD,ExpectException)<SUB>61</SUB>> ]
+"14983" [label = <(METHOD_RETURN,void)<SUB>61</SUB>> ]
+  "14939" -> "14946" 
+  "14941" -> "14968" 
+  "14963" -> "14969" 
+  "14969" -> "14975" 
+  "14972" -> "14980" 
+  "14976" -> "14983" 
+  "14942" -> "14949" 
+  "14947" -> "14941" 
+  "14965" -> "14963" 
+  "14973" -> "14972" 
+  "14977" -> "14976" 
+  "14943" -> "14942" 
+  "14948" -> "14957" 
+  "14953" -> "14947" 
+  "14966" -> "14965" 
+  "14975" -> "14973" 
+  "14978" -> "14977" 
+  "14944" -> "14943" 
+  "14949" -> "14952" 
+  "14952" -> "14948" 
+  "14954" -> "14953" 
+  "14968" -> "14966" 
+  "14980" -> "14978" 
+  "14946" -> "14944" 
+  "14955" -> "14960" 
+  "14958" -> "14954" 
+  "14957" -> "14955" 
+  "14960" -> "14958" 
+  "14935" -> "14939" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/279-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/279-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/279-cfg.dot	2023-06-07 19:35:28.397384334 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/279-cfg.dot	2023-06-07 19:35:34.917383762 +0330
@@ -1,39 +1,38 @@
-digraph "operator &lt;&lt;" {  
-"15135" [label = <(&lt;operator&gt;.shiftLeft,os &lt;&lt; &quot;JNIInvalidRefType&quot;)<SUB>3509</SUB>> ]
-"15138" [label = <(RETURN,return os;,return os;)<SUB>3510</SUB>> ]
-"15142" [label = <(&lt;operator&gt;.shiftLeft,os &lt;&lt; &quot;JNILocalRefType&quot;)<SUB>3512</SUB>> ]
-"15145" [label = <(RETURN,return os;,return os;)<SUB>3513</SUB>> ]
-"15149" [label = <(&lt;operator&gt;.shiftLeft,os &lt;&lt; &quot;JNIGlobalRefType&quot;)<SUB>3515</SUB>> ]
-"15152" [label = <(RETURN,return os;,return os;)<SUB>3516</SUB>> ]
-"15156" [label = <(&lt;operator&gt;.shiftLeft,os &lt;&lt; &quot;JNIWeakGlobalRefType&quot;)<SUB>3518</SUB>> ]
-"15159" [label = <(RETURN,return os;,return os;)<SUB>3519</SUB>> ]
-"15162" [label = <(&lt;operator&gt;.shiftLeft,LOG(FATAL) &lt;&lt; &quot;jobjectRefType[&quot; &lt;&lt; static_cast&lt;int&gt;(rhs) &lt;&lt; &quot;]&quot;)<SUB>3521</SUB>> ]
-"15172" [label = <(UNREACHABLE,UNREACHABLE())<SUB>3522</SUB>> ]
-"15163" [label = <(&lt;operator&gt;.shiftLeft,LOG(FATAL) &lt;&lt; &quot;jobjectRefType[&quot; &lt;&lt; static_cast&lt;int&gt;(rhs))<SUB>3521</SUB>> ]
-"15164" [label = <(&lt;operator&gt;.shiftLeft,LOG(FATAL) &lt;&lt; &quot;jobjectRefType[&quot;)<SUB>3521</SUB>> ]
-"15168" [label = <(&lt;operator&gt;.cast,static_cast&lt;int&gt;(rhs))<SUB>3521</SUB>> ]
-"15165" [label = <(LOG,LOG(FATAL))<SUB>3521</SUB>> ]
-"15169" [label = <(UNKNOWN,int,int)<SUB>3521</SUB>> ]
-"15126" [label = <(METHOD,operator &lt;&lt;)<SUB>3506</SUB>> ]
-"15173" [label = <(METHOD_RETURN,ostream)<SUB>3506</SUB>> ]
-  "15135" -> "15138" 
-  "15138" -> "15173" 
-  "15142" -> "15145" 
-  "15145" -> "15173" 
-  "15149" -> "15152" 
-  "15152" -> "15173" 
-  "15156" -> "15159" 
-  "15159" -> "15173" 
-  "15162" -> "15172" 
-  "15172" -> "15173" 
-  "15163" -> "15162" 
-  "15164" -> "15169" 
-  "15168" -> "15163" 
-  "15165" -> "15164" 
-  "15169" -> "15168" 
-  "15126" -> "15135" 
-  "15126" -> "15142" 
-  "15126" -> "15149" 
-  "15126" -> "15156" 
-  "15126" -> "15165" 
+digraph "CleanUpJniEnv" {  
+"14988" [label = <(&lt;operator&gt;.notEquals,aioobe_ != nullptr)<SUB>72</SUB>> ]
+"15001" [label = <(&lt;operator&gt;.notEquals,ase_ != nullptr)<SUB>76</SUB>> ]
+"15014" [label = <(&lt;operator&gt;.notEquals,sioobe_ != nullptr)<SUB>80</SUB>> ]
+"14992" [label = <(DeleteGlobalRef,env_-&gt;DeleteGlobalRef(aioobe_))<SUB>73</SUB>> ]
+"14997" [label = <(&lt;operator&gt;.assignment,aioobe_ = nullptr)<SUB>74</SUB>> ]
+"15005" [label = <(DeleteGlobalRef,env_-&gt;DeleteGlobalRef(ase_))<SUB>77</SUB>> ]
+"15010" [label = <(&lt;operator&gt;.assignment,ase_ = nullptr)<SUB>78</SUB>> ]
+"15018" [label = <(DeleteGlobalRef,env_-&gt;DeleteGlobalRef(sioobe_))<SUB>81</SUB>> ]
+"15023" [label = <(&lt;operator&gt;.assignment,sioobe_ = nullptr)<SUB>82</SUB>> ]
+"14993" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;DeleteGlobalRef)<SUB>73</SUB>> ]
+"15006" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;DeleteGlobalRef)<SUB>77</SUB>> ]
+"15019" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;DeleteGlobalRef)<SUB>81</SUB>> ]
+"14995" [label = <(FIELD_IDENTIFIER,DeleteGlobalRef,DeleteGlobalRef)<SUB>73</SUB>> ]
+"15008" [label = <(FIELD_IDENTIFIER,DeleteGlobalRef,DeleteGlobalRef)<SUB>77</SUB>> ]
+"15021" [label = <(FIELD_IDENTIFIER,DeleteGlobalRef,DeleteGlobalRef)<SUB>81</SUB>> ]
+"14985" [label = <(METHOD,CleanUpJniEnv)<SUB>71</SUB>> ]
+"15026" [label = <(METHOD_RETURN,void)<SUB>71</SUB>> ]
+  "14988" -> "14995" 
+  "14988" -> "15001" 
+  "15001" -> "15008" 
+  "15001" -> "15014" 
+  "15014" -> "15026" 
+  "15014" -> "15021" 
+  "14992" -> "14997" 
+  "14997" -> "15001" 
+  "15005" -> "15010" 
+  "15010" -> "15014" 
+  "15018" -> "15023" 
+  "15023" -> "15026" 
+  "14993" -> "14992" 
+  "15006" -> "15005" 
+  "15019" -> "15018" 
+  "14995" -> "14993" 
+  "15008" -> "15006" 
+  "15021" -> "15019" 
+  "14985" -> "14988" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/28-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/28-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/28-cfg.dot	2023-06-07 19:35:28.217384348 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/28-cfg.dot	2023-06-07 19:35:34.747383777 +0330
@@ -1,5 +1,5 @@
-digraph "EnsureInitialized" {  
-"717" [label = <(METHOD,EnsureInitialized)<SUB>495</SUB>> ]
-"721" [label = <(METHOD_RETURN,ANY)<SUB>495</SUB>> ]
-  "717" -> "721" 
+digraph "FindFieldID" {  
+"613" [label = <(METHOD,FindFieldID)<SUB>484</SUB>> ]
+"620" [label = <(METHOD_RETURN,jfieldID)<SUB>484</SUB>> ]
+  "613" -> "620" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/280-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/280-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/280-cfg.dot	2023-06-07 19:35:28.397384334 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/280-cfg.dot	2023-06-07 19:35:34.917383762 +0330
@@ -1,169 +1,13 @@
-digraph "&lt;global&gt;" {  
-"17647" [label = <(UNKNOWN,TEST_F(JniInternalTest, AllocObject) {\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012  jobject o = env_-&gt;AllocObject(c);\012  ASSERT_NE(o, nullptr);\012\012 // We have an instance of the class we asked for...\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(o, c));\012 // ...whose fields haven't been initialized because\012 // we didn't call a constructor.\012 // Even with string compression empty string has `count == 0`.\012  ASSERT_EQ(0, env_-&gt;GetIntField(o, env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;)));\012},TEST_F(JniInternalTest, AllocObject) {\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012  jobject o = env_-&gt;AllocObject(c);\012  ASSERT_NE(o, nullptr);\012\012 // We have an instance of the class we asked for...\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(o, c));\012 // ...whose fields haven't been initialized because\012 // we didn't call a constructor.\012 // Even with string compression empty string has `count == 0`.\012  ASSERT_EQ(0, env_-&gt;GetIntField(o, env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;)));\012})<SUB>676</SUB>> ]
-"17648" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetVersion) {\012  ASSERT_EQ(JNI_VERSION_1_6, env_-&gt;GetVersion());\012},TEST_F(JniInternalTest, GetVersion) {\012  ASSERT_EQ(JNI_VERSION_1_6, env_-&gt;GetVersion());\012})<SUB>690</SUB>> ]
-"17649" [label = <(UNKNOWN,TEST_F(JniInternalTest, FindClass) {\012 // This tests leads to warnings in the log.\012 ScopedLogSeverity sls(LogSeverity::ERROR);\012\012 FindClassTest(false);\012 FindClassTest(true);\012},TEST_F(JniInternalTest, FindClass) {\012 // This tests leads to warnings in the log.\012 ScopedLogSeverity sls(LogSeverity::ERROR);\012\012 FindClassTest(false);\012 FindClassTest(true);\012})<SUB>694</SUB>> ]
-"17650" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetFieldID) {\012  jclass jlnsfe = env_-&gt;FindClass(&quot;java/lang/NoSuchFieldError&quot;);\012  ASSERT_NE(jlnsfe, nullptr);\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012\012 // Wrong type.\012  jfieldID fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;J&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Wrong type where type doesn't exist.\012  fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;Lrod/jane/freddy;&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Wrong name.\012  fid = env_-&gt;GetFieldID(c, &quot;Count&quot;, &quot;I&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Good declared field lookup.\012  fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;);\012  EXPECT_NE(nullptr, fid);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Good superclass field lookup.\012  c = env_-&gt;FindClass(&quot;java/lang/StringBuilder&quot;);\012  fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;);\012  EXPECT_NE(nullptr, fid);\012  EXPECT_NE(fid, nullptr);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Not instance.\012  fid = env_-&gt;GetFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;Ljava/util/Comparator;&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Bad arguments.\012 GetFieldIdBadArgumentTest(false);\012 GetFieldIdBadArgumentTest(true);\012},TEST_F(JniInternalTest, GetFieldID) {\012  jclass jlnsfe = env_-&gt;FindClass(&quot;java/lang/NoSuchFieldError&quot;);\012  ASSERT_NE(jlnsfe, nullptr);\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012\012 // Wrong type.\012  jfieldID fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;J&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Wrong type where type doesn't exist.\012  fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;Lrod/jane/freddy;&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Wrong name.\012  fid = env_-&gt;GetFieldID(c, &quot;Count&quot;, &quot;I&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Good declared field lookup.\012  fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;);\012  EXPECT_NE(nullptr, fid);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Good superclass field lookup.\012  c = env_-&gt;FindClass(&quot;java/lang/StringBuilder&quot;);\012  fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;);\012  EXPECT_NE(nullptr, fid);\012  EXPECT_NE(fid, nullptr);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Not instance.\012  fid = env_-&gt;GetFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;Ljava/util/Comparator;&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Bad arguments.\012 GetFieldIdBadArgumentTest(false);\012 GetFieldIdBadArgumentTest(true);\012})<SUB>702</SUB>> ]
-"17651" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetStaticFieldID) {\012  jclass jlnsfe = env_-&gt;FindClass(&quot;java/lang/NoSuchFieldError&quot;);\012  ASSERT_NE(jlnsfe, nullptr);\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012\012 // Wrong type.\012  jfieldID fid = env_-&gt;GetStaticFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;J&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Wrong type where type doesn't exist.\012  fid = env_-&gt;GetStaticFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;Lrod/jane/freddy;&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Wrong name.\012  fid = env_-&gt;GetStaticFieldID(c, &quot;cASE_INSENSITIVE_ORDER&quot;, &quot;Ljava/util/Comparator;&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Good declared field lookup.\012  fid = env_-&gt;GetStaticFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;Ljava/util/Comparator;&quot;);\012  EXPECT_NE(nullptr, fid);\012  EXPECT_NE(fid, nullptr);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Not static.\012  fid = env_-&gt;GetStaticFieldID(c, &quot;count&quot;, &quot;I&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Bad arguments.\012 GetStaticFieldIdBadArgumentTest(false);\012 GetStaticFieldIdBadArgumentTest(true);\012},TEST_F(JniInternalTest, GetStaticFieldID) {\012  jclass jlnsfe = env_-&gt;FindClass(&quot;java/lang/NoSuchFieldError&quot;);\012  ASSERT_NE(jlnsfe, nullptr);\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012\012 // Wrong type.\012  jfieldID fid = env_-&gt;GetStaticFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;J&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Wrong type where type doesn't exist.\012  fid = env_-&gt;GetStaticFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;Lrod/jane/freddy;&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Wrong name.\012  fid = env_-&gt;GetStaticFieldID(c, &quot;cASE_INSENSITIVE_ORDER&quot;, &quot;Ljava/util/Comparator;&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Good declared field lookup.\012  fid = env_-&gt;GetStaticFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;Ljava/util/Comparator;&quot;);\012  EXPECT_NE(nullptr, fid);\012  EXPECT_NE(fid, nullptr);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Not static.\012  fid = env_-&gt;GetStaticFieldID(c, &quot;count&quot;, &quot;I&quot;);\012  EXPECT_EQ(nullptr, fid);\012 ExpectException(jlnsfe);\012\012 // Bad arguments.\012 GetStaticFieldIdBadArgumentTest(false);\012 GetStaticFieldIdBadArgumentTest(true);\012})<SUB>745</SUB>> ]
-"17652" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetMethodID) {\012  jclass jlobject = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  jclass jlstring = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  jclass jlnsme = env_-&gt;FindClass(&quot;java/lang/NoSuchMethodError&quot;);\012  jclass jncrbc = env_-&gt;FindClass(&quot;java/nio/channels/ReadableByteChannel&quot;);\012\012 // Sanity check that no exceptions are pending.\012  ASSERT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Check that java.lang.Object.foo() doesn't exist and NoSuchMethodError is\012 // a pending exception.\012  jmethodID method = env_-&gt;GetMethodID(jlobject, &quot;foo&quot;, &quot;()V&quot;);\012  EXPECT_EQ(nullptr, method);\012 ExpectException(jlnsme);\012\012 // Check that java.lang.Object.equals() does exist.\012  method = env_-&gt;GetMethodID(jlobject, &quot;equals&quot;, &quot;(Ljava/lang/Object;)Z&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Check that GetMethodID for java.lang.String.valueOf(int) fails as the\012 // method is static.\012  method = env_-&gt;GetMethodID(jlstring, &quot;valueOf&quot;, &quot;(I)Ljava/lang/String;&quot;);\012  EXPECT_EQ(nullptr, method);\012 ExpectException(jlnsme);\012\012 // Check that GetMethodID for java.lang.NoSuchMethodError.&lt;init&gt;(String) finds the constructor.\012  method = env_-&gt;GetMethodID(jlnsme, &quot;&lt;init&gt;&quot;, &quot;(Ljava/lang/String;)V&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Check that GetMethodID can find a interface method inherited from another interface.\012  method = env_-&gt;GetMethodID(jncrbc, &quot;close&quot;, &quot;()V&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Bad arguments.\012 GetMethodIdBadArgumentTest(false);\012 GetMethodIdBadArgumentTest(true);\012},TEST_F(JniInternalTest, GetMethodID) {\012  jclass jlobject = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  jclass jlstring = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  jclass jlnsme = env_-&gt;FindClass(&quot;java/lang/NoSuchMethodError&quot;);\012  jclass jncrbc = env_-&gt;FindClass(&quot;java/nio/channels/ReadableByteChannel&quot;);\012\012 // Sanity check that no exceptions are pending.\012  ASSERT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Check that java.lang.Object.foo() doesn't exist and NoSuchMethodError is\012 // a pending exception.\012  jmethodID method = env_-&gt;GetMethodID(jlobject, &quot;foo&quot;, &quot;()V&quot;);\012  EXPECT_EQ(nullptr, method);\012 ExpectException(jlnsme);\012\012 // Check that java.lang.Object.equals() does exist.\012  method = env_-&gt;GetMethodID(jlobject, &quot;equals&quot;, &quot;(Ljava/lang/Object;)Z&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Check that GetMethodID for java.lang.String.valueOf(int) fails as the\012 // method is static.\012  method = env_-&gt;GetMethodID(jlstring, &quot;valueOf&quot;, &quot;(I)Ljava/lang/String;&quot;);\012  EXPECT_EQ(nullptr, method);\012 ExpectException(jlnsme);\012\012 // Check that GetMethodID for java.lang.NoSuchMethodError.&lt;init&gt;(String) finds the constructor.\012  method = env_-&gt;GetMethodID(jlnsme, &quot;&lt;init&gt;&quot;, &quot;(Ljava/lang/String;)V&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Check that GetMethodID can find a interface method inherited from another interface.\012  method = env_-&gt;GetMethodID(jncrbc, &quot;close&quot;, &quot;()V&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Bad arguments.\012 GetMethodIdBadArgumentTest(false);\012 GetMethodIdBadArgumentTest(true);\012})<SUB>782</SUB>> ]
-"17653" [label = <(UNKNOWN,TEST_F(JniInternalTest, CallVoidMethodNullReceiver) {\012  jclass jlobject = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  jmethodID method;\012\012 // Check that GetMethodID for java.lang.NoSuchMethodError.&lt;init&gt;(String) finds the constructor.\012  method = env_-&gt;GetMethodID(jlobject, &quot;&lt;init&gt;&quot;, &quot;()V&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Null object to CallVoidMethod.\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  env_-&gt;CallVoidMethod(nullptr, method);\012  check_jni_abort_catcher.Check(&quot;null&quot;);\012},TEST_F(JniInternalTest, CallVoidMethodNullReceiver) {\012  jclass jlobject = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  jmethodID method;\012\012 // Check that GetMethodID for java.lang.NoSuchMethodError.&lt;init&gt;(String) finds the constructor.\012  method = env_-&gt;GetMethodID(jlobject, &quot;&lt;init&gt;&quot;, &quot;()V&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Null object to CallVoidMethod.\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  env_-&gt;CallVoidMethod(nullptr, method);\012  check_jni_abort_catcher.Check(&quot;null&quot;);\012})<SUB>823</SUB>> ]
-"17654" [label = <(UNKNOWN,TEST_F(JniInternalTest, CallVarArgMethodBadPrimitive) {\012 // Check that bad primitive values cause check JNI to abort when\012 // passed out-of-range primitive value var args. As var args can't\012 // differentiate type sizes less than an int, and this isn't\012 // corrected by JNI, this helps ensure JNI code is valid.\012#define DoCall(boxed_type, shorty, c_type, bad_value)                   \\012 {                                                                     \\012    jclass prim_class = env_-&gt;FindClass(&quot;java/lang/&quot; #boxed_type);      \\012    jmethodID method = env_-&gt;GetStaticMethodID(prim_class, &quot;valueOf&quot;,   \\012 &quot;(&quot; #shorty &quot;)Ljava/lang/&quot; #boxed_type &quot;;&quot;); \\012    EXPECT_NE(nullptr, method);                                         \\012    EXPECT_FALSE(env_-&gt;ExceptionCheck());                               \\012 CheckJniAbortCatcher check_jni_abort_catcher;                       \\012    env_-&gt;CallStaticObjectMethod(prim_class, method, bad_value);        \\012    check_jni_abort_catcher.Check(&quot;unexpected &quot; #c_type &quot; value: &quot; #bad_value); \\012 }\012\012 DoCall(Boolean, Z, jboolean, 2);\012 DoCall(Byte, B, jbyte, 128);\012 DoCall(Byte, B, jbyte, -129);\012 DoCall(Short, S, jshort, 32768);\012 DoCall(Short, S, jshort, -32769);\012 DoCall(Character, C, jchar, 65536);\012 DoCall(Character, C, jchar, -1);\012#undef DoCall\012},TEST_F(JniInternalTest, CallVarArgMethodBadPrimitive) {\012 // Check that bad primitive values cause check JNI to abort when\012 // passed out-of-range primitive value var args. As var args can't\012 // differentiate type sizes less than an int, and this isn't\012 // corrected by JNI, this helps ensure JNI code is valid.\012#define DoCall(boxed_type, shorty, c_type, bad_value)                   \\012 {                                                                     \\012    jclass prim_class = env_-&gt;FindClass(&quot;java/lang/&quot; #boxed_type);      \\012    jmethodID method = env_-&gt;GetStaticMethodID(prim_class, &quot;valueOf&quot;,   \\012 &quot;(&quot; #shorty &quot;)Ljava/lang/&quot; #boxed_type &quot;;&quot;); \\012    EXPECT_NE(nullptr, method);                                         \\012    EXPECT_FALSE(env_-&gt;ExceptionCheck());                               \\012 CheckJniAbortCatcher check_jni_abort_catcher;                       \\012    env_-&gt;CallStaticObjectMethod(prim_class, method, bad_value);        \\012    check_jni_abort_catcher.Check(&quot;unexpected &quot; #c_type &quot; value: &quot; #bad_value); \\012 }\012\012 DoCall(Boolean, Z, jboolean, 2);\012 DoCall(Byte, B, jbyte, 128);\012 DoCall(Byte, B, jbyte, -129);\012 DoCall(Short, S, jshort, 32768);\012 DoCall(Short, S, jshort, -32769);\012 DoCall(Character, C, jchar, 65536);\012 DoCall(Character, C, jchar, -1);\012#undef DoCall\012})<SUB>838</SUB>> ]
-"17655" [label = <(UNKNOWN,TEST_F(JniInternalTest, CallJValueMethodBadPrimitive) {\012 // Check that bad primitive values, passed as jvalues, cause check\012 // JNI to abort. Unlike with var args, sizes less than an int should\012 // be truncated or sign extended and not cause an abort except for\012 // jbooleans that are passed as bytes.\012#define DoFailCall(boxed_type, shorty, c_type, bad_value)               \\012 {                                                                     \\012    jclass prim_class = env_-&gt;FindClass(&quot;java/lang/&quot; #boxed_type);      \\012    jmethodID method = env_-&gt;GetStaticMethodID(prim_class, &quot;valueOf&quot;,   \\012 &quot;(&quot; #shorty &quot;)Ljava/lang/&quot; #boxed_type &quot;;&quot;); \\012    EXPECT_NE(nullptr, method);                                         \\012    EXPECT_FALSE(env_-&gt;ExceptionCheck());                               \\012 CheckJniAbortCatcher check_jni_abort_catcher;                       \\012    jvalue jval;                                                        \\012    jval.i = bad_value;                                                 \\012    env_-&gt;CallStaticObjectMethodA(prim_class, method, &amp;jval);           \\012    check_jni_abort_catcher.Check(&quot;unexpected &quot; #c_type &quot; value: &quot; #bad_value); \\012 }\012#define DoGoodCall(boxed_type, shorty, c_type, bad_value)               \\012 {                                                                     \\012    jclass prim_class = env_-&gt;FindClass(&quot;java/lang/&quot; #boxed_type);      \\012    jmethodID method = env_-&gt;GetStaticMethodID(prim_class, &quot;valueOf&quot;,   \\012 &quot;(&quot; #shorty &quot;)Ljava/lang/&quot; #boxed_type &quot;;&quot;); \\012    EXPECT_NE(nullptr, method);                                         \\012    EXPECT_FALSE(env_-&gt;ExceptionCheck());                               \\012    jvalue jval;                                                        \\012    jval.i = bad_value;                                                 \\012    env_-&gt;CallStaticObjectMethodA(prim_class, method, &amp;jval);           \\012 }\012\012 DoFailCall(Boolean, Z, jboolean, 2);\012 DoGoodCall(Byte, B, jbyte, 128);\012 DoGoodCall(Byte, B, jbyte, -129);\012 DoGoodCall(Short, S, jshort, 32768);\012 DoGoodCall(Short, S, jshort, -32769);\012 DoGoodCall(Character, C, jchar, 65536);\012 DoGoodCall(Character, C, jchar, -1);\012#undef DoCall\012},TEST_F(JniInternalTest, CallJValueMethodBadPrimitive) {\012 // Check that bad primitive values, passed as jvalues, cause check\012 // JNI to abort. Unlike with var args, sizes less than an int should\012 // be truncated or sign extended and not cause an abort except for\012 // jbooleans that are passed as bytes.\012#define DoFailCall(boxed_type, shorty, c_type, bad_value)               \\012 {                                                                     \\012    jclass prim_class = env_-&gt;FindClass(&quot;java/lang/&quot; #boxed_type);      \\012    jmethodID method = env_-&gt;GetStaticMethodID(prim_class, &quot;valueOf&quot;,   \\012 &quot;(&quot; #shorty &quot;)Ljava/lang/&quot; #boxed_type &quot;;&quot;); \\012    EXPECT_NE(nullptr, method);                                         \\012    EXPECT_FALSE(env_-&gt;ExceptionCheck());                               \\012 CheckJniAbortCatcher check_jni_abort_catcher;                       \\012    jvalue jval;                                                        \\012    jval.i = bad_value;                                                 \\012    env_-&gt;CallStaticObjectMethodA(prim_class, method, &amp;jval);           \\012    check_jni_abort_catcher.Check(&quot;unexpected &quot; #c_type &quot; value: &quot; #bad_value); \\012 }\012#define DoGoodCall(boxed_type, shorty, c_type, bad_value)               \\012 {                                                                     \\012    jclass prim_class = env_-&gt;FindClass(&quot;java/lang/&quot; #boxed_type);      \\012    jmethodID method = env_-&gt;GetStaticMethodID(prim_class, &quot;valueOf&quot;,   \\012 &quot;(&quot; #shorty &quot;)Ljava/lang/&quot; #boxed_type &quot;;&quot;); \\012    EXPECT_NE(nullptr, method);                                         \\012    EXPECT_FALSE(env_-&gt;ExceptionCheck());                               \\012    jvalue jval;                                                        \\012    jval.i = bad_value;                                                 \\012    env_-&gt;CallStaticObjectMethodA(prim_class, method, &amp;jval);           \\012 }\012\012 DoFailCall(Boolean, Z, jboolean, 2);\012 DoGoodCall(Byte, B, jbyte, 128);\012 DoGoodCall(Byte, B, jbyte, -129);\012 DoGoodCall(Short, S, jshort, 32768);\012 DoGoodCall(Short, S, jshort, -32769);\012 DoGoodCall(Character, C, jchar, 65536);\012 DoGoodCall(Character, C, jchar, -1);\012#undef DoCall\012})<SUB>865</SUB>> ]
-"17656" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetStaticMethodID) {\012  jclass jlobject = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  jclass jlnsme = env_-&gt;FindClass(&quot;java/lang/NoSuchMethodError&quot;);\012\012 // Sanity check that no exceptions are pending\012  ASSERT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Check that java.lang.Object.foo() doesn't exist and NoSuchMethodError is\012 // a pending exception\012  jmethodID method = env_-&gt;GetStaticMethodID(jlobject, &quot;foo&quot;, &quot;()V&quot;);\012  EXPECT_EQ(nullptr, method);\012 ExpectException(jlnsme);\012\012 // Check that GetStaticMethodID for java.lang.Object.equals(Object) fails as\012 // the method is not static\012  method = env_-&gt;GetStaticMethodID(jlobject, &quot;equals&quot;, &quot;(Ljava/lang/Object;)Z&quot;);\012  EXPECT_EQ(nullptr, method);\012 ExpectException(jlnsme);\012\012 // Check that java.lang.String.valueOf(int) does exist\012  jclass jlstring = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  method = env_-&gt;GetStaticMethodID(jlstring, &quot;valueOf&quot;, &quot;(I)Ljava/lang/String;&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Bad arguments.\012 GetStaticMethodIdBadArgumentTest(false);\012 GetStaticMethodIdBadArgumentTest(true);\012},TEST_F(JniInternalTest, GetStaticMethodID) {\012  jclass jlobject = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  jclass jlnsme = env_-&gt;FindClass(&quot;java/lang/NoSuchMethodError&quot;);\012\012 // Sanity check that no exceptions are pending\012  ASSERT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Check that java.lang.Object.foo() doesn't exist and NoSuchMethodError is\012 // a pending exception\012  jmethodID method = env_-&gt;GetStaticMethodID(jlobject, &quot;foo&quot;, &quot;()V&quot;);\012  EXPECT_EQ(nullptr, method);\012 ExpectException(jlnsme);\012\012 // Check that GetStaticMethodID for java.lang.Object.equals(Object) fails as\012 // the method is not static\012  method = env_-&gt;GetStaticMethodID(jlobject, &quot;equals&quot;, &quot;(Ljava/lang/Object;)Z&quot;);\012  EXPECT_EQ(nullptr, method);\012 ExpectException(jlnsme);\012\012 // Check that java.lang.String.valueOf(int) does exist\012  jclass jlstring = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  method = env_-&gt;GetStaticMethodID(jlstring, &quot;valueOf&quot;, &quot;(I)Ljava/lang/String;&quot;);\012  EXPECT_NE(nullptr, method);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Bad arguments.\012 GetStaticMethodIdBadArgumentTest(false);\012 GetStaticMethodIdBadArgumentTest(true);\012})<SUB>905</SUB>> ]
-"17675" [label = <(UNKNOWN,TEST_F(JniInternalTest, FromReflectedField_ToReflectedField) {\012  jclass jlrField = env_-&gt;FindClass(&quot;java/lang/reflect/Field&quot;);\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012  jfieldID fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;);\012  ASSERT_NE(fid, nullptr);\012 // Turn the fid into a java.lang.reflect.Field...\012  jobject field = env_-&gt;ToReflectedField(c, fid, JNI_FALSE);\012 size_t capacity_before = GetLocalsCapacity(env_);\012 for (size_t i = 0; i &lt;= 10; ++i) {\012 // Regression test for b/18396311, ToReflectedField leaking local refs causing a local\012 // reference table overflows with 512 references to ArtField\012    env_-&gt;DeleteLocalRef(env_-&gt;ToReflectedField(c, fid, JNI_FALSE));\012 }\012 size_t capacity_after = GetLocalsCapacity(env_);\012  ASSERT_EQ(capacity_before, capacity_after);\012\012  ASSERT_NE(c, nullptr);\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(field, jlrField));\012 // ...and back again.\012  jfieldID fid2 = env_-&gt;FromReflectedField(field);\012  ASSERT_NE(fid2, nullptr);\012 // Make sure we can actually use it.\012  jstring s = env_-&gt;NewStringUTF(&quot;poop&quot;);\012 if (mirror::kUseStringCompression) {\012    ASSERT_EQ(mirror::String::GetFlaggedCount(4, /* compressible= */ true),\012              env_-&gt;GetIntField(s, fid2));\012 // Create incompressible string\012    jstring s_16 = env_-&gt;NewStringUTF(&quot;\u0444\u0444&quot;);\012    ASSERT_EQ(mirror::String::GetFlaggedCount(2, /* compressible= */ false),\012              env_-&gt;GetIntField(s_16, fid2));\012 } else {\012    ASSERT_EQ(4, env_-&gt;GetIntField(s, fid2));\012 }\012 // Bad arguments.\012 GetFromReflectedField_ToReflectedFieldBadArgumentTest(false);\012 GetFromReflectedField_ToReflectedFieldBadArgumentTest(true);\012},TEST_F(JniInternalTest, FromReflectedField_ToReflectedField) {\012  jclass jlrField = env_-&gt;FindClass(&quot;java/lang/reflect/Field&quot;);\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012  jfieldID fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;);\012  ASSERT_NE(fid, nullptr);\012 // Turn the fid into a java.lang.reflect.Field...\012  jobject field = env_-&gt;ToReflectedField(c, fid, JNI_FALSE);\012 size_t capacity_before = GetLocalsCapacity(env_);\012 for (size_t i = 0; i &lt;= 10; ++i) {\012 // Regression test for b/18396311, ToReflectedField leaking local refs causing a local\012 // reference table overflows with 512 references to ArtField\012    env_-&gt;DeleteLocalRef(env_-&gt;ToReflectedField(c, fid, JNI_FALSE));\012 }\012 size_t capacity_after = GetLocalsCapacity(env_);\012  ASSERT_EQ(capacity_before, capacity_after);\012\012  ASSERT_NE(c, nullptr);\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(field, jlrField));\012 // ...and back again.\012  jfieldID fid2 = env_-&gt;FromReflectedField(field);\012  ASSERT_NE(fid2, nullptr);\012 // Make sure we can actually use it.\012  jstring s = env_-&gt;NewStringUTF(&quot;poop&quot;);\012 if (mirror::kUseStringCompression) {\012    ASSERT_EQ(mirror::String::GetFlaggedCount(4, /* compressible= */ true),\012              env_-&gt;GetIntField(s, fid2));\012 // Create incompressible string\012    jstring s_16 = env_-&gt;NewStringUTF(&quot;\u0444\u0444&quot;);\012    ASSERT_EQ(mirror::String::GetFlaggedCount(2, /* compressible= */ false),\012              env_-&gt;GetIntField(s_16, fid2));\012 } else {\012    ASSERT_EQ(4, env_-&gt;GetIntField(s, fid2));\012 }\012 // Bad arguments.\012 GetFromReflectedField_ToReflectedFieldBadArgumentTest(false);\012 GetFromReflectedField_ToReflectedFieldBadArgumentTest(true);\012})<SUB>940</SUB>> ]
-"17676" [label = <(UNKNOWN,TEST_F(JniInternalTest, FromReflectedMethod_ToReflectedMethod) {\012  jclass jlrMethod = env_-&gt;FindClass(&quot;java/lang/reflect/Method&quot;);\012  ASSERT_NE(jlrMethod, nullptr);\012  jclass jlrConstructor = env_-&gt;FindClass(&quot;java/lang/reflect/Constructor&quot;);\012  ASSERT_NE(jlrConstructor, nullptr);\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012\012  jmethodID mid = env_-&gt;GetMethodID(c, &quot;&lt;init&gt;&quot;, &quot;()V&quot;);\012  ASSERT_NE(mid, nullptr);\012 // Turn the mid into a java.lang.reflect.Constructor...\012  jobject method = env_-&gt;ToReflectedMethod(c, mid, JNI_FALSE);\012 size_t capacity_before = GetLocalsCapacity(env_);\012 for (size_t i = 0; i &lt;= 10; ++i) {\012 // Regression test for b/18396311, ToReflectedMethod leaking local refs causing a local\012 // reference table overflows with 512 references to ArtMethod\012    env_-&gt;DeleteLocalRef(env_-&gt;ToReflectedMethod(c, mid, JNI_FALSE));\012 }\012 size_t capacity_after = GetLocalsCapacity(env_);\012  ASSERT_EQ(capacity_before, capacity_after);\012  ASSERT_NE(method, nullptr);\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(method, jlrConstructor));\012 // ...and back again.\012  jmethodID mid2 = env_-&gt;FromReflectedMethod(method);\012  ASSERT_NE(mid2, nullptr);\012 // Make sure we can actually use it.\012  jstring s = reinterpret_cast&lt;jstring&gt;(env_-&gt;AllocObject(c));\012  ASSERT_NE(s, nullptr);\012  env_-&gt;CallVoidMethod(s, mid2);\012  ASSERT_EQ(JNI_FALSE, env_-&gt;ExceptionCheck());\012  env_-&gt;ExceptionClear();\012\012  mid = env_-&gt;GetMethodID(c, &quot;length&quot;, &quot;()I&quot;);\012  ASSERT_NE(mid, nullptr);\012 // Turn the mid into a java.lang.reflect.Method...\012  method = env_-&gt;ToReflectedMethod(c, mid, JNI_FALSE);\012  ASSERT_NE(method, nullptr);\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(method, jlrMethod));\012 // ...and back again.\012  mid2 = env_-&gt;FromReflectedMethod(method);\012  ASSERT_NE(mid2, nullptr);\012 // Make sure we can actually use it.\012  s = env_-&gt;NewStringUTF(&quot;poop&quot;);\012  ASSERT_NE(s, nullptr);\012  ASSERT_EQ(4, env_-&gt;CallIntMethod(s, mid2));\012\012 // Bad arguments.\012 GetFromReflectedMethod_ToReflectedMethodBadArgumentTest(false);\012 GetFromReflectedMethod_ToReflectedMethodBadArgumentTest(true);\012},TEST_F(JniInternalTest, FromReflectedMethod_ToReflectedMethod) {\012  jclass jlrMethod = env_-&gt;FindClass(&quot;java/lang/reflect/Method&quot;);\012  ASSERT_NE(jlrMethod, nullptr);\012  jclass jlrConstructor = env_-&gt;FindClass(&quot;java/lang/reflect/Constructor&quot;);\012  ASSERT_NE(jlrConstructor, nullptr);\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012\012  jmethodID mid = env_-&gt;GetMethodID(c, &quot;&lt;init&gt;&quot;, &quot;()V&quot;);\012  ASSERT_NE(mid, nullptr);\012 // Turn the mid into a java.lang.reflect.Constructor...\012  jobject method = env_-&gt;ToReflectedMethod(c, mid, JNI_FALSE);\012 size_t capacity_before = GetLocalsCapacity(env_);\012 for (size_t i = 0; i &lt;= 10; ++i) {\012 // Regression test for b/18396311, ToReflectedMethod leaking local refs causing a local\012 // reference table overflows with 512 references to ArtMethod\012    env_-&gt;DeleteLocalRef(env_-&gt;ToReflectedMethod(c, mid, JNI_FALSE));\012 }\012 size_t capacity_after = GetLocalsCapacity(env_);\012  ASSERT_EQ(capacity_before, capacity_after);\012  ASSERT_NE(method, nullptr);\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(method, jlrConstructor));\012 // ...and back again.\012  jmethodID mid2 = env_-&gt;FromReflectedMethod(method);\012  ASSERT_NE(mid2, nullptr);\012 // Make sure we can actually use it.\012  jstring s = reinterpret_cast&lt;jstring&gt;(env_-&gt;AllocObject(c));\012  ASSERT_NE(s, nullptr);\012  env_-&gt;CallVoidMethod(s, mid2);\012  ASSERT_EQ(JNI_FALSE, env_-&gt;ExceptionCheck());\012  env_-&gt;ExceptionClear();\012\012  mid = env_-&gt;GetMethodID(c, &quot;length&quot;, &quot;()I&quot;);\012  ASSERT_NE(mid, nullptr);\012 // Turn the mid into a java.lang.reflect.Method...\012  method = env_-&gt;ToReflectedMethod(c, mid, JNI_FALSE);\012  ASSERT_NE(method, nullptr);\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(method, jlrMethod));\012 // ...and back again.\012  mid2 = env_-&gt;FromReflectedMethod(method);\012  ASSERT_NE(mid2, nullptr);\012 // Make sure we can actually use it.\012  s = env_-&gt;NewStringUTF(&quot;poop&quot;);\012  ASSERT_NE(s, nullptr);\012  ASSERT_EQ(4, env_-&gt;CallIntMethod(s, mid2));\012\012 // Bad arguments.\012 GetFromReflectedMethod_ToReflectedMethodBadArgumentTest(false);\012 GetFromReflectedMethod_ToReflectedMethodBadArgumentTest(true);\012})<SUB>979</SUB>> ]
-"17681" [label = <(UNKNOWN,TEST_F(JniInternalTest, RegisterAndUnregisterNatives) {\012  jclass jlobject = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  jclass jlnsme = env_-&gt;FindClass(&quot;java/lang/NoSuchMethodError&quot;);\012 void* native_function = reinterpret_cast&lt;void*&gt;(BogusMethod);\012\012 // Sanity check that no exceptions are pending.\012  ASSERT_FALSE(env_-&gt;ExceptionCheck());\012\012 // The following can print errors to the log we'd like to ignore.\012 {\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012 // Check that registering method without name causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { nullptr, &quot;()V&quot;, native_function } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012\012 // Check that registering method without signature causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { &quot;notify&quot;, nullptr, native_function } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012\012 // Check that registering method without function causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { &quot;notify&quot;, &quot;()V&quot;, nullptr } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012\012 // Check that registering to a non-existent java.lang.Object.foo() causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { &quot;foo&quot;, &quot;()V&quot;, native_function } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012\012 // Check that registering non-native methods causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { &quot;equals&quot;, &quot;(Ljava/lang/Object;)Z&quot;, native_function } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012 }\012\012 // Check that registering native methods is successful.\012 {\012 JNINativeMethod methods[] = { { &quot;notify&quot;, &quot;()V&quot;, native_function } };\012    EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_OK);\012 }\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012  EXPECT_EQ(env_-&gt;UnregisterNatives(jlobject), JNI_OK);\012\012 // Check that registering no methods isn't a failure.\012 {\012 JNINativeMethod methods[] = { };\012    EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 0), JNI_OK);\012 }\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012  EXPECT_EQ(env_-&gt;UnregisterNatives(jlobject), JNI_OK);\012\012 // Check that registering a -ve number of methods is a failure.\012 CheckJniAbortCatcher check_jni_abort_catcher;\012 for (int i = -10; i &lt; 0; ++i) {\012 JNINativeMethod methods[] = { };\012    EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, i), JNI_ERR);\012    check_jni_abort_catcher.Check(&quot;negative method count: &quot;);\012 }\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Unregistering a class with no natives is a warning.\012  EXPECT_EQ(env_-&gt;UnregisterNatives(jlnsme), JNI_OK);\012\012 RegisterAndUnregisterNativesBadArguments(false, &amp;check_jni_abort_catcher);\012 RegisterAndUnregisterNativesBadArguments(true, &amp;check_jni_abort_catcher);\012},TEST_F(JniInternalTest, RegisterAndUnregisterNatives) {\012  jclass jlobject = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  jclass jlnsme = env_-&gt;FindClass(&quot;java/lang/NoSuchMethodError&quot;);\012 void* native_function = reinterpret_cast&lt;void*&gt;(BogusMethod);\012\012 // Sanity check that no exceptions are pending.\012  ASSERT_FALSE(env_-&gt;ExceptionCheck());\012\012 // The following can print errors to the log we'd like to ignore.\012 {\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012 // Check that registering method without name causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { nullptr, &quot;()V&quot;, native_function } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012\012 // Check that registering method without signature causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { &quot;notify&quot;, nullptr, native_function } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012\012 // Check that registering method without function causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { &quot;notify&quot;, &quot;()V&quot;, nullptr } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012\012 // Check that registering to a non-existent java.lang.Object.foo() causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { &quot;foo&quot;, &quot;()V&quot;, native_function } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012\012 // Check that registering non-native methods causes a NoSuchMethodError.\012 {\012 JNINativeMethod methods[] = { { &quot;equals&quot;, &quot;(Ljava/lang/Object;)Z&quot;, native_function } };\012      EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_ERR);\012 }\012 ExpectException(jlnsme);\012 }\012\012 // Check that registering native methods is successful.\012 {\012 JNINativeMethod methods[] = { { &quot;notify&quot;, &quot;()V&quot;, native_function } };\012    EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 1), JNI_OK);\012 }\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012  EXPECT_EQ(env_-&gt;UnregisterNatives(jlobject), JNI_OK);\012\012 // Check that registering no methods isn't a failure.\012 {\012 JNINativeMethod methods[] = { };\012    EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, 0), JNI_OK);\012 }\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012  EXPECT_EQ(env_-&gt;UnregisterNatives(jlobject), JNI_OK);\012\012 // Check that registering a -ve number of methods is a failure.\012 CheckJniAbortCatcher check_jni_abort_catcher;\012 for (int i = -10; i &lt; 0; ++i) {\012 JNINativeMethod methods[] = { };\012    EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, methods, i), JNI_ERR);\012    check_jni_abort_catcher.Check(&quot;negative method count: &quot;);\012 }\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Unregistering a class with no natives is a warning.\012  EXPECT_EQ(env_-&gt;UnregisterNatives(jlnsme), JNI_OK);\012\012 RegisterAndUnregisterNativesBadArguments(false, &amp;check_jni_abort_catcher);\012 RegisterAndUnregisterNativesBadArguments(true, &amp;check_jni_abort_catcher);\012})<SUB>1034</SUB>> ]
-"17682" [label = <(UNKNOWN,TEST_F(JniInternalTest, BooleanArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewBooleanArray, GetBooleanArrayRegion, SetBooleanArrayRegion,\012 GetBooleanArrayElements, ReleaseBooleanArrayElements, jboolean, &quot;[Z&quot;);\012},TEST_F(JniInternalTest, BooleanArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewBooleanArray, GetBooleanArrayRegion, SetBooleanArrayRegion,\012 GetBooleanArrayElements, ReleaseBooleanArrayElements, jboolean, &quot;[Z&quot;);\012})<SUB>1225</SUB>> ]
-"17683" [label = <(UNKNOWN,TEST_F(JniInternalTest, ByteArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewByteArray, GetByteArrayRegion, SetByteArrayRegion,\012 GetByteArrayElements, ReleaseByteArrayElements, jbyte, &quot;[B&quot;);\012},TEST_F(JniInternalTest, ByteArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewByteArray, GetByteArrayRegion, SetByteArrayRegion,\012 GetByteArrayElements, ReleaseByteArrayElements, jbyte, &quot;[B&quot;);\012})<SUB>1229</SUB>> ]
-"17684" [label = <(UNKNOWN,TEST_F(JniInternalTest, CharArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewCharArray, GetCharArrayRegion, SetCharArrayRegion,\012 GetCharArrayElements, ReleaseCharArrayElements, jchar, &quot;[C&quot;);\012},TEST_F(JniInternalTest, CharArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewCharArray, GetCharArrayRegion, SetCharArrayRegion,\012 GetCharArrayElements, ReleaseCharArrayElements, jchar, &quot;[C&quot;);\012})<SUB>1233</SUB>> ]
-"17685" [label = <(UNKNOWN,TEST_F(JniInternalTest, DoubleArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewDoubleArray, GetDoubleArrayRegion, SetDoubleArrayRegion,\012 GetDoubleArrayElements, ReleaseDoubleArrayElements, jdouble, &quot;[D&quot;);\012},TEST_F(JniInternalTest, DoubleArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewDoubleArray, GetDoubleArrayRegion, SetDoubleArrayRegion,\012 GetDoubleArrayElements, ReleaseDoubleArrayElements, jdouble, &quot;[D&quot;);\012})<SUB>1237</SUB>> ]
-"17686" [label = <(UNKNOWN,TEST_F(JniInternalTest, FloatArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewFloatArray, GetFloatArrayRegion, SetFloatArrayRegion,\012 GetFloatArrayElements, ReleaseFloatArrayElements, jfloat, &quot;[F&quot;);\012},TEST_F(JniInternalTest, FloatArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewFloatArray, GetFloatArrayRegion, SetFloatArrayRegion,\012 GetFloatArrayElements, ReleaseFloatArrayElements, jfloat, &quot;[F&quot;);\012})<SUB>1241</SUB>> ]
-"17687" [label = <(UNKNOWN,TEST_F(JniInternalTest, IntArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewIntArray, GetIntArrayRegion, SetIntArrayRegion,\012 GetIntArrayElements, ReleaseIntArrayElements, jint, &quot;[I&quot;);\012},TEST_F(JniInternalTest, IntArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewIntArray, GetIntArrayRegion, SetIntArrayRegion,\012 GetIntArrayElements, ReleaseIntArrayElements, jint, &quot;[I&quot;);\012})<SUB>1245</SUB>> ]
-"17688" [label = <(UNKNOWN,TEST_F(JniInternalTest, LongArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewLongArray, GetLongArrayRegion, SetLongArrayRegion,\012 GetLongArrayElements, ReleaseLongArrayElements, jlong, &quot;[J&quot;);\012},TEST_F(JniInternalTest, LongArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewLongArray, GetLongArrayRegion, SetLongArrayRegion,\012 GetLongArrayElements, ReleaseLongArrayElements, jlong, &quot;[J&quot;);\012})<SUB>1249</SUB>> ]
-"17689" [label = <(UNKNOWN,TEST_F(JniInternalTest, ShortArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewShortArray, GetShortArrayRegion, SetShortArrayRegion,\012 GetShortArrayElements, ReleaseShortArrayElements, jshort, &quot;[S&quot;);\012},TEST_F(JniInternalTest, ShortArrays) {\012  EXPECT_PRIMITIVE_ARRAY(NewShortArray, GetShortArrayRegion, SetShortArrayRegion,\012 GetShortArrayElements, ReleaseShortArrayElements, jshort, &quot;[S&quot;);\012})<SUB>1253</SUB>> ]
-"17690" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetPrimitiveArrayElementsOfWrongType) {\012 GetPrimitiveArrayElementsOfWrongType(false);\012 GetPrimitiveArrayElementsOfWrongType(true);\012},TEST_F(JniInternalTest, GetPrimitiveArrayElementsOfWrongType) {\012 GetPrimitiveArrayElementsOfWrongType(false);\012 GetPrimitiveArrayElementsOfWrongType(true);\012})<SUB>1258</SUB>> ]
-"17691" [label = <(UNKNOWN,TEST_F(JniInternalTest, ReleasePrimitiveArrayElementsOfWrongType) {\012 ReleasePrimitiveArrayElementsOfWrongType(false);\012 ReleasePrimitiveArrayElementsOfWrongType(true);\012},TEST_F(JniInternalTest, ReleasePrimitiveArrayElementsOfWrongType) {\012 ReleasePrimitiveArrayElementsOfWrongType(false);\012 ReleasePrimitiveArrayElementsOfWrongType(true);\012})<SUB>1263</SUB>> ]
-"17692" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetReleasePrimitiveArrayCriticalOfWrongType) {\012 GetReleasePrimitiveArrayCriticalOfWrongType(false);\012 GetReleasePrimitiveArrayCriticalOfWrongType(true);\012},TEST_F(JniInternalTest, GetReleasePrimitiveArrayCriticalOfWrongType) {\012 GetReleasePrimitiveArrayCriticalOfWrongType(false);\012 GetReleasePrimitiveArrayCriticalOfWrongType(true);\012})<SUB>1268</SUB>> ]
-"17693" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetPrimitiveArrayRegionElementsOfWrongType) {\012 GetPrimitiveArrayRegionElementsOfWrongType(false);\012 GetPrimitiveArrayRegionElementsOfWrongType(true);\012},TEST_F(JniInternalTest, GetPrimitiveArrayRegionElementsOfWrongType) {\012 GetPrimitiveArrayRegionElementsOfWrongType(false);\012 GetPrimitiveArrayRegionElementsOfWrongType(true);\012})<SUB>1273</SUB>> ]
-"17694" [label = <(UNKNOWN,TEST_F(JniInternalTest, SetPrimitiveArrayRegionElementsOfWrongType) {\012 SetPrimitiveArrayRegionElementsOfWrongType(false);\012 SetPrimitiveArrayRegionElementsOfWrongType(true);\012},TEST_F(JniInternalTest, SetPrimitiveArrayRegionElementsOfWrongType) {\012 SetPrimitiveArrayRegionElementsOfWrongType(false);\012 SetPrimitiveArrayRegionElementsOfWrongType(true);\012})<SUB>1278</SUB>> ]
-"17695" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewObjectArray) {\012  jclass element_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(element_class, nullptr);\012  jclass array_class = env_-&gt;FindClass(&quot;[Ljava/lang/String;&quot;);\012  ASSERT_NE(array_class, nullptr);\012\012  jobjectArray a = env_-&gt;NewObjectArray(0, element_class, nullptr);\012  EXPECT_NE(a, nullptr);\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(a, array_class));\012  EXPECT_EQ(0, env_-&gt;GetArrayLength(a));\012\012  a = env_-&gt;NewObjectArray(1, element_class, nullptr);\012  EXPECT_NE(a, nullptr);\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(a, array_class));\012  EXPECT_EQ(1, env_-&gt;GetArrayLength(a));\012  EXPECT_TRUE(env_-&gt;IsSameObject(env_-&gt;GetObjectArrayElement(a, 0), nullptr));\012\012 // Negative array length checks.\012 NewObjectArrayBadArguments(false);\012 NewObjectArrayBadArguments(true);\012},TEST_F(JniInternalTest, NewObjectArray) {\012  jclass element_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(element_class, nullptr);\012  jclass array_class = env_-&gt;FindClass(&quot;[Ljava/lang/String;&quot;);\012  ASSERT_NE(array_class, nullptr);\012\012  jobjectArray a = env_-&gt;NewObjectArray(0, element_class, nullptr);\012  EXPECT_NE(a, nullptr);\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(a, array_class));\012  EXPECT_EQ(0, env_-&gt;GetArrayLength(a));\012\012  a = env_-&gt;NewObjectArray(1, element_class, nullptr);\012  EXPECT_NE(a, nullptr);\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(a, array_class));\012  EXPECT_EQ(1, env_-&gt;GetArrayLength(a));\012  EXPECT_TRUE(env_-&gt;IsSameObject(env_-&gt;GetObjectArrayElement(a, 0), nullptr));\012\012 // Negative array length checks.\012 NewObjectArrayBadArguments(false);\012 NewObjectArrayBadArguments(true);\012})<SUB>1283</SUB>> ]
-"17696" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewObjectArrayWithPrimitiveClasses) {\012 const char* primitive_descriptors = &quot;VZBSCIJFD&quot;;\012 const char* primitive_names[] = {\012 &quot;void&quot;, &quot;boolean&quot;, &quot;byte&quot;, &quot;short&quot;, &quot;char&quot;, &quot;int&quot;, &quot;long&quot;, &quot;float&quot;, &quot;double&quot;\012 };\012  ASSERT_EQ(strlen(primitive_descriptors), arraysize(primitive_names));\012\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 CheckJniAbortCatcher jni_abort_catcher;\012 for (size_t i = 0; i &lt; strlen(primitive_descriptors); ++i) {\012    env_-&gt;NewObjectArray(0, nullptr, nullptr);\012    jni_abort_catcher.Check(&quot;element_jclass == null&quot;);\012    jclass primitive_class = GetPrimitiveClass(primitive_descriptors[i]);\012    env_-&gt;NewObjectArray(1, primitive_class, nullptr);\012    std::string error_msg(StringPrintf(&quot;not an object type: %s&quot;, primitive_names[i]));\012    jni_abort_catcher.Check(error_msg.c_str());\012 }\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012 for (size_t i = 0; i &lt; strlen(primitive_descriptors); ++i) {\012    env_-&gt;NewObjectArray(0, nullptr, nullptr);\012    jni_abort_catcher.Check(&quot;NewObjectArray received NULL jclass&quot;);\012    jclass primitive_class = GetPrimitiveClass(primitive_descriptors[i]);\012    env_-&gt;NewObjectArray(1, primitive_class, nullptr);\012    std::string error_msg(StringPrintf(&quot;not an object type: %s&quot;, primitive_names[i]));\012    jni_abort_catcher.Check(error_msg.c_str());\012 }\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012},TEST_F(JniInternalTest, NewObjectArrayWithPrimitiveClasses) {\012 const char* primitive_descriptors = &quot;VZBSCIJFD&quot;;\012 const char* primitive_names[] = {\012 &quot;void&quot;, &quot;boolean&quot;, &quot;byte&quot;, &quot;short&quot;, &quot;char&quot;, &quot;int&quot;, &quot;long&quot;, &quot;float&quot;, &quot;double&quot;\012 };\012  ASSERT_EQ(strlen(primitive_descriptors), arraysize(primitive_names));\012\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 CheckJniAbortCatcher jni_abort_catcher;\012 for (size_t i = 0; i &lt; strlen(primitive_descriptors); ++i) {\012    env_-&gt;NewObjectArray(0, nullptr, nullptr);\012    jni_abort_catcher.Check(&quot;element_jclass == null&quot;);\012    jclass primitive_class = GetPrimitiveClass(primitive_descriptors[i]);\012    env_-&gt;NewObjectArray(1, primitive_class, nullptr);\012    std::string error_msg(StringPrintf(&quot;not an object type: %s&quot;, primitive_names[i]));\012    jni_abort_catcher.Check(error_msg.c_str());\012 }\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012 for (size_t i = 0; i &lt; strlen(primitive_descriptors); ++i) {\012    env_-&gt;NewObjectArray(0, nullptr, nullptr);\012    jni_abort_catcher.Check(&quot;NewObjectArray received NULL jclass&quot;);\012    jclass primitive_class = GetPrimitiveClass(primitive_descriptors[i]);\012    env_-&gt;NewObjectArray(1, primitive_class, nullptr);\012    std::string error_msg(StringPrintf(&quot;not an object type: %s&quot;, primitive_names[i]));\012    jni_abort_catcher.Check(error_msg.c_str());\012 }\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012})<SUB>1305</SUB>> ]
-"17697" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewObjectArrayWithInitialValue) {\012  jclass element_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(element_class, nullptr);\012  jclass array_class = env_-&gt;FindClass(&quot;[Ljava/lang/String;&quot;);\012  ASSERT_NE(array_class, nullptr);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;poop&quot;);\012  jobjectArray a = env_-&gt;NewObjectArray(2, element_class, s);\012  EXPECT_NE(a, nullptr);\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(a, array_class));\012  EXPECT_EQ(2, env_-&gt;GetArrayLength(a));\012  EXPECT_TRUE(env_-&gt;IsSameObject(env_-&gt;GetObjectArrayElement(a, 0), s));\012  EXPECT_TRUE(env_-&gt;IsSameObject(env_-&gt;GetObjectArrayElement(a, 1), s));\012\012 // Attempt to incorrect create an array of strings with initial value of string arrays.\012 CheckJniAbortCatcher jni_abort_catcher;\012  env_-&gt;NewObjectArray(2, element_class, a);\012  jni_abort_catcher.Check(&quot;cannot assign object of type 'java.lang.String[]' to array with element &quot;\012 &quot;type of 'java.lang.String'&quot;);\012},TEST_F(JniInternalTest, NewObjectArrayWithInitialValue) {\012  jclass element_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(element_class, nullptr);\012  jclass array_class = env_-&gt;FindClass(&quot;[Ljava/lang/String;&quot;);\012  ASSERT_NE(array_class, nullptr);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;poop&quot;);\012  jobjectArray a = env_-&gt;NewObjectArray(2, element_class, s);\012  EXPECT_NE(a, nullptr);\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(a, array_class));\012  EXPECT_EQ(2, env_-&gt;GetArrayLength(a));\012  EXPECT_TRUE(env_-&gt;IsSameObject(env_-&gt;GetObjectArrayElement(a, 0), s));\012  EXPECT_TRUE(env_-&gt;IsSameObject(env_-&gt;GetObjectArrayElement(a, 1), s));\012\012 // Attempt to incorrect create an array of strings with initial value of string arrays.\012 CheckJniAbortCatcher jni_abort_catcher;\012  env_-&gt;NewObjectArray(2, element_class, a);\012  jni_abort_catcher.Check(&quot;cannot assign object of type 'java.lang.String[]' to array with element &quot;\012 &quot;type of 'java.lang.String'&quot;);\012})<SUB>1334</SUB>> ]
-"17698" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetArrayLength) {\012 // Already tested in NewObjectArray/NewPrimitiveArray except for null.\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(0, env_-&gt;GetArrayLength(nullptr));\012  jni_abort_catcher.Check(&quot;java_array == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(JNI_ERR, env_-&gt;GetArrayLength(nullptr));\012  jni_abort_catcher.Check(&quot;jarray was NULL&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012},TEST_F(JniInternalTest, GetArrayLength) {\012 // Already tested in NewObjectArray/NewPrimitiveArray except for null.\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(0, env_-&gt;GetArrayLength(nullptr));\012  jni_abort_catcher.Check(&quot;java_array == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(JNI_ERR, env_-&gt;GetArrayLength(nullptr));\012  jni_abort_catcher.Check(&quot;jarray was NULL&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012})<SUB>1355</SUB>> ]
-"17699" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetObjectClass) {\012  jclass string_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(string_class, nullptr);\012  jclass class_class = env_-&gt;FindClass(&quot;java/lang/Class&quot;);\012  ASSERT_NE(class_class, nullptr);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;poop&quot;);\012  jclass c = env_-&gt;GetObjectClass(s);\012  ASSERT_TRUE(env_-&gt;IsSameObject(string_class, c));\012\012  jclass c2 = env_-&gt;GetObjectClass(c);\012  ASSERT_TRUE(env_-&gt;IsSameObject(class_class, env_-&gt;GetObjectClass(c2)));\012\012 // Null as object should fail.\012 CheckJniAbortCatcher jni_abort_catcher;\012  EXPECT_EQ(env_-&gt;GetObjectClass(nullptr), nullptr);\012  jni_abort_catcher.Check(&quot;java_object == null&quot;);\012},TEST_F(JniInternalTest, GetObjectClass) {\012  jclass string_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(string_class, nullptr);\012  jclass class_class = env_-&gt;FindClass(&quot;java/lang/Class&quot;);\012  ASSERT_NE(class_class, nullptr);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;poop&quot;);\012  jclass c = env_-&gt;GetObjectClass(s);\012  ASSERT_TRUE(env_-&gt;IsSameObject(string_class, c));\012\012  jclass c2 = env_-&gt;GetObjectClass(c);\012  ASSERT_TRUE(env_-&gt;IsSameObject(class_class, env_-&gt;GetObjectClass(c2)));\012\012 // Null as object should fail.\012 CheckJniAbortCatcher jni_abort_catcher;\012  EXPECT_EQ(env_-&gt;GetObjectClass(nullptr), nullptr);\012  jni_abort_catcher.Check(&quot;java_object == null&quot;);\012})<SUB>1367</SUB>> ]
-"17700" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetSuperclass) {\012  jclass object_class = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_NE(object_class, nullptr);\012  jclass string_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(string_class, nullptr);\012  jclass runnable_interface = env_-&gt;FindClass(&quot;java/lang/Runnable&quot;);\012  ASSERT_NE(runnable_interface, nullptr);\012  ASSERT_TRUE(env_-&gt;IsSameObject(object_class, env_-&gt;GetSuperclass(string_class)));\012  ASSERT_EQ(env_-&gt;GetSuperclass(object_class), nullptr);\012  ASSERT_EQ(env_-&gt;GetSuperclass(runnable_interface), nullptr);\012\012 // Null as class should fail.\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(env_-&gt;GetSuperclass(nullptr), nullptr);\012  jni_abort_catcher.Check(&quot;java_class == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(env_-&gt;GetSuperclass(nullptr), nullptr);\012  jni_abort_catcher.Check(&quot;GetSuperclass received NULL jclass&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012},TEST_F(JniInternalTest, GetSuperclass) {\012  jclass object_class = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_NE(object_class, nullptr);\012  jclass string_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(string_class, nullptr);\012  jclass runnable_interface = env_-&gt;FindClass(&quot;java/lang/Runnable&quot;);\012  ASSERT_NE(runnable_interface, nullptr);\012  ASSERT_TRUE(env_-&gt;IsSameObject(object_class, env_-&gt;GetSuperclass(string_class)));\012  ASSERT_EQ(env_-&gt;GetSuperclass(object_class), nullptr);\012  ASSERT_EQ(env_-&gt;GetSuperclass(runnable_interface), nullptr);\012\012 // Null as class should fail.\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(env_-&gt;GetSuperclass(nullptr), nullptr);\012  jni_abort_catcher.Check(&quot;java_class == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(env_-&gt;GetSuperclass(nullptr), nullptr);\012  jni_abort_catcher.Check(&quot;GetSuperclass received NULL jclass&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012})<SUB>1386</SUB>> ]
-"17701" [label = <(UNKNOWN,TEST_F(JniInternalTest, IsAssignableFrom) {\012  jclass object_class = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_NE(object_class, nullptr);\012  jclass string_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(string_class, nullptr);\012\012 // A superclass is assignable from an instance of its\012 // subclass but not vice versa.\012  ASSERT_TRUE(env_-&gt;IsAssignableFrom(string_class, object_class));\012  ASSERT_FALSE(env_-&gt;IsAssignableFrom(object_class, string_class));\012\012  jclass charsequence_interface = env_-&gt;FindClass(&quot;java/lang/CharSequence&quot;);\012  ASSERT_NE(charsequence_interface, nullptr);\012\012 // An interface is assignable from an instance of an implementing\012 // class but not vice versa.\012  ASSERT_TRUE(env_-&gt;IsAssignableFrom(string_class, charsequence_interface));\012  ASSERT_FALSE(env_-&gt;IsAssignableFrom(charsequence_interface, string_class));\012\012 // Check that arrays are covariant.\012  jclass string_array_class = env_-&gt;FindClass(&quot;[Ljava/lang/String;&quot;);\012  ASSERT_NE(string_array_class, nullptr);\012  jclass object_array_class = env_-&gt;FindClass(&quot;[Ljava/lang/Object;&quot;);\012  ASSERT_NE(object_array_class, nullptr);\012  ASSERT_TRUE(env_-&gt;IsAssignableFrom(string_array_class, object_array_class));\012  ASSERT_FALSE(env_-&gt;IsAssignableFrom(object_array_class, string_array_class));\012\012 // Primitive types are tested in 004-JniTest.\012\012 // Null as either class should fail.\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(env_-&gt;IsAssignableFrom(nullptr, string_class), JNI_FALSE);\012  jni_abort_catcher.Check(&quot;java_class1 == null&quot;);\012  EXPECT_EQ(env_-&gt;IsAssignableFrom(object_class, nullptr), JNI_FALSE);\012  jni_abort_catcher.Check(&quot;java_class2 == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(env_-&gt;IsAssignableFrom(nullptr, string_class), JNI_FALSE);\012  jni_abort_catcher.Check(&quot;IsAssignableFrom received NULL jclass&quot;);\012  EXPECT_EQ(env_-&gt;IsAssignableFrom(object_class, nullptr), JNI_FALSE);\012  jni_abort_catcher.Check(&quot;IsAssignableFrom received NULL jclass&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012},TEST_F(JniInternalTest, IsAssignableFrom) {\012  jclass object_class = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_NE(object_class, nullptr);\012  jclass string_class = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(string_class, nullptr);\012\012 // A superclass is assignable from an instance of its\012 // subclass but not vice versa.\012  ASSERT_TRUE(env_-&gt;IsAssignableFrom(string_class, object_class));\012  ASSERT_FALSE(env_-&gt;IsAssignableFrom(object_class, string_class));\012\012  jclass charsequence_interface = env_-&gt;FindClass(&quot;java/lang/CharSequence&quot;);\012  ASSERT_NE(charsequence_interface, nullptr);\012\012 // An interface is assignable from an instance of an implementing\012 // class but not vice versa.\012  ASSERT_TRUE(env_-&gt;IsAssignableFrom(string_class, charsequence_interface));\012  ASSERT_FALSE(env_-&gt;IsAssignableFrom(charsequence_interface, string_class));\012\012 // Check that arrays are covariant.\012  jclass string_array_class = env_-&gt;FindClass(&quot;[Ljava/lang/String;&quot;);\012  ASSERT_NE(string_array_class, nullptr);\012  jclass object_array_class = env_-&gt;FindClass(&quot;[Ljava/lang/Object;&quot;);\012  ASSERT_NE(object_array_class, nullptr);\012  ASSERT_TRUE(env_-&gt;IsAssignableFrom(string_array_class, object_array_class));\012  ASSERT_FALSE(env_-&gt;IsAssignableFrom(object_array_class, string_array_class));\012\012 // Primitive types are tested in 004-JniTest.\012\012 // Null as either class should fail.\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(env_-&gt;IsAssignableFrom(nullptr, string_class), JNI_FALSE);\012  jni_abort_catcher.Check(&quot;java_class1 == null&quot;);\012  EXPECT_EQ(env_-&gt;IsAssignableFrom(object_class, nullptr), JNI_FALSE);\012  jni_abort_catcher.Check(&quot;java_class2 == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(env_-&gt;IsAssignableFrom(nullptr, string_class), JNI_FALSE);\012  jni_abort_catcher.Check(&quot;IsAssignableFrom received NULL jclass&quot;);\012  EXPECT_EQ(env_-&gt;IsAssignableFrom(object_class, nullptr), JNI_FALSE);\012  jni_abort_catcher.Check(&quot;IsAssignableFrom received NULL jclass&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012})<SUB>1408</SUB>> ]
-"17702" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetObjectRefType) {\012  jclass local = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_TRUE(local != nullptr);\012  EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(local));\012\012  jobject global = env_-&gt;NewGlobalRef(local);\012  EXPECT_EQ(JNIGlobalRefType, env_-&gt;GetObjectRefType(global));\012\012  jweak weak_global = env_-&gt;NewWeakGlobalRef(local);\012  EXPECT_EQ(JNIWeakGlobalRefType, env_-&gt;GetObjectRefType(weak_global));\012\012 {\012 CheckJniAbortCatcher jni_abort_catcher;\012    jobject invalid = reinterpret_cast&lt;jobject&gt;(this);\012    EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(invalid));\012    jni_abort_catcher.Check(&quot;use of invalid jobject&quot;);\012 }\012\012 // TODO: invoke a native method and test that its arguments are considered local references.\012\012 // Null as pointer should not fail and return invalid-ref. b/18820997\012  EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(nullptr));\012\012 // TODO: Null as reference should return the original type.\012 // This requires running a GC so a non-null object gets freed.\012},TEST_F(JniInternalTest, GetObjectRefType) {\012  jclass local = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_TRUE(local != nullptr);\012  EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(local));\012\012  jobject global = env_-&gt;NewGlobalRef(local);\012  EXPECT_EQ(JNIGlobalRefType, env_-&gt;GetObjectRefType(global));\012\012  jweak weak_global = env_-&gt;NewWeakGlobalRef(local);\012  EXPECT_EQ(JNIWeakGlobalRefType, env_-&gt;GetObjectRefType(weak_global));\012\012 {\012 CheckJniAbortCatcher jni_abort_catcher;\012    jobject invalid = reinterpret_cast&lt;jobject&gt;(this);\012    EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(invalid));\012    jni_abort_catcher.Check(&quot;use of invalid jobject&quot;);\012 }\012\012 // TODO: invoke a native method and test that its arguments are considered local references.\012\012 // Null as pointer should not fail and return invalid-ref. b/18820997\012  EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(nullptr));\012\012 // TODO: Null as reference should return the original type.\012 // This requires running a GC so a non-null object gets freed.\012})<SUB>1452</SUB>> ]
-"17703" [label = <(UNKNOWN,TEST_F(JniInternalTest, StaleWeakGlobal) {\012  jclass java_lang_Class = env_-&gt;FindClass(&quot;java/lang/Class&quot;);\012  ASSERT_NE(java_lang_Class, nullptr);\012  jobjectArray local_ref = env_-&gt;NewObjectArray(1, java_lang_Class, nullptr);\012  ASSERT_NE(local_ref, nullptr);\012  jweak weak_global = env_-&gt;NewWeakGlobalRef(local_ref);\012  ASSERT_NE(weak_global, nullptr);\012  env_-&gt;DeleteLocalRef(local_ref);\012 // GC should clear the weak global.\012 Runtime::Current()-&gt;GetHeap()-&gt;CollectGarbage(/* clear_soft_references= */ false);\012  jobject new_global_ref = env_-&gt;NewGlobalRef(weak_global);\012  EXPECT_EQ(new_global_ref, nullptr);\012  jobject new_local_ref = env_-&gt;NewLocalRef(weak_global);\012  EXPECT_EQ(new_local_ref, nullptr);\012},TEST_F(JniInternalTest, StaleWeakGlobal) {\012  jclass java_lang_Class = env_-&gt;FindClass(&quot;java/lang/Class&quot;);\012  ASSERT_NE(java_lang_Class, nullptr);\012  jobjectArray local_ref = env_-&gt;NewObjectArray(1, java_lang_Class, nullptr);\012  ASSERT_NE(local_ref, nullptr);\012  jweak weak_global = env_-&gt;NewWeakGlobalRef(local_ref);\012  ASSERT_NE(weak_global, nullptr);\012  env_-&gt;DeleteLocalRef(local_ref);\012 // GC should clear the weak global.\012 Runtime::Current()-&gt;GetHeap()-&gt;CollectGarbage(/* clear_soft_references= */ false);\012  jobject new_global_ref = env_-&gt;NewGlobalRef(weak_global);\012  EXPECT_EQ(new_global_ref, nullptr);\012  jobject new_local_ref = env_-&gt;NewLocalRef(weak_global);\012  EXPECT_EQ(new_local_ref, nullptr);\012})<SUB>1479</SUB>> ]
-"17704" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewStringUTF) {\012  EXPECT_EQ(env_-&gt;NewStringUTF(nullptr), nullptr);\012  jstring s;\012\012  s = env_-&gt;NewStringUTF(&quot;&quot;);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(0, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(0, env_-&gt;GetStringUTFLength(s));\012  s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(5, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(5, env_-&gt;GetStringUTFLength(s));\012\012 // Encoded surrogate pair.\012  s = env_-&gt;NewStringUTF(&quot;\xed\xa0\x81\xed\xb0\x80&quot;);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(2, env_-&gt;GetStringLength(s));\012\012 // The surrogate pair gets encoded into a 4 byte UTF sequence..\012  EXPECT_EQ(4, env_-&gt;GetStringUTFLength(s));\012 const char* chars = env_-&gt;GetStringUTFChars(s, nullptr);\012  EXPECT_STREQ(&quot;\xf0\x90\x90\x80&quot;, chars);\012  env_-&gt;ReleaseStringUTFChars(s, chars);\012\012 // .. but is stored as is in the utf-16 representation.\012 const jchar* jchars = env_-&gt;GetStringChars(s, nullptr);\012  EXPECT_EQ(0xd801, jchars[0]);\012  EXPECT_EQ(0xdc00, jchars[1]);\012  env_-&gt;ReleaseStringChars(s, jchars);\012\012 // 4 byte UTF sequence appended to an encoded surrogate pair.\012  s = env_-&gt;NewStringUTF(&quot;\xed\xa0\x81\xed\xb0\x80 \xf0\x9f\x8f\xa0&quot;);\012  EXPECT_NE(s, nullptr);\012\012 // The 4 byte sequence {0xf0, 0x9f, 0x8f, 0xa0} is converted into a surrogate\012 // pair {0xd83c, 0xdfe0}.\012  EXPECT_EQ(5, env_-&gt;GetStringLength(s));\012  jchars = env_-&gt;GetStringChars(s, nullptr);\012 // The first surrogate pair, encoded as such in the input.\012  EXPECT_EQ(0xd801, jchars[0]);\012  EXPECT_EQ(0xdc00, jchars[1]);\012 // The second surrogate pair, from the 4 byte UTF sequence in the input.\012  EXPECT_EQ(0xd83c, jchars[3]);\012  EXPECT_EQ(0xdfe0, jchars[4]);\012  env_-&gt;ReleaseStringChars(s, jchars);\012\012  EXPECT_EQ(9, env_-&gt;GetStringUTFLength(s));\012  chars = env_-&gt;GetStringUTFChars(s, nullptr);\012  EXPECT_STREQ(&quot;\xf0\x90\x90\x80 \xf0\x9f\x8f\xa0&quot;, chars);\012  env_-&gt;ReleaseStringUTFChars(s, chars);\012\012 // A string with 1, 2, 3 and 4 byte UTF sequences with spaces\012 // between them\012  s = env_-&gt;NewStringUTF(&quot;\x24 \xc2\xa2 \xe2\x82\xac \xf0\x9f\x8f\xa0&quot;);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(8, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(13, env_-&gt;GetStringUTFLength(s));\012},TEST_F(JniInternalTest, NewStringUTF) {\012  EXPECT_EQ(env_-&gt;NewStringUTF(nullptr), nullptr);\012  jstring s;\012\012  s = env_-&gt;NewStringUTF(&quot;&quot;);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(0, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(0, env_-&gt;GetStringUTFLength(s));\012  s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(5, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(5, env_-&gt;GetStringUTFLength(s));\012\012 // Encoded surrogate pair.\012  s = env_-&gt;NewStringUTF(&quot;\xed\xa0\x81\xed\xb0\x80&quot;);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(2, env_-&gt;GetStringLength(s));\012\012 // The surrogate pair gets encoded into a 4 byte UTF sequence..\012  EXPECT_EQ(4, env_-&gt;GetStringUTFLength(s));\012 const char* chars = env_-&gt;GetStringUTFChars(s, nullptr);\012  EXPECT_STREQ(&quot;\xf0\x90\x90\x80&quot;, chars);\012  env_-&gt;ReleaseStringUTFChars(s, chars);\012\012 // .. but is stored as is in the utf-16 representation.\012 const jchar* jchars = env_-&gt;GetStringChars(s, nullptr);\012  EXPECT_EQ(0xd801, jchars[0]);\012  EXPECT_EQ(0xdc00, jchars[1]);\012  env_-&gt;ReleaseStringChars(s, jchars);\012\012 // 4 byte UTF sequence appended to an encoded surrogate pair.\012  s = env_-&gt;NewStringUTF(&quot;\xed\xa0\x81\xed\xb0\x80 \xf0\x9f\x8f\xa0&quot;);\012  EXPECT_NE(s, nullptr);\012\012 // The 4 byte sequence {0xf0, 0x9f, 0x8f, 0xa0} is converted into a surrogate\012 // pair {0xd83c, 0xdfe0}.\012  EXPECT_EQ(5, env_-&gt;GetStringLength(s));\012  jchars = env_-&gt;GetStringChars(s, nullptr);\012 // The first surrogate pair, encoded as such in the input.\012  EXPECT_EQ(0xd801, jchars[0]);\012  EXPECT_EQ(0xdc00, jchars[1]);\012 // The second surrogate pair, from the 4 byte UTF sequence in the input.\012  EXPECT_EQ(0xd83c, jchars[3]);\012  EXPECT_EQ(0xdfe0, jchars[4]);\012  env_-&gt;ReleaseStringChars(s, jchars);\012\012  EXPECT_EQ(9, env_-&gt;GetStringUTFLength(s));\012  chars = env_-&gt;GetStringUTFChars(s, nullptr);\012  EXPECT_STREQ(&quot;\xf0\x90\x90\x80 \xf0\x9f\x8f\xa0&quot;, chars);\012  env_-&gt;ReleaseStringUTFChars(s, chars);\012\012 // A string with 1, 2, 3 and 4 byte UTF sequences with spaces\012 // between them\012  s = env_-&gt;NewStringUTF(&quot;\x24 \xc2\xa2 \xe2\x82\xac \xf0\x9f\x8f\xa0&quot;);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(8, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(13, env_-&gt;GetStringUTFLength(s));\012})<SUB>1495</SUB>> ]
-"17705" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewStringUTF_Validation) {\012 // For the following tests, allocate two pages, one R/W and the next inaccessible.\012  std::string error_msg;\012 MemMap head_map = MemMap::MapAnonymous(\012 &quot;head&quot;, 2 * kPageSize, PROT_READ | PROT_WRITE, /*low_4gb=*/ false, &amp;error_msg);\012  ASSERT_TRUE(head_map.IsValid()) &lt;&lt; error_msg;\012 MemMap tail_map = head_map.RemapAtEnd(\012      head_map.Begin() + kPageSize, &quot;tail&quot;, PROT_NONE, &amp;error_msg);\012  ASSERT_TRUE(tail_map.IsValid()) &lt;&lt; error_msg;\012 char* utf_src = reinterpret_cast&lt;char*&gt;(head_map.Begin());\012\012 // Prepare for checking the `count` field.\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012  jfieldID count_fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;);\012  ASSERT_TRUE(count_fid != nullptr);\012\012 // Prepare for testing with the unchecked interface.\012 const JNINativeInterface* base_env = down_cast&lt;JNIEnvExt*&gt;(env_)-&gt;GetUncheckedFunctions();\012\012 // Start with a simple ASCII string consisting of 4095 characters 'x'.\012  memset(utf_src, 'x', kPageSize - 1u);\012  utf_src[kPageSize - 1u] = 0u;\012  jstring s = base_env-&gt;NewStringUTF(env_, utf_src);\012  ASSERT_EQ(mirror::String::GetFlaggedCount(kPageSize - 1u, /* compressible= */ true),\012            env_-&gt;GetIntField(s, count_fid));\012 const char* chars = env_-&gt;GetStringUTFChars(s, nullptr);\012 for (size_t pos = 0; pos != kPageSize - 1u; ++pos) {\012    ASSERT_EQ('x', chars[pos]) &lt;&lt; pos;\012 }\012  env_-&gt;ReleaseStringUTFChars(s, chars);\012\012 // Replace the last character with invalid character that requires continuation.\012 for (char invalid : { '\xc0', '\xe0', '\xf0' }) {\012    utf_src[kPageSize - 2u] = invalid;\012    s = base_env-&gt;NewStringUTF(env_, utf_src);\012    ASSERT_EQ(mirror::String::GetFlaggedCount(kPageSize - 1u, /* compressible= */ true),\012              env_-&gt;GetIntField(s, count_fid));\012    chars = env_-&gt;GetStringUTFChars(s, nullptr);\012 for (size_t pos = 0; pos != kPageSize - 2u; ++pos) {\012      ASSERT_EQ('x', chars[pos]) &lt;&lt; pos;\012 }\012    EXPECT_EQ('?', chars[kPageSize - 2u]);\012    env_-&gt;ReleaseStringUTFChars(s, chars);\012 }\012\012 // Replace the first two characters with a valid two-byte sequence yielding one character.\012  utf_src[0] = '\xc2';\012  utf_src[1] = '\x80';\012  s = base_env-&gt;NewStringUTF(env_, utf_src);\012  ASSERT_EQ(mirror::String::GetFlaggedCount(kPageSize - 2u, /* compressible= */ false),\012            env_-&gt;GetIntField(s, count_fid));\012 const jchar* jchars = env_-&gt;GetStringChars(s, nullptr);\012  EXPECT_EQ(jchars[0], 0x80u);\012 for (size_t pos = 1; pos != kPageSize - 3u; ++pos) {\012    ASSERT_EQ('x', jchars[pos]) &lt;&lt; pos;\012 }\012  EXPECT_EQ('?', jchars[kPageSize - 3u]);\012  env_-&gt;ReleaseStringChars(s, jchars);\012\012 // Replace the leading two-byte sequence with a two-byte sequence that decodes as ASCII (0x40).\012 // The sequence shall be replaced if string compression is used.\012  utf_src[0] = '\xc1';\012  utf_src[1] = '\x80';\012  s = base_env-&gt;NewStringUTF(env_, utf_src);\012 // Note: All invalid characters are replaced by ASCII replacement character.\012  ASSERT_EQ(mirror::String::GetFlaggedCount(kPageSize - 2u, /* compressible= */ true),\012            env_-&gt;GetIntField(s, count_fid));\012  jchars = env_-&gt;GetStringChars(s, nullptr);\012  EXPECT_EQ(mirror::kUseStringCompression ? '?' : '\x40', jchars[0]);\012 for (size_t pos = 1; pos != kPageSize - 3u; ++pos) {\012    ASSERT_EQ('x', jchars[pos]) &lt;&lt; pos;\012 }\012  EXPECT_EQ('?', jchars[kPageSize - 3u]);\012  env_-&gt;ReleaseStringChars(s, jchars);\012\012 // Replace the leading three bytes with a three-byte sequence that decodes as ASCII (0x40).\012 // The sequence shall be replaced if string compression is used.\012  utf_src[0] = '\xe0';\012  utf_src[1] = '\x81';\012  utf_src[2] = '\x80';\012  s = base_env-&gt;NewStringUTF(env_, utf_src);\012 // Note: All invalid characters are replaced by ASCII replacement character.\012  ASSERT_EQ(mirror::String::GetFlaggedCount(kPageSize - 3u, /* compressible= */ true),\012            env_-&gt;GetIntField(s, count_fid));\012  jchars = env_-&gt;GetStringChars(s, nullptr);\012  EXPECT_EQ(mirror::kUseStringCompression ? '?' : '\x40', jchars[0]);\012 for (size_t pos = 1; pos != kPageSize - 4u; ++pos) {\012    ASSERT_EQ('x', jchars[pos]) &lt;&lt; pos;\012 }\012  EXPECT_EQ('?', jchars[kPageSize - 4u]);\012  env_-&gt;ReleaseStringChars(s, jchars);\012\012 // Replace the last two characters with a valid two-byte sequence that decodes as 0.\012  utf_src[kPageSize - 3u] = '\xc0';\012  utf_src[kPageSize - 2u] = '\x80';\012  s = base_env-&gt;NewStringUTF(env_, utf_src);\012  ASSERT_EQ(mirror::String::GetFlaggedCount(kPageSize - 4u, /* compressible= */ false),\012            env_-&gt;GetIntField(s, count_fid));\012  jchars = env_-&gt;GetStringChars(s, nullptr);\012  EXPECT_EQ(mirror::kUseStringCompression ? '?' : '\x40', jchars[0]);\012 for (size_t pos = 1; pos != kPageSize - 5u; ++pos) {\012    ASSERT_EQ('x', jchars[pos]) &lt;&lt; pos;\012 }\012  EXPECT_EQ('\0', jchars[kPageSize - 5u]);\012  env_-&gt;ReleaseStringChars(s, jchars);\012},TEST_F(JniInternalTest, NewStringUTF_Validation) {\012 // For the following tests, allocate two pages, one R/W and the next inaccessible.\012  std::string error_msg;\012 MemMap head_map = MemMap::MapAnonymous(\012 &quot;head&quot;, 2 * kPageSize, PROT_READ | PROT_WRITE, /*low_4gb=*/ false, &amp;error_msg);\012  ASSERT_TRUE(head_map.IsValid()) &lt;&lt; error_msg;\012 MemMap tail_map = head_map.RemapAtEnd(\012      head_map.Begin() + kPageSize, &quot;tail&quot;, PROT_NONE, &amp;error_msg);\012  ASSERT_TRUE(tail_map.IsValid()) &lt;&lt; error_msg;\012 char* utf_src = reinterpret_cast&lt;char*&gt;(head_map.Begin());\012\012 // Prepare for checking the `count` field.\012  jclass c = env_-&gt;FindClass(&quot;java/lang/String&quot;);\012  ASSERT_NE(c, nullptr);\012  jfieldID count_fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;);\012  ASSERT_TRUE(count_fid != nullptr);\012\012 // Prepare for testing with the unchecked interface.\012 const JNINativeInterface* base_env = down_cast&lt;JNIEnvExt*&gt;(env_)-&gt;GetUncheckedFunctions();\012\012 // Start with a simple ASCII string consisting of 4095 characters 'x'.\012  memset(utf_src, 'x', kPageSize - 1u);\012  utf_src[kPageSize - 1u] = 0u;\012  jstring s = base_env-&gt;NewStringUTF(env_, utf_src);\012  ASSERT_EQ(mirror::String::GetFlaggedCount(kPageSize - 1u, /* compressible= */ true),\012            env_-&gt;GetIntField(s, count_fid));\012 const char* chars = env_-&gt;GetStringUTFChars(s, nullptr);\012 for (size_t pos = 0; pos != kPageSize - 1u; ++pos) {\012    ASSERT_EQ('x', chars[pos]) &lt;&lt; pos;\012 }\012  env_-&gt;ReleaseStringUTFChars(s, chars);\012\012 // Replace the last character with invalid character that requires continuation.\012 for (char invalid : { '\xc0', '\xe0', '\xf0' }) {\012    utf_src[kPageSize - 2u] = invalid;\012    s = base_env-&gt;NewStringUTF(env_, utf_src);\012    ASSERT_EQ(mirror::String::GetFlaggedCount(kPageSize - 1u, /* compressible= */ true),\012              env_-&gt;GetIntField(s, count_fid));\012    chars = env_-&gt;GetStringUTFChars(s, nullptr);\012 for (size_t pos = 0; pos != kPageSize - 2u; ++pos) {\012      ASSERT_EQ('x', chars[pos]) &lt;&lt; pos;\012 }\012    EXPECT_EQ('?', chars[kPageSize - 2u]);\012    env_-&gt;ReleaseStringUTFChars(s, chars);\012 }\012\012 // Replace the first two characters with a valid two-byte sequence yielding one character.\012  utf_src[0] = '\xc2';\012  utf_src[1] = '\x80';\012  s = base_env-&gt;NewStringUTF(env_, utf_src);\012  ASSERT_EQ(mirror::String::GetFlaggedCount(kPageSize - 2u, /* compressible= */ false),\012            env_-&gt;GetIntField(s, count_fid));\012 const jchar* jchars = env_-&gt;GetStringChars(s, nullptr);\012  EXPECT_EQ(jchars[0], 0x80u);\012 for (size_t pos = 1; pos != kPageSize - 3u; ++pos) {\012    ASSERT_EQ('x', jchars[pos]) &lt;&lt; pos;\012 }\012  EXPECT_EQ('?', jchars[kPageSize - 3u]);\012  env_-&gt;ReleaseStringChars(s, jchars);\012\012 // Replace the leading two-byte sequence with a two-byte sequence that decodes as ASCII (0x40).\012 // The sequence shall be replaced if string compression is used.\012  utf_src[0] = '\xc1';\012  utf_src[1] = '\x80';\012  s = base_env-&gt;NewStringUTF(env_, utf_src);\012 // Note: All invalid characters are replaced by ASCII replacement character.\012  ASSERT_EQ(mirror::String::GetFlaggedCount(kPageSize - 2u, /* compressible= */ true),\012            env_-&gt;GetIntField(s, count_fid));\012  jchars = env_-&gt;GetStringChars(s, nullptr);\012  EXPECT_EQ(mirror::kUseStringCompression ? '?' : '\x40', jchars[0]);\012 for (size_t pos = 1; pos != kPageSize - 3u; ++pos) {\012    ASSERT_EQ('x', jchars[pos]) &lt;&lt; pos;\012 }\012  EXPECT_EQ('?', jchars[kPageSize - 3u]);\012  env_-&gt;ReleaseStringChars(s, jchars);\012\012 // Replace the leading three bytes with a three-byte sequence that decodes as ASCII (0x40).\012 // The sequence shall be replaced if string compression is used.\012  utf_src[0] = '\xe0';\012  utf_src[1] = '\x81';\012  utf_src[2] = '\x80';\012  s = base_env-&gt;NewStringUTF(env_, utf_src);\012 // Note: All invalid characters are replaced by ASCII replacement character.\012  ASSERT_EQ(mirror::String::GetFlaggedCount(kPageSize - 3u, /* compressible= */ true),\012            env_-&gt;GetIntField(s, count_fid));\012  jchars = env_-&gt;GetStringChars(s, nullptr);\012  EXPECT_EQ(mirror::kUseStringCompression ? '?' : '\x40', jchars[0]);\012 for (size_t pos = 1; pos != kPageSize - 4u; ++pos) {\012    ASSERT_EQ('x', jchars[pos]) &lt;&lt; pos;\012 }\012  EXPECT_EQ('?', jchars[kPageSize - 4u]);\012  env_-&gt;ReleaseStringChars(s, jchars);\012\012 // Replace the last two characters with a valid two-byte sequence that decodes as 0.\012  utf_src[kPageSize - 3u] = '\xc0';\012  utf_src[kPageSize - 2u] = '\x80';\012  s = base_env-&gt;NewStringUTF(env_, utf_src);\012  ASSERT_EQ(mirror::String::GetFlaggedCount(kPageSize - 4u, /* compressible= */ false),\012            env_-&gt;GetIntField(s, count_fid));\012  jchars = env_-&gt;GetStringChars(s, nullptr);\012  EXPECT_EQ(mirror::kUseStringCompression ? '?' : '\x40', jchars[0]);\012 for (size_t pos = 1; pos != kPageSize - 5u; ++pos) {\012    ASSERT_EQ('x', jchars[pos]) &lt;&lt; pos;\012 }\012  EXPECT_EQ('\0', jchars[kPageSize - 5u]);\012  env_-&gt;ReleaseStringChars(s, jchars);\012})<SUB>1554</SUB>> ]
-"17706" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewString) {\012  jchar chars[] = { 'h', 'i' };\012  jstring s;\012  s = env_-&gt;NewString(chars, 0);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(0, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(0, env_-&gt;GetStringUTFLength(s));\012  s = env_-&gt;NewString(chars, 2);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(2, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(2, env_-&gt;GetStringUTFLength(s));\012\012 // TODO: check some non-ASCII strings.\012},TEST_F(JniInternalTest, NewString) {\012  jchar chars[] = { 'h', 'i' };\012  jstring s;\012  s = env_-&gt;NewString(chars, 0);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(0, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(0, env_-&gt;GetStringUTFLength(s));\012  s = env_-&gt;NewString(chars, 2);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(2, env_-&gt;GetStringLength(s));\012  EXPECT_EQ(2, env_-&gt;GetStringUTFLength(s));\012\012 // TODO: check some non-ASCII strings.\012})<SUB>1662</SUB>> ]
-"17707" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewStringNullCharsZeroLength) {\012  jstring s = env_-&gt;NewString(nullptr, 0);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(0, env_-&gt;GetStringLength(s));\012},TEST_F(JniInternalTest, NewStringNullCharsZeroLength) {\012  jstring s = env_-&gt;NewString(nullptr, 0);\012  EXPECT_NE(s, nullptr);\012  EXPECT_EQ(0, env_-&gt;GetStringLength(s));\012})<SUB>1677</SUB>> ]
-"17708" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewStringNullCharsNonzeroLength) {\012 CheckJniAbortCatcher jni_abort_catcher;\012  env_-&gt;NewString(nullptr, 1);\012  jni_abort_catcher.Check(&quot;chars == null &amp;&amp; char_count &gt; 0&quot;);\012},TEST_F(JniInternalTest, NewStringNullCharsNonzeroLength) {\012 CheckJniAbortCatcher jni_abort_catcher;\012  env_-&gt;NewString(nullptr, 1);\012  jni_abort_catcher.Check(&quot;chars == null &amp;&amp; char_count &gt; 0&quot;);\012})<SUB>1683</SUB>> ]
-"17709" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewStringNegativeLength) {\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  env_-&gt;NewString(nullptr, -1);\012  jni_abort_catcher.Check(&quot;char_count &lt; 0: -1&quot;);\012  env_-&gt;NewString(nullptr, std::numeric_limits&lt;jint&gt;::min());\012  jni_abort_catcher.Check(&quot;char_count &lt; 0: -2147483648&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  env_-&gt;NewString(nullptr, -1);\012  jni_abort_catcher.Check(&quot;negative jsize: -1&quot;);\012  env_-&gt;NewString(nullptr, std::numeric_limits&lt;jint&gt;::min());\012  jni_abort_catcher.Check(&quot;negative jsize: -2147483648&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012},TEST_F(JniInternalTest, NewStringNegativeLength) {\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  env_-&gt;NewString(nullptr, -1);\012  jni_abort_catcher.Check(&quot;char_count &lt; 0: -1&quot;);\012  env_-&gt;NewString(nullptr, std::numeric_limits&lt;jint&gt;::min());\012  jni_abort_catcher.Check(&quot;char_count &lt; 0: -2147483648&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  env_-&gt;NewString(nullptr, -1);\012  jni_abort_catcher.Check(&quot;negative jsize: -1&quot;);\012  env_-&gt;NewString(nullptr, std::numeric_limits&lt;jint&gt;::min());\012  jni_abort_catcher.Check(&quot;negative jsize: -2147483648&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012})<SUB>1689</SUB>> ]
-"17710" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetStringLength_GetStringUTFLength) {\012 // Already tested in the NewString/NewStringUTF tests.\012},TEST_F(JniInternalTest, GetStringLength_GetStringUTFLength) {\012 // Already tested in the NewString/NewStringUTF tests.\012})<SUB>1704</SUB>> ]
-"17711" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetStringRegion_GetStringUTFRegion) {\012  jstring s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012  ASSERT_TRUE(s != nullptr);\012\012  env_-&gt;GetStringRegion(s, -1, 0, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringRegion(s, 0, -1, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringRegion(s, 0, 10, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringRegion(s, 10, 1, nullptr);\012 ExpectException(sioobe_);\012 // Regression test against integer overflow in range check.\012  env_-&gt;GetStringRegion(s, 0x7fffffff, 0x7fffffff, nullptr);\012 ExpectException(sioobe_);\012\012  jchar chars[4] = { 'x', 'x', 'x', 'x' };\012  env_-&gt;GetStringRegion(s, 1, 2, &amp;chars[1]);\012  EXPECT_EQ('x', chars[0]);\012  EXPECT_EQ('e', chars[1]);\012  EXPECT_EQ('l', chars[2]);\012  EXPECT_EQ('x', chars[3]);\012\012 // It's okay for the buffer to be null as long as the length is 0.\012  env_-&gt;GetStringRegion(s, 2, 0, nullptr);\012 // Even if the offset is invalid...\012  env_-&gt;GetStringRegion(s, 123, 0, nullptr);\012 ExpectException(sioobe_);\012\012  env_-&gt;GetStringUTFRegion(s, -1, 0, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringUTFRegion(s, 0, -1, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringUTFRegion(s, 0, 10, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringUTFRegion(s, 10, 1, nullptr);\012 ExpectException(sioobe_);\012 // Regression test against integer overflow in range check.\012  env_-&gt;GetStringUTFRegion(s, 0x7fffffff, 0x7fffffff, nullptr);\012 ExpectException(sioobe_);\012\012 char bytes[4] = { 'x', 'x', 'x', 'x' };\012  env_-&gt;GetStringUTFRegion(s, 1, 2, &amp;bytes[1]);\012  EXPECT_EQ('x', bytes[0]);\012  EXPECT_EQ('e', bytes[1]);\012  EXPECT_EQ('l', bytes[2]);\012  EXPECT_EQ('x', bytes[3]);\012\012 // It's okay for the buffer to be null as long as the length is 0.\012  env_-&gt;GetStringUTFRegion(s, 2, 0, nullptr);\012 // Even if the offset is invalid...\012  env_-&gt;GetStringUTFRegion(s, 123, 0, nullptr);\012 ExpectException(sioobe_);\012},TEST_F(JniInternalTest, GetStringRegion_GetStringUTFRegion) {\012  jstring s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012  ASSERT_TRUE(s != nullptr);\012\012  env_-&gt;GetStringRegion(s, -1, 0, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringRegion(s, 0, -1, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringRegion(s, 0, 10, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringRegion(s, 10, 1, nullptr);\012 ExpectException(sioobe_);\012 // Regression test against integer overflow in range check.\012  env_-&gt;GetStringRegion(s, 0x7fffffff, 0x7fffffff, nullptr);\012 ExpectException(sioobe_);\012\012  jchar chars[4] = { 'x', 'x', 'x', 'x' };\012  env_-&gt;GetStringRegion(s, 1, 2, &amp;chars[1]);\012  EXPECT_EQ('x', chars[0]);\012  EXPECT_EQ('e', chars[1]);\012  EXPECT_EQ('l', chars[2]);\012  EXPECT_EQ('x', chars[3]);\012\012 // It's okay for the buffer to be null as long as the length is 0.\012  env_-&gt;GetStringRegion(s, 2, 0, nullptr);\012 // Even if the offset is invalid...\012  env_-&gt;GetStringRegion(s, 123, 0, nullptr);\012 ExpectException(sioobe_);\012\012  env_-&gt;GetStringUTFRegion(s, -1, 0, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringUTFRegion(s, 0, -1, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringUTFRegion(s, 0, 10, nullptr);\012 ExpectException(sioobe_);\012  env_-&gt;GetStringUTFRegion(s, 10, 1, nullptr);\012 ExpectException(sioobe_);\012 // Regression test against integer overflow in range check.\012  env_-&gt;GetStringUTFRegion(s, 0x7fffffff, 0x7fffffff, nullptr);\012 ExpectException(sioobe_);\012\012 char bytes[4] = { 'x', 'x', 'x', 'x' };\012  env_-&gt;GetStringUTFRegion(s, 1, 2, &amp;bytes[1]);\012  EXPECT_EQ('x', bytes[0]);\012  EXPECT_EQ('e', bytes[1]);\012  EXPECT_EQ('l', bytes[2]);\012  EXPECT_EQ('x', bytes[3]);\012\012 // It's okay for the buffer to be null as long as the length is 0.\012  env_-&gt;GetStringUTFRegion(s, 2, 0, nullptr);\012 // Even if the offset is invalid...\012  env_-&gt;GetStringUTFRegion(s, 123, 0, nullptr);\012 ExpectException(sioobe_);\012})<SUB>1708</SUB>> ]
-"17712" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetStringUTFChars_ReleaseStringUTFChars) {\012 // Passing in a null jstring is ignored normally, but caught by -Xcheck:jni.\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_EQ(env_-&gt;GetStringUTFChars(nullptr, nullptr), nullptr);\012 }\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012    EXPECT_EQ(env_-&gt;GetStringUTFChars(nullptr, nullptr), nullptr);\012    check_jni_abort_catcher.Check(&quot;GetStringUTFChars received NULL jstring&quot;);\012    EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012 }\012\012  jstring s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012  ASSERT_TRUE(s != nullptr);\012\012 const char* utf = env_-&gt;GetStringUTFChars(s, nullptr);\012  EXPECT_STREQ(&quot;hello&quot;, utf);\012  env_-&gt;ReleaseStringUTFChars(s, utf);\012\012  jboolean is_copy = JNI_FALSE;\012  utf = env_-&gt;GetStringUTFChars(s, &amp;is_copy);\012  EXPECT_EQ(JNI_TRUE, is_copy);\012  EXPECT_STREQ(&quot;hello&quot;, utf);\012  env_-&gt;ReleaseStringUTFChars(s, utf);\012},TEST_F(JniInternalTest, GetStringUTFChars_ReleaseStringUTFChars) {\012 // Passing in a null jstring is ignored normally, but caught by -Xcheck:jni.\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_EQ(env_-&gt;GetStringUTFChars(nullptr, nullptr), nullptr);\012 }\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012    EXPECT_EQ(env_-&gt;GetStringUTFChars(nullptr, nullptr), nullptr);\012    check_jni_abort_catcher.Check(&quot;GetStringUTFChars received NULL jstring&quot;);\012    EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012 }\012\012  jstring s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012  ASSERT_TRUE(s != nullptr);\012\012 const char* utf = env_-&gt;GetStringUTFChars(s, nullptr);\012  EXPECT_STREQ(&quot;hello&quot;, utf);\012  env_-&gt;ReleaseStringUTFChars(s, utf);\012\012  jboolean is_copy = JNI_FALSE;\012  utf = env_-&gt;GetStringUTFChars(s, &amp;is_copy);\012  EXPECT_EQ(JNI_TRUE, is_copy);\012  EXPECT_STREQ(&quot;hello&quot;, utf);\012  env_-&gt;ReleaseStringUTFChars(s, utf);\012})<SUB>1763</SUB>> ]
-"17713" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetStringChars_ReleaseStringChars) {\012  jstring s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012 ScopedObjectAccess soa(env_);\012 ObjPtr&lt;mirror::String&gt; s_m = soa.Decode&lt;mirror::String&gt;(s);\012  ASSERT_TRUE(s != nullptr);\012\012  jchar expected[] = { 'h', 'e', 'l', 'l', 'o' };\012 const jchar* chars = env_-&gt;GetStringChars(s, nullptr);\012  EXPECT_EQ(expected[0], chars[0]);\012  EXPECT_EQ(expected[1], chars[1]);\012  EXPECT_EQ(expected[2], chars[2]);\012  EXPECT_EQ(expected[3], chars[3]);\012  EXPECT_EQ(expected[4], chars[4]);\012  env_-&gt;ReleaseStringChars(s, chars);\012\012  jboolean is_copy = JNI_FALSE;\012  chars = env_-&gt;GetStringChars(s, &amp;is_copy);\012 if (Runtime::Current()-&gt;GetHeap()-&gt;IsMovableObject(s_m)) {\012    EXPECT_EQ(JNI_TRUE, is_copy);\012 } else {\012    EXPECT_EQ(JNI_FALSE, is_copy);\012 }\012  EXPECT_EQ(expected[0], chars[0]);\012  EXPECT_EQ(expected[1], chars[1]);\012  EXPECT_EQ(expected[2], chars[2]);\012  EXPECT_EQ(expected[3], chars[3]);\012  EXPECT_EQ(expected[4], chars[4]);\012  env_-&gt;ReleaseStringChars(s, chars);\012},TEST_F(JniInternalTest, GetStringChars_ReleaseStringChars) {\012  jstring s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012 ScopedObjectAccess soa(env_);\012 ObjPtr&lt;mirror::String&gt; s_m = soa.Decode&lt;mirror::String&gt;(s);\012  ASSERT_TRUE(s != nullptr);\012\012  jchar expected[] = { 'h', 'e', 'l', 'l', 'o' };\012 const jchar* chars = env_-&gt;GetStringChars(s, nullptr);\012  EXPECT_EQ(expected[0], chars[0]);\012  EXPECT_EQ(expected[1], chars[1]);\012  EXPECT_EQ(expected[2], chars[2]);\012  EXPECT_EQ(expected[3], chars[3]);\012  EXPECT_EQ(expected[4], chars[4]);\012  env_-&gt;ReleaseStringChars(s, chars);\012\012  jboolean is_copy = JNI_FALSE;\012  chars = env_-&gt;GetStringChars(s, &amp;is_copy);\012 if (Runtime::Current()-&gt;GetHeap()-&gt;IsMovableObject(s_m)) {\012    EXPECT_EQ(JNI_TRUE, is_copy);\012 } else {\012    EXPECT_EQ(JNI_FALSE, is_copy);\012 }\012  EXPECT_EQ(expected[0], chars[0]);\012  EXPECT_EQ(expected[1], chars[1]);\012  EXPECT_EQ(expected[2], chars[2]);\012  EXPECT_EQ(expected[3], chars[3]);\012  EXPECT_EQ(expected[4], chars[4]);\012  env_-&gt;ReleaseStringChars(s, chars);\012})<SUB>1792</SUB>> ]
-"17714" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetStringCritical_ReleaseStringCritical) {\012  jstring s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012  ASSERT_TRUE(s != nullptr);\012\012  jchar expected[] = { 'h', 'e', 'l', 'l', 'o' };\012 const jchar* chars = env_-&gt;GetStringCritical(s, nullptr);\012  EXPECT_EQ(expected[0], chars[0]);\012  EXPECT_EQ(expected[1], chars[1]);\012  EXPECT_EQ(expected[2], chars[2]);\012  EXPECT_EQ(expected[3], chars[3]);\012  EXPECT_EQ(expected[4], chars[4]);\012  env_-&gt;ReleaseStringCritical(s, chars);\012\012  jboolean is_copy = JNI_TRUE;\012  chars = env_-&gt;GetStringCritical(s, &amp;is_copy);\012 if (mirror::kUseStringCompression) {\012 // is_copy has to be JNI_TRUE because &quot;hello&quot; is all-ASCII\012    EXPECT_EQ(JNI_TRUE, is_copy);\012 } else {\012    EXPECT_EQ(JNI_FALSE, is_copy);\012 }\012  EXPECT_EQ(expected[0], chars[0]);\012  EXPECT_EQ(expected[1], chars[1]);\012  EXPECT_EQ(expected[2], chars[2]);\012  EXPECT_EQ(expected[3], chars[3]);\012  EXPECT_EQ(expected[4], chars[4]);\012  env_-&gt;ReleaseStringCritical(s, chars);\012\012 if (mirror::kUseStringCompression) {\012 // is_copy has to be JNI_FALSE because &quot;\xed\xa0\x81\xed\xb0\x80&quot; is incompressible\012    jboolean is_copy_16 = JNI_TRUE;\012    jstring s_16 = env_-&gt;NewStringUTF(&quot;\xed\xa0\x81\xed\xb0\x80&quot;);\012    chars = env_-&gt;GetStringCritical(s_16, &amp;is_copy_16);\012    EXPECT_EQ(2, env_-&gt;GetStringLength(s_16));\012    EXPECT_EQ(4, env_-&gt;GetStringUTFLength(s_16));\012    env_-&gt;ReleaseStringCritical(s_16, chars);\012 }\012},TEST_F(JniInternalTest, GetStringCritical_ReleaseStringCritical) {\012  jstring s = env_-&gt;NewStringUTF(&quot;hello&quot;);\012  ASSERT_TRUE(s != nullptr);\012\012  jchar expected[] = { 'h', 'e', 'l', 'l', 'o' };\012 const jchar* chars = env_-&gt;GetStringCritical(s, nullptr);\012  EXPECT_EQ(expected[0], chars[0]);\012  EXPECT_EQ(expected[1], chars[1]);\012  EXPECT_EQ(expected[2], chars[2]);\012  EXPECT_EQ(expected[3], chars[3]);\012  EXPECT_EQ(expected[4], chars[4]);\012  env_-&gt;ReleaseStringCritical(s, chars);\012\012  jboolean is_copy = JNI_TRUE;\012  chars = env_-&gt;GetStringCritical(s, &amp;is_copy);\012 if (mirror::kUseStringCompression) {\012 // is_copy has to be JNI_TRUE because &quot;hello&quot; is all-ASCII\012    EXPECT_EQ(JNI_TRUE, is_copy);\012 } else {\012    EXPECT_EQ(JNI_FALSE, is_copy);\012 }\012  EXPECT_EQ(expected[0], chars[0]);\012  EXPECT_EQ(expected[1], chars[1]);\012  EXPECT_EQ(expected[2], chars[2]);\012  EXPECT_EQ(expected[3], chars[3]);\012  EXPECT_EQ(expected[4], chars[4]);\012  env_-&gt;ReleaseStringCritical(s, chars);\012\012 if (mirror::kUseStringCompression) {\012 // is_copy has to be JNI_FALSE because &quot;\xed\xa0\x81\xed\xb0\x80&quot; is incompressible\012    jboolean is_copy_16 = JNI_TRUE;\012    jstring s_16 = env_-&gt;NewStringUTF(&quot;\xed\xa0\x81\xed\xb0\x80&quot;);\012    chars = env_-&gt;GetStringCritical(s_16, &amp;is_copy_16);\012    EXPECT_EQ(2, env_-&gt;GetStringLength(s_16));\012    EXPECT_EQ(4, env_-&gt;GetStringUTFLength(s_16));\012    env_-&gt;ReleaseStringCritical(s_16, chars);\012 }\012})<SUB>1822</SUB>> ]
-"17715" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetObjectArrayElement_SetObjectArrayElement) {\012  jclass java_lang_Class = env_-&gt;FindClass(&quot;java/lang/Class&quot;);\012  ASSERT_TRUE(java_lang_Class != nullptr);\012\012  jobjectArray array = env_-&gt;NewObjectArray(1, java_lang_Class, nullptr);\012  EXPECT_NE(array, nullptr);\012  EXPECT_EQ(env_-&gt;GetObjectArrayElement(array, 0), nullptr);\012  env_-&gt;SetObjectArrayElement(array, 0, java_lang_Class);\012  EXPECT_TRUE(env_-&gt;IsSameObject(env_-&gt;GetObjectArrayElement(array, 0), java_lang_Class));\012\012 // ArrayIndexOutOfBounds for negative index.\012  env_-&gt;SetObjectArrayElement(array, -1, java_lang_Class);\012 ExpectException(aioobe_);\012\012 // ArrayIndexOutOfBounds for too-large index.\012  env_-&gt;SetObjectArrayElement(array, 1, java_lang_Class);\012 ExpectException(aioobe_);\012\012 // ArrayStoreException thrown for bad types.\012  env_-&gt;SetObjectArrayElement(array, 0, env_-&gt;NewStringUTF(&quot;not a jclass!&quot;));\012 ExpectException(ase_);\012\012 // Null as array should fail.\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(nullptr, env_-&gt;GetObjectArrayElement(nullptr, 0));\012  jni_abort_catcher.Check(&quot;java_array == null&quot;);\012  env_-&gt;SetObjectArrayElement(nullptr, 0, nullptr);\012  jni_abort_catcher.Check(&quot;java_array == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(nullptr, env_-&gt;GetObjectArrayElement(nullptr, 0));\012  jni_abort_catcher.Check(&quot;jarray was NULL&quot;);\012  env_-&gt;SetObjectArrayElement(nullptr, 0, nullptr);\012  jni_abort_catcher.Check(&quot;jarray was NULL&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012},TEST_F(JniInternalTest, GetObjectArrayElement_SetObjectArrayElement) {\012  jclass java_lang_Class = env_-&gt;FindClass(&quot;java/lang/Class&quot;);\012  ASSERT_TRUE(java_lang_Class != nullptr);\012\012  jobjectArray array = env_-&gt;NewObjectArray(1, java_lang_Class, nullptr);\012  EXPECT_NE(array, nullptr);\012  EXPECT_EQ(env_-&gt;GetObjectArrayElement(array, 0), nullptr);\012  env_-&gt;SetObjectArrayElement(array, 0, java_lang_Class);\012  EXPECT_TRUE(env_-&gt;IsSameObject(env_-&gt;GetObjectArrayElement(array, 0), java_lang_Class));\012\012 // ArrayIndexOutOfBounds for negative index.\012  env_-&gt;SetObjectArrayElement(array, -1, java_lang_Class);\012 ExpectException(aioobe_);\012\012 // ArrayIndexOutOfBounds for too-large index.\012  env_-&gt;SetObjectArrayElement(array, 1, java_lang_Class);\012 ExpectException(aioobe_);\012\012 // ArrayStoreException thrown for bad types.\012  env_-&gt;SetObjectArrayElement(array, 0, env_-&gt;NewStringUTF(&quot;not a jclass!&quot;));\012 ExpectException(ase_);\012\012 // Null as array should fail.\012 CheckJniAbortCatcher jni_abort_catcher;\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(nullptr, env_-&gt;GetObjectArrayElement(nullptr, 0));\012  jni_abort_catcher.Check(&quot;java_array == null&quot;);\012  env_-&gt;SetObjectArrayElement(nullptr, 0, nullptr);\012  jni_abort_catcher.Check(&quot;java_array == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(nullptr, env_-&gt;GetObjectArrayElement(nullptr, 0));\012  jni_abort_catcher.Check(&quot;jarray was NULL&quot;);\012  env_-&gt;SetObjectArrayElement(nullptr, 0, nullptr);\012  jni_abort_catcher.Check(&quot;jarray was NULL&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012})<SUB>1861</SUB>> ]
-"17716" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetPrimitiveField_SetPrimitiveField) {\012  TEST_PRIMITIVE_FIELD_FOR_CLASS(&quot;AllFields&quot;);\012},TEST_F(JniInternalTest, GetPrimitiveField_SetPrimitiveField) {\012  TEST_PRIMITIVE_FIELD_FOR_CLASS(&quot;AllFields&quot;);\012})<SUB>1992</SUB>> ]
-"17717" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetPrimitiveField_SetPrimitiveField_Subclass) {\012  TEST_PRIMITIVE_FIELD_FOR_CLASS(&quot;AllFieldsSub&quot;);\012},TEST_F(JniInternalTest, GetPrimitiveField_SetPrimitiveField_Subclass) {\012  TEST_PRIMITIVE_FIELD_FOR_CLASS(&quot;AllFieldsSub&quot;);\012})<SUB>1996</SUB>> ]
-"17718" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetField_SetField_unrelated) {\012 Thread::Current()-&gt;TransitionFromSuspendedToRunnable();\012 LoadDex(&quot;AllFields&quot;);\012 bool started = runtime_-&gt;Start();\012  ASSERT_TRUE(started);\012  jclass c = env_-&gt;FindClass(&quot;AllFields&quot;);\012  ASSERT_NE(c, nullptr);\012  jclass uc = env_-&gt;FindClass(&quot;AllFieldsUnrelated&quot;);\012  ASSERT_NE(uc, nullptr);\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(true);\012  EXPECT_UNRELATED_FIELD_FAILURE(Boolean, &quot;sZ&quot;, &quot;Z&quot;, JNI_TRUE);\012  EXPECT_UNRELATED_FIELD_FAILURE(Byte, &quot;sB&quot;, &quot;B&quot;, 1);\012  EXPECT_UNRELATED_FIELD_FAILURE(Char, &quot;sC&quot;, &quot;C&quot;, 'a');\012  EXPECT_UNRELATED_FIELD_FAILURE(Double, &quot;sD&quot;, &quot;D&quot;, 1.0);\012  EXPECT_UNRELATED_FIELD_FAILURE(Float, &quot;sF&quot;, &quot;F&quot;, 1.0);\012  EXPECT_UNRELATED_FIELD_FAILURE(Int, &quot;sI&quot;, &quot;I&quot;, 1);\012  EXPECT_UNRELATED_FIELD_FAILURE(Long, &quot;sJ&quot;, &quot;J&quot;, 1);\012  EXPECT_UNRELATED_FIELD_FAILURE(Short, &quot;sS&quot;, &quot;S&quot;, 1);\012  EXPECT_UNRELATED_FIELD_FAILURE(Object, &quot;sObject&quot;, &quot;Ljava/lang/Object;&quot;, c);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012},TEST_F(JniInternalTest, GetField_SetField_unrelated) {\012 Thread::Current()-&gt;TransitionFromSuspendedToRunnable();\012 LoadDex(&quot;AllFields&quot;);\012 bool started = runtime_-&gt;Start();\012  ASSERT_TRUE(started);\012  jclass c = env_-&gt;FindClass(&quot;AllFields&quot;);\012  ASSERT_NE(c, nullptr);\012  jclass uc = env_-&gt;FindClass(&quot;AllFieldsUnrelated&quot;);\012  ASSERT_NE(uc, nullptr);\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(true);\012  EXPECT_UNRELATED_FIELD_FAILURE(Boolean, &quot;sZ&quot;, &quot;Z&quot;, JNI_TRUE);\012  EXPECT_UNRELATED_FIELD_FAILURE(Byte, &quot;sB&quot;, &quot;B&quot;, 1);\012  EXPECT_UNRELATED_FIELD_FAILURE(Char, &quot;sC&quot;, &quot;C&quot;, 'a');\012  EXPECT_UNRELATED_FIELD_FAILURE(Double, &quot;sD&quot;, &quot;D&quot;, 1.0);\012  EXPECT_UNRELATED_FIELD_FAILURE(Float, &quot;sF&quot;, &quot;F&quot;, 1.0);\012  EXPECT_UNRELATED_FIELD_FAILURE(Int, &quot;sI&quot;, &quot;I&quot;, 1);\012  EXPECT_UNRELATED_FIELD_FAILURE(Long, &quot;sJ&quot;, &quot;J&quot;, 1);\012  EXPECT_UNRELATED_FIELD_FAILURE(Short, &quot;sS&quot;, &quot;S&quot;, 1);\012  EXPECT_UNRELATED_FIELD_FAILURE(Object, &quot;sObject&quot;, &quot;Ljava/lang/Object;&quot;, c);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012})<SUB>2011</SUB>> ]
-"17719" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetObjectField_SetObjectField) {\012  TEST_OBJECT_FIELD_FOR_CLASS(&quot;AllFields&quot;);\012},TEST_F(JniInternalTest, GetObjectField_SetObjectField) {\012  TEST_OBJECT_FIELD_FOR_CLASS(&quot;AllFields&quot;);\012})<SUB>2065</SUB>> ]
-"17720" [label = <(UNKNOWN,TEST_F(JniInternalTest, GetObjectField_SetObjectField_subclass) {\012  TEST_OBJECT_FIELD_FOR_CLASS(&quot;AllFieldsSub&quot;);\012},TEST_F(JniInternalTest, GetObjectField_SetObjectField_subclass) {\012  TEST_OBJECT_FIELD_FOR_CLASS(&quot;AllFieldsSub&quot;);\012})<SUB>2069</SUB>> ]
-"17721" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewLocalRef_nullptr) {\012  EXPECT_EQ(env_-&gt;NewLocalRef(nullptr), nullptr);\012},TEST_F(JniInternalTest, NewLocalRef_nullptr) {\012  EXPECT_EQ(env_-&gt;NewLocalRef(nullptr), nullptr);\012})<SUB>2073</SUB>> ]
-"17722" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewLocalRef) {\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  jobject o = env_-&gt;NewLocalRef(s);\012  EXPECT_NE(o, nullptr);\012  EXPECT_NE(o, s);\012\012  EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(o));\012},TEST_F(JniInternalTest, NewLocalRef) {\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  jobject o = env_-&gt;NewLocalRef(s);\012  EXPECT_NE(o, nullptr);\012  EXPECT_NE(o, s);\012\012  EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(o));\012})<SUB>2077</SUB>> ]
-"17723" [label = <(UNKNOWN,TEST_F(JniInternalTest, DeleteLocalRef_nullptr) {\012  env_-&gt;DeleteLocalRef(nullptr);\012},TEST_F(JniInternalTest, DeleteLocalRef_nullptr) {\012  env_-&gt;DeleteLocalRef(nullptr);\012})<SUB>2087</SUB>> ]
-"17724" [label = <(UNKNOWN,TEST_F(JniInternalTest, DeleteLocalRef) {\012 // This tests leads to warnings and errors in the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  env_-&gt;DeleteLocalRef(s);\012\012 // Currently, deleting an already-deleted reference is just a CheckJNI warning.\012 {\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      env_-&gt;DeleteLocalRef(s);\012 }\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012    env_-&gt;DeleteLocalRef(s);\012    std::string expected(StringPrintf(&quot;use of deleted local reference %p&quot;, s));\012    check_jni_abort_catcher.Check(expected.c_str());\012    EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012 }\012\012  s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  jobject o = env_-&gt;NewLocalRef(s);\012  ASSERT_NE(o, nullptr);\012\012  env_-&gt;DeleteLocalRef(s);\012  env_-&gt;DeleteLocalRef(o);\012},TEST_F(JniInternalTest, DeleteLocalRef) {\012 // This tests leads to warnings and errors in the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  env_-&gt;DeleteLocalRef(s);\012\012 // Currently, deleting an already-deleted reference is just a CheckJNI warning.\012 {\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      env_-&gt;DeleteLocalRef(s);\012 }\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012    env_-&gt;DeleteLocalRef(s);\012    std::string expected(StringPrintf(&quot;use of deleted local reference %p&quot;, s));\012    check_jni_abort_catcher.Check(expected.c_str());\012    EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012 }\012\012  s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  jobject o = env_-&gt;NewLocalRef(s);\012  ASSERT_NE(o, nullptr);\012\012  env_-&gt;DeleteLocalRef(s);\012  env_-&gt;DeleteLocalRef(o);\012})<SUB>2091</SUB>> ]
-"17725" [label = <(UNKNOWN,TEST_F(JniInternalTest, PushLocalFrame_10395422) {\012 // The JNI specification is ambiguous about whether the given capacity is to be interpreted as a\012 // maximum or as a minimum, but it seems like it's supposed to be a minimum, and that's how\012 // Android historically treated it, and it's how the RI treats it. It's also the more useful\012 // interpretation!\012  ASSERT_EQ(JNI_OK, env_-&gt;PushLocalFrame(0));\012  env_-&gt;PopLocalFrame(nullptr);\012\012 // The following two tests will print errors to the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012 // Negative capacities are not allowed.\012  ASSERT_EQ(JNI_ERR, env_-&gt;PushLocalFrame(-1));\012},TEST_F(JniInternalTest, PushLocalFrame_10395422) {\012 // The JNI specification is ambiguous about whether the given capacity is to be interpreted as a\012 // maximum or as a minimum, but it seems like it's supposed to be a minimum, and that's how\012 // Android historically treated it, and it's how the RI treats it. It's also the more useful\012 // interpretation!\012  ASSERT_EQ(JNI_OK, env_-&gt;PushLocalFrame(0));\012  env_-&gt;PopLocalFrame(nullptr);\012\012 // The following two tests will print errors to the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012 // Negative capacities are not allowed.\012  ASSERT_EQ(JNI_ERR, env_-&gt;PushLocalFrame(-1));\012})<SUB>2123</SUB>> ]
-"17726" [label = <(UNKNOWN,TEST_F(JniInternalTest, PushLocalFrame_PopLocalFrame) {\012 // This tests leads to errors in the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012  jobject original = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(original, nullptr);\012\012  jobject outer;\012  jobject inner1, inner2;\012 ScopedObjectAccess soa(env_);\012 {\012    ASSERT_EQ(JNI_OK, env_-&gt;PushLocalFrame(4));\012    outer = env_-&gt;NewLocalRef(original);\012\012 {\012      ASSERT_EQ(JNI_OK, env_-&gt;PushLocalFrame(4));\012      inner1 = env_-&gt;NewLocalRef(outer);\012      inner2 = env_-&gt;NewStringUTF(&quot;survivor&quot;);\012      EXPECT_NE(env_-&gt;PopLocalFrame(inner2), nullptr);\012 }\012\012    EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(original));\012    EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(outer));\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(inner1));\012      check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012 }\012\012 // Our local reference for the survivor is invalid because the survivor\012 // gets a new local reference...\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(inner2));\012      check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012 }\012\012    EXPECT_EQ(env_-&gt;PopLocalFrame(nullptr), nullptr);\012 }\012  EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(original));\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(outer));\012  check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012  EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(inner1));\012  check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012  EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(inner2));\012  check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012},TEST_F(JniInternalTest, PushLocalFrame_PopLocalFrame) {\012 // This tests leads to errors in the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012  jobject original = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(original, nullptr);\012\012  jobject outer;\012  jobject inner1, inner2;\012 ScopedObjectAccess soa(env_);\012 {\012    ASSERT_EQ(JNI_OK, env_-&gt;PushLocalFrame(4));\012    outer = env_-&gt;NewLocalRef(original);\012\012 {\012      ASSERT_EQ(JNI_OK, env_-&gt;PushLocalFrame(4));\012      inner1 = env_-&gt;NewLocalRef(outer);\012      inner2 = env_-&gt;NewStringUTF(&quot;survivor&quot;);\012      EXPECT_NE(env_-&gt;PopLocalFrame(inner2), nullptr);\012 }\012\012    EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(original));\012    EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(outer));\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(inner1));\012      check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012 }\012\012 // Our local reference for the survivor is invalid because the survivor\012 // gets a new local reference...\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(inner2));\012      check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012 }\012\012    EXPECT_EQ(env_-&gt;PopLocalFrame(nullptr), nullptr);\012 }\012  EXPECT_EQ(JNILocalRefType, env_-&gt;GetObjectRefType(original));\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(outer));\012  check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012  EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(inner1));\012  check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012  EXPECT_EQ(JNIInvalidRefType, env_-&gt;GetObjectRefType(inner2));\012  check_jni_abort_catcher.Check(&quot;use of deleted local reference&quot;);\012})<SUB>2138</SUB>> ]
-"17727" [label = <(UNKNOWN,TEST_F(JniInternalTest, PushLocalFrame_LimitAndOverflow) {\012 // Try a very large value that should fail.\012  ASSERT_NE(JNI_OK, env_-&gt;PushLocalFrame(std::numeric_limits&lt;jint&gt;::max()));\012  ASSERT_TRUE(env_-&gt;ExceptionCheck());\012  env_-&gt;ExceptionClear();\012\012 // On 32-bit, also check for some overflow conditions.\012#ifndef __LP64__\012  ASSERT_EQ(JNI_OK, env_-&gt;PushLocalFrame(10));\012  ASSERT_NE(JNI_OK, env_-&gt;PushLocalFrame(std::numeric_limits&lt;jint&gt;::max() - 10));\012  ASSERT_TRUE(env_-&gt;ExceptionCheck());\012  env_-&gt;ExceptionClear();\012  EXPECT_EQ(env_-&gt;PopLocalFrame(nullptr), nullptr);\012#endif\012},TEST_F(JniInternalTest, PushLocalFrame_LimitAndOverflow) {\012 // Try a very large value that should fail.\012  ASSERT_NE(JNI_OK, env_-&gt;PushLocalFrame(std::numeric_limits&lt;jint&gt;::max()));\012  ASSERT_TRUE(env_-&gt;ExceptionCheck());\012  env_-&gt;ExceptionClear();\012\012 // On 32-bit, also check for some overflow conditions.\012#ifndef __LP64__\012  ASSERT_EQ(JNI_OK, env_-&gt;PushLocalFrame(10));\012  ASSERT_NE(JNI_OK, env_-&gt;PushLocalFrame(std::numeric_limits&lt;jint&gt;::max() - 10));\012  ASSERT_TRUE(env_-&gt;ExceptionCheck());\012  env_-&gt;ExceptionClear();\012  EXPECT_EQ(env_-&gt;PopLocalFrame(nullptr), nullptr);\012#endif\012})<SUB>2187</SUB>> ]
-"17728" [label = <(UNKNOWN,TEST_F(JniInternalTest, PushLocalFrame_b62223672) {\012 // The 512 entry limit has been lifted, try a larger value.\012  ASSERT_EQ(JNI_OK, env_-&gt;PushLocalFrame(1024));\012  EXPECT_EQ(env_-&gt;PopLocalFrame(nullptr), nullptr);\012},TEST_F(JniInternalTest, PushLocalFrame_b62223672) {\012 // The 512 entry limit has been lifted, try a larger value.\012  ASSERT_EQ(JNI_OK, env_-&gt;PushLocalFrame(1024));\012  EXPECT_EQ(env_-&gt;PopLocalFrame(nullptr), nullptr);\012})<SUB>2203</SUB>> ]
-"17729" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewGlobalRef_nullptr) {\012  EXPECT_EQ(env_-&gt;NewGlobalRef(nullptr), nullptr);\012},TEST_F(JniInternalTest, NewGlobalRef_nullptr) {\012  EXPECT_EQ(env_-&gt;NewGlobalRef(nullptr), nullptr);\012})<SUB>2209</SUB>> ]
-"17730" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewGlobalRef) {\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  jobject o = env_-&gt;NewGlobalRef(s);\012  EXPECT_NE(o, nullptr);\012  EXPECT_NE(o, s);\012\012  EXPECT_EQ(env_-&gt;GetObjectRefType(o), JNIGlobalRefType);\012},TEST_F(JniInternalTest, NewGlobalRef) {\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  jobject o = env_-&gt;NewGlobalRef(s);\012  EXPECT_NE(o, nullptr);\012  EXPECT_NE(o, s);\012\012  EXPECT_EQ(env_-&gt;GetObjectRefType(o), JNIGlobalRefType);\012})<SUB>2213</SUB>> ]
-"17731" [label = <(UNKNOWN,TEST_F(JniInternalTest, DeleteGlobalRef_nullptr) {\012  env_-&gt;DeleteGlobalRef(nullptr);\012},TEST_F(JniInternalTest, DeleteGlobalRef_nullptr) {\012  env_-&gt;DeleteGlobalRef(nullptr);\012})<SUB>2223</SUB>> ]
-"17732" [label = <(UNKNOWN,TEST_F(JniInternalTest, DeleteGlobalRef) {\012 // This tests leads to warnings and errors in the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012\012  jobject o = env_-&gt;NewGlobalRef(s);\012  ASSERT_NE(o, nullptr);\012  env_-&gt;DeleteGlobalRef(o);\012\012 // Currently, deleting an already-deleted reference is just a CheckJNI warning.\012 {\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      env_-&gt;DeleteGlobalRef(o);\012 }\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012    env_-&gt;DeleteGlobalRef(o);\012    std::string expected(StringPrintf(&quot;use of deleted global reference %p&quot;, o));\012    check_jni_abort_catcher.Check(expected.c_str());\012    EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012 }\012\012  jobject o1 = env_-&gt;NewGlobalRef(s);\012  ASSERT_NE(o1, nullptr);\012  jobject o2 = env_-&gt;NewGlobalRef(s);\012  ASSERT_NE(o2, nullptr);\012\012  env_-&gt;DeleteGlobalRef(o1);\012  env_-&gt;DeleteGlobalRef(o2);\012},TEST_F(JniInternalTest, DeleteGlobalRef) {\012 // This tests leads to warnings and errors in the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012\012  jobject o = env_-&gt;NewGlobalRef(s);\012  ASSERT_NE(o, nullptr);\012  env_-&gt;DeleteGlobalRef(o);\012\012 // Currently, deleting an already-deleted reference is just a CheckJNI warning.\012 {\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      env_-&gt;DeleteGlobalRef(o);\012 }\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012    env_-&gt;DeleteGlobalRef(o);\012    std::string expected(StringPrintf(&quot;use of deleted global reference %p&quot;, o));\012    check_jni_abort_catcher.Check(expected.c_str());\012    EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012 }\012\012  jobject o1 = env_-&gt;NewGlobalRef(s);\012  ASSERT_NE(o1, nullptr);\012  jobject o2 = env_-&gt;NewGlobalRef(s);\012  ASSERT_NE(o2, nullptr);\012\012  env_-&gt;DeleteGlobalRef(o1);\012  env_-&gt;DeleteGlobalRef(o2);\012})<SUB>2227</SUB>> ]
-"17733" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewWeakGlobalRef_nullptr) {\012  EXPECT_EQ(env_-&gt;NewWeakGlobalRef(nullptr), nullptr);\012},TEST_F(JniInternalTest, NewWeakGlobalRef_nullptr) {\012  EXPECT_EQ(env_-&gt;NewWeakGlobalRef(nullptr), nullptr);\012})<SUB>2262</SUB>> ]
-"17734" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewWeakGlobalRef) {\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  jobject o = env_-&gt;NewWeakGlobalRef(s);\012  EXPECT_NE(o, nullptr);\012  EXPECT_NE(o, s);\012\012  EXPECT_EQ(env_-&gt;GetObjectRefType(o), JNIWeakGlobalRefType);\012},TEST_F(JniInternalTest, NewWeakGlobalRef) {\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012  jobject o = env_-&gt;NewWeakGlobalRef(s);\012  EXPECT_NE(o, nullptr);\012  EXPECT_NE(o, s);\012\012  EXPECT_EQ(env_-&gt;GetObjectRefType(o), JNIWeakGlobalRefType);\012})<SUB>2266</SUB>> ]
-"17735" [label = <(UNKNOWN,TEST_F(JniInternalTest, DeleteWeakGlobalRef_nullptr) {\012  env_-&gt;DeleteWeakGlobalRef(nullptr);\012},TEST_F(JniInternalTest, DeleteWeakGlobalRef_nullptr) {\012  env_-&gt;DeleteWeakGlobalRef(nullptr);\012})<SUB>2276</SUB>> ]
-"17736" [label = <(UNKNOWN,TEST_F(JniInternalTest, DeleteWeakGlobalRef) {\012 // This tests leads to warnings and errors in the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012\012  jobject o = env_-&gt;NewWeakGlobalRef(s);\012  ASSERT_NE(o, nullptr);\012  env_-&gt;DeleteWeakGlobalRef(o);\012\012 // Currently, deleting an already-deleted reference is just a CheckJNI warning.\012 {\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      env_-&gt;DeleteWeakGlobalRef(o);\012 }\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012    env_-&gt;DeleteWeakGlobalRef(o);\012    std::string expected(StringPrintf(&quot;use of deleted weak global reference %p&quot;, o));\012    check_jni_abort_catcher.Check(expected.c_str());\012    EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012 }\012\012  jobject o1 = env_-&gt;NewWeakGlobalRef(s);\012  ASSERT_NE(o1, nullptr);\012  jobject o2 = env_-&gt;NewWeakGlobalRef(s);\012  ASSERT_NE(o2, nullptr);\012\012  env_-&gt;DeleteWeakGlobalRef(o1);\012  env_-&gt;DeleteWeakGlobalRef(o2);\012},TEST_F(JniInternalTest, DeleteWeakGlobalRef) {\012 // This tests leads to warnings and errors in the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012  jstring s = env_-&gt;NewStringUTF(&quot;&quot;);\012  ASSERT_NE(s, nullptr);\012\012  jobject o = env_-&gt;NewWeakGlobalRef(s);\012  ASSERT_NE(o, nullptr);\012  env_-&gt;DeleteWeakGlobalRef(o);\012\012 // Currently, deleting an already-deleted reference is just a CheckJNI warning.\012 {\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012      env_-&gt;DeleteWeakGlobalRef(o);\012 }\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012    env_-&gt;DeleteWeakGlobalRef(o);\012    std::string expected(StringPrintf(&quot;use of deleted weak global reference %p&quot;, o));\012    check_jni_abort_catcher.Check(expected.c_str());\012    EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012 }\012\012  jobject o1 = env_-&gt;NewWeakGlobalRef(s);\012  ASSERT_NE(o1, nullptr);\012  jobject o2 = env_-&gt;NewWeakGlobalRef(s);\012  ASSERT_NE(o2, nullptr);\012\012  env_-&gt;DeleteWeakGlobalRef(o1);\012  env_-&gt;DeleteWeakGlobalRef(o2);\012})<SUB>2280</SUB>> ]
-"17737" [label = <(UNKNOWN,TEST_F(JniInternalTest, ExceptionDescribe) {\012 // This checks how ExceptionDescribe handles call without exception.\012  env_-&gt;ExceptionClear();\012  env_-&gt;ExceptionDescribe();\012},TEST_F(JniInternalTest, ExceptionDescribe) {\012 // This checks how ExceptionDescribe handles call without exception.\012  env_-&gt;ExceptionClear();\012  env_-&gt;ExceptionDescribe();\012})<SUB>2315</SUB>> ]
-"17738" [label = <(UNKNOWN,TEST_F(JniInternalTest, Throw) {\012  jclass exception_class = env_-&gt;FindClass(&quot;java/lang/RuntimeException&quot;);\012  ASSERT_TRUE(exception_class != nullptr);\012  jthrowable exception = reinterpret_cast&lt;jthrowable&gt;(env_-&gt;AllocObject(exception_class));\012  ASSERT_TRUE(exception != nullptr);\012\012  EXPECT_EQ(JNI_OK, env_-&gt;Throw(exception));\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  jthrowable thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsSameObject(exception, thrown_exception));\012\012 // Bad argument.\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(JNI_ERR, env_-&gt;Throw(nullptr));\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  EXPECT_EQ(JNI_ERR, env_-&gt;Throw(nullptr));\012  check_jni_abort_catcher.Check(&quot;Throw received NULL jthrowable&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012},TEST_F(JniInternalTest, Throw) {\012  jclass exception_class = env_-&gt;FindClass(&quot;java/lang/RuntimeException&quot;);\012  ASSERT_TRUE(exception_class != nullptr);\012  jthrowable exception = reinterpret_cast&lt;jthrowable&gt;(env_-&gt;AllocObject(exception_class));\012  ASSERT_TRUE(exception != nullptr);\012\012  EXPECT_EQ(JNI_OK, env_-&gt;Throw(exception));\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  jthrowable thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsSameObject(exception, thrown_exception));\012\012 // Bad argument.\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  EXPECT_EQ(JNI_ERR, env_-&gt;Throw(nullptr));\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  EXPECT_EQ(JNI_ERR, env_-&gt;Throw(nullptr));\012  check_jni_abort_catcher.Check(&quot;Throw received NULL jthrowable&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012})<SUB>2321</SUB>> ]
-"17739" [label = <(UNKNOWN,TEST_F(JniInternalTest, ThrowNew) {\012  jclass exception_class = env_-&gt;FindClass(&quot;java/lang/RuntimeException&quot;);\012  ASSERT_TRUE(exception_class != nullptr);\012\012  jthrowable thrown_exception;\012\012  EXPECT_EQ(JNI_OK, env_-&gt;ThrowNew(exception_class, &quot;hello world&quot;));\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(thrown_exception, exception_class));\012\012  EXPECT_EQ(JNI_OK, env_-&gt;ThrowNew(exception_class, nullptr));\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(thrown_exception, exception_class));\012\012 // Bad argument.\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  EXPECT_EQ(JNI_ERR, env_-&gt;ThrowNew(nullptr, nullptr));\012  check_jni_abort_catcher.Check(&quot;c == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(JNI_ERR, env_-&gt;ThrowNew(nullptr, nullptr));\012  check_jni_abort_catcher.Check(&quot;ThrowNew received NULL jclass&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012},TEST_F(JniInternalTest, ThrowNew) {\012  jclass exception_class = env_-&gt;FindClass(&quot;java/lang/RuntimeException&quot;);\012  ASSERT_TRUE(exception_class != nullptr);\012\012  jthrowable thrown_exception;\012\012  EXPECT_EQ(JNI_OK, env_-&gt;ThrowNew(exception_class, &quot;hello world&quot;));\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(thrown_exception, exception_class));\012\012  EXPECT_EQ(JNI_OK, env_-&gt;ThrowNew(exception_class, nullptr));\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(thrown_exception, exception_class));\012\012 // Bad argument.\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  EXPECT_EQ(JNI_ERR, env_-&gt;ThrowNew(nullptr, nullptr));\012  check_jni_abort_catcher.Check(&quot;c == null&quot;);\012  EXPECT_FALSE(vm_-&gt;SetCheckJniEnabled(true));\012  EXPECT_EQ(JNI_ERR, env_-&gt;ThrowNew(nullptr, nullptr));\012  check_jni_abort_catcher.Check(&quot;ThrowNew received NULL jclass&quot;);\012  EXPECT_TRUE(vm_-&gt;SetCheckJniEnabled(old_check_jni));\012})<SUB>2343</SUB>> ]
-"17740" [label = <(UNKNOWN,TEST_F(JniInternalTest, NewDirectBuffer_GetDirectBufferAddress_GetDirectBufferCapacity) {\012 // Start runtime.\012 Thread* self = Thread::Current();\012  self-&gt;TransitionFromSuspendedToRunnable();\012 MakeInterpreted(class_linker_-&gt;FindSystemClass(self, &quot;Ljava/lang/Class;&quot;));\012 MakeInterpreted(class_linker_-&gt;FindSystemClass(self, &quot;Ljava/lang/Object;&quot;));\012 MakeInterpreted(class_linker_-&gt;FindSystemClass(self, &quot;Ljava/nio/DirectByteBuffer;&quot;));\012 MakeInterpreted(class_linker_-&gt;FindSystemClass(self, &quot;Ljava/nio/Bits;&quot;));\012 MakeInterpreted(class_linker_-&gt;FindSystemClass(self, &quot;Ljava/nio/MappedByteBuffer;&quot;));\012 MakeInterpreted(class_linker_-&gt;FindSystemClass(self, &quot;Ljava/nio/ByteBuffer;&quot;));\012 MakeInterpreted(class_linker_-&gt;FindSystemClass(self, &quot;Ljava/nio/Buffer;&quot;));\012 // TODO: we only load a dex file here as starting the runtime relies upon it.\012 const char* class_name = &quot;StaticLeafMethods&quot;;\012 LoadDex(class_name);\012 bool started = runtime_-&gt;Start();\012  ASSERT_TRUE(started);\012\012  jclass buffer_class = env_-&gt;FindClass(&quot;java/nio/Buffer&quot;);\012  ASSERT_NE(buffer_class, nullptr);\012\012 char bytes[1024];\012  jobject buffer = env_-&gt;NewDirectByteBuffer(bytes, sizeof(bytes));\012  ASSERT_NE(buffer, nullptr);\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(buffer, buffer_class));\012  ASSERT_EQ(env_-&gt;GetDirectBufferAddress(buffer), bytes);\012  ASSERT_EQ(env_-&gt;GetDirectBufferCapacity(buffer), static_cast&lt;jlong&gt;(sizeof(bytes)));\012\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    env_-&gt;NewDirectByteBuffer(bytes, static_cast&lt;jlong&gt;(INT_MAX) + 1);\012    check_jni_abort_catcher.Check(&quot;in call to NewDirectByteBuffer&quot;);\012 }\012},TEST_F(JniInternalTest, NewDirectBuffer_GetDirectBufferAddress_GetDirectBufferCapacity) {\012 // Start runtime.\012 Thread* self = Thread::Current();\012  self-&gt;TransitionFromSuspendedToRunnable();\012 MakeInterpreted(class_linker_-&gt;FindSystemClass(self, &quot;Ljava/lang/Class;&quot;));\012 MakeInterpreted(class_linker_-&gt;FindSystemClass(self, &quot;Ljava/lang/Object;&quot;));\012 MakeInterpreted(class_linker_-&gt;FindSystemClass(self, &quot;Ljava/nio/DirectByteBuffer;&quot;));\012 MakeInterpreted(class_linker_-&gt;FindSystemClass(self, &quot;Ljava/nio/Bits;&quot;));\012 MakeInterpreted(class_linker_-&gt;FindSystemClass(self, &quot;Ljava/nio/MappedByteBuffer;&quot;));\012 MakeInterpreted(class_linker_-&gt;FindSystemClass(self, &quot;Ljava/nio/ByteBuffer;&quot;));\012 MakeInterpreted(class_linker_-&gt;FindSystemClass(self, &quot;Ljava/nio/Buffer;&quot;));\012 // TODO: we only load a dex file here as starting the runtime relies upon it.\012 const char* class_name = &quot;StaticLeafMethods&quot;;\012 LoadDex(class_name);\012 bool started = runtime_-&gt;Start();\012  ASSERT_TRUE(started);\012\012  jclass buffer_class = env_-&gt;FindClass(&quot;java/nio/Buffer&quot;);\012  ASSERT_NE(buffer_class, nullptr);\012\012 char bytes[1024];\012  jobject buffer = env_-&gt;NewDirectByteBuffer(bytes, sizeof(bytes));\012  ASSERT_NE(buffer, nullptr);\012  ASSERT_TRUE(env_-&gt;IsInstanceOf(buffer, buffer_class));\012  ASSERT_EQ(env_-&gt;GetDirectBufferAddress(buffer), bytes);\012  ASSERT_EQ(env_-&gt;GetDirectBufferCapacity(buffer), static_cast&lt;jlong&gt;(sizeof(bytes)));\012\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    env_-&gt;NewDirectByteBuffer(bytes, static_cast&lt;jlong&gt;(INT_MAX) + 1);\012    check_jni_abort_catcher.Check(&quot;in call to NewDirectByteBuffer&quot;);\012 }\012})<SUB>2372</SUB>> ]
-"17741" [label = <(UNKNOWN,TEST_F(JniInternalTest, MonitorEnterExit) {\012 // This will print some error messages. Suppress.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012 // Create an object to torture.\012  jclass object_class = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_NE(object_class, nullptr);\012  jobject object = env_-&gt;AllocObject(object_class);\012  ASSERT_NE(object, nullptr);\012\012 // Expected class of exceptions\012  jclass imse_class = env_-&gt;FindClass(&quot;java/lang/IllegalMonitorStateException&quot;);\012  ASSERT_NE(imse_class, nullptr);\012\012  jthrowable thrown_exception;\012\012 // Unlock of unowned monitor\012  env_-&gt;MonitorExit(object);\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(thrown_exception, imse_class));\012\012 // Lock of unowned monitor\012  env_-&gt;MonitorEnter(object);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012 // Regular unlock\012  env_-&gt;MonitorExit(object);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Recursively lock a lot\012 size_t max_recursive_lock = 1024;\012 for (size_t i = 0; i &lt; max_recursive_lock; i++) {\012    env_-&gt;MonitorEnter(object);\012    EXPECT_FALSE(env_-&gt;ExceptionCheck());\012 }\012 // Recursively unlock a lot\012 for (size_t i = 0; i &lt; max_recursive_lock; i++) {\012    env_-&gt;MonitorExit(object);\012    EXPECT_FALSE(env_-&gt;ExceptionCheck());\012 }\012\012 // Unlock of unowned monitor\012  env_-&gt;MonitorExit(object);\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(thrown_exception, imse_class));\012\012 // It's an error to call MonitorEnter or MonitorExit on null.\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    env_-&gt;MonitorEnter(nullptr);\012    check_jni_abort_catcher.Check(&quot;in call to MonitorEnter&quot;);\012    env_-&gt;MonitorExit(nullptr);\012    check_jni_abort_catcher.Check(&quot;in call to MonitorExit&quot;);\012 }\012},TEST_F(JniInternalTest, MonitorEnterExit) {\012 // This will print some error messages. Suppress.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012\012 // Create an object to torture.\012  jclass object_class = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_NE(object_class, nullptr);\012  jobject object = env_-&gt;AllocObject(object_class);\012  ASSERT_NE(object, nullptr);\012\012 // Expected class of exceptions\012  jclass imse_class = env_-&gt;FindClass(&quot;java/lang/IllegalMonitorStateException&quot;);\012  ASSERT_NE(imse_class, nullptr);\012\012  jthrowable thrown_exception;\012\012 // Unlock of unowned monitor\012  env_-&gt;MonitorExit(object);\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(thrown_exception, imse_class));\012\012 // Lock of unowned monitor\012  env_-&gt;MonitorEnter(object);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012 // Regular unlock\012  env_-&gt;MonitorExit(object);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 // Recursively lock a lot\012 size_t max_recursive_lock = 1024;\012 for (size_t i = 0; i &lt; max_recursive_lock; i++) {\012    env_-&gt;MonitorEnter(object);\012    EXPECT_FALSE(env_-&gt;ExceptionCheck());\012 }\012 // Recursively unlock a lot\012 for (size_t i = 0; i &lt; max_recursive_lock; i++) {\012    env_-&gt;MonitorExit(object);\012    EXPECT_FALSE(env_-&gt;ExceptionCheck());\012 }\012\012 // Unlock of unowned monitor\012  env_-&gt;MonitorExit(object);\012  EXPECT_TRUE(env_-&gt;ExceptionCheck());\012  thrown_exception = env_-&gt;ExceptionOccurred();\012  env_-&gt;ExceptionClear();\012  EXPECT_TRUE(env_-&gt;IsInstanceOf(thrown_exception, imse_class));\012\012 // It's an error to call MonitorEnter or MonitorExit on null.\012 {\012 CheckJniAbortCatcher check_jni_abort_catcher;\012    env_-&gt;MonitorEnter(nullptr);\012    check_jni_abort_catcher.Check(&quot;in call to MonitorEnter&quot;);\012    env_-&gt;MonitorExit(nullptr);\012    check_jni_abort_catcher.Check(&quot;in call to MonitorExit&quot;);\012 }\012})<SUB>2406</SUB>> ]
-"17753" [label = <(UNKNOWN,TEST_F(JniInternalTest, MonitorExitLockedInDifferentCall) {\012 SetUpForTest(false, &quot;foo&quot;, &quot;()V&quot;, reinterpret_cast&lt;void*&gt;(&amp;Java_MyClassNatives_foo_exit));\012  ASSERT_NE(jobj_, nullptr);\012\012  env_-&gt;MonitorEnter(jobj_);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  env_-&gt;CallNonvirtualVoidMethod(jobj_, jklass_, jmethod_);\012  check_jni_abort_catcher.Check(&quot;Unlocking monitor that wasn't locked here&quot;);\012},TEST_F(JniInternalTest, MonitorExitLockedInDifferentCall) {\012 SetUpForTest(false, &quot;foo&quot;, &quot;()V&quot;, reinterpret_cast&lt;void*&gt;(&amp;Java_MyClassNatives_foo_exit));\012  ASSERT_NE(jobj_, nullptr);\012\012  env_-&gt;MonitorEnter(jobj_);\012  EXPECT_FALSE(env_-&gt;ExceptionCheck());\012\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  env_-&gt;CallNonvirtualVoidMethod(jobj_, jklass_, jmethod_);\012  check_jni_abort_catcher.Check(&quot;Unlocking monitor that wasn't locked here&quot;);\012})<SUB>2470</SUB>> ]
-"17765" [label = <(UNKNOWN,TEST_F(JniInternalTest, MonitorExitNotAllUnlocked) {\012 SetUpForTest(false,\012 &quot;foo&quot;,\012 &quot;()V&quot;,\012 reinterpret_cast&lt;void*&gt;(&amp;Java_MyClassNatives_foo_enter_no_exit));\012  ASSERT_NE(jobj_, nullptr);\012\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  env_-&gt;CallNonvirtualVoidMethod(jobj_, jklass_, jmethod_);\012  check_jni_abort_catcher.Check(&quot;Still holding a locked object on JNI end&quot;);\012},TEST_F(JniInternalTest, MonitorExitNotAllUnlocked) {\012 SetUpForTest(false,\012 &quot;foo&quot;,\012 &quot;()V&quot;,\012 reinterpret_cast&lt;void*&gt;(&amp;Java_MyClassNatives_foo_enter_no_exit));\012  ASSERT_NE(jobj_, nullptr);\012\012 CheckJniAbortCatcher check_jni_abort_catcher;\012  env_-&gt;CallNonvirtualVoidMethod(jobj_, jklass_, jmethod_);\012  check_jni_abort_catcher.Check(&quot;Still holding a locked object on JNI end&quot;);\012})<SUB>2487</SUB>> ]
-"17837" [label = <(UNKNOWN,TEST_F(JniInternalTest, DetachThreadUnlockJNIMonitors) {\012 // We need to lock an object, detach, reattach, and check the locks.\012 //\012 // As re-attaching will create a different thread, we need to use a global\012 // ref to keep the object around.\012\012 // Create an object to torture.\012  jobject global_ref;\012 {\012    jclass object_class = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012    ASSERT_NE(object_class, nullptr);\012    jobject object = env_-&gt;AllocObject(object_class);\012    ASSERT_NE(object, nullptr);\012    global_ref = env_-&gt;NewGlobalRef(object);\012 }\012\012 // Lock it.\012  env_-&gt;MonitorEnter(global_ref);\012  ASSERT_TRUE(IsLocked(env_, global_ref));\012\012 // Detach and re-attach.\012  jint detach_result = vm_-&gt;DetachCurrentThread();\012  ASSERT_EQ(detach_result, JNI_OK);\012  jint attach_result = vm_-&gt;AttachCurrentThread(&amp;env_, nullptr);\012  ASSERT_EQ(attach_result, JNI_OK);\012\012 // Look at the global ref, check whether it's still locked.\012  ASSERT_FALSE(IsLocked(env_, global_ref));\012\012 // Delete the global ref.\012  env_-&gt;DeleteGlobalRef(global_ref);\012},TEST_F(JniInternalTest, DetachThreadUnlockJNIMonitors) {\012 // We need to lock an object, detach, reattach, and check the locks.\012 //\012 // As re-attaching will create a different thread, we need to use a global\012 // ref to keep the object around.\012\012 // Create an object to torture.\012  jobject global_ref;\012 {\012    jclass object_class = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012    ASSERT_NE(object_class, nullptr);\012    jobject object = env_-&gt;AllocObject(object_class);\012    ASSERT_NE(object, nullptr);\012    global_ref = env_-&gt;NewGlobalRef(object);\012 }\012\012 // Lock it.\012  env_-&gt;MonitorEnter(global_ref);\012  ASSERT_TRUE(IsLocked(env_, global_ref));\012\012 // Detach and re-attach.\012  jint detach_result = vm_-&gt;DetachCurrentThread();\012  ASSERT_EQ(detach_result, JNI_OK);\012  jint attach_result = vm_-&gt;AttachCurrentThread(&amp;env_, nullptr);\012  ASSERT_EQ(attach_result, JNI_OK);\012\012 // Look at the global ref, check whether it's still locked.\012  ASSERT_FALSE(IsLocked(env_, global_ref));\012\012 // Delete the global ref.\012  env_-&gt;DeleteGlobalRef(global_ref);\012})<SUB>2517</SUB>> ]
-"17838" [label = <(UNKNOWN,TEST_F(JniInternalTest, IndirectReferenceTableOffsets) {\012 // The segment_state_ field is private, and we want to avoid friend declaration. So we'll check\012 // by modifying memory.\012 // The parameters don't really matter here.\012  std::string error_msg;\012 IndirectReferenceTable irt(5,\012 IndirectRefKind::kGlobal,\012 IndirectReferenceTable::ResizableCapacity::kNo,\012 &amp;error_msg);\012  ASSERT_TRUE(irt.IsValid()) &lt;&lt; error_msg;\012 IRTSegmentState old_state = irt.GetSegmentState();\012\012 // Write some new state directly. We invert parts of old_state to ensure a new value.\012 IRTSegmentState new_state;\012  new_state.top_index = old_state.top_index ^ 0x07705005;\012  ASSERT_NE(old_state.top_index, new_state.top_index);\012\012 uint8_t* base = reinterpret_cast&lt;uint8_t*&gt;(&amp;irt);\012 int32_t segment_state_offset =\012 IndirectReferenceTable::SegmentStateOffset(sizeof(void*)).Int32Value();\012 *reinterpret_cast&lt;IRTSegmentState*&gt;(base + segment_state_offset) = new_state;\012\012 // Read and compare.\012  EXPECT_EQ(new_state.top_index, irt.GetSegmentState().top_index);\012},TEST_F(JniInternalTest, IndirectReferenceTableOffsets) {\012 // The segment_state_ field is private, and we want to avoid friend declaration. So we'll check\012 // by modifying memory.\012 // The parameters don't really matter here.\012  std::string error_msg;\012 IndirectReferenceTable irt(5,\012 IndirectRefKind::kGlobal,\012 IndirectReferenceTable::ResizableCapacity::kNo,\012 &amp;error_msg);\012  ASSERT_TRUE(irt.IsValid()) &lt;&lt; error_msg;\012 IRTSegmentState old_state = irt.GetSegmentState();\012\012 // Write some new state directly. We invert parts of old_state to ensure a new value.\012 IRTSegmentState new_state;\012  new_state.top_index = old_state.top_index ^ 0x07705005;\012  ASSERT_NE(old_state.top_index, new_state.top_index);\012\012 uint8_t* base = reinterpret_cast&lt;uint8_t*&gt;(&amp;irt);\012 int32_t segment_state_offset =\012 IndirectReferenceTable::SegmentStateOffset(sizeof(void*)).Int32Value();\012 *reinterpret_cast&lt;IRTSegmentState*&gt;(base + segment_state_offset) = new_state;\012\012 // Read and compare.\012  EXPECT_EQ(new_state.top_index, irt.GetSegmentState().top_index);\012})<SUB>2551</SUB>> ]
-"17839" [label = <(UNKNOWN,TEST_F(JniInternalTest, JNIEnvExtOffsets) {\012  EXPECT_EQ(OFFSETOF_MEMBER(JNIEnvExt, local_ref_cookie_),\012 JNIEnvExt::LocalRefCookieOffset(sizeof(void*)).Uint32Value());\012\012  EXPECT_EQ(OFFSETOF_MEMBER(JNIEnvExt, self_), JNIEnvExt::SelfOffset(sizeof(void*)).Uint32Value());\012\012 // segment_state_ is private in the IndirectReferenceTable. So this test isn't as good as we'd\012 // hope it to be.\012 uint32_t segment_state_now =\012      OFFSETOF_MEMBER(JNIEnvExt, locals_) +\012 IndirectReferenceTable::SegmentStateOffset(sizeof(void*)).Uint32Value();\012 uint32_t segment_state_computed = JNIEnvExt::SegmentStateOffset(sizeof(void*)).Uint32Value();\012  EXPECT_EQ(segment_state_now, segment_state_computed);\012},TEST_F(JniInternalTest, JNIEnvExtOffsets) {\012  EXPECT_EQ(OFFSETOF_MEMBER(JNIEnvExt, local_ref_cookie_),\012 JNIEnvExt::LocalRefCookieOffset(sizeof(void*)).Uint32Value());\012\012  EXPECT_EQ(OFFSETOF_MEMBER(JNIEnvExt, self_), JNIEnvExt::SelfOffset(sizeof(void*)).Uint32Value());\012\012 // segment_state_ is private in the IndirectReferenceTable. So this test isn't as good as we'd\012 // hope it to be.\012 uint32_t segment_state_now =\012      OFFSETOF_MEMBER(JNIEnvExt, locals_) +\012 IndirectReferenceTable::SegmentStateOffset(sizeof(void*)).Uint32Value();\012 uint32_t segment_state_computed = JNIEnvExt::SegmentStateOffset(sizeof(void*)).Uint32Value();\012  EXPECT_EQ(segment_state_now, segment_state_computed);\012})<SUB>2578</SUB>> ]
-"17841" [label = <(&lt;operator&gt;.assignment,gGlobalRefCount = 0)<SUB>2593</SUB>> ]
-"17845" [label = <(&lt;operator&gt;.assignment,* gOriginalEnv = nullptr)<SUB>2594</SUB>> ]
-"17863" [label = <(UNKNOWN,TEST_F(JniInternalTest, JNIEnvExtTableOverride) {\012 JNINativeInterface env_override;\012  memcpy(&amp;env_override, env_-&gt;functions, sizeof(JNINativeInterface));\012\012  gOriginalEnv = env_-&gt;functions;\012  env_override.NewGlobalRef = CountNewGlobalRef;\012  gGlobalRefCount = 0;\012\012  jclass local = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_TRUE(local != nullptr);\012\012 // Set the table, add a global ref, see whether the counter increases.\012 JNIEnvExt::SetTableOverride(&amp;env_override);\012\012  jobject global = env_-&gt;NewGlobalRef(local);\012  EXPECT_EQ(1u, gGlobalRefCount);\012  env_-&gt;DeleteGlobalRef(global);\012\012 // Reset\012 JNIEnvExt::SetTableOverride(nullptr);\012\012  jobject global2 = env_-&gt;NewGlobalRef(local);\012  EXPECT_EQ(1u, gGlobalRefCount);\012  env_-&gt;DeleteGlobalRef(global2);\012},TEST_F(JniInternalTest, JNIEnvExtTableOverride) {\012 JNINativeInterface env_override;\012  memcpy(&amp;env_override, env_-&gt;functions, sizeof(JNINativeInterface));\012\012  gOriginalEnv = env_-&gt;functions;\012  env_override.NewGlobalRef = CountNewGlobalRef;\012  gGlobalRefCount = 0;\012\012  jclass local = env_-&gt;FindClass(&quot;java/lang/Object&quot;);\012  ASSERT_TRUE(local != nullptr);\012\012 // Set the table, add a global ref, see whether the counter increases.\012 JNIEnvExt::SetTableOverride(&amp;env_override);\012\012  jobject global = env_-&gt;NewGlobalRef(local);\012  EXPECT_EQ(1u, gGlobalRefCount);\012  env_-&gt;DeleteGlobalRef(global);\012\012 // Reset\012 JNIEnvExt::SetTableOverride(nullptr);\012\012  jobject global2 = env_-&gt;NewGlobalRef(local);\012  EXPECT_EQ(1u, gGlobalRefCount);\012  env_-&gt;DeleteGlobalRef(global2);\012})<SUB>2602</SUB>> ]
-"17864" [label = <(UNKNOWN,TEST_F(JniInternalTest, NonAttachedThread) {\012 // This tests leads to warnings and errors in the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012 CheckJniAbortCatcher check_jni_abort_catcher;\012\012 auto callee = [](void* env_ptr) -&gt; void* {\012 JNIEnv* env = reinterpret_cast&lt;JNIEnv*&gt;(env_ptr);\012    env-&gt;NewStringUTF(&quot;test&quot;);\012 return nullptr;\012 };\012\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  vm_-&gt;SetCheckJniEnabled(true);\012 {\012 pthread_t pthread;\012 int pthread_create_result = pthread_create(&amp;pthread,\012 /* pthread_attr */ nullptr,\012                                               callee,\012 reinterpret_cast&lt;void*&gt;(env_));\012    CHECK_EQ(pthread_create_result, 0);\012 int pthread_join_result = pthread_join(pthread, /* thread_return */ nullptr);\012    CHECK_EQ(pthread_join_result, 0);\012 }\012  vm_-&gt;SetCheckJniEnabled(old_check_jni);\012\012  check_jni_abort_catcher.Check(&quot;is making JNI calls without being attached&quot;);\012},TEST_F(JniInternalTest, NonAttachedThread) {\012 // This tests leads to warnings and errors in the log.\012 ScopedLogSeverity sls(LogSeverity::FATAL);\012 CheckJniAbortCatcher check_jni_abort_catcher;\012\012 auto callee = [](void* env_ptr) -&gt; void* {\012 JNIEnv* env = reinterpret_cast&lt;JNIEnv*&gt;(env_ptr);\012    env-&gt;NewStringUTF(&quot;test&quot;);\012 return nullptr;\012 };\012\012 bool old_check_jni = vm_-&gt;SetCheckJniEnabled(false);\012  vm_-&gt;SetCheckJniEnabled(true);\012 {\012 pthread_t pthread;\012 int pthread_create_result = pthread_create(&amp;pthread,\012 /* pthread_attr */ nullptr,\012                                               callee,\012 reinterpret_cast&lt;void*&gt;(env_));\012    CHECK_EQ(pthread_create_result, 0);\012 int pthread_join_result = pthread_join(pthread, /* thread_return */ nullptr);\012    CHECK_EQ(pthread_join_result, 0);\012 }\012  vm_-&gt;SetCheckJniEnabled(old_check_jni);\012\012  check_jni_abort_catcher.Check(&quot;is making JNI calls without being attached&quot;);\012})<SUB>2628</SUB>> ]
-"15178" [label = <(METHOD,&lt;global&gt;)<SUB>1</SUB>> ]
-"17865" [label = <(METHOD_RETURN,ANY)<SUB>1</SUB>> ]
-  "17647" -> "17648" 
-  "17648" -> "17649" 
-  "17649" -> "17650" 
-  "17650" -> "17651" 
-  "17651" -> "17652" 
-  "17652" -> "17653" 
-  "17653" -> "17654" 
-  "17654" -> "17655" 
-  "17655" -> "17656" 
-  "17656" -> "17675" 
-  "17675" -> "17676" 
-  "17676" -> "17681" 
-  "17681" -> "17682" 
-  "17682" -> "17683" 
-  "17683" -> "17684" 
-  "17684" -> "17685" 
-  "17685" -> "17686" 
-  "17686" -> "17687" 
-  "17687" -> "17688" 
-  "17688" -> "17689" 
-  "17689" -> "17690" 
-  "17690" -> "17691" 
-  "17691" -> "17692" 
-  "17692" -> "17693" 
-  "17693" -> "17694" 
-  "17694" -> "17695" 
-  "17695" -> "17696" 
-  "17696" -> "17697" 
-  "17697" -> "17698" 
-  "17698" -> "17699" 
-  "17699" -> "17700" 
-  "17700" -> "17701" 
-  "17701" -> "17702" 
-  "17702" -> "17703" 
-  "17703" -> "17704" 
-  "17704" -> "17705" 
-  "17705" -> "17706" 
-  "17706" -> "17707" 
-  "17707" -> "17708" 
-  "17708" -> "17709" 
-  "17709" -> "17710" 
-  "17710" -> "17711" 
-  "17711" -> "17712" 
-  "17712" -> "17713" 
-  "17713" -> "17714" 
-  "17714" -> "17715" 
-  "17715" -> "17716" 
-  "17716" -> "17717" 
-  "17717" -> "17718" 
-  "17718" -> "17719" 
-  "17719" -> "17720" 
-  "17720" -> "17721" 
-  "17721" -> "17722" 
-  "17722" -> "17723" 
-  "17723" -> "17724" 
-  "17724" -> "17725" 
-  "17725" -> "17726" 
-  "17726" -> "17727" 
-  "17727" -> "17728" 
-  "17728" -> "17729" 
-  "17729" -> "17730" 
-  "17730" -> "17731" 
-  "17731" -> "17732" 
-  "17732" -> "17733" 
-  "17733" -> "17734" 
-  "17734" -> "17735" 
-  "17735" -> "17736" 
-  "17736" -> "17737" 
-  "17737" -> "17738" 
-  "17738" -> "17739" 
-  "17739" -> "17740" 
-  "17740" -> "17741" 
-  "17741" -> "17753" 
-  "17753" -> "17765" 
-  "17765" -> "17837" 
-  "17837" -> "17838" 
-  "17838" -> "17839" 
-  "17839" -> "17841" 
-  "17841" -> "17845" 
-  "17845" -> "17863" 
-  "17863" -> "17864" 
-  "17864" -> "17865" 
-  "15178" -> "17647" 
+digraph "TearDown" {  
+"15030" [label = <(CleanUpJniEnv,CleanUpJniEnv())<SUB>87</SUB>> ]
+"15031" [label = <(CommonRuntimeTest::TearDown,CommonRuntimeTest::TearDown())<SUB>88</SUB>> ]
+"15032" [label = <(&lt;operator&gt;.fieldAccess,CommonRuntimeTest::TearDown)<SUB>88</SUB>> ]
+"15034" [label = <(FIELD_IDENTIFIER,TearDown,TearDown)<SUB>88</SUB>> ]
+"15028" [label = <(METHOD,TearDown)<SUB>86</SUB>> ]
+"15035" [label = <(METHOD_RETURN,void)<SUB>86</SUB>> ]
+  "15030" -> "15034" 
+  "15031" -> "15035" 
+  "15032" -> "15031" 
+  "15034" -> "15032" 
+  "15028" -> "15030" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/281-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/281-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/281-cfg.dot	2023-06-07 19:35:28.397384334 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/281-cfg.dot	2023-06-07 19:35:34.917383762 +0330
@@ -1,153 +1,37 @@
-digraph "SetUp" {  
-"15184" [label = <(CommonRuntimeTest::SetUp,CommonRuntimeTest::SetUp())<SUB>38</SUB>> ]
-"15188" [label = <(&lt;operator&gt;.assignment,vm_ = Runtime::Current()-&gt;GetJavaVM())<SUB>40</SUB>> ]
-"15197" [label = <(AttachCurrentThread,vm_-&gt;AttachCurrentThread(&amp;env_, nullptr))<SUB>45</SUB>> ]
-"15204" [label = <(&lt;operator&gt;.greaterThan,ScopedLocalRef&lt;jclass&gt; aioobe(env_,\012                                  env_-&gt;FindClass(&quot;java/lang/ArrayIndexOutOfBoundsException&quot;)))<SUB>47</SUB>> ]
-"15215" [label = <(CHECK,CHECK(aioobe.get() != nullptr))<SUB>49</SUB>> ]
-"15222" [label = <(&lt;operator&gt;.assignment,aioobe_ = reinterpret_cast&lt;jclass&gt;(env_-&gt;NewGlobalRef(aioobe.get())))<SUB>50</SUB>> ]
-"15234" [label = <(&lt;operator&gt;.greaterThan,ScopedLocalRef&lt;jclass&gt; ase(env_, env_-&gt;FindClass(&quot;java/lang/ArrayStoreException&quot;)))<SUB>52</SUB>> ]
-"15245" [label = <(CHECK,CHECK(ase.get() != nullptr))<SUB>53</SUB>> ]
-"15252" [label = <(&lt;operator&gt;.assignment,ase_ = reinterpret_cast&lt;jclass&gt;(env_-&gt;NewGlobalRef(ase.get())))<SUB>54</SUB>> ]
-"15264" [label = <(&lt;operator&gt;.greaterThan,ScopedLocalRef&lt;jclass&gt; sioobe(env_,\012                                  env_-&gt;FindClass(&quot;java/lang/StringIndexOutOfBoundsException&quot;)))<SUB>56</SUB>> ]
-"15275" [label = <(CHECK,CHECK(sioobe.get() != nullptr))<SUB>58</SUB>> ]
-"15282" [label = <(&lt;operator&gt;.assignment,sioobe_ = reinterpret_cast&lt;jclass&gt;(env_-&gt;NewGlobalRef(sioobe.get())))<SUB>59</SUB>> ]
-"15185" [label = <(&lt;operator&gt;.fieldAccess,CommonRuntimeTest::SetUp)<SUB>38</SUB>> ]
-"15190" [label = <(GetJavaVM,Runtime::Current()-&gt;GetJavaVM())<SUB>40</SUB>> ]
-"15198" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;AttachCurrentThread)<SUB>45</SUB>> ]
-"15201" [label = <(&lt;operator&gt;.addressOf,&amp;env_)<SUB>45</SUB>> ]
-"15205" [label = <(&lt;operator&gt;.lessThan,ScopedLocalRef&lt;jclass)<SUB>47</SUB>> ]
-"15208" [label = <(aioobe,aioobe(env_,\012                                  env_-&gt;FindClass(&quot;java/lang/ArrayIndexOutOfBoundsException&quot;)))<SUB>47</SUB>> ]
-"15216" [label = <(&lt;operator&gt;.notEquals,aioobe.get() != nullptr)<SUB>49</SUB>> ]
-"15224" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jclass&gt;(env_-&gt;NewGlobalRef(aioobe.get())))<SUB>50</SUB>> ]
-"15235" [label = <(&lt;operator&gt;.lessThan,ScopedLocalRef&lt;jclass)<SUB>52</SUB>> ]
-"15238" [label = <(ase,ase(env_, env_-&gt;FindClass(&quot;java/lang/ArrayStoreException&quot;)))<SUB>52</SUB>> ]
-"15246" [label = <(&lt;operator&gt;.notEquals,ase.get() != nullptr)<SUB>53</SUB>> ]
-"15254" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jclass&gt;(env_-&gt;NewGlobalRef(ase.get())))<SUB>54</SUB>> ]
-"15265" [label = <(&lt;operator&gt;.lessThan,ScopedLocalRef&lt;jclass)<SUB>56</SUB>> ]
-"15268" [label = <(sioobe,sioobe(env_,\012                                  env_-&gt;FindClass(&quot;java/lang/StringIndexOutOfBoundsException&quot;)))<SUB>56</SUB>> ]
-"15276" [label = <(&lt;operator&gt;.notEquals,sioobe.get() != nullptr)<SUB>58</SUB>> ]
-"15284" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jclass&gt;(env_-&gt;NewGlobalRef(sioobe.get())))<SUB>59</SUB>> ]
-"15187" [label = <(FIELD_IDENTIFIER,SetUp,SetUp)<SUB>38</SUB>> ]
-"15191" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetJavaVM)<SUB>40</SUB>> ]
-"15200" [label = <(FIELD_IDENTIFIER,AttachCurrentThread,AttachCurrentThread)<SUB>45</SUB>> ]
-"15210" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/ArrayIndexOutOfBoundsException&quot;))<SUB>48</SUB>> ]
-"15217" [label = <(get,aioobe.get())<SUB>49</SUB>> ]
-"15225" [label = <(UNKNOWN,jclass,jclass)<SUB>50</SUB>> ]
-"15226" [label = <(NewGlobalRef,env_-&gt;NewGlobalRef(aioobe.get()))<SUB>50</SUB>> ]
-"15240" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/ArrayStoreException&quot;))<SUB>52</SUB>> ]
-"15247" [label = <(get,ase.get())<SUB>53</SUB>> ]
-"15255" [label = <(UNKNOWN,jclass,jclass)<SUB>54</SUB>> ]
-"15256" [label = <(NewGlobalRef,env_-&gt;NewGlobalRef(ase.get()))<SUB>54</SUB>> ]
-"15270" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/StringIndexOutOfBoundsException&quot;))<SUB>57</SUB>> ]
-"15277" [label = <(get,sioobe.get())<SUB>58</SUB>> ]
-"15285" [label = <(UNKNOWN,jclass,jclass)<SUB>59</SUB>> ]
-"15286" [label = <(NewGlobalRef,env_-&gt;NewGlobalRef(sioobe.get()))<SUB>59</SUB>> ]
-"15192" [label = <(Runtime::Current,Runtime::Current())<SUB>40</SUB>> ]
-"15196" [label = <(FIELD_IDENTIFIER,GetJavaVM,GetJavaVM)<SUB>40</SUB>> ]
-"15211" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>48</SUB>> ]
-"15218" [label = <(&lt;operator&gt;.fieldAccess,aioobe.get)<SUB>49</SUB>> ]
-"15227" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewGlobalRef)<SUB>50</SUB>> ]
-"15230" [label = <(get,aioobe.get())<SUB>50</SUB>> ]
-"15241" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>52</SUB>> ]
-"15248" [label = <(&lt;operator&gt;.fieldAccess,ase.get)<SUB>53</SUB>> ]
-"15257" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewGlobalRef)<SUB>54</SUB>> ]
-"15260" [label = <(get,ase.get())<SUB>54</SUB>> ]
-"15271" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>57</SUB>> ]
-"15278" [label = <(&lt;operator&gt;.fieldAccess,sioobe.get)<SUB>58</SUB>> ]
-"15287" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewGlobalRef)<SUB>59</SUB>> ]
-"15290" [label = <(get,sioobe.get())<SUB>59</SUB>> ]
-"15193" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>40</SUB>> ]
-"15213" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>48</SUB>> ]
-"15220" [label = <(FIELD_IDENTIFIER,get,get)<SUB>49</SUB>> ]
-"15229" [label = <(FIELD_IDENTIFIER,NewGlobalRef,NewGlobalRef)<SUB>50</SUB>> ]
-"15231" [label = <(&lt;operator&gt;.fieldAccess,aioobe.get)<SUB>50</SUB>> ]
-"15243" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>52</SUB>> ]
-"15250" [label = <(FIELD_IDENTIFIER,get,get)<SUB>53</SUB>> ]
-"15259" [label = <(FIELD_IDENTIFIER,NewGlobalRef,NewGlobalRef)<SUB>54</SUB>> ]
-"15261" [label = <(&lt;operator&gt;.fieldAccess,ase.get)<SUB>54</SUB>> ]
-"15273" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>57</SUB>> ]
-"15280" [label = <(FIELD_IDENTIFIER,get,get)<SUB>58</SUB>> ]
-"15289" [label = <(FIELD_IDENTIFIER,NewGlobalRef,NewGlobalRef)<SUB>59</SUB>> ]
-"15291" [label = <(&lt;operator&gt;.fieldAccess,sioobe.get)<SUB>59</SUB>> ]
-"15195" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>40</SUB>> ]
-"15233" [label = <(FIELD_IDENTIFIER,get,get)<SUB>50</SUB>> ]
-"15263" [label = <(FIELD_IDENTIFIER,get,get)<SUB>54</SUB>> ]
-"15293" [label = <(FIELD_IDENTIFIER,get,get)<SUB>59</SUB>> ]
-"15182" [label = <(METHOD,SetUp)<SUB>37</SUB>> ]
-"15294" [label = <(METHOD_RETURN,void)<SUB>37</SUB>> ]
-  "15184" -> "15195" 
-  "15188" -> "15200" 
-  "15197" -> "15205" 
-  "15204" -> "15220" 
-  "15215" -> "15225" 
-  "15222" -> "15235" 
-  "15234" -> "15250" 
-  "15245" -> "15255" 
-  "15252" -> "15265" 
-  "15264" -> "15280" 
-  "15275" -> "15285" 
-  "15282" -> "15294" 
-  "15185" -> "15184" 
-  "15190" -> "15188" 
-  "15198" -> "15201" 
-  "15201" -> "15197" 
-  "15205" -> "15213" 
-  "15208" -> "15204" 
-  "15216" -> "15215" 
-  "15224" -> "15222" 
-  "15235" -> "15243" 
-  "15238" -> "15234" 
-  "15246" -> "15245" 
-  "15254" -> "15252" 
-  "15265" -> "15273" 
-  "15268" -> "15264" 
-  "15276" -> "15275" 
-  "15284" -> "15282" 
-  "15187" -> "15185" 
-  "15191" -> "15190" 
-  "15200" -> "15198" 
-  "15210" -> "15208" 
-  "15217" -> "15216" 
-  "15225" -> "15229" 
-  "15226" -> "15224" 
-  "15240" -> "15238" 
-  "15247" -> "15246" 
-  "15255" -> "15259" 
-  "15256" -> "15254" 
-  "15270" -> "15268" 
-  "15277" -> "15276" 
-  "15285" -> "15289" 
-  "15286" -> "15284" 
-  "15192" -> "15196" 
-  "15196" -> "15191" 
-  "15211" -> "15210" 
-  "15218" -> "15217" 
-  "15227" -> "15233" 
-  "15230" -> "15226" 
-  "15241" -> "15240" 
-  "15248" -> "15247" 
-  "15257" -> "15263" 
-  "15260" -> "15256" 
-  "15271" -> "15270" 
-  "15278" -> "15277" 
-  "15287" -> "15293" 
-  "15290" -> "15286" 
-  "15193" -> "15192" 
-  "15213" -> "15211" 
-  "15220" -> "15218" 
-  "15229" -> "15227" 
-  "15231" -> "15230" 
-  "15243" -> "15241" 
-  "15250" -> "15248" 
-  "15259" -> "15257" 
-  "15261" -> "15260" 
-  "15273" -> "15271" 
-  "15280" -> "15278" 
-  "15289" -> "15287" 
-  "15291" -> "15290" 
-  "15195" -> "15193" 
-  "15233" -> "15231" 
-  "15263" -> "15261" 
-  "15293" -> "15291" 
-  "15182" -> "15187" 
+digraph "GetPrimitiveClass" {  
+"15041" [label = <(soa,soa(env_))<SUB>92</SUB>> ]
+"15043" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c = class_linker_-&gt;FindPrimitiveClass(descriptor))<SUB>93</SUB>> ]
+"15056" [label = <(CHECK,CHECK(c != nullptr))<SUB>94</SUB>> ]
+"15060" [label = <(RETURN,return soa.AddLocalReference&lt;jclass&gt;(c);,return soa.AddLocalReference&lt;jclass&gt;(c);)<SUB>95</SUB>> ]
+"15044" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c)<SUB>93</SUB>> ]
+"15051" [label = <(FindPrimitiveClass,class_linker_-&gt;FindPrimitiveClass(descriptor))<SUB>93</SUB>> ]
+"15057" [label = <(&lt;operator&gt;.notEquals,c != nullptr)<SUB>94</SUB>> ]
+"15061" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jclass&gt;(c))<SUB>95</SUB>> ]
+"15045" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>93</SUB>> ]
+"15052" [label = <(&lt;operator&gt;.indirectFieldAccess,class_linker_-&gt;FindPrimitiveClass)<SUB>93</SUB>> ]
+"15062" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jclass)<SUB>95</SUB>> ]
+"15047" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>93</SUB>> ]
+"15054" [label = <(FIELD_IDENTIFIER,FindPrimitiveClass,FindPrimitiveClass)<SUB>93</SUB>> ]
+"15063" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>95</SUB>> ]
+"15049" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>93</SUB>> ]
+"15065" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>95</SUB>> ]
+"15037" [label = <(METHOD,GetPrimitiveClass)<SUB>91</SUB>> ]
+"15068" [label = <(METHOD_RETURN,jclass)<SUB>91</SUB>> ]
+  "15041" -> "15049" 
+  "15043" -> "15057" 
+  "15056" -> "15065" 
+  "15060" -> "15068" 
+  "15044" -> "15054" 
+  "15051" -> "15043" 
+  "15057" -> "15056" 
+  "15061" -> "15060" 
+  "15045" -> "15044" 
+  "15052" -> "15051" 
+  "15062" -> "15061" 
+  "15047" -> "15045" 
+  "15054" -> "15052" 
+  "15063" -> "15062" 
+  "15049" -> "15047" 
+  "15065" -> "15063" 
+  "15037" -> "15041" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/282-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/282-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/282-cfg.dot	2023-06-07 19:35:28.397384334 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/282-cfg.dot	2023-06-07 19:35:34.917383762 +0330
@@ -1,61 +1,25 @@
-digraph "ExpectException" {  
-"15300" [label = <(soa,soa(env_))<SUB>63</SUB>> ]
-"15302" [label = <(&lt;operator&gt;.shiftLeft,EXPECT_TRUE(env_-&gt;ExceptionCheck())\012 &lt;&lt; mirror::Class::PrettyDescriptor(soa.Decode&lt;mirror::Class&gt;(exception_class)))<SUB>64</SUB>> ]
-"15324" [label = <(&lt;operator&gt;.assignment,exception = env_-&gt;ExceptionOccurred())<SUB>66</SUB>> ]
-"15330" [label = <(EXPECT_NE,EXPECT_NE(nullptr, exception))<SUB>67</SUB>> ]
-"15333" [label = <(ExceptionClear,env_-&gt;ExceptionClear())<SUB>68</SUB>> ]
-"15337" [label = <(EXPECT_TRUE,EXPECT_TRUE(env_-&gt;IsInstanceOf(exception, exception_class)))<SUB>69</SUB>> ]
-"15303" [label = <(EXPECT_TRUE,EXPECT_TRUE(env_-&gt;ExceptionCheck()))<SUB>64</SUB>> ]
-"15308" [label = <(mirror::Class::PrettyDescriptor,mirror::Class::PrettyDescriptor(soa.Decode&lt;mirror::Class&gt;(exception_class)))<SUB>65</SUB>> ]
-"15326" [label = <(ExceptionOccurred,env_-&gt;ExceptionOccurred())<SUB>66</SUB>> ]
-"15334" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ExceptionClear)<SUB>68</SUB>> ]
-"15338" [label = <(IsInstanceOf,env_-&gt;IsInstanceOf(exception, exception_class))<SUB>69</SUB>> ]
-"15304" [label = <(ExceptionCheck,env_-&gt;ExceptionCheck())<SUB>64</SUB>> ]
-"15309" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class::PrettyDescriptor)<SUB>65</SUB>> ]
-"15314" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(exception_class))<SUB>65</SUB>> ]
-"15327" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ExceptionOccurred)<SUB>66</SUB>> ]
-"15336" [label = <(FIELD_IDENTIFIER,ExceptionClear,ExceptionClear)<SUB>68</SUB>> ]
-"15339" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;IsInstanceOf)<SUB>69</SUB>> ]
-"15305" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ExceptionCheck)<SUB>64</SUB>> ]
-"15310" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>65</SUB>> ]
-"15313" [label = <(FIELD_IDENTIFIER,PrettyDescriptor,PrettyDescriptor)<SUB>65</SUB>> ]
-"15315" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>65</SUB>> ]
-"15329" [label = <(FIELD_IDENTIFIER,ExceptionOccurred,ExceptionOccurred)<SUB>66</SUB>> ]
-"15341" [label = <(FIELD_IDENTIFIER,IsInstanceOf,IsInstanceOf)<SUB>69</SUB>> ]
-"15307" [label = <(FIELD_IDENTIFIER,ExceptionCheck,ExceptionCheck)<SUB>64</SUB>> ]
-"15316" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>65</SUB>> ]
-"15319" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>65</SUB>> ]
-"15318" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>65</SUB>> ]
-"15321" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>65</SUB>> ]
-"15296" [label = <(METHOD,ExpectException)<SUB>62</SUB>> ]
-"15344" [label = <(METHOD_RETURN,void)<SUB>62</SUB>> ]
-  "15300" -> "15307" 
-  "15302" -> "15329" 
-  "15324" -> "15330" 
-  "15330" -> "15336" 
-  "15333" -> "15341" 
-  "15337" -> "15344" 
-  "15303" -> "15310" 
-  "15308" -> "15302" 
-  "15326" -> "15324" 
-  "15334" -> "15333" 
-  "15338" -> "15337" 
-  "15304" -> "15303" 
-  "15309" -> "15318" 
-  "15314" -> "15308" 
-  "15327" -> "15326" 
-  "15336" -> "15334" 
-  "15339" -> "15338" 
-  "15305" -> "15304" 
-  "15310" -> "15313" 
-  "15313" -> "15309" 
-  "15315" -> "15314" 
-  "15329" -> "15327" 
-  "15341" -> "15339" 
-  "15307" -> "15305" 
-  "15316" -> "15321" 
-  "15319" -> "15315" 
-  "15318" -> "15316" 
-  "15321" -> "15319" 
-  "15296" -> "15300" 
+digraph "ExpectClassFound" {  
+"15073" [label = <(&lt;operator&gt;.shiftLeft,EXPECT_NE(env_-&gt;FindClass(name), nullptr) &lt;&lt; name)<SUB>99</SUB>> ]
+"15082" [label = <(&lt;operator&gt;.shiftLeft,EXPECT_FALSE(env_-&gt;ExceptionCheck()) &lt;&lt; name)<SUB>100</SUB>> ]
+"15074" [label = <(EXPECT_NE,EXPECT_NE(env_-&gt;FindClass(name), nullptr))<SUB>99</SUB>> ]
+"15083" [label = <(EXPECT_FALSE,EXPECT_FALSE(env_-&gt;ExceptionCheck()))<SUB>100</SUB>> ]
+"15075" [label = <(FindClass,env_-&gt;FindClass(name))<SUB>99</SUB>> ]
+"15084" [label = <(ExceptionCheck,env_-&gt;ExceptionCheck())<SUB>100</SUB>> ]
+"15076" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>99</SUB>> ]
+"15085" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ExceptionCheck)<SUB>100</SUB>> ]
+"15078" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>99</SUB>> ]
+"15087" [label = <(FIELD_IDENTIFIER,ExceptionCheck,ExceptionCheck)<SUB>100</SUB>> ]
+"15070" [label = <(METHOD,ExpectClassFound)<SUB>98</SUB>> ]
+"15089" [label = <(METHOD_RETURN,void)<SUB>98</SUB>> ]
+  "15073" -> "15087" 
+  "15082" -> "15089" 
+  "15074" -> "15073" 
+  "15083" -> "15082" 
+  "15075" -> "15074" 
+  "15084" -> "15083" 
+  "15076" -> "15075" 
+  "15085" -> "15084" 
+  "15078" -> "15076" 
+  "15087" -> "15085" 
+  "15070" -> "15078" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/283-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/283-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/283-cfg.dot	2023-06-07 19:35:28.397384334 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/283-cfg.dot	2023-06-07 19:35:34.917383762 +0330
@@ -1,38 +1,45 @@
-digraph "CleanUpJniEnv" {  
-"15349" [label = <(&lt;operator&gt;.notEquals,aioobe_ != nullptr)<SUB>73</SUB>> ]
-"15362" [label = <(&lt;operator&gt;.notEquals,ase_ != nullptr)<SUB>77</SUB>> ]
-"15375" [label = <(&lt;operator&gt;.notEquals,sioobe_ != nullptr)<SUB>81</SUB>> ]
-"15353" [label = <(DeleteGlobalRef,env_-&gt;DeleteGlobalRef(aioobe_))<SUB>74</SUB>> ]
-"15358" [label = <(&lt;operator&gt;.assignment,aioobe_ = nullptr)<SUB>75</SUB>> ]
-"15366" [label = <(DeleteGlobalRef,env_-&gt;DeleteGlobalRef(ase_))<SUB>78</SUB>> ]
-"15371" [label = <(&lt;operator&gt;.assignment,ase_ = nullptr)<SUB>79</SUB>> ]
-"15379" [label = <(DeleteGlobalRef,env_-&gt;DeleteGlobalRef(sioobe_))<SUB>82</SUB>> ]
-"15384" [label = <(&lt;operator&gt;.assignment,sioobe_ = nullptr)<SUB>83</SUB>> ]
-"15354" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;DeleteGlobalRef)<SUB>74</SUB>> ]
-"15367" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;DeleteGlobalRef)<SUB>78</SUB>> ]
-"15380" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;DeleteGlobalRef)<SUB>82</SUB>> ]
-"15356" [label = <(FIELD_IDENTIFIER,DeleteGlobalRef,DeleteGlobalRef)<SUB>74</SUB>> ]
-"15369" [label = <(FIELD_IDENTIFIER,DeleteGlobalRef,DeleteGlobalRef)<SUB>78</SUB>> ]
-"15382" [label = <(FIELD_IDENTIFIER,DeleteGlobalRef,DeleteGlobalRef)<SUB>82</SUB>> ]
-"15346" [label = <(METHOD,CleanUpJniEnv)<SUB>72</SUB>> ]
-"15387" [label = <(METHOD_RETURN,void)<SUB>72</SUB>> ]
-  "15349" -> "15356" 
-  "15349" -> "15362" 
-  "15362" -> "15369" 
-  "15362" -> "15375" 
-  "15375" -> "15387" 
-  "15375" -> "15382" 
-  "15353" -> "15358" 
-  "15358" -> "15362" 
-  "15366" -> "15371" 
-  "15371" -> "15375" 
-  "15379" -> "15384" 
-  "15384" -> "15387" 
-  "15354" -> "15353" 
-  "15367" -> "15366" 
-  "15380" -> "15379" 
-  "15356" -> "15354" 
-  "15369" -> "15367" 
-  "15382" -> "15380" 
-  "15346" -> "15349" 
+digraph "ExpectClassNotFound" {  
+"15097" [label = <(&lt;operator&gt;.shiftLeft,EXPECT_EQ(env_-&gt;FindClass(name), nullptr) &lt;&lt; name)<SUB>105</SUB>> ]
+"15098" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;FindClass(name), nullptr))<SUB>105</SUB>> ]
+"15107" [label = <(&lt;operator&gt;.logicalOr,!check_jni || check_jni_msg == nullptr)<SUB>106</SUB>> ]
+"15099" [label = <(FindClass,env_-&gt;FindClass(name))<SUB>105</SUB>> ]
+"15108" [label = <(&lt;operator&gt;.logicalNot,!check_jni)<SUB>106</SUB>> ]
+"15110" [label = <(&lt;operator&gt;.equals,check_jni_msg == nullptr)<SUB>106</SUB>> ]
+"15114" [label = <(&lt;operator&gt;.shiftLeft,EXPECT_TRUE(env_-&gt;ExceptionCheck()) &lt;&lt; name)<SUB>107</SUB>> ]
+"15121" [label = <(ExceptionClear,env_-&gt;ExceptionClear())<SUB>108</SUB>> ]
+"15100" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>105</SUB>> ]
+"15115" [label = <(EXPECT_TRUE,EXPECT_TRUE(env_-&gt;ExceptionCheck()))<SUB>107</SUB>> ]
+"15122" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ExceptionClear)<SUB>108</SUB>> ]
+"15127" [label = <(Check,abort_catcher-&gt;Check(check_jni_msg))<SUB>110</SUB>> ]
+"15102" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>105</SUB>> ]
+"15116" [label = <(ExceptionCheck,env_-&gt;ExceptionCheck())<SUB>107</SUB>> ]
+"15124" [label = <(FIELD_IDENTIFIER,ExceptionClear,ExceptionClear)<SUB>108</SUB>> ]
+"15128" [label = <(&lt;operator&gt;.indirectFieldAccess,abort_catcher-&gt;Check)<SUB>110</SUB>> ]
+"15117" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ExceptionCheck)<SUB>107</SUB>> ]
+"15130" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>110</SUB>> ]
+"15119" [label = <(FIELD_IDENTIFIER,ExceptionCheck,ExceptionCheck)<SUB>107</SUB>> ]
+"15091" [label = <(METHOD,ExpectClassNotFound)<SUB>103</SUB>> ]
+"15132" [label = <(METHOD_RETURN,void)<SUB>103</SUB>> ]
+  "15097" -> "15108" 
+  "15098" -> "15097" 
+  "15107" -> "15119" 
+  "15107" -> "15130" 
+  "15099" -> "15098" 
+  "15108" -> "15107" 
+  "15108" -> "15110" 
+  "15110" -> "15107" 
+  "15114" -> "15124" 
+  "15121" -> "15132" 
+  "15100" -> "15099" 
+  "15115" -> "15114" 
+  "15122" -> "15121" 
+  "15127" -> "15132" 
+  "15102" -> "15100" 
+  "15116" -> "15115" 
+  "15124" -> "15122" 
+  "15128" -> "15127" 
+  "15117" -> "15116" 
+  "15130" -> "15128" 
+  "15119" -> "15117" 
+  "15091" -> "15102" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/284-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/284-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/284-cfg.dot	2023-06-07 19:35:28.397384334 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/284-cfg.dot	2023-06-07 19:35:34.917383762 +0330
@@ -1,13 +1,126 @@
-digraph "TearDown" {  
-"15391" [label = <(CleanUpJniEnv,CleanUpJniEnv())<SUB>88</SUB>> ]
-"15392" [label = <(CommonRuntimeTest::TearDown,CommonRuntimeTest::TearDown())<SUB>89</SUB>> ]
-"15393" [label = <(&lt;operator&gt;.fieldAccess,CommonRuntimeTest::TearDown)<SUB>89</SUB>> ]
-"15395" [label = <(FIELD_IDENTIFIER,TearDown,TearDown)<SUB>89</SUB>> ]
-"15389" [label = <(METHOD,TearDown)<SUB>87</SUB>> ]
-"15396" [label = <(METHOD_RETURN,void)<SUB>87</SUB>> ]
-  "15391" -> "15395" 
-  "15392" -> "15396" 
-  "15393" -> "15392" 
-  "15395" -> "15393" 
-  "15389" -> "15391" 
+digraph "FindClassTest" {  
+"15138" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>115</SUB>> ]
+"15146" [label = <(FindClass,env_-&gt;FindClass(nullptr))<SUB>119</SUB>> ]
+"15151" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;))<SUB>120</SUB>> ]
+"15159" [label = <(ExpectClassFound,ExpectClassFound(&quot;java/lang/String&quot;))<SUB>124</SUB>> ]
+"15161" [label = <(ExpectClassFound,ExpectClassFound(&quot;[Ljava/lang/String;&quot;))<SUB>126</SUB>> ]
+"15163" [label = <(ExpectClassFound,ExpectClassFound(&quot;[C&quot;))<SUB>128</SUB>> ]
+"15165" [label = <(ExpectClassNotFound,ExpectClassNotFound(&quot;C&quot;, check_jni, nullptr, &amp;check_jni_abort_catcher))<SUB>131</SUB>> ]
+"15171" [label = <(ExpectClassNotFound,ExpectClassNotFound(&quot;V&quot;, check_jni, nullptr, &amp;check_jni_abort_catcher))<SUB>132</SUB>> ]
+"15177" [label = <(ExpectClassNotFound,ExpectClassNotFound(&quot;K&quot;, check_jni, nullptr, &amp;check_jni_abort_catcher))<SUB>133</SUB>> ]
+"15226" [label = <(ExpectClassNotFound,ExpectClassNotFound(&quot;Ljava.lang.String;&quot;, check_jni, &quot;illegal class name 'Ljava.lang.String;'&quot;,\012 &amp;check_jni_abort_catcher))<SUB>150</SUB>> ]
+"15232" [label = <(ExpectClassNotFound,ExpectClassNotFound(&quot;[java.lang.String&quot;, check_jni, &quot;illegal class name '[java.lang.String'&quot;,\012 &amp;check_jni_abort_catcher))<SUB>152</SUB>> ]
+"15238" [label = <(ExpectClassNotFound,ExpectClassNotFound(&quot;Ljava/lang/String;&quot;, check_jni, &quot;illegal class name 'Ljava/lang/String;'&quot;,\012 &amp;check_jni_abort_catcher))<SUB>156</SUB>> ]
+"15244" [label = <(ExpectClassNotFound,ExpectClassNotFound(&quot;[java/lang/String&quot;, check_jni, &quot;illegal class name '[java/lang/String'&quot;,\012 &amp;check_jni_abort_catcher))<SUB>160</SUB>> ]
+"15250" [label = <(ExpectClassNotFound,ExpectClassNotFound(&quot;[K&quot;, check_jni, &quot;illegal class name '[K'&quot;, &amp;check_jni_abort_catcher))<SUB>163</SUB>> ]
+"15256" [label = <(ExpectClassNotFound,ExpectClassNotFound(&quot;[V&quot;, check_jni, &quot;illegal class name '[V'&quot;, &amp;check_jni_abort_catcher))<SUB>166</SUB>> ]
+"15262" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>168</SUB>> ]
+"15140" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>115</SUB>> ]
+"15147" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>119</SUB>> ]
+"15152" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>120</SUB>> ]
+"15155" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;)<SUB>120</SUB>> ]
+"15169" [label = <(&lt;operator&gt;.addressOf,&amp;check_jni_abort_catcher)<SUB>131</SUB>> ]
+"15175" [label = <(&lt;operator&gt;.addressOf,&amp;check_jni_abort_catcher)<SUB>132</SUB>> ]
+"15181" [label = <(&lt;operator&gt;.addressOf,&amp;check_jni_abort_catcher)<SUB>133</SUB>> ]
+"15230" [label = <(&lt;operator&gt;.addressOf,&amp;check_jni_abort_catcher)<SUB>151</SUB>> ]
+"15236" [label = <(&lt;operator&gt;.addressOf,&amp;check_jni_abort_catcher)<SUB>153</SUB>> ]
+"15242" [label = <(&lt;operator&gt;.addressOf,&amp;check_jni_abort_catcher)<SUB>157</SUB>> ]
+"15248" [label = <(&lt;operator&gt;.addressOf,&amp;check_jni_abort_catcher)<SUB>161</SUB>> ]
+"15254" [label = <(&lt;operator&gt;.addressOf,&amp;check_jni_abort_catcher)<SUB>163</SUB>> ]
+"15260" [label = <(&lt;operator&gt;.addressOf,&amp;check_jni_abort_catcher)<SUB>166</SUB>> ]
+"15264" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>168</SUB>> ]
+"15141" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>115</SUB>> ]
+"15149" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>119</SUB>> ]
+"15154" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>120</SUB>> ]
+"15186" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;FindClass(&quot;java.lang.String&quot;), nullptr))<SUB>137</SUB>> ]
+"15193" [label = <(EXPECT_FALSE,EXPECT_FALSE(env_-&gt;ExceptionCheck()))<SUB>138</SUB>> ]
+"15198" [label = <(Check,check_jni_abort_catcher.Check(&quot;illegal class name 'java.lang.String'&quot;))<SUB>139</SUB>> ]
+"15203" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;FindClass(&quot;[Ljava.lang.String;&quot;), nullptr))<SUB>141</SUB>> ]
+"15210" [label = <(EXPECT_FALSE,EXPECT_FALSE(env_-&gt;ExceptionCheck()))<SUB>142</SUB>> ]
+"15215" [label = <(Check,check_jni_abort_catcher.Check(&quot;illegal class name '[Ljava.lang.String;'&quot;))<SUB>143</SUB>> ]
+"15265" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>168</SUB>> ]
+"15143" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>115</SUB>> ]
+"15187" [label = <(FindClass,env_-&gt;FindClass(&quot;java.lang.String&quot;))<SUB>137</SUB>> ]
+"15194" [label = <(ExceptionCheck,env_-&gt;ExceptionCheck())<SUB>138</SUB>> ]
+"15199" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>139</SUB>> ]
+"15204" [label = <(FindClass,env_-&gt;FindClass(&quot;[Ljava.lang.String;&quot;))<SUB>141</SUB>> ]
+"15211" [label = <(ExceptionCheck,env_-&gt;ExceptionCheck())<SUB>142</SUB>> ]
+"15216" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>143</SUB>> ]
+"15222" [label = <(ExpectClassFound,ExpectClassFound(&quot;java.lang.String&quot;))<SUB>146</SUB>> ]
+"15224" [label = <(ExpectClassFound,ExpectClassFound(&quot;[Ljava.lang.String;&quot;))<SUB>147</SUB>> ]
+"15267" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>168</SUB>> ]
+"15188" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>137</SUB>> ]
+"15195" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ExceptionCheck)<SUB>138</SUB>> ]
+"15201" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>139</SUB>> ]
+"15205" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>141</SUB>> ]
+"15212" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ExceptionCheck)<SUB>142</SUB>> ]
+"15218" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>143</SUB>> ]
+"15190" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>137</SUB>> ]
+"15197" [label = <(FIELD_IDENTIFIER,ExceptionCheck,ExceptionCheck)<SUB>138</SUB>> ]
+"15207" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>141</SUB>> ]
+"15214" [label = <(FIELD_IDENTIFIER,ExceptionCheck,ExceptionCheck)<SUB>142</SUB>> ]
+"15134" [label = <(METHOD,FindClassTest)<SUB>114</SUB>> ]
+"15269" [label = <(METHOD_RETURN,void)<SUB>114</SUB>> ]
+  "15138" -> "15149" 
+  "15146" -> "15154" 
+  "15151" -> "15159" 
+  "15159" -> "15161" 
+  "15161" -> "15163" 
+  "15163" -> "15169" 
+  "15165" -> "15175" 
+  "15171" -> "15181" 
+  "15177" -> "15190" 
+  "15177" -> "15222" 
+  "15226" -> "15236" 
+  "15232" -> "15242" 
+  "15238" -> "15248" 
+  "15244" -> "15254" 
+  "15250" -> "15260" 
+  "15256" -> "15267" 
+  "15262" -> "15269" 
+  "15140" -> "15138" 
+  "15147" -> "15146" 
+  "15152" -> "15155" 
+  "15155" -> "15151" 
+  "15169" -> "15165" 
+  "15175" -> "15171" 
+  "15181" -> "15177" 
+  "15230" -> "15226" 
+  "15236" -> "15232" 
+  "15242" -> "15238" 
+  "15248" -> "15244" 
+  "15254" -> "15250" 
+  "15260" -> "15256" 
+  "15264" -> "15262" 
+  "15141" -> "15140" 
+  "15149" -> "15147" 
+  "15154" -> "15152" 
+  "15186" -> "15197" 
+  "15193" -> "15201" 
+  "15198" -> "15207" 
+  "15203" -> "15214" 
+  "15210" -> "15218" 
+  "15215" -> "15230" 
+  "15265" -> "15264" 
+  "15143" -> "15141" 
+  "15187" -> "15186" 
+  "15194" -> "15193" 
+  "15199" -> "15198" 
+  "15204" -> "15203" 
+  "15211" -> "15210" 
+  "15216" -> "15215" 
+  "15222" -> "15224" 
+  "15224" -> "15230" 
+  "15267" -> "15265" 
+  "15188" -> "15187" 
+  "15195" -> "15194" 
+  "15201" -> "15199" 
+  "15205" -> "15204" 
+  "15212" -> "15211" 
+  "15218" -> "15216" 
+  "15190" -> "15188" 
+  "15197" -> "15195" 
+  "15207" -> "15205" 
+  "15214" -> "15212" 
+  "15134" -> "15143" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/285-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/285-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/285-cfg.dot	2023-06-07 19:35:28.397384334 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/285-cfg.dot	2023-06-07 19:35:34.917383762 +0330
@@ -1,37 +1,85 @@
-digraph "GetPrimitiveClass" {  
-"15402" [label = <(soa,soa(env_))<SUB>93</SUB>> ]
-"15404" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c = class_linker_-&gt;FindPrimitiveClass(descriptor))<SUB>94</SUB>> ]
-"15417" [label = <(CHECK,CHECK(c != nullptr))<SUB>95</SUB>> ]
-"15421" [label = <(RETURN,return soa.AddLocalReference&lt;jclass&gt;(c);,return soa.AddLocalReference&lt;jclass&gt;(c);)<SUB>96</SUB>> ]
-"15405" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c)<SUB>94</SUB>> ]
-"15412" [label = <(FindPrimitiveClass,class_linker_-&gt;FindPrimitiveClass(descriptor))<SUB>94</SUB>> ]
-"15418" [label = <(&lt;operator&gt;.notEquals,c != nullptr)<SUB>95</SUB>> ]
-"15422" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jclass&gt;(c))<SUB>96</SUB>> ]
-"15406" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>94</SUB>> ]
-"15413" [label = <(&lt;operator&gt;.indirectFieldAccess,class_linker_-&gt;FindPrimitiveClass)<SUB>94</SUB>> ]
-"15423" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jclass)<SUB>96</SUB>> ]
-"15408" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>94</SUB>> ]
-"15415" [label = <(FIELD_IDENTIFIER,FindPrimitiveClass,FindPrimitiveClass)<SUB>94</SUB>> ]
-"15424" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>96</SUB>> ]
-"15410" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>94</SUB>> ]
-"15426" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>96</SUB>> ]
-"15398" [label = <(METHOD,GetPrimitiveClass)<SUB>92</SUB>> ]
-"15429" [label = <(METHOD_RETURN,jclass)<SUB>92</SUB>> ]
-  "15402" -> "15410" 
-  "15404" -> "15418" 
-  "15417" -> "15426" 
-  "15421" -> "15429" 
-  "15405" -> "15415" 
-  "15412" -> "15404" 
-  "15418" -> "15417" 
-  "15422" -> "15421" 
-  "15406" -> "15405" 
-  "15413" -> "15412" 
-  "15423" -> "15422" 
-  "15408" -> "15406" 
-  "15415" -> "15413" 
-  "15424" -> "15423" 
-  "15410" -> "15408" 
-  "15426" -> "15424" 
-  "15398" -> "15402" 
+digraph "GetFieldIdBadArgumentTest" {  
+"15275" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>172</SUB>> ]
+"15284" [label = <(&lt;operator&gt;.assignment,c = env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>175</SUB>> ]
+"15291" [label = <(ASSERT_NE,ASSERT_NE(c, nullptr))<SUB>176</SUB>> ]
+"15295" [label = <(&lt;operator&gt;.assignment,fid = env_-&gt;GetFieldID(nullptr, &quot;count&quot;, &quot;I&quot;))<SUB>178</SUB>> ]
+"15304" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, fid))<SUB>179</SUB>> ]
+"15307" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;GetFieldID received NULL jclass&quot;\012 : &quot;java_class == null&quot;))<SUB>180</SUB>> ]
+"15315" [label = <(&lt;operator&gt;.assignment,fid = env_-&gt;GetFieldID(c, nullptr, &quot;I&quot;))<SUB>182</SUB>> ]
+"15324" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, fid))<SUB>183</SUB>> ]
+"15327" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;))<SUB>184</SUB>> ]
+"15335" [label = <(&lt;operator&gt;.assignment,fid = env_-&gt;GetFieldID(c, &quot;count&quot;, nullptr))<SUB>186</SUB>> ]
+"15344" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, fid))<SUB>187</SUB>> ]
+"15347" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;sig == null&quot;))<SUB>188</SUB>> ]
+"15355" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>191</SUB>> ]
+"15277" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>172</SUB>> ]
+"15286" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>175</SUB>> ]
+"15297" [label = <(GetFieldID,env_-&gt;GetFieldID(nullptr, &quot;count&quot;, &quot;I&quot;))<SUB>178</SUB>> ]
+"15308" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>180</SUB>> ]
+"15311" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;GetFieldID received NULL jclass&quot;\012 : &quot;java_class == null&quot;)<SUB>180</SUB>> ]
+"15317" [label = <(GetFieldID,env_-&gt;GetFieldID(c, nullptr, &quot;I&quot;))<SUB>182</SUB>> ]
+"15328" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>184</SUB>> ]
+"15331" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;)<SUB>184</SUB>> ]
+"15337" [label = <(GetFieldID,env_-&gt;GetFieldID(c, &quot;count&quot;, nullptr))<SUB>186</SUB>> ]
+"15348" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>188</SUB>> ]
+"15351" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;sig == null&quot;)<SUB>188</SUB>> ]
+"15357" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>191</SUB>> ]
+"15278" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>172</SUB>> ]
+"15287" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>175</SUB>> ]
+"15298" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetFieldID)<SUB>178</SUB>> ]
+"15310" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>180</SUB>> ]
+"15318" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetFieldID)<SUB>182</SUB>> ]
+"15330" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>184</SUB>> ]
+"15338" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetFieldID)<SUB>186</SUB>> ]
+"15350" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>188</SUB>> ]
+"15358" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>191</SUB>> ]
+"15280" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>172</SUB>> ]
+"15289" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>175</SUB>> ]
+"15300" [label = <(FIELD_IDENTIFIER,GetFieldID,GetFieldID)<SUB>178</SUB>> ]
+"15320" [label = <(FIELD_IDENTIFIER,GetFieldID,GetFieldID)<SUB>182</SUB>> ]
+"15340" [label = <(FIELD_IDENTIFIER,GetFieldID,GetFieldID)<SUB>186</SUB>> ]
+"15360" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>191</SUB>> ]
+"15271" [label = <(METHOD,GetFieldIdBadArgumentTest)<SUB>171</SUB>> ]
+"15362" [label = <(METHOD_RETURN,void)<SUB>171</SUB>> ]
+  "15275" -> "15289" 
+  "15284" -> "15291" 
+  "15291" -> "15300" 
+  "15295" -> "15304" 
+  "15304" -> "15310" 
+  "15307" -> "15320" 
+  "15315" -> "15324" 
+  "15324" -> "15330" 
+  "15327" -> "15340" 
+  "15335" -> "15344" 
+  "15344" -> "15350" 
+  "15347" -> "15360" 
+  "15355" -> "15362" 
+  "15277" -> "15275" 
+  "15286" -> "15284" 
+  "15297" -> "15295" 
+  "15308" -> "15311" 
+  "15311" -> "15307" 
+  "15317" -> "15315" 
+  "15328" -> "15331" 
+  "15331" -> "15327" 
+  "15337" -> "15335" 
+  "15348" -> "15351" 
+  "15351" -> "15347" 
+  "15357" -> "15355" 
+  "15278" -> "15277" 
+  "15287" -> "15286" 
+  "15298" -> "15297" 
+  "15310" -> "15308" 
+  "15318" -> "15317" 
+  "15330" -> "15328" 
+  "15338" -> "15337" 
+  "15350" -> "15348" 
+  "15358" -> "15357" 
+  "15280" -> "15278" 
+  "15289" -> "15287" 
+  "15300" -> "15298" 
+  "15320" -> "15318" 
+  "15340" -> "15338" 
+  "15360" -> "15358" 
+  "15271" -> "15280" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/286-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/286-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/286-cfg.dot	2023-06-07 19:35:28.397384334 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/286-cfg.dot	2023-06-07 19:35:34.917383762 +0330
@@ -1,25 +1,85 @@
-digraph "ExpectClassFound" {  
-"15434" [label = <(&lt;operator&gt;.shiftLeft,EXPECT_NE(env_-&gt;FindClass(name), nullptr) &lt;&lt; name)<SUB>100</SUB>> ]
-"15443" [label = <(&lt;operator&gt;.shiftLeft,EXPECT_FALSE(env_-&gt;ExceptionCheck()) &lt;&lt; name)<SUB>101</SUB>> ]
-"15435" [label = <(EXPECT_NE,EXPECT_NE(env_-&gt;FindClass(name), nullptr))<SUB>100</SUB>> ]
-"15444" [label = <(EXPECT_FALSE,EXPECT_FALSE(env_-&gt;ExceptionCheck()))<SUB>101</SUB>> ]
-"15436" [label = <(FindClass,env_-&gt;FindClass(name))<SUB>100</SUB>> ]
-"15445" [label = <(ExceptionCheck,env_-&gt;ExceptionCheck())<SUB>101</SUB>> ]
-"15437" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>100</SUB>> ]
-"15446" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ExceptionCheck)<SUB>101</SUB>> ]
-"15439" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>100</SUB>> ]
-"15448" [label = <(FIELD_IDENTIFIER,ExceptionCheck,ExceptionCheck)<SUB>101</SUB>> ]
-"15431" [label = <(METHOD,ExpectClassFound)<SUB>99</SUB>> ]
-"15450" [label = <(METHOD_RETURN,void)<SUB>99</SUB>> ]
-  "15434" -> "15448" 
-  "15443" -> "15450" 
-  "15435" -> "15434" 
-  "15444" -> "15443" 
-  "15436" -> "15435" 
-  "15445" -> "15444" 
-  "15437" -> "15436" 
-  "15446" -> "15445" 
-  "15439" -> "15437" 
-  "15448" -> "15446" 
-  "15431" -> "15439" 
+digraph "GetStaticFieldIdBadArgumentTest" {  
+"15368" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>195</SUB>> ]
+"15377" [label = <(&lt;operator&gt;.assignment,c = env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>198</SUB>> ]
+"15384" [label = <(ASSERT_NE,ASSERT_NE(c, nullptr))<SUB>199</SUB>> ]
+"15388" [label = <(&lt;operator&gt;.assignment,fid = env_-&gt;GetStaticFieldID(nullptr, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;Ljava/util/Comparator;&quot;))<SUB>201</SUB>> ]
+"15397" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, fid))<SUB>202</SUB>> ]
+"15400" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;GetStaticFieldID received NULL jclass&quot;\012 : &quot;java_class == null&quot;))<SUB>203</SUB>> ]
+"15408" [label = <(&lt;operator&gt;.assignment,fid = env_-&gt;GetStaticFieldID(c, nullptr, &quot;Ljava/util/Comparator;&quot;))<SUB>205</SUB>> ]
+"15417" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, fid))<SUB>206</SUB>> ]
+"15420" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;))<SUB>207</SUB>> ]
+"15428" [label = <(&lt;operator&gt;.assignment,fid = env_-&gt;GetStaticFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, nullptr))<SUB>209</SUB>> ]
+"15437" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, fid))<SUB>210</SUB>> ]
+"15440" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;sig == null&quot;))<SUB>211</SUB>> ]
+"15448" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>214</SUB>> ]
+"15370" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>195</SUB>> ]
+"15379" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>198</SUB>> ]
+"15390" [label = <(GetStaticFieldID,env_-&gt;GetStaticFieldID(nullptr, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;Ljava/util/Comparator;&quot;))<SUB>201</SUB>> ]
+"15401" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>203</SUB>> ]
+"15404" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;GetStaticFieldID received NULL jclass&quot;\012 : &quot;java_class == null&quot;)<SUB>203</SUB>> ]
+"15410" [label = <(GetStaticFieldID,env_-&gt;GetStaticFieldID(c, nullptr, &quot;Ljava/util/Comparator;&quot;))<SUB>205</SUB>> ]
+"15421" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>207</SUB>> ]
+"15424" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;)<SUB>207</SUB>> ]
+"15430" [label = <(GetStaticFieldID,env_-&gt;GetStaticFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, nullptr))<SUB>209</SUB>> ]
+"15441" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>211</SUB>> ]
+"15444" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;sig == null&quot;)<SUB>211</SUB>> ]
+"15450" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>214</SUB>> ]
+"15371" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>195</SUB>> ]
+"15380" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>198</SUB>> ]
+"15391" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetStaticFieldID)<SUB>201</SUB>> ]
+"15403" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>203</SUB>> ]
+"15411" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetStaticFieldID)<SUB>205</SUB>> ]
+"15423" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>207</SUB>> ]
+"15431" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetStaticFieldID)<SUB>209</SUB>> ]
+"15443" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>211</SUB>> ]
+"15451" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>214</SUB>> ]
+"15373" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>195</SUB>> ]
+"15382" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>198</SUB>> ]
+"15393" [label = <(FIELD_IDENTIFIER,GetStaticFieldID,GetStaticFieldID)<SUB>201</SUB>> ]
+"15413" [label = <(FIELD_IDENTIFIER,GetStaticFieldID,GetStaticFieldID)<SUB>205</SUB>> ]
+"15433" [label = <(FIELD_IDENTIFIER,GetStaticFieldID,GetStaticFieldID)<SUB>209</SUB>> ]
+"15453" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>214</SUB>> ]
+"15364" [label = <(METHOD,GetStaticFieldIdBadArgumentTest)<SUB>194</SUB>> ]
+"15455" [label = <(METHOD_RETURN,void)<SUB>194</SUB>> ]
+  "15368" -> "15382" 
+  "15377" -> "15384" 
+  "15384" -> "15393" 
+  "15388" -> "15397" 
+  "15397" -> "15403" 
+  "15400" -> "15413" 
+  "15408" -> "15417" 
+  "15417" -> "15423" 
+  "15420" -> "15433" 
+  "15428" -> "15437" 
+  "15437" -> "15443" 
+  "15440" -> "15453" 
+  "15448" -> "15455" 
+  "15370" -> "15368" 
+  "15379" -> "15377" 
+  "15390" -> "15388" 
+  "15401" -> "15404" 
+  "15404" -> "15400" 
+  "15410" -> "15408" 
+  "15421" -> "15424" 
+  "15424" -> "15420" 
+  "15430" -> "15428" 
+  "15441" -> "15444" 
+  "15444" -> "15440" 
+  "15450" -> "15448" 
+  "15371" -> "15370" 
+  "15380" -> "15379" 
+  "15391" -> "15390" 
+  "15403" -> "15401" 
+  "15411" -> "15410" 
+  "15423" -> "15421" 
+  "15431" -> "15430" 
+  "15443" -> "15441" 
+  "15451" -> "15450" 
+  "15373" -> "15371" 
+  "15382" -> "15380" 
+  "15393" -> "15391" 
+  "15413" -> "15411" 
+  "15433" -> "15431" 
+  "15453" -> "15451" 
+  "15364" -> "15373" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/287-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/287-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/287-cfg.dot	2023-06-07 19:35:28.407384333 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/287-cfg.dot	2023-06-07 19:35:34.917383762 +0330
@@ -1,45 +1,87 @@
-digraph "ExpectClassNotFound" {  
-"15458" [label = <(&lt;operator&gt;.shiftLeft,EXPECT_EQ(env_-&gt;FindClass(name), nullptr) &lt;&lt; name)<SUB>106</SUB>> ]
-"15459" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;FindClass(name), nullptr))<SUB>106</SUB>> ]
-"15468" [label = <(&lt;operator&gt;.logicalOr,!check_jni || check_jni_msg == nullptr)<SUB>107</SUB>> ]
-"15460" [label = <(FindClass,env_-&gt;FindClass(name))<SUB>106</SUB>> ]
-"15469" [label = <(&lt;operator&gt;.logicalNot,!check_jni)<SUB>107</SUB>> ]
-"15471" [label = <(&lt;operator&gt;.equals,check_jni_msg == nullptr)<SUB>107</SUB>> ]
-"15475" [label = <(&lt;operator&gt;.shiftLeft,EXPECT_TRUE(env_-&gt;ExceptionCheck()) &lt;&lt; name)<SUB>108</SUB>> ]
-"15482" [label = <(ExceptionClear,env_-&gt;ExceptionClear())<SUB>109</SUB>> ]
-"15461" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>106</SUB>> ]
-"15476" [label = <(EXPECT_TRUE,EXPECT_TRUE(env_-&gt;ExceptionCheck()))<SUB>108</SUB>> ]
-"15483" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ExceptionClear)<SUB>109</SUB>> ]
-"15488" [label = <(Check,abort_catcher-&gt;Check(check_jni_msg))<SUB>111</SUB>> ]
-"15463" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>106</SUB>> ]
-"15477" [label = <(ExceptionCheck,env_-&gt;ExceptionCheck())<SUB>108</SUB>> ]
-"15485" [label = <(FIELD_IDENTIFIER,ExceptionClear,ExceptionClear)<SUB>109</SUB>> ]
-"15489" [label = <(&lt;operator&gt;.indirectFieldAccess,abort_catcher-&gt;Check)<SUB>111</SUB>> ]
-"15478" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ExceptionCheck)<SUB>108</SUB>> ]
-"15491" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>111</SUB>> ]
-"15480" [label = <(FIELD_IDENTIFIER,ExceptionCheck,ExceptionCheck)<SUB>108</SUB>> ]
-"15452" [label = <(METHOD,ExpectClassNotFound)<SUB>104</SUB>> ]
-"15493" [label = <(METHOD_RETURN,void)<SUB>104</SUB>> ]
-  "15458" -> "15469" 
-  "15459" -> "15458" 
-  "15468" -> "15480" 
-  "15468" -> "15491" 
-  "15460" -> "15459" 
-  "15469" -> "15468" 
-  "15469" -> "15471" 
-  "15471" -> "15468" 
-  "15475" -> "15485" 
-  "15482" -> "15493" 
-  "15461" -> "15460" 
-  "15476" -> "15475" 
-  "15483" -> "15482" 
-  "15488" -> "15493" 
+digraph "GetMethodIdBadArgumentTest" {  
+"15461" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>218</SUB>> ]
+"15470" [label = <(&lt;operator&gt;.assignment,method = env_-&gt;GetMethodID(nullptr, &quot;&lt;init&gt;&quot;, &quot;(Ljava/lang/String;)V&quot;))<SUB>221</SUB>> ]
+"15479" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, method))<SUB>222</SUB>> ]
+"15482" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;GetMethodID received NULL jclass&quot;\012 : &quot;java_class == null&quot;))<SUB>223</SUB>> ]
+"15491" [label = <(&lt;operator&gt;.assignment,jlnsme = env_-&gt;FindClass(&quot;java/lang/NoSuchMethodError&quot;))<SUB>225</SUB>> ]
+"15498" [label = <(ASSERT_TRUE,ASSERT_TRUE(jlnsme != nullptr))<SUB>226</SUB>> ]
+"15502" [label = <(&lt;operator&gt;.assignment,method = env_-&gt;GetMethodID(jlnsme, nullptr, &quot;(Ljava/lang/String;)V&quot;))<SUB>227</SUB>> ]
+"15511" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, method))<SUB>228</SUB>> ]
+"15514" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;))<SUB>229</SUB>> ]
+"15522" [label = <(&lt;operator&gt;.assignment,method = env_-&gt;GetMethodID(jlnsme, &quot;&lt;init&gt;&quot;, nullptr))<SUB>231</SUB>> ]
+"15531" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, method))<SUB>232</SUB>> ]
+"15534" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;sig == null&quot;))<SUB>233</SUB>> ]
+"15542" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>236</SUB>> ]
+"15463" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>218</SUB>> ]
+"15472" [label = <(GetMethodID,env_-&gt;GetMethodID(nullptr, &quot;&lt;init&gt;&quot;, &quot;(Ljava/lang/String;)V&quot;))<SUB>221</SUB>> ]
+"15483" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>223</SUB>> ]
+"15486" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;GetMethodID received NULL jclass&quot;\012 : &quot;java_class == null&quot;)<SUB>223</SUB>> ]
+"15493" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/NoSuchMethodError&quot;))<SUB>225</SUB>> ]
+"15499" [label = <(&lt;operator&gt;.notEquals,jlnsme != nullptr)<SUB>226</SUB>> ]
+"15504" [label = <(GetMethodID,env_-&gt;GetMethodID(jlnsme, nullptr, &quot;(Ljava/lang/String;)V&quot;))<SUB>227</SUB>> ]
+"15515" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>229</SUB>> ]
+"15518" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;)<SUB>229</SUB>> ]
+"15524" [label = <(GetMethodID,env_-&gt;GetMethodID(jlnsme, &quot;&lt;init&gt;&quot;, nullptr))<SUB>231</SUB>> ]
+"15535" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>233</SUB>> ]
+"15538" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;sig == null&quot;)<SUB>233</SUB>> ]
+"15544" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>236</SUB>> ]
+"15464" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>218</SUB>> ]
+"15473" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetMethodID)<SUB>221</SUB>> ]
+"15485" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>223</SUB>> ]
+"15494" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>225</SUB>> ]
+"15505" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetMethodID)<SUB>227</SUB>> ]
+"15517" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>229</SUB>> ]
+"15525" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetMethodID)<SUB>231</SUB>> ]
+"15537" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>233</SUB>> ]
+"15545" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>236</SUB>> ]
+"15466" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>218</SUB>> ]
+"15475" [label = <(FIELD_IDENTIFIER,GetMethodID,GetMethodID)<SUB>221</SUB>> ]
+"15496" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>225</SUB>> ]
+"15507" [label = <(FIELD_IDENTIFIER,GetMethodID,GetMethodID)<SUB>227</SUB>> ]
+"15527" [label = <(FIELD_IDENTIFIER,GetMethodID,GetMethodID)<SUB>231</SUB>> ]
+"15547" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>236</SUB>> ]
+"15457" [label = <(METHOD,GetMethodIdBadArgumentTest)<SUB>217</SUB>> ]
+"15549" [label = <(METHOD_RETURN,void)<SUB>217</SUB>> ]
+  "15461" -> "15475" 
+  "15470" -> "15479" 
+  "15479" -> "15485" 
+  "15482" -> "15496" 
+  "15491" -> "15499" 
+  "15498" -> "15507" 
+  "15502" -> "15511" 
+  "15511" -> "15517" 
+  "15514" -> "15527" 
+  "15522" -> "15531" 
+  "15531" -> "15537" 
+  "15534" -> "15547" 
+  "15542" -> "15549" 
   "15463" -> "15461" 
-  "15477" -> "15476" 
+  "15472" -> "15470" 
+  "15483" -> "15486" 
+  "15486" -> "15482" 
+  "15493" -> "15491" 
+  "15499" -> "15498" 
+  "15504" -> "15502" 
+  "15515" -> "15518" 
+  "15518" -> "15514" 
+  "15524" -> "15522" 
+  "15535" -> "15538" 
+  "15538" -> "15534" 
+  "15544" -> "15542" 
+  "15464" -> "15463" 
+  "15473" -> "15472" 
   "15485" -> "15483" 
-  "15489" -> "15488" 
-  "15478" -> "15477" 
-  "15491" -> "15489" 
-  "15480" -> "15478" 
-  "15452" -> "15463" 
+  "15494" -> "15493" 
+  "15505" -> "15504" 
+  "15517" -> "15515" 
+  "15525" -> "15524" 
+  "15537" -> "15535" 
+  "15545" -> "15544" 
+  "15466" -> "15464" 
+  "15475" -> "15473" 
+  "15496" -> "15494" 
+  "15507" -> "15505" 
+  "15527" -> "15525" 
+  "15547" -> "15545" 
+  "15457" -> "15466" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/288-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/288-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/288-cfg.dot	2023-06-07 19:35:28.407384333 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/288-cfg.dot	2023-06-07 19:35:34.917383762 +0330
@@ -1,126 +1,83 @@
-digraph "FindClassTest" {  
-"15499" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>116</SUB>> ]
-"15507" [label = <(FindClass,env_-&gt;FindClass(nullptr))<SUB>120</SUB>> ]
-"15512" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;))<SUB>121</SUB>> ]
-"15520" [label = <(ExpectClassFound,ExpectClassFound(&quot;java/lang/String&quot;))<SUB>125</SUB>> ]
-"15522" [label = <(ExpectClassFound,ExpectClassFound(&quot;[Ljava/lang/String;&quot;))<SUB>127</SUB>> ]
-"15524" [label = <(ExpectClassFound,ExpectClassFound(&quot;[C&quot;))<SUB>129</SUB>> ]
-"15526" [label = <(ExpectClassNotFound,ExpectClassNotFound(&quot;C&quot;, check_jni, nullptr, &amp;check_jni_abort_catcher))<SUB>132</SUB>> ]
-"15532" [label = <(ExpectClassNotFound,ExpectClassNotFound(&quot;V&quot;, check_jni, nullptr, &amp;check_jni_abort_catcher))<SUB>133</SUB>> ]
-"15538" [label = <(ExpectClassNotFound,ExpectClassNotFound(&quot;K&quot;, check_jni, nullptr, &amp;check_jni_abort_catcher))<SUB>134</SUB>> ]
-"15587" [label = <(ExpectClassNotFound,ExpectClassNotFound(&quot;Ljava.lang.String;&quot;, check_jni, &quot;illegal class name 'Ljava.lang.String;'&quot;,\012 &amp;check_jni_abort_catcher))<SUB>151</SUB>> ]
-"15593" [label = <(ExpectClassNotFound,ExpectClassNotFound(&quot;[java.lang.String&quot;, check_jni, &quot;illegal class name '[java.lang.String'&quot;,\012 &amp;check_jni_abort_catcher))<SUB>153</SUB>> ]
-"15599" [label = <(ExpectClassNotFound,ExpectClassNotFound(&quot;Ljava/lang/String;&quot;, check_jni, &quot;illegal class name 'Ljava/lang/String;'&quot;,\012 &amp;check_jni_abort_catcher))<SUB>157</SUB>> ]
-"15605" [label = <(ExpectClassNotFound,ExpectClassNotFound(&quot;[java/lang/String&quot;, check_jni, &quot;illegal class name '[java/lang/String'&quot;,\012 &amp;check_jni_abort_catcher))<SUB>161</SUB>> ]
-"15611" [label = <(ExpectClassNotFound,ExpectClassNotFound(&quot;[K&quot;, check_jni, &quot;illegal class name '[K'&quot;, &amp;check_jni_abort_catcher))<SUB>164</SUB>> ]
-"15617" [label = <(ExpectClassNotFound,ExpectClassNotFound(&quot;[V&quot;, check_jni, &quot;illegal class name '[V'&quot;, &amp;check_jni_abort_catcher))<SUB>167</SUB>> ]
-"15623" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>169</SUB>> ]
-"15501" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>116</SUB>> ]
-"15508" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>120</SUB>> ]
-"15513" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>121</SUB>> ]
-"15516" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;)<SUB>121</SUB>> ]
-"15530" [label = <(&lt;operator&gt;.addressOf,&amp;check_jni_abort_catcher)<SUB>132</SUB>> ]
-"15536" [label = <(&lt;operator&gt;.addressOf,&amp;check_jni_abort_catcher)<SUB>133</SUB>> ]
-"15542" [label = <(&lt;operator&gt;.addressOf,&amp;check_jni_abort_catcher)<SUB>134</SUB>> ]
-"15591" [label = <(&lt;operator&gt;.addressOf,&amp;check_jni_abort_catcher)<SUB>152</SUB>> ]
-"15597" [label = <(&lt;operator&gt;.addressOf,&amp;check_jni_abort_catcher)<SUB>154</SUB>> ]
-"15603" [label = <(&lt;operator&gt;.addressOf,&amp;check_jni_abort_catcher)<SUB>158</SUB>> ]
-"15609" [label = <(&lt;operator&gt;.addressOf,&amp;check_jni_abort_catcher)<SUB>162</SUB>> ]
-"15615" [label = <(&lt;operator&gt;.addressOf,&amp;check_jni_abort_catcher)<SUB>164</SUB>> ]
-"15621" [label = <(&lt;operator&gt;.addressOf,&amp;check_jni_abort_catcher)<SUB>167</SUB>> ]
-"15625" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>169</SUB>> ]
-"15502" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>116</SUB>> ]
-"15510" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>120</SUB>> ]
-"15515" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>121</SUB>> ]
-"15547" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;FindClass(&quot;java.lang.String&quot;), nullptr))<SUB>138</SUB>> ]
-"15554" [label = <(EXPECT_FALSE,EXPECT_FALSE(env_-&gt;ExceptionCheck()))<SUB>139</SUB>> ]
-"15559" [label = <(Check,check_jni_abort_catcher.Check(&quot;illegal class name 'java.lang.String'&quot;))<SUB>140</SUB>> ]
-"15564" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;FindClass(&quot;[Ljava.lang.String;&quot;), nullptr))<SUB>142</SUB>> ]
-"15571" [label = <(EXPECT_FALSE,EXPECT_FALSE(env_-&gt;ExceptionCheck()))<SUB>143</SUB>> ]
-"15576" [label = <(Check,check_jni_abort_catcher.Check(&quot;illegal class name '[Ljava.lang.String;'&quot;))<SUB>144</SUB>> ]
-"15626" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>169</SUB>> ]
-"15504" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>116</SUB>> ]
-"15548" [label = <(FindClass,env_-&gt;FindClass(&quot;java.lang.String&quot;))<SUB>138</SUB>> ]
-"15555" [label = <(ExceptionCheck,env_-&gt;ExceptionCheck())<SUB>139</SUB>> ]
-"15560" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>140</SUB>> ]
-"15565" [label = <(FindClass,env_-&gt;FindClass(&quot;[Ljava.lang.String;&quot;))<SUB>142</SUB>> ]
-"15572" [label = <(ExceptionCheck,env_-&gt;ExceptionCheck())<SUB>143</SUB>> ]
-"15577" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>144</SUB>> ]
-"15583" [label = <(ExpectClassFound,ExpectClassFound(&quot;java.lang.String&quot;))<SUB>147</SUB>> ]
-"15585" [label = <(ExpectClassFound,ExpectClassFound(&quot;[Ljava.lang.String;&quot;))<SUB>148</SUB>> ]
-"15628" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>169</SUB>> ]
-"15549" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>138</SUB>> ]
-"15556" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ExceptionCheck)<SUB>139</SUB>> ]
-"15562" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>140</SUB>> ]
-"15566" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>142</SUB>> ]
-"15573" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ExceptionCheck)<SUB>143</SUB>> ]
-"15579" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>144</SUB>> ]
-"15551" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>138</SUB>> ]
-"15558" [label = <(FIELD_IDENTIFIER,ExceptionCheck,ExceptionCheck)<SUB>139</SUB>> ]
-"15568" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>142</SUB>> ]
-"15575" [label = <(FIELD_IDENTIFIER,ExceptionCheck,ExceptionCheck)<SUB>143</SUB>> ]
-"15495" [label = <(METHOD,FindClassTest)<SUB>115</SUB>> ]
-"15630" [label = <(METHOD_RETURN,void)<SUB>115</SUB>> ]
-  "15499" -> "15510" 
-  "15507" -> "15515" 
-  "15512" -> "15520" 
-  "15520" -> "15522" 
-  "15522" -> "15524" 
-  "15524" -> "15530" 
-  "15526" -> "15536" 
-  "15532" -> "15542" 
-  "15538" -> "15551" 
-  "15538" -> "15583" 
-  "15587" -> "15597" 
-  "15593" -> "15603" 
-  "15599" -> "15609" 
-  "15605" -> "15615" 
-  "15611" -> "15621" 
-  "15617" -> "15628" 
-  "15623" -> "15630" 
-  "15501" -> "15499" 
-  "15508" -> "15507" 
-  "15513" -> "15516" 
-  "15516" -> "15512" 
-  "15530" -> "15526" 
-  "15536" -> "15532" 
-  "15542" -> "15538" 
-  "15591" -> "15587" 
-  "15597" -> "15593" 
-  "15603" -> "15599" 
-  "15609" -> "15605" 
-  "15615" -> "15611" 
-  "15621" -> "15617" 
-  "15625" -> "15623" 
-  "15502" -> "15501" 
-  "15510" -> "15508" 
-  "15515" -> "15513" 
-  "15547" -> "15558" 
-  "15554" -> "15562" 
-  "15559" -> "15568" 
-  "15564" -> "15575" 
-  "15571" -> "15579" 
-  "15576" -> "15591" 
-  "15626" -> "15625" 
-  "15504" -> "15502" 
-  "15548" -> "15547" 
-  "15555" -> "15554" 
-  "15560" -> "15559" 
-  "15565" -> "15564" 
-  "15572" -> "15571" 
-  "15577" -> "15576" 
-  "15583" -> "15585" 
-  "15585" -> "15591" 
-  "15628" -> "15626" 
-  "15549" -> "15548" 
-  "15556" -> "15555" 
-  "15562" -> "15560" 
-  "15566" -> "15565" 
-  "15573" -> "15572" 
+digraph "GetStaticMethodIdBadArgumentTest" {  
+"15555" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>240</SUB>> ]
+"15564" [label = <(&lt;operator&gt;.assignment,method = env_-&gt;GetStaticMethodID(nullptr, &quot;valueOf&quot;, &quot;(I)Ljava/lang/String;&quot;))<SUB>243</SUB>> ]
+"15573" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, method))<SUB>244</SUB>> ]
+"15576" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;GetStaticMethodID received NULL jclass&quot;\012 : &quot;java_class == null&quot;))<SUB>245</SUB>> ]
+"15585" [label = <(&lt;operator&gt;.assignment,jlstring = env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>247</SUB>> ]
+"15592" [label = <(&lt;operator&gt;.assignment,method = env_-&gt;GetStaticMethodID(jlstring, nullptr, &quot;(I)Ljava/lang/String;&quot;))<SUB>248</SUB>> ]
+"15601" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, method))<SUB>249</SUB>> ]
+"15604" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;))<SUB>250</SUB>> ]
+"15612" [label = <(&lt;operator&gt;.assignment,method = env_-&gt;GetStaticMethodID(jlstring, &quot;valueOf&quot;, nullptr))<SUB>252</SUB>> ]
+"15621" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, method))<SUB>253</SUB>> ]
+"15624" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;sig == null&quot;))<SUB>254</SUB>> ]
+"15632" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>257</SUB>> ]
+"15557" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>240</SUB>> ]
+"15566" [label = <(GetStaticMethodID,env_-&gt;GetStaticMethodID(nullptr, &quot;valueOf&quot;, &quot;(I)Ljava/lang/String;&quot;))<SUB>243</SUB>> ]
+"15577" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>245</SUB>> ]
+"15580" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;GetStaticMethodID received NULL jclass&quot;\012 : &quot;java_class == null&quot;)<SUB>245</SUB>> ]
+"15587" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>247</SUB>> ]
+"15594" [label = <(GetStaticMethodID,env_-&gt;GetStaticMethodID(jlstring, nullptr, &quot;(I)Ljava/lang/String;&quot;))<SUB>248</SUB>> ]
+"15605" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>250</SUB>> ]
+"15608" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;)<SUB>250</SUB>> ]
+"15614" [label = <(GetStaticMethodID,env_-&gt;GetStaticMethodID(jlstring, &quot;valueOf&quot;, nullptr))<SUB>252</SUB>> ]
+"15625" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>254</SUB>> ]
+"15628" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;sig == null&quot;)<SUB>254</SUB>> ]
+"15634" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>257</SUB>> ]
+"15558" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>240</SUB>> ]
+"15567" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetStaticMethodID)<SUB>243</SUB>> ]
+"15579" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>245</SUB>> ]
+"15588" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>247</SUB>> ]
+"15595" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetStaticMethodID)<SUB>248</SUB>> ]
+"15607" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>250</SUB>> ]
+"15615" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetStaticMethodID)<SUB>252</SUB>> ]
+"15627" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>254</SUB>> ]
+"15635" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>257</SUB>> ]
+"15560" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>240</SUB>> ]
+"15569" [label = <(FIELD_IDENTIFIER,GetStaticMethodID,GetStaticMethodID)<SUB>243</SUB>> ]
+"15590" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>247</SUB>> ]
+"15597" [label = <(FIELD_IDENTIFIER,GetStaticMethodID,GetStaticMethodID)<SUB>248</SUB>> ]
+"15617" [label = <(FIELD_IDENTIFIER,GetStaticMethodID,GetStaticMethodID)<SUB>252</SUB>> ]
+"15637" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>257</SUB>> ]
+"15551" [label = <(METHOD,GetStaticMethodIdBadArgumentTest)<SUB>239</SUB>> ]
+"15639" [label = <(METHOD_RETURN,void)<SUB>239</SUB>> ]
+  "15555" -> "15569" 
+  "15564" -> "15573" 
+  "15573" -> "15579" 
+  "15576" -> "15590" 
+  "15585" -> "15597" 
+  "15592" -> "15601" 
+  "15601" -> "15607" 
+  "15604" -> "15617" 
+  "15612" -> "15621" 
+  "15621" -> "15627" 
+  "15624" -> "15637" 
+  "15632" -> "15639" 
+  "15557" -> "15555" 
+  "15566" -> "15564" 
+  "15577" -> "15580" 
+  "15580" -> "15576" 
+  "15587" -> "15585" 
+  "15594" -> "15592" 
+  "15605" -> "15608" 
+  "15608" -> "15604" 
+  "15614" -> "15612" 
+  "15625" -> "15628" 
+  "15628" -> "15624" 
+  "15634" -> "15632" 
+  "15558" -> "15557" 
+  "15567" -> "15566" 
   "15579" -> "15577" 
-  "15551" -> "15549" 
-  "15558" -> "15556" 
-  "15568" -> "15566" 
-  "15575" -> "15573" 
-  "15495" -> "15504" 
+  "15588" -> "15587" 
+  "15595" -> "15594" 
+  "15607" -> "15605" 
+  "15615" -> "15614" 
+  "15627" -> "15625" 
+  "15635" -> "15634" 
+  "15560" -> "15558" 
+  "15569" -> "15567" 
+  "15590" -> "15588" 
+  "15597" -> "15595" 
+  "15617" -> "15615" 
+  "15637" -> "15635" 
+  "15551" -> "15560" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/289-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/289-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/289-cfg.dot	2023-06-07 19:35:28.407384333 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/289-cfg.dot	2023-06-07 19:35:34.917383762 +0330
@@ -1,85 +1,96 @@
-digraph "GetFieldIdBadArgumentTest" {  
-"15636" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>173</SUB>> ]
-"15645" [label = <(&lt;operator&gt;.assignment,c = env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>176</SUB>> ]
-"15652" [label = <(ASSERT_NE,ASSERT_NE(c, nullptr))<SUB>177</SUB>> ]
-"15656" [label = <(&lt;operator&gt;.assignment,fid = env_-&gt;GetFieldID(nullptr, &quot;count&quot;, &quot;I&quot;))<SUB>179</SUB>> ]
-"15665" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, fid))<SUB>180</SUB>> ]
-"15668" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;GetFieldID received NULL jclass&quot;\012 : &quot;java_class == null&quot;))<SUB>181</SUB>> ]
-"15676" [label = <(&lt;operator&gt;.assignment,fid = env_-&gt;GetFieldID(c, nullptr, &quot;I&quot;))<SUB>183</SUB>> ]
-"15685" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, fid))<SUB>184</SUB>> ]
-"15688" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;))<SUB>185</SUB>> ]
-"15696" [label = <(&lt;operator&gt;.assignment,fid = env_-&gt;GetFieldID(c, &quot;count&quot;, nullptr))<SUB>187</SUB>> ]
-"15705" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, fid))<SUB>188</SUB>> ]
-"15708" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;sig == null&quot;))<SUB>189</SUB>> ]
-"15716" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>192</SUB>> ]
-"15638" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>173</SUB>> ]
-"15647" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>176</SUB>> ]
-"15658" [label = <(GetFieldID,env_-&gt;GetFieldID(nullptr, &quot;count&quot;, &quot;I&quot;))<SUB>179</SUB>> ]
-"15669" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>181</SUB>> ]
-"15672" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;GetFieldID received NULL jclass&quot;\012 : &quot;java_class == null&quot;)<SUB>181</SUB>> ]
-"15678" [label = <(GetFieldID,env_-&gt;GetFieldID(c, nullptr, &quot;I&quot;))<SUB>183</SUB>> ]
-"15689" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>185</SUB>> ]
-"15692" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;)<SUB>185</SUB>> ]
-"15698" [label = <(GetFieldID,env_-&gt;GetFieldID(c, &quot;count&quot;, nullptr))<SUB>187</SUB>> ]
-"15709" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>189</SUB>> ]
-"15712" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;sig == null&quot;)<SUB>189</SUB>> ]
-"15718" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>192</SUB>> ]
-"15639" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>173</SUB>> ]
-"15648" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>176</SUB>> ]
-"15659" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetFieldID)<SUB>179</SUB>> ]
-"15671" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>181</SUB>> ]
-"15679" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetFieldID)<SUB>183</SUB>> ]
-"15691" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>185</SUB>> ]
-"15699" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetFieldID)<SUB>187</SUB>> ]
-"15711" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>189</SUB>> ]
-"15719" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>192</SUB>> ]
-"15641" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>173</SUB>> ]
-"15650" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>176</SUB>> ]
-"15661" [label = <(FIELD_IDENTIFIER,GetFieldID,GetFieldID)<SUB>179</SUB>> ]
-"15681" [label = <(FIELD_IDENTIFIER,GetFieldID,GetFieldID)<SUB>183</SUB>> ]
-"15701" [label = <(FIELD_IDENTIFIER,GetFieldID,GetFieldID)<SUB>187</SUB>> ]
-"15721" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>192</SUB>> ]
-"15632" [label = <(METHOD,GetFieldIdBadArgumentTest)<SUB>172</SUB>> ]
-"15723" [label = <(METHOD_RETURN,void)<SUB>172</SUB>> ]
-  "15636" -> "15650" 
-  "15645" -> "15652" 
-  "15652" -> "15661" 
-  "15656" -> "15665" 
-  "15665" -> "15671" 
-  "15668" -> "15681" 
-  "15676" -> "15685" 
-  "15685" -> "15691" 
-  "15688" -> "15701" 
-  "15696" -> "15705" 
-  "15705" -> "15711" 
-  "15708" -> "15721" 
-  "15716" -> "15723" 
-  "15638" -> "15636" 
+digraph "GetFromReflectedField_ToReflectedFieldBadArgumentTest" {  
+"15645" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>261</SUB>> ]
+"15654" [label = <(&lt;operator&gt;.assignment,c = env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>264</SUB>> ]
+"15661" [label = <(ASSERT_NE,ASSERT_NE(c, nullptr))<SUB>265</SUB>> ]
+"15665" [label = <(&lt;operator&gt;.assignment,fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;))<SUB>266</SUB>> ]
+"15674" [label = <(ASSERT_NE,ASSERT_NE(fid, nullptr))<SUB>267</SUB>> ]
+"15678" [label = <(&lt;operator&gt;.assignment,field = env_-&gt;ToReflectedField(nullptr, fid, JNI_FALSE))<SUB>270</SUB>> ]
+"15703" [label = <(&lt;operator&gt;.assignment,field = env_-&gt;ToReflectedField(c, nullptr, JNI_FALSE))<SUB>278</SUB>> ]
+"15712" [label = <(EXPECT_EQ,EXPECT_EQ(field, nullptr))<SUB>279</SUB>> ]
+"15715" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;jfieldID was NULL&quot;\012 : &quot;fid == null&quot;))<SUB>280</SUB>> ]
+"15723" [label = <(&lt;operator&gt;.assignment,fid = env_-&gt;FromReflectedField(nullptr))<SUB>283</SUB>> ]
+"15730" [label = <(ASSERT_EQ,ASSERT_EQ(fid, nullptr))<SUB>284</SUB>> ]
+"15733" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;expected non-null java.lang.reflect.Field&quot;\012 : &quot;jlr_field == null&quot;))<SUB>285</SUB>> ]
+"15741" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>288</SUB>> ]
+"15647" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>261</SUB>> ]
+"15656" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>264</SUB>> ]
+"15667" [label = <(GetFieldID,env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;))<SUB>266</SUB>> ]
+"15680" [label = <(ToReflectedField,env_-&gt;ToReflectedField(nullptr, fid, JNI_FALSE))<SUB>270</SUB>> ]
+"15705" [label = <(ToReflectedField,env_-&gt;ToReflectedField(c, nullptr, JNI_FALSE))<SUB>278</SUB>> ]
+"15716" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>280</SUB>> ]
+"15719" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;jfieldID was NULL&quot;\012 : &quot;fid == null&quot;)<SUB>280</SUB>> ]
+"15725" [label = <(FromReflectedField,env_-&gt;FromReflectedField(nullptr))<SUB>283</SUB>> ]
+"15734" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>285</SUB>> ]
+"15737" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;expected non-null java.lang.reflect.Field&quot;\012 : &quot;jlr_field == null&quot;)<SUB>285</SUB>> ]
+"15743" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>288</SUB>> ]
+"15648" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>261</SUB>> ]
+"15657" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>264</SUB>> ]
+"15668" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetFieldID)<SUB>266</SUB>> ]
+"15681" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ToReflectedField)<SUB>270</SUB>> ]
+"15690" [label = <(EXPECT_EQ,EXPECT_EQ(field, nullptr))<SUB>272</SUB>> ]
+"15693" [label = <(Check,check_jni_abort_catcher.Check(&quot;ToReflectedField received NULL jclass&quot;))<SUB>273</SUB>> ]
+"15706" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ToReflectedField)<SUB>278</SUB>> ]
+"15718" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>280</SUB>> ]
+"15726" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FromReflectedField)<SUB>283</SUB>> ]
+"15736" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>285</SUB>> ]
+"15744" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>288</SUB>> ]
+"15650" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>261</SUB>> ]
+"15659" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>264</SUB>> ]
+"15670" [label = <(FIELD_IDENTIFIER,GetFieldID,GetFieldID)<SUB>266</SUB>> ]
+"15683" [label = <(FIELD_IDENTIFIER,ToReflectedField,ToReflectedField)<SUB>270</SUB>> ]
+"15694" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>273</SUB>> ]
+"15700" [label = <(EXPECT_NE,EXPECT_NE(field, nullptr))<SUB>275</SUB>> ]
+"15708" [label = <(FIELD_IDENTIFIER,ToReflectedField,ToReflectedField)<SUB>278</SUB>> ]
+"15728" [label = <(FIELD_IDENTIFIER,FromReflectedField,FromReflectedField)<SUB>283</SUB>> ]
+"15746" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>288</SUB>> ]
+"15696" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>273</SUB>> ]
+"15641" [label = <(METHOD,GetFromReflectedField_ToReflectedFieldBadArgumentTest)<SUB>260</SUB>> ]
+"15748" [label = <(METHOD_RETURN,void)<SUB>260</SUB>> ]
+  "15645" -> "15659" 
+  "15654" -> "15661" 
+  "15661" -> "15670" 
+  "15665" -> "15674" 
+  "15674" -> "15683" 
+  "15678" -> "15690" 
+  "15678" -> "15700" 
+  "15703" -> "15712" 
+  "15712" -> "15718" 
+  "15715" -> "15728" 
+  "15723" -> "15730" 
+  "15730" -> "15736" 
+  "15733" -> "15746" 
+  "15741" -> "15748" 
   "15647" -> "15645" 
-  "15658" -> "15656" 
-  "15669" -> "15672" 
-  "15672" -> "15668" 
-  "15678" -> "15676" 
-  "15689" -> "15692" 
-  "15692" -> "15688" 
-  "15698" -> "15696" 
-  "15709" -> "15712" 
-  "15712" -> "15708" 
-  "15718" -> "15716" 
-  "15639" -> "15638" 
+  "15656" -> "15654" 
+  "15667" -> "15665" 
+  "15680" -> "15678" 
+  "15705" -> "15703" 
+  "15716" -> "15719" 
+  "15719" -> "15715" 
+  "15725" -> "15723" 
+  "15734" -> "15737" 
+  "15737" -> "15733" 
+  "15743" -> "15741" 
   "15648" -> "15647" 
-  "15659" -> "15658" 
-  "15671" -> "15669" 
-  "15679" -> "15678" 
-  "15691" -> "15689" 
-  "15699" -> "15698" 
-  "15711" -> "15709" 
-  "15719" -> "15718" 
-  "15641" -> "15639" 
+  "15657" -> "15656" 
+  "15668" -> "15667" 
+  "15681" -> "15680" 
+  "15690" -> "15696" 
+  "15693" -> "15708" 
+  "15706" -> "15705" 
+  "15718" -> "15716" 
+  "15726" -> "15725" 
+  "15736" -> "15734" 
+  "15744" -> "15743" 
   "15650" -> "15648" 
-  "15661" -> "15659" 
-  "15681" -> "15679" 
-  "15701" -> "15699" 
-  "15721" -> "15719" 
-  "15632" -> "15641" 
+  "15659" -> "15657" 
+  "15670" -> "15668" 
+  "15683" -> "15681" 
+  "15694" -> "15693" 
+  "15700" -> "15708" 
+  "15708" -> "15706" 
+  "15728" -> "15726" 
+  "15746" -> "15744" 
+  "15696" -> "15694" 
+  "15641" -> "15650" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/29-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/29-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/29-cfg.dot	2023-06-07 19:35:28.217384348 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/29-cfg.dot	2023-06-07 19:35:34.747383777 +0330
@@ -1,5 +1,5 @@
-digraph "hs" {  
-"725" [label = <(METHOD,hs)<SUB>500</SUB>> ]
-"728" [label = <(METHOD_RETURN,StackHandleScope&lt;1&gt;)<SUB>500</SUB>> ]
-  "725" -> "728" 
+digraph "ThrowAIOOBE" {  
+"671" [label = <(METHOD,ThrowAIOOBE)<SUB>539</SUB>> ]
+"678" [label = <(METHOD_RETURN,void)<SUB>539</SUB>> ]
+  "671" -> "678" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/290-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/290-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/290-cfg.dot	2023-06-07 19:35:28.407384333 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/290-cfg.dot	2023-06-07 19:35:34.917383762 +0330
@@ -1,85 +1,96 @@
-digraph "GetStaticFieldIdBadArgumentTest" {  
-"15729" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>196</SUB>> ]
-"15738" [label = <(&lt;operator&gt;.assignment,c = env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>199</SUB>> ]
-"15745" [label = <(ASSERT_NE,ASSERT_NE(c, nullptr))<SUB>200</SUB>> ]
-"15749" [label = <(&lt;operator&gt;.assignment,fid = env_-&gt;GetStaticFieldID(nullptr, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;Ljava/util/Comparator;&quot;))<SUB>202</SUB>> ]
-"15758" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, fid))<SUB>203</SUB>> ]
-"15761" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;GetStaticFieldID received NULL jclass&quot;\012 : &quot;java_class == null&quot;))<SUB>204</SUB>> ]
-"15769" [label = <(&lt;operator&gt;.assignment,fid = env_-&gt;GetStaticFieldID(c, nullptr, &quot;Ljava/util/Comparator;&quot;))<SUB>206</SUB>> ]
-"15778" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, fid))<SUB>207</SUB>> ]
-"15781" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;))<SUB>208</SUB>> ]
-"15789" [label = <(&lt;operator&gt;.assignment,fid = env_-&gt;GetStaticFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, nullptr))<SUB>210</SUB>> ]
-"15798" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, fid))<SUB>211</SUB>> ]
-"15801" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;sig == null&quot;))<SUB>212</SUB>> ]
-"15809" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>215</SUB>> ]
-"15731" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>196</SUB>> ]
-"15740" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>199</SUB>> ]
-"15751" [label = <(GetStaticFieldID,env_-&gt;GetStaticFieldID(nullptr, &quot;CASE_INSENSITIVE_ORDER&quot;, &quot;Ljava/util/Comparator;&quot;))<SUB>202</SUB>> ]
-"15762" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>204</SUB>> ]
-"15765" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;GetStaticFieldID received NULL jclass&quot;\012 : &quot;java_class == null&quot;)<SUB>204</SUB>> ]
-"15771" [label = <(GetStaticFieldID,env_-&gt;GetStaticFieldID(c, nullptr, &quot;Ljava/util/Comparator;&quot;))<SUB>206</SUB>> ]
-"15782" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>208</SUB>> ]
-"15785" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;)<SUB>208</SUB>> ]
-"15791" [label = <(GetStaticFieldID,env_-&gt;GetStaticFieldID(c, &quot;CASE_INSENSITIVE_ORDER&quot;, nullptr))<SUB>210</SUB>> ]
-"15802" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>212</SUB>> ]
-"15805" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;sig == null&quot;)<SUB>212</SUB>> ]
-"15811" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>215</SUB>> ]
-"15732" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>196</SUB>> ]
-"15741" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>199</SUB>> ]
-"15752" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetStaticFieldID)<SUB>202</SUB>> ]
-"15764" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>204</SUB>> ]
-"15772" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetStaticFieldID)<SUB>206</SUB>> ]
-"15784" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>208</SUB>> ]
-"15792" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetStaticFieldID)<SUB>210</SUB>> ]
-"15804" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>212</SUB>> ]
-"15812" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>215</SUB>> ]
-"15734" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>196</SUB>> ]
-"15743" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>199</SUB>> ]
-"15754" [label = <(FIELD_IDENTIFIER,GetStaticFieldID,GetStaticFieldID)<SUB>202</SUB>> ]
-"15774" [label = <(FIELD_IDENTIFIER,GetStaticFieldID,GetStaticFieldID)<SUB>206</SUB>> ]
-"15794" [label = <(FIELD_IDENTIFIER,GetStaticFieldID,GetStaticFieldID)<SUB>210</SUB>> ]
-"15814" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>215</SUB>> ]
-"15725" [label = <(METHOD,GetStaticFieldIdBadArgumentTest)<SUB>195</SUB>> ]
-"15816" [label = <(METHOD_RETURN,void)<SUB>195</SUB>> ]
-  "15729" -> "15743" 
-  "15738" -> "15745" 
-  "15745" -> "15754" 
-  "15749" -> "15758" 
-  "15758" -> "15764" 
-  "15761" -> "15774" 
-  "15769" -> "15778" 
-  "15778" -> "15784" 
-  "15781" -> "15794" 
-  "15789" -> "15798" 
-  "15798" -> "15804" 
-  "15801" -> "15814" 
-  "15809" -> "15816" 
-  "15731" -> "15729" 
-  "15740" -> "15738" 
-  "15751" -> "15749" 
-  "15762" -> "15765" 
-  "15765" -> "15761" 
-  "15771" -> "15769" 
-  "15782" -> "15785" 
-  "15785" -> "15781" 
-  "15791" -> "15789" 
-  "15802" -> "15805" 
-  "15805" -> "15801" 
-  "15811" -> "15809" 
-  "15732" -> "15731" 
-  "15741" -> "15740" 
-  "15752" -> "15751" 
-  "15764" -> "15762" 
-  "15772" -> "15771" 
-  "15784" -> "15782" 
-  "15792" -> "15791" 
-  "15804" -> "15802" 
-  "15812" -> "15811" 
-  "15734" -> "15732" 
-  "15743" -> "15741" 
-  "15754" -> "15752" 
-  "15774" -> "15772" 
-  "15794" -> "15792" 
+digraph "GetFromReflectedMethod_ToReflectedMethodBadArgumentTest" {  
+"15754" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>292</SUB>> ]
+"15763" [label = <(&lt;operator&gt;.assignment,c = env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>295</SUB>> ]
+"15770" [label = <(ASSERT_NE,ASSERT_NE(c, nullptr))<SUB>296</SUB>> ]
+"15774" [label = <(&lt;operator&gt;.assignment,mid = env_-&gt;GetMethodID(c, &quot;&lt;init&gt;&quot;, &quot;()V&quot;))<SUB>297</SUB>> ]
+"15783" [label = <(ASSERT_NE,ASSERT_NE(mid, nullptr))<SUB>298</SUB>> ]
+"15787" [label = <(&lt;operator&gt;.assignment,method = env_-&gt;ToReflectedMethod(nullptr, mid, JNI_FALSE))<SUB>301</SUB>> ]
+"15812" [label = <(&lt;operator&gt;.assignment,method = env_-&gt;ToReflectedMethod(c, nullptr, JNI_FALSE))<SUB>309</SUB>> ]
+"15821" [label = <(EXPECT_EQ,EXPECT_EQ(method, nullptr))<SUB>310</SUB>> ]
+"15824" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;jmethodID was NULL&quot;\012 : &quot;mid == null&quot;))<SUB>311</SUB>> ]
+"15832" [label = <(&lt;operator&gt;.assignment,mid = env_-&gt;FromReflectedMethod(method))<SUB>313</SUB>> ]
+"15839" [label = <(ASSERT_EQ,ASSERT_EQ(mid, nullptr))<SUB>314</SUB>> ]
+"15842" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;expected non-null method&quot; : &quot;jlr_method == null&quot;))<SUB>315</SUB>> ]
+"15850" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>317</SUB>> ]
+"15756" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>292</SUB>> ]
+"15765" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>295</SUB>> ]
+"15776" [label = <(GetMethodID,env_-&gt;GetMethodID(c, &quot;&lt;init&gt;&quot;, &quot;()V&quot;))<SUB>297</SUB>> ]
+"15789" [label = <(ToReflectedMethod,env_-&gt;ToReflectedMethod(nullptr, mid, JNI_FALSE))<SUB>301</SUB>> ]
+"15814" [label = <(ToReflectedMethod,env_-&gt;ToReflectedMethod(c, nullptr, JNI_FALSE))<SUB>309</SUB>> ]
+"15825" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>311</SUB>> ]
+"15828" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;jmethodID was NULL&quot;\012 : &quot;mid == null&quot;)<SUB>311</SUB>> ]
+"15834" [label = <(FromReflectedMethod,env_-&gt;FromReflectedMethod(method))<SUB>313</SUB>> ]
+"15843" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>315</SUB>> ]
+"15846" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;expected non-null method&quot; : &quot;jlr_method == null&quot;)<SUB>315</SUB>> ]
+"15852" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>317</SUB>> ]
+"15757" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>292</SUB>> ]
+"15766" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>295</SUB>> ]
+"15777" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetMethodID)<SUB>297</SUB>> ]
+"15790" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ToReflectedMethod)<SUB>301</SUB>> ]
+"15799" [label = <(EXPECT_EQ,EXPECT_EQ(method, nullptr))<SUB>303</SUB>> ]
+"15802" [label = <(Check,check_jni_abort_catcher.Check(&quot;ToReflectedMethod received NULL jclass&quot;))<SUB>304</SUB>> ]
+"15815" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ToReflectedMethod)<SUB>309</SUB>> ]
+"15827" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>311</SUB>> ]
+"15835" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FromReflectedMethod)<SUB>313</SUB>> ]
+"15845" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>315</SUB>> ]
+"15853" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>317</SUB>> ]
+"15759" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>292</SUB>> ]
+"15768" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>295</SUB>> ]
+"15779" [label = <(FIELD_IDENTIFIER,GetMethodID,GetMethodID)<SUB>297</SUB>> ]
+"15792" [label = <(FIELD_IDENTIFIER,ToReflectedMethod,ToReflectedMethod)<SUB>301</SUB>> ]
+"15803" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>304</SUB>> ]
+"15809" [label = <(EXPECT_NE,EXPECT_NE(method, nullptr))<SUB>306</SUB>> ]
+"15817" [label = <(FIELD_IDENTIFIER,ToReflectedMethod,ToReflectedMethod)<SUB>309</SUB>> ]
+"15837" [label = <(FIELD_IDENTIFIER,FromReflectedMethod,FromReflectedMethod)<SUB>313</SUB>> ]
+"15855" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>317</SUB>> ]
+"15805" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>304</SUB>> ]
+"15750" [label = <(METHOD,GetFromReflectedMethod_ToReflectedMethodBadArgumentTest)<SUB>291</SUB>> ]
+"15857" [label = <(METHOD_RETURN,void)<SUB>291</SUB>> ]
+  "15754" -> "15768" 
+  "15763" -> "15770" 
+  "15770" -> "15779" 
+  "15774" -> "15783" 
+  "15783" -> "15792" 
+  "15787" -> "15799" 
+  "15787" -> "15809" 
+  "15812" -> "15821" 
+  "15821" -> "15827" 
+  "15824" -> "15837" 
+  "15832" -> "15839" 
+  "15839" -> "15845" 
+  "15842" -> "15855" 
+  "15850" -> "15857" 
+  "15756" -> "15754" 
+  "15765" -> "15763" 
+  "15776" -> "15774" 
+  "15789" -> "15787" 
   "15814" -> "15812" 
-  "15725" -> "15734" 
+  "15825" -> "15828" 
+  "15828" -> "15824" 
+  "15834" -> "15832" 
+  "15843" -> "15846" 
+  "15846" -> "15842" 
+  "15852" -> "15850" 
+  "15757" -> "15756" 
+  "15766" -> "15765" 
+  "15777" -> "15776" 
+  "15790" -> "15789" 
+  "15799" -> "15805" 
+  "15802" -> "15817" 
+  "15815" -> "15814" 
+  "15827" -> "15825" 
+  "15835" -> "15834" 
+  "15845" -> "15843" 
+  "15853" -> "15852" 
+  "15759" -> "15757" 
+  "15768" -> "15766" 
+  "15779" -> "15777" 
+  "15792" -> "15790" 
+  "15803" -> "15802" 
+  "15809" -> "15817" 
+  "15817" -> "15815" 
+  "15837" -> "15835" 
+  "15855" -> "15853" 
+  "15805" -> "15803" 
+  "15750" -> "15759" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/291-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/291-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/291-cfg.dot	2023-06-07 19:35:28.407384333 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/291-cfg.dot	2023-06-07 19:35:34.917383762 +0330
@@ -1,87 +1,79 @@
-digraph "GetMethodIdBadArgumentTest" {  
-"15822" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>219</SUB>> ]
-"15831" [label = <(&lt;operator&gt;.assignment,method = env_-&gt;GetMethodID(nullptr, &quot;&lt;init&gt;&quot;, &quot;(Ljava/lang/String;)V&quot;))<SUB>222</SUB>> ]
-"15840" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, method))<SUB>223</SUB>> ]
-"15843" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;GetMethodID received NULL jclass&quot;\012 : &quot;java_class == null&quot;))<SUB>224</SUB>> ]
-"15852" [label = <(&lt;operator&gt;.assignment,jlnsme = env_-&gt;FindClass(&quot;java/lang/NoSuchMethodError&quot;))<SUB>226</SUB>> ]
-"15859" [label = <(ASSERT_TRUE,ASSERT_TRUE(jlnsme != nullptr))<SUB>227</SUB>> ]
-"15863" [label = <(&lt;operator&gt;.assignment,method = env_-&gt;GetMethodID(jlnsme, nullptr, &quot;(Ljava/lang/String;)V&quot;))<SUB>228</SUB>> ]
-"15872" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, method))<SUB>229</SUB>> ]
-"15875" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;))<SUB>230</SUB>> ]
-"15883" [label = <(&lt;operator&gt;.assignment,method = env_-&gt;GetMethodID(jlnsme, &quot;&lt;init&gt;&quot;, nullptr))<SUB>232</SUB>> ]
-"15892" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, method))<SUB>233</SUB>> ]
-"15895" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;sig == null&quot;))<SUB>234</SUB>> ]
-"15903" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>237</SUB>> ]
-"15824" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>219</SUB>> ]
-"15833" [label = <(GetMethodID,env_-&gt;GetMethodID(nullptr, &quot;&lt;init&gt;&quot;, &quot;(Ljava/lang/String;)V&quot;))<SUB>222</SUB>> ]
-"15844" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>224</SUB>> ]
-"15847" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;GetMethodID received NULL jclass&quot;\012 : &quot;java_class == null&quot;)<SUB>224</SUB>> ]
-"15854" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/NoSuchMethodError&quot;))<SUB>226</SUB>> ]
-"15860" [label = <(&lt;operator&gt;.notEquals,jlnsme != nullptr)<SUB>227</SUB>> ]
-"15865" [label = <(GetMethodID,env_-&gt;GetMethodID(jlnsme, nullptr, &quot;(Ljava/lang/String;)V&quot;))<SUB>228</SUB>> ]
-"15876" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>230</SUB>> ]
-"15879" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;)<SUB>230</SUB>> ]
-"15885" [label = <(GetMethodID,env_-&gt;GetMethodID(jlnsme, &quot;&lt;init&gt;&quot;, nullptr))<SUB>232</SUB>> ]
-"15896" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>234</SUB>> ]
-"15899" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;sig == null&quot;)<SUB>234</SUB>> ]
-"15905" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>237</SUB>> ]
-"15825" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>219</SUB>> ]
-"15834" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetMethodID)<SUB>222</SUB>> ]
-"15846" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>224</SUB>> ]
-"15855" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>226</SUB>> ]
-"15866" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetMethodID)<SUB>228</SUB>> ]
-"15878" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>230</SUB>> ]
-"15886" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetMethodID)<SUB>232</SUB>> ]
-"15898" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>234</SUB>> ]
-"15906" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>237</SUB>> ]
-"15827" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>219</SUB>> ]
-"15836" [label = <(FIELD_IDENTIFIER,GetMethodID,GetMethodID)<SUB>222</SUB>> ]
-"15857" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>226</SUB>> ]
-"15868" [label = <(FIELD_IDENTIFIER,GetMethodID,GetMethodID)<SUB>228</SUB>> ]
-"15888" [label = <(FIELD_IDENTIFIER,GetMethodID,GetMethodID)<SUB>232</SUB>> ]
-"15908" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>237</SUB>> ]
-"15818" [label = <(METHOD,GetMethodIdBadArgumentTest)<SUB>218</SUB>> ]
-"15910" [label = <(METHOD_RETURN,void)<SUB>218</SUB>> ]
-  "15822" -> "15836" 
-  "15831" -> "15840" 
-  "15840" -> "15846" 
-  "15843" -> "15857" 
-  "15852" -> "15860" 
-  "15859" -> "15868" 
-  "15863" -> "15872" 
-  "15872" -> "15878" 
-  "15875" -> "15888" 
-  "15883" -> "15892" 
-  "15892" -> "15898" 
-  "15895" -> "15908" 
-  "15903" -> "15910" 
-  "15824" -> "15822" 
-  "15833" -> "15831" 
-  "15844" -> "15847" 
-  "15847" -> "15843" 
-  "15854" -> "15852" 
-  "15860" -> "15859" 
-  "15865" -> "15863" 
-  "15876" -> "15879" 
-  "15879" -> "15875" 
-  "15885" -> "15883" 
-  "15896" -> "15899" 
-  "15899" -> "15895" 
-  "15905" -> "15903" 
-  "15825" -> "15824" 
-  "15834" -> "15833" 
-  "15846" -> "15844" 
-  "15855" -> "15854" 
-  "15866" -> "15865" 
-  "15878" -> "15876" 
-  "15886" -> "15885" 
-  "15898" -> "15896" 
-  "15906" -> "15905" 
-  "15827" -> "15825" 
-  "15836" -> "15834" 
-  "15857" -> "15855" 
-  "15868" -> "15866" 
+digraph "RegisterAndUnregisterNativesBadArguments" {  
+"15864" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>322</SUB>> ]
+"15894" [label = <(&lt;operator&gt;.assignment,jlobject = env_-&gt;FindClass(&quot;java/lang/Object&quot;))<SUB>332</SUB>> ]
+"15901" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, nullptr, 1), JNI_ERR))<SUB>333</SUB>> ]
+"15910" [label = <(Check,check_jni_abort_catcher-&gt;Check(&quot;methods == null&quot;))<SUB>334</SUB>> ]
+"15915" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;UnregisterNatives(nullptr), JNI_ERR))<SUB>337</SUB>> ]
+"15922" [label = <(Check,check_jni_abort_catcher-&gt;Check(check_jni ? &quot;UnregisterNatives received NULL jclass&quot;\012 : &quot;java_class == null&quot;))<SUB>338</SUB>> ]
+"15930" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>341</SUB>> ]
+"15866" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>322</SUB>> ]
+"15873" [label = <(&lt;operator&gt;.assignment,methods[] = { })<SUB>325</SUB>> ]
+"15876" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;RegisterNatives(nullptr, methods, 0), JNI_ERR))<SUB>326</SUB>> ]
+"15885" [label = <(Check,check_jni_abort_catcher-&gt;Check(check_jni ? &quot;RegisterNatives received NULL jclass&quot;\012 : &quot;java_class == null&quot;))<SUB>327</SUB>> ]
+"15896" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/Object&quot;))<SUB>332</SUB>> ]
+"15902" [label = <(RegisterNatives,env_-&gt;RegisterNatives(jlobject, nullptr, 1))<SUB>333</SUB>> ]
+"15911" [label = <(&lt;operator&gt;.indirectFieldAccess,check_jni_abort_catcher-&gt;Check)<SUB>334</SUB>> ]
+"15916" [label = <(UnregisterNatives,env_-&gt;UnregisterNatives(nullptr))<SUB>337</SUB>> ]
+"15923" [label = <(&lt;operator&gt;.indirectFieldAccess,check_jni_abort_catcher-&gt;Check)<SUB>338</SUB>> ]
+"15926" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;UnregisterNatives received NULL jclass&quot;\012 : &quot;java_class == null&quot;)<SUB>338</SUB>> ]
+"15932" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>341</SUB>> ]
+"15867" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>322</SUB>> ]
+"15875" [label = <(&lt;operator&gt;.arrayInitializer,{ })<SUB>325</SUB>> ]
+"15877" [label = <(RegisterNatives,env_-&gt;RegisterNatives(nullptr, methods, 0))<SUB>326</SUB>> ]
+"15886" [label = <(&lt;operator&gt;.indirectFieldAccess,check_jni_abort_catcher-&gt;Check)<SUB>327</SUB>> ]
+"15889" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;RegisterNatives received NULL jclass&quot;\012 : &quot;java_class == null&quot;)<SUB>327</SUB>> ]
+"15897" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>332</SUB>> ]
+"15903" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;RegisterNatives)<SUB>333</SUB>> ]
+"15913" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>334</SUB>> ]
+"15917" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;UnregisterNatives)<SUB>337</SUB>> ]
+"15925" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>338</SUB>> ]
+"15933" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>341</SUB>> ]
+"15869" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>322</SUB>> ]
+"15878" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;RegisterNatives)<SUB>326</SUB>> ]
+"15888" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>327</SUB>> ]
+"15899" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>332</SUB>> ]
+"15905" [label = <(FIELD_IDENTIFIER,RegisterNatives,RegisterNatives)<SUB>333</SUB>> ]
+"15919" [label = <(FIELD_IDENTIFIER,UnregisterNatives,UnregisterNatives)<SUB>337</SUB>> ]
+"15935" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>341</SUB>> ]
+"15880" [label = <(FIELD_IDENTIFIER,RegisterNatives,RegisterNatives)<SUB>326</SUB>> ]
+"15859" [label = <(METHOD,RegisterAndUnregisterNativesBadArguments)<SUB>320</SUB>> ]
+"15937" [label = <(METHOD_RETURN,void)<SUB>320</SUB>> ]
+  "15864" -> "15875" 
+  "15894" -> "15905" 
+  "15901" -> "15913" 
+  "15910" -> "15919" 
+  "15915" -> "15925" 
+  "15922" -> "15935" 
+  "15930" -> "15937" 
+  "15866" -> "15864" 
+  "15873" -> "15880" 
+  "15876" -> "15888" 
+  "15885" -> "15899" 
+  "15896" -> "15894" 
+  "15902" -> "15901" 
+  "15911" -> "15910" 
+  "15916" -> "15915" 
+  "15923" -> "15926" 
+  "15926" -> "15922" 
+  "15932" -> "15930" 
+  "15867" -> "15866" 
+  "15875" -> "15873" 
+  "15877" -> "15876" 
+  "15886" -> "15889" 
+  "15889" -> "15885" 
+  "15897" -> "15896" 
+  "15903" -> "15902" 
+  "15913" -> "15911" 
+  "15917" -> "15916" 
+  "15925" -> "15923" 
+  "15933" -> "15932" 
+  "15869" -> "15867" 
+  "15878" -> "15877" 
   "15888" -> "15886" 
-  "15908" -> "15906" 
-  "15818" -> "15827" 
+  "15899" -> "15897" 
+  "15905" -> "15903" 
+  "15919" -> "15917" 
+  "15935" -> "15933" 
+  "15880" -> "15878" 
+  "15859" -> "15869" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/292-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/292-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/292-cfg.dot	2023-06-07 19:35:28.407384333 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/292-cfg.dot	2023-06-07 19:35:34.917383762 +0330
@@ -1,83 +1,243 @@
-digraph "GetStaticMethodIdBadArgumentTest" {  
-"15916" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>241</SUB>> ]
-"15925" [label = <(&lt;operator&gt;.assignment,method = env_-&gt;GetStaticMethodID(nullptr, &quot;valueOf&quot;, &quot;(I)Ljava/lang/String;&quot;))<SUB>244</SUB>> ]
-"15934" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, method))<SUB>245</SUB>> ]
-"15937" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;GetStaticMethodID received NULL jclass&quot;\012 : &quot;java_class == null&quot;))<SUB>246</SUB>> ]
-"15946" [label = <(&lt;operator&gt;.assignment,jlstring = env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>248</SUB>> ]
-"15953" [label = <(&lt;operator&gt;.assignment,method = env_-&gt;GetStaticMethodID(jlstring, nullptr, &quot;(I)Ljava/lang/String;&quot;))<SUB>249</SUB>> ]
-"15962" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, method))<SUB>250</SUB>> ]
-"15965" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;))<SUB>251</SUB>> ]
-"15973" [label = <(&lt;operator&gt;.assignment,method = env_-&gt;GetStaticMethodID(jlstring, &quot;valueOf&quot;, nullptr))<SUB>253</SUB>> ]
-"15982" [label = <(EXPECT_EQ,EXPECT_EQ(nullptr, method))<SUB>254</SUB>> ]
-"15985" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;sig == null&quot;))<SUB>255</SUB>> ]
-"15993" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>258</SUB>> ]
-"15918" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>241</SUB>> ]
-"15927" [label = <(GetStaticMethodID,env_-&gt;GetStaticMethodID(nullptr, &quot;valueOf&quot;, &quot;(I)Ljava/lang/String;&quot;))<SUB>244</SUB>> ]
-"15938" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>246</SUB>> ]
-"15941" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;GetStaticMethodID received NULL jclass&quot;\012 : &quot;java_class == null&quot;)<SUB>246</SUB>> ]
-"15948" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>248</SUB>> ]
-"15955" [label = <(GetStaticMethodID,env_-&gt;GetStaticMethodID(jlstring, nullptr, &quot;(I)Ljava/lang/String;&quot;))<SUB>249</SUB>> ]
-"15966" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>251</SUB>> ]
-"15969" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;name == null&quot;)<SUB>251</SUB>> ]
-"15975" [label = <(GetStaticMethodID,env_-&gt;GetStaticMethodID(jlstring, &quot;valueOf&quot;, nullptr))<SUB>253</SUB>> ]
-"15986" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>255</SUB>> ]
-"15989" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;non-nullable const char* was NULL&quot;\012 : &quot;sig == null&quot;)<SUB>255</SUB>> ]
-"15995" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>258</SUB>> ]
-"15919" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>241</SUB>> ]
-"15928" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetStaticMethodID)<SUB>244</SUB>> ]
-"15940" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>246</SUB>> ]
-"15949" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>248</SUB>> ]
-"15956" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetStaticMethodID)<SUB>249</SUB>> ]
-"15968" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>251</SUB>> ]
-"15976" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetStaticMethodID)<SUB>253</SUB>> ]
-"15988" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>255</SUB>> ]
-"15996" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>258</SUB>> ]
-"15921" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>241</SUB>> ]
-"15930" [label = <(FIELD_IDENTIFIER,GetStaticMethodID,GetStaticMethodID)<SUB>244</SUB>> ]
-"15951" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>248</SUB>> ]
-"15958" [label = <(FIELD_IDENTIFIER,GetStaticMethodID,GetStaticMethodID)<SUB>249</SUB>> ]
-"15978" [label = <(FIELD_IDENTIFIER,GetStaticMethodID,GetStaticMethodID)<SUB>253</SUB>> ]
-"15998" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>258</SUB>> ]
-"15912" [label = <(METHOD,GetStaticMethodIdBadArgumentTest)<SUB>240</SUB>> ]
-"16000" [label = <(METHOD_RETURN,void)<SUB>240</SUB>> ]
-  "15916" -> "15930" 
-  "15925" -> "15934" 
-  "15934" -> "15940" 
-  "15937" -> "15951" 
-  "15946" -> "15958" 
-  "15953" -> "15962" 
-  "15962" -> "15968" 
-  "15965" -> "15978" 
-  "15973" -> "15982" 
-  "15982" -> "15988" 
-  "15985" -> "15998" 
-  "15993" -> "16000" 
-  "15918" -> "15916" 
-  "15927" -> "15925" 
-  "15938" -> "15941" 
-  "15941" -> "15937" 
+digraph "GetPrimitiveArrayElementsOfWrongType" {  
+"15943" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>346</SUB>> ]
+"15952" [label = <(&lt;operator&gt;.assignment,array = env_-&gt;NewBooleanArray(10))<SUB>349</SUB>> ]
+"15960" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;GetByteArrayElements(reinterpret_cast&lt;jbyteArray&gt;(array), &amp;is_copy), nullptr))<SUB>351</SUB>> ]
+"15971" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected byte[]&quot;\012 : &quot;attempt to get byte primitive array elements with an object of type boolean[]&quot;))<SUB>352</SUB>> ]
+"15979" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;GetShortArrayElements(reinterpret_cast&lt;jshortArray&gt;(array), &amp;is_copy), nullptr))<SUB>355</SUB>> ]
+"15990" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected short[]&quot;\012 : &quot;attempt to get short primitive array elements with an object of type boolean[]&quot;))<SUB>356</SUB>> ]
+"15998" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;GetCharArrayElements(reinterpret_cast&lt;jcharArray&gt;(array), &amp;is_copy), nullptr))<SUB>359</SUB>> ]
+"16009" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected char[]&quot;\012 : &quot;attempt to get char primitive array elements with an object of type boolean[]&quot;))<SUB>360</SUB>> ]
+"16017" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;GetIntArrayElements(reinterpret_cast&lt;jintArray&gt;(array), &amp;is_copy), nullptr))<SUB>363</SUB>> ]
+"16028" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected int[]&quot;\012 : &quot;attempt to get int primitive array elements with an object of type boolean[]&quot;))<SUB>364</SUB>> ]
+"16036" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;GetLongArrayElements(reinterpret_cast&lt;jlongArray&gt;(array), &amp;is_copy), nullptr))<SUB>367</SUB>> ]
+"16047" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected long[]&quot;\012 : &quot;attempt to get long primitive array elements with an object of type boolean[]&quot;))<SUB>368</SUB>> ]
+"16055" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;GetFloatArrayElements(reinterpret_cast&lt;jfloatArray&gt;(array), &amp;is_copy), nullptr))<SUB>371</SUB>> ]
+"16066" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected float[]&quot;\012 : &quot;attempt to get float primitive array elements with an object of type boolean[]&quot;))<SUB>372</SUB>> ]
+"16074" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;GetDoubleArrayElements(reinterpret_cast&lt;jdoubleArray&gt;(array), &amp;is_copy), nullptr))<SUB>375</SUB>> ]
+"16085" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected double[]&quot;\012 : &quot;attempt to get double primitive array elements with an object of type boolean[]&quot;))<SUB>376</SUB>> ]
+"16094" [label = <(&lt;operator&gt;.assignment,array2 = env_-&gt;NewByteArray(10))<SUB>379</SUB>> ]
+"16101" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;GetBooleanArrayElements(reinterpret_cast&lt;jbooleanArray&gt;(array2), &amp;is_copy),\012 nullptr))<SUB>380</SUB>> ]
+"16112" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type byte[] expected boolean[]&quot;\012 : &quot;attempt to get boolean primitive array elements with an object of type byte[]&quot;))<SUB>382</SUB>> ]
+"16121" [label = <(&lt;operator&gt;.assignment,object = env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>385</SUB>> ]
+"16128" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;GetBooleanArrayElements(reinterpret_cast&lt;jbooleanArray&gt;(object), &amp;is_copy),\012 nullptr))<SUB>386</SUB>> ]
+"16139" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;attempt to get boolean primitive array elements with an object of type java.lang.String&quot;))<SUB>388</SUB>> ]
+"16147" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>392</SUB>> ]
+"15945" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>346</SUB>> ]
+"15954" [label = <(NewBooleanArray,env_-&gt;NewBooleanArray(10))<SUB>349</SUB>> ]
+"15961" [label = <(GetByteArrayElements,env_-&gt;GetByteArrayElements(reinterpret_cast&lt;jbyteArray&gt;(array), &amp;is_copy))<SUB>351</SUB>> ]
+"15972" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>352</SUB>> ]
+"15975" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected byte[]&quot;\012 : &quot;attempt to get byte primitive array elements with an object of type boolean[]&quot;)<SUB>353</SUB>> ]
+"15980" [label = <(GetShortArrayElements,env_-&gt;GetShortArrayElements(reinterpret_cast&lt;jshortArray&gt;(array), &amp;is_copy))<SUB>355</SUB>> ]
+"15991" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>356</SUB>> ]
+"15994" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected short[]&quot;\012 : &quot;attempt to get short primitive array elements with an object of type boolean[]&quot;)<SUB>357</SUB>> ]
+"15999" [label = <(GetCharArrayElements,env_-&gt;GetCharArrayElements(reinterpret_cast&lt;jcharArray&gt;(array), &amp;is_copy))<SUB>359</SUB>> ]
+"16010" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>360</SUB>> ]
+"16013" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected char[]&quot;\012 : &quot;attempt to get char primitive array elements with an object of type boolean[]&quot;)<SUB>361</SUB>> ]
+"16018" [label = <(GetIntArrayElements,env_-&gt;GetIntArrayElements(reinterpret_cast&lt;jintArray&gt;(array), &amp;is_copy))<SUB>363</SUB>> ]
+"16029" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>364</SUB>> ]
+"16032" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected int[]&quot;\012 : &quot;attempt to get int primitive array elements with an object of type boolean[]&quot;)<SUB>365</SUB>> ]
+"16037" [label = <(GetLongArrayElements,env_-&gt;GetLongArrayElements(reinterpret_cast&lt;jlongArray&gt;(array), &amp;is_copy))<SUB>367</SUB>> ]
+"16048" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>368</SUB>> ]
+"16051" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected long[]&quot;\012 : &quot;attempt to get long primitive array elements with an object of type boolean[]&quot;)<SUB>369</SUB>> ]
+"16056" [label = <(GetFloatArrayElements,env_-&gt;GetFloatArrayElements(reinterpret_cast&lt;jfloatArray&gt;(array), &amp;is_copy))<SUB>371</SUB>> ]
+"16067" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>372</SUB>> ]
+"16070" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected float[]&quot;\012 : &quot;attempt to get float primitive array elements with an object of type boolean[]&quot;)<SUB>373</SUB>> ]
+"16075" [label = <(GetDoubleArrayElements,env_-&gt;GetDoubleArrayElements(reinterpret_cast&lt;jdoubleArray&gt;(array), &amp;is_copy))<SUB>375</SUB>> ]
+"16086" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>376</SUB>> ]
+"16089" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected double[]&quot;\012 : &quot;attempt to get double primitive array elements with an object of type boolean[]&quot;)<SUB>377</SUB>> ]
+"16096" [label = <(NewByteArray,env_-&gt;NewByteArray(10))<SUB>379</SUB>> ]
+"16102" [label = <(GetBooleanArrayElements,env_-&gt;GetBooleanArrayElements(reinterpret_cast&lt;jbooleanArray&gt;(array2), &amp;is_copy))<SUB>380</SUB>> ]
+"16113" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>382</SUB>> ]
+"16116" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type byte[] expected boolean[]&quot;\012 : &quot;attempt to get boolean primitive array elements with an object of type byte[]&quot;)<SUB>383</SUB>> ]
+"16123" [label = <(NewStringUTF,env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>385</SUB>> ]
+"16129" [label = <(GetBooleanArrayElements,env_-&gt;GetBooleanArrayElements(reinterpret_cast&lt;jbooleanArray&gt;(object), &amp;is_copy))<SUB>386</SUB>> ]
+"16140" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>388</SUB>> ]
+"16143" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;attempt to get boolean primitive array elements with an object of type java.lang.String&quot;)<SUB>389</SUB>> ]
+"16149" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>392</SUB>> ]
+"15946" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>346</SUB>> ]
+"15955" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewBooleanArray)<SUB>349</SUB>> ]
+"15962" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetByteArrayElements)<SUB>351</SUB>> ]
+"15965" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbyteArray&gt;(array))<SUB>351</SUB>> ]
+"15968" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>351</SUB>> ]
+"15974" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>352</SUB>> ]
+"15981" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetShortArrayElements)<SUB>355</SUB>> ]
+"15984" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jshortArray&gt;(array))<SUB>355</SUB>> ]
+"15987" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>355</SUB>> ]
+"15993" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>356</SUB>> ]
+"16000" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetCharArrayElements)<SUB>359</SUB>> ]
+"16003" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jcharArray&gt;(array))<SUB>359</SUB>> ]
+"16006" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>359</SUB>> ]
+"16012" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>360</SUB>> ]
+"16019" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetIntArrayElements)<SUB>363</SUB>> ]
+"16022" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jintArray&gt;(array))<SUB>363</SUB>> ]
+"16025" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>363</SUB>> ]
+"16031" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>364</SUB>> ]
+"16038" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetLongArrayElements)<SUB>367</SUB>> ]
+"16041" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jlongArray&gt;(array))<SUB>367</SUB>> ]
+"16044" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>367</SUB>> ]
+"16050" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>368</SUB>> ]
+"16057" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetFloatArrayElements)<SUB>371</SUB>> ]
+"16060" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jfloatArray&gt;(array))<SUB>371</SUB>> ]
+"16063" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>371</SUB>> ]
+"16069" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>372</SUB>> ]
+"16076" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetDoubleArrayElements)<SUB>375</SUB>> ]
+"16079" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jdoubleArray&gt;(array))<SUB>375</SUB>> ]
+"16082" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>375</SUB>> ]
+"16088" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>376</SUB>> ]
+"16097" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewByteArray)<SUB>379</SUB>> ]
+"16103" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetBooleanArrayElements)<SUB>380</SUB>> ]
+"16106" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbooleanArray&gt;(array2))<SUB>380</SUB>> ]
+"16109" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>380</SUB>> ]
+"16115" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>382</SUB>> ]
+"16124" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewStringUTF)<SUB>385</SUB>> ]
+"16130" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetBooleanArrayElements)<SUB>386</SUB>> ]
+"16133" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbooleanArray&gt;(object))<SUB>386</SUB>> ]
+"16136" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>386</SUB>> ]
+"16142" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>388</SUB>> ]
+"16150" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>392</SUB>> ]
+"15948" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>346</SUB>> ]
+"15957" [label = <(FIELD_IDENTIFIER,NewBooleanArray,NewBooleanArray)<SUB>349</SUB>> ]
+"15964" [label = <(FIELD_IDENTIFIER,GetByteArrayElements,GetByteArrayElements)<SUB>351</SUB>> ]
+"15966" [label = <(UNKNOWN,jbyteArray,jbyteArray)<SUB>351</SUB>> ]
+"15983" [label = <(FIELD_IDENTIFIER,GetShortArrayElements,GetShortArrayElements)<SUB>355</SUB>> ]
+"15985" [label = <(UNKNOWN,jshortArray,jshortArray)<SUB>355</SUB>> ]
+"16002" [label = <(FIELD_IDENTIFIER,GetCharArrayElements,GetCharArrayElements)<SUB>359</SUB>> ]
+"16004" [label = <(UNKNOWN,jcharArray,jcharArray)<SUB>359</SUB>> ]
+"16021" [label = <(FIELD_IDENTIFIER,GetIntArrayElements,GetIntArrayElements)<SUB>363</SUB>> ]
+"16023" [label = <(UNKNOWN,jintArray,jintArray)<SUB>363</SUB>> ]
+"16040" [label = <(FIELD_IDENTIFIER,GetLongArrayElements,GetLongArrayElements)<SUB>367</SUB>> ]
+"16042" [label = <(UNKNOWN,jlongArray,jlongArray)<SUB>367</SUB>> ]
+"16059" [label = <(FIELD_IDENTIFIER,GetFloatArrayElements,GetFloatArrayElements)<SUB>371</SUB>> ]
+"16061" [label = <(UNKNOWN,jfloatArray,jfloatArray)<SUB>371</SUB>> ]
+"16078" [label = <(FIELD_IDENTIFIER,GetDoubleArrayElements,GetDoubleArrayElements)<SUB>375</SUB>> ]
+"16080" [label = <(UNKNOWN,jdoubleArray,jdoubleArray)<SUB>375</SUB>> ]
+"16099" [label = <(FIELD_IDENTIFIER,NewByteArray,NewByteArray)<SUB>379</SUB>> ]
+"16105" [label = <(FIELD_IDENTIFIER,GetBooleanArrayElements,GetBooleanArrayElements)<SUB>380</SUB>> ]
+"16107" [label = <(UNKNOWN,jbooleanArray,jbooleanArray)<SUB>380</SUB>> ]
+"16126" [label = <(FIELD_IDENTIFIER,NewStringUTF,NewStringUTF)<SUB>385</SUB>> ]
+"16132" [label = <(FIELD_IDENTIFIER,GetBooleanArrayElements,GetBooleanArrayElements)<SUB>386</SUB>> ]
+"16134" [label = <(UNKNOWN,jbooleanArray,jbooleanArray)<SUB>386</SUB>> ]
+"16152" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>392</SUB>> ]
+"15939" [label = <(METHOD,GetPrimitiveArrayElementsOfWrongType)<SUB>345</SUB>> ]
+"16154" [label = <(METHOD_RETURN,void)<SUB>345</SUB>> ]
+  "15943" -> "15957" 
+  "15952" -> "15964" 
+  "15960" -> "15974" 
+  "15971" -> "15983" 
+  "15979" -> "15993" 
+  "15990" -> "16002" 
+  "15998" -> "16012" 
+  "16009" -> "16021" 
+  "16017" -> "16031" 
+  "16028" -> "16040" 
+  "16036" -> "16050" 
+  "16047" -> "16059" 
+  "16055" -> "16069" 
+  "16066" -> "16078" 
+  "16074" -> "16088" 
+  "16085" -> "16099" 
+  "16094" -> "16105" 
+  "16101" -> "16115" 
+  "16112" -> "16126" 
+  "16121" -> "16132" 
+  "16128" -> "16142" 
+  "16139" -> "16152" 
+  "16147" -> "16154" 
+  "15945" -> "15943" 
+  "15954" -> "15952" 
+  "15961" -> "15960" 
+  "15972" -> "15975" 
+  "15975" -> "15971" 
+  "15980" -> "15979" 
+  "15991" -> "15994" 
+  "15994" -> "15990" 
+  "15999" -> "15998" 
+  "16010" -> "16013" 
+  "16013" -> "16009" 
+  "16018" -> "16017" 
+  "16029" -> "16032" 
+  "16032" -> "16028" 
+  "16037" -> "16036" 
+  "16048" -> "16051" 
+  "16051" -> "16047" 
+  "16056" -> "16055" 
+  "16067" -> "16070" 
+  "16070" -> "16066" 
+  "16075" -> "16074" 
+  "16086" -> "16089" 
+  "16089" -> "16085" 
+  "16096" -> "16094" 
+  "16102" -> "16101" 
+  "16113" -> "16116" 
+  "16116" -> "16112" 
+  "16123" -> "16121" 
+  "16129" -> "16128" 
+  "16140" -> "16143" 
+  "16143" -> "16139" 
+  "16149" -> "16147" 
+  "15946" -> "15945" 
+  "15955" -> "15954" 
+  "15962" -> "15966" 
+  "15965" -> "15968" 
+  "15968" -> "15961" 
+  "15974" -> "15972" 
+  "15981" -> "15985" 
+  "15984" -> "15987" 
+  "15987" -> "15980" 
+  "15993" -> "15991" 
+  "16000" -> "16004" 
+  "16003" -> "16006" 
+  "16006" -> "15999" 
+  "16012" -> "16010" 
+  "16019" -> "16023" 
+  "16022" -> "16025" 
+  "16025" -> "16018" 
+  "16031" -> "16029" 
+  "16038" -> "16042" 
+  "16041" -> "16044" 
+  "16044" -> "16037" 
+  "16050" -> "16048" 
+  "16057" -> "16061" 
+  "16060" -> "16063" 
+  "16063" -> "16056" 
+  "16069" -> "16067" 
+  "16076" -> "16080" 
+  "16079" -> "16082" 
+  "16082" -> "16075" 
+  "16088" -> "16086" 
+  "16097" -> "16096" 
+  "16103" -> "16107" 
+  "16106" -> "16109" 
+  "16109" -> "16102" 
+  "16115" -> "16113" 
+  "16124" -> "16123" 
+  "16130" -> "16134" 
+  "16133" -> "16136" 
+  "16136" -> "16129" 
+  "16142" -> "16140" 
+  "16150" -> "16149" 
   "15948" -> "15946" 
-  "15955" -> "15953" 
-  "15966" -> "15969" 
-  "15969" -> "15965" 
-  "15975" -> "15973" 
-  "15986" -> "15989" 
-  "15989" -> "15985" 
-  "15995" -> "15993" 
-  "15919" -> "15918" 
-  "15928" -> "15927" 
-  "15940" -> "15938" 
-  "15949" -> "15948" 
-  "15956" -> "15955" 
-  "15968" -> "15966" 
-  "15976" -> "15975" 
-  "15988" -> "15986" 
-  "15996" -> "15995" 
-  "15921" -> "15919" 
-  "15930" -> "15928" 
-  "15951" -> "15949" 
-  "15958" -> "15956" 
-  "15978" -> "15976" 
-  "15998" -> "15996" 
-  "15912" -> "15921" 
+  "15957" -> "15955" 
+  "15964" -> "15962" 
+  "15966" -> "15965" 
+  "15983" -> "15981" 
+  "15985" -> "15984" 
+  "16002" -> "16000" 
+  "16004" -> "16003" 
+  "16021" -> "16019" 
+  "16023" -> "16022" 
+  "16040" -> "16038" 
+  "16042" -> "16041" 
+  "16059" -> "16057" 
+  "16061" -> "16060" 
+  "16078" -> "16076" 
+  "16080" -> "16079" 
+  "16099" -> "16097" 
+  "16105" -> "16103" 
+  "16107" -> "16106" 
+  "16126" -> "16124" 
+  "16132" -> "16130" 
+  "16134" -> "16133" 
+  "16152" -> "16150" 
+  "15939" -> "15948" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/293-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/293-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/293-cfg.dot	2023-06-07 19:35:28.407384333 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/293-cfg.dot	2023-06-07 19:35:34.927383763 +0330
@@ -1,96 +1,283 @@
-digraph "GetFromReflectedField_ToReflectedFieldBadArgumentTest" {  
-"16006" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>262</SUB>> ]
-"16015" [label = <(&lt;operator&gt;.assignment,c = env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>265</SUB>> ]
-"16022" [label = <(ASSERT_NE,ASSERT_NE(c, nullptr))<SUB>266</SUB>> ]
-"16026" [label = <(&lt;operator&gt;.assignment,fid = env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;))<SUB>267</SUB>> ]
-"16035" [label = <(ASSERT_NE,ASSERT_NE(fid, nullptr))<SUB>268</SUB>> ]
-"16039" [label = <(&lt;operator&gt;.assignment,field = env_-&gt;ToReflectedField(nullptr, fid, JNI_FALSE))<SUB>271</SUB>> ]
-"16064" [label = <(&lt;operator&gt;.assignment,field = env_-&gt;ToReflectedField(c, nullptr, JNI_FALSE))<SUB>279</SUB>> ]
-"16073" [label = <(EXPECT_EQ,EXPECT_EQ(field, nullptr))<SUB>280</SUB>> ]
-"16076" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;jfieldID was NULL&quot;\012 : &quot;fid == null&quot;))<SUB>281</SUB>> ]
-"16084" [label = <(&lt;operator&gt;.assignment,fid = env_-&gt;FromReflectedField(nullptr))<SUB>284</SUB>> ]
-"16091" [label = <(ASSERT_EQ,ASSERT_EQ(fid, nullptr))<SUB>285</SUB>> ]
-"16094" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;expected non-null java.lang.reflect.Field&quot;\012 : &quot;jlr_field == null&quot;))<SUB>286</SUB>> ]
-"16102" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>289</SUB>> ]
-"16008" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>262</SUB>> ]
-"16017" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>265</SUB>> ]
-"16028" [label = <(GetFieldID,env_-&gt;GetFieldID(c, &quot;count&quot;, &quot;I&quot;))<SUB>267</SUB>> ]
-"16041" [label = <(ToReflectedField,env_-&gt;ToReflectedField(nullptr, fid, JNI_FALSE))<SUB>271</SUB>> ]
-"16066" [label = <(ToReflectedField,env_-&gt;ToReflectedField(c, nullptr, JNI_FALSE))<SUB>279</SUB>> ]
-"16077" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>281</SUB>> ]
-"16080" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;jfieldID was NULL&quot;\012 : &quot;fid == null&quot;)<SUB>281</SUB>> ]
-"16086" [label = <(FromReflectedField,env_-&gt;FromReflectedField(nullptr))<SUB>284</SUB>> ]
-"16095" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>286</SUB>> ]
-"16098" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;expected non-null java.lang.reflect.Field&quot;\012 : &quot;jlr_field == null&quot;)<SUB>286</SUB>> ]
-"16104" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>289</SUB>> ]
-"16009" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>262</SUB>> ]
-"16018" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>265</SUB>> ]
-"16029" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetFieldID)<SUB>267</SUB>> ]
-"16042" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ToReflectedField)<SUB>271</SUB>> ]
-"16051" [label = <(EXPECT_EQ,EXPECT_EQ(field, nullptr))<SUB>273</SUB>> ]
-"16054" [label = <(Check,check_jni_abort_catcher.Check(&quot;ToReflectedField received NULL jclass&quot;))<SUB>274</SUB>> ]
-"16067" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ToReflectedField)<SUB>279</SUB>> ]
-"16079" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>281</SUB>> ]
-"16087" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FromReflectedField)<SUB>284</SUB>> ]
-"16097" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>286</SUB>> ]
-"16105" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>289</SUB>> ]
-"16011" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>262</SUB>> ]
-"16020" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>265</SUB>> ]
-"16031" [label = <(FIELD_IDENTIFIER,GetFieldID,GetFieldID)<SUB>267</SUB>> ]
-"16044" [label = <(FIELD_IDENTIFIER,ToReflectedField,ToReflectedField)<SUB>271</SUB>> ]
-"16055" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>274</SUB>> ]
-"16061" [label = <(EXPECT_NE,EXPECT_NE(field, nullptr))<SUB>276</SUB>> ]
-"16069" [label = <(FIELD_IDENTIFIER,ToReflectedField,ToReflectedField)<SUB>279</SUB>> ]
-"16089" [label = <(FIELD_IDENTIFIER,FromReflectedField,FromReflectedField)<SUB>284</SUB>> ]
-"16107" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>289</SUB>> ]
-"16057" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>274</SUB>> ]
-"16002" [label = <(METHOD,GetFromReflectedField_ToReflectedFieldBadArgumentTest)<SUB>261</SUB>> ]
-"16109" [label = <(METHOD_RETURN,void)<SUB>261</SUB>> ]
-  "16006" -> "16020" 
-  "16015" -> "16022" 
-  "16022" -> "16031" 
-  "16026" -> "16035" 
-  "16035" -> "16044" 
-  "16039" -> "16051" 
-  "16039" -> "16061" 
-  "16064" -> "16073" 
-  "16073" -> "16079" 
-  "16076" -> "16089" 
-  "16084" -> "16091" 
-  "16091" -> "16097" 
-  "16094" -> "16107" 
-  "16102" -> "16109" 
-  "16008" -> "16006" 
-  "16017" -> "16015" 
-  "16028" -> "16026" 
-  "16041" -> "16039" 
-  "16066" -> "16064" 
-  "16077" -> "16080" 
-  "16080" -> "16076" 
-  "16086" -> "16084" 
-  "16095" -> "16098" 
-  "16098" -> "16094" 
-  "16104" -> "16102" 
-  "16009" -> "16008" 
-  "16018" -> "16017" 
-  "16029" -> "16028" 
-  "16042" -> "16041" 
-  "16051" -> "16057" 
-  "16054" -> "16069" 
-  "16067" -> "16066" 
-  "16079" -> "16077" 
-  "16087" -> "16086" 
-  "16097" -> "16095" 
-  "16105" -> "16104" 
-  "16011" -> "16009" 
-  "16020" -> "16018" 
-  "16031" -> "16029" 
-  "16044" -> "16042" 
-  "16055" -> "16054" 
-  "16061" -> "16069" 
-  "16069" -> "16067" 
-  "16089" -> "16087" 
-  "16107" -> "16105" 
-  "16057" -> "16055" 
-  "16002" -> "16011" 
+digraph "ReleasePrimitiveArrayElementsOfWrongType" {  
+"16160" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>396</SUB>> ]
+"16409" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>464</SUB>> ]
+"16162" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>396</SUB>> ]
+"16170" [label = <(&lt;operator&gt;.assignment,array = env_-&gt;NewBooleanArray(10))<SUB>399</SUB>> ]
+"16177" [label = <(ASSERT_TRUE,ASSERT_TRUE(array != nullptr))<SUB>400</SUB>> ]
+"16183" [label = <(&lt;operator&gt;.assignment,* elements = env_-&gt;GetBooleanArrayElements(array, &amp;is_copy))<SUB>402</SUB>> ]
+"16192" [label = <(ASSERT_TRUE,ASSERT_TRUE(elements != nullptr))<SUB>403</SUB>> ]
+"16196" [label = <(ReleaseByteArrayElements,env_-&gt;ReleaseByteArrayElements(reinterpret_cast&lt;jbyteArray&gt;(array),\012 reinterpret_cast&lt;jbyte*&gt;(elements), 0))<SUB>404</SUB>> ]
+"16207" [label = <(Check,jni_abort_catcher.Check(\012          check_jni ? &quot;incompatible array type boolean[] expected byte[]&quot;\012 : &quot;attempt to release byte primitive array elements with an object of type boolean[]&quot;))<SUB>406</SUB>> ]
+"16215" [label = <(ReleaseShortArrayElements,env_-&gt;ReleaseShortArrayElements(reinterpret_cast&lt;jshortArray&gt;(array),\012 reinterpret_cast&lt;jshort*&gt;(elements), 0))<SUB>409</SUB>> ]
+"16226" [label = <(Check,jni_abort_catcher.Check(\012          check_jni ? &quot;incompatible array type boolean[] expected short[]&quot;\012 : &quot;attempt to release short primitive array elements with an object of type boolean[]&quot;))<SUB>411</SUB>> ]
+"16234" [label = <(ReleaseCharArrayElements,env_-&gt;ReleaseCharArrayElements(reinterpret_cast&lt;jcharArray&gt;(array),\012 reinterpret_cast&lt;jchar*&gt;(elements), 0))<SUB>414</SUB>> ]
+"16245" [label = <(Check,jni_abort_catcher.Check(\012          check_jni ? &quot;incompatible array type boolean[] expected char[]&quot;\012 : &quot;attempt to release char primitive array elements with an object of type boolean[]&quot;))<SUB>416</SUB>> ]
+"16253" [label = <(ReleaseIntArrayElements,env_-&gt;ReleaseIntArrayElements(reinterpret_cast&lt;jintArray&gt;(array),\012 reinterpret_cast&lt;jint*&gt;(elements), 0))<SUB>419</SUB>> ]
+"16264" [label = <(Check,jni_abort_catcher.Check(\012          check_jni ? &quot;incompatible array type boolean[] expected int[]&quot;\012 : &quot;attempt to release int primitive array elements with an object of type boolean[]&quot;))<SUB>421</SUB>> ]
+"16272" [label = <(ReleaseLongArrayElements,env_-&gt;ReleaseLongArrayElements(reinterpret_cast&lt;jlongArray&gt;(array),\012 reinterpret_cast&lt;jlong*&gt;(elements), 0))<SUB>424</SUB>> ]
+"16283" [label = <(Check,jni_abort_catcher.Check(\012          check_jni ? &quot;incompatible array type boolean[] expected long[]&quot;\012 : &quot;attempt to release long primitive array elements with an object of type boolean[]&quot;))<SUB>426</SUB>> ]
+"16291" [label = <(ReleaseFloatArrayElements,env_-&gt;ReleaseFloatArrayElements(reinterpret_cast&lt;jfloatArray&gt;(array),\012 reinterpret_cast&lt;jfloat*&gt;(elements), 0))<SUB>429</SUB>> ]
+"16302" [label = <(Check,jni_abort_catcher.Check(\012          check_jni ? &quot;incompatible array type boolean[] expected float[]&quot;\012 : &quot;attempt to release float primitive array elements with an object of type boolean[]&quot;))<SUB>431</SUB>> ]
+"16310" [label = <(ReleaseDoubleArrayElements,env_-&gt;ReleaseDoubleArrayElements(reinterpret_cast&lt;jdoubleArray&gt;(array),\012 reinterpret_cast&lt;jdouble*&gt;(elements), 0))<SUB>434</SUB>> ]
+"16321" [label = <(Check,jni_abort_catcher.Check(\012          check_jni ? &quot;incompatible array type boolean[] expected double[]&quot;\012 : &quot;attempt to release double primitive array elements with an object of type boolean[]&quot;))<SUB>436</SUB>> ]
+"16329" [label = <(ReleaseBooleanArrayElements,env_-&gt;ReleaseBooleanArrayElements(array, elements, 0))<SUB>441</SUB>> ]
+"16338" [label = <(&lt;operator&gt;.assignment,array = env_-&gt;NewByteArray(10))<SUB>444</SUB>> ]
+"16347" [label = <(&lt;operator&gt;.assignment,* elements = env_-&gt;GetByteArrayElements(array, &amp;is_copy))<SUB>446</SUB>> ]
+"16356" [label = <(ReleaseBooleanArrayElements,env_-&gt;ReleaseBooleanArrayElements(reinterpret_cast&lt;jbooleanArray&gt;(array),\012 reinterpret_cast&lt;jboolean*&gt;(elements), 0))<SUB>448</SUB>> ]
+"16367" [label = <(Check,jni_abort_catcher.Check(\012          check_jni ? &quot;incompatible array type byte[] expected boolean[]&quot;\012 : &quot;attempt to release boolean primitive array elements with an object of type byte[]&quot;))<SUB>450</SUB>> ]
+"16376" [label = <(&lt;operator&gt;.assignment,object = env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>453</SUB>> ]
+"16383" [label = <(ReleaseBooleanArrayElements,env_-&gt;ReleaseBooleanArrayElements(reinterpret_cast&lt;jbooleanArray&gt;(object),\012 reinterpret_cast&lt;jboolean*&gt;(elements), 0))<SUB>454</SUB>> ]
+"16394" [label = <(Check,jni_abort_catcher.Check(\012          check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;attempt to release boolean primitive array elements with an object of type &quot;\012 &quot;java.lang.String&quot;))<SUB>456</SUB>> ]
+"16402" [label = <(ReleaseByteArrayElements,env_-&gt;ReleaseByteArrayElements(array, elements, 0))<SUB>462</SUB>> ]
+"16411" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>464</SUB>> ]
+"16163" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>396</SUB>> ]
+"16172" [label = <(NewBooleanArray,env_-&gt;NewBooleanArray(10))<SUB>399</SUB>> ]
+"16178" [label = <(&lt;operator&gt;.notEquals,array != nullptr)<SUB>400</SUB>> ]
+"16185" [label = <(GetBooleanArrayElements,env_-&gt;GetBooleanArrayElements(array, &amp;is_copy))<SUB>402</SUB>> ]
+"16193" [label = <(&lt;operator&gt;.notEquals,elements != nullptr)<SUB>403</SUB>> ]
+"16197" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseByteArrayElements)<SUB>404</SUB>> ]
+"16200" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbyteArray&gt;(array))<SUB>404</SUB>> ]
+"16203" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbyte*&gt;(elements))<SUB>405</SUB>> ]
+"16208" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>406</SUB>> ]
+"16211" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected byte[]&quot;\012 : &quot;attempt to release byte primitive array elements with an object of type boolean[]&quot;)<SUB>407</SUB>> ]
+"16216" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseShortArrayElements)<SUB>409</SUB>> ]
+"16219" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jshortArray&gt;(array))<SUB>409</SUB>> ]
+"16222" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jshort*&gt;(elements))<SUB>410</SUB>> ]
+"16227" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>411</SUB>> ]
+"16230" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected short[]&quot;\012 : &quot;attempt to release short primitive array elements with an object of type boolean[]&quot;)<SUB>412</SUB>> ]
+"16235" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseCharArrayElements)<SUB>414</SUB>> ]
+"16238" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jcharArray&gt;(array))<SUB>414</SUB>> ]
+"16241" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jchar*&gt;(elements))<SUB>415</SUB>> ]
+"16246" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>416</SUB>> ]
+"16249" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected char[]&quot;\012 : &quot;attempt to release char primitive array elements with an object of type boolean[]&quot;)<SUB>417</SUB>> ]
+"16254" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseIntArrayElements)<SUB>419</SUB>> ]
+"16257" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jintArray&gt;(array))<SUB>419</SUB>> ]
+"16260" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jint*&gt;(elements))<SUB>420</SUB>> ]
+"16265" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>421</SUB>> ]
+"16268" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected int[]&quot;\012 : &quot;attempt to release int primitive array elements with an object of type boolean[]&quot;)<SUB>422</SUB>> ]
+"16273" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseLongArrayElements)<SUB>424</SUB>> ]
+"16276" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jlongArray&gt;(array))<SUB>424</SUB>> ]
+"16279" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jlong*&gt;(elements))<SUB>425</SUB>> ]
+"16284" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>426</SUB>> ]
+"16287" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected long[]&quot;\012 : &quot;attempt to release long primitive array elements with an object of type boolean[]&quot;)<SUB>427</SUB>> ]
+"16292" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseFloatArrayElements)<SUB>429</SUB>> ]
+"16295" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jfloatArray&gt;(array))<SUB>429</SUB>> ]
+"16298" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jfloat*&gt;(elements))<SUB>430</SUB>> ]
+"16303" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>431</SUB>> ]
+"16306" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected float[]&quot;\012 : &quot;attempt to release float primitive array elements with an object of type boolean[]&quot;)<SUB>432</SUB>> ]
+"16311" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseDoubleArrayElements)<SUB>434</SUB>> ]
+"16314" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jdoubleArray&gt;(array))<SUB>434</SUB>> ]
+"16317" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jdouble*&gt;(elements))<SUB>435</SUB>> ]
+"16322" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>436</SUB>> ]
+"16325" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected double[]&quot;\012 : &quot;attempt to release double primitive array elements with an object of type boolean[]&quot;)<SUB>437</SUB>> ]
+"16330" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseBooleanArrayElements)<SUB>441</SUB>> ]
+"16340" [label = <(NewByteArray,env_-&gt;NewByteArray(10))<SUB>444</SUB>> ]
+"16349" [label = <(GetByteArrayElements,env_-&gt;GetByteArrayElements(array, &amp;is_copy))<SUB>446</SUB>> ]
+"16357" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseBooleanArrayElements)<SUB>448</SUB>> ]
+"16360" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbooleanArray&gt;(array))<SUB>448</SUB>> ]
+"16363" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jboolean*&gt;(elements))<SUB>449</SUB>> ]
+"16368" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>450</SUB>> ]
+"16371" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type byte[] expected boolean[]&quot;\012 : &quot;attempt to release boolean primitive array elements with an object of type byte[]&quot;)<SUB>451</SUB>> ]
+"16378" [label = <(NewStringUTF,env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>453</SUB>> ]
+"16384" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseBooleanArrayElements)<SUB>454</SUB>> ]
+"16387" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbooleanArray&gt;(object))<SUB>454</SUB>> ]
+"16390" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jboolean*&gt;(elements))<SUB>455</SUB>> ]
+"16395" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>456</SUB>> ]
+"16398" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;attempt to release boolean primitive array elements with an object of type &quot;\012 &quot;java.lang.String&quot;)<SUB>457</SUB>> ]
+"16403" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseByteArrayElements)<SUB>462</SUB>> ]
+"16412" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>464</SUB>> ]
+"16165" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>396</SUB>> ]
+"16173" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewBooleanArray)<SUB>399</SUB>> ]
+"16186" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetBooleanArrayElements)<SUB>402</SUB>> ]
+"16190" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>402</SUB>> ]
+"16199" [label = <(FIELD_IDENTIFIER,ReleaseByteArrayElements,ReleaseByteArrayElements)<SUB>404</SUB>> ]
+"16201" [label = <(UNKNOWN,jbyteArray,jbyteArray)<SUB>404</SUB>> ]
+"16204" [label = <(UNKNOWN,jbyte*,jbyte*)<SUB>405</SUB>> ]
+"16210" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>406</SUB>> ]
+"16218" [label = <(FIELD_IDENTIFIER,ReleaseShortArrayElements,ReleaseShortArrayElements)<SUB>409</SUB>> ]
+"16220" [label = <(UNKNOWN,jshortArray,jshortArray)<SUB>409</SUB>> ]
+"16223" [label = <(UNKNOWN,jshort*,jshort*)<SUB>410</SUB>> ]
+"16229" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>411</SUB>> ]
+"16237" [label = <(FIELD_IDENTIFIER,ReleaseCharArrayElements,ReleaseCharArrayElements)<SUB>414</SUB>> ]
+"16239" [label = <(UNKNOWN,jcharArray,jcharArray)<SUB>414</SUB>> ]
+"16242" [label = <(UNKNOWN,jchar*,jchar*)<SUB>415</SUB>> ]
+"16248" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>416</SUB>> ]
+"16256" [label = <(FIELD_IDENTIFIER,ReleaseIntArrayElements,ReleaseIntArrayElements)<SUB>419</SUB>> ]
+"16258" [label = <(UNKNOWN,jintArray,jintArray)<SUB>419</SUB>> ]
+"16261" [label = <(UNKNOWN,jint*,jint*)<SUB>420</SUB>> ]
+"16267" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>421</SUB>> ]
+"16275" [label = <(FIELD_IDENTIFIER,ReleaseLongArrayElements,ReleaseLongArrayElements)<SUB>424</SUB>> ]
+"16277" [label = <(UNKNOWN,jlongArray,jlongArray)<SUB>424</SUB>> ]
+"16280" [label = <(UNKNOWN,jlong*,jlong*)<SUB>425</SUB>> ]
+"16286" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>426</SUB>> ]
+"16294" [label = <(FIELD_IDENTIFIER,ReleaseFloatArrayElements,ReleaseFloatArrayElements)<SUB>429</SUB>> ]
+"16296" [label = <(UNKNOWN,jfloatArray,jfloatArray)<SUB>429</SUB>> ]
+"16299" [label = <(UNKNOWN,jfloat*,jfloat*)<SUB>430</SUB>> ]
+"16305" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>431</SUB>> ]
+"16313" [label = <(FIELD_IDENTIFIER,ReleaseDoubleArrayElements,ReleaseDoubleArrayElements)<SUB>434</SUB>> ]
+"16315" [label = <(UNKNOWN,jdoubleArray,jdoubleArray)<SUB>434</SUB>> ]
+"16318" [label = <(UNKNOWN,jdouble*,jdouble*)<SUB>435</SUB>> ]
+"16324" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>436</SUB>> ]
+"16332" [label = <(FIELD_IDENTIFIER,ReleaseBooleanArrayElements,ReleaseBooleanArrayElements)<SUB>441</SUB>> ]
+"16341" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewByteArray)<SUB>444</SUB>> ]
+"16350" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetByteArrayElements)<SUB>446</SUB>> ]
+"16354" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>446</SUB>> ]
+"16359" [label = <(FIELD_IDENTIFIER,ReleaseBooleanArrayElements,ReleaseBooleanArrayElements)<SUB>448</SUB>> ]
+"16361" [label = <(UNKNOWN,jbooleanArray,jbooleanArray)<SUB>448</SUB>> ]
+"16364" [label = <(UNKNOWN,jboolean*,jboolean*)<SUB>449</SUB>> ]
+"16370" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>450</SUB>> ]
+"16379" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewStringUTF)<SUB>453</SUB>> ]
+"16386" [label = <(FIELD_IDENTIFIER,ReleaseBooleanArrayElements,ReleaseBooleanArrayElements)<SUB>454</SUB>> ]
+"16388" [label = <(UNKNOWN,jbooleanArray,jbooleanArray)<SUB>454</SUB>> ]
+"16391" [label = <(UNKNOWN,jboolean*,jboolean*)<SUB>455</SUB>> ]
+"16397" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>456</SUB>> ]
+"16405" [label = <(FIELD_IDENTIFIER,ReleaseByteArrayElements,ReleaseByteArrayElements)<SUB>462</SUB>> ]
+"16414" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>464</SUB>> ]
+"16175" [label = <(FIELD_IDENTIFIER,NewBooleanArray,NewBooleanArray)<SUB>399</SUB>> ]
+"16188" [label = <(FIELD_IDENTIFIER,GetBooleanArrayElements,GetBooleanArrayElements)<SUB>402</SUB>> ]
+"16343" [label = <(FIELD_IDENTIFIER,NewByteArray,NewByteArray)<SUB>444</SUB>> ]
+"16352" [label = <(FIELD_IDENTIFIER,GetByteArrayElements,GetByteArrayElements)<SUB>446</SUB>> ]
+"16381" [label = <(FIELD_IDENTIFIER,NewStringUTF,NewStringUTF)<SUB>453</SUB>> ]
+"16156" [label = <(METHOD,ReleasePrimitiveArrayElementsOfWrongType)<SUB>395</SUB>> ]
+"16416" [label = <(METHOD_RETURN,void)<SUB>395</SUB>> ]
+  "16160" -> "16175" 
+  "16409" -> "16416" 
+  "16162" -> "16160" 
+  "16170" -> "16178" 
+  "16177" -> "16188" 
+  "16183" -> "16193" 
+  "16192" -> "16199" 
+  "16196" -> "16210" 
+  "16207" -> "16218" 
+  "16215" -> "16229" 
+  "16226" -> "16237" 
+  "16234" -> "16248" 
+  "16245" -> "16256" 
+  "16253" -> "16267" 
+  "16264" -> "16275" 
+  "16272" -> "16286" 
+  "16283" -> "16294" 
+  "16291" -> "16305" 
+  "16302" -> "16313" 
+  "16310" -> "16324" 
+  "16321" -> "16332" 
+  "16329" -> "16343" 
+  "16338" -> "16352" 
+  "16347" -> "16359" 
+  "16356" -> "16370" 
+  "16367" -> "16381" 
+  "16376" -> "16386" 
+  "16383" -> "16397" 
+  "16394" -> "16405" 
+  "16402" -> "16414" 
+  "16411" -> "16409" 
+  "16163" -> "16162" 
+  "16172" -> "16170" 
+  "16178" -> "16177" 
+  "16185" -> "16183" 
+  "16193" -> "16192" 
+  "16197" -> "16201" 
+  "16200" -> "16204" 
+  "16203" -> "16196" 
+  "16208" -> "16211" 
+  "16211" -> "16207" 
+  "16216" -> "16220" 
+  "16219" -> "16223" 
+  "16222" -> "16215" 
+  "16227" -> "16230" 
+  "16230" -> "16226" 
+  "16235" -> "16239" 
+  "16238" -> "16242" 
+  "16241" -> "16234" 
+  "16246" -> "16249" 
+  "16249" -> "16245" 
+  "16254" -> "16258" 
+  "16257" -> "16261" 
+  "16260" -> "16253" 
+  "16265" -> "16268" 
+  "16268" -> "16264" 
+  "16273" -> "16277" 
+  "16276" -> "16280" 
+  "16279" -> "16272" 
+  "16284" -> "16287" 
+  "16287" -> "16283" 
+  "16292" -> "16296" 
+  "16295" -> "16299" 
+  "16298" -> "16291" 
+  "16303" -> "16306" 
+  "16306" -> "16302" 
+  "16311" -> "16315" 
+  "16314" -> "16318" 
+  "16317" -> "16310" 
+  "16322" -> "16325" 
+  "16325" -> "16321" 
+  "16330" -> "16329" 
+  "16340" -> "16338" 
+  "16349" -> "16347" 
+  "16357" -> "16361" 
+  "16360" -> "16364" 
+  "16363" -> "16356" 
+  "16368" -> "16371" 
+  "16371" -> "16367" 
+  "16378" -> "16376" 
+  "16384" -> "16388" 
+  "16387" -> "16391" 
+  "16390" -> "16383" 
+  "16395" -> "16398" 
+  "16398" -> "16394" 
+  "16403" -> "16402" 
+  "16412" -> "16411" 
+  "16165" -> "16163" 
+  "16173" -> "16172" 
+  "16186" -> "16190" 
+  "16190" -> "16185" 
+  "16199" -> "16197" 
+  "16201" -> "16200" 
+  "16204" -> "16203" 
+  "16210" -> "16208" 
+  "16218" -> "16216" 
+  "16220" -> "16219" 
+  "16223" -> "16222" 
+  "16229" -> "16227" 
+  "16237" -> "16235" 
+  "16239" -> "16238" 
+  "16242" -> "16241" 
+  "16248" -> "16246" 
+  "16256" -> "16254" 
+  "16258" -> "16257" 
+  "16261" -> "16260" 
+  "16267" -> "16265" 
+  "16275" -> "16273" 
+  "16277" -> "16276" 
+  "16280" -> "16279" 
+  "16286" -> "16284" 
+  "16294" -> "16292" 
+  "16296" -> "16295" 
+  "16299" -> "16298" 
+  "16305" -> "16303" 
+  "16313" -> "16311" 
+  "16315" -> "16314" 
+  "16318" -> "16317" 
+  "16324" -> "16322" 
+  "16332" -> "16330" 
+  "16341" -> "16340" 
+  "16350" -> "16354" 
+  "16354" -> "16349" 
+  "16359" -> "16357" 
+  "16361" -> "16360" 
+  "16364" -> "16363" 
+  "16370" -> "16368" 
+  "16379" -> "16378" 
+  "16386" -> "16384" 
+  "16388" -> "16387" 
+  "16391" -> "16390" 
+  "16397" -> "16395" 
+  "16405" -> "16403" 
+  "16414" -> "16412" 
+  "16175" -> "16173" 
+  "16188" -> "16186" 
+  "16343" -> "16341" 
+  "16352" -> "16350" 
+  "16381" -> "16379" 
+  "16156" -> "16165" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/294-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/294-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/294-cfg.dot	2023-06-07 19:35:28.407384333 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/294-cfg.dot	2023-06-07 19:35:34.927383763 +0330
@@ -1,96 +1,69 @@
-digraph "GetFromReflectedMethod_ToReflectedMethodBadArgumentTest" {  
-"16115" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>293</SUB>> ]
-"16124" [label = <(&lt;operator&gt;.assignment,c = env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>296</SUB>> ]
-"16131" [label = <(ASSERT_NE,ASSERT_NE(c, nullptr))<SUB>297</SUB>> ]
-"16135" [label = <(&lt;operator&gt;.assignment,mid = env_-&gt;GetMethodID(c, &quot;&lt;init&gt;&quot;, &quot;()V&quot;))<SUB>298</SUB>> ]
-"16144" [label = <(ASSERT_NE,ASSERT_NE(mid, nullptr))<SUB>299</SUB>> ]
-"16148" [label = <(&lt;operator&gt;.assignment,method = env_-&gt;ToReflectedMethod(nullptr, mid, JNI_FALSE))<SUB>302</SUB>> ]
-"16173" [label = <(&lt;operator&gt;.assignment,method = env_-&gt;ToReflectedMethod(c, nullptr, JNI_FALSE))<SUB>310</SUB>> ]
-"16182" [label = <(EXPECT_EQ,EXPECT_EQ(method, nullptr))<SUB>311</SUB>> ]
-"16185" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;jmethodID was NULL&quot;\012 : &quot;mid == null&quot;))<SUB>312</SUB>> ]
-"16193" [label = <(&lt;operator&gt;.assignment,mid = env_-&gt;FromReflectedMethod(method))<SUB>314</SUB>> ]
-"16200" [label = <(ASSERT_EQ,ASSERT_EQ(mid, nullptr))<SUB>315</SUB>> ]
-"16203" [label = <(Check,check_jni_abort_catcher.Check(check_jni ? &quot;expected non-null method&quot; : &quot;jlr_method == null&quot;))<SUB>316</SUB>> ]
-"16211" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>318</SUB>> ]
-"16117" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>293</SUB>> ]
-"16126" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>296</SUB>> ]
-"16137" [label = <(GetMethodID,env_-&gt;GetMethodID(c, &quot;&lt;init&gt;&quot;, &quot;()V&quot;))<SUB>298</SUB>> ]
-"16150" [label = <(ToReflectedMethod,env_-&gt;ToReflectedMethod(nullptr, mid, JNI_FALSE))<SUB>302</SUB>> ]
-"16175" [label = <(ToReflectedMethod,env_-&gt;ToReflectedMethod(c, nullptr, JNI_FALSE))<SUB>310</SUB>> ]
-"16186" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>312</SUB>> ]
-"16189" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;jmethodID was NULL&quot;\012 : &quot;mid == null&quot;)<SUB>312</SUB>> ]
-"16195" [label = <(FromReflectedMethod,env_-&gt;FromReflectedMethod(method))<SUB>314</SUB>> ]
-"16204" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>316</SUB>> ]
-"16207" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;expected non-null method&quot; : &quot;jlr_method == null&quot;)<SUB>316</SUB>> ]
-"16213" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>318</SUB>> ]
-"16118" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>293</SUB>> ]
-"16127" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>296</SUB>> ]
-"16138" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetMethodID)<SUB>298</SUB>> ]
-"16151" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ToReflectedMethod)<SUB>302</SUB>> ]
-"16160" [label = <(EXPECT_EQ,EXPECT_EQ(method, nullptr))<SUB>304</SUB>> ]
-"16163" [label = <(Check,check_jni_abort_catcher.Check(&quot;ToReflectedMethod received NULL jclass&quot;))<SUB>305</SUB>> ]
-"16176" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ToReflectedMethod)<SUB>310</SUB>> ]
-"16188" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>312</SUB>> ]
-"16196" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FromReflectedMethod)<SUB>314</SUB>> ]
-"16206" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>316</SUB>> ]
-"16214" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>318</SUB>> ]
-"16120" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>293</SUB>> ]
-"16129" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>296</SUB>> ]
-"16140" [label = <(FIELD_IDENTIFIER,GetMethodID,GetMethodID)<SUB>298</SUB>> ]
-"16153" [label = <(FIELD_IDENTIFIER,ToReflectedMethod,ToReflectedMethod)<SUB>302</SUB>> ]
-"16164" [label = <(&lt;operator&gt;.fieldAccess,check_jni_abort_catcher.Check)<SUB>305</SUB>> ]
-"16170" [label = <(EXPECT_NE,EXPECT_NE(method, nullptr))<SUB>307</SUB>> ]
-"16178" [label = <(FIELD_IDENTIFIER,ToReflectedMethod,ToReflectedMethod)<SUB>310</SUB>> ]
-"16198" [label = <(FIELD_IDENTIFIER,FromReflectedMethod,FromReflectedMethod)<SUB>314</SUB>> ]
-"16216" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>318</SUB>> ]
-"16166" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>305</SUB>> ]
-"16111" [label = <(METHOD,GetFromReflectedMethod_ToReflectedMethodBadArgumentTest)<SUB>292</SUB>> ]
-"16218" [label = <(METHOD_RETURN,void)<SUB>292</SUB>> ]
-  "16115" -> "16129" 
-  "16124" -> "16131" 
-  "16131" -> "16140" 
-  "16135" -> "16144" 
-  "16144" -> "16153" 
-  "16148" -> "16160" 
-  "16148" -> "16170" 
-  "16173" -> "16182" 
-  "16182" -> "16188" 
-  "16185" -> "16198" 
-  "16193" -> "16200" 
-  "16200" -> "16206" 
-  "16203" -> "16216" 
-  "16211" -> "16218" 
-  "16117" -> "16115" 
-  "16126" -> "16124" 
-  "16137" -> "16135" 
-  "16150" -> "16148" 
-  "16175" -> "16173" 
-  "16186" -> "16189" 
-  "16189" -> "16185" 
-  "16195" -> "16193" 
-  "16204" -> "16207" 
-  "16207" -> "16203" 
-  "16213" -> "16211" 
-  "16118" -> "16117" 
-  "16127" -> "16126" 
-  "16138" -> "16137" 
-  "16151" -> "16150" 
-  "16160" -> "16166" 
-  "16163" -> "16178" 
-  "16176" -> "16175" 
-  "16188" -> "16186" 
-  "16196" -> "16195" 
-  "16206" -> "16204" 
-  "16214" -> "16213" 
-  "16120" -> "16118" 
-  "16129" -> "16127" 
-  "16140" -> "16138" 
-  "16153" -> "16151" 
-  "16164" -> "16163" 
-  "16170" -> "16178" 
-  "16178" -> "16176" 
-  "16198" -> "16196" 
-  "16216" -> "16214" 
-  "16166" -> "16164" 
-  "16111" -> "16120" 
+digraph "GetReleasePrimitiveArrayCriticalOfWrongType" {  
+"16422" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>468</SUB>> ]
+"16431" [label = <(&lt;operator&gt;.assignment,object = env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>471</SUB>> ]
+"16440" [label = <(&lt;operator&gt;.assignment,* elements = env_-&gt;GetPrimitiveArrayCritical(reinterpret_cast&lt;jarray&gt;(object), &amp;is_copy))<SUB>473</SUB>> ]
+"16451" [label = <(Check,jni_abort_catcher.Check(check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;expected primitive array, given java.lang.String&quot;))<SUB>474</SUB>> ]
+"16459" [label = <(ReleasePrimitiveArrayCritical,env_-&gt;ReleasePrimitiveArrayCritical(reinterpret_cast&lt;jarray&gt;(object), elements, 0))<SUB>476</SUB>> ]
+"16468" [label = <(Check,jni_abort_catcher.Check(check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;expected primitive array, given java.lang.String&quot;))<SUB>477</SUB>> ]
+"16476" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>480</SUB>> ]
+"16424" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>468</SUB>> ]
+"16433" [label = <(NewStringUTF,env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>471</SUB>> ]
+"16442" [label = <(GetPrimitiveArrayCritical,env_-&gt;GetPrimitiveArrayCritical(reinterpret_cast&lt;jarray&gt;(object), &amp;is_copy))<SUB>473</SUB>> ]
+"16452" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>474</SUB>> ]
+"16455" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;expected primitive array, given java.lang.String&quot;)<SUB>474</SUB>> ]
+"16460" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleasePrimitiveArrayCritical)<SUB>476</SUB>> ]
+"16463" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jarray&gt;(object))<SUB>476</SUB>> ]
+"16469" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>477</SUB>> ]
+"16472" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;expected primitive array, given java.lang.String&quot;)<SUB>477</SUB>> ]
+"16478" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>480</SUB>> ]
+"16425" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>468</SUB>> ]
+"16434" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewStringUTF)<SUB>471</SUB>> ]
+"16443" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetPrimitiveArrayCritical)<SUB>473</SUB>> ]
+"16446" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jarray&gt;(object))<SUB>473</SUB>> ]
+"16449" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>473</SUB>> ]
+"16454" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>474</SUB>> ]
+"16462" [label = <(FIELD_IDENTIFIER,ReleasePrimitiveArrayCritical,ReleasePrimitiveArrayCritical)<SUB>476</SUB>> ]
+"16464" [label = <(UNKNOWN,jarray,jarray)<SUB>476</SUB>> ]
+"16471" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>477</SUB>> ]
+"16479" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>480</SUB>> ]
+"16427" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>468</SUB>> ]
+"16436" [label = <(FIELD_IDENTIFIER,NewStringUTF,NewStringUTF)<SUB>471</SUB>> ]
+"16445" [label = <(FIELD_IDENTIFIER,GetPrimitiveArrayCritical,GetPrimitiveArrayCritical)<SUB>473</SUB>> ]
+"16447" [label = <(UNKNOWN,jarray,jarray)<SUB>473</SUB>> ]
+"16481" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>480</SUB>> ]
+"16418" [label = <(METHOD,GetReleasePrimitiveArrayCriticalOfWrongType)<SUB>467</SUB>> ]
+"16483" [label = <(METHOD_RETURN,void)<SUB>467</SUB>> ]
+  "16422" -> "16436" 
+  "16431" -> "16445" 
+  "16440" -> "16454" 
+  "16451" -> "16462" 
+  "16459" -> "16471" 
+  "16468" -> "16481" 
+  "16476" -> "16483" 
+  "16424" -> "16422" 
+  "16433" -> "16431" 
+  "16442" -> "16440" 
+  "16452" -> "16455" 
+  "16455" -> "16451" 
+  "16460" -> "16464" 
+  "16463" -> "16459" 
+  "16469" -> "16472" 
+  "16472" -> "16468" 
+  "16478" -> "16476" 
+  "16425" -> "16424" 
+  "16434" -> "16433" 
+  "16443" -> "16447" 
+  "16446" -> "16449" 
+  "16449" -> "16442" 
+  "16454" -> "16452" 
+  "16462" -> "16460" 
+  "16464" -> "16463" 
+  "16471" -> "16469" 
+  "16479" -> "16478" 
+  "16427" -> "16425" 
+  "16436" -> "16434" 
+  "16445" -> "16443" 
+  "16447" -> "16446" 
+  "16481" -> "16479" 
+  "16418" -> "16427" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/295-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/295-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/295-cfg.dot	2023-06-07 19:35:28.407384333 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/295-cfg.dot	2023-06-07 19:35:34.927383763 +0330
@@ -1,79 +1,249 @@
-digraph "RegisterAndUnregisterNativesBadArguments" {  
-"16225" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>323</SUB>> ]
-"16255" [label = <(&lt;operator&gt;.assignment,jlobject = env_-&gt;FindClass(&quot;java/lang/Object&quot;))<SUB>333</SUB>> ]
-"16262" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;RegisterNatives(jlobject, nullptr, 1), JNI_ERR))<SUB>334</SUB>> ]
-"16271" [label = <(Check,check_jni_abort_catcher-&gt;Check(&quot;methods == null&quot;))<SUB>335</SUB>> ]
-"16276" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;UnregisterNatives(nullptr), JNI_ERR))<SUB>338</SUB>> ]
-"16283" [label = <(Check,check_jni_abort_catcher-&gt;Check(check_jni ? &quot;UnregisterNatives received NULL jclass&quot;\012 : &quot;java_class == null&quot;))<SUB>339</SUB>> ]
-"16291" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>342</SUB>> ]
-"16227" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>323</SUB>> ]
-"16234" [label = <(&lt;operator&gt;.assignment,methods[] = { })<SUB>326</SUB>> ]
-"16237" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;RegisterNatives(nullptr, methods, 0), JNI_ERR))<SUB>327</SUB>> ]
-"16246" [label = <(Check,check_jni_abort_catcher-&gt;Check(check_jni ? &quot;RegisterNatives received NULL jclass&quot;\012 : &quot;java_class == null&quot;))<SUB>328</SUB>> ]
-"16257" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/Object&quot;))<SUB>333</SUB>> ]
-"16263" [label = <(RegisterNatives,env_-&gt;RegisterNatives(jlobject, nullptr, 1))<SUB>334</SUB>> ]
-"16272" [label = <(&lt;operator&gt;.indirectFieldAccess,check_jni_abort_catcher-&gt;Check)<SUB>335</SUB>> ]
-"16277" [label = <(UnregisterNatives,env_-&gt;UnregisterNatives(nullptr))<SUB>338</SUB>> ]
-"16284" [label = <(&lt;operator&gt;.indirectFieldAccess,check_jni_abort_catcher-&gt;Check)<SUB>339</SUB>> ]
-"16287" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;UnregisterNatives received NULL jclass&quot;\012 : &quot;java_class == null&quot;)<SUB>339</SUB>> ]
-"16293" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>342</SUB>> ]
-"16228" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>323</SUB>> ]
-"16236" [label = <(&lt;operator&gt;.arrayInitializer,{ })<SUB>326</SUB>> ]
-"16238" [label = <(RegisterNatives,env_-&gt;RegisterNatives(nullptr, methods, 0))<SUB>327</SUB>> ]
-"16247" [label = <(&lt;operator&gt;.indirectFieldAccess,check_jni_abort_catcher-&gt;Check)<SUB>328</SUB>> ]
-"16250" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;RegisterNatives received NULL jclass&quot;\012 : &quot;java_class == null&quot;)<SUB>328</SUB>> ]
-"16258" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>333</SUB>> ]
-"16264" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;RegisterNatives)<SUB>334</SUB>> ]
-"16274" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>335</SUB>> ]
-"16278" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;UnregisterNatives)<SUB>338</SUB>> ]
-"16286" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>339</SUB>> ]
-"16294" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>342</SUB>> ]
-"16230" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>323</SUB>> ]
-"16239" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;RegisterNatives)<SUB>327</SUB>> ]
-"16249" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>328</SUB>> ]
-"16260" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>333</SUB>> ]
-"16266" [label = <(FIELD_IDENTIFIER,RegisterNatives,RegisterNatives)<SUB>334</SUB>> ]
-"16280" [label = <(FIELD_IDENTIFIER,UnregisterNatives,UnregisterNatives)<SUB>338</SUB>> ]
-"16296" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>342</SUB>> ]
-"16241" [label = <(FIELD_IDENTIFIER,RegisterNatives,RegisterNatives)<SUB>327</SUB>> ]
-"16220" [label = <(METHOD,RegisterAndUnregisterNativesBadArguments)<SUB>321</SUB>> ]
-"16298" [label = <(METHOD_RETURN,void)<SUB>321</SUB>> ]
-  "16225" -> "16236" 
-  "16255" -> "16266" 
-  "16262" -> "16274" 
-  "16271" -> "16280" 
-  "16276" -> "16286" 
-  "16283" -> "16296" 
-  "16291" -> "16298" 
-  "16227" -> "16225" 
-  "16234" -> "16241" 
-  "16237" -> "16249" 
-  "16246" -> "16260" 
-  "16257" -> "16255" 
-  "16263" -> "16262" 
-  "16272" -> "16271" 
-  "16277" -> "16276" 
-  "16284" -> "16287" 
-  "16287" -> "16283" 
-  "16293" -> "16291" 
-  "16228" -> "16227" 
-  "16236" -> "16234" 
-  "16238" -> "16237" 
-  "16247" -> "16250" 
-  "16250" -> "16246" 
-  "16258" -> "16257" 
-  "16264" -> "16263" 
-  "16274" -> "16272" 
-  "16278" -> "16277" 
-  "16286" -> "16284" 
-  "16294" -> "16293" 
-  "16230" -> "16228" 
-  "16239" -> "16238" 
-  "16249" -> "16247" 
-  "16260" -> "16258" 
-  "16266" -> "16264" 
-  "16280" -> "16278" 
-  "16296" -> "16294" 
-  "16241" -> "16239" 
-  "16220" -> "16230" 
+digraph "GetPrimitiveArrayRegionElementsOfWrongType" {  
+"16489" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>484</SUB>> ]
+"16498" [label = <(&lt;operator&gt;.assignment,kLength = 10)<SUB>486</SUB>> ]
+"16502" [label = <(&lt;operator&gt;.assignment,array = env_-&gt;NewBooleanArray(kLength))<SUB>487</SUB>> ]
+"16509" [label = <(ASSERT_TRUE,ASSERT_TRUE(array != nullptr))<SUB>488</SUB>> ]
+"16514" [label = <(GetByteArrayRegion,env_-&gt;GetByteArrayRegion(reinterpret_cast&lt;jbyteArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jbyte*&gt;(elements)))<SUB>490</SUB>> ]
+"16526" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected byte[]&quot;\012 : &quot;attempt to get region of byte primitive array elements with an object of type boolean[]&quot;))<SUB>492</SUB>> ]
+"16534" [label = <(GetShortArrayRegion,env_-&gt;GetShortArrayRegion(reinterpret_cast&lt;jshortArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jshort*&gt;(elements)))<SUB>495</SUB>> ]
+"16546" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected short[]&quot;\012 : &quot;attempt to get region of short primitive array elements with an object of type boolean[]&quot;))<SUB>497</SUB>> ]
+"16554" [label = <(GetCharArrayRegion,env_-&gt;GetCharArrayRegion(reinterpret_cast&lt;jcharArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jchar*&gt;(elements)))<SUB>500</SUB>> ]
+"16566" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected char[]&quot;\012 : &quot;attempt to get region of char primitive array elements with an object of type boolean[]&quot;))<SUB>502</SUB>> ]
+"16574" [label = <(GetIntArrayRegion,env_-&gt;GetIntArrayRegion(reinterpret_cast&lt;jintArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jint*&gt;(elements)))<SUB>505</SUB>> ]
+"16586" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected int[]&quot;\012 : &quot;attempt to get region of int primitive array elements with an object of type boolean[]&quot;))<SUB>507</SUB>> ]
+"16594" [label = <(GetLongArrayRegion,env_-&gt;GetLongArrayRegion(reinterpret_cast&lt;jlongArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jlong*&gt;(elements)))<SUB>510</SUB>> ]
+"16606" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected long[]&quot;\012 : &quot;attempt to get region of long primitive array elements with an object of type boolean[]&quot;))<SUB>512</SUB>> ]
+"16614" [label = <(GetFloatArrayRegion,env_-&gt;GetFloatArrayRegion(reinterpret_cast&lt;jfloatArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jfloat*&gt;(elements)))<SUB>515</SUB>> ]
+"16626" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected float[]&quot;\012 : &quot;attempt to get region of float primitive array elements with an object of type boolean[]&quot;))<SUB>517</SUB>> ]
+"16634" [label = <(GetDoubleArrayRegion,env_-&gt;GetDoubleArrayRegion(reinterpret_cast&lt;jdoubleArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jdouble*&gt;(elements)))<SUB>520</SUB>> ]
+"16646" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected double[]&quot;\012 : &quot;attempt to get region of double primitive array elements with an object of type boolean[]&quot;))<SUB>522</SUB>> ]
+"16655" [label = <(&lt;operator&gt;.assignment,array2 = env_-&gt;NewByteArray(10))<SUB>525</SUB>> ]
+"16662" [label = <(GetBooleanArrayRegion,env_-&gt;GetBooleanArrayRegion(reinterpret_cast&lt;jbooleanArray&gt;(array2), 0, kLength,\012 reinterpret_cast&lt;jboolean*&gt;(elements)))<SUB>526</SUB>> ]
+"16674" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type byte[] expected boolean[]&quot;\012 : &quot;attempt to get region of boolean primitive array elements with an object of type byte[]&quot;))<SUB>528</SUB>> ]
+"16683" [label = <(&lt;operator&gt;.assignment,object = env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>531</SUB>> ]
+"16690" [label = <(GetBooleanArrayRegion,env_-&gt;GetBooleanArrayRegion(reinterpret_cast&lt;jbooleanArray&gt;(object), 0, kLength,\012 reinterpret_cast&lt;jboolean*&gt;(elements)))<SUB>532</SUB>> ]
+"16702" [label = <(Check,jni_abort_catcher.Check(check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;attempt to get region of boolean primitive array elements with an object of type &quot;\012 &quot;java.lang.String&quot;))<SUB>534</SUB>> ]
+"16710" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>538</SUB>> ]
+"16491" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>484</SUB>> ]
+"16504" [label = <(NewBooleanArray,env_-&gt;NewBooleanArray(kLength))<SUB>487</SUB>> ]
+"16510" [label = <(&lt;operator&gt;.notEquals,array != nullptr)<SUB>488</SUB>> ]
+"16515" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetByteArrayRegion)<SUB>490</SUB>> ]
+"16518" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbyteArray&gt;(array))<SUB>490</SUB>> ]
+"16523" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbyte*&gt;(elements))<SUB>491</SUB>> ]
+"16527" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>492</SUB>> ]
+"16530" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected byte[]&quot;\012 : &quot;attempt to get region of byte primitive array elements with an object of type boolean[]&quot;)<SUB>493</SUB>> ]
+"16535" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetShortArrayRegion)<SUB>495</SUB>> ]
+"16538" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jshortArray&gt;(array))<SUB>495</SUB>> ]
+"16543" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jshort*&gt;(elements))<SUB>496</SUB>> ]
+"16547" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>497</SUB>> ]
+"16550" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected short[]&quot;\012 : &quot;attempt to get region of short primitive array elements with an object of type boolean[]&quot;)<SUB>498</SUB>> ]
+"16555" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetCharArrayRegion)<SUB>500</SUB>> ]
+"16558" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jcharArray&gt;(array))<SUB>500</SUB>> ]
+"16563" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jchar*&gt;(elements))<SUB>501</SUB>> ]
+"16567" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>502</SUB>> ]
+"16570" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected char[]&quot;\012 : &quot;attempt to get region of char primitive array elements with an object of type boolean[]&quot;)<SUB>503</SUB>> ]
+"16575" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetIntArrayRegion)<SUB>505</SUB>> ]
+"16578" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jintArray&gt;(array))<SUB>505</SUB>> ]
+"16583" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jint*&gt;(elements))<SUB>506</SUB>> ]
+"16587" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>507</SUB>> ]
+"16590" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected int[]&quot;\012 : &quot;attempt to get region of int primitive array elements with an object of type boolean[]&quot;)<SUB>508</SUB>> ]
+"16595" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetLongArrayRegion)<SUB>510</SUB>> ]
+"16598" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jlongArray&gt;(array))<SUB>510</SUB>> ]
+"16603" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jlong*&gt;(elements))<SUB>511</SUB>> ]
+"16607" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>512</SUB>> ]
+"16610" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected long[]&quot;\012 : &quot;attempt to get region of long primitive array elements with an object of type boolean[]&quot;)<SUB>513</SUB>> ]
+"16615" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetFloatArrayRegion)<SUB>515</SUB>> ]
+"16618" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jfloatArray&gt;(array))<SUB>515</SUB>> ]
+"16623" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jfloat*&gt;(elements))<SUB>516</SUB>> ]
+"16627" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>517</SUB>> ]
+"16630" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected float[]&quot;\012 : &quot;attempt to get region of float primitive array elements with an object of type boolean[]&quot;)<SUB>518</SUB>> ]
+"16635" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetDoubleArrayRegion)<SUB>520</SUB>> ]
+"16638" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jdoubleArray&gt;(array))<SUB>520</SUB>> ]
+"16643" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jdouble*&gt;(elements))<SUB>521</SUB>> ]
+"16647" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>522</SUB>> ]
+"16650" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected double[]&quot;\012 : &quot;attempt to get region of double primitive array elements with an object of type boolean[]&quot;)<SUB>523</SUB>> ]
+"16657" [label = <(NewByteArray,env_-&gt;NewByteArray(10))<SUB>525</SUB>> ]
+"16663" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetBooleanArrayRegion)<SUB>526</SUB>> ]
+"16666" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbooleanArray&gt;(array2))<SUB>526</SUB>> ]
+"16671" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jboolean*&gt;(elements))<SUB>527</SUB>> ]
+"16675" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>528</SUB>> ]
+"16678" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type byte[] expected boolean[]&quot;\012 : &quot;attempt to get region of boolean primitive array elements with an object of type byte[]&quot;)<SUB>529</SUB>> ]
+"16685" [label = <(NewStringUTF,env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>531</SUB>> ]
+"16691" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetBooleanArrayRegion)<SUB>532</SUB>> ]
+"16694" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbooleanArray&gt;(object))<SUB>532</SUB>> ]
+"16699" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jboolean*&gt;(elements))<SUB>533</SUB>> ]
+"16703" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>534</SUB>> ]
+"16706" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;attempt to get region of boolean primitive array elements with an object of type &quot;\012 &quot;java.lang.String&quot;)<SUB>534</SUB>> ]
+"16712" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>538</SUB>> ]
+"16492" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>484</SUB>> ]
+"16505" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewBooleanArray)<SUB>487</SUB>> ]
+"16517" [label = <(FIELD_IDENTIFIER,GetByteArrayRegion,GetByteArrayRegion)<SUB>490</SUB>> ]
+"16519" [label = <(UNKNOWN,jbyteArray,jbyteArray)<SUB>490</SUB>> ]
+"16524" [label = <(UNKNOWN,jbyte*,jbyte*)<SUB>491</SUB>> ]
+"16529" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>492</SUB>> ]
+"16537" [label = <(FIELD_IDENTIFIER,GetShortArrayRegion,GetShortArrayRegion)<SUB>495</SUB>> ]
+"16539" [label = <(UNKNOWN,jshortArray,jshortArray)<SUB>495</SUB>> ]
+"16544" [label = <(UNKNOWN,jshort*,jshort*)<SUB>496</SUB>> ]
+"16549" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>497</SUB>> ]
+"16557" [label = <(FIELD_IDENTIFIER,GetCharArrayRegion,GetCharArrayRegion)<SUB>500</SUB>> ]
+"16559" [label = <(UNKNOWN,jcharArray,jcharArray)<SUB>500</SUB>> ]
+"16564" [label = <(UNKNOWN,jchar*,jchar*)<SUB>501</SUB>> ]
+"16569" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>502</SUB>> ]
+"16577" [label = <(FIELD_IDENTIFIER,GetIntArrayRegion,GetIntArrayRegion)<SUB>505</SUB>> ]
+"16579" [label = <(UNKNOWN,jintArray,jintArray)<SUB>505</SUB>> ]
+"16584" [label = <(UNKNOWN,jint*,jint*)<SUB>506</SUB>> ]
+"16589" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>507</SUB>> ]
+"16597" [label = <(FIELD_IDENTIFIER,GetLongArrayRegion,GetLongArrayRegion)<SUB>510</SUB>> ]
+"16599" [label = <(UNKNOWN,jlongArray,jlongArray)<SUB>510</SUB>> ]
+"16604" [label = <(UNKNOWN,jlong*,jlong*)<SUB>511</SUB>> ]
+"16609" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>512</SUB>> ]
+"16617" [label = <(FIELD_IDENTIFIER,GetFloatArrayRegion,GetFloatArrayRegion)<SUB>515</SUB>> ]
+"16619" [label = <(UNKNOWN,jfloatArray,jfloatArray)<SUB>515</SUB>> ]
+"16624" [label = <(UNKNOWN,jfloat*,jfloat*)<SUB>516</SUB>> ]
+"16629" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>517</SUB>> ]
+"16637" [label = <(FIELD_IDENTIFIER,GetDoubleArrayRegion,GetDoubleArrayRegion)<SUB>520</SUB>> ]
+"16639" [label = <(UNKNOWN,jdoubleArray,jdoubleArray)<SUB>520</SUB>> ]
+"16644" [label = <(UNKNOWN,jdouble*,jdouble*)<SUB>521</SUB>> ]
+"16649" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>522</SUB>> ]
+"16658" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewByteArray)<SUB>525</SUB>> ]
+"16665" [label = <(FIELD_IDENTIFIER,GetBooleanArrayRegion,GetBooleanArrayRegion)<SUB>526</SUB>> ]
+"16667" [label = <(UNKNOWN,jbooleanArray,jbooleanArray)<SUB>526</SUB>> ]
+"16672" [label = <(UNKNOWN,jboolean*,jboolean*)<SUB>527</SUB>> ]
+"16677" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>528</SUB>> ]
+"16686" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewStringUTF)<SUB>531</SUB>> ]
+"16693" [label = <(FIELD_IDENTIFIER,GetBooleanArrayRegion,GetBooleanArrayRegion)<SUB>532</SUB>> ]
+"16695" [label = <(UNKNOWN,jbooleanArray,jbooleanArray)<SUB>532</SUB>> ]
+"16700" [label = <(UNKNOWN,jboolean*,jboolean*)<SUB>533</SUB>> ]
+"16705" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>534</SUB>> ]
+"16713" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>538</SUB>> ]
+"16494" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>484</SUB>> ]
+"16507" [label = <(FIELD_IDENTIFIER,NewBooleanArray,NewBooleanArray)<SUB>487</SUB>> ]
+"16660" [label = <(FIELD_IDENTIFIER,NewByteArray,NewByteArray)<SUB>525</SUB>> ]
+"16688" [label = <(FIELD_IDENTIFIER,NewStringUTF,NewStringUTF)<SUB>531</SUB>> ]
+"16715" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>538</SUB>> ]
+"16485" [label = <(METHOD,GetPrimitiveArrayRegionElementsOfWrongType)<SUB>483</SUB>> ]
+"16717" [label = <(METHOD_RETURN,void)<SUB>483</SUB>> ]
+  "16489" -> "16498" 
+  "16498" -> "16507" 
+  "16502" -> "16510" 
+  "16509" -> "16517" 
+  "16514" -> "16529" 
+  "16526" -> "16537" 
+  "16534" -> "16549" 
+  "16546" -> "16557" 
+  "16554" -> "16569" 
+  "16566" -> "16577" 
+  "16574" -> "16589" 
+  "16586" -> "16597" 
+  "16594" -> "16609" 
+  "16606" -> "16617" 
+  "16614" -> "16629" 
+  "16626" -> "16637" 
+  "16634" -> "16649" 
+  "16646" -> "16660" 
+  "16655" -> "16665" 
+  "16662" -> "16677" 
+  "16674" -> "16688" 
+  "16683" -> "16693" 
+  "16690" -> "16705" 
+  "16702" -> "16715" 
+  "16710" -> "16717" 
+  "16491" -> "16489" 
+  "16504" -> "16502" 
+  "16510" -> "16509" 
+  "16515" -> "16519" 
+  "16518" -> "16524" 
+  "16523" -> "16514" 
+  "16527" -> "16530" 
+  "16530" -> "16526" 
+  "16535" -> "16539" 
+  "16538" -> "16544" 
+  "16543" -> "16534" 
+  "16547" -> "16550" 
+  "16550" -> "16546" 
+  "16555" -> "16559" 
+  "16558" -> "16564" 
+  "16563" -> "16554" 
+  "16567" -> "16570" 
+  "16570" -> "16566" 
+  "16575" -> "16579" 
+  "16578" -> "16584" 
+  "16583" -> "16574" 
+  "16587" -> "16590" 
+  "16590" -> "16586" 
+  "16595" -> "16599" 
+  "16598" -> "16604" 
+  "16603" -> "16594" 
+  "16607" -> "16610" 
+  "16610" -> "16606" 
+  "16615" -> "16619" 
+  "16618" -> "16624" 
+  "16623" -> "16614" 
+  "16627" -> "16630" 
+  "16630" -> "16626" 
+  "16635" -> "16639" 
+  "16638" -> "16644" 
+  "16643" -> "16634" 
+  "16647" -> "16650" 
+  "16650" -> "16646" 
+  "16657" -> "16655" 
+  "16663" -> "16667" 
+  "16666" -> "16672" 
+  "16671" -> "16662" 
+  "16675" -> "16678" 
+  "16678" -> "16674" 
+  "16685" -> "16683" 
+  "16691" -> "16695" 
+  "16694" -> "16700" 
+  "16699" -> "16690" 
+  "16703" -> "16706" 
+  "16706" -> "16702" 
+  "16712" -> "16710" 
+  "16492" -> "16491" 
+  "16505" -> "16504" 
+  "16517" -> "16515" 
+  "16519" -> "16518" 
+  "16524" -> "16523" 
+  "16529" -> "16527" 
+  "16537" -> "16535" 
+  "16539" -> "16538" 
+  "16544" -> "16543" 
+  "16549" -> "16547" 
+  "16557" -> "16555" 
+  "16559" -> "16558" 
+  "16564" -> "16563" 
+  "16569" -> "16567" 
+  "16577" -> "16575" 
+  "16579" -> "16578" 
+  "16584" -> "16583" 
+  "16589" -> "16587" 
+  "16597" -> "16595" 
+  "16599" -> "16598" 
+  "16604" -> "16603" 
+  "16609" -> "16607" 
+  "16617" -> "16615" 
+  "16619" -> "16618" 
+  "16624" -> "16623" 
+  "16629" -> "16627" 
+  "16637" -> "16635" 
+  "16639" -> "16638" 
+  "16644" -> "16643" 
+  "16649" -> "16647" 
+  "16658" -> "16657" 
+  "16665" -> "16663" 
+  "16667" -> "16666" 
+  "16672" -> "16671" 
+  "16677" -> "16675" 
+  "16686" -> "16685" 
+  "16693" -> "16691" 
+  "16695" -> "16694" 
+  "16700" -> "16699" 
+  "16705" -> "16703" 
+  "16713" -> "16712" 
+  "16494" -> "16492" 
+  "16507" -> "16505" 
+  "16660" -> "16658" 
+  "16688" -> "16686" 
+  "16715" -> "16713" 
+  "16485" -> "16494" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/296-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/296-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/296-cfg.dot	2023-06-07 19:35:28.407384333 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/296-cfg.dot	2023-06-07 19:35:34.927383763 +0330
@@ -1,243 +1,249 @@
-digraph "GetPrimitiveArrayElementsOfWrongType" {  
-"16304" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>347</SUB>> ]
-"16313" [label = <(&lt;operator&gt;.assignment,array = env_-&gt;NewBooleanArray(10))<SUB>350</SUB>> ]
-"16321" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;GetByteArrayElements(reinterpret_cast&lt;jbyteArray&gt;(array), &amp;is_copy), nullptr))<SUB>352</SUB>> ]
-"16332" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected byte[]&quot;\012 : &quot;attempt to get byte primitive array elements with an object of type boolean[]&quot;))<SUB>353</SUB>> ]
-"16340" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;GetShortArrayElements(reinterpret_cast&lt;jshortArray&gt;(array), &amp;is_copy), nullptr))<SUB>356</SUB>> ]
-"16351" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected short[]&quot;\012 : &quot;attempt to get short primitive array elements with an object of type boolean[]&quot;))<SUB>357</SUB>> ]
-"16359" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;GetCharArrayElements(reinterpret_cast&lt;jcharArray&gt;(array), &amp;is_copy), nullptr))<SUB>360</SUB>> ]
-"16370" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected char[]&quot;\012 : &quot;attempt to get char primitive array elements with an object of type boolean[]&quot;))<SUB>361</SUB>> ]
-"16378" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;GetIntArrayElements(reinterpret_cast&lt;jintArray&gt;(array), &amp;is_copy), nullptr))<SUB>364</SUB>> ]
-"16389" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected int[]&quot;\012 : &quot;attempt to get int primitive array elements with an object of type boolean[]&quot;))<SUB>365</SUB>> ]
-"16397" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;GetLongArrayElements(reinterpret_cast&lt;jlongArray&gt;(array), &amp;is_copy), nullptr))<SUB>368</SUB>> ]
-"16408" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected long[]&quot;\012 : &quot;attempt to get long primitive array elements with an object of type boolean[]&quot;))<SUB>369</SUB>> ]
-"16416" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;GetFloatArrayElements(reinterpret_cast&lt;jfloatArray&gt;(array), &amp;is_copy), nullptr))<SUB>372</SUB>> ]
-"16427" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected float[]&quot;\012 : &quot;attempt to get float primitive array elements with an object of type boolean[]&quot;))<SUB>373</SUB>> ]
-"16435" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;GetDoubleArrayElements(reinterpret_cast&lt;jdoubleArray&gt;(array), &amp;is_copy), nullptr))<SUB>376</SUB>> ]
-"16446" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected double[]&quot;\012 : &quot;attempt to get double primitive array elements with an object of type boolean[]&quot;))<SUB>377</SUB>> ]
-"16455" [label = <(&lt;operator&gt;.assignment,array2 = env_-&gt;NewByteArray(10))<SUB>380</SUB>> ]
-"16462" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;GetBooleanArrayElements(reinterpret_cast&lt;jbooleanArray&gt;(array2), &amp;is_copy),\012 nullptr))<SUB>381</SUB>> ]
-"16473" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type byte[] expected boolean[]&quot;\012 : &quot;attempt to get boolean primitive array elements with an object of type byte[]&quot;))<SUB>383</SUB>> ]
-"16482" [label = <(&lt;operator&gt;.assignment,object = env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>386</SUB>> ]
-"16489" [label = <(EXPECT_EQ,EXPECT_EQ(env_-&gt;GetBooleanArrayElements(reinterpret_cast&lt;jbooleanArray&gt;(object), &amp;is_copy),\012 nullptr))<SUB>387</SUB>> ]
-"16500" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;attempt to get boolean primitive array elements with an object of type java.lang.String&quot;))<SUB>389</SUB>> ]
-"16508" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>393</SUB>> ]
-"16306" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>347</SUB>> ]
-"16315" [label = <(NewBooleanArray,env_-&gt;NewBooleanArray(10))<SUB>350</SUB>> ]
-"16322" [label = <(GetByteArrayElements,env_-&gt;GetByteArrayElements(reinterpret_cast&lt;jbyteArray&gt;(array), &amp;is_copy))<SUB>352</SUB>> ]
-"16333" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>353</SUB>> ]
-"16336" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected byte[]&quot;\012 : &quot;attempt to get byte primitive array elements with an object of type boolean[]&quot;)<SUB>354</SUB>> ]
-"16341" [label = <(GetShortArrayElements,env_-&gt;GetShortArrayElements(reinterpret_cast&lt;jshortArray&gt;(array), &amp;is_copy))<SUB>356</SUB>> ]
-"16352" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>357</SUB>> ]
-"16355" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected short[]&quot;\012 : &quot;attempt to get short primitive array elements with an object of type boolean[]&quot;)<SUB>358</SUB>> ]
-"16360" [label = <(GetCharArrayElements,env_-&gt;GetCharArrayElements(reinterpret_cast&lt;jcharArray&gt;(array), &amp;is_copy))<SUB>360</SUB>> ]
-"16371" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>361</SUB>> ]
-"16374" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected char[]&quot;\012 : &quot;attempt to get char primitive array elements with an object of type boolean[]&quot;)<SUB>362</SUB>> ]
-"16379" [label = <(GetIntArrayElements,env_-&gt;GetIntArrayElements(reinterpret_cast&lt;jintArray&gt;(array), &amp;is_copy))<SUB>364</SUB>> ]
-"16390" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>365</SUB>> ]
-"16393" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected int[]&quot;\012 : &quot;attempt to get int primitive array elements with an object of type boolean[]&quot;)<SUB>366</SUB>> ]
-"16398" [label = <(GetLongArrayElements,env_-&gt;GetLongArrayElements(reinterpret_cast&lt;jlongArray&gt;(array), &amp;is_copy))<SUB>368</SUB>> ]
-"16409" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>369</SUB>> ]
-"16412" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected long[]&quot;\012 : &quot;attempt to get long primitive array elements with an object of type boolean[]&quot;)<SUB>370</SUB>> ]
-"16417" [label = <(GetFloatArrayElements,env_-&gt;GetFloatArrayElements(reinterpret_cast&lt;jfloatArray&gt;(array), &amp;is_copy))<SUB>372</SUB>> ]
-"16428" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>373</SUB>> ]
-"16431" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected float[]&quot;\012 : &quot;attempt to get float primitive array elements with an object of type boolean[]&quot;)<SUB>374</SUB>> ]
-"16436" [label = <(GetDoubleArrayElements,env_-&gt;GetDoubleArrayElements(reinterpret_cast&lt;jdoubleArray&gt;(array), &amp;is_copy))<SUB>376</SUB>> ]
-"16447" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>377</SUB>> ]
-"16450" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected double[]&quot;\012 : &quot;attempt to get double primitive array elements with an object of type boolean[]&quot;)<SUB>378</SUB>> ]
-"16457" [label = <(NewByteArray,env_-&gt;NewByteArray(10))<SUB>380</SUB>> ]
-"16463" [label = <(GetBooleanArrayElements,env_-&gt;GetBooleanArrayElements(reinterpret_cast&lt;jbooleanArray&gt;(array2), &amp;is_copy))<SUB>381</SUB>> ]
-"16474" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>383</SUB>> ]
-"16477" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type byte[] expected boolean[]&quot;\012 : &quot;attempt to get boolean primitive array elements with an object of type byte[]&quot;)<SUB>384</SUB>> ]
-"16484" [label = <(NewStringUTF,env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>386</SUB>> ]
-"16490" [label = <(GetBooleanArrayElements,env_-&gt;GetBooleanArrayElements(reinterpret_cast&lt;jbooleanArray&gt;(object), &amp;is_copy))<SUB>387</SUB>> ]
-"16501" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>389</SUB>> ]
-"16504" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;attempt to get boolean primitive array elements with an object of type java.lang.String&quot;)<SUB>390</SUB>> ]
-"16510" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>393</SUB>> ]
-"16307" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>347</SUB>> ]
-"16316" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewBooleanArray)<SUB>350</SUB>> ]
-"16323" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetByteArrayElements)<SUB>352</SUB>> ]
-"16326" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbyteArray&gt;(array))<SUB>352</SUB>> ]
-"16329" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>352</SUB>> ]
-"16335" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>353</SUB>> ]
-"16342" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetShortArrayElements)<SUB>356</SUB>> ]
-"16345" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jshortArray&gt;(array))<SUB>356</SUB>> ]
-"16348" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>356</SUB>> ]
-"16354" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>357</SUB>> ]
-"16361" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetCharArrayElements)<SUB>360</SUB>> ]
-"16364" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jcharArray&gt;(array))<SUB>360</SUB>> ]
-"16367" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>360</SUB>> ]
-"16373" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>361</SUB>> ]
-"16380" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetIntArrayElements)<SUB>364</SUB>> ]
-"16383" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jintArray&gt;(array))<SUB>364</SUB>> ]
-"16386" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>364</SUB>> ]
-"16392" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>365</SUB>> ]
-"16399" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetLongArrayElements)<SUB>368</SUB>> ]
-"16402" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jlongArray&gt;(array))<SUB>368</SUB>> ]
-"16405" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>368</SUB>> ]
-"16411" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>369</SUB>> ]
-"16418" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetFloatArrayElements)<SUB>372</SUB>> ]
-"16421" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jfloatArray&gt;(array))<SUB>372</SUB>> ]
-"16424" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>372</SUB>> ]
-"16430" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>373</SUB>> ]
-"16437" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetDoubleArrayElements)<SUB>376</SUB>> ]
-"16440" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jdoubleArray&gt;(array))<SUB>376</SUB>> ]
-"16443" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>376</SUB>> ]
-"16449" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>377</SUB>> ]
-"16458" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewByteArray)<SUB>380</SUB>> ]
-"16464" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetBooleanArrayElements)<SUB>381</SUB>> ]
-"16467" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbooleanArray&gt;(array2))<SUB>381</SUB>> ]
-"16470" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>381</SUB>> ]
-"16476" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>383</SUB>> ]
-"16485" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewStringUTF)<SUB>386</SUB>> ]
-"16491" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetBooleanArrayElements)<SUB>387</SUB>> ]
-"16494" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbooleanArray&gt;(object))<SUB>387</SUB>> ]
-"16497" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>387</SUB>> ]
-"16503" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>389</SUB>> ]
-"16511" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>393</SUB>> ]
-"16309" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>347</SUB>> ]
-"16318" [label = <(FIELD_IDENTIFIER,NewBooleanArray,NewBooleanArray)<SUB>350</SUB>> ]
-"16325" [label = <(FIELD_IDENTIFIER,GetByteArrayElements,GetByteArrayElements)<SUB>352</SUB>> ]
-"16327" [label = <(UNKNOWN,jbyteArray,jbyteArray)<SUB>352</SUB>> ]
-"16344" [label = <(FIELD_IDENTIFIER,GetShortArrayElements,GetShortArrayElements)<SUB>356</SUB>> ]
-"16346" [label = <(UNKNOWN,jshortArray,jshortArray)<SUB>356</SUB>> ]
-"16363" [label = <(FIELD_IDENTIFIER,GetCharArrayElements,GetCharArrayElements)<SUB>360</SUB>> ]
-"16365" [label = <(UNKNOWN,jcharArray,jcharArray)<SUB>360</SUB>> ]
-"16382" [label = <(FIELD_IDENTIFIER,GetIntArrayElements,GetIntArrayElements)<SUB>364</SUB>> ]
-"16384" [label = <(UNKNOWN,jintArray,jintArray)<SUB>364</SUB>> ]
-"16401" [label = <(FIELD_IDENTIFIER,GetLongArrayElements,GetLongArrayElements)<SUB>368</SUB>> ]
-"16403" [label = <(UNKNOWN,jlongArray,jlongArray)<SUB>368</SUB>> ]
-"16420" [label = <(FIELD_IDENTIFIER,GetFloatArrayElements,GetFloatArrayElements)<SUB>372</SUB>> ]
-"16422" [label = <(UNKNOWN,jfloatArray,jfloatArray)<SUB>372</SUB>> ]
-"16439" [label = <(FIELD_IDENTIFIER,GetDoubleArrayElements,GetDoubleArrayElements)<SUB>376</SUB>> ]
-"16441" [label = <(UNKNOWN,jdoubleArray,jdoubleArray)<SUB>376</SUB>> ]
-"16460" [label = <(FIELD_IDENTIFIER,NewByteArray,NewByteArray)<SUB>380</SUB>> ]
-"16466" [label = <(FIELD_IDENTIFIER,GetBooleanArrayElements,GetBooleanArrayElements)<SUB>381</SUB>> ]
-"16468" [label = <(UNKNOWN,jbooleanArray,jbooleanArray)<SUB>381</SUB>> ]
-"16487" [label = <(FIELD_IDENTIFIER,NewStringUTF,NewStringUTF)<SUB>386</SUB>> ]
-"16493" [label = <(FIELD_IDENTIFIER,GetBooleanArrayElements,GetBooleanArrayElements)<SUB>387</SUB>> ]
-"16495" [label = <(UNKNOWN,jbooleanArray,jbooleanArray)<SUB>387</SUB>> ]
-"16513" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>393</SUB>> ]
-"16300" [label = <(METHOD,GetPrimitiveArrayElementsOfWrongType)<SUB>346</SUB>> ]
-"16515" [label = <(METHOD_RETURN,void)<SUB>346</SUB>> ]
-  "16304" -> "16318" 
-  "16313" -> "16325" 
-  "16321" -> "16335" 
-  "16332" -> "16344" 
-  "16340" -> "16354" 
-  "16351" -> "16363" 
-  "16359" -> "16373" 
-  "16370" -> "16382" 
-  "16378" -> "16392" 
-  "16389" -> "16401" 
-  "16397" -> "16411" 
-  "16408" -> "16420" 
-  "16416" -> "16430" 
-  "16427" -> "16439" 
-  "16435" -> "16449" 
-  "16446" -> "16460" 
-  "16455" -> "16466" 
-  "16462" -> "16476" 
-  "16473" -> "16487" 
-  "16482" -> "16493" 
-  "16489" -> "16503" 
-  "16500" -> "16513" 
-  "16508" -> "16515" 
-  "16306" -> "16304" 
-  "16315" -> "16313" 
-  "16322" -> "16321" 
-  "16333" -> "16336" 
-  "16336" -> "16332" 
-  "16341" -> "16340" 
-  "16352" -> "16355" 
-  "16355" -> "16351" 
-  "16360" -> "16359" 
-  "16371" -> "16374" 
-  "16374" -> "16370" 
-  "16379" -> "16378" 
-  "16390" -> "16393" 
-  "16393" -> "16389" 
-  "16398" -> "16397" 
-  "16409" -> "16412" 
-  "16412" -> "16408" 
-  "16417" -> "16416" 
-  "16428" -> "16431" 
-  "16431" -> "16427" 
-  "16436" -> "16435" 
-  "16447" -> "16450" 
-  "16450" -> "16446" 
-  "16457" -> "16455" 
-  "16463" -> "16462" 
-  "16474" -> "16477" 
-  "16477" -> "16473" 
-  "16484" -> "16482" 
-  "16490" -> "16489" 
-  "16501" -> "16504" 
-  "16504" -> "16500" 
-  "16510" -> "16508" 
-  "16307" -> "16306" 
-  "16316" -> "16315" 
-  "16323" -> "16327" 
-  "16326" -> "16329" 
-  "16329" -> "16322" 
-  "16335" -> "16333" 
-  "16342" -> "16346" 
-  "16345" -> "16348" 
-  "16348" -> "16341" 
-  "16354" -> "16352" 
-  "16361" -> "16365" 
-  "16364" -> "16367" 
-  "16367" -> "16360" 
-  "16373" -> "16371" 
-  "16380" -> "16384" 
-  "16383" -> "16386" 
-  "16386" -> "16379" 
-  "16392" -> "16390" 
-  "16399" -> "16403" 
-  "16402" -> "16405" 
-  "16405" -> "16398" 
-  "16411" -> "16409" 
-  "16418" -> "16422" 
-  "16421" -> "16424" 
-  "16424" -> "16417" 
-  "16430" -> "16428" 
-  "16437" -> "16441" 
-  "16440" -> "16443" 
-  "16443" -> "16436" 
-  "16449" -> "16447" 
-  "16458" -> "16457" 
-  "16464" -> "16468" 
-  "16467" -> "16470" 
-  "16470" -> "16463" 
-  "16476" -> "16474" 
-  "16485" -> "16484" 
-  "16491" -> "16495" 
-  "16494" -> "16497" 
-  "16497" -> "16490" 
-  "16503" -> "16501" 
-  "16511" -> "16510" 
-  "16309" -> "16307" 
-  "16318" -> "16316" 
-  "16325" -> "16323" 
-  "16327" -> "16326" 
-  "16344" -> "16342" 
-  "16346" -> "16345" 
-  "16363" -> "16361" 
-  "16365" -> "16364" 
-  "16382" -> "16380" 
-  "16384" -> "16383" 
-  "16401" -> "16399" 
-  "16403" -> "16402" 
-  "16420" -> "16418" 
-  "16422" -> "16421" 
-  "16439" -> "16437" 
-  "16441" -> "16440" 
-  "16460" -> "16458" 
-  "16466" -> "16464" 
-  "16468" -> "16467" 
-  "16487" -> "16485" 
-  "16493" -> "16491" 
-  "16495" -> "16494" 
-  "16513" -> "16511" 
-  "16300" -> "16309" 
+digraph "SetPrimitiveArrayRegionElementsOfWrongType" {  
+"16723" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>542</SUB>> ]
+"16732" [label = <(&lt;operator&gt;.assignment,kLength = 10)<SUB>544</SUB>> ]
+"16736" [label = <(&lt;operator&gt;.assignment,array = env_-&gt;NewBooleanArray(kLength))<SUB>545</SUB>> ]
+"16743" [label = <(ASSERT_TRUE,ASSERT_TRUE(array != nullptr))<SUB>546</SUB>> ]
+"16748" [label = <(SetByteArrayRegion,env_-&gt;SetByteArrayRegion(reinterpret_cast&lt;jbyteArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jbyte*&gt;(elements)))<SUB>548</SUB>> ]
+"16760" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected byte[]&quot;\012 : &quot;attempt to set region of byte primitive array elements with an object of type boolean[]&quot;))<SUB>550</SUB>> ]
+"16768" [label = <(SetShortArrayRegion,env_-&gt;SetShortArrayRegion(reinterpret_cast&lt;jshortArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jshort*&gt;(elements)))<SUB>553</SUB>> ]
+"16780" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected short[]&quot;\012 : &quot;attempt to set region of short primitive array elements with an object of type boolean[]&quot;))<SUB>555</SUB>> ]
+"16788" [label = <(SetCharArrayRegion,env_-&gt;SetCharArrayRegion(reinterpret_cast&lt;jcharArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jchar*&gt;(elements)))<SUB>558</SUB>> ]
+"16800" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected char[]&quot;\012 : &quot;attempt to set region of char primitive array elements with an object of type boolean[]&quot;))<SUB>560</SUB>> ]
+"16808" [label = <(SetIntArrayRegion,env_-&gt;SetIntArrayRegion(reinterpret_cast&lt;jintArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jint*&gt;(elements)))<SUB>563</SUB>> ]
+"16820" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected int[]&quot;\012 : &quot;attempt to set region of int primitive array elements with an object of type boolean[]&quot;))<SUB>565</SUB>> ]
+"16828" [label = <(SetLongArrayRegion,env_-&gt;SetLongArrayRegion(reinterpret_cast&lt;jlongArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jlong*&gt;(elements)))<SUB>568</SUB>> ]
+"16840" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected long[]&quot;\012 : &quot;attempt to set region of long primitive array elements with an object of type boolean[]&quot;))<SUB>570</SUB>> ]
+"16848" [label = <(SetFloatArrayRegion,env_-&gt;SetFloatArrayRegion(reinterpret_cast&lt;jfloatArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jfloat*&gt;(elements)))<SUB>573</SUB>> ]
+"16860" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected float[]&quot;\012 : &quot;attempt to set region of float primitive array elements with an object of type boolean[]&quot;))<SUB>575</SUB>> ]
+"16868" [label = <(SetDoubleArrayRegion,env_-&gt;SetDoubleArrayRegion(reinterpret_cast&lt;jdoubleArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jdouble*&gt;(elements)))<SUB>578</SUB>> ]
+"16880" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected double[]&quot;\012 : &quot;attempt to set region of double primitive array elements with an object of type boolean[]&quot;))<SUB>580</SUB>> ]
+"16889" [label = <(&lt;operator&gt;.assignment,array2 = env_-&gt;NewByteArray(10))<SUB>583</SUB>> ]
+"16896" [label = <(SetBooleanArrayRegion,env_-&gt;SetBooleanArrayRegion(reinterpret_cast&lt;jbooleanArray&gt;(array2), 0, kLength,\012 reinterpret_cast&lt;jboolean*&gt;(elements)))<SUB>584</SUB>> ]
+"16908" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type byte[] expected boolean[]&quot;\012 : &quot;attempt to set region of boolean primitive array elements with an object of type byte[]&quot;))<SUB>586</SUB>> ]
+"16917" [label = <(&lt;operator&gt;.assignment,object = env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>589</SUB>> ]
+"16924" [label = <(SetBooleanArrayRegion,env_-&gt;SetBooleanArrayRegion(reinterpret_cast&lt;jbooleanArray&gt;(object), 0, kLength,\012 reinterpret_cast&lt;jboolean*&gt;(elements)))<SUB>590</SUB>> ]
+"16936" [label = <(Check,jni_abort_catcher.Check(check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;attempt to set region of boolean primitive array elements with an object of type &quot;\012 &quot;java.lang.String&quot;))<SUB>592</SUB>> ]
+"16944" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>595</SUB>> ]
+"16725" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>542</SUB>> ]
+"16738" [label = <(NewBooleanArray,env_-&gt;NewBooleanArray(kLength))<SUB>545</SUB>> ]
+"16744" [label = <(&lt;operator&gt;.notEquals,array != nullptr)<SUB>546</SUB>> ]
+"16749" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;SetByteArrayRegion)<SUB>548</SUB>> ]
+"16752" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbyteArray&gt;(array))<SUB>548</SUB>> ]
+"16757" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbyte*&gt;(elements))<SUB>549</SUB>> ]
+"16761" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>550</SUB>> ]
+"16764" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected byte[]&quot;\012 : &quot;attempt to set region of byte primitive array elements with an object of type boolean[]&quot;)<SUB>551</SUB>> ]
+"16769" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;SetShortArrayRegion)<SUB>553</SUB>> ]
+"16772" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jshortArray&gt;(array))<SUB>553</SUB>> ]
+"16777" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jshort*&gt;(elements))<SUB>554</SUB>> ]
+"16781" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>555</SUB>> ]
+"16784" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected short[]&quot;\012 : &quot;attempt to set region of short primitive array elements with an object of type boolean[]&quot;)<SUB>556</SUB>> ]
+"16789" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;SetCharArrayRegion)<SUB>558</SUB>> ]
+"16792" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jcharArray&gt;(array))<SUB>558</SUB>> ]
+"16797" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jchar*&gt;(elements))<SUB>559</SUB>> ]
+"16801" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>560</SUB>> ]
+"16804" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected char[]&quot;\012 : &quot;attempt to set region of char primitive array elements with an object of type boolean[]&quot;)<SUB>561</SUB>> ]
+"16809" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;SetIntArrayRegion)<SUB>563</SUB>> ]
+"16812" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jintArray&gt;(array))<SUB>563</SUB>> ]
+"16817" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jint*&gt;(elements))<SUB>564</SUB>> ]
+"16821" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>565</SUB>> ]
+"16824" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected int[]&quot;\012 : &quot;attempt to set region of int primitive array elements with an object of type boolean[]&quot;)<SUB>566</SUB>> ]
+"16829" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;SetLongArrayRegion)<SUB>568</SUB>> ]
+"16832" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jlongArray&gt;(array))<SUB>568</SUB>> ]
+"16837" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jlong*&gt;(elements))<SUB>569</SUB>> ]
+"16841" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>570</SUB>> ]
+"16844" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected long[]&quot;\012 : &quot;attempt to set region of long primitive array elements with an object of type boolean[]&quot;)<SUB>571</SUB>> ]
+"16849" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;SetFloatArrayRegion)<SUB>573</SUB>> ]
+"16852" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jfloatArray&gt;(array))<SUB>573</SUB>> ]
+"16857" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jfloat*&gt;(elements))<SUB>574</SUB>> ]
+"16861" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>575</SUB>> ]
+"16864" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected float[]&quot;\012 : &quot;attempt to set region of float primitive array elements with an object of type boolean[]&quot;)<SUB>576</SUB>> ]
+"16869" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;SetDoubleArrayRegion)<SUB>578</SUB>> ]
+"16872" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jdoubleArray&gt;(array))<SUB>578</SUB>> ]
+"16877" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jdouble*&gt;(elements))<SUB>579</SUB>> ]
+"16881" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>580</SUB>> ]
+"16884" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected double[]&quot;\012 : &quot;attempt to set region of double primitive array elements with an object of type boolean[]&quot;)<SUB>581</SUB>> ]
+"16891" [label = <(NewByteArray,env_-&gt;NewByteArray(10))<SUB>583</SUB>> ]
+"16897" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;SetBooleanArrayRegion)<SUB>584</SUB>> ]
+"16900" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbooleanArray&gt;(array2))<SUB>584</SUB>> ]
+"16905" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jboolean*&gt;(elements))<SUB>585</SUB>> ]
+"16909" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>586</SUB>> ]
+"16912" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type byte[] expected boolean[]&quot;\012 : &quot;attempt to set region of boolean primitive array elements with an object of type byte[]&quot;)<SUB>587</SUB>> ]
+"16919" [label = <(NewStringUTF,env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>589</SUB>> ]
+"16925" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;SetBooleanArrayRegion)<SUB>590</SUB>> ]
+"16928" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbooleanArray&gt;(object))<SUB>590</SUB>> ]
+"16933" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jboolean*&gt;(elements))<SUB>591</SUB>> ]
+"16937" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>592</SUB>> ]
+"16940" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;attempt to set region of boolean primitive array elements with an object of type &quot;\012 &quot;java.lang.String&quot;)<SUB>592</SUB>> ]
+"16946" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>595</SUB>> ]
+"16726" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>542</SUB>> ]
+"16739" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewBooleanArray)<SUB>545</SUB>> ]
+"16751" [label = <(FIELD_IDENTIFIER,SetByteArrayRegion,SetByteArrayRegion)<SUB>548</SUB>> ]
+"16753" [label = <(UNKNOWN,jbyteArray,jbyteArray)<SUB>548</SUB>> ]
+"16758" [label = <(UNKNOWN,jbyte*,jbyte*)<SUB>549</SUB>> ]
+"16763" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>550</SUB>> ]
+"16771" [label = <(FIELD_IDENTIFIER,SetShortArrayRegion,SetShortArrayRegion)<SUB>553</SUB>> ]
+"16773" [label = <(UNKNOWN,jshortArray,jshortArray)<SUB>553</SUB>> ]
+"16778" [label = <(UNKNOWN,jshort*,jshort*)<SUB>554</SUB>> ]
+"16783" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>555</SUB>> ]
+"16791" [label = <(FIELD_IDENTIFIER,SetCharArrayRegion,SetCharArrayRegion)<SUB>558</SUB>> ]
+"16793" [label = <(UNKNOWN,jcharArray,jcharArray)<SUB>558</SUB>> ]
+"16798" [label = <(UNKNOWN,jchar*,jchar*)<SUB>559</SUB>> ]
+"16803" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>560</SUB>> ]
+"16811" [label = <(FIELD_IDENTIFIER,SetIntArrayRegion,SetIntArrayRegion)<SUB>563</SUB>> ]
+"16813" [label = <(UNKNOWN,jintArray,jintArray)<SUB>563</SUB>> ]
+"16818" [label = <(UNKNOWN,jint*,jint*)<SUB>564</SUB>> ]
+"16823" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>565</SUB>> ]
+"16831" [label = <(FIELD_IDENTIFIER,SetLongArrayRegion,SetLongArrayRegion)<SUB>568</SUB>> ]
+"16833" [label = <(UNKNOWN,jlongArray,jlongArray)<SUB>568</SUB>> ]
+"16838" [label = <(UNKNOWN,jlong*,jlong*)<SUB>569</SUB>> ]
+"16843" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>570</SUB>> ]
+"16851" [label = <(FIELD_IDENTIFIER,SetFloatArrayRegion,SetFloatArrayRegion)<SUB>573</SUB>> ]
+"16853" [label = <(UNKNOWN,jfloatArray,jfloatArray)<SUB>573</SUB>> ]
+"16858" [label = <(UNKNOWN,jfloat*,jfloat*)<SUB>574</SUB>> ]
+"16863" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>575</SUB>> ]
+"16871" [label = <(FIELD_IDENTIFIER,SetDoubleArrayRegion,SetDoubleArrayRegion)<SUB>578</SUB>> ]
+"16873" [label = <(UNKNOWN,jdoubleArray,jdoubleArray)<SUB>578</SUB>> ]
+"16878" [label = <(UNKNOWN,jdouble*,jdouble*)<SUB>579</SUB>> ]
+"16883" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>580</SUB>> ]
+"16892" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewByteArray)<SUB>583</SUB>> ]
+"16899" [label = <(FIELD_IDENTIFIER,SetBooleanArrayRegion,SetBooleanArrayRegion)<SUB>584</SUB>> ]
+"16901" [label = <(UNKNOWN,jbooleanArray,jbooleanArray)<SUB>584</SUB>> ]
+"16906" [label = <(UNKNOWN,jboolean*,jboolean*)<SUB>585</SUB>> ]
+"16911" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>586</SUB>> ]
+"16920" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewStringUTF)<SUB>589</SUB>> ]
+"16927" [label = <(FIELD_IDENTIFIER,SetBooleanArrayRegion,SetBooleanArrayRegion)<SUB>590</SUB>> ]
+"16929" [label = <(UNKNOWN,jbooleanArray,jbooleanArray)<SUB>590</SUB>> ]
+"16934" [label = <(UNKNOWN,jboolean*,jboolean*)<SUB>591</SUB>> ]
+"16939" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>592</SUB>> ]
+"16947" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>595</SUB>> ]
+"16728" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>542</SUB>> ]
+"16741" [label = <(FIELD_IDENTIFIER,NewBooleanArray,NewBooleanArray)<SUB>545</SUB>> ]
+"16894" [label = <(FIELD_IDENTIFIER,NewByteArray,NewByteArray)<SUB>583</SUB>> ]
+"16922" [label = <(FIELD_IDENTIFIER,NewStringUTF,NewStringUTF)<SUB>589</SUB>> ]
+"16949" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>595</SUB>> ]
+"16719" [label = <(METHOD,SetPrimitiveArrayRegionElementsOfWrongType)<SUB>541</SUB>> ]
+"16951" [label = <(METHOD_RETURN,void)<SUB>541</SUB>> ]
+  "16723" -> "16732" 
+  "16732" -> "16741" 
+  "16736" -> "16744" 
+  "16743" -> "16751" 
+  "16748" -> "16763" 
+  "16760" -> "16771" 
+  "16768" -> "16783" 
+  "16780" -> "16791" 
+  "16788" -> "16803" 
+  "16800" -> "16811" 
+  "16808" -> "16823" 
+  "16820" -> "16831" 
+  "16828" -> "16843" 
+  "16840" -> "16851" 
+  "16848" -> "16863" 
+  "16860" -> "16871" 
+  "16868" -> "16883" 
+  "16880" -> "16894" 
+  "16889" -> "16899" 
+  "16896" -> "16911" 
+  "16908" -> "16922" 
+  "16917" -> "16927" 
+  "16924" -> "16939" 
+  "16936" -> "16949" 
+  "16944" -> "16951" 
+  "16725" -> "16723" 
+  "16738" -> "16736" 
+  "16744" -> "16743" 
+  "16749" -> "16753" 
+  "16752" -> "16758" 
+  "16757" -> "16748" 
+  "16761" -> "16764" 
+  "16764" -> "16760" 
+  "16769" -> "16773" 
+  "16772" -> "16778" 
+  "16777" -> "16768" 
+  "16781" -> "16784" 
+  "16784" -> "16780" 
+  "16789" -> "16793" 
+  "16792" -> "16798" 
+  "16797" -> "16788" 
+  "16801" -> "16804" 
+  "16804" -> "16800" 
+  "16809" -> "16813" 
+  "16812" -> "16818" 
+  "16817" -> "16808" 
+  "16821" -> "16824" 
+  "16824" -> "16820" 
+  "16829" -> "16833" 
+  "16832" -> "16838" 
+  "16837" -> "16828" 
+  "16841" -> "16844" 
+  "16844" -> "16840" 
+  "16849" -> "16853" 
+  "16852" -> "16858" 
+  "16857" -> "16848" 
+  "16861" -> "16864" 
+  "16864" -> "16860" 
+  "16869" -> "16873" 
+  "16872" -> "16878" 
+  "16877" -> "16868" 
+  "16881" -> "16884" 
+  "16884" -> "16880" 
+  "16891" -> "16889" 
+  "16897" -> "16901" 
+  "16900" -> "16906" 
+  "16905" -> "16896" 
+  "16909" -> "16912" 
+  "16912" -> "16908" 
+  "16919" -> "16917" 
+  "16925" -> "16929" 
+  "16928" -> "16934" 
+  "16933" -> "16924" 
+  "16937" -> "16940" 
+  "16940" -> "16936" 
+  "16946" -> "16944" 
+  "16726" -> "16725" 
+  "16739" -> "16738" 
+  "16751" -> "16749" 
+  "16753" -> "16752" 
+  "16758" -> "16757" 
+  "16763" -> "16761" 
+  "16771" -> "16769" 
+  "16773" -> "16772" 
+  "16778" -> "16777" 
+  "16783" -> "16781" 
+  "16791" -> "16789" 
+  "16793" -> "16792" 
+  "16798" -> "16797" 
+  "16803" -> "16801" 
+  "16811" -> "16809" 
+  "16813" -> "16812" 
+  "16818" -> "16817" 
+  "16823" -> "16821" 
+  "16831" -> "16829" 
+  "16833" -> "16832" 
+  "16838" -> "16837" 
+  "16843" -> "16841" 
+  "16851" -> "16849" 
+  "16853" -> "16852" 
+  "16858" -> "16857" 
+  "16863" -> "16861" 
+  "16871" -> "16869" 
+  "16873" -> "16872" 
+  "16878" -> "16877" 
+  "16883" -> "16881" 
+  "16892" -> "16891" 
+  "16899" -> "16897" 
+  "16901" -> "16900" 
+  "16906" -> "16905" 
+  "16911" -> "16909" 
+  "16920" -> "16919" 
+  "16927" -> "16925" 
+  "16929" -> "16928" 
+  "16934" -> "16933" 
+  "16939" -> "16937" 
+  "16947" -> "16946" 
+  "16728" -> "16726" 
+  "16741" -> "16739" 
+  "16894" -> "16892" 
+  "16922" -> "16920" 
+  "16949" -> "16947" 
+  "16719" -> "16728" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/297-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/297-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/297-cfg.dot	2023-06-07 19:35:28.407384333 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/297-cfg.dot	2023-06-07 19:35:34.927383763 +0330
@@ -1,283 +1,75 @@
-digraph "ReleasePrimitiveArrayElementsOfWrongType" {  
-"16521" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>397</SUB>> ]
-"16770" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>465</SUB>> ]
-"16523" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>397</SUB>> ]
-"16531" [label = <(&lt;operator&gt;.assignment,array = env_-&gt;NewBooleanArray(10))<SUB>400</SUB>> ]
-"16538" [label = <(ASSERT_TRUE,ASSERT_TRUE(array != nullptr))<SUB>401</SUB>> ]
-"16544" [label = <(&lt;operator&gt;.assignment,* elements = env_-&gt;GetBooleanArrayElements(array, &amp;is_copy))<SUB>403</SUB>> ]
-"16553" [label = <(ASSERT_TRUE,ASSERT_TRUE(elements != nullptr))<SUB>404</SUB>> ]
-"16557" [label = <(ReleaseByteArrayElements,env_-&gt;ReleaseByteArrayElements(reinterpret_cast&lt;jbyteArray&gt;(array),\012 reinterpret_cast&lt;jbyte*&gt;(elements), 0))<SUB>405</SUB>> ]
-"16568" [label = <(Check,jni_abort_catcher.Check(\012          check_jni ? &quot;incompatible array type boolean[] expected byte[]&quot;\012 : &quot;attempt to release byte primitive array elements with an object of type boolean[]&quot;))<SUB>407</SUB>> ]
-"16576" [label = <(ReleaseShortArrayElements,env_-&gt;ReleaseShortArrayElements(reinterpret_cast&lt;jshortArray&gt;(array),\012 reinterpret_cast&lt;jshort*&gt;(elements), 0))<SUB>410</SUB>> ]
-"16587" [label = <(Check,jni_abort_catcher.Check(\012          check_jni ? &quot;incompatible array type boolean[] expected short[]&quot;\012 : &quot;attempt to release short primitive array elements with an object of type boolean[]&quot;))<SUB>412</SUB>> ]
-"16595" [label = <(ReleaseCharArrayElements,env_-&gt;ReleaseCharArrayElements(reinterpret_cast&lt;jcharArray&gt;(array),\012 reinterpret_cast&lt;jchar*&gt;(elements), 0))<SUB>415</SUB>> ]
-"16606" [label = <(Check,jni_abort_catcher.Check(\012          check_jni ? &quot;incompatible array type boolean[] expected char[]&quot;\012 : &quot;attempt to release char primitive array elements with an object of type boolean[]&quot;))<SUB>417</SUB>> ]
-"16614" [label = <(ReleaseIntArrayElements,env_-&gt;ReleaseIntArrayElements(reinterpret_cast&lt;jintArray&gt;(array),\012 reinterpret_cast&lt;jint*&gt;(elements), 0))<SUB>420</SUB>> ]
-"16625" [label = <(Check,jni_abort_catcher.Check(\012          check_jni ? &quot;incompatible array type boolean[] expected int[]&quot;\012 : &quot;attempt to release int primitive array elements with an object of type boolean[]&quot;))<SUB>422</SUB>> ]
-"16633" [label = <(ReleaseLongArrayElements,env_-&gt;ReleaseLongArrayElements(reinterpret_cast&lt;jlongArray&gt;(array),\012 reinterpret_cast&lt;jlong*&gt;(elements), 0))<SUB>425</SUB>> ]
-"16644" [label = <(Check,jni_abort_catcher.Check(\012          check_jni ? &quot;incompatible array type boolean[] expected long[]&quot;\012 : &quot;attempt to release long primitive array elements with an object of type boolean[]&quot;))<SUB>427</SUB>> ]
-"16652" [label = <(ReleaseFloatArrayElements,env_-&gt;ReleaseFloatArrayElements(reinterpret_cast&lt;jfloatArray&gt;(array),\012 reinterpret_cast&lt;jfloat*&gt;(elements), 0))<SUB>430</SUB>> ]
-"16663" [label = <(Check,jni_abort_catcher.Check(\012          check_jni ? &quot;incompatible array type boolean[] expected float[]&quot;\012 : &quot;attempt to release float primitive array elements with an object of type boolean[]&quot;))<SUB>432</SUB>> ]
-"16671" [label = <(ReleaseDoubleArrayElements,env_-&gt;ReleaseDoubleArrayElements(reinterpret_cast&lt;jdoubleArray&gt;(array),\012 reinterpret_cast&lt;jdouble*&gt;(elements), 0))<SUB>435</SUB>> ]
-"16682" [label = <(Check,jni_abort_catcher.Check(\012          check_jni ? &quot;incompatible array type boolean[] expected double[]&quot;\012 : &quot;attempt to release double primitive array elements with an object of type boolean[]&quot;))<SUB>437</SUB>> ]
-"16690" [label = <(ReleaseBooleanArrayElements,env_-&gt;ReleaseBooleanArrayElements(array, elements, 0))<SUB>442</SUB>> ]
-"16699" [label = <(&lt;operator&gt;.assignment,array = env_-&gt;NewByteArray(10))<SUB>445</SUB>> ]
-"16708" [label = <(&lt;operator&gt;.assignment,* elements = env_-&gt;GetByteArrayElements(array, &amp;is_copy))<SUB>447</SUB>> ]
-"16717" [label = <(ReleaseBooleanArrayElements,env_-&gt;ReleaseBooleanArrayElements(reinterpret_cast&lt;jbooleanArray&gt;(array),\012 reinterpret_cast&lt;jboolean*&gt;(elements), 0))<SUB>449</SUB>> ]
-"16728" [label = <(Check,jni_abort_catcher.Check(\012          check_jni ? &quot;incompatible array type byte[] expected boolean[]&quot;\012 : &quot;attempt to release boolean primitive array elements with an object of type byte[]&quot;))<SUB>451</SUB>> ]
-"16737" [label = <(&lt;operator&gt;.assignment,object = env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>454</SUB>> ]
-"16744" [label = <(ReleaseBooleanArrayElements,env_-&gt;ReleaseBooleanArrayElements(reinterpret_cast&lt;jbooleanArray&gt;(object),\012 reinterpret_cast&lt;jboolean*&gt;(elements), 0))<SUB>455</SUB>> ]
-"16755" [label = <(Check,jni_abort_catcher.Check(\012          check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;attempt to release boolean primitive array elements with an object of type &quot;\012 &quot;java.lang.String&quot;))<SUB>457</SUB>> ]
-"16763" [label = <(ReleaseByteArrayElements,env_-&gt;ReleaseByteArrayElements(array, elements, 0))<SUB>463</SUB>> ]
-"16772" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>465</SUB>> ]
-"16524" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>397</SUB>> ]
-"16533" [label = <(NewBooleanArray,env_-&gt;NewBooleanArray(10))<SUB>400</SUB>> ]
-"16539" [label = <(&lt;operator&gt;.notEquals,array != nullptr)<SUB>401</SUB>> ]
-"16546" [label = <(GetBooleanArrayElements,env_-&gt;GetBooleanArrayElements(array, &amp;is_copy))<SUB>403</SUB>> ]
-"16554" [label = <(&lt;operator&gt;.notEquals,elements != nullptr)<SUB>404</SUB>> ]
-"16558" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseByteArrayElements)<SUB>405</SUB>> ]
-"16561" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbyteArray&gt;(array))<SUB>405</SUB>> ]
-"16564" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbyte*&gt;(elements))<SUB>406</SUB>> ]
-"16569" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>407</SUB>> ]
-"16572" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected byte[]&quot;\012 : &quot;attempt to release byte primitive array elements with an object of type boolean[]&quot;)<SUB>408</SUB>> ]
-"16577" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseShortArrayElements)<SUB>410</SUB>> ]
-"16580" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jshortArray&gt;(array))<SUB>410</SUB>> ]
-"16583" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jshort*&gt;(elements))<SUB>411</SUB>> ]
-"16588" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>412</SUB>> ]
-"16591" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected short[]&quot;\012 : &quot;attempt to release short primitive array elements with an object of type boolean[]&quot;)<SUB>413</SUB>> ]
-"16596" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseCharArrayElements)<SUB>415</SUB>> ]
-"16599" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jcharArray&gt;(array))<SUB>415</SUB>> ]
-"16602" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jchar*&gt;(elements))<SUB>416</SUB>> ]
-"16607" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>417</SUB>> ]
-"16610" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected char[]&quot;\012 : &quot;attempt to release char primitive array elements with an object of type boolean[]&quot;)<SUB>418</SUB>> ]
-"16615" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseIntArrayElements)<SUB>420</SUB>> ]
-"16618" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jintArray&gt;(array))<SUB>420</SUB>> ]
-"16621" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jint*&gt;(elements))<SUB>421</SUB>> ]
-"16626" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>422</SUB>> ]
-"16629" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected int[]&quot;\012 : &quot;attempt to release int primitive array elements with an object of type boolean[]&quot;)<SUB>423</SUB>> ]
-"16634" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseLongArrayElements)<SUB>425</SUB>> ]
-"16637" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jlongArray&gt;(array))<SUB>425</SUB>> ]
-"16640" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jlong*&gt;(elements))<SUB>426</SUB>> ]
-"16645" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>427</SUB>> ]
-"16648" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected long[]&quot;\012 : &quot;attempt to release long primitive array elements with an object of type boolean[]&quot;)<SUB>428</SUB>> ]
-"16653" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseFloatArrayElements)<SUB>430</SUB>> ]
-"16656" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jfloatArray&gt;(array))<SUB>430</SUB>> ]
-"16659" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jfloat*&gt;(elements))<SUB>431</SUB>> ]
-"16664" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>432</SUB>> ]
-"16667" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected float[]&quot;\012 : &quot;attempt to release float primitive array elements with an object of type boolean[]&quot;)<SUB>433</SUB>> ]
-"16672" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseDoubleArrayElements)<SUB>435</SUB>> ]
-"16675" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jdoubleArray&gt;(array))<SUB>435</SUB>> ]
-"16678" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jdouble*&gt;(elements))<SUB>436</SUB>> ]
-"16683" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>437</SUB>> ]
-"16686" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected double[]&quot;\012 : &quot;attempt to release double primitive array elements with an object of type boolean[]&quot;)<SUB>438</SUB>> ]
-"16691" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseBooleanArrayElements)<SUB>442</SUB>> ]
-"16701" [label = <(NewByteArray,env_-&gt;NewByteArray(10))<SUB>445</SUB>> ]
-"16710" [label = <(GetByteArrayElements,env_-&gt;GetByteArrayElements(array, &amp;is_copy))<SUB>447</SUB>> ]
-"16718" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseBooleanArrayElements)<SUB>449</SUB>> ]
-"16721" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbooleanArray&gt;(array))<SUB>449</SUB>> ]
-"16724" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jboolean*&gt;(elements))<SUB>450</SUB>> ]
-"16729" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>451</SUB>> ]
-"16732" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type byte[] expected boolean[]&quot;\012 : &quot;attempt to release boolean primitive array elements with an object of type byte[]&quot;)<SUB>452</SUB>> ]
-"16739" [label = <(NewStringUTF,env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>454</SUB>> ]
-"16745" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseBooleanArrayElements)<SUB>455</SUB>> ]
-"16748" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbooleanArray&gt;(object))<SUB>455</SUB>> ]
-"16751" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jboolean*&gt;(elements))<SUB>456</SUB>> ]
-"16756" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>457</SUB>> ]
-"16759" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;attempt to release boolean primitive array elements with an object of type &quot;\012 &quot;java.lang.String&quot;)<SUB>458</SUB>> ]
-"16764" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleaseByteArrayElements)<SUB>463</SUB>> ]
-"16773" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>465</SUB>> ]
-"16526" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>397</SUB>> ]
-"16534" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewBooleanArray)<SUB>400</SUB>> ]
-"16547" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetBooleanArrayElements)<SUB>403</SUB>> ]
-"16551" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>403</SUB>> ]
-"16560" [label = <(FIELD_IDENTIFIER,ReleaseByteArrayElements,ReleaseByteArrayElements)<SUB>405</SUB>> ]
-"16562" [label = <(UNKNOWN,jbyteArray,jbyteArray)<SUB>405</SUB>> ]
-"16565" [label = <(UNKNOWN,jbyte*,jbyte*)<SUB>406</SUB>> ]
-"16571" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>407</SUB>> ]
-"16579" [label = <(FIELD_IDENTIFIER,ReleaseShortArrayElements,ReleaseShortArrayElements)<SUB>410</SUB>> ]
-"16581" [label = <(UNKNOWN,jshortArray,jshortArray)<SUB>410</SUB>> ]
-"16584" [label = <(UNKNOWN,jshort*,jshort*)<SUB>411</SUB>> ]
-"16590" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>412</SUB>> ]
-"16598" [label = <(FIELD_IDENTIFIER,ReleaseCharArrayElements,ReleaseCharArrayElements)<SUB>415</SUB>> ]
-"16600" [label = <(UNKNOWN,jcharArray,jcharArray)<SUB>415</SUB>> ]
-"16603" [label = <(UNKNOWN,jchar*,jchar*)<SUB>416</SUB>> ]
-"16609" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>417</SUB>> ]
-"16617" [label = <(FIELD_IDENTIFIER,ReleaseIntArrayElements,ReleaseIntArrayElements)<SUB>420</SUB>> ]
-"16619" [label = <(UNKNOWN,jintArray,jintArray)<SUB>420</SUB>> ]
-"16622" [label = <(UNKNOWN,jint*,jint*)<SUB>421</SUB>> ]
-"16628" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>422</SUB>> ]
-"16636" [label = <(FIELD_IDENTIFIER,ReleaseLongArrayElements,ReleaseLongArrayElements)<SUB>425</SUB>> ]
-"16638" [label = <(UNKNOWN,jlongArray,jlongArray)<SUB>425</SUB>> ]
-"16641" [label = <(UNKNOWN,jlong*,jlong*)<SUB>426</SUB>> ]
-"16647" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>427</SUB>> ]
-"16655" [label = <(FIELD_IDENTIFIER,ReleaseFloatArrayElements,ReleaseFloatArrayElements)<SUB>430</SUB>> ]
-"16657" [label = <(UNKNOWN,jfloatArray,jfloatArray)<SUB>430</SUB>> ]
-"16660" [label = <(UNKNOWN,jfloat*,jfloat*)<SUB>431</SUB>> ]
-"16666" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>432</SUB>> ]
-"16674" [label = <(FIELD_IDENTIFIER,ReleaseDoubleArrayElements,ReleaseDoubleArrayElements)<SUB>435</SUB>> ]
-"16676" [label = <(UNKNOWN,jdoubleArray,jdoubleArray)<SUB>435</SUB>> ]
-"16679" [label = <(UNKNOWN,jdouble*,jdouble*)<SUB>436</SUB>> ]
-"16685" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>437</SUB>> ]
-"16693" [label = <(FIELD_IDENTIFIER,ReleaseBooleanArrayElements,ReleaseBooleanArrayElements)<SUB>442</SUB>> ]
-"16702" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewByteArray)<SUB>445</SUB>> ]
-"16711" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetByteArrayElements)<SUB>447</SUB>> ]
-"16715" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>447</SUB>> ]
-"16720" [label = <(FIELD_IDENTIFIER,ReleaseBooleanArrayElements,ReleaseBooleanArrayElements)<SUB>449</SUB>> ]
-"16722" [label = <(UNKNOWN,jbooleanArray,jbooleanArray)<SUB>449</SUB>> ]
-"16725" [label = <(UNKNOWN,jboolean*,jboolean*)<SUB>450</SUB>> ]
-"16731" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>451</SUB>> ]
-"16740" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewStringUTF)<SUB>454</SUB>> ]
-"16747" [label = <(FIELD_IDENTIFIER,ReleaseBooleanArrayElements,ReleaseBooleanArrayElements)<SUB>455</SUB>> ]
-"16749" [label = <(UNKNOWN,jbooleanArray,jbooleanArray)<SUB>455</SUB>> ]
-"16752" [label = <(UNKNOWN,jboolean*,jboolean*)<SUB>456</SUB>> ]
-"16758" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>457</SUB>> ]
-"16766" [label = <(FIELD_IDENTIFIER,ReleaseByteArrayElements,ReleaseByteArrayElements)<SUB>463</SUB>> ]
-"16775" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>465</SUB>> ]
-"16536" [label = <(FIELD_IDENTIFIER,NewBooleanArray,NewBooleanArray)<SUB>400</SUB>> ]
-"16549" [label = <(FIELD_IDENTIFIER,GetBooleanArrayElements,GetBooleanArrayElements)<SUB>403</SUB>> ]
-"16704" [label = <(FIELD_IDENTIFIER,NewByteArray,NewByteArray)<SUB>445</SUB>> ]
-"16713" [label = <(FIELD_IDENTIFIER,GetByteArrayElements,GetByteArrayElements)<SUB>447</SUB>> ]
-"16742" [label = <(FIELD_IDENTIFIER,NewStringUTF,NewStringUTF)<SUB>454</SUB>> ]
-"16517" [label = <(METHOD,ReleasePrimitiveArrayElementsOfWrongType)<SUB>396</SUB>> ]
-"16777" [label = <(METHOD_RETURN,void)<SUB>396</SUB>> ]
-  "16521" -> "16536" 
-  "16770" -> "16777" 
-  "16523" -> "16521" 
-  "16531" -> "16539" 
-  "16538" -> "16549" 
-  "16544" -> "16554" 
-  "16553" -> "16560" 
-  "16557" -> "16571" 
-  "16568" -> "16579" 
-  "16576" -> "16590" 
-  "16587" -> "16598" 
-  "16595" -> "16609" 
-  "16606" -> "16617" 
-  "16614" -> "16628" 
-  "16625" -> "16636" 
-  "16633" -> "16647" 
-  "16644" -> "16655" 
-  "16652" -> "16666" 
-  "16663" -> "16674" 
-  "16671" -> "16685" 
-  "16682" -> "16693" 
-  "16690" -> "16704" 
-  "16699" -> "16713" 
-  "16708" -> "16720" 
-  "16717" -> "16731" 
-  "16728" -> "16742" 
-  "16737" -> "16747" 
-  "16744" -> "16758" 
-  "16755" -> "16766" 
-  "16763" -> "16775" 
-  "16772" -> "16770" 
-  "16524" -> "16523" 
-  "16533" -> "16531" 
-  "16539" -> "16538" 
-  "16546" -> "16544" 
-  "16554" -> "16553" 
-  "16558" -> "16562" 
-  "16561" -> "16565" 
-  "16564" -> "16557" 
-  "16569" -> "16572" 
-  "16572" -> "16568" 
-  "16577" -> "16581" 
-  "16580" -> "16584" 
-  "16583" -> "16576" 
-  "16588" -> "16591" 
-  "16591" -> "16587" 
-  "16596" -> "16600" 
-  "16599" -> "16603" 
-  "16602" -> "16595" 
-  "16607" -> "16610" 
-  "16610" -> "16606" 
-  "16615" -> "16619" 
-  "16618" -> "16622" 
-  "16621" -> "16614" 
-  "16626" -> "16629" 
-  "16629" -> "16625" 
-  "16634" -> "16638" 
-  "16637" -> "16641" 
-  "16640" -> "16633" 
-  "16645" -> "16648" 
-  "16648" -> "16644" 
-  "16653" -> "16657" 
-  "16656" -> "16660" 
-  "16659" -> "16652" 
-  "16664" -> "16667" 
-  "16667" -> "16663" 
-  "16672" -> "16676" 
-  "16675" -> "16679" 
-  "16678" -> "16671" 
-  "16683" -> "16686" 
-  "16686" -> "16682" 
-  "16691" -> "16690" 
-  "16701" -> "16699" 
-  "16710" -> "16708" 
-  "16718" -> "16722" 
-  "16721" -> "16725" 
-  "16724" -> "16717" 
-  "16729" -> "16732" 
-  "16732" -> "16728" 
-  "16739" -> "16737" 
-  "16745" -> "16749" 
-  "16748" -> "16752" 
-  "16751" -> "16744" 
-  "16756" -> "16759" 
-  "16759" -> "16755" 
-  "16764" -> "16763" 
-  "16773" -> "16772" 
-  "16526" -> "16524" 
-  "16534" -> "16533" 
-  "16547" -> "16551" 
-  "16551" -> "16546" 
-  "16560" -> "16558" 
-  "16562" -> "16561" 
-  "16565" -> "16564" 
-  "16571" -> "16569" 
-  "16579" -> "16577" 
-  "16581" -> "16580" 
-  "16584" -> "16583" 
-  "16590" -> "16588" 
-  "16598" -> "16596" 
-  "16600" -> "16599" 
-  "16603" -> "16602" 
-  "16609" -> "16607" 
-  "16617" -> "16615" 
-  "16619" -> "16618" 
-  "16622" -> "16621" 
-  "16628" -> "16626" 
-  "16636" -> "16634" 
-  "16638" -> "16637" 
-  "16641" -> "16640" 
-  "16647" -> "16645" 
-  "16655" -> "16653" 
-  "16657" -> "16656" 
-  "16660" -> "16659" 
-  "16666" -> "16664" 
-  "16674" -> "16672" 
-  "16676" -> "16675" 
-  "16679" -> "16678" 
-  "16685" -> "16683" 
-  "16693" -> "16691" 
-  "16702" -> "16701" 
-  "16711" -> "16715" 
-  "16715" -> "16710" 
-  "16720" -> "16718" 
-  "16722" -> "16721" 
-  "16725" -> "16724" 
-  "16731" -> "16729" 
-  "16740" -> "16739" 
-  "16747" -> "16745" 
-  "16749" -> "16748" 
-  "16752" -> "16751" 
-  "16758" -> "16756" 
-  "16766" -> "16764" 
-  "16775" -> "16773" 
-  "16536" -> "16534" 
-  "16549" -> "16547" 
-  "16704" -> "16702" 
-  "16713" -> "16711" 
-  "16742" -> "16740" 
-  "16517" -> "16526" 
+digraph "NewObjectArrayBadArguments" {  
+"16957" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>599</SUB>> ]
+"16966" [label = <(&lt;operator&gt;.assignment,element_class = env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>602</SUB>> ]
+"16973" [label = <(ASSERT_NE,ASSERT_NE(element_class, nullptr))<SUB>603</SUB>> ]
+"16976" [label = <(NewObjectArray,env_-&gt;NewObjectArray(-1, element_class, nullptr))<SUB>605</SUB>> ]
+"16984" [label = <(Check,jni_abort_catcher.Check(check_jni ? &quot;negative jsize: -1&quot; : &quot;negative array length: -1&quot;))<SUB>606</SUB>> ]
+"16992" [label = <(NewObjectArray,env_-&gt;NewObjectArray(std::numeric_limits&lt;jint&gt;::min(), element_class, nullptr))<SUB>608</SUB>> ]
+"17008" [label = <(Check,jni_abort_catcher.Check(check_jni ? &quot;negative jsize: -2147483648&quot;\012 : &quot;negative array length: -2147483648&quot;))<SUB>609</SUB>> ]
+"17016" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>612</SUB>> ]
+"16959" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>599</SUB>> ]
+"16968" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>602</SUB>> ]
+"16977" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewObjectArray)<SUB>605</SUB>> ]
+"16980" [label = <(&lt;operator&gt;.minus,-1)<SUB>605</SUB>> ]
+"16985" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>606</SUB>> ]
+"16988" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;negative jsize: -1&quot; : &quot;negative array length: -1&quot;)<SUB>606</SUB>> ]
+"16993" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewObjectArray)<SUB>608</SUB>> ]
+"16996" [label = <(&lt;operator&gt;.greaterThan,std::numeric_limits&lt;jint&gt;::min())<SUB>608</SUB>> ]
+"17009" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>609</SUB>> ]
+"17012" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;negative jsize: -2147483648&quot;\012 : &quot;negative array length: -2147483648&quot;)<SUB>609</SUB>> ]
+"17018" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>612</SUB>> ]
+"16960" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>599</SUB>> ]
+"16969" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>602</SUB>> ]
+"16979" [label = <(FIELD_IDENTIFIER,NewObjectArray,NewObjectArray)<SUB>605</SUB>> ]
+"16987" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>606</SUB>> ]
+"16995" [label = <(FIELD_IDENTIFIER,NewObjectArray,NewObjectArray)<SUB>608</SUB>> ]
+"16997" [label = <(&lt;operator&gt;.lessThan,std::numeric_limits&lt;jint)<SUB>608</SUB>> ]
+"17002" [label = <(::min,::min())<SUB>608</SUB>> ]
+"17011" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>609</SUB>> ]
+"17019" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>612</SUB>> ]
+"16962" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>599</SUB>> ]
+"16971" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>602</SUB>> ]
+"16998" [label = <(&lt;operator&gt;.fieldAccess,std::numeric_limits)<SUB>608</SUB>> ]
+"17003" [label = <(&lt;operator&gt;.fieldAccess,::min)<SUB>608</SUB>> ]
+"17021" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>612</SUB>> ]
+"17000" [label = <(FIELD_IDENTIFIER,numeric_limits,numeric_limits)<SUB>608</SUB>> ]
+"17005" [label = <(FIELD_IDENTIFIER,min,min)<SUB>608</SUB>> ]
+"16953" [label = <(METHOD,NewObjectArrayBadArguments)<SUB>598</SUB>> ]
+"17023" [label = <(METHOD_RETURN,void)<SUB>598</SUB>> ]
+  "16957" -> "16971" 
+  "16966" -> "16973" 
+  "16973" -> "16979" 
+  "16976" -> "16987" 
+  "16984" -> "16995" 
+  "16992" -> "17011" 
+  "17008" -> "17021" 
+  "17016" -> "17023" 
+  "16959" -> "16957" 
+  "16968" -> "16966" 
+  "16977" -> "16980" 
+  "16980" -> "16976" 
+  "16985" -> "16988" 
+  "16988" -> "16984" 
+  "16993" -> "17000" 
+  "16996" -> "16992" 
+  "17009" -> "17012" 
+  "17012" -> "17008" 
+  "17018" -> "17016" 
+  "16960" -> "16959" 
+  "16969" -> "16968" 
+  "16979" -> "16977" 
+  "16987" -> "16985" 
+  "16995" -> "16993" 
+  "16997" -> "17005" 
+  "17002" -> "16996" 
+  "17011" -> "17009" 
+  "17019" -> "17018" 
+  "16962" -> "16960" 
+  "16971" -> "16969" 
+  "16998" -> "16997" 
+  "17003" -> "17002" 
+  "17021" -> "17019" 
+  "17000" -> "16998" 
+  "17005" -> "17003" 
+  "16953" -> "16962" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/298-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/298-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/298-cfg.dot	2023-06-07 19:35:28.417384331 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/298-cfg.dot	2023-06-07 19:35:34.927383763 +0330
@@ -1,69 +1,270 @@
-digraph "GetReleasePrimitiveArrayCriticalOfWrongType" {  
-"16783" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>469</SUB>> ]
-"16792" [label = <(&lt;operator&gt;.assignment,object = env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>472</SUB>> ]
-"16801" [label = <(&lt;operator&gt;.assignment,* elements = env_-&gt;GetPrimitiveArrayCritical(reinterpret_cast&lt;jarray&gt;(object), &amp;is_copy))<SUB>474</SUB>> ]
-"16812" [label = <(Check,jni_abort_catcher.Check(check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;expected primitive array, given java.lang.String&quot;))<SUB>475</SUB>> ]
-"16820" [label = <(ReleasePrimitiveArrayCritical,env_-&gt;ReleasePrimitiveArrayCritical(reinterpret_cast&lt;jarray&gt;(object), elements, 0))<SUB>477</SUB>> ]
-"16829" [label = <(Check,jni_abort_catcher.Check(check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;expected primitive array, given java.lang.String&quot;))<SUB>478</SUB>> ]
-"16837" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>481</SUB>> ]
-"16785" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>469</SUB>> ]
-"16794" [label = <(NewStringUTF,env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>472</SUB>> ]
-"16803" [label = <(GetPrimitiveArrayCritical,env_-&gt;GetPrimitiveArrayCritical(reinterpret_cast&lt;jarray&gt;(object), &amp;is_copy))<SUB>474</SUB>> ]
-"16813" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>475</SUB>> ]
-"16816" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;expected primitive array, given java.lang.String&quot;)<SUB>475</SUB>> ]
-"16821" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;ReleasePrimitiveArrayCritical)<SUB>477</SUB>> ]
-"16824" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jarray&gt;(object))<SUB>477</SUB>> ]
-"16830" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>478</SUB>> ]
-"16833" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;expected primitive array, given java.lang.String&quot;)<SUB>478</SUB>> ]
-"16839" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>481</SUB>> ]
-"16786" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>469</SUB>> ]
-"16795" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewStringUTF)<SUB>472</SUB>> ]
-"16804" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetPrimitiveArrayCritical)<SUB>474</SUB>> ]
-"16807" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jarray&gt;(object))<SUB>474</SUB>> ]
-"16810" [label = <(&lt;operator&gt;.addressOf,&amp;is_copy)<SUB>474</SUB>> ]
-"16815" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>475</SUB>> ]
-"16823" [label = <(FIELD_IDENTIFIER,ReleasePrimitiveArrayCritical,ReleasePrimitiveArrayCritical)<SUB>477</SUB>> ]
-"16825" [label = <(UNKNOWN,jarray,jarray)<SUB>477</SUB>> ]
-"16832" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>478</SUB>> ]
-"16840" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>481</SUB>> ]
-"16788" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>469</SUB>> ]
-"16797" [label = <(FIELD_IDENTIFIER,NewStringUTF,NewStringUTF)<SUB>472</SUB>> ]
-"16806" [label = <(FIELD_IDENTIFIER,GetPrimitiveArrayCritical,GetPrimitiveArrayCritical)<SUB>474</SUB>> ]
-"16808" [label = <(UNKNOWN,jarray,jarray)<SUB>474</SUB>> ]
-"16842" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>481</SUB>> ]
-"16779" [label = <(METHOD,GetReleasePrimitiveArrayCriticalOfWrongType)<SUB>468</SUB>> ]
-"16844" [label = <(METHOD_RETURN,void)<SUB>468</SUB>> ]
-  "16783" -> "16797" 
-  "16792" -> "16806" 
-  "16801" -> "16815" 
-  "16812" -> "16823" 
-  "16820" -> "16832" 
-  "16829" -> "16842" 
-  "16837" -> "16844" 
-  "16785" -> "16783" 
-  "16794" -> "16792" 
-  "16803" -> "16801" 
-  "16813" -> "16816" 
-  "16816" -> "16812" 
-  "16821" -> "16825" 
-  "16824" -> "16820" 
-  "16830" -> "16833" 
-  "16833" -> "16829" 
-  "16839" -> "16837" 
-  "16786" -> "16785" 
-  "16795" -> "16794" 
-  "16804" -> "16808" 
-  "16807" -> "16810" 
-  "16810" -> "16803" 
-  "16815" -> "16813" 
-  "16823" -> "16821" 
-  "16825" -> "16824" 
-  "16832" -> "16830" 
-  "16840" -> "16839" 
-  "16788" -> "16786" 
-  "16797" -> "16795" 
-  "16806" -> "16804" 
-  "16808" -> "16807" 
-  "16842" -> "16840" 
-  "16779" -> "16788" 
+digraph "SetUpForTest" {  
+"17153" [label = <(&lt;operator&gt;.assignment,env_ = Thread::Current()-&gt;GetJniEnv())<SUB>639</SUB>> ]
+"17162" [label = <(&lt;operator&gt;.assignment,jklass_ = env_-&gt;FindClass(&quot;MyClassNatives&quot;))<SUB>640</SUB>> ]
+"17169" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(jklass_ != nullptr) &lt;&lt; method_name &lt;&lt; &quot; &quot; &lt;&lt; method_sig)<SUB>641</SUB>> ]
+"17202" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(jmethod_ != nullptr) &lt;&lt; method_name &lt;&lt; &quot; &quot; &lt;&lt; method_sig)<SUB>648</SUB>> ]
+"17248" [label = <(&lt;operator&gt;.assignment,constructor = env_-&gt;GetMethodID(jklass_, &quot;&lt;init&gt;&quot;, &quot;()V&quot;))<SUB>658</SUB>> ]
+"17257" [label = <(&lt;operator&gt;.assignment,jobj_ = env_-&gt;NewObject(jklass_, constructor))<SUB>659</SUB>> ]
+"17265" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(jobj_ != nullptr) &lt;&lt; method_name &lt;&lt; &quot; &quot; &lt;&lt; method_sig)<SUB>660</SUB>> ]
+"17032" [label = <(&lt;operator&gt;.logicalNot,!runtime_-&gt;IsStarted())<SUB>619</SUB>> ]
+"17155" [label = <(GetJniEnv,Thread::Current()-&gt;GetJniEnv())<SUB>639</SUB>> ]
+"17164" [label = <(FindClass,env_-&gt;FindClass(&quot;MyClassNatives&quot;))<SUB>640</SUB>> ]
+"17170" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(jklass_ != nullptr) &lt;&lt; method_name &lt;&lt; &quot; &quot;)<SUB>641</SUB>> ]
+"17203" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(jmethod_ != nullptr) &lt;&lt; method_name &lt;&lt; &quot; &quot;)<SUB>648</SUB>> ]
+"17213" [label = <(&lt;operator&gt;.notEquals,native_fnptr != nullptr)<SUB>650</SUB>> ]
+"17250" [label = <(GetMethodID,env_-&gt;GetMethodID(jklass_, &quot;&lt;init&gt;&quot;, &quot;()V&quot;))<SUB>658</SUB>> ]
+"17259" [label = <(NewObject,env_-&gt;NewObject(jklass_, constructor))<SUB>659</SUB>> ]
+"17266" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(jobj_ != nullptr) &lt;&lt; method_name &lt;&lt; &quot; &quot;)<SUB>660</SUB>> ]
+"17033" [label = <(IsStarted,runtime_-&gt;IsStarted())<SUB>619</SUB>> ]
+"17137" [label = <(TransitionFromSuspendedToRunnable,Thread::Current()-&gt;TransitionFromSuspendedToRunnable())<SUB>634</SUB>> ]
+"17145" [label = <(&lt;operator&gt;.assignment,started = runtime_-&gt;Start())<SUB>635</SUB>> ]
+"17151" [label = <(CHECK,CHECK(started))<SUB>636</SUB>> ]
+"17156" [label = <(&lt;operator&gt;.indirectFieldAccess,Thread::Current()-&gt;GetJniEnv)<SUB>639</SUB>> ]
+"17165" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>640</SUB>> ]
+"17171" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(jklass_ != nullptr) &lt;&lt; method_name)<SUB>641</SUB>> ]
+"17182" [label = <(&lt;operator&gt;.assignment,jmethod_ = env_-&gt;GetStaticMethodID(jklass_, method_name, method_sig))<SUB>644</SUB>> ]
+"17204" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(jmethod_ != nullptr) &lt;&lt; method_name)<SUB>648</SUB>> ]
+"17218" [label = <(&lt;operator&gt;.assignment,methods[] = { { method_name, method_sig, native_fnptr } })<SUB>651</SUB>> ]
+"17225" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_EQ(JNI_OK, env_-&gt;RegisterNatives(jklass_, methods, 1))\012 &lt;&lt; method_name &lt;&lt; &quot; &quot; &lt;&lt; method_sig)<SUB>652</SUB>> ]
+"17251" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetMethodID)<SUB>658</SUB>> ]
+"17260" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewObject)<SUB>659</SUB>> ]
+"17267" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(jobj_ != nullptr) &lt;&lt; method_name)<SUB>660</SUB>> ]
+"17034" [label = <(&lt;operator&gt;.indirectFieldAccess,runtime_-&gt;IsStarted)<SUB>619</SUB>> ]
+"17040" [label = <(soa,soa(Thread::Current()))<SUB>621</SUB>> ]
+"17045" [label = <(&lt;operator&gt;.assignment,class_loader_ = LoadDex(&quot;MyClassNatives&quot;))<SUB>622</SUB>> ]
+"17049" [label = <(&lt;operator&gt;.greaterThan,StackHandleScope&lt;1&gt; hs(soa.Self()))<SUB>623</SUB>> ]
+"17058" [label = <(&lt;operator&gt;.greaterThan,Handle&lt;mirror::ClassLoader&gt; loader(\012            hs.NewHandle(soa.Decode&lt;mirror::ClassLoader&gt;(class_loader_))))<SUB>624</SUB>> ]
+"17078" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c = class_linker_-&gt;FindClass(soa.Self(), &quot;LMyClassNatives;&quot;, loader))<SUB>626</SUB>> ]
+"17097" [label = <(&lt;operator&gt;.assignment,pointer_size = class_linker_-&gt;GetImagePointerSize())<SUB>627</SUB>> ]
+"17104" [label = <(&lt;operator&gt;.assignment,* method = c-&gt;FindClassMethod(method_name, method_sig, pointer_size))<SUB>628</SUB>> ]
+"17113" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(method != nullptr) &lt;&lt; method_name &lt;&lt; &quot; &quot; &lt;&lt; method_sig)<SUB>629</SUB>> ]
+"17123" [label = <(ASSERT_EQ,ASSERT_EQ(direct, method-&gt;IsDirect()))<SUB>630</SUB>> ]
+"17129" [label = <(SetEntryPointFromQuickCompiledCode,method-&gt;SetEntryPointFromQuickCompiledCode(class_linker_-&gt;GetRuntimeQuickGenericJniStub()))<SUB>631</SUB>> ]
+"17138" [label = <(&lt;operator&gt;.indirectFieldAccess,Thread::Current()-&gt;TransitionFromSuspendedToRunnable)<SUB>634</SUB>> ]
+"17147" [label = <(Start,runtime_-&gt;Start())<SUB>635</SUB>> ]
+"17157" [label = <(Thread::Current,Thread::Current())<SUB>639</SUB>> ]
+"17161" [label = <(FIELD_IDENTIFIER,GetJniEnv,GetJniEnv)<SUB>639</SUB>> ]
+"17167" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>640</SUB>> ]
+"17172" [label = <(ASSERT_TRUE,ASSERT_TRUE(jklass_ != nullptr))<SUB>641</SUB>> ]
+"17184" [label = <(GetStaticMethodID,env_-&gt;GetStaticMethodID(jklass_, method_name, method_sig))<SUB>644</SUB>> ]
+"17193" [label = <(&lt;operator&gt;.assignment,jmethod_ = env_-&gt;GetMethodID(jklass_, method_name, method_sig))<SUB>646</SUB>> ]
+"17205" [label = <(ASSERT_TRUE,ASSERT_TRUE(jmethod_ != nullptr))<SUB>648</SUB>> ]
+"17220" [label = <(&lt;operator&gt;.arrayInitializer,{ { method_name, method_sig, native_fnptr } })<SUB>651</SUB>> ]
+"17226" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_EQ(JNI_OK, env_-&gt;RegisterNatives(jklass_, methods, 1))\012 &lt;&lt; method_name &lt;&lt; &quot; &quot;)<SUB>652</SUB>> ]
+"17242" [label = <(UnregisterNatives,env_-&gt;UnregisterNatives(jklass_))<SUB>655</SUB>> ]
+"17253" [label = <(FIELD_IDENTIFIER,GetMethodID,GetMethodID)<SUB>658</SUB>> ]
+"17262" [label = <(FIELD_IDENTIFIER,NewObject,NewObject)<SUB>659</SUB>> ]
+"17268" [label = <(ASSERT_TRUE,ASSERT_TRUE(jobj_ != nullptr))<SUB>660</SUB>> ]
+"17036" [label = <(FIELD_IDENTIFIER,IsStarted,IsStarted)<SUB>619</SUB>> ]
+"17041" [label = <(Thread::Current,Thread::Current())<SUB>621</SUB>> ]
+"17047" [label = <(LoadDex,LoadDex(&quot;MyClassNatives&quot;))<SUB>622</SUB>> ]
+"17050" [label = <(&lt;operator&gt;.lessThan,StackHandleScope&lt;1)<SUB>623</SUB>> ]
+"17053" [label = <(hs,hs(soa.Self()))<SUB>623</SUB>> ]
+"17059" [label = <(&lt;operator&gt;.lessThan,Handle&lt;mirror::ClassLoader)<SUB>624</SUB>> ]
+"17064" [label = <(loader,loader(\012            hs.NewHandle(soa.Decode&lt;mirror::ClassLoader&gt;(class_loader_))))<SUB>624</SUB>> ]
+"17079" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c)<SUB>626</SUB>> ]
+"17086" [label = <(FindClass,class_linker_-&gt;FindClass(soa.Self(), &quot;LMyClassNatives;&quot;, loader))<SUB>626</SUB>> ]
+"17099" [label = <(GetImagePointerSize,class_linker_-&gt;GetImagePointerSize())<SUB>627</SUB>> ]
+"17106" [label = <(FindClassMethod,c-&gt;FindClassMethod(method_name, method_sig, pointer_size))<SUB>628</SUB>> ]
+"17114" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(method != nullptr) &lt;&lt; method_name &lt;&lt; &quot; &quot;)<SUB>629</SUB>> ]
+"17125" [label = <(IsDirect,method-&gt;IsDirect())<SUB>630</SUB>> ]
+"17130" [label = <(&lt;operator&gt;.indirectFieldAccess,method-&gt;SetEntryPointFromQuickCompiledCode)<SUB>631</SUB>> ]
+"17133" [label = <(GetRuntimeQuickGenericJniStub,class_linker_-&gt;GetRuntimeQuickGenericJniStub())<SUB>631</SUB>> ]
+"17139" [label = <(Thread::Current,Thread::Current())<SUB>634</SUB>> ]
+"17143" [label = <(FIELD_IDENTIFIER,TransitionFromSuspendedToRunnable,TransitionFromSuspendedToRunnable)<SUB>634</SUB>> ]
+"17148" [label = <(&lt;operator&gt;.indirectFieldAccess,runtime_-&gt;Start)<SUB>635</SUB>> ]
+"17158" [label = <(&lt;operator&gt;.fieldAccess,Thread::Current)<SUB>639</SUB>> ]
+"17173" [label = <(&lt;operator&gt;.notEquals,jklass_ != nullptr)<SUB>641</SUB>> ]
+"17185" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetStaticMethodID)<SUB>644</SUB>> ]
+"17195" [label = <(GetMethodID,env_-&gt;GetMethodID(jklass_, method_name, method_sig))<SUB>646</SUB>> ]
+"17206" [label = <(&lt;operator&gt;.notEquals,jmethod_ != nullptr)<SUB>648</SUB>> ]
+"17221" [label = <(&lt;operator&gt;.arrayInitializer,{ method_name, method_sig, native_fnptr })<SUB>651</SUB>> ]
+"17227" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_EQ(JNI_OK, env_-&gt;RegisterNatives(jklass_, methods, 1))\012 &lt;&lt; method_name)<SUB>652</SUB>> ]
+"17243" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;UnregisterNatives)<SUB>655</SUB>> ]
+"17269" [label = <(&lt;operator&gt;.notEquals,jobj_ != nullptr)<SUB>660</SUB>> ]
+"17042" [label = <(&lt;operator&gt;.fieldAccess,Thread::Current)<SUB>621</SUB>> ]
+"17054" [label = <(Self,soa.Self())<SUB>623</SUB>> ]
+"17061" [label = <(&lt;operator&gt;.fieldAccess,mirror::ClassLoader)<SUB>624</SUB>> ]
+"17065" [label = <(NewHandle,hs.NewHandle(soa.Decode&lt;mirror::ClassLoader&gt;(class_loader_)))<SUB>625</SUB>> ]
+"17080" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>626</SUB>> ]
+"17087" [label = <(&lt;operator&gt;.indirectFieldAccess,class_linker_-&gt;FindClass)<SUB>626</SUB>> ]
+"17090" [label = <(Self,soa.Self())<SUB>626</SUB>> ]
+"17100" [label = <(&lt;operator&gt;.indirectFieldAccess,class_linker_-&gt;GetImagePointerSize)<SUB>627</SUB>> ]
+"17107" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;FindClassMethod)<SUB>628</SUB>> ]
+"17115" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(method != nullptr) &lt;&lt; method_name)<SUB>629</SUB>> ]
+"17126" [label = <(&lt;operator&gt;.indirectFieldAccess,method-&gt;IsDirect)<SUB>630</SUB>> ]
+"17132" [label = <(FIELD_IDENTIFIER,SetEntryPointFromQuickCompiledCode,SetEntryPointFromQuickCompiledCode)<SUB>631</SUB>> ]
+"17134" [label = <(&lt;operator&gt;.indirectFieldAccess,class_linker_-&gt;GetRuntimeQuickGenericJniStub)<SUB>631</SUB>> ]
+"17140" [label = <(&lt;operator&gt;.fieldAccess,Thread::Current)<SUB>634</SUB>> ]
+"17150" [label = <(FIELD_IDENTIFIER,Start,Start)<SUB>635</SUB>> ]
+"17160" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>639</SUB>> ]
+"17187" [label = <(FIELD_IDENTIFIER,GetStaticMethodID,GetStaticMethodID)<SUB>644</SUB>> ]
+"17196" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetMethodID)<SUB>646</SUB>> ]
+"17228" [label = <(ASSERT_EQ,ASSERT_EQ(JNI_OK, env_-&gt;RegisterNatives(jklass_, methods, 1)))<SUB>652</SUB>> ]
+"17245" [label = <(FIELD_IDENTIFIER,UnregisterNatives,UnregisterNatives)<SUB>655</SUB>> ]
+"17044" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>621</SUB>> ]
+"17055" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>623</SUB>> ]
+"17063" [label = <(FIELD_IDENTIFIER,ClassLoader,ClassLoader)<SUB>624</SUB>> ]
+"17066" [label = <(&lt;operator&gt;.fieldAccess,hs.NewHandle)<SUB>625</SUB>> ]
+"17069" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::ClassLoader&gt;(class_loader_))<SUB>625</SUB>> ]
+"17082" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>626</SUB>> ]
+"17089" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>626</SUB>> ]
+"17091" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>626</SUB>> ]
+"17102" [label = <(FIELD_IDENTIFIER,GetImagePointerSize,GetImagePointerSize)<SUB>627</SUB>> ]
+"17109" [label = <(FIELD_IDENTIFIER,FindClassMethod,FindClassMethod)<SUB>628</SUB>> ]
+"17116" [label = <(ASSERT_TRUE,ASSERT_TRUE(method != nullptr))<SUB>629</SUB>> ]
+"17128" [label = <(FIELD_IDENTIFIER,IsDirect,IsDirect)<SUB>630</SUB>> ]
+"17136" [label = <(FIELD_IDENTIFIER,GetRuntimeQuickGenericJniStub,GetRuntimeQuickGenericJniStub)<SUB>631</SUB>> ]
+"17142" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>634</SUB>> ]
+"17198" [label = <(FIELD_IDENTIFIER,GetMethodID,GetMethodID)<SUB>646</SUB>> ]
+"17230" [label = <(RegisterNatives,env_-&gt;RegisterNatives(jklass_, methods, 1))<SUB>652</SUB>> ]
+"17057" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>623</SUB>> ]
+"17068" [label = <(FIELD_IDENTIFIER,NewHandle,NewHandle)<SUB>625</SUB>> ]
+"17070" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::ClassLoader)<SUB>625</SUB>> ]
+"17084" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>626</SUB>> ]
+"17093" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>626</SUB>> ]
+"17117" [label = <(&lt;operator&gt;.notEquals,method != nullptr)<SUB>629</SUB>> ]
+"17231" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;RegisterNatives)<SUB>652</SUB>> ]
+"17071" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>625</SUB>> ]
+"17074" [label = <(&lt;operator&gt;.fieldAccess,mirror::ClassLoader)<SUB>625</SUB>> ]
+"17233" [label = <(FIELD_IDENTIFIER,RegisterNatives,RegisterNatives)<SUB>652</SUB>> ]
+"17073" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>625</SUB>> ]
+"17076" [label = <(FIELD_IDENTIFIER,ClassLoader,ClassLoader)<SUB>625</SUB>> ]
+"17025" [label = <(METHOD,SetUpForTest)<SUB>615</SUB>> ]
+"17275" [label = <(METHOD_RETURN,void)<SUB>615</SUB>> ]
+  "17153" -> "17167" 
+  "17162" -> "17173" 
+  "17169" -> "17187" 
+  "17169" -> "17198" 
+  "17202" -> "17213" 
+  "17248" -> "17262" 
+  "17257" -> "17269" 
+  "17265" -> "17275" 
+  "17032" -> "17044" 
+  "17032" -> "17160" 
+  "17155" -> "17153" 
+  "17164" -> "17162" 
+  "17170" -> "17169" 
+  "17203" -> "17202" 
+  "17213" -> "17221" 
+  "17213" -> "17245" 
+  "17250" -> "17248" 
+  "17259" -> "17257" 
+  "17266" -> "17265" 
+  "17033" -> "17032" 
+  "17137" -> "17150" 
+  "17145" -> "17151" 
+  "17151" -> "17160" 
+  "17156" -> "17155" 
+  "17165" -> "17164" 
+  "17171" -> "17170" 
+  "17182" -> "17206" 
+  "17204" -> "17203" 
+  "17218" -> "17233" 
+  "17225" -> "17253" 
+  "17251" -> "17250" 
+  "17260" -> "17259" 
+  "17267" -> "17266" 
+  "17034" -> "17033" 
+  "17040" -> "17047" 
+  "17045" -> "17050" 
+  "17049" -> "17063" 
+  "17058" -> "17084" 
+  "17078" -> "17102" 
+  "17097" -> "17109" 
+  "17104" -> "17117" 
+  "17113" -> "17128" 
+  "17123" -> "17132" 
+  "17129" -> "17142" 
+  "17138" -> "17137" 
+  "17147" -> "17145" 
+  "17157" -> "17161" 
+  "17161" -> "17156" 
+  "17167" -> "17165" 
+  "17172" -> "17171" 
+  "17184" -> "17182" 
+  "17193" -> "17206" 
+  "17205" -> "17204" 
+  "17220" -> "17218" 
+  "17226" -> "17225" 
+  "17242" -> "17253" 
+  "17253" -> "17251" 
+  "17262" -> "17260" 
+  "17268" -> "17267" 
+  "17036" -> "17034" 
+  "17041" -> "17040" 
+  "17047" -> "17045" 
+  "17050" -> "17057" 
+  "17053" -> "17049" 
+  "17059" -> "17068" 
+  "17064" -> "17058" 
+  "17079" -> "17089" 
+  "17086" -> "17078" 
+  "17099" -> "17097" 
+  "17106" -> "17104" 
+  "17114" -> "17113" 
+  "17125" -> "17123" 
+  "17130" -> "17136" 
+  "17133" -> "17129" 
+  "17139" -> "17143" 
+  "17143" -> "17138" 
+  "17148" -> "17147" 
+  "17158" -> "17157" 
+  "17173" -> "17172" 
+  "17185" -> "17184" 
+  "17195" -> "17193" 
+  "17206" -> "17205" 
+  "17221" -> "17220" 
+  "17227" -> "17226" 
+  "17243" -> "17242" 
+  "17269" -> "17268" 
+  "17042" -> "17041" 
+  "17054" -> "17053" 
+  "17061" -> "17059" 
+  "17065" -> "17064" 
+  "17080" -> "17079" 
+  "17087" -> "17093" 
+  "17090" -> "17086" 
+  "17100" -> "17099" 
+  "17107" -> "17106" 
+  "17115" -> "17114" 
+  "17126" -> "17125" 
+  "17132" -> "17130" 
+  "17134" -> "17133" 
+  "17140" -> "17139" 
+  "17150" -> "17148" 
+  "17160" -> "17158" 
+  "17187" -> "17185" 
+  "17196" -> "17195" 
+  "17228" -> "17227" 
+  "17245" -> "17243" 
+  "17044" -> "17042" 
+  "17055" -> "17054" 
+  "17063" -> "17061" 
+  "17066" -> "17073" 
+  "17069" -> "17065" 
+  "17082" -> "17080" 
+  "17089" -> "17087" 
+  "17091" -> "17090" 
+  "17102" -> "17100" 
+  "17109" -> "17107" 
+  "17116" -> "17115" 
+  "17128" -> "17126" 
+  "17136" -> "17134" 
+  "17142" -> "17140" 
+  "17198" -> "17196" 
+  "17230" -> "17228" 
+  "17057" -> "17055" 
+  "17068" -> "17066" 
+  "17070" -> "17069" 
+  "17084" -> "17082" 
+  "17093" -> "17091" 
+  "17117" -> "17116" 
+  "17231" -> "17230" 
+  "17071" -> "17076" 
+  "17074" -> "17070" 
+  "17233" -> "17231" 
+  "17073" -> "17071" 
+  "17076" -> "17074" 
+  "17025" -> "17036" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/299-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/299-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/299-cfg.dot	2023-06-07 19:35:28.417384331 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/299-cfg.dot	2023-06-07 19:35:34.927383763 +0330
@@ -1,249 +1,25 @@
-digraph "GetPrimitiveArrayRegionElementsOfWrongType" {  
-"16850" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>485</SUB>> ]
-"16859" [label = <(&lt;operator&gt;.assignment,kLength = 10)<SUB>487</SUB>> ]
-"16863" [label = <(&lt;operator&gt;.assignment,array = env_-&gt;NewBooleanArray(kLength))<SUB>488</SUB>> ]
-"16870" [label = <(ASSERT_TRUE,ASSERT_TRUE(array != nullptr))<SUB>489</SUB>> ]
-"16875" [label = <(GetByteArrayRegion,env_-&gt;GetByteArrayRegion(reinterpret_cast&lt;jbyteArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jbyte*&gt;(elements)))<SUB>491</SUB>> ]
-"16887" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected byte[]&quot;\012 : &quot;attempt to get region of byte primitive array elements with an object of type boolean[]&quot;))<SUB>493</SUB>> ]
-"16895" [label = <(GetShortArrayRegion,env_-&gt;GetShortArrayRegion(reinterpret_cast&lt;jshortArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jshort*&gt;(elements)))<SUB>496</SUB>> ]
-"16907" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected short[]&quot;\012 : &quot;attempt to get region of short primitive array elements with an object of type boolean[]&quot;))<SUB>498</SUB>> ]
-"16915" [label = <(GetCharArrayRegion,env_-&gt;GetCharArrayRegion(reinterpret_cast&lt;jcharArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jchar*&gt;(elements)))<SUB>501</SUB>> ]
-"16927" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected char[]&quot;\012 : &quot;attempt to get region of char primitive array elements with an object of type boolean[]&quot;))<SUB>503</SUB>> ]
-"16935" [label = <(GetIntArrayRegion,env_-&gt;GetIntArrayRegion(reinterpret_cast&lt;jintArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jint*&gt;(elements)))<SUB>506</SUB>> ]
-"16947" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected int[]&quot;\012 : &quot;attempt to get region of int primitive array elements with an object of type boolean[]&quot;))<SUB>508</SUB>> ]
-"16955" [label = <(GetLongArrayRegion,env_-&gt;GetLongArrayRegion(reinterpret_cast&lt;jlongArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jlong*&gt;(elements)))<SUB>511</SUB>> ]
-"16967" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected long[]&quot;\012 : &quot;attempt to get region of long primitive array elements with an object of type boolean[]&quot;))<SUB>513</SUB>> ]
-"16975" [label = <(GetFloatArrayRegion,env_-&gt;GetFloatArrayRegion(reinterpret_cast&lt;jfloatArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jfloat*&gt;(elements)))<SUB>516</SUB>> ]
-"16987" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected float[]&quot;\012 : &quot;attempt to get region of float primitive array elements with an object of type boolean[]&quot;))<SUB>518</SUB>> ]
-"16995" [label = <(GetDoubleArrayRegion,env_-&gt;GetDoubleArrayRegion(reinterpret_cast&lt;jdoubleArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jdouble*&gt;(elements)))<SUB>521</SUB>> ]
-"17007" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected double[]&quot;\012 : &quot;attempt to get region of double primitive array elements with an object of type boolean[]&quot;))<SUB>523</SUB>> ]
-"17016" [label = <(&lt;operator&gt;.assignment,array2 = env_-&gt;NewByteArray(10))<SUB>526</SUB>> ]
-"17023" [label = <(GetBooleanArrayRegion,env_-&gt;GetBooleanArrayRegion(reinterpret_cast&lt;jbooleanArray&gt;(array2), 0, kLength,\012 reinterpret_cast&lt;jboolean*&gt;(elements)))<SUB>527</SUB>> ]
-"17035" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type byte[] expected boolean[]&quot;\012 : &quot;attempt to get region of boolean primitive array elements with an object of type byte[]&quot;))<SUB>529</SUB>> ]
-"17044" [label = <(&lt;operator&gt;.assignment,object = env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>532</SUB>> ]
-"17051" [label = <(GetBooleanArrayRegion,env_-&gt;GetBooleanArrayRegion(reinterpret_cast&lt;jbooleanArray&gt;(object), 0, kLength,\012 reinterpret_cast&lt;jboolean*&gt;(elements)))<SUB>533</SUB>> ]
-"17063" [label = <(Check,jni_abort_catcher.Check(check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;attempt to get region of boolean primitive array elements with an object of type &quot;\012 &quot;java.lang.String&quot;))<SUB>535</SUB>> ]
-"17071" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>539</SUB>> ]
-"16852" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>485</SUB>> ]
-"16865" [label = <(NewBooleanArray,env_-&gt;NewBooleanArray(kLength))<SUB>488</SUB>> ]
-"16871" [label = <(&lt;operator&gt;.notEquals,array != nullptr)<SUB>489</SUB>> ]
-"16876" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetByteArrayRegion)<SUB>491</SUB>> ]
-"16879" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbyteArray&gt;(array))<SUB>491</SUB>> ]
-"16884" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbyte*&gt;(elements))<SUB>492</SUB>> ]
-"16888" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>493</SUB>> ]
-"16891" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected byte[]&quot;\012 : &quot;attempt to get region of byte primitive array elements with an object of type boolean[]&quot;)<SUB>494</SUB>> ]
-"16896" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetShortArrayRegion)<SUB>496</SUB>> ]
-"16899" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jshortArray&gt;(array))<SUB>496</SUB>> ]
-"16904" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jshort*&gt;(elements))<SUB>497</SUB>> ]
-"16908" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>498</SUB>> ]
-"16911" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected short[]&quot;\012 : &quot;attempt to get region of short primitive array elements with an object of type boolean[]&quot;)<SUB>499</SUB>> ]
-"16916" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetCharArrayRegion)<SUB>501</SUB>> ]
-"16919" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jcharArray&gt;(array))<SUB>501</SUB>> ]
-"16924" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jchar*&gt;(elements))<SUB>502</SUB>> ]
-"16928" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>503</SUB>> ]
-"16931" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected char[]&quot;\012 : &quot;attempt to get region of char primitive array elements with an object of type boolean[]&quot;)<SUB>504</SUB>> ]
-"16936" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetIntArrayRegion)<SUB>506</SUB>> ]
-"16939" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jintArray&gt;(array))<SUB>506</SUB>> ]
-"16944" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jint*&gt;(elements))<SUB>507</SUB>> ]
-"16948" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>508</SUB>> ]
-"16951" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected int[]&quot;\012 : &quot;attempt to get region of int primitive array elements with an object of type boolean[]&quot;)<SUB>509</SUB>> ]
-"16956" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetLongArrayRegion)<SUB>511</SUB>> ]
-"16959" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jlongArray&gt;(array))<SUB>511</SUB>> ]
-"16964" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jlong*&gt;(elements))<SUB>512</SUB>> ]
-"16968" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>513</SUB>> ]
-"16971" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected long[]&quot;\012 : &quot;attempt to get region of long primitive array elements with an object of type boolean[]&quot;)<SUB>514</SUB>> ]
-"16976" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetFloatArrayRegion)<SUB>516</SUB>> ]
-"16979" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jfloatArray&gt;(array))<SUB>516</SUB>> ]
-"16984" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jfloat*&gt;(elements))<SUB>517</SUB>> ]
-"16988" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>518</SUB>> ]
-"16991" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected float[]&quot;\012 : &quot;attempt to get region of float primitive array elements with an object of type boolean[]&quot;)<SUB>519</SUB>> ]
-"16996" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetDoubleArrayRegion)<SUB>521</SUB>> ]
-"16999" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jdoubleArray&gt;(array))<SUB>521</SUB>> ]
-"17004" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jdouble*&gt;(elements))<SUB>522</SUB>> ]
-"17008" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>523</SUB>> ]
-"17011" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected double[]&quot;\012 : &quot;attempt to get region of double primitive array elements with an object of type boolean[]&quot;)<SUB>524</SUB>> ]
-"17018" [label = <(NewByteArray,env_-&gt;NewByteArray(10))<SUB>526</SUB>> ]
-"17024" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetBooleanArrayRegion)<SUB>527</SUB>> ]
-"17027" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbooleanArray&gt;(array2))<SUB>527</SUB>> ]
-"17032" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jboolean*&gt;(elements))<SUB>528</SUB>> ]
-"17036" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>529</SUB>> ]
-"17039" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type byte[] expected boolean[]&quot;\012 : &quot;attempt to get region of boolean primitive array elements with an object of type byte[]&quot;)<SUB>530</SUB>> ]
-"17046" [label = <(NewStringUTF,env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>532</SUB>> ]
-"17052" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetBooleanArrayRegion)<SUB>533</SUB>> ]
-"17055" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbooleanArray&gt;(object))<SUB>533</SUB>> ]
-"17060" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jboolean*&gt;(elements))<SUB>534</SUB>> ]
-"17064" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>535</SUB>> ]
-"17067" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;attempt to get region of boolean primitive array elements with an object of type &quot;\012 &quot;java.lang.String&quot;)<SUB>535</SUB>> ]
-"17073" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>539</SUB>> ]
-"16853" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>485</SUB>> ]
-"16866" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewBooleanArray)<SUB>488</SUB>> ]
-"16878" [label = <(FIELD_IDENTIFIER,GetByteArrayRegion,GetByteArrayRegion)<SUB>491</SUB>> ]
-"16880" [label = <(UNKNOWN,jbyteArray,jbyteArray)<SUB>491</SUB>> ]
-"16885" [label = <(UNKNOWN,jbyte*,jbyte*)<SUB>492</SUB>> ]
-"16890" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>493</SUB>> ]
-"16898" [label = <(FIELD_IDENTIFIER,GetShortArrayRegion,GetShortArrayRegion)<SUB>496</SUB>> ]
-"16900" [label = <(UNKNOWN,jshortArray,jshortArray)<SUB>496</SUB>> ]
-"16905" [label = <(UNKNOWN,jshort*,jshort*)<SUB>497</SUB>> ]
-"16910" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>498</SUB>> ]
-"16918" [label = <(FIELD_IDENTIFIER,GetCharArrayRegion,GetCharArrayRegion)<SUB>501</SUB>> ]
-"16920" [label = <(UNKNOWN,jcharArray,jcharArray)<SUB>501</SUB>> ]
-"16925" [label = <(UNKNOWN,jchar*,jchar*)<SUB>502</SUB>> ]
-"16930" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>503</SUB>> ]
-"16938" [label = <(FIELD_IDENTIFIER,GetIntArrayRegion,GetIntArrayRegion)<SUB>506</SUB>> ]
-"16940" [label = <(UNKNOWN,jintArray,jintArray)<SUB>506</SUB>> ]
-"16945" [label = <(UNKNOWN,jint*,jint*)<SUB>507</SUB>> ]
-"16950" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>508</SUB>> ]
-"16958" [label = <(FIELD_IDENTIFIER,GetLongArrayRegion,GetLongArrayRegion)<SUB>511</SUB>> ]
-"16960" [label = <(UNKNOWN,jlongArray,jlongArray)<SUB>511</SUB>> ]
-"16965" [label = <(UNKNOWN,jlong*,jlong*)<SUB>512</SUB>> ]
-"16970" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>513</SUB>> ]
-"16978" [label = <(FIELD_IDENTIFIER,GetFloatArrayRegion,GetFloatArrayRegion)<SUB>516</SUB>> ]
-"16980" [label = <(UNKNOWN,jfloatArray,jfloatArray)<SUB>516</SUB>> ]
-"16985" [label = <(UNKNOWN,jfloat*,jfloat*)<SUB>517</SUB>> ]
-"16990" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>518</SUB>> ]
-"16998" [label = <(FIELD_IDENTIFIER,GetDoubleArrayRegion,GetDoubleArrayRegion)<SUB>521</SUB>> ]
-"17000" [label = <(UNKNOWN,jdoubleArray,jdoubleArray)<SUB>521</SUB>> ]
-"17005" [label = <(UNKNOWN,jdouble*,jdouble*)<SUB>522</SUB>> ]
-"17010" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>523</SUB>> ]
-"17019" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewByteArray)<SUB>526</SUB>> ]
-"17026" [label = <(FIELD_IDENTIFIER,GetBooleanArrayRegion,GetBooleanArrayRegion)<SUB>527</SUB>> ]
-"17028" [label = <(UNKNOWN,jbooleanArray,jbooleanArray)<SUB>527</SUB>> ]
-"17033" [label = <(UNKNOWN,jboolean*,jboolean*)<SUB>528</SUB>> ]
-"17038" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>529</SUB>> ]
-"17047" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewStringUTF)<SUB>532</SUB>> ]
-"17054" [label = <(FIELD_IDENTIFIER,GetBooleanArrayRegion,GetBooleanArrayRegion)<SUB>533</SUB>> ]
-"17056" [label = <(UNKNOWN,jbooleanArray,jbooleanArray)<SUB>533</SUB>> ]
-"17061" [label = <(UNKNOWN,jboolean*,jboolean*)<SUB>534</SUB>> ]
-"17066" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>535</SUB>> ]
-"17074" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>539</SUB>> ]
-"16855" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>485</SUB>> ]
-"16868" [label = <(FIELD_IDENTIFIER,NewBooleanArray,NewBooleanArray)<SUB>488</SUB>> ]
-"17021" [label = <(FIELD_IDENTIFIER,NewByteArray,NewByteArray)<SUB>526</SUB>> ]
-"17049" [label = <(FIELD_IDENTIFIER,NewStringUTF,NewStringUTF)<SUB>532</SUB>> ]
-"17076" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>539</SUB>> ]
-"16846" [label = <(METHOD,GetPrimitiveArrayRegionElementsOfWrongType)<SUB>484</SUB>> ]
-"17078" [label = <(METHOD_RETURN,void)<SUB>484</SUB>> ]
-  "16850" -> "16859" 
-  "16859" -> "16868" 
-  "16863" -> "16871" 
-  "16870" -> "16878" 
-  "16875" -> "16890" 
-  "16887" -> "16898" 
-  "16895" -> "16910" 
-  "16907" -> "16918" 
-  "16915" -> "16930" 
-  "16927" -> "16938" 
-  "16935" -> "16950" 
-  "16947" -> "16958" 
-  "16955" -> "16970" 
-  "16967" -> "16978" 
-  "16975" -> "16990" 
-  "16987" -> "16998" 
-  "16995" -> "17010" 
-  "17007" -> "17021" 
-  "17016" -> "17026" 
-  "17023" -> "17038" 
-  "17035" -> "17049" 
-  "17044" -> "17054" 
-  "17051" -> "17066" 
-  "17063" -> "17076" 
-  "17071" -> "17078" 
-  "16852" -> "16850" 
-  "16865" -> "16863" 
-  "16871" -> "16870" 
-  "16876" -> "16880" 
-  "16879" -> "16885" 
-  "16884" -> "16875" 
-  "16888" -> "16891" 
-  "16891" -> "16887" 
-  "16896" -> "16900" 
-  "16899" -> "16905" 
-  "16904" -> "16895" 
-  "16908" -> "16911" 
-  "16911" -> "16907" 
-  "16916" -> "16920" 
-  "16919" -> "16925" 
-  "16924" -> "16915" 
-  "16928" -> "16931" 
-  "16931" -> "16927" 
-  "16936" -> "16940" 
-  "16939" -> "16945" 
-  "16944" -> "16935" 
-  "16948" -> "16951" 
-  "16951" -> "16947" 
-  "16956" -> "16960" 
-  "16959" -> "16965" 
-  "16964" -> "16955" 
-  "16968" -> "16971" 
-  "16971" -> "16967" 
-  "16976" -> "16980" 
-  "16979" -> "16985" 
-  "16984" -> "16975" 
-  "16988" -> "16991" 
-  "16991" -> "16987" 
-  "16996" -> "17000" 
-  "16999" -> "17005" 
-  "17004" -> "16995" 
-  "17008" -> "17011" 
-  "17011" -> "17007" 
-  "17018" -> "17016" 
-  "17024" -> "17028" 
-  "17027" -> "17033" 
-  "17032" -> "17023" 
-  "17036" -> "17039" 
-  "17039" -> "17035" 
-  "17046" -> "17044" 
-  "17052" -> "17056" 
-  "17055" -> "17061" 
-  "17060" -> "17051" 
-  "17064" -> "17067" 
-  "17067" -> "17063" 
-  "17073" -> "17071" 
-  "16853" -> "16852" 
-  "16866" -> "16865" 
-  "16878" -> "16876" 
-  "16880" -> "16879" 
-  "16885" -> "16884" 
-  "16890" -> "16888" 
-  "16898" -> "16896" 
-  "16900" -> "16899" 
-  "16905" -> "16904" 
-  "16910" -> "16908" 
-  "16918" -> "16916" 
-  "16920" -> "16919" 
-  "16925" -> "16924" 
-  "16930" -> "16928" 
-  "16938" -> "16936" 
-  "16940" -> "16939" 
-  "16945" -> "16944" 
-  "16950" -> "16948" 
-  "16958" -> "16956" 
-  "16960" -> "16959" 
-  "16965" -> "16964" 
-  "16970" -> "16968" 
-  "16978" -> "16976" 
-  "16980" -> "16979" 
-  "16985" -> "16984" 
-  "16990" -> "16988" 
-  "16998" -> "16996" 
-  "17000" -> "16999" 
-  "17005" -> "17004" 
-  "17010" -> "17008" 
-  "17019" -> "17018" 
-  "17026" -> "17024" 
-  "17028" -> "17027" 
-  "17033" -> "17032" 
-  "17038" -> "17036" 
-  "17047" -> "17046" 
-  "17054" -> "17052" 
-  "17056" -> "17055" 
-  "17061" -> "17060" 
-  "17066" -> "17064" 
-  "17074" -> "17073" 
-  "16855" -> "16853" 
-  "16868" -> "16866" 
-  "17021" -> "17019" 
-  "17049" -> "17047" 
-  "17076" -> "17074" 
-  "16846" -> "16855" 
+digraph "GetLocalsCapacity" {  
+"17300" [label = <(soa,soa(Thread::Current()))<SUB>935</SUB>> ]
+"17305" [label = <(RETURN,return reinterpret_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetLocalsCapacity();,return reinterpret_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetLocalsCapacity();)<SUB>936</SUB>> ]
+"17301" [label = <(Thread::Current,Thread::Current())<SUB>935</SUB>> ]
+"17306" [label = <(GetLocalsCapacity,reinterpret_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetLocalsCapacity())<SUB>936</SUB>> ]
+"17302" [label = <(&lt;operator&gt;.fieldAccess,Thread::Current)<SUB>935</SUB>> ]
+"17307" [label = <(&lt;operator&gt;.indirectFieldAccess,reinterpret_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetLocalsCapacity)<SUB>936</SUB>> ]
+"17304" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>935</SUB>> ]
+"17308" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;JNIEnvExt*&gt;(env))<SUB>936</SUB>> ]
+"17311" [label = <(FIELD_IDENTIFIER,GetLocalsCapacity,GetLocalsCapacity)<SUB>936</SUB>> ]
+"17309" [label = <(UNKNOWN,JNIEnvExt*,JNIEnvExt*)<SUB>936</SUB>> ]
+"17296" [label = <(METHOD,GetLocalsCapacity)<SUB>934</SUB>> ]
+"17312" [label = <(METHOD_RETURN,size_t)<SUB>934</SUB>> ]
+  "17300" -> "17309" 
+  "17305" -> "17312" 
+  "17301" -> "17300" 
+  "17306" -> "17305" 
+  "17302" -> "17301" 
+  "17307" -> "17306" 
+  "17304" -> "17302" 
+  "17308" -> "17311" 
+  "17311" -> "17307" 
+  "17309" -> "17308" 
+  "17296" -> "17304" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/3-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/3-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/3-cfg.dot	2023-06-07 19:35:28.207384350 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/3-cfg.dot	2023-06-07 19:35:34.737383779 +0330
@@ -1,1263 +1,5 @@
-digraph "&lt;global&gt;" {  
-"602" [label = <(UNKNOWN,),))<SUB>393</SUB>> ]
-"603" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012  DCHECK_NE(field-&gt;GetTypeAsPrimitiveType(), Primitive::kPrimNot);,REQUIRES_SHARED(Locks::mutator_lock_) {\012  DCHECK_NE(field-&gt;GetTypeAsPrimitiveType(), Primitive::kPrimNot);)<SUB>394</SUB>> ]
-"605" [label = <(&lt;operator&gt;.assignment,* instrumentation = Runtime::Current()-&gt;GetInstrumentation())<SUB>396</SUB>> ]
-"614" [label = <(UNKNOWN,if (UNLIKELY(instrumentation-&gt;HasFieldWriteListeners())) {\012 Thread* self = Thread::Current();\012 ArtMethod* cur_method = self-&gt;GetCurrentMethod(/*dex_pc=*/ nullptr,\012 /*check_suspended=*/ true,\012 /*abort_on_error=*/ false);\012\012 if (cur_method == nullptr) {\012 // Set/Get Fields can be issued without a method during runtime startup/teardown. Ignore all\012 // of these changes.\012 return;\012 }\012    DCHECK(cur_method-&gt;IsNative());\012    instrumentation-&gt;FieldWriteEvent(self,\012                                     self-&gt;DecodeJObject(obj).Ptr(),\012                                     cur_method,\012 0, // dex_pc is always 0 since this is a native method.\012                                     field,\012                                     val);\012 },if (UNLIKELY(instrumentation-&gt;HasFieldWriteListeners())) {\012 Thread* self = Thread::Current();\012 ArtMethod* cur_method = self-&gt;GetCurrentMethod(/*dex_pc=*/ nullptr,\012 /*check_suspended=*/ true,\012 /*abort_on_error=*/ false);\012\012 if (cur_method == nullptr) {\012 // Set/Get Fields can be issued without a method during runtime startup/teardown. Ignore all\012 // of these changes.\012 return;\012 }\012    DCHECK(cur_method-&gt;IsNative());\012    instrumentation-&gt;FieldWriteEvent(self,\012                                     self-&gt;DecodeJObject(obj).Ptr(),\012                                     cur_method,\012 0, // dex_pc is always 0 since this is a native method.\012                                     field,\012                                     val);\012 })<SUB>397</SUB>> ]
-"615" [label = <(UNKNOWN,},})<SUB>416</SUB>> ]
-"622" [label = <(UNKNOWN,),))<SUB>418</SUB>> ]
-"623" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012  instrumentation::Instrumentation* instrumentation = Runtime::Current()-&gt;GetInstrumentation();,REQUIRES_SHARED(Locks::mutator_lock_) {\012  instrumentation::Instrumentation* instrumentation = Runtime::Current()-&gt;GetInstrumentation();)<SUB>419</SUB>> ]
-"624" [label = <(UNKNOWN,if (UNLIKELY(instrumentation-&gt;HasFieldReadListeners())) {\012 Thread* self = Thread::Current();\012 ArtMethod* cur_method = self-&gt;GetCurrentMethod(/*dex_pc=*/ nullptr,\012 /*check_suspended=*/ true,\012 /*abort_on_error=*/ false);\012\012 if (cur_method == nullptr) {\012 // Set/Get Fields can be issued without a method during runtime startup/teardown. Ignore all\012 // of these changes.\012 return;\012 }\012    DCHECK(cur_method-&gt;IsNative());\012    instrumentation-&gt;FieldReadEvent(self,\012                                    self-&gt;DecodeJObject(obj).Ptr(),\012                                    cur_method,\012 0, // dex_pc is always 0 since this is a native method.\012                                    field);\012 },if (UNLIKELY(instrumentation-&gt;HasFieldReadListeners())) {\012 Thread* self = Thread::Current();\012 ArtMethod* cur_method = self-&gt;GetCurrentMethod(/*dex_pc=*/ nullptr,\012 /*check_suspended=*/ true,\012 /*abort_on_error=*/ false);\012\012 if (cur_method == nullptr) {\012 // Set/Get Fields can be issued without a method during runtime startup/teardown. Ignore all\012 // of these changes.\012 return;\012 }\012    DCHECK(cur_method-&gt;IsNative());\012    instrumentation-&gt;FieldReadEvent(self,\012                                    self-&gt;DecodeJObject(obj).Ptr(),\012                                    cur_method,\012 0, // dex_pc is always 0 since this is a native method.\012                                    field);\012 })<SUB>421</SUB>> ]
-"625" [label = <(UNKNOWN,},})<SUB>439</SUB>> ]
-"701" [label = <(UNKNOWN,),))<SUB>469</SUB>> ]
-"702" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012  std::string temp;,REQUIRES_SHARED(Locks::mutator_lock_) {\012  std::string temp;)<SUB>470</SUB>> ]
-"703" [label = <(UNKNOWN,soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/NoSuchMethodError;&quot;,\012 &quot;no %s method \&quot;%s.%s%s\&quot;&quot;,\012                                 kind,\012                                 c-&gt;GetDescriptor(&amp;temp),\012                                 name,\012                                 sig);,soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/NoSuchMethodError;&quot;,\012 &quot;no %s method \&quot;%s.%s%s\&quot;&quot;,\012                                 kind,\012                                 c-&gt;GetDescriptor(&amp;temp),\012                                 name,\012                                 sig);)<SUB>472</SUB>> ]
-"704" [label = <(UNKNOWN,},})<SUB>478</SUB>> ]
-"713" [label = <(UNKNOWN,),))<SUB>483</SUB>> ]
-"714" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012  LOG(ERROR)\012 &lt;&lt; &quot;Failed to register native method in &quot; &lt;&lt; c-&gt;PrettyDescriptor()\012 &lt;&lt; &quot; in &quot; &lt;&lt; c-&gt;GetDexCache()-&gt;GetLocation()-&gt;ToModifiedUtf8()\012 &lt;&lt; &quot;: &quot; &lt;&lt; kind &lt;&lt; &quot; is null at index &quot; &lt;&lt; idx;,REQUIRES_SHARED(Locks::mutator_lock_) {\012  LOG(ERROR)\012 &lt;&lt; &quot;Failed to register native method in &quot; &lt;&lt; c-&gt;PrettyDescriptor()\012 &lt;&lt; &quot; in &quot; &lt;&lt; c-&gt;GetDexCache()-&gt;GetLocation()-&gt;ToModifiedUtf8()\012 &lt;&lt; &quot;: &quot; &lt;&lt; kind &lt;&lt; &quot; is null at index &quot; &lt;&lt; idx;)<SUB>484</SUB>> ]
-"715" [label = <(UNKNOWN,soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/NoSuchMethodError;&quot;,\012 &quot;%s is null at index %d&quot;,\012                                 kind,\012                                 idx);,soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/NoSuchMethodError;&quot;,\012 &quot;%s is null at index %d&quot;,\012                                 kind,\012                                 idx);)<SUB>489</SUB>> ]
-"716" [label = <(UNKNOWN,},})<SUB>493</SUB>> ]
-"723" [label = <(UNKNOWN,),))<SUB>495</SUB>> ]
-"724" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012 if (LIKELY(klass-&gt;IsInitialized())) {\012 return klass;\012 },REQUIRES_SHARED(Locks::mutator_lock_) {\012 if (LIKELY(klass-&gt;IsInitialized())) {\012 return klass;\012 })<SUB>496</SUB>> ]
-"731" [label = <(h_klass,h_klass(hs.NewHandle(klass)))<SUB>501</SUB>> ]
-"737" [label = <(UNKNOWN,if (!Runtime::Current()-&gt;GetClassLinker()-&gt;EnsureInitialized(self, h_klass, true, true)) {\012 return nullptr;\012 },if (!Runtime::Current()-&gt;GetClassLinker()-&gt;EnsureInitialized(self, h_klass, true, true)) {\012 return nullptr;\012 })<SUB>502</SUB>> ]
-"738" [label = <(UNKNOWN,return h_klass.Get();,return h_klass.Get();)<SUB>505</SUB>> ]
-"739" [label = <(UNKNOWN,},})<SUB>506</SUB>> ]
-"749" [label = <(UNKNOWN,),))<SUB>509</SUB>> ]
-"750" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012 ObjPtr&lt;mirror::Class&gt; c = EnsureInitialized(soa.Self(), soa.Decode&lt;mirror::Class&gt;(jni_class));,REQUIRES_SHARED(Locks::mutator_lock_) {\012 ObjPtr&lt;mirror::Class&gt; c = EnsureInitialized(soa.Self(), soa.Decode&lt;mirror::Class&gt;(jni_class));)<SUB>510</SUB>> ]
-"751" [label = <(UNKNOWN,if (c == nullptr) {\012 return nullptr;\012 },if (c == nullptr) {\012 return nullptr;\012 })<SUB>512</SUB>> ]
-"753" [label = <(&lt;operator&gt;.assignment,* method = nullptr)<SUB>515</SUB>> ]
-"757" [label = <(&lt;operator&gt;.assignment,pointer_size = Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize())<SUB>516</SUB>> ]
-"769" [label = <(UNKNOWN,if (c-&gt;IsInterface()) {\012    method = c-&gt;FindInterfaceMethod(name, sig, pointer_size);\012 },if (c-&gt;IsInterface()) {\012    method = c-&gt;FindInterfaceMethod(name, sig, pointer_size);\012 })<SUB>517</SUB>> ]
-"770" [label = <(UNKNOWN,else {\012    method = c-&gt;FindClassMethod(name, sig, pointer_size);\012 },else {\012    method = c-&gt;FindClassMethod(name, sig, pointer_size);\012 })<SUB>519</SUB>> ]
-"771" [label = <(UNKNOWN,if (method != nullptr &amp;&amp; ShouldDenyAccessToMember(method, soa.Self())) {\012    method = nullptr;\012 },if (method != nullptr &amp;&amp; ShouldDenyAccessToMember(method, soa.Self())) {\012    method = nullptr;\012 })<SUB>522</SUB>> ]
-"772" [label = <(UNKNOWN,if (method == nullptr || method-&gt;IsStatic() != is_static) {\012 ThrowNoSuchMethodError(soa, c, name, sig, is_static ? &quot;static&quot; : &quot;non-static&quot;);\012 return nullptr;\012 },if (method == nullptr || method-&gt;IsStatic() != is_static) {\012 ThrowNoSuchMethodError(soa, c, name, sig, is_static ? &quot;static&quot; : &quot;non-static&quot;);\012 return nullptr;\012 })<SUB>525</SUB>> ]
-"773" [label = <(UNKNOWN,return jni::EncodeArtMethod(method);,return jni::EncodeArtMethod(method);)<SUB>529</SUB>> ]
-"774" [label = <(UNKNOWN,},})<SUB>530</SUB>> ]
-"780" [label = <(UNKNOWN,),))<SUB>532</SUB>> ]
-"781" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012 ArtMethod* method = soa.Self()-&gt;GetCurrentMethod(nullptr);,REQUIRES_SHARED(Locks::mutator_lock_) {\012 ArtMethod* method = soa.Self()-&gt;GetCurrentMethod(nullptr);)<SUB>533</SUB>> ]
-"782" [label = <(UNKNOWN,if (method == jni::DecodeArtMethod(WellKnownClasses::java_lang_Runtime_nativeLoad)) {\012 return soa.Decode&lt;mirror::ClassLoader&gt;(soa.Self()-&gt;GetClassLoaderOverride());\012 },if (method == jni::DecodeArtMethod(WellKnownClasses::java_lang_Runtime_nativeLoad)) {\012 return soa.Decode&lt;mirror::ClassLoader&gt;(soa.Self()-&gt;GetClassLoaderOverride());\012 })<SUB>536</SUB>> ]
-"783" [label = <(UNKNOWN,if (method != nullptr) {\012 return method-&gt;GetDeclaringClass()-&gt;GetClassLoader();\012 },if (method != nullptr) {\012 return method-&gt;GetDeclaringClass()-&gt;GetClassLoader();\012 })<SUB>540</SUB>> ]
-"785" [label = <(&lt;operator&gt;.assignment,class_loader =\012      soa.Decode&lt;mirror::ClassLoader&gt;(Runtime::Current()-&gt;GetSystemClassLoader()))<SUB>544</SUB>> ]
-"802" [label = <(UNKNOWN,if (class_loader != nullptr) {\012 return class_loader;\012 },if (class_loader != nullptr) {\012 return class_loader;\012 })<SUB>546</SUB>> ]
-"803" [label = <(UNKNOWN,class_loader = soa.Decode&lt;mirror::ClassLoader&gt;(soa.Self()-&gt;GetClassLoaderOverride());,class_loader = soa.Decode&lt;mirror::ClassLoader&gt;(soa.Self()-&gt;GetClassLoaderOverride());)<SUB>550</SUB>> ]
-"804" [label = <(UNKNOWN,if (class_loader != nullptr) {\012 // If so, CommonCompilerTest should have marked the runtime as a compiler not compiling an\012 // image.\012    CHECK(Runtime::Current()-&gt;IsAotCompiler());\012    CHECK(!Runtime::Current()-&gt;IsCompilingBootImage());\012 return class_loader;\012 },if (class_loader != nullptr) {\012 // If so, CommonCompilerTest should have marked the runtime as a compiler not compiling an\012 // image.\012    CHECK(Runtime::Current()-&gt;IsAotCompiler());\012    CHECK(!Runtime::Current()-&gt;IsCompilingBootImage());\012 return class_loader;\012 })<SUB>551</SUB>> ]
-"805" [label = <(UNKNOWN,return nullptr;,return nullptr;)<SUB>559</SUB>> ]
-"806" [label = <(UNKNOWN,},})<SUB>560</SUB>> ]
-"816" [label = <(UNKNOWN,),))<SUB>563</SUB>> ]
-"817" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012 StackHandleScope&lt;2&gt; hs(soa.Self());,REQUIRES_SHARED(Locks::mutator_lock_) {\012 StackHandleScope&lt;2&gt; hs(soa.Self());)<SUB>564</SUB>> ]
-"819" [label = <(c,c(\012      hs.NewHandle(EnsureInitialized(soa.Self(), soa.Decode&lt;mirror::Class&gt;(jni_class)))))<SUB>566</SUB>> ]
-"838" [label = <(UNKNOWN,if (c == nullptr) {\012 return nullptr;\012 },if (c == nullptr) {\012 return nullptr;\012 })<SUB>568</SUB>> ]
-"840" [label = <(&lt;operator&gt;.assignment,* field = nullptr)<SUB>571</SUB>> ]
-"845" [label = <(&lt;operator&gt;.assignment,* class_linker = Runtime::Current()-&gt;GetClassLinker())<SUB>573</SUB>> ]
-"854" [label = <(UNKNOWN,if (UNLIKELY(sig[0] == '\0')) {\012    DCHECK(field == nullptr);\012 },if (UNLIKELY(sig[0] == '\0')) {\012    DCHECK(field == nullptr);\012 })<SUB>574</SUB>> ]
-"855" [label = <(UNKNOWN,else if (sig[1] != '\0') {\012 Handle&lt;mirror::ClassLoader&gt; class_loader(hs.NewHandle(c-&gt;GetClassLoader()));\012    field_type = class_linker-&gt;FindClass(soa.Self(), sig, class_loader);\012 },else if (sig[1] != '\0') {\012 Handle&lt;mirror::ClassLoader&gt; class_loader(hs.NewHandle(c-&gt;GetClassLoader()));\012    field_type = class_linker-&gt;FindClass(soa.Self(), sig, class_loader);\012 })<SUB>576</SUB>> ]
-"856" [label = <(UNKNOWN,else {\012    field_type = class_linker-&gt;FindPrimitiveClass(*sig);\012 },else {\012    field_type = class_linker-&gt;FindPrimitiveClass(*sig);\012 })<SUB>579</SUB>> ]
-"857" [label = <(UNKNOWN,if (field_type == nullptr) {\012 // Failed to find type from the signature of the field.\012    DCHECK(sig[0] == '\0' || soa.Self()-&gt;IsExceptionPending());\012 StackHandleScope&lt;1&gt; hs2(soa.Self());\012 Handle&lt;mirror::Throwable&gt; cause(hs2.NewHandle(soa.Self()-&gt;GetException()));\012    soa.Self()-&gt;ClearException();\012    std::string temp;\012    soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/NoSuchFieldError;&quot;,\012 &quot;no type \&quot;%s\&quot; found and so no field \&quot;%s\&quot; &quot;\012 &quot;could be found in class \&quot;%s\&quot; or its superclasses&quot;, sig, name,\012                                   c-&gt;GetDescriptor(&amp;temp));\012 if (cause != nullptr) {\012      soa.Self()-&gt;GetException()-&gt;SetCause(cause.Get());\012 }\012 return nullptr;\012 },if (field_type == nullptr) {\012 // Failed to find type from the signature of the field.\012    DCHECK(sig[0] == '\0' || soa.Self()-&gt;IsExceptionPending());\012 StackHandleScope&lt;1&gt; hs2(soa.Self());\012 Handle&lt;mirror::Throwable&gt; cause(hs2.NewHandle(soa.Self()-&gt;GetException()));\012    soa.Self()-&gt;ClearException();\012    std::string temp;\012    soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/NoSuchFieldError;&quot;,\012 &quot;no type \&quot;%s\&quot; found and so no field \&quot;%s\&quot; &quot;\012 &quot;could be found in class \&quot;%s\&quot; or its superclasses&quot;, sig, name,\012                                   c-&gt;GetDescriptor(&amp;temp));\012 if (cause != nullptr) {\012      soa.Self()-&gt;GetException()-&gt;SetCause(cause.Get());\012 }\012 return nullptr;\012 })<SUB>582</SUB>> ]
-"859" [label = <(UNKNOWN,if (is_static) {\012    field = mirror::Class::FindStaticField(\012        soa.Self(), c.Get(), name, field_type-&gt;GetDescriptor(&amp;temp));\012 },if (is_static) {\012    field = mirror::Class::FindStaticField(\012        soa.Self(), c.Get(), name, field_type-&gt;GetDescriptor(&amp;temp));\012 })<SUB>599</SUB>> ]
-"860" [label = <(UNKNOWN,else {\012    field = c-&gt;FindInstanceField(name, field_type-&gt;GetDescriptor(&amp;temp));\012 },else {\012    field = c-&gt;FindInstanceField(name, field_type-&gt;GetDescriptor(&amp;temp));\012 })<SUB>602</SUB>> ]
-"861" [label = <(UNKNOWN,if (field != nullptr &amp;&amp; ShouldDenyAccessToMember(field, soa.Self())) {\012    field = nullptr;\012 },if (field != nullptr &amp;&amp; ShouldDenyAccessToMember(field, soa.Self())) {\012    field = nullptr;\012 })<SUB>605</SUB>> ]
-"862" [label = <(UNKNOWN,if (field == nullptr) {\012    soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/NoSuchFieldError;&quot;,\012 &quot;no \&quot;%s\&quot; field \&quot;%s\&quot; in class \&quot;%s\&quot; or its superclasses&quot;,\012                                   sig, name, c-&gt;GetDescriptor(&amp;temp));\012 return nullptr;\012 },if (field == nullptr) {\012    soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/NoSuchFieldError;&quot;,\012 &quot;no \&quot;%s\&quot; field \&quot;%s\&quot; in class \&quot;%s\&quot; or its superclasses&quot;,\012                                   sig, name, c-&gt;GetDescriptor(&amp;temp));\012 return nullptr;\012 })<SUB>608</SUB>> ]
-"863" [label = <(UNKNOWN,return jni::EncodeArtField(field);,return jni::EncodeArtField(field);)<SUB>614</SUB>> ]
-"864" [label = <(UNKNOWN,},})<SUB>615</SUB>> ]
-"874" [label = <(UNKNOWN,),))<SUB>621</SUB>> ]
-"875" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012  std::string type(array-&gt;PrettyTypeOf());,REQUIRES_SHARED(Locks::mutator_lock_) {\012  std::string type(array-&gt;PrettyTypeOf());)<SUB>622</SUB>> ]
-"876" [label = <(UNKNOWN,soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/ArrayIndexOutOfBoundsException;&quot;,\012 &quot;%s offset=%d length=%d %s.length=%d&quot;,\012                                 type.c_str(), start, length, identifier, array-&gt;GetLength());,soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/ArrayIndexOutOfBoundsException;&quot;,\012 &quot;%s offset=%d length=%d %s.length=%d&quot;,\012                                 type.c_str(), start, length, identifier, array-&gt;GetLength());)<SUB>624</SUB>> ]
-"877" [label = <(UNKNOWN,},})<SUB>627</SUB>> ]
-"886" [label = <(UNKNOWN,),))<SUB>630</SUB>> ]
-"887" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012  soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/StringIndexOutOfBoundsException;&quot;,\012 &quot;offset=%d length=%d string.length()=%d&quot;, start, length,\012                                 array_length);,REQUIRES_SHARED(Locks::mutator_lock_) {\012  soa.Self()-&gt;ThrowNewExceptionF(&quot;Ljava/lang/StringIndexOutOfBoundsException;&quot;,\012 &quot;offset=%d length=%d string.length()=%d&quot;, start, length,\012                                 array_length);)<SUB>631</SUB>> ]
-"888" [label = <(UNKNOWN,},})<SUB>635</SUB>> ]
-"897" [label = <(UNKNOWN,),))<SUB>637</SUB>> ]
-"898" [label = <(UNKNOWN,REQUIRES(!Locks::mutator_lock_) {\012 // Turn the const char* into a java.lang.String.\012 ScopedLocalRef&lt;jstring&gt; s(env, env-&gt;NewStringUTF(msg));\012 if (msg != nullptr &amp;&amp; s.get() == nullptr) {\012 return JNI_ERR;\012 }\012\012 // Choose an appropriate constructor and set up the arguments.\012  jvalue args[2];\012 const char* signature;\012 if (msg == nullptr &amp;&amp; cause == nullptr) {\012    signature = &quot;()V&quot;;\012 } else if (msg != nullptr &amp;&amp; cause == nullptr) {\012    signature = &quot;(Ljava/lang/String;)V&quot;;\012    args[0].l = s.get();\012 } else if (msg == nullptr &amp;&amp; cause != nullptr) {\012    signature = &quot;(Ljava/lang/Throwable;)V&quot;;\012    args[0].l = cause;\012 } else {\012    signature = &quot;(Ljava/lang/String;Ljava/lang/Throwable;)V&quot;;\012    args[0].l = s.get();\012    args[1].l = cause;\012 }\012  jmethodID mid = env-&gt;GetMethodID(exception_class, &quot;&lt;init&gt;&quot;, signature);\012 if (mid == nullptr) {\012 ScopedObjectAccess soa(env);\012    LOG(ERROR) &lt;&lt; &quot;No &lt;init&gt;&quot; &lt;&lt; signature &lt;&lt; &quot; in &quot;\012 &lt;&lt; mirror::Class::PrettyClass(soa.Decode&lt;mirror::Class&gt;(exception_class));\012 return JNI_ERR;\012 }\012\012 ScopedLocalRef&lt;jthrowable&gt; exception(\012      env, reinterpret_cast&lt;jthrowable&gt;(env-&gt;NewObjectA(exception_class, mid, args)));\012 if (exception.get() == nullptr) {\012 return JNI_ERR;\012 }\012 ScopedObjectAccess soa(env);\012  soa.Self()-&gt;SetException(soa.Decode&lt;mirror::Throwable&gt;(exception.get()));\012 return JNI_OK;\012},REQUIRES(!Locks::mutator_lock_) {\012 // Turn the const char* into a java.lang.String.\012 ScopedLocalRef&lt;jstring&gt; s(env, env-&gt;NewStringUTF(msg));\012 if (msg != nullptr &amp;&amp; s.get() == nullptr) {\012 return JNI_ERR;\012 }\012\012 // Choose an appropriate constructor and set up the arguments.\012  jvalue args[2];\012 const char* signature;\012 if (msg == nullptr &amp;&amp; cause == nullptr) {\012    signature = &quot;()V&quot;;\012 } else if (msg != nullptr &amp;&amp; cause == nullptr) {\012    signature = &quot;(Ljava/lang/String;)V&quot;;\012    args[0].l = s.get();\012 } else if (msg == nullptr &amp;&amp; cause != nullptr) {\012    signature = &quot;(Ljava/lang/Throwable;)V&quot;;\012    args[0].l = cause;\012 } else {\012    signature = &quot;(Ljava/lang/String;Ljava/lang/Throwable;)V&quot;;\012    args[0].l = s.get();\012    args[1].l = cause;\012 }\012  jmethodID mid = env-&gt;GetMethodID(exception_class, &quot;&lt;init&gt;&quot;, signature);\012 if (mid == nullptr) {\012 ScopedObjectAccess soa(env);\012    LOG(ERROR) &lt;&lt; &quot;No &lt;init&gt;&quot; &lt;&lt; signature &lt;&lt; &quot; in &quot;\012 &lt;&lt; mirror::Class::PrettyClass(soa.Decode&lt;mirror::Class&gt;(exception_class));\012 return JNI_ERR;\012 }\012\012 ScopedLocalRef&lt;jthrowable&gt; exception(\012      env, reinterpret_cast&lt;jthrowable&gt;(env-&gt;NewObjectA(exception_class, mid, args)));\012 if (exception.get() == nullptr) {\012 return JNI_ERR;\012 }\012 ScopedObjectAccess soa(env);\012  soa.Self()-&gt;SetException(soa.Decode&lt;mirror::Throwable&gt;(exception.get()));\012 return JNI_OK;\012})<SUB>638</SUB>> ]
-"918" [label = <(UNKNOWN,),))<SUB>710</SUB>> ]
-"919" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012 auto pointer_size = Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize();,REQUIRES_SHARED(Locks::mutator_lock_) {\012 auto pointer_size = Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize();)<SUB>711</SUB>> ]
-"920" [label = <(UNKNOWN,for (auto&amp; method : c-&gt;GetMethods(pointer_size)) {\012 if (kNative == method.IsNative() &amp;&amp; name == method.GetName() &amp;&amp; method.GetSignature() == sig) {\012 return &amp;method;\012 }\012 },for (auto&amp; method : c-&gt;GetMethods(pointer_size)) {\012 if (kNative == method.IsNative() &amp;&amp; name == method.GetName() &amp;&amp; method.GetSignature() == sig) {\012 return &amp;method;\012 }\012 })<SUB>713</SUB>> ]
-"921" [label = <(UNKNOWN,return nullptr;,return nullptr;)<SUB>718</SUB>> ]
-"922" [label = <(UNKNOWN,},})<SUB>719</SUB>> ]
-"13662" [label = <(UNKNOWN,},})<SUB>2862</SUB>> ]
-"13718" [label = <(UNKNOWN,),))<SUB>2879</SUB>> ]
-"13719" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012 ObjPtr&lt;ArtArrayT&gt; array = soa.Decode&lt;ArtArrayT&gt;(java_array);,REQUIRES_SHARED(Locks::mutator_lock_) {\012 ObjPtr&lt;ArtArrayT&gt; array = soa.Decode&lt;ArtArrayT&gt;(java_array);)<SUB>2880</SUB>> ]
-"13721" [label = <(&lt;operator&gt;.assignment,expected_array_class = GetClassRoot&lt;ArtArrayT&gt;())<SUB>2882</SUB>> ]
-"13724" [label = <(UNKNOWN,if (UNLIKELY(expected_array_class != array-&gt;GetClass())) {\012      soa.Vm()-&gt;JniAbortF(fn_name,\012 &quot;attempt to %s %s primitive array elements with an object of type %s&quot;,\012                          operation,\012                          mirror::Class::PrettyDescriptor(\012                              expected_array_class-&gt;GetComponentType()).c_str(),\012                          mirror::Class::PrettyDescriptor(array-&gt;GetClass()).c_str());\012 return nullptr;\012 },if (UNLIKELY(expected_array_class != array-&gt;GetClass())) {\012      soa.Vm()-&gt;JniAbortF(fn_name,\012 &quot;attempt to %s %s primitive array elements with an object of type %s&quot;,\012                          operation,\012                          mirror::Class::PrettyDescriptor(\012                              expected_array_class-&gt;GetComponentType()).c_str(),\012                          mirror::Class::PrettyDescriptor(array-&gt;GetClass()).c_str());\012 return nullptr;\012 })<SUB>2883</SUB>> ]
-"13725" [label = <(UNKNOWN,DCHECK_EQ(sizeof(ElementT), array-&gt;GetClass()-&gt;GetComponentSize());,DCHECK_EQ(sizeof(ElementT), array-&gt;GetClass()-&gt;GetComponentSize());)<SUB>2892</SUB>> ]
-"13726" [label = <(UNKNOWN,return array;,return array;)<SUB>2893</SUB>> ]
-"13727" [label = <(UNKNOWN,},})<SUB>2894</SUB>> ]
-"13900" [label = <(UNKNOWN,),))<SUB>2939</SUB>> ]
-"13901" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012 void* array_data = array-&gt;GetRawData(component_size, 0);,REQUIRES_SHARED(Locks::mutator_lock_) {\012 void* array_data = array-&gt;GetRawData(component_size, 0);)<SUB>2940</SUB>> ]
-"13903" [label = <(&lt;operator&gt;.assignment,* heap = Runtime::Current()-&gt;GetHeap())<SUB>2942</SUB>> ]
-"13913" [label = <(&lt;operator&gt;.assignment,is_copy = array_data != elements)<SUB>2943</SUB>> ]
-"13919" [label = <(&lt;operator&gt;.assignment,bytes = array-&gt;GetLength() * component_size)<SUB>2944</SUB>> ]
-"13927" [label = <(UNKNOWN,if (is_copy) {\012 // Sanity check: If elements is not the same as the java array's data, it better not be a\012 // heap address. TODO: This might be slow to check, may be worth keeping track of which\012 // copies we make?\012 if (heap-&gt;IsNonDiscontinuousSpaceHeapAddress(elements)) {\012        soa.Vm()-&gt;JniAbortF(&quot;ReleaseArrayElements&quot;,\012 &quot;invalid element pointer %p, array elements are %p&quot;,\012 reinterpret_cast&lt;void*&gt;(elements), array_data);\012 return;\012 }\012 if (mode != JNI_ABORT) {\012        memcpy(array_data, elements, bytes);\012 } else if (kWarnJniAbort &amp;&amp; memcmp(array_data, elements, bytes) != 0) {\012 // Warn if we have JNI_ABORT and the arrays don't match since this is usually an error.\012        LOG(WARNING) &lt;&lt; &quot;Possible incorrect JNI_ABORT in Release*ArrayElements&quot;;\012        soa.Self()-&gt;DumpJavaStack(LOG_STREAM(WARNING));\012 }\012 },if (is_copy) {\012 // Sanity check: If elements is not the same as the java array's data, it better not be a\012 // heap address. TODO: This might be slow to check, may be worth keeping track of which\012 // copies we make?\012 if (heap-&gt;IsNonDiscontinuousSpaceHeapAddress(elements)) {\012        soa.Vm()-&gt;JniAbortF(&quot;ReleaseArrayElements&quot;,\012 &quot;invalid element pointer %p, array elements are %p&quot;,\012 reinterpret_cast&lt;void*&gt;(elements), array_data);\012 return;\012 }\012 if (mode != JNI_ABORT) {\012        memcpy(array_data, elements, bytes);\012 } else if (kWarnJniAbort &amp;&amp; memcmp(array_data, elements, bytes) != 0) {\012 // Warn if we have JNI_ABORT and the arrays don't match since this is usually an error.\012        LOG(WARNING) &lt;&lt; &quot;Possible incorrect JNI_ABORT in Release*ArrayElements&quot;;\012        soa.Self()-&gt;DumpJavaStack(LOG_STREAM(WARNING));\012 }\012 })<SUB>2945</SUB>> ]
-"13928" [label = <(UNKNOWN,if (mode != JNI_COMMIT) {\012 if (is_copy) {\012 delete[] reinterpret_cast&lt;uint64_t*&gt;(elements);\012 } else if (heap-&gt;IsMovableObject(array)) {\012 // Non copy to a movable object must means that we had disabled the moving GC.\012 if (!kUseReadBarrier) {\012          heap-&gt;DecrementDisableMovingGC(soa.Self());\012 } else {\012          heap-&gt;DecrementDisableThreadFlip(soa.Self());\012 }\012 }\012 },if (mode != JNI_COMMIT) {\012 if (is_copy) {\012 delete[] reinterpret_cast&lt;uint64_t*&gt;(elements);\012 } else if (heap-&gt;IsMovableObject(array)) {\012 // Non copy to a movable object must means that we had disabled the moving GC.\012 if (!kUseReadBarrier) {\012          heap-&gt;DecrementDisableMovingGC(soa.Self());\012 } else {\012          heap-&gt;DecrementDisableThreadFlip(soa.Self());\012 }\012 }\012 })<SUB>2963</SUB>> ]
-"13929" [label = <(UNKNOWN,},})<SUB>2975</SUB>> ]
-"14142" [label = <(UNKNOWN,};,};)<SUB>3012</SUB>> ]
-"14144" [label = <(&lt;operator&gt;.assignment,gJniNativeInterface = {\012 nullptr, // reserved0.\012 nullptr, // reserved1.\012 nullptr, // reserved2.\012 nullptr, // reserved3.\012  JNI::GetVersion,\012  JNI::DefineClass,\012  JNI::FindClass,\012  JNI::FromReflectedMethod,\012  JNI::FromReflectedField,\012  JNI::ToReflectedMethod,\012  JNI::GetSuperclass,\012  JNI::IsAssignableFrom,\012  JNI::ToReflectedField,\012  JNI::Throw,\012  JNI::ThrowNew,\012  JNI::ExceptionOccurred,\012  JNI::ExceptionDescribe,\012  JNI::ExceptionClear,\012  JNI::FatalError,\012  JNI::PushLocalFrame,\012  JNI::PopLocalFrame,\012  JNI::NewGlobalRef,\012  JNI::DeleteGlobalRef,\012  JNI::DeleteLocalRef,\012  JNI::IsSameObject,\012  JNI::NewLocalRef,\012  JNI::EnsureLocalCapacity,\012  JNI::AllocObject,\012  JNI::NewObject,\012  JNI::NewObjectV,\012  JNI::NewObjectA,\012  JNI::GetObjectClass,\012  JNI::IsInstanceOf,\012  JNI::GetMethodID,\012  JNI::CallObjectMethod,\012  JNI::CallObjectMethodV,\012  JNI::CallObjectMethodA,\012  JNI::CallBooleanMethod,\012  JNI::CallBooleanMethodV,\012  JNI::CallBooleanMethodA,\012  JNI::CallByteMethod,\012  JNI::CallByteMethodV,\012  JNI::CallByteMethodA,\012  JNI::CallCharMethod,\012  JNI::CallCharMethodV,\012  JNI::CallCharMethodA,\012  JNI::CallShortMethod,\012  JNI::CallShortMethodV,\012  JNI::CallShortMethodA,\012  JNI::CallIntMethod,\012  JNI::CallIntMethodV,\012  JNI::CallIntMethodA,\012  JNI::CallLongMethod,\012  JNI::CallLongMethodV,\012  JNI::CallLongMethodA,\012  JNI::CallFloatMethod,\012  JNI::CallFloatMethodV,\012  JNI::CallFloatMethodA,\012  JNI::CallDoubleMethod,\012  JNI::CallDoubleMethodV,\012  JNI::CallDoubleMethodA,\012  JNI::CallVoidMethod,\012  JNI::CallVoidMethodV,\012  JNI::CallVoidMethodA,\012  JNI::CallNonvirtualObjectMethod,\012  JNI::CallNonvirtualObjectMethodV,\012  JNI::CallNonvirtualObjectMethodA,\012  JNI::CallNonvirtualBooleanMethod,\012  JNI::CallNonvirtualBooleanMethodV,\012  JNI::CallNonvirtualBooleanMethodA,\012  JNI::CallNonvirtualByteMethod,\012  JNI::CallNonvirtualByteMethodV,\012  JNI::CallNonvirtualByteMethodA,\012  JNI::CallNonvirtualCharMethod,\012  JNI::CallNonvirtualCharMethodV,\012  JNI::CallNonvirtualCharMethodA,\012  JNI::CallNonvirtualShortMethod,\012  JNI::CallNonvirtualShortMethodV,\012  JNI::CallNonvirtualShortMethodA,\012  JNI::CallNonvirtualIntMethod,\012  JNI::CallNonvirtualIntMethodV,\012  JNI::CallNonvirtualIntMethodA,\012  JNI::CallNonvirtualLongMethod,\012  JNI::CallNonvirtualLongMethodV,\012  JNI::CallNonvirtualLongMethodA,\012  JNI::CallNonvirtualFloatMethod,\012  JNI::CallNonvirtualFloatMethodV,\012  JNI::CallNonvirtualFloatMethodA,\012  JNI::CallNonvirtualDoubleMethod,\012  JNI::CallNonvirtualDoubleMethodV,\012  JNI::CallNonvirtualDoubleMethodA,\012  JNI::CallNonvirtualVoidMethod,\012  JNI::CallNonvirtualVoidMethodV,\012  JNI::CallNonvirtualVoidMethodA,\012  JNI::GetFieldID,\012  JNI::GetObjectField,\012  JNI::GetBooleanField,\012  JNI::GetByteField,\012  JNI::GetCharField,\012  JNI::GetShortField,\012  JNI::GetIntField,\012  JNI::GetLongField,\012  JNI::GetFloatField,\012  JNI::GetDoubleField,\012  JNI::SetObjectField,\012  JNI::SetBooleanField,\012  JNI::SetByteField,\012  JNI::SetCharField,\012  JNI::SetShortField,\012  JNI::SetIntField,\012  JNI::SetLongField,\012  JNI::SetFloatField,\012  JNI::SetDoubleField,\012  JNI::GetStaticMethodID,\012  JNI::CallStaticObjectMethod,\012  JNI::CallStaticObjectMethodV,\012  JNI::CallStaticObjectMethodA,\012  JNI::CallStaticBooleanMethod,\012  JNI::CallStaticBooleanMethodV,\012  JNI::CallStaticBooleanMethodA,\012  JNI::CallStaticByteMethod,\012  JNI::CallStaticByteMethodV,\012  JNI::CallStaticByteMethodA,\012  JNI::CallStaticCharMethod,\012  JNI::CallStaticCharMethodV,\012  JNI::CallStaticCharMethodA,\012  JNI::CallStaticShortMethod,\012  JNI::CallStaticShortMethodV,\012  JNI::CallStaticShortMethodA,\012  JNI::CallStaticIntMethod,\012  JNI::CallStaticIntMethodV,\012  JNI::CallStaticIntMethodA,\012  JNI::CallStaticLongMethod,\012  JNI::CallStaticLongMethodV,\012  JNI::CallStaticLongMethodA,\012  JNI::CallStaticFloatMethod,\012  JNI::CallStaticFloatMethodV,\012  JNI::CallStaticFloatMethodA,\012  JNI::CallStaticDoubleMethod,\012  JNI::CallStaticDoubleMethodV,\012  JNI::CallStaticDoubleMethodA,\012  JNI::CallStaticVoidMethod,\012  JNI::CallStaticVoidMethodV,\012  JNI::CallStaticVoidMethodA,\012  JNI::GetStaticFieldID,\012  JNI::GetStaticObjectField,\012  JNI::GetStaticBooleanField,\012  JNI::GetStaticByteField,\012  JNI::GetStaticCharField,\012  JNI::GetStaticShortField,\012  JNI::GetStaticIntField,\012  JNI::GetStaticLongField,\012  JNI::GetStaticFloatField,\012  JNI::GetStaticDoubleField,\012  JNI::SetStaticObjectField,\012  JNI::SetStaticBooleanField,\012  JNI::SetStaticByteField,\012  JNI::SetStaticCharField,\012  JNI::SetStaticShortField,\012  JNI::SetStaticIntField,\012  JNI::SetStaticLongField,\012  JNI::SetStaticFloatField,\012  JNI::SetStaticDoubleField,\012  JNI::NewString,\012  JNI::GetStringLength,\012  JNI::GetStringChars,\012  JNI::ReleaseStringChars,\012  JNI::NewStringUTF,\012  JNI::GetStringUTFLength,\012  JNI::GetStringUTFChars,\012  JNI::ReleaseStringUTFChars,\012  JNI::GetArrayLength,\012  JNI::NewObjectArray,\012  JNI::GetObjectArrayElement,\012  JNI::SetObjectArrayElement,\012  JNI::NewBooleanArray,\012  JNI::NewByteArray,\012  JNI::NewCharArray,\012  JNI::NewShortArray,\012  JNI::NewIntArray,\012  JNI::NewLongArray,\012  JNI::NewFloatArray,\012  JNI::NewDoubleArray,\012  JNI::GetBooleanArrayElements,\012  JNI::GetByteArrayElements,\012  JNI::GetCharArrayElements,\012  JNI::GetShortArrayElements,\012  JNI::GetIntArrayElements,\012  JNI::GetLongArrayElements,\012  JNI::GetFloatArrayElements,\012  JNI::GetDoubleArrayElements,\012  JNI::ReleaseBooleanArrayElements,\012  JNI::ReleaseByteArrayElements,\012  JNI::ReleaseCharArrayElements,\012  JNI::ReleaseShortArrayElements,\012  JNI::ReleaseIntArrayElements,\012  JNI::ReleaseLongArrayElements,\012  JNI::ReleaseFloatArrayElements,\012  JNI::ReleaseDoubleArrayElements,\012  JNI::GetBooleanArrayRegion,\012  JNI::GetByteArrayRegion,\012  JNI::GetCharArrayRegion,\012  JNI::GetShortArrayRegion,\012  JNI::GetIntArrayRegion,\012  JNI::GetLongArrayRegion,\012  JNI::GetFloatArrayRegion,\012  JNI::GetDoubleArrayRegion,\012  JNI::SetBooleanArrayRegion,\012  JNI::SetByteArrayRegion,\012  JNI::SetCharArrayRegion,\012  JNI::SetShortArrayRegion,\012  JNI::SetIntArrayRegion,\012  JNI::SetLongArrayRegion,\012  JNI::SetFloatArrayRegion,\012  JNI::SetDoubleArrayRegion,\012  JNI::RegisterNatives,\012  JNI::UnregisterNatives,\012  JNI::MonitorEnter,\012  JNI::MonitorExit,\012  JNI::GetJavaVM,\012  JNI::GetStringRegion,\012  JNI::GetStringUTFRegion,\012  JNI::GetPrimitiveArrayCritical,\012  JNI::ReleasePrimitiveArrayCritical,\012  JNI::GetStringCritical,\012  JNI::ReleaseStringCritical,\012  JNI::NewWeakGlobalRef,\012  JNI::DeleteWeakGlobalRef,\012  JNI::ExceptionCheck,\012  JNI::NewDirectByteBuffer,\012  JNI::GetDirectBufferAddress,\012  JNI::GetDirectBufferCapacity,\012  JNI::GetObjectRefType,\012})<SUB>3014</SUB>> ]
-"14849" [label = <(&lt;operator&gt;.assignment,(*gJniSleepForeverStub[])() = {\012 nullptr, // reserved0.\012 nullptr, // reserved1.\012 nullptr, // reserved2.\012 nullptr, // reserved3.\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012})<SUB>3254</SUB>> ]
-"15125" [label = <(UNKNOWN,},})<SUB>3504</SUB>> ]
-"571" [label = <(&lt;operator&gt;.assignment,kWarnJniAbort = false)<SUB>342</SUB>> ]
-"574" [label = <(UNKNOWN,template&lt;typename T&gt;\012ALWAYS_INLINE static bool ShouldDenyAccessToMember(T* member, Thread* self)\012    REQUIRES_SHARED(Locks::mutator_lock_) {\012 if (IsWhitelistedNativeCaller()) {\012 return false;\012 }\012 return hiddenapi::ShouldDenyAccessToMember(\012      member,\012 [&amp;]() REQUIRES_SHARED(Locks::mutator_lock_) {\012 // Construct AccessContext from the first calling class on stack.\012 // If the calling class cannot be determined, e.g. unattached threads,\012 // we conservatively assume the caller is trusted.\012 ObjPtr&lt;mirror::Class&gt; caller = GetCallingClass(self, /* num_frames */ 1);\012 return caller.IsNull() ? hiddenapi::AccessContext(/* is_trusted= */ true)\012 : hiddenapi::AccessContext(caller);\012 },\012      hiddenapi::AccessMethod::kJNI);\012},template&lt;typename T&gt;\012ALWAYS_INLINE static bool ShouldDenyAccessToMember(T* member, Thread* self)\012    REQUIRES_SHARED(Locks::mutator_lock_) {\012 if (IsWhitelistedNativeCaller()) {\012 return false;\012 }\012 return hiddenapi::ShouldDenyAccessToMember(\012      member,\012 [&amp;]() REQUIRES_SHARED(Locks::mutator_lock_) {\012 // Construct AccessContext from the first calling class on stack.\012 // If the calling class cannot be determined, e.g. unattached threads,\012 // we conservatively assume the caller is trusted.\012 ObjPtr&lt;mirror::Class&gt; caller = GetCallingClass(self, /* num_frames */ 1);\012 return caller.IsNull() ? hiddenapi::AccessContext(/* is_trusted= */ true)\012 : hiddenapi::AccessContext(caller);\012 },\012      hiddenapi::AccessMethod::kJNI);\012})<SUB>344</SUB>> ]
-"582" [label = <(UNKNOWN,),))<SUB>366</SUB>> ]
-"583" [label = <(UNKNOWN,REQUIRES_SHARED(Locks::mutator_lock_) {\012  DCHECK_EQ(field-&gt;GetTypeAsPrimitiveType(), Primitive::kPrimNot);,REQUIRES_SHARED(Locks::mutator_lock_) {\012  DCHECK_EQ(field-&gt;GetTypeAsPrimitiveType(), Primitive::kPrimNot);)<SUB>367</SUB>> ]
-"585" [label = <(&lt;operator&gt;.assignment,* instrumentation = Runtime::Current()-&gt;GetInstrumentation())<SUB>369</SUB>> ]
-"594" [label = <(UNKNOWN,if (UNLIKELY(instrumentation-&gt;HasFieldWriteListeners())) {\012 Thread* self = Thread::Current();\012 ArtMethod* cur_method = self-&gt;GetCurrentMethod(/*dex_pc=*/ nullptr,\012 /*check_suspended=*/ true,\012 /*abort_on_error=*/ false);\012\012 if (cur_method == nullptr) {\012 // Set/Get Fields can be issued without a method during runtime startup/teardown. Ignore all\012 // of these changes.\012 return;\012 }\012    DCHECK(cur_method-&gt;IsNative());\012 JValue val;\012    val.SetL(self-&gt;DecodeJObject(jval));\012    instrumentation-&gt;FieldWriteEvent(self,\012                                     self-&gt;DecodeJObject(obj).Ptr(),\012                                     cur_method,\012 0, // dex_pc is always 0 since this is a native method.\012                                     field,\012                                     val);\012 },if (UNLIKELY(instrumentation-&gt;HasFieldWriteListeners())) {\012 Thread* self = Thread::Current();\012 ArtMethod* cur_method = self-&gt;GetCurrentMethod(/*dex_pc=*/ nullptr,\012 /*check_suspended=*/ true,\012 /*abort_on_error=*/ false);\012\012 if (cur_method == nullptr) {\012 // Set/Get Fields can be issued without a method during runtime startup/teardown. Ignore all\012 // of these changes.\012 return;\012 }\012    DCHECK(cur_method-&gt;IsNative());\012 JValue val;\012    val.SetL(self-&gt;DecodeJObject(jval));\012    instrumentation-&gt;FieldWriteEvent(self,\012                                     self-&gt;DecodeJObject(obj).Ptr(),\012                                     cur_method,\012 0, // dex_pc is always 0 since this is a native method.\012                                     field,\012                                     val);\012 })<SUB>370</SUB>> ]
-"607" [label = <(GetInstrumentation,Runtime::Current()-&gt;GetInstrumentation())<SUB>396</SUB>> ]
-"732" [label = <(NewHandle,hs.NewHandle(klass))<SUB>501</SUB>> ]
-"759" [label = <(GetImagePointerSize,Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize())<SUB>516</SUB>> ]
-"787" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::ClassLoader&gt;(Runtime::Current()-&gt;GetSystemClassLoader()))<SUB>545</SUB>> ]
-"820" [label = <(NewHandle,hs.NewHandle(EnsureInitialized(soa.Self(), soa.Decode&lt;mirror::Class&gt;(jni_class))))<SUB>567</SUB>> ]
-"847" [label = <(GetClassLinker,Runtime::Current()-&gt;GetClassLinker())<SUB>573</SUB>> ]
-"13723" [label = <(GetClassRoot&lt;ArtArrayT&gt;,GetClassRoot&lt;ArtArrayT&gt;())<SUB>2882</SUB>> ]
-"13905" [label = <(GetHeap,Runtime::Current()-&gt;GetHeap())<SUB>2942</SUB>> ]
-"13915" [label = <(&lt;operator&gt;.notEquals,array_data != elements)<SUB>2943</SUB>> ]
-"13921" [label = <(&lt;operator&gt;.multiplication,array-&gt;GetLength() * component_size)<SUB>2944</SUB>> ]
-"14146" [label = <(&lt;operator&gt;.arrayInitializer,{\012 nullptr, // reserved0.\012 nullptr, // reserved1.\012 nullptr, // reserved2.\012 nullptr, // reserved3.\012  JNI::GetVersion,\012  JNI::DefineClass,\012  JNI::FindClass,\012  JNI::FromReflectedMethod,\012  JNI::FromReflectedField,\012  JNI::ToReflectedMethod,\012  JNI::GetSuperclass,\012  JNI::IsAssignableFrom,\012  JNI::ToReflectedField,\012  JNI::Throw,\012  JNI::ThrowNew,\012  JNI::ExceptionOccurred,\012  JNI::ExceptionDescribe,\012  JNI::ExceptionClear,\012  JNI::FatalError,\012  JNI::PushLocalFrame,\012  JNI::PopLocalFrame,\012  JNI::NewGlobalRef,\012  JNI::DeleteGlobalRef,\012  JNI::DeleteLocalRef,\012  JNI::IsSameObject,\012  JNI::NewLocalRef,\012  JNI::EnsureLocalCapacity,\012  JNI::AllocObject,\012  JNI::NewObject,\012  JNI::NewObjectV,\012  JNI::NewObjectA,\012  JNI::GetObjectClass,\012  JNI::IsInstanceOf,\012  JNI::GetMethodID,\012  JNI::CallObjectMethod,\012  JNI::CallObjectMethodV,\012  JNI::CallObjectMethodA,\012  JNI::CallBooleanMethod,\012  JNI::CallBooleanMethodV,\012  JNI::CallBooleanMethodA,\012  JNI::CallByteMethod,\012  JNI::CallByteMethodV,\012  JNI::CallByteMethodA,\012  JNI::CallCharMethod,\012  JNI::CallCharMethodV,\012  JNI::CallCharMethodA,\012  JNI::CallShortMethod,\012  JNI::CallShortMethodV,\012  JNI::CallShortMethodA,\012  JNI::CallIntMethod,\012  JNI::CallIntMethodV,\012  JNI::CallIntMethodA,\012  JNI::CallLongMethod,\012  JNI::CallLongMethodV,\012  JNI::CallLongMethodA,\012  JNI::CallFloatMethod,\012  JNI::CallFloatMethodV,\012  JNI::CallFloatMethodA,\012  JNI::CallDoubleMethod,\012  JNI::CallDoubleMethodV,\012  JNI::CallDoubleMethodA,\012  JNI::CallVoidMethod,\012  JNI::CallVoidMethodV,\012  JNI::CallVoidMethodA,\012  JNI::CallNonvirtualObjectMethod,\012  JNI::CallNonvirtualObjectMethodV,\012  JNI::CallNonvirtualObjectMethodA,\012  JNI::CallNonvirtualBooleanMethod,\012  JNI::CallNonvirtualBooleanMethodV,\012  JNI::CallNonvirtualBooleanMethodA,\012  JNI::CallNonvirtualByteMethod,\012  JNI::CallNonvirtualByteMethodV,\012  JNI::CallNonvirtualByteMethodA,\012  JNI::CallNonvirtualCharMethod,\012  JNI::CallNonvirtualCharMethodV,\012  JNI::CallNonvirtualCharMethodA,\012  JNI::CallNonvirtualShortMethod,\012  JNI::CallNonvirtualShortMethodV,\012  JNI::CallNonvirtualShortMethodA,\012  JNI::CallNonvirtualIntMethod,\012  JNI::CallNonvirtualIntMethodV,\012  JNI::CallNonvirtualIntMethodA,\012  JNI::CallNonvirtualLongMethod,\012  JNI::CallNonvirtualLongMethodV,\012  JNI::CallNonvirtualLongMethodA,\012  JNI::CallNonvirtualFloatMethod,\012  JNI::CallNonvirtualFloatMethodV,\012  JNI::CallNonvirtualFloatMethodA,\012  JNI::CallNonvirtualDoubleMethod,\012  JNI::CallNonvirtualDoubleMethodV,\012  JNI::CallNonvirtualDoubleMethodA,\012  JNI::CallNonvirtualVoidMethod,\012  JNI::CallNonvirtualVoidMethodV,\012  JNI::CallNonvirtualVoidMethodA,\012  JNI::GetFieldID,\012  JNI::GetObjectField,\012  JNI::GetBooleanField,\012  JNI::GetByteField,\012  JNI::GetCharField,\012  JNI::GetShortField,\012  JNI::GetIntField,\012  JNI::GetLongField,\012  JNI::GetFloatField,\012  JNI::GetDoubleField,\012  JNI::SetObjectField,\012  JNI::SetBooleanField,\012  JNI::SetByteField,\012  JNI::SetCharField,\012  JNI::SetShortField,\012  JNI::SetIntField,\012  JNI::SetLongField,\012  JNI::SetFloatField,\012  JNI::SetDoubleField,\012  JNI::GetStaticMethodID,\012  JNI::CallStaticObjectMethod,\012  JNI::CallStaticObjectMethodV,\012  JNI::CallStaticObjectMethodA,\012  JNI::CallStaticBooleanMethod,\012  JNI::CallStaticBooleanMethodV,\012  JNI::CallStaticBooleanMethodA,\012  JNI::CallStaticByteMethod,\012  JNI::CallStaticByteMethodV,\012  JNI::CallStaticByteMethodA,\012  JNI::CallStaticCharMethod,\012  JNI::CallStaticCharMethodV,\012  JNI::CallStaticCharMethodA,\012  JNI::CallStaticShortMethod,\012  JNI::CallStaticShortMethodV,\012  JNI::CallStaticShortMethodA,\012  JNI::CallStaticIntMethod,\012  JNI::CallStaticIntMethodV,\012  JNI::CallStaticIntMethodA,\012  JNI::CallStaticLongMethod,\012  JNI::CallStaticLongMethodV,\012  JNI::CallStaticLongMethodA,\012  JNI::CallStaticFloatMethod,\012  JNI::CallStaticFloatMethodV,\012  JNI::CallStaticFloatMethodA,\012  JNI::CallStaticDoubleMethod,\012  JNI::CallStaticDoubleMethodV,\012  JNI::CallStaticDoubleMethodA,\012  JNI::CallStaticVoidMethod,\012  JNI::CallStaticVoidMethodV,\012  JNI::CallStaticVoidMethodA,\012  JNI::GetStaticFieldID,\012  JNI::GetStaticObjectField,\012  JNI::GetStaticBooleanField,\012  JNI::GetStaticByteField,\012  JNI::GetStaticCharField,\012  JNI::GetStaticShortField,\012  JNI::GetStaticIntField,\012  JNI::GetStaticLongField,\012  JNI::GetStaticFloatField,\012  JNI::GetStaticDoubleField,\012  JNI::SetStaticObjectField,\012  JNI::SetStaticBooleanField,\012  JNI::SetStaticByteField,\012  JNI::SetStaticCharField,\012  JNI::SetStaticShortField,\012  JNI::SetStaticIntField,\012  JNI::SetStaticLongField,\012  JNI::SetStaticFloatField,\012  JNI::SetStaticDoubleField,\012  JNI::NewString,\012  JNI::GetStringLength,\012  JNI::GetStringChars,\012  JNI::ReleaseStringChars,\012  JNI::NewStringUTF,\012  JNI::GetStringUTFLength,\012  JNI::GetStringUTFChars,\012  JNI::ReleaseStringUTFChars,\012  JNI::GetArrayLength,\012  JNI::NewObjectArray,\012  JNI::GetObjectArrayElement,\012  JNI::SetObjectArrayElement,\012  JNI::NewBooleanArray,\012  JNI::NewByteArray,\012  JNI::NewCharArray,\012  JNI::NewShortArray,\012  JNI::NewIntArray,\012  JNI::NewLongArray,\012  JNI::NewFloatArray,\012  JNI::NewDoubleArray,\012  JNI::GetBooleanArrayElements,\012  JNI::GetByteArrayElements,\012  JNI::GetCharArrayElements,\012  JNI::GetShortArrayElements,\012  JNI::GetIntArrayElements,\012  JNI::GetLongArrayElements,\012  JNI::GetFloatArrayElements,\012  JNI::GetDoubleArrayElements,\012  JNI::ReleaseBooleanArrayElements,\012  JNI::ReleaseByteArrayElements,\012  JNI::ReleaseCharArrayElements,\012  JNI::ReleaseShortArrayElements,\012  JNI::ReleaseIntArrayElements,\012  JNI::ReleaseLongArrayElements,\012  JNI::ReleaseFloatArrayElements,\012  JNI::ReleaseDoubleArrayElements,\012  JNI::GetBooleanArrayRegion,\012  JNI::GetByteArrayRegion,\012  JNI::GetCharArrayRegion,\012  JNI::GetShortArrayRegion,\012  JNI::GetIntArrayRegion,\012  JNI::GetLongArrayRegion,\012  JNI::GetFloatArrayRegion,\012  JNI::GetDoubleArrayRegion,\012  JNI::SetBooleanArrayRegion,\012  JNI::SetByteArrayRegion,\012  JNI::SetCharArrayRegion,\012  JNI::SetShortArrayRegion,\012  JNI::SetIntArrayRegion,\012  JNI::SetLongArrayRegion,\012  JNI::SetFloatArrayRegion,\012  JNI::SetDoubleArrayRegion,\012  JNI::RegisterNatives,\012  JNI::UnregisterNatives,\012  JNI::MonitorEnter,\012  JNI::MonitorExit,\012  JNI::GetJavaVM,\012  JNI::GetStringRegion,\012  JNI::GetStringUTFRegion,\012  JNI::GetPrimitiveArrayCritical,\012  JNI::ReleasePrimitiveArrayCritical,\012  JNI::GetStringCritical,\012  JNI::ReleaseStringCritical,\012  JNI::NewWeakGlobalRef,\012  JNI::DeleteWeakGlobalRef,\012  JNI::ExceptionCheck,\012  JNI::NewDirectByteBuffer,\012  JNI::GetDirectBufferAddress,\012  JNI::GetDirectBufferCapacity,\012  JNI::GetObjectRefType,\012})<SUB>3014</SUB>> ]
-"14851" [label = <(&lt;operator&gt;.arrayInitializer,{\012 nullptr, // reserved0.\012 nullptr, // reserved1.\012 nullptr, // reserved2.\012 nullptr, // reserved3.\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012 SleepForever,\012})<SUB>3254</SUB>> ]
-"49" [label = <(&lt;operator&gt;.assignment,kBadUtf8ReplacementChar[] = &quot;?&quot;)<SUB>88</SUB>> ]
-"228" [label = <(&lt;operator&gt;.assignment,kMaxReturnAddressDepth = 4)<SUB>164</SUB>> ]
-"587" [label = <(GetInstrumentation,Runtime::Current()-&gt;GetInstrumentation())<SUB>369</SUB>> ]
-"608" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetInstrumentation)<SUB>396</SUB>> ]
-"733" [label = <(&lt;operator&gt;.fieldAccess,hs.NewHandle)<SUB>501</SUB>> ]
-"760" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize)<SUB>516</SUB>> ]
-"788" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::ClassLoader)<SUB>545</SUB>> ]
-"795" [label = <(GetSystemClassLoader,Runtime::Current()-&gt;GetSystemClassLoader())<SUB>545</SUB>> ]
-"821" [label = <(&lt;operator&gt;.fieldAccess,hs.NewHandle)<SUB>567</SUB>> ]
-"824" [label = <(EnsureInitialized,EnsureInitialized(soa.Self(), soa.Decode&lt;mirror::Class&gt;(jni_class)))<SUB>567</SUB>> ]
-"848" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetClassLinker)<SUB>573</SUB>> ]
-"13906" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetHeap)<SUB>2942</SUB>> ]
-"13922" [label = <(GetLength,array-&gt;GetLength())<SUB>2944</SUB>> ]
-"14151" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetVersion)<SUB>3019</SUB>> ]
-"14154" [label = <(&lt;operator&gt;.fieldAccess,JNI::DefineClass)<SUB>3020</SUB>> ]
-"14157" [label = <(&lt;operator&gt;.fieldAccess,JNI::FindClass)<SUB>3021</SUB>> ]
-"14160" [label = <(&lt;operator&gt;.fieldAccess,JNI::FromReflectedMethod)<SUB>3022</SUB>> ]
-"14163" [label = <(&lt;operator&gt;.fieldAccess,JNI::FromReflectedField)<SUB>3023</SUB>> ]
-"14166" [label = <(&lt;operator&gt;.fieldAccess,JNI::ToReflectedMethod)<SUB>3024</SUB>> ]
-"14169" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetSuperclass)<SUB>3025</SUB>> ]
-"14172" [label = <(&lt;operator&gt;.fieldAccess,JNI::IsAssignableFrom)<SUB>3026</SUB>> ]
-"14175" [label = <(&lt;operator&gt;.fieldAccess,JNI::ToReflectedField)<SUB>3027</SUB>> ]
-"14178" [label = <(&lt;operator&gt;.fieldAccess,JNI::Throw)<SUB>3028</SUB>> ]
-"14181" [label = <(&lt;operator&gt;.fieldAccess,JNI::ThrowNew)<SUB>3029</SUB>> ]
-"14184" [label = <(&lt;operator&gt;.fieldAccess,JNI::ExceptionOccurred)<SUB>3030</SUB>> ]
-"14187" [label = <(&lt;operator&gt;.fieldAccess,JNI::ExceptionDescribe)<SUB>3031</SUB>> ]
-"14190" [label = <(&lt;operator&gt;.fieldAccess,JNI::ExceptionClear)<SUB>3032</SUB>> ]
-"14193" [label = <(&lt;operator&gt;.fieldAccess,JNI::FatalError)<SUB>3033</SUB>> ]
-"14196" [label = <(&lt;operator&gt;.fieldAccess,JNI::PushLocalFrame)<SUB>3034</SUB>> ]
-"14199" [label = <(&lt;operator&gt;.fieldAccess,JNI::PopLocalFrame)<SUB>3035</SUB>> ]
-"14202" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewGlobalRef)<SUB>3036</SUB>> ]
-"14205" [label = <(&lt;operator&gt;.fieldAccess,JNI::DeleteGlobalRef)<SUB>3037</SUB>> ]
-"14208" [label = <(&lt;operator&gt;.fieldAccess,JNI::DeleteLocalRef)<SUB>3038</SUB>> ]
-"14211" [label = <(&lt;operator&gt;.fieldAccess,JNI::IsSameObject)<SUB>3039</SUB>> ]
-"14214" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewLocalRef)<SUB>3040</SUB>> ]
-"14217" [label = <(&lt;operator&gt;.fieldAccess,JNI::EnsureLocalCapacity)<SUB>3041</SUB>> ]
-"14220" [label = <(&lt;operator&gt;.fieldAccess,JNI::AllocObject)<SUB>3042</SUB>> ]
-"14223" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewObject)<SUB>3043</SUB>> ]
-"14226" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewObjectV)<SUB>3044</SUB>> ]
-"14229" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewObjectA)<SUB>3045</SUB>> ]
-"14232" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetObjectClass)<SUB>3046</SUB>> ]
-"14235" [label = <(&lt;operator&gt;.fieldAccess,JNI::IsInstanceOf)<SUB>3047</SUB>> ]
-"14238" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetMethodID)<SUB>3048</SUB>> ]
-"14241" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallObjectMethod)<SUB>3049</SUB>> ]
-"14244" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallObjectMethodV)<SUB>3050</SUB>> ]
-"14247" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallObjectMethodA)<SUB>3051</SUB>> ]
-"14250" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallBooleanMethod)<SUB>3052</SUB>> ]
-"14253" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallBooleanMethodV)<SUB>3053</SUB>> ]
-"14256" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallBooleanMethodA)<SUB>3054</SUB>> ]
-"14259" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallByteMethod)<SUB>3055</SUB>> ]
-"14262" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallByteMethodV)<SUB>3056</SUB>> ]
-"14265" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallByteMethodA)<SUB>3057</SUB>> ]
-"14268" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallCharMethod)<SUB>3058</SUB>> ]
-"14271" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallCharMethodV)<SUB>3059</SUB>> ]
-"14274" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallCharMethodA)<SUB>3060</SUB>> ]
-"14277" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallShortMethod)<SUB>3061</SUB>> ]
-"14280" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallShortMethodV)<SUB>3062</SUB>> ]
-"14283" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallShortMethodA)<SUB>3063</SUB>> ]
-"14286" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallIntMethod)<SUB>3064</SUB>> ]
-"14289" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallIntMethodV)<SUB>3065</SUB>> ]
-"14292" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallIntMethodA)<SUB>3066</SUB>> ]
-"14295" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallLongMethod)<SUB>3067</SUB>> ]
-"14298" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallLongMethodV)<SUB>3068</SUB>> ]
-"14301" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallLongMethodA)<SUB>3069</SUB>> ]
-"14304" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallFloatMethod)<SUB>3070</SUB>> ]
-"14307" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallFloatMethodV)<SUB>3071</SUB>> ]
-"14310" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallFloatMethodA)<SUB>3072</SUB>> ]
-"14313" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallDoubleMethod)<SUB>3073</SUB>> ]
-"14316" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallDoubleMethodV)<SUB>3074</SUB>> ]
-"14319" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallDoubleMethodA)<SUB>3075</SUB>> ]
-"14322" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallVoidMethod)<SUB>3076</SUB>> ]
-"14325" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallVoidMethodV)<SUB>3077</SUB>> ]
-"14328" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallVoidMethodA)<SUB>3078</SUB>> ]
-"14331" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualObjectMethod)<SUB>3079</SUB>> ]
-"14334" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualObjectMethodV)<SUB>3080</SUB>> ]
-"14337" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualObjectMethodA)<SUB>3081</SUB>> ]
-"14340" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualBooleanMethod)<SUB>3082</SUB>> ]
-"14343" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualBooleanMethodV)<SUB>3083</SUB>> ]
-"14346" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualBooleanMethodA)<SUB>3084</SUB>> ]
-"14349" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualByteMethod)<SUB>3085</SUB>> ]
-"14352" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualByteMethodV)<SUB>3086</SUB>> ]
-"14355" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualByteMethodA)<SUB>3087</SUB>> ]
-"14358" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualCharMethod)<SUB>3088</SUB>> ]
-"14361" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualCharMethodV)<SUB>3089</SUB>> ]
-"14364" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualCharMethodA)<SUB>3090</SUB>> ]
-"14367" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualShortMethod)<SUB>3091</SUB>> ]
-"14370" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualShortMethodV)<SUB>3092</SUB>> ]
-"14373" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualShortMethodA)<SUB>3093</SUB>> ]
-"14376" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualIntMethod)<SUB>3094</SUB>> ]
-"14379" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualIntMethodV)<SUB>3095</SUB>> ]
-"14382" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualIntMethodA)<SUB>3096</SUB>> ]
-"14385" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualLongMethod)<SUB>3097</SUB>> ]
-"14388" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualLongMethodV)<SUB>3098</SUB>> ]
-"14391" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualLongMethodA)<SUB>3099</SUB>> ]
-"14394" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualFloatMethod)<SUB>3100</SUB>> ]
-"14397" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualFloatMethodV)<SUB>3101</SUB>> ]
-"14400" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualFloatMethodA)<SUB>3102</SUB>> ]
-"14403" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualDoubleMethod)<SUB>3103</SUB>> ]
-"14406" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualDoubleMethodV)<SUB>3104</SUB>> ]
-"14409" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualDoubleMethodA)<SUB>3105</SUB>> ]
-"14412" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualVoidMethod)<SUB>3106</SUB>> ]
-"14415" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualVoidMethodV)<SUB>3107</SUB>> ]
-"14418" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallNonvirtualVoidMethodA)<SUB>3108</SUB>> ]
-"14421" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetFieldID)<SUB>3109</SUB>> ]
-"14424" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetObjectField)<SUB>3110</SUB>> ]
-"14427" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetBooleanField)<SUB>3111</SUB>> ]
-"14430" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetByteField)<SUB>3112</SUB>> ]
-"14433" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetCharField)<SUB>3113</SUB>> ]
-"14436" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetShortField)<SUB>3114</SUB>> ]
-"14439" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetIntField)<SUB>3115</SUB>> ]
-"14442" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetLongField)<SUB>3116</SUB>> ]
-"14445" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetFloatField)<SUB>3117</SUB>> ]
-"14448" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetDoubleField)<SUB>3118</SUB>> ]
-"14451" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetObjectField)<SUB>3119</SUB>> ]
-"14454" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetBooleanField)<SUB>3120</SUB>> ]
-"14457" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetByteField)<SUB>3121</SUB>> ]
-"14460" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetCharField)<SUB>3122</SUB>> ]
-"14463" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetShortField)<SUB>3123</SUB>> ]
-"14466" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetIntField)<SUB>3124</SUB>> ]
-"14469" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetLongField)<SUB>3125</SUB>> ]
-"14472" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetFloatField)<SUB>3126</SUB>> ]
-"14475" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetDoubleField)<SUB>3127</SUB>> ]
-"14478" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStaticMethodID)<SUB>3128</SUB>> ]
-"14481" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticObjectMethod)<SUB>3129</SUB>> ]
-"14484" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticObjectMethodV)<SUB>3130</SUB>> ]
-"14487" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticObjectMethodA)<SUB>3131</SUB>> ]
-"14490" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticBooleanMethod)<SUB>3132</SUB>> ]
-"14493" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticBooleanMethodV)<SUB>3133</SUB>> ]
-"14496" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticBooleanMethodA)<SUB>3134</SUB>> ]
-"14499" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticByteMethod)<SUB>3135</SUB>> ]
-"14502" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticByteMethodV)<SUB>3136</SUB>> ]
-"14505" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticByteMethodA)<SUB>3137</SUB>> ]
-"14508" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticCharMethod)<SUB>3138</SUB>> ]
-"14511" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticCharMethodV)<SUB>3139</SUB>> ]
-"14514" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticCharMethodA)<SUB>3140</SUB>> ]
-"14517" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticShortMethod)<SUB>3141</SUB>> ]
-"14520" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticShortMethodV)<SUB>3142</SUB>> ]
-"14523" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticShortMethodA)<SUB>3143</SUB>> ]
-"14526" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticIntMethod)<SUB>3144</SUB>> ]
-"14529" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticIntMethodV)<SUB>3145</SUB>> ]
-"14532" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticIntMethodA)<SUB>3146</SUB>> ]
-"14535" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticLongMethod)<SUB>3147</SUB>> ]
-"14538" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticLongMethodV)<SUB>3148</SUB>> ]
-"14541" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticLongMethodA)<SUB>3149</SUB>> ]
-"14544" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticFloatMethod)<SUB>3150</SUB>> ]
-"14547" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticFloatMethodV)<SUB>3151</SUB>> ]
-"14550" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticFloatMethodA)<SUB>3152</SUB>> ]
-"14553" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticDoubleMethod)<SUB>3153</SUB>> ]
-"14556" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticDoubleMethodV)<SUB>3154</SUB>> ]
-"14559" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticDoubleMethodA)<SUB>3155</SUB>> ]
-"14562" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticVoidMethod)<SUB>3156</SUB>> ]
-"14565" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticVoidMethodV)<SUB>3157</SUB>> ]
-"14568" [label = <(&lt;operator&gt;.fieldAccess,JNI::CallStaticVoidMethodA)<SUB>3158</SUB>> ]
-"14571" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStaticFieldID)<SUB>3159</SUB>> ]
-"14574" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStaticObjectField)<SUB>3160</SUB>> ]
-"14577" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStaticBooleanField)<SUB>3161</SUB>> ]
-"14580" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStaticByteField)<SUB>3162</SUB>> ]
-"14583" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStaticCharField)<SUB>3163</SUB>> ]
-"14586" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStaticShortField)<SUB>3164</SUB>> ]
-"14589" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStaticIntField)<SUB>3165</SUB>> ]
-"14592" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStaticLongField)<SUB>3166</SUB>> ]
-"14595" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStaticFloatField)<SUB>3167</SUB>> ]
-"14598" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStaticDoubleField)<SUB>3168</SUB>> ]
-"14601" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetStaticObjectField)<SUB>3169</SUB>> ]
-"14604" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetStaticBooleanField)<SUB>3170</SUB>> ]
-"14607" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetStaticByteField)<SUB>3171</SUB>> ]
-"14610" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetStaticCharField)<SUB>3172</SUB>> ]
-"14613" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetStaticShortField)<SUB>3173</SUB>> ]
-"14616" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetStaticIntField)<SUB>3174</SUB>> ]
-"14619" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetStaticLongField)<SUB>3175</SUB>> ]
-"14622" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetStaticFloatField)<SUB>3176</SUB>> ]
-"14625" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetStaticDoubleField)<SUB>3177</SUB>> ]
-"14628" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewString)<SUB>3178</SUB>> ]
-"14631" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStringLength)<SUB>3179</SUB>> ]
-"14634" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStringChars)<SUB>3180</SUB>> ]
-"14637" [label = <(&lt;operator&gt;.fieldAccess,JNI::ReleaseStringChars)<SUB>3181</SUB>> ]
-"14640" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewStringUTF)<SUB>3182</SUB>> ]
-"14643" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStringUTFLength)<SUB>3183</SUB>> ]
-"14646" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStringUTFChars)<SUB>3184</SUB>> ]
-"14649" [label = <(&lt;operator&gt;.fieldAccess,JNI::ReleaseStringUTFChars)<SUB>3185</SUB>> ]
-"14652" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetArrayLength)<SUB>3186</SUB>> ]
-"14655" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewObjectArray)<SUB>3187</SUB>> ]
-"14658" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetObjectArrayElement)<SUB>3188</SUB>> ]
-"14661" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetObjectArrayElement)<SUB>3189</SUB>> ]
-"14664" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewBooleanArray)<SUB>3190</SUB>> ]
-"14667" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewByteArray)<SUB>3191</SUB>> ]
-"14670" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewCharArray)<SUB>3192</SUB>> ]
-"14673" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewShortArray)<SUB>3193</SUB>> ]
-"14676" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewIntArray)<SUB>3194</SUB>> ]
-"14679" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewLongArray)<SUB>3195</SUB>> ]
-"14682" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewFloatArray)<SUB>3196</SUB>> ]
-"14685" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewDoubleArray)<SUB>3197</SUB>> ]
-"14688" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetBooleanArrayElements)<SUB>3198</SUB>> ]
-"14691" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetByteArrayElements)<SUB>3199</SUB>> ]
-"14694" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetCharArrayElements)<SUB>3200</SUB>> ]
-"14697" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetShortArrayElements)<SUB>3201</SUB>> ]
-"14700" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetIntArrayElements)<SUB>3202</SUB>> ]
-"14703" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetLongArrayElements)<SUB>3203</SUB>> ]
-"14706" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetFloatArrayElements)<SUB>3204</SUB>> ]
-"14709" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetDoubleArrayElements)<SUB>3205</SUB>> ]
-"14712" [label = <(&lt;operator&gt;.fieldAccess,JNI::ReleaseBooleanArrayElements)<SUB>3206</SUB>> ]
-"14715" [label = <(&lt;operator&gt;.fieldAccess,JNI::ReleaseByteArrayElements)<SUB>3207</SUB>> ]
-"14718" [label = <(&lt;operator&gt;.fieldAccess,JNI::ReleaseCharArrayElements)<SUB>3208</SUB>> ]
-"14721" [label = <(&lt;operator&gt;.fieldAccess,JNI::ReleaseShortArrayElements)<SUB>3209</SUB>> ]
-"14724" [label = <(&lt;operator&gt;.fieldAccess,JNI::ReleaseIntArrayElements)<SUB>3210</SUB>> ]
-"14727" [label = <(&lt;operator&gt;.fieldAccess,JNI::ReleaseLongArrayElements)<SUB>3211</SUB>> ]
-"14730" [label = <(&lt;operator&gt;.fieldAccess,JNI::ReleaseFloatArrayElements)<SUB>3212</SUB>> ]
-"14733" [label = <(&lt;operator&gt;.fieldAccess,JNI::ReleaseDoubleArrayElements)<SUB>3213</SUB>> ]
-"14736" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetBooleanArrayRegion)<SUB>3214</SUB>> ]
-"14739" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetByteArrayRegion)<SUB>3215</SUB>> ]
-"14742" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetCharArrayRegion)<SUB>3216</SUB>> ]
-"14745" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetShortArrayRegion)<SUB>3217</SUB>> ]
-"14748" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetIntArrayRegion)<SUB>3218</SUB>> ]
-"14751" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetLongArrayRegion)<SUB>3219</SUB>> ]
-"14754" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetFloatArrayRegion)<SUB>3220</SUB>> ]
-"14757" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetDoubleArrayRegion)<SUB>3221</SUB>> ]
-"14760" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetBooleanArrayRegion)<SUB>3222</SUB>> ]
-"14763" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetByteArrayRegion)<SUB>3223</SUB>> ]
-"14766" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetCharArrayRegion)<SUB>3224</SUB>> ]
-"14769" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetShortArrayRegion)<SUB>3225</SUB>> ]
-"14772" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetIntArrayRegion)<SUB>3226</SUB>> ]
-"14775" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetLongArrayRegion)<SUB>3227</SUB>> ]
-"14778" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetFloatArrayRegion)<SUB>3228</SUB>> ]
-"14781" [label = <(&lt;operator&gt;.fieldAccess,JNI::SetDoubleArrayRegion)<SUB>3229</SUB>> ]
-"14784" [label = <(&lt;operator&gt;.fieldAccess,JNI::RegisterNatives)<SUB>3230</SUB>> ]
-"14787" [label = <(&lt;operator&gt;.fieldAccess,JNI::UnregisterNatives)<SUB>3231</SUB>> ]
-"14790" [label = <(&lt;operator&gt;.fieldAccess,JNI::MonitorEnter)<SUB>3232</SUB>> ]
-"14793" [label = <(&lt;operator&gt;.fieldAccess,JNI::MonitorExit)<SUB>3233</SUB>> ]
-"14796" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetJavaVM)<SUB>3234</SUB>> ]
-"14799" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStringRegion)<SUB>3235</SUB>> ]
-"14802" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStringUTFRegion)<SUB>3236</SUB>> ]
-"14805" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetPrimitiveArrayCritical)<SUB>3237</SUB>> ]
-"14808" [label = <(&lt;operator&gt;.fieldAccess,JNI::ReleasePrimitiveArrayCritical)<SUB>3238</SUB>> ]
-"14811" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetStringCritical)<SUB>3239</SUB>> ]
-"14814" [label = <(&lt;operator&gt;.fieldAccess,JNI::ReleaseStringCritical)<SUB>3240</SUB>> ]
-"14817" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewWeakGlobalRef)<SUB>3241</SUB>> ]
-"14820" [label = <(&lt;operator&gt;.fieldAccess,JNI::DeleteWeakGlobalRef)<SUB>3242</SUB>> ]
-"14823" [label = <(&lt;operator&gt;.fieldAccess,JNI::ExceptionCheck)<SUB>3243</SUB>> ]
-"14826" [label = <(&lt;operator&gt;.fieldAccess,JNI::NewDirectByteBuffer)<SUB>3244</SUB>> ]
-"14829" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetDirectBufferAddress)<SUB>3245</SUB>> ]
-"14832" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetDirectBufferCapacity)<SUB>3246</SUB>> ]
-"14835" [label = <(&lt;operator&gt;.fieldAccess,JNI::GetObjectRefType)<SUB>3247</SUB>> ]
-"588" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetInstrumentation)<SUB>369</SUB>> ]
-"609" [label = <(Runtime::Current,Runtime::Current())<SUB>396</SUB>> ]
-"613" [label = <(FIELD_IDENTIFIER,GetInstrumentation,GetInstrumentation)<SUB>396</SUB>> ]
-"735" [label = <(FIELD_IDENTIFIER,NewHandle,NewHandle)<SUB>501</SUB>> ]
-"761" [label = <(GetClassLinker,Runtime::Current()-&gt;GetClassLinker())<SUB>516</SUB>> ]
-"768" [label = <(FIELD_IDENTIFIER,GetImagePointerSize,GetImagePointerSize)<SUB>516</SUB>> ]
-"789" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>545</SUB>> ]
-"792" [label = <(&lt;operator&gt;.fieldAccess,mirror::ClassLoader)<SUB>545</SUB>> ]
-"796" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetSystemClassLoader)<SUB>545</SUB>> ]
-"823" [label = <(FIELD_IDENTIFIER,NewHandle,NewHandle)<SUB>567</SUB>> ]
-"825" [label = <(Self,soa.Self())<SUB>567</SUB>> ]
-"829" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(jni_class))<SUB>567</SUB>> ]
-"849" [label = <(Runtime::Current,Runtime::Current())<SUB>573</SUB>> ]
-"853" [label = <(FIELD_IDENTIFIER,GetClassLinker,GetClassLinker)<SUB>573</SUB>> ]
-"13907" [label = <(Runtime::Current,Runtime::Current())<SUB>2942</SUB>> ]
-"13911" [label = <(FIELD_IDENTIFIER,GetHeap,GetHeap)<SUB>2942</SUB>> ]
-"13923" [label = <(&lt;operator&gt;.indirectFieldAccess,array-&gt;GetLength)<SUB>2944</SUB>> ]
-"14153" [label = <(FIELD_IDENTIFIER,GetVersion,GetVersion)<SUB>3019</SUB>> ]
-"14156" [label = <(FIELD_IDENTIFIER,DefineClass,DefineClass)<SUB>3020</SUB>> ]
-"14159" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>3021</SUB>> ]
-"14162" [label = <(FIELD_IDENTIFIER,FromReflectedMethod,FromReflectedMethod)<SUB>3022</SUB>> ]
-"14165" [label = <(FIELD_IDENTIFIER,FromReflectedField,FromReflectedField)<SUB>3023</SUB>> ]
-"14168" [label = <(FIELD_IDENTIFIER,ToReflectedMethod,ToReflectedMethod)<SUB>3024</SUB>> ]
-"14171" [label = <(FIELD_IDENTIFIER,GetSuperclass,GetSuperclass)<SUB>3025</SUB>> ]
-"14174" [label = <(FIELD_IDENTIFIER,IsAssignableFrom,IsAssignableFrom)<SUB>3026</SUB>> ]
-"14177" [label = <(FIELD_IDENTIFIER,ToReflectedField,ToReflectedField)<SUB>3027</SUB>> ]
-"14180" [label = <(FIELD_IDENTIFIER,Throw,Throw)<SUB>3028</SUB>> ]
-"14183" [label = <(FIELD_IDENTIFIER,ThrowNew,ThrowNew)<SUB>3029</SUB>> ]
-"14186" [label = <(FIELD_IDENTIFIER,ExceptionOccurred,ExceptionOccurred)<SUB>3030</SUB>> ]
-"14189" [label = <(FIELD_IDENTIFIER,ExceptionDescribe,ExceptionDescribe)<SUB>3031</SUB>> ]
-"14192" [label = <(FIELD_IDENTIFIER,ExceptionClear,ExceptionClear)<SUB>3032</SUB>> ]
-"14195" [label = <(FIELD_IDENTIFIER,FatalError,FatalError)<SUB>3033</SUB>> ]
-"14198" [label = <(FIELD_IDENTIFIER,PushLocalFrame,PushLocalFrame)<SUB>3034</SUB>> ]
-"14201" [label = <(FIELD_IDENTIFIER,PopLocalFrame,PopLocalFrame)<SUB>3035</SUB>> ]
-"14204" [label = <(FIELD_IDENTIFIER,NewGlobalRef,NewGlobalRef)<SUB>3036</SUB>> ]
-"14207" [label = <(FIELD_IDENTIFIER,DeleteGlobalRef,DeleteGlobalRef)<SUB>3037</SUB>> ]
-"14210" [label = <(FIELD_IDENTIFIER,DeleteLocalRef,DeleteLocalRef)<SUB>3038</SUB>> ]
-"14213" [label = <(FIELD_IDENTIFIER,IsSameObject,IsSameObject)<SUB>3039</SUB>> ]
-"14216" [label = <(FIELD_IDENTIFIER,NewLocalRef,NewLocalRef)<SUB>3040</SUB>> ]
-"14219" [label = <(FIELD_IDENTIFIER,EnsureLocalCapacity,EnsureLocalCapacity)<SUB>3041</SUB>> ]
-"14222" [label = <(FIELD_IDENTIFIER,AllocObject,AllocObject)<SUB>3042</SUB>> ]
-"14225" [label = <(FIELD_IDENTIFIER,NewObject,NewObject)<SUB>3043</SUB>> ]
-"14228" [label = <(FIELD_IDENTIFIER,NewObjectV,NewObjectV)<SUB>3044</SUB>> ]
-"14231" [label = <(FIELD_IDENTIFIER,NewObjectA,NewObjectA)<SUB>3045</SUB>> ]
-"14234" [label = <(FIELD_IDENTIFIER,GetObjectClass,GetObjectClass)<SUB>3046</SUB>> ]
-"14237" [label = <(FIELD_IDENTIFIER,IsInstanceOf,IsInstanceOf)<SUB>3047</SUB>> ]
-"14240" [label = <(FIELD_IDENTIFIER,GetMethodID,GetMethodID)<SUB>3048</SUB>> ]
-"14243" [label = <(FIELD_IDENTIFIER,CallObjectMethod,CallObjectMethod)<SUB>3049</SUB>> ]
-"14246" [label = <(FIELD_IDENTIFIER,CallObjectMethodV,CallObjectMethodV)<SUB>3050</SUB>> ]
-"14249" [label = <(FIELD_IDENTIFIER,CallObjectMethodA,CallObjectMethodA)<SUB>3051</SUB>> ]
-"14252" [label = <(FIELD_IDENTIFIER,CallBooleanMethod,CallBooleanMethod)<SUB>3052</SUB>> ]
-"14255" [label = <(FIELD_IDENTIFIER,CallBooleanMethodV,CallBooleanMethodV)<SUB>3053</SUB>> ]
-"14258" [label = <(FIELD_IDENTIFIER,CallBooleanMethodA,CallBooleanMethodA)<SUB>3054</SUB>> ]
-"14261" [label = <(FIELD_IDENTIFIER,CallByteMethod,CallByteMethod)<SUB>3055</SUB>> ]
-"14264" [label = <(FIELD_IDENTIFIER,CallByteMethodV,CallByteMethodV)<SUB>3056</SUB>> ]
-"14267" [label = <(FIELD_IDENTIFIER,CallByteMethodA,CallByteMethodA)<SUB>3057</SUB>> ]
-"14270" [label = <(FIELD_IDENTIFIER,CallCharMethod,CallCharMethod)<SUB>3058</SUB>> ]
-"14273" [label = <(FIELD_IDENTIFIER,CallCharMethodV,CallCharMethodV)<SUB>3059</SUB>> ]
-"14276" [label = <(FIELD_IDENTIFIER,CallCharMethodA,CallCharMethodA)<SUB>3060</SUB>> ]
-"14279" [label = <(FIELD_IDENTIFIER,CallShortMethod,CallShortMethod)<SUB>3061</SUB>> ]
-"14282" [label = <(FIELD_IDENTIFIER,CallShortMethodV,CallShortMethodV)<SUB>3062</SUB>> ]
-"14285" [label = <(FIELD_IDENTIFIER,CallShortMethodA,CallShortMethodA)<SUB>3063</SUB>> ]
-"14288" [label = <(FIELD_IDENTIFIER,CallIntMethod,CallIntMethod)<SUB>3064</SUB>> ]
-"14291" [label = <(FIELD_IDENTIFIER,CallIntMethodV,CallIntMethodV)<SUB>3065</SUB>> ]
-"14294" [label = <(FIELD_IDENTIFIER,CallIntMethodA,CallIntMethodA)<SUB>3066</SUB>> ]
-"14297" [label = <(FIELD_IDENTIFIER,CallLongMethod,CallLongMethod)<SUB>3067</SUB>> ]
-"14300" [label = <(FIELD_IDENTIFIER,CallLongMethodV,CallLongMethodV)<SUB>3068</SUB>> ]
-"14303" [label = <(FIELD_IDENTIFIER,CallLongMethodA,CallLongMethodA)<SUB>3069</SUB>> ]
-"14306" [label = <(FIELD_IDENTIFIER,CallFloatMethod,CallFloatMethod)<SUB>3070</SUB>> ]
-"14309" [label = <(FIELD_IDENTIFIER,CallFloatMethodV,CallFloatMethodV)<SUB>3071</SUB>> ]
-"14312" [label = <(FIELD_IDENTIFIER,CallFloatMethodA,CallFloatMethodA)<SUB>3072</SUB>> ]
-"14315" [label = <(FIELD_IDENTIFIER,CallDoubleMethod,CallDoubleMethod)<SUB>3073</SUB>> ]
-"14318" [label = <(FIELD_IDENTIFIER,CallDoubleMethodV,CallDoubleMethodV)<SUB>3074</SUB>> ]
-"14321" [label = <(FIELD_IDENTIFIER,CallDoubleMethodA,CallDoubleMethodA)<SUB>3075</SUB>> ]
-"14324" [label = <(FIELD_IDENTIFIER,CallVoidMethod,CallVoidMethod)<SUB>3076</SUB>> ]
-"14327" [label = <(FIELD_IDENTIFIER,CallVoidMethodV,CallVoidMethodV)<SUB>3077</SUB>> ]
-"14330" [label = <(FIELD_IDENTIFIER,CallVoidMethodA,CallVoidMethodA)<SUB>3078</SUB>> ]
-"14333" [label = <(FIELD_IDENTIFIER,CallNonvirtualObjectMethod,CallNonvirtualObjectMethod)<SUB>3079</SUB>> ]
-"14336" [label = <(FIELD_IDENTIFIER,CallNonvirtualObjectMethodV,CallNonvirtualObjectMethodV)<SUB>3080</SUB>> ]
-"14339" [label = <(FIELD_IDENTIFIER,CallNonvirtualObjectMethodA,CallNonvirtualObjectMethodA)<SUB>3081</SUB>> ]
-"14342" [label = <(FIELD_IDENTIFIER,CallNonvirtualBooleanMethod,CallNonvirtualBooleanMethod)<SUB>3082</SUB>> ]
-"14345" [label = <(FIELD_IDENTIFIER,CallNonvirtualBooleanMethodV,CallNonvirtualBooleanMethodV)<SUB>3083</SUB>> ]
-"14348" [label = <(FIELD_IDENTIFIER,CallNonvirtualBooleanMethodA,CallNonvirtualBooleanMethodA)<SUB>3084</SUB>> ]
-"14351" [label = <(FIELD_IDENTIFIER,CallNonvirtualByteMethod,CallNonvirtualByteMethod)<SUB>3085</SUB>> ]
-"14354" [label = <(FIELD_IDENTIFIER,CallNonvirtualByteMethodV,CallNonvirtualByteMethodV)<SUB>3086</SUB>> ]
-"14357" [label = <(FIELD_IDENTIFIER,CallNonvirtualByteMethodA,CallNonvirtualByteMethodA)<SUB>3087</SUB>> ]
-"14360" [label = <(FIELD_IDENTIFIER,CallNonvirtualCharMethod,CallNonvirtualCharMethod)<SUB>3088</SUB>> ]
-"14363" [label = <(FIELD_IDENTIFIER,CallNonvirtualCharMethodV,CallNonvirtualCharMethodV)<SUB>3089</SUB>> ]
-"14366" [label = <(FIELD_IDENTIFIER,CallNonvirtualCharMethodA,CallNonvirtualCharMethodA)<SUB>3090</SUB>> ]
-"14369" [label = <(FIELD_IDENTIFIER,CallNonvirtualShortMethod,CallNonvirtualShortMethod)<SUB>3091</SUB>> ]
-"14372" [label = <(FIELD_IDENTIFIER,CallNonvirtualShortMethodV,CallNonvirtualShortMethodV)<SUB>3092</SUB>> ]
-"14375" [label = <(FIELD_IDENTIFIER,CallNonvirtualShortMethodA,CallNonvirtualShortMethodA)<SUB>3093</SUB>> ]
-"14378" [label = <(FIELD_IDENTIFIER,CallNonvirtualIntMethod,CallNonvirtualIntMethod)<SUB>3094</SUB>> ]
-"14381" [label = <(FIELD_IDENTIFIER,CallNonvirtualIntMethodV,CallNonvirtualIntMethodV)<SUB>3095</SUB>> ]
-"14384" [label = <(FIELD_IDENTIFIER,CallNonvirtualIntMethodA,CallNonvirtualIntMethodA)<SUB>3096</SUB>> ]
-"14387" [label = <(FIELD_IDENTIFIER,CallNonvirtualLongMethod,CallNonvirtualLongMethod)<SUB>3097</SUB>> ]
-"14390" [label = <(FIELD_IDENTIFIER,CallNonvirtualLongMethodV,CallNonvirtualLongMethodV)<SUB>3098</SUB>> ]
-"14393" [label = <(FIELD_IDENTIFIER,CallNonvirtualLongMethodA,CallNonvirtualLongMethodA)<SUB>3099</SUB>> ]
-"14396" [label = <(FIELD_IDENTIFIER,CallNonvirtualFloatMethod,CallNonvirtualFloatMethod)<SUB>3100</SUB>> ]
-"14399" [label = <(FIELD_IDENTIFIER,CallNonvirtualFloatMethodV,CallNonvirtualFloatMethodV)<SUB>3101</SUB>> ]
-"14402" [label = <(FIELD_IDENTIFIER,CallNonvirtualFloatMethodA,CallNonvirtualFloatMethodA)<SUB>3102</SUB>> ]
-"14405" [label = <(FIELD_IDENTIFIER,CallNonvirtualDoubleMethod,CallNonvirtualDoubleMethod)<SUB>3103</SUB>> ]
-"14408" [label = <(FIELD_IDENTIFIER,CallNonvirtualDoubleMethodV,CallNonvirtualDoubleMethodV)<SUB>3104</SUB>> ]
-"14411" [label = <(FIELD_IDENTIFIER,CallNonvirtualDoubleMethodA,CallNonvirtualDoubleMethodA)<SUB>3105</SUB>> ]
-"14414" [label = <(FIELD_IDENTIFIER,CallNonvirtualVoidMethod,CallNonvirtualVoidMethod)<SUB>3106</SUB>> ]
-"14417" [label = <(FIELD_IDENTIFIER,CallNonvirtualVoidMethodV,CallNonvirtualVoidMethodV)<SUB>3107</SUB>> ]
-"14420" [label = <(FIELD_IDENTIFIER,CallNonvirtualVoidMethodA,CallNonvirtualVoidMethodA)<SUB>3108</SUB>> ]
-"14423" [label = <(FIELD_IDENTIFIER,GetFieldID,GetFieldID)<SUB>3109</SUB>> ]
-"14426" [label = <(FIELD_IDENTIFIER,GetObjectField,GetObjectField)<SUB>3110</SUB>> ]
-"14429" [label = <(FIELD_IDENTIFIER,GetBooleanField,GetBooleanField)<SUB>3111</SUB>> ]
-"14432" [label = <(FIELD_IDENTIFIER,GetByteField,GetByteField)<SUB>3112</SUB>> ]
-"14435" [label = <(FIELD_IDENTIFIER,GetCharField,GetCharField)<SUB>3113</SUB>> ]
-"14438" [label = <(FIELD_IDENTIFIER,GetShortField,GetShortField)<SUB>3114</SUB>> ]
-"14441" [label = <(FIELD_IDENTIFIER,GetIntField,GetIntField)<SUB>3115</SUB>> ]
-"14444" [label = <(FIELD_IDENTIFIER,GetLongField,GetLongField)<SUB>3116</SUB>> ]
-"14447" [label = <(FIELD_IDENTIFIER,GetFloatField,GetFloatField)<SUB>3117</SUB>> ]
-"14450" [label = <(FIELD_IDENTIFIER,GetDoubleField,GetDoubleField)<SUB>3118</SUB>> ]
-"14453" [label = <(FIELD_IDENTIFIER,SetObjectField,SetObjectField)<SUB>3119</SUB>> ]
-"14456" [label = <(FIELD_IDENTIFIER,SetBooleanField,SetBooleanField)<SUB>3120</SUB>> ]
-"14459" [label = <(FIELD_IDENTIFIER,SetByteField,SetByteField)<SUB>3121</SUB>> ]
-"14462" [label = <(FIELD_IDENTIFIER,SetCharField,SetCharField)<SUB>3122</SUB>> ]
-"14465" [label = <(FIELD_IDENTIFIER,SetShortField,SetShortField)<SUB>3123</SUB>> ]
-"14468" [label = <(FIELD_IDENTIFIER,SetIntField,SetIntField)<SUB>3124</SUB>> ]
-"14471" [label = <(FIELD_IDENTIFIER,SetLongField,SetLongField)<SUB>3125</SUB>> ]
-"14474" [label = <(FIELD_IDENTIFIER,SetFloatField,SetFloatField)<SUB>3126</SUB>> ]
-"14477" [label = <(FIELD_IDENTIFIER,SetDoubleField,SetDoubleField)<SUB>3127</SUB>> ]
-"14480" [label = <(FIELD_IDENTIFIER,GetStaticMethodID,GetStaticMethodID)<SUB>3128</SUB>> ]
-"14483" [label = <(FIELD_IDENTIFIER,CallStaticObjectMethod,CallStaticObjectMethod)<SUB>3129</SUB>> ]
-"14486" [label = <(FIELD_IDENTIFIER,CallStaticObjectMethodV,CallStaticObjectMethodV)<SUB>3130</SUB>> ]
-"14489" [label = <(FIELD_IDENTIFIER,CallStaticObjectMethodA,CallStaticObjectMethodA)<SUB>3131</SUB>> ]
-"14492" [label = <(FIELD_IDENTIFIER,CallStaticBooleanMethod,CallStaticBooleanMethod)<SUB>3132</SUB>> ]
-"14495" [label = <(FIELD_IDENTIFIER,CallStaticBooleanMethodV,CallStaticBooleanMethodV)<SUB>3133</SUB>> ]
-"14498" [label = <(FIELD_IDENTIFIER,CallStaticBooleanMethodA,CallStaticBooleanMethodA)<SUB>3134</SUB>> ]
-"14501" [label = <(FIELD_IDENTIFIER,CallStaticByteMethod,CallStaticByteMethod)<SUB>3135</SUB>> ]
-"14504" [label = <(FIELD_IDENTIFIER,CallStaticByteMethodV,CallStaticByteMethodV)<SUB>3136</SUB>> ]
-"14507" [label = <(FIELD_IDENTIFIER,CallStaticByteMethodA,CallStaticByteMethodA)<SUB>3137</SUB>> ]
-"14510" [label = <(FIELD_IDENTIFIER,CallStaticCharMethod,CallStaticCharMethod)<SUB>3138</SUB>> ]
-"14513" [label = <(FIELD_IDENTIFIER,CallStaticCharMethodV,CallStaticCharMethodV)<SUB>3139</SUB>> ]
-"14516" [label = <(FIELD_IDENTIFIER,CallStaticCharMethodA,CallStaticCharMethodA)<SUB>3140</SUB>> ]
-"14519" [label = <(FIELD_IDENTIFIER,CallStaticShortMethod,CallStaticShortMethod)<SUB>3141</SUB>> ]
-"14522" [label = <(FIELD_IDENTIFIER,CallStaticShortMethodV,CallStaticShortMethodV)<SUB>3142</SUB>> ]
-"14525" [label = <(FIELD_IDENTIFIER,CallStaticShortMethodA,CallStaticShortMethodA)<SUB>3143</SUB>> ]
-"14528" [label = <(FIELD_IDENTIFIER,CallStaticIntMethod,CallStaticIntMethod)<SUB>3144</SUB>> ]
-"14531" [label = <(FIELD_IDENTIFIER,CallStaticIntMethodV,CallStaticIntMethodV)<SUB>3145</SUB>> ]
-"14534" [label = <(FIELD_IDENTIFIER,CallStaticIntMethodA,CallStaticIntMethodA)<SUB>3146</SUB>> ]
-"14537" [label = <(FIELD_IDENTIFIER,CallStaticLongMethod,CallStaticLongMethod)<SUB>3147</SUB>> ]
-"14540" [label = <(FIELD_IDENTIFIER,CallStaticLongMethodV,CallStaticLongMethodV)<SUB>3148</SUB>> ]
-"14543" [label = <(FIELD_IDENTIFIER,CallStaticLongMethodA,CallStaticLongMethodA)<SUB>3149</SUB>> ]
-"14546" [label = <(FIELD_IDENTIFIER,CallStaticFloatMethod,CallStaticFloatMethod)<SUB>3150</SUB>> ]
-"14549" [label = <(FIELD_IDENTIFIER,CallStaticFloatMethodV,CallStaticFloatMethodV)<SUB>3151</SUB>> ]
-"14552" [label = <(FIELD_IDENTIFIER,CallStaticFloatMethodA,CallStaticFloatMethodA)<SUB>3152</SUB>> ]
-"14555" [label = <(FIELD_IDENTIFIER,CallStaticDoubleMethod,CallStaticDoubleMethod)<SUB>3153</SUB>> ]
-"14558" [label = <(FIELD_IDENTIFIER,CallStaticDoubleMethodV,CallStaticDoubleMethodV)<SUB>3154</SUB>> ]
-"14561" [label = <(FIELD_IDENTIFIER,CallStaticDoubleMethodA,CallStaticDoubleMethodA)<SUB>3155</SUB>> ]
-"14564" [label = <(FIELD_IDENTIFIER,CallStaticVoidMethod,CallStaticVoidMethod)<SUB>3156</SUB>> ]
-"14567" [label = <(FIELD_IDENTIFIER,CallStaticVoidMethodV,CallStaticVoidMethodV)<SUB>3157</SUB>> ]
-"14570" [label = <(FIELD_IDENTIFIER,CallStaticVoidMethodA,CallStaticVoidMethodA)<SUB>3158</SUB>> ]
-"14573" [label = <(FIELD_IDENTIFIER,GetStaticFieldID,GetStaticFieldID)<SUB>3159</SUB>> ]
-"14576" [label = <(FIELD_IDENTIFIER,GetStaticObjectField,GetStaticObjectField)<SUB>3160</SUB>> ]
-"14579" [label = <(FIELD_IDENTIFIER,GetStaticBooleanField,GetStaticBooleanField)<SUB>3161</SUB>> ]
-"14582" [label = <(FIELD_IDENTIFIER,GetStaticByteField,GetStaticByteField)<SUB>3162</SUB>> ]
-"14585" [label = <(FIELD_IDENTIFIER,GetStaticCharField,GetStaticCharField)<SUB>3163</SUB>> ]
-"14588" [label = <(FIELD_IDENTIFIER,GetStaticShortField,GetStaticShortField)<SUB>3164</SUB>> ]
-"14591" [label = <(FIELD_IDENTIFIER,GetStaticIntField,GetStaticIntField)<SUB>3165</SUB>> ]
-"14594" [label = <(FIELD_IDENTIFIER,GetStaticLongField,GetStaticLongField)<SUB>3166</SUB>> ]
-"14597" [label = <(FIELD_IDENTIFIER,GetStaticFloatField,GetStaticFloatField)<SUB>3167</SUB>> ]
-"14600" [label = <(FIELD_IDENTIFIER,GetStaticDoubleField,GetStaticDoubleField)<SUB>3168</SUB>> ]
-"14603" [label = <(FIELD_IDENTIFIER,SetStaticObjectField,SetStaticObjectField)<SUB>3169</SUB>> ]
-"14606" [label = <(FIELD_IDENTIFIER,SetStaticBooleanField,SetStaticBooleanField)<SUB>3170</SUB>> ]
-"14609" [label = <(FIELD_IDENTIFIER,SetStaticByteField,SetStaticByteField)<SUB>3171</SUB>> ]
-"14612" [label = <(FIELD_IDENTIFIER,SetStaticCharField,SetStaticCharField)<SUB>3172</SUB>> ]
-"14615" [label = <(FIELD_IDENTIFIER,SetStaticShortField,SetStaticShortField)<SUB>3173</SUB>> ]
-"14618" [label = <(FIELD_IDENTIFIER,SetStaticIntField,SetStaticIntField)<SUB>3174</SUB>> ]
-"14621" [label = <(FIELD_IDENTIFIER,SetStaticLongField,SetStaticLongField)<SUB>3175</SUB>> ]
-"14624" [label = <(FIELD_IDENTIFIER,SetStaticFloatField,SetStaticFloatField)<SUB>3176</SUB>> ]
-"14627" [label = <(FIELD_IDENTIFIER,SetStaticDoubleField,SetStaticDoubleField)<SUB>3177</SUB>> ]
-"14630" [label = <(FIELD_IDENTIFIER,NewString,NewString)<SUB>3178</SUB>> ]
-"14633" [label = <(FIELD_IDENTIFIER,GetStringLength,GetStringLength)<SUB>3179</SUB>> ]
-"14636" [label = <(FIELD_IDENTIFIER,GetStringChars,GetStringChars)<SUB>3180</SUB>> ]
-"14639" [label = <(FIELD_IDENTIFIER,ReleaseStringChars,ReleaseStringChars)<SUB>3181</SUB>> ]
-"14642" [label = <(FIELD_IDENTIFIER,NewStringUTF,NewStringUTF)<SUB>3182</SUB>> ]
-"14645" [label = <(FIELD_IDENTIFIER,GetStringUTFLength,GetStringUTFLength)<SUB>3183</SUB>> ]
-"14648" [label = <(FIELD_IDENTIFIER,GetStringUTFChars,GetStringUTFChars)<SUB>3184</SUB>> ]
-"14651" [label = <(FIELD_IDENTIFIER,ReleaseStringUTFChars,ReleaseStringUTFChars)<SUB>3185</SUB>> ]
-"14654" [label = <(FIELD_IDENTIFIER,GetArrayLength,GetArrayLength)<SUB>3186</SUB>> ]
-"14657" [label = <(FIELD_IDENTIFIER,NewObjectArray,NewObjectArray)<SUB>3187</SUB>> ]
-"14660" [label = <(FIELD_IDENTIFIER,GetObjectArrayElement,GetObjectArrayElement)<SUB>3188</SUB>> ]
-"14663" [label = <(FIELD_IDENTIFIER,SetObjectArrayElement,SetObjectArrayElement)<SUB>3189</SUB>> ]
-"14666" [label = <(FIELD_IDENTIFIER,NewBooleanArray,NewBooleanArray)<SUB>3190</SUB>> ]
-"14669" [label = <(FIELD_IDENTIFIER,NewByteArray,NewByteArray)<SUB>3191</SUB>> ]
-"14672" [label = <(FIELD_IDENTIFIER,NewCharArray,NewCharArray)<SUB>3192</SUB>> ]
-"14675" [label = <(FIELD_IDENTIFIER,NewShortArray,NewShortArray)<SUB>3193</SUB>> ]
-"14678" [label = <(FIELD_IDENTIFIER,NewIntArray,NewIntArray)<SUB>3194</SUB>> ]
-"14681" [label = <(FIELD_IDENTIFIER,NewLongArray,NewLongArray)<SUB>3195</SUB>> ]
-"14684" [label = <(FIELD_IDENTIFIER,NewFloatArray,NewFloatArray)<SUB>3196</SUB>> ]
-"14687" [label = <(FIELD_IDENTIFIER,NewDoubleArray,NewDoubleArray)<SUB>3197</SUB>> ]
-"14690" [label = <(FIELD_IDENTIFIER,GetBooleanArrayElements,GetBooleanArrayElements)<SUB>3198</SUB>> ]
-"14693" [label = <(FIELD_IDENTIFIER,GetByteArrayElements,GetByteArrayElements)<SUB>3199</SUB>> ]
-"14696" [label = <(FIELD_IDENTIFIER,GetCharArrayElements,GetCharArrayElements)<SUB>3200</SUB>> ]
-"14699" [label = <(FIELD_IDENTIFIER,GetShortArrayElements,GetShortArrayElements)<SUB>3201</SUB>> ]
-"14702" [label = <(FIELD_IDENTIFIER,GetIntArrayElements,GetIntArrayElements)<SUB>3202</SUB>> ]
-"14705" [label = <(FIELD_IDENTIFIER,GetLongArrayElements,GetLongArrayElements)<SUB>3203</SUB>> ]
-"14708" [label = <(FIELD_IDENTIFIER,GetFloatArrayElements,GetFloatArrayElements)<SUB>3204</SUB>> ]
-"14711" [label = <(FIELD_IDENTIFIER,GetDoubleArrayElements,GetDoubleArrayElements)<SUB>3205</SUB>> ]
-"14714" [label = <(FIELD_IDENTIFIER,ReleaseBooleanArrayElements,ReleaseBooleanArrayElements)<SUB>3206</SUB>> ]
-"14717" [label = <(FIELD_IDENTIFIER,ReleaseByteArrayElements,ReleaseByteArrayElements)<SUB>3207</SUB>> ]
-"14720" [label = <(FIELD_IDENTIFIER,ReleaseCharArrayElements,ReleaseCharArrayElements)<SUB>3208</SUB>> ]
-"14723" [label = <(FIELD_IDENTIFIER,ReleaseShortArrayElements,ReleaseShortArrayElements)<SUB>3209</SUB>> ]
-"14726" [label = <(FIELD_IDENTIFIER,ReleaseIntArrayElements,ReleaseIntArrayElements)<SUB>3210</SUB>> ]
-"14729" [label = <(FIELD_IDENTIFIER,ReleaseLongArrayElements,ReleaseLongArrayElements)<SUB>3211</SUB>> ]
-"14732" [label = <(FIELD_IDENTIFIER,ReleaseFloatArrayElements,ReleaseFloatArrayElements)<SUB>3212</SUB>> ]
-"14735" [label = <(FIELD_IDENTIFIER,ReleaseDoubleArrayElements,ReleaseDoubleArrayElements)<SUB>3213</SUB>> ]
-"14738" [label = <(FIELD_IDENTIFIER,GetBooleanArrayRegion,GetBooleanArrayRegion)<SUB>3214</SUB>> ]
-"14741" [label = <(FIELD_IDENTIFIER,GetByteArrayRegion,GetByteArrayRegion)<SUB>3215</SUB>> ]
-"14744" [label = <(FIELD_IDENTIFIER,GetCharArrayRegion,GetCharArrayRegion)<SUB>3216</SUB>> ]
-"14747" [label = <(FIELD_IDENTIFIER,GetShortArrayRegion,GetShortArrayRegion)<SUB>3217</SUB>> ]
-"14750" [label = <(FIELD_IDENTIFIER,GetIntArrayRegion,GetIntArrayRegion)<SUB>3218</SUB>> ]
-"14753" [label = <(FIELD_IDENTIFIER,GetLongArrayRegion,GetLongArrayRegion)<SUB>3219</SUB>> ]
-"14756" [label = <(FIELD_IDENTIFIER,GetFloatArrayRegion,GetFloatArrayRegion)<SUB>3220</SUB>> ]
-"14759" [label = <(FIELD_IDENTIFIER,GetDoubleArrayRegion,GetDoubleArrayRegion)<SUB>3221</SUB>> ]
-"14762" [label = <(FIELD_IDENTIFIER,SetBooleanArrayRegion,SetBooleanArrayRegion)<SUB>3222</SUB>> ]
-"14765" [label = <(FIELD_IDENTIFIER,SetByteArrayRegion,SetByteArrayRegion)<SUB>3223</SUB>> ]
-"14768" [label = <(FIELD_IDENTIFIER,SetCharArrayRegion,SetCharArrayRegion)<SUB>3224</SUB>> ]
-"14771" [label = <(FIELD_IDENTIFIER,SetShortArrayRegion,SetShortArrayRegion)<SUB>3225</SUB>> ]
-"14774" [label = <(FIELD_IDENTIFIER,SetIntArrayRegion,SetIntArrayRegion)<SUB>3226</SUB>> ]
-"14777" [label = <(FIELD_IDENTIFIER,SetLongArrayRegion,SetLongArrayRegion)<SUB>3227</SUB>> ]
-"14780" [label = <(FIELD_IDENTIFIER,SetFloatArrayRegion,SetFloatArrayRegion)<SUB>3228</SUB>> ]
-"14783" [label = <(FIELD_IDENTIFIER,SetDoubleArrayRegion,SetDoubleArrayRegion)<SUB>3229</SUB>> ]
-"14786" [label = <(FIELD_IDENTIFIER,RegisterNatives,RegisterNatives)<SUB>3230</SUB>> ]
-"14789" [label = <(FIELD_IDENTIFIER,UnregisterNatives,UnregisterNatives)<SUB>3231</SUB>> ]
-"14792" [label = <(FIELD_IDENTIFIER,MonitorEnter,MonitorEnter)<SUB>3232</SUB>> ]
-"14795" [label = <(FIELD_IDENTIFIER,MonitorExit,MonitorExit)<SUB>3233</SUB>> ]
-"14798" [label = <(FIELD_IDENTIFIER,GetJavaVM,GetJavaVM)<SUB>3234</SUB>> ]
-"14801" [label = <(FIELD_IDENTIFIER,GetStringRegion,GetStringRegion)<SUB>3235</SUB>> ]
-"14804" [label = <(FIELD_IDENTIFIER,GetStringUTFRegion,GetStringUTFRegion)<SUB>3236</SUB>> ]
-"14807" [label = <(FIELD_IDENTIFIER,GetPrimitiveArrayCritical,GetPrimitiveArrayCritical)<SUB>3237</SUB>> ]
-"14810" [label = <(FIELD_IDENTIFIER,ReleasePrimitiveArrayCritical,ReleasePrimitiveArrayCritical)<SUB>3238</SUB>> ]
-"14813" [label = <(FIELD_IDENTIFIER,GetStringCritical,GetStringCritical)<SUB>3239</SUB>> ]
-"14816" [label = <(FIELD_IDENTIFIER,ReleaseStringCritical,ReleaseStringCritical)<SUB>3240</SUB>> ]
-"14819" [label = <(FIELD_IDENTIFIER,NewWeakGlobalRef,NewWeakGlobalRef)<SUB>3241</SUB>> ]
-"14822" [label = <(FIELD_IDENTIFIER,DeleteWeakGlobalRef,DeleteWeakGlobalRef)<SUB>3242</SUB>> ]
-"14825" [label = <(FIELD_IDENTIFIER,ExceptionCheck,ExceptionCheck)<SUB>3243</SUB>> ]
-"14828" [label = <(FIELD_IDENTIFIER,NewDirectByteBuffer,NewDirectByteBuffer)<SUB>3244</SUB>> ]
-"14831" [label = <(FIELD_IDENTIFIER,GetDirectBufferAddress,GetDirectBufferAddress)<SUB>3245</SUB>> ]
-"14834" [label = <(FIELD_IDENTIFIER,GetDirectBufferCapacity,GetDirectBufferCapacity)<SUB>3246</SUB>> ]
-"14837" [label = <(FIELD_IDENTIFIER,GetObjectRefType,GetObjectRefType)<SUB>3247</SUB>> ]
-"589" [label = <(Runtime::Current,Runtime::Current())<SUB>369</SUB>> ]
-"593" [label = <(FIELD_IDENTIFIER,GetInstrumentation,GetInstrumentation)<SUB>369</SUB>> ]
-"610" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>396</SUB>> ]
-"762" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetClassLinker)<SUB>516</SUB>> ]
-"791" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>545</SUB>> ]
-"794" [label = <(FIELD_IDENTIFIER,ClassLoader,ClassLoader)<SUB>545</SUB>> ]
-"797" [label = <(Runtime::Current,Runtime::Current())<SUB>545</SUB>> ]
-"801" [label = <(FIELD_IDENTIFIER,GetSystemClassLoader,GetSystemClassLoader)<SUB>545</SUB>> ]
-"826" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>567</SUB>> ]
-"830" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>567</SUB>> ]
-"850" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>573</SUB>> ]
-"13908" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>2942</SUB>> ]
-"13925" [label = <(FIELD_IDENTIFIER,GetLength,GetLength)<SUB>2944</SUB>> ]
-"590" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>369</SUB>> ]
-"612" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>396</SUB>> ]
-"763" [label = <(Runtime::Current,Runtime::Current())<SUB>516</SUB>> ]
-"767" [label = <(FIELD_IDENTIFIER,GetClassLinker,GetClassLinker)<SUB>516</SUB>> ]
-"798" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>545</SUB>> ]
-"828" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>567</SUB>> ]
-"831" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>567</SUB>> ]
-"834" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>567</SUB>> ]
-"852" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>573</SUB>> ]
-"13910" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>2942</SUB>> ]
-"592" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>369</SUB>> ]
-"764" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>516</SUB>> ]
-"800" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>545</SUB>> ]
-"833" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>567</SUB>> ]
-"836" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>567</SUB>> ]
-"766" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>516</SUB>> ]
-"20" [label = <(METHOD,&lt;global&gt;)<SUB>1</SUB>> ]
-"15175" [label = <(METHOD_RETURN,ANY)<SUB>1</SUB>> ]
-  "602" -> "603" 
-  "603" -> "612" 
-  "605" -> "614" 
-  "614" -> "615" 
-  "615" -> "622" 
-  "622" -> "623" 
-  "623" -> "624" 
-  "624" -> "625" 
-  "625" -> "701" 
-  "701" -> "702" 
-  "702" -> "703" 
-  "703" -> "704" 
-  "704" -> "713" 
-  "713" -> "714" 
-  "714" -> "715" 
-  "715" -> "716" 
-  "716" -> "723" 
-  "723" -> "724" 
-  "724" -> "735" 
-  "731" -> "737" 
-  "737" -> "738" 
-  "738" -> "739" 
-  "739" -> "749" 
-  "749" -> "750" 
-  "750" -> "751" 
-  "751" -> "753" 
-  "753" -> "766" 
-  "757" -> "769" 
-  "769" -> "770" 
-  "770" -> "771" 
-  "771" -> "772" 
-  "772" -> "773" 
-  "773" -> "774" 
-  "774" -> "780" 
-  "780" -> "781" 
-  "781" -> "782" 
-  "782" -> "783" 
-  "783" -> "791" 
-  "785" -> "802" 
-  "802" -> "803" 
-  "803" -> "804" 
-  "804" -> "805" 
-  "805" -> "806" 
-  "806" -> "816" 
-  "816" -> "817" 
-  "817" -> "823" 
-  "819" -> "838" 
-  "838" -> "840" 
-  "840" -> "852" 
-  "845" -> "854" 
-  "854" -> "855" 
-  "855" -> "856" 
-  "856" -> "857" 
-  "857" -> "859" 
-  "859" -> "860" 
-  "860" -> "861" 
-  "861" -> "862" 
-  "862" -> "863" 
-  "863" -> "864" 
-  "864" -> "874" 
-  "874" -> "875" 
-  "875" -> "876" 
-  "876" -> "877" 
-  "877" -> "886" 
-  "886" -> "887" 
-  "887" -> "888" 
-  "888" -> "897" 
-  "897" -> "898" 
-  "898" -> "918" 
-  "918" -> "919" 
-  "919" -> "920" 
-  "920" -> "921" 
-  "921" -> "922" 
-  "922" -> "13662" 
-  "13662" -> "13718" 
-  "13718" -> "13719" 
-  "13719" -> "13723" 
-  "13721" -> "13724" 
-  "13724" -> "13725" 
-  "13725" -> "13726" 
-  "13726" -> "13727" 
-  "13727" -> "13900" 
-  "13900" -> "13901" 
-  "13901" -> "13910" 
-  "13903" -> "13915" 
-  "13913" -> "13925" 
-  "13919" -> "13927" 
-  "13927" -> "13928" 
-  "13928" -> "13929" 
-  "13929" -> "14142" 
-  "14142" -> "14153" 
-  "14144" -> "14851" 
-  "14849" -> "15125" 
-  "15125" -> "15175" 
-  "571" -> "574" 
-  "574" -> "582" 
-  "582" -> "583" 
-  "583" -> "592" 
-  "585" -> "594" 
-  "594" -> "602" 
-  "607" -> "605" 
-  "732" -> "731" 
-  "759" -> "757" 
-  "787" -> "785" 
-  "820" -> "819" 
-  "847" -> "845" 
-  "13723" -> "13721" 
-  "13905" -> "13903" 
-  "13915" -> "13913" 
-  "13921" -> "13919" 
-  "14146" -> "14144" 
-  "14851" -> "14849" 
-  "49" -> "228" 
-  "228" -> "571" 
-  "587" -> "585" 
-  "608" -> "607" 
-  "733" -> "732" 
-  "760" -> "759" 
-  "788" -> "800" 
-  "795" -> "787" 
-  "821" -> "828" 
-  "824" -> "820" 
-  "848" -> "847" 
-  "13906" -> "13905" 
-  "13922" -> "13921" 
-  "14151" -> "14156" 
-  "14154" -> "14159" 
-  "14157" -> "14162" 
-  "14160" -> "14165" 
-  "14163" -> "14168" 
-  "14166" -> "14171" 
-  "14169" -> "14174" 
-  "14172" -> "14177" 
-  "14175" -> "14180" 
-  "14178" -> "14183" 
-  "14181" -> "14186" 
-  "14184" -> "14189" 
-  "14187" -> "14192" 
-  "14190" -> "14195" 
-  "14193" -> "14198" 
-  "14196" -> "14201" 
-  "14199" -> "14204" 
-  "14202" -> "14207" 
-  "14205" -> "14210" 
-  "14208" -> "14213" 
-  "14211" -> "14216" 
-  "14214" -> "14219" 
-  "14217" -> "14222" 
-  "14220" -> "14225" 
-  "14223" -> "14228" 
-  "14226" -> "14231" 
-  "14229" -> "14234" 
-  "14232" -> "14237" 
-  "14235" -> "14240" 
-  "14238" -> "14243" 
-  "14241" -> "14246" 
-  "14244" -> "14249" 
-  "14247" -> "14252" 
-  "14250" -> "14255" 
-  "14253" -> "14258" 
-  "14256" -> "14261" 
-  "14259" -> "14264" 
-  "14262" -> "14267" 
-  "14265" -> "14270" 
-  "14268" -> "14273" 
-  "14271" -> "14276" 
-  "14274" -> "14279" 
-  "14277" -> "14282" 
-  "14280" -> "14285" 
-  "14283" -> "14288" 
-  "14286" -> "14291" 
-  "14289" -> "14294" 
-  "14292" -> "14297" 
-  "14295" -> "14300" 
-  "14298" -> "14303" 
-  "14301" -> "14306" 
-  "14304" -> "14309" 
-  "14307" -> "14312" 
-  "14310" -> "14315" 
-  "14313" -> "14318" 
-  "14316" -> "14321" 
-  "14319" -> "14324" 
-  "14322" -> "14327" 
-  "14325" -> "14330" 
-  "14328" -> "14333" 
-  "14331" -> "14336" 
-  "14334" -> "14339" 
-  "14337" -> "14342" 
-  "14340" -> "14345" 
-  "14343" -> "14348" 
-  "14346" -> "14351" 
-  "14349" -> "14354" 
-  "14352" -> "14357" 
-  "14355" -> "14360" 
-  "14358" -> "14363" 
-  "14361" -> "14366" 
-  "14364" -> "14369" 
-  "14367" -> "14372" 
-  "14370" -> "14375" 
-  "14373" -> "14378" 
-  "14376" -> "14381" 
-  "14379" -> "14384" 
-  "14382" -> "14387" 
-  "14385" -> "14390" 
-  "14388" -> "14393" 
-  "14391" -> "14396" 
-  "14394" -> "14399" 
-  "14397" -> "14402" 
-  "14400" -> "14405" 
-  "14403" -> "14408" 
-  "14406" -> "14411" 
-  "14409" -> "14414" 
-  "14412" -> "14417" 
-  "14415" -> "14420" 
-  "14418" -> "14423" 
-  "14421" -> "14426" 
-  "14424" -> "14429" 
-  "14427" -> "14432" 
-  "14430" -> "14435" 
-  "14433" -> "14438" 
-  "14436" -> "14441" 
-  "14439" -> "14444" 
-  "14442" -> "14447" 
-  "14445" -> "14450" 
-  "14448" -> "14453" 
-  "14451" -> "14456" 
-  "14454" -> "14459" 
-  "14457" -> "14462" 
-  "14460" -> "14465" 
-  "14463" -> "14468" 
-  "14466" -> "14471" 
-  "14469" -> "14474" 
-  "14472" -> "14477" 
-  "14475" -> "14480" 
-  "14478" -> "14483" 
-  "14481" -> "14486" 
-  "14484" -> "14489" 
-  "14487" -> "14492" 
-  "14490" -> "14495" 
-  "14493" -> "14498" 
-  "14496" -> "14501" 
-  "14499" -> "14504" 
-  "14502" -> "14507" 
-  "14505" -> "14510" 
-  "14508" -> "14513" 
-  "14511" -> "14516" 
-  "14514" -> "14519" 
-  "14517" -> "14522" 
-  "14520" -> "14525" 
-  "14523" -> "14528" 
-  "14526" -> "14531" 
-  "14529" -> "14534" 
-  "14532" -> "14537" 
-  "14535" -> "14540" 
-  "14538" -> "14543" 
-  "14541" -> "14546" 
-  "14544" -> "14549" 
-  "14547" -> "14552" 
-  "14550" -> "14555" 
-  "14553" -> "14558" 
-  "14556" -> "14561" 
-  "14559" -> "14564" 
-  "14562" -> "14567" 
-  "14565" -> "14570" 
-  "14568" -> "14573" 
-  "14571" -> "14576" 
-  "14574" -> "14579" 
-  "14577" -> "14582" 
-  "14580" -> "14585" 
-  "14583" -> "14588" 
-  "14586" -> "14591" 
-  "14589" -> "14594" 
-  "14592" -> "14597" 
-  "14595" -> "14600" 
-  "14598" -> "14603" 
-  "14601" -> "14606" 
-  "14604" -> "14609" 
-  "14607" -> "14612" 
-  "14610" -> "14615" 
-  "14613" -> "14618" 
-  "14616" -> "14621" 
-  "14619" -> "14624" 
-  "14622" -> "14627" 
-  "14625" -> "14630" 
-  "14628" -> "14633" 
-  "14631" -> "14636" 
-  "14634" -> "14639" 
-  "14637" -> "14642" 
-  "14640" -> "14645" 
-  "14643" -> "14648" 
-  "14646" -> "14651" 
-  "14649" -> "14654" 
-  "14652" -> "14657" 
-  "14655" -> "14660" 
-  "14658" -> "14663" 
-  "14661" -> "14666" 
-  "14664" -> "14669" 
-  "14667" -> "14672" 
-  "14670" -> "14675" 
-  "14673" -> "14678" 
-  "14676" -> "14681" 
-  "14679" -> "14684" 
-  "14682" -> "14687" 
-  "14685" -> "14690" 
-  "14688" -> "14693" 
-  "14691" -> "14696" 
-  "14694" -> "14699" 
-  "14697" -> "14702" 
-  "14700" -> "14705" 
-  "14703" -> "14708" 
-  "14706" -> "14711" 
-  "14709" -> "14714" 
-  "14712" -> "14717" 
-  "14715" -> "14720" 
-  "14718" -> "14723" 
-  "14721" -> "14726" 
-  "14724" -> "14729" 
-  "14727" -> "14732" 
-  "14730" -> "14735" 
-  "14733" -> "14738" 
-  "14736" -> "14741" 
-  "14739" -> "14744" 
-  "14742" -> "14747" 
-  "14745" -> "14750" 
-  "14748" -> "14753" 
-  "14751" -> "14756" 
-  "14754" -> "14759" 
-  "14757" -> "14762" 
-  "14760" -> "14765" 
-  "14763" -> "14768" 
-  "14766" -> "14771" 
-  "14769" -> "14774" 
-  "14772" -> "14777" 
-  "14775" -> "14780" 
-  "14778" -> "14783" 
-  "14781" -> "14786" 
-  "14784" -> "14789" 
-  "14787" -> "14792" 
-  "14790" -> "14795" 
-  "14793" -> "14798" 
-  "14796" -> "14801" 
-  "14799" -> "14804" 
-  "14802" -> "14807" 
-  "14805" -> "14810" 
-  "14808" -> "14813" 
-  "14811" -> "14816" 
-  "14814" -> "14819" 
-  "14817" -> "14822" 
-  "14820" -> "14825" 
-  "14823" -> "14828" 
-  "14826" -> "14831" 
-  "14829" -> "14834" 
-  "14832" -> "14837" 
-  "14835" -> "14146" 
-  "588" -> "587" 
-  "609" -> "613" 
-  "613" -> "608" 
-  "735" -> "733" 
-  "761" -> "768" 
-  "768" -> "760" 
-  "789" -> "794" 
-  "792" -> "788" 
-  "796" -> "795" 
-  "823" -> "821" 
-  "825" -> "833" 
-  "829" -> "824" 
-  "849" -> "853" 
-  "853" -> "848" 
-  "13907" -> "13911" 
-  "13911" -> "13906" 
-  "13923" -> "13922" 
-  "14153" -> "14151" 
-  "14156" -> "14154" 
-  "14159" -> "14157" 
-  "14162" -> "14160" 
-  "14165" -> "14163" 
-  "14168" -> "14166" 
-  "14171" -> "14169" 
-  "14174" -> "14172" 
-  "14177" -> "14175" 
-  "14180" -> "14178" 
-  "14183" -> "14181" 
-  "14186" -> "14184" 
-  "14189" -> "14187" 
-  "14192" -> "14190" 
-  "14195" -> "14193" 
-  "14198" -> "14196" 
-  "14201" -> "14199" 
-  "14204" -> "14202" 
-  "14207" -> "14205" 
-  "14210" -> "14208" 
-  "14213" -> "14211" 
-  "14216" -> "14214" 
-  "14219" -> "14217" 
-  "14222" -> "14220" 
-  "14225" -> "14223" 
-  "14228" -> "14226" 
-  "14231" -> "14229" 
-  "14234" -> "14232" 
-  "14237" -> "14235" 
-  "14240" -> "14238" 
-  "14243" -> "14241" 
-  "14246" -> "14244" 
-  "14249" -> "14247" 
-  "14252" -> "14250" 
-  "14255" -> "14253" 
-  "14258" -> "14256" 
-  "14261" -> "14259" 
-  "14264" -> "14262" 
-  "14267" -> "14265" 
-  "14270" -> "14268" 
-  "14273" -> "14271" 
-  "14276" -> "14274" 
-  "14279" -> "14277" 
-  "14282" -> "14280" 
-  "14285" -> "14283" 
-  "14288" -> "14286" 
-  "14291" -> "14289" 
-  "14294" -> "14292" 
-  "14297" -> "14295" 
-  "14300" -> "14298" 
-  "14303" -> "14301" 
-  "14306" -> "14304" 
-  "14309" -> "14307" 
-  "14312" -> "14310" 
-  "14315" -> "14313" 
-  "14318" -> "14316" 
-  "14321" -> "14319" 
-  "14324" -> "14322" 
-  "14327" -> "14325" 
-  "14330" -> "14328" 
-  "14333" -> "14331" 
-  "14336" -> "14334" 
-  "14339" -> "14337" 
-  "14342" -> "14340" 
-  "14345" -> "14343" 
-  "14348" -> "14346" 
-  "14351" -> "14349" 
-  "14354" -> "14352" 
-  "14357" -> "14355" 
-  "14360" -> "14358" 
-  "14363" -> "14361" 
-  "14366" -> "14364" 
-  "14369" -> "14367" 
-  "14372" -> "14370" 
-  "14375" -> "14373" 
-  "14378" -> "14376" 
-  "14381" -> "14379" 
-  "14384" -> "14382" 
-  "14387" -> "14385" 
-  "14390" -> "14388" 
-  "14393" -> "14391" 
-  "14396" -> "14394" 
-  "14399" -> "14397" 
-  "14402" -> "14400" 
-  "14405" -> "14403" 
-  "14408" -> "14406" 
-  "14411" -> "14409" 
-  "14414" -> "14412" 
-  "14417" -> "14415" 
-  "14420" -> "14418" 
-  "14423" -> "14421" 
-  "14426" -> "14424" 
-  "14429" -> "14427" 
-  "14432" -> "14430" 
-  "14435" -> "14433" 
-  "14438" -> "14436" 
-  "14441" -> "14439" 
-  "14444" -> "14442" 
-  "14447" -> "14445" 
-  "14450" -> "14448" 
-  "14453" -> "14451" 
-  "14456" -> "14454" 
-  "14459" -> "14457" 
-  "14462" -> "14460" 
-  "14465" -> "14463" 
-  "14468" -> "14466" 
-  "14471" -> "14469" 
-  "14474" -> "14472" 
-  "14477" -> "14475" 
-  "14480" -> "14478" 
-  "14483" -> "14481" 
-  "14486" -> "14484" 
-  "14489" -> "14487" 
-  "14492" -> "14490" 
-  "14495" -> "14493" 
-  "14498" -> "14496" 
-  "14501" -> "14499" 
-  "14504" -> "14502" 
-  "14507" -> "14505" 
-  "14510" -> "14508" 
-  "14513" -> "14511" 
-  "14516" -> "14514" 
-  "14519" -> "14517" 
-  "14522" -> "14520" 
-  "14525" -> "14523" 
-  "14528" -> "14526" 
-  "14531" -> "14529" 
-  "14534" -> "14532" 
-  "14537" -> "14535" 
-  "14540" -> "14538" 
-  "14543" -> "14541" 
-  "14546" -> "14544" 
-  "14549" -> "14547" 
-  "14552" -> "14550" 
-  "14555" -> "14553" 
-  "14558" -> "14556" 
-  "14561" -> "14559" 
-  "14564" -> "14562" 
-  "14567" -> "14565" 
-  "14570" -> "14568" 
-  "14573" -> "14571" 
-  "14576" -> "14574" 
-  "14579" -> "14577" 
-  "14582" -> "14580" 
-  "14585" -> "14583" 
-  "14588" -> "14586" 
-  "14591" -> "14589" 
-  "14594" -> "14592" 
-  "14597" -> "14595" 
-  "14600" -> "14598" 
-  "14603" -> "14601" 
-  "14606" -> "14604" 
-  "14609" -> "14607" 
-  "14612" -> "14610" 
-  "14615" -> "14613" 
-  "14618" -> "14616" 
-  "14621" -> "14619" 
-  "14624" -> "14622" 
-  "14627" -> "14625" 
-  "14630" -> "14628" 
-  "14633" -> "14631" 
-  "14636" -> "14634" 
-  "14639" -> "14637" 
-  "14642" -> "14640" 
-  "14645" -> "14643" 
-  "14648" -> "14646" 
-  "14651" -> "14649" 
-  "14654" -> "14652" 
-  "14657" -> "14655" 
-  "14660" -> "14658" 
-  "14663" -> "14661" 
-  "14666" -> "14664" 
-  "14669" -> "14667" 
-  "14672" -> "14670" 
-  "14675" -> "14673" 
-  "14678" -> "14676" 
-  "14681" -> "14679" 
-  "14684" -> "14682" 
-  "14687" -> "14685" 
-  "14690" -> "14688" 
-  "14693" -> "14691" 
-  "14696" -> "14694" 
-  "14699" -> "14697" 
-  "14702" -> "14700" 
-  "14705" -> "14703" 
-  "14708" -> "14706" 
-  "14711" -> "14709" 
-  "14714" -> "14712" 
-  "14717" -> "14715" 
-  "14720" -> "14718" 
-  "14723" -> "14721" 
-  "14726" -> "14724" 
-  "14729" -> "14727" 
-  "14732" -> "14730" 
-  "14735" -> "14733" 
-  "14738" -> "14736" 
-  "14741" -> "14739" 
-  "14744" -> "14742" 
-  "14747" -> "14745" 
-  "14750" -> "14748" 
-  "14753" -> "14751" 
-  "14756" -> "14754" 
-  "14759" -> "14757" 
-  "14762" -> "14760" 
-  "14765" -> "14763" 
-  "14768" -> "14766" 
-  "14771" -> "14769" 
-  "14774" -> "14772" 
-  "14777" -> "14775" 
-  "14780" -> "14778" 
-  "14783" -> "14781" 
-  "14786" -> "14784" 
-  "14789" -> "14787" 
-  "14792" -> "14790" 
-  "14795" -> "14793" 
-  "14798" -> "14796" 
-  "14801" -> "14799" 
-  "14804" -> "14802" 
-  "14807" -> "14805" 
-  "14810" -> "14808" 
-  "14813" -> "14811" 
-  "14816" -> "14814" 
-  "14819" -> "14817" 
-  "14822" -> "14820" 
-  "14825" -> "14823" 
-  "14828" -> "14826" 
-  "14831" -> "14829" 
-  "14834" -> "14832" 
-  "14837" -> "14835" 
-  "589" -> "593" 
-  "593" -> "588" 
-  "610" -> "609" 
-  "762" -> "761" 
-  "791" -> "789" 
-  "794" -> "792" 
-  "797" -> "801" 
-  "801" -> "796" 
-  "826" -> "825" 
-  "830" -> "829" 
-  "850" -> "849" 
-  "13908" -> "13907" 
-  "13925" -> "13923" 
-  "590" -> "589" 
-  "612" -> "610" 
-  "763" -> "767" 
-  "767" -> "762" 
-  "798" -> "797" 
-  "828" -> "826" 
-  "831" -> "836" 
-  "834" -> "830" 
-  "852" -> "850" 
-  "13910" -> "13908" 
-  "592" -> "590" 
-  "764" -> "763" 
-  "800" -> "798" 
-  "833" -> "831" 
-  "836" -> "834" 
-  "766" -> "764" 
-  "20" -> "49" 
+digraph "ScopedVAArgs" {  
+"19" [label = <(METHOD,ScopedVAArgs)<SUB>77</SUB>> ]
+"22" [label = <(METHOD_RETURN,ANY)<SUB>77</SUB>> ]
+  "19" -> "22" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/30-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/30-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/30-cfg.dot	2023-06-07 19:35:28.217384348 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/30-cfg.dot	2023-06-07 19:35:34.747383777 +0330
@@ -1,5 +1,5 @@
-digraph "FindMethodID" {  
-"740" [label = <(METHOD,FindMethodID)<SUB>508</SUB>> ]
-"747" [label = <(METHOD_RETURN,jmethodID)<SUB>508</SUB>> ]
-  "740" -> "747" 
+digraph "ThrowSIOOBE" {  
+"684" [label = <(METHOD,ThrowSIOOBE)<SUB>551</SUB>> ]
+"690" [label = <(METHOD_RETURN,void)<SUB>551</SUB>> ]
+  "684" -> "690" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/300-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/300-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/300-cfg.dot	2023-06-07 19:35:28.417384331 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/300-cfg.dot	2023-06-07 19:35:34.927383763 +0330
@@ -1,249 +1,5 @@
-digraph "SetPrimitiveArrayRegionElementsOfWrongType" {  
-"17084" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>543</SUB>> ]
-"17093" [label = <(&lt;operator&gt;.assignment,kLength = 10)<SUB>545</SUB>> ]
-"17097" [label = <(&lt;operator&gt;.assignment,array = env_-&gt;NewBooleanArray(kLength))<SUB>546</SUB>> ]
-"17104" [label = <(ASSERT_TRUE,ASSERT_TRUE(array != nullptr))<SUB>547</SUB>> ]
-"17109" [label = <(SetByteArrayRegion,env_-&gt;SetByteArrayRegion(reinterpret_cast&lt;jbyteArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jbyte*&gt;(elements)))<SUB>549</SUB>> ]
-"17121" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected byte[]&quot;\012 : &quot;attempt to set region of byte primitive array elements with an object of type boolean[]&quot;))<SUB>551</SUB>> ]
-"17129" [label = <(SetShortArrayRegion,env_-&gt;SetShortArrayRegion(reinterpret_cast&lt;jshortArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jshort*&gt;(elements)))<SUB>554</SUB>> ]
-"17141" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected short[]&quot;\012 : &quot;attempt to set region of short primitive array elements with an object of type boolean[]&quot;))<SUB>556</SUB>> ]
-"17149" [label = <(SetCharArrayRegion,env_-&gt;SetCharArrayRegion(reinterpret_cast&lt;jcharArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jchar*&gt;(elements)))<SUB>559</SUB>> ]
-"17161" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected char[]&quot;\012 : &quot;attempt to set region of char primitive array elements with an object of type boolean[]&quot;))<SUB>561</SUB>> ]
-"17169" [label = <(SetIntArrayRegion,env_-&gt;SetIntArrayRegion(reinterpret_cast&lt;jintArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jint*&gt;(elements)))<SUB>564</SUB>> ]
-"17181" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected int[]&quot;\012 : &quot;attempt to set region of int primitive array elements with an object of type boolean[]&quot;))<SUB>566</SUB>> ]
-"17189" [label = <(SetLongArrayRegion,env_-&gt;SetLongArrayRegion(reinterpret_cast&lt;jlongArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jlong*&gt;(elements)))<SUB>569</SUB>> ]
-"17201" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected long[]&quot;\012 : &quot;attempt to set region of long primitive array elements with an object of type boolean[]&quot;))<SUB>571</SUB>> ]
-"17209" [label = <(SetFloatArrayRegion,env_-&gt;SetFloatArrayRegion(reinterpret_cast&lt;jfloatArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jfloat*&gt;(elements)))<SUB>574</SUB>> ]
-"17221" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected float[]&quot;\012 : &quot;attempt to set region of float primitive array elements with an object of type boolean[]&quot;))<SUB>576</SUB>> ]
-"17229" [label = <(SetDoubleArrayRegion,env_-&gt;SetDoubleArrayRegion(reinterpret_cast&lt;jdoubleArray&gt;(array), 0, kLength,\012 reinterpret_cast&lt;jdouble*&gt;(elements)))<SUB>579</SUB>> ]
-"17241" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type boolean[] expected double[]&quot;\012 : &quot;attempt to set region of double primitive array elements with an object of type boolean[]&quot;))<SUB>581</SUB>> ]
-"17250" [label = <(&lt;operator&gt;.assignment,array2 = env_-&gt;NewByteArray(10))<SUB>584</SUB>> ]
-"17257" [label = <(SetBooleanArrayRegion,env_-&gt;SetBooleanArrayRegion(reinterpret_cast&lt;jbooleanArray&gt;(array2), 0, kLength,\012 reinterpret_cast&lt;jboolean*&gt;(elements)))<SUB>585</SUB>> ]
-"17269" [label = <(Check,jni_abort_catcher.Check(\012        check_jni ? &quot;incompatible array type byte[] expected boolean[]&quot;\012 : &quot;attempt to set region of boolean primitive array elements with an object of type byte[]&quot;))<SUB>587</SUB>> ]
-"17278" [label = <(&lt;operator&gt;.assignment,object = env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>590</SUB>> ]
-"17285" [label = <(SetBooleanArrayRegion,env_-&gt;SetBooleanArrayRegion(reinterpret_cast&lt;jbooleanArray&gt;(object), 0, kLength,\012 reinterpret_cast&lt;jboolean*&gt;(elements)))<SUB>591</SUB>> ]
-"17297" [label = <(Check,jni_abort_catcher.Check(check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;attempt to set region of boolean primitive array elements with an object of type &quot;\012 &quot;java.lang.String&quot;))<SUB>593</SUB>> ]
-"17305" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>596</SUB>> ]
-"17086" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>543</SUB>> ]
-"17099" [label = <(NewBooleanArray,env_-&gt;NewBooleanArray(kLength))<SUB>546</SUB>> ]
-"17105" [label = <(&lt;operator&gt;.notEquals,array != nullptr)<SUB>547</SUB>> ]
-"17110" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;SetByteArrayRegion)<SUB>549</SUB>> ]
-"17113" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbyteArray&gt;(array))<SUB>549</SUB>> ]
-"17118" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbyte*&gt;(elements))<SUB>550</SUB>> ]
-"17122" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>551</SUB>> ]
-"17125" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected byte[]&quot;\012 : &quot;attempt to set region of byte primitive array elements with an object of type boolean[]&quot;)<SUB>552</SUB>> ]
-"17130" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;SetShortArrayRegion)<SUB>554</SUB>> ]
-"17133" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jshortArray&gt;(array))<SUB>554</SUB>> ]
-"17138" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jshort*&gt;(elements))<SUB>555</SUB>> ]
-"17142" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>556</SUB>> ]
-"17145" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected short[]&quot;\012 : &quot;attempt to set region of short primitive array elements with an object of type boolean[]&quot;)<SUB>557</SUB>> ]
-"17150" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;SetCharArrayRegion)<SUB>559</SUB>> ]
-"17153" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jcharArray&gt;(array))<SUB>559</SUB>> ]
-"17158" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jchar*&gt;(elements))<SUB>560</SUB>> ]
-"17162" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>561</SUB>> ]
-"17165" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected char[]&quot;\012 : &quot;attempt to set region of char primitive array elements with an object of type boolean[]&quot;)<SUB>562</SUB>> ]
-"17170" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;SetIntArrayRegion)<SUB>564</SUB>> ]
-"17173" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jintArray&gt;(array))<SUB>564</SUB>> ]
-"17178" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jint*&gt;(elements))<SUB>565</SUB>> ]
-"17182" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>566</SUB>> ]
-"17185" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected int[]&quot;\012 : &quot;attempt to set region of int primitive array elements with an object of type boolean[]&quot;)<SUB>567</SUB>> ]
-"17190" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;SetLongArrayRegion)<SUB>569</SUB>> ]
-"17193" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jlongArray&gt;(array))<SUB>569</SUB>> ]
-"17198" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jlong*&gt;(elements))<SUB>570</SUB>> ]
-"17202" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>571</SUB>> ]
-"17205" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected long[]&quot;\012 : &quot;attempt to set region of long primitive array elements with an object of type boolean[]&quot;)<SUB>572</SUB>> ]
-"17210" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;SetFloatArrayRegion)<SUB>574</SUB>> ]
-"17213" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jfloatArray&gt;(array))<SUB>574</SUB>> ]
-"17218" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jfloat*&gt;(elements))<SUB>575</SUB>> ]
-"17222" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>576</SUB>> ]
-"17225" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected float[]&quot;\012 : &quot;attempt to set region of float primitive array elements with an object of type boolean[]&quot;)<SUB>577</SUB>> ]
-"17230" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;SetDoubleArrayRegion)<SUB>579</SUB>> ]
-"17233" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jdoubleArray&gt;(array))<SUB>579</SUB>> ]
-"17238" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jdouble*&gt;(elements))<SUB>580</SUB>> ]
-"17242" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>581</SUB>> ]
-"17245" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type boolean[] expected double[]&quot;\012 : &quot;attempt to set region of double primitive array elements with an object of type boolean[]&quot;)<SUB>582</SUB>> ]
-"17252" [label = <(NewByteArray,env_-&gt;NewByteArray(10))<SUB>584</SUB>> ]
-"17258" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;SetBooleanArrayRegion)<SUB>585</SUB>> ]
-"17261" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbooleanArray&gt;(array2))<SUB>585</SUB>> ]
-"17266" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jboolean*&gt;(elements))<SUB>586</SUB>> ]
-"17270" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>587</SUB>> ]
-"17273" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;incompatible array type byte[] expected boolean[]&quot;\012 : &quot;attempt to set region of boolean primitive array elements with an object of type byte[]&quot;)<SUB>588</SUB>> ]
-"17280" [label = <(NewStringUTF,env_-&gt;NewStringUTF(&quot;Test String&quot;))<SUB>590</SUB>> ]
-"17286" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;SetBooleanArrayRegion)<SUB>591</SUB>> ]
-"17289" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jbooleanArray&gt;(object))<SUB>591</SUB>> ]
-"17294" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;jboolean*&gt;(elements))<SUB>592</SUB>> ]
-"17298" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>593</SUB>> ]
-"17301" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;jarray argument has non-array type: java.lang.String&quot;\012 : &quot;attempt to set region of boolean primitive array elements with an object of type &quot;\012 &quot;java.lang.String&quot;)<SUB>593</SUB>> ]
-"17307" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>596</SUB>> ]
-"17087" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>543</SUB>> ]
-"17100" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewBooleanArray)<SUB>546</SUB>> ]
-"17112" [label = <(FIELD_IDENTIFIER,SetByteArrayRegion,SetByteArrayRegion)<SUB>549</SUB>> ]
-"17114" [label = <(UNKNOWN,jbyteArray,jbyteArray)<SUB>549</SUB>> ]
-"17119" [label = <(UNKNOWN,jbyte*,jbyte*)<SUB>550</SUB>> ]
-"17124" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>551</SUB>> ]
-"17132" [label = <(FIELD_IDENTIFIER,SetShortArrayRegion,SetShortArrayRegion)<SUB>554</SUB>> ]
-"17134" [label = <(UNKNOWN,jshortArray,jshortArray)<SUB>554</SUB>> ]
-"17139" [label = <(UNKNOWN,jshort*,jshort*)<SUB>555</SUB>> ]
-"17144" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>556</SUB>> ]
-"17152" [label = <(FIELD_IDENTIFIER,SetCharArrayRegion,SetCharArrayRegion)<SUB>559</SUB>> ]
-"17154" [label = <(UNKNOWN,jcharArray,jcharArray)<SUB>559</SUB>> ]
-"17159" [label = <(UNKNOWN,jchar*,jchar*)<SUB>560</SUB>> ]
-"17164" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>561</SUB>> ]
-"17172" [label = <(FIELD_IDENTIFIER,SetIntArrayRegion,SetIntArrayRegion)<SUB>564</SUB>> ]
-"17174" [label = <(UNKNOWN,jintArray,jintArray)<SUB>564</SUB>> ]
-"17179" [label = <(UNKNOWN,jint*,jint*)<SUB>565</SUB>> ]
-"17184" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>566</SUB>> ]
-"17192" [label = <(FIELD_IDENTIFIER,SetLongArrayRegion,SetLongArrayRegion)<SUB>569</SUB>> ]
-"17194" [label = <(UNKNOWN,jlongArray,jlongArray)<SUB>569</SUB>> ]
-"17199" [label = <(UNKNOWN,jlong*,jlong*)<SUB>570</SUB>> ]
-"17204" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>571</SUB>> ]
-"17212" [label = <(FIELD_IDENTIFIER,SetFloatArrayRegion,SetFloatArrayRegion)<SUB>574</SUB>> ]
-"17214" [label = <(UNKNOWN,jfloatArray,jfloatArray)<SUB>574</SUB>> ]
-"17219" [label = <(UNKNOWN,jfloat*,jfloat*)<SUB>575</SUB>> ]
-"17224" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>576</SUB>> ]
-"17232" [label = <(FIELD_IDENTIFIER,SetDoubleArrayRegion,SetDoubleArrayRegion)<SUB>579</SUB>> ]
-"17234" [label = <(UNKNOWN,jdoubleArray,jdoubleArray)<SUB>579</SUB>> ]
-"17239" [label = <(UNKNOWN,jdouble*,jdouble*)<SUB>580</SUB>> ]
-"17244" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>581</SUB>> ]
-"17253" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewByteArray)<SUB>584</SUB>> ]
-"17260" [label = <(FIELD_IDENTIFIER,SetBooleanArrayRegion,SetBooleanArrayRegion)<SUB>585</SUB>> ]
-"17262" [label = <(UNKNOWN,jbooleanArray,jbooleanArray)<SUB>585</SUB>> ]
-"17267" [label = <(UNKNOWN,jboolean*,jboolean*)<SUB>586</SUB>> ]
-"17272" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>587</SUB>> ]
-"17281" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewStringUTF)<SUB>590</SUB>> ]
-"17288" [label = <(FIELD_IDENTIFIER,SetBooleanArrayRegion,SetBooleanArrayRegion)<SUB>591</SUB>> ]
-"17290" [label = <(UNKNOWN,jbooleanArray,jbooleanArray)<SUB>591</SUB>> ]
-"17295" [label = <(UNKNOWN,jboolean*,jboolean*)<SUB>592</SUB>> ]
-"17300" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>593</SUB>> ]
-"17308" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>596</SUB>> ]
-"17089" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>543</SUB>> ]
-"17102" [label = <(FIELD_IDENTIFIER,NewBooleanArray,NewBooleanArray)<SUB>546</SUB>> ]
-"17255" [label = <(FIELD_IDENTIFIER,NewByteArray,NewByteArray)<SUB>584</SUB>> ]
-"17283" [label = <(FIELD_IDENTIFIER,NewStringUTF,NewStringUTF)<SUB>590</SUB>> ]
-"17310" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>596</SUB>> ]
-"17080" [label = <(METHOD,SetPrimitiveArrayRegionElementsOfWrongType)<SUB>542</SUB>> ]
-"17312" [label = <(METHOD_RETURN,void)<SUB>542</SUB>> ]
-  "17084" -> "17093" 
-  "17093" -> "17102" 
-  "17097" -> "17105" 
-  "17104" -> "17112" 
-  "17109" -> "17124" 
-  "17121" -> "17132" 
-  "17129" -> "17144" 
-  "17141" -> "17152" 
-  "17149" -> "17164" 
-  "17161" -> "17172" 
-  "17169" -> "17184" 
-  "17181" -> "17192" 
-  "17189" -> "17204" 
-  "17201" -> "17212" 
-  "17209" -> "17224" 
-  "17221" -> "17232" 
-  "17229" -> "17244" 
-  "17241" -> "17255" 
-  "17250" -> "17260" 
-  "17257" -> "17272" 
-  "17269" -> "17283" 
-  "17278" -> "17288" 
-  "17285" -> "17300" 
-  "17297" -> "17310" 
-  "17305" -> "17312" 
-  "17086" -> "17084" 
-  "17099" -> "17097" 
-  "17105" -> "17104" 
-  "17110" -> "17114" 
-  "17113" -> "17119" 
-  "17118" -> "17109" 
-  "17122" -> "17125" 
-  "17125" -> "17121" 
-  "17130" -> "17134" 
-  "17133" -> "17139" 
-  "17138" -> "17129" 
-  "17142" -> "17145" 
-  "17145" -> "17141" 
-  "17150" -> "17154" 
-  "17153" -> "17159" 
-  "17158" -> "17149" 
-  "17162" -> "17165" 
-  "17165" -> "17161" 
-  "17170" -> "17174" 
-  "17173" -> "17179" 
-  "17178" -> "17169" 
-  "17182" -> "17185" 
-  "17185" -> "17181" 
-  "17190" -> "17194" 
-  "17193" -> "17199" 
-  "17198" -> "17189" 
-  "17202" -> "17205" 
-  "17205" -> "17201" 
-  "17210" -> "17214" 
-  "17213" -> "17219" 
-  "17218" -> "17209" 
-  "17222" -> "17225" 
-  "17225" -> "17221" 
-  "17230" -> "17234" 
-  "17233" -> "17239" 
-  "17238" -> "17229" 
-  "17242" -> "17245" 
-  "17245" -> "17241" 
-  "17252" -> "17250" 
-  "17258" -> "17262" 
-  "17261" -> "17267" 
-  "17266" -> "17257" 
-  "17270" -> "17273" 
-  "17273" -> "17269" 
-  "17280" -> "17278" 
-  "17286" -> "17290" 
-  "17289" -> "17295" 
-  "17294" -> "17285" 
-  "17298" -> "17301" 
-  "17301" -> "17297" 
-  "17307" -> "17305" 
-  "17087" -> "17086" 
-  "17100" -> "17099" 
-  "17112" -> "17110" 
-  "17114" -> "17113" 
-  "17119" -> "17118" 
-  "17124" -> "17122" 
-  "17132" -> "17130" 
-  "17134" -> "17133" 
-  "17139" -> "17138" 
-  "17144" -> "17142" 
-  "17152" -> "17150" 
-  "17154" -> "17153" 
-  "17159" -> "17158" 
-  "17164" -> "17162" 
-  "17172" -> "17170" 
-  "17174" -> "17173" 
-  "17179" -> "17178" 
-  "17184" -> "17182" 
-  "17192" -> "17190" 
-  "17194" -> "17193" 
-  "17199" -> "17198" 
-  "17204" -> "17202" 
-  "17212" -> "17210" 
-  "17214" -> "17213" 
-  "17219" -> "17218" 
-  "17224" -> "17222" 
-  "17232" -> "17230" 
-  "17234" -> "17233" 
-  "17239" -> "17238" 
-  "17244" -> "17242" 
-  "17253" -> "17252" 
-  "17260" -> "17258" 
-  "17262" -> "17261" 
-  "17267" -> "17266" 
-  "17272" -> "17270" 
-  "17281" -> "17280" 
-  "17288" -> "17286" 
-  "17290" -> "17289" 
-  "17295" -> "17294" 
-  "17300" -> "17298" 
-  "17308" -> "17307" 
-  "17089" -> "17087" 
-  "17102" -> "17100" 
-  "17255" -> "17253" 
-  "17283" -> "17281" 
-  "17310" -> "17308" 
-  "17080" -> "17089" 
+digraph "BogusMethod" {  
+"17316" [label = <(METHOD,BogusMethod)<SUB>1029</SUB>> ]
+"17318" [label = <(METHOD_RETURN,void)<SUB>1029</SUB>> ]
+  "17316" -> "17318" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/301-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/301-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/301-cfg.dot	2023-06-07 19:35:28.417384331 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/301-cfg.dot	2023-06-07 19:35:34.927383763 +0330
@@ -1,75 +1,11 @@
-digraph "NewObjectArrayBadArguments" {  
-"17318" [label = <(&lt;operator&gt;.assignment,old_check_jni = vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>600</SUB>> ]
-"17327" [label = <(&lt;operator&gt;.assignment,element_class = env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>603</SUB>> ]
-"17334" [label = <(ASSERT_NE,ASSERT_NE(element_class, nullptr))<SUB>604</SUB>> ]
-"17337" [label = <(NewObjectArray,env_-&gt;NewObjectArray(-1, element_class, nullptr))<SUB>606</SUB>> ]
-"17345" [label = <(Check,jni_abort_catcher.Check(check_jni ? &quot;negative jsize: -1&quot; : &quot;negative array length: -1&quot;))<SUB>607</SUB>> ]
-"17353" [label = <(NewObjectArray,env_-&gt;NewObjectArray(std::numeric_limits&lt;jint&gt;::min(), element_class, nullptr))<SUB>609</SUB>> ]
-"17369" [label = <(Check,jni_abort_catcher.Check(check_jni ? &quot;negative jsize: -2147483648&quot;\012 : &quot;negative array length: -2147483648&quot;))<SUB>610</SUB>> ]
-"17377" [label = <(EXPECT_EQ,EXPECT_EQ(check_jni, vm_-&gt;SetCheckJniEnabled(old_check_jni)))<SUB>613</SUB>> ]
-"17320" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(check_jni))<SUB>600</SUB>> ]
-"17329" [label = <(FindClass,env_-&gt;FindClass(&quot;java/lang/String&quot;))<SUB>603</SUB>> ]
-"17338" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewObjectArray)<SUB>606</SUB>> ]
-"17341" [label = <(&lt;operator&gt;.minus,-1)<SUB>606</SUB>> ]
-"17346" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>607</SUB>> ]
-"17349" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;negative jsize: -1&quot; : &quot;negative array length: -1&quot;)<SUB>607</SUB>> ]
-"17354" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewObjectArray)<SUB>609</SUB>> ]
-"17357" [label = <(&lt;operator&gt;.greaterThan,std::numeric_limits&lt;jint&gt;::min())<SUB>609</SUB>> ]
-"17370" [label = <(&lt;operator&gt;.fieldAccess,jni_abort_catcher.Check)<SUB>610</SUB>> ]
-"17373" [label = <(&lt;operator&gt;.conditional,check_jni ? &quot;negative jsize: -2147483648&quot;\012 : &quot;negative array length: -2147483648&quot;)<SUB>610</SUB>> ]
-"17379" [label = <(SetCheckJniEnabled,vm_-&gt;SetCheckJniEnabled(old_check_jni))<SUB>613</SUB>> ]
-"17321" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>600</SUB>> ]
-"17330" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>603</SUB>> ]
-"17340" [label = <(FIELD_IDENTIFIER,NewObjectArray,NewObjectArray)<SUB>606</SUB>> ]
-"17348" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>607</SUB>> ]
-"17356" [label = <(FIELD_IDENTIFIER,NewObjectArray,NewObjectArray)<SUB>609</SUB>> ]
-"17358" [label = <(&lt;operator&gt;.lessThan,std::numeric_limits&lt;jint)<SUB>609</SUB>> ]
-"17363" [label = <(::min,::min())<SUB>609</SUB>> ]
-"17372" [label = <(FIELD_IDENTIFIER,Check,Check)<SUB>610</SUB>> ]
-"17380" [label = <(&lt;operator&gt;.indirectFieldAccess,vm_-&gt;SetCheckJniEnabled)<SUB>613</SUB>> ]
-"17323" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>600</SUB>> ]
-"17332" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>603</SUB>> ]
-"17359" [label = <(&lt;operator&gt;.fieldAccess,std::numeric_limits)<SUB>609</SUB>> ]
-"17364" [label = <(&lt;operator&gt;.fieldAccess,::min)<SUB>609</SUB>> ]
-"17382" [label = <(FIELD_IDENTIFIER,SetCheckJniEnabled,SetCheckJniEnabled)<SUB>613</SUB>> ]
-"17361" [label = <(FIELD_IDENTIFIER,numeric_limits,numeric_limits)<SUB>609</SUB>> ]
-"17366" [label = <(FIELD_IDENTIFIER,min,min)<SUB>609</SUB>> ]
-"17314" [label = <(METHOD,NewObjectArrayBadArguments)<SUB>599</SUB>> ]
-"17384" [label = <(METHOD_RETURN,void)<SUB>599</SUB>> ]
-  "17318" -> "17332" 
-  "17327" -> "17334" 
-  "17334" -> "17340" 
-  "17337" -> "17348" 
-  "17345" -> "17356" 
-  "17353" -> "17372" 
-  "17369" -> "17382" 
-  "17377" -> "17384" 
-  "17320" -> "17318" 
-  "17329" -> "17327" 
-  "17338" -> "17341" 
-  "17341" -> "17337" 
-  "17346" -> "17349" 
-  "17349" -> "17345" 
-  "17354" -> "17361" 
-  "17357" -> "17353" 
-  "17370" -> "17373" 
-  "17373" -> "17369" 
-  "17379" -> "17377" 
-  "17321" -> "17320" 
-  "17330" -> "17329" 
-  "17340" -> "17338" 
-  "17348" -> "17346" 
-  "17356" -> "17354" 
-  "17358" -> "17366" 
-  "17363" -> "17357" 
-  "17372" -> "17370" 
-  "17380" -> "17379" 
-  "17323" -> "17321" 
-  "17332" -> "17330" 
-  "17359" -> "17358" 
-  "17364" -> "17363" 
-  "17382" -> "17380" 
-  "17361" -> "17359" 
-  "17366" -> "17364" 
-  "17314" -> "17323" 
+digraph "Java_MyClassNatives_foo_exit" {  
+"17384" [label = <(MonitorExit,env-&gt;MonitorExit(thisObj))<SUB>2358</SUB>> ]
+"17385" [label = <(&lt;operator&gt;.indirectFieldAccess,env-&gt;MonitorExit)<SUB>2358</SUB>> ]
+"17387" [label = <(FIELD_IDENTIFIER,MonitorExit,MonitorExit)<SUB>2358</SUB>> ]
+"17380" [label = <(METHOD,Java_MyClassNatives_foo_exit)<SUB>2356</SUB>> ]
+"17389" [label = <(METHOD_RETURN,void)<SUB>2356</SUB>> ]
+  "17384" -> "17389" 
+  "17385" -> "17384" 
+  "17387" -> "17385" 
+  "17380" -> "17387" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/302-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/302-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/302-cfg.dot	2023-06-07 19:35:28.417384331 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/302-cfg.dot	2023-06-07 19:35:34.927383763 +0330
@@ -1,270 +1,11 @@
-digraph "SetUpForTest" {  
-"17514" [label = <(&lt;operator&gt;.assignment,env_ = Thread::Current()-&gt;GetJniEnv())<SUB>640</SUB>> ]
-"17523" [label = <(&lt;operator&gt;.assignment,jklass_ = env_-&gt;FindClass(&quot;MyClassNatives&quot;))<SUB>641</SUB>> ]
-"17530" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(jklass_ != nullptr) &lt;&lt; method_name &lt;&lt; &quot; &quot; &lt;&lt; method_sig)<SUB>642</SUB>> ]
-"17563" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(jmethod_ != nullptr) &lt;&lt; method_name &lt;&lt; &quot; &quot; &lt;&lt; method_sig)<SUB>649</SUB>> ]
-"17609" [label = <(&lt;operator&gt;.assignment,constructor = env_-&gt;GetMethodID(jklass_, &quot;&lt;init&gt;&quot;, &quot;()V&quot;))<SUB>659</SUB>> ]
-"17618" [label = <(&lt;operator&gt;.assignment,jobj_ = env_-&gt;NewObject(jklass_, constructor))<SUB>660</SUB>> ]
-"17626" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(jobj_ != nullptr) &lt;&lt; method_name &lt;&lt; &quot; &quot; &lt;&lt; method_sig)<SUB>661</SUB>> ]
-"17393" [label = <(&lt;operator&gt;.logicalNot,!runtime_-&gt;IsStarted())<SUB>620</SUB>> ]
-"17516" [label = <(GetJniEnv,Thread::Current()-&gt;GetJniEnv())<SUB>640</SUB>> ]
-"17525" [label = <(FindClass,env_-&gt;FindClass(&quot;MyClassNatives&quot;))<SUB>641</SUB>> ]
-"17531" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(jklass_ != nullptr) &lt;&lt; method_name &lt;&lt; &quot; &quot;)<SUB>642</SUB>> ]
-"17564" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(jmethod_ != nullptr) &lt;&lt; method_name &lt;&lt; &quot; &quot;)<SUB>649</SUB>> ]
-"17574" [label = <(&lt;operator&gt;.notEquals,native_fnptr != nullptr)<SUB>651</SUB>> ]
-"17611" [label = <(GetMethodID,env_-&gt;GetMethodID(jklass_, &quot;&lt;init&gt;&quot;, &quot;()V&quot;))<SUB>659</SUB>> ]
-"17620" [label = <(NewObject,env_-&gt;NewObject(jklass_, constructor))<SUB>660</SUB>> ]
-"17627" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(jobj_ != nullptr) &lt;&lt; method_name &lt;&lt; &quot; &quot;)<SUB>661</SUB>> ]
-"17394" [label = <(IsStarted,runtime_-&gt;IsStarted())<SUB>620</SUB>> ]
-"17498" [label = <(TransitionFromSuspendedToRunnable,Thread::Current()-&gt;TransitionFromSuspendedToRunnable())<SUB>635</SUB>> ]
-"17506" [label = <(&lt;operator&gt;.assignment,started = runtime_-&gt;Start())<SUB>636</SUB>> ]
-"17512" [label = <(CHECK,CHECK(started))<SUB>637</SUB>> ]
-"17517" [label = <(&lt;operator&gt;.indirectFieldAccess,Thread::Current()-&gt;GetJniEnv)<SUB>640</SUB>> ]
-"17526" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;FindClass)<SUB>641</SUB>> ]
-"17532" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(jklass_ != nullptr) &lt;&lt; method_name)<SUB>642</SUB>> ]
-"17543" [label = <(&lt;operator&gt;.assignment,jmethod_ = env_-&gt;GetStaticMethodID(jklass_, method_name, method_sig))<SUB>645</SUB>> ]
-"17565" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(jmethod_ != nullptr) &lt;&lt; method_name)<SUB>649</SUB>> ]
-"17579" [label = <(&lt;operator&gt;.assignment,methods[] = { { method_name, method_sig, native_fnptr } })<SUB>652</SUB>> ]
-"17586" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_EQ(JNI_OK, env_-&gt;RegisterNatives(jklass_, methods, 1))\012 &lt;&lt; method_name &lt;&lt; &quot; &quot; &lt;&lt; method_sig)<SUB>653</SUB>> ]
-"17612" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetMethodID)<SUB>659</SUB>> ]
-"17621" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;NewObject)<SUB>660</SUB>> ]
-"17628" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(jobj_ != nullptr) &lt;&lt; method_name)<SUB>661</SUB>> ]
-"17395" [label = <(&lt;operator&gt;.indirectFieldAccess,runtime_-&gt;IsStarted)<SUB>620</SUB>> ]
-"17401" [label = <(soa,soa(Thread::Current()))<SUB>622</SUB>> ]
-"17406" [label = <(&lt;operator&gt;.assignment,class_loader_ = LoadDex(&quot;MyClassNatives&quot;))<SUB>623</SUB>> ]
-"17410" [label = <(&lt;operator&gt;.greaterThan,StackHandleScope&lt;1&gt; hs(soa.Self()))<SUB>624</SUB>> ]
-"17419" [label = <(&lt;operator&gt;.greaterThan,Handle&lt;mirror::ClassLoader&gt; loader(\012            hs.NewHandle(soa.Decode&lt;mirror::ClassLoader&gt;(class_loader_))))<SUB>625</SUB>> ]
-"17439" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c = class_linker_-&gt;FindClass(soa.Self(), &quot;LMyClassNatives;&quot;, loader))<SUB>627</SUB>> ]
-"17458" [label = <(&lt;operator&gt;.assignment,pointer_size = class_linker_-&gt;GetImagePointerSize())<SUB>628</SUB>> ]
-"17465" [label = <(&lt;operator&gt;.assignment,* method = c-&gt;FindClassMethod(method_name, method_sig, pointer_size))<SUB>629</SUB>> ]
-"17474" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(method != nullptr) &lt;&lt; method_name &lt;&lt; &quot; &quot; &lt;&lt; method_sig)<SUB>630</SUB>> ]
-"17484" [label = <(ASSERT_EQ,ASSERT_EQ(direct, method-&gt;IsDirect()))<SUB>631</SUB>> ]
-"17490" [label = <(SetEntryPointFromQuickCompiledCode,method-&gt;SetEntryPointFromQuickCompiledCode(class_linker_-&gt;GetRuntimeQuickGenericJniStub()))<SUB>632</SUB>> ]
-"17499" [label = <(&lt;operator&gt;.indirectFieldAccess,Thread::Current()-&gt;TransitionFromSuspendedToRunnable)<SUB>635</SUB>> ]
-"17508" [label = <(Start,runtime_-&gt;Start())<SUB>636</SUB>> ]
-"17518" [label = <(Thread::Current,Thread::Current())<SUB>640</SUB>> ]
-"17522" [label = <(FIELD_IDENTIFIER,GetJniEnv,GetJniEnv)<SUB>640</SUB>> ]
-"17528" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>641</SUB>> ]
-"17533" [label = <(ASSERT_TRUE,ASSERT_TRUE(jklass_ != nullptr))<SUB>642</SUB>> ]
-"17545" [label = <(GetStaticMethodID,env_-&gt;GetStaticMethodID(jklass_, method_name, method_sig))<SUB>645</SUB>> ]
-"17554" [label = <(&lt;operator&gt;.assignment,jmethod_ = env_-&gt;GetMethodID(jklass_, method_name, method_sig))<SUB>647</SUB>> ]
-"17566" [label = <(ASSERT_TRUE,ASSERT_TRUE(jmethod_ != nullptr))<SUB>649</SUB>> ]
-"17581" [label = <(&lt;operator&gt;.arrayInitializer,{ { method_name, method_sig, native_fnptr } })<SUB>652</SUB>> ]
-"17587" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_EQ(JNI_OK, env_-&gt;RegisterNatives(jklass_, methods, 1))\012 &lt;&lt; method_name &lt;&lt; &quot; &quot;)<SUB>653</SUB>> ]
-"17603" [label = <(UnregisterNatives,env_-&gt;UnregisterNatives(jklass_))<SUB>656</SUB>> ]
-"17614" [label = <(FIELD_IDENTIFIER,GetMethodID,GetMethodID)<SUB>659</SUB>> ]
-"17623" [label = <(FIELD_IDENTIFIER,NewObject,NewObject)<SUB>660</SUB>> ]
-"17629" [label = <(ASSERT_TRUE,ASSERT_TRUE(jobj_ != nullptr))<SUB>661</SUB>> ]
-"17397" [label = <(FIELD_IDENTIFIER,IsStarted,IsStarted)<SUB>620</SUB>> ]
-"17402" [label = <(Thread::Current,Thread::Current())<SUB>622</SUB>> ]
-"17408" [label = <(LoadDex,LoadDex(&quot;MyClassNatives&quot;))<SUB>623</SUB>> ]
-"17411" [label = <(&lt;operator&gt;.lessThan,StackHandleScope&lt;1)<SUB>624</SUB>> ]
-"17414" [label = <(hs,hs(soa.Self()))<SUB>624</SUB>> ]
-"17420" [label = <(&lt;operator&gt;.lessThan,Handle&lt;mirror::ClassLoader)<SUB>625</SUB>> ]
-"17425" [label = <(loader,loader(\012            hs.NewHandle(soa.Decode&lt;mirror::ClassLoader&gt;(class_loader_))))<SUB>625</SUB>> ]
-"17440" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c)<SUB>627</SUB>> ]
-"17447" [label = <(FindClass,class_linker_-&gt;FindClass(soa.Self(), &quot;LMyClassNatives;&quot;, loader))<SUB>627</SUB>> ]
-"17460" [label = <(GetImagePointerSize,class_linker_-&gt;GetImagePointerSize())<SUB>628</SUB>> ]
-"17467" [label = <(FindClassMethod,c-&gt;FindClassMethod(method_name, method_sig, pointer_size))<SUB>629</SUB>> ]
-"17475" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(method != nullptr) &lt;&lt; method_name &lt;&lt; &quot; &quot;)<SUB>630</SUB>> ]
-"17486" [label = <(IsDirect,method-&gt;IsDirect())<SUB>631</SUB>> ]
-"17491" [label = <(&lt;operator&gt;.indirectFieldAccess,method-&gt;SetEntryPointFromQuickCompiledCode)<SUB>632</SUB>> ]
-"17494" [label = <(GetRuntimeQuickGenericJniStub,class_linker_-&gt;GetRuntimeQuickGenericJniStub())<SUB>632</SUB>> ]
-"17500" [label = <(Thread::Current,Thread::Current())<SUB>635</SUB>> ]
-"17504" [label = <(FIELD_IDENTIFIER,TransitionFromSuspendedToRunnable,TransitionFromSuspendedToRunnable)<SUB>635</SUB>> ]
-"17509" [label = <(&lt;operator&gt;.indirectFieldAccess,runtime_-&gt;Start)<SUB>636</SUB>> ]
-"17519" [label = <(&lt;operator&gt;.fieldAccess,Thread::Current)<SUB>640</SUB>> ]
-"17534" [label = <(&lt;operator&gt;.notEquals,jklass_ != nullptr)<SUB>642</SUB>> ]
-"17546" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetStaticMethodID)<SUB>645</SUB>> ]
-"17556" [label = <(GetMethodID,env_-&gt;GetMethodID(jklass_, method_name, method_sig))<SUB>647</SUB>> ]
-"17567" [label = <(&lt;operator&gt;.notEquals,jmethod_ != nullptr)<SUB>649</SUB>> ]
-"17582" [label = <(&lt;operator&gt;.arrayInitializer,{ method_name, method_sig, native_fnptr })<SUB>652</SUB>> ]
-"17588" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_EQ(JNI_OK, env_-&gt;RegisterNatives(jklass_, methods, 1))\012 &lt;&lt; method_name)<SUB>653</SUB>> ]
-"17604" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;UnregisterNatives)<SUB>656</SUB>> ]
-"17630" [label = <(&lt;operator&gt;.notEquals,jobj_ != nullptr)<SUB>661</SUB>> ]
-"17403" [label = <(&lt;operator&gt;.fieldAccess,Thread::Current)<SUB>622</SUB>> ]
-"17415" [label = <(Self,soa.Self())<SUB>624</SUB>> ]
-"17422" [label = <(&lt;operator&gt;.fieldAccess,mirror::ClassLoader)<SUB>625</SUB>> ]
-"17426" [label = <(NewHandle,hs.NewHandle(soa.Decode&lt;mirror::ClassLoader&gt;(class_loader_)))<SUB>626</SUB>> ]
-"17441" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>627</SUB>> ]
-"17448" [label = <(&lt;operator&gt;.indirectFieldAccess,class_linker_-&gt;FindClass)<SUB>627</SUB>> ]
-"17451" [label = <(Self,soa.Self())<SUB>627</SUB>> ]
-"17461" [label = <(&lt;operator&gt;.indirectFieldAccess,class_linker_-&gt;GetImagePointerSize)<SUB>628</SUB>> ]
-"17468" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;FindClassMethod)<SUB>629</SUB>> ]
-"17476" [label = <(&lt;operator&gt;.shiftLeft,ASSERT_TRUE(method != nullptr) &lt;&lt; method_name)<SUB>630</SUB>> ]
-"17487" [label = <(&lt;operator&gt;.indirectFieldAccess,method-&gt;IsDirect)<SUB>631</SUB>> ]
-"17493" [label = <(FIELD_IDENTIFIER,SetEntryPointFromQuickCompiledCode,SetEntryPointFromQuickCompiledCode)<SUB>632</SUB>> ]
-"17495" [label = <(&lt;operator&gt;.indirectFieldAccess,class_linker_-&gt;GetRuntimeQuickGenericJniStub)<SUB>632</SUB>> ]
-"17501" [label = <(&lt;operator&gt;.fieldAccess,Thread::Current)<SUB>635</SUB>> ]
-"17511" [label = <(FIELD_IDENTIFIER,Start,Start)<SUB>636</SUB>> ]
-"17521" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>640</SUB>> ]
-"17548" [label = <(FIELD_IDENTIFIER,GetStaticMethodID,GetStaticMethodID)<SUB>645</SUB>> ]
-"17557" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;GetMethodID)<SUB>647</SUB>> ]
-"17589" [label = <(ASSERT_EQ,ASSERT_EQ(JNI_OK, env_-&gt;RegisterNatives(jklass_, methods, 1)))<SUB>653</SUB>> ]
-"17606" [label = <(FIELD_IDENTIFIER,UnregisterNatives,UnregisterNatives)<SUB>656</SUB>> ]
-"17405" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>622</SUB>> ]
-"17416" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>624</SUB>> ]
-"17424" [label = <(FIELD_IDENTIFIER,ClassLoader,ClassLoader)<SUB>625</SUB>> ]
-"17427" [label = <(&lt;operator&gt;.fieldAccess,hs.NewHandle)<SUB>626</SUB>> ]
-"17430" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::ClassLoader&gt;(class_loader_))<SUB>626</SUB>> ]
-"17443" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>627</SUB>> ]
-"17450" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>627</SUB>> ]
-"17452" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>627</SUB>> ]
-"17463" [label = <(FIELD_IDENTIFIER,GetImagePointerSize,GetImagePointerSize)<SUB>628</SUB>> ]
-"17470" [label = <(FIELD_IDENTIFIER,FindClassMethod,FindClassMethod)<SUB>629</SUB>> ]
-"17477" [label = <(ASSERT_TRUE,ASSERT_TRUE(method != nullptr))<SUB>630</SUB>> ]
-"17489" [label = <(FIELD_IDENTIFIER,IsDirect,IsDirect)<SUB>631</SUB>> ]
-"17497" [label = <(FIELD_IDENTIFIER,GetRuntimeQuickGenericJniStub,GetRuntimeQuickGenericJniStub)<SUB>632</SUB>> ]
-"17503" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>635</SUB>> ]
-"17559" [label = <(FIELD_IDENTIFIER,GetMethodID,GetMethodID)<SUB>647</SUB>> ]
-"17591" [label = <(RegisterNatives,env_-&gt;RegisterNatives(jklass_, methods, 1))<SUB>653</SUB>> ]
-"17418" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>624</SUB>> ]
-"17429" [label = <(FIELD_IDENTIFIER,NewHandle,NewHandle)<SUB>626</SUB>> ]
-"17431" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::ClassLoader)<SUB>626</SUB>> ]
-"17445" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>627</SUB>> ]
-"17454" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>627</SUB>> ]
-"17478" [label = <(&lt;operator&gt;.notEquals,method != nullptr)<SUB>630</SUB>> ]
-"17592" [label = <(&lt;operator&gt;.indirectFieldAccess,env_-&gt;RegisterNatives)<SUB>653</SUB>> ]
-"17432" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>626</SUB>> ]
-"17435" [label = <(&lt;operator&gt;.fieldAccess,mirror::ClassLoader)<SUB>626</SUB>> ]
-"17594" [label = <(FIELD_IDENTIFIER,RegisterNatives,RegisterNatives)<SUB>653</SUB>> ]
-"17434" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>626</SUB>> ]
-"17437" [label = <(FIELD_IDENTIFIER,ClassLoader,ClassLoader)<SUB>626</SUB>> ]
-"17386" [label = <(METHOD,SetUpForTest)<SUB>616</SUB>> ]
-"17636" [label = <(METHOD_RETURN,void)<SUB>616</SUB>> ]
-  "17514" -> "17528" 
-  "17523" -> "17534" 
-  "17530" -> "17548" 
-  "17530" -> "17559" 
-  "17563" -> "17574" 
-  "17609" -> "17623" 
-  "17618" -> "17630" 
-  "17626" -> "17636" 
-  "17393" -> "17405" 
-  "17393" -> "17521" 
-  "17516" -> "17514" 
-  "17525" -> "17523" 
-  "17531" -> "17530" 
-  "17564" -> "17563" 
-  "17574" -> "17582" 
-  "17574" -> "17606" 
-  "17611" -> "17609" 
-  "17620" -> "17618" 
-  "17627" -> "17626" 
-  "17394" -> "17393" 
-  "17498" -> "17511" 
-  "17506" -> "17512" 
-  "17512" -> "17521" 
-  "17517" -> "17516" 
-  "17526" -> "17525" 
-  "17532" -> "17531" 
-  "17543" -> "17567" 
-  "17565" -> "17564" 
-  "17579" -> "17594" 
-  "17586" -> "17614" 
-  "17612" -> "17611" 
-  "17621" -> "17620" 
-  "17628" -> "17627" 
-  "17395" -> "17394" 
-  "17401" -> "17408" 
-  "17406" -> "17411" 
-  "17410" -> "17424" 
-  "17419" -> "17445" 
-  "17439" -> "17463" 
-  "17458" -> "17470" 
-  "17465" -> "17478" 
-  "17474" -> "17489" 
-  "17484" -> "17493" 
-  "17490" -> "17503" 
-  "17499" -> "17498" 
-  "17508" -> "17506" 
-  "17518" -> "17522" 
-  "17522" -> "17517" 
-  "17528" -> "17526" 
-  "17533" -> "17532" 
-  "17545" -> "17543" 
-  "17554" -> "17567" 
-  "17566" -> "17565" 
-  "17581" -> "17579" 
-  "17587" -> "17586" 
-  "17603" -> "17614" 
-  "17614" -> "17612" 
-  "17623" -> "17621" 
-  "17629" -> "17628" 
-  "17397" -> "17395" 
-  "17402" -> "17401" 
-  "17408" -> "17406" 
-  "17411" -> "17418" 
-  "17414" -> "17410" 
-  "17420" -> "17429" 
-  "17425" -> "17419" 
-  "17440" -> "17450" 
-  "17447" -> "17439" 
-  "17460" -> "17458" 
-  "17467" -> "17465" 
-  "17475" -> "17474" 
-  "17486" -> "17484" 
-  "17491" -> "17497" 
-  "17494" -> "17490" 
-  "17500" -> "17504" 
-  "17504" -> "17499" 
-  "17509" -> "17508" 
-  "17519" -> "17518" 
-  "17534" -> "17533" 
-  "17546" -> "17545" 
-  "17556" -> "17554" 
-  "17567" -> "17566" 
-  "17582" -> "17581" 
-  "17588" -> "17587" 
-  "17604" -> "17603" 
-  "17630" -> "17629" 
-  "17403" -> "17402" 
-  "17415" -> "17414" 
-  "17422" -> "17420" 
-  "17426" -> "17425" 
-  "17441" -> "17440" 
-  "17448" -> "17454" 
-  "17451" -> "17447" 
-  "17461" -> "17460" 
-  "17468" -> "17467" 
-  "17476" -> "17475" 
-  "17487" -> "17486" 
-  "17493" -> "17491" 
-  "17495" -> "17494" 
-  "17501" -> "17500" 
-  "17511" -> "17509" 
-  "17521" -> "17519" 
-  "17548" -> "17546" 
-  "17557" -> "17556" 
-  "17589" -> "17588" 
-  "17606" -> "17604" 
-  "17405" -> "17403" 
-  "17416" -> "17415" 
-  "17424" -> "17422" 
-  "17427" -> "17434" 
-  "17430" -> "17426" 
-  "17443" -> "17441" 
-  "17450" -> "17448" 
-  "17452" -> "17451" 
-  "17463" -> "17461" 
-  "17470" -> "17468" 
-  "17477" -> "17476" 
-  "17489" -> "17487" 
-  "17497" -> "17495" 
-  "17503" -> "17501" 
-  "17559" -> "17557" 
-  "17591" -> "17589" 
-  "17418" -> "17416" 
-  "17429" -> "17427" 
-  "17431" -> "17430" 
-  "17445" -> "17443" 
-  "17454" -> "17452" 
-  "17478" -> "17477" 
-  "17592" -> "17591" 
-  "17432" -> "17437" 
-  "17435" -> "17431" 
-  "17594" -> "17592" 
-  "17434" -> "17432" 
-  "17437" -> "17435" 
-  "17386" -> "17397" 
+digraph "Java_MyClassNatives_foo_enter_no_exit" {  
+"17396" [label = <(MonitorEnter,env-&gt;MonitorEnter(thisObj))<SUB>2375</SUB>> ]
+"17397" [label = <(&lt;operator&gt;.indirectFieldAccess,env-&gt;MonitorEnter)<SUB>2375</SUB>> ]
+"17399" [label = <(FIELD_IDENTIFIER,MonitorEnter,MonitorEnter)<SUB>2375</SUB>> ]
+"17392" [label = <(METHOD,Java_MyClassNatives_foo_enter_no_exit)<SUB>2373</SUB>> ]
+"17401" [label = <(METHOD_RETURN,void)<SUB>2373</SUB>> ]
+  "17396" -> "17401" 
+  "17397" -> "17396" 
+  "17399" -> "17397" 
+  "17392" -> "17399" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/303-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/303-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/303-cfg.dot	2023-06-07 19:35:28.417384331 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/303-cfg.dot	2023-06-07 19:35:34.927383763 +0330
@@ -1,25 +1,85 @@
-digraph "GetLocalsCapacity" {  
-"17661" [label = <(soa,soa(Thread::Current()))<SUB>936</SUB>> ]
-"17666" [label = <(RETURN,return reinterpret_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetLocalsCapacity();,return reinterpret_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetLocalsCapacity();)<SUB>937</SUB>> ]
-"17662" [label = <(Thread::Current,Thread::Current())<SUB>936</SUB>> ]
-"17667" [label = <(GetLocalsCapacity,reinterpret_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetLocalsCapacity())<SUB>937</SUB>> ]
-"17663" [label = <(&lt;operator&gt;.fieldAccess,Thread::Current)<SUB>936</SUB>> ]
-"17668" [label = <(&lt;operator&gt;.indirectFieldAccess,reinterpret_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetLocalsCapacity)<SUB>937</SUB>> ]
-"17665" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>936</SUB>> ]
-"17669" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;JNIEnvExt*&gt;(env))<SUB>937</SUB>> ]
-"17672" [label = <(FIELD_IDENTIFIER,GetLocalsCapacity,GetLocalsCapacity)<SUB>937</SUB>> ]
-"17670" [label = <(UNKNOWN,JNIEnvExt*,JNIEnvExt*)<SUB>937</SUB>> ]
-"17657" [label = <(METHOD,GetLocalsCapacity)<SUB>935</SUB>> ]
-"17673" [label = <(METHOD_RETURN,size_t)<SUB>935</SUB>> ]
-  "17661" -> "17670" 
-  "17666" -> "17673" 
-  "17662" -> "17661" 
-  "17667" -> "17666" 
-  "17663" -> "17662" 
-  "17668" -> "17667" 
-  "17665" -> "17663" 
-  "17669" -> "17672" 
-  "17672" -> "17668" 
-  "17670" -> "17669" 
-  "17657" -> "17665" 
+digraph "IsLocked" {  
+"17409" [label = <(soa,soa(env))<SUB>2391</SUB>> ]
+"17412" [label = <(&lt;operator&gt;.assignment,lock_word = soa.Decode&lt;mirror::Object&gt;(jobj)-&gt;GetLockWord(true))<SUB>2392</SUB>> ]
+"17414" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(jobj)-&gt;GetLockWord(true))<SUB>2392</SUB>> ]
+"17428" [label = <(GetState,lock_word.GetState())<SUB>2393</SUB>> ]
+"17415" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>2392</SUB>> ]
+"17422" [label = <(GetLockWord,(jobj)-&gt;GetLockWord(true))<SUB>2392</SUB>> ]
+"17429" [label = <(&lt;operator&gt;.fieldAccess,lock_word.GetState)<SUB>2393</SUB>> ]
+"17434" [label = <(&lt;operator&gt;.fieldAccess,LockWord::kHashCode)<SUB>2394</SUB>> ]
+"17438" [label = <(&lt;operator&gt;.fieldAccess,LockWord::kUnlocked)<SUB>2395</SUB>> ]
+"17441" [label = <(RETURN,return false;,return false;)<SUB>2396</SUB>> ]
+"17444" [label = <(&lt;operator&gt;.fieldAccess,LockWord::kThinLocked)<SUB>2397</SUB>> ]
+"17447" [label = <(RETURN,return true;,return true;)<SUB>2398</SUB>> ]
+"17450" [label = <(&lt;operator&gt;.fieldAccess,LockWord::kFatLocked)<SUB>2399</SUB>> ]
+"17453" [label = <(RETURN,return lock_word.FatLockMonitor()-&gt;IsLocked();,return lock_word.FatLockMonitor()-&gt;IsLocked();)<SUB>2400</SUB>> ]
+"17416" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2392</SUB>> ]
+"17419" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2392</SUB>> ]
+"17423" [label = <(&lt;operator&gt;.indirectFieldAccess,(jobj)-&gt;GetLockWord)<SUB>2392</SUB>> ]
+"17431" [label = <(FIELD_IDENTIFIER,GetState,GetState)<SUB>2393</SUB>> ]
+"17436" [label = <(FIELD_IDENTIFIER,kHashCode,kHashCode)<SUB>2394</SUB>> ]
+"17440" [label = <(FIELD_IDENTIFIER,kUnlocked,kUnlocked)<SUB>2395</SUB>> ]
+"17446" [label = <(FIELD_IDENTIFIER,kThinLocked,kThinLocked)<SUB>2397</SUB>> ]
+"17452" [label = <(FIELD_IDENTIFIER,kFatLocked,kFatLocked)<SUB>2399</SUB>> ]
+"17454" [label = <(IsLocked,lock_word.FatLockMonitor()-&gt;IsLocked())<SUB>2400</SUB>> ]
+"17463" [label = <(&lt;operator&gt;.shiftLeft,LOG(FATAL) &lt;&lt; &quot;Invalid monitor state &quot; &lt;&lt; lock_word.GetState())<SUB>2402</SUB>> ]
+"17472" [label = <(UNREACHABLE,UNREACHABLE())<SUB>2403</SUB>> ]
+"17418" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2392</SUB>> ]
+"17421" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2392</SUB>> ]
+"17425" [label = <(FIELD_IDENTIFIER,GetLockWord,GetLockWord)<SUB>2392</SUB>> ]
+"17455" [label = <(&lt;operator&gt;.indirectFieldAccess,lock_word.FatLockMonitor()-&gt;IsLocked)<SUB>2400</SUB>> ]
+"17464" [label = <(&lt;operator&gt;.shiftLeft,LOG(FATAL) &lt;&lt; &quot;Invalid monitor state &quot;)<SUB>2402</SUB>> ]
+"17468" [label = <(GetState,lock_word.GetState())<SUB>2402</SUB>> ]
+"17456" [label = <(FatLockMonitor,lock_word.FatLockMonitor())<SUB>2400</SUB>> ]
+"17460" [label = <(FIELD_IDENTIFIER,IsLocked,IsLocked)<SUB>2400</SUB>> ]
+"17465" [label = <(LOG,LOG(FATAL))<SUB>2402</SUB>> ]
+"17469" [label = <(&lt;operator&gt;.fieldAccess,lock_word.GetState)<SUB>2402</SUB>> ]
+"17457" [label = <(&lt;operator&gt;.fieldAccess,lock_word.FatLockMonitor)<SUB>2400</SUB>> ]
+"17471" [label = <(FIELD_IDENTIFIER,GetState,GetState)<SUB>2402</SUB>> ]
+"17459" [label = <(FIELD_IDENTIFIER,FatLockMonitor,FatLockMonitor)<SUB>2400</SUB>> ]
+"17404" [label = <(METHOD,IsLocked)<SUB>2390</SUB>> ]
+"17473" [label = <(METHOD_RETURN,bool)<SUB>2390</SUB>> ]
+  "17409" -> "17418" 
+  "17412" -> "17431" 
+  "17414" -> "17412" 
+  "17428" -> "17436" 
+  "17428" -> "17440" 
+  "17428" -> "17446" 
+  "17428" -> "17452" 
+  "17428" -> "17465" 
+  "17415" -> "17425" 
+  "17422" -> "17414" 
+  "17429" -> "17428" 
+  "17434" -> "17440" 
+  "17438" -> "17441" 
+  "17441" -> "17473" 
+  "17444" -> "17447" 
+  "17447" -> "17473" 
+  "17450" -> "17459" 
+  "17453" -> "17473" 
+  "17416" -> "17421" 
+  "17419" -> "17415" 
+  "17423" -> "17422" 
+  "17431" -> "17429" 
+  "17436" -> "17434" 
+  "17440" -> "17438" 
+  "17446" -> "17444" 
+  "17452" -> "17450" 
+  "17454" -> "17453" 
+  "17463" -> "17472" 
+  "17472" -> "17473" 
+  "17418" -> "17416" 
+  "17421" -> "17419" 
+  "17425" -> "17423" 
+  "17455" -> "17454" 
+  "17464" -> "17471" 
+  "17468" -> "17463" 
+  "17456" -> "17460" 
+  "17460" -> "17455" 
+  "17465" -> "17464" 
+  "17469" -> "17468" 
+  "17457" -> "17456" 
+  "17471" -> "17469" 
+  "17459" -> "17457" 
+  "17404" -> "17409" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/304-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/304-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/304-cfg.dot	2023-06-07 19:35:28.417384331 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/304-cfg.dot	2023-06-07 19:35:34.927383763 +0330
@@ -1,5 +1,15 @@
-digraph "BogusMethod" {  
-"17677" [label = <(METHOD,BogusMethod)<SUB>1030</SUB>> ]
-"17679" [label = <(METHOD_RETURN,void)<SUB>1030</SUB>> ]
-  "17677" -> "17679" 
+digraph "CountNewGlobalRef" {  
+"17490" [label = <(&lt;operator&gt;.preIncrement,++gGlobalRefCount)<SUB>2488</SUB>> ]
+"17492" [label = <(RETURN,return gOriginalEnv-&gt;NewGlobalRef(env, o);,return gOriginalEnv-&gt;NewGlobalRef(env, o);)<SUB>2489</SUB>> ]
+"17493" [label = <(NewGlobalRef,gOriginalEnv-&gt;NewGlobalRef(env, o))<SUB>2489</SUB>> ]
+"17494" [label = <(&lt;operator&gt;.indirectFieldAccess,gOriginalEnv-&gt;NewGlobalRef)<SUB>2489</SUB>> ]
+"17496" [label = <(FIELD_IDENTIFIER,NewGlobalRef,NewGlobalRef)<SUB>2489</SUB>> ]
+"17486" [label = <(METHOD,CountNewGlobalRef)<SUB>2487</SUB>> ]
+"17499" [label = <(METHOD_RETURN,jobject)<SUB>2487</SUB>> ]
+  "17490" -> "17496" 
+  "17492" -> "17499" 
+  "17493" -> "17492" 
+  "17494" -> "17493" 
+  "17496" -> "17494" 
+  "17486" -> "17490" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/305-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/305-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/305-cfg.dot	2023-06-07 19:35:28.417384331 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/305-cfg.dot	2023-06-07 19:35:34.927383763 +0330
@@ -1,11 +1,7 @@
-digraph "Java_MyClassNatives_foo_exit" {  
-"17746" [label = <(MonitorExit,env-&gt;MonitorExit(thisObj))<SUB>2467</SUB>> ]
-"17747" [label = <(&lt;operator&gt;.indirectFieldAccess,env-&gt;MonitorExit)<SUB>2467</SUB>> ]
-"17749" [label = <(FIELD_IDENTIFIER,MonitorExit,MonitorExit)<SUB>2467</SUB>> ]
-"17742" [label = <(METHOD,Java_MyClassNatives_foo_exit)<SUB>2465</SUB>> ]
-"17751" [label = <(METHOD_RETURN,void)<SUB>2465</SUB>> ]
-  "17746" -> "17751" 
-  "17747" -> "17746" 
-  "17749" -> "17747" 
-  "17742" -> "17749" 
+digraph "&lt;global&gt;" {  
+"17508" [label = <(UNKNOWN,namespace art {\012\012template&lt;class T&gt; class Handle;\012template&lt;class MirrorType&gt; class ObjPtr;\012struct StringOffsets;\012class StubTest_ReadBarrierForRoot_Test;\012\012namespace mirror {\012\012// String Compression\012static constexpr bool kUseStringCompression = true;\012enum class StringCompressionFlag : uint32_t {\012    kCompressed = 0u,\012    kUncompressed = 1u\012};\012\012// C++ mirror of java.lang.String\012class MANAGED String final : public Object {\012 public:\012 // Size of java.lang.String.class.\012 static uint32_t ClassSize(PointerSize pointer_size);\012\012 // Size of an instance of java.lang.String not including its value array.\012 static constexpr uint32_t InstanceSize() {\012 return sizeof(String);\012 }\012\012 static constexpr MemberOffset CountOffset() {\012 return OFFSET_OF_OBJECT_MEMBER(String, count_);\012 }\012\012 static constexpr MemberOffset ValueOffset() {\012 return OFFSET_OF_OBJECT_MEMBER(String, value_);\012 }\012\012 uint16_t* GetValue() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return &amp;value_[0];\012 }\012\012 uint8_t* GetValueCompressed() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return &amp;value_compressed_[0];\012 }\012\012 template&lt;VerifyObjectFlags kVerifyFlags = kDefaultVerifyFlags&gt;\012 size_t SizeOf() REQUIRES_SHARED(Locks::mutator_lock_) {\012 size_t size = sizeof(String);\012 if (IsCompressed()) {\012      size += (sizeof(uint8_t) * GetLength&lt;kVerifyFlags&gt;());\012 } else {\012      size += (sizeof(uint16_t) * GetLength&lt;kVerifyFlags&gt;());\012 }\012 // String.equals() intrinsics assume zero-padding up to kObjectAlignment,\012 // so make sure the zero-padding is actually copied around if GC compaction\012 // chooses to copy only SizeOf() bytes.\012 // http://b/23528461\012 return RoundUp(size, kObjectAlignment);\012 }\012\012 // Taking out the first/uppermost bit because it is not part of actual length value\012 template&lt;VerifyObjectFlags kVerifyFlags = kDefaultVerifyFlags&gt;\012 int32_t GetLength() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return GetLengthFromCount(GetCount&lt;kVerifyFlags&gt;());\012 }\012\012 template&lt;VerifyObjectFlags kVerifyFlags = kDefaultVerifyFlags&gt;\012 int32_t GetCount() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return GetField32&lt;kVerifyFlags&gt;(OFFSET_OF_OBJECT_MEMBER(String, count_));\012 }\012\012 void SetCount(int32_t new_count) REQUIRES_SHARED(Locks::mutator_lock_) {\012 // Count is invariant so use non-transactional mode. Also disable check as we may run inside\012 // a transaction.\012 SetField32&lt;false, false&gt;(OFFSET_OF_OBJECT_MEMBER(String, count_), new_count);\012 }\012\012 int32_t GetHashCode() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // Computes, stores, and returns the hash code.\012 int32_t ComputeHashCode() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 int32_t GetUtfLength() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 uint16_t CharAt(int32_t index) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // Create a new string where all occurences of `old_c` are replaced with `new_c`.\012 // String.doReplace(char, char) is called from String.replace(char, char) when there is a match.\012 static ObjPtr&lt;String&gt; DoReplace(Thread* self, Handle&lt;String&gt; src, uint16_t old_c, uint16_t new_c)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 ObjPtr&lt;String&gt; Intern() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 template &lt;bool kIsInstrumented&gt;\012  ALWAYS_INLINE static ObjPtr&lt;String&gt; AllocFromByteArray(Thread* self,\012 int32_t byte_length,\012 Handle&lt;ByteArray&gt; array,\012 int32_t offset,\012 int32_t high_byte,\012                                                         gc::AllocatorType allocator_type)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 template &lt;bool kIsInstrumented&gt;\012  ALWAYS_INLINE static ObjPtr&lt;String&gt; AllocFromCharArray(Thread* self,\012 int32_t count,\012 Handle&lt;CharArray&gt; array,\012 int32_t offset,\012                                                         gc::AllocatorType allocator_type)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 template &lt;bool kIsInstrumented&gt;\012  ALWAYS_INLINE static ObjPtr&lt;String&gt; AllocFromString(Thread* self,\012 int32_t string_length,\012 Handle&lt;String&gt; string,\012 int32_t offset,\012                                                      gc::AllocatorType allocator_type)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 template &lt;bool kIsInstrumented&gt;\012  ALWAYS_INLINE static ObjPtr&lt;String&gt; AllocEmptyString(Thread* self,\012                                                       gc::AllocatorType allocator_type)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static ObjPtr&lt;String&gt; AllocFromStrings(Thread* self,\012 Handle&lt;String&gt; string,\012 Handle&lt;String&gt; string2)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static ObjPtr&lt;String&gt; AllocFromUtf16(Thread* self,\012 int32_t utf16_length,\012 const uint16_t* utf16_data_in)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static ObjPtr&lt;String&gt; AllocFromModifiedUtf8(Thread* self, const char* utf)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static ObjPtr&lt;String&gt; AllocFromModifiedUtf8(Thread* self,\012 int32_t utf16_length,\012 const char* utf8_data_in,\012 int32_t utf8_length)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static ObjPtr&lt;String&gt; AllocFromModifiedUtf8(Thread* self,\012 int32_t utf16_length,\012 const char* utf8_data_in)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 bool Equals(const char* modified_utf8) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 bool Equals(ObjPtr&lt;String&gt; that) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // Create a modified UTF-8 encoded std::string from a java/lang/String object.\012  std::string ToModifiedUtf8() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 int32_t FastIndexOf(int32_t ch, int32_t start) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 template &lt;typename MemoryType&gt;\012 int32_t FastIndexOf(MemoryType* chars, int32_t ch, int32_t start)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 int32_t CompareTo(ObjPtr&lt;String&gt; other) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 ObjPtr&lt;CharArray&gt; ToCharArray(Thread* self) REQUIRES_SHARED(Locks::mutator_lock_)\012      REQUIRES(!Roles::uninterruptible_);\012\012 void GetChars(int32_t start, int32_t end, Handle&lt;CharArray&gt; array, int32_t index)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 template&lt;VerifyObjectFlags kVerifyFlags = kDefaultVerifyFlags&gt;\012 bool IsCompressed() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return kUseStringCompression &amp;&amp; IsCompressed(GetCount());\012 }\012\012 bool IsValueNull() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 template&lt;typename MemoryType&gt;\012 static bool AllASCII(const MemoryType* chars, const int length);\012\012 static bool DexFileStringAllASCII(const char* chars, const int length);\012\012  ALWAYS_INLINE static bool IsCompressed(int32_t count) {\012 return GetCompressionFlagFromCount(count) == StringCompressionFlag::kCompressed;\012 }\012\012  ALWAYS_INLINE static StringCompressionFlag GetCompressionFlagFromCount(int32_t count) {\012 return kUseStringCompression\012 ? static_cast&lt;StringCompressionFlag&gt;(static_cast&lt;uint32_t&gt;(count) &amp; 1u)\012 : StringCompressionFlag::kUncompressed;\012 }\012\012  ALWAYS_INLINE static int32_t GetLengthFromCount(int32_t count) {\012 return kUseStringCompression ? static_cast&lt;int32_t&gt;(static_cast&lt;uint32_t&gt;(count) &gt;&gt; 1) : count;\012 }\012\012  ALWAYS_INLINE static int32_t GetFlaggedCount(int32_t length, bool compressible) {\012 return kUseStringCompression\012 ? static_cast&lt;int32_t&gt;((static_cast&lt;uint32_t&gt;(length) &lt;&lt; 1) |\012 (static_cast&lt;uint32_t&gt;(compressible\012 ? StringCompressionFlag::kCompressed\012 : StringCompressionFlag::kUncompressed)))\012 : length;\012 }\012\012 // Returns a human-readable equivalent of 'descriptor'. So &quot;I&quot; would be &quot;int&quot;,\012 // &quot;[[I&quot; would be &quot;int[][]&quot;, &quot;[Ljava/lang/String;&quot; would be\012 // &quot;java.lang.String[]&quot;, and so forth.\012 static std::string PrettyStringDescriptor(ObjPtr&lt;mirror::String&gt; descriptor)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012  std::string PrettyStringDescriptor()\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 private:\012 static constexpr bool IsASCII(uint16_t c) {\012 // Valid ASCII characters are in range 1..0x7f. Zero is not considered ASCII\012 // because it would complicate the detection of ASCII strings in Modified-UTF8.\012 return (c - 1u) &lt; 0x7fu;\012 }\012\012 static bool AllASCIIExcept(const uint16_t* chars, int32_t length, uint16_t non_ascii);\012\012 void SetHashCode(int32_t new_hash_code) REQUIRES_SHARED(Locks::mutator_lock_) {\012 // Hash code is invariant so use non-transactional mode. Also disable check as we may run inside\012 // a transaction.\012    DCHECK_EQ(0, GetField32(OFFSET_OF_OBJECT_MEMBER(String, hash_code_)));\012 SetField32&lt;false, false&gt;(OFFSET_OF_OBJECT_MEMBER(String, hash_code_), new_hash_code);\012 }\012\012 template &lt;bool kIsInstrumented, typename PreFenceVisitor&gt;\012  ALWAYS_INLINE static ObjPtr&lt;String&gt; Alloc(Thread* self,\012 int32_t utf16_length_with_flag,\012                                            gc::AllocatorType allocator_type,\012 const PreFenceVisitor&amp; pre_fence_visitor)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 // Field order required by test &quot;ValidateFieldOrderOfJavaCppUnionClasses&quot;.\012\012 // If string compression is enabled, count_ holds the StringCompressionFlag in the\012 // least significant bit and the length in the remaining bits, length = count_ &gt;&gt; 1.\012 int32_t count_;\012\012 uint32_t hash_code_;\012\012 // Compression of all-ASCII into 8-bit memory leads to usage one of these fields\012 union {\012 uint16_t value_[0];\012 uint8_t value_compressed_[0];\012 };\012\012 friend struct art::StringOffsets; // for verifying offset information\012\012  DISALLOW_IMPLICIT_CONSTRUCTORS(String);\012};\012\012} // namespace mirror\012},namespace art {\012\012template&lt;class T&gt; class Handle;\012template&lt;class MirrorType&gt; class ObjPtr;\012struct StringOffsets;\012class StubTest_ReadBarrierForRoot_Test;\012\012namespace mirror {\012\012// String Compression\012static constexpr bool kUseStringCompression = true;\012enum class StringCompressionFlag : uint32_t {\012    kCompressed = 0u,\012    kUncompressed = 1u\012};\012\012// C++ mirror of java.lang.String\012class MANAGED String final : public Object {\012 public:\012 // Size of java.lang.String.class.\012 static uint32_t ClassSize(PointerSize pointer_size);\012\012 // Size of an instance of java.lang.String not including its value array.\012 static constexpr uint32_t InstanceSize() {\012 return sizeof(String);\012 }\012\012 static constexpr MemberOffset CountOffset() {\012 return OFFSET_OF_OBJECT_MEMBER(String, count_);\012 }\012\012 static constexpr MemberOffset ValueOffset() {\012 return OFFSET_OF_OBJECT_MEMBER(String, value_);\012 }\012\012 uint16_t* GetValue() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return &amp;value_[0];\012 }\012\012 uint8_t* GetValueCompressed() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return &amp;value_compressed_[0];\012 }\012\012 template&lt;VerifyObjectFlags kVerifyFlags = kDefaultVerifyFlags&gt;\012 size_t SizeOf() REQUIRES_SHARED(Locks::mutator_lock_) {\012 size_t size = sizeof(String);\012 if (IsCompressed()) {\012      size += (sizeof(uint8_t) * GetLength&lt;kVerifyFlags&gt;());\012 } else {\012      size += (sizeof(uint16_t) * GetLength&lt;kVerifyFlags&gt;());\012 }\012 // String.equals() intrinsics assume zero-padding up to kObjectAlignment,\012 // so make sure the zero-padding is actually copied around if GC compaction\012 // chooses to copy only SizeOf() bytes.\012 // http://b/23528461\012 return RoundUp(size, kObjectAlignment);\012 }\012\012 // Taking out the first/uppermost bit because it is not part of actual length value\012 template&lt;VerifyObjectFlags kVerifyFlags = kDefaultVerifyFlags&gt;\012 int32_t GetLength() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return GetLengthFromCount(GetCount&lt;kVerifyFlags&gt;());\012 }\012\012 template&lt;VerifyObjectFlags kVerifyFlags = kDefaultVerifyFlags&gt;\012 int32_t GetCount() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return GetField32&lt;kVerifyFlags&gt;(OFFSET_OF_OBJECT_MEMBER(String, count_));\012 }\012\012 void SetCount(int32_t new_count) REQUIRES_SHARED(Locks::mutator_lock_) {\012 // Count is invariant so use non-transactional mode. Also disable check as we may run inside\012 // a transaction.\012 SetField32&lt;false, false&gt;(OFFSET_OF_OBJECT_MEMBER(String, count_), new_count);\012 }\012\012 int32_t GetHashCode() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // Computes, stores, and returns the hash code.\012 int32_t ComputeHashCode() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 int32_t GetUtfLength() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 uint16_t CharAt(int32_t index) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // Create a new string where all occurences of `old_c` are replaced with `new_c`.\012 // String.doReplace(char, char) is called from String.replace(char, char) when there is a match.\012 static ObjPtr&lt;String&gt; DoReplace(Thread* self, Handle&lt;String&gt; src, uint16_t old_c, uint16_t new_c)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 ObjPtr&lt;String&gt; Intern() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 template &lt;bool kIsInstrumented&gt;\012  ALWAYS_INLINE static ObjPtr&lt;String&gt; AllocFromByteArray(Thread* self,\012 int32_t byte_length,\012 Handle&lt;ByteArray&gt; array,\012 int32_t offset,\012 int32_t high_byte,\012                                                         gc::AllocatorType allocator_type)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 template &lt;bool kIsInstrumented&gt;\012  ALWAYS_INLINE static ObjPtr&lt;String&gt; AllocFromCharArray(Thread* self,\012 int32_t count,\012 Handle&lt;CharArray&gt; array,\012 int32_t offset,\012                                                         gc::AllocatorType allocator_type)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 template &lt;bool kIsInstrumented&gt;\012  ALWAYS_INLINE static ObjPtr&lt;String&gt; AllocFromString(Thread* self,\012 int32_t string_length,\012 Handle&lt;String&gt; string,\012 int32_t offset,\012                                                      gc::AllocatorType allocator_type)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 template &lt;bool kIsInstrumented&gt;\012  ALWAYS_INLINE static ObjPtr&lt;String&gt; AllocEmptyString(Thread* self,\012                                                       gc::AllocatorType allocator_type)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static ObjPtr&lt;String&gt; AllocFromStrings(Thread* self,\012 Handle&lt;String&gt; string,\012 Handle&lt;String&gt; string2)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static ObjPtr&lt;String&gt; AllocFromUtf16(Thread* self,\012 int32_t utf16_length,\012 const uint16_t* utf16_data_in)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static ObjPtr&lt;String&gt; AllocFromModifiedUtf8(Thread* self, const char* utf)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static ObjPtr&lt;String&gt; AllocFromModifiedUtf8(Thread* self,\012 int32_t utf16_length,\012 const char* utf8_data_in,\012 int32_t utf8_length)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static ObjPtr&lt;String&gt; AllocFromModifiedUtf8(Thread* self,\012 int32_t utf16_length,\012 const char* utf8_data_in)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 bool Equals(const char* modified_utf8) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 bool Equals(ObjPtr&lt;String&gt; that) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // Create a modified UTF-8 encoded std::string from a java/lang/String object.\012  std::string ToModifiedUtf8() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 int32_t FastIndexOf(int32_t ch, int32_t start) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 template &lt;typename MemoryType&gt;\012 int32_t FastIndexOf(MemoryType* chars, int32_t ch, int32_t start)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 int32_t CompareTo(ObjPtr&lt;String&gt; other) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 ObjPtr&lt;CharArray&gt; ToCharArray(Thread* self) REQUIRES_SHARED(Locks::mutator_lock_)\012      REQUIRES(!Roles::uninterruptible_);\012\012 void GetChars(int32_t start, int32_t end, Handle&lt;CharArray&gt; array, int32_t index)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 template&lt;VerifyObjectFlags kVerifyFlags = kDefaultVerifyFlags&gt;\012 bool IsCompressed() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return kUseStringCompression &amp;&amp; IsCompressed(GetCount());\012 }\012\012 bool IsValueNull() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 template&lt;typename MemoryType&gt;\012 static bool AllASCII(const MemoryType* chars, const int length);\012\012 static bool DexFileStringAllASCII(const char* chars, const int length);\012\012  ALWAYS_INLINE static bool IsCompressed(int32_t count) {\012 return GetCompressionFlagFromCount(count) == StringCompressionFlag::kCompressed;\012 }\012\012  ALWAYS_INLINE static StringCompressionFlag GetCompressionFlagFromCount(int32_t count) {\012 return kUseStringCompression\012 ? static_cast&lt;StringCompressionFlag&gt;(static_cast&lt;uint32_t&gt;(count) &amp; 1u)\012 : StringCompressionFlag::kUncompressed;\012 }\012\012  ALWAYS_INLINE static int32_t GetLengthFromCount(int32_t count) {\012 return kUseStringCompression ? static_cast&lt;int32_t&gt;(static_cast&lt;uint32_t&gt;(count) &gt;&gt; 1) : count;\012 }\012\012  ALWAYS_INLINE static int32_t GetFlaggedCount(int32_t length, bool compressible) {\012 return kUseStringCompression\012 ? static_cast&lt;int32_t&gt;((static_cast&lt;uint32_t&gt;(length) &lt;&lt; 1) |\012 (static_cast&lt;uint32_t&gt;(compressible\012 ? StringCompressionFlag::kCompressed\012 : StringCompressionFlag::kUncompressed)))\012 : length;\012 }\012\012 // Returns a human-readable equivalent of 'descriptor'. So &quot;I&quot; would be &quot;int&quot;,\012 // &quot;[[I&quot; would be &quot;int[][]&quot;, &quot;[Ljava/lang/String;&quot; would be\012 // &quot;java.lang.String[]&quot;, and so forth.\012 static std::string PrettyStringDescriptor(ObjPtr&lt;mirror::String&gt; descriptor)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012  std::string PrettyStringDescriptor()\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 private:\012 static constexpr bool IsASCII(uint16_t c) {\012 // Valid ASCII characters are in range 1..0x7f. Zero is not considered ASCII\012 // because it would complicate the detection of ASCII strings in Modified-UTF8.\012 return (c - 1u) &lt; 0x7fu;\012 }\012\012 static bool AllASCIIExcept(const uint16_t* chars, int32_t length, uint16_t non_ascii);\012\012 void SetHashCode(int32_t new_hash_code) REQUIRES_SHARED(Locks::mutator_lock_) {\012 // Hash code is invariant so use non-transactional mode. Also disable check as we may run inside\012 // a transaction.\012    DCHECK_EQ(0, GetField32(OFFSET_OF_OBJECT_MEMBER(String, hash_code_)));\012 SetField32&lt;false, false&gt;(OFFSET_OF_OBJECT_MEMBER(String, hash_code_), new_hash_code);\012 }\012\012 template &lt;bool kIsInstrumented, typename PreFenceVisitor&gt;\012  ALWAYS_INLINE static ObjPtr&lt;String&gt; Alloc(Thread* self,\012 int32_t utf16_length_with_flag,\012                                            gc::AllocatorType allocator_type,\012 const PreFenceVisitor&amp; pre_fence_visitor)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 // Field order required by test &quot;ValidateFieldOrderOfJavaCppUnionClasses&quot;.\012\012 // If string compression is enabled, count_ holds the StringCompressionFlag in the\012 // least significant bit and the length in the remaining bits, length = count_ &gt;&gt; 1.\012 int32_t count_;\012\012 uint32_t hash_code_;\012\012 // Compression of all-ASCII into 8-bit memory leads to usage one of these fields\012 union {\012 uint16_t value_[0];\012 uint8_t value_compressed_[0];\012 };\012\012 friend struct art::StringOffsets; // for verifying offset information\012\012  DISALLOW_IMPLICIT_CONSTRUCTORS(String);\012};\012\012} // namespace mirror\012})<SUB>26</SUB>> ]
+"17506" [label = <(METHOD,&lt;global&gt;)<SUB>1</SUB>> ]
+"17509" [label = <(METHOD_RETURN,ANY)<SUB>1</SUB>> ]
+  "17508" -> "17509" 
+  "17506" -> "17508" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/306-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/306-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/306-cfg.dot	2023-06-07 19:35:28.417384331 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/306-cfg.dot	2023-06-07 19:35:34.937383762 +0330
@@ -1,11 +1,5 @@
-digraph "Java_MyClassNatives_foo_enter_no_exit" {  
-"17758" [label = <(MonitorEnter,env-&gt;MonitorEnter(thisObj))<SUB>2484</SUB>> ]
-"17759" [label = <(&lt;operator&gt;.indirectFieldAccess,env-&gt;MonitorEnter)<SUB>2484</SUB>> ]
-"17761" [label = <(FIELD_IDENTIFIER,MonitorEnter,MonitorEnter)<SUB>2484</SUB>> ]
-"17754" [label = <(METHOD,Java_MyClassNatives_foo_enter_no_exit)<SUB>2482</SUB>> ]
-"17763" [label = <(METHOD_RETURN,void)<SUB>2482</SUB>> ]
-  "17758" -> "17763" 
-  "17759" -> "17758" 
-  "17761" -> "17759" 
-  "17754" -> "17761" 
+digraph "va_end" {  
+"17823" [label = <(METHOD,va_end)> ]
+"17826" [label = <(METHOD_RETURN,ANY)> ]
+  "17823" -> "17826" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/307-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/307-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/307-cfg.dot	2023-06-07 19:35:28.417384331 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/307-cfg.dot	2023-06-07 19:35:34.937383762 +0330
@@ -1,85 +1,5 @@
-digraph "IsLocked" {  
-"17771" [label = <(soa,soa(env))<SUB>2500</SUB>> ]
-"17774" [label = <(&lt;operator&gt;.assignment,lock_word = soa.Decode&lt;mirror::Object&gt;(jobj)-&gt;GetLockWord(true))<SUB>2501</SUB>> ]
-"17776" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(jobj)-&gt;GetLockWord(true))<SUB>2501</SUB>> ]
-"17790" [label = <(GetState,lock_word.GetState())<SUB>2502</SUB>> ]
-"17777" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>2501</SUB>> ]
-"17784" [label = <(GetLockWord,(jobj)-&gt;GetLockWord(true))<SUB>2501</SUB>> ]
-"17791" [label = <(&lt;operator&gt;.fieldAccess,lock_word.GetState)<SUB>2502</SUB>> ]
-"17796" [label = <(&lt;operator&gt;.fieldAccess,LockWord::kHashCode)<SUB>2503</SUB>> ]
-"17800" [label = <(&lt;operator&gt;.fieldAccess,LockWord::kUnlocked)<SUB>2504</SUB>> ]
-"17803" [label = <(RETURN,return false;,return false;)<SUB>2505</SUB>> ]
-"17806" [label = <(&lt;operator&gt;.fieldAccess,LockWord::kThinLocked)<SUB>2506</SUB>> ]
-"17809" [label = <(RETURN,return true;,return true;)<SUB>2507</SUB>> ]
-"17812" [label = <(&lt;operator&gt;.fieldAccess,LockWord::kFatLocked)<SUB>2508</SUB>> ]
-"17815" [label = <(RETURN,return lock_word.FatLockMonitor()-&gt;IsLocked();,return lock_word.FatLockMonitor()-&gt;IsLocked();)<SUB>2509</SUB>> ]
-"17778" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>2501</SUB>> ]
-"17781" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>2501</SUB>> ]
-"17785" [label = <(&lt;operator&gt;.indirectFieldAccess,(jobj)-&gt;GetLockWord)<SUB>2501</SUB>> ]
-"17793" [label = <(FIELD_IDENTIFIER,GetState,GetState)<SUB>2502</SUB>> ]
-"17798" [label = <(FIELD_IDENTIFIER,kHashCode,kHashCode)<SUB>2503</SUB>> ]
-"17802" [label = <(FIELD_IDENTIFIER,kUnlocked,kUnlocked)<SUB>2504</SUB>> ]
-"17808" [label = <(FIELD_IDENTIFIER,kThinLocked,kThinLocked)<SUB>2506</SUB>> ]
-"17814" [label = <(FIELD_IDENTIFIER,kFatLocked,kFatLocked)<SUB>2508</SUB>> ]
-"17816" [label = <(IsLocked,lock_word.FatLockMonitor()-&gt;IsLocked())<SUB>2509</SUB>> ]
-"17825" [label = <(&lt;operator&gt;.shiftLeft,LOG(FATAL) &lt;&lt; &quot;Invalid monitor state &quot; &lt;&lt; lock_word.GetState())<SUB>2511</SUB>> ]
-"17834" [label = <(UNREACHABLE,UNREACHABLE())<SUB>2512</SUB>> ]
-"17780" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>2501</SUB>> ]
-"17783" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>2501</SUB>> ]
-"17787" [label = <(FIELD_IDENTIFIER,GetLockWord,GetLockWord)<SUB>2501</SUB>> ]
-"17817" [label = <(&lt;operator&gt;.indirectFieldAccess,lock_word.FatLockMonitor()-&gt;IsLocked)<SUB>2509</SUB>> ]
-"17826" [label = <(&lt;operator&gt;.shiftLeft,LOG(FATAL) &lt;&lt; &quot;Invalid monitor state &quot;)<SUB>2511</SUB>> ]
-"17830" [label = <(GetState,lock_word.GetState())<SUB>2511</SUB>> ]
-"17818" [label = <(FatLockMonitor,lock_word.FatLockMonitor())<SUB>2509</SUB>> ]
-"17822" [label = <(FIELD_IDENTIFIER,IsLocked,IsLocked)<SUB>2509</SUB>> ]
-"17827" [label = <(LOG,LOG(FATAL))<SUB>2511</SUB>> ]
-"17831" [label = <(&lt;operator&gt;.fieldAccess,lock_word.GetState)<SUB>2511</SUB>> ]
-"17819" [label = <(&lt;operator&gt;.fieldAccess,lock_word.FatLockMonitor)<SUB>2509</SUB>> ]
-"17833" [label = <(FIELD_IDENTIFIER,GetState,GetState)<SUB>2511</SUB>> ]
-"17821" [label = <(FIELD_IDENTIFIER,FatLockMonitor,FatLockMonitor)<SUB>2509</SUB>> ]
-"17766" [label = <(METHOD,IsLocked)<SUB>2499</SUB>> ]
-"17835" [label = <(METHOD_RETURN,bool)<SUB>2499</SUB>> ]
-  "17771" -> "17780" 
-  "17774" -> "17793" 
-  "17776" -> "17774" 
-  "17790" -> "17798" 
-  "17790" -> "17802" 
-  "17790" -> "17808" 
-  "17790" -> "17814" 
-  "17790" -> "17827" 
-  "17777" -> "17787" 
-  "17784" -> "17776" 
-  "17791" -> "17790" 
-  "17796" -> "17802" 
-  "17800" -> "17803" 
-  "17803" -> "17835" 
-  "17806" -> "17809" 
-  "17809" -> "17835" 
-  "17812" -> "17821" 
-  "17815" -> "17835" 
-  "17778" -> "17783" 
-  "17781" -> "17777" 
-  "17785" -> "17784" 
-  "17793" -> "17791" 
-  "17798" -> "17796" 
-  "17802" -> "17800" 
-  "17808" -> "17806" 
-  "17814" -> "17812" 
-  "17816" -> "17815" 
-  "17825" -> "17834" 
-  "17834" -> "17835" 
-  "17780" -> "17778" 
-  "17783" -> "17781" 
-  "17787" -> "17785" 
-  "17817" -> "17816" 
-  "17826" -> "17833" 
-  "17830" -> "17825" 
-  "17818" -> "17822" 
-  "17822" -> "17817" 
-  "17827" -> "17826" 
-  "17831" -> "17830" 
-  "17819" -> "17818" 
-  "17833" -> "17831" 
-  "17821" -> "17819" 
-  "17766" -> "17771" 
+digraph "&lt;operator&gt;.indirection" {  
+"17827" [label = <(METHOD,&lt;operator&gt;.indirection)> ]
+"17830" [label = <(METHOD_RETURN,ANY)> ]
+  "17827" -> "17830" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/308-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/308-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/308-cfg.dot	2023-06-07 19:35:28.417384331 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/308-cfg.dot	2023-06-07 19:35:34.937383762 +0330
@@ -1,15 +1,5 @@
-digraph "CountNewGlobalRef" {  
-"17852" [label = <(&lt;operator&gt;.preIncrement,++gGlobalRefCount)<SUB>2597</SUB>> ]
-"17854" [label = <(RETURN,return gOriginalEnv-&gt;NewGlobalRef(env, o);,return gOriginalEnv-&gt;NewGlobalRef(env, o);)<SUB>2598</SUB>> ]
-"17855" [label = <(NewGlobalRef,gOriginalEnv-&gt;NewGlobalRef(env, o))<SUB>2598</SUB>> ]
-"17856" [label = <(&lt;operator&gt;.indirectFieldAccess,gOriginalEnv-&gt;NewGlobalRef)<SUB>2598</SUB>> ]
-"17858" [label = <(FIELD_IDENTIFIER,NewGlobalRef,NewGlobalRef)<SUB>2598</SUB>> ]
-"17848" [label = <(METHOD,CountNewGlobalRef)<SUB>2596</SUB>> ]
-"17861" [label = <(METHOD_RETURN,jobject)<SUB>2596</SUB>> ]
-  "17852" -> "17858" 
-  "17854" -> "17861" 
-  "17855" -> "17854" 
-  "17856" -> "17855" 
-  "17858" -> "17856" 
-  "17848" -> "17852" 
+digraph "&lt;operator&gt;.assignment" {  
+"17831" [label = <(METHOD,&lt;operator&gt;.assignment)> ]
+"17835" [label = <(METHOD_RETURN,ANY)> ]
+  "17831" -> "17835" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/309-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/309-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/309-cfg.dot	2023-06-07 19:35:28.417384331 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/309-cfg.dot	2023-06-07 19:35:34.937383762 +0330
@@ -1,7 +1,5 @@
-digraph "&lt;global&gt;" {  
-"17870" [label = <(UNKNOWN,namespace art {\012\012template&lt;class T&gt; class Handle;\012template&lt;class MirrorType&gt; class ObjPtr;\012struct StringOffsets;\012class StubTest_ReadBarrierForRoot_Test;\012\012namespace mirror {\012\012// String Compression\012static constexpr bool kUseStringCompression = true;\012enum class StringCompressionFlag : uint32_t {\012    kCompressed = 0u,\012    kUncompressed = 1u\012};\012\012// C++ mirror of java.lang.String\012class MANAGED String final : public Object {\012 public:\012 // Size of java.lang.String.class.\012 static uint32_t ClassSize(PointerSize pointer_size);\012\012 // Size of an instance of java.lang.String not including its value array.\012 static constexpr uint32_t InstanceSize() {\012 return sizeof(String);\012 }\012\012 static constexpr MemberOffset CountOffset() {\012 return OFFSET_OF_OBJECT_MEMBER(String, count_);\012 }\012\012 static constexpr MemberOffset ValueOffset() {\012 return OFFSET_OF_OBJECT_MEMBER(String, value_);\012 }\012\012 uint16_t* GetValue() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return &amp;value_[0];\012 }\012\012 uint8_t* GetValueCompressed() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return &amp;value_compressed_[0];\012 }\012\012 template&lt;VerifyObjectFlags kVerifyFlags = kDefaultVerifyFlags&gt;\012 size_t SizeOf() REQUIRES_SHARED(Locks::mutator_lock_) {\012 size_t size = sizeof(String);\012 if (IsCompressed()) {\012      size += (sizeof(uint8_t) * GetLength&lt;kVerifyFlags&gt;());\012 } else {\012      size += (sizeof(uint16_t) * GetLength&lt;kVerifyFlags&gt;());\012 }\012 // String.equals() intrinsics assume zero-padding up to kObjectAlignment,\012 // so make sure the zero-padding is actually copied around if GC compaction\012 // chooses to copy only SizeOf() bytes.\012 // http://b/23528461\012 return RoundUp(size, kObjectAlignment);\012 }\012\012 // Taking out the first/uppermost bit because it is not part of actual length value\012 template&lt;VerifyObjectFlags kVerifyFlags = kDefaultVerifyFlags&gt;\012 int32_t GetLength() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return GetLengthFromCount(GetCount&lt;kVerifyFlags&gt;());\012 }\012\012 template&lt;VerifyObjectFlags kVerifyFlags = kDefaultVerifyFlags&gt;\012 int32_t GetCount() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return GetField32&lt;kVerifyFlags&gt;(OFFSET_OF_OBJECT_MEMBER(String, count_));\012 }\012\012 void SetCount(int32_t new_count) REQUIRES_SHARED(Locks::mutator_lock_) {\012 // Count is invariant so use non-transactional mode. Also disable check as we may run inside\012 // a transaction.\012 SetField32&lt;false, false&gt;(OFFSET_OF_OBJECT_MEMBER(String, count_), new_count);\012 }\012\012 int32_t GetHashCode() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // Computes, stores, and returns the hash code.\012 int32_t ComputeHashCode() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 int32_t GetUtfLength() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 uint16_t CharAt(int32_t index) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // Create a new string where all occurences of `old_c` are replaced with `new_c`.\012 // String.doReplace(char, char) is called from String.replace(char, char) when there is a match.\012 static ObjPtr&lt;String&gt; DoReplace(Thread* self, Handle&lt;String&gt; src, uint16_t old_c, uint16_t new_c)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 ObjPtr&lt;String&gt; Intern() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 template &lt;bool kIsInstrumented&gt;\012  ALWAYS_INLINE static ObjPtr&lt;String&gt; AllocFromByteArray(Thread* self,\012 int32_t byte_length,\012 Handle&lt;ByteArray&gt; array,\012 int32_t offset,\012 int32_t high_byte,\012                                                         gc::AllocatorType allocator_type)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 template &lt;bool kIsInstrumented&gt;\012  ALWAYS_INLINE static ObjPtr&lt;String&gt; AllocFromCharArray(Thread* self,\012 int32_t count,\012 Handle&lt;CharArray&gt; array,\012 int32_t offset,\012                                                         gc::AllocatorType allocator_type)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 template &lt;bool kIsInstrumented&gt;\012  ALWAYS_INLINE static ObjPtr&lt;String&gt; AllocFromString(Thread* self,\012 int32_t string_length,\012 Handle&lt;String&gt; string,\012 int32_t offset,\012                                                      gc::AllocatorType allocator_type)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 template &lt;bool kIsInstrumented&gt;\012  ALWAYS_INLINE static ObjPtr&lt;String&gt; AllocEmptyString(Thread* self,\012                                                       gc::AllocatorType allocator_type)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static ObjPtr&lt;String&gt; AllocFromStrings(Thread* self,\012 Handle&lt;String&gt; string,\012 Handle&lt;String&gt; string2)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static ObjPtr&lt;String&gt; AllocFromUtf16(Thread* self,\012 int32_t utf16_length,\012 const uint16_t* utf16_data_in)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static ObjPtr&lt;String&gt; AllocFromModifiedUtf8(Thread* self, const char* utf)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static ObjPtr&lt;String&gt; AllocFromModifiedUtf8(Thread* self,\012 int32_t utf16_length,\012 const char* utf8_data_in,\012 int32_t utf8_length)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static ObjPtr&lt;String&gt; AllocFromModifiedUtf8(Thread* self,\012 int32_t utf16_length,\012 const char* utf8_data_in)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 bool Equals(const char* modified_utf8) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 bool Equals(ObjPtr&lt;String&gt; that) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // Create a modified UTF-8 encoded std::string from a java/lang/String object.\012  std::string ToModifiedUtf8() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 int32_t FastIndexOf(int32_t ch, int32_t start) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 template &lt;typename MemoryType&gt;\012 int32_t FastIndexOf(MemoryType* chars, int32_t ch, int32_t start)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 int32_t CompareTo(ObjPtr&lt;String&gt; other) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 ObjPtr&lt;CharArray&gt; ToCharArray(Thread* self) REQUIRES_SHARED(Locks::mutator_lock_)\012      REQUIRES(!Roles::uninterruptible_);\012\012 void GetChars(int32_t start, int32_t end, Handle&lt;CharArray&gt; array, int32_t index)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 template&lt;VerifyObjectFlags kVerifyFlags = kDefaultVerifyFlags&gt;\012 bool IsCompressed() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return kUseStringCompression &amp;&amp; IsCompressed(GetCount());\012 }\012\012 bool IsValueNull() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 template&lt;typename MemoryType&gt;\012 static bool AllASCII(const MemoryType* chars, const int length);\012\012 static bool DexFileStringAllASCII(const char* chars, const int length);\012\012  ALWAYS_INLINE static bool IsCompressed(int32_t count) {\012 return GetCompressionFlagFromCount(count) == StringCompressionFlag::kCompressed;\012 }\012\012  ALWAYS_INLINE static StringCompressionFlag GetCompressionFlagFromCount(int32_t count) {\012 return kUseStringCompression\012 ? static_cast&lt;StringCompressionFlag&gt;(static_cast&lt;uint32_t&gt;(count) &amp; 1u)\012 : StringCompressionFlag::kUncompressed;\012 }\012\012  ALWAYS_INLINE static int32_t GetLengthFromCount(int32_t count) {\012 return kUseStringCompression ? static_cast&lt;int32_t&gt;(static_cast&lt;uint32_t&gt;(count) &gt;&gt; 1) : count;\012 }\012\012  ALWAYS_INLINE static int32_t GetFlaggedCount(int32_t length, bool compressible) {\012 return kUseStringCompression\012 ? static_cast&lt;int32_t&gt;((static_cast&lt;uint32_t&gt;(length) &lt;&lt; 1) |\012 (static_cast&lt;uint32_t&gt;(compressible\012 ? StringCompressionFlag::kCompressed\012 : StringCompressionFlag::kUncompressed)))\012 : length;\012 }\012\012 // Returns a human-readable equivalent of 'descriptor'. So &quot;I&quot; would be &quot;int&quot;,\012 // &quot;[[I&quot; would be &quot;int[][]&quot;, &quot;[Ljava/lang/String;&quot; would be\012 // &quot;java.lang.String[]&quot;, and so forth.\012 static std::string PrettyStringDescriptor(ObjPtr&lt;mirror::String&gt; descriptor)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012  std::string PrettyStringDescriptor()\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 static constexpr bool IsASCII(uint16_t c) {\012 // Valid ASCII characters are in range 1..0x7f. Zero is not considered ASCII\012 // because it would complicate the detection of ASCII strings in Modified-UTF8.\012 return (c - 1u) &lt; 0x7fu;\012 }\012\012 private:\012 static bool AllASCIIExcept(const uint16_t* chars, int32_t length, uint16_t non_ascii);\012\012 void SetHashCode(int32_t new_hash_code) REQUIRES_SHARED(Locks::mutator_lock_) {\012 // Hash code is invariant so use non-transactional mode. Also disable check as we may run inside\012 // a transaction.\012    DCHECK_EQ(0, GetField32(OFFSET_OF_OBJECT_MEMBER(String, hash_code_)));\012 SetField32&lt;false, false&gt;(OFFSET_OF_OBJECT_MEMBER(String, hash_code_), new_hash_code);\012 }\012\012 template &lt;bool kIsInstrumented, typename PreFenceVisitor&gt;\012  ALWAYS_INLINE static ObjPtr&lt;String&gt; Alloc(Thread* self,\012 int32_t utf16_length_with_flag,\012                                            gc::AllocatorType allocator_type,\012 const PreFenceVisitor&amp; pre_fence_visitor)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 // Field order required by test &quot;ValidateFieldOrderOfJavaCppUnionClasses&quot;.\012\012 // If string compression is enabled, count_ holds the StringCompressionFlag in the\012 // least significant bit and the length in the remaining bits, length = count_ &gt;&gt; 1.\012 int32_t count_;\012\012 uint32_t hash_code_;\012\012 // Compression of all-ASCII into 8-bit memory leads to usage one of these fields\012 union {\012 uint16_t value_[0];\012 uint8_t value_compressed_[0];\012 };\012\012 friend struct art::StringOffsets; // for verifying offset information\012\012  DISALLOW_IMPLICIT_CONSTRUCTORS(String);\012};\012\012} // namespace mirror\012},namespace art {\012\012template&lt;class T&gt; class Handle;\012template&lt;class MirrorType&gt; class ObjPtr;\012struct StringOffsets;\012class StubTest_ReadBarrierForRoot_Test;\012\012namespace mirror {\012\012// String Compression\012static constexpr bool kUseStringCompression = true;\012enum class StringCompressionFlag : uint32_t {\012    kCompressed = 0u,\012    kUncompressed = 1u\012};\012\012// C++ mirror of java.lang.String\012class MANAGED String final : public Object {\012 public:\012 // Size of java.lang.String.class.\012 static uint32_t ClassSize(PointerSize pointer_size);\012\012 // Size of an instance of java.lang.String not including its value array.\012 static constexpr uint32_t InstanceSize() {\012 return sizeof(String);\012 }\012\012 static constexpr MemberOffset CountOffset() {\012 return OFFSET_OF_OBJECT_MEMBER(String, count_);\012 }\012\012 static constexpr MemberOffset ValueOffset() {\012 return OFFSET_OF_OBJECT_MEMBER(String, value_);\012 }\012\012 uint16_t* GetValue() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return &amp;value_[0];\012 }\012\012 uint8_t* GetValueCompressed() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return &amp;value_compressed_[0];\012 }\012\012 template&lt;VerifyObjectFlags kVerifyFlags = kDefaultVerifyFlags&gt;\012 size_t SizeOf() REQUIRES_SHARED(Locks::mutator_lock_) {\012 size_t size = sizeof(String);\012 if (IsCompressed()) {\012      size += (sizeof(uint8_t) * GetLength&lt;kVerifyFlags&gt;());\012 } else {\012      size += (sizeof(uint16_t) * GetLength&lt;kVerifyFlags&gt;());\012 }\012 // String.equals() intrinsics assume zero-padding up to kObjectAlignment,\012 // so make sure the zero-padding is actually copied around if GC compaction\012 // chooses to copy only SizeOf() bytes.\012 // http://b/23528461\012 return RoundUp(size, kObjectAlignment);\012 }\012\012 // Taking out the first/uppermost bit because it is not part of actual length value\012 template&lt;VerifyObjectFlags kVerifyFlags = kDefaultVerifyFlags&gt;\012 int32_t GetLength() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return GetLengthFromCount(GetCount&lt;kVerifyFlags&gt;());\012 }\012\012 template&lt;VerifyObjectFlags kVerifyFlags = kDefaultVerifyFlags&gt;\012 int32_t GetCount() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return GetField32&lt;kVerifyFlags&gt;(OFFSET_OF_OBJECT_MEMBER(String, count_));\012 }\012\012 void SetCount(int32_t new_count) REQUIRES_SHARED(Locks::mutator_lock_) {\012 // Count is invariant so use non-transactional mode. Also disable check as we may run inside\012 // a transaction.\012 SetField32&lt;false, false&gt;(OFFSET_OF_OBJECT_MEMBER(String, count_), new_count);\012 }\012\012 int32_t GetHashCode() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // Computes, stores, and returns the hash code.\012 int32_t ComputeHashCode() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 int32_t GetUtfLength() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 uint16_t CharAt(int32_t index) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // Create a new string where all occurences of `old_c` are replaced with `new_c`.\012 // String.doReplace(char, char) is called from String.replace(char, char) when there is a match.\012 static ObjPtr&lt;String&gt; DoReplace(Thread* self, Handle&lt;String&gt; src, uint16_t old_c, uint16_t new_c)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 ObjPtr&lt;String&gt; Intern() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 template &lt;bool kIsInstrumented&gt;\012  ALWAYS_INLINE static ObjPtr&lt;String&gt; AllocFromByteArray(Thread* self,\012 int32_t byte_length,\012 Handle&lt;ByteArray&gt; array,\012 int32_t offset,\012 int32_t high_byte,\012                                                         gc::AllocatorType allocator_type)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 template &lt;bool kIsInstrumented&gt;\012  ALWAYS_INLINE static ObjPtr&lt;String&gt; AllocFromCharArray(Thread* self,\012 int32_t count,\012 Handle&lt;CharArray&gt; array,\012 int32_t offset,\012                                                         gc::AllocatorType allocator_type)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 template &lt;bool kIsInstrumented&gt;\012  ALWAYS_INLINE static ObjPtr&lt;String&gt; AllocFromString(Thread* self,\012 int32_t string_length,\012 Handle&lt;String&gt; string,\012 int32_t offset,\012                                                      gc::AllocatorType allocator_type)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 template &lt;bool kIsInstrumented&gt;\012  ALWAYS_INLINE static ObjPtr&lt;String&gt; AllocEmptyString(Thread* self,\012                                                       gc::AllocatorType allocator_type)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static ObjPtr&lt;String&gt; AllocFromStrings(Thread* self,\012 Handle&lt;String&gt; string,\012 Handle&lt;String&gt; string2)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static ObjPtr&lt;String&gt; AllocFromUtf16(Thread* self,\012 int32_t utf16_length,\012 const uint16_t* utf16_data_in)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static ObjPtr&lt;String&gt; AllocFromModifiedUtf8(Thread* self, const char* utf)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static ObjPtr&lt;String&gt; AllocFromModifiedUtf8(Thread* self,\012 int32_t utf16_length,\012 const char* utf8_data_in,\012 int32_t utf8_length)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 static ObjPtr&lt;String&gt; AllocFromModifiedUtf8(Thread* self,\012 int32_t utf16_length,\012 const char* utf8_data_in)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 bool Equals(const char* modified_utf8) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 bool Equals(ObjPtr&lt;String&gt; that) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 // Create a modified UTF-8 encoded std::string from a java/lang/String object.\012  std::string ToModifiedUtf8() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 int32_t FastIndexOf(int32_t ch, int32_t start) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 template &lt;typename MemoryType&gt;\012 int32_t FastIndexOf(MemoryType* chars, int32_t ch, int32_t start)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 int32_t CompareTo(ObjPtr&lt;String&gt; other) REQUIRES_SHARED(Locks::mutator_lock_);\012\012 ObjPtr&lt;CharArray&gt; ToCharArray(Thread* self) REQUIRES_SHARED(Locks::mutator_lock_)\012      REQUIRES(!Roles::uninterruptible_);\012\012 void GetChars(int32_t start, int32_t end, Handle&lt;CharArray&gt; array, int32_t index)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 template&lt;VerifyObjectFlags kVerifyFlags = kDefaultVerifyFlags&gt;\012 bool IsCompressed() REQUIRES_SHARED(Locks::mutator_lock_) {\012 return kUseStringCompression &amp;&amp; IsCompressed(GetCount());\012 }\012\012 bool IsValueNull() REQUIRES_SHARED(Locks::mutator_lock_);\012\012 template&lt;typename MemoryType&gt;\012 static bool AllASCII(const MemoryType* chars, const int length);\012\012 static bool DexFileStringAllASCII(const char* chars, const int length);\012\012  ALWAYS_INLINE static bool IsCompressed(int32_t count) {\012 return GetCompressionFlagFromCount(count) == StringCompressionFlag::kCompressed;\012 }\012\012  ALWAYS_INLINE static StringCompressionFlag GetCompressionFlagFromCount(int32_t count) {\012 return kUseStringCompression\012 ? static_cast&lt;StringCompressionFlag&gt;(static_cast&lt;uint32_t&gt;(count) &amp; 1u)\012 : StringCompressionFlag::kUncompressed;\012 }\012\012  ALWAYS_INLINE static int32_t GetLengthFromCount(int32_t count) {\012 return kUseStringCompression ? static_cast&lt;int32_t&gt;(static_cast&lt;uint32_t&gt;(count) &gt;&gt; 1) : count;\012 }\012\012  ALWAYS_INLINE static int32_t GetFlaggedCount(int32_t length, bool compressible) {\012 return kUseStringCompression\012 ? static_cast&lt;int32_t&gt;((static_cast&lt;uint32_t&gt;(length) &lt;&lt; 1) |\012 (static_cast&lt;uint32_t&gt;(compressible\012 ? StringCompressionFlag::kCompressed\012 : StringCompressionFlag::kUncompressed)))\012 : length;\012 }\012\012 // Returns a human-readable equivalent of 'descriptor'. So &quot;I&quot; would be &quot;int&quot;,\012 // &quot;[[I&quot; would be &quot;int[][]&quot;, &quot;[Ljava/lang/String;&quot; would be\012 // &quot;java.lang.String[]&quot;, and so forth.\012 static std::string PrettyStringDescriptor(ObjPtr&lt;mirror::String&gt; descriptor)\012      REQUIRES_SHARED(Locks::mutator_lock_);\012  std::string PrettyStringDescriptor()\012      REQUIRES_SHARED(Locks::mutator_lock_);\012\012 static constexpr bool IsASCII(uint16_t c) {\012 // Valid ASCII characters are in range 1..0x7f. Zero is not considered ASCII\012 // because it would complicate the detection of ASCII strings in Modified-UTF8.\012 return (c - 1u) &lt; 0x7fu;\012 }\012\012 private:\012 static bool AllASCIIExcept(const uint16_t* chars, int32_t length, uint16_t non_ascii);\012\012 void SetHashCode(int32_t new_hash_code) REQUIRES_SHARED(Locks::mutator_lock_) {\012 // Hash code is invariant so use non-transactional mode. Also disable check as we may run inside\012 // a transaction.\012    DCHECK_EQ(0, GetField32(OFFSET_OF_OBJECT_MEMBER(String, hash_code_)));\012 SetField32&lt;false, false&gt;(OFFSET_OF_OBJECT_MEMBER(String, hash_code_), new_hash_code);\012 }\012\012 template &lt;bool kIsInstrumented, typename PreFenceVisitor&gt;\012  ALWAYS_INLINE static ObjPtr&lt;String&gt; Alloc(Thread* self,\012 int32_t utf16_length_with_flag,\012                                            gc::AllocatorType allocator_type,\012 const PreFenceVisitor&amp; pre_fence_visitor)\012      REQUIRES_SHARED(Locks::mutator_lock_) REQUIRES(!Roles::uninterruptible_);\012\012 // Field order required by test &quot;ValidateFieldOrderOfJavaCppUnionClasses&quot;.\012\012 // If string compression is enabled, count_ holds the StringCompressionFlag in the\012 // least significant bit and the length in the remaining bits, length = count_ &gt;&gt; 1.\012 int32_t count_;\012\012 uint32_t hash_code_;\012\012 // Compression of all-ASCII into 8-bit memory leads to usage one of these fields\012 union {\012 uint16_t value_[0];\012 uint8_t value_compressed_[0];\012 };\012\012 friend struct art::StringOffsets; // for verifying offset information\012\012  DISALLOW_IMPLICIT_CONSTRUCTORS(String);\012};\012\012} // namespace mirror\012})<SUB>26</SUB>> ]
-"17868" [label = <(METHOD,&lt;global&gt;)<SUB>1</SUB>> ]
-"17871" [label = <(METHOD_RETURN,ANY)<SUB>1</SUB>> ]
-  "17870" -> "17871" 
-  "17868" -> "17870" 
+digraph "DCHECK_LT" {  
+"17836" [label = <(METHOD,DCHECK_LT)> ]
+"17840" [label = <(METHOD_RETURN,ANY)> ]
+  "17836" -> "17840" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/31-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/31-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/31-cfg.dot	2023-06-07 19:35:28.217384348 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/31-cfg.dot	2023-06-07 19:35:34.747383777 +0330
@@ -1,5 +1,5 @@
-digraph "GetClassLoader" {  
-"775" [label = <(METHOD,GetClassLoader)<SUB>532</SUB>> ]
-"778" [label = <(METHOD_RETURN,ANY)<SUB>532</SUB>> ]
-  "775" -> "778" 
+digraph "ThrowNewException" {  
+"695" [label = <(METHOD,ThrowNewException)<SUB>559</SUB>> ]
+"701" [label = <(METHOD_RETURN,int)<SUB>559</SUB>> ]
+  "695" -> "701" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/310-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/310-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/310-cfg.dot	2023-06-07 19:35:28.417384331 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/310-cfg.dot	2023-06-07 19:35:34.937383762 +0330
@@ -1,5 +1,5 @@
-digraph "va_end" {  
-"18192" [label = <(METHOD,va_end)> ]
-"18195" [label = <(METHOD_RETURN,ANY)> ]
-  "18192" -> "18195" 
+digraph "__builtin_return_address" {  
+"17841" [label = <(METHOD,__builtin_return_address)> ]
+"17844" [label = <(METHOD_RETURN,ANY)> ]
+  "17841" -> "17844" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/311-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/311-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/311-cfg.dot	2023-06-07 19:35:28.417384331 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/311-cfg.dot	2023-06-07 19:35:34.937383762 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.indirection" {  
-"18196" [label = <(METHOD,&lt;operator&gt;.indirection)> ]
-"18199" [label = <(METHOD_RETURN,ANY)> ]
-  "18196" -> "18199" 
+digraph "&lt;operator&gt;.fieldAccess" {  
+"17845" [label = <(METHOD,&lt;operator&gt;.fieldAccess)> ]
+"17849" [label = <(METHOD_RETURN,ANY)> ]
+  "17845" -> "17849" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/312-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/312-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/312-cfg.dot	2023-06-07 19:35:28.417384331 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/312-cfg.dot	2023-06-07 19:35:34.937383762 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.assignment" {  
-"18200" [label = <(METHOD,&lt;operator&gt;.assignment)> ]
-"18204" [label = <(METHOD_RETURN,ANY)> ]
-  "18200" -> "18204" 
+digraph "&lt;operator&gt;.shiftLeft" {  
+"17850" [label = <(METHOD,&lt;operator&gt;.shiftLeft)> ]
+"17854" [label = <(METHOD_RETURN,ANY)> ]
+  "17850" -> "17854" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/313-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/313-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/313-cfg.dot	2023-06-07 19:35:28.417384331 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/313-cfg.dot	2023-06-07 19:35:34.937383762 +0330
@@ -1,5 +1,5 @@
-digraph "DCHECK_LE" {  
-"18205" [label = <(METHOD,DCHECK_LE)> ]
-"18209" [label = <(METHOD_RETURN,ANY)> ]
-  "18205" -> "18209" 
+digraph "&lt;operator&gt;.cast" {  
+"17855" [label = <(METHOD,&lt;operator&gt;.cast)> ]
+"17859" [label = <(METHOD_RETURN,ANY)> ]
+  "17855" -> "17859" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/314-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/314-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/314-cfg.dot	2023-06-07 19:35:28.427384332 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/314-cfg.dot	2023-06-07 19:35:34.937383762 +0330
@@ -1,5 +1,5 @@
-digraph "strlen" {  
-"18210" [label = <(METHOD,strlen)> ]
-"18213" [label = <(METHOD_RETURN,ANY)> ]
-  "18210" -> "18213" 
+digraph "Find" {  
+"17860" [label = <(METHOD,Find)> ]
+"17864" [label = <(METHOD_RETURN,ANY)> ]
+  "17860" -> "17864" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/315-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/315-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/315-cfg.dot	2023-06-07 19:35:28.427384332 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/315-cfg.dot	2023-06-07 19:35:34.937383762 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.addition" {  
-"18214" [label = <(METHOD,&lt;operator&gt;.addition)> ]
-"18218" [label = <(METHOD_RETURN,ANY)> ]
-  "18214" -> "18218" 
+digraph "&lt;operator&gt;.addressOf" {  
+"17865" [label = <(METHOD,&lt;operator&gt;.addressOf)> ]
+"17868" [label = <(METHOD_RETURN,ANY)> ]
+  "17865" -> "17868" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/316-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/316-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/316-cfg.dot	2023-06-07 19:35:28.427384332 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/316-cfg.dot	2023-06-07 19:35:34.937383762 +0330
@@ -1,5 +1,5 @@
 digraph "&lt;operator&gt;.notEquals" {  
-"18219" [label = <(METHOD,&lt;operator&gt;.notEquals)> ]
-"18223" [label = <(METHOD_RETURN,ANY)> ]
-  "18219" -> "18223" 
+"17869" [label = <(METHOD,&lt;operator&gt;.notEquals)> ]
+"17873" [label = <(METHOD_RETURN,ANY)> ]
+  "17869" -> "17873" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/317-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/317-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/317-cfg.dot	2023-06-07 19:35:28.427384332 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/317-cfg.dot	2023-06-07 19:35:34.937383762 +0330
@@ -1,5 +1,5 @@
-digraph "LIKELY" {  
-"18224" [label = <(METHOD,LIKELY)> ]
-"18227" [label = <(METHOD_RETURN,ANY)> ]
-  "18224" -> "18227" 
+digraph "Size" {  
+"17874" [label = <(METHOD,Size)> ]
+"17877" [label = <(METHOD_RETURN,ANY)> ]
+  "17874" -> "17877" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/318-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/318-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/318-cfg.dot	2023-06-07 19:35:28.427384332 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/318-cfg.dot	2023-06-07 19:35:34.937383762 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.equals" {  
-"18228" [label = <(METHOD,&lt;operator&gt;.equals)> ]
-"18232" [label = <(METHOD_RETURN,ANY)> ]
-  "18228" -> "18232" 
+digraph "DCHECK" {  
+"17878" [label = <(METHOD,DCHECK)> ]
+"17881" [label = <(METHOD_RETURN,ANY)> ]
+  "17878" -> "17881" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/319-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/319-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/319-cfg.dot	2023-06-07 19:35:28.427384332 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/319-cfg.dot	2023-06-07 19:35:34.937383762 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.and" {  
-"18233" [label = <(METHOD,&lt;operator&gt;.and)> ]
-"18237" [label = <(METHOD_RETURN,ANY)> ]
-  "18233" -> "18237" 
+digraph "&lt;operator&gt;.logicalNot" {  
+"17882" [label = <(METHOD,&lt;operator&gt;.logicalNot)> ]
+"17885" [label = <(METHOD_RETURN,ANY)> ]
+  "17882" -> "17885" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/32-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/32-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/32-cfg.dot	2023-06-07 19:35:28.217384348 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/32-cfg.dot	2023-06-07 19:35:34.747383777 +0330
@@ -1,5 +1,17 @@
-digraph "FindFieldID" {  
-"807" [label = <(METHOD,FindFieldID)<SUB>562</SUB>> ]
-"814" [label = <(METHOD_RETURN,jfieldID)<SUB>562</SUB>> ]
-  "807" -> "814" 
+digraph "JavaVmExtFromEnv" {  
+"708" [label = <(RETURN,return reinterpret_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm();,return reinterpret_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm();)<SUB>602</SUB>> ]
+"709" [label = <(GetVm,reinterpret_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm())<SUB>602</SUB>> ]
+"710" [label = <(&lt;operator&gt;.indirectFieldAccess,reinterpret_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm)<SUB>602</SUB>> ]
+"711" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;JNIEnvExt*&gt;(env))<SUB>602</SUB>> ]
+"714" [label = <(FIELD_IDENTIFIER,GetVm,GetVm)<SUB>602</SUB>> ]
+"712" [label = <(UNKNOWN,JNIEnvExt*,JNIEnvExt*)<SUB>602</SUB>> ]
+"705" [label = <(METHOD,JavaVmExtFromEnv)<SUB>601</SUB>> ]
+"715" [label = <(METHOD_RETURN,JavaVMExt)<SUB>601</SUB>> ]
+  "708" -> "715" 
+  "709" -> "708" 
+  "710" -> "709" 
+  "711" -> "714" 
+  "714" -> "710" 
+  "712" -> "711" 
+  "705" -> "712" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/320-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/320-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/320-cfg.dot	2023-06-07 19:35:28.427384332 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/320-cfg.dot	2023-06-07 19:35:34.937383762 +0330
@@ -1,5 +1,5 @@
-digraph "good" {  
-"18238" [label = <(METHOD,good)> ]
-"18242" [label = <(METHOD_RETURN,ANY)> ]
-  "18238" -> "18242" 
+digraph "HasCache" {  
+"17886" [label = <(METHOD,HasCache)> ]
+"17888" [label = <(METHOD_RETURN,ANY)> ]
+  "17886" -> "17888" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/321-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/321-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/321-cfg.dot	2023-06-07 19:35:28.427384332 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/321-cfg.dot	2023-06-07 19:35:34.937383762 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.assignmentPlus" {  
-"18243" [label = <(METHOD,&lt;operator&gt;.assignmentPlus)> ]
-"18247" [label = <(METHOD_RETURN,ANY)> ]
-  "18243" -> "18247" 
+digraph "dl_iterate_phdr" {  
+"17889" [label = <(METHOD,dl_iterate_phdr)> ]
+"17893" [label = <(METHOD_RETURN,ANY)> ]
+  "17889" -> "17893" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/322-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/322-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/322-cfg.dot	2023-06-07 19:35:28.427384332 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/322-cfg.dot	2023-06-07 19:35:34.937383762 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.lessThan" {  
-"18248" [label = <(METHOD,&lt;operator&gt;.lessThan)> ]
-"18252" [label = <(METHOD_RETURN,ANY)> ]
-  "18248" -> "18252" 
+digraph "Build" {  
+"17894" [label = <(METHOD,Build)> ]
+"17897" [label = <(METHOD_RETURN,ANY)> ]
+  "17894" -> "17897" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/323-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/323-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/323-cfg.dot	2023-06-07 19:35:28.427384332 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/323-cfg.dot	2023-06-07 19:35:34.937383762 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.cast" {  
-"18253" [label = <(METHOD,&lt;operator&gt;.cast)> ]
-"18257" [label = <(METHOD_RETURN,ANY)> ]
-  "18253" -> "18257" 
+digraph "&lt;operator&gt;.indirectFieldAccess" {  
+"17898" [label = <(METHOD,&lt;operator&gt;.indirectFieldAccess)> ]
+"17902" [label = <(METHOD_RETURN,ANY)> ]
+  "17898" -> "17902" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/324-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/324-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/324-cfg.dot	2023-06-07 19:35:28.427384332 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/324-cfg.dot	2023-06-07 19:35:34.937383762 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.subtraction" {  
-"18258" [label = <(METHOD,&lt;operator&gt;.subtraction)> ]
-"18262" [label = <(METHOD_RETURN,ANY)> ]
-  "18258" -> "18262" 
+digraph "CHECK" {  
+"17903" [label = <(METHOD,CHECK)> ]
+"17906" [label = <(METHOD_RETURN,ANY)> ]
+  "17903" -> "17906" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/325-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/325-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/325-cfg.dot	2023-06-07 19:35:28.427384332 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/325-cfg.dot	2023-06-07 19:35:34.937383762 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.conditional" {  
-"18263" [label = <(METHOD,&lt;operator&gt;.conditional)> ]
-"18268" [label = <(METHOD_RETURN,ANY)> ]
-  "18263" -> "18268" 
+digraph "Lookup" {  
+"17907" [label = <(METHOD,Lookup)> ]
+"17911" [label = <(METHOD_RETURN,ANY)> ]
+  "17907" -> "17911" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/326-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/326-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/326-cfg.dot	2023-06-07 19:35:28.427384332 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/326-cfg.dot	2023-06-07 19:35:34.937383762 +0330
@@ -1,5 +1,5 @@
-digraph "bad" {  
-"18269" [label = <(METHOD,bad)> ]
-"18271" [label = <(METHOD_RETURN,ANY)> ]
-  "18269" -> "18271" 
+digraph "&lt;operator&gt;.equals" {  
+"17912" [label = <(METHOD,&lt;operator&gt;.equals)> ]
+"17916" [label = <(METHOD_RETURN,ANY)> ]
+  "17912" -> "17916" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/327-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/327-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/327-cfg.dot	2023-06-07 19:35:28.427384332 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/327-cfg.dot	2023-06-07 19:35:34.937383762 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.logicalAnd" {  
-"18272" [label = <(METHOD,&lt;operator&gt;.logicalAnd)> ]
-"18276" [label = <(METHOD_RETURN,ANY)> ]
-  "18272" -> "18276" 
+digraph "Type" {  
+"17917" [label = <(METHOD,Type)> ]
+"17920" [label = <(METHOD_RETURN,ANY)> ]
+  "17917" -> "17920" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/328-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/328-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/328-cfg.dot	2023-06-07 19:35:28.427384332 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/328-cfg.dot	2023-06-07 19:35:34.937383762 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.fieldAccess" {  
-"18277" [label = <(METHOD,&lt;operator&gt;.fieldAccess)> ]
-"18281" [label = <(METHOD_RETURN,ANY)> ]
-  "18277" -> "18281" 
+digraph "&lt;operator&gt;.logicalAnd" {  
+"17921" [label = <(METHOD,&lt;operator&gt;.logicalAnd)> ]
+"17925" [label = <(METHOD_RETURN,ANY)> ]
+  "17921" -> "17925" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/329-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/329-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/329-cfg.dot	2023-06-07 19:35:28.427384332 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/329-cfg.dot	2023-06-07 19:35:34.937383762 +0330
@@ -1,5 +1,5 @@
-digraph "is_ascii" {  
-"18282" [label = <(METHOD,is_ascii)> ]
-"18284" [label = <(METHOD_RETURN,ANY)> ]
-  "18282" -> "18284" 
+digraph "&lt;operator&gt;.greaterEqualsThan" {  
+"17926" [label = <(METHOD,&lt;operator&gt;.greaterEqualsThan)> ]
+"17930" [label = <(METHOD_RETURN,ANY)> ]
+  "17926" -> "17930" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/33-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/33-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/33-cfg.dot	2023-06-07 19:35:28.227384349 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/33-cfg.dot	2023-06-07 19:35:34.747383777 +0330
@@ -1,5 +1,5 @@
-digraph "ThrowAIOOBE" {  
-"865" [label = <(METHOD,ThrowAIOOBE)<SUB>617</SUB>> ]
-"872" [label = <(METHOD_RETURN,void)<SUB>617</SUB>> ]
-  "865" -> "872" 
+digraph "FindMethod" {  
+"717" [label = <(METHOD,FindMethod)<SUB>630</SUB>> ]
+"722" [label = <(METHOD_RETURN,ArtMethod*)<SUB>630</SUB>> ]
+  "717" -> "722" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/330-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/330-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/330-cfg.dot	2023-06-07 19:35:28.427384332 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/330-cfg.dot	2023-06-07 19:35:34.937383762 +0330
@@ -1,5 +1,5 @@
-digraph "DCHECK_LT" {  
-"18285" [label = <(METHOD,DCHECK_LT)> ]
-"18289" [label = <(METHOD_RETURN,ANY)> ]
-  "18285" -> "18289" 
+digraph "&lt;operator&gt;.lessThan" {  
+"17931" [label = <(METHOD,&lt;operator&gt;.lessThan)> ]
+"17935" [label = <(METHOD_RETURN,ANY)> ]
+  "17931" -> "17935" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/331-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/331-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/331-cfg.dot	2023-06-07 19:35:28.427384332 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/331-cfg.dot	2023-06-07 19:35:34.937383762 +0330
@@ -1,5 +1,5 @@
-digraph "__builtin_return_address" {  
-"18290" [label = <(METHOD,__builtin_return_address)> ]
-"18293" [label = <(METHOD_RETURN,ANY)> ]
-  "18290" -> "18293" 
+digraph "&lt;operator&gt;.conditional" {  
+"17936" [label = <(METHOD,&lt;operator&gt;.conditional)> ]
+"17941" [label = <(METHOD_RETURN,ANY)> ]
+  "17936" -> "17941" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/332-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/332-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/332-cfg.dot	2023-06-07 19:35:28.427384332 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/332-cfg.dot	2023-06-07 19:35:34.937383762 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.shiftLeft" {  
-"18294" [label = <(METHOD,&lt;operator&gt;.shiftLeft)> ]
-"18298" [label = <(METHOD_RETURN,ANY)> ]
-  "18294" -> "18298" 
+digraph "art::LocationIsOnApex" {  
+"17942" [label = <(METHOD,art::LocationIsOnApex)> ]
+"17946" [label = <(METHOD_RETURN,ANY)> ]
+  "17942" -> "17946" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/333-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/333-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/333-cfg.dot	2023-06-07 19:35:28.427384332 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/333-cfg.dot	2023-06-07 19:35:34.937383762 +0330
@@ -1,5 +1,5 @@
-digraph "Find" {  
-"18299" [label = <(METHOD,Find)> ]
-"18303" [label = <(METHOD_RETURN,ANY)> ]
-  "18299" -> "18303" 
+digraph "&lt;operator&gt;.preIncrement" {  
+"17947" [label = <(METHOD,&lt;operator&gt;.preIncrement)> ]
+"17950" [label = <(METHOD_RETURN,ANY)> ]
+  "17947" -> "17950" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/334-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/334-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/334-cfg.dot	2023-06-07 19:35:28.427384332 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/334-cfg.dot	2023-06-07 19:35:34.937383762 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.addressOf" {  
-"18304" [label = <(METHOD,&lt;operator&gt;.addressOf)> ]
-"18307" [label = <(METHOD_RETURN,ANY)> ]
-  "18304" -> "18307" 
+digraph "GetReturnAddress" {  
+"17951" [label = <(METHOD,GetReturnAddress)> ]
+"17954" [label = <(METHOD_RETURN,ANY)> ]
+  "17951" -> "17954" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/335-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/335-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/335-cfg.dot	2023-06-07 19:35:28.427384332 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/335-cfg.dot	2023-06-07 19:35:34.937383762 +0330
@@ -1,5 +1,5 @@
-digraph "Size" {  
-"18308" [label = <(METHOD,Size)> ]
-"18311" [label = <(METHOD_RETURN,ANY)> ]
-  "18308" -> "18311" 
+digraph "GetSharedObjectKind" {  
+"17955" [label = <(METHOD,GetSharedObjectKind)> ]
+"17959" [label = <(METHOD_RETURN,ANY)> ]
+  "17955" -> "17959" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/336-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/336-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/336-cfg.dot	2023-06-07 19:35:28.427384332 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/336-cfg.dot	2023-06-07 19:35:34.937383762 +0330
@@ -1,5 +1,5 @@
-digraph "DCHECK" {  
-"18312" [label = <(METHOD,DCHECK)> ]
-"18315" [label = <(METHOD_RETURN,ANY)> ]
-  "18312" -> "18315" 
+digraph "CodeRangeCache::GetSingleton" {  
+"17960" [label = <(METHOD,CodeRangeCache::GetSingleton)> ]
+"17963" [label = <(METHOD_RETURN,ANY)> ]
+  "17960" -> "17963" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/337-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/337-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/337-cfg.dot	2023-06-07 19:35:28.427384332 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/337-cfg.dot	2023-06-07 19:35:34.937383762 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.logicalNot" {  
-"18316" [label = <(METHOD,&lt;operator&gt;.logicalNot)> ]
-"18319" [label = <(METHOD_RETURN,ANY)> ]
-  "18316" -> "18319" 
+digraph "GetInstrumentation" {  
+"17964" [label = <(METHOD,GetInstrumentation)> ]
+"17967" [label = <(METHOD_RETURN,ANY)> ]
+  "17964" -> "17967" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/338-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/338-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/338-cfg.dot	2023-06-07 19:35:28.427384332 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/338-cfg.dot	2023-06-07 19:35:34.937383762 +0330
@@ -1,5 +1,5 @@
-digraph "HasCache" {  
-"18320" [label = <(METHOD,HasCache)> ]
-"18323" [label = <(METHOD_RETURN,ANY)> ]
-  "18320" -> "18323" 
+digraph "Runtime::Current" {  
+"17968" [label = <(METHOD,Runtime::Current)> ]
+"17971" [label = <(METHOD_RETURN,ANY)> ]
+  "17968" -> "17971" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/339-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/339-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/339-cfg.dot	2023-06-07 19:35:28.427384332 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/339-cfg.dot	2023-06-07 19:35:34.937383762 +0330
@@ -1,5 +1,5 @@
-digraph "dl_iterate_phdr" {  
-"18324" [label = <(METHOD,dl_iterate_phdr)> ]
-"18328" [label = <(METHOD_RETURN,ANY)> ]
-  "18324" -> "18328" 
+digraph "&lt;operator&gt;.indirectIndexAccess" {  
+"17972" [label = <(METHOD,&lt;operator&gt;.indirectIndexAccess)> ]
+"17976" [label = <(METHOD_RETURN,ANY)> ]
+  "17972" -> "17976" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/34-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/34-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/34-cfg.dot	2023-06-07 19:35:28.227384349 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/34-cfg.dot	2023-06-07 19:35:34.747383777 +0330
@@ -1,5 +1,7 @@
-digraph "ThrowSIOOBE" {  
-"878" [label = <(METHOD,ThrowSIOOBE)<SUB>629</SUB>> ]
-"884" [label = <(METHOD_RETURN,void)<SUB>629</SUB>> ]
-  "878" -> "884" 
+digraph "GetVersion" {  
+"733" [label = <(RETURN,return JNI_VERSION_1_6;,return JNI_VERSION_1_6;)<SUB>646</SUB>> ]
+"730" [label = <(METHOD,GetVersion)<SUB>645</SUB>> ]
+"735" [label = <(METHOD_RETURN,jint)<SUB>645</SUB>> ]
+  "733" -> "735" 
+  "730" -> "733" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/340-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/340-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/340-cfg.dot	2023-06-07 19:35:28.427384332 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/340-cfg.dot	2023-06-07 19:35:34.937383762 +0330
@@ -1,5 +1,5 @@
-digraph "Build" {  
-"18329" [label = <(METHOD,Build)> ]
-"18332" [label = <(METHOD_RETURN,ANY)> ]
-  "18329" -> "18332" 
+digraph "&lt;operator&gt;.assignmentPlus" {  
+"17977" [label = <(METHOD,&lt;operator&gt;.assignmentPlus)> ]
+"17981" [label = <(METHOD_RETURN,ANY)> ]
+  "17977" -> "17981" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/341-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/341-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/341-cfg.dot	2023-06-07 19:35:28.427384332 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/341-cfg.dot	2023-06-07 19:35:34.937383762 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.indirectFieldAccess" {  
-"18333" [label = <(METHOD,&lt;operator&gt;.indirectFieldAccess)> ]
-"18337" [label = <(METHOD_RETURN,ANY)> ]
-  "18333" -> "18337" 
+digraph "find" {  
+"17982" [label = <(METHOD,find)> ]
+"17986" [label = <(METHOD_RETURN,ANY)> ]
+  "17982" -> "17986" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/342-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/342-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/342-cfg.dot	2023-06-07 19:35:28.427384332 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/342-cfg.dot	2023-06-07 19:35:34.937383762 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK" {  
-"18338" [label = <(METHOD,CHECK)> ]
-"18341" [label = <(METHOD_RETURN,ANY)> ]
-  "18338" -> "18341" 
+digraph "LOG" {  
+"17987" [label = <(METHOD,LOG)> ]
+"17990" [label = <(METHOD_RETURN,ANY)> ]
+  "17987" -> "17990" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/343-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/343-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/343-cfg.dot	2023-06-07 19:35:28.427384332 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/343-cfg.dot	2023-06-07 19:35:34.937383762 +0330
@@ -1,5 +1,5 @@
-digraph "Lookup" {  
-"18342" [label = <(METHOD,Lookup)> ]
-"18346" [label = <(METHOD_RETURN,ANY)> ]
-  "18342" -> "18346" 
+digraph "std::replace" {  
+"17991" [label = <(METHOD,std::replace)> ]
+"17998" [label = <(METHOD_RETURN,ANY)> ]
+  "17991" -> "17998" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/344-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/344-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/344-cfg.dot	2023-06-07 19:35:28.427384332 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/344-cfg.dot	2023-06-07 19:35:34.937383762 +0330
@@ -1,5 +1,5 @@
-digraph "Type" {  
-"18347" [label = <(METHOD,Type)> ]
-"18350" [label = <(METHOD_RETURN,ANY)> ]
-  "18347" -> "18350" 
+digraph "begin" {  
+"17999" [label = <(METHOD,begin)> ]
+"18002" [label = <(METHOD_RETURN,ANY)> ]
+  "17999" -> "18002" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/345-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/345-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/345-cfg.dot	2023-06-07 19:35:28.427384332 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/345-cfg.dot	2023-06-07 19:35:34.937383762 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.greaterEqualsThan" {  
-"18351" [label = <(METHOD,&lt;operator&gt;.greaterEqualsThan)> ]
-"18355" [label = <(METHOD_RETURN,ANY)> ]
-  "18351" -> "18355" 
+digraph "end" {  
+"18003" [label = <(METHOD,end)> ]
+"18006" [label = <(METHOD_RETURN,ANY)> ]
+  "18003" -> "18006" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/346-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/346-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/346-cfg.dot	2023-06-07 19:35:28.427384332 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/346-cfg.dot	2023-06-07 19:35:34.937383762 +0330
@@ -1,5 +1,5 @@
-digraph "art::LocationIsOnApex" {  
-"18356" [label = <(METHOD,art::LocationIsOnApex)> ]
-"18360" [label = <(METHOD_RETURN,ANY)> ]
-  "18356" -> "18360" 
+digraph "h_klass" {  
+"18007" [label = <(METHOD,h_klass)> ]
+"18010" [label = <(METHOD_RETURN,ANY)> ]
+  "18007" -> "18010" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/347-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/347-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/347-cfg.dot	2023-06-07 19:35:28.427384332 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/347-cfg.dot	2023-06-07 19:35:34.937383762 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.preIncrement" {  
-"18361" [label = <(METHOD,&lt;operator&gt;.preIncrement)> ]
-"18364" [label = <(METHOD_RETURN,ANY)> ]
-  "18361" -> "18364" 
+digraph "NewHandle" {  
+"18011" [label = <(METHOD,NewHandle)> ]
+"18015" [label = <(METHOD_RETURN,ANY)> ]
+  "18011" -> "18015" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/348-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/348-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/348-cfg.dot	2023-06-07 19:35:28.427384332 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/348-cfg.dot	2023-06-07 19:35:34.937383762 +0330
@@ -1,5 +1,5 @@
-digraph "GetReturnAddress" {  
-"18365" [label = <(METHOD,GetReturnAddress)> ]
-"18368" [label = <(METHOD_RETURN,ANY)> ]
-  "18365" -> "18368" 
+digraph "GetImagePointerSize" {  
+"18016" [label = <(METHOD,GetImagePointerSize)> ]
+"18019" [label = <(METHOD_RETURN,ANY)> ]
+  "18016" -> "18019" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/349-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/349-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/349-cfg.dot	2023-06-07 19:35:28.427384332 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/349-cfg.dot	2023-06-07 19:35:34.937383762 +0330
@@ -1,5 +1,5 @@
-digraph "GetSharedObjectKind" {  
-"18369" [label = <(METHOD,GetSharedObjectKind)> ]
-"18373" [label = <(METHOD_RETURN,ANY)> ]
-  "18369" -> "18373" 
+digraph "GetClassLinker" {  
+"18020" [label = <(METHOD,GetClassLinker)> ]
+"18023" [label = <(METHOD_RETURN,ANY)> ]
+  "18020" -> "18023" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/35-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/35-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/35-cfg.dot	2023-06-07 19:35:28.227384349 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/35-cfg.dot	2023-06-07 19:35:34.747383777 +0330
@@ -1,5 +1,11 @@
-digraph "ThrowNewException" {  
-"889" [label = <(METHOD,ThrowNewException)<SUB>637</SUB>> ]
-"895" [label = <(METHOD_RETURN,int)<SUB>637</SUB>> ]
-  "889" -> "895" 
+digraph "DefineClass" {  
+"744" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI DefineClass is not supported&quot;)<SUB>650</SUB>> ]
+"748" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>651</SUB>> ]
+"745" [label = <(LOG,LOG(WARNING))<SUB>650</SUB>> ]
+"737" [label = <(METHOD,DefineClass)<SUB>649</SUB>> ]
+"750" [label = <(METHOD_RETURN,jclass)<SUB>649</SUB>> ]
+  "744" -> "748" 
+  "748" -> "750" 
+  "745" -> "744" 
+  "737" -> "745" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/350-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/350-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/350-cfg.dot	2023-06-07 19:35:28.427384332 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/350-cfg.dot	2023-06-07 19:35:34.937383762 +0330
@@ -1,5 +1,5 @@
-digraph "CodeRangeCache::GetSingleton" {  
-"18374" [label = <(METHOD,CodeRangeCache::GetSingleton)> ]
-"18377" [label = <(METHOD_RETURN,ANY)> ]
-  "18374" -> "18377" 
+digraph "&lt;operator&gt;.greaterThan" {  
+"18024" [label = <(METHOD,&lt;operator&gt;.greaterThan)> ]
+"18028" [label = <(METHOD_RETURN,ANY)> ]
+  "18024" -> "18028" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/351-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/351-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/351-cfg.dot	2023-06-07 19:35:28.427384332 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/351-cfg.dot	2023-06-07 19:35:34.937383762 +0330
@@ -1,5 +1,5 @@
-digraph "GetInstrumentation" {  
-"18378" [label = <(METHOD,GetInstrumentation)> ]
-"18381" [label = <(METHOD_RETURN,ANY)> ]
-  "18378" -> "18381" 
+digraph "GetSystemClassLoader" {  
+"18029" [label = <(METHOD,GetSystemClassLoader)> ]
+"18032" [label = <(METHOD_RETURN,ANY)> ]
+  "18029" -> "18032" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/352-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/352-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/352-cfg.dot	2023-06-07 19:35:28.427384332 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/352-cfg.dot	2023-06-07 19:35:34.937383762 +0330
@@ -1,5 +1,5 @@
-digraph "Runtime::Current" {  
-"18382" [label = <(METHOD,Runtime::Current)> ]
-"18385" [label = <(METHOD_RETURN,ANY)> ]
-  "18382" -> "18385" 
+digraph "c" {  
+"18033" [label = <(METHOD,c)> ]
+"18036" [label = <(METHOD_RETURN,ANY)> ]
+  "18033" -> "18036" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/353-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/353-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/353-cfg.dot	2023-06-07 19:35:28.427384332 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/353-cfg.dot	2023-06-07 19:35:34.937383762 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.indirectIndexAccess" {  
-"18386" [label = <(METHOD,&lt;operator&gt;.indirectIndexAccess)> ]
-"18390" [label = <(METHOD_RETURN,ANY)> ]
-  "18386" -> "18390" 
+digraph "Self" {  
+"18037" [label = <(METHOD,Self)> ]
+"18040" [label = <(METHOD_RETURN,ANY)> ]
+  "18037" -> "18040" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/354-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/354-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/354-cfg.dot	2023-06-07 19:35:28.427384332 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/354-cfg.dot	2023-06-07 19:35:34.937383762 +0330
@@ -1,5 +1,5 @@
-digraph "find" {  
-"18391" [label = <(METHOD,find)> ]
-"18395" [label = <(METHOD_RETURN,ANY)> ]
-  "18391" -> "18395" 
+digraph "GetVm" {  
+"18041" [label = <(METHOD,GetVm)> ]
+"18044" [label = <(METHOD_RETURN,ANY)> ]
+  "18041" -> "18044" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/355-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/355-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/355-cfg.dot	2023-06-07 19:35:28.427384332 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/355-cfg.dot	2023-06-07 19:35:34.937383762 +0330
@@ -1,5 +1,5 @@
-digraph "LOG" {  
-"18396" [label = <(METHOD,LOG)> ]
-"18399" [label = <(METHOD_RETURN,ANY)> ]
-  "18396" -> "18399" 
+digraph "CHECK_NON_NULL_ARGUMENT" {  
+"18045" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT)<SUB>605</SUB>> ]
+"18048" [label = <(METHOD_RETURN,ANY)> ]
+  "18045" -> "18048" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/356-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/356-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/356-cfg.dot	2023-06-07 19:35:28.427384332 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/356-cfg.dot	2023-06-07 19:35:34.937383762 +0330
@@ -1,5 +1,5 @@
-digraph "std::replace" {  
-"18400" [label = <(METHOD,std::replace)> ]
-"18407" [label = <(METHOD_RETURN,ANY)> ]
-  "18400" -> "18407" 
+digraph "UNLIKELY" {  
+"18049" [label = <(METHOD,UNLIKELY)> ]
+"18052" [label = <(METHOD_RETURN,ANY)> ]
+  "18049" -> "18052" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/357-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/357-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/357-cfg.dot	2023-06-07 19:35:28.427384332 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/357-cfg.dot	2023-06-07 19:35:34.937383762 +0330
@@ -1,5 +1,5 @@
-digraph "begin" {  
-"18408" [label = <(METHOD,begin)> ]
-"18411" [label = <(METHOD_RETURN,ANY)> ]
-  "18408" -> "18411" 
+digraph "CHECK_NON_NULL_ARGUMENT(name)" {  
+"18053" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(name))> ]
+"18058" [label = <(METHOD_RETURN,ANY)> ]
+  "18053" -> "18058" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/358-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/358-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/358-cfg.dot	2023-06-07 19:35:28.427384332 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/358-cfg.dot	2023-06-07 19:35:34.937383762 +0330
@@ -1,5 +1,5 @@
-digraph "end" {  
-"18412" [label = <(METHOD,end)> ]
-"18415" [label = <(METHOD_RETURN,ANY)> ]
-  "18412" -> "18415" 
+digraph "descriptor" {  
+"18059" [label = <(METHOD,descriptor)> ]
+"18062" [label = <(METHOD_RETURN,ANY)> ]
+  "18059" -> "18062" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/359-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/359-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/359-cfg.dot	2023-06-07 19:35:28.427384332 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/359-cfg.dot	2023-06-07 19:35:34.937383762 +0330
@@ -1,5 +1,5 @@
-digraph "h_klass" {  
-"18416" [label = <(METHOD,h_klass)> ]
-"18419" [label = <(METHOD_RETURN,ANY)> ]
-  "18416" -> "18419" 
+digraph "soa" {  
+"18063" [label = <(METHOD,soa)> ]
+"18066" [label = <(METHOD_RETURN,ANY)> ]
+  "18063" -> "18066" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/36-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/36-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/36-cfg.dot	2023-06-07 19:35:28.227384349 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/36-cfg.dot	2023-06-07 19:35:34.747383777 +0330
@@ -1,17 +1,142 @@
-digraph "JavaVmExtFromEnv" {  
-"902" [label = <(RETURN,return reinterpret_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm();,return reinterpret_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm();)<SUB>680</SUB>> ]
-"903" [label = <(GetVm,reinterpret_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm())<SUB>680</SUB>> ]
-"904" [label = <(&lt;operator&gt;.indirectFieldAccess,reinterpret_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm)<SUB>680</SUB>> ]
-"905" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;JNIEnvExt*&gt;(env))<SUB>680</SUB>> ]
-"908" [label = <(FIELD_IDENTIFIER,GetVm,GetVm)<SUB>680</SUB>> ]
-"906" [label = <(UNKNOWN,JNIEnvExt*,JNIEnvExt*)<SUB>680</SUB>> ]
-"899" [label = <(METHOD,JavaVmExtFromEnv)<SUB>679</SUB>> ]
-"909" [label = <(METHOD_RETURN,JavaVMExt)<SUB>679</SUB>> ]
-  "902" -> "909" 
-  "903" -> "902" 
-  "904" -> "903" 
-  "905" -> "908" 
-  "908" -> "904" 
-  "906" -> "905" 
-  "899" -> "906" 
+digraph "FindClass" {  
+"756" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(name))<SUB>655</SUB>> ]
+"775" [label = <(&lt;operator&gt;.assignment,* runtime = Runtime::Current())<SUB>656</SUB>> ]
+"782" [label = <(&lt;operator&gt;.assignment,* class_linker = runtime-&gt;GetClassLinker())<SUB>657</SUB>> ]
+"789" [label = <(descriptor,descriptor(NormalizeJniClassDescriptor(name)))<SUB>658</SUB>> ]
+"793" [label = <(soa,soa(env))<SUB>659</SUB>> ]
+"795" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c = nullptr)<SUB>660</SUB>> ]
+"863" [label = <(RETURN,return soa.AddLocalReference&lt;jclass&gt;(c);,return soa.AddLocalReference&lt;jclass&gt;(c);)<SUB>668</SUB>> ]
+"777" [label = <(Runtime::Current,Runtime::Current())<SUB>656</SUB>> ]
+"784" [label = <(GetClassLinker,runtime-&gt;GetClassLinker())<SUB>657</SUB>> ]
+"790" [label = <(NormalizeJniClassDescriptor,NormalizeJniClassDescriptor(name))<SUB>658</SUB>> ]
+"796" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c)<SUB>660</SUB>> ]
+"805" [label = <(IsStarted,runtime-&gt;IsStarted())<SUB>661</SUB>> ]
+"864" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jclass&gt;(c))<SUB>668</SUB>> ]
+"778" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>656</SUB>> ]
+"785" [label = <(&lt;operator&gt;.indirectFieldAccess,runtime-&gt;GetClassLinker)<SUB>657</SUB>> ]
+"797" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>660</SUB>> ]
+"806" [label = <(&lt;operator&gt;.indirectFieldAccess,runtime-&gt;IsStarted)<SUB>661</SUB>> ]
+"810" [label = <(&lt;operator&gt;.greaterThan,StackHandleScope&lt;1&gt; hs(soa.Self()))<SUB>662</SUB>> ]
+"819" [label = <(&lt;operator&gt;.greaterThan,Handle&lt;mirror::ClassLoader&gt; class_loader(hs.NewHandle(GetClassLoader(soa))))<SUB>663</SUB>> ]
+"832" [label = <(&lt;operator&gt;.assignment,c = class_linker-&gt;FindClass(soa.Self(), descriptor.c_str(), class_loader))<SUB>664</SUB>> ]
+"865" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jclass)<SUB>668</SUB>> ]
+"760" [label = <(UNLIKELY,UNLIKELY((name) == nullptr))<SUB>655</SUB>> ]
+"780" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>656</SUB>> ]
+"787" [label = <(FIELD_IDENTIFIER,GetClassLinker,GetClassLinker)<SUB>657</SUB>> ]
+"799" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>660</SUB>> ]
+"808" [label = <(FIELD_IDENTIFIER,IsStarted,IsStarted)<SUB>661</SUB>> ]
+"811" [label = <(&lt;operator&gt;.lessThan,StackHandleScope&lt;1)<SUB>662</SUB>> ]
+"814" [label = <(hs,hs(soa.Self()))<SUB>662</SUB>> ]
+"820" [label = <(&lt;operator&gt;.lessThan,Handle&lt;mirror::ClassLoader)<SUB>663</SUB>> ]
+"825" [label = <(class_loader,class_loader(hs.NewHandle(GetClassLoader(soa))))<SUB>663</SUB>> ]
+"834" [label = <(FindClass,class_linker-&gt;FindClass(soa.Self(), descriptor.c_str(), class_loader))<SUB>664</SUB>> ]
+"849" [label = <(&lt;operator&gt;.assignment,c = class_linker-&gt;FindSystemClass(soa.Self(), descriptor.c_str()))<SUB>666</SUB>> ]
+"866" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>668</SUB>> ]
+"761" [label = <(&lt;operator&gt;.equals,(name) == nullptr)<SUB>655</SUB>> ]
+"765" [label = <(CHECK_NON_NULL_ARGUMENT(name),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;name == null&quot;))<SUB>655</SUB>> ]
+"772" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(name),CHECK_NON_NULL_ARGUMENT(name))<SUB>655</SUB>> ]
+"801" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>660</SUB>> ]
+"815" [label = <(Self,soa.Self())<SUB>662</SUB>> ]
+"822" [label = <(&lt;operator&gt;.fieldAccess,mirror::ClassLoader)<SUB>663</SUB>> ]
+"826" [label = <(NewHandle,hs.NewHandle(GetClassLoader(soa)))<SUB>663</SUB>> ]
+"835" [label = <(&lt;operator&gt;.indirectFieldAccess,class_linker-&gt;FindClass)<SUB>664</SUB>> ]
+"838" [label = <(Self,soa.Self())<SUB>664</SUB>> ]
+"842" [label = <(c_str,descriptor.c_str())<SUB>664</SUB>> ]
+"851" [label = <(FindSystemClass,class_linker-&gt;FindSystemClass(soa.Self(), descriptor.c_str()))<SUB>666</SUB>> ]
+"868" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>668</SUB>> ]
+"766" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>655</SUB>> ]
+"816" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>662</SUB>> ]
+"824" [label = <(FIELD_IDENTIFIER,ClassLoader,ClassLoader)<SUB>663</SUB>> ]
+"827" [label = <(&lt;operator&gt;.fieldAccess,hs.NewHandle)<SUB>663</SUB>> ]
+"830" [label = <(GetClassLoader,GetClassLoader(soa))<SUB>663</SUB>> ]
+"837" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>664</SUB>> ]
+"839" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>664</SUB>> ]
+"843" [label = <(&lt;operator&gt;.fieldAccess,descriptor.c_str)<SUB>664</SUB>> ]
+"852" [label = <(&lt;operator&gt;.indirectFieldAccess,class_linker-&gt;FindSystemClass)<SUB>666</SUB>> ]
+"855" [label = <(Self,soa.Self())<SUB>666</SUB>> ]
+"859" [label = <(c_str,descriptor.c_str())<SUB>666</SUB>> ]
+"767" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>655</SUB>> ]
+"769" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>655</SUB>> ]
+"818" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>662</SUB>> ]
+"829" [label = <(FIELD_IDENTIFIER,NewHandle,NewHandle)<SUB>663</SUB>> ]
+"841" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>664</SUB>> ]
+"845" [label = <(FIELD_IDENTIFIER,c_str,c_str)<SUB>664</SUB>> ]
+"854" [label = <(FIELD_IDENTIFIER,FindSystemClass,FindSystemClass)<SUB>666</SUB>> ]
+"856" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>666</SUB>> ]
+"860" [label = <(&lt;operator&gt;.fieldAccess,descriptor.c_str)<SUB>666</SUB>> ]
+"858" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>666</SUB>> ]
+"862" [label = <(FIELD_IDENTIFIER,c_str,c_str)<SUB>666</SUB>> ]
+"752" [label = <(METHOD,FindClass)<SUB>654</SUB>> ]
+"871" [label = <(METHOD_RETURN,jclass)<SUB>654</SUB>> ]
+  "756" -> "761" 
+  "756" -> "780" 
+  "775" -> "787" 
+  "782" -> "790" 
+  "789" -> "793" 
+  "793" -> "801" 
+  "795" -> "808" 
+  "863" -> "871" 
+  "777" -> "775" 
+  "784" -> "782" 
+  "790" -> "789" 
+  "796" -> "795" 
+  "805" -> "811" 
+  "805" -> "854" 
+  "864" -> "863" 
+  "778" -> "777" 
+  "785" -> "784" 
+  "797" -> "796" 
+  "806" -> "805" 
+  "810" -> "824" 
+  "819" -> "837" 
+  "832" -> "868" 
+  "865" -> "864" 
+  "760" -> "767" 
+  "760" -> "780" 
+  "780" -> "778" 
+  "787" -> "785" 
+  "799" -> "797" 
+  "808" -> "806" 
+  "811" -> "818" 
+  "814" -> "810" 
+  "820" -> "829" 
+  "825" -> "819" 
+  "834" -> "832" 
+  "849" -> "868" 
+  "866" -> "865" 
+  "761" -> "760" 
+  "765" -> "772" 
+  "772" -> "871" 
+  "801" -> "799" 
+  "815" -> "814" 
+  "822" -> "820" 
+  "826" -> "825" 
+  "835" -> "841" 
+  "838" -> "845" 
+  "842" -> "834" 
+  "851" -> "849" 
+  "868" -> "866" 
+  "766" -> "765" 
+  "816" -> "815" 
+  "824" -> "822" 
+  "827" -> "830" 
+  "830" -> "826" 
+  "837" -> "835" 
+  "839" -> "838" 
+  "843" -> "842" 
+  "852" -> "858" 
+  "855" -> "862" 
+  "859" -> "851" 
+  "767" -> "769" 
+  "769" -> "766" 
+  "818" -> "816" 
+  "829" -> "827" 
+  "841" -> "839" 
+  "845" -> "843" 
+  "854" -> "852" 
+  "856" -> "855" 
+  "860" -> "859" 
+  "858" -> "856" 
+  "862" -> "860" 
+  "752" -> "756" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/360-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/360-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/360-cfg.dot	2023-06-07 19:35:28.427384332 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/360-cfg.dot	2023-06-07 19:35:34.937383762 +0330
@@ -1,5 +1,5 @@
-digraph "NewHandle" {  
-"18420" [label = <(METHOD,NewHandle)> ]
-"18424" [label = <(METHOD_RETURN,ANY)> ]
-  "18420" -> "18424" 
+digraph "IsStarted" {  
+"18067" [label = <(METHOD,IsStarted)> ]
+"18070" [label = <(METHOD_RETURN,ANY)> ]
+  "18067" -> "18070" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/361-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/361-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/361-cfg.dot	2023-06-07 19:35:28.427384332 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/361-cfg.dot	2023-06-07 19:35:34.937383762 +0330
@@ -1,5 +1,5 @@
-digraph "GetImagePointerSize" {  
-"18425" [label = <(METHOD,GetImagePointerSize)> ]
-"18428" [label = <(METHOD_RETURN,ANY)> ]
-  "18425" -> "18428" 
+digraph "class_loader" {  
+"18071" [label = <(METHOD,class_loader)> ]
+"18074" [label = <(METHOD_RETURN,ANY)> ]
+  "18071" -> "18074" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/362-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/362-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/362-cfg.dot	2023-06-07 19:35:28.427384332 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/362-cfg.dot	2023-06-07 19:35:34.937383762 +0330
@@ -1,5 +1,5 @@
-digraph "GetClassLinker" {  
-"18429" [label = <(METHOD,GetClassLinker)> ]
-"18432" [label = <(METHOD_RETURN,ANY)> ]
-  "18429" -> "18432" 
+digraph "FindClass" {  
+"18075" [label = <(METHOD,FindClass)> ]
+"18079" [label = <(METHOD_RETURN,ANY)> ]
+  "18075" -> "18079" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/363-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/363-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/363-cfg.dot	2023-06-07 19:35:28.427384332 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/363-cfg.dot	2023-06-07 19:35:34.937383762 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.greaterThan" {  
-"18433" [label = <(METHOD,&lt;operator&gt;.greaterThan)> ]
-"18437" [label = <(METHOD_RETURN,ANY)> ]
-  "18433" -> "18437" 
+digraph "c_str" {  
+"18080" [label = <(METHOD,c_str)> ]
+"18083" [label = <(METHOD_RETURN,ANY)> ]
+  "18080" -> "18083" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/364-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/364-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/364-cfg.dot	2023-06-07 19:35:28.427384332 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/364-cfg.dot	2023-06-07 19:35:34.937383762 +0330
@@ -1,5 +1,5 @@
-digraph "GetSystemClassLoader" {  
-"18438" [label = <(METHOD,GetSystemClassLoader)> ]
-"18441" [label = <(METHOD_RETURN,ANY)> ]
-  "18438" -> "18441" 
+digraph "FindSystemClass" {  
+"18084" [label = <(METHOD,FindSystemClass)> ]
+"18089" [label = <(METHOD_RETURN,ANY)> ]
+  "18084" -> "18089" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/365-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/365-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/365-cfg.dot	2023-06-07 19:35:28.427384332 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/365-cfg.dot	2023-06-07 19:35:34.937383762 +0330
@@ -1,5 +1,5 @@
-digraph "c" {  
-"18442" [label = <(METHOD,c)> ]
-"18445" [label = <(METHOD_RETURN,ANY)> ]
-  "18442" -> "18445" 
+digraph "CHECK_NON_NULL_ARGUMENT(jlr_method)" {  
+"18090" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(jlr_method))> ]
+"18095" [label = <(METHOD_RETURN,ANY)> ]
+  "18090" -> "18095" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/366-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/366-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/366-cfg.dot	2023-06-07 19:35:28.427384332 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/366-cfg.dot	2023-06-07 19:35:34.937383762 +0330
@@ -1,5 +1,5 @@
-digraph "Self" {  
-"18446" [label = <(METHOD,Self)> ]
-"18449" [label = <(METHOD_RETURN,ANY)> ]
-  "18446" -> "18449" 
+digraph "jni::EncodeArtMethod" {  
+"18096" [label = <(METHOD,jni::EncodeArtMethod)> ]
+"18100" [label = <(METHOD_RETURN,ANY)> ]
+  "18096" -> "18100" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/367-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/367-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/367-cfg.dot	2023-06-07 19:35:28.427384332 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/367-cfg.dot	2023-06-07 19:35:34.937383762 +0330
@@ -1,5 +1,5 @@
-digraph "GetVm" {  
-"18450" [label = <(METHOD,GetVm)> ]
-"18453" [label = <(METHOD_RETURN,ANY)> ]
-  "18450" -> "18453" 
+digraph "ArtMethod::FromReflectedMethod" {  
+"18101" [label = <(METHOD,ArtMethod::FromReflectedMethod)> ]
+"18106" [label = <(METHOD_RETURN,ANY)> ]
+  "18101" -> "18106" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/368-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/368-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/368-cfg.dot	2023-06-07 19:35:28.427384332 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/368-cfg.dot	2023-06-07 19:35:34.937383762 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT" {  
-"18454" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT)<SUB>683</SUB>> ]
-"18457" [label = <(METHOD_RETURN,ANY)> ]
-  "18454" -> "18457" 
+digraph "CHECK_NON_NULL_ARGUMENT(jlr_field)" {  
+"18107" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(jlr_field))> ]
+"18112" [label = <(METHOD_RETURN,ANY)> ]
+  "18107" -> "18112" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/369-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/369-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/369-cfg.dot	2023-06-07 19:35:28.427384332 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/369-cfg.dot	2023-06-07 19:35:34.937383762 +0330
@@ -1,5 +1,5 @@
-digraph "UNLIKELY" {  
-"18458" [label = <(METHOD,UNLIKELY)> ]
-"18461" [label = <(METHOD_RETURN,ANY)> ]
-  "18458" -> "18461" 
+digraph "GetClass" {  
+"18113" [label = <(METHOD,GetClass)> ]
+"18116" [label = <(METHOD_RETURN,ANY)> ]
+  "18113" -> "18116" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/37-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/37-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/37-cfg.dot	2023-06-07 19:35:28.227384349 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/37-cfg.dot	2023-06-07 19:35:34.757383778 +0330
@@ -1,5 +1,39 @@
-digraph "FindMethod" {  
-"911" [label = <(METHOD,FindMethod)<SUB>708</SUB>> ]
-"916" [label = <(METHOD_RETURN,ArtMethod*)<SUB>708</SUB>> ]
-  "911" -> "916" 
+digraph "FromReflectedMethod" {  
+"877" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(jlr_method))<SUB>672</SUB>> ]
+"896" [label = <(soa,soa(env))<SUB>673</SUB>> ]
+"898" [label = <(RETURN,return jni::EncodeArtMethod(ArtMethod::FromReflectedMethod(soa, jlr_method));,return jni::EncodeArtMethod(ArtMethod::FromReflectedMethod(soa, jlr_method));)<SUB>674</SUB>> ]
+"899" [label = <(jni::EncodeArtMethod,jni::EncodeArtMethod(ArtMethod::FromReflectedMethod(soa, jlr_method)))<SUB>674</SUB>> ]
+"900" [label = <(&lt;operator&gt;.fieldAccess,jni::EncodeArtMethod)<SUB>674</SUB>> ]
+"903" [label = <(ArtMethod::FromReflectedMethod,ArtMethod::FromReflectedMethod(soa, jlr_method))<SUB>674</SUB>> ]
+"881" [label = <(UNLIKELY,UNLIKELY((jlr_method) == nullptr))<SUB>672</SUB>> ]
+"902" [label = <(FIELD_IDENTIFIER,EncodeArtMethod,EncodeArtMethod)<SUB>674</SUB>> ]
+"904" [label = <(&lt;operator&gt;.fieldAccess,ArtMethod::FromReflectedMethod)<SUB>674</SUB>> ]
+"882" [label = <(&lt;operator&gt;.equals,(jlr_method) == nullptr)<SUB>672</SUB>> ]
+"886" [label = <(CHECK_NON_NULL_ARGUMENT(jlr_method),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;jlr_method == null&quot;))<SUB>672</SUB>> ]
+"893" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(jlr_method),CHECK_NON_NULL_ARGUMENT(jlr_method))<SUB>672</SUB>> ]
+"906" [label = <(FIELD_IDENTIFIER,FromReflectedMethod,FromReflectedMethod)<SUB>674</SUB>> ]
+"887" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>672</SUB>> ]
+"888" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>672</SUB>> ]
+"890" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>672</SUB>> ]
+"873" [label = <(METHOD,FromReflectedMethod)<SUB>671</SUB>> ]
+"909" [label = <(METHOD_RETURN,jmethodID)<SUB>671</SUB>> ]
+  "877" -> "882" 
+  "877" -> "896" 
+  "896" -> "902" 
+  "898" -> "909" 
+  "899" -> "898" 
+  "900" -> "906" 
+  "903" -> "899" 
+  "881" -> "888" 
+  "881" -> "896" 
+  "902" -> "900" 
+  "904" -> "903" 
+  "882" -> "881" 
+  "886" -> "893" 
+  "893" -> "909" 
+  "906" -> "904" 
+  "887" -> "886" 
+  "888" -> "890" 
+  "890" -> "887" 
+  "873" -> "877" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/370-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/370-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/370-cfg.dot	2023-06-07 19:35:28.427384332 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/370-cfg.dot	2023-06-07 19:35:34.937383762 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT(name)" {  
-"18462" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(name))> ]
-"18467" [label = <(METHOD_RETURN,ANY)> ]
-  "18462" -> "18467" 
+digraph "GetClassRoot&lt;mirror::Field&gt;" {  
+"18117" [label = <(METHOD,GetClassRoot&lt;mirror::Field&gt;)> ]
+"18119" [label = <(METHOD_RETURN,ANY)> ]
+  "18117" -> "18119" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/371-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/371-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/371-cfg.dot	2023-06-07 19:35:28.427384332 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/371-cfg.dot	2023-06-07 19:35:34.937383762 +0330
@@ -1,5 +1,5 @@
-digraph "descriptor" {  
-"18468" [label = <(METHOD,descriptor)> ]
-"18471" [label = <(METHOD_RETURN,ANY)> ]
-  "18468" -> "18471" 
+digraph "::DownCast" {  
+"18120" [label = <(METHOD,::DownCast)> ]
+"18124" [label = <(METHOD_RETURN,ANY)> ]
+  "18120" -> "18124" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/372-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/372-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/372-cfg.dot	2023-06-07 19:35:28.427384332 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/372-cfg.dot	2023-06-07 19:35:34.937383762 +0330
@@ -1,5 +1,5 @@
-digraph "soa" {  
-"18472" [label = <(METHOD,soa)> ]
-"18475" [label = <(METHOD_RETURN,ANY)> ]
-  "18472" -> "18475" 
+digraph "jni::EncodeArtField" {  
+"18125" [label = <(METHOD,jni::EncodeArtField)> ]
+"18129" [label = <(METHOD_RETURN,ANY)> ]
+  "18125" -> "18129" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/373-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/373-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/373-cfg.dot	2023-06-07 19:35:28.427384332 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/373-cfg.dot	2023-06-07 19:35:34.937383762 +0330
@@ -1,5 +1,5 @@
-digraph "IsStarted" {  
-"18476" [label = <(METHOD,IsStarted)> ]
-"18479" [label = <(METHOD_RETURN,ANY)> ]
-  "18476" -> "18479" 
+digraph "GetArtField" {  
+"18130" [label = <(METHOD,GetArtField)> ]
+"18133" [label = <(METHOD_RETURN,ANY)> ]
+  "18130" -> "18133" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/374-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/374-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/374-cfg.dot	2023-06-07 19:35:28.427384332 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/374-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "class_loader" {  
-"18480" [label = <(METHOD,class_loader)> ]
-"18483" [label = <(METHOD_RETURN,ANY)> ]
-  "18480" -> "18483" 
+digraph "CHECK_NON_NULL_ARGUMENT(mid)" {  
+"18134" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(mid))> ]
+"18139" [label = <(METHOD_RETURN,ANY)> ]
+  "18134" -> "18139" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/375-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/375-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/375-cfg.dot	2023-06-07 19:35:28.427384332 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/375-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "FindClass" {  
-"18484" [label = <(METHOD,FindClass)> ]
-"18488" [label = <(METHOD_RETURN,ANY)> ]
-  "18484" -> "18488" 
+digraph "jni::DecodeArtMethod" {  
+"18140" [label = <(METHOD,jni::DecodeArtMethod)> ]
+"18144" [label = <(METHOD_RETURN,ANY)> ]
+  "18140" -> "18144" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/376-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/376-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/376-cfg.dot	2023-06-07 19:35:28.427384332 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/376-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "c_str" {  
-"18489" [label = <(METHOD,c_str)> ]
-"18492" [label = <(METHOD_RETURN,ANY)> ]
-  "18489" -> "18492" 
+digraph "DCHECK_EQ" {  
+"18145" [label = <(METHOD,DCHECK_EQ)> ]
+"18149" [label = <(METHOD_RETURN,ANY)> ]
+  "18145" -> "18149" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/377-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/377-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/377-cfg.dot	2023-06-07 19:35:28.427384332 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/377-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "FindSystemClass" {  
-"18493" [label = <(METHOD,FindSystemClass)> ]
-"18498" [label = <(METHOD_RETURN,ANY)> ]
-  "18493" -> "18498" 
+digraph "IsActiveTransaction" {  
+"18150" [label = <(METHOD,IsActiveTransaction)> ]
+"18153" [label = <(METHOD_RETURN,ANY)> ]
+  "18150" -> "18153" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/378-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/378-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/378-cfg.dot	2023-06-07 19:35:28.427384332 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/378-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT(jlr_method)" {  
-"18499" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(jlr_method))> ]
-"18504" [label = <(METHOD_RETURN,ANY)> ]
-  "18499" -> "18504" 
+digraph "IsConstructor" {  
+"18154" [label = <(METHOD,IsConstructor)> ]
+"18157" [label = <(METHOD_RETURN,ANY)> ]
+  "18154" -> "18157" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/379-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/379-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/379-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/379-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "jni::EncodeArtMethod" {  
-"18505" [label = <(METHOD,jni::EncodeArtMethod)> ]
-"18509" [label = <(METHOD_RETURN,ANY)> ]
-  "18505" -> "18509" 
+digraph "mirror::Constructor::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;" {  
+"18158" [label = <(METHOD,mirror::Constructor::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;)> ]
+"18163" [label = <(METHOD_RETURN,ANY)> ]
+  "18158" -> "18163" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/38-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/38-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/38-cfg.dot	2023-06-07 19:35:28.227384349 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/38-cfg.dot	2023-06-07 19:35:34.757383778 +0330
@@ -1,7 +1,98 @@
-digraph "GetVersion" {  
-"926" [label = <(RETURN,return JNI_VERSION_1_6;,return JNI_VERSION_1_6;)<SUB>724</SUB>> ]
-"923" [label = <(METHOD,GetVersion)<SUB>723</SUB>> ]
-"928" [label = <(METHOD_RETURN,jint)<SUB>723</SUB>> ]
+digraph "FromReflectedField" {  
+"915" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(jlr_field))<SUB>678</SUB>> ]
+"934" [label = <(soa,soa(env))<SUB>679</SUB>> ]
+"936" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; obj_field = soa.Decode&lt;mirror::Object&gt;(jlr_field))<SUB>680</SUB>> ]
+"963" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Field&gt; field = ObjPtr&lt;mirror::Field&gt;::DownCast(obj_field))<SUB>685</SUB>> ]
+"982" [label = <(RETURN,return jni::EncodeArtField(field-&gt;GetArtField());,return jni::EncodeArtField(field-&gt;GetArtField());)<SUB>686</SUB>> ]
+"937" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; obj_field)<SUB>680</SUB>> ]
+"944" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(jlr_field))<SUB>680</SUB>> ]
+"954" [label = <(&lt;operator&gt;.notEquals,obj_field-&gt;GetClass() != GetClassRoot&lt;mirror::Field&gt;())<SUB>681</SUB>> ]
+"964" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Field&gt; field)<SUB>685</SUB>> ]
+"971" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Field&gt;::DownCast(obj_field))<SUB>685</SUB>> ]
+"983" [label = <(jni::EncodeArtField,jni::EncodeArtField(field-&gt;GetArtField()))<SUB>686</SUB>> ]
+"938" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>680</SUB>> ]
+"945" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>680</SUB>> ]
+"955" [label = <(GetClass,obj_field-&gt;GetClass())<SUB>681</SUB>> ]
+"959" [label = <(GetClassRoot&lt;mirror::Field&gt;,GetClassRoot&lt;mirror::Field&gt;())<SUB>681</SUB>> ]
+"961" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>683</SUB>> ]
+"965" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Field)<SUB>685</SUB>> ]
+"972" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Field)<SUB>685</SUB>> ]
+"977" [label = <(::DownCast,::DownCast(obj_field))<SUB>685</SUB>> ]
+"984" [label = <(&lt;operator&gt;.fieldAccess,jni::EncodeArtField)<SUB>686</SUB>> ]
+"987" [label = <(GetArtField,field-&gt;GetArtField())<SUB>686</SUB>> ]
+"919" [label = <(UNLIKELY,UNLIKELY((jlr_field) == nullptr))<SUB>678</SUB>> ]
+"940" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>680</SUB>> ]
+"946" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>680</SUB>> ]
+"949" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>680</SUB>> ]
+"956" [label = <(&lt;operator&gt;.indirectFieldAccess,obj_field-&gt;GetClass)<SUB>681</SUB>> ]
+"967" [label = <(&lt;operator&gt;.fieldAccess,mirror::Field)<SUB>685</SUB>> ]
+"974" [label = <(&lt;operator&gt;.fieldAccess,mirror::Field)<SUB>685</SUB>> ]
+"978" [label = <(&lt;operator&gt;.fieldAccess,::DownCast)<SUB>685</SUB>> ]
+"986" [label = <(FIELD_IDENTIFIER,EncodeArtField,EncodeArtField)<SUB>686</SUB>> ]
+"988" [label = <(&lt;operator&gt;.indirectFieldAccess,field-&gt;GetArtField)<SUB>686</SUB>> ]
+"920" [label = <(&lt;operator&gt;.equals,(jlr_field) == nullptr)<SUB>678</SUB>> ]
+"924" [label = <(CHECK_NON_NULL_ARGUMENT(jlr_field),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;jlr_field == null&quot;))<SUB>678</SUB>> ]
+"931" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(jlr_field),CHECK_NON_NULL_ARGUMENT(jlr_field))<SUB>678</SUB>> ]
+"942" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>680</SUB>> ]
+"948" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>680</SUB>> ]
+"951" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>680</SUB>> ]
+"958" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>681</SUB>> ]
+"969" [label = <(FIELD_IDENTIFIER,Field,Field)<SUB>685</SUB>> ]
+"976" [label = <(FIELD_IDENTIFIER,Field,Field)<SUB>685</SUB>> ]
+"980" [label = <(FIELD_IDENTIFIER,DownCast,DownCast)<SUB>685</SUB>> ]
+"990" [label = <(FIELD_IDENTIFIER,GetArtField,GetArtField)<SUB>686</SUB>> ]
+"925" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>678</SUB>> ]
+"926" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>678</SUB>> ]
+"928" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>678</SUB>> ]
+"911" [label = <(METHOD,FromReflectedField)<SUB>677</SUB>> ]
+"991" [label = <(METHOD_RETURN,jfieldID)<SUB>677</SUB>> ]
+  "915" -> "920" 
+  "915" -> "934" 
+  "934" -> "942" 
+  "936" -> "958" 
+  "963" -> "986" 
+  "982" -> "991" 
+  "937" -> "948" 
+  "944" -> "936" 
+  "954" -> "961" 
+  "954" -> "969" 
+  "964" -> "976" 
+  "971" -> "963" 
+  "983" -> "982" 
+  "938" -> "937" 
+  "945" -> "944" 
+  "955" -> "959" 
+  "959" -> "954" 
+  "961" -> "991" 
+  "965" -> "964" 
+  "972" -> "980" 
+  "977" -> "971" 
+  "984" -> "990" 
+  "987" -> "983" 
+  "919" -> "926" 
+  "919" -> "934" 
+  "940" -> "938" 
+  "946" -> "951" 
+  "949" -> "945" 
+  "956" -> "955" 
+  "967" -> "965" 
+  "974" -> "972" 
+  "978" -> "977" 
+  "986" -> "984" 
+  "988" -> "987" 
+  "920" -> "919" 
+  "924" -> "931" 
+  "931" -> "991" 
+  "942" -> "940" 
+  "948" -> "946" 
+  "951" -> "949" 
+  "958" -> "956" 
+  "969" -> "967" 
+  "976" -> "974" 
+  "980" -> "978" 
+  "990" -> "988" 
+  "925" -> "924" 
   "926" -> "928" 
-  "923" -> "926" 
+  "928" -> "925" 
+  "911" -> "915" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/380-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/380-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/380-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/380-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "ArtMethod::FromReflectedMethod" {  
-"18510" [label = <(METHOD,ArtMethod::FromReflectedMethod)> ]
-"18515" [label = <(METHOD_RETURN,ANY)> ]
-  "18510" -> "18515" 
+digraph "mirror::Method::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;" {  
+"18164" [label = <(METHOD,mirror::Method::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;)> ]
+"18169" [label = <(METHOD_RETURN,ANY)> ]
+  "18164" -> "18169" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/381-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/381-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/381-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/381-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT(jlr_field)" {  
-"18516" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(jlr_field))> ]
-"18521" [label = <(METHOD_RETURN,ANY)> ]
-  "18516" -> "18521" 
+digraph "CHECK_NON_NULL_ARGUMENT(fid)" {  
+"18170" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(fid))> ]
+"18175" [label = <(METHOD_RETURN,ANY)> ]
+  "18170" -> "18175" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/382-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/382-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/382-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/382-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "GetClass" {  
-"18522" [label = <(METHOD,GetClass)> ]
-"18525" [label = <(METHOD_RETURN,ANY)> ]
-  "18522" -> "18525" 
+digraph "jni::DecodeArtField" {  
+"18176" [label = <(METHOD,jni::DecodeArtField)> ]
+"18180" [label = <(METHOD_RETURN,ANY)> ]
+  "18176" -> "18180" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/383-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/383-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/383-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/383-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "GetClassRoot&lt;mirror::Field&gt;" {  
-"18526" [label = <(METHOD,GetClassRoot&lt;mirror::Field&gt;)> ]
-"18528" [label = <(METHOD_RETURN,ANY)> ]
-  "18526" -> "18528" 
+digraph "&lt;operator&gt;.bracketedPrimary" {  
+"18181" [label = <(METHOD,&lt;operator&gt;.bracketedPrimary)> ]
+"18184" [label = <(METHOD_RETURN,ANY)> ]
+  "18181" -> "18184" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/384-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/384-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/384-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/384-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "::DownCast" {  
-"18529" [label = <(METHOD,::DownCast)> ]
-"18533" [label = <(METHOD_RETURN,ANY)> ]
-  "18529" -> "18533" 
+digraph "&lt;operator&gt;.expressionList" {  
+"18185" [label = <(METHOD,&lt;operator&gt;.expressionList)> ]
+"18190" [label = <(METHOD_RETURN,ANY)> ]
+  "18185" -> "18190" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/385-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/385-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/385-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/385-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "jni::EncodeArtField" {  
-"18534" [label = <(METHOD,jni::EncodeArtField)> ]
-"18538" [label = <(METHOD_RETURN,ANY)> ]
-  "18534" -> "18538" 
+digraph "CHECK_NON_NULL_ARGUMENT(java_object)" {  
+"18191" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(java_object))> ]
+"18196" [label = <(METHOD_RETURN,ANY)> ]
+  "18191" -> "18196" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/386-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/386-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/386-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/386-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "GetArtField" {  
-"18539" [label = <(METHOD,GetArtField)> ]
-"18542" [label = <(METHOD_RETURN,ANY)> ]
-  "18539" -> "18542" 
+digraph "CHECK_NON_NULL_ARGUMENT(java_class)" {  
+"18197" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(java_class))> ]
+"18202" [label = <(METHOD_RETURN,ANY)> ]
+  "18197" -> "18202" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/387-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/387-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/387-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/387-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT(mid)" {  
-"18543" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(mid))> ]
-"18548" [label = <(METHOD_RETURN,ANY)> ]
-  "18543" -> "18548" 
+digraph "IsInterface" {  
+"18203" [label = <(METHOD,IsInterface)> ]
+"18206" [label = <(METHOD_RETURN,ANY)> ]
+  "18203" -> "18206" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/388-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/388-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/388-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/388-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "jni::DecodeArtMethod" {  
-"18549" [label = <(METHOD,jni::DecodeArtMethod)> ]
-"18553" [label = <(METHOD_RETURN,ANY)> ]
-  "18549" -> "18553" 
+digraph "GetSuperClass" {  
+"18207" [label = <(METHOD,GetSuperClass)> ]
+"18210" [label = <(METHOD_RETURN,ANY)> ]
+  "18207" -> "18210" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/389-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/389-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/389-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/389-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "DCHECK_EQ" {  
-"18554" [label = <(METHOD,DCHECK_EQ)> ]
-"18558" [label = <(METHOD_RETURN,ANY)> ]
-  "18554" -> "18558" 
+digraph "CHECK_NON_NULL_ARGUMENT_RETURN" {  
+"18211" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN)<SUB>614</SUB>> ]
+"18215" [label = <(METHOD_RETURN,ANY)> ]
+  "18211" -> "18215" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/39-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/39-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/39-cfg.dot	2023-06-07 19:35:28.227384349 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/39-cfg.dot	2023-06-07 19:35:34.757383778 +0330
@@ -1,11 +1,126 @@
-digraph "DefineClass" {  
-"937" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI DefineClass is not supported&quot;)<SUB>728</SUB>> ]
-"941" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>729</SUB>> ]
-"938" [label = <(LOG,LOG(WARNING))<SUB>728</SUB>> ]
-"930" [label = <(METHOD,DefineClass)<SUB>727</SUB>> ]
-"943" [label = <(METHOD_RETURN,jclass)<SUB>727</SUB>> ]
-  "937" -> "941" 
-  "941" -> "943" 
-  "938" -> "937" 
-  "930" -> "938" 
+digraph "ToReflectedMethod" {  
+"999" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>690</SUB>> ]
+"1018" [label = <(soa,soa(env))<SUB>691</SUB>> ]
+"1021" [label = <(&lt;operator&gt;.assignment,* m = jni::DecodeArtMethod(mid))<SUB>692</SUB>> ]
+"1028" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Executable&gt; method)<SUB>693</SUB>> ]
+"1035" [label = <(DCHECK_EQ,DCHECK_EQ(Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize(), kRuntimePointerSize))<SUB>694</SUB>> ]
+"1047" [label = <(DCHECK,DCHECK(!Runtime::Current()-&gt;IsActiveTransaction()))<SUB>695</SUB>> ]
+"1090" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(method);,return soa.AddLocalReference&lt;jobject&gt;(method);)<SUB>701</SUB>> ]
+"1023" [label = <(jni::DecodeArtMethod,jni::DecodeArtMethod(mid))<SUB>692</SUB>> ]
+"1029" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Executable)<SUB>693</SUB>> ]
+"1036" [label = <(GetImagePointerSize,Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize())<SUB>694</SUB>> ]
+"1048" [label = <(&lt;operator&gt;.logicalNot,!Runtime::Current()-&gt;IsActiveTransaction())<SUB>695</SUB>> ]
+"1057" [label = <(IsConstructor,m-&gt;IsConstructor())<SUB>696</SUB>> ]
+"1091" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(method))<SUB>701</SUB>> ]
+"1024" [label = <(&lt;operator&gt;.fieldAccess,jni::DecodeArtMethod)<SUB>692</SUB>> ]
+"1031" [label = <(&lt;operator&gt;.fieldAccess,mirror::Executable)<SUB>693</SUB>> ]
+"1037" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize)<SUB>694</SUB>> ]
+"1049" [label = <(IsActiveTransaction,Runtime::Current()-&gt;IsActiveTransaction())<SUB>695</SUB>> ]
+"1058" [label = <(&lt;operator&gt;.indirectFieldAccess,m-&gt;IsConstructor)<SUB>696</SUB>> ]
+"1062" [label = <(&lt;operator&gt;.assignment,method = mirror::Constructor::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;(soa.Self(), m))<SUB>697</SUB>> ]
+"1092" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>701</SUB>> ]
+"1003" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>690</SUB>> ]
+"1026" [label = <(FIELD_IDENTIFIER,DecodeArtMethod,DecodeArtMethod)<SUB>692</SUB>> ]
+"1033" [label = <(FIELD_IDENTIFIER,Executable,Executable)<SUB>693</SUB>> ]
+"1038" [label = <(GetClassLinker,Runtime::Current()-&gt;GetClassLinker())<SUB>694</SUB>> ]
+"1045" [label = <(FIELD_IDENTIFIER,GetImagePointerSize,GetImagePointerSize)<SUB>694</SUB>> ]
+"1050" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;IsActiveTransaction)<SUB>695</SUB>> ]
+"1060" [label = <(FIELD_IDENTIFIER,IsConstructor,IsConstructor)<SUB>696</SUB>> ]
+"1064" [label = <(mirror::Constructor::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;,mirror::Constructor::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;(soa.Self(), m))<SUB>697</SUB>> ]
+"1077" [label = <(&lt;operator&gt;.assignment,method = mirror::Method::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;(soa.Self(), m))<SUB>699</SUB>> ]
+"1093" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>701</SUB>> ]
+"1004" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>690</SUB>> ]
+"1008" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>690</SUB>> ]
+"1015" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>690</SUB>> ]
+"1039" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetClassLinker)<SUB>694</SUB>> ]
+"1051" [label = <(Runtime::Current,Runtime::Current())<SUB>695</SUB>> ]
+"1055" [label = <(FIELD_IDENTIFIER,IsActiveTransaction,IsActiveTransaction)<SUB>695</SUB>> ]
+"1065" [label = <(&lt;operator&gt;.fieldAccess,mirror::Constructor::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;)<SUB>697</SUB>> ]
+"1070" [label = <(Self,soa.Self())<SUB>697</SUB>> ]
+"1079" [label = <(mirror::Method::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;,mirror::Method::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;(soa.Self(), m))<SUB>699</SUB>> ]
+"1095" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>701</SUB>> ]
+"1009" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>690</SUB>> ]
+"1040" [label = <(Runtime::Current,Runtime::Current())<SUB>694</SUB>> ]
+"1044" [label = <(FIELD_IDENTIFIER,GetClassLinker,GetClassLinker)<SUB>694</SUB>> ]
+"1052" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>695</SUB>> ]
+"1066" [label = <(&lt;operator&gt;.fieldAccess,mirror::Constructor)<SUB>697</SUB>> ]
+"1069" [label = <(FIELD_IDENTIFIER,CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;,CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;)<SUB>697</SUB>> ]
+"1071" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>697</SUB>> ]
+"1080" [label = <(&lt;operator&gt;.fieldAccess,mirror::Method::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;)<SUB>699</SUB>> ]
+"1085" [label = <(Self,soa.Self())<SUB>699</SUB>> ]
+"1010" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>690</SUB>> ]
+"1012" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>690</SUB>> ]
+"1041" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>694</SUB>> ]
+"1054" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>695</SUB>> ]
+"1073" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>697</SUB>> ]
+"1081" [label = <(&lt;operator&gt;.fieldAccess,mirror::Method)<SUB>699</SUB>> ]
+"1084" [label = <(FIELD_IDENTIFIER,CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;,CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;)<SUB>699</SUB>> ]
+"1086" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>699</SUB>> ]
+"1043" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>694</SUB>> ]
+"1088" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>699</SUB>> ]
+"993" [label = <(METHOD,ToReflectedMethod)<SUB>689</SUB>> ]
+"1098" [label = <(METHOD_RETURN,jobject)<SUB>689</SUB>> ]
+  "999" -> "1004" 
+  "999" -> "1018" 
+  "1018" -> "1026" 
+  "1021" -> "1033" 
+  "1028" -> "1043" 
+  "1035" -> "1054" 
+  "1047" -> "1060" 
+  "1090" -> "1098" 
+  "1023" -> "1021" 
+  "1029" -> "1028" 
+  "1036" -> "1035" 
+  "1048" -> "1047" 
+  "1057" -> "1066" 
+  "1057" -> "1081" 
+  "1091" -> "1090" 
+  "1024" -> "1023" 
+  "1031" -> "1029" 
+  "1037" -> "1036" 
+  "1049" -> "1048" 
+  "1058" -> "1057" 
+  "1062" -> "1095" 
+  "1092" -> "1091" 
+  "1003" -> "1010" 
+  "1003" -> "1018" 
+  "1026" -> "1024" 
+  "1033" -> "1031" 
+  "1038" -> "1045" 
+  "1045" -> "1037" 
+  "1050" -> "1049" 
+  "1060" -> "1058" 
+  "1064" -> "1062" 
+  "1077" -> "1095" 
+  "1093" -> "1092" 
+  "1004" -> "1003" 
+  "1008" -> "1015" 
+  "1015" -> "1098" 
+  "1039" -> "1038" 
+  "1051" -> "1055" 
+  "1055" -> "1050" 
+  "1065" -> "1073" 
+  "1070" -> "1064" 
+  "1079" -> "1077" 
+  "1095" -> "1093" 
+  "1009" -> "1008" 
+  "1040" -> "1044" 
+  "1044" -> "1039" 
+  "1052" -> "1051" 
+  "1066" -> "1069" 
+  "1069" -> "1065" 
+  "1071" -> "1070" 
+  "1080" -> "1088" 
+  "1085" -> "1079" 
+  "1010" -> "1012" 
+  "1012" -> "1009" 
+  "1041" -> "1040" 
+  "1054" -> "1052" 
+  "1073" -> "1071" 
+  "1081" -> "1084" 
+  "1084" -> "1080" 
+  "1086" -> "1085" 
+  "1043" -> "1041" 
+  "1088" -> "1086" 
+  "993" -> "999" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/390-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/390-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/390-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/390-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "IsActiveTransaction" {  
-"18559" [label = <(METHOD,IsActiveTransaction)> ]
-"18562" [label = <(METHOD_RETURN,ANY)> ]
-  "18559" -> "18562" 
+digraph "CHECK_NON_NULL_ARGUMENT_RETURN(java_class1, JNI_FALSE)" {  
+"18216" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN(java_class1, JNI_FALSE))> ]
+"18221" [label = <(METHOD_RETURN,ANY)> ]
+  "18216" -> "18221" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/391-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/391-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/391-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/391-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "IsConstructor" {  
-"18563" [label = <(METHOD,IsConstructor)> ]
-"18566" [label = <(METHOD_RETURN,ANY)> ]
-  "18563" -> "18566" 
+digraph "CHECK_NON_NULL_ARGUMENT_RETURN(java_class2, JNI_FALSE)" {  
+"18222" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN(java_class2, JNI_FALSE))> ]
+"18227" [label = <(METHOD_RETURN,ANY)> ]
+  "18222" -> "18227" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/392-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/392-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/392-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/392-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "mirror::Constructor::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;" {  
-"18567" [label = <(METHOD,mirror::Constructor::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;)> ]
-"18572" [label = <(METHOD_RETURN,ANY)> ]
-  "18567" -> "18572" 
+digraph "IsAssignableFrom" {  
+"18228" [label = <(METHOD,IsAssignableFrom)> ]
+"18232" [label = <(METHOD_RETURN,ANY)> ]
+  "18228" -> "18232" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/393-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/393-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/393-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/393-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "mirror::Method::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;" {  
-"18573" [label = <(METHOD,mirror::Method::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;)> ]
-"18578" [label = <(METHOD_RETURN,ANY)> ]
-  "18573" -> "18578" 
+digraph "CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_FALSE)" {  
+"18233" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_FALSE))> ]
+"18238" [label = <(METHOD_RETURN,ANY)> ]
+  "18233" -> "18238" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/394-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/394-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/394-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/394-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT(fid)" {  
-"18579" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(fid))> ]
-"18584" [label = <(METHOD_RETURN,ANY)> ]
-  "18579" -> "18584" 
+digraph "InstanceOf" {  
+"18239" [label = <(METHOD,InstanceOf)> ]
+"18243" [label = <(METHOD_RETURN,ANY)> ]
+  "18239" -> "18243" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/395-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/395-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/395-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/395-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "jni::DecodeArtField" {  
-"18585" [label = <(METHOD,jni::DecodeArtField)> ]
-"18589" [label = <(METHOD_RETURN,ANY)> ]
-  "18585" -> "18589" 
+digraph "SetException" {  
+"18244" [label = <(METHOD,SetException)> ]
+"18248" [label = <(METHOD_RETURN,ANY)> ]
+  "18244" -> "18248" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/396-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/396-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/396-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/396-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.bracketedPrimary" {  
-"18590" [label = <(METHOD,&lt;operator&gt;.bracketedPrimary)> ]
-"18593" [label = <(METHOD_RETURN,ANY)> ]
-  "18590" -> "18593" 
+digraph "CHECK_NON_NULL_ARGUMENT_RETURN(c, JNI_ERR)" {  
+"18249" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN(c, JNI_ERR))> ]
+"18254" [label = <(METHOD_RETURN,ANY)> ]
+  "18249" -> "18254" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/397-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/397-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/397-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/397-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.expressionList" {  
-"18594" [label = <(METHOD,&lt;operator&gt;.expressionList)> ]
-"18599" [label = <(METHOD_RETURN,ANY)> ]
-  "18594" -> "18599" 
+digraph "IsExceptionPending" {  
+"18255" [label = <(METHOD,IsExceptionPending)> ]
+"18258" [label = <(METHOD_RETURN,ANY)> ]
+  "18255" -> "18258" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/398-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/398-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/398-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/398-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT(java_object)" {  
-"18600" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(java_object))> ]
-"18605" [label = <(METHOD_RETURN,ANY)> ]
-  "18600" -> "18605" 
+digraph "ClearException" {  
+"18259" [label = <(METHOD,ClearException)> ]
+"18262" [label = <(METHOD_RETURN,ANY)> ]
+  "18259" -> "18262" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/399-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/399-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/399-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/399-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT(java_class)" {  
-"18606" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(java_class))> ]
-"18611" [label = <(METHOD_RETURN,ANY)> ]
-  "18606" -> "18611" 
+digraph "GetException" {  
+"18263" [label = <(METHOD,GetException)> ]
+"18266" [label = <(METHOD_RETURN,ANY)> ]
+  "18263" -> "18266" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/4-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/4-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/4-cfg.dot	2023-06-07 19:35:28.207384350 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/4-cfg.dot	2023-06-07 19:35:34.737383779 +0330
@@ -1,5 +1,9 @@
-digraph "ScopedVAArgs" {  
-"25" [label = <(METHOD,ScopedVAArgs)<SUB>79</SUB>> ]
-"28" [label = <(METHOD_RETURN,ANY)<SUB>79</SUB>> ]
-  "25" -> "28" 
+digraph "~ScopedVAArgs" {  
+"26" [label = <(va_end,va_end(*args))<SUB>78</SUB>> ]
+"27" [label = <(&lt;operator&gt;.indirection,*args)<SUB>78</SUB>> ]
+"24" [label = <(METHOD,~ScopedVAArgs)<SUB>78</SUB>> ]
+"29" [label = <(METHOD_RETURN,ANY)<SUB>78</SUB>> ]
+  "26" -> "29" 
+  "27" -> "26" 
+  "24" -> "27" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/40-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/40-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/40-cfg.dot	2023-06-07 19:35:28.227384349 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/40-cfg.dot	2023-06-07 19:35:34.757383778 +0330
@@ -1,142 +1,63 @@
-digraph "FindClass" {  
-"949" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(name))<SUB>733</SUB>> ]
-"968" [label = <(&lt;operator&gt;.assignment,* runtime = Runtime::Current())<SUB>734</SUB>> ]
-"975" [label = <(&lt;operator&gt;.assignment,* class_linker = runtime-&gt;GetClassLinker())<SUB>735</SUB>> ]
-"982" [label = <(descriptor,descriptor(NormalizeJniClassDescriptor(name)))<SUB>736</SUB>> ]
-"986" [label = <(soa,soa(env))<SUB>737</SUB>> ]
-"988" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c = nullptr)<SUB>738</SUB>> ]
-"1056" [label = <(RETURN,return soa.AddLocalReference&lt;jclass&gt;(c);,return soa.AddLocalReference&lt;jclass&gt;(c);)<SUB>746</SUB>> ]
-"970" [label = <(Runtime::Current,Runtime::Current())<SUB>734</SUB>> ]
-"977" [label = <(GetClassLinker,runtime-&gt;GetClassLinker())<SUB>735</SUB>> ]
-"983" [label = <(NormalizeJniClassDescriptor,NormalizeJniClassDescriptor(name))<SUB>736</SUB>> ]
-"989" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c)<SUB>738</SUB>> ]
-"998" [label = <(IsStarted,runtime-&gt;IsStarted())<SUB>739</SUB>> ]
-"1057" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jclass&gt;(c))<SUB>746</SUB>> ]
-"971" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>734</SUB>> ]
-"978" [label = <(&lt;operator&gt;.indirectFieldAccess,runtime-&gt;GetClassLinker)<SUB>735</SUB>> ]
-"990" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>738</SUB>> ]
-"999" [label = <(&lt;operator&gt;.indirectFieldAccess,runtime-&gt;IsStarted)<SUB>739</SUB>> ]
-"1003" [label = <(&lt;operator&gt;.greaterThan,StackHandleScope&lt;1&gt; hs(soa.Self()))<SUB>740</SUB>> ]
-"1012" [label = <(&lt;operator&gt;.greaterThan,Handle&lt;mirror::ClassLoader&gt; class_loader(hs.NewHandle(GetClassLoader(soa))))<SUB>741</SUB>> ]
-"1025" [label = <(&lt;operator&gt;.assignment,c = class_linker-&gt;FindClass(soa.Self(), descriptor.c_str(), class_loader))<SUB>742</SUB>> ]
-"1058" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jclass)<SUB>746</SUB>> ]
-"953" [label = <(UNLIKELY,UNLIKELY((name) == nullptr))<SUB>733</SUB>> ]
-"973" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>734</SUB>> ]
-"980" [label = <(FIELD_IDENTIFIER,GetClassLinker,GetClassLinker)<SUB>735</SUB>> ]
-"992" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>738</SUB>> ]
-"1001" [label = <(FIELD_IDENTIFIER,IsStarted,IsStarted)<SUB>739</SUB>> ]
-"1004" [label = <(&lt;operator&gt;.lessThan,StackHandleScope&lt;1)<SUB>740</SUB>> ]
-"1007" [label = <(hs,hs(soa.Self()))<SUB>740</SUB>> ]
-"1013" [label = <(&lt;operator&gt;.lessThan,Handle&lt;mirror::ClassLoader)<SUB>741</SUB>> ]
-"1018" [label = <(class_loader,class_loader(hs.NewHandle(GetClassLoader(soa))))<SUB>741</SUB>> ]
-"1027" [label = <(FindClass,class_linker-&gt;FindClass(soa.Self(), descriptor.c_str(), class_loader))<SUB>742</SUB>> ]
-"1042" [label = <(&lt;operator&gt;.assignment,c = class_linker-&gt;FindSystemClass(soa.Self(), descriptor.c_str()))<SUB>744</SUB>> ]
-"1059" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>746</SUB>> ]
-"954" [label = <(&lt;operator&gt;.equals,(name) == nullptr)<SUB>733</SUB>> ]
-"958" [label = <(CHECK_NON_NULL_ARGUMENT(name),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;name == null&quot;))<SUB>733</SUB>> ]
-"965" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(name),CHECK_NON_NULL_ARGUMENT(name))<SUB>733</SUB>> ]
-"994" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>738</SUB>> ]
-"1008" [label = <(Self,soa.Self())<SUB>740</SUB>> ]
-"1015" [label = <(&lt;operator&gt;.fieldAccess,mirror::ClassLoader)<SUB>741</SUB>> ]
-"1019" [label = <(NewHandle,hs.NewHandle(GetClassLoader(soa)))<SUB>741</SUB>> ]
-"1028" [label = <(&lt;operator&gt;.indirectFieldAccess,class_linker-&gt;FindClass)<SUB>742</SUB>> ]
-"1031" [label = <(Self,soa.Self())<SUB>742</SUB>> ]
-"1035" [label = <(c_str,descriptor.c_str())<SUB>742</SUB>> ]
-"1044" [label = <(FindSystemClass,class_linker-&gt;FindSystemClass(soa.Self(), descriptor.c_str()))<SUB>744</SUB>> ]
-"1061" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>746</SUB>> ]
-"959" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>733</SUB>> ]
-"1009" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>740</SUB>> ]
-"1017" [label = <(FIELD_IDENTIFIER,ClassLoader,ClassLoader)<SUB>741</SUB>> ]
-"1020" [label = <(&lt;operator&gt;.fieldAccess,hs.NewHandle)<SUB>741</SUB>> ]
-"1023" [label = <(GetClassLoader,GetClassLoader(soa))<SUB>741</SUB>> ]
-"1030" [label = <(FIELD_IDENTIFIER,FindClass,FindClass)<SUB>742</SUB>> ]
-"1032" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>742</SUB>> ]
-"1036" [label = <(&lt;operator&gt;.fieldAccess,descriptor.c_str)<SUB>742</SUB>> ]
-"1045" [label = <(&lt;operator&gt;.indirectFieldAccess,class_linker-&gt;FindSystemClass)<SUB>744</SUB>> ]
-"1048" [label = <(Self,soa.Self())<SUB>744</SUB>> ]
-"1052" [label = <(c_str,descriptor.c_str())<SUB>744</SUB>> ]
-"960" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>733</SUB>> ]
-"962" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>733</SUB>> ]
-"1011" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>740</SUB>> ]
-"1022" [label = <(FIELD_IDENTIFIER,NewHandle,NewHandle)<SUB>741</SUB>> ]
-"1034" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>742</SUB>> ]
-"1038" [label = <(FIELD_IDENTIFIER,c_str,c_str)<SUB>742</SUB>> ]
-"1047" [label = <(FIELD_IDENTIFIER,FindSystemClass,FindSystemClass)<SUB>744</SUB>> ]
-"1049" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>744</SUB>> ]
-"1053" [label = <(&lt;operator&gt;.fieldAccess,descriptor.c_str)<SUB>744</SUB>> ]
-"1051" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>744</SUB>> ]
-"1055" [label = <(FIELD_IDENTIFIER,c_str,c_str)<SUB>744</SUB>> ]
-"945" [label = <(METHOD,FindClass)<SUB>732</SUB>> ]
-"1064" [label = <(METHOD_RETURN,jclass)<SUB>732</SUB>> ]
-  "949" -> "954" 
-  "949" -> "973" 
-  "968" -> "980" 
-  "975" -> "983" 
-  "982" -> "986" 
-  "986" -> "994" 
-  "988" -> "1001" 
-  "1056" -> "1064" 
-  "970" -> "968" 
-  "977" -> "975" 
-  "983" -> "982" 
-  "989" -> "988" 
-  "998" -> "1004" 
-  "998" -> "1047" 
-  "1057" -> "1056" 
-  "971" -> "970" 
-  "978" -> "977" 
-  "990" -> "989" 
-  "999" -> "998" 
-  "1003" -> "1017" 
-  "1012" -> "1030" 
-  "1025" -> "1061" 
-  "1058" -> "1057" 
-  "953" -> "960" 
-  "953" -> "973" 
-  "973" -> "971" 
-  "980" -> "978" 
-  "992" -> "990" 
-  "1001" -> "999" 
-  "1004" -> "1011" 
-  "1007" -> "1003" 
-  "1013" -> "1022" 
-  "1018" -> "1012" 
-  "1027" -> "1025" 
-  "1042" -> "1061" 
-  "1059" -> "1058" 
-  "954" -> "953" 
-  "958" -> "965" 
-  "965" -> "1064" 
-  "994" -> "992" 
-  "1008" -> "1007" 
-  "1015" -> "1013" 
-  "1019" -> "1018" 
-  "1028" -> "1034" 
-  "1031" -> "1038" 
-  "1035" -> "1027" 
-  "1044" -> "1042" 
-  "1061" -> "1059" 
-  "959" -> "958" 
-  "1009" -> "1008" 
-  "1017" -> "1015" 
-  "1020" -> "1023" 
-  "1023" -> "1019" 
-  "1030" -> "1028" 
-  "1032" -> "1031" 
-  "1036" -> "1035" 
-  "1045" -> "1051" 
-  "1048" -> "1055" 
-  "1052" -> "1044" 
-  "960" -> "962" 
-  "962" -> "959" 
-  "1011" -> "1009" 
-  "1022" -> "1020" 
-  "1034" -> "1032" 
-  "1038" -> "1036" 
-  "1047" -> "1045" 
-  "1049" -> "1048" 
-  "1053" -> "1052" 
-  "1051" -> "1049" 
-  "1055" -> "1053" 
-  "945" -> "949" 
+digraph "ToReflectedField" {  
+"1106" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(fid))<SUB>705</SUB>> ]
+"1125" [label = <(soa,soa(env))<SUB>706</SUB>> ]
+"1128" [label = <(&lt;operator&gt;.assignment,* f = jni::DecodeArtField(fid))<SUB>707</SUB>> ]
+"1135" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(\012        mirror::Field::CreateFromArtField&lt;kRuntimePointerSize&gt;(soa.Self(), f, true));,return soa.AddLocalReference&lt;jobject&gt;(\012        mirror::Field::CreateFromArtField&lt;kRuntimePointerSize&gt;(soa.Self(), f, true));)<SUB>708</SUB>> ]
+"1130" [label = <(jni::DecodeArtField,jni::DecodeArtField(fid))<SUB>707</SUB>> ]
+"1136" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(\012        mirror::Field::CreateFromArtField&lt;kRuntimePointerSize&gt;(soa.Self(), f, true)))<SUB>708</SUB>> ]
+"1131" [label = <(&lt;operator&gt;.fieldAccess,jni::DecodeArtField)<SUB>707</SUB>> ]
+"1137" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>708</SUB>> ]
+"1142" [label = <(&lt;operator&gt;.greaterThan,mirror::Field::CreateFromArtField&lt;kRuntimePointerSize&gt;(soa.Self(), f, true))<SUB>709</SUB>> ]
+"1110" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>705</SUB>> ]
+"1133" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>707</SUB>> ]
+"1138" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>708</SUB>> ]
+"1143" [label = <(&lt;operator&gt;.lessThan,mirror::Field::CreateFromArtField&lt;kRuntimePointerSize)<SUB>709</SUB>> ]
+"1150" [label = <(&lt;operator&gt;.bracketedPrimary,(soa.Self(), f, true))<SUB>709</SUB>> ]
+"1111" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>705</SUB>> ]
+"1115" [label = <(CHECK_NON_NULL_ARGUMENT(fid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>705</SUB>> ]
+"1122" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(fid),CHECK_NON_NULL_ARGUMENT(fid))<SUB>705</SUB>> ]
+"1140" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>708</SUB>> ]
+"1144" [label = <(&lt;operator&gt;.fieldAccess,mirror::Field::CreateFromArtField)<SUB>709</SUB>> ]
+"1151" [label = <(&lt;operator&gt;.expressionList,soa.Self(), f, true)<SUB>709</SUB>> ]
+"1116" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>705</SUB>> ]
+"1145" [label = <(&lt;operator&gt;.fieldAccess,mirror::Field)<SUB>709</SUB>> ]
+"1148" [label = <(FIELD_IDENTIFIER,CreateFromArtField,CreateFromArtField)<SUB>709</SUB>> ]
+"1152" [label = <(Self,soa.Self())<SUB>709</SUB>> ]
+"1117" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>705</SUB>> ]
+"1119" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>705</SUB>> ]
+"1153" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>709</SUB>> ]
+"1155" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>709</SUB>> ]
+"1100" [label = <(METHOD,ToReflectedField)<SUB>704</SUB>> ]
+"1158" [label = <(METHOD_RETURN,jobject)<SUB>704</SUB>> ]
+  "1106" -> "1111" 
+  "1106" -> "1125" 
+  "1125" -> "1133" 
+  "1128" -> "1140" 
+  "1135" -> "1158" 
+  "1130" -> "1128" 
+  "1136" -> "1135" 
+  "1131" -> "1130" 
+  "1137" -> "1145" 
+  "1142" -> "1136" 
+  "1110" -> "1117" 
+  "1110" -> "1125" 
+  "1133" -> "1131" 
+  "1138" -> "1137" 
+  "1143" -> "1155" 
+  "1150" -> "1142" 
+  "1111" -> "1110" 
+  "1115" -> "1122" 
+  "1122" -> "1158" 
+  "1140" -> "1138" 
+  "1144" -> "1143" 
+  "1151" -> "1150" 
+  "1116" -> "1115" 
+  "1145" -> "1148" 
+  "1148" -> "1144" 
+  "1152" -> "1151" 
+  "1117" -> "1119" 
+  "1119" -> "1116" 
+  "1153" -> "1152" 
+  "1155" -> "1153" 
+  "1100" -> "1106" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/400-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/400-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/400-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/400-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "IsInterface" {  
-"18612" [label = <(METHOD,IsInterface)> ]
-"18615" [label = <(METHOD_RETURN,ANY)> ]
-  "18612" -> "18615" 
+digraph "old_exception" {  
+"18267" [label = <(METHOD,old_exception)> ]
+"18270" [label = <(METHOD_RETURN,ANY)> ]
+  "18267" -> "18270" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/401-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/401-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/401-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/401-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "GetSuperClass" {  
-"18616" [label = <(METHOD,GetSuperClass)> ]
-"18619" [label = <(METHOD_RETURN,ANY)> ]
-  "18616" -> "18619" 
+digraph "exception" {  
+"18271" [label = <(METHOD,exception)> ]
+"18275" [label = <(METHOD_RETURN,ANY)> ]
+  "18271" -> "18275" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/402-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/402-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/402-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/402-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_RETURN" {  
-"18620" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN)<SUB>692</SUB>> ]
-"18624" [label = <(METHOD_RETURN,ANY)> ]
-  "18620" -> "18624" 
+digraph "Get" {  
+"18276" [label = <(METHOD,Get)> ]
+"18279" [label = <(METHOD_RETURN,ANY)> ]
+  "18276" -> "18279" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/403-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/403-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/403-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/403-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_RETURN(java_class1, JNI_FALSE)" {  
-"18625" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN(java_class1, JNI_FALSE))> ]
-"18630" [label = <(METHOD_RETURN,ANY)> ]
-  "18625" -> "18630" 
+digraph "exception_class" {  
+"18280" [label = <(METHOD,exception_class)> ]
+"18284" [label = <(METHOD_RETURN,ANY)> ]
+  "18280" -> "18284" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/404-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/404-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/404-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/404-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_RETURN(java_class2, JNI_FALSE)" {  
-"18631" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN(java_class2, JNI_FALSE))> ]
-"18636" [label = <(METHOD_RETURN,ANY)> ]
-  "18631" -> "18636" 
+digraph "GetObjectClass" {  
+"18285" [label = <(METHOD,GetObjectClass)> ]
+"18289" [label = <(METHOD_RETURN,ANY)> ]
+  "18285" -> "18289" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/405-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/405-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/405-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/405-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "IsAssignableFrom" {  
-"18637" [label = <(METHOD,IsAssignableFrom)> ]
-"18641" [label = <(METHOD_RETURN,ANY)> ]
-  "18637" -> "18641" 
+digraph "get" {  
+"18290" [label = <(METHOD,get)> ]
+"18293" [label = <(METHOD_RETURN,ANY)> ]
+  "18290" -> "18293" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/406-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/406-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/406-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/406-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_FALSE)" {  
-"18642" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_FALSE))> ]
-"18647" [label = <(METHOD_RETURN,ANY)> ]
-  "18642" -> "18647" 
+digraph "GetMethodID" {  
+"18294" [label = <(METHOD,GetMethodID)> ]
+"18300" [label = <(METHOD_RETURN,ANY)> ]
+  "18294" -> "18300" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/407-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/407-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/407-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/407-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "InstanceOf" {  
-"18648" [label = <(METHOD,InstanceOf)> ]
-"18652" [label = <(METHOD_RETURN,ANY)> ]
-  "18648" -> "18652" 
+digraph "mirror::Object::PrettyTypeOf" {  
+"18301" [label = <(METHOD,mirror::Object::PrettyTypeOf)> ]
+"18305" [label = <(METHOD_RETURN,ANY)> ]
+  "18301" -> "18305" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/408-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/408-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/408-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/408-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "SetException" {  
-"18653" [label = <(METHOD,SetException)> ]
-"18657" [label = <(METHOD_RETURN,ANY)> ]
-  "18653" -> "18657" 
+digraph "CallVoidMethod" {  
+"18306" [label = <(METHOD,CallVoidMethod)> ]
+"18311" [label = <(METHOD_RETURN,ANY)> ]
+  "18306" -> "18311" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/409-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/409-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/409-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/409-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_RETURN(c, JNI_ERR)" {  
-"18658" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN(c, JNI_ERR))> ]
-"18663" [label = <(METHOD_RETURN,ANY)> ]
-  "18658" -> "18663" 
+digraph "EnsureLocalCapacityInternal" {  
+"18312" [label = <(METHOD,EnsureLocalCapacityInternal)> ]
+"18317" [label = <(METHOD_RETURN,ANY)> ]
+  "18312" -> "18317" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/41-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/41-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/41-cfg.dot	2023-06-07 19:35:28.227384349 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/41-cfg.dot	2023-06-07 19:35:34.757383778 +0330
@@ -1,39 +1,63 @@
-digraph "FromReflectedMethod" {  
-"1070" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(jlr_method))<SUB>750</SUB>> ]
-"1089" [label = <(soa,soa(env))<SUB>751</SUB>> ]
-"1091" [label = <(RETURN,return jni::EncodeArtMethod(ArtMethod::FromReflectedMethod(soa, jlr_method));,return jni::EncodeArtMethod(ArtMethod::FromReflectedMethod(soa, jlr_method));)<SUB>752</SUB>> ]
-"1092" [label = <(jni::EncodeArtMethod,jni::EncodeArtMethod(ArtMethod::FromReflectedMethod(soa, jlr_method)))<SUB>752</SUB>> ]
-"1093" [label = <(&lt;operator&gt;.fieldAccess,jni::EncodeArtMethod)<SUB>752</SUB>> ]
-"1096" [label = <(ArtMethod::FromReflectedMethod,ArtMethod::FromReflectedMethod(soa, jlr_method))<SUB>752</SUB>> ]
-"1074" [label = <(UNLIKELY,UNLIKELY((jlr_method) == nullptr))<SUB>750</SUB>> ]
-"1095" [label = <(FIELD_IDENTIFIER,EncodeArtMethod,EncodeArtMethod)<SUB>752</SUB>> ]
-"1097" [label = <(&lt;operator&gt;.fieldAccess,ArtMethod::FromReflectedMethod)<SUB>752</SUB>> ]
-"1075" [label = <(&lt;operator&gt;.equals,(jlr_method) == nullptr)<SUB>750</SUB>> ]
-"1079" [label = <(CHECK_NON_NULL_ARGUMENT(jlr_method),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;jlr_method == null&quot;))<SUB>750</SUB>> ]
-"1086" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(jlr_method),CHECK_NON_NULL_ARGUMENT(jlr_method))<SUB>750</SUB>> ]
-"1099" [label = <(FIELD_IDENTIFIER,FromReflectedMethod,FromReflectedMethod)<SUB>752</SUB>> ]
-"1080" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>750</SUB>> ]
-"1081" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>750</SUB>> ]
-"1083" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>750</SUB>> ]
-"1066" [label = <(METHOD,FromReflectedMethod)<SUB>749</SUB>> ]
-"1102" [label = <(METHOD_RETURN,jmethodID)<SUB>749</SUB>> ]
-  "1070" -> "1075" 
-  "1070" -> "1089" 
-  "1089" -> "1095" 
-  "1091" -> "1102" 
-  "1092" -> "1091" 
-  "1093" -> "1099" 
-  "1096" -> "1092" 
-  "1074" -> "1081" 
-  "1074" -> "1089" 
-  "1095" -> "1093" 
-  "1097" -> "1096" 
-  "1075" -> "1074" 
-  "1079" -> "1086" 
-  "1086" -> "1102" 
-  "1099" -> "1097" 
-  "1080" -> "1079" 
-  "1081" -> "1083" 
-  "1083" -> "1080" 
-  "1066" -> "1070" 
+digraph "GetObjectClass" {  
+"1164" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_object))<SUB>713</SUB>> ]
+"1183" [label = <(soa,soa(env))<SUB>714</SUB>> ]
+"1185" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; o = soa.Decode&lt;mirror::Object&gt;(java_object))<SUB>715</SUB>> ]
+"1202" [label = <(RETURN,return soa.AddLocalReference&lt;jclass&gt;(o-&gt;GetClass());,return soa.AddLocalReference&lt;jclass&gt;(o-&gt;GetClass());)<SUB>716</SUB>> ]
+"1186" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; o)<SUB>715</SUB>> ]
+"1193" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(java_object))<SUB>715</SUB>> ]
+"1203" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jclass&gt;(o-&gt;GetClass()))<SUB>716</SUB>> ]
+"1187" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>715</SUB>> ]
+"1194" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>715</SUB>> ]
+"1204" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jclass)<SUB>716</SUB>> ]
+"1209" [label = <(GetClass,o-&gt;GetClass())<SUB>716</SUB>> ]
+"1168" [label = <(UNLIKELY,UNLIKELY((java_object) == nullptr))<SUB>713</SUB>> ]
+"1189" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>715</SUB>> ]
+"1195" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>715</SUB>> ]
+"1198" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>715</SUB>> ]
+"1205" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>716</SUB>> ]
+"1210" [label = <(&lt;operator&gt;.indirectFieldAccess,o-&gt;GetClass)<SUB>716</SUB>> ]
+"1169" [label = <(&lt;operator&gt;.equals,(java_object) == nullptr)<SUB>713</SUB>> ]
+"1173" [label = <(CHECK_NON_NULL_ARGUMENT(java_object),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_object == null&quot;))<SUB>713</SUB>> ]
+"1180" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_object),CHECK_NON_NULL_ARGUMENT(java_object))<SUB>713</SUB>> ]
+"1191" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>715</SUB>> ]
+"1197" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>715</SUB>> ]
+"1200" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>715</SUB>> ]
+"1207" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>716</SUB>> ]
+"1212" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>716</SUB>> ]
+"1174" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>713</SUB>> ]
+"1175" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>713</SUB>> ]
+"1177" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>713</SUB>> ]
+"1160" [label = <(METHOD,GetObjectClass)<SUB>712</SUB>> ]
+"1213" [label = <(METHOD_RETURN,jclass)<SUB>712</SUB>> ]
+  "1164" -> "1169" 
+  "1164" -> "1183" 
+  "1183" -> "1191" 
+  "1185" -> "1207" 
+  "1202" -> "1213" 
+  "1186" -> "1197" 
+  "1193" -> "1185" 
+  "1203" -> "1202" 
+  "1187" -> "1186" 
+  "1194" -> "1193" 
+  "1204" -> "1212" 
+  "1209" -> "1203" 
+  "1168" -> "1175" 
+  "1168" -> "1183" 
+  "1189" -> "1187" 
+  "1195" -> "1200" 
+  "1198" -> "1194" 
+  "1205" -> "1204" 
+  "1210" -> "1209" 
+  "1169" -> "1168" 
+  "1173" -> "1180" 
+  "1180" -> "1213" 
+  "1191" -> "1189" 
+  "1197" -> "1195" 
+  "1200" -> "1198" 
+  "1207" -> "1205" 
+  "1212" -> "1210" 
+  "1174" -> "1173" 
+  "1175" -> "1177" 
+  "1177" -> "1174" 
+  "1160" -> "1164" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/410-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/410-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/410-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/410-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "IsExceptionPending" {  
-"18664" [label = <(METHOD,IsExceptionPending)> ]
-"18667" [label = <(METHOD_RETURN,ANY)> ]
-  "18664" -> "18667" 
+digraph "PushFrame" {  
+"18318" [label = <(METHOD,PushFrame)> ]
+"18322" [label = <(METHOD_RETURN,ANY)> ]
+  "18318" -> "18322" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/411-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/411-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/411-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/411-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "ClearException" {  
-"18668" [label = <(METHOD,ClearException)> ]
-"18671" [label = <(METHOD_RETURN,ANY)> ]
-  "18668" -> "18671" 
+digraph "down_cast&lt;JNIEnvExt*&gt;" {  
+"18323" [label = <(METHOD,down_cast&lt;JNIEnvExt*&gt;)> ]
+"18326" [label = <(METHOD_RETURN,ANY)> ]
+  "18323" -> "18326" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/412-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/412-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/412-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/412-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "GetException" {  
-"18672" [label = <(METHOD,GetException)> ]
-"18675" [label = <(METHOD_RETURN,ANY)> ]
-  "18672" -> "18675" 
+digraph "PopFrame" {  
+"18327" [label = <(METHOD,PopFrame)> ]
+"18330" [label = <(METHOD_RETURN,ANY)> ]
+  "18327" -> "18330" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/413-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/413-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/413-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/413-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "old_exception" {  
-"18676" [label = <(METHOD,old_exception)> ]
-"18679" [label = <(METHOD_RETURN,ANY)> ]
-  "18676" -> "18679" 
+digraph "Env" {  
+"18331" [label = <(METHOD,Env)> ]
+"18334" [label = <(METHOD_RETURN,ANY)> ]
+  "18331" -> "18334" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/414-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/414-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/414-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/414-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "exception" {  
-"18680" [label = <(METHOD,exception)> ]
-"18684" [label = <(METHOD_RETURN,ANY)> ]
-  "18680" -> "18684" 
+digraph "AddGlobalRef" {  
+"18335" [label = <(METHOD,AddGlobalRef)> ]
+"18340" [label = <(METHOD_RETURN,ANY)> ]
+  "18335" -> "18340" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/415-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/415-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/415-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/415-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "Get" {  
-"18685" [label = <(METHOD,Get)> ]
-"18688" [label = <(METHOD_RETURN,ANY)> ]
-  "18685" -> "18688" 
+digraph "Vm" {  
+"18341" [label = <(METHOD,Vm)> ]
+"18344" [label = <(METHOD_RETURN,ANY)> ]
+  "18341" -> "18344" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/416-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/416-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/416-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/416-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "exception_class" {  
-"18689" [label = <(METHOD,exception_class)> ]
-"18693" [label = <(METHOD_RETURN,ANY)> ]
-  "18689" -> "18693" 
+digraph "DeleteGlobalRef" {  
+"18345" [label = <(METHOD,DeleteGlobalRef)> ]
+"18349" [label = <(METHOD_RETURN,ANY)> ]
+  "18345" -> "18349" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/417-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/417-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/417-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/417-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "GetObjectClass" {  
-"18694" [label = <(METHOD,GetObjectClass)> ]
-"18698" [label = <(METHOD_RETURN,ANY)> ]
-  "18694" -> "18698" 
+digraph "AddWeakGlobalRef" {  
+"18350" [label = <(METHOD,AddWeakGlobalRef)> ]
+"18355" [label = <(METHOD_RETURN,ANY)> ]
+  "18350" -> "18355" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/418-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/418-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/418-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/418-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "get" {  
-"18699" [label = <(METHOD,get)> ]
-"18702" [label = <(METHOD_RETURN,ANY)> ]
-  "18699" -> "18702" 
+digraph "DeleteWeakGlobalRef" {  
+"18356" [label = <(METHOD,DeleteWeakGlobalRef)> ]
+"18361" [label = <(METHOD_RETURN,ANY)> ]
+  "18356" -> "18361" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/419-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/419-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/419-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/419-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "GetMethodID" {  
-"18703" [label = <(METHOD,GetMethodID)> ]
-"18709" [label = <(METHOD_RETURN,ANY)> ]
-  "18703" -> "18709" 
+digraph "Remove" {  
+"18362" [label = <(METHOD,Remove)> ]
+"18367" [label = <(METHOD_RETURN,ANY)> ]
+  "18362" -> "18367" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/42-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/42-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/42-cfg.dot	2023-06-07 19:35:28.227384349 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/42-cfg.dot	2023-06-07 19:35:34.757383778 +0330
@@ -1,98 +1,72 @@
-digraph "FromReflectedField" {  
-"1108" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(jlr_field))<SUB>756</SUB>> ]
-"1127" [label = <(soa,soa(env))<SUB>757</SUB>> ]
-"1129" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; obj_field = soa.Decode&lt;mirror::Object&gt;(jlr_field))<SUB>758</SUB>> ]
-"1156" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Field&gt; field = ObjPtr&lt;mirror::Field&gt;::DownCast(obj_field))<SUB>763</SUB>> ]
-"1175" [label = <(RETURN,return jni::EncodeArtField(field-&gt;GetArtField());,return jni::EncodeArtField(field-&gt;GetArtField());)<SUB>764</SUB>> ]
-"1130" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; obj_field)<SUB>758</SUB>> ]
-"1137" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(jlr_field))<SUB>758</SUB>> ]
-"1147" [label = <(&lt;operator&gt;.notEquals,obj_field-&gt;GetClass() != GetClassRoot&lt;mirror::Field&gt;())<SUB>759</SUB>> ]
-"1157" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Field&gt; field)<SUB>763</SUB>> ]
-"1164" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Field&gt;::DownCast(obj_field))<SUB>763</SUB>> ]
-"1176" [label = <(jni::EncodeArtField,jni::EncodeArtField(field-&gt;GetArtField()))<SUB>764</SUB>> ]
-"1131" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>758</SUB>> ]
-"1138" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>758</SUB>> ]
-"1148" [label = <(GetClass,obj_field-&gt;GetClass())<SUB>759</SUB>> ]
-"1152" [label = <(GetClassRoot&lt;mirror::Field&gt;,GetClassRoot&lt;mirror::Field&gt;())<SUB>759</SUB>> ]
-"1154" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>761</SUB>> ]
-"1158" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Field)<SUB>763</SUB>> ]
-"1165" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Field)<SUB>763</SUB>> ]
-"1170" [label = <(::DownCast,::DownCast(obj_field))<SUB>763</SUB>> ]
-"1177" [label = <(&lt;operator&gt;.fieldAccess,jni::EncodeArtField)<SUB>764</SUB>> ]
-"1180" [label = <(GetArtField,field-&gt;GetArtField())<SUB>764</SUB>> ]
-"1112" [label = <(UNLIKELY,UNLIKELY((jlr_field) == nullptr))<SUB>756</SUB>> ]
-"1133" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>758</SUB>> ]
-"1139" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>758</SUB>> ]
-"1142" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>758</SUB>> ]
-"1149" [label = <(&lt;operator&gt;.indirectFieldAccess,obj_field-&gt;GetClass)<SUB>759</SUB>> ]
-"1160" [label = <(&lt;operator&gt;.fieldAccess,mirror::Field)<SUB>763</SUB>> ]
-"1167" [label = <(&lt;operator&gt;.fieldAccess,mirror::Field)<SUB>763</SUB>> ]
-"1171" [label = <(&lt;operator&gt;.fieldAccess,::DownCast)<SUB>763</SUB>> ]
-"1179" [label = <(FIELD_IDENTIFIER,EncodeArtField,EncodeArtField)<SUB>764</SUB>> ]
-"1181" [label = <(&lt;operator&gt;.indirectFieldAccess,field-&gt;GetArtField)<SUB>764</SUB>> ]
-"1113" [label = <(&lt;operator&gt;.equals,(jlr_field) == nullptr)<SUB>756</SUB>> ]
-"1117" [label = <(CHECK_NON_NULL_ARGUMENT(jlr_field),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;jlr_field == null&quot;))<SUB>756</SUB>> ]
-"1124" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(jlr_field),CHECK_NON_NULL_ARGUMENT(jlr_field))<SUB>756</SUB>> ]
-"1135" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>758</SUB>> ]
-"1141" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>758</SUB>> ]
-"1144" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>758</SUB>> ]
-"1151" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>759</SUB>> ]
-"1162" [label = <(FIELD_IDENTIFIER,Field,Field)<SUB>763</SUB>> ]
-"1169" [label = <(FIELD_IDENTIFIER,Field,Field)<SUB>763</SUB>> ]
-"1173" [label = <(FIELD_IDENTIFIER,DownCast,DownCast)<SUB>763</SUB>> ]
-"1183" [label = <(FIELD_IDENTIFIER,GetArtField,GetArtField)<SUB>764</SUB>> ]
-"1118" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>756</SUB>> ]
-"1119" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>756</SUB>> ]
-"1121" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>756</SUB>> ]
-"1104" [label = <(METHOD,FromReflectedField)<SUB>755</SUB>> ]
-"1184" [label = <(METHOD_RETURN,jfieldID)<SUB>755</SUB>> ]
-  "1108" -> "1113" 
-  "1108" -> "1127" 
-  "1127" -> "1135" 
-  "1129" -> "1151" 
-  "1156" -> "1179" 
-  "1175" -> "1184" 
-  "1130" -> "1141" 
-  "1137" -> "1129" 
-  "1147" -> "1154" 
-  "1147" -> "1162" 
-  "1157" -> "1169" 
-  "1164" -> "1156" 
-  "1176" -> "1175" 
-  "1131" -> "1130" 
-  "1138" -> "1137" 
-  "1148" -> "1152" 
-  "1152" -> "1147" 
-  "1154" -> "1184" 
-  "1158" -> "1157" 
-  "1165" -> "1173" 
-  "1170" -> "1164" 
-  "1177" -> "1183" 
-  "1180" -> "1176" 
-  "1112" -> "1119" 
-  "1112" -> "1127" 
-  "1133" -> "1131" 
-  "1139" -> "1144" 
-  "1142" -> "1138" 
-  "1149" -> "1148" 
-  "1160" -> "1158" 
-  "1167" -> "1165" 
-  "1171" -> "1170" 
-  "1179" -> "1177" 
-  "1181" -> "1180" 
-  "1113" -> "1112" 
-  "1117" -> "1124" 
-  "1124" -> "1184" 
-  "1135" -> "1133" 
-  "1141" -> "1139" 
-  "1144" -> "1142" 
-  "1151" -> "1149" 
-  "1162" -> "1160" 
-  "1169" -> "1167" 
-  "1173" -> "1171" 
-  "1183" -> "1181" 
-  "1118" -> "1117" 
-  "1119" -> "1121" 
-  "1121" -> "1118" 
-  "1104" -> "1108" 
+digraph "GetSuperclass" {  
+"1219" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_class))<SUB>720</SUB>> ]
+"1238" [label = <(soa,soa(env))<SUB>721</SUB>> ]
+"1240" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c = soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>722</SUB>> ]
+"1257" [label = <(RETURN,return soa.AddLocalReference&lt;jclass&gt;(c-&gt;IsInterface() ? nullptr : c-&gt;GetSuperClass());,return soa.AddLocalReference&lt;jclass&gt;(c-&gt;IsInterface() ? nullptr : c-&gt;GetSuperClass());)<SUB>723</SUB>> ]
+"1241" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c)<SUB>722</SUB>> ]
+"1248" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>722</SUB>> ]
+"1258" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jclass&gt;(c-&gt;IsInterface() ? nullptr : c-&gt;GetSuperClass()))<SUB>723</SUB>> ]
+"1242" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>722</SUB>> ]
+"1249" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>722</SUB>> ]
+"1259" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jclass)<SUB>723</SUB>> ]
+"1264" [label = <(&lt;operator&gt;.conditional,c-&gt;IsInterface() ? nullptr : c-&gt;GetSuperClass())<SUB>723</SUB>> ]
+"1223" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>720</SUB>> ]
+"1244" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>722</SUB>> ]
+"1250" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>722</SUB>> ]
+"1253" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>722</SUB>> ]
+"1260" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>723</SUB>> ]
+"1265" [label = <(IsInterface,c-&gt;IsInterface())<SUB>723</SUB>> ]
+"1270" [label = <(GetSuperClass,c-&gt;GetSuperClass())<SUB>723</SUB>> ]
+"1224" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>720</SUB>> ]
+"1228" [label = <(CHECK_NON_NULL_ARGUMENT(java_class),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class == null&quot;))<SUB>720</SUB>> ]
+"1235" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_class),CHECK_NON_NULL_ARGUMENT(java_class))<SUB>720</SUB>> ]
+"1246" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>722</SUB>> ]
+"1252" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>722</SUB>> ]
+"1255" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>722</SUB>> ]
+"1262" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>723</SUB>> ]
+"1266" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;IsInterface)<SUB>723</SUB>> ]
+"1271" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;GetSuperClass)<SUB>723</SUB>> ]
+"1229" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>720</SUB>> ]
+"1268" [label = <(FIELD_IDENTIFIER,IsInterface,IsInterface)<SUB>723</SUB>> ]
+"1273" [label = <(FIELD_IDENTIFIER,GetSuperClass,GetSuperClass)<SUB>723</SUB>> ]
+"1230" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>720</SUB>> ]
+"1232" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>720</SUB>> ]
+"1215" [label = <(METHOD,GetSuperclass)<SUB>719</SUB>> ]
+"1274" [label = <(METHOD_RETURN,jclass)<SUB>719</SUB>> ]
+  "1219" -> "1224" 
+  "1219" -> "1238" 
+  "1238" -> "1246" 
+  "1240" -> "1262" 
+  "1257" -> "1274" 
+  "1241" -> "1252" 
+  "1248" -> "1240" 
+  "1258" -> "1257" 
+  "1242" -> "1241" 
+  "1249" -> "1248" 
+  "1259" -> "1268" 
+  "1264" -> "1258" 
+  "1223" -> "1230" 
+  "1223" -> "1238" 
+  "1244" -> "1242" 
+  "1250" -> "1255" 
+  "1253" -> "1249" 
+  "1260" -> "1259" 
+  "1265" -> "1264" 
+  "1265" -> "1273" 
+  "1270" -> "1264" 
+  "1224" -> "1223" 
+  "1228" -> "1235" 
+  "1235" -> "1274" 
+  "1246" -> "1244" 
+  "1252" -> "1250" 
+  "1255" -> "1253" 
+  "1262" -> "1260" 
+  "1266" -> "1265" 
+  "1271" -> "1270" 
+  "1229" -> "1228" 
+  "1268" -> "1266" 
+  "1273" -> "1271" 
+  "1230" -> "1232" 
+  "1232" -> "1229" 
+  "1215" -> "1219" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/420-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/420-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/420-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/420-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "mirror::Object::PrettyTypeOf" {  
-"18710" [label = <(METHOD,mirror::Object::PrettyTypeOf)> ]
-"18714" [label = <(METHOD_RETURN,ANY)> ]
-  "18710" -> "18714" 
+digraph "IsStringClass" {  
+"18368" [label = <(METHOD,IsStringClass)> ]
+"18371" [label = <(METHOD_RETURN,ANY)> ]
+  "18368" -> "18371" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/421-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/421-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/421-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/421-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "CallVoidMethod" {  
-"18715" [label = <(METHOD,CallVoidMethod)> ]
-"18720" [label = <(METHOD_RETURN,ANY)> ]
-  "18715" -> "18720" 
+digraph "GetCurrentAllocator" {  
+"18372" [label = <(METHOD,GetCurrentAllocator)> ]
+"18375" [label = <(METHOD_RETURN,ANY)> ]
+  "18372" -> "18375" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/422-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/422-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/422-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/422-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "EnsureLocalCapacityInternal" {  
-"18721" [label = <(METHOD,EnsureLocalCapacityInternal)> ]
-"18726" [label = <(METHOD_RETURN,ANY)> ]
-  "18721" -> "18726" 
+digraph "GetHeap" {  
+"18376" [label = <(METHOD,GetHeap)> ]
+"18379" [label = <(METHOD_RETURN,ANY)> ]
+  "18376" -> "18379" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/423-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/423-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/423-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/423-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "PushFrame" {  
-"18727" [label = <(METHOD,PushFrame)> ]
-"18731" [label = <(METHOD_RETURN,ANY)> ]
-  "18727" -> "18731" 
+digraph "AllocObject" {  
+"18380" [label = <(METHOD,AllocObject)> ]
+"18384" [label = <(METHOD_RETURN,ANY)> ]
+  "18380" -> "18384" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/424-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/424-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/424-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/424-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "down_cast&lt;JNIEnvExt*&gt;" {  
-"18732" [label = <(METHOD,down_cast&lt;JNIEnvExt*&gt;)> ]
-"18735" [label = <(METHOD_RETURN,ANY)> ]
-  "18732" -> "18735" 
+digraph "va_start" {  
+"18385" [label = <(METHOD,va_start)> ]
+"18389" [label = <(METHOD_RETURN,ANY)> ]
+  "18385" -> "18389" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/425-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/425-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/425-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/425-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "PopFrame" {  
-"18736" [label = <(METHOD,PopFrame)> ]
-"18739" [label = <(METHOD_RETURN,ANY)> ]
-  "18736" -> "18739" 
+digraph "free_args_later" {  
+"18390" [label = <(METHOD,free_args_later)> ]
+"18393" [label = <(METHOD_RETURN,ANY)> ]
+  "18390" -> "18393" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/426-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/426-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/426-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/426-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "Env" {  
-"18740" [label = <(METHOD,Env)> ]
-"18743" [label = <(METHOD_RETURN,ANY)> ]
-  "18740" -> "18743" 
+digraph "NewObjectV" {  
+"18394" [label = <(METHOD,NewObjectV)> ]
+"18400" [label = <(METHOD_RETURN,ANY)> ]
+  "18394" -> "18400" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/427-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/427-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/427-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/427-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "AddGlobalRef" {  
-"18744" [label = <(METHOD,AddGlobalRef)> ]
-"18749" [label = <(METHOD_RETURN,ANY)> ]
-  "18744" -> "18749" 
+digraph "WellKnownClasses::StringInitToStringFactory" {  
+"18401" [label = <(METHOD,WellKnownClasses::StringInitToStringFactory)> ]
+"18405" [label = <(METHOD_RETURN,ANY)> ]
+  "18401" -> "18405" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/428-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/428-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/428-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/428-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "Vm" {  
-"18750" [label = <(METHOD,Vm)> ]
-"18753" [label = <(METHOD_RETURN,ANY)> ]
-  "18750" -> "18753" 
+digraph "CallStaticObjectMethodV" {  
+"18406" [label = <(METHOD,CallStaticObjectMethodV)> ]
+"18412" [label = <(METHOD_RETURN,ANY)> ]
+  "18406" -> "18412" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/429-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/429-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/429-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/429-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "DeleteGlobalRef" {  
-"18754" [label = <(METHOD,DeleteGlobalRef)> ]
-"18758" [label = <(METHOD_RETURN,ANY)> ]
-  "18754" -> "18758" 
+digraph "CallNonvirtualVoidMethodV" {  
+"18413" [label = <(METHOD,CallNonvirtualVoidMethodV)> ]
+"18420" [label = <(METHOD_RETURN,ANY)> ]
+  "18413" -> "18420" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/43-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/43-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/43-cfg.dot	2023-06-07 19:35:28.227384349 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/43-cfg.dot	2023-06-07 19:35:34.757383778 +0330
@@ -1,126 +1,97 @@
-digraph "ToReflectedMethod" {  
-"1192" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>768</SUB>> ]
-"1211" [label = <(soa,soa(env))<SUB>769</SUB>> ]
-"1214" [label = <(&lt;operator&gt;.assignment,* m = jni::DecodeArtMethod(mid))<SUB>770</SUB>> ]
-"1221" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Executable&gt; method)<SUB>771</SUB>> ]
-"1228" [label = <(DCHECK_EQ,DCHECK_EQ(Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize(), kRuntimePointerSize))<SUB>772</SUB>> ]
-"1240" [label = <(DCHECK,DCHECK(!Runtime::Current()-&gt;IsActiveTransaction()))<SUB>773</SUB>> ]
-"1283" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(method);,return soa.AddLocalReference&lt;jobject&gt;(method);)<SUB>779</SUB>> ]
-"1216" [label = <(jni::DecodeArtMethod,jni::DecodeArtMethod(mid))<SUB>770</SUB>> ]
-"1222" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Executable)<SUB>771</SUB>> ]
-"1229" [label = <(GetImagePointerSize,Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize())<SUB>772</SUB>> ]
-"1241" [label = <(&lt;operator&gt;.logicalNot,!Runtime::Current()-&gt;IsActiveTransaction())<SUB>773</SUB>> ]
-"1250" [label = <(IsConstructor,m-&gt;IsConstructor())<SUB>774</SUB>> ]
-"1284" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(method))<SUB>779</SUB>> ]
-"1217" [label = <(&lt;operator&gt;.fieldAccess,jni::DecodeArtMethod)<SUB>770</SUB>> ]
-"1224" [label = <(&lt;operator&gt;.fieldAccess,mirror::Executable)<SUB>771</SUB>> ]
-"1230" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetClassLinker()-&gt;GetImagePointerSize)<SUB>772</SUB>> ]
-"1242" [label = <(IsActiveTransaction,Runtime::Current()-&gt;IsActiveTransaction())<SUB>773</SUB>> ]
-"1251" [label = <(&lt;operator&gt;.indirectFieldAccess,m-&gt;IsConstructor)<SUB>774</SUB>> ]
-"1255" [label = <(&lt;operator&gt;.assignment,method = mirror::Constructor::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;(soa.Self(), m))<SUB>775</SUB>> ]
-"1285" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>779</SUB>> ]
-"1196" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>768</SUB>> ]
-"1219" [label = <(FIELD_IDENTIFIER,DecodeArtMethod,DecodeArtMethod)<SUB>770</SUB>> ]
-"1226" [label = <(FIELD_IDENTIFIER,Executable,Executable)<SUB>771</SUB>> ]
-"1231" [label = <(GetClassLinker,Runtime::Current()-&gt;GetClassLinker())<SUB>772</SUB>> ]
-"1238" [label = <(FIELD_IDENTIFIER,GetImagePointerSize,GetImagePointerSize)<SUB>772</SUB>> ]
-"1243" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;IsActiveTransaction)<SUB>773</SUB>> ]
-"1253" [label = <(FIELD_IDENTIFIER,IsConstructor,IsConstructor)<SUB>774</SUB>> ]
-"1257" [label = <(mirror::Constructor::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;,mirror::Constructor::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;(soa.Self(), m))<SUB>775</SUB>> ]
-"1270" [label = <(&lt;operator&gt;.assignment,method = mirror::Method::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;(soa.Self(), m))<SUB>777</SUB>> ]
-"1286" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>779</SUB>> ]
-"1197" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>768</SUB>> ]
-"1201" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>768</SUB>> ]
-"1208" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>768</SUB>> ]
-"1232" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetClassLinker)<SUB>772</SUB>> ]
-"1244" [label = <(Runtime::Current,Runtime::Current())<SUB>773</SUB>> ]
-"1248" [label = <(FIELD_IDENTIFIER,IsActiveTransaction,IsActiveTransaction)<SUB>773</SUB>> ]
-"1258" [label = <(&lt;operator&gt;.fieldAccess,mirror::Constructor::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;)<SUB>775</SUB>> ]
-"1263" [label = <(Self,soa.Self())<SUB>775</SUB>> ]
-"1272" [label = <(mirror::Method::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;,mirror::Method::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;(soa.Self(), m))<SUB>777</SUB>> ]
-"1288" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>779</SUB>> ]
-"1202" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>768</SUB>> ]
-"1233" [label = <(Runtime::Current,Runtime::Current())<SUB>772</SUB>> ]
-"1237" [label = <(FIELD_IDENTIFIER,GetClassLinker,GetClassLinker)<SUB>772</SUB>> ]
-"1245" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>773</SUB>> ]
-"1259" [label = <(&lt;operator&gt;.fieldAccess,mirror::Constructor)<SUB>775</SUB>> ]
-"1262" [label = <(FIELD_IDENTIFIER,CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;,CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;)<SUB>775</SUB>> ]
-"1264" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>775</SUB>> ]
-"1273" [label = <(&lt;operator&gt;.fieldAccess,mirror::Method::CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;)<SUB>777</SUB>> ]
-"1278" [label = <(Self,soa.Self())<SUB>777</SUB>> ]
-"1203" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>768</SUB>> ]
-"1205" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>768</SUB>> ]
-"1234" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>772</SUB>> ]
-"1247" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>773</SUB>> ]
-"1266" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>775</SUB>> ]
-"1274" [label = <(&lt;operator&gt;.fieldAccess,mirror::Method)<SUB>777</SUB>> ]
-"1277" [label = <(FIELD_IDENTIFIER,CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;,CreateFromArtMethod&lt;kRuntimePointerSize, false&gt;)<SUB>777</SUB>> ]
-"1279" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>777</SUB>> ]
-"1236" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>772</SUB>> ]
-"1281" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>777</SUB>> ]
-"1186" [label = <(METHOD,ToReflectedMethod)<SUB>767</SUB>> ]
-"1291" [label = <(METHOD_RETURN,jobject)<SUB>767</SUB>> ]
-  "1192" -> "1197" 
-  "1192" -> "1211" 
-  "1211" -> "1219" 
-  "1214" -> "1226" 
-  "1221" -> "1236" 
-  "1228" -> "1247" 
-  "1240" -> "1253" 
-  "1283" -> "1291" 
-  "1216" -> "1214" 
-  "1222" -> "1221" 
-  "1229" -> "1228" 
-  "1241" -> "1240" 
-  "1250" -> "1259" 
-  "1250" -> "1274" 
-  "1284" -> "1283" 
-  "1217" -> "1216" 
-  "1224" -> "1222" 
-  "1230" -> "1229" 
-  "1242" -> "1241" 
-  "1251" -> "1250" 
-  "1255" -> "1288" 
-  "1285" -> "1284" 
-  "1196" -> "1203" 
-  "1196" -> "1211" 
-  "1219" -> "1217" 
-  "1226" -> "1224" 
-  "1231" -> "1238" 
-  "1238" -> "1230" 
-  "1243" -> "1242" 
-  "1253" -> "1251" 
-  "1257" -> "1255" 
-  "1270" -> "1288" 
-  "1286" -> "1285" 
-  "1197" -> "1196" 
-  "1201" -> "1208" 
-  "1208" -> "1291" 
-  "1232" -> "1231" 
-  "1244" -> "1248" 
-  "1248" -> "1243" 
-  "1258" -> "1266" 
-  "1263" -> "1257" 
-  "1272" -> "1270" 
-  "1288" -> "1286" 
-  "1202" -> "1201" 
-  "1233" -> "1237" 
-  "1237" -> "1232" 
-  "1245" -> "1244" 
-  "1259" -> "1262" 
-  "1262" -> "1258" 
-  "1264" -> "1263" 
-  "1273" -> "1281" 
-  "1278" -> "1272" 
-  "1203" -> "1205" 
-  "1205" -> "1202" 
-  "1234" -> "1233" 
-  "1247" -> "1245" 
-  "1266" -> "1264" 
-  "1274" -> "1277" 
-  "1277" -> "1273" 
-  "1279" -> "1278" 
-  "1236" -> "1234" 
-  "1281" -> "1279" 
-  "1186" -> "1192" 
+digraph "IsAssignableFrom" {  
+"1281" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(java_class1, JNI_FALSE))<SUB>729</SUB>> ]
+"1300" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(java_class2, JNI_FALSE))<SUB>730</SUB>> ]
+"1320" [label = <(soa,soa(env))<SUB>731</SUB>> ]
+"1322" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c1 = soa.Decode&lt;mirror::Class&gt;(java_class1))<SUB>732</SUB>> ]
+"1339" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c2 = soa.Decode&lt;mirror::Class&gt;(java_class2))<SUB>733</SUB>> ]
+"1356" [label = <(RETURN,return c2-&gt;IsAssignableFrom(c1) ? JNI_TRUE : JNI_FALSE;,return c2-&gt;IsAssignableFrom(c1) ? JNI_TRUE : JNI_FALSE;)<SUB>734</SUB>> ]
+"1323" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c1)<SUB>732</SUB>> ]
+"1330" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(java_class1))<SUB>732</SUB>> ]
+"1340" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c2)<SUB>733</SUB>> ]
+"1347" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(java_class2))<SUB>733</SUB>> ]
+"1357" [label = <(&lt;operator&gt;.conditional,c2-&gt;IsAssignableFrom(c1) ? JNI_TRUE : JNI_FALSE)<SUB>734</SUB>> ]
+"1324" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>732</SUB>> ]
+"1331" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>732</SUB>> ]
+"1341" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>733</SUB>> ]
+"1348" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>733</SUB>> ]
+"1358" [label = <(IsAssignableFrom,c2-&gt;IsAssignableFrom(c1))<SUB>734</SUB>> ]
+"1286" [label = <(UNLIKELY,UNLIKELY((java_class1) == nullptr))<SUB>729</SUB>> ]
+"1305" [label = <(UNLIKELY,UNLIKELY((java_class2) == nullptr))<SUB>730</SUB>> ]
+"1326" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>732</SUB>> ]
+"1332" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>732</SUB>> ]
+"1335" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>732</SUB>> ]
+"1343" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>733</SUB>> ]
+"1349" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>733</SUB>> ]
+"1352" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>733</SUB>> ]
+"1359" [label = <(&lt;operator&gt;.indirectFieldAccess,c2-&gt;IsAssignableFrom)<SUB>734</SUB>> ]
+"1287" [label = <(&lt;operator&gt;.equals,(java_class1) == nullptr)<SUB>729</SUB>> ]
+"1291" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN(java_class1, JNI_FALSE),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class1 == null&quot;))<SUB>729</SUB>> ]
+"1298" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(java_class1, JNI_FALSE),CHECK_NON_NULL_ARGUMENT_RETURN(java_class1, JNI_FALSE))<SUB>729</SUB>> ]
+"1306" [label = <(&lt;operator&gt;.equals,(java_class2) == nullptr)<SUB>730</SUB>> ]
+"1310" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN(java_class2, JNI_FALSE),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class2 == null&quot;))<SUB>730</SUB>> ]
+"1317" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(java_class2, JNI_FALSE),CHECK_NON_NULL_ARGUMENT_RETURN(java_class2, JNI_FALSE))<SUB>730</SUB>> ]
+"1328" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>732</SUB>> ]
+"1334" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>732</SUB>> ]
+"1337" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>732</SUB>> ]
+"1345" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>733</SUB>> ]
+"1351" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>733</SUB>> ]
+"1354" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>733</SUB>> ]
+"1361" [label = <(FIELD_IDENTIFIER,IsAssignableFrom,IsAssignableFrom)<SUB>734</SUB>> ]
+"1292" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>729</SUB>> ]
+"1311" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>730</SUB>> ]
+"1293" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>729</SUB>> ]
+"1295" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>729</SUB>> ]
+"1312" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>730</SUB>> ]
+"1314" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>730</SUB>> ]
+"1276" [label = <(METHOD,IsAssignableFrom)<SUB>728</SUB>> ]
+"1365" [label = <(METHOD_RETURN,jboolean)<SUB>728</SUB>> ]
+  "1281" -> "1287" 
+  "1281" -> "1300" 
+  "1300" -> "1306" 
+  "1300" -> "1320" 
+  "1320" -> "1328" 
+  "1322" -> "1345" 
+  "1339" -> "1361" 
+  "1356" -> "1365" 
+  "1323" -> "1334" 
+  "1330" -> "1322" 
+  "1340" -> "1351" 
+  "1347" -> "1339" 
+  "1357" -> "1356" 
+  "1324" -> "1323" 
+  "1331" -> "1330" 
+  "1341" -> "1340" 
+  "1348" -> "1347" 
+  "1358" -> "1357" 
+  "1286" -> "1293" 
+  "1286" -> "1300" 
+  "1305" -> "1312" 
+  "1305" -> "1320" 
+  "1326" -> "1324" 
+  "1332" -> "1337" 
+  "1335" -> "1331" 
+  "1343" -> "1341" 
+  "1349" -> "1354" 
+  "1352" -> "1348" 
+  "1359" -> "1358" 
+  "1287" -> "1286" 
+  "1291" -> "1298" 
+  "1298" -> "1365" 
+  "1306" -> "1305" 
+  "1310" -> "1317" 
+  "1317" -> "1365" 
+  "1328" -> "1326" 
+  "1334" -> "1332" 
+  "1337" -> "1335" 
+  "1345" -> "1343" 
+  "1351" -> "1349" 
+  "1354" -> "1352" 
+  "1361" -> "1359" 
+  "1292" -> "1291" 
+  "1311" -> "1310" 
+  "1293" -> "1295" 
+  "1295" -> "1292" 
+  "1312" -> "1314" 
+  "1314" -> "1311" 
+  "1276" -> "1281" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/430-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/430-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/430-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/430-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "AddWeakGlobalRef" {  
-"18759" [label = <(METHOD,AddWeakGlobalRef)> ]
-"18764" [label = <(METHOD_RETURN,ANY)> ]
-  "18759" -> "18764" 
+digraph "CallStaticObjectMethodA" {  
+"18421" [label = <(METHOD,CallStaticObjectMethodA)> ]
+"18427" [label = <(METHOD_RETURN,ANY)> ]
+  "18421" -> "18427" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/431-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/431-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/431-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/431-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "DeleteWeakGlobalRef" {  
-"18765" [label = <(METHOD,DeleteWeakGlobalRef)> ]
-"18770" [label = <(METHOD_RETURN,ANY)> ]
-  "18765" -> "18770" 
+digraph "CallNonvirtualVoidMethodA" {  
+"18428" [label = <(METHOD,CallNonvirtualVoidMethodA)> ]
+"18435" [label = <(METHOD_RETURN,ANY)> ]
+  "18428" -> "18435" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/432-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/432-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/432-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/432-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "Remove" {  
-"18771" [label = <(METHOD,Remove)> ]
-"18776" [label = <(METHOD_RETURN,ANY)> ]
-  "18771" -> "18776" 
+digraph "CHECK_NON_NULL_ARGUMENT(sig)" {  
+"18436" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(sig))> ]
+"18441" [label = <(METHOD_RETURN,ANY)> ]
+  "18436" -> "18441" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/433-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/433-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/433-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/433-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "IsStringClass" {  
-"18777" [label = <(METHOD,IsStringClass)> ]
-"18780" [label = <(METHOD_RETURN,ANY)> ]
-  "18777" -> "18780" 
+digraph "CHECK_NON_NULL_ARGUMENT(obj)" {  
+"18442" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(obj))> ]
+"18447" [label = <(METHOD_RETURN,ANY)> ]
+  "18442" -> "18447" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/434-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/434-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/434-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/434-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "GetCurrentAllocator" {  
-"18781" [label = <(METHOD,GetCurrentAllocator)> ]
-"18784" [label = <(METHOD_RETURN,ANY)> ]
-  "18781" -> "18784" 
+digraph "result" {  
+"18448" [label = <(METHOD,result)> ]
+"18451" [label = <(METHOD_RETURN,ANY)> ]
+  "18448" -> "18451" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/435-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/435-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/435-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/435-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "GetHeap" {  
-"18785" [label = <(METHOD,GetHeap)> ]
-"18788" [label = <(METHOD_RETURN,ANY)> ]
-  "18785" -> "18788" 
+digraph "InvokeVirtualOrInterfaceWithVarArgs" {  
+"18452" [label = <(METHOD,InvokeVirtualOrInterfaceWithVarArgs)> ]
+"18458" [label = <(METHOD_RETURN,ANY)> ]
+  "18452" -> "18458" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/436-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/436-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/436-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/436-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "AllocObject" {  
-"18789" [label = <(METHOD,AllocObject)> ]
-"18793" [label = <(METHOD_RETURN,ANY)> ]
-  "18789" -> "18793" 
+digraph "GetL" {  
+"18459" [label = <(METHOD,GetL)> ]
+"18462" [label = <(METHOD_RETURN,ANY)> ]
+  "18459" -> "18462" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/437-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/437-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/437-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/437-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "va_start" {  
-"18794" [label = <(METHOD,va_start)> ]
-"18798" [label = <(METHOD_RETURN,ANY)> ]
-  "18794" -> "18798" 
+digraph "InvokeVirtualOrInterfaceWithJValues" {  
+"18463" [label = <(METHOD,InvokeVirtualOrInterfaceWithJValues)> ]
+"18469" [label = <(METHOD_RETURN,ANY)> ]
+  "18463" -> "18469" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/438-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/438-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/438-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/438-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "free_args_later" {  
-"18799" [label = <(METHOD,free_args_later)> ]
-"18802" [label = <(METHOD_RETURN,ANY)> ]
-  "18799" -> "18802" 
+digraph "CHECK_NON_NULL_ARGUMENT_RETURN_ZERO" {  
+"18470" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO)<SUB>611</SUB>> ]
+"18473" [label = <(METHOD_RETURN,ANY)> ]
+  "18470" -> "18473" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/439-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/439-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/439-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/439-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "NewObjectV" {  
-"18803" [label = <(METHOD,NewObjectV)> ]
-"18809" [label = <(METHOD_RETURN,ANY)> ]
-  "18803" -> "18809" 
+digraph "CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj)" {  
+"18474" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))> ]
+"18479" [label = <(METHOD_RETURN,ANY)> ]
+  "18474" -> "18479" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/44-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/44-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/44-cfg.dot	2023-06-07 19:35:28.227384349 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/44-cfg.dot	2023-06-07 19:35:34.757383778 +0330
@@ -1,63 +1,84 @@
-digraph "ToReflectedField" {  
-"1299" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(fid))<SUB>783</SUB>> ]
-"1318" [label = <(soa,soa(env))<SUB>784</SUB>> ]
-"1321" [label = <(&lt;operator&gt;.assignment,* f = jni::DecodeArtField(fid))<SUB>785</SUB>> ]
-"1328" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(\012        mirror::Field::CreateFromArtField&lt;kRuntimePointerSize&gt;(soa.Self(), f, true));,return soa.AddLocalReference&lt;jobject&gt;(\012        mirror::Field::CreateFromArtField&lt;kRuntimePointerSize&gt;(soa.Self(), f, true));)<SUB>786</SUB>> ]
-"1323" [label = <(jni::DecodeArtField,jni::DecodeArtField(fid))<SUB>785</SUB>> ]
-"1329" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(\012        mirror::Field::CreateFromArtField&lt;kRuntimePointerSize&gt;(soa.Self(), f, true)))<SUB>786</SUB>> ]
-"1324" [label = <(&lt;operator&gt;.fieldAccess,jni::DecodeArtField)<SUB>785</SUB>> ]
-"1330" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>786</SUB>> ]
-"1335" [label = <(&lt;operator&gt;.greaterThan,mirror::Field::CreateFromArtField&lt;kRuntimePointerSize&gt;(soa.Self(), f, true))<SUB>787</SUB>> ]
-"1303" [label = <(UNLIKELY,UNLIKELY((fid) == nullptr))<SUB>783</SUB>> ]
-"1326" [label = <(FIELD_IDENTIFIER,DecodeArtField,DecodeArtField)<SUB>785</SUB>> ]
-"1331" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>786</SUB>> ]
-"1336" [label = <(&lt;operator&gt;.lessThan,mirror::Field::CreateFromArtField&lt;kRuntimePointerSize)<SUB>787</SUB>> ]
-"1343" [label = <(&lt;operator&gt;.bracketedPrimary,(soa.Self(), f, true))<SUB>787</SUB>> ]
-"1304" [label = <(&lt;operator&gt;.equals,(fid) == nullptr)<SUB>783</SUB>> ]
-"1308" [label = <(CHECK_NON_NULL_ARGUMENT(fid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;fid == null&quot;))<SUB>783</SUB>> ]
-"1315" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(fid),CHECK_NON_NULL_ARGUMENT(fid))<SUB>783</SUB>> ]
-"1333" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>786</SUB>> ]
-"1337" [label = <(&lt;operator&gt;.fieldAccess,mirror::Field::CreateFromArtField)<SUB>787</SUB>> ]
-"1344" [label = <(&lt;operator&gt;.expressionList,soa.Self(), f, true)<SUB>787</SUB>> ]
-"1309" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>783</SUB>> ]
-"1338" [label = <(&lt;operator&gt;.fieldAccess,mirror::Field)<SUB>787</SUB>> ]
-"1341" [label = <(FIELD_IDENTIFIER,CreateFromArtField,CreateFromArtField)<SUB>787</SUB>> ]
-"1345" [label = <(Self,soa.Self())<SUB>787</SUB>> ]
-"1310" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>783</SUB>> ]
-"1312" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>783</SUB>> ]
-"1346" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>787</SUB>> ]
-"1348" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>787</SUB>> ]
-"1293" [label = <(METHOD,ToReflectedField)<SUB>782</SUB>> ]
-"1351" [label = <(METHOD_RETURN,jobject)<SUB>782</SUB>> ]
-  "1299" -> "1304" 
-  "1299" -> "1318" 
-  "1318" -> "1326" 
-  "1321" -> "1333" 
-  "1328" -> "1351" 
-  "1323" -> "1321" 
-  "1329" -> "1328" 
-  "1324" -> "1323" 
-  "1330" -> "1338" 
-  "1335" -> "1329" 
-  "1303" -> "1310" 
-  "1303" -> "1318" 
-  "1326" -> "1324" 
-  "1331" -> "1330" 
-  "1336" -> "1348" 
-  "1343" -> "1335" 
-  "1304" -> "1303" 
-  "1308" -> "1315" 
-  "1315" -> "1351" 
-  "1333" -> "1331" 
-  "1337" -> "1336" 
-  "1344" -> "1343" 
-  "1309" -> "1308" 
-  "1338" -> "1341" 
-  "1341" -> "1337" 
-  "1345" -> "1344" 
-  "1310" -> "1312" 
-  "1312" -> "1309" 
-  "1346" -> "1345" 
-  "1348" -> "1346" 
-  "1293" -> "1299" 
+digraph "IsInstanceOf" {  
+"1372" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_FALSE))<SUB>738</SUB>> ]
+"1392" [label = <(&lt;operator&gt;.equals,jobj == nullptr)<SUB>739</SUB>> ]
+"1396" [label = <(RETURN,return JNI_TRUE;,return JNI_TRUE;)<SUB>741</SUB>> ]
+"1377" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>738</SUB>> ]
+"1401" [label = <(soa,soa(env))<SUB>743</SUB>> ]
+"1403" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; obj = soa.Decode&lt;mirror::Object&gt;(jobj))<SUB>744</SUB>> ]
+"1420" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c = soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>745</SUB>> ]
+"1437" [label = <(RETURN,return obj-&gt;InstanceOf(c) ? JNI_TRUE : JNI_FALSE;,return obj-&gt;InstanceOf(c) ? JNI_TRUE : JNI_FALSE;)<SUB>746</SUB>> ]
+"1378" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>738</SUB>> ]
+"1382" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_FALSE),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class == null&quot;))<SUB>738</SUB>> ]
+"1389" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_FALSE),CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_FALSE))<SUB>738</SUB>> ]
+"1404" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; obj)<SUB>744</SUB>> ]
+"1411" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(jobj))<SUB>744</SUB>> ]
+"1421" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c)<SUB>745</SUB>> ]
+"1428" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>745</SUB>> ]
+"1438" [label = <(&lt;operator&gt;.conditional,obj-&gt;InstanceOf(c) ? JNI_TRUE : JNI_FALSE)<SUB>746</SUB>> ]
+"1383" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>738</SUB>> ]
+"1405" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>744</SUB>> ]
+"1412" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>744</SUB>> ]
+"1422" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>745</SUB>> ]
+"1429" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>745</SUB>> ]
+"1439" [label = <(InstanceOf,obj-&gt;InstanceOf(c))<SUB>746</SUB>> ]
+"1384" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>738</SUB>> ]
+"1386" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>738</SUB>> ]
+"1407" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>744</SUB>> ]
+"1413" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>744</SUB>> ]
+"1416" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>744</SUB>> ]
+"1424" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>745</SUB>> ]
+"1430" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>745</SUB>> ]
+"1433" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>745</SUB>> ]
+"1440" [label = <(&lt;operator&gt;.indirectFieldAccess,obj-&gt;InstanceOf)<SUB>746</SUB>> ]
+"1409" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>744</SUB>> ]
+"1415" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>744</SUB>> ]
+"1418" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>744</SUB>> ]
+"1426" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>745</SUB>> ]
+"1432" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>745</SUB>> ]
+"1435" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>745</SUB>> ]
+"1442" [label = <(FIELD_IDENTIFIER,InstanceOf,InstanceOf)<SUB>746</SUB>> ]
+"1367" [label = <(METHOD,IsInstanceOf)<SUB>737</SUB>> ]
+"1446" [label = <(METHOD_RETURN,jboolean)<SUB>737</SUB>> ]
+  "1372" -> "1378" 
+  "1372" -> "1392" 
+  "1392" -> "1396" 
+  "1392" -> "1401" 
+  "1396" -> "1446" 
+  "1377" -> "1384" 
+  "1377" -> "1392" 
+  "1401" -> "1409" 
+  "1403" -> "1426" 
+  "1420" -> "1442" 
+  "1437" -> "1446" 
+  "1378" -> "1377" 
+  "1382" -> "1389" 
+  "1389" -> "1446" 
+  "1404" -> "1415" 
+  "1411" -> "1403" 
+  "1421" -> "1432" 
+  "1428" -> "1420" 
+  "1438" -> "1437" 
+  "1383" -> "1382" 
+  "1405" -> "1404" 
+  "1412" -> "1411" 
+  "1422" -> "1421" 
+  "1429" -> "1428" 
+  "1439" -> "1438" 
+  "1384" -> "1386" 
+  "1386" -> "1383" 
+  "1407" -> "1405" 
+  "1413" -> "1418" 
+  "1416" -> "1412" 
+  "1424" -> "1422" 
+  "1430" -> "1435" 
+  "1433" -> "1429" 
+  "1440" -> "1439" 
+  "1409" -> "1407" 
+  "1415" -> "1413" 
+  "1418" -> "1416" 
+  "1426" -> "1424" 
+  "1432" -> "1430" 
+  "1435" -> "1433" 
+  "1442" -> "1440" 
+  "1367" -> "1372" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/440-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/440-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/440-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/440-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "WellKnownClasses::StringInitToStringFactory" {  
-"18810" [label = <(METHOD,WellKnownClasses::StringInitToStringFactory)> ]
-"18814" [label = <(METHOD_RETURN,ANY)> ]
-  "18810" -> "18814" 
+digraph "CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid)" {  
+"18480" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))> ]
+"18485" [label = <(METHOD_RETURN,ANY)> ]
+  "18480" -> "18485" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/441-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/441-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/441-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/441-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "CallStaticObjectMethodV" {  
-"18815" [label = <(METHOD,CallStaticObjectMethodV)> ]
-"18821" [label = <(METHOD_RETURN,ANY)> ]
-  "18815" -> "18821" 
+digraph "GetZ" {  
+"18486" [label = <(METHOD,GetZ)> ]
+"18489" [label = <(METHOD_RETURN,ANY)> ]
+  "18486" -> "18489" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/442-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/442-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/442-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/442-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "CallNonvirtualVoidMethodV" {  
-"18822" [label = <(METHOD,CallNonvirtualVoidMethodV)> ]
-"18829" [label = <(METHOD_RETURN,ANY)> ]
-  "18822" -> "18829" 
+digraph "GetB" {  
+"18490" [label = <(METHOD,GetB)> ]
+"18493" [label = <(METHOD_RETURN,ANY)> ]
+  "18490" -> "18493" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/443-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/443-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/443-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/443-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "CallStaticObjectMethodA" {  
-"18830" [label = <(METHOD,CallStaticObjectMethodA)> ]
-"18836" [label = <(METHOD_RETURN,ANY)> ]
-  "18830" -> "18836" 
+digraph "GetC" {  
+"18494" [label = <(METHOD,GetC)> ]
+"18497" [label = <(METHOD_RETURN,ANY)> ]
+  "18494" -> "18497" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/444-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/444-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/444-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/444-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "CallNonvirtualVoidMethodA" {  
-"18837" [label = <(METHOD,CallNonvirtualVoidMethodA)> ]
-"18844" [label = <(METHOD_RETURN,ANY)> ]
-  "18837" -> "18844" 
+digraph "GetD" {  
+"18498" [label = <(METHOD,GetD)> ]
+"18501" [label = <(METHOD_RETURN,ANY)> ]
+  "18498" -> "18501" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/445-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/445-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/445-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/445-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT(sig)" {  
-"18845" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(sig))> ]
-"18850" [label = <(METHOD_RETURN,ANY)> ]
-  "18845" -> "18850" 
+digraph "GetF" {  
+"18502" [label = <(METHOD,GetF)> ]
+"18505" [label = <(METHOD_RETURN,ANY)> ]
+  "18502" -> "18505" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/446-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/446-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/446-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/446-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT(obj)" {  
-"18851" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(obj))> ]
-"18856" [label = <(METHOD_RETURN,ANY)> ]
-  "18851" -> "18856" 
+digraph "GetI" {  
+"18506" [label = <(METHOD,GetI)> ]
+"18509" [label = <(METHOD_RETURN,ANY)> ]
+  "18506" -> "18509" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/447-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/447-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/447-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/447-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "result" {  
-"18857" [label = <(METHOD,result)> ]
-"18860" [label = <(METHOD_RETURN,ANY)> ]
-  "18857" -> "18860" 
+digraph "GetJ" {  
+"18510" [label = <(METHOD,GetJ)> ]
+"18513" [label = <(METHOD_RETURN,ANY)> ]
+  "18510" -> "18513" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/448-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/448-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/448-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/448-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "InvokeVirtualOrInterfaceWithVarArgs" {  
-"18861" [label = <(METHOD,InvokeVirtualOrInterfaceWithVarArgs)> ]
-"18867" [label = <(METHOD_RETURN,ANY)> ]
-  "18861" -> "18867" 
+digraph "GetS" {  
+"18514" [label = <(METHOD,GetS)> ]
+"18517" [label = <(METHOD_RETURN,ANY)> ]
+  "18514" -> "18517" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/449-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/449-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/449-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/449-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "GetL" {  
-"18868" [label = <(METHOD,GetL)> ]
-"18871" [label = <(METHOD_RETURN,ANY)> ]
-  "18868" -> "18871" 
+digraph "CHECK_NON_NULL_ARGUMENT_RETURN_VOID" {  
+"18518" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_VOID)<SUB>608</SUB>> ]
+"18521" [label = <(METHOD_RETURN,ANY)> ]
+  "18518" -> "18521" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/45-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/45-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/45-cfg.dot	2023-06-07 19:35:28.227384349 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/45-cfg.dot	2023-06-07 19:35:34.757383778 +0330
@@ -1,63 +1,48 @@
-digraph "GetObjectClass" {  
-"1357" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_object))<SUB>791</SUB>> ]
-"1376" [label = <(soa,soa(env))<SUB>792</SUB>> ]
-"1378" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; o = soa.Decode&lt;mirror::Object&gt;(java_object))<SUB>793</SUB>> ]
-"1395" [label = <(RETURN,return soa.AddLocalReference&lt;jclass&gt;(o-&gt;GetClass());,return soa.AddLocalReference&lt;jclass&gt;(o-&gt;GetClass());)<SUB>794</SUB>> ]
-"1379" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; o)<SUB>793</SUB>> ]
-"1386" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(java_object))<SUB>793</SUB>> ]
-"1396" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jclass&gt;(o-&gt;GetClass()))<SUB>794</SUB>> ]
-"1380" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>793</SUB>> ]
-"1387" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>793</SUB>> ]
-"1397" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jclass)<SUB>794</SUB>> ]
-"1402" [label = <(GetClass,o-&gt;GetClass())<SUB>794</SUB>> ]
-"1361" [label = <(UNLIKELY,UNLIKELY((java_object) == nullptr))<SUB>791</SUB>> ]
-"1382" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>793</SUB>> ]
-"1388" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>793</SUB>> ]
-"1391" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>793</SUB>> ]
-"1398" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>794</SUB>> ]
-"1403" [label = <(&lt;operator&gt;.indirectFieldAccess,o-&gt;GetClass)<SUB>794</SUB>> ]
-"1362" [label = <(&lt;operator&gt;.equals,(java_object) == nullptr)<SUB>791</SUB>> ]
-"1366" [label = <(CHECK_NON_NULL_ARGUMENT(java_object),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_object == null&quot;))<SUB>791</SUB>> ]
-"1373" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_object),CHECK_NON_NULL_ARGUMENT(java_object))<SUB>791</SUB>> ]
-"1384" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>793</SUB>> ]
-"1390" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>793</SUB>> ]
-"1393" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>793</SUB>> ]
-"1400" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>794</SUB>> ]
-"1405" [label = <(FIELD_IDENTIFIER,GetClass,GetClass)<SUB>794</SUB>> ]
-"1367" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>791</SUB>> ]
-"1368" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>791</SUB>> ]
-"1370" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>791</SUB>> ]
-"1353" [label = <(METHOD,GetObjectClass)<SUB>790</SUB>> ]
-"1406" [label = <(METHOD_RETURN,jclass)<SUB>790</SUB>> ]
-  "1357" -> "1362" 
-  "1357" -> "1376" 
-  "1376" -> "1384" 
-  "1378" -> "1400" 
-  "1395" -> "1406" 
-  "1379" -> "1390" 
-  "1386" -> "1378" 
-  "1396" -> "1395" 
-  "1380" -> "1379" 
-  "1387" -> "1386" 
-  "1397" -> "1405" 
-  "1402" -> "1396" 
-  "1361" -> "1368" 
-  "1361" -> "1376" 
-  "1382" -> "1380" 
-  "1388" -> "1393" 
-  "1391" -> "1387" 
-  "1398" -> "1397" 
-  "1403" -> "1402" 
-  "1362" -> "1361" 
-  "1366" -> "1373" 
-  "1373" -> "1406" 
-  "1384" -> "1382" 
-  "1390" -> "1388" 
-  "1393" -> "1391" 
-  "1400" -> "1398" 
-  "1405" -> "1403" 
-  "1367" -> "1366" 
-  "1368" -> "1370" 
-  "1370" -> "1367" 
-  "1353" -> "1357" 
+digraph "Throw" {  
+"1453" [label = <(soa,soa(env))<SUB>751</SUB>> ]
+"1455" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Throwable&gt; exception = soa.Decode&lt;mirror::Throwable&gt;(java_exception))<SUB>752</SUB>> ]
+"1479" [label = <(SetException,soa.Self()-&gt;SetException(exception))<SUB>756</SUB>> ]
+"1487" [label = <(RETURN,return JNI_OK;,return JNI_OK;)<SUB>757</SUB>> ]
+"1456" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Throwable&gt; exception)<SUB>752</SUB>> ]
+"1463" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Throwable&gt;(java_exception))<SUB>752</SUB>> ]
+"1473" [label = <(&lt;operator&gt;.equals,exception == nullptr)<SUB>753</SUB>> ]
+"1480" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;SetException)<SUB>756</SUB>> ]
+"1457" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Throwable)<SUB>752</SUB>> ]
+"1464" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Throwable)<SUB>752</SUB>> ]
+"1477" [label = <(RETURN,return JNI_ERR;,return JNI_ERR;)<SUB>754</SUB>> ]
+"1481" [label = <(Self,soa.Self())<SUB>756</SUB>> ]
+"1485" [label = <(FIELD_IDENTIFIER,SetException,SetException)<SUB>756</SUB>> ]
+"1459" [label = <(&lt;operator&gt;.fieldAccess,mirror::Throwable)<SUB>752</SUB>> ]
+"1465" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>752</SUB>> ]
+"1468" [label = <(&lt;operator&gt;.fieldAccess,mirror::Throwable)<SUB>752</SUB>> ]
+"1482" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>756</SUB>> ]
+"1461" [label = <(FIELD_IDENTIFIER,Throwable,Throwable)<SUB>752</SUB>> ]
+"1467" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>752</SUB>> ]
+"1470" [label = <(FIELD_IDENTIFIER,Throwable,Throwable)<SUB>752</SUB>> ]
+"1484" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>756</SUB>> ]
+"1448" [label = <(METHOD,Throw)<SUB>750</SUB>> ]
+"1489" [label = <(METHOD_RETURN,jint)<SUB>750</SUB>> ]
+  "1453" -> "1461" 
+  "1455" -> "1473" 
+  "1479" -> "1487" 
+  "1487" -> "1489" 
+  "1456" -> "1467" 
+  "1463" -> "1455" 
+  "1473" -> "1477" 
+  "1473" -> "1484" 
+  "1480" -> "1479" 
+  "1457" -> "1456" 
+  "1464" -> "1463" 
+  "1477" -> "1489" 
+  "1481" -> "1485" 
+  "1485" -> "1480" 
+  "1459" -> "1457" 
+  "1465" -> "1470" 
+  "1468" -> "1464" 
+  "1482" -> "1481" 
+  "1461" -> "1459" 
+  "1467" -> "1465" 
+  "1470" -> "1468" 
+  "1484" -> "1482" 
+  "1448" -> "1453" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/450-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/450-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/450-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/450-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "InvokeVirtualOrInterfaceWithJValues" {  
-"18872" [label = <(METHOD,InvokeVirtualOrInterfaceWithJValues)> ]
-"18878" [label = <(METHOD_RETURN,ANY)> ]
-  "18872" -> "18878" 
+digraph "CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj)" {  
+"18522" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))> ]
+"18527" [label = <(METHOD_RETURN,ANY)> ]
+  "18522" -> "18527" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/451-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/451-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/451-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/451-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_RETURN_ZERO" {  
-"18879" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO)<SUB>689</SUB>> ]
-"18882" [label = <(METHOD_RETURN,ANY)> ]
-  "18879" -> "18882" 
+digraph "CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid)" {  
+"18528" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))> ]
+"18533" [label = <(METHOD_RETURN,ANY)> ]
+  "18528" -> "18533" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/452-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/452-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/452-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/452-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj)" {  
-"18883" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))> ]
-"18888" [label = <(METHOD_RETURN,ANY)> ]
-  "18883" -> "18888" 
+digraph "InvokeWithVarArgs" {  
+"18534" [label = <(METHOD,InvokeWithVarArgs)> ]
+"18540" [label = <(METHOD_RETURN,ANY)> ]
+  "18534" -> "18540" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/453-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/453-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/453-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/453-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid)" {  
-"18889" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))> ]
-"18894" [label = <(METHOD_RETURN,ANY)> ]
-  "18889" -> "18894" 
+digraph "InvokeWithJValues" {  
+"18541" [label = <(METHOD,InvokeWithJValues)> ]
+"18547" [label = <(METHOD_RETURN,ANY)> ]
+  "18541" -> "18547" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/454-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/454-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/454-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/454-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "GetZ" {  
-"18895" [label = <(METHOD,GetZ)> ]
-"18898" [label = <(METHOD_RETURN,ANY)> ]
-  "18895" -> "18898" 
+digraph "GetObject" {  
+"18548" [label = <(METHOD,GetObject)> ]
+"18552" [label = <(METHOD_RETURN,ANY)> ]
+  "18548" -> "18552" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/455-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/455-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/455-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/455-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "GetB" {  
-"18899" [label = <(METHOD,GetB)> ]
-"18902" [label = <(METHOD_RETURN,ANY)> ]
-  "18899" -> "18902" 
+digraph "GetDeclaringClass" {  
+"18553" [label = <(METHOD,GetDeclaringClass)> ]
+"18556" [label = <(METHOD_RETURN,ANY)> ]
+  "18553" -> "18556" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/456-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/456-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/456-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/456-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "GetC" {  
-"18903" [label = <(METHOD,GetC)> ]
-"18906" [label = <(METHOD_RETURN,ANY)> ]
-  "18903" -> "18906" 
+digraph "CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_object)" {  
+"18557" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_object))> ]
+"18562" [label = <(METHOD_RETURN,ANY)> ]
+  "18557" -> "18562" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/457-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/457-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/457-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/457-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "GetD" {  
-"18907" [label = <(METHOD,GetD)> ]
-"18910" [label = <(METHOD_RETURN,ANY)> ]
-  "18907" -> "18910" 
+digraph "CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid)" {  
+"18563" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid))> ]
+"18568" [label = <(METHOD_RETURN,ANY)> ]
+  "18563" -> "18568" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/458-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/458-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/458-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/458-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "GetF" {  
-"18911" [label = <(METHOD,GetF)> ]
-"18914" [label = <(METHOD_RETURN,ANY)> ]
-  "18911" -> "18914" 
+digraph "NotifySetObjectField" {  
+"18569" [label = <(METHOD,NotifySetObjectField)> ]
+"18574" [label = <(METHOD_RETURN,ANY)> ]
+  "18569" -> "18574" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/459-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/459-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/459-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/459-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "GetI" {  
-"18915" [label = <(METHOD,GetI)> ]
-"18918" [label = <(METHOD_RETURN,ANY)> ]
-  "18915" -> "18918" 
+digraph "GET_PRIMITIVE_FIELD" {  
+"18575" [label = <(METHOD,GET_PRIMITIVE_FIELD)<SUB>1576</SUB>> ]
+"18578" [label = <(METHOD_RETURN,ANY)> ]
+  "18575" -> "18578" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/46-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/46-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/46-cfg.dot	2023-06-07 19:35:28.237384348 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/46-cfg.dot	2023-06-07 19:35:34.757383778 +0330
@@ -1,72 +1,27 @@
-digraph "GetSuperclass" {  
-"1412" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_class))<SUB>798</SUB>> ]
-"1431" [label = <(soa,soa(env))<SUB>799</SUB>> ]
-"1433" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c = soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>800</SUB>> ]
-"1450" [label = <(RETURN,return soa.AddLocalReference&lt;jclass&gt;(c-&gt;IsInterface() ? nullptr : c-&gt;GetSuperClass());,return soa.AddLocalReference&lt;jclass&gt;(c-&gt;IsInterface() ? nullptr : c-&gt;GetSuperClass());)<SUB>801</SUB>> ]
-"1434" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c)<SUB>800</SUB>> ]
-"1441" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>800</SUB>> ]
-"1451" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jclass&gt;(c-&gt;IsInterface() ? nullptr : c-&gt;GetSuperClass()))<SUB>801</SUB>> ]
-"1435" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>800</SUB>> ]
-"1442" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>800</SUB>> ]
-"1452" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jclass)<SUB>801</SUB>> ]
-"1457" [label = <(&lt;operator&gt;.conditional,c-&gt;IsInterface() ? nullptr : c-&gt;GetSuperClass())<SUB>801</SUB>> ]
-"1416" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>798</SUB>> ]
-"1437" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>800</SUB>> ]
-"1443" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>800</SUB>> ]
-"1446" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>800</SUB>> ]
-"1453" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>801</SUB>> ]
-"1458" [label = <(IsInterface,c-&gt;IsInterface())<SUB>801</SUB>> ]
-"1463" [label = <(GetSuperClass,c-&gt;GetSuperClass())<SUB>801</SUB>> ]
-"1417" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>798</SUB>> ]
-"1421" [label = <(CHECK_NON_NULL_ARGUMENT(java_class),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class == null&quot;))<SUB>798</SUB>> ]
-"1428" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_class),CHECK_NON_NULL_ARGUMENT(java_class))<SUB>798</SUB>> ]
-"1439" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>800</SUB>> ]
-"1445" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>800</SUB>> ]
-"1448" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>800</SUB>> ]
-"1455" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>801</SUB>> ]
-"1459" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;IsInterface)<SUB>801</SUB>> ]
-"1464" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;GetSuperClass)<SUB>801</SUB>> ]
-"1422" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>798</SUB>> ]
-"1461" [label = <(FIELD_IDENTIFIER,IsInterface,IsInterface)<SUB>801</SUB>> ]
-"1466" [label = <(FIELD_IDENTIFIER,GetSuperClass,GetSuperClass)<SUB>801</SUB>> ]
-"1423" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>798</SUB>> ]
-"1425" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>798</SUB>> ]
-"1408" [label = <(METHOD,GetSuperclass)<SUB>797</SUB>> ]
-"1467" [label = <(METHOD_RETURN,jclass)<SUB>797</SUB>> ]
-  "1412" -> "1417" 
-  "1412" -> "1431" 
-  "1431" -> "1439" 
-  "1433" -> "1455" 
-  "1450" -> "1467" 
-  "1434" -> "1445" 
-  "1441" -> "1433" 
-  "1451" -> "1450" 
-  "1435" -> "1434" 
-  "1442" -> "1441" 
-  "1452" -> "1461" 
-  "1457" -> "1451" 
-  "1416" -> "1423" 
-  "1416" -> "1431" 
-  "1437" -> "1435" 
-  "1443" -> "1448" 
-  "1446" -> "1442" 
-  "1453" -> "1452" 
-  "1458" -> "1457" 
-  "1458" -> "1466" 
-  "1463" -> "1457" 
-  "1417" -> "1416" 
-  "1421" -> "1428" 
-  "1428" -> "1467" 
-  "1439" -> "1437" 
-  "1445" -> "1443" 
-  "1448" -> "1446" 
-  "1455" -> "1453" 
-  "1459" -> "1458" 
-  "1464" -> "1463" 
-  "1422" -> "1421" 
-  "1461" -> "1459" 
-  "1466" -> "1464" 
-  "1423" -> "1425" 
-  "1425" -> "1422" 
-  "1408" -> "1412" 
+digraph "ThrowNew" {  
+"1496" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(c, JNI_ERR))<SUB>761</SUB>> ]
+"1515" [label = <(RETURN,return ThrowNewException(env, c, msg, nullptr);,return ThrowNewException(env, c, msg, nullptr);)<SUB>762</SUB>> ]
+"1516" [label = <(ThrowNewException,ThrowNewException(env, c, msg, nullptr))<SUB>762</SUB>> ]
+"1501" [label = <(UNLIKELY,UNLIKELY((c) == nullptr))<SUB>761</SUB>> ]
+"1502" [label = <(&lt;operator&gt;.equals,(c) == nullptr)<SUB>761</SUB>> ]
+"1506" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN(c, JNI_ERR),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;c == null&quot;))<SUB>761</SUB>> ]
+"1513" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(c, JNI_ERR),CHECK_NON_NULL_ARGUMENT_RETURN(c, JNI_ERR))<SUB>761</SUB>> ]
+"1507" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>761</SUB>> ]
+"1508" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>761</SUB>> ]
+"1510" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>761</SUB>> ]
+"1491" [label = <(METHOD,ThrowNew)<SUB>760</SUB>> ]
+"1521" [label = <(METHOD_RETURN,jint)<SUB>760</SUB>> ]
+  "1496" -> "1502" 
+  "1496" -> "1516" 
+  "1515" -> "1521" 
+  "1516" -> "1515" 
+  "1501" -> "1508" 
+  "1501" -> "1516" 
+  "1502" -> "1501" 
+  "1506" -> "1513" 
+  "1513" -> "1521" 
+  "1507" -> "1506" 
+  "1508" -> "1510" 
+  "1510" -> "1507" 
+  "1491" -> "1496" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/460-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/460-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/460-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/460-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "GetJ" {  
-"18919" [label = <(METHOD,GetJ)> ]
-"18922" [label = <(METHOD_RETURN,ANY)> ]
-  "18919" -> "18922" 
+digraph "GET_PRIMITIVE_FIELD(Boolean, obj)" {  
+"18579" [label = <(METHOD,GET_PRIMITIVE_FIELD(Boolean, obj))> ]
+"18583" [label = <(METHOD_RETURN,ANY)> ]
+  "18579" -> "18583" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/461-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/461-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/461-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/461-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "GetS" {  
-"18923" [label = <(METHOD,GetS)> ]
-"18926" [label = <(METHOD_RETURN,ANY)> ]
-  "18923" -> "18926" 
+digraph "GET_PRIMITIVE_FIELD(Byte, obj)" {  
+"18584" [label = <(METHOD,GET_PRIMITIVE_FIELD(Byte, obj))> ]
+"18588" [label = <(METHOD_RETURN,ANY)> ]
+  "18584" -> "18588" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/462-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/462-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/462-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/462-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_RETURN_VOID" {  
-"18927" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_VOID)<SUB>686</SUB>> ]
-"18930" [label = <(METHOD_RETURN,ANY)> ]
-  "18927" -> "18930" 
+digraph "GET_PRIMITIVE_FIELD(Char, obj)" {  
+"18589" [label = <(METHOD,GET_PRIMITIVE_FIELD(Char, obj))> ]
+"18593" [label = <(METHOD_RETURN,ANY)> ]
+  "18589" -> "18593" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/463-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/463-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/463-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/463-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj)" {  
-"18931" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))> ]
-"18936" [label = <(METHOD_RETURN,ANY)> ]
-  "18931" -> "18936" 
+digraph "GET_PRIMITIVE_FIELD(Short, obj)" {  
+"18594" [label = <(METHOD,GET_PRIMITIVE_FIELD(Short, obj))> ]
+"18598" [label = <(METHOD_RETURN,ANY)> ]
+  "18594" -> "18598" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/464-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/464-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/464-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/464-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid)" {  
-"18937" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))> ]
-"18942" [label = <(METHOD_RETURN,ANY)> ]
-  "18937" -> "18942" 
+digraph "GET_PRIMITIVE_FIELD(Int, obj)" {  
+"18599" [label = <(METHOD,GET_PRIMITIVE_FIELD(Int, obj))> ]
+"18603" [label = <(METHOD_RETURN,ANY)> ]
+  "18599" -> "18603" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/465-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/465-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/465-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/465-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "InvokeWithVarArgs" {  
-"18943" [label = <(METHOD,InvokeWithVarArgs)> ]
-"18949" [label = <(METHOD_RETURN,ANY)> ]
-  "18943" -> "18949" 
+digraph "GET_PRIMITIVE_FIELD(Long, obj)" {  
+"18604" [label = <(METHOD,GET_PRIMITIVE_FIELD(Long, obj))> ]
+"18608" [label = <(METHOD_RETURN,ANY)> ]
+  "18604" -> "18608" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/466-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/466-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/466-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/466-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "InvokeWithJValues" {  
-"18950" [label = <(METHOD,InvokeWithJValues)> ]
-"18956" [label = <(METHOD_RETURN,ANY)> ]
-  "18950" -> "18956" 
+digraph "GET_PRIMITIVE_FIELD(Float, obj)" {  
+"18609" [label = <(METHOD,GET_PRIMITIVE_FIELD(Float, obj))> ]
+"18613" [label = <(METHOD_RETURN,ANY)> ]
+  "18609" -> "18613" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/467-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/467-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/467-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/467-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "GetObject" {  
-"18957" [label = <(METHOD,GetObject)> ]
-"18961" [label = <(METHOD_RETURN,ANY)> ]
-  "18957" -> "18961" 
+digraph "GET_PRIMITIVE_FIELD(Double, obj)" {  
+"18614" [label = <(METHOD,GET_PRIMITIVE_FIELD(Double, obj))> ]
+"18618" [label = <(METHOD_RETURN,ANY)> ]
+  "18614" -> "18618" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/468-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/468-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/468-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/468-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "GetDeclaringClass" {  
-"18962" [label = <(METHOD,GetDeclaringClass)> ]
-"18965" [label = <(METHOD_RETURN,ANY)> ]
-  "18962" -> "18965" 
+digraph "GET_STATIC_PRIMITIVE_FIELD" {  
+"18619" [label = <(METHOD,GET_STATIC_PRIMITIVE_FIELD)<SUB>1585</SUB>> ]
+"18621" [label = <(METHOD_RETURN,ANY)> ]
+  "18619" -> "18621" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/469-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/469-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/469-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/469-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_object)" {  
-"18966" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_object))> ]
-"18971" [label = <(METHOD_RETURN,ANY)> ]
-  "18966" -> "18971" 
+digraph "GET_STATIC_PRIMITIVE_FIELD(Boolean)" {  
+"18622" [label = <(METHOD,GET_STATIC_PRIMITIVE_FIELD(Boolean))> ]
+"18625" [label = <(METHOD_RETURN,ANY)> ]
+  "18622" -> "18625" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/47-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/47-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/47-cfg.dot	2023-06-07 19:35:28.237384348 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/47-cfg.dot	2023-06-07 19:35:34.757383778 +0330
@@ -1,97 +1,23 @@
-digraph "IsAssignableFrom" {  
-"1474" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(java_class1, JNI_FALSE))<SUB>807</SUB>> ]
-"1493" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(java_class2, JNI_FALSE))<SUB>808</SUB>> ]
-"1513" [label = <(soa,soa(env))<SUB>809</SUB>> ]
-"1515" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c1 = soa.Decode&lt;mirror::Class&gt;(java_class1))<SUB>810</SUB>> ]
-"1532" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c2 = soa.Decode&lt;mirror::Class&gt;(java_class2))<SUB>811</SUB>> ]
-"1549" [label = <(RETURN,return c2-&gt;IsAssignableFrom(c1) ? JNI_TRUE : JNI_FALSE;,return c2-&gt;IsAssignableFrom(c1) ? JNI_TRUE : JNI_FALSE;)<SUB>812</SUB>> ]
-"1516" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c1)<SUB>810</SUB>> ]
-"1523" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(java_class1))<SUB>810</SUB>> ]
-"1533" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c2)<SUB>811</SUB>> ]
-"1540" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(java_class2))<SUB>811</SUB>> ]
-"1550" [label = <(&lt;operator&gt;.conditional,c2-&gt;IsAssignableFrom(c1) ? JNI_TRUE : JNI_FALSE)<SUB>812</SUB>> ]
-"1517" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>810</SUB>> ]
-"1524" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>810</SUB>> ]
-"1534" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>811</SUB>> ]
-"1541" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>811</SUB>> ]
-"1551" [label = <(IsAssignableFrom,c2-&gt;IsAssignableFrom(c1))<SUB>812</SUB>> ]
-"1479" [label = <(UNLIKELY,UNLIKELY((java_class1) == nullptr))<SUB>807</SUB>> ]
-"1498" [label = <(UNLIKELY,UNLIKELY((java_class2) == nullptr))<SUB>808</SUB>> ]
-"1519" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>810</SUB>> ]
-"1525" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>810</SUB>> ]
-"1528" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>810</SUB>> ]
-"1536" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>811</SUB>> ]
-"1542" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>811</SUB>> ]
-"1545" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>811</SUB>> ]
-"1552" [label = <(&lt;operator&gt;.indirectFieldAccess,c2-&gt;IsAssignableFrom)<SUB>812</SUB>> ]
-"1480" [label = <(&lt;operator&gt;.equals,(java_class1) == nullptr)<SUB>807</SUB>> ]
-"1484" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN(java_class1, JNI_FALSE),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class1 == null&quot;))<SUB>807</SUB>> ]
-"1491" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(java_class1, JNI_FALSE),CHECK_NON_NULL_ARGUMENT_RETURN(java_class1, JNI_FALSE))<SUB>807</SUB>> ]
-"1499" [label = <(&lt;operator&gt;.equals,(java_class2) == nullptr)<SUB>808</SUB>> ]
-"1503" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN(java_class2, JNI_FALSE),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class2 == null&quot;))<SUB>808</SUB>> ]
-"1510" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(java_class2, JNI_FALSE),CHECK_NON_NULL_ARGUMENT_RETURN(java_class2, JNI_FALSE))<SUB>808</SUB>> ]
-"1521" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>810</SUB>> ]
-"1527" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>810</SUB>> ]
-"1530" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>810</SUB>> ]
-"1538" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>811</SUB>> ]
-"1544" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>811</SUB>> ]
-"1547" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>811</SUB>> ]
-"1554" [label = <(FIELD_IDENTIFIER,IsAssignableFrom,IsAssignableFrom)<SUB>812</SUB>> ]
-"1485" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>807</SUB>> ]
-"1504" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>808</SUB>> ]
-"1486" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>807</SUB>> ]
-"1488" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>807</SUB>> ]
-"1505" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>808</SUB>> ]
-"1507" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>808</SUB>> ]
-"1469" [label = <(METHOD,IsAssignableFrom)<SUB>806</SUB>> ]
-"1558" [label = <(METHOD_RETURN,jboolean)<SUB>806</SUB>> ]
-  "1474" -> "1480" 
-  "1474" -> "1493" 
-  "1493" -> "1499" 
-  "1493" -> "1513" 
-  "1513" -> "1521" 
-  "1515" -> "1538" 
-  "1532" -> "1554" 
-  "1549" -> "1558" 
-  "1516" -> "1527" 
-  "1523" -> "1515" 
-  "1533" -> "1544" 
-  "1540" -> "1532" 
-  "1550" -> "1549" 
-  "1517" -> "1516" 
-  "1524" -> "1523" 
-  "1534" -> "1533" 
-  "1541" -> "1540" 
-  "1551" -> "1550" 
-  "1479" -> "1486" 
-  "1479" -> "1493" 
-  "1498" -> "1505" 
-  "1498" -> "1513" 
-  "1519" -> "1517" 
-  "1525" -> "1530" 
-  "1528" -> "1524" 
-  "1536" -> "1534" 
-  "1542" -> "1547" 
-  "1545" -> "1541" 
-  "1552" -> "1551" 
-  "1480" -> "1479" 
-  "1484" -> "1491" 
-  "1491" -> "1558" 
-  "1499" -> "1498" 
-  "1503" -> "1510" 
-  "1510" -> "1558" 
-  "1521" -> "1519" 
-  "1527" -> "1525" 
-  "1530" -> "1528" 
-  "1538" -> "1536" 
-  "1544" -> "1542" 
-  "1547" -> "1545" 
-  "1554" -> "1552" 
-  "1485" -> "1484" 
-  "1504" -> "1503" 
-  "1486" -> "1488" 
-  "1488" -> "1485" 
-  "1505" -> "1507" 
-  "1507" -> "1504" 
-  "1469" -> "1474" 
+digraph "ExceptionCheck" {  
+"1526" [label = <(RETURN,return static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_-&gt;IsExceptionPending() ? JNI_TRUE : JNI_FALSE;,return static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_-&gt;IsExceptionPending() ? JNI_TRUE : JNI_FALSE;)<SUB>766</SUB>> ]
+"1527" [label = <(&lt;operator&gt;.conditional,static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_-&gt;IsExceptionPending() ? JNI_TRUE : JNI_FALSE)<SUB>766</SUB>> ]
+"1528" [label = <(IsExceptionPending,static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_-&gt;IsExceptionPending())<SUB>766</SUB>> ]
+"1529" [label = <(&lt;operator&gt;.indirectFieldAccess,static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_-&gt;IsExceptionPending)<SUB>766</SUB>> ]
+"1530" [label = <(&lt;operator&gt;.indirectFieldAccess,static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_)<SUB>766</SUB>> ]
+"1535" [label = <(FIELD_IDENTIFIER,IsExceptionPending,IsExceptionPending)<SUB>766</SUB>> ]
+"1531" [label = <(&lt;operator&gt;.cast,static_cast&lt;JNIEnvExt*&gt;(env))<SUB>766</SUB>> ]
+"1534" [label = <(FIELD_IDENTIFIER,self_,self_)<SUB>766</SUB>> ]
+"1532" [label = <(UNKNOWN,JNIEnvExt*,JNIEnvExt*)<SUB>766</SUB>> ]
+"1523" [label = <(METHOD,ExceptionCheck)<SUB>765</SUB>> ]
+"1538" [label = <(METHOD_RETURN,jboolean)<SUB>765</SUB>> ]
+  "1526" -> "1538" 
+  "1527" -> "1526" 
+  "1528" -> "1527" 
+  "1529" -> "1528" 
+  "1530" -> "1535" 
+  "1535" -> "1529" 
+  "1531" -> "1534" 
+  "1534" -> "1530" 
+  "1532" -> "1531" 
+  "1523" -> "1532" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/470-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/470-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/470-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/470-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid)" {  
-"18972" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(fid))> ]
-"18977" [label = <(METHOD_RETURN,ANY)> ]
-  "18972" -> "18977" 
+digraph "GET_STATIC_PRIMITIVE_FIELD(Byte)" {  
+"18626" [label = <(METHOD,GET_STATIC_PRIMITIVE_FIELD(Byte))> ]
+"18629" [label = <(METHOD_RETURN,ANY)> ]
+  "18626" -> "18629" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/471-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/471-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/471-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/471-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "NotifySetObjectField" {  
-"18978" [label = <(METHOD,NotifySetObjectField)> ]
-"18983" [label = <(METHOD_RETURN,ANY)> ]
-  "18978" -> "18983" 
+digraph "GET_STATIC_PRIMITIVE_FIELD(Char)" {  
+"18630" [label = <(METHOD,GET_STATIC_PRIMITIVE_FIELD(Char))> ]
+"18633" [label = <(METHOD_RETURN,ANY)> ]
+  "18630" -> "18633" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/472-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/472-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/472-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/472-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "GET_PRIMITIVE_FIELD" {  
-"18984" [label = <(METHOD,GET_PRIMITIVE_FIELD)<SUB>1654</SUB>> ]
-"18987" [label = <(METHOD_RETURN,ANY)> ]
-  "18984" -> "18987" 
+digraph "GET_STATIC_PRIMITIVE_FIELD(Short)" {  
+"18634" [label = <(METHOD,GET_STATIC_PRIMITIVE_FIELD(Short))> ]
+"18637" [label = <(METHOD_RETURN,ANY)> ]
+  "18634" -> "18637" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/473-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/473-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/473-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/473-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "GET_PRIMITIVE_FIELD(Boolean, obj)" {  
-"18988" [label = <(METHOD,GET_PRIMITIVE_FIELD(Boolean, obj))> ]
-"18992" [label = <(METHOD_RETURN,ANY)> ]
-  "18988" -> "18992" 
+digraph "GET_STATIC_PRIMITIVE_FIELD(Int)" {  
+"18638" [label = <(METHOD,GET_STATIC_PRIMITIVE_FIELD(Int))> ]
+"18641" [label = <(METHOD_RETURN,ANY)> ]
+  "18638" -> "18641" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/474-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/474-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/474-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/474-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "GET_PRIMITIVE_FIELD(Byte, obj)" {  
-"18993" [label = <(METHOD,GET_PRIMITIVE_FIELD(Byte, obj))> ]
-"18997" [label = <(METHOD_RETURN,ANY)> ]
-  "18993" -> "18997" 
+digraph "GET_STATIC_PRIMITIVE_FIELD(Long)" {  
+"18642" [label = <(METHOD,GET_STATIC_PRIMITIVE_FIELD(Long))> ]
+"18645" [label = <(METHOD_RETURN,ANY)> ]
+  "18642" -> "18645" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/475-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/475-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/475-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/475-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "GET_PRIMITIVE_FIELD(Char, obj)" {  
-"18998" [label = <(METHOD,GET_PRIMITIVE_FIELD(Char, obj))> ]
-"19002" [label = <(METHOD_RETURN,ANY)> ]
-  "18998" -> "19002" 
+digraph "GET_STATIC_PRIMITIVE_FIELD(Float)" {  
+"18646" [label = <(METHOD,GET_STATIC_PRIMITIVE_FIELD(Float))> ]
+"18649" [label = <(METHOD_RETURN,ANY)> ]
+  "18646" -> "18649" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/476-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/476-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/476-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/476-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "GET_PRIMITIVE_FIELD(Short, obj)" {  
-"19003" [label = <(METHOD,GET_PRIMITIVE_FIELD(Short, obj))> ]
-"19007" [label = <(METHOD_RETURN,ANY)> ]
-  "19003" -> "19007" 
+digraph "GET_STATIC_PRIMITIVE_FIELD(Double)" {  
+"18650" [label = <(METHOD,GET_STATIC_PRIMITIVE_FIELD(Double))> ]
+"18653" [label = <(METHOD_RETURN,ANY)> ]
+  "18650" -> "18653" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/477-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/477-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/477-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/477-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "GET_PRIMITIVE_FIELD(Int, obj)" {  
-"19008" [label = <(METHOD,GET_PRIMITIVE_FIELD(Int, obj))> ]
-"19012" [label = <(METHOD_RETURN,ANY)> ]
-  "19008" -> "19012" 
+digraph "SET_PRIMITIVE_FIELD" {  
+"18654" [label = <(METHOD,SET_PRIMITIVE_FIELD)<SUB>1592</SUB>> ]
+"18657" [label = <(METHOD_RETURN,ANY)> ]
+  "18654" -> "18657" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/478-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/478-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/478-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/478-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "GET_PRIMITIVE_FIELD(Long, obj)" {  
-"19013" [label = <(METHOD,GET_PRIMITIVE_FIELD(Long, obj))> ]
-"19017" [label = <(METHOD_RETURN,ANY)> ]
-  "19013" -> "19017" 
+digraph "SET_PRIMITIVE_FIELD(Boolean, obj, v)" {  
+"18658" [label = <(METHOD,SET_PRIMITIVE_FIELD(Boolean, obj, v))> ]
+"18662" [label = <(METHOD_RETURN,ANY)> ]
+  "18658" -> "18662" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/479-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/479-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/479-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/479-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "GET_PRIMITIVE_FIELD(Float, obj)" {  
-"19018" [label = <(METHOD,GET_PRIMITIVE_FIELD(Float, obj))> ]
-"19022" [label = <(METHOD_RETURN,ANY)> ]
-  "19018" -> "19022" 
+digraph "SET_PRIMITIVE_FIELD(Byte, obj, v)" {  
+"18663" [label = <(METHOD,SET_PRIMITIVE_FIELD(Byte, obj, v))> ]
+"18667" [label = <(METHOD_RETURN,ANY)> ]
+  "18663" -> "18667" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/48-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/48-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/48-cfg.dot	2023-06-07 19:35:28.237384348 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/48-cfg.dot	2023-06-07 19:35:34.767383776 +0330
@@ -1,84 +1,19 @@
-digraph "IsInstanceOf" {  
-"1565" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_FALSE))<SUB>816</SUB>> ]
-"1585" [label = <(&lt;operator&gt;.equals,jobj == nullptr)<SUB>817</SUB>> ]
-"1589" [label = <(RETURN,return JNI_TRUE;,return JNI_TRUE;)<SUB>819</SUB>> ]
-"1570" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>816</SUB>> ]
-"1594" [label = <(soa,soa(env))<SUB>821</SUB>> ]
-"1596" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; obj = soa.Decode&lt;mirror::Object&gt;(jobj))<SUB>822</SUB>> ]
-"1613" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c = soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>823</SUB>> ]
-"1630" [label = <(RETURN,return obj-&gt;InstanceOf(c) ? JNI_TRUE : JNI_FALSE;,return obj-&gt;InstanceOf(c) ? JNI_TRUE : JNI_FALSE;)<SUB>824</SUB>> ]
-"1571" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>816</SUB>> ]
-"1575" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_FALSE),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class == null&quot;))<SUB>816</SUB>> ]
-"1582" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_FALSE),CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_FALSE))<SUB>816</SUB>> ]
-"1597" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; obj)<SUB>822</SUB>> ]
-"1604" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(jobj))<SUB>822</SUB>> ]
-"1614" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c)<SUB>823</SUB>> ]
-"1621" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>823</SUB>> ]
-"1631" [label = <(&lt;operator&gt;.conditional,obj-&gt;InstanceOf(c) ? JNI_TRUE : JNI_FALSE)<SUB>824</SUB>> ]
-"1576" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>816</SUB>> ]
-"1598" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>822</SUB>> ]
-"1605" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>822</SUB>> ]
-"1615" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>823</SUB>> ]
-"1622" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>823</SUB>> ]
-"1632" [label = <(InstanceOf,obj-&gt;InstanceOf(c))<SUB>824</SUB>> ]
-"1577" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>816</SUB>> ]
-"1579" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>816</SUB>> ]
-"1600" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>822</SUB>> ]
-"1606" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>822</SUB>> ]
-"1609" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>822</SUB>> ]
-"1617" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>823</SUB>> ]
-"1623" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>823</SUB>> ]
-"1626" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>823</SUB>> ]
-"1633" [label = <(&lt;operator&gt;.indirectFieldAccess,obj-&gt;InstanceOf)<SUB>824</SUB>> ]
-"1602" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>822</SUB>> ]
-"1608" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>822</SUB>> ]
-"1611" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>822</SUB>> ]
-"1619" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>823</SUB>> ]
-"1625" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>823</SUB>> ]
-"1628" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>823</SUB>> ]
-"1635" [label = <(FIELD_IDENTIFIER,InstanceOf,InstanceOf)<SUB>824</SUB>> ]
-"1560" [label = <(METHOD,IsInstanceOf)<SUB>815</SUB>> ]
-"1639" [label = <(METHOD_RETURN,jboolean)<SUB>815</SUB>> ]
-  "1565" -> "1571" 
-  "1565" -> "1585" 
-  "1585" -> "1589" 
-  "1585" -> "1594" 
-  "1589" -> "1639" 
-  "1570" -> "1577" 
-  "1570" -> "1585" 
-  "1594" -> "1602" 
-  "1596" -> "1619" 
-  "1613" -> "1635" 
-  "1630" -> "1639" 
-  "1571" -> "1570" 
-  "1575" -> "1582" 
-  "1582" -> "1639" 
-  "1597" -> "1608" 
-  "1604" -> "1596" 
-  "1614" -> "1625" 
-  "1621" -> "1613" 
-  "1631" -> "1630" 
-  "1576" -> "1575" 
-  "1598" -> "1597" 
-  "1605" -> "1604" 
-  "1615" -> "1614" 
-  "1622" -> "1621" 
-  "1632" -> "1631" 
-  "1577" -> "1579" 
-  "1579" -> "1576" 
-  "1600" -> "1598" 
-  "1606" -> "1611" 
-  "1609" -> "1605" 
-  "1617" -> "1615" 
-  "1623" -> "1628" 
-  "1626" -> "1622" 
-  "1633" -> "1632" 
-  "1602" -> "1600" 
-  "1608" -> "1606" 
-  "1611" -> "1609" 
-  "1619" -> "1617" 
-  "1625" -> "1623" 
-  "1628" -> "1626" 
-  "1635" -> "1633" 
-  "1560" -> "1565" 
+digraph "ExceptionClear" {  
+"1544" [label = <(soa,soa(env))<SUB>770</SUB>> ]
+"1546" [label = <(ClearException,soa.Self()-&gt;ClearException())<SUB>771</SUB>> ]
+"1547" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;ClearException)<SUB>771</SUB>> ]
+"1548" [label = <(Self,soa.Self())<SUB>771</SUB>> ]
+"1552" [label = <(FIELD_IDENTIFIER,ClearException,ClearException)<SUB>771</SUB>> ]
+"1549" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>771</SUB>> ]
+"1551" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>771</SUB>> ]
+"1540" [label = <(METHOD,ExceptionClear)<SUB>769</SUB>> ]
+"1553" [label = <(METHOD_RETURN,void)<SUB>769</SUB>> ]
+  "1544" -> "1551" 
+  "1546" -> "1553" 
+  "1547" -> "1546" 
+  "1548" -> "1552" 
+  "1552" -> "1547" 
+  "1549" -> "1548" 
+  "1551" -> "1549" 
+  "1540" -> "1544" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/480-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/480-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/480-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/480-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "GET_PRIMITIVE_FIELD(Double, obj)" {  
-"19023" [label = <(METHOD,GET_PRIMITIVE_FIELD(Double, obj))> ]
-"19027" [label = <(METHOD_RETURN,ANY)> ]
-  "19023" -> "19027" 
+digraph "SET_PRIMITIVE_FIELD(Char, obj, v)" {  
+"18668" [label = <(METHOD,SET_PRIMITIVE_FIELD(Char, obj, v))> ]
+"18672" [label = <(METHOD_RETURN,ANY)> ]
+  "18668" -> "18672" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/481-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/481-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/481-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/481-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "GET_STATIC_PRIMITIVE_FIELD" {  
-"19028" [label = <(METHOD,GET_STATIC_PRIMITIVE_FIELD)<SUB>1663</SUB>> ]
-"19030" [label = <(METHOD_RETURN,ANY)> ]
-  "19028" -> "19030" 
+digraph "SET_PRIMITIVE_FIELD(Float, obj, v)" {  
+"18673" [label = <(METHOD,SET_PRIMITIVE_FIELD(Float, obj, v))> ]
+"18677" [label = <(METHOD_RETURN,ANY)> ]
+  "18673" -> "18677" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/482-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/482-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/482-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/482-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "GET_STATIC_PRIMITIVE_FIELD(Boolean)" {  
-"19031" [label = <(METHOD,GET_STATIC_PRIMITIVE_FIELD(Boolean))> ]
-"19034" [label = <(METHOD_RETURN,ANY)> ]
-  "19031" -> "19034" 
+digraph "SET_PRIMITIVE_FIELD(Double, obj, v)" {  
+"18678" [label = <(METHOD,SET_PRIMITIVE_FIELD(Double, obj, v))> ]
+"18682" [label = <(METHOD_RETURN,ANY)> ]
+  "18678" -> "18682" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/483-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/483-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/483-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/483-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "GET_STATIC_PRIMITIVE_FIELD(Byte)" {  
-"19035" [label = <(METHOD,GET_STATIC_PRIMITIVE_FIELD(Byte))> ]
-"19038" [label = <(METHOD_RETURN,ANY)> ]
-  "19035" -> "19038" 
+digraph "SET_PRIMITIVE_FIELD(Int, obj, v)" {  
+"18683" [label = <(METHOD,SET_PRIMITIVE_FIELD(Int, obj, v))> ]
+"18687" [label = <(METHOD_RETURN,ANY)> ]
+  "18683" -> "18687" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/484-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/484-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/484-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/484-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "GET_STATIC_PRIMITIVE_FIELD(Char)" {  
-"19039" [label = <(METHOD,GET_STATIC_PRIMITIVE_FIELD(Char))> ]
-"19042" [label = <(METHOD_RETURN,ANY)> ]
-  "19039" -> "19042" 
+digraph "SET_PRIMITIVE_FIELD(Long, obj, v)" {  
+"18688" [label = <(METHOD,SET_PRIMITIVE_FIELD(Long, obj, v))> ]
+"18692" [label = <(METHOD_RETURN,ANY)> ]
+  "18688" -> "18692" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/485-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/485-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/485-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/485-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "GET_STATIC_PRIMITIVE_FIELD(Short)" {  
-"19043" [label = <(METHOD,GET_STATIC_PRIMITIVE_FIELD(Short))> ]
-"19046" [label = <(METHOD_RETURN,ANY)> ]
-  "19043" -> "19046" 
+digraph "SET_PRIMITIVE_FIELD(Short, obj, v)" {  
+"18693" [label = <(METHOD,SET_PRIMITIVE_FIELD(Short, obj, v))> ]
+"18697" [label = <(METHOD_RETURN,ANY)> ]
+  "18693" -> "18697" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/486-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/486-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/486-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/486-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "GET_STATIC_PRIMITIVE_FIELD(Int)" {  
-"19047" [label = <(METHOD,GET_STATIC_PRIMITIVE_FIELD(Int))> ]
-"19050" [label = <(METHOD_RETURN,ANY)> ]
-  "19047" -> "19050" 
+digraph "SET_STATIC_PRIMITIVE_FIELD" {  
+"18698" [label = <(METHOD,SET_STATIC_PRIMITIVE_FIELD)<SUB>1601</SUB>> ]
+"18700" [label = <(METHOD_RETURN,ANY)> ]
+  "18698" -> "18700" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/487-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/487-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/487-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/487-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "GET_STATIC_PRIMITIVE_FIELD(Long)" {  
-"19051" [label = <(METHOD,GET_STATIC_PRIMITIVE_FIELD(Long))> ]
-"19054" [label = <(METHOD_RETURN,ANY)> ]
-  "19051" -> "19054" 
+digraph "SET_STATIC_PRIMITIVE_FIELD(Boolean, v)" {  
+"18701" [label = <(METHOD,SET_STATIC_PRIMITIVE_FIELD(Boolean, v))> ]
+"18704" [label = <(METHOD_RETURN,ANY)> ]
+  "18701" -> "18704" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/488-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/488-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/488-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/488-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "GET_STATIC_PRIMITIVE_FIELD(Float)" {  
-"19055" [label = <(METHOD,GET_STATIC_PRIMITIVE_FIELD(Float))> ]
-"19058" [label = <(METHOD_RETURN,ANY)> ]
-  "19055" -> "19058" 
+digraph "SET_STATIC_PRIMITIVE_FIELD(Byte, v)" {  
+"18705" [label = <(METHOD,SET_STATIC_PRIMITIVE_FIELD(Byte, v))> ]
+"18708" [label = <(METHOD_RETURN,ANY)> ]
+  "18705" -> "18708" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/489-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/489-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/489-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/489-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "GET_STATIC_PRIMITIVE_FIELD(Double)" {  
-"19059" [label = <(METHOD,GET_STATIC_PRIMITIVE_FIELD(Double))> ]
-"19062" [label = <(METHOD_RETURN,ANY)> ]
-  "19059" -> "19062" 
+digraph "SET_STATIC_PRIMITIVE_FIELD(Char, v)" {  
+"18709" [label = <(METHOD,SET_STATIC_PRIMITIVE_FIELD(Char, v))> ]
+"18712" [label = <(METHOD_RETURN,ANY)> ]
+  "18709" -> "18712" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/49-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/49-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/49-cfg.dot	2023-06-07 19:35:28.237384348 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/49-cfg.dot	2023-06-07 19:35:34.767383776 +0330
@@ -1,48 +1,240 @@
-digraph "Throw" {  
-"1646" [label = <(soa,soa(env))<SUB>829</SUB>> ]
-"1648" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Throwable&gt; exception = soa.Decode&lt;mirror::Throwable&gt;(java_exception))<SUB>830</SUB>> ]
-"1672" [label = <(SetException,soa.Self()-&gt;SetException(exception))<SUB>834</SUB>> ]
-"1680" [label = <(RETURN,return JNI_OK;,return JNI_OK;)<SUB>835</SUB>> ]
-"1649" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Throwable&gt; exception)<SUB>830</SUB>> ]
-"1656" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Throwable&gt;(java_exception))<SUB>830</SUB>> ]
-"1666" [label = <(&lt;operator&gt;.equals,exception == nullptr)<SUB>831</SUB>> ]
-"1673" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;SetException)<SUB>834</SUB>> ]
-"1650" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Throwable)<SUB>830</SUB>> ]
-"1657" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Throwable)<SUB>830</SUB>> ]
-"1670" [label = <(RETURN,return JNI_ERR;,return JNI_ERR;)<SUB>832</SUB>> ]
-"1674" [label = <(Self,soa.Self())<SUB>834</SUB>> ]
-"1678" [label = <(FIELD_IDENTIFIER,SetException,SetException)<SUB>834</SUB>> ]
-"1652" [label = <(&lt;operator&gt;.fieldAccess,mirror::Throwable)<SUB>830</SUB>> ]
-"1658" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>830</SUB>> ]
-"1661" [label = <(&lt;operator&gt;.fieldAccess,mirror::Throwable)<SUB>830</SUB>> ]
-"1675" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>834</SUB>> ]
-"1654" [label = <(FIELD_IDENTIFIER,Throwable,Throwable)<SUB>830</SUB>> ]
-"1660" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>830</SUB>> ]
-"1663" [label = <(FIELD_IDENTIFIER,Throwable,Throwable)<SUB>830</SUB>> ]
-"1677" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>834</SUB>> ]
-"1641" [label = <(METHOD,Throw)<SUB>828</SUB>> ]
-"1682" [label = <(METHOD_RETURN,jint)<SUB>828</SUB>> ]
-  "1646" -> "1654" 
-  "1648" -> "1666" 
-  "1672" -> "1680" 
-  "1680" -> "1682" 
-  "1649" -> "1660" 
-  "1656" -> "1648" 
-  "1666" -> "1670" 
-  "1666" -> "1677" 
-  "1673" -> "1672" 
-  "1650" -> "1649" 
-  "1657" -> "1656" 
-  "1670" -> "1682" 
-  "1674" -> "1678" 
-  "1678" -> "1673" 
-  "1652" -> "1650" 
-  "1658" -> "1663" 
-  "1661" -> "1657" 
-  "1675" -> "1674" 
-  "1654" -> "1652" 
-  "1660" -> "1658" 
-  "1663" -> "1661" 
-  "1677" -> "1675" 
-  "1641" -> "1646" 
+digraph "ExceptionDescribe" {  
+"1559" [label = <(soa,soa(env))<SUB>775</SUB>> ]
+"1572" [label = <(&lt;operator&gt;.greaterThan,StackHandleScope&lt;1&gt; hs(soa.Self()))<SUB>782</SUB>> ]
+"1581" [label = <(&lt;operator&gt;.greaterThan,Handle&lt;mirror::Throwable&gt; old_exception(\012        hs.NewHandle&lt;mirror::Throwable&gt;(soa.Self()-&gt;GetException())))<SUB>783</SUB>> ]
+"1603" [label = <(ClearException,soa.Self()-&gt;ClearException())<SUB>785</SUB>> ]
+"1610" [label = <(&lt;operator&gt;.greaterThan,ScopedLocalRef&lt;jthrowable&gt; exception(env,\012                                         soa.AddLocalReference&lt;jthrowable&gt;(old_exception.Get())))<SUB>786</SUB>> ]
+"1626" [label = <(&lt;operator&gt;.greaterThan,ScopedLocalRef&lt;jclass&gt; exception_class(env, env-&gt;GetObjectClass(exception.get())))<SUB>788</SUB>> ]
+"1641" [label = <(&lt;operator&gt;.assignment,mid = env-&gt;GetMethodID(exception_class.get(), &quot;printStackTrace&quot;, &quot;()V&quot;))<SUB>789</SUB>> ]
+"1720" [label = <(SetException,soa.Self()-&gt;SetException(old_exception.Get()))<SUB>801</SUB>> ]
+"1562" [label = <(&lt;operator&gt;.logicalNot,!soa.Self()-&gt;GetException())<SUB>778</SUB>> ]
+"1573" [label = <(&lt;operator&gt;.lessThan,StackHandleScope&lt;1)<SUB>782</SUB>> ]
+"1576" [label = <(hs,hs(soa.Self()))<SUB>782</SUB>> ]
+"1582" [label = <(&lt;operator&gt;.lessThan,Handle&lt;mirror::Throwable)<SUB>783</SUB>> ]
+"1587" [label = <(old_exception,old_exception(\012        hs.NewHandle&lt;mirror::Throwable&gt;(soa.Self()-&gt;GetException())))<SUB>783</SUB>> ]
+"1604" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;ClearException)<SUB>785</SUB>> ]
+"1611" [label = <(&lt;operator&gt;.lessThan,ScopedLocalRef&lt;jthrowable)<SUB>786</SUB>> ]
+"1614" [label = <(exception,exception(env,\012                                         soa.AddLocalReference&lt;jthrowable&gt;(old_exception.Get())))<SUB>786</SUB>> ]
+"1627" [label = <(&lt;operator&gt;.lessThan,ScopedLocalRef&lt;jclass)<SUB>788</SUB>> ]
+"1630" [label = <(exception_class,exception_class(env, env-&gt;GetObjectClass(exception.get())))<SUB>788</SUB>> ]
+"1643" [label = <(GetMethodID,env-&gt;GetMethodID(exception_class.get(), &quot;printStackTrace&quot;, &quot;()V&quot;))<SUB>789</SUB>> ]
+"1654" [label = <(&lt;operator&gt;.equals,mid == nullptr)<SUB>790</SUB>> ]
+"1721" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;SetException)<SUB>801</SUB>> ]
+"1727" [label = <(Get,old_exception.Get())<SUB>801</SUB>> ]
+"1563" [label = <(GetException,soa.Self()-&gt;GetException())<SUB>778</SUB>> ]
+"1571" [label = <(RETURN,return;,return;)<SUB>779</SUB>> ]
+"1577" [label = <(Self,soa.Self())<SUB>782</SUB>> ]
+"1584" [label = <(&lt;operator&gt;.fieldAccess,mirror::Throwable)<SUB>783</SUB>> ]
+"1588" [label = <(&lt;operator&gt;.greaterThan,hs.NewHandle&lt;mirror::Throwable&gt;(soa.Self()-&gt;GetException()))<SUB>784</SUB>> ]
+"1605" [label = <(Self,soa.Self())<SUB>785</SUB>> ]
+"1609" [label = <(FIELD_IDENTIFIER,ClearException,ClearException)<SUB>785</SUB>> ]
+"1616" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jthrowable&gt;(old_exception.Get()))<SUB>787</SUB>> ]
+"1632" [label = <(GetObjectClass,env-&gt;GetObjectClass(exception.get()))<SUB>788</SUB>> ]
+"1644" [label = <(&lt;operator&gt;.indirectFieldAccess,env-&gt;GetMethodID)<SUB>789</SUB>> ]
+"1647" [label = <(get,exception_class.get())<SUB>789</SUB>> ]
+"1658" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI WARNING: no printStackTrace()V in &quot;\012 &lt;&lt; mirror::Object::PrettyTypeOf(old_exception.Get()))<SUB>791</SUB>> ]
+"1722" [label = <(Self,soa.Self())<SUB>801</SUB>> ]
+"1726" [label = <(FIELD_IDENTIFIER,SetException,SetException)<SUB>801</SUB>> ]
+"1728" [label = <(&lt;operator&gt;.fieldAccess,old_exception.Get)<SUB>801</SUB>> ]
+"1564" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;GetException)<SUB>778</SUB>> ]
+"1578" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>782</SUB>> ]
+"1586" [label = <(FIELD_IDENTIFIER,Throwable,Throwable)<SUB>783</SUB>> ]
+"1589" [label = <(&lt;operator&gt;.lessThan,hs.NewHandle&lt;mirror::Throwable)<SUB>784</SUB>> ]
+"1596" [label = <(GetException,soa.Self()-&gt;GetException())<SUB>784</SUB>> ]
+"1606" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>785</SUB>> ]
+"1617" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jthrowable)<SUB>787</SUB>> ]
+"1622" [label = <(Get,old_exception.Get())<SUB>787</SUB>> ]
+"1633" [label = <(&lt;operator&gt;.indirectFieldAccess,env-&gt;GetObjectClass)<SUB>788</SUB>> ]
+"1636" [label = <(get,exception.get())<SUB>788</SUB>> ]
+"1646" [label = <(FIELD_IDENTIFIER,GetMethodID,GetMethodID)<SUB>789</SUB>> ]
+"1648" [label = <(&lt;operator&gt;.fieldAccess,exception_class.get)<SUB>789</SUB>> ]
+"1659" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI WARNING: no printStackTrace()V in &quot;)<SUB>791</SUB>> ]
+"1663" [label = <(mirror::Object::PrettyTypeOf,mirror::Object::PrettyTypeOf(old_exception.Get()))<SUB>792</SUB>> ]
+"1675" [label = <(CallVoidMethod,env-&gt;CallVoidMethod(exception.get(), mid))<SUB>794</SUB>> ]
+"1723" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>801</SUB>> ]
+"1730" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>801</SUB>> ]
+"1565" [label = <(Self,soa.Self())<SUB>778</SUB>> ]
+"1569" [label = <(FIELD_IDENTIFIER,GetException,GetException)<SUB>778</SUB>> ]
+"1580" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>782</SUB>> ]
+"1590" [label = <(&lt;operator&gt;.fieldAccess,hs.NewHandle)<SUB>784</SUB>> ]
+"1593" [label = <(&lt;operator&gt;.fieldAccess,mirror::Throwable)<SUB>784</SUB>> ]
+"1597" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;GetException)<SUB>784</SUB>> ]
+"1608" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>785</SUB>> ]
+"1618" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>787</SUB>> ]
+"1623" [label = <(&lt;operator&gt;.fieldAccess,old_exception.Get)<SUB>787</SUB>> ]
+"1635" [label = <(FIELD_IDENTIFIER,GetObjectClass,GetObjectClass)<SUB>788</SUB>> ]
+"1637" [label = <(&lt;operator&gt;.fieldAccess,exception.get)<SUB>788</SUB>> ]
+"1650" [label = <(FIELD_IDENTIFIER,get,get)<SUB>789</SUB>> ]
+"1660" [label = <(LOG,LOG(WARNING))<SUB>791</SUB>> ]
+"1664" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object::PrettyTypeOf)<SUB>792</SUB>> ]
+"1669" [label = <(Get,old_exception.Get())<SUB>792</SUB>> ]
+"1676" [label = <(&lt;operator&gt;.indirectFieldAccess,env-&gt;CallVoidMethod)<SUB>794</SUB>> ]
+"1679" [label = <(get,exception.get())<SUB>794</SUB>> ]
+"1685" [label = <(IsExceptionPending,soa.Self()-&gt;IsExceptionPending())<SUB>795</SUB>> ]
+"1725" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>801</SUB>> ]
+"1566" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>778</SUB>> ]
+"1592" [label = <(FIELD_IDENTIFIER,NewHandle,NewHandle)<SUB>784</SUB>> ]
+"1595" [label = <(FIELD_IDENTIFIER,Throwable,Throwable)<SUB>784</SUB>> ]
+"1598" [label = <(Self,soa.Self())<SUB>784</SUB>> ]
+"1602" [label = <(FIELD_IDENTIFIER,GetException,GetException)<SUB>784</SUB>> ]
+"1620" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>787</SUB>> ]
+"1625" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>787</SUB>> ]
+"1639" [label = <(FIELD_IDENTIFIER,get,get)<SUB>788</SUB>> ]
+"1665" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>792</SUB>> ]
+"1668" [label = <(FIELD_IDENTIFIER,PrettyTypeOf,PrettyTypeOf)<SUB>792</SUB>> ]
+"1670" [label = <(&lt;operator&gt;.fieldAccess,old_exception.Get)<SUB>792</SUB>> ]
+"1678" [label = <(FIELD_IDENTIFIER,CallVoidMethod,CallVoidMethod)<SUB>794</SUB>> ]
+"1680" [label = <(&lt;operator&gt;.fieldAccess,exception.get)<SUB>794</SUB>> ]
+"1686" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;IsExceptionPending)<SUB>795</SUB>> ]
+"1693" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI WARNING: &quot; &lt;&lt; mirror::Object::PrettyTypeOf(soa.Self()-&gt;GetException())\012 &lt;&lt; &quot; thrown while calling printStackTrace&quot;)<SUB>796</SUB>> ]
+"1713" [label = <(ClearException,soa.Self()-&gt;ClearException())<SUB>798</SUB>> ]
+"1568" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>778</SUB>> ]
+"1599" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>784</SUB>> ]
+"1672" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>792</SUB>> ]
+"1682" [label = <(FIELD_IDENTIFIER,get,get)<SUB>794</SUB>> ]
+"1687" [label = <(Self,soa.Self())<SUB>795</SUB>> ]
+"1691" [label = <(FIELD_IDENTIFIER,IsExceptionPending,IsExceptionPending)<SUB>795</SUB>> ]
+"1694" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI WARNING: &quot; &lt;&lt; mirror::Object::PrettyTypeOf(soa.Self()-&gt;GetException()))<SUB>796</SUB>> ]
+"1714" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;ClearException)<SUB>798</SUB>> ]
+"1601" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>784</SUB>> ]
+"1688" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>795</SUB>> ]
+"1695" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI WARNING: &quot;)<SUB>796</SUB>> ]
+"1699" [label = <(mirror::Object::PrettyTypeOf,mirror::Object::PrettyTypeOf(soa.Self()-&gt;GetException()))<SUB>796</SUB>> ]
+"1715" [label = <(Self,soa.Self())<SUB>798</SUB>> ]
+"1719" [label = <(FIELD_IDENTIFIER,ClearException,ClearException)<SUB>798</SUB>> ]
+"1690" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>795</SUB>> ]
+"1696" [label = <(LOG,LOG(WARNING))<SUB>796</SUB>> ]
+"1700" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object::PrettyTypeOf)<SUB>796</SUB>> ]
+"1705" [label = <(GetException,soa.Self()-&gt;GetException())<SUB>796</SUB>> ]
+"1716" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>798</SUB>> ]
+"1701" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>796</SUB>> ]
+"1704" [label = <(FIELD_IDENTIFIER,PrettyTypeOf,PrettyTypeOf)<SUB>796</SUB>> ]
+"1706" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;GetException)<SUB>796</SUB>> ]
+"1718" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>798</SUB>> ]
+"1707" [label = <(Self,soa.Self())<SUB>796</SUB>> ]
+"1711" [label = <(FIELD_IDENTIFIER,GetException,GetException)<SUB>796</SUB>> ]
+"1708" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>796</SUB>> ]
+"1710" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>796</SUB>> ]
+"1555" [label = <(METHOD,ExceptionDescribe)<SUB>774</SUB>> ]
+"1731" [label = <(METHOD_RETURN,void)<SUB>774</SUB>> ]
+  "1559" -> "1568" 
+  "1572" -> "1586" 
+  "1581" -> "1608" 
+  "1603" -> "1611" 
+  "1610" -> "1627" 
+  "1626" -> "1646" 
+  "1641" -> "1654" 
+  "1720" -> "1731" 
+  "1562" -> "1571" 
+  "1562" -> "1573" 
+  "1573" -> "1580" 
+  "1576" -> "1572" 
+  "1582" -> "1592" 
+  "1587" -> "1581" 
+  "1604" -> "1603" 
+  "1611" -> "1620" 
+  "1614" -> "1610" 
+  "1627" -> "1635" 
+  "1630" -> "1626" 
+  "1643" -> "1641" 
+  "1654" -> "1660" 
+  "1654" -> "1678" 
+  "1721" -> "1730" 
+  "1727" -> "1720" 
+  "1563" -> "1562" 
+  "1571" -> "1731" 
+  "1577" -> "1576" 
+  "1584" -> "1582" 
+  "1588" -> "1587" 
+  "1605" -> "1609" 
+  "1609" -> "1604" 
+  "1616" -> "1614" 
+  "1632" -> "1630" 
+  "1644" -> "1650" 
+  "1647" -> "1643" 
+  "1658" -> "1725" 
+  "1722" -> "1726" 
+  "1726" -> "1721" 
+  "1728" -> "1727" 
+  "1564" -> "1563" 
+  "1578" -> "1577" 
+  "1586" -> "1584" 
+  "1589" -> "1601" 
+  "1596" -> "1588" 
+  "1606" -> "1605" 
+  "1617" -> "1625" 
+  "1622" -> "1616" 
+  "1633" -> "1639" 
+  "1636" -> "1632" 
+  "1646" -> "1644" 
+  "1648" -> "1647" 
+  "1659" -> "1665" 
+  "1663" -> "1658" 
+  "1675" -> "1690" 
+  "1723" -> "1722" 
+  "1730" -> "1728" 
+  "1565" -> "1569" 
+  "1569" -> "1564" 
+  "1580" -> "1578" 
+  "1590" -> "1595" 
+  "1593" -> "1589" 
+  "1597" -> "1596" 
+  "1608" -> "1606" 
+  "1618" -> "1617" 
+  "1623" -> "1622" 
+  "1635" -> "1633" 
+  "1637" -> "1636" 
+  "1650" -> "1648" 
+  "1660" -> "1659" 
+  "1664" -> "1672" 
+  "1669" -> "1663" 
+  "1676" -> "1682" 
+  "1679" -> "1675" 
+  "1685" -> "1696" 
+  "1685" -> "1725" 
+  "1725" -> "1723" 
+  "1566" -> "1565" 
+  "1592" -> "1590" 
+  "1595" -> "1593" 
+  "1598" -> "1602" 
+  "1602" -> "1597" 
+  "1620" -> "1618" 
+  "1625" -> "1623" 
+  "1639" -> "1637" 
+  "1665" -> "1668" 
+  "1668" -> "1664" 
+  "1670" -> "1669" 
+  "1678" -> "1676" 
+  "1680" -> "1679" 
+  "1686" -> "1685" 
+  "1693" -> "1718" 
+  "1713" -> "1725" 
+  "1568" -> "1566" 
+  "1599" -> "1598" 
+  "1672" -> "1670" 
+  "1682" -> "1680" 
+  "1687" -> "1691" 
+  "1691" -> "1686" 
+  "1694" -> "1693" 
+  "1714" -> "1713" 
+  "1601" -> "1599" 
+  "1688" -> "1687" 
+  "1695" -> "1701" 
+  "1699" -> "1694" 
+  "1715" -> "1719" 
+  "1719" -> "1714" 
+  "1690" -> "1688" 
+  "1696" -> "1695" 
+  "1700" -> "1710" 
+  "1705" -> "1699" 
+  "1716" -> "1715" 
+  "1701" -> "1704" 
+  "1704" -> "1700" 
+  "1706" -> "1705" 
+  "1718" -> "1716" 
+  "1707" -> "1711" 
+  "1711" -> "1706" 
+  "1708" -> "1707" 
+  "1710" -> "1708" 
+  "1555" -> "1559" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/490-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/490-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/490-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/490-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "SET_PRIMITIVE_FIELD" {  
-"19063" [label = <(METHOD,SET_PRIMITIVE_FIELD)<SUB>1670</SUB>> ]
-"19066" [label = <(METHOD_RETURN,ANY)> ]
-  "19063" -> "19066" 
+digraph "SET_STATIC_PRIMITIVE_FIELD(Float, v)" {  
+"18713" [label = <(METHOD,SET_STATIC_PRIMITIVE_FIELD(Float, v))> ]
+"18716" [label = <(METHOD_RETURN,ANY)> ]
+  "18713" -> "18716" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/491-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/491-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/491-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/491-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "SET_PRIMITIVE_FIELD(Boolean, obj, v)" {  
-"19067" [label = <(METHOD,SET_PRIMITIVE_FIELD(Boolean, obj, v))> ]
-"19071" [label = <(METHOD_RETURN,ANY)> ]
-  "19067" -> "19071" 
+digraph "SET_STATIC_PRIMITIVE_FIELD(Double, v)" {  
+"18717" [label = <(METHOD,SET_STATIC_PRIMITIVE_FIELD(Double, v))> ]
+"18720" [label = <(METHOD_RETURN,ANY)> ]
+  "18717" -> "18720" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/492-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/492-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/492-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/492-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "SET_PRIMITIVE_FIELD(Byte, obj, v)" {  
-"19072" [label = <(METHOD,SET_PRIMITIVE_FIELD(Byte, obj, v))> ]
-"19076" [label = <(METHOD_RETURN,ANY)> ]
-  "19072" -> "19076" 
+digraph "SET_STATIC_PRIMITIVE_FIELD(Int, v)" {  
+"18721" [label = <(METHOD,SET_STATIC_PRIMITIVE_FIELD(Int, v))> ]
+"18724" [label = <(METHOD_RETURN,ANY)> ]
+  "18721" -> "18724" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/493-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/493-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/493-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/493-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "SET_PRIMITIVE_FIELD(Char, obj, v)" {  
-"19077" [label = <(METHOD,SET_PRIMITIVE_FIELD(Char, obj, v))> ]
-"19081" [label = <(METHOD_RETURN,ANY)> ]
-  "19077" -> "19081" 
+digraph "SET_STATIC_PRIMITIVE_FIELD(Long, v)" {  
+"18725" [label = <(METHOD,SET_STATIC_PRIMITIVE_FIELD(Long, v))> ]
+"18728" [label = <(METHOD_RETURN,ANY)> ]
+  "18725" -> "18728" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/494-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/494-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/494-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/494-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "SET_PRIMITIVE_FIELD(Float, obj, v)" {  
-"19082" [label = <(METHOD,SET_PRIMITIVE_FIELD(Float, obj, v))> ]
-"19086" [label = <(METHOD_RETURN,ANY)> ]
-  "19082" -> "19086" 
+digraph "SET_STATIC_PRIMITIVE_FIELD(Short, v)" {  
+"18729" [label = <(METHOD,SET_STATIC_PRIMITIVE_FIELD(Short, v))> ]
+"18732" [label = <(METHOD_RETURN,ANY)> ]
+  "18729" -> "18732" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/495-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/495-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/495-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/495-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "SET_PRIMITIVE_FIELD(Double, obj, v)" {  
-"19087" [label = <(METHOD,SET_PRIMITIVE_FIELD(Double, obj, v))> ]
-"19091" [label = <(METHOD_RETURN,ANY)> ]
-  "19087" -> "19091" 
+digraph "JniAbortF" {  
+"18733" [label = <(METHOD,JniAbortF)> ]
+"18739" [label = <(METHOD_RETURN,ANY)> ]
+  "18733" -> "18739" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/496-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/496-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/496-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/496-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "SET_PRIMITIVE_FIELD(Int, obj, v)" {  
-"19092" [label = <(METHOD,SET_PRIMITIVE_FIELD(Int, obj, v))> ]
-"19096" [label = <(METHOD_RETURN,ANY)> ]
-  "19092" -> "19096" 
+digraph "mirror::String::AllocFromUtf16" {  
+"18740" [label = <(METHOD,mirror::String::AllocFromUtf16)> ]
+"18746" [label = <(METHOD_RETURN,ANY)> ]
+  "18740" -> "18746" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/497-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/497-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/497-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/497-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "SET_PRIMITIVE_FIELD(Long, obj, v)" {  
-"19097" [label = <(METHOD,SET_PRIMITIVE_FIELD(Long, obj, v))> ]
-"19101" [label = <(METHOD_RETURN,ANY)> ]
-  "19097" -> "19101" 
+digraph "mirror::String::AllocFromModifiedUtf8" {  
+"18747" [label = <(METHOD,mirror::String::AllocFromModifiedUtf8)> ]
+"18752" [label = <(METHOD_RETURN,ANY)> ]
+  "18747" -> "18752" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/498-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/498-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/498-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/498-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "SET_PRIMITIVE_FIELD(Short, obj, v)" {  
-"19102" [label = <(METHOD,SET_PRIMITIVE_FIELD(Short, obj, v))> ]
-"19106" [label = <(METHOD_RETURN,ANY)> ]
-  "19102" -> "19106" 
+digraph "CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string)" {  
+"18753" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string))> ]
+"18758" [label = <(METHOD_RETURN,ANY)> ]
+  "18753" -> "18758" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/499-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/499-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/499-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/499-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "SET_STATIC_PRIMITIVE_FIELD" {  
-"19107" [label = <(METHOD,SET_STATIC_PRIMITIVE_FIELD)<SUB>1679</SUB>> ]
-"19109" [label = <(METHOD_RETURN,ANY)> ]
-  "19107" -> "19109" 
+digraph "GetLength" {  
+"18759" [label = <(METHOD,GetLength)> ]
+"18762" [label = <(METHOD_RETURN,ANY)> ]
+  "18759" -> "18762" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/5-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/5-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/5-cfg.dot	2023-06-07 19:35:28.207384350 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/5-cfg.dot	2023-06-07 19:35:34.737383779 +0330
@@ -1,5 +1,29 @@
-digraph "ScopedVAArgs" {  
-"30" [label = <(METHOD,ScopedVAArgs)<SUB>80</SUB>> ]
-"33" [label = <(METHOD_RETURN,ANY)<SUB>80</SUB>> ]
-  "30" -> "33" 
+digraph "GetReturnAddress" {  
+"39" [label = <(DCHECK_LT,DCHECK_LT(depth, kMaxReturnAddressDepth))<SUB>87</SUB>> ]
+"47" [label = <(RETURN,return __builtin_return_address(0);,return __builtin_return_address(0);)<SUB>89</SUB>> ]
+"52" [label = <(RETURN,return __builtin_return_address(1);,return __builtin_return_address(1);)<SUB>90</SUB>> ]
+"57" [label = <(RETURN,return __builtin_return_address(2);,return __builtin_return_address(2);)<SUB>91</SUB>> ]
+"62" [label = <(RETURN,return __builtin_return_address(3);,return __builtin_return_address(3);)<SUB>92</SUB>> ]
+"66" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>94</SUB>> ]
+"48" [label = <(__builtin_return_address,__builtin_return_address(0))<SUB>89</SUB>> ]
+"53" [label = <(__builtin_return_address,__builtin_return_address(1))<SUB>90</SUB>> ]
+"58" [label = <(__builtin_return_address,__builtin_return_address(2))<SUB>91</SUB>> ]
+"63" [label = <(__builtin_return_address,__builtin_return_address(3))<SUB>92</SUB>> ]
+"36" [label = <(METHOD,GetReturnAddress)<SUB>86</SUB>> ]
+"68" [label = <(METHOD_RETURN,void*)<SUB>86</SUB>> ]
+  "39" -> "48" 
+  "39" -> "53" 
+  "39" -> "58" 
+  "39" -> "63" 
+  "39" -> "66" 
+  "47" -> "68" 
+  "52" -> "68" 
+  "57" -> "68" 
+  "62" -> "68" 
+  "66" -> "68" 
+  "48" -> "47" 
+  "53" -> "52" 
+  "58" -> "57" 
+  "63" -> "62" 
+  "36" -> "39" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/50-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/50-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/50-cfg.dot	2023-06-07 19:35:28.237384348 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/50-cfg.dot	2023-06-07 19:35:34.767383776 +0330
@@ -1,27 +1,39 @@
-digraph "ThrowNew" {  
-"1689" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(c, JNI_ERR))<SUB>839</SUB>> ]
-"1708" [label = <(RETURN,return ThrowNewException(env, c, msg, nullptr);,return ThrowNewException(env, c, msg, nullptr);)<SUB>840</SUB>> ]
-"1709" [label = <(ThrowNewException,ThrowNewException(env, c, msg, nullptr))<SUB>840</SUB>> ]
-"1694" [label = <(UNLIKELY,UNLIKELY((c) == nullptr))<SUB>839</SUB>> ]
-"1695" [label = <(&lt;operator&gt;.equals,(c) == nullptr)<SUB>839</SUB>> ]
-"1699" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN(c, JNI_ERR),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;c == null&quot;))<SUB>839</SUB>> ]
-"1706" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN(c, JNI_ERR),CHECK_NON_NULL_ARGUMENT_RETURN(c, JNI_ERR))<SUB>839</SUB>> ]
-"1700" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>839</SUB>> ]
-"1701" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>839</SUB>> ]
-"1703" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>839</SUB>> ]
-"1684" [label = <(METHOD,ThrowNew)<SUB>838</SUB>> ]
-"1714" [label = <(METHOD_RETURN,jint)<SUB>838</SUB>> ]
-  "1689" -> "1695" 
-  "1689" -> "1709" 
-  "1708" -> "1714" 
-  "1709" -> "1708" 
-  "1694" -> "1701" 
-  "1694" -> "1709" 
-  "1695" -> "1694" 
-  "1699" -> "1706" 
-  "1706" -> "1714" 
-  "1700" -> "1699" 
-  "1701" -> "1703" 
-  "1703" -> "1700" 
-  "1684" -> "1689" 
+digraph "ExceptionOccurred" {  
+"1737" [label = <(soa,soa(env))<SUB>805</SUB>> ]
+"1739" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; exception = soa.Self()-&gt;GetException())<SUB>806</SUB>> ]
+"1754" [label = <(RETURN,return soa.AddLocalReference&lt;jthrowable&gt;(exception);,return soa.AddLocalReference&lt;jthrowable&gt;(exception);)<SUB>807</SUB>> ]
+"1740" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; exception)<SUB>806</SUB>> ]
+"1747" [label = <(GetException,soa.Self()-&gt;GetException())<SUB>806</SUB>> ]
+"1755" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jthrowable&gt;(exception))<SUB>807</SUB>> ]
+"1741" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>806</SUB>> ]
+"1748" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;GetException)<SUB>806</SUB>> ]
+"1756" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jthrowable)<SUB>807</SUB>> ]
+"1743" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>806</SUB>> ]
+"1749" [label = <(Self,soa.Self())<SUB>806</SUB>> ]
+"1753" [label = <(FIELD_IDENTIFIER,GetException,GetException)<SUB>806</SUB>> ]
+"1757" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>807</SUB>> ]
+"1745" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>806</SUB>> ]
+"1750" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>806</SUB>> ]
+"1759" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>807</SUB>> ]
+"1752" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>806</SUB>> ]
+"1733" [label = <(METHOD,ExceptionOccurred)<SUB>804</SUB>> ]
+"1762" [label = <(METHOD_RETURN,jthrowable)<SUB>804</SUB>> ]
+  "1737" -> "1745" 
+  "1739" -> "1759" 
+  "1754" -> "1762" 
+  "1740" -> "1752" 
+  "1747" -> "1739" 
+  "1755" -> "1754" 
+  "1741" -> "1740" 
+  "1748" -> "1747" 
+  "1756" -> "1755" 
+  "1743" -> "1741" 
+  "1749" -> "1753" 
+  "1753" -> "1748" 
+  "1757" -> "1756" 
+  "1745" -> "1743" 
+  "1750" -> "1749" 
+  "1759" -> "1757" 
+  "1752" -> "1750" 
+  "1733" -> "1737" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/500-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/500-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/500-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/500-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "SET_STATIC_PRIMITIVE_FIELD(Boolean, v)" {  
-"19110" [label = <(METHOD,SET_STATIC_PRIMITIVE_FIELD(Boolean, v))> ]
-"19113" [label = <(METHOD_RETURN,ANY)> ]
-  "19110" -> "19113" 
+digraph "GetUtfLength" {  
+"18763" [label = <(METHOD,GetUtfLength)> ]
+"18766" [label = <(METHOD_RETURN,ANY)> ]
+  "18763" -> "18766" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/501-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/501-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/501-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/501-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "SET_STATIC_PRIMITIVE_FIELD(Byte, v)" {  
-"19114" [label = <(METHOD,SET_STATIC_PRIMITIVE_FIELD(Byte, v))> ]
-"19117" [label = <(METHOD_RETURN,ANY)> ]
-  "19114" -> "19117" 
+digraph "CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string)" {  
+"18767" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string))> ]
+"18772" [label = <(METHOD_RETURN,ANY)> ]
+  "18767" -> "18772" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/502-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/502-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/502-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/502-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "SET_STATIC_PRIMITIVE_FIELD(Char, v)" {  
-"19118" [label = <(METHOD,SET_STATIC_PRIMITIVE_FIELD(Char, v))> ]
-"19121" [label = <(METHOD_RETURN,ANY)> ]
-  "19118" -> "19121" 
+digraph "&lt;operator&gt;.logicalOr" {  
+"18773" [label = <(METHOD,&lt;operator&gt;.logicalOr)> ]
+"18777" [label = <(METHOD_RETURN,ANY)> ]
+  "18773" -> "18777" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/503-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/503-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/503-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/503-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "SET_STATIC_PRIMITIVE_FIELD(Float, v)" {  
-"19122" [label = <(METHOD,SET_STATIC_PRIMITIVE_FIELD(Float, v))> ]
-"19125" [label = <(METHOD_RETURN,ANY)> ]
-  "19122" -> "19125" 
+digraph "&lt;operator&gt;.subtraction" {  
+"18778" [label = <(METHOD,&lt;operator&gt;.subtraction)> ]
+"18782" [label = <(METHOD_RETURN,ANY)> ]
+  "18778" -> "18782" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/504-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/504-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/504-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/504-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "SET_STATIC_PRIMITIVE_FIELD(Double, v)" {  
-"19126" [label = <(METHOD,SET_STATIC_PRIMITIVE_FIELD(Double, v))> ]
-"19129" [label = <(METHOD_RETURN,ANY)> ]
-  "19126" -> "19129" 
+digraph "CHECK_NON_NULL_MEMCPY_ARGUMENT" {  
+"18783" [label = <(METHOD,CHECK_NON_NULL_MEMCPY_ARGUMENT)<SUB>623</SUB>> ]
+"18787" [label = <(METHOD_RETURN,ANY)> ]
+  "18783" -> "18787" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/505-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/505-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/505-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/505-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "SET_STATIC_PRIMITIVE_FIELD(Int, v)" {  
-"19130" [label = <(METHOD,SET_STATIC_PRIMITIVE_FIELD(Int, v))> ]
-"19133" [label = <(METHOD_RETURN,ANY)> ]
-  "19130" -> "19133" 
+digraph "CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf)" {  
+"18788" [label = <(METHOD,CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf))> ]
+"18793" [label = <(METHOD_RETURN,ANY)> ]
+  "18788" -> "18793" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/506-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/506-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/506-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/506-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "SET_STATIC_PRIMITIVE_FIELD(Long, v)" {  
-"19134" [label = <(METHOD,SET_STATIC_PRIMITIVE_FIELD(Long, v))> ]
-"19137" [label = <(METHOD_RETURN,ANY)> ]
-  "19134" -> "19137" 
+digraph "IsCompressed" {  
+"18794" [label = <(METHOD,IsCompressed)> ]
+"18797" [label = <(METHOD_RETURN,ANY)> ]
+  "18794" -> "18797" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/507-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/507-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/507-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/507-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "SET_STATIC_PRIMITIVE_FIELD(Short, v)" {  
-"19138" [label = <(METHOD,SET_STATIC_PRIMITIVE_FIELD(Short, v))> ]
-"19141" [label = <(METHOD_RETURN,ANY)> ]
-  "19138" -> "19141" 
+digraph "CharAt" {  
+"18798" [label = <(METHOD,CharAt)> ]
+"18802" [label = <(METHOD_RETURN,ANY)> ]
+  "18798" -> "18802" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/508-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/508-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/508-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/508-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "JniAbortF" {  
-"19142" [label = <(METHOD,JniAbortF)> ]
-"19148" [label = <(METHOD_RETURN,ANY)> ]
-  "19142" -> "19148" 
+digraph "&lt;operator&gt;.addition" {  
+"18803" [label = <(METHOD,&lt;operator&gt;.addition)> ]
+"18807" [label = <(METHOD_RETURN,ANY)> ]
+  "18803" -> "18807" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/509-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/509-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/509-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/509-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "mirror::String::AllocFromUtf16" {  
-"19149" [label = <(METHOD,mirror::String::AllocFromUtf16)> ]
-"19155" [label = <(METHOD_RETURN,ANY)> ]
-  "19149" -> "19155" 
+digraph "GetValue" {  
+"18808" [label = <(METHOD,GetValue)> ]
+"18811" [label = <(METHOD_RETURN,ANY)> ]
+  "18808" -> "18811" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/51-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/51-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/51-cfg.dot	2023-06-07 19:35:28.237384348 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/51-cfg.dot	2023-06-07 19:35:34.767383776 +0330
@@ -1,23 +1,11 @@
-digraph "ExceptionCheck" {  
-"1719" [label = <(RETURN,return static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_-&gt;IsExceptionPending() ? JNI_TRUE : JNI_FALSE;,return static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_-&gt;IsExceptionPending() ? JNI_TRUE : JNI_FALSE;)<SUB>844</SUB>> ]
-"1720" [label = <(&lt;operator&gt;.conditional,static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_-&gt;IsExceptionPending() ? JNI_TRUE : JNI_FALSE)<SUB>844</SUB>> ]
-"1721" [label = <(IsExceptionPending,static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_-&gt;IsExceptionPending())<SUB>844</SUB>> ]
-"1722" [label = <(&lt;operator&gt;.indirectFieldAccess,static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_-&gt;IsExceptionPending)<SUB>844</SUB>> ]
-"1723" [label = <(&lt;operator&gt;.indirectFieldAccess,static_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_)<SUB>844</SUB>> ]
-"1728" [label = <(FIELD_IDENTIFIER,IsExceptionPending,IsExceptionPending)<SUB>844</SUB>> ]
-"1724" [label = <(&lt;operator&gt;.cast,static_cast&lt;JNIEnvExt*&gt;(env))<SUB>844</SUB>> ]
-"1727" [label = <(FIELD_IDENTIFIER,self_,self_)<SUB>844</SUB>> ]
-"1725" [label = <(UNKNOWN,JNIEnvExt*,JNIEnvExt*)<SUB>844</SUB>> ]
-"1716" [label = <(METHOD,ExceptionCheck)<SUB>843</SUB>> ]
-"1731" [label = <(METHOD_RETURN,jboolean)<SUB>843</SUB>> ]
-  "1719" -> "1731" 
-  "1720" -> "1719" 
-  "1721" -> "1720" 
-  "1722" -> "1721" 
-  "1723" -> "1728" 
-  "1728" -> "1722" 
-  "1724" -> "1727" 
-  "1727" -> "1723" 
-  "1725" -> "1724" 
-  "1716" -> "1725" 
+digraph "FatalError" {  
+"1768" [label = <(&lt;operator&gt;.shiftLeft,LOG(FATAL) &lt;&lt; &quot;JNI FatalError called: &quot; &lt;&lt; msg)<SUB>811</SUB>> ]
+"1769" [label = <(&lt;operator&gt;.shiftLeft,LOG(FATAL) &lt;&lt; &quot;JNI FatalError called: &quot;)<SUB>811</SUB>> ]
+"1770" [label = <(LOG,LOG(FATAL))<SUB>811</SUB>> ]
+"1764" [label = <(METHOD,FatalError)<SUB>810</SUB>> ]
+"1774" [label = <(METHOD_RETURN,void)<SUB>810</SUB>> ]
+  "1768" -> "1774" 
+  "1769" -> "1768" 
+  "1770" -> "1769" 
+  "1764" -> "1770" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/510-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/510-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/510-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/510-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "::max" {  
-"19156" [label = <(METHOD,::max)> ]
-"19159" [label = <(METHOD_RETURN,ANY)> ]
-  "19156" -> "19159" 
+digraph "memcpy" {  
+"18812" [label = <(METHOD,memcpy)> ]
+"18817" [label = <(METHOD_RETURN,ANY)> ]
+  "18812" -> "18817" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/511-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/511-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/511-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/511-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "android::base::StringPrintf" {  
-"19160" [label = <(METHOD,android::base::StringPrintf)> ]
-"19165" [label = <(METHOD_RETURN,ANY)> ]
-  "19160" -> "19165" 
+digraph "&lt;operator&gt;.multiplication" {  
+"18818" [label = <(METHOD,&lt;operator&gt;.multiplication)> ]
+"18822" [label = <(METHOD_RETURN,ANY)> ]
+  "18818" -> "18822" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/512-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/512-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/512-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/512-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "ThrowOutOfMemoryError" {  
-"19166" [label = <(METHOD,ThrowOutOfMemoryError)> ]
-"19170" [label = <(METHOD_RETURN,ANY)> ]
-  "19166" -> "19170" 
+digraph "&lt;operator&gt;.sizeOf" {  
+"18823" [label = <(METHOD,&lt;operator&gt;.sizeOf)> ]
+"18826" [label = <(METHOD_RETURN,ANY)> ]
+  "18823" -> "18826" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/513-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/513-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/513-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/513-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "UINT64_C" {  
-"19171" [label = <(METHOD,UINT64_C)> ]
-"19174" [label = <(METHOD_RETURN,ANY)> ]
-  "19171" -> "19174" 
+digraph "CountUtf8Bytes" {  
+"18827" [label = <(METHOD,CountUtf8Bytes)> ]
+"18831" [label = <(METHOD_RETURN,ANY)> ]
+  "18827" -> "18831" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/514-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/514-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/514-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/514-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "prev_bad_input_time" {  
-"19175" [label = <(METHOD,prev_bad_input_time)> ]
-"19178" [label = <(METHOD_RETURN,ANY)> ]
-  "19175" -> "19178" 
+digraph "ConvertUtf16ToModifiedUtf8" {  
+"18832" [label = <(METHOD,ConvertUtf16ToModifiedUtf8)> ]
+"18838" [label = <(METHOD_RETURN,ANY)> ]
+  "18832" -> "18838" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/515-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/515-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/515-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/515-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "load" {  
-"19179" [label = <(METHOD,load)> ]
-"19183" [label = <(METHOD_RETURN,ANY)> ]
-  "19179" -> "19183" 
+digraph "CHECK_NON_NULL_ARGUMENT(java_string)" {  
+"18839" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(java_string))> ]
+"18844" [label = <(METHOD_RETURN,ANY)> ]
+  "18839" -> "18844" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/516-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/516-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/516-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/516-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "NanoTime" {  
-"19184" [label = <(METHOD,NanoTime)> ]
-"19186" [label = <(METHOD_RETURN,ANY)> ]
-  "19184" -> "19186" 
+digraph "IsMovableObject" {  
+"18845" [label = <(METHOD,IsMovableObject)> ]
+"18849" [label = <(METHOD_RETURN,ANY)> ]
+  "18845" -> "18849" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/517-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/517-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/517-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/517-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.logicalOr" {  
-"19187" [label = <(METHOD,&lt;operator&gt;.logicalOr)> ]
-"19191" [label = <(METHOD_RETURN,ANY)> ]
-  "19187" -> "19191" 
+digraph "&lt;operator&gt;.new" {  
+"18850" [label = <(METHOD,&lt;operator&gt;.new)> ]
+"18853" [label = <(METHOD_RETURN,ANY)> ]
+  "18850" -> "18853" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/518-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/518-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/518-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/518-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "compare_exchange_strong" {  
-"19192" [label = <(METHOD,compare_exchange_strong)> ]
-"19198" [label = <(METHOD_RETURN,ANY)> ]
-  "19192" -> "19198" 
+digraph "&lt;operator&gt;.delete" {  
+"18854" [label = <(METHOD,&lt;operator&gt;.delete)> ]
+"18857" [label = <(METHOD_RETURN,ANY)> ]
+  "18854" -> "18857" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/519-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/519-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/519-cfg.dot	2023-06-07 19:35:28.437384330 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/519-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "emplace" {  
-"19199" [label = <(METHOD,emplace)> ]
-"19202" [label = <(METHOD_RETURN,ANY)> ]
-  "19199" -> "19202" 
+digraph "h" {  
+"18858" [label = <(METHOD,h)> ]
+"18861" [label = <(METHOD_RETURN,ANY)> ]
+  "18858" -> "18861" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/52-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/52-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/52-cfg.dot	2023-06-07 19:35:28.237384348 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/52-cfg.dot	2023-06-07 19:35:34.767383776 +0330
@@ -1,19 +1,24 @@
-digraph "ExceptionClear" {  
-"1737" [label = <(soa,soa(env))<SUB>848</SUB>> ]
-"1739" [label = <(ClearException,soa.Self()-&gt;ClearException())<SUB>849</SUB>> ]
-"1740" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;ClearException)<SUB>849</SUB>> ]
-"1741" [label = <(Self,soa.Self())<SUB>849</SUB>> ]
-"1745" [label = <(FIELD_IDENTIFIER,ClearException,ClearException)<SUB>849</SUB>> ]
-"1742" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>849</SUB>> ]
-"1744" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>849</SUB>> ]
-"1733" [label = <(METHOD,ExceptionClear)<SUB>847</SUB>> ]
-"1746" [label = <(METHOD_RETURN,void)<SUB>847</SUB>> ]
-  "1737" -> "1744" 
-  "1739" -> "1746" 
-  "1740" -> "1739" 
-  "1741" -> "1745" 
-  "1745" -> "1740" 
-  "1742" -> "1741" 
-  "1744" -> "1742" 
-  "1733" -> "1737" 
+digraph "PushLocalFrame" {  
+"1781" [label = <(soa,soa(env))<SUB>816</SUB>> ]
+"1793" [label = <(PushFrame,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;PushFrame(capacity))<SUB>820</SUB>> ]
+"1799" [label = <(RETURN,return JNI_OK;,return JNI_OK;)<SUB>821</SUB>> ]
+"1784" [label = <(&lt;operator&gt;.notEquals,EnsureLocalCapacityInternal(soa, capacity, &quot;PushLocalFrame&quot;) != JNI_OK)<SUB>817</SUB>> ]
+"1794" [label = <(&lt;operator&gt;.indirectFieldAccess,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;PushFrame)<SUB>820</SUB>> ]
+"1785" [label = <(EnsureLocalCapacityInternal,EnsureLocalCapacityInternal(soa, capacity, &quot;PushLocalFrame&quot;))<SUB>817</SUB>> ]
+"1791" [label = <(RETURN,return JNI_ERR;,return JNI_ERR;)<SUB>818</SUB>> ]
+"1795" [label = <(down_cast&lt;JNIEnvExt*&gt;,down_cast&lt;JNIEnvExt*&gt;(env))<SUB>820</SUB>> ]
+"1797" [label = <(FIELD_IDENTIFIER,PushFrame,PushFrame)<SUB>820</SUB>> ]
+"1776" [label = <(METHOD,PushLocalFrame)<SUB>814</SUB>> ]
+"1801" [label = <(METHOD_RETURN,jint)<SUB>814</SUB>> ]
+  "1781" -> "1785" 
+  "1793" -> "1799" 
+  "1799" -> "1801" 
+  "1784" -> "1791" 
+  "1784" -> "1795" 
+  "1794" -> "1793" 
+  "1785" -> "1784" 
+  "1791" -> "1801" 
+  "1795" -> "1797" 
+  "1797" -> "1794" 
+  "1776" -> "1781" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/520-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/520-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/520-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/520-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "reserve" {  
-"19203" [label = <(METHOD,reserve)> ]
-"19207" [label = <(METHOD_RETURN,ANY)> ]
-  "19203" -> "19207" 
+digraph "NewHandleWrapper" {  
+"18862" [label = <(METHOD,NewHandleWrapper)> ]
+"18866" [label = <(METHOD_RETURN,ANY)> ]
+  "18862" -> "18866" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/521-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/521-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/521-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/521-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "VisitModifiedUtf8Chars" {  
-"19208" [label = <(METHOD,VisitModifiedUtf8Chars)> ]
-"19214" [label = <(METHOD_RETURN,ANY)> ]
-  "19208" -> "19214" 
+digraph "IncrementDisableMovingGC" {  
+"18867" [label = <(METHOD,IncrementDisableMovingGC)> ]
+"18871" [label = <(METHOD_RETURN,ANY)> ]
+  "18867" -> "18871" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/522-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/522-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/522-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/522-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "length" {  
-"19215" [label = <(METHOD,length)> ]
-"19218" [label = <(METHOD_RETURN,ANY)> ]
-  "19215" -> "19218" 
+digraph "IncrementDisableThreadFlip" {  
+"18872" [label = <(METHOD,IncrementDisableThreadFlip)> ]
+"18876" [label = <(METHOD_RETURN,ANY)> ]
+  "18872" -> "18876" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/523-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/523-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/523-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/523-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "mirror::String::AllocFromModifiedUtf8" {  
-"19219" [label = <(METHOD,mirror::String::AllocFromModifiedUtf8)> ]
-"19226" [label = <(METHOD_RETURN,ANY)> ]
-  "19219" -> "19226" 
+digraph "DecrementDisableMovingGC" {  
+"18877" [label = <(METHOD,DecrementDisableMovingGC)> ]
+"18881" [label = <(METHOD_RETURN,ANY)> ]
+  "18877" -> "18881" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/524-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/524-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/524-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/524-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string)" {  
-"19227" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_string))> ]
-"19232" [label = <(METHOD_RETURN,ANY)> ]
-  "19227" -> "19232" 
+digraph "DecrementDisableThreadFlip" {  
+"18882" [label = <(METHOD,DecrementDisableThreadFlip)> ]
+"18886" [label = <(METHOD_RETURN,ANY)> ]
+  "18882" -> "18886" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/525-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/525-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/525-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/525-cfg.dot	2023-06-07 19:35:34.947383759 +0330
@@ -1,5 +1,5 @@
-digraph "GetLength" {  
-"19233" [label = <(METHOD,GetLength)> ]
-"19236" [label = <(METHOD_RETURN,ANY)> ]
-  "19233" -> "19236" 
+digraph "CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_array)" {  
+"18887" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_array))> ]
+"18892" [label = <(METHOD_RETURN,ANY)> ]
+  "18887" -> "18892" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/526-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/526-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/526-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/526-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "GetUtfLength" {  
-"19237" [label = <(METHOD,GetUtfLength)> ]
-"19240" [label = <(METHOD_RETURN,ANY)> ]
-  "19237" -> "19240" 
+digraph "IsArrayInstance" {  
+"18893" [label = <(METHOD,IsArrayInstance)> ]
+"18896" [label = <(METHOD_RETURN,ANY)> ]
+  "18893" -> "18896" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/527-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/527-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/527-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/527-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string)" {  
-"19241" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_string))> ]
-"19246" [label = <(METHOD_RETURN,ANY)> ]
-  "19241" -> "19246" 
+digraph "PrettyTypeOf" {  
+"18897" [label = <(METHOD,PrettyTypeOf)> ]
+"18900" [label = <(METHOD_RETURN,ANY)> ]
+  "18897" -> "18900" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/528-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/528-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/528-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/528-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_MEMCPY_ARGUMENT" {  
-"19247" [label = <(METHOD,CHECK_NON_NULL_MEMCPY_ARGUMENT)<SUB>701</SUB>> ]
-"19251" [label = <(METHOD_RETURN,ANY)> ]
-  "19247" -> "19251" 
+digraph "AsArray" {  
+"18901" [label = <(METHOD,AsArray)> ]
+"18904" [label = <(METHOD_RETURN,ANY)> ]
+  "18901" -> "18904" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/529-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/529-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/529-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/529-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf)" {  
-"19252" [label = <(METHOD,CHECK_NON_NULL_MEMCPY_ARGUMENT(length, buf))> ]
-"19257" [label = <(METHOD_RETURN,ANY)> ]
-  "19252" -> "19257" 
+digraph "CHECK_NON_NULL_ARGUMENT(java_array)" {  
+"18905" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(java_array))> ]
+"18910" [label = <(METHOD_RETURN,ANY)> ]
+  "18905" -> "18910" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/53-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/53-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/53-cfg.dot	2023-06-07 19:35:28.237384348 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/53-cfg.dot	2023-06-07 19:35:34.767383776 +0330
@@ -1,240 +1,51 @@
-digraph "ExceptionDescribe" {  
-"1752" [label = <(soa,soa(env))<SUB>853</SUB>> ]
-"1765" [label = <(&lt;operator&gt;.greaterThan,StackHandleScope&lt;1&gt; hs(soa.Self()))<SUB>860</SUB>> ]
-"1774" [label = <(&lt;operator&gt;.greaterThan,Handle&lt;mirror::Throwable&gt; old_exception(\012        hs.NewHandle&lt;mirror::Throwable&gt;(soa.Self()-&gt;GetException())))<SUB>861</SUB>> ]
-"1796" [label = <(ClearException,soa.Self()-&gt;ClearException())<SUB>863</SUB>> ]
-"1803" [label = <(&lt;operator&gt;.greaterThan,ScopedLocalRef&lt;jthrowable&gt; exception(env,\012                                         soa.AddLocalReference&lt;jthrowable&gt;(old_exception.Get())))<SUB>864</SUB>> ]
-"1819" [label = <(&lt;operator&gt;.greaterThan,ScopedLocalRef&lt;jclass&gt; exception_class(env, env-&gt;GetObjectClass(exception.get())))<SUB>866</SUB>> ]
-"1834" [label = <(&lt;operator&gt;.assignment,mid = env-&gt;GetMethodID(exception_class.get(), &quot;printStackTrace&quot;, &quot;()V&quot;))<SUB>867</SUB>> ]
-"1913" [label = <(SetException,soa.Self()-&gt;SetException(old_exception.Get()))<SUB>879</SUB>> ]
-"1755" [label = <(&lt;operator&gt;.logicalNot,!soa.Self()-&gt;GetException())<SUB>856</SUB>> ]
-"1766" [label = <(&lt;operator&gt;.lessThan,StackHandleScope&lt;1)<SUB>860</SUB>> ]
-"1769" [label = <(hs,hs(soa.Self()))<SUB>860</SUB>> ]
-"1775" [label = <(&lt;operator&gt;.lessThan,Handle&lt;mirror::Throwable)<SUB>861</SUB>> ]
-"1780" [label = <(old_exception,old_exception(\012        hs.NewHandle&lt;mirror::Throwable&gt;(soa.Self()-&gt;GetException())))<SUB>861</SUB>> ]
-"1797" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;ClearException)<SUB>863</SUB>> ]
-"1804" [label = <(&lt;operator&gt;.lessThan,ScopedLocalRef&lt;jthrowable)<SUB>864</SUB>> ]
-"1807" [label = <(exception,exception(env,\012                                         soa.AddLocalReference&lt;jthrowable&gt;(old_exception.Get())))<SUB>864</SUB>> ]
-"1820" [label = <(&lt;operator&gt;.lessThan,ScopedLocalRef&lt;jclass)<SUB>866</SUB>> ]
-"1823" [label = <(exception_class,exception_class(env, env-&gt;GetObjectClass(exception.get())))<SUB>866</SUB>> ]
-"1836" [label = <(GetMethodID,env-&gt;GetMethodID(exception_class.get(), &quot;printStackTrace&quot;, &quot;()V&quot;))<SUB>867</SUB>> ]
-"1847" [label = <(&lt;operator&gt;.equals,mid == nullptr)<SUB>868</SUB>> ]
-"1914" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;SetException)<SUB>879</SUB>> ]
-"1920" [label = <(Get,old_exception.Get())<SUB>879</SUB>> ]
-"1756" [label = <(GetException,soa.Self()-&gt;GetException())<SUB>856</SUB>> ]
-"1764" [label = <(RETURN,return;,return;)<SUB>857</SUB>> ]
-"1770" [label = <(Self,soa.Self())<SUB>860</SUB>> ]
-"1777" [label = <(&lt;operator&gt;.fieldAccess,mirror::Throwable)<SUB>861</SUB>> ]
-"1781" [label = <(&lt;operator&gt;.greaterThan,hs.NewHandle&lt;mirror::Throwable&gt;(soa.Self()-&gt;GetException()))<SUB>862</SUB>> ]
-"1798" [label = <(Self,soa.Self())<SUB>863</SUB>> ]
-"1802" [label = <(FIELD_IDENTIFIER,ClearException,ClearException)<SUB>863</SUB>> ]
-"1809" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jthrowable&gt;(old_exception.Get()))<SUB>865</SUB>> ]
-"1825" [label = <(GetObjectClass,env-&gt;GetObjectClass(exception.get()))<SUB>866</SUB>> ]
-"1837" [label = <(&lt;operator&gt;.indirectFieldAccess,env-&gt;GetMethodID)<SUB>867</SUB>> ]
-"1840" [label = <(get,exception_class.get())<SUB>867</SUB>> ]
-"1851" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI WARNING: no printStackTrace()V in &quot;\012 &lt;&lt; mirror::Object::PrettyTypeOf(old_exception.Get()))<SUB>869</SUB>> ]
-"1915" [label = <(Self,soa.Self())<SUB>879</SUB>> ]
-"1919" [label = <(FIELD_IDENTIFIER,SetException,SetException)<SUB>879</SUB>> ]
-"1921" [label = <(&lt;operator&gt;.fieldAccess,old_exception.Get)<SUB>879</SUB>> ]
-"1757" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;GetException)<SUB>856</SUB>> ]
-"1771" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>860</SUB>> ]
-"1779" [label = <(FIELD_IDENTIFIER,Throwable,Throwable)<SUB>861</SUB>> ]
-"1782" [label = <(&lt;operator&gt;.lessThan,hs.NewHandle&lt;mirror::Throwable)<SUB>862</SUB>> ]
-"1789" [label = <(GetException,soa.Self()-&gt;GetException())<SUB>862</SUB>> ]
-"1799" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>863</SUB>> ]
-"1810" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jthrowable)<SUB>865</SUB>> ]
-"1815" [label = <(Get,old_exception.Get())<SUB>865</SUB>> ]
-"1826" [label = <(&lt;operator&gt;.indirectFieldAccess,env-&gt;GetObjectClass)<SUB>866</SUB>> ]
-"1829" [label = <(get,exception.get())<SUB>866</SUB>> ]
-"1839" [label = <(FIELD_IDENTIFIER,GetMethodID,GetMethodID)<SUB>867</SUB>> ]
-"1841" [label = <(&lt;operator&gt;.fieldAccess,exception_class.get)<SUB>867</SUB>> ]
-"1852" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI WARNING: no printStackTrace()V in &quot;)<SUB>869</SUB>> ]
-"1856" [label = <(mirror::Object::PrettyTypeOf,mirror::Object::PrettyTypeOf(old_exception.Get()))<SUB>870</SUB>> ]
-"1868" [label = <(CallVoidMethod,env-&gt;CallVoidMethod(exception.get(), mid))<SUB>872</SUB>> ]
-"1916" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>879</SUB>> ]
-"1923" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>879</SUB>> ]
-"1758" [label = <(Self,soa.Self())<SUB>856</SUB>> ]
-"1762" [label = <(FIELD_IDENTIFIER,GetException,GetException)<SUB>856</SUB>> ]
-"1773" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>860</SUB>> ]
-"1783" [label = <(&lt;operator&gt;.fieldAccess,hs.NewHandle)<SUB>862</SUB>> ]
-"1786" [label = <(&lt;operator&gt;.fieldAccess,mirror::Throwable)<SUB>862</SUB>> ]
-"1790" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;GetException)<SUB>862</SUB>> ]
-"1801" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>863</SUB>> ]
-"1811" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>865</SUB>> ]
-"1816" [label = <(&lt;operator&gt;.fieldAccess,old_exception.Get)<SUB>865</SUB>> ]
-"1828" [label = <(FIELD_IDENTIFIER,GetObjectClass,GetObjectClass)<SUB>866</SUB>> ]
-"1830" [label = <(&lt;operator&gt;.fieldAccess,exception.get)<SUB>866</SUB>> ]
-"1843" [label = <(FIELD_IDENTIFIER,get,get)<SUB>867</SUB>> ]
-"1853" [label = <(LOG,LOG(WARNING))<SUB>869</SUB>> ]
-"1857" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object::PrettyTypeOf)<SUB>870</SUB>> ]
-"1862" [label = <(Get,old_exception.Get())<SUB>870</SUB>> ]
-"1869" [label = <(&lt;operator&gt;.indirectFieldAccess,env-&gt;CallVoidMethod)<SUB>872</SUB>> ]
-"1872" [label = <(get,exception.get())<SUB>872</SUB>> ]
-"1878" [label = <(IsExceptionPending,soa.Self()-&gt;IsExceptionPending())<SUB>873</SUB>> ]
-"1918" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>879</SUB>> ]
-"1759" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>856</SUB>> ]
-"1785" [label = <(FIELD_IDENTIFIER,NewHandle,NewHandle)<SUB>862</SUB>> ]
-"1788" [label = <(FIELD_IDENTIFIER,Throwable,Throwable)<SUB>862</SUB>> ]
-"1791" [label = <(Self,soa.Self())<SUB>862</SUB>> ]
-"1795" [label = <(FIELD_IDENTIFIER,GetException,GetException)<SUB>862</SUB>> ]
-"1813" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>865</SUB>> ]
-"1818" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>865</SUB>> ]
-"1832" [label = <(FIELD_IDENTIFIER,get,get)<SUB>866</SUB>> ]
-"1858" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>870</SUB>> ]
-"1861" [label = <(FIELD_IDENTIFIER,PrettyTypeOf,PrettyTypeOf)<SUB>870</SUB>> ]
-"1863" [label = <(&lt;operator&gt;.fieldAccess,old_exception.Get)<SUB>870</SUB>> ]
-"1871" [label = <(FIELD_IDENTIFIER,CallVoidMethod,CallVoidMethod)<SUB>872</SUB>> ]
-"1873" [label = <(&lt;operator&gt;.fieldAccess,exception.get)<SUB>872</SUB>> ]
-"1879" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;IsExceptionPending)<SUB>873</SUB>> ]
-"1886" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI WARNING: &quot; &lt;&lt; mirror::Object::PrettyTypeOf(soa.Self()-&gt;GetException())\012 &lt;&lt; &quot; thrown while calling printStackTrace&quot;)<SUB>874</SUB>> ]
-"1906" [label = <(ClearException,soa.Self()-&gt;ClearException())<SUB>876</SUB>> ]
-"1761" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>856</SUB>> ]
-"1792" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>862</SUB>> ]
-"1865" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>870</SUB>> ]
-"1875" [label = <(FIELD_IDENTIFIER,get,get)<SUB>872</SUB>> ]
-"1880" [label = <(Self,soa.Self())<SUB>873</SUB>> ]
-"1884" [label = <(FIELD_IDENTIFIER,IsExceptionPending,IsExceptionPending)<SUB>873</SUB>> ]
-"1887" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI WARNING: &quot; &lt;&lt; mirror::Object::PrettyTypeOf(soa.Self()-&gt;GetException()))<SUB>874</SUB>> ]
-"1907" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;ClearException)<SUB>876</SUB>> ]
-"1794" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>862</SUB>> ]
-"1881" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>873</SUB>> ]
-"1888" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI WARNING: &quot;)<SUB>874</SUB>> ]
-"1892" [label = <(mirror::Object::PrettyTypeOf,mirror::Object::PrettyTypeOf(soa.Self()-&gt;GetException()))<SUB>874</SUB>> ]
-"1908" [label = <(Self,soa.Self())<SUB>876</SUB>> ]
-"1912" [label = <(FIELD_IDENTIFIER,ClearException,ClearException)<SUB>876</SUB>> ]
-"1883" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>873</SUB>> ]
-"1889" [label = <(LOG,LOG(WARNING))<SUB>874</SUB>> ]
-"1893" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object::PrettyTypeOf)<SUB>874</SUB>> ]
-"1898" [label = <(GetException,soa.Self()-&gt;GetException())<SUB>874</SUB>> ]
-"1909" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>876</SUB>> ]
-"1894" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>874</SUB>> ]
-"1897" [label = <(FIELD_IDENTIFIER,PrettyTypeOf,PrettyTypeOf)<SUB>874</SUB>> ]
-"1899" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;GetException)<SUB>874</SUB>> ]
-"1911" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>876</SUB>> ]
-"1900" [label = <(Self,soa.Self())<SUB>874</SUB>> ]
-"1904" [label = <(FIELD_IDENTIFIER,GetException,GetException)<SUB>874</SUB>> ]
-"1901" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>874</SUB>> ]
-"1903" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>874</SUB>> ]
-"1748" [label = <(METHOD,ExceptionDescribe)<SUB>852</SUB>> ]
-"1924" [label = <(METHOD_RETURN,void)<SUB>852</SUB>> ]
-  "1752" -> "1761" 
-  "1765" -> "1779" 
-  "1774" -> "1801" 
-  "1796" -> "1804" 
-  "1803" -> "1820" 
-  "1819" -> "1839" 
-  "1834" -> "1847" 
-  "1913" -> "1924" 
-  "1755" -> "1764" 
-  "1755" -> "1766" 
-  "1766" -> "1773" 
-  "1769" -> "1765" 
-  "1775" -> "1785" 
-  "1780" -> "1774" 
-  "1797" -> "1796" 
-  "1804" -> "1813" 
-  "1807" -> "1803" 
-  "1820" -> "1828" 
+digraph "PopLocalFrame" {  
+"1808" [label = <(soa,soa(env))<SUB>825</SUB>> ]
+"1810" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; survivor = soa.Decode&lt;mirror::Object&gt;(java_survivor))<SUB>826</SUB>> ]
+"1827" [label = <(PopFrame,soa.Env()-&gt;PopFrame())<SUB>827</SUB>> ]
+"1834" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(survivor);,return soa.AddLocalReference&lt;jobject&gt;(survivor);)<SUB>828</SUB>> ]
+"1811" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; survivor)<SUB>826</SUB>> ]
+"1818" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(java_survivor))<SUB>826</SUB>> ]
+"1828" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Env()-&gt;PopFrame)<SUB>827</SUB>> ]
+"1835" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(survivor))<SUB>828</SUB>> ]
+"1812" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>826</SUB>> ]
+"1819" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>826</SUB>> ]
+"1829" [label = <(Env,soa.Env())<SUB>827</SUB>> ]
+"1833" [label = <(FIELD_IDENTIFIER,PopFrame,PopFrame)<SUB>827</SUB>> ]
+"1836" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>828</SUB>> ]
+"1814" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>826</SUB>> ]
+"1820" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>826</SUB>> ]
+"1823" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>826</SUB>> ]
+"1830" [label = <(&lt;operator&gt;.fieldAccess,soa.Env)<SUB>827</SUB>> ]
+"1837" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>828</SUB>> ]
+"1816" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>826</SUB>> ]
+"1822" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>826</SUB>> ]
+"1825" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>826</SUB>> ]
+"1832" [label = <(FIELD_IDENTIFIER,Env,Env)<SUB>827</SUB>> ]
+"1839" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>828</SUB>> ]
+"1803" [label = <(METHOD,PopLocalFrame)<SUB>824</SUB>> ]
+"1842" [label = <(METHOD_RETURN,jobject)<SUB>824</SUB>> ]
+  "1808" -> "1816" 
+  "1810" -> "1832" 
+  "1827" -> "1839" 
+  "1834" -> "1842" 
+  "1811" -> "1822" 
+  "1818" -> "1810" 
+  "1828" -> "1827" 
+  "1835" -> "1834" 
+  "1812" -> "1811" 
+  "1819" -> "1818" 
+  "1829" -> "1833" 
+  "1833" -> "1828" 
+  "1836" -> "1835" 
+  "1814" -> "1812" 
+  "1820" -> "1825" 
   "1823" -> "1819" 
-  "1836" -> "1834" 
-  "1847" -> "1853" 
-  "1847" -> "1871" 
-  "1914" -> "1923" 
-  "1920" -> "1913" 
-  "1756" -> "1755" 
-  "1764" -> "1924" 
-  "1770" -> "1769" 
-  "1777" -> "1775" 
-  "1781" -> "1780" 
-  "1798" -> "1802" 
-  "1802" -> "1797" 
-  "1809" -> "1807" 
-  "1825" -> "1823" 
-  "1837" -> "1843" 
-  "1840" -> "1836" 
-  "1851" -> "1918" 
-  "1915" -> "1919" 
-  "1919" -> "1914" 
-  "1921" -> "1920" 
-  "1757" -> "1756" 
-  "1771" -> "1770" 
-  "1779" -> "1777" 
-  "1782" -> "1794" 
-  "1789" -> "1781" 
-  "1799" -> "1798" 
-  "1810" -> "1818" 
-  "1815" -> "1809" 
-  "1826" -> "1832" 
-  "1829" -> "1825" 
-  "1839" -> "1837" 
-  "1841" -> "1840" 
-  "1852" -> "1858" 
-  "1856" -> "1851" 
-  "1868" -> "1883" 
-  "1916" -> "1915" 
-  "1923" -> "1921" 
-  "1758" -> "1762" 
-  "1762" -> "1757" 
-  "1773" -> "1771" 
-  "1783" -> "1788" 
-  "1786" -> "1782" 
-  "1790" -> "1789" 
-  "1801" -> "1799" 
-  "1811" -> "1810" 
-  "1816" -> "1815" 
-  "1828" -> "1826" 
   "1830" -> "1829" 
-  "1843" -> "1841" 
-  "1853" -> "1852" 
-  "1857" -> "1865" 
-  "1862" -> "1856" 
-  "1869" -> "1875" 
-  "1872" -> "1868" 
-  "1878" -> "1889" 
-  "1878" -> "1918" 
-  "1918" -> "1916" 
-  "1759" -> "1758" 
-  "1785" -> "1783" 
-  "1788" -> "1786" 
-  "1791" -> "1795" 
-  "1795" -> "1790" 
-  "1813" -> "1811" 
-  "1818" -> "1816" 
+  "1837" -> "1836" 
+  "1816" -> "1814" 
+  "1822" -> "1820" 
+  "1825" -> "1823" 
   "1832" -> "1830" 
-  "1858" -> "1861" 
-  "1861" -> "1857" 
-  "1863" -> "1862" 
-  "1871" -> "1869" 
-  "1873" -> "1872" 
-  "1879" -> "1878" 
-  "1886" -> "1911" 
-  "1906" -> "1918" 
-  "1761" -> "1759" 
-  "1792" -> "1791" 
-  "1865" -> "1863" 
-  "1875" -> "1873" 
-  "1880" -> "1884" 
-  "1884" -> "1879" 
-  "1887" -> "1886" 
-  "1907" -> "1906" 
-  "1794" -> "1792" 
-  "1881" -> "1880" 
-  "1888" -> "1894" 
-  "1892" -> "1887" 
-  "1908" -> "1912" 
-  "1912" -> "1907" 
-  "1883" -> "1881" 
-  "1889" -> "1888" 
-  "1893" -> "1903" 
-  "1898" -> "1892" 
-  "1909" -> "1908" 
-  "1894" -> "1897" 
-  "1897" -> "1893" 
-  "1899" -> "1898" 
-  "1911" -> "1909" 
-  "1900" -> "1904" 
-  "1904" -> "1899" 
-  "1901" -> "1900" 
-  "1903" -> "1901" 
-  "1748" -> "1752" 
+  "1839" -> "1837" 
+  "1803" -> "1808" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/530-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/530-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/530-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/530-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "IsCompressed" {  
-"19258" [label = <(METHOD,IsCompressed)> ]
-"19261" [label = <(METHOD_RETURN,ANY)> ]
-  "19258" -> "19261" 
+digraph "&lt;operator&gt;.arithmeticShiftRight" {  
+"18911" [label = <(METHOD,&lt;operator&gt;.arithmeticShiftRight)> ]
+"18915" [label = <(METHOD_RETURN,ANY)> ]
+  "18911" -> "18915" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/531-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/531-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/531-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/531-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "CharAt" {  
-"19262" [label = <(METHOD,CharAt)> ]
-"19266" [label = <(METHOD_RETURN,ANY)> ]
-  "19262" -> "19266" 
+digraph "CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array)" {  
+"18916" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))> ]
+"18921" [label = <(METHOD_RETURN,ANY)> ]
+  "18916" -> "18921" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/532-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/532-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/532-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/532-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "GetValue" {  
-"19267" [label = <(METHOD,GetValue)> ]
-"19270" [label = <(METHOD_RETURN,ANY)> ]
-  "19267" -> "19270" 
+digraph "NewPrimitiveArray&lt;jbooleanArray,mirror::BooleanArray&gt;" {  
+"18922" [label = <(METHOD,NewPrimitiveArray&lt;jbooleanArray,mirror::BooleanArray&gt;)> ]
+"18926" [label = <(METHOD_RETURN,ANY)> ]
+  "18922" -> "18926" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/533-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/533-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/533-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/533-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "memcpy" {  
-"19271" [label = <(METHOD,memcpy)> ]
-"19276" [label = <(METHOD_RETURN,ANY)> ]
-  "19271" -> "19276" 
+digraph "NewPrimitiveArray&lt;jbyteArray,mirror::ByteArray&gt;" {  
+"18927" [label = <(METHOD,NewPrimitiveArray&lt;jbyteArray,mirror::ByteArray&gt;)> ]
+"18931" [label = <(METHOD_RETURN,ANY)> ]
+  "18927" -> "18931" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/534-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/534-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/534-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/534-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.multiplication" {  
-"19277" [label = <(METHOD,&lt;operator&gt;.multiplication)> ]
-"19281" [label = <(METHOD_RETURN,ANY)> ]
-  "19277" -> "19281" 
+digraph "NewPrimitiveArray&lt;jcharArray,mirror::CharArray&gt;" {  
+"18932" [label = <(METHOD,NewPrimitiveArray&lt;jcharArray,mirror::CharArray&gt;)> ]
+"18936" [label = <(METHOD_RETURN,ANY)> ]
+  "18932" -> "18936" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/535-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/535-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/535-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/535-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.sizeOf" {  
-"19282" [label = <(METHOD,&lt;operator&gt;.sizeOf)> ]
-"19285" [label = <(METHOD_RETURN,ANY)> ]
-  "19282" -> "19285" 
+digraph "NewPrimitiveArray&lt;jdoubleArray,mirror::DoubleArray&gt;" {  
+"18937" [label = <(METHOD,NewPrimitiveArray&lt;jdoubleArray,mirror::DoubleArray&gt;)> ]
+"18941" [label = <(METHOD_RETURN,ANY)> ]
+  "18937" -> "18941" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/536-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/536-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/536-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/536-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "CountUtf8Bytes" {  
-"19286" [label = <(METHOD,CountUtf8Bytes)> ]
-"19290" [label = <(METHOD_RETURN,ANY)> ]
-  "19286" -> "19290" 
+digraph "NewPrimitiveArray&lt;jfloatArray,mirror::FloatArray&gt;" {  
+"18942" [label = <(METHOD,NewPrimitiveArray&lt;jfloatArray,mirror::FloatArray&gt;)> ]
+"18946" [label = <(METHOD_RETURN,ANY)> ]
+  "18942" -> "18946" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/537-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/537-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/537-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/537-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "ConvertUtf16ToModifiedUtf8" {  
-"19291" [label = <(METHOD,ConvertUtf16ToModifiedUtf8)> ]
-"19297" [label = <(METHOD_RETURN,ANY)> ]
-  "19291" -> "19297" 
+digraph "NewPrimitiveArray&lt;jintArray,mirror::IntArray&gt;" {  
+"18947" [label = <(METHOD,NewPrimitiveArray&lt;jintArray,mirror::IntArray&gt;)> ]
+"18951" [label = <(METHOD_RETURN,ANY)> ]
+  "18947" -> "18951" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/538-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/538-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/538-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/538-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT(java_string)" {  
-"19298" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(java_string))> ]
-"19303" [label = <(METHOD_RETURN,ANY)> ]
-  "19298" -> "19303" 
+digraph "NewPrimitiveArray&lt;jlongArray,mirror::LongArray&gt;" {  
+"18952" [label = <(METHOD,NewPrimitiveArray&lt;jlongArray,mirror::LongArray&gt;)> ]
+"18956" [label = <(METHOD_RETURN,ANY)> ]
+  "18952" -> "18956" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/539-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/539-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/539-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/539-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "IsMovableObject" {  
-"19304" [label = <(METHOD,IsMovableObject)> ]
-"19308" [label = <(METHOD_RETURN,ANY)> ]
-  "19304" -> "19308" 
+digraph "CHECK_NON_NULL_ARGUMENT(element_jclass)" {  
+"18957" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(element_jclass))> ]
+"18962" [label = <(METHOD_RETURN,ANY)> ]
+  "18957" -> "18962" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/54-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/54-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/54-cfg.dot	2023-06-07 19:35:28.237384348 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/54-cfg.dot	2023-06-07 19:35:34.767383776 +0330
@@ -1,39 +1,11 @@
-digraph "ExceptionOccurred" {  
-"1930" [label = <(soa,soa(env))<SUB>883</SUB>> ]
-"1932" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; exception = soa.Self()-&gt;GetException())<SUB>884</SUB>> ]
-"1947" [label = <(RETURN,return soa.AddLocalReference&lt;jthrowable&gt;(exception);,return soa.AddLocalReference&lt;jthrowable&gt;(exception);)<SUB>885</SUB>> ]
-"1933" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; exception)<SUB>884</SUB>> ]
-"1940" [label = <(GetException,soa.Self()-&gt;GetException())<SUB>884</SUB>> ]
-"1948" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jthrowable&gt;(exception))<SUB>885</SUB>> ]
-"1934" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>884</SUB>> ]
-"1941" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;GetException)<SUB>884</SUB>> ]
-"1949" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jthrowable)<SUB>885</SUB>> ]
-"1936" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>884</SUB>> ]
-"1942" [label = <(Self,soa.Self())<SUB>884</SUB>> ]
-"1946" [label = <(FIELD_IDENTIFIER,GetException,GetException)<SUB>884</SUB>> ]
-"1950" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>885</SUB>> ]
-"1938" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>884</SUB>> ]
-"1943" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>884</SUB>> ]
-"1952" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>885</SUB>> ]
-"1945" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>884</SUB>> ]
-"1926" [label = <(METHOD,ExceptionOccurred)<SUB>882</SUB>> ]
-"1955" [label = <(METHOD_RETURN,jthrowable)<SUB>882</SUB>> ]
-  "1930" -> "1938" 
-  "1932" -> "1952" 
-  "1947" -> "1955" 
-  "1933" -> "1945" 
-  "1940" -> "1932" 
-  "1948" -> "1947" 
-  "1934" -> "1933" 
-  "1941" -> "1940" 
-  "1949" -> "1948" 
-  "1936" -> "1934" 
-  "1942" -> "1946" 
-  "1946" -> "1941" 
-  "1950" -> "1949" 
-  "1938" -> "1936" 
-  "1943" -> "1942" 
-  "1952" -> "1950" 
-  "1945" -> "1943" 
-  "1926" -> "1930" 
+digraph "EnsureLocalCapacity" {  
+"1849" [label = <(soa,soa(env))<SUB>833</SUB>> ]
+"1851" [label = <(RETURN,return EnsureLocalCapacityInternal(soa, desired_capacity, &quot;EnsureLocalCapacity&quot;);,return EnsureLocalCapacityInternal(soa, desired_capacity, &quot;EnsureLocalCapacity&quot;);)<SUB>834</SUB>> ]
+"1852" [label = <(EnsureLocalCapacityInternal,EnsureLocalCapacityInternal(soa, desired_capacity, &quot;EnsureLocalCapacity&quot;))<SUB>834</SUB>> ]
+"1844" [label = <(METHOD,EnsureLocalCapacity)<SUB>831</SUB>> ]
+"1856" [label = <(METHOD_RETURN,jint)<SUB>831</SUB>> ]
+  "1849" -> "1852" 
+  "1851" -> "1856" 
+  "1852" -> "1851" 
+  "1844" -> "1849" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/540-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/540-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/540-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/540-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.new" {  
-"19309" [label = <(METHOD,&lt;operator&gt;.new)> ]
-"19312" [label = <(METHOD_RETURN,ANY)> ]
-  "19309" -> "19312" 
+digraph "IsPrimitive" {  
+"18963" [label = <(METHOD,IsPrimitive)> ]
+"18966" [label = <(METHOD_RETURN,ANY)> ]
+  "18963" -> "18966" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/541-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/541-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/541-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/541-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.delete" {  
-"19313" [label = <(METHOD,&lt;operator&gt;.delete)> ]
-"19316" [label = <(METHOD_RETURN,ANY)> ]
-  "19313" -> "19316" 
+digraph "PrettyDescriptor" {  
+"18967" [label = <(METHOD,PrettyDescriptor)> ]
+"18970" [label = <(METHOD_RETURN,ANY)> ]
+  "18967" -> "18970" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/542-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/542-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/542-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/542-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "h" {  
-"19317" [label = <(METHOD,h)> ]
-"19320" [label = <(METHOD_RETURN,ANY)> ]
-  "19317" -> "19320" 
+digraph "FindArrayClass" {  
+"18971" [label = <(METHOD,FindArrayClass)> ]
+"18976" [label = <(METHOD_RETURN,ANY)> ]
+  "18971" -> "18976" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/543-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/543-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/543-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/543-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "NewHandleWrapper" {  
-"19321" [label = <(METHOD,NewHandleWrapper)> ]
-"19325" [label = <(METHOD_RETURN,ANY)> ]
-  "19321" -> "19325" 
+digraph "::Alloc" {  
+"18977" [label = <(METHOD,::Alloc)> ]
+"18983" [label = <(METHOD_RETURN,ANY)> ]
+  "18977" -> "18983" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/544-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/544-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/544-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/544-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "IncrementDisableMovingGC" {  
-"19326" [label = <(METHOD,IncrementDisableMovingGC)> ]
-"19330" [label = <(METHOD_RETURN,ANY)> ]
-  "19326" -> "19330" 
+digraph "GetComponentType" {  
+"18984" [label = <(METHOD,GetComponentType)> ]
+"18987" [label = <(METHOD_RETURN,ANY)> ]
+  "18984" -> "18987" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/545-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/545-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/545-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/545-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "IncrementDisableThreadFlip" {  
-"19331" [label = <(METHOD,IncrementDisableThreadFlip)> ]
-"19335" [label = <(METHOD_RETURN,ANY)> ]
-  "19331" -> "19335" 
+digraph "mirror::Class::PrettyDescriptor" {  
+"18988" [label = <(METHOD,mirror::Class::PrettyDescriptor)> ]
+"18992" [label = <(METHOD_RETURN,ANY)> ]
+  "18988" -> "18992" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/546-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/546-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/546-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/546-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "DecrementDisableMovingGC" {  
-"19336" [label = <(METHOD,DecrementDisableMovingGC)> ]
-"19340" [label = <(METHOD_RETURN,ANY)> ]
-  "19336" -> "19340" 
+digraph "NewPrimitiveArray&lt;jshortArray,mirror::ShortArray&gt;" {  
+"18993" [label = <(METHOD,NewPrimitiveArray&lt;jshortArray,mirror::ShortArray&gt;)> ]
+"18997" [label = <(METHOD_RETURN,ANY)> ]
+  "18993" -> "18997" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/547-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/547-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/547-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/547-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "DecrementDisableThreadFlip" {  
-"19341" [label = <(METHOD,DecrementDisableThreadFlip)> ]
-"19345" [label = <(METHOD_RETURN,ANY)> ]
-  "19341" -> "19345" 
+digraph "IsPrimitiveArray" {  
+"18998" [label = <(METHOD,IsPrimitiveArray)> ]
+"19001" [label = <(METHOD_RETURN,ANY)> ]
+  "18998" -> "19001" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/548-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/548-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/548-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/548-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_array)" {  
-"19346" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(java_array))> ]
-"19351" [label = <(METHOD_RETURN,ANY)> ]
-  "19346" -> "19351" 
+digraph "GetRawData" {  
+"19002" [label = <(METHOD,GetRawData)> ]
+"19007" [label = <(METHOD_RETURN,ANY)> ]
+  "19002" -> "19007" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/549-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/549-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/549-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/549-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "IsArrayInstance" {  
-"19352" [label = <(METHOD,IsArrayInstance)> ]
-"19355" [label = <(METHOD_RETURN,ANY)> ]
-  "19352" -> "19355" 
+digraph "GetComponentSize" {  
+"19008" [label = <(METHOD,GetComponentSize)> ]
+"19011" [label = <(METHOD_RETURN,ANY)> ]
+  "19008" -> "19011" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/55-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/55-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/55-cfg.dot	2023-06-07 19:35:28.237384348 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/55-cfg.dot	2023-06-07 19:35:34.767383776 +0330
@@ -1,11 +1,49 @@
-digraph "FatalError" {  
-"1961" [label = <(&lt;operator&gt;.shiftLeft,LOG(FATAL) &lt;&lt; &quot;JNI FatalError called: &quot; &lt;&lt; msg)<SUB>889</SUB>> ]
-"1962" [label = <(&lt;operator&gt;.shiftLeft,LOG(FATAL) &lt;&lt; &quot;JNI FatalError called: &quot;)<SUB>889</SUB>> ]
-"1963" [label = <(LOG,LOG(FATAL))<SUB>889</SUB>> ]
-"1957" [label = <(METHOD,FatalError)<SUB>888</SUB>> ]
-"1967" [label = <(METHOD_RETURN,void)<SUB>888</SUB>> ]
-  "1961" -> "1967" 
-  "1962" -> "1961" 
-  "1963" -> "1962" 
-  "1957" -> "1963" 
+digraph "NewGlobalRef" {  
+"1863" [label = <(soa,soa(env))<SUB>838</SUB>> ]
+"1865" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; decoded_obj = soa.Decode&lt;mirror::Object&gt;(obj))<SUB>839</SUB>> ]
+"1882" [label = <(RETURN,return soa.Vm()-&gt;AddGlobalRef(soa.Self(), decoded_obj);,return soa.Vm()-&gt;AddGlobalRef(soa.Self(), decoded_obj);)<SUB>840</SUB>> ]
+"1866" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; decoded_obj)<SUB>839</SUB>> ]
+"1873" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(obj))<SUB>839</SUB>> ]
+"1883" [label = <(AddGlobalRef,soa.Vm()-&gt;AddGlobalRef(soa.Self(), decoded_obj))<SUB>840</SUB>> ]
+"1867" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>839</SUB>> ]
+"1874" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>839</SUB>> ]
+"1884" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Vm()-&gt;AddGlobalRef)<SUB>840</SUB>> ]
+"1890" [label = <(Self,soa.Self())<SUB>840</SUB>> ]
+"1869" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>839</SUB>> ]
+"1875" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>839</SUB>> ]
+"1878" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>839</SUB>> ]
+"1885" [label = <(Vm,soa.Vm())<SUB>840</SUB>> ]
+"1889" [label = <(FIELD_IDENTIFIER,AddGlobalRef,AddGlobalRef)<SUB>840</SUB>> ]
+"1891" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>840</SUB>> ]
+"1871" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>839</SUB>> ]
+"1877" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>839</SUB>> ]
+"1880" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>839</SUB>> ]
+"1886" [label = <(&lt;operator&gt;.fieldAccess,soa.Vm)<SUB>840</SUB>> ]
+"1893" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>840</SUB>> ]
+"1888" [label = <(FIELD_IDENTIFIER,Vm,Vm)<SUB>840</SUB>> ]
+"1858" [label = <(METHOD,NewGlobalRef)<SUB>837</SUB>> ]
+"1895" [label = <(METHOD_RETURN,jobject)<SUB>837</SUB>> ]
+  "1863" -> "1871" 
+  "1865" -> "1888" 
+  "1882" -> "1895" 
+  "1866" -> "1877" 
+  "1873" -> "1865" 
+  "1883" -> "1882" 
+  "1867" -> "1866" 
+  "1874" -> "1873" 
+  "1884" -> "1893" 
+  "1890" -> "1883" 
+  "1869" -> "1867" 
+  "1875" -> "1880" 
+  "1878" -> "1874" 
+  "1885" -> "1889" 
+  "1889" -> "1884" 
+  "1891" -> "1890" 
+  "1871" -> "1869" 
+  "1877" -> "1875" 
+  "1880" -> "1878" 
+  "1886" -> "1885" 
+  "1893" -> "1891" 
+  "1888" -> "1886" 
+  "1858" -> "1863" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/550-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/550-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/550-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/550-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "PrettyTypeOf" {  
-"19356" [label = <(METHOD,PrettyTypeOf)> ]
-"19359" [label = <(METHOD_RETURN,ANY)> ]
-  "19356" -> "19359" 
+digraph "GetPrimitiveArray&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;" {  
+"19012" [label = <(METHOD,GetPrimitiveArray&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;)> ]
+"19017" [label = <(METHOD_RETURN,ANY)> ]
+  "19012" -> "19017" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/551-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/551-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/551-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/551-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "AsArray" {  
-"19360" [label = <(METHOD,AsArray)> ]
-"19363" [label = <(METHOD_RETURN,ANY)> ]
-  "19360" -> "19363" 
+digraph "GetPrimitiveArray&lt;jbyteArray,jbyte,mirror::ByteArray&gt;" {  
+"19018" [label = <(METHOD,GetPrimitiveArray&lt;jbyteArray,jbyte,mirror::ByteArray&gt;)> ]
+"19023" [label = <(METHOD_RETURN,ANY)> ]
+  "19018" -> "19023" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/552-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/552-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/552-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/552-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT(java_array)" {  
-"19364" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(java_array))> ]
-"19369" [label = <(METHOD_RETURN,ANY)> ]
-  "19364" -> "19369" 
+digraph "GetPrimitiveArray&lt;jcharArray,jchar,mirror::CharArray&gt;" {  
+"19024" [label = <(METHOD,GetPrimitiveArray&lt;jcharArray,jchar,mirror::CharArray&gt;)> ]
+"19029" [label = <(METHOD_RETURN,ANY)> ]
+  "19024" -> "19029" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/553-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/553-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/553-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/553-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.arithmeticShiftRight" {  
-"19370" [label = <(METHOD,&lt;operator&gt;.arithmeticShiftRight)> ]
-"19374" [label = <(METHOD_RETURN,ANY)> ]
-  "19370" -> "19374" 
+digraph "GetPrimitiveArray&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;" {  
+"19030" [label = <(METHOD,GetPrimitiveArray&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;)> ]
+"19035" [label = <(METHOD_RETURN,ANY)> ]
+  "19030" -> "19035" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/554-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/554-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/554-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/554-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array)" {  
-"19375" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(java_array))> ]
-"19380" [label = <(METHOD_RETURN,ANY)> ]
-  "19375" -> "19380" 
+digraph "GetPrimitiveArray&lt;jfloatArray,jfloat,mirror::FloatArray&gt;" {  
+"19036" [label = <(METHOD,GetPrimitiveArray&lt;jfloatArray,jfloat,mirror::FloatArray&gt;)> ]
+"19041" [label = <(METHOD_RETURN,ANY)> ]
+  "19036" -> "19041" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/555-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/555-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/555-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/555-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "NewPrimitiveArray&lt;jbooleanArray,mirror::BooleanArray&gt;" {  
-"19381" [label = <(METHOD,NewPrimitiveArray&lt;jbooleanArray,mirror::BooleanArray&gt;)> ]
-"19385" [label = <(METHOD_RETURN,ANY)> ]
-  "19381" -> "19385" 
+digraph "GetPrimitiveArray&lt;jintArray,jint,mirror::IntArray&gt;" {  
+"19042" [label = <(METHOD,GetPrimitiveArray&lt;jintArray,jint,mirror::IntArray&gt;)> ]
+"19047" [label = <(METHOD_RETURN,ANY)> ]
+  "19042" -> "19047" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/556-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/556-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/556-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/556-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "NewPrimitiveArray&lt;jbyteArray,mirror::ByteArray&gt;" {  
-"19386" [label = <(METHOD,NewPrimitiveArray&lt;jbyteArray,mirror::ByteArray&gt;)> ]
-"19390" [label = <(METHOD_RETURN,ANY)> ]
-  "19386" -> "19390" 
+digraph "GetPrimitiveArray&lt;jlongArray,jlong,mirror::LongArray&gt;" {  
+"19048" [label = <(METHOD,GetPrimitiveArray&lt;jlongArray,jlong,mirror::LongArray&gt;)> ]
+"19053" [label = <(METHOD_RETURN,ANY)> ]
+  "19048" -> "19053" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/557-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/557-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/557-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/557-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "NewPrimitiveArray&lt;jcharArray,mirror::CharArray&gt;" {  
-"19391" [label = <(METHOD,NewPrimitiveArray&lt;jcharArray,mirror::CharArray&gt;)> ]
-"19395" [label = <(METHOD_RETURN,ANY)> ]
-  "19391" -> "19395" 
+digraph "GetPrimitiveArray&lt;jshortArray,jshort,mirror::ShortArray&gt;" {  
+"19054" [label = <(METHOD,GetPrimitiveArray&lt;jshortArray,jshort,mirror::ShortArray&gt;)> ]
+"19059" [label = <(METHOD_RETURN,ANY)> ]
+  "19054" -> "19059" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/558-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/558-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/558-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/558-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "NewPrimitiveArray&lt;jdoubleArray,mirror::DoubleArray&gt;" {  
-"19396" [label = <(METHOD,NewPrimitiveArray&lt;jdoubleArray,mirror::DoubleArray&gt;)> ]
-"19400" [label = <(METHOD_RETURN,ANY)> ]
-  "19396" -> "19400" 
+digraph "ReleasePrimitiveArray&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;" {  
+"19060" [label = <(METHOD,ReleasePrimitiveArray&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;)> ]
+"19066" [label = <(METHOD_RETURN,ANY)> ]
+  "19060" -> "19066" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/559-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/559-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/559-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/559-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "NewPrimitiveArray&lt;jfloatArray,mirror::FloatArray&gt;" {  
-"19401" [label = <(METHOD,NewPrimitiveArray&lt;jfloatArray,mirror::FloatArray&gt;)> ]
-"19405" [label = <(METHOD_RETURN,ANY)> ]
-  "19401" -> "19405" 
+digraph "ReleasePrimitiveArray&lt;jbyteArray,jbyte,mirror::ByteArray&gt;" {  
+"19067" [label = <(METHOD,ReleasePrimitiveArray&lt;jbyteArray,jbyte,mirror::ByteArray&gt;)> ]
+"19073" [label = <(METHOD_RETURN,ANY)> ]
+  "19067" -> "19073" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/56-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/56-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/56-cfg.dot	2023-06-07 19:35:28.237384348 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/56-cfg.dot	2023-06-07 19:35:34.767383776 +0330
@@ -1,24 +1,29 @@
-digraph "PushLocalFrame" {  
-"1974" [label = <(soa,soa(env))<SUB>894</SUB>> ]
-"1986" [label = <(PushFrame,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;PushFrame(capacity))<SUB>898</SUB>> ]
-"1992" [label = <(RETURN,return JNI_OK;,return JNI_OK;)<SUB>899</SUB>> ]
-"1977" [label = <(&lt;operator&gt;.notEquals,EnsureLocalCapacityInternal(soa, capacity, &quot;PushLocalFrame&quot;) != JNI_OK)<SUB>895</SUB>> ]
-"1987" [label = <(&lt;operator&gt;.indirectFieldAccess,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;PushFrame)<SUB>898</SUB>> ]
-"1978" [label = <(EnsureLocalCapacityInternal,EnsureLocalCapacityInternal(soa, capacity, &quot;PushLocalFrame&quot;))<SUB>895</SUB>> ]
-"1984" [label = <(RETURN,return JNI_ERR;,return JNI_ERR;)<SUB>896</SUB>> ]
-"1988" [label = <(down_cast&lt;JNIEnvExt*&gt;,down_cast&lt;JNIEnvExt*&gt;(env))<SUB>898</SUB>> ]
-"1990" [label = <(FIELD_IDENTIFIER,PushFrame,PushFrame)<SUB>898</SUB>> ]
-"1969" [label = <(METHOD,PushLocalFrame)<SUB>892</SUB>> ]
-"1994" [label = <(METHOD_RETURN,jint)<SUB>892</SUB>> ]
-  "1974" -> "1978" 
-  "1986" -> "1992" 
-  "1992" -> "1994" 
-  "1977" -> "1984" 
-  "1977" -> "1988" 
-  "1987" -> "1986" 
-  "1978" -> "1977" 
-  "1984" -> "1994" 
-  "1988" -> "1990" 
-  "1990" -> "1987" 
-  "1969" -> "1974" 
+digraph "DeleteGlobalRef" {  
+"1902" [label = <(&lt;operator&gt;.assignment,* vm = down_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm())<SUB>844</SUB>> ]
+"1910" [label = <(&lt;operator&gt;.assignment,* self = down_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_)<SUB>845</SUB>> ]
+"1916" [label = <(DeleteGlobalRef,vm-&gt;DeleteGlobalRef(self, obj))<SUB>846</SUB>> ]
+"1904" [label = <(GetVm,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm())<SUB>844</SUB>> ]
+"1912" [label = <(&lt;operator&gt;.indirectFieldAccess,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_)<SUB>845</SUB>> ]
+"1917" [label = <(&lt;operator&gt;.indirectFieldAccess,vm-&gt;DeleteGlobalRef)<SUB>846</SUB>> ]
+"1905" [label = <(&lt;operator&gt;.indirectFieldAccess,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm)<SUB>844</SUB>> ]
+"1913" [label = <(down_cast&lt;JNIEnvExt*&gt;,down_cast&lt;JNIEnvExt*&gt;(env))<SUB>845</SUB>> ]
+"1915" [label = <(FIELD_IDENTIFIER,self_,self_)<SUB>845</SUB>> ]
+"1919" [label = <(FIELD_IDENTIFIER,DeleteGlobalRef,DeleteGlobalRef)<SUB>846</SUB>> ]
+"1906" [label = <(down_cast&lt;JNIEnvExt*&gt;,down_cast&lt;JNIEnvExt*&gt;(env))<SUB>844</SUB>> ]
+"1908" [label = <(FIELD_IDENTIFIER,GetVm,GetVm)<SUB>844</SUB>> ]
+"1897" [label = <(METHOD,DeleteGlobalRef)<SUB>843</SUB>> ]
+"1922" [label = <(METHOD_RETURN,void)<SUB>843</SUB>> ]
+  "1902" -> "1913" 
+  "1910" -> "1919" 
+  "1916" -> "1922" 
+  "1904" -> "1902" 
+  "1912" -> "1910" 
+  "1917" -> "1916" 
+  "1905" -> "1904" 
+  "1913" -> "1915" 
+  "1915" -> "1912" 
+  "1919" -> "1917" 
+  "1906" -> "1908" 
+  "1908" -> "1905" 
+  "1897" -> "1906" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/560-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/560-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/560-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/560-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "NewPrimitiveArray&lt;jintArray,mirror::IntArray&gt;" {  
-"19406" [label = <(METHOD,NewPrimitiveArray&lt;jintArray,mirror::IntArray&gt;)> ]
-"19410" [label = <(METHOD_RETURN,ANY)> ]
-  "19406" -> "19410" 
+digraph "ReleasePrimitiveArray&lt;jcharArray,jchar,mirror::CharArray&gt;" {  
+"19074" [label = <(METHOD,ReleasePrimitiveArray&lt;jcharArray,jchar,mirror::CharArray&gt;)> ]
+"19080" [label = <(METHOD_RETURN,ANY)> ]
+  "19074" -> "19080" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/561-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/561-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/561-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/561-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "NewPrimitiveArray&lt;jlongArray,mirror::LongArray&gt;" {  
-"19411" [label = <(METHOD,NewPrimitiveArray&lt;jlongArray,mirror::LongArray&gt;)> ]
-"19415" [label = <(METHOD_RETURN,ANY)> ]
-  "19411" -> "19415" 
+digraph "ReleasePrimitiveArray&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;" {  
+"19081" [label = <(METHOD,ReleasePrimitiveArray&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;)> ]
+"19087" [label = <(METHOD_RETURN,ANY)> ]
+  "19081" -> "19087" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/562-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/562-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/562-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/562-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT(element_jclass)" {  
-"19416" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT(element_jclass))> ]
-"19421" [label = <(METHOD_RETURN,ANY)> ]
-  "19416" -> "19421" 
+digraph "ReleasePrimitiveArray&lt;jfloatArray,jfloat,mirror::FloatArray&gt;" {  
+"19088" [label = <(METHOD,ReleasePrimitiveArray&lt;jfloatArray,jfloat,mirror::FloatArray&gt;)> ]
+"19094" [label = <(METHOD_RETURN,ANY)> ]
+  "19088" -> "19094" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/563-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/563-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/563-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/563-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "IsPrimitive" {  
-"19422" [label = <(METHOD,IsPrimitive)> ]
-"19425" [label = <(METHOD_RETURN,ANY)> ]
-  "19422" -> "19425" 
+digraph "ReleasePrimitiveArray&lt;jintArray,jint,mirror::IntArray&gt;" {  
+"19095" [label = <(METHOD,ReleasePrimitiveArray&lt;jintArray,jint,mirror::IntArray&gt;)> ]
+"19101" [label = <(METHOD_RETURN,ANY)> ]
+  "19095" -> "19101" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/564-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/564-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/564-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/564-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "PrettyDescriptor" {  
-"19426" [label = <(METHOD,PrettyDescriptor)> ]
-"19429" [label = <(METHOD_RETURN,ANY)> ]
-  "19426" -> "19429" 
+digraph "ReleasePrimitiveArray&lt;jlongArray,jlong,mirror::LongArray&gt;" {  
+"19102" [label = <(METHOD,ReleasePrimitiveArray&lt;jlongArray,jlong,mirror::LongArray&gt;)> ]
+"19108" [label = <(METHOD_RETURN,ANY)> ]
+  "19102" -> "19108" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/565-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/565-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/565-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/565-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "FindArrayClass" {  
-"19430" [label = <(METHOD,FindArrayClass)> ]
-"19435" [label = <(METHOD_RETURN,ANY)> ]
-  "19430" -> "19435" 
+digraph "ReleasePrimitiveArray&lt;jshortArray,jshort,mirror::ShortArray&gt;" {  
+"19109" [label = <(METHOD,ReleasePrimitiveArray&lt;jshortArray,jshort,mirror::ShortArray&gt;)> ]
+"19115" [label = <(METHOD_RETURN,ANY)> ]
+  "19109" -> "19115" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/566-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/566-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/566-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/566-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "::Alloc" {  
-"19436" [label = <(METHOD,::Alloc)> ]
-"19442" [label = <(METHOD_RETURN,ANY)> ]
-  "19436" -> "19442" 
+digraph "GetPrimitiveArrayRegion&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;" {  
+"19116" [label = <(METHOD,GetPrimitiveArrayRegion&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;)> ]
+"19123" [label = <(METHOD_RETURN,ANY)> ]
+  "19116" -> "19123" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/567-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/567-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/567-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/567-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "GetComponentType" {  
-"19443" [label = <(METHOD,GetComponentType)> ]
-"19446" [label = <(METHOD_RETURN,ANY)> ]
-  "19443" -> "19446" 
+digraph "GetPrimitiveArrayRegion&lt;jbyteArray,jbyte,mirror::ByteArray&gt;" {  
+"19124" [label = <(METHOD,GetPrimitiveArrayRegion&lt;jbyteArray,jbyte,mirror::ByteArray&gt;)> ]
+"19131" [label = <(METHOD_RETURN,ANY)> ]
+  "19124" -> "19131" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/568-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/568-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/568-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/568-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "mirror::Class::PrettyDescriptor" {  
-"19447" [label = <(METHOD,mirror::Class::PrettyDescriptor)> ]
-"19451" [label = <(METHOD_RETURN,ANY)> ]
-  "19447" -> "19451" 
+digraph "GetPrimitiveArrayRegion&lt;jcharArray,jchar,mirror::CharArray&gt;" {  
+"19132" [label = <(METHOD,GetPrimitiveArrayRegion&lt;jcharArray,jchar,mirror::CharArray&gt;)> ]
+"19139" [label = <(METHOD_RETURN,ANY)> ]
+  "19132" -> "19139" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/569-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/569-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/569-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/569-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "NewPrimitiveArray&lt;jshortArray,mirror::ShortArray&gt;" {  
-"19452" [label = <(METHOD,NewPrimitiveArray&lt;jshortArray,mirror::ShortArray&gt;)> ]
-"19456" [label = <(METHOD_RETURN,ANY)> ]
-  "19452" -> "19456" 
+digraph "GetPrimitiveArrayRegion&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;" {  
+"19140" [label = <(METHOD,GetPrimitiveArrayRegion&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;)> ]
+"19147" [label = <(METHOD_RETURN,ANY)> ]
+  "19140" -> "19147" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/57-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/57-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/57-cfg.dot	2023-06-07 19:35:28.237384348 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/57-cfg.dot	2023-06-07 19:35:34.767383776 +0330
@@ -1,51 +1,49 @@
-digraph "PopLocalFrame" {  
-"2001" [label = <(soa,soa(env))<SUB>903</SUB>> ]
-"2003" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; survivor = soa.Decode&lt;mirror::Object&gt;(java_survivor))<SUB>904</SUB>> ]
-"2020" [label = <(PopFrame,soa.Env()-&gt;PopFrame())<SUB>905</SUB>> ]
-"2027" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(survivor);,return soa.AddLocalReference&lt;jobject&gt;(survivor);)<SUB>906</SUB>> ]
-"2004" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; survivor)<SUB>904</SUB>> ]
-"2011" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(java_survivor))<SUB>904</SUB>> ]
-"2021" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Env()-&gt;PopFrame)<SUB>905</SUB>> ]
-"2028" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(survivor))<SUB>906</SUB>> ]
-"2005" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>904</SUB>> ]
-"2012" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>904</SUB>> ]
-"2022" [label = <(Env,soa.Env())<SUB>905</SUB>> ]
-"2026" [label = <(FIELD_IDENTIFIER,PopFrame,PopFrame)<SUB>905</SUB>> ]
-"2029" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>906</SUB>> ]
-"2007" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>904</SUB>> ]
-"2013" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>904</SUB>> ]
-"2016" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>904</SUB>> ]
-"2023" [label = <(&lt;operator&gt;.fieldAccess,soa.Env)<SUB>905</SUB>> ]
-"2030" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>906</SUB>> ]
-"2009" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>904</SUB>> ]
-"2015" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>904</SUB>> ]
-"2018" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>904</SUB>> ]
-"2025" [label = <(FIELD_IDENTIFIER,Env,Env)<SUB>905</SUB>> ]
-"2032" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>906</SUB>> ]
-"1996" [label = <(METHOD,PopLocalFrame)<SUB>902</SUB>> ]
-"2035" [label = <(METHOD_RETURN,jobject)<SUB>902</SUB>> ]
-  "2001" -> "2009" 
-  "2003" -> "2025" 
-  "2020" -> "2032" 
-  "2027" -> "2035" 
-  "2004" -> "2015" 
-  "2011" -> "2003" 
-  "2021" -> "2020" 
-  "2028" -> "2027" 
-  "2005" -> "2004" 
-  "2012" -> "2011" 
-  "2022" -> "2026" 
-  "2026" -> "2021" 
-  "2029" -> "2028" 
-  "2007" -> "2005" 
-  "2013" -> "2018" 
-  "2016" -> "2012" 
-  "2023" -> "2022" 
-  "2030" -> "2029" 
-  "2009" -> "2007" 
-  "2015" -> "2013" 
-  "2018" -> "2016" 
-  "2025" -> "2023" 
-  "2032" -> "2030" 
-  "1996" -> "2001" 
+digraph "NewWeakGlobalRef" {  
+"1929" [label = <(soa,soa(env))<SUB>850</SUB>> ]
+"1931" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; decoded_obj = soa.Decode&lt;mirror::Object&gt;(obj))<SUB>851</SUB>> ]
+"1948" [label = <(RETURN,return soa.Vm()-&gt;AddWeakGlobalRef(soa.Self(), decoded_obj);,return soa.Vm()-&gt;AddWeakGlobalRef(soa.Self(), decoded_obj);)<SUB>852</SUB>> ]
+"1932" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; decoded_obj)<SUB>851</SUB>> ]
+"1939" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(obj))<SUB>851</SUB>> ]
+"1949" [label = <(AddWeakGlobalRef,soa.Vm()-&gt;AddWeakGlobalRef(soa.Self(), decoded_obj))<SUB>852</SUB>> ]
+"1933" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>851</SUB>> ]
+"1940" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>851</SUB>> ]
+"1950" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Vm()-&gt;AddWeakGlobalRef)<SUB>852</SUB>> ]
+"1956" [label = <(Self,soa.Self())<SUB>852</SUB>> ]
+"1935" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>851</SUB>> ]
+"1941" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>851</SUB>> ]
+"1944" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>851</SUB>> ]
+"1951" [label = <(Vm,soa.Vm())<SUB>852</SUB>> ]
+"1955" [label = <(FIELD_IDENTIFIER,AddWeakGlobalRef,AddWeakGlobalRef)<SUB>852</SUB>> ]
+"1957" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>852</SUB>> ]
+"1937" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>851</SUB>> ]
+"1943" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>851</SUB>> ]
+"1946" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>851</SUB>> ]
+"1952" [label = <(&lt;operator&gt;.fieldAccess,soa.Vm)<SUB>852</SUB>> ]
+"1959" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>852</SUB>> ]
+"1954" [label = <(FIELD_IDENTIFIER,Vm,Vm)<SUB>852</SUB>> ]
+"1924" [label = <(METHOD,NewWeakGlobalRef)<SUB>849</SUB>> ]
+"1961" [label = <(METHOD_RETURN,jweak)<SUB>849</SUB>> ]
+  "1929" -> "1937" 
+  "1931" -> "1954" 
+  "1948" -> "1961" 
+  "1932" -> "1943" 
+  "1939" -> "1931" 
+  "1949" -> "1948" 
+  "1933" -> "1932" 
+  "1940" -> "1939" 
+  "1950" -> "1959" 
+  "1956" -> "1949" 
+  "1935" -> "1933" 
+  "1941" -> "1946" 
+  "1944" -> "1940" 
+  "1951" -> "1955" 
+  "1955" -> "1950" 
+  "1957" -> "1956" 
+  "1937" -> "1935" 
+  "1943" -> "1941" 
+  "1946" -> "1944" 
+  "1952" -> "1951" 
+  "1959" -> "1957" 
+  "1954" -> "1952" 
+  "1924" -> "1929" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/570-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/570-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/570-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/570-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "IsPrimitiveArray" {  
-"19457" [label = <(METHOD,IsPrimitiveArray)> ]
-"19460" [label = <(METHOD_RETURN,ANY)> ]
-  "19457" -> "19460" 
+digraph "GetPrimitiveArrayRegion&lt;jfloatArray,jfloat,mirror::FloatArray&gt;" {  
+"19148" [label = <(METHOD,GetPrimitiveArrayRegion&lt;jfloatArray,jfloat,mirror::FloatArray&gt;)> ]
+"19155" [label = <(METHOD_RETURN,ANY)> ]
+  "19148" -> "19155" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/571-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/571-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/571-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/571-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "GetRawData" {  
-"19461" [label = <(METHOD,GetRawData)> ]
-"19466" [label = <(METHOD_RETURN,ANY)> ]
-  "19461" -> "19466" 
+digraph "GetPrimitiveArrayRegion&lt;jintArray,jint,mirror::IntArray&gt;" {  
+"19156" [label = <(METHOD,GetPrimitiveArrayRegion&lt;jintArray,jint,mirror::IntArray&gt;)> ]
+"19163" [label = <(METHOD_RETURN,ANY)> ]
+  "19156" -> "19163" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/572-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/572-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/572-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/572-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "GetComponentSize" {  
-"19467" [label = <(METHOD,GetComponentSize)> ]
-"19470" [label = <(METHOD_RETURN,ANY)> ]
-  "19467" -> "19470" 
+digraph "GetPrimitiveArrayRegion&lt;jlongArray,jlong,mirror::LongArray&gt;" {  
+"19164" [label = <(METHOD,GetPrimitiveArrayRegion&lt;jlongArray,jlong,mirror::LongArray&gt;)> ]
+"19171" [label = <(METHOD_RETURN,ANY)> ]
+  "19164" -> "19171" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/573-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/573-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/573-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/573-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "GetPrimitiveArray&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;" {  
-"19471" [label = <(METHOD,GetPrimitiveArray&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;)> ]
-"19476" [label = <(METHOD_RETURN,ANY)> ]
-  "19471" -> "19476" 
+digraph "GetPrimitiveArrayRegion&lt;jshortArray,jshort,mirror::ShortArray&gt;" {  
+"19172" [label = <(METHOD,GetPrimitiveArrayRegion&lt;jshortArray,jshort,mirror::ShortArray&gt;)> ]
+"19179" [label = <(METHOD_RETURN,ANY)> ]
+  "19172" -> "19179" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/574-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/574-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/574-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/574-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "GetPrimitiveArray&lt;jbyteArray,jbyte,mirror::ByteArray&gt;" {  
-"19477" [label = <(METHOD,GetPrimitiveArray&lt;jbyteArray,jbyte,mirror::ByteArray&gt;)> ]
-"19482" [label = <(METHOD_RETURN,ANY)> ]
-  "19477" -> "19482" 
+digraph "SetPrimitiveArrayRegion&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;" {  
+"19180" [label = <(METHOD,SetPrimitiveArrayRegion&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;)> ]
+"19187" [label = <(METHOD_RETURN,ANY)> ]
+  "19180" -> "19187" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/575-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/575-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/575-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/575-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "GetPrimitiveArray&lt;jcharArray,jchar,mirror::CharArray&gt;" {  
-"19483" [label = <(METHOD,GetPrimitiveArray&lt;jcharArray,jchar,mirror::CharArray&gt;)> ]
-"19488" [label = <(METHOD_RETURN,ANY)> ]
-  "19483" -> "19488" 
+digraph "SetPrimitiveArrayRegion&lt;jbyteArray,jbyte,mirror::ByteArray&gt;" {  
+"19188" [label = <(METHOD,SetPrimitiveArrayRegion&lt;jbyteArray,jbyte,mirror::ByteArray&gt;)> ]
+"19195" [label = <(METHOD_RETURN,ANY)> ]
+  "19188" -> "19195" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/576-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/576-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/576-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/576-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "GetPrimitiveArray&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;" {  
-"19489" [label = <(METHOD,GetPrimitiveArray&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;)> ]
-"19494" [label = <(METHOD_RETURN,ANY)> ]
-  "19489" -> "19494" 
+digraph "SetPrimitiveArrayRegion&lt;jcharArray,jchar,mirror::CharArray&gt;" {  
+"19196" [label = <(METHOD,SetPrimitiveArrayRegion&lt;jcharArray,jchar,mirror::CharArray&gt;)> ]
+"19203" [label = <(METHOD_RETURN,ANY)> ]
+  "19196" -> "19203" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/577-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/577-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/577-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/577-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "GetPrimitiveArray&lt;jfloatArray,jfloat,mirror::FloatArray&gt;" {  
-"19495" [label = <(METHOD,GetPrimitiveArray&lt;jfloatArray,jfloat,mirror::FloatArray&gt;)> ]
-"19500" [label = <(METHOD_RETURN,ANY)> ]
-  "19495" -> "19500" 
+digraph "SetPrimitiveArrayRegion&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;" {  
+"19204" [label = <(METHOD,SetPrimitiveArrayRegion&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;)> ]
+"19211" [label = <(METHOD_RETURN,ANY)> ]
+  "19204" -> "19211" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/578-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/578-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/578-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/578-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "GetPrimitiveArray&lt;jintArray,jint,mirror::IntArray&gt;" {  
-"19501" [label = <(METHOD,GetPrimitiveArray&lt;jintArray,jint,mirror::IntArray&gt;)> ]
-"19506" [label = <(METHOD_RETURN,ANY)> ]
-  "19501" -> "19506" 
+digraph "SetPrimitiveArrayRegion&lt;jfloatArray,jfloat,mirror::FloatArray&gt;" {  
+"19212" [label = <(METHOD,SetPrimitiveArrayRegion&lt;jfloatArray,jfloat,mirror::FloatArray&gt;)> ]
+"19219" [label = <(METHOD_RETURN,ANY)> ]
+  "19212" -> "19219" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/579-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/579-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/579-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/579-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "GetPrimitiveArray&lt;jlongArray,jlong,mirror::LongArray&gt;" {  
-"19507" [label = <(METHOD,GetPrimitiveArray&lt;jlongArray,jlong,mirror::LongArray&gt;)> ]
-"19512" [label = <(METHOD_RETURN,ANY)> ]
-  "19507" -> "19512" 
+digraph "SetPrimitiveArrayRegion&lt;jintArray,jint,mirror::IntArray&gt;" {  
+"19220" [label = <(METHOD,SetPrimitiveArrayRegion&lt;jintArray,jint,mirror::IntArray&gt;)> ]
+"19227" [label = <(METHOD_RETURN,ANY)> ]
+  "19220" -> "19227" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/58-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/58-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/58-cfg.dot	2023-06-07 19:35:28.247384345 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/58-cfg.dot	2023-06-07 19:35:34.767383776 +0330
@@ -1,11 +1,29 @@
-digraph "EnsureLocalCapacity" {  
-"2042" [label = <(soa,soa(env))<SUB>911</SUB>> ]
-"2044" [label = <(RETURN,return EnsureLocalCapacityInternal(soa, desired_capacity, &quot;EnsureLocalCapacity&quot;);,return EnsureLocalCapacityInternal(soa, desired_capacity, &quot;EnsureLocalCapacity&quot;);)<SUB>912</SUB>> ]
-"2045" [label = <(EnsureLocalCapacityInternal,EnsureLocalCapacityInternal(soa, desired_capacity, &quot;EnsureLocalCapacity&quot;))<SUB>912</SUB>> ]
-"2037" [label = <(METHOD,EnsureLocalCapacity)<SUB>909</SUB>> ]
-"2049" [label = <(METHOD_RETURN,jint)<SUB>909</SUB>> ]
-  "2042" -> "2045" 
-  "2044" -> "2049" 
-  "2045" -> "2044" 
-  "2037" -> "2042" 
+digraph "DeleteWeakGlobalRef" {  
+"1968" [label = <(&lt;operator&gt;.assignment,* vm = down_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm())<SUB>856</SUB>> ]
+"1976" [label = <(&lt;operator&gt;.assignment,* self = down_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_)<SUB>857</SUB>> ]
+"1982" [label = <(DeleteWeakGlobalRef,vm-&gt;DeleteWeakGlobalRef(self, obj))<SUB>858</SUB>> ]
+"1970" [label = <(GetVm,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm())<SUB>856</SUB>> ]
+"1978" [label = <(&lt;operator&gt;.indirectFieldAccess,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_)<SUB>857</SUB>> ]
+"1983" [label = <(&lt;operator&gt;.indirectFieldAccess,vm-&gt;DeleteWeakGlobalRef)<SUB>858</SUB>> ]
+"1971" [label = <(&lt;operator&gt;.indirectFieldAccess,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm)<SUB>856</SUB>> ]
+"1979" [label = <(down_cast&lt;JNIEnvExt*&gt;,down_cast&lt;JNIEnvExt*&gt;(env))<SUB>857</SUB>> ]
+"1981" [label = <(FIELD_IDENTIFIER,self_,self_)<SUB>857</SUB>> ]
+"1985" [label = <(FIELD_IDENTIFIER,DeleteWeakGlobalRef,DeleteWeakGlobalRef)<SUB>858</SUB>> ]
+"1972" [label = <(down_cast&lt;JNIEnvExt*&gt;,down_cast&lt;JNIEnvExt*&gt;(env))<SUB>856</SUB>> ]
+"1974" [label = <(FIELD_IDENTIFIER,GetVm,GetVm)<SUB>856</SUB>> ]
+"1963" [label = <(METHOD,DeleteWeakGlobalRef)<SUB>855</SUB>> ]
+"1988" [label = <(METHOD_RETURN,void)<SUB>855</SUB>> ]
+  "1968" -> "1979" 
+  "1976" -> "1985" 
+  "1982" -> "1988" 
+  "1970" -> "1968" 
+  "1978" -> "1976" 
+  "1983" -> "1982" 
+  "1971" -> "1970" 
+  "1979" -> "1981" 
+  "1981" -> "1978" 
+  "1985" -> "1983" 
+  "1972" -> "1974" 
+  "1974" -> "1971" 
+  "1963" -> "1972" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/580-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/580-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/580-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/580-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "GetPrimitiveArray&lt;jshortArray,jshort,mirror::ShortArray&gt;" {  
-"19513" [label = <(METHOD,GetPrimitiveArray&lt;jshortArray,jshort,mirror::ShortArray&gt;)> ]
-"19518" [label = <(METHOD_RETURN,ANY)> ]
-  "19513" -> "19518" 
+digraph "SetPrimitiveArrayRegion&lt;jlongArray,jlong,mirror::LongArray&gt;" {  
+"19228" [label = <(METHOD,SetPrimitiveArrayRegion&lt;jlongArray,jlong,mirror::LongArray&gt;)> ]
+"19235" [label = <(METHOD_RETURN,ANY)> ]
+  "19228" -> "19235" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/581-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/581-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/581-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/581-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "ReleasePrimitiveArray&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;" {  
-"19519" [label = <(METHOD,ReleasePrimitiveArray&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;)> ]
-"19525" [label = <(METHOD_RETURN,ANY)> ]
-  "19519" -> "19525" 
+digraph "SetPrimitiveArrayRegion&lt;jshortArray,jshort,mirror::ShortArray&gt;" {  
+"19236" [label = <(METHOD,SetPrimitiveArrayRegion&lt;jshortArray,jshort,mirror::ShortArray&gt;)> ]
+"19243" [label = <(METHOD_RETURN,ANY)> ]
+  "19236" -> "19243" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/582-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/582-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/582-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/582-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "ReleasePrimitiveArray&lt;jbyteArray,jbyte,mirror::ByteArray&gt;" {  
-"19526" [label = <(METHOD,ReleasePrimitiveArray&lt;jbyteArray,jbyte,mirror::ByteArray&gt;)> ]
-"19532" [label = <(METHOD_RETURN,ANY)> ]
-  "19526" -> "19532" 
+digraph "CHECK_NON_NULL_ARGUMENT_FN_NAME" {  
+"19244" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_FN_NAME)<SUB>617</SUB>> ]
+"19249" [label = <(METHOD_RETURN,ANY)> ]
+  "19244" -> "19249" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/583-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/583-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/583-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/583-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "ReleasePrimitiveArray&lt;jcharArray,jchar,mirror::CharArray&gt;" {  
-"19533" [label = <(METHOD,ReleasePrimitiveArray&lt;jcharArray,jchar,mirror::CharArray&gt;)> ]
-"19539" [label = <(METHOD_RETURN,ANY)> ]
-  "19533" -> "19539" 
+digraph "CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, java_class, JNI_ERR)" {  
+"19250" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, java_class, JNI_ERR))> ]
+"19255" [label = <(METHOD_RETURN,ANY)> ]
+  "19250" -> "19255" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/584-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/584-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/584-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/584-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "ReleasePrimitiveArray&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;" {  
-"19540" [label = <(METHOD,ReleasePrimitiveArray&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;)> ]
-"19546" [label = <(METHOD_RETURN,ANY)> ]
-  "19540" -> "19546" 
+digraph "CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, methods, JNI_ERR)" {  
+"19256" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, methods, JNI_ERR))> ]
+"19261" [label = <(METHOD_RETURN,ANY)> ]
+  "19256" -> "19261" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/585-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/585-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/585-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/585-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "ReleasePrimitiveArray&lt;jfloatArray,jfloat,mirror::FloatArray&gt;" {  
-"19547" [label = <(METHOD,ReleasePrimitiveArray&lt;jfloatArray,jfloat,mirror::FloatArray&gt;)> ]
-"19553" [label = <(METHOD_RETURN,ANY)> ]
-  "19547" -> "19553" 
+digraph "IsCheckJniEnabled" {  
+"19262" [label = <(METHOD,IsCheckJniEnabled)> ]
+"19265" [label = <(METHOD_RETURN,ANY)> ]
+  "19262" -> "19265" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/586-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/586-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/586-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/586-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "ReleasePrimitiveArray&lt;jintArray,jint,mirror::IntArray&gt;" {  
-"19554" [label = <(METHOD,ReleasePrimitiveArray&lt;jintArray,jint,mirror::IntArray&gt;)> ]
-"19560" [label = <(METHOD_RETURN,ANY)> ]
-  "19554" -> "19560" 
+digraph "DumpClass" {  
+"19266" [label = <(METHOD,DumpClass)> ]
+"19271" [label = <(METHOD_RETURN,ANY)> ]
+  "19266" -> "19271" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/587-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/587-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/587-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/587-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "ReleasePrimitiveArray&lt;jlongArray,jlong,mirror::LongArray&gt;" {  
-"19561" [label = <(METHOD,ReleasePrimitiveArray&lt;jlongArray,jlong,mirror::LongArray&gt;)> ]
-"19567" [label = <(METHOD_RETURN,ANY)> ]
-  "19561" -> "19567" 
+digraph "LOG_STREAM" {  
+"19272" [label = <(METHOD,LOG_STREAM)> ]
+"19275" [label = <(METHOD_RETURN,ANY)> ]
+  "19272" -> "19275" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/588-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/588-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/588-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/588-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "ReleasePrimitiveArray&lt;jshortArray,jshort,mirror::ShortArray&gt;" {  
-"19568" [label = <(METHOD,ReleasePrimitiveArray&lt;jshortArray,jshort,mirror::ShortArray&gt;)> ]
-"19574" [label = <(METHOD_RETURN,ANY)> ]
-  "19568" -> "19574" 
+digraph "ToModifiedUtf8" {  
+"19276" [label = <(METHOD,ToModifiedUtf8)> ]
+"19279" [label = <(METHOD_RETURN,ANY)> ]
+  "19276" -> "19279" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/589-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/589-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/589-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/589-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "GetPrimitiveArrayRegion&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;" {  
-"19575" [label = <(METHOD,GetPrimitiveArrayRegion&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;)> ]
-"19582" [label = <(METHOD_RETURN,ANY)> ]
-  "19575" -> "19582" 
+digraph "GetLocation" {  
+"19280" [label = <(METHOD,GetLocation)> ]
+"19283" [label = <(METHOD_RETURN,ANY)> ]
+  "19280" -> "19283" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/59-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/59-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/59-cfg.dot	2023-06-07 19:35:28.247384345 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/59-cfg.dot	2023-06-07 19:35:34.767383776 +0330
@@ -1,49 +1,44 @@
-digraph "NewGlobalRef" {  
-"2056" [label = <(soa,soa(env))<SUB>916</SUB>> ]
-"2058" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; decoded_obj = soa.Decode&lt;mirror::Object&gt;(obj))<SUB>917</SUB>> ]
-"2075" [label = <(RETURN,return soa.Vm()-&gt;AddGlobalRef(soa.Self(), decoded_obj);,return soa.Vm()-&gt;AddGlobalRef(soa.Self(), decoded_obj);)<SUB>918</SUB>> ]
-"2059" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; decoded_obj)<SUB>917</SUB>> ]
-"2066" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(obj))<SUB>917</SUB>> ]
-"2076" [label = <(AddGlobalRef,soa.Vm()-&gt;AddGlobalRef(soa.Self(), decoded_obj))<SUB>918</SUB>> ]
-"2060" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>917</SUB>> ]
-"2067" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>917</SUB>> ]
-"2077" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Vm()-&gt;AddGlobalRef)<SUB>918</SUB>> ]
-"2083" [label = <(Self,soa.Self())<SUB>918</SUB>> ]
-"2062" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>917</SUB>> ]
-"2068" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>917</SUB>> ]
-"2071" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>917</SUB>> ]
-"2078" [label = <(Vm,soa.Vm())<SUB>918</SUB>> ]
-"2082" [label = <(FIELD_IDENTIFIER,AddGlobalRef,AddGlobalRef)<SUB>918</SUB>> ]
-"2084" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>918</SUB>> ]
-"2064" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>917</SUB>> ]
-"2070" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>917</SUB>> ]
-"2073" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>917</SUB>> ]
-"2079" [label = <(&lt;operator&gt;.fieldAccess,soa.Vm)<SUB>918</SUB>> ]
-"2086" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>918</SUB>> ]
-"2081" [label = <(FIELD_IDENTIFIER,Vm,Vm)<SUB>918</SUB>> ]
-"2051" [label = <(METHOD,NewGlobalRef)<SUB>915</SUB>> ]
-"2088" [label = <(METHOD_RETURN,jobject)<SUB>915</SUB>> ]
-  "2056" -> "2064" 
-  "2058" -> "2081" 
-  "2075" -> "2088" 
-  "2059" -> "2070" 
-  "2066" -> "2058" 
-  "2076" -> "2075" 
-  "2060" -> "2059" 
-  "2067" -> "2066" 
-  "2077" -> "2086" 
-  "2083" -> "2076" 
-  "2062" -> "2060" 
-  "2068" -> "2073" 
-  "2071" -> "2067" 
-  "2078" -> "2082" 
-  "2082" -> "2077" 
-  "2084" -> "2083" 
-  "2064" -> "2062" 
-  "2070" -> "2068" 
-  "2073" -> "2071" 
-  "2079" -> "2078" 
-  "2086" -> "2084" 
-  "2081" -> "2079" 
-  "2051" -> "2056" 
+digraph "NewLocalRef" {  
+"1995" [label = <(soa,soa(env))<SUB>862</SUB>> ]
+"1997" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; decoded_obj = soa.Decode&lt;mirror::Object&gt;(obj))<SUB>863</SUB>> ]
+"2021" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(decoded_obj);,return soa.AddLocalReference&lt;jobject&gt;(decoded_obj);)<SUB>868</SUB>> ]
+"1998" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; decoded_obj)<SUB>863</SUB>> ]
+"2005" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(obj))<SUB>863</SUB>> ]
+"2015" [label = <(&lt;operator&gt;.equals,decoded_obj == nullptr)<SUB>865</SUB>> ]
+"2022" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(decoded_obj))<SUB>868</SUB>> ]
+"1999" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>863</SUB>> ]
+"2006" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>863</SUB>> ]
+"2019" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>866</SUB>> ]
+"2023" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>868</SUB>> ]
+"2001" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>863</SUB>> ]
+"2007" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>863</SUB>> ]
+"2010" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>863</SUB>> ]
+"2024" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>868</SUB>> ]
+"2003" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>863</SUB>> ]
+"2009" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>863</SUB>> ]
+"2012" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>863</SUB>> ]
+"2026" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>868</SUB>> ]
+"1990" [label = <(METHOD,NewLocalRef)<SUB>861</SUB>> ]
+"2029" [label = <(METHOD_RETURN,jobject)<SUB>861</SUB>> ]
+  "1995" -> "2003" 
+  "1997" -> "2015" 
+  "2021" -> "2029" 
+  "1998" -> "2009" 
+  "2005" -> "1997" 
+  "2015" -> "2019" 
+  "2015" -> "2026" 
+  "2022" -> "2021" 
+  "1999" -> "1998" 
+  "2006" -> "2005" 
+  "2019" -> "2029" 
+  "2023" -> "2022" 
+  "2001" -> "1999" 
+  "2007" -> "2012" 
+  "2010" -> "2006" 
+  "2024" -> "2023" 
+  "2003" -> "2001" 
+  "2009" -> "2007" 
+  "2012" -> "2010" 
+  "2026" -> "2024" 
+  "1990" -> "1995" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/590-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/590-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/590-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/590-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "GetPrimitiveArrayRegion&lt;jbyteArray,jbyte,mirror::ByteArray&gt;" {  
-"19583" [label = <(METHOD,GetPrimitiveArrayRegion&lt;jbyteArray,jbyte,mirror::ByteArray&gt;)> ]
-"19590" [label = <(METHOD_RETURN,ANY)> ]
-  "19583" -> "19590" 
+digraph "GetDexCache" {  
+"19284" [label = <(METHOD,GetDexCache)> ]
+"19287" [label = <(METHOD_RETURN,ANY)> ]
+  "19284" -> "19287" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/591-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/591-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/591-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/591-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "GetPrimitiveArrayRegion&lt;jcharArray,jchar,mirror::CharArray&gt;" {  
-"19591" [label = <(METHOD,GetPrimitiveArrayRegion&lt;jcharArray,jchar,mirror::CharArray&gt;)> ]
-"19598" [label = <(METHOD_RETURN,ANY)> ]
-  "19591" -> "19598" 
+digraph "IsNative" {  
+"19288" [label = <(METHOD,IsNative)> ]
+"19291" [label = <(METHOD_RETURN,ANY)> ]
+  "19288" -> "19291" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/592-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/592-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/592-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/592-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "GetPrimitiveArrayRegion&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;" {  
-"19599" [label = <(METHOD,GetPrimitiveArrayRegion&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;)> ]
-"19606" [label = <(METHOD_RETURN,ANY)> ]
-  "19599" -> "19606" 
+digraph "VLOG" {  
+"19292" [label = <(METHOD,VLOG)> ]
+"19295" [label = <(METHOD_RETURN,ANY)> ]
+  "19292" -> "19295" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/593-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/593-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/593-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/593-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "GetPrimitiveArrayRegion&lt;jfloatArray,jfloat,mirror::FloatArray&gt;" {  
-"19607" [label = <(METHOD,GetPrimitiveArrayRegion&lt;jfloatArray,jfloat,mirror::FloatArray&gt;)> ]
-"19614" [label = <(METHOD_RETURN,ANY)> ]
-  "19607" -> "19614" 
+digraph "PrettyMethod" {  
+"19296" [label = <(METHOD,PrettyMethod)> ]
+"19299" [label = <(METHOD_RETURN,ANY)> ]
+  "19296" -> "19299" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/594-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/594-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/594-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/594-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "GetPrimitiveArrayRegion&lt;jintArray,jint,mirror::IntArray&gt;" {  
-"19615" [label = <(METHOD,GetPrimitiveArrayRegion&lt;jintArray,jint,mirror::IntArray&gt;)> ]
-"19622" [label = <(METHOD_RETURN,ANY)> ]
-  "19615" -> "19622" 
+digraph "RegisterNative" {  
+"19300" [label = <(METHOD,RegisterNative)> ]
+"19304" [label = <(METHOD_RETURN,ANY)> ]
+  "19300" -> "19304" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/595-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/595-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/595-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/595-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "GetPrimitiveArrayRegion&lt;jlongArray,jlong,mirror::LongArray&gt;" {  
-"19623" [label = <(METHOD,GetPrimitiveArrayRegion&lt;jlongArray,jlong,mirror::LongArray&gt;)> ]
-"19630" [label = <(METHOD_RETURN,ANY)> ]
-  "19623" -> "19630" 
+digraph "UNUSED" {  
+"19305" [label = <(METHOD,UNUSED)> ]
+"19308" [label = <(METHOD_RETURN,ANY)> ]
+  "19305" -> "19308" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/596-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/596-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/596-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/596-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "GetPrimitiveArrayRegion&lt;jshortArray,jshort,mirror::ShortArray&gt;" {  
-"19631" [label = <(METHOD,GetPrimitiveArrayRegion&lt;jshortArray,jshort,mirror::ShortArray&gt;)> ]
-"19638" [label = <(METHOD_RETURN,ANY)> ]
-  "19631" -> "19638" 
+digraph "CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_ERR)" {  
+"19309" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_ERR))> ]
+"19314" [label = <(METHOD_RETURN,ANY)> ]
+  "19309" -> "19314" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/597-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/597-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/597-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/597-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "SetPrimitiveArrayRegion&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;" {  
-"19639" [label = <(METHOD,SetPrimitiveArrayRegion&lt;jbooleanArray,jboolean,mirror::BooleanArray&gt;)> ]
-"19646" [label = <(METHOD_RETURN,ANY)> ]
-  "19639" -> "19646" 
+digraph "mirror::Class::PrettyClass" {  
+"19315" [label = <(METHOD,mirror::Class::PrettyClass)> ]
+"19319" [label = <(METHOD_RETURN,ANY)> ]
+  "19315" -> "19319" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/598-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/598-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/598-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/598-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "SetPrimitiveArrayRegion&lt;jbyteArray,jbyte,mirror::ByteArray&gt;" {  
-"19647" [label = <(METHOD,SetPrimitiveArrayRegion&lt;jbyteArray,jbyte,mirror::ByteArray&gt;)> ]
-"19654" [label = <(METHOD_RETURN,ANY)> ]
-  "19647" -> "19654" 
+digraph "GetMethods" {  
+"19320" [label = <(METHOD,GetMethods)> ]
+"19324" [label = <(METHOD_RETURN,ANY)> ]
+  "19320" -> "19324" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/599-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/599-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/599-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/599-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "SetPrimitiveArrayRegion&lt;jcharArray,jchar,mirror::CharArray&gt;" {  
-"19655" [label = <(METHOD,SetPrimitiveArrayRegion&lt;jcharArray,jchar,mirror::CharArray&gt;)> ]
-"19662" [label = <(METHOD_RETURN,ANY)> ]
-  "19655" -> "19662" 
+digraph "UnregisterNative" {  
+"19325" [label = <(METHOD,UnregisterNative)> ]
+"19328" [label = <(METHOD_RETURN,ANY)> ]
+  "19325" -> "19328" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/6-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/6-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/6-cfg.dot	2023-06-07 19:35:28.207384350 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/6-cfg.dot	2023-06-07 19:35:34.737383779 +0330
@@ -1,5 +1,11 @@
-digraph "ScopedVAArgs" {  
-"35" [label = <(METHOD,ScopedVAArgs)<SUB>81</SUB>> ]
-"38" [label = <(METHOD_RETURN,ANY)<SUB>81</SUB>> ]
-  "35" -> "38" 
+digraph "&lt;clinit&gt;" {  
+"76" [label = <(&lt;operator&gt;.assignment,kRuntime = 0)<SUB>99</SUB>> ]
+"79" [label = <(&lt;operator&gt;.assignment,kApexModule = 1)<SUB>100</SUB>> ]
+"82" [label = <(&lt;operator&gt;.assignment,kOther = 2)<SUB>101</SUB>> ]
+"74" [label = <(METHOD,&lt;clinit&gt;)> ]
+"86" [label = <(METHOD_RETURN,ANY)> ]
+  "76" -> "79" 
+  "79" -> "82" 
+  "82" -> "86" 
+  "74" -> "76" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/60-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/60-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/60-cfg.dot	2023-06-07 19:35:28.247384345 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/60-cfg.dot	2023-06-07 19:35:34.767383776 +0330
@@ -1,29 +1,43 @@
-digraph "DeleteGlobalRef" {  
-"2095" [label = <(&lt;operator&gt;.assignment,* vm = down_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm())<SUB>922</SUB>> ]
-"2103" [label = <(&lt;operator&gt;.assignment,* self = down_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_)<SUB>923</SUB>> ]
-"2109" [label = <(DeleteGlobalRef,vm-&gt;DeleteGlobalRef(self, obj))<SUB>924</SUB>> ]
-"2097" [label = <(GetVm,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm())<SUB>922</SUB>> ]
-"2105" [label = <(&lt;operator&gt;.indirectFieldAccess,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_)<SUB>923</SUB>> ]
-"2110" [label = <(&lt;operator&gt;.indirectFieldAccess,vm-&gt;DeleteGlobalRef)<SUB>924</SUB>> ]
-"2098" [label = <(&lt;operator&gt;.indirectFieldAccess,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm)<SUB>922</SUB>> ]
-"2106" [label = <(down_cast&lt;JNIEnvExt*&gt;,down_cast&lt;JNIEnvExt*&gt;(env))<SUB>923</SUB>> ]
-"2108" [label = <(FIELD_IDENTIFIER,self_,self_)<SUB>923</SUB>> ]
-"2112" [label = <(FIELD_IDENTIFIER,DeleteGlobalRef,DeleteGlobalRef)<SUB>924</SUB>> ]
-"2099" [label = <(down_cast&lt;JNIEnvExt*&gt;,down_cast&lt;JNIEnvExt*&gt;(env))<SUB>922</SUB>> ]
-"2101" [label = <(FIELD_IDENTIFIER,GetVm,GetVm)<SUB>922</SUB>> ]
-"2090" [label = <(METHOD,DeleteGlobalRef)<SUB>921</SUB>> ]
-"2115" [label = <(METHOD_RETURN,void)<SUB>921</SUB>> ]
-  "2095" -> "2106" 
-  "2103" -> "2112" 
-  "2109" -> "2115" 
-  "2097" -> "2095" 
-  "2105" -> "2103" 
-  "2110" -> "2109" 
-  "2098" -> "2097" 
-  "2106" -> "2108" 
-  "2108" -> "2105" 
-  "2112" -> "2110" 
-  "2099" -> "2101" 
-  "2101" -> "2098" 
-  "2090" -> "2099" 
+digraph "DeleteLocalRef" {  
+"2042" [label = <(soa,soa(env))<SUB>878</SUB>> ]
+"2045" [label = <(&lt;operator&gt;.assignment,* ext_env = down_cast&lt;JNIEnvExt*&gt;(env))<SUB>879</SUB>> ]
+"2036" [label = <(&lt;operator&gt;.equals,obj == nullptr)<SUB>872</SUB>> ]
+"2047" [label = <(down_cast&lt;JNIEnvExt*&gt;,down_cast&lt;JNIEnvExt*&gt;(env))<SUB>879</SUB>> ]
+"2050" [label = <(&lt;operator&gt;.logicalNot,!ext_env-&gt;locals_.Remove(ext_env-&gt;local_ref_cookie_, obj))<SUB>880</SUB>> ]
+"2040" [label = <(RETURN,return;,return;)<SUB>873</SUB>> ]
+"2051" [label = <(Remove,ext_env-&gt;locals_.Remove(ext_env-&gt;local_ref_cookie_, obj))<SUB>880</SUB>> ]
+"2062" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI WARNING: DeleteLocalRef(&quot; &lt;&lt; obj &lt;&lt; &quot;) &quot;\012 &lt;&lt; &quot;failed to find entry&quot;)<SUB>886</SUB>> ]
+"2052" [label = <(&lt;operator&gt;.fieldAccess,ext_env-&gt;locals_.Remove)<SUB>880</SUB>> ]
+"2057" [label = <(&lt;operator&gt;.indirectFieldAccess,ext_env-&gt;local_ref_cookie_)<SUB>880</SUB>> ]
+"2063" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI WARNING: DeleteLocalRef(&quot; &lt;&lt; obj &lt;&lt; &quot;) &quot;)<SUB>886</SUB>> ]
+"2053" [label = <(&lt;operator&gt;.indirectFieldAccess,ext_env-&gt;locals_)<SUB>880</SUB>> ]
+"2056" [label = <(FIELD_IDENTIFIER,Remove,Remove)<SUB>880</SUB>> ]
+"2059" [label = <(FIELD_IDENTIFIER,local_ref_cookie_,local_ref_cookie_)<SUB>880</SUB>> ]
+"2064" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI WARNING: DeleteLocalRef(&quot; &lt;&lt; obj)<SUB>886</SUB>> ]
+"2055" [label = <(FIELD_IDENTIFIER,locals_,locals_)<SUB>880</SUB>> ]
+"2065" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI WARNING: DeleteLocalRef(&quot;)<SUB>886</SUB>> ]
+"2066" [label = <(LOG,LOG(WARNING))<SUB>886</SUB>> ]
+"2031" [label = <(METHOD,DeleteLocalRef)<SUB>871</SUB>> ]
+"2072" [label = <(METHOD_RETURN,void)<SUB>871</SUB>> ]
+  "2042" -> "2047" 
+  "2045" -> "2055" 
+  "2036" -> "2040" 
+  "2036" -> "2042" 
+  "2047" -> "2045" 
+  "2050" -> "2072" 
+  "2050" -> "2066" 
+  "2040" -> "2072" 
+  "2051" -> "2050" 
+  "2062" -> "2072" 
+  "2052" -> "2059" 
+  "2057" -> "2051" 
+  "2063" -> "2062" 
+  "2053" -> "2056" 
+  "2056" -> "2052" 
+  "2059" -> "2057" 
+  "2064" -> "2063" 
+  "2055" -> "2053" 
+  "2065" -> "2064" 
+  "2066" -> "2065" 
+  "2031" -> "2036" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/600-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/600-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/600-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/600-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "SetPrimitiveArrayRegion&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;" {  
-"19663" [label = <(METHOD,SetPrimitiveArrayRegion&lt;jdoubleArray,jdouble,mirror::DoubleArray&gt;)> ]
-"19670" [label = <(METHOD_RETURN,ANY)> ]
-  "19663" -> "19670" 
+digraph "&lt;operator&gt;.postIncrement" {  
+"19329" [label = <(METHOD,&lt;operator&gt;.postIncrement)> ]
+"19332" [label = <(METHOD_RETURN,ANY)> ]
+  "19329" -> "19332" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/601-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/601-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/601-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/601-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "SetPrimitiveArrayRegion&lt;jfloatArray,jfloat,mirror::FloatArray&gt;" {  
-"19671" [label = <(METHOD,SetPrimitiveArrayRegion&lt;jfloatArray,jfloat,mirror::FloatArray&gt;)> ]
-"19678" [label = <(METHOD_RETURN,ANY)> ]
-  "19671" -> "19678" 
+digraph "CHECK_NON_NULL_ARGUMENT_RETURN(vm, JNI_ERR)" {  
+"19333" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN(vm, JNI_ERR))> ]
+"19338" [label = <(METHOD_RETURN,ANY)> ]
+  "19333" -> "19338" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/602-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/602-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/602-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/602-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "SetPrimitiveArrayRegion&lt;jintArray,jint,mirror::IntArray&gt;" {  
-"19679" [label = <(METHOD,SetPrimitiveArrayRegion&lt;jintArray,jint,mirror::IntArray&gt;)> ]
-"19686" [label = <(METHOD_RETURN,ANY)> ]
-  "19679" -> "19686" 
+digraph "GetJavaVM" {  
+"19339" [label = <(METHOD,GetJavaVM)> ]
+"19342" [label = <(METHOD_RETURN,ANY)> ]
+  "19339" -> "19342" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/603-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/603-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/603-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/603-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "SetPrimitiveArrayRegion&lt;jlongArray,jlong,mirror::LongArray&gt;" {  
-"19687" [label = <(METHOD,SetPrimitiveArrayRegion&lt;jlongArray,jlong,mirror::LongArray&gt;)> ]
-"19694" [label = <(METHOD_RETURN,ANY)> ]
-  "19687" -> "19694" 
+digraph "NewObject" {  
+"19343" [label = <(METHOD,NewObject)> ]
+"19348" [label = <(METHOD_RETURN,ANY)> ]
+  "19343" -> "19348" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/604-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/604-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/604-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/604-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "SetPrimitiveArrayRegion&lt;jshortArray,jshort,mirror::ShortArray&gt;" {  
-"19695" [label = <(METHOD,SetPrimitiveArrayRegion&lt;jshortArray,jshort,mirror::ShortArray&gt;)> ]
-"19702" [label = <(METHOD_RETURN,ANY)> ]
-  "19695" -> "19702" 
+digraph "GetLongField" {  
+"19349" [label = <(METHOD,GetLongField)> ]
+"19354" [label = <(METHOD_RETURN,ANY)> ]
+  "19349" -> "19354" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/605-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/605-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/605-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/605-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_FN_NAME" {  
-"19703" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_FN_NAME)<SUB>695</SUB>> ]
-"19708" [label = <(METHOD_RETURN,ANY)> ]
-  "19703" -> "19708" 
+digraph "GetIntField" {  
+"19355" [label = <(METHOD,GetIntField)> ]
+"19360" [label = <(METHOD_RETURN,ANY)> ]
+  "19355" -> "19360" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/606-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/606-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/606-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/606-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, java_class, JNI_ERR)" {  
-"19709" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, java_class, JNI_ERR))> ]
-"19714" [label = <(METHOD_RETURN,ANY)> ]
-  "19709" -> "19714" 
+digraph "ArtT::Alloc" {  
+"19361" [label = <(METHOD,ArtT::Alloc)> ]
+"19366" [label = <(METHOD_RETURN,ANY)> ]
+  "19361" -> "19366" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/607-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/607-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/607-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/607-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, methods, JNI_ERR)" {  
-"19715" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_FN_NAME(&quot;RegisterNatives&quot;, methods, JNI_ERR))> ]
-"19720" [label = <(METHOD_RETURN,ANY)> ]
-  "19715" -> "19720" 
+digraph "GetClassRoot&lt;ArtArrayT&gt;" {  
+"19367" [label = <(METHOD,GetClassRoot&lt;ArtArrayT&gt;)> ]
+"19369" [label = <(METHOD_RETURN,ANY)> ]
+  "19367" -> "19369" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/608-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/608-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/608-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/608-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "IsCheckJniEnabled" {  
-"19721" [label = <(METHOD,IsCheckJniEnabled)> ]
-"19724" [label = <(METHOD_RETURN,ANY)> ]
-  "19721" -> "19724" 
+digraph "DecodeAndCheckArrayType&lt;ArrayT,ElementT,ArtArrayT&gt;" {  
+"19370" [label = <(METHOD,DecodeAndCheckArrayType&lt;ArrayT,ElementT,ArtArrayT&gt;)> ]
+"19376" [label = <(METHOD_RETURN,ANY)> ]
+  "19370" -> "19376" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/609-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/609-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/609-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/609-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "DumpClass" {  
-"19725" [label = <(METHOD,DumpClass)> ]
-"19730" [label = <(METHOD_RETURN,ANY)> ]
-  "19725" -> "19730" 
+digraph "GetData" {  
+"19377" [label = <(METHOD,GetData)> ]
+"19380" [label = <(METHOD_RETURN,ANY)> ]
+  "19377" -> "19380" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/61-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/61-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/61-cfg.dot	2023-06-07 19:35:28.247384345 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/61-cfg.dot	2023-06-07 19:35:34.767383776 +0330
@@ -1,49 +1,42 @@
-digraph "NewWeakGlobalRef" {  
-"2122" [label = <(soa,soa(env))<SUB>928</SUB>> ]
-"2124" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; decoded_obj = soa.Decode&lt;mirror::Object&gt;(obj))<SUB>929</SUB>> ]
-"2141" [label = <(RETURN,return soa.Vm()-&gt;AddWeakGlobalRef(soa.Self(), decoded_obj);,return soa.Vm()-&gt;AddWeakGlobalRef(soa.Self(), decoded_obj);)<SUB>930</SUB>> ]
-"2125" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; decoded_obj)<SUB>929</SUB>> ]
-"2132" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(obj))<SUB>929</SUB>> ]
-"2142" [label = <(AddWeakGlobalRef,soa.Vm()-&gt;AddWeakGlobalRef(soa.Self(), decoded_obj))<SUB>930</SUB>> ]
-"2126" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>929</SUB>> ]
-"2133" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>929</SUB>> ]
-"2143" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Vm()-&gt;AddWeakGlobalRef)<SUB>930</SUB>> ]
-"2149" [label = <(Self,soa.Self())<SUB>930</SUB>> ]
-"2128" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>929</SUB>> ]
-"2134" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>929</SUB>> ]
-"2137" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>929</SUB>> ]
-"2144" [label = <(Vm,soa.Vm())<SUB>930</SUB>> ]
-"2148" [label = <(FIELD_IDENTIFIER,AddWeakGlobalRef,AddWeakGlobalRef)<SUB>930</SUB>> ]
-"2150" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>930</SUB>> ]
-"2130" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>929</SUB>> ]
-"2136" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>929</SUB>> ]
-"2139" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>929</SUB>> ]
-"2145" [label = <(&lt;operator&gt;.fieldAccess,soa.Vm)<SUB>930</SUB>> ]
-"2152" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>930</SUB>> ]
-"2147" [label = <(FIELD_IDENTIFIER,Vm,Vm)<SUB>930</SUB>> ]
-"2117" [label = <(METHOD,NewWeakGlobalRef)<SUB>927</SUB>> ]
-"2154" [label = <(METHOD_RETURN,jweak)<SUB>927</SUB>> ]
-  "2122" -> "2130" 
-  "2124" -> "2147" 
-  "2141" -> "2154" 
-  "2125" -> "2136" 
-  "2132" -> "2124" 
-  "2142" -> "2141" 
-  "2126" -> "2125" 
-  "2133" -> "2132" 
-  "2143" -> "2152" 
-  "2149" -> "2142" 
-  "2128" -> "2126" 
-  "2134" -> "2139" 
-  "2137" -> "2133" 
-  "2144" -> "2148" 
-  "2148" -> "2143" 
-  "2150" -> "2149" 
-  "2130" -> "2128" 
-  "2136" -> "2134" 
-  "2139" -> "2137" 
-  "2145" -> "2144" 
-  "2152" -> "2150" 
-  "2147" -> "2145" 
-  "2117" -> "2122" 
+digraph "IsSameObject" {  
+"2080" [label = <(&lt;operator&gt;.equals,obj1 == obj2)<SUB>892</SUB>> ]
+"2084" [label = <(RETURN,return JNI_TRUE;,return JNI_TRUE;)<SUB>893</SUB>> ]
+"2089" [label = <(soa,soa(env))<SUB>895</SUB>> ]
+"2091" [label = <(RETURN,return (soa.Decode&lt;mirror::Object&gt;(obj1) == soa.Decode&lt;mirror::Object&gt;(obj2))\012 ? JNI_TRUE : JNI_FALSE;,return (soa.Decode&lt;mirror::Object&gt;(obj1) == soa.Decode&lt;mirror::Object&gt;(obj2))\012 ? JNI_TRUE : JNI_FALSE;)<SUB>896</SUB>> ]
+"2092" [label = <(&lt;operator&gt;.conditional,(soa.Decode&lt;mirror::Object&gt;(obj1) == soa.Decode&lt;mirror::Object&gt;(obj2))\012 ? JNI_TRUE : JNI_FALSE)<SUB>896</SUB>> ]
+"2093" [label = <(&lt;operator&gt;.equals,soa.Decode&lt;mirror::Object&gt;(obj1) == soa.Decode&lt;mirror::Object&gt;(obj2))<SUB>896</SUB>> ]
+"2094" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(obj1))<SUB>896</SUB>> ]
+"2103" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(obj2))<SUB>896</SUB>> ]
+"2095" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>896</SUB>> ]
+"2104" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>896</SUB>> ]
+"2096" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>896</SUB>> ]
+"2099" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>896</SUB>> ]
+"2105" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>896</SUB>> ]
+"2108" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>896</SUB>> ]
+"2098" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>896</SUB>> ]
+"2101" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>896</SUB>> ]
+"2107" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>896</SUB>> ]
+"2110" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>896</SUB>> ]
+"2074" [label = <(METHOD,IsSameObject)<SUB>891</SUB>> ]
+"2114" [label = <(METHOD_RETURN,jboolean)<SUB>891</SUB>> ]
+  "2080" -> "2084" 
+  "2080" -> "2089" 
+  "2084" -> "2114" 
+  "2089" -> "2098" 
+  "2091" -> "2114" 
+  "2092" -> "2091" 
+  "2093" -> "2092" 
+  "2094" -> "2107" 
+  "2103" -> "2093" 
+  "2095" -> "2094" 
+  "2104" -> "2103" 
+  "2096" -> "2101" 
+  "2099" -> "2095" 
+  "2105" -> "2110" 
+  "2108" -> "2104" 
+  "2098" -> "2096" 
+  "2101" -> "2099" 
+  "2107" -> "2105" 
+  "2110" -> "2108" 
+  "2074" -> "2080" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/610-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/610-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/610-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/610-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "LOG_STREAM" {  
-"19731" [label = <(METHOD,LOG_STREAM)> ]
-"19734" [label = <(METHOD_RETURN,ANY)> ]
-  "19731" -> "19734" 
+digraph "DecodeAndCheckArrayType&lt;JArrayT,ElementT,ArtArrayT&gt;" {  
+"19381" [label = <(METHOD,DecodeAndCheckArrayType&lt;JArrayT,ElementT,ArtArrayT&gt;)> ]
+"19387" [label = <(METHOD_RETURN,ANY)> ]
+  "19381" -> "19387" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/611-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/611-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/611-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/611-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "ToModifiedUtf8" {  
-"19735" [label = <(METHOD,ToModifiedUtf8)> ]
-"19738" [label = <(METHOD_RETURN,ANY)> ]
-  "19735" -> "19738" 
+digraph "&lt;operator&gt;.arrayInitializer" {  
+"19388" [label = <(METHOD,&lt;operator&gt;.arrayInitializer)> ]
+"19393" [label = <(METHOD_RETURN,ANY)> ]
+  "19388" -> "19393" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/612-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/612-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/612-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/612-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "GetLocation" {  
-"19739" [label = <(METHOD,GetLocation)> ]
-"19742" [label = <(METHOD_RETURN,ANY)> ]
-  "19739" -> "19742" 
+digraph "HasCache" {  
+"19394" [label = <(METHOD,HasCache)> ]
+"19397" [label = <(METHOD_RETURN,ANY)> ]
+  "19394" -> "19397" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/613-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/613-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/613-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/613-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "GetDexCache" {  
-"19743" [label = <(METHOD,GetDexCache)> ]
-"19746" [label = <(METHOD_RETURN,ANY)> ]
-  "19743" -> "19746" 
+digraph "BuildCache" {  
+"19398" [label = <(METHOD,BuildCache)> ]
+"19401" [label = <(METHOD_RETURN,ANY)> ]
+  "19398" -> "19401" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/614-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/614-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/614-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/614-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "IsNative" {  
-"19747" [label = <(METHOD,IsNative)> ]
-"19750" [label = <(METHOD_RETURN,ANY)> ]
-  "19747" -> "19750" 
+digraph "DropCache" {  
+"19402" [label = <(METHOD,DropCache)> ]
+"19405" [label = <(METHOD_RETURN,ANY)> ]
+  "19402" -> "19405" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/615-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/615-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/615-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/615-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "VLOG" {  
-"19751" [label = <(METHOD,VLOG)> ]
-"19754" [label = <(METHOD_RETURN,ANY)> ]
-  "19751" -> "19754" 
+digraph "UNREACHABLE" {  
+"19406" [label = <(METHOD,UNREACHABLE)> ]
+"19408" [label = <(METHOD_RETURN,ANY)> ]
+  "19406" -> "19408" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/616-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/616-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/616-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/616-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "PrettyMethod" {  
-"19755" [label = <(METHOD,PrettyMethod)> ]
-"19758" [label = <(METHOD_RETURN,ANY)> ]
-  "19755" -> "19758" 
+digraph "CommonRuntimeTest::SetUp" {  
+"19409" [label = <(METHOD,CommonRuntimeTest::SetUp)> ]
+"19412" [label = <(METHOD_RETURN,ANY)> ]
+  "19409" -> "19412" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/617-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/617-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/617-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/617-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "RegisterNative" {  
-"19759" [label = <(METHOD,RegisterNative)> ]
-"19763" [label = <(METHOD_RETURN,ANY)> ]
-  "19759" -> "19763" 
+digraph "AttachCurrentThread" {  
+"19413" [label = <(METHOD,AttachCurrentThread)> ]
+"19418" [label = <(METHOD_RETURN,ANY)> ]
+  "19413" -> "19418" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/618-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/618-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/618-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/618-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "UNUSED" {  
-"19764" [label = <(METHOD,UNUSED)> ]
-"19767" [label = <(METHOD_RETURN,ANY)> ]
-  "19764" -> "19767" 
+digraph "aioobe" {  
+"19419" [label = <(METHOD,aioobe)> ]
+"19423" [label = <(METHOD_RETURN,ANY)> ]
+  "19419" -> "19423" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/619-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/619-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/619-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/619-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_ERR)" {  
-"19768" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN(java_class, JNI_ERR))> ]
-"19773" [label = <(METHOD_RETURN,ANY)> ]
-  "19768" -> "19773" 
+digraph "NewGlobalRef" {  
+"19424" [label = <(METHOD,NewGlobalRef)> ]
+"19429" [label = <(METHOD_RETURN,ANY)> ]
+  "19424" -> "19429" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/62-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/62-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/62-cfg.dot	2023-06-07 19:35:28.247384345 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/62-cfg.dot	2023-06-07 19:35:34.777383774 +0330
@@ -1,29 +1,139 @@
-digraph "DeleteWeakGlobalRef" {  
-"2161" [label = <(&lt;operator&gt;.assignment,* vm = down_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm())<SUB>934</SUB>> ]
-"2169" [label = <(&lt;operator&gt;.assignment,* self = down_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_)<SUB>935</SUB>> ]
-"2175" [label = <(DeleteWeakGlobalRef,vm-&gt;DeleteWeakGlobalRef(self, obj))<SUB>936</SUB>> ]
-"2163" [label = <(GetVm,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm())<SUB>934</SUB>> ]
-"2171" [label = <(&lt;operator&gt;.indirectFieldAccess,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;self_)<SUB>935</SUB>> ]
-"2176" [label = <(&lt;operator&gt;.indirectFieldAccess,vm-&gt;DeleteWeakGlobalRef)<SUB>936</SUB>> ]
-"2164" [label = <(&lt;operator&gt;.indirectFieldAccess,down_cast&lt;JNIEnvExt*&gt;(env)-&gt;GetVm)<SUB>934</SUB>> ]
-"2172" [label = <(down_cast&lt;JNIEnvExt*&gt;,down_cast&lt;JNIEnvExt*&gt;(env))<SUB>935</SUB>> ]
-"2174" [label = <(FIELD_IDENTIFIER,self_,self_)<SUB>935</SUB>> ]
-"2178" [label = <(FIELD_IDENTIFIER,DeleteWeakGlobalRef,DeleteWeakGlobalRef)<SUB>936</SUB>> ]
-"2165" [label = <(down_cast&lt;JNIEnvExt*&gt;,down_cast&lt;JNIEnvExt*&gt;(env))<SUB>934</SUB>> ]
-"2167" [label = <(FIELD_IDENTIFIER,GetVm,GetVm)<SUB>934</SUB>> ]
-"2156" [label = <(METHOD,DeleteWeakGlobalRef)<SUB>933</SUB>> ]
-"2181" [label = <(METHOD_RETURN,void)<SUB>933</SUB>> ]
-  "2161" -> "2172" 
-  "2169" -> "2178" 
-  "2175" -> "2181" 
-  "2163" -> "2161" 
-  "2171" -> "2169" 
-  "2176" -> "2175" 
-  "2164" -> "2163" 
-  "2172" -> "2174" 
-  "2174" -> "2171" 
-  "2178" -> "2176" 
-  "2165" -> "2167" 
-  "2167" -> "2164" 
-  "2156" -> "2165" 
+digraph "AllocObject" {  
+"2120" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_class))<SUB>902</SUB>> ]
+"2139" [label = <(soa,soa(env))<SUB>903</SUB>> ]
+"2141" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c = EnsureInitialized(soa.Self(), soa.Decode&lt;mirror::Class&gt;(java_class)))<SUB>904</SUB>> ]
+"2211" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(c-&gt;AllocObject(soa.Self()));,return soa.AddLocalReference&lt;jobject&gt;(c-&gt;AllocObject(soa.Self()));)<SUB>913</SUB>> ]
+"2142" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c)<SUB>904</SUB>> ]
+"2149" [label = <(EnsureInitialized,EnsureInitialized(soa.Self(), soa.Decode&lt;mirror::Class&gt;(java_class)))<SUB>904</SUB>> ]
+"2164" [label = <(&lt;operator&gt;.equals,c == nullptr)<SUB>905</SUB>> ]
+"2171" [label = <(IsStringClass,c-&gt;IsStringClass())<SUB>908</SUB>> ]
+"2212" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(c-&gt;AllocObject(soa.Self())))<SUB>913</SUB>> ]
+"2143" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>904</SUB>> ]
+"2150" [label = <(Self,soa.Self())<SUB>904</SUB>> ]
+"2154" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>904</SUB>> ]
+"2168" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>906</SUB>> ]
+"2172" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;IsStringClass)<SUB>908</SUB>> ]
+"2177" [label = <(&lt;operator&gt;.assignment,allocator_type = Runtime::Current()-&gt;GetHeap()-&gt;GetCurrentAllocator())<SUB>909</SUB>> ]
+"2189" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(mirror::String::AllocEmptyString&lt;true&gt;(soa.Self(),\012                                                                              allocator_type));,return soa.AddLocalReference&lt;jobject&gt;(mirror::String::AllocEmptyString&lt;true&gt;(soa.Self(),\012                                                                              allocator_type));)<SUB>910</SUB>> ]
+"2213" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>913</SUB>> ]
+"2218" [label = <(AllocObject,c-&gt;AllocObject(soa.Self()))<SUB>913</SUB>> ]
+"2124" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>902</SUB>> ]
+"2145" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>904</SUB>> ]
+"2151" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>904</SUB>> ]
+"2155" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>904</SUB>> ]
+"2174" [label = <(FIELD_IDENTIFIER,IsStringClass,IsStringClass)<SUB>908</SUB>> ]
+"2179" [label = <(GetCurrentAllocator,Runtime::Current()-&gt;GetHeap()-&gt;GetCurrentAllocator())<SUB>909</SUB>> ]
+"2190" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(mirror::String::AllocEmptyString&lt;true&gt;(soa.Self(),\012                                                                              allocator_type)))<SUB>910</SUB>> ]
+"2214" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>913</SUB>> ]
+"2219" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;AllocObject)<SUB>913</SUB>> ]
+"2222" [label = <(Self,soa.Self())<SUB>913</SUB>> ]
+"2125" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>902</SUB>> ]
+"2129" [label = <(CHECK_NON_NULL_ARGUMENT(java_class),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class == null&quot;))<SUB>902</SUB>> ]
+"2136" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_class),CHECK_NON_NULL_ARGUMENT(java_class))<SUB>902</SUB>> ]
+"2147" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>904</SUB>> ]
+"2153" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>904</SUB>> ]
+"2156" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>904</SUB>> ]
+"2159" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>904</SUB>> ]
+"2180" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetHeap()-&gt;GetCurrentAllocator)<SUB>909</SUB>> ]
+"2191" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>910</SUB>> ]
+"2196" [label = <(&lt;operator&gt;.greaterThan,mirror::String::AllocEmptyString&lt;true&gt;(soa.Self(),\012                                                                              allocator_type))<SUB>910</SUB>> ]
+"2216" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>913</SUB>> ]
+"2221" [label = <(FIELD_IDENTIFIER,AllocObject,AllocObject)<SUB>913</SUB>> ]
+"2223" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>913</SUB>> ]
+"2130" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>902</SUB>> ]
+"2158" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>904</SUB>> ]
+"2161" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>904</SUB>> ]
+"2181" [label = <(GetHeap,Runtime::Current()-&gt;GetHeap())<SUB>909</SUB>> ]
+"2188" [label = <(FIELD_IDENTIFIER,GetCurrentAllocator,GetCurrentAllocator)<SUB>909</SUB>> ]
+"2192" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>910</SUB>> ]
+"2197" [label = <(&lt;operator&gt;.lessThan,mirror::String::AllocEmptyString&lt;true)<SUB>910</SUB>> ]
+"2204" [label = <(&lt;operator&gt;.bracketedPrimary,(soa.Self(),\012                                                                              allocator_type))<SUB>910</SUB>> ]
+"2225" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>913</SUB>> ]
+"2131" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>902</SUB>> ]
+"2133" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>902</SUB>> ]
+"2182" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetHeap)<SUB>909</SUB>> ]
+"2194" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>910</SUB>> ]
+"2198" [label = <(&lt;operator&gt;.fieldAccess,mirror::String::AllocEmptyString)<SUB>910</SUB>> ]
+"2205" [label = <(&lt;operator&gt;.expressionList,soa.Self(),\012                                                                              allocator_type)<SUB>910</SUB>> ]
+"2183" [label = <(Runtime::Current,Runtime::Current())<SUB>909</SUB>> ]
+"2187" [label = <(FIELD_IDENTIFIER,GetHeap,GetHeap)<SUB>909</SUB>> ]
+"2199" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>910</SUB>> ]
+"2202" [label = <(FIELD_IDENTIFIER,AllocEmptyString,AllocEmptyString)<SUB>910</SUB>> ]
+"2206" [label = <(Self,soa.Self())<SUB>910</SUB>> ]
+"2184" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>909</SUB>> ]
+"2207" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>910</SUB>> ]
+"2186" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>909</SUB>> ]
+"2209" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>910</SUB>> ]
+"2116" [label = <(METHOD,AllocObject)<SUB>901</SUB>> ]
+"2226" [label = <(METHOD_RETURN,jobject)<SUB>901</SUB>> ]
+  "2120" -> "2125" 
+  "2120" -> "2139" 
+  "2139" -> "2147" 
+  "2141" -> "2164" 
+  "2211" -> "2226" 
+  "2142" -> "2153" 
+  "2149" -> "2141" 
+  "2164" -> "2168" 
+  "2164" -> "2174" 
+  "2171" -> "2186" 
+  "2171" -> "2216" 
+  "2212" -> "2211" 
+  "2143" -> "2142" 
+  "2150" -> "2158" 
+  "2154" -> "2149" 
+  "2168" -> "2226" 
+  "2172" -> "2171" 
+  "2177" -> "2194" 
+  "2189" -> "2226" 
+  "2213" -> "2221" 
+  "2218" -> "2212" 
+  "2124" -> "2131" 
+  "2124" -> "2139" 
+  "2145" -> "2143" 
+  "2151" -> "2150" 
+  "2155" -> "2154" 
+  "2174" -> "2172" 
+  "2179" -> "2177" 
+  "2190" -> "2189" 
+  "2214" -> "2213" 
+  "2219" -> "2225" 
+  "2222" -> "2218" 
+  "2125" -> "2124" 
+  "2129" -> "2136" 
+  "2136" -> "2226" 
+  "2147" -> "2145" 
+  "2153" -> "2151" 
+  "2156" -> "2161" 
+  "2159" -> "2155" 
+  "2180" -> "2179" 
+  "2191" -> "2199" 
+  "2196" -> "2190" 
+  "2216" -> "2214" 
+  "2221" -> "2219" 
+  "2223" -> "2222" 
+  "2130" -> "2129" 
+  "2158" -> "2156" 
+  "2161" -> "2159" 
+  "2181" -> "2188" 
+  "2188" -> "2180" 
+  "2192" -> "2191" 
+  "2197" -> "2209" 
+  "2204" -> "2196" 
+  "2225" -> "2223" 
+  "2131" -> "2133" 
+  "2133" -> "2130" 
+  "2182" -> "2181" 
+  "2194" -> "2192" 
+  "2198" -> "2197" 
+  "2205" -> "2204" 
+  "2183" -> "2187" 
+  "2187" -> "2182" 
+  "2199" -> "2202" 
+  "2202" -> "2198" 
+  "2206" -> "2205" 
+  "2184" -> "2183" 
+  "2207" -> "2206" 
+  "2186" -> "2184" 
+  "2209" -> "2207" 
+  "2116" -> "2120" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/620-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/620-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/620-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/620-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "mirror::Class::PrettyClass" {  
-"19774" [label = <(METHOD,mirror::Class::PrettyClass)> ]
-"19778" [label = <(METHOD_RETURN,ANY)> ]
-  "19774" -> "19778" 
+digraph "ase" {  
+"19430" [label = <(METHOD,ase)> ]
+"19434" [label = <(METHOD_RETURN,ANY)> ]
+  "19430" -> "19434" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/621-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/621-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/621-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/621-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "GetMethods" {  
-"19779" [label = <(METHOD,GetMethods)> ]
-"19783" [label = <(METHOD_RETURN,ANY)> ]
-  "19779" -> "19783" 
+digraph "sioobe" {  
+"19435" [label = <(METHOD,sioobe)> ]
+"19439" [label = <(METHOD_RETURN,ANY)> ]
+  "19435" -> "19439" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/622-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/622-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/622-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/622-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "UnregisterNative" {  
-"19784" [label = <(METHOD,UnregisterNative)> ]
-"19787" [label = <(METHOD_RETURN,ANY)> ]
-  "19784" -> "19787" 
+digraph "EXPECT_TRUE" {  
+"19440" [label = <(METHOD,EXPECT_TRUE)> ]
+"19443" [label = <(METHOD_RETURN,ANY)> ]
+  "19440" -> "19443" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/623-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/623-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/623-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/623-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.postIncrement" {  
-"19788" [label = <(METHOD,&lt;operator&gt;.postIncrement)> ]
-"19791" [label = <(METHOD_RETURN,ANY)> ]
-  "19788" -> "19791" 
+digraph "ExceptionCheck" {  
+"19444" [label = <(METHOD,ExceptionCheck)> ]
+"19447" [label = <(METHOD_RETURN,ANY)> ]
+  "19444" -> "19447" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/624-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/624-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/624-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/624-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "CHECK_NON_NULL_ARGUMENT_RETURN(vm, JNI_ERR)" {  
-"19792" [label = <(METHOD,CHECK_NON_NULL_ARGUMENT_RETURN(vm, JNI_ERR))> ]
-"19797" [label = <(METHOD_RETURN,ANY)> ]
-  "19792" -> "19797" 
+digraph "ExceptionOccurred" {  
+"19448" [label = <(METHOD,ExceptionOccurred)> ]
+"19451" [label = <(METHOD_RETURN,ANY)> ]
+  "19448" -> "19451" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/625-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/625-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/625-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/625-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "GetJavaVM" {  
-"19798" [label = <(METHOD,GetJavaVM)> ]
-"19801" [label = <(METHOD_RETURN,ANY)> ]
-  "19798" -> "19801" 
+digraph "EXPECT_NE" {  
+"19452" [label = <(METHOD,EXPECT_NE)> ]
+"19456" [label = <(METHOD_RETURN,ANY)> ]
+  "19452" -> "19456" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/626-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/626-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/626-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/626-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "NewObject" {  
-"19802" [label = <(METHOD,NewObject)> ]
-"19807" [label = <(METHOD_RETURN,ANY)> ]
-  "19802" -> "19807" 
+digraph "ExceptionClear" {  
+"19457" [label = <(METHOD,ExceptionClear)> ]
+"19460" [label = <(METHOD_RETURN,ANY)> ]
+  "19457" -> "19460" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/627-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/627-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/627-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/627-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "GetLongField" {  
-"19808" [label = <(METHOD,GetLongField)> ]
-"19813" [label = <(METHOD_RETURN,ANY)> ]
-  "19808" -> "19813" 
+digraph "IsInstanceOf" {  
+"19461" [label = <(METHOD,IsInstanceOf)> ]
+"19466" [label = <(METHOD_RETURN,ANY)> ]
+  "19461" -> "19466" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/628-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/628-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/628-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/628-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "GetIntField" {  
-"19814" [label = <(METHOD,GetIntField)> ]
-"19819" [label = <(METHOD_RETURN,ANY)> ]
-  "19814" -> "19819" 
+digraph "CleanUpJniEnv" {  
+"19467" [label = <(METHOD,CleanUpJniEnv)> ]
+"19469" [label = <(METHOD_RETURN,ANY)> ]
+  "19467" -> "19469" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/629-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/629-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/629-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/629-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "ArtT::Alloc" {  
-"19820" [label = <(METHOD,ArtT::Alloc)> ]
-"19825" [label = <(METHOD_RETURN,ANY)> ]
-  "19820" -> "19825" 
+digraph "CommonRuntimeTest::TearDown" {  
+"19470" [label = <(METHOD,CommonRuntimeTest::TearDown)> ]
+"19473" [label = <(METHOD_RETURN,ANY)> ]
+  "19470" -> "19473" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/63-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/63-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/63-cfg.dot	2023-06-07 19:35:28.247384345 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/63-cfg.dot	2023-06-07 19:35:34.777383774 +0330
@@ -1,44 +1,53 @@
-digraph "NewLocalRef" {  
-"2188" [label = <(soa,soa(env))<SUB>940</SUB>> ]
-"2190" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; decoded_obj = soa.Decode&lt;mirror::Object&gt;(obj))<SUB>941</SUB>> ]
-"2214" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(decoded_obj);,return soa.AddLocalReference&lt;jobject&gt;(decoded_obj);)<SUB>946</SUB>> ]
-"2191" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; decoded_obj)<SUB>941</SUB>> ]
-"2198" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(obj))<SUB>941</SUB>> ]
-"2208" [label = <(&lt;operator&gt;.equals,decoded_obj == nullptr)<SUB>943</SUB>> ]
-"2215" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(decoded_obj))<SUB>946</SUB>> ]
-"2192" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>941</SUB>> ]
-"2199" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>941</SUB>> ]
-"2212" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>944</SUB>> ]
-"2216" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>946</SUB>> ]
-"2194" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>941</SUB>> ]
-"2200" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>941</SUB>> ]
-"2203" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>941</SUB>> ]
-"2217" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>946</SUB>> ]
-"2196" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>941</SUB>> ]
-"2202" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>941</SUB>> ]
-"2205" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>941</SUB>> ]
-"2219" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>946</SUB>> ]
-"2183" [label = <(METHOD,NewLocalRef)<SUB>939</SUB>> ]
-"2222" [label = <(METHOD_RETURN,jobject)<SUB>939</SUB>> ]
-  "2188" -> "2196" 
-  "2190" -> "2208" 
-  "2214" -> "2222" 
-  "2191" -> "2202" 
-  "2198" -> "2190" 
-  "2208" -> "2212" 
-  "2208" -> "2219" 
-  "2215" -> "2214" 
-  "2192" -> "2191" 
-  "2199" -> "2198" 
-  "2212" -> "2222" 
-  "2216" -> "2215" 
-  "2194" -> "2192" 
-  "2200" -> "2205" 
-  "2203" -> "2199" 
-  "2217" -> "2216" 
-  "2196" -> "2194" 
-  "2202" -> "2200" 
-  "2205" -> "2203" 
-  "2219" -> "2217" 
-  "2183" -> "2188" 
+digraph "NewObject" {  
+"2234" [label = <(va_start,va_start(args, mid))<SUB>918</SUB>> ]
+"2238" [label = <(free_args_later,free_args_later(&amp;args))<SUB>919</SUB>> ]
+"2241" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_class))<SUB>920</SUB>> ]
+"2259" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>921</SUB>> ]
+"2278" [label = <(&lt;operator&gt;.assignment,result = NewObjectV(env, java_class, mid, args))<SUB>922</SUB>> ]
+"2285" [label = <(RETURN,return result;,return result;)<SUB>923</SUB>> ]
+"2239" [label = <(&lt;operator&gt;.addressOf,&amp;args)<SUB>919</SUB>> ]
+"2280" [label = <(NewObjectV,NewObjectV(env, java_class, mid, args))<SUB>922</SUB>> ]
+"2245" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>920</SUB>> ]
+"2263" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>921</SUB>> ]
+"2246" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>920</SUB>> ]
+"2250" [label = <(CHECK_NON_NULL_ARGUMENT(java_class),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class == null&quot;))<SUB>920</SUB>> ]
+"2257" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_class),CHECK_NON_NULL_ARGUMENT(java_class))<SUB>920</SUB>> ]
+"2264" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>921</SUB>> ]
+"2268" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>921</SUB>> ]
+"2275" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>921</SUB>> ]
+"2251" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>920</SUB>> ]
+"2269" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>921</SUB>> ]
+"2252" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>920</SUB>> ]
+"2254" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>920</SUB>> ]
+"2270" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>921</SUB>> ]
+"2272" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>921</SUB>> ]
+"2228" [label = <(METHOD,NewObject)<SUB>916</SUB>> ]
+"2287" [label = <(METHOD_RETURN,jobject)<SUB>916</SUB>> ]
+  "2234" -> "2239" 
+  "2238" -> "2241" 
+  "2241" -> "2246" 
+  "2241" -> "2259" 
+  "2259" -> "2264" 
+  "2259" -> "2280" 
+  "2278" -> "2285" 
+  "2285" -> "2287" 
+  "2239" -> "2238" 
+  "2280" -> "2278" 
+  "2245" -> "2252" 
+  "2245" -> "2259" 
+  "2263" -> "2270" 
+  "2263" -> "2280" 
+  "2246" -> "2245" 
+  "2250" -> "2257" 
+  "2257" -> "2287" 
+  "2264" -> "2263" 
+  "2268" -> "2275" 
+  "2275" -> "2287" 
+  "2251" -> "2250" 
+  "2269" -> "2268" 
+  "2252" -> "2254" 
+  "2254" -> "2251" 
+  "2270" -> "2272" 
+  "2272" -> "2269" 
+  "2228" -> "2234" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/630-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/630-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/630-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/630-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "GetClassRoot&lt;ArtArrayT&gt;" {  
-"19826" [label = <(METHOD,GetClassRoot&lt;ArtArrayT&gt;)> ]
-"19828" [label = <(METHOD_RETURN,ANY)> ]
-  "19826" -> "19828" 
+digraph "FindPrimitiveClass" {  
+"19474" [label = <(METHOD,FindPrimitiveClass)> ]
+"19478" [label = <(METHOD_RETURN,ANY)> ]
+  "19474" -> "19478" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/631-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/631-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/631-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/631-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "DecodeAndCheckArrayType&lt;ArrayT,ElementT,ArtArrayT&gt;" {  
-"19829" [label = <(METHOD,DecodeAndCheckArrayType&lt;ArrayT,ElementT,ArtArrayT&gt;)> ]
-"19835" [label = <(METHOD_RETURN,ANY)> ]
-  "19829" -> "19835" 
+digraph "EXPECT_FALSE" {  
+"19479" [label = <(METHOD,EXPECT_FALSE)> ]
+"19482" [label = <(METHOD_RETURN,ANY)> ]
+  "19479" -> "19482" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/632-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/632-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/632-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/632-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "GetData" {  
-"19836" [label = <(METHOD,GetData)> ]
-"19839" [label = <(METHOD_RETURN,ANY)> ]
-  "19836" -> "19839" 
+digraph "EXPECT_EQ" {  
+"19483" [label = <(METHOD,EXPECT_EQ)> ]
+"19487" [label = <(METHOD_RETURN,ANY)> ]
+  "19483" -> "19487" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/633-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/633-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/633-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/633-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "DecodeAndCheckArrayType&lt;JArrayT,ElementT,ArtArrayT&gt;" {  
-"19840" [label = <(METHOD,DecodeAndCheckArrayType&lt;JArrayT,ElementT,ArtArrayT&gt;)> ]
-"19846" [label = <(METHOD_RETURN,ANY)> ]
-  "19840" -> "19846" 
+digraph "Check" {  
+"19488" [label = <(METHOD,Check)> ]
+"19492" [label = <(METHOD_RETURN,ANY)> ]
+  "19488" -> "19492" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/634-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/634-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/634-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/634-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "&lt;operator&gt;.arrayInitializer" {  
-"19847" [label = <(METHOD,&lt;operator&gt;.arrayInitializer)> ]
-"19852" [label = <(METHOD_RETURN,ANY)> ]
-  "19847" -> "19852" 
+digraph "SetCheckJniEnabled" {  
+"19493" [label = <(METHOD,SetCheckJniEnabled)> ]
+"19497" [label = <(METHOD_RETURN,ANY)> ]
+  "19493" -> "19497" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/635-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/635-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/635-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/635-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "BuildCache" {  
-"19853" [label = <(METHOD,BuildCache)> ]
-"19856" [label = <(METHOD_RETURN,ANY)> ]
-  "19853" -> "19856" 
+digraph "ExpectClassFound" {  
+"19498" [label = <(METHOD,ExpectClassFound)> ]
+"19501" [label = <(METHOD_RETURN,ANY)> ]
+  "19498" -> "19501" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/636-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/636-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/636-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/636-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "DropCache" {  
-"19857" [label = <(METHOD,DropCache)> ]
-"19860" [label = <(METHOD_RETURN,ANY)> ]
-  "19857" -> "19860" 
+digraph "ExpectClassNotFound" {  
+"19502" [label = <(METHOD,ExpectClassNotFound)> ]
+"19508" [label = <(METHOD_RETURN,ANY)> ]
+  "19502" -> "19508" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/637-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/637-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/637-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/637-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "UNREACHABLE" {  
-"19861" [label = <(METHOD,UNREACHABLE)> ]
-"19863" [label = <(METHOD_RETURN,ANY)> ]
-  "19861" -> "19863" 
+digraph "ASSERT_NE" {  
+"19509" [label = <(METHOD,ASSERT_NE)> ]
+"19513" [label = <(METHOD_RETURN,ANY)> ]
+  "19509" -> "19513" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/638-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/638-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/638-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/638-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "CommonRuntimeTest::SetUp" {  
-"19864" [label = <(METHOD,CommonRuntimeTest::SetUp)> ]
-"19867" [label = <(METHOD_RETURN,ANY)> ]
-  "19864" -> "19867" 
+digraph "GetFieldID" {  
+"19514" [label = <(METHOD,GetFieldID)> ]
+"19520" [label = <(METHOD_RETURN,ANY)> ]
+  "19514" -> "19520" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/639-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/639-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/639-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/639-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "AttachCurrentThread" {  
-"19868" [label = <(METHOD,AttachCurrentThread)> ]
-"19873" [label = <(METHOD_RETURN,ANY)> ]
-  "19868" -> "19873" 
+digraph "GetStaticFieldID" {  
+"19521" [label = <(METHOD,GetStaticFieldID)> ]
+"19527" [label = <(METHOD_RETURN,ANY)> ]
+  "19521" -> "19527" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/64-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/64-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/64-cfg.dot	2023-06-07 19:35:28.247384345 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/64-cfg.dot	2023-06-07 19:35:34.777383774 +0330
@@ -1,43 +1,169 @@
-digraph "DeleteLocalRef" {  
-"2235" [label = <(soa,soa(env))<SUB>956</SUB>> ]
-"2238" [label = <(&lt;operator&gt;.assignment,* ext_env = down_cast&lt;JNIEnvExt*&gt;(env))<SUB>957</SUB>> ]
-"2229" [label = <(&lt;operator&gt;.equals,obj == nullptr)<SUB>950</SUB>> ]
-"2240" [label = <(down_cast&lt;JNIEnvExt*&gt;,down_cast&lt;JNIEnvExt*&gt;(env))<SUB>957</SUB>> ]
-"2243" [label = <(&lt;operator&gt;.logicalNot,!ext_env-&gt;locals_.Remove(ext_env-&gt;local_ref_cookie_, obj))<SUB>958</SUB>> ]
-"2233" [label = <(RETURN,return;,return;)<SUB>951</SUB>> ]
-"2244" [label = <(Remove,ext_env-&gt;locals_.Remove(ext_env-&gt;local_ref_cookie_, obj))<SUB>958</SUB>> ]
-"2255" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI WARNING: DeleteLocalRef(&quot; &lt;&lt; obj &lt;&lt; &quot;) &quot;\012 &lt;&lt; &quot;failed to find entry&quot;)<SUB>964</SUB>> ]
-"2245" [label = <(&lt;operator&gt;.fieldAccess,ext_env-&gt;locals_.Remove)<SUB>958</SUB>> ]
-"2250" [label = <(&lt;operator&gt;.indirectFieldAccess,ext_env-&gt;local_ref_cookie_)<SUB>958</SUB>> ]
-"2256" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI WARNING: DeleteLocalRef(&quot; &lt;&lt; obj &lt;&lt; &quot;) &quot;)<SUB>964</SUB>> ]
-"2246" [label = <(&lt;operator&gt;.indirectFieldAccess,ext_env-&gt;locals_)<SUB>958</SUB>> ]
-"2249" [label = <(FIELD_IDENTIFIER,Remove,Remove)<SUB>958</SUB>> ]
-"2252" [label = <(FIELD_IDENTIFIER,local_ref_cookie_,local_ref_cookie_)<SUB>958</SUB>> ]
-"2257" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI WARNING: DeleteLocalRef(&quot; &lt;&lt; obj)<SUB>964</SUB>> ]
-"2248" [label = <(FIELD_IDENTIFIER,locals_,locals_)<SUB>958</SUB>> ]
-"2258" [label = <(&lt;operator&gt;.shiftLeft,LOG(WARNING) &lt;&lt; &quot;JNI WARNING: DeleteLocalRef(&quot;)<SUB>964</SUB>> ]
-"2259" [label = <(LOG,LOG(WARNING))<SUB>964</SUB>> ]
-"2224" [label = <(METHOD,DeleteLocalRef)<SUB>949</SUB>> ]
-"2265" [label = <(METHOD_RETURN,void)<SUB>949</SUB>> ]
-  "2235" -> "2240" 
-  "2238" -> "2248" 
-  "2229" -> "2233" 
-  "2229" -> "2235" 
-  "2240" -> "2238" 
-  "2243" -> "2265" 
-  "2243" -> "2259" 
-  "2233" -> "2265" 
-  "2244" -> "2243" 
-  "2255" -> "2265" 
-  "2245" -> "2252" 
-  "2250" -> "2244" 
-  "2256" -> "2255" 
-  "2246" -> "2249" 
-  "2249" -> "2245" 
-  "2252" -> "2250" 
-  "2257" -> "2256" 
-  "2248" -> "2246" 
-  "2258" -> "2257" 
-  "2259" -> "2258" 
-  "2224" -> "2229" 
+digraph "NewObjectV" {  
+"2295" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_class))<SUB>927</SUB>> ]
+"2313" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>928</SUB>> ]
+"2332" [label = <(soa,soa(env))<SUB>929</SUB>> ]
+"2334" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c = EnsureInitialized(soa.Self(),\012                                                soa.Decode&lt;mirror::Class&gt;(java_class)))<SUB>930</SUB>> ]
+"2393" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; result = c-&gt;AllocObject(soa.Self()))<SUB>941</SUB>> ]
+"2417" [label = <(&lt;operator&gt;.assignment,local_result = soa.AddLocalReference&lt;jobject&gt;(result))<SUB>945</SUB>> ]
+"2426" [label = <(CallNonvirtualVoidMethodV,CallNonvirtualVoidMethodV(env, local_result, java_class, mid, args))<SUB>946</SUB>> ]
+"2443" [label = <(RETURN,return local_result;,return local_result;)<SUB>950</SUB>> ]
+"2335" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c)<SUB>930</SUB>> ]
+"2342" [label = <(EnsureInitialized,EnsureInitialized(soa.Self(),\012                                                soa.Decode&lt;mirror::Class&gt;(java_class)))<SUB>930</SUB>> ]
+"2357" [label = <(&lt;operator&gt;.equals,c == nullptr)<SUB>932</SUB>> ]
+"2364" [label = <(IsStringClass,c-&gt;IsStringClass())<SUB>935</SUB>> ]
+"2394" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; result)<SUB>941</SUB>> ]
+"2401" [label = <(AllocObject,c-&gt;AllocObject(soa.Self()))<SUB>941</SUB>> ]
+"2410" [label = <(&lt;operator&gt;.equals,result == nullptr)<SUB>942</SUB>> ]
+"2419" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result))<SUB>945</SUB>> ]
+"2433" [label = <(IsExceptionPending,soa.Self()-&gt;IsExceptionPending())<SUB>947</SUB>> ]
+"2336" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>930</SUB>> ]
+"2343" [label = <(Self,soa.Self())<SUB>930</SUB>> ]
+"2347" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>931</SUB>> ]
+"2361" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>933</SUB>> ]
+"2365" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;IsStringClass)<SUB>935</SUB>> ]
+"2370" [label = <(&lt;operator&gt;.assignment,sf_mid = jni::EncodeArtMethod(\012 WellKnownClasses::StringInitToStringFactory(jni::DecodeArtMethod(mid))))<SUB>937</SUB>> ]
+"2385" [label = <(RETURN,return CallStaticObjectMethodV(env, WellKnownClasses::java_lang_StringFactory, sf_mid, args);,return CallStaticObjectMethodV(env, WellKnownClasses::java_lang_StringFactory, sf_mid, args);)<SUB>939</SUB>> ]
+"2395" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>941</SUB>> ]
+"2402" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;AllocObject)<SUB>941</SUB>> ]
+"2405" [label = <(Self,soa.Self())<SUB>941</SUB>> ]
+"2414" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>943</SUB>> ]
+"2420" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>945</SUB>> ]
+"2434" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;IsExceptionPending)<SUB>947</SUB>> ]
+"2441" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>948</SUB>> ]
+"2299" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>927</SUB>> ]
+"2317" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>928</SUB>> ]
+"2338" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>930</SUB>> ]
+"2344" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>930</SUB>> ]
+"2348" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>931</SUB>> ]
+"2367" [label = <(FIELD_IDENTIFIER,IsStringClass,IsStringClass)<SUB>935</SUB>> ]
+"2372" [label = <(jni::EncodeArtMethod,jni::EncodeArtMethod(\012 WellKnownClasses::StringInitToStringFactory(jni::DecodeArtMethod(mid))))<SUB>937</SUB>> ]
+"2386" [label = <(CallStaticObjectMethodV,CallStaticObjectMethodV(env, WellKnownClasses::java_lang_StringFactory, sf_mid, args))<SUB>939</SUB>> ]
+"2397" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>941</SUB>> ]
+"2404" [label = <(FIELD_IDENTIFIER,AllocObject,AllocObject)<SUB>941</SUB>> ]
+"2406" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>941</SUB>> ]
+"2421" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>945</SUB>> ]
+"2435" [label = <(Self,soa.Self())<SUB>947</SUB>> ]
+"2439" [label = <(FIELD_IDENTIFIER,IsExceptionPending,IsExceptionPending)<SUB>947</SUB>> ]
+"2300" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>927</SUB>> ]
+"2304" [label = <(CHECK_NON_NULL_ARGUMENT(java_class),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class == null&quot;))<SUB>927</SUB>> ]
+"2311" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_class),CHECK_NON_NULL_ARGUMENT(java_class))<SUB>927</SUB>> ]
+"2318" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>928</SUB>> ]
+"2322" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>928</SUB>> ]
+"2329" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>928</SUB>> ]
+"2340" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>930</SUB>> ]
+"2346" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>930</SUB>> ]
+"2349" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>931</SUB>> ]
+"2352" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>931</SUB>> ]
+"2373" [label = <(&lt;operator&gt;.fieldAccess,jni::EncodeArtMethod)<SUB>937</SUB>> ]
+"2376" [label = <(WellKnownClasses::StringInitToStringFactory,WellKnownClasses::StringInitToStringFactory(jni::DecodeArtMethod(mid)))<SUB>938</SUB>> ]
+"2388" [label = <(&lt;operator&gt;.fieldAccess,WellKnownClasses::java_lang_StringFactory)<SUB>939</SUB>> ]
+"2399" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>941</SUB>> ]
+"2408" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>941</SUB>> ]
+"2423" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>945</SUB>> ]
+"2436" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>947</SUB>> ]
+"2305" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>927</SUB>> ]
+"2323" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>928</SUB>> ]
+"2351" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>931</SUB>> ]
+"2354" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>931</SUB>> ]
+"2375" [label = <(FIELD_IDENTIFIER,EncodeArtMethod,EncodeArtMethod)<SUB>937</SUB>> ]
+"2377" [label = <(&lt;operator&gt;.fieldAccess,WellKnownClasses::StringInitToStringFactory)<SUB>938</SUB>> ]
+"2380" [label = <(jni::DecodeArtMethod,jni::DecodeArtMethod(mid))<SUB>938</SUB>> ]
+"2390" [label = <(FIELD_IDENTIFIER,java_lang_StringFactory,java_lang_StringFactory)<SUB>939</SUB>> ]
+"2438" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>947</SUB>> ]
+"2306" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>927</SUB>> ]
+"2308" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>927</SUB>> ]
+"2324" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>928</SUB>> ]
+"2326" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>928</SUB>> ]
+"2379" [label = <(FIELD_IDENTIFIER,StringInitToStringFactory,StringInitToStringFactory)<SUB>938</SUB>> ]
+"2381" [label = <(&lt;operator&gt;.fieldAccess,jni::DecodeArtMethod)<SUB>938</SUB>> ]
+"2383" [label = <(FIELD_IDENTIFIER,DecodeArtMethod,DecodeArtMethod)<SUB>938</SUB>> ]
+"2289" [label = <(METHOD,NewObjectV)<SUB>926</SUB>> ]
+"2445" [label = <(METHOD_RETURN,jobject)<SUB>926</SUB>> ]
+  "2295" -> "2300" 
+  "2295" -> "2313" 
+  "2313" -> "2318" 
+  "2313" -> "2332" 
+  "2332" -> "2340" 
+  "2334" -> "2357" 
+  "2393" -> "2410" 
+  "2417" -> "2426" 
+  "2426" -> "2438" 
+  "2443" -> "2445" 
+  "2335" -> "2346" 
+  "2342" -> "2334" 
+  "2357" -> "2361" 
+  "2357" -> "2367" 
+  "2364" -> "2375" 
+  "2364" -> "2399" 
+  "2394" -> "2404" 
+  "2401" -> "2393" 
+  "2410" -> "2414" 
+  "2410" -> "2423" 
+  "2419" -> "2417" 
+  "2433" -> "2441" 
+  "2433" -> "2443" 
+  "2336" -> "2335" 
+  "2343" -> "2351" 
+  "2347" -> "2342" 
+  "2361" -> "2445" 
+  "2365" -> "2364" 
+  "2370" -> "2390" 
+  "2385" -> "2445" 
+  "2395" -> "2394" 
+  "2402" -> "2408" 
+  "2405" -> "2401" 
+  "2414" -> "2445" 
+  "2420" -> "2419" 
+  "2434" -> "2433" 
+  "2441" -> "2445" 
+  "2299" -> "2306" 
+  "2299" -> "2313" 
+  "2317" -> "2324" 
+  "2317" -> "2332" 
+  "2338" -> "2336" 
+  "2344" -> "2343" 
+  "2348" -> "2347" 
+  "2367" -> "2365" 
+  "2372" -> "2370" 
+  "2386" -> "2385" 
+  "2397" -> "2395" 
+  "2404" -> "2402" 
+  "2406" -> "2405" 
+  "2421" -> "2420" 
+  "2435" -> "2439" 
+  "2439" -> "2434" 
+  "2300" -> "2299" 
+  "2304" -> "2311" 
+  "2311" -> "2445" 
+  "2318" -> "2317" 
+  "2322" -> "2329" 
+  "2329" -> "2445" 
+  "2340" -> "2338" 
+  "2346" -> "2344" 
+  "2349" -> "2354" 
+  "2352" -> "2348" 
+  "2373" -> "2379" 
+  "2376" -> "2372" 
+  "2388" -> "2386" 
+  "2399" -> "2397" 
+  "2408" -> "2406" 
+  "2423" -> "2421" 
+  "2436" -> "2435" 
+  "2305" -> "2304" 
+  "2323" -> "2322" 
+  "2351" -> "2349" 
+  "2354" -> "2352" 
+  "2375" -> "2373" 
+  "2377" -> "2383" 
+  "2380" -> "2376" 
+  "2390" -> "2388" 
+  "2438" -> "2436" 
+  "2306" -> "2308" 
+  "2308" -> "2305" 
+  "2324" -> "2326" 
+  "2326" -> "2323" 
+  "2379" -> "2377" 
+  "2381" -> "2380" 
+  "2383" -> "2381" 
+  "2289" -> "2295" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/640-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/640-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/640-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/640-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "aioobe" {  
-"19874" [label = <(METHOD,aioobe)> ]
-"19878" [label = <(METHOD_RETURN,ANY)> ]
-  "19874" -> "19878" 
+digraph "ASSERT_TRUE" {  
+"19528" [label = <(METHOD,ASSERT_TRUE)> ]
+"19531" [label = <(METHOD_RETURN,ANY)> ]
+  "19528" -> "19531" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/641-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/641-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/641-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/641-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "NewGlobalRef" {  
-"19879" [label = <(METHOD,NewGlobalRef)> ]
-"19884" [label = <(METHOD_RETURN,ANY)> ]
-  "19879" -> "19884" 
+digraph "GetStaticMethodID" {  
+"19532" [label = <(METHOD,GetStaticMethodID)> ]
+"19538" [label = <(METHOD_RETURN,ANY)> ]
+  "19532" -> "19538" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/642-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/642-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/642-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/642-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "ase" {  
-"19885" [label = <(METHOD,ase)> ]
-"19889" [label = <(METHOD_RETURN,ANY)> ]
-  "19885" -> "19889" 
+digraph "ToReflectedField" {  
+"19539" [label = <(METHOD,ToReflectedField)> ]
+"19545" [label = <(METHOD_RETURN,ANY)> ]
+  "19539" -> "19545" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/643-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/643-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/643-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/643-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "sioobe" {  
-"19890" [label = <(METHOD,sioobe)> ]
-"19894" [label = <(METHOD_RETURN,ANY)> ]
-  "19890" -> "19894" 
+digraph "FromReflectedField" {  
+"19546" [label = <(METHOD,FromReflectedField)> ]
+"19550" [label = <(METHOD_RETURN,ANY)> ]
+  "19546" -> "19550" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/644-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/644-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/644-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/644-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "EXPECT_TRUE" {  
-"19895" [label = <(METHOD,EXPECT_TRUE)> ]
-"19898" [label = <(METHOD_RETURN,ANY)> ]
-  "19895" -> "19898" 
+digraph "ASSERT_EQ" {  
+"19551" [label = <(METHOD,ASSERT_EQ)> ]
+"19555" [label = <(METHOD_RETURN,ANY)> ]
+  "19551" -> "19555" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/645-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/645-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/645-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/645-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "ExceptionCheck" {  
-"19899" [label = <(METHOD,ExceptionCheck)> ]
-"19902" [label = <(METHOD_RETURN,ANY)> ]
-  "19899" -> "19902" 
+digraph "ToReflectedMethod" {  
+"19556" [label = <(METHOD,ToReflectedMethod)> ]
+"19562" [label = <(METHOD_RETURN,ANY)> ]
+  "19556" -> "19562" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/646-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/646-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/646-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/646-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "ExceptionOccurred" {  
-"19903" [label = <(METHOD,ExceptionOccurred)> ]
-"19906" [label = <(METHOD_RETURN,ANY)> ]
-  "19903" -> "19906" 
+digraph "FromReflectedMethod" {  
+"19563" [label = <(METHOD,FromReflectedMethod)> ]
+"19567" [label = <(METHOD_RETURN,ANY)> ]
+  "19563" -> "19567" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/647-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/647-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/647-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/647-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "EXPECT_NE" {  
-"19907" [label = <(METHOD,EXPECT_NE)> ]
-"19911" [label = <(METHOD_RETURN,ANY)> ]
-  "19907" -> "19911" 
+digraph "RegisterNatives" {  
+"19568" [label = <(METHOD,RegisterNatives)> ]
+"19574" [label = <(METHOD_RETURN,ANY)> ]
+  "19568" -> "19574" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/648-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/648-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/648-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/648-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "ExceptionClear" {  
-"19912" [label = <(METHOD,ExceptionClear)> ]
-"19915" [label = <(METHOD_RETURN,ANY)> ]
-  "19912" -> "19915" 
+digraph "UnregisterNatives" {  
+"19575" [label = <(METHOD,UnregisterNatives)> ]
+"19579" [label = <(METHOD_RETURN,ANY)> ]
+  "19575" -> "19579" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/649-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/649-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/649-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/649-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "IsInstanceOf" {  
-"19916" [label = <(METHOD,IsInstanceOf)> ]
-"19921" [label = <(METHOD_RETURN,ANY)> ]
-  "19916" -> "19921" 
+digraph "NewBooleanArray" {  
+"19580" [label = <(METHOD,NewBooleanArray)> ]
+"19584" [label = <(METHOD_RETURN,ANY)> ]
+  "19580" -> "19584" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/65-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/65-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/65-cfg.dot	2023-06-07 19:35:28.247384345 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/65-cfg.dot	2023-06-07 19:35:34.777383774 +0330
@@ -1,42 +1,169 @@
-digraph "IsSameObject" {  
-"2273" [label = <(&lt;operator&gt;.equals,obj1 == obj2)<SUB>970</SUB>> ]
-"2277" [label = <(RETURN,return JNI_TRUE;,return JNI_TRUE;)<SUB>971</SUB>> ]
-"2282" [label = <(soa,soa(env))<SUB>973</SUB>> ]
-"2284" [label = <(RETURN,return (soa.Decode&lt;mirror::Object&gt;(obj1) == soa.Decode&lt;mirror::Object&gt;(obj2))\012 ? JNI_TRUE : JNI_FALSE;,return (soa.Decode&lt;mirror::Object&gt;(obj1) == soa.Decode&lt;mirror::Object&gt;(obj2))\012 ? JNI_TRUE : JNI_FALSE;)<SUB>974</SUB>> ]
-"2285" [label = <(&lt;operator&gt;.conditional,(soa.Decode&lt;mirror::Object&gt;(obj1) == soa.Decode&lt;mirror::Object&gt;(obj2))\012 ? JNI_TRUE : JNI_FALSE)<SUB>974</SUB>> ]
-"2286" [label = <(&lt;operator&gt;.equals,soa.Decode&lt;mirror::Object&gt;(obj1) == soa.Decode&lt;mirror::Object&gt;(obj2))<SUB>974</SUB>> ]
-"2287" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(obj1))<SUB>974</SUB>> ]
-"2296" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Object&gt;(obj2))<SUB>974</SUB>> ]
-"2288" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>974</SUB>> ]
-"2297" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Object)<SUB>974</SUB>> ]
-"2289" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>974</SUB>> ]
-"2292" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>974</SUB>> ]
-"2298" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>974</SUB>> ]
-"2301" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>974</SUB>> ]
-"2291" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>974</SUB>> ]
-"2294" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>974</SUB>> ]
-"2300" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>974</SUB>> ]
-"2303" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>974</SUB>> ]
-"2267" [label = <(METHOD,IsSameObject)<SUB>969</SUB>> ]
-"2307" [label = <(METHOD_RETURN,jboolean)<SUB>969</SUB>> ]
-  "2273" -> "2277" 
-  "2273" -> "2282" 
-  "2277" -> "2307" 
-  "2282" -> "2291" 
-  "2284" -> "2307" 
-  "2285" -> "2284" 
-  "2286" -> "2285" 
-  "2287" -> "2300" 
-  "2296" -> "2286" 
-  "2288" -> "2287" 
-  "2297" -> "2296" 
-  "2289" -> "2294" 
-  "2292" -> "2288" 
-  "2298" -> "2303" 
-  "2301" -> "2297" 
-  "2291" -> "2289" 
-  "2294" -> "2292" 
-  "2300" -> "2298" 
-  "2303" -> "2301" 
-  "2267" -> "2273" 
+digraph "NewObjectA" {  
+"2453" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_class))<SUB>954</SUB>> ]
+"2471" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>955</SUB>> ]
+"2490" [label = <(soa,soa(env))<SUB>956</SUB>> ]
+"2492" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c = EnsureInitialized(soa.Self(),\012                                                soa.Decode&lt;mirror::Class&gt;(java_class)))<SUB>957</SUB>> ]
+"2551" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; result = c-&gt;AllocObject(soa.Self()))<SUB>968</SUB>> ]
+"2575" [label = <(&lt;operator&gt;.assignment,local_result = soa.AddLocalReference&lt;jobjectArray&gt;(result))<SUB>972</SUB>> ]
+"2584" [label = <(CallNonvirtualVoidMethodA,CallNonvirtualVoidMethodA(env, local_result, java_class, mid, args))<SUB>973</SUB>> ]
+"2601" [label = <(RETURN,return local_result;,return local_result;)<SUB>977</SUB>> ]
+"2493" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c)<SUB>957</SUB>> ]
+"2500" [label = <(EnsureInitialized,EnsureInitialized(soa.Self(),\012                                                soa.Decode&lt;mirror::Class&gt;(java_class)))<SUB>957</SUB>> ]
+"2515" [label = <(&lt;operator&gt;.equals,c == nullptr)<SUB>959</SUB>> ]
+"2522" [label = <(IsStringClass,c-&gt;IsStringClass())<SUB>962</SUB>> ]
+"2552" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; result)<SUB>968</SUB>> ]
+"2559" [label = <(AllocObject,c-&gt;AllocObject(soa.Self()))<SUB>968</SUB>> ]
+"2568" [label = <(&lt;operator&gt;.equals,result == nullptr)<SUB>969</SUB>> ]
+"2577" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobjectArray&gt;(result))<SUB>972</SUB>> ]
+"2591" [label = <(IsExceptionPending,soa.Self()-&gt;IsExceptionPending())<SUB>974</SUB>> ]
+"2494" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>957</SUB>> ]
+"2501" [label = <(Self,soa.Self())<SUB>957</SUB>> ]
+"2505" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>958</SUB>> ]
+"2519" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>960</SUB>> ]
+"2523" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;IsStringClass)<SUB>962</SUB>> ]
+"2528" [label = <(&lt;operator&gt;.assignment,sf_mid = jni::EncodeArtMethod(\012 WellKnownClasses::StringInitToStringFactory(jni::DecodeArtMethod(mid))))<SUB>964</SUB>> ]
+"2543" [label = <(RETURN,return CallStaticObjectMethodA(env, WellKnownClasses::java_lang_StringFactory, sf_mid, args);,return CallStaticObjectMethodA(env, WellKnownClasses::java_lang_StringFactory, sf_mid, args);)<SUB>966</SUB>> ]
+"2553" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>968</SUB>> ]
+"2560" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;AllocObject)<SUB>968</SUB>> ]
+"2563" [label = <(Self,soa.Self())<SUB>968</SUB>> ]
+"2572" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>970</SUB>> ]
+"2578" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobjectArray)<SUB>972</SUB>> ]
+"2592" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;IsExceptionPending)<SUB>974</SUB>> ]
+"2599" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>975</SUB>> ]
+"2457" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>954</SUB>> ]
+"2475" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>955</SUB>> ]
+"2496" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>957</SUB>> ]
+"2502" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>957</SUB>> ]
+"2506" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>958</SUB>> ]
+"2525" [label = <(FIELD_IDENTIFIER,IsStringClass,IsStringClass)<SUB>962</SUB>> ]
+"2530" [label = <(jni::EncodeArtMethod,jni::EncodeArtMethod(\012 WellKnownClasses::StringInitToStringFactory(jni::DecodeArtMethod(mid))))<SUB>964</SUB>> ]
+"2544" [label = <(CallStaticObjectMethodA,CallStaticObjectMethodA(env, WellKnownClasses::java_lang_StringFactory, sf_mid, args))<SUB>966</SUB>> ]
+"2555" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>968</SUB>> ]
+"2562" [label = <(FIELD_IDENTIFIER,AllocObject,AllocObject)<SUB>968</SUB>> ]
+"2564" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>968</SUB>> ]
+"2579" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>972</SUB>> ]
+"2593" [label = <(Self,soa.Self())<SUB>974</SUB>> ]
+"2597" [label = <(FIELD_IDENTIFIER,IsExceptionPending,IsExceptionPending)<SUB>974</SUB>> ]
+"2458" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>954</SUB>> ]
+"2462" [label = <(CHECK_NON_NULL_ARGUMENT(java_class),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class == null&quot;))<SUB>954</SUB>> ]
+"2469" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_class),CHECK_NON_NULL_ARGUMENT(java_class))<SUB>954</SUB>> ]
+"2476" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>955</SUB>> ]
+"2480" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>955</SUB>> ]
+"2487" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>955</SUB>> ]
+"2498" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>957</SUB>> ]
+"2504" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>957</SUB>> ]
+"2507" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>958</SUB>> ]
+"2510" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>958</SUB>> ]
+"2531" [label = <(&lt;operator&gt;.fieldAccess,jni::EncodeArtMethod)<SUB>964</SUB>> ]
+"2534" [label = <(WellKnownClasses::StringInitToStringFactory,WellKnownClasses::StringInitToStringFactory(jni::DecodeArtMethod(mid)))<SUB>965</SUB>> ]
+"2546" [label = <(&lt;operator&gt;.fieldAccess,WellKnownClasses::java_lang_StringFactory)<SUB>966</SUB>> ]
+"2557" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>968</SUB>> ]
+"2566" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>968</SUB>> ]
+"2581" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>972</SUB>> ]
+"2594" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>974</SUB>> ]
+"2463" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>954</SUB>> ]
+"2481" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>955</SUB>> ]
+"2509" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>958</SUB>> ]
+"2512" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>958</SUB>> ]
+"2533" [label = <(FIELD_IDENTIFIER,EncodeArtMethod,EncodeArtMethod)<SUB>964</SUB>> ]
+"2535" [label = <(&lt;operator&gt;.fieldAccess,WellKnownClasses::StringInitToStringFactory)<SUB>965</SUB>> ]
+"2538" [label = <(jni::DecodeArtMethod,jni::DecodeArtMethod(mid))<SUB>965</SUB>> ]
+"2548" [label = <(FIELD_IDENTIFIER,java_lang_StringFactory,java_lang_StringFactory)<SUB>966</SUB>> ]
+"2596" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>974</SUB>> ]
+"2464" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>954</SUB>> ]
+"2466" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>954</SUB>> ]
+"2482" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>955</SUB>> ]
+"2484" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>955</SUB>> ]
+"2537" [label = <(FIELD_IDENTIFIER,StringInitToStringFactory,StringInitToStringFactory)<SUB>965</SUB>> ]
+"2539" [label = <(&lt;operator&gt;.fieldAccess,jni::DecodeArtMethod)<SUB>965</SUB>> ]
+"2541" [label = <(FIELD_IDENTIFIER,DecodeArtMethod,DecodeArtMethod)<SUB>965</SUB>> ]
+"2447" [label = <(METHOD,NewObjectA)<SUB>953</SUB>> ]
+"2603" [label = <(METHOD_RETURN,jobject)<SUB>953</SUB>> ]
+  "2453" -> "2458" 
+  "2453" -> "2471" 
+  "2471" -> "2476" 
+  "2471" -> "2490" 
+  "2490" -> "2498" 
+  "2492" -> "2515" 
+  "2551" -> "2568" 
+  "2575" -> "2584" 
+  "2584" -> "2596" 
+  "2601" -> "2603" 
+  "2493" -> "2504" 
+  "2500" -> "2492" 
+  "2515" -> "2519" 
+  "2515" -> "2525" 
+  "2522" -> "2533" 
+  "2522" -> "2557" 
+  "2552" -> "2562" 
+  "2559" -> "2551" 
+  "2568" -> "2572" 
+  "2568" -> "2581" 
+  "2577" -> "2575" 
+  "2591" -> "2599" 
+  "2591" -> "2601" 
+  "2494" -> "2493" 
+  "2501" -> "2509" 
+  "2505" -> "2500" 
+  "2519" -> "2603" 
+  "2523" -> "2522" 
+  "2528" -> "2548" 
+  "2543" -> "2603" 
+  "2553" -> "2552" 
+  "2560" -> "2566" 
+  "2563" -> "2559" 
+  "2572" -> "2603" 
+  "2578" -> "2577" 
+  "2592" -> "2591" 
+  "2599" -> "2603" 
+  "2457" -> "2464" 
+  "2457" -> "2471" 
+  "2475" -> "2482" 
+  "2475" -> "2490" 
+  "2496" -> "2494" 
+  "2502" -> "2501" 
+  "2506" -> "2505" 
+  "2525" -> "2523" 
+  "2530" -> "2528" 
+  "2544" -> "2543" 
+  "2555" -> "2553" 
+  "2562" -> "2560" 
+  "2564" -> "2563" 
+  "2579" -> "2578" 
+  "2593" -> "2597" 
+  "2597" -> "2592" 
+  "2458" -> "2457" 
+  "2462" -> "2469" 
+  "2469" -> "2603" 
+  "2476" -> "2475" 
+  "2480" -> "2487" 
+  "2487" -> "2603" 
+  "2498" -> "2496" 
+  "2504" -> "2502" 
+  "2507" -> "2512" 
+  "2510" -> "2506" 
+  "2531" -> "2537" 
+  "2534" -> "2530" 
+  "2546" -> "2544" 
+  "2557" -> "2555" 
+  "2566" -> "2564" 
+  "2581" -> "2579" 
+  "2594" -> "2593" 
+  "2463" -> "2462" 
+  "2481" -> "2480" 
+  "2509" -> "2507" 
+  "2512" -> "2510" 
+  "2533" -> "2531" 
+  "2535" -> "2541" 
+  "2538" -> "2534" 
+  "2548" -> "2546" 
+  "2596" -> "2594" 
+  "2464" -> "2466" 
+  "2466" -> "2463" 
+  "2482" -> "2484" 
+  "2484" -> "2481" 
+  "2537" -> "2535" 
+  "2539" -> "2538" 
+  "2541" -> "2539" 
+  "2447" -> "2453" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/650-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/650-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/650-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/650-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "CleanUpJniEnv" {  
-"19922" [label = <(METHOD,CleanUpJniEnv)> ]
-"19924" [label = <(METHOD_RETURN,ANY)> ]
-  "19922" -> "19924" 
+digraph "GetByteArrayElements" {  
+"19585" [label = <(METHOD,GetByteArrayElements)> ]
+"19590" [label = <(METHOD_RETURN,ANY)> ]
+  "19585" -> "19590" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/651-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/651-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/651-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/651-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "CommonRuntimeTest::TearDown" {  
-"19925" [label = <(METHOD,CommonRuntimeTest::TearDown)> ]
-"19928" [label = <(METHOD_RETURN,ANY)> ]
-  "19925" -> "19928" 
+digraph "GetShortArrayElements" {  
+"19591" [label = <(METHOD,GetShortArrayElements)> ]
+"19596" [label = <(METHOD_RETURN,ANY)> ]
+  "19591" -> "19596" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/652-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/652-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/652-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/652-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "FindPrimitiveClass" {  
-"19929" [label = <(METHOD,FindPrimitiveClass)> ]
-"19933" [label = <(METHOD_RETURN,ANY)> ]
-  "19929" -> "19933" 
+digraph "GetCharArrayElements" {  
+"19597" [label = <(METHOD,GetCharArrayElements)> ]
+"19602" [label = <(METHOD_RETURN,ANY)> ]
+  "19597" -> "19602" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/653-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/653-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/653-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/653-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "EXPECT_FALSE" {  
-"19934" [label = <(METHOD,EXPECT_FALSE)> ]
-"19937" [label = <(METHOD_RETURN,ANY)> ]
-  "19934" -> "19937" 
+digraph "GetIntArrayElements" {  
+"19603" [label = <(METHOD,GetIntArrayElements)> ]
+"19608" [label = <(METHOD_RETURN,ANY)> ]
+  "19603" -> "19608" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/654-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/654-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/654-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/654-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "EXPECT_EQ" {  
-"19938" [label = <(METHOD,EXPECT_EQ)> ]
-"19942" [label = <(METHOD_RETURN,ANY)> ]
-  "19938" -> "19942" 
+digraph "GetLongArrayElements" {  
+"19609" [label = <(METHOD,GetLongArrayElements)> ]
+"19614" [label = <(METHOD_RETURN,ANY)> ]
+  "19609" -> "19614" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/655-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/655-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/655-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/655-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "Check" {  
-"19943" [label = <(METHOD,Check)> ]
-"19947" [label = <(METHOD_RETURN,ANY)> ]
-  "19943" -> "19947" 
+digraph "GetFloatArrayElements" {  
+"19615" [label = <(METHOD,GetFloatArrayElements)> ]
+"19620" [label = <(METHOD_RETURN,ANY)> ]
+  "19615" -> "19620" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/656-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/656-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/656-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/656-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "SetCheckJniEnabled" {  
-"19948" [label = <(METHOD,SetCheckJniEnabled)> ]
-"19952" [label = <(METHOD_RETURN,ANY)> ]
-  "19948" -> "19952" 
+digraph "GetDoubleArrayElements" {  
+"19621" [label = <(METHOD,GetDoubleArrayElements)> ]
+"19626" [label = <(METHOD_RETURN,ANY)> ]
+  "19621" -> "19626" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/657-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/657-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/657-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/657-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "ExpectClassFound" {  
-"19953" [label = <(METHOD,ExpectClassFound)> ]
-"19956" [label = <(METHOD_RETURN,ANY)> ]
-  "19953" -> "19956" 
+digraph "NewByteArray" {  
+"19627" [label = <(METHOD,NewByteArray)> ]
+"19631" [label = <(METHOD_RETURN,ANY)> ]
+  "19627" -> "19631" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/658-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/658-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/658-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/658-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "ExpectClassNotFound" {  
-"19957" [label = <(METHOD,ExpectClassNotFound)> ]
-"19963" [label = <(METHOD_RETURN,ANY)> ]
-  "19957" -> "19963" 
+digraph "GetBooleanArrayElements" {  
+"19632" [label = <(METHOD,GetBooleanArrayElements)> ]
+"19637" [label = <(METHOD_RETURN,ANY)> ]
+  "19632" -> "19637" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/659-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/659-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/659-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/659-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "ASSERT_NE" {  
-"19964" [label = <(METHOD,ASSERT_NE)> ]
-"19968" [label = <(METHOD_RETURN,ANY)> ]
-  "19964" -> "19968" 
+digraph "NewStringUTF" {  
+"19638" [label = <(METHOD,NewStringUTF)> ]
+"19642" [label = <(METHOD_RETURN,ANY)> ]
+  "19638" -> "19642" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/66-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/66-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/66-cfg.dot	2023-06-07 19:35:28.247384345 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/66-cfg.dot	2023-06-07 19:35:34.777383774 +0330
@@ -1,139 +1,65 @@
-digraph "AllocObject" {  
-"2313" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_class))<SUB>980</SUB>> ]
-"2332" [label = <(soa,soa(env))<SUB>981</SUB>> ]
-"2334" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c = EnsureInitialized(soa.Self(), soa.Decode&lt;mirror::Class&gt;(java_class)))<SUB>982</SUB>> ]
-"2404" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(c-&gt;AllocObject(soa.Self()));,return soa.AddLocalReference&lt;jobject&gt;(c-&gt;AllocObject(soa.Self()));)<SUB>991</SUB>> ]
-"2335" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c)<SUB>982</SUB>> ]
-"2342" [label = <(EnsureInitialized,EnsureInitialized(soa.Self(), soa.Decode&lt;mirror::Class&gt;(java_class)))<SUB>982</SUB>> ]
-"2357" [label = <(&lt;operator&gt;.equals,c == nullptr)<SUB>983</SUB>> ]
-"2364" [label = <(IsStringClass,c-&gt;IsStringClass())<SUB>986</SUB>> ]
-"2405" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(c-&gt;AllocObject(soa.Self())))<SUB>991</SUB>> ]
-"2336" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>982</SUB>> ]
-"2343" [label = <(Self,soa.Self())<SUB>982</SUB>> ]
-"2347" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>982</SUB>> ]
-"2361" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>984</SUB>> ]
-"2365" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;IsStringClass)<SUB>986</SUB>> ]
-"2370" [label = <(&lt;operator&gt;.assignment,allocator_type = Runtime::Current()-&gt;GetHeap()-&gt;GetCurrentAllocator())<SUB>987</SUB>> ]
-"2382" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(mirror::String::AllocEmptyString&lt;true&gt;(soa.Self(),\012                                                                              allocator_type));,return soa.AddLocalReference&lt;jobject&gt;(mirror::String::AllocEmptyString&lt;true&gt;(soa.Self(),\012                                                                              allocator_type));)<SUB>988</SUB>> ]
-"2406" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>991</SUB>> ]
-"2411" [label = <(AllocObject,c-&gt;AllocObject(soa.Self()))<SUB>991</SUB>> ]
-"2317" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>980</SUB>> ]
-"2338" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>982</SUB>> ]
-"2344" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>982</SUB>> ]
-"2348" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>982</SUB>> ]
-"2367" [label = <(FIELD_IDENTIFIER,IsStringClass,IsStringClass)<SUB>986</SUB>> ]
-"2372" [label = <(GetCurrentAllocator,Runtime::Current()-&gt;GetHeap()-&gt;GetCurrentAllocator())<SUB>987</SUB>> ]
-"2383" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(mirror::String::AllocEmptyString&lt;true&gt;(soa.Self(),\012                                                                              allocator_type)))<SUB>988</SUB>> ]
-"2407" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>991</SUB>> ]
-"2412" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;AllocObject)<SUB>991</SUB>> ]
-"2415" [label = <(Self,soa.Self())<SUB>991</SUB>> ]
-"2318" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>980</SUB>> ]
-"2322" [label = <(CHECK_NON_NULL_ARGUMENT(java_class),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class == null&quot;))<SUB>980</SUB>> ]
-"2329" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_class),CHECK_NON_NULL_ARGUMENT(java_class))<SUB>980</SUB>> ]
-"2340" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>982</SUB>> ]
-"2346" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>982</SUB>> ]
-"2349" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>982</SUB>> ]
-"2352" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>982</SUB>> ]
-"2373" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetHeap()-&gt;GetCurrentAllocator)<SUB>987</SUB>> ]
-"2384" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>988</SUB>> ]
-"2389" [label = <(&lt;operator&gt;.greaterThan,mirror::String::AllocEmptyString&lt;true&gt;(soa.Self(),\012                                                                              allocator_type))<SUB>988</SUB>> ]
-"2409" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>991</SUB>> ]
-"2414" [label = <(FIELD_IDENTIFIER,AllocObject,AllocObject)<SUB>991</SUB>> ]
-"2416" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>991</SUB>> ]
-"2323" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>980</SUB>> ]
-"2351" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>982</SUB>> ]
-"2354" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>982</SUB>> ]
-"2374" [label = <(GetHeap,Runtime::Current()-&gt;GetHeap())<SUB>987</SUB>> ]
-"2381" [label = <(FIELD_IDENTIFIER,GetCurrentAllocator,GetCurrentAllocator)<SUB>987</SUB>> ]
-"2385" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>988</SUB>> ]
-"2390" [label = <(&lt;operator&gt;.lessThan,mirror::String::AllocEmptyString&lt;true)<SUB>988</SUB>> ]
-"2397" [label = <(&lt;operator&gt;.bracketedPrimary,(soa.Self(),\012                                                                              allocator_type))<SUB>988</SUB>> ]
-"2418" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>991</SUB>> ]
-"2324" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>980</SUB>> ]
-"2326" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>980</SUB>> ]
-"2375" [label = <(&lt;operator&gt;.indirectFieldAccess,Runtime::Current()-&gt;GetHeap)<SUB>987</SUB>> ]
-"2387" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>988</SUB>> ]
-"2391" [label = <(&lt;operator&gt;.fieldAccess,mirror::String::AllocEmptyString)<SUB>988</SUB>> ]
-"2398" [label = <(&lt;operator&gt;.expressionList,soa.Self(),\012                                                                              allocator_type)<SUB>988</SUB>> ]
-"2376" [label = <(Runtime::Current,Runtime::Current())<SUB>987</SUB>> ]
-"2380" [label = <(FIELD_IDENTIFIER,GetHeap,GetHeap)<SUB>987</SUB>> ]
-"2392" [label = <(&lt;operator&gt;.fieldAccess,mirror::String)<SUB>988</SUB>> ]
-"2395" [label = <(FIELD_IDENTIFIER,AllocEmptyString,AllocEmptyString)<SUB>988</SUB>> ]
-"2399" [label = <(Self,soa.Self())<SUB>988</SUB>> ]
-"2377" [label = <(&lt;operator&gt;.fieldAccess,Runtime::Current)<SUB>987</SUB>> ]
-"2400" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>988</SUB>> ]
-"2379" [label = <(FIELD_IDENTIFIER,Current,Current)<SUB>987</SUB>> ]
-"2402" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>988</SUB>> ]
-"2309" [label = <(METHOD,AllocObject)<SUB>979</SUB>> ]
-"2419" [label = <(METHOD_RETURN,jobject)<SUB>979</SUB>> ]
-  "2313" -> "2318" 
-  "2313" -> "2332" 
-  "2332" -> "2340" 
-  "2334" -> "2357" 
-  "2404" -> "2419" 
-  "2335" -> "2346" 
-  "2342" -> "2334" 
-  "2357" -> "2361" 
-  "2357" -> "2367" 
-  "2364" -> "2379" 
-  "2364" -> "2409" 
-  "2405" -> "2404" 
-  "2336" -> "2335" 
-  "2343" -> "2351" 
-  "2347" -> "2342" 
-  "2361" -> "2419" 
-  "2365" -> "2364" 
-  "2370" -> "2387" 
-  "2382" -> "2419" 
-  "2406" -> "2414" 
-  "2411" -> "2405" 
-  "2317" -> "2324" 
-  "2317" -> "2332" 
-  "2338" -> "2336" 
-  "2344" -> "2343" 
-  "2348" -> "2347" 
-  "2367" -> "2365" 
-  "2372" -> "2370" 
-  "2383" -> "2382" 
-  "2407" -> "2406" 
-  "2412" -> "2418" 
-  "2415" -> "2411" 
-  "2318" -> "2317" 
-  "2322" -> "2329" 
-  "2329" -> "2419" 
-  "2340" -> "2338" 
-  "2346" -> "2344" 
-  "2349" -> "2354" 
-  "2352" -> "2348" 
-  "2373" -> "2372" 
-  "2384" -> "2392" 
-  "2389" -> "2383" 
-  "2409" -> "2407" 
-  "2414" -> "2412" 
-  "2416" -> "2415" 
-  "2323" -> "2322" 
-  "2351" -> "2349" 
-  "2354" -> "2352" 
-  "2374" -> "2381" 
-  "2381" -> "2373" 
-  "2385" -> "2384" 
-  "2390" -> "2402" 
-  "2397" -> "2389" 
-  "2418" -> "2416" 
-  "2324" -> "2326" 
-  "2326" -> "2323" 
-  "2375" -> "2374" 
-  "2387" -> "2385" 
-  "2391" -> "2390" 
-  "2398" -> "2397" 
-  "2376" -> "2380" 
-  "2380" -> "2375" 
-  "2392" -> "2395" 
-  "2395" -> "2391" 
-  "2399" -> "2398" 
-  "2377" -> "2376" 
-  "2400" -> "2399" 
-  "2379" -> "2377" 
-  "2402" -> "2400" 
-  "2309" -> "2313" 
+digraph "GetMethodID" {  
+"2611" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_class))<SUB>981</SUB>> ]
+"2629" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(name))<SUB>982</SUB>> ]
+"2647" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(sig))<SUB>983</SUB>> ]
+"2666" [label = <(soa,soa(env))<SUB>984</SUB>> ]
+"2668" [label = <(RETURN,return FindMethodID(soa, java_class, name, sig, false);,return FindMethodID(soa, java_class, name, sig, false);)<SUB>985</SUB>> ]
+"2669" [label = <(FindMethodID,FindMethodID(soa, java_class, name, sig, false))<SUB>985</SUB>> ]
+"2615" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>981</SUB>> ]
+"2633" [label = <(UNLIKELY,UNLIKELY((name) == nullptr))<SUB>982</SUB>> ]
+"2651" [label = <(UNLIKELY,UNLIKELY((sig) == nullptr))<SUB>983</SUB>> ]
+"2616" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>981</SUB>> ]
+"2620" [label = <(CHECK_NON_NULL_ARGUMENT(java_class),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class == null&quot;))<SUB>981</SUB>> ]
+"2627" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_class),CHECK_NON_NULL_ARGUMENT(java_class))<SUB>981</SUB>> ]
+"2634" [label = <(&lt;operator&gt;.equals,(name) == nullptr)<SUB>982</SUB>> ]
+"2638" [label = <(CHECK_NON_NULL_ARGUMENT(name),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;name == null&quot;))<SUB>982</SUB>> ]
+"2645" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(name),CHECK_NON_NULL_ARGUMENT(name))<SUB>982</SUB>> ]
+"2652" [label = <(&lt;operator&gt;.equals,(sig) == nullptr)<SUB>983</SUB>> ]
+"2656" [label = <(CHECK_NON_NULL_ARGUMENT(sig),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;sig == null&quot;))<SUB>983</SUB>> ]
+"2663" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(sig),CHECK_NON_NULL_ARGUMENT(sig))<SUB>983</SUB>> ]
+"2621" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>981</SUB>> ]
+"2639" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>982</SUB>> ]
+"2657" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>983</SUB>> ]
+"2622" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>981</SUB>> ]
+"2624" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>981</SUB>> ]
+"2640" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>982</SUB>> ]
+"2642" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>982</SUB>> ]
+"2658" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>983</SUB>> ]
+"2660" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>983</SUB>> ]
+"2605" [label = <(METHOD,GetMethodID)<SUB>980</SUB>> ]
+"2675" [label = <(METHOD_RETURN,jmethodID)<SUB>980</SUB>> ]
+  "2611" -> "2616" 
+  "2611" -> "2629" 
+  "2629" -> "2634" 
+  "2629" -> "2647" 
+  "2647" -> "2652" 
+  "2647" -> "2666" 
+  "2666" -> "2669" 
+  "2668" -> "2675" 
+  "2669" -> "2668" 
+  "2615" -> "2622" 
+  "2615" -> "2629" 
+  "2633" -> "2640" 
+  "2633" -> "2647" 
+  "2651" -> "2658" 
+  "2651" -> "2666" 
+  "2616" -> "2615" 
+  "2620" -> "2627" 
+  "2627" -> "2675" 
+  "2634" -> "2633" 
+  "2638" -> "2645" 
+  "2645" -> "2675" 
+  "2652" -> "2651" 
+  "2656" -> "2663" 
+  "2663" -> "2675" 
+  "2621" -> "2620" 
+  "2639" -> "2638" 
+  "2657" -> "2656" 
+  "2622" -> "2624" 
+  "2624" -> "2621" 
+  "2640" -> "2642" 
+  "2642" -> "2639" 
+  "2658" -> "2660" 
+  "2660" -> "2657" 
+  "2605" -> "2611" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/660-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/660-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/660-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/660-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "GetFieldID" {  
-"19969" [label = <(METHOD,GetFieldID)> ]
-"19975" [label = <(METHOD_RETURN,ANY)> ]
-  "19969" -> "19975" 
+digraph "ReleaseByteArrayElements" {  
+"19643" [label = <(METHOD,ReleaseByteArrayElements)> ]
+"19649" [label = <(METHOD_RETURN,ANY)> ]
+  "19643" -> "19649" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/661-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/661-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/661-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/661-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "GetStaticFieldID" {  
-"19976" [label = <(METHOD,GetStaticFieldID)> ]
-"19982" [label = <(METHOD_RETURN,ANY)> ]
-  "19976" -> "19982" 
+digraph "ReleaseShortArrayElements" {  
+"19650" [label = <(METHOD,ReleaseShortArrayElements)> ]
+"19656" [label = <(METHOD_RETURN,ANY)> ]
+  "19650" -> "19656" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/662-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/662-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/662-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/662-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "ASSERT_TRUE" {  
-"19983" [label = <(METHOD,ASSERT_TRUE)> ]
-"19986" [label = <(METHOD_RETURN,ANY)> ]
-  "19983" -> "19986" 
+digraph "ReleaseCharArrayElements" {  
+"19657" [label = <(METHOD,ReleaseCharArrayElements)> ]
+"19663" [label = <(METHOD_RETURN,ANY)> ]
+  "19657" -> "19663" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/663-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/663-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/663-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/663-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "GetStaticMethodID" {  
-"19987" [label = <(METHOD,GetStaticMethodID)> ]
-"19993" [label = <(METHOD_RETURN,ANY)> ]
-  "19987" -> "19993" 
+digraph "ReleaseIntArrayElements" {  
+"19664" [label = <(METHOD,ReleaseIntArrayElements)> ]
+"19670" [label = <(METHOD_RETURN,ANY)> ]
+  "19664" -> "19670" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/664-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/664-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/664-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/664-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "ToReflectedField" {  
-"19994" [label = <(METHOD,ToReflectedField)> ]
-"20000" [label = <(METHOD_RETURN,ANY)> ]
-  "19994" -> "20000" 
+digraph "ReleaseLongArrayElements" {  
+"19671" [label = <(METHOD,ReleaseLongArrayElements)> ]
+"19677" [label = <(METHOD_RETURN,ANY)> ]
+  "19671" -> "19677" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/665-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/665-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/665-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/665-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "FromReflectedField" {  
-"20001" [label = <(METHOD,FromReflectedField)> ]
-"20005" [label = <(METHOD_RETURN,ANY)> ]
-  "20001" -> "20005" 
+digraph "ReleaseFloatArrayElements" {  
+"19678" [label = <(METHOD,ReleaseFloatArrayElements)> ]
+"19684" [label = <(METHOD_RETURN,ANY)> ]
+  "19678" -> "19684" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/666-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/666-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/666-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/666-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "ASSERT_EQ" {  
-"20006" [label = <(METHOD,ASSERT_EQ)> ]
-"20010" [label = <(METHOD_RETURN,ANY)> ]
-  "20006" -> "20010" 
+digraph "ReleaseDoubleArrayElements" {  
+"19685" [label = <(METHOD,ReleaseDoubleArrayElements)> ]
+"19691" [label = <(METHOD_RETURN,ANY)> ]
+  "19685" -> "19691" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/667-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/667-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/667-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/667-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "ToReflectedMethod" {  
-"20011" [label = <(METHOD,ToReflectedMethod)> ]
-"20017" [label = <(METHOD_RETURN,ANY)> ]
-  "20011" -> "20017" 
+digraph "ReleaseBooleanArrayElements" {  
+"19692" [label = <(METHOD,ReleaseBooleanArrayElements)> ]
+"19698" [label = <(METHOD_RETURN,ANY)> ]
+  "19692" -> "19698" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/668-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/668-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/668-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/668-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "FromReflectedMethod" {  
-"20018" [label = <(METHOD,FromReflectedMethod)> ]
-"20022" [label = <(METHOD_RETURN,ANY)> ]
-  "20018" -> "20022" 
+digraph "GetPrimitiveArrayCritical" {  
+"19699" [label = <(METHOD,GetPrimitiveArrayCritical)> ]
+"19704" [label = <(METHOD_RETURN,ANY)> ]
+  "19699" -> "19704" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/669-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/669-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/669-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/669-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "RegisterNatives" {  
-"20023" [label = <(METHOD,RegisterNatives)> ]
-"20029" [label = <(METHOD_RETURN,ANY)> ]
-  "20023" -> "20029" 
+digraph "ReleasePrimitiveArrayCritical" {  
+"19705" [label = <(METHOD,ReleasePrimitiveArrayCritical)> ]
+"19711" [label = <(METHOD_RETURN,ANY)> ]
+  "19705" -> "19711" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/67-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/67-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/67-cfg.dot	2023-06-07 19:35:28.247384345 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/67-cfg.dot	2023-06-07 19:35:34.777383774 +0330
@@ -1,53 +1,65 @@
-digraph "NewObject" {  
-"2427" [label = <(va_start,va_start(args, mid))<SUB>996</SUB>> ]
-"2431" [label = <(free_args_later,free_args_later(&amp;args))<SUB>997</SUB>> ]
-"2434" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_class))<SUB>998</SUB>> ]
-"2452" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>999</SUB>> ]
-"2471" [label = <(&lt;operator&gt;.assignment,result = NewObjectV(env, java_class, mid, args))<SUB>1000</SUB>> ]
-"2478" [label = <(RETURN,return result;,return result;)<SUB>1001</SUB>> ]
-"2432" [label = <(&lt;operator&gt;.addressOf,&amp;args)<SUB>997</SUB>> ]
-"2473" [label = <(NewObjectV,NewObjectV(env, java_class, mid, args))<SUB>1000</SUB>> ]
-"2438" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>998</SUB>> ]
-"2456" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>999</SUB>> ]
-"2439" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>998</SUB>> ]
-"2443" [label = <(CHECK_NON_NULL_ARGUMENT(java_class),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class == null&quot;))<SUB>998</SUB>> ]
-"2450" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_class),CHECK_NON_NULL_ARGUMENT(java_class))<SUB>998</SUB>> ]
-"2457" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>999</SUB>> ]
-"2461" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>999</SUB>> ]
-"2468" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>999</SUB>> ]
-"2444" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>998</SUB>> ]
-"2462" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>999</SUB>> ]
-"2445" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>998</SUB>> ]
-"2447" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>998</SUB>> ]
-"2463" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>999</SUB>> ]
-"2465" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>999</SUB>> ]
-"2421" [label = <(METHOD,NewObject)<SUB>994</SUB>> ]
-"2480" [label = <(METHOD_RETURN,jobject)<SUB>994</SUB>> ]
-  "2427" -> "2432" 
-  "2431" -> "2434" 
-  "2434" -> "2439" 
-  "2434" -> "2452" 
-  "2452" -> "2457" 
-  "2452" -> "2473" 
-  "2471" -> "2478" 
-  "2478" -> "2480" 
-  "2432" -> "2431" 
-  "2473" -> "2471" 
-  "2438" -> "2445" 
-  "2438" -> "2452" 
-  "2456" -> "2463" 
-  "2456" -> "2473" 
-  "2439" -> "2438" 
-  "2443" -> "2450" 
-  "2450" -> "2480" 
-  "2457" -> "2456" 
-  "2461" -> "2468" 
-  "2468" -> "2480" 
-  "2444" -> "2443" 
-  "2462" -> "2461" 
-  "2445" -> "2447" 
-  "2447" -> "2444" 
-  "2463" -> "2465" 
-  "2465" -> "2462" 
-  "2421" -> "2427" 
+digraph "GetStaticMethodID" {  
+"2683" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_class))<SUB>990</SUB>> ]
+"2701" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(name))<SUB>991</SUB>> ]
+"2719" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(sig))<SUB>992</SUB>> ]
+"2738" [label = <(soa,soa(env))<SUB>993</SUB>> ]
+"2740" [label = <(RETURN,return FindMethodID(soa, java_class, name, sig, true);,return FindMethodID(soa, java_class, name, sig, true);)<SUB>994</SUB>> ]
+"2741" [label = <(FindMethodID,FindMethodID(soa, java_class, name, sig, true))<SUB>994</SUB>> ]
+"2687" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>990</SUB>> ]
+"2705" [label = <(UNLIKELY,UNLIKELY((name) == nullptr))<SUB>991</SUB>> ]
+"2723" [label = <(UNLIKELY,UNLIKELY((sig) == nullptr))<SUB>992</SUB>> ]
+"2688" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>990</SUB>> ]
+"2692" [label = <(CHECK_NON_NULL_ARGUMENT(java_class),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class == null&quot;))<SUB>990</SUB>> ]
+"2699" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_class),CHECK_NON_NULL_ARGUMENT(java_class))<SUB>990</SUB>> ]
+"2706" [label = <(&lt;operator&gt;.equals,(name) == nullptr)<SUB>991</SUB>> ]
+"2710" [label = <(CHECK_NON_NULL_ARGUMENT(name),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;name == null&quot;))<SUB>991</SUB>> ]
+"2717" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(name),CHECK_NON_NULL_ARGUMENT(name))<SUB>991</SUB>> ]
+"2724" [label = <(&lt;operator&gt;.equals,(sig) == nullptr)<SUB>992</SUB>> ]
+"2728" [label = <(CHECK_NON_NULL_ARGUMENT(sig),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;sig == null&quot;))<SUB>992</SUB>> ]
+"2735" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(sig),CHECK_NON_NULL_ARGUMENT(sig))<SUB>992</SUB>> ]
+"2693" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>990</SUB>> ]
+"2711" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>991</SUB>> ]
+"2729" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>992</SUB>> ]
+"2694" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>990</SUB>> ]
+"2696" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>990</SUB>> ]
+"2712" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>991</SUB>> ]
+"2714" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>991</SUB>> ]
+"2730" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>992</SUB>> ]
+"2732" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>992</SUB>> ]
+"2677" [label = <(METHOD,GetStaticMethodID)<SUB>988</SUB>> ]
+"2747" [label = <(METHOD_RETURN,jmethodID)<SUB>988</SUB>> ]
+  "2683" -> "2688" 
+  "2683" -> "2701" 
+  "2701" -> "2706" 
+  "2701" -> "2719" 
+  "2719" -> "2724" 
+  "2719" -> "2738" 
+  "2738" -> "2741" 
+  "2740" -> "2747" 
+  "2741" -> "2740" 
+  "2687" -> "2694" 
+  "2687" -> "2701" 
+  "2705" -> "2712" 
+  "2705" -> "2719" 
+  "2723" -> "2730" 
+  "2723" -> "2738" 
+  "2688" -> "2687" 
+  "2692" -> "2699" 
+  "2699" -> "2747" 
+  "2706" -> "2705" 
+  "2710" -> "2717" 
+  "2717" -> "2747" 
+  "2724" -> "2723" 
+  "2728" -> "2735" 
+  "2735" -> "2747" 
+  "2693" -> "2692" 
+  "2711" -> "2710" 
+  "2729" -> "2728" 
+  "2694" -> "2696" 
+  "2696" -> "2693" 
+  "2712" -> "2714" 
+  "2714" -> "2711" 
+  "2730" -> "2732" 
+  "2732" -> "2729" 
+  "2677" -> "2683" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/670-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/670-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/670-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/670-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "UnregisterNatives" {  
-"20030" [label = <(METHOD,UnregisterNatives)> ]
-"20034" [label = <(METHOD_RETURN,ANY)> ]
-  "20030" -> "20034" 
+digraph "GetByteArrayRegion" {  
+"19712" [label = <(METHOD,GetByteArrayRegion)> ]
+"19719" [label = <(METHOD_RETURN,ANY)> ]
+  "19712" -> "19719" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/671-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/671-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/671-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/671-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "NewBooleanArray" {  
-"20035" [label = <(METHOD,NewBooleanArray)> ]
-"20039" [label = <(METHOD_RETURN,ANY)> ]
-  "20035" -> "20039" 
+digraph "GetShortArrayRegion" {  
+"19720" [label = <(METHOD,GetShortArrayRegion)> ]
+"19727" [label = <(METHOD_RETURN,ANY)> ]
+  "19720" -> "19727" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/672-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/672-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/672-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/672-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "GetByteArrayElements" {  
-"20040" [label = <(METHOD,GetByteArrayElements)> ]
-"20045" [label = <(METHOD_RETURN,ANY)> ]
-  "20040" -> "20045" 
+digraph "GetCharArrayRegion" {  
+"19728" [label = <(METHOD,GetCharArrayRegion)> ]
+"19735" [label = <(METHOD_RETURN,ANY)> ]
+  "19728" -> "19735" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/673-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/673-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/673-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/673-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "GetShortArrayElements" {  
-"20046" [label = <(METHOD,GetShortArrayElements)> ]
-"20051" [label = <(METHOD_RETURN,ANY)> ]
-  "20046" -> "20051" 
+digraph "GetIntArrayRegion" {  
+"19736" [label = <(METHOD,GetIntArrayRegion)> ]
+"19743" [label = <(METHOD_RETURN,ANY)> ]
+  "19736" -> "19743" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/674-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/674-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/674-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/674-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "GetCharArrayElements" {  
-"20052" [label = <(METHOD,GetCharArrayElements)> ]
-"20057" [label = <(METHOD_RETURN,ANY)> ]
-  "20052" -> "20057" 
+digraph "GetLongArrayRegion" {  
+"19744" [label = <(METHOD,GetLongArrayRegion)> ]
+"19751" [label = <(METHOD_RETURN,ANY)> ]
+  "19744" -> "19751" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/675-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/675-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/675-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/675-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "GetIntArrayElements" {  
-"20058" [label = <(METHOD,GetIntArrayElements)> ]
-"20063" [label = <(METHOD_RETURN,ANY)> ]
-  "20058" -> "20063" 
+digraph "GetFloatArrayRegion" {  
+"19752" [label = <(METHOD,GetFloatArrayRegion)> ]
+"19759" [label = <(METHOD_RETURN,ANY)> ]
+  "19752" -> "19759" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/676-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/676-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/676-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/676-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "GetLongArrayElements" {  
-"20064" [label = <(METHOD,GetLongArrayElements)> ]
-"20069" [label = <(METHOD_RETURN,ANY)> ]
-  "20064" -> "20069" 
+digraph "GetDoubleArrayRegion" {  
+"19760" [label = <(METHOD,GetDoubleArrayRegion)> ]
+"19767" [label = <(METHOD_RETURN,ANY)> ]
+  "19760" -> "19767" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/677-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/677-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/677-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/677-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "GetFloatArrayElements" {  
-"20070" [label = <(METHOD,GetFloatArrayElements)> ]
-"20075" [label = <(METHOD_RETURN,ANY)> ]
-  "20070" -> "20075" 
+digraph "GetBooleanArrayRegion" {  
+"19768" [label = <(METHOD,GetBooleanArrayRegion)> ]
+"19775" [label = <(METHOD_RETURN,ANY)> ]
+  "19768" -> "19775" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/678-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/678-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/678-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/678-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "GetDoubleArrayElements" {  
-"20076" [label = <(METHOD,GetDoubleArrayElements)> ]
-"20081" [label = <(METHOD_RETURN,ANY)> ]
-  "20076" -> "20081" 
+digraph "SetByteArrayRegion" {  
+"19776" [label = <(METHOD,SetByteArrayRegion)> ]
+"19783" [label = <(METHOD_RETURN,ANY)> ]
+  "19776" -> "19783" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/679-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/679-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/679-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/679-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "NewByteArray" {  
-"20082" [label = <(METHOD,NewByteArray)> ]
-"20086" [label = <(METHOD_RETURN,ANY)> ]
-  "20082" -> "20086" 
+digraph "SetShortArrayRegion" {  
+"19784" [label = <(METHOD,SetShortArrayRegion)> ]
+"19791" [label = <(METHOD_RETURN,ANY)> ]
+  "19784" -> "19791" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/68-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/68-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/68-cfg.dot	2023-06-07 19:35:28.247384345 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/68-cfg.dot	2023-06-07 19:35:34.777383774 +0330
@@ -1,169 +1,69 @@
-digraph "NewObjectV" {  
-"2488" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_class))<SUB>1005</SUB>> ]
-"2506" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>1006</SUB>> ]
-"2525" [label = <(soa,soa(env))<SUB>1007</SUB>> ]
-"2527" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c = EnsureInitialized(soa.Self(),\012                                                soa.Decode&lt;mirror::Class&gt;(java_class)))<SUB>1008</SUB>> ]
-"2586" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; result = c-&gt;AllocObject(soa.Self()))<SUB>1019</SUB>> ]
-"2610" [label = <(&lt;operator&gt;.assignment,local_result = soa.AddLocalReference&lt;jobject&gt;(result))<SUB>1023</SUB>> ]
-"2619" [label = <(CallNonvirtualVoidMethodV,CallNonvirtualVoidMethodV(env, local_result, java_class, mid, args))<SUB>1024</SUB>> ]
-"2636" [label = <(RETURN,return local_result;,return local_result;)<SUB>1028</SUB>> ]
-"2528" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c)<SUB>1008</SUB>> ]
-"2535" [label = <(EnsureInitialized,EnsureInitialized(soa.Self(),\012                                                soa.Decode&lt;mirror::Class&gt;(java_class)))<SUB>1008</SUB>> ]
-"2550" [label = <(&lt;operator&gt;.equals,c == nullptr)<SUB>1010</SUB>> ]
-"2557" [label = <(IsStringClass,c-&gt;IsStringClass())<SUB>1013</SUB>> ]
-"2587" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; result)<SUB>1019</SUB>> ]
-"2594" [label = <(AllocObject,c-&gt;AllocObject(soa.Self()))<SUB>1019</SUB>> ]
-"2603" [label = <(&lt;operator&gt;.equals,result == nullptr)<SUB>1020</SUB>> ]
-"2612" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result))<SUB>1023</SUB>> ]
-"2626" [label = <(IsExceptionPending,soa.Self()-&gt;IsExceptionPending())<SUB>1025</SUB>> ]
-"2529" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>1008</SUB>> ]
-"2536" [label = <(Self,soa.Self())<SUB>1008</SUB>> ]
-"2540" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>1009</SUB>> ]
-"2554" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>1011</SUB>> ]
-"2558" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;IsStringClass)<SUB>1013</SUB>> ]
-"2563" [label = <(&lt;operator&gt;.assignment,sf_mid = jni::EncodeArtMethod(\012 WellKnownClasses::StringInitToStringFactory(jni::DecodeArtMethod(mid))))<SUB>1015</SUB>> ]
-"2578" [label = <(RETURN,return CallStaticObjectMethodV(env, WellKnownClasses::java_lang_StringFactory, sf_mid, args);,return CallStaticObjectMethodV(env, WellKnownClasses::java_lang_StringFactory, sf_mid, args);)<SUB>1017</SUB>> ]
-"2588" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>1019</SUB>> ]
-"2595" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;AllocObject)<SUB>1019</SUB>> ]
-"2598" [label = <(Self,soa.Self())<SUB>1019</SUB>> ]
-"2607" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>1021</SUB>> ]
-"2613" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>1023</SUB>> ]
-"2627" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;IsExceptionPending)<SUB>1025</SUB>> ]
-"2634" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>1026</SUB>> ]
-"2492" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>1005</SUB>> ]
-"2510" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1006</SUB>> ]
-"2531" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>1008</SUB>> ]
-"2537" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>1008</SUB>> ]
-"2541" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>1009</SUB>> ]
-"2560" [label = <(FIELD_IDENTIFIER,IsStringClass,IsStringClass)<SUB>1013</SUB>> ]
-"2565" [label = <(jni::EncodeArtMethod,jni::EncodeArtMethod(\012 WellKnownClasses::StringInitToStringFactory(jni::DecodeArtMethod(mid))))<SUB>1015</SUB>> ]
-"2579" [label = <(CallStaticObjectMethodV,CallStaticObjectMethodV(env, WellKnownClasses::java_lang_StringFactory, sf_mid, args))<SUB>1017</SUB>> ]
-"2590" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1019</SUB>> ]
-"2597" [label = <(FIELD_IDENTIFIER,AllocObject,AllocObject)<SUB>1019</SUB>> ]
-"2599" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>1019</SUB>> ]
-"2614" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1023</SUB>> ]
-"2628" [label = <(Self,soa.Self())<SUB>1025</SUB>> ]
-"2632" [label = <(FIELD_IDENTIFIER,IsExceptionPending,IsExceptionPending)<SUB>1025</SUB>> ]
-"2493" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>1005</SUB>> ]
-"2497" [label = <(CHECK_NON_NULL_ARGUMENT(java_class),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class == null&quot;))<SUB>1005</SUB>> ]
-"2504" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_class),CHECK_NON_NULL_ARGUMENT(java_class))<SUB>1005</SUB>> ]
-"2511" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1006</SUB>> ]
-"2515" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1006</SUB>> ]
-"2522" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>1006</SUB>> ]
-"2533" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>1008</SUB>> ]
-"2539" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>1008</SUB>> ]
-"2542" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1009</SUB>> ]
-"2545" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>1009</SUB>> ]
-"2566" [label = <(&lt;operator&gt;.fieldAccess,jni::EncodeArtMethod)<SUB>1015</SUB>> ]
-"2569" [label = <(WellKnownClasses::StringInitToStringFactory,WellKnownClasses::StringInitToStringFactory(jni::DecodeArtMethod(mid)))<SUB>1016</SUB>> ]
-"2581" [label = <(&lt;operator&gt;.fieldAccess,WellKnownClasses::java_lang_StringFactory)<SUB>1017</SUB>> ]
-"2592" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1019</SUB>> ]
-"2601" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>1019</SUB>> ]
-"2616" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1023</SUB>> ]
-"2629" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>1025</SUB>> ]
-"2498" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1005</SUB>> ]
-"2516" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1006</SUB>> ]
-"2544" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1009</SUB>> ]
-"2547" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>1009</SUB>> ]
-"2568" [label = <(FIELD_IDENTIFIER,EncodeArtMethod,EncodeArtMethod)<SUB>1015</SUB>> ]
-"2570" [label = <(&lt;operator&gt;.fieldAccess,WellKnownClasses::StringInitToStringFactory)<SUB>1016</SUB>> ]
-"2573" [label = <(jni::DecodeArtMethod,jni::DecodeArtMethod(mid))<SUB>1016</SUB>> ]
-"2583" [label = <(FIELD_IDENTIFIER,java_lang_StringFactory,java_lang_StringFactory)<SUB>1017</SUB>> ]
-"2631" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>1025</SUB>> ]
-"2499" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1005</SUB>> ]
-"2501" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1005</SUB>> ]
-"2517" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1006</SUB>> ]
-"2519" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1006</SUB>> ]
-"2572" [label = <(FIELD_IDENTIFIER,StringInitToStringFactory,StringInitToStringFactory)<SUB>1016</SUB>> ]
-"2574" [label = <(&lt;operator&gt;.fieldAccess,jni::DecodeArtMethod)<SUB>1016</SUB>> ]
-"2576" [label = <(FIELD_IDENTIFIER,DecodeArtMethod,DecodeArtMethod)<SUB>1016</SUB>> ]
-"2482" [label = <(METHOD,NewObjectV)<SUB>1004</SUB>> ]
-"2638" [label = <(METHOD_RETURN,jobject)<SUB>1004</SUB>> ]
-  "2488" -> "2493" 
-  "2488" -> "2506" 
-  "2506" -> "2511" 
-  "2506" -> "2525" 
-  "2525" -> "2533" 
-  "2527" -> "2550" 
-  "2586" -> "2603" 
-  "2610" -> "2619" 
-  "2619" -> "2631" 
-  "2636" -> "2638" 
-  "2528" -> "2539" 
-  "2535" -> "2527" 
-  "2550" -> "2554" 
-  "2550" -> "2560" 
-  "2557" -> "2568" 
-  "2557" -> "2592" 
-  "2587" -> "2597" 
-  "2594" -> "2586" 
-  "2603" -> "2607" 
-  "2603" -> "2616" 
-  "2612" -> "2610" 
-  "2626" -> "2634" 
-  "2626" -> "2636" 
-  "2529" -> "2528" 
-  "2536" -> "2544" 
-  "2540" -> "2535" 
-  "2554" -> "2638" 
-  "2558" -> "2557" 
-  "2563" -> "2583" 
-  "2578" -> "2638" 
-  "2588" -> "2587" 
-  "2595" -> "2601" 
-  "2598" -> "2594" 
-  "2607" -> "2638" 
-  "2613" -> "2612" 
-  "2627" -> "2626" 
-  "2634" -> "2638" 
-  "2492" -> "2499" 
-  "2492" -> "2506" 
-  "2510" -> "2517" 
-  "2510" -> "2525" 
-  "2531" -> "2529" 
-  "2537" -> "2536" 
-  "2541" -> "2540" 
-  "2560" -> "2558" 
-  "2565" -> "2563" 
-  "2579" -> "2578" 
-  "2590" -> "2588" 
-  "2597" -> "2595" 
-  "2599" -> "2598" 
-  "2614" -> "2613" 
-  "2628" -> "2632" 
-  "2632" -> "2627" 
-  "2493" -> "2492" 
-  "2497" -> "2504" 
-  "2504" -> "2638" 
-  "2511" -> "2510" 
-  "2515" -> "2522" 
-  "2522" -> "2638" 
-  "2533" -> "2531" 
-  "2539" -> "2537" 
-  "2542" -> "2547" 
-  "2545" -> "2541" 
-  "2566" -> "2572" 
-  "2569" -> "2565" 
-  "2581" -> "2579" 
-  "2592" -> "2590" 
-  "2601" -> "2599" 
-  "2616" -> "2614" 
-  "2629" -> "2628" 
-  "2498" -> "2497" 
-  "2516" -> "2515" 
-  "2544" -> "2542" 
-  "2547" -> "2545" 
-  "2568" -> "2566" 
-  "2570" -> "2576" 
-  "2573" -> "2569" 
-  "2583" -> "2581" 
-  "2631" -> "2629" 
-  "2499" -> "2501" 
-  "2501" -> "2498" 
-  "2517" -> "2519" 
-  "2519" -> "2516" 
-  "2572" -> "2570" 
-  "2574" -> "2573" 
-  "2576" -> "2574" 
-  "2482" -> "2488" 
+digraph "CallObjectMethod" {  
+"2755" [label = <(va_start,va_start(ap, mid))<SUB>999</SUB>> ]
+"2759" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1000</SUB>> ]
+"2762" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(obj))<SUB>1001</SUB>> ]
+"2780" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>1002</SUB>> ]
+"2799" [label = <(soa,soa(env))<SUB>1003</SUB>> ]
+"2802" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap)))<SUB>1004</SUB>> ]
+"2808" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());)<SUB>1005</SUB>> ]
+"2760" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1000</SUB>> ]
+"2803" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>1004</SUB>> ]
+"2809" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>1005</SUB>> ]
+"2810" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>1005</SUB>> ]
+"2815" [label = <(GetL,result.GetL())<SUB>1005</SUB>> ]
+"2766" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1001</SUB>> ]
+"2784" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1002</SUB>> ]
+"2811" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1005</SUB>> ]
+"2816" [label = <(&lt;operator&gt;.fieldAccess,result.GetL)<SUB>1005</SUB>> ]
+"2767" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1001</SUB>> ]
+"2771" [label = <(CHECK_NON_NULL_ARGUMENT(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1001</SUB>> ]
+"2778" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(obj),CHECK_NON_NULL_ARGUMENT(obj))<SUB>1001</SUB>> ]
+"2785" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1002</SUB>> ]
+"2789" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1002</SUB>> ]
+"2796" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>1002</SUB>> ]
+"2813" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1005</SUB>> ]
+"2818" [label = <(FIELD_IDENTIFIER,GetL,GetL)<SUB>1005</SUB>> ]
+"2772" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1001</SUB>> ]
+"2790" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1002</SUB>> ]
+"2773" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1001</SUB>> ]
+"2775" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1001</SUB>> ]
+"2791" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1002</SUB>> ]
+"2793" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1002</SUB>> ]
+"2749" [label = <(METHOD,CallObjectMethod)<SUB>997</SUB>> ]
+"2819" [label = <(METHOD_RETURN,jobject)<SUB>997</SUB>> ]
+  "2755" -> "2760" 
+  "2759" -> "2762" 
+  "2762" -> "2767" 
+  "2762" -> "2780" 
+  "2780" -> "2785" 
+  "2780" -> "2799" 
+  "2799" -> "2803" 
+  "2802" -> "2813" 
+  "2808" -> "2819" 
+  "2760" -> "2759" 
+  "2803" -> "2802" 
+  "2809" -> "2808" 
+  "2810" -> "2818" 
+  "2815" -> "2809" 
+  "2766" -> "2773" 
+  "2766" -> "2780" 
+  "2784" -> "2791" 
+  "2784" -> "2799" 
+  "2811" -> "2810" 
+  "2816" -> "2815" 
+  "2767" -> "2766" 
+  "2771" -> "2778" 
+  "2778" -> "2819" 
+  "2785" -> "2784" 
+  "2789" -> "2796" 
+  "2796" -> "2819" 
+  "2813" -> "2811" 
+  "2818" -> "2816" 
+  "2772" -> "2771" 
+  "2790" -> "2789" 
+  "2773" -> "2775" 
+  "2775" -> "2772" 
+  "2791" -> "2793" 
+  "2793" -> "2790" 
+  "2749" -> "2755" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/680-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/680-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/680-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/680-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "GetBooleanArrayElements" {  
-"20087" [label = <(METHOD,GetBooleanArrayElements)> ]
-"20092" [label = <(METHOD_RETURN,ANY)> ]
-  "20087" -> "20092" 
+digraph "SetCharArrayRegion" {  
+"19792" [label = <(METHOD,SetCharArrayRegion)> ]
+"19799" [label = <(METHOD_RETURN,ANY)> ]
+  "19792" -> "19799" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/681-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/681-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/681-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/681-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "NewStringUTF" {  
-"20093" [label = <(METHOD,NewStringUTF)> ]
-"20097" [label = <(METHOD_RETURN,ANY)> ]
-  "20093" -> "20097" 
+digraph "SetIntArrayRegion" {  
+"19800" [label = <(METHOD,SetIntArrayRegion)> ]
+"19807" [label = <(METHOD_RETURN,ANY)> ]
+  "19800" -> "19807" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/682-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/682-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/682-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/682-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "ReleaseByteArrayElements" {  
-"20098" [label = <(METHOD,ReleaseByteArrayElements)> ]
-"20104" [label = <(METHOD_RETURN,ANY)> ]
-  "20098" -> "20104" 
+digraph "SetLongArrayRegion" {  
+"19808" [label = <(METHOD,SetLongArrayRegion)> ]
+"19815" [label = <(METHOD_RETURN,ANY)> ]
+  "19808" -> "19815" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/683-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/683-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/683-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/683-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "ReleaseShortArrayElements" {  
-"20105" [label = <(METHOD,ReleaseShortArrayElements)> ]
-"20111" [label = <(METHOD_RETURN,ANY)> ]
-  "20105" -> "20111" 
+digraph "SetFloatArrayRegion" {  
+"19816" [label = <(METHOD,SetFloatArrayRegion)> ]
+"19823" [label = <(METHOD_RETURN,ANY)> ]
+  "19816" -> "19823" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/684-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/684-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/684-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/684-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "ReleaseCharArrayElements" {  
-"20112" [label = <(METHOD,ReleaseCharArrayElements)> ]
-"20118" [label = <(METHOD_RETURN,ANY)> ]
-  "20112" -> "20118" 
+digraph "SetDoubleArrayRegion" {  
+"19824" [label = <(METHOD,SetDoubleArrayRegion)> ]
+"19831" [label = <(METHOD_RETURN,ANY)> ]
+  "19824" -> "19831" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/685-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/685-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/685-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/685-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "ReleaseIntArrayElements" {  
-"20119" [label = <(METHOD,ReleaseIntArrayElements)> ]
-"20125" [label = <(METHOD_RETURN,ANY)> ]
-  "20119" -> "20125" 
+digraph "SetBooleanArrayRegion" {  
+"19832" [label = <(METHOD,SetBooleanArrayRegion)> ]
+"19839" [label = <(METHOD_RETURN,ANY)> ]
+  "19832" -> "19839" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/686-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/686-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/686-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/686-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "ReleaseLongArrayElements" {  
-"20126" [label = <(METHOD,ReleaseLongArrayElements)> ]
-"20132" [label = <(METHOD_RETURN,ANY)> ]
-  "20126" -> "20132" 
+digraph "NewObjectArray" {  
+"19840" [label = <(METHOD,NewObjectArray)> ]
+"19846" [label = <(METHOD_RETURN,ANY)> ]
+  "19840" -> "19846" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/687-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/687-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/687-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/687-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "ReleaseFloatArrayElements" {  
-"20133" [label = <(METHOD,ReleaseFloatArrayElements)> ]
-"20139" [label = <(METHOD_RETURN,ANY)> ]
-  "20133" -> "20139" 
+digraph "&lt;operator&gt;.minus" {  
+"19847" [label = <(METHOD,&lt;operator&gt;.minus)> ]
+"19850" [label = <(METHOD_RETURN,ANY)> ]
+  "19847" -> "19850" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/688-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/688-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/688-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/688-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "ReleaseDoubleArrayElements" {  
-"20140" [label = <(METHOD,ReleaseDoubleArrayElements)> ]
-"20146" [label = <(METHOD_RETURN,ANY)> ]
-  "20140" -> "20146" 
+digraph "::min" {  
+"19851" [label = <(METHOD,::min)> ]
+"19854" [label = <(METHOD_RETURN,ANY)> ]
+  "19851" -> "19854" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/689-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/689-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/689-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/689-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "ReleaseBooleanArrayElements" {  
-"20147" [label = <(METHOD,ReleaseBooleanArrayElements)> ]
-"20153" [label = <(METHOD_RETURN,ANY)> ]
-  "20147" -> "20153" 
+digraph "Thread::Current" {  
+"19855" [label = <(METHOD,Thread::Current)> ]
+"19858" [label = <(METHOD_RETURN,ANY)> ]
+  "19855" -> "19858" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/69-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/69-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/69-cfg.dot	2023-06-07 19:35:28.247384345 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/69-cfg.dot	2023-06-07 19:35:34.777383774 +0330
@@ -1,169 +1,63 @@
-digraph "NewObjectA" {  
-"2646" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_class))<SUB>1032</SUB>> ]
-"2664" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>1033</SUB>> ]
-"2683" [label = <(soa,soa(env))<SUB>1034</SUB>> ]
-"2685" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Class&gt; c = EnsureInitialized(soa.Self(),\012                                                soa.Decode&lt;mirror::Class&gt;(java_class)))<SUB>1035</SUB>> ]
-"2744" [label = <(&lt;operator&gt;.assignment,ObjPtr&lt;mirror::Object&gt; result = c-&gt;AllocObject(soa.Self()))<SUB>1046</SUB>> ]
-"2768" [label = <(&lt;operator&gt;.assignment,local_result = soa.AddLocalReference&lt;jobjectArray&gt;(result))<SUB>1050</SUB>> ]
-"2777" [label = <(CallNonvirtualVoidMethodA,CallNonvirtualVoidMethodA(env, local_result, java_class, mid, args))<SUB>1051</SUB>> ]
-"2794" [label = <(RETURN,return local_result;,return local_result;)<SUB>1055</SUB>> ]
-"2686" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Class&gt; c)<SUB>1035</SUB>> ]
-"2693" [label = <(EnsureInitialized,EnsureInitialized(soa.Self(),\012                                                soa.Decode&lt;mirror::Class&gt;(java_class)))<SUB>1035</SUB>> ]
-"2708" [label = <(&lt;operator&gt;.equals,c == nullptr)<SUB>1037</SUB>> ]
-"2715" [label = <(IsStringClass,c-&gt;IsStringClass())<SUB>1040</SUB>> ]
-"2745" [label = <(&lt;operator&gt;.greaterThan,ObjPtr&lt;mirror::Object&gt; result)<SUB>1046</SUB>> ]
-"2752" [label = <(AllocObject,c-&gt;AllocObject(soa.Self()))<SUB>1046</SUB>> ]
-"2761" [label = <(&lt;operator&gt;.equals,result == nullptr)<SUB>1047</SUB>> ]
-"2770" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobjectArray&gt;(result))<SUB>1050</SUB>> ]
-"2784" [label = <(IsExceptionPending,soa.Self()-&gt;IsExceptionPending())<SUB>1052</SUB>> ]
-"2687" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Class)<SUB>1035</SUB>> ]
-"2694" [label = <(Self,soa.Self())<SUB>1035</SUB>> ]
-"2698" [label = <(&lt;operator&gt;.greaterThan,soa.Decode&lt;mirror::Class&gt;(java_class))<SUB>1036</SUB>> ]
-"2712" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>1038</SUB>> ]
-"2716" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;IsStringClass)<SUB>1040</SUB>> ]
-"2721" [label = <(&lt;operator&gt;.assignment,sf_mid = jni::EncodeArtMethod(\012 WellKnownClasses::StringInitToStringFactory(jni::DecodeArtMethod(mid))))<SUB>1042</SUB>> ]
-"2736" [label = <(RETURN,return CallStaticObjectMethodA(env, WellKnownClasses::java_lang_StringFactory, sf_mid, args);,return CallStaticObjectMethodA(env, WellKnownClasses::java_lang_StringFactory, sf_mid, args);)<SUB>1044</SUB>> ]
-"2746" [label = <(&lt;operator&gt;.lessThan,ObjPtr&lt;mirror::Object)<SUB>1046</SUB>> ]
-"2753" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;AllocObject)<SUB>1046</SUB>> ]
-"2756" [label = <(Self,soa.Self())<SUB>1046</SUB>> ]
-"2765" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>1048</SUB>> ]
-"2771" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobjectArray)<SUB>1050</SUB>> ]
-"2785" [label = <(&lt;operator&gt;.indirectFieldAccess,soa.Self()-&gt;IsExceptionPending)<SUB>1052</SUB>> ]
-"2792" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>1053</SUB>> ]
-"2650" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>1032</SUB>> ]
-"2668" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1033</SUB>> ]
-"2689" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>1035</SUB>> ]
-"2695" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>1035</SUB>> ]
-"2699" [label = <(&lt;operator&gt;.lessThan,soa.Decode&lt;mirror::Class)<SUB>1036</SUB>> ]
-"2718" [label = <(FIELD_IDENTIFIER,IsStringClass,IsStringClass)<SUB>1040</SUB>> ]
-"2723" [label = <(jni::EncodeArtMethod,jni::EncodeArtMethod(\012 WellKnownClasses::StringInitToStringFactory(jni::DecodeArtMethod(mid))))<SUB>1042</SUB>> ]
-"2737" [label = <(CallStaticObjectMethodA,CallStaticObjectMethodA(env, WellKnownClasses::java_lang_StringFactory, sf_mid, args))<SUB>1044</SUB>> ]
-"2748" [label = <(&lt;operator&gt;.fieldAccess,mirror::Object)<SUB>1046</SUB>> ]
-"2755" [label = <(FIELD_IDENTIFIER,AllocObject,AllocObject)<SUB>1046</SUB>> ]
-"2757" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>1046</SUB>> ]
-"2772" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1050</SUB>> ]
-"2786" [label = <(Self,soa.Self())<SUB>1052</SUB>> ]
-"2790" [label = <(FIELD_IDENTIFIER,IsExceptionPending,IsExceptionPending)<SUB>1052</SUB>> ]
-"2651" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>1032</SUB>> ]
-"2655" [label = <(CHECK_NON_NULL_ARGUMENT(java_class),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class == null&quot;))<SUB>1032</SUB>> ]
-"2662" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_class),CHECK_NON_NULL_ARGUMENT(java_class))<SUB>1032</SUB>> ]
-"2669" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1033</SUB>> ]
-"2673" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1033</SUB>> ]
-"2680" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>1033</SUB>> ]
-"2691" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>1035</SUB>> ]
-"2697" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>1035</SUB>> ]
-"2700" [label = <(&lt;operator&gt;.fieldAccess,soa.Decode)<SUB>1036</SUB>> ]
-"2703" [label = <(&lt;operator&gt;.fieldAccess,mirror::Class)<SUB>1036</SUB>> ]
-"2724" [label = <(&lt;operator&gt;.fieldAccess,jni::EncodeArtMethod)<SUB>1042</SUB>> ]
-"2727" [label = <(WellKnownClasses::StringInitToStringFactory,WellKnownClasses::StringInitToStringFactory(jni::DecodeArtMethod(mid)))<SUB>1043</SUB>> ]
-"2739" [label = <(&lt;operator&gt;.fieldAccess,WellKnownClasses::java_lang_StringFactory)<SUB>1044</SUB>> ]
-"2750" [label = <(FIELD_IDENTIFIER,Object,Object)<SUB>1046</SUB>> ]
-"2759" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>1046</SUB>> ]
-"2774" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1050</SUB>> ]
-"2787" [label = <(&lt;operator&gt;.fieldAccess,soa.Self)<SUB>1052</SUB>> ]
-"2656" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1032</SUB>> ]
-"2674" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1033</SUB>> ]
-"2702" [label = <(FIELD_IDENTIFIER,Decode,Decode)<SUB>1036</SUB>> ]
-"2705" [label = <(FIELD_IDENTIFIER,Class,Class)<SUB>1036</SUB>> ]
-"2726" [label = <(FIELD_IDENTIFIER,EncodeArtMethod,EncodeArtMethod)<SUB>1042</SUB>> ]
-"2728" [label = <(&lt;operator&gt;.fieldAccess,WellKnownClasses::StringInitToStringFactory)<SUB>1043</SUB>> ]
-"2731" [label = <(jni::DecodeArtMethod,jni::DecodeArtMethod(mid))<SUB>1043</SUB>> ]
-"2741" [label = <(FIELD_IDENTIFIER,java_lang_StringFactory,java_lang_StringFactory)<SUB>1044</SUB>> ]
-"2789" [label = <(FIELD_IDENTIFIER,Self,Self)<SUB>1052</SUB>> ]
-"2657" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1032</SUB>> ]
-"2659" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1032</SUB>> ]
-"2675" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1033</SUB>> ]
-"2677" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1033</SUB>> ]
-"2730" [label = <(FIELD_IDENTIFIER,StringInitToStringFactory,StringInitToStringFactory)<SUB>1043</SUB>> ]
-"2732" [label = <(&lt;operator&gt;.fieldAccess,jni::DecodeArtMethod)<SUB>1043</SUB>> ]
-"2734" [label = <(FIELD_IDENTIFIER,DecodeArtMethod,DecodeArtMethod)<SUB>1043</SUB>> ]
-"2640" [label = <(METHOD,NewObjectA)<SUB>1031</SUB>> ]
-"2796" [label = <(METHOD_RETURN,jobject)<SUB>1031</SUB>> ]
-  "2646" -> "2651" 
-  "2646" -> "2664" 
-  "2664" -> "2669" 
-  "2664" -> "2683" 
-  "2683" -> "2691" 
-  "2685" -> "2708" 
-  "2744" -> "2761" 
-  "2768" -> "2777" 
-  "2777" -> "2789" 
-  "2794" -> "2796" 
-  "2686" -> "2697" 
-  "2693" -> "2685" 
-  "2708" -> "2712" 
-  "2708" -> "2718" 
-  "2715" -> "2726" 
-  "2715" -> "2750" 
-  "2745" -> "2755" 
-  "2752" -> "2744" 
-  "2761" -> "2765" 
-  "2761" -> "2774" 
-  "2770" -> "2768" 
-  "2784" -> "2792" 
-  "2784" -> "2794" 
-  "2687" -> "2686" 
-  "2694" -> "2702" 
-  "2698" -> "2693" 
-  "2712" -> "2796" 
-  "2716" -> "2715" 
-  "2721" -> "2741" 
-  "2736" -> "2796" 
-  "2746" -> "2745" 
-  "2753" -> "2759" 
-  "2756" -> "2752" 
-  "2765" -> "2796" 
-  "2771" -> "2770" 
-  "2785" -> "2784" 
-  "2792" -> "2796" 
-  "2650" -> "2657" 
-  "2650" -> "2664" 
-  "2668" -> "2675" 
-  "2668" -> "2683" 
-  "2689" -> "2687" 
-  "2695" -> "2694" 
-  "2699" -> "2698" 
-  "2718" -> "2716" 
-  "2723" -> "2721" 
-  "2737" -> "2736" 
-  "2748" -> "2746" 
-  "2755" -> "2753" 
-  "2757" -> "2756" 
-  "2772" -> "2771" 
-  "2786" -> "2790" 
-  "2790" -> "2785" 
-  "2651" -> "2650" 
-  "2655" -> "2662" 
-  "2662" -> "2796" 
-  "2669" -> "2668" 
-  "2673" -> "2680" 
-  "2680" -> "2796" 
-  "2691" -> "2689" 
-  "2697" -> "2695" 
-  "2700" -> "2705" 
-  "2703" -> "2699" 
-  "2724" -> "2730" 
-  "2727" -> "2723" 
-  "2739" -> "2737" 
-  "2750" -> "2748" 
-  "2759" -> "2757" 
-  "2774" -> "2772" 
-  "2787" -> "2786" 
-  "2656" -> "2655" 
-  "2674" -> "2673" 
-  "2702" -> "2700" 
-  "2705" -> "2703" 
-  "2726" -> "2724" 
-  "2728" -> "2734" 
-  "2731" -> "2727" 
-  "2741" -> "2739" 
-  "2789" -> "2787" 
-  "2657" -> "2659" 
-  "2659" -> "2656" 
-  "2675" -> "2677" 
-  "2677" -> "2674" 
-  "2730" -> "2728" 
-  "2732" -> "2731" 
-  "2734" -> "2732" 
-  "2640" -> "2646" 
+digraph "CallObjectMethodV" {  
+"2827" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(obj))<SUB>1009</SUB>> ]
+"2845" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>1010</SUB>> ]
+"2864" [label = <(soa,soa(env))<SUB>1011</SUB>> ]
+"2867" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args)))<SUB>1012</SUB>> ]
+"2873" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());)<SUB>1013</SUB>> ]
+"2868" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>1012</SUB>> ]
+"2874" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>1013</SUB>> ]
+"2875" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>1013</SUB>> ]
+"2880" [label = <(GetL,result.GetL())<SUB>1013</SUB>> ]
+"2831" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1009</SUB>> ]
+"2849" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1010</SUB>> ]
+"2876" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1013</SUB>> ]
+"2881" [label = <(&lt;operator&gt;.fieldAccess,result.GetL)<SUB>1013</SUB>> ]
+"2832" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1009</SUB>> ]
+"2836" [label = <(CHECK_NON_NULL_ARGUMENT(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1009</SUB>> ]
+"2843" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(obj),CHECK_NON_NULL_ARGUMENT(obj))<SUB>1009</SUB>> ]
+"2850" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1010</SUB>> ]
+"2854" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1010</SUB>> ]
+"2861" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>1010</SUB>> ]
+"2878" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1013</SUB>> ]
+"2883" [label = <(FIELD_IDENTIFIER,GetL,GetL)<SUB>1013</SUB>> ]
+"2837" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1009</SUB>> ]
+"2855" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1010</SUB>> ]
+"2838" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1009</SUB>> ]
+"2840" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1009</SUB>> ]
+"2856" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1010</SUB>> ]
+"2858" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1010</SUB>> ]
+"2821" [label = <(METHOD,CallObjectMethodV)<SUB>1008</SUB>> ]
+"2884" [label = <(METHOD_RETURN,jobject)<SUB>1008</SUB>> ]
+  "2827" -> "2832" 
+  "2827" -> "2845" 
+  "2845" -> "2850" 
+  "2845" -> "2864" 
+  "2864" -> "2868" 
+  "2867" -> "2878" 
+  "2873" -> "2884" 
+  "2868" -> "2867" 
+  "2874" -> "2873" 
+  "2875" -> "2883" 
+  "2880" -> "2874" 
+  "2831" -> "2838" 
+  "2831" -> "2845" 
+  "2849" -> "2856" 
+  "2849" -> "2864" 
+  "2876" -> "2875" 
+  "2881" -> "2880" 
+  "2832" -> "2831" 
+  "2836" -> "2843" 
+  "2843" -> "2884" 
+  "2850" -> "2849" 
+  "2854" -> "2861" 
+  "2861" -> "2884" 
+  "2878" -> "2876" 
+  "2883" -> "2881" 
+  "2837" -> "2836" 
+  "2855" -> "2854" 
+  "2838" -> "2840" 
+  "2840" -> "2837" 
+  "2856" -> "2858" 
+  "2858" -> "2855" 
+  "2821" -> "2827" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/690-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/690-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/690-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/690-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "GetPrimitiveArrayCritical" {  
-"20154" [label = <(METHOD,GetPrimitiveArrayCritical)> ]
-"20159" [label = <(METHOD_RETURN,ANY)> ]
-  "20154" -> "20159" 
+digraph "LoadDex" {  
+"19859" [label = <(METHOD,LoadDex)> ]
+"19862" [label = <(METHOD_RETURN,ANY)> ]
+  "19859" -> "19862" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/691-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/691-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/691-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/691-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "ReleasePrimitiveArrayCritical" {  
-"20160" [label = <(METHOD,ReleasePrimitiveArrayCritical)> ]
-"20166" [label = <(METHOD_RETURN,ANY)> ]
-  "20160" -> "20166" 
+digraph "loader" {  
+"19863" [label = <(METHOD,loader)> ]
+"19866" [label = <(METHOD_RETURN,ANY)> ]
+  "19863" -> "19866" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/692-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/692-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/692-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/692-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "GetByteArrayRegion" {  
-"20167" [label = <(METHOD,GetByteArrayRegion)> ]
-"20174" [label = <(METHOD_RETURN,ANY)> ]
-  "20167" -> "20174" 
+digraph "FindClassMethod" {  
+"19867" [label = <(METHOD,FindClassMethod)> ]
+"19873" [label = <(METHOD_RETURN,ANY)> ]
+  "19867" -> "19873" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/693-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/693-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/693-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/693-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "GetShortArrayRegion" {  
-"20175" [label = <(METHOD,GetShortArrayRegion)> ]
-"20182" [label = <(METHOD_RETURN,ANY)> ]
-  "20175" -> "20182" 
+digraph "IsDirect" {  
+"19874" [label = <(METHOD,IsDirect)> ]
+"19877" [label = <(METHOD_RETURN,ANY)> ]
+  "19874" -> "19877" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/694-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/694-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/694-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/694-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "GetCharArrayRegion" {  
-"20183" [label = <(METHOD,GetCharArrayRegion)> ]
-"20190" [label = <(METHOD_RETURN,ANY)> ]
-  "20183" -> "20190" 
+digraph "SetEntryPointFromQuickCompiledCode" {  
+"19878" [label = <(METHOD,SetEntryPointFromQuickCompiledCode)> ]
+"19882" [label = <(METHOD_RETURN,ANY)> ]
+  "19878" -> "19882" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/695-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/695-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/695-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/695-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "GetIntArrayRegion" {  
-"20191" [label = <(METHOD,GetIntArrayRegion)> ]
-"20198" [label = <(METHOD_RETURN,ANY)> ]
-  "20191" -> "20198" 
+digraph "GetRuntimeQuickGenericJniStub" {  
+"19883" [label = <(METHOD,GetRuntimeQuickGenericJniStub)> ]
+"19886" [label = <(METHOD_RETURN,ANY)> ]
+  "19883" -> "19886" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/696-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/696-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/696-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/696-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "GetLongArrayRegion" {  
-"20199" [label = <(METHOD,GetLongArrayRegion)> ]
-"20206" [label = <(METHOD_RETURN,ANY)> ]
-  "20199" -> "20206" 
+digraph "TransitionFromSuspendedToRunnable" {  
+"19887" [label = <(METHOD,TransitionFromSuspendedToRunnable)> ]
+"19890" [label = <(METHOD_RETURN,ANY)> ]
+  "19887" -> "19890" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/697-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/697-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/697-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/697-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "GetFloatArrayRegion" {  
-"20207" [label = <(METHOD,GetFloatArrayRegion)> ]
-"20214" [label = <(METHOD_RETURN,ANY)> ]
-  "20207" -> "20214" 
+digraph "Start" {  
+"19891" [label = <(METHOD,Start)> ]
+"19894" [label = <(METHOD_RETURN,ANY)> ]
+  "19891" -> "19894" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/698-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/698-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/698-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/698-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "GetDoubleArrayRegion" {  
-"20215" [label = <(METHOD,GetDoubleArrayRegion)> ]
-"20222" [label = <(METHOD_RETURN,ANY)> ]
-  "20215" -> "20222" 
+digraph "GetJniEnv" {  
+"19895" [label = <(METHOD,GetJniEnv)> ]
+"19898" [label = <(METHOD_RETURN,ANY)> ]
+  "19895" -> "19898" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/699-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/699-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/699-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/699-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "GetBooleanArrayRegion" {  
-"20223" [label = <(METHOD,GetBooleanArrayRegion)> ]
-"20230" [label = <(METHOD_RETURN,ANY)> ]
-  "20223" -> "20230" 
+digraph "GetLocalsCapacity" {  
+"19899" [label = <(METHOD,GetLocalsCapacity)> ]
+"19902" [label = <(METHOD_RETURN,ANY)> ]
+  "19899" -> "19902" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/7-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/7-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/7-cfg.dot	2023-06-07 19:35:28.207384350 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/7-cfg.dot	2023-06-07 19:35:34.737383779 +0330
@@ -1,9 +1,28 @@
-digraph "~ScopedVAArgs" {  
-"42" [label = <(va_end,va_end(*args))<SUB>82</SUB>> ]
-"43" [label = <(&lt;operator&gt;.indirection,*args)<SUB>82</SUB>> ]
-"40" [label = <(METHOD,~ScopedVAArgs)<SUB>82</SUB>> ]
-"45" [label = <(METHOD_RETURN,ANY)<SUB>82</SUB>> ]
-  "42" -> "45" 
-  "43" -> "42" 
-  "40" -> "43" 
+digraph "operator &lt;&lt;" {  
+"118" [label = <(RETURN,return os;,return os;)<SUB>116</SUB>> ]
+"95" [label = <(&lt;operator&gt;.fieldAccess,SharedObjectKind::kRuntime)<SUB>106</SUB>> ]
+"98" [label = <(&lt;operator&gt;.shiftLeft,os &lt;&lt; &quot;Runtime&quot;)<SUB>107</SUB>> ]
+"103" [label = <(&lt;operator&gt;.fieldAccess,SharedObjectKind::kApexModule)<SUB>109</SUB>> ]
+"106" [label = <(&lt;operator&gt;.shiftLeft,os &lt;&lt; &quot;APEX Module&quot;)<SUB>110</SUB>> ]
+"111" [label = <(&lt;operator&gt;.fieldAccess,SharedObjectKind::kOther)<SUB>112</SUB>> ]
+"114" [label = <(&lt;operator&gt;.shiftLeft,os &lt;&lt; &quot;Other&quot;)<SUB>113</SUB>> ]
+"97" [label = <(FIELD_IDENTIFIER,kRuntime,kRuntime)<SUB>106</SUB>> ]
+"105" [label = <(FIELD_IDENTIFIER,kApexModule,kApexModule)<SUB>109</SUB>> ]
+"113" [label = <(FIELD_IDENTIFIER,kOther,kOther)<SUB>112</SUB>> ]
+"87" [label = <(METHOD,operator &lt;&lt;)<SUB>104</SUB>> ]
+"120" [label = <(METHOD_RETURN,ostream)<SUB>104</SUB>> ]
+  "118" -> "120" 
+  "95" -> "98" 
+  "98" -> "118" 
+  "103" -> "106" 
+  "106" -> "118" 
+  "111" -> "114" 
+  "114" -> "118" 
+  "97" -> "95" 
+  "105" -> "103" 
+  "113" -> "111" 
+  "87" -> "97" 
+  "87" -> "105" 
+  "87" -> "113" 
+  "87" -> "118" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/70-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/70-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/70-cfg.dot	2023-06-07 19:35:28.257384346 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/70-cfg.dot	2023-06-07 19:35:34.787383775 +0330
@@ -1,65 +1,63 @@
-digraph "GetMethodID" {  
-"2804" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_class))<SUB>1059</SUB>> ]
-"2822" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(name))<SUB>1060</SUB>> ]
-"2840" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(sig))<SUB>1061</SUB>> ]
-"2859" [label = <(soa,soa(env))<SUB>1062</SUB>> ]
-"2861" [label = <(RETURN,return FindMethodID(soa, java_class, name, sig, false);,return FindMethodID(soa, java_class, name, sig, false);)<SUB>1063</SUB>> ]
-"2862" [label = <(FindMethodID,FindMethodID(soa, java_class, name, sig, false))<SUB>1063</SUB>> ]
-"2808" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>1059</SUB>> ]
-"2826" [label = <(UNLIKELY,UNLIKELY((name) == nullptr))<SUB>1060</SUB>> ]
-"2844" [label = <(UNLIKELY,UNLIKELY((sig) == nullptr))<SUB>1061</SUB>> ]
-"2809" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>1059</SUB>> ]
-"2813" [label = <(CHECK_NON_NULL_ARGUMENT(java_class),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class == null&quot;))<SUB>1059</SUB>> ]
-"2820" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_class),CHECK_NON_NULL_ARGUMENT(java_class))<SUB>1059</SUB>> ]
-"2827" [label = <(&lt;operator&gt;.equals,(name) == nullptr)<SUB>1060</SUB>> ]
-"2831" [label = <(CHECK_NON_NULL_ARGUMENT(name),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;name == null&quot;))<SUB>1060</SUB>> ]
-"2838" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(name),CHECK_NON_NULL_ARGUMENT(name))<SUB>1060</SUB>> ]
-"2845" [label = <(&lt;operator&gt;.equals,(sig) == nullptr)<SUB>1061</SUB>> ]
-"2849" [label = <(CHECK_NON_NULL_ARGUMENT(sig),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;sig == null&quot;))<SUB>1061</SUB>> ]
-"2856" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(sig),CHECK_NON_NULL_ARGUMENT(sig))<SUB>1061</SUB>> ]
-"2814" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1059</SUB>> ]
-"2832" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1060</SUB>> ]
-"2850" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1061</SUB>> ]
-"2815" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1059</SUB>> ]
-"2817" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1059</SUB>> ]
-"2833" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1060</SUB>> ]
-"2835" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1060</SUB>> ]
-"2851" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1061</SUB>> ]
-"2853" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1061</SUB>> ]
-"2798" [label = <(METHOD,GetMethodID)<SUB>1058</SUB>> ]
-"2868" [label = <(METHOD_RETURN,jmethodID)<SUB>1058</SUB>> ]
-  "2804" -> "2809" 
-  "2804" -> "2822" 
-  "2822" -> "2827" 
-  "2822" -> "2840" 
-  "2840" -> "2845" 
-  "2840" -> "2859" 
-  "2859" -> "2862" 
-  "2861" -> "2868" 
-  "2862" -> "2861" 
-  "2808" -> "2815" 
-  "2808" -> "2822" 
-  "2826" -> "2833" 
-  "2826" -> "2840" 
-  "2844" -> "2851" 
-  "2844" -> "2859" 
-  "2809" -> "2808" 
-  "2813" -> "2820" 
-  "2820" -> "2868" 
-  "2827" -> "2826" 
-  "2831" -> "2838" 
-  "2838" -> "2868" 
-  "2845" -> "2844" 
-  "2849" -> "2856" 
-  "2856" -> "2868" 
-  "2814" -> "2813" 
-  "2832" -> "2831" 
-  "2850" -> "2849" 
-  "2815" -> "2817" 
-  "2817" -> "2814" 
-  "2833" -> "2835" 
-  "2835" -> "2832" 
-  "2851" -> "2853" 
-  "2853" -> "2850" 
-  "2798" -> "2804" 
+digraph "CallObjectMethodA" {  
+"2892" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(obj))<SUB>1017</SUB>> ]
+"2910" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>1018</SUB>> ]
+"2929" [label = <(soa,soa(env))<SUB>1019</SUB>> ]
+"2932" [label = <(result,result(InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args)))<SUB>1020</SUB>> ]
+"2938" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());)<SUB>1021</SUB>> ]
+"2933" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>1020</SUB>> ]
+"2939" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>1021</SUB>> ]
+"2940" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>1021</SUB>> ]
+"2945" [label = <(GetL,result.GetL())<SUB>1021</SUB>> ]
+"2896" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1017</SUB>> ]
+"2914" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1018</SUB>> ]
+"2941" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1021</SUB>> ]
+"2946" [label = <(&lt;operator&gt;.fieldAccess,result.GetL)<SUB>1021</SUB>> ]
+"2897" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1017</SUB>> ]
+"2901" [label = <(CHECK_NON_NULL_ARGUMENT(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1017</SUB>> ]
+"2908" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(obj),CHECK_NON_NULL_ARGUMENT(obj))<SUB>1017</SUB>> ]
+"2915" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1018</SUB>> ]
+"2919" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1018</SUB>> ]
+"2926" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>1018</SUB>> ]
+"2943" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1021</SUB>> ]
+"2948" [label = <(FIELD_IDENTIFIER,GetL,GetL)<SUB>1021</SUB>> ]
+"2902" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1017</SUB>> ]
+"2920" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1018</SUB>> ]
+"2903" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1017</SUB>> ]
+"2905" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1017</SUB>> ]
+"2921" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1018</SUB>> ]
+"2923" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1018</SUB>> ]
+"2886" [label = <(METHOD,CallObjectMethodA)<SUB>1016</SUB>> ]
+"2949" [label = <(METHOD_RETURN,jobject)<SUB>1016</SUB>> ]
+  "2892" -> "2897" 
+  "2892" -> "2910" 
+  "2910" -> "2915" 
+  "2910" -> "2929" 
+  "2929" -> "2933" 
+  "2932" -> "2943" 
+  "2938" -> "2949" 
+  "2933" -> "2932" 
+  "2939" -> "2938" 
+  "2940" -> "2948" 
+  "2945" -> "2939" 
+  "2896" -> "2903" 
+  "2896" -> "2910" 
+  "2914" -> "2921" 
+  "2914" -> "2929" 
+  "2941" -> "2940" 
+  "2946" -> "2945" 
+  "2897" -> "2896" 
+  "2901" -> "2908" 
+  "2908" -> "2949" 
+  "2915" -> "2914" 
+  "2919" -> "2926" 
+  "2926" -> "2949" 
+  "2943" -> "2941" 
+  "2948" -> "2946" 
+  "2902" -> "2901" 
+  "2920" -> "2919" 
+  "2903" -> "2905" 
+  "2905" -> "2902" 
+  "2921" -> "2923" 
+  "2923" -> "2920" 
+  "2886" -> "2892" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/700-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/700-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/700-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/700-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "SetByteArrayRegion" {  
-"20231" [label = <(METHOD,SetByteArrayRegion)> ]
-"20238" [label = <(METHOD_RETURN,ANY)> ]
-  "20231" -> "20238" 
+digraph "MonitorExit" {  
+"19903" [label = <(METHOD,MonitorExit)> ]
+"19907" [label = <(METHOD_RETURN,ANY)> ]
+  "19903" -> "19907" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/701-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/701-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/701-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/701-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "SetShortArrayRegion" {  
-"20239" [label = <(METHOD,SetShortArrayRegion)> ]
-"20246" [label = <(METHOD_RETURN,ANY)> ]
-  "20239" -> "20246" 
+digraph "MonitorEnter" {  
+"19908" [label = <(METHOD,MonitorEnter)> ]
+"19912" [label = <(METHOD_RETURN,ANY)> ]
+  "19908" -> "19912" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/702-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/702-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/702-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/702-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "SetCharArrayRegion" {  
-"20247" [label = <(METHOD,SetCharArrayRegion)> ]
-"20254" [label = <(METHOD_RETURN,ANY)> ]
-  "20247" -> "20254" 
+digraph "GetLockWord" {  
+"19913" [label = <(METHOD,GetLockWord)> ]
+"19917" [label = <(METHOD_RETURN,ANY)> ]
+  "19913" -> "19917" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/703-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/703-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/703-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/703-cfg.dot	2023-06-07 19:35:34.957383760 +0330
@@ -1,5 +1,5 @@
-digraph "SetIntArrayRegion" {  
-"20255" [label = <(METHOD,SetIntArrayRegion)> ]
-"20262" [label = <(METHOD_RETURN,ANY)> ]
-  "20255" -> "20262" 
+digraph "GetState" {  
+"19918" [label = <(METHOD,GetState)> ]
+"19921" [label = <(METHOD_RETURN,ANY)> ]
+  "19918" -> "19921" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/704-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/704-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/704-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/704-cfg.dot	2023-06-07 19:35:34.967383759 +0330
@@ -1,5 +1,5 @@
-digraph "SetLongArrayRegion" {  
-"20263" [label = <(METHOD,SetLongArrayRegion)> ]
-"20270" [label = <(METHOD_RETURN,ANY)> ]
-  "20263" -> "20270" 
+digraph "IsLocked" {  
+"19922" [label = <(METHOD,IsLocked)> ]
+"19925" [label = <(METHOD_RETURN,ANY)> ]
+  "19922" -> "19925" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/705-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/705-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/705-cfg.dot	2023-06-07 19:35:28.447384328 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/705-cfg.dot	2023-06-07 19:35:34.967383759 +0330
@@ -1,5 +1,5 @@
-digraph "SetFloatArrayRegion" {  
-"20271" [label = <(METHOD,SetFloatArrayRegion)> ]
-"20278" [label = <(METHOD_RETURN,ANY)> ]
-  "20271" -> "20278" 
+digraph "FatLockMonitor" {  
+"19926" [label = <(METHOD,FatLockMonitor)> ]
+"19929" [label = <(METHOD_RETURN,ANY)> ]
+  "19926" -> "19929" 
 }
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out: 706-cfg.dot
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out: 707-cfg.dot
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out: 708-cfg.dot
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out: 709-cfg.dot
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/71-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/71-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/71-cfg.dot	2023-06-07 19:35:28.257384346 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/71-cfg.dot	2023-06-07 19:35:34.787383775 +0330
@@ -1,65 +1,61 @@
-digraph "GetStaticMethodID" {  
-"2876" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(java_class))<SUB>1068</SUB>> ]
-"2894" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(name))<SUB>1069</SUB>> ]
-"2912" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(sig))<SUB>1070</SUB>> ]
-"2931" [label = <(soa,soa(env))<SUB>1071</SUB>> ]
-"2933" [label = <(RETURN,return FindMethodID(soa, java_class, name, sig, true);,return FindMethodID(soa, java_class, name, sig, true);)<SUB>1072</SUB>> ]
-"2934" [label = <(FindMethodID,FindMethodID(soa, java_class, name, sig, true))<SUB>1072</SUB>> ]
-"2880" [label = <(UNLIKELY,UNLIKELY((java_class) == nullptr))<SUB>1068</SUB>> ]
-"2898" [label = <(UNLIKELY,UNLIKELY((name) == nullptr))<SUB>1069</SUB>> ]
-"2916" [label = <(UNLIKELY,UNLIKELY((sig) == nullptr))<SUB>1070</SUB>> ]
-"2881" [label = <(&lt;operator&gt;.equals,(java_class) == nullptr)<SUB>1068</SUB>> ]
-"2885" [label = <(CHECK_NON_NULL_ARGUMENT(java_class),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;java_class == null&quot;))<SUB>1068</SUB>> ]
-"2892" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(java_class),CHECK_NON_NULL_ARGUMENT(java_class))<SUB>1068</SUB>> ]
-"2899" [label = <(&lt;operator&gt;.equals,(name) == nullptr)<SUB>1069</SUB>> ]
-"2903" [label = <(CHECK_NON_NULL_ARGUMENT(name),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;name == null&quot;))<SUB>1069</SUB>> ]
-"2910" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(name),CHECK_NON_NULL_ARGUMENT(name))<SUB>1069</SUB>> ]
-"2917" [label = <(&lt;operator&gt;.equals,(sig) == nullptr)<SUB>1070</SUB>> ]
-"2921" [label = <(CHECK_NON_NULL_ARGUMENT(sig),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;sig == null&quot;))<SUB>1070</SUB>> ]
-"2928" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(sig),CHECK_NON_NULL_ARGUMENT(sig))<SUB>1070</SUB>> ]
-"2886" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1068</SUB>> ]
-"2904" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1069</SUB>> ]
-"2922" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1070</SUB>> ]
-"2887" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1068</SUB>> ]
-"2889" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1068</SUB>> ]
-"2905" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1069</SUB>> ]
-"2907" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1069</SUB>> ]
-"2923" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1070</SUB>> ]
-"2925" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1070</SUB>> ]
-"2870" [label = <(METHOD,GetStaticMethodID)<SUB>1066</SUB>> ]
-"2940" [label = <(METHOD_RETURN,jmethodID)<SUB>1066</SUB>> ]
-  "2876" -> "2881" 
-  "2876" -> "2894" 
-  "2894" -> "2899" 
-  "2894" -> "2912" 
-  "2912" -> "2917" 
-  "2912" -> "2931" 
-  "2931" -> "2934" 
-  "2933" -> "2940" 
-  "2934" -> "2933" 
-  "2880" -> "2887" 
-  "2880" -> "2894" 
-  "2898" -> "2905" 
-  "2898" -> "2912" 
-  "2916" -> "2923" 
-  "2916" -> "2931" 
-  "2881" -> "2880" 
-  "2885" -> "2892" 
-  "2892" -> "2940" 
-  "2899" -> "2898" 
-  "2903" -> "2910" 
-  "2910" -> "2940" 
-  "2917" -> "2916" 
-  "2921" -> "2928" 
-  "2928" -> "2940" 
-  "2886" -> "2885" 
-  "2904" -> "2903" 
-  "2922" -> "2921" 
-  "2887" -> "2889" 
-  "2889" -> "2886" 
-  "2905" -> "2907" 
-  "2907" -> "2904" 
-  "2923" -> "2925" 
-  "2925" -> "2922" 
-  "2870" -> "2876" 
+digraph "CallBooleanMethod" {  
+"2957" [label = <(va_start,va_start(ap, mid))<SUB>1026</SUB>> ]
+"2961" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1027</SUB>> ]
+"2964" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1028</SUB>> ]
+"2982" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1029</SUB>> ]
+"3001" [label = <(soa,soa(env))<SUB>1030</SUB>> ]
+"3004" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap)))<SUB>1031</SUB>> ]
+"3010" [label = <(RETURN,return result.GetZ();,return result.GetZ();)<SUB>1032</SUB>> ]
+"2962" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1027</SUB>> ]
+"3005" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>1031</SUB>> ]
+"3011" [label = <(GetZ,result.GetZ())<SUB>1032</SUB>> ]
+"3012" [label = <(&lt;operator&gt;.fieldAccess,result.GetZ)<SUB>1032</SUB>> ]
+"2968" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1028</SUB>> ]
+"2986" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1029</SUB>> ]
+"3014" [label = <(FIELD_IDENTIFIER,GetZ,GetZ)<SUB>1032</SUB>> ]
+"2969" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1028</SUB>> ]
+"2973" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1028</SUB>> ]
+"2980" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1028</SUB>> ]
+"2987" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1029</SUB>> ]
+"2991" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1029</SUB>> ]
+"2998" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1029</SUB>> ]
+"2974" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1028</SUB>> ]
+"2992" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1029</SUB>> ]
+"2975" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1028</SUB>> ]
+"2977" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1028</SUB>> ]
+"2993" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1029</SUB>> ]
+"2995" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1029</SUB>> ]
+"2951" [label = <(METHOD,CallBooleanMethod)<SUB>1024</SUB>> ]
+"3015" [label = <(METHOD_RETURN,jboolean)<SUB>1024</SUB>> ]
+  "2957" -> "2962" 
+  "2961" -> "2964" 
+  "2964" -> "2969" 
+  "2964" -> "2982" 
+  "2982" -> "2987" 
+  "2982" -> "3001" 
+  "3001" -> "3005" 
+  "3004" -> "3014" 
+  "3010" -> "3015" 
+  "2962" -> "2961" 
+  "3005" -> "3004" 
+  "3011" -> "3010" 
+  "3012" -> "3011" 
+  "2968" -> "2975" 
+  "2968" -> "2982" 
+  "2986" -> "2993" 
+  "2986" -> "3001" 
+  "3014" -> "3012" 
+  "2969" -> "2968" 
+  "2973" -> "2980" 
+  "2980" -> "3015" 
+  "2987" -> "2986" 
+  "2991" -> "2998" 
+  "2998" -> "3015" 
+  "2974" -> "2973" 
+  "2992" -> "2991" 
+  "2975" -> "2977" 
+  "2977" -> "2974" 
+  "2993" -> "2995" 
+  "2995" -> "2992" 
+  "2951" -> "2957" 
 }
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out: 710-cfg.dot
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out: 711-cfg.dot
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out: 712-cfg.dot
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out: 713-cfg.dot
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out: 714-cfg.dot
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out: 715-cfg.dot
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out: 716-cfg.dot
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out: 717-cfg.dot
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out: 718-cfg.dot
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out: 719-cfg.dot
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/72-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/72-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/72-cfg.dot	2023-06-07 19:35:28.257384346 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/72-cfg.dot	2023-06-07 19:35:34.787383775 +0330
@@ -1,69 +1,53 @@
-digraph "CallObjectMethod" {  
-"2948" [label = <(va_start,va_start(ap, mid))<SUB>1077</SUB>> ]
-"2952" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1078</SUB>> ]
-"2955" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(obj))<SUB>1079</SUB>> ]
-"2973" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>1080</SUB>> ]
-"2992" [label = <(soa,soa(env))<SUB>1081</SUB>> ]
-"2995" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap)))<SUB>1082</SUB>> ]
-"3001" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());)<SUB>1083</SUB>> ]
-"2953" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1078</SUB>> ]
-"2996" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>1082</SUB>> ]
-"3002" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>1083</SUB>> ]
-"3003" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>1083</SUB>> ]
-"3008" [label = <(GetL,result.GetL())<SUB>1083</SUB>> ]
-"2959" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1079</SUB>> ]
-"2977" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1080</SUB>> ]
-"3004" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1083</SUB>> ]
-"3009" [label = <(&lt;operator&gt;.fieldAccess,result.GetL)<SUB>1083</SUB>> ]
-"2960" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1079</SUB>> ]
-"2964" [label = <(CHECK_NON_NULL_ARGUMENT(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1079</SUB>> ]
-"2971" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(obj),CHECK_NON_NULL_ARGUMENT(obj))<SUB>1079</SUB>> ]
-"2978" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1080</SUB>> ]
-"2982" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1080</SUB>> ]
-"2989" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>1080</SUB>> ]
-"3006" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1083</SUB>> ]
-"3011" [label = <(FIELD_IDENTIFIER,GetL,GetL)<SUB>1083</SUB>> ]
-"2965" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1079</SUB>> ]
-"2983" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1080</SUB>> ]
-"2966" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1079</SUB>> ]
-"2968" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1079</SUB>> ]
-"2984" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1080</SUB>> ]
-"2986" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1080</SUB>> ]
-"2942" [label = <(METHOD,CallObjectMethod)<SUB>1075</SUB>> ]
-"3012" [label = <(METHOD_RETURN,jobject)<SUB>1075</SUB>> ]
-  "2948" -> "2953" 
-  "2952" -> "2955" 
-  "2955" -> "2960" 
-  "2955" -> "2973" 
-  "2973" -> "2978" 
-  "2973" -> "2992" 
-  "2992" -> "2996" 
-  "2995" -> "3006" 
-  "3001" -> "3012" 
-  "2953" -> "2952" 
-  "2996" -> "2995" 
-  "3002" -> "3001" 
-  "3003" -> "3011" 
-  "3008" -> "3002" 
-  "2959" -> "2966" 
-  "2959" -> "2973" 
-  "2977" -> "2984" 
-  "2977" -> "2992" 
-  "3004" -> "3003" 
-  "3009" -> "3008" 
-  "2960" -> "2959" 
-  "2964" -> "2971" 
-  "2971" -> "3012" 
-  "2978" -> "2977" 
-  "2982" -> "2989" 
-  "2989" -> "3012" 
-  "3006" -> "3004" 
-  "3011" -> "3009" 
-  "2965" -> "2964" 
-  "2983" -> "2982" 
-  "2966" -> "2968" 
-  "2968" -> "2965" 
-  "2984" -> "2986" 
-  "2986" -> "2983" 
-  "2942" -> "2948" 
+digraph "CallBooleanMethodV" {  
+"3023" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1036</SUB>> ]
+"3041" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1037</SUB>> ]
+"3060" [label = <(soa,soa(env))<SUB>1038</SUB>> ]
+"3062" [label = <(RETURN,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetZ();,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetZ();)<SUB>1039</SUB>> ]
+"3063" [label = <(GetZ,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetZ())<SUB>1039</SUB>> ]
+"3064" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetZ)<SUB>1039</SUB>> ]
+"3027" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1036</SUB>> ]
+"3045" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1037</SUB>> ]
+"3065" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>1039</SUB>> ]
+"3070" [label = <(FIELD_IDENTIFIER,GetZ,GetZ)<SUB>1039</SUB>> ]
+"3028" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1036</SUB>> ]
+"3032" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1036</SUB>> ]
+"3039" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1036</SUB>> ]
+"3046" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1037</SUB>> ]
+"3050" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1037</SUB>> ]
+"3057" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1037</SUB>> ]
+"3033" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1036</SUB>> ]
+"3051" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1037</SUB>> ]
+"3034" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1036</SUB>> ]
+"3036" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1036</SUB>> ]
+"3052" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1037</SUB>> ]
+"3054" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1037</SUB>> ]
+"3017" [label = <(METHOD,CallBooleanMethodV)<SUB>1035</SUB>> ]
+"3071" [label = <(METHOD_RETURN,jboolean)<SUB>1035</SUB>> ]
+  "3023" -> "3028" 
+  "3023" -> "3041" 
+  "3041" -> "3046" 
+  "3041" -> "3060" 
+  "3060" -> "3065" 
+  "3062" -> "3071" 
+  "3063" -> "3062" 
+  "3064" -> "3063" 
+  "3027" -> "3034" 
+  "3027" -> "3041" 
+  "3045" -> "3052" 
+  "3045" -> "3060" 
+  "3065" -> "3070" 
+  "3070" -> "3064" 
+  "3028" -> "3027" 
+  "3032" -> "3039" 
+  "3039" -> "3071" 
+  "3046" -> "3045" 
+  "3050" -> "3057" 
+  "3057" -> "3071" 
+  "3033" -> "3032" 
+  "3051" -> "3050" 
+  "3034" -> "3036" 
+  "3036" -> "3033" 
+  "3052" -> "3054" 
+  "3054" -> "3051" 
+  "3017" -> "3023" 
 }
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out: 720-cfg.dot
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out: 721-cfg.dot
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out: 722-cfg.dot
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out: 723-cfg.dot
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out: 724-cfg.dot
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out: 725-cfg.dot
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out: 726-cfg.dot
Only in /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out: 727-cfg.dot
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/73-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/73-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/73-cfg.dot	2023-06-07 19:35:28.257384346 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/73-cfg.dot	2023-06-07 19:35:34.787383775 +0330
@@ -1,63 +1,53 @@
-digraph "CallObjectMethodV" {  
-"3020" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(obj))<SUB>1087</SUB>> ]
-"3038" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>1088</SUB>> ]
-"3057" [label = <(soa,soa(env))<SUB>1089</SUB>> ]
-"3060" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args)))<SUB>1090</SUB>> ]
-"3066" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());)<SUB>1091</SUB>> ]
-"3061" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>1090</SUB>> ]
-"3067" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>1091</SUB>> ]
-"3068" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>1091</SUB>> ]
-"3073" [label = <(GetL,result.GetL())<SUB>1091</SUB>> ]
-"3024" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1087</SUB>> ]
-"3042" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1088</SUB>> ]
-"3069" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1091</SUB>> ]
-"3074" [label = <(&lt;operator&gt;.fieldAccess,result.GetL)<SUB>1091</SUB>> ]
-"3025" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1087</SUB>> ]
-"3029" [label = <(CHECK_NON_NULL_ARGUMENT(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1087</SUB>> ]
-"3036" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(obj),CHECK_NON_NULL_ARGUMENT(obj))<SUB>1087</SUB>> ]
-"3043" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1088</SUB>> ]
-"3047" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1088</SUB>> ]
-"3054" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>1088</SUB>> ]
-"3071" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1091</SUB>> ]
-"3076" [label = <(FIELD_IDENTIFIER,GetL,GetL)<SUB>1091</SUB>> ]
-"3030" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1087</SUB>> ]
-"3048" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1088</SUB>> ]
-"3031" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1087</SUB>> ]
-"3033" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1087</SUB>> ]
-"3049" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1088</SUB>> ]
-"3051" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1088</SUB>> ]
-"3014" [label = <(METHOD,CallObjectMethodV)<SUB>1086</SUB>> ]
-"3077" [label = <(METHOD_RETURN,jobject)<SUB>1086</SUB>> ]
-  "3020" -> "3025" 
-  "3020" -> "3038" 
-  "3038" -> "3043" 
-  "3038" -> "3057" 
-  "3057" -> "3061" 
-  "3060" -> "3071" 
-  "3066" -> "3077" 
-  "3061" -> "3060" 
-  "3067" -> "3066" 
-  "3068" -> "3076" 
-  "3073" -> "3067" 
-  "3024" -> "3031" 
-  "3024" -> "3038" 
-  "3042" -> "3049" 
-  "3042" -> "3057" 
-  "3069" -> "3068" 
-  "3074" -> "3073" 
-  "3025" -> "3024" 
-  "3029" -> "3036" 
-  "3036" -> "3077" 
-  "3043" -> "3042" 
-  "3047" -> "3054" 
-  "3054" -> "3077" 
-  "3071" -> "3069" 
-  "3076" -> "3074" 
-  "3030" -> "3029" 
-  "3048" -> "3047" 
-  "3031" -> "3033" 
-  "3033" -> "3030" 
-  "3049" -> "3051" 
-  "3051" -> "3048" 
-  "3014" -> "3020" 
+digraph "CallBooleanMethodA" {  
+"3079" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1043</SUB>> ]
+"3097" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1044</SUB>> ]
+"3116" [label = <(soa,soa(env))<SUB>1045</SUB>> ]
+"3118" [label = <(RETURN,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetZ();,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetZ();)<SUB>1046</SUB>> ]
+"3119" [label = <(GetZ,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetZ())<SUB>1046</SUB>> ]
+"3120" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetZ)<SUB>1046</SUB>> ]
+"3083" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1043</SUB>> ]
+"3101" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1044</SUB>> ]
+"3121" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>1046</SUB>> ]
+"3126" [label = <(FIELD_IDENTIFIER,GetZ,GetZ)<SUB>1046</SUB>> ]
+"3084" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1043</SUB>> ]
+"3088" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1043</SUB>> ]
+"3095" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1043</SUB>> ]
+"3102" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1044</SUB>> ]
+"3106" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1044</SUB>> ]
+"3113" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1044</SUB>> ]
+"3089" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1043</SUB>> ]
+"3107" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1044</SUB>> ]
+"3090" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1043</SUB>> ]
+"3092" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1043</SUB>> ]
+"3108" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1044</SUB>> ]
+"3110" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1044</SUB>> ]
+"3073" [label = <(METHOD,CallBooleanMethodA)<SUB>1042</SUB>> ]
+"3127" [label = <(METHOD_RETURN,jboolean)<SUB>1042</SUB>> ]
+  "3079" -> "3084" 
+  "3079" -> "3097" 
+  "3097" -> "3102" 
+  "3097" -> "3116" 
+  "3116" -> "3121" 
+  "3118" -> "3127" 
+  "3119" -> "3118" 
+  "3120" -> "3119" 
+  "3083" -> "3090" 
+  "3083" -> "3097" 
+  "3101" -> "3108" 
+  "3101" -> "3116" 
+  "3121" -> "3126" 
+  "3126" -> "3120" 
+  "3084" -> "3083" 
+  "3088" -> "3095" 
+  "3095" -> "3127" 
+  "3102" -> "3101" 
+  "3106" -> "3113" 
+  "3113" -> "3127" 
+  "3089" -> "3088" 
+  "3107" -> "3106" 
+  "3090" -> "3092" 
+  "3092" -> "3089" 
+  "3108" -> "3110" 
+  "3110" -> "3107" 
+  "3073" -> "3079" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/74-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/74-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/74-cfg.dot	2023-06-07 19:35:28.257384346 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/74-cfg.dot	2023-06-07 19:35:34.787383775 +0330
@@ -1,63 +1,61 @@
-digraph "CallObjectMethodA" {  
-"3085" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(obj))<SUB>1095</SUB>> ]
-"3103" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>1096</SUB>> ]
-"3122" [label = <(soa,soa(env))<SUB>1097</SUB>> ]
-"3125" [label = <(result,result(InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args)))<SUB>1098</SUB>> ]
-"3131" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());)<SUB>1099</SUB>> ]
-"3126" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>1098</SUB>> ]
-"3132" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>1099</SUB>> ]
-"3133" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>1099</SUB>> ]
-"3138" [label = <(GetL,result.GetL())<SUB>1099</SUB>> ]
-"3089" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1095</SUB>> ]
-"3107" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1096</SUB>> ]
-"3134" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1099</SUB>> ]
-"3139" [label = <(&lt;operator&gt;.fieldAccess,result.GetL)<SUB>1099</SUB>> ]
-"3090" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1095</SUB>> ]
-"3094" [label = <(CHECK_NON_NULL_ARGUMENT(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1095</SUB>> ]
-"3101" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(obj),CHECK_NON_NULL_ARGUMENT(obj))<SUB>1095</SUB>> ]
-"3108" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1096</SUB>> ]
-"3112" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1096</SUB>> ]
-"3119" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>1096</SUB>> ]
-"3136" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1099</SUB>> ]
-"3141" [label = <(FIELD_IDENTIFIER,GetL,GetL)<SUB>1099</SUB>> ]
-"3095" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1095</SUB>> ]
-"3113" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1096</SUB>> ]
-"3096" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1095</SUB>> ]
-"3098" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1095</SUB>> ]
-"3114" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1096</SUB>> ]
-"3116" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1096</SUB>> ]
-"3079" [label = <(METHOD,CallObjectMethodA)<SUB>1094</SUB>> ]
-"3142" [label = <(METHOD_RETURN,jobject)<SUB>1094</SUB>> ]
-  "3085" -> "3090" 
-  "3085" -> "3103" 
-  "3103" -> "3108" 
-  "3103" -> "3122" 
-  "3122" -> "3126" 
-  "3125" -> "3136" 
-  "3131" -> "3142" 
-  "3126" -> "3125" 
-  "3132" -> "3131" 
-  "3133" -> "3141" 
-  "3138" -> "3132" 
-  "3089" -> "3096" 
-  "3089" -> "3103" 
-  "3107" -> "3114" 
-  "3107" -> "3122" 
-  "3134" -> "3133" 
-  "3139" -> "3138" 
-  "3090" -> "3089" 
-  "3094" -> "3101" 
-  "3101" -> "3142" 
-  "3108" -> "3107" 
-  "3112" -> "3119" 
-  "3119" -> "3142" 
-  "3136" -> "3134" 
-  "3141" -> "3139" 
-  "3095" -> "3094" 
-  "3113" -> "3112" 
-  "3096" -> "3098" 
-  "3098" -> "3095" 
-  "3114" -> "3116" 
-  "3116" -> "3113" 
-  "3079" -> "3085" 
+digraph "CallByteMethod" {  
+"3135" [label = <(va_start,va_start(ap, mid))<SUB>1051</SUB>> ]
+"3139" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1052</SUB>> ]
+"3142" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1053</SUB>> ]
+"3160" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1054</SUB>> ]
+"3179" [label = <(soa,soa(env))<SUB>1055</SUB>> ]
+"3182" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap)))<SUB>1056</SUB>> ]
+"3188" [label = <(RETURN,return result.GetB();,return result.GetB();)<SUB>1057</SUB>> ]
+"3140" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1052</SUB>> ]
+"3183" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>1056</SUB>> ]
+"3189" [label = <(GetB,result.GetB())<SUB>1057</SUB>> ]
+"3190" [label = <(&lt;operator&gt;.fieldAccess,result.GetB)<SUB>1057</SUB>> ]
+"3146" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1053</SUB>> ]
+"3164" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1054</SUB>> ]
+"3192" [label = <(FIELD_IDENTIFIER,GetB,GetB)<SUB>1057</SUB>> ]
+"3147" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1053</SUB>> ]
+"3151" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1053</SUB>> ]
+"3158" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1053</SUB>> ]
+"3165" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1054</SUB>> ]
+"3169" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1054</SUB>> ]
+"3176" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1054</SUB>> ]
+"3152" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1053</SUB>> ]
+"3170" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1054</SUB>> ]
+"3153" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1053</SUB>> ]
+"3155" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1053</SUB>> ]
+"3171" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1054</SUB>> ]
+"3173" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1054</SUB>> ]
+"3129" [label = <(METHOD,CallByteMethod)<SUB>1049</SUB>> ]
+"3193" [label = <(METHOD_RETURN,jbyte)<SUB>1049</SUB>> ]
+  "3135" -> "3140" 
+  "3139" -> "3142" 
+  "3142" -> "3147" 
+  "3142" -> "3160" 
+  "3160" -> "3165" 
+  "3160" -> "3179" 
+  "3179" -> "3183" 
+  "3182" -> "3192" 
+  "3188" -> "3193" 
+  "3140" -> "3139" 
+  "3183" -> "3182" 
+  "3189" -> "3188" 
+  "3190" -> "3189" 
+  "3146" -> "3153" 
+  "3146" -> "3160" 
+  "3164" -> "3171" 
+  "3164" -> "3179" 
+  "3192" -> "3190" 
+  "3147" -> "3146" 
+  "3151" -> "3158" 
+  "3158" -> "3193" 
+  "3165" -> "3164" 
+  "3169" -> "3176" 
+  "3176" -> "3193" 
+  "3152" -> "3151" 
+  "3170" -> "3169" 
+  "3153" -> "3155" 
+  "3155" -> "3152" 
+  "3171" -> "3173" 
+  "3173" -> "3170" 
+  "3129" -> "3135" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/75-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/75-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/75-cfg.dot	2023-06-07 19:35:28.257384346 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/75-cfg.dot	2023-06-07 19:35:34.787383775 +0330
@@ -1,61 +1,53 @@
-digraph "CallBooleanMethod" {  
-"3150" [label = <(va_start,va_start(ap, mid))<SUB>1104</SUB>> ]
-"3154" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1105</SUB>> ]
-"3157" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1106</SUB>> ]
-"3175" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1107</SUB>> ]
-"3194" [label = <(soa,soa(env))<SUB>1108</SUB>> ]
-"3197" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap)))<SUB>1109</SUB>> ]
-"3203" [label = <(RETURN,return result.GetZ();,return result.GetZ();)<SUB>1110</SUB>> ]
-"3155" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1105</SUB>> ]
-"3198" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>1109</SUB>> ]
-"3204" [label = <(GetZ,result.GetZ())<SUB>1110</SUB>> ]
-"3205" [label = <(&lt;operator&gt;.fieldAccess,result.GetZ)<SUB>1110</SUB>> ]
-"3161" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1106</SUB>> ]
-"3179" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1107</SUB>> ]
-"3207" [label = <(FIELD_IDENTIFIER,GetZ,GetZ)<SUB>1110</SUB>> ]
-"3162" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1106</SUB>> ]
-"3166" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1106</SUB>> ]
-"3173" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1106</SUB>> ]
-"3180" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1107</SUB>> ]
-"3184" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1107</SUB>> ]
-"3191" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1107</SUB>> ]
-"3167" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1106</SUB>> ]
-"3185" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1107</SUB>> ]
-"3168" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1106</SUB>> ]
-"3170" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1106</SUB>> ]
-"3186" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1107</SUB>> ]
-"3188" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1107</SUB>> ]
-"3144" [label = <(METHOD,CallBooleanMethod)<SUB>1102</SUB>> ]
-"3208" [label = <(METHOD_RETURN,jboolean)<SUB>1102</SUB>> ]
-  "3150" -> "3155" 
-  "3154" -> "3157" 
-  "3157" -> "3162" 
-  "3157" -> "3175" 
-  "3175" -> "3180" 
-  "3175" -> "3194" 
-  "3194" -> "3198" 
-  "3197" -> "3207" 
-  "3203" -> "3208" 
-  "3155" -> "3154" 
-  "3198" -> "3197" 
-  "3204" -> "3203" 
-  "3205" -> "3204" 
-  "3161" -> "3168" 
-  "3161" -> "3175" 
-  "3179" -> "3186" 
-  "3179" -> "3194" 
-  "3207" -> "3205" 
-  "3162" -> "3161" 
-  "3166" -> "3173" 
-  "3173" -> "3208" 
-  "3180" -> "3179" 
-  "3184" -> "3191" 
-  "3191" -> "3208" 
-  "3167" -> "3166" 
-  "3185" -> "3184" 
-  "3168" -> "3170" 
-  "3170" -> "3167" 
-  "3186" -> "3188" 
-  "3188" -> "3185" 
-  "3144" -> "3150" 
+digraph "CallByteMethodV" {  
+"3201" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1061</SUB>> ]
+"3219" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1062</SUB>> ]
+"3238" [label = <(soa,soa(env))<SUB>1063</SUB>> ]
+"3240" [label = <(RETURN,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetB();,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetB();)<SUB>1064</SUB>> ]
+"3241" [label = <(GetB,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetB())<SUB>1064</SUB>> ]
+"3242" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetB)<SUB>1064</SUB>> ]
+"3205" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1061</SUB>> ]
+"3223" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1062</SUB>> ]
+"3243" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>1064</SUB>> ]
+"3248" [label = <(FIELD_IDENTIFIER,GetB,GetB)<SUB>1064</SUB>> ]
+"3206" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1061</SUB>> ]
+"3210" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1061</SUB>> ]
+"3217" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1061</SUB>> ]
+"3224" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1062</SUB>> ]
+"3228" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1062</SUB>> ]
+"3235" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1062</SUB>> ]
+"3211" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1061</SUB>> ]
+"3229" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1062</SUB>> ]
+"3212" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1061</SUB>> ]
+"3214" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1061</SUB>> ]
+"3230" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1062</SUB>> ]
+"3232" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1062</SUB>> ]
+"3195" [label = <(METHOD,CallByteMethodV)<SUB>1060</SUB>> ]
+"3249" [label = <(METHOD_RETURN,jbyte)<SUB>1060</SUB>> ]
+  "3201" -> "3206" 
+  "3201" -> "3219" 
+  "3219" -> "3224" 
+  "3219" -> "3238" 
+  "3238" -> "3243" 
+  "3240" -> "3249" 
+  "3241" -> "3240" 
+  "3242" -> "3241" 
+  "3205" -> "3212" 
+  "3205" -> "3219" 
+  "3223" -> "3230" 
+  "3223" -> "3238" 
+  "3243" -> "3248" 
+  "3248" -> "3242" 
+  "3206" -> "3205" 
+  "3210" -> "3217" 
+  "3217" -> "3249" 
+  "3224" -> "3223" 
+  "3228" -> "3235" 
+  "3235" -> "3249" 
+  "3211" -> "3210" 
+  "3229" -> "3228" 
+  "3212" -> "3214" 
+  "3214" -> "3211" 
+  "3230" -> "3232" 
+  "3232" -> "3229" 
+  "3195" -> "3201" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/76-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/76-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/76-cfg.dot	2023-06-07 19:35:28.257384346 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/76-cfg.dot	2023-06-07 19:35:34.787383775 +0330
@@ -1,53 +1,53 @@
-digraph "CallBooleanMethodV" {  
-"3216" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1114</SUB>> ]
-"3234" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1115</SUB>> ]
-"3253" [label = <(soa,soa(env))<SUB>1116</SUB>> ]
-"3255" [label = <(RETURN,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetZ();,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetZ();)<SUB>1117</SUB>> ]
-"3256" [label = <(GetZ,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetZ())<SUB>1117</SUB>> ]
-"3257" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetZ)<SUB>1117</SUB>> ]
-"3220" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1114</SUB>> ]
-"3238" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1115</SUB>> ]
-"3258" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>1117</SUB>> ]
-"3263" [label = <(FIELD_IDENTIFIER,GetZ,GetZ)<SUB>1117</SUB>> ]
-"3221" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1114</SUB>> ]
-"3225" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1114</SUB>> ]
-"3232" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1114</SUB>> ]
-"3239" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1115</SUB>> ]
-"3243" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1115</SUB>> ]
-"3250" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1115</SUB>> ]
-"3226" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1114</SUB>> ]
-"3244" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1115</SUB>> ]
-"3227" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1114</SUB>> ]
-"3229" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1114</SUB>> ]
-"3245" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1115</SUB>> ]
-"3247" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1115</SUB>> ]
-"3210" [label = <(METHOD,CallBooleanMethodV)<SUB>1113</SUB>> ]
-"3264" [label = <(METHOD_RETURN,jboolean)<SUB>1113</SUB>> ]
-  "3216" -> "3221" 
-  "3216" -> "3234" 
-  "3234" -> "3239" 
-  "3234" -> "3253" 
-  "3253" -> "3258" 
-  "3255" -> "3264" 
-  "3256" -> "3255" 
-  "3257" -> "3256" 
-  "3220" -> "3227" 
-  "3220" -> "3234" 
-  "3238" -> "3245" 
-  "3238" -> "3253" 
-  "3258" -> "3263" 
-  "3263" -> "3257" 
-  "3221" -> "3220" 
-  "3225" -> "3232" 
-  "3232" -> "3264" 
-  "3239" -> "3238" 
-  "3243" -> "3250" 
-  "3250" -> "3264" 
-  "3226" -> "3225" 
-  "3244" -> "3243" 
-  "3227" -> "3229" 
-  "3229" -> "3226" 
-  "3245" -> "3247" 
-  "3247" -> "3244" 
-  "3210" -> "3216" 
+digraph "CallByteMethodA" {  
+"3257" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1068</SUB>> ]
+"3275" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1069</SUB>> ]
+"3294" [label = <(soa,soa(env))<SUB>1070</SUB>> ]
+"3296" [label = <(RETURN,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetB();,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetB();)<SUB>1071</SUB>> ]
+"3297" [label = <(GetB,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetB())<SUB>1071</SUB>> ]
+"3298" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetB)<SUB>1071</SUB>> ]
+"3261" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1068</SUB>> ]
+"3279" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1069</SUB>> ]
+"3299" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>1071</SUB>> ]
+"3304" [label = <(FIELD_IDENTIFIER,GetB,GetB)<SUB>1071</SUB>> ]
+"3262" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1068</SUB>> ]
+"3266" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1068</SUB>> ]
+"3273" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1068</SUB>> ]
+"3280" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1069</SUB>> ]
+"3284" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1069</SUB>> ]
+"3291" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1069</SUB>> ]
+"3267" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1068</SUB>> ]
+"3285" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1069</SUB>> ]
+"3268" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1068</SUB>> ]
+"3270" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1068</SUB>> ]
+"3286" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1069</SUB>> ]
+"3288" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1069</SUB>> ]
+"3251" [label = <(METHOD,CallByteMethodA)<SUB>1067</SUB>> ]
+"3305" [label = <(METHOD_RETURN,jbyte)<SUB>1067</SUB>> ]
+  "3257" -> "3262" 
+  "3257" -> "3275" 
+  "3275" -> "3280" 
+  "3275" -> "3294" 
+  "3294" -> "3299" 
+  "3296" -> "3305" 
+  "3297" -> "3296" 
+  "3298" -> "3297" 
+  "3261" -> "3268" 
+  "3261" -> "3275" 
+  "3279" -> "3286" 
+  "3279" -> "3294" 
+  "3299" -> "3304" 
+  "3304" -> "3298" 
+  "3262" -> "3261" 
+  "3266" -> "3273" 
+  "3273" -> "3305" 
+  "3280" -> "3279" 
+  "3284" -> "3291" 
+  "3291" -> "3305" 
+  "3267" -> "3266" 
+  "3285" -> "3284" 
+  "3268" -> "3270" 
+  "3270" -> "3267" 
+  "3286" -> "3288" 
+  "3288" -> "3285" 
+  "3251" -> "3257" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/77-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/77-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/77-cfg.dot	2023-06-07 19:35:28.257384346 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/77-cfg.dot	2023-06-07 19:35:34.787383775 +0330
@@ -1,53 +1,61 @@
-digraph "CallBooleanMethodA" {  
-"3272" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1121</SUB>> ]
-"3290" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1122</SUB>> ]
-"3309" [label = <(soa,soa(env))<SUB>1123</SUB>> ]
-"3311" [label = <(RETURN,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetZ();,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetZ();)<SUB>1124</SUB>> ]
-"3312" [label = <(GetZ,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetZ())<SUB>1124</SUB>> ]
-"3313" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetZ)<SUB>1124</SUB>> ]
-"3276" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1121</SUB>> ]
-"3294" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1122</SUB>> ]
-"3314" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>1124</SUB>> ]
-"3319" [label = <(FIELD_IDENTIFIER,GetZ,GetZ)<SUB>1124</SUB>> ]
-"3277" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1121</SUB>> ]
-"3281" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1121</SUB>> ]
-"3288" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1121</SUB>> ]
-"3295" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1122</SUB>> ]
-"3299" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1122</SUB>> ]
-"3306" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1122</SUB>> ]
-"3282" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1121</SUB>> ]
-"3300" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1122</SUB>> ]
-"3283" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1121</SUB>> ]
-"3285" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1121</SUB>> ]
-"3301" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1122</SUB>> ]
-"3303" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1122</SUB>> ]
-"3266" [label = <(METHOD,CallBooleanMethodA)<SUB>1120</SUB>> ]
-"3320" [label = <(METHOD_RETURN,jboolean)<SUB>1120</SUB>> ]
-  "3272" -> "3277" 
-  "3272" -> "3290" 
-  "3290" -> "3295" 
-  "3290" -> "3309" 
-  "3309" -> "3314" 
-  "3311" -> "3320" 
-  "3312" -> "3311" 
-  "3313" -> "3312" 
-  "3276" -> "3283" 
-  "3276" -> "3290" 
-  "3294" -> "3301" 
-  "3294" -> "3309" 
-  "3314" -> "3319" 
-  "3319" -> "3313" 
-  "3277" -> "3276" 
-  "3281" -> "3288" 
-  "3288" -> "3320" 
-  "3295" -> "3294" 
-  "3299" -> "3306" 
-  "3306" -> "3320" 
-  "3282" -> "3281" 
-  "3300" -> "3299" 
-  "3283" -> "3285" 
-  "3285" -> "3282" 
-  "3301" -> "3303" 
-  "3303" -> "3300" 
-  "3266" -> "3272" 
+digraph "CallCharMethod" {  
+"3313" [label = <(va_start,va_start(ap, mid))<SUB>1076</SUB>> ]
+"3317" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1077</SUB>> ]
+"3320" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1078</SUB>> ]
+"3338" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1079</SUB>> ]
+"3357" [label = <(soa,soa(env))<SUB>1080</SUB>> ]
+"3360" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap)))<SUB>1081</SUB>> ]
+"3366" [label = <(RETURN,return result.GetC();,return result.GetC();)<SUB>1082</SUB>> ]
+"3318" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1077</SUB>> ]
+"3361" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>1081</SUB>> ]
+"3367" [label = <(GetC,result.GetC())<SUB>1082</SUB>> ]
+"3368" [label = <(&lt;operator&gt;.fieldAccess,result.GetC)<SUB>1082</SUB>> ]
+"3324" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1078</SUB>> ]
+"3342" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1079</SUB>> ]
+"3370" [label = <(FIELD_IDENTIFIER,GetC,GetC)<SUB>1082</SUB>> ]
+"3325" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1078</SUB>> ]
+"3329" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1078</SUB>> ]
+"3336" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1078</SUB>> ]
+"3343" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1079</SUB>> ]
+"3347" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1079</SUB>> ]
+"3354" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1079</SUB>> ]
+"3330" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1078</SUB>> ]
+"3348" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1079</SUB>> ]
+"3331" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1078</SUB>> ]
+"3333" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1078</SUB>> ]
+"3349" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1079</SUB>> ]
+"3351" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1079</SUB>> ]
+"3307" [label = <(METHOD,CallCharMethod)<SUB>1074</SUB>> ]
+"3371" [label = <(METHOD_RETURN,jchar)<SUB>1074</SUB>> ]
+  "3313" -> "3318" 
+  "3317" -> "3320" 
+  "3320" -> "3325" 
+  "3320" -> "3338" 
+  "3338" -> "3343" 
+  "3338" -> "3357" 
+  "3357" -> "3361" 
+  "3360" -> "3370" 
+  "3366" -> "3371" 
+  "3318" -> "3317" 
+  "3361" -> "3360" 
+  "3367" -> "3366" 
+  "3368" -> "3367" 
+  "3324" -> "3331" 
+  "3324" -> "3338" 
+  "3342" -> "3349" 
+  "3342" -> "3357" 
+  "3370" -> "3368" 
+  "3325" -> "3324" 
+  "3329" -> "3336" 
+  "3336" -> "3371" 
+  "3343" -> "3342" 
+  "3347" -> "3354" 
+  "3354" -> "3371" 
+  "3330" -> "3329" 
+  "3348" -> "3347" 
+  "3331" -> "3333" 
+  "3333" -> "3330" 
+  "3349" -> "3351" 
+  "3351" -> "3348" 
+  "3307" -> "3313" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/78-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/78-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/78-cfg.dot	2023-06-07 19:35:28.257384346 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/78-cfg.dot	2023-06-07 19:35:34.787383775 +0330
@@ -1,61 +1,53 @@
-digraph "CallByteMethod" {  
-"3328" [label = <(va_start,va_start(ap, mid))<SUB>1129</SUB>> ]
-"3332" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1130</SUB>> ]
-"3335" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1131</SUB>> ]
-"3353" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1132</SUB>> ]
-"3372" [label = <(soa,soa(env))<SUB>1133</SUB>> ]
-"3375" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap)))<SUB>1134</SUB>> ]
-"3381" [label = <(RETURN,return result.GetB();,return result.GetB();)<SUB>1135</SUB>> ]
-"3333" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1130</SUB>> ]
-"3376" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>1134</SUB>> ]
-"3382" [label = <(GetB,result.GetB())<SUB>1135</SUB>> ]
-"3383" [label = <(&lt;operator&gt;.fieldAccess,result.GetB)<SUB>1135</SUB>> ]
-"3339" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1131</SUB>> ]
-"3357" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1132</SUB>> ]
-"3385" [label = <(FIELD_IDENTIFIER,GetB,GetB)<SUB>1135</SUB>> ]
-"3340" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1131</SUB>> ]
-"3344" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1131</SUB>> ]
-"3351" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1131</SUB>> ]
-"3358" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1132</SUB>> ]
-"3362" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1132</SUB>> ]
-"3369" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1132</SUB>> ]
-"3345" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1131</SUB>> ]
-"3363" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1132</SUB>> ]
-"3346" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1131</SUB>> ]
-"3348" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1131</SUB>> ]
-"3364" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1132</SUB>> ]
-"3366" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1132</SUB>> ]
-"3322" [label = <(METHOD,CallByteMethod)<SUB>1127</SUB>> ]
-"3386" [label = <(METHOD_RETURN,jbyte)<SUB>1127</SUB>> ]
-  "3328" -> "3333" 
-  "3332" -> "3335" 
-  "3335" -> "3340" 
-  "3335" -> "3353" 
-  "3353" -> "3358" 
-  "3353" -> "3372" 
-  "3372" -> "3376" 
-  "3375" -> "3385" 
-  "3381" -> "3386" 
-  "3333" -> "3332" 
-  "3376" -> "3375" 
-  "3382" -> "3381" 
-  "3383" -> "3382" 
-  "3339" -> "3346" 
-  "3339" -> "3353" 
-  "3357" -> "3364" 
-  "3357" -> "3372" 
-  "3385" -> "3383" 
-  "3340" -> "3339" 
-  "3344" -> "3351" 
-  "3351" -> "3386" 
-  "3358" -> "3357" 
-  "3362" -> "3369" 
-  "3369" -> "3386" 
-  "3345" -> "3344" 
-  "3363" -> "3362" 
-  "3346" -> "3348" 
-  "3348" -> "3345" 
-  "3364" -> "3366" 
-  "3366" -> "3363" 
-  "3322" -> "3328" 
+digraph "CallCharMethodV" {  
+"3379" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1086</SUB>> ]
+"3397" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1087</SUB>> ]
+"3416" [label = <(soa,soa(env))<SUB>1088</SUB>> ]
+"3418" [label = <(RETURN,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetC();,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetC();)<SUB>1089</SUB>> ]
+"3419" [label = <(GetC,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetC())<SUB>1089</SUB>> ]
+"3420" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetC)<SUB>1089</SUB>> ]
+"3383" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1086</SUB>> ]
+"3401" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1087</SUB>> ]
+"3421" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>1089</SUB>> ]
+"3426" [label = <(FIELD_IDENTIFIER,GetC,GetC)<SUB>1089</SUB>> ]
+"3384" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1086</SUB>> ]
+"3388" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1086</SUB>> ]
+"3395" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1086</SUB>> ]
+"3402" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1087</SUB>> ]
+"3406" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1087</SUB>> ]
+"3413" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1087</SUB>> ]
+"3389" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1086</SUB>> ]
+"3407" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1087</SUB>> ]
+"3390" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1086</SUB>> ]
+"3392" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1086</SUB>> ]
+"3408" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1087</SUB>> ]
+"3410" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1087</SUB>> ]
+"3373" [label = <(METHOD,CallCharMethodV)<SUB>1085</SUB>> ]
+"3427" [label = <(METHOD_RETURN,jchar)<SUB>1085</SUB>> ]
+  "3379" -> "3384" 
+  "3379" -> "3397" 
+  "3397" -> "3402" 
+  "3397" -> "3416" 
+  "3416" -> "3421" 
+  "3418" -> "3427" 
+  "3419" -> "3418" 
+  "3420" -> "3419" 
+  "3383" -> "3390" 
+  "3383" -> "3397" 
+  "3401" -> "3408" 
+  "3401" -> "3416" 
+  "3421" -> "3426" 
+  "3426" -> "3420" 
+  "3384" -> "3383" 
+  "3388" -> "3395" 
+  "3395" -> "3427" 
+  "3402" -> "3401" 
+  "3406" -> "3413" 
+  "3413" -> "3427" 
+  "3389" -> "3388" 
+  "3407" -> "3406" 
+  "3390" -> "3392" 
+  "3392" -> "3389" 
+  "3408" -> "3410" 
+  "3410" -> "3407" 
+  "3373" -> "3379" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/79-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/79-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/79-cfg.dot	2023-06-07 19:35:28.257384346 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/79-cfg.dot	2023-06-07 19:35:34.787383775 +0330
@@ -1,53 +1,53 @@
-digraph "CallByteMethodV" {  
-"3394" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1139</SUB>> ]
-"3412" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1140</SUB>> ]
-"3431" [label = <(soa,soa(env))<SUB>1141</SUB>> ]
-"3433" [label = <(RETURN,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetB();,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetB();)<SUB>1142</SUB>> ]
-"3434" [label = <(GetB,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetB())<SUB>1142</SUB>> ]
-"3435" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetB)<SUB>1142</SUB>> ]
-"3398" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1139</SUB>> ]
-"3416" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1140</SUB>> ]
-"3436" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>1142</SUB>> ]
-"3441" [label = <(FIELD_IDENTIFIER,GetB,GetB)<SUB>1142</SUB>> ]
-"3399" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1139</SUB>> ]
-"3403" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1139</SUB>> ]
-"3410" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1139</SUB>> ]
-"3417" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1140</SUB>> ]
-"3421" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1140</SUB>> ]
-"3428" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1140</SUB>> ]
-"3404" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1139</SUB>> ]
-"3422" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1140</SUB>> ]
-"3405" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1139</SUB>> ]
-"3407" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1139</SUB>> ]
-"3423" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1140</SUB>> ]
-"3425" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1140</SUB>> ]
-"3388" [label = <(METHOD,CallByteMethodV)<SUB>1138</SUB>> ]
-"3442" [label = <(METHOD_RETURN,jbyte)<SUB>1138</SUB>> ]
-  "3394" -> "3399" 
-  "3394" -> "3412" 
-  "3412" -> "3417" 
-  "3412" -> "3431" 
-  "3431" -> "3436" 
-  "3433" -> "3442" 
-  "3434" -> "3433" 
-  "3435" -> "3434" 
-  "3398" -> "3405" 
-  "3398" -> "3412" 
-  "3416" -> "3423" 
-  "3416" -> "3431" 
-  "3436" -> "3441" 
-  "3441" -> "3435" 
-  "3399" -> "3398" 
-  "3403" -> "3410" 
-  "3410" -> "3442" 
-  "3417" -> "3416" 
-  "3421" -> "3428" 
-  "3428" -> "3442" 
-  "3404" -> "3403" 
-  "3422" -> "3421" 
-  "3405" -> "3407" 
-  "3407" -> "3404" 
-  "3423" -> "3425" 
-  "3425" -> "3422" 
-  "3388" -> "3394" 
+digraph "CallCharMethodA" {  
+"3435" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1093</SUB>> ]
+"3453" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1094</SUB>> ]
+"3472" [label = <(soa,soa(env))<SUB>1095</SUB>> ]
+"3474" [label = <(RETURN,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetC();,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetC();)<SUB>1096</SUB>> ]
+"3475" [label = <(GetC,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetC())<SUB>1096</SUB>> ]
+"3476" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetC)<SUB>1096</SUB>> ]
+"3439" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1093</SUB>> ]
+"3457" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1094</SUB>> ]
+"3477" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>1096</SUB>> ]
+"3482" [label = <(FIELD_IDENTIFIER,GetC,GetC)<SUB>1096</SUB>> ]
+"3440" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1093</SUB>> ]
+"3444" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1093</SUB>> ]
+"3451" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1093</SUB>> ]
+"3458" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1094</SUB>> ]
+"3462" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1094</SUB>> ]
+"3469" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1094</SUB>> ]
+"3445" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1093</SUB>> ]
+"3463" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1094</SUB>> ]
+"3446" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1093</SUB>> ]
+"3448" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1093</SUB>> ]
+"3464" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1094</SUB>> ]
+"3466" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1094</SUB>> ]
+"3429" [label = <(METHOD,CallCharMethodA)<SUB>1092</SUB>> ]
+"3483" [label = <(METHOD_RETURN,jchar)<SUB>1092</SUB>> ]
+  "3435" -> "3440" 
+  "3435" -> "3453" 
+  "3453" -> "3458" 
+  "3453" -> "3472" 
+  "3472" -> "3477" 
+  "3474" -> "3483" 
+  "3475" -> "3474" 
+  "3476" -> "3475" 
+  "3439" -> "3446" 
+  "3439" -> "3453" 
+  "3457" -> "3464" 
+  "3457" -> "3472" 
+  "3477" -> "3482" 
+  "3482" -> "3476" 
+  "3440" -> "3439" 
+  "3444" -> "3451" 
+  "3451" -> "3483" 
+  "3458" -> "3457" 
+  "3462" -> "3469" 
+  "3469" -> "3483" 
+  "3445" -> "3444" 
+  "3463" -> "3462" 
+  "3446" -> "3448" 
+  "3448" -> "3445" 
+  "3464" -> "3466" 
+  "3466" -> "3463" 
+  "3429" -> "3435" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/8-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/8-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/8-cfg.dot	2023-06-07 19:35:28.207384350 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/8-cfg.dot	2023-06-07 19:35:34.737383779 +0330
@@ -1,153 +1,7 @@
-digraph "VisitModifiedUtf8Chars" {  
-"58" [label = <(DCHECK_LE,DCHECK_LE(byte_count, strlen(utf8)))<SUB>101</SUB>> ]
-"63" [label = <(&lt;operator&gt;.assignment,len = 0)<SUB>102</SUB>> ]
-"67" [label = <(&lt;operator&gt;.assignment,* end = utf8 + byte_count)<SUB>103</SUB>> ]
-"223" [label = <(RETURN,return len;,return len;)<SUB>161</SUB>> ]
-"60" [label = <(strlen,strlen(utf8))<SUB>101</SUB>> ]
-"69" [label = <(&lt;operator&gt;.addition,utf8 + byte_count)<SUB>103</SUB>> ]
-"73" [label = <(&lt;operator&gt;.notEquals,utf8 != end)<SUB>104</SUB>> ]
-"78" [label = <(&lt;operator&gt;.assignment,ic = *utf8)<SUB>105</SUB>> ]
-"101" [label = <(&lt;operator&gt;.assignment,is_ascii = [utf8]() {\012 const char* ptr = utf8; // Make a copy that can be modified by GetUtf16FromUtf8().\012 return mirror::String::IsASCII(dchecked_integral_cast&lt;uint16_t&gt;(GetUtf16FromUtf8(&amp;ptr)));\012 })<SUB>113</SUB>> ]
-"214" [label = <(good,good(utf8, 4u))<SUB>157</SUB>> ]
-"217" [label = <(&lt;operator&gt;.assignmentPlus,utf8 += 4u)<SUB>158</SUB>> ]
-"220" [label = <(&lt;operator&gt;.assignmentPlus,len += 2u)<SUB>159</SUB>> ]
-"80" [label = <(&lt;operator&gt;.indirection,*utf8)<SUB>105</SUB>> ]
-"83" [label = <(LIKELY,LIKELY((ic &amp; 0x80) == 0))<SUB>106</SUB>> ]
-"103" [label = <(METHOD_REF,ANY anonymous_lambda_8 (),is_ascii = [utf8]() {\012 const char* ptr = utf8; // Make a copy that can be modified by GetUtf16FromUtf8().\012 return mirror::String::IsASCII(dchecked_integral_cast&lt;uint16_t&gt;(GetUtf16FromUtf8(&amp;ptr)));\012 })<SUB>113</SUB>> ]
-"105" [label = <(&lt;operator&gt;.equals,(ic &amp; 0x20) == 0)<SUB>119</SUB>> ]
-"152" [label = <(&lt;operator&gt;.equals,(ic &amp; 0x10) == 0)<SUB>135</SUB>> ]
-"199" [label = <(&lt;operator&gt;.lessThan,static_cast&lt;size_t&gt;(end - utf8) &lt; 4u)<SUB>154</SUB>> ]
-"84" [label = <(&lt;operator&gt;.equals,(ic &amp; 0x80) == 0)<SUB>106</SUB>> ]
-"90" [label = <(good,good(utf8, 1u))<SUB>108</SUB>> ]
-"93" [label = <(&lt;operator&gt;.assignmentPlus,utf8 += 1u)<SUB>109</SUB>> ]
-"96" [label = <(&lt;operator&gt;.assignmentPlus,len += 1u)<SUB>110</SUB>> ]
-"106" [label = <(&lt;operator&gt;.and,ic &amp; 0x20)<SUB>119</SUB>> ]
-"144" [label = <(&lt;operator&gt;.assignmentPlus,utf8 += 2u)<SUB>131</SUB>> ]
-"147" [label = <(&lt;operator&gt;.assignmentPlus,len += 1u)<SUB>132</SUB>> ]
-"153" [label = <(&lt;operator&gt;.and,ic &amp; 0x10)<SUB>135</SUB>> ]
-"191" [label = <(&lt;operator&gt;.assignmentPlus,utf8 += 3u)<SUB>147</SUB>> ]
-"194" [label = <(&lt;operator&gt;.assignmentPlus,len += 1u)<SUB>148</SUB>> ]
-"200" [label = <(&lt;operator&gt;.cast,static_cast&lt;size_t&gt;(end - utf8))<SUB>154</SUB>> ]
-"207" [label = <(RETURN,return bad() ? 0u : len + 1u;,return bad() ? 0u : len + 1u;)<SUB>155</SUB>> ]
-"85" [label = <(&lt;operator&gt;.and,ic &amp; 0x80)<SUB>106</SUB>> ]
-"112" [label = <(&lt;operator&gt;.lessThan,static_cast&lt;size_t&gt;(end - utf8) &lt; 2u)<SUB>121</SUB>> ]
-"128" [label = <(&lt;operator&gt;.logicalAnd,mirror::kUseStringCompression &amp;&amp; is_ascii())<SUB>124</SUB>> ]
-"159" [label = <(&lt;operator&gt;.lessThan,static_cast&lt;size_t&gt;(end - utf8) &lt; 3u)<SUB>137</SUB>> ]
-"175" [label = <(&lt;operator&gt;.logicalAnd,mirror::kUseStringCompression &amp;&amp; is_ascii())<SUB>140</SUB>> ]
-"201" [label = <(UNKNOWN,size_t,size_t)<SUB>154</SUB>> ]
-"202" [label = <(&lt;operator&gt;.subtraction,end - utf8)<SUB>154</SUB>> ]
-"208" [label = <(&lt;operator&gt;.conditional,bad() ? 0u : len + 1u)<SUB>155</SUB>> ]
-"113" [label = <(&lt;operator&gt;.cast,static_cast&lt;size_t&gt;(end - utf8))<SUB>121</SUB>> ]
-"120" [label = <(RETURN,return bad() ? 0u : len + 1u;,return bad() ? 0u : len + 1u;)<SUB>122</SUB>> ]
-"129" [label = <(&lt;operator&gt;.fieldAccess,mirror::kUseStringCompression)<SUB>124</SUB>> ]
-"132" [label = <(is_ascii,is_ascii())<SUB>124</SUB>> ]
-"160" [label = <(&lt;operator&gt;.cast,static_cast&lt;size_t&gt;(end - utf8))<SUB>137</SUB>> ]
-"167" [label = <(RETURN,return bad() ? 0u : len + 1u;,return bad() ? 0u : len + 1u;)<SUB>138</SUB>> ]
-"176" [label = <(&lt;operator&gt;.fieldAccess,mirror::kUseStringCompression)<SUB>140</SUB>> ]
-"179" [label = <(is_ascii,is_ascii())<SUB>140</SUB>> ]
-"209" [label = <(bad,bad())<SUB>155</SUB>> ]
-"211" [label = <(&lt;operator&gt;.addition,len + 1u)<SUB>155</SUB>> ]
-"114" [label = <(UNKNOWN,size_t,size_t)<SUB>121</SUB>> ]
-"115" [label = <(&lt;operator&gt;.subtraction,end - utf8)<SUB>121</SUB>> ]
-"121" [label = <(&lt;operator&gt;.conditional,bad() ? 0u : len + 1u)<SUB>122</SUB>> ]
-"131" [label = <(FIELD_IDENTIFIER,kUseStringCompression,kUseStringCompression)<SUB>124</SUB>> ]
-"135" [label = <(bad,bad())<SUB>125</SUB>> ]
-"141" [label = <(good,good(utf8, 2u))<SUB>129</SUB>> ]
-"161" [label = <(UNKNOWN,size_t,size_t)<SUB>137</SUB>> ]
-"162" [label = <(&lt;operator&gt;.subtraction,end - utf8)<SUB>137</SUB>> ]
-"168" [label = <(&lt;operator&gt;.conditional,bad() ? 0u : len + 1u)<SUB>138</SUB>> ]
-"178" [label = <(FIELD_IDENTIFIER,kUseStringCompression,kUseStringCompression)<SUB>140</SUB>> ]
-"182" [label = <(bad,bad())<SUB>141</SUB>> ]
-"188" [label = <(good,good(utf8, 3u))<SUB>145</SUB>> ]
-"122" [label = <(bad,bad())<SUB>122</SUB>> ]
-"124" [label = <(&lt;operator&gt;.addition,len + 1u)<SUB>122</SUB>> ]
-"137" [label = <(RETURN,return 0u;,return 0u;)<SUB>126</SUB>> ]
-"169" [label = <(bad,bad())<SUB>138</SUB>> ]
-"171" [label = <(&lt;operator&gt;.addition,len + 1u)<SUB>138</SUB>> ]
-"184" [label = <(RETURN,return 0u;,return 0u;)<SUB>142</SUB>> ]
-"52" [label = <(METHOD,VisitModifiedUtf8Chars)<SUB>100</SUB>> ]
-"225" [label = <(METHOD_RETURN,size_t)<SUB>100</SUB>> ]
-  "58" -> "63" 
-  "63" -> "69" 
-  "67" -> "73" 
-  "223" -> "225" 
-  "60" -> "58" 
-  "69" -> "67" 
-  "73" -> "80" 
-  "73" -> "223" 
-  "78" -> "85" 
-  "101" -> "106" 
-  "214" -> "217" 
-  "217" -> "220" 
-  "220" -> "73" 
-  "80" -> "78" 
-  "83" -> "90" 
-  "83" -> "103" 
-  "103" -> "101" 
-  "105" -> "114" 
-  "105" -> "153" 
-  "152" -> "161" 
-  "152" -> "201" 
-  "199" -> "209" 
-  "199" -> "214" 
-  "84" -> "83" 
-  "90" -> "93" 
-  "93" -> "96" 
-  "96" -> "73" 
-  "106" -> "105" 
-  "144" -> "147" 
-  "147" -> "73" 
-  "153" -> "152" 
-  "191" -> "194" 
-  "194" -> "73" 
-  "200" -> "199" 
-  "207" -> "225" 
-  "85" -> "84" 
-  "112" -> "122" 
-  "112" -> "131" 
-  "128" -> "135" 
-  "128" -> "141" 
-  "159" -> "169" 
-  "159" -> "178" 
-  "175" -> "182" 
-  "175" -> "188" 
-  "201" -> "202" 
-  "202" -> "200" 
-  "208" -> "207" 
-  "113" -> "112" 
-  "120" -> "225" 
-  "129" -> "132" 
-  "129" -> "128" 
-  "132" -> "128" 
-  "160" -> "159" 
-  "167" -> "225" 
-  "176" -> "179" 
-  "176" -> "175" 
-  "179" -> "175" 
-  "209" -> "208" 
-  "209" -> "211" 
-  "211" -> "208" 
-  "114" -> "115" 
-  "115" -> "113" 
-  "121" -> "120" 
-  "131" -> "129" 
-  "135" -> "137" 
-  "135" -> "144" 
-  "141" -> "144" 
-  "161" -> "162" 
-  "162" -> "160" 
-  "168" -> "167" 
-  "178" -> "176" 
-  "182" -> "184" 
-  "182" -> "191" 
-  "188" -> "191" 
-  "122" -> "121" 
-  "122" -> "124" 
-  "124" -> "121" 
-  "137" -> "225" 
-  "169" -> "168" 
-  "169" -> "171" 
-  "171" -> "168" 
-  "184" -> "225" 
-  "52" -> "60" 
+digraph "GetSingleton" {  
+"126" [label = <(RETURN,return Singleton;,return Singleton;)<SUB>125</SUB>> ]
+"123" [label = <(METHOD,GetSingleton)<SUB>123</SUB>> ]
+"128" [label = <(METHOD_RETURN,CodeRangeCache)<SUB>123</SUB>> ]
+  "126" -> "128" 
+  "123" -> "126" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/80-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/80-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/80-cfg.dot	2023-06-07 19:35:28.257384346 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/80-cfg.dot	2023-06-07 19:35:34.787383775 +0330
@@ -1,53 +1,61 @@
-digraph "CallByteMethodA" {  
-"3450" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1146</SUB>> ]
-"3468" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1147</SUB>> ]
-"3487" [label = <(soa,soa(env))<SUB>1148</SUB>> ]
-"3489" [label = <(RETURN,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetB();,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetB();)<SUB>1149</SUB>> ]
-"3490" [label = <(GetB,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetB())<SUB>1149</SUB>> ]
-"3491" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetB)<SUB>1149</SUB>> ]
-"3454" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1146</SUB>> ]
-"3472" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1147</SUB>> ]
-"3492" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>1149</SUB>> ]
-"3497" [label = <(FIELD_IDENTIFIER,GetB,GetB)<SUB>1149</SUB>> ]
-"3455" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1146</SUB>> ]
-"3459" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1146</SUB>> ]
-"3466" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1146</SUB>> ]
-"3473" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1147</SUB>> ]
-"3477" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1147</SUB>> ]
-"3484" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1147</SUB>> ]
-"3460" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1146</SUB>> ]
-"3478" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1147</SUB>> ]
-"3461" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1146</SUB>> ]
-"3463" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1146</SUB>> ]
-"3479" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1147</SUB>> ]
-"3481" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1147</SUB>> ]
-"3444" [label = <(METHOD,CallByteMethodA)<SUB>1145</SUB>> ]
-"3498" [label = <(METHOD_RETURN,jbyte)<SUB>1145</SUB>> ]
-  "3450" -> "3455" 
-  "3450" -> "3468" 
-  "3468" -> "3473" 
-  "3468" -> "3487" 
-  "3487" -> "3492" 
-  "3489" -> "3498" 
-  "3490" -> "3489" 
-  "3491" -> "3490" 
-  "3454" -> "3461" 
-  "3454" -> "3468" 
-  "3472" -> "3479" 
-  "3472" -> "3487" 
-  "3492" -> "3497" 
-  "3497" -> "3491" 
-  "3455" -> "3454" 
-  "3459" -> "3466" 
-  "3466" -> "3498" 
-  "3473" -> "3472" 
-  "3477" -> "3484" 
-  "3484" -> "3498" 
-  "3460" -> "3459" 
-  "3478" -> "3477" 
-  "3461" -> "3463" 
-  "3463" -> "3460" 
-  "3479" -> "3481" 
-  "3481" -> "3478" 
-  "3444" -> "3450" 
+digraph "CallDoubleMethod" {  
+"3491" [label = <(va_start,va_start(ap, mid))<SUB>1101</SUB>> ]
+"3495" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1102</SUB>> ]
+"3498" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1103</SUB>> ]
+"3516" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1104</SUB>> ]
+"3535" [label = <(soa,soa(env))<SUB>1105</SUB>> ]
+"3538" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap)))<SUB>1106</SUB>> ]
+"3544" [label = <(RETURN,return result.GetD();,return result.GetD();)<SUB>1107</SUB>> ]
+"3496" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1102</SUB>> ]
+"3539" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>1106</SUB>> ]
+"3545" [label = <(GetD,result.GetD())<SUB>1107</SUB>> ]
+"3546" [label = <(&lt;operator&gt;.fieldAccess,result.GetD)<SUB>1107</SUB>> ]
+"3502" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1103</SUB>> ]
+"3520" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1104</SUB>> ]
+"3548" [label = <(FIELD_IDENTIFIER,GetD,GetD)<SUB>1107</SUB>> ]
+"3503" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1103</SUB>> ]
+"3507" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1103</SUB>> ]
+"3514" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1103</SUB>> ]
+"3521" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1104</SUB>> ]
+"3525" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1104</SUB>> ]
+"3532" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1104</SUB>> ]
+"3508" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1103</SUB>> ]
+"3526" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1104</SUB>> ]
+"3509" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1103</SUB>> ]
+"3511" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1103</SUB>> ]
+"3527" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1104</SUB>> ]
+"3529" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1104</SUB>> ]
+"3485" [label = <(METHOD,CallDoubleMethod)<SUB>1099</SUB>> ]
+"3549" [label = <(METHOD_RETURN,jdouble)<SUB>1099</SUB>> ]
+  "3491" -> "3496" 
+  "3495" -> "3498" 
+  "3498" -> "3503" 
+  "3498" -> "3516" 
+  "3516" -> "3521" 
+  "3516" -> "3535" 
+  "3535" -> "3539" 
+  "3538" -> "3548" 
+  "3544" -> "3549" 
+  "3496" -> "3495" 
+  "3539" -> "3538" 
+  "3545" -> "3544" 
+  "3546" -> "3545" 
+  "3502" -> "3509" 
+  "3502" -> "3516" 
+  "3520" -> "3527" 
+  "3520" -> "3535" 
+  "3548" -> "3546" 
+  "3503" -> "3502" 
+  "3507" -> "3514" 
+  "3514" -> "3549" 
+  "3521" -> "3520" 
+  "3525" -> "3532" 
+  "3532" -> "3549" 
+  "3508" -> "3507" 
+  "3526" -> "3525" 
+  "3509" -> "3511" 
+  "3511" -> "3508" 
+  "3527" -> "3529" 
+  "3529" -> "3526" 
+  "3485" -> "3491" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/81-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/81-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/81-cfg.dot	2023-06-07 19:35:28.257384346 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/81-cfg.dot	2023-06-07 19:35:34.787383775 +0330
@@ -1,61 +1,53 @@
-digraph "CallCharMethod" {  
-"3506" [label = <(va_start,va_start(ap, mid))<SUB>1154</SUB>> ]
-"3510" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1155</SUB>> ]
-"3513" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1156</SUB>> ]
-"3531" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1157</SUB>> ]
-"3550" [label = <(soa,soa(env))<SUB>1158</SUB>> ]
-"3553" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap)))<SUB>1159</SUB>> ]
-"3559" [label = <(RETURN,return result.GetC();,return result.GetC();)<SUB>1160</SUB>> ]
-"3511" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1155</SUB>> ]
-"3554" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>1159</SUB>> ]
-"3560" [label = <(GetC,result.GetC())<SUB>1160</SUB>> ]
-"3561" [label = <(&lt;operator&gt;.fieldAccess,result.GetC)<SUB>1160</SUB>> ]
-"3517" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1156</SUB>> ]
-"3535" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1157</SUB>> ]
-"3563" [label = <(FIELD_IDENTIFIER,GetC,GetC)<SUB>1160</SUB>> ]
-"3518" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1156</SUB>> ]
-"3522" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1156</SUB>> ]
-"3529" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1156</SUB>> ]
-"3536" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1157</SUB>> ]
-"3540" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1157</SUB>> ]
-"3547" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1157</SUB>> ]
-"3523" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1156</SUB>> ]
-"3541" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1157</SUB>> ]
-"3524" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1156</SUB>> ]
-"3526" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1156</SUB>> ]
-"3542" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1157</SUB>> ]
-"3544" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1157</SUB>> ]
-"3500" [label = <(METHOD,CallCharMethod)<SUB>1152</SUB>> ]
-"3564" [label = <(METHOD_RETURN,jchar)<SUB>1152</SUB>> ]
-  "3506" -> "3511" 
-  "3510" -> "3513" 
-  "3513" -> "3518" 
-  "3513" -> "3531" 
-  "3531" -> "3536" 
-  "3531" -> "3550" 
-  "3550" -> "3554" 
-  "3553" -> "3563" 
-  "3559" -> "3564" 
-  "3511" -> "3510" 
-  "3554" -> "3553" 
-  "3560" -> "3559" 
-  "3561" -> "3560" 
-  "3517" -> "3524" 
-  "3517" -> "3531" 
-  "3535" -> "3542" 
-  "3535" -> "3550" 
-  "3563" -> "3561" 
-  "3518" -> "3517" 
-  "3522" -> "3529" 
-  "3529" -> "3564" 
-  "3536" -> "3535" 
-  "3540" -> "3547" 
-  "3547" -> "3564" 
-  "3523" -> "3522" 
-  "3541" -> "3540" 
-  "3524" -> "3526" 
-  "3526" -> "3523" 
-  "3542" -> "3544" 
-  "3544" -> "3541" 
-  "3500" -> "3506" 
+digraph "CallDoubleMethodV" {  
+"3557" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1111</SUB>> ]
+"3575" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1112</SUB>> ]
+"3594" [label = <(soa,soa(env))<SUB>1113</SUB>> ]
+"3596" [label = <(RETURN,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetD();,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetD();)<SUB>1114</SUB>> ]
+"3597" [label = <(GetD,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetD())<SUB>1114</SUB>> ]
+"3598" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetD)<SUB>1114</SUB>> ]
+"3561" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1111</SUB>> ]
+"3579" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1112</SUB>> ]
+"3599" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>1114</SUB>> ]
+"3604" [label = <(FIELD_IDENTIFIER,GetD,GetD)<SUB>1114</SUB>> ]
+"3562" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1111</SUB>> ]
+"3566" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1111</SUB>> ]
+"3573" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1111</SUB>> ]
+"3580" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1112</SUB>> ]
+"3584" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1112</SUB>> ]
+"3591" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1112</SUB>> ]
+"3567" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1111</SUB>> ]
+"3585" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1112</SUB>> ]
+"3568" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1111</SUB>> ]
+"3570" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1111</SUB>> ]
+"3586" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1112</SUB>> ]
+"3588" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1112</SUB>> ]
+"3551" [label = <(METHOD,CallDoubleMethodV)<SUB>1110</SUB>> ]
+"3605" [label = <(METHOD_RETURN,jdouble)<SUB>1110</SUB>> ]
+  "3557" -> "3562" 
+  "3557" -> "3575" 
+  "3575" -> "3580" 
+  "3575" -> "3594" 
+  "3594" -> "3599" 
+  "3596" -> "3605" 
+  "3597" -> "3596" 
+  "3598" -> "3597" 
+  "3561" -> "3568" 
+  "3561" -> "3575" 
+  "3579" -> "3586" 
+  "3579" -> "3594" 
+  "3599" -> "3604" 
+  "3604" -> "3598" 
+  "3562" -> "3561" 
+  "3566" -> "3573" 
+  "3573" -> "3605" 
+  "3580" -> "3579" 
+  "3584" -> "3591" 
+  "3591" -> "3605" 
+  "3567" -> "3566" 
+  "3585" -> "3584" 
+  "3568" -> "3570" 
+  "3570" -> "3567" 
+  "3586" -> "3588" 
+  "3588" -> "3585" 
+  "3551" -> "3557" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/82-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/82-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/82-cfg.dot	2023-06-07 19:35:28.267384345 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/82-cfg.dot	2023-06-07 19:35:34.787383775 +0330
@@ -1,53 +1,53 @@
-digraph "CallCharMethodV" {  
-"3572" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1164</SUB>> ]
-"3590" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1165</SUB>> ]
-"3609" [label = <(soa,soa(env))<SUB>1166</SUB>> ]
-"3611" [label = <(RETURN,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetC();,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetC();)<SUB>1167</SUB>> ]
-"3612" [label = <(GetC,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetC())<SUB>1167</SUB>> ]
-"3613" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetC)<SUB>1167</SUB>> ]
-"3576" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1164</SUB>> ]
-"3594" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1165</SUB>> ]
-"3614" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>1167</SUB>> ]
-"3619" [label = <(FIELD_IDENTIFIER,GetC,GetC)<SUB>1167</SUB>> ]
-"3577" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1164</SUB>> ]
-"3581" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1164</SUB>> ]
-"3588" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1164</SUB>> ]
-"3595" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1165</SUB>> ]
-"3599" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1165</SUB>> ]
-"3606" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1165</SUB>> ]
-"3582" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1164</SUB>> ]
-"3600" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1165</SUB>> ]
-"3583" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1164</SUB>> ]
-"3585" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1164</SUB>> ]
-"3601" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1165</SUB>> ]
-"3603" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1165</SUB>> ]
-"3566" [label = <(METHOD,CallCharMethodV)<SUB>1163</SUB>> ]
-"3620" [label = <(METHOD_RETURN,jchar)<SUB>1163</SUB>> ]
-  "3572" -> "3577" 
-  "3572" -> "3590" 
-  "3590" -> "3595" 
-  "3590" -> "3609" 
-  "3609" -> "3614" 
-  "3611" -> "3620" 
-  "3612" -> "3611" 
-  "3613" -> "3612" 
-  "3576" -> "3583" 
-  "3576" -> "3590" 
-  "3594" -> "3601" 
-  "3594" -> "3609" 
-  "3614" -> "3619" 
-  "3619" -> "3613" 
-  "3577" -> "3576" 
-  "3581" -> "3588" 
-  "3588" -> "3620" 
-  "3595" -> "3594" 
-  "3599" -> "3606" 
-  "3606" -> "3620" 
-  "3582" -> "3581" 
-  "3600" -> "3599" 
-  "3583" -> "3585" 
-  "3585" -> "3582" 
-  "3601" -> "3603" 
-  "3603" -> "3600" 
-  "3566" -> "3572" 
+digraph "CallDoubleMethodA" {  
+"3613" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1118</SUB>> ]
+"3631" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1119</SUB>> ]
+"3650" [label = <(soa,soa(env))<SUB>1120</SUB>> ]
+"3652" [label = <(RETURN,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetD();,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetD();)<SUB>1121</SUB>> ]
+"3653" [label = <(GetD,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetD())<SUB>1121</SUB>> ]
+"3654" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetD)<SUB>1121</SUB>> ]
+"3617" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1118</SUB>> ]
+"3635" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1119</SUB>> ]
+"3655" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>1121</SUB>> ]
+"3660" [label = <(FIELD_IDENTIFIER,GetD,GetD)<SUB>1121</SUB>> ]
+"3618" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1118</SUB>> ]
+"3622" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1118</SUB>> ]
+"3629" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1118</SUB>> ]
+"3636" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1119</SUB>> ]
+"3640" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1119</SUB>> ]
+"3647" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1119</SUB>> ]
+"3623" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1118</SUB>> ]
+"3641" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1119</SUB>> ]
+"3624" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1118</SUB>> ]
+"3626" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1118</SUB>> ]
+"3642" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1119</SUB>> ]
+"3644" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1119</SUB>> ]
+"3607" [label = <(METHOD,CallDoubleMethodA)<SUB>1117</SUB>> ]
+"3661" [label = <(METHOD_RETURN,jdouble)<SUB>1117</SUB>> ]
+  "3613" -> "3618" 
+  "3613" -> "3631" 
+  "3631" -> "3636" 
+  "3631" -> "3650" 
+  "3650" -> "3655" 
+  "3652" -> "3661" 
+  "3653" -> "3652" 
+  "3654" -> "3653" 
+  "3617" -> "3624" 
+  "3617" -> "3631" 
+  "3635" -> "3642" 
+  "3635" -> "3650" 
+  "3655" -> "3660" 
+  "3660" -> "3654" 
+  "3618" -> "3617" 
+  "3622" -> "3629" 
+  "3629" -> "3661" 
+  "3636" -> "3635" 
+  "3640" -> "3647" 
+  "3647" -> "3661" 
+  "3623" -> "3622" 
+  "3641" -> "3640" 
+  "3624" -> "3626" 
+  "3626" -> "3623" 
+  "3642" -> "3644" 
+  "3644" -> "3641" 
+  "3607" -> "3613" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/83-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/83-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/83-cfg.dot	2023-06-07 19:35:28.267384345 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/83-cfg.dot	2023-06-07 19:35:34.797383774 +0330
@@ -1,53 +1,61 @@
-digraph "CallCharMethodA" {  
-"3628" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1171</SUB>> ]
-"3646" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1172</SUB>> ]
-"3665" [label = <(soa,soa(env))<SUB>1173</SUB>> ]
-"3667" [label = <(RETURN,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetC();,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetC();)<SUB>1174</SUB>> ]
-"3668" [label = <(GetC,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetC())<SUB>1174</SUB>> ]
-"3669" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetC)<SUB>1174</SUB>> ]
-"3632" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1171</SUB>> ]
-"3650" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1172</SUB>> ]
-"3670" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>1174</SUB>> ]
-"3675" [label = <(FIELD_IDENTIFIER,GetC,GetC)<SUB>1174</SUB>> ]
-"3633" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1171</SUB>> ]
-"3637" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1171</SUB>> ]
-"3644" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1171</SUB>> ]
-"3651" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1172</SUB>> ]
-"3655" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1172</SUB>> ]
-"3662" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1172</SUB>> ]
-"3638" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1171</SUB>> ]
-"3656" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1172</SUB>> ]
-"3639" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1171</SUB>> ]
-"3641" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1171</SUB>> ]
-"3657" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1172</SUB>> ]
-"3659" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1172</SUB>> ]
-"3622" [label = <(METHOD,CallCharMethodA)<SUB>1170</SUB>> ]
-"3676" [label = <(METHOD_RETURN,jchar)<SUB>1170</SUB>> ]
-  "3628" -> "3633" 
-  "3628" -> "3646" 
-  "3646" -> "3651" 
-  "3646" -> "3665" 
-  "3665" -> "3670" 
-  "3667" -> "3676" 
-  "3668" -> "3667" 
-  "3669" -> "3668" 
-  "3632" -> "3639" 
-  "3632" -> "3646" 
-  "3650" -> "3657" 
-  "3650" -> "3665" 
-  "3670" -> "3675" 
-  "3675" -> "3669" 
-  "3633" -> "3632" 
-  "3637" -> "3644" 
-  "3644" -> "3676" 
-  "3651" -> "3650" 
-  "3655" -> "3662" 
-  "3662" -> "3676" 
-  "3638" -> "3637" 
-  "3656" -> "3655" 
-  "3639" -> "3641" 
-  "3641" -> "3638" 
-  "3657" -> "3659" 
-  "3659" -> "3656" 
-  "3622" -> "3628" 
+digraph "CallFloatMethod" {  
+"3669" [label = <(va_start,va_start(ap, mid))<SUB>1126</SUB>> ]
+"3673" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1127</SUB>> ]
+"3676" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1128</SUB>> ]
+"3694" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1129</SUB>> ]
+"3713" [label = <(soa,soa(env))<SUB>1130</SUB>> ]
+"3716" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap)))<SUB>1131</SUB>> ]
+"3722" [label = <(RETURN,return result.GetF();,return result.GetF();)<SUB>1132</SUB>> ]
+"3674" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1127</SUB>> ]
+"3717" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>1131</SUB>> ]
+"3723" [label = <(GetF,result.GetF())<SUB>1132</SUB>> ]
+"3724" [label = <(&lt;operator&gt;.fieldAccess,result.GetF)<SUB>1132</SUB>> ]
+"3680" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1128</SUB>> ]
+"3698" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1129</SUB>> ]
+"3726" [label = <(FIELD_IDENTIFIER,GetF,GetF)<SUB>1132</SUB>> ]
+"3681" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1128</SUB>> ]
+"3685" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1128</SUB>> ]
+"3692" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1128</SUB>> ]
+"3699" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1129</SUB>> ]
+"3703" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1129</SUB>> ]
+"3710" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1129</SUB>> ]
+"3686" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1128</SUB>> ]
+"3704" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1129</SUB>> ]
+"3687" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1128</SUB>> ]
+"3689" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1128</SUB>> ]
+"3705" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1129</SUB>> ]
+"3707" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1129</SUB>> ]
+"3663" [label = <(METHOD,CallFloatMethod)<SUB>1124</SUB>> ]
+"3727" [label = <(METHOD_RETURN,jfloat)<SUB>1124</SUB>> ]
+  "3669" -> "3674" 
+  "3673" -> "3676" 
+  "3676" -> "3681" 
+  "3676" -> "3694" 
+  "3694" -> "3699" 
+  "3694" -> "3713" 
+  "3713" -> "3717" 
+  "3716" -> "3726" 
+  "3722" -> "3727" 
+  "3674" -> "3673" 
+  "3717" -> "3716" 
+  "3723" -> "3722" 
+  "3724" -> "3723" 
+  "3680" -> "3687" 
+  "3680" -> "3694" 
+  "3698" -> "3705" 
+  "3698" -> "3713" 
+  "3726" -> "3724" 
+  "3681" -> "3680" 
+  "3685" -> "3692" 
+  "3692" -> "3727" 
+  "3699" -> "3698" 
+  "3703" -> "3710" 
+  "3710" -> "3727" 
+  "3686" -> "3685" 
+  "3704" -> "3703" 
+  "3687" -> "3689" 
+  "3689" -> "3686" 
+  "3705" -> "3707" 
+  "3707" -> "3704" 
+  "3663" -> "3669" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/84-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/84-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/84-cfg.dot	2023-06-07 19:35:28.267384345 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/84-cfg.dot	2023-06-07 19:35:34.797383774 +0330
@@ -1,61 +1,53 @@
-digraph "CallDoubleMethod" {  
-"3684" [label = <(va_start,va_start(ap, mid))<SUB>1179</SUB>> ]
-"3688" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1180</SUB>> ]
-"3691" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1181</SUB>> ]
-"3709" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1182</SUB>> ]
-"3728" [label = <(soa,soa(env))<SUB>1183</SUB>> ]
-"3731" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap)))<SUB>1184</SUB>> ]
-"3737" [label = <(RETURN,return result.GetD();,return result.GetD();)<SUB>1185</SUB>> ]
-"3689" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1180</SUB>> ]
-"3732" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>1184</SUB>> ]
-"3738" [label = <(GetD,result.GetD())<SUB>1185</SUB>> ]
-"3739" [label = <(&lt;operator&gt;.fieldAccess,result.GetD)<SUB>1185</SUB>> ]
-"3695" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1181</SUB>> ]
-"3713" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1182</SUB>> ]
-"3741" [label = <(FIELD_IDENTIFIER,GetD,GetD)<SUB>1185</SUB>> ]
-"3696" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1181</SUB>> ]
-"3700" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1181</SUB>> ]
-"3707" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1181</SUB>> ]
-"3714" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1182</SUB>> ]
-"3718" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1182</SUB>> ]
-"3725" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1182</SUB>> ]
-"3701" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1181</SUB>> ]
-"3719" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1182</SUB>> ]
-"3702" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1181</SUB>> ]
-"3704" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1181</SUB>> ]
-"3720" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1182</SUB>> ]
-"3722" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1182</SUB>> ]
-"3678" [label = <(METHOD,CallDoubleMethod)<SUB>1177</SUB>> ]
-"3742" [label = <(METHOD_RETURN,jdouble)<SUB>1177</SUB>> ]
-  "3684" -> "3689" 
-  "3688" -> "3691" 
-  "3691" -> "3696" 
-  "3691" -> "3709" 
-  "3709" -> "3714" 
-  "3709" -> "3728" 
-  "3728" -> "3732" 
-  "3731" -> "3741" 
-  "3737" -> "3742" 
-  "3689" -> "3688" 
-  "3732" -> "3731" 
-  "3738" -> "3737" 
-  "3739" -> "3738" 
-  "3695" -> "3702" 
-  "3695" -> "3709" 
-  "3713" -> "3720" 
-  "3713" -> "3728" 
-  "3741" -> "3739" 
-  "3696" -> "3695" 
-  "3700" -> "3707" 
-  "3707" -> "3742" 
-  "3714" -> "3713" 
-  "3718" -> "3725" 
-  "3725" -> "3742" 
-  "3701" -> "3700" 
-  "3719" -> "3718" 
-  "3702" -> "3704" 
-  "3704" -> "3701" 
-  "3720" -> "3722" 
-  "3722" -> "3719" 
-  "3678" -> "3684" 
+digraph "CallFloatMethodV" {  
+"3735" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1136</SUB>> ]
+"3753" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1137</SUB>> ]
+"3772" [label = <(soa,soa(env))<SUB>1138</SUB>> ]
+"3774" [label = <(RETURN,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetF();,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetF();)<SUB>1139</SUB>> ]
+"3775" [label = <(GetF,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetF())<SUB>1139</SUB>> ]
+"3776" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetF)<SUB>1139</SUB>> ]
+"3739" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1136</SUB>> ]
+"3757" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1137</SUB>> ]
+"3777" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>1139</SUB>> ]
+"3782" [label = <(FIELD_IDENTIFIER,GetF,GetF)<SUB>1139</SUB>> ]
+"3740" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1136</SUB>> ]
+"3744" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1136</SUB>> ]
+"3751" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1136</SUB>> ]
+"3758" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1137</SUB>> ]
+"3762" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1137</SUB>> ]
+"3769" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1137</SUB>> ]
+"3745" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1136</SUB>> ]
+"3763" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1137</SUB>> ]
+"3746" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1136</SUB>> ]
+"3748" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1136</SUB>> ]
+"3764" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1137</SUB>> ]
+"3766" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1137</SUB>> ]
+"3729" [label = <(METHOD,CallFloatMethodV)<SUB>1135</SUB>> ]
+"3783" [label = <(METHOD_RETURN,jfloat)<SUB>1135</SUB>> ]
+  "3735" -> "3740" 
+  "3735" -> "3753" 
+  "3753" -> "3758" 
+  "3753" -> "3772" 
+  "3772" -> "3777" 
+  "3774" -> "3783" 
+  "3775" -> "3774" 
+  "3776" -> "3775" 
+  "3739" -> "3746" 
+  "3739" -> "3753" 
+  "3757" -> "3764" 
+  "3757" -> "3772" 
+  "3777" -> "3782" 
+  "3782" -> "3776" 
+  "3740" -> "3739" 
+  "3744" -> "3751" 
+  "3751" -> "3783" 
+  "3758" -> "3757" 
+  "3762" -> "3769" 
+  "3769" -> "3783" 
+  "3745" -> "3744" 
+  "3763" -> "3762" 
+  "3746" -> "3748" 
+  "3748" -> "3745" 
+  "3764" -> "3766" 
+  "3766" -> "3763" 
+  "3729" -> "3735" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/85-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/85-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/85-cfg.dot	2023-06-07 19:35:28.267384345 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/85-cfg.dot	2023-06-07 19:35:34.797383774 +0330
@@ -1,53 +1,53 @@
-digraph "CallDoubleMethodV" {  
-"3750" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1189</SUB>> ]
-"3768" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1190</SUB>> ]
-"3787" [label = <(soa,soa(env))<SUB>1191</SUB>> ]
-"3789" [label = <(RETURN,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetD();,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetD();)<SUB>1192</SUB>> ]
-"3790" [label = <(GetD,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetD())<SUB>1192</SUB>> ]
-"3791" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetD)<SUB>1192</SUB>> ]
-"3754" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1189</SUB>> ]
-"3772" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1190</SUB>> ]
-"3792" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>1192</SUB>> ]
-"3797" [label = <(FIELD_IDENTIFIER,GetD,GetD)<SUB>1192</SUB>> ]
-"3755" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1189</SUB>> ]
-"3759" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1189</SUB>> ]
-"3766" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1189</SUB>> ]
-"3773" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1190</SUB>> ]
-"3777" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1190</SUB>> ]
-"3784" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1190</SUB>> ]
-"3760" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1189</SUB>> ]
-"3778" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1190</SUB>> ]
-"3761" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1189</SUB>> ]
-"3763" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1189</SUB>> ]
-"3779" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1190</SUB>> ]
-"3781" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1190</SUB>> ]
-"3744" [label = <(METHOD,CallDoubleMethodV)<SUB>1188</SUB>> ]
-"3798" [label = <(METHOD_RETURN,jdouble)<SUB>1188</SUB>> ]
-  "3750" -> "3755" 
-  "3750" -> "3768" 
-  "3768" -> "3773" 
-  "3768" -> "3787" 
-  "3787" -> "3792" 
-  "3789" -> "3798" 
-  "3790" -> "3789" 
-  "3791" -> "3790" 
-  "3754" -> "3761" 
-  "3754" -> "3768" 
-  "3772" -> "3779" 
-  "3772" -> "3787" 
-  "3792" -> "3797" 
-  "3797" -> "3791" 
-  "3755" -> "3754" 
-  "3759" -> "3766" 
-  "3766" -> "3798" 
-  "3773" -> "3772" 
-  "3777" -> "3784" 
-  "3784" -> "3798" 
-  "3760" -> "3759" 
-  "3778" -> "3777" 
-  "3761" -> "3763" 
-  "3763" -> "3760" 
-  "3779" -> "3781" 
-  "3781" -> "3778" 
-  "3744" -> "3750" 
+digraph "CallFloatMethodA" {  
+"3791" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1143</SUB>> ]
+"3809" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1144</SUB>> ]
+"3828" [label = <(soa,soa(env))<SUB>1145</SUB>> ]
+"3830" [label = <(RETURN,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetF();,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetF();)<SUB>1146</SUB>> ]
+"3831" [label = <(GetF,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetF())<SUB>1146</SUB>> ]
+"3832" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetF)<SUB>1146</SUB>> ]
+"3795" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1143</SUB>> ]
+"3813" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1144</SUB>> ]
+"3833" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>1146</SUB>> ]
+"3838" [label = <(FIELD_IDENTIFIER,GetF,GetF)<SUB>1146</SUB>> ]
+"3796" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1143</SUB>> ]
+"3800" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1143</SUB>> ]
+"3807" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1143</SUB>> ]
+"3814" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1144</SUB>> ]
+"3818" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1144</SUB>> ]
+"3825" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1144</SUB>> ]
+"3801" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1143</SUB>> ]
+"3819" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1144</SUB>> ]
+"3802" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1143</SUB>> ]
+"3804" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1143</SUB>> ]
+"3820" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1144</SUB>> ]
+"3822" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1144</SUB>> ]
+"3785" [label = <(METHOD,CallFloatMethodA)<SUB>1142</SUB>> ]
+"3839" [label = <(METHOD_RETURN,jfloat)<SUB>1142</SUB>> ]
+  "3791" -> "3796" 
+  "3791" -> "3809" 
+  "3809" -> "3814" 
+  "3809" -> "3828" 
+  "3828" -> "3833" 
+  "3830" -> "3839" 
+  "3831" -> "3830" 
+  "3832" -> "3831" 
+  "3795" -> "3802" 
+  "3795" -> "3809" 
+  "3813" -> "3820" 
+  "3813" -> "3828" 
+  "3833" -> "3838" 
+  "3838" -> "3832" 
+  "3796" -> "3795" 
+  "3800" -> "3807" 
+  "3807" -> "3839" 
+  "3814" -> "3813" 
+  "3818" -> "3825" 
+  "3825" -> "3839" 
+  "3801" -> "3800" 
+  "3819" -> "3818" 
+  "3802" -> "3804" 
+  "3804" -> "3801" 
+  "3820" -> "3822" 
+  "3822" -> "3819" 
+  "3785" -> "3791" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/86-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/86-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/86-cfg.dot	2023-06-07 19:35:28.267384345 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/86-cfg.dot	2023-06-07 19:35:34.797383774 +0330
@@ -1,53 +1,61 @@
-digraph "CallDoubleMethodA" {  
-"3806" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1196</SUB>> ]
-"3824" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1197</SUB>> ]
-"3843" [label = <(soa,soa(env))<SUB>1198</SUB>> ]
-"3845" [label = <(RETURN,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetD();,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetD();)<SUB>1199</SUB>> ]
-"3846" [label = <(GetD,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetD())<SUB>1199</SUB>> ]
-"3847" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetD)<SUB>1199</SUB>> ]
-"3810" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1196</SUB>> ]
-"3828" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1197</SUB>> ]
-"3848" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>1199</SUB>> ]
-"3853" [label = <(FIELD_IDENTIFIER,GetD,GetD)<SUB>1199</SUB>> ]
-"3811" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1196</SUB>> ]
-"3815" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1196</SUB>> ]
-"3822" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1196</SUB>> ]
-"3829" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1197</SUB>> ]
-"3833" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1197</SUB>> ]
-"3840" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1197</SUB>> ]
-"3816" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1196</SUB>> ]
-"3834" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1197</SUB>> ]
-"3817" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1196</SUB>> ]
-"3819" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1196</SUB>> ]
-"3835" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1197</SUB>> ]
-"3837" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1197</SUB>> ]
-"3800" [label = <(METHOD,CallDoubleMethodA)<SUB>1195</SUB>> ]
-"3854" [label = <(METHOD_RETURN,jdouble)<SUB>1195</SUB>> ]
-  "3806" -> "3811" 
-  "3806" -> "3824" 
-  "3824" -> "3829" 
-  "3824" -> "3843" 
-  "3843" -> "3848" 
-  "3845" -> "3854" 
-  "3846" -> "3845" 
-  "3847" -> "3846" 
-  "3810" -> "3817" 
-  "3810" -> "3824" 
-  "3828" -> "3835" 
-  "3828" -> "3843" 
-  "3848" -> "3853" 
-  "3853" -> "3847" 
-  "3811" -> "3810" 
-  "3815" -> "3822" 
-  "3822" -> "3854" 
-  "3829" -> "3828" 
-  "3833" -> "3840" 
-  "3840" -> "3854" 
-  "3816" -> "3815" 
-  "3834" -> "3833" 
-  "3817" -> "3819" 
-  "3819" -> "3816" 
-  "3835" -> "3837" 
-  "3837" -> "3834" 
-  "3800" -> "3806" 
+digraph "CallIntMethod" {  
+"3847" [label = <(va_start,va_start(ap, mid))<SUB>1151</SUB>> ]
+"3851" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1152</SUB>> ]
+"3854" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1153</SUB>> ]
+"3872" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1154</SUB>> ]
+"3891" [label = <(soa,soa(env))<SUB>1155</SUB>> ]
+"3894" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap)))<SUB>1156</SUB>> ]
+"3900" [label = <(RETURN,return result.GetI();,return result.GetI();)<SUB>1157</SUB>> ]
+"3852" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1152</SUB>> ]
+"3895" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>1156</SUB>> ]
+"3901" [label = <(GetI,result.GetI())<SUB>1157</SUB>> ]
+"3902" [label = <(&lt;operator&gt;.fieldAccess,result.GetI)<SUB>1157</SUB>> ]
+"3858" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1153</SUB>> ]
+"3876" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1154</SUB>> ]
+"3904" [label = <(FIELD_IDENTIFIER,GetI,GetI)<SUB>1157</SUB>> ]
+"3859" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1153</SUB>> ]
+"3863" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1153</SUB>> ]
+"3870" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1153</SUB>> ]
+"3877" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1154</SUB>> ]
+"3881" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1154</SUB>> ]
+"3888" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1154</SUB>> ]
+"3864" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1153</SUB>> ]
+"3882" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1154</SUB>> ]
+"3865" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1153</SUB>> ]
+"3867" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1153</SUB>> ]
+"3883" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1154</SUB>> ]
+"3885" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1154</SUB>> ]
+"3841" [label = <(METHOD,CallIntMethod)<SUB>1149</SUB>> ]
+"3905" [label = <(METHOD_RETURN,jint)<SUB>1149</SUB>> ]
+  "3847" -> "3852" 
+  "3851" -> "3854" 
+  "3854" -> "3859" 
+  "3854" -> "3872" 
+  "3872" -> "3877" 
+  "3872" -> "3891" 
+  "3891" -> "3895" 
+  "3894" -> "3904" 
+  "3900" -> "3905" 
+  "3852" -> "3851" 
+  "3895" -> "3894" 
+  "3901" -> "3900" 
+  "3902" -> "3901" 
+  "3858" -> "3865" 
+  "3858" -> "3872" 
+  "3876" -> "3883" 
+  "3876" -> "3891" 
+  "3904" -> "3902" 
+  "3859" -> "3858" 
+  "3863" -> "3870" 
+  "3870" -> "3905" 
+  "3877" -> "3876" 
+  "3881" -> "3888" 
+  "3888" -> "3905" 
+  "3864" -> "3863" 
+  "3882" -> "3881" 
+  "3865" -> "3867" 
+  "3867" -> "3864" 
+  "3883" -> "3885" 
+  "3885" -> "3882" 
+  "3841" -> "3847" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/87-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/87-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/87-cfg.dot	2023-06-07 19:35:28.267384345 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/87-cfg.dot	2023-06-07 19:35:34.797383774 +0330
@@ -1,61 +1,53 @@
-digraph "CallFloatMethod" {  
-"3862" [label = <(va_start,va_start(ap, mid))<SUB>1204</SUB>> ]
-"3866" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1205</SUB>> ]
-"3869" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1206</SUB>> ]
-"3887" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1207</SUB>> ]
-"3906" [label = <(soa,soa(env))<SUB>1208</SUB>> ]
-"3909" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap)))<SUB>1209</SUB>> ]
-"3915" [label = <(RETURN,return result.GetF();,return result.GetF();)<SUB>1210</SUB>> ]
-"3867" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1205</SUB>> ]
-"3910" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>1209</SUB>> ]
-"3916" [label = <(GetF,result.GetF())<SUB>1210</SUB>> ]
-"3917" [label = <(&lt;operator&gt;.fieldAccess,result.GetF)<SUB>1210</SUB>> ]
-"3873" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1206</SUB>> ]
-"3891" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1207</SUB>> ]
-"3919" [label = <(FIELD_IDENTIFIER,GetF,GetF)<SUB>1210</SUB>> ]
-"3874" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1206</SUB>> ]
-"3878" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1206</SUB>> ]
-"3885" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1206</SUB>> ]
-"3892" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1207</SUB>> ]
-"3896" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1207</SUB>> ]
-"3903" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1207</SUB>> ]
-"3879" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1206</SUB>> ]
-"3897" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1207</SUB>> ]
-"3880" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1206</SUB>> ]
-"3882" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1206</SUB>> ]
-"3898" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1207</SUB>> ]
-"3900" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1207</SUB>> ]
-"3856" [label = <(METHOD,CallFloatMethod)<SUB>1202</SUB>> ]
-"3920" [label = <(METHOD_RETURN,jfloat)<SUB>1202</SUB>> ]
-  "3862" -> "3867" 
-  "3866" -> "3869" 
-  "3869" -> "3874" 
-  "3869" -> "3887" 
-  "3887" -> "3892" 
-  "3887" -> "3906" 
-  "3906" -> "3910" 
-  "3909" -> "3919" 
-  "3915" -> "3920" 
-  "3867" -> "3866" 
-  "3910" -> "3909" 
-  "3916" -> "3915" 
-  "3917" -> "3916" 
-  "3873" -> "3880" 
-  "3873" -> "3887" 
-  "3891" -> "3898" 
-  "3891" -> "3906" 
-  "3919" -> "3917" 
-  "3874" -> "3873" 
-  "3878" -> "3885" 
-  "3885" -> "3920" 
-  "3892" -> "3891" 
-  "3896" -> "3903" 
-  "3903" -> "3920" 
-  "3879" -> "3878" 
-  "3897" -> "3896" 
-  "3880" -> "3882" 
-  "3882" -> "3879" 
-  "3898" -> "3900" 
-  "3900" -> "3897" 
-  "3856" -> "3862" 
+digraph "CallIntMethodV" {  
+"3913" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1161</SUB>> ]
+"3931" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1162</SUB>> ]
+"3950" [label = <(soa,soa(env))<SUB>1163</SUB>> ]
+"3952" [label = <(RETURN,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetI();,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetI();)<SUB>1164</SUB>> ]
+"3953" [label = <(GetI,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetI())<SUB>1164</SUB>> ]
+"3954" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetI)<SUB>1164</SUB>> ]
+"3917" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1161</SUB>> ]
+"3935" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1162</SUB>> ]
+"3955" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>1164</SUB>> ]
+"3960" [label = <(FIELD_IDENTIFIER,GetI,GetI)<SUB>1164</SUB>> ]
+"3918" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1161</SUB>> ]
+"3922" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1161</SUB>> ]
+"3929" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1161</SUB>> ]
+"3936" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1162</SUB>> ]
+"3940" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1162</SUB>> ]
+"3947" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1162</SUB>> ]
+"3923" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1161</SUB>> ]
+"3941" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1162</SUB>> ]
+"3924" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1161</SUB>> ]
+"3926" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1161</SUB>> ]
+"3942" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1162</SUB>> ]
+"3944" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1162</SUB>> ]
+"3907" [label = <(METHOD,CallIntMethodV)<SUB>1160</SUB>> ]
+"3961" [label = <(METHOD_RETURN,jint)<SUB>1160</SUB>> ]
+  "3913" -> "3918" 
+  "3913" -> "3931" 
+  "3931" -> "3936" 
+  "3931" -> "3950" 
+  "3950" -> "3955" 
+  "3952" -> "3961" 
+  "3953" -> "3952" 
+  "3954" -> "3953" 
+  "3917" -> "3924" 
+  "3917" -> "3931" 
+  "3935" -> "3942" 
+  "3935" -> "3950" 
+  "3955" -> "3960" 
+  "3960" -> "3954" 
+  "3918" -> "3917" 
+  "3922" -> "3929" 
+  "3929" -> "3961" 
+  "3936" -> "3935" 
+  "3940" -> "3947" 
+  "3947" -> "3961" 
+  "3923" -> "3922" 
+  "3941" -> "3940" 
+  "3924" -> "3926" 
+  "3926" -> "3923" 
+  "3942" -> "3944" 
+  "3944" -> "3941" 
+  "3907" -> "3913" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/88-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/88-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/88-cfg.dot	2023-06-07 19:35:28.267384345 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/88-cfg.dot	2023-06-07 19:35:34.797383774 +0330
@@ -1,53 +1,53 @@
-digraph "CallFloatMethodV" {  
-"3928" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1214</SUB>> ]
-"3946" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1215</SUB>> ]
-"3965" [label = <(soa,soa(env))<SUB>1216</SUB>> ]
-"3967" [label = <(RETURN,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetF();,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetF();)<SUB>1217</SUB>> ]
-"3968" [label = <(GetF,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetF())<SUB>1217</SUB>> ]
-"3969" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetF)<SUB>1217</SUB>> ]
-"3932" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1214</SUB>> ]
-"3950" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1215</SUB>> ]
-"3970" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>1217</SUB>> ]
-"3975" [label = <(FIELD_IDENTIFIER,GetF,GetF)<SUB>1217</SUB>> ]
-"3933" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1214</SUB>> ]
-"3937" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1214</SUB>> ]
-"3944" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1214</SUB>> ]
-"3951" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1215</SUB>> ]
-"3955" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1215</SUB>> ]
-"3962" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1215</SUB>> ]
-"3938" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1214</SUB>> ]
-"3956" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1215</SUB>> ]
-"3939" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1214</SUB>> ]
-"3941" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1214</SUB>> ]
-"3957" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1215</SUB>> ]
-"3959" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1215</SUB>> ]
-"3922" [label = <(METHOD,CallFloatMethodV)<SUB>1213</SUB>> ]
-"3976" [label = <(METHOD_RETURN,jfloat)<SUB>1213</SUB>> ]
-  "3928" -> "3933" 
-  "3928" -> "3946" 
-  "3946" -> "3951" 
-  "3946" -> "3965" 
-  "3965" -> "3970" 
-  "3967" -> "3976" 
-  "3968" -> "3967" 
-  "3969" -> "3968" 
-  "3932" -> "3939" 
-  "3932" -> "3946" 
-  "3950" -> "3957" 
-  "3950" -> "3965" 
-  "3970" -> "3975" 
-  "3975" -> "3969" 
-  "3933" -> "3932" 
-  "3937" -> "3944" 
-  "3944" -> "3976" 
-  "3951" -> "3950" 
-  "3955" -> "3962" 
-  "3962" -> "3976" 
-  "3938" -> "3937" 
-  "3956" -> "3955" 
-  "3939" -> "3941" 
-  "3941" -> "3938" 
-  "3957" -> "3959" 
-  "3959" -> "3956" 
-  "3922" -> "3928" 
+digraph "CallIntMethodA" {  
+"3969" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1168</SUB>> ]
+"3987" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1169</SUB>> ]
+"4006" [label = <(soa,soa(env))<SUB>1170</SUB>> ]
+"4008" [label = <(RETURN,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetI();,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetI();)<SUB>1171</SUB>> ]
+"4009" [label = <(GetI,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetI())<SUB>1171</SUB>> ]
+"4010" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetI)<SUB>1171</SUB>> ]
+"3973" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1168</SUB>> ]
+"3991" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1169</SUB>> ]
+"4011" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>1171</SUB>> ]
+"4016" [label = <(FIELD_IDENTIFIER,GetI,GetI)<SUB>1171</SUB>> ]
+"3974" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1168</SUB>> ]
+"3978" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1168</SUB>> ]
+"3985" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1168</SUB>> ]
+"3992" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1169</SUB>> ]
+"3996" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1169</SUB>> ]
+"4003" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1169</SUB>> ]
+"3979" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1168</SUB>> ]
+"3997" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1169</SUB>> ]
+"3980" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1168</SUB>> ]
+"3982" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1168</SUB>> ]
+"3998" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1169</SUB>> ]
+"4000" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1169</SUB>> ]
+"3963" [label = <(METHOD,CallIntMethodA)<SUB>1167</SUB>> ]
+"4017" [label = <(METHOD_RETURN,jint)<SUB>1167</SUB>> ]
+  "3969" -> "3974" 
+  "3969" -> "3987" 
+  "3987" -> "3992" 
+  "3987" -> "4006" 
+  "4006" -> "4011" 
+  "4008" -> "4017" 
+  "4009" -> "4008" 
+  "4010" -> "4009" 
+  "3973" -> "3980" 
+  "3973" -> "3987" 
+  "3991" -> "3998" 
+  "3991" -> "4006" 
+  "4011" -> "4016" 
+  "4016" -> "4010" 
+  "3974" -> "3973" 
+  "3978" -> "3985" 
+  "3985" -> "4017" 
+  "3992" -> "3991" 
+  "3996" -> "4003" 
+  "4003" -> "4017" 
+  "3979" -> "3978" 
+  "3997" -> "3996" 
+  "3980" -> "3982" 
+  "3982" -> "3979" 
+  "3998" -> "4000" 
+  "4000" -> "3997" 
+  "3963" -> "3969" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/89-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/89-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/89-cfg.dot	2023-06-07 19:35:28.267384345 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/89-cfg.dot	2023-06-07 19:35:34.797383774 +0330
@@ -1,53 +1,61 @@
-digraph "CallFloatMethodA" {  
-"3984" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1221</SUB>> ]
-"4002" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1222</SUB>> ]
-"4021" [label = <(soa,soa(env))<SUB>1223</SUB>> ]
-"4023" [label = <(RETURN,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetF();,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetF();)<SUB>1224</SUB>> ]
-"4024" [label = <(GetF,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetF())<SUB>1224</SUB>> ]
-"4025" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetF)<SUB>1224</SUB>> ]
-"3988" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1221</SUB>> ]
-"4006" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1222</SUB>> ]
-"4026" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>1224</SUB>> ]
-"4031" [label = <(FIELD_IDENTIFIER,GetF,GetF)<SUB>1224</SUB>> ]
-"3989" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1221</SUB>> ]
-"3993" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1221</SUB>> ]
-"4000" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1221</SUB>> ]
-"4007" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1222</SUB>> ]
-"4011" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1222</SUB>> ]
-"4018" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1222</SUB>> ]
-"3994" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1221</SUB>> ]
-"4012" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1222</SUB>> ]
-"3995" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1221</SUB>> ]
-"3997" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1221</SUB>> ]
-"4013" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1222</SUB>> ]
-"4015" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1222</SUB>> ]
-"3978" [label = <(METHOD,CallFloatMethodA)<SUB>1220</SUB>> ]
-"4032" [label = <(METHOD_RETURN,jfloat)<SUB>1220</SUB>> ]
-  "3984" -> "3989" 
-  "3984" -> "4002" 
-  "4002" -> "4007" 
-  "4002" -> "4021" 
-  "4021" -> "4026" 
-  "4023" -> "4032" 
-  "4024" -> "4023" 
-  "4025" -> "4024" 
-  "3988" -> "3995" 
-  "3988" -> "4002" 
-  "4006" -> "4013" 
-  "4006" -> "4021" 
-  "4026" -> "4031" 
-  "4031" -> "4025" 
-  "3989" -> "3988" 
-  "3993" -> "4000" 
-  "4000" -> "4032" 
-  "4007" -> "4006" 
-  "4011" -> "4018" 
-  "4018" -> "4032" 
-  "3994" -> "3993" 
-  "4012" -> "4011" 
-  "3995" -> "3997" 
-  "3997" -> "3994" 
-  "4013" -> "4015" 
-  "4015" -> "4012" 
-  "3978" -> "3984" 
+digraph "CallLongMethod" {  
+"4025" [label = <(va_start,va_start(ap, mid))<SUB>1176</SUB>> ]
+"4029" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1177</SUB>> ]
+"4032" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1178</SUB>> ]
+"4050" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1179</SUB>> ]
+"4069" [label = <(soa,soa(env))<SUB>1180</SUB>> ]
+"4072" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap)))<SUB>1181</SUB>> ]
+"4078" [label = <(RETURN,return result.GetJ();,return result.GetJ();)<SUB>1182</SUB>> ]
+"4030" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1177</SUB>> ]
+"4073" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>1181</SUB>> ]
+"4079" [label = <(GetJ,result.GetJ())<SUB>1182</SUB>> ]
+"4080" [label = <(&lt;operator&gt;.fieldAccess,result.GetJ)<SUB>1182</SUB>> ]
+"4036" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1178</SUB>> ]
+"4054" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1179</SUB>> ]
+"4082" [label = <(FIELD_IDENTIFIER,GetJ,GetJ)<SUB>1182</SUB>> ]
+"4037" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1178</SUB>> ]
+"4041" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1178</SUB>> ]
+"4048" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1178</SUB>> ]
+"4055" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1179</SUB>> ]
+"4059" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1179</SUB>> ]
+"4066" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1179</SUB>> ]
+"4042" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1178</SUB>> ]
+"4060" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1179</SUB>> ]
+"4043" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1178</SUB>> ]
+"4045" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1178</SUB>> ]
+"4061" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1179</SUB>> ]
+"4063" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1179</SUB>> ]
+"4019" [label = <(METHOD,CallLongMethod)<SUB>1174</SUB>> ]
+"4083" [label = <(METHOD_RETURN,jlong)<SUB>1174</SUB>> ]
+  "4025" -> "4030" 
+  "4029" -> "4032" 
+  "4032" -> "4037" 
+  "4032" -> "4050" 
+  "4050" -> "4055" 
+  "4050" -> "4069" 
+  "4069" -> "4073" 
+  "4072" -> "4082" 
+  "4078" -> "4083" 
+  "4030" -> "4029" 
+  "4073" -> "4072" 
+  "4079" -> "4078" 
+  "4080" -> "4079" 
+  "4036" -> "4043" 
+  "4036" -> "4050" 
+  "4054" -> "4061" 
+  "4054" -> "4069" 
+  "4082" -> "4080" 
+  "4037" -> "4036" 
+  "4041" -> "4048" 
+  "4048" -> "4083" 
+  "4055" -> "4054" 
+  "4059" -> "4066" 
+  "4066" -> "4083" 
+  "4042" -> "4041" 
+  "4060" -> "4059" 
+  "4043" -> "4045" 
+  "4045" -> "4042" 
+  "4061" -> "4063" 
+  "4063" -> "4060" 
+  "4019" -> "4025" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/9-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/9-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/9-cfg.dot	2023-06-07 19:35:28.217384348 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/9-cfg.dot	2023-06-07 19:35:34.737383779 +0330
@@ -1,29 +1,24 @@
-digraph "GetReturnAddress" {  
-"234" [label = <(DCHECK_LT,DCHECK_LT(depth, kMaxReturnAddressDepth))<SUB>167</SUB>> ]
-"242" [label = <(RETURN,return __builtin_return_address(0);,return __builtin_return_address(0);)<SUB>169</SUB>> ]
-"247" [label = <(RETURN,return __builtin_return_address(1);,return __builtin_return_address(1);)<SUB>170</SUB>> ]
-"252" [label = <(RETURN,return __builtin_return_address(2);,return __builtin_return_address(2);)<SUB>171</SUB>> ]
-"257" [label = <(RETURN,return __builtin_return_address(3);,return __builtin_return_address(3);)<SUB>172</SUB>> ]
-"261" [label = <(RETURN,return nullptr;,return nullptr;)<SUB>174</SUB>> ]
-"243" [label = <(__builtin_return_address,__builtin_return_address(0))<SUB>169</SUB>> ]
-"248" [label = <(__builtin_return_address,__builtin_return_address(1))<SUB>170</SUB>> ]
-"253" [label = <(__builtin_return_address,__builtin_return_address(2))<SUB>171</SUB>> ]
-"258" [label = <(__builtin_return_address,__builtin_return_address(3))<SUB>172</SUB>> ]
-"231" [label = <(METHOD,GetReturnAddress)<SUB>166</SUB>> ]
-"263" [label = <(METHOD_RETURN,void*)<SUB>166</SUB>> ]
-  "234" -> "243" 
-  "234" -> "248" 
-  "234" -> "253" 
-  "234" -> "258" 
-  "234" -> "261" 
-  "242" -> "263" 
-  "247" -> "263" 
-  "252" -> "263" 
-  "257" -> "263" 
-  "261" -> "263" 
-  "243" -> "242" 
-  "248" -> "247" 
-  "253" -> "252" 
-  "258" -> "257" 
-  "231" -> "234" 
+digraph "GetSharedObjectKind" {  
+"134" [label = <(&lt;operator&gt;.assignment,address = reinterpret_cast&lt;uintptr_t&gt;(pc))<SUB>129</SUB>> ]
+"148" [label = <(RETURN,return SharedObjectKind::kOther;,return SharedObjectKind::kOther;)<SUB>134</SUB>> ]
+"136" [label = <(&lt;operator&gt;.cast,reinterpret_cast&lt;uintptr_t&gt;(pc))<SUB>129</SUB>> ]
+"141" [label = <(Find,Find(address, &amp;kind))<SUB>131</SUB>> ]
+"149" [label = <(&lt;operator&gt;.fieldAccess,SharedObjectKind::kOther)<SUB>134</SUB>> ]
+"137" [label = <(UNKNOWN,uintptr_t,uintptr_t)<SUB>129</SUB>> ]
+"143" [label = <(&lt;operator&gt;.addressOf,&amp;kind)<SUB>131</SUB>> ]
+"146" [label = <(RETURN,return kind;,return kind;)<SUB>132</SUB>> ]
+"151" [label = <(FIELD_IDENTIFIER,kOther,kOther)<SUB>134</SUB>> ]
+"130" [label = <(METHOD,GetSharedObjectKind)<SUB>128</SUB>> ]
+"152" [label = <(METHOD_RETURN,SharedObjectKind)<SUB>128</SUB>> ]
+  "134" -> "143" 
+  "148" -> "152" 
+  "136" -> "134" 
+  "141" -> "146" 
+  "141" -> "151" 
+  "149" -> "148" 
+  "137" -> "136" 
+  "143" -> "141" 
+  "146" -> "152" 
+  "151" -> "149" 
+  "130" -> "137" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/90-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/90-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/90-cfg.dot	2023-06-07 19:35:28.267384345 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/90-cfg.dot	2023-06-07 19:35:34.797383774 +0330
@@ -1,61 +1,53 @@
-digraph "CallIntMethod" {  
-"4040" [label = <(va_start,va_start(ap, mid))<SUB>1229</SUB>> ]
-"4044" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1230</SUB>> ]
-"4047" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1231</SUB>> ]
-"4065" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1232</SUB>> ]
-"4084" [label = <(soa,soa(env))<SUB>1233</SUB>> ]
-"4087" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap)))<SUB>1234</SUB>> ]
-"4093" [label = <(RETURN,return result.GetI();,return result.GetI();)<SUB>1235</SUB>> ]
-"4045" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1230</SUB>> ]
-"4088" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>1234</SUB>> ]
-"4094" [label = <(GetI,result.GetI())<SUB>1235</SUB>> ]
-"4095" [label = <(&lt;operator&gt;.fieldAccess,result.GetI)<SUB>1235</SUB>> ]
-"4051" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1231</SUB>> ]
-"4069" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1232</SUB>> ]
-"4097" [label = <(FIELD_IDENTIFIER,GetI,GetI)<SUB>1235</SUB>> ]
-"4052" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1231</SUB>> ]
-"4056" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1231</SUB>> ]
-"4063" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1231</SUB>> ]
-"4070" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1232</SUB>> ]
-"4074" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1232</SUB>> ]
-"4081" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1232</SUB>> ]
-"4057" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1231</SUB>> ]
-"4075" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1232</SUB>> ]
-"4058" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1231</SUB>> ]
-"4060" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1231</SUB>> ]
-"4076" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1232</SUB>> ]
-"4078" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1232</SUB>> ]
-"4034" [label = <(METHOD,CallIntMethod)<SUB>1227</SUB>> ]
-"4098" [label = <(METHOD_RETURN,jint)<SUB>1227</SUB>> ]
-  "4040" -> "4045" 
-  "4044" -> "4047" 
-  "4047" -> "4052" 
-  "4047" -> "4065" 
-  "4065" -> "4070" 
-  "4065" -> "4084" 
-  "4084" -> "4088" 
-  "4087" -> "4097" 
-  "4093" -> "4098" 
-  "4045" -> "4044" 
-  "4088" -> "4087" 
-  "4094" -> "4093" 
-  "4095" -> "4094" 
-  "4051" -> "4058" 
-  "4051" -> "4065" 
-  "4069" -> "4076" 
-  "4069" -> "4084" 
-  "4097" -> "4095" 
-  "4052" -> "4051" 
-  "4056" -> "4063" 
-  "4063" -> "4098" 
-  "4070" -> "4069" 
-  "4074" -> "4081" 
-  "4081" -> "4098" 
-  "4057" -> "4056" 
-  "4075" -> "4074" 
-  "4058" -> "4060" 
-  "4060" -> "4057" 
-  "4076" -> "4078" 
-  "4078" -> "4075" 
-  "4034" -> "4040" 
+digraph "CallLongMethodV" {  
+"4091" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1186</SUB>> ]
+"4109" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1187</SUB>> ]
+"4128" [label = <(soa,soa(env))<SUB>1188</SUB>> ]
+"4130" [label = <(RETURN,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetJ();,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetJ();)<SUB>1189</SUB>> ]
+"4131" [label = <(GetJ,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetJ())<SUB>1189</SUB>> ]
+"4132" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetJ)<SUB>1189</SUB>> ]
+"4095" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1186</SUB>> ]
+"4113" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1187</SUB>> ]
+"4133" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>1189</SUB>> ]
+"4138" [label = <(FIELD_IDENTIFIER,GetJ,GetJ)<SUB>1189</SUB>> ]
+"4096" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1186</SUB>> ]
+"4100" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1186</SUB>> ]
+"4107" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1186</SUB>> ]
+"4114" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1187</SUB>> ]
+"4118" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1187</SUB>> ]
+"4125" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1187</SUB>> ]
+"4101" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1186</SUB>> ]
+"4119" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1187</SUB>> ]
+"4102" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1186</SUB>> ]
+"4104" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1186</SUB>> ]
+"4120" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1187</SUB>> ]
+"4122" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1187</SUB>> ]
+"4085" [label = <(METHOD,CallLongMethodV)<SUB>1185</SUB>> ]
+"4139" [label = <(METHOD_RETURN,jlong)<SUB>1185</SUB>> ]
+  "4091" -> "4096" 
+  "4091" -> "4109" 
+  "4109" -> "4114" 
+  "4109" -> "4128" 
+  "4128" -> "4133" 
+  "4130" -> "4139" 
+  "4131" -> "4130" 
+  "4132" -> "4131" 
+  "4095" -> "4102" 
+  "4095" -> "4109" 
+  "4113" -> "4120" 
+  "4113" -> "4128" 
+  "4133" -> "4138" 
+  "4138" -> "4132" 
+  "4096" -> "4095" 
+  "4100" -> "4107" 
+  "4107" -> "4139" 
+  "4114" -> "4113" 
+  "4118" -> "4125" 
+  "4125" -> "4139" 
+  "4101" -> "4100" 
+  "4119" -> "4118" 
+  "4102" -> "4104" 
+  "4104" -> "4101" 
+  "4120" -> "4122" 
+  "4122" -> "4119" 
+  "4085" -> "4091" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/91-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/91-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/91-cfg.dot	2023-06-07 19:35:28.267384345 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/91-cfg.dot	2023-06-07 19:35:34.797383774 +0330
@@ -1,53 +1,53 @@
-digraph "CallIntMethodV" {  
-"4106" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1239</SUB>> ]
-"4124" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1240</SUB>> ]
-"4143" [label = <(soa,soa(env))<SUB>1241</SUB>> ]
-"4145" [label = <(RETURN,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetI();,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetI();)<SUB>1242</SUB>> ]
-"4146" [label = <(GetI,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetI())<SUB>1242</SUB>> ]
-"4147" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetI)<SUB>1242</SUB>> ]
-"4110" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1239</SUB>> ]
-"4128" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1240</SUB>> ]
-"4148" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>1242</SUB>> ]
-"4153" [label = <(FIELD_IDENTIFIER,GetI,GetI)<SUB>1242</SUB>> ]
-"4111" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1239</SUB>> ]
-"4115" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1239</SUB>> ]
-"4122" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1239</SUB>> ]
-"4129" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1240</SUB>> ]
-"4133" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1240</SUB>> ]
-"4140" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1240</SUB>> ]
-"4116" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1239</SUB>> ]
-"4134" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1240</SUB>> ]
-"4117" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1239</SUB>> ]
-"4119" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1239</SUB>> ]
-"4135" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1240</SUB>> ]
-"4137" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1240</SUB>> ]
-"4100" [label = <(METHOD,CallIntMethodV)<SUB>1238</SUB>> ]
-"4154" [label = <(METHOD_RETURN,jint)<SUB>1238</SUB>> ]
-  "4106" -> "4111" 
-  "4106" -> "4124" 
-  "4124" -> "4129" 
-  "4124" -> "4143" 
-  "4143" -> "4148" 
-  "4145" -> "4154" 
-  "4146" -> "4145" 
-  "4147" -> "4146" 
-  "4110" -> "4117" 
-  "4110" -> "4124" 
-  "4128" -> "4135" 
-  "4128" -> "4143" 
-  "4148" -> "4153" 
-  "4153" -> "4147" 
-  "4111" -> "4110" 
-  "4115" -> "4122" 
-  "4122" -> "4154" 
-  "4129" -> "4128" 
-  "4133" -> "4140" 
-  "4140" -> "4154" 
-  "4116" -> "4115" 
-  "4134" -> "4133" 
-  "4117" -> "4119" 
-  "4119" -> "4116" 
-  "4135" -> "4137" 
-  "4137" -> "4134" 
-  "4100" -> "4106" 
+digraph "CallLongMethodA" {  
+"4147" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1193</SUB>> ]
+"4165" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1194</SUB>> ]
+"4184" [label = <(soa,soa(env))<SUB>1195</SUB>> ]
+"4186" [label = <(RETURN,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetJ();,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetJ();)<SUB>1196</SUB>> ]
+"4187" [label = <(GetJ,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetJ())<SUB>1196</SUB>> ]
+"4188" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetJ)<SUB>1196</SUB>> ]
+"4151" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1193</SUB>> ]
+"4169" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1194</SUB>> ]
+"4189" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>1196</SUB>> ]
+"4194" [label = <(FIELD_IDENTIFIER,GetJ,GetJ)<SUB>1196</SUB>> ]
+"4152" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1193</SUB>> ]
+"4156" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1193</SUB>> ]
+"4163" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1193</SUB>> ]
+"4170" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1194</SUB>> ]
+"4174" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1194</SUB>> ]
+"4181" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1194</SUB>> ]
+"4157" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1193</SUB>> ]
+"4175" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1194</SUB>> ]
+"4158" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1193</SUB>> ]
+"4160" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1193</SUB>> ]
+"4176" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1194</SUB>> ]
+"4178" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1194</SUB>> ]
+"4141" [label = <(METHOD,CallLongMethodA)<SUB>1192</SUB>> ]
+"4195" [label = <(METHOD_RETURN,jlong)<SUB>1192</SUB>> ]
+  "4147" -> "4152" 
+  "4147" -> "4165" 
+  "4165" -> "4170" 
+  "4165" -> "4184" 
+  "4184" -> "4189" 
+  "4186" -> "4195" 
+  "4187" -> "4186" 
+  "4188" -> "4187" 
+  "4151" -> "4158" 
+  "4151" -> "4165" 
+  "4169" -> "4176" 
+  "4169" -> "4184" 
+  "4189" -> "4194" 
+  "4194" -> "4188" 
+  "4152" -> "4151" 
+  "4156" -> "4163" 
+  "4163" -> "4195" 
+  "4170" -> "4169" 
+  "4174" -> "4181" 
+  "4181" -> "4195" 
+  "4157" -> "4156" 
+  "4175" -> "4174" 
+  "4158" -> "4160" 
+  "4160" -> "4157" 
+  "4176" -> "4178" 
+  "4178" -> "4175" 
+  "4141" -> "4147" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/92-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/92-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/92-cfg.dot	2023-06-07 19:35:28.267384345 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/92-cfg.dot	2023-06-07 19:35:34.797383774 +0330
@@ -1,53 +1,61 @@
-digraph "CallIntMethodA" {  
-"4162" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1246</SUB>> ]
-"4180" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1247</SUB>> ]
-"4199" [label = <(soa,soa(env))<SUB>1248</SUB>> ]
-"4201" [label = <(RETURN,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetI();,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetI();)<SUB>1249</SUB>> ]
-"4202" [label = <(GetI,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetI())<SUB>1249</SUB>> ]
-"4203" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetI)<SUB>1249</SUB>> ]
-"4166" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1246</SUB>> ]
-"4184" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1247</SUB>> ]
-"4204" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>1249</SUB>> ]
-"4209" [label = <(FIELD_IDENTIFIER,GetI,GetI)<SUB>1249</SUB>> ]
-"4167" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1246</SUB>> ]
-"4171" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1246</SUB>> ]
-"4178" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1246</SUB>> ]
-"4185" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1247</SUB>> ]
-"4189" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1247</SUB>> ]
-"4196" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1247</SUB>> ]
-"4172" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1246</SUB>> ]
-"4190" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1247</SUB>> ]
-"4173" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1246</SUB>> ]
-"4175" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1246</SUB>> ]
-"4191" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1247</SUB>> ]
-"4193" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1247</SUB>> ]
-"4156" [label = <(METHOD,CallIntMethodA)<SUB>1245</SUB>> ]
-"4210" [label = <(METHOD_RETURN,jint)<SUB>1245</SUB>> ]
-  "4162" -> "4167" 
-  "4162" -> "4180" 
-  "4180" -> "4185" 
-  "4180" -> "4199" 
-  "4199" -> "4204" 
-  "4201" -> "4210" 
-  "4202" -> "4201" 
-  "4203" -> "4202" 
-  "4166" -> "4173" 
-  "4166" -> "4180" 
-  "4184" -> "4191" 
-  "4184" -> "4199" 
-  "4204" -> "4209" 
-  "4209" -> "4203" 
-  "4167" -> "4166" 
-  "4171" -> "4178" 
-  "4178" -> "4210" 
-  "4185" -> "4184" 
-  "4189" -> "4196" 
-  "4196" -> "4210" 
-  "4172" -> "4171" 
-  "4190" -> "4189" 
-  "4173" -> "4175" 
-  "4175" -> "4172" 
-  "4191" -> "4193" 
-  "4193" -> "4190" 
-  "4156" -> "4162" 
+digraph "CallShortMethod" {  
+"4203" [label = <(va_start,va_start(ap, mid))<SUB>1201</SUB>> ]
+"4207" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1202</SUB>> ]
+"4210" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1203</SUB>> ]
+"4228" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1204</SUB>> ]
+"4247" [label = <(soa,soa(env))<SUB>1205</SUB>> ]
+"4250" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap)))<SUB>1206</SUB>> ]
+"4256" [label = <(RETURN,return result.GetS();,return result.GetS();)<SUB>1207</SUB>> ]
+"4208" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1202</SUB>> ]
+"4251" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>1206</SUB>> ]
+"4257" [label = <(GetS,result.GetS())<SUB>1207</SUB>> ]
+"4258" [label = <(&lt;operator&gt;.fieldAccess,result.GetS)<SUB>1207</SUB>> ]
+"4214" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1203</SUB>> ]
+"4232" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1204</SUB>> ]
+"4260" [label = <(FIELD_IDENTIFIER,GetS,GetS)<SUB>1207</SUB>> ]
+"4215" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1203</SUB>> ]
+"4219" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1203</SUB>> ]
+"4226" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1203</SUB>> ]
+"4233" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1204</SUB>> ]
+"4237" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1204</SUB>> ]
+"4244" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1204</SUB>> ]
+"4220" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1203</SUB>> ]
+"4238" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1204</SUB>> ]
+"4221" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1203</SUB>> ]
+"4223" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1203</SUB>> ]
+"4239" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1204</SUB>> ]
+"4241" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1204</SUB>> ]
+"4197" [label = <(METHOD,CallShortMethod)<SUB>1199</SUB>> ]
+"4261" [label = <(METHOD_RETURN,jshort)<SUB>1199</SUB>> ]
+  "4203" -> "4208" 
+  "4207" -> "4210" 
+  "4210" -> "4215" 
+  "4210" -> "4228" 
+  "4228" -> "4233" 
+  "4228" -> "4247" 
+  "4247" -> "4251" 
+  "4250" -> "4260" 
+  "4256" -> "4261" 
+  "4208" -> "4207" 
+  "4251" -> "4250" 
+  "4257" -> "4256" 
+  "4258" -> "4257" 
+  "4214" -> "4221" 
+  "4214" -> "4228" 
+  "4232" -> "4239" 
+  "4232" -> "4247" 
+  "4260" -> "4258" 
+  "4215" -> "4214" 
+  "4219" -> "4226" 
+  "4226" -> "4261" 
+  "4233" -> "4232" 
+  "4237" -> "4244" 
+  "4244" -> "4261" 
+  "4220" -> "4219" 
+  "4238" -> "4237" 
+  "4221" -> "4223" 
+  "4223" -> "4220" 
+  "4239" -> "4241" 
+  "4241" -> "4238" 
+  "4197" -> "4203" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/93-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/93-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/93-cfg.dot	2023-06-07 19:35:28.277384343 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/93-cfg.dot	2023-06-07 19:35:34.797383774 +0330
@@ -1,61 +1,53 @@
-digraph "CallLongMethod" {  
-"4218" [label = <(va_start,va_start(ap, mid))<SUB>1254</SUB>> ]
-"4222" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1255</SUB>> ]
-"4225" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1256</SUB>> ]
-"4243" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1257</SUB>> ]
-"4262" [label = <(soa,soa(env))<SUB>1258</SUB>> ]
-"4265" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap)))<SUB>1259</SUB>> ]
-"4271" [label = <(RETURN,return result.GetJ();,return result.GetJ();)<SUB>1260</SUB>> ]
-"4223" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1255</SUB>> ]
-"4266" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>1259</SUB>> ]
-"4272" [label = <(GetJ,result.GetJ())<SUB>1260</SUB>> ]
-"4273" [label = <(&lt;operator&gt;.fieldAccess,result.GetJ)<SUB>1260</SUB>> ]
-"4229" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1256</SUB>> ]
-"4247" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1257</SUB>> ]
-"4275" [label = <(FIELD_IDENTIFIER,GetJ,GetJ)<SUB>1260</SUB>> ]
-"4230" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1256</SUB>> ]
-"4234" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1256</SUB>> ]
-"4241" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1256</SUB>> ]
-"4248" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1257</SUB>> ]
-"4252" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1257</SUB>> ]
-"4259" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1257</SUB>> ]
-"4235" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1256</SUB>> ]
-"4253" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1257</SUB>> ]
-"4236" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1256</SUB>> ]
-"4238" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1256</SUB>> ]
-"4254" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1257</SUB>> ]
-"4256" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1257</SUB>> ]
-"4212" [label = <(METHOD,CallLongMethod)<SUB>1252</SUB>> ]
-"4276" [label = <(METHOD_RETURN,jlong)<SUB>1252</SUB>> ]
-  "4218" -> "4223" 
-  "4222" -> "4225" 
-  "4225" -> "4230" 
-  "4225" -> "4243" 
-  "4243" -> "4248" 
-  "4243" -> "4262" 
-  "4262" -> "4266" 
-  "4265" -> "4275" 
-  "4271" -> "4276" 
-  "4223" -> "4222" 
-  "4266" -> "4265" 
-  "4272" -> "4271" 
-  "4273" -> "4272" 
-  "4229" -> "4236" 
-  "4229" -> "4243" 
-  "4247" -> "4254" 
-  "4247" -> "4262" 
-  "4275" -> "4273" 
-  "4230" -> "4229" 
-  "4234" -> "4241" 
-  "4241" -> "4276" 
-  "4248" -> "4247" 
-  "4252" -> "4259" 
-  "4259" -> "4276" 
-  "4235" -> "4234" 
-  "4253" -> "4252" 
-  "4236" -> "4238" 
-  "4238" -> "4235" 
-  "4254" -> "4256" 
-  "4256" -> "4253" 
-  "4212" -> "4218" 
+digraph "CallShortMethodV" {  
+"4269" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1211</SUB>> ]
+"4287" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1212</SUB>> ]
+"4306" [label = <(soa,soa(env))<SUB>1213</SUB>> ]
+"4308" [label = <(RETURN,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetS();,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetS();)<SUB>1214</SUB>> ]
+"4309" [label = <(GetS,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetS())<SUB>1214</SUB>> ]
+"4310" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetS)<SUB>1214</SUB>> ]
+"4273" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1211</SUB>> ]
+"4291" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1212</SUB>> ]
+"4311" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>1214</SUB>> ]
+"4316" [label = <(FIELD_IDENTIFIER,GetS,GetS)<SUB>1214</SUB>> ]
+"4274" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1211</SUB>> ]
+"4278" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1211</SUB>> ]
+"4285" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1211</SUB>> ]
+"4292" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1212</SUB>> ]
+"4296" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1212</SUB>> ]
+"4303" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1212</SUB>> ]
+"4279" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1211</SUB>> ]
+"4297" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1212</SUB>> ]
+"4280" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1211</SUB>> ]
+"4282" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1211</SUB>> ]
+"4298" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1212</SUB>> ]
+"4300" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1212</SUB>> ]
+"4263" [label = <(METHOD,CallShortMethodV)<SUB>1210</SUB>> ]
+"4317" [label = <(METHOD_RETURN,jshort)<SUB>1210</SUB>> ]
+  "4269" -> "4274" 
+  "4269" -> "4287" 
+  "4287" -> "4292" 
+  "4287" -> "4306" 
+  "4306" -> "4311" 
+  "4308" -> "4317" 
+  "4309" -> "4308" 
+  "4310" -> "4309" 
+  "4273" -> "4280" 
+  "4273" -> "4287" 
+  "4291" -> "4298" 
+  "4291" -> "4306" 
+  "4311" -> "4316" 
+  "4316" -> "4310" 
+  "4274" -> "4273" 
+  "4278" -> "4285" 
+  "4285" -> "4317" 
+  "4292" -> "4291" 
+  "4296" -> "4303" 
+  "4303" -> "4317" 
+  "4279" -> "4278" 
+  "4297" -> "4296" 
+  "4280" -> "4282" 
+  "4282" -> "4279" 
+  "4298" -> "4300" 
+  "4300" -> "4297" 
+  "4263" -> "4269" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/94-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/94-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/94-cfg.dot	2023-06-07 19:35:28.277384343 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/94-cfg.dot	2023-06-07 19:35:34.797383774 +0330
@@ -1,53 +1,53 @@
-digraph "CallLongMethodV" {  
-"4284" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1264</SUB>> ]
-"4302" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1265</SUB>> ]
-"4321" [label = <(soa,soa(env))<SUB>1266</SUB>> ]
-"4323" [label = <(RETURN,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetJ();,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetJ();)<SUB>1267</SUB>> ]
-"4324" [label = <(GetJ,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetJ())<SUB>1267</SUB>> ]
-"4325" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetJ)<SUB>1267</SUB>> ]
-"4288" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1264</SUB>> ]
-"4306" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1265</SUB>> ]
-"4326" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>1267</SUB>> ]
-"4331" [label = <(FIELD_IDENTIFIER,GetJ,GetJ)<SUB>1267</SUB>> ]
-"4289" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1264</SUB>> ]
-"4293" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1264</SUB>> ]
-"4300" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1264</SUB>> ]
-"4307" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1265</SUB>> ]
-"4311" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1265</SUB>> ]
-"4318" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1265</SUB>> ]
-"4294" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1264</SUB>> ]
-"4312" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1265</SUB>> ]
-"4295" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1264</SUB>> ]
-"4297" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1264</SUB>> ]
-"4313" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1265</SUB>> ]
-"4315" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1265</SUB>> ]
-"4278" [label = <(METHOD,CallLongMethodV)<SUB>1263</SUB>> ]
-"4332" [label = <(METHOD_RETURN,jlong)<SUB>1263</SUB>> ]
-  "4284" -> "4289" 
-  "4284" -> "4302" 
-  "4302" -> "4307" 
-  "4302" -> "4321" 
-  "4321" -> "4326" 
-  "4323" -> "4332" 
-  "4324" -> "4323" 
-  "4325" -> "4324" 
-  "4288" -> "4295" 
-  "4288" -> "4302" 
-  "4306" -> "4313" 
-  "4306" -> "4321" 
-  "4326" -> "4331" 
-  "4331" -> "4325" 
-  "4289" -> "4288" 
-  "4293" -> "4300" 
-  "4300" -> "4332" 
-  "4307" -> "4306" 
-  "4311" -> "4318" 
-  "4318" -> "4332" 
-  "4294" -> "4293" 
-  "4312" -> "4311" 
-  "4295" -> "4297" 
-  "4297" -> "4294" 
-  "4313" -> "4315" 
-  "4315" -> "4312" 
-  "4278" -> "4284" 
+digraph "CallShortMethodA" {  
+"4325" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1218</SUB>> ]
+"4343" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1219</SUB>> ]
+"4362" [label = <(soa,soa(env))<SUB>1220</SUB>> ]
+"4364" [label = <(RETURN,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetS();,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetS();)<SUB>1221</SUB>> ]
+"4365" [label = <(GetS,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetS())<SUB>1221</SUB>> ]
+"4366" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetS)<SUB>1221</SUB>> ]
+"4329" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1218</SUB>> ]
+"4347" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1219</SUB>> ]
+"4367" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>1221</SUB>> ]
+"4372" [label = <(FIELD_IDENTIFIER,GetS,GetS)<SUB>1221</SUB>> ]
+"4330" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1218</SUB>> ]
+"4334" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1218</SUB>> ]
+"4341" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1218</SUB>> ]
+"4348" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1219</SUB>> ]
+"4352" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1219</SUB>> ]
+"4359" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1219</SUB>> ]
+"4335" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1218</SUB>> ]
+"4353" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1219</SUB>> ]
+"4336" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1218</SUB>> ]
+"4338" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1218</SUB>> ]
+"4354" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1219</SUB>> ]
+"4356" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1219</SUB>> ]
+"4319" [label = <(METHOD,CallShortMethodA)<SUB>1217</SUB>> ]
+"4373" [label = <(METHOD_RETURN,jshort)<SUB>1217</SUB>> ]
+  "4325" -> "4330" 
+  "4325" -> "4343" 
+  "4343" -> "4348" 
+  "4343" -> "4362" 
+  "4362" -> "4367" 
+  "4364" -> "4373" 
+  "4365" -> "4364" 
+  "4366" -> "4365" 
+  "4329" -> "4336" 
+  "4329" -> "4343" 
+  "4347" -> "4354" 
+  "4347" -> "4362" 
+  "4367" -> "4372" 
+  "4372" -> "4366" 
+  "4330" -> "4329" 
+  "4334" -> "4341" 
+  "4341" -> "4373" 
+  "4348" -> "4347" 
+  "4352" -> "4359" 
+  "4359" -> "4373" 
+  "4335" -> "4334" 
+  "4353" -> "4352" 
+  "4336" -> "4338" 
+  "4338" -> "4335" 
+  "4354" -> "4356" 
+  "4356" -> "4353" 
+  "4319" -> "4325" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/95-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/95-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/95-cfg.dot	2023-06-07 19:35:28.277384343 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/95-cfg.dot	2023-06-07 19:35:34.797383774 +0330
@@ -1,53 +1,51 @@
-digraph "CallLongMethodA" {  
-"4340" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1271</SUB>> ]
-"4358" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1272</SUB>> ]
-"4377" [label = <(soa,soa(env))<SUB>1273</SUB>> ]
-"4379" [label = <(RETURN,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetJ();,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetJ();)<SUB>1274</SUB>> ]
-"4380" [label = <(GetJ,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetJ())<SUB>1274</SUB>> ]
-"4381" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetJ)<SUB>1274</SUB>> ]
-"4344" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1271</SUB>> ]
-"4362" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1272</SUB>> ]
-"4382" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>1274</SUB>> ]
-"4387" [label = <(FIELD_IDENTIFIER,GetJ,GetJ)<SUB>1274</SUB>> ]
-"4345" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1271</SUB>> ]
-"4349" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1271</SUB>> ]
-"4356" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1271</SUB>> ]
-"4363" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1272</SUB>> ]
-"4367" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1272</SUB>> ]
-"4374" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1272</SUB>> ]
-"4350" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1271</SUB>> ]
-"4368" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1272</SUB>> ]
-"4351" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1271</SUB>> ]
-"4353" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1271</SUB>> ]
-"4369" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1272</SUB>> ]
-"4371" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1272</SUB>> ]
-"4334" [label = <(METHOD,CallLongMethodA)<SUB>1270</SUB>> ]
-"4388" [label = <(METHOD_RETURN,jlong)<SUB>1270</SUB>> ]
-  "4340" -> "4345" 
-  "4340" -> "4358" 
-  "4358" -> "4363" 
-  "4358" -> "4377" 
-  "4377" -> "4382" 
-  "4379" -> "4388" 
-  "4380" -> "4379" 
-  "4381" -> "4380" 
-  "4344" -> "4351" 
-  "4344" -> "4358" 
-  "4362" -> "4369" 
-  "4362" -> "4377" 
-  "4382" -> "4387" 
-  "4387" -> "4381" 
-  "4345" -> "4344" 
-  "4349" -> "4356" 
-  "4356" -> "4388" 
-  "4363" -> "4362" 
-  "4367" -> "4374" 
-  "4374" -> "4388" 
-  "4350" -> "4349" 
-  "4368" -> "4367" 
-  "4351" -> "4353" 
-  "4353" -> "4350" 
-  "4369" -> "4371" 
-  "4371" -> "4368" 
-  "4334" -> "4340" 
+digraph "CallVoidMethod" {  
+"4381" [label = <(va_start,va_start(ap, mid))<SUB>1226</SUB>> ]
+"4385" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1227</SUB>> ]
+"4388" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1228</SUB>> ]
+"4405" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1229</SUB>> ]
+"4423" [label = <(soa,soa(env))<SUB>1230</SUB>> ]
+"4425" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>1231</SUB>> ]
+"4386" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1227</SUB>> ]
+"4392" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1228</SUB>> ]
+"4409" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1229</SUB>> ]
+"4393" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1228</SUB>> ]
+"4397" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1228</SUB>> ]
+"4404" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1228</SUB>> ]
+"4410" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1229</SUB>> ]
+"4414" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1229</SUB>> ]
+"4421" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1229</SUB>> ]
+"4398" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1228</SUB>> ]
+"4415" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1229</SUB>> ]
+"4399" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1228</SUB>> ]
+"4401" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1228</SUB>> ]
+"4416" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1229</SUB>> ]
+"4418" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1229</SUB>> ]
+"4375" [label = <(METHOD,CallVoidMethod)<SUB>1224</SUB>> ]
+"4430" [label = <(METHOD_RETURN,void)<SUB>1224</SUB>> ]
+  "4381" -> "4386" 
+  "4385" -> "4388" 
+  "4388" -> "4393" 
+  "4388" -> "4405" 
+  "4405" -> "4410" 
+  "4405" -> "4423" 
+  "4423" -> "4425" 
+  "4425" -> "4430" 
+  "4386" -> "4385" 
+  "4392" -> "4399" 
+  "4392" -> "4405" 
+  "4409" -> "4416" 
+  "4409" -> "4423" 
+  "4393" -> "4392" 
+  "4397" -> "4404" 
+  "4404" -> "4430" 
+  "4410" -> "4409" 
+  "4414" -> "4421" 
+  "4421" -> "4430" 
+  "4398" -> "4397" 
+  "4415" -> "4414" 
+  "4399" -> "4401" 
+  "4401" -> "4398" 
+  "4416" -> "4418" 
+  "4418" -> "4415" 
+  "4375" -> "4381" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/96-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/96-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/96-cfg.dot	2023-06-07 19:35:28.277384343 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/96-cfg.dot	2023-06-07 19:35:34.797383774 +0330
@@ -1,61 +1,45 @@
-digraph "CallShortMethod" {  
-"4396" [label = <(va_start,va_start(ap, mid))<SUB>1279</SUB>> ]
-"4400" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1280</SUB>> ]
-"4403" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1281</SUB>> ]
-"4421" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1282</SUB>> ]
-"4440" [label = <(soa,soa(env))<SUB>1283</SUB>> ]
-"4443" [label = <(result,result(InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap)))<SUB>1284</SUB>> ]
-"4449" [label = <(RETURN,return result.GetS();,return result.GetS();)<SUB>1285</SUB>> ]
-"4401" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1280</SUB>> ]
-"4444" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>1284</SUB>> ]
-"4450" [label = <(GetS,result.GetS())<SUB>1285</SUB>> ]
-"4451" [label = <(&lt;operator&gt;.fieldAccess,result.GetS)<SUB>1285</SUB>> ]
-"4407" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1281</SUB>> ]
-"4425" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1282</SUB>> ]
-"4453" [label = <(FIELD_IDENTIFIER,GetS,GetS)<SUB>1285</SUB>> ]
-"4408" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1281</SUB>> ]
-"4412" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1281</SUB>> ]
-"4419" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1281</SUB>> ]
-"4426" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1282</SUB>> ]
-"4430" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1282</SUB>> ]
-"4437" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1282</SUB>> ]
-"4413" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1281</SUB>> ]
-"4431" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1282</SUB>> ]
-"4414" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1281</SUB>> ]
-"4416" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1281</SUB>> ]
-"4432" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1282</SUB>> ]
-"4434" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1282</SUB>> ]
-"4390" [label = <(METHOD,CallShortMethod)<SUB>1277</SUB>> ]
-"4454" [label = <(METHOD_RETURN,jshort)<SUB>1277</SUB>> ]
-  "4396" -> "4401" 
-  "4400" -> "4403" 
-  "4403" -> "4408" 
-  "4403" -> "4421" 
-  "4421" -> "4426" 
-  "4421" -> "4440" 
-  "4440" -> "4444" 
-  "4443" -> "4453" 
-  "4449" -> "4454" 
-  "4401" -> "4400" 
-  "4444" -> "4443" 
-  "4450" -> "4449" 
-  "4451" -> "4450" 
-  "4407" -> "4414" 
-  "4407" -> "4421" 
-  "4425" -> "4432" 
-  "4425" -> "4440" 
-  "4453" -> "4451" 
-  "4408" -> "4407" 
-  "4412" -> "4419" 
-  "4419" -> "4454" 
-  "4426" -> "4425" 
-  "4430" -> "4437" 
-  "4437" -> "4454" 
-  "4413" -> "4412" 
-  "4431" -> "4430" 
-  "4414" -> "4416" 
-  "4416" -> "4413" 
-  "4432" -> "4434" 
-  "4434" -> "4431" 
-  "4390" -> "4396" 
+digraph "CallVoidMethodV" {  
+"4438" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1235</SUB>> ]
+"4455" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1236</SUB>> ]
+"4473" [label = <(soa,soa(env))<SUB>1237</SUB>> ]
+"4475" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>1238</SUB>> ]
+"4442" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1235</SUB>> ]
+"4459" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1236</SUB>> ]
+"4443" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1235</SUB>> ]
+"4447" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1235</SUB>> ]
+"4454" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1235</SUB>> ]
+"4460" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1236</SUB>> ]
+"4464" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1236</SUB>> ]
+"4471" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1236</SUB>> ]
+"4448" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1235</SUB>> ]
+"4465" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1236</SUB>> ]
+"4449" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1235</SUB>> ]
+"4451" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1235</SUB>> ]
+"4466" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1236</SUB>> ]
+"4468" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1236</SUB>> ]
+"4432" [label = <(METHOD,CallVoidMethodV)<SUB>1234</SUB>> ]
+"4480" [label = <(METHOD_RETURN,void)<SUB>1234</SUB>> ]
+  "4438" -> "4443" 
+  "4438" -> "4455" 
+  "4455" -> "4460" 
+  "4455" -> "4473" 
+  "4473" -> "4475" 
+  "4475" -> "4480" 
+  "4442" -> "4449" 
+  "4442" -> "4455" 
+  "4459" -> "4466" 
+  "4459" -> "4473" 
+  "4443" -> "4442" 
+  "4447" -> "4454" 
+  "4454" -> "4480" 
+  "4460" -> "4459" 
+  "4464" -> "4471" 
+  "4471" -> "4480" 
+  "4448" -> "4447" 
+  "4465" -> "4464" 
+  "4449" -> "4451" 
+  "4451" -> "4448" 
+  "4466" -> "4468" 
+  "4468" -> "4465" 
+  "4432" -> "4438" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/97-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/97-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/97-cfg.dot	2023-06-07 19:35:28.277384343 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/97-cfg.dot	2023-06-07 19:35:34.807383771 +0330
@@ -1,53 +1,45 @@
-digraph "CallShortMethodV" {  
-"4462" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1289</SUB>> ]
-"4480" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1290</SUB>> ]
-"4499" [label = <(soa,soa(env))<SUB>1291</SUB>> ]
-"4501" [label = <(RETURN,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetS();,return InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetS();)<SUB>1292</SUB>> ]
-"4502" [label = <(GetS,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetS())<SUB>1292</SUB>> ]
-"4503" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args).GetS)<SUB>1292</SUB>> ]
-"4466" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1289</SUB>> ]
-"4484" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1290</SUB>> ]
-"4504" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args))<SUB>1292</SUB>> ]
-"4509" [label = <(FIELD_IDENTIFIER,GetS,GetS)<SUB>1292</SUB>> ]
-"4467" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1289</SUB>> ]
-"4471" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1289</SUB>> ]
-"4478" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1289</SUB>> ]
-"4485" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1290</SUB>> ]
-"4489" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1290</SUB>> ]
-"4496" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1290</SUB>> ]
-"4472" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1289</SUB>> ]
-"4490" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1290</SUB>> ]
-"4473" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1289</SUB>> ]
-"4475" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1289</SUB>> ]
-"4491" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1290</SUB>> ]
-"4493" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1290</SUB>> ]
-"4456" [label = <(METHOD,CallShortMethodV)<SUB>1288</SUB>> ]
-"4510" [label = <(METHOD_RETURN,jshort)<SUB>1288</SUB>> ]
-  "4462" -> "4467" 
-  "4462" -> "4480" 
-  "4480" -> "4485" 
-  "4480" -> "4499" 
-  "4499" -> "4504" 
-  "4501" -> "4510" 
-  "4502" -> "4501" 
-  "4503" -> "4502" 
-  "4466" -> "4473" 
-  "4466" -> "4480" 
-  "4484" -> "4491" 
-  "4484" -> "4499" 
-  "4504" -> "4509" 
-  "4509" -> "4503" 
-  "4467" -> "4466" 
-  "4471" -> "4478" 
-  "4478" -> "4510" 
-  "4485" -> "4484" 
-  "4489" -> "4496" 
-  "4496" -> "4510" 
-  "4472" -> "4471" 
-  "4490" -> "4489" 
-  "4473" -> "4475" 
-  "4475" -> "4472" 
-  "4491" -> "4493" 
-  "4493" -> "4490" 
-  "4456" -> "4462" 
+digraph "CallVoidMethodA" {  
+"4488" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1242</SUB>> ]
+"4505" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1243</SUB>> ]
+"4523" [label = <(soa,soa(env))<SUB>1244</SUB>> ]
+"4525" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>1245</SUB>> ]
+"4492" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1242</SUB>> ]
+"4509" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1243</SUB>> ]
+"4493" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1242</SUB>> ]
+"4497" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1242</SUB>> ]
+"4504" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1242</SUB>> ]
+"4510" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1243</SUB>> ]
+"4514" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1243</SUB>> ]
+"4521" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1243</SUB>> ]
+"4498" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1242</SUB>> ]
+"4515" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1243</SUB>> ]
+"4499" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1242</SUB>> ]
+"4501" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1242</SUB>> ]
+"4516" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1243</SUB>> ]
+"4518" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1243</SUB>> ]
+"4482" [label = <(METHOD,CallVoidMethodA)<SUB>1241</SUB>> ]
+"4530" [label = <(METHOD_RETURN,void)<SUB>1241</SUB>> ]
+  "4488" -> "4493" 
+  "4488" -> "4505" 
+  "4505" -> "4510" 
+  "4505" -> "4523" 
+  "4523" -> "4525" 
+  "4525" -> "4530" 
+  "4492" -> "4499" 
+  "4492" -> "4505" 
+  "4509" -> "4516" 
+  "4509" -> "4523" 
+  "4493" -> "4492" 
+  "4497" -> "4504" 
+  "4504" -> "4530" 
+  "4510" -> "4509" 
+  "4514" -> "4521" 
+  "4521" -> "4530" 
+  "4498" -> "4497" 
+  "4515" -> "4514" 
+  "4499" -> "4501" 
+  "4501" -> "4498" 
+  "4516" -> "4518" 
+  "4518" -> "4515" 
+  "4482" -> "4488" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/98-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/98-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/98-cfg.dot	2023-06-07 19:35:28.277384343 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/98-cfg.dot	2023-06-07 19:35:34.807383771 +0330
@@ -1,53 +1,71 @@
-digraph "CallShortMethodA" {  
-"4518" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1296</SUB>> ]
-"4536" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1297</SUB>> ]
-"4555" [label = <(soa,soa(env))<SUB>1298</SUB>> ]
-"4557" [label = <(RETURN,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetS();,return InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetS();)<SUB>1299</SUB>> ]
-"4558" [label = <(GetS,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetS())<SUB>1299</SUB>> ]
-"4559" [label = <(&lt;operator&gt;.fieldAccess,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args).GetS)<SUB>1299</SUB>> ]
-"4522" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1296</SUB>> ]
-"4540" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1297</SUB>> ]
-"4560" [label = <(InvokeVirtualOrInterfaceWithJValues,InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args))<SUB>1299</SUB>> ]
-"4565" [label = <(FIELD_IDENTIFIER,GetS,GetS)<SUB>1299</SUB>> ]
-"4523" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1296</SUB>> ]
-"4527" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1296</SUB>> ]
-"4534" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(obj))<SUB>1296</SUB>> ]
-"4541" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1297</SUB>> ]
-"4545" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1297</SUB>> ]
-"4552" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid),CHECK_NON_NULL_ARGUMENT_RETURN_ZERO(mid))<SUB>1297</SUB>> ]
-"4528" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1296</SUB>> ]
-"4546" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1297</SUB>> ]
-"4529" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1296</SUB>> ]
-"4531" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1296</SUB>> ]
-"4547" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1297</SUB>> ]
-"4549" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1297</SUB>> ]
-"4512" [label = <(METHOD,CallShortMethodA)<SUB>1295</SUB>> ]
-"4566" [label = <(METHOD_RETURN,jshort)<SUB>1295</SUB>> ]
-  "4518" -> "4523" 
-  "4518" -> "4536" 
-  "4536" -> "4541" 
-  "4536" -> "4555" 
-  "4555" -> "4560" 
-  "4557" -> "4566" 
-  "4558" -> "4557" 
-  "4559" -> "4558" 
-  "4522" -> "4529" 
-  "4522" -> "4536" 
-  "4540" -> "4547" 
-  "4540" -> "4555" 
-  "4560" -> "4565" 
-  "4565" -> "4559" 
-  "4523" -> "4522" 
-  "4527" -> "4534" 
-  "4534" -> "4566" 
-  "4541" -> "4540" 
-  "4545" -> "4552" 
-  "4552" -> "4566" 
-  "4528" -> "4527" 
-  "4546" -> "4545" 
-  "4529" -> "4531" 
-  "4531" -> "4528" 
-  "4547" -> "4549" 
-  "4549" -> "4546" 
-  "4512" -> "4518" 
+digraph "CallNonvirtualObjectMethod" {  
+"4539" [label = <(va_start,va_start(ap, mid))<SUB>1250</SUB>> ]
+"4543" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1251</SUB>> ]
+"4546" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(obj))<SUB>1252</SUB>> ]
+"4564" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>1253</SUB>> ]
+"4583" [label = <(soa,soa(env))<SUB>1254</SUB>> ]
+"4586" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, ap)))<SUB>1255</SUB>> ]
+"4593" [label = <(&lt;operator&gt;.assignment,local_result = soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>1256</SUB>> ]
+"4605" [label = <(RETURN,return local_result;,return local_result;)<SUB>1257</SUB>> ]
+"4544" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1251</SUB>> ]
+"4587" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, ap))<SUB>1255</SUB>> ]
+"4595" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>1256</SUB>> ]
+"4596" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>1256</SUB>> ]
+"4601" [label = <(GetL,result.GetL())<SUB>1256</SUB>> ]
+"4550" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1252</SUB>> ]
+"4568" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1253</SUB>> ]
+"4597" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1256</SUB>> ]
+"4602" [label = <(&lt;operator&gt;.fieldAccess,result.GetL)<SUB>1256</SUB>> ]
+"4551" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1252</SUB>> ]
+"4555" [label = <(CHECK_NON_NULL_ARGUMENT(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1252</SUB>> ]
+"4562" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(obj),CHECK_NON_NULL_ARGUMENT(obj))<SUB>1252</SUB>> ]
+"4569" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1253</SUB>> ]
+"4573" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1253</SUB>> ]
+"4580" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>1253</SUB>> ]
+"4599" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1256</SUB>> ]
+"4604" [label = <(FIELD_IDENTIFIER,GetL,GetL)<SUB>1256</SUB>> ]
+"4556" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1252</SUB>> ]
+"4574" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1253</SUB>> ]
+"4557" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1252</SUB>> ]
+"4559" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1252</SUB>> ]
+"4575" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1253</SUB>> ]
+"4577" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1253</SUB>> ]
+"4532" [label = <(METHOD,CallNonvirtualObjectMethod)<SUB>1248</SUB>> ]
+"4607" [label = <(METHOD_RETURN,jobject)<SUB>1248</SUB>> ]
+  "4539" -> "4544" 
+  "4543" -> "4546" 
+  "4546" -> "4551" 
+  "4546" -> "4564" 
+  "4564" -> "4569" 
+  "4564" -> "4583" 
+  "4583" -> "4587" 
+  "4586" -> "4599" 
+  "4593" -> "4605" 
+  "4605" -> "4607" 
+  "4544" -> "4543" 
+  "4587" -> "4586" 
+  "4595" -> "4593" 
+  "4596" -> "4604" 
+  "4601" -> "4595" 
+  "4550" -> "4557" 
+  "4550" -> "4564" 
+  "4568" -> "4575" 
+  "4568" -> "4583" 
+  "4597" -> "4596" 
+  "4602" -> "4601" 
+  "4551" -> "4550" 
+  "4555" -> "4562" 
+  "4562" -> "4607" 
+  "4569" -> "4568" 
+  "4573" -> "4580" 
+  "4580" -> "4607" 
+  "4599" -> "4597" 
+  "4604" -> "4602" 
+  "4556" -> "4555" 
+  "4574" -> "4573" 
+  "4557" -> "4559" 
+  "4559" -> "4556" 
+  "4575" -> "4577" 
+  "4577" -> "4574" 
+  "4532" -> "4539" 
 }
diff -bur /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/99-cfg.dot /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/99-cfg.dot
--- /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/secure/out/99-cfg.dot	2023-06-07 19:35:28.277384343 +0330
+++ /home/mrt3acher/thesis-implementation/.avuln-workdir/code/CVE-2021-0394_7/vulnerable/out/99-cfg.dot	2023-06-07 19:35:34.807383771 +0330
@@ -1,51 +1,63 @@
-digraph "CallVoidMethod" {  
-"4574" [label = <(va_start,va_start(ap, mid))<SUB>1304</SUB>> ]
-"4578" [label = <(free_args_later,free_args_later(&amp;ap))<SUB>1305</SUB>> ]
-"4581" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1306</SUB>> ]
-"4598" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1307</SUB>> ]
-"4616" [label = <(soa,soa(env))<SUB>1308</SUB>> ]
-"4618" [label = <(InvokeVirtualOrInterfaceWithVarArgs,InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, ap))<SUB>1309</SUB>> ]
-"4579" [label = <(&lt;operator&gt;.addressOf,&amp;ap)<SUB>1305</SUB>> ]
-"4585" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1306</SUB>> ]
-"4602" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1307</SUB>> ]
-"4586" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1306</SUB>> ]
-"4590" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1306</SUB>> ]
-"4597" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(obj))<SUB>1306</SUB>> ]
-"4603" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1307</SUB>> ]
-"4607" [label = <(CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1307</SUB>> ]
-"4614" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid),CHECK_NON_NULL_ARGUMENT_RETURN_VOID(mid))<SUB>1307</SUB>> ]
-"4591" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1306</SUB>> ]
-"4608" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1307</SUB>> ]
-"4592" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1306</SUB>> ]
-"4594" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1306</SUB>> ]
-"4609" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1307</SUB>> ]
-"4611" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1307</SUB>> ]
-"4568" [label = <(METHOD,CallVoidMethod)<SUB>1302</SUB>> ]
-"4623" [label = <(METHOD_RETURN,void)<SUB>1302</SUB>> ]
-  "4574" -> "4579" 
-  "4578" -> "4581" 
-  "4581" -> "4586" 
-  "4581" -> "4598" 
-  "4598" -> "4603" 
-  "4598" -> "4616" 
-  "4616" -> "4618" 
-  "4618" -> "4623" 
-  "4579" -> "4578" 
-  "4585" -> "4592" 
-  "4585" -> "4598" 
-  "4602" -> "4609" 
-  "4602" -> "4616" 
-  "4586" -> "4585" 
-  "4590" -> "4597" 
-  "4597" -> "4623" 
-  "4603" -> "4602" 
-  "4607" -> "4614" 
-  "4614" -> "4623" 
-  "4591" -> "4590" 
-  "4608" -> "4607" 
-  "4592" -> "4594" 
-  "4594" -> "4591" 
-  "4609" -> "4611" 
-  "4611" -> "4608" 
-  "4568" -> "4574" 
+digraph "CallNonvirtualObjectMethodV" {  
+"4616" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(obj))<SUB>1262</SUB>> ]
+"4634" [label = <(CHECK_NON_NULL_ARGUMENT,CHECK_NON_NULL_ARGUMENT(mid))<SUB>1263</SUB>> ]
+"4653" [label = <(soa,soa(env))<SUB>1264</SUB>> ]
+"4656" [label = <(result,result(InvokeWithVarArgs(soa, obj, mid, args)))<SUB>1265</SUB>> ]
+"4662" [label = <(RETURN,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());,return soa.AddLocalReference&lt;jobject&gt;(result.GetL());)<SUB>1266</SUB>> ]
+"4657" [label = <(InvokeWithVarArgs,InvokeWithVarArgs(soa, obj, mid, args))<SUB>1265</SUB>> ]
+"4663" [label = <(&lt;operator&gt;.greaterThan,soa.AddLocalReference&lt;jobject&gt;(result.GetL()))<SUB>1266</SUB>> ]
+"4664" [label = <(&lt;operator&gt;.lessThan,soa.AddLocalReference&lt;jobject)<SUB>1266</SUB>> ]
+"4669" [label = <(GetL,result.GetL())<SUB>1266</SUB>> ]
+"4620" [label = <(UNLIKELY,UNLIKELY((obj) == nullptr))<SUB>1262</SUB>> ]
+"4638" [label = <(UNLIKELY,UNLIKELY((mid) == nullptr))<SUB>1263</SUB>> ]
+"4665" [label = <(&lt;operator&gt;.fieldAccess,soa.AddLocalReference)<SUB>1266</SUB>> ]
+"4670" [label = <(&lt;operator&gt;.fieldAccess,result.GetL)<SUB>1266</SUB>> ]
+"4621" [label = <(&lt;operator&gt;.equals,(obj) == nullptr)<SUB>1262</SUB>> ]
+"4625" [label = <(CHECK_NON_NULL_ARGUMENT(obj),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;obj == null&quot;))<SUB>1262</SUB>> ]
+"4632" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(obj),CHECK_NON_NULL_ARGUMENT(obj))<SUB>1262</SUB>> ]
+"4639" [label = <(&lt;operator&gt;.equals,(mid) == nullptr)<SUB>1263</SUB>> ]
+"4643" [label = <(CHECK_NON_NULL_ARGUMENT(mid),JavaVmExtFromEnv(env)-&gt;JniAbort(__FUNCTION__, &quot;mid == null&quot;))<SUB>1263</SUB>> ]
+"4650" [label = <(RETURN,CHECK_NON_NULL_ARGUMENT(mid),CHECK_NON_NULL_ARGUMENT(mid))<SUB>1263</SUB>> ]
+"4667" [label = <(FIELD_IDENTIFIER,AddLocalReference,AddLocalReference)<SUB>1266</SUB>> ]
+"4672" [label = <(FIELD_IDENTIFIER,GetL,GetL)<SUB>1266</SUB>> ]
+"4626" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1262</SUB>> ]
+"4644" [label = <(&lt;operator&gt;.indirectFieldAccess,JavaVmExtFromEnv(env)-&gt;JniAbort)<SUB>1263</SUB>> ]
+"4627" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1262</SUB>> ]
+"4629" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1262</SUB>> ]
+"4645" [label = <(JavaVmExtFromEnv,JavaVmExtFromEnv(env))<SUB>1263</SUB>> ]
+"4647" [label = <(FIELD_IDENTIFIER,JniAbort,JniAbort)<SUB>1263</SUB>> ]
+"4609" [label = <(METHOD,CallNonvirtualObjectMethodV)<SUB>1260</SUB>> ]
+"4673" [label = <(METHOD_RETURN,jobject)<SUB>1260</SUB>> ]
+  "4616" -> "4621" 
+  "4616" -> "4634" 
+  "4634" -> "4639" 
+  "4634" -> "4653" 
+  "4653" -> "4657" 
+  "4656" -> "4667" 
+  "4662" -> "4673" 
+  "4657" -> "4656" 
+  "4663" -> "4662" 
+  "4664" -> "4672" 
+  "4669" -> "4663" 
+  "4620" -> "4627" 
+  "4620" -> "4634" 
+  "4638" -> "4645" 
+  "4638" -> "4653" 
+  "4665" -> "4664" 
+  "4670" -> "4669" 
+  "4621" -> "4620" 
+  "4625" -> "4632" 
+  "4632" -> "4673" 
+  "4639" -> "4638" 
+  "4643" -> "4650" 
+  "4650" -> "4673" 
+  "4667" -> "4665" 
+  "4672" -> "4670" 
+  "4626" -> "4625" 
+  "4644" -> "4643" 
+  "4627" -> "4629" 
+  "4629" -> "4626" 
+  "4645" -> "4647" 
+  "4647" -> "4644" 
+  "4609" -> "4616" 
 }
